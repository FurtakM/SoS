// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5179 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2342 0 0
// PrepareBeta ;
  49: CALL 2731 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 10568 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3313 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4038 0 0
// PrepareRUBase_v2 ;
 877: CALL 4454 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 55436 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3925 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10425 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10425 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10425 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10425 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2048
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4782 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2017
// Say ( Brighton , DBrighton-F1a ) else
2003: LD_EXP 8
2007: PPUSH
2008: LD_STRING DBrighton-F1a
2010: PPUSH
2011: CALL_OW 88
2015: GO 2036
// begin Say ( Brighton , DBrighton-F1 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DBrighton-F1
2024: PPUSH
2025: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2029: LD_STRING C3
2031: PPUSH
2032: CALL_OW 337
// end ; DialogueOff ;
2036: CALL_OW 7
// JMM_Arrived := true ;
2040: LD_ADDR_EXP 5
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// end ;
2048: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2049: LD_EXP 5
2053: PUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_EXP 18
2061: PPUSH
2062: CALL_OW 292
2066: AND
2067: IFFALSE 2096
2069: GO 2071
2071: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2072: LD_EXP 18
2076: PPUSH
2077: LD_STRING DBurlak
2079: PPUSH
2080: CALL_OW 88
// Say ( JMM , DJMM ) ;
2084: LD_EXP 36
2088: PPUSH
2089: LD_STRING DJMM
2091: PPUSH
2092: CALL_OW 88
// end ;
2096: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2097: LD_INT 1
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: LD_INT 34
2115: PUSH
2116: LD_INT 9
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 35
2125: PUSH
2126: LD_INT 9
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: GREATER
2151: IFFALSE 2164
2153: GO 2155
2155: DISABLE
// begin LaserBuilt := true ;
2156: LD_ADDR_EXP 6
2160: PUSH
2161: LD_INT 1
2163: ST_TO_ADDR
// end ;
2164: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2165: LD_EXP 7
2169: PUSH
2170: LD_INT 6
2172: PPUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 35
2188: PUSH
2189: LD_INT 9
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 69
2208: PPUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 310
2218: PPUSH
2219: CALL_OW 74
2223: PPUSH
2224: CALL_OW 292
2228: AND
2229: IFFALSE 2265
2231: GO 2233
2233: DISABLE
// begin wait ( 0 0$5 ) ;
2234: LD_INT 175
2236: PPUSH
2237: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2241: LD_EXP 15
2245: PPUSH
2246: LD_STRING DDeath-Vse-2
2248: PPUSH
2249: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2253: LD_EXP 12
2257: PPUSH
2258: LD_STRING DDeath-Yas-2
2260: PPUSH
2261: CALL_OW 88
// end ;
2265: END
// every 0 0$1 trigger AssaultStarted do
2266: LD_EXP 7
2270: IFFALSE 2294
2272: GO 2274
2274: DISABLE
// begin wait ( 0 0$20 ) ;
2275: LD_INT 700
2277: PPUSH
2278: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2282: LD_EXP 13
2286: PPUSH
2287: LD_STRING DDeath-Pop-2
2289: PPUSH
2290: CALL_OW 88
// end ;
2294: END
// every 0 0$1 trigger MissionStart do
2295: LD_EXP 1
2299: IFFALSE 2341
2301: GO 2303
2303: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2304: LD_INT 1750
2306: PPUSH
2307: LD_INT 4900
2309: PPUSH
2310: CALL_OW 12
2314: PPUSH
2315: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2319: LD_INT 2
2321: PPUSH
2322: LD_INT 5
2324: PPUSH
2325: CALL_OW 12
2329: PPUSH
2330: LD_INT 12
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 55
// enable ;
2340: ENABLE
// end ; end_of_file
2341: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2342: LD_INT 0
2344: PPUSH
// uc_side := 1 ;
2345: LD_ADDR_OWVAR 20
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// hc_class = class_soldier ;
2353: LD_ADDR_OWVAR 28
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// uc_nation := nation_american ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// hc_sex = sex_male ;
2369: LD_ADDR_OWVAR 27
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// hc_importance = 110 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 110
2384: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2385: LD_ADDR_OWVAR 30
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 4
2395: PUSH
2396: LD_INT 5
2398: PUSH
2399: LD_INT 3
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2408: LD_ADDR_OWVAR 31
2412: PUSH
2413: LD_INT 9
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2431: LD_ADDR_OWVAR 29
2435: PUSH
2436: LD_INT 12
2438: PUSH
2439: LD_INT 10
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2446: LD_ADDR_OWVAR 26
2450: PUSH
2451: LD_STRING Gerard Brighton
2453: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2454: LD_ADDR_OWVAR 33
2458: PUSH
2459: LD_STRING Beta_Skirmish
2461: ST_TO_ADDR
// hc_face_number := 1 ;
2462: LD_ADDR_OWVAR 34
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// Brighton := CreateHuman ;
2470: LD_ADDR_EXP 8
2474: PUSH
2475: CALL_OW 44
2479: ST_TO_ADDR
// uc_nation := nation_american ;
2480: LD_ADDR_OWVAR 21
2484: PUSH
2485: LD_INT 1
2487: ST_TO_ADDR
// hc_importance = 80 ;
2488: LD_ADDR_OWVAR 32
2492: PUSH
2493: LD_INT 80
2495: ST_TO_ADDR
// hc_sex = sex_male ;
2496: LD_ADDR_OWVAR 27
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2504: LD_ADDR_OWVAR 30
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 5
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2527: LD_ADDR_OWVAR 31
2531: PUSH
2532: LD_INT 7
2534: PUSH
2535: LD_INT 6
2537: PUSH
2538: LD_INT 5
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2550: LD_ADDR_OWVAR 29
2554: PUSH
2555: LD_INT 10
2557: PUSH
2558: LD_INT 10
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: ST_TO_ADDR
// hc_name := Brian Palmer ;
2565: LD_ADDR_OWVAR 26
2569: PUSH
2570: LD_STRING Brian Palmer
2572: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2573: LD_ADDR_OWVAR 33
2577: PUSH
2578: LD_STRING Beta_Skirmish
2580: ST_TO_ADDR
// hc_face_number := 3 ;
2581: LD_ADDR_OWVAR 34
2585: PUSH
2586: LD_INT 3
2588: ST_TO_ADDR
// Palmer := CreateHuman ;
2589: LD_ADDR_EXP 9
2593: PUSH
2594: CALL_OW 44
2598: ST_TO_ADDR
// hc_class = class_scientistic ;
2599: LD_ADDR_OWVAR 28
2603: PUSH
2604: LD_INT 4
2606: ST_TO_ADDR
// uc_nation := nation_american ;
2607: LD_ADDR_OWVAR 21
2611: PUSH
2612: LD_INT 1
2614: ST_TO_ADDR
// hc_importance = 70 ;
2615: LD_ADDR_OWVAR 32
2619: PUSH
2620: LD_INT 70
2622: ST_TO_ADDR
// hc_sex = sex_female ;
2623: LD_ADDR_OWVAR 27
2627: PUSH
2628: LD_INT 2
2630: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2631: LD_ADDR_OWVAR 30
2635: PUSH
2636: LD_INT 3
2638: PUSH
2639: LD_INT 2
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2654: LD_ADDR_OWVAR 31
2658: PUSH
2659: LD_INT 4
2661: PUSH
2662: LD_INT 2
2664: PUSH
2665: LD_INT 5
2667: PUSH
2668: LD_INT 8
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2677: LD_ADDR_OWVAR 29
2681: PUSH
2682: LD_INT 10
2684: PUSH
2685: LD_INT 10
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: ST_TO_ADDR
// hc_name := Megan Armitage ;
2692: LD_ADDR_OWVAR 26
2696: PUSH
2697: LD_STRING Megan Armitage
2699: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2700: LD_ADDR_OWVAR 33
2704: PUSH
2705: LD_STRING Beta_Skirmish
2707: ST_TO_ADDR
// hc_face_number := 4 ;
2708: LD_ADDR_OWVAR 34
2712: PUSH
2713: LD_INT 4
2715: ST_TO_ADDR
// Megan := CreateHuman ;
2716: LD_ADDR_EXP 10
2720: PUSH
2721: CALL_OW 44
2725: ST_TO_ADDR
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
// uc_side := 1 ;
2738: LD_ADDR_OWVAR 20
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// uc_nation := nation_american ;
2746: LD_ADDR_OWVAR 21
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: LD_INT 22
2761: PUSH
2762: LD_INT 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 30
2771: PUSH
2772: LD_INT 32
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: FOR_IN
2789: IFFALSE 2844
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_INT 2
2798: PUSH
2799: LD_INT 3
2801: PUSH
2802: LD_INT 4
2804: PUSH
2805: LD_INT 5
2807: PUSH
2808: LD_INT 11
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 1
2828: PPUSH
2829: LD_INT 7
2831: PPUSH
2832: CALL_OW 12
2836: ARRAY
2837: PPUSH
2838: CALL_OW 431
2842: GO 2788
2844: POP
2845: POP
// hc_name :=  ;
2846: LD_ADDR_OWVAR 26
2850: PUSH
2851: LD_STRING 
2853: ST_TO_ADDR
// hc_gallery :=  ;
2854: LD_ADDR_OWVAR 33
2858: PUSH
2859: LD_STRING 
2861: ST_TO_ADDR
// for i = 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 7
2874: PUSH
2875: LD_INT 6
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_OWVAR 67
2890: ARRAY
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2951
// begin PrepareSoldier ( 1 , game_skill ) ;
2895: LD_INT 1
2897: PPUSH
2898: LD_EXP 38
2902: PPUSH
2903: CALL_OW 381
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 4
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// filter := filter ^ un ;
2917: LD_ADDR_VAR 0 3
2921: PUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_VAR 0 4
2931: ADD
2932: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2933: LD_ADDR_VAR 0 5
2937: PUSH
2938: LD_VAR 0 5
2942: PUSH
2943: LD_VAR 0 4
2947: ADD
2948: ST_TO_ADDR
// end ;
2949: GO 2892
2951: POP
2952: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2953: LD_ADDR_VAR 0 2
2957: PUSH
2958: DOUBLE
2959: LD_INT 1
2961: DEC
2962: ST_TO_ADDR
2963: LD_INT 3
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: PUSH
2977: LD_OWVAR 67
2981: ARRAY
2982: PUSH
2983: FOR_TO
2984: IFFALSE 3038
// begin PrepareEngineer ( 0 , game_skill ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_EXP 38
2993: PPUSH
2994: CALL_OW 382
// un := CreateHuman ;
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: CALL_OW 44
3007: ST_TO_ADDR
// filter := filter ^ un ;
3008: LD_ADDR_VAR 0 3
3012: PUSH
3013: LD_VAR 0 3
3017: PUSH
3018: LD_VAR 0 4
3022: ADD
3023: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3024: LD_VAR 0 4
3028: PPUSH
3029: LD_INT 3
3031: PPUSH
3032: CALL_OW 52
// end ;
3036: GO 2983
3038: POP
3039: POP
// for i = 1 to [ 4 , 4 , 3 ] [ Difficulty ] do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 4
3052: PUSH
3053: LD_INT 4
3055: PUSH
3056: LD_INT 3
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_OWVAR 67
3068: ARRAY
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3125
// begin PrepareMechanic ( 0 , game_skill ) ;
3073: LD_INT 0
3075: PPUSH
3076: LD_EXP 38
3080: PPUSH
3081: CALL_OW 383
// un := CreateHuman ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: CALL_OW 44
3094: ST_TO_ADDR
// filter := filter ^ un ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_VAR 0 3
3104: PUSH
3105: LD_VAR 0 4
3109: ADD
3110: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 8
3118: PPUSH
3119: CALL_OW 52
// end ;
3123: GO 3070
3125: POP
3126: POP
// for i = 1 to 3 do
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: DOUBLE
3133: LD_INT 1
3135: DEC
3136: ST_TO_ADDR
3137: LD_INT 3
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3195
// begin PrepareScientist ( 0 , game_skill ) ;
3143: LD_INT 0
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 384
// un := CreateHuman ;
3155: LD_ADDR_VAR 0 4
3159: PUSH
3160: CALL_OW 44
3164: ST_TO_ADDR
// filter := filter ^ un ;
3165: LD_ADDR_VAR 0 3
3169: PUSH
3170: LD_VAR 0 3
3174: PUSH
3175: LD_VAR 0 4
3179: ADD
3180: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3181: LD_VAR 0 4
3185: PPUSH
3186: LD_INT 14
3188: PPUSH
3189: CALL_OW 52
// end ;
3193: GO 3140
3195: POP
3196: POP
// for i = 1 to soldiers do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_VAR 0 5
3211: PUSH
3212: FOR_TO
3213: IFFALSE 3238
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3215: LD_VAR 0 5
3219: PUSH
3220: LD_VAR 0 2
3224: ARRAY
3225: PPUSH
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
3236: GO 3212
3238: POP
3239: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3240: LD_EXP 8
3244: PPUSH
3245: LD_INT 51
3247: PPUSH
3248: LD_INT 43
3250: PPUSH
3251: LD_INT 0
3253: PPUSH
3254: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3258: LD_EXP 9
3262: PPUSH
3263: LD_INT 55
3265: PPUSH
3266: LD_INT 58
3268: PPUSH
3269: LD_INT 0
3271: PPUSH
3272: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3276: LD_EXP 10
3280: PPUSH
3281: LD_INT 39
3283: PPUSH
3284: LD_INT 36
3286: PPUSH
3287: LD_INT 0
3289: PPUSH
3290: CALL_OW 48
// BetaSquad := filter diff 0 ;
3294: LD_ADDR_EXP 11
3298: PUSH
3299: LD_VAR 0 3
3303: PUSH
3304: LD_INT 0
3306: DIFF
3307: ST_TO_ADDR
// end ;
3308: LD_VAR 0 1
3312: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3313: LD_INT 0
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// uc_side := 6 ;
3321: LD_ADDR_OWVAR 20
3325: PUSH
3326: LD_INT 6
3328: ST_TO_ADDR
// uc_nation := nation_russian ;
3329: LD_ADDR_OWVAR 21
3333: PUSH
3334: LD_INT 3
3336: ST_TO_ADDR
// soldiers := [ ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: EMPTY
3343: ST_TO_ADDR
// vehs := [ ] ;
3344: LD_ADDR_VAR 0 6
3348: PUSH
3349: EMPTY
3350: ST_TO_ADDR
// RUArmada := [ ] ;
3351: LD_ADDR_EXP 16
3355: PUSH
3356: EMPTY
3357: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3358: LD_ADDR_EXP 12
3362: PUSH
3363: LD_STRING Yashin
3365: PPUSH
3366: CALL_OW 25
3370: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3371: LD_ADDR_EXP 13
3375: PUSH
3376: LD_STRING Popov
3378: PPUSH
3379: CALL_OW 25
3383: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3384: LD_ADDR_EXP 14
3388: PUSH
3389: LD_STRING Gaydar
3391: PPUSH
3392: CALL_OW 25
3396: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3397: LD_ADDR_EXP 15
3401: PUSH
3402: LD_STRING Vsevolod
3404: PPUSH
3405: CALL_OW 25
3409: ST_TO_ADDR
// for i = 1 to 16 do
3410: LD_ADDR_VAR 0 2
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 16
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3466
// begin PrepareSoldier ( 0 , game_eskill ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_EXP 39
3433: PPUSH
3434: CALL_OW 381
// un := CreateHuman ;
3438: LD_ADDR_VAR 0 5
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3448: LD_ADDR_VAR 0 4
3452: PUSH
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 5
3462: ADD
3463: ST_TO_ADDR
// end ;
3464: GO 3423
3466: POP
3467: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3468: LD_ADDR_VAR 0 4
3472: PUSH
3473: LD_EXP 12
3477: PUSH
3478: LD_EXP 13
3482: ADD
3483: PUSH
3484: LD_EXP 14
3488: ADD
3489: PUSH
3490: LD_EXP 15
3494: ADD
3495: PUSH
3496: LD_VAR 0 4
3500: ADD
3501: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3502: LD_INT 24
3504: PPUSH
3505: LD_INT 3
3507: PPUSH
3508: LD_INT 1
3510: PPUSH
3511: LD_INT 46
3513: PPUSH
3514: LD_INT 100
3516: PPUSH
3517: CALL 17318 0 5
// for i = 1 to 8 do
3521: LD_ADDR_VAR 0 2
3525: PUSH
3526: DOUBLE
3527: LD_INT 1
3529: DEC
3530: ST_TO_ADDR
3531: LD_INT 8
3533: PUSH
3534: FOR_TO
3535: IFFALSE 3618
// begin vehicle := CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3547: LD_VAR 0 4
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: PPUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: LD_VAR 0 4
3574: PUSH
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: DIFF
3584: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 5
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
// vehs := vehs ^ vehicle ;
3600: LD_ADDR_VAR 0 6
3604: PUSH
3605: LD_VAR 0 6
3609: PUSH
3610: LD_VAR 0 3
3614: ADD
3615: ST_TO_ADDR
// end ;
3616: GO 3534
3618: POP
3619: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3620: LD_INT 24
3622: PPUSH
3623: LD_INT 3
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 43
3631: PPUSH
3632: LD_INT 100
3634: PPUSH
3635: CALL 17318 0 5
// for i = 1 to 8 do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 8
3651: PUSH
3652: FOR_TO
3653: IFFALSE 3736
// begin vehicle := CreateVehicle ;
3655: LD_ADDR_VAR 0 3
3659: PUSH
3660: CALL_OW 45
3664: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3665: LD_VAR 0 4
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: PPUSH
3674: LD_VAR 0 3
3678: PPUSH
3679: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3683: LD_ADDR_VAR 0 4
3687: PUSH
3688: LD_VAR 0 4
3692: PUSH
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: DIFF
3702: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_INT 5
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL_OW 49
// vehs := vehs ^ vehicle ;
3718: LD_ADDR_VAR 0 6
3722: PUSH
3723: LD_VAR 0 6
3727: PUSH
3728: LD_VAR 0 3
3732: ADD
3733: ST_TO_ADDR
// end ;
3734: GO 3652
3736: POP
3737: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3738: LD_INT 22
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 44
3749: PPUSH
3750: LD_INT 100
3752: PPUSH
3753: CALL 17318 0 5
// for i = 1 to 4 do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_INT 4
3769: PUSH
3770: FOR_TO
3771: IFFALSE 3854
// begin vehicle := CreateVehicle ;
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: CALL_OW 45
3782: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3783: LD_VAR 0 4
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: PPUSH
3792: LD_VAR 0 3
3796: PPUSH
3797: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3801: LD_ADDR_VAR 0 4
3805: PUSH
3806: LD_VAR 0 4
3810: PUSH
3811: LD_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: DIFF
3820: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 5
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// vehs := vehs ^ vehicle ;
3836: LD_ADDR_VAR 0 6
3840: PUSH
3841: LD_VAR 0 6
3845: PUSH
3846: LD_VAR 0 3
3850: ADD
3851: ST_TO_ADDR
// end ;
3852: GO 3770
3854: POP
3855: POP
// RUArmada := vehs ;
3856: LD_ADDR_EXP 16
3860: PUSH
3861: LD_VAR 0 6
3865: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3866: LD_EXP 12
3870: PPUSH
3871: CALL_OW 310
3875: PUSH
3876: LD_EXP 13
3880: PPUSH
3881: CALL_OW 310
3885: PUSH
3886: LD_EXP 14
3890: PPUSH
3891: CALL_OW 310
3895: PUSH
3896: LD_EXP 15
3900: PPUSH
3901: CALL_OW 310
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_INT 6
3914: NEG
3915: PPUSH
3916: CALL_OW 242
// end ;
3920: LD_VAR 0 1
3924: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3925: LD_INT 0
3927: PPUSH
3928: PPUSH
3929: PPUSH
// uc_side := 6 ;
3930: LD_ADDR_OWVAR 20
3934: PUSH
3935: LD_INT 6
3937: ST_TO_ADDR
// uc_nation := nation_russian ;
3938: LD_ADDR_OWVAR 21
3942: PUSH
3943: LD_INT 3
3945: ST_TO_ADDR
// Bulldozers := [ ] ;
3946: LD_ADDR_EXP 17
3950: PUSH
3951: EMPTY
3952: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3953: LD_INT 24
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 53
3964: PPUSH
3965: LD_INT 100
3967: PPUSH
3968: CALL 17318 0 5
// for i = 1 to 2 do
3972: LD_ADDR_VAR 0 2
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_INT 2
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4031
// begin vehicle := CreateVehicle ;
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: CALL_OW 45
3997: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4013: LD_ADDR_EXP 17
4017: PUSH
4018: LD_EXP 17
4022: PUSH
4023: LD_VAR 0 3
4027: ADD
4028: ST_TO_ADDR
// end ;
4029: GO 3985
4031: POP
4032: POP
// end ;
4033: LD_VAR 0 1
4037: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4038: LD_INT 0
4040: PPUSH
4041: PPUSH
4042: PPUSH
4043: PPUSH
// uc_side := 3 ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_INT 3
4051: ST_TO_ADDR
// uc_nation := nation_russian ;
4052: LD_ADDR_OWVAR 21
4056: PUSH
4057: LD_INT 3
4059: ST_TO_ADDR
// hc_name :=  ;
4060: LD_ADDR_OWVAR 26
4064: PUSH
4065: LD_STRING 
4067: ST_TO_ADDR
// hc_gallery :=  ;
4068: LD_ADDR_OWVAR 33
4072: PUSH
4073: LD_STRING 
4075: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4076: LD_ADDR_EXP 18
4080: PUSH
4081: LD_STRING Burlak
4083: PPUSH
4084: CALL_OW 25
4088: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4089: LD_ADDR_EXP 19
4093: PUSH
4094: LD_STRING Gleb
4096: PPUSH
4097: CALL_OW 25
4101: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4102: LD_ADDR_EXP 20
4106: PUSH
4107: LD_STRING Furmanov
4109: PPUSH
4110: CALL_OW 25
4114: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4115: LD_ADDR_EXP 21
4119: PUSH
4120: LD_STRING Titov
4122: PPUSH
4123: CALL_OW 25
4127: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4128: LD_ADDR_EXP 22
4132: PUSH
4133: LD_STRING Scholtze
4135: PPUSH
4136: CALL_OW 25
4140: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4141: LD_ADDR_EXP 23
4145: PUSH
4146: LD_STRING Dolgov
4148: PPUSH
4149: CALL_OW 25
4153: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Kapitsova
4161: PPUSH
4162: CALL_OW 25
4166: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4167: LD_ADDR_EXP 25
4171: PUSH
4172: LD_STRING Karamazov
4174: PPUSH
4175: CALL_OW 25
4179: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4180: LD_ADDR_EXP 26
4184: PUSH
4185: LD_STRING Kirlenkova
4187: PPUSH
4188: CALL_OW 25
4192: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4193: LD_ADDR_EXP 27
4197: PUSH
4198: LD_STRING Kovalyuk
4200: PPUSH
4201: CALL_OW 25
4205: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4206: LD_ADDR_EXP 28
4210: PUSH
4211: LD_STRING Kozlov
4213: PPUSH
4214: CALL_OW 25
4218: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4219: LD_ADDR_EXP 29
4223: PUSH
4224: LD_STRING Kuzmov
4226: PPUSH
4227: CALL_OW 25
4231: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4232: LD_ADDR_EXP 30
4236: PUSH
4237: LD_STRING Lipshchin
4239: PPUSH
4240: CALL_OW 25
4244: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4245: LD_ADDR_EXP 31
4249: PUSH
4250: LD_STRING Oblukov
4252: PPUSH
4253: CALL_OW 25
4257: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4258: LD_ADDR_EXP 32
4262: PUSH
4263: LD_STRING Xavier2
4265: PPUSH
4266: CALL_OW 25
4270: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4271: LD_ADDR_EXP 33
4275: PUSH
4276: LD_STRING Gnyevko
4278: PPUSH
4279: CALL_OW 25
4283: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4284: LD_ADDR_EXP 34
4288: PUSH
4289: LD_STRING Belkov
4291: PPUSH
4292: CALL_OW 25
4296: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: LD_EXP 18
4306: PUSH
4307: LD_EXP 19
4311: PUSH
4312: LD_EXP 20
4316: PUSH
4317: LD_EXP 21
4321: PUSH
4322: LD_EXP 22
4326: PUSH
4327: LD_EXP 23
4331: PUSH
4332: LD_EXP 24
4336: PUSH
4337: LD_EXP 25
4341: PUSH
4342: LD_EXP 26
4346: PUSH
4347: LD_EXP 27
4351: PUSH
4352: LD_EXP 28
4356: PUSH
4357: LD_EXP 29
4361: PUSH
4362: LD_EXP 30
4366: PUSH
4367: LD_EXP 31
4371: PUSH
4372: LD_EXP 32
4376: PUSH
4377: LD_EXP 33
4381: PUSH
4382: LD_EXP 34
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: ST_TO_ADDR
// for i = 1 to filter do
4406: LD_ADDR_VAR 0 2
4410: PUSH
4411: DOUBLE
4412: LD_INT 1
4414: DEC
4415: ST_TO_ADDR
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4447
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4424: LD_VAR 0 3
4428: PUSH
4429: LD_VAR 0 2
4433: ARRAY
4434: PPUSH
4435: LD_INT 6
4437: PPUSH
4438: LD_INT 0
4440: PPUSH
4441: CALL_OW 49
4445: GO 4421
4447: POP
4448: POP
// end ;
4449: LD_VAR 0 1
4453: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
// uc_side := 3 ;
4460: LD_ADDR_OWVAR 20
4464: PUSH
4465: LD_INT 3
4467: ST_TO_ADDR
// uc_nation := nation_russian ;
4468: LD_ADDR_OWVAR 21
4472: PUSH
4473: LD_INT 3
4475: ST_TO_ADDR
// hc_name :=  ;
4476: LD_ADDR_OWVAR 26
4480: PUSH
4481: LD_STRING 
4483: ST_TO_ADDR
// hc_gallery :=  ;
4484: LD_ADDR_OWVAR 33
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// for i = 1 to 8 do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 8
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4548
// begin PrepareSoldier ( 0 , game_eskill ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_EXP 39
4515: PPUSH
4516: CALL_OW 381
// un := CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// filter := filter ^ un ;
4530: LD_ADDR_VAR 0 3
4534: PUSH
4535: LD_VAR 0 3
4539: PUSH
4540: LD_VAR 0 4
4544: ADD
4545: ST_TO_ADDR
// end ;
4546: GO 4505
4548: POP
4549: POP
// for i = 1 to 4 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 4
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4606
// begin PrepareEngineer ( 0 , game_eskill ) ;
4566: LD_INT 0
4568: PPUSH
4569: LD_EXP 39
4573: PPUSH
4574: CALL_OW 382
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// filter := filter ^ un ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 3
4597: PUSH
4598: LD_VAR 0 4
4602: ADD
4603: ST_TO_ADDR
// end ;
4604: GO 4563
4606: POP
4607: POP
// for i = 1 to 6 do
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: DOUBLE
4614: LD_INT 1
4616: DEC
4617: ST_TO_ADDR
4618: LD_INT 6
4620: PUSH
4621: FOR_TO
4622: IFFALSE 4664
// begin PrepareMechanic ( 0 , game_eskill ) ;
4624: LD_INT 0
4626: PPUSH
4627: LD_EXP 39
4631: PPUSH
4632: CALL_OW 383
// un := CreateHuman ;
4636: LD_ADDR_VAR 0 4
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// filter := filter ^ un ;
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_VAR 0 3
4655: PUSH
4656: LD_VAR 0 4
4660: ADD
4661: ST_TO_ADDR
// end ;
4662: GO 4621
4664: POP
4665: POP
// for i = 1 to 4 do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_INT 4
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4722
// begin PrepareScientist ( 0 , game_eskill ) ;
4682: LD_INT 0
4684: PPUSH
4685: LD_EXP 39
4689: PPUSH
4690: CALL_OW 384
// un := CreateHuman ;
4694: LD_ADDR_VAR 0 4
4698: PUSH
4699: CALL_OW 44
4703: ST_TO_ADDR
// filter := filter ^ un ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: LD_VAR 0 3
4713: PUSH
4714: LD_VAR 0 4
4718: ADD
4719: ST_TO_ADDR
// end ;
4720: GO 4679
4722: POP
4723: POP
// for i = 1 to filter do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_VAR 0 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4765
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4742: LD_VAR 0 3
4746: PUSH
4747: LD_VAR 0 2
4751: ARRAY
4752: PPUSH
4753: LD_INT 6
4755: PPUSH
4756: LD_INT 0
4758: PPUSH
4759: CALL_OW 49
4763: GO 4739
4765: POP
4766: POP
// RU_SecondPersonnel := filter ;
4767: LD_ADDR_EXP 35
4771: PUSH
4772: LD_VAR 0 3
4776: ST_TO_ADDR
// end ;
4777: LD_VAR 0 1
4781: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4782: LD_INT 0
4784: PPUSH
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
// uc_side := 1 ;
4791: LD_ADDR_OWVAR 20
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// uc_nation := nation_american ;
4799: LD_ADDR_OWVAR 21
4803: PUSH
4804: LD_INT 1
4806: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4807: LD_ADDR_EXP 36
4811: PUSH
4812: LD_STRING JMM
4814: PPUSH
4815: CALL_OW 25
4819: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4820: LD_EXP 36
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4832: LD_EXP 36
4836: PPUSH
4837: LD_INT 7
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 49
// mechs := [ ] ;
4847: LD_ADDR_VAR 0 7
4851: PUSH
4852: EMPTY
4853: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_INT 4
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 3
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PUSH
4878: LD_OWVAR 67
4882: ARRAY
4883: PUSH
4884: FOR_TO
4885: IFFALSE 4946
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4887: LD_INT 0
4889: PPUSH
4890: LD_EXP 38
4894: PUSH
4895: LD_INT 1
4897: PLUS
4898: PPUSH
4899: CALL_OW 381
// un := CreateHuman ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_VAR 0 4
4927: ADD
4928: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4929: LD_VAR 0 4
4933: PPUSH
4934: LD_INT 7
4936: PPUSH
4937: LD_INT 0
4939: PPUSH
4940: CALL_OW 49
// end ;
4944: GO 4884
4946: POP
4947: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 7
4960: PUSH
4961: LD_INT 6
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_OWVAR 67
4976: ARRAY
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5025
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_EXP 38
4988: PUSH
4989: LD_INT 1
4991: PLUS
4992: PPUSH
4993: CALL_OW 383
// un := CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// mechs := mechs ^ un ;
5007: LD_ADDR_VAR 0 7
5011: PUSH
5012: LD_VAR 0 7
5016: PUSH
5017: LD_VAR 0 4
5021: ADD
5022: ST_TO_ADDR
// end ;
5023: GO 4978
5025: POP
5026: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 3
5032: PPUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_INT 5
5038: PPUSH
5039: LD_INT 100
5041: PPUSH
5042: CALL 17318 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: DOUBLE
5052: LD_INT 1
5054: DEC
5055: ST_TO_ADDR
5056: LD_INT 7
5058: PUSH
5059: LD_INT 6
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: PUSH
5076: FOR_TO
5077: IFFALSE 5172
// begin vehicle := CreateVehicle ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: CALL_OW 45
5088: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5089: LD_VAR 0 7
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PPUSH
5098: LD_VAR 0 6
5102: PPUSH
5103: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5107: LD_ADDR_VAR 0 7
5111: PUSH
5112: LD_VAR 0 7
5116: PUSH
5117: LD_VAR 0 7
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: DIFF
5126: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5139: LD_VAR 0 6
5143: PPUSH
5144: LD_INT 7
5146: PPUSH
5147: LD_INT 0
5149: PPUSH
5150: CALL_OW 49
// vehs := vehs ^ vehicle ;
5154: LD_ADDR_VAR 0 5
5158: PUSH
5159: LD_VAR 0 5
5163: PUSH
5164: LD_VAR 0 6
5168: ADD
5169: ST_TO_ADDR
// end ;
5170: GO 5076
5172: POP
5173: POP
// end ; end_of_file
5174: LD_VAR 0 1
5178: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5179: LD_INT 0
5181: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5182: LD_ADDR_OWVAR 67
5186: PUSH
5187: LD_INT 0
5189: PPUSH
5190: CALL_OW 426
5194: ST_TO_ADDR
// game_diff := Difficulty ;
5195: LD_ADDR_EXP 37
5199: PUSH
5200: LD_OWVAR 67
5204: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5205: LD_ADDR_EXP 38
5209: PUSH
5210: LD_INT 7
5212: PUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_EXP 37
5228: ARRAY
5229: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5230: LD_ADDR_EXP 39
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: LD_EXP 37
5253: ARRAY
5254: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5255: LD_ADDR_EXP 41
5259: PUSH
5260: LD_INT 6300
5262: PUSH
5263: LD_INT 5250
5265: PUSH
5266: LD_INT 4200
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PUSH
5274: LD_EXP 37
5278: ARRAY
5279: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5280: LD_ADDR_EXP 40
5284: PUSH
5285: LD_INT 73500
5287: PUSH
5288: LD_INT 94500
5290: PUSH
5291: LD_INT 115500
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_EXP 37
5303: ARRAY
5304: ST_TO_ADDR
// end ; end_of_file
5305: LD_VAR 0 1
5309: RET
// export function CustomEvent ( event ) ; begin
5310: LD_INT 0
5312: PPUSH
// end ;
5313: LD_VAR 0 2
5317: RET
// export function CustomInitMacro ( ) ; begin
5318: LD_INT 0
5320: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 3
5326: PPUSH
5327: CALL 77755 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5331: LD_INT 1
5333: PPUSH
5334: LD_INT 4
5336: PPUSH
5337: CALL 77699 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5341: LD_INT 1
5343: PPUSH
5344: LD_INT 136
5346: PUSH
5347: LD_INT 130
5349: PUSH
5350: LD_INT 0
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 145
5360: PUSH
5361: LD_INT 123
5363: PUSH
5364: LD_INT 0
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL 76821 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 43
5385: PUSH
5386: LD_INT 46
5388: PUSH
5389: LD_INT 45
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL 77587 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 3
5406: PPUSH
5407: CALL 77269 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5411: LD_INT 1
5413: PPUSH
5414: LD_INT 3
5416: PPUSH
5417: CALL 77000 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5421: LD_INT 1
5423: PPUSH
5424: LD_INT 8
5426: PPUSH
5427: CALL 76682 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: LD_INT 43
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 1
5457: PUSH
5458: LD_INT 3
5460: PUSH
5461: LD_INT 44
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 22
5472: PUSH
5473: LD_INT 1
5475: PUSH
5476: LD_INT 3
5478: PUSH
5479: LD_INT 45
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 24
5490: PUSH
5491: LD_INT 1
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: LD_INT 43
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 43
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 24
5526: PUSH
5527: LD_INT 1
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: LD_INT 46
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 22
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 43
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 22
5562: PUSH
5563: LD_INT 1
5565: PUSH
5566: LD_INT 3
5568: PUSH
5569: LD_INT 44
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL 76497 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5592: LD_INT 1
5594: PPUSH
5595: LD_INT 0
5597: PUSH
5598: LD_INT 127
5600: PUSH
5601: LD_INT 125
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 6
5615: PUSH
5616: LD_INT 124
5618: PUSH
5619: LD_INT 132
5621: PUSH
5622: LD_INT 0
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 29
5633: PUSH
5634: LD_INT 136
5636: PUSH
5637: LD_INT 130
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: LD_INT 4
5651: PUSH
5652: LD_INT 118
5654: PUSH
5655: LD_INT 114
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 29
5669: PUSH
5670: LD_INT 145
5672: PUSH
5673: LD_INT 123
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 26
5687: PUSH
5688: LD_INT 150
5690: PUSH
5691: LD_INT 135
5693: PUSH
5694: LD_INT 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 26
5705: PUSH
5706: LD_INT 140
5708: PUSH
5709: LD_INT 134
5711: PUSH
5712: LD_INT 2
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 137
5726: PUSH
5727: LD_INT 121
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 155
5744: PUSH
5745: LD_INT 130
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: LD_INT 32
5759: PUSH
5760: LD_INT 155
5762: PUSH
5763: LD_INT 130
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 32
5777: PUSH
5778: LD_INT 130
5780: PUSH
5781: LD_INT 114
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 32
5795: PUSH
5796: LD_INT 142
5798: PUSH
5799: LD_INT 115
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 32
5813: PUSH
5814: LD_INT 153
5816: PUSH
5817: LD_INT 120
5819: PUSH
5820: LD_INT 3
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL 76389 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5848: LD_INT 1
5850: PPUSH
5851: LD_INT 10
5853: PUSH
5854: LD_INT 12
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PPUSH
5861: CALL 77176 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5865: LD_INT 1
5867: PPUSH
5868: LD_INT 155
5870: PPUSH
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 24
5879: PUSH
5880: LD_INT 16
5882: PUSH
5883: LD_INT 17
5885: PUSH
5886: LD_INT 18
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PPUSH
5899: CALL 77381 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5903: LD_INT 2
5905: PPUSH
5906: LD_INT 3
5908: PPUSH
5909: CALL 77755 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 4
5918: PPUSH
5919: CALL 77699 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 84
5928: PUSH
5929: LD_INT 125
5931: PUSH
5932: LD_INT 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: PPUSH
5943: CALL 76821 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5947: LD_INT 2
5949: PPUSH
5950: LD_INT 43
5952: PUSH
5953: LD_INT 46
5955: PUSH
5956: LD_INT 45
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: LIST
5963: PPUSH
5964: CALL 77587 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5968: LD_INT 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL 77269 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
5978: LD_INT 2
5980: PPUSH
5981: LD_INT 3
5983: PPUSH
5984: CALL 77000 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
5988: LD_INT 2
5990: PPUSH
5991: LD_INT 8
5993: PPUSH
5994: CALL 76682 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
5998: LD_INT 2
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 3
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 43
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 22
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: LD_INT 44
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 45
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 24
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: LD_INT 43
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 24
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 43
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 24
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 46
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_INT 3
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 43
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: LD_INT 44
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL 76497 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6159: LD_INT 2
6161: PPUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 96
6167: PUSH
6168: LD_INT 125
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 74
6185: PUSH
6186: LD_INT 122
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 30
6200: PUSH
6201: LD_INT 84
6203: PUSH
6204: LD_INT 125
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 28
6218: PUSH
6219: LD_INT 86
6221: PUSH
6222: LD_INT 128
6224: PUSH
6225: LD_INT 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 28
6236: PUSH
6237: LD_INT 85
6239: PUSH
6240: LD_INT 130
6242: PUSH
6243: LD_INT 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: PUSH
6252: LD_INT 28
6254: PUSH
6255: LD_INT 88
6257: PUSH
6258: LD_INT 132
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 106
6275: PUSH
6276: LD_INT 130
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 99
6293: PUSH
6294: LD_INT 114
6296: PUSH
6297: LD_INT 3
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 32
6308: PUSH
6309: LD_INT 72
6311: PUSH
6312: LD_INT 112
6314: PUSH
6315: LD_INT 2
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 32
6326: PUSH
6327: LD_INT 78
6329: PUSH
6330: LD_INT 110
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 32
6344: PUSH
6345: LD_INT 84
6347: PUSH
6348: LD_INT 110
6350: PUSH
6351: LD_INT 2
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 32
6362: PUSH
6363: LD_INT 105
6365: PUSH
6366: LD_INT 117
6368: PUSH
6369: LD_INT 3
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL 76389 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 14
6401: PUSH
6402: LD_INT 11
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL 77176 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6413: LD_INT 2
6415: PPUSH
6416: LD_INT 106
6418: PPUSH
6419: LD_INT 130
6421: PPUSH
6422: LD_INT 0
6424: PPUSH
6425: LD_INT 24
6427: PUSH
6428: LD_INT 16
6430: PUSH
6431: LD_INT 17
6433: PUSH
6434: LD_INT 18
6436: PUSH
6437: LD_INT 21
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL 77381 0 5
// end ;
6451: LD_VAR 0 1
6455: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6456: LD_INT 22
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: LD_INT 3
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 69
6484: IFFALSE 7340
6486: GO 6488
6488: DISABLE
6489: LD_INT 0
6491: PPUSH
6492: PPUSH
6493: PPUSH
6494: PPUSH
6495: PPUSH
6496: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6497: LD_INT 6300
6499: PUSH
6500: LD_INT 4200
6502: PUSH
6503: LD_INT 2100
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_OWVAR 67
6515: ARRAY
6516: PPUSH
6517: CALL_OW 67
// base := 2 ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_INT 2
6528: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: NOT
6558: IFFALSE 6562
// continue ;
6560: GO 6497
// case Rand ( 1 , 3 ) of 1 :
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 3
6567: PPUSH
6568: CALL_OW 12
6572: PUSH
6573: LD_INT 1
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6757
6581: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 43
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 24
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 46
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 24
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: LD_INT 43
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 46
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 22
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: LD_INT 45
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 43
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 24
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: LD_INT 46
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 45
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6741: LD_VAR 0 2
6745: PPUSH
6746: LD_VAR 0 3
6750: PPUSH
6751: CALL 76545 0 2
// end ; 2 :
6755: GO 7088
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6903
6765: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6766: LD_ADDR_VAR 0 3
6770: PUSH
6771: LD_INT 24
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 24
6791: PUSH
6792: LD_INT 3
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: LD_INT 46
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 24
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: LD_INT 43
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 24
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 46
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_INT 45
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 22
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 45
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_VAR 0 3
6896: PPUSH
6897: CALL 76545 0 2
// end ; 3 :
6901: GO 7088
6903: LD_INT 3
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7087
6911: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6912: LD_ADDR_VAR 0 3
6916: PUSH
6917: LD_INT 22
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 43
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 24
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 3
6943: PUSH
6944: LD_INT 46
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: LD_INT 43
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: LD_INT 46
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 22
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: LD_INT 45
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_INT 3
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: LD_INT 43
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 46
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 45
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7071: LD_VAR 0 2
7075: PPUSH
7076: LD_VAR 0 3
7080: PPUSH
7081: CALL 76545 0 2
// end ; end ;
7085: GO 7088
7087: POP
// repeat wait ( 0 0$1 ) ;
7088: LD_INT 35
7090: PPUSH
7091: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL 76893 0 1
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: IFFALSE 7088
// wait ( 0 0$30 ) ;
7110: LD_INT 1050
7112: PPUSH
7113: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_INT 86
7124: PUSH
7125: LD_INT 77
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 63
7134: PUSH
7135: LD_INT 38
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7146: LD_ADDR_VAR 0 4
7150: PUSH
7151: LD_INT 0
7153: PUSH
7154: LD_INT 0
7156: PUSH
7157: LD_INT 0
7159: PUSH
7160: LD_INT 1
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: LD_INT 0
7168: PUSH
7169: LD_INT 0
7171: PUSH
7172: LD_INT 0
7174: PUSH
7175: LD_INT 1
7177: PUSH
7178: LD_INT 0
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7193: LD_ADDR_VAR 0 6
7197: PUSH
7198: LD_EXP 71
7202: PUSH
7203: LD_VAR 0 2
7207: ARRAY
7208: PUSH
7209: LD_EXP 74
7213: PUSH
7214: LD_VAR 0 2
7218: ARRAY
7219: DIFF
7220: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7221: LD_ADDR_EXP 71
7225: PUSH
7226: LD_EXP 71
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: LD_EXP 71
7240: PUSH
7241: LD_VAR 0 2
7245: ARRAY
7246: PUSH
7247: LD_VAR 0 6
7251: DIFF
7252: PPUSH
7253: CALL_OW 1
7257: ST_TO_ADDR
// if not attackers then
7258: LD_VAR 0 6
7262: NOT
7263: IFFALSE 7267
// continue ;
7265: GO 6497
// repeat wait ( 0 0$1 ) ;
7267: LD_INT 35
7269: PPUSH
7270: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7274: LD_VAR 0 6
7278: PPUSH
7279: LD_INT 60
7281: PUSH
7282: EMPTY
7283: LIST
7284: PPUSH
7285: CALL_OW 72
7289: NOT
7290: IFFALSE 7267
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7292: LD_VAR 0 2
7296: PPUSH
7297: LD_VAR 0 6
7301: PPUSH
7302: LD_VAR 0 5
7306: PPUSH
7307: LD_VAR 0 4
7311: PPUSH
7312: CALL 76730 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7316: LD_EXP 52
7320: PUSH
7321: LD_VAR 0 2
7325: ARRAY
7326: PPUSH
7327: LD_INT 50
7329: PUSH
7330: EMPTY
7331: LIST
7332: PPUSH
7333: CALL_OW 72
7337: NOT
7338: IFFALSE 6497
// end ;
7340: PPOPN 6
7342: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7343: LD_INT 22
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 30
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: IFFALSE 8268
7373: GO 7375
7375: DISABLE
7376: LD_INT 0
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7384: LD_INT 6300
7386: PUSH
7387: LD_INT 4200
7389: PUSH
7390: LD_INT 2100
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: LD_OWVAR 67
7402: ARRAY
7403: PPUSH
7404: CALL_OW 67
// base := 1 ;
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7416: LD_INT 22
7418: PUSH
7419: LD_INT 3
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 30
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: NOT
7445: IFFALSE 7449
// continue ;
7447: GO 7384
// case Rand ( 1 , 3 ) of 1 :
7449: LD_INT 1
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: CALL_OW 12
7459: PUSH
7460: LD_INT 1
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7644
7468: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7469: LD_ADDR_VAR 0 3
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_INT 1
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 43
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 24
7494: PUSH
7495: LD_INT 1
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 46
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 1
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_INT 43
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 24
7530: PUSH
7531: LD_INT 1
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: LD_INT 46
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: LD_INT 45
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 43
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 24
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 46
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 45
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: CALL 76545 0 2
// end ; 2 :
7642: GO 8013
7644: LD_INT 2
7646: DOUBLE
7647: EQUAL
7648: IFTRUE 7652
7650: GO 7828
7652: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 24
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: LD_INT 43
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 24
7678: PUSH
7679: LD_INT 1
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: LD_INT 46
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 24
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: LD_INT 3
7702: PUSH
7703: LD_INT 43
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 24
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: LD_INT 3
7720: PUSH
7721: LD_INT 46
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: LD_INT 45
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: LD_INT 45
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 1
7771: PUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 45
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 22
7786: PUSH
7787: LD_INT 1
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: LD_INT 45
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7812: LD_VAR 0 2
7816: PPUSH
7817: LD_VAR 0 3
7821: PPUSH
7822: CALL 76545 0 2
// end ; 3 :
7826: GO 8013
7828: LD_INT 3
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 8012
7836: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 22
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: LD_INT 43
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 46
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: LD_INT 3
7886: PUSH
7887: LD_INT 43
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 24
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: LD_INT 46
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: LD_INT 3
7922: PUSH
7923: LD_INT 45
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: LD_INT 3
7940: PUSH
7941: LD_INT 43
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 24
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 46
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 45
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7996: LD_VAR 0 2
8000: PPUSH
8001: LD_VAR 0 3
8005: PPUSH
8006: CALL 76545 0 2
// end ; end ;
8010: GO 8013
8012: POP
// repeat wait ( 0 0$1 ) ;
8013: LD_INT 35
8015: PPUSH
8016: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 1
8027: PPUSH
8028: CALL 77900 0 2
8032: PUSH
8033: LD_INT 8
8035: GREATEREQUAL
8036: IFFALSE 8013
// wait ( 0 0$30 ) ;
8038: LD_INT 1050
8040: PPUSH
8041: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8045: LD_ADDR_VAR 0 5
8049: PUSH
8050: LD_INT 144
8052: PUSH
8053: LD_INT 65
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 63
8062: PUSH
8063: LD_INT 38
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8074: LD_ADDR_VAR 0 4
8078: PUSH
8079: LD_INT 0
8081: PUSH
8082: LD_INT 0
8084: PUSH
8085: LD_INT 0
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: LD_INT 0
8096: PUSH
8097: LD_INT 0
8099: PUSH
8100: LD_INT 0
8102: PUSH
8103: LD_INT 1
8105: PUSH
8106: LD_INT 0
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8121: LD_ADDR_VAR 0 6
8125: PUSH
8126: LD_EXP 71
8130: PUSH
8131: LD_VAR 0 2
8135: ARRAY
8136: PUSH
8137: LD_EXP 74
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: DIFF
8148: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8149: LD_ADDR_EXP 71
8153: PUSH
8154: LD_EXP 71
8158: PPUSH
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_EXP 71
8168: PUSH
8169: LD_VAR 0 2
8173: ARRAY
8174: PUSH
8175: LD_VAR 0 6
8179: DIFF
8180: PPUSH
8181: CALL_OW 1
8185: ST_TO_ADDR
// if not attackers then
8186: LD_VAR 0 6
8190: NOT
8191: IFFALSE 8195
// continue ;
8193: GO 7384
// repeat wait ( 0 0$1 ) ;
8195: LD_INT 35
8197: PPUSH
8198: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8202: LD_VAR 0 6
8206: PPUSH
8207: LD_INT 60
8209: PUSH
8210: EMPTY
8211: LIST
8212: PPUSH
8213: CALL_OW 72
8217: NOT
8218: IFFALSE 8195
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8220: LD_VAR 0 2
8224: PPUSH
8225: LD_VAR 0 6
8229: PPUSH
8230: LD_VAR 0 5
8234: PPUSH
8235: LD_VAR 0 4
8239: PPUSH
8240: CALL 76730 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8244: LD_EXP 52
8248: PUSH
8249: LD_VAR 0 2
8253: ARRAY
8254: PPUSH
8255: LD_INT 50
8257: PUSH
8258: EMPTY
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: NOT
8266: IFFALSE 7384
// end ;
8268: PPOPN 6
8270: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8271: LD_EXP 3
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_INT 3
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 21
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: PUSH
8305: LD_INT 0
8307: EQUAL
8308: AND
8309: IFFALSE 8322
8311: GO 8313
8313: DISABLE
// begin RussiansDefeated := true ;
8314: LD_ADDR_EXP 42
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// end ;
8322: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8323: LD_EXP 3
8327: PUSH
8328: LD_EXP 5
8332: NOT
8333: AND
8334: IFFALSE 9307
8336: GO 8338
8338: DISABLE
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8353: LD_INT 10500
8355: PPUSH
8356: LD_INT 13650
8358: PPUSH
8359: CALL_OW 12
8363: PUSH
8364: LD_INT 9450
8366: PPUSH
8367: LD_INT 11550
8369: PPUSH
8370: CALL_OW 12
8374: PUSH
8375: LD_INT 8400
8377: PPUSH
8378: LD_INT 10500
8380: PPUSH
8381: CALL_OW 12
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: LD_OWVAR 67
8395: ARRAY
8396: PPUSH
8397: CALL_OW 67
// filter := [ ] ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: EMPTY
8407: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8408: LD_ADDR_VAR 0 4
8412: PUSH
8413: LD_INT 2
8415: PPUSH
8416: LD_INT 3
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 3
8426: PPUSH
8427: LD_INT 4
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: LD_INT 3
8437: PPUSH
8438: LD_INT 5
8440: PPUSH
8441: CALL_OW 12
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: PUSH
8451: LD_OWVAR 67
8455: ARRAY
8456: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 5
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 2
8470: PPUSH
8471: CALL_OW 12
8475: PUSH
8476: LD_INT 2
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: CALL_OW 12
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: PUSH
8492: LD_OWVAR 67
8496: ARRAY
8497: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8498: LD_ADDR_VAR 0 6
8502: PUSH
8503: LD_INT 2
8505: PPUSH
8506: LD_INT 3
8508: PPUSH
8509: CALL_OW 12
8513: PUSH
8514: LD_INT 2
8516: PPUSH
8517: LD_INT 4
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 3
8527: PPUSH
8528: LD_INT 5
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 8
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 2
8557: PUSH
8558: LD_INT 2
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: LD_OWVAR 67
8570: ARRAY
8571: ST_TO_ADDR
// uc_side := 3 ;
8572: LD_ADDR_OWVAR 20
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// uc_nation := nation_russian ;
8580: LD_ADDR_OWVAR 21
8584: PUSH
8585: LD_INT 3
8587: ST_TO_ADDR
// for i = 1 to soldiers do
8588: LD_ADDR_VAR 0 1
8592: PUSH
8593: DOUBLE
8594: LD_INT 1
8596: DEC
8597: ST_TO_ADDR
8598: LD_VAR 0 4
8602: PUSH
8603: FOR_TO
8604: IFFALSE 8646
// begin PrepareSoldier ( 0 , game_eskill ) ;
8606: LD_INT 0
8608: PPUSH
8609: LD_EXP 39
8613: PPUSH
8614: CALL_OW 381
// un := CreateHuman ;
8618: LD_ADDR_VAR 0 2
8622: PUSH
8623: CALL_OW 44
8627: ST_TO_ADDR
// filter := filter ^ un ;
8628: LD_ADDR_VAR 0 3
8632: PUSH
8633: LD_VAR 0 3
8637: PUSH
8638: LD_VAR 0 2
8642: ADD
8643: ST_TO_ADDR
// end ;
8644: GO 8603
8646: POP
8647: POP
// for i = 1 to bazookas do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_VAR 0 5
8662: PUSH
8663: FOR_TO
8664: IFFALSE 8714
// begin PrepareSoldier ( 0 , game_eskill ) ;
8666: LD_INT 0
8668: PPUSH
8669: LD_EXP 39
8673: PPUSH
8674: CALL_OW 381
// hc_class := class_bazooker ;
8678: LD_ADDR_OWVAR 28
8682: PUSH
8683: LD_INT 9
8685: ST_TO_ADDR
// un := CreateHuman ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: CALL_OW 44
8695: ST_TO_ADDR
// filter := filter ^ un ;
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_VAR 0 3
8705: PUSH
8706: LD_VAR 0 2
8710: ADD
8711: ST_TO_ADDR
// end ;
8712: GO 8663
8714: POP
8715: POP
// for i = 1 to medics do
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: DOUBLE
8722: LD_INT 1
8724: DEC
8725: ST_TO_ADDR
8726: LD_VAR 0 8
8730: PUSH
8731: FOR_TO
8732: IFFALSE 8774
// begin PrepareScientist ( 0 , game_eskill ) ;
8734: LD_INT 0
8736: PPUSH
8737: LD_EXP 39
8741: PPUSH
8742: CALL_OW 384
// un := CreateHuman ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: CALL_OW 44
8755: ST_TO_ADDR
// filter := filter ^ un ;
8756: LD_ADDR_VAR 0 3
8760: PUSH
8761: LD_VAR 0 3
8765: PUSH
8766: LD_VAR 0 2
8770: ADD
8771: ST_TO_ADDR
// end ;
8772: GO 8731
8774: POP
8775: POP
// for i = 1 to vehs do
8776: LD_ADDR_VAR 0 1
8780: PUSH
8781: DOUBLE
8782: LD_INT 1
8784: DEC
8785: ST_TO_ADDR
8786: LD_VAR 0 6
8790: PUSH
8791: FOR_TO
8792: IFFALSE 8984
// begin case Rand ( 1 , 5 ) of 1 :
8794: LD_INT 1
8796: PPUSH
8797: LD_INT 5
8799: PPUSH
8800: CALL_OW 12
8804: PUSH
8805: LD_INT 1
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 8835
8813: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8814: LD_INT 22
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: LD_INT 3
8822: PPUSH
8823: LD_INT 43
8825: PPUSH
8826: LD_INT 100
8828: PPUSH
8829: CALL 17318 0 5
8833: GO 8956
8835: LD_INT 2
8837: DOUBLE
8838: EQUAL
8839: IFTRUE 8843
8841: GO 8865
8843: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8844: LD_INT 22
8846: PPUSH
8847: LD_INT 3
8849: PPUSH
8850: LD_INT 3
8852: PPUSH
8853: LD_INT 44
8855: PPUSH
8856: LD_INT 100
8858: PPUSH
8859: CALL 17318 0 5
8863: GO 8956
8865: LD_INT 3
8867: DOUBLE
8868: EQUAL
8869: IFTRUE 8873
8871: GO 8895
8873: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8874: LD_INT 22
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_INT 3
8882: PPUSH
8883: LD_INT 45
8885: PPUSH
8886: LD_INT 100
8888: PPUSH
8889: CALL 17318 0 5
8893: GO 8956
8895: LD_INT 4
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 8925
8903: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8904: LD_INT 24
8906: PPUSH
8907: LD_INT 3
8909: PPUSH
8910: LD_INT 3
8912: PPUSH
8913: LD_INT 43
8915: PPUSH
8916: LD_INT 100
8918: PPUSH
8919: CALL 17318 0 5
8923: GO 8956
8925: LD_INT 5
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8955
8933: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8934: LD_INT 24
8936: PPUSH
8937: LD_INT 3
8939: PPUSH
8940: LD_INT 3
8942: PPUSH
8943: LD_INT 46
8945: PPUSH
8946: LD_INT 100
8948: PPUSH
8949: CALL 17318 0 5
8953: GO 8956
8955: POP
// vehicle := CreateVehicle ;
8956: LD_ADDR_VAR 0 7
8960: PUSH
8961: CALL_OW 45
8965: ST_TO_ADDR
// filter := filter ^ vehicle ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 7
8980: ADD
8981: ST_TO_ADDR
// end ;
8982: GO 8791
8984: POP
8985: POP
// for i = 1 to filter do
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: DOUBLE
8992: LD_INT 1
8994: DEC
8995: ST_TO_ADDR
8996: LD_VAR 0 3
9000: PUSH
9001: FOR_TO
9002: IFFALSE 9027
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9004: LD_VAR 0 3
9008: PUSH
9009: LD_VAR 0 1
9013: ARRAY
9014: PPUSH
9015: LD_INT 14
9017: PPUSH
9018: LD_INT 0
9020: PPUSH
9021: CALL_OW 49
9025: GO 9001
9027: POP
9028: POP
// case Rand ( 1 , 3 ) of 1 :
9029: LD_INT 1
9031: PPUSH
9032: LD_INT 3
9034: PPUSH
9035: CALL_OW 12
9039: PUSH
9040: LD_INT 1
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9102
9048: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9049: LD_ADDR_VAR 0 11
9053: PUSH
9054: LD_INT 165
9056: PUSH
9057: LD_INT 114
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 104
9066: PUSH
9067: LD_INT 108
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 86
9076: PUSH
9077: LD_INT 77
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 63
9086: PUSH
9087: LD_INT 38
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: ST_TO_ADDR
9100: GO 9227
9102: LD_INT 2
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9110
9108: GO 9164
9110: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9111: LD_ADDR_VAR 0 11
9115: PUSH
9116: LD_INT 165
9118: PUSH
9119: LD_INT 114
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 146
9128: PUSH
9129: LD_INT 71
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 112
9138: PUSH
9139: LD_INT 41
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 63
9148: PUSH
9149: LD_INT 38
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: ST_TO_ADDR
9162: GO 9227
9164: LD_INT 3
9166: DOUBLE
9167: EQUAL
9168: IFTRUE 9172
9170: GO 9226
9172: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9173: LD_ADDR_VAR 0 11
9177: PUSH
9178: LD_INT 165
9180: PUSH
9181: LD_INT 114
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 63
9190: PUSH
9191: LD_INT 99
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 55
9200: PUSH
9201: LD_INT 77
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 63
9210: PUSH
9211: LD_INT 38
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: ST_TO_ADDR
9224: GO 9227
9226: POP
// attackers := filter ;
9227: LD_ADDR_VAR 0 10
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9237: LD_ADDR_VAR 0 12
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: LD_INT 0
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: LD_INT 0
9259: PUSH
9260: LD_INT 0
9262: PUSH
9263: LD_INT 0
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9284: LD_INT 1
9286: PPUSH
9287: LD_VAR 0 10
9291: PPUSH
9292: LD_VAR 0 11
9296: PPUSH
9297: LD_VAR 0 12
9301: PPUSH
9302: CALL 76730 0 4
// enable ;
9306: ENABLE
// end ;
9307: PPOPN 12
9309: END
// every 0 0$1 do var i , tmp ;
9310: GO 9312
9312: DISABLE
9313: LD_INT 0
9315: PPUSH
9316: PPUSH
// begin enable ;
9317: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 3
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// if tmp then
9359: LD_VAR 0 2
9363: IFFALSE 9409
// for i in tmp do
9365: LD_ADDR_VAR 0 1
9369: PUSH
9370: LD_VAR 0 2
9374: PUSH
9375: FOR_IN
9376: IFFALSE 9407
// if GetFuel ( i ) < 3 then
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 261
9387: PUSH
9388: LD_INT 3
9390: LESS
9391: IFFALSE 9405
// SetFuel ( i , 3 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 3
9400: PPUSH
9401: CALL_OW 240
9405: GO 9375
9407: POP
9408: POP
// end ; end_of_file
9409: PPOPN 2
9411: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9412: LD_VAR 0 1
9416: PUSH
9417: LD_EXP 8
9421: EQUAL
9422: IFFALSE 9438
// begin wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// YouLost ( Brighton ) ;
9431: LD_STRING Brighton
9433: PPUSH
9434: CALL_OW 104
// end ; if un = JMM then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_EXP 36
9447: EQUAL
9448: IFFALSE 9464
// begin wait ( 0 0$1 ) ;
9450: LD_INT 35
9452: PPUSH
9453: CALL_OW 67
// YouLost ( JMM ) ;
9457: LD_STRING JMM
9459: PPUSH
9460: CALL_OW 104
// end ; if un = Megan then
9464: LD_VAR 0 1
9468: PUSH
9469: LD_EXP 10
9473: EQUAL
9474: IFFALSE 9488
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9476: LD_EXP 8
9480: PPUSH
9481: LD_STRING DBrighton-MeganDeath
9483: PPUSH
9484: CALL_OW 88
// end ; if un = Palmer then
9488: LD_VAR 0 1
9492: PUSH
9493: LD_EXP 9
9497: EQUAL
9498: IFFALSE 9512
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9500: LD_EXP 8
9504: PPUSH
9505: LD_STRING DBrighton-PalmerDeath
9507: PPUSH
9508: CALL_OW 88
// end ; if un = Burlak then
9512: LD_VAR 0 1
9516: PUSH
9517: LD_EXP 18
9521: EQUAL
9522: IFFALSE 9554
// begin if JMM_Arrived then
9524: LD_EXP 5
9528: IFFALSE 9542
// Say ( JMM , DJMM-BurlakDead ) ;
9530: LD_EXP 36
9534: PPUSH
9535: LD_STRING DJMM-BurlakDead
9537: PPUSH
9538: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9542: LD_EXP 9
9546: PPUSH
9547: LD_STRING DSol-BurlakDead
9549: PPUSH
9550: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9554: LD_VAR 0 1
9558: PUSH
9559: LD_INT 1
9561: EQUAL
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: LD_INT 3
9570: EQUAL
9571: OR
9572: IFFALSE 9588
// begin wait ( 0 0$1 ) ;
9574: LD_INT 35
9576: PPUSH
9577: CALL_OW 67
// YouLost ( Depot ) ;
9581: LD_STRING Depot
9583: PPUSH
9584: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 255
9597: PUSH
9598: LD_INT 1
9600: EQUAL
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 247
9611: PUSH
9612: LD_INT 1
9614: EQUAL
9615: AND
9616: IFFALSE 9632
// Losses := Losses + 1 ;
9618: LD_ADDR_EXP 43
9622: PUSH
9623: LD_EXP 43
9627: PUSH
9628: LD_INT 1
9630: PLUS
9631: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL 79874 0 1
// end ;
9641: PPOPN 1
9643: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9644: LD_VAR 0 1
9648: PUSH
9649: LD_EXP 12
9653: EQUAL
9654: IFFALSE 9668
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9656: LD_EXP 12
9660: PPUSH
9661: LD_STRING DDeath-Yas-3
9663: PPUSH
9664: CALL_OW 91
// if un = Popov then
9668: LD_VAR 0 1
9672: PUSH
9673: LD_EXP 13
9677: EQUAL
9678: IFFALSE 9692
// ForceSay ( Popov , DDeath-Pop-3 ) ;
9680: LD_EXP 13
9684: PPUSH
9685: LD_STRING DDeath-Pop-3
9687: PPUSH
9688: CALL_OW 91
// if un = Gaydar then
9692: LD_VAR 0 1
9696: PUSH
9697: LD_EXP 14
9701: EQUAL
9702: IFFALSE 9716
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
9704: LD_EXP 14
9708: PPUSH
9709: LD_STRING DDeath-Gay-3
9711: PPUSH
9712: CALL_OW 91
// if un = Sevi then
9716: LD_VAR 0 1
9720: PUSH
9721: LD_EXP 15
9725: EQUAL
9726: IFFALSE 9740
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
9728: LD_EXP 15
9732: PPUSH
9733: LD_STRING DDeath-Vse-3
9735: PPUSH
9736: CALL_OW 91
// end ;
9740: PPOPN 1
9742: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 10
9750: EQUAL
9751: IFFALSE 9789
// begin Say ( Brighton , DBrighton-C1 ) ;
9753: LD_EXP 8
9757: PPUSH
9758: LD_STRING DBrighton-C1
9760: PPUSH
9761: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
9765: LD_EXP 10
9769: PPUSH
9770: LD_STRING DMegan-C1
9772: PPUSH
9773: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
9777: LD_EXP 8
9781: PPUSH
9782: LD_STRING DBrighton-C2
9784: PPUSH
9785: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_VAR 0 2
9798: PPUSH
9799: CALL 79570 0 2
// end ;
9803: PPOPN 2
9805: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_VAR 0 2
9815: PPUSH
9816: CALL 81929 0 2
// end ;
9820: PPOPN 2
9822: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL 80997 0 1
// end ;
9832: PPOPN 1
9834: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 266
9844: PUSH
9845: LD_INT 0
9847: EQUAL
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 255
9858: PUSH
9859: LD_INT 3
9861: EQUAL
9862: AND
9863: IFFALSE 9925
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 274
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_INT 10000
9880: PPUSH
9881: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
9885: LD_VAR 0 1
9889: PPUSH
9890: CALL_OW 274
9894: PPUSH
9895: LD_INT 2
9897: PPUSH
9898: LD_INT 250
9900: PPUSH
9901: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 274
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 100
9920: PPUSH
9921: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL 81238 0 1
// end ;
9934: PPOPN 1
9936: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9937: LD_VAR 0 1
9941: PPUSH
9942: LD_VAR 0 2
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 79190 0 5
// end ;
9966: PPOPN 5
9968: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: CALL 78786 0 2
// end ;
9983: PPOPN 2
9985: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9986: LD_VAR 0 1
9990: PPUSH
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 3
10000: PPUSH
10001: LD_VAR 0 4
10005: PPUSH
10006: CALL 78624 0 4
// end ;
10010: PPOPN 4
10012: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: CALL 78399 0 3
// end ;
10032: PPOPN 3
10034: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10035: LD_VAR 0 1
10039: PPUSH
10040: LD_VAR 0 2
10044: PPUSH
10045: CALL 78284 0 2
// end ;
10049: PPOPN 2
10051: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10052: LD_VAR 0 1
10056: PPUSH
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL 82190 0 2
// end ;
10066: PPOPN 2
10068: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 255
10078: PUSH
10079: LD_INT 6
10081: EQUAL
10082: IFFALSE 10177
// if AssaultStarted then
10084: LD_EXP 7
10088: IFFALSE 10162
// case Rand ( 1 , 4 ) of 1 .. 3 :
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 4
10095: PPUSH
10096: CALL_OW 12
10100: PUSH
10101: LD_INT 1
10103: DOUBLE
10104: GREATEREQUAL
10105: IFFALSE 10113
10107: LD_INT 3
10109: DOUBLE
10110: LESSEQUAL
10111: IFTRUE 10115
10113: GO 10133
10115: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10116: LD_VAR 0 1
10120: PPUSH
10121: LD_INT 67
10123: PPUSH
10124: LD_INT 37
10126: PPUSH
10127: CALL_OW 114
10131: GO 10160
10133: LD_INT 4
10135: DOUBLE
10136: EQUAL
10137: IFTRUE 10141
10139: GO 10159
10141: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10142: LD_VAR 0 1
10146: PPUSH
10147: LD_INT 120
10149: PPUSH
10150: LD_INT 131
10152: PPUSH
10153: CALL_OW 111
10157: GO 10160
10159: POP
10160: GO 10177
// ComMoveXY ( driver , 120 , 131 ) ;
10162: LD_VAR 0 1
10166: PPUSH
10167: LD_INT 120
10169: PPUSH
10170: LD_INT 131
10172: PPUSH
10173: CALL_OW 111
// MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10177: LD_VAR 0 1
10181: PPUSH
10182: LD_VAR 0 2
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_VAR 0 4
10196: PPUSH
10197: CALL 82406 0 4
// end ;
10201: PPOPN 4
10203: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10204: LD_VAR 0 1
10208: PPUSH
10209: LD_VAR 0 2
10213: PPUSH
10214: CALL 78093 0 2
// end ;
10218: PPOPN 2
10220: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL 82645 0 1
// end ; end_of_file
10230: PPOPN 1
10232: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10233: LD_EXP 5
10237: PUSH
10238: LD_EXP 42
10242: AND
10243: IFFALSE 10424
10245: GO 10247
10247: DISABLE
// begin wait ( 0 0$2 ) ;
10248: LD_INT 70
10250: PPUSH
10251: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10255: LD_EXP 8
10259: PPUSH
10260: LD_STRING DBrighton-G1
10262: PPUSH
10263: CALL_OW 88
// if Losses < 1 then
10267: LD_EXP 43
10271: PUSH
10272: LD_INT 1
10274: LESS
10275: IFFALSE 10289
// AddMedal ( Losses , 1 ) else
10277: LD_STRING Losses
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 101
10287: GO 10322
// if Losses < 5 then
10289: LD_EXP 43
10293: PUSH
10294: LD_INT 5
10296: LESS
10297: IFFALSE 10311
// AddMedal ( Losses , 2 ) else
10299: LD_STRING Losses
10301: PPUSH
10302: LD_INT 2
10304: PPUSH
10305: CALL_OW 101
10309: GO 10322
// AddMedal ( Losses , - 1 ) ;
10311: LD_STRING Losses
10313: PPUSH
10314: LD_INT 1
10316: NEG
10317: PPUSH
10318: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10322: LD_EXP 6
10326: PUSH
10327: LD_INT 10
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 321
10337: PUSH
10338: LD_INT 2
10340: EQUAL
10341: AND
10342: IFFALSE 10356
// AddMedal ( Laser , 1 ) else
10344: LD_STRING Laser
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 101
10354: GO 10403
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10356: LD_EXP 6
10360: NOT
10361: PUSH
10362: LD_INT 10
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 321
10372: PUSH
10373: LD_INT 2
10375: EQUAL
10376: AND
10377: IFFALSE 10392
// AddMedal ( Laser , - 1 ) else
10379: LD_STRING Laser
10381: PPUSH
10382: LD_INT 1
10384: NEG
10385: PPUSH
10386: CALL_OW 101
10390: GO 10403
// AddMedal ( Laser , - 2 ) ;
10392: LD_STRING Laser
10394: PPUSH
10395: LD_INT 2
10397: NEG
10398: PPUSH
10399: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
10403: LD_STRING med3
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10413: LD_STRING BaseMain
10415: PPUSH
10416: CALL_OW 102
// YouWin ;
10420: CALL_OW 103
// end ; end_of_file
10424: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10425: LD_INT 0
10427: PPUSH
10428: PPUSH
// area = ListEnvironmentArea ( area ) ;
10429: LD_ADDR_VAR 0 2
10433: PUSH
10434: LD_VAR 0 2
10438: PPUSH
10439: CALL_OW 353
10443: ST_TO_ADDR
// if bulldozer > 0 then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_INT 0
10451: GREATER
10452: IFFALSE 10563
// for i = area downto 1 do
10454: LD_ADDR_VAR 0 4
10458: PUSH
10459: DOUBLE
10460: LD_VAR 0 2
10464: INC
10465: ST_TO_ADDR
10466: LD_INT 1
10468: PUSH
10469: FOR_DOWNTO
10470: IFFALSE 10561
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10472: LD_VAR 0 2
10476: PUSH
10477: LD_VAR 0 4
10481: ARRAY
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: LD_VAR 0 2
10491: PUSH
10492: LD_VAR 0 4
10496: ARRAY
10497: PUSH
10498: LD_INT 2
10500: ARRAY
10501: PPUSH
10502: CALL_OW 351
10506: IFFALSE 10559
// if not HasTask ( bulldozer ) then
10508: LD_VAR 0 1
10512: PPUSH
10513: CALL_OW 314
10517: NOT
10518: IFFALSE 10559
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_VAR 0 2
10529: PUSH
10530: LD_VAR 0 4
10534: ARRAY
10535: PUSH
10536: LD_INT 1
10538: ARRAY
10539: PPUSH
10540: LD_VAR 0 2
10544: PUSH
10545: LD_VAR 0 4
10549: ARRAY
10550: PUSH
10551: LD_INT 2
10553: ARRAY
10554: PPUSH
10555: CALL_OW 171
10559: GO 10469
10561: POP
10562: POP
// end ;
10563: LD_VAR 0 3
10567: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10573: LD_ADDR_VAR 0 5
10577: PUSH
10578: LD_VAR 0 2
10582: PPUSH
10583: LD_INT 0
10585: PPUSH
10586: CALL_OW 517
10590: ST_TO_ADDR
// for i = 1 to team do
10591: LD_ADDR_VAR 0 4
10595: PUSH
10596: DOUBLE
10597: LD_INT 1
10599: DEC
10600: ST_TO_ADDR
10601: LD_VAR 0 1
10605: PUSH
10606: FOR_TO
10607: IFFALSE 10708
// begin if IsInUnit ( team [ i ] ) then
10609: LD_VAR 0 1
10613: PUSH
10614: LD_VAR 0 4
10618: ARRAY
10619: PPUSH
10620: CALL_OW 310
10624: IFFALSE 10641
// ComExitBuilding ( team [ i ] ) ;
10626: LD_VAR 0 1
10630: PUSH
10631: LD_VAR 0 4
10635: ARRAY
10636: PPUSH
10637: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
10641: LD_VAR 0 1
10645: PUSH
10646: LD_VAR 0 4
10650: ARRAY
10651: PPUSH
10652: LD_VAR 0 5
10656: PUSH
10657: LD_INT 1
10659: ARRAY
10660: PUSH
10661: LD_VAR 0 4
10665: ARRAY
10666: PPUSH
10667: LD_VAR 0 5
10671: PUSH
10672: LD_INT 2
10674: ARRAY
10675: PUSH
10676: LD_VAR 0 4
10680: ARRAY
10681: PPUSH
10682: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
10686: LD_VAR 0 1
10690: PUSH
10691: LD_VAR 0 4
10695: ARRAY
10696: PPUSH
10697: LD_EXP 8
10701: PPUSH
10702: CALL_OW 179
// end ;
10706: GO 10606
10708: POP
10709: POP
// end ; end_of_file
10710: LD_VAR 0 3
10714: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10715: LD_INT 0
10717: PPUSH
10718: PPUSH
// if exist_mode then
10719: LD_VAR 0 2
10723: IFFALSE 10748
// unit := CreateCharacter ( prefix & ident ) else
10725: LD_ADDR_VAR 0 5
10729: PUSH
10730: LD_VAR 0 3
10734: PUSH
10735: LD_VAR 0 1
10739: STR
10740: PPUSH
10741: CALL_OW 34
10745: ST_TO_ADDR
10746: GO 10763
// unit := NewCharacter ( ident ) ;
10748: LD_ADDR_VAR 0 5
10752: PUSH
10753: LD_VAR 0 1
10757: PPUSH
10758: CALL_OW 25
10762: ST_TO_ADDR
// result := unit ;
10763: LD_ADDR_VAR 0 4
10767: PUSH
10768: LD_VAR 0 5
10772: ST_TO_ADDR
// end ;
10773: LD_VAR 0 4
10777: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10778: LD_INT 0
10780: PPUSH
10781: PPUSH
// if not side or not nation then
10782: LD_VAR 0 1
10786: NOT
10787: PUSH
10788: LD_VAR 0 2
10792: NOT
10793: OR
10794: IFFALSE 10798
// exit ;
10796: GO 11434
// case nation of nation_american :
10798: LD_VAR 0 2
10802: PUSH
10803: LD_INT 1
10805: DOUBLE
10806: EQUAL
10807: IFTRUE 10811
10809: GO 10981
10811: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
10812: LD_ADDR_VAR 0 4
10816: PUSH
10817: LD_INT 35
10819: PUSH
10820: LD_INT 45
10822: PUSH
10823: LD_INT 46
10825: PUSH
10826: LD_INT 47
10828: PUSH
10829: LD_INT 1
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 6
10837: PUSH
10838: LD_INT 15
10840: PUSH
10841: LD_INT 16
10843: PUSH
10844: LD_INT 7
10846: PUSH
10847: LD_INT 12
10849: PUSH
10850: LD_INT 13
10852: PUSH
10853: LD_INT 10
10855: PUSH
10856: LD_INT 14
10858: PUSH
10859: LD_INT 20
10861: PUSH
10862: LD_INT 21
10864: PUSH
10865: LD_INT 22
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 32
10873: PUSH
10874: LD_INT 27
10876: PUSH
10877: LD_INT 36
10879: PUSH
10880: LD_INT 69
10882: PUSH
10883: LD_INT 39
10885: PUSH
10886: LD_INT 34
10888: PUSH
10889: LD_INT 40
10891: PUSH
10892: LD_INT 48
10894: PUSH
10895: LD_INT 49
10897: PUSH
10898: LD_INT 50
10900: PUSH
10901: LD_INT 51
10903: PUSH
10904: LD_INT 52
10906: PUSH
10907: LD_INT 53
10909: PUSH
10910: LD_INT 54
10912: PUSH
10913: LD_INT 55
10915: PUSH
10916: LD_INT 56
10918: PUSH
10919: LD_INT 57
10921: PUSH
10922: LD_INT 58
10924: PUSH
10925: LD_INT 59
10927: PUSH
10928: LD_INT 60
10930: PUSH
10931: LD_INT 61
10933: PUSH
10934: LD_INT 62
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: ST_TO_ADDR
10979: GO 11358
10981: LD_INT 2
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11167
10989: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_INT 35
10997: PUSH
10998: LD_INT 45
11000: PUSH
11001: LD_INT 46
11003: PUSH
11004: LD_INT 47
11006: PUSH
11007: LD_INT 70
11009: PUSH
11010: LD_INT 1
11012: PUSH
11013: LD_INT 11
11015: PUSH
11016: LD_INT 3
11018: PUSH
11019: LD_INT 4
11021: PUSH
11022: LD_INT 5
11024: PUSH
11025: LD_INT 6
11027: PUSH
11028: LD_INT 15
11030: PUSH
11031: LD_INT 18
11033: PUSH
11034: LD_INT 7
11036: PUSH
11037: LD_INT 17
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: LD_INT 20
11045: PUSH
11046: LD_INT 21
11048: PUSH
11049: LD_INT 22
11051: PUSH
11052: LD_INT 72
11054: PUSH
11055: LD_INT 26
11057: PUSH
11058: LD_INT 69
11060: PUSH
11061: LD_INT 39
11063: PUSH
11064: LD_INT 40
11066: PUSH
11067: LD_INT 41
11069: PUSH
11070: LD_INT 42
11072: PUSH
11073: LD_INT 43
11075: PUSH
11076: LD_INT 48
11078: PUSH
11079: LD_INT 49
11081: PUSH
11082: LD_INT 50
11084: PUSH
11085: LD_INT 51
11087: PUSH
11088: LD_INT 52
11090: PUSH
11091: LD_INT 53
11093: PUSH
11094: LD_INT 54
11096: PUSH
11097: LD_INT 55
11099: PUSH
11100: LD_INT 56
11102: PUSH
11103: LD_INT 60
11105: PUSH
11106: LD_INT 61
11108: PUSH
11109: LD_INT 62
11111: PUSH
11112: LD_INT 66
11114: PUSH
11115: LD_INT 67
11117: PUSH
11118: LD_INT 68
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
11165: GO 11358
11167: LD_INT 3
11169: DOUBLE
11170: EQUAL
11171: IFTRUE 11175
11173: GO 11357
11175: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_INT 46
11183: PUSH
11184: LD_INT 47
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 11
11195: PUSH
11196: LD_INT 9
11198: PUSH
11199: LD_INT 20
11201: PUSH
11202: LD_INT 19
11204: PUSH
11205: LD_INT 21
11207: PUSH
11208: LD_INT 24
11210: PUSH
11211: LD_INT 22
11213: PUSH
11214: LD_INT 25
11216: PUSH
11217: LD_INT 28
11219: PUSH
11220: LD_INT 29
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: LD_INT 37
11231: PUSH
11232: LD_INT 38
11234: PUSH
11235: LD_INT 32
11237: PUSH
11238: LD_INT 27
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 69
11246: PUSH
11247: LD_INT 39
11249: PUSH
11250: LD_INT 34
11252: PUSH
11253: LD_INT 40
11255: PUSH
11256: LD_INT 71
11258: PUSH
11259: LD_INT 23
11261: PUSH
11262: LD_INT 44
11264: PUSH
11265: LD_INT 48
11267: PUSH
11268: LD_INT 49
11270: PUSH
11271: LD_INT 50
11273: PUSH
11274: LD_INT 51
11276: PUSH
11277: LD_INT 52
11279: PUSH
11280: LD_INT 53
11282: PUSH
11283: LD_INT 54
11285: PUSH
11286: LD_INT 55
11288: PUSH
11289: LD_INT 56
11291: PUSH
11292: LD_INT 57
11294: PUSH
11295: LD_INT 58
11297: PUSH
11298: LD_INT 59
11300: PUSH
11301: LD_INT 63
11303: PUSH
11304: LD_INT 64
11306: PUSH
11307: LD_INT 65
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: ST_TO_ADDR
11355: GO 11358
11357: POP
// if state > - 1 and state < 3 then
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 1
11365: NEG
11366: GREATER
11367: PUSH
11368: LD_VAR 0 3
11372: PUSH
11373: LD_INT 3
11375: LESS
11376: AND
11377: IFFALSE 11434
// for i in result do
11379: LD_ADDR_VAR 0 5
11383: PUSH
11384: LD_VAR 0 4
11388: PUSH
11389: FOR_IN
11390: IFFALSE 11432
// if GetTech ( i , side ) <> state then
11392: LD_VAR 0 5
11396: PPUSH
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 321
11406: PUSH
11407: LD_VAR 0 3
11411: NONEQUAL
11412: IFFALSE 11430
// result := result diff i ;
11414: LD_ADDR_VAR 0 4
11418: PUSH
11419: LD_VAR 0 4
11423: PUSH
11424: LD_VAR 0 5
11428: DIFF
11429: ST_TO_ADDR
11430: GO 11389
11432: POP
11433: POP
// end ;
11434: LD_VAR 0 4
11438: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11439: LD_INT 0
11441: PPUSH
11442: PPUSH
11443: PPUSH
// result := true ;
11444: LD_ADDR_VAR 0 3
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_VAR 0 2
11461: PPUSH
11462: CALL_OW 480
11466: ST_TO_ADDR
// if not tmp then
11467: LD_VAR 0 5
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 11525
// for i in tmp do
11476: LD_ADDR_VAR 0 4
11480: PUSH
11481: LD_VAR 0 5
11485: PUSH
11486: FOR_IN
11487: IFFALSE 11523
// if GetTech ( i , side ) <> state_researched then
11489: LD_VAR 0 4
11493: PPUSH
11494: LD_VAR 0 1
11498: PPUSH
11499: CALL_OW 321
11503: PUSH
11504: LD_INT 2
11506: NONEQUAL
11507: IFFALSE 11521
// begin result := false ;
11509: LD_ADDR_VAR 0 3
11513: PUSH
11514: LD_INT 0
11516: ST_TO_ADDR
// exit ;
11517: POP
11518: POP
11519: GO 11525
// end ;
11521: GO 11486
11523: POP
11524: POP
// end ;
11525: LD_VAR 0 3
11529: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11530: LD_INT 0
11532: PPUSH
11533: PPUSH
11534: PPUSH
11535: PPUSH
11536: PPUSH
11537: PPUSH
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
11542: PPUSH
11543: PPUSH
11544: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11545: LD_VAR 0 1
11549: NOT
11550: PUSH
11551: LD_VAR 0 1
11555: PPUSH
11556: CALL_OW 257
11560: PUSH
11561: LD_INT 9
11563: NONEQUAL
11564: OR
11565: IFFALSE 11569
// exit ;
11567: GO 12142
// side := GetSide ( unit ) ;
11569: LD_ADDR_VAR 0 9
11573: PUSH
11574: LD_VAR 0 1
11578: PPUSH
11579: CALL_OW 255
11583: ST_TO_ADDR
// tech_space := tech_spacanom ;
11584: LD_ADDR_VAR 0 12
11588: PUSH
11589: LD_INT 29
11591: ST_TO_ADDR
// tech_time := tech_taurad ;
11592: LD_ADDR_VAR 0 13
11596: PUSH
11597: LD_INT 28
11599: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11600: LD_ADDR_VAR 0 11
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: CALL_OW 310
11614: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11615: LD_VAR 0 11
11619: PPUSH
11620: CALL_OW 247
11624: PUSH
11625: LD_INT 2
11627: EQUAL
11628: IFFALSE 11632
// exit ;
11630: GO 12142
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11632: LD_ADDR_VAR 0 8
11636: PUSH
11637: LD_INT 81
11639: PUSH
11640: LD_VAR 0 9
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 3
11651: PUSH
11652: LD_INT 21
11654: PUSH
11655: LD_INT 3
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PPUSH
11670: CALL_OW 69
11674: ST_TO_ADDR
// if not tmp then
11675: LD_VAR 0 8
11679: NOT
11680: IFFALSE 11684
// exit ;
11682: GO 12142
// if in_unit then
11684: LD_VAR 0 11
11688: IFFALSE 11712
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11690: LD_ADDR_VAR 0 10
11694: PUSH
11695: LD_VAR 0 8
11699: PPUSH
11700: LD_VAR 0 11
11704: PPUSH
11705: CALL_OW 74
11709: ST_TO_ADDR
11710: GO 11732
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11712: LD_ADDR_VAR 0 10
11716: PUSH
11717: LD_VAR 0 8
11721: PPUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 74
11731: ST_TO_ADDR
// if not enemy then
11732: LD_VAR 0 10
11736: NOT
11737: IFFALSE 11741
// exit ;
11739: GO 12142
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11741: LD_VAR 0 11
11745: PUSH
11746: LD_VAR 0 11
11750: PPUSH
11751: LD_VAR 0 10
11755: PPUSH
11756: CALL_OW 296
11760: PUSH
11761: LD_INT 13
11763: GREATER
11764: AND
11765: PUSH
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_VAR 0 10
11775: PPUSH
11776: CALL_OW 296
11780: PUSH
11781: LD_INT 12
11783: GREATER
11784: OR
11785: IFFALSE 11789
// exit ;
11787: GO 12142
// missile := [ 1 ] ;
11789: LD_ADDR_VAR 0 14
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: EMPTY
11798: LIST
11799: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11800: LD_VAR 0 9
11804: PPUSH
11805: LD_VAR 0 12
11809: PPUSH
11810: CALL_OW 325
11814: IFFALSE 11843
// missile := Insert ( missile , missile + 1 , 2 ) ;
11816: LD_ADDR_VAR 0 14
11820: PUSH
11821: LD_VAR 0 14
11825: PPUSH
11826: LD_VAR 0 14
11830: PUSH
11831: LD_INT 1
11833: PLUS
11834: PPUSH
11835: LD_INT 2
11837: PPUSH
11838: CALL_OW 2
11842: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11843: LD_VAR 0 9
11847: PPUSH
11848: LD_VAR 0 13
11852: PPUSH
11853: CALL_OW 325
11857: PUSH
11858: LD_VAR 0 10
11862: PPUSH
11863: CALL_OW 255
11867: PPUSH
11868: LD_VAR 0 13
11872: PPUSH
11873: CALL_OW 325
11877: NOT
11878: AND
11879: IFFALSE 11908
// missile := Insert ( missile , missile + 1 , 3 ) ;
11881: LD_ADDR_VAR 0 14
11885: PUSH
11886: LD_VAR 0 14
11890: PPUSH
11891: LD_VAR 0 14
11895: PUSH
11896: LD_INT 1
11898: PLUS
11899: PPUSH
11900: LD_INT 3
11902: PPUSH
11903: CALL_OW 2
11907: ST_TO_ADDR
// if missile < 2 then
11908: LD_VAR 0 14
11912: PUSH
11913: LD_INT 2
11915: LESS
11916: IFFALSE 11920
// exit ;
11918: GO 12142
// x := GetX ( enemy ) ;
11920: LD_ADDR_VAR 0 4
11924: PUSH
11925: LD_VAR 0 10
11929: PPUSH
11930: CALL_OW 250
11934: ST_TO_ADDR
// y := GetY ( enemy ) ;
11935: LD_ADDR_VAR 0 5
11939: PUSH
11940: LD_VAR 0 10
11944: PPUSH
11945: CALL_OW 251
11949: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11950: LD_ADDR_VAR 0 6
11954: PUSH
11955: LD_VAR 0 4
11959: PUSH
11960: LD_INT 1
11962: NEG
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 12
11971: PLUS
11972: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11973: LD_ADDR_VAR 0 7
11977: PUSH
11978: LD_VAR 0 5
11982: PUSH
11983: LD_INT 1
11985: NEG
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 12
11994: PLUS
11995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11996: LD_VAR 0 6
12000: PPUSH
12001: LD_VAR 0 7
12005: PPUSH
12006: CALL_OW 488
12010: NOT
12011: IFFALSE 12033
// begin _x := x ;
12013: LD_ADDR_VAR 0 6
12017: PUSH
12018: LD_VAR 0 4
12022: ST_TO_ADDR
// _y := y ;
12023: LD_ADDR_VAR 0 7
12027: PUSH
12028: LD_VAR 0 5
12032: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12033: LD_ADDR_VAR 0 3
12037: PUSH
12038: LD_INT 1
12040: PPUSH
12041: LD_VAR 0 14
12045: PPUSH
12046: CALL_OW 12
12050: ST_TO_ADDR
// case i of 1 :
12051: LD_VAR 0 3
12055: PUSH
12056: LD_INT 1
12058: DOUBLE
12059: EQUAL
12060: IFTRUE 12064
12062: GO 12081
12064: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12065: LD_VAR 0 1
12069: PPUSH
12070: LD_VAR 0 10
12074: PPUSH
12075: CALL_OW 115
12079: GO 12142
12081: LD_INT 2
12083: DOUBLE
12084: EQUAL
12085: IFTRUE 12089
12087: GO 12111
12089: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12090: LD_VAR 0 1
12094: PPUSH
12095: LD_VAR 0 6
12099: PPUSH
12100: LD_VAR 0 7
12104: PPUSH
12105: CALL_OW 153
12109: GO 12142
12111: LD_INT 3
12113: DOUBLE
12114: EQUAL
12115: IFTRUE 12119
12117: GO 12141
12119: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_VAR 0 6
12129: PPUSH
12130: LD_VAR 0 7
12134: PPUSH
12135: CALL_OW 154
12139: GO 12142
12141: POP
// end ;
12142: LD_VAR 0 2
12146: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12147: LD_INT 0
12149: PPUSH
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
// if not unit or not building then
12155: LD_VAR 0 1
12159: NOT
12160: PUSH
12161: LD_VAR 0 2
12165: NOT
12166: OR
12167: IFFALSE 12171
// exit ;
12169: GO 12329
// x := GetX ( building ) ;
12171: LD_ADDR_VAR 0 5
12175: PUSH
12176: LD_VAR 0 2
12180: PPUSH
12181: CALL_OW 250
12185: ST_TO_ADDR
// y := GetY ( building ) ;
12186: LD_ADDR_VAR 0 6
12190: PUSH
12191: LD_VAR 0 2
12195: PPUSH
12196: CALL_OW 251
12200: ST_TO_ADDR
// for i = 0 to 5 do
12201: LD_ADDR_VAR 0 4
12205: PUSH
12206: DOUBLE
12207: LD_INT 0
12209: DEC
12210: ST_TO_ADDR
12211: LD_INT 5
12213: PUSH
12214: FOR_TO
12215: IFFALSE 12327
// begin _x := ShiftX ( x , i , 3 ) ;
12217: LD_ADDR_VAR 0 7
12221: PUSH
12222: LD_VAR 0 5
12226: PPUSH
12227: LD_VAR 0 4
12231: PPUSH
12232: LD_INT 3
12234: PPUSH
12235: CALL_OW 272
12239: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12240: LD_ADDR_VAR 0 8
12244: PUSH
12245: LD_VAR 0 6
12249: PPUSH
12250: LD_VAR 0 4
12254: PPUSH
12255: LD_INT 3
12257: PPUSH
12258: CALL_OW 273
12262: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12263: LD_VAR 0 7
12267: PPUSH
12268: LD_VAR 0 8
12272: PPUSH
12273: CALL_OW 488
12277: NOT
12278: IFFALSE 12282
// continue ;
12280: GO 12214
// if HexInfo ( _x , _y ) = 0 then
12282: LD_VAR 0 7
12286: PPUSH
12287: LD_VAR 0 8
12291: PPUSH
12292: CALL_OW 428
12296: PUSH
12297: LD_INT 0
12299: EQUAL
12300: IFFALSE 12325
// begin ComMoveXY ( unit , _x , _y ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: LD_VAR 0 7
12311: PPUSH
12312: LD_VAR 0 8
12316: PPUSH
12317: CALL_OW 111
// exit ;
12321: POP
12322: POP
12323: GO 12329
// end ; end ;
12325: GO 12214
12327: POP
12328: POP
// end ;
12329: LD_VAR 0 3
12333: RET
// export function ScanBase ( side , base_area ) ; begin
12334: LD_INT 0
12336: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12337: LD_ADDR_VAR 0 3
12341: PUSH
12342: LD_VAR 0 2
12346: PPUSH
12347: LD_INT 81
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PPUSH
12359: CALL_OW 70
12363: ST_TO_ADDR
// end ;
12364: LD_VAR 0 3
12368: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12369: LD_INT 0
12371: PPUSH
12372: PPUSH
12373: PPUSH
12374: PPUSH
12375: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12376: LD_VAR 0 1
12380: NOT
12381: PUSH
12382: LD_EXP 52
12386: PUSH
12387: LD_VAR 0 1
12391: ARRAY
12392: NOT
12393: OR
12394: PUSH
12395: LD_VAR 0 2
12399: NOT
12400: OR
12401: PUSH
12402: LD_VAR 0 3
12406: NOT
12407: OR
12408: IFFALSE 12412
// exit ;
12410: GO 12862
// side := mc_sides [ base ] ;
12412: LD_ADDR_VAR 0 6
12416: PUSH
12417: LD_EXP 78
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: ST_TO_ADDR
// if not side then
12428: LD_VAR 0 6
12432: NOT
12433: IFFALSE 12437
// exit ;
12435: GO 12862
// for i in solds do
12437: LD_ADDR_VAR 0 7
12441: PUSH
12442: LD_VAR 0 2
12446: PUSH
12447: FOR_IN
12448: IFFALSE 12509
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12450: LD_VAR 0 7
12454: PPUSH
12455: CALL_OW 310
12459: PPUSH
12460: CALL_OW 266
12464: PUSH
12465: LD_INT 32
12467: PUSH
12468: LD_INT 31
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: IN
12475: IFFALSE 12495
// solds := solds diff i else
12477: LD_ADDR_VAR 0 2
12481: PUSH
12482: LD_VAR 0 2
12486: PUSH
12487: LD_VAR 0 7
12491: DIFF
12492: ST_TO_ADDR
12493: GO 12507
// SetTag ( i , 18 ) ;
12495: LD_VAR 0 7
12499: PPUSH
12500: LD_INT 18
12502: PPUSH
12503: CALL_OW 109
12507: GO 12447
12509: POP
12510: POP
// if not solds then
12511: LD_VAR 0 2
12515: NOT
12516: IFFALSE 12520
// exit ;
12518: GO 12862
// repeat wait ( 0 0$1 ) ;
12520: LD_INT 35
12522: PPUSH
12523: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12527: LD_ADDR_VAR 0 5
12531: PUSH
12532: LD_VAR 0 6
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: CALL 12334 0 2
12546: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
12547: LD_VAR 0 5
12551: NOT
12552: PUSH
12553: LD_VAR 0 5
12557: PUSH
12558: LD_INT 3
12560: GREATER
12561: OR
12562: PUSH
12563: LD_EXP 74
12567: PUSH
12568: LD_VAR 0 1
12572: ARRAY
12573: OR
12574: IFFALSE 12615
// begin for i in solds do
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: LD_VAR 0 2
12585: PUSH
12586: FOR_IN
12587: IFFALSE 12611
// if HasTask ( i ) then
12589: LD_VAR 0 7
12593: PPUSH
12594: CALL_OW 314
12598: IFFALSE 12609
// ComStop ( i ) ;
12600: LD_VAR 0 7
12604: PPUSH
12605: CALL_OW 141
12609: GO 12586
12611: POP
12612: POP
// break ;
12613: GO 12850
// end ; for i in solds do
12615: LD_ADDR_VAR 0 7
12619: PUSH
12620: LD_VAR 0 2
12624: PUSH
12625: FOR_IN
12626: IFFALSE 12842
// begin if IsInUnit ( i ) then
12628: LD_VAR 0 7
12632: PPUSH
12633: CALL_OW 310
12637: IFFALSE 12648
// ComExitBuilding ( i ) ;
12639: LD_VAR 0 7
12643: PPUSH
12644: CALL_OW 122
// if GetLives ( i ) > 333 then
12648: LD_VAR 0 7
12652: PPUSH
12653: CALL_OW 256
12657: PUSH
12658: LD_INT 333
12660: GREATER
12661: IFFALSE 12689
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12663: LD_VAR 0 7
12667: PPUSH
12668: LD_VAR 0 5
12672: PPUSH
12673: LD_VAR 0 7
12677: PPUSH
12678: CALL_OW 74
12682: PPUSH
12683: CALL_OW 115
12687: GO 12840
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
12689: LD_ADDR_VAR 0 8
12693: PUSH
12694: LD_EXP 52
12698: PUSH
12699: LD_VAR 0 1
12703: ARRAY
12704: PPUSH
12705: LD_INT 2
12707: PUSH
12708: LD_INT 30
12710: PUSH
12711: LD_INT 0
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 30
12720: PUSH
12721: LD_INT 1
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 30
12730: PUSH
12731: LD_INT 6
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 72
12748: PPUSH
12749: LD_VAR 0 7
12753: PPUSH
12754: CALL_OW 74
12758: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
12759: LD_VAR 0 7
12763: PPUSH
12764: LD_VAR 0 8
12768: PPUSH
12769: CALL_OW 250
12773: PPUSH
12774: LD_INT 3
12776: PPUSH
12777: LD_INT 5
12779: PPUSH
12780: CALL_OW 272
12784: PPUSH
12785: LD_VAR 0 8
12789: PPUSH
12790: CALL_OW 251
12794: PPUSH
12795: LD_INT 3
12797: PPUSH
12798: LD_INT 5
12800: PPUSH
12801: CALL_OW 273
12805: PPUSH
12806: CALL_OW 111
// SetTag ( i , 0 ) ;
12810: LD_VAR 0 7
12814: PPUSH
12815: LD_INT 0
12817: PPUSH
12818: CALL_OW 109
// solds := solds diff i ;
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_VAR 0 2
12831: PUSH
12832: LD_VAR 0 7
12836: DIFF
12837: ST_TO_ADDR
// continue ;
12838: GO 12625
// end ; end ;
12840: GO 12625
12842: POP
12843: POP
// until solds ;
12844: LD_VAR 0 2
12848: IFFALSE 12520
// MC_Reset ( base , 18 ) ;
12850: LD_VAR 0 1
12854: PPUSH
12855: LD_INT 18
12857: PPUSH
12858: CALL 57402 0 2
// end ;
12862: LD_VAR 0 4
12866: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
12867: LD_INT 0
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
12873: PPUSH
12874: PPUSH
12875: PPUSH
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
12881: PPUSH
12882: PPUSH
12883: PPUSH
12884: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12885: LD_ADDR_VAR 0 12
12889: PUSH
12890: LD_EXP 52
12894: PUSH
12895: LD_VAR 0 1
12899: ARRAY
12900: PPUSH
12901: LD_INT 25
12903: PUSH
12904: LD_INT 3
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 72
12915: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12916: LD_ADDR_VAR 0 8
12920: PUSH
12921: LD_EXP 52
12925: PUSH
12926: LD_VAR 0 1
12930: ARRAY
12931: PPUSH
12932: LD_INT 2
12934: PUSH
12935: LD_INT 25
12937: PUSH
12938: LD_INT 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 25
12947: PUSH
12948: LD_INT 5
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 25
12957: PUSH
12958: LD_INT 8
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 25
12967: PUSH
12968: LD_INT 9
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PPUSH
12982: CALL_OW 72
12986: ST_TO_ADDR
// if not defenders and not solds then
12987: LD_VAR 0 2
12991: NOT
12992: PUSH
12993: LD_VAR 0 8
12997: NOT
12998: AND
12999: IFFALSE 13003
// exit ;
13001: GO 14332
// depot_under_attack := false ;
13003: LD_ADDR_VAR 0 16
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sold_defenders := [ ] ;
13011: LD_ADDR_VAR 0 17
13015: PUSH
13016: EMPTY
13017: ST_TO_ADDR
// if mechs then
13018: LD_VAR 0 12
13022: IFFALSE 13151
// for i in defenders do
13024: LD_ADDR_VAR 0 5
13028: PUSH
13029: LD_VAR 0 2
13033: PUSH
13034: FOR_IN
13035: IFFALSE 13149
// begin SetTag ( i , 20 ) ;
13037: LD_VAR 0 5
13041: PPUSH
13042: LD_INT 20
13044: PPUSH
13045: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13049: LD_VAR 0 5
13053: PPUSH
13054: CALL_OW 263
13058: PUSH
13059: LD_INT 1
13061: EQUAL
13062: PUSH
13063: LD_VAR 0 5
13067: PPUSH
13068: CALL_OW 311
13072: NOT
13073: AND
13074: PUSH
13075: LD_VAR 0 12
13079: AND
13080: IFFALSE 13147
// begin un := mechs [ 1 ] ;
13082: LD_ADDR_VAR 0 10
13086: PUSH
13087: LD_VAR 0 12
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13096: LD_VAR 0 10
13100: PPUSH
13101: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13105: LD_VAR 0 10
13109: PPUSH
13110: LD_VAR 0 5
13114: PPUSH
13115: CALL_OW 180
// SetTag ( un , 19 ) ;
13119: LD_VAR 0 10
13123: PPUSH
13124: LD_INT 19
13126: PPUSH
13127: CALL_OW 109
// mechs := mechs diff un ;
13131: LD_ADDR_VAR 0 12
13135: PUSH
13136: LD_VAR 0 12
13140: PUSH
13141: LD_VAR 0 10
13145: DIFF
13146: ST_TO_ADDR
// end ; end ;
13147: GO 13034
13149: POP
13150: POP
// if solds then
13151: LD_VAR 0 8
13155: IFFALSE 13214
// for i in solds do
13157: LD_ADDR_VAR 0 5
13161: PUSH
13162: LD_VAR 0 8
13166: PUSH
13167: FOR_IN
13168: IFFALSE 13212
// if not GetTag ( i ) then
13170: LD_VAR 0 5
13174: PPUSH
13175: CALL_OW 110
13179: NOT
13180: IFFALSE 13210
// begin defenders := defenders union i ;
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_VAR 0 2
13191: PUSH
13192: LD_VAR 0 5
13196: UNION
13197: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13198: LD_VAR 0 5
13202: PPUSH
13203: LD_INT 18
13205: PPUSH
13206: CALL_OW 109
// end ;
13210: GO 13167
13212: POP
13213: POP
// repeat wait ( 0 0$1 ) ;
13214: LD_INT 35
13216: PPUSH
13217: CALL_OW 67
// enemy := mc_scan [ base ] ;
13221: LD_ADDR_VAR 0 3
13225: PUSH
13226: LD_EXP 75
13230: PUSH
13231: LD_VAR 0 1
13235: ARRAY
13236: ST_TO_ADDR
// for i in defenders do
13237: LD_ADDR_VAR 0 5
13241: PUSH
13242: LD_VAR 0 2
13246: PUSH
13247: FOR_IN
13248: IFFALSE 13933
// begin e := NearestUnitToUnit ( enemy , i ) ;
13250: LD_ADDR_VAR 0 13
13254: PUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_VAR 0 5
13264: PPUSH
13265: CALL_OW 74
13269: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13270: LD_ADDR_VAR 0 16
13274: PUSH
13275: LD_EXP 52
13279: PUSH
13280: LD_VAR 0 1
13284: ARRAY
13285: PPUSH
13286: LD_INT 2
13288: PUSH
13289: LD_INT 30
13291: PUSH
13292: LD_INT 0
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 30
13301: PUSH
13302: LD_INT 1
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: PPUSH
13314: CALL_OW 72
13318: NOT
13319: PUSH
13320: LD_EXP 52
13324: PUSH
13325: LD_VAR 0 1
13329: ARRAY
13330: PPUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 30
13336: PUSH
13337: LD_INT 0
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 30
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 72
13363: PPUSH
13364: CALL_OW 256
13368: PUSH
13369: LD_INT 600
13371: LESS
13372: OR
13373: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13374: LD_VAR 0 5
13378: PPUSH
13379: CALL_OW 247
13383: PUSH
13384: LD_INT 2
13386: DOUBLE
13387: EQUAL
13388: IFTRUE 13392
13390: GO 13639
13392: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
13393: LD_VAR 0 5
13397: PPUSH
13398: CALL_OW 256
13402: PUSH
13403: LD_INT 650
13405: GREATER
13406: PUSH
13407: LD_VAR 0 5
13411: PPUSH
13412: LD_VAR 0 13
13416: PPUSH
13417: CALL_OW 296
13421: PUSH
13422: LD_INT 40
13424: LESS
13425: AND
13426: IFFALSE 13444
// ComAttackUnit ( i , e ) else
13428: LD_VAR 0 5
13432: PPUSH
13433: LD_VAR 0 13
13437: PPUSH
13438: CALL_OW 115
13442: GO 13522
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
13444: LD_VAR 0 5
13448: PPUSH
13449: LD_VAR 0 13
13453: PPUSH
13454: CALL_OW 296
13458: PUSH
13459: LD_INT 30
13461: GREATEREQUAL
13462: PUSH
13463: LD_VAR 0 5
13467: PPUSH
13468: CALL_OW 256
13472: PUSH
13473: LD_INT 650
13475: LESSEQUAL
13476: OR
13477: PUSH
13478: LD_VAR 0 5
13482: PPUSH
13483: LD_EXP 76
13487: PUSH
13488: LD_VAR 0 1
13492: ARRAY
13493: PPUSH
13494: CALL_OW 308
13498: NOT
13499: AND
13500: IFFALSE 13522
// ComMoveToArea ( i , mc_parking [ base ] ) ;
13502: LD_VAR 0 5
13506: PPUSH
13507: LD_EXP 76
13511: PUSH
13512: LD_VAR 0 1
13516: ARRAY
13517: PPUSH
13518: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13522: LD_VAR 0 5
13526: PPUSH
13527: CALL_OW 256
13531: PUSH
13532: LD_INT 998
13534: LESS
13535: PUSH
13536: LD_VAR 0 5
13540: PPUSH
13541: CALL_OW 263
13545: PUSH
13546: LD_INT 1
13548: EQUAL
13549: AND
13550: PUSH
13551: LD_VAR 0 5
13555: PPUSH
13556: CALL_OW 311
13560: AND
13561: PUSH
13562: LD_VAR 0 5
13566: PPUSH
13567: LD_EXP 76
13571: PUSH
13572: LD_VAR 0 1
13576: ARRAY
13577: PPUSH
13578: CALL_OW 308
13582: AND
13583: IFFALSE 13637
// begin mech := IsDrivenBy ( i ) ;
13585: LD_ADDR_VAR 0 9
13589: PUSH
13590: LD_VAR 0 5
13594: PPUSH
13595: CALL_OW 311
13599: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13600: LD_VAR 0 9
13604: PPUSH
13605: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13609: LD_VAR 0 9
13613: PPUSH
13614: LD_VAR 0 5
13618: PPUSH
13619: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
13623: LD_VAR 0 9
13627: PPUSH
13628: LD_VAR 0 5
13632: PPUSH
13633: CALL_OW 180
// end ; end ; unit_human :
13637: GO 13904
13639: LD_INT 1
13641: DOUBLE
13642: EQUAL
13643: IFTRUE 13647
13645: GO 13903
13647: POP
// begin b := IsInUnit ( i ) ;
13648: LD_ADDR_VAR 0 18
13652: PUSH
13653: LD_VAR 0 5
13657: PPUSH
13658: CALL_OW 310
13662: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13663: LD_ADDR_VAR 0 19
13667: PUSH
13668: LD_VAR 0 18
13672: NOT
13673: PUSH
13674: LD_VAR 0 18
13678: PPUSH
13679: CALL_OW 266
13683: PUSH
13684: LD_INT 32
13686: PUSH
13687: LD_INT 31
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: IN
13694: OR
13695: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13696: LD_VAR 0 16
13700: PUSH
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_INT 21
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 72
13720: PUSH
13721: LD_INT 1
13723: LESSEQUAL
13724: OR
13725: PUSH
13726: LD_VAR 0 19
13730: AND
13731: PUSH
13732: LD_VAR 0 5
13736: PUSH
13737: LD_VAR 0 17
13741: IN
13742: NOT
13743: AND
13744: IFFALSE 13837
// begin if b then
13746: LD_VAR 0 18
13750: IFFALSE 13799
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
13752: LD_VAR 0 18
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_VAR 0 18
13766: PPUSH
13767: CALL_OW 74
13771: PPUSH
13772: CALL_OW 296
13776: PUSH
13777: LD_INT 10
13779: LESS
13780: PUSH
13781: LD_VAR 0 18
13785: PPUSH
13786: CALL_OW 461
13790: PUSH
13791: LD_INT 7
13793: NONEQUAL
13794: AND
13795: IFFALSE 13799
// continue ;
13797: GO 13247
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13799: LD_ADDR_VAR 0 17
13803: PUSH
13804: LD_VAR 0 17
13808: PPUSH
13809: LD_VAR 0 17
13813: PUSH
13814: LD_INT 1
13816: PLUS
13817: PPUSH
13818: LD_VAR 0 5
13822: PPUSH
13823: CALL_OW 1
13827: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13828: LD_VAR 0 5
13832: PPUSH
13833: CALL_OW 122
// end ; if sold_defenders then
13837: LD_VAR 0 17
13841: IFFALSE 13901
// if i in sold_defenders then
13843: LD_VAR 0 5
13847: PUSH
13848: LD_VAR 0 17
13852: IN
13853: IFFALSE 13901
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13855: LD_VAR 0 5
13859: PPUSH
13860: CALL_OW 314
13864: NOT
13865: PUSH
13866: LD_VAR 0 5
13870: PPUSH
13871: LD_VAR 0 13
13875: PPUSH
13876: CALL_OW 296
13880: PUSH
13881: LD_INT 30
13883: LESS
13884: AND
13885: IFFALSE 13901
// ComAttackUnit ( i , e ) ;
13887: LD_VAR 0 5
13891: PPUSH
13892: LD_VAR 0 13
13896: PPUSH
13897: CALL_OW 115
// end ; end ; end ;
13901: GO 13904
13903: POP
// if IsDead ( i ) then
13904: LD_VAR 0 5
13908: PPUSH
13909: CALL_OW 301
13913: IFFALSE 13931
// defenders := defenders diff i ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_VAR 0 2
13924: PUSH
13925: LD_VAR 0 5
13929: DIFF
13930: ST_TO_ADDR
// end ;
13931: GO 13247
13933: POP
13934: POP
// until not enemy or not defenders ;
13935: LD_VAR 0 3
13939: NOT
13940: PUSH
13941: LD_VAR 0 2
13945: NOT
13946: OR
13947: IFFALSE 13214
// MC_Reset ( base , 18 ) ;
13949: LD_VAR 0 1
13953: PPUSH
13954: LD_INT 18
13956: PPUSH
13957: CALL 57402 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13961: LD_ADDR_VAR 0 2
13965: PUSH
13966: LD_VAR 0 2
13970: PUSH
13971: LD_VAR 0 2
13975: PPUSH
13976: LD_INT 2
13978: PUSH
13979: LD_INT 25
13981: PUSH
13982: LD_INT 1
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 25
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 8
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 9
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PPUSH
14026: CALL_OW 72
14030: DIFF
14031: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14032: LD_VAR 0 3
14036: NOT
14037: PUSH
14038: LD_VAR 0 2
14042: PPUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 72
14057: AND
14058: IFFALSE 14320
// begin tmp := FilterByTag ( defenders , 19 ) ;
14060: LD_ADDR_VAR 0 11
14064: PUSH
14065: LD_VAR 0 2
14069: PPUSH
14070: LD_INT 19
14072: PPUSH
14073: CALL 50700 0 2
14077: ST_TO_ADDR
// if tmp then
14078: LD_VAR 0 11
14082: IFFALSE 14152
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14084: LD_ADDR_VAR 0 11
14088: PUSH
14089: LD_VAR 0 11
14093: PPUSH
14094: LD_INT 25
14096: PUSH
14097: LD_INT 3
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 72
14108: ST_TO_ADDR
// if tmp then
14109: LD_VAR 0 11
14113: IFFALSE 14152
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14115: LD_ADDR_EXP 64
14119: PUSH
14120: LD_EXP 64
14124: PPUSH
14125: LD_VAR 0 1
14129: PPUSH
14130: LD_EXP 64
14134: PUSH
14135: LD_VAR 0 1
14139: ARRAY
14140: PUSH
14141: LD_VAR 0 11
14145: UNION
14146: PPUSH
14147: CALL_OW 1
14151: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_INT 19
14159: PPUSH
14160: CALL 57402 0 2
// repeat wait ( 0 0$1 ) ;
14164: LD_INT 35
14166: PPUSH
14167: CALL_OW 67
// for i in defenders do
14171: LD_ADDR_VAR 0 5
14175: PUSH
14176: LD_VAR 0 2
14180: PUSH
14181: FOR_IN
14182: IFFALSE 14271
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14184: LD_VAR 0 5
14188: PPUSH
14189: LD_EXP 76
14193: PUSH
14194: LD_VAR 0 1
14198: ARRAY
14199: PPUSH
14200: CALL_OW 308
14204: NOT
14205: IFFALSE 14229
// ComMoveToArea ( i , mc_parking [ base ] ) else
14207: LD_VAR 0 5
14211: PPUSH
14212: LD_EXP 76
14216: PUSH
14217: LD_VAR 0 1
14221: ARRAY
14222: PPUSH
14223: CALL_OW 113
14227: GO 14269
// if GetControl ( i ) = control_manual then
14229: LD_VAR 0 5
14233: PPUSH
14234: CALL_OW 263
14238: PUSH
14239: LD_INT 1
14241: EQUAL
14242: IFFALSE 14269
// if IsDrivenBy ( i ) then
14244: LD_VAR 0 5
14248: PPUSH
14249: CALL_OW 311
14253: IFFALSE 14269
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14255: LD_VAR 0 5
14259: PPUSH
14260: CALL_OW 311
14264: PPUSH
14265: CALL_OW 121
// end ;
14269: GO 14181
14271: POP
14272: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
14273: LD_VAR 0 2
14277: PPUSH
14278: LD_INT 95
14280: PUSH
14281: LD_EXP 76
14285: PUSH
14286: LD_VAR 0 1
14290: ARRAY
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 72
14300: PUSH
14301: LD_VAR 0 2
14305: EQUAL
14306: PUSH
14307: LD_EXP 75
14311: PUSH
14312: LD_VAR 0 1
14316: ARRAY
14317: OR
14318: IFFALSE 14164
// end ; MC_Reset ( base , 20 ) ;
14320: LD_VAR 0 1
14324: PPUSH
14325: LD_INT 20
14327: PPUSH
14328: CALL 57402 0 2
// end ;
14332: LD_VAR 0 4
14336: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14337: LD_INT 0
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
// result := false ;
14343: LD_ADDR_VAR 0 2
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// side := GetSide ( unit ) ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 255
14365: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14366: LD_ADDR_VAR 0 4
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 248
14380: ST_TO_ADDR
// case nat of 1 :
14381: LD_VAR 0 4
14385: PUSH
14386: LD_INT 1
14388: DOUBLE
14389: EQUAL
14390: IFTRUE 14394
14392: GO 14405
14394: POP
// tech := tech_lassight ; 2 :
14395: LD_ADDR_VAR 0 5
14399: PUSH
14400: LD_INT 12
14402: ST_TO_ADDR
14403: GO 14444
14405: LD_INT 2
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14424
14413: POP
// tech := tech_mortar ; 3 :
14414: LD_ADDR_VAR 0 5
14418: PUSH
14419: LD_INT 41
14421: ST_TO_ADDR
14422: GO 14444
14424: LD_INT 3
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14443
14432: POP
// tech := tech_bazooka ; end ;
14433: LD_ADDR_VAR 0 5
14437: PUSH
14438: LD_INT 44
14440: ST_TO_ADDR
14441: GO 14444
14443: POP
// if Researched ( side , tech ) then
14444: LD_VAR 0 3
14448: PPUSH
14449: LD_VAR 0 5
14453: PPUSH
14454: CALL_OW 325
14458: IFFALSE 14485
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: LD_INT 5
14467: PUSH
14468: LD_INT 8
14470: PUSH
14471: LD_INT 9
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: PUSH
14479: LD_VAR 0 4
14483: ARRAY
14484: ST_TO_ADDR
// end ;
14485: LD_VAR 0 2
14489: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14490: LD_INT 0
14492: PPUSH
14493: PPUSH
14494: PPUSH
// if not mines then
14495: LD_VAR 0 2
14499: NOT
14500: IFFALSE 14504
// exit ;
14502: GO 14648
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14504: LD_ADDR_VAR 0 5
14508: PUSH
14509: LD_INT 81
14511: PUSH
14512: LD_VAR 0 1
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 3
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 3
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 69
14546: ST_TO_ADDR
// for i in mines do
14547: LD_ADDR_VAR 0 4
14551: PUSH
14552: LD_VAR 0 2
14556: PUSH
14557: FOR_IN
14558: IFFALSE 14646
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14560: LD_VAR 0 4
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: LD_VAR 0 4
14573: PUSH
14574: LD_INT 2
14576: ARRAY
14577: PPUSH
14578: CALL_OW 458
14582: NOT
14583: IFFALSE 14587
// continue ;
14585: GO 14557
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14587: LD_VAR 0 4
14591: PUSH
14592: LD_INT 1
14594: ARRAY
14595: PPUSH
14596: LD_VAR 0 4
14600: PUSH
14601: LD_INT 2
14603: ARRAY
14604: PPUSH
14605: CALL_OW 428
14609: PUSH
14610: LD_VAR 0 5
14614: IN
14615: IFFALSE 14644
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14617: LD_VAR 0 4
14621: PUSH
14622: LD_INT 1
14624: ARRAY
14625: PPUSH
14626: LD_VAR 0 4
14630: PUSH
14631: LD_INT 2
14633: ARRAY
14634: PPUSH
14635: LD_VAR 0 1
14639: PPUSH
14640: CALL_OW 456
// end ;
14644: GO 14557
14646: POP
14647: POP
// end ;
14648: LD_VAR 0 3
14652: RET
// export function Count ( array ) ; var i ; begin
14653: LD_INT 0
14655: PPUSH
14656: PPUSH
// result := 0 ;
14657: LD_ADDR_VAR 0 2
14661: PUSH
14662: LD_INT 0
14664: ST_TO_ADDR
// for i in array do
14665: LD_ADDR_VAR 0 3
14669: PUSH
14670: LD_VAR 0 1
14674: PUSH
14675: FOR_IN
14676: IFFALSE 14700
// if i then
14678: LD_VAR 0 3
14682: IFFALSE 14698
// result := result + 1 ;
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: LD_VAR 0 2
14693: PUSH
14694: LD_INT 1
14696: PLUS
14697: ST_TO_ADDR
14698: GO 14675
14700: POP
14701: POP
// end ;
14702: LD_VAR 0 2
14706: RET
// export function IsEmpty ( building ) ; begin
14707: LD_INT 0
14709: PPUSH
// if not building then
14710: LD_VAR 0 1
14714: NOT
14715: IFFALSE 14719
// exit ;
14717: GO 14762
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14719: LD_ADDR_VAR 0 2
14723: PUSH
14724: LD_VAR 0 1
14728: PUSH
14729: LD_INT 22
14731: PUSH
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 255
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 58
14748: PUSH
14749: EMPTY
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 69
14760: IN
14761: ST_TO_ADDR
// end ;
14762: LD_VAR 0 2
14766: RET
// export function IsNotFull ( building ) ; begin
14767: LD_INT 0
14769: PPUSH
// if not building then
14770: LD_VAR 0 1
14774: NOT
14775: IFFALSE 14779
// exit ;
14777: GO 14798
// result := UnitsInside ( building ) < 6 ;
14779: LD_ADDR_VAR 0 2
14783: PUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 313
14793: PUSH
14794: LD_INT 6
14796: LESS
14797: ST_TO_ADDR
// end ;
14798: LD_VAR 0 2
14802: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
14807: PPUSH
14808: PPUSH
// tmp := [ ] ;
14809: LD_ADDR_VAR 0 3
14813: PUSH
14814: EMPTY
14815: ST_TO_ADDR
// list := [ ] ;
14816: LD_ADDR_VAR 0 5
14820: PUSH
14821: EMPTY
14822: ST_TO_ADDR
// for i = 16 to 25 do
14823: LD_ADDR_VAR 0 4
14827: PUSH
14828: DOUBLE
14829: LD_INT 16
14831: DEC
14832: ST_TO_ADDR
14833: LD_INT 25
14835: PUSH
14836: FOR_TO
14837: IFFALSE 14910
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14839: LD_ADDR_VAR 0 3
14843: PUSH
14844: LD_VAR 0 3
14848: PUSH
14849: LD_INT 22
14851: PUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 255
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 91
14868: PUSH
14869: LD_VAR 0 1
14873: PUSH
14874: LD_INT 6
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 30
14884: PUSH
14885: LD_VAR 0 4
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ADD
14907: ST_TO_ADDR
14908: GO 14836
14910: POP
14911: POP
// for i = 1 to tmp do
14912: LD_ADDR_VAR 0 4
14916: PUSH
14917: DOUBLE
14918: LD_INT 1
14920: DEC
14921: ST_TO_ADDR
14922: LD_VAR 0 3
14926: PUSH
14927: FOR_TO
14928: IFFALSE 15016
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 5
14939: PUSH
14940: LD_VAR 0 3
14944: PUSH
14945: LD_VAR 0 4
14949: ARRAY
14950: PPUSH
14951: CALL_OW 266
14955: PUSH
14956: LD_VAR 0 3
14960: PUSH
14961: LD_VAR 0 4
14965: ARRAY
14966: PPUSH
14967: CALL_OW 250
14971: PUSH
14972: LD_VAR 0 3
14976: PUSH
14977: LD_VAR 0 4
14981: ARRAY
14982: PPUSH
14983: CALL_OW 251
14987: PUSH
14988: LD_VAR 0 3
14992: PUSH
14993: LD_VAR 0 4
14997: ARRAY
14998: PPUSH
14999: CALL_OW 254
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: ADD
15013: ST_TO_ADDR
15014: GO 14927
15016: POP
15017: POP
// result := list ;
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_VAR 0 5
15027: ST_TO_ADDR
// end ;
15028: LD_VAR 0 2
15032: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15033: LD_INT 0
15035: PPUSH
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
15040: PPUSH
15041: PPUSH
// if not factory then
15042: LD_VAR 0 1
15046: NOT
15047: IFFALSE 15051
// exit ;
15049: GO 15583
// if control = control_apeman then
15051: LD_VAR 0 4
15055: PUSH
15056: LD_INT 5
15058: EQUAL
15059: IFFALSE 15168
// begin tmp := UnitsInside ( factory ) ;
15061: LD_ADDR_VAR 0 8
15065: PUSH
15066: LD_VAR 0 1
15070: PPUSH
15071: CALL_OW 313
15075: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15076: LD_VAR 0 8
15080: PPUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 12
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 72
15095: NOT
15096: IFFALSE 15106
// control := control_manual ;
15098: LD_ADDR_VAR 0 4
15102: PUSH
15103: LD_INT 1
15105: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15106: LD_ADDR_VAR 0 8
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL 14803 0 1
15120: ST_TO_ADDR
// if tmp then
15121: LD_VAR 0 8
15125: IFFALSE 15168
// begin for i in tmp do
15127: LD_ADDR_VAR 0 7
15131: PUSH
15132: LD_VAR 0 8
15136: PUSH
15137: FOR_IN
15138: IFFALSE 15166
// if i [ 1 ] = b_ext_radio then
15140: LD_VAR 0 7
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PUSH
15149: LD_INT 22
15151: EQUAL
15152: IFFALSE 15164
// begin control := control_remote ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_INT 2
15161: ST_TO_ADDR
// break ;
15162: GO 15166
// end ;
15164: GO 15137
15166: POP
15167: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15168: LD_VAR 0 1
15172: PPUSH
15173: LD_VAR 0 2
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_VAR 0 4
15187: PPUSH
15188: LD_VAR 0 5
15192: PPUSH
15193: CALL_OW 448
15197: IFFALSE 15232
// begin result := [ chassis , engine , control , weapon ] ;
15199: LD_ADDR_VAR 0 6
15203: PUSH
15204: LD_VAR 0 2
15208: PUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_VAR 0 4
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: ST_TO_ADDR
// exit ;
15230: GO 15583
// end ; _chassis := AvailableChassisList ( factory ) ;
15232: LD_ADDR_VAR 0 9
15236: PUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 475
15246: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15247: LD_ADDR_VAR 0 11
15251: PUSH
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 476
15261: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15262: LD_ADDR_VAR 0 12
15266: PUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 477
15276: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15277: LD_ADDR_VAR 0 10
15281: PUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 478
15291: ST_TO_ADDR
// if not chassis in _chassis then
15292: LD_VAR 0 2
15296: PUSH
15297: LD_VAR 0 9
15301: IN
15302: NOT
15303: IFFALSE 15329
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_VAR 0 9
15314: PUSH
15315: LD_INT 1
15317: PPUSH
15318: LD_VAR 0 9
15322: PPUSH
15323: CALL_OW 12
15327: ARRAY
15328: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15329: LD_VAR 0 2
15333: PPUSH
15334: LD_VAR 0 3
15338: PPUSH
15339: CALL 15588 0 2
15343: NOT
15344: IFFALSE 15403
// repeat engine := _engine [ 1 ] ;
15346: LD_ADDR_VAR 0 3
15350: PUSH
15351: LD_VAR 0 11
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15360: LD_ADDR_VAR 0 11
15364: PUSH
15365: LD_VAR 0 11
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 3
15377: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15378: LD_VAR 0 2
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: CALL 15588 0 2
15392: PUSH
15393: LD_VAR 0 11
15397: PUSH
15398: EMPTY
15399: EQUAL
15400: OR
15401: IFFALSE 15346
// if not control in _control then
15403: LD_VAR 0 4
15407: PUSH
15408: LD_VAR 0 12
15412: IN
15413: NOT
15414: IFFALSE 15440
// control := _control [ rand ( 1 , _control ) ] ;
15416: LD_ADDR_VAR 0 4
15420: PUSH
15421: LD_VAR 0 12
15425: PUSH
15426: LD_INT 1
15428: PPUSH
15429: LD_VAR 0 12
15433: PPUSH
15434: CALL_OW 12
15438: ARRAY
15439: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_VAR 0 5
15449: PPUSH
15450: CALL 15808 0 2
15454: NOT
15455: IFFALSE 15514
// repeat weapon := _weapon [ 1 ] ;
15457: LD_ADDR_VAR 0 5
15461: PUSH
15462: LD_VAR 0 10
15466: PUSH
15467: LD_INT 1
15469: ARRAY
15470: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15471: LD_ADDR_VAR 0 10
15475: PUSH
15476: LD_VAR 0 10
15480: PPUSH
15481: LD_INT 1
15483: PPUSH
15484: CALL_OW 3
15488: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15489: LD_VAR 0 2
15493: PPUSH
15494: LD_VAR 0 5
15498: PPUSH
15499: CALL 15808 0 2
15503: PUSH
15504: LD_VAR 0 10
15508: PUSH
15509: EMPTY
15510: EQUAL
15511: OR
15512: IFFALSE 15457
// result := [ ] ;
15514: LD_ADDR_VAR 0 6
15518: PUSH
15519: EMPTY
15520: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: LD_VAR 0 3
15535: PPUSH
15536: LD_VAR 0 4
15540: PPUSH
15541: LD_VAR 0 5
15545: PPUSH
15546: CALL_OW 448
15550: IFFALSE 15583
// result := [ chassis , engine , control , weapon ] ;
15552: LD_ADDR_VAR 0 6
15556: PUSH
15557: LD_VAR 0 2
15561: PUSH
15562: LD_VAR 0 3
15566: PUSH
15567: LD_VAR 0 4
15571: PUSH
15572: LD_VAR 0 5
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: ST_TO_ADDR
// end ;
15583: LD_VAR 0 6
15587: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15588: LD_INT 0
15590: PPUSH
// if not chassis or not engine then
15591: LD_VAR 0 1
15595: NOT
15596: PUSH
15597: LD_VAR 0 2
15601: NOT
15602: OR
15603: IFFALSE 15607
// exit ;
15605: GO 15803
// case engine of engine_solar :
15607: LD_VAR 0 2
15611: PUSH
15612: LD_INT 2
15614: DOUBLE
15615: EQUAL
15616: IFTRUE 15620
15618: GO 15658
15620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15621: LD_ADDR_VAR 0 3
15625: PUSH
15626: LD_INT 11
15628: PUSH
15629: LD_INT 12
15631: PUSH
15632: LD_INT 13
15634: PUSH
15635: LD_INT 14
15637: PUSH
15638: LD_INT 1
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: LD_INT 3
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: ST_TO_ADDR
15656: GO 15787
15658: LD_INT 1
15660: DOUBLE
15661: EQUAL
15662: IFTRUE 15666
15664: GO 15728
15666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15667: LD_ADDR_VAR 0 3
15671: PUSH
15672: LD_INT 11
15674: PUSH
15675: LD_INT 12
15677: PUSH
15678: LD_INT 13
15680: PUSH
15681: LD_INT 14
15683: PUSH
15684: LD_INT 1
15686: PUSH
15687: LD_INT 2
15689: PUSH
15690: LD_INT 3
15692: PUSH
15693: LD_INT 4
15695: PUSH
15696: LD_INT 5
15698: PUSH
15699: LD_INT 21
15701: PUSH
15702: LD_INT 23
15704: PUSH
15705: LD_INT 22
15707: PUSH
15708: LD_INT 24
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: ST_TO_ADDR
15726: GO 15787
15728: LD_INT 3
15730: DOUBLE
15731: EQUAL
15732: IFTRUE 15736
15734: GO 15786
15736: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15737: LD_ADDR_VAR 0 3
15741: PUSH
15742: LD_INT 13
15744: PUSH
15745: LD_INT 14
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: LD_INT 3
15753: PUSH
15754: LD_INT 4
15756: PUSH
15757: LD_INT 5
15759: PUSH
15760: LD_INT 21
15762: PUSH
15763: LD_INT 22
15765: PUSH
15766: LD_INT 23
15768: PUSH
15769: LD_INT 24
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: ST_TO_ADDR
15784: GO 15787
15786: POP
// result := ( chassis in result ) ;
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: LD_VAR 0 1
15796: PUSH
15797: LD_VAR 0 3
15801: IN
15802: ST_TO_ADDR
// end ;
15803: LD_VAR 0 3
15807: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15808: LD_INT 0
15810: PPUSH
// if not chassis or not weapon then
15811: LD_VAR 0 1
15815: NOT
15816: PUSH
15817: LD_VAR 0 2
15821: NOT
15822: OR
15823: IFFALSE 15827
// exit ;
15825: GO 16853
// case weapon of us_machine_gun :
15827: LD_VAR 0 2
15831: PUSH
15832: LD_INT 2
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15870
15840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: LD_INT 3
15854: PUSH
15855: LD_INT 4
15857: PUSH
15858: LD_INT 5
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
15868: GO 16837
15870: LD_INT 3
15872: DOUBLE
15873: EQUAL
15874: IFTRUE 15878
15876: GO 15908
15878: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15879: LD_ADDR_VAR 0 3
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 3
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: LD_INT 5
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: ST_TO_ADDR
15906: GO 16837
15908: LD_INT 11
15910: DOUBLE
15911: EQUAL
15912: IFTRUE 15916
15914: GO 15946
15916: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 1
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: LD_INT 3
15930: PUSH
15931: LD_INT 4
15933: PUSH
15934: LD_INT 5
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: ST_TO_ADDR
15944: GO 16837
15946: LD_INT 4
15948: DOUBLE
15949: EQUAL
15950: IFTRUE 15954
15952: GO 15980
15954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: LD_INT 5
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
15978: GO 16837
15980: LD_INT 5
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 16014
15988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15989: LD_ADDR_VAR 0 3
15993: PUSH
15994: LD_INT 2
15996: PUSH
15997: LD_INT 3
15999: PUSH
16000: LD_INT 4
16002: PUSH
16003: LD_INT 5
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: ST_TO_ADDR
16012: GO 16837
16014: LD_INT 9
16016: DOUBLE
16017: EQUAL
16018: IFTRUE 16022
16020: GO 16048
16022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16023: LD_ADDR_VAR 0 3
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: LD_INT 3
16033: PUSH
16034: LD_INT 4
16036: PUSH
16037: LD_INT 5
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: ST_TO_ADDR
16046: GO 16837
16048: LD_INT 7
16050: DOUBLE
16051: EQUAL
16052: IFTRUE 16056
16054: GO 16082
16056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16057: LD_ADDR_VAR 0 3
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: LD_INT 4
16070: PUSH
16071: LD_INT 5
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: ST_TO_ADDR
16080: GO 16837
16082: LD_INT 12
16084: DOUBLE
16085: EQUAL
16086: IFTRUE 16090
16088: GO 16116
16090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16091: LD_ADDR_VAR 0 3
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 3
16101: PUSH
16102: LD_INT 4
16104: PUSH
16105: LD_INT 5
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: ST_TO_ADDR
16114: GO 16837
16116: LD_INT 13
16118: DOUBLE
16119: EQUAL
16120: IFTRUE 16124
16122: GO 16150
16124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16125: LD_ADDR_VAR 0 3
16129: PUSH
16130: LD_INT 2
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 4
16138: PUSH
16139: LD_INT 5
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: ST_TO_ADDR
16148: GO 16837
16150: LD_INT 14
16152: DOUBLE
16153: EQUAL
16154: IFTRUE 16158
16156: GO 16176
16158: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16159: LD_ADDR_VAR 0 3
16163: PUSH
16164: LD_INT 4
16166: PUSH
16167: LD_INT 5
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: ST_TO_ADDR
16174: GO 16837
16176: LD_INT 6
16178: DOUBLE
16179: EQUAL
16180: IFTRUE 16184
16182: GO 16202
16184: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16185: LD_ADDR_VAR 0 3
16189: PUSH
16190: LD_INT 4
16192: PUSH
16193: LD_INT 5
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16837
16202: LD_INT 10
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16228
16210: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_INT 4
16218: PUSH
16219: LD_INT 5
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: ST_TO_ADDR
16226: GO 16837
16228: LD_INT 22
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16262
16236: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 11
16244: PUSH
16245: LD_INT 12
16247: PUSH
16248: LD_INT 13
16250: PUSH
16251: LD_INT 14
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: ST_TO_ADDR
16260: GO 16837
16262: LD_INT 23
16264: DOUBLE
16265: EQUAL
16266: IFTRUE 16270
16268: GO 16296
16270: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16271: LD_ADDR_VAR 0 3
16275: PUSH
16276: LD_INT 11
16278: PUSH
16279: LD_INT 12
16281: PUSH
16282: LD_INT 13
16284: PUSH
16285: LD_INT 14
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: ST_TO_ADDR
16294: GO 16837
16296: LD_INT 24
16298: DOUBLE
16299: EQUAL
16300: IFTRUE 16304
16302: GO 16330
16304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_INT 11
16312: PUSH
16313: LD_INT 12
16315: PUSH
16316: LD_INT 13
16318: PUSH
16319: LD_INT 14
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: ST_TO_ADDR
16328: GO 16837
16330: LD_INT 30
16332: DOUBLE
16333: EQUAL
16334: IFTRUE 16338
16336: GO 16364
16338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_INT 11
16346: PUSH
16347: LD_INT 12
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 14
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: ST_TO_ADDR
16362: GO 16837
16364: LD_INT 25
16366: DOUBLE
16367: EQUAL
16368: IFTRUE 16372
16370: GO 16390
16372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16373: LD_ADDR_VAR 0 3
16377: PUSH
16378: LD_INT 13
16380: PUSH
16381: LD_INT 14
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: ST_TO_ADDR
16388: GO 16837
16390: LD_INT 27
16392: DOUBLE
16393: EQUAL
16394: IFTRUE 16398
16396: GO 16416
16398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16399: LD_ADDR_VAR 0 3
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 14
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: ST_TO_ADDR
16414: GO 16837
16416: LD_INT 28
16418: DOUBLE
16419: EQUAL
16420: IFTRUE 16424
16422: GO 16442
16424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16425: LD_ADDR_VAR 0 3
16429: PUSH
16430: LD_INT 13
16432: PUSH
16433: LD_INT 14
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: ST_TO_ADDR
16440: GO 16837
16442: LD_INT 29
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16468
16450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_INT 13
16458: PUSH
16459: LD_INT 14
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: ST_TO_ADDR
16466: GO 16837
16468: LD_INT 31
16470: DOUBLE
16471: EQUAL
16472: IFTRUE 16476
16474: GO 16494
16476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16477: LD_ADDR_VAR 0 3
16481: PUSH
16482: LD_INT 13
16484: PUSH
16485: LD_INT 14
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: ST_TO_ADDR
16492: GO 16837
16494: LD_INT 26
16496: DOUBLE
16497: EQUAL
16498: IFTRUE 16502
16500: GO 16520
16502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16503: LD_ADDR_VAR 0 3
16507: PUSH
16508: LD_INT 13
16510: PUSH
16511: LD_INT 14
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: ST_TO_ADDR
16518: GO 16837
16520: LD_INT 42
16522: DOUBLE
16523: EQUAL
16524: IFTRUE 16528
16526: GO 16554
16528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_INT 21
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 23
16542: PUSH
16543: LD_INT 24
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: ST_TO_ADDR
16552: GO 16837
16554: LD_INT 43
16556: DOUBLE
16557: EQUAL
16558: IFTRUE 16562
16560: GO 16588
16562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16563: LD_ADDR_VAR 0 3
16567: PUSH
16568: LD_INT 21
16570: PUSH
16571: LD_INT 22
16573: PUSH
16574: LD_INT 23
16576: PUSH
16577: LD_INT 24
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: ST_TO_ADDR
16586: GO 16837
16588: LD_INT 44
16590: DOUBLE
16591: EQUAL
16592: IFTRUE 16596
16594: GO 16622
16596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16597: LD_ADDR_VAR 0 3
16601: PUSH
16602: LD_INT 21
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 23
16610: PUSH
16611: LD_INT 24
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: ST_TO_ADDR
16620: GO 16837
16622: LD_INT 45
16624: DOUBLE
16625: EQUAL
16626: IFTRUE 16630
16628: GO 16656
16630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16631: LD_ADDR_VAR 0 3
16635: PUSH
16636: LD_INT 21
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_INT 23
16644: PUSH
16645: LD_INT 24
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: ST_TO_ADDR
16654: GO 16837
16656: LD_INT 49
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16690
16664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16665: LD_ADDR_VAR 0 3
16669: PUSH
16670: LD_INT 21
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_INT 23
16678: PUSH
16679: LD_INT 24
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: ST_TO_ADDR
16688: GO 16837
16690: LD_INT 51
16692: DOUBLE
16693: EQUAL
16694: IFTRUE 16698
16696: GO 16724
16698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: LD_INT 21
16706: PUSH
16707: LD_INT 22
16709: PUSH
16710: LD_INT 23
16712: PUSH
16713: LD_INT 24
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: ST_TO_ADDR
16722: GO 16837
16724: LD_INT 52
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 16758
16732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16733: LD_ADDR_VAR 0 3
16737: PUSH
16738: LD_INT 21
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_INT 23
16746: PUSH
16747: LD_INT 24
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: ST_TO_ADDR
16756: GO 16837
16758: LD_INT 53
16760: DOUBLE
16761: EQUAL
16762: IFTRUE 16766
16764: GO 16784
16766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16767: LD_ADDR_VAR 0 3
16771: PUSH
16772: LD_INT 23
16774: PUSH
16775: LD_INT 24
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: ST_TO_ADDR
16782: GO 16837
16784: LD_INT 46
16786: DOUBLE
16787: EQUAL
16788: IFTRUE 16792
16790: GO 16810
16792: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16793: LD_ADDR_VAR 0 3
16797: PUSH
16798: LD_INT 23
16800: PUSH
16801: LD_INT 24
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: ST_TO_ADDR
16808: GO 16837
16810: LD_INT 47
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16836
16818: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16819: LD_ADDR_VAR 0 3
16823: PUSH
16824: LD_INT 23
16826: PUSH
16827: LD_INT 24
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: ST_TO_ADDR
16834: GO 16837
16836: POP
// result := ( chassis in result ) ;
16837: LD_ADDR_VAR 0 3
16841: PUSH
16842: LD_VAR 0 1
16846: PUSH
16847: LD_VAR 0 3
16851: IN
16852: ST_TO_ADDR
// end ;
16853: LD_VAR 0 3
16857: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16858: LD_INT 0
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
// result := array ;
16867: LD_ADDR_VAR 0 5
16871: PUSH
16872: LD_VAR 0 1
16876: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16877: LD_VAR 0 1
16881: NOT
16882: PUSH
16883: LD_VAR 0 2
16887: NOT
16888: OR
16889: PUSH
16890: LD_VAR 0 3
16894: NOT
16895: OR
16896: PUSH
16897: LD_VAR 0 2
16901: PUSH
16902: LD_VAR 0 1
16906: GREATER
16907: OR
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 1
16918: GREATER
16919: OR
16920: IFFALSE 16924
// exit ;
16922: GO 17220
// if direction then
16924: LD_VAR 0 4
16928: IFFALSE 16992
// begin d := 1 ;
16930: LD_ADDR_VAR 0 9
16934: PUSH
16935: LD_INT 1
16937: ST_TO_ADDR
// if i_from > i_to then
16938: LD_VAR 0 2
16942: PUSH
16943: LD_VAR 0 3
16947: GREATER
16948: IFFALSE 16974
// length := ( array - i_from ) + i_to else
16950: LD_ADDR_VAR 0 11
16954: PUSH
16955: LD_VAR 0 1
16959: PUSH
16960: LD_VAR 0 2
16964: MINUS
16965: PUSH
16966: LD_VAR 0 3
16970: PLUS
16971: ST_TO_ADDR
16972: GO 16990
// length := i_to - i_from ;
16974: LD_ADDR_VAR 0 11
16978: PUSH
16979: LD_VAR 0 3
16983: PUSH
16984: LD_VAR 0 2
16988: MINUS
16989: ST_TO_ADDR
// end else
16990: GO 17053
// begin d := - 1 ;
16992: LD_ADDR_VAR 0 9
16996: PUSH
16997: LD_INT 1
16999: NEG
17000: ST_TO_ADDR
// if i_from > i_to then
17001: LD_VAR 0 2
17005: PUSH
17006: LD_VAR 0 3
17010: GREATER
17011: IFFALSE 17031
// length := i_from - i_to else
17013: LD_ADDR_VAR 0 11
17017: PUSH
17018: LD_VAR 0 2
17022: PUSH
17023: LD_VAR 0 3
17027: MINUS
17028: ST_TO_ADDR
17029: GO 17053
// length := ( array - i_to ) + i_from ;
17031: LD_ADDR_VAR 0 11
17035: PUSH
17036: LD_VAR 0 1
17040: PUSH
17041: LD_VAR 0 3
17045: MINUS
17046: PUSH
17047: LD_VAR 0 2
17051: PLUS
17052: ST_TO_ADDR
// end ; if not length then
17053: LD_VAR 0 11
17057: NOT
17058: IFFALSE 17062
// exit ;
17060: GO 17220
// tmp := array ;
17062: LD_ADDR_VAR 0 10
17066: PUSH
17067: LD_VAR 0 1
17071: ST_TO_ADDR
// for i = 1 to length do
17072: LD_ADDR_VAR 0 6
17076: PUSH
17077: DOUBLE
17078: LD_INT 1
17080: DEC
17081: ST_TO_ADDR
17082: LD_VAR 0 11
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17208
// begin for j = 1 to array do
17090: LD_ADDR_VAR 0 7
17094: PUSH
17095: DOUBLE
17096: LD_INT 1
17098: DEC
17099: ST_TO_ADDR
17100: LD_VAR 0 1
17104: PUSH
17105: FOR_TO
17106: IFFALSE 17194
// begin k := j + d ;
17108: LD_ADDR_VAR 0 8
17112: PUSH
17113: LD_VAR 0 7
17117: PUSH
17118: LD_VAR 0 9
17122: PLUS
17123: ST_TO_ADDR
// if k > array then
17124: LD_VAR 0 8
17128: PUSH
17129: LD_VAR 0 1
17133: GREATER
17134: IFFALSE 17144
// k := 1 ;
17136: LD_ADDR_VAR 0 8
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// if not k then
17144: LD_VAR 0 8
17148: NOT
17149: IFFALSE 17161
// k := array ;
17151: LD_ADDR_VAR 0 8
17155: PUSH
17156: LD_VAR 0 1
17160: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17161: LD_ADDR_VAR 0 10
17165: PUSH
17166: LD_VAR 0 10
17170: PPUSH
17171: LD_VAR 0 8
17175: PPUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_VAR 0 7
17185: ARRAY
17186: PPUSH
17187: CALL_OW 1
17191: ST_TO_ADDR
// end ;
17192: GO 17105
17194: POP
17195: POP
// array := tmp ;
17196: LD_ADDR_VAR 0 1
17200: PUSH
17201: LD_VAR 0 10
17205: ST_TO_ADDR
// end ;
17206: GO 17087
17208: POP
17209: POP
// result := array ;
17210: LD_ADDR_VAR 0 5
17214: PUSH
17215: LD_VAR 0 1
17219: ST_TO_ADDR
// end ;
17220: LD_VAR 0 5
17224: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17225: LD_INT 0
17227: PPUSH
17228: PPUSH
// result := 0 ;
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 0
17236: ST_TO_ADDR
// if not array or not value in array then
17237: LD_VAR 0 1
17241: NOT
17242: PUSH
17243: LD_VAR 0 2
17247: PUSH
17248: LD_VAR 0 1
17252: IN
17253: NOT
17254: OR
17255: IFFALSE 17259
// exit ;
17257: GO 17313
// for i = 1 to array do
17259: LD_ADDR_VAR 0 4
17263: PUSH
17264: DOUBLE
17265: LD_INT 1
17267: DEC
17268: ST_TO_ADDR
17269: LD_VAR 0 1
17273: PUSH
17274: FOR_TO
17275: IFFALSE 17311
// if value = array [ i ] then
17277: LD_VAR 0 2
17281: PUSH
17282: LD_VAR 0 1
17286: PUSH
17287: LD_VAR 0 4
17291: ARRAY
17292: EQUAL
17293: IFFALSE 17309
// begin result := i ;
17295: LD_ADDR_VAR 0 3
17299: PUSH
17300: LD_VAR 0 4
17304: ST_TO_ADDR
// exit ;
17305: POP
17306: POP
17307: GO 17313
// end ;
17309: GO 17274
17311: POP
17312: POP
// end ;
17313: LD_VAR 0 3
17317: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17318: LD_INT 0
17320: PPUSH
// vc_chassis := chassis ;
17321: LD_ADDR_OWVAR 37
17325: PUSH
17326: LD_VAR 0 1
17330: ST_TO_ADDR
// vc_engine := engine ;
17331: LD_ADDR_OWVAR 39
17335: PUSH
17336: LD_VAR 0 2
17340: ST_TO_ADDR
// vc_control := control ;
17341: LD_ADDR_OWVAR 38
17345: PUSH
17346: LD_VAR 0 3
17350: ST_TO_ADDR
// vc_weapon := weapon ;
17351: LD_ADDR_OWVAR 40
17355: PUSH
17356: LD_VAR 0 4
17360: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17361: LD_ADDR_OWVAR 41
17365: PUSH
17366: LD_VAR 0 5
17370: ST_TO_ADDR
// end ;
17371: LD_VAR 0 6
17375: RET
// export function WantPlant ( unit ) ; var task ; begin
17376: LD_INT 0
17378: PPUSH
17379: PPUSH
// result := false ;
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_INT 0
17387: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 437
17402: ST_TO_ADDR
// if task then
17403: LD_VAR 0 3
17407: IFFALSE 17435
// if task [ 1 ] [ 1 ] = p then
17409: LD_VAR 0 3
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: PUSH
17418: LD_INT 1
17420: ARRAY
17421: PUSH
17422: LD_STRING p
17424: EQUAL
17425: IFFALSE 17435
// result := true ;
17427: LD_ADDR_VAR 0 2
17431: PUSH
17432: LD_INT 1
17434: ST_TO_ADDR
// end ;
17435: LD_VAR 0 2
17439: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17440: LD_INT 0
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
// if pos < 1 then
17446: LD_VAR 0 2
17450: PUSH
17451: LD_INT 1
17453: LESS
17454: IFFALSE 17458
// exit ;
17456: GO 17761
// if pos = 1 then
17458: LD_VAR 0 2
17462: PUSH
17463: LD_INT 1
17465: EQUAL
17466: IFFALSE 17499
// result := Replace ( arr , pos [ 1 ] , value ) else
17468: LD_ADDR_VAR 0 4
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_VAR 0 2
17482: PUSH
17483: LD_INT 1
17485: ARRAY
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL_OW 1
17496: ST_TO_ADDR
17497: GO 17761
// begin tmp := arr ;
17499: LD_ADDR_VAR 0 6
17503: PUSH
17504: LD_VAR 0 1
17508: ST_TO_ADDR
// s_arr := [ tmp ] ;
17509: LD_ADDR_VAR 0 7
17513: PUSH
17514: LD_VAR 0 6
17518: PUSH
17519: EMPTY
17520: LIST
17521: ST_TO_ADDR
// for i = 1 to pos - 1 do
17522: LD_ADDR_VAR 0 5
17526: PUSH
17527: DOUBLE
17528: LD_INT 1
17530: DEC
17531: ST_TO_ADDR
17532: LD_VAR 0 2
17536: PUSH
17537: LD_INT 1
17539: MINUS
17540: PUSH
17541: FOR_TO
17542: IFFALSE 17587
// begin tmp := tmp [ pos [ i ] ] ;
17544: LD_ADDR_VAR 0 6
17548: PUSH
17549: LD_VAR 0 6
17553: PUSH
17554: LD_VAR 0 2
17558: PUSH
17559: LD_VAR 0 5
17563: ARRAY
17564: ARRAY
17565: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17566: LD_ADDR_VAR 0 7
17570: PUSH
17571: LD_VAR 0 7
17575: PUSH
17576: LD_VAR 0 6
17580: PUSH
17581: EMPTY
17582: LIST
17583: ADD
17584: ST_TO_ADDR
// end ;
17585: GO 17541
17587: POP
17588: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17589: LD_ADDR_VAR 0 6
17593: PUSH
17594: LD_VAR 0 6
17598: PPUSH
17599: LD_VAR 0 2
17603: PUSH
17604: LD_VAR 0 2
17608: ARRAY
17609: PPUSH
17610: LD_VAR 0 3
17614: PPUSH
17615: CALL_OW 1
17619: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17620: LD_ADDR_VAR 0 7
17624: PUSH
17625: LD_VAR 0 7
17629: PPUSH
17630: LD_VAR 0 7
17634: PPUSH
17635: LD_VAR 0 6
17639: PPUSH
17640: CALL_OW 1
17644: ST_TO_ADDR
// for i = s_arr downto 2 do
17645: LD_ADDR_VAR 0 5
17649: PUSH
17650: DOUBLE
17651: LD_VAR 0 7
17655: INC
17656: ST_TO_ADDR
17657: LD_INT 2
17659: PUSH
17660: FOR_DOWNTO
17661: IFFALSE 17745
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17663: LD_ADDR_VAR 0 6
17667: PUSH
17668: LD_VAR 0 7
17672: PUSH
17673: LD_VAR 0 5
17677: PUSH
17678: LD_INT 1
17680: MINUS
17681: ARRAY
17682: PPUSH
17683: LD_VAR 0 2
17687: PUSH
17688: LD_VAR 0 5
17692: PUSH
17693: LD_INT 1
17695: MINUS
17696: ARRAY
17697: PPUSH
17698: LD_VAR 0 7
17702: PUSH
17703: LD_VAR 0 5
17707: ARRAY
17708: PPUSH
17709: CALL_OW 1
17713: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17714: LD_ADDR_VAR 0 7
17718: PUSH
17719: LD_VAR 0 7
17723: PPUSH
17724: LD_VAR 0 5
17728: PUSH
17729: LD_INT 1
17731: MINUS
17732: PPUSH
17733: LD_VAR 0 6
17737: PPUSH
17738: CALL_OW 1
17742: ST_TO_ADDR
// end ;
17743: GO 17660
17745: POP
17746: POP
// result := s_arr [ 1 ] ;
17747: LD_ADDR_VAR 0 4
17751: PUSH
17752: LD_VAR 0 7
17756: PUSH
17757: LD_INT 1
17759: ARRAY
17760: ST_TO_ADDR
// end ; end ;
17761: LD_VAR 0 4
17765: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17766: LD_INT 0
17768: PPUSH
17769: PPUSH
// if not list then
17770: LD_VAR 0 1
17774: NOT
17775: IFFALSE 17779
// exit ;
17777: GO 17870
// i := list [ pos1 ] ;
17779: LD_ADDR_VAR 0 5
17783: PUSH
17784: LD_VAR 0 1
17788: PUSH
17789: LD_VAR 0 2
17793: ARRAY
17794: ST_TO_ADDR
// if not i then
17795: LD_VAR 0 5
17799: NOT
17800: IFFALSE 17804
// exit ;
17802: GO 17870
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17804: LD_ADDR_VAR 0 1
17808: PUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_VAR 0 2
17818: PPUSH
17819: LD_VAR 0 1
17823: PUSH
17824: LD_VAR 0 3
17828: ARRAY
17829: PPUSH
17830: CALL_OW 1
17834: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17835: LD_ADDR_VAR 0 1
17839: PUSH
17840: LD_VAR 0 1
17844: PPUSH
17845: LD_VAR 0 3
17849: PPUSH
17850: LD_VAR 0 5
17854: PPUSH
17855: CALL_OW 1
17859: ST_TO_ADDR
// result := list ;
17860: LD_ADDR_VAR 0 4
17864: PUSH
17865: LD_VAR 0 1
17869: ST_TO_ADDR
// end ;
17870: LD_VAR 0 4
17874: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17875: LD_INT 0
17877: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17878: LD_ADDR_VAR 0 5
17882: PUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 250
17892: PPUSH
17893: LD_VAR 0 1
17897: PPUSH
17898: CALL_OW 251
17902: PPUSH
17903: LD_VAR 0 2
17907: PPUSH
17908: LD_VAR 0 3
17912: PPUSH
17913: LD_VAR 0 4
17917: PPUSH
17918: CALL 17928 0 5
17922: ST_TO_ADDR
// end ;
17923: LD_VAR 0 5
17927: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17928: LD_INT 0
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
// if not list then
17934: LD_VAR 0 3
17938: NOT
17939: IFFALSE 17943
// exit ;
17941: GO 18331
// result := [ ] ;
17943: LD_ADDR_VAR 0 6
17947: PUSH
17948: EMPTY
17949: ST_TO_ADDR
// for i in list do
17950: LD_ADDR_VAR 0 7
17954: PUSH
17955: LD_VAR 0 3
17959: PUSH
17960: FOR_IN
17961: IFFALSE 18163
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17963: LD_ADDR_VAR 0 9
17967: PUSH
17968: LD_VAR 0 7
17972: PPUSH
17973: LD_VAR 0 1
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 297
17987: ST_TO_ADDR
// if not result then
17988: LD_VAR 0 6
17992: NOT
17993: IFFALSE 18019
// result := [ [ i , tmp ] ] else
17995: LD_ADDR_VAR 0 6
17999: PUSH
18000: LD_VAR 0 7
18004: PUSH
18005: LD_VAR 0 9
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: ST_TO_ADDR
18017: GO 18161
// begin if result [ result ] [ 2 ] < tmp then
18019: LD_VAR 0 6
18023: PUSH
18024: LD_VAR 0 6
18028: ARRAY
18029: PUSH
18030: LD_INT 2
18032: ARRAY
18033: PUSH
18034: LD_VAR 0 9
18038: LESS
18039: IFFALSE 18081
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18041: LD_ADDR_VAR 0 6
18045: PUSH
18046: LD_VAR 0 6
18050: PPUSH
18051: LD_VAR 0 6
18055: PUSH
18056: LD_INT 1
18058: PLUS
18059: PPUSH
18060: LD_VAR 0 7
18064: PUSH
18065: LD_VAR 0 9
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PPUSH
18074: CALL_OW 2
18078: ST_TO_ADDR
18079: GO 18161
// for j = 1 to result do
18081: LD_ADDR_VAR 0 8
18085: PUSH
18086: DOUBLE
18087: LD_INT 1
18089: DEC
18090: ST_TO_ADDR
18091: LD_VAR 0 6
18095: PUSH
18096: FOR_TO
18097: IFFALSE 18159
// begin if tmp < result [ j ] [ 2 ] then
18099: LD_VAR 0 9
18103: PUSH
18104: LD_VAR 0 6
18108: PUSH
18109: LD_VAR 0 8
18113: ARRAY
18114: PUSH
18115: LD_INT 2
18117: ARRAY
18118: LESS
18119: IFFALSE 18157
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18121: LD_ADDR_VAR 0 6
18125: PUSH
18126: LD_VAR 0 6
18130: PPUSH
18131: LD_VAR 0 8
18135: PPUSH
18136: LD_VAR 0 7
18140: PUSH
18141: LD_VAR 0 9
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PPUSH
18150: CALL_OW 2
18154: ST_TO_ADDR
// break ;
18155: GO 18159
// end ; end ;
18157: GO 18096
18159: POP
18160: POP
// end ; end ;
18161: GO 17960
18163: POP
18164: POP
// if result and not asc then
18165: LD_VAR 0 6
18169: PUSH
18170: LD_VAR 0 4
18174: NOT
18175: AND
18176: IFFALSE 18251
// begin tmp := result ;
18178: LD_ADDR_VAR 0 9
18182: PUSH
18183: LD_VAR 0 6
18187: ST_TO_ADDR
// for i = tmp downto 1 do
18188: LD_ADDR_VAR 0 7
18192: PUSH
18193: DOUBLE
18194: LD_VAR 0 9
18198: INC
18199: ST_TO_ADDR
18200: LD_INT 1
18202: PUSH
18203: FOR_DOWNTO
18204: IFFALSE 18249
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18206: LD_ADDR_VAR 0 6
18210: PUSH
18211: LD_VAR 0 6
18215: PPUSH
18216: LD_VAR 0 9
18220: PUSH
18221: LD_VAR 0 7
18225: MINUS
18226: PUSH
18227: LD_INT 1
18229: PLUS
18230: PPUSH
18231: LD_VAR 0 9
18235: PUSH
18236: LD_VAR 0 7
18240: ARRAY
18241: PPUSH
18242: CALL_OW 1
18246: ST_TO_ADDR
18247: GO 18203
18249: POP
18250: POP
// end ; tmp := [ ] ;
18251: LD_ADDR_VAR 0 9
18255: PUSH
18256: EMPTY
18257: ST_TO_ADDR
// if mode then
18258: LD_VAR 0 5
18262: IFFALSE 18331
// begin for i = 1 to result do
18264: LD_ADDR_VAR 0 7
18268: PUSH
18269: DOUBLE
18270: LD_INT 1
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 6
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18319
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18282: LD_ADDR_VAR 0 9
18286: PUSH
18287: LD_VAR 0 9
18291: PPUSH
18292: LD_VAR 0 7
18296: PPUSH
18297: LD_VAR 0 6
18301: PUSH
18302: LD_VAR 0 7
18306: ARRAY
18307: PUSH
18308: LD_INT 1
18310: ARRAY
18311: PPUSH
18312: CALL_OW 1
18316: ST_TO_ADDR
18317: GO 18279
18319: POP
18320: POP
// result := tmp ;
18321: LD_ADDR_VAR 0 6
18325: PUSH
18326: LD_VAR 0 9
18330: ST_TO_ADDR
// end ; end ;
18331: LD_VAR 0 6
18335: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18336: LD_INT 0
18338: PPUSH
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18344: LD_ADDR_VAR 0 5
18348: PUSH
18349: LD_INT 0
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: EMPTY
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: ST_TO_ADDR
// if not x or not y then
18366: LD_VAR 0 2
18370: NOT
18371: PUSH
18372: LD_VAR 0 3
18376: NOT
18377: OR
18378: IFFALSE 18382
// exit ;
18380: GO 20028
// if not range then
18382: LD_VAR 0 4
18386: NOT
18387: IFFALSE 18397
// range := 10 ;
18389: LD_ADDR_VAR 0 4
18393: PUSH
18394: LD_INT 10
18396: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18397: LD_ADDR_VAR 0 8
18401: PUSH
18402: LD_INT 81
18404: PUSH
18405: LD_VAR 0 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 92
18416: PUSH
18417: LD_VAR 0 2
18421: PUSH
18422: LD_VAR 0 3
18426: PUSH
18427: LD_VAR 0 4
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 3
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 3
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: PPUSH
18460: CALL_OW 69
18464: ST_TO_ADDR
// if not tmp then
18465: LD_VAR 0 8
18469: NOT
18470: IFFALSE 18474
// exit ;
18472: GO 20028
// for i in tmp do
18474: LD_ADDR_VAR 0 6
18478: PUSH
18479: LD_VAR 0 8
18483: PUSH
18484: FOR_IN
18485: IFFALSE 20003
// begin points := [ 0 , 0 , 0 ] ;
18487: LD_ADDR_VAR 0 9
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 0
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: LIST
18505: ST_TO_ADDR
// bpoints := 1 ;
18506: LD_ADDR_VAR 0 10
18510: PUSH
18511: LD_INT 1
18513: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18514: LD_VAR 0 6
18518: PPUSH
18519: CALL_OW 247
18523: PUSH
18524: LD_INT 1
18526: DOUBLE
18527: EQUAL
18528: IFTRUE 18532
18530: GO 19110
18532: POP
// begin if GetClass ( i ) = 1 then
18533: LD_VAR 0 6
18537: PPUSH
18538: CALL_OW 257
18542: PUSH
18543: LD_INT 1
18545: EQUAL
18546: IFFALSE 18567
// points := [ 10 , 5 , 3 ] ;
18548: LD_ADDR_VAR 0 9
18552: PUSH
18553: LD_INT 10
18555: PUSH
18556: LD_INT 5
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18567: LD_VAR 0 6
18571: PPUSH
18572: CALL_OW 257
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 3
18582: PUSH
18583: LD_INT 4
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: IN
18591: IFFALSE 18612
// points := [ 3 , 2 , 1 ] ;
18593: LD_ADDR_VAR 0 9
18597: PUSH
18598: LD_INT 3
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18612: LD_VAR 0 6
18616: PPUSH
18617: CALL_OW 257
18621: PUSH
18622: LD_INT 5
18624: EQUAL
18625: IFFALSE 18646
// points := [ 130 , 5 , 2 ] ;
18627: LD_ADDR_VAR 0 9
18631: PUSH
18632: LD_INT 130
18634: PUSH
18635: LD_INT 5
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18646: LD_VAR 0 6
18650: PPUSH
18651: CALL_OW 257
18655: PUSH
18656: LD_INT 8
18658: EQUAL
18659: IFFALSE 18680
// points := [ 35 , 35 , 30 ] ;
18661: LD_ADDR_VAR 0 9
18665: PUSH
18666: LD_INT 35
18668: PUSH
18669: LD_INT 35
18671: PUSH
18672: LD_INT 30
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18680: LD_VAR 0 6
18684: PPUSH
18685: CALL_OW 257
18689: PUSH
18690: LD_INT 9
18692: EQUAL
18693: IFFALSE 18714
// points := [ 20 , 55 , 40 ] ;
18695: LD_ADDR_VAR 0 9
18699: PUSH
18700: LD_INT 20
18702: PUSH
18703: LD_INT 55
18705: PUSH
18706: LD_INT 40
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18714: LD_VAR 0 6
18718: PPUSH
18719: CALL_OW 257
18723: PUSH
18724: LD_INT 12
18726: PUSH
18727: LD_INT 16
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: IN
18734: IFFALSE 18755
// points := [ 5 , 3 , 2 ] ;
18736: LD_ADDR_VAR 0 9
18740: PUSH
18741: LD_INT 5
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18755: LD_VAR 0 6
18759: PPUSH
18760: CALL_OW 257
18764: PUSH
18765: LD_INT 17
18767: EQUAL
18768: IFFALSE 18789
// points := [ 100 , 50 , 75 ] ;
18770: LD_ADDR_VAR 0 9
18774: PUSH
18775: LD_INT 100
18777: PUSH
18778: LD_INT 50
18780: PUSH
18781: LD_INT 75
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18789: LD_VAR 0 6
18793: PPUSH
18794: CALL_OW 257
18798: PUSH
18799: LD_INT 15
18801: EQUAL
18802: IFFALSE 18823
// points := [ 10 , 5 , 3 ] ;
18804: LD_ADDR_VAR 0 9
18808: PUSH
18809: LD_INT 10
18811: PUSH
18812: LD_INT 5
18814: PUSH
18815: LD_INT 3
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18823: LD_VAR 0 6
18827: PPUSH
18828: CALL_OW 257
18832: PUSH
18833: LD_INT 14
18835: EQUAL
18836: IFFALSE 18857
// points := [ 10 , 0 , 0 ] ;
18838: LD_ADDR_VAR 0 9
18842: PUSH
18843: LD_INT 10
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18857: LD_VAR 0 6
18861: PPUSH
18862: CALL_OW 257
18866: PUSH
18867: LD_INT 11
18869: EQUAL
18870: IFFALSE 18891
// points := [ 30 , 10 , 5 ] ;
18872: LD_ADDR_VAR 0 9
18876: PUSH
18877: LD_INT 30
18879: PUSH
18880: LD_INT 10
18882: PUSH
18883: LD_INT 5
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_INT 5
18898: PPUSH
18899: CALL_OW 321
18903: PUSH
18904: LD_INT 2
18906: EQUAL
18907: IFFALSE 18924
// bpoints := bpoints * 1.8 ;
18909: LD_ADDR_VAR 0 10
18913: PUSH
18914: LD_VAR 0 10
18918: PUSH
18919: LD_REAL  1.80000000000000E+0000
18922: MUL
18923: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18924: LD_VAR 0 6
18928: PPUSH
18929: CALL_OW 257
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 3
18942: PUSH
18943: LD_INT 4
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: IN
18952: PUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_INT 51
18960: PPUSH
18961: CALL_OW 321
18965: PUSH
18966: LD_INT 2
18968: EQUAL
18969: AND
18970: IFFALSE 18987
// bpoints := bpoints * 1.2 ;
18972: LD_ADDR_VAR 0 10
18976: PUSH
18977: LD_VAR 0 10
18981: PUSH
18982: LD_REAL  1.20000000000000E+0000
18985: MUL
18986: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18987: LD_VAR 0 6
18991: PPUSH
18992: CALL_OW 257
18996: PUSH
18997: LD_INT 5
18999: PUSH
19000: LD_INT 7
19002: PUSH
19003: LD_INT 9
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: IN
19011: PUSH
19012: LD_VAR 0 1
19016: PPUSH
19017: LD_INT 52
19019: PPUSH
19020: CALL_OW 321
19024: PUSH
19025: LD_INT 2
19027: EQUAL
19028: AND
19029: IFFALSE 19046
// bpoints := bpoints * 1.5 ;
19031: LD_ADDR_VAR 0 10
19035: PUSH
19036: LD_VAR 0 10
19040: PUSH
19041: LD_REAL  1.50000000000000E+0000
19044: MUL
19045: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_INT 66
19053: PPUSH
19054: CALL_OW 321
19058: PUSH
19059: LD_INT 2
19061: EQUAL
19062: IFFALSE 19079
// bpoints := bpoints * 1.1 ;
19064: LD_ADDR_VAR 0 10
19068: PUSH
19069: LD_VAR 0 10
19073: PUSH
19074: LD_REAL  1.10000000000000E+0000
19077: MUL
19078: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19079: LD_ADDR_VAR 0 10
19083: PUSH
19084: LD_VAR 0 10
19088: PUSH
19089: LD_VAR 0 6
19093: PPUSH
19094: LD_INT 1
19096: PPUSH
19097: CALL_OW 259
19101: PUSH
19102: LD_REAL  1.15000000000000E+0000
19105: MUL
19106: MUL
19107: ST_TO_ADDR
// end ; unit_vehicle :
19108: GO 19932
19110: LD_INT 2
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19920
19118: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19119: LD_VAR 0 6
19123: PPUSH
19124: CALL_OW 264
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 42
19134: PUSH
19135: LD_INT 24
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: IN
19143: IFFALSE 19164
// points := [ 25 , 5 , 3 ] ;
19145: LD_ADDR_VAR 0 9
19149: PUSH
19150: LD_INT 25
19152: PUSH
19153: LD_INT 5
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19164: LD_VAR 0 6
19168: PPUSH
19169: CALL_OW 264
19173: PUSH
19174: LD_INT 4
19176: PUSH
19177: LD_INT 43
19179: PUSH
19180: LD_INT 25
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: IN
19188: IFFALSE 19209
// points := [ 40 , 15 , 5 ] ;
19190: LD_ADDR_VAR 0 9
19194: PUSH
19195: LD_INT 40
19197: PUSH
19198: LD_INT 15
19200: PUSH
19201: LD_INT 5
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19209: LD_VAR 0 6
19213: PPUSH
19214: CALL_OW 264
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: LD_INT 23
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: IN
19229: IFFALSE 19250
// points := [ 7 , 25 , 8 ] ;
19231: LD_ADDR_VAR 0 9
19235: PUSH
19236: LD_INT 7
19238: PUSH
19239: LD_INT 25
19241: PUSH
19242: LD_INT 8
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: LIST
19249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19250: LD_VAR 0 6
19254: PPUSH
19255: CALL_OW 264
19259: PUSH
19260: LD_INT 5
19262: PUSH
19263: LD_INT 27
19265: PUSH
19266: LD_INT 44
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: IN
19274: IFFALSE 19295
// points := [ 14 , 50 , 16 ] ;
19276: LD_ADDR_VAR 0 9
19280: PUSH
19281: LD_INT 14
19283: PUSH
19284: LD_INT 50
19286: PUSH
19287: LD_INT 16
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19295: LD_VAR 0 6
19299: PPUSH
19300: CALL_OW 264
19304: PUSH
19305: LD_INT 6
19307: PUSH
19308: LD_INT 46
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: IN
19315: IFFALSE 19336
// points := [ 32 , 120 , 70 ] ;
19317: LD_ADDR_VAR 0 9
19321: PUSH
19322: LD_INT 32
19324: PUSH
19325: LD_INT 120
19327: PUSH
19328: LD_INT 70
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19336: LD_VAR 0 6
19340: PPUSH
19341: CALL_OW 264
19345: PUSH
19346: LD_INT 7
19348: PUSH
19349: LD_INT 28
19351: PUSH
19352: LD_INT 45
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: IN
19360: IFFALSE 19381
// points := [ 35 , 20 , 45 ] ;
19362: LD_ADDR_VAR 0 9
19366: PUSH
19367: LD_INT 35
19369: PUSH
19370: LD_INT 20
19372: PUSH
19373: LD_INT 45
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19381: LD_VAR 0 6
19385: PPUSH
19386: CALL_OW 264
19390: PUSH
19391: LD_INT 47
19393: PUSH
19394: EMPTY
19395: LIST
19396: IN
19397: IFFALSE 19418
// points := [ 67 , 45 , 75 ] ;
19399: LD_ADDR_VAR 0 9
19403: PUSH
19404: LD_INT 67
19406: PUSH
19407: LD_INT 45
19409: PUSH
19410: LD_INT 75
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19418: LD_VAR 0 6
19422: PPUSH
19423: CALL_OW 264
19427: PUSH
19428: LD_INT 26
19430: PUSH
19431: EMPTY
19432: LIST
19433: IN
19434: IFFALSE 19455
// points := [ 120 , 30 , 80 ] ;
19436: LD_ADDR_VAR 0 9
19440: PUSH
19441: LD_INT 120
19443: PUSH
19444: LD_INT 30
19446: PUSH
19447: LD_INT 80
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: LIST
19454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19455: LD_VAR 0 6
19459: PPUSH
19460: CALL_OW 264
19464: PUSH
19465: LD_INT 22
19467: PUSH
19468: EMPTY
19469: LIST
19470: IN
19471: IFFALSE 19492
// points := [ 40 , 1 , 1 ] ;
19473: LD_ADDR_VAR 0 9
19477: PUSH
19478: LD_INT 40
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19492: LD_VAR 0 6
19496: PPUSH
19497: CALL_OW 264
19501: PUSH
19502: LD_INT 29
19504: PUSH
19505: EMPTY
19506: LIST
19507: IN
19508: IFFALSE 19529
// points := [ 70 , 200 , 400 ] ;
19510: LD_ADDR_VAR 0 9
19514: PUSH
19515: LD_INT 70
19517: PUSH
19518: LD_INT 200
19520: PUSH
19521: LD_INT 400
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19529: LD_VAR 0 6
19533: PPUSH
19534: CALL_OW 264
19538: PUSH
19539: LD_INT 14
19541: PUSH
19542: LD_INT 53
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: IN
19549: IFFALSE 19570
// points := [ 40 , 10 , 20 ] ;
19551: LD_ADDR_VAR 0 9
19555: PUSH
19556: LD_INT 40
19558: PUSH
19559: LD_INT 10
19561: PUSH
19562: LD_INT 20
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19570: LD_VAR 0 6
19574: PPUSH
19575: CALL_OW 264
19579: PUSH
19580: LD_INT 9
19582: PUSH
19583: EMPTY
19584: LIST
19585: IN
19586: IFFALSE 19607
// points := [ 5 , 70 , 20 ] ;
19588: LD_ADDR_VAR 0 9
19592: PUSH
19593: LD_INT 5
19595: PUSH
19596: LD_INT 70
19598: PUSH
19599: LD_INT 20
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19607: LD_VAR 0 6
19611: PPUSH
19612: CALL_OW 264
19616: PUSH
19617: LD_INT 10
19619: PUSH
19620: EMPTY
19621: LIST
19622: IN
19623: IFFALSE 19644
// points := [ 35 , 110 , 70 ] ;
19625: LD_ADDR_VAR 0 9
19629: PUSH
19630: LD_INT 35
19632: PUSH
19633: LD_INT 110
19635: PUSH
19636: LD_INT 70
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19644: LD_VAR 0 6
19648: PPUSH
19649: CALL_OW 265
19653: PUSH
19654: LD_INT 25
19656: EQUAL
19657: IFFALSE 19678
// points := [ 80 , 65 , 100 ] ;
19659: LD_ADDR_VAR 0 9
19663: PUSH
19664: LD_INT 80
19666: PUSH
19667: LD_INT 65
19669: PUSH
19670: LD_INT 100
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: LIST
19677: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19678: LD_VAR 0 6
19682: PPUSH
19683: CALL_OW 263
19687: PUSH
19688: LD_INT 1
19690: EQUAL
19691: IFFALSE 19726
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19693: LD_ADDR_VAR 0 10
19697: PUSH
19698: LD_VAR 0 10
19702: PUSH
19703: LD_VAR 0 6
19707: PPUSH
19708: CALL_OW 311
19712: PPUSH
19713: LD_INT 3
19715: PPUSH
19716: CALL_OW 259
19720: PUSH
19721: LD_INT 4
19723: MUL
19724: MUL
19725: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19726: LD_VAR 0 6
19730: PPUSH
19731: CALL_OW 263
19735: PUSH
19736: LD_INT 2
19738: EQUAL
19739: IFFALSE 19790
// begin j := IsControledBy ( i ) ;
19741: LD_ADDR_VAR 0 7
19745: PUSH
19746: LD_VAR 0 6
19750: PPUSH
19751: CALL_OW 312
19755: ST_TO_ADDR
// if j then
19756: LD_VAR 0 7
19760: IFFALSE 19790
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19762: LD_ADDR_VAR 0 10
19766: PUSH
19767: LD_VAR 0 10
19771: PUSH
19772: LD_VAR 0 7
19776: PPUSH
19777: LD_INT 3
19779: PPUSH
19780: CALL_OW 259
19784: PUSH
19785: LD_INT 3
19787: MUL
19788: MUL
19789: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19790: LD_VAR 0 6
19794: PPUSH
19795: CALL_OW 264
19799: PUSH
19800: LD_INT 5
19802: PUSH
19803: LD_INT 6
19805: PUSH
19806: LD_INT 46
19808: PUSH
19809: LD_INT 44
19811: PUSH
19812: LD_INT 47
19814: PUSH
19815: LD_INT 45
19817: PUSH
19818: LD_INT 28
19820: PUSH
19821: LD_INT 7
19823: PUSH
19824: LD_INT 27
19826: PUSH
19827: LD_INT 29
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: IN
19842: PUSH
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_INT 52
19850: PPUSH
19851: CALL_OW 321
19855: PUSH
19856: LD_INT 2
19858: EQUAL
19859: AND
19860: IFFALSE 19877
// bpoints := bpoints * 1.2 ;
19862: LD_ADDR_VAR 0 10
19866: PUSH
19867: LD_VAR 0 10
19871: PUSH
19872: LD_REAL  1.20000000000000E+0000
19875: MUL
19876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19877: LD_VAR 0 6
19881: PPUSH
19882: CALL_OW 264
19886: PUSH
19887: LD_INT 6
19889: PUSH
19890: LD_INT 46
19892: PUSH
19893: LD_INT 47
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: IN
19901: IFFALSE 19918
// bpoints := bpoints * 1.2 ;
19903: LD_ADDR_VAR 0 10
19907: PUSH
19908: LD_VAR 0 10
19912: PUSH
19913: LD_REAL  1.20000000000000E+0000
19916: MUL
19917: ST_TO_ADDR
// end ; unit_building :
19918: GO 19932
19920: LD_INT 3
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 19931
19928: POP
// ; end ;
19929: GO 19932
19931: POP
// for j = 1 to 3 do
19932: LD_ADDR_VAR 0 7
19936: PUSH
19937: DOUBLE
19938: LD_INT 1
19940: DEC
19941: ST_TO_ADDR
19942: LD_INT 3
19944: PUSH
19945: FOR_TO
19946: IFFALSE 19999
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19948: LD_ADDR_VAR 0 5
19952: PUSH
19953: LD_VAR 0 5
19957: PPUSH
19958: LD_VAR 0 7
19962: PPUSH
19963: LD_VAR 0 5
19967: PUSH
19968: LD_VAR 0 7
19972: ARRAY
19973: PUSH
19974: LD_VAR 0 9
19978: PUSH
19979: LD_VAR 0 7
19983: ARRAY
19984: PUSH
19985: LD_VAR 0 10
19989: MUL
19990: PLUS
19991: PPUSH
19992: CALL_OW 1
19996: ST_TO_ADDR
19997: GO 19945
19999: POP
20000: POP
// end ;
20001: GO 18484
20003: POP
20004: POP
// result := Replace ( result , 4 , tmp ) ;
20005: LD_ADDR_VAR 0 5
20009: PUSH
20010: LD_VAR 0 5
20014: PPUSH
20015: LD_INT 4
20017: PPUSH
20018: LD_VAR 0 8
20022: PPUSH
20023: CALL_OW 1
20027: ST_TO_ADDR
// end ;
20028: LD_VAR 0 5
20032: RET
// export function DangerAtRange ( unit , range ) ; begin
20033: LD_INT 0
20035: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20036: LD_ADDR_VAR 0 3
20040: PUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 255
20050: PPUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 250
20060: PPUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 251
20070: PPUSH
20071: LD_VAR 0 2
20075: PPUSH
20076: CALL 18336 0 4
20080: ST_TO_ADDR
// end ;
20081: LD_VAR 0 3
20085: RET
// export function DangerInArea ( side , area ) ; begin
20086: LD_INT 0
20088: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: LD_VAR 0 2
20098: PPUSH
20099: LD_INT 81
20101: PUSH
20102: LD_VAR 0 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 70
20115: ST_TO_ADDR
// end ;
20116: LD_VAR 0 3
20120: RET
// export function IsExtension ( b ) ; begin
20121: LD_INT 0
20123: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20124: LD_ADDR_VAR 0 2
20128: PUSH
20129: LD_VAR 0 1
20133: PUSH
20134: LD_INT 23
20136: PUSH
20137: LD_INT 20
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_INT 17
20145: PUSH
20146: LD_INT 24
20148: PUSH
20149: LD_INT 21
20151: PUSH
20152: LD_INT 19
20154: PUSH
20155: LD_INT 16
20157: PUSH
20158: LD_INT 25
20160: PUSH
20161: LD_INT 18
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: IN
20176: ST_TO_ADDR
// end ;
20177: LD_VAR 0 2
20181: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20182: LD_INT 0
20184: PPUSH
20185: PPUSH
20186: PPUSH
// result := [ ] ;
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: EMPTY
20193: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20194: LD_ADDR_VAR 0 4
20198: PUSH
20199: LD_VAR 0 2
20203: PPUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PPUSH
20214: CALL_OW 70
20218: ST_TO_ADDR
// if not tmp then
20219: LD_VAR 0 4
20223: NOT
20224: IFFALSE 20228
// exit ;
20226: GO 20286
// for i in tmp do
20228: LD_ADDR_VAR 0 5
20232: PUSH
20233: LD_VAR 0 4
20237: PUSH
20238: FOR_IN
20239: IFFALSE 20274
// if GetBase ( i ) <> base then
20241: LD_VAR 0 5
20245: PPUSH
20246: CALL_OW 274
20250: PUSH
20251: LD_VAR 0 1
20255: NONEQUAL
20256: IFFALSE 20272
// ComLinkToBase ( base , i ) ;
20258: LD_VAR 0 1
20262: PPUSH
20263: LD_VAR 0 5
20267: PPUSH
20268: CALL_OW 169
20272: GO 20238
20274: POP
20275: POP
// result := tmp ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 4
20285: ST_TO_ADDR
// end ;
20286: LD_VAR 0 3
20290: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20291: LD_INT 0
20293: PPUSH
20294: PPUSH
// if BuildingStatus ( b ) = bs_build then
20295: LD_VAR 0 2
20299: PPUSH
20300: CALL_OW 461
20304: PUSH
20305: LD_INT 1
20307: EQUAL
20308: IFFALSE 20368
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20310: LD_VAR 0 1
20314: PPUSH
20315: LD_STRING h
20317: PUSH
20318: LD_VAR 0 2
20322: PPUSH
20323: CALL_OW 250
20327: PUSH
20328: LD_VAR 0 2
20332: PPUSH
20333: CALL_OW 251
20337: PUSH
20338: LD_VAR 0 2
20342: PUSH
20343: LD_INT 0
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: PPUSH
20364: CALL_OW 446
// end ;
20368: LD_VAR 0 3
20372: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20381: LD_VAR 0 1
20385: NOT
20386: PUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 263
20396: PUSH
20397: LD_INT 2
20399: EQUAL
20400: NOT
20401: OR
20402: IFFALSE 20406
// exit ;
20404: GO 20722
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20406: LD_ADDR_VAR 0 6
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 255
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: LD_INT 30
20433: PUSH
20434: LD_INT 36
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 34
20443: PUSH
20444: LD_INT 31
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 69
20464: ST_TO_ADDR
// if not tmp then
20465: LD_VAR 0 6
20469: NOT
20470: IFFALSE 20474
// exit ;
20472: GO 20722
// result := [ ] ;
20474: LD_ADDR_VAR 0 2
20478: PUSH
20479: EMPTY
20480: ST_TO_ADDR
// for i in tmp do
20481: LD_ADDR_VAR 0 3
20485: PUSH
20486: LD_VAR 0 6
20490: PUSH
20491: FOR_IN
20492: IFFALSE 20563
// begin t := UnitsInside ( i ) ;
20494: LD_ADDR_VAR 0 4
20498: PUSH
20499: LD_VAR 0 3
20503: PPUSH
20504: CALL_OW 313
20508: ST_TO_ADDR
// if t then
20509: LD_VAR 0 4
20513: IFFALSE 20561
// for j in t do
20515: LD_ADDR_VAR 0 7
20519: PUSH
20520: LD_VAR 0 4
20524: PUSH
20525: FOR_IN
20526: IFFALSE 20559
// result := Insert ( result , result + 1 , j ) ;
20528: LD_ADDR_VAR 0 2
20532: PUSH
20533: LD_VAR 0 2
20537: PPUSH
20538: LD_VAR 0 2
20542: PUSH
20543: LD_INT 1
20545: PLUS
20546: PPUSH
20547: LD_VAR 0 7
20551: PPUSH
20552: CALL_OW 2
20556: ST_TO_ADDR
20557: GO 20525
20559: POP
20560: POP
// end ;
20561: GO 20491
20563: POP
20564: POP
// if not result then
20565: LD_VAR 0 2
20569: NOT
20570: IFFALSE 20574
// exit ;
20572: GO 20722
// mech := result [ 1 ] ;
20574: LD_ADDR_VAR 0 5
20578: PUSH
20579: LD_VAR 0 2
20583: PUSH
20584: LD_INT 1
20586: ARRAY
20587: ST_TO_ADDR
// if result > 1 then
20588: LD_VAR 0 2
20592: PUSH
20593: LD_INT 1
20595: GREATER
20596: IFFALSE 20708
// for i = 2 to result do
20598: LD_ADDR_VAR 0 3
20602: PUSH
20603: DOUBLE
20604: LD_INT 2
20606: DEC
20607: ST_TO_ADDR
20608: LD_VAR 0 2
20612: PUSH
20613: FOR_TO
20614: IFFALSE 20706
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20616: LD_ADDR_VAR 0 4
20620: PUSH
20621: LD_VAR 0 2
20625: PUSH
20626: LD_VAR 0 3
20630: ARRAY
20631: PPUSH
20632: LD_INT 3
20634: PPUSH
20635: CALL_OW 259
20639: PUSH
20640: LD_VAR 0 2
20644: PUSH
20645: LD_VAR 0 3
20649: ARRAY
20650: PPUSH
20651: CALL_OW 432
20655: MINUS
20656: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20657: LD_VAR 0 4
20661: PUSH
20662: LD_VAR 0 5
20666: PPUSH
20667: LD_INT 3
20669: PPUSH
20670: CALL_OW 259
20674: PUSH
20675: LD_VAR 0 5
20679: PPUSH
20680: CALL_OW 432
20684: MINUS
20685: GREATEREQUAL
20686: IFFALSE 20704
// mech := result [ i ] ;
20688: LD_ADDR_VAR 0 5
20692: PUSH
20693: LD_VAR 0 2
20697: PUSH
20698: LD_VAR 0 3
20702: ARRAY
20703: ST_TO_ADDR
// end ;
20704: GO 20613
20706: POP
20707: POP
// ComLinkTo ( vehicle , mech ) ;
20708: LD_VAR 0 1
20712: PPUSH
20713: LD_VAR 0 5
20717: PPUSH
20718: CALL_OW 135
// end ;
20722: LD_VAR 0 2
20726: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20727: LD_INT 0
20729: PPUSH
20730: PPUSH
20731: PPUSH
20732: PPUSH
20733: PPUSH
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// result := [ ] ;
20742: LD_ADDR_VAR 0 7
20746: PUSH
20747: EMPTY
20748: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL_OW 266
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: IN
20769: NOT
20770: IFFALSE 20774
// exit ;
20772: GO 22405
// if name then
20774: LD_VAR 0 3
20778: IFFALSE 20794
// SetBName ( base_dep , name ) ;
20780: LD_VAR 0 1
20784: PPUSH
20785: LD_VAR 0 3
20789: PPUSH
20790: CALL_OW 500
// base := GetBase ( base_dep ) ;
20794: LD_ADDR_VAR 0 15
20798: PUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 274
20808: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20809: LD_ADDR_VAR 0 16
20813: PUSH
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL_OW 255
20823: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20824: LD_ADDR_VAR 0 17
20828: PUSH
20829: LD_VAR 0 1
20833: PPUSH
20834: CALL_OW 248
20838: ST_TO_ADDR
// if sources then
20839: LD_VAR 0 5
20843: IFFALSE 20890
// for i = 1 to 3 do
20845: LD_ADDR_VAR 0 8
20849: PUSH
20850: DOUBLE
20851: LD_INT 1
20853: DEC
20854: ST_TO_ADDR
20855: LD_INT 3
20857: PUSH
20858: FOR_TO
20859: IFFALSE 20888
// AddResourceType ( base , i , sources [ i ] ) ;
20861: LD_VAR 0 15
20865: PPUSH
20866: LD_VAR 0 8
20870: PPUSH
20871: LD_VAR 0 5
20875: PUSH
20876: LD_VAR 0 8
20880: ARRAY
20881: PPUSH
20882: CALL_OW 276
20886: GO 20858
20888: POP
20889: POP
// buildings := GetBaseBuildings ( base , area ) ;
20890: LD_ADDR_VAR 0 18
20894: PUSH
20895: LD_VAR 0 15
20899: PPUSH
20900: LD_VAR 0 2
20904: PPUSH
20905: CALL 20182 0 2
20909: ST_TO_ADDR
// InitHc ;
20910: CALL_OW 19
// InitUc ;
20914: CALL_OW 18
// uc_side := side ;
20918: LD_ADDR_OWVAR 20
20922: PUSH
20923: LD_VAR 0 16
20927: ST_TO_ADDR
// uc_nation := nation ;
20928: LD_ADDR_OWVAR 21
20932: PUSH
20933: LD_VAR 0 17
20937: ST_TO_ADDR
// if buildings then
20938: LD_VAR 0 18
20942: IFFALSE 22264
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20944: LD_ADDR_VAR 0 19
20948: PUSH
20949: LD_VAR 0 18
20953: PPUSH
20954: LD_INT 2
20956: PUSH
20957: LD_INT 30
20959: PUSH
20960: LD_INT 29
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: LD_INT 30
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: PPUSH
20982: CALL_OW 72
20986: ST_TO_ADDR
// if tmp then
20987: LD_VAR 0 19
20991: IFFALSE 21039
// for i in tmp do
20993: LD_ADDR_VAR 0 8
20997: PUSH
20998: LD_VAR 0 19
21002: PUSH
21003: FOR_IN
21004: IFFALSE 21037
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21006: LD_VAR 0 8
21010: PPUSH
21011: CALL_OW 250
21015: PPUSH
21016: LD_VAR 0 8
21020: PPUSH
21021: CALL_OW 251
21025: PPUSH
21026: LD_VAR 0 16
21030: PPUSH
21031: CALL_OW 441
21035: GO 21003
21037: POP
21038: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21039: LD_VAR 0 18
21043: PPUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 30
21049: PUSH
21050: LD_INT 32
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 30
21059: PUSH
21060: LD_INT 33
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: PPUSH
21072: CALL_OW 72
21076: IFFALSE 21164
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21078: LD_ADDR_VAR 0 8
21082: PUSH
21083: LD_VAR 0 18
21087: PPUSH
21088: LD_INT 2
21090: PUSH
21091: LD_INT 30
21093: PUSH
21094: LD_INT 32
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 30
21103: PUSH
21104: LD_INT 33
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 72
21120: PUSH
21121: FOR_IN
21122: IFFALSE 21162
// begin if not GetBWeapon ( i ) then
21124: LD_VAR 0 8
21128: PPUSH
21129: CALL_OW 269
21133: NOT
21134: IFFALSE 21160
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21136: LD_VAR 0 8
21140: PPUSH
21141: LD_VAR 0 8
21145: PPUSH
21146: LD_VAR 0 2
21150: PPUSH
21151: CALL 22410 0 2
21155: PPUSH
21156: CALL_OW 431
// end ;
21160: GO 21121
21162: POP
21163: POP
// end ; for i = 1 to personel do
21164: LD_ADDR_VAR 0 8
21168: PUSH
21169: DOUBLE
21170: LD_INT 1
21172: DEC
21173: ST_TO_ADDR
21174: LD_VAR 0 6
21178: PUSH
21179: FOR_TO
21180: IFFALSE 22244
// begin if i > 4 then
21182: LD_VAR 0 8
21186: PUSH
21187: LD_INT 4
21189: GREATER
21190: IFFALSE 21194
// break ;
21192: GO 22244
// case i of 1 :
21194: LD_VAR 0 8
21198: PUSH
21199: LD_INT 1
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21207
21205: GO 21287
21207: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21208: LD_ADDR_VAR 0 12
21212: PUSH
21213: LD_VAR 0 18
21217: PPUSH
21218: LD_INT 22
21220: PUSH
21221: LD_VAR 0 16
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 58
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 30
21241: PUSH
21242: LD_INT 32
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: LD_INT 4
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 30
21261: PUSH
21262: LD_INT 5
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 72
21284: ST_TO_ADDR
21285: GO 21509
21287: LD_INT 2
21289: DOUBLE
21290: EQUAL
21291: IFTRUE 21295
21293: GO 21357
21295: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21296: LD_ADDR_VAR 0 12
21300: PUSH
21301: LD_VAR 0 18
21305: PPUSH
21306: LD_INT 22
21308: PUSH
21309: LD_VAR 0 16
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 30
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 30
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PPUSH
21350: CALL_OW 72
21354: ST_TO_ADDR
21355: GO 21509
21357: LD_INT 3
21359: DOUBLE
21360: EQUAL
21361: IFTRUE 21365
21363: GO 21427
21365: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21366: LD_ADDR_VAR 0 12
21370: PUSH
21371: LD_VAR 0 18
21375: PPUSH
21376: LD_INT 22
21378: PUSH
21379: LD_VAR 0 16
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: LD_INT 30
21393: PUSH
21394: LD_INT 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 3
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PPUSH
21420: CALL_OW 72
21424: ST_TO_ADDR
21425: GO 21509
21427: LD_INT 4
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21508
21435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21436: LD_ADDR_VAR 0 12
21440: PUSH
21441: LD_VAR 0 18
21445: PPUSH
21446: LD_INT 22
21448: PUSH
21449: LD_VAR 0 16
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 6
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 30
21473: PUSH
21474: LD_INT 7
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 30
21483: PUSH
21484: LD_INT 8
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PPUSH
21501: CALL_OW 72
21505: ST_TO_ADDR
21506: GO 21509
21508: POP
// if i = 1 then
21509: LD_VAR 0 8
21513: PUSH
21514: LD_INT 1
21516: EQUAL
21517: IFFALSE 21628
// begin tmp := [ ] ;
21519: LD_ADDR_VAR 0 19
21523: PUSH
21524: EMPTY
21525: ST_TO_ADDR
// for j in f do
21526: LD_ADDR_VAR 0 9
21530: PUSH
21531: LD_VAR 0 12
21535: PUSH
21536: FOR_IN
21537: IFFALSE 21610
// if GetBType ( j ) = b_bunker then
21539: LD_VAR 0 9
21543: PPUSH
21544: CALL_OW 266
21548: PUSH
21549: LD_INT 32
21551: EQUAL
21552: IFFALSE 21579
// tmp := Insert ( tmp , 1 , j ) else
21554: LD_ADDR_VAR 0 19
21558: PUSH
21559: LD_VAR 0 19
21563: PPUSH
21564: LD_INT 1
21566: PPUSH
21567: LD_VAR 0 9
21571: PPUSH
21572: CALL_OW 2
21576: ST_TO_ADDR
21577: GO 21608
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21579: LD_ADDR_VAR 0 19
21583: PUSH
21584: LD_VAR 0 19
21588: PPUSH
21589: LD_VAR 0 19
21593: PUSH
21594: LD_INT 1
21596: PLUS
21597: PPUSH
21598: LD_VAR 0 9
21602: PPUSH
21603: CALL_OW 2
21607: ST_TO_ADDR
21608: GO 21536
21610: POP
21611: POP
// if tmp then
21612: LD_VAR 0 19
21616: IFFALSE 21628
// f := tmp ;
21618: LD_ADDR_VAR 0 12
21622: PUSH
21623: LD_VAR 0 19
21627: ST_TO_ADDR
// end ; x := personel [ i ] ;
21628: LD_ADDR_VAR 0 13
21632: PUSH
21633: LD_VAR 0 6
21637: PUSH
21638: LD_VAR 0 8
21642: ARRAY
21643: ST_TO_ADDR
// if x = - 1 then
21644: LD_VAR 0 13
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: EQUAL
21653: IFFALSE 21862
// begin for j in f do
21655: LD_ADDR_VAR 0 9
21659: PUSH
21660: LD_VAR 0 12
21664: PUSH
21665: FOR_IN
21666: IFFALSE 21858
// repeat InitHc ;
21668: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21672: LD_VAR 0 9
21676: PPUSH
21677: CALL_OW 266
21681: PUSH
21682: LD_INT 5
21684: EQUAL
21685: IFFALSE 21755
// begin if UnitsInside ( j ) < 3 then
21687: LD_VAR 0 9
21691: PPUSH
21692: CALL_OW 313
21696: PUSH
21697: LD_INT 3
21699: LESS
21700: IFFALSE 21736
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21702: LD_INT 0
21704: PPUSH
21705: LD_INT 5
21707: PUSH
21708: LD_INT 8
21710: PUSH
21711: LD_INT 9
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: LD_VAR 0 17
21723: ARRAY
21724: PPUSH
21725: LD_VAR 0 4
21729: PPUSH
21730: CALL_OW 380
21734: GO 21753
// PrepareHuman ( false , i , skill ) ;
21736: LD_INT 0
21738: PPUSH
21739: LD_VAR 0 8
21743: PPUSH
21744: LD_VAR 0 4
21748: PPUSH
21749: CALL_OW 380
// end else
21753: GO 21772
// PrepareHuman ( false , i , skill ) ;
21755: LD_INT 0
21757: PPUSH
21758: LD_VAR 0 8
21762: PPUSH
21763: LD_VAR 0 4
21767: PPUSH
21768: CALL_OW 380
// un := CreateHuman ;
21772: LD_ADDR_VAR 0 14
21776: PUSH
21777: CALL_OW 44
21781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21782: LD_ADDR_VAR 0 7
21786: PUSH
21787: LD_VAR 0 7
21791: PPUSH
21792: LD_INT 1
21794: PPUSH
21795: LD_VAR 0 14
21799: PPUSH
21800: CALL_OW 2
21804: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21805: LD_VAR 0 14
21809: PPUSH
21810: LD_VAR 0 9
21814: PPUSH
21815: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21819: LD_VAR 0 9
21823: PPUSH
21824: CALL_OW 313
21828: PUSH
21829: LD_INT 6
21831: EQUAL
21832: PUSH
21833: LD_VAR 0 9
21837: PPUSH
21838: CALL_OW 266
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 31
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: IN
21853: OR
21854: IFFALSE 21668
21856: GO 21665
21858: POP
21859: POP
// end else
21860: GO 22242
// for j = 1 to x do
21862: LD_ADDR_VAR 0 9
21866: PUSH
21867: DOUBLE
21868: LD_INT 1
21870: DEC
21871: ST_TO_ADDR
21872: LD_VAR 0 13
21876: PUSH
21877: FOR_TO
21878: IFFALSE 22240
// begin InitHc ;
21880: CALL_OW 19
// if not f then
21884: LD_VAR 0 12
21888: NOT
21889: IFFALSE 21978
// begin PrepareHuman ( false , i , skill ) ;
21891: LD_INT 0
21893: PPUSH
21894: LD_VAR 0 8
21898: PPUSH
21899: LD_VAR 0 4
21903: PPUSH
21904: CALL_OW 380
// un := CreateHuman ;
21908: LD_ADDR_VAR 0 14
21912: PUSH
21913: CALL_OW 44
21917: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21918: LD_ADDR_VAR 0 7
21922: PUSH
21923: LD_VAR 0 7
21927: PPUSH
21928: LD_INT 1
21930: PPUSH
21931: LD_VAR 0 14
21935: PPUSH
21936: CALL_OW 2
21940: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21941: LD_VAR 0 14
21945: PPUSH
21946: LD_VAR 0 1
21950: PPUSH
21951: CALL_OW 250
21955: PPUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 251
21965: PPUSH
21966: LD_INT 10
21968: PPUSH
21969: LD_INT 0
21971: PPUSH
21972: CALL_OW 50
// continue ;
21976: GO 21877
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21978: LD_VAR 0 12
21982: PUSH
21983: LD_INT 1
21985: ARRAY
21986: PPUSH
21987: CALL_OW 313
21991: PUSH
21992: LD_VAR 0 12
21996: PUSH
21997: LD_INT 1
21999: ARRAY
22000: PPUSH
22001: CALL_OW 266
22005: PUSH
22006: LD_INT 32
22008: PUSH
22009: LD_INT 31
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: IN
22016: AND
22017: PUSH
22018: LD_VAR 0 12
22022: PUSH
22023: LD_INT 1
22025: ARRAY
22026: PPUSH
22027: CALL_OW 313
22031: PUSH
22032: LD_INT 6
22034: EQUAL
22035: OR
22036: IFFALSE 22056
// f := Delete ( f , 1 ) ;
22038: LD_ADDR_VAR 0 12
22042: PUSH
22043: LD_VAR 0 12
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 3
22055: ST_TO_ADDR
// if not f then
22056: LD_VAR 0 12
22060: NOT
22061: IFFALSE 22079
// begin x := x + 2 ;
22063: LD_ADDR_VAR 0 13
22067: PUSH
22068: LD_VAR 0 13
22072: PUSH
22073: LD_INT 2
22075: PLUS
22076: ST_TO_ADDR
// continue ;
22077: GO 21877
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22079: LD_VAR 0 12
22083: PUSH
22084: LD_INT 1
22086: ARRAY
22087: PPUSH
22088: CALL_OW 266
22092: PUSH
22093: LD_INT 5
22095: EQUAL
22096: IFFALSE 22170
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22098: LD_VAR 0 12
22102: PUSH
22103: LD_INT 1
22105: ARRAY
22106: PPUSH
22107: CALL_OW 313
22111: PUSH
22112: LD_INT 3
22114: LESS
22115: IFFALSE 22151
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22117: LD_INT 0
22119: PPUSH
22120: LD_INT 5
22122: PUSH
22123: LD_INT 8
22125: PUSH
22126: LD_INT 9
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: LIST
22133: PUSH
22134: LD_VAR 0 17
22138: ARRAY
22139: PPUSH
22140: LD_VAR 0 4
22144: PPUSH
22145: CALL_OW 380
22149: GO 22168
// PrepareHuman ( false , i , skill ) ;
22151: LD_INT 0
22153: PPUSH
22154: LD_VAR 0 8
22158: PPUSH
22159: LD_VAR 0 4
22163: PPUSH
22164: CALL_OW 380
// end else
22168: GO 22187
// PrepareHuman ( false , i , skill ) ;
22170: LD_INT 0
22172: PPUSH
22173: LD_VAR 0 8
22177: PPUSH
22178: LD_VAR 0 4
22182: PPUSH
22183: CALL_OW 380
// un := CreateHuman ;
22187: LD_ADDR_VAR 0 14
22191: PUSH
22192: CALL_OW 44
22196: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22197: LD_ADDR_VAR 0 7
22201: PUSH
22202: LD_VAR 0 7
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: LD_VAR 0 14
22214: PPUSH
22215: CALL_OW 2
22219: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22220: LD_VAR 0 14
22224: PPUSH
22225: LD_VAR 0 12
22229: PUSH
22230: LD_INT 1
22232: ARRAY
22233: PPUSH
22234: CALL_OW 52
// end ;
22238: GO 21877
22240: POP
22241: POP
// end ;
22242: GO 21179
22244: POP
22245: POP
// result := result ^ buildings ;
22246: LD_ADDR_VAR 0 7
22250: PUSH
22251: LD_VAR 0 7
22255: PUSH
22256: LD_VAR 0 18
22260: ADD
22261: ST_TO_ADDR
// end else
22262: GO 22405
// begin for i = 1 to personel do
22264: LD_ADDR_VAR 0 8
22268: PUSH
22269: DOUBLE
22270: LD_INT 1
22272: DEC
22273: ST_TO_ADDR
22274: LD_VAR 0 6
22278: PUSH
22279: FOR_TO
22280: IFFALSE 22403
// begin if i > 4 then
22282: LD_VAR 0 8
22286: PUSH
22287: LD_INT 4
22289: GREATER
22290: IFFALSE 22294
// break ;
22292: GO 22403
// x := personel [ i ] ;
22294: LD_ADDR_VAR 0 13
22298: PUSH
22299: LD_VAR 0 6
22303: PUSH
22304: LD_VAR 0 8
22308: ARRAY
22309: ST_TO_ADDR
// if x = - 1 then
22310: LD_VAR 0 13
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: EQUAL
22319: IFFALSE 22323
// continue ;
22321: GO 22279
// PrepareHuman ( false , i , skill ) ;
22323: LD_INT 0
22325: PPUSH
22326: LD_VAR 0 8
22330: PPUSH
22331: LD_VAR 0 4
22335: PPUSH
22336: CALL_OW 380
// un := CreateHuman ;
22340: LD_ADDR_VAR 0 14
22344: PUSH
22345: CALL_OW 44
22349: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22350: LD_VAR 0 14
22354: PPUSH
22355: LD_VAR 0 1
22359: PPUSH
22360: CALL_OW 250
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 251
22374: PPUSH
22375: LD_INT 10
22377: PPUSH
22378: LD_INT 0
22380: PPUSH
22381: CALL_OW 50
// result := result ^ un ;
22385: LD_ADDR_VAR 0 7
22389: PUSH
22390: LD_VAR 0 7
22394: PUSH
22395: LD_VAR 0 14
22399: ADD
22400: ST_TO_ADDR
// end ;
22401: GO 22279
22403: POP
22404: POP
// end ; end ;
22405: LD_VAR 0 7
22409: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22410: LD_INT 0
22412: PPUSH
22413: PPUSH
22414: PPUSH
22415: PPUSH
22416: PPUSH
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
22425: PPUSH
22426: PPUSH
22427: PPUSH
// result := false ;
22428: LD_ADDR_VAR 0 3
22432: PUSH
22433: LD_INT 0
22435: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22436: LD_VAR 0 1
22440: NOT
22441: PUSH
22442: LD_VAR 0 1
22446: PPUSH
22447: CALL_OW 266
22451: PUSH
22452: LD_INT 32
22454: PUSH
22455: LD_INT 33
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: IN
22462: NOT
22463: OR
22464: IFFALSE 22468
// exit ;
22466: GO 23604
// nat := GetNation ( tower ) ;
22468: LD_ADDR_VAR 0 12
22472: PUSH
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 248
22482: ST_TO_ADDR
// side := GetSide ( tower ) ;
22483: LD_ADDR_VAR 0 16
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 255
22497: ST_TO_ADDR
// x := GetX ( tower ) ;
22498: LD_ADDR_VAR 0 10
22502: PUSH
22503: LD_VAR 0 1
22507: PPUSH
22508: CALL_OW 250
22512: ST_TO_ADDR
// y := GetY ( tower ) ;
22513: LD_ADDR_VAR 0 11
22517: PUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 251
22527: ST_TO_ADDR
// if not x or not y then
22528: LD_VAR 0 10
22532: NOT
22533: PUSH
22534: LD_VAR 0 11
22538: NOT
22539: OR
22540: IFFALSE 22544
// exit ;
22542: GO 23604
// weapon := 0 ;
22544: LD_ADDR_VAR 0 18
22548: PUSH
22549: LD_INT 0
22551: ST_TO_ADDR
// fac_list := [ ] ;
22552: LD_ADDR_VAR 0 17
22556: PUSH
22557: EMPTY
22558: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22559: LD_ADDR_VAR 0 6
22563: PUSH
22564: LD_VAR 0 1
22568: PPUSH
22569: CALL_OW 274
22573: PPUSH
22574: LD_VAR 0 2
22578: PPUSH
22579: CALL 20182 0 2
22583: PPUSH
22584: LD_INT 30
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PPUSH
22594: CALL_OW 72
22598: ST_TO_ADDR
// if not factories then
22599: LD_VAR 0 6
22603: NOT
22604: IFFALSE 22608
// exit ;
22606: GO 23604
// for i in factories do
22608: LD_ADDR_VAR 0 8
22612: PUSH
22613: LD_VAR 0 6
22617: PUSH
22618: FOR_IN
22619: IFFALSE 22644
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22621: LD_ADDR_VAR 0 17
22625: PUSH
22626: LD_VAR 0 17
22630: PUSH
22631: LD_VAR 0 8
22635: PPUSH
22636: CALL_OW 478
22640: UNION
22641: ST_TO_ADDR
22642: GO 22618
22644: POP
22645: POP
// if not fac_list then
22646: LD_VAR 0 17
22650: NOT
22651: IFFALSE 22655
// exit ;
22653: GO 23604
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22655: LD_ADDR_VAR 0 5
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: LD_INT 9
22668: PUSH
22669: LD_INT 10
22671: PUSH
22672: LD_INT 6
22674: PUSH
22675: LD_INT 7
22677: PUSH
22678: LD_INT 11
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 27
22692: PUSH
22693: LD_INT 28
22695: PUSH
22696: LD_INT 26
22698: PUSH
22699: LD_INT 30
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 43
22710: PUSH
22711: LD_INT 44
22713: PUSH
22714: LD_INT 46
22716: PUSH
22717: LD_INT 45
22719: PUSH
22720: LD_INT 47
22722: PUSH
22723: LD_INT 49
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: PUSH
22739: LD_VAR 0 12
22743: ARRAY
22744: ST_TO_ADDR
// for i in list do
22745: LD_ADDR_VAR 0 8
22749: PUSH
22750: LD_VAR 0 5
22754: PUSH
22755: FOR_IN
22756: IFFALSE 22789
// if not i in fac_list then
22758: LD_VAR 0 8
22762: PUSH
22763: LD_VAR 0 17
22767: IN
22768: NOT
22769: IFFALSE 22787
// list := list diff i ;
22771: LD_ADDR_VAR 0 5
22775: PUSH
22776: LD_VAR 0 5
22780: PUSH
22781: LD_VAR 0 8
22785: DIFF
22786: ST_TO_ADDR
22787: GO 22755
22789: POP
22790: POP
// if not list then
22791: LD_VAR 0 5
22795: NOT
22796: IFFALSE 22800
// exit ;
22798: GO 23604
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22800: LD_VAR 0 12
22804: PUSH
22805: LD_INT 3
22807: EQUAL
22808: PUSH
22809: LD_INT 49
22811: PUSH
22812: LD_VAR 0 5
22816: IN
22817: AND
22818: PUSH
22819: LD_INT 31
22821: PPUSH
22822: LD_VAR 0 16
22826: PPUSH
22827: CALL_OW 321
22831: PUSH
22832: LD_INT 2
22834: EQUAL
22835: AND
22836: IFFALSE 22896
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22838: LD_INT 22
22840: PUSH
22841: LD_VAR 0 16
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 35
22852: PUSH
22853: LD_INT 49
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 91
22862: PUSH
22863: LD_VAR 0 1
22867: PUSH
22868: LD_INT 10
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: PPUSH
22881: CALL_OW 69
22885: NOT
22886: IFFALSE 22896
// weapon := ru_time_lapser ;
22888: LD_ADDR_VAR 0 18
22892: PUSH
22893: LD_INT 49
22895: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22896: LD_VAR 0 12
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: IN
22911: PUSH
22912: LD_INT 11
22914: PUSH
22915: LD_VAR 0 5
22919: IN
22920: PUSH
22921: LD_INT 30
22923: PUSH
22924: LD_VAR 0 5
22928: IN
22929: OR
22930: AND
22931: PUSH
22932: LD_INT 6
22934: PPUSH
22935: LD_VAR 0 16
22939: PPUSH
22940: CALL_OW 321
22944: PUSH
22945: LD_INT 2
22947: EQUAL
22948: AND
22949: IFFALSE 23114
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22951: LD_INT 22
22953: PUSH
22954: LD_VAR 0 16
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 35
22968: PUSH
22969: LD_INT 11
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 35
22978: PUSH
22979: LD_INT 30
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 91
22993: PUSH
22994: LD_VAR 0 1
22998: PUSH
22999: LD_INT 18
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 69
23016: NOT
23017: PUSH
23018: LD_INT 22
23020: PUSH
23021: LD_VAR 0 16
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 30
23035: PUSH
23036: LD_INT 32
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 30
23045: PUSH
23046: LD_INT 33
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 91
23060: PUSH
23061: LD_VAR 0 1
23065: PUSH
23066: LD_INT 12
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: PPUSH
23082: CALL_OW 69
23086: PUSH
23087: LD_INT 2
23089: GREATER
23090: AND
23091: IFFALSE 23114
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23093: LD_ADDR_VAR 0 18
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 30
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_VAR 0 12
23112: ARRAY
23113: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23114: LD_VAR 0 18
23118: NOT
23119: PUSH
23120: LD_INT 40
23122: PPUSH
23123: LD_VAR 0 16
23127: PPUSH
23128: CALL_OW 321
23132: PUSH
23133: LD_INT 2
23135: EQUAL
23136: AND
23137: PUSH
23138: LD_INT 7
23140: PUSH
23141: LD_VAR 0 5
23145: IN
23146: PUSH
23147: LD_INT 28
23149: PUSH
23150: LD_VAR 0 5
23154: IN
23155: OR
23156: PUSH
23157: LD_INT 45
23159: PUSH
23160: LD_VAR 0 5
23164: IN
23165: OR
23166: AND
23167: IFFALSE 23421
// begin hex := GetHexInfo ( x , y ) ;
23169: LD_ADDR_VAR 0 4
23173: PUSH
23174: LD_VAR 0 10
23178: PPUSH
23179: LD_VAR 0 11
23183: PPUSH
23184: CALL_OW 546
23188: ST_TO_ADDR
// if hex [ 1 ] then
23189: LD_VAR 0 4
23193: PUSH
23194: LD_INT 1
23196: ARRAY
23197: IFFALSE 23201
// exit ;
23199: GO 23604
// height := hex [ 2 ] ;
23201: LD_ADDR_VAR 0 15
23205: PUSH
23206: LD_VAR 0 4
23210: PUSH
23211: LD_INT 2
23213: ARRAY
23214: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23215: LD_ADDR_VAR 0 14
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 3
23228: PUSH
23229: LD_INT 5
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: ST_TO_ADDR
// for i in tmp do
23238: LD_ADDR_VAR 0 8
23242: PUSH
23243: LD_VAR 0 14
23247: PUSH
23248: FOR_IN
23249: IFFALSE 23419
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23251: LD_ADDR_VAR 0 9
23255: PUSH
23256: LD_VAR 0 10
23260: PPUSH
23261: LD_VAR 0 8
23265: PPUSH
23266: LD_INT 5
23268: PPUSH
23269: CALL_OW 272
23273: PUSH
23274: LD_VAR 0 11
23278: PPUSH
23279: LD_VAR 0 8
23283: PPUSH
23284: LD_INT 5
23286: PPUSH
23287: CALL_OW 273
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23296: LD_VAR 0 9
23300: PUSH
23301: LD_INT 1
23303: ARRAY
23304: PPUSH
23305: LD_VAR 0 9
23309: PUSH
23310: LD_INT 2
23312: ARRAY
23313: PPUSH
23314: CALL_OW 488
23318: IFFALSE 23417
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23320: LD_ADDR_VAR 0 4
23324: PUSH
23325: LD_VAR 0 9
23329: PUSH
23330: LD_INT 1
23332: ARRAY
23333: PPUSH
23334: LD_VAR 0 9
23338: PUSH
23339: LD_INT 2
23341: ARRAY
23342: PPUSH
23343: CALL_OW 546
23347: ST_TO_ADDR
// if hex [ 1 ] then
23348: LD_VAR 0 4
23352: PUSH
23353: LD_INT 1
23355: ARRAY
23356: IFFALSE 23360
// continue ;
23358: GO 23248
// h := hex [ 2 ] ;
23360: LD_ADDR_VAR 0 13
23364: PUSH
23365: LD_VAR 0 4
23369: PUSH
23370: LD_INT 2
23372: ARRAY
23373: ST_TO_ADDR
// if h + 7 < height then
23374: LD_VAR 0 13
23378: PUSH
23379: LD_INT 7
23381: PLUS
23382: PUSH
23383: LD_VAR 0 15
23387: LESS
23388: IFFALSE 23417
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23390: LD_ADDR_VAR 0 18
23394: PUSH
23395: LD_INT 7
23397: PUSH
23398: LD_INT 28
23400: PUSH
23401: LD_INT 45
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: PUSH
23409: LD_VAR 0 12
23413: ARRAY
23414: ST_TO_ADDR
// break ;
23415: GO 23419
// end ; end ; end ;
23417: GO 23248
23419: POP
23420: POP
// end ; if not weapon then
23421: LD_VAR 0 18
23425: NOT
23426: IFFALSE 23486
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23428: LD_ADDR_VAR 0 5
23432: PUSH
23433: LD_VAR 0 5
23437: PUSH
23438: LD_INT 11
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 49
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: LIST
23451: DIFF
23452: ST_TO_ADDR
// if not list then
23453: LD_VAR 0 5
23457: NOT
23458: IFFALSE 23462
// exit ;
23460: GO 23604
// weapon := list [ rand ( 1 , list ) ] ;
23462: LD_ADDR_VAR 0 18
23466: PUSH
23467: LD_VAR 0 5
23471: PUSH
23472: LD_INT 1
23474: PPUSH
23475: LD_VAR 0 5
23479: PPUSH
23480: CALL_OW 12
23484: ARRAY
23485: ST_TO_ADDR
// end ; if weapon then
23486: LD_VAR 0 18
23490: IFFALSE 23604
// begin tmp := CostOfWeapon ( weapon ) ;
23492: LD_ADDR_VAR 0 14
23496: PUSH
23497: LD_VAR 0 18
23501: PPUSH
23502: CALL_OW 451
23506: ST_TO_ADDR
// j := GetBase ( tower ) ;
23507: LD_ADDR_VAR 0 9
23511: PUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 274
23521: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23522: LD_VAR 0 9
23526: PPUSH
23527: LD_INT 1
23529: PPUSH
23530: CALL_OW 275
23534: PUSH
23535: LD_VAR 0 14
23539: PUSH
23540: LD_INT 1
23542: ARRAY
23543: GREATEREQUAL
23544: PUSH
23545: LD_VAR 0 9
23549: PPUSH
23550: LD_INT 2
23552: PPUSH
23553: CALL_OW 275
23557: PUSH
23558: LD_VAR 0 14
23562: PUSH
23563: LD_INT 2
23565: ARRAY
23566: GREATEREQUAL
23567: AND
23568: PUSH
23569: LD_VAR 0 9
23573: PPUSH
23574: LD_INT 3
23576: PPUSH
23577: CALL_OW 275
23581: PUSH
23582: LD_VAR 0 14
23586: PUSH
23587: LD_INT 3
23589: ARRAY
23590: GREATEREQUAL
23591: AND
23592: IFFALSE 23604
// result := weapon ;
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_VAR 0 18
23603: ST_TO_ADDR
// end ; end ;
23604: LD_VAR 0 3
23608: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23609: LD_INT 0
23611: PPUSH
23612: PPUSH
// result := true ;
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_INT 1
23620: ST_TO_ADDR
// if array1 = array2 then
23621: LD_VAR 0 1
23625: PUSH
23626: LD_VAR 0 2
23630: EQUAL
23631: IFFALSE 23691
// begin for i = 1 to array1 do
23633: LD_ADDR_VAR 0 4
23637: PUSH
23638: DOUBLE
23639: LD_INT 1
23641: DEC
23642: ST_TO_ADDR
23643: LD_VAR 0 1
23647: PUSH
23648: FOR_TO
23649: IFFALSE 23687
// if array1 [ i ] <> array2 [ i ] then
23651: LD_VAR 0 1
23655: PUSH
23656: LD_VAR 0 4
23660: ARRAY
23661: PUSH
23662: LD_VAR 0 2
23666: PUSH
23667: LD_VAR 0 4
23671: ARRAY
23672: NONEQUAL
23673: IFFALSE 23685
// begin result := false ;
23675: LD_ADDR_VAR 0 3
23679: PUSH
23680: LD_INT 0
23682: ST_TO_ADDR
// break ;
23683: GO 23687
// end ;
23685: GO 23648
23687: POP
23688: POP
// end else
23689: GO 23699
// result := false ;
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_INT 0
23698: ST_TO_ADDR
// end ;
23699: LD_VAR 0 3
23703: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
23708: PPUSH
// pom := GetBase ( fac ) ;
23709: LD_ADDR_VAR 0 5
23713: PUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: CALL_OW 274
23723: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23724: LD_ADDR_VAR 0 4
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 1
23736: ARRAY
23737: PPUSH
23738: LD_VAR 0 2
23742: PUSH
23743: LD_INT 2
23745: ARRAY
23746: PPUSH
23747: LD_VAR 0 2
23751: PUSH
23752: LD_INT 3
23754: ARRAY
23755: PPUSH
23756: LD_VAR 0 2
23760: PUSH
23761: LD_INT 4
23763: ARRAY
23764: PPUSH
23765: CALL_OW 449
23769: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23770: LD_ADDR_VAR 0 3
23774: PUSH
23775: LD_VAR 0 5
23779: PPUSH
23780: LD_INT 1
23782: PPUSH
23783: CALL_OW 275
23787: PUSH
23788: LD_VAR 0 4
23792: PUSH
23793: LD_INT 1
23795: ARRAY
23796: GREATEREQUAL
23797: PUSH
23798: LD_VAR 0 5
23802: PPUSH
23803: LD_INT 2
23805: PPUSH
23806: CALL_OW 275
23810: PUSH
23811: LD_VAR 0 4
23815: PUSH
23816: LD_INT 2
23818: ARRAY
23819: GREATEREQUAL
23820: AND
23821: PUSH
23822: LD_VAR 0 5
23826: PPUSH
23827: LD_INT 3
23829: PPUSH
23830: CALL_OW 275
23834: PUSH
23835: LD_VAR 0 4
23839: PUSH
23840: LD_INT 3
23842: ARRAY
23843: GREATEREQUAL
23844: AND
23845: ST_TO_ADDR
// end ;
23846: LD_VAR 0 3
23850: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23851: LD_INT 0
23853: PPUSH
23854: PPUSH
23855: PPUSH
23856: PPUSH
// pom := GetBase ( building ) ;
23857: LD_ADDR_VAR 0 3
23861: PUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL_OW 274
23871: ST_TO_ADDR
// if not pom then
23872: LD_VAR 0 3
23876: NOT
23877: IFFALSE 23881
// exit ;
23879: GO 24051
// btype := GetBType ( building ) ;
23881: LD_ADDR_VAR 0 5
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 266
23895: ST_TO_ADDR
// if btype = b_armoury then
23896: LD_VAR 0 5
23900: PUSH
23901: LD_INT 4
23903: EQUAL
23904: IFFALSE 23914
// btype := b_barracks ;
23906: LD_ADDR_VAR 0 5
23910: PUSH
23911: LD_INT 5
23913: ST_TO_ADDR
// if btype = b_depot then
23914: LD_VAR 0 5
23918: PUSH
23919: LD_INT 0
23921: EQUAL
23922: IFFALSE 23932
// btype := b_warehouse ;
23924: LD_ADDR_VAR 0 5
23928: PUSH
23929: LD_INT 1
23931: ST_TO_ADDR
// if btype = b_workshop then
23932: LD_VAR 0 5
23936: PUSH
23937: LD_INT 2
23939: EQUAL
23940: IFFALSE 23950
// btype := b_factory ;
23942: LD_ADDR_VAR 0 5
23946: PUSH
23947: LD_INT 3
23949: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23950: LD_ADDR_VAR 0 4
23954: PUSH
23955: LD_VAR 0 5
23959: PPUSH
23960: LD_VAR 0 1
23964: PPUSH
23965: CALL_OW 248
23969: PPUSH
23970: CALL_OW 450
23974: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23975: LD_ADDR_VAR 0 2
23979: PUSH
23980: LD_VAR 0 3
23984: PPUSH
23985: LD_INT 1
23987: PPUSH
23988: CALL_OW 275
23992: PUSH
23993: LD_VAR 0 4
23997: PUSH
23998: LD_INT 1
24000: ARRAY
24001: GREATEREQUAL
24002: PUSH
24003: LD_VAR 0 3
24007: PPUSH
24008: LD_INT 2
24010: PPUSH
24011: CALL_OW 275
24015: PUSH
24016: LD_VAR 0 4
24020: PUSH
24021: LD_INT 2
24023: ARRAY
24024: GREATEREQUAL
24025: AND
24026: PUSH
24027: LD_VAR 0 3
24031: PPUSH
24032: LD_INT 3
24034: PPUSH
24035: CALL_OW 275
24039: PUSH
24040: LD_VAR 0 4
24044: PUSH
24045: LD_INT 3
24047: ARRAY
24048: GREATEREQUAL
24049: AND
24050: ST_TO_ADDR
// end ;
24051: LD_VAR 0 2
24055: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24056: LD_INT 0
24058: PPUSH
24059: PPUSH
24060: PPUSH
// pom := GetBase ( building ) ;
24061: LD_ADDR_VAR 0 4
24065: PUSH
24066: LD_VAR 0 1
24070: PPUSH
24071: CALL_OW 274
24075: ST_TO_ADDR
// if not pom then
24076: LD_VAR 0 4
24080: NOT
24081: IFFALSE 24085
// exit ;
24083: GO 24186
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24085: LD_ADDR_VAR 0 5
24089: PUSH
24090: LD_VAR 0 2
24094: PPUSH
24095: LD_VAR 0 1
24099: PPUSH
24100: CALL_OW 248
24104: PPUSH
24105: CALL_OW 450
24109: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: LD_VAR 0 4
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: CALL_OW 275
24127: PUSH
24128: LD_VAR 0 5
24132: PUSH
24133: LD_INT 1
24135: ARRAY
24136: GREATEREQUAL
24137: PUSH
24138: LD_VAR 0 4
24142: PPUSH
24143: LD_INT 2
24145: PPUSH
24146: CALL_OW 275
24150: PUSH
24151: LD_VAR 0 5
24155: PUSH
24156: LD_INT 2
24158: ARRAY
24159: GREATEREQUAL
24160: AND
24161: PUSH
24162: LD_VAR 0 4
24166: PPUSH
24167: LD_INT 3
24169: PPUSH
24170: CALL_OW 275
24174: PUSH
24175: LD_VAR 0 5
24179: PUSH
24180: LD_INT 3
24182: ARRAY
24183: GREATEREQUAL
24184: AND
24185: ST_TO_ADDR
// end ;
24186: LD_VAR 0 3
24190: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24191: LD_INT 0
24193: PPUSH
24194: PPUSH
24195: PPUSH
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
24201: PPUSH
24202: PPUSH
// result := false ;
24203: LD_ADDR_VAR 0 6
24207: PUSH
24208: LD_INT 0
24210: ST_TO_ADDR
// if not base or not btype or not x or not y then
24211: LD_VAR 0 1
24215: NOT
24216: PUSH
24217: LD_VAR 0 2
24221: NOT
24222: OR
24223: PUSH
24224: LD_VAR 0 3
24228: NOT
24229: OR
24230: PUSH
24231: LD_VAR 0 4
24235: NOT
24236: OR
24237: IFFALSE 24241
// exit ;
24239: GO 24850
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24241: LD_ADDR_VAR 0 12
24245: PUSH
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_VAR 0 3
24255: PPUSH
24256: LD_VAR 0 4
24260: PPUSH
24261: LD_VAR 0 5
24265: PPUSH
24266: LD_VAR 0 1
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: PPUSH
24275: CALL_OW 248
24279: PPUSH
24280: LD_INT 0
24282: PPUSH
24283: CALL 25687 0 6
24287: ST_TO_ADDR
// if not hexes then
24288: LD_VAR 0 12
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24850
// for i = 1 to hexes do
24297: LD_ADDR_VAR 0 7
24301: PUSH
24302: DOUBLE
24303: LD_INT 1
24305: DEC
24306: ST_TO_ADDR
24307: LD_VAR 0 12
24311: PUSH
24312: FOR_TO
24313: IFFALSE 24848
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24315: LD_ADDR_VAR 0 11
24319: PUSH
24320: LD_VAR 0 12
24324: PUSH
24325: LD_VAR 0 7
24329: ARRAY
24330: PUSH
24331: LD_INT 1
24333: ARRAY
24334: PPUSH
24335: LD_VAR 0 12
24339: PUSH
24340: LD_VAR 0 7
24344: ARRAY
24345: PUSH
24346: LD_INT 2
24348: ARRAY
24349: PPUSH
24350: CALL_OW 428
24354: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24355: LD_VAR 0 12
24359: PUSH
24360: LD_VAR 0 7
24364: ARRAY
24365: PUSH
24366: LD_INT 1
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 12
24374: PUSH
24375: LD_VAR 0 7
24379: ARRAY
24380: PUSH
24381: LD_INT 2
24383: ARRAY
24384: PPUSH
24385: CALL_OW 351
24389: PUSH
24390: LD_VAR 0 12
24394: PUSH
24395: LD_VAR 0 7
24399: ARRAY
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: PPUSH
24405: LD_VAR 0 12
24409: PUSH
24410: LD_VAR 0 7
24414: ARRAY
24415: PUSH
24416: LD_INT 2
24418: ARRAY
24419: PPUSH
24420: CALL_OW 488
24424: NOT
24425: OR
24426: PUSH
24427: LD_VAR 0 11
24431: PPUSH
24432: CALL_OW 247
24436: PUSH
24437: LD_INT 3
24439: EQUAL
24440: OR
24441: IFFALSE 24447
// exit ;
24443: POP
24444: POP
24445: GO 24850
// if not tmp or not tmp in base then
24447: LD_VAR 0 11
24451: NOT
24452: PUSH
24453: LD_VAR 0 11
24457: PUSH
24458: LD_VAR 0 1
24462: IN
24463: NOT
24464: OR
24465: IFFALSE 24469
// continue ;
24467: GO 24312
// result := true ;
24469: LD_ADDR_VAR 0 6
24473: PUSH
24474: LD_INT 1
24476: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24477: LD_ADDR_VAR 0 15
24481: PUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: LD_INT 22
24489: PUSH
24490: LD_VAR 0 11
24494: PPUSH
24495: CALL_OW 255
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 30
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 30
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PPUSH
24536: CALL_OW 72
24540: ST_TO_ADDR
// if dep then
24541: LD_VAR 0 15
24545: IFFALSE 24681
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24547: LD_ADDR_VAR 0 14
24551: PUSH
24552: LD_VAR 0 15
24556: PUSH
24557: LD_INT 1
24559: ARRAY
24560: PPUSH
24561: CALL_OW 250
24565: PPUSH
24566: LD_VAR 0 15
24570: PUSH
24571: LD_INT 1
24573: ARRAY
24574: PPUSH
24575: CALL_OW 254
24579: PPUSH
24580: LD_INT 5
24582: PPUSH
24583: CALL_OW 272
24587: PUSH
24588: LD_VAR 0 15
24592: PUSH
24593: LD_INT 1
24595: ARRAY
24596: PPUSH
24597: CALL_OW 251
24601: PPUSH
24602: LD_VAR 0 15
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: PPUSH
24611: CALL_OW 254
24615: PPUSH
24616: LD_INT 5
24618: PPUSH
24619: CALL_OW 273
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24628: LD_VAR 0 14
24632: PUSH
24633: LD_INT 1
24635: ARRAY
24636: PPUSH
24637: LD_VAR 0 14
24641: PUSH
24642: LD_INT 2
24644: ARRAY
24645: PPUSH
24646: CALL_OW 488
24650: IFFALSE 24681
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24652: LD_VAR 0 11
24656: PPUSH
24657: LD_VAR 0 14
24661: PUSH
24662: LD_INT 1
24664: ARRAY
24665: PPUSH
24666: LD_VAR 0 14
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PPUSH
24675: CALL_OW 111
// continue ;
24679: GO 24312
// end ; end ; r := GetDir ( tmp ) ;
24681: LD_ADDR_VAR 0 13
24685: PUSH
24686: LD_VAR 0 11
24690: PPUSH
24691: CALL_OW 254
24695: ST_TO_ADDR
// if r = 5 then
24696: LD_VAR 0 13
24700: PUSH
24701: LD_INT 5
24703: EQUAL
24704: IFFALSE 24714
// r := 0 ;
24706: LD_ADDR_VAR 0 13
24710: PUSH
24711: LD_INT 0
24713: ST_TO_ADDR
// for j = r to 5 do
24714: LD_ADDR_VAR 0 8
24718: PUSH
24719: DOUBLE
24720: LD_VAR 0 13
24724: DEC
24725: ST_TO_ADDR
24726: LD_INT 5
24728: PUSH
24729: FOR_TO
24730: IFFALSE 24844
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24732: LD_ADDR_VAR 0 9
24736: PUSH
24737: LD_VAR 0 11
24741: PPUSH
24742: CALL_OW 250
24746: PPUSH
24747: LD_VAR 0 8
24751: PPUSH
24752: LD_INT 2
24754: PPUSH
24755: CALL_OW 272
24759: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24760: LD_ADDR_VAR 0 10
24764: PUSH
24765: LD_VAR 0 11
24769: PPUSH
24770: CALL_OW 251
24774: PPUSH
24775: LD_VAR 0 8
24779: PPUSH
24780: LD_INT 2
24782: PPUSH
24783: CALL_OW 273
24787: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24788: LD_VAR 0 9
24792: PPUSH
24793: LD_VAR 0 10
24797: PPUSH
24798: CALL_OW 488
24802: PUSH
24803: LD_VAR 0 9
24807: PPUSH
24808: LD_VAR 0 10
24812: PPUSH
24813: CALL_OW 428
24817: NOT
24818: AND
24819: IFFALSE 24842
// begin ComMoveXY ( tmp , _x , _y ) ;
24821: LD_VAR 0 11
24825: PPUSH
24826: LD_VAR 0 9
24830: PPUSH
24831: LD_VAR 0 10
24835: PPUSH
24836: CALL_OW 111
// break ;
24840: GO 24844
// end ; end ;
24842: GO 24729
24844: POP
24845: POP
// end ;
24846: GO 24312
24848: POP
24849: POP
// end ;
24850: LD_VAR 0 6
24854: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24855: LD_INT 0
24857: PPUSH
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
24864: PPUSH
24865: PPUSH
24866: PPUSH
// result := false ;
24867: LD_ADDR_VAR 0 6
24871: PUSH
24872: LD_INT 0
24874: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24875: LD_VAR 0 1
24879: NOT
24880: PUSH
24881: LD_VAR 0 1
24885: PPUSH
24886: CALL_OW 266
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: IN
24901: NOT
24902: OR
24903: PUSH
24904: LD_VAR 0 2
24908: NOT
24909: OR
24910: PUSH
24911: LD_VAR 0 5
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 3
24927: PUSH
24928: LD_INT 4
24930: PUSH
24931: LD_INT 5
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: IN
24942: NOT
24943: OR
24944: PUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_VAR 0 4
24954: PPUSH
24955: CALL_OW 488
24959: NOT
24960: OR
24961: IFFALSE 24965
// exit ;
24963: GO 25682
// pom := GetBase ( depot ) ;
24965: LD_ADDR_VAR 0 10
24969: PUSH
24970: LD_VAR 0 1
24974: PPUSH
24975: CALL_OW 274
24979: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24980: LD_ADDR_VAR 0 11
24984: PUSH
24985: LD_VAR 0 2
24989: PPUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 248
24999: PPUSH
25000: CALL_OW 450
25004: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25005: LD_VAR 0 10
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: CALL_OW 275
25017: PUSH
25018: LD_VAR 0 11
25022: PUSH
25023: LD_INT 1
25025: ARRAY
25026: GREATEREQUAL
25027: PUSH
25028: LD_VAR 0 10
25032: PPUSH
25033: LD_INT 2
25035: PPUSH
25036: CALL_OW 275
25040: PUSH
25041: LD_VAR 0 11
25045: PUSH
25046: LD_INT 2
25048: ARRAY
25049: GREATEREQUAL
25050: AND
25051: PUSH
25052: LD_VAR 0 10
25056: PPUSH
25057: LD_INT 3
25059: PPUSH
25060: CALL_OW 275
25064: PUSH
25065: LD_VAR 0 11
25069: PUSH
25070: LD_INT 3
25072: ARRAY
25073: GREATEREQUAL
25074: AND
25075: NOT
25076: IFFALSE 25080
// exit ;
25078: GO 25682
// if GetBType ( depot ) = b_depot then
25080: LD_VAR 0 1
25084: PPUSH
25085: CALL_OW 266
25089: PUSH
25090: LD_INT 0
25092: EQUAL
25093: IFFALSE 25105
// dist := 28 else
25095: LD_ADDR_VAR 0 14
25099: PUSH
25100: LD_INT 28
25102: ST_TO_ADDR
25103: GO 25113
// dist := 36 ;
25105: LD_ADDR_VAR 0 14
25109: PUSH
25110: LD_INT 36
25112: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25113: LD_VAR 0 1
25117: PPUSH
25118: LD_VAR 0 3
25122: PPUSH
25123: LD_VAR 0 4
25127: PPUSH
25128: CALL_OW 297
25132: PUSH
25133: LD_VAR 0 14
25137: GREATER
25138: IFFALSE 25142
// exit ;
25140: GO 25682
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25142: LD_ADDR_VAR 0 12
25146: PUSH
25147: LD_VAR 0 2
25151: PPUSH
25152: LD_VAR 0 3
25156: PPUSH
25157: LD_VAR 0 4
25161: PPUSH
25162: LD_VAR 0 5
25166: PPUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: CALL_OW 248
25176: PPUSH
25177: LD_INT 0
25179: PPUSH
25180: CALL 25687 0 6
25184: ST_TO_ADDR
// if not hexes then
25185: LD_VAR 0 12
25189: NOT
25190: IFFALSE 25194
// exit ;
25192: GO 25682
// hex := GetHexInfo ( x , y ) ;
25194: LD_ADDR_VAR 0 15
25198: PUSH
25199: LD_VAR 0 3
25203: PPUSH
25204: LD_VAR 0 4
25208: PPUSH
25209: CALL_OW 546
25213: ST_TO_ADDR
// if hex [ 1 ] then
25214: LD_VAR 0 15
25218: PUSH
25219: LD_INT 1
25221: ARRAY
25222: IFFALSE 25226
// exit ;
25224: GO 25682
// height := hex [ 2 ] ;
25226: LD_ADDR_VAR 0 13
25230: PUSH
25231: LD_VAR 0 15
25235: PUSH
25236: LD_INT 2
25238: ARRAY
25239: ST_TO_ADDR
// for i = 1 to hexes do
25240: LD_ADDR_VAR 0 7
25244: PUSH
25245: DOUBLE
25246: LD_INT 1
25248: DEC
25249: ST_TO_ADDR
25250: LD_VAR 0 12
25254: PUSH
25255: FOR_TO
25256: IFFALSE 25586
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25258: LD_VAR 0 12
25262: PUSH
25263: LD_VAR 0 7
25267: ARRAY
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: PPUSH
25273: LD_VAR 0 12
25277: PUSH
25278: LD_VAR 0 7
25282: ARRAY
25283: PUSH
25284: LD_INT 2
25286: ARRAY
25287: PPUSH
25288: CALL_OW 488
25292: NOT
25293: PUSH
25294: LD_VAR 0 12
25298: PUSH
25299: LD_VAR 0 7
25303: ARRAY
25304: PUSH
25305: LD_INT 1
25307: ARRAY
25308: PPUSH
25309: LD_VAR 0 12
25313: PUSH
25314: LD_VAR 0 7
25318: ARRAY
25319: PUSH
25320: LD_INT 2
25322: ARRAY
25323: PPUSH
25324: CALL_OW 428
25328: PUSH
25329: LD_INT 0
25331: GREATER
25332: OR
25333: PUSH
25334: LD_VAR 0 12
25338: PUSH
25339: LD_VAR 0 7
25343: ARRAY
25344: PUSH
25345: LD_INT 1
25347: ARRAY
25348: PPUSH
25349: LD_VAR 0 12
25353: PUSH
25354: LD_VAR 0 7
25358: ARRAY
25359: PUSH
25360: LD_INT 2
25362: ARRAY
25363: PPUSH
25364: CALL_OW 351
25368: OR
25369: IFFALSE 25375
// exit ;
25371: POP
25372: POP
25373: GO 25682
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25375: LD_ADDR_VAR 0 8
25379: PUSH
25380: LD_VAR 0 12
25384: PUSH
25385: LD_VAR 0 7
25389: ARRAY
25390: PUSH
25391: LD_INT 1
25393: ARRAY
25394: PPUSH
25395: LD_VAR 0 12
25399: PUSH
25400: LD_VAR 0 7
25404: ARRAY
25405: PUSH
25406: LD_INT 2
25408: ARRAY
25409: PPUSH
25410: CALL_OW 546
25414: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25415: LD_VAR 0 8
25419: PUSH
25420: LD_INT 1
25422: ARRAY
25423: PUSH
25424: LD_VAR 0 8
25428: PUSH
25429: LD_INT 2
25431: ARRAY
25432: PUSH
25433: LD_VAR 0 13
25437: PUSH
25438: LD_INT 2
25440: PLUS
25441: GREATER
25442: OR
25443: PUSH
25444: LD_VAR 0 8
25448: PUSH
25449: LD_INT 2
25451: ARRAY
25452: PUSH
25453: LD_VAR 0 13
25457: PUSH
25458: LD_INT 2
25460: MINUS
25461: LESS
25462: OR
25463: PUSH
25464: LD_VAR 0 8
25468: PUSH
25469: LD_INT 3
25471: ARRAY
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 8
25478: PUSH
25479: LD_INT 9
25481: PUSH
25482: LD_INT 10
25484: PUSH
25485: LD_INT 11
25487: PUSH
25488: LD_INT 12
25490: PUSH
25491: LD_INT 13
25493: PUSH
25494: LD_INT 16
25496: PUSH
25497: LD_INT 17
25499: PUSH
25500: LD_INT 18
25502: PUSH
25503: LD_INT 19
25505: PUSH
25506: LD_INT 20
25508: PUSH
25509: LD_INT 21
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: IN
25527: NOT
25528: OR
25529: PUSH
25530: LD_VAR 0 8
25534: PUSH
25535: LD_INT 5
25537: ARRAY
25538: NOT
25539: OR
25540: PUSH
25541: LD_VAR 0 8
25545: PUSH
25546: LD_INT 6
25548: ARRAY
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 7
25558: PUSH
25559: LD_INT 9
25561: PUSH
25562: LD_INT 10
25564: PUSH
25565: LD_INT 11
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: IN
25576: NOT
25577: OR
25578: IFFALSE 25584
// exit ;
25580: POP
25581: POP
25582: GO 25682
// end ;
25584: GO 25255
25586: POP
25587: POP
// side := GetSide ( depot ) ;
25588: LD_ADDR_VAR 0 9
25592: PUSH
25593: LD_VAR 0 1
25597: PPUSH
25598: CALL_OW 255
25602: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25603: LD_VAR 0 9
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: LD_VAR 0 4
25617: PPUSH
25618: LD_INT 20
25620: PPUSH
25621: CALL 18336 0 4
25625: PUSH
25626: LD_INT 4
25628: ARRAY
25629: IFFALSE 25633
// exit ;
25631: GO 25682
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25633: LD_VAR 0 2
25637: PUSH
25638: LD_INT 29
25640: PUSH
25641: LD_INT 30
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: IN
25648: PUSH
25649: LD_VAR 0 3
25653: PPUSH
25654: LD_VAR 0 4
25658: PPUSH
25659: LD_VAR 0 9
25663: PPUSH
25664: CALL_OW 440
25668: NOT
25669: AND
25670: IFFALSE 25674
// exit ;
25672: GO 25682
// result := true ;
25674: LD_ADDR_VAR 0 6
25678: PUSH
25679: LD_INT 1
25681: ST_TO_ADDR
// end ;
25682: LD_VAR 0 6
25686: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
// result = [ ] ;
25747: LD_ADDR_VAR 0 7
25751: PUSH
25752: EMPTY
25753: ST_TO_ADDR
// temp_list = [ ] ;
25754: LD_ADDR_VAR 0 9
25758: PUSH
25759: EMPTY
25760: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25761: LD_VAR 0 4
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: LD_INT 4
25780: PUSH
25781: LD_INT 5
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: IN
25792: NOT
25793: PUSH
25794: LD_VAR 0 1
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: IN
25809: PUSH
25810: LD_VAR 0 5
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: LIST
25828: IN
25829: NOT
25830: AND
25831: OR
25832: IFFALSE 25836
// exit ;
25834: GO 44227
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25836: LD_VAR 0 1
25840: PUSH
25841: LD_INT 6
25843: PUSH
25844: LD_INT 7
25846: PUSH
25847: LD_INT 8
25849: PUSH
25850: LD_INT 13
25852: PUSH
25853: LD_INT 12
25855: PUSH
25856: LD_INT 15
25858: PUSH
25859: LD_INT 11
25861: PUSH
25862: LD_INT 14
25864: PUSH
25865: LD_INT 10
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: IN
25879: IFFALSE 25889
// btype = b_lab ;
25881: LD_ADDR_VAR 0 1
25885: PUSH
25886: LD_INT 6
25888: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25889: LD_VAR 0 6
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: IN
25908: NOT
25909: PUSH
25910: LD_VAR 0 1
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: LD_INT 3
25926: PUSH
25927: LD_INT 6
25929: PUSH
25930: LD_INT 36
25932: PUSH
25933: LD_INT 4
25935: PUSH
25936: LD_INT 5
25938: PUSH
25939: LD_INT 31
25941: PUSH
25942: LD_INT 32
25944: PUSH
25945: LD_INT 33
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: IN
25961: NOT
25962: PUSH
25963: LD_VAR 0 6
25967: PUSH
25968: LD_INT 1
25970: EQUAL
25971: AND
25972: OR
25973: PUSH
25974: LD_VAR 0 1
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: IN
25989: NOT
25990: PUSH
25991: LD_VAR 0 6
25995: PUSH
25996: LD_INT 2
25998: EQUAL
25999: AND
26000: OR
26001: IFFALSE 26011
// mode = 0 ;
26003: LD_ADDR_VAR 0 6
26007: PUSH
26008: LD_INT 0
26010: ST_TO_ADDR
// case mode of 0 :
26011: LD_VAR 0 6
26015: PUSH
26016: LD_INT 0
26018: DOUBLE
26019: EQUAL
26020: IFTRUE 26024
26022: GO 37477
26024: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26025: LD_ADDR_VAR 0 11
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 3
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26218: LD_ADDR_VAR 0 12
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 3
26375: NEG
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: NEG
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26414: LD_ADDR_VAR 0 13
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 2
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 3
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: NEG
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 3
26585: NEG
26586: PUSH
26587: LD_INT 3
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26613: LD_ADDR_VAR 0 14
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 2
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 3
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 3
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26809: LD_ADDR_VAR 0 15
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 3
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 3
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27002: LD_ADDR_VAR 0 16
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: NEG
27138: PUSH
27139: LD_INT 2
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 3
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 3
27159: PUSH
27160: LD_INT 3
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27195: LD_ADDR_VAR 0 17
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: LD_INT 2
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: NEG
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27425: LD_ADDR_VAR 0 18
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27655: LD_ADDR_VAR 0 19
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 2
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: LD_INT 2
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27885: LD_ADDR_VAR 0 20
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: LD_INT 2
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28115: LD_ADDR_VAR 0 21
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: LD_INT 1
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: NEG
28315: PUSH
28316: LD_INT 2
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28345: LD_ADDR_VAR 0 22
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: LD_INT 2
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28575: LD_ADDR_VAR 0 23
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 2
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 2
28786: NEG
28787: PUSH
28788: LD_INT 3
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: LD_INT 3
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28855: LD_ADDR_VAR 0 24
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 3
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 3
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29131: LD_ADDR_VAR 0 25
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 1
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: LD_INT 2
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29405: LD_ADDR_VAR 0 26
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29681: LD_ADDR_VAR 0 27
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: NEG
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 2
29903: NEG
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 3
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29961: LD_ADDR_VAR 0 28
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 3
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 3
30196: NEG
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: LD_INT 2
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30243: LD_ADDR_VAR 0 29
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 2
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: LD_INT 3
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 3
30487: NEG
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30522: LD_ADDR_VAR 0 30
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 2
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 3
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30800: LD_ADDR_VAR 0 31
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 1
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: NEG
30990: PUSH
30991: LD_INT 3
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 3
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 3
31043: NEG
31044: PUSH
31045: LD_INT 2
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31078: LD_ADDR_VAR 0 32
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 3
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31356: LD_ADDR_VAR 0 33
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: NEG
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31635: LD_ADDR_VAR 0 34
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 3
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 3
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31915: LD_ADDR_VAR 0 35
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32027: LD_ADDR_VAR 0 36
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32139: LD_ADDR_VAR 0 37
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32251: LD_ADDR_VAR 0 38
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 1
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32363: LD_ADDR_VAR 0 39
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32475: LD_ADDR_VAR 0 40
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32587: LD_ADDR_VAR 0 41
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 3
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: NEG
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32937: LD_ADDR_VAR 0 42
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: LD_INT 3
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: LD_INT 3
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 3
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 3
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: LD_INT 2
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: LD_INT 3
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33287: LD_ADDR_VAR 0 43
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: LD_INT 3
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 3
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: NEG
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33635: LD_ADDR_VAR 0 44
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 3
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 3
33944: NEG
33945: PUSH
33946: LD_INT 3
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33985: LD_ADDR_VAR 0 45
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: LD_INT 3
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: LD_INT 3
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 3
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 3
34294: NEG
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34335: LD_ADDR_VAR 0 46
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: LD_INT 3
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 3
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 3
34631: NEG
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 3
34642: NEG
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34683: LD_ADDR_VAR 0 47
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34834: LD_ADDR_VAR 0 48
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34981: LD_ADDR_VAR 0 49
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35125: LD_ADDR_VAR 0 50
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35269: LD_ADDR_VAR 0 51
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35416: LD_ADDR_VAR 0 52
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 2
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35567: LD_ADDR_VAR 0 53
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: LD_INT 2
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35797: LD_ADDR_VAR 0 54
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: LD_INT 2
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36027: LD_ADDR_VAR 0 55
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36257: LD_ADDR_VAR 0 56
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36487: LD_ADDR_VAR 0 57
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36717: LD_ADDR_VAR 0 58
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 2
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36947: LD_ADDR_VAR 0 59
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37035: LD_ADDR_VAR 0 60
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37123: LD_ADDR_VAR 0 61
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37211: LD_ADDR_VAR 0 62
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37299: LD_ADDR_VAR 0 63
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37387: LD_ADDR_VAR 0 64
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: ST_TO_ADDR
// end ; 1 :
37475: GO 43372
37477: LD_INT 1
37479: DOUBLE
37480: EQUAL
37481: IFTRUE 37485
37483: GO 40108
37485: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37486: LD_ADDR_VAR 0 11
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 3
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 3
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37530: LD_ADDR_VAR 0 12
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 3
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 3
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37571: LD_ADDR_VAR 0 13
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37611: LD_ADDR_VAR 0 14
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37652: LD_ADDR_VAR 0 15
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37696: LD_ADDR_VAR 0 16
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: LD_INT 3
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 3
37715: NEG
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 3
37727: NEG
37728: PUSH
37729: LD_INT 3
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37742: LD_ADDR_VAR 0 17
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 3
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37786: LD_ADDR_VAR 0 18
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37827: LD_ADDR_VAR 0 19
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37867: LD_ADDR_VAR 0 20
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37908: LD_ADDR_VAR 0 21
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37952: LD_ADDR_VAR 0 22
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: LD_INT 3
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: NEG
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 3
37983: NEG
37984: PUSH
37985: LD_INT 3
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37998: LD_ADDR_VAR 0 23
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 3
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 4
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38042: LD_ADDR_VAR 0 24
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 3
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 4
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38083: LD_ADDR_VAR 0 25
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: LD_INT 3
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 4
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 3
38110: PUSH
38111: LD_INT 4
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38123: LD_ADDR_VAR 0 26
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 4
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38164: LD_ADDR_VAR 0 27
38168: PUSH
38169: LD_INT 3
38171: NEG
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 4
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38208: LD_ADDR_VAR 0 28
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 3
38227: NEG
38228: PUSH
38229: LD_INT 4
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 4
38239: NEG
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38254: LD_ADDR_VAR 0 29
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 3
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: LD_INT 3
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 4
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 4
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 3
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 5
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 5
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 4
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: LD_INT 6
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 6
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 5
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38409: LD_ADDR_VAR 0 30
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 3
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 4
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 4
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 4
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 5
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 5
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 5
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 6
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 6
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38552: LD_ADDR_VAR 0 31
38556: PUSH
38557: LD_INT 3
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 3
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 4
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 4
38599: PUSH
38600: LD_INT 4
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: LD_INT 4
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: LD_INT 4
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 5
38629: PUSH
38630: LD_INT 5
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 4
38639: PUSH
38640: LD_INT 5
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 6
38649: PUSH
38650: LD_INT 5
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 6
38659: PUSH
38660: LD_INT 6
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 5
38669: PUSH
38670: LD_INT 6
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38691: LD_ADDR_VAR 0 32
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 3
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 4
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: LD_INT 4
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 5
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 5
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: LD_INT 4
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 6
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 6
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 5
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38834: LD_ADDR_VAR 0 33
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 3
38852: NEG
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 3
38875: NEG
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 4
38886: NEG
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 4
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 5
38920: NEG
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 5
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 5
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 6
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 6
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38989: LD_ADDR_VAR 0 34
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: LD_INT 3
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 3
39008: NEG
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: LD_INT 3
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: LD_INT 4
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 4
39044: NEG
39045: PUSH
39046: LD_INT 3
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 4
39056: NEG
39057: PUSH
39058: LD_INT 4
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 4
39068: NEG
39069: PUSH
39070: LD_INT 5
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 5
39080: NEG
39081: PUSH
39082: LD_INT 4
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 5
39092: NEG
39093: PUSH
39094: LD_INT 5
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 5
39104: NEG
39105: PUSH
39106: LD_INT 6
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 6
39116: NEG
39117: PUSH
39118: LD_INT 5
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 6
39128: NEG
39129: PUSH
39130: LD_INT 6
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39152: LD_ADDR_VAR 0 41
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 3
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 2
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39196: LD_ADDR_VAR 0 42
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 3
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39237: LD_ADDR_VAR 0 43
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: LD_INT 2
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39277: LD_ADDR_VAR 0 44
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 3
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39318: LD_ADDR_VAR 0 45
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 3
39347: NEG
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: LIST
39361: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39362: LD_ADDR_VAR 0 46
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 3
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39408: LD_ADDR_VAR 0 47
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: LD_INT 3
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 3
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39441: LD_ADDR_VAR 0 48
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39472: LD_ADDR_VAR 0 49
39476: PUSH
39477: LD_INT 3
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39501: LD_ADDR_VAR 0 50
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 3
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39530: LD_ADDR_VAR 0 51
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39561: LD_ADDR_VAR 0 52
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39594: LD_ADDR_VAR 0 53
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39638: LD_ADDR_VAR 0 54
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 3
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 3
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39679: LD_ADDR_VAR 0 55
39683: PUSH
39684: LD_INT 3
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: LD_INT 3
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: LD_INT 3
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39719: LD_ADDR_VAR 0 56
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39760: LD_ADDR_VAR 0 57
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39804: LD_ADDR_VAR 0 58
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: NEG
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 3
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39850: LD_ADDR_VAR 0 59
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39894: LD_ADDR_VAR 0 60
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39935: LD_ADDR_VAR 0 61
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39975: LD_ADDR_VAR 0 62
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40016: LD_ADDR_VAR 0 63
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40060: LD_ADDR_VAR 0 64
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// end ; 2 :
40106: GO 43372
40108: LD_INT 2
40110: DOUBLE
40111: EQUAL
40112: IFTRUE 40116
40114: GO 43371
40116: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40117: LD_ADDR_VAR 0 29
40121: PUSH
40122: LD_INT 4
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 4
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 5
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 5
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 4
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 5
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 4
40237: PUSH
40238: LD_INT 3
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 4
40247: PUSH
40248: LD_INT 4
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 3
40257: PUSH
40258: LD_INT 4
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 4
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 4
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 4
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 5
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 5
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: LD_INT 4
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 5
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 3
40400: NEG
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 3
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 3
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 4
40456: NEG
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 4
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 4
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 4
40502: NEG
40503: PUSH
40504: LD_INT 4
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 4
40514: NEG
40515: PUSH
40516: LD_INT 5
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: LD_INT 4
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: NEG
40539: PUSH
40540: LD_INT 3
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 4
40550: NEG
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 5
40562: NEG
40563: PUSH
40564: LD_INT 4
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 5
40574: NEG
40575: PUSH
40576: LD_INT 5
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 3
40586: NEG
40587: PUSH
40588: LD_INT 5
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 5
40598: NEG
40599: PUSH
40600: LD_INT 3
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40655: LD_ADDR_VAR 0 30
40659: PUSH
40660: LD_INT 4
40662: PUSH
40663: LD_INT 4
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 4
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 5
40682: PUSH
40683: LD_INT 4
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 5
40692: PUSH
40693: LD_INT 5
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 4
40702: PUSH
40703: LD_INT 5
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 4
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 5
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: LD_INT 5
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 3
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 4
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 4
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 4
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 4
40845: NEG
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 4
40856: NEG
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 3
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 3
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 4
40890: NEG
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 5
40901: NEG
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 5
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 5
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: LD_INT 3
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 3
40959: NEG
40960: PUSH
40961: LD_INT 4
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 3
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: NEG
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 4
41007: NEG
41008: PUSH
41009: LD_INT 3
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 4
41019: NEG
41020: PUSH
41021: LD_INT 4
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 4
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 4
41043: NEG
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 4
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 5
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: LD_INT 4
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 3
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 4
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 5
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 3
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 5
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41202: LD_ADDR_VAR 0 31
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 4
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 4
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 5
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 5
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 4
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: LD_INT 5
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 3
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 3
41302: NEG
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 3
41347: NEG
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 4
41358: NEG
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 4
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 4
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 4
41404: NEG
41405: PUSH
41406: LD_INT 4
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 4
41416: NEG
41417: PUSH
41418: LD_INT 5
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 4
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: NEG
41441: PUSH
41442: LD_INT 3
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 4
41452: NEG
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 5
41464: NEG
41465: PUSH
41466: LD_INT 4
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 5
41476: NEG
41477: PUSH
41478: LD_INT 5
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: LD_INT 5
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 5
41500: NEG
41501: PUSH
41502: LD_INT 3
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 4
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 3
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 3
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 4
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 4
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 4
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 4
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 5
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 5
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 4
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 3
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 5
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41752: LD_ADDR_VAR 0 32
41756: PUSH
41757: LD_INT 4
41759: NEG
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 4
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: NEG
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 4
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 5
41815: NEG
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 5
41826: NEG
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 5
41838: NEG
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 3
41850: NEG
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: LD_INT 3
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 3
41873: NEG
41874: PUSH
41875: LD_INT 4
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 3
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: NEG
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 4
41933: NEG
41934: PUSH
41935: LD_INT 4
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 4
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 4
41957: NEG
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 4
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 5
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 4
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 3
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 4
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 5
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: LD_INT 5
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 4
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 4
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 4
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 4
42164: PUSH
42165: LD_INT 4
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 4
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 5
42184: PUSH
42185: LD_INT 4
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: LD_INT 5
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 4
42204: PUSH
42205: LD_INT 5
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 4
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 5
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: LD_INT 5
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42299: LD_ADDR_VAR 0 33
42303: PUSH
42304: LD_INT 4
42306: NEG
42307: PUSH
42308: LD_INT 4
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 4
42318: NEG
42319: PUSH
42320: LD_INT 5
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: LD_INT 4
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: NEG
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 4
42354: NEG
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 5
42366: NEG
42367: PUSH
42368: LD_INT 4
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 5
42378: NEG
42379: PUSH
42380: LD_INT 5
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: NEG
42391: PUSH
42392: LD_INT 5
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 5
42402: NEG
42403: PUSH
42404: LD_INT 3
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 4
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 3
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 4
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: LD_INT 4
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 4
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 4
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 5
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 5
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 4
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 5
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 4
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 4
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 4
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 4
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 4
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 5
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 5
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 4
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 3
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 5
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42837: LD_ADDR_VAR 0 34
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 4
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 5
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 4
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 4
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 5
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 5
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 4
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 4
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 3
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 4
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 4
43039: PUSH
43040: LD_INT 4
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 4
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 5
43059: PUSH
43060: LD_INT 4
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 5
43069: PUSH
43070: LD_INT 5
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 4
43079: PUSH
43080: LD_INT 5
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 4
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 5
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: LD_INT 5
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 4
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 4
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: LD_INT 4
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 4
43222: NEG
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 4
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 3
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 3
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 4
43267: NEG
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 5
43278: NEG
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 5
43289: NEG
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 5
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// end ; end ;
43369: GO 43372
43371: POP
// case btype of b_depot , b_warehouse :
43372: LD_VAR 0 1
43376: PUSH
43377: LD_INT 0
43379: DOUBLE
43380: EQUAL
43381: IFTRUE 43391
43383: LD_INT 1
43385: DOUBLE
43386: EQUAL
43387: IFTRUE 43391
43389: GO 43592
43391: POP
// case nation of nation_american :
43392: LD_VAR 0 5
43396: PUSH
43397: LD_INT 1
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43405
43403: GO 43461
43405: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43406: LD_ADDR_VAR 0 9
43410: PUSH
43411: LD_VAR 0 11
43415: PUSH
43416: LD_VAR 0 12
43420: PUSH
43421: LD_VAR 0 13
43425: PUSH
43426: LD_VAR 0 14
43430: PUSH
43431: LD_VAR 0 15
43435: PUSH
43436: LD_VAR 0 16
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: PUSH
43449: LD_VAR 0 4
43453: PUSH
43454: LD_INT 1
43456: PLUS
43457: ARRAY
43458: ST_TO_ADDR
43459: GO 43590
43461: LD_INT 2
43463: DOUBLE
43464: EQUAL
43465: IFTRUE 43469
43467: GO 43525
43469: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43470: LD_ADDR_VAR 0 9
43474: PUSH
43475: LD_VAR 0 17
43479: PUSH
43480: LD_VAR 0 18
43484: PUSH
43485: LD_VAR 0 19
43489: PUSH
43490: LD_VAR 0 20
43494: PUSH
43495: LD_VAR 0 21
43499: PUSH
43500: LD_VAR 0 22
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: PUSH
43513: LD_VAR 0 4
43517: PUSH
43518: LD_INT 1
43520: PLUS
43521: ARRAY
43522: ST_TO_ADDR
43523: GO 43590
43525: LD_INT 3
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43533
43531: GO 43589
43533: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43534: LD_ADDR_VAR 0 9
43538: PUSH
43539: LD_VAR 0 23
43543: PUSH
43544: LD_VAR 0 24
43548: PUSH
43549: LD_VAR 0 25
43553: PUSH
43554: LD_VAR 0 26
43558: PUSH
43559: LD_VAR 0 27
43563: PUSH
43564: LD_VAR 0 28
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: PUSH
43577: LD_VAR 0 4
43581: PUSH
43582: LD_INT 1
43584: PLUS
43585: ARRAY
43586: ST_TO_ADDR
43587: GO 43590
43589: POP
43590: GO 44145
43592: LD_INT 2
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43606
43598: LD_INT 3
43600: DOUBLE
43601: EQUAL
43602: IFTRUE 43606
43604: GO 43662
43606: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43607: LD_ADDR_VAR 0 9
43611: PUSH
43612: LD_VAR 0 29
43616: PUSH
43617: LD_VAR 0 30
43621: PUSH
43622: LD_VAR 0 31
43626: PUSH
43627: LD_VAR 0 32
43631: PUSH
43632: LD_VAR 0 33
43636: PUSH
43637: LD_VAR 0 34
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: PUSH
43650: LD_VAR 0 4
43654: PUSH
43655: LD_INT 1
43657: PLUS
43658: ARRAY
43659: ST_TO_ADDR
43660: GO 44145
43662: LD_INT 16
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43724
43668: LD_INT 17
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43724
43674: LD_INT 18
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43724
43680: LD_INT 19
43682: DOUBLE
43683: EQUAL
43684: IFTRUE 43724
43686: LD_INT 22
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43724
43692: LD_INT 20
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43724
43698: LD_INT 21
43700: DOUBLE
43701: EQUAL
43702: IFTRUE 43724
43704: LD_INT 23
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43724
43710: LD_INT 24
43712: DOUBLE
43713: EQUAL
43714: IFTRUE 43724
43716: LD_INT 25
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43780
43724: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43725: LD_ADDR_VAR 0 9
43729: PUSH
43730: LD_VAR 0 35
43734: PUSH
43735: LD_VAR 0 36
43739: PUSH
43740: LD_VAR 0 37
43744: PUSH
43745: LD_VAR 0 38
43749: PUSH
43750: LD_VAR 0 39
43754: PUSH
43755: LD_VAR 0 40
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 1
43775: PLUS
43776: ARRAY
43777: ST_TO_ADDR
43778: GO 44145
43780: LD_INT 6
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43836
43786: LD_INT 7
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43836
43792: LD_INT 8
43794: DOUBLE
43795: EQUAL
43796: IFTRUE 43836
43798: LD_INT 13
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43836
43804: LD_INT 12
43806: DOUBLE
43807: EQUAL
43808: IFTRUE 43836
43810: LD_INT 15
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43836
43816: LD_INT 11
43818: DOUBLE
43819: EQUAL
43820: IFTRUE 43836
43822: LD_INT 14
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43836
43828: LD_INT 10
43830: DOUBLE
43831: EQUAL
43832: IFTRUE 43836
43834: GO 43892
43836: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43837: LD_ADDR_VAR 0 9
43841: PUSH
43842: LD_VAR 0 41
43846: PUSH
43847: LD_VAR 0 42
43851: PUSH
43852: LD_VAR 0 43
43856: PUSH
43857: LD_VAR 0 44
43861: PUSH
43862: LD_VAR 0 45
43866: PUSH
43867: LD_VAR 0 46
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: PUSH
43880: LD_VAR 0 4
43884: PUSH
43885: LD_INT 1
43887: PLUS
43888: ARRAY
43889: ST_TO_ADDR
43890: GO 44145
43892: LD_INT 36
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 43956
43900: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43901: LD_ADDR_VAR 0 9
43905: PUSH
43906: LD_VAR 0 47
43910: PUSH
43911: LD_VAR 0 48
43915: PUSH
43916: LD_VAR 0 49
43920: PUSH
43921: LD_VAR 0 50
43925: PUSH
43926: LD_VAR 0 51
43930: PUSH
43931: LD_VAR 0 52
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: PUSH
43944: LD_VAR 0 4
43948: PUSH
43949: LD_INT 1
43951: PLUS
43952: ARRAY
43953: ST_TO_ADDR
43954: GO 44145
43956: LD_INT 4
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43982
43962: LD_INT 5
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43982
43968: LD_INT 34
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43982
43974: LD_INT 37
43976: DOUBLE
43977: EQUAL
43978: IFTRUE 43982
43980: GO 44038
43982: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43983: LD_ADDR_VAR 0 9
43987: PUSH
43988: LD_VAR 0 53
43992: PUSH
43993: LD_VAR 0 54
43997: PUSH
43998: LD_VAR 0 55
44002: PUSH
44003: LD_VAR 0 56
44007: PUSH
44008: LD_VAR 0 57
44012: PUSH
44013: LD_VAR 0 58
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: PUSH
44026: LD_VAR 0 4
44030: PUSH
44031: LD_INT 1
44033: PLUS
44034: ARRAY
44035: ST_TO_ADDR
44036: GO 44145
44038: LD_INT 31
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44088
44044: LD_INT 32
44046: DOUBLE
44047: EQUAL
44048: IFTRUE 44088
44050: LD_INT 33
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44088
44056: LD_INT 27
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44088
44062: LD_INT 26
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44088
44068: LD_INT 28
44070: DOUBLE
44071: EQUAL
44072: IFTRUE 44088
44074: LD_INT 29
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44088
44080: LD_INT 30
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 44144
44088: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44089: LD_ADDR_VAR 0 9
44093: PUSH
44094: LD_VAR 0 59
44098: PUSH
44099: LD_VAR 0 60
44103: PUSH
44104: LD_VAR 0 61
44108: PUSH
44109: LD_VAR 0 62
44113: PUSH
44114: LD_VAR 0 63
44118: PUSH
44119: LD_VAR 0 64
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: PUSH
44132: LD_VAR 0 4
44136: PUSH
44137: LD_INT 1
44139: PLUS
44140: ARRAY
44141: ST_TO_ADDR
44142: GO 44145
44144: POP
// temp_list2 = [ ] ;
44145: LD_ADDR_VAR 0 10
44149: PUSH
44150: EMPTY
44151: ST_TO_ADDR
// for i in temp_list do
44152: LD_ADDR_VAR 0 8
44156: PUSH
44157: LD_VAR 0 9
44161: PUSH
44162: FOR_IN
44163: IFFALSE 44215
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44165: LD_ADDR_VAR 0 10
44169: PUSH
44170: LD_VAR 0 10
44174: PUSH
44175: LD_VAR 0 8
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: PUSH
44184: LD_VAR 0 2
44188: PLUS
44189: PUSH
44190: LD_VAR 0 8
44194: PUSH
44195: LD_INT 2
44197: ARRAY
44198: PUSH
44199: LD_VAR 0 3
44203: PLUS
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: ADD
44212: ST_TO_ADDR
44213: GO 44162
44215: POP
44216: POP
// result = temp_list2 ;
44217: LD_ADDR_VAR 0 7
44221: PUSH
44222: LD_VAR 0 10
44226: ST_TO_ADDR
// end ;
44227: LD_VAR 0 7
44231: RET
// export function EnemyInRange ( unit , dist ) ; begin
44232: LD_INT 0
44234: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 255
44249: PPUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: CALL_OW 250
44259: PPUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 251
44269: PPUSH
44270: LD_VAR 0 2
44274: PPUSH
44275: CALL 18336 0 4
44279: PUSH
44280: LD_INT 4
44282: ARRAY
44283: ST_TO_ADDR
// end ;
44284: LD_VAR 0 3
44288: RET
// export function PlayerSeeMe ( unit ) ; begin
44289: LD_INT 0
44291: PPUSH
// result := See ( your_side , unit ) ;
44292: LD_ADDR_VAR 0 2
44296: PUSH
44297: LD_OWVAR 2
44301: PPUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: CALL_OW 292
44311: ST_TO_ADDR
// end ;
44312: LD_VAR 0 2
44316: RET
// export function ReverseDir ( unit ) ; begin
44317: LD_INT 0
44319: PPUSH
// if not unit then
44320: LD_VAR 0 1
44324: NOT
44325: IFFALSE 44329
// exit ;
44327: GO 44375
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44329: LD_ADDR_VAR 0 2
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: LD_INT 4
44339: PUSH
44340: LD_INT 5
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: PUSH
44360: LD_VAR 0 1
44364: PPUSH
44365: CALL_OW 254
44369: PUSH
44370: LD_INT 1
44372: PLUS
44373: ARRAY
44374: ST_TO_ADDR
// end ;
44375: LD_VAR 0 2
44379: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44380: LD_INT 0
44382: PPUSH
44383: PPUSH
44384: PPUSH
44385: PPUSH
44386: PPUSH
// if not hexes then
44387: LD_VAR 0 2
44391: NOT
44392: IFFALSE 44396
// exit ;
44394: GO 44544
// dist := 9999 ;
44396: LD_ADDR_VAR 0 5
44400: PUSH
44401: LD_INT 9999
44403: ST_TO_ADDR
// for i = 1 to hexes do
44404: LD_ADDR_VAR 0 4
44408: PUSH
44409: DOUBLE
44410: LD_INT 1
44412: DEC
44413: ST_TO_ADDR
44414: LD_VAR 0 2
44418: PUSH
44419: FOR_TO
44420: IFFALSE 44532
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44422: LD_VAR 0 1
44426: PPUSH
44427: LD_VAR 0 2
44431: PUSH
44432: LD_VAR 0 4
44436: ARRAY
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: PPUSH
44442: LD_VAR 0 2
44446: PUSH
44447: LD_VAR 0 4
44451: ARRAY
44452: PUSH
44453: LD_INT 2
44455: ARRAY
44456: PPUSH
44457: CALL_OW 297
44461: PUSH
44462: LD_VAR 0 5
44466: LESS
44467: IFFALSE 44530
// begin hex := hexes [ i ] ;
44469: LD_ADDR_VAR 0 7
44473: PUSH
44474: LD_VAR 0 2
44478: PUSH
44479: LD_VAR 0 4
44483: ARRAY
44484: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44485: LD_ADDR_VAR 0 5
44489: PUSH
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_VAR 0 2
44499: PUSH
44500: LD_VAR 0 4
44504: ARRAY
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PPUSH
44510: LD_VAR 0 2
44514: PUSH
44515: LD_VAR 0 4
44519: ARRAY
44520: PUSH
44521: LD_INT 2
44523: ARRAY
44524: PPUSH
44525: CALL_OW 297
44529: ST_TO_ADDR
// end ; end ;
44530: GO 44419
44532: POP
44533: POP
// result := hex ;
44534: LD_ADDR_VAR 0 3
44538: PUSH
44539: LD_VAR 0 7
44543: ST_TO_ADDR
// end ;
44544: LD_VAR 0 3
44548: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44549: LD_INT 0
44551: PPUSH
44552: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44553: LD_VAR 0 1
44557: NOT
44558: PUSH
44559: LD_VAR 0 1
44563: PUSH
44564: LD_INT 21
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 23
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PPUSH
44588: CALL_OW 69
44592: IN
44593: NOT
44594: OR
44595: IFFALSE 44599
// exit ;
44597: GO 44646
// for i = 1 to 3 do
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: DOUBLE
44605: LD_INT 1
44607: DEC
44608: ST_TO_ADDR
44609: LD_INT 3
44611: PUSH
44612: FOR_TO
44613: IFFALSE 44644
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL_OW 250
44624: PPUSH
44625: LD_VAR 0 1
44629: PPUSH
44630: CALL_OW 251
44634: PPUSH
44635: LD_INT 1
44637: PPUSH
44638: CALL_OW 453
44642: GO 44612
44644: POP
44645: POP
// end ;
44646: LD_VAR 0 2
44650: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44651: LD_INT 0
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44659: LD_VAR 0 1
44663: NOT
44664: PUSH
44665: LD_VAR 0 2
44669: NOT
44670: OR
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: CALL_OW 314
44681: OR
44682: IFFALSE 44686
// exit ;
44684: GO 45127
// x := GetX ( enemy_unit ) ;
44686: LD_ADDR_VAR 0 7
44690: PUSH
44691: LD_VAR 0 2
44695: PPUSH
44696: CALL_OW 250
44700: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44701: LD_ADDR_VAR 0 8
44705: PUSH
44706: LD_VAR 0 2
44710: PPUSH
44711: CALL_OW 251
44715: ST_TO_ADDR
// if not x or not y then
44716: LD_VAR 0 7
44720: NOT
44721: PUSH
44722: LD_VAR 0 8
44726: NOT
44727: OR
44728: IFFALSE 44732
// exit ;
44730: GO 45127
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44732: LD_ADDR_VAR 0 6
44736: PUSH
44737: LD_VAR 0 7
44741: PPUSH
44742: LD_INT 0
44744: PPUSH
44745: LD_INT 4
44747: PPUSH
44748: CALL_OW 272
44752: PUSH
44753: LD_VAR 0 8
44757: PPUSH
44758: LD_INT 0
44760: PPUSH
44761: LD_INT 4
44763: PPUSH
44764: CALL_OW 273
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_VAR 0 7
44777: PPUSH
44778: LD_INT 1
44780: PPUSH
44781: LD_INT 4
44783: PPUSH
44784: CALL_OW 272
44788: PUSH
44789: LD_VAR 0 8
44793: PPUSH
44794: LD_INT 1
44796: PPUSH
44797: LD_INT 4
44799: PPUSH
44800: CALL_OW 273
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_VAR 0 7
44813: PPUSH
44814: LD_INT 2
44816: PPUSH
44817: LD_INT 4
44819: PPUSH
44820: CALL_OW 272
44824: PUSH
44825: LD_VAR 0 8
44829: PPUSH
44830: LD_INT 2
44832: PPUSH
44833: LD_INT 4
44835: PPUSH
44836: CALL_OW 273
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_VAR 0 7
44849: PPUSH
44850: LD_INT 3
44852: PPUSH
44853: LD_INT 4
44855: PPUSH
44856: CALL_OW 272
44860: PUSH
44861: LD_VAR 0 8
44865: PPUSH
44866: LD_INT 3
44868: PPUSH
44869: LD_INT 4
44871: PPUSH
44872: CALL_OW 273
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_VAR 0 7
44885: PPUSH
44886: LD_INT 4
44888: PPUSH
44889: LD_INT 4
44891: PPUSH
44892: CALL_OW 272
44896: PUSH
44897: LD_VAR 0 8
44901: PPUSH
44902: LD_INT 4
44904: PPUSH
44905: LD_INT 4
44907: PPUSH
44908: CALL_OW 273
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_VAR 0 7
44921: PPUSH
44922: LD_INT 5
44924: PPUSH
44925: LD_INT 4
44927: PPUSH
44928: CALL_OW 272
44932: PUSH
44933: LD_VAR 0 8
44937: PPUSH
44938: LD_INT 5
44940: PPUSH
44941: LD_INT 4
44943: PPUSH
44944: CALL_OW 273
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// for i = tmp downto 1 do
44961: LD_ADDR_VAR 0 4
44965: PUSH
44966: DOUBLE
44967: LD_VAR 0 6
44971: INC
44972: ST_TO_ADDR
44973: LD_INT 1
44975: PUSH
44976: FOR_DOWNTO
44977: IFFALSE 45078
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44979: LD_VAR 0 6
44983: PUSH
44984: LD_VAR 0 4
44988: ARRAY
44989: PUSH
44990: LD_INT 1
44992: ARRAY
44993: PPUSH
44994: LD_VAR 0 6
44998: PUSH
44999: LD_VAR 0 4
45003: ARRAY
45004: PUSH
45005: LD_INT 2
45007: ARRAY
45008: PPUSH
45009: CALL_OW 488
45013: NOT
45014: PUSH
45015: LD_VAR 0 6
45019: PUSH
45020: LD_VAR 0 4
45024: ARRAY
45025: PUSH
45026: LD_INT 1
45028: ARRAY
45029: PPUSH
45030: LD_VAR 0 6
45034: PUSH
45035: LD_VAR 0 4
45039: ARRAY
45040: PUSH
45041: LD_INT 2
45043: ARRAY
45044: PPUSH
45045: CALL_OW 428
45049: PUSH
45050: LD_INT 0
45052: NONEQUAL
45053: OR
45054: IFFALSE 45076
// tmp := Delete ( tmp , i ) ;
45056: LD_ADDR_VAR 0 6
45060: PUSH
45061: LD_VAR 0 6
45065: PPUSH
45066: LD_VAR 0 4
45070: PPUSH
45071: CALL_OW 3
45075: ST_TO_ADDR
45076: GO 44976
45078: POP
45079: POP
// j := GetClosestHex ( unit , tmp ) ;
45080: LD_ADDR_VAR 0 5
45084: PUSH
45085: LD_VAR 0 1
45089: PPUSH
45090: LD_VAR 0 6
45094: PPUSH
45095: CALL 44380 0 2
45099: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45100: LD_VAR 0 1
45104: PPUSH
45105: LD_VAR 0 5
45109: PUSH
45110: LD_INT 1
45112: ARRAY
45113: PPUSH
45114: LD_VAR 0 5
45118: PUSH
45119: LD_INT 2
45121: ARRAY
45122: PPUSH
45123: CALL_OW 111
// end ;
45127: LD_VAR 0 3
45131: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45132: LD_INT 0
45134: PPUSH
45135: PPUSH
45136: PPUSH
// uc_side = 0 ;
45137: LD_ADDR_OWVAR 20
45141: PUSH
45142: LD_INT 0
45144: ST_TO_ADDR
// uc_nation = 0 ;
45145: LD_ADDR_OWVAR 21
45149: PUSH
45150: LD_INT 0
45152: ST_TO_ADDR
// InitHc ;
45153: CALL_OW 19
// InitVc ;
45157: CALL_OW 20
// if mastodonts then
45161: LD_VAR 0 6
45165: IFFALSE 45232
// for i = 1 to mastodonts do
45167: LD_ADDR_VAR 0 11
45171: PUSH
45172: DOUBLE
45173: LD_INT 1
45175: DEC
45176: ST_TO_ADDR
45177: LD_VAR 0 6
45181: PUSH
45182: FOR_TO
45183: IFFALSE 45230
// begin vc_chassis := 31 ;
45185: LD_ADDR_OWVAR 37
45189: PUSH
45190: LD_INT 31
45192: ST_TO_ADDR
// vc_control := control_rider ;
45193: LD_ADDR_OWVAR 38
45197: PUSH
45198: LD_INT 4
45200: ST_TO_ADDR
// animal := CreateVehicle ;
45201: LD_ADDR_VAR 0 12
45205: PUSH
45206: CALL_OW 45
45210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45211: LD_VAR 0 12
45215: PPUSH
45216: LD_VAR 0 8
45220: PPUSH
45221: LD_INT 0
45223: PPUSH
45224: CALL 51977 0 3
// end ;
45228: GO 45182
45230: POP
45231: POP
// if horses then
45232: LD_VAR 0 5
45236: IFFALSE 45303
// for i = 1 to horses do
45238: LD_ADDR_VAR 0 11
45242: PUSH
45243: DOUBLE
45244: LD_INT 1
45246: DEC
45247: ST_TO_ADDR
45248: LD_VAR 0 5
45252: PUSH
45253: FOR_TO
45254: IFFALSE 45301
// begin hc_class := 21 ;
45256: LD_ADDR_OWVAR 28
45260: PUSH
45261: LD_INT 21
45263: ST_TO_ADDR
// hc_gallery :=  ;
45264: LD_ADDR_OWVAR 33
45268: PUSH
45269: LD_STRING 
45271: ST_TO_ADDR
// animal := CreateHuman ;
45272: LD_ADDR_VAR 0 12
45276: PUSH
45277: CALL_OW 44
45281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45282: LD_VAR 0 12
45286: PPUSH
45287: LD_VAR 0 8
45291: PPUSH
45292: LD_INT 0
45294: PPUSH
45295: CALL 51977 0 3
// end ;
45299: GO 45253
45301: POP
45302: POP
// if birds then
45303: LD_VAR 0 1
45307: IFFALSE 45374
// for i = 1 to birds do
45309: LD_ADDR_VAR 0 11
45313: PUSH
45314: DOUBLE
45315: LD_INT 1
45317: DEC
45318: ST_TO_ADDR
45319: LD_VAR 0 1
45323: PUSH
45324: FOR_TO
45325: IFFALSE 45372
// begin hc_class = 18 ;
45327: LD_ADDR_OWVAR 28
45331: PUSH
45332: LD_INT 18
45334: ST_TO_ADDR
// hc_gallery =  ;
45335: LD_ADDR_OWVAR 33
45339: PUSH
45340: LD_STRING 
45342: ST_TO_ADDR
// animal := CreateHuman ;
45343: LD_ADDR_VAR 0 12
45347: PUSH
45348: CALL_OW 44
45352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45353: LD_VAR 0 12
45357: PPUSH
45358: LD_VAR 0 8
45362: PPUSH
45363: LD_INT 0
45365: PPUSH
45366: CALL 51977 0 3
// end ;
45370: GO 45324
45372: POP
45373: POP
// if tigers then
45374: LD_VAR 0 2
45378: IFFALSE 45462
// for i = 1 to tigers do
45380: LD_ADDR_VAR 0 11
45384: PUSH
45385: DOUBLE
45386: LD_INT 1
45388: DEC
45389: ST_TO_ADDR
45390: LD_VAR 0 2
45394: PUSH
45395: FOR_TO
45396: IFFALSE 45460
// begin hc_class = class_tiger ;
45398: LD_ADDR_OWVAR 28
45402: PUSH
45403: LD_INT 14
45405: ST_TO_ADDR
// hc_gallery =  ;
45406: LD_ADDR_OWVAR 33
45410: PUSH
45411: LD_STRING 
45413: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45414: LD_ADDR_OWVAR 35
45418: PUSH
45419: LD_INT 7
45421: NEG
45422: PPUSH
45423: LD_INT 7
45425: PPUSH
45426: CALL_OW 12
45430: ST_TO_ADDR
// animal := CreateHuman ;
45431: LD_ADDR_VAR 0 12
45435: PUSH
45436: CALL_OW 44
45440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45441: LD_VAR 0 12
45445: PPUSH
45446: LD_VAR 0 8
45450: PPUSH
45451: LD_INT 0
45453: PPUSH
45454: CALL 51977 0 3
// end ;
45458: GO 45395
45460: POP
45461: POP
// if apemans then
45462: LD_VAR 0 3
45466: IFFALSE 45589
// for i = 1 to apemans do
45468: LD_ADDR_VAR 0 11
45472: PUSH
45473: DOUBLE
45474: LD_INT 1
45476: DEC
45477: ST_TO_ADDR
45478: LD_VAR 0 3
45482: PUSH
45483: FOR_TO
45484: IFFALSE 45587
// begin hc_class = class_apeman ;
45486: LD_ADDR_OWVAR 28
45490: PUSH
45491: LD_INT 12
45493: ST_TO_ADDR
// hc_gallery =  ;
45494: LD_ADDR_OWVAR 33
45498: PUSH
45499: LD_STRING 
45501: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45502: LD_ADDR_OWVAR 35
45506: PUSH
45507: LD_INT 5
45509: NEG
45510: PPUSH
45511: LD_INT 5
45513: PPUSH
45514: CALL_OW 12
45518: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45519: LD_ADDR_OWVAR 31
45523: PUSH
45524: LD_INT 1
45526: PPUSH
45527: LD_INT 3
45529: PPUSH
45530: CALL_OW 12
45534: PUSH
45535: LD_INT 1
45537: PPUSH
45538: LD_INT 3
45540: PPUSH
45541: CALL_OW 12
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// animal := CreateHuman ;
45558: LD_ADDR_VAR 0 12
45562: PUSH
45563: CALL_OW 44
45567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45568: LD_VAR 0 12
45572: PPUSH
45573: LD_VAR 0 8
45577: PPUSH
45578: LD_INT 0
45580: PPUSH
45581: CALL 51977 0 3
// end ;
45585: GO 45483
45587: POP
45588: POP
// if enchidnas then
45589: LD_VAR 0 4
45593: IFFALSE 45660
// for i = 1 to enchidnas do
45595: LD_ADDR_VAR 0 11
45599: PUSH
45600: DOUBLE
45601: LD_INT 1
45603: DEC
45604: ST_TO_ADDR
45605: LD_VAR 0 4
45609: PUSH
45610: FOR_TO
45611: IFFALSE 45658
// begin hc_class = 13 ;
45613: LD_ADDR_OWVAR 28
45617: PUSH
45618: LD_INT 13
45620: ST_TO_ADDR
// hc_gallery =  ;
45621: LD_ADDR_OWVAR 33
45625: PUSH
45626: LD_STRING 
45628: ST_TO_ADDR
// animal := CreateHuman ;
45629: LD_ADDR_VAR 0 12
45633: PUSH
45634: CALL_OW 44
45638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45639: LD_VAR 0 12
45643: PPUSH
45644: LD_VAR 0 8
45648: PPUSH
45649: LD_INT 0
45651: PPUSH
45652: CALL 51977 0 3
// end ;
45656: GO 45610
45658: POP
45659: POP
// if fishes then
45660: LD_VAR 0 7
45664: IFFALSE 45731
// for i = 1 to fishes do
45666: LD_ADDR_VAR 0 11
45670: PUSH
45671: DOUBLE
45672: LD_INT 1
45674: DEC
45675: ST_TO_ADDR
45676: LD_VAR 0 7
45680: PUSH
45681: FOR_TO
45682: IFFALSE 45729
// begin hc_class = 20 ;
45684: LD_ADDR_OWVAR 28
45688: PUSH
45689: LD_INT 20
45691: ST_TO_ADDR
// hc_gallery =  ;
45692: LD_ADDR_OWVAR 33
45696: PUSH
45697: LD_STRING 
45699: ST_TO_ADDR
// animal := CreateHuman ;
45700: LD_ADDR_VAR 0 12
45704: PUSH
45705: CALL_OW 44
45709: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45710: LD_VAR 0 12
45714: PPUSH
45715: LD_VAR 0 9
45719: PPUSH
45720: LD_INT 0
45722: PPUSH
45723: CALL 51977 0 3
// end ;
45727: GO 45681
45729: POP
45730: POP
// end ;
45731: LD_VAR 0 10
45735: RET
// export function WantHeal ( sci , unit ) ; begin
45736: LD_INT 0
45738: PPUSH
// if GetTaskList ( sci ) > 0 then
45739: LD_VAR 0 1
45743: PPUSH
45744: CALL_OW 437
45748: PUSH
45749: LD_INT 0
45751: GREATER
45752: IFFALSE 45822
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45754: LD_VAR 0 1
45758: PPUSH
45759: CALL_OW 437
45763: PUSH
45764: LD_INT 1
45766: ARRAY
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PUSH
45772: LD_STRING l
45774: EQUAL
45775: PUSH
45776: LD_VAR 0 1
45780: PPUSH
45781: CALL_OW 437
45785: PUSH
45786: LD_INT 1
45788: ARRAY
45789: PUSH
45790: LD_INT 4
45792: ARRAY
45793: PUSH
45794: LD_VAR 0 2
45798: EQUAL
45799: AND
45800: IFFALSE 45812
// result := true else
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: LD_INT 1
45809: ST_TO_ADDR
45810: GO 45820
// result := false ;
45812: LD_ADDR_VAR 0 3
45816: PUSH
45817: LD_INT 0
45819: ST_TO_ADDR
// end else
45820: GO 45830
// result := false ;
45822: LD_ADDR_VAR 0 3
45826: PUSH
45827: LD_INT 0
45829: ST_TO_ADDR
// end ;
45830: LD_VAR 0 3
45834: RET
// export function HealTarget ( sci ) ; begin
45835: LD_INT 0
45837: PPUSH
// if not sci then
45838: LD_VAR 0 1
45842: NOT
45843: IFFALSE 45847
// exit ;
45845: GO 45912
// result := 0 ;
45847: LD_ADDR_VAR 0 2
45851: PUSH
45852: LD_INT 0
45854: ST_TO_ADDR
// if GetTaskList ( sci ) then
45855: LD_VAR 0 1
45859: PPUSH
45860: CALL_OW 437
45864: IFFALSE 45912
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45866: LD_VAR 0 1
45870: PPUSH
45871: CALL_OW 437
45875: PUSH
45876: LD_INT 1
45878: ARRAY
45879: PUSH
45880: LD_INT 1
45882: ARRAY
45883: PUSH
45884: LD_STRING l
45886: EQUAL
45887: IFFALSE 45912
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45889: LD_ADDR_VAR 0 2
45893: PUSH
45894: LD_VAR 0 1
45898: PPUSH
45899: CALL_OW 437
45903: PUSH
45904: LD_INT 1
45906: ARRAY
45907: PUSH
45908: LD_INT 4
45910: ARRAY
45911: ST_TO_ADDR
// end ;
45912: LD_VAR 0 2
45916: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45917: LD_INT 0
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
45951: PPUSH
45952: PPUSH
// if not list then
45953: LD_VAR 0 1
45957: NOT
45958: IFFALSE 45962
// exit ;
45960: GO 50588
// base := list [ 1 ] ;
45962: LD_ADDR_VAR 0 3
45966: PUSH
45967: LD_VAR 0 1
45971: PUSH
45972: LD_INT 1
45974: ARRAY
45975: ST_TO_ADDR
// group := list [ 2 ] ;
45976: LD_ADDR_VAR 0 4
45980: PUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_INT 2
45988: ARRAY
45989: ST_TO_ADDR
// path := list [ 3 ] ;
45990: LD_ADDR_VAR 0 5
45994: PUSH
45995: LD_VAR 0 1
45999: PUSH
46000: LD_INT 3
46002: ARRAY
46003: ST_TO_ADDR
// flags := list [ 4 ] ;
46004: LD_ADDR_VAR 0 6
46008: PUSH
46009: LD_VAR 0 1
46013: PUSH
46014: LD_INT 4
46016: ARRAY
46017: ST_TO_ADDR
// mined := [ ] ;
46018: LD_ADDR_VAR 0 27
46022: PUSH
46023: EMPTY
46024: ST_TO_ADDR
// bombed := [ ] ;
46025: LD_ADDR_VAR 0 28
46029: PUSH
46030: EMPTY
46031: ST_TO_ADDR
// healers := [ ] ;
46032: LD_ADDR_VAR 0 31
46036: PUSH
46037: EMPTY
46038: ST_TO_ADDR
// to_heal := [ ] ;
46039: LD_ADDR_VAR 0 30
46043: PUSH
46044: EMPTY
46045: ST_TO_ADDR
// repairs := [ ] ;
46046: LD_ADDR_VAR 0 33
46050: PUSH
46051: EMPTY
46052: ST_TO_ADDR
// to_repair := [ ] ;
46053: LD_ADDR_VAR 0 32
46057: PUSH
46058: EMPTY
46059: ST_TO_ADDR
// if not group or not path then
46060: LD_VAR 0 4
46064: NOT
46065: PUSH
46066: LD_VAR 0 5
46070: NOT
46071: OR
46072: IFFALSE 46076
// exit ;
46074: GO 50588
// side := GetSide ( group [ 1 ] ) ;
46076: LD_ADDR_VAR 0 35
46080: PUSH
46081: LD_VAR 0 4
46085: PUSH
46086: LD_INT 1
46088: ARRAY
46089: PPUSH
46090: CALL_OW 255
46094: ST_TO_ADDR
// if flags then
46095: LD_VAR 0 6
46099: IFFALSE 46243
// begin f_ignore_area := flags [ 1 ] ;
46101: LD_ADDR_VAR 0 17
46105: PUSH
46106: LD_VAR 0 6
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46115: LD_ADDR_VAR 0 18
46119: PUSH
46120: LD_VAR 0 6
46124: PUSH
46125: LD_INT 2
46127: ARRAY
46128: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46129: LD_ADDR_VAR 0 19
46133: PUSH
46134: LD_VAR 0 6
46138: PUSH
46139: LD_INT 3
46141: ARRAY
46142: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46143: LD_ADDR_VAR 0 20
46147: PUSH
46148: LD_VAR 0 6
46152: PUSH
46153: LD_INT 4
46155: ARRAY
46156: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46157: LD_ADDR_VAR 0 21
46161: PUSH
46162: LD_VAR 0 6
46166: PUSH
46167: LD_INT 5
46169: ARRAY
46170: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46171: LD_ADDR_VAR 0 22
46175: PUSH
46176: LD_VAR 0 6
46180: PUSH
46181: LD_INT 6
46183: ARRAY
46184: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46185: LD_ADDR_VAR 0 23
46189: PUSH
46190: LD_VAR 0 6
46194: PUSH
46195: LD_INT 7
46197: ARRAY
46198: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46199: LD_ADDR_VAR 0 24
46203: PUSH
46204: LD_VAR 0 6
46208: PUSH
46209: LD_INT 8
46211: ARRAY
46212: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46213: LD_ADDR_VAR 0 25
46217: PUSH
46218: LD_VAR 0 6
46222: PUSH
46223: LD_INT 9
46225: ARRAY
46226: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46227: LD_ADDR_VAR 0 26
46231: PUSH
46232: LD_VAR 0 6
46236: PUSH
46237: LD_INT 10
46239: ARRAY
46240: ST_TO_ADDR
// end else
46241: GO 46323
// begin f_ignore_area := false ;
46243: LD_ADDR_VAR 0 17
46247: PUSH
46248: LD_INT 0
46250: ST_TO_ADDR
// f_capture := false ;
46251: LD_ADDR_VAR 0 18
46255: PUSH
46256: LD_INT 0
46258: ST_TO_ADDR
// f_ignore_civ := false ;
46259: LD_ADDR_VAR 0 19
46263: PUSH
46264: LD_INT 0
46266: ST_TO_ADDR
// f_murder := false ;
46267: LD_ADDR_VAR 0 20
46271: PUSH
46272: LD_INT 0
46274: ST_TO_ADDR
// f_mines := false ;
46275: LD_ADDR_VAR 0 21
46279: PUSH
46280: LD_INT 0
46282: ST_TO_ADDR
// f_repair := false ;
46283: LD_ADDR_VAR 0 22
46287: PUSH
46288: LD_INT 0
46290: ST_TO_ADDR
// f_heal := false ;
46291: LD_ADDR_VAR 0 23
46295: PUSH
46296: LD_INT 0
46298: ST_TO_ADDR
// f_spacetime := false ;
46299: LD_ADDR_VAR 0 24
46303: PUSH
46304: LD_INT 0
46306: ST_TO_ADDR
// f_attack_depot := false ;
46307: LD_ADDR_VAR 0 25
46311: PUSH
46312: LD_INT 0
46314: ST_TO_ADDR
// f_crawl := false ;
46315: LD_ADDR_VAR 0 26
46319: PUSH
46320: LD_INT 0
46322: ST_TO_ADDR
// end ; if f_heal then
46323: LD_VAR 0 23
46327: IFFALSE 46354
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
46329: LD_ADDR_VAR 0 31
46333: PUSH
46334: LD_VAR 0 4
46338: PPUSH
46339: LD_INT 25
46341: PUSH
46342: LD_INT 4
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PPUSH
46349: CALL_OW 72
46353: ST_TO_ADDR
// if f_repair then
46354: LD_VAR 0 22
46358: IFFALSE 46385
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
46360: LD_ADDR_VAR 0 33
46364: PUSH
46365: LD_VAR 0 4
46369: PPUSH
46370: LD_INT 25
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PPUSH
46380: CALL_OW 72
46384: ST_TO_ADDR
// units_path := [ ] ;
46385: LD_ADDR_VAR 0 16
46389: PUSH
46390: EMPTY
46391: ST_TO_ADDR
// for i = 1 to group do
46392: LD_ADDR_VAR 0 7
46396: PUSH
46397: DOUBLE
46398: LD_INT 1
46400: DEC
46401: ST_TO_ADDR
46402: LD_VAR 0 4
46406: PUSH
46407: FOR_TO
46408: IFFALSE 46437
// units_path := Replace ( units_path , i , path ) ;
46410: LD_ADDR_VAR 0 16
46414: PUSH
46415: LD_VAR 0 16
46419: PPUSH
46420: LD_VAR 0 7
46424: PPUSH
46425: LD_VAR 0 5
46429: PPUSH
46430: CALL_OW 1
46434: ST_TO_ADDR
46435: GO 46407
46437: POP
46438: POP
// repeat for i = group downto 1 do
46439: LD_ADDR_VAR 0 7
46443: PUSH
46444: DOUBLE
46445: LD_VAR 0 4
46449: INC
46450: ST_TO_ADDR
46451: LD_INT 1
46453: PUSH
46454: FOR_DOWNTO
46455: IFFALSE 50551
// begin wait ( 5 ) ;
46457: LD_INT 5
46459: PPUSH
46460: CALL_OW 67
// tmp := [ ] ;
46464: LD_ADDR_VAR 0 14
46468: PUSH
46469: EMPTY
46470: ST_TO_ADDR
// attacking := false ;
46471: LD_ADDR_VAR 0 29
46475: PUSH
46476: LD_INT 0
46478: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46479: LD_VAR 0 4
46483: PUSH
46484: LD_VAR 0 7
46488: ARRAY
46489: PPUSH
46490: CALL_OW 301
46494: PUSH
46495: LD_VAR 0 4
46499: PUSH
46500: LD_VAR 0 7
46504: ARRAY
46505: NOT
46506: OR
46507: IFFALSE 46616
// begin if GetType ( group [ i ] ) = unit_human then
46509: LD_VAR 0 4
46513: PUSH
46514: LD_VAR 0 7
46518: ARRAY
46519: PPUSH
46520: CALL_OW 247
46524: PUSH
46525: LD_INT 1
46527: EQUAL
46528: IFFALSE 46574
// begin to_heal := to_heal diff group [ i ] ;
46530: LD_ADDR_VAR 0 30
46534: PUSH
46535: LD_VAR 0 30
46539: PUSH
46540: LD_VAR 0 4
46544: PUSH
46545: LD_VAR 0 7
46549: ARRAY
46550: DIFF
46551: ST_TO_ADDR
// healers := healers diff group [ i ] ;
46552: LD_ADDR_VAR 0 31
46556: PUSH
46557: LD_VAR 0 31
46561: PUSH
46562: LD_VAR 0 4
46566: PUSH
46567: LD_VAR 0 7
46571: ARRAY
46572: DIFF
46573: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
46574: LD_ADDR_VAR 0 4
46578: PUSH
46579: LD_VAR 0 4
46583: PPUSH
46584: LD_VAR 0 7
46588: PPUSH
46589: CALL_OW 3
46593: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46594: LD_ADDR_VAR 0 16
46598: PUSH
46599: LD_VAR 0 16
46603: PPUSH
46604: LD_VAR 0 7
46608: PPUSH
46609: CALL_OW 3
46613: ST_TO_ADDR
// continue ;
46614: GO 46454
// end ; if f_repair then
46616: LD_VAR 0 22
46620: IFFALSE 47109
// begin if GetType ( group [ i ] ) = unit_vehicle then
46622: LD_VAR 0 4
46626: PUSH
46627: LD_VAR 0 7
46631: ARRAY
46632: PPUSH
46633: CALL_OW 247
46637: PUSH
46638: LD_INT 2
46640: EQUAL
46641: IFFALSE 46831
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
46643: LD_VAR 0 4
46647: PUSH
46648: LD_VAR 0 7
46652: ARRAY
46653: PPUSH
46654: CALL_OW 256
46658: PUSH
46659: LD_INT 700
46661: LESS
46662: PUSH
46663: LD_VAR 0 4
46667: PUSH
46668: LD_VAR 0 7
46672: ARRAY
46673: PUSH
46674: LD_VAR 0 32
46678: IN
46679: NOT
46680: AND
46681: IFFALSE 46705
// to_repair := to_repair union group [ i ] ;
46683: LD_ADDR_VAR 0 32
46687: PUSH
46688: LD_VAR 0 32
46692: PUSH
46693: LD_VAR 0 4
46697: PUSH
46698: LD_VAR 0 7
46702: ARRAY
46703: UNION
46704: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
46705: LD_VAR 0 4
46709: PUSH
46710: LD_VAR 0 7
46714: ARRAY
46715: PPUSH
46716: CALL_OW 256
46720: PUSH
46721: LD_INT 1000
46723: EQUAL
46724: PUSH
46725: LD_VAR 0 4
46729: PUSH
46730: LD_VAR 0 7
46734: ARRAY
46735: PUSH
46736: LD_VAR 0 32
46740: IN
46741: AND
46742: IFFALSE 46766
// to_repair := to_repair diff group [ i ] ;
46744: LD_ADDR_VAR 0 32
46748: PUSH
46749: LD_VAR 0 32
46753: PUSH
46754: LD_VAR 0 4
46758: PUSH
46759: LD_VAR 0 7
46763: ARRAY
46764: DIFF
46765: ST_TO_ADDR
// if group [ i ] in to_repair then
46766: LD_VAR 0 4
46770: PUSH
46771: LD_VAR 0 7
46775: ARRAY
46776: PUSH
46777: LD_VAR 0 32
46781: IN
46782: IFFALSE 46829
// begin if not IsInArea ( group [ i ] , f_repair ) then
46784: LD_VAR 0 4
46788: PUSH
46789: LD_VAR 0 7
46793: ARRAY
46794: PPUSH
46795: LD_VAR 0 22
46799: PPUSH
46800: CALL_OW 308
46804: NOT
46805: IFFALSE 46827
// ComMoveToArea ( group [ i ] , f_repair ) ;
46807: LD_VAR 0 4
46811: PUSH
46812: LD_VAR 0 7
46816: ARRAY
46817: PPUSH
46818: LD_VAR 0 22
46822: PPUSH
46823: CALL_OW 113
// continue ;
46827: GO 46454
// end ; end else
46829: GO 47109
// if group [ i ] in repairs then
46831: LD_VAR 0 4
46835: PUSH
46836: LD_VAR 0 7
46840: ARRAY
46841: PUSH
46842: LD_VAR 0 33
46846: IN
46847: IFFALSE 47109
// begin if IsInUnit ( group [ i ] ) then
46849: LD_VAR 0 4
46853: PUSH
46854: LD_VAR 0 7
46858: ARRAY
46859: PPUSH
46860: CALL_OW 310
46864: IFFALSE 46932
// begin z := IsInUnit ( group [ i ] ) ;
46866: LD_ADDR_VAR 0 13
46870: PUSH
46871: LD_VAR 0 4
46875: PUSH
46876: LD_VAR 0 7
46880: ARRAY
46881: PPUSH
46882: CALL_OW 310
46886: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46887: LD_VAR 0 13
46891: PUSH
46892: LD_VAR 0 32
46896: IN
46897: PUSH
46898: LD_VAR 0 13
46902: PPUSH
46903: LD_VAR 0 22
46907: PPUSH
46908: CALL_OW 308
46912: AND
46913: IFFALSE 46930
// ComExitVehicle ( group [ i ] ) ;
46915: LD_VAR 0 4
46919: PUSH
46920: LD_VAR 0 7
46924: ARRAY
46925: PPUSH
46926: CALL_OW 121
// end else
46930: GO 47109
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46932: LD_ADDR_VAR 0 13
46936: PUSH
46937: LD_VAR 0 4
46941: PPUSH
46942: LD_INT 95
46944: PUSH
46945: LD_VAR 0 22
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 58
46956: PUSH
46957: EMPTY
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PPUSH
46964: CALL_OW 72
46968: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46969: LD_VAR 0 4
46973: PUSH
46974: LD_VAR 0 7
46978: ARRAY
46979: PPUSH
46980: CALL_OW 314
46984: NOT
46985: IFFALSE 47107
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46987: LD_ADDR_VAR 0 10
46991: PUSH
46992: LD_VAR 0 13
46996: PPUSH
46997: LD_VAR 0 4
47001: PUSH
47002: LD_VAR 0 7
47006: ARRAY
47007: PPUSH
47008: CALL_OW 74
47012: ST_TO_ADDR
// if not x then
47013: LD_VAR 0 10
47017: NOT
47018: IFFALSE 47022
// continue ;
47020: GO 46454
// if GetLives ( x ) < 1000 then
47022: LD_VAR 0 10
47026: PPUSH
47027: CALL_OW 256
47031: PUSH
47032: LD_INT 1000
47034: LESS
47035: IFFALSE 47059
// ComRepairVehicle ( group [ i ] , x ) else
47037: LD_VAR 0 4
47041: PUSH
47042: LD_VAR 0 7
47046: ARRAY
47047: PPUSH
47048: LD_VAR 0 10
47052: PPUSH
47053: CALL_OW 129
47057: GO 47107
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47059: LD_VAR 0 23
47063: PUSH
47064: LD_VAR 0 4
47068: PUSH
47069: LD_VAR 0 7
47073: ARRAY
47074: PPUSH
47075: CALL_OW 256
47079: PUSH
47080: LD_INT 1000
47082: LESS
47083: AND
47084: NOT
47085: IFFALSE 47107
// ComEnterUnit ( group [ i ] , x ) ;
47087: LD_VAR 0 4
47091: PUSH
47092: LD_VAR 0 7
47096: ARRAY
47097: PPUSH
47098: LD_VAR 0 10
47102: PPUSH
47103: CALL_OW 120
// end ; continue ;
47107: GO 46454
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47109: LD_VAR 0 23
47113: PUSH
47114: LD_VAR 0 4
47118: PUSH
47119: LD_VAR 0 7
47123: ARRAY
47124: PPUSH
47125: CALL_OW 247
47129: PUSH
47130: LD_INT 1
47132: EQUAL
47133: AND
47134: IFFALSE 47612
// begin if group [ i ] in healers then
47136: LD_VAR 0 4
47140: PUSH
47141: LD_VAR 0 7
47145: ARRAY
47146: PUSH
47147: LD_VAR 0 31
47151: IN
47152: IFFALSE 47425
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47154: LD_VAR 0 4
47158: PUSH
47159: LD_VAR 0 7
47163: ARRAY
47164: PPUSH
47165: LD_VAR 0 23
47169: PPUSH
47170: CALL_OW 308
47174: NOT
47175: PUSH
47176: LD_VAR 0 4
47180: PUSH
47181: LD_VAR 0 7
47185: ARRAY
47186: PPUSH
47187: CALL_OW 314
47191: NOT
47192: AND
47193: IFFALSE 47217
// ComMoveToArea ( group [ i ] , f_heal ) else
47195: LD_VAR 0 4
47199: PUSH
47200: LD_VAR 0 7
47204: ARRAY
47205: PPUSH
47206: LD_VAR 0 23
47210: PPUSH
47211: CALL_OW 113
47215: GO 47423
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47217: LD_VAR 0 4
47221: PUSH
47222: LD_VAR 0 7
47226: ARRAY
47227: PPUSH
47228: CALL 45835 0 1
47232: PPUSH
47233: CALL_OW 256
47237: PUSH
47238: LD_INT 1000
47240: EQUAL
47241: IFFALSE 47260
// ComStop ( group [ i ] ) else
47243: LD_VAR 0 4
47247: PUSH
47248: LD_VAR 0 7
47252: ARRAY
47253: PPUSH
47254: CALL_OW 141
47258: GO 47423
// if not HasTask ( group [ i ] ) and to_heal then
47260: LD_VAR 0 4
47264: PUSH
47265: LD_VAR 0 7
47269: ARRAY
47270: PPUSH
47271: CALL_OW 314
47275: NOT
47276: PUSH
47277: LD_VAR 0 30
47281: AND
47282: IFFALSE 47423
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
47284: LD_ADDR_VAR 0 13
47288: PUSH
47289: LD_VAR 0 30
47293: PPUSH
47294: LD_INT 3
47296: PUSH
47297: LD_INT 54
47299: PUSH
47300: EMPTY
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PPUSH
47307: CALL_OW 72
47311: PPUSH
47312: LD_VAR 0 4
47316: PUSH
47317: LD_VAR 0 7
47321: ARRAY
47322: PPUSH
47323: CALL_OW 74
47327: ST_TO_ADDR
// if z then
47328: LD_VAR 0 13
47332: IFFALSE 47423
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
47334: LD_INT 91
47336: PUSH
47337: LD_VAR 0 13
47341: PUSH
47342: LD_INT 10
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 81
47352: PUSH
47353: LD_VAR 0 13
47357: PPUSH
47358: CALL_OW 255
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PPUSH
47371: CALL_OW 69
47375: PUSH
47376: LD_INT 0
47378: EQUAL
47379: IFFALSE 47403
// ComHeal ( group [ i ] , z ) else
47381: LD_VAR 0 4
47385: PUSH
47386: LD_VAR 0 7
47390: ARRAY
47391: PPUSH
47392: LD_VAR 0 13
47396: PPUSH
47397: CALL_OW 128
47401: GO 47423
// ComMoveToArea ( group [ i ] , f_heal ) ;
47403: LD_VAR 0 4
47407: PUSH
47408: LD_VAR 0 7
47412: ARRAY
47413: PPUSH
47414: LD_VAR 0 23
47418: PPUSH
47419: CALL_OW 113
// end ; continue ;
47423: GO 46454
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
47425: LD_VAR 0 4
47429: PUSH
47430: LD_VAR 0 7
47434: ARRAY
47435: PPUSH
47436: CALL_OW 256
47440: PUSH
47441: LD_INT 700
47443: LESS
47444: PUSH
47445: LD_VAR 0 4
47449: PUSH
47450: LD_VAR 0 7
47454: ARRAY
47455: PUSH
47456: LD_VAR 0 30
47460: IN
47461: NOT
47462: AND
47463: IFFALSE 47487
// to_heal := to_heal union group [ i ] ;
47465: LD_ADDR_VAR 0 30
47469: PUSH
47470: LD_VAR 0 30
47474: PUSH
47475: LD_VAR 0 4
47479: PUSH
47480: LD_VAR 0 7
47484: ARRAY
47485: UNION
47486: ST_TO_ADDR
// if group [ i ] in to_heal then
47487: LD_VAR 0 4
47491: PUSH
47492: LD_VAR 0 7
47496: ARRAY
47497: PUSH
47498: LD_VAR 0 30
47502: IN
47503: IFFALSE 47612
// begin if GetLives ( group [ i ] ) = 1000 then
47505: LD_VAR 0 4
47509: PUSH
47510: LD_VAR 0 7
47514: ARRAY
47515: PPUSH
47516: CALL_OW 256
47520: PUSH
47521: LD_INT 1000
47523: EQUAL
47524: IFFALSE 47550
// to_heal := to_heal diff group [ i ] else
47526: LD_ADDR_VAR 0 30
47530: PUSH
47531: LD_VAR 0 30
47535: PUSH
47536: LD_VAR 0 4
47540: PUSH
47541: LD_VAR 0 7
47545: ARRAY
47546: DIFF
47547: ST_TO_ADDR
47548: GO 47612
// begin if not IsInArea ( group [ i ] , to_heal ) then
47550: LD_VAR 0 4
47554: PUSH
47555: LD_VAR 0 7
47559: ARRAY
47560: PPUSH
47561: LD_VAR 0 30
47565: PPUSH
47566: CALL_OW 308
47570: NOT
47571: IFFALSE 47595
// ComMoveToArea ( group [ i ] , f_heal ) else
47573: LD_VAR 0 4
47577: PUSH
47578: LD_VAR 0 7
47582: ARRAY
47583: PPUSH
47584: LD_VAR 0 23
47588: PPUSH
47589: CALL_OW 113
47593: GO 47610
// ComHold ( group [ i ] ) ;
47595: LD_VAR 0 4
47599: PUSH
47600: LD_VAR 0 7
47604: ARRAY
47605: PPUSH
47606: CALL_OW 140
// continue ;
47610: GO 46454
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47612: LD_VAR 0 4
47616: PUSH
47617: LD_VAR 0 7
47621: ARRAY
47622: PPUSH
47623: LD_INT 10
47625: PPUSH
47626: CALL 44232 0 2
47630: NOT
47631: PUSH
47632: LD_VAR 0 16
47636: PUSH
47637: LD_VAR 0 7
47641: ARRAY
47642: PUSH
47643: EMPTY
47644: EQUAL
47645: NOT
47646: AND
47647: IFFALSE 47913
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47649: LD_VAR 0 4
47653: PUSH
47654: LD_VAR 0 7
47658: ARRAY
47659: PPUSH
47660: CALL_OW 262
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: IN
47675: IFFALSE 47716
// if GetFuel ( group [ i ] ) < 10 then
47677: LD_VAR 0 4
47681: PUSH
47682: LD_VAR 0 7
47686: ARRAY
47687: PPUSH
47688: CALL_OW 261
47692: PUSH
47693: LD_INT 10
47695: LESS
47696: IFFALSE 47716
// SetFuel ( group [ i ] , 12 ) ;
47698: LD_VAR 0 4
47702: PUSH
47703: LD_VAR 0 7
47707: ARRAY
47708: PPUSH
47709: LD_INT 12
47711: PPUSH
47712: CALL_OW 240
// if units_path [ i ] then
47716: LD_VAR 0 16
47720: PUSH
47721: LD_VAR 0 7
47725: ARRAY
47726: IFFALSE 47911
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47728: LD_VAR 0 4
47732: PUSH
47733: LD_VAR 0 7
47737: ARRAY
47738: PPUSH
47739: LD_VAR 0 16
47743: PUSH
47744: LD_VAR 0 7
47748: ARRAY
47749: PUSH
47750: LD_INT 1
47752: ARRAY
47753: PUSH
47754: LD_INT 1
47756: ARRAY
47757: PPUSH
47758: LD_VAR 0 16
47762: PUSH
47763: LD_VAR 0 7
47767: ARRAY
47768: PUSH
47769: LD_INT 1
47771: ARRAY
47772: PUSH
47773: LD_INT 2
47775: ARRAY
47776: PPUSH
47777: CALL_OW 297
47781: PUSH
47782: LD_INT 6
47784: GREATER
47785: IFFALSE 47860
// begin if not HasTask ( group [ i ] ) then
47787: LD_VAR 0 4
47791: PUSH
47792: LD_VAR 0 7
47796: ARRAY
47797: PPUSH
47798: CALL_OW 314
47802: NOT
47803: IFFALSE 47858
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47805: LD_VAR 0 4
47809: PUSH
47810: LD_VAR 0 7
47814: ARRAY
47815: PPUSH
47816: LD_VAR 0 16
47820: PUSH
47821: LD_VAR 0 7
47825: ARRAY
47826: PUSH
47827: LD_INT 1
47829: ARRAY
47830: PUSH
47831: LD_INT 1
47833: ARRAY
47834: PPUSH
47835: LD_VAR 0 16
47839: PUSH
47840: LD_VAR 0 7
47844: ARRAY
47845: PUSH
47846: LD_INT 1
47848: ARRAY
47849: PUSH
47850: LD_INT 2
47852: ARRAY
47853: PPUSH
47854: CALL_OW 114
// end else
47858: GO 47911
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47860: LD_ADDR_VAR 0 15
47864: PUSH
47865: LD_VAR 0 16
47869: PUSH
47870: LD_VAR 0 7
47874: ARRAY
47875: PPUSH
47876: LD_INT 1
47878: PPUSH
47879: CALL_OW 3
47883: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47884: LD_ADDR_VAR 0 16
47888: PUSH
47889: LD_VAR 0 16
47893: PPUSH
47894: LD_VAR 0 7
47898: PPUSH
47899: LD_VAR 0 15
47903: PPUSH
47904: CALL_OW 1
47908: ST_TO_ADDR
// continue ;
47909: GO 46454
// end ; end ; end else
47911: GO 50549
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47913: LD_ADDR_VAR 0 14
47917: PUSH
47918: LD_INT 81
47920: PUSH
47921: LD_VAR 0 4
47925: PUSH
47926: LD_VAR 0 7
47930: ARRAY
47931: PPUSH
47932: CALL_OW 255
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PPUSH
47941: CALL_OW 69
47945: ST_TO_ADDR
// if not tmp then
47946: LD_VAR 0 14
47950: NOT
47951: IFFALSE 47955
// continue ;
47953: GO 46454
// if f_ignore_area then
47955: LD_VAR 0 17
47959: IFFALSE 48047
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47961: LD_ADDR_VAR 0 15
47965: PUSH
47966: LD_VAR 0 14
47970: PPUSH
47971: LD_INT 3
47973: PUSH
47974: LD_INT 92
47976: PUSH
47977: LD_VAR 0 17
47981: PUSH
47982: LD_INT 1
47984: ARRAY
47985: PUSH
47986: LD_VAR 0 17
47990: PUSH
47991: LD_INT 2
47993: ARRAY
47994: PUSH
47995: LD_VAR 0 17
47999: PUSH
48000: LD_INT 3
48002: ARRAY
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PPUSH
48014: CALL_OW 72
48018: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48019: LD_VAR 0 14
48023: PUSH
48024: LD_VAR 0 15
48028: DIFF
48029: IFFALSE 48047
// tmp := tmp diff tmp2 ;
48031: LD_ADDR_VAR 0 14
48035: PUSH
48036: LD_VAR 0 14
48040: PUSH
48041: LD_VAR 0 15
48045: DIFF
48046: ST_TO_ADDR
// end ; if not f_murder then
48047: LD_VAR 0 20
48051: NOT
48052: IFFALSE 48110
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48054: LD_ADDR_VAR 0 15
48058: PUSH
48059: LD_VAR 0 14
48063: PPUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 50
48069: PUSH
48070: EMPTY
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PPUSH
48077: CALL_OW 72
48081: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48082: LD_VAR 0 14
48086: PUSH
48087: LD_VAR 0 15
48091: DIFF
48092: IFFALSE 48110
// tmp := tmp diff tmp2 ;
48094: LD_ADDR_VAR 0 14
48098: PUSH
48099: LD_VAR 0 14
48103: PUSH
48104: LD_VAR 0 15
48108: DIFF
48109: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48110: LD_ADDR_VAR 0 14
48114: PUSH
48115: LD_VAR 0 4
48119: PUSH
48120: LD_VAR 0 7
48124: ARRAY
48125: PPUSH
48126: LD_VAR 0 14
48130: PPUSH
48131: LD_INT 1
48133: PPUSH
48134: LD_INT 1
48136: PPUSH
48137: CALL 17875 0 4
48141: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48142: LD_VAR 0 4
48146: PUSH
48147: LD_VAR 0 7
48151: ARRAY
48152: PPUSH
48153: CALL_OW 257
48157: PUSH
48158: LD_INT 1
48160: EQUAL
48161: IFFALSE 48609
// begin if WantPlant ( group [ i ] ) then
48163: LD_VAR 0 4
48167: PUSH
48168: LD_VAR 0 7
48172: ARRAY
48173: PPUSH
48174: CALL 17376 0 1
48178: IFFALSE 48182
// continue ;
48180: GO 46454
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48182: LD_VAR 0 18
48186: PUSH
48187: LD_VAR 0 4
48191: PUSH
48192: LD_VAR 0 7
48196: ARRAY
48197: PPUSH
48198: CALL_OW 310
48202: NOT
48203: AND
48204: PUSH
48205: LD_VAR 0 14
48209: PUSH
48210: LD_INT 1
48212: ARRAY
48213: PUSH
48214: LD_VAR 0 14
48218: PPUSH
48219: LD_INT 21
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 58
48231: PUSH
48232: EMPTY
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PPUSH
48239: CALL_OW 72
48243: IN
48244: AND
48245: IFFALSE 48281
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48247: LD_VAR 0 4
48251: PUSH
48252: LD_VAR 0 7
48256: ARRAY
48257: PPUSH
48258: LD_VAR 0 14
48262: PUSH
48263: LD_INT 1
48265: ARRAY
48266: PPUSH
48267: CALL_OW 120
// attacking := true ;
48271: LD_ADDR_VAR 0 29
48275: PUSH
48276: LD_INT 1
48278: ST_TO_ADDR
// continue ;
48279: GO 46454
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48281: LD_VAR 0 26
48285: PUSH
48286: LD_VAR 0 4
48290: PUSH
48291: LD_VAR 0 7
48295: ARRAY
48296: PPUSH
48297: CALL_OW 257
48301: PUSH
48302: LD_INT 1
48304: EQUAL
48305: AND
48306: PUSH
48307: LD_VAR 0 4
48311: PUSH
48312: LD_VAR 0 7
48316: ARRAY
48317: PPUSH
48318: CALL_OW 256
48322: PUSH
48323: LD_INT 800
48325: LESS
48326: AND
48327: PUSH
48328: LD_VAR 0 4
48332: PUSH
48333: LD_VAR 0 7
48337: ARRAY
48338: PPUSH
48339: CALL_OW 318
48343: NOT
48344: AND
48345: IFFALSE 48362
// ComCrawl ( group [ i ] ) ;
48347: LD_VAR 0 4
48351: PUSH
48352: LD_VAR 0 7
48356: ARRAY
48357: PPUSH
48358: CALL_OW 137
// if f_mines then
48362: LD_VAR 0 21
48366: IFFALSE 48609
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48368: LD_VAR 0 14
48372: PUSH
48373: LD_INT 1
48375: ARRAY
48376: PPUSH
48377: CALL_OW 247
48381: PUSH
48382: LD_INT 3
48384: EQUAL
48385: PUSH
48386: LD_VAR 0 14
48390: PUSH
48391: LD_INT 1
48393: ARRAY
48394: PUSH
48395: LD_VAR 0 27
48399: IN
48400: NOT
48401: AND
48402: IFFALSE 48609
// begin x := GetX ( tmp [ 1 ] ) ;
48404: LD_ADDR_VAR 0 10
48408: PUSH
48409: LD_VAR 0 14
48413: PUSH
48414: LD_INT 1
48416: ARRAY
48417: PPUSH
48418: CALL_OW 250
48422: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48423: LD_ADDR_VAR 0 11
48427: PUSH
48428: LD_VAR 0 14
48432: PUSH
48433: LD_INT 1
48435: ARRAY
48436: PPUSH
48437: CALL_OW 251
48441: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48442: LD_ADDR_VAR 0 12
48446: PUSH
48447: LD_VAR 0 4
48451: PUSH
48452: LD_VAR 0 7
48456: ARRAY
48457: PPUSH
48458: CALL 44317 0 1
48462: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48463: LD_VAR 0 4
48467: PUSH
48468: LD_VAR 0 7
48472: ARRAY
48473: PPUSH
48474: LD_VAR 0 10
48478: PPUSH
48479: LD_VAR 0 11
48483: PPUSH
48484: LD_VAR 0 14
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PPUSH
48493: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
48497: LD_VAR 0 4
48501: PUSH
48502: LD_VAR 0 7
48506: ARRAY
48507: PPUSH
48508: LD_VAR 0 10
48512: PPUSH
48513: LD_VAR 0 12
48517: PPUSH
48518: LD_INT 7
48520: PPUSH
48521: CALL_OW 272
48525: PPUSH
48526: LD_VAR 0 11
48530: PPUSH
48531: LD_VAR 0 12
48535: PPUSH
48536: LD_INT 7
48538: PPUSH
48539: CALL_OW 273
48543: PPUSH
48544: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
48548: LD_VAR 0 4
48552: PUSH
48553: LD_VAR 0 7
48557: ARRAY
48558: PPUSH
48559: LD_INT 71
48561: PPUSH
48562: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48566: LD_ADDR_VAR 0 27
48570: PUSH
48571: LD_VAR 0 27
48575: PPUSH
48576: LD_VAR 0 27
48580: PUSH
48581: LD_INT 1
48583: PLUS
48584: PPUSH
48585: LD_VAR 0 14
48589: PUSH
48590: LD_INT 1
48592: ARRAY
48593: PPUSH
48594: CALL_OW 1
48598: ST_TO_ADDR
// attacking := true ;
48599: LD_ADDR_VAR 0 29
48603: PUSH
48604: LD_INT 1
48606: ST_TO_ADDR
// continue ;
48607: GO 46454
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48609: LD_VAR 0 4
48613: PUSH
48614: LD_VAR 0 7
48618: ARRAY
48619: PPUSH
48620: CALL_OW 257
48624: PUSH
48625: LD_INT 17
48627: EQUAL
48628: PUSH
48629: LD_VAR 0 4
48633: PUSH
48634: LD_VAR 0 7
48638: ARRAY
48639: PPUSH
48640: CALL_OW 110
48644: PUSH
48645: LD_INT 71
48647: EQUAL
48648: NOT
48649: AND
48650: IFFALSE 48796
// begin attacking := false ;
48652: LD_ADDR_VAR 0 29
48656: PUSH
48657: LD_INT 0
48659: ST_TO_ADDR
// k := 5 ;
48660: LD_ADDR_VAR 0 9
48664: PUSH
48665: LD_INT 5
48667: ST_TO_ADDR
// if tmp < k then
48668: LD_VAR 0 14
48672: PUSH
48673: LD_VAR 0 9
48677: LESS
48678: IFFALSE 48690
// k := tmp ;
48680: LD_ADDR_VAR 0 9
48684: PUSH
48685: LD_VAR 0 14
48689: ST_TO_ADDR
// for j = 1 to k do
48690: LD_ADDR_VAR 0 8
48694: PUSH
48695: DOUBLE
48696: LD_INT 1
48698: DEC
48699: ST_TO_ADDR
48700: LD_VAR 0 9
48704: PUSH
48705: FOR_TO
48706: IFFALSE 48794
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48708: LD_VAR 0 14
48712: PUSH
48713: LD_VAR 0 8
48717: ARRAY
48718: PUSH
48719: LD_VAR 0 14
48723: PPUSH
48724: LD_INT 58
48726: PUSH
48727: EMPTY
48728: LIST
48729: PPUSH
48730: CALL_OW 72
48734: IN
48735: NOT
48736: IFFALSE 48792
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48738: LD_VAR 0 4
48742: PUSH
48743: LD_VAR 0 7
48747: ARRAY
48748: PPUSH
48749: LD_VAR 0 14
48753: PUSH
48754: LD_VAR 0 8
48758: ARRAY
48759: PPUSH
48760: CALL_OW 115
// attacking := true ;
48764: LD_ADDR_VAR 0 29
48768: PUSH
48769: LD_INT 1
48771: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48772: LD_VAR 0 4
48776: PUSH
48777: LD_VAR 0 7
48781: ARRAY
48782: PPUSH
48783: LD_INT 71
48785: PPUSH
48786: CALL_OW 109
// continue ;
48790: GO 48705
// end ; end ;
48792: GO 48705
48794: POP
48795: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48796: LD_VAR 0 4
48800: PUSH
48801: LD_VAR 0 7
48805: ARRAY
48806: PPUSH
48807: CALL_OW 257
48811: PUSH
48812: LD_INT 8
48814: EQUAL
48815: PUSH
48816: LD_VAR 0 4
48820: PUSH
48821: LD_VAR 0 7
48825: ARRAY
48826: PPUSH
48827: CALL_OW 264
48831: PUSH
48832: LD_INT 28
48834: PUSH
48835: LD_INT 45
48837: PUSH
48838: LD_INT 7
48840: PUSH
48841: LD_INT 47
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: IN
48850: OR
48851: IFFALSE 49081
// begin attacking := false ;
48853: LD_ADDR_VAR 0 29
48857: PUSH
48858: LD_INT 0
48860: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48861: LD_VAR 0 14
48865: PUSH
48866: LD_INT 1
48868: ARRAY
48869: PPUSH
48870: CALL_OW 266
48874: PUSH
48875: LD_INT 32
48877: PUSH
48878: LD_INT 31
48880: PUSH
48881: LD_INT 33
48883: PUSH
48884: LD_INT 4
48886: PUSH
48887: LD_INT 5
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: IN
48897: IFFALSE 49081
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48899: LD_ADDR_VAR 0 9
48903: PUSH
48904: LD_VAR 0 14
48908: PUSH
48909: LD_INT 1
48911: ARRAY
48912: PPUSH
48913: CALL_OW 266
48917: PPUSH
48918: LD_VAR 0 14
48922: PUSH
48923: LD_INT 1
48925: ARRAY
48926: PPUSH
48927: CALL_OW 250
48931: PPUSH
48932: LD_VAR 0 14
48936: PUSH
48937: LD_INT 1
48939: ARRAY
48940: PPUSH
48941: CALL_OW 251
48945: PPUSH
48946: LD_VAR 0 14
48950: PUSH
48951: LD_INT 1
48953: ARRAY
48954: PPUSH
48955: CALL_OW 254
48959: PPUSH
48960: LD_VAR 0 14
48964: PUSH
48965: LD_INT 1
48967: ARRAY
48968: PPUSH
48969: CALL_OW 248
48973: PPUSH
48974: LD_INT 0
48976: PPUSH
48977: CALL 25687 0 6
48981: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48982: LD_ADDR_VAR 0 8
48986: PUSH
48987: LD_VAR 0 4
48991: PUSH
48992: LD_VAR 0 7
48996: ARRAY
48997: PPUSH
48998: LD_VAR 0 9
49002: PPUSH
49003: CALL 44380 0 2
49007: ST_TO_ADDR
// if j then
49008: LD_VAR 0 8
49012: IFFALSE 49081
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49014: LD_VAR 0 8
49018: PUSH
49019: LD_INT 1
49021: ARRAY
49022: PPUSH
49023: LD_VAR 0 8
49027: PUSH
49028: LD_INT 2
49030: ARRAY
49031: PPUSH
49032: CALL_OW 488
49036: IFFALSE 49081
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49038: LD_VAR 0 4
49042: PUSH
49043: LD_VAR 0 7
49047: ARRAY
49048: PPUSH
49049: LD_VAR 0 8
49053: PUSH
49054: LD_INT 1
49056: ARRAY
49057: PPUSH
49058: LD_VAR 0 8
49062: PUSH
49063: LD_INT 2
49065: ARRAY
49066: PPUSH
49067: CALL_OW 116
// attacking := true ;
49071: LD_ADDR_VAR 0 29
49075: PUSH
49076: LD_INT 1
49078: ST_TO_ADDR
// continue ;
49079: GO 46454
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49081: LD_VAR 0 4
49085: PUSH
49086: LD_VAR 0 7
49090: ARRAY
49091: PPUSH
49092: CALL_OW 265
49096: PUSH
49097: LD_INT 11
49099: EQUAL
49100: IFFALSE 49378
// begin k := 10 ;
49102: LD_ADDR_VAR 0 9
49106: PUSH
49107: LD_INT 10
49109: ST_TO_ADDR
// x := 0 ;
49110: LD_ADDR_VAR 0 10
49114: PUSH
49115: LD_INT 0
49117: ST_TO_ADDR
// if tmp < k then
49118: LD_VAR 0 14
49122: PUSH
49123: LD_VAR 0 9
49127: LESS
49128: IFFALSE 49140
// k := tmp ;
49130: LD_ADDR_VAR 0 9
49134: PUSH
49135: LD_VAR 0 14
49139: ST_TO_ADDR
// for j = k downto 1 do
49140: LD_ADDR_VAR 0 8
49144: PUSH
49145: DOUBLE
49146: LD_VAR 0 9
49150: INC
49151: ST_TO_ADDR
49152: LD_INT 1
49154: PUSH
49155: FOR_DOWNTO
49156: IFFALSE 49231
// begin if GetType ( tmp [ j ] ) = unit_human then
49158: LD_VAR 0 14
49162: PUSH
49163: LD_VAR 0 8
49167: ARRAY
49168: PPUSH
49169: CALL_OW 247
49173: PUSH
49174: LD_INT 1
49176: EQUAL
49177: IFFALSE 49229
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49179: LD_VAR 0 4
49183: PUSH
49184: LD_VAR 0 7
49188: ARRAY
49189: PPUSH
49190: LD_VAR 0 14
49194: PUSH
49195: LD_VAR 0 8
49199: ARRAY
49200: PPUSH
49201: CALL 44651 0 2
// x := tmp [ j ] ;
49205: LD_ADDR_VAR 0 10
49209: PUSH
49210: LD_VAR 0 14
49214: PUSH
49215: LD_VAR 0 8
49219: ARRAY
49220: ST_TO_ADDR
// attacking := true ;
49221: LD_ADDR_VAR 0 29
49225: PUSH
49226: LD_INT 1
49228: ST_TO_ADDR
// end ; end ;
49229: GO 49155
49231: POP
49232: POP
// if not x then
49233: LD_VAR 0 10
49237: NOT
49238: IFFALSE 49378
// begin attacking := true ;
49240: LD_ADDR_VAR 0 29
49244: PUSH
49245: LD_INT 1
49247: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49248: LD_VAR 0 4
49252: PUSH
49253: LD_VAR 0 7
49257: ARRAY
49258: PPUSH
49259: CALL_OW 250
49263: PPUSH
49264: LD_VAR 0 4
49268: PUSH
49269: LD_VAR 0 7
49273: ARRAY
49274: PPUSH
49275: CALL_OW 251
49279: PPUSH
49280: CALL_OW 546
49284: PUSH
49285: LD_INT 2
49287: ARRAY
49288: PUSH
49289: LD_VAR 0 14
49293: PUSH
49294: LD_INT 1
49296: ARRAY
49297: PPUSH
49298: CALL_OW 250
49302: PPUSH
49303: LD_VAR 0 14
49307: PUSH
49308: LD_INT 1
49310: ARRAY
49311: PPUSH
49312: CALL_OW 251
49316: PPUSH
49317: CALL_OW 546
49321: PUSH
49322: LD_INT 2
49324: ARRAY
49325: EQUAL
49326: IFFALSE 49354
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49328: LD_VAR 0 4
49332: PUSH
49333: LD_VAR 0 7
49337: ARRAY
49338: PPUSH
49339: LD_VAR 0 14
49343: PUSH
49344: LD_INT 1
49346: ARRAY
49347: PPUSH
49348: CALL 44651 0 2
49352: GO 49378
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49354: LD_VAR 0 4
49358: PUSH
49359: LD_VAR 0 7
49363: ARRAY
49364: PPUSH
49365: LD_VAR 0 14
49369: PUSH
49370: LD_INT 1
49372: ARRAY
49373: PPUSH
49374: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49378: LD_VAR 0 4
49382: PUSH
49383: LD_VAR 0 7
49387: ARRAY
49388: PPUSH
49389: CALL_OW 264
49393: PUSH
49394: LD_INT 29
49396: EQUAL
49397: IFFALSE 49763
// begin if WantsToAttack ( group [ i ] ) in bombed then
49399: LD_VAR 0 4
49403: PUSH
49404: LD_VAR 0 7
49408: ARRAY
49409: PPUSH
49410: CALL_OW 319
49414: PUSH
49415: LD_VAR 0 28
49419: IN
49420: IFFALSE 49424
// continue ;
49422: GO 46454
// k := 8 ;
49424: LD_ADDR_VAR 0 9
49428: PUSH
49429: LD_INT 8
49431: ST_TO_ADDR
// x := 0 ;
49432: LD_ADDR_VAR 0 10
49436: PUSH
49437: LD_INT 0
49439: ST_TO_ADDR
// if tmp < k then
49440: LD_VAR 0 14
49444: PUSH
49445: LD_VAR 0 9
49449: LESS
49450: IFFALSE 49462
// k := tmp ;
49452: LD_ADDR_VAR 0 9
49456: PUSH
49457: LD_VAR 0 14
49461: ST_TO_ADDR
// for j = 1 to k do
49462: LD_ADDR_VAR 0 8
49466: PUSH
49467: DOUBLE
49468: LD_INT 1
49470: DEC
49471: ST_TO_ADDR
49472: LD_VAR 0 9
49476: PUSH
49477: FOR_TO
49478: IFFALSE 49610
// begin if GetType ( tmp [ j ] ) = unit_building then
49480: LD_VAR 0 14
49484: PUSH
49485: LD_VAR 0 8
49489: ARRAY
49490: PPUSH
49491: CALL_OW 247
49495: PUSH
49496: LD_INT 3
49498: EQUAL
49499: IFFALSE 49608
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
49501: LD_VAR 0 14
49505: PUSH
49506: LD_VAR 0 8
49510: ARRAY
49511: PUSH
49512: LD_VAR 0 28
49516: IN
49517: NOT
49518: PUSH
49519: LD_VAR 0 14
49523: PUSH
49524: LD_VAR 0 8
49528: ARRAY
49529: PPUSH
49530: CALL_OW 313
49534: AND
49535: IFFALSE 49608
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49537: LD_VAR 0 4
49541: PUSH
49542: LD_VAR 0 7
49546: ARRAY
49547: PPUSH
49548: LD_VAR 0 14
49552: PUSH
49553: LD_VAR 0 8
49557: ARRAY
49558: PPUSH
49559: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49563: LD_ADDR_VAR 0 28
49567: PUSH
49568: LD_VAR 0 28
49572: PPUSH
49573: LD_VAR 0 28
49577: PUSH
49578: LD_INT 1
49580: PLUS
49581: PPUSH
49582: LD_VAR 0 14
49586: PUSH
49587: LD_VAR 0 8
49591: ARRAY
49592: PPUSH
49593: CALL_OW 1
49597: ST_TO_ADDR
// attacking := true ;
49598: LD_ADDR_VAR 0 29
49602: PUSH
49603: LD_INT 1
49605: ST_TO_ADDR
// break ;
49606: GO 49610
// end ; end ;
49608: GO 49477
49610: POP
49611: POP
// if not attacking and f_attack_depot then
49612: LD_VAR 0 29
49616: NOT
49617: PUSH
49618: LD_VAR 0 25
49622: AND
49623: IFFALSE 49718
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49625: LD_ADDR_VAR 0 13
49629: PUSH
49630: LD_VAR 0 14
49634: PPUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 30
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 30
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 72
49667: ST_TO_ADDR
// if z then
49668: LD_VAR 0 13
49672: IFFALSE 49718
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49674: LD_VAR 0 4
49678: PUSH
49679: LD_VAR 0 7
49683: ARRAY
49684: PPUSH
49685: LD_VAR 0 13
49689: PPUSH
49690: LD_VAR 0 4
49694: PUSH
49695: LD_VAR 0 7
49699: ARRAY
49700: PPUSH
49701: CALL_OW 74
49705: PPUSH
49706: CALL_OW 115
// attacking := true ;
49710: LD_ADDR_VAR 0 29
49714: PUSH
49715: LD_INT 1
49717: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49718: LD_VAR 0 4
49722: PUSH
49723: LD_VAR 0 7
49727: ARRAY
49728: PPUSH
49729: CALL_OW 256
49733: PUSH
49734: LD_INT 500
49736: LESS
49737: IFFALSE 49763
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49739: LD_VAR 0 4
49743: PUSH
49744: LD_VAR 0 7
49748: ARRAY
49749: PPUSH
49750: LD_VAR 0 14
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: PPUSH
49759: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49763: LD_VAR 0 4
49767: PUSH
49768: LD_VAR 0 7
49772: ARRAY
49773: PPUSH
49774: CALL_OW 264
49778: PUSH
49779: LD_INT 49
49781: EQUAL
49782: IFFALSE 49903
// begin if not HasTask ( group [ i ] ) then
49784: LD_VAR 0 4
49788: PUSH
49789: LD_VAR 0 7
49793: ARRAY
49794: PPUSH
49795: CALL_OW 314
49799: NOT
49800: IFFALSE 49903
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49802: LD_ADDR_VAR 0 9
49806: PUSH
49807: LD_INT 81
49809: PUSH
49810: LD_VAR 0 4
49814: PUSH
49815: LD_VAR 0 7
49819: ARRAY
49820: PPUSH
49821: CALL_OW 255
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PPUSH
49830: CALL_OW 69
49834: PPUSH
49835: LD_VAR 0 4
49839: PUSH
49840: LD_VAR 0 7
49844: ARRAY
49845: PPUSH
49846: CALL_OW 74
49850: ST_TO_ADDR
// if k then
49851: LD_VAR 0 9
49855: IFFALSE 49903
// if GetDistUnits ( group [ i ] , k ) > 10 then
49857: LD_VAR 0 4
49861: PUSH
49862: LD_VAR 0 7
49866: ARRAY
49867: PPUSH
49868: LD_VAR 0 9
49872: PPUSH
49873: CALL_OW 296
49877: PUSH
49878: LD_INT 10
49880: GREATER
49881: IFFALSE 49903
// ComMoveUnit ( group [ i ] , k ) ;
49883: LD_VAR 0 4
49887: PUSH
49888: LD_VAR 0 7
49892: ARRAY
49893: PPUSH
49894: LD_VAR 0 9
49898: PPUSH
49899: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49903: LD_VAR 0 4
49907: PUSH
49908: LD_VAR 0 7
49912: ARRAY
49913: PPUSH
49914: CALL_OW 256
49918: PUSH
49919: LD_INT 250
49921: LESS
49922: PUSH
49923: LD_VAR 0 4
49927: PUSH
49928: LD_VAR 0 7
49932: ARRAY
49933: PUSH
49934: LD_INT 21
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 23
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PPUSH
49958: CALL_OW 69
49962: IN
49963: AND
49964: IFFALSE 50089
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49966: LD_ADDR_VAR 0 9
49970: PUSH
49971: LD_OWVAR 3
49975: PUSH
49976: LD_VAR 0 4
49980: PUSH
49981: LD_VAR 0 7
49985: ARRAY
49986: DIFF
49987: PPUSH
49988: LD_VAR 0 4
49992: PUSH
49993: LD_VAR 0 7
49997: ARRAY
49998: PPUSH
49999: CALL_OW 74
50003: ST_TO_ADDR
// if not k then
50004: LD_VAR 0 9
50008: NOT
50009: IFFALSE 50013
// continue ;
50011: GO 46454
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50013: LD_VAR 0 9
50017: PUSH
50018: LD_INT 81
50020: PUSH
50021: LD_VAR 0 4
50025: PUSH
50026: LD_VAR 0 7
50030: ARRAY
50031: PPUSH
50032: CALL_OW 255
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PPUSH
50041: CALL_OW 69
50045: IN
50046: PUSH
50047: LD_VAR 0 9
50051: PPUSH
50052: LD_VAR 0 4
50056: PUSH
50057: LD_VAR 0 7
50061: ARRAY
50062: PPUSH
50063: CALL_OW 296
50067: PUSH
50068: LD_INT 5
50070: LESS
50071: AND
50072: IFFALSE 50089
// ComAutodestruct ( group [ i ] ) ;
50074: LD_VAR 0 4
50078: PUSH
50079: LD_VAR 0 7
50083: ARRAY
50084: PPUSH
50085: CALL 44549 0 1
// end ; if f_attack_depot then
50089: LD_VAR 0 25
50093: IFFALSE 50205
// begin k := 6 ;
50095: LD_ADDR_VAR 0 9
50099: PUSH
50100: LD_INT 6
50102: ST_TO_ADDR
// if tmp < k then
50103: LD_VAR 0 14
50107: PUSH
50108: LD_VAR 0 9
50112: LESS
50113: IFFALSE 50125
// k := tmp ;
50115: LD_ADDR_VAR 0 9
50119: PUSH
50120: LD_VAR 0 14
50124: ST_TO_ADDR
// for j = 1 to k do
50125: LD_ADDR_VAR 0 8
50129: PUSH
50130: DOUBLE
50131: LD_INT 1
50133: DEC
50134: ST_TO_ADDR
50135: LD_VAR 0 9
50139: PUSH
50140: FOR_TO
50141: IFFALSE 50203
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50143: LD_VAR 0 8
50147: PPUSH
50148: CALL_OW 266
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: IN
50163: IFFALSE 50201
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50165: LD_VAR 0 4
50169: PUSH
50170: LD_VAR 0 7
50174: ARRAY
50175: PPUSH
50176: LD_VAR 0 14
50180: PUSH
50181: LD_VAR 0 8
50185: ARRAY
50186: PPUSH
50187: CALL_OW 115
// attacking := true ;
50191: LD_ADDR_VAR 0 29
50195: PUSH
50196: LD_INT 1
50198: ST_TO_ADDR
// break ;
50199: GO 50203
// end ;
50201: GO 50140
50203: POP
50204: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50205: LD_VAR 0 4
50209: PUSH
50210: LD_VAR 0 7
50214: ARRAY
50215: PPUSH
50216: CALL_OW 302
50220: PUSH
50221: LD_VAR 0 29
50225: NOT
50226: AND
50227: IFFALSE 50549
// begin if GetTag ( group [ i ] ) = 71 then
50229: LD_VAR 0 4
50233: PUSH
50234: LD_VAR 0 7
50238: ARRAY
50239: PPUSH
50240: CALL_OW 110
50244: PUSH
50245: LD_INT 71
50247: EQUAL
50248: IFFALSE 50289
// begin if HasTask ( group [ i ] ) then
50250: LD_VAR 0 4
50254: PUSH
50255: LD_VAR 0 7
50259: ARRAY
50260: PPUSH
50261: CALL_OW 314
50265: IFFALSE 50271
// continue else
50267: GO 46454
50269: GO 50289
// SetTag ( group [ i ] , 0 ) ;
50271: LD_VAR 0 4
50275: PUSH
50276: LD_VAR 0 7
50280: ARRAY
50281: PPUSH
50282: LD_INT 0
50284: PPUSH
50285: CALL_OW 109
// end ; k := 8 ;
50289: LD_ADDR_VAR 0 9
50293: PUSH
50294: LD_INT 8
50296: ST_TO_ADDR
// x := 0 ;
50297: LD_ADDR_VAR 0 10
50301: PUSH
50302: LD_INT 0
50304: ST_TO_ADDR
// if tmp < k then
50305: LD_VAR 0 14
50309: PUSH
50310: LD_VAR 0 9
50314: LESS
50315: IFFALSE 50327
// k := tmp ;
50317: LD_ADDR_VAR 0 9
50321: PUSH
50322: LD_VAR 0 14
50326: ST_TO_ADDR
// for j = 1 to k do
50327: LD_ADDR_VAR 0 8
50331: PUSH
50332: DOUBLE
50333: LD_INT 1
50335: DEC
50336: ST_TO_ADDR
50337: LD_VAR 0 9
50341: PUSH
50342: FOR_TO
50343: IFFALSE 50441
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50345: LD_VAR 0 14
50349: PUSH
50350: LD_VAR 0 8
50354: ARRAY
50355: PPUSH
50356: CALL_OW 247
50360: PUSH
50361: LD_INT 1
50363: EQUAL
50364: PUSH
50365: LD_VAR 0 14
50369: PUSH
50370: LD_VAR 0 8
50374: ARRAY
50375: PPUSH
50376: CALL_OW 256
50380: PUSH
50381: LD_INT 250
50383: LESS
50384: PUSH
50385: LD_VAR 0 20
50389: AND
50390: PUSH
50391: LD_VAR 0 20
50395: NOT
50396: PUSH
50397: LD_VAR 0 14
50401: PUSH
50402: LD_VAR 0 8
50406: ARRAY
50407: PPUSH
50408: CALL_OW 256
50412: PUSH
50413: LD_INT 250
50415: GREATEREQUAL
50416: AND
50417: OR
50418: AND
50419: IFFALSE 50439
// begin x := tmp [ j ] ;
50421: LD_ADDR_VAR 0 10
50425: PUSH
50426: LD_VAR 0 14
50430: PUSH
50431: LD_VAR 0 8
50435: ARRAY
50436: ST_TO_ADDR
// break ;
50437: GO 50441
// end ;
50439: GO 50342
50441: POP
50442: POP
// if x then
50443: LD_VAR 0 10
50447: IFFALSE 50471
// ComAttackUnit ( group [ i ] , x ) else
50449: LD_VAR 0 4
50453: PUSH
50454: LD_VAR 0 7
50458: ARRAY
50459: PPUSH
50460: LD_VAR 0 10
50464: PPUSH
50465: CALL_OW 115
50469: GO 50495
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50471: LD_VAR 0 4
50475: PUSH
50476: LD_VAR 0 7
50480: ARRAY
50481: PPUSH
50482: LD_VAR 0 14
50486: PUSH
50487: LD_INT 1
50489: ARRAY
50490: PPUSH
50491: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50495: LD_VAR 0 4
50499: PUSH
50500: LD_VAR 0 7
50504: ARRAY
50505: PPUSH
50506: CALL_OW 314
50510: NOT
50511: IFFALSE 50549
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50513: LD_VAR 0 4
50517: PUSH
50518: LD_VAR 0 7
50522: ARRAY
50523: PPUSH
50524: LD_VAR 0 14
50528: PPUSH
50529: LD_VAR 0 4
50533: PUSH
50534: LD_VAR 0 7
50538: ARRAY
50539: PPUSH
50540: CALL_OW 74
50544: PPUSH
50545: CALL_OW 115
// end ; end ; end ;
50549: GO 46454
50551: POP
50552: POP
// wait ( 0 0$1 ) ;
50553: LD_INT 35
50555: PPUSH
50556: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
50560: LD_VAR 0 4
50564: PUSH
50565: EMPTY
50566: EQUAL
50567: PUSH
50568: LD_INT 81
50570: PUSH
50571: LD_VAR 0 35
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PPUSH
50580: CALL_OW 69
50584: NOT
50585: OR
50586: IFFALSE 46439
// end ;
50588: LD_VAR 0 2
50592: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50593: LD_INT 0
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
// if not base_units then
50599: LD_VAR 0 1
50603: NOT
50604: IFFALSE 50608
// exit ;
50606: GO 50695
// result := false ;
50608: LD_ADDR_VAR 0 2
50612: PUSH
50613: LD_INT 0
50615: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50616: LD_ADDR_VAR 0 5
50620: PUSH
50621: LD_VAR 0 1
50625: PPUSH
50626: LD_INT 21
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PPUSH
50636: CALL_OW 72
50640: ST_TO_ADDR
// if not tmp then
50641: LD_VAR 0 5
50645: NOT
50646: IFFALSE 50650
// exit ;
50648: GO 50695
// for i in tmp do
50650: LD_ADDR_VAR 0 3
50654: PUSH
50655: LD_VAR 0 5
50659: PUSH
50660: FOR_IN
50661: IFFALSE 50693
// begin result := EnemyInRange ( i , 22 ) ;
50663: LD_ADDR_VAR 0 2
50667: PUSH
50668: LD_VAR 0 3
50672: PPUSH
50673: LD_INT 22
50675: PPUSH
50676: CALL 44232 0 2
50680: ST_TO_ADDR
// if result then
50681: LD_VAR 0 2
50685: IFFALSE 50691
// exit ;
50687: POP
50688: POP
50689: GO 50695
// end ;
50691: GO 50660
50693: POP
50694: POP
// end ;
50695: LD_VAR 0 2
50699: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50700: LD_INT 0
50702: PPUSH
50703: PPUSH
// if not units then
50704: LD_VAR 0 1
50708: NOT
50709: IFFALSE 50713
// exit ;
50711: GO 50783
// result := [ ] ;
50713: LD_ADDR_VAR 0 3
50717: PUSH
50718: EMPTY
50719: ST_TO_ADDR
// for i in units do
50720: LD_ADDR_VAR 0 4
50724: PUSH
50725: LD_VAR 0 1
50729: PUSH
50730: FOR_IN
50731: IFFALSE 50781
// if GetTag ( i ) = tag then
50733: LD_VAR 0 4
50737: PPUSH
50738: CALL_OW 110
50742: PUSH
50743: LD_VAR 0 2
50747: EQUAL
50748: IFFALSE 50779
// result := Insert ( result , result + 1 , i ) ;
50750: LD_ADDR_VAR 0 3
50754: PUSH
50755: LD_VAR 0 3
50759: PPUSH
50760: LD_VAR 0 3
50764: PUSH
50765: LD_INT 1
50767: PLUS
50768: PPUSH
50769: LD_VAR 0 4
50773: PPUSH
50774: CALL_OW 2
50778: ST_TO_ADDR
50779: GO 50730
50781: POP
50782: POP
// end ;
50783: LD_VAR 0 3
50787: RET
// export function IsDriver ( un ) ; begin
50788: LD_INT 0
50790: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50791: LD_ADDR_VAR 0 2
50795: PUSH
50796: LD_VAR 0 1
50800: PUSH
50801: LD_INT 55
50803: PUSH
50804: EMPTY
50805: LIST
50806: PPUSH
50807: CALL_OW 69
50811: IN
50812: ST_TO_ADDR
// end ;
50813: LD_VAR 0 2
50817: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50818: LD_INT 0
50820: PPUSH
50821: PPUSH
// list := [ ] ;
50822: LD_ADDR_VAR 0 5
50826: PUSH
50827: EMPTY
50828: ST_TO_ADDR
// case d of 0 :
50829: LD_VAR 0 3
50833: PUSH
50834: LD_INT 0
50836: DOUBLE
50837: EQUAL
50838: IFTRUE 50842
50840: GO 50975
50842: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50843: LD_ADDR_VAR 0 5
50847: PUSH
50848: LD_VAR 0 1
50852: PUSH
50853: LD_INT 4
50855: MINUS
50856: PUSH
50857: LD_VAR 0 2
50861: PUSH
50862: LD_INT 4
50864: MINUS
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: PUSH
50874: LD_VAR 0 1
50878: PUSH
50879: LD_INT 3
50881: MINUS
50882: PUSH
50883: LD_VAR 0 2
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: PUSH
50896: LD_VAR 0 1
50900: PUSH
50901: LD_INT 4
50903: PLUS
50904: PUSH
50905: LD_VAR 0 2
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: PUSH
50918: LD_VAR 0 1
50922: PUSH
50923: LD_INT 3
50925: PLUS
50926: PUSH
50927: LD_VAR 0 2
50931: PUSH
50932: LD_INT 3
50934: PLUS
50935: PUSH
50936: LD_INT 5
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: PUSH
50944: LD_VAR 0 1
50948: PUSH
50949: LD_VAR 0 2
50953: PUSH
50954: LD_INT 4
50956: PLUS
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// end ; 1 :
50973: GO 51673
50975: LD_INT 1
50977: DOUBLE
50978: EQUAL
50979: IFTRUE 50983
50981: GO 51116
50983: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50984: LD_ADDR_VAR 0 5
50988: PUSH
50989: LD_VAR 0 1
50993: PUSH
50994: LD_VAR 0 2
50998: PUSH
50999: LD_INT 4
51001: MINUS
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: PUSH
51011: LD_VAR 0 1
51015: PUSH
51016: LD_INT 3
51018: MINUS
51019: PUSH
51020: LD_VAR 0 2
51024: PUSH
51025: LD_INT 3
51027: MINUS
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: PUSH
51037: LD_VAR 0 1
51041: PUSH
51042: LD_INT 4
51044: MINUS
51045: PUSH
51046: LD_VAR 0 2
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: PUSH
51059: LD_VAR 0 1
51063: PUSH
51064: LD_VAR 0 2
51068: PUSH
51069: LD_INT 3
51071: PLUS
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: PUSH
51081: LD_VAR 0 1
51085: PUSH
51086: LD_INT 4
51088: PLUS
51089: PUSH
51090: LD_VAR 0 2
51094: PUSH
51095: LD_INT 4
51097: PLUS
51098: PUSH
51099: LD_INT 5
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: ST_TO_ADDR
// end ; 2 :
51114: GO 51673
51116: LD_INT 2
51118: DOUBLE
51119: EQUAL
51120: IFTRUE 51124
51122: GO 51253
51124: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51125: LD_ADDR_VAR 0 5
51129: PUSH
51130: LD_VAR 0 1
51134: PUSH
51135: LD_VAR 0 2
51139: PUSH
51140: LD_INT 3
51142: MINUS
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: PUSH
51152: LD_VAR 0 1
51156: PUSH
51157: LD_INT 4
51159: PLUS
51160: PUSH
51161: LD_VAR 0 2
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: PUSH
51174: LD_VAR 0 1
51178: PUSH
51179: LD_VAR 0 2
51183: PUSH
51184: LD_INT 4
51186: PLUS
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: PUSH
51196: LD_VAR 0 1
51200: PUSH
51201: LD_INT 3
51203: MINUS
51204: PUSH
51205: LD_VAR 0 2
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: PUSH
51218: LD_VAR 0 1
51222: PUSH
51223: LD_INT 4
51225: MINUS
51226: PUSH
51227: LD_VAR 0 2
51231: PUSH
51232: LD_INT 4
51234: MINUS
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: ST_TO_ADDR
// end ; 3 :
51251: GO 51673
51253: LD_INT 3
51255: DOUBLE
51256: EQUAL
51257: IFTRUE 51261
51259: GO 51394
51261: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51262: LD_ADDR_VAR 0 5
51266: PUSH
51267: LD_VAR 0 1
51271: PUSH
51272: LD_INT 3
51274: PLUS
51275: PUSH
51276: LD_VAR 0 2
51280: PUSH
51281: LD_INT 4
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: PUSH
51289: LD_VAR 0 1
51293: PUSH
51294: LD_INT 4
51296: PLUS
51297: PUSH
51298: LD_VAR 0 2
51302: PUSH
51303: LD_INT 4
51305: PLUS
51306: PUSH
51307: LD_INT 5
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: LIST
51314: PUSH
51315: LD_VAR 0 1
51319: PUSH
51320: LD_INT 4
51322: MINUS
51323: PUSH
51324: LD_VAR 0 2
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: PUSH
51337: LD_VAR 0 1
51341: PUSH
51342: LD_VAR 0 2
51346: PUSH
51347: LD_INT 4
51349: MINUS
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: PUSH
51359: LD_VAR 0 1
51363: PUSH
51364: LD_INT 3
51366: MINUS
51367: PUSH
51368: LD_VAR 0 2
51372: PUSH
51373: LD_INT 3
51375: MINUS
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: ST_TO_ADDR
// end ; 4 :
51392: GO 51673
51394: LD_INT 4
51396: DOUBLE
51397: EQUAL
51398: IFTRUE 51402
51400: GO 51535
51402: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51403: LD_ADDR_VAR 0 5
51407: PUSH
51408: LD_VAR 0 1
51412: PUSH
51413: LD_VAR 0 2
51417: PUSH
51418: LD_INT 4
51420: PLUS
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: LIST
51429: PUSH
51430: LD_VAR 0 1
51434: PUSH
51435: LD_INT 3
51437: PLUS
51438: PUSH
51439: LD_VAR 0 2
51443: PUSH
51444: LD_INT 3
51446: PLUS
51447: PUSH
51448: LD_INT 5
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: LIST
51455: PUSH
51456: LD_VAR 0 1
51460: PUSH
51461: LD_INT 4
51463: PLUS
51464: PUSH
51465: LD_VAR 0 2
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: PUSH
51478: LD_VAR 0 1
51482: PUSH
51483: LD_VAR 0 2
51487: PUSH
51488: LD_INT 3
51490: MINUS
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: PUSH
51500: LD_VAR 0 1
51504: PUSH
51505: LD_INT 4
51507: MINUS
51508: PUSH
51509: LD_VAR 0 2
51513: PUSH
51514: LD_INT 4
51516: MINUS
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// end ; 5 :
51533: GO 51673
51535: LD_INT 5
51537: DOUBLE
51538: EQUAL
51539: IFTRUE 51543
51541: GO 51672
51543: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51544: LD_ADDR_VAR 0 5
51548: PUSH
51549: LD_VAR 0 1
51553: PUSH
51554: LD_INT 4
51556: MINUS
51557: PUSH
51558: LD_VAR 0 2
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: PUSH
51571: LD_VAR 0 1
51575: PUSH
51576: LD_VAR 0 2
51580: PUSH
51581: LD_INT 4
51583: MINUS
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: PUSH
51593: LD_VAR 0 1
51597: PUSH
51598: LD_INT 4
51600: PLUS
51601: PUSH
51602: LD_VAR 0 2
51606: PUSH
51607: LD_INT 4
51609: PLUS
51610: PUSH
51611: LD_INT 5
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: PUSH
51619: LD_VAR 0 1
51623: PUSH
51624: LD_INT 3
51626: PLUS
51627: PUSH
51628: LD_VAR 0 2
51632: PUSH
51633: LD_INT 4
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: PUSH
51641: LD_VAR 0 1
51645: PUSH
51646: LD_VAR 0 2
51650: PUSH
51651: LD_INT 3
51653: PLUS
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: ST_TO_ADDR
// end ; end ;
51670: GO 51673
51672: POP
// result := list ;
51673: LD_ADDR_VAR 0 4
51677: PUSH
51678: LD_VAR 0 5
51682: ST_TO_ADDR
// end ;
51683: LD_VAR 0 4
51687: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51688: LD_INT 0
51690: PPUSH
51691: PPUSH
51692: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51693: LD_VAR 0 1
51697: NOT
51698: PUSH
51699: LD_VAR 0 2
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: LD_INT 4
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: IN
51722: NOT
51723: OR
51724: IFFALSE 51728
// exit ;
51726: GO 51820
// tmp := [ ] ;
51728: LD_ADDR_VAR 0 5
51732: PUSH
51733: EMPTY
51734: ST_TO_ADDR
// for i in units do
51735: LD_ADDR_VAR 0 4
51739: PUSH
51740: LD_VAR 0 1
51744: PUSH
51745: FOR_IN
51746: IFFALSE 51789
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51748: LD_ADDR_VAR 0 5
51752: PUSH
51753: LD_VAR 0 5
51757: PPUSH
51758: LD_VAR 0 5
51762: PUSH
51763: LD_INT 1
51765: PLUS
51766: PPUSH
51767: LD_VAR 0 4
51771: PPUSH
51772: LD_VAR 0 2
51776: PPUSH
51777: CALL_OW 259
51781: PPUSH
51782: CALL_OW 2
51786: ST_TO_ADDR
51787: GO 51745
51789: POP
51790: POP
// if not tmp then
51791: LD_VAR 0 5
51795: NOT
51796: IFFALSE 51800
// exit ;
51798: GO 51820
// result := SortListByListDesc ( units , tmp ) ;
51800: LD_ADDR_VAR 0 3
51804: PUSH
51805: LD_VAR 0 1
51809: PPUSH
51810: LD_VAR 0 5
51814: PPUSH
51815: CALL_OW 77
51819: ST_TO_ADDR
// end ;
51820: LD_VAR 0 3
51824: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51825: LD_INT 0
51827: PPUSH
51828: PPUSH
51829: PPUSH
// x := GetX ( building ) ;
51830: LD_ADDR_VAR 0 4
51834: PUSH
51835: LD_VAR 0 2
51839: PPUSH
51840: CALL_OW 250
51844: ST_TO_ADDR
// y := GetY ( building ) ;
51845: LD_ADDR_VAR 0 5
51849: PUSH
51850: LD_VAR 0 2
51854: PPUSH
51855: CALL_OW 251
51859: ST_TO_ADDR
// if GetTaskList ( unit ) then
51860: LD_VAR 0 1
51864: PPUSH
51865: CALL_OW 437
51869: IFFALSE 51964
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51871: LD_STRING e
51873: PUSH
51874: LD_VAR 0 1
51878: PPUSH
51879: CALL_OW 437
51883: PUSH
51884: LD_INT 1
51886: ARRAY
51887: PUSH
51888: LD_INT 1
51890: ARRAY
51891: EQUAL
51892: PUSH
51893: LD_VAR 0 4
51897: PUSH
51898: LD_VAR 0 1
51902: PPUSH
51903: CALL_OW 437
51907: PUSH
51908: LD_INT 1
51910: ARRAY
51911: PUSH
51912: LD_INT 2
51914: ARRAY
51915: EQUAL
51916: AND
51917: PUSH
51918: LD_VAR 0 5
51922: PUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 437
51932: PUSH
51933: LD_INT 1
51935: ARRAY
51936: PUSH
51937: LD_INT 3
51939: ARRAY
51940: EQUAL
51941: AND
51942: IFFALSE 51954
// result := true else
51944: LD_ADDR_VAR 0 3
51948: PUSH
51949: LD_INT 1
51951: ST_TO_ADDR
51952: GO 51962
// result := false ;
51954: LD_ADDR_VAR 0 3
51958: PUSH
51959: LD_INT 0
51961: ST_TO_ADDR
// end else
51962: GO 51972
// result := false ;
51964: LD_ADDR_VAR 0 3
51968: PUSH
51969: LD_INT 0
51971: ST_TO_ADDR
// end ;
51972: LD_VAR 0 3
51976: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51977: LD_INT 0
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
// if not unit or not area then
51983: LD_VAR 0 1
51987: NOT
51988: PUSH
51989: LD_VAR 0 2
51993: NOT
51994: OR
51995: IFFALSE 51999
// exit ;
51997: GO 52163
// tmp := AreaToList ( area , i ) ;
51999: LD_ADDR_VAR 0 6
52003: PUSH
52004: LD_VAR 0 2
52008: PPUSH
52009: LD_VAR 0 5
52013: PPUSH
52014: CALL_OW 517
52018: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52019: LD_ADDR_VAR 0 5
52023: PUSH
52024: DOUBLE
52025: LD_INT 1
52027: DEC
52028: ST_TO_ADDR
52029: LD_VAR 0 6
52033: PUSH
52034: LD_INT 1
52036: ARRAY
52037: PUSH
52038: FOR_TO
52039: IFFALSE 52161
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52041: LD_ADDR_VAR 0 7
52045: PUSH
52046: LD_VAR 0 6
52050: PUSH
52051: LD_INT 1
52053: ARRAY
52054: PUSH
52055: LD_VAR 0 5
52059: ARRAY
52060: PUSH
52061: LD_VAR 0 6
52065: PUSH
52066: LD_INT 2
52068: ARRAY
52069: PUSH
52070: LD_VAR 0 5
52074: ARRAY
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52080: LD_VAR 0 7
52084: PUSH
52085: LD_INT 1
52087: ARRAY
52088: PPUSH
52089: LD_VAR 0 7
52093: PUSH
52094: LD_INT 2
52096: ARRAY
52097: PPUSH
52098: CALL_OW 428
52102: PUSH
52103: LD_INT 0
52105: EQUAL
52106: IFFALSE 52159
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52108: LD_VAR 0 1
52112: PPUSH
52113: LD_VAR 0 7
52117: PUSH
52118: LD_INT 1
52120: ARRAY
52121: PPUSH
52122: LD_VAR 0 7
52126: PUSH
52127: LD_INT 2
52129: ARRAY
52130: PPUSH
52131: LD_VAR 0 3
52135: PPUSH
52136: CALL_OW 48
// result := IsPlaced ( unit ) ;
52140: LD_ADDR_VAR 0 4
52144: PUSH
52145: LD_VAR 0 1
52149: PPUSH
52150: CALL_OW 305
52154: ST_TO_ADDR
// exit ;
52155: POP
52156: POP
52157: GO 52163
// end ; end ;
52159: GO 52038
52161: POP
52162: POP
// end ;
52163: LD_VAR 0 4
52167: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52168: LD_INT 0
52170: PPUSH
52171: PPUSH
52172: PPUSH
// if not side or side > 8 then
52173: LD_VAR 0 1
52177: NOT
52178: PUSH
52179: LD_VAR 0 1
52183: PUSH
52184: LD_INT 8
52186: GREATER
52187: OR
52188: IFFALSE 52192
// exit ;
52190: GO 52379
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52192: LD_ADDR_VAR 0 4
52196: PUSH
52197: LD_INT 22
52199: PUSH
52200: LD_VAR 0 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 21
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PPUSH
52223: CALL_OW 69
52227: ST_TO_ADDR
// if not tmp then
52228: LD_VAR 0 4
52232: NOT
52233: IFFALSE 52237
// exit ;
52235: GO 52379
// enable_addtolog := true ;
52237: LD_ADDR_OWVAR 81
52241: PUSH
52242: LD_INT 1
52244: ST_TO_ADDR
// AddToLog ( [ ) ;
52245: LD_STRING [
52247: PPUSH
52248: CALL_OW 561
// for i in tmp do
52252: LD_ADDR_VAR 0 3
52256: PUSH
52257: LD_VAR 0 4
52261: PUSH
52262: FOR_IN
52263: IFFALSE 52370
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52265: LD_STRING [
52267: PUSH
52268: LD_VAR 0 3
52272: PPUSH
52273: CALL_OW 266
52277: STR
52278: PUSH
52279: LD_STRING , 
52281: STR
52282: PUSH
52283: LD_VAR 0 3
52287: PPUSH
52288: CALL_OW 250
52292: STR
52293: PUSH
52294: LD_STRING , 
52296: STR
52297: PUSH
52298: LD_VAR 0 3
52302: PPUSH
52303: CALL_OW 251
52307: STR
52308: PUSH
52309: LD_STRING , 
52311: STR
52312: PUSH
52313: LD_VAR 0 3
52317: PPUSH
52318: CALL_OW 254
52322: STR
52323: PUSH
52324: LD_STRING , 
52326: STR
52327: PUSH
52328: LD_VAR 0 3
52332: PPUSH
52333: LD_INT 1
52335: PPUSH
52336: CALL_OW 268
52340: STR
52341: PUSH
52342: LD_STRING , 
52344: STR
52345: PUSH
52346: LD_VAR 0 3
52350: PPUSH
52351: LD_INT 2
52353: PPUSH
52354: CALL_OW 268
52358: STR
52359: PUSH
52360: LD_STRING ],
52362: STR
52363: PPUSH
52364: CALL_OW 561
// end ;
52368: GO 52262
52370: POP
52371: POP
// AddToLog ( ]; ) ;
52372: LD_STRING ];
52374: PPUSH
52375: CALL_OW 561
// end ;
52379: LD_VAR 0 2
52383: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52384: LD_INT 0
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
52390: PPUSH
// if not area or not rate or not max then
52391: LD_VAR 0 1
52395: NOT
52396: PUSH
52397: LD_VAR 0 2
52401: NOT
52402: OR
52403: PUSH
52404: LD_VAR 0 4
52408: NOT
52409: OR
52410: IFFALSE 52414
// exit ;
52412: GO 52606
// while 1 do
52414: LD_INT 1
52416: IFFALSE 52606
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52418: LD_ADDR_VAR 0 9
52422: PUSH
52423: LD_VAR 0 1
52427: PPUSH
52428: LD_INT 1
52430: PPUSH
52431: CALL_OW 287
52435: PUSH
52436: LD_INT 10
52438: MUL
52439: ST_TO_ADDR
// r := rate / 10 ;
52440: LD_ADDR_VAR 0 7
52444: PUSH
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 10
52452: DIVREAL
52453: ST_TO_ADDR
// time := 1 1$00 ;
52454: LD_ADDR_VAR 0 8
52458: PUSH
52459: LD_INT 2100
52461: ST_TO_ADDR
// if amount < min then
52462: LD_VAR 0 9
52466: PUSH
52467: LD_VAR 0 3
52471: LESS
52472: IFFALSE 52490
// r := r * 2 else
52474: LD_ADDR_VAR 0 7
52478: PUSH
52479: LD_VAR 0 7
52483: PUSH
52484: LD_INT 2
52486: MUL
52487: ST_TO_ADDR
52488: GO 52516
// if amount > max then
52490: LD_VAR 0 9
52494: PUSH
52495: LD_VAR 0 4
52499: GREATER
52500: IFFALSE 52516
// r := r / 2 ;
52502: LD_ADDR_VAR 0 7
52506: PUSH
52507: LD_VAR 0 7
52511: PUSH
52512: LD_INT 2
52514: DIVREAL
52515: ST_TO_ADDR
// time := time / r ;
52516: LD_ADDR_VAR 0 8
52520: PUSH
52521: LD_VAR 0 8
52525: PUSH
52526: LD_VAR 0 7
52530: DIVREAL
52531: ST_TO_ADDR
// if time < 0 then
52532: LD_VAR 0 8
52536: PUSH
52537: LD_INT 0
52539: LESS
52540: IFFALSE 52557
// time := time * - 1 ;
52542: LD_ADDR_VAR 0 8
52546: PUSH
52547: LD_VAR 0 8
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: MUL
52556: ST_TO_ADDR
// wait ( time ) ;
52557: LD_VAR 0 8
52561: PPUSH
52562: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52566: LD_INT 35
52568: PPUSH
52569: LD_INT 875
52571: PPUSH
52572: CALL_OW 12
52576: PPUSH
52577: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52581: LD_INT 1
52583: PPUSH
52584: LD_INT 5
52586: PPUSH
52587: CALL_OW 12
52591: PPUSH
52592: LD_VAR 0 1
52596: PPUSH
52597: LD_INT 1
52599: PPUSH
52600: CALL_OW 55
// end ;
52604: GO 52414
// end ;
52606: LD_VAR 0 5
52610: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52611: LD_INT 0
52613: PPUSH
52614: PPUSH
52615: PPUSH
52616: PPUSH
52617: PPUSH
52618: PPUSH
52619: PPUSH
52620: PPUSH
// if not turrets or not factories then
52621: LD_VAR 0 1
52625: NOT
52626: PUSH
52627: LD_VAR 0 2
52631: NOT
52632: OR
52633: IFFALSE 52637
// exit ;
52635: GO 52944
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52637: LD_ADDR_VAR 0 10
52641: PUSH
52642: LD_INT 5
52644: PUSH
52645: LD_INT 6
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 4
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 5
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 24
52679: PUSH
52680: LD_INT 25
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 23
52689: PUSH
52690: LD_INT 27
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 42
52703: PUSH
52704: LD_INT 43
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 44
52713: PUSH
52714: LD_INT 46
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 45
52723: PUSH
52724: LD_INT 47
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// result := [ ] ;
52741: LD_ADDR_VAR 0 3
52745: PUSH
52746: EMPTY
52747: ST_TO_ADDR
// for i in turrets do
52748: LD_ADDR_VAR 0 4
52752: PUSH
52753: LD_VAR 0 1
52757: PUSH
52758: FOR_IN
52759: IFFALSE 52942
// begin nat := GetNation ( i ) ;
52761: LD_ADDR_VAR 0 7
52765: PUSH
52766: LD_VAR 0 4
52770: PPUSH
52771: CALL_OW 248
52775: ST_TO_ADDR
// weapon := 0 ;
52776: LD_ADDR_VAR 0 8
52780: PUSH
52781: LD_INT 0
52783: ST_TO_ADDR
// if not nat then
52784: LD_VAR 0 7
52788: NOT
52789: IFFALSE 52793
// continue ;
52791: GO 52758
// for j in list [ nat ] do
52793: LD_ADDR_VAR 0 5
52797: PUSH
52798: LD_VAR 0 10
52802: PUSH
52803: LD_VAR 0 7
52807: ARRAY
52808: PUSH
52809: FOR_IN
52810: IFFALSE 52851
// if GetBWeapon ( i ) = j [ 1 ] then
52812: LD_VAR 0 4
52816: PPUSH
52817: CALL_OW 269
52821: PUSH
52822: LD_VAR 0 5
52826: PUSH
52827: LD_INT 1
52829: ARRAY
52830: EQUAL
52831: IFFALSE 52849
// begin weapon := j [ 2 ] ;
52833: LD_ADDR_VAR 0 8
52837: PUSH
52838: LD_VAR 0 5
52842: PUSH
52843: LD_INT 2
52845: ARRAY
52846: ST_TO_ADDR
// break ;
52847: GO 52851
// end ;
52849: GO 52809
52851: POP
52852: POP
// if not weapon then
52853: LD_VAR 0 8
52857: NOT
52858: IFFALSE 52862
// continue ;
52860: GO 52758
// for k in factories do
52862: LD_ADDR_VAR 0 6
52866: PUSH
52867: LD_VAR 0 2
52871: PUSH
52872: FOR_IN
52873: IFFALSE 52938
// begin weapons := AvailableWeaponList ( k ) ;
52875: LD_ADDR_VAR 0 9
52879: PUSH
52880: LD_VAR 0 6
52884: PPUSH
52885: CALL_OW 478
52889: ST_TO_ADDR
// if not weapons then
52890: LD_VAR 0 9
52894: NOT
52895: IFFALSE 52899
// continue ;
52897: GO 52872
// if weapon in weapons then
52899: LD_VAR 0 8
52903: PUSH
52904: LD_VAR 0 9
52908: IN
52909: IFFALSE 52936
// begin result := [ i , weapon ] ;
52911: LD_ADDR_VAR 0 3
52915: PUSH
52916: LD_VAR 0 4
52920: PUSH
52921: LD_VAR 0 8
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// exit ;
52930: POP
52931: POP
52932: POP
52933: POP
52934: GO 52944
// end ; end ;
52936: GO 52872
52938: POP
52939: POP
// end ;
52940: GO 52758
52942: POP
52943: POP
// end ;
52944: LD_VAR 0 3
52948: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52949: LD_INT 0
52951: PPUSH
// if not side or side > 8 then
52952: LD_VAR 0 3
52956: NOT
52957: PUSH
52958: LD_VAR 0 3
52962: PUSH
52963: LD_INT 8
52965: GREATER
52966: OR
52967: IFFALSE 52971
// exit ;
52969: GO 53030
// if not range then
52971: LD_VAR 0 4
52975: NOT
52976: IFFALSE 52987
// range := - 12 ;
52978: LD_ADDR_VAR 0 4
52982: PUSH
52983: LD_INT 12
52985: NEG
52986: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52987: LD_VAR 0 1
52991: PPUSH
52992: LD_VAR 0 2
52996: PPUSH
52997: LD_VAR 0 3
53001: PPUSH
53002: LD_VAR 0 4
53006: PPUSH
53007: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53011: LD_VAR 0 1
53015: PPUSH
53016: LD_VAR 0 2
53020: PPUSH
53021: LD_VAR 0 3
53025: PPUSH
53026: CALL_OW 331
// end ;
53030: LD_VAR 0 5
53034: RET
// export function Video ( mode ) ; begin
53035: LD_INT 0
53037: PPUSH
// ingame_video = mode ;
53038: LD_ADDR_OWVAR 52
53042: PUSH
53043: LD_VAR 0 1
53047: ST_TO_ADDR
// interface_hidden = mode ;
53048: LD_ADDR_OWVAR 54
53052: PUSH
53053: LD_VAR 0 1
53057: ST_TO_ADDR
// end ;
53058: LD_VAR 0 2
53062: RET
// export function Join ( array , element ) ; begin
53063: LD_INT 0
53065: PPUSH
// result := array ^ element ;
53066: LD_ADDR_VAR 0 3
53070: PUSH
53071: LD_VAR 0 1
53075: PUSH
53076: LD_VAR 0 2
53080: ADD
53081: ST_TO_ADDR
// end ;
53082: LD_VAR 0 3
53086: RET
// export function JoinUnion ( array , element ) ; begin
53087: LD_INT 0
53089: PPUSH
// result := array union element ;
53090: LD_ADDR_VAR 0 3
53094: PUSH
53095: LD_VAR 0 1
53099: PUSH
53100: LD_VAR 0 2
53104: UNION
53105: ST_TO_ADDR
// end ;
53106: LD_VAR 0 3
53110: RET
// export function GetBehemoths ( side ) ; begin
53111: LD_INT 0
53113: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53114: LD_ADDR_VAR 0 2
53118: PUSH
53119: LD_INT 22
53121: PUSH
53122: LD_VAR 0 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 31
53133: PUSH
53134: LD_INT 25
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PPUSH
53145: CALL_OW 69
53149: ST_TO_ADDR
// end ;
53150: LD_VAR 0 2
53154: RET
// export function Shuffle ( array ) ; var i , index ; begin
53155: LD_INT 0
53157: PPUSH
53158: PPUSH
53159: PPUSH
// result := [ ] ;
53160: LD_ADDR_VAR 0 2
53164: PUSH
53165: EMPTY
53166: ST_TO_ADDR
// if not array then
53167: LD_VAR 0 1
53171: NOT
53172: IFFALSE 53176
// exit ;
53174: GO 53275
// Randomize ;
53176: CALL_OW 10
// for i = array downto 1 do
53180: LD_ADDR_VAR 0 3
53184: PUSH
53185: DOUBLE
53186: LD_VAR 0 1
53190: INC
53191: ST_TO_ADDR
53192: LD_INT 1
53194: PUSH
53195: FOR_DOWNTO
53196: IFFALSE 53273
// begin index := rand ( 1 , array ) ;
53198: LD_ADDR_VAR 0 4
53202: PUSH
53203: LD_INT 1
53205: PPUSH
53206: LD_VAR 0 1
53210: PPUSH
53211: CALL_OW 12
53215: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53216: LD_ADDR_VAR 0 2
53220: PUSH
53221: LD_VAR 0 2
53225: PPUSH
53226: LD_VAR 0 2
53230: PUSH
53231: LD_INT 1
53233: PLUS
53234: PPUSH
53235: LD_VAR 0 1
53239: PUSH
53240: LD_VAR 0 4
53244: ARRAY
53245: PPUSH
53246: CALL_OW 2
53250: ST_TO_ADDR
// array := Delete ( array , index ) ;
53251: LD_ADDR_VAR 0 1
53255: PUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: LD_VAR 0 4
53265: PPUSH
53266: CALL_OW 3
53270: ST_TO_ADDR
// end ;
53271: GO 53195
53273: POP
53274: POP
// end ; end_of_file
53275: LD_VAR 0 2
53279: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
53280: GO 53282
53282: DISABLE
// begin ru_radar := 98 ;
53283: LD_ADDR_EXP 45
53287: PUSH
53288: LD_INT 98
53290: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
53291: LD_ADDR_EXP 46
53295: PUSH
53296: LD_INT 89
53298: ST_TO_ADDR
// us_hack := 99 ;
53299: LD_ADDR_EXP 47
53303: PUSH
53304: LD_INT 99
53306: ST_TO_ADDR
// us_artillery := 97 ;
53307: LD_ADDR_EXP 48
53311: PUSH
53312: LD_INT 97
53314: ST_TO_ADDR
// ar_bio_bomb := 91 ;
53315: LD_ADDR_EXP 49
53319: PUSH
53320: LD_INT 91
53322: ST_TO_ADDR
// end ; end_of_file
53323: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
53324: LD_INT 0
53326: PPUSH
53327: PPUSH
// skirmish := false ;
53328: LD_ADDR_EXP 50
53332: PUSH
53333: LD_INT 0
53335: ST_TO_ADDR
// debug_mc := false ;
53336: LD_ADDR_EXP 51
53340: PUSH
53341: LD_INT 0
53343: ST_TO_ADDR
// mc_bases := [ ] ;
53344: LD_ADDR_EXP 52
53348: PUSH
53349: EMPTY
53350: ST_TO_ADDR
// mc_sides := [ ] ;
53351: LD_ADDR_EXP 78
53355: PUSH
53356: EMPTY
53357: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
53358: LD_ADDR_EXP 53
53362: PUSH
53363: EMPTY
53364: ST_TO_ADDR
// mc_building_repairs := [ ] ;
53365: LD_ADDR_EXP 54
53369: PUSH
53370: EMPTY
53371: ST_TO_ADDR
// mc_need_heal := [ ] ;
53372: LD_ADDR_EXP 55
53376: PUSH
53377: EMPTY
53378: ST_TO_ADDR
// mc_healers := [ ] ;
53379: LD_ADDR_EXP 56
53383: PUSH
53384: EMPTY
53385: ST_TO_ADDR
// mc_build_list := [ ] ;
53386: LD_ADDR_EXP 57
53390: PUSH
53391: EMPTY
53392: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
53393: LD_ADDR_EXP 84
53397: PUSH
53398: EMPTY
53399: ST_TO_ADDR
// mc_builders := [ ] ;
53400: LD_ADDR_EXP 58
53404: PUSH
53405: EMPTY
53406: ST_TO_ADDR
// mc_construct_list := [ ] ;
53407: LD_ADDR_EXP 59
53411: PUSH
53412: EMPTY
53413: ST_TO_ADDR
// mc_turret_list := [ ] ;
53414: LD_ADDR_EXP 60
53418: PUSH
53419: EMPTY
53420: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
53421: LD_ADDR_EXP 61
53425: PUSH
53426: EMPTY
53427: ST_TO_ADDR
// mc_miners := [ ] ;
53428: LD_ADDR_EXP 66
53432: PUSH
53433: EMPTY
53434: ST_TO_ADDR
// mc_mines := [ ] ;
53435: LD_ADDR_EXP 65
53439: PUSH
53440: EMPTY
53441: ST_TO_ADDR
// mc_minefields := [ ] ;
53442: LD_ADDR_EXP 67
53446: PUSH
53447: EMPTY
53448: ST_TO_ADDR
// mc_crates := [ ] ;
53449: LD_ADDR_EXP 68
53453: PUSH
53454: EMPTY
53455: ST_TO_ADDR
// mc_crates_collector := [ ] ;
53456: LD_ADDR_EXP 69
53460: PUSH
53461: EMPTY
53462: ST_TO_ADDR
// mc_crates_area := [ ] ;
53463: LD_ADDR_EXP 70
53467: PUSH
53468: EMPTY
53469: ST_TO_ADDR
// mc_vehicles := [ ] ;
53470: LD_ADDR_EXP 71
53474: PUSH
53475: EMPTY
53476: ST_TO_ADDR
// mc_attack := [ ] ;
53477: LD_ADDR_EXP 72
53481: PUSH
53482: EMPTY
53483: ST_TO_ADDR
// mc_produce := [ ] ;
53484: LD_ADDR_EXP 73
53488: PUSH
53489: EMPTY
53490: ST_TO_ADDR
// mc_defender := [ ] ;
53491: LD_ADDR_EXP 74
53495: PUSH
53496: EMPTY
53497: ST_TO_ADDR
// mc_parking := [ ] ;
53498: LD_ADDR_EXP 76
53502: PUSH
53503: EMPTY
53504: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
53505: LD_ADDR_EXP 62
53509: PUSH
53510: EMPTY
53511: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
53512: LD_ADDR_EXP 64
53516: PUSH
53517: EMPTY
53518: ST_TO_ADDR
// mc_scan := [ ] ;
53519: LD_ADDR_EXP 75
53523: PUSH
53524: EMPTY
53525: ST_TO_ADDR
// mc_scan_area := [ ] ;
53526: LD_ADDR_EXP 77
53530: PUSH
53531: EMPTY
53532: ST_TO_ADDR
// mc_tech := [ ] ;
53533: LD_ADDR_EXP 79
53537: PUSH
53538: EMPTY
53539: ST_TO_ADDR
// mc_class := [ ] ;
53540: LD_ADDR_EXP 93
53544: PUSH
53545: EMPTY
53546: ST_TO_ADDR
// mc_class_case_use := [ ] ;
53547: LD_ADDR_EXP 94
53551: PUSH
53552: EMPTY
53553: ST_TO_ADDR
// end ;
53554: LD_VAR 0 1
53558: RET
// export function MC_Kill ( base ) ; begin
53559: LD_INT 0
53561: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
53562: LD_ADDR_EXP 52
53566: PUSH
53567: LD_EXP 52
53571: PPUSH
53572: LD_VAR 0 1
53576: PPUSH
53577: EMPTY
53578: PPUSH
53579: CALL_OW 1
53583: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53584: LD_ADDR_EXP 53
53588: PUSH
53589: LD_EXP 53
53593: PPUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: EMPTY
53600: PPUSH
53601: CALL_OW 1
53605: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53606: LD_ADDR_EXP 54
53610: PUSH
53611: LD_EXP 54
53615: PPUSH
53616: LD_VAR 0 1
53620: PPUSH
53621: EMPTY
53622: PPUSH
53623: CALL_OW 1
53627: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53628: LD_ADDR_EXP 55
53632: PUSH
53633: LD_EXP 55
53637: PPUSH
53638: LD_VAR 0 1
53642: PPUSH
53643: EMPTY
53644: PPUSH
53645: CALL_OW 1
53649: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53650: LD_ADDR_EXP 56
53654: PUSH
53655: LD_EXP 56
53659: PPUSH
53660: LD_VAR 0 1
53664: PPUSH
53665: EMPTY
53666: PPUSH
53667: CALL_OW 1
53671: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53672: LD_ADDR_EXP 57
53676: PUSH
53677: LD_EXP 57
53681: PPUSH
53682: LD_VAR 0 1
53686: PPUSH
53687: EMPTY
53688: PPUSH
53689: CALL_OW 1
53693: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53694: LD_ADDR_EXP 58
53698: PUSH
53699: LD_EXP 58
53703: PPUSH
53704: LD_VAR 0 1
53708: PPUSH
53709: EMPTY
53710: PPUSH
53711: CALL_OW 1
53715: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53716: LD_ADDR_EXP 59
53720: PUSH
53721: LD_EXP 59
53725: PPUSH
53726: LD_VAR 0 1
53730: PPUSH
53731: EMPTY
53732: PPUSH
53733: CALL_OW 1
53737: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53738: LD_ADDR_EXP 60
53742: PUSH
53743: LD_EXP 60
53747: PPUSH
53748: LD_VAR 0 1
53752: PPUSH
53753: EMPTY
53754: PPUSH
53755: CALL_OW 1
53759: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53760: LD_ADDR_EXP 61
53764: PUSH
53765: LD_EXP 61
53769: PPUSH
53770: LD_VAR 0 1
53774: PPUSH
53775: EMPTY
53776: PPUSH
53777: CALL_OW 1
53781: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53782: LD_ADDR_EXP 62
53786: PUSH
53787: LD_EXP 62
53791: PPUSH
53792: LD_VAR 0 1
53796: PPUSH
53797: EMPTY
53798: PPUSH
53799: CALL_OW 1
53803: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53804: LD_ADDR_EXP 63
53808: PUSH
53809: LD_EXP 63
53813: PPUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: LD_INT 0
53821: PPUSH
53822: CALL_OW 1
53826: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53827: LD_ADDR_EXP 64
53831: PUSH
53832: LD_EXP 64
53836: PPUSH
53837: LD_VAR 0 1
53841: PPUSH
53842: EMPTY
53843: PPUSH
53844: CALL_OW 1
53848: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53849: LD_ADDR_EXP 65
53853: PUSH
53854: LD_EXP 65
53858: PPUSH
53859: LD_VAR 0 1
53863: PPUSH
53864: EMPTY
53865: PPUSH
53866: CALL_OW 1
53870: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53871: LD_ADDR_EXP 66
53875: PUSH
53876: LD_EXP 66
53880: PPUSH
53881: LD_VAR 0 1
53885: PPUSH
53886: EMPTY
53887: PPUSH
53888: CALL_OW 1
53892: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53893: LD_ADDR_EXP 67
53897: PUSH
53898: LD_EXP 67
53902: PPUSH
53903: LD_VAR 0 1
53907: PPUSH
53908: EMPTY
53909: PPUSH
53910: CALL_OW 1
53914: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53915: LD_ADDR_EXP 68
53919: PUSH
53920: LD_EXP 68
53924: PPUSH
53925: LD_VAR 0 1
53929: PPUSH
53930: EMPTY
53931: PPUSH
53932: CALL_OW 1
53936: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53937: LD_ADDR_EXP 69
53941: PUSH
53942: LD_EXP 69
53946: PPUSH
53947: LD_VAR 0 1
53951: PPUSH
53952: EMPTY
53953: PPUSH
53954: CALL_OW 1
53958: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53959: LD_ADDR_EXP 70
53963: PUSH
53964: LD_EXP 70
53968: PPUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: EMPTY
53975: PPUSH
53976: CALL_OW 1
53980: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53981: LD_ADDR_EXP 71
53985: PUSH
53986: LD_EXP 71
53990: PPUSH
53991: LD_VAR 0 1
53995: PPUSH
53996: EMPTY
53997: PPUSH
53998: CALL_OW 1
54002: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54003: LD_ADDR_EXP 72
54007: PUSH
54008: LD_EXP 72
54012: PPUSH
54013: LD_VAR 0 1
54017: PPUSH
54018: EMPTY
54019: PPUSH
54020: CALL_OW 1
54024: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54025: LD_ADDR_EXP 73
54029: PUSH
54030: LD_EXP 73
54034: PPUSH
54035: LD_VAR 0 1
54039: PPUSH
54040: EMPTY
54041: PPUSH
54042: CALL_OW 1
54046: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54047: LD_ADDR_EXP 74
54051: PUSH
54052: LD_EXP 74
54056: PPUSH
54057: LD_VAR 0 1
54061: PPUSH
54062: EMPTY
54063: PPUSH
54064: CALL_OW 1
54068: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54069: LD_ADDR_EXP 75
54073: PUSH
54074: LD_EXP 75
54078: PPUSH
54079: LD_VAR 0 1
54083: PPUSH
54084: EMPTY
54085: PPUSH
54086: CALL_OW 1
54090: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54091: LD_ADDR_EXP 76
54095: PUSH
54096: LD_EXP 76
54100: PPUSH
54101: LD_VAR 0 1
54105: PPUSH
54106: EMPTY
54107: PPUSH
54108: CALL_OW 1
54112: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54113: LD_ADDR_EXP 77
54117: PUSH
54118: LD_EXP 77
54122: PPUSH
54123: LD_VAR 0 1
54127: PPUSH
54128: EMPTY
54129: PPUSH
54130: CALL_OW 1
54134: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54135: LD_ADDR_EXP 79
54139: PUSH
54140: LD_EXP 79
54144: PPUSH
54145: LD_VAR 0 1
54149: PPUSH
54150: EMPTY
54151: PPUSH
54152: CALL_OW 1
54156: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54157: LD_ADDR_EXP 81
54161: PUSH
54162: LD_EXP 81
54166: PPUSH
54167: LD_VAR 0 1
54171: PPUSH
54172: EMPTY
54173: PPUSH
54174: CALL_OW 1
54178: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54179: LD_ADDR_EXP 82
54183: PUSH
54184: LD_EXP 82
54188: PPUSH
54189: LD_VAR 0 1
54193: PPUSH
54194: EMPTY
54195: PPUSH
54196: CALL_OW 1
54200: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54201: LD_ADDR_EXP 83
54205: PUSH
54206: LD_EXP 83
54210: PPUSH
54211: LD_VAR 0 1
54215: PPUSH
54216: EMPTY
54217: PPUSH
54218: CALL_OW 1
54222: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54223: LD_ADDR_EXP 84
54227: PUSH
54228: LD_EXP 84
54232: PPUSH
54233: LD_VAR 0 1
54237: PPUSH
54238: EMPTY
54239: PPUSH
54240: CALL_OW 1
54244: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54245: LD_ADDR_EXP 85
54249: PUSH
54250: LD_EXP 85
54254: PPUSH
54255: LD_VAR 0 1
54259: PPUSH
54260: EMPTY
54261: PPUSH
54262: CALL_OW 1
54266: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54267: LD_ADDR_EXP 86
54271: PUSH
54272: LD_EXP 86
54276: PPUSH
54277: LD_VAR 0 1
54281: PPUSH
54282: EMPTY
54283: PPUSH
54284: CALL_OW 1
54288: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54289: LD_ADDR_EXP 87
54293: PUSH
54294: LD_EXP 87
54298: PPUSH
54299: LD_VAR 0 1
54303: PPUSH
54304: EMPTY
54305: PPUSH
54306: CALL_OW 1
54310: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54311: LD_ADDR_EXP 88
54315: PUSH
54316: LD_EXP 88
54320: PPUSH
54321: LD_VAR 0 1
54325: PPUSH
54326: EMPTY
54327: PPUSH
54328: CALL_OW 1
54332: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54333: LD_ADDR_EXP 89
54337: PUSH
54338: LD_EXP 89
54342: PPUSH
54343: LD_VAR 0 1
54347: PPUSH
54348: EMPTY
54349: PPUSH
54350: CALL_OW 1
54354: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54355: LD_ADDR_EXP 90
54359: PUSH
54360: LD_EXP 90
54364: PPUSH
54365: LD_VAR 0 1
54369: PPUSH
54370: EMPTY
54371: PPUSH
54372: CALL_OW 1
54376: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54377: LD_ADDR_EXP 91
54381: PUSH
54382: LD_EXP 91
54386: PPUSH
54387: LD_VAR 0 1
54391: PPUSH
54392: EMPTY
54393: PPUSH
54394: CALL_OW 1
54398: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54399: LD_ADDR_EXP 92
54403: PUSH
54404: LD_EXP 92
54408: PPUSH
54409: LD_VAR 0 1
54413: PPUSH
54414: EMPTY
54415: PPUSH
54416: CALL_OW 1
54420: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54421: LD_ADDR_EXP 93
54425: PUSH
54426: LD_EXP 93
54430: PPUSH
54431: LD_VAR 0 1
54435: PPUSH
54436: EMPTY
54437: PPUSH
54438: CALL_OW 1
54442: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54443: LD_ADDR_EXP 94
54447: PUSH
54448: LD_EXP 94
54452: PPUSH
54453: LD_VAR 0 1
54457: PPUSH
54458: LD_INT 0
54460: PPUSH
54461: CALL_OW 1
54465: ST_TO_ADDR
// end ;
54466: LD_VAR 0 2
54470: RET
// export function MC_Add ( side , units ) ; var base ; begin
54471: LD_INT 0
54473: PPUSH
54474: PPUSH
// base := mc_bases + 1 ;
54475: LD_ADDR_VAR 0 4
54479: PUSH
54480: LD_EXP 52
54484: PUSH
54485: LD_INT 1
54487: PLUS
54488: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
54489: LD_ADDR_EXP 78
54493: PUSH
54494: LD_EXP 78
54498: PPUSH
54499: LD_VAR 0 4
54503: PPUSH
54504: LD_VAR 0 1
54508: PPUSH
54509: CALL_OW 1
54513: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
54514: LD_ADDR_EXP 52
54518: PUSH
54519: LD_EXP 52
54523: PPUSH
54524: LD_VAR 0 4
54528: PPUSH
54529: LD_VAR 0 2
54533: PPUSH
54534: CALL_OW 1
54538: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54539: LD_ADDR_EXP 53
54543: PUSH
54544: LD_EXP 53
54548: PPUSH
54549: LD_VAR 0 4
54553: PPUSH
54554: EMPTY
54555: PPUSH
54556: CALL_OW 1
54560: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54561: LD_ADDR_EXP 54
54565: PUSH
54566: LD_EXP 54
54570: PPUSH
54571: LD_VAR 0 4
54575: PPUSH
54576: EMPTY
54577: PPUSH
54578: CALL_OW 1
54582: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54583: LD_ADDR_EXP 55
54587: PUSH
54588: LD_EXP 55
54592: PPUSH
54593: LD_VAR 0 4
54597: PPUSH
54598: EMPTY
54599: PPUSH
54600: CALL_OW 1
54604: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54605: LD_ADDR_EXP 56
54609: PUSH
54610: LD_EXP 56
54614: PPUSH
54615: LD_VAR 0 4
54619: PPUSH
54620: EMPTY
54621: PPUSH
54622: CALL_OW 1
54626: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54627: LD_ADDR_EXP 57
54631: PUSH
54632: LD_EXP 57
54636: PPUSH
54637: LD_VAR 0 4
54641: PPUSH
54642: EMPTY
54643: PPUSH
54644: CALL_OW 1
54648: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54649: LD_ADDR_EXP 58
54653: PUSH
54654: LD_EXP 58
54658: PPUSH
54659: LD_VAR 0 4
54663: PPUSH
54664: EMPTY
54665: PPUSH
54666: CALL_OW 1
54670: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54671: LD_ADDR_EXP 59
54675: PUSH
54676: LD_EXP 59
54680: PPUSH
54681: LD_VAR 0 4
54685: PPUSH
54686: EMPTY
54687: PPUSH
54688: CALL_OW 1
54692: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54693: LD_ADDR_EXP 60
54697: PUSH
54698: LD_EXP 60
54702: PPUSH
54703: LD_VAR 0 4
54707: PPUSH
54708: EMPTY
54709: PPUSH
54710: CALL_OW 1
54714: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54715: LD_ADDR_EXP 61
54719: PUSH
54720: LD_EXP 61
54724: PPUSH
54725: LD_VAR 0 4
54729: PPUSH
54730: EMPTY
54731: PPUSH
54732: CALL_OW 1
54736: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54737: LD_ADDR_EXP 62
54741: PUSH
54742: LD_EXP 62
54746: PPUSH
54747: LD_VAR 0 4
54751: PPUSH
54752: EMPTY
54753: PPUSH
54754: CALL_OW 1
54758: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54759: LD_ADDR_EXP 63
54763: PUSH
54764: LD_EXP 63
54768: PPUSH
54769: LD_VAR 0 4
54773: PPUSH
54774: LD_INT 0
54776: PPUSH
54777: CALL_OW 1
54781: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54782: LD_ADDR_EXP 64
54786: PUSH
54787: LD_EXP 64
54791: PPUSH
54792: LD_VAR 0 4
54796: PPUSH
54797: EMPTY
54798: PPUSH
54799: CALL_OW 1
54803: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54804: LD_ADDR_EXP 65
54808: PUSH
54809: LD_EXP 65
54813: PPUSH
54814: LD_VAR 0 4
54818: PPUSH
54819: EMPTY
54820: PPUSH
54821: CALL_OW 1
54825: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54826: LD_ADDR_EXP 66
54830: PUSH
54831: LD_EXP 66
54835: PPUSH
54836: LD_VAR 0 4
54840: PPUSH
54841: EMPTY
54842: PPUSH
54843: CALL_OW 1
54847: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54848: LD_ADDR_EXP 67
54852: PUSH
54853: LD_EXP 67
54857: PPUSH
54858: LD_VAR 0 4
54862: PPUSH
54863: EMPTY
54864: PPUSH
54865: CALL_OW 1
54869: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54870: LD_ADDR_EXP 68
54874: PUSH
54875: LD_EXP 68
54879: PPUSH
54880: LD_VAR 0 4
54884: PPUSH
54885: EMPTY
54886: PPUSH
54887: CALL_OW 1
54891: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54892: LD_ADDR_EXP 69
54896: PUSH
54897: LD_EXP 69
54901: PPUSH
54902: LD_VAR 0 4
54906: PPUSH
54907: EMPTY
54908: PPUSH
54909: CALL_OW 1
54913: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54914: LD_ADDR_EXP 70
54918: PUSH
54919: LD_EXP 70
54923: PPUSH
54924: LD_VAR 0 4
54928: PPUSH
54929: EMPTY
54930: PPUSH
54931: CALL_OW 1
54935: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54936: LD_ADDR_EXP 71
54940: PUSH
54941: LD_EXP 71
54945: PPUSH
54946: LD_VAR 0 4
54950: PPUSH
54951: EMPTY
54952: PPUSH
54953: CALL_OW 1
54957: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54958: LD_ADDR_EXP 72
54962: PUSH
54963: LD_EXP 72
54967: PPUSH
54968: LD_VAR 0 4
54972: PPUSH
54973: EMPTY
54974: PPUSH
54975: CALL_OW 1
54979: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54980: LD_ADDR_EXP 73
54984: PUSH
54985: LD_EXP 73
54989: PPUSH
54990: LD_VAR 0 4
54994: PPUSH
54995: EMPTY
54996: PPUSH
54997: CALL_OW 1
55001: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55002: LD_ADDR_EXP 74
55006: PUSH
55007: LD_EXP 74
55011: PPUSH
55012: LD_VAR 0 4
55016: PPUSH
55017: EMPTY
55018: PPUSH
55019: CALL_OW 1
55023: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55024: LD_ADDR_EXP 75
55028: PUSH
55029: LD_EXP 75
55033: PPUSH
55034: LD_VAR 0 4
55038: PPUSH
55039: EMPTY
55040: PPUSH
55041: CALL_OW 1
55045: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55046: LD_ADDR_EXP 76
55050: PUSH
55051: LD_EXP 76
55055: PPUSH
55056: LD_VAR 0 4
55060: PPUSH
55061: EMPTY
55062: PPUSH
55063: CALL_OW 1
55067: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55068: LD_ADDR_EXP 77
55072: PUSH
55073: LD_EXP 77
55077: PPUSH
55078: LD_VAR 0 4
55082: PPUSH
55083: EMPTY
55084: PPUSH
55085: CALL_OW 1
55089: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55090: LD_ADDR_EXP 79
55094: PUSH
55095: LD_EXP 79
55099: PPUSH
55100: LD_VAR 0 4
55104: PPUSH
55105: EMPTY
55106: PPUSH
55107: CALL_OW 1
55111: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55112: LD_ADDR_EXP 81
55116: PUSH
55117: LD_EXP 81
55121: PPUSH
55122: LD_VAR 0 4
55126: PPUSH
55127: EMPTY
55128: PPUSH
55129: CALL_OW 1
55133: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55134: LD_ADDR_EXP 82
55138: PUSH
55139: LD_EXP 82
55143: PPUSH
55144: LD_VAR 0 4
55148: PPUSH
55149: EMPTY
55150: PPUSH
55151: CALL_OW 1
55155: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55156: LD_ADDR_EXP 83
55160: PUSH
55161: LD_EXP 83
55165: PPUSH
55166: LD_VAR 0 4
55170: PPUSH
55171: EMPTY
55172: PPUSH
55173: CALL_OW 1
55177: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55178: LD_ADDR_EXP 84
55182: PUSH
55183: LD_EXP 84
55187: PPUSH
55188: LD_VAR 0 4
55192: PPUSH
55193: EMPTY
55194: PPUSH
55195: CALL_OW 1
55199: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55200: LD_ADDR_EXP 85
55204: PUSH
55205: LD_EXP 85
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: EMPTY
55216: PPUSH
55217: CALL_OW 1
55221: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55222: LD_ADDR_EXP 86
55226: PUSH
55227: LD_EXP 86
55231: PPUSH
55232: LD_VAR 0 4
55236: PPUSH
55237: EMPTY
55238: PPUSH
55239: CALL_OW 1
55243: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55244: LD_ADDR_EXP 87
55248: PUSH
55249: LD_EXP 87
55253: PPUSH
55254: LD_VAR 0 4
55258: PPUSH
55259: EMPTY
55260: PPUSH
55261: CALL_OW 1
55265: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55266: LD_ADDR_EXP 88
55270: PUSH
55271: LD_EXP 88
55275: PPUSH
55276: LD_VAR 0 4
55280: PPUSH
55281: EMPTY
55282: PPUSH
55283: CALL_OW 1
55287: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55288: LD_ADDR_EXP 89
55292: PUSH
55293: LD_EXP 89
55297: PPUSH
55298: LD_VAR 0 4
55302: PPUSH
55303: EMPTY
55304: PPUSH
55305: CALL_OW 1
55309: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55310: LD_ADDR_EXP 90
55314: PUSH
55315: LD_EXP 90
55319: PPUSH
55320: LD_VAR 0 4
55324: PPUSH
55325: EMPTY
55326: PPUSH
55327: CALL_OW 1
55331: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55332: LD_ADDR_EXP 91
55336: PUSH
55337: LD_EXP 91
55341: PPUSH
55342: LD_VAR 0 4
55346: PPUSH
55347: EMPTY
55348: PPUSH
55349: CALL_OW 1
55353: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55354: LD_ADDR_EXP 92
55358: PUSH
55359: LD_EXP 92
55363: PPUSH
55364: LD_VAR 0 4
55368: PPUSH
55369: EMPTY
55370: PPUSH
55371: CALL_OW 1
55375: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55376: LD_ADDR_EXP 93
55380: PUSH
55381: LD_EXP 93
55385: PPUSH
55386: LD_VAR 0 4
55390: PPUSH
55391: EMPTY
55392: PPUSH
55393: CALL_OW 1
55397: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55398: LD_ADDR_EXP 94
55402: PUSH
55403: LD_EXP 94
55407: PPUSH
55408: LD_VAR 0 4
55412: PPUSH
55413: LD_INT 0
55415: PPUSH
55416: CALL_OW 1
55420: ST_TO_ADDR
// result := base ;
55421: LD_ADDR_VAR 0 3
55425: PUSH
55426: LD_VAR 0 4
55430: ST_TO_ADDR
// end ;
55431: LD_VAR 0 3
55435: RET
// export function MC_Start ( ) ; var i ; begin
55436: LD_INT 0
55438: PPUSH
55439: PPUSH
// for i = 1 to mc_bases do
55440: LD_ADDR_VAR 0 2
55444: PUSH
55445: DOUBLE
55446: LD_INT 1
55448: DEC
55449: ST_TO_ADDR
55450: LD_EXP 52
55454: PUSH
55455: FOR_TO
55456: IFFALSE 56533
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
55458: LD_ADDR_EXP 52
55462: PUSH
55463: LD_EXP 52
55467: PPUSH
55468: LD_VAR 0 2
55472: PPUSH
55473: LD_EXP 52
55477: PUSH
55478: LD_VAR 0 2
55482: ARRAY
55483: PUSH
55484: LD_INT 0
55486: DIFF
55487: PPUSH
55488: CALL_OW 1
55492: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
55493: LD_ADDR_EXP 53
55497: PUSH
55498: LD_EXP 53
55502: PPUSH
55503: LD_VAR 0 2
55507: PPUSH
55508: EMPTY
55509: PPUSH
55510: CALL_OW 1
55514: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55515: LD_ADDR_EXP 54
55519: PUSH
55520: LD_EXP 54
55524: PPUSH
55525: LD_VAR 0 2
55529: PPUSH
55530: EMPTY
55531: PPUSH
55532: CALL_OW 1
55536: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
55537: LD_ADDR_EXP 55
55541: PUSH
55542: LD_EXP 55
55546: PPUSH
55547: LD_VAR 0 2
55551: PPUSH
55552: EMPTY
55553: PPUSH
55554: CALL_OW 1
55558: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
55559: LD_ADDR_EXP 56
55563: PUSH
55564: LD_EXP 56
55568: PPUSH
55569: LD_VAR 0 2
55573: PPUSH
55574: EMPTY
55575: PUSH
55576: EMPTY
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PPUSH
55582: CALL_OW 1
55586: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
55587: LD_ADDR_EXP 57
55591: PUSH
55592: LD_EXP 57
55596: PPUSH
55597: LD_VAR 0 2
55601: PPUSH
55602: EMPTY
55603: PPUSH
55604: CALL_OW 1
55608: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
55609: LD_ADDR_EXP 84
55613: PUSH
55614: LD_EXP 84
55618: PPUSH
55619: LD_VAR 0 2
55623: PPUSH
55624: EMPTY
55625: PPUSH
55626: CALL_OW 1
55630: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
55631: LD_ADDR_EXP 58
55635: PUSH
55636: LD_EXP 58
55640: PPUSH
55641: LD_VAR 0 2
55645: PPUSH
55646: EMPTY
55647: PPUSH
55648: CALL_OW 1
55652: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
55653: LD_ADDR_EXP 59
55657: PUSH
55658: LD_EXP 59
55662: PPUSH
55663: LD_VAR 0 2
55667: PPUSH
55668: EMPTY
55669: PPUSH
55670: CALL_OW 1
55674: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
55675: LD_ADDR_EXP 60
55679: PUSH
55680: LD_EXP 60
55684: PPUSH
55685: LD_VAR 0 2
55689: PPUSH
55690: LD_EXP 52
55694: PUSH
55695: LD_VAR 0 2
55699: ARRAY
55700: PPUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 30
55706: PUSH
55707: LD_INT 32
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 30
55716: PUSH
55717: LD_INT 33
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: PPUSH
55729: CALL_OW 72
55733: PPUSH
55734: CALL_OW 1
55738: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
55739: LD_ADDR_EXP 61
55743: PUSH
55744: LD_EXP 61
55748: PPUSH
55749: LD_VAR 0 2
55753: PPUSH
55754: LD_EXP 52
55758: PUSH
55759: LD_VAR 0 2
55763: ARRAY
55764: PPUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 30
55770: PUSH
55771: LD_INT 32
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 30
55780: PUSH
55781: LD_INT 31
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 58
55795: PUSH
55796: EMPTY
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PPUSH
55803: CALL_OW 72
55807: PPUSH
55808: CALL_OW 1
55812: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55813: LD_ADDR_EXP 62
55817: PUSH
55818: LD_EXP 62
55822: PPUSH
55823: LD_VAR 0 2
55827: PPUSH
55828: EMPTY
55829: PPUSH
55830: CALL_OW 1
55834: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55835: LD_ADDR_EXP 66
55839: PUSH
55840: LD_EXP 66
55844: PPUSH
55845: LD_VAR 0 2
55849: PPUSH
55850: EMPTY
55851: PPUSH
55852: CALL_OW 1
55856: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55857: LD_ADDR_EXP 65
55861: PUSH
55862: LD_EXP 65
55866: PPUSH
55867: LD_VAR 0 2
55871: PPUSH
55872: EMPTY
55873: PPUSH
55874: CALL_OW 1
55878: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55879: LD_ADDR_EXP 67
55883: PUSH
55884: LD_EXP 67
55888: PPUSH
55889: LD_VAR 0 2
55893: PPUSH
55894: EMPTY
55895: PPUSH
55896: CALL_OW 1
55900: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55901: LD_ADDR_EXP 68
55905: PUSH
55906: LD_EXP 68
55910: PPUSH
55911: LD_VAR 0 2
55915: PPUSH
55916: EMPTY
55917: PPUSH
55918: CALL_OW 1
55922: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55923: LD_ADDR_EXP 69
55927: PUSH
55928: LD_EXP 69
55932: PPUSH
55933: LD_VAR 0 2
55937: PPUSH
55938: EMPTY
55939: PPUSH
55940: CALL_OW 1
55944: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55945: LD_ADDR_EXP 70
55949: PUSH
55950: LD_EXP 70
55954: PPUSH
55955: LD_VAR 0 2
55959: PPUSH
55960: EMPTY
55961: PPUSH
55962: CALL_OW 1
55966: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55967: LD_ADDR_EXP 71
55971: PUSH
55972: LD_EXP 71
55976: PPUSH
55977: LD_VAR 0 2
55981: PPUSH
55982: EMPTY
55983: PPUSH
55984: CALL_OW 1
55988: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55989: LD_ADDR_EXP 72
55993: PUSH
55994: LD_EXP 72
55998: PPUSH
55999: LD_VAR 0 2
56003: PPUSH
56004: EMPTY
56005: PPUSH
56006: CALL_OW 1
56010: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
56011: LD_ADDR_EXP 73
56015: PUSH
56016: LD_EXP 73
56020: PPUSH
56021: LD_VAR 0 2
56025: PPUSH
56026: EMPTY
56027: PPUSH
56028: CALL_OW 1
56032: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56033: LD_ADDR_EXP 74
56037: PUSH
56038: LD_EXP 74
56042: PPUSH
56043: LD_VAR 0 2
56047: PPUSH
56048: EMPTY
56049: PPUSH
56050: CALL_OW 1
56054: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56055: LD_ADDR_EXP 63
56059: PUSH
56060: LD_EXP 63
56064: PPUSH
56065: LD_VAR 0 2
56069: PPUSH
56070: LD_INT 0
56072: PPUSH
56073: CALL_OW 1
56077: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56078: LD_ADDR_EXP 76
56082: PUSH
56083: LD_EXP 76
56087: PPUSH
56088: LD_VAR 0 2
56092: PPUSH
56093: LD_INT 0
56095: PPUSH
56096: CALL_OW 1
56100: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56101: LD_ADDR_EXP 64
56105: PUSH
56106: LD_EXP 64
56110: PPUSH
56111: LD_VAR 0 2
56115: PPUSH
56116: EMPTY
56117: PPUSH
56118: CALL_OW 1
56122: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56123: LD_ADDR_EXP 75
56127: PUSH
56128: LD_EXP 75
56132: PPUSH
56133: LD_VAR 0 2
56137: PPUSH
56138: LD_INT 0
56140: PPUSH
56141: CALL_OW 1
56145: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56146: LD_ADDR_EXP 77
56150: PUSH
56151: LD_EXP 77
56155: PPUSH
56156: LD_VAR 0 2
56160: PPUSH
56161: EMPTY
56162: PPUSH
56163: CALL_OW 1
56167: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56168: LD_ADDR_EXP 80
56172: PUSH
56173: LD_EXP 80
56177: PPUSH
56178: LD_VAR 0 2
56182: PPUSH
56183: LD_INT 0
56185: PPUSH
56186: CALL_OW 1
56190: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
56191: LD_ADDR_EXP 81
56195: PUSH
56196: LD_EXP 81
56200: PPUSH
56201: LD_VAR 0 2
56205: PPUSH
56206: EMPTY
56207: PPUSH
56208: CALL_OW 1
56212: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56213: LD_ADDR_EXP 82
56217: PUSH
56218: LD_EXP 82
56222: PPUSH
56223: LD_VAR 0 2
56227: PPUSH
56228: EMPTY
56229: PPUSH
56230: CALL_OW 1
56234: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56235: LD_ADDR_EXP 83
56239: PUSH
56240: LD_EXP 83
56244: PPUSH
56245: LD_VAR 0 2
56249: PPUSH
56250: EMPTY
56251: PPUSH
56252: CALL_OW 1
56256: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
56257: LD_ADDR_EXP 85
56261: PUSH
56262: LD_EXP 85
56266: PPUSH
56267: LD_VAR 0 2
56271: PPUSH
56272: LD_EXP 52
56276: PUSH
56277: LD_VAR 0 2
56281: ARRAY
56282: PPUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 30
56288: PUSH
56289: LD_INT 6
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 30
56298: PUSH
56299: LD_INT 7
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 30
56308: PUSH
56309: LD_INT 8
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: PPUSH
56322: CALL_OW 72
56326: PPUSH
56327: CALL_OW 1
56331: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
56332: LD_ADDR_EXP 86
56336: PUSH
56337: LD_EXP 86
56341: PPUSH
56342: LD_VAR 0 2
56346: PPUSH
56347: EMPTY
56348: PPUSH
56349: CALL_OW 1
56353: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
56354: LD_ADDR_EXP 87
56358: PUSH
56359: LD_EXP 87
56363: PPUSH
56364: LD_VAR 0 2
56368: PPUSH
56369: EMPTY
56370: PPUSH
56371: CALL_OW 1
56375: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
56376: LD_ADDR_EXP 88
56380: PUSH
56381: LD_EXP 88
56385: PPUSH
56386: LD_VAR 0 2
56390: PPUSH
56391: EMPTY
56392: PPUSH
56393: CALL_OW 1
56397: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
56398: LD_ADDR_EXP 89
56402: PUSH
56403: LD_EXP 89
56407: PPUSH
56408: LD_VAR 0 2
56412: PPUSH
56413: EMPTY
56414: PPUSH
56415: CALL_OW 1
56419: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
56420: LD_ADDR_EXP 90
56424: PUSH
56425: LD_EXP 90
56429: PPUSH
56430: LD_VAR 0 2
56434: PPUSH
56435: EMPTY
56436: PPUSH
56437: CALL_OW 1
56441: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
56442: LD_ADDR_EXP 91
56446: PUSH
56447: LD_EXP 91
56451: PPUSH
56452: LD_VAR 0 2
56456: PPUSH
56457: EMPTY
56458: PPUSH
56459: CALL_OW 1
56463: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
56464: LD_ADDR_EXP 92
56468: PUSH
56469: LD_EXP 92
56473: PPUSH
56474: LD_VAR 0 2
56478: PPUSH
56479: EMPTY
56480: PPUSH
56481: CALL_OW 1
56485: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
56486: LD_ADDR_EXP 93
56490: PUSH
56491: LD_EXP 93
56495: PPUSH
56496: LD_VAR 0 2
56500: PPUSH
56501: EMPTY
56502: PPUSH
56503: CALL_OW 1
56507: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
56508: LD_ADDR_EXP 94
56512: PUSH
56513: LD_EXP 94
56517: PPUSH
56518: LD_VAR 0 2
56522: PPUSH
56523: LD_INT 0
56525: PPUSH
56526: CALL_OW 1
56530: ST_TO_ADDR
// end ;
56531: GO 55455
56533: POP
56534: POP
// MC_InitSides ( ) ;
56535: CALL 56821 0 0
// MC_InitResearch ( ) ;
56539: CALL 56560 0 0
// CustomInitMacro ( ) ;
56543: CALL 5318 0 0
// skirmish := true ;
56547: LD_ADDR_EXP 50
56551: PUSH
56552: LD_INT 1
56554: ST_TO_ADDR
// end ;
56555: LD_VAR 0 1
56559: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56560: LD_INT 0
56562: PPUSH
56563: PPUSH
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
// if not mc_bases then
56568: LD_EXP 52
56572: NOT
56573: IFFALSE 56577
// exit ;
56575: GO 56816
// for i = 1 to 8 do
56577: LD_ADDR_VAR 0 2
56581: PUSH
56582: DOUBLE
56583: LD_INT 1
56585: DEC
56586: ST_TO_ADDR
56587: LD_INT 8
56589: PUSH
56590: FOR_TO
56591: IFFALSE 56617
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56593: LD_ADDR_EXP 79
56597: PUSH
56598: LD_EXP 79
56602: PPUSH
56603: LD_VAR 0 2
56607: PPUSH
56608: EMPTY
56609: PPUSH
56610: CALL_OW 1
56614: ST_TO_ADDR
56615: GO 56590
56617: POP
56618: POP
// tmp := [ ] ;
56619: LD_ADDR_VAR 0 5
56623: PUSH
56624: EMPTY
56625: ST_TO_ADDR
// for i = 1 to mc_sides do
56626: LD_ADDR_VAR 0 2
56630: PUSH
56631: DOUBLE
56632: LD_INT 1
56634: DEC
56635: ST_TO_ADDR
56636: LD_EXP 78
56640: PUSH
56641: FOR_TO
56642: IFFALSE 56700
// if not mc_sides [ i ] in tmp then
56644: LD_EXP 78
56648: PUSH
56649: LD_VAR 0 2
56653: ARRAY
56654: PUSH
56655: LD_VAR 0 5
56659: IN
56660: NOT
56661: IFFALSE 56698
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56663: LD_ADDR_VAR 0 5
56667: PUSH
56668: LD_VAR 0 5
56672: PPUSH
56673: LD_VAR 0 5
56677: PUSH
56678: LD_INT 1
56680: PLUS
56681: PPUSH
56682: LD_EXP 78
56686: PUSH
56687: LD_VAR 0 2
56691: ARRAY
56692: PPUSH
56693: CALL_OW 2
56697: ST_TO_ADDR
56698: GO 56641
56700: POP
56701: POP
// if not tmp then
56702: LD_VAR 0 5
56706: NOT
56707: IFFALSE 56711
// exit ;
56709: GO 56816
// for j in tmp do
56711: LD_ADDR_VAR 0 3
56715: PUSH
56716: LD_VAR 0 5
56720: PUSH
56721: FOR_IN
56722: IFFALSE 56814
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56724: LD_ADDR_VAR 0 6
56728: PUSH
56729: LD_INT 22
56731: PUSH
56732: LD_VAR 0 3
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PPUSH
56741: CALL_OW 69
56745: ST_TO_ADDR
// if not un then
56746: LD_VAR 0 6
56750: NOT
56751: IFFALSE 56755
// continue ;
56753: GO 56721
// nation := GetNation ( un [ 1 ] ) ;
56755: LD_ADDR_VAR 0 4
56759: PUSH
56760: LD_VAR 0 6
56764: PUSH
56765: LD_INT 1
56767: ARRAY
56768: PPUSH
56769: CALL_OW 248
56773: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56774: LD_ADDR_EXP 79
56778: PUSH
56779: LD_EXP 79
56783: PPUSH
56784: LD_VAR 0 3
56788: PPUSH
56789: LD_VAR 0 3
56793: PPUSH
56794: LD_VAR 0 4
56798: PPUSH
56799: LD_INT 1
56801: PPUSH
56802: CALL 10778 0 3
56806: PPUSH
56807: CALL_OW 1
56811: ST_TO_ADDR
// end ;
56812: GO 56721
56814: POP
56815: POP
// end ;
56816: LD_VAR 0 1
56820: RET
// export function MC_InitSides ( ) ; var i ; begin
56821: LD_INT 0
56823: PPUSH
56824: PPUSH
// if not mc_bases then
56825: LD_EXP 52
56829: NOT
56830: IFFALSE 56834
// exit ;
56832: GO 56908
// for i = 1 to mc_bases do
56834: LD_ADDR_VAR 0 2
56838: PUSH
56839: DOUBLE
56840: LD_INT 1
56842: DEC
56843: ST_TO_ADDR
56844: LD_EXP 52
56848: PUSH
56849: FOR_TO
56850: IFFALSE 56906
// if mc_bases [ i ] then
56852: LD_EXP 52
56856: PUSH
56857: LD_VAR 0 2
56861: ARRAY
56862: IFFALSE 56904
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56864: LD_ADDR_EXP 78
56868: PUSH
56869: LD_EXP 78
56873: PPUSH
56874: LD_VAR 0 2
56878: PPUSH
56879: LD_EXP 52
56883: PUSH
56884: LD_VAR 0 2
56888: ARRAY
56889: PUSH
56890: LD_INT 1
56892: ARRAY
56893: PPUSH
56894: CALL_OW 255
56898: PPUSH
56899: CALL_OW 1
56903: ST_TO_ADDR
56904: GO 56849
56906: POP
56907: POP
// end ;
56908: LD_VAR 0 1
56912: RET
// every 0 0$01 trigger skirmish do
56913: LD_EXP 50
56917: IFFALSE 57071
56919: GO 56921
56921: DISABLE
// begin enable ;
56922: ENABLE
// MC_CheckBuildings ( ) ;
56923: CALL 61560 0 0
// MC_CheckPeopleLife ( ) ;
56927: CALL 61685 0 0
// RaiseSailEvent ( 100 ) ;
56931: LD_INT 100
56933: PPUSH
56934: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
56938: LD_INT 103
56940: PPUSH
56941: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
56945: LD_INT 104
56947: PPUSH
56948: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
56952: LD_INT 105
56954: PPUSH
56955: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
56959: LD_INT 106
56961: PPUSH
56962: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
56966: LD_INT 107
56968: PPUSH
56969: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
56973: LD_INT 108
56975: PPUSH
56976: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
56980: LD_INT 109
56982: PPUSH
56983: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
56987: LD_INT 110
56989: PPUSH
56990: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
56994: LD_INT 111
56996: PPUSH
56997: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
57001: LD_INT 112
57003: PPUSH
57004: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
57008: LD_INT 113
57010: PPUSH
57011: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
57015: LD_INT 120
57017: PPUSH
57018: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57022: LD_INT 121
57024: PPUSH
57025: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57029: LD_INT 122
57031: PPUSH
57032: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57036: LD_INT 123
57038: PPUSH
57039: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57043: LD_INT 124
57045: PPUSH
57046: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57050: LD_INT 125
57052: PPUSH
57053: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57057: LD_INT 126
57059: PPUSH
57060: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57064: LD_INT 200
57066: PPUSH
57067: CALL_OW 427
// end ;
57071: END
// on SailEvent ( event ) do begin if event < 100 then
57072: LD_VAR 0 1
57076: PUSH
57077: LD_INT 100
57079: LESS
57080: IFFALSE 57091
// CustomEvent ( event ) ;
57082: LD_VAR 0 1
57086: PPUSH
57087: CALL 5310 0 1
// if event = 100 then
57091: LD_VAR 0 1
57095: PUSH
57096: LD_INT 100
57098: EQUAL
57099: IFFALSE 57105
// MC_ClassManager ( ) ;
57101: CALL 57497 0 0
// if event = 101 then
57105: LD_VAR 0 1
57109: PUSH
57110: LD_INT 101
57112: EQUAL
57113: IFFALSE 57119
// MC_RepairBuildings ( ) ;
57115: CALL 62281 0 0
// if event = 102 then
57119: LD_VAR 0 1
57123: PUSH
57124: LD_INT 102
57126: EQUAL
57127: IFFALSE 57133
// MC_Heal ( ) ;
57129: CALL 62687 0 0
// if event = 103 then
57133: LD_VAR 0 1
57137: PUSH
57138: LD_INT 103
57140: EQUAL
57141: IFFALSE 57147
// MC_Build ( ) ;
57143: CALL 63109 0 0
// if event = 104 then
57147: LD_VAR 0 1
57151: PUSH
57152: LD_INT 104
57154: EQUAL
57155: IFFALSE 57161
// MC_TurretWeapon ( ) ;
57157: CALL 64722 0 0
// if event = 105 then
57161: LD_VAR 0 1
57165: PUSH
57166: LD_INT 105
57168: EQUAL
57169: IFFALSE 57175
// MC_BuildUpgrade ( ) ;
57171: CALL 64273 0 0
// if event = 106 then
57175: LD_VAR 0 1
57179: PUSH
57180: LD_INT 106
57182: EQUAL
57183: IFFALSE 57189
// MC_PlantMines ( ) ;
57185: CALL 65152 0 0
// if event = 107 then
57189: LD_VAR 0 1
57193: PUSH
57194: LD_INT 107
57196: EQUAL
57197: IFFALSE 57203
// MC_CollectCrates ( ) ;
57199: CALL 66186 0 0
// if event = 108 then
57203: LD_VAR 0 1
57207: PUSH
57208: LD_INT 108
57210: EQUAL
57211: IFFALSE 57217
// MC_LinkRemoteControl ( ) ;
57213: CALL 67943 0 0
// if event = 109 then
57217: LD_VAR 0 1
57221: PUSH
57222: LD_INT 109
57224: EQUAL
57225: IFFALSE 57231
// MC_ProduceVehicle ( ) ;
57227: CALL 68124 0 0
// if event = 110 then
57231: LD_VAR 0 1
57235: PUSH
57236: LD_INT 110
57238: EQUAL
57239: IFFALSE 57245
// MC_SendAttack ( ) ;
57241: CALL 68605 0 0
// if event = 111 then
57245: LD_VAR 0 1
57249: PUSH
57250: LD_INT 111
57252: EQUAL
57253: IFFALSE 57259
// MC_Defend ( ) ;
57255: CALL 68713 0 0
// if event = 112 then
57259: LD_VAR 0 1
57263: PUSH
57264: LD_INT 112
57266: EQUAL
57267: IFFALSE 57273
// MC_Research ( ) ;
57269: CALL 69318 0 0
// if event = 113 then
57273: LD_VAR 0 1
57277: PUSH
57278: LD_INT 113
57280: EQUAL
57281: IFFALSE 57287
// MC_MinesTrigger ( ) ;
57283: CALL 70432 0 0
// if event = 120 then
57287: LD_VAR 0 1
57291: PUSH
57292: LD_INT 120
57294: EQUAL
57295: IFFALSE 57301
// MC_RepairVehicle ( ) ;
57297: CALL 70531 0 0
// if event = 121 then
57301: LD_VAR 0 1
57305: PUSH
57306: LD_INT 121
57308: EQUAL
57309: IFFALSE 57315
// MC_TameApe ( ) ;
57311: CALL 71238 0 0
// if event = 122 then
57315: LD_VAR 0 1
57319: PUSH
57320: LD_INT 122
57322: EQUAL
57323: IFFALSE 57329
// MC_ChangeApeClass ( ) ;
57325: CALL 72067 0 0
// if event = 123 then
57329: LD_VAR 0 1
57333: PUSH
57334: LD_INT 123
57336: EQUAL
57337: IFFALSE 57343
// MC_Bazooka ( ) ;
57339: CALL 72717 0 0
// if event = 124 then
57343: LD_VAR 0 1
57347: PUSH
57348: LD_INT 124
57350: EQUAL
57351: IFFALSE 57357
// MC_TeleportExit ( ) ;
57353: CALL 72915 0 0
// if event = 125 then
57357: LD_VAR 0 1
57361: PUSH
57362: LD_INT 125
57364: EQUAL
57365: IFFALSE 57371
// MC_Deposits ( ) ;
57367: CALL 73562 0 0
// if event = 126 then
57371: LD_VAR 0 1
57375: PUSH
57376: LD_INT 126
57378: EQUAL
57379: IFFALSE 57385
// MC_RemoteDriver ( ) ;
57381: CALL 74187 0 0
// if event = 200 then
57385: LD_VAR 0 1
57389: PUSH
57390: LD_INT 200
57392: EQUAL
57393: IFFALSE 57399
// MC_Idle ( ) ;
57395: CALL 75920 0 0
// end ;
57399: PPOPN 1
57401: END
// export function MC_Reset ( base , tag ) ; var i ; begin
57402: LD_INT 0
57404: PPUSH
57405: PPUSH
// if not mc_bases [ base ] or not tag then
57406: LD_EXP 52
57410: PUSH
57411: LD_VAR 0 1
57415: ARRAY
57416: NOT
57417: PUSH
57418: LD_VAR 0 2
57422: NOT
57423: OR
57424: IFFALSE 57428
// exit ;
57426: GO 57492
// for i in mc_bases [ base ] union mc_ape [ base ] do
57428: LD_ADDR_VAR 0 4
57432: PUSH
57433: LD_EXP 52
57437: PUSH
57438: LD_VAR 0 1
57442: ARRAY
57443: PUSH
57444: LD_EXP 81
57448: PUSH
57449: LD_VAR 0 1
57453: ARRAY
57454: UNION
57455: PUSH
57456: FOR_IN
57457: IFFALSE 57490
// if GetTag ( i ) = tag then
57459: LD_VAR 0 4
57463: PPUSH
57464: CALL_OW 110
57468: PUSH
57469: LD_VAR 0 2
57473: EQUAL
57474: IFFALSE 57488
// SetTag ( i , 0 ) ;
57476: LD_VAR 0 4
57480: PPUSH
57481: LD_INT 0
57483: PPUSH
57484: CALL_OW 109
57488: GO 57456
57490: POP
57491: POP
// end ;
57492: LD_VAR 0 3
57496: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
57497: LD_INT 0
57499: PPUSH
57500: PPUSH
57501: PPUSH
57502: PPUSH
57503: PPUSH
57504: PPUSH
57505: PPUSH
57506: PPUSH
// if not mc_bases then
57507: LD_EXP 52
57511: NOT
57512: IFFALSE 57516
// exit ;
57514: GO 57974
// for i = 1 to mc_bases do
57516: LD_ADDR_VAR 0 2
57520: PUSH
57521: DOUBLE
57522: LD_INT 1
57524: DEC
57525: ST_TO_ADDR
57526: LD_EXP 52
57530: PUSH
57531: FOR_TO
57532: IFFALSE 57972
// begin tmp := MC_ClassCheckReq ( i ) ;
57534: LD_ADDR_VAR 0 4
57538: PUSH
57539: LD_VAR 0 2
57543: PPUSH
57544: CALL 57979 0 1
57548: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
57549: LD_ADDR_EXP 93
57553: PUSH
57554: LD_EXP 93
57558: PPUSH
57559: LD_VAR 0 2
57563: PPUSH
57564: LD_VAR 0 4
57568: PPUSH
57569: CALL_OW 1
57573: ST_TO_ADDR
// if not tmp then
57574: LD_VAR 0 4
57578: NOT
57579: IFFALSE 57583
// continue ;
57581: GO 57531
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
57583: LD_ADDR_VAR 0 6
57587: PUSH
57588: LD_EXP 52
57592: PUSH
57593: LD_VAR 0 2
57597: ARRAY
57598: PPUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 30
57604: PUSH
57605: LD_INT 4
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 30
57614: PUSH
57615: LD_INT 5
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: PPUSH
57627: CALL_OW 72
57631: PUSH
57632: LD_EXP 52
57636: PUSH
57637: LD_VAR 0 2
57641: ARRAY
57642: PPUSH
57643: LD_INT 2
57645: PUSH
57646: LD_INT 30
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 30
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: PPUSH
57671: CALL_OW 72
57675: PUSH
57676: LD_EXP 52
57680: PUSH
57681: LD_VAR 0 2
57685: ARRAY
57686: PPUSH
57687: LD_INT 30
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PPUSH
57697: CALL_OW 72
57701: PUSH
57702: LD_EXP 52
57706: PUSH
57707: LD_VAR 0 2
57711: ARRAY
57712: PPUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 30
57718: PUSH
57719: LD_INT 6
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 30
57728: PUSH
57729: LD_INT 7
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 30
57738: PUSH
57739: LD_INT 8
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: PPUSH
57752: CALL_OW 72
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// for j = 1 to 4 do
57763: LD_ADDR_VAR 0 3
57767: PUSH
57768: DOUBLE
57769: LD_INT 1
57771: DEC
57772: ST_TO_ADDR
57773: LD_INT 4
57775: PUSH
57776: FOR_TO
57777: IFFALSE 57968
// begin if not tmp [ j ] then
57779: LD_VAR 0 4
57783: PUSH
57784: LD_VAR 0 3
57788: ARRAY
57789: NOT
57790: IFFALSE 57794
// continue ;
57792: GO 57776
// for p in tmp [ j ] do
57794: LD_ADDR_VAR 0 5
57798: PUSH
57799: LD_VAR 0 4
57803: PUSH
57804: LD_VAR 0 3
57808: ARRAY
57809: PUSH
57810: FOR_IN
57811: IFFALSE 57964
// begin if not b [ j ] then
57813: LD_VAR 0 6
57817: PUSH
57818: LD_VAR 0 3
57822: ARRAY
57823: NOT
57824: IFFALSE 57828
// break ;
57826: GO 57964
// e := 0 ;
57828: LD_ADDR_VAR 0 7
57832: PUSH
57833: LD_INT 0
57835: ST_TO_ADDR
// for k in b [ j ] do
57836: LD_ADDR_VAR 0 8
57840: PUSH
57841: LD_VAR 0 6
57845: PUSH
57846: LD_VAR 0 3
57850: ARRAY
57851: PUSH
57852: FOR_IN
57853: IFFALSE 57880
// if IsNotFull ( k ) then
57855: LD_VAR 0 8
57859: PPUSH
57860: CALL 14767 0 1
57864: IFFALSE 57878
// begin e := k ;
57866: LD_ADDR_VAR 0 7
57870: PUSH
57871: LD_VAR 0 8
57875: ST_TO_ADDR
// break ;
57876: GO 57880
// end ;
57878: GO 57852
57880: POP
57881: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57882: LD_VAR 0 7
57886: PUSH
57887: LD_VAR 0 5
57891: PPUSH
57892: LD_VAR 0 7
57896: PPUSH
57897: CALL 51825 0 2
57901: NOT
57902: AND
57903: IFFALSE 57962
// begin if IsInUnit ( p ) then
57905: LD_VAR 0 5
57909: PPUSH
57910: CALL_OW 310
57914: IFFALSE 57925
// ComExitBuilding ( p ) ;
57916: LD_VAR 0 5
57920: PPUSH
57921: CALL_OW 122
// ComEnterUnit ( p , e ) ;
57925: LD_VAR 0 5
57929: PPUSH
57930: LD_VAR 0 7
57934: PPUSH
57935: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
57939: LD_VAR 0 5
57943: PPUSH
57944: LD_VAR 0 3
57948: PPUSH
57949: CALL_OW 183
// AddComExitBuilding ( p ) ;
57953: LD_VAR 0 5
57957: PPUSH
57958: CALL_OW 182
// end ; end ;
57962: GO 57810
57964: POP
57965: POP
// end ;
57966: GO 57776
57968: POP
57969: POP
// end ;
57970: GO 57531
57972: POP
57973: POP
// end ;
57974: LD_VAR 0 1
57978: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57979: LD_INT 0
57981: PPUSH
57982: PPUSH
57983: PPUSH
57984: PPUSH
57985: PPUSH
57986: PPUSH
57987: PPUSH
57988: PPUSH
57989: PPUSH
57990: PPUSH
57991: PPUSH
57992: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57993: LD_VAR 0 1
57997: NOT
57998: PUSH
57999: LD_EXP 52
58003: PUSH
58004: LD_VAR 0 1
58008: ARRAY
58009: NOT
58010: OR
58011: PUSH
58012: LD_EXP 52
58016: PUSH
58017: LD_VAR 0 1
58021: ARRAY
58022: PPUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 30
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 30
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: PPUSH
58051: CALL_OW 72
58055: NOT
58056: OR
58057: IFFALSE 58061
// exit ;
58059: GO 61555
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58061: LD_ADDR_VAR 0 4
58065: PUSH
58066: LD_EXP 52
58070: PUSH
58071: LD_VAR 0 1
58075: ARRAY
58076: PPUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 25
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 25
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 25
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 25
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 25
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 25
58132: PUSH
58133: LD_INT 8
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 25
58142: PUSH
58143: LD_INT 9
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: PPUSH
58160: CALL_OW 72
58164: ST_TO_ADDR
// for i in tmp do
58165: LD_ADDR_VAR 0 3
58169: PUSH
58170: LD_VAR 0 4
58174: PUSH
58175: FOR_IN
58176: IFFALSE 58207
// if GetTag ( i ) then
58178: LD_VAR 0 3
58182: PPUSH
58183: CALL_OW 110
58187: IFFALSE 58205
// tmp := tmp diff i ;
58189: LD_ADDR_VAR 0 4
58193: PUSH
58194: LD_VAR 0 4
58198: PUSH
58199: LD_VAR 0 3
58203: DIFF
58204: ST_TO_ADDR
58205: GO 58175
58207: POP
58208: POP
// if not tmp then
58209: LD_VAR 0 4
58213: NOT
58214: IFFALSE 58218
// exit ;
58216: GO 61555
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58218: LD_ADDR_VAR 0 5
58222: PUSH
58223: LD_EXP 52
58227: PUSH
58228: LD_VAR 0 1
58232: ARRAY
58233: PPUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 25
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 25
58249: PUSH
58250: LD_INT 5
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 25
58259: PUSH
58260: LD_INT 8
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 25
58269: PUSH
58270: LD_INT 9
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: PPUSH
58284: CALL_OW 72
58288: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
58289: LD_ADDR_VAR 0 6
58293: PUSH
58294: LD_EXP 52
58298: PUSH
58299: LD_VAR 0 1
58303: ARRAY
58304: PPUSH
58305: LD_INT 25
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PPUSH
58315: CALL_OW 72
58319: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
58320: LD_ADDR_VAR 0 7
58324: PUSH
58325: LD_EXP 52
58329: PUSH
58330: LD_VAR 0 1
58334: ARRAY
58335: PPUSH
58336: LD_INT 25
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PPUSH
58346: CALL_OW 72
58350: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
58351: LD_ADDR_VAR 0 8
58355: PUSH
58356: LD_EXP 52
58360: PUSH
58361: LD_VAR 0 1
58365: ARRAY
58366: PPUSH
58367: LD_INT 25
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 24
58379: PUSH
58380: LD_INT 251
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PPUSH
58391: CALL_OW 72
58395: ST_TO_ADDR
// if mc_scan [ base ] then
58396: LD_EXP 75
58400: PUSH
58401: LD_VAR 0 1
58405: ARRAY
58406: IFFALSE 58867
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
58408: LD_ADDR_EXP 94
58412: PUSH
58413: LD_EXP 94
58417: PPUSH
58418: LD_VAR 0 1
58422: PPUSH
58423: LD_INT 4
58425: PPUSH
58426: CALL_OW 1
58430: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58431: LD_ADDR_VAR 0 12
58435: PUSH
58436: LD_EXP 52
58440: PUSH
58441: LD_VAR 0 1
58445: ARRAY
58446: PPUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 30
58452: PUSH
58453: LD_INT 4
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 30
58462: PUSH
58463: LD_INT 5
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: PPUSH
58475: CALL_OW 72
58479: ST_TO_ADDR
// if not b then
58480: LD_VAR 0 12
58484: NOT
58485: IFFALSE 58489
// exit ;
58487: GO 61555
// p := [ ] ;
58489: LD_ADDR_VAR 0 11
58493: PUSH
58494: EMPTY
58495: ST_TO_ADDR
// if sci >= 2 then
58496: LD_VAR 0 8
58500: PUSH
58501: LD_INT 2
58503: GREATEREQUAL
58504: IFFALSE 58535
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
58506: LD_ADDR_VAR 0 8
58510: PUSH
58511: LD_VAR 0 8
58515: PUSH
58516: LD_INT 1
58518: ARRAY
58519: PUSH
58520: LD_VAR 0 8
58524: PUSH
58525: LD_INT 2
58527: ARRAY
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: ST_TO_ADDR
58533: GO 58596
// if sci = 1 then
58535: LD_VAR 0 8
58539: PUSH
58540: LD_INT 1
58542: EQUAL
58543: IFFALSE 58564
// sci := [ sci [ 1 ] ] else
58545: LD_ADDR_VAR 0 8
58549: PUSH
58550: LD_VAR 0 8
58554: PUSH
58555: LD_INT 1
58557: ARRAY
58558: PUSH
58559: EMPTY
58560: LIST
58561: ST_TO_ADDR
58562: GO 58596
// if sci = 0 then
58564: LD_VAR 0 8
58568: PUSH
58569: LD_INT 0
58571: EQUAL
58572: IFFALSE 58596
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
58574: LD_ADDR_VAR 0 11
58578: PUSH
58579: LD_VAR 0 4
58583: PPUSH
58584: LD_INT 4
58586: PPUSH
58587: CALL 51688 0 2
58591: PUSH
58592: LD_INT 1
58594: ARRAY
58595: ST_TO_ADDR
// if eng > 4 then
58596: LD_VAR 0 6
58600: PUSH
58601: LD_INT 4
58603: GREATER
58604: IFFALSE 58650
// for i = eng downto 4 do
58606: LD_ADDR_VAR 0 3
58610: PUSH
58611: DOUBLE
58612: LD_VAR 0 6
58616: INC
58617: ST_TO_ADDR
58618: LD_INT 4
58620: PUSH
58621: FOR_DOWNTO
58622: IFFALSE 58648
// eng := eng diff eng [ i ] ;
58624: LD_ADDR_VAR 0 6
58628: PUSH
58629: LD_VAR 0 6
58633: PUSH
58634: LD_VAR 0 6
58638: PUSH
58639: LD_VAR 0 3
58643: ARRAY
58644: DIFF
58645: ST_TO_ADDR
58646: GO 58621
58648: POP
58649: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
58650: LD_ADDR_VAR 0 4
58654: PUSH
58655: LD_VAR 0 4
58659: PUSH
58660: LD_VAR 0 5
58664: PUSH
58665: LD_VAR 0 6
58669: UNION
58670: PUSH
58671: LD_VAR 0 7
58675: UNION
58676: PUSH
58677: LD_VAR 0 8
58681: UNION
58682: DIFF
58683: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
58684: LD_ADDR_VAR 0 13
58688: PUSH
58689: LD_EXP 52
58693: PUSH
58694: LD_VAR 0 1
58698: ARRAY
58699: PPUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 30
58705: PUSH
58706: LD_INT 32
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 30
58715: PUSH
58716: LD_INT 31
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: PPUSH
58728: CALL_OW 72
58732: PUSH
58733: LD_EXP 52
58737: PUSH
58738: LD_VAR 0 1
58742: ARRAY
58743: PPUSH
58744: LD_INT 2
58746: PUSH
58747: LD_INT 30
58749: PUSH
58750: LD_INT 4
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 30
58759: PUSH
58760: LD_INT 5
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: PPUSH
58772: CALL_OW 72
58776: PUSH
58777: LD_INT 6
58779: MUL
58780: PLUS
58781: ST_TO_ADDR
// if bcount < tmp then
58782: LD_VAR 0 13
58786: PUSH
58787: LD_VAR 0 4
58791: LESS
58792: IFFALSE 58838
// for i = tmp downto bcount do
58794: LD_ADDR_VAR 0 3
58798: PUSH
58799: DOUBLE
58800: LD_VAR 0 4
58804: INC
58805: ST_TO_ADDR
58806: LD_VAR 0 13
58810: PUSH
58811: FOR_DOWNTO
58812: IFFALSE 58836
// tmp := Delete ( tmp , tmp ) ;
58814: LD_ADDR_VAR 0 4
58818: PUSH
58819: LD_VAR 0 4
58823: PPUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: CALL_OW 3
58833: ST_TO_ADDR
58834: GO 58811
58836: POP
58837: POP
// result := [ tmp , 0 , 0 , p ] ;
58838: LD_ADDR_VAR 0 2
58842: PUSH
58843: LD_VAR 0 4
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_VAR 0 11
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: ST_TO_ADDR
// exit ;
58865: GO 61555
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58867: LD_EXP 52
58871: PUSH
58872: LD_VAR 0 1
58876: ARRAY
58877: PPUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 30
58883: PUSH
58884: LD_INT 6
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 30
58893: PUSH
58894: LD_INT 7
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 30
58903: PUSH
58904: LD_INT 8
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: PPUSH
58917: CALL_OW 72
58921: NOT
58922: PUSH
58923: LD_EXP 52
58927: PUSH
58928: LD_VAR 0 1
58932: ARRAY
58933: PPUSH
58934: LD_INT 30
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PPUSH
58944: CALL_OW 72
58948: NOT
58949: AND
58950: IFFALSE 59022
// begin if eng = tmp then
58952: LD_VAR 0 6
58956: PUSH
58957: LD_VAR 0 4
58961: EQUAL
58962: IFFALSE 58966
// exit ;
58964: GO 61555
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58966: LD_ADDR_EXP 94
58970: PUSH
58971: LD_EXP 94
58975: PPUSH
58976: LD_VAR 0 1
58980: PPUSH
58981: LD_INT 1
58983: PPUSH
58984: CALL_OW 1
58988: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58989: LD_ADDR_VAR 0 2
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_VAR 0 4
59001: PUSH
59002: LD_VAR 0 6
59006: DIFF
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: ST_TO_ADDR
// exit ;
59020: GO 61555
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59022: LD_EXP 79
59026: PUSH
59027: LD_EXP 78
59031: PUSH
59032: LD_VAR 0 1
59036: ARRAY
59037: ARRAY
59038: PUSH
59039: LD_EXP 52
59043: PUSH
59044: LD_VAR 0 1
59048: ARRAY
59049: PPUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 30
59055: PUSH
59056: LD_INT 6
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 30
59065: PUSH
59066: LD_INT 7
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 30
59075: PUSH
59076: LD_INT 8
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: PPUSH
59089: CALL_OW 72
59093: AND
59094: PUSH
59095: LD_EXP 52
59099: PUSH
59100: LD_VAR 0 1
59104: ARRAY
59105: PPUSH
59106: LD_INT 30
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PPUSH
59116: CALL_OW 72
59120: NOT
59121: AND
59122: IFFALSE 59336
// begin if sci >= 6 then
59124: LD_VAR 0 8
59128: PUSH
59129: LD_INT 6
59131: GREATEREQUAL
59132: IFFALSE 59136
// exit ;
59134: GO 61555
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59136: LD_ADDR_EXP 94
59140: PUSH
59141: LD_EXP 94
59145: PPUSH
59146: LD_VAR 0 1
59150: PPUSH
59151: LD_INT 2
59153: PPUSH
59154: CALL_OW 1
59158: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59159: LD_ADDR_VAR 0 9
59163: PUSH
59164: LD_VAR 0 4
59168: PUSH
59169: LD_VAR 0 8
59173: DIFF
59174: PPUSH
59175: LD_INT 4
59177: PPUSH
59178: CALL 51688 0 2
59182: ST_TO_ADDR
// p := [ ] ;
59183: LD_ADDR_VAR 0 11
59187: PUSH
59188: EMPTY
59189: ST_TO_ADDR
// if sci < 6 and sort > 6 then
59190: LD_VAR 0 8
59194: PUSH
59195: LD_INT 6
59197: LESS
59198: PUSH
59199: LD_VAR 0 9
59203: PUSH
59204: LD_INT 6
59206: GREATER
59207: AND
59208: IFFALSE 59289
// begin for i = 1 to 6 - sci do
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: DOUBLE
59216: LD_INT 1
59218: DEC
59219: ST_TO_ADDR
59220: LD_INT 6
59222: PUSH
59223: LD_VAR 0 8
59227: MINUS
59228: PUSH
59229: FOR_TO
59230: IFFALSE 59285
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
59232: LD_ADDR_VAR 0 11
59236: PUSH
59237: LD_VAR 0 11
59241: PPUSH
59242: LD_VAR 0 11
59246: PUSH
59247: LD_INT 1
59249: PLUS
59250: PPUSH
59251: LD_VAR 0 9
59255: PUSH
59256: LD_INT 1
59258: ARRAY
59259: PPUSH
59260: CALL_OW 2
59264: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
59265: LD_ADDR_VAR 0 9
59269: PUSH
59270: LD_VAR 0 9
59274: PPUSH
59275: LD_INT 1
59277: PPUSH
59278: CALL_OW 3
59282: ST_TO_ADDR
// end ;
59283: GO 59229
59285: POP
59286: POP
// end else
59287: GO 59309
// if sort then
59289: LD_VAR 0 9
59293: IFFALSE 59309
// p := sort [ 1 ] ;
59295: LD_ADDR_VAR 0 11
59299: PUSH
59300: LD_VAR 0 9
59304: PUSH
59305: LD_INT 1
59307: ARRAY
59308: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
59309: LD_ADDR_VAR 0 2
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_VAR 0 11
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// exit ;
59334: GO 61555
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59336: LD_EXP 79
59340: PUSH
59341: LD_EXP 78
59345: PUSH
59346: LD_VAR 0 1
59350: ARRAY
59351: ARRAY
59352: PUSH
59353: LD_EXP 52
59357: PUSH
59358: LD_VAR 0 1
59362: ARRAY
59363: PPUSH
59364: LD_INT 2
59366: PUSH
59367: LD_INT 30
59369: PUSH
59370: LD_INT 6
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 30
59379: PUSH
59380: LD_INT 7
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 30
59389: PUSH
59390: LD_INT 8
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: PPUSH
59403: CALL_OW 72
59407: AND
59408: PUSH
59409: LD_EXP 52
59413: PUSH
59414: LD_VAR 0 1
59418: ARRAY
59419: PPUSH
59420: LD_INT 30
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PPUSH
59430: CALL_OW 72
59434: AND
59435: IFFALSE 60169
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
59437: LD_ADDR_EXP 94
59441: PUSH
59442: LD_EXP 94
59446: PPUSH
59447: LD_VAR 0 1
59451: PPUSH
59452: LD_INT 3
59454: PPUSH
59455: CALL_OW 1
59459: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59460: LD_ADDR_VAR 0 2
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// if not eng then
59483: LD_VAR 0 6
59487: NOT
59488: IFFALSE 59551
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
59490: LD_ADDR_VAR 0 11
59494: PUSH
59495: LD_VAR 0 4
59499: PPUSH
59500: LD_INT 2
59502: PPUSH
59503: CALL 51688 0 2
59507: PUSH
59508: LD_INT 1
59510: ARRAY
59511: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
59512: LD_ADDR_VAR 0 2
59516: PUSH
59517: LD_VAR 0 2
59521: PPUSH
59522: LD_INT 2
59524: PPUSH
59525: LD_VAR 0 11
59529: PPUSH
59530: CALL_OW 1
59534: ST_TO_ADDR
// tmp := tmp diff p ;
59535: LD_ADDR_VAR 0 4
59539: PUSH
59540: LD_VAR 0 4
59544: PUSH
59545: LD_VAR 0 11
59549: DIFF
59550: ST_TO_ADDR
// end ; if tmp and sci < 6 then
59551: LD_VAR 0 4
59555: PUSH
59556: LD_VAR 0 8
59560: PUSH
59561: LD_INT 6
59563: LESS
59564: AND
59565: IFFALSE 59753
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
59567: LD_ADDR_VAR 0 9
59571: PUSH
59572: LD_VAR 0 4
59576: PUSH
59577: LD_VAR 0 8
59581: PUSH
59582: LD_VAR 0 7
59586: UNION
59587: DIFF
59588: PPUSH
59589: LD_INT 4
59591: PPUSH
59592: CALL 51688 0 2
59596: ST_TO_ADDR
// p := [ ] ;
59597: LD_ADDR_VAR 0 11
59601: PUSH
59602: EMPTY
59603: ST_TO_ADDR
// if sort then
59604: LD_VAR 0 9
59608: IFFALSE 59724
// for i = 1 to 6 - sci do
59610: LD_ADDR_VAR 0 3
59614: PUSH
59615: DOUBLE
59616: LD_INT 1
59618: DEC
59619: ST_TO_ADDR
59620: LD_INT 6
59622: PUSH
59623: LD_VAR 0 8
59627: MINUS
59628: PUSH
59629: FOR_TO
59630: IFFALSE 59722
// begin if i = sort then
59632: LD_VAR 0 3
59636: PUSH
59637: LD_VAR 0 9
59641: EQUAL
59642: IFFALSE 59646
// break ;
59644: GO 59722
// if GetClass ( i ) = 4 then
59646: LD_VAR 0 3
59650: PPUSH
59651: CALL_OW 257
59655: PUSH
59656: LD_INT 4
59658: EQUAL
59659: IFFALSE 59663
// continue ;
59661: GO 59629
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59663: LD_ADDR_VAR 0 11
59667: PUSH
59668: LD_VAR 0 11
59672: PPUSH
59673: LD_VAR 0 11
59677: PUSH
59678: LD_INT 1
59680: PLUS
59681: PPUSH
59682: LD_VAR 0 9
59686: PUSH
59687: LD_VAR 0 3
59691: ARRAY
59692: PPUSH
59693: CALL_OW 2
59697: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59698: LD_ADDR_VAR 0 4
59702: PUSH
59703: LD_VAR 0 4
59707: PUSH
59708: LD_VAR 0 9
59712: PUSH
59713: LD_VAR 0 3
59717: ARRAY
59718: DIFF
59719: ST_TO_ADDR
// end ;
59720: GO 59629
59722: POP
59723: POP
// if p then
59724: LD_VAR 0 11
59728: IFFALSE 59753
// result := Replace ( result , 4 , p ) ;
59730: LD_ADDR_VAR 0 2
59734: PUSH
59735: LD_VAR 0 2
59739: PPUSH
59740: LD_INT 4
59742: PPUSH
59743: LD_VAR 0 11
59747: PPUSH
59748: CALL_OW 1
59752: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59753: LD_VAR 0 4
59757: PUSH
59758: LD_VAR 0 7
59762: PUSH
59763: LD_INT 6
59765: LESS
59766: AND
59767: IFFALSE 59955
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59769: LD_ADDR_VAR 0 9
59773: PUSH
59774: LD_VAR 0 4
59778: PUSH
59779: LD_VAR 0 8
59783: PUSH
59784: LD_VAR 0 7
59788: UNION
59789: DIFF
59790: PPUSH
59791: LD_INT 3
59793: PPUSH
59794: CALL 51688 0 2
59798: ST_TO_ADDR
// p := [ ] ;
59799: LD_ADDR_VAR 0 11
59803: PUSH
59804: EMPTY
59805: ST_TO_ADDR
// if sort then
59806: LD_VAR 0 9
59810: IFFALSE 59926
// for i = 1 to 6 - mech do
59812: LD_ADDR_VAR 0 3
59816: PUSH
59817: DOUBLE
59818: LD_INT 1
59820: DEC
59821: ST_TO_ADDR
59822: LD_INT 6
59824: PUSH
59825: LD_VAR 0 7
59829: MINUS
59830: PUSH
59831: FOR_TO
59832: IFFALSE 59924
// begin if i = sort then
59834: LD_VAR 0 3
59838: PUSH
59839: LD_VAR 0 9
59843: EQUAL
59844: IFFALSE 59848
// break ;
59846: GO 59924
// if GetClass ( i ) = 3 then
59848: LD_VAR 0 3
59852: PPUSH
59853: CALL_OW 257
59857: PUSH
59858: LD_INT 3
59860: EQUAL
59861: IFFALSE 59865
// continue ;
59863: GO 59831
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59865: LD_ADDR_VAR 0 11
59869: PUSH
59870: LD_VAR 0 11
59874: PPUSH
59875: LD_VAR 0 11
59879: PUSH
59880: LD_INT 1
59882: PLUS
59883: PPUSH
59884: LD_VAR 0 9
59888: PUSH
59889: LD_VAR 0 3
59893: ARRAY
59894: PPUSH
59895: CALL_OW 2
59899: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59900: LD_ADDR_VAR 0 4
59904: PUSH
59905: LD_VAR 0 4
59909: PUSH
59910: LD_VAR 0 9
59914: PUSH
59915: LD_VAR 0 3
59919: ARRAY
59920: DIFF
59921: ST_TO_ADDR
// end ;
59922: GO 59831
59924: POP
59925: POP
// if p then
59926: LD_VAR 0 11
59930: IFFALSE 59955
// result := Replace ( result , 3 , p ) ;
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: LD_VAR 0 2
59941: PPUSH
59942: LD_INT 3
59944: PPUSH
59945: LD_VAR 0 11
59949: PPUSH
59950: CALL_OW 1
59954: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59955: LD_VAR 0 4
59959: PUSH
59960: LD_INT 6
59962: GREATER
59963: PUSH
59964: LD_VAR 0 6
59968: PUSH
59969: LD_INT 6
59971: LESS
59972: AND
59973: IFFALSE 60167
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59975: LD_ADDR_VAR 0 9
59979: PUSH
59980: LD_VAR 0 4
59984: PUSH
59985: LD_VAR 0 8
59989: PUSH
59990: LD_VAR 0 7
59994: UNION
59995: PUSH
59996: LD_VAR 0 6
60000: UNION
60001: DIFF
60002: PPUSH
60003: LD_INT 2
60005: PPUSH
60006: CALL 51688 0 2
60010: ST_TO_ADDR
// p := [ ] ;
60011: LD_ADDR_VAR 0 11
60015: PUSH
60016: EMPTY
60017: ST_TO_ADDR
// if sort then
60018: LD_VAR 0 9
60022: IFFALSE 60138
// for i = 1 to 6 - eng do
60024: LD_ADDR_VAR 0 3
60028: PUSH
60029: DOUBLE
60030: LD_INT 1
60032: DEC
60033: ST_TO_ADDR
60034: LD_INT 6
60036: PUSH
60037: LD_VAR 0 6
60041: MINUS
60042: PUSH
60043: FOR_TO
60044: IFFALSE 60136
// begin if i = sort then
60046: LD_VAR 0 3
60050: PUSH
60051: LD_VAR 0 9
60055: EQUAL
60056: IFFALSE 60060
// break ;
60058: GO 60136
// if GetClass ( i ) = 2 then
60060: LD_VAR 0 3
60064: PPUSH
60065: CALL_OW 257
60069: PUSH
60070: LD_INT 2
60072: EQUAL
60073: IFFALSE 60077
// continue ;
60075: GO 60043
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60077: LD_ADDR_VAR 0 11
60081: PUSH
60082: LD_VAR 0 11
60086: PPUSH
60087: LD_VAR 0 11
60091: PUSH
60092: LD_INT 1
60094: PLUS
60095: PPUSH
60096: LD_VAR 0 9
60100: PUSH
60101: LD_VAR 0 3
60105: ARRAY
60106: PPUSH
60107: CALL_OW 2
60111: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60112: LD_ADDR_VAR 0 4
60116: PUSH
60117: LD_VAR 0 4
60121: PUSH
60122: LD_VAR 0 9
60126: PUSH
60127: LD_VAR 0 3
60131: ARRAY
60132: DIFF
60133: ST_TO_ADDR
// end ;
60134: GO 60043
60136: POP
60137: POP
// if p then
60138: LD_VAR 0 11
60142: IFFALSE 60167
// result := Replace ( result , 2 , p ) ;
60144: LD_ADDR_VAR 0 2
60148: PUSH
60149: LD_VAR 0 2
60153: PPUSH
60154: LD_INT 2
60156: PPUSH
60157: LD_VAR 0 11
60161: PPUSH
60162: CALL_OW 1
60166: ST_TO_ADDR
// end ; exit ;
60167: GO 61555
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
60169: LD_EXP 79
60173: PUSH
60174: LD_EXP 78
60178: PUSH
60179: LD_VAR 0 1
60183: ARRAY
60184: ARRAY
60185: NOT
60186: PUSH
60187: LD_EXP 52
60191: PUSH
60192: LD_VAR 0 1
60196: ARRAY
60197: PPUSH
60198: LD_INT 30
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PPUSH
60208: CALL_OW 72
60212: AND
60213: PUSH
60214: LD_EXP 57
60218: PUSH
60219: LD_VAR 0 1
60223: ARRAY
60224: AND
60225: IFFALSE 60833
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
60227: LD_ADDR_EXP 94
60231: PUSH
60232: LD_EXP 94
60236: PPUSH
60237: LD_VAR 0 1
60241: PPUSH
60242: LD_INT 5
60244: PPUSH
60245: CALL_OW 1
60249: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60250: LD_ADDR_VAR 0 2
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: ST_TO_ADDR
// if sci > 1 then
60273: LD_VAR 0 8
60277: PUSH
60278: LD_INT 1
60280: GREATER
60281: IFFALSE 60309
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
60283: LD_ADDR_VAR 0 4
60287: PUSH
60288: LD_VAR 0 4
60292: PUSH
60293: LD_VAR 0 8
60297: PUSH
60298: LD_VAR 0 8
60302: PUSH
60303: LD_INT 1
60305: ARRAY
60306: DIFF
60307: DIFF
60308: ST_TO_ADDR
// if tmp and not sci then
60309: LD_VAR 0 4
60313: PUSH
60314: LD_VAR 0 8
60318: NOT
60319: AND
60320: IFFALSE 60389
// begin sort := SortBySkill ( tmp , 4 ) ;
60322: LD_ADDR_VAR 0 9
60326: PUSH
60327: LD_VAR 0 4
60331: PPUSH
60332: LD_INT 4
60334: PPUSH
60335: CALL 51688 0 2
60339: ST_TO_ADDR
// if sort then
60340: LD_VAR 0 9
60344: IFFALSE 60360
// p := sort [ 1 ] ;
60346: LD_ADDR_VAR 0 11
60350: PUSH
60351: LD_VAR 0 9
60355: PUSH
60356: LD_INT 1
60358: ARRAY
60359: ST_TO_ADDR
// if p then
60360: LD_VAR 0 11
60364: IFFALSE 60389
// result := Replace ( result , 4 , p ) ;
60366: LD_ADDR_VAR 0 2
60370: PUSH
60371: LD_VAR 0 2
60375: PPUSH
60376: LD_INT 4
60378: PPUSH
60379: LD_VAR 0 11
60383: PPUSH
60384: CALL_OW 1
60388: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60389: LD_ADDR_VAR 0 4
60393: PUSH
60394: LD_VAR 0 4
60398: PUSH
60399: LD_VAR 0 7
60403: DIFF
60404: ST_TO_ADDR
// if tmp and mech < 6 then
60405: LD_VAR 0 4
60409: PUSH
60410: LD_VAR 0 7
60414: PUSH
60415: LD_INT 6
60417: LESS
60418: AND
60419: IFFALSE 60607
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60421: LD_ADDR_VAR 0 9
60425: PUSH
60426: LD_VAR 0 4
60430: PUSH
60431: LD_VAR 0 8
60435: PUSH
60436: LD_VAR 0 7
60440: UNION
60441: DIFF
60442: PPUSH
60443: LD_INT 3
60445: PPUSH
60446: CALL 51688 0 2
60450: ST_TO_ADDR
// p := [ ] ;
60451: LD_ADDR_VAR 0 11
60455: PUSH
60456: EMPTY
60457: ST_TO_ADDR
// if sort then
60458: LD_VAR 0 9
60462: IFFALSE 60578
// for i = 1 to 6 - mech do
60464: LD_ADDR_VAR 0 3
60468: PUSH
60469: DOUBLE
60470: LD_INT 1
60472: DEC
60473: ST_TO_ADDR
60474: LD_INT 6
60476: PUSH
60477: LD_VAR 0 7
60481: MINUS
60482: PUSH
60483: FOR_TO
60484: IFFALSE 60576
// begin if i = sort then
60486: LD_VAR 0 3
60490: PUSH
60491: LD_VAR 0 9
60495: EQUAL
60496: IFFALSE 60500
// break ;
60498: GO 60576
// if GetClass ( i ) = 3 then
60500: LD_VAR 0 3
60504: PPUSH
60505: CALL_OW 257
60509: PUSH
60510: LD_INT 3
60512: EQUAL
60513: IFFALSE 60517
// continue ;
60515: GO 60483
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60517: LD_ADDR_VAR 0 11
60521: PUSH
60522: LD_VAR 0 11
60526: PPUSH
60527: LD_VAR 0 11
60531: PUSH
60532: LD_INT 1
60534: PLUS
60535: PPUSH
60536: LD_VAR 0 9
60540: PUSH
60541: LD_VAR 0 3
60545: ARRAY
60546: PPUSH
60547: CALL_OW 2
60551: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60552: LD_ADDR_VAR 0 4
60556: PUSH
60557: LD_VAR 0 4
60561: PUSH
60562: LD_VAR 0 9
60566: PUSH
60567: LD_VAR 0 3
60571: ARRAY
60572: DIFF
60573: ST_TO_ADDR
// end ;
60574: GO 60483
60576: POP
60577: POP
// if p then
60578: LD_VAR 0 11
60582: IFFALSE 60607
// result := Replace ( result , 3 , p ) ;
60584: LD_ADDR_VAR 0 2
60588: PUSH
60589: LD_VAR 0 2
60593: PPUSH
60594: LD_INT 3
60596: PPUSH
60597: LD_VAR 0 11
60601: PPUSH
60602: CALL_OW 1
60606: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60607: LD_ADDR_VAR 0 4
60611: PUSH
60612: LD_VAR 0 4
60616: PUSH
60617: LD_VAR 0 6
60621: DIFF
60622: ST_TO_ADDR
// if tmp and eng < 6 then
60623: LD_VAR 0 4
60627: PUSH
60628: LD_VAR 0 6
60632: PUSH
60633: LD_INT 6
60635: LESS
60636: AND
60637: IFFALSE 60831
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60639: LD_ADDR_VAR 0 9
60643: PUSH
60644: LD_VAR 0 4
60648: PUSH
60649: LD_VAR 0 8
60653: PUSH
60654: LD_VAR 0 7
60658: UNION
60659: PUSH
60660: LD_VAR 0 6
60664: UNION
60665: DIFF
60666: PPUSH
60667: LD_INT 2
60669: PPUSH
60670: CALL 51688 0 2
60674: ST_TO_ADDR
// p := [ ] ;
60675: LD_ADDR_VAR 0 11
60679: PUSH
60680: EMPTY
60681: ST_TO_ADDR
// if sort then
60682: LD_VAR 0 9
60686: IFFALSE 60802
// for i = 1 to 6 - eng do
60688: LD_ADDR_VAR 0 3
60692: PUSH
60693: DOUBLE
60694: LD_INT 1
60696: DEC
60697: ST_TO_ADDR
60698: LD_INT 6
60700: PUSH
60701: LD_VAR 0 6
60705: MINUS
60706: PUSH
60707: FOR_TO
60708: IFFALSE 60800
// begin if i = sort then
60710: LD_VAR 0 3
60714: PUSH
60715: LD_VAR 0 9
60719: EQUAL
60720: IFFALSE 60724
// break ;
60722: GO 60800
// if GetClass ( i ) = 2 then
60724: LD_VAR 0 3
60728: PPUSH
60729: CALL_OW 257
60733: PUSH
60734: LD_INT 2
60736: EQUAL
60737: IFFALSE 60741
// continue ;
60739: GO 60707
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60741: LD_ADDR_VAR 0 11
60745: PUSH
60746: LD_VAR 0 11
60750: PPUSH
60751: LD_VAR 0 11
60755: PUSH
60756: LD_INT 1
60758: PLUS
60759: PPUSH
60760: LD_VAR 0 9
60764: PUSH
60765: LD_VAR 0 3
60769: ARRAY
60770: PPUSH
60771: CALL_OW 2
60775: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60776: LD_ADDR_VAR 0 4
60780: PUSH
60781: LD_VAR 0 4
60785: PUSH
60786: LD_VAR 0 9
60790: PUSH
60791: LD_VAR 0 3
60795: ARRAY
60796: DIFF
60797: ST_TO_ADDR
// end ;
60798: GO 60707
60800: POP
60801: POP
// if p then
60802: LD_VAR 0 11
60806: IFFALSE 60831
// result := Replace ( result , 2 , p ) ;
60808: LD_ADDR_VAR 0 2
60812: PUSH
60813: LD_VAR 0 2
60817: PPUSH
60818: LD_INT 2
60820: PPUSH
60821: LD_VAR 0 11
60825: PPUSH
60826: CALL_OW 1
60830: ST_TO_ADDR
// end ; exit ;
60831: GO 61555
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60833: LD_EXP 79
60837: PUSH
60838: LD_EXP 78
60842: PUSH
60843: LD_VAR 0 1
60847: ARRAY
60848: ARRAY
60849: NOT
60850: PUSH
60851: LD_EXP 52
60855: PUSH
60856: LD_VAR 0 1
60860: ARRAY
60861: PPUSH
60862: LD_INT 30
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PPUSH
60872: CALL_OW 72
60876: AND
60877: PUSH
60878: LD_EXP 57
60882: PUSH
60883: LD_VAR 0 1
60887: ARRAY
60888: NOT
60889: AND
60890: IFFALSE 61555
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60892: LD_ADDR_EXP 94
60896: PUSH
60897: LD_EXP 94
60901: PPUSH
60902: LD_VAR 0 1
60906: PPUSH
60907: LD_INT 6
60909: PPUSH
60910: CALL_OW 1
60914: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60915: LD_ADDR_VAR 0 2
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: ST_TO_ADDR
// if sci >= 1 then
60938: LD_VAR 0 8
60942: PUSH
60943: LD_INT 1
60945: GREATEREQUAL
60946: IFFALSE 60968
// tmp := tmp diff sci [ 1 ] ;
60948: LD_ADDR_VAR 0 4
60952: PUSH
60953: LD_VAR 0 4
60957: PUSH
60958: LD_VAR 0 8
60962: PUSH
60963: LD_INT 1
60965: ARRAY
60966: DIFF
60967: ST_TO_ADDR
// if tmp and not sci then
60968: LD_VAR 0 4
60972: PUSH
60973: LD_VAR 0 8
60977: NOT
60978: AND
60979: IFFALSE 61048
// begin sort := SortBySkill ( tmp , 4 ) ;
60981: LD_ADDR_VAR 0 9
60985: PUSH
60986: LD_VAR 0 4
60990: PPUSH
60991: LD_INT 4
60993: PPUSH
60994: CALL 51688 0 2
60998: ST_TO_ADDR
// if sort then
60999: LD_VAR 0 9
61003: IFFALSE 61019
// p := sort [ 1 ] ;
61005: LD_ADDR_VAR 0 11
61009: PUSH
61010: LD_VAR 0 9
61014: PUSH
61015: LD_INT 1
61017: ARRAY
61018: ST_TO_ADDR
// if p then
61019: LD_VAR 0 11
61023: IFFALSE 61048
// result := Replace ( result , 4 , p ) ;
61025: LD_ADDR_VAR 0 2
61029: PUSH
61030: LD_VAR 0 2
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: LD_VAR 0 11
61042: PPUSH
61043: CALL_OW 1
61047: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61048: LD_ADDR_VAR 0 4
61052: PUSH
61053: LD_VAR 0 4
61057: PUSH
61058: LD_VAR 0 7
61062: DIFF
61063: ST_TO_ADDR
// if tmp and mech < 6 then
61064: LD_VAR 0 4
61068: PUSH
61069: LD_VAR 0 7
61073: PUSH
61074: LD_INT 6
61076: LESS
61077: AND
61078: IFFALSE 61260
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61080: LD_ADDR_VAR 0 9
61084: PUSH
61085: LD_VAR 0 4
61089: PUSH
61090: LD_VAR 0 7
61094: DIFF
61095: PPUSH
61096: LD_INT 3
61098: PPUSH
61099: CALL 51688 0 2
61103: ST_TO_ADDR
// p := [ ] ;
61104: LD_ADDR_VAR 0 11
61108: PUSH
61109: EMPTY
61110: ST_TO_ADDR
// if sort then
61111: LD_VAR 0 9
61115: IFFALSE 61231
// for i = 1 to 6 - mech do
61117: LD_ADDR_VAR 0 3
61121: PUSH
61122: DOUBLE
61123: LD_INT 1
61125: DEC
61126: ST_TO_ADDR
61127: LD_INT 6
61129: PUSH
61130: LD_VAR 0 7
61134: MINUS
61135: PUSH
61136: FOR_TO
61137: IFFALSE 61229
// begin if i = sort then
61139: LD_VAR 0 3
61143: PUSH
61144: LD_VAR 0 9
61148: EQUAL
61149: IFFALSE 61153
// break ;
61151: GO 61229
// if GetClass ( i ) = 3 then
61153: LD_VAR 0 3
61157: PPUSH
61158: CALL_OW 257
61162: PUSH
61163: LD_INT 3
61165: EQUAL
61166: IFFALSE 61170
// continue ;
61168: GO 61136
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61170: LD_ADDR_VAR 0 11
61174: PUSH
61175: LD_VAR 0 11
61179: PPUSH
61180: LD_VAR 0 11
61184: PUSH
61185: LD_INT 1
61187: PLUS
61188: PPUSH
61189: LD_VAR 0 9
61193: PUSH
61194: LD_VAR 0 3
61198: ARRAY
61199: PPUSH
61200: CALL_OW 2
61204: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61205: LD_ADDR_VAR 0 4
61209: PUSH
61210: LD_VAR 0 4
61214: PUSH
61215: LD_VAR 0 9
61219: PUSH
61220: LD_VAR 0 3
61224: ARRAY
61225: DIFF
61226: ST_TO_ADDR
// end ;
61227: GO 61136
61229: POP
61230: POP
// if p then
61231: LD_VAR 0 11
61235: IFFALSE 61260
// result := Replace ( result , 3 , p ) ;
61237: LD_ADDR_VAR 0 2
61241: PUSH
61242: LD_VAR 0 2
61246: PPUSH
61247: LD_INT 3
61249: PPUSH
61250: LD_VAR 0 11
61254: PPUSH
61255: CALL_OW 1
61259: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61260: LD_ADDR_VAR 0 4
61264: PUSH
61265: LD_VAR 0 4
61269: PUSH
61270: LD_VAR 0 6
61274: DIFF
61275: ST_TO_ADDR
// if tmp and eng < 4 then
61276: LD_VAR 0 4
61280: PUSH
61281: LD_VAR 0 6
61285: PUSH
61286: LD_INT 4
61288: LESS
61289: AND
61290: IFFALSE 61480
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
61292: LD_ADDR_VAR 0 9
61296: PUSH
61297: LD_VAR 0 4
61301: PUSH
61302: LD_VAR 0 7
61306: PUSH
61307: LD_VAR 0 6
61311: UNION
61312: DIFF
61313: PPUSH
61314: LD_INT 2
61316: PPUSH
61317: CALL 51688 0 2
61321: ST_TO_ADDR
// p := [ ] ;
61322: LD_ADDR_VAR 0 11
61326: PUSH
61327: EMPTY
61328: ST_TO_ADDR
// if sort then
61329: LD_VAR 0 9
61333: IFFALSE 61449
// for i = 1 to 4 - eng do
61335: LD_ADDR_VAR 0 3
61339: PUSH
61340: DOUBLE
61341: LD_INT 1
61343: DEC
61344: ST_TO_ADDR
61345: LD_INT 4
61347: PUSH
61348: LD_VAR 0 6
61352: MINUS
61353: PUSH
61354: FOR_TO
61355: IFFALSE 61447
// begin if i = sort then
61357: LD_VAR 0 3
61361: PUSH
61362: LD_VAR 0 9
61366: EQUAL
61367: IFFALSE 61371
// break ;
61369: GO 61447
// if GetClass ( i ) = 2 then
61371: LD_VAR 0 3
61375: PPUSH
61376: CALL_OW 257
61380: PUSH
61381: LD_INT 2
61383: EQUAL
61384: IFFALSE 61388
// continue ;
61386: GO 61354
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61388: LD_ADDR_VAR 0 11
61392: PUSH
61393: LD_VAR 0 11
61397: PPUSH
61398: LD_VAR 0 11
61402: PUSH
61403: LD_INT 1
61405: PLUS
61406: PPUSH
61407: LD_VAR 0 9
61411: PUSH
61412: LD_VAR 0 3
61416: ARRAY
61417: PPUSH
61418: CALL_OW 2
61422: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61423: LD_ADDR_VAR 0 4
61427: PUSH
61428: LD_VAR 0 4
61432: PUSH
61433: LD_VAR 0 9
61437: PUSH
61438: LD_VAR 0 3
61442: ARRAY
61443: DIFF
61444: ST_TO_ADDR
// end ;
61445: GO 61354
61447: POP
61448: POP
// if p then
61449: LD_VAR 0 11
61453: IFFALSE 61478
// result := Replace ( result , 2 , p ) ;
61455: LD_ADDR_VAR 0 2
61459: PUSH
61460: LD_VAR 0 2
61464: PPUSH
61465: LD_INT 2
61467: PPUSH
61468: LD_VAR 0 11
61472: PPUSH
61473: CALL_OW 1
61477: ST_TO_ADDR
// end else
61478: GO 61524
// for i = eng downto 5 do
61480: LD_ADDR_VAR 0 3
61484: PUSH
61485: DOUBLE
61486: LD_VAR 0 6
61490: INC
61491: ST_TO_ADDR
61492: LD_INT 5
61494: PUSH
61495: FOR_DOWNTO
61496: IFFALSE 61522
// tmp := tmp union eng [ i ] ;
61498: LD_ADDR_VAR 0 4
61502: PUSH
61503: LD_VAR 0 4
61507: PUSH
61508: LD_VAR 0 6
61512: PUSH
61513: LD_VAR 0 3
61517: ARRAY
61518: UNION
61519: ST_TO_ADDR
61520: GO 61495
61522: POP
61523: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
61524: LD_ADDR_VAR 0 2
61528: PUSH
61529: LD_VAR 0 2
61533: PPUSH
61534: LD_INT 1
61536: PPUSH
61537: LD_VAR 0 4
61541: PUSH
61542: LD_VAR 0 5
61546: DIFF
61547: PPUSH
61548: CALL_OW 1
61552: ST_TO_ADDR
// exit ;
61553: GO 61555
// end ; end ;
61555: LD_VAR 0 2
61559: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
61560: LD_INT 0
61562: PPUSH
61563: PPUSH
61564: PPUSH
// if not mc_bases then
61565: LD_EXP 52
61569: NOT
61570: IFFALSE 61574
// exit ;
61572: GO 61680
// for i = 1 to mc_bases do
61574: LD_ADDR_VAR 0 2
61578: PUSH
61579: DOUBLE
61580: LD_INT 1
61582: DEC
61583: ST_TO_ADDR
61584: LD_EXP 52
61588: PUSH
61589: FOR_TO
61590: IFFALSE 61671
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
61592: LD_ADDR_VAR 0 3
61596: PUSH
61597: LD_EXP 52
61601: PUSH
61602: LD_VAR 0 2
61606: ARRAY
61607: PPUSH
61608: LD_INT 21
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: PUSH
61621: LD_INT 24
61623: PUSH
61624: LD_INT 1000
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PPUSH
61639: CALL_OW 72
61643: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
61644: LD_ADDR_EXP 53
61648: PUSH
61649: LD_EXP 53
61653: PPUSH
61654: LD_VAR 0 2
61658: PPUSH
61659: LD_VAR 0 3
61663: PPUSH
61664: CALL_OW 1
61668: ST_TO_ADDR
// end ;
61669: GO 61589
61671: POP
61672: POP
// RaiseSailEvent ( 101 ) ;
61673: LD_INT 101
61675: PPUSH
61676: CALL_OW 427
// end ;
61680: LD_VAR 0 1
61684: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
61685: LD_INT 0
61687: PPUSH
61688: PPUSH
61689: PPUSH
61690: PPUSH
61691: PPUSH
61692: PPUSH
61693: PPUSH
// if not mc_bases then
61694: LD_EXP 52
61698: NOT
61699: IFFALSE 61703
// exit ;
61701: GO 62276
// for i = 1 to mc_bases do
61703: LD_ADDR_VAR 0 2
61707: PUSH
61708: DOUBLE
61709: LD_INT 1
61711: DEC
61712: ST_TO_ADDR
61713: LD_EXP 52
61717: PUSH
61718: FOR_TO
61719: IFFALSE 62267
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
61721: LD_ADDR_VAR 0 5
61725: PUSH
61726: LD_EXP 52
61730: PUSH
61731: LD_VAR 0 2
61735: ARRAY
61736: PUSH
61737: LD_EXP 81
61741: PUSH
61742: LD_VAR 0 2
61746: ARRAY
61747: UNION
61748: PPUSH
61749: LD_INT 21
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 54
61767: PUSH
61768: EMPTY
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: LD_INT 24
61780: PUSH
61781: LD_INT 800
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PPUSH
61801: CALL_OW 72
61805: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61806: LD_ADDR_VAR 0 6
61810: PUSH
61811: LD_EXP 52
61815: PUSH
61816: LD_VAR 0 2
61820: ARRAY
61821: PPUSH
61822: LD_INT 21
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 3
61837: PUSH
61838: LD_INT 54
61840: PUSH
61841: EMPTY
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: LD_INT 24
61853: PUSH
61854: LD_INT 250
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PPUSH
61874: CALL_OW 72
61878: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61879: LD_ADDR_VAR 0 7
61883: PUSH
61884: LD_VAR 0 5
61888: PUSH
61889: LD_VAR 0 6
61893: DIFF
61894: ST_TO_ADDR
// if not need_heal_1 then
61895: LD_VAR 0 6
61899: NOT
61900: IFFALSE 61933
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61902: LD_ADDR_EXP 55
61906: PUSH
61907: LD_EXP 55
61911: PPUSH
61912: LD_VAR 0 2
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PPUSH
61924: EMPTY
61925: PPUSH
61926: CALL 17440 0 3
61930: ST_TO_ADDR
61931: GO 62003
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61933: LD_ADDR_EXP 55
61937: PUSH
61938: LD_EXP 55
61942: PPUSH
61943: LD_VAR 0 2
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PPUSH
61955: LD_EXP 55
61959: PUSH
61960: LD_VAR 0 2
61964: ARRAY
61965: PUSH
61966: LD_INT 1
61968: ARRAY
61969: PPUSH
61970: LD_INT 3
61972: PUSH
61973: LD_INT 24
61975: PUSH
61976: LD_INT 1000
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PPUSH
61987: CALL_OW 72
61991: PUSH
61992: LD_VAR 0 6
61996: UNION
61997: PPUSH
61998: CALL 17440 0 3
62002: ST_TO_ADDR
// if not need_heal_2 then
62003: LD_VAR 0 7
62007: NOT
62008: IFFALSE 62041
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
62010: LD_ADDR_EXP 55
62014: PUSH
62015: LD_EXP 55
62019: PPUSH
62020: LD_VAR 0 2
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PPUSH
62032: EMPTY
62033: PPUSH
62034: CALL 17440 0 3
62038: ST_TO_ADDR
62039: GO 62073
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62041: LD_ADDR_EXP 55
62045: PUSH
62046: LD_EXP 55
62050: PPUSH
62051: LD_VAR 0 2
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PPUSH
62063: LD_VAR 0 7
62067: PPUSH
62068: CALL 17440 0 3
62072: ST_TO_ADDR
// if need_heal_2 then
62073: LD_VAR 0 7
62077: IFFALSE 62249
// for j in need_heal_2 do
62079: LD_ADDR_VAR 0 3
62083: PUSH
62084: LD_VAR 0 7
62088: PUSH
62089: FOR_IN
62090: IFFALSE 62247
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62092: LD_ADDR_VAR 0 5
62096: PUSH
62097: LD_EXP 52
62101: PUSH
62102: LD_VAR 0 2
62106: ARRAY
62107: PPUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 30
62113: PUSH
62114: LD_INT 6
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 30
62123: PUSH
62124: LD_INT 7
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 30
62133: PUSH
62134: LD_INT 8
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 30
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 30
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 25
62163: PUSH
62164: LD_INT 4
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: PPUSH
62180: CALL_OW 72
62184: ST_TO_ADDR
// if tmp then
62185: LD_VAR 0 5
62189: IFFALSE 62245
// begin k := NearestUnitToUnit ( tmp , j ) ;
62191: LD_ADDR_VAR 0 4
62195: PUSH
62196: LD_VAR 0 5
62200: PPUSH
62201: LD_VAR 0 3
62205: PPUSH
62206: CALL_OW 74
62210: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
62211: LD_VAR 0 3
62215: PPUSH
62216: LD_VAR 0 4
62220: PPUSH
62221: CALL_OW 296
62225: PUSH
62226: LD_INT 7
62228: GREATER
62229: IFFALSE 62245
// ComMoveUnit ( j , k ) ;
62231: LD_VAR 0 3
62235: PPUSH
62236: LD_VAR 0 4
62240: PPUSH
62241: CALL_OW 112
// end ; end ;
62245: GO 62089
62247: POP
62248: POP
// if not need_heal_1 and not need_heal_2 then
62249: LD_VAR 0 6
62253: NOT
62254: PUSH
62255: LD_VAR 0 7
62259: NOT
62260: AND
62261: IFFALSE 62265
// continue ;
62263: GO 61718
// end ;
62265: GO 61718
62267: POP
62268: POP
// RaiseSailEvent ( 102 ) ;
62269: LD_INT 102
62271: PPUSH
62272: CALL_OW 427
// end ;
62276: LD_VAR 0 1
62280: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
62287: PPUSH
// if not mc_bases then
62288: LD_EXP 52
62292: NOT
62293: IFFALSE 62297
// exit ;
62295: GO 62682
// for i = 1 to mc_bases do
62297: LD_ADDR_VAR 0 2
62301: PUSH
62302: DOUBLE
62303: LD_INT 1
62305: DEC
62306: ST_TO_ADDR
62307: LD_EXP 52
62311: PUSH
62312: FOR_TO
62313: IFFALSE 62680
// begin if not mc_building_need_repair [ i ] then
62315: LD_EXP 53
62319: PUSH
62320: LD_VAR 0 2
62324: ARRAY
62325: NOT
62326: IFFALSE 62364
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62328: LD_ADDR_EXP 54
62332: PUSH
62333: LD_EXP 54
62337: PPUSH
62338: LD_VAR 0 2
62342: PPUSH
62343: EMPTY
62344: PPUSH
62345: CALL_OW 1
62349: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
62350: LD_VAR 0 2
62354: PPUSH
62355: LD_INT 101
62357: PPUSH
62358: CALL 57402 0 2
// continue ;
62362: GO 62312
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
62364: LD_ADDR_EXP 58
62368: PUSH
62369: LD_EXP 58
62373: PPUSH
62374: LD_VAR 0 2
62378: PPUSH
62379: EMPTY
62380: PPUSH
62381: CALL_OW 1
62385: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62386: LD_VAR 0 2
62390: PPUSH
62391: LD_INT 103
62393: PPUSH
62394: CALL 57402 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
62398: LD_ADDR_VAR 0 5
62402: PUSH
62403: LD_EXP 52
62407: PUSH
62408: LD_VAR 0 2
62412: ARRAY
62413: PUSH
62414: LD_EXP 81
62418: PUSH
62419: LD_VAR 0 2
62423: ARRAY
62424: UNION
62425: PPUSH
62426: LD_INT 2
62428: PUSH
62429: LD_INT 25
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 25
62441: PUSH
62442: LD_INT 16
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: PPUSH
62457: CALL_OW 72
62461: ST_TO_ADDR
// if not tmp then
62462: LD_VAR 0 5
62466: NOT
62467: IFFALSE 62471
// continue ;
62469: GO 62312
// for j in tmp do
62471: LD_ADDR_VAR 0 3
62475: PUSH
62476: LD_VAR 0 5
62480: PUSH
62481: FOR_IN
62482: IFFALSE 62676
// begin if mc_need_heal [ i ] then
62484: LD_EXP 55
62488: PUSH
62489: LD_VAR 0 2
62493: ARRAY
62494: IFFALSE 62542
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
62496: LD_VAR 0 3
62500: PUSH
62501: LD_EXP 55
62505: PUSH
62506: LD_VAR 0 2
62510: ARRAY
62511: PUSH
62512: LD_INT 1
62514: ARRAY
62515: IN
62516: PUSH
62517: LD_VAR 0 3
62521: PUSH
62522: LD_EXP 55
62526: PUSH
62527: LD_VAR 0 2
62531: ARRAY
62532: PUSH
62533: LD_INT 2
62535: ARRAY
62536: IN
62537: OR
62538: IFFALSE 62542
// continue ;
62540: GO 62481
// if IsInUnit ( j ) then
62542: LD_VAR 0 3
62546: PPUSH
62547: CALL_OW 310
62551: IFFALSE 62562
// ComExitBuilding ( j ) ;
62553: LD_VAR 0 3
62557: PPUSH
62558: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
62562: LD_VAR 0 3
62566: PUSH
62567: LD_EXP 54
62571: PUSH
62572: LD_VAR 0 2
62576: ARRAY
62577: IN
62578: NOT
62579: IFFALSE 62637
// begin SetTag ( j , 101 ) ;
62581: LD_VAR 0 3
62585: PPUSH
62586: LD_INT 101
62588: PPUSH
62589: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
62593: LD_ADDR_EXP 54
62597: PUSH
62598: LD_EXP 54
62602: PPUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_EXP 54
62612: PUSH
62613: LD_VAR 0 2
62617: ARRAY
62618: PUSH
62619: LD_INT 1
62621: PLUS
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PPUSH
62627: LD_VAR 0 3
62631: PPUSH
62632: CALL 17440 0 3
62636: ST_TO_ADDR
// end ; wait ( 1 ) ;
62637: LD_INT 1
62639: PPUSH
62640: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
62644: LD_VAR 0 3
62648: PPUSH
62649: LD_EXP 53
62653: PUSH
62654: LD_VAR 0 2
62658: ARRAY
62659: PPUSH
62660: LD_VAR 0 3
62664: PPUSH
62665: CALL_OW 74
62669: PPUSH
62670: CALL_OW 130
// end ;
62674: GO 62481
62676: POP
62677: POP
// end ;
62678: GO 62312
62680: POP
62681: POP
// end ;
62682: LD_VAR 0 1
62686: RET
// export function MC_Heal ; var i , j , tmp ; begin
62687: LD_INT 0
62689: PPUSH
62690: PPUSH
62691: PPUSH
62692: PPUSH
// if not mc_bases then
62693: LD_EXP 52
62697: NOT
62698: IFFALSE 62702
// exit ;
62700: GO 63104
// for i = 1 to mc_bases do
62702: LD_ADDR_VAR 0 2
62706: PUSH
62707: DOUBLE
62708: LD_INT 1
62710: DEC
62711: ST_TO_ADDR
62712: LD_EXP 52
62716: PUSH
62717: FOR_TO
62718: IFFALSE 63102
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
62720: LD_EXP 55
62724: PUSH
62725: LD_VAR 0 2
62729: ARRAY
62730: PUSH
62731: LD_INT 1
62733: ARRAY
62734: NOT
62735: PUSH
62736: LD_EXP 55
62740: PUSH
62741: LD_VAR 0 2
62745: ARRAY
62746: PUSH
62747: LD_INT 2
62749: ARRAY
62750: NOT
62751: AND
62752: IFFALSE 62790
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62754: LD_ADDR_EXP 56
62758: PUSH
62759: LD_EXP 56
62763: PPUSH
62764: LD_VAR 0 2
62768: PPUSH
62769: EMPTY
62770: PPUSH
62771: CALL_OW 1
62775: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62776: LD_VAR 0 2
62780: PPUSH
62781: LD_INT 102
62783: PPUSH
62784: CALL 57402 0 2
// continue ;
62788: GO 62717
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62790: LD_ADDR_VAR 0 4
62794: PUSH
62795: LD_EXP 52
62799: PUSH
62800: LD_VAR 0 2
62804: ARRAY
62805: PPUSH
62806: LD_INT 25
62808: PUSH
62809: LD_INT 4
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PPUSH
62816: CALL_OW 72
62820: ST_TO_ADDR
// if not tmp then
62821: LD_VAR 0 4
62825: NOT
62826: IFFALSE 62830
// continue ;
62828: GO 62717
// if mc_taming [ i ] then
62830: LD_EXP 83
62834: PUSH
62835: LD_VAR 0 2
62839: ARRAY
62840: IFFALSE 62864
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62842: LD_ADDR_EXP 83
62846: PUSH
62847: LD_EXP 83
62851: PPUSH
62852: LD_VAR 0 2
62856: PPUSH
62857: EMPTY
62858: PPUSH
62859: CALL_OW 1
62863: ST_TO_ADDR
// for j in tmp do
62864: LD_ADDR_VAR 0 3
62868: PUSH
62869: LD_VAR 0 4
62873: PUSH
62874: FOR_IN
62875: IFFALSE 63098
// begin if IsInUnit ( j ) then
62877: LD_VAR 0 3
62881: PPUSH
62882: CALL_OW 310
62886: IFFALSE 62897
// ComExitBuilding ( j ) ;
62888: LD_VAR 0 3
62892: PPUSH
62893: CALL_OW 122
// if not j in mc_healers [ i ] then
62897: LD_VAR 0 3
62901: PUSH
62902: LD_EXP 56
62906: PUSH
62907: LD_VAR 0 2
62911: ARRAY
62912: IN
62913: NOT
62914: IFFALSE 62960
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62916: LD_ADDR_EXP 56
62920: PUSH
62921: LD_EXP 56
62925: PPUSH
62926: LD_VAR 0 2
62930: PUSH
62931: LD_EXP 56
62935: PUSH
62936: LD_VAR 0 2
62940: ARRAY
62941: PUSH
62942: LD_INT 1
62944: PLUS
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PPUSH
62950: LD_VAR 0 3
62954: PPUSH
62955: CALL 17440 0 3
62959: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62960: LD_VAR 0 3
62964: PPUSH
62965: CALL_OW 110
62969: PUSH
62970: LD_INT 102
62972: NONEQUAL
62973: IFFALSE 62987
// SetTag ( j , 102 ) ;
62975: LD_VAR 0 3
62979: PPUSH
62980: LD_INT 102
62982: PPUSH
62983: CALL_OW 109
// Wait ( 3 ) ;
62987: LD_INT 3
62989: PPUSH
62990: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62994: LD_EXP 55
62998: PUSH
62999: LD_VAR 0 2
63003: ARRAY
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: IFFALSE 63040
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
63010: LD_VAR 0 3
63014: PPUSH
63015: LD_EXP 55
63019: PUSH
63020: LD_VAR 0 2
63024: ARRAY
63025: PUSH
63026: LD_INT 1
63028: ARRAY
63029: PUSH
63030: LD_INT 1
63032: ARRAY
63033: PPUSH
63034: CALL_OW 128
63038: GO 63096
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
63040: LD_VAR 0 3
63044: PPUSH
63045: CALL_OW 314
63049: NOT
63050: PUSH
63051: LD_EXP 55
63055: PUSH
63056: LD_VAR 0 2
63060: ARRAY
63061: PUSH
63062: LD_INT 2
63064: ARRAY
63065: AND
63066: IFFALSE 63096
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
63068: LD_VAR 0 3
63072: PPUSH
63073: LD_EXP 55
63077: PUSH
63078: LD_VAR 0 2
63082: ARRAY
63083: PUSH
63084: LD_INT 2
63086: ARRAY
63087: PUSH
63088: LD_INT 1
63090: ARRAY
63091: PPUSH
63092: CALL_OW 128
// end ;
63096: GO 62874
63098: POP
63099: POP
// end ;
63100: GO 62717
63102: POP
63103: POP
// end ;
63104: LD_VAR 0 1
63108: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
63109: LD_INT 0
63111: PPUSH
63112: PPUSH
63113: PPUSH
63114: PPUSH
63115: PPUSH
// if not mc_bases then
63116: LD_EXP 52
63120: NOT
63121: IFFALSE 63125
// exit ;
63123: GO 64268
// for i = 1 to mc_bases do
63125: LD_ADDR_VAR 0 2
63129: PUSH
63130: DOUBLE
63131: LD_INT 1
63133: DEC
63134: ST_TO_ADDR
63135: LD_EXP 52
63139: PUSH
63140: FOR_TO
63141: IFFALSE 64266
// begin if mc_scan [ i ] then
63143: LD_EXP 75
63147: PUSH
63148: LD_VAR 0 2
63152: ARRAY
63153: IFFALSE 63157
// continue ;
63155: GO 63140
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
63157: LD_EXP 57
63161: PUSH
63162: LD_VAR 0 2
63166: ARRAY
63167: NOT
63168: PUSH
63169: LD_EXP 59
63173: PUSH
63174: LD_VAR 0 2
63178: ARRAY
63179: NOT
63180: AND
63181: PUSH
63182: LD_EXP 58
63186: PUSH
63187: LD_VAR 0 2
63191: ARRAY
63192: AND
63193: IFFALSE 63231
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
63195: LD_ADDR_EXP 58
63199: PUSH
63200: LD_EXP 58
63204: PPUSH
63205: LD_VAR 0 2
63209: PPUSH
63210: EMPTY
63211: PPUSH
63212: CALL_OW 1
63216: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63217: LD_VAR 0 2
63221: PPUSH
63222: LD_INT 103
63224: PPUSH
63225: CALL 57402 0 2
// continue ;
63229: GO 63140
// end ; if mc_construct_list [ i ] then
63231: LD_EXP 59
63235: PUSH
63236: LD_VAR 0 2
63240: ARRAY
63241: IFFALSE 63461
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_EXP 52
63252: PUSH
63253: LD_VAR 0 2
63257: ARRAY
63258: PPUSH
63259: LD_INT 25
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PPUSH
63269: CALL_OW 72
63273: PUSH
63274: LD_EXP 54
63278: PUSH
63279: LD_VAR 0 2
63283: ARRAY
63284: DIFF
63285: ST_TO_ADDR
// if not tmp then
63286: LD_VAR 0 4
63290: NOT
63291: IFFALSE 63295
// continue ;
63293: GO 63140
// for j in tmp do
63295: LD_ADDR_VAR 0 3
63299: PUSH
63300: LD_VAR 0 4
63304: PUSH
63305: FOR_IN
63306: IFFALSE 63457
// begin if not mc_builders [ i ] then
63308: LD_EXP 58
63312: PUSH
63313: LD_VAR 0 2
63317: ARRAY
63318: NOT
63319: IFFALSE 63377
// begin SetTag ( j , 103 ) ;
63321: LD_VAR 0 3
63325: PPUSH
63326: LD_INT 103
63328: PPUSH
63329: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63333: LD_ADDR_EXP 58
63337: PUSH
63338: LD_EXP 58
63342: PPUSH
63343: LD_VAR 0 2
63347: PUSH
63348: LD_EXP 58
63352: PUSH
63353: LD_VAR 0 2
63357: ARRAY
63358: PUSH
63359: LD_INT 1
63361: PLUS
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PPUSH
63367: LD_VAR 0 3
63371: PPUSH
63372: CALL 17440 0 3
63376: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63377: LD_VAR 0 3
63381: PPUSH
63382: CALL_OW 310
63386: IFFALSE 63397
// ComExitBuilding ( j ) ;
63388: LD_VAR 0 3
63392: PPUSH
63393: CALL_OW 122
// wait ( 3 ) ;
63397: LD_INT 3
63399: PPUSH
63400: CALL_OW 67
// if not mc_construct_list [ i ] then
63404: LD_EXP 59
63408: PUSH
63409: LD_VAR 0 2
63413: ARRAY
63414: NOT
63415: IFFALSE 63419
// break ;
63417: GO 63457
// if not HasTask ( j ) then
63419: LD_VAR 0 3
63423: PPUSH
63424: CALL_OW 314
63428: NOT
63429: IFFALSE 63455
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
63431: LD_VAR 0 3
63435: PPUSH
63436: LD_EXP 59
63440: PUSH
63441: LD_VAR 0 2
63445: ARRAY
63446: PUSH
63447: LD_INT 1
63449: ARRAY
63450: PPUSH
63451: CALL 20291 0 2
// end ;
63455: GO 63305
63457: POP
63458: POP
// end else
63459: GO 64264
// if mc_build_list [ i ] then
63461: LD_EXP 57
63465: PUSH
63466: LD_VAR 0 2
63470: ARRAY
63471: IFFALSE 64264
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63473: LD_ADDR_VAR 0 5
63477: PUSH
63478: LD_EXP 52
63482: PUSH
63483: LD_VAR 0 2
63487: ARRAY
63488: PPUSH
63489: LD_INT 2
63491: PUSH
63492: LD_INT 30
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 30
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: PPUSH
63517: CALL_OW 72
63521: ST_TO_ADDR
// if depot then
63522: LD_VAR 0 5
63526: IFFALSE 63544
// depot := depot [ 1 ] else
63528: LD_ADDR_VAR 0 5
63532: PUSH
63533: LD_VAR 0 5
63537: PUSH
63538: LD_INT 1
63540: ARRAY
63541: ST_TO_ADDR
63542: GO 63552
// depot := 0 ;
63544: LD_ADDR_VAR 0 5
63548: PUSH
63549: LD_INT 0
63551: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
63552: LD_EXP 57
63556: PUSH
63557: LD_VAR 0 2
63561: ARRAY
63562: PUSH
63563: LD_INT 1
63565: ARRAY
63566: PUSH
63567: LD_INT 1
63569: ARRAY
63570: PPUSH
63571: CALL 20121 0 1
63575: PUSH
63576: LD_EXP 52
63580: PUSH
63581: LD_VAR 0 2
63585: ARRAY
63586: PPUSH
63587: LD_INT 2
63589: PUSH
63590: LD_INT 30
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 30
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: PPUSH
63615: CALL_OW 72
63619: NOT
63620: AND
63621: IFFALSE 63726
// begin for j = 1 to mc_build_list [ i ] do
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: DOUBLE
63629: LD_INT 1
63631: DEC
63632: ST_TO_ADDR
63633: LD_EXP 57
63637: PUSH
63638: LD_VAR 0 2
63642: ARRAY
63643: PUSH
63644: FOR_TO
63645: IFFALSE 63724
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
63647: LD_EXP 57
63651: PUSH
63652: LD_VAR 0 2
63656: ARRAY
63657: PUSH
63658: LD_VAR 0 3
63662: ARRAY
63663: PUSH
63664: LD_INT 1
63666: ARRAY
63667: PUSH
63668: LD_INT 2
63670: EQUAL
63671: IFFALSE 63722
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
63673: LD_ADDR_EXP 57
63677: PUSH
63678: LD_EXP 57
63682: PPUSH
63683: LD_VAR 0 2
63687: PPUSH
63688: LD_EXP 57
63692: PUSH
63693: LD_VAR 0 2
63697: ARRAY
63698: PPUSH
63699: LD_VAR 0 3
63703: PPUSH
63704: LD_INT 1
63706: PPUSH
63707: LD_INT 0
63709: PPUSH
63710: CALL 16858 0 4
63714: PPUSH
63715: CALL_OW 1
63719: ST_TO_ADDR
// break ;
63720: GO 63724
// end ;
63722: GO 63644
63724: POP
63725: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
63726: LD_EXP 57
63730: PUSH
63731: LD_VAR 0 2
63735: ARRAY
63736: PUSH
63737: LD_INT 1
63739: ARRAY
63740: PUSH
63741: LD_INT 1
63743: ARRAY
63744: PUSH
63745: LD_INT 0
63747: EQUAL
63748: PUSH
63749: LD_VAR 0 5
63753: PUSH
63754: LD_VAR 0 5
63758: PPUSH
63759: LD_EXP 57
63763: PUSH
63764: LD_VAR 0 2
63768: ARRAY
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: PUSH
63774: LD_INT 1
63776: ARRAY
63777: PPUSH
63778: LD_EXP 57
63782: PUSH
63783: LD_VAR 0 2
63787: ARRAY
63788: PUSH
63789: LD_INT 1
63791: ARRAY
63792: PUSH
63793: LD_INT 2
63795: ARRAY
63796: PPUSH
63797: LD_EXP 57
63801: PUSH
63802: LD_VAR 0 2
63806: ARRAY
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: PUSH
63812: LD_INT 3
63814: ARRAY
63815: PPUSH
63816: LD_EXP 57
63820: PUSH
63821: LD_VAR 0 2
63825: ARRAY
63826: PUSH
63827: LD_INT 1
63829: ARRAY
63830: PUSH
63831: LD_INT 4
63833: ARRAY
63834: PPUSH
63835: CALL 24855 0 5
63839: AND
63840: OR
63841: IFFALSE 64122
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63843: LD_ADDR_VAR 0 4
63847: PUSH
63848: LD_EXP 52
63852: PUSH
63853: LD_VAR 0 2
63857: ARRAY
63858: PPUSH
63859: LD_INT 25
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PPUSH
63869: CALL_OW 72
63873: PUSH
63874: LD_EXP 54
63878: PUSH
63879: LD_VAR 0 2
63883: ARRAY
63884: DIFF
63885: ST_TO_ADDR
// if not tmp then
63886: LD_VAR 0 4
63890: NOT
63891: IFFALSE 63895
// continue ;
63893: GO 63140
// for j in tmp do
63895: LD_ADDR_VAR 0 3
63899: PUSH
63900: LD_VAR 0 4
63904: PUSH
63905: FOR_IN
63906: IFFALSE 64118
// begin if not mc_builders [ i ] then
63908: LD_EXP 58
63912: PUSH
63913: LD_VAR 0 2
63917: ARRAY
63918: NOT
63919: IFFALSE 63977
// begin SetTag ( j , 103 ) ;
63921: LD_VAR 0 3
63925: PPUSH
63926: LD_INT 103
63928: PPUSH
63929: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63933: LD_ADDR_EXP 58
63937: PUSH
63938: LD_EXP 58
63942: PPUSH
63943: LD_VAR 0 2
63947: PUSH
63948: LD_EXP 58
63952: PUSH
63953: LD_VAR 0 2
63957: ARRAY
63958: PUSH
63959: LD_INT 1
63961: PLUS
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PPUSH
63967: LD_VAR 0 3
63971: PPUSH
63972: CALL 17440 0 3
63976: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63977: LD_VAR 0 3
63981: PPUSH
63982: CALL_OW 310
63986: IFFALSE 63997
// ComExitBuilding ( j ) ;
63988: LD_VAR 0 3
63992: PPUSH
63993: CALL_OW 122
// wait ( 3 ) ;
63997: LD_INT 3
63999: PPUSH
64000: CALL_OW 67
// if not mc_build_list [ i ] then
64004: LD_EXP 57
64008: PUSH
64009: LD_VAR 0 2
64013: ARRAY
64014: NOT
64015: IFFALSE 64019
// break ;
64017: GO 64118
// if not HasTask ( j ) then
64019: LD_VAR 0 3
64023: PPUSH
64024: CALL_OW 314
64028: NOT
64029: IFFALSE 64116
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
64031: LD_VAR 0 3
64035: PPUSH
64036: LD_EXP 57
64040: PUSH
64041: LD_VAR 0 2
64045: ARRAY
64046: PUSH
64047: LD_INT 1
64049: ARRAY
64050: PUSH
64051: LD_INT 1
64053: ARRAY
64054: PPUSH
64055: LD_EXP 57
64059: PUSH
64060: LD_VAR 0 2
64064: ARRAY
64065: PUSH
64066: LD_INT 1
64068: ARRAY
64069: PUSH
64070: LD_INT 2
64072: ARRAY
64073: PPUSH
64074: LD_EXP 57
64078: PUSH
64079: LD_VAR 0 2
64083: ARRAY
64084: PUSH
64085: LD_INT 1
64087: ARRAY
64088: PUSH
64089: LD_INT 3
64091: ARRAY
64092: PPUSH
64093: LD_EXP 57
64097: PUSH
64098: LD_VAR 0 2
64102: ARRAY
64103: PUSH
64104: LD_INT 1
64106: ARRAY
64107: PUSH
64108: LD_INT 4
64110: ARRAY
64111: PPUSH
64112: CALL_OW 145
// end ;
64116: GO 63905
64118: POP
64119: POP
// end else
64120: GO 64264
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
64122: LD_EXP 52
64126: PUSH
64127: LD_VAR 0 2
64131: ARRAY
64132: PPUSH
64133: LD_EXP 57
64137: PUSH
64138: LD_VAR 0 2
64142: ARRAY
64143: PUSH
64144: LD_INT 1
64146: ARRAY
64147: PUSH
64148: LD_INT 1
64150: ARRAY
64151: PPUSH
64152: LD_EXP 57
64156: PUSH
64157: LD_VAR 0 2
64161: ARRAY
64162: PUSH
64163: LD_INT 1
64165: ARRAY
64166: PUSH
64167: LD_INT 2
64169: ARRAY
64170: PPUSH
64171: LD_EXP 57
64175: PUSH
64176: LD_VAR 0 2
64180: ARRAY
64181: PUSH
64182: LD_INT 1
64184: ARRAY
64185: PUSH
64186: LD_INT 3
64188: ARRAY
64189: PPUSH
64190: LD_EXP 57
64194: PUSH
64195: LD_VAR 0 2
64199: ARRAY
64200: PUSH
64201: LD_INT 1
64203: ARRAY
64204: PUSH
64205: LD_INT 4
64207: ARRAY
64208: PPUSH
64209: CALL 24191 0 5
64213: NOT
64214: IFFALSE 64264
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
64216: LD_ADDR_EXP 57
64220: PUSH
64221: LD_EXP 57
64225: PPUSH
64226: LD_VAR 0 2
64230: PPUSH
64231: LD_EXP 57
64235: PUSH
64236: LD_VAR 0 2
64240: ARRAY
64241: PPUSH
64242: LD_INT 1
64244: PPUSH
64245: LD_INT 1
64247: NEG
64248: PPUSH
64249: LD_INT 0
64251: PPUSH
64252: CALL 16858 0 4
64256: PPUSH
64257: CALL_OW 1
64261: ST_TO_ADDR
// continue ;
64262: GO 63140
// end ; end ; end ;
64264: GO 63140
64266: POP
64267: POP
// end ;
64268: LD_VAR 0 1
64272: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
64273: LD_INT 0
64275: PPUSH
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
64280: PPUSH
// if not mc_bases then
64281: LD_EXP 52
64285: NOT
64286: IFFALSE 64290
// exit ;
64288: GO 64717
// for i = 1 to mc_bases do
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: DOUBLE
64296: LD_INT 1
64298: DEC
64299: ST_TO_ADDR
64300: LD_EXP 52
64304: PUSH
64305: FOR_TO
64306: IFFALSE 64715
// begin tmp := mc_build_upgrade [ i ] ;
64308: LD_ADDR_VAR 0 4
64312: PUSH
64313: LD_EXP 84
64317: PUSH
64318: LD_VAR 0 2
64322: ARRAY
64323: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
64324: LD_ADDR_VAR 0 6
64328: PUSH
64329: LD_EXP 85
64333: PUSH
64334: LD_VAR 0 2
64338: ARRAY
64339: PPUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 30
64345: PUSH
64346: LD_INT 6
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 30
64355: PUSH
64356: LD_INT 7
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: PPUSH
64368: CALL_OW 72
64372: ST_TO_ADDR
// if not tmp and not lab then
64373: LD_VAR 0 4
64377: NOT
64378: PUSH
64379: LD_VAR 0 6
64383: NOT
64384: AND
64385: IFFALSE 64389
// continue ;
64387: GO 64305
// if tmp then
64389: LD_VAR 0 4
64393: IFFALSE 64513
// for j in tmp do
64395: LD_ADDR_VAR 0 3
64399: PUSH
64400: LD_VAR 0 4
64404: PUSH
64405: FOR_IN
64406: IFFALSE 64511
// begin if UpgradeCost ( j ) then
64408: LD_VAR 0 3
64412: PPUSH
64413: CALL 23851 0 1
64417: IFFALSE 64509
// begin ComUpgrade ( j ) ;
64419: LD_VAR 0 3
64423: PPUSH
64424: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
64428: LD_ADDR_EXP 84
64432: PUSH
64433: LD_EXP 84
64437: PPUSH
64438: LD_VAR 0 2
64442: PPUSH
64443: LD_EXP 84
64447: PUSH
64448: LD_VAR 0 2
64452: ARRAY
64453: PUSH
64454: LD_VAR 0 3
64458: DIFF
64459: PPUSH
64460: CALL_OW 1
64464: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64465: LD_ADDR_EXP 59
64469: PUSH
64470: LD_EXP 59
64474: PPUSH
64475: LD_VAR 0 2
64479: PUSH
64480: LD_EXP 59
64484: PUSH
64485: LD_VAR 0 2
64489: ARRAY
64490: PUSH
64491: LD_INT 1
64493: PLUS
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PPUSH
64499: LD_VAR 0 3
64503: PPUSH
64504: CALL 17440 0 3
64508: ST_TO_ADDR
// end ; end ;
64509: GO 64405
64511: POP
64512: POP
// if not lab or not mc_lab_upgrade [ i ] then
64513: LD_VAR 0 6
64517: NOT
64518: PUSH
64519: LD_EXP 86
64523: PUSH
64524: LD_VAR 0 2
64528: ARRAY
64529: NOT
64530: OR
64531: IFFALSE 64535
// continue ;
64533: GO 64305
// for j in lab do
64535: LD_ADDR_VAR 0 3
64539: PUSH
64540: LD_VAR 0 6
64544: PUSH
64545: FOR_IN
64546: IFFALSE 64711
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
64548: LD_VAR 0 3
64552: PPUSH
64553: CALL_OW 266
64557: PUSH
64558: LD_INT 6
64560: PUSH
64561: LD_INT 7
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: IN
64568: PUSH
64569: LD_VAR 0 3
64573: PPUSH
64574: CALL_OW 461
64578: PUSH
64579: LD_INT 1
64581: NONEQUAL
64582: AND
64583: IFFALSE 64709
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
64585: LD_VAR 0 3
64589: PPUSH
64590: LD_EXP 86
64594: PUSH
64595: LD_VAR 0 2
64599: ARRAY
64600: PUSH
64601: LD_INT 1
64603: ARRAY
64604: PPUSH
64605: CALL 24056 0 2
64609: IFFALSE 64709
// begin ComCancel ( j ) ;
64611: LD_VAR 0 3
64615: PPUSH
64616: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
64620: LD_VAR 0 3
64624: PPUSH
64625: LD_EXP 86
64629: PUSH
64630: LD_VAR 0 2
64634: ARRAY
64635: PUSH
64636: LD_INT 1
64638: ARRAY
64639: PPUSH
64640: CALL_OW 207
// if not j in mc_construct_list [ i ] then
64644: LD_VAR 0 3
64648: PUSH
64649: LD_EXP 59
64653: PUSH
64654: LD_VAR 0 2
64658: ARRAY
64659: IN
64660: NOT
64661: IFFALSE 64707
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64663: LD_ADDR_EXP 59
64667: PUSH
64668: LD_EXP 59
64672: PPUSH
64673: LD_VAR 0 2
64677: PUSH
64678: LD_EXP 59
64682: PUSH
64683: LD_VAR 0 2
64687: ARRAY
64688: PUSH
64689: LD_INT 1
64691: PLUS
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PPUSH
64697: LD_VAR 0 3
64701: PPUSH
64702: CALL 17440 0 3
64706: ST_TO_ADDR
// break ;
64707: GO 64711
// end ; end ; end ;
64709: GO 64545
64711: POP
64712: POP
// end ;
64713: GO 64305
64715: POP
64716: POP
// end ;
64717: LD_VAR 0 1
64721: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
64722: LD_INT 0
64724: PPUSH
64725: PPUSH
64726: PPUSH
64727: PPUSH
64728: PPUSH
64729: PPUSH
64730: PPUSH
64731: PPUSH
64732: PPUSH
// if not mc_bases then
64733: LD_EXP 52
64737: NOT
64738: IFFALSE 64742
// exit ;
64740: GO 65147
// for i = 1 to mc_bases do
64742: LD_ADDR_VAR 0 2
64746: PUSH
64747: DOUBLE
64748: LD_INT 1
64750: DEC
64751: ST_TO_ADDR
64752: LD_EXP 52
64756: PUSH
64757: FOR_TO
64758: IFFALSE 65145
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64760: LD_EXP 60
64764: PUSH
64765: LD_VAR 0 2
64769: ARRAY
64770: NOT
64771: PUSH
64772: LD_EXP 52
64776: PUSH
64777: LD_VAR 0 2
64781: ARRAY
64782: PPUSH
64783: LD_INT 30
64785: PUSH
64786: LD_INT 3
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PPUSH
64793: CALL_OW 72
64797: NOT
64798: OR
64799: IFFALSE 64803
// continue ;
64801: GO 64757
// busy := false ;
64803: LD_ADDR_VAR 0 8
64807: PUSH
64808: LD_INT 0
64810: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64811: LD_ADDR_VAR 0 4
64815: PUSH
64816: LD_EXP 52
64820: PUSH
64821: LD_VAR 0 2
64825: ARRAY
64826: PPUSH
64827: LD_INT 30
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PPUSH
64837: CALL_OW 72
64841: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64842: LD_ADDR_VAR 0 6
64846: PUSH
64847: LD_EXP 60
64851: PUSH
64852: LD_VAR 0 2
64856: ARRAY
64857: PPUSH
64858: LD_INT 2
64860: PUSH
64861: LD_INT 30
64863: PUSH
64864: LD_INT 32
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 30
64873: PUSH
64874: LD_INT 33
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: PPUSH
64886: CALL_OW 72
64890: ST_TO_ADDR
// if not t then
64891: LD_VAR 0 6
64895: NOT
64896: IFFALSE 64900
// continue ;
64898: GO 64757
// for j in tmp do
64900: LD_ADDR_VAR 0 3
64904: PUSH
64905: LD_VAR 0 4
64909: PUSH
64910: FOR_IN
64911: IFFALSE 64941
// if not BuildingStatus ( j ) = bs_idle then
64913: LD_VAR 0 3
64917: PPUSH
64918: CALL_OW 461
64922: PUSH
64923: LD_INT 2
64925: EQUAL
64926: NOT
64927: IFFALSE 64939
// begin busy := true ;
64929: LD_ADDR_VAR 0 8
64933: PUSH
64934: LD_INT 1
64936: ST_TO_ADDR
// break ;
64937: GO 64941
// end ;
64939: GO 64910
64941: POP
64942: POP
// if busy then
64943: LD_VAR 0 8
64947: IFFALSE 64951
// continue ;
64949: GO 64757
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64951: LD_ADDR_VAR 0 7
64955: PUSH
64956: LD_VAR 0 6
64960: PPUSH
64961: LD_INT 35
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PPUSH
64971: CALL_OW 72
64975: ST_TO_ADDR
// if tw then
64976: LD_VAR 0 7
64980: IFFALSE 65057
// begin tw := tw [ 1 ] ;
64982: LD_ADDR_VAR 0 7
64986: PUSH
64987: LD_VAR 0 7
64991: PUSH
64992: LD_INT 1
64994: ARRAY
64995: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64996: LD_ADDR_VAR 0 9
65000: PUSH
65001: LD_VAR 0 7
65005: PPUSH
65006: LD_EXP 77
65010: PUSH
65011: LD_VAR 0 2
65015: ARRAY
65016: PPUSH
65017: CALL 22410 0 2
65021: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
65022: LD_EXP 91
65026: PUSH
65027: LD_VAR 0 2
65031: ARRAY
65032: IFFALSE 65055
// if not weapon in mc_allowed_tower_weapons [ i ] then
65034: LD_VAR 0 9
65038: PUSH
65039: LD_EXP 91
65043: PUSH
65044: LD_VAR 0 2
65048: ARRAY
65049: IN
65050: NOT
65051: IFFALSE 65055
// continue ;
65053: GO 64757
// end else
65055: GO 65120
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
65057: LD_ADDR_VAR 0 5
65061: PUSH
65062: LD_EXP 60
65066: PUSH
65067: LD_VAR 0 2
65071: ARRAY
65072: PPUSH
65073: LD_VAR 0 4
65077: PPUSH
65078: CALL 52611 0 2
65082: ST_TO_ADDR
// if not tmp2 then
65083: LD_VAR 0 5
65087: NOT
65088: IFFALSE 65092
// continue ;
65090: GO 64757
// tw := tmp2 [ 1 ] ;
65092: LD_ADDR_VAR 0 7
65096: PUSH
65097: LD_VAR 0 5
65101: PUSH
65102: LD_INT 1
65104: ARRAY
65105: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
65106: LD_ADDR_VAR 0 9
65110: PUSH
65111: LD_VAR 0 5
65115: PUSH
65116: LD_INT 2
65118: ARRAY
65119: ST_TO_ADDR
// end ; if not weapon then
65120: LD_VAR 0 9
65124: NOT
65125: IFFALSE 65129
// continue ;
65127: GO 64757
// ComPlaceWeapon ( tw , weapon ) ;
65129: LD_VAR 0 7
65133: PPUSH
65134: LD_VAR 0 9
65138: PPUSH
65139: CALL_OW 148
// end ;
65143: GO 64757
65145: POP
65146: POP
// end ;
65147: LD_VAR 0 1
65151: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
65152: LD_INT 0
65154: PPUSH
65155: PPUSH
65156: PPUSH
65157: PPUSH
65158: PPUSH
65159: PPUSH
// if not mc_bases then
65160: LD_EXP 52
65164: NOT
65165: IFFALSE 65169
// exit ;
65167: GO 66181
// for i = 1 to mc_bases do
65169: LD_ADDR_VAR 0 2
65173: PUSH
65174: DOUBLE
65175: LD_INT 1
65177: DEC
65178: ST_TO_ADDR
65179: LD_EXP 52
65183: PUSH
65184: FOR_TO
65185: IFFALSE 66179
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
65187: LD_EXP 65
65191: PUSH
65192: LD_VAR 0 2
65196: ARRAY
65197: NOT
65198: PUSH
65199: LD_EXP 65
65203: PUSH
65204: LD_VAR 0 2
65208: ARRAY
65209: PUSH
65210: LD_EXP 66
65214: PUSH
65215: LD_VAR 0 2
65219: ARRAY
65220: EQUAL
65221: OR
65222: IFFALSE 65226
// continue ;
65224: GO 65184
// if mc_miners [ i ] then
65226: LD_EXP 66
65230: PUSH
65231: LD_VAR 0 2
65235: ARRAY
65236: IFFALSE 65866
// begin k := 1 ;
65238: LD_ADDR_VAR 0 4
65242: PUSH
65243: LD_INT 1
65245: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
65246: LD_ADDR_VAR 0 3
65250: PUSH
65251: DOUBLE
65252: LD_EXP 66
65256: PUSH
65257: LD_VAR 0 2
65261: ARRAY
65262: INC
65263: ST_TO_ADDR
65264: LD_INT 1
65266: PUSH
65267: FOR_DOWNTO
65268: IFFALSE 65864
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
65270: LD_EXP 66
65274: PUSH
65275: LD_VAR 0 2
65279: ARRAY
65280: PUSH
65281: LD_VAR 0 3
65285: ARRAY
65286: PPUSH
65287: CALL_OW 301
65291: PUSH
65292: LD_EXP 66
65296: PUSH
65297: LD_VAR 0 2
65301: ARRAY
65302: PUSH
65303: LD_VAR 0 3
65307: ARRAY
65308: PPUSH
65309: CALL_OW 257
65313: PUSH
65314: LD_INT 1
65316: NONEQUAL
65317: OR
65318: IFFALSE 65381
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
65320: LD_ADDR_VAR 0 5
65324: PUSH
65325: LD_EXP 66
65329: PUSH
65330: LD_VAR 0 2
65334: ARRAY
65335: PUSH
65336: LD_EXP 66
65340: PUSH
65341: LD_VAR 0 2
65345: ARRAY
65346: PUSH
65347: LD_VAR 0 3
65351: ARRAY
65352: DIFF
65353: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
65354: LD_ADDR_EXP 66
65358: PUSH
65359: LD_EXP 66
65363: PPUSH
65364: LD_VAR 0 2
65368: PPUSH
65369: LD_VAR 0 5
65373: PPUSH
65374: CALL_OW 1
65378: ST_TO_ADDR
// continue ;
65379: GO 65267
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
65381: LD_EXP 66
65385: PUSH
65386: LD_VAR 0 2
65390: ARRAY
65391: PUSH
65392: LD_VAR 0 3
65396: ARRAY
65397: PPUSH
65398: CALL 17376 0 1
65402: PUSH
65403: LD_EXP 66
65407: PUSH
65408: LD_VAR 0 2
65412: ARRAY
65413: PUSH
65414: LD_VAR 0 3
65418: ARRAY
65419: PPUSH
65420: CALL_OW 255
65424: PPUSH
65425: LD_EXP 65
65429: PUSH
65430: LD_VAR 0 2
65434: ARRAY
65435: PUSH
65436: LD_VAR 0 4
65440: ARRAY
65441: PUSH
65442: LD_INT 1
65444: ARRAY
65445: PPUSH
65446: LD_EXP 65
65450: PUSH
65451: LD_VAR 0 2
65455: ARRAY
65456: PUSH
65457: LD_VAR 0 4
65461: ARRAY
65462: PUSH
65463: LD_INT 2
65465: ARRAY
65466: PPUSH
65467: LD_INT 15
65469: PPUSH
65470: CALL 18336 0 4
65474: PUSH
65475: LD_INT 4
65477: ARRAY
65478: PUSH
65479: LD_EXP 66
65483: PUSH
65484: LD_VAR 0 2
65488: ARRAY
65489: PUSH
65490: LD_VAR 0 3
65494: ARRAY
65495: PPUSH
65496: LD_INT 10
65498: PPUSH
65499: CALL 20033 0 2
65503: PUSH
65504: LD_INT 4
65506: ARRAY
65507: OR
65508: AND
65509: IFFALSE 65532
// ComStop ( mc_miners [ i ] [ j ] ) ;
65511: LD_EXP 66
65515: PUSH
65516: LD_VAR 0 2
65520: ARRAY
65521: PUSH
65522: LD_VAR 0 3
65526: ARRAY
65527: PPUSH
65528: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
65532: LD_EXP 66
65536: PUSH
65537: LD_VAR 0 2
65541: ARRAY
65542: PUSH
65543: LD_VAR 0 3
65547: ARRAY
65548: PPUSH
65549: CALL_OW 257
65553: PUSH
65554: LD_INT 1
65556: EQUAL
65557: PUSH
65558: LD_EXP 66
65562: PUSH
65563: LD_VAR 0 2
65567: ARRAY
65568: PUSH
65569: LD_VAR 0 3
65573: ARRAY
65574: PPUSH
65575: CALL_OW 459
65579: NOT
65580: AND
65581: PUSH
65582: LD_EXP 66
65586: PUSH
65587: LD_VAR 0 2
65591: ARRAY
65592: PUSH
65593: LD_VAR 0 3
65597: ARRAY
65598: PPUSH
65599: CALL_OW 255
65603: PPUSH
65604: LD_EXP 65
65608: PUSH
65609: LD_VAR 0 2
65613: ARRAY
65614: PUSH
65615: LD_VAR 0 4
65619: ARRAY
65620: PUSH
65621: LD_INT 1
65623: ARRAY
65624: PPUSH
65625: LD_EXP 65
65629: PUSH
65630: LD_VAR 0 2
65634: ARRAY
65635: PUSH
65636: LD_VAR 0 4
65640: ARRAY
65641: PUSH
65642: LD_INT 2
65644: ARRAY
65645: PPUSH
65646: LD_INT 15
65648: PPUSH
65649: CALL 18336 0 4
65653: PUSH
65654: LD_INT 4
65656: ARRAY
65657: PUSH
65658: LD_INT 0
65660: EQUAL
65661: AND
65662: PUSH
65663: LD_EXP 66
65667: PUSH
65668: LD_VAR 0 2
65672: ARRAY
65673: PUSH
65674: LD_VAR 0 3
65678: ARRAY
65679: PPUSH
65680: CALL_OW 314
65684: NOT
65685: AND
65686: IFFALSE 65862
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
65688: LD_EXP 66
65692: PUSH
65693: LD_VAR 0 2
65697: ARRAY
65698: PUSH
65699: LD_VAR 0 3
65703: ARRAY
65704: PPUSH
65705: CALL_OW 310
65709: IFFALSE 65732
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
65711: LD_EXP 66
65715: PUSH
65716: LD_VAR 0 2
65720: ARRAY
65721: PUSH
65722: LD_VAR 0 3
65726: ARRAY
65727: PPUSH
65728: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
65732: LD_EXP 66
65736: PUSH
65737: LD_VAR 0 2
65741: ARRAY
65742: PUSH
65743: LD_VAR 0 3
65747: ARRAY
65748: PPUSH
65749: CALL_OW 314
65753: NOT
65754: IFFALSE 65822
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65756: LD_EXP 66
65760: PUSH
65761: LD_VAR 0 2
65765: ARRAY
65766: PUSH
65767: LD_VAR 0 3
65771: ARRAY
65772: PPUSH
65773: LD_EXP 65
65777: PUSH
65778: LD_VAR 0 2
65782: ARRAY
65783: PUSH
65784: LD_VAR 0 4
65788: ARRAY
65789: PUSH
65790: LD_INT 1
65792: ARRAY
65793: PPUSH
65794: LD_EXP 65
65798: PUSH
65799: LD_VAR 0 2
65803: ARRAY
65804: PUSH
65805: LD_VAR 0 4
65809: ARRAY
65810: PUSH
65811: LD_INT 2
65813: ARRAY
65814: PPUSH
65815: LD_INT 0
65817: PPUSH
65818: CALL_OW 193
// k := k + 1 ;
65822: LD_ADDR_VAR 0 4
65826: PUSH
65827: LD_VAR 0 4
65831: PUSH
65832: LD_INT 1
65834: PLUS
65835: ST_TO_ADDR
// if k > mc_mines [ i ] then
65836: LD_VAR 0 4
65840: PUSH
65841: LD_EXP 65
65845: PUSH
65846: LD_VAR 0 2
65850: ARRAY
65851: GREATER
65852: IFFALSE 65862
// k := 1 ;
65854: LD_ADDR_VAR 0 4
65858: PUSH
65859: LD_INT 1
65861: ST_TO_ADDR
// end ; end ;
65862: GO 65267
65864: POP
65865: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65866: LD_ADDR_VAR 0 5
65870: PUSH
65871: LD_EXP 52
65875: PUSH
65876: LD_VAR 0 2
65880: ARRAY
65881: PPUSH
65882: LD_INT 2
65884: PUSH
65885: LD_INT 30
65887: PUSH
65888: LD_INT 4
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 30
65897: PUSH
65898: LD_INT 5
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 30
65907: PUSH
65908: LD_INT 32
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: PPUSH
65921: CALL_OW 72
65925: ST_TO_ADDR
// if not tmp then
65926: LD_VAR 0 5
65930: NOT
65931: IFFALSE 65935
// continue ;
65933: GO 65184
// list := [ ] ;
65935: LD_ADDR_VAR 0 6
65939: PUSH
65940: EMPTY
65941: ST_TO_ADDR
// for j in tmp do
65942: LD_ADDR_VAR 0 3
65946: PUSH
65947: LD_VAR 0 5
65951: PUSH
65952: FOR_IN
65953: IFFALSE 66022
// begin for k in UnitsInside ( j ) do
65955: LD_ADDR_VAR 0 4
65959: PUSH
65960: LD_VAR 0 3
65964: PPUSH
65965: CALL_OW 313
65969: PUSH
65970: FOR_IN
65971: IFFALSE 66018
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65973: LD_VAR 0 4
65977: PPUSH
65978: CALL_OW 257
65982: PUSH
65983: LD_INT 1
65985: EQUAL
65986: PUSH
65987: LD_VAR 0 4
65991: PPUSH
65992: CALL_OW 459
65996: NOT
65997: AND
65998: IFFALSE 66016
// list := list ^ k ;
66000: LD_ADDR_VAR 0 6
66004: PUSH
66005: LD_VAR 0 6
66009: PUSH
66010: LD_VAR 0 4
66014: ADD
66015: ST_TO_ADDR
66016: GO 65970
66018: POP
66019: POP
// end ;
66020: GO 65952
66022: POP
66023: POP
// list := list diff mc_miners [ i ] ;
66024: LD_ADDR_VAR 0 6
66028: PUSH
66029: LD_VAR 0 6
66033: PUSH
66034: LD_EXP 66
66038: PUSH
66039: LD_VAR 0 2
66043: ARRAY
66044: DIFF
66045: ST_TO_ADDR
// if not list then
66046: LD_VAR 0 6
66050: NOT
66051: IFFALSE 66055
// continue ;
66053: GO 65184
// k := mc_mines [ i ] - mc_miners [ i ] ;
66055: LD_ADDR_VAR 0 4
66059: PUSH
66060: LD_EXP 65
66064: PUSH
66065: LD_VAR 0 2
66069: ARRAY
66070: PUSH
66071: LD_EXP 66
66075: PUSH
66076: LD_VAR 0 2
66080: ARRAY
66081: MINUS
66082: ST_TO_ADDR
// if k > list then
66083: LD_VAR 0 4
66087: PUSH
66088: LD_VAR 0 6
66092: GREATER
66093: IFFALSE 66105
// k := list ;
66095: LD_ADDR_VAR 0 4
66099: PUSH
66100: LD_VAR 0 6
66104: ST_TO_ADDR
// for j = 1 to k do
66105: LD_ADDR_VAR 0 3
66109: PUSH
66110: DOUBLE
66111: LD_INT 1
66113: DEC
66114: ST_TO_ADDR
66115: LD_VAR 0 4
66119: PUSH
66120: FOR_TO
66121: IFFALSE 66175
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
66123: LD_ADDR_EXP 66
66127: PUSH
66128: LD_EXP 66
66132: PPUSH
66133: LD_VAR 0 2
66137: PUSH
66138: LD_EXP 66
66142: PUSH
66143: LD_VAR 0 2
66147: ARRAY
66148: PUSH
66149: LD_INT 1
66151: PLUS
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PPUSH
66157: LD_VAR 0 6
66161: PUSH
66162: LD_VAR 0 3
66166: ARRAY
66167: PPUSH
66168: CALL 17440 0 3
66172: ST_TO_ADDR
66173: GO 66120
66175: POP
66176: POP
// end ;
66177: GO 65184
66179: POP
66180: POP
// end ;
66181: LD_VAR 0 1
66185: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
66186: LD_INT 0
66188: PPUSH
66189: PPUSH
66190: PPUSH
66191: PPUSH
66192: PPUSH
66193: PPUSH
66194: PPUSH
66195: PPUSH
66196: PPUSH
66197: PPUSH
// if not mc_bases then
66198: LD_EXP 52
66202: NOT
66203: IFFALSE 66207
// exit ;
66205: GO 67938
// for i = 1 to mc_bases do
66207: LD_ADDR_VAR 0 2
66211: PUSH
66212: DOUBLE
66213: LD_INT 1
66215: DEC
66216: ST_TO_ADDR
66217: LD_EXP 52
66221: PUSH
66222: FOR_TO
66223: IFFALSE 67936
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
66225: LD_EXP 52
66229: PUSH
66230: LD_VAR 0 2
66234: ARRAY
66235: NOT
66236: PUSH
66237: LD_EXP 59
66241: PUSH
66242: LD_VAR 0 2
66246: ARRAY
66247: OR
66248: IFFALSE 66252
// continue ;
66250: GO 66222
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
66252: LD_EXP 68
66256: PUSH
66257: LD_VAR 0 2
66261: ARRAY
66262: NOT
66263: PUSH
66264: LD_EXP 69
66268: PUSH
66269: LD_VAR 0 2
66273: ARRAY
66274: AND
66275: IFFALSE 66313
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
66277: LD_ADDR_EXP 69
66281: PUSH
66282: LD_EXP 69
66286: PPUSH
66287: LD_VAR 0 2
66291: PPUSH
66292: EMPTY
66293: PPUSH
66294: CALL_OW 1
66298: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
66299: LD_VAR 0 2
66303: PPUSH
66304: LD_INT 107
66306: PPUSH
66307: CALL 57402 0 2
// continue ;
66311: GO 66222
// end ; target := [ ] ;
66313: LD_ADDR_VAR 0 6
66317: PUSH
66318: EMPTY
66319: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
66320: LD_ADDR_VAR 0 3
66324: PUSH
66325: DOUBLE
66326: LD_EXP 68
66330: PUSH
66331: LD_VAR 0 2
66335: ARRAY
66336: INC
66337: ST_TO_ADDR
66338: LD_INT 1
66340: PUSH
66341: FOR_DOWNTO
66342: IFFALSE 66602
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
66344: LD_EXP 68
66348: PUSH
66349: LD_VAR 0 2
66353: ARRAY
66354: PUSH
66355: LD_VAR 0 3
66359: ARRAY
66360: PUSH
66361: LD_INT 2
66363: ARRAY
66364: PPUSH
66365: LD_EXP 68
66369: PUSH
66370: LD_VAR 0 2
66374: ARRAY
66375: PUSH
66376: LD_VAR 0 3
66380: ARRAY
66381: PUSH
66382: LD_INT 3
66384: ARRAY
66385: PPUSH
66386: CALL_OW 488
66390: PUSH
66391: LD_EXP 68
66395: PUSH
66396: LD_VAR 0 2
66400: ARRAY
66401: PUSH
66402: LD_VAR 0 3
66406: ARRAY
66407: PUSH
66408: LD_INT 2
66410: ARRAY
66411: PPUSH
66412: LD_EXP 68
66416: PUSH
66417: LD_VAR 0 2
66421: ARRAY
66422: PUSH
66423: LD_VAR 0 3
66427: ARRAY
66428: PUSH
66429: LD_INT 3
66431: ARRAY
66432: PPUSH
66433: CALL_OW 284
66437: PUSH
66438: LD_INT 0
66440: EQUAL
66441: AND
66442: IFFALSE 66497
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
66444: LD_ADDR_VAR 0 5
66448: PUSH
66449: LD_EXP 68
66453: PUSH
66454: LD_VAR 0 2
66458: ARRAY
66459: PPUSH
66460: LD_VAR 0 3
66464: PPUSH
66465: CALL_OW 3
66469: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
66470: LD_ADDR_EXP 68
66474: PUSH
66475: LD_EXP 68
66479: PPUSH
66480: LD_VAR 0 2
66484: PPUSH
66485: LD_VAR 0 5
66489: PPUSH
66490: CALL_OW 1
66494: ST_TO_ADDR
// continue ;
66495: GO 66341
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
66497: LD_EXP 52
66501: PUSH
66502: LD_VAR 0 2
66506: ARRAY
66507: PUSH
66508: LD_INT 1
66510: ARRAY
66511: PPUSH
66512: CALL_OW 255
66516: PPUSH
66517: LD_EXP 68
66521: PUSH
66522: LD_VAR 0 2
66526: ARRAY
66527: PUSH
66528: LD_VAR 0 3
66532: ARRAY
66533: PUSH
66534: LD_INT 2
66536: ARRAY
66537: PPUSH
66538: LD_EXP 68
66542: PUSH
66543: LD_VAR 0 2
66547: ARRAY
66548: PUSH
66549: LD_VAR 0 3
66553: ARRAY
66554: PUSH
66555: LD_INT 3
66557: ARRAY
66558: PPUSH
66559: LD_INT 30
66561: PPUSH
66562: CALL 18336 0 4
66566: PUSH
66567: LD_INT 4
66569: ARRAY
66570: PUSH
66571: LD_INT 0
66573: EQUAL
66574: IFFALSE 66600
// begin target := mc_crates [ i ] [ j ] ;
66576: LD_ADDR_VAR 0 6
66580: PUSH
66581: LD_EXP 68
66585: PUSH
66586: LD_VAR 0 2
66590: ARRAY
66591: PUSH
66592: LD_VAR 0 3
66596: ARRAY
66597: ST_TO_ADDR
// break ;
66598: GO 66602
// end ; end ;
66600: GO 66341
66602: POP
66603: POP
// if not target then
66604: LD_VAR 0 6
66608: NOT
66609: IFFALSE 66613
// continue ;
66611: GO 66222
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
66613: LD_ADDR_VAR 0 7
66617: PUSH
66618: LD_EXP 71
66622: PUSH
66623: LD_VAR 0 2
66627: ARRAY
66628: PPUSH
66629: LD_INT 2
66631: PUSH
66632: LD_INT 3
66634: PUSH
66635: LD_INT 58
66637: PUSH
66638: EMPTY
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 61
66647: PUSH
66648: EMPTY
66649: LIST
66650: PUSH
66651: LD_INT 33
66653: PUSH
66654: LD_INT 5
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 33
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 2
66680: PUSH
66681: LD_INT 34
66683: PUSH
66684: LD_INT 32
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 34
66693: PUSH
66694: LD_INT 51
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 34
66703: PUSH
66704: LD_INT 12
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PPUSH
66721: CALL_OW 72
66725: ST_TO_ADDR
// if not cargo then
66726: LD_VAR 0 7
66730: NOT
66731: IFFALSE 67374
// begin if mc_crates_collector [ i ] < 5 then
66733: LD_EXP 69
66737: PUSH
66738: LD_VAR 0 2
66742: ARRAY
66743: PUSH
66744: LD_INT 5
66746: LESS
66747: IFFALSE 67113
// begin if mc_ape [ i ] then
66749: LD_EXP 81
66753: PUSH
66754: LD_VAR 0 2
66758: ARRAY
66759: IFFALSE 66806
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66761: LD_ADDR_VAR 0 5
66765: PUSH
66766: LD_EXP 81
66770: PUSH
66771: LD_VAR 0 2
66775: ARRAY
66776: PPUSH
66777: LD_INT 25
66779: PUSH
66780: LD_INT 16
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 24
66789: PUSH
66790: LD_INT 750
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PPUSH
66801: CALL_OW 72
66805: ST_TO_ADDR
// if not tmp then
66806: LD_VAR 0 5
66810: NOT
66811: IFFALSE 66858
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66813: LD_ADDR_VAR 0 5
66817: PUSH
66818: LD_EXP 52
66822: PUSH
66823: LD_VAR 0 2
66827: ARRAY
66828: PPUSH
66829: LD_INT 25
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 24
66841: PUSH
66842: LD_INT 750
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PPUSH
66853: CALL_OW 72
66857: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66858: LD_EXP 81
66862: PUSH
66863: LD_VAR 0 2
66867: ARRAY
66868: PUSH
66869: LD_EXP 52
66873: PUSH
66874: LD_VAR 0 2
66878: ARRAY
66879: PPUSH
66880: LD_INT 25
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 24
66892: PUSH
66893: LD_INT 750
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PPUSH
66904: CALL_OW 72
66908: AND
66909: PUSH
66910: LD_VAR 0 5
66914: PUSH
66915: LD_INT 5
66917: LESS
66918: AND
66919: IFFALSE 67001
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66921: LD_ADDR_VAR 0 3
66925: PUSH
66926: LD_EXP 52
66930: PUSH
66931: LD_VAR 0 2
66935: ARRAY
66936: PPUSH
66937: LD_INT 25
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 24
66949: PUSH
66950: LD_INT 750
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PPUSH
66961: CALL_OW 72
66965: PUSH
66966: FOR_IN
66967: IFFALSE 66999
// begin tmp := tmp union j ;
66969: LD_ADDR_VAR 0 5
66973: PUSH
66974: LD_VAR 0 5
66978: PUSH
66979: LD_VAR 0 3
66983: UNION
66984: ST_TO_ADDR
// if tmp >= 5 then
66985: LD_VAR 0 5
66989: PUSH
66990: LD_INT 5
66992: GREATEREQUAL
66993: IFFALSE 66997
// break ;
66995: GO 66999
// end ;
66997: GO 66966
66999: POP
67000: POP
// end ; if not tmp then
67001: LD_VAR 0 5
67005: NOT
67006: IFFALSE 67010
// continue ;
67008: GO 66222
// for j in tmp do
67010: LD_ADDR_VAR 0 3
67014: PUSH
67015: LD_VAR 0 5
67019: PUSH
67020: FOR_IN
67021: IFFALSE 67111
// if not GetTag ( j ) then
67023: LD_VAR 0 3
67027: PPUSH
67028: CALL_OW 110
67032: NOT
67033: IFFALSE 67109
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
67035: LD_ADDR_EXP 69
67039: PUSH
67040: LD_EXP 69
67044: PPUSH
67045: LD_VAR 0 2
67049: PUSH
67050: LD_EXP 69
67054: PUSH
67055: LD_VAR 0 2
67059: ARRAY
67060: PUSH
67061: LD_INT 1
67063: PLUS
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PPUSH
67069: LD_VAR 0 3
67073: PPUSH
67074: CALL 17440 0 3
67078: ST_TO_ADDR
// SetTag ( j , 107 ) ;
67079: LD_VAR 0 3
67083: PPUSH
67084: LD_INT 107
67086: PPUSH
67087: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
67091: LD_EXP 69
67095: PUSH
67096: LD_VAR 0 2
67100: ARRAY
67101: PUSH
67102: LD_INT 5
67104: GREATEREQUAL
67105: IFFALSE 67109
// break ;
67107: GO 67111
// end ;
67109: GO 67020
67111: POP
67112: POP
// end ; if mc_crates_collector [ i ] and target then
67113: LD_EXP 69
67117: PUSH
67118: LD_VAR 0 2
67122: ARRAY
67123: PUSH
67124: LD_VAR 0 6
67128: AND
67129: IFFALSE 67372
// begin if mc_crates_collector [ i ] < target [ 1 ] then
67131: LD_EXP 69
67135: PUSH
67136: LD_VAR 0 2
67140: ARRAY
67141: PUSH
67142: LD_VAR 0 6
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: LESS
67151: IFFALSE 67171
// tmp := mc_crates_collector [ i ] else
67153: LD_ADDR_VAR 0 5
67157: PUSH
67158: LD_EXP 69
67162: PUSH
67163: LD_VAR 0 2
67167: ARRAY
67168: ST_TO_ADDR
67169: GO 67185
// tmp := target [ 1 ] ;
67171: LD_ADDR_VAR 0 5
67175: PUSH
67176: LD_VAR 0 6
67180: PUSH
67181: LD_INT 1
67183: ARRAY
67184: ST_TO_ADDR
// k := 0 ;
67185: LD_ADDR_VAR 0 4
67189: PUSH
67190: LD_INT 0
67192: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
67193: LD_ADDR_VAR 0 3
67197: PUSH
67198: LD_EXP 69
67202: PUSH
67203: LD_VAR 0 2
67207: ARRAY
67208: PUSH
67209: FOR_IN
67210: IFFALSE 67370
// begin k := k + 1 ;
67212: LD_ADDR_VAR 0 4
67216: PUSH
67217: LD_VAR 0 4
67221: PUSH
67222: LD_INT 1
67224: PLUS
67225: ST_TO_ADDR
// if k > tmp then
67226: LD_VAR 0 4
67230: PUSH
67231: LD_VAR 0 5
67235: GREATER
67236: IFFALSE 67240
// break ;
67238: GO 67370
// if not GetClass ( j ) in [ 2 , 16 ] then
67240: LD_VAR 0 3
67244: PPUSH
67245: CALL_OW 257
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: LD_INT 16
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: IN
67260: NOT
67261: IFFALSE 67314
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
67263: LD_ADDR_EXP 69
67267: PUSH
67268: LD_EXP 69
67272: PPUSH
67273: LD_VAR 0 2
67277: PPUSH
67278: LD_EXP 69
67282: PUSH
67283: LD_VAR 0 2
67287: ARRAY
67288: PUSH
67289: LD_VAR 0 3
67293: DIFF
67294: PPUSH
67295: CALL_OW 1
67299: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67300: LD_VAR 0 3
67304: PPUSH
67305: LD_INT 0
67307: PPUSH
67308: CALL_OW 109
// continue ;
67312: GO 67209
// end ; if IsInUnit ( j ) then
67314: LD_VAR 0 3
67318: PPUSH
67319: CALL_OW 310
67323: IFFALSE 67334
// ComExitBuilding ( j ) ;
67325: LD_VAR 0 3
67329: PPUSH
67330: CALL_OW 122
// wait ( 3 ) ;
67334: LD_INT 3
67336: PPUSH
67337: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67341: LD_VAR 0 3
67345: PPUSH
67346: LD_VAR 0 6
67350: PUSH
67351: LD_INT 2
67353: ARRAY
67354: PPUSH
67355: LD_VAR 0 6
67359: PUSH
67360: LD_INT 3
67362: ARRAY
67363: PPUSH
67364: CALL_OW 117
// end ;
67368: GO 67209
67370: POP
67371: POP
// end ; end else
67372: GO 67934
// begin for j in cargo do
67374: LD_ADDR_VAR 0 3
67378: PUSH
67379: LD_VAR 0 7
67383: PUSH
67384: FOR_IN
67385: IFFALSE 67932
// begin if GetTag ( j ) <> 0 then
67387: LD_VAR 0 3
67391: PPUSH
67392: CALL_OW 110
67396: PUSH
67397: LD_INT 0
67399: NONEQUAL
67400: IFFALSE 67404
// continue ;
67402: GO 67384
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 256
67413: PUSH
67414: LD_INT 1000
67416: LESS
67417: PUSH
67418: LD_VAR 0 3
67422: PPUSH
67423: LD_EXP 76
67427: PUSH
67428: LD_VAR 0 2
67432: ARRAY
67433: PPUSH
67434: CALL_OW 308
67438: NOT
67439: AND
67440: IFFALSE 67462
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67442: LD_VAR 0 3
67446: PPUSH
67447: LD_EXP 76
67451: PUSH
67452: LD_VAR 0 2
67456: ARRAY
67457: PPUSH
67458: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
67462: LD_VAR 0 3
67466: PPUSH
67467: CALL_OW 256
67471: PUSH
67472: LD_INT 1000
67474: LESS
67475: PUSH
67476: LD_VAR 0 3
67480: PPUSH
67481: LD_EXP 76
67485: PUSH
67486: LD_VAR 0 2
67490: ARRAY
67491: PPUSH
67492: CALL_OW 308
67496: AND
67497: IFFALSE 67501
// continue ;
67499: GO 67384
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
67501: LD_VAR 0 3
67505: PPUSH
67506: CALL_OW 262
67510: PUSH
67511: LD_INT 2
67513: EQUAL
67514: PUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: CALL_OW 261
67524: PUSH
67525: LD_INT 15
67527: LESS
67528: AND
67529: IFFALSE 67533
// continue ;
67531: GO 67384
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
67533: LD_VAR 0 3
67537: PPUSH
67538: CALL_OW 262
67542: PUSH
67543: LD_INT 1
67545: EQUAL
67546: PUSH
67547: LD_VAR 0 3
67551: PPUSH
67552: CALL_OW 261
67556: PUSH
67557: LD_INT 10
67559: LESS
67560: AND
67561: IFFALSE 67871
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67563: LD_ADDR_VAR 0 8
67567: PUSH
67568: LD_EXP 52
67572: PUSH
67573: LD_VAR 0 2
67577: ARRAY
67578: PPUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 30
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 30
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: LIST
67606: PPUSH
67607: CALL_OW 72
67611: ST_TO_ADDR
// if not depot then
67612: LD_VAR 0 8
67616: NOT
67617: IFFALSE 67621
// continue ;
67619: GO 67384
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
67621: LD_VAR 0 3
67625: PPUSH
67626: LD_VAR 0 8
67630: PPUSH
67631: LD_VAR 0 3
67635: PPUSH
67636: CALL_OW 74
67640: PPUSH
67641: CALL_OW 296
67645: PUSH
67646: LD_INT 6
67648: LESS
67649: IFFALSE 67665
// SetFuel ( j , 100 ) else
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 100
67658: PPUSH
67659: CALL_OW 240
67663: GO 67871
// if GetFuel ( j ) = 0 then
67665: LD_VAR 0 3
67669: PPUSH
67670: CALL_OW 261
67674: PUSH
67675: LD_INT 0
67677: EQUAL
67678: IFFALSE 67871
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
67680: LD_ADDR_EXP 71
67684: PUSH
67685: LD_EXP 71
67689: PPUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: LD_EXP 71
67699: PUSH
67700: LD_VAR 0 2
67704: ARRAY
67705: PUSH
67706: LD_VAR 0 3
67710: DIFF
67711: PPUSH
67712: CALL_OW 1
67716: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
67717: LD_VAR 0 3
67721: PPUSH
67722: CALL_OW 263
67726: PUSH
67727: LD_INT 1
67729: EQUAL
67730: IFFALSE 67746
// ComExitVehicle ( IsInUnit ( j ) ) ;
67732: LD_VAR 0 3
67736: PPUSH
67737: CALL_OW 310
67741: PPUSH
67742: CALL_OW 121
// if GetControl ( j ) = control_remote then
67746: LD_VAR 0 3
67750: PPUSH
67751: CALL_OW 263
67755: PUSH
67756: LD_INT 2
67758: EQUAL
67759: IFFALSE 67770
// ComUnlink ( j ) ;
67761: LD_VAR 0 3
67765: PPUSH
67766: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
67770: LD_ADDR_VAR 0 9
67774: PUSH
67775: LD_VAR 0 2
67779: PPUSH
67780: LD_INT 3
67782: PPUSH
67783: CALL 76917 0 2
67787: ST_TO_ADDR
// if fac then
67788: LD_VAR 0 9
67792: IFFALSE 67869
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67794: LD_ADDR_VAR 0 10
67798: PUSH
67799: LD_VAR 0 9
67803: PPUSH
67804: LD_VAR 0 3
67808: PPUSH
67809: CALL_OW 265
67813: PPUSH
67814: LD_VAR 0 3
67818: PPUSH
67819: CALL_OW 262
67823: PPUSH
67824: LD_VAR 0 3
67828: PPUSH
67829: CALL_OW 263
67833: PPUSH
67834: LD_VAR 0 3
67838: PPUSH
67839: CALL_OW 264
67843: PPUSH
67844: CALL 15033 0 5
67848: ST_TO_ADDR
// if components then
67849: LD_VAR 0 10
67853: IFFALSE 67869
// MC_InsertProduceList ( i , components ) ;
67855: LD_VAR 0 2
67859: PPUSH
67860: LD_VAR 0 10
67864: PPUSH
67865: CALL 76545 0 2
// end ; continue ;
67869: GO 67384
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67871: LD_VAR 0 3
67875: PPUSH
67876: LD_INT 1
67878: PPUSH
67879: CALL_OW 289
67883: PUSH
67884: LD_INT 100
67886: LESS
67887: PUSH
67888: LD_VAR 0 3
67892: PPUSH
67893: CALL_OW 314
67897: NOT
67898: AND
67899: IFFALSE 67928
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67901: LD_VAR 0 3
67905: PPUSH
67906: LD_VAR 0 6
67910: PUSH
67911: LD_INT 2
67913: ARRAY
67914: PPUSH
67915: LD_VAR 0 6
67919: PUSH
67920: LD_INT 3
67922: ARRAY
67923: PPUSH
67924: CALL_OW 117
// break ;
67928: GO 67932
// end ;
67930: GO 67384
67932: POP
67933: POP
// end ; end ;
67934: GO 66222
67936: POP
67937: POP
// end ;
67938: LD_VAR 0 1
67942: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67943: LD_INT 0
67945: PPUSH
67946: PPUSH
67947: PPUSH
67948: PPUSH
// if not mc_bases then
67949: LD_EXP 52
67953: NOT
67954: IFFALSE 67958
// exit ;
67956: GO 68119
// for i = 1 to mc_bases do
67958: LD_ADDR_VAR 0 2
67962: PUSH
67963: DOUBLE
67964: LD_INT 1
67966: DEC
67967: ST_TO_ADDR
67968: LD_EXP 52
67972: PUSH
67973: FOR_TO
67974: IFFALSE 68117
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67976: LD_ADDR_VAR 0 4
67980: PUSH
67981: LD_EXP 71
67985: PUSH
67986: LD_VAR 0 2
67990: ARRAY
67991: PUSH
67992: LD_EXP 74
67996: PUSH
67997: LD_VAR 0 2
68001: ARRAY
68002: UNION
68003: PPUSH
68004: LD_INT 33
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PPUSH
68014: CALL_OW 72
68018: ST_TO_ADDR
// if tmp then
68019: LD_VAR 0 4
68023: IFFALSE 68115
// for j in tmp do
68025: LD_ADDR_VAR 0 3
68029: PUSH
68030: LD_VAR 0 4
68034: PUSH
68035: FOR_IN
68036: IFFALSE 68113
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
68038: LD_VAR 0 3
68042: PPUSH
68043: CALL_OW 312
68047: NOT
68048: PUSH
68049: LD_VAR 0 3
68053: PPUSH
68054: CALL_OW 256
68058: PUSH
68059: LD_INT 250
68061: GREATEREQUAL
68062: AND
68063: IFFALSE 68076
// Connect ( j ) else
68065: LD_VAR 0 3
68069: PPUSH
68070: CALL 20373 0 1
68074: GO 68111
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
68076: LD_VAR 0 3
68080: PPUSH
68081: CALL_OW 256
68085: PUSH
68086: LD_INT 250
68088: LESS
68089: PUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: CALL_OW 312
68099: AND
68100: IFFALSE 68111
// ComUnlink ( j ) ;
68102: LD_VAR 0 3
68106: PPUSH
68107: CALL_OW 136
68111: GO 68035
68113: POP
68114: POP
// end ;
68115: GO 67973
68117: POP
68118: POP
// end ;
68119: LD_VAR 0 1
68123: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
68124: LD_INT 0
68126: PPUSH
68127: PPUSH
68128: PPUSH
68129: PPUSH
68130: PPUSH
// if not mc_bases then
68131: LD_EXP 52
68135: NOT
68136: IFFALSE 68140
// exit ;
68138: GO 68600
// for i = 1 to mc_bases do
68140: LD_ADDR_VAR 0 2
68144: PUSH
68145: DOUBLE
68146: LD_INT 1
68148: DEC
68149: ST_TO_ADDR
68150: LD_EXP 52
68154: PUSH
68155: FOR_TO
68156: IFFALSE 68598
// begin if not mc_produce [ i ] then
68158: LD_EXP 73
68162: PUSH
68163: LD_VAR 0 2
68167: ARRAY
68168: NOT
68169: IFFALSE 68173
// continue ;
68171: GO 68155
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68173: LD_ADDR_VAR 0 5
68177: PUSH
68178: LD_EXP 52
68182: PUSH
68183: LD_VAR 0 2
68187: ARRAY
68188: PPUSH
68189: LD_INT 30
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PPUSH
68199: CALL_OW 72
68203: ST_TO_ADDR
// if not fac then
68204: LD_VAR 0 5
68208: NOT
68209: IFFALSE 68213
// continue ;
68211: GO 68155
// for j in fac do
68213: LD_ADDR_VAR 0 3
68217: PUSH
68218: LD_VAR 0 5
68222: PUSH
68223: FOR_IN
68224: IFFALSE 68594
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
68226: LD_VAR 0 3
68230: PPUSH
68231: CALL_OW 461
68235: PUSH
68236: LD_INT 2
68238: NONEQUAL
68239: PUSH
68240: LD_VAR 0 3
68244: PPUSH
68245: LD_INT 15
68247: PPUSH
68248: CALL 20033 0 2
68252: PUSH
68253: LD_INT 4
68255: ARRAY
68256: OR
68257: PUSH
68258: LD_VAR 0 3
68262: PPUSH
68263: CALL_OW 313
68267: PUSH
68268: LD_INT 0
68270: EQUAL
68271: OR
68272: IFFALSE 68276
// continue ;
68274: GO 68223
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
68276: LD_VAR 0 3
68280: PPUSH
68281: LD_EXP 73
68285: PUSH
68286: LD_VAR 0 2
68290: ARRAY
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PUSH
68296: LD_INT 1
68298: ARRAY
68299: PPUSH
68300: LD_EXP 73
68304: PUSH
68305: LD_VAR 0 2
68309: ARRAY
68310: PUSH
68311: LD_INT 1
68313: ARRAY
68314: PUSH
68315: LD_INT 2
68317: ARRAY
68318: PPUSH
68319: LD_EXP 73
68323: PUSH
68324: LD_VAR 0 2
68328: ARRAY
68329: PUSH
68330: LD_INT 1
68332: ARRAY
68333: PUSH
68334: LD_INT 3
68336: ARRAY
68337: PPUSH
68338: LD_EXP 73
68342: PUSH
68343: LD_VAR 0 2
68347: ARRAY
68348: PUSH
68349: LD_INT 1
68351: ARRAY
68352: PUSH
68353: LD_INT 4
68355: ARRAY
68356: PPUSH
68357: CALL_OW 448
68361: PUSH
68362: LD_VAR 0 3
68366: PPUSH
68367: LD_EXP 73
68371: PUSH
68372: LD_VAR 0 2
68376: ARRAY
68377: PUSH
68378: LD_INT 1
68380: ARRAY
68381: PUSH
68382: LD_INT 1
68384: ARRAY
68385: PUSH
68386: LD_EXP 73
68390: PUSH
68391: LD_VAR 0 2
68395: ARRAY
68396: PUSH
68397: LD_INT 1
68399: ARRAY
68400: PUSH
68401: LD_INT 2
68403: ARRAY
68404: PUSH
68405: LD_EXP 73
68409: PUSH
68410: LD_VAR 0 2
68414: ARRAY
68415: PUSH
68416: LD_INT 1
68418: ARRAY
68419: PUSH
68420: LD_INT 3
68422: ARRAY
68423: PUSH
68424: LD_EXP 73
68428: PUSH
68429: LD_VAR 0 2
68433: ARRAY
68434: PUSH
68435: LD_INT 1
68437: ARRAY
68438: PUSH
68439: LD_INT 4
68441: ARRAY
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: PPUSH
68449: CALL 23704 0 2
68453: AND
68454: IFFALSE 68592
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
68456: LD_VAR 0 3
68460: PPUSH
68461: LD_EXP 73
68465: PUSH
68466: LD_VAR 0 2
68470: ARRAY
68471: PUSH
68472: LD_INT 1
68474: ARRAY
68475: PUSH
68476: LD_INT 1
68478: ARRAY
68479: PPUSH
68480: LD_EXP 73
68484: PUSH
68485: LD_VAR 0 2
68489: ARRAY
68490: PUSH
68491: LD_INT 1
68493: ARRAY
68494: PUSH
68495: LD_INT 2
68497: ARRAY
68498: PPUSH
68499: LD_EXP 73
68503: PUSH
68504: LD_VAR 0 2
68508: ARRAY
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_INT 3
68516: ARRAY
68517: PPUSH
68518: LD_EXP 73
68522: PUSH
68523: LD_VAR 0 2
68527: ARRAY
68528: PUSH
68529: LD_INT 1
68531: ARRAY
68532: PUSH
68533: LD_INT 4
68535: ARRAY
68536: PPUSH
68537: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
68541: LD_ADDR_VAR 0 4
68545: PUSH
68546: LD_EXP 73
68550: PUSH
68551: LD_VAR 0 2
68555: ARRAY
68556: PPUSH
68557: LD_INT 1
68559: PPUSH
68560: CALL_OW 3
68564: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68565: LD_ADDR_EXP 73
68569: PUSH
68570: LD_EXP 73
68574: PPUSH
68575: LD_VAR 0 2
68579: PPUSH
68580: LD_VAR 0 4
68584: PPUSH
68585: CALL_OW 1
68589: ST_TO_ADDR
// break ;
68590: GO 68594
// end ; end ;
68592: GO 68223
68594: POP
68595: POP
// end ;
68596: GO 68155
68598: POP
68599: POP
// end ;
68600: LD_VAR 0 1
68604: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
68605: LD_INT 0
68607: PPUSH
68608: PPUSH
68609: PPUSH
// if not mc_bases then
68610: LD_EXP 52
68614: NOT
68615: IFFALSE 68619
// exit ;
68617: GO 68708
// for i = 1 to mc_bases do
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: DOUBLE
68625: LD_INT 1
68627: DEC
68628: ST_TO_ADDR
68629: LD_EXP 52
68633: PUSH
68634: FOR_TO
68635: IFFALSE 68706
// begin if mc_attack [ i ] then
68637: LD_EXP 72
68641: PUSH
68642: LD_VAR 0 2
68646: ARRAY
68647: IFFALSE 68704
// begin tmp := mc_attack [ i ] [ 1 ] ;
68649: LD_ADDR_VAR 0 3
68653: PUSH
68654: LD_EXP 72
68658: PUSH
68659: LD_VAR 0 2
68663: ARRAY
68664: PUSH
68665: LD_INT 1
68667: ARRAY
68668: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
68669: LD_ADDR_EXP 72
68673: PUSH
68674: LD_EXP 72
68678: PPUSH
68679: LD_VAR 0 2
68683: PPUSH
68684: EMPTY
68685: PPUSH
68686: CALL_OW 1
68690: ST_TO_ADDR
// Attack ( tmp ) ;
68691: LD_VAR 0 3
68695: PPUSH
68696: CALL 45917 0 1
// exit ;
68700: POP
68701: POP
68702: GO 68708
// end ; end ;
68704: GO 68634
68706: POP
68707: POP
// end ;
68708: LD_VAR 0 1
68712: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
68713: LD_INT 0
68715: PPUSH
68716: PPUSH
68717: PPUSH
68718: PPUSH
68719: PPUSH
68720: PPUSH
68721: PPUSH
// if not mc_bases then
68722: LD_EXP 52
68726: NOT
68727: IFFALSE 68731
// exit ;
68729: GO 69313
// for i = 1 to mc_bases do
68731: LD_ADDR_VAR 0 2
68735: PUSH
68736: DOUBLE
68737: LD_INT 1
68739: DEC
68740: ST_TO_ADDR
68741: LD_EXP 52
68745: PUSH
68746: FOR_TO
68747: IFFALSE 69311
// begin if not mc_bases [ i ] then
68749: LD_EXP 52
68753: PUSH
68754: LD_VAR 0 2
68758: ARRAY
68759: NOT
68760: IFFALSE 68764
// continue ;
68762: GO 68746
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68764: LD_ADDR_VAR 0 7
68768: PUSH
68769: LD_EXP 52
68773: PUSH
68774: LD_VAR 0 2
68778: ARRAY
68779: PUSH
68780: LD_INT 1
68782: ARRAY
68783: PPUSH
68784: CALL 14337 0 1
68788: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68789: LD_ADDR_EXP 75
68793: PUSH
68794: LD_EXP 75
68798: PPUSH
68799: LD_VAR 0 2
68803: PPUSH
68804: LD_EXP 52
68808: PUSH
68809: LD_VAR 0 2
68813: ARRAY
68814: PUSH
68815: LD_INT 1
68817: ARRAY
68818: PPUSH
68819: CALL_OW 255
68823: PPUSH
68824: LD_EXP 77
68828: PUSH
68829: LD_VAR 0 2
68833: ARRAY
68834: PPUSH
68835: CALL 12334 0 2
68839: PPUSH
68840: CALL_OW 1
68844: ST_TO_ADDR
// if not mc_scan [ i ] then
68845: LD_EXP 75
68849: PUSH
68850: LD_VAR 0 2
68854: ARRAY
68855: NOT
68856: IFFALSE 69011
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68858: LD_ADDR_VAR 0 4
68862: PUSH
68863: LD_EXP 52
68867: PUSH
68868: LD_VAR 0 2
68872: ARRAY
68873: PPUSH
68874: LD_INT 2
68876: PUSH
68877: LD_INT 25
68879: PUSH
68880: LD_INT 5
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 25
68889: PUSH
68890: LD_INT 8
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 25
68899: PUSH
68900: LD_INT 9
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: PPUSH
68913: CALL_OW 72
68917: ST_TO_ADDR
// if not tmp then
68918: LD_VAR 0 4
68922: NOT
68923: IFFALSE 68927
// continue ;
68925: GO 68746
// for j in tmp do
68927: LD_ADDR_VAR 0 3
68931: PUSH
68932: LD_VAR 0 4
68936: PUSH
68937: FOR_IN
68938: IFFALSE 69009
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68940: LD_VAR 0 3
68944: PPUSH
68945: CALL_OW 310
68949: PPUSH
68950: CALL_OW 266
68954: PUSH
68955: LD_INT 5
68957: EQUAL
68958: PUSH
68959: LD_VAR 0 3
68963: PPUSH
68964: CALL_OW 257
68968: PUSH
68969: LD_INT 1
68971: EQUAL
68972: AND
68973: PUSH
68974: LD_VAR 0 3
68978: PPUSH
68979: CALL_OW 459
68983: NOT
68984: AND
68985: PUSH
68986: LD_VAR 0 7
68990: AND
68991: IFFALSE 69007
// ComChangeProfession ( j , class ) ;
68993: LD_VAR 0 3
68997: PPUSH
68998: LD_VAR 0 7
69002: PPUSH
69003: CALL_OW 123
69007: GO 68937
69009: POP
69010: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
69011: LD_EXP 75
69015: PUSH
69016: LD_VAR 0 2
69020: ARRAY
69021: PUSH
69022: LD_EXP 74
69026: PUSH
69027: LD_VAR 0 2
69031: ARRAY
69032: NOT
69033: AND
69034: PUSH
69035: LD_EXP 52
69039: PUSH
69040: LD_VAR 0 2
69044: ARRAY
69045: PPUSH
69046: LD_INT 30
69048: PUSH
69049: LD_INT 32
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PPUSH
69056: CALL_OW 72
69060: NOT
69061: AND
69062: PUSH
69063: LD_EXP 52
69067: PUSH
69068: LD_VAR 0 2
69072: ARRAY
69073: PPUSH
69074: LD_INT 2
69076: PUSH
69077: LD_INT 30
69079: PUSH
69080: LD_INT 4
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 30
69089: PUSH
69090: LD_INT 5
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: PPUSH
69102: CALL_OW 72
69106: NOT
69107: AND
69108: IFFALSE 69240
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69110: LD_ADDR_VAR 0 4
69114: PUSH
69115: LD_EXP 52
69119: PUSH
69120: LD_VAR 0 2
69124: ARRAY
69125: PPUSH
69126: LD_INT 2
69128: PUSH
69129: LD_INT 25
69131: PUSH
69132: LD_INT 1
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 25
69141: PUSH
69142: LD_INT 5
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 25
69151: PUSH
69152: LD_INT 8
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 25
69161: PUSH
69162: LD_INT 9
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: PPUSH
69176: CALL_OW 72
69180: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
69181: LD_ADDR_VAR 0 4
69185: PUSH
69186: LD_VAR 0 4
69190: PUSH
69191: LD_VAR 0 4
69195: PPUSH
69196: LD_INT 18
69198: PPUSH
69199: CALL 50700 0 2
69203: DIFF
69204: ST_TO_ADDR
// if tmp then
69205: LD_VAR 0 4
69209: IFFALSE 69240
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
69211: LD_VAR 0 2
69215: PPUSH
69216: LD_VAR 0 4
69220: PPUSH
69221: LD_EXP 77
69225: PUSH
69226: LD_VAR 0 2
69230: ARRAY
69231: PPUSH
69232: CALL 12369 0 3
// exit ;
69236: POP
69237: POP
69238: GO 69313
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
69240: LD_EXP 75
69244: PUSH
69245: LD_VAR 0 2
69249: ARRAY
69250: PUSH
69251: LD_EXP 74
69255: PUSH
69256: LD_VAR 0 2
69260: ARRAY
69261: AND
69262: IFFALSE 69309
// begin tmp := mc_defender [ i ] ;
69264: LD_ADDR_VAR 0 4
69268: PUSH
69269: LD_EXP 74
69273: PUSH
69274: LD_VAR 0 2
69278: ARRAY
69279: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
69280: LD_VAR 0 2
69284: PPUSH
69285: LD_VAR 0 4
69289: PPUSH
69290: LD_EXP 75
69294: PUSH
69295: LD_VAR 0 2
69299: ARRAY
69300: PPUSH
69301: CALL 12867 0 3
// exit ;
69305: POP
69306: POP
69307: GO 69313
// end ; end ;
69309: GO 68746
69311: POP
69312: POP
// end ;
69313: LD_VAR 0 1
69317: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
69318: LD_INT 0
69320: PPUSH
69321: PPUSH
69322: PPUSH
69323: PPUSH
69324: PPUSH
69325: PPUSH
69326: PPUSH
69327: PPUSH
69328: PPUSH
69329: PPUSH
69330: PPUSH
// if not mc_bases then
69331: LD_EXP 52
69335: NOT
69336: IFFALSE 69340
// exit ;
69338: GO 70427
// for i = 1 to mc_bases do
69340: LD_ADDR_VAR 0 2
69344: PUSH
69345: DOUBLE
69346: LD_INT 1
69348: DEC
69349: ST_TO_ADDR
69350: LD_EXP 52
69354: PUSH
69355: FOR_TO
69356: IFFALSE 70425
// begin tmp := mc_lab [ i ] ;
69358: LD_ADDR_VAR 0 6
69362: PUSH
69363: LD_EXP 85
69367: PUSH
69368: LD_VAR 0 2
69372: ARRAY
69373: ST_TO_ADDR
// if not tmp then
69374: LD_VAR 0 6
69378: NOT
69379: IFFALSE 69383
// continue ;
69381: GO 69355
// idle_lab := 0 ;
69383: LD_ADDR_VAR 0 11
69387: PUSH
69388: LD_INT 0
69390: ST_TO_ADDR
// for j in tmp do
69391: LD_ADDR_VAR 0 3
69395: PUSH
69396: LD_VAR 0 6
69400: PUSH
69401: FOR_IN
69402: IFFALSE 70421
// begin researching := false ;
69404: LD_ADDR_VAR 0 10
69408: PUSH
69409: LD_INT 0
69411: ST_TO_ADDR
// side := GetSide ( j ) ;
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: LD_VAR 0 3
69421: PPUSH
69422: CALL_OW 255
69426: ST_TO_ADDR
// if not mc_tech [ side ] then
69427: LD_EXP 79
69431: PUSH
69432: LD_VAR 0 4
69436: ARRAY
69437: NOT
69438: IFFALSE 69442
// continue ;
69440: GO 69401
// if BuildingStatus ( j ) = bs_idle then
69442: LD_VAR 0 3
69446: PPUSH
69447: CALL_OW 461
69451: PUSH
69452: LD_INT 2
69454: EQUAL
69455: IFFALSE 69643
// begin if idle_lab and UnitsInside ( j ) < 6 then
69457: LD_VAR 0 11
69461: PUSH
69462: LD_VAR 0 3
69466: PPUSH
69467: CALL_OW 313
69471: PUSH
69472: LD_INT 6
69474: LESS
69475: AND
69476: IFFALSE 69547
// begin tmp2 := UnitsInside ( idle_lab ) ;
69478: LD_ADDR_VAR 0 9
69482: PUSH
69483: LD_VAR 0 11
69487: PPUSH
69488: CALL_OW 313
69492: ST_TO_ADDR
// if tmp2 then
69493: LD_VAR 0 9
69497: IFFALSE 69539
// for x in tmp2 do
69499: LD_ADDR_VAR 0 7
69503: PUSH
69504: LD_VAR 0 9
69508: PUSH
69509: FOR_IN
69510: IFFALSE 69537
// begin ComExitBuilding ( x ) ;
69512: LD_VAR 0 7
69516: PPUSH
69517: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
69521: LD_VAR 0 7
69525: PPUSH
69526: LD_VAR 0 3
69530: PPUSH
69531: CALL_OW 180
// end ;
69535: GO 69509
69537: POP
69538: POP
// idle_lab := 0 ;
69539: LD_ADDR_VAR 0 11
69543: PUSH
69544: LD_INT 0
69546: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
69547: LD_ADDR_VAR 0 5
69551: PUSH
69552: LD_EXP 79
69556: PUSH
69557: LD_VAR 0 4
69561: ARRAY
69562: PUSH
69563: FOR_IN
69564: IFFALSE 69624
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
69566: LD_VAR 0 3
69570: PPUSH
69571: LD_VAR 0 5
69575: PPUSH
69576: CALL_OW 430
69580: PUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: LD_VAR 0 5
69590: PPUSH
69591: CALL 11439 0 2
69595: AND
69596: IFFALSE 69622
// begin researching := true ;
69598: LD_ADDR_VAR 0 10
69602: PUSH
69603: LD_INT 1
69605: ST_TO_ADDR
// ComResearch ( j , t ) ;
69606: LD_VAR 0 3
69610: PPUSH
69611: LD_VAR 0 5
69615: PPUSH
69616: CALL_OW 124
// break ;
69620: GO 69624
// end ;
69622: GO 69563
69624: POP
69625: POP
// if not researching then
69626: LD_VAR 0 10
69630: NOT
69631: IFFALSE 69643
// idle_lab := j ;
69633: LD_ADDR_VAR 0 11
69637: PUSH
69638: LD_VAR 0 3
69642: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
69643: LD_VAR 0 3
69647: PPUSH
69648: CALL_OW 461
69652: PUSH
69653: LD_INT 10
69655: EQUAL
69656: IFFALSE 70244
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
69658: LD_EXP 81
69662: PUSH
69663: LD_VAR 0 2
69667: ARRAY
69668: NOT
69669: PUSH
69670: LD_EXP 82
69674: PUSH
69675: LD_VAR 0 2
69679: ARRAY
69680: NOT
69681: AND
69682: PUSH
69683: LD_EXP 79
69687: PUSH
69688: LD_VAR 0 4
69692: ARRAY
69693: PUSH
69694: LD_INT 1
69696: GREATER
69697: AND
69698: IFFALSE 69829
// begin ComCancel ( j ) ;
69700: LD_VAR 0 3
69704: PPUSH
69705: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
69709: LD_ADDR_EXP 79
69713: PUSH
69714: LD_EXP 79
69718: PPUSH
69719: LD_VAR 0 4
69723: PPUSH
69724: LD_EXP 79
69728: PUSH
69729: LD_VAR 0 4
69733: ARRAY
69734: PPUSH
69735: LD_EXP 79
69739: PUSH
69740: LD_VAR 0 4
69744: ARRAY
69745: PUSH
69746: LD_INT 1
69748: MINUS
69749: PPUSH
69750: LD_EXP 79
69754: PUSH
69755: LD_VAR 0 4
69759: ARRAY
69760: PPUSH
69761: LD_INT 0
69763: PPUSH
69764: CALL 16858 0 4
69768: PPUSH
69769: CALL_OW 1
69773: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69774: LD_ADDR_EXP 79
69778: PUSH
69779: LD_EXP 79
69783: PPUSH
69784: LD_VAR 0 4
69788: PPUSH
69789: LD_EXP 79
69793: PUSH
69794: LD_VAR 0 4
69798: ARRAY
69799: PPUSH
69800: LD_EXP 79
69804: PUSH
69805: LD_VAR 0 4
69809: ARRAY
69810: PPUSH
69811: LD_INT 1
69813: PPUSH
69814: LD_INT 0
69816: PPUSH
69817: CALL 16858 0 4
69821: PPUSH
69822: CALL_OW 1
69826: ST_TO_ADDR
// continue ;
69827: GO 69401
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69829: LD_EXP 81
69833: PUSH
69834: LD_VAR 0 2
69838: ARRAY
69839: PUSH
69840: LD_EXP 82
69844: PUSH
69845: LD_VAR 0 2
69849: ARRAY
69850: NOT
69851: AND
69852: IFFALSE 69979
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69854: LD_ADDR_EXP 82
69858: PUSH
69859: LD_EXP 82
69863: PPUSH
69864: LD_VAR 0 2
69868: PUSH
69869: LD_EXP 82
69873: PUSH
69874: LD_VAR 0 2
69878: ARRAY
69879: PUSH
69880: LD_INT 1
69882: PLUS
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PPUSH
69888: LD_EXP 81
69892: PUSH
69893: LD_VAR 0 2
69897: ARRAY
69898: PUSH
69899: LD_INT 1
69901: ARRAY
69902: PPUSH
69903: CALL 17440 0 3
69907: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69908: LD_EXP 81
69912: PUSH
69913: LD_VAR 0 2
69917: ARRAY
69918: PUSH
69919: LD_INT 1
69921: ARRAY
69922: PPUSH
69923: LD_INT 112
69925: PPUSH
69926: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69930: LD_ADDR_VAR 0 9
69934: PUSH
69935: LD_EXP 81
69939: PUSH
69940: LD_VAR 0 2
69944: ARRAY
69945: PPUSH
69946: LD_INT 1
69948: PPUSH
69949: CALL_OW 3
69953: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69954: LD_ADDR_EXP 81
69958: PUSH
69959: LD_EXP 81
69963: PPUSH
69964: LD_VAR 0 2
69968: PPUSH
69969: LD_VAR 0 9
69973: PPUSH
69974: CALL_OW 1
69978: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69979: LD_EXP 81
69983: PUSH
69984: LD_VAR 0 2
69988: ARRAY
69989: PUSH
69990: LD_EXP 82
69994: PUSH
69995: LD_VAR 0 2
69999: ARRAY
70000: AND
70001: PUSH
70002: LD_EXP 82
70006: PUSH
70007: LD_VAR 0 2
70011: ARRAY
70012: PUSH
70013: LD_INT 1
70015: ARRAY
70016: PPUSH
70017: CALL_OW 310
70021: NOT
70022: AND
70023: PUSH
70024: LD_VAR 0 3
70028: PPUSH
70029: CALL_OW 313
70033: PUSH
70034: LD_INT 6
70036: EQUAL
70037: AND
70038: IFFALSE 70094
// begin tmp2 := UnitsInside ( j ) ;
70040: LD_ADDR_VAR 0 9
70044: PUSH
70045: LD_VAR 0 3
70049: PPUSH
70050: CALL_OW 313
70054: ST_TO_ADDR
// if tmp2 = 6 then
70055: LD_VAR 0 9
70059: PUSH
70060: LD_INT 6
70062: EQUAL
70063: IFFALSE 70094
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
70065: LD_VAR 0 9
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: PPUSH
70074: LD_INT 112
70076: PPUSH
70077: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
70081: LD_VAR 0 9
70085: PUSH
70086: LD_INT 1
70088: ARRAY
70089: PPUSH
70090: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
70094: LD_EXP 82
70098: PUSH
70099: LD_VAR 0 2
70103: ARRAY
70104: PUSH
70105: LD_EXP 82
70109: PUSH
70110: LD_VAR 0 2
70114: ARRAY
70115: PUSH
70116: LD_INT 1
70118: ARRAY
70119: PPUSH
70120: CALL_OW 314
70124: NOT
70125: AND
70126: PUSH
70127: LD_EXP 82
70131: PUSH
70132: LD_VAR 0 2
70136: ARRAY
70137: PUSH
70138: LD_INT 1
70140: ARRAY
70141: PPUSH
70142: CALL_OW 310
70146: NOT
70147: AND
70148: IFFALSE 70174
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
70150: LD_EXP 82
70154: PUSH
70155: LD_VAR 0 2
70159: ARRAY
70160: PUSH
70161: LD_INT 1
70163: ARRAY
70164: PPUSH
70165: LD_VAR 0 3
70169: PPUSH
70170: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
70174: LD_EXP 82
70178: PUSH
70179: LD_VAR 0 2
70183: ARRAY
70184: PUSH
70185: LD_INT 1
70187: ARRAY
70188: PPUSH
70189: CALL_OW 310
70193: PUSH
70194: LD_EXP 82
70198: PUSH
70199: LD_VAR 0 2
70203: ARRAY
70204: PUSH
70205: LD_INT 1
70207: ARRAY
70208: PPUSH
70209: CALL_OW 310
70213: PPUSH
70214: CALL_OW 461
70218: PUSH
70219: LD_INT 3
70221: NONEQUAL
70222: AND
70223: IFFALSE 70244
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
70225: LD_EXP 82
70229: PUSH
70230: LD_VAR 0 2
70234: ARRAY
70235: PUSH
70236: LD_INT 1
70238: ARRAY
70239: PPUSH
70240: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
70244: LD_VAR 0 3
70248: PPUSH
70249: CALL_OW 461
70253: PUSH
70254: LD_INT 6
70256: EQUAL
70257: PUSH
70258: LD_VAR 0 6
70262: PUSH
70263: LD_INT 1
70265: GREATER
70266: AND
70267: IFFALSE 70419
// begin sci := [ ] ;
70269: LD_ADDR_VAR 0 8
70273: PUSH
70274: EMPTY
70275: ST_TO_ADDR
// for x in ( tmp diff j ) do
70276: LD_ADDR_VAR 0 7
70280: PUSH
70281: LD_VAR 0 6
70285: PUSH
70286: LD_VAR 0 3
70290: DIFF
70291: PUSH
70292: FOR_IN
70293: IFFALSE 70345
// begin if sci = 6 then
70295: LD_VAR 0 8
70299: PUSH
70300: LD_INT 6
70302: EQUAL
70303: IFFALSE 70307
// break ;
70305: GO 70345
// if BuildingStatus ( x ) = bs_idle then
70307: LD_VAR 0 7
70311: PPUSH
70312: CALL_OW 461
70316: PUSH
70317: LD_INT 2
70319: EQUAL
70320: IFFALSE 70343
// sci := sci ^ UnitsInside ( x ) ;
70322: LD_ADDR_VAR 0 8
70326: PUSH
70327: LD_VAR 0 8
70331: PUSH
70332: LD_VAR 0 7
70336: PPUSH
70337: CALL_OW 313
70341: ADD
70342: ST_TO_ADDR
// end ;
70343: GO 70292
70345: POP
70346: POP
// if not sci then
70347: LD_VAR 0 8
70351: NOT
70352: IFFALSE 70356
// continue ;
70354: GO 69401
// for x in sci do
70356: LD_ADDR_VAR 0 7
70360: PUSH
70361: LD_VAR 0 8
70365: PUSH
70366: FOR_IN
70367: IFFALSE 70417
// if IsInUnit ( x ) and not HasTask ( x ) then
70369: LD_VAR 0 7
70373: PPUSH
70374: CALL_OW 310
70378: PUSH
70379: LD_VAR 0 7
70383: PPUSH
70384: CALL_OW 314
70388: NOT
70389: AND
70390: IFFALSE 70415
// begin ComExitBuilding ( x ) ;
70392: LD_VAR 0 7
70396: PPUSH
70397: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70401: LD_VAR 0 7
70405: PPUSH
70406: LD_VAR 0 3
70410: PPUSH
70411: CALL_OW 180
// end ;
70415: GO 70366
70417: POP
70418: POP
// end ; end ;
70419: GO 69401
70421: POP
70422: POP
// end ;
70423: GO 69355
70425: POP
70426: POP
// end ;
70427: LD_VAR 0 1
70431: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
70432: LD_INT 0
70434: PPUSH
70435: PPUSH
// if not mc_bases then
70436: LD_EXP 52
70440: NOT
70441: IFFALSE 70445
// exit ;
70443: GO 70526
// for i = 1 to mc_bases do
70445: LD_ADDR_VAR 0 2
70449: PUSH
70450: DOUBLE
70451: LD_INT 1
70453: DEC
70454: ST_TO_ADDR
70455: LD_EXP 52
70459: PUSH
70460: FOR_TO
70461: IFFALSE 70524
// if mc_mines [ i ] and mc_miners [ i ] then
70463: LD_EXP 65
70467: PUSH
70468: LD_VAR 0 2
70472: ARRAY
70473: PUSH
70474: LD_EXP 66
70478: PUSH
70479: LD_VAR 0 2
70483: ARRAY
70484: AND
70485: IFFALSE 70522
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
70487: LD_EXP 66
70491: PUSH
70492: LD_VAR 0 2
70496: ARRAY
70497: PUSH
70498: LD_INT 1
70500: ARRAY
70501: PPUSH
70502: CALL_OW 255
70506: PPUSH
70507: LD_EXP 65
70511: PUSH
70512: LD_VAR 0 2
70516: ARRAY
70517: PPUSH
70518: CALL 14490 0 2
70522: GO 70460
70524: POP
70525: POP
// end ;
70526: LD_VAR 0 1
70530: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
70531: LD_INT 0
70533: PPUSH
70534: PPUSH
70535: PPUSH
70536: PPUSH
70537: PPUSH
70538: PPUSH
70539: PPUSH
70540: PPUSH
// if not mc_bases or not mc_parking then
70541: LD_EXP 52
70545: NOT
70546: PUSH
70547: LD_EXP 76
70551: NOT
70552: OR
70553: IFFALSE 70557
// exit ;
70555: GO 71233
// for i = 1 to mc_bases do
70557: LD_ADDR_VAR 0 2
70561: PUSH
70562: DOUBLE
70563: LD_INT 1
70565: DEC
70566: ST_TO_ADDR
70567: LD_EXP 52
70571: PUSH
70572: FOR_TO
70573: IFFALSE 71231
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
70575: LD_EXP 52
70579: PUSH
70580: LD_VAR 0 2
70584: ARRAY
70585: NOT
70586: PUSH
70587: LD_EXP 76
70591: PUSH
70592: LD_VAR 0 2
70596: ARRAY
70597: NOT
70598: OR
70599: IFFALSE 70603
// continue ;
70601: GO 70572
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
70603: LD_ADDR_VAR 0 5
70607: PUSH
70608: LD_EXP 52
70612: PUSH
70613: LD_VAR 0 2
70617: ARRAY
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PPUSH
70623: CALL_OW 255
70627: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70628: LD_ADDR_VAR 0 6
70632: PUSH
70633: LD_EXP 52
70637: PUSH
70638: LD_VAR 0 2
70642: ARRAY
70643: PPUSH
70644: LD_INT 30
70646: PUSH
70647: LD_INT 3
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PPUSH
70654: CALL_OW 72
70658: ST_TO_ADDR
// if not fac then
70659: LD_VAR 0 6
70663: NOT
70664: IFFALSE 70715
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70666: LD_ADDR_VAR 0 6
70670: PUSH
70671: LD_EXP 52
70675: PUSH
70676: LD_VAR 0 2
70680: ARRAY
70681: PPUSH
70682: LD_INT 2
70684: PUSH
70685: LD_INT 30
70687: PUSH
70688: LD_INT 0
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 30
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: LIST
70709: PPUSH
70710: CALL_OW 72
70714: ST_TO_ADDR
// if not fac then
70715: LD_VAR 0 6
70719: NOT
70720: IFFALSE 70724
// continue ;
70722: GO 70572
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70724: LD_ADDR_VAR 0 7
70728: PUSH
70729: LD_EXP 76
70733: PUSH
70734: LD_VAR 0 2
70738: ARRAY
70739: PPUSH
70740: LD_INT 22
70742: PUSH
70743: LD_VAR 0 5
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 21
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 3
70764: PUSH
70765: LD_INT 24
70767: PUSH
70768: LD_INT 1000
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: PPUSH
70784: CALL_OW 70
70788: PUSH
70789: LD_INT 22
70791: PUSH
70792: LD_VAR 0 5
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 91
70803: PUSH
70804: LD_VAR 0 6
70808: PUSH
70809: LD_INT 1
70811: ARRAY
70812: PUSH
70813: LD_INT 25
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 21
70823: PUSH
70824: LD_INT 2
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: LD_INT 24
70836: PUSH
70837: LD_INT 1000
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: PPUSH
70854: CALL_OW 69
70858: UNION
70859: ST_TO_ADDR
// if not vehs then
70860: LD_VAR 0 7
70864: NOT
70865: IFFALSE 70891
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70867: LD_ADDR_EXP 64
70871: PUSH
70872: LD_EXP 64
70876: PPUSH
70877: LD_VAR 0 2
70881: PPUSH
70882: EMPTY
70883: PPUSH
70884: CALL_OW 1
70888: ST_TO_ADDR
// continue ;
70889: GO 70572
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70891: LD_ADDR_VAR 0 8
70895: PUSH
70896: LD_EXP 52
70900: PUSH
70901: LD_VAR 0 2
70905: ARRAY
70906: PPUSH
70907: LD_INT 30
70909: PUSH
70910: LD_INT 3
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PPUSH
70917: CALL_OW 72
70921: ST_TO_ADDR
// if tmp then
70922: LD_VAR 0 8
70926: IFFALSE 71029
// begin for j in tmp do
70928: LD_ADDR_VAR 0 3
70932: PUSH
70933: LD_VAR 0 8
70937: PUSH
70938: FOR_IN
70939: IFFALSE 71027
// for k in UnitsInside ( j ) do
70941: LD_ADDR_VAR 0 4
70945: PUSH
70946: LD_VAR 0 3
70950: PPUSH
70951: CALL_OW 313
70955: PUSH
70956: FOR_IN
70957: IFFALSE 71023
// if k then
70959: LD_VAR 0 4
70963: IFFALSE 71021
// if not k in mc_repair_vehicle [ i ] then
70965: LD_VAR 0 4
70969: PUSH
70970: LD_EXP 64
70974: PUSH
70975: LD_VAR 0 2
70979: ARRAY
70980: IN
70981: NOT
70982: IFFALSE 71021
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70984: LD_ADDR_EXP 64
70988: PUSH
70989: LD_EXP 64
70993: PPUSH
70994: LD_VAR 0 2
70998: PPUSH
70999: LD_EXP 64
71003: PUSH
71004: LD_VAR 0 2
71008: ARRAY
71009: PUSH
71010: LD_VAR 0 4
71014: UNION
71015: PPUSH
71016: CALL_OW 1
71020: ST_TO_ADDR
71021: GO 70956
71023: POP
71024: POP
71025: GO 70938
71027: POP
71028: POP
// end ; if not mc_repair_vehicle [ i ] then
71029: LD_EXP 64
71033: PUSH
71034: LD_VAR 0 2
71038: ARRAY
71039: NOT
71040: IFFALSE 71044
// continue ;
71042: GO 70572
// for j in mc_repair_vehicle [ i ] do
71044: LD_ADDR_VAR 0 3
71048: PUSH
71049: LD_EXP 64
71053: PUSH
71054: LD_VAR 0 2
71058: ARRAY
71059: PUSH
71060: FOR_IN
71061: IFFALSE 71227
// begin if GetClass ( j ) <> 3 then
71063: LD_VAR 0 3
71067: PPUSH
71068: CALL_OW 257
71072: PUSH
71073: LD_INT 3
71075: NONEQUAL
71076: IFFALSE 71117
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
71078: LD_ADDR_EXP 64
71082: PUSH
71083: LD_EXP 64
71087: PPUSH
71088: LD_VAR 0 2
71092: PPUSH
71093: LD_EXP 64
71097: PUSH
71098: LD_VAR 0 2
71102: ARRAY
71103: PUSH
71104: LD_VAR 0 3
71108: DIFF
71109: PPUSH
71110: CALL_OW 1
71114: ST_TO_ADDR
// continue ;
71115: GO 71060
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71117: LD_VAR 0 3
71121: PPUSH
71122: CALL_OW 311
71126: NOT
71127: PUSH
71128: LD_VAR 0 3
71132: PUSH
71133: LD_EXP 55
71137: PUSH
71138: LD_VAR 0 2
71142: ARRAY
71143: PUSH
71144: LD_INT 1
71146: ARRAY
71147: IN
71148: NOT
71149: AND
71150: PUSH
71151: LD_VAR 0 3
71155: PUSH
71156: LD_EXP 55
71160: PUSH
71161: LD_VAR 0 2
71165: ARRAY
71166: PUSH
71167: LD_INT 2
71169: ARRAY
71170: IN
71171: NOT
71172: AND
71173: IFFALSE 71225
// begin if IsInUnit ( j ) then
71175: LD_VAR 0 3
71179: PPUSH
71180: CALL_OW 310
71184: IFFALSE 71195
// ComExitBuilding ( j ) ;
71186: LD_VAR 0 3
71190: PPUSH
71191: CALL_OW 122
// if not HasTask ( j ) then
71195: LD_VAR 0 3
71199: PPUSH
71200: CALL_OW 314
71204: NOT
71205: IFFALSE 71225
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
71207: LD_VAR 0 3
71211: PPUSH
71212: LD_VAR 0 7
71216: PUSH
71217: LD_INT 1
71219: ARRAY
71220: PPUSH
71221: CALL_OW 189
// end ; end ;
71225: GO 71060
71227: POP
71228: POP
// end ;
71229: GO 70572
71231: POP
71232: POP
// end ;
71233: LD_VAR 0 1
71237: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
71238: LD_INT 0
71240: PPUSH
71241: PPUSH
71242: PPUSH
71243: PPUSH
71244: PPUSH
71245: PPUSH
71246: PPUSH
71247: PPUSH
71248: PPUSH
71249: PPUSH
71250: PPUSH
// if not mc_bases then
71251: LD_EXP 52
71255: NOT
71256: IFFALSE 71260
// exit ;
71258: GO 72062
// for i = 1 to mc_bases do
71260: LD_ADDR_VAR 0 2
71264: PUSH
71265: DOUBLE
71266: LD_INT 1
71268: DEC
71269: ST_TO_ADDR
71270: LD_EXP 52
71274: PUSH
71275: FOR_TO
71276: IFFALSE 72060
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
71278: LD_EXP 80
71282: PUSH
71283: LD_VAR 0 2
71287: ARRAY
71288: NOT
71289: PUSH
71290: LD_EXP 55
71294: PUSH
71295: LD_VAR 0 2
71299: ARRAY
71300: PUSH
71301: LD_INT 1
71303: ARRAY
71304: OR
71305: PUSH
71306: LD_EXP 55
71310: PUSH
71311: LD_VAR 0 2
71315: ARRAY
71316: PUSH
71317: LD_INT 2
71319: ARRAY
71320: OR
71321: PUSH
71322: LD_EXP 78
71326: PUSH
71327: LD_VAR 0 2
71331: ARRAY
71332: PPUSH
71333: LD_INT 1
71335: PPUSH
71336: CALL_OW 325
71340: NOT
71341: OR
71342: PUSH
71343: LD_EXP 75
71347: PUSH
71348: LD_VAR 0 2
71352: ARRAY
71353: OR
71354: IFFALSE 71358
// continue ;
71356: GO 71275
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
71358: LD_ADDR_VAR 0 8
71362: PUSH
71363: LD_EXP 52
71367: PUSH
71368: LD_VAR 0 2
71372: ARRAY
71373: PPUSH
71374: LD_INT 25
71376: PUSH
71377: LD_INT 4
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 50
71386: PUSH
71387: EMPTY
71388: LIST
71389: PUSH
71390: LD_INT 3
71392: PUSH
71393: LD_INT 60
71395: PUSH
71396: EMPTY
71397: LIST
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: PPUSH
71408: CALL_OW 72
71412: PUSH
71413: LD_EXP 56
71417: PUSH
71418: LD_VAR 0 2
71422: ARRAY
71423: DIFF
71424: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71425: LD_ADDR_VAR 0 9
71429: PUSH
71430: LD_EXP 52
71434: PUSH
71435: LD_VAR 0 2
71439: ARRAY
71440: PPUSH
71441: LD_INT 2
71443: PUSH
71444: LD_INT 30
71446: PUSH
71447: LD_INT 0
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 30
71456: PUSH
71457: LD_INT 1
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: LIST
71468: PPUSH
71469: CALL_OW 72
71473: ST_TO_ADDR
// if not tmp or not dep then
71474: LD_VAR 0 8
71478: NOT
71479: PUSH
71480: LD_VAR 0 9
71484: NOT
71485: OR
71486: IFFALSE 71490
// continue ;
71488: GO 71275
// side := GetSide ( tmp [ 1 ] ) ;
71490: LD_ADDR_VAR 0 11
71494: PUSH
71495: LD_VAR 0 8
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PPUSH
71504: CALL_OW 255
71508: ST_TO_ADDR
// dep := dep [ 1 ] ;
71509: LD_ADDR_VAR 0 9
71513: PUSH
71514: LD_VAR 0 9
71518: PUSH
71519: LD_INT 1
71521: ARRAY
71522: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
71523: LD_ADDR_VAR 0 7
71527: PUSH
71528: LD_EXP 80
71532: PUSH
71533: LD_VAR 0 2
71537: ARRAY
71538: PPUSH
71539: LD_INT 22
71541: PUSH
71542: LD_INT 0
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 25
71551: PUSH
71552: LD_INT 12
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PPUSH
71563: CALL_OW 70
71567: PUSH
71568: LD_INT 22
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 25
71580: PUSH
71581: LD_INT 12
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 91
71590: PUSH
71591: LD_VAR 0 9
71595: PUSH
71596: LD_INT 20
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: LIST
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: PPUSH
71609: CALL_OW 69
71613: UNION
71614: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
71615: LD_ADDR_VAR 0 10
71619: PUSH
71620: LD_EXP 80
71624: PUSH
71625: LD_VAR 0 2
71629: ARRAY
71630: PPUSH
71631: LD_INT 81
71633: PUSH
71634: LD_VAR 0 11
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PPUSH
71643: CALL_OW 70
71647: ST_TO_ADDR
// if not apes or danger_at_area then
71648: LD_VAR 0 7
71652: NOT
71653: PUSH
71654: LD_VAR 0 10
71658: OR
71659: IFFALSE 71709
// begin if mc_taming [ i ] then
71661: LD_EXP 83
71665: PUSH
71666: LD_VAR 0 2
71670: ARRAY
71671: IFFALSE 71707
// begin MC_Reset ( i , 121 ) ;
71673: LD_VAR 0 2
71677: PPUSH
71678: LD_INT 121
71680: PPUSH
71681: CALL 57402 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71685: LD_ADDR_EXP 83
71689: PUSH
71690: LD_EXP 83
71694: PPUSH
71695: LD_VAR 0 2
71699: PPUSH
71700: EMPTY
71701: PPUSH
71702: CALL_OW 1
71706: ST_TO_ADDR
// end ; continue ;
71707: GO 71275
// end ; for j in tmp do
71709: LD_ADDR_VAR 0 3
71713: PUSH
71714: LD_VAR 0 8
71718: PUSH
71719: FOR_IN
71720: IFFALSE 72056
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71722: LD_VAR 0 3
71726: PUSH
71727: LD_EXP 83
71731: PUSH
71732: LD_VAR 0 2
71736: ARRAY
71737: IN
71738: NOT
71739: PUSH
71740: LD_EXP 83
71744: PUSH
71745: LD_VAR 0 2
71749: ARRAY
71750: PUSH
71751: LD_INT 3
71753: LESS
71754: AND
71755: IFFALSE 71813
// begin SetTag ( j , 121 ) ;
71757: LD_VAR 0 3
71761: PPUSH
71762: LD_INT 121
71764: PPUSH
71765: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71769: LD_ADDR_EXP 83
71773: PUSH
71774: LD_EXP 83
71778: PPUSH
71779: LD_VAR 0 2
71783: PUSH
71784: LD_EXP 83
71788: PUSH
71789: LD_VAR 0 2
71793: ARRAY
71794: PUSH
71795: LD_INT 1
71797: PLUS
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PPUSH
71803: LD_VAR 0 3
71807: PPUSH
71808: CALL 17440 0 3
71812: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71813: LD_VAR 0 3
71817: PUSH
71818: LD_EXP 83
71822: PUSH
71823: LD_VAR 0 2
71827: ARRAY
71828: IN
71829: IFFALSE 72054
// begin if GetClass ( j ) <> 4 then
71831: LD_VAR 0 3
71835: PPUSH
71836: CALL_OW 257
71840: PUSH
71841: LD_INT 4
71843: NONEQUAL
71844: IFFALSE 71897
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71846: LD_ADDR_EXP 83
71850: PUSH
71851: LD_EXP 83
71855: PPUSH
71856: LD_VAR 0 2
71860: PPUSH
71861: LD_EXP 83
71865: PUSH
71866: LD_VAR 0 2
71870: ARRAY
71871: PUSH
71872: LD_VAR 0 3
71876: DIFF
71877: PPUSH
71878: CALL_OW 1
71882: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71883: LD_VAR 0 3
71887: PPUSH
71888: LD_INT 0
71890: PPUSH
71891: CALL_OW 109
// continue ;
71895: GO 71719
// end ; if IsInUnit ( j ) then
71897: LD_VAR 0 3
71901: PPUSH
71902: CALL_OW 310
71906: IFFALSE 71917
// ComExitBuilding ( j ) ;
71908: LD_VAR 0 3
71912: PPUSH
71913: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
71917: LD_ADDR_VAR 0 6
71921: PUSH
71922: LD_VAR 0 7
71926: PPUSH
71927: LD_VAR 0 3
71931: PPUSH
71932: CALL_OW 74
71936: ST_TO_ADDR
// if not ape then
71937: LD_VAR 0 6
71941: NOT
71942: IFFALSE 71946
// break ;
71944: GO 72056
// x := GetX ( ape ) ;
71946: LD_ADDR_VAR 0 4
71950: PUSH
71951: LD_VAR 0 6
71955: PPUSH
71956: CALL_OW 250
71960: ST_TO_ADDR
// y := GetY ( ape ) ;
71961: LD_ADDR_VAR 0 5
71965: PUSH
71966: LD_VAR 0 6
71970: PPUSH
71971: CALL_OW 251
71975: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71976: LD_VAR 0 4
71980: PPUSH
71981: LD_VAR 0 5
71985: PPUSH
71986: CALL_OW 488
71990: NOT
71991: PUSH
71992: LD_VAR 0 11
71996: PPUSH
71997: LD_VAR 0 4
72001: PPUSH
72002: LD_VAR 0 5
72006: PPUSH
72007: LD_INT 20
72009: PPUSH
72010: CALL 18336 0 4
72014: PUSH
72015: LD_INT 4
72017: ARRAY
72018: OR
72019: IFFALSE 72023
// break ;
72021: GO 72056
// if not HasTask ( j ) then
72023: LD_VAR 0 3
72027: PPUSH
72028: CALL_OW 314
72032: NOT
72033: IFFALSE 72054
// ComTameXY ( j , x , y ) ;
72035: LD_VAR 0 3
72039: PPUSH
72040: LD_VAR 0 4
72044: PPUSH
72045: LD_VAR 0 5
72049: PPUSH
72050: CALL_OW 131
// end ; end ;
72054: GO 71719
72056: POP
72057: POP
// end ;
72058: GO 71275
72060: POP
72061: POP
// end ;
72062: LD_VAR 0 1
72066: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72067: LD_INT 0
72069: PPUSH
72070: PPUSH
72071: PPUSH
72072: PPUSH
72073: PPUSH
72074: PPUSH
72075: PPUSH
72076: PPUSH
// if not mc_bases then
72077: LD_EXP 52
72081: NOT
72082: IFFALSE 72086
// exit ;
72084: GO 72712
// for i = 1 to mc_bases do
72086: LD_ADDR_VAR 0 2
72090: PUSH
72091: DOUBLE
72092: LD_INT 1
72094: DEC
72095: ST_TO_ADDR
72096: LD_EXP 52
72100: PUSH
72101: FOR_TO
72102: IFFALSE 72710
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72104: LD_EXP 81
72108: PUSH
72109: LD_VAR 0 2
72113: ARRAY
72114: NOT
72115: PUSH
72116: LD_EXP 81
72120: PUSH
72121: LD_VAR 0 2
72125: ARRAY
72126: PPUSH
72127: LD_INT 25
72129: PUSH
72130: LD_INT 12
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PPUSH
72137: CALL_OW 72
72141: NOT
72142: OR
72143: IFFALSE 72147
// continue ;
72145: GO 72101
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
72147: LD_ADDR_VAR 0 5
72151: PUSH
72152: LD_EXP 81
72156: PUSH
72157: LD_VAR 0 2
72161: ARRAY
72162: PUSH
72163: LD_INT 1
72165: ARRAY
72166: PPUSH
72167: CALL_OW 255
72171: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
72172: LD_VAR 0 5
72176: PPUSH
72177: LD_INT 2
72179: PPUSH
72180: CALL_OW 325
72184: IFFALSE 72437
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72186: LD_ADDR_VAR 0 4
72190: PUSH
72191: LD_EXP 81
72195: PUSH
72196: LD_VAR 0 2
72200: ARRAY
72201: PPUSH
72202: LD_INT 25
72204: PUSH
72205: LD_INT 16
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PPUSH
72212: CALL_OW 72
72216: ST_TO_ADDR
// if tmp < 6 then
72217: LD_VAR 0 4
72221: PUSH
72222: LD_INT 6
72224: LESS
72225: IFFALSE 72437
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72227: LD_ADDR_VAR 0 6
72231: PUSH
72232: LD_EXP 52
72236: PUSH
72237: LD_VAR 0 2
72241: ARRAY
72242: PPUSH
72243: LD_INT 2
72245: PUSH
72246: LD_INT 30
72248: PUSH
72249: LD_INT 0
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 30
72258: PUSH
72259: LD_INT 1
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: LIST
72270: PPUSH
72271: CALL_OW 72
72275: ST_TO_ADDR
// if depot then
72276: LD_VAR 0 6
72280: IFFALSE 72437
// begin selected := 0 ;
72282: LD_ADDR_VAR 0 7
72286: PUSH
72287: LD_INT 0
72289: ST_TO_ADDR
// for j in depot do
72290: LD_ADDR_VAR 0 3
72294: PUSH
72295: LD_VAR 0 6
72299: PUSH
72300: FOR_IN
72301: IFFALSE 72332
// begin if UnitsInside ( j ) < 6 then
72303: LD_VAR 0 3
72307: PPUSH
72308: CALL_OW 313
72312: PUSH
72313: LD_INT 6
72315: LESS
72316: IFFALSE 72330
// begin selected := j ;
72318: LD_ADDR_VAR 0 7
72322: PUSH
72323: LD_VAR 0 3
72327: ST_TO_ADDR
// break ;
72328: GO 72332
// end ; end ;
72330: GO 72300
72332: POP
72333: POP
// if selected then
72334: LD_VAR 0 7
72338: IFFALSE 72437
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72340: LD_ADDR_VAR 0 3
72344: PUSH
72345: LD_EXP 81
72349: PUSH
72350: LD_VAR 0 2
72354: ARRAY
72355: PPUSH
72356: LD_INT 25
72358: PUSH
72359: LD_INT 12
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PPUSH
72366: CALL_OW 72
72370: PUSH
72371: FOR_IN
72372: IFFALSE 72435
// if not HasTask ( j ) then
72374: LD_VAR 0 3
72378: PPUSH
72379: CALL_OW 314
72383: NOT
72384: IFFALSE 72433
// begin if not IsInUnit ( j ) then
72386: LD_VAR 0 3
72390: PPUSH
72391: CALL_OW 310
72395: NOT
72396: IFFALSE 72412
// ComEnterUnit ( j , selected ) ;
72398: LD_VAR 0 3
72402: PPUSH
72403: LD_VAR 0 7
72407: PPUSH
72408: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
72412: LD_VAR 0 3
72416: PPUSH
72417: LD_INT 16
72419: PPUSH
72420: CALL_OW 183
// AddComExitBuilding ( j ) ;
72424: LD_VAR 0 3
72428: PPUSH
72429: CALL_OW 182
// end ;
72433: GO 72371
72435: POP
72436: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
72437: LD_VAR 0 5
72441: PPUSH
72442: LD_INT 11
72444: PPUSH
72445: CALL_OW 325
72449: IFFALSE 72708
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72451: LD_ADDR_VAR 0 4
72455: PUSH
72456: LD_EXP 81
72460: PUSH
72461: LD_VAR 0 2
72465: ARRAY
72466: PPUSH
72467: LD_INT 25
72469: PUSH
72470: LD_INT 16
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PPUSH
72477: CALL_OW 72
72481: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
72482: LD_VAR 0 4
72486: PUSH
72487: LD_INT 6
72489: GREATEREQUAL
72490: PUSH
72491: LD_VAR 0 5
72495: PPUSH
72496: LD_INT 2
72498: PPUSH
72499: CALL_OW 325
72503: NOT
72504: OR
72505: IFFALSE 72708
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72507: LD_ADDR_VAR 0 8
72511: PUSH
72512: LD_EXP 52
72516: PUSH
72517: LD_VAR 0 2
72521: ARRAY
72522: PPUSH
72523: LD_INT 2
72525: PUSH
72526: LD_INT 30
72528: PUSH
72529: LD_INT 4
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 30
72538: PUSH
72539: LD_INT 5
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: PPUSH
72551: CALL_OW 72
72555: ST_TO_ADDR
// if barracks then
72556: LD_VAR 0 8
72560: IFFALSE 72708
// begin selected := 0 ;
72562: LD_ADDR_VAR 0 7
72566: PUSH
72567: LD_INT 0
72569: ST_TO_ADDR
// for j in barracks do
72570: LD_ADDR_VAR 0 3
72574: PUSH
72575: LD_VAR 0 8
72579: PUSH
72580: FOR_IN
72581: IFFALSE 72612
// begin if UnitsInside ( j ) < 6 then
72583: LD_VAR 0 3
72587: PPUSH
72588: CALL_OW 313
72592: PUSH
72593: LD_INT 6
72595: LESS
72596: IFFALSE 72610
// begin selected := j ;
72598: LD_ADDR_VAR 0 7
72602: PUSH
72603: LD_VAR 0 3
72607: ST_TO_ADDR
// break ;
72608: GO 72612
// end ; end ;
72610: GO 72580
72612: POP
72613: POP
// if selected then
72614: LD_VAR 0 7
72618: IFFALSE 72708
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72620: LD_ADDR_VAR 0 3
72624: PUSH
72625: LD_EXP 81
72629: PUSH
72630: LD_VAR 0 2
72634: ARRAY
72635: PPUSH
72636: LD_INT 25
72638: PUSH
72639: LD_INT 12
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PPUSH
72646: CALL_OW 72
72650: PUSH
72651: FOR_IN
72652: IFFALSE 72706
// if not IsInUnit ( j ) and not HasTask ( j ) then
72654: LD_VAR 0 3
72658: PPUSH
72659: CALL_OW 310
72663: NOT
72664: PUSH
72665: LD_VAR 0 3
72669: PPUSH
72670: CALL_OW 314
72674: NOT
72675: AND
72676: IFFALSE 72704
// begin ComEnterUnit ( j , selected ) ;
72678: LD_VAR 0 3
72682: PPUSH
72683: LD_VAR 0 7
72687: PPUSH
72688: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
72692: LD_VAR 0 3
72696: PPUSH
72697: LD_INT 15
72699: PPUSH
72700: CALL_OW 183
// end ;
72704: GO 72651
72706: POP
72707: POP
// end ; end ; end ; end ; end ;
72708: GO 72101
72710: POP
72711: POP
// end ;
72712: LD_VAR 0 1
72716: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72717: LD_INT 0
72719: PPUSH
72720: PPUSH
72721: PPUSH
72722: PPUSH
// if not mc_bases then
72723: LD_EXP 52
72727: NOT
72728: IFFALSE 72732
// exit ;
72730: GO 72910
// for i = 1 to mc_bases do
72732: LD_ADDR_VAR 0 2
72736: PUSH
72737: DOUBLE
72738: LD_INT 1
72740: DEC
72741: ST_TO_ADDR
72742: LD_EXP 52
72746: PUSH
72747: FOR_TO
72748: IFFALSE 72908
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72750: LD_ADDR_VAR 0 4
72754: PUSH
72755: LD_EXP 52
72759: PUSH
72760: LD_VAR 0 2
72764: ARRAY
72765: PPUSH
72766: LD_INT 25
72768: PUSH
72769: LD_INT 9
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PPUSH
72776: CALL_OW 72
72780: ST_TO_ADDR
// if not tmp then
72781: LD_VAR 0 4
72785: NOT
72786: IFFALSE 72790
// continue ;
72788: GO 72747
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72790: LD_EXP 78
72794: PUSH
72795: LD_VAR 0 2
72799: ARRAY
72800: PPUSH
72801: LD_INT 29
72803: PPUSH
72804: CALL_OW 325
72808: NOT
72809: PUSH
72810: LD_EXP 78
72814: PUSH
72815: LD_VAR 0 2
72819: ARRAY
72820: PPUSH
72821: LD_INT 28
72823: PPUSH
72824: CALL_OW 325
72828: NOT
72829: AND
72830: IFFALSE 72834
// continue ;
72832: GO 72747
// for j in tmp do
72834: LD_ADDR_VAR 0 3
72838: PUSH
72839: LD_VAR 0 4
72843: PUSH
72844: FOR_IN
72845: IFFALSE 72904
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72847: LD_VAR 0 3
72851: PUSH
72852: LD_EXP 55
72856: PUSH
72857: LD_VAR 0 2
72861: ARRAY
72862: PUSH
72863: LD_INT 1
72865: ARRAY
72866: IN
72867: NOT
72868: PUSH
72869: LD_VAR 0 3
72873: PUSH
72874: LD_EXP 55
72878: PUSH
72879: LD_VAR 0 2
72883: ARRAY
72884: PUSH
72885: LD_INT 2
72887: ARRAY
72888: IN
72889: NOT
72890: AND
72891: IFFALSE 72902
// ComSpaceTimeShoot ( j ) ;
72893: LD_VAR 0 3
72897: PPUSH
72898: CALL 11530 0 1
72902: GO 72844
72904: POP
72905: POP
// end ;
72906: GO 72747
72908: POP
72909: POP
// end ;
72910: LD_VAR 0 1
72914: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72915: LD_INT 0
72917: PPUSH
72918: PPUSH
72919: PPUSH
72920: PPUSH
72921: PPUSH
72922: PPUSH
72923: PPUSH
72924: PPUSH
72925: PPUSH
// if not mc_bases then
72926: LD_EXP 52
72930: NOT
72931: IFFALSE 72935
// exit ;
72933: GO 73557
// for i = 1 to mc_bases do
72935: LD_ADDR_VAR 0 2
72939: PUSH
72940: DOUBLE
72941: LD_INT 1
72943: DEC
72944: ST_TO_ADDR
72945: LD_EXP 52
72949: PUSH
72950: FOR_TO
72951: IFFALSE 73555
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72953: LD_EXP 87
72957: PUSH
72958: LD_VAR 0 2
72962: ARRAY
72963: NOT
72964: PUSH
72965: LD_INT 38
72967: PPUSH
72968: LD_EXP 78
72972: PUSH
72973: LD_VAR 0 2
72977: ARRAY
72978: PPUSH
72979: CALL_OW 321
72983: PUSH
72984: LD_INT 2
72986: NONEQUAL
72987: OR
72988: IFFALSE 72992
// continue ;
72990: GO 72950
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72992: LD_ADDR_VAR 0 8
72996: PUSH
72997: LD_EXP 52
73001: PUSH
73002: LD_VAR 0 2
73006: ARRAY
73007: PPUSH
73008: LD_INT 30
73010: PUSH
73011: LD_INT 34
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PPUSH
73018: CALL_OW 72
73022: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
73023: LD_ADDR_VAR 0 9
73027: PUSH
73028: LD_EXP 52
73032: PUSH
73033: LD_VAR 0 2
73037: ARRAY
73038: PPUSH
73039: LD_INT 25
73041: PUSH
73042: LD_INT 4
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PPUSH
73049: CALL_OW 72
73053: PPUSH
73054: LD_INT 0
73056: PPUSH
73057: CALL 50700 0 2
73061: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
73062: LD_VAR 0 9
73066: NOT
73067: PUSH
73068: LD_VAR 0 8
73072: NOT
73073: OR
73074: PUSH
73075: LD_EXP 52
73079: PUSH
73080: LD_VAR 0 2
73084: ARRAY
73085: PPUSH
73086: LD_INT 124
73088: PPUSH
73089: CALL 50700 0 2
73093: OR
73094: IFFALSE 73098
// continue ;
73096: GO 72950
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
73098: LD_EXP 88
73102: PUSH
73103: LD_VAR 0 2
73107: ARRAY
73108: PUSH
73109: LD_EXP 87
73113: PUSH
73114: LD_VAR 0 2
73118: ARRAY
73119: LESS
73120: PUSH
73121: LD_EXP 88
73125: PUSH
73126: LD_VAR 0 2
73130: ARRAY
73131: PUSH
73132: LD_VAR 0 8
73136: LESS
73137: AND
73138: IFFALSE 73553
// begin tmp := sci [ 1 ] ;
73140: LD_ADDR_VAR 0 7
73144: PUSH
73145: LD_VAR 0 9
73149: PUSH
73150: LD_INT 1
73152: ARRAY
73153: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
73154: LD_VAR 0 7
73158: PPUSH
73159: LD_INT 124
73161: PPUSH
73162: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
73166: LD_ADDR_VAR 0 3
73170: PUSH
73171: DOUBLE
73172: LD_EXP 87
73176: PUSH
73177: LD_VAR 0 2
73181: ARRAY
73182: INC
73183: ST_TO_ADDR
73184: LD_EXP 87
73188: PUSH
73189: LD_VAR 0 2
73193: ARRAY
73194: PUSH
73195: FOR_DOWNTO
73196: IFFALSE 73539
// begin if IsInUnit ( tmp ) then
73198: LD_VAR 0 7
73202: PPUSH
73203: CALL_OW 310
73207: IFFALSE 73218
// ComExitBuilding ( tmp ) ;
73209: LD_VAR 0 7
73213: PPUSH
73214: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
73218: LD_INT 35
73220: PPUSH
73221: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
73225: LD_VAR 0 7
73229: PPUSH
73230: CALL_OW 310
73234: NOT
73235: PUSH
73236: LD_VAR 0 7
73240: PPUSH
73241: CALL_OW 314
73245: NOT
73246: AND
73247: IFFALSE 73218
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
73249: LD_ADDR_VAR 0 6
73253: PUSH
73254: LD_VAR 0 7
73258: PPUSH
73259: CALL_OW 250
73263: PUSH
73264: LD_VAR 0 7
73268: PPUSH
73269: CALL_OW 251
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73278: LD_INT 35
73280: PPUSH
73281: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
73285: LD_ADDR_VAR 0 4
73289: PUSH
73290: LD_EXP 87
73294: PUSH
73295: LD_VAR 0 2
73299: ARRAY
73300: PUSH
73301: LD_VAR 0 3
73305: ARRAY
73306: PUSH
73307: LD_INT 1
73309: ARRAY
73310: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
73311: LD_ADDR_VAR 0 5
73315: PUSH
73316: LD_EXP 87
73320: PUSH
73321: LD_VAR 0 2
73325: ARRAY
73326: PUSH
73327: LD_VAR 0 3
73331: ARRAY
73332: PUSH
73333: LD_INT 2
73335: ARRAY
73336: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
73337: LD_VAR 0 7
73341: PPUSH
73342: LD_INT 10
73344: PPUSH
73345: CALL 20033 0 2
73349: PUSH
73350: LD_INT 4
73352: ARRAY
73353: IFFALSE 73391
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
73355: LD_VAR 0 7
73359: PPUSH
73360: LD_VAR 0 6
73364: PUSH
73365: LD_INT 1
73367: ARRAY
73368: PPUSH
73369: LD_VAR 0 6
73373: PUSH
73374: LD_INT 2
73376: ARRAY
73377: PPUSH
73378: CALL_OW 111
// wait ( 0 0$10 ) ;
73382: LD_INT 350
73384: PPUSH
73385: CALL_OW 67
// end else
73389: GO 73417
// begin ComMoveXY ( tmp , x , y ) ;
73391: LD_VAR 0 7
73395: PPUSH
73396: LD_VAR 0 4
73400: PPUSH
73401: LD_VAR 0 5
73405: PPUSH
73406: CALL_OW 111
// wait ( 0 0$3 ) ;
73410: LD_INT 105
73412: PPUSH
73413: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
73417: LD_VAR 0 7
73421: PPUSH
73422: LD_VAR 0 4
73426: PPUSH
73427: LD_VAR 0 5
73431: PPUSH
73432: CALL_OW 307
73436: IFFALSE 73278
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
73438: LD_VAR 0 7
73442: PPUSH
73443: LD_VAR 0 4
73447: PPUSH
73448: LD_VAR 0 5
73452: PPUSH
73453: LD_VAR 0 8
73457: PUSH
73458: LD_VAR 0 3
73462: ARRAY
73463: PPUSH
73464: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
73468: LD_INT 35
73470: PPUSH
73471: CALL_OW 67
// until not HasTask ( tmp ) ;
73475: LD_VAR 0 7
73479: PPUSH
73480: CALL_OW 314
73484: NOT
73485: IFFALSE 73468
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
73487: LD_ADDR_EXP 88
73491: PUSH
73492: LD_EXP 88
73496: PPUSH
73497: LD_VAR 0 2
73501: PUSH
73502: LD_EXP 88
73506: PUSH
73507: LD_VAR 0 2
73511: ARRAY
73512: PUSH
73513: LD_INT 1
73515: PLUS
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PPUSH
73521: LD_VAR 0 8
73525: PUSH
73526: LD_VAR 0 3
73530: ARRAY
73531: PPUSH
73532: CALL 17440 0 3
73536: ST_TO_ADDR
// end ;
73537: GO 73195
73539: POP
73540: POP
// MC_Reset ( i , 124 ) ;
73541: LD_VAR 0 2
73545: PPUSH
73546: LD_INT 124
73548: PPUSH
73549: CALL 57402 0 2
// end ; end ;
73553: GO 72950
73555: POP
73556: POP
// end ;
73557: LD_VAR 0 1
73561: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73562: LD_INT 0
73564: PPUSH
73565: PPUSH
73566: PPUSH
// if not mc_bases then
73567: LD_EXP 52
73571: NOT
73572: IFFALSE 73576
// exit ;
73574: GO 74182
// for i = 1 to mc_bases do
73576: LD_ADDR_VAR 0 2
73580: PUSH
73581: DOUBLE
73582: LD_INT 1
73584: DEC
73585: ST_TO_ADDR
73586: LD_EXP 52
73590: PUSH
73591: FOR_TO
73592: IFFALSE 74180
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73594: LD_ADDR_VAR 0 3
73598: PUSH
73599: LD_EXP 52
73603: PUSH
73604: LD_VAR 0 2
73608: ARRAY
73609: PPUSH
73610: LD_INT 25
73612: PUSH
73613: LD_INT 4
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PPUSH
73620: CALL_OW 72
73624: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
73625: LD_VAR 0 3
73629: NOT
73630: PUSH
73631: LD_EXP 89
73635: PUSH
73636: LD_VAR 0 2
73640: ARRAY
73641: NOT
73642: OR
73643: PUSH
73644: LD_EXP 52
73648: PUSH
73649: LD_VAR 0 2
73653: ARRAY
73654: PPUSH
73655: LD_INT 2
73657: PUSH
73658: LD_INT 30
73660: PUSH
73661: LD_INT 0
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 30
73670: PUSH
73671: LD_INT 1
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: PPUSH
73683: CALL_OW 72
73687: NOT
73688: OR
73689: IFFALSE 73739
// begin if mc_deposits_finder [ i ] then
73691: LD_EXP 90
73695: PUSH
73696: LD_VAR 0 2
73700: ARRAY
73701: IFFALSE 73737
// begin MC_Reset ( i , 125 ) ;
73703: LD_VAR 0 2
73707: PPUSH
73708: LD_INT 125
73710: PPUSH
73711: CALL 57402 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73715: LD_ADDR_EXP 90
73719: PUSH
73720: LD_EXP 90
73724: PPUSH
73725: LD_VAR 0 2
73729: PPUSH
73730: EMPTY
73731: PPUSH
73732: CALL_OW 1
73736: ST_TO_ADDR
// end ; continue ;
73737: GO 73591
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73739: LD_EXP 89
73743: PUSH
73744: LD_VAR 0 2
73748: ARRAY
73749: PUSH
73750: LD_INT 1
73752: ARRAY
73753: PUSH
73754: LD_INT 3
73756: ARRAY
73757: PUSH
73758: LD_INT 1
73760: EQUAL
73761: PUSH
73762: LD_INT 20
73764: PPUSH
73765: LD_EXP 78
73769: PUSH
73770: LD_VAR 0 2
73774: ARRAY
73775: PPUSH
73776: CALL_OW 321
73780: PUSH
73781: LD_INT 2
73783: NONEQUAL
73784: AND
73785: IFFALSE 73835
// begin if mc_deposits_finder [ i ] then
73787: LD_EXP 90
73791: PUSH
73792: LD_VAR 0 2
73796: ARRAY
73797: IFFALSE 73833
// begin MC_Reset ( i , 125 ) ;
73799: LD_VAR 0 2
73803: PPUSH
73804: LD_INT 125
73806: PPUSH
73807: CALL 57402 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73811: LD_ADDR_EXP 90
73815: PUSH
73816: LD_EXP 90
73820: PPUSH
73821: LD_VAR 0 2
73825: PPUSH
73826: EMPTY
73827: PPUSH
73828: CALL_OW 1
73832: ST_TO_ADDR
// end ; continue ;
73833: GO 73591
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73835: LD_EXP 89
73839: PUSH
73840: LD_VAR 0 2
73844: ARRAY
73845: PUSH
73846: LD_INT 1
73848: ARRAY
73849: PUSH
73850: LD_INT 1
73852: ARRAY
73853: PPUSH
73854: LD_EXP 89
73858: PUSH
73859: LD_VAR 0 2
73863: ARRAY
73864: PUSH
73865: LD_INT 1
73867: ARRAY
73868: PUSH
73869: LD_INT 2
73871: ARRAY
73872: PPUSH
73873: LD_EXP 78
73877: PUSH
73878: LD_VAR 0 2
73882: ARRAY
73883: PPUSH
73884: CALL_OW 440
73888: IFFALSE 73931
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73890: LD_ADDR_EXP 89
73894: PUSH
73895: LD_EXP 89
73899: PPUSH
73900: LD_VAR 0 2
73904: PPUSH
73905: LD_EXP 89
73909: PUSH
73910: LD_VAR 0 2
73914: ARRAY
73915: PPUSH
73916: LD_INT 1
73918: PPUSH
73919: CALL_OW 3
73923: PPUSH
73924: CALL_OW 1
73928: ST_TO_ADDR
73929: GO 74178
// begin if not mc_deposits_finder [ i ] then
73931: LD_EXP 90
73935: PUSH
73936: LD_VAR 0 2
73940: ARRAY
73941: NOT
73942: IFFALSE 73994
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73944: LD_ADDR_EXP 90
73948: PUSH
73949: LD_EXP 90
73953: PPUSH
73954: LD_VAR 0 2
73958: PPUSH
73959: LD_VAR 0 3
73963: PUSH
73964: LD_INT 1
73966: ARRAY
73967: PUSH
73968: EMPTY
73969: LIST
73970: PPUSH
73971: CALL_OW 1
73975: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73976: LD_VAR 0 3
73980: PUSH
73981: LD_INT 1
73983: ARRAY
73984: PPUSH
73985: LD_INT 125
73987: PPUSH
73988: CALL_OW 109
// end else
73992: GO 74178
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73994: LD_EXP 90
73998: PUSH
73999: LD_VAR 0 2
74003: ARRAY
74004: PUSH
74005: LD_INT 1
74007: ARRAY
74008: PPUSH
74009: CALL_OW 310
74013: IFFALSE 74036
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
74015: LD_EXP 90
74019: PUSH
74020: LD_VAR 0 2
74024: ARRAY
74025: PUSH
74026: LD_INT 1
74028: ARRAY
74029: PPUSH
74030: CALL_OW 122
74034: GO 74178
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74036: LD_EXP 90
74040: PUSH
74041: LD_VAR 0 2
74045: ARRAY
74046: PUSH
74047: LD_INT 1
74049: ARRAY
74050: PPUSH
74051: CALL_OW 314
74055: NOT
74056: PUSH
74057: LD_EXP 90
74061: PUSH
74062: LD_VAR 0 2
74066: ARRAY
74067: PUSH
74068: LD_INT 1
74070: ARRAY
74071: PPUSH
74072: LD_EXP 89
74076: PUSH
74077: LD_VAR 0 2
74081: ARRAY
74082: PUSH
74083: LD_INT 1
74085: ARRAY
74086: PUSH
74087: LD_INT 1
74089: ARRAY
74090: PPUSH
74091: LD_EXP 89
74095: PUSH
74096: LD_VAR 0 2
74100: ARRAY
74101: PUSH
74102: LD_INT 1
74104: ARRAY
74105: PUSH
74106: LD_INT 2
74108: ARRAY
74109: PPUSH
74110: CALL_OW 297
74114: PUSH
74115: LD_INT 6
74117: GREATER
74118: AND
74119: IFFALSE 74178
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74121: LD_EXP 90
74125: PUSH
74126: LD_VAR 0 2
74130: ARRAY
74131: PUSH
74132: LD_INT 1
74134: ARRAY
74135: PPUSH
74136: LD_EXP 89
74140: PUSH
74141: LD_VAR 0 2
74145: ARRAY
74146: PUSH
74147: LD_INT 1
74149: ARRAY
74150: PUSH
74151: LD_INT 1
74153: ARRAY
74154: PPUSH
74155: LD_EXP 89
74159: PUSH
74160: LD_VAR 0 2
74164: ARRAY
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: PUSH
74170: LD_INT 2
74172: ARRAY
74173: PPUSH
74174: CALL_OW 111
// end ; end ; end ;
74178: GO 73591
74180: POP
74181: POP
// end ;
74182: LD_VAR 0 1
74186: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
74187: LD_INT 0
74189: PPUSH
74190: PPUSH
74191: PPUSH
74192: PPUSH
74193: PPUSH
74194: PPUSH
74195: PPUSH
74196: PPUSH
74197: PPUSH
74198: PPUSH
74199: PPUSH
// if not mc_bases then
74200: LD_EXP 52
74204: NOT
74205: IFFALSE 74209
// exit ;
74207: GO 74933
// for i = 1 to mc_bases do
74209: LD_ADDR_VAR 0 2
74213: PUSH
74214: DOUBLE
74215: LD_INT 1
74217: DEC
74218: ST_TO_ADDR
74219: LD_EXP 52
74223: PUSH
74224: FOR_TO
74225: IFFALSE 74931
// begin if not mc_bases [ i ] then
74227: LD_EXP 52
74231: PUSH
74232: LD_VAR 0 2
74236: ARRAY
74237: NOT
74238: IFFALSE 74242
// continue ;
74240: GO 74224
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74242: LD_ADDR_VAR 0 7
74246: PUSH
74247: LD_EXP 52
74251: PUSH
74252: LD_VAR 0 2
74256: ARRAY
74257: PUSH
74258: LD_INT 1
74260: ARRAY
74261: PPUSH
74262: CALL_OW 248
74266: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
74267: LD_VAR 0 7
74271: PUSH
74272: LD_INT 3
74274: EQUAL
74275: PUSH
74276: LD_EXP 71
74280: PUSH
74281: LD_VAR 0 2
74285: ARRAY
74286: PUSH
74287: LD_EXP 74
74291: PUSH
74292: LD_VAR 0 2
74296: ARRAY
74297: UNION
74298: PPUSH
74299: LD_INT 33
74301: PUSH
74302: LD_INT 2
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PPUSH
74309: CALL_OW 72
74313: NOT
74314: OR
74315: IFFALSE 74319
// continue ;
74317: GO 74224
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74319: LD_ADDR_VAR 0 9
74323: PUSH
74324: LD_EXP 52
74328: PUSH
74329: LD_VAR 0 2
74333: ARRAY
74334: PPUSH
74335: LD_INT 30
74337: PUSH
74338: LD_INT 36
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PPUSH
74345: CALL_OW 72
74349: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
74350: LD_ADDR_VAR 0 10
74354: PUSH
74355: LD_EXP 71
74359: PUSH
74360: LD_VAR 0 2
74364: ARRAY
74365: PPUSH
74366: LD_INT 34
74368: PUSH
74369: LD_INT 31
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PPUSH
74376: CALL_OW 72
74380: ST_TO_ADDR
// if not cts and not mcts then
74381: LD_VAR 0 9
74385: NOT
74386: PUSH
74387: LD_VAR 0 10
74391: NOT
74392: AND
74393: IFFALSE 74397
// continue ;
74395: GO 74224
// x := cts ;
74397: LD_ADDR_VAR 0 11
74401: PUSH
74402: LD_VAR 0 9
74406: ST_TO_ADDR
// if not x then
74407: LD_VAR 0 11
74411: NOT
74412: IFFALSE 74424
// x := mcts ;
74414: LD_ADDR_VAR 0 11
74418: PUSH
74419: LD_VAR 0 10
74423: ST_TO_ADDR
// if mc_remote_driver [ i ] then
74424: LD_EXP 92
74428: PUSH
74429: LD_VAR 0 2
74433: ARRAY
74434: IFFALSE 74703
// for j in mc_remote_driver [ i ] do
74436: LD_ADDR_VAR 0 3
74440: PUSH
74441: LD_EXP 92
74445: PUSH
74446: LD_VAR 0 2
74450: ARRAY
74451: PUSH
74452: FOR_IN
74453: IFFALSE 74701
// begin if GetClass ( j ) <> 3 then
74455: LD_VAR 0 3
74459: PPUSH
74460: CALL_OW 257
74464: PUSH
74465: LD_INT 3
74467: NONEQUAL
74468: IFFALSE 74521
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
74470: LD_ADDR_EXP 92
74474: PUSH
74475: LD_EXP 92
74479: PPUSH
74480: LD_VAR 0 2
74484: PPUSH
74485: LD_EXP 92
74489: PUSH
74490: LD_VAR 0 2
74494: ARRAY
74495: PUSH
74496: LD_VAR 0 3
74500: DIFF
74501: PPUSH
74502: CALL_OW 1
74506: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74507: LD_VAR 0 3
74511: PPUSH
74512: LD_INT 0
74514: PPUSH
74515: CALL_OW 109
// continue ;
74519: GO 74452
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
74521: LD_VAR 0 3
74525: PPUSH
74526: CALL_OW 310
74530: NOT
74531: PUSH
74532: LD_VAR 0 3
74536: PPUSH
74537: CALL_OW 310
74541: PPUSH
74542: CALL_OW 266
74546: PUSH
74547: LD_INT 36
74549: NONEQUAL
74550: PUSH
74551: LD_VAR 0 3
74555: PPUSH
74556: CALL 50788 0 1
74560: NOT
74561: AND
74562: OR
74563: IFFALSE 74699
// begin if IsInUnit ( j ) then
74565: LD_VAR 0 3
74569: PPUSH
74570: CALL_OW 310
74574: IFFALSE 74585
// ComExitBuilding ( j ) ;
74576: LD_VAR 0 3
74580: PPUSH
74581: CALL_OW 122
// ct := 0 ;
74585: LD_ADDR_VAR 0 8
74589: PUSH
74590: LD_INT 0
74592: ST_TO_ADDR
// for k in x do
74593: LD_ADDR_VAR 0 4
74597: PUSH
74598: LD_VAR 0 11
74602: PUSH
74603: FOR_IN
74604: IFFALSE 74677
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
74606: LD_VAR 0 4
74610: PPUSH
74611: CALL_OW 264
74615: PUSH
74616: LD_INT 31
74618: EQUAL
74619: PUSH
74620: LD_VAR 0 4
74624: PPUSH
74625: CALL_OW 311
74629: NOT
74630: AND
74631: PUSH
74632: LD_VAR 0 4
74636: PPUSH
74637: CALL_OW 266
74641: PUSH
74642: LD_INT 36
74644: EQUAL
74645: PUSH
74646: LD_VAR 0 4
74650: PPUSH
74651: CALL_OW 313
74655: PUSH
74656: LD_INT 3
74658: LESS
74659: AND
74660: OR
74661: IFFALSE 74675
// begin ct := k ;
74663: LD_ADDR_VAR 0 8
74667: PUSH
74668: LD_VAR 0 4
74672: ST_TO_ADDR
// break ;
74673: GO 74677
// end ;
74675: GO 74603
74677: POP
74678: POP
// if ct then
74679: LD_VAR 0 8
74683: IFFALSE 74699
// ComEnterUnit ( j , ct ) ;
74685: LD_VAR 0 3
74689: PPUSH
74690: LD_VAR 0 8
74694: PPUSH
74695: CALL_OW 120
// end ; end ;
74699: GO 74452
74701: POP
74702: POP
// places := 0 ;
74703: LD_ADDR_VAR 0 5
74707: PUSH
74708: LD_INT 0
74710: ST_TO_ADDR
// for j = 1 to x do
74711: LD_ADDR_VAR 0 3
74715: PUSH
74716: DOUBLE
74717: LD_INT 1
74719: DEC
74720: ST_TO_ADDR
74721: LD_VAR 0 11
74725: PUSH
74726: FOR_TO
74727: IFFALSE 74782
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74729: LD_VAR 0 11
74733: PUSH
74734: LD_VAR 0 3
74738: ARRAY
74739: PPUSH
74740: CALL_OW 264
74744: PUSH
74745: LD_INT 31
74747: EQUAL
74748: IFFALSE 74766
// places := places + 1 else
74750: LD_ADDR_VAR 0 5
74754: PUSH
74755: LD_VAR 0 5
74759: PUSH
74760: LD_INT 1
74762: PLUS
74763: ST_TO_ADDR
74764: GO 74780
// places := places + 3 ;
74766: LD_ADDR_VAR 0 5
74770: PUSH
74771: LD_VAR 0 5
74775: PUSH
74776: LD_INT 3
74778: PLUS
74779: ST_TO_ADDR
74780: GO 74726
74782: POP
74783: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74784: LD_ADDR_VAR 0 6
74788: PUSH
74789: LD_EXP 52
74793: PUSH
74794: LD_VAR 0 2
74798: ARRAY
74799: PPUSH
74800: LD_INT 25
74802: PUSH
74803: LD_INT 3
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PPUSH
74810: CALL_OW 72
74814: PUSH
74815: LD_EXP 92
74819: PUSH
74820: LD_VAR 0 2
74824: ARRAY
74825: DIFF
74826: PPUSH
74827: LD_INT 3
74829: PPUSH
74830: CALL 51688 0 2
74834: ST_TO_ADDR
// if not tmp then
74835: LD_VAR 0 6
74839: NOT
74840: IFFALSE 74844
// continue ;
74842: GO 74224
// places := places - mc_remote_driver [ i ] ;
74844: LD_ADDR_VAR 0 5
74848: PUSH
74849: LD_VAR 0 5
74853: PUSH
74854: LD_EXP 92
74858: PUSH
74859: LD_VAR 0 2
74863: ARRAY
74864: MINUS
74865: ST_TO_ADDR
// if places then
74866: LD_VAR 0 5
74870: IFFALSE 74929
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74872: LD_ADDR_EXP 92
74876: PUSH
74877: LD_EXP 92
74881: PPUSH
74882: LD_VAR 0 2
74886: PPUSH
74887: LD_EXP 92
74891: PUSH
74892: LD_VAR 0 2
74896: ARRAY
74897: PUSH
74898: LD_VAR 0 6
74902: PUSH
74903: LD_INT 1
74905: ARRAY
74906: UNION
74907: PPUSH
74908: CALL_OW 1
74912: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74913: LD_VAR 0 6
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PPUSH
74922: LD_INT 126
74924: PPUSH
74925: CALL_OW 109
// end ; end ;
74929: GO 74224
74931: POP
74932: POP
// end ;
74933: LD_VAR 0 1
74937: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74938: LD_INT 0
74940: PPUSH
74941: PPUSH
74942: PPUSH
74943: PPUSH
74944: PPUSH
74945: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74946: LD_VAR 0 1
74950: NOT
74951: PUSH
74952: LD_VAR 0 2
74956: NOT
74957: OR
74958: PUSH
74959: LD_VAR 0 3
74963: NOT
74964: OR
74965: PUSH
74966: LD_VAR 0 4
74970: PUSH
74971: LD_INT 1
74973: PUSH
74974: LD_INT 2
74976: PUSH
74977: LD_INT 3
74979: PUSH
74980: LD_INT 4
74982: PUSH
74983: LD_INT 5
74985: PUSH
74986: LD_INT 8
74988: PUSH
74989: LD_INT 9
74991: PUSH
74992: LD_INT 15
74994: PUSH
74995: LD_INT 16
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: IN
75009: NOT
75010: OR
75011: IFFALSE 75015
// exit ;
75013: GO 75915
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
75015: LD_ADDR_VAR 0 2
75019: PUSH
75020: LD_VAR 0 2
75024: PPUSH
75025: LD_INT 21
75027: PUSH
75028: LD_INT 3
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: PUSH
75035: LD_INT 24
75037: PUSH
75038: LD_INT 250
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PPUSH
75049: CALL_OW 72
75053: ST_TO_ADDR
// case class of 1 , 15 :
75054: LD_VAR 0 4
75058: PUSH
75059: LD_INT 1
75061: DOUBLE
75062: EQUAL
75063: IFTRUE 75073
75065: LD_INT 15
75067: DOUBLE
75068: EQUAL
75069: IFTRUE 75073
75071: GO 75158
75073: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75074: LD_ADDR_VAR 0 8
75078: PUSH
75079: LD_VAR 0 2
75083: PPUSH
75084: LD_INT 2
75086: PUSH
75087: LD_INT 30
75089: PUSH
75090: LD_INT 32
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 30
75099: PUSH
75100: LD_INT 31
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: LIST
75111: PPUSH
75112: CALL_OW 72
75116: PUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: LD_INT 2
75124: PUSH
75125: LD_INT 30
75127: PUSH
75128: LD_INT 4
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 30
75137: PUSH
75138: LD_INT 5
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: PPUSH
75150: CALL_OW 72
75154: ADD
75155: ST_TO_ADDR
75156: GO 75404
75158: LD_INT 2
75160: DOUBLE
75161: EQUAL
75162: IFTRUE 75172
75164: LD_INT 16
75166: DOUBLE
75167: EQUAL
75168: IFTRUE 75172
75170: GO 75218
75172: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75173: LD_ADDR_VAR 0 8
75177: PUSH
75178: LD_VAR 0 2
75182: PPUSH
75183: LD_INT 2
75185: PUSH
75186: LD_INT 30
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 30
75198: PUSH
75199: LD_INT 1
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: PPUSH
75211: CALL_OW 72
75215: ST_TO_ADDR
75216: GO 75404
75218: LD_INT 3
75220: DOUBLE
75221: EQUAL
75222: IFTRUE 75226
75224: GO 75272
75226: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75227: LD_ADDR_VAR 0 8
75231: PUSH
75232: LD_VAR 0 2
75236: PPUSH
75237: LD_INT 2
75239: PUSH
75240: LD_INT 30
75242: PUSH
75243: LD_INT 2
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 30
75252: PUSH
75253: LD_INT 3
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: LIST
75264: PPUSH
75265: CALL_OW 72
75269: ST_TO_ADDR
75270: GO 75404
75272: LD_INT 4
75274: DOUBLE
75275: EQUAL
75276: IFTRUE 75280
75278: GO 75337
75280: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75281: LD_ADDR_VAR 0 8
75285: PUSH
75286: LD_VAR 0 2
75290: PPUSH
75291: LD_INT 2
75293: PUSH
75294: LD_INT 30
75296: PUSH
75297: LD_INT 6
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 30
75306: PUSH
75307: LD_INT 7
75309: PUSH
75310: EMPTY
75311: LIST
75312: LIST
75313: PUSH
75314: LD_INT 30
75316: PUSH
75317: LD_INT 8
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: PPUSH
75330: CALL_OW 72
75334: ST_TO_ADDR
75335: GO 75404
75337: LD_INT 5
75339: DOUBLE
75340: EQUAL
75341: IFTRUE 75357
75343: LD_INT 8
75345: DOUBLE
75346: EQUAL
75347: IFTRUE 75357
75349: LD_INT 9
75351: DOUBLE
75352: EQUAL
75353: IFTRUE 75357
75355: GO 75403
75357: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75358: LD_ADDR_VAR 0 8
75362: PUSH
75363: LD_VAR 0 2
75367: PPUSH
75368: LD_INT 2
75370: PUSH
75371: LD_INT 30
75373: PUSH
75374: LD_INT 4
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: LD_INT 30
75383: PUSH
75384: LD_INT 5
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: PPUSH
75396: CALL_OW 72
75400: ST_TO_ADDR
75401: GO 75404
75403: POP
// if not tmp then
75404: LD_VAR 0 8
75408: NOT
75409: IFFALSE 75413
// exit ;
75411: GO 75915
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75413: LD_VAR 0 4
75417: PUSH
75418: LD_INT 1
75420: PUSH
75421: LD_INT 15
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: IN
75428: PUSH
75429: LD_EXP 61
75433: PUSH
75434: LD_VAR 0 1
75438: ARRAY
75439: AND
75440: IFFALSE 75596
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75442: LD_ADDR_VAR 0 9
75446: PUSH
75447: LD_EXP 61
75451: PUSH
75452: LD_VAR 0 1
75456: ARRAY
75457: PUSH
75458: LD_INT 1
75460: ARRAY
75461: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75462: LD_VAR 0 9
75466: PUSH
75467: LD_EXP 62
75471: PUSH
75472: LD_VAR 0 1
75476: ARRAY
75477: IN
75478: NOT
75479: IFFALSE 75594
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75481: LD_ADDR_EXP 62
75485: PUSH
75486: LD_EXP 62
75490: PPUSH
75491: LD_VAR 0 1
75495: PUSH
75496: LD_EXP 62
75500: PUSH
75501: LD_VAR 0 1
75505: ARRAY
75506: PUSH
75507: LD_INT 1
75509: PLUS
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PPUSH
75515: LD_VAR 0 9
75519: PPUSH
75520: CALL 17440 0 3
75524: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75525: LD_ADDR_EXP 61
75529: PUSH
75530: LD_EXP 61
75534: PPUSH
75535: LD_VAR 0 1
75539: PPUSH
75540: LD_EXP 61
75544: PUSH
75545: LD_VAR 0 1
75549: ARRAY
75550: PUSH
75551: LD_VAR 0 9
75555: DIFF
75556: PPUSH
75557: CALL_OW 1
75561: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75562: LD_VAR 0 3
75566: PPUSH
75567: LD_EXP 62
75571: PUSH
75572: LD_VAR 0 1
75576: ARRAY
75577: PUSH
75578: LD_EXP 62
75582: PUSH
75583: LD_VAR 0 1
75587: ARRAY
75588: ARRAY
75589: PPUSH
75590: CALL_OW 120
// end ; exit ;
75594: GO 75915
// end ; if tmp > 1 then
75596: LD_VAR 0 8
75600: PUSH
75601: LD_INT 1
75603: GREATER
75604: IFFALSE 75708
// for i = 2 to tmp do
75606: LD_ADDR_VAR 0 6
75610: PUSH
75611: DOUBLE
75612: LD_INT 2
75614: DEC
75615: ST_TO_ADDR
75616: LD_VAR 0 8
75620: PUSH
75621: FOR_TO
75622: IFFALSE 75706
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75624: LD_VAR 0 8
75628: PUSH
75629: LD_VAR 0 6
75633: ARRAY
75634: PPUSH
75635: CALL_OW 461
75639: PUSH
75640: LD_INT 6
75642: EQUAL
75643: IFFALSE 75704
// begin x := tmp [ i ] ;
75645: LD_ADDR_VAR 0 9
75649: PUSH
75650: LD_VAR 0 8
75654: PUSH
75655: LD_VAR 0 6
75659: ARRAY
75660: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75661: LD_ADDR_VAR 0 8
75665: PUSH
75666: LD_VAR 0 8
75670: PPUSH
75671: LD_VAR 0 6
75675: PPUSH
75676: CALL_OW 3
75680: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75681: LD_ADDR_VAR 0 8
75685: PUSH
75686: LD_VAR 0 8
75690: PPUSH
75691: LD_INT 1
75693: PPUSH
75694: LD_VAR 0 9
75698: PPUSH
75699: CALL_OW 2
75703: ST_TO_ADDR
// end ;
75704: GO 75621
75706: POP
75707: POP
// for i in tmp do
75708: LD_ADDR_VAR 0 6
75712: PUSH
75713: LD_VAR 0 8
75717: PUSH
75718: FOR_IN
75719: IFFALSE 75788
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75721: LD_VAR 0 6
75725: PPUSH
75726: CALL_OW 313
75730: PUSH
75731: LD_INT 6
75733: LESS
75734: PUSH
75735: LD_VAR 0 6
75739: PPUSH
75740: CALL_OW 266
75744: PUSH
75745: LD_INT 31
75747: PUSH
75748: LD_INT 32
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: IN
75755: NOT
75756: AND
75757: PUSH
75758: LD_VAR 0 6
75762: PPUSH
75763: CALL_OW 313
75767: PUSH
75768: LD_INT 0
75770: EQUAL
75771: OR
75772: IFFALSE 75786
// begin j := i ;
75774: LD_ADDR_VAR 0 7
75778: PUSH
75779: LD_VAR 0 6
75783: ST_TO_ADDR
// break ;
75784: GO 75788
// end ; end ;
75786: GO 75718
75788: POP
75789: POP
// if j then
75790: LD_VAR 0 7
75794: IFFALSE 75812
// ComEnterUnit ( unit , j ) else
75796: LD_VAR 0 3
75800: PPUSH
75801: LD_VAR 0 7
75805: PPUSH
75806: CALL_OW 120
75810: GO 75915
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75812: LD_ADDR_VAR 0 10
75816: PUSH
75817: LD_VAR 0 2
75821: PPUSH
75822: LD_INT 2
75824: PUSH
75825: LD_INT 30
75827: PUSH
75828: LD_INT 0
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 30
75837: PUSH
75838: LD_INT 1
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: LIST
75849: PPUSH
75850: CALL_OW 72
75854: ST_TO_ADDR
// if depot then
75855: LD_VAR 0 10
75859: IFFALSE 75915
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75861: LD_ADDR_VAR 0 10
75865: PUSH
75866: LD_VAR 0 10
75870: PPUSH
75871: LD_VAR 0 3
75875: PPUSH
75876: CALL_OW 74
75880: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75881: LD_VAR 0 3
75885: PPUSH
75886: LD_VAR 0 10
75890: PPUSH
75891: CALL_OW 296
75895: PUSH
75896: LD_INT 10
75898: GREATER
75899: IFFALSE 75915
// ComStandNearbyBuilding ( unit , depot ) ;
75901: LD_VAR 0 3
75905: PPUSH
75906: LD_VAR 0 10
75910: PPUSH
75911: CALL 12147 0 2
// end ; end ; end ;
75915: LD_VAR 0 5
75919: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75920: LD_INT 0
75922: PPUSH
75923: PPUSH
75924: PPUSH
75925: PPUSH
// if not mc_bases then
75926: LD_EXP 52
75930: NOT
75931: IFFALSE 75935
// exit ;
75933: GO 76174
// for i = 1 to mc_bases do
75935: LD_ADDR_VAR 0 2
75939: PUSH
75940: DOUBLE
75941: LD_INT 1
75943: DEC
75944: ST_TO_ADDR
75945: LD_EXP 52
75949: PUSH
75950: FOR_TO
75951: IFFALSE 76172
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75953: LD_ADDR_VAR 0 4
75957: PUSH
75958: LD_EXP 52
75962: PUSH
75963: LD_VAR 0 2
75967: ARRAY
75968: PPUSH
75969: LD_INT 21
75971: PUSH
75972: LD_INT 1
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PPUSH
75979: CALL_OW 72
75983: PUSH
75984: LD_EXP 81
75988: PUSH
75989: LD_VAR 0 2
75993: ARRAY
75994: UNION
75995: ST_TO_ADDR
// if not tmp then
75996: LD_VAR 0 4
76000: NOT
76001: IFFALSE 76005
// continue ;
76003: GO 75950
// for j in tmp do
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: LD_VAR 0 4
76014: PUSH
76015: FOR_IN
76016: IFFALSE 76168
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
76018: LD_VAR 0 3
76022: PPUSH
76023: CALL_OW 110
76027: NOT
76028: PUSH
76029: LD_VAR 0 3
76033: PPUSH
76034: CALL_OW 314
76038: NOT
76039: AND
76040: PUSH
76041: LD_VAR 0 3
76045: PPUSH
76046: CALL_OW 311
76050: NOT
76051: AND
76052: PUSH
76053: LD_VAR 0 3
76057: PPUSH
76058: CALL_OW 310
76062: NOT
76063: AND
76064: PUSH
76065: LD_VAR 0 3
76069: PUSH
76070: LD_EXP 55
76074: PUSH
76075: LD_VAR 0 2
76079: ARRAY
76080: PUSH
76081: LD_INT 1
76083: ARRAY
76084: IN
76085: NOT
76086: AND
76087: PUSH
76088: LD_VAR 0 3
76092: PUSH
76093: LD_EXP 55
76097: PUSH
76098: LD_VAR 0 2
76102: ARRAY
76103: PUSH
76104: LD_INT 2
76106: ARRAY
76107: IN
76108: NOT
76109: AND
76110: PUSH
76111: LD_VAR 0 3
76115: PUSH
76116: LD_EXP 64
76120: PUSH
76121: LD_VAR 0 2
76125: ARRAY
76126: IN
76127: NOT
76128: AND
76129: IFFALSE 76166
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76131: LD_VAR 0 2
76135: PPUSH
76136: LD_EXP 52
76140: PUSH
76141: LD_VAR 0 2
76145: ARRAY
76146: PPUSH
76147: LD_VAR 0 3
76151: PPUSH
76152: LD_VAR 0 3
76156: PPUSH
76157: CALL_OW 257
76161: PPUSH
76162: CALL 74938 0 4
// end ;
76166: GO 76015
76168: POP
76169: POP
// end ;
76170: GO 75950
76172: POP
76173: POP
// end ;
76174: LD_VAR 0 1
76178: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76179: LD_INT 0
76181: PPUSH
76182: PPUSH
76183: PPUSH
76184: PPUSH
76185: PPUSH
76186: PPUSH
// if not mc_bases [ base ] then
76187: LD_EXP 52
76191: PUSH
76192: LD_VAR 0 1
76196: ARRAY
76197: NOT
76198: IFFALSE 76202
// exit ;
76200: GO 76384
// tmp := [ ] ;
76202: LD_ADDR_VAR 0 6
76206: PUSH
76207: EMPTY
76208: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76209: LD_ADDR_VAR 0 7
76213: PUSH
76214: LD_VAR 0 3
76218: PPUSH
76219: LD_INT 0
76221: PPUSH
76222: CALL_OW 517
76226: ST_TO_ADDR
// if not list then
76227: LD_VAR 0 7
76231: NOT
76232: IFFALSE 76236
// exit ;
76234: GO 76384
// for i = 1 to amount do
76236: LD_ADDR_VAR 0 5
76240: PUSH
76241: DOUBLE
76242: LD_INT 1
76244: DEC
76245: ST_TO_ADDR
76246: LD_VAR 0 2
76250: PUSH
76251: FOR_TO
76252: IFFALSE 76332
// begin x := rand ( 1 , list [ 1 ] ) ;
76254: LD_ADDR_VAR 0 8
76258: PUSH
76259: LD_INT 1
76261: PPUSH
76262: LD_VAR 0 7
76266: PUSH
76267: LD_INT 1
76269: ARRAY
76270: PPUSH
76271: CALL_OW 12
76275: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76276: LD_ADDR_VAR 0 6
76280: PUSH
76281: LD_VAR 0 6
76285: PPUSH
76286: LD_VAR 0 5
76290: PPUSH
76291: LD_VAR 0 7
76295: PUSH
76296: LD_INT 1
76298: ARRAY
76299: PUSH
76300: LD_VAR 0 8
76304: ARRAY
76305: PUSH
76306: LD_VAR 0 7
76310: PUSH
76311: LD_INT 2
76313: ARRAY
76314: PUSH
76315: LD_VAR 0 8
76319: ARRAY
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PPUSH
76325: CALL_OW 1
76329: ST_TO_ADDR
// end ;
76330: GO 76251
76332: POP
76333: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76334: LD_ADDR_EXP 65
76338: PUSH
76339: LD_EXP 65
76343: PPUSH
76344: LD_VAR 0 1
76348: PPUSH
76349: LD_VAR 0 6
76353: PPUSH
76354: CALL_OW 1
76358: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76359: LD_ADDR_EXP 67
76363: PUSH
76364: LD_EXP 67
76368: PPUSH
76369: LD_VAR 0 1
76373: PPUSH
76374: LD_VAR 0 3
76378: PPUSH
76379: CALL_OW 1
76383: ST_TO_ADDR
// end ;
76384: LD_VAR 0 4
76388: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76389: LD_INT 0
76391: PPUSH
// if not mc_bases [ base ] then
76392: LD_EXP 52
76396: PUSH
76397: LD_VAR 0 1
76401: ARRAY
76402: NOT
76403: IFFALSE 76407
// exit ;
76405: GO 76432
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76407: LD_ADDR_EXP 57
76411: PUSH
76412: LD_EXP 57
76416: PPUSH
76417: LD_VAR 0 1
76421: PPUSH
76422: LD_VAR 0 2
76426: PPUSH
76427: CALL_OW 1
76431: ST_TO_ADDR
// end ;
76432: LD_VAR 0 3
76436: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76437: LD_INT 0
76439: PPUSH
// if not mc_bases [ base ] then
76440: LD_EXP 52
76444: PUSH
76445: LD_VAR 0 1
76449: ARRAY
76450: NOT
76451: IFFALSE 76455
// exit ;
76453: GO 76492
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
76455: LD_ADDR_EXP 57
76459: PUSH
76460: LD_EXP 57
76464: PPUSH
76465: LD_VAR 0 1
76469: PPUSH
76470: LD_EXP 57
76474: PUSH
76475: LD_VAR 0 1
76479: ARRAY
76480: PUSH
76481: LD_VAR 0 2
76485: UNION
76486: PPUSH
76487: CALL_OW 1
76491: ST_TO_ADDR
// end ;
76492: LD_VAR 0 3
76496: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76497: LD_INT 0
76499: PPUSH
// if not mc_bases [ base ] then
76500: LD_EXP 52
76504: PUSH
76505: LD_VAR 0 1
76509: ARRAY
76510: NOT
76511: IFFALSE 76515
// exit ;
76513: GO 76540
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76515: LD_ADDR_EXP 73
76519: PUSH
76520: LD_EXP 73
76524: PPUSH
76525: LD_VAR 0 1
76529: PPUSH
76530: LD_VAR 0 2
76534: PPUSH
76535: CALL_OW 1
76539: ST_TO_ADDR
// end ;
76540: LD_VAR 0 3
76544: RET
// export function MC_InsertProduceList ( base , components ) ; begin
76545: LD_INT 0
76547: PPUSH
// if not mc_bases [ base ] then
76548: LD_EXP 52
76552: PUSH
76553: LD_VAR 0 1
76557: ARRAY
76558: NOT
76559: IFFALSE 76563
// exit ;
76561: GO 76600
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
76563: LD_ADDR_EXP 73
76567: PUSH
76568: LD_EXP 73
76572: PPUSH
76573: LD_VAR 0 1
76577: PPUSH
76578: LD_EXP 73
76582: PUSH
76583: LD_VAR 0 1
76587: ARRAY
76588: PUSH
76589: LD_VAR 0 2
76593: ADD
76594: PPUSH
76595: CALL_OW 1
76599: ST_TO_ADDR
// end ;
76600: LD_VAR 0 3
76604: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76605: LD_INT 0
76607: PPUSH
// if not mc_bases [ base ] then
76608: LD_EXP 52
76612: PUSH
76613: LD_VAR 0 1
76617: ARRAY
76618: NOT
76619: IFFALSE 76623
// exit ;
76621: GO 76677
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76623: LD_ADDR_EXP 74
76627: PUSH
76628: LD_EXP 74
76632: PPUSH
76633: LD_VAR 0 1
76637: PPUSH
76638: LD_VAR 0 2
76642: PPUSH
76643: CALL_OW 1
76647: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76648: LD_ADDR_EXP 63
76652: PUSH
76653: LD_EXP 63
76657: PPUSH
76658: LD_VAR 0 1
76662: PPUSH
76663: LD_VAR 0 2
76667: PUSH
76668: LD_INT 0
76670: PLUS
76671: PPUSH
76672: CALL_OW 1
76676: ST_TO_ADDR
// end ;
76677: LD_VAR 0 3
76681: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76682: LD_INT 0
76684: PPUSH
// if not mc_bases [ base ] then
76685: LD_EXP 52
76689: PUSH
76690: LD_VAR 0 1
76694: ARRAY
76695: NOT
76696: IFFALSE 76700
// exit ;
76698: GO 76725
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76700: LD_ADDR_EXP 63
76704: PUSH
76705: LD_EXP 63
76709: PPUSH
76710: LD_VAR 0 1
76714: PPUSH
76715: LD_VAR 0 2
76719: PPUSH
76720: CALL_OW 1
76724: ST_TO_ADDR
// end ;
76725: LD_VAR 0 3
76729: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76730: LD_INT 0
76732: PPUSH
76733: PPUSH
76734: PPUSH
76735: PPUSH
// if not mc_bases [ base ] then
76736: LD_EXP 52
76740: PUSH
76741: LD_VAR 0 1
76745: ARRAY
76746: NOT
76747: IFFALSE 76751
// exit ;
76749: GO 76816
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76751: LD_ADDR_EXP 72
76755: PUSH
76756: LD_EXP 72
76760: PPUSH
76761: LD_VAR 0 1
76765: PUSH
76766: LD_EXP 72
76770: PUSH
76771: LD_VAR 0 1
76775: ARRAY
76776: PUSH
76777: LD_INT 1
76779: PLUS
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PPUSH
76785: LD_VAR 0 1
76789: PUSH
76790: LD_VAR 0 2
76794: PUSH
76795: LD_VAR 0 3
76799: PUSH
76800: LD_VAR 0 4
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: PPUSH
76811: CALL 17440 0 3
76815: ST_TO_ADDR
// end ;
76816: LD_VAR 0 5
76820: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76821: LD_INT 0
76823: PPUSH
// if not mc_bases [ base ] then
76824: LD_EXP 52
76828: PUSH
76829: LD_VAR 0 1
76833: ARRAY
76834: NOT
76835: IFFALSE 76839
// exit ;
76837: GO 76864
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76839: LD_ADDR_EXP 89
76843: PUSH
76844: LD_EXP 89
76848: PPUSH
76849: LD_VAR 0 1
76853: PPUSH
76854: LD_VAR 0 2
76858: PPUSH
76859: CALL_OW 1
76863: ST_TO_ADDR
// end ;
76864: LD_VAR 0 3
76868: RET
// export function MC_GetMinesField ( base ) ; begin
76869: LD_INT 0
76871: PPUSH
// result := mc_mines [ base ] ;
76872: LD_ADDR_VAR 0 2
76876: PUSH
76877: LD_EXP 65
76881: PUSH
76882: LD_VAR 0 1
76886: ARRAY
76887: ST_TO_ADDR
// end ;
76888: LD_VAR 0 2
76892: RET
// export function MC_GetProduceList ( base ) ; begin
76893: LD_INT 0
76895: PPUSH
// result := mc_produce [ base ] ;
76896: LD_ADDR_VAR 0 2
76900: PUSH
76901: LD_EXP 73
76905: PUSH
76906: LD_VAR 0 1
76910: ARRAY
76911: ST_TO_ADDR
// end ;
76912: LD_VAR 0 2
76916: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76917: LD_INT 0
76919: PPUSH
76920: PPUSH
// if not mc_bases then
76921: LD_EXP 52
76925: NOT
76926: IFFALSE 76930
// exit ;
76928: GO 76995
// if mc_bases [ base ] then
76930: LD_EXP 52
76934: PUSH
76935: LD_VAR 0 1
76939: ARRAY
76940: IFFALSE 76995
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76942: LD_ADDR_VAR 0 3
76946: PUSH
76947: LD_EXP 52
76951: PUSH
76952: LD_VAR 0 1
76956: ARRAY
76957: PPUSH
76958: LD_INT 30
76960: PUSH
76961: LD_VAR 0 2
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PPUSH
76970: CALL_OW 72
76974: ST_TO_ADDR
// if result then
76975: LD_VAR 0 3
76979: IFFALSE 76995
// result := result [ 1 ] ;
76981: LD_ADDR_VAR 0 3
76985: PUSH
76986: LD_VAR 0 3
76990: PUSH
76991: LD_INT 1
76993: ARRAY
76994: ST_TO_ADDR
// end ; end ;
76995: LD_VAR 0 3
76999: RET
// export function MC_SetTame ( base , area ) ; begin
77000: LD_INT 0
77002: PPUSH
// if not mc_bases or not base then
77003: LD_EXP 52
77007: NOT
77008: PUSH
77009: LD_VAR 0 1
77013: NOT
77014: OR
77015: IFFALSE 77019
// exit ;
77017: GO 77044
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77019: LD_ADDR_EXP 80
77023: PUSH
77024: LD_EXP 80
77028: PPUSH
77029: LD_VAR 0 1
77033: PPUSH
77034: LD_VAR 0 2
77038: PPUSH
77039: CALL_OW 1
77043: ST_TO_ADDR
// end ;
77044: LD_VAR 0 3
77048: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77049: LD_INT 0
77051: PPUSH
77052: PPUSH
// if not mc_bases or not base then
77053: LD_EXP 52
77057: NOT
77058: PUSH
77059: LD_VAR 0 1
77063: NOT
77064: OR
77065: IFFALSE 77069
// exit ;
77067: GO 77171
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77069: LD_ADDR_VAR 0 4
77073: PUSH
77074: LD_EXP 52
77078: PUSH
77079: LD_VAR 0 1
77083: ARRAY
77084: PPUSH
77085: LD_INT 30
77087: PUSH
77088: LD_VAR 0 2
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: PPUSH
77097: CALL_OW 72
77101: ST_TO_ADDR
// if not tmp then
77102: LD_VAR 0 4
77106: NOT
77107: IFFALSE 77111
// exit ;
77109: GO 77171
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77111: LD_ADDR_EXP 84
77115: PUSH
77116: LD_EXP 84
77120: PPUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: LD_EXP 84
77130: PUSH
77131: LD_VAR 0 1
77135: ARRAY
77136: PPUSH
77137: LD_EXP 84
77141: PUSH
77142: LD_VAR 0 1
77146: ARRAY
77147: PUSH
77148: LD_INT 1
77150: PLUS
77151: PPUSH
77152: LD_VAR 0 4
77156: PUSH
77157: LD_INT 1
77159: ARRAY
77160: PPUSH
77161: CALL_OW 2
77165: PPUSH
77166: CALL_OW 1
77170: ST_TO_ADDR
// end ;
77171: LD_VAR 0 3
77175: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77176: LD_INT 0
77178: PPUSH
77179: PPUSH
// if not mc_bases or not base or not kinds then
77180: LD_EXP 52
77184: NOT
77185: PUSH
77186: LD_VAR 0 1
77190: NOT
77191: OR
77192: PUSH
77193: LD_VAR 0 2
77197: NOT
77198: OR
77199: IFFALSE 77203
// exit ;
77201: GO 77264
// for i in kinds do
77203: LD_ADDR_VAR 0 4
77207: PUSH
77208: LD_VAR 0 2
77212: PUSH
77213: FOR_IN
77214: IFFALSE 77262
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77216: LD_ADDR_EXP 86
77220: PUSH
77221: LD_EXP 86
77225: PPUSH
77226: LD_VAR 0 1
77230: PUSH
77231: LD_EXP 86
77235: PUSH
77236: LD_VAR 0 1
77240: ARRAY
77241: PUSH
77242: LD_INT 1
77244: PLUS
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PPUSH
77250: LD_VAR 0 4
77254: PPUSH
77255: CALL 17440 0 3
77259: ST_TO_ADDR
77260: GO 77213
77262: POP
77263: POP
// end ;
77264: LD_VAR 0 3
77268: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77269: LD_INT 0
77271: PPUSH
// if not mc_bases or not base or not areas then
77272: LD_EXP 52
77276: NOT
77277: PUSH
77278: LD_VAR 0 1
77282: NOT
77283: OR
77284: PUSH
77285: LD_VAR 0 2
77289: NOT
77290: OR
77291: IFFALSE 77295
// exit ;
77293: GO 77320
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77295: LD_ADDR_EXP 70
77299: PUSH
77300: LD_EXP 70
77304: PPUSH
77305: LD_VAR 0 1
77309: PPUSH
77310: LD_VAR 0 2
77314: PPUSH
77315: CALL_OW 1
77319: ST_TO_ADDR
// end ;
77320: LD_VAR 0 3
77324: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
77325: LD_INT 0
77327: PPUSH
// if not mc_bases or not base or not teleports_exit then
77328: LD_EXP 52
77332: NOT
77333: PUSH
77334: LD_VAR 0 1
77338: NOT
77339: OR
77340: PUSH
77341: LD_VAR 0 2
77345: NOT
77346: OR
77347: IFFALSE 77351
// exit ;
77349: GO 77376
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
77351: LD_ADDR_EXP 87
77355: PUSH
77356: LD_EXP 87
77360: PPUSH
77361: LD_VAR 0 1
77365: PPUSH
77366: LD_VAR 0 2
77370: PPUSH
77371: CALL_OW 1
77375: ST_TO_ADDR
// end ;
77376: LD_VAR 0 3
77380: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77381: LD_INT 0
77383: PPUSH
77384: PPUSH
77385: PPUSH
// if not mc_bases or not base or not ext_list then
77386: LD_EXP 52
77390: NOT
77391: PUSH
77392: LD_VAR 0 1
77396: NOT
77397: OR
77398: PUSH
77399: LD_VAR 0 5
77403: NOT
77404: OR
77405: IFFALSE 77409
// exit ;
77407: GO 77582
// tmp := GetFacExtXYD ( x , y , d ) ;
77409: LD_ADDR_VAR 0 8
77413: PUSH
77414: LD_VAR 0 2
77418: PPUSH
77419: LD_VAR 0 3
77423: PPUSH
77424: LD_VAR 0 4
77428: PPUSH
77429: CALL 50818 0 3
77433: ST_TO_ADDR
// if not tmp then
77434: LD_VAR 0 8
77438: NOT
77439: IFFALSE 77443
// exit ;
77441: GO 77582
// for i in tmp do
77443: LD_ADDR_VAR 0 7
77447: PUSH
77448: LD_VAR 0 8
77452: PUSH
77453: FOR_IN
77454: IFFALSE 77580
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77456: LD_ADDR_EXP 57
77460: PUSH
77461: LD_EXP 57
77465: PPUSH
77466: LD_VAR 0 1
77470: PPUSH
77471: LD_EXP 57
77475: PUSH
77476: LD_VAR 0 1
77480: ARRAY
77481: PPUSH
77482: LD_EXP 57
77486: PUSH
77487: LD_VAR 0 1
77491: ARRAY
77492: PUSH
77493: LD_INT 1
77495: PLUS
77496: PPUSH
77497: LD_VAR 0 5
77501: PUSH
77502: LD_INT 1
77504: ARRAY
77505: PUSH
77506: LD_VAR 0 7
77510: PUSH
77511: LD_INT 1
77513: ARRAY
77514: PUSH
77515: LD_VAR 0 7
77519: PUSH
77520: LD_INT 2
77522: ARRAY
77523: PUSH
77524: LD_VAR 0 7
77528: PUSH
77529: LD_INT 3
77531: ARRAY
77532: PUSH
77533: EMPTY
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: PPUSH
77539: CALL_OW 2
77543: PPUSH
77544: CALL_OW 1
77548: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77549: LD_ADDR_VAR 0 5
77553: PUSH
77554: LD_VAR 0 5
77558: PPUSH
77559: LD_INT 1
77561: PPUSH
77562: CALL_OW 3
77566: ST_TO_ADDR
// if not ext_list then
77567: LD_VAR 0 5
77571: NOT
77572: IFFALSE 77578
// exit ;
77574: POP
77575: POP
77576: GO 77582
// end ;
77578: GO 77453
77580: POP
77581: POP
// end ;
77582: LD_VAR 0 6
77586: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77587: LD_INT 0
77589: PPUSH
// if not mc_bases or not base or not weapon_list then
77590: LD_EXP 52
77594: NOT
77595: PUSH
77596: LD_VAR 0 1
77600: NOT
77601: OR
77602: PUSH
77603: LD_VAR 0 2
77607: NOT
77608: OR
77609: IFFALSE 77613
// exit ;
77611: GO 77638
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77613: LD_ADDR_EXP 91
77617: PUSH
77618: LD_EXP 91
77622: PPUSH
77623: LD_VAR 0 1
77627: PPUSH
77628: LD_VAR 0 2
77632: PPUSH
77633: CALL_OW 1
77637: ST_TO_ADDR
// end ;
77638: LD_VAR 0 3
77642: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77643: LD_INT 0
77645: PPUSH
// if not mc_bases or not base or not tech_list then
77646: LD_EXP 52
77650: NOT
77651: PUSH
77652: LD_VAR 0 1
77656: NOT
77657: OR
77658: PUSH
77659: LD_VAR 0 2
77663: NOT
77664: OR
77665: IFFALSE 77669
// exit ;
77667: GO 77694
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77669: LD_ADDR_EXP 79
77673: PUSH
77674: LD_EXP 79
77678: PPUSH
77679: LD_VAR 0 1
77683: PPUSH
77684: LD_VAR 0 2
77688: PPUSH
77689: CALL_OW 1
77693: ST_TO_ADDR
// end ;
77694: LD_VAR 0 3
77698: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77699: LD_INT 0
77701: PPUSH
// if not mc_bases or not parking_area or not base then
77702: LD_EXP 52
77706: NOT
77707: PUSH
77708: LD_VAR 0 2
77712: NOT
77713: OR
77714: PUSH
77715: LD_VAR 0 1
77719: NOT
77720: OR
77721: IFFALSE 77725
// exit ;
77723: GO 77750
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77725: LD_ADDR_EXP 76
77729: PUSH
77730: LD_EXP 76
77734: PPUSH
77735: LD_VAR 0 1
77739: PPUSH
77740: LD_VAR 0 2
77744: PPUSH
77745: CALL_OW 1
77749: ST_TO_ADDR
// end ;
77750: LD_VAR 0 3
77754: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77755: LD_INT 0
77757: PPUSH
// if not mc_bases or not base or not scan_area then
77758: LD_EXP 52
77762: NOT
77763: PUSH
77764: LD_VAR 0 1
77768: NOT
77769: OR
77770: PUSH
77771: LD_VAR 0 2
77775: NOT
77776: OR
77777: IFFALSE 77781
// exit ;
77779: GO 77806
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77781: LD_ADDR_EXP 77
77785: PUSH
77786: LD_EXP 77
77790: PPUSH
77791: LD_VAR 0 1
77795: PPUSH
77796: LD_VAR 0 2
77800: PPUSH
77801: CALL_OW 1
77805: ST_TO_ADDR
// end ;
77806: LD_VAR 0 3
77810: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
77811: LD_INT 0
77813: PPUSH
77814: PPUSH
// if not mc_bases or not base then
77815: LD_EXP 52
77819: NOT
77820: PUSH
77821: LD_VAR 0 1
77825: NOT
77826: OR
77827: IFFALSE 77831
// exit ;
77829: GO 77895
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
77831: LD_ADDR_VAR 0 3
77835: PUSH
77836: LD_INT 1
77838: PUSH
77839: LD_INT 2
77841: PUSH
77842: LD_INT 3
77844: PUSH
77845: LD_INT 4
77847: PUSH
77848: LD_INT 11
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
77858: LD_ADDR_EXP 79
77862: PUSH
77863: LD_EXP 79
77867: PPUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: LD_EXP 79
77877: PUSH
77878: LD_VAR 0 1
77882: ARRAY
77883: PUSH
77884: LD_VAR 0 3
77888: DIFF
77889: PPUSH
77890: CALL_OW 1
77894: ST_TO_ADDR
// end ;
77895: LD_VAR 0 2
77899: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
77900: LD_INT 0
77902: PPUSH
// result := mc_vehicles [ base ] ;
77903: LD_ADDR_VAR 0 3
77907: PUSH
77908: LD_EXP 71
77912: PUSH
77913: LD_VAR 0 1
77917: ARRAY
77918: ST_TO_ADDR
// if onlyCombat then
77919: LD_VAR 0 2
77923: IFFALSE 78088
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
77925: LD_ADDR_VAR 0 3
77929: PUSH
77930: LD_VAR 0 3
77934: PUSH
77935: LD_VAR 0 3
77939: PPUSH
77940: LD_INT 2
77942: PUSH
77943: LD_INT 34
77945: PUSH
77946: LD_INT 12
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: PUSH
77953: LD_INT 34
77955: PUSH
77956: LD_INT 51
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 34
77965: PUSH
77966: LD_EXP 46
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: PUSH
77975: LD_INT 34
77977: PUSH
77978: LD_INT 32
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: PUSH
77985: LD_INT 34
77987: PUSH
77988: LD_INT 13
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: PUSH
77995: LD_INT 34
77997: PUSH
77998: LD_INT 52
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: LD_INT 34
78007: PUSH
78008: LD_INT 14
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_INT 34
78017: PUSH
78018: LD_INT 53
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 34
78027: PUSH
78028: LD_EXP 45
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 34
78039: PUSH
78040: LD_INT 31
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PUSH
78047: LD_INT 34
78049: PUSH
78050: LD_INT 48
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: PUSH
78057: LD_INT 34
78059: PUSH
78060: LD_INT 8
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: LIST
78078: LIST
78079: LIST
78080: LIST
78081: PPUSH
78082: CALL_OW 72
78086: DIFF
78087: ST_TO_ADDR
// end ; end_of_file
78088: LD_VAR 0 3
78092: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78093: LD_INT 0
78095: PPUSH
78096: PPUSH
78097: PPUSH
// if not mc_bases or not skirmish then
78098: LD_EXP 52
78102: NOT
78103: PUSH
78104: LD_EXP 50
78108: NOT
78109: OR
78110: IFFALSE 78114
// exit ;
78112: GO 78279
// for i = 1 to mc_bases do
78114: LD_ADDR_VAR 0 4
78118: PUSH
78119: DOUBLE
78120: LD_INT 1
78122: DEC
78123: ST_TO_ADDR
78124: LD_EXP 52
78128: PUSH
78129: FOR_TO
78130: IFFALSE 78277
// begin if sci in mc_bases [ i ] then
78132: LD_VAR 0 2
78136: PUSH
78137: LD_EXP 52
78141: PUSH
78142: LD_VAR 0 4
78146: ARRAY
78147: IN
78148: IFFALSE 78275
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
78150: LD_ADDR_EXP 81
78154: PUSH
78155: LD_EXP 81
78159: PPUSH
78160: LD_VAR 0 4
78164: PUSH
78165: LD_EXP 81
78169: PUSH
78170: LD_VAR 0 4
78174: ARRAY
78175: PUSH
78176: LD_INT 1
78178: PLUS
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PPUSH
78184: LD_VAR 0 1
78188: PPUSH
78189: CALL 17440 0 3
78193: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
78194: LD_ADDR_VAR 0 5
78198: PUSH
78199: LD_EXP 52
78203: PUSH
78204: LD_VAR 0 4
78208: ARRAY
78209: PPUSH
78210: LD_INT 2
78212: PUSH
78213: LD_INT 30
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 30
78225: PUSH
78226: LD_INT 1
78228: PUSH
78229: EMPTY
78230: LIST
78231: LIST
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: LIST
78237: PPUSH
78238: CALL_OW 72
78242: PPUSH
78243: LD_VAR 0 1
78247: PPUSH
78248: CALL_OW 74
78252: ST_TO_ADDR
// if tmp then
78253: LD_VAR 0 5
78257: IFFALSE 78273
// ComStandNearbyBuilding ( ape , tmp ) ;
78259: LD_VAR 0 1
78263: PPUSH
78264: LD_VAR 0 5
78268: PPUSH
78269: CALL 12147 0 2
// break ;
78273: GO 78277
// end ; end ;
78275: GO 78129
78277: POP
78278: POP
// end ;
78279: LD_VAR 0 3
78283: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
78284: LD_INT 0
78286: PPUSH
78287: PPUSH
78288: PPUSH
// if not mc_bases or not skirmish then
78289: LD_EXP 52
78293: NOT
78294: PUSH
78295: LD_EXP 50
78299: NOT
78300: OR
78301: IFFALSE 78305
// exit ;
78303: GO 78394
// for i = 1 to mc_bases do
78305: LD_ADDR_VAR 0 4
78309: PUSH
78310: DOUBLE
78311: LD_INT 1
78313: DEC
78314: ST_TO_ADDR
78315: LD_EXP 52
78319: PUSH
78320: FOR_TO
78321: IFFALSE 78392
// begin if building in mc_busy_turret_list [ i ] then
78323: LD_VAR 0 1
78327: PUSH
78328: LD_EXP 62
78332: PUSH
78333: LD_VAR 0 4
78337: ARRAY
78338: IN
78339: IFFALSE 78390
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78341: LD_ADDR_VAR 0 5
78345: PUSH
78346: LD_EXP 62
78350: PUSH
78351: LD_VAR 0 4
78355: ARRAY
78356: PUSH
78357: LD_VAR 0 1
78361: DIFF
78362: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78363: LD_ADDR_EXP 62
78367: PUSH
78368: LD_EXP 62
78372: PPUSH
78373: LD_VAR 0 4
78377: PPUSH
78378: LD_VAR 0 5
78382: PPUSH
78383: CALL_OW 1
78387: ST_TO_ADDR
// break ;
78388: GO 78392
// end ; end ;
78390: GO 78320
78392: POP
78393: POP
// end ;
78394: LD_VAR 0 3
78398: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78399: LD_INT 0
78401: PPUSH
78402: PPUSH
78403: PPUSH
// if not mc_bases or not skirmish then
78404: LD_EXP 52
78408: NOT
78409: PUSH
78410: LD_EXP 50
78414: NOT
78415: OR
78416: IFFALSE 78420
// exit ;
78418: GO 78619
// for i = 1 to mc_bases do
78420: LD_ADDR_VAR 0 5
78424: PUSH
78425: DOUBLE
78426: LD_INT 1
78428: DEC
78429: ST_TO_ADDR
78430: LD_EXP 52
78434: PUSH
78435: FOR_TO
78436: IFFALSE 78617
// if building in mc_bases [ i ] then
78438: LD_VAR 0 1
78442: PUSH
78443: LD_EXP 52
78447: PUSH
78448: LD_VAR 0 5
78452: ARRAY
78453: IN
78454: IFFALSE 78615
// begin tmp := mc_bases [ i ] diff building ;
78456: LD_ADDR_VAR 0 6
78460: PUSH
78461: LD_EXP 52
78465: PUSH
78466: LD_VAR 0 5
78470: ARRAY
78471: PUSH
78472: LD_VAR 0 1
78476: DIFF
78477: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78478: LD_ADDR_EXP 52
78482: PUSH
78483: LD_EXP 52
78487: PPUSH
78488: LD_VAR 0 5
78492: PPUSH
78493: LD_VAR 0 6
78497: PPUSH
78498: CALL_OW 1
78502: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78503: LD_VAR 0 1
78507: PUSH
78508: LD_EXP 60
78512: PUSH
78513: LD_VAR 0 5
78517: ARRAY
78518: IN
78519: IFFALSE 78558
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78521: LD_ADDR_EXP 60
78525: PUSH
78526: LD_EXP 60
78530: PPUSH
78531: LD_VAR 0 5
78535: PPUSH
78536: LD_EXP 60
78540: PUSH
78541: LD_VAR 0 5
78545: ARRAY
78546: PUSH
78547: LD_VAR 0 1
78551: DIFF
78552: PPUSH
78553: CALL_OW 1
78557: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78558: LD_VAR 0 1
78562: PUSH
78563: LD_EXP 61
78567: PUSH
78568: LD_VAR 0 5
78572: ARRAY
78573: IN
78574: IFFALSE 78613
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78576: LD_ADDR_EXP 61
78580: PUSH
78581: LD_EXP 61
78585: PPUSH
78586: LD_VAR 0 5
78590: PPUSH
78591: LD_EXP 61
78595: PUSH
78596: LD_VAR 0 5
78600: ARRAY
78601: PUSH
78602: LD_VAR 0 1
78606: DIFF
78607: PPUSH
78608: CALL_OW 1
78612: ST_TO_ADDR
// break ;
78613: GO 78617
// end ;
78615: GO 78435
78617: POP
78618: POP
// end ;
78619: LD_VAR 0 4
78623: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78624: LD_INT 0
78626: PPUSH
78627: PPUSH
78628: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
78629: LD_EXP 52
78633: NOT
78634: PUSH
78635: LD_EXP 50
78639: NOT
78640: OR
78641: PUSH
78642: LD_VAR 0 3
78646: PUSH
78647: LD_EXP 78
78651: IN
78652: NOT
78653: OR
78654: IFFALSE 78658
// exit ;
78656: GO 78781
// for i = 1 to mc_vehicles do
78658: LD_ADDR_VAR 0 6
78662: PUSH
78663: DOUBLE
78664: LD_INT 1
78666: DEC
78667: ST_TO_ADDR
78668: LD_EXP 71
78672: PUSH
78673: FOR_TO
78674: IFFALSE 78779
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78676: LD_VAR 0 2
78680: PUSH
78681: LD_EXP 71
78685: PUSH
78686: LD_VAR 0 6
78690: ARRAY
78691: IN
78692: PUSH
78693: LD_VAR 0 1
78697: PUSH
78698: LD_EXP 71
78702: PUSH
78703: LD_VAR 0 6
78707: ARRAY
78708: IN
78709: OR
78710: IFFALSE 78777
// begin tmp := mc_vehicles [ i ] diff old ;
78712: LD_ADDR_VAR 0 7
78716: PUSH
78717: LD_EXP 71
78721: PUSH
78722: LD_VAR 0 6
78726: ARRAY
78727: PUSH
78728: LD_VAR 0 2
78732: DIFF
78733: ST_TO_ADDR
// tmp := tmp diff new ;
78734: LD_ADDR_VAR 0 7
78738: PUSH
78739: LD_VAR 0 7
78743: PUSH
78744: LD_VAR 0 1
78748: DIFF
78749: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78750: LD_ADDR_EXP 71
78754: PUSH
78755: LD_EXP 71
78759: PPUSH
78760: LD_VAR 0 6
78764: PPUSH
78765: LD_VAR 0 7
78769: PPUSH
78770: CALL_OW 1
78774: ST_TO_ADDR
// break ;
78775: GO 78779
// end ;
78777: GO 78673
78779: POP
78780: POP
// end ;
78781: LD_VAR 0 5
78785: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78786: LD_INT 0
78788: PPUSH
78789: PPUSH
78790: PPUSH
78791: PPUSH
// if not mc_bases or not skirmish then
78792: LD_EXP 52
78796: NOT
78797: PUSH
78798: LD_EXP 50
78802: NOT
78803: OR
78804: IFFALSE 78808
// exit ;
78806: GO 79185
// side := GetSide ( vehicle ) ;
78808: LD_ADDR_VAR 0 5
78812: PUSH
78813: LD_VAR 0 1
78817: PPUSH
78818: CALL_OW 255
78822: ST_TO_ADDR
// for i = 1 to mc_bases do
78823: LD_ADDR_VAR 0 4
78827: PUSH
78828: DOUBLE
78829: LD_INT 1
78831: DEC
78832: ST_TO_ADDR
78833: LD_EXP 52
78837: PUSH
78838: FOR_TO
78839: IFFALSE 79183
// begin if factory in mc_bases [ i ] then
78841: LD_VAR 0 2
78845: PUSH
78846: LD_EXP 52
78850: PUSH
78851: LD_VAR 0 4
78855: ARRAY
78856: IN
78857: IFFALSE 79181
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
78859: LD_EXP 74
78863: PUSH
78864: LD_VAR 0 4
78868: ARRAY
78869: PUSH
78870: LD_EXP 63
78874: PUSH
78875: LD_VAR 0 4
78879: ARRAY
78880: LESS
78881: PUSH
78882: LD_VAR 0 1
78886: PPUSH
78887: CALL_OW 264
78891: PUSH
78892: LD_INT 31
78894: PUSH
78895: LD_INT 32
78897: PUSH
78898: LD_INT 51
78900: PUSH
78901: LD_EXP 46
78905: PUSH
78906: LD_INT 12
78908: PUSH
78909: LD_INT 30
78911: PUSH
78912: LD_EXP 45
78916: PUSH
78917: LD_INT 11
78919: PUSH
78920: LD_INT 53
78922: PUSH
78923: LD_INT 14
78925: PUSH
78926: LD_EXP 49
78930: PUSH
78931: LD_INT 29
78933: PUSH
78934: LD_EXP 47
78938: PUSH
78939: LD_INT 13
78941: PUSH
78942: LD_INT 52
78944: PUSH
78945: LD_INT 48
78947: PUSH
78948: LD_INT 8
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: IN
78970: NOT
78971: AND
78972: IFFALSE 79020
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
78974: LD_ADDR_EXP 74
78978: PUSH
78979: LD_EXP 74
78983: PPUSH
78984: LD_VAR 0 4
78988: PUSH
78989: LD_EXP 74
78993: PUSH
78994: LD_VAR 0 4
78998: ARRAY
78999: PUSH
79000: LD_INT 1
79002: PLUS
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: PPUSH
79008: LD_VAR 0 1
79012: PPUSH
79013: CALL 17440 0 3
79017: ST_TO_ADDR
79018: GO 79064
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
79020: LD_ADDR_EXP 71
79024: PUSH
79025: LD_EXP 71
79029: PPUSH
79030: LD_VAR 0 4
79034: PUSH
79035: LD_EXP 71
79039: PUSH
79040: LD_VAR 0 4
79044: ARRAY
79045: PUSH
79046: LD_INT 1
79048: PLUS
79049: PUSH
79050: EMPTY
79051: LIST
79052: LIST
79053: PPUSH
79054: LD_VAR 0 1
79058: PPUSH
79059: CALL 17440 0 3
79063: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
79064: LD_VAR 0 1
79068: PPUSH
79069: CALL_OW 263
79073: PUSH
79074: LD_INT 2
79076: EQUAL
79077: IFFALSE 79097
// begin repeat wait ( 0 0$1 ) ;
79079: LD_INT 35
79081: PPUSH
79082: CALL_OW 67
// until IsControledBy ( vehicle ) ;
79086: LD_VAR 0 1
79090: PPUSH
79091: CALL_OW 312
79095: IFFALSE 79079
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
79097: LD_VAR 0 1
79101: PPUSH
79102: LD_EXP 76
79106: PUSH
79107: LD_VAR 0 4
79111: ARRAY
79112: PPUSH
79113: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
79117: LD_VAR 0 1
79121: PPUSH
79122: CALL_OW 263
79126: PUSH
79127: LD_INT 1
79129: NONEQUAL
79130: IFFALSE 79134
// break ;
79132: GO 79183
// repeat wait ( 0 0$1 ) ;
79134: LD_INT 35
79136: PPUSH
79137: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
79141: LD_VAR 0 1
79145: PPUSH
79146: LD_EXP 76
79150: PUSH
79151: LD_VAR 0 4
79155: ARRAY
79156: PPUSH
79157: CALL_OW 308
79161: IFFALSE 79134
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
79163: LD_VAR 0 1
79167: PPUSH
79168: CALL_OW 311
79172: PPUSH
79173: CALL_OW 121
// exit ;
79177: POP
79178: POP
79179: GO 79185
// end ; end ;
79181: GO 78838
79183: POP
79184: POP
// end ;
79185: LD_VAR 0 3
79189: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79190: LD_INT 0
79192: PPUSH
79193: PPUSH
79194: PPUSH
79195: PPUSH
// if not mc_bases or not skirmish then
79196: LD_EXP 52
79200: NOT
79201: PUSH
79202: LD_EXP 50
79206: NOT
79207: OR
79208: IFFALSE 79212
// exit ;
79210: GO 79565
// repeat wait ( 0 0$1 ) ;
79212: LD_INT 35
79214: PPUSH
79215: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
79219: LD_VAR 0 2
79223: PPUSH
79224: LD_VAR 0 3
79228: PPUSH
79229: CALL_OW 284
79233: IFFALSE 79212
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79235: LD_VAR 0 2
79239: PPUSH
79240: LD_VAR 0 3
79244: PPUSH
79245: CALL_OW 283
79249: PUSH
79250: LD_INT 4
79252: EQUAL
79253: IFFALSE 79257
// exit ;
79255: GO 79565
// for i = 1 to mc_bases do
79257: LD_ADDR_VAR 0 7
79261: PUSH
79262: DOUBLE
79263: LD_INT 1
79265: DEC
79266: ST_TO_ADDR
79267: LD_EXP 52
79271: PUSH
79272: FOR_TO
79273: IFFALSE 79563
// begin if mc_crates_area [ i ] then
79275: LD_EXP 70
79279: PUSH
79280: LD_VAR 0 7
79284: ARRAY
79285: IFFALSE 79396
// for j in mc_crates_area [ i ] do
79287: LD_ADDR_VAR 0 8
79291: PUSH
79292: LD_EXP 70
79296: PUSH
79297: LD_VAR 0 7
79301: ARRAY
79302: PUSH
79303: FOR_IN
79304: IFFALSE 79394
// if InArea ( x , y , j ) then
79306: LD_VAR 0 2
79310: PPUSH
79311: LD_VAR 0 3
79315: PPUSH
79316: LD_VAR 0 8
79320: PPUSH
79321: CALL_OW 309
79325: IFFALSE 79392
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79327: LD_ADDR_EXP 68
79331: PUSH
79332: LD_EXP 68
79336: PPUSH
79337: LD_VAR 0 7
79341: PUSH
79342: LD_EXP 68
79346: PUSH
79347: LD_VAR 0 7
79351: ARRAY
79352: PUSH
79353: LD_INT 1
79355: PLUS
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PPUSH
79361: LD_VAR 0 4
79365: PUSH
79366: LD_VAR 0 2
79370: PUSH
79371: LD_VAR 0 3
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: LIST
79380: PPUSH
79381: CALL 17440 0 3
79385: ST_TO_ADDR
// exit ;
79386: POP
79387: POP
79388: POP
79389: POP
79390: GO 79565
// end ;
79392: GO 79303
79394: POP
79395: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79396: LD_ADDR_VAR 0 9
79400: PUSH
79401: LD_EXP 52
79405: PUSH
79406: LD_VAR 0 7
79410: ARRAY
79411: PPUSH
79412: LD_INT 2
79414: PUSH
79415: LD_INT 30
79417: PUSH
79418: LD_INT 0
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: PUSH
79425: LD_INT 30
79427: PUSH
79428: LD_INT 1
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: EMPTY
79436: LIST
79437: LIST
79438: LIST
79439: PPUSH
79440: CALL_OW 72
79444: ST_TO_ADDR
// if not depot then
79445: LD_VAR 0 9
79449: NOT
79450: IFFALSE 79454
// continue ;
79452: GO 79272
// for j in depot do
79454: LD_ADDR_VAR 0 8
79458: PUSH
79459: LD_VAR 0 9
79463: PUSH
79464: FOR_IN
79465: IFFALSE 79559
// if GetDistUnitXY ( j , x , y ) < 30 then
79467: LD_VAR 0 8
79471: PPUSH
79472: LD_VAR 0 2
79476: PPUSH
79477: LD_VAR 0 3
79481: PPUSH
79482: CALL_OW 297
79486: PUSH
79487: LD_INT 30
79489: LESS
79490: IFFALSE 79557
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79492: LD_ADDR_EXP 68
79496: PUSH
79497: LD_EXP 68
79501: PPUSH
79502: LD_VAR 0 7
79506: PUSH
79507: LD_EXP 68
79511: PUSH
79512: LD_VAR 0 7
79516: ARRAY
79517: PUSH
79518: LD_INT 1
79520: PLUS
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: PPUSH
79526: LD_VAR 0 4
79530: PUSH
79531: LD_VAR 0 2
79535: PUSH
79536: LD_VAR 0 3
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: LIST
79545: PPUSH
79546: CALL 17440 0 3
79550: ST_TO_ADDR
// exit ;
79551: POP
79552: POP
79553: POP
79554: POP
79555: GO 79565
// end ;
79557: GO 79464
79559: POP
79560: POP
// end ;
79561: GO 79272
79563: POP
79564: POP
// end ;
79565: LD_VAR 0 6
79569: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79570: LD_INT 0
79572: PPUSH
79573: PPUSH
79574: PPUSH
79575: PPUSH
// if not mc_bases or not skirmish then
79576: LD_EXP 52
79580: NOT
79581: PUSH
79582: LD_EXP 50
79586: NOT
79587: OR
79588: IFFALSE 79592
// exit ;
79590: GO 79869
// side := GetSide ( lab ) ;
79592: LD_ADDR_VAR 0 4
79596: PUSH
79597: LD_VAR 0 2
79601: PPUSH
79602: CALL_OW 255
79606: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79607: LD_VAR 0 4
79611: PUSH
79612: LD_EXP 78
79616: IN
79617: NOT
79618: PUSH
79619: LD_EXP 79
79623: NOT
79624: OR
79625: PUSH
79626: LD_EXP 52
79630: NOT
79631: OR
79632: IFFALSE 79636
// exit ;
79634: GO 79869
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79636: LD_ADDR_EXP 79
79640: PUSH
79641: LD_EXP 79
79645: PPUSH
79646: LD_VAR 0 4
79650: PPUSH
79651: LD_EXP 79
79655: PUSH
79656: LD_VAR 0 4
79660: ARRAY
79661: PUSH
79662: LD_VAR 0 1
79666: DIFF
79667: PPUSH
79668: CALL_OW 1
79672: ST_TO_ADDR
// for i = 1 to mc_bases do
79673: LD_ADDR_VAR 0 5
79677: PUSH
79678: DOUBLE
79679: LD_INT 1
79681: DEC
79682: ST_TO_ADDR
79683: LD_EXP 52
79687: PUSH
79688: FOR_TO
79689: IFFALSE 79867
// begin if lab in mc_bases [ i ] then
79691: LD_VAR 0 2
79695: PUSH
79696: LD_EXP 52
79700: PUSH
79701: LD_VAR 0 5
79705: ARRAY
79706: IN
79707: IFFALSE 79865
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79709: LD_VAR 0 1
79713: PUSH
79714: LD_INT 11
79716: PUSH
79717: LD_INT 4
79719: PUSH
79720: LD_INT 3
79722: PUSH
79723: LD_INT 2
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: LIST
79730: LIST
79731: IN
79732: PUSH
79733: LD_EXP 82
79737: PUSH
79738: LD_VAR 0 5
79742: ARRAY
79743: AND
79744: IFFALSE 79865
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79746: LD_ADDR_VAR 0 6
79750: PUSH
79751: LD_EXP 82
79755: PUSH
79756: LD_VAR 0 5
79760: ARRAY
79761: PUSH
79762: LD_INT 1
79764: ARRAY
79765: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79766: LD_ADDR_EXP 82
79770: PUSH
79771: LD_EXP 82
79775: PPUSH
79776: LD_VAR 0 5
79780: PPUSH
79781: EMPTY
79782: PPUSH
79783: CALL_OW 1
79787: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79788: LD_VAR 0 6
79792: PPUSH
79793: LD_INT 0
79795: PPUSH
79796: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79800: LD_VAR 0 6
79804: PPUSH
79805: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79809: LD_ADDR_EXP 81
79813: PUSH
79814: LD_EXP 81
79818: PPUSH
79819: LD_VAR 0 5
79823: PPUSH
79824: LD_EXP 81
79828: PUSH
79829: LD_VAR 0 5
79833: ARRAY
79834: PPUSH
79835: LD_INT 1
79837: PPUSH
79838: LD_VAR 0 6
79842: PPUSH
79843: CALL_OW 2
79847: PPUSH
79848: CALL_OW 1
79852: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79853: LD_VAR 0 5
79857: PPUSH
79858: LD_INT 112
79860: PPUSH
79861: CALL 57402 0 2
// end ; end ; end ;
79865: GO 79688
79867: POP
79868: POP
// end ;
79869: LD_VAR 0 3
79873: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79874: LD_INT 0
79876: PPUSH
79877: PPUSH
79878: PPUSH
79879: PPUSH
79880: PPUSH
79881: PPUSH
79882: PPUSH
79883: PPUSH
// if not mc_bases or not skirmish then
79884: LD_EXP 52
79888: NOT
79889: PUSH
79890: LD_EXP 50
79894: NOT
79895: OR
79896: IFFALSE 79900
// exit ;
79898: GO 80992
// for i = 1 to mc_bases do
79900: LD_ADDR_VAR 0 3
79904: PUSH
79905: DOUBLE
79906: LD_INT 1
79908: DEC
79909: ST_TO_ADDR
79910: LD_EXP 52
79914: PUSH
79915: FOR_TO
79916: IFFALSE 80990
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79918: LD_VAR 0 1
79922: PUSH
79923: LD_EXP 52
79927: PUSH
79928: LD_VAR 0 3
79932: ARRAY
79933: IN
79934: PUSH
79935: LD_VAR 0 1
79939: PUSH
79940: LD_EXP 59
79944: PUSH
79945: LD_VAR 0 3
79949: ARRAY
79950: IN
79951: OR
79952: PUSH
79953: LD_VAR 0 1
79957: PUSH
79958: LD_EXP 74
79962: PUSH
79963: LD_VAR 0 3
79967: ARRAY
79968: IN
79969: OR
79970: PUSH
79971: LD_VAR 0 1
79975: PUSH
79976: LD_EXP 71
79980: PUSH
79981: LD_VAR 0 3
79985: ARRAY
79986: IN
79987: OR
79988: PUSH
79989: LD_VAR 0 1
79993: PUSH
79994: LD_EXP 81
79998: PUSH
79999: LD_VAR 0 3
80003: ARRAY
80004: IN
80005: OR
80006: PUSH
80007: LD_VAR 0 1
80011: PUSH
80012: LD_EXP 82
80016: PUSH
80017: LD_VAR 0 3
80021: ARRAY
80022: IN
80023: OR
80024: IFFALSE 80988
// begin if un in mc_ape [ i ] then
80026: LD_VAR 0 1
80030: PUSH
80031: LD_EXP 81
80035: PUSH
80036: LD_VAR 0 3
80040: ARRAY
80041: IN
80042: IFFALSE 80081
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80044: LD_ADDR_EXP 81
80048: PUSH
80049: LD_EXP 81
80053: PPUSH
80054: LD_VAR 0 3
80058: PPUSH
80059: LD_EXP 81
80063: PUSH
80064: LD_VAR 0 3
80068: ARRAY
80069: PUSH
80070: LD_VAR 0 1
80074: DIFF
80075: PPUSH
80076: CALL_OW 1
80080: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
80081: LD_VAR 0 1
80085: PUSH
80086: LD_EXP 82
80090: PUSH
80091: LD_VAR 0 3
80095: ARRAY
80096: IN
80097: IFFALSE 80121
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80099: LD_ADDR_EXP 82
80103: PUSH
80104: LD_EXP 82
80108: PPUSH
80109: LD_VAR 0 3
80113: PPUSH
80114: EMPTY
80115: PPUSH
80116: CALL_OW 1
80120: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
80121: LD_VAR 0 1
80125: PPUSH
80126: CALL_OW 247
80130: PUSH
80131: LD_INT 2
80133: EQUAL
80134: PUSH
80135: LD_VAR 0 1
80139: PPUSH
80140: CALL_OW 110
80144: PUSH
80145: LD_INT 20
80147: EQUAL
80148: PUSH
80149: LD_VAR 0 1
80153: PUSH
80154: LD_EXP 74
80158: PUSH
80159: LD_VAR 0 3
80163: ARRAY
80164: IN
80165: OR
80166: AND
80167: IFFALSE 80328
// begin if un in mc_defender [ i ] then
80169: LD_VAR 0 1
80173: PUSH
80174: LD_EXP 74
80178: PUSH
80179: LD_VAR 0 3
80183: ARRAY
80184: IN
80185: IFFALSE 80224
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80187: LD_ADDR_EXP 74
80191: PUSH
80192: LD_EXP 74
80196: PPUSH
80197: LD_VAR 0 3
80201: PPUSH
80202: LD_EXP 74
80206: PUSH
80207: LD_VAR 0 3
80211: ARRAY
80212: PUSH
80213: LD_VAR 0 1
80217: DIFF
80218: PPUSH
80219: CALL_OW 1
80223: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
80224: LD_ADDR_VAR 0 8
80228: PUSH
80229: LD_VAR 0 3
80233: PPUSH
80234: LD_INT 3
80236: PPUSH
80237: CALL 76917 0 2
80241: ST_TO_ADDR
// if fac then
80242: LD_VAR 0 8
80246: IFFALSE 80328
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
80248: LD_ADDR_VAR 0 9
80252: PUSH
80253: LD_VAR 0 8
80257: PPUSH
80258: LD_VAR 0 1
80262: PPUSH
80263: CALL_OW 265
80267: PPUSH
80268: LD_VAR 0 1
80272: PPUSH
80273: CALL_OW 262
80277: PPUSH
80278: LD_VAR 0 1
80282: PPUSH
80283: CALL_OW 263
80287: PPUSH
80288: LD_VAR 0 1
80292: PPUSH
80293: CALL_OW 264
80297: PPUSH
80298: CALL 15033 0 5
80302: ST_TO_ADDR
// if components then
80303: LD_VAR 0 9
80307: IFFALSE 80326
// MC_InsertProduceList ( i , [ components ] ) ;
80309: LD_VAR 0 3
80313: PPUSH
80314: LD_VAR 0 9
80318: PUSH
80319: EMPTY
80320: LIST
80321: PPUSH
80322: CALL 76545 0 2
// break ;
80326: GO 80990
// end ; end ; if GetType ( un ) = unit_building then
80328: LD_VAR 0 1
80332: PPUSH
80333: CALL_OW 247
80337: PUSH
80338: LD_INT 3
80340: EQUAL
80341: IFFALSE 80656
// begin btype := GetBType ( un ) ;
80343: LD_ADDR_VAR 0 5
80347: PUSH
80348: LD_VAR 0 1
80352: PPUSH
80353: CALL_OW 266
80357: ST_TO_ADDR
// if btype = b_warehouse then
80358: LD_VAR 0 5
80362: PUSH
80363: LD_INT 1
80365: EQUAL
80366: IFFALSE 80384
// begin btype := b_depot ;
80368: LD_ADDR_VAR 0 5
80372: PUSH
80373: LD_INT 0
80375: ST_TO_ADDR
// pos := 1 ;
80376: LD_ADDR_VAR 0 6
80380: PUSH
80381: LD_INT 1
80383: ST_TO_ADDR
// end ; if btype = b_factory then
80384: LD_VAR 0 5
80388: PUSH
80389: LD_INT 3
80391: EQUAL
80392: IFFALSE 80410
// begin btype := b_workshop ;
80394: LD_ADDR_VAR 0 5
80398: PUSH
80399: LD_INT 2
80401: ST_TO_ADDR
// pos := 1 ;
80402: LD_ADDR_VAR 0 6
80406: PUSH
80407: LD_INT 1
80409: ST_TO_ADDR
// end ; if btype = b_barracks then
80410: LD_VAR 0 5
80414: PUSH
80415: LD_INT 5
80417: EQUAL
80418: IFFALSE 80428
// btype := b_armoury ;
80420: LD_ADDR_VAR 0 5
80424: PUSH
80425: LD_INT 4
80427: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
80428: LD_VAR 0 5
80432: PUSH
80433: LD_INT 7
80435: PUSH
80436: LD_INT 8
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: IN
80443: IFFALSE 80453
// btype := b_lab ;
80445: LD_ADDR_VAR 0 5
80449: PUSH
80450: LD_INT 6
80452: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
80453: LD_ADDR_EXP 57
80457: PUSH
80458: LD_EXP 57
80462: PPUSH
80463: LD_VAR 0 3
80467: PUSH
80468: LD_EXP 57
80472: PUSH
80473: LD_VAR 0 3
80477: ARRAY
80478: PUSH
80479: LD_INT 1
80481: PLUS
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PPUSH
80487: LD_VAR 0 5
80491: PUSH
80492: LD_VAR 0 1
80496: PPUSH
80497: CALL_OW 250
80501: PUSH
80502: LD_VAR 0 1
80506: PPUSH
80507: CALL_OW 251
80511: PUSH
80512: LD_VAR 0 1
80516: PPUSH
80517: CALL_OW 254
80521: PUSH
80522: EMPTY
80523: LIST
80524: LIST
80525: LIST
80526: LIST
80527: PPUSH
80528: CALL 17440 0 3
80532: ST_TO_ADDR
// if pos = 1 then
80533: LD_VAR 0 6
80537: PUSH
80538: LD_INT 1
80540: EQUAL
80541: IFFALSE 80656
// begin tmp := mc_build_list [ i ] ;
80543: LD_ADDR_VAR 0 7
80547: PUSH
80548: LD_EXP 57
80552: PUSH
80553: LD_VAR 0 3
80557: ARRAY
80558: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80559: LD_VAR 0 7
80563: PPUSH
80564: LD_INT 2
80566: PUSH
80567: LD_INT 30
80569: PUSH
80570: LD_INT 0
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: PUSH
80577: LD_INT 30
80579: PUSH
80580: LD_INT 1
80582: PUSH
80583: EMPTY
80584: LIST
80585: LIST
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: LIST
80591: PPUSH
80592: CALL_OW 72
80596: IFFALSE 80606
// pos := 2 ;
80598: LD_ADDR_VAR 0 6
80602: PUSH
80603: LD_INT 2
80605: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80606: LD_ADDR_VAR 0 7
80610: PUSH
80611: LD_VAR 0 7
80615: PPUSH
80616: LD_VAR 0 6
80620: PPUSH
80621: LD_VAR 0 7
80625: PPUSH
80626: CALL 17766 0 3
80630: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80631: LD_ADDR_EXP 57
80635: PUSH
80636: LD_EXP 57
80640: PPUSH
80641: LD_VAR 0 3
80645: PPUSH
80646: LD_VAR 0 7
80650: PPUSH
80651: CALL_OW 1
80655: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80656: LD_VAR 0 1
80660: PUSH
80661: LD_EXP 52
80665: PUSH
80666: LD_VAR 0 3
80670: ARRAY
80671: IN
80672: IFFALSE 80711
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80674: LD_ADDR_EXP 52
80678: PUSH
80679: LD_EXP 52
80683: PPUSH
80684: LD_VAR 0 3
80688: PPUSH
80689: LD_EXP 52
80693: PUSH
80694: LD_VAR 0 3
80698: ARRAY
80699: PUSH
80700: LD_VAR 0 1
80704: DIFF
80705: PPUSH
80706: CALL_OW 1
80710: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80711: LD_VAR 0 1
80715: PUSH
80716: LD_EXP 59
80720: PUSH
80721: LD_VAR 0 3
80725: ARRAY
80726: IN
80727: IFFALSE 80766
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80729: LD_ADDR_EXP 59
80733: PUSH
80734: LD_EXP 59
80738: PPUSH
80739: LD_VAR 0 3
80743: PPUSH
80744: LD_EXP 59
80748: PUSH
80749: LD_VAR 0 3
80753: ARRAY
80754: PUSH
80755: LD_VAR 0 1
80759: DIFF
80760: PPUSH
80761: CALL_OW 1
80765: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80766: LD_VAR 0 1
80770: PUSH
80771: LD_EXP 71
80775: PUSH
80776: LD_VAR 0 3
80780: ARRAY
80781: IN
80782: IFFALSE 80821
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80784: LD_ADDR_EXP 71
80788: PUSH
80789: LD_EXP 71
80793: PPUSH
80794: LD_VAR 0 3
80798: PPUSH
80799: LD_EXP 71
80803: PUSH
80804: LD_VAR 0 3
80808: ARRAY
80809: PUSH
80810: LD_VAR 0 1
80814: DIFF
80815: PPUSH
80816: CALL_OW 1
80820: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
80821: LD_VAR 0 1
80825: PUSH
80826: LD_EXP 74
80830: PUSH
80831: LD_VAR 0 3
80835: ARRAY
80836: IN
80837: IFFALSE 80876
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80839: LD_ADDR_EXP 74
80843: PUSH
80844: LD_EXP 74
80848: PPUSH
80849: LD_VAR 0 3
80853: PPUSH
80854: LD_EXP 74
80858: PUSH
80859: LD_VAR 0 3
80863: ARRAY
80864: PUSH
80865: LD_VAR 0 1
80869: DIFF
80870: PPUSH
80871: CALL_OW 1
80875: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80876: LD_VAR 0 1
80880: PUSH
80881: LD_EXP 61
80885: PUSH
80886: LD_VAR 0 3
80890: ARRAY
80891: IN
80892: IFFALSE 80931
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80894: LD_ADDR_EXP 61
80898: PUSH
80899: LD_EXP 61
80903: PPUSH
80904: LD_VAR 0 3
80908: PPUSH
80909: LD_EXP 61
80913: PUSH
80914: LD_VAR 0 3
80918: ARRAY
80919: PUSH
80920: LD_VAR 0 1
80924: DIFF
80925: PPUSH
80926: CALL_OW 1
80930: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80931: LD_VAR 0 1
80935: PUSH
80936: LD_EXP 60
80940: PUSH
80941: LD_VAR 0 3
80945: ARRAY
80946: IN
80947: IFFALSE 80986
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80949: LD_ADDR_EXP 60
80953: PUSH
80954: LD_EXP 60
80958: PPUSH
80959: LD_VAR 0 3
80963: PPUSH
80964: LD_EXP 60
80968: PUSH
80969: LD_VAR 0 3
80973: ARRAY
80974: PUSH
80975: LD_VAR 0 1
80979: DIFF
80980: PPUSH
80981: CALL_OW 1
80985: ST_TO_ADDR
// end ; break ;
80986: GO 80990
// end ;
80988: GO 79915
80990: POP
80991: POP
// end ;
80992: LD_VAR 0 2
80996: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80997: LD_INT 0
80999: PPUSH
81000: PPUSH
81001: PPUSH
// if not mc_bases or not skirmish then
81002: LD_EXP 52
81006: NOT
81007: PUSH
81008: LD_EXP 50
81012: NOT
81013: OR
81014: IFFALSE 81018
// exit ;
81016: GO 81233
// for i = 1 to mc_bases do
81018: LD_ADDR_VAR 0 3
81022: PUSH
81023: DOUBLE
81024: LD_INT 1
81026: DEC
81027: ST_TO_ADDR
81028: LD_EXP 52
81032: PUSH
81033: FOR_TO
81034: IFFALSE 81231
// begin if building in mc_construct_list [ i ] then
81036: LD_VAR 0 1
81040: PUSH
81041: LD_EXP 59
81045: PUSH
81046: LD_VAR 0 3
81050: ARRAY
81051: IN
81052: IFFALSE 81229
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81054: LD_ADDR_EXP 59
81058: PUSH
81059: LD_EXP 59
81063: PPUSH
81064: LD_VAR 0 3
81068: PPUSH
81069: LD_EXP 59
81073: PUSH
81074: LD_VAR 0 3
81078: ARRAY
81079: PUSH
81080: LD_VAR 0 1
81084: DIFF
81085: PPUSH
81086: CALL_OW 1
81090: ST_TO_ADDR
// if building in mc_lab [ i ] then
81091: LD_VAR 0 1
81095: PUSH
81096: LD_EXP 85
81100: PUSH
81101: LD_VAR 0 3
81105: ARRAY
81106: IN
81107: IFFALSE 81162
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
81109: LD_ADDR_EXP 86
81113: PUSH
81114: LD_EXP 86
81118: PPUSH
81119: LD_VAR 0 3
81123: PPUSH
81124: LD_EXP 86
81128: PUSH
81129: LD_VAR 0 3
81133: ARRAY
81134: PPUSH
81135: LD_INT 1
81137: PPUSH
81138: LD_EXP 86
81142: PUSH
81143: LD_VAR 0 3
81147: ARRAY
81148: PPUSH
81149: LD_INT 0
81151: PPUSH
81152: CALL 16858 0 4
81156: PPUSH
81157: CALL_OW 1
81161: ST_TO_ADDR
// if not building in mc_bases [ i ] then
81162: LD_VAR 0 1
81166: PUSH
81167: LD_EXP 52
81171: PUSH
81172: LD_VAR 0 3
81176: ARRAY
81177: IN
81178: NOT
81179: IFFALSE 81225
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81181: LD_ADDR_EXP 52
81185: PUSH
81186: LD_EXP 52
81190: PPUSH
81191: LD_VAR 0 3
81195: PUSH
81196: LD_EXP 52
81200: PUSH
81201: LD_VAR 0 3
81205: ARRAY
81206: PUSH
81207: LD_INT 1
81209: PLUS
81210: PUSH
81211: EMPTY
81212: LIST
81213: LIST
81214: PPUSH
81215: LD_VAR 0 1
81219: PPUSH
81220: CALL 17440 0 3
81224: ST_TO_ADDR
// exit ;
81225: POP
81226: POP
81227: GO 81233
// end ; end ;
81229: GO 81033
81231: POP
81232: POP
// end ;
81233: LD_VAR 0 2
81237: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
81238: LD_INT 0
81240: PPUSH
81241: PPUSH
81242: PPUSH
81243: PPUSH
81244: PPUSH
81245: PPUSH
81246: PPUSH
// if not mc_bases or not skirmish then
81247: LD_EXP 52
81251: NOT
81252: PUSH
81253: LD_EXP 50
81257: NOT
81258: OR
81259: IFFALSE 81263
// exit ;
81261: GO 81924
// for i = 1 to mc_bases do
81263: LD_ADDR_VAR 0 3
81267: PUSH
81268: DOUBLE
81269: LD_INT 1
81271: DEC
81272: ST_TO_ADDR
81273: LD_EXP 52
81277: PUSH
81278: FOR_TO
81279: IFFALSE 81922
// begin if building in mc_construct_list [ i ] then
81281: LD_VAR 0 1
81285: PUSH
81286: LD_EXP 59
81290: PUSH
81291: LD_VAR 0 3
81295: ARRAY
81296: IN
81297: IFFALSE 81920
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81299: LD_ADDR_EXP 59
81303: PUSH
81304: LD_EXP 59
81308: PPUSH
81309: LD_VAR 0 3
81313: PPUSH
81314: LD_EXP 59
81318: PUSH
81319: LD_VAR 0 3
81323: ARRAY
81324: PUSH
81325: LD_VAR 0 1
81329: DIFF
81330: PPUSH
81331: CALL_OW 1
81335: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81336: LD_ADDR_EXP 52
81340: PUSH
81341: LD_EXP 52
81345: PPUSH
81346: LD_VAR 0 3
81350: PUSH
81351: LD_EXP 52
81355: PUSH
81356: LD_VAR 0 3
81360: ARRAY
81361: PUSH
81362: LD_INT 1
81364: PLUS
81365: PUSH
81366: EMPTY
81367: LIST
81368: LIST
81369: PPUSH
81370: LD_VAR 0 1
81374: PPUSH
81375: CALL 17440 0 3
81379: ST_TO_ADDR
// btype := GetBType ( building ) ;
81380: LD_ADDR_VAR 0 5
81384: PUSH
81385: LD_VAR 0 1
81389: PPUSH
81390: CALL_OW 266
81394: ST_TO_ADDR
// side := GetSide ( building ) ;
81395: LD_ADDR_VAR 0 8
81399: PUSH
81400: LD_VAR 0 1
81404: PPUSH
81405: CALL_OW 255
81409: ST_TO_ADDR
// if btype = b_lab then
81410: LD_VAR 0 5
81414: PUSH
81415: LD_INT 6
81417: EQUAL
81418: IFFALSE 81468
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81420: LD_ADDR_EXP 85
81424: PUSH
81425: LD_EXP 85
81429: PPUSH
81430: LD_VAR 0 3
81434: PUSH
81435: LD_EXP 85
81439: PUSH
81440: LD_VAR 0 3
81444: ARRAY
81445: PUSH
81446: LD_INT 1
81448: PLUS
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PPUSH
81454: LD_VAR 0 1
81458: PPUSH
81459: CALL 17440 0 3
81463: ST_TO_ADDR
// exit ;
81464: POP
81465: POP
81466: GO 81924
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
81468: LD_VAR 0 5
81472: PUSH
81473: LD_INT 0
81475: PUSH
81476: LD_INT 2
81478: PUSH
81479: LD_INT 4
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: LIST
81486: IN
81487: IFFALSE 81611
// begin if btype = b_armoury then
81489: LD_VAR 0 5
81493: PUSH
81494: LD_INT 4
81496: EQUAL
81497: IFFALSE 81507
// btype := b_barracks ;
81499: LD_ADDR_VAR 0 5
81503: PUSH
81504: LD_INT 5
81506: ST_TO_ADDR
// if btype = b_depot then
81507: LD_VAR 0 5
81511: PUSH
81512: LD_INT 0
81514: EQUAL
81515: IFFALSE 81525
// btype := b_warehouse ;
81517: LD_ADDR_VAR 0 5
81521: PUSH
81522: LD_INT 1
81524: ST_TO_ADDR
// if btype = b_workshop then
81525: LD_VAR 0 5
81529: PUSH
81530: LD_INT 2
81532: EQUAL
81533: IFFALSE 81543
// btype := b_factory ;
81535: LD_ADDR_VAR 0 5
81539: PUSH
81540: LD_INT 3
81542: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
81543: LD_VAR 0 5
81547: PPUSH
81548: LD_VAR 0 8
81552: PPUSH
81553: CALL_OW 323
81557: PUSH
81558: LD_INT 1
81560: EQUAL
81561: IFFALSE 81607
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
81563: LD_ADDR_EXP 84
81567: PUSH
81568: LD_EXP 84
81572: PPUSH
81573: LD_VAR 0 3
81577: PUSH
81578: LD_EXP 84
81582: PUSH
81583: LD_VAR 0 3
81587: ARRAY
81588: PUSH
81589: LD_INT 1
81591: PLUS
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PPUSH
81597: LD_VAR 0 1
81601: PPUSH
81602: CALL 17440 0 3
81606: ST_TO_ADDR
// exit ;
81607: POP
81608: POP
81609: GO 81924
// end ; if btype in [ b_bunker , b_turret ] then
81611: LD_VAR 0 5
81615: PUSH
81616: LD_INT 32
81618: PUSH
81619: LD_INT 33
81621: PUSH
81622: EMPTY
81623: LIST
81624: LIST
81625: IN
81626: IFFALSE 81916
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81628: LD_ADDR_EXP 60
81632: PUSH
81633: LD_EXP 60
81637: PPUSH
81638: LD_VAR 0 3
81642: PUSH
81643: LD_EXP 60
81647: PUSH
81648: LD_VAR 0 3
81652: ARRAY
81653: PUSH
81654: LD_INT 1
81656: PLUS
81657: PUSH
81658: EMPTY
81659: LIST
81660: LIST
81661: PPUSH
81662: LD_VAR 0 1
81666: PPUSH
81667: CALL 17440 0 3
81671: ST_TO_ADDR
// if btype = b_bunker then
81672: LD_VAR 0 5
81676: PUSH
81677: LD_INT 32
81679: EQUAL
81680: IFFALSE 81916
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81682: LD_ADDR_EXP 61
81686: PUSH
81687: LD_EXP 61
81691: PPUSH
81692: LD_VAR 0 3
81696: PUSH
81697: LD_EXP 61
81701: PUSH
81702: LD_VAR 0 3
81706: ARRAY
81707: PUSH
81708: LD_INT 1
81710: PLUS
81711: PUSH
81712: EMPTY
81713: LIST
81714: LIST
81715: PPUSH
81716: LD_VAR 0 1
81720: PPUSH
81721: CALL 17440 0 3
81725: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81726: LD_ADDR_VAR 0 6
81730: PUSH
81731: LD_EXP 52
81735: PUSH
81736: LD_VAR 0 3
81740: ARRAY
81741: PPUSH
81742: LD_INT 25
81744: PUSH
81745: LD_INT 1
81747: PUSH
81748: EMPTY
81749: LIST
81750: LIST
81751: PUSH
81752: LD_INT 3
81754: PUSH
81755: LD_INT 54
81757: PUSH
81758: EMPTY
81759: LIST
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: PUSH
81765: EMPTY
81766: LIST
81767: LIST
81768: PPUSH
81769: CALL_OW 72
81773: ST_TO_ADDR
// if tmp then
81774: LD_VAR 0 6
81778: IFFALSE 81784
// exit ;
81780: POP
81781: POP
81782: GO 81924
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81784: LD_ADDR_VAR 0 6
81788: PUSH
81789: LD_EXP 52
81793: PUSH
81794: LD_VAR 0 3
81798: ARRAY
81799: PPUSH
81800: LD_INT 2
81802: PUSH
81803: LD_INT 30
81805: PUSH
81806: LD_INT 4
81808: PUSH
81809: EMPTY
81810: LIST
81811: LIST
81812: PUSH
81813: LD_INT 30
81815: PUSH
81816: LD_INT 5
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: EMPTY
81824: LIST
81825: LIST
81826: LIST
81827: PPUSH
81828: CALL_OW 72
81832: ST_TO_ADDR
// if not tmp then
81833: LD_VAR 0 6
81837: NOT
81838: IFFALSE 81844
// exit ;
81840: POP
81841: POP
81842: GO 81924
// for j in tmp do
81844: LD_ADDR_VAR 0 4
81848: PUSH
81849: LD_VAR 0 6
81853: PUSH
81854: FOR_IN
81855: IFFALSE 81914
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81857: LD_ADDR_VAR 0 7
81861: PUSH
81862: LD_VAR 0 4
81866: PPUSH
81867: CALL_OW 313
81871: PPUSH
81872: LD_INT 25
81874: PUSH
81875: LD_INT 1
81877: PUSH
81878: EMPTY
81879: LIST
81880: LIST
81881: PPUSH
81882: CALL_OW 72
81886: ST_TO_ADDR
// if units then
81887: LD_VAR 0 7
81891: IFFALSE 81912
// begin ComExitBuilding ( units [ 1 ] ) ;
81893: LD_VAR 0 7
81897: PUSH
81898: LD_INT 1
81900: ARRAY
81901: PPUSH
81902: CALL_OW 122
// exit ;
81906: POP
81907: POP
81908: POP
81909: POP
81910: GO 81924
// end ; end ;
81912: GO 81854
81914: POP
81915: POP
// end ; end ; exit ;
81916: POP
81917: POP
81918: GO 81924
// end ; end ;
81920: GO 81278
81922: POP
81923: POP
// end ;
81924: LD_VAR 0 2
81928: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81929: LD_INT 0
81931: PPUSH
81932: PPUSH
81933: PPUSH
81934: PPUSH
81935: PPUSH
81936: PPUSH
81937: PPUSH
// if not mc_bases or not skirmish then
81938: LD_EXP 52
81942: NOT
81943: PUSH
81944: LD_EXP 50
81948: NOT
81949: OR
81950: IFFALSE 81954
// exit ;
81952: GO 82185
// btype := GetBType ( building ) ;
81954: LD_ADDR_VAR 0 6
81958: PUSH
81959: LD_VAR 0 1
81963: PPUSH
81964: CALL_OW 266
81968: ST_TO_ADDR
// x := GetX ( building ) ;
81969: LD_ADDR_VAR 0 7
81973: PUSH
81974: LD_VAR 0 1
81978: PPUSH
81979: CALL_OW 250
81983: ST_TO_ADDR
// y := GetY ( building ) ;
81984: LD_ADDR_VAR 0 8
81988: PUSH
81989: LD_VAR 0 1
81993: PPUSH
81994: CALL_OW 251
81998: ST_TO_ADDR
// d := GetDir ( building ) ;
81999: LD_ADDR_VAR 0 9
82003: PUSH
82004: LD_VAR 0 1
82008: PPUSH
82009: CALL_OW 254
82013: ST_TO_ADDR
// for i = 1 to mc_bases do
82014: LD_ADDR_VAR 0 4
82018: PUSH
82019: DOUBLE
82020: LD_INT 1
82022: DEC
82023: ST_TO_ADDR
82024: LD_EXP 52
82028: PUSH
82029: FOR_TO
82030: IFFALSE 82183
// begin if not mc_build_list [ i ] then
82032: LD_EXP 57
82036: PUSH
82037: LD_VAR 0 4
82041: ARRAY
82042: NOT
82043: IFFALSE 82047
// continue ;
82045: GO 82029
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
82047: LD_VAR 0 6
82051: PUSH
82052: LD_VAR 0 7
82056: PUSH
82057: LD_VAR 0 8
82061: PUSH
82062: LD_VAR 0 9
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: LIST
82071: LIST
82072: PPUSH
82073: LD_EXP 57
82077: PUSH
82078: LD_VAR 0 4
82082: ARRAY
82083: PUSH
82084: LD_INT 1
82086: ARRAY
82087: PPUSH
82088: CALL 23609 0 2
82092: IFFALSE 82181
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
82094: LD_ADDR_EXP 57
82098: PUSH
82099: LD_EXP 57
82103: PPUSH
82104: LD_VAR 0 4
82108: PPUSH
82109: LD_EXP 57
82113: PUSH
82114: LD_VAR 0 4
82118: ARRAY
82119: PPUSH
82120: LD_INT 1
82122: PPUSH
82123: CALL_OW 3
82127: PPUSH
82128: CALL_OW 1
82132: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
82133: LD_ADDR_EXP 59
82137: PUSH
82138: LD_EXP 59
82142: PPUSH
82143: LD_VAR 0 4
82147: PUSH
82148: LD_EXP 59
82152: PUSH
82153: LD_VAR 0 4
82157: ARRAY
82158: PUSH
82159: LD_INT 1
82161: PLUS
82162: PUSH
82163: EMPTY
82164: LIST
82165: LIST
82166: PPUSH
82167: LD_VAR 0 1
82171: PPUSH
82172: CALL 17440 0 3
82176: ST_TO_ADDR
// exit ;
82177: POP
82178: POP
82179: GO 82185
// end ; end ;
82181: GO 82029
82183: POP
82184: POP
// end ;
82185: LD_VAR 0 3
82189: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
82190: LD_INT 0
82192: PPUSH
82193: PPUSH
82194: PPUSH
// if not mc_bases or not skirmish then
82195: LD_EXP 52
82199: NOT
82200: PUSH
82201: LD_EXP 50
82205: NOT
82206: OR
82207: IFFALSE 82211
// exit ;
82209: GO 82401
// for i = 1 to mc_bases do
82211: LD_ADDR_VAR 0 4
82215: PUSH
82216: DOUBLE
82217: LD_INT 1
82219: DEC
82220: ST_TO_ADDR
82221: LD_EXP 52
82225: PUSH
82226: FOR_TO
82227: IFFALSE 82314
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
82229: LD_VAR 0 1
82233: PUSH
82234: LD_EXP 60
82238: PUSH
82239: LD_VAR 0 4
82243: ARRAY
82244: IN
82245: PUSH
82246: LD_VAR 0 1
82250: PUSH
82251: LD_EXP 61
82255: PUSH
82256: LD_VAR 0 4
82260: ARRAY
82261: IN
82262: NOT
82263: AND
82264: IFFALSE 82312
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82266: LD_ADDR_EXP 61
82270: PUSH
82271: LD_EXP 61
82275: PPUSH
82276: LD_VAR 0 4
82280: PUSH
82281: LD_EXP 61
82285: PUSH
82286: LD_VAR 0 4
82290: ARRAY
82291: PUSH
82292: LD_INT 1
82294: PLUS
82295: PUSH
82296: EMPTY
82297: LIST
82298: LIST
82299: PPUSH
82300: LD_VAR 0 1
82304: PPUSH
82305: CALL 17440 0 3
82309: ST_TO_ADDR
// break ;
82310: GO 82314
// end ; end ;
82312: GO 82226
82314: POP
82315: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
82316: LD_VAR 0 1
82320: PPUSH
82321: CALL_OW 257
82325: PUSH
82326: LD_EXP 78
82330: IN
82331: PUSH
82332: LD_VAR 0 1
82336: PPUSH
82337: CALL_OW 266
82341: PUSH
82342: LD_INT 5
82344: EQUAL
82345: AND
82346: PUSH
82347: LD_VAR 0 2
82351: PPUSH
82352: CALL_OW 110
82356: PUSH
82357: LD_INT 18
82359: NONEQUAL
82360: AND
82361: IFFALSE 82401
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
82363: LD_VAR 0 2
82367: PPUSH
82368: CALL_OW 257
82372: PUSH
82373: LD_INT 5
82375: PUSH
82376: LD_INT 8
82378: PUSH
82379: LD_INT 9
82381: PUSH
82382: EMPTY
82383: LIST
82384: LIST
82385: LIST
82386: IN
82387: IFFALSE 82401
// SetClass ( unit , 1 ) ;
82389: LD_VAR 0 2
82393: PPUSH
82394: LD_INT 1
82396: PPUSH
82397: CALL_OW 336
// end ;
82401: LD_VAR 0 3
82405: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82406: LD_INT 0
82408: PPUSH
82409: PPUSH
// if not mc_bases or not skirmish then
82410: LD_EXP 52
82414: NOT
82415: PUSH
82416: LD_EXP 50
82420: NOT
82421: OR
82422: IFFALSE 82426
// exit ;
82424: GO 82542
// if GetLives ( abandoned_vehicle ) > 250 then
82426: LD_VAR 0 2
82430: PPUSH
82431: CALL_OW 256
82435: PUSH
82436: LD_INT 250
82438: GREATER
82439: IFFALSE 82443
// exit ;
82441: GO 82542
// for i = 1 to mc_bases do
82443: LD_ADDR_VAR 0 6
82447: PUSH
82448: DOUBLE
82449: LD_INT 1
82451: DEC
82452: ST_TO_ADDR
82453: LD_EXP 52
82457: PUSH
82458: FOR_TO
82459: IFFALSE 82540
// begin if driver in mc_bases [ i ] then
82461: LD_VAR 0 1
82465: PUSH
82466: LD_EXP 52
82470: PUSH
82471: LD_VAR 0 6
82475: ARRAY
82476: IN
82477: IFFALSE 82538
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
82479: LD_VAR 0 1
82483: PPUSH
82484: LD_EXP 52
82488: PUSH
82489: LD_VAR 0 6
82493: ARRAY
82494: PPUSH
82495: LD_INT 2
82497: PUSH
82498: LD_INT 30
82500: PUSH
82501: LD_INT 0
82503: PUSH
82504: EMPTY
82505: LIST
82506: LIST
82507: PUSH
82508: LD_INT 30
82510: PUSH
82511: LD_INT 1
82513: PUSH
82514: EMPTY
82515: LIST
82516: LIST
82517: PUSH
82518: EMPTY
82519: LIST
82520: LIST
82521: LIST
82522: PPUSH
82523: CALL_OW 72
82527: PUSH
82528: LD_INT 1
82530: ARRAY
82531: PPUSH
82532: CALL_OW 112
// break ;
82536: GO 82540
// end ; end ;
82538: GO 82458
82540: POP
82541: POP
// end ; end_of_file end_of_file end_of_file
82542: LD_VAR 0 5
82546: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
82547: LD_INT 0
82549: PPUSH
82550: PPUSH
82551: PPUSH
82552: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82553: LD_VAR 0 1
82557: PPUSH
82558: CALL_OW 264
82562: PUSH
82563: LD_EXP 49
82567: EQUAL
82568: IFFALSE 82640
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82570: LD_INT 68
82572: PPUSH
82573: LD_VAR 0 1
82577: PPUSH
82578: CALL_OW 255
82582: PPUSH
82583: CALL_OW 321
82587: PUSH
82588: LD_INT 2
82590: EQUAL
82591: IFFALSE 82603
// eff := 70 else
82593: LD_ADDR_VAR 0 6
82597: PUSH
82598: LD_INT 70
82600: ST_TO_ADDR
82601: GO 82611
// eff := 30 ;
82603: LD_ADDR_VAR 0 6
82607: PUSH
82608: LD_INT 30
82610: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82611: LD_VAR 0 1
82615: PPUSH
82616: CALL_OW 250
82620: PPUSH
82621: LD_VAR 0 1
82625: PPUSH
82626: CALL_OW 251
82630: PPUSH
82631: LD_VAR 0 6
82635: PPUSH
82636: CALL_OW 495
// end ; end ;
82640: LD_VAR 0 4
82644: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
82645: LD_INT 0
82647: PPUSH
82648: PPUSH
82649: PPUSH
82650: PPUSH
82651: PPUSH
82652: PPUSH
// if cmd = 124 then
82653: LD_VAR 0 1
82657: PUSH
82658: LD_INT 124
82660: EQUAL
82661: IFFALSE 82867
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
82663: LD_ADDR_VAR 0 5
82667: PUSH
82668: LD_INT 2
82670: PUSH
82671: LD_INT 34
82673: PUSH
82674: LD_INT 53
82676: PUSH
82677: EMPTY
82678: LIST
82679: LIST
82680: PUSH
82681: LD_INT 34
82683: PUSH
82684: LD_INT 14
82686: PUSH
82687: EMPTY
82688: LIST
82689: LIST
82690: PUSH
82691: EMPTY
82692: LIST
82693: LIST
82694: LIST
82695: PPUSH
82696: CALL_OW 69
82700: ST_TO_ADDR
// if not tmp then
82701: LD_VAR 0 5
82705: NOT
82706: IFFALSE 82710
// exit ;
82708: GO 82867
// for i in tmp do
82710: LD_ADDR_VAR 0 3
82714: PUSH
82715: LD_VAR 0 5
82719: PUSH
82720: FOR_IN
82721: IFFALSE 82865
// begin taskList := GetTaskList ( i ) ;
82723: LD_ADDR_VAR 0 6
82727: PUSH
82728: LD_VAR 0 3
82732: PPUSH
82733: CALL_OW 437
82737: ST_TO_ADDR
// if not taskList then
82738: LD_VAR 0 6
82742: NOT
82743: IFFALSE 82747
// continue ;
82745: GO 82720
// for j = 1 to taskList do
82747: LD_ADDR_VAR 0 4
82751: PUSH
82752: DOUBLE
82753: LD_INT 1
82755: DEC
82756: ST_TO_ADDR
82757: LD_VAR 0 6
82761: PUSH
82762: FOR_TO
82763: IFFALSE 82861
// if taskList [ j ] [ 1 ] = | then
82765: LD_VAR 0 6
82769: PUSH
82770: LD_VAR 0 4
82774: ARRAY
82775: PUSH
82776: LD_INT 1
82778: ARRAY
82779: PUSH
82780: LD_STRING |
82782: EQUAL
82783: IFFALSE 82859
// begin _taskList := Delete ( taskList , 1 ) ;
82785: LD_ADDR_VAR 0 7
82789: PUSH
82790: LD_VAR 0 6
82794: PPUSH
82795: LD_INT 1
82797: PPUSH
82798: CALL_OW 3
82802: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
82803: LD_VAR 0 3
82807: PPUSH
82808: LD_VAR 0 7
82812: PPUSH
82813: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
82817: LD_VAR 0 3
82821: PPUSH
82822: LD_VAR 0 6
82826: PUSH
82827: LD_VAR 0 4
82831: ARRAY
82832: PUSH
82833: LD_INT 2
82835: ARRAY
82836: PPUSH
82837: LD_VAR 0 6
82841: PUSH
82842: LD_VAR 0 4
82846: ARRAY
82847: PUSH
82848: LD_INT 3
82850: ARRAY
82851: PPUSH
82852: LD_INT 8
82854: PPUSH
82855: CALL 82872 0 4
// end ;
82859: GO 82762
82861: POP
82862: POP
// end ;
82863: GO 82720
82865: POP
82866: POP
// end ; end ;
82867: LD_VAR 0 2
82871: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
82872: LD_INT 0
82874: PPUSH
82875: PPUSH
82876: PPUSH
82877: PPUSH
82878: PPUSH
82879: PPUSH
82880: PPUSH
82881: PPUSH
82882: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
82883: LD_VAR 0 1
82887: NOT
82888: PUSH
82889: LD_VAR 0 2
82893: PPUSH
82894: LD_VAR 0 3
82898: PPUSH
82899: CALL_OW 488
82903: NOT
82904: OR
82905: PUSH
82906: LD_VAR 0 4
82910: NOT
82911: OR
82912: IFFALSE 82916
// exit ;
82914: GO 83256
// list := [ ] ;
82916: LD_ADDR_VAR 0 13
82920: PUSH
82921: EMPTY
82922: ST_TO_ADDR
// if x - r < 0 then
82923: LD_VAR 0 2
82927: PUSH
82928: LD_VAR 0 4
82932: MINUS
82933: PUSH
82934: LD_INT 0
82936: LESS
82937: IFFALSE 82949
// min_x := 0 else
82939: LD_ADDR_VAR 0 7
82943: PUSH
82944: LD_INT 0
82946: ST_TO_ADDR
82947: GO 82965
// min_x := x - r ;
82949: LD_ADDR_VAR 0 7
82953: PUSH
82954: LD_VAR 0 2
82958: PUSH
82959: LD_VAR 0 4
82963: MINUS
82964: ST_TO_ADDR
// if y - r < 0 then
82965: LD_VAR 0 3
82969: PUSH
82970: LD_VAR 0 4
82974: MINUS
82975: PUSH
82976: LD_INT 0
82978: LESS
82979: IFFALSE 82991
// min_y := 0 else
82981: LD_ADDR_VAR 0 8
82985: PUSH
82986: LD_INT 0
82988: ST_TO_ADDR
82989: GO 83007
// min_y := y - r ;
82991: LD_ADDR_VAR 0 8
82995: PUSH
82996: LD_VAR 0 3
83000: PUSH
83001: LD_VAR 0 4
83005: MINUS
83006: ST_TO_ADDR
// max_x := x + r ;
83007: LD_ADDR_VAR 0 9
83011: PUSH
83012: LD_VAR 0 2
83016: PUSH
83017: LD_VAR 0 4
83021: PLUS
83022: ST_TO_ADDR
// max_y := y + r ;
83023: LD_ADDR_VAR 0 10
83027: PUSH
83028: LD_VAR 0 3
83032: PUSH
83033: LD_VAR 0 4
83037: PLUS
83038: ST_TO_ADDR
// for _x = min_x to max_x do
83039: LD_ADDR_VAR 0 11
83043: PUSH
83044: DOUBLE
83045: LD_VAR 0 7
83049: DEC
83050: ST_TO_ADDR
83051: LD_VAR 0 9
83055: PUSH
83056: FOR_TO
83057: IFFALSE 83174
// for _y = min_y to max_y do
83059: LD_ADDR_VAR 0 12
83063: PUSH
83064: DOUBLE
83065: LD_VAR 0 8
83069: DEC
83070: ST_TO_ADDR
83071: LD_VAR 0 10
83075: PUSH
83076: FOR_TO
83077: IFFALSE 83170
// begin if not ValidHex ( _x , _y ) then
83079: LD_VAR 0 11
83083: PPUSH
83084: LD_VAR 0 12
83088: PPUSH
83089: CALL_OW 488
83093: NOT
83094: IFFALSE 83098
// continue ;
83096: GO 83076
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83098: LD_VAR 0 11
83102: PPUSH
83103: LD_VAR 0 12
83107: PPUSH
83108: CALL_OW 351
83112: PUSH
83113: LD_VAR 0 11
83117: PPUSH
83118: LD_VAR 0 12
83122: PPUSH
83123: CALL_OW 554
83127: AND
83128: IFFALSE 83168
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83130: LD_ADDR_VAR 0 13
83134: PUSH
83135: LD_VAR 0 13
83139: PPUSH
83140: LD_VAR 0 13
83144: PUSH
83145: LD_INT 1
83147: PLUS
83148: PPUSH
83149: LD_VAR 0 11
83153: PUSH
83154: LD_VAR 0 12
83158: PUSH
83159: EMPTY
83160: LIST
83161: LIST
83162: PPUSH
83163: CALL_OW 2
83167: ST_TO_ADDR
// end ;
83168: GO 83076
83170: POP
83171: POP
83172: GO 83056
83174: POP
83175: POP
// if not list then
83176: LD_VAR 0 13
83180: NOT
83181: IFFALSE 83185
// exit ;
83183: GO 83256
// for i in list do
83185: LD_ADDR_VAR 0 6
83189: PUSH
83190: LD_VAR 0 13
83194: PUSH
83195: FOR_IN
83196: IFFALSE 83254
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83198: LD_VAR 0 1
83202: PPUSH
83203: LD_STRING M
83205: PUSH
83206: LD_VAR 0 6
83210: PUSH
83211: LD_INT 1
83213: ARRAY
83214: PUSH
83215: LD_VAR 0 6
83219: PUSH
83220: LD_INT 2
83222: ARRAY
83223: PUSH
83224: LD_INT 0
83226: PUSH
83227: LD_INT 0
83229: PUSH
83230: LD_INT 0
83232: PUSH
83233: LD_INT 0
83235: PUSH
83236: EMPTY
83237: LIST
83238: LIST
83239: LIST
83240: LIST
83241: LIST
83242: LIST
83243: LIST
83244: PUSH
83245: EMPTY
83246: LIST
83247: PPUSH
83248: CALL_OW 447
83252: GO 83195
83254: POP
83255: POP
// end ;
83256: LD_VAR 0 5
83260: RET
