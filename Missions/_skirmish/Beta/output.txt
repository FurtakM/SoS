// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5207 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2370 0 0
// PrepareBeta ;
  49: CALL 2759 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 10936 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3341 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4066 0 0
// PrepareRUBase_v2 ;
 877: CALL 4482 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 55952 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3953 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10793 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10793 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10793 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10793 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2048
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4810 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2017
// Say ( Brighton , DBrighton-F1a ) else
2003: LD_EXP 8
2007: PPUSH
2008: LD_STRING DBrighton-F1a
2010: PPUSH
2011: CALL_OW 88
2015: GO 2036
// begin Say ( Brighton , DBrighton-F1 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DBrighton-F1
2024: PPUSH
2025: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2029: LD_STRING C3
2031: PPUSH
2032: CALL_OW 337
// end ; DialogueOff ;
2036: CALL_OW 7
// JMM_Arrived := true ;
2040: LD_ADDR_EXP 5
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// end ;
2048: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2049: LD_EXP 5
2053: PUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_EXP 18
2061: PPUSH
2062: CALL_OW 292
2066: AND
2067: IFFALSE 2096
2069: GO 2071
2071: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2072: LD_EXP 18
2076: PPUSH
2077: LD_STRING DBurlak
2079: PPUSH
2080: CALL_OW 88
// Say ( JMM , DJMM ) ;
2084: LD_EXP 36
2088: PPUSH
2089: LD_STRING DJMM
2091: PPUSH
2092: CALL_OW 88
// end ;
2096: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2097: LD_INT 1
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: LD_INT 34
2115: PUSH
2116: LD_INT 9
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 35
2125: PUSH
2126: LD_INT 9
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: GREATER
2151: IFFALSE 2164
2153: GO 2155
2155: DISABLE
// begin LaserBuilt := true ;
2156: LD_ADDR_EXP 6
2160: PUSH
2161: LD_INT 1
2163: ST_TO_ADDR
// end ;
2164: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2165: LD_EXP 7
2169: PUSH
2170: LD_INT 6
2172: PPUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 35
2188: PUSH
2189: LD_INT 9
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 69
2208: PPUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 310
2218: PPUSH
2219: CALL_OW 74
2223: PPUSH
2224: CALL_OW 292
2228: AND
2229: IFFALSE 2265
2231: GO 2233
2233: DISABLE
// begin wait ( 0 0$5 ) ;
2234: LD_INT 175
2236: PPUSH
2237: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2241: LD_EXP 15
2245: PPUSH
2246: LD_STRING DDeath-Vse-2
2248: PPUSH
2249: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2253: LD_EXP 12
2257: PPUSH
2258: LD_STRING DDeath-Yas-2
2260: PPUSH
2261: CALL_OW 88
// end ;
2265: END
// every 0 0$1 trigger AssaultStarted do
2266: LD_EXP 7
2270: IFFALSE 2294
2272: GO 2274
2274: DISABLE
// begin wait ( 0 0$20 ) ;
2275: LD_INT 700
2277: PPUSH
2278: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2282: LD_EXP 13
2286: PPUSH
2287: LD_STRING DDeath-Pop-2
2289: PPUSH
2290: CALL_OW 88
// end ;
2294: END
// every 0 0$1 trigger MissionStart do
2295: LD_EXP 1
2299: IFFALSE 2341
2301: GO 2303
2303: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2304: LD_INT 1750
2306: PPUSH
2307: LD_INT 4900
2309: PPUSH
2310: CALL_OW 12
2314: PPUSH
2315: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2319: LD_INT 2
2321: PPUSH
2322: LD_INT 5
2324: PPUSH
2325: CALL_OW 12
2329: PPUSH
2330: LD_INT 12
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 55
// enable ;
2340: ENABLE
// end ;
2341: END
// every 0 0$1 trigger MissionStart do
2342: LD_EXP 1
2346: IFFALSE 2369
2348: GO 2350
2350: DISABLE
// begin enable ;
2351: ENABLE
// display_Strings := [ #tick , tick ] ;
2352: LD_ADDR_OWVAR 47
2356: PUSH
2357: LD_STRING #tick
2359: PUSH
2360: LD_OWVAR 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: ST_TO_ADDR
// end ; end_of_file
2369: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2370: LD_INT 0
2372: PPUSH
// uc_side := 1 ;
2373: LD_ADDR_OWVAR 20
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// hc_class = class_soldier ;
2381: LD_ADDR_OWVAR 28
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// uc_nation := nation_american ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// hc_sex = sex_male ;
2397: LD_ADDR_OWVAR 27
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// hc_importance = 110 ;
2405: LD_ADDR_OWVAR 32
2409: PUSH
2410: LD_INT 110
2412: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2413: LD_ADDR_OWVAR 30
2417: PUSH
2418: LD_INT 5
2420: PUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 5
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2436: LD_ADDR_OWVAR 31
2440: PUSH
2441: LD_INT 9
2443: PUSH
2444: LD_INT 6
2446: PUSH
2447: LD_INT 7
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2459: LD_ADDR_OWVAR 29
2463: PUSH
2464: LD_INT 12
2466: PUSH
2467: LD_INT 10
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2474: LD_ADDR_OWVAR 26
2478: PUSH
2479: LD_STRING Gerard Brighton
2481: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2482: LD_ADDR_OWVAR 33
2486: PUSH
2487: LD_STRING Beta_Skirmish
2489: ST_TO_ADDR
// hc_face_number := 1 ;
2490: LD_ADDR_OWVAR 34
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// Brighton := CreateHuman ;
2498: LD_ADDR_EXP 8
2502: PUSH
2503: CALL_OW 44
2507: ST_TO_ADDR
// uc_nation := nation_american ;
2508: LD_ADDR_OWVAR 21
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// hc_importance = 80 ;
2516: LD_ADDR_OWVAR 32
2520: PUSH
2521: LD_INT 80
2523: ST_TO_ADDR
// hc_sex = sex_male ;
2524: LD_ADDR_OWVAR 27
2528: PUSH
2529: LD_INT 1
2531: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2532: LD_ADDR_OWVAR 30
2536: PUSH
2537: LD_INT 5
2539: PUSH
2540: LD_INT 5
2542: PUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2555: LD_ADDR_OWVAR 31
2559: PUSH
2560: LD_INT 7
2562: PUSH
2563: LD_INT 6
2565: PUSH
2566: LD_INT 5
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2578: LD_ADDR_OWVAR 29
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 10
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// hc_name := Brian Palmer ;
2593: LD_ADDR_OWVAR 26
2597: PUSH
2598: LD_STRING Brian Palmer
2600: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2601: LD_ADDR_OWVAR 33
2605: PUSH
2606: LD_STRING Beta_Skirmish
2608: ST_TO_ADDR
// hc_face_number := 3 ;
2609: LD_ADDR_OWVAR 34
2613: PUSH
2614: LD_INT 3
2616: ST_TO_ADDR
// Palmer := CreateHuman ;
2617: LD_ADDR_EXP 9
2621: PUSH
2622: CALL_OW 44
2626: ST_TO_ADDR
// hc_class = class_scientistic ;
2627: LD_ADDR_OWVAR 28
2631: PUSH
2632: LD_INT 4
2634: ST_TO_ADDR
// uc_nation := nation_american ;
2635: LD_ADDR_OWVAR 21
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// hc_importance = 70 ;
2643: LD_ADDR_OWVAR 32
2647: PUSH
2648: LD_INT 70
2650: ST_TO_ADDR
// hc_sex = sex_female ;
2651: LD_ADDR_OWVAR 27
2655: PUSH
2656: LD_INT 2
2658: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2659: LD_ADDR_OWVAR 30
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: LD_INT 4
2672: PUSH
2673: LD_INT 6
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2682: LD_ADDR_OWVAR 31
2686: PUSH
2687: LD_INT 4
2689: PUSH
2690: LD_INT 2
2692: PUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 8
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2705: LD_ADDR_OWVAR 29
2709: PUSH
2710: LD_INT 10
2712: PUSH
2713: LD_INT 10
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: ST_TO_ADDR
// hc_name := Megan Armitage ;
2720: LD_ADDR_OWVAR 26
2724: PUSH
2725: LD_STRING Megan Armitage
2727: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2728: LD_ADDR_OWVAR 33
2732: PUSH
2733: LD_STRING Beta_Skirmish
2735: ST_TO_ADDR
// hc_face_number := 4 ;
2736: LD_ADDR_OWVAR 34
2740: PUSH
2741: LD_INT 4
2743: ST_TO_ADDR
// Megan := CreateHuman ;
2744: LD_ADDR_EXP 10
2748: PUSH
2749: CALL_OW 44
2753: ST_TO_ADDR
// end ;
2754: LD_VAR 0 1
2758: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
2764: PPUSH
2765: PPUSH
// uc_side := 1 ;
2766: LD_ADDR_OWVAR 20
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// uc_nation := nation_american ;
2774: LD_ADDR_OWVAR 21
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2782: LD_ADDR_VAR 0 2
2786: PUSH
2787: LD_INT 22
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 30
2799: PUSH
2800: LD_INT 32
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PPUSH
2811: CALL_OW 69
2815: PUSH
2816: FOR_IN
2817: IFFALSE 2872
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2819: LD_VAR 0 2
2823: PPUSH
2824: LD_INT 2
2826: PUSH
2827: LD_INT 3
2829: PUSH
2830: LD_INT 4
2832: PUSH
2833: LD_INT 5
2835: PUSH
2836: LD_INT 11
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 4
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 1
2856: PPUSH
2857: LD_INT 7
2859: PPUSH
2860: CALL_OW 12
2864: ARRAY
2865: PPUSH
2866: CALL_OW 431
2870: GO 2816
2872: POP
2873: POP
// hc_name :=  ;
2874: LD_ADDR_OWVAR 26
2878: PUSH
2879: LD_STRING 
2881: ST_TO_ADDR
// hc_gallery :=  ;
2882: LD_ADDR_OWVAR 33
2886: PUSH
2887: LD_STRING 
2889: ST_TO_ADDR
// for i = 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 7
2902: PUSH
2903: LD_INT 6
2905: PUSH
2906: LD_INT 5
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: PUSH
2914: LD_OWVAR 67
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 2979
// begin PrepareSoldier ( 1 , game_skill ) ;
2923: LD_INT 1
2925: PPUSH
2926: LD_EXP 38
2930: PPUSH
2931: CALL_OW 381
// un := CreateHuman ;
2935: LD_ADDR_VAR 0 4
2939: PUSH
2940: CALL_OW 44
2944: ST_TO_ADDR
// filter := filter ^ un ;
2945: LD_ADDR_VAR 0 3
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_VAR 0 4
2959: ADD
2960: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2961: LD_ADDR_VAR 0 5
2965: PUSH
2966: LD_VAR 0 5
2970: PUSH
2971: LD_VAR 0 4
2975: ADD
2976: ST_TO_ADDR
// end ;
2977: GO 2920
2979: POP
2980: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 3
2993: PUSH
2994: LD_INT 2
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: PUSH
3005: LD_OWVAR 67
3009: ARRAY
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3066
// begin PrepareEngineer ( 0 , game_skill ) ;
3014: LD_INT 0
3016: PPUSH
3017: LD_EXP 38
3021: PPUSH
3022: CALL_OW 382
// un := CreateHuman ;
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: CALL_OW 44
3035: ST_TO_ADDR
// filter := filter ^ un ;
3036: LD_ADDR_VAR 0 3
3040: PUSH
3041: LD_VAR 0 3
3045: PUSH
3046: LD_VAR 0 4
3050: ADD
3051: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3052: LD_VAR 0 4
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: CALL_OW 52
// end ;
3064: GO 3011
3066: POP
3067: POP
// for i = 1 to [ 4 , 4 , 3 ] [ Difficulty ] do
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: DOUBLE
3074: LD_INT 1
3076: DEC
3077: ST_TO_ADDR
3078: LD_INT 4
3080: PUSH
3081: LD_INT 4
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: PUSH
3092: LD_OWVAR 67
3096: ARRAY
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3153
// begin PrepareMechanic ( 0 , game_skill ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_EXP 38
3108: PPUSH
3109: CALL_OW 383
// un := CreateHuman ;
3113: LD_ADDR_VAR 0 4
3117: PUSH
3118: CALL_OW 44
3122: ST_TO_ADDR
// filter := filter ^ un ;
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: LD_VAR 0 3
3132: PUSH
3133: LD_VAR 0 4
3137: ADD
3138: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 8
3146: PPUSH
3147: CALL_OW 52
// end ;
3151: GO 3098
3153: POP
3154: POP
// for i = 1 to 3 do
3155: LD_ADDR_VAR 0 2
3159: PUSH
3160: DOUBLE
3161: LD_INT 1
3163: DEC
3164: ST_TO_ADDR
3165: LD_INT 3
3167: PUSH
3168: FOR_TO
3169: IFFALSE 3223
// begin PrepareScientist ( 0 , game_skill ) ;
3171: LD_INT 0
3173: PPUSH
3174: LD_EXP 38
3178: PPUSH
3179: CALL_OW 384
// un := CreateHuman ;
3183: LD_ADDR_VAR 0 4
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// filter := filter ^ un ;
3193: LD_ADDR_VAR 0 3
3197: PUSH
3198: LD_VAR 0 3
3202: PUSH
3203: LD_VAR 0 4
3207: ADD
3208: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3209: LD_VAR 0 4
3213: PPUSH
3214: LD_INT 14
3216: PPUSH
3217: CALL_OW 52
// end ;
3221: GO 3168
3223: POP
3224: POP
// for i = 1 to soldiers do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_VAR 0 5
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3266
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3243: LD_VAR 0 5
3247: PUSH
3248: LD_VAR 0 2
3252: ARRAY
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
3264: GO 3240
3266: POP
3267: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3268: LD_EXP 8
3272: PPUSH
3273: LD_INT 51
3275: PPUSH
3276: LD_INT 43
3278: PPUSH
3279: LD_INT 0
3281: PPUSH
3282: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3286: LD_EXP 9
3290: PPUSH
3291: LD_INT 55
3293: PPUSH
3294: LD_INT 58
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3304: LD_EXP 10
3308: PPUSH
3309: LD_INT 39
3311: PPUSH
3312: LD_INT 36
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 48
// BetaSquad := filter diff 0 ;
3322: LD_ADDR_EXP 11
3326: PUSH
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 0
3334: DIFF
3335: ST_TO_ADDR
// end ;
3336: LD_VAR 0 1
3340: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3341: LD_INT 0
3343: PPUSH
3344: PPUSH
3345: PPUSH
3346: PPUSH
3347: PPUSH
3348: PPUSH
// uc_side := 6 ;
3349: LD_ADDR_OWVAR 20
3353: PUSH
3354: LD_INT 6
3356: ST_TO_ADDR
// uc_nation := nation_russian ;
3357: LD_ADDR_OWVAR 21
3361: PUSH
3362: LD_INT 3
3364: ST_TO_ADDR
// soldiers := [ ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// vehs := [ ] ;
3372: LD_ADDR_VAR 0 6
3376: PUSH
3377: EMPTY
3378: ST_TO_ADDR
// RUArmada := [ ] ;
3379: LD_ADDR_EXP 16
3383: PUSH
3384: EMPTY
3385: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3386: LD_ADDR_EXP 12
3390: PUSH
3391: LD_STRING Yashin
3393: PPUSH
3394: CALL_OW 25
3398: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3399: LD_ADDR_EXP 13
3403: PUSH
3404: LD_STRING Popov
3406: PPUSH
3407: CALL_OW 25
3411: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3412: LD_ADDR_EXP 14
3416: PUSH
3417: LD_STRING Gaydar
3419: PPUSH
3420: CALL_OW 25
3424: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3425: LD_ADDR_EXP 15
3429: PUSH
3430: LD_STRING Vsevolod
3432: PPUSH
3433: CALL_OW 25
3437: ST_TO_ADDR
// for i = 1 to 16 do
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 16
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3494
// begin PrepareSoldier ( 0 , game_eskill ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_EXP 39
3461: PPUSH
3462: CALL_OW 381
// un := CreateHuman ;
3466: LD_ADDR_VAR 0 5
3470: PUSH
3471: CALL_OW 44
3475: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: LD_VAR 0 4
3485: PUSH
3486: LD_VAR 0 5
3490: ADD
3491: ST_TO_ADDR
// end ;
3492: GO 3451
3494: POP
3495: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3496: LD_ADDR_VAR 0 4
3500: PUSH
3501: LD_EXP 12
3505: PUSH
3506: LD_EXP 13
3510: ADD
3511: PUSH
3512: LD_EXP 14
3516: ADD
3517: PUSH
3518: LD_EXP 15
3522: ADD
3523: PUSH
3524: LD_VAR 0 4
3528: ADD
3529: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3530: LD_INT 24
3532: PPUSH
3533: LD_INT 3
3535: PPUSH
3536: LD_INT 1
3538: PPUSH
3539: LD_INT 46
3541: PPUSH
3542: LD_INT 100
3544: PPUSH
3545: CALL 17834 0 5
// for i = 1 to 8 do
3549: LD_ADDR_VAR 0 2
3553: PUSH
3554: DOUBLE
3555: LD_INT 1
3557: DEC
3558: ST_TO_ADDR
3559: LD_INT 8
3561: PUSH
3562: FOR_TO
3563: IFFALSE 3646
// begin vehicle := CreateVehicle ;
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: CALL_OW 45
3574: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: PPUSH
3584: LD_VAR 0 3
3588: PPUSH
3589: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: LD_VAR 0 4
3602: PUSH
3603: LD_VAR 0 4
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: DIFF
3612: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL_OW 49
// vehs := vehs ^ vehicle ;
3628: LD_ADDR_VAR 0 6
3632: PUSH
3633: LD_VAR 0 6
3637: PUSH
3638: LD_VAR 0 3
3642: ADD
3643: ST_TO_ADDR
// end ;
3644: GO 3562
3646: POP
3647: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3648: LD_INT 24
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: LD_INT 43
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL 17834 0 5
// for i = 1 to 8 do
3667: LD_ADDR_VAR 0 2
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_INT 8
3679: PUSH
3680: FOR_TO
3681: IFFALSE 3764
// begin vehicle := CreateVehicle ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 45
3692: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3711: LD_ADDR_VAR 0 4
3715: PUSH
3716: LD_VAR 0 4
3720: PUSH
3721: LD_VAR 0 4
3725: PUSH
3726: LD_INT 1
3728: ARRAY
3729: DIFF
3730: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL_OW 49
// vehs := vehs ^ vehicle ;
3746: LD_ADDR_VAR 0 6
3750: PUSH
3751: LD_VAR 0 6
3755: PUSH
3756: LD_VAR 0 3
3760: ADD
3761: ST_TO_ADDR
// end ;
3762: GO 3680
3764: POP
3765: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3766: LD_INT 22
3768: PPUSH
3769: LD_INT 3
3771: PPUSH
3772: LD_INT 1
3774: PPUSH
3775: LD_INT 44
3777: PPUSH
3778: LD_INT 100
3780: PPUSH
3781: CALL 17834 0 5
// for i = 1 to 4 do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: DOUBLE
3791: LD_INT 1
3793: DEC
3794: ST_TO_ADDR
3795: LD_INT 4
3797: PUSH
3798: FOR_TO
3799: IFFALSE 3882
// begin vehicle := CreateVehicle ;
3801: LD_ADDR_VAR 0 3
3805: PUSH
3806: CALL_OW 45
3810: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3811: LD_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: LD_VAR 0 3
3824: PPUSH
3825: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 4
3838: PUSH
3839: LD_VAR 0 4
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: DIFF
3848: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3849: LD_VAR 0 3
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 49
// vehs := vehs ^ vehicle ;
3864: LD_ADDR_VAR 0 6
3868: PUSH
3869: LD_VAR 0 6
3873: PUSH
3874: LD_VAR 0 3
3878: ADD
3879: ST_TO_ADDR
// end ;
3880: GO 3798
3882: POP
3883: POP
// RUArmada := vehs ;
3884: LD_ADDR_EXP 16
3888: PUSH
3889: LD_VAR 0 6
3893: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3894: LD_EXP 12
3898: PPUSH
3899: CALL_OW 310
3903: PUSH
3904: LD_EXP 13
3908: PPUSH
3909: CALL_OW 310
3913: PUSH
3914: LD_EXP 14
3918: PPUSH
3919: CALL_OW 310
3923: PUSH
3924: LD_EXP 15
3928: PPUSH
3929: CALL_OW 310
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: PPUSH
3940: LD_INT 6
3942: NEG
3943: PPUSH
3944: CALL_OW 242
// end ;
3948: LD_VAR 0 1
3952: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3953: LD_INT 0
3955: PPUSH
3956: PPUSH
3957: PPUSH
// uc_side := 6 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 6
3965: ST_TO_ADDR
// uc_nation := nation_russian ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// Bulldozers := [ ] ;
3974: LD_ADDR_EXP 17
3978: PUSH
3979: EMPTY
3980: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3981: LD_INT 24
3983: PPUSH
3984: LD_INT 3
3986: PPUSH
3987: LD_INT 3
3989: PPUSH
3990: LD_INT 53
3992: PPUSH
3993: LD_INT 100
3995: PPUSH
3996: CALL 17834 0 5
// for i = 1 to 2 do
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_INT 2
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4059
// begin vehicle := CreateVehicle ;
4016: LD_ADDR_VAR 0 3
4020: PUSH
4021: CALL_OW 45
4025: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4026: LD_VAR 0 3
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4041: LD_ADDR_EXP 17
4045: PUSH
4046: LD_EXP 17
4050: PUSH
4051: LD_VAR 0 3
4055: ADD
4056: ST_TO_ADDR
// end ;
4057: GO 4013
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 1
4065: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
// uc_side := 3 ;
4072: LD_ADDR_OWVAR 20
4076: PUSH
4077: LD_INT 3
4079: ST_TO_ADDR
// uc_nation := nation_russian ;
4080: LD_ADDR_OWVAR 21
4084: PUSH
4085: LD_INT 3
4087: ST_TO_ADDR
// hc_name :=  ;
4088: LD_ADDR_OWVAR 26
4092: PUSH
4093: LD_STRING 
4095: ST_TO_ADDR
// hc_gallery :=  ;
4096: LD_ADDR_OWVAR 33
4100: PUSH
4101: LD_STRING 
4103: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4104: LD_ADDR_EXP 18
4108: PUSH
4109: LD_STRING Burlak
4111: PPUSH
4112: CALL_OW 25
4116: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4117: LD_ADDR_EXP 19
4121: PUSH
4122: LD_STRING Gleb
4124: PPUSH
4125: CALL_OW 25
4129: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4130: LD_ADDR_EXP 20
4134: PUSH
4135: LD_STRING Furmanov
4137: PPUSH
4138: CALL_OW 25
4142: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4143: LD_ADDR_EXP 21
4147: PUSH
4148: LD_STRING Titov
4150: PPUSH
4151: CALL_OW 25
4155: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4156: LD_ADDR_EXP 22
4160: PUSH
4161: LD_STRING Scholtze
4163: PPUSH
4164: CALL_OW 25
4168: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4169: LD_ADDR_EXP 23
4173: PUSH
4174: LD_STRING Dolgov
4176: PPUSH
4177: CALL_OW 25
4181: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4182: LD_ADDR_EXP 24
4186: PUSH
4187: LD_STRING Kapitsova
4189: PPUSH
4190: CALL_OW 25
4194: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4195: LD_ADDR_EXP 25
4199: PUSH
4200: LD_STRING Karamazov
4202: PPUSH
4203: CALL_OW 25
4207: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4208: LD_ADDR_EXP 26
4212: PUSH
4213: LD_STRING Kirlenkova
4215: PPUSH
4216: CALL_OW 25
4220: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4221: LD_ADDR_EXP 27
4225: PUSH
4226: LD_STRING Kovalyuk
4228: PPUSH
4229: CALL_OW 25
4233: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4234: LD_ADDR_EXP 28
4238: PUSH
4239: LD_STRING Kozlov
4241: PPUSH
4242: CALL_OW 25
4246: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4247: LD_ADDR_EXP 29
4251: PUSH
4252: LD_STRING Kuzmov
4254: PPUSH
4255: CALL_OW 25
4259: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4260: LD_ADDR_EXP 30
4264: PUSH
4265: LD_STRING Lipshchin
4267: PPUSH
4268: CALL_OW 25
4272: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4273: LD_ADDR_EXP 31
4277: PUSH
4278: LD_STRING Oblukov
4280: PPUSH
4281: CALL_OW 25
4285: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4286: LD_ADDR_EXP 32
4290: PUSH
4291: LD_STRING Xavier2
4293: PPUSH
4294: CALL_OW 25
4298: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4299: LD_ADDR_EXP 33
4303: PUSH
4304: LD_STRING Gnyevko
4306: PPUSH
4307: CALL_OW 25
4311: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4312: LD_ADDR_EXP 34
4316: PUSH
4317: LD_STRING Belkov
4319: PPUSH
4320: CALL_OW 25
4324: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_EXP 18
4334: PUSH
4335: LD_EXP 19
4339: PUSH
4340: LD_EXP 20
4344: PUSH
4345: LD_EXP 21
4349: PUSH
4350: LD_EXP 22
4354: PUSH
4355: LD_EXP 23
4359: PUSH
4360: LD_EXP 24
4364: PUSH
4365: LD_EXP 25
4369: PUSH
4370: LD_EXP 26
4374: PUSH
4375: LD_EXP 27
4379: PUSH
4380: LD_EXP 28
4384: PUSH
4385: LD_EXP 29
4389: PUSH
4390: LD_EXP 30
4394: PUSH
4395: LD_EXP 31
4399: PUSH
4400: LD_EXP 32
4404: PUSH
4405: LD_EXP 33
4409: PUSH
4410: LD_EXP 34
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: ST_TO_ADDR
// for i = 1 to filter do
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: DOUBLE
4440: LD_INT 1
4442: DEC
4443: ST_TO_ADDR
4444: LD_VAR 0 3
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4475
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4452: LD_VAR 0 3
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: PPUSH
4463: LD_INT 6
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: CALL_OW 49
4473: GO 4449
4475: POP
4476: POP
// end ;
4477: LD_VAR 0 1
4481: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
// uc_side := 3 ;
4488: LD_ADDR_OWVAR 20
4492: PUSH
4493: LD_INT 3
4495: ST_TO_ADDR
// uc_nation := nation_russian ;
4496: LD_ADDR_OWVAR 21
4500: PUSH
4501: LD_INT 3
4503: ST_TO_ADDR
// hc_name :=  ;
4504: LD_ADDR_OWVAR 26
4508: PUSH
4509: LD_STRING 
4511: ST_TO_ADDR
// hc_gallery :=  ;
4512: LD_ADDR_OWVAR 33
4516: PUSH
4517: LD_STRING 
4519: ST_TO_ADDR
// for i = 1 to 8 do
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: DOUBLE
4526: LD_INT 1
4528: DEC
4529: ST_TO_ADDR
4530: LD_INT 8
4532: PUSH
4533: FOR_TO
4534: IFFALSE 4576
// begin PrepareSoldier ( 0 , game_eskill ) ;
4536: LD_INT 0
4538: PPUSH
4539: LD_EXP 39
4543: PPUSH
4544: CALL_OW 381
// un := CreateHuman ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: CALL_OW 44
4557: ST_TO_ADDR
// filter := filter ^ un ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: LD_VAR 0 3
4567: PUSH
4568: LD_VAR 0 4
4572: ADD
4573: ST_TO_ADDR
// end ;
4574: GO 4533
4576: POP
4577: POP
// for i = 1 to 4 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 4
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4634
// begin PrepareEngineer ( 0 , game_eskill ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_EXP 39
4601: PPUSH
4602: CALL_OW 382
// un := CreateHuman ;
4606: LD_ADDR_VAR 0 4
4610: PUSH
4611: CALL_OW 44
4615: ST_TO_ADDR
// filter := filter ^ un ;
4616: LD_ADDR_VAR 0 3
4620: PUSH
4621: LD_VAR 0 3
4625: PUSH
4626: LD_VAR 0 4
4630: ADD
4631: ST_TO_ADDR
// end ;
4632: GO 4591
4634: POP
4635: POP
// for i = 1 to 6 do
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: DOUBLE
4642: LD_INT 1
4644: DEC
4645: ST_TO_ADDR
4646: LD_INT 6
4648: PUSH
4649: FOR_TO
4650: IFFALSE 4692
// begin PrepareMechanic ( 0 , game_eskill ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_EXP 39
4659: PPUSH
4660: CALL_OW 383
// un := CreateHuman ;
4664: LD_ADDR_VAR 0 4
4668: PUSH
4669: CALL_OW 44
4673: ST_TO_ADDR
// filter := filter ^ un ;
4674: LD_ADDR_VAR 0 3
4678: PUSH
4679: LD_VAR 0 3
4683: PUSH
4684: LD_VAR 0 4
4688: ADD
4689: ST_TO_ADDR
// end ;
4690: GO 4649
4692: POP
4693: POP
// for i = 1 to 4 do
4694: LD_ADDR_VAR 0 2
4698: PUSH
4699: DOUBLE
4700: LD_INT 1
4702: DEC
4703: ST_TO_ADDR
4704: LD_INT 4
4706: PUSH
4707: FOR_TO
4708: IFFALSE 4750
// begin PrepareScientist ( 0 , game_eskill ) ;
4710: LD_INT 0
4712: PPUSH
4713: LD_EXP 39
4717: PPUSH
4718: CALL_OW 384
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 4
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// filter := filter ^ un ;
4732: LD_ADDR_VAR 0 3
4736: PUSH
4737: LD_VAR 0 3
4741: PUSH
4742: LD_VAR 0 4
4746: ADD
4747: ST_TO_ADDR
// end ;
4748: GO 4707
4750: POP
4751: POP
// for i = 1 to filter do
4752: LD_ADDR_VAR 0 2
4756: PUSH
4757: DOUBLE
4758: LD_INT 1
4760: DEC
4761: ST_TO_ADDR
4762: LD_VAR 0 3
4766: PUSH
4767: FOR_TO
4768: IFFALSE 4793
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4770: LD_VAR 0 3
4774: PUSH
4775: LD_VAR 0 2
4779: ARRAY
4780: PPUSH
4781: LD_INT 6
4783: PPUSH
4784: LD_INT 0
4786: PPUSH
4787: CALL_OW 49
4791: GO 4767
4793: POP
4794: POP
// RU_SecondPersonnel := filter ;
4795: LD_ADDR_EXP 35
4799: PUSH
4800: LD_VAR 0 3
4804: ST_TO_ADDR
// end ;
4805: LD_VAR 0 1
4809: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4810: LD_INT 0
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
4817: PPUSH
4818: PPUSH
// uc_side := 1 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// uc_nation := nation_american ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4835: LD_ADDR_EXP 36
4839: PUSH
4840: LD_STRING JMM
4842: PPUSH
4843: CALL_OW 25
4847: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4848: LD_EXP 36
4852: PPUSH
4853: LD_INT 1
4855: PPUSH
4856: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4860: LD_EXP 36
4864: PPUSH
4865: LD_INT 7
4867: PPUSH
4868: LD_INT 0
4870: PPUSH
4871: CALL_OW 49
// mechs := [ ] ;
4875: LD_ADDR_VAR 0 7
4879: PUSH
4880: EMPTY
4881: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4882: LD_ADDR_VAR 0 2
4886: PUSH
4887: DOUBLE
4888: LD_INT 1
4890: DEC
4891: ST_TO_ADDR
4892: LD_INT 4
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_OWVAR 67
4910: ARRAY
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4974
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4915: LD_INT 0
4917: PPUSH
4918: LD_EXP 38
4922: PUSH
4923: LD_INT 1
4925: PLUS
4926: PPUSH
4927: CALL_OW 381
// un := CreateHuman ;
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: CALL_OW 44
4940: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: LD_VAR 0 3
4950: PUSH
4951: LD_VAR 0 4
4955: ADD
4956: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4957: LD_VAR 0 4
4961: PPUSH
4962: LD_INT 7
4964: PPUSH
4965: LD_INT 0
4967: PPUSH
4968: CALL_OW 49
// end ;
4972: GO 4912
4974: POP
4975: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4976: LD_ADDR_VAR 0 2
4980: PUSH
4981: DOUBLE
4982: LD_INT 1
4984: DEC
4985: ST_TO_ADDR
4986: LD_INT 7
4988: PUSH
4989: LD_INT 6
4991: PUSH
4992: LD_INT 4
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: LD_OWVAR 67
5004: ARRAY
5005: PUSH
5006: FOR_TO
5007: IFFALSE 5053
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5009: LD_INT 0
5011: PPUSH
5012: LD_EXP 38
5016: PUSH
5017: LD_INT 1
5019: PLUS
5020: PPUSH
5021: CALL_OW 383
// un := CreateHuman ;
5025: LD_ADDR_VAR 0 4
5029: PUSH
5030: CALL_OW 44
5034: ST_TO_ADDR
// mechs := mechs ^ un ;
5035: LD_ADDR_VAR 0 7
5039: PUSH
5040: LD_VAR 0 7
5044: PUSH
5045: LD_VAR 0 4
5049: ADD
5050: ST_TO_ADDR
// end ;
5051: GO 5006
5053: POP
5054: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5055: LD_INT 3
5057: PPUSH
5058: LD_INT 3
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: LD_INT 5
5066: PPUSH
5067: LD_INT 100
5069: PPUSH
5070: CALL 17834 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5074: LD_ADDR_VAR 0 2
5078: PUSH
5079: DOUBLE
5080: LD_INT 1
5082: DEC
5083: ST_TO_ADDR
5084: LD_INT 7
5086: PUSH
5087: LD_INT 6
5089: PUSH
5090: LD_INT 4
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_OWVAR 67
5102: ARRAY
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5200
// begin vehicle := CreateVehicle ;
5107: LD_ADDR_VAR 0 6
5111: PUSH
5112: CALL_OW 45
5116: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5117: LD_VAR 0 7
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: PPUSH
5126: LD_VAR 0 6
5130: PPUSH
5131: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5135: LD_ADDR_VAR 0 7
5139: PUSH
5140: LD_VAR 0 7
5144: PUSH
5145: LD_VAR 0 7
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: DIFF
5154: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5155: LD_VAR 0 6
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5167: LD_VAR 0 6
5171: PPUSH
5172: LD_INT 7
5174: PPUSH
5175: LD_INT 0
5177: PPUSH
5178: CALL_OW 49
// vehs := vehs ^ vehicle ;
5182: LD_ADDR_VAR 0 5
5186: PUSH
5187: LD_VAR 0 5
5191: PUSH
5192: LD_VAR 0 6
5196: ADD
5197: ST_TO_ADDR
// end ;
5198: GO 5104
5200: POP
5201: POP
// end ; end_of_file
5202: LD_VAR 0 1
5206: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5207: LD_INT 0
5209: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5210: LD_ADDR_OWVAR 67
5214: PUSH
5215: LD_INT 0
5217: PPUSH
5218: CALL_OW 426
5222: ST_TO_ADDR
// game_diff := Difficulty ;
5223: LD_ADDR_EXP 37
5227: PUSH
5228: LD_OWVAR 67
5232: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5233: LD_ADDR_EXP 38
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 6
5243: PUSH
5244: LD_INT 6
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_EXP 37
5256: ARRAY
5257: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5258: LD_ADDR_EXP 39
5262: PUSH
5263: LD_INT 6
5265: PUSH
5266: LD_INT 7
5268: PUSH
5269: LD_INT 8
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: LIST
5276: PUSH
5277: LD_EXP 37
5281: ARRAY
5282: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5283: LD_ADDR_EXP 41
5287: PUSH
5288: LD_INT 6300
5290: PUSH
5291: LD_INT 5250
5293: PUSH
5294: LD_INT 4200
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_EXP 37
5306: ARRAY
5307: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5308: LD_ADDR_EXP 40
5312: PUSH
5313: LD_INT 73500
5315: PUSH
5316: LD_INT 94500
5318: PUSH
5319: LD_INT 115500
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: LD_EXP 37
5331: ARRAY
5332: ST_TO_ADDR
// end ; end_of_file
5333: LD_VAR 0 1
5337: RET
// export function CustomEvent ( event ) ; begin
5338: LD_INT 0
5340: PPUSH
// end ;
5341: LD_VAR 0 2
5345: RET
// export function CustomInitMacro ( ) ; begin
5346: LD_INT 0
5348: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 3
5354: PPUSH
5355: CALL 78696 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5359: LD_INT 1
5361: PPUSH
5362: LD_INT 4
5364: PPUSH
5365: CALL 78640 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 136
5374: PUSH
5375: LD_INT 130
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 145
5388: PUSH
5389: LD_INT 123
5391: PUSH
5392: LD_INT 0
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PPUSH
5404: CALL 77699 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5408: LD_INT 1
5410: PPUSH
5411: LD_INT 43
5413: PUSH
5414: LD_INT 46
5416: PUSH
5417: LD_INT 45
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 78528 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 3
5434: PPUSH
5435: CALL 78210 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5439: LD_INT 1
5441: PPUSH
5442: LD_INT 3
5444: PPUSH
5445: CALL 77941 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 8
5454: PPUSH
5455: CALL 77560 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5459: LD_INT 1
5461: PPUSH
5462: LD_INT 22
5464: PUSH
5465: LD_INT 1
5467: PUSH
5468: LD_INT 3
5470: PUSH
5471: LD_INT 43
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_INT 1
5485: PUSH
5486: LD_INT 3
5488: PUSH
5489: LD_INT 44
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 22
5500: PUSH
5501: LD_INT 1
5503: PUSH
5504: LD_INT 3
5506: PUSH
5507: LD_INT 45
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 1
5521: PUSH
5522: LD_INT 3
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 1
5539: PUSH
5540: LD_INT 3
5542: PUSH
5543: LD_INT 43
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 24
5554: PUSH
5555: LD_INT 1
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: LD_INT 46
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_INT 1
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: LD_INT 43
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: PUSH
5588: LD_INT 22
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: LD_INT 3
5596: PUSH
5597: LD_INT 44
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: PPUSH
5616: CALL 77375 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 0
5625: PUSH
5626: LD_INT 127
5628: PUSH
5629: LD_INT 125
5631: PUSH
5632: LD_INT 5
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 6
5643: PUSH
5644: LD_INT 124
5646: PUSH
5647: LD_INT 132
5649: PUSH
5650: LD_INT 0
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 29
5661: PUSH
5662: LD_INT 136
5664: PUSH
5665: LD_INT 130
5667: PUSH
5668: LD_INT 1
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 4
5679: PUSH
5680: LD_INT 118
5682: PUSH
5683: LD_INT 114
5685: PUSH
5686: LD_INT 2
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 29
5697: PUSH
5698: LD_INT 145
5700: PUSH
5701: LD_INT 123
5703: PUSH
5704: LD_INT 1
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: LD_INT 150
5718: PUSH
5719: LD_INT 135
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 26
5733: PUSH
5734: LD_INT 140
5736: PUSH
5737: LD_INT 134
5739: PUSH
5740: LD_INT 2
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 26
5751: PUSH
5752: LD_INT 137
5754: PUSH
5755: LD_INT 121
5757: PUSH
5758: LD_INT 5
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: LD_INT 155
5772: PUSH
5773: LD_INT 130
5775: PUSH
5776: LD_INT 0
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 32
5787: PUSH
5788: LD_INT 155
5790: PUSH
5791: LD_INT 130
5793: PUSH
5794: LD_INT 0
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 32
5805: PUSH
5806: LD_INT 130
5808: PUSH
5809: LD_INT 114
5811: PUSH
5812: LD_INT 3
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 32
5823: PUSH
5824: LD_INT 142
5826: PUSH
5827: LD_INT 115
5829: PUSH
5830: LD_INT 3
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 32
5841: PUSH
5842: LD_INT 153
5844: PUSH
5845: LD_INT 120
5847: PUSH
5848: LD_INT 3
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL 77267 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5876: LD_INT 1
5878: PPUSH
5879: LD_INT 10
5881: PUSH
5882: LD_INT 12
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PPUSH
5889: CALL 78117 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5893: LD_INT 1
5895: PPUSH
5896: LD_INT 155
5898: PPUSH
5899: LD_INT 130
5901: PPUSH
5902: LD_INT 0
5904: PPUSH
5905: LD_INT 24
5907: PUSH
5908: LD_INT 16
5910: PUSH
5911: LD_INT 17
5913: PUSH
5914: LD_INT 18
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL 78322 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5931: LD_INT 2
5933: PPUSH
5934: LD_INT 3
5936: PPUSH
5937: CALL 78696 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5941: LD_INT 2
5943: PPUSH
5944: LD_INT 4
5946: PPUSH
5947: CALL 78640 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5951: LD_INT 2
5953: PPUSH
5954: LD_INT 84
5956: PUSH
5957: LD_INT 125
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: EMPTY
5969: LIST
5970: PPUSH
5971: CALL 77699 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5975: LD_INT 2
5977: PPUSH
5978: LD_INT 43
5980: PUSH
5981: LD_INT 46
5983: PUSH
5984: LD_INT 45
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL 78528 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 3
6001: PPUSH
6002: CALL 78210 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6006: LD_INT 2
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: CALL 77941 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6016: LD_INT 2
6018: PPUSH
6019: LD_INT 8
6021: PPUSH
6022: CALL 77560 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6026: LD_INT 2
6028: PPUSH
6029: LD_INT 22
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: LD_INT 3
6037: PUSH
6038: LD_INT 43
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 22
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 44
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 3
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 45
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 24
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 43
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 24
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 46
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 3
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 43
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 22
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 44
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL 77375 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6187: LD_INT 2
6189: PPUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 96
6195: PUSH
6196: LD_INT 125
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 6
6210: PUSH
6211: LD_INT 74
6213: PUSH
6214: LD_INT 122
6216: PUSH
6217: LD_INT 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 30
6228: PUSH
6229: LD_INT 84
6231: PUSH
6232: LD_INT 125
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 28
6246: PUSH
6247: LD_INT 86
6249: PUSH
6250: LD_INT 128
6252: PUSH
6253: LD_INT 1
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 28
6264: PUSH
6265: LD_INT 85
6267: PUSH
6268: LD_INT 130
6270: PUSH
6271: LD_INT 2
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 28
6282: PUSH
6283: LD_INT 88
6285: PUSH
6286: LD_INT 132
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 106
6303: PUSH
6304: LD_INT 130
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 4
6318: PUSH
6319: LD_INT 99
6321: PUSH
6322: LD_INT 114
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 32
6336: PUSH
6337: LD_INT 72
6339: PUSH
6340: LD_INT 112
6342: PUSH
6343: LD_INT 2
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 32
6354: PUSH
6355: LD_INT 78
6357: PUSH
6358: LD_INT 110
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 32
6372: PUSH
6373: LD_INT 84
6375: PUSH
6376: LD_INT 110
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 32
6390: PUSH
6391: LD_INT 105
6393: PUSH
6394: LD_INT 117
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL 77267 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6424: LD_INT 2
6426: PPUSH
6427: LD_INT 14
6429: PUSH
6430: LD_INT 11
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL 78117 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6441: LD_INT 2
6443: PPUSH
6444: LD_INT 106
6446: PPUSH
6447: LD_INT 130
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: LD_INT 24
6455: PUSH
6456: LD_INT 16
6458: PUSH
6459: LD_INT 17
6461: PUSH
6462: LD_INT 18
6464: PUSH
6465: LD_INT 21
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL 78322 0 5
// end ;
6479: LD_VAR 0 1
6483: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6484: LD_INT 22
6486: PUSH
6487: LD_INT 3
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 30
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 69
6512: IFFALSE 7368
6514: GO 6516
6516: DISABLE
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6525: LD_INT 6300
6527: PUSH
6528: LD_INT 4200
6530: PUSH
6531: LD_INT 2100
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// base := 2 ;
6549: LD_ADDR_VAR 0 2
6553: PUSH
6554: LD_INT 2
6556: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6557: LD_INT 22
6559: PUSH
6560: LD_INT 3
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 3
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 69
6585: NOT
6586: IFFALSE 6590
// continue ;
6588: GO 6525
// case Rand ( 1 , 3 ) of 1 :
6590: LD_INT 1
6592: PPUSH
6593: LD_INT 3
6595: PPUSH
6596: CALL_OW 12
6600: PUSH
6601: LD_INT 1
6603: DOUBLE
6604: EQUAL
6605: IFTRUE 6609
6607: GO 6785
6609: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6610: LD_ADDR_VAR 0 3
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 43
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 24
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 46
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 24
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 43
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 24
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 46
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 45
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 43
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 24
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 46
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 22
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 45
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PPUSH
6779: CALL 77423 0 2
// end ; 2 :
6783: GO 7116
6785: LD_INT 2
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 6931
6793: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6794: LD_ADDR_VAR 0 3
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: LD_INT 3
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 43
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 24
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 46
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 24
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 43
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 24
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 46
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 45
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 22
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 45
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6915: LD_VAR 0 2
6919: PPUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: CALL 77423 0 2
// end ; 3 :
6929: GO 7116
6931: LD_INT 3
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 7115
6939: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: LD_INT 3
6953: PUSH
6954: LD_INT 43
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 24
6965: PUSH
6966: LD_INT 3
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 46
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 43
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 24
7001: PUSH
7002: LD_INT 3
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 46
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_INT 3
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 45
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 3
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 43
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 24
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 46
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 45
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7099: LD_VAR 0 2
7103: PPUSH
7104: LD_VAR 0 3
7108: PPUSH
7109: CALL 77423 0 2
// end ; end ;
7113: GO 7116
7115: POP
// repeat wait ( 0 0$1 ) ;
7116: LD_INT 35
7118: PPUSH
7119: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7123: LD_VAR 0 2
7127: PPUSH
7128: CALL 77771 0 1
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7116
// wait ( 0 0$30 ) ;
7138: LD_INT 1050
7140: PPUSH
7141: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7145: LD_ADDR_VAR 0 5
7149: PUSH
7150: LD_INT 86
7152: PUSH
7153: LD_INT 77
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 63
7162: PUSH
7163: LD_INT 38
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7174: LD_ADDR_VAR 0 4
7178: PUSH
7179: LD_INT 0
7181: PUSH
7182: LD_INT 0
7184: PUSH
7185: LD_INT 0
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: LD_INT 0
7193: PUSH
7194: LD_INT 0
7196: PUSH
7197: LD_INT 0
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7221: LD_ADDR_VAR 0 6
7225: PUSH
7226: LD_EXP 71
7230: PUSH
7231: LD_VAR 0 2
7235: ARRAY
7236: PUSH
7237: LD_EXP 74
7241: PUSH
7242: LD_VAR 0 2
7246: ARRAY
7247: DIFF
7248: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7249: LD_ADDR_EXP 71
7253: PUSH
7254: LD_EXP 71
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: LD_EXP 71
7268: PUSH
7269: LD_VAR 0 2
7273: ARRAY
7274: PUSH
7275: LD_VAR 0 6
7279: DIFF
7280: PPUSH
7281: CALL_OW 1
7285: ST_TO_ADDR
// if not attackers then
7286: LD_VAR 0 6
7290: NOT
7291: IFFALSE 7295
// continue ;
7293: GO 6525
// repeat wait ( 0 0$1 ) ;
7295: LD_INT 35
7297: PPUSH
7298: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7302: LD_VAR 0 6
7306: PPUSH
7307: LD_INT 60
7309: PUSH
7310: EMPTY
7311: LIST
7312: PPUSH
7313: CALL_OW 72
7317: NOT
7318: IFFALSE 7295
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7320: LD_VAR 0 2
7324: PPUSH
7325: LD_VAR 0 6
7329: PPUSH
7330: LD_VAR 0 5
7334: PPUSH
7335: LD_VAR 0 4
7339: PPUSH
7340: CALL 77608 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7344: LD_EXP 52
7348: PUSH
7349: LD_VAR 0 2
7353: ARRAY
7354: PPUSH
7355: LD_INT 50
7357: PUSH
7358: EMPTY
7359: LIST
7360: PPUSH
7361: CALL_OW 72
7365: NOT
7366: IFFALSE 6525
// end ;
7368: PPOPN 6
7370: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7371: LD_INT 22
7373: PUSH
7374: LD_INT 3
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 30
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL_OW 69
7399: IFFALSE 8296
7401: GO 7403
7403: DISABLE
7404: LD_INT 0
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7412: LD_INT 6300
7414: PUSH
7415: LD_INT 4200
7417: PUSH
7418: LD_INT 2100
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: PUSH
7426: LD_OWVAR 67
7430: ARRAY
7431: PPUSH
7432: CALL_OW 67
// base := 1 ;
7436: LD_ADDR_VAR 0 2
7440: PUSH
7441: LD_INT 1
7443: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7444: LD_INT 22
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 30
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 69
7472: NOT
7473: IFFALSE 7477
// continue ;
7475: GO 7412
// case Rand ( 1 , 3 ) of 1 :
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 3
7482: PPUSH
7483: CALL_OW 12
7487: PUSH
7488: LD_INT 1
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7672
7496: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 43
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 24
7522: PUSH
7523: LD_INT 1
7525: PUSH
7526: LD_INT 3
7528: PUSH
7529: LD_INT 46
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 24
7540: PUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 3
7546: PUSH
7547: LD_INT 43
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 24
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: LD_INT 46
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 1
7579: PUSH
7580: LD_INT 3
7582: PUSH
7583: LD_INT 45
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 22
7594: PUSH
7595: LD_INT 1
7597: PUSH
7598: LD_INT 3
7600: PUSH
7601: LD_INT 43
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 24
7612: PUSH
7613: LD_INT 1
7615: PUSH
7616: LD_INT 3
7618: PUSH
7619: LD_INT 46
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: LD_INT 3
7636: PUSH
7637: LD_INT 45
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7656: LD_VAR 0 2
7660: PPUSH
7661: LD_VAR 0 3
7665: PPUSH
7666: CALL 77423 0 2
// end ; 2 :
7670: GO 8041
7672: LD_INT 2
7674: DOUBLE
7675: EQUAL
7676: IFTRUE 7680
7678: GO 7856
7680: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7681: LD_ADDR_VAR 0 3
7685: PUSH
7686: LD_INT 24
7688: PUSH
7689: LD_INT 1
7691: PUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 43
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 24
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: LD_INT 46
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 24
7724: PUSH
7725: LD_INT 1
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 43
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 24
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: LD_INT 3
7748: PUSH
7749: LD_INT 46
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 22
7760: PUSH
7761: LD_INT 1
7763: PUSH
7764: LD_INT 3
7766: PUSH
7767: LD_INT 45
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 22
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: LD_INT 3
7784: PUSH
7785: LD_INT 45
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 22
7796: PUSH
7797: LD_INT 1
7799: PUSH
7800: LD_INT 3
7802: PUSH
7803: LD_INT 45
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 22
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: LD_INT 45
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7840: LD_VAR 0 2
7844: PPUSH
7845: LD_VAR 0 3
7849: PPUSH
7850: CALL 77423 0 2
// end ; 3 :
7854: GO 8041
7856: LD_INT 3
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 8040
7864: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_INT 22
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: LD_INT 3
7878: PUSH
7879: LD_INT 43
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 24
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: LD_INT 46
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: LD_INT 3
7914: PUSH
7915: LD_INT 43
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 24
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: LD_INT 3
7932: PUSH
7933: LD_INT 46
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 22
7944: PUSH
7945: LD_INT 1
7947: PUSH
7948: LD_INT 3
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: LD_INT 43
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 24
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: LD_INT 3
7986: PUSH
7987: LD_INT 46
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 45
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8024: LD_VAR 0 2
8028: PPUSH
8029: LD_VAR 0 3
8033: PPUSH
8034: CALL 77423 0 2
// end ; end ;
8038: GO 8041
8040: POP
// repeat wait ( 0 0$1 ) ;
8041: LD_INT 35
8043: PPUSH
8044: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8048: LD_VAR 0 2
8052: PPUSH
8053: LD_INT 1
8055: PPUSH
8056: CALL 78841 0 2
8060: PUSH
8061: LD_INT 8
8063: GREATEREQUAL
8064: IFFALSE 8041
// wait ( 0 0$30 ) ;
8066: LD_INT 1050
8068: PPUSH
8069: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8073: LD_ADDR_VAR 0 5
8077: PUSH
8078: LD_INT 144
8080: PUSH
8081: LD_INT 65
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 63
8090: PUSH
8091: LD_INT 38
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8102: LD_ADDR_VAR 0 4
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: LD_INT 0
8112: PUSH
8113: LD_INT 0
8115: PUSH
8116: LD_INT 1
8118: PUSH
8119: LD_INT 0
8121: PUSH
8122: LD_INT 0
8124: PUSH
8125: LD_INT 0
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8149: LD_ADDR_VAR 0 6
8153: PUSH
8154: LD_EXP 71
8158: PUSH
8159: LD_VAR 0 2
8163: ARRAY
8164: PUSH
8165: LD_EXP 74
8169: PUSH
8170: LD_VAR 0 2
8174: ARRAY
8175: DIFF
8176: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8177: LD_ADDR_EXP 71
8181: PUSH
8182: LD_EXP 71
8186: PPUSH
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_EXP 71
8196: PUSH
8197: LD_VAR 0 2
8201: ARRAY
8202: PUSH
8203: LD_VAR 0 6
8207: DIFF
8208: PPUSH
8209: CALL_OW 1
8213: ST_TO_ADDR
// if not attackers then
8214: LD_VAR 0 6
8218: NOT
8219: IFFALSE 8223
// continue ;
8221: GO 7412
// repeat wait ( 0 0$1 ) ;
8223: LD_INT 35
8225: PPUSH
8226: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8230: LD_VAR 0 6
8234: PPUSH
8235: LD_INT 60
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: NOT
8246: IFFALSE 8223
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8248: LD_VAR 0 2
8252: PPUSH
8253: LD_VAR 0 6
8257: PPUSH
8258: LD_VAR 0 5
8262: PPUSH
8263: LD_VAR 0 4
8267: PPUSH
8268: CALL 77608 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8272: LD_EXP 52
8276: PUSH
8277: LD_VAR 0 2
8281: ARRAY
8282: PPUSH
8283: LD_INT 50
8285: PUSH
8286: EMPTY
8287: LIST
8288: PPUSH
8289: CALL_OW 72
8293: NOT
8294: IFFALSE 7412
// end ;
8296: PPOPN 6
8298: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8299: LD_EXP 3
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 21
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 69
8332: PUSH
8333: LD_INT 0
8335: EQUAL
8336: AND
8337: IFFALSE 8350
8339: GO 8341
8341: DISABLE
// begin RussiansDefeated := true ;
8342: LD_ADDR_EXP 42
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// end ;
8350: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8351: LD_EXP 3
8355: PUSH
8356: LD_EXP 5
8360: NOT
8361: AND
8362: IFFALSE 9335
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
8373: PPUSH
8374: PPUSH
8375: PPUSH
8376: PPUSH
8377: PPUSH
8378: PPUSH
8379: PPUSH
8380: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8381: LD_INT 10500
8383: PPUSH
8384: LD_INT 13650
8386: PPUSH
8387: CALL_OW 12
8391: PUSH
8392: LD_INT 9450
8394: PPUSH
8395: LD_INT 11550
8397: PPUSH
8398: CALL_OW 12
8402: PUSH
8403: LD_INT 8400
8405: PPUSH
8406: LD_INT 10500
8408: PPUSH
8409: CALL_OW 12
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: PUSH
8419: LD_OWVAR 67
8423: ARRAY
8424: PPUSH
8425: CALL_OW 67
// filter := [ ] ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: EMPTY
8435: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_INT 2
8443: PPUSH
8444: LD_INT 3
8446: PPUSH
8447: CALL_OW 12
8451: PUSH
8452: LD_INT 3
8454: PPUSH
8455: LD_INT 4
8457: PPUSH
8458: CALL_OW 12
8462: PUSH
8463: LD_INT 3
8465: PPUSH
8466: LD_INT 5
8468: PPUSH
8469: CALL_OW 12
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: LD_OWVAR 67
8483: ARRAY
8484: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8485: LD_ADDR_VAR 0 5
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: LD_INT 1
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 12
8503: PUSH
8504: LD_INT 2
8506: PPUSH
8507: LD_INT 3
8509: PPUSH
8510: CALL_OW 12
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: PUSH
8520: LD_OWVAR 67
8524: ARRAY
8525: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8526: LD_ADDR_VAR 0 6
8530: PUSH
8531: LD_INT 2
8533: PPUSH
8534: LD_INT 3
8536: PPUSH
8537: CALL_OW 12
8541: PUSH
8542: LD_INT 2
8544: PPUSH
8545: LD_INT 4
8547: PPUSH
8548: CALL_OW 12
8552: PUSH
8553: LD_INT 3
8555: PPUSH
8556: LD_INT 5
8558: PPUSH
8559: CALL_OW 12
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: LD_OWVAR 67
8573: ARRAY
8574: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8575: LD_ADDR_VAR 0 8
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: LD_INT 2
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: PUSH
8594: LD_OWVAR 67
8598: ARRAY
8599: ST_TO_ADDR
// uc_side := 3 ;
8600: LD_ADDR_OWVAR 20
8604: PUSH
8605: LD_INT 3
8607: ST_TO_ADDR
// uc_nation := nation_russian ;
8608: LD_ADDR_OWVAR 21
8612: PUSH
8613: LD_INT 3
8615: ST_TO_ADDR
// for i = 1 to soldiers do
8616: LD_ADDR_VAR 0 1
8620: PUSH
8621: DOUBLE
8622: LD_INT 1
8624: DEC
8625: ST_TO_ADDR
8626: LD_VAR 0 4
8630: PUSH
8631: FOR_TO
8632: IFFALSE 8674
// begin PrepareSoldier ( 0 , game_eskill ) ;
8634: LD_INT 0
8636: PPUSH
8637: LD_EXP 39
8641: PPUSH
8642: CALL_OW 381
// un := CreateHuman ;
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: CALL_OW 44
8655: ST_TO_ADDR
// filter := filter ^ un ;
8656: LD_ADDR_VAR 0 3
8660: PUSH
8661: LD_VAR 0 3
8665: PUSH
8666: LD_VAR 0 2
8670: ADD
8671: ST_TO_ADDR
// end ;
8672: GO 8631
8674: POP
8675: POP
// for i = 1 to bazookas do
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: DOUBLE
8682: LD_INT 1
8684: DEC
8685: ST_TO_ADDR
8686: LD_VAR 0 5
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8742
// begin PrepareSoldier ( 0 , game_eskill ) ;
8694: LD_INT 0
8696: PPUSH
8697: LD_EXP 39
8701: PPUSH
8702: CALL_OW 381
// hc_class := class_bazooker ;
8706: LD_ADDR_OWVAR 28
8710: PUSH
8711: LD_INT 9
8713: ST_TO_ADDR
// un := CreateHuman ;
8714: LD_ADDR_VAR 0 2
8718: PUSH
8719: CALL_OW 44
8723: ST_TO_ADDR
// filter := filter ^ un ;
8724: LD_ADDR_VAR 0 3
8728: PUSH
8729: LD_VAR 0 3
8733: PUSH
8734: LD_VAR 0 2
8738: ADD
8739: ST_TO_ADDR
// end ;
8740: GO 8691
8742: POP
8743: POP
// for i = 1 to medics do
8744: LD_ADDR_VAR 0 1
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_VAR 0 8
8758: PUSH
8759: FOR_TO
8760: IFFALSE 8802
// begin PrepareScientist ( 0 , game_eskill ) ;
8762: LD_INT 0
8764: PPUSH
8765: LD_EXP 39
8769: PPUSH
8770: CALL_OW 384
// un := CreateHuman ;
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: CALL_OW 44
8783: ST_TO_ADDR
// filter := filter ^ un ;
8784: LD_ADDR_VAR 0 3
8788: PUSH
8789: LD_VAR 0 3
8793: PUSH
8794: LD_VAR 0 2
8798: ADD
8799: ST_TO_ADDR
// end ;
8800: GO 8759
8802: POP
8803: POP
// for i = 1 to vehs do
8804: LD_ADDR_VAR 0 1
8808: PUSH
8809: DOUBLE
8810: LD_INT 1
8812: DEC
8813: ST_TO_ADDR
8814: LD_VAR 0 6
8818: PUSH
8819: FOR_TO
8820: IFFALSE 9012
// begin case Rand ( 1 , 5 ) of 1 :
8822: LD_INT 1
8824: PPUSH
8825: LD_INT 5
8827: PPUSH
8828: CALL_OW 12
8832: PUSH
8833: LD_INT 1
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8863
8841: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8842: LD_INT 22
8844: PPUSH
8845: LD_INT 3
8847: PPUSH
8848: LD_INT 3
8850: PPUSH
8851: LD_INT 43
8853: PPUSH
8854: LD_INT 100
8856: PPUSH
8857: CALL 17834 0 5
8861: GO 8984
8863: LD_INT 2
8865: DOUBLE
8866: EQUAL
8867: IFTRUE 8871
8869: GO 8893
8871: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8872: LD_INT 22
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: LD_INT 3
8880: PPUSH
8881: LD_INT 44
8883: PPUSH
8884: LD_INT 100
8886: PPUSH
8887: CALL 17834 0 5
8891: GO 8984
8893: LD_INT 3
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8923
8901: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8902: LD_INT 22
8904: PPUSH
8905: LD_INT 3
8907: PPUSH
8908: LD_INT 3
8910: PPUSH
8911: LD_INT 45
8913: PPUSH
8914: LD_INT 100
8916: PPUSH
8917: CALL 17834 0 5
8921: GO 8984
8923: LD_INT 4
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 8953
8931: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8932: LD_INT 24
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_INT 3
8940: PPUSH
8941: LD_INT 43
8943: PPUSH
8944: LD_INT 100
8946: PPUSH
8947: CALL 17834 0 5
8951: GO 8984
8953: LD_INT 5
8955: DOUBLE
8956: EQUAL
8957: IFTRUE 8961
8959: GO 8983
8961: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8962: LD_INT 24
8964: PPUSH
8965: LD_INT 3
8967: PPUSH
8968: LD_INT 3
8970: PPUSH
8971: LD_INT 46
8973: PPUSH
8974: LD_INT 100
8976: PPUSH
8977: CALL 17834 0 5
8981: GO 8984
8983: POP
// vehicle := CreateVehicle ;
8984: LD_ADDR_VAR 0 7
8988: PUSH
8989: CALL_OW 45
8993: ST_TO_ADDR
// filter := filter ^ vehicle ;
8994: LD_ADDR_VAR 0 3
8998: PUSH
8999: LD_VAR 0 3
9003: PUSH
9004: LD_VAR 0 7
9008: ADD
9009: ST_TO_ADDR
// end ;
9010: GO 8819
9012: POP
9013: POP
// for i = 1 to filter do
9014: LD_ADDR_VAR 0 1
9018: PUSH
9019: DOUBLE
9020: LD_INT 1
9022: DEC
9023: ST_TO_ADDR
9024: LD_VAR 0 3
9028: PUSH
9029: FOR_TO
9030: IFFALSE 9055
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9032: LD_VAR 0 3
9036: PUSH
9037: LD_VAR 0 1
9041: ARRAY
9042: PPUSH
9043: LD_INT 14
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 49
9053: GO 9029
9055: POP
9056: POP
// case Rand ( 1 , 3 ) of 1 :
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 3
9062: PPUSH
9063: CALL_OW 12
9067: PUSH
9068: LD_INT 1
9070: DOUBLE
9071: EQUAL
9072: IFTRUE 9076
9074: GO 9130
9076: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9077: LD_ADDR_VAR 0 11
9081: PUSH
9082: LD_INT 165
9084: PUSH
9085: LD_INT 114
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 104
9094: PUSH
9095: LD_INT 108
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 86
9104: PUSH
9105: LD_INT 77
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 63
9114: PUSH
9115: LD_INT 38
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: ST_TO_ADDR
9128: GO 9255
9130: LD_INT 2
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9192
9138: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9139: LD_ADDR_VAR 0 11
9143: PUSH
9144: LD_INT 165
9146: PUSH
9147: LD_INT 114
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 146
9156: PUSH
9157: LD_INT 71
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 112
9166: PUSH
9167: LD_INT 41
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 63
9176: PUSH
9177: LD_INT 38
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
9190: GO 9255
9192: LD_INT 3
9194: DOUBLE
9195: EQUAL
9196: IFTRUE 9200
9198: GO 9254
9200: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9201: LD_ADDR_VAR 0 11
9205: PUSH
9206: LD_INT 165
9208: PUSH
9209: LD_INT 114
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 63
9218: PUSH
9219: LD_INT 99
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 55
9228: PUSH
9229: LD_INT 77
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 63
9238: PUSH
9239: LD_INT 38
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 9255
9254: POP
// attackers := filter ;
9255: LD_ADDR_VAR 0 10
9259: PUSH
9260: LD_VAR 0 3
9264: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9265: LD_ADDR_VAR 0 12
9269: PUSH
9270: LD_INT 0
9272: PUSH
9273: LD_INT 1
9275: PUSH
9276: LD_INT 0
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: LD_INT 0
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9312: LD_INT 1
9314: PPUSH
9315: LD_VAR 0 10
9319: PPUSH
9320: LD_VAR 0 11
9324: PPUSH
9325: LD_VAR 0 12
9329: PPUSH
9330: CALL 77608 0 4
// enable ;
9334: ENABLE
// end ;
9335: PPOPN 12
9337: END
// every 0 0$1 do var i , tmp ;
9338: GO 9340
9340: DISABLE
9341: LD_INT 0
9343: PPUSH
9344: PPUSH
// begin enable ;
9345: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 22
9356: PUSH
9357: LD_INT 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 32
9370: PUSH
9371: LD_INT 1
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 69
9386: ST_TO_ADDR
// if tmp then
9387: LD_VAR 0 2
9391: IFFALSE 9437
// for i in tmp do
9393: LD_ADDR_VAR 0 1
9397: PUSH
9398: LD_VAR 0 2
9402: PUSH
9403: FOR_IN
9404: IFFALSE 9435
// if GetFuel ( i ) < 3 then
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 261
9415: PUSH
9416: LD_INT 3
9418: LESS
9419: IFFALSE 9433
// SetFuel ( i , 3 ) ;
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_INT 3
9428: PPUSH
9429: CALL_OW 240
9433: GO 9403
9435: POP
9436: POP
// end ;
9437: PPOPN 2
9439: END
// every 0 0$3 trigger FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) or FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) do var i , veh , tmp ;
9440: LD_INT 3
9442: PPUSH
9443: LD_INT 22
9445: PUSH
9446: LD_INT 1
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 70
9457: PUSH
9458: LD_INT 10
9460: PPUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PPUSH
9471: CALL_OW 70
9475: OR
9476: IFFALSE 9742
9478: GO 9480
9480: DISABLE
9481: LD_INT 0
9483: PPUSH
9484: PPUSH
9485: PPUSH
// begin tmp := [ ] ;
9486: LD_ADDR_VAR 0 3
9490: PUSH
9491: EMPTY
9492: ST_TO_ADDR
// for i := 1 to 12 do
9493: LD_ADDR_VAR 0 1
9497: PUSH
9498: DOUBLE
9499: LD_INT 1
9501: DEC
9502: ST_TO_ADDR
9503: LD_INT 12
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9646
// begin uc_side := 3 ;
9509: LD_ADDR_OWVAR 20
9513: PUSH
9514: LD_INT 3
9516: ST_TO_ADDR
// uc_nation := 3 ;
9517: LD_ADDR_OWVAR 21
9521: PUSH
9522: LD_INT 3
9524: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9525: LD_INT 23
9527: PPUSH
9528: LD_INT 3
9530: PPUSH
9531: LD_INT 3
9533: PPUSH
9534: LD_INT 46
9536: PUSH
9537: LD_INT 43
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 1
9546: PPUSH
9547: LD_INT 2
9549: PPUSH
9550: CALL_OW 12
9554: ARRAY
9555: PPUSH
9556: LD_INT 100
9558: PPUSH
9559: CALL 17834 0 5
// veh := CreateVehicle ;
9563: LD_ADDR_VAR 0 2
9567: PUSH
9568: CALL_OW 45
9572: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9573: LD_VAR 0 2
9577: PPUSH
9578: LD_INT 5
9580: PPUSH
9581: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_INT 199
9592: PPUSH
9593: LD_INT 135
9595: PPUSH
9596: LD_INT 3
9598: PPUSH
9599: LD_INT 0
9601: PPUSH
9602: CALL_OW 50
// tmp := tmp ^ veh ;
9606: LD_ADDR_VAR 0 3
9610: PUSH
9611: LD_VAR 0 3
9615: PUSH
9616: LD_VAR 0 2
9620: ADD
9621: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9622: LD_VAR 0 2
9626: PPUSH
9627: LD_INT 173
9629: PPUSH
9630: LD_INT 118
9632: PPUSH
9633: CALL_OW 111
// wait ( 0 0$2 ) ;
9637: LD_INT 70
9639: PPUSH
9640: CALL_OW 67
// end ;
9644: GO 9506
9646: POP
9647: POP
// repeat wait ( 0 0$1 ) ;
9648: LD_INT 35
9650: PPUSH
9651: CALL_OW 67
// for i in tmp do
9655: LD_ADDR_VAR 0 1
9659: PUSH
9660: LD_VAR 0 3
9664: PUSH
9665: FOR_IN
9666: IFFALSE 9733
// if IsDead ( i ) then
9668: LD_VAR 0 1
9672: PPUSH
9673: CALL_OW 301
9677: IFFALSE 9697
// tmp := tmp diff i else
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 3
9688: PUSH
9689: LD_VAR 0 1
9693: DIFF
9694: ST_TO_ADDR
9695: GO 9731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9697: LD_VAR 0 1
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PPUSH
9717: LD_VAR 0 1
9721: PPUSH
9722: CALL_OW 74
9726: PPUSH
9727: CALL_OW 115
9731: GO 9665
9733: POP
9734: POP
// until not tmp ;
9735: LD_VAR 0 3
9739: NOT
9740: IFFALSE 9648
// end ; end_of_file
9742: PPOPN 3
9744: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9745: LD_VAR 0 1
9749: PUSH
9750: LD_EXP 8
9754: EQUAL
9755: IFFALSE 9771
// begin wait ( 0 0$1 ) ;
9757: LD_INT 35
9759: PPUSH
9760: CALL_OW 67
// YouLost ( Brighton ) ;
9764: LD_STRING Brighton
9766: PPUSH
9767: CALL_OW 104
// end ; if un = JMM then
9771: LD_VAR 0 1
9775: PUSH
9776: LD_EXP 36
9780: EQUAL
9781: IFFALSE 9797
// begin wait ( 0 0$1 ) ;
9783: LD_INT 35
9785: PPUSH
9786: CALL_OW 67
// YouLost ( JMM ) ;
9790: LD_STRING JMM
9792: PPUSH
9793: CALL_OW 104
// end ; if un = Megan then
9797: LD_VAR 0 1
9801: PUSH
9802: LD_EXP 10
9806: EQUAL
9807: IFFALSE 9821
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9809: LD_EXP 8
9813: PPUSH
9814: LD_STRING DBrighton-MeganDeath
9816: PPUSH
9817: CALL_OW 88
// end ; if un = Palmer then
9821: LD_VAR 0 1
9825: PUSH
9826: LD_EXP 9
9830: EQUAL
9831: IFFALSE 9845
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9833: LD_EXP 8
9837: PPUSH
9838: LD_STRING DBrighton-PalmerDeath
9840: PPUSH
9841: CALL_OW 88
// end ; if un = Burlak then
9845: LD_VAR 0 1
9849: PUSH
9850: LD_EXP 18
9854: EQUAL
9855: IFFALSE 9887
// begin if JMM_Arrived then
9857: LD_EXP 5
9861: IFFALSE 9875
// Say ( JMM , DJMM-BurlakDead ) ;
9863: LD_EXP 36
9867: PPUSH
9868: LD_STRING DJMM-BurlakDead
9870: PPUSH
9871: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9875: LD_EXP 9
9879: PPUSH
9880: LD_STRING DSol-BurlakDead
9882: PPUSH
9883: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9887: LD_VAR 0 1
9891: PUSH
9892: LD_INT 1
9894: EQUAL
9895: PUSH
9896: LD_VAR 0 1
9900: PUSH
9901: LD_INT 3
9903: EQUAL
9904: OR
9905: IFFALSE 9921
// begin wait ( 0 0$1 ) ;
9907: LD_INT 35
9909: PPUSH
9910: CALL_OW 67
// YouLost ( Depot ) ;
9914: LD_STRING Depot
9916: PPUSH
9917: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9921: LD_VAR 0 1
9925: PPUSH
9926: CALL_OW 255
9930: PUSH
9931: LD_INT 1
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 1
9939: PPUSH
9940: CALL_OW 247
9944: PUSH
9945: LD_INT 1
9947: EQUAL
9948: AND
9949: IFFALSE 9965
// Losses := Losses + 1 ;
9951: LD_ADDR_EXP 43
9955: PUSH
9956: LD_EXP 43
9960: PUSH
9961: LD_INT 1
9963: PLUS
9964: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9965: LD_VAR 0 1
9969: PPUSH
9970: CALL 80815 0 1
// end ;
9974: PPOPN 1
9976: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9977: LD_VAR 0 1
9981: PUSH
9982: LD_EXP 12
9986: EQUAL
9987: IFFALSE 10001
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9989: LD_EXP 12
9993: PPUSH
9994: LD_STRING DDeath-Yas-3
9996: PPUSH
9997: CALL_OW 91
// if un = Popov then
10001: LD_VAR 0 1
10005: PUSH
10006: LD_EXP 13
10010: EQUAL
10011: IFFALSE 10025
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10013: LD_EXP 13
10017: PPUSH
10018: LD_STRING DDeath-Pop-3
10020: PPUSH
10021: CALL_OW 91
// if un = Gaydar then
10025: LD_VAR 0 1
10029: PUSH
10030: LD_EXP 14
10034: EQUAL
10035: IFFALSE 10049
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10037: LD_EXP 14
10041: PPUSH
10042: LD_STRING DDeath-Gay-3
10044: PPUSH
10045: CALL_OW 91
// if un = Sevi then
10049: LD_VAR 0 1
10053: PUSH
10054: LD_EXP 15
10058: EQUAL
10059: IFFALSE 10073
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10061: LD_EXP 15
10065: PPUSH
10066: LD_STRING DDeath-Vse-3
10068: PPUSH
10069: CALL_OW 91
// end ;
10073: PPOPN 1
10075: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10076: LD_VAR 0 1
10080: PUSH
10081: LD_INT 10
10083: EQUAL
10084: IFFALSE 10122
// begin Say ( Brighton , DBrighton-C1 ) ;
10086: LD_EXP 8
10090: PPUSH
10091: LD_STRING DBrighton-C1
10093: PPUSH
10094: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10098: LD_EXP 10
10102: PPUSH
10103: LD_STRING DMegan-C1
10105: PPUSH
10106: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10110: LD_EXP 8
10114: PPUSH
10115: LD_STRING DBrighton-C2
10117: PPUSH
10118: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10122: LD_VAR 0 1
10126: PPUSH
10127: LD_VAR 0 2
10131: PPUSH
10132: CALL 80511 0 2
// end ;
10136: PPOPN 2
10138: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10139: LD_VAR 0 1
10143: PPUSH
10144: LD_VAR 0 2
10148: PPUSH
10149: CALL 82927 0 2
// end ;
10153: PPOPN 2
10155: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10156: LD_VAR 0 1
10160: PPUSH
10161: CALL 81995 0 1
// end ;
10165: PPOPN 1
10167: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 266
10177: PUSH
10178: LD_INT 0
10180: EQUAL
10181: PUSH
10182: LD_VAR 0 1
10186: PPUSH
10187: CALL_OW 255
10191: PUSH
10192: LD_INT 3
10194: EQUAL
10195: AND
10196: IFFALSE 10258
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 274
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: LD_INT 10000
10213: PPUSH
10214: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10218: LD_VAR 0 1
10222: PPUSH
10223: CALL_OW 274
10227: PPUSH
10228: LD_INT 2
10230: PPUSH
10231: LD_INT 250
10233: PPUSH
10234: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10238: LD_VAR 0 1
10242: PPUSH
10243: CALL_OW 274
10247: PPUSH
10248: LD_INT 3
10250: PPUSH
10251: LD_INT 100
10253: PPUSH
10254: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL 82236 0 1
// end ;
10267: PPOPN 1
10269: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_VAR 0 4
10289: PPUSH
10290: LD_VAR 0 5
10294: PPUSH
10295: CALL 80131 0 5
// end ;
10299: PPOPN 5
10301: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_VAR 0 2
10311: PPUSH
10312: CALL 79727 0 2
// end ;
10316: PPOPN 2
10318: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10319: LD_VAR 0 1
10323: PPUSH
10324: LD_VAR 0 2
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL 79565 0 4
// end ;
10343: PPOPN 4
10345: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10346: LD_VAR 0 1
10350: PPUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: LD_VAR 0 3
10360: PPUSH
10361: CALL 79340 0 3
// end ;
10365: PPOPN 3
10367: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10368: LD_VAR 0 1
10372: PPUSH
10373: LD_VAR 0 2
10377: PPUSH
10378: CALL 79225 0 2
// end ;
10382: PPOPN 2
10384: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_VAR 0 2
10394: PPUSH
10395: CALL 83188 0 2
// end ;
10399: PPOPN 2
10401: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 255
10411: PUSH
10412: LD_INT 6
10414: EQUAL
10415: IFFALSE 10545
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10417: LD_VAR 0 1
10421: PUSH
10422: LD_EXP 12
10426: PUSH
10427: LD_EXP 15
10431: PUSH
10432: LD_EXP 14
10436: PUSH
10437: LD_EXP 13
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: IN
10448: IFFALSE 10452
// exit ;
10450: GO 10569
// if AssaultStarted then
10452: LD_EXP 7
10456: IFFALSE 10530
// case Rand ( 1 , 4 ) of 1 .. 3 :
10458: LD_INT 1
10460: PPUSH
10461: LD_INT 4
10463: PPUSH
10464: CALL_OW 12
10468: PUSH
10469: LD_INT 1
10471: DOUBLE
10472: GREATEREQUAL
10473: IFFALSE 10481
10475: LD_INT 3
10477: DOUBLE
10478: LESSEQUAL
10479: IFTRUE 10483
10481: GO 10501
10483: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_INT 67
10491: PPUSH
10492: LD_INT 37
10494: PPUSH
10495: CALL_OW 114
10499: GO 10528
10501: LD_INT 4
10503: DOUBLE
10504: EQUAL
10505: IFTRUE 10509
10507: GO 10527
10509: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_INT 120
10517: PPUSH
10518: LD_INT 131
10520: PPUSH
10521: CALL_OW 111
10525: GO 10528
10527: POP
10528: GO 10545
// ComMoveXY ( driver , 120 , 131 ) ;
10530: LD_VAR 0 1
10534: PPUSH
10535: LD_INT 120
10537: PPUSH
10538: LD_INT 131
10540: PPUSH
10541: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_VAR 0 4
10564: PPUSH
10565: CALL 83404 0 4
// end ;
10569: PPOPN 4
10571: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10572: LD_VAR 0 1
10576: PPUSH
10577: LD_VAR 0 2
10581: PPUSH
10582: CALL 79034 0 2
// end ;
10586: PPOPN 2
10588: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: CALL 83643 0 1
// end ; end_of_file
10598: PPOPN 1
10600: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10601: LD_EXP 5
10605: PUSH
10606: LD_EXP 42
10610: AND
10611: IFFALSE 10792
10613: GO 10615
10615: DISABLE
// begin wait ( 0 0$2 ) ;
10616: LD_INT 70
10618: PPUSH
10619: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10623: LD_EXP 8
10627: PPUSH
10628: LD_STRING DBrighton-G1
10630: PPUSH
10631: CALL_OW 88
// if Losses < 1 then
10635: LD_EXP 43
10639: PUSH
10640: LD_INT 1
10642: LESS
10643: IFFALSE 10657
// AddMedal ( Losses , 1 ) else
10645: LD_STRING Losses
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 101
10655: GO 10690
// if Losses < 5 then
10657: LD_EXP 43
10661: PUSH
10662: LD_INT 5
10664: LESS
10665: IFFALSE 10679
// AddMedal ( Losses , 2 ) else
10667: LD_STRING Losses
10669: PPUSH
10670: LD_INT 2
10672: PPUSH
10673: CALL_OW 101
10677: GO 10690
// AddMedal ( Losses , - 1 ) ;
10679: LD_STRING Losses
10681: PPUSH
10682: LD_INT 1
10684: NEG
10685: PPUSH
10686: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10690: LD_EXP 6
10694: PUSH
10695: LD_INT 10
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 321
10705: PUSH
10706: LD_INT 2
10708: EQUAL
10709: AND
10710: IFFALSE 10724
// AddMedal ( Laser , 1 ) else
10712: LD_STRING Laser
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 101
10722: GO 10771
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10724: LD_EXP 6
10728: NOT
10729: PUSH
10730: LD_INT 10
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 321
10740: PUSH
10741: LD_INT 2
10743: EQUAL
10744: AND
10745: IFFALSE 10760
// AddMedal ( Laser , - 1 ) else
10747: LD_STRING Laser
10749: PPUSH
10750: LD_INT 1
10752: NEG
10753: PPUSH
10754: CALL_OW 101
10758: GO 10771
// AddMedal ( Laser , - 2 ) ;
10760: LD_STRING Laser
10762: PPUSH
10763: LD_INT 2
10765: NEG
10766: PPUSH
10767: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
10771: LD_STRING med3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10781: LD_STRING BaseMain
10783: PPUSH
10784: CALL_OW 102
// YouWin ;
10788: CALL_OW 103
// end ; end_of_file
10792: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10793: LD_INT 0
10795: PPUSH
10796: PPUSH
// area = ListEnvironmentArea ( area ) ;
10797: LD_ADDR_VAR 0 2
10801: PUSH
10802: LD_VAR 0 2
10806: PPUSH
10807: CALL_OW 353
10811: ST_TO_ADDR
// if bulldozer > 0 then
10812: LD_VAR 0 1
10816: PUSH
10817: LD_INT 0
10819: GREATER
10820: IFFALSE 10931
// for i = area downto 1 do
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: DOUBLE
10828: LD_VAR 0 2
10832: INC
10833: ST_TO_ADDR
10834: LD_INT 1
10836: PUSH
10837: FOR_DOWNTO
10838: IFFALSE 10929
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10840: LD_VAR 0 2
10844: PUSH
10845: LD_VAR 0 4
10849: ARRAY
10850: PUSH
10851: LD_INT 1
10853: ARRAY
10854: PPUSH
10855: LD_VAR 0 2
10859: PUSH
10860: LD_VAR 0 4
10864: ARRAY
10865: PUSH
10866: LD_INT 2
10868: ARRAY
10869: PPUSH
10870: CALL_OW 351
10874: IFFALSE 10927
// if not HasTask ( bulldozer ) then
10876: LD_VAR 0 1
10880: PPUSH
10881: CALL_OW 314
10885: NOT
10886: IFFALSE 10927
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_VAR 0 2
10897: PUSH
10898: LD_VAR 0 4
10902: ARRAY
10903: PUSH
10904: LD_INT 1
10906: ARRAY
10907: PPUSH
10908: LD_VAR 0 2
10912: PUSH
10913: LD_VAR 0 4
10917: ARRAY
10918: PUSH
10919: LD_INT 2
10921: ARRAY
10922: PPUSH
10923: CALL_OW 171
10927: GO 10837
10929: POP
10930: POP
// end ;
10931: LD_VAR 0 3
10935: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10936: LD_INT 0
10938: PPUSH
10939: PPUSH
10940: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10941: LD_ADDR_VAR 0 5
10945: PUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 517
10958: ST_TO_ADDR
// for i = 1 to team do
10959: LD_ADDR_VAR 0 4
10963: PUSH
10964: DOUBLE
10965: LD_INT 1
10967: DEC
10968: ST_TO_ADDR
10969: LD_VAR 0 1
10973: PUSH
10974: FOR_TO
10975: IFFALSE 11076
// begin if IsInUnit ( team [ i ] ) then
10977: LD_VAR 0 1
10981: PUSH
10982: LD_VAR 0 4
10986: ARRAY
10987: PPUSH
10988: CALL_OW 310
10992: IFFALSE 11009
// ComExitBuilding ( team [ i ] ) ;
10994: LD_VAR 0 1
10998: PUSH
10999: LD_VAR 0 4
11003: ARRAY
11004: PPUSH
11005: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11009: LD_VAR 0 1
11013: PUSH
11014: LD_VAR 0 4
11018: ARRAY
11019: PPUSH
11020: LD_VAR 0 5
11024: PUSH
11025: LD_INT 1
11027: ARRAY
11028: PUSH
11029: LD_VAR 0 4
11033: ARRAY
11034: PPUSH
11035: LD_VAR 0 5
11039: PUSH
11040: LD_INT 2
11042: ARRAY
11043: PUSH
11044: LD_VAR 0 4
11048: ARRAY
11049: PPUSH
11050: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11054: LD_VAR 0 1
11058: PUSH
11059: LD_VAR 0 4
11063: ARRAY
11064: PPUSH
11065: LD_EXP 8
11069: PPUSH
11070: CALL_OW 179
// end ;
11074: GO 10974
11076: POP
11077: POP
// end ; end_of_file
11078: LD_VAR 0 3
11082: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
// if exist_mode then
11087: LD_VAR 0 2
11091: IFFALSE 11116
// unit := CreateCharacter ( prefix & ident ) else
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_VAR 0 3
11102: PUSH
11103: LD_VAR 0 1
11107: STR
11108: PPUSH
11109: CALL_OW 34
11113: ST_TO_ADDR
11114: GO 11131
// unit := NewCharacter ( ident ) ;
11116: LD_ADDR_VAR 0 5
11120: PUSH
11121: LD_VAR 0 1
11125: PPUSH
11126: CALL_OW 25
11130: ST_TO_ADDR
// result := unit ;
11131: LD_ADDR_VAR 0 4
11135: PUSH
11136: LD_VAR 0 5
11140: ST_TO_ADDR
// end ;
11141: LD_VAR 0 4
11145: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11146: LD_INT 0
11148: PPUSH
11149: PPUSH
// if not side or not nation then
11150: LD_VAR 0 1
11154: NOT
11155: PUSH
11156: LD_VAR 0 2
11160: NOT
11161: OR
11162: IFFALSE 11166
// exit ;
11164: GO 11810
// case nation of nation_american :
11166: LD_VAR 0 2
11170: PUSH
11171: LD_INT 1
11173: DOUBLE
11174: EQUAL
11175: IFTRUE 11179
11177: GO 11353
11179: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11180: LD_ADDR_VAR 0 4
11184: PUSH
11185: LD_INT 35
11187: PUSH
11188: LD_INT 45
11190: PUSH
11191: LD_INT 46
11193: PUSH
11194: LD_INT 47
11196: PUSH
11197: LD_INT 1
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 6
11205: PUSH
11206: LD_INT 15
11208: PUSH
11209: LD_INT 16
11211: PUSH
11212: LD_INT 7
11214: PUSH
11215: LD_INT 12
11217: PUSH
11218: LD_INT 13
11220: PUSH
11221: LD_INT 10
11223: PUSH
11224: LD_INT 14
11226: PUSH
11227: LD_INT 20
11229: PUSH
11230: LD_INT 21
11232: PUSH
11233: LD_INT 22
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 32
11241: PUSH
11242: LD_INT 27
11244: PUSH
11245: LD_INT 36
11247: PUSH
11248: LD_INT 69
11250: PUSH
11251: LD_INT 39
11253: PUSH
11254: LD_INT 34
11256: PUSH
11257: LD_INT 40
11259: PUSH
11260: LD_INT 48
11262: PUSH
11263: LD_INT 49
11265: PUSH
11266: LD_INT 50
11268: PUSH
11269: LD_INT 51
11271: PUSH
11272: LD_INT 52
11274: PUSH
11275: LD_INT 53
11277: PUSH
11278: LD_INT 54
11280: PUSH
11281: LD_INT 55
11283: PUSH
11284: LD_INT 56
11286: PUSH
11287: LD_INT 57
11289: PUSH
11290: LD_INT 58
11292: PUSH
11293: LD_INT 59
11295: PUSH
11296: LD_INT 60
11298: PUSH
11299: LD_INT 61
11301: PUSH
11302: LD_INT 62
11304: PUSH
11305: LD_INT 80
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: ST_TO_ADDR
11351: GO 11734
11353: LD_INT 2
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11543
11361: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
11362: LD_ADDR_VAR 0 4
11366: PUSH
11367: LD_INT 35
11369: PUSH
11370: LD_INT 45
11372: PUSH
11373: LD_INT 46
11375: PUSH
11376: LD_INT 47
11378: PUSH
11379: LD_INT 70
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: LD_INT 11
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: LD_INT 4
11393: PUSH
11394: LD_INT 5
11396: PUSH
11397: LD_INT 6
11399: PUSH
11400: LD_INT 15
11402: PUSH
11403: LD_INT 18
11405: PUSH
11406: LD_INT 7
11408: PUSH
11409: LD_INT 17
11411: PUSH
11412: LD_INT 8
11414: PUSH
11415: LD_INT 20
11417: PUSH
11418: LD_INT 21
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: LD_INT 72
11426: PUSH
11427: LD_INT 26
11429: PUSH
11430: LD_INT 69
11432: PUSH
11433: LD_INT 39
11435: PUSH
11436: LD_INT 40
11438: PUSH
11439: LD_INT 41
11441: PUSH
11442: LD_INT 42
11444: PUSH
11445: LD_INT 43
11447: PUSH
11448: LD_INT 48
11450: PUSH
11451: LD_INT 49
11453: PUSH
11454: LD_INT 50
11456: PUSH
11457: LD_INT 51
11459: PUSH
11460: LD_INT 52
11462: PUSH
11463: LD_INT 53
11465: PUSH
11466: LD_INT 54
11468: PUSH
11469: LD_INT 55
11471: PUSH
11472: LD_INT 56
11474: PUSH
11475: LD_INT 60
11477: PUSH
11478: LD_INT 61
11480: PUSH
11481: LD_INT 62
11483: PUSH
11484: LD_INT 66
11486: PUSH
11487: LD_INT 67
11489: PUSH
11490: LD_INT 68
11492: PUSH
11493: LD_INT 81
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 11734
11543: LD_INT 3
11545: DOUBLE
11546: EQUAL
11547: IFTRUE 11551
11549: GO 11733
11551: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11552: LD_ADDR_VAR 0 4
11556: PUSH
11557: LD_INT 46
11559: PUSH
11560: LD_INT 47
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: LD_INT 11
11571: PUSH
11572: LD_INT 9
11574: PUSH
11575: LD_INT 20
11577: PUSH
11578: LD_INT 19
11580: PUSH
11581: LD_INT 21
11583: PUSH
11584: LD_INT 24
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_INT 25
11592: PUSH
11593: LD_INT 28
11595: PUSH
11596: LD_INT 29
11598: PUSH
11599: LD_INT 30
11601: PUSH
11602: LD_INT 31
11604: PUSH
11605: LD_INT 37
11607: PUSH
11608: LD_INT 38
11610: PUSH
11611: LD_INT 32
11613: PUSH
11614: LD_INT 27
11616: PUSH
11617: LD_INT 33
11619: PUSH
11620: LD_INT 69
11622: PUSH
11623: LD_INT 39
11625: PUSH
11626: LD_INT 34
11628: PUSH
11629: LD_INT 40
11631: PUSH
11632: LD_INT 71
11634: PUSH
11635: LD_INT 23
11637: PUSH
11638: LD_INT 44
11640: PUSH
11641: LD_INT 48
11643: PUSH
11644: LD_INT 49
11646: PUSH
11647: LD_INT 50
11649: PUSH
11650: LD_INT 51
11652: PUSH
11653: LD_INT 52
11655: PUSH
11656: LD_INT 53
11658: PUSH
11659: LD_INT 54
11661: PUSH
11662: LD_INT 55
11664: PUSH
11665: LD_INT 56
11667: PUSH
11668: LD_INT 57
11670: PUSH
11671: LD_INT 58
11673: PUSH
11674: LD_INT 59
11676: PUSH
11677: LD_INT 63
11679: PUSH
11680: LD_INT 64
11682: PUSH
11683: LD_INT 65
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: ST_TO_ADDR
11731: GO 11734
11733: POP
// if state > - 1 and state < 3 then
11734: LD_VAR 0 3
11738: PUSH
11739: LD_INT 1
11741: NEG
11742: GREATER
11743: PUSH
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 3
11751: LESS
11752: AND
11753: IFFALSE 11810
// for i in result do
11755: LD_ADDR_VAR 0 5
11759: PUSH
11760: LD_VAR 0 4
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11808
// if GetTech ( i , side ) <> state then
11768: LD_VAR 0 5
11772: PPUSH
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 321
11782: PUSH
11783: LD_VAR 0 3
11787: NONEQUAL
11788: IFFALSE 11806
// result := result diff i ;
11790: LD_ADDR_VAR 0 4
11794: PUSH
11795: LD_VAR 0 4
11799: PUSH
11800: LD_VAR 0 5
11804: DIFF
11805: ST_TO_ADDR
11806: GO 11765
11808: POP
11809: POP
// end ;
11810: LD_VAR 0 4
11814: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
11819: PPUSH
// result := true ;
11820: LD_ADDR_VAR 0 3
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11828: LD_ADDR_VAR 0 5
11832: PUSH
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 480
11842: ST_TO_ADDR
// if not tmp then
11843: LD_VAR 0 5
11847: NOT
11848: IFFALSE 11852
// exit ;
11850: GO 11901
// for i in tmp do
11852: LD_ADDR_VAR 0 4
11856: PUSH
11857: LD_VAR 0 5
11861: PUSH
11862: FOR_IN
11863: IFFALSE 11899
// if GetTech ( i , side ) <> state_researched then
11865: LD_VAR 0 4
11869: PPUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 321
11879: PUSH
11880: LD_INT 2
11882: NONEQUAL
11883: IFFALSE 11897
// begin result := false ;
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// exit ;
11893: POP
11894: POP
11895: GO 11901
// end ;
11897: GO 11862
11899: POP
11900: POP
// end ;
11901: LD_VAR 0 3
11905: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11906: LD_INT 0
11908: PPUSH
11909: PPUSH
11910: PPUSH
11911: PPUSH
11912: PPUSH
11913: PPUSH
11914: PPUSH
11915: PPUSH
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11921: LD_VAR 0 1
11925: NOT
11926: PUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 257
11936: PUSH
11937: LD_INT 9
11939: NONEQUAL
11940: OR
11941: IFFALSE 11945
// exit ;
11943: GO 12518
// side := GetSide ( unit ) ;
11945: LD_ADDR_VAR 0 9
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 255
11959: ST_TO_ADDR
// tech_space := tech_spacanom ;
11960: LD_ADDR_VAR 0 12
11964: PUSH
11965: LD_INT 29
11967: ST_TO_ADDR
// tech_time := tech_taurad ;
11968: LD_ADDR_VAR 0 13
11972: PUSH
11973: LD_INT 28
11975: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11976: LD_ADDR_VAR 0 11
11980: PUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 310
11990: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11991: LD_VAR 0 11
11995: PPUSH
11996: CALL_OW 247
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: IFFALSE 12008
// exit ;
12006: GO 12518
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12008: LD_ADDR_VAR 0 8
12012: PUSH
12013: LD_INT 81
12015: PUSH
12016: LD_VAR 0 9
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 3
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 69
12050: ST_TO_ADDR
// if not tmp then
12051: LD_VAR 0 8
12055: NOT
12056: IFFALSE 12060
// exit ;
12058: GO 12518
// if in_unit then
12060: LD_VAR 0 11
12064: IFFALSE 12088
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12066: LD_ADDR_VAR 0 10
12070: PUSH
12071: LD_VAR 0 8
12075: PPUSH
12076: LD_VAR 0 11
12080: PPUSH
12081: CALL_OW 74
12085: ST_TO_ADDR
12086: GO 12108
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12088: LD_ADDR_VAR 0 10
12092: PUSH
12093: LD_VAR 0 8
12097: PPUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 74
12107: ST_TO_ADDR
// if not enemy then
12108: LD_VAR 0 10
12112: NOT
12113: IFFALSE 12117
// exit ;
12115: GO 12518
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12117: LD_VAR 0 11
12121: PUSH
12122: LD_VAR 0 11
12126: PPUSH
12127: LD_VAR 0 10
12131: PPUSH
12132: CALL_OW 296
12136: PUSH
12137: LD_INT 13
12139: GREATER
12140: AND
12141: PUSH
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_VAR 0 10
12151: PPUSH
12152: CALL_OW 296
12156: PUSH
12157: LD_INT 12
12159: GREATER
12160: OR
12161: IFFALSE 12165
// exit ;
12163: GO 12518
// missile := [ 1 ] ;
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12176: LD_VAR 0 9
12180: PPUSH
12181: LD_VAR 0 12
12185: PPUSH
12186: CALL_OW 325
12190: IFFALSE 12219
// missile := Insert ( missile , missile + 1 , 2 ) ;
12192: LD_ADDR_VAR 0 14
12196: PUSH
12197: LD_VAR 0 14
12201: PPUSH
12202: LD_VAR 0 14
12206: PUSH
12207: LD_INT 1
12209: PLUS
12210: PPUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 2
12218: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12219: LD_VAR 0 9
12223: PPUSH
12224: LD_VAR 0 13
12228: PPUSH
12229: CALL_OW 325
12233: PUSH
12234: LD_VAR 0 10
12238: PPUSH
12239: CALL_OW 255
12243: PPUSH
12244: LD_VAR 0 13
12248: PPUSH
12249: CALL_OW 325
12253: NOT
12254: AND
12255: IFFALSE 12284
// missile := Insert ( missile , missile + 1 , 3 ) ;
12257: LD_ADDR_VAR 0 14
12261: PUSH
12262: LD_VAR 0 14
12266: PPUSH
12267: LD_VAR 0 14
12271: PUSH
12272: LD_INT 1
12274: PLUS
12275: PPUSH
12276: LD_INT 3
12278: PPUSH
12279: CALL_OW 2
12283: ST_TO_ADDR
// if missile < 2 then
12284: LD_VAR 0 14
12288: PUSH
12289: LD_INT 2
12291: LESS
12292: IFFALSE 12296
// exit ;
12294: GO 12518
// x := GetX ( enemy ) ;
12296: LD_ADDR_VAR 0 4
12300: PUSH
12301: LD_VAR 0 10
12305: PPUSH
12306: CALL_OW 250
12310: ST_TO_ADDR
// y := GetY ( enemy ) ;
12311: LD_ADDR_VAR 0 5
12315: PUSH
12316: LD_VAR 0 10
12320: PPUSH
12321: CALL_OW 251
12325: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12326: LD_ADDR_VAR 0 6
12330: PUSH
12331: LD_VAR 0 4
12335: PUSH
12336: LD_INT 1
12338: NEG
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 12
12347: PLUS
12348: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12349: LD_ADDR_VAR 0 7
12353: PUSH
12354: LD_VAR 0 5
12358: PUSH
12359: LD_INT 1
12361: NEG
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 12
12370: PLUS
12371: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12372: LD_VAR 0 6
12376: PPUSH
12377: LD_VAR 0 7
12381: PPUSH
12382: CALL_OW 488
12386: NOT
12387: IFFALSE 12409
// begin _x := x ;
12389: LD_ADDR_VAR 0 6
12393: PUSH
12394: LD_VAR 0 4
12398: ST_TO_ADDR
// _y := y ;
12399: LD_ADDR_VAR 0 7
12403: PUSH
12404: LD_VAR 0 5
12408: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12409: LD_ADDR_VAR 0 3
12413: PUSH
12414: LD_INT 1
12416: PPUSH
12417: LD_VAR 0 14
12421: PPUSH
12422: CALL_OW 12
12426: ST_TO_ADDR
// case i of 1 :
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 1
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12457
12440: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12441: LD_VAR 0 1
12445: PPUSH
12446: LD_VAR 0 10
12450: PPUSH
12451: CALL_OW 115
12455: GO 12518
12457: LD_INT 2
12459: DOUBLE
12460: EQUAL
12461: IFTRUE 12465
12463: GO 12487
12465: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12466: LD_VAR 0 1
12470: PPUSH
12471: LD_VAR 0 6
12475: PPUSH
12476: LD_VAR 0 7
12480: PPUSH
12481: CALL_OW 153
12485: GO 12518
12487: LD_INT 3
12489: DOUBLE
12490: EQUAL
12491: IFTRUE 12495
12493: GO 12517
12495: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12496: LD_VAR 0 1
12500: PPUSH
12501: LD_VAR 0 6
12505: PPUSH
12506: LD_VAR 0 7
12510: PPUSH
12511: CALL_OW 154
12515: GO 12518
12517: POP
// end ;
12518: LD_VAR 0 2
12522: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12523: LD_INT 0
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
// if not unit or not building then
12531: LD_VAR 0 1
12535: NOT
12536: PUSH
12537: LD_VAR 0 2
12541: NOT
12542: OR
12543: IFFALSE 12547
// exit ;
12545: GO 12705
// x := GetX ( building ) ;
12547: LD_ADDR_VAR 0 5
12551: PUSH
12552: LD_VAR 0 2
12556: PPUSH
12557: CALL_OW 250
12561: ST_TO_ADDR
// y := GetY ( building ) ;
12562: LD_ADDR_VAR 0 6
12566: PUSH
12567: LD_VAR 0 2
12571: PPUSH
12572: CALL_OW 251
12576: ST_TO_ADDR
// for i = 0 to 5 do
12577: LD_ADDR_VAR 0 4
12581: PUSH
12582: DOUBLE
12583: LD_INT 0
12585: DEC
12586: ST_TO_ADDR
12587: LD_INT 5
12589: PUSH
12590: FOR_TO
12591: IFFALSE 12703
// begin _x := ShiftX ( x , i , 3 ) ;
12593: LD_ADDR_VAR 0 7
12597: PUSH
12598: LD_VAR 0 5
12602: PPUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: LD_INT 3
12610: PPUSH
12611: CALL_OW 272
12615: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12616: LD_ADDR_VAR 0 8
12620: PUSH
12621: LD_VAR 0 6
12625: PPUSH
12626: LD_VAR 0 4
12630: PPUSH
12631: LD_INT 3
12633: PPUSH
12634: CALL_OW 273
12638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12639: LD_VAR 0 7
12643: PPUSH
12644: LD_VAR 0 8
12648: PPUSH
12649: CALL_OW 488
12653: NOT
12654: IFFALSE 12658
// continue ;
12656: GO 12590
// if HexInfo ( _x , _y ) = 0 then
12658: LD_VAR 0 7
12662: PPUSH
12663: LD_VAR 0 8
12667: PPUSH
12668: CALL_OW 428
12672: PUSH
12673: LD_INT 0
12675: EQUAL
12676: IFFALSE 12701
// begin ComMoveXY ( unit , _x , _y ) ;
12678: LD_VAR 0 1
12682: PPUSH
12683: LD_VAR 0 7
12687: PPUSH
12688: LD_VAR 0 8
12692: PPUSH
12693: CALL_OW 111
// exit ;
12697: POP
12698: POP
12699: GO 12705
// end ; end ;
12701: GO 12590
12703: POP
12704: POP
// end ;
12705: LD_VAR 0 3
12709: RET
// export function ScanBase ( side , base_area ) ; begin
12710: LD_INT 0
12712: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12713: LD_ADDR_VAR 0 3
12717: PUSH
12718: LD_VAR 0 2
12722: PPUSH
12723: LD_INT 81
12725: PUSH
12726: LD_VAR 0 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PPUSH
12735: CALL_OW 70
12739: ST_TO_ADDR
// end ;
12740: LD_VAR 0 3
12744: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12745: LD_INT 0
12747: PPUSH
12748: PPUSH
12749: PPUSH
12750: PPUSH
12751: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12752: LD_VAR 0 1
12756: NOT
12757: PUSH
12758: LD_EXP 52
12762: PUSH
12763: LD_VAR 0 1
12767: ARRAY
12768: NOT
12769: OR
12770: PUSH
12771: LD_VAR 0 2
12775: NOT
12776: OR
12777: PUSH
12778: LD_VAR 0 3
12782: NOT
12783: OR
12784: IFFALSE 12788
// exit ;
12786: GO 13238
// side := mc_sides [ base ] ;
12788: LD_ADDR_VAR 0 6
12792: PUSH
12793: LD_EXP 78
12797: PUSH
12798: LD_VAR 0 1
12802: ARRAY
12803: ST_TO_ADDR
// if not side then
12804: LD_VAR 0 6
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 13238
// for i in solds do
12813: LD_ADDR_VAR 0 7
12817: PUSH
12818: LD_VAR 0 2
12822: PUSH
12823: FOR_IN
12824: IFFALSE 12885
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12826: LD_VAR 0 7
12830: PPUSH
12831: CALL_OW 310
12835: PPUSH
12836: CALL_OW 266
12840: PUSH
12841: LD_INT 32
12843: PUSH
12844: LD_INT 31
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: IN
12851: IFFALSE 12871
// solds := solds diff i else
12853: LD_ADDR_VAR 0 2
12857: PUSH
12858: LD_VAR 0 2
12862: PUSH
12863: LD_VAR 0 7
12867: DIFF
12868: ST_TO_ADDR
12869: GO 12883
// SetTag ( i , 18 ) ;
12871: LD_VAR 0 7
12875: PPUSH
12876: LD_INT 18
12878: PPUSH
12879: CALL_OW 109
12883: GO 12823
12885: POP
12886: POP
// if not solds then
12887: LD_VAR 0 2
12891: NOT
12892: IFFALSE 12896
// exit ;
12894: GO 13238
// repeat wait ( 0 0$1 ) ;
12896: LD_INT 35
12898: PPUSH
12899: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12903: LD_ADDR_VAR 0 5
12907: PUSH
12908: LD_VAR 0 6
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: CALL 12710 0 2
12922: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
12923: LD_VAR 0 5
12927: NOT
12928: PUSH
12929: LD_VAR 0 5
12933: PUSH
12934: LD_INT 3
12936: GREATER
12937: OR
12938: PUSH
12939: LD_EXP 74
12943: PUSH
12944: LD_VAR 0 1
12948: ARRAY
12949: OR
12950: IFFALSE 12991
// begin for i in solds do
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: FOR_IN
12963: IFFALSE 12987
// if HasTask ( i ) then
12965: LD_VAR 0 7
12969: PPUSH
12970: CALL_OW 314
12974: IFFALSE 12985
// ComStop ( i ) ;
12976: LD_VAR 0 7
12980: PPUSH
12981: CALL_OW 141
12985: GO 12962
12987: POP
12988: POP
// break ;
12989: GO 13226
// end ; for i in solds do
12991: LD_ADDR_VAR 0 7
12995: PUSH
12996: LD_VAR 0 2
13000: PUSH
13001: FOR_IN
13002: IFFALSE 13218
// begin if IsInUnit ( i ) then
13004: LD_VAR 0 7
13008: PPUSH
13009: CALL_OW 310
13013: IFFALSE 13024
// ComExitBuilding ( i ) ;
13015: LD_VAR 0 7
13019: PPUSH
13020: CALL_OW 122
// if GetLives ( i ) > 333 then
13024: LD_VAR 0 7
13028: PPUSH
13029: CALL_OW 256
13033: PUSH
13034: LD_INT 333
13036: GREATER
13037: IFFALSE 13065
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13039: LD_VAR 0 7
13043: PPUSH
13044: LD_VAR 0 5
13048: PPUSH
13049: LD_VAR 0 7
13053: PPUSH
13054: CALL_OW 74
13058: PPUSH
13059: CALL_OW 115
13063: GO 13216
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
13065: LD_ADDR_VAR 0 8
13069: PUSH
13070: LD_EXP 52
13074: PUSH
13075: LD_VAR 0 1
13079: ARRAY
13080: PPUSH
13081: LD_INT 2
13083: PUSH
13084: LD_INT 30
13086: PUSH
13087: LD_INT 0
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 6
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PPUSH
13120: CALL_OW 72
13124: PPUSH
13125: LD_VAR 0 7
13129: PPUSH
13130: CALL_OW 74
13134: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
13135: LD_VAR 0 7
13139: PPUSH
13140: LD_VAR 0 8
13144: PPUSH
13145: CALL_OW 250
13149: PPUSH
13150: LD_INT 3
13152: PPUSH
13153: LD_INT 5
13155: PPUSH
13156: CALL_OW 272
13160: PPUSH
13161: LD_VAR 0 8
13165: PPUSH
13166: CALL_OW 251
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: LD_INT 5
13176: PPUSH
13177: CALL_OW 273
13181: PPUSH
13182: CALL_OW 111
// SetTag ( i , 0 ) ;
13186: LD_VAR 0 7
13190: PPUSH
13191: LD_INT 0
13193: PPUSH
13194: CALL_OW 109
// solds := solds diff i ;
13198: LD_ADDR_VAR 0 2
13202: PUSH
13203: LD_VAR 0 2
13207: PUSH
13208: LD_VAR 0 7
13212: DIFF
13213: ST_TO_ADDR
// continue ;
13214: GO 13001
// end ; end ;
13216: GO 13001
13218: POP
13219: POP
// until solds ;
13220: LD_VAR 0 2
13224: IFFALSE 12896
// MC_Reset ( base , 18 ) ;
13226: LD_VAR 0 1
13230: PPUSH
13231: LD_INT 18
13233: PPUSH
13234: CALL 57918 0 2
// end ;
13238: LD_VAR 0 4
13242: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13243: LD_INT 0
13245: PPUSH
13246: PPUSH
13247: PPUSH
13248: PPUSH
13249: PPUSH
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13261: LD_ADDR_VAR 0 12
13265: PUSH
13266: LD_EXP 52
13270: PUSH
13271: LD_VAR 0 1
13275: ARRAY
13276: PPUSH
13277: LD_INT 25
13279: PUSH
13280: LD_INT 3
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 72
13291: ST_TO_ADDR
// if mc_remote_driver [ base ] then
13292: LD_EXP 92
13296: PUSH
13297: LD_VAR 0 1
13301: ARRAY
13302: IFFALSE 13326
// mechs := mechs diff mc_remote_driver [ base ] ;
13304: LD_ADDR_VAR 0 12
13308: PUSH
13309: LD_VAR 0 12
13313: PUSH
13314: LD_EXP 92
13318: PUSH
13319: LD_VAR 0 1
13323: ARRAY
13324: DIFF
13325: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13326: LD_ADDR_VAR 0 8
13330: PUSH
13331: LD_EXP 52
13335: PUSH
13336: LD_VAR 0 1
13340: ARRAY
13341: PPUSH
13342: LD_INT 2
13344: PUSH
13345: LD_INT 25
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 25
13357: PUSH
13358: LD_INT 5
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 9
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 72
13396: ST_TO_ADDR
// if not defenders and not solds then
13397: LD_VAR 0 2
13401: NOT
13402: PUSH
13403: LD_VAR 0 8
13407: NOT
13408: AND
13409: IFFALSE 13413
// exit ;
13411: GO 14787
// depot_under_attack := false ;
13413: LD_ADDR_VAR 0 16
13417: PUSH
13418: LD_INT 0
13420: ST_TO_ADDR
// sold_defenders := [ ] ;
13421: LD_ADDR_VAR 0 17
13425: PUSH
13426: EMPTY
13427: ST_TO_ADDR
// if mechs then
13428: LD_VAR 0 12
13432: IFFALSE 13561
// for i in defenders do
13434: LD_ADDR_VAR 0 5
13438: PUSH
13439: LD_VAR 0 2
13443: PUSH
13444: FOR_IN
13445: IFFALSE 13559
// begin SetTag ( i , 20 ) ;
13447: LD_VAR 0 5
13451: PPUSH
13452: LD_INT 20
13454: PPUSH
13455: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13459: LD_VAR 0 5
13463: PPUSH
13464: CALL_OW 263
13468: PUSH
13469: LD_INT 1
13471: EQUAL
13472: PUSH
13473: LD_VAR 0 5
13477: PPUSH
13478: CALL_OW 311
13482: NOT
13483: AND
13484: PUSH
13485: LD_VAR 0 12
13489: AND
13490: IFFALSE 13557
// begin un := mechs [ 1 ] ;
13492: LD_ADDR_VAR 0 10
13496: PUSH
13497: LD_VAR 0 12
13501: PUSH
13502: LD_INT 1
13504: ARRAY
13505: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13506: LD_VAR 0 10
13510: PPUSH
13511: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13515: LD_VAR 0 10
13519: PPUSH
13520: LD_VAR 0 5
13524: PPUSH
13525: CALL_OW 180
// SetTag ( un , 19 ) ;
13529: LD_VAR 0 10
13533: PPUSH
13534: LD_INT 19
13536: PPUSH
13537: CALL_OW 109
// mechs := mechs diff un ;
13541: LD_ADDR_VAR 0 12
13545: PUSH
13546: LD_VAR 0 12
13550: PUSH
13551: LD_VAR 0 10
13555: DIFF
13556: ST_TO_ADDR
// end ; end ;
13557: GO 13444
13559: POP
13560: POP
// if solds then
13561: LD_VAR 0 8
13565: IFFALSE 13624
// for i in solds do
13567: LD_ADDR_VAR 0 5
13571: PUSH
13572: LD_VAR 0 8
13576: PUSH
13577: FOR_IN
13578: IFFALSE 13622
// if not GetTag ( i ) then
13580: LD_VAR 0 5
13584: PPUSH
13585: CALL_OW 110
13589: NOT
13590: IFFALSE 13620
// begin defenders := defenders union i ;
13592: LD_ADDR_VAR 0 2
13596: PUSH
13597: LD_VAR 0 2
13601: PUSH
13602: LD_VAR 0 5
13606: UNION
13607: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13608: LD_VAR 0 5
13612: PPUSH
13613: LD_INT 18
13615: PPUSH
13616: CALL_OW 109
// end ;
13620: GO 13577
13622: POP
13623: POP
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// enemy := mc_scan [ base ] ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_EXP 75
13640: PUSH
13641: LD_VAR 0 1
13645: ARRAY
13646: ST_TO_ADDR
// for i in defenders do
13647: LD_ADDR_VAR 0 5
13651: PUSH
13652: LD_VAR 0 2
13656: PUSH
13657: FOR_IN
13658: IFFALSE 14388
// begin e := NearestUnitToUnit ( enemy , i ) ;
13660: LD_ADDR_VAR 0 13
13664: PUSH
13665: LD_VAR 0 3
13669: PPUSH
13670: LD_VAR 0 5
13674: PPUSH
13675: CALL_OW 74
13679: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13680: LD_ADDR_VAR 0 16
13684: PUSH
13685: LD_EXP 52
13689: PUSH
13690: LD_VAR 0 1
13694: ARRAY
13695: PPUSH
13696: LD_INT 2
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_INT 0
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 30
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 72
13728: NOT
13729: PUSH
13730: LD_EXP 52
13734: PUSH
13735: LD_VAR 0 1
13739: ARRAY
13740: PPUSH
13741: LD_INT 2
13743: PUSH
13744: LD_INT 30
13746: PUSH
13747: LD_INT 0
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 30
13756: PUSH
13757: LD_INT 1
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 72
13773: PPUSH
13774: CALL_OW 256
13778: PUSH
13779: LD_INT 600
13781: LESS
13782: OR
13783: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13784: LD_VAR 0 5
13788: PPUSH
13789: CALL_OW 247
13793: PUSH
13794: LD_INT 2
13796: DOUBLE
13797: EQUAL
13798: IFTRUE 13802
13800: GO 14094
13802: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
13803: LD_VAR 0 5
13807: PPUSH
13808: CALL_OW 256
13812: PUSH
13813: LD_INT 650
13815: GREATER
13816: PUSH
13817: LD_VAR 0 5
13821: PPUSH
13822: LD_VAR 0 13
13826: PPUSH
13827: CALL_OW 296
13831: PUSH
13832: LD_INT 40
13834: LESS
13835: PUSH
13836: LD_VAR 0 13
13840: PPUSH
13841: LD_EXP 77
13845: PUSH
13846: LD_VAR 0 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 308
13856: OR
13857: AND
13858: IFFALSE 13876
// ComAttackUnit ( i , e ) else
13860: LD_VAR 0 5
13864: PPUSH
13865: LD_VAR 0 13
13869: PPUSH
13870: CALL_OW 115
13874: GO 13977
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
13876: LD_VAR 0 13
13880: PPUSH
13881: LD_EXP 77
13885: PUSH
13886: LD_VAR 0 1
13890: ARRAY
13891: PPUSH
13892: CALL_OW 308
13896: NOT
13897: PUSH
13898: LD_VAR 0 5
13902: PPUSH
13903: LD_VAR 0 13
13907: PPUSH
13908: CALL_OW 296
13912: PUSH
13913: LD_INT 40
13915: GREATEREQUAL
13916: AND
13917: PUSH
13918: LD_VAR 0 5
13922: PPUSH
13923: CALL_OW 256
13927: PUSH
13928: LD_INT 650
13930: LESSEQUAL
13931: OR
13932: PUSH
13933: LD_VAR 0 5
13937: PPUSH
13938: LD_EXP 76
13942: PUSH
13943: LD_VAR 0 1
13947: ARRAY
13948: PPUSH
13949: CALL_OW 308
13953: NOT
13954: AND
13955: IFFALSE 13977
// ComMoveToArea ( i , mc_parking [ base ] ) ;
13957: LD_VAR 0 5
13961: PPUSH
13962: LD_EXP 76
13966: PUSH
13967: LD_VAR 0 1
13971: ARRAY
13972: PPUSH
13973: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13977: LD_VAR 0 5
13981: PPUSH
13982: CALL_OW 256
13986: PUSH
13987: LD_INT 998
13989: LESS
13990: PUSH
13991: LD_VAR 0 5
13995: PPUSH
13996: CALL_OW 263
14000: PUSH
14001: LD_INT 1
14003: EQUAL
14004: AND
14005: PUSH
14006: LD_VAR 0 5
14010: PPUSH
14011: CALL_OW 311
14015: AND
14016: PUSH
14017: LD_VAR 0 5
14021: PPUSH
14022: LD_EXP 76
14026: PUSH
14027: LD_VAR 0 1
14031: ARRAY
14032: PPUSH
14033: CALL_OW 308
14037: AND
14038: IFFALSE 14092
// begin mech := IsDrivenBy ( i ) ;
14040: LD_ADDR_VAR 0 9
14044: PUSH
14045: LD_VAR 0 5
14049: PPUSH
14050: CALL_OW 311
14054: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14055: LD_VAR 0 9
14059: PPUSH
14060: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14064: LD_VAR 0 9
14068: PPUSH
14069: LD_VAR 0 5
14073: PPUSH
14074: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14078: LD_VAR 0 9
14082: PPUSH
14083: LD_VAR 0 5
14087: PPUSH
14088: CALL_OW 180
// end ; end ; unit_human :
14092: GO 14359
14094: LD_INT 1
14096: DOUBLE
14097: EQUAL
14098: IFTRUE 14102
14100: GO 14358
14102: POP
// begin b := IsInUnit ( i ) ;
14103: LD_ADDR_VAR 0 18
14107: PUSH
14108: LD_VAR 0 5
14112: PPUSH
14113: CALL_OW 310
14117: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14118: LD_ADDR_VAR 0 19
14122: PUSH
14123: LD_VAR 0 18
14127: NOT
14128: PUSH
14129: LD_VAR 0 18
14133: PPUSH
14134: CALL_OW 266
14138: PUSH
14139: LD_INT 32
14141: PUSH
14142: LD_INT 31
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: IN
14149: OR
14150: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14151: LD_VAR 0 16
14155: PUSH
14156: LD_VAR 0 2
14160: PPUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 2
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 72
14175: PUSH
14176: LD_INT 1
14178: LESSEQUAL
14179: OR
14180: PUSH
14181: LD_VAR 0 19
14185: AND
14186: PUSH
14187: LD_VAR 0 5
14191: PUSH
14192: LD_VAR 0 17
14196: IN
14197: NOT
14198: AND
14199: IFFALSE 14292
// begin if b then
14201: LD_VAR 0 18
14205: IFFALSE 14254
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14207: LD_VAR 0 18
14211: PPUSH
14212: LD_VAR 0 3
14216: PPUSH
14217: LD_VAR 0 18
14221: PPUSH
14222: CALL_OW 74
14226: PPUSH
14227: CALL_OW 296
14231: PUSH
14232: LD_INT 10
14234: LESS
14235: PUSH
14236: LD_VAR 0 18
14240: PPUSH
14241: CALL_OW 461
14245: PUSH
14246: LD_INT 7
14248: NONEQUAL
14249: AND
14250: IFFALSE 14254
// continue ;
14252: GO 13657
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14254: LD_ADDR_VAR 0 17
14258: PUSH
14259: LD_VAR 0 17
14263: PPUSH
14264: LD_VAR 0 17
14268: PUSH
14269: LD_INT 1
14271: PLUS
14272: PPUSH
14273: LD_VAR 0 5
14277: PPUSH
14278: CALL_OW 1
14282: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14283: LD_VAR 0 5
14287: PPUSH
14288: CALL_OW 122
// end ; if sold_defenders then
14292: LD_VAR 0 17
14296: IFFALSE 14356
// if i in sold_defenders then
14298: LD_VAR 0 5
14302: PUSH
14303: LD_VAR 0 17
14307: IN
14308: IFFALSE 14356
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14310: LD_VAR 0 5
14314: PPUSH
14315: CALL_OW 314
14319: NOT
14320: PUSH
14321: LD_VAR 0 5
14325: PPUSH
14326: LD_VAR 0 13
14330: PPUSH
14331: CALL_OW 296
14335: PUSH
14336: LD_INT 30
14338: LESS
14339: AND
14340: IFFALSE 14356
// ComAttackUnit ( i , e ) ;
14342: LD_VAR 0 5
14346: PPUSH
14347: LD_VAR 0 13
14351: PPUSH
14352: CALL_OW 115
// end ; end ; end ;
14356: GO 14359
14358: POP
// if IsDead ( i ) then
14359: LD_VAR 0 5
14363: PPUSH
14364: CALL_OW 301
14368: IFFALSE 14386
// defenders := defenders diff i ;
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_VAR 0 2
14379: PUSH
14380: LD_VAR 0 5
14384: DIFF
14385: ST_TO_ADDR
// end ;
14386: GO 13657
14388: POP
14389: POP
// until not enemy or not defenders ;
14390: LD_VAR 0 3
14394: NOT
14395: PUSH
14396: LD_VAR 0 2
14400: NOT
14401: OR
14402: IFFALSE 13624
// MC_Reset ( base , 18 ) ;
14404: LD_VAR 0 1
14408: PPUSH
14409: LD_INT 18
14411: PPUSH
14412: CALL 57918 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_VAR 0 2
14425: PUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 25
14436: PUSH
14437: LD_INT 1
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 25
14446: PUSH
14447: LD_INT 5
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 25
14456: PUSH
14457: LD_INT 8
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 25
14466: PUSH
14467: LD_INT 9
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 72
14485: DIFF
14486: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14487: LD_VAR 0 3
14491: NOT
14492: PUSH
14493: LD_VAR 0 2
14497: PPUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PPUSH
14508: CALL_OW 72
14512: AND
14513: IFFALSE 14775
// begin tmp := FilterByTag ( defenders , 19 ) ;
14515: LD_ADDR_VAR 0 11
14519: PUSH
14520: LD_VAR 0 2
14524: PPUSH
14525: LD_INT 19
14527: PPUSH
14528: CALL 51216 0 2
14532: ST_TO_ADDR
// if tmp then
14533: LD_VAR 0 11
14537: IFFALSE 14607
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14539: LD_ADDR_VAR 0 11
14543: PUSH
14544: LD_VAR 0 11
14548: PPUSH
14549: LD_INT 25
14551: PUSH
14552: LD_INT 3
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 72
14563: ST_TO_ADDR
// if tmp then
14564: LD_VAR 0 11
14568: IFFALSE 14607
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14570: LD_ADDR_EXP 64
14574: PUSH
14575: LD_EXP 64
14579: PPUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: LD_EXP 64
14589: PUSH
14590: LD_VAR 0 1
14594: ARRAY
14595: PUSH
14596: LD_VAR 0 11
14600: UNION
14601: PPUSH
14602: CALL_OW 1
14606: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14607: LD_VAR 0 1
14611: PPUSH
14612: LD_INT 19
14614: PPUSH
14615: CALL 57918 0 2
// repeat wait ( 0 0$1 ) ;
14619: LD_INT 35
14621: PPUSH
14622: CALL_OW 67
// for i in defenders do
14626: LD_ADDR_VAR 0 5
14630: PUSH
14631: LD_VAR 0 2
14635: PUSH
14636: FOR_IN
14637: IFFALSE 14726
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14639: LD_VAR 0 5
14643: PPUSH
14644: LD_EXP 76
14648: PUSH
14649: LD_VAR 0 1
14653: ARRAY
14654: PPUSH
14655: CALL_OW 308
14659: NOT
14660: IFFALSE 14684
// ComMoveToArea ( i , mc_parking [ base ] ) else
14662: LD_VAR 0 5
14666: PPUSH
14667: LD_EXP 76
14671: PUSH
14672: LD_VAR 0 1
14676: ARRAY
14677: PPUSH
14678: CALL_OW 113
14682: GO 14724
// if GetControl ( i ) = control_manual then
14684: LD_VAR 0 5
14688: PPUSH
14689: CALL_OW 263
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: IFFALSE 14724
// if IsDrivenBy ( i ) then
14699: LD_VAR 0 5
14703: PPUSH
14704: CALL_OW 311
14708: IFFALSE 14724
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14710: LD_VAR 0 5
14714: PPUSH
14715: CALL_OW 311
14719: PPUSH
14720: CALL_OW 121
// end ;
14724: GO 14636
14726: POP
14727: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
14728: LD_VAR 0 2
14732: PPUSH
14733: LD_INT 95
14735: PUSH
14736: LD_EXP 76
14740: PUSH
14741: LD_VAR 0 1
14745: ARRAY
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL_OW 72
14755: PUSH
14756: LD_VAR 0 2
14760: EQUAL
14761: PUSH
14762: LD_EXP 75
14766: PUSH
14767: LD_VAR 0 1
14771: ARRAY
14772: OR
14773: IFFALSE 14619
// end ; MC_Reset ( base , 20 ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_INT 20
14782: PPUSH
14783: CALL 57918 0 2
// end ;
14787: LD_VAR 0 4
14791: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
// result := false ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 0
14805: ST_TO_ADDR
// side := GetSide ( unit ) ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 255
14820: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14821: LD_ADDR_VAR 0 4
14825: PUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 248
14835: ST_TO_ADDR
// case nat of 1 :
14836: LD_VAR 0 4
14840: PUSH
14841: LD_INT 1
14843: DOUBLE
14844: EQUAL
14845: IFTRUE 14849
14847: GO 14860
14849: POP
// tech := tech_lassight ; 2 :
14850: LD_ADDR_VAR 0 5
14854: PUSH
14855: LD_INT 12
14857: ST_TO_ADDR
14858: GO 14899
14860: LD_INT 2
14862: DOUBLE
14863: EQUAL
14864: IFTRUE 14868
14866: GO 14879
14868: POP
// tech := tech_mortar ; 3 :
14869: LD_ADDR_VAR 0 5
14873: PUSH
14874: LD_INT 41
14876: ST_TO_ADDR
14877: GO 14899
14879: LD_INT 3
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14898
14887: POP
// tech := tech_bazooka ; end ;
14888: LD_ADDR_VAR 0 5
14892: PUSH
14893: LD_INT 44
14895: ST_TO_ADDR
14896: GO 14899
14898: POP
// if Researched ( side , tech ) then
14899: LD_VAR 0 3
14903: PPUSH
14904: LD_VAR 0 5
14908: PPUSH
14909: CALL_OW 325
14913: IFFALSE 14940
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14915: LD_ADDR_VAR 0 2
14919: PUSH
14920: LD_INT 5
14922: PUSH
14923: LD_INT 8
14925: PUSH
14926: LD_INT 9
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: PUSH
14934: LD_VAR 0 4
14938: ARRAY
14939: ST_TO_ADDR
// end ;
14940: LD_VAR 0 2
14944: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14945: LD_INT 0
14947: PPUSH
14948: PPUSH
14949: PPUSH
// if not mines then
14950: LD_VAR 0 2
14954: NOT
14955: IFFALSE 14959
// exit ;
14957: GO 15103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14959: LD_ADDR_VAR 0 5
14963: PUSH
14964: LD_INT 81
14966: PUSH
14967: LD_VAR 0 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 3
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 3
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: ST_TO_ADDR
// for i in mines do
15002: LD_ADDR_VAR 0 4
15006: PUSH
15007: LD_VAR 0 2
15011: PUSH
15012: FOR_IN
15013: IFFALSE 15101
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15015: LD_VAR 0 4
15019: PUSH
15020: LD_INT 1
15022: ARRAY
15023: PPUSH
15024: LD_VAR 0 4
15028: PUSH
15029: LD_INT 2
15031: ARRAY
15032: PPUSH
15033: CALL_OW 458
15037: NOT
15038: IFFALSE 15042
// continue ;
15040: GO 15012
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15042: LD_VAR 0 4
15046: PUSH
15047: LD_INT 1
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 4
15055: PUSH
15056: LD_INT 2
15058: ARRAY
15059: PPUSH
15060: CALL_OW 428
15064: PUSH
15065: LD_VAR 0 5
15069: IN
15070: IFFALSE 15099
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15072: LD_VAR 0 4
15076: PUSH
15077: LD_INT 1
15079: ARRAY
15080: PPUSH
15081: LD_VAR 0 4
15085: PUSH
15086: LD_INT 2
15088: ARRAY
15089: PPUSH
15090: LD_VAR 0 1
15094: PPUSH
15095: CALL_OW 456
// end ;
15099: GO 15012
15101: POP
15102: POP
// end ;
15103: LD_VAR 0 3
15107: RET
// export function Count ( array ) ; var i ; begin
15108: LD_INT 0
15110: PPUSH
15111: PPUSH
// result := 0 ;
15112: LD_ADDR_VAR 0 2
15116: PUSH
15117: LD_INT 0
15119: ST_TO_ADDR
// for i in array do
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_VAR 0 1
15129: PUSH
15130: FOR_IN
15131: IFFALSE 15155
// if i then
15133: LD_VAR 0 3
15137: IFFALSE 15153
// result := result + 1 ;
15139: LD_ADDR_VAR 0 2
15143: PUSH
15144: LD_VAR 0 2
15148: PUSH
15149: LD_INT 1
15151: PLUS
15152: ST_TO_ADDR
15153: GO 15130
15155: POP
15156: POP
// end ;
15157: LD_VAR 0 2
15161: RET
// export function IsEmpty ( building ) ; begin
15162: LD_INT 0
15164: PPUSH
// if not building then
15165: LD_VAR 0 1
15169: NOT
15170: IFFALSE 15174
// exit ;
15172: GO 15217
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15174: LD_ADDR_VAR 0 2
15178: PUSH
15179: LD_VAR 0 1
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 255
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 58
15203: PUSH
15204: EMPTY
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 69
15215: IN
15216: ST_TO_ADDR
// end ;
15217: LD_VAR 0 2
15221: RET
// export function IsNotFull ( building ) ; begin
15222: LD_INT 0
15224: PPUSH
// if not building then
15225: LD_VAR 0 1
15229: NOT
15230: IFFALSE 15234
// exit ;
15232: GO 15253
// result := UnitsInside ( building ) < 6 ;
15234: LD_ADDR_VAR 0 2
15238: PUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 313
15248: PUSH
15249: LD_INT 6
15251: LESS
15252: ST_TO_ADDR
// end ;
15253: LD_VAR 0 2
15257: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
// tmp := [ ] ;
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: EMPTY
15270: ST_TO_ADDR
// list := [ ] ;
15271: LD_ADDR_VAR 0 5
15275: PUSH
15276: EMPTY
15277: ST_TO_ADDR
// for i = 16 to 25 do
15278: LD_ADDR_VAR 0 4
15282: PUSH
15283: DOUBLE
15284: LD_INT 16
15286: DEC
15287: ST_TO_ADDR
15288: LD_INT 25
15290: PUSH
15291: FOR_TO
15292: IFFALSE 15365
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15294: LD_ADDR_VAR 0 3
15298: PUSH
15299: LD_VAR 0 3
15303: PUSH
15304: LD_INT 22
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 255
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 91
15323: PUSH
15324: LD_VAR 0 1
15328: PUSH
15329: LD_INT 6
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_VAR 0 4
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ADD
15362: ST_TO_ADDR
15363: GO 15291
15365: POP
15366: POP
// for i = 1 to tmp do
15367: LD_ADDR_VAR 0 4
15371: PUSH
15372: DOUBLE
15373: LD_INT 1
15375: DEC
15376: ST_TO_ADDR
15377: LD_VAR 0 3
15381: PUSH
15382: FOR_TO
15383: IFFALSE 15471
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15385: LD_ADDR_VAR 0 5
15389: PUSH
15390: LD_VAR 0 5
15394: PUSH
15395: LD_VAR 0 3
15399: PUSH
15400: LD_VAR 0 4
15404: ARRAY
15405: PPUSH
15406: CALL_OW 266
15410: PUSH
15411: LD_VAR 0 3
15415: PUSH
15416: LD_VAR 0 4
15420: ARRAY
15421: PPUSH
15422: CALL_OW 250
15426: PUSH
15427: LD_VAR 0 3
15431: PUSH
15432: LD_VAR 0 4
15436: ARRAY
15437: PPUSH
15438: CALL_OW 251
15442: PUSH
15443: LD_VAR 0 3
15447: PUSH
15448: LD_VAR 0 4
15452: ARRAY
15453: PPUSH
15454: CALL_OW 254
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: ADD
15468: ST_TO_ADDR
15469: GO 15382
15471: POP
15472: POP
// result := list ;
15473: LD_ADDR_VAR 0 2
15477: PUSH
15478: LD_VAR 0 5
15482: ST_TO_ADDR
// end ;
15483: LD_VAR 0 2
15487: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
15495: PPUSH
15496: PPUSH
// if not factory then
15497: LD_VAR 0 1
15501: NOT
15502: IFFALSE 15506
// exit ;
15504: GO 16099
// if control = control_apeman then
15506: LD_VAR 0 4
15510: PUSH
15511: LD_INT 5
15513: EQUAL
15514: IFFALSE 15623
// begin tmp := UnitsInside ( factory ) ;
15516: LD_ADDR_VAR 0 8
15520: PUSH
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 313
15530: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15531: LD_VAR 0 8
15535: PPUSH
15536: LD_INT 25
15538: PUSH
15539: LD_INT 12
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 72
15550: NOT
15551: IFFALSE 15561
// control := control_manual ;
15553: LD_ADDR_VAR 0 4
15557: PUSH
15558: LD_INT 1
15560: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15561: LD_ADDR_VAR 0 8
15565: PUSH
15566: LD_VAR 0 1
15570: PPUSH
15571: CALL 15258 0 1
15575: ST_TO_ADDR
// if tmp then
15576: LD_VAR 0 8
15580: IFFALSE 15623
// begin for i in tmp do
15582: LD_ADDR_VAR 0 7
15586: PUSH
15587: LD_VAR 0 8
15591: PUSH
15592: FOR_IN
15593: IFFALSE 15621
// if i [ 1 ] = b_ext_radio then
15595: LD_VAR 0 7
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PUSH
15604: LD_INT 22
15606: EQUAL
15607: IFFALSE 15619
// begin control := control_remote ;
15609: LD_ADDR_VAR 0 4
15613: PUSH
15614: LD_INT 2
15616: ST_TO_ADDR
// break ;
15617: GO 15621
// end ;
15619: GO 15592
15621: POP
15622: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15623: LD_VAR 0 1
15627: PPUSH
15628: LD_VAR 0 2
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_VAR 0 4
15642: PPUSH
15643: LD_VAR 0 5
15647: PPUSH
15648: CALL_OW 448
15652: IFFALSE 15687
// begin result := [ chassis , engine , control , weapon ] ;
15654: LD_ADDR_VAR 0 6
15658: PUSH
15659: LD_VAR 0 2
15663: PUSH
15664: LD_VAR 0 3
15668: PUSH
15669: LD_VAR 0 4
15673: PUSH
15674: LD_VAR 0 5
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: ST_TO_ADDR
// exit ;
15685: GO 16099
// end ; _chassis := AvailableChassisList ( factory ) ;
15687: LD_ADDR_VAR 0 9
15691: PUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: CALL_OW 475
15701: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15702: LD_ADDR_VAR 0 11
15706: PUSH
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 476
15716: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15717: LD_ADDR_VAR 0 12
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 477
15731: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15732: LD_ADDR_VAR 0 10
15736: PUSH
15737: LD_VAR 0 1
15741: PPUSH
15742: CALL_OW 478
15746: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15747: LD_VAR 0 9
15751: NOT
15752: PUSH
15753: LD_VAR 0 11
15757: NOT
15758: OR
15759: PUSH
15760: LD_VAR 0 12
15764: NOT
15765: OR
15766: PUSH
15767: LD_VAR 0 10
15771: NOT
15772: OR
15773: IFFALSE 15808
// begin result := [ chassis , engine , control , weapon ] ;
15775: LD_ADDR_VAR 0 6
15779: PUSH
15780: LD_VAR 0 2
15784: PUSH
15785: LD_VAR 0 3
15789: PUSH
15790: LD_VAR 0 4
15794: PUSH
15795: LD_VAR 0 5
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: ST_TO_ADDR
// exit ;
15806: GO 16099
// end ; if not chassis in _chassis then
15808: LD_VAR 0 2
15812: PUSH
15813: LD_VAR 0 9
15817: IN
15818: NOT
15819: IFFALSE 15845
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15821: LD_ADDR_VAR 0 2
15825: PUSH
15826: LD_VAR 0 9
15830: PUSH
15831: LD_INT 1
15833: PPUSH
15834: LD_VAR 0 9
15838: PPUSH
15839: CALL_OW 12
15843: ARRAY
15844: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15845: LD_VAR 0 2
15849: PPUSH
15850: LD_VAR 0 3
15854: PPUSH
15855: CALL 16104 0 2
15859: NOT
15860: IFFALSE 15919
// repeat engine := _engine [ 1 ] ;
15862: LD_ADDR_VAR 0 3
15866: PUSH
15867: LD_VAR 0 11
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15876: LD_ADDR_VAR 0 11
15880: PUSH
15881: LD_VAR 0 11
15885: PPUSH
15886: LD_INT 1
15888: PPUSH
15889: CALL_OW 3
15893: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15894: LD_VAR 0 2
15898: PPUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: CALL 16104 0 2
15908: PUSH
15909: LD_VAR 0 11
15913: PUSH
15914: EMPTY
15915: EQUAL
15916: OR
15917: IFFALSE 15862
// if not control in _control then
15919: LD_VAR 0 4
15923: PUSH
15924: LD_VAR 0 12
15928: IN
15929: NOT
15930: IFFALSE 15956
// control := _control [ rand ( 1 , _control ) ] ;
15932: LD_ADDR_VAR 0 4
15936: PUSH
15937: LD_VAR 0 12
15941: PUSH
15942: LD_INT 1
15944: PPUSH
15945: LD_VAR 0 12
15949: PPUSH
15950: CALL_OW 12
15954: ARRAY
15955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15956: LD_VAR 0 2
15960: PPUSH
15961: LD_VAR 0 5
15965: PPUSH
15966: CALL 16324 0 2
15970: NOT
15971: IFFALSE 16030
// repeat weapon := _weapon [ 1 ] ;
15973: LD_ADDR_VAR 0 5
15977: PUSH
15978: LD_VAR 0 10
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15987: LD_ADDR_VAR 0 10
15991: PUSH
15992: LD_VAR 0 10
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 3
16004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16005: LD_VAR 0 2
16009: PPUSH
16010: LD_VAR 0 5
16014: PPUSH
16015: CALL 16324 0 2
16019: PUSH
16020: LD_VAR 0 10
16024: PUSH
16025: EMPTY
16026: EQUAL
16027: OR
16028: IFFALSE 15973
// result := [ ] ;
16030: LD_ADDR_VAR 0 6
16034: PUSH
16035: EMPTY
16036: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16037: LD_VAR 0 1
16041: PPUSH
16042: LD_VAR 0 2
16046: PPUSH
16047: LD_VAR 0 3
16051: PPUSH
16052: LD_VAR 0 4
16056: PPUSH
16057: LD_VAR 0 5
16061: PPUSH
16062: CALL_OW 448
16066: IFFALSE 16099
// result := [ chassis , engine , control , weapon ] ;
16068: LD_ADDR_VAR 0 6
16072: PUSH
16073: LD_VAR 0 2
16077: PUSH
16078: LD_VAR 0 3
16082: PUSH
16083: LD_VAR 0 4
16087: PUSH
16088: LD_VAR 0 5
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: ST_TO_ADDR
// end ;
16099: LD_VAR 0 6
16103: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16104: LD_INT 0
16106: PPUSH
// if not chassis or not engine then
16107: LD_VAR 0 1
16111: NOT
16112: PUSH
16113: LD_VAR 0 2
16117: NOT
16118: OR
16119: IFFALSE 16123
// exit ;
16121: GO 16319
// case engine of engine_solar :
16123: LD_VAR 0 2
16127: PUSH
16128: LD_INT 2
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16174
16136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16137: LD_ADDR_VAR 0 3
16141: PUSH
16142: LD_INT 11
16144: PUSH
16145: LD_INT 12
16147: PUSH
16148: LD_INT 13
16150: PUSH
16151: LD_INT 14
16153: PUSH
16154: LD_INT 1
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: LD_INT 3
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: ST_TO_ADDR
16172: GO 16303
16174: LD_INT 1
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16182
16180: GO 16244
16182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: LD_INT 11
16190: PUSH
16191: LD_INT 12
16193: PUSH
16194: LD_INT 13
16196: PUSH
16197: LD_INT 14
16199: PUSH
16200: LD_INT 1
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: LD_INT 3
16208: PUSH
16209: LD_INT 4
16211: PUSH
16212: LD_INT 5
16214: PUSH
16215: LD_INT 21
16217: PUSH
16218: LD_INT 23
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_INT 24
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: ST_TO_ADDR
16242: GO 16303
16244: LD_INT 3
16246: DOUBLE
16247: EQUAL
16248: IFTRUE 16252
16250: GO 16302
16252: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_INT 13
16260: PUSH
16261: LD_INT 14
16263: PUSH
16264: LD_INT 2
16266: PUSH
16267: LD_INT 3
16269: PUSH
16270: LD_INT 4
16272: PUSH
16273: LD_INT 5
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_INT 23
16284: PUSH
16285: LD_INT 24
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: ST_TO_ADDR
16300: GO 16303
16302: POP
// result := ( chassis in result ) ;
16303: LD_ADDR_VAR 0 3
16307: PUSH
16308: LD_VAR 0 1
16312: PUSH
16313: LD_VAR 0 3
16317: IN
16318: ST_TO_ADDR
// end ;
16319: LD_VAR 0 3
16323: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16324: LD_INT 0
16326: PPUSH
// if not chassis or not weapon then
16327: LD_VAR 0 1
16331: NOT
16332: PUSH
16333: LD_VAR 0 2
16337: NOT
16338: OR
16339: IFFALSE 16343
// exit ;
16341: GO 17369
// case weapon of us_machine_gun :
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 2
16350: DOUBLE
16351: EQUAL
16352: IFTRUE 16356
16354: GO 16386
16356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16357: LD_ADDR_VAR 0 3
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: LD_INT 2
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: LD_INT 4
16373: PUSH
16374: LD_INT 5
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: ST_TO_ADDR
16384: GO 17353
16386: LD_INT 3
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16424
16394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 3
16408: PUSH
16409: LD_INT 4
16411: PUSH
16412: LD_INT 5
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: ST_TO_ADDR
16422: GO 17353
16424: LD_INT 11
16426: DOUBLE
16427: EQUAL
16428: IFTRUE 16432
16430: GO 16462
16432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16433: LD_ADDR_VAR 0 3
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 3
16446: PUSH
16447: LD_INT 4
16449: PUSH
16450: LD_INT 5
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: ST_TO_ADDR
16460: GO 17353
16462: LD_INT 4
16464: DOUBLE
16465: EQUAL
16466: IFTRUE 16470
16468: GO 16496
16470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16471: LD_ADDR_VAR 0 3
16475: PUSH
16476: LD_INT 2
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: LD_INT 4
16484: PUSH
16485: LD_INT 5
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: ST_TO_ADDR
16494: GO 17353
16496: LD_INT 5
16498: DOUBLE
16499: EQUAL
16500: IFTRUE 16504
16502: GO 16530
16504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: ST_TO_ADDR
16528: GO 17353
16530: LD_INT 9
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16564
16538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 3
16549: PUSH
16550: LD_INT 4
16552: PUSH
16553: LD_INT 5
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: ST_TO_ADDR
16562: GO 17353
16564: LD_INT 7
16566: DOUBLE
16567: EQUAL
16568: IFTRUE 16572
16570: GO 16598
16572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16573: LD_ADDR_VAR 0 3
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 4
16586: PUSH
16587: LD_INT 5
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: ST_TO_ADDR
16596: GO 17353
16598: LD_INT 12
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16632
16606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16607: LD_ADDR_VAR 0 3
16611: PUSH
16612: LD_INT 2
16614: PUSH
16615: LD_INT 3
16617: PUSH
16618: LD_INT 4
16620: PUSH
16621: LD_INT 5
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: ST_TO_ADDR
16630: GO 17353
16632: LD_INT 13
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16666
16640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: LD_INT 3
16651: PUSH
16652: LD_INT 4
16654: PUSH
16655: LD_INT 5
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: ST_TO_ADDR
16664: GO 17353
16666: LD_INT 14
16668: DOUBLE
16669: EQUAL
16670: IFTRUE 16674
16672: GO 16692
16674: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16675: LD_ADDR_VAR 0 3
16679: PUSH
16680: LD_INT 4
16682: PUSH
16683: LD_INT 5
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: ST_TO_ADDR
16690: GO 17353
16692: LD_INT 6
16694: DOUBLE
16695: EQUAL
16696: IFTRUE 16700
16698: GO 16718
16700: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_INT 4
16708: PUSH
16709: LD_INT 5
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: ST_TO_ADDR
16716: GO 17353
16718: LD_INT 10
16720: DOUBLE
16721: EQUAL
16722: IFTRUE 16726
16724: GO 16744
16726: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16727: LD_ADDR_VAR 0 3
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: ST_TO_ADDR
16742: GO 17353
16744: LD_INT 22
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16778
16752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16753: LD_ADDR_VAR 0 3
16757: PUSH
16758: LD_INT 11
16760: PUSH
16761: LD_INT 12
16763: PUSH
16764: LD_INT 13
16766: PUSH
16767: LD_INT 14
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: ST_TO_ADDR
16776: GO 17353
16778: LD_INT 23
16780: DOUBLE
16781: EQUAL
16782: IFTRUE 16786
16784: GO 16812
16786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_INT 11
16794: PUSH
16795: LD_INT 12
16797: PUSH
16798: LD_INT 13
16800: PUSH
16801: LD_INT 14
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: ST_TO_ADDR
16810: GO 17353
16812: LD_INT 24
16814: DOUBLE
16815: EQUAL
16816: IFTRUE 16820
16818: GO 16846
16820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16821: LD_ADDR_VAR 0 3
16825: PUSH
16826: LD_INT 11
16828: PUSH
16829: LD_INT 12
16831: PUSH
16832: LD_INT 13
16834: PUSH
16835: LD_INT 14
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: ST_TO_ADDR
16844: GO 17353
16846: LD_INT 30
16848: DOUBLE
16849: EQUAL
16850: IFTRUE 16854
16852: GO 16880
16854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: LD_INT 11
16862: PUSH
16863: LD_INT 12
16865: PUSH
16866: LD_INT 13
16868: PUSH
16869: LD_INT 14
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: ST_TO_ADDR
16878: GO 17353
16880: LD_INT 25
16882: DOUBLE
16883: EQUAL
16884: IFTRUE 16888
16886: GO 16906
16888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16889: LD_ADDR_VAR 0 3
16893: PUSH
16894: LD_INT 13
16896: PUSH
16897: LD_INT 14
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: ST_TO_ADDR
16904: GO 17353
16906: LD_INT 27
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16932
16914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: LD_INT 13
16922: PUSH
16923: LD_INT 14
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: ST_TO_ADDR
16930: GO 17353
16932: LD_INT 28
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 16958
16940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16941: LD_ADDR_VAR 0 3
16945: PUSH
16946: LD_INT 13
16948: PUSH
16949: LD_INT 14
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: ST_TO_ADDR
16956: GO 17353
16958: LD_INT 29
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 16984
16966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16967: LD_ADDR_VAR 0 3
16971: PUSH
16972: LD_INT 13
16974: PUSH
16975: LD_INT 14
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: ST_TO_ADDR
16982: GO 17353
16984: LD_INT 31
16986: DOUBLE
16987: EQUAL
16988: IFTRUE 16992
16990: GO 17010
16992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16993: LD_ADDR_VAR 0 3
16997: PUSH
16998: LD_INT 13
17000: PUSH
17001: LD_INT 14
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: ST_TO_ADDR
17008: GO 17353
17010: LD_INT 26
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17036
17018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17019: LD_ADDR_VAR 0 3
17023: PUSH
17024: LD_INT 13
17026: PUSH
17027: LD_INT 14
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: ST_TO_ADDR
17034: GO 17353
17036: LD_INT 42
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17070
17044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17045: LD_ADDR_VAR 0 3
17049: PUSH
17050: LD_INT 21
17052: PUSH
17053: LD_INT 22
17055: PUSH
17056: LD_INT 23
17058: PUSH
17059: LD_INT 24
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: ST_TO_ADDR
17068: GO 17353
17070: LD_INT 43
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17104
17078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17079: LD_ADDR_VAR 0 3
17083: PUSH
17084: LD_INT 21
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_INT 23
17092: PUSH
17093: LD_INT 24
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: ST_TO_ADDR
17102: GO 17353
17104: LD_INT 44
17106: DOUBLE
17107: EQUAL
17108: IFTRUE 17112
17110: GO 17138
17112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_INT 21
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_INT 23
17126: PUSH
17127: LD_INT 24
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: ST_TO_ADDR
17136: GO 17353
17138: LD_INT 45
17140: DOUBLE
17141: EQUAL
17142: IFTRUE 17146
17144: GO 17172
17146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17147: LD_ADDR_VAR 0 3
17151: PUSH
17152: LD_INT 21
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 23
17160: PUSH
17161: LD_INT 24
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: ST_TO_ADDR
17170: GO 17353
17172: LD_INT 49
17174: DOUBLE
17175: EQUAL
17176: IFTRUE 17180
17178: GO 17206
17180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17181: LD_ADDR_VAR 0 3
17185: PUSH
17186: LD_INT 21
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_INT 23
17194: PUSH
17195: LD_INT 24
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: ST_TO_ADDR
17204: GO 17353
17206: LD_INT 51
17208: DOUBLE
17209: EQUAL
17210: IFTRUE 17214
17212: GO 17240
17214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17215: LD_ADDR_VAR 0 3
17219: PUSH
17220: LD_INT 21
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 23
17228: PUSH
17229: LD_INT 24
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: ST_TO_ADDR
17238: GO 17353
17240: LD_INT 52
17242: DOUBLE
17243: EQUAL
17244: IFTRUE 17248
17246: GO 17274
17248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17249: LD_ADDR_VAR 0 3
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 23
17262: PUSH
17263: LD_INT 24
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: ST_TO_ADDR
17272: GO 17353
17274: LD_INT 53
17276: DOUBLE
17277: EQUAL
17278: IFTRUE 17282
17280: GO 17300
17282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17283: LD_ADDR_VAR 0 3
17287: PUSH
17288: LD_INT 23
17290: PUSH
17291: LD_INT 24
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: ST_TO_ADDR
17298: GO 17353
17300: LD_INT 46
17302: DOUBLE
17303: EQUAL
17304: IFTRUE 17308
17306: GO 17326
17308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: LD_INT 23
17316: PUSH
17317: LD_INT 24
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: ST_TO_ADDR
17324: GO 17353
17326: LD_INT 47
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17334
17332: GO 17352
17334: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17335: LD_ADDR_VAR 0 3
17339: PUSH
17340: LD_INT 23
17342: PUSH
17343: LD_INT 24
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: ST_TO_ADDR
17350: GO 17353
17352: POP
// result := ( chassis in result ) ;
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: LD_VAR 0 1
17362: PUSH
17363: LD_VAR 0 3
17367: IN
17368: ST_TO_ADDR
// end ;
17369: LD_VAR 0 3
17373: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
// result := array ;
17383: LD_ADDR_VAR 0 5
17387: PUSH
17388: LD_VAR 0 1
17392: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17393: LD_VAR 0 1
17397: NOT
17398: PUSH
17399: LD_VAR 0 2
17403: NOT
17404: OR
17405: PUSH
17406: LD_VAR 0 3
17410: NOT
17411: OR
17412: PUSH
17413: LD_VAR 0 2
17417: PUSH
17418: LD_VAR 0 1
17422: GREATER
17423: OR
17424: PUSH
17425: LD_VAR 0 3
17429: PUSH
17430: LD_VAR 0 1
17434: GREATER
17435: OR
17436: IFFALSE 17440
// exit ;
17438: GO 17736
// if direction then
17440: LD_VAR 0 4
17444: IFFALSE 17508
// begin d := 1 ;
17446: LD_ADDR_VAR 0 9
17450: PUSH
17451: LD_INT 1
17453: ST_TO_ADDR
// if i_from > i_to then
17454: LD_VAR 0 2
17458: PUSH
17459: LD_VAR 0 3
17463: GREATER
17464: IFFALSE 17490
// length := ( array - i_from ) + i_to else
17466: LD_ADDR_VAR 0 11
17470: PUSH
17471: LD_VAR 0 1
17475: PUSH
17476: LD_VAR 0 2
17480: MINUS
17481: PUSH
17482: LD_VAR 0 3
17486: PLUS
17487: ST_TO_ADDR
17488: GO 17506
// length := i_to - i_from ;
17490: LD_ADDR_VAR 0 11
17494: PUSH
17495: LD_VAR 0 3
17499: PUSH
17500: LD_VAR 0 2
17504: MINUS
17505: ST_TO_ADDR
// end else
17506: GO 17569
// begin d := - 1 ;
17508: LD_ADDR_VAR 0 9
17512: PUSH
17513: LD_INT 1
17515: NEG
17516: ST_TO_ADDR
// if i_from > i_to then
17517: LD_VAR 0 2
17521: PUSH
17522: LD_VAR 0 3
17526: GREATER
17527: IFFALSE 17547
// length := i_from - i_to else
17529: LD_ADDR_VAR 0 11
17533: PUSH
17534: LD_VAR 0 2
17538: PUSH
17539: LD_VAR 0 3
17543: MINUS
17544: ST_TO_ADDR
17545: GO 17569
// length := ( array - i_to ) + i_from ;
17547: LD_ADDR_VAR 0 11
17551: PUSH
17552: LD_VAR 0 1
17556: PUSH
17557: LD_VAR 0 3
17561: MINUS
17562: PUSH
17563: LD_VAR 0 2
17567: PLUS
17568: ST_TO_ADDR
// end ; if not length then
17569: LD_VAR 0 11
17573: NOT
17574: IFFALSE 17578
// exit ;
17576: GO 17736
// tmp := array ;
17578: LD_ADDR_VAR 0 10
17582: PUSH
17583: LD_VAR 0 1
17587: ST_TO_ADDR
// for i = 1 to length do
17588: LD_ADDR_VAR 0 6
17592: PUSH
17593: DOUBLE
17594: LD_INT 1
17596: DEC
17597: ST_TO_ADDR
17598: LD_VAR 0 11
17602: PUSH
17603: FOR_TO
17604: IFFALSE 17724
// begin for j = 1 to array do
17606: LD_ADDR_VAR 0 7
17610: PUSH
17611: DOUBLE
17612: LD_INT 1
17614: DEC
17615: ST_TO_ADDR
17616: LD_VAR 0 1
17620: PUSH
17621: FOR_TO
17622: IFFALSE 17710
// begin k := j + d ;
17624: LD_ADDR_VAR 0 8
17628: PUSH
17629: LD_VAR 0 7
17633: PUSH
17634: LD_VAR 0 9
17638: PLUS
17639: ST_TO_ADDR
// if k > array then
17640: LD_VAR 0 8
17644: PUSH
17645: LD_VAR 0 1
17649: GREATER
17650: IFFALSE 17660
// k := 1 ;
17652: LD_ADDR_VAR 0 8
17656: PUSH
17657: LD_INT 1
17659: ST_TO_ADDR
// if not k then
17660: LD_VAR 0 8
17664: NOT
17665: IFFALSE 17677
// k := array ;
17667: LD_ADDR_VAR 0 8
17671: PUSH
17672: LD_VAR 0 1
17676: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17677: LD_ADDR_VAR 0 10
17681: PUSH
17682: LD_VAR 0 10
17686: PPUSH
17687: LD_VAR 0 8
17691: PPUSH
17692: LD_VAR 0 1
17696: PUSH
17697: LD_VAR 0 7
17701: ARRAY
17702: PPUSH
17703: CALL_OW 1
17707: ST_TO_ADDR
// end ;
17708: GO 17621
17710: POP
17711: POP
// array := tmp ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: LD_VAR 0 10
17721: ST_TO_ADDR
// end ;
17722: GO 17603
17724: POP
17725: POP
// result := array ;
17726: LD_ADDR_VAR 0 5
17730: PUSH
17731: LD_VAR 0 1
17735: ST_TO_ADDR
// end ;
17736: LD_VAR 0 5
17740: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
// result := 0 ;
17745: LD_ADDR_VAR 0 3
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// if not array or not value in array then
17753: LD_VAR 0 1
17757: NOT
17758: PUSH
17759: LD_VAR 0 2
17763: PUSH
17764: LD_VAR 0 1
17768: IN
17769: NOT
17770: OR
17771: IFFALSE 17775
// exit ;
17773: GO 17829
// for i = 1 to array do
17775: LD_ADDR_VAR 0 4
17779: PUSH
17780: DOUBLE
17781: LD_INT 1
17783: DEC
17784: ST_TO_ADDR
17785: LD_VAR 0 1
17789: PUSH
17790: FOR_TO
17791: IFFALSE 17827
// if value = array [ i ] then
17793: LD_VAR 0 2
17797: PUSH
17798: LD_VAR 0 1
17802: PUSH
17803: LD_VAR 0 4
17807: ARRAY
17808: EQUAL
17809: IFFALSE 17825
// begin result := i ;
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: LD_VAR 0 4
17820: ST_TO_ADDR
// exit ;
17821: POP
17822: POP
17823: GO 17829
// end ;
17825: GO 17790
17827: POP
17828: POP
// end ;
17829: LD_VAR 0 3
17833: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17834: LD_INT 0
17836: PPUSH
// vc_chassis := chassis ;
17837: LD_ADDR_OWVAR 37
17841: PUSH
17842: LD_VAR 0 1
17846: ST_TO_ADDR
// vc_engine := engine ;
17847: LD_ADDR_OWVAR 39
17851: PUSH
17852: LD_VAR 0 2
17856: ST_TO_ADDR
// vc_control := control ;
17857: LD_ADDR_OWVAR 38
17861: PUSH
17862: LD_VAR 0 3
17866: ST_TO_ADDR
// vc_weapon := weapon ;
17867: LD_ADDR_OWVAR 40
17871: PUSH
17872: LD_VAR 0 4
17876: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17877: LD_ADDR_OWVAR 41
17881: PUSH
17882: LD_VAR 0 5
17886: ST_TO_ADDR
// end ;
17887: LD_VAR 0 6
17891: RET
// export function WantPlant ( unit ) ; var task ; begin
17892: LD_INT 0
17894: PPUSH
17895: PPUSH
// result := false ;
17896: LD_ADDR_VAR 0 2
17900: PUSH
17901: LD_INT 0
17903: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 437
17918: ST_TO_ADDR
// if task then
17919: LD_VAR 0 3
17923: IFFALSE 17951
// if task [ 1 ] [ 1 ] = p then
17925: LD_VAR 0 3
17929: PUSH
17930: LD_INT 1
17932: ARRAY
17933: PUSH
17934: LD_INT 1
17936: ARRAY
17937: PUSH
17938: LD_STRING p
17940: EQUAL
17941: IFFALSE 17951
// result := true ;
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: LD_INT 1
17950: ST_TO_ADDR
// end ;
17951: LD_VAR 0 2
17955: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17956: LD_INT 0
17958: PPUSH
17959: PPUSH
17960: PPUSH
17961: PPUSH
// if pos < 1 then
17962: LD_VAR 0 2
17966: PUSH
17967: LD_INT 1
17969: LESS
17970: IFFALSE 17974
// exit ;
17972: GO 18277
// if pos = 1 then
17974: LD_VAR 0 2
17978: PUSH
17979: LD_INT 1
17981: EQUAL
17982: IFFALSE 18015
// result := Replace ( arr , pos [ 1 ] , value ) else
17984: LD_ADDR_VAR 0 4
17988: PUSH
17989: LD_VAR 0 1
17993: PPUSH
17994: LD_VAR 0 2
17998: PUSH
17999: LD_INT 1
18001: ARRAY
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: CALL_OW 1
18012: ST_TO_ADDR
18013: GO 18277
// begin tmp := arr ;
18015: LD_ADDR_VAR 0 6
18019: PUSH
18020: LD_VAR 0 1
18024: ST_TO_ADDR
// s_arr := [ tmp ] ;
18025: LD_ADDR_VAR 0 7
18029: PUSH
18030: LD_VAR 0 6
18034: PUSH
18035: EMPTY
18036: LIST
18037: ST_TO_ADDR
// for i = 1 to pos - 1 do
18038: LD_ADDR_VAR 0 5
18042: PUSH
18043: DOUBLE
18044: LD_INT 1
18046: DEC
18047: ST_TO_ADDR
18048: LD_VAR 0 2
18052: PUSH
18053: LD_INT 1
18055: MINUS
18056: PUSH
18057: FOR_TO
18058: IFFALSE 18103
// begin tmp := tmp [ pos [ i ] ] ;
18060: LD_ADDR_VAR 0 6
18064: PUSH
18065: LD_VAR 0 6
18069: PUSH
18070: LD_VAR 0 2
18074: PUSH
18075: LD_VAR 0 5
18079: ARRAY
18080: ARRAY
18081: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18082: LD_ADDR_VAR 0 7
18086: PUSH
18087: LD_VAR 0 7
18091: PUSH
18092: LD_VAR 0 6
18096: PUSH
18097: EMPTY
18098: LIST
18099: ADD
18100: ST_TO_ADDR
// end ;
18101: GO 18057
18103: POP
18104: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18105: LD_ADDR_VAR 0 6
18109: PUSH
18110: LD_VAR 0 6
18114: PPUSH
18115: LD_VAR 0 2
18119: PUSH
18120: LD_VAR 0 2
18124: ARRAY
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: CALL_OW 1
18135: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18136: LD_ADDR_VAR 0 7
18140: PUSH
18141: LD_VAR 0 7
18145: PPUSH
18146: LD_VAR 0 7
18150: PPUSH
18151: LD_VAR 0 6
18155: PPUSH
18156: CALL_OW 1
18160: ST_TO_ADDR
// for i = s_arr downto 2 do
18161: LD_ADDR_VAR 0 5
18165: PUSH
18166: DOUBLE
18167: LD_VAR 0 7
18171: INC
18172: ST_TO_ADDR
18173: LD_INT 2
18175: PUSH
18176: FOR_DOWNTO
18177: IFFALSE 18261
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18179: LD_ADDR_VAR 0 6
18183: PUSH
18184: LD_VAR 0 7
18188: PUSH
18189: LD_VAR 0 5
18193: PUSH
18194: LD_INT 1
18196: MINUS
18197: ARRAY
18198: PPUSH
18199: LD_VAR 0 2
18203: PUSH
18204: LD_VAR 0 5
18208: PUSH
18209: LD_INT 1
18211: MINUS
18212: ARRAY
18213: PPUSH
18214: LD_VAR 0 7
18218: PUSH
18219: LD_VAR 0 5
18223: ARRAY
18224: PPUSH
18225: CALL_OW 1
18229: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18230: LD_ADDR_VAR 0 7
18234: PUSH
18235: LD_VAR 0 7
18239: PPUSH
18240: LD_VAR 0 5
18244: PUSH
18245: LD_INT 1
18247: MINUS
18248: PPUSH
18249: LD_VAR 0 6
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// end ;
18259: GO 18176
18261: POP
18262: POP
// result := s_arr [ 1 ] ;
18263: LD_ADDR_VAR 0 4
18267: PUSH
18268: LD_VAR 0 7
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: ST_TO_ADDR
// end ; end ;
18277: LD_VAR 0 4
18281: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18282: LD_INT 0
18284: PPUSH
18285: PPUSH
// if not list then
18286: LD_VAR 0 1
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18386
// i := list [ pos1 ] ;
18295: LD_ADDR_VAR 0 5
18299: PUSH
18300: LD_VAR 0 1
18304: PUSH
18305: LD_VAR 0 2
18309: ARRAY
18310: ST_TO_ADDR
// if not i then
18311: LD_VAR 0 5
18315: NOT
18316: IFFALSE 18320
// exit ;
18318: GO 18386
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18320: LD_ADDR_VAR 0 1
18324: PUSH
18325: LD_VAR 0 1
18329: PPUSH
18330: LD_VAR 0 2
18334: PPUSH
18335: LD_VAR 0 1
18339: PUSH
18340: LD_VAR 0 3
18344: ARRAY
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18351: LD_ADDR_VAR 0 1
18355: PUSH
18356: LD_VAR 0 1
18360: PPUSH
18361: LD_VAR 0 3
18365: PPUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: CALL_OW 1
18375: ST_TO_ADDR
// result := list ;
18376: LD_ADDR_VAR 0 4
18380: PUSH
18381: LD_VAR 0 1
18385: ST_TO_ADDR
// end ;
18386: LD_VAR 0 4
18390: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18391: LD_INT 0
18393: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18394: LD_ADDR_VAR 0 5
18398: PUSH
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 250
18408: PPUSH
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 251
18418: PPUSH
18419: LD_VAR 0 2
18423: PPUSH
18424: LD_VAR 0 3
18428: PPUSH
18429: LD_VAR 0 4
18433: PPUSH
18434: CALL 18444 0 5
18438: ST_TO_ADDR
// end ;
18439: LD_VAR 0 5
18443: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
// if not list then
18450: LD_VAR 0 3
18454: NOT
18455: IFFALSE 18459
// exit ;
18457: GO 18847
// result := [ ] ;
18459: LD_ADDR_VAR 0 6
18463: PUSH
18464: EMPTY
18465: ST_TO_ADDR
// for i in list do
18466: LD_ADDR_VAR 0 7
18470: PUSH
18471: LD_VAR 0 3
18475: PUSH
18476: FOR_IN
18477: IFFALSE 18679
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18479: LD_ADDR_VAR 0 9
18483: PUSH
18484: LD_VAR 0 7
18488: PPUSH
18489: LD_VAR 0 1
18493: PPUSH
18494: LD_VAR 0 2
18498: PPUSH
18499: CALL_OW 297
18503: ST_TO_ADDR
// if not result then
18504: LD_VAR 0 6
18508: NOT
18509: IFFALSE 18535
// result := [ [ i , tmp ] ] else
18511: LD_ADDR_VAR 0 6
18515: PUSH
18516: LD_VAR 0 7
18520: PUSH
18521: LD_VAR 0 9
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: ST_TO_ADDR
18533: GO 18677
// begin if result [ result ] [ 2 ] < tmp then
18535: LD_VAR 0 6
18539: PUSH
18540: LD_VAR 0 6
18544: ARRAY
18545: PUSH
18546: LD_INT 2
18548: ARRAY
18549: PUSH
18550: LD_VAR 0 9
18554: LESS
18555: IFFALSE 18597
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18557: LD_ADDR_VAR 0 6
18561: PUSH
18562: LD_VAR 0 6
18566: PPUSH
18567: LD_VAR 0 6
18571: PUSH
18572: LD_INT 1
18574: PLUS
18575: PPUSH
18576: LD_VAR 0 7
18580: PUSH
18581: LD_VAR 0 9
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PPUSH
18590: CALL_OW 2
18594: ST_TO_ADDR
18595: GO 18677
// for j = 1 to result do
18597: LD_ADDR_VAR 0 8
18601: PUSH
18602: DOUBLE
18603: LD_INT 1
18605: DEC
18606: ST_TO_ADDR
18607: LD_VAR 0 6
18611: PUSH
18612: FOR_TO
18613: IFFALSE 18675
// begin if tmp < result [ j ] [ 2 ] then
18615: LD_VAR 0 9
18619: PUSH
18620: LD_VAR 0 6
18624: PUSH
18625: LD_VAR 0 8
18629: ARRAY
18630: PUSH
18631: LD_INT 2
18633: ARRAY
18634: LESS
18635: IFFALSE 18673
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18637: LD_ADDR_VAR 0 6
18641: PUSH
18642: LD_VAR 0 6
18646: PPUSH
18647: LD_VAR 0 8
18651: PPUSH
18652: LD_VAR 0 7
18656: PUSH
18657: LD_VAR 0 9
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 2
18670: ST_TO_ADDR
// break ;
18671: GO 18675
// end ; end ;
18673: GO 18612
18675: POP
18676: POP
// end ; end ;
18677: GO 18476
18679: POP
18680: POP
// if result and not asc then
18681: LD_VAR 0 6
18685: PUSH
18686: LD_VAR 0 4
18690: NOT
18691: AND
18692: IFFALSE 18767
// begin tmp := result ;
18694: LD_ADDR_VAR 0 9
18698: PUSH
18699: LD_VAR 0 6
18703: ST_TO_ADDR
// for i = tmp downto 1 do
18704: LD_ADDR_VAR 0 7
18708: PUSH
18709: DOUBLE
18710: LD_VAR 0 9
18714: INC
18715: ST_TO_ADDR
18716: LD_INT 1
18718: PUSH
18719: FOR_DOWNTO
18720: IFFALSE 18765
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18722: LD_ADDR_VAR 0 6
18726: PUSH
18727: LD_VAR 0 6
18731: PPUSH
18732: LD_VAR 0 9
18736: PUSH
18737: LD_VAR 0 7
18741: MINUS
18742: PUSH
18743: LD_INT 1
18745: PLUS
18746: PPUSH
18747: LD_VAR 0 9
18751: PUSH
18752: LD_VAR 0 7
18756: ARRAY
18757: PPUSH
18758: CALL_OW 1
18762: ST_TO_ADDR
18763: GO 18719
18765: POP
18766: POP
// end ; tmp := [ ] ;
18767: LD_ADDR_VAR 0 9
18771: PUSH
18772: EMPTY
18773: ST_TO_ADDR
// if mode then
18774: LD_VAR 0 5
18778: IFFALSE 18847
// begin for i = 1 to result do
18780: LD_ADDR_VAR 0 7
18784: PUSH
18785: DOUBLE
18786: LD_INT 1
18788: DEC
18789: ST_TO_ADDR
18790: LD_VAR 0 6
18794: PUSH
18795: FOR_TO
18796: IFFALSE 18835
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18798: LD_ADDR_VAR 0 9
18802: PUSH
18803: LD_VAR 0 9
18807: PPUSH
18808: LD_VAR 0 7
18812: PPUSH
18813: LD_VAR 0 6
18817: PUSH
18818: LD_VAR 0 7
18822: ARRAY
18823: PUSH
18824: LD_INT 1
18826: ARRAY
18827: PPUSH
18828: CALL_OW 1
18832: ST_TO_ADDR
18833: GO 18795
18835: POP
18836: POP
// result := tmp ;
18837: LD_ADDR_VAR 0 6
18841: PUSH
18842: LD_VAR 0 9
18846: ST_TO_ADDR
// end ; end ;
18847: LD_VAR 0 6
18851: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18852: LD_INT 0
18854: PPUSH
18855: PPUSH
18856: PPUSH
18857: PPUSH
18858: PPUSH
18859: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18860: LD_ADDR_VAR 0 5
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: EMPTY
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: ST_TO_ADDR
// if not x or not y then
18882: LD_VAR 0 2
18886: NOT
18887: PUSH
18888: LD_VAR 0 3
18892: NOT
18893: OR
18894: IFFALSE 18898
// exit ;
18896: GO 20544
// if not range then
18898: LD_VAR 0 4
18902: NOT
18903: IFFALSE 18913
// range := 10 ;
18905: LD_ADDR_VAR 0 4
18909: PUSH
18910: LD_INT 10
18912: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18913: LD_ADDR_VAR 0 8
18917: PUSH
18918: LD_INT 81
18920: PUSH
18921: LD_VAR 0 1
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 92
18932: PUSH
18933: LD_VAR 0 2
18937: PUSH
18938: LD_VAR 0 3
18942: PUSH
18943: LD_VAR 0 4
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 3
18956: PUSH
18957: LD_INT 21
18959: PUSH
18960: LD_INT 3
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: ST_TO_ADDR
// if not tmp then
18981: LD_VAR 0 8
18985: NOT
18986: IFFALSE 18990
// exit ;
18988: GO 20544
// for i in tmp do
18990: LD_ADDR_VAR 0 6
18994: PUSH
18995: LD_VAR 0 8
18999: PUSH
19000: FOR_IN
19001: IFFALSE 20519
// begin points := [ 0 , 0 , 0 ] ;
19003: LD_ADDR_VAR 0 9
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: ST_TO_ADDR
// bpoints := 1 ;
19022: LD_ADDR_VAR 0 10
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19030: LD_VAR 0 6
19034: PPUSH
19035: CALL_OW 247
19039: PUSH
19040: LD_INT 1
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19626
19048: POP
// begin if GetClass ( i ) = 1 then
19049: LD_VAR 0 6
19053: PPUSH
19054: CALL_OW 257
19058: PUSH
19059: LD_INT 1
19061: EQUAL
19062: IFFALSE 19083
// points := [ 10 , 5 , 3 ] ;
19064: LD_ADDR_VAR 0 9
19068: PUSH
19069: LD_INT 10
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: LD_INT 3
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19083: LD_VAR 0 6
19087: PPUSH
19088: CALL_OW 257
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: LD_INT 3
19098: PUSH
19099: LD_INT 4
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: IN
19107: IFFALSE 19128
// points := [ 3 , 2 , 1 ] ;
19109: LD_ADDR_VAR 0 9
19113: PUSH
19114: LD_INT 3
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19128: LD_VAR 0 6
19132: PPUSH
19133: CALL_OW 257
19137: PUSH
19138: LD_INT 5
19140: EQUAL
19141: IFFALSE 19162
// points := [ 130 , 5 , 2 ] ;
19143: LD_ADDR_VAR 0 9
19147: PUSH
19148: LD_INT 130
19150: PUSH
19151: LD_INT 5
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19162: LD_VAR 0 6
19166: PPUSH
19167: CALL_OW 257
19171: PUSH
19172: LD_INT 8
19174: EQUAL
19175: IFFALSE 19196
// points := [ 35 , 35 , 30 ] ;
19177: LD_ADDR_VAR 0 9
19181: PUSH
19182: LD_INT 35
19184: PUSH
19185: LD_INT 35
19187: PUSH
19188: LD_INT 30
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19196: LD_VAR 0 6
19200: PPUSH
19201: CALL_OW 257
19205: PUSH
19206: LD_INT 9
19208: EQUAL
19209: IFFALSE 19230
// points := [ 20 , 55 , 40 ] ;
19211: LD_ADDR_VAR 0 9
19215: PUSH
19216: LD_INT 20
19218: PUSH
19219: LD_INT 55
19221: PUSH
19222: LD_INT 40
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19230: LD_VAR 0 6
19234: PPUSH
19235: CALL_OW 257
19239: PUSH
19240: LD_INT 12
19242: PUSH
19243: LD_INT 16
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: IN
19250: IFFALSE 19271
// points := [ 5 , 3 , 2 ] ;
19252: LD_ADDR_VAR 0 9
19256: PUSH
19257: LD_INT 5
19259: PUSH
19260: LD_INT 3
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19271: LD_VAR 0 6
19275: PPUSH
19276: CALL_OW 257
19280: PUSH
19281: LD_INT 17
19283: EQUAL
19284: IFFALSE 19305
// points := [ 100 , 50 , 75 ] ;
19286: LD_ADDR_VAR 0 9
19290: PUSH
19291: LD_INT 100
19293: PUSH
19294: LD_INT 50
19296: PUSH
19297: LD_INT 75
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19305: LD_VAR 0 6
19309: PPUSH
19310: CALL_OW 257
19314: PUSH
19315: LD_INT 15
19317: EQUAL
19318: IFFALSE 19339
// points := [ 10 , 5 , 3 ] ;
19320: LD_ADDR_VAR 0 9
19324: PUSH
19325: LD_INT 10
19327: PUSH
19328: LD_INT 5
19330: PUSH
19331: LD_INT 3
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19339: LD_VAR 0 6
19343: PPUSH
19344: CALL_OW 257
19348: PUSH
19349: LD_INT 14
19351: EQUAL
19352: IFFALSE 19373
// points := [ 10 , 0 , 0 ] ;
19354: LD_ADDR_VAR 0 9
19358: PUSH
19359: LD_INT 10
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19373: LD_VAR 0 6
19377: PPUSH
19378: CALL_OW 257
19382: PUSH
19383: LD_INT 11
19385: EQUAL
19386: IFFALSE 19407
// points := [ 30 , 10 , 5 ] ;
19388: LD_ADDR_VAR 0 9
19392: PUSH
19393: LD_INT 30
19395: PUSH
19396: LD_INT 10
19398: PUSH
19399: LD_INT 5
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: LIST
19406: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19407: LD_VAR 0 1
19411: PPUSH
19412: LD_INT 5
19414: PPUSH
19415: CALL_OW 321
19419: PUSH
19420: LD_INT 2
19422: EQUAL
19423: IFFALSE 19440
// bpoints := bpoints * 1.8 ;
19425: LD_ADDR_VAR 0 10
19429: PUSH
19430: LD_VAR 0 10
19434: PUSH
19435: LD_REAL  1.80000000000000E+0000
19438: MUL
19439: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19440: LD_VAR 0 6
19444: PPUSH
19445: CALL_OW 257
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 3
19458: PUSH
19459: LD_INT 4
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: IN
19468: PUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: LD_INT 51
19476: PPUSH
19477: CALL_OW 321
19481: PUSH
19482: LD_INT 2
19484: EQUAL
19485: AND
19486: IFFALSE 19503
// bpoints := bpoints * 1.2 ;
19488: LD_ADDR_VAR 0 10
19492: PUSH
19493: LD_VAR 0 10
19497: PUSH
19498: LD_REAL  1.20000000000000E+0000
19501: MUL
19502: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19503: LD_VAR 0 6
19507: PPUSH
19508: CALL_OW 257
19512: PUSH
19513: LD_INT 5
19515: PUSH
19516: LD_INT 7
19518: PUSH
19519: LD_INT 9
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: IN
19527: PUSH
19528: LD_VAR 0 1
19532: PPUSH
19533: LD_INT 52
19535: PPUSH
19536: CALL_OW 321
19540: PUSH
19541: LD_INT 2
19543: EQUAL
19544: AND
19545: IFFALSE 19562
// bpoints := bpoints * 1.5 ;
19547: LD_ADDR_VAR 0 10
19551: PUSH
19552: LD_VAR 0 10
19556: PUSH
19557: LD_REAL  1.50000000000000E+0000
19560: MUL
19561: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19562: LD_VAR 0 1
19566: PPUSH
19567: LD_INT 66
19569: PPUSH
19570: CALL_OW 321
19574: PUSH
19575: LD_INT 2
19577: EQUAL
19578: IFFALSE 19595
// bpoints := bpoints * 1.1 ;
19580: LD_ADDR_VAR 0 10
19584: PUSH
19585: LD_VAR 0 10
19589: PUSH
19590: LD_REAL  1.10000000000000E+0000
19593: MUL
19594: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19595: LD_ADDR_VAR 0 10
19599: PUSH
19600: LD_VAR 0 10
19604: PUSH
19605: LD_VAR 0 6
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: CALL_OW 259
19617: PUSH
19618: LD_REAL  1.15000000000000E+0000
19621: MUL
19622: MUL
19623: ST_TO_ADDR
// end ; unit_vehicle :
19624: GO 20448
19626: LD_INT 2
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 20436
19634: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19635: LD_VAR 0 6
19639: PPUSH
19640: CALL_OW 264
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: LD_INT 42
19650: PUSH
19651: LD_INT 24
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: IN
19659: IFFALSE 19680
// points := [ 25 , 5 , 3 ] ;
19661: LD_ADDR_VAR 0 9
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 5
19671: PUSH
19672: LD_INT 3
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19680: LD_VAR 0 6
19684: PPUSH
19685: CALL_OW 264
19689: PUSH
19690: LD_INT 4
19692: PUSH
19693: LD_INT 43
19695: PUSH
19696: LD_INT 25
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: IN
19704: IFFALSE 19725
// points := [ 40 , 15 , 5 ] ;
19706: LD_ADDR_VAR 0 9
19710: PUSH
19711: LD_INT 40
19713: PUSH
19714: LD_INT 15
19716: PUSH
19717: LD_INT 5
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19725: LD_VAR 0 6
19729: PPUSH
19730: CALL_OW 264
19734: PUSH
19735: LD_INT 3
19737: PUSH
19738: LD_INT 23
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: IN
19745: IFFALSE 19766
// points := [ 7 , 25 , 8 ] ;
19747: LD_ADDR_VAR 0 9
19751: PUSH
19752: LD_INT 7
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 8
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19766: LD_VAR 0 6
19770: PPUSH
19771: CALL_OW 264
19775: PUSH
19776: LD_INT 5
19778: PUSH
19779: LD_INT 27
19781: PUSH
19782: LD_INT 44
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: IN
19790: IFFALSE 19811
// points := [ 14 , 50 , 16 ] ;
19792: LD_ADDR_VAR 0 9
19796: PUSH
19797: LD_INT 14
19799: PUSH
19800: LD_INT 50
19802: PUSH
19803: LD_INT 16
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19811: LD_VAR 0 6
19815: PPUSH
19816: CALL_OW 264
19820: PUSH
19821: LD_INT 6
19823: PUSH
19824: LD_INT 46
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: IN
19831: IFFALSE 19852
// points := [ 32 , 120 , 70 ] ;
19833: LD_ADDR_VAR 0 9
19837: PUSH
19838: LD_INT 32
19840: PUSH
19841: LD_INT 120
19843: PUSH
19844: LD_INT 70
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: LIST
19851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19852: LD_VAR 0 6
19856: PPUSH
19857: CALL_OW 264
19861: PUSH
19862: LD_INT 7
19864: PUSH
19865: LD_INT 28
19867: PUSH
19868: LD_INT 45
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: IN
19876: IFFALSE 19897
// points := [ 35 , 20 , 45 ] ;
19878: LD_ADDR_VAR 0 9
19882: PUSH
19883: LD_INT 35
19885: PUSH
19886: LD_INT 20
19888: PUSH
19889: LD_INT 45
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19897: LD_VAR 0 6
19901: PPUSH
19902: CALL_OW 264
19906: PUSH
19907: LD_INT 47
19909: PUSH
19910: EMPTY
19911: LIST
19912: IN
19913: IFFALSE 19934
// points := [ 67 , 45 , 75 ] ;
19915: LD_ADDR_VAR 0 9
19919: PUSH
19920: LD_INT 67
19922: PUSH
19923: LD_INT 45
19925: PUSH
19926: LD_INT 75
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19934: LD_VAR 0 6
19938: PPUSH
19939: CALL_OW 264
19943: PUSH
19944: LD_INT 26
19946: PUSH
19947: EMPTY
19948: LIST
19949: IN
19950: IFFALSE 19971
// points := [ 120 , 30 , 80 ] ;
19952: LD_ADDR_VAR 0 9
19956: PUSH
19957: LD_INT 120
19959: PUSH
19960: LD_INT 30
19962: PUSH
19963: LD_INT 80
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19971: LD_VAR 0 6
19975: PPUSH
19976: CALL_OW 264
19980: PUSH
19981: LD_INT 22
19983: PUSH
19984: EMPTY
19985: LIST
19986: IN
19987: IFFALSE 20008
// points := [ 40 , 1 , 1 ] ;
19989: LD_ADDR_VAR 0 9
19993: PUSH
19994: LD_INT 40
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20008: LD_VAR 0 6
20012: PPUSH
20013: CALL_OW 264
20017: PUSH
20018: LD_INT 29
20020: PUSH
20021: EMPTY
20022: LIST
20023: IN
20024: IFFALSE 20045
// points := [ 70 , 200 , 400 ] ;
20026: LD_ADDR_VAR 0 9
20030: PUSH
20031: LD_INT 70
20033: PUSH
20034: LD_INT 200
20036: PUSH
20037: LD_INT 400
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20045: LD_VAR 0 6
20049: PPUSH
20050: CALL_OW 264
20054: PUSH
20055: LD_INT 14
20057: PUSH
20058: LD_INT 53
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: IN
20065: IFFALSE 20086
// points := [ 40 , 10 , 20 ] ;
20067: LD_ADDR_VAR 0 9
20071: PUSH
20072: LD_INT 40
20074: PUSH
20075: LD_INT 10
20077: PUSH
20078: LD_INT 20
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20086: LD_VAR 0 6
20090: PPUSH
20091: CALL_OW 264
20095: PUSH
20096: LD_INT 9
20098: PUSH
20099: EMPTY
20100: LIST
20101: IN
20102: IFFALSE 20123
// points := [ 5 , 70 , 20 ] ;
20104: LD_ADDR_VAR 0 9
20108: PUSH
20109: LD_INT 5
20111: PUSH
20112: LD_INT 70
20114: PUSH
20115: LD_INT 20
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20123: LD_VAR 0 6
20127: PPUSH
20128: CALL_OW 264
20132: PUSH
20133: LD_INT 10
20135: PUSH
20136: EMPTY
20137: LIST
20138: IN
20139: IFFALSE 20160
// points := [ 35 , 110 , 70 ] ;
20141: LD_ADDR_VAR 0 9
20145: PUSH
20146: LD_INT 35
20148: PUSH
20149: LD_INT 110
20151: PUSH
20152: LD_INT 70
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20160: LD_VAR 0 6
20164: PPUSH
20165: CALL_OW 265
20169: PUSH
20170: LD_INT 25
20172: EQUAL
20173: IFFALSE 20194
// points := [ 80 , 65 , 100 ] ;
20175: LD_ADDR_VAR 0 9
20179: PUSH
20180: LD_INT 80
20182: PUSH
20183: LD_INT 65
20185: PUSH
20186: LD_INT 100
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20194: LD_VAR 0 6
20198: PPUSH
20199: CALL_OW 263
20203: PUSH
20204: LD_INT 1
20206: EQUAL
20207: IFFALSE 20242
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20209: LD_ADDR_VAR 0 10
20213: PUSH
20214: LD_VAR 0 10
20218: PUSH
20219: LD_VAR 0 6
20223: PPUSH
20224: CALL_OW 311
20228: PPUSH
20229: LD_INT 3
20231: PPUSH
20232: CALL_OW 259
20236: PUSH
20237: LD_INT 4
20239: MUL
20240: MUL
20241: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20242: LD_VAR 0 6
20246: PPUSH
20247: CALL_OW 263
20251: PUSH
20252: LD_INT 2
20254: EQUAL
20255: IFFALSE 20306
// begin j := IsControledBy ( i ) ;
20257: LD_ADDR_VAR 0 7
20261: PUSH
20262: LD_VAR 0 6
20266: PPUSH
20267: CALL_OW 312
20271: ST_TO_ADDR
// if j then
20272: LD_VAR 0 7
20276: IFFALSE 20306
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20278: LD_ADDR_VAR 0 10
20282: PUSH
20283: LD_VAR 0 10
20287: PUSH
20288: LD_VAR 0 7
20292: PPUSH
20293: LD_INT 3
20295: PPUSH
20296: CALL_OW 259
20300: PUSH
20301: LD_INT 3
20303: MUL
20304: MUL
20305: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20306: LD_VAR 0 6
20310: PPUSH
20311: CALL_OW 264
20315: PUSH
20316: LD_INT 5
20318: PUSH
20319: LD_INT 6
20321: PUSH
20322: LD_INT 46
20324: PUSH
20325: LD_INT 44
20327: PUSH
20328: LD_INT 47
20330: PUSH
20331: LD_INT 45
20333: PUSH
20334: LD_INT 28
20336: PUSH
20337: LD_INT 7
20339: PUSH
20340: LD_INT 27
20342: PUSH
20343: LD_INT 29
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: IN
20358: PUSH
20359: LD_VAR 0 1
20363: PPUSH
20364: LD_INT 52
20366: PPUSH
20367: CALL_OW 321
20371: PUSH
20372: LD_INT 2
20374: EQUAL
20375: AND
20376: IFFALSE 20393
// bpoints := bpoints * 1.2 ;
20378: LD_ADDR_VAR 0 10
20382: PUSH
20383: LD_VAR 0 10
20387: PUSH
20388: LD_REAL  1.20000000000000E+0000
20391: MUL
20392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20393: LD_VAR 0 6
20397: PPUSH
20398: CALL_OW 264
20402: PUSH
20403: LD_INT 6
20405: PUSH
20406: LD_INT 46
20408: PUSH
20409: LD_INT 47
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: IN
20417: IFFALSE 20434
// bpoints := bpoints * 1.2 ;
20419: LD_ADDR_VAR 0 10
20423: PUSH
20424: LD_VAR 0 10
20428: PUSH
20429: LD_REAL  1.20000000000000E+0000
20432: MUL
20433: ST_TO_ADDR
// end ; unit_building :
20434: GO 20448
20436: LD_INT 3
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20447
20444: POP
// ; end ;
20445: GO 20448
20447: POP
// for j = 1 to 3 do
20448: LD_ADDR_VAR 0 7
20452: PUSH
20453: DOUBLE
20454: LD_INT 1
20456: DEC
20457: ST_TO_ADDR
20458: LD_INT 3
20460: PUSH
20461: FOR_TO
20462: IFFALSE 20515
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20464: LD_ADDR_VAR 0 5
20468: PUSH
20469: LD_VAR 0 5
20473: PPUSH
20474: LD_VAR 0 7
20478: PPUSH
20479: LD_VAR 0 5
20483: PUSH
20484: LD_VAR 0 7
20488: ARRAY
20489: PUSH
20490: LD_VAR 0 9
20494: PUSH
20495: LD_VAR 0 7
20499: ARRAY
20500: PUSH
20501: LD_VAR 0 10
20505: MUL
20506: PLUS
20507: PPUSH
20508: CALL_OW 1
20512: ST_TO_ADDR
20513: GO 20461
20515: POP
20516: POP
// end ;
20517: GO 19000
20519: POP
20520: POP
// result := Replace ( result , 4 , tmp ) ;
20521: LD_ADDR_VAR 0 5
20525: PUSH
20526: LD_VAR 0 5
20530: PPUSH
20531: LD_INT 4
20533: PPUSH
20534: LD_VAR 0 8
20538: PPUSH
20539: CALL_OW 1
20543: ST_TO_ADDR
// end ;
20544: LD_VAR 0 5
20548: RET
// export function DangerAtRange ( unit , range ) ; begin
20549: LD_INT 0
20551: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20552: LD_ADDR_VAR 0 3
20556: PUSH
20557: LD_VAR 0 1
20561: PPUSH
20562: CALL_OW 255
20566: PPUSH
20567: LD_VAR 0 1
20571: PPUSH
20572: CALL_OW 250
20576: PPUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 251
20586: PPUSH
20587: LD_VAR 0 2
20591: PPUSH
20592: CALL 18852 0 4
20596: ST_TO_ADDR
// end ;
20597: LD_VAR 0 3
20601: RET
// export function DangerInArea ( side , area ) ; begin
20602: LD_INT 0
20604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_VAR 0 2
20614: PPUSH
20615: LD_INT 81
20617: PUSH
20618: LD_VAR 0 1
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PPUSH
20627: CALL_OW 70
20631: ST_TO_ADDR
// end ;
20632: LD_VAR 0 3
20636: RET
// export function IsExtension ( b ) ; begin
20637: LD_INT 0
20639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20640: LD_ADDR_VAR 0 2
20644: PUSH
20645: LD_VAR 0 1
20649: PUSH
20650: LD_INT 23
20652: PUSH
20653: LD_INT 20
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 17
20661: PUSH
20662: LD_INT 24
20664: PUSH
20665: LD_INT 21
20667: PUSH
20668: LD_INT 19
20670: PUSH
20671: LD_INT 16
20673: PUSH
20674: LD_INT 25
20676: PUSH
20677: LD_INT 18
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: IN
20692: ST_TO_ADDR
// end ;
20693: LD_VAR 0 2
20697: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20698: LD_INT 0
20700: PPUSH
20701: PPUSH
20702: PPUSH
// result := [ ] ;
20703: LD_ADDR_VAR 0 3
20707: PUSH
20708: EMPTY
20709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20710: LD_ADDR_VAR 0 4
20714: PUSH
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_INT 21
20722: PUSH
20723: LD_INT 3
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PPUSH
20730: CALL_OW 70
20734: ST_TO_ADDR
// if not tmp then
20735: LD_VAR 0 4
20739: NOT
20740: IFFALSE 20744
// exit ;
20742: GO 20802
// for i in tmp do
20744: LD_ADDR_VAR 0 5
20748: PUSH
20749: LD_VAR 0 4
20753: PUSH
20754: FOR_IN
20755: IFFALSE 20790
// if GetBase ( i ) <> base then
20757: LD_VAR 0 5
20761: PPUSH
20762: CALL_OW 274
20766: PUSH
20767: LD_VAR 0 1
20771: NONEQUAL
20772: IFFALSE 20788
// ComLinkToBase ( base , i ) ;
20774: LD_VAR 0 1
20778: PPUSH
20779: LD_VAR 0 5
20783: PPUSH
20784: CALL_OW 169
20788: GO 20754
20790: POP
20791: POP
// result := tmp ;
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_VAR 0 4
20801: ST_TO_ADDR
// end ;
20802: LD_VAR 0 3
20806: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20807: LD_INT 0
20809: PPUSH
20810: PPUSH
// if BuildingStatus ( b ) = bs_build then
20811: LD_VAR 0 2
20815: PPUSH
20816: CALL_OW 461
20820: PUSH
20821: LD_INT 1
20823: EQUAL
20824: IFFALSE 20884
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_STRING h
20833: PUSH
20834: LD_VAR 0 2
20838: PPUSH
20839: CALL_OW 250
20843: PUSH
20844: LD_VAR 0 2
20848: PPUSH
20849: CALL_OW 251
20853: PUSH
20854: LD_VAR 0 2
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: PPUSH
20880: CALL_OW 446
// end ;
20884: LD_VAR 0 3
20888: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20889: LD_INT 0
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20897: LD_VAR 0 1
20901: NOT
20902: PUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 263
20912: PUSH
20913: LD_INT 2
20915: EQUAL
20916: NOT
20917: OR
20918: IFFALSE 20922
// exit ;
20920: GO 21238
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20922: LD_ADDR_VAR 0 6
20926: PUSH
20927: LD_INT 22
20929: PUSH
20930: LD_VAR 0 1
20934: PPUSH
20935: CALL_OW 255
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 30
20949: PUSH
20950: LD_INT 36
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 34
20959: PUSH
20960: LD_INT 31
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: ST_TO_ADDR
// if not tmp then
20981: LD_VAR 0 6
20985: NOT
20986: IFFALSE 20990
// exit ;
20988: GO 21238
// result := [ ] ;
20990: LD_ADDR_VAR 0 2
20994: PUSH
20995: EMPTY
20996: ST_TO_ADDR
// for i in tmp do
20997: LD_ADDR_VAR 0 3
21001: PUSH
21002: LD_VAR 0 6
21006: PUSH
21007: FOR_IN
21008: IFFALSE 21079
// begin t := UnitsInside ( i ) ;
21010: LD_ADDR_VAR 0 4
21014: PUSH
21015: LD_VAR 0 3
21019: PPUSH
21020: CALL_OW 313
21024: ST_TO_ADDR
// if t then
21025: LD_VAR 0 4
21029: IFFALSE 21077
// for j in t do
21031: LD_ADDR_VAR 0 7
21035: PUSH
21036: LD_VAR 0 4
21040: PUSH
21041: FOR_IN
21042: IFFALSE 21075
// result := Insert ( result , result + 1 , j ) ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: LD_VAR 0 2
21058: PUSH
21059: LD_INT 1
21061: PLUS
21062: PPUSH
21063: LD_VAR 0 7
21067: PPUSH
21068: CALL_OW 2
21072: ST_TO_ADDR
21073: GO 21041
21075: POP
21076: POP
// end ;
21077: GO 21007
21079: POP
21080: POP
// if not result then
21081: LD_VAR 0 2
21085: NOT
21086: IFFALSE 21090
// exit ;
21088: GO 21238
// mech := result [ 1 ] ;
21090: LD_ADDR_VAR 0 5
21094: PUSH
21095: LD_VAR 0 2
21099: PUSH
21100: LD_INT 1
21102: ARRAY
21103: ST_TO_ADDR
// if result > 1 then
21104: LD_VAR 0 2
21108: PUSH
21109: LD_INT 1
21111: GREATER
21112: IFFALSE 21224
// for i = 2 to result do
21114: LD_ADDR_VAR 0 3
21118: PUSH
21119: DOUBLE
21120: LD_INT 2
21122: DEC
21123: ST_TO_ADDR
21124: LD_VAR 0 2
21128: PUSH
21129: FOR_TO
21130: IFFALSE 21222
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21132: LD_ADDR_VAR 0 4
21136: PUSH
21137: LD_VAR 0 2
21141: PUSH
21142: LD_VAR 0 3
21146: ARRAY
21147: PPUSH
21148: LD_INT 3
21150: PPUSH
21151: CALL_OW 259
21155: PUSH
21156: LD_VAR 0 2
21160: PUSH
21161: LD_VAR 0 3
21165: ARRAY
21166: PPUSH
21167: CALL_OW 432
21171: MINUS
21172: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21173: LD_VAR 0 4
21177: PUSH
21178: LD_VAR 0 5
21182: PPUSH
21183: LD_INT 3
21185: PPUSH
21186: CALL_OW 259
21190: PUSH
21191: LD_VAR 0 5
21195: PPUSH
21196: CALL_OW 432
21200: MINUS
21201: GREATEREQUAL
21202: IFFALSE 21220
// mech := result [ i ] ;
21204: LD_ADDR_VAR 0 5
21208: PUSH
21209: LD_VAR 0 2
21213: PUSH
21214: LD_VAR 0 3
21218: ARRAY
21219: ST_TO_ADDR
// end ;
21220: GO 21129
21222: POP
21223: POP
// ComLinkTo ( vehicle , mech ) ;
21224: LD_VAR 0 1
21228: PPUSH
21229: LD_VAR 0 5
21233: PPUSH
21234: CALL_OW 135
// end ;
21238: LD_VAR 0 2
21242: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21243: LD_INT 0
21245: PPUSH
21246: PPUSH
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
21257: PPUSH
// result := [ ] ;
21258: LD_ADDR_VAR 0 7
21262: PUSH
21263: EMPTY
21264: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21265: LD_VAR 0 1
21269: PPUSH
21270: CALL_OW 266
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: IN
21285: NOT
21286: IFFALSE 21290
// exit ;
21288: GO 22921
// if name then
21290: LD_VAR 0 3
21294: IFFALSE 21310
// SetBName ( base_dep , name ) ;
21296: LD_VAR 0 1
21300: PPUSH
21301: LD_VAR 0 3
21305: PPUSH
21306: CALL_OW 500
// base := GetBase ( base_dep ) ;
21310: LD_ADDR_VAR 0 15
21314: PUSH
21315: LD_VAR 0 1
21319: PPUSH
21320: CALL_OW 274
21324: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21325: LD_ADDR_VAR 0 16
21329: PUSH
21330: LD_VAR 0 1
21334: PPUSH
21335: CALL_OW 255
21339: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21340: LD_ADDR_VAR 0 17
21344: PUSH
21345: LD_VAR 0 1
21349: PPUSH
21350: CALL_OW 248
21354: ST_TO_ADDR
// if sources then
21355: LD_VAR 0 5
21359: IFFALSE 21406
// for i = 1 to 3 do
21361: LD_ADDR_VAR 0 8
21365: PUSH
21366: DOUBLE
21367: LD_INT 1
21369: DEC
21370: ST_TO_ADDR
21371: LD_INT 3
21373: PUSH
21374: FOR_TO
21375: IFFALSE 21404
// AddResourceType ( base , i , sources [ i ] ) ;
21377: LD_VAR 0 15
21381: PPUSH
21382: LD_VAR 0 8
21386: PPUSH
21387: LD_VAR 0 5
21391: PUSH
21392: LD_VAR 0 8
21396: ARRAY
21397: PPUSH
21398: CALL_OW 276
21402: GO 21374
21404: POP
21405: POP
// buildings := GetBaseBuildings ( base , area ) ;
21406: LD_ADDR_VAR 0 18
21410: PUSH
21411: LD_VAR 0 15
21415: PPUSH
21416: LD_VAR 0 2
21420: PPUSH
21421: CALL 20698 0 2
21425: ST_TO_ADDR
// InitHc ;
21426: CALL_OW 19
// InitUc ;
21430: CALL_OW 18
// uc_side := side ;
21434: LD_ADDR_OWVAR 20
21438: PUSH
21439: LD_VAR 0 16
21443: ST_TO_ADDR
// uc_nation := nation ;
21444: LD_ADDR_OWVAR 21
21448: PUSH
21449: LD_VAR 0 17
21453: ST_TO_ADDR
// if buildings then
21454: LD_VAR 0 18
21458: IFFALSE 22780
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21460: LD_ADDR_VAR 0 19
21464: PUSH
21465: LD_VAR 0 18
21469: PPUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 29
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 30
21485: PUSH
21486: LD_INT 30
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: PPUSH
21498: CALL_OW 72
21502: ST_TO_ADDR
// if tmp then
21503: LD_VAR 0 19
21507: IFFALSE 21555
// for i in tmp do
21509: LD_ADDR_VAR 0 8
21513: PUSH
21514: LD_VAR 0 19
21518: PUSH
21519: FOR_IN
21520: IFFALSE 21553
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21522: LD_VAR 0 8
21526: PPUSH
21527: CALL_OW 250
21531: PPUSH
21532: LD_VAR 0 8
21536: PPUSH
21537: CALL_OW 251
21541: PPUSH
21542: LD_VAR 0 16
21546: PPUSH
21547: CALL_OW 441
21551: GO 21519
21553: POP
21554: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21555: LD_VAR 0 18
21559: PPUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 30
21565: PUSH
21566: LD_INT 32
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 30
21575: PUSH
21576: LD_INT 33
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PPUSH
21588: CALL_OW 72
21592: IFFALSE 21680
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21594: LD_ADDR_VAR 0 8
21598: PUSH
21599: LD_VAR 0 18
21603: PPUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 30
21609: PUSH
21610: LD_INT 32
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 30
21619: PUSH
21620: LD_INT 33
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: PPUSH
21632: CALL_OW 72
21636: PUSH
21637: FOR_IN
21638: IFFALSE 21678
// begin if not GetBWeapon ( i ) then
21640: LD_VAR 0 8
21644: PPUSH
21645: CALL_OW 269
21649: NOT
21650: IFFALSE 21676
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21652: LD_VAR 0 8
21656: PPUSH
21657: LD_VAR 0 8
21661: PPUSH
21662: LD_VAR 0 2
21666: PPUSH
21667: CALL 22926 0 2
21671: PPUSH
21672: CALL_OW 431
// end ;
21676: GO 21637
21678: POP
21679: POP
// end ; for i = 1 to personel do
21680: LD_ADDR_VAR 0 8
21684: PUSH
21685: DOUBLE
21686: LD_INT 1
21688: DEC
21689: ST_TO_ADDR
21690: LD_VAR 0 6
21694: PUSH
21695: FOR_TO
21696: IFFALSE 22760
// begin if i > 4 then
21698: LD_VAR 0 8
21702: PUSH
21703: LD_INT 4
21705: GREATER
21706: IFFALSE 21710
// break ;
21708: GO 22760
// case i of 1 :
21710: LD_VAR 0 8
21714: PUSH
21715: LD_INT 1
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21803
21723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21724: LD_ADDR_VAR 0 12
21728: PUSH
21729: LD_VAR 0 18
21733: PPUSH
21734: LD_INT 22
21736: PUSH
21737: LD_VAR 0 16
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 58
21748: PUSH
21749: EMPTY
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 30
21757: PUSH
21758: LD_INT 32
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 30
21767: PUSH
21768: LD_INT 4
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 30
21777: PUSH
21778: LD_INT 5
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 72
21800: ST_TO_ADDR
21801: GO 22025
21803: LD_INT 2
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21811
21809: GO 21873
21811: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21812: LD_ADDR_VAR 0 12
21816: PUSH
21817: LD_VAR 0 18
21821: PPUSH
21822: LD_INT 22
21824: PUSH
21825: LD_VAR 0 16
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 30
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 72
21870: ST_TO_ADDR
21871: GO 22025
21873: LD_INT 3
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 21943
21881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21882: LD_ADDR_VAR 0 12
21886: PUSH
21887: LD_VAR 0 18
21891: PPUSH
21892: LD_INT 22
21894: PUSH
21895: LD_VAR 0 16
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 30
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 30
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PPUSH
21936: CALL_OW 72
21940: ST_TO_ADDR
21941: GO 22025
21943: LD_INT 4
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 22024
21951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21952: LD_ADDR_VAR 0 12
21956: PUSH
21957: LD_VAR 0 18
21961: PPUSH
21962: LD_INT 22
21964: PUSH
21965: LD_VAR 0 16
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 2
21976: PUSH
21977: LD_INT 30
21979: PUSH
21980: LD_INT 6
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: LD_INT 7
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 30
21999: PUSH
22000: LD_INT 8
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 72
22021: ST_TO_ADDR
22022: GO 22025
22024: POP
// if i = 1 then
22025: LD_VAR 0 8
22029: PUSH
22030: LD_INT 1
22032: EQUAL
22033: IFFALSE 22144
// begin tmp := [ ] ;
22035: LD_ADDR_VAR 0 19
22039: PUSH
22040: EMPTY
22041: ST_TO_ADDR
// for j in f do
22042: LD_ADDR_VAR 0 9
22046: PUSH
22047: LD_VAR 0 12
22051: PUSH
22052: FOR_IN
22053: IFFALSE 22126
// if GetBType ( j ) = b_bunker then
22055: LD_VAR 0 9
22059: PPUSH
22060: CALL_OW 266
22064: PUSH
22065: LD_INT 32
22067: EQUAL
22068: IFFALSE 22095
// tmp := Insert ( tmp , 1 , j ) else
22070: LD_ADDR_VAR 0 19
22074: PUSH
22075: LD_VAR 0 19
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_VAR 0 9
22087: PPUSH
22088: CALL_OW 2
22092: ST_TO_ADDR
22093: GO 22124
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22095: LD_ADDR_VAR 0 19
22099: PUSH
22100: LD_VAR 0 19
22104: PPUSH
22105: LD_VAR 0 19
22109: PUSH
22110: LD_INT 1
22112: PLUS
22113: PPUSH
22114: LD_VAR 0 9
22118: PPUSH
22119: CALL_OW 2
22123: ST_TO_ADDR
22124: GO 22052
22126: POP
22127: POP
// if tmp then
22128: LD_VAR 0 19
22132: IFFALSE 22144
// f := tmp ;
22134: LD_ADDR_VAR 0 12
22138: PUSH
22139: LD_VAR 0 19
22143: ST_TO_ADDR
// end ; x := personel [ i ] ;
22144: LD_ADDR_VAR 0 13
22148: PUSH
22149: LD_VAR 0 6
22153: PUSH
22154: LD_VAR 0 8
22158: ARRAY
22159: ST_TO_ADDR
// if x = - 1 then
22160: LD_VAR 0 13
22164: PUSH
22165: LD_INT 1
22167: NEG
22168: EQUAL
22169: IFFALSE 22378
// begin for j in f do
22171: LD_ADDR_VAR 0 9
22175: PUSH
22176: LD_VAR 0 12
22180: PUSH
22181: FOR_IN
22182: IFFALSE 22374
// repeat InitHc ;
22184: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22188: LD_VAR 0 9
22192: PPUSH
22193: CALL_OW 266
22197: PUSH
22198: LD_INT 5
22200: EQUAL
22201: IFFALSE 22271
// begin if UnitsInside ( j ) < 3 then
22203: LD_VAR 0 9
22207: PPUSH
22208: CALL_OW 313
22212: PUSH
22213: LD_INT 3
22215: LESS
22216: IFFALSE 22252
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22218: LD_INT 0
22220: PPUSH
22221: LD_INT 5
22223: PUSH
22224: LD_INT 8
22226: PUSH
22227: LD_INT 9
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: LD_VAR 0 17
22239: ARRAY
22240: PPUSH
22241: LD_VAR 0 4
22245: PPUSH
22246: CALL_OW 380
22250: GO 22269
// PrepareHuman ( false , i , skill ) ;
22252: LD_INT 0
22254: PPUSH
22255: LD_VAR 0 8
22259: PPUSH
22260: LD_VAR 0 4
22264: PPUSH
22265: CALL_OW 380
// end else
22269: GO 22288
// PrepareHuman ( false , i , skill ) ;
22271: LD_INT 0
22273: PPUSH
22274: LD_VAR 0 8
22278: PPUSH
22279: LD_VAR 0 4
22283: PPUSH
22284: CALL_OW 380
// un := CreateHuman ;
22288: LD_ADDR_VAR 0 14
22292: PUSH
22293: CALL_OW 44
22297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22298: LD_ADDR_VAR 0 7
22302: PUSH
22303: LD_VAR 0 7
22307: PPUSH
22308: LD_INT 1
22310: PPUSH
22311: LD_VAR 0 14
22315: PPUSH
22316: CALL_OW 2
22320: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22321: LD_VAR 0 14
22325: PPUSH
22326: LD_VAR 0 9
22330: PPUSH
22331: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22335: LD_VAR 0 9
22339: PPUSH
22340: CALL_OW 313
22344: PUSH
22345: LD_INT 6
22347: EQUAL
22348: PUSH
22349: LD_VAR 0 9
22353: PPUSH
22354: CALL_OW 266
22358: PUSH
22359: LD_INT 32
22361: PUSH
22362: LD_INT 31
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: IN
22369: OR
22370: IFFALSE 22184
22372: GO 22181
22374: POP
22375: POP
// end else
22376: GO 22758
// for j = 1 to x do
22378: LD_ADDR_VAR 0 9
22382: PUSH
22383: DOUBLE
22384: LD_INT 1
22386: DEC
22387: ST_TO_ADDR
22388: LD_VAR 0 13
22392: PUSH
22393: FOR_TO
22394: IFFALSE 22756
// begin InitHc ;
22396: CALL_OW 19
// if not f then
22400: LD_VAR 0 12
22404: NOT
22405: IFFALSE 22494
// begin PrepareHuman ( false , i , skill ) ;
22407: LD_INT 0
22409: PPUSH
22410: LD_VAR 0 8
22414: PPUSH
22415: LD_VAR 0 4
22419: PPUSH
22420: CALL_OW 380
// un := CreateHuman ;
22424: LD_ADDR_VAR 0 14
22428: PUSH
22429: CALL_OW 44
22433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22434: LD_ADDR_VAR 0 7
22438: PUSH
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_INT 1
22446: PPUSH
22447: LD_VAR 0 14
22451: PPUSH
22452: CALL_OW 2
22456: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22457: LD_VAR 0 14
22461: PPUSH
22462: LD_VAR 0 1
22466: PPUSH
22467: CALL_OW 250
22471: PPUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 251
22481: PPUSH
22482: LD_INT 10
22484: PPUSH
22485: LD_INT 0
22487: PPUSH
22488: CALL_OW 50
// continue ;
22492: GO 22393
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22494: LD_VAR 0 12
22498: PUSH
22499: LD_INT 1
22501: ARRAY
22502: PPUSH
22503: CALL_OW 313
22507: PUSH
22508: LD_VAR 0 12
22512: PUSH
22513: LD_INT 1
22515: ARRAY
22516: PPUSH
22517: CALL_OW 266
22521: PUSH
22522: LD_INT 32
22524: PUSH
22525: LD_INT 31
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: IN
22532: AND
22533: PUSH
22534: LD_VAR 0 12
22538: PUSH
22539: LD_INT 1
22541: ARRAY
22542: PPUSH
22543: CALL_OW 313
22547: PUSH
22548: LD_INT 6
22550: EQUAL
22551: OR
22552: IFFALSE 22572
// f := Delete ( f , 1 ) ;
22554: LD_ADDR_VAR 0 12
22558: PUSH
22559: LD_VAR 0 12
22563: PPUSH
22564: LD_INT 1
22566: PPUSH
22567: CALL_OW 3
22571: ST_TO_ADDR
// if not f then
22572: LD_VAR 0 12
22576: NOT
22577: IFFALSE 22595
// begin x := x + 2 ;
22579: LD_ADDR_VAR 0 13
22583: PUSH
22584: LD_VAR 0 13
22588: PUSH
22589: LD_INT 2
22591: PLUS
22592: ST_TO_ADDR
// continue ;
22593: GO 22393
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22595: LD_VAR 0 12
22599: PUSH
22600: LD_INT 1
22602: ARRAY
22603: PPUSH
22604: CALL_OW 266
22608: PUSH
22609: LD_INT 5
22611: EQUAL
22612: IFFALSE 22686
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22614: LD_VAR 0 12
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: CALL_OW 313
22627: PUSH
22628: LD_INT 3
22630: LESS
22631: IFFALSE 22667
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22633: LD_INT 0
22635: PPUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: PUSH
22650: LD_VAR 0 17
22654: ARRAY
22655: PPUSH
22656: LD_VAR 0 4
22660: PPUSH
22661: CALL_OW 380
22665: GO 22684
// PrepareHuman ( false , i , skill ) ;
22667: LD_INT 0
22669: PPUSH
22670: LD_VAR 0 8
22674: PPUSH
22675: LD_VAR 0 4
22679: PPUSH
22680: CALL_OW 380
// end else
22684: GO 22703
// PrepareHuman ( false , i , skill ) ;
22686: LD_INT 0
22688: PPUSH
22689: LD_VAR 0 8
22693: PPUSH
22694: LD_VAR 0 4
22698: PPUSH
22699: CALL_OW 380
// un := CreateHuman ;
22703: LD_ADDR_VAR 0 14
22707: PUSH
22708: CALL_OW 44
22712: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22713: LD_ADDR_VAR 0 7
22717: PUSH
22718: LD_VAR 0 7
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_VAR 0 14
22730: PPUSH
22731: CALL_OW 2
22735: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22736: LD_VAR 0 14
22740: PPUSH
22741: LD_VAR 0 12
22745: PUSH
22746: LD_INT 1
22748: ARRAY
22749: PPUSH
22750: CALL_OW 52
// end ;
22754: GO 22393
22756: POP
22757: POP
// end ;
22758: GO 21695
22760: POP
22761: POP
// result := result ^ buildings ;
22762: LD_ADDR_VAR 0 7
22766: PUSH
22767: LD_VAR 0 7
22771: PUSH
22772: LD_VAR 0 18
22776: ADD
22777: ST_TO_ADDR
// end else
22778: GO 22921
// begin for i = 1 to personel do
22780: LD_ADDR_VAR 0 8
22784: PUSH
22785: DOUBLE
22786: LD_INT 1
22788: DEC
22789: ST_TO_ADDR
22790: LD_VAR 0 6
22794: PUSH
22795: FOR_TO
22796: IFFALSE 22919
// begin if i > 4 then
22798: LD_VAR 0 8
22802: PUSH
22803: LD_INT 4
22805: GREATER
22806: IFFALSE 22810
// break ;
22808: GO 22919
// x := personel [ i ] ;
22810: LD_ADDR_VAR 0 13
22814: PUSH
22815: LD_VAR 0 6
22819: PUSH
22820: LD_VAR 0 8
22824: ARRAY
22825: ST_TO_ADDR
// if x = - 1 then
22826: LD_VAR 0 13
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: EQUAL
22835: IFFALSE 22839
// continue ;
22837: GO 22795
// PrepareHuman ( false , i , skill ) ;
22839: LD_INT 0
22841: PPUSH
22842: LD_VAR 0 8
22846: PPUSH
22847: LD_VAR 0 4
22851: PPUSH
22852: CALL_OW 380
// un := CreateHuman ;
22856: LD_ADDR_VAR 0 14
22860: PUSH
22861: CALL_OW 44
22865: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22866: LD_VAR 0 14
22870: PPUSH
22871: LD_VAR 0 1
22875: PPUSH
22876: CALL_OW 250
22880: PPUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 251
22890: PPUSH
22891: LD_INT 10
22893: PPUSH
22894: LD_INT 0
22896: PPUSH
22897: CALL_OW 50
// result := result ^ un ;
22901: LD_ADDR_VAR 0 7
22905: PUSH
22906: LD_VAR 0 7
22910: PUSH
22911: LD_VAR 0 14
22915: ADD
22916: ST_TO_ADDR
// end ;
22917: GO 22795
22919: POP
22920: POP
// end ; end ;
22921: LD_VAR 0 7
22925: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22926: LD_INT 0
22928: PPUSH
22929: PPUSH
22930: PPUSH
22931: PPUSH
22932: PPUSH
22933: PPUSH
22934: PPUSH
22935: PPUSH
22936: PPUSH
22937: PPUSH
22938: PPUSH
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
// result := false ;
22944: LD_ADDR_VAR 0 3
22948: PUSH
22949: LD_INT 0
22951: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22952: LD_VAR 0 1
22956: NOT
22957: PUSH
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 266
22967: PUSH
22968: LD_INT 32
22970: PUSH
22971: LD_INT 33
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: IN
22978: NOT
22979: OR
22980: IFFALSE 22984
// exit ;
22982: GO 24120
// nat := GetNation ( tower ) ;
22984: LD_ADDR_VAR 0 12
22988: PUSH
22989: LD_VAR 0 1
22993: PPUSH
22994: CALL_OW 248
22998: ST_TO_ADDR
// side := GetSide ( tower ) ;
22999: LD_ADDR_VAR 0 16
23003: PUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 255
23013: ST_TO_ADDR
// x := GetX ( tower ) ;
23014: LD_ADDR_VAR 0 10
23018: PUSH
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL_OW 250
23028: ST_TO_ADDR
// y := GetY ( tower ) ;
23029: LD_ADDR_VAR 0 11
23033: PUSH
23034: LD_VAR 0 1
23038: PPUSH
23039: CALL_OW 251
23043: ST_TO_ADDR
// if not x or not y then
23044: LD_VAR 0 10
23048: NOT
23049: PUSH
23050: LD_VAR 0 11
23054: NOT
23055: OR
23056: IFFALSE 23060
// exit ;
23058: GO 24120
// weapon := 0 ;
23060: LD_ADDR_VAR 0 18
23064: PUSH
23065: LD_INT 0
23067: ST_TO_ADDR
// fac_list := [ ] ;
23068: LD_ADDR_VAR 0 17
23072: PUSH
23073: EMPTY
23074: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23075: LD_ADDR_VAR 0 6
23079: PUSH
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 274
23089: PPUSH
23090: LD_VAR 0 2
23094: PPUSH
23095: CALL 20698 0 2
23099: PPUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PPUSH
23110: CALL_OW 72
23114: ST_TO_ADDR
// if not factories then
23115: LD_VAR 0 6
23119: NOT
23120: IFFALSE 23124
// exit ;
23122: GO 24120
// for i in factories do
23124: LD_ADDR_VAR 0 8
23128: PUSH
23129: LD_VAR 0 6
23133: PUSH
23134: FOR_IN
23135: IFFALSE 23160
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23137: LD_ADDR_VAR 0 17
23141: PUSH
23142: LD_VAR 0 17
23146: PUSH
23147: LD_VAR 0 8
23151: PPUSH
23152: CALL_OW 478
23156: UNION
23157: ST_TO_ADDR
23158: GO 23134
23160: POP
23161: POP
// if not fac_list then
23162: LD_VAR 0 17
23166: NOT
23167: IFFALSE 23171
// exit ;
23169: GO 24120
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23171: LD_ADDR_VAR 0 5
23175: PUSH
23176: LD_INT 4
23178: PUSH
23179: LD_INT 5
23181: PUSH
23182: LD_INT 9
23184: PUSH
23185: LD_INT 10
23187: PUSH
23188: LD_INT 6
23190: PUSH
23191: LD_INT 7
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 27
23208: PUSH
23209: LD_INT 28
23211: PUSH
23212: LD_INT 26
23214: PUSH
23215: LD_INT 30
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 43
23226: PUSH
23227: LD_INT 44
23229: PUSH
23230: LD_INT 46
23232: PUSH
23233: LD_INT 45
23235: PUSH
23236: LD_INT 47
23238: PUSH
23239: LD_INT 49
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: PUSH
23255: LD_VAR 0 12
23259: ARRAY
23260: ST_TO_ADDR
// for i in list do
23261: LD_ADDR_VAR 0 8
23265: PUSH
23266: LD_VAR 0 5
23270: PUSH
23271: FOR_IN
23272: IFFALSE 23305
// if not i in fac_list then
23274: LD_VAR 0 8
23278: PUSH
23279: LD_VAR 0 17
23283: IN
23284: NOT
23285: IFFALSE 23303
// list := list diff i ;
23287: LD_ADDR_VAR 0 5
23291: PUSH
23292: LD_VAR 0 5
23296: PUSH
23297: LD_VAR 0 8
23301: DIFF
23302: ST_TO_ADDR
23303: GO 23271
23305: POP
23306: POP
// if not list then
23307: LD_VAR 0 5
23311: NOT
23312: IFFALSE 23316
// exit ;
23314: GO 24120
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23316: LD_VAR 0 12
23320: PUSH
23321: LD_INT 3
23323: EQUAL
23324: PUSH
23325: LD_INT 49
23327: PUSH
23328: LD_VAR 0 5
23332: IN
23333: AND
23334: PUSH
23335: LD_INT 31
23337: PPUSH
23338: LD_VAR 0 16
23342: PPUSH
23343: CALL_OW 321
23347: PUSH
23348: LD_INT 2
23350: EQUAL
23351: AND
23352: IFFALSE 23412
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23354: LD_INT 22
23356: PUSH
23357: LD_VAR 0 16
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 35
23368: PUSH
23369: LD_INT 49
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 91
23378: PUSH
23379: LD_VAR 0 1
23383: PUSH
23384: LD_INT 10
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PPUSH
23397: CALL_OW 69
23401: NOT
23402: IFFALSE 23412
// weapon := ru_time_lapser ;
23404: LD_ADDR_VAR 0 18
23408: PUSH
23409: LD_INT 49
23411: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23412: LD_VAR 0 12
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: IN
23427: PUSH
23428: LD_INT 11
23430: PUSH
23431: LD_VAR 0 5
23435: IN
23436: PUSH
23437: LD_INT 30
23439: PUSH
23440: LD_VAR 0 5
23444: IN
23445: OR
23446: AND
23447: PUSH
23448: LD_INT 6
23450: PPUSH
23451: LD_VAR 0 16
23455: PPUSH
23456: CALL_OW 321
23460: PUSH
23461: LD_INT 2
23463: EQUAL
23464: AND
23465: IFFALSE 23630
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23467: LD_INT 22
23469: PUSH
23470: LD_VAR 0 16
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: LD_INT 35
23484: PUSH
23485: LD_INT 11
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 35
23494: PUSH
23495: LD_INT 30
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 91
23509: PUSH
23510: LD_VAR 0 1
23514: PUSH
23515: LD_INT 18
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: PPUSH
23528: CALL_OW 69
23532: NOT
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_VAR 0 16
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 30
23551: PUSH
23552: LD_INT 32
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 30
23561: PUSH
23562: LD_INT 33
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 91
23576: PUSH
23577: LD_VAR 0 1
23581: PUSH
23582: LD_INT 12
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: PPUSH
23598: CALL_OW 69
23602: PUSH
23603: LD_INT 2
23605: GREATER
23606: AND
23607: IFFALSE 23630
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23609: LD_ADDR_VAR 0 18
23613: PUSH
23614: LD_INT 11
23616: PUSH
23617: LD_INT 30
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_VAR 0 12
23628: ARRAY
23629: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23630: LD_VAR 0 18
23634: NOT
23635: PUSH
23636: LD_INT 40
23638: PPUSH
23639: LD_VAR 0 16
23643: PPUSH
23644: CALL_OW 321
23648: PUSH
23649: LD_INT 2
23651: EQUAL
23652: AND
23653: PUSH
23654: LD_INT 7
23656: PUSH
23657: LD_VAR 0 5
23661: IN
23662: PUSH
23663: LD_INT 28
23665: PUSH
23666: LD_VAR 0 5
23670: IN
23671: OR
23672: PUSH
23673: LD_INT 45
23675: PUSH
23676: LD_VAR 0 5
23680: IN
23681: OR
23682: AND
23683: IFFALSE 23937
// begin hex := GetHexInfo ( x , y ) ;
23685: LD_ADDR_VAR 0 4
23689: PUSH
23690: LD_VAR 0 10
23694: PPUSH
23695: LD_VAR 0 11
23699: PPUSH
23700: CALL_OW 546
23704: ST_TO_ADDR
// if hex [ 1 ] then
23705: LD_VAR 0 4
23709: PUSH
23710: LD_INT 1
23712: ARRAY
23713: IFFALSE 23717
// exit ;
23715: GO 24120
// height := hex [ 2 ] ;
23717: LD_ADDR_VAR 0 15
23721: PUSH
23722: LD_VAR 0 4
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23731: LD_ADDR_VAR 0 14
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: LD_INT 3
23744: PUSH
23745: LD_INT 5
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// for i in tmp do
23754: LD_ADDR_VAR 0 8
23758: PUSH
23759: LD_VAR 0 14
23763: PUSH
23764: FOR_IN
23765: IFFALSE 23935
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23767: LD_ADDR_VAR 0 9
23771: PUSH
23772: LD_VAR 0 10
23776: PPUSH
23777: LD_VAR 0 8
23781: PPUSH
23782: LD_INT 5
23784: PPUSH
23785: CALL_OW 272
23789: PUSH
23790: LD_VAR 0 11
23794: PPUSH
23795: LD_VAR 0 8
23799: PPUSH
23800: LD_INT 5
23802: PPUSH
23803: CALL_OW 273
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23812: LD_VAR 0 9
23816: PUSH
23817: LD_INT 1
23819: ARRAY
23820: PPUSH
23821: LD_VAR 0 9
23825: PUSH
23826: LD_INT 2
23828: ARRAY
23829: PPUSH
23830: CALL_OW 488
23834: IFFALSE 23933
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23836: LD_ADDR_VAR 0 4
23840: PUSH
23841: LD_VAR 0 9
23845: PUSH
23846: LD_INT 1
23848: ARRAY
23849: PPUSH
23850: LD_VAR 0 9
23854: PUSH
23855: LD_INT 2
23857: ARRAY
23858: PPUSH
23859: CALL_OW 546
23863: ST_TO_ADDR
// if hex [ 1 ] then
23864: LD_VAR 0 4
23868: PUSH
23869: LD_INT 1
23871: ARRAY
23872: IFFALSE 23876
// continue ;
23874: GO 23764
// h := hex [ 2 ] ;
23876: LD_ADDR_VAR 0 13
23880: PUSH
23881: LD_VAR 0 4
23885: PUSH
23886: LD_INT 2
23888: ARRAY
23889: ST_TO_ADDR
// if h + 7 < height then
23890: LD_VAR 0 13
23894: PUSH
23895: LD_INT 7
23897: PLUS
23898: PUSH
23899: LD_VAR 0 15
23903: LESS
23904: IFFALSE 23933
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23906: LD_ADDR_VAR 0 18
23910: PUSH
23911: LD_INT 7
23913: PUSH
23914: LD_INT 28
23916: PUSH
23917: LD_INT 45
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_VAR 0 12
23929: ARRAY
23930: ST_TO_ADDR
// break ;
23931: GO 23935
// end ; end ; end ;
23933: GO 23764
23935: POP
23936: POP
// end ; if not weapon then
23937: LD_VAR 0 18
23941: NOT
23942: IFFALSE 24002
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23944: LD_ADDR_VAR 0 5
23948: PUSH
23949: LD_VAR 0 5
23953: PUSH
23954: LD_INT 11
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 49
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: DIFF
23968: ST_TO_ADDR
// if not list then
23969: LD_VAR 0 5
23973: NOT
23974: IFFALSE 23978
// exit ;
23976: GO 24120
// weapon := list [ rand ( 1 , list ) ] ;
23978: LD_ADDR_VAR 0 18
23982: PUSH
23983: LD_VAR 0 5
23987: PUSH
23988: LD_INT 1
23990: PPUSH
23991: LD_VAR 0 5
23995: PPUSH
23996: CALL_OW 12
24000: ARRAY
24001: ST_TO_ADDR
// end ; if weapon then
24002: LD_VAR 0 18
24006: IFFALSE 24120
// begin tmp := CostOfWeapon ( weapon ) ;
24008: LD_ADDR_VAR 0 14
24012: PUSH
24013: LD_VAR 0 18
24017: PPUSH
24018: CALL_OW 451
24022: ST_TO_ADDR
// j := GetBase ( tower ) ;
24023: LD_ADDR_VAR 0 9
24027: PUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 274
24037: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24038: LD_VAR 0 9
24042: PPUSH
24043: LD_INT 1
24045: PPUSH
24046: CALL_OW 275
24050: PUSH
24051: LD_VAR 0 14
24055: PUSH
24056: LD_INT 1
24058: ARRAY
24059: GREATEREQUAL
24060: PUSH
24061: LD_VAR 0 9
24065: PPUSH
24066: LD_INT 2
24068: PPUSH
24069: CALL_OW 275
24073: PUSH
24074: LD_VAR 0 14
24078: PUSH
24079: LD_INT 2
24081: ARRAY
24082: GREATEREQUAL
24083: AND
24084: PUSH
24085: LD_VAR 0 9
24089: PPUSH
24090: LD_INT 3
24092: PPUSH
24093: CALL_OW 275
24097: PUSH
24098: LD_VAR 0 14
24102: PUSH
24103: LD_INT 3
24105: ARRAY
24106: GREATEREQUAL
24107: AND
24108: IFFALSE 24120
// result := weapon ;
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: LD_VAR 0 18
24119: ST_TO_ADDR
// end ; end ;
24120: LD_VAR 0 3
24124: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24125: LD_INT 0
24127: PPUSH
24128: PPUSH
// result := true ;
24129: LD_ADDR_VAR 0 3
24133: PUSH
24134: LD_INT 1
24136: ST_TO_ADDR
// if array1 = array2 then
24137: LD_VAR 0 1
24141: PUSH
24142: LD_VAR 0 2
24146: EQUAL
24147: IFFALSE 24207
// begin for i = 1 to array1 do
24149: LD_ADDR_VAR 0 4
24153: PUSH
24154: DOUBLE
24155: LD_INT 1
24157: DEC
24158: ST_TO_ADDR
24159: LD_VAR 0 1
24163: PUSH
24164: FOR_TO
24165: IFFALSE 24203
// if array1 [ i ] <> array2 [ i ] then
24167: LD_VAR 0 1
24171: PUSH
24172: LD_VAR 0 4
24176: ARRAY
24177: PUSH
24178: LD_VAR 0 2
24182: PUSH
24183: LD_VAR 0 4
24187: ARRAY
24188: NONEQUAL
24189: IFFALSE 24201
// begin result := false ;
24191: LD_ADDR_VAR 0 3
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// break ;
24199: GO 24203
// end ;
24201: GO 24164
24203: POP
24204: POP
// end else
24205: GO 24215
// result := false ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_INT 0
24214: ST_TO_ADDR
// end ;
24215: LD_VAR 0 3
24219: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24220: LD_INT 0
24222: PPUSH
24223: PPUSH
24224: PPUSH
// pom := GetBase ( fac ) ;
24225: LD_ADDR_VAR 0 5
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 274
24239: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24240: LD_ADDR_VAR 0 4
24244: PUSH
24245: LD_VAR 0 2
24249: PUSH
24250: LD_INT 1
24252: ARRAY
24253: PPUSH
24254: LD_VAR 0 2
24258: PUSH
24259: LD_INT 2
24261: ARRAY
24262: PPUSH
24263: LD_VAR 0 2
24267: PUSH
24268: LD_INT 3
24270: ARRAY
24271: PPUSH
24272: LD_VAR 0 2
24276: PUSH
24277: LD_INT 4
24279: ARRAY
24280: PPUSH
24281: CALL_OW 449
24285: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_VAR 0 5
24295: PPUSH
24296: LD_INT 1
24298: PPUSH
24299: CALL_OW 275
24303: PUSH
24304: LD_VAR 0 4
24308: PUSH
24309: LD_INT 1
24311: ARRAY
24312: GREATEREQUAL
24313: PUSH
24314: LD_VAR 0 5
24318: PPUSH
24319: LD_INT 2
24321: PPUSH
24322: CALL_OW 275
24326: PUSH
24327: LD_VAR 0 4
24331: PUSH
24332: LD_INT 2
24334: ARRAY
24335: GREATEREQUAL
24336: AND
24337: PUSH
24338: LD_VAR 0 5
24342: PPUSH
24343: LD_INT 3
24345: PPUSH
24346: CALL_OW 275
24350: PUSH
24351: LD_VAR 0 4
24355: PUSH
24356: LD_INT 3
24358: ARRAY
24359: GREATEREQUAL
24360: AND
24361: ST_TO_ADDR
// end ;
24362: LD_VAR 0 3
24366: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24367: LD_INT 0
24369: PPUSH
24370: PPUSH
24371: PPUSH
24372: PPUSH
// pom := GetBase ( building ) ;
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL_OW 274
24387: ST_TO_ADDR
// if not pom then
24388: LD_VAR 0 3
24392: NOT
24393: IFFALSE 24397
// exit ;
24395: GO 24567
// btype := GetBType ( building ) ;
24397: LD_ADDR_VAR 0 5
24401: PUSH
24402: LD_VAR 0 1
24406: PPUSH
24407: CALL_OW 266
24411: ST_TO_ADDR
// if btype = b_armoury then
24412: LD_VAR 0 5
24416: PUSH
24417: LD_INT 4
24419: EQUAL
24420: IFFALSE 24430
// btype := b_barracks ;
24422: LD_ADDR_VAR 0 5
24426: PUSH
24427: LD_INT 5
24429: ST_TO_ADDR
// if btype = b_depot then
24430: LD_VAR 0 5
24434: PUSH
24435: LD_INT 0
24437: EQUAL
24438: IFFALSE 24448
// btype := b_warehouse ;
24440: LD_ADDR_VAR 0 5
24444: PUSH
24445: LD_INT 1
24447: ST_TO_ADDR
// if btype = b_workshop then
24448: LD_VAR 0 5
24452: PUSH
24453: LD_INT 2
24455: EQUAL
24456: IFFALSE 24466
// btype := b_factory ;
24458: LD_ADDR_VAR 0 5
24462: PUSH
24463: LD_INT 3
24465: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_VAR 0 5
24475: PPUSH
24476: LD_VAR 0 1
24480: PPUSH
24481: CALL_OW 248
24485: PPUSH
24486: CALL_OW 450
24490: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24491: LD_ADDR_VAR 0 2
24495: PUSH
24496: LD_VAR 0 3
24500: PPUSH
24501: LD_INT 1
24503: PPUSH
24504: CALL_OW 275
24508: PUSH
24509: LD_VAR 0 4
24513: PUSH
24514: LD_INT 1
24516: ARRAY
24517: GREATEREQUAL
24518: PUSH
24519: LD_VAR 0 3
24523: PPUSH
24524: LD_INT 2
24526: PPUSH
24527: CALL_OW 275
24531: PUSH
24532: LD_VAR 0 4
24536: PUSH
24537: LD_INT 2
24539: ARRAY
24540: GREATEREQUAL
24541: AND
24542: PUSH
24543: LD_VAR 0 3
24547: PPUSH
24548: LD_INT 3
24550: PPUSH
24551: CALL_OW 275
24555: PUSH
24556: LD_VAR 0 4
24560: PUSH
24561: LD_INT 3
24563: ARRAY
24564: GREATEREQUAL
24565: AND
24566: ST_TO_ADDR
// end ;
24567: LD_VAR 0 2
24571: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24572: LD_INT 0
24574: PPUSH
24575: PPUSH
24576: PPUSH
// pom := GetBase ( building ) ;
24577: LD_ADDR_VAR 0 4
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 274
24591: ST_TO_ADDR
// if not pom then
24592: LD_VAR 0 4
24596: NOT
24597: IFFALSE 24601
// exit ;
24599: GO 24702
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24601: LD_ADDR_VAR 0 5
24605: PUSH
24606: LD_VAR 0 2
24610: PPUSH
24611: LD_VAR 0 1
24615: PPUSH
24616: CALL_OW 248
24620: PPUSH
24621: CALL_OW 450
24625: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24626: LD_ADDR_VAR 0 3
24630: PUSH
24631: LD_VAR 0 4
24635: PPUSH
24636: LD_INT 1
24638: PPUSH
24639: CALL_OW 275
24643: PUSH
24644: LD_VAR 0 5
24648: PUSH
24649: LD_INT 1
24651: ARRAY
24652: GREATEREQUAL
24653: PUSH
24654: LD_VAR 0 4
24658: PPUSH
24659: LD_INT 2
24661: PPUSH
24662: CALL_OW 275
24666: PUSH
24667: LD_VAR 0 5
24671: PUSH
24672: LD_INT 2
24674: ARRAY
24675: GREATEREQUAL
24676: AND
24677: PUSH
24678: LD_VAR 0 4
24682: PPUSH
24683: LD_INT 3
24685: PPUSH
24686: CALL_OW 275
24690: PUSH
24691: LD_VAR 0 5
24695: PUSH
24696: LD_INT 3
24698: ARRAY
24699: GREATEREQUAL
24700: AND
24701: ST_TO_ADDR
// end ;
24702: LD_VAR 0 3
24706: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24707: LD_INT 0
24709: PPUSH
24710: PPUSH
24711: PPUSH
24712: PPUSH
24713: PPUSH
24714: PPUSH
24715: PPUSH
24716: PPUSH
24717: PPUSH
24718: PPUSH
// result := false ;
24719: LD_ADDR_VAR 0 6
24723: PUSH
24724: LD_INT 0
24726: ST_TO_ADDR
// if not base or not btype or not x or not y then
24727: LD_VAR 0 1
24731: NOT
24732: PUSH
24733: LD_VAR 0 2
24737: NOT
24738: OR
24739: PUSH
24740: LD_VAR 0 3
24744: NOT
24745: OR
24746: PUSH
24747: LD_VAR 0 4
24751: NOT
24752: OR
24753: IFFALSE 24757
// exit ;
24755: GO 25366
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24757: LD_ADDR_VAR 0 12
24761: PUSH
24762: LD_VAR 0 2
24766: PPUSH
24767: LD_VAR 0 3
24771: PPUSH
24772: LD_VAR 0 4
24776: PPUSH
24777: LD_VAR 0 5
24781: PPUSH
24782: LD_VAR 0 1
24786: PUSH
24787: LD_INT 1
24789: ARRAY
24790: PPUSH
24791: CALL_OW 248
24795: PPUSH
24796: LD_INT 0
24798: PPUSH
24799: CALL 26203 0 6
24803: ST_TO_ADDR
// if not hexes then
24804: LD_VAR 0 12
24808: NOT
24809: IFFALSE 24813
// exit ;
24811: GO 25366
// for i = 1 to hexes do
24813: LD_ADDR_VAR 0 7
24817: PUSH
24818: DOUBLE
24819: LD_INT 1
24821: DEC
24822: ST_TO_ADDR
24823: LD_VAR 0 12
24827: PUSH
24828: FOR_TO
24829: IFFALSE 25364
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24831: LD_ADDR_VAR 0 11
24835: PUSH
24836: LD_VAR 0 12
24840: PUSH
24841: LD_VAR 0 7
24845: ARRAY
24846: PUSH
24847: LD_INT 1
24849: ARRAY
24850: PPUSH
24851: LD_VAR 0 12
24855: PUSH
24856: LD_VAR 0 7
24860: ARRAY
24861: PUSH
24862: LD_INT 2
24864: ARRAY
24865: PPUSH
24866: CALL_OW 428
24870: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24871: LD_VAR 0 12
24875: PUSH
24876: LD_VAR 0 7
24880: ARRAY
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: PPUSH
24886: LD_VAR 0 12
24890: PUSH
24891: LD_VAR 0 7
24895: ARRAY
24896: PUSH
24897: LD_INT 2
24899: ARRAY
24900: PPUSH
24901: CALL_OW 351
24905: PUSH
24906: LD_VAR 0 12
24910: PUSH
24911: LD_VAR 0 7
24915: ARRAY
24916: PUSH
24917: LD_INT 1
24919: ARRAY
24920: PPUSH
24921: LD_VAR 0 12
24925: PUSH
24926: LD_VAR 0 7
24930: ARRAY
24931: PUSH
24932: LD_INT 2
24934: ARRAY
24935: PPUSH
24936: CALL_OW 488
24940: NOT
24941: OR
24942: PUSH
24943: LD_VAR 0 11
24947: PPUSH
24948: CALL_OW 247
24952: PUSH
24953: LD_INT 3
24955: EQUAL
24956: OR
24957: IFFALSE 24963
// exit ;
24959: POP
24960: POP
24961: GO 25366
// if not tmp or not tmp in base then
24963: LD_VAR 0 11
24967: NOT
24968: PUSH
24969: LD_VAR 0 11
24973: PUSH
24974: LD_VAR 0 1
24978: IN
24979: NOT
24980: OR
24981: IFFALSE 24985
// continue ;
24983: GO 24828
// result := true ;
24985: LD_ADDR_VAR 0 6
24989: PUSH
24990: LD_INT 1
24992: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24993: LD_ADDR_VAR 0 15
24997: PUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: LD_INT 22
25005: PUSH
25006: LD_VAR 0 11
25010: PPUSH
25011: CALL_OW 255
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: LD_INT 30
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 30
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PPUSH
25052: CALL_OW 72
25056: ST_TO_ADDR
// if dep then
25057: LD_VAR 0 15
25061: IFFALSE 25197
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25063: LD_ADDR_VAR 0 14
25067: PUSH
25068: LD_VAR 0 15
25072: PUSH
25073: LD_INT 1
25075: ARRAY
25076: PPUSH
25077: CALL_OW 250
25081: PPUSH
25082: LD_VAR 0 15
25086: PUSH
25087: LD_INT 1
25089: ARRAY
25090: PPUSH
25091: CALL_OW 254
25095: PPUSH
25096: LD_INT 5
25098: PPUSH
25099: CALL_OW 272
25103: PUSH
25104: LD_VAR 0 15
25108: PUSH
25109: LD_INT 1
25111: ARRAY
25112: PPUSH
25113: CALL_OW 251
25117: PPUSH
25118: LD_VAR 0 15
25122: PUSH
25123: LD_INT 1
25125: ARRAY
25126: PPUSH
25127: CALL_OW 254
25131: PPUSH
25132: LD_INT 5
25134: PPUSH
25135: CALL_OW 273
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25144: LD_VAR 0 14
25148: PUSH
25149: LD_INT 1
25151: ARRAY
25152: PPUSH
25153: LD_VAR 0 14
25157: PUSH
25158: LD_INT 2
25160: ARRAY
25161: PPUSH
25162: CALL_OW 488
25166: IFFALSE 25197
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25168: LD_VAR 0 11
25172: PPUSH
25173: LD_VAR 0 14
25177: PUSH
25178: LD_INT 1
25180: ARRAY
25181: PPUSH
25182: LD_VAR 0 14
25186: PUSH
25187: LD_INT 2
25189: ARRAY
25190: PPUSH
25191: CALL_OW 111
// continue ;
25195: GO 24828
// end ; end ; r := GetDir ( tmp ) ;
25197: LD_ADDR_VAR 0 13
25201: PUSH
25202: LD_VAR 0 11
25206: PPUSH
25207: CALL_OW 254
25211: ST_TO_ADDR
// if r = 5 then
25212: LD_VAR 0 13
25216: PUSH
25217: LD_INT 5
25219: EQUAL
25220: IFFALSE 25230
// r := 0 ;
25222: LD_ADDR_VAR 0 13
25226: PUSH
25227: LD_INT 0
25229: ST_TO_ADDR
// for j = r to 5 do
25230: LD_ADDR_VAR 0 8
25234: PUSH
25235: DOUBLE
25236: LD_VAR 0 13
25240: DEC
25241: ST_TO_ADDR
25242: LD_INT 5
25244: PUSH
25245: FOR_TO
25246: IFFALSE 25360
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25248: LD_ADDR_VAR 0 9
25252: PUSH
25253: LD_VAR 0 11
25257: PPUSH
25258: CALL_OW 250
25262: PPUSH
25263: LD_VAR 0 8
25267: PPUSH
25268: LD_INT 2
25270: PPUSH
25271: CALL_OW 272
25275: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25276: LD_ADDR_VAR 0 10
25280: PUSH
25281: LD_VAR 0 11
25285: PPUSH
25286: CALL_OW 251
25290: PPUSH
25291: LD_VAR 0 8
25295: PPUSH
25296: LD_INT 2
25298: PPUSH
25299: CALL_OW 273
25303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25304: LD_VAR 0 9
25308: PPUSH
25309: LD_VAR 0 10
25313: PPUSH
25314: CALL_OW 488
25318: PUSH
25319: LD_VAR 0 9
25323: PPUSH
25324: LD_VAR 0 10
25328: PPUSH
25329: CALL_OW 428
25333: NOT
25334: AND
25335: IFFALSE 25358
// begin ComMoveXY ( tmp , _x , _y ) ;
25337: LD_VAR 0 11
25341: PPUSH
25342: LD_VAR 0 9
25346: PPUSH
25347: LD_VAR 0 10
25351: PPUSH
25352: CALL_OW 111
// break ;
25356: GO 25360
// end ; end ;
25358: GO 25245
25360: POP
25361: POP
// end ;
25362: GO 24828
25364: POP
25365: POP
// end ;
25366: LD_VAR 0 6
25370: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25371: LD_INT 0
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
// result := false ;
25383: LD_ADDR_VAR 0 6
25387: PUSH
25388: LD_INT 0
25390: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25391: LD_VAR 0 1
25395: NOT
25396: PUSH
25397: LD_VAR 0 1
25401: PPUSH
25402: CALL_OW 266
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: IN
25417: NOT
25418: OR
25419: PUSH
25420: LD_VAR 0 2
25424: NOT
25425: OR
25426: PUSH
25427: LD_VAR 0 5
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 3
25443: PUSH
25444: LD_INT 4
25446: PUSH
25447: LD_INT 5
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: IN
25458: NOT
25459: OR
25460: PUSH
25461: LD_VAR 0 3
25465: PPUSH
25466: LD_VAR 0 4
25470: PPUSH
25471: CALL_OW 488
25475: NOT
25476: OR
25477: IFFALSE 25481
// exit ;
25479: GO 26198
// pom := GetBase ( depot ) ;
25481: LD_ADDR_VAR 0 10
25485: PUSH
25486: LD_VAR 0 1
25490: PPUSH
25491: CALL_OW 274
25495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25496: LD_ADDR_VAR 0 11
25500: PUSH
25501: LD_VAR 0 2
25505: PPUSH
25506: LD_VAR 0 1
25510: PPUSH
25511: CALL_OW 248
25515: PPUSH
25516: CALL_OW 450
25520: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25521: LD_VAR 0 10
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 275
25533: PUSH
25534: LD_VAR 0 11
25538: PUSH
25539: LD_INT 1
25541: ARRAY
25542: GREATEREQUAL
25543: PUSH
25544: LD_VAR 0 10
25548: PPUSH
25549: LD_INT 2
25551: PPUSH
25552: CALL_OW 275
25556: PUSH
25557: LD_VAR 0 11
25561: PUSH
25562: LD_INT 2
25564: ARRAY
25565: GREATEREQUAL
25566: AND
25567: PUSH
25568: LD_VAR 0 10
25572: PPUSH
25573: LD_INT 3
25575: PPUSH
25576: CALL_OW 275
25580: PUSH
25581: LD_VAR 0 11
25585: PUSH
25586: LD_INT 3
25588: ARRAY
25589: GREATEREQUAL
25590: AND
25591: NOT
25592: IFFALSE 25596
// exit ;
25594: GO 26198
// if GetBType ( depot ) = b_depot then
25596: LD_VAR 0 1
25600: PPUSH
25601: CALL_OW 266
25605: PUSH
25606: LD_INT 0
25608: EQUAL
25609: IFFALSE 25621
// dist := 28 else
25611: LD_ADDR_VAR 0 14
25615: PUSH
25616: LD_INT 28
25618: ST_TO_ADDR
25619: GO 25629
// dist := 36 ;
25621: LD_ADDR_VAR 0 14
25625: PUSH
25626: LD_INT 36
25628: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: LD_VAR 0 4
25643: PPUSH
25644: CALL_OW 297
25648: PUSH
25649: LD_VAR 0 14
25653: GREATER
25654: IFFALSE 25658
// exit ;
25656: GO 26198
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25658: LD_ADDR_VAR 0 12
25662: PUSH
25663: LD_VAR 0 2
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: LD_VAR 0 5
25682: PPUSH
25683: LD_VAR 0 1
25687: PPUSH
25688: CALL_OW 248
25692: PPUSH
25693: LD_INT 0
25695: PPUSH
25696: CALL 26203 0 6
25700: ST_TO_ADDR
// if not hexes then
25701: LD_VAR 0 12
25705: NOT
25706: IFFALSE 25710
// exit ;
25708: GO 26198
// hex := GetHexInfo ( x , y ) ;
25710: LD_ADDR_VAR 0 15
25714: PUSH
25715: LD_VAR 0 3
25719: PPUSH
25720: LD_VAR 0 4
25724: PPUSH
25725: CALL_OW 546
25729: ST_TO_ADDR
// if hex [ 1 ] then
25730: LD_VAR 0 15
25734: PUSH
25735: LD_INT 1
25737: ARRAY
25738: IFFALSE 25742
// exit ;
25740: GO 26198
// height := hex [ 2 ] ;
25742: LD_ADDR_VAR 0 13
25746: PUSH
25747: LD_VAR 0 15
25751: PUSH
25752: LD_INT 2
25754: ARRAY
25755: ST_TO_ADDR
// for i = 1 to hexes do
25756: LD_ADDR_VAR 0 7
25760: PUSH
25761: DOUBLE
25762: LD_INT 1
25764: DEC
25765: ST_TO_ADDR
25766: LD_VAR 0 12
25770: PUSH
25771: FOR_TO
25772: IFFALSE 26102
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25774: LD_VAR 0 12
25778: PUSH
25779: LD_VAR 0 7
25783: ARRAY
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PPUSH
25789: LD_VAR 0 12
25793: PUSH
25794: LD_VAR 0 7
25798: ARRAY
25799: PUSH
25800: LD_INT 2
25802: ARRAY
25803: PPUSH
25804: CALL_OW 488
25808: NOT
25809: PUSH
25810: LD_VAR 0 12
25814: PUSH
25815: LD_VAR 0 7
25819: ARRAY
25820: PUSH
25821: LD_INT 1
25823: ARRAY
25824: PPUSH
25825: LD_VAR 0 12
25829: PUSH
25830: LD_VAR 0 7
25834: ARRAY
25835: PUSH
25836: LD_INT 2
25838: ARRAY
25839: PPUSH
25840: CALL_OW 428
25844: PUSH
25845: LD_INT 0
25847: GREATER
25848: OR
25849: PUSH
25850: LD_VAR 0 12
25854: PUSH
25855: LD_VAR 0 7
25859: ARRAY
25860: PUSH
25861: LD_INT 1
25863: ARRAY
25864: PPUSH
25865: LD_VAR 0 12
25869: PUSH
25870: LD_VAR 0 7
25874: ARRAY
25875: PUSH
25876: LD_INT 2
25878: ARRAY
25879: PPUSH
25880: CALL_OW 351
25884: OR
25885: IFFALSE 25891
// exit ;
25887: POP
25888: POP
25889: GO 26198
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25891: LD_ADDR_VAR 0 8
25895: PUSH
25896: LD_VAR 0 12
25900: PUSH
25901: LD_VAR 0 7
25905: ARRAY
25906: PUSH
25907: LD_INT 1
25909: ARRAY
25910: PPUSH
25911: LD_VAR 0 12
25915: PUSH
25916: LD_VAR 0 7
25920: ARRAY
25921: PUSH
25922: LD_INT 2
25924: ARRAY
25925: PPUSH
25926: CALL_OW 546
25930: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25931: LD_VAR 0 8
25935: PUSH
25936: LD_INT 1
25938: ARRAY
25939: PUSH
25940: LD_VAR 0 8
25944: PUSH
25945: LD_INT 2
25947: ARRAY
25948: PUSH
25949: LD_VAR 0 13
25953: PUSH
25954: LD_INT 2
25956: PLUS
25957: GREATER
25958: OR
25959: PUSH
25960: LD_VAR 0 8
25964: PUSH
25965: LD_INT 2
25967: ARRAY
25968: PUSH
25969: LD_VAR 0 13
25973: PUSH
25974: LD_INT 2
25976: MINUS
25977: LESS
25978: OR
25979: PUSH
25980: LD_VAR 0 8
25984: PUSH
25985: LD_INT 3
25987: ARRAY
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: LD_INT 8
25994: PUSH
25995: LD_INT 9
25997: PUSH
25998: LD_INT 10
26000: PUSH
26001: LD_INT 11
26003: PUSH
26004: LD_INT 12
26006: PUSH
26007: LD_INT 13
26009: PUSH
26010: LD_INT 16
26012: PUSH
26013: LD_INT 17
26015: PUSH
26016: LD_INT 18
26018: PUSH
26019: LD_INT 19
26021: PUSH
26022: LD_INT 20
26024: PUSH
26025: LD_INT 21
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: IN
26043: NOT
26044: OR
26045: PUSH
26046: LD_VAR 0 8
26050: PUSH
26051: LD_INT 5
26053: ARRAY
26054: NOT
26055: OR
26056: PUSH
26057: LD_VAR 0 8
26061: PUSH
26062: LD_INT 6
26064: ARRAY
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 7
26074: PUSH
26075: LD_INT 9
26077: PUSH
26078: LD_INT 10
26080: PUSH
26081: LD_INT 11
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: IN
26092: NOT
26093: OR
26094: IFFALSE 26100
// exit ;
26096: POP
26097: POP
26098: GO 26198
// end ;
26100: GO 25771
26102: POP
26103: POP
// side := GetSide ( depot ) ;
26104: LD_ADDR_VAR 0 9
26108: PUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL_OW 255
26118: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26119: LD_VAR 0 9
26123: PPUSH
26124: LD_VAR 0 3
26128: PPUSH
26129: LD_VAR 0 4
26133: PPUSH
26134: LD_INT 20
26136: PPUSH
26137: CALL 18852 0 4
26141: PUSH
26142: LD_INT 4
26144: ARRAY
26145: IFFALSE 26149
// exit ;
26147: GO 26198
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26149: LD_VAR 0 2
26153: PUSH
26154: LD_INT 29
26156: PUSH
26157: LD_INT 30
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: IN
26164: PUSH
26165: LD_VAR 0 3
26169: PPUSH
26170: LD_VAR 0 4
26174: PPUSH
26175: LD_VAR 0 9
26179: PPUSH
26180: CALL_OW 440
26184: NOT
26185: AND
26186: IFFALSE 26190
// exit ;
26188: GO 26198
// result := true ;
26190: LD_ADDR_VAR 0 6
26194: PUSH
26195: LD_INT 1
26197: ST_TO_ADDR
// end ;
26198: LD_VAR 0 6
26202: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26203: LD_INT 0
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
26211: PPUSH
26212: PPUSH
26213: PPUSH
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
26236: PPUSH
26237: PPUSH
26238: PPUSH
26239: PPUSH
26240: PPUSH
26241: PPUSH
26242: PPUSH
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
26248: PPUSH
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
// result = [ ] ;
26263: LD_ADDR_VAR 0 7
26267: PUSH
26268: EMPTY
26269: ST_TO_ADDR
// temp_list = [ ] ;
26270: LD_ADDR_VAR 0 9
26274: PUSH
26275: EMPTY
26276: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26277: LD_VAR 0 4
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 3
26293: PUSH
26294: LD_INT 4
26296: PUSH
26297: LD_INT 5
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: IN
26308: NOT
26309: PUSH
26310: LD_VAR 0 1
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: IN
26325: PUSH
26326: LD_VAR 0 5
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: IN
26345: NOT
26346: AND
26347: OR
26348: IFFALSE 26352
// exit ;
26350: GO 44743
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26352: LD_VAR 0 1
26356: PUSH
26357: LD_INT 6
26359: PUSH
26360: LD_INT 7
26362: PUSH
26363: LD_INT 8
26365: PUSH
26366: LD_INT 13
26368: PUSH
26369: LD_INT 12
26371: PUSH
26372: LD_INT 15
26374: PUSH
26375: LD_INT 11
26377: PUSH
26378: LD_INT 14
26380: PUSH
26381: LD_INT 10
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: IN
26395: IFFALSE 26405
// btype = b_lab ;
26397: LD_ADDR_VAR 0 1
26401: PUSH
26402: LD_INT 6
26404: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26405: LD_VAR 0 6
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: IN
26424: NOT
26425: PUSH
26426: LD_VAR 0 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 3
26442: PUSH
26443: LD_INT 6
26445: PUSH
26446: LD_INT 36
26448: PUSH
26449: LD_INT 4
26451: PUSH
26452: LD_INT 5
26454: PUSH
26455: LD_INT 31
26457: PUSH
26458: LD_INT 32
26460: PUSH
26461: LD_INT 33
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: IN
26477: NOT
26478: PUSH
26479: LD_VAR 0 6
26483: PUSH
26484: LD_INT 1
26486: EQUAL
26487: AND
26488: OR
26489: PUSH
26490: LD_VAR 0 1
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 3
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: IN
26505: NOT
26506: PUSH
26507: LD_VAR 0 6
26511: PUSH
26512: LD_INT 2
26514: EQUAL
26515: AND
26516: OR
26517: IFFALSE 26527
// mode = 0 ;
26519: LD_ADDR_VAR 0 6
26523: PUSH
26524: LD_INT 0
26526: ST_TO_ADDR
// case mode of 0 :
26527: LD_VAR 0 6
26531: PUSH
26532: LD_INT 0
26534: DOUBLE
26535: EQUAL
26536: IFTRUE 26540
26538: GO 37993
26540: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26541: LD_ADDR_VAR 0 11
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 2
26626: NEG
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 3
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 3
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26734: LD_ADDR_VAR 0 12
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 2
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: NEG
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: NEG
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 3
26891: NEG
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 3
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26930: LD_ADDR_VAR 0 13
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 2
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 2
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: LD_INT 3
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 3
27089: NEG
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 3
27101: NEG
27102: PUSH
27103: LD_INT 3
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27129: LD_ADDR_VAR 0 14
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: LD_INT 3
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 3
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27325: LD_ADDR_VAR 0 15
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: NEG
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 3
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 3
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27518: LD_ADDR_VAR 0 16
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 2
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 2
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 3
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 3
27675: PUSH
27676: LD_INT 3
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27711: LD_ADDR_VAR 0 17
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27941: LD_ADDR_VAR 0 18
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: LD_INT 2
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: NEG
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28171: LD_ADDR_VAR 0 19
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: LD_INT 2
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 2
28347: NEG
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 2
28358: NEG
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28401: LD_ADDR_VAR 0 20
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28631: LD_ADDR_VAR 0 21
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: LD_INT 2
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 2
28818: NEG
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28861: LD_ADDR_VAR 0 22
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: LD_INT 1
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29091: LD_ADDR_VAR 0 23
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 2
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 2
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: NEG
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 2
29267: NEG
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 2
29302: NEG
29303: PUSH
29304: LD_INT 3
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: LD_INT 3
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29371: LD_ADDR_VAR 0 24
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: LD_INT 2
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: LD_INT 2
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 3
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29647: LD_ADDR_VAR 0 25
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 3
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29921: LD_ADDR_VAR 0 26
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: LD_INT 2
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 2
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30197: LD_ADDR_VAR 0 27
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 3
30442: NEG
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30477: LD_ADDR_VAR 0 28
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: LD_INT 2
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: LD_INT 3
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 3
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 3
30724: NEG
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30759: LD_ADDR_VAR 0 29
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 2
30937: NEG
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 2
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: LD_INT 2
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31038: LD_ADDR_VAR 0 30
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: LD_INT 3
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31316: LD_ADDR_VAR 0 31
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: NEG
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: NEG
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 3
31559: NEG
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31594: LD_ADDR_VAR 0 32
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: NEG
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 3
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 2
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: NEG
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31872: LD_ADDR_VAR 0 33
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 3
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: NEG
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32151: LD_ADDR_VAR 0 34
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: LD_INT 3
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: LD_INT 3
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 3
32396: NEG
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32431: LD_ADDR_VAR 0 35
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32543: LD_ADDR_VAR 0 36
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32655: LD_ADDR_VAR 0 37
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32767: LD_ADDR_VAR 0 38
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32879: LD_ADDR_VAR 0 39
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32991: LD_ADDR_VAR 0 40
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33103: LD_ADDR_VAR 0 41
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: LD_INT 3
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 3
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 3
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 3
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 3
33388: NEG
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 3
33400: NEG
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: LD_INT 3
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33453: LD_ADDR_VAR 0 42
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 3
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 3
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 3
33762: NEG
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33803: LD_ADDR_VAR 0 43
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 1
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 3
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: LD_INT 2
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 3
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: NEG
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34151: LD_ADDR_VAR 0 44
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: LD_INT 2
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: NEG
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: LD_INT 3
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 3
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 3
34425: NEG
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 3
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 3
34460: NEG
34461: PUSH
34462: LD_INT 3
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34501: LD_ADDR_VAR 0 45
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 2
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 3
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 3
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 3
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 3
34810: NEG
34811: PUSH
34812: LD_INT 3
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34851: LD_ADDR_VAR 0 46
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 2
35017: NEG
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: LD_INT 3
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 3
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 3
35147: NEG
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 3
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35199: LD_ADDR_VAR 0 47
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35350: LD_ADDR_VAR 0 48
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35497: LD_ADDR_VAR 0 49
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35641: LD_ADDR_VAR 0 50
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35785: LD_ADDR_VAR 0 51
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35932: LD_ADDR_VAR 0 52
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 2
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36083: LD_ADDR_VAR 0 53
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: NEG
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36313: LD_ADDR_VAR 0 54
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: LD_INT 2
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 2
36500: NEG
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: LD_INT 2
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36543: LD_ADDR_VAR 0 55
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: NEG
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36773: LD_ADDR_VAR 0 56
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 2
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: NEG
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37003: LD_ADDR_VAR 0 57
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37233: LD_ADDR_VAR 0 58
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 2
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37463: LD_ADDR_VAR 0 59
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37551: LD_ADDR_VAR 0 60
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37639: LD_ADDR_VAR 0 61
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37727: LD_ADDR_VAR 0 62
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37815: LD_ADDR_VAR 0 63
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37903: LD_ADDR_VAR 0 64
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
// end ; 1 :
37991: GO 43888
37993: LD_INT 1
37995: DOUBLE
37996: EQUAL
37997: IFTRUE 38001
37999: GO 40624
38001: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38002: LD_ADDR_VAR 0 11
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 3
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 3
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38046: LD_ADDR_VAR 0 12
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38087: LD_ADDR_VAR 0 13
38091: PUSH
38092: LD_INT 3
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38127: LD_ADDR_VAR 0 14
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38168: LD_ADDR_VAR 0 15
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 3
38186: NEG
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38212: LD_ADDR_VAR 0 16
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PUSH
38221: LD_INT 3
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: NEG
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: LD_INT 3
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38258: LD_ADDR_VAR 0 17
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 3
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 3
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38302: LD_ADDR_VAR 0 18
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38343: LD_ADDR_VAR 0 19
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38383: LD_ADDR_VAR 0 20
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38424: LD_ADDR_VAR 0 21
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 3
38442: NEG
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38468: LD_ADDR_VAR 0 22
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: NEG
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: NEG
38500: PUSH
38501: LD_INT 3
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38514: LD_ADDR_VAR 0 23
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: LD_INT 3
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 4
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 3
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38558: LD_ADDR_VAR 0 24
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 4
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38599: LD_ADDR_VAR 0 25
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: LD_INT 4
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38639: LD_ADDR_VAR 0 26
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 4
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 3
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38680: LD_ADDR_VAR 0 27
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 3
38698: NEG
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 4
38709: NEG
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38724: LD_ADDR_VAR 0 28
38728: PUSH
38729: LD_INT 3
38731: NEG
38732: PUSH
38733: LD_INT 3
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 3
38743: NEG
38744: PUSH
38745: LD_INT 4
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 4
38755: NEG
38756: PUSH
38757: LD_INT 3
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38770: LD_ADDR_VAR 0 29
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: LD_INT 3
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 3
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 4
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 4
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 5
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 5
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: LD_INT 4
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 6
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 6
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 5
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38925: LD_ADDR_VAR 0 30
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 4
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 4
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 5
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 5
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 6
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 6
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39068: LD_ADDR_VAR 0 31
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 4
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 4
39115: PUSH
39116: LD_INT 4
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: LD_INT 4
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 5
39135: PUSH
39136: LD_INT 4
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 5
39145: PUSH
39146: LD_INT 5
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 4
39155: PUSH
39156: LD_INT 5
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 6
39165: PUSH
39166: LD_INT 5
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 6
39175: PUSH
39176: LD_INT 6
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 5
39185: PUSH
39186: LD_INT 6
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39207: LD_ADDR_VAR 0 32
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 4
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 4
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 5
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 5
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 4
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 6
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 6
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 5
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39350: LD_ADDR_VAR 0 33
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 3
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 4
39402: NEG
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 4
39413: NEG
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 4
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 5
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 5
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 5
39459: NEG
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 6
39470: NEG
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 6
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39505: LD_ADDR_VAR 0 34
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: LD_INT 3
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 3
39524: NEG
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: LD_INT 3
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 3
39548: NEG
39549: PUSH
39550: LD_INT 4
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 4
39560: NEG
39561: PUSH
39562: LD_INT 3
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 4
39572: NEG
39573: PUSH
39574: LD_INT 4
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 4
39584: NEG
39585: PUSH
39586: LD_INT 5
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 5
39596: NEG
39597: PUSH
39598: LD_INT 4
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 5
39608: NEG
39609: PUSH
39610: LD_INT 5
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 5
39620: NEG
39621: PUSH
39622: LD_INT 6
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 6
39632: NEG
39633: PUSH
39634: LD_INT 5
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 6
39644: NEG
39645: PUSH
39646: LD_INT 6
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39668: LD_ADDR_VAR 0 41
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39712: LD_ADDR_VAR 0 42
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39753: LD_ADDR_VAR 0 43
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39793: LD_ADDR_VAR 0 44
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39834: LD_ADDR_VAR 0 45
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39878: LD_ADDR_VAR 0 46
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: LD_INT 2
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 3
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 3
39909: NEG
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39924: LD_ADDR_VAR 0 47
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 3
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 3
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39957: LD_ADDR_VAR 0 48
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39988: LD_ADDR_VAR 0 49
39992: PUSH
39993: LD_INT 3
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 3
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40017: LD_ADDR_VAR 0 50
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 3
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40046: LD_ADDR_VAR 0 51
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40077: LD_ADDR_VAR 0 52
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40110: LD_ADDR_VAR 0 53
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40154: LD_ADDR_VAR 0 54
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 3
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40195: LD_ADDR_VAR 0 55
40199: PUSH
40200: LD_INT 3
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 3
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40235: LD_ADDR_VAR 0 56
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 3
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40276: LD_ADDR_VAR 0 57
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 3
40294: NEG
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: NEG
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40320: LD_ADDR_VAR 0 58
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: LD_INT 3
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 3
40351: NEG
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40366: LD_ADDR_VAR 0 59
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40410: LD_ADDR_VAR 0 60
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40451: LD_ADDR_VAR 0 61
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40491: LD_ADDR_VAR 0 62
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40532: LD_ADDR_VAR 0 63
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40576: LD_ADDR_VAR 0 64
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
// end ; 2 :
40622: GO 43888
40624: LD_INT 2
40626: DOUBLE
40627: EQUAL
40628: IFTRUE 40632
40630: GO 43887
40632: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40633: LD_ADDR_VAR 0 29
40637: PUSH
40638: LD_INT 4
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 4
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 5
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 5
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 4
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 3
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 3
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 5
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 4
40753: PUSH
40754: LD_INT 3
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 4
40763: PUSH
40764: LD_INT 4
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 3
40773: PUSH
40774: LD_INT 4
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 4
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 4
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 4
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 4
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 5
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 5
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 4
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 3
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 5
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 3
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 3
40916: NEG
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 3
40927: NEG
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 3
40961: NEG
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 4
40972: NEG
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 4
40983: NEG
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 4
40995: NEG
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 4
41018: NEG
41019: PUSH
41020: LD_INT 4
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 4
41030: NEG
41031: PUSH
41032: LD_INT 5
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 3
41042: NEG
41043: PUSH
41044: LD_INT 4
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: LD_INT 3
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 4
41066: NEG
41067: PUSH
41068: LD_INT 3
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 5
41078: NEG
41079: PUSH
41080: LD_INT 4
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 5
41090: NEG
41091: PUSH
41092: LD_INT 5
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: LD_INT 5
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 5
41114: NEG
41115: PUSH
41116: LD_INT 3
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41171: LD_ADDR_VAR 0 30
41175: PUSH
41176: LD_INT 4
41178: PUSH
41179: LD_INT 4
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 4
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 5
41198: PUSH
41199: LD_INT 4
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 5
41208: PUSH
41209: LD_INT 5
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 4
41218: PUSH
41219: LD_INT 5
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: PUSH
41229: LD_INT 4
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: LD_INT 3
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 5
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 3
41258: PUSH
41259: LD_INT 5
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 3
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 4
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 4
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 4
41361: NEG
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 4
41372: NEG
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 4
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 5
41417: NEG
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 5
41428: NEG
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 5
41440: NEG
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: NEG
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 3
41463: NEG
41464: PUSH
41465: LD_INT 3
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 3
41475: NEG
41476: PUSH
41477: LD_INT 4
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 3
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 4
41523: NEG
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 4
41535: NEG
41536: PUSH
41537: LD_INT 4
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 4
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 4
41559: NEG
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 4
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 5
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 4
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 4
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 5
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 3
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 5
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41718: LD_ADDR_VAR 0 31
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 4
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 4
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 5
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 5
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 4
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 5
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 3
41818: NEG
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 4
41874: NEG
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 4
41885: NEG
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 4
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 4
41920: NEG
41921: PUSH
41922: LD_INT 4
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 4
41932: NEG
41933: PUSH
41934: LD_INT 5
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 4
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: NEG
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 4
41968: NEG
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 5
41980: NEG
41981: PUSH
41982: LD_INT 4
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 5
41992: NEG
41993: PUSH
41994: LD_INT 5
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: LD_INT 5
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 5
42016: NEG
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 3
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 4
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 3
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 4
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: LD_INT 4
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 4
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 4
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 5
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 5
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 4
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 5
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42268: LD_ADDR_VAR 0 32
42272: PUSH
42273: LD_INT 4
42275: NEG
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 4
42286: NEG
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 4
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 5
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 5
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 5
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 3
42366: NEG
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 3
42377: NEG
42378: PUSH
42379: LD_INT 3
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: LD_INT 4
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: NEG
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 4
42437: NEG
42438: PUSH
42439: LD_INT 3
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 4
42449: NEG
42450: PUSH
42451: LD_INT 4
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: LD_INT 4
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 4
42473: NEG
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 4
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 5
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 4
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: LD_INT 4
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 5
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: LD_INT 5
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 4
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 4
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 3
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 4
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 4
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 4
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 5
42700: PUSH
42701: LD_INT 4
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: LD_INT 5
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 4
42720: PUSH
42721: LD_INT 5
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: PUSH
42731: LD_INT 4
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 5
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42815: LD_ADDR_VAR 0 33
42819: PUSH
42820: LD_INT 4
42822: NEG
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 4
42834: NEG
42835: PUSH
42836: LD_INT 5
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: LD_INT 4
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 4
42870: NEG
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 5
42882: NEG
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 5
42894: NEG
42895: PUSH
42896: LD_INT 5
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: LD_INT 5
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 5
42918: NEG
42919: PUSH
42920: LD_INT 3
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 3
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 4
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 3
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 4
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: LD_INT 4
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 4
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 4
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 5
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 5
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 4
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 5
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 4
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 4
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 4
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: LD_INT 4
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 4
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 3
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 5
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 5
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 4
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43353: LD_ADDR_VAR 0 34
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 4
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 5
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 4
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 3
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 4
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 5
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: LD_INT 3
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 5
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 4
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 4
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 4
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 4
43555: PUSH
43556: LD_INT 4
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 4
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 5
43575: PUSH
43576: LD_INT 4
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 5
43585: PUSH
43586: LD_INT 5
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: LD_INT 5
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 3
43605: PUSH
43606: LD_INT 4
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 5
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 5
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 3
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 4
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 4
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 4
43738: NEG
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 4
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 4
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 5
43794: NEG
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 5
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 5
43817: NEG
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// end ; end ;
43885: GO 43888
43887: POP
// case btype of b_depot , b_warehouse :
43888: LD_VAR 0 1
43892: PUSH
43893: LD_INT 0
43895: DOUBLE
43896: EQUAL
43897: IFTRUE 43907
43899: LD_INT 1
43901: DOUBLE
43902: EQUAL
43903: IFTRUE 43907
43905: GO 44108
43907: POP
// case nation of nation_american :
43908: LD_VAR 0 5
43912: PUSH
43913: LD_INT 1
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43921
43919: GO 43977
43921: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43922: LD_ADDR_VAR 0 9
43926: PUSH
43927: LD_VAR 0 11
43931: PUSH
43932: LD_VAR 0 12
43936: PUSH
43937: LD_VAR 0 13
43941: PUSH
43942: LD_VAR 0 14
43946: PUSH
43947: LD_VAR 0 15
43951: PUSH
43952: LD_VAR 0 16
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: LD_VAR 0 4
43969: PUSH
43970: LD_INT 1
43972: PLUS
43973: ARRAY
43974: ST_TO_ADDR
43975: GO 44106
43977: LD_INT 2
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 43985
43983: GO 44041
43985: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43986: LD_ADDR_VAR 0 9
43990: PUSH
43991: LD_VAR 0 17
43995: PUSH
43996: LD_VAR 0 18
44000: PUSH
44001: LD_VAR 0 19
44005: PUSH
44006: LD_VAR 0 20
44010: PUSH
44011: LD_VAR 0 21
44015: PUSH
44016: LD_VAR 0 22
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: PUSH
44029: LD_VAR 0 4
44033: PUSH
44034: LD_INT 1
44036: PLUS
44037: ARRAY
44038: ST_TO_ADDR
44039: GO 44106
44041: LD_INT 3
44043: DOUBLE
44044: EQUAL
44045: IFTRUE 44049
44047: GO 44105
44049: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44050: LD_ADDR_VAR 0 9
44054: PUSH
44055: LD_VAR 0 23
44059: PUSH
44060: LD_VAR 0 24
44064: PUSH
44065: LD_VAR 0 25
44069: PUSH
44070: LD_VAR 0 26
44074: PUSH
44075: LD_VAR 0 27
44079: PUSH
44080: LD_VAR 0 28
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: PUSH
44093: LD_VAR 0 4
44097: PUSH
44098: LD_INT 1
44100: PLUS
44101: ARRAY
44102: ST_TO_ADDR
44103: GO 44106
44105: POP
44106: GO 44661
44108: LD_INT 2
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44122
44114: LD_INT 3
44116: DOUBLE
44117: EQUAL
44118: IFTRUE 44122
44120: GO 44178
44122: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44123: LD_ADDR_VAR 0 9
44127: PUSH
44128: LD_VAR 0 29
44132: PUSH
44133: LD_VAR 0 30
44137: PUSH
44138: LD_VAR 0 31
44142: PUSH
44143: LD_VAR 0 32
44147: PUSH
44148: LD_VAR 0 33
44152: PUSH
44153: LD_VAR 0 34
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: PUSH
44166: LD_VAR 0 4
44170: PUSH
44171: LD_INT 1
44173: PLUS
44174: ARRAY
44175: ST_TO_ADDR
44176: GO 44661
44178: LD_INT 16
44180: DOUBLE
44181: EQUAL
44182: IFTRUE 44240
44184: LD_INT 17
44186: DOUBLE
44187: EQUAL
44188: IFTRUE 44240
44190: LD_INT 18
44192: DOUBLE
44193: EQUAL
44194: IFTRUE 44240
44196: LD_INT 19
44198: DOUBLE
44199: EQUAL
44200: IFTRUE 44240
44202: LD_INT 22
44204: DOUBLE
44205: EQUAL
44206: IFTRUE 44240
44208: LD_INT 20
44210: DOUBLE
44211: EQUAL
44212: IFTRUE 44240
44214: LD_INT 21
44216: DOUBLE
44217: EQUAL
44218: IFTRUE 44240
44220: LD_INT 23
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44240
44226: LD_INT 24
44228: DOUBLE
44229: EQUAL
44230: IFTRUE 44240
44232: LD_INT 25
44234: DOUBLE
44235: EQUAL
44236: IFTRUE 44240
44238: GO 44296
44240: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44241: LD_ADDR_VAR 0 9
44245: PUSH
44246: LD_VAR 0 35
44250: PUSH
44251: LD_VAR 0 36
44255: PUSH
44256: LD_VAR 0 37
44260: PUSH
44261: LD_VAR 0 38
44265: PUSH
44266: LD_VAR 0 39
44270: PUSH
44271: LD_VAR 0 40
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: PUSH
44284: LD_VAR 0 4
44288: PUSH
44289: LD_INT 1
44291: PLUS
44292: ARRAY
44293: ST_TO_ADDR
44294: GO 44661
44296: LD_INT 6
44298: DOUBLE
44299: EQUAL
44300: IFTRUE 44352
44302: LD_INT 7
44304: DOUBLE
44305: EQUAL
44306: IFTRUE 44352
44308: LD_INT 8
44310: DOUBLE
44311: EQUAL
44312: IFTRUE 44352
44314: LD_INT 13
44316: DOUBLE
44317: EQUAL
44318: IFTRUE 44352
44320: LD_INT 12
44322: DOUBLE
44323: EQUAL
44324: IFTRUE 44352
44326: LD_INT 15
44328: DOUBLE
44329: EQUAL
44330: IFTRUE 44352
44332: LD_INT 11
44334: DOUBLE
44335: EQUAL
44336: IFTRUE 44352
44338: LD_INT 14
44340: DOUBLE
44341: EQUAL
44342: IFTRUE 44352
44344: LD_INT 10
44346: DOUBLE
44347: EQUAL
44348: IFTRUE 44352
44350: GO 44408
44352: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44353: LD_ADDR_VAR 0 9
44357: PUSH
44358: LD_VAR 0 41
44362: PUSH
44363: LD_VAR 0 42
44367: PUSH
44368: LD_VAR 0 43
44372: PUSH
44373: LD_VAR 0 44
44377: PUSH
44378: LD_VAR 0 45
44382: PUSH
44383: LD_VAR 0 46
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: PUSH
44396: LD_VAR 0 4
44400: PUSH
44401: LD_INT 1
44403: PLUS
44404: ARRAY
44405: ST_TO_ADDR
44406: GO 44661
44408: LD_INT 36
44410: DOUBLE
44411: EQUAL
44412: IFTRUE 44416
44414: GO 44472
44416: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44417: LD_ADDR_VAR 0 9
44421: PUSH
44422: LD_VAR 0 47
44426: PUSH
44427: LD_VAR 0 48
44431: PUSH
44432: LD_VAR 0 49
44436: PUSH
44437: LD_VAR 0 50
44441: PUSH
44442: LD_VAR 0 51
44446: PUSH
44447: LD_VAR 0 52
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: PUSH
44460: LD_VAR 0 4
44464: PUSH
44465: LD_INT 1
44467: PLUS
44468: ARRAY
44469: ST_TO_ADDR
44470: GO 44661
44472: LD_INT 4
44474: DOUBLE
44475: EQUAL
44476: IFTRUE 44498
44478: LD_INT 5
44480: DOUBLE
44481: EQUAL
44482: IFTRUE 44498
44484: LD_INT 34
44486: DOUBLE
44487: EQUAL
44488: IFTRUE 44498
44490: LD_INT 37
44492: DOUBLE
44493: EQUAL
44494: IFTRUE 44498
44496: GO 44554
44498: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44499: LD_ADDR_VAR 0 9
44503: PUSH
44504: LD_VAR 0 53
44508: PUSH
44509: LD_VAR 0 54
44513: PUSH
44514: LD_VAR 0 55
44518: PUSH
44519: LD_VAR 0 56
44523: PUSH
44524: LD_VAR 0 57
44528: PUSH
44529: LD_VAR 0 58
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: PUSH
44542: LD_VAR 0 4
44546: PUSH
44547: LD_INT 1
44549: PLUS
44550: ARRAY
44551: ST_TO_ADDR
44552: GO 44661
44554: LD_INT 31
44556: DOUBLE
44557: EQUAL
44558: IFTRUE 44604
44560: LD_INT 32
44562: DOUBLE
44563: EQUAL
44564: IFTRUE 44604
44566: LD_INT 33
44568: DOUBLE
44569: EQUAL
44570: IFTRUE 44604
44572: LD_INT 27
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44604
44578: LD_INT 26
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44604
44584: LD_INT 28
44586: DOUBLE
44587: EQUAL
44588: IFTRUE 44604
44590: LD_INT 29
44592: DOUBLE
44593: EQUAL
44594: IFTRUE 44604
44596: LD_INT 30
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44604
44602: GO 44660
44604: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44605: LD_ADDR_VAR 0 9
44609: PUSH
44610: LD_VAR 0 59
44614: PUSH
44615: LD_VAR 0 60
44619: PUSH
44620: LD_VAR 0 61
44624: PUSH
44625: LD_VAR 0 62
44629: PUSH
44630: LD_VAR 0 63
44634: PUSH
44635: LD_VAR 0 64
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: PUSH
44648: LD_VAR 0 4
44652: PUSH
44653: LD_INT 1
44655: PLUS
44656: ARRAY
44657: ST_TO_ADDR
44658: GO 44661
44660: POP
// temp_list2 = [ ] ;
44661: LD_ADDR_VAR 0 10
44665: PUSH
44666: EMPTY
44667: ST_TO_ADDR
// for i in temp_list do
44668: LD_ADDR_VAR 0 8
44672: PUSH
44673: LD_VAR 0 9
44677: PUSH
44678: FOR_IN
44679: IFFALSE 44731
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44681: LD_ADDR_VAR 0 10
44685: PUSH
44686: LD_VAR 0 10
44690: PUSH
44691: LD_VAR 0 8
44695: PUSH
44696: LD_INT 1
44698: ARRAY
44699: PUSH
44700: LD_VAR 0 2
44704: PLUS
44705: PUSH
44706: LD_VAR 0 8
44710: PUSH
44711: LD_INT 2
44713: ARRAY
44714: PUSH
44715: LD_VAR 0 3
44719: PLUS
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: EMPTY
44726: LIST
44727: ADD
44728: ST_TO_ADDR
44729: GO 44678
44731: POP
44732: POP
// result = temp_list2 ;
44733: LD_ADDR_VAR 0 7
44737: PUSH
44738: LD_VAR 0 10
44742: ST_TO_ADDR
// end ;
44743: LD_VAR 0 7
44747: RET
// export function EnemyInRange ( unit , dist ) ; begin
44748: LD_INT 0
44750: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: CALL_OW 255
44765: PPUSH
44766: LD_VAR 0 1
44770: PPUSH
44771: CALL_OW 250
44775: PPUSH
44776: LD_VAR 0 1
44780: PPUSH
44781: CALL_OW 251
44785: PPUSH
44786: LD_VAR 0 2
44790: PPUSH
44791: CALL 18852 0 4
44795: PUSH
44796: LD_INT 4
44798: ARRAY
44799: ST_TO_ADDR
// end ;
44800: LD_VAR 0 3
44804: RET
// export function PlayerSeeMe ( unit ) ; begin
44805: LD_INT 0
44807: PPUSH
// result := See ( your_side , unit ) ;
44808: LD_ADDR_VAR 0 2
44812: PUSH
44813: LD_OWVAR 2
44817: PPUSH
44818: LD_VAR 0 1
44822: PPUSH
44823: CALL_OW 292
44827: ST_TO_ADDR
// end ;
44828: LD_VAR 0 2
44832: RET
// export function ReverseDir ( unit ) ; begin
44833: LD_INT 0
44835: PPUSH
// if not unit then
44836: LD_VAR 0 1
44840: NOT
44841: IFFALSE 44845
// exit ;
44843: GO 44891
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44845: LD_ADDR_VAR 0 2
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 4
44855: PUSH
44856: LD_INT 5
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: PUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 254
44885: PUSH
44886: LD_INT 1
44888: PLUS
44889: ARRAY
44890: ST_TO_ADDR
// end ;
44891: LD_VAR 0 2
44895: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44896: LD_INT 0
44898: PPUSH
44899: PPUSH
44900: PPUSH
44901: PPUSH
44902: PPUSH
// if not hexes then
44903: LD_VAR 0 2
44907: NOT
44908: IFFALSE 44912
// exit ;
44910: GO 45060
// dist := 9999 ;
44912: LD_ADDR_VAR 0 5
44916: PUSH
44917: LD_INT 9999
44919: ST_TO_ADDR
// for i = 1 to hexes do
44920: LD_ADDR_VAR 0 4
44924: PUSH
44925: DOUBLE
44926: LD_INT 1
44928: DEC
44929: ST_TO_ADDR
44930: LD_VAR 0 2
44934: PUSH
44935: FOR_TO
44936: IFFALSE 45048
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44938: LD_VAR 0 1
44942: PPUSH
44943: LD_VAR 0 2
44947: PUSH
44948: LD_VAR 0 4
44952: ARRAY
44953: PUSH
44954: LD_INT 1
44956: ARRAY
44957: PPUSH
44958: LD_VAR 0 2
44962: PUSH
44963: LD_VAR 0 4
44967: ARRAY
44968: PUSH
44969: LD_INT 2
44971: ARRAY
44972: PPUSH
44973: CALL_OW 297
44977: PUSH
44978: LD_VAR 0 5
44982: LESS
44983: IFFALSE 45046
// begin hex := hexes [ i ] ;
44985: LD_ADDR_VAR 0 7
44989: PUSH
44990: LD_VAR 0 2
44994: PUSH
44995: LD_VAR 0 4
44999: ARRAY
45000: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45001: LD_ADDR_VAR 0 5
45005: PUSH
45006: LD_VAR 0 1
45010: PPUSH
45011: LD_VAR 0 2
45015: PUSH
45016: LD_VAR 0 4
45020: ARRAY
45021: PUSH
45022: LD_INT 1
45024: ARRAY
45025: PPUSH
45026: LD_VAR 0 2
45030: PUSH
45031: LD_VAR 0 4
45035: ARRAY
45036: PUSH
45037: LD_INT 2
45039: ARRAY
45040: PPUSH
45041: CALL_OW 297
45045: ST_TO_ADDR
// end ; end ;
45046: GO 44935
45048: POP
45049: POP
// result := hex ;
45050: LD_ADDR_VAR 0 3
45054: PUSH
45055: LD_VAR 0 7
45059: ST_TO_ADDR
// end ;
45060: LD_VAR 0 3
45064: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45065: LD_INT 0
45067: PPUSH
45068: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45069: LD_VAR 0 1
45073: NOT
45074: PUSH
45075: LD_VAR 0 1
45079: PUSH
45080: LD_INT 21
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 23
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PPUSH
45104: CALL_OW 69
45108: IN
45109: NOT
45110: OR
45111: IFFALSE 45115
// exit ;
45113: GO 45162
// for i = 1 to 3 do
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: DOUBLE
45121: LD_INT 1
45123: DEC
45124: ST_TO_ADDR
45125: LD_INT 3
45127: PUSH
45128: FOR_TO
45129: IFFALSE 45160
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 250
45140: PPUSH
45141: LD_VAR 0 1
45145: PPUSH
45146: CALL_OW 251
45150: PPUSH
45151: LD_INT 1
45153: PPUSH
45154: CALL_OW 453
45158: GO 45128
45160: POP
45161: POP
// end ;
45162: LD_VAR 0 2
45166: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45167: LD_INT 0
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45175: LD_VAR 0 1
45179: NOT
45180: PUSH
45181: LD_VAR 0 2
45185: NOT
45186: OR
45187: PUSH
45188: LD_VAR 0 1
45192: PPUSH
45193: CALL_OW 314
45197: OR
45198: IFFALSE 45202
// exit ;
45200: GO 45643
// x := GetX ( enemy_unit ) ;
45202: LD_ADDR_VAR 0 7
45206: PUSH
45207: LD_VAR 0 2
45211: PPUSH
45212: CALL_OW 250
45216: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45217: LD_ADDR_VAR 0 8
45221: PUSH
45222: LD_VAR 0 2
45226: PPUSH
45227: CALL_OW 251
45231: ST_TO_ADDR
// if not x or not y then
45232: LD_VAR 0 7
45236: NOT
45237: PUSH
45238: LD_VAR 0 8
45242: NOT
45243: OR
45244: IFFALSE 45248
// exit ;
45246: GO 45643
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45248: LD_ADDR_VAR 0 6
45252: PUSH
45253: LD_VAR 0 7
45257: PPUSH
45258: LD_INT 0
45260: PPUSH
45261: LD_INT 4
45263: PPUSH
45264: CALL_OW 272
45268: PUSH
45269: LD_VAR 0 8
45273: PPUSH
45274: LD_INT 0
45276: PPUSH
45277: LD_INT 4
45279: PPUSH
45280: CALL_OW 273
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_VAR 0 7
45293: PPUSH
45294: LD_INT 1
45296: PPUSH
45297: LD_INT 4
45299: PPUSH
45300: CALL_OW 272
45304: PUSH
45305: LD_VAR 0 8
45309: PPUSH
45310: LD_INT 1
45312: PPUSH
45313: LD_INT 4
45315: PPUSH
45316: CALL_OW 273
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_VAR 0 7
45329: PPUSH
45330: LD_INT 2
45332: PPUSH
45333: LD_INT 4
45335: PPUSH
45336: CALL_OW 272
45340: PUSH
45341: LD_VAR 0 8
45345: PPUSH
45346: LD_INT 2
45348: PPUSH
45349: LD_INT 4
45351: PPUSH
45352: CALL_OW 273
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_VAR 0 7
45365: PPUSH
45366: LD_INT 3
45368: PPUSH
45369: LD_INT 4
45371: PPUSH
45372: CALL_OW 272
45376: PUSH
45377: LD_VAR 0 8
45381: PPUSH
45382: LD_INT 3
45384: PPUSH
45385: LD_INT 4
45387: PPUSH
45388: CALL_OW 273
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_VAR 0 7
45401: PPUSH
45402: LD_INT 4
45404: PPUSH
45405: LD_INT 4
45407: PPUSH
45408: CALL_OW 272
45412: PUSH
45413: LD_VAR 0 8
45417: PPUSH
45418: LD_INT 4
45420: PPUSH
45421: LD_INT 4
45423: PPUSH
45424: CALL_OW 273
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_VAR 0 7
45437: PPUSH
45438: LD_INT 5
45440: PPUSH
45441: LD_INT 4
45443: PPUSH
45444: CALL_OW 272
45448: PUSH
45449: LD_VAR 0 8
45453: PPUSH
45454: LD_INT 5
45456: PPUSH
45457: LD_INT 4
45459: PPUSH
45460: CALL_OW 273
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: ST_TO_ADDR
// for i = tmp downto 1 do
45477: LD_ADDR_VAR 0 4
45481: PUSH
45482: DOUBLE
45483: LD_VAR 0 6
45487: INC
45488: ST_TO_ADDR
45489: LD_INT 1
45491: PUSH
45492: FOR_DOWNTO
45493: IFFALSE 45594
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45495: LD_VAR 0 6
45499: PUSH
45500: LD_VAR 0 4
45504: ARRAY
45505: PUSH
45506: LD_INT 1
45508: ARRAY
45509: PPUSH
45510: LD_VAR 0 6
45514: PUSH
45515: LD_VAR 0 4
45519: ARRAY
45520: PUSH
45521: LD_INT 2
45523: ARRAY
45524: PPUSH
45525: CALL_OW 488
45529: NOT
45530: PUSH
45531: LD_VAR 0 6
45535: PUSH
45536: LD_VAR 0 4
45540: ARRAY
45541: PUSH
45542: LD_INT 1
45544: ARRAY
45545: PPUSH
45546: LD_VAR 0 6
45550: PUSH
45551: LD_VAR 0 4
45555: ARRAY
45556: PUSH
45557: LD_INT 2
45559: ARRAY
45560: PPUSH
45561: CALL_OW 428
45565: PUSH
45566: LD_INT 0
45568: NONEQUAL
45569: OR
45570: IFFALSE 45592
// tmp := Delete ( tmp , i ) ;
45572: LD_ADDR_VAR 0 6
45576: PUSH
45577: LD_VAR 0 6
45581: PPUSH
45582: LD_VAR 0 4
45586: PPUSH
45587: CALL_OW 3
45591: ST_TO_ADDR
45592: GO 45492
45594: POP
45595: POP
// j := GetClosestHex ( unit , tmp ) ;
45596: LD_ADDR_VAR 0 5
45600: PUSH
45601: LD_VAR 0 1
45605: PPUSH
45606: LD_VAR 0 6
45610: PPUSH
45611: CALL 44896 0 2
45615: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45616: LD_VAR 0 1
45620: PPUSH
45621: LD_VAR 0 5
45625: PUSH
45626: LD_INT 1
45628: ARRAY
45629: PPUSH
45630: LD_VAR 0 5
45634: PUSH
45635: LD_INT 2
45637: ARRAY
45638: PPUSH
45639: CALL_OW 111
// end ;
45643: LD_VAR 0 3
45647: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45648: LD_INT 0
45650: PPUSH
45651: PPUSH
45652: PPUSH
// uc_side = 0 ;
45653: LD_ADDR_OWVAR 20
45657: PUSH
45658: LD_INT 0
45660: ST_TO_ADDR
// uc_nation = 0 ;
45661: LD_ADDR_OWVAR 21
45665: PUSH
45666: LD_INT 0
45668: ST_TO_ADDR
// InitHc ;
45669: CALL_OW 19
// InitVc ;
45673: CALL_OW 20
// if mastodonts then
45677: LD_VAR 0 6
45681: IFFALSE 45748
// for i = 1 to mastodonts do
45683: LD_ADDR_VAR 0 11
45687: PUSH
45688: DOUBLE
45689: LD_INT 1
45691: DEC
45692: ST_TO_ADDR
45693: LD_VAR 0 6
45697: PUSH
45698: FOR_TO
45699: IFFALSE 45746
// begin vc_chassis := 31 ;
45701: LD_ADDR_OWVAR 37
45705: PUSH
45706: LD_INT 31
45708: ST_TO_ADDR
// vc_control := control_rider ;
45709: LD_ADDR_OWVAR 38
45713: PUSH
45714: LD_INT 4
45716: ST_TO_ADDR
// animal := CreateVehicle ;
45717: LD_ADDR_VAR 0 12
45721: PUSH
45722: CALL_OW 45
45726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45727: LD_VAR 0 12
45731: PPUSH
45732: LD_VAR 0 8
45736: PPUSH
45737: LD_INT 0
45739: PPUSH
45740: CALL 52493 0 3
// end ;
45744: GO 45698
45746: POP
45747: POP
// if horses then
45748: LD_VAR 0 5
45752: IFFALSE 45819
// for i = 1 to horses do
45754: LD_ADDR_VAR 0 11
45758: PUSH
45759: DOUBLE
45760: LD_INT 1
45762: DEC
45763: ST_TO_ADDR
45764: LD_VAR 0 5
45768: PUSH
45769: FOR_TO
45770: IFFALSE 45817
// begin hc_class := 21 ;
45772: LD_ADDR_OWVAR 28
45776: PUSH
45777: LD_INT 21
45779: ST_TO_ADDR
// hc_gallery :=  ;
45780: LD_ADDR_OWVAR 33
45784: PUSH
45785: LD_STRING 
45787: ST_TO_ADDR
// animal := CreateHuman ;
45788: LD_ADDR_VAR 0 12
45792: PUSH
45793: CALL_OW 44
45797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45798: LD_VAR 0 12
45802: PPUSH
45803: LD_VAR 0 8
45807: PPUSH
45808: LD_INT 0
45810: PPUSH
45811: CALL 52493 0 3
// end ;
45815: GO 45769
45817: POP
45818: POP
// if birds then
45819: LD_VAR 0 1
45823: IFFALSE 45890
// for i = 1 to birds do
45825: LD_ADDR_VAR 0 11
45829: PUSH
45830: DOUBLE
45831: LD_INT 1
45833: DEC
45834: ST_TO_ADDR
45835: LD_VAR 0 1
45839: PUSH
45840: FOR_TO
45841: IFFALSE 45888
// begin hc_class = 18 ;
45843: LD_ADDR_OWVAR 28
45847: PUSH
45848: LD_INT 18
45850: ST_TO_ADDR
// hc_gallery =  ;
45851: LD_ADDR_OWVAR 33
45855: PUSH
45856: LD_STRING 
45858: ST_TO_ADDR
// animal := CreateHuman ;
45859: LD_ADDR_VAR 0 12
45863: PUSH
45864: CALL_OW 44
45868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45869: LD_VAR 0 12
45873: PPUSH
45874: LD_VAR 0 8
45878: PPUSH
45879: LD_INT 0
45881: PPUSH
45882: CALL 52493 0 3
// end ;
45886: GO 45840
45888: POP
45889: POP
// if tigers then
45890: LD_VAR 0 2
45894: IFFALSE 45978
// for i = 1 to tigers do
45896: LD_ADDR_VAR 0 11
45900: PUSH
45901: DOUBLE
45902: LD_INT 1
45904: DEC
45905: ST_TO_ADDR
45906: LD_VAR 0 2
45910: PUSH
45911: FOR_TO
45912: IFFALSE 45976
// begin hc_class = class_tiger ;
45914: LD_ADDR_OWVAR 28
45918: PUSH
45919: LD_INT 14
45921: ST_TO_ADDR
// hc_gallery =  ;
45922: LD_ADDR_OWVAR 33
45926: PUSH
45927: LD_STRING 
45929: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45930: LD_ADDR_OWVAR 35
45934: PUSH
45935: LD_INT 7
45937: NEG
45938: PPUSH
45939: LD_INT 7
45941: PPUSH
45942: CALL_OW 12
45946: ST_TO_ADDR
// animal := CreateHuman ;
45947: LD_ADDR_VAR 0 12
45951: PUSH
45952: CALL_OW 44
45956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45957: LD_VAR 0 12
45961: PPUSH
45962: LD_VAR 0 8
45966: PPUSH
45967: LD_INT 0
45969: PPUSH
45970: CALL 52493 0 3
// end ;
45974: GO 45911
45976: POP
45977: POP
// if apemans then
45978: LD_VAR 0 3
45982: IFFALSE 46105
// for i = 1 to apemans do
45984: LD_ADDR_VAR 0 11
45988: PUSH
45989: DOUBLE
45990: LD_INT 1
45992: DEC
45993: ST_TO_ADDR
45994: LD_VAR 0 3
45998: PUSH
45999: FOR_TO
46000: IFFALSE 46103
// begin hc_class = class_apeman ;
46002: LD_ADDR_OWVAR 28
46006: PUSH
46007: LD_INT 12
46009: ST_TO_ADDR
// hc_gallery =  ;
46010: LD_ADDR_OWVAR 33
46014: PUSH
46015: LD_STRING 
46017: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46018: LD_ADDR_OWVAR 35
46022: PUSH
46023: LD_INT 5
46025: NEG
46026: PPUSH
46027: LD_INT 5
46029: PPUSH
46030: CALL_OW 12
46034: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46035: LD_ADDR_OWVAR 31
46039: PUSH
46040: LD_INT 1
46042: PPUSH
46043: LD_INT 3
46045: PPUSH
46046: CALL_OW 12
46050: PUSH
46051: LD_INT 1
46053: PPUSH
46054: LD_INT 3
46056: PPUSH
46057: CALL_OW 12
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// animal := CreateHuman ;
46074: LD_ADDR_VAR 0 12
46078: PUSH
46079: CALL_OW 44
46083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46084: LD_VAR 0 12
46088: PPUSH
46089: LD_VAR 0 8
46093: PPUSH
46094: LD_INT 0
46096: PPUSH
46097: CALL 52493 0 3
// end ;
46101: GO 45999
46103: POP
46104: POP
// if enchidnas then
46105: LD_VAR 0 4
46109: IFFALSE 46176
// for i = 1 to enchidnas do
46111: LD_ADDR_VAR 0 11
46115: PUSH
46116: DOUBLE
46117: LD_INT 1
46119: DEC
46120: ST_TO_ADDR
46121: LD_VAR 0 4
46125: PUSH
46126: FOR_TO
46127: IFFALSE 46174
// begin hc_class = 13 ;
46129: LD_ADDR_OWVAR 28
46133: PUSH
46134: LD_INT 13
46136: ST_TO_ADDR
// hc_gallery =  ;
46137: LD_ADDR_OWVAR 33
46141: PUSH
46142: LD_STRING 
46144: ST_TO_ADDR
// animal := CreateHuman ;
46145: LD_ADDR_VAR 0 12
46149: PUSH
46150: CALL_OW 44
46154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46155: LD_VAR 0 12
46159: PPUSH
46160: LD_VAR 0 8
46164: PPUSH
46165: LD_INT 0
46167: PPUSH
46168: CALL 52493 0 3
// end ;
46172: GO 46126
46174: POP
46175: POP
// if fishes then
46176: LD_VAR 0 7
46180: IFFALSE 46247
// for i = 1 to fishes do
46182: LD_ADDR_VAR 0 11
46186: PUSH
46187: DOUBLE
46188: LD_INT 1
46190: DEC
46191: ST_TO_ADDR
46192: LD_VAR 0 7
46196: PUSH
46197: FOR_TO
46198: IFFALSE 46245
// begin hc_class = 20 ;
46200: LD_ADDR_OWVAR 28
46204: PUSH
46205: LD_INT 20
46207: ST_TO_ADDR
// hc_gallery =  ;
46208: LD_ADDR_OWVAR 33
46212: PUSH
46213: LD_STRING 
46215: ST_TO_ADDR
// animal := CreateHuman ;
46216: LD_ADDR_VAR 0 12
46220: PUSH
46221: CALL_OW 44
46225: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46226: LD_VAR 0 12
46230: PPUSH
46231: LD_VAR 0 9
46235: PPUSH
46236: LD_INT 0
46238: PPUSH
46239: CALL 52493 0 3
// end ;
46243: GO 46197
46245: POP
46246: POP
// end ;
46247: LD_VAR 0 10
46251: RET
// export function WantHeal ( sci , unit ) ; begin
46252: LD_INT 0
46254: PPUSH
// if GetTaskList ( sci ) > 0 then
46255: LD_VAR 0 1
46259: PPUSH
46260: CALL_OW 437
46264: PUSH
46265: LD_INT 0
46267: GREATER
46268: IFFALSE 46338
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46270: LD_VAR 0 1
46274: PPUSH
46275: CALL_OW 437
46279: PUSH
46280: LD_INT 1
46282: ARRAY
46283: PUSH
46284: LD_INT 1
46286: ARRAY
46287: PUSH
46288: LD_STRING l
46290: EQUAL
46291: PUSH
46292: LD_VAR 0 1
46296: PPUSH
46297: CALL_OW 437
46301: PUSH
46302: LD_INT 1
46304: ARRAY
46305: PUSH
46306: LD_INT 4
46308: ARRAY
46309: PUSH
46310: LD_VAR 0 2
46314: EQUAL
46315: AND
46316: IFFALSE 46328
// result := true else
46318: LD_ADDR_VAR 0 3
46322: PUSH
46323: LD_INT 1
46325: ST_TO_ADDR
46326: GO 46336
// result := false ;
46328: LD_ADDR_VAR 0 3
46332: PUSH
46333: LD_INT 0
46335: ST_TO_ADDR
// end else
46336: GO 46346
// result := false ;
46338: LD_ADDR_VAR 0 3
46342: PUSH
46343: LD_INT 0
46345: ST_TO_ADDR
// end ;
46346: LD_VAR 0 3
46350: RET
// export function HealTarget ( sci ) ; begin
46351: LD_INT 0
46353: PPUSH
// if not sci then
46354: LD_VAR 0 1
46358: NOT
46359: IFFALSE 46363
// exit ;
46361: GO 46428
// result := 0 ;
46363: LD_ADDR_VAR 0 2
46367: PUSH
46368: LD_INT 0
46370: ST_TO_ADDR
// if GetTaskList ( sci ) then
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 437
46380: IFFALSE 46428
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46382: LD_VAR 0 1
46386: PPUSH
46387: CALL_OW 437
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PUSH
46396: LD_INT 1
46398: ARRAY
46399: PUSH
46400: LD_STRING l
46402: EQUAL
46403: IFFALSE 46428
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46405: LD_ADDR_VAR 0 2
46409: PUSH
46410: LD_VAR 0 1
46414: PPUSH
46415: CALL_OW 437
46419: PUSH
46420: LD_INT 1
46422: ARRAY
46423: PUSH
46424: LD_INT 4
46426: ARRAY
46427: ST_TO_ADDR
// end ;
46428: LD_VAR 0 2
46432: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
46433: LD_INT 0
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
// if not list then
46469: LD_VAR 0 1
46473: NOT
46474: IFFALSE 46478
// exit ;
46476: GO 51104
// base := list [ 1 ] ;
46478: LD_ADDR_VAR 0 3
46482: PUSH
46483: LD_VAR 0 1
46487: PUSH
46488: LD_INT 1
46490: ARRAY
46491: ST_TO_ADDR
// group := list [ 2 ] ;
46492: LD_ADDR_VAR 0 4
46496: PUSH
46497: LD_VAR 0 1
46501: PUSH
46502: LD_INT 2
46504: ARRAY
46505: ST_TO_ADDR
// path := list [ 3 ] ;
46506: LD_ADDR_VAR 0 5
46510: PUSH
46511: LD_VAR 0 1
46515: PUSH
46516: LD_INT 3
46518: ARRAY
46519: ST_TO_ADDR
// flags := list [ 4 ] ;
46520: LD_ADDR_VAR 0 6
46524: PUSH
46525: LD_VAR 0 1
46529: PUSH
46530: LD_INT 4
46532: ARRAY
46533: ST_TO_ADDR
// mined := [ ] ;
46534: LD_ADDR_VAR 0 27
46538: PUSH
46539: EMPTY
46540: ST_TO_ADDR
// bombed := [ ] ;
46541: LD_ADDR_VAR 0 28
46545: PUSH
46546: EMPTY
46547: ST_TO_ADDR
// healers := [ ] ;
46548: LD_ADDR_VAR 0 31
46552: PUSH
46553: EMPTY
46554: ST_TO_ADDR
// to_heal := [ ] ;
46555: LD_ADDR_VAR 0 30
46559: PUSH
46560: EMPTY
46561: ST_TO_ADDR
// repairs := [ ] ;
46562: LD_ADDR_VAR 0 33
46566: PUSH
46567: EMPTY
46568: ST_TO_ADDR
// to_repair := [ ] ;
46569: LD_ADDR_VAR 0 32
46573: PUSH
46574: EMPTY
46575: ST_TO_ADDR
// if not group or not path then
46576: LD_VAR 0 4
46580: NOT
46581: PUSH
46582: LD_VAR 0 5
46586: NOT
46587: OR
46588: IFFALSE 46592
// exit ;
46590: GO 51104
// side := GetSide ( group [ 1 ] ) ;
46592: LD_ADDR_VAR 0 35
46596: PUSH
46597: LD_VAR 0 4
46601: PUSH
46602: LD_INT 1
46604: ARRAY
46605: PPUSH
46606: CALL_OW 255
46610: ST_TO_ADDR
// if flags then
46611: LD_VAR 0 6
46615: IFFALSE 46759
// begin f_ignore_area := flags [ 1 ] ;
46617: LD_ADDR_VAR 0 17
46621: PUSH
46622: LD_VAR 0 6
46626: PUSH
46627: LD_INT 1
46629: ARRAY
46630: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46631: LD_ADDR_VAR 0 18
46635: PUSH
46636: LD_VAR 0 6
46640: PUSH
46641: LD_INT 2
46643: ARRAY
46644: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46645: LD_ADDR_VAR 0 19
46649: PUSH
46650: LD_VAR 0 6
46654: PUSH
46655: LD_INT 3
46657: ARRAY
46658: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46659: LD_ADDR_VAR 0 20
46663: PUSH
46664: LD_VAR 0 6
46668: PUSH
46669: LD_INT 4
46671: ARRAY
46672: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46673: LD_ADDR_VAR 0 21
46677: PUSH
46678: LD_VAR 0 6
46682: PUSH
46683: LD_INT 5
46685: ARRAY
46686: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46687: LD_ADDR_VAR 0 22
46691: PUSH
46692: LD_VAR 0 6
46696: PUSH
46697: LD_INT 6
46699: ARRAY
46700: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46701: LD_ADDR_VAR 0 23
46705: PUSH
46706: LD_VAR 0 6
46710: PUSH
46711: LD_INT 7
46713: ARRAY
46714: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46715: LD_ADDR_VAR 0 24
46719: PUSH
46720: LD_VAR 0 6
46724: PUSH
46725: LD_INT 8
46727: ARRAY
46728: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46729: LD_ADDR_VAR 0 25
46733: PUSH
46734: LD_VAR 0 6
46738: PUSH
46739: LD_INT 9
46741: ARRAY
46742: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46743: LD_ADDR_VAR 0 26
46747: PUSH
46748: LD_VAR 0 6
46752: PUSH
46753: LD_INT 10
46755: ARRAY
46756: ST_TO_ADDR
// end else
46757: GO 46839
// begin f_ignore_area := false ;
46759: LD_ADDR_VAR 0 17
46763: PUSH
46764: LD_INT 0
46766: ST_TO_ADDR
// f_capture := false ;
46767: LD_ADDR_VAR 0 18
46771: PUSH
46772: LD_INT 0
46774: ST_TO_ADDR
// f_ignore_civ := false ;
46775: LD_ADDR_VAR 0 19
46779: PUSH
46780: LD_INT 0
46782: ST_TO_ADDR
// f_murder := false ;
46783: LD_ADDR_VAR 0 20
46787: PUSH
46788: LD_INT 0
46790: ST_TO_ADDR
// f_mines := false ;
46791: LD_ADDR_VAR 0 21
46795: PUSH
46796: LD_INT 0
46798: ST_TO_ADDR
// f_repair := false ;
46799: LD_ADDR_VAR 0 22
46803: PUSH
46804: LD_INT 0
46806: ST_TO_ADDR
// f_heal := false ;
46807: LD_ADDR_VAR 0 23
46811: PUSH
46812: LD_INT 0
46814: ST_TO_ADDR
// f_spacetime := false ;
46815: LD_ADDR_VAR 0 24
46819: PUSH
46820: LD_INT 0
46822: ST_TO_ADDR
// f_attack_depot := false ;
46823: LD_ADDR_VAR 0 25
46827: PUSH
46828: LD_INT 0
46830: ST_TO_ADDR
// f_crawl := false ;
46831: LD_ADDR_VAR 0 26
46835: PUSH
46836: LD_INT 0
46838: ST_TO_ADDR
// end ; if f_heal then
46839: LD_VAR 0 23
46843: IFFALSE 46870
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
46845: LD_ADDR_VAR 0 31
46849: PUSH
46850: LD_VAR 0 4
46854: PPUSH
46855: LD_INT 25
46857: PUSH
46858: LD_INT 4
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PPUSH
46865: CALL_OW 72
46869: ST_TO_ADDR
// if f_repair then
46870: LD_VAR 0 22
46874: IFFALSE 46901
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
46876: LD_ADDR_VAR 0 33
46880: PUSH
46881: LD_VAR 0 4
46885: PPUSH
46886: LD_INT 25
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PPUSH
46896: CALL_OW 72
46900: ST_TO_ADDR
// units_path := [ ] ;
46901: LD_ADDR_VAR 0 16
46905: PUSH
46906: EMPTY
46907: ST_TO_ADDR
// for i = 1 to group do
46908: LD_ADDR_VAR 0 7
46912: PUSH
46913: DOUBLE
46914: LD_INT 1
46916: DEC
46917: ST_TO_ADDR
46918: LD_VAR 0 4
46922: PUSH
46923: FOR_TO
46924: IFFALSE 46953
// units_path := Replace ( units_path , i , path ) ;
46926: LD_ADDR_VAR 0 16
46930: PUSH
46931: LD_VAR 0 16
46935: PPUSH
46936: LD_VAR 0 7
46940: PPUSH
46941: LD_VAR 0 5
46945: PPUSH
46946: CALL_OW 1
46950: ST_TO_ADDR
46951: GO 46923
46953: POP
46954: POP
// repeat for i = group downto 1 do
46955: LD_ADDR_VAR 0 7
46959: PUSH
46960: DOUBLE
46961: LD_VAR 0 4
46965: INC
46966: ST_TO_ADDR
46967: LD_INT 1
46969: PUSH
46970: FOR_DOWNTO
46971: IFFALSE 51067
// begin wait ( 5 ) ;
46973: LD_INT 5
46975: PPUSH
46976: CALL_OW 67
// tmp := [ ] ;
46980: LD_ADDR_VAR 0 14
46984: PUSH
46985: EMPTY
46986: ST_TO_ADDR
// attacking := false ;
46987: LD_ADDR_VAR 0 29
46991: PUSH
46992: LD_INT 0
46994: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46995: LD_VAR 0 4
46999: PUSH
47000: LD_VAR 0 7
47004: ARRAY
47005: PPUSH
47006: CALL_OW 301
47010: PUSH
47011: LD_VAR 0 4
47015: PUSH
47016: LD_VAR 0 7
47020: ARRAY
47021: NOT
47022: OR
47023: IFFALSE 47132
// begin if GetType ( group [ i ] ) = unit_human then
47025: LD_VAR 0 4
47029: PUSH
47030: LD_VAR 0 7
47034: ARRAY
47035: PPUSH
47036: CALL_OW 247
47040: PUSH
47041: LD_INT 1
47043: EQUAL
47044: IFFALSE 47090
// begin to_heal := to_heal diff group [ i ] ;
47046: LD_ADDR_VAR 0 30
47050: PUSH
47051: LD_VAR 0 30
47055: PUSH
47056: LD_VAR 0 4
47060: PUSH
47061: LD_VAR 0 7
47065: ARRAY
47066: DIFF
47067: ST_TO_ADDR
// healers := healers diff group [ i ] ;
47068: LD_ADDR_VAR 0 31
47072: PUSH
47073: LD_VAR 0 31
47077: PUSH
47078: LD_VAR 0 4
47082: PUSH
47083: LD_VAR 0 7
47087: ARRAY
47088: DIFF
47089: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
47090: LD_ADDR_VAR 0 4
47094: PUSH
47095: LD_VAR 0 4
47099: PPUSH
47100: LD_VAR 0 7
47104: PPUSH
47105: CALL_OW 3
47109: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47110: LD_ADDR_VAR 0 16
47114: PUSH
47115: LD_VAR 0 16
47119: PPUSH
47120: LD_VAR 0 7
47124: PPUSH
47125: CALL_OW 3
47129: ST_TO_ADDR
// continue ;
47130: GO 46970
// end ; if f_repair then
47132: LD_VAR 0 22
47136: IFFALSE 47625
// begin if GetType ( group [ i ] ) = unit_vehicle then
47138: LD_VAR 0 4
47142: PUSH
47143: LD_VAR 0 7
47147: ARRAY
47148: PPUSH
47149: CALL_OW 247
47153: PUSH
47154: LD_INT 2
47156: EQUAL
47157: IFFALSE 47347
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
47159: LD_VAR 0 4
47163: PUSH
47164: LD_VAR 0 7
47168: ARRAY
47169: PPUSH
47170: CALL_OW 256
47174: PUSH
47175: LD_INT 700
47177: LESS
47178: PUSH
47179: LD_VAR 0 4
47183: PUSH
47184: LD_VAR 0 7
47188: ARRAY
47189: PUSH
47190: LD_VAR 0 32
47194: IN
47195: NOT
47196: AND
47197: IFFALSE 47221
// to_repair := to_repair union group [ i ] ;
47199: LD_ADDR_VAR 0 32
47203: PUSH
47204: LD_VAR 0 32
47208: PUSH
47209: LD_VAR 0 4
47213: PUSH
47214: LD_VAR 0 7
47218: ARRAY
47219: UNION
47220: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
47221: LD_VAR 0 4
47225: PUSH
47226: LD_VAR 0 7
47230: ARRAY
47231: PPUSH
47232: CALL_OW 256
47236: PUSH
47237: LD_INT 1000
47239: EQUAL
47240: PUSH
47241: LD_VAR 0 4
47245: PUSH
47246: LD_VAR 0 7
47250: ARRAY
47251: PUSH
47252: LD_VAR 0 32
47256: IN
47257: AND
47258: IFFALSE 47282
// to_repair := to_repair diff group [ i ] ;
47260: LD_ADDR_VAR 0 32
47264: PUSH
47265: LD_VAR 0 32
47269: PUSH
47270: LD_VAR 0 4
47274: PUSH
47275: LD_VAR 0 7
47279: ARRAY
47280: DIFF
47281: ST_TO_ADDR
// if group [ i ] in to_repair then
47282: LD_VAR 0 4
47286: PUSH
47287: LD_VAR 0 7
47291: ARRAY
47292: PUSH
47293: LD_VAR 0 32
47297: IN
47298: IFFALSE 47345
// begin if not IsInArea ( group [ i ] , f_repair ) then
47300: LD_VAR 0 4
47304: PUSH
47305: LD_VAR 0 7
47309: ARRAY
47310: PPUSH
47311: LD_VAR 0 22
47315: PPUSH
47316: CALL_OW 308
47320: NOT
47321: IFFALSE 47343
// ComMoveToArea ( group [ i ] , f_repair ) ;
47323: LD_VAR 0 4
47327: PUSH
47328: LD_VAR 0 7
47332: ARRAY
47333: PPUSH
47334: LD_VAR 0 22
47338: PPUSH
47339: CALL_OW 113
// continue ;
47343: GO 46970
// end ; end else
47345: GO 47625
// if group [ i ] in repairs then
47347: LD_VAR 0 4
47351: PUSH
47352: LD_VAR 0 7
47356: ARRAY
47357: PUSH
47358: LD_VAR 0 33
47362: IN
47363: IFFALSE 47625
// begin if IsInUnit ( group [ i ] ) then
47365: LD_VAR 0 4
47369: PUSH
47370: LD_VAR 0 7
47374: ARRAY
47375: PPUSH
47376: CALL_OW 310
47380: IFFALSE 47448
// begin z := IsInUnit ( group [ i ] ) ;
47382: LD_ADDR_VAR 0 13
47386: PUSH
47387: LD_VAR 0 4
47391: PUSH
47392: LD_VAR 0 7
47396: ARRAY
47397: PPUSH
47398: CALL_OW 310
47402: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
47403: LD_VAR 0 13
47407: PUSH
47408: LD_VAR 0 32
47412: IN
47413: PUSH
47414: LD_VAR 0 13
47418: PPUSH
47419: LD_VAR 0 22
47423: PPUSH
47424: CALL_OW 308
47428: AND
47429: IFFALSE 47446
// ComExitVehicle ( group [ i ] ) ;
47431: LD_VAR 0 4
47435: PUSH
47436: LD_VAR 0 7
47440: ARRAY
47441: PPUSH
47442: CALL_OW 121
// end else
47446: GO 47625
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
47448: LD_ADDR_VAR 0 13
47452: PUSH
47453: LD_VAR 0 4
47457: PPUSH
47458: LD_INT 95
47460: PUSH
47461: LD_VAR 0 22
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 58
47472: PUSH
47473: EMPTY
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PPUSH
47480: CALL_OW 72
47484: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
47485: LD_VAR 0 4
47489: PUSH
47490: LD_VAR 0 7
47494: ARRAY
47495: PPUSH
47496: CALL_OW 314
47500: NOT
47501: IFFALSE 47623
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
47503: LD_ADDR_VAR 0 10
47507: PUSH
47508: LD_VAR 0 13
47512: PPUSH
47513: LD_VAR 0 4
47517: PUSH
47518: LD_VAR 0 7
47522: ARRAY
47523: PPUSH
47524: CALL_OW 74
47528: ST_TO_ADDR
// if not x then
47529: LD_VAR 0 10
47533: NOT
47534: IFFALSE 47538
// continue ;
47536: GO 46970
// if GetLives ( x ) < 1000 then
47538: LD_VAR 0 10
47542: PPUSH
47543: CALL_OW 256
47547: PUSH
47548: LD_INT 1000
47550: LESS
47551: IFFALSE 47575
// ComRepairVehicle ( group [ i ] , x ) else
47553: LD_VAR 0 4
47557: PUSH
47558: LD_VAR 0 7
47562: ARRAY
47563: PPUSH
47564: LD_VAR 0 10
47568: PPUSH
47569: CALL_OW 129
47573: GO 47623
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47575: LD_VAR 0 23
47579: PUSH
47580: LD_VAR 0 4
47584: PUSH
47585: LD_VAR 0 7
47589: ARRAY
47590: PPUSH
47591: CALL_OW 256
47595: PUSH
47596: LD_INT 1000
47598: LESS
47599: AND
47600: NOT
47601: IFFALSE 47623
// ComEnterUnit ( group [ i ] , x ) ;
47603: LD_VAR 0 4
47607: PUSH
47608: LD_VAR 0 7
47612: ARRAY
47613: PPUSH
47614: LD_VAR 0 10
47618: PPUSH
47619: CALL_OW 120
// end ; continue ;
47623: GO 46970
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47625: LD_VAR 0 23
47629: PUSH
47630: LD_VAR 0 4
47634: PUSH
47635: LD_VAR 0 7
47639: ARRAY
47640: PPUSH
47641: CALL_OW 247
47645: PUSH
47646: LD_INT 1
47648: EQUAL
47649: AND
47650: IFFALSE 48128
// begin if group [ i ] in healers then
47652: LD_VAR 0 4
47656: PUSH
47657: LD_VAR 0 7
47661: ARRAY
47662: PUSH
47663: LD_VAR 0 31
47667: IN
47668: IFFALSE 47941
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47670: LD_VAR 0 4
47674: PUSH
47675: LD_VAR 0 7
47679: ARRAY
47680: PPUSH
47681: LD_VAR 0 23
47685: PPUSH
47686: CALL_OW 308
47690: NOT
47691: PUSH
47692: LD_VAR 0 4
47696: PUSH
47697: LD_VAR 0 7
47701: ARRAY
47702: PPUSH
47703: CALL_OW 314
47707: NOT
47708: AND
47709: IFFALSE 47733
// ComMoveToArea ( group [ i ] , f_heal ) else
47711: LD_VAR 0 4
47715: PUSH
47716: LD_VAR 0 7
47720: ARRAY
47721: PPUSH
47722: LD_VAR 0 23
47726: PPUSH
47727: CALL_OW 113
47731: GO 47939
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47733: LD_VAR 0 4
47737: PUSH
47738: LD_VAR 0 7
47742: ARRAY
47743: PPUSH
47744: CALL 46351 0 1
47748: PPUSH
47749: CALL_OW 256
47753: PUSH
47754: LD_INT 1000
47756: EQUAL
47757: IFFALSE 47776
// ComStop ( group [ i ] ) else
47759: LD_VAR 0 4
47763: PUSH
47764: LD_VAR 0 7
47768: ARRAY
47769: PPUSH
47770: CALL_OW 141
47774: GO 47939
// if not HasTask ( group [ i ] ) and to_heal then
47776: LD_VAR 0 4
47780: PUSH
47781: LD_VAR 0 7
47785: ARRAY
47786: PPUSH
47787: CALL_OW 314
47791: NOT
47792: PUSH
47793: LD_VAR 0 30
47797: AND
47798: IFFALSE 47939
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
47800: LD_ADDR_VAR 0 13
47804: PUSH
47805: LD_VAR 0 30
47809: PPUSH
47810: LD_INT 3
47812: PUSH
47813: LD_INT 54
47815: PUSH
47816: EMPTY
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PPUSH
47823: CALL_OW 72
47827: PPUSH
47828: LD_VAR 0 4
47832: PUSH
47833: LD_VAR 0 7
47837: ARRAY
47838: PPUSH
47839: CALL_OW 74
47843: ST_TO_ADDR
// if z then
47844: LD_VAR 0 13
47848: IFFALSE 47939
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
47850: LD_INT 91
47852: PUSH
47853: LD_VAR 0 13
47857: PUSH
47858: LD_INT 10
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 81
47868: PUSH
47869: LD_VAR 0 13
47873: PPUSH
47874: CALL_OW 255
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PPUSH
47887: CALL_OW 69
47891: PUSH
47892: LD_INT 0
47894: EQUAL
47895: IFFALSE 47919
// ComHeal ( group [ i ] , z ) else
47897: LD_VAR 0 4
47901: PUSH
47902: LD_VAR 0 7
47906: ARRAY
47907: PPUSH
47908: LD_VAR 0 13
47912: PPUSH
47913: CALL_OW 128
47917: GO 47939
// ComMoveToArea ( group [ i ] , f_heal ) ;
47919: LD_VAR 0 4
47923: PUSH
47924: LD_VAR 0 7
47928: ARRAY
47929: PPUSH
47930: LD_VAR 0 23
47934: PPUSH
47935: CALL_OW 113
// end ; continue ;
47939: GO 46970
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
47941: LD_VAR 0 4
47945: PUSH
47946: LD_VAR 0 7
47950: ARRAY
47951: PPUSH
47952: CALL_OW 256
47956: PUSH
47957: LD_INT 700
47959: LESS
47960: PUSH
47961: LD_VAR 0 4
47965: PUSH
47966: LD_VAR 0 7
47970: ARRAY
47971: PUSH
47972: LD_VAR 0 30
47976: IN
47977: NOT
47978: AND
47979: IFFALSE 48003
// to_heal := to_heal union group [ i ] ;
47981: LD_ADDR_VAR 0 30
47985: PUSH
47986: LD_VAR 0 30
47990: PUSH
47991: LD_VAR 0 4
47995: PUSH
47996: LD_VAR 0 7
48000: ARRAY
48001: UNION
48002: ST_TO_ADDR
// if group [ i ] in to_heal then
48003: LD_VAR 0 4
48007: PUSH
48008: LD_VAR 0 7
48012: ARRAY
48013: PUSH
48014: LD_VAR 0 30
48018: IN
48019: IFFALSE 48128
// begin if GetLives ( group [ i ] ) = 1000 then
48021: LD_VAR 0 4
48025: PUSH
48026: LD_VAR 0 7
48030: ARRAY
48031: PPUSH
48032: CALL_OW 256
48036: PUSH
48037: LD_INT 1000
48039: EQUAL
48040: IFFALSE 48066
// to_heal := to_heal diff group [ i ] else
48042: LD_ADDR_VAR 0 30
48046: PUSH
48047: LD_VAR 0 30
48051: PUSH
48052: LD_VAR 0 4
48056: PUSH
48057: LD_VAR 0 7
48061: ARRAY
48062: DIFF
48063: ST_TO_ADDR
48064: GO 48128
// begin if not IsInArea ( group [ i ] , to_heal ) then
48066: LD_VAR 0 4
48070: PUSH
48071: LD_VAR 0 7
48075: ARRAY
48076: PPUSH
48077: LD_VAR 0 30
48081: PPUSH
48082: CALL_OW 308
48086: NOT
48087: IFFALSE 48111
// ComMoveToArea ( group [ i ] , f_heal ) else
48089: LD_VAR 0 4
48093: PUSH
48094: LD_VAR 0 7
48098: ARRAY
48099: PPUSH
48100: LD_VAR 0 23
48104: PPUSH
48105: CALL_OW 113
48109: GO 48126
// ComHold ( group [ i ] ) ;
48111: LD_VAR 0 4
48115: PUSH
48116: LD_VAR 0 7
48120: ARRAY
48121: PPUSH
48122: CALL_OW 140
// continue ;
48126: GO 46970
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48128: LD_VAR 0 4
48132: PUSH
48133: LD_VAR 0 7
48137: ARRAY
48138: PPUSH
48139: LD_INT 10
48141: PPUSH
48142: CALL 44748 0 2
48146: NOT
48147: PUSH
48148: LD_VAR 0 16
48152: PUSH
48153: LD_VAR 0 7
48157: ARRAY
48158: PUSH
48159: EMPTY
48160: EQUAL
48161: NOT
48162: AND
48163: IFFALSE 48429
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48165: LD_VAR 0 4
48169: PUSH
48170: LD_VAR 0 7
48174: ARRAY
48175: PPUSH
48176: CALL_OW 262
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: IN
48191: IFFALSE 48232
// if GetFuel ( group [ i ] ) < 10 then
48193: LD_VAR 0 4
48197: PUSH
48198: LD_VAR 0 7
48202: ARRAY
48203: PPUSH
48204: CALL_OW 261
48208: PUSH
48209: LD_INT 10
48211: LESS
48212: IFFALSE 48232
// SetFuel ( group [ i ] , 12 ) ;
48214: LD_VAR 0 4
48218: PUSH
48219: LD_VAR 0 7
48223: ARRAY
48224: PPUSH
48225: LD_INT 12
48227: PPUSH
48228: CALL_OW 240
// if units_path [ i ] then
48232: LD_VAR 0 16
48236: PUSH
48237: LD_VAR 0 7
48241: ARRAY
48242: IFFALSE 48427
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48244: LD_VAR 0 4
48248: PUSH
48249: LD_VAR 0 7
48253: ARRAY
48254: PPUSH
48255: LD_VAR 0 16
48259: PUSH
48260: LD_VAR 0 7
48264: ARRAY
48265: PUSH
48266: LD_INT 1
48268: ARRAY
48269: PUSH
48270: LD_INT 1
48272: ARRAY
48273: PPUSH
48274: LD_VAR 0 16
48278: PUSH
48279: LD_VAR 0 7
48283: ARRAY
48284: PUSH
48285: LD_INT 1
48287: ARRAY
48288: PUSH
48289: LD_INT 2
48291: ARRAY
48292: PPUSH
48293: CALL_OW 297
48297: PUSH
48298: LD_INT 6
48300: GREATER
48301: IFFALSE 48376
// begin if not HasTask ( group [ i ] ) then
48303: LD_VAR 0 4
48307: PUSH
48308: LD_VAR 0 7
48312: ARRAY
48313: PPUSH
48314: CALL_OW 314
48318: NOT
48319: IFFALSE 48374
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48321: LD_VAR 0 4
48325: PUSH
48326: LD_VAR 0 7
48330: ARRAY
48331: PPUSH
48332: LD_VAR 0 16
48336: PUSH
48337: LD_VAR 0 7
48341: ARRAY
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: PUSH
48347: LD_INT 1
48349: ARRAY
48350: PPUSH
48351: LD_VAR 0 16
48355: PUSH
48356: LD_VAR 0 7
48360: ARRAY
48361: PUSH
48362: LD_INT 1
48364: ARRAY
48365: PUSH
48366: LD_INT 2
48368: ARRAY
48369: PPUSH
48370: CALL_OW 114
// end else
48374: GO 48427
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48376: LD_ADDR_VAR 0 15
48380: PUSH
48381: LD_VAR 0 16
48385: PUSH
48386: LD_VAR 0 7
48390: ARRAY
48391: PPUSH
48392: LD_INT 1
48394: PPUSH
48395: CALL_OW 3
48399: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48400: LD_ADDR_VAR 0 16
48404: PUSH
48405: LD_VAR 0 16
48409: PPUSH
48410: LD_VAR 0 7
48414: PPUSH
48415: LD_VAR 0 15
48419: PPUSH
48420: CALL_OW 1
48424: ST_TO_ADDR
// continue ;
48425: GO 46970
// end ; end ; end else
48427: GO 51065
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48429: LD_ADDR_VAR 0 14
48433: PUSH
48434: LD_INT 81
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_VAR 0 7
48446: ARRAY
48447: PPUSH
48448: CALL_OW 255
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PPUSH
48457: CALL_OW 69
48461: ST_TO_ADDR
// if not tmp then
48462: LD_VAR 0 14
48466: NOT
48467: IFFALSE 48471
// continue ;
48469: GO 46970
// if f_ignore_area then
48471: LD_VAR 0 17
48475: IFFALSE 48563
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48477: LD_ADDR_VAR 0 15
48481: PUSH
48482: LD_VAR 0 14
48486: PPUSH
48487: LD_INT 3
48489: PUSH
48490: LD_INT 92
48492: PUSH
48493: LD_VAR 0 17
48497: PUSH
48498: LD_INT 1
48500: ARRAY
48501: PUSH
48502: LD_VAR 0 17
48506: PUSH
48507: LD_INT 2
48509: ARRAY
48510: PUSH
48511: LD_VAR 0 17
48515: PUSH
48516: LD_INT 3
48518: ARRAY
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PPUSH
48530: CALL_OW 72
48534: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48535: LD_VAR 0 14
48539: PUSH
48540: LD_VAR 0 15
48544: DIFF
48545: IFFALSE 48563
// tmp := tmp diff tmp2 ;
48547: LD_ADDR_VAR 0 14
48551: PUSH
48552: LD_VAR 0 14
48556: PUSH
48557: LD_VAR 0 15
48561: DIFF
48562: ST_TO_ADDR
// end ; if not f_murder then
48563: LD_VAR 0 20
48567: NOT
48568: IFFALSE 48626
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48570: LD_ADDR_VAR 0 15
48574: PUSH
48575: LD_VAR 0 14
48579: PPUSH
48580: LD_INT 3
48582: PUSH
48583: LD_INT 50
48585: PUSH
48586: EMPTY
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PPUSH
48593: CALL_OW 72
48597: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48598: LD_VAR 0 14
48602: PUSH
48603: LD_VAR 0 15
48607: DIFF
48608: IFFALSE 48626
// tmp := tmp diff tmp2 ;
48610: LD_ADDR_VAR 0 14
48614: PUSH
48615: LD_VAR 0 14
48619: PUSH
48620: LD_VAR 0 15
48624: DIFF
48625: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48626: LD_ADDR_VAR 0 14
48630: PUSH
48631: LD_VAR 0 4
48635: PUSH
48636: LD_VAR 0 7
48640: ARRAY
48641: PPUSH
48642: LD_VAR 0 14
48646: PPUSH
48647: LD_INT 1
48649: PPUSH
48650: LD_INT 1
48652: PPUSH
48653: CALL 18391 0 4
48657: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48658: LD_VAR 0 4
48662: PUSH
48663: LD_VAR 0 7
48667: ARRAY
48668: PPUSH
48669: CALL_OW 257
48673: PUSH
48674: LD_INT 1
48676: EQUAL
48677: IFFALSE 49125
// begin if WantPlant ( group [ i ] ) then
48679: LD_VAR 0 4
48683: PUSH
48684: LD_VAR 0 7
48688: ARRAY
48689: PPUSH
48690: CALL 17892 0 1
48694: IFFALSE 48698
// continue ;
48696: GO 46970
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48698: LD_VAR 0 18
48702: PUSH
48703: LD_VAR 0 4
48707: PUSH
48708: LD_VAR 0 7
48712: ARRAY
48713: PPUSH
48714: CALL_OW 310
48718: NOT
48719: AND
48720: PUSH
48721: LD_VAR 0 14
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PUSH
48730: LD_VAR 0 14
48734: PPUSH
48735: LD_INT 21
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 58
48747: PUSH
48748: EMPTY
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PPUSH
48755: CALL_OW 72
48759: IN
48760: AND
48761: IFFALSE 48797
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48763: LD_VAR 0 4
48767: PUSH
48768: LD_VAR 0 7
48772: ARRAY
48773: PPUSH
48774: LD_VAR 0 14
48778: PUSH
48779: LD_INT 1
48781: ARRAY
48782: PPUSH
48783: CALL_OW 120
// attacking := true ;
48787: LD_ADDR_VAR 0 29
48791: PUSH
48792: LD_INT 1
48794: ST_TO_ADDR
// continue ;
48795: GO 46970
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48797: LD_VAR 0 26
48801: PUSH
48802: LD_VAR 0 4
48806: PUSH
48807: LD_VAR 0 7
48811: ARRAY
48812: PPUSH
48813: CALL_OW 257
48817: PUSH
48818: LD_INT 1
48820: EQUAL
48821: AND
48822: PUSH
48823: LD_VAR 0 4
48827: PUSH
48828: LD_VAR 0 7
48832: ARRAY
48833: PPUSH
48834: CALL_OW 256
48838: PUSH
48839: LD_INT 800
48841: LESS
48842: AND
48843: PUSH
48844: LD_VAR 0 4
48848: PUSH
48849: LD_VAR 0 7
48853: ARRAY
48854: PPUSH
48855: CALL_OW 318
48859: NOT
48860: AND
48861: IFFALSE 48878
// ComCrawl ( group [ i ] ) ;
48863: LD_VAR 0 4
48867: PUSH
48868: LD_VAR 0 7
48872: ARRAY
48873: PPUSH
48874: CALL_OW 137
// if f_mines then
48878: LD_VAR 0 21
48882: IFFALSE 49125
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48884: LD_VAR 0 14
48888: PUSH
48889: LD_INT 1
48891: ARRAY
48892: PPUSH
48893: CALL_OW 247
48897: PUSH
48898: LD_INT 3
48900: EQUAL
48901: PUSH
48902: LD_VAR 0 14
48906: PUSH
48907: LD_INT 1
48909: ARRAY
48910: PUSH
48911: LD_VAR 0 27
48915: IN
48916: NOT
48917: AND
48918: IFFALSE 49125
// begin x := GetX ( tmp [ 1 ] ) ;
48920: LD_ADDR_VAR 0 10
48924: PUSH
48925: LD_VAR 0 14
48929: PUSH
48930: LD_INT 1
48932: ARRAY
48933: PPUSH
48934: CALL_OW 250
48938: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48939: LD_ADDR_VAR 0 11
48943: PUSH
48944: LD_VAR 0 14
48948: PUSH
48949: LD_INT 1
48951: ARRAY
48952: PPUSH
48953: CALL_OW 251
48957: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48958: LD_ADDR_VAR 0 12
48962: PUSH
48963: LD_VAR 0 4
48967: PUSH
48968: LD_VAR 0 7
48972: ARRAY
48973: PPUSH
48974: CALL 44833 0 1
48978: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48979: LD_VAR 0 4
48983: PUSH
48984: LD_VAR 0 7
48988: ARRAY
48989: PPUSH
48990: LD_VAR 0 10
48994: PPUSH
48995: LD_VAR 0 11
48999: PPUSH
49000: LD_VAR 0 14
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: PPUSH
49009: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49013: LD_VAR 0 4
49017: PUSH
49018: LD_VAR 0 7
49022: ARRAY
49023: PPUSH
49024: LD_VAR 0 10
49028: PPUSH
49029: LD_VAR 0 12
49033: PPUSH
49034: LD_INT 7
49036: PPUSH
49037: CALL_OW 272
49041: PPUSH
49042: LD_VAR 0 11
49046: PPUSH
49047: LD_VAR 0 12
49051: PPUSH
49052: LD_INT 7
49054: PPUSH
49055: CALL_OW 273
49059: PPUSH
49060: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49064: LD_VAR 0 4
49068: PUSH
49069: LD_VAR 0 7
49073: ARRAY
49074: PPUSH
49075: LD_INT 71
49077: PPUSH
49078: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49082: LD_ADDR_VAR 0 27
49086: PUSH
49087: LD_VAR 0 27
49091: PPUSH
49092: LD_VAR 0 27
49096: PUSH
49097: LD_INT 1
49099: PLUS
49100: PPUSH
49101: LD_VAR 0 14
49105: PUSH
49106: LD_INT 1
49108: ARRAY
49109: PPUSH
49110: CALL_OW 1
49114: ST_TO_ADDR
// attacking := true ;
49115: LD_ADDR_VAR 0 29
49119: PUSH
49120: LD_INT 1
49122: ST_TO_ADDR
// continue ;
49123: GO 46970
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49125: LD_VAR 0 4
49129: PUSH
49130: LD_VAR 0 7
49134: ARRAY
49135: PPUSH
49136: CALL_OW 257
49140: PUSH
49141: LD_INT 17
49143: EQUAL
49144: PUSH
49145: LD_VAR 0 4
49149: PUSH
49150: LD_VAR 0 7
49154: ARRAY
49155: PPUSH
49156: CALL_OW 110
49160: PUSH
49161: LD_INT 71
49163: EQUAL
49164: NOT
49165: AND
49166: IFFALSE 49312
// begin attacking := false ;
49168: LD_ADDR_VAR 0 29
49172: PUSH
49173: LD_INT 0
49175: ST_TO_ADDR
// k := 5 ;
49176: LD_ADDR_VAR 0 9
49180: PUSH
49181: LD_INT 5
49183: ST_TO_ADDR
// if tmp < k then
49184: LD_VAR 0 14
49188: PUSH
49189: LD_VAR 0 9
49193: LESS
49194: IFFALSE 49206
// k := tmp ;
49196: LD_ADDR_VAR 0 9
49200: PUSH
49201: LD_VAR 0 14
49205: ST_TO_ADDR
// for j = 1 to k do
49206: LD_ADDR_VAR 0 8
49210: PUSH
49211: DOUBLE
49212: LD_INT 1
49214: DEC
49215: ST_TO_ADDR
49216: LD_VAR 0 9
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49310
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49224: LD_VAR 0 14
49228: PUSH
49229: LD_VAR 0 8
49233: ARRAY
49234: PUSH
49235: LD_VAR 0 14
49239: PPUSH
49240: LD_INT 58
49242: PUSH
49243: EMPTY
49244: LIST
49245: PPUSH
49246: CALL_OW 72
49250: IN
49251: NOT
49252: IFFALSE 49308
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49254: LD_VAR 0 4
49258: PUSH
49259: LD_VAR 0 7
49263: ARRAY
49264: PPUSH
49265: LD_VAR 0 14
49269: PUSH
49270: LD_VAR 0 8
49274: ARRAY
49275: PPUSH
49276: CALL_OW 115
// attacking := true ;
49280: LD_ADDR_VAR 0 29
49284: PUSH
49285: LD_INT 1
49287: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49288: LD_VAR 0 4
49292: PUSH
49293: LD_VAR 0 7
49297: ARRAY
49298: PPUSH
49299: LD_INT 71
49301: PPUSH
49302: CALL_OW 109
// continue ;
49306: GO 49221
// end ; end ;
49308: GO 49221
49310: POP
49311: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49312: LD_VAR 0 4
49316: PUSH
49317: LD_VAR 0 7
49321: ARRAY
49322: PPUSH
49323: CALL_OW 257
49327: PUSH
49328: LD_INT 8
49330: EQUAL
49331: PUSH
49332: LD_VAR 0 4
49336: PUSH
49337: LD_VAR 0 7
49341: ARRAY
49342: PPUSH
49343: CALL_OW 264
49347: PUSH
49348: LD_INT 28
49350: PUSH
49351: LD_INT 45
49353: PUSH
49354: LD_INT 7
49356: PUSH
49357: LD_INT 47
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: IN
49366: OR
49367: IFFALSE 49597
// begin attacking := false ;
49369: LD_ADDR_VAR 0 29
49373: PUSH
49374: LD_INT 0
49376: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49377: LD_VAR 0 14
49381: PUSH
49382: LD_INT 1
49384: ARRAY
49385: PPUSH
49386: CALL_OW 266
49390: PUSH
49391: LD_INT 32
49393: PUSH
49394: LD_INT 31
49396: PUSH
49397: LD_INT 33
49399: PUSH
49400: LD_INT 4
49402: PUSH
49403: LD_INT 5
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: IN
49413: IFFALSE 49597
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49415: LD_ADDR_VAR 0 9
49419: PUSH
49420: LD_VAR 0 14
49424: PUSH
49425: LD_INT 1
49427: ARRAY
49428: PPUSH
49429: CALL_OW 266
49433: PPUSH
49434: LD_VAR 0 14
49438: PUSH
49439: LD_INT 1
49441: ARRAY
49442: PPUSH
49443: CALL_OW 250
49447: PPUSH
49448: LD_VAR 0 14
49452: PUSH
49453: LD_INT 1
49455: ARRAY
49456: PPUSH
49457: CALL_OW 251
49461: PPUSH
49462: LD_VAR 0 14
49466: PUSH
49467: LD_INT 1
49469: ARRAY
49470: PPUSH
49471: CALL_OW 254
49475: PPUSH
49476: LD_VAR 0 14
49480: PUSH
49481: LD_INT 1
49483: ARRAY
49484: PPUSH
49485: CALL_OW 248
49489: PPUSH
49490: LD_INT 0
49492: PPUSH
49493: CALL 26203 0 6
49497: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49498: LD_ADDR_VAR 0 8
49502: PUSH
49503: LD_VAR 0 4
49507: PUSH
49508: LD_VAR 0 7
49512: ARRAY
49513: PPUSH
49514: LD_VAR 0 9
49518: PPUSH
49519: CALL 44896 0 2
49523: ST_TO_ADDR
// if j then
49524: LD_VAR 0 8
49528: IFFALSE 49597
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49530: LD_VAR 0 8
49534: PUSH
49535: LD_INT 1
49537: ARRAY
49538: PPUSH
49539: LD_VAR 0 8
49543: PUSH
49544: LD_INT 2
49546: ARRAY
49547: PPUSH
49548: CALL_OW 488
49552: IFFALSE 49597
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49554: LD_VAR 0 4
49558: PUSH
49559: LD_VAR 0 7
49563: ARRAY
49564: PPUSH
49565: LD_VAR 0 8
49569: PUSH
49570: LD_INT 1
49572: ARRAY
49573: PPUSH
49574: LD_VAR 0 8
49578: PUSH
49579: LD_INT 2
49581: ARRAY
49582: PPUSH
49583: CALL_OW 116
// attacking := true ;
49587: LD_ADDR_VAR 0 29
49591: PUSH
49592: LD_INT 1
49594: ST_TO_ADDR
// continue ;
49595: GO 46970
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49597: LD_VAR 0 4
49601: PUSH
49602: LD_VAR 0 7
49606: ARRAY
49607: PPUSH
49608: CALL_OW 265
49612: PUSH
49613: LD_INT 11
49615: EQUAL
49616: IFFALSE 49894
// begin k := 10 ;
49618: LD_ADDR_VAR 0 9
49622: PUSH
49623: LD_INT 10
49625: ST_TO_ADDR
// x := 0 ;
49626: LD_ADDR_VAR 0 10
49630: PUSH
49631: LD_INT 0
49633: ST_TO_ADDR
// if tmp < k then
49634: LD_VAR 0 14
49638: PUSH
49639: LD_VAR 0 9
49643: LESS
49644: IFFALSE 49656
// k := tmp ;
49646: LD_ADDR_VAR 0 9
49650: PUSH
49651: LD_VAR 0 14
49655: ST_TO_ADDR
// for j = k downto 1 do
49656: LD_ADDR_VAR 0 8
49660: PUSH
49661: DOUBLE
49662: LD_VAR 0 9
49666: INC
49667: ST_TO_ADDR
49668: LD_INT 1
49670: PUSH
49671: FOR_DOWNTO
49672: IFFALSE 49747
// begin if GetType ( tmp [ j ] ) = unit_human then
49674: LD_VAR 0 14
49678: PUSH
49679: LD_VAR 0 8
49683: ARRAY
49684: PPUSH
49685: CALL_OW 247
49689: PUSH
49690: LD_INT 1
49692: EQUAL
49693: IFFALSE 49745
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49695: LD_VAR 0 4
49699: PUSH
49700: LD_VAR 0 7
49704: ARRAY
49705: PPUSH
49706: LD_VAR 0 14
49710: PUSH
49711: LD_VAR 0 8
49715: ARRAY
49716: PPUSH
49717: CALL 45167 0 2
// x := tmp [ j ] ;
49721: LD_ADDR_VAR 0 10
49725: PUSH
49726: LD_VAR 0 14
49730: PUSH
49731: LD_VAR 0 8
49735: ARRAY
49736: ST_TO_ADDR
// attacking := true ;
49737: LD_ADDR_VAR 0 29
49741: PUSH
49742: LD_INT 1
49744: ST_TO_ADDR
// end ; end ;
49745: GO 49671
49747: POP
49748: POP
// if not x then
49749: LD_VAR 0 10
49753: NOT
49754: IFFALSE 49894
// begin attacking := true ;
49756: LD_ADDR_VAR 0 29
49760: PUSH
49761: LD_INT 1
49763: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49764: LD_VAR 0 4
49768: PUSH
49769: LD_VAR 0 7
49773: ARRAY
49774: PPUSH
49775: CALL_OW 250
49779: PPUSH
49780: LD_VAR 0 4
49784: PUSH
49785: LD_VAR 0 7
49789: ARRAY
49790: PPUSH
49791: CALL_OW 251
49795: PPUSH
49796: CALL_OW 546
49800: PUSH
49801: LD_INT 2
49803: ARRAY
49804: PUSH
49805: LD_VAR 0 14
49809: PUSH
49810: LD_INT 1
49812: ARRAY
49813: PPUSH
49814: CALL_OW 250
49818: PPUSH
49819: LD_VAR 0 14
49823: PUSH
49824: LD_INT 1
49826: ARRAY
49827: PPUSH
49828: CALL_OW 251
49832: PPUSH
49833: CALL_OW 546
49837: PUSH
49838: LD_INT 2
49840: ARRAY
49841: EQUAL
49842: IFFALSE 49870
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49844: LD_VAR 0 4
49848: PUSH
49849: LD_VAR 0 7
49853: ARRAY
49854: PPUSH
49855: LD_VAR 0 14
49859: PUSH
49860: LD_INT 1
49862: ARRAY
49863: PPUSH
49864: CALL 45167 0 2
49868: GO 49894
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49870: LD_VAR 0 4
49874: PUSH
49875: LD_VAR 0 7
49879: ARRAY
49880: PPUSH
49881: LD_VAR 0 14
49885: PUSH
49886: LD_INT 1
49888: ARRAY
49889: PPUSH
49890: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49894: LD_VAR 0 4
49898: PUSH
49899: LD_VAR 0 7
49903: ARRAY
49904: PPUSH
49905: CALL_OW 264
49909: PUSH
49910: LD_INT 29
49912: EQUAL
49913: IFFALSE 50279
// begin if WantsToAttack ( group [ i ] ) in bombed then
49915: LD_VAR 0 4
49919: PUSH
49920: LD_VAR 0 7
49924: ARRAY
49925: PPUSH
49926: CALL_OW 319
49930: PUSH
49931: LD_VAR 0 28
49935: IN
49936: IFFALSE 49940
// continue ;
49938: GO 46970
// k := 8 ;
49940: LD_ADDR_VAR 0 9
49944: PUSH
49945: LD_INT 8
49947: ST_TO_ADDR
// x := 0 ;
49948: LD_ADDR_VAR 0 10
49952: PUSH
49953: LD_INT 0
49955: ST_TO_ADDR
// if tmp < k then
49956: LD_VAR 0 14
49960: PUSH
49961: LD_VAR 0 9
49965: LESS
49966: IFFALSE 49978
// k := tmp ;
49968: LD_ADDR_VAR 0 9
49972: PUSH
49973: LD_VAR 0 14
49977: ST_TO_ADDR
// for j = 1 to k do
49978: LD_ADDR_VAR 0 8
49982: PUSH
49983: DOUBLE
49984: LD_INT 1
49986: DEC
49987: ST_TO_ADDR
49988: LD_VAR 0 9
49992: PUSH
49993: FOR_TO
49994: IFFALSE 50126
// begin if GetType ( tmp [ j ] ) = unit_building then
49996: LD_VAR 0 14
50000: PUSH
50001: LD_VAR 0 8
50005: ARRAY
50006: PPUSH
50007: CALL_OW 247
50011: PUSH
50012: LD_INT 3
50014: EQUAL
50015: IFFALSE 50124
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50017: LD_VAR 0 14
50021: PUSH
50022: LD_VAR 0 8
50026: ARRAY
50027: PUSH
50028: LD_VAR 0 28
50032: IN
50033: NOT
50034: PUSH
50035: LD_VAR 0 14
50039: PUSH
50040: LD_VAR 0 8
50044: ARRAY
50045: PPUSH
50046: CALL_OW 313
50050: AND
50051: IFFALSE 50124
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50053: LD_VAR 0 4
50057: PUSH
50058: LD_VAR 0 7
50062: ARRAY
50063: PPUSH
50064: LD_VAR 0 14
50068: PUSH
50069: LD_VAR 0 8
50073: ARRAY
50074: PPUSH
50075: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50079: LD_ADDR_VAR 0 28
50083: PUSH
50084: LD_VAR 0 28
50088: PPUSH
50089: LD_VAR 0 28
50093: PUSH
50094: LD_INT 1
50096: PLUS
50097: PPUSH
50098: LD_VAR 0 14
50102: PUSH
50103: LD_VAR 0 8
50107: ARRAY
50108: PPUSH
50109: CALL_OW 1
50113: ST_TO_ADDR
// attacking := true ;
50114: LD_ADDR_VAR 0 29
50118: PUSH
50119: LD_INT 1
50121: ST_TO_ADDR
// break ;
50122: GO 50126
// end ; end ;
50124: GO 49993
50126: POP
50127: POP
// if not attacking and f_attack_depot then
50128: LD_VAR 0 29
50132: NOT
50133: PUSH
50134: LD_VAR 0 25
50138: AND
50139: IFFALSE 50234
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50141: LD_ADDR_VAR 0 13
50145: PUSH
50146: LD_VAR 0 14
50150: PPUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 30
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 30
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: PPUSH
50179: CALL_OW 72
50183: ST_TO_ADDR
// if z then
50184: LD_VAR 0 13
50188: IFFALSE 50234
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50190: LD_VAR 0 4
50194: PUSH
50195: LD_VAR 0 7
50199: ARRAY
50200: PPUSH
50201: LD_VAR 0 13
50205: PPUSH
50206: LD_VAR 0 4
50210: PUSH
50211: LD_VAR 0 7
50215: ARRAY
50216: PPUSH
50217: CALL_OW 74
50221: PPUSH
50222: CALL_OW 115
// attacking := true ;
50226: LD_ADDR_VAR 0 29
50230: PUSH
50231: LD_INT 1
50233: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50234: LD_VAR 0 4
50238: PUSH
50239: LD_VAR 0 7
50243: ARRAY
50244: PPUSH
50245: CALL_OW 256
50249: PUSH
50250: LD_INT 500
50252: LESS
50253: IFFALSE 50279
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50255: LD_VAR 0 4
50259: PUSH
50260: LD_VAR 0 7
50264: ARRAY
50265: PPUSH
50266: LD_VAR 0 14
50270: PUSH
50271: LD_INT 1
50273: ARRAY
50274: PPUSH
50275: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
50279: LD_VAR 0 4
50283: PUSH
50284: LD_VAR 0 7
50288: ARRAY
50289: PPUSH
50290: CALL_OW 264
50294: PUSH
50295: LD_INT 49
50297: EQUAL
50298: IFFALSE 50419
// begin if not HasTask ( group [ i ] ) then
50300: LD_VAR 0 4
50304: PUSH
50305: LD_VAR 0 7
50309: ARRAY
50310: PPUSH
50311: CALL_OW 314
50315: NOT
50316: IFFALSE 50419
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
50318: LD_ADDR_VAR 0 9
50322: PUSH
50323: LD_INT 81
50325: PUSH
50326: LD_VAR 0 4
50330: PUSH
50331: LD_VAR 0 7
50335: ARRAY
50336: PPUSH
50337: CALL_OW 255
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PPUSH
50346: CALL_OW 69
50350: PPUSH
50351: LD_VAR 0 4
50355: PUSH
50356: LD_VAR 0 7
50360: ARRAY
50361: PPUSH
50362: CALL_OW 74
50366: ST_TO_ADDR
// if k then
50367: LD_VAR 0 9
50371: IFFALSE 50419
// if GetDistUnits ( group [ i ] , k ) > 10 then
50373: LD_VAR 0 4
50377: PUSH
50378: LD_VAR 0 7
50382: ARRAY
50383: PPUSH
50384: LD_VAR 0 9
50388: PPUSH
50389: CALL_OW 296
50393: PUSH
50394: LD_INT 10
50396: GREATER
50397: IFFALSE 50419
// ComMoveUnit ( group [ i ] , k ) ;
50399: LD_VAR 0 4
50403: PUSH
50404: LD_VAR 0 7
50408: ARRAY
50409: PPUSH
50410: LD_VAR 0 9
50414: PPUSH
50415: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50419: LD_VAR 0 4
50423: PUSH
50424: LD_VAR 0 7
50428: ARRAY
50429: PPUSH
50430: CALL_OW 256
50434: PUSH
50435: LD_INT 250
50437: LESS
50438: PUSH
50439: LD_VAR 0 4
50443: PUSH
50444: LD_VAR 0 7
50448: ARRAY
50449: PUSH
50450: LD_INT 21
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 23
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PPUSH
50474: CALL_OW 69
50478: IN
50479: AND
50480: IFFALSE 50605
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50482: LD_ADDR_VAR 0 9
50486: PUSH
50487: LD_OWVAR 3
50491: PUSH
50492: LD_VAR 0 4
50496: PUSH
50497: LD_VAR 0 7
50501: ARRAY
50502: DIFF
50503: PPUSH
50504: LD_VAR 0 4
50508: PUSH
50509: LD_VAR 0 7
50513: ARRAY
50514: PPUSH
50515: CALL_OW 74
50519: ST_TO_ADDR
// if not k then
50520: LD_VAR 0 9
50524: NOT
50525: IFFALSE 50529
// continue ;
50527: GO 46970
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50529: LD_VAR 0 9
50533: PUSH
50534: LD_INT 81
50536: PUSH
50537: LD_VAR 0 4
50541: PUSH
50542: LD_VAR 0 7
50546: ARRAY
50547: PPUSH
50548: CALL_OW 255
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PPUSH
50557: CALL_OW 69
50561: IN
50562: PUSH
50563: LD_VAR 0 9
50567: PPUSH
50568: LD_VAR 0 4
50572: PUSH
50573: LD_VAR 0 7
50577: ARRAY
50578: PPUSH
50579: CALL_OW 296
50583: PUSH
50584: LD_INT 5
50586: LESS
50587: AND
50588: IFFALSE 50605
// ComAutodestruct ( group [ i ] ) ;
50590: LD_VAR 0 4
50594: PUSH
50595: LD_VAR 0 7
50599: ARRAY
50600: PPUSH
50601: CALL 45065 0 1
// end ; if f_attack_depot then
50605: LD_VAR 0 25
50609: IFFALSE 50721
// begin k := 6 ;
50611: LD_ADDR_VAR 0 9
50615: PUSH
50616: LD_INT 6
50618: ST_TO_ADDR
// if tmp < k then
50619: LD_VAR 0 14
50623: PUSH
50624: LD_VAR 0 9
50628: LESS
50629: IFFALSE 50641
// k := tmp ;
50631: LD_ADDR_VAR 0 9
50635: PUSH
50636: LD_VAR 0 14
50640: ST_TO_ADDR
// for j = 1 to k do
50641: LD_ADDR_VAR 0 8
50645: PUSH
50646: DOUBLE
50647: LD_INT 1
50649: DEC
50650: ST_TO_ADDR
50651: LD_VAR 0 9
50655: PUSH
50656: FOR_TO
50657: IFFALSE 50719
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50659: LD_VAR 0 8
50663: PPUSH
50664: CALL_OW 266
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: IN
50679: IFFALSE 50717
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50681: LD_VAR 0 4
50685: PUSH
50686: LD_VAR 0 7
50690: ARRAY
50691: PPUSH
50692: LD_VAR 0 14
50696: PUSH
50697: LD_VAR 0 8
50701: ARRAY
50702: PPUSH
50703: CALL_OW 115
// attacking := true ;
50707: LD_ADDR_VAR 0 29
50711: PUSH
50712: LD_INT 1
50714: ST_TO_ADDR
// break ;
50715: GO 50719
// end ;
50717: GO 50656
50719: POP
50720: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50721: LD_VAR 0 4
50725: PUSH
50726: LD_VAR 0 7
50730: ARRAY
50731: PPUSH
50732: CALL_OW 302
50736: PUSH
50737: LD_VAR 0 29
50741: NOT
50742: AND
50743: IFFALSE 51065
// begin if GetTag ( group [ i ] ) = 71 then
50745: LD_VAR 0 4
50749: PUSH
50750: LD_VAR 0 7
50754: ARRAY
50755: PPUSH
50756: CALL_OW 110
50760: PUSH
50761: LD_INT 71
50763: EQUAL
50764: IFFALSE 50805
// begin if HasTask ( group [ i ] ) then
50766: LD_VAR 0 4
50770: PUSH
50771: LD_VAR 0 7
50775: ARRAY
50776: PPUSH
50777: CALL_OW 314
50781: IFFALSE 50787
// continue else
50783: GO 46970
50785: GO 50805
// SetTag ( group [ i ] , 0 ) ;
50787: LD_VAR 0 4
50791: PUSH
50792: LD_VAR 0 7
50796: ARRAY
50797: PPUSH
50798: LD_INT 0
50800: PPUSH
50801: CALL_OW 109
// end ; k := 8 ;
50805: LD_ADDR_VAR 0 9
50809: PUSH
50810: LD_INT 8
50812: ST_TO_ADDR
// x := 0 ;
50813: LD_ADDR_VAR 0 10
50817: PUSH
50818: LD_INT 0
50820: ST_TO_ADDR
// if tmp < k then
50821: LD_VAR 0 14
50825: PUSH
50826: LD_VAR 0 9
50830: LESS
50831: IFFALSE 50843
// k := tmp ;
50833: LD_ADDR_VAR 0 9
50837: PUSH
50838: LD_VAR 0 14
50842: ST_TO_ADDR
// for j = 1 to k do
50843: LD_ADDR_VAR 0 8
50847: PUSH
50848: DOUBLE
50849: LD_INT 1
50851: DEC
50852: ST_TO_ADDR
50853: LD_VAR 0 9
50857: PUSH
50858: FOR_TO
50859: IFFALSE 50957
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50861: LD_VAR 0 14
50865: PUSH
50866: LD_VAR 0 8
50870: ARRAY
50871: PPUSH
50872: CALL_OW 247
50876: PUSH
50877: LD_INT 1
50879: EQUAL
50880: PUSH
50881: LD_VAR 0 14
50885: PUSH
50886: LD_VAR 0 8
50890: ARRAY
50891: PPUSH
50892: CALL_OW 256
50896: PUSH
50897: LD_INT 250
50899: LESS
50900: PUSH
50901: LD_VAR 0 20
50905: AND
50906: PUSH
50907: LD_VAR 0 20
50911: NOT
50912: PUSH
50913: LD_VAR 0 14
50917: PUSH
50918: LD_VAR 0 8
50922: ARRAY
50923: PPUSH
50924: CALL_OW 256
50928: PUSH
50929: LD_INT 250
50931: GREATEREQUAL
50932: AND
50933: OR
50934: AND
50935: IFFALSE 50955
// begin x := tmp [ j ] ;
50937: LD_ADDR_VAR 0 10
50941: PUSH
50942: LD_VAR 0 14
50946: PUSH
50947: LD_VAR 0 8
50951: ARRAY
50952: ST_TO_ADDR
// break ;
50953: GO 50957
// end ;
50955: GO 50858
50957: POP
50958: POP
// if x then
50959: LD_VAR 0 10
50963: IFFALSE 50987
// ComAttackUnit ( group [ i ] , x ) else
50965: LD_VAR 0 4
50969: PUSH
50970: LD_VAR 0 7
50974: ARRAY
50975: PPUSH
50976: LD_VAR 0 10
50980: PPUSH
50981: CALL_OW 115
50985: GO 51011
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50987: LD_VAR 0 4
50991: PUSH
50992: LD_VAR 0 7
50996: ARRAY
50997: PPUSH
50998: LD_VAR 0 14
51002: PUSH
51003: LD_INT 1
51005: ARRAY
51006: PPUSH
51007: CALL_OW 115
// if not HasTask ( group [ i ] ) then
51011: LD_VAR 0 4
51015: PUSH
51016: LD_VAR 0 7
51020: ARRAY
51021: PPUSH
51022: CALL_OW 314
51026: NOT
51027: IFFALSE 51065
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
51029: LD_VAR 0 4
51033: PUSH
51034: LD_VAR 0 7
51038: ARRAY
51039: PPUSH
51040: LD_VAR 0 14
51044: PPUSH
51045: LD_VAR 0 4
51049: PUSH
51050: LD_VAR 0 7
51054: ARRAY
51055: PPUSH
51056: CALL_OW 74
51060: PPUSH
51061: CALL_OW 115
// end ; end ; end ;
51065: GO 46970
51067: POP
51068: POP
// wait ( 0 0$1 ) ;
51069: LD_INT 35
51071: PPUSH
51072: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
51076: LD_VAR 0 4
51080: PUSH
51081: EMPTY
51082: EQUAL
51083: PUSH
51084: LD_INT 81
51086: PUSH
51087: LD_VAR 0 35
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PPUSH
51096: CALL_OW 69
51100: NOT
51101: OR
51102: IFFALSE 46955
// end ;
51104: LD_VAR 0 2
51108: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51109: LD_INT 0
51111: PPUSH
51112: PPUSH
51113: PPUSH
51114: PPUSH
// if not base_units then
51115: LD_VAR 0 1
51119: NOT
51120: IFFALSE 51124
// exit ;
51122: GO 51211
// result := false ;
51124: LD_ADDR_VAR 0 2
51128: PUSH
51129: LD_INT 0
51131: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51132: LD_ADDR_VAR 0 5
51136: PUSH
51137: LD_VAR 0 1
51141: PPUSH
51142: LD_INT 21
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PPUSH
51152: CALL_OW 72
51156: ST_TO_ADDR
// if not tmp then
51157: LD_VAR 0 5
51161: NOT
51162: IFFALSE 51166
// exit ;
51164: GO 51211
// for i in tmp do
51166: LD_ADDR_VAR 0 3
51170: PUSH
51171: LD_VAR 0 5
51175: PUSH
51176: FOR_IN
51177: IFFALSE 51209
// begin result := EnemyInRange ( i , 22 ) ;
51179: LD_ADDR_VAR 0 2
51183: PUSH
51184: LD_VAR 0 3
51188: PPUSH
51189: LD_INT 22
51191: PPUSH
51192: CALL 44748 0 2
51196: ST_TO_ADDR
// if result then
51197: LD_VAR 0 2
51201: IFFALSE 51207
// exit ;
51203: POP
51204: POP
51205: GO 51211
// end ;
51207: GO 51176
51209: POP
51210: POP
// end ;
51211: LD_VAR 0 2
51215: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51216: LD_INT 0
51218: PPUSH
51219: PPUSH
// if not units then
51220: LD_VAR 0 1
51224: NOT
51225: IFFALSE 51229
// exit ;
51227: GO 51299
// result := [ ] ;
51229: LD_ADDR_VAR 0 3
51233: PUSH
51234: EMPTY
51235: ST_TO_ADDR
// for i in units do
51236: LD_ADDR_VAR 0 4
51240: PUSH
51241: LD_VAR 0 1
51245: PUSH
51246: FOR_IN
51247: IFFALSE 51297
// if GetTag ( i ) = tag then
51249: LD_VAR 0 4
51253: PPUSH
51254: CALL_OW 110
51258: PUSH
51259: LD_VAR 0 2
51263: EQUAL
51264: IFFALSE 51295
// result := Insert ( result , result + 1 , i ) ;
51266: LD_ADDR_VAR 0 3
51270: PUSH
51271: LD_VAR 0 3
51275: PPUSH
51276: LD_VAR 0 3
51280: PUSH
51281: LD_INT 1
51283: PLUS
51284: PPUSH
51285: LD_VAR 0 4
51289: PPUSH
51290: CALL_OW 2
51294: ST_TO_ADDR
51295: GO 51246
51297: POP
51298: POP
// end ;
51299: LD_VAR 0 3
51303: RET
// export function IsDriver ( un ) ; begin
51304: LD_INT 0
51306: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51307: LD_ADDR_VAR 0 2
51311: PUSH
51312: LD_VAR 0 1
51316: PUSH
51317: LD_INT 55
51319: PUSH
51320: EMPTY
51321: LIST
51322: PPUSH
51323: CALL_OW 69
51327: IN
51328: ST_TO_ADDR
// end ;
51329: LD_VAR 0 2
51333: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51334: LD_INT 0
51336: PPUSH
51337: PPUSH
// list := [ ] ;
51338: LD_ADDR_VAR 0 5
51342: PUSH
51343: EMPTY
51344: ST_TO_ADDR
// case d of 0 :
51345: LD_VAR 0 3
51349: PUSH
51350: LD_INT 0
51352: DOUBLE
51353: EQUAL
51354: IFTRUE 51358
51356: GO 51491
51358: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51359: LD_ADDR_VAR 0 5
51363: PUSH
51364: LD_VAR 0 1
51368: PUSH
51369: LD_INT 4
51371: MINUS
51372: PUSH
51373: LD_VAR 0 2
51377: PUSH
51378: LD_INT 4
51380: MINUS
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: PUSH
51390: LD_VAR 0 1
51394: PUSH
51395: LD_INT 3
51397: MINUS
51398: PUSH
51399: LD_VAR 0 2
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: PUSH
51412: LD_VAR 0 1
51416: PUSH
51417: LD_INT 4
51419: PLUS
51420: PUSH
51421: LD_VAR 0 2
51425: PUSH
51426: LD_INT 4
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: PUSH
51434: LD_VAR 0 1
51438: PUSH
51439: LD_INT 3
51441: PLUS
51442: PUSH
51443: LD_VAR 0 2
51447: PUSH
51448: LD_INT 3
51450: PLUS
51451: PUSH
51452: LD_INT 5
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: PUSH
51460: LD_VAR 0 1
51464: PUSH
51465: LD_VAR 0 2
51469: PUSH
51470: LD_INT 4
51472: PLUS
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: ST_TO_ADDR
// end ; 1 :
51489: GO 52189
51491: LD_INT 1
51493: DOUBLE
51494: EQUAL
51495: IFTRUE 51499
51497: GO 51632
51499: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51500: LD_ADDR_VAR 0 5
51504: PUSH
51505: LD_VAR 0 1
51509: PUSH
51510: LD_VAR 0 2
51514: PUSH
51515: LD_INT 4
51517: MINUS
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: PUSH
51527: LD_VAR 0 1
51531: PUSH
51532: LD_INT 3
51534: MINUS
51535: PUSH
51536: LD_VAR 0 2
51540: PUSH
51541: LD_INT 3
51543: MINUS
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: PUSH
51553: LD_VAR 0 1
51557: PUSH
51558: LD_INT 4
51560: MINUS
51561: PUSH
51562: LD_VAR 0 2
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: LD_VAR 0 1
51579: PUSH
51580: LD_VAR 0 2
51584: PUSH
51585: LD_INT 3
51587: PLUS
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: PUSH
51597: LD_VAR 0 1
51601: PUSH
51602: LD_INT 4
51604: PLUS
51605: PUSH
51606: LD_VAR 0 2
51610: PUSH
51611: LD_INT 4
51613: PLUS
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: ST_TO_ADDR
// end ; 2 :
51630: GO 52189
51632: LD_INT 2
51634: DOUBLE
51635: EQUAL
51636: IFTRUE 51640
51638: GO 51769
51640: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51641: LD_ADDR_VAR 0 5
51645: PUSH
51646: LD_VAR 0 1
51650: PUSH
51651: LD_VAR 0 2
51655: PUSH
51656: LD_INT 3
51658: MINUS
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: PUSH
51668: LD_VAR 0 1
51672: PUSH
51673: LD_INT 4
51675: PLUS
51676: PUSH
51677: LD_VAR 0 2
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: PUSH
51690: LD_VAR 0 1
51694: PUSH
51695: LD_VAR 0 2
51699: PUSH
51700: LD_INT 4
51702: PLUS
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: PUSH
51712: LD_VAR 0 1
51716: PUSH
51717: LD_INT 3
51719: MINUS
51720: PUSH
51721: LD_VAR 0 2
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: PUSH
51734: LD_VAR 0 1
51738: PUSH
51739: LD_INT 4
51741: MINUS
51742: PUSH
51743: LD_VAR 0 2
51747: PUSH
51748: LD_INT 4
51750: MINUS
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: ST_TO_ADDR
// end ; 3 :
51767: GO 52189
51769: LD_INT 3
51771: DOUBLE
51772: EQUAL
51773: IFTRUE 51777
51775: GO 51910
51777: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51778: LD_ADDR_VAR 0 5
51782: PUSH
51783: LD_VAR 0 1
51787: PUSH
51788: LD_INT 3
51790: PLUS
51791: PUSH
51792: LD_VAR 0 2
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: PUSH
51805: LD_VAR 0 1
51809: PUSH
51810: LD_INT 4
51812: PLUS
51813: PUSH
51814: LD_VAR 0 2
51818: PUSH
51819: LD_INT 4
51821: PLUS
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: PUSH
51831: LD_VAR 0 1
51835: PUSH
51836: LD_INT 4
51838: MINUS
51839: PUSH
51840: LD_VAR 0 2
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: PUSH
51853: LD_VAR 0 1
51857: PUSH
51858: LD_VAR 0 2
51862: PUSH
51863: LD_INT 4
51865: MINUS
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: PUSH
51875: LD_VAR 0 1
51879: PUSH
51880: LD_INT 3
51882: MINUS
51883: PUSH
51884: LD_VAR 0 2
51888: PUSH
51889: LD_INT 3
51891: MINUS
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// end ; 4 :
51908: GO 52189
51910: LD_INT 4
51912: DOUBLE
51913: EQUAL
51914: IFTRUE 51918
51916: GO 52051
51918: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51919: LD_ADDR_VAR 0 5
51923: PUSH
51924: LD_VAR 0 1
51928: PUSH
51929: LD_VAR 0 2
51933: PUSH
51934: LD_INT 4
51936: PLUS
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: PUSH
51946: LD_VAR 0 1
51950: PUSH
51951: LD_INT 3
51953: PLUS
51954: PUSH
51955: LD_VAR 0 2
51959: PUSH
51960: LD_INT 3
51962: PLUS
51963: PUSH
51964: LD_INT 5
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: PUSH
51972: LD_VAR 0 1
51976: PUSH
51977: LD_INT 4
51979: PLUS
51980: PUSH
51981: LD_VAR 0 2
51985: PUSH
51986: LD_INT 4
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: PUSH
51994: LD_VAR 0 1
51998: PUSH
51999: LD_VAR 0 2
52003: PUSH
52004: LD_INT 3
52006: MINUS
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: PUSH
52016: LD_VAR 0 1
52020: PUSH
52021: LD_INT 4
52023: MINUS
52024: PUSH
52025: LD_VAR 0 2
52029: PUSH
52030: LD_INT 4
52032: MINUS
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: ST_TO_ADDR
// end ; 5 :
52049: GO 52189
52051: LD_INT 5
52053: DOUBLE
52054: EQUAL
52055: IFTRUE 52059
52057: GO 52188
52059: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52060: LD_ADDR_VAR 0 5
52064: PUSH
52065: LD_VAR 0 1
52069: PUSH
52070: LD_INT 4
52072: MINUS
52073: PUSH
52074: LD_VAR 0 2
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: PUSH
52087: LD_VAR 0 1
52091: PUSH
52092: LD_VAR 0 2
52096: PUSH
52097: LD_INT 4
52099: MINUS
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: LIST
52108: PUSH
52109: LD_VAR 0 1
52113: PUSH
52114: LD_INT 4
52116: PLUS
52117: PUSH
52118: LD_VAR 0 2
52122: PUSH
52123: LD_INT 4
52125: PLUS
52126: PUSH
52127: LD_INT 5
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: LIST
52134: PUSH
52135: LD_VAR 0 1
52139: PUSH
52140: LD_INT 3
52142: PLUS
52143: PUSH
52144: LD_VAR 0 2
52148: PUSH
52149: LD_INT 4
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: PUSH
52157: LD_VAR 0 1
52161: PUSH
52162: LD_VAR 0 2
52166: PUSH
52167: LD_INT 3
52169: PLUS
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// end ; end ;
52186: GO 52189
52188: POP
// result := list ;
52189: LD_ADDR_VAR 0 4
52193: PUSH
52194: LD_VAR 0 5
52198: ST_TO_ADDR
// end ;
52199: LD_VAR 0 4
52203: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52204: LD_INT 0
52206: PPUSH
52207: PPUSH
52208: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52209: LD_VAR 0 1
52213: NOT
52214: PUSH
52215: LD_VAR 0 2
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 4
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: IN
52238: NOT
52239: OR
52240: IFFALSE 52244
// exit ;
52242: GO 52336
// tmp := [ ] ;
52244: LD_ADDR_VAR 0 5
52248: PUSH
52249: EMPTY
52250: ST_TO_ADDR
// for i in units do
52251: LD_ADDR_VAR 0 4
52255: PUSH
52256: LD_VAR 0 1
52260: PUSH
52261: FOR_IN
52262: IFFALSE 52305
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52264: LD_ADDR_VAR 0 5
52268: PUSH
52269: LD_VAR 0 5
52273: PPUSH
52274: LD_VAR 0 5
52278: PUSH
52279: LD_INT 1
52281: PLUS
52282: PPUSH
52283: LD_VAR 0 4
52287: PPUSH
52288: LD_VAR 0 2
52292: PPUSH
52293: CALL_OW 259
52297: PPUSH
52298: CALL_OW 2
52302: ST_TO_ADDR
52303: GO 52261
52305: POP
52306: POP
// if not tmp then
52307: LD_VAR 0 5
52311: NOT
52312: IFFALSE 52316
// exit ;
52314: GO 52336
// result := SortListByListDesc ( units , tmp ) ;
52316: LD_ADDR_VAR 0 3
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: LD_VAR 0 5
52330: PPUSH
52331: CALL_OW 77
52335: ST_TO_ADDR
// end ;
52336: LD_VAR 0 3
52340: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52341: LD_INT 0
52343: PPUSH
52344: PPUSH
52345: PPUSH
// x := GetX ( building ) ;
52346: LD_ADDR_VAR 0 4
52350: PUSH
52351: LD_VAR 0 2
52355: PPUSH
52356: CALL_OW 250
52360: ST_TO_ADDR
// y := GetY ( building ) ;
52361: LD_ADDR_VAR 0 5
52365: PUSH
52366: LD_VAR 0 2
52370: PPUSH
52371: CALL_OW 251
52375: ST_TO_ADDR
// if GetTaskList ( unit ) then
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 437
52385: IFFALSE 52480
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52387: LD_STRING e
52389: PUSH
52390: LD_VAR 0 1
52394: PPUSH
52395: CALL_OW 437
52399: PUSH
52400: LD_INT 1
52402: ARRAY
52403: PUSH
52404: LD_INT 1
52406: ARRAY
52407: EQUAL
52408: PUSH
52409: LD_VAR 0 4
52413: PUSH
52414: LD_VAR 0 1
52418: PPUSH
52419: CALL_OW 437
52423: PUSH
52424: LD_INT 1
52426: ARRAY
52427: PUSH
52428: LD_INT 2
52430: ARRAY
52431: EQUAL
52432: AND
52433: PUSH
52434: LD_VAR 0 5
52438: PUSH
52439: LD_VAR 0 1
52443: PPUSH
52444: CALL_OW 437
52448: PUSH
52449: LD_INT 1
52451: ARRAY
52452: PUSH
52453: LD_INT 3
52455: ARRAY
52456: EQUAL
52457: AND
52458: IFFALSE 52470
// result := true else
52460: LD_ADDR_VAR 0 3
52464: PUSH
52465: LD_INT 1
52467: ST_TO_ADDR
52468: GO 52478
// result := false ;
52470: LD_ADDR_VAR 0 3
52474: PUSH
52475: LD_INT 0
52477: ST_TO_ADDR
// end else
52478: GO 52488
// result := false ;
52480: LD_ADDR_VAR 0 3
52484: PUSH
52485: LD_INT 0
52487: ST_TO_ADDR
// end ;
52488: LD_VAR 0 3
52492: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52493: LD_INT 0
52495: PPUSH
52496: PPUSH
52497: PPUSH
52498: PPUSH
// if not unit or not area then
52499: LD_VAR 0 1
52503: NOT
52504: PUSH
52505: LD_VAR 0 2
52509: NOT
52510: OR
52511: IFFALSE 52515
// exit ;
52513: GO 52679
// tmp := AreaToList ( area , i ) ;
52515: LD_ADDR_VAR 0 6
52519: PUSH
52520: LD_VAR 0 2
52524: PPUSH
52525: LD_VAR 0 5
52529: PPUSH
52530: CALL_OW 517
52534: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52535: LD_ADDR_VAR 0 5
52539: PUSH
52540: DOUBLE
52541: LD_INT 1
52543: DEC
52544: ST_TO_ADDR
52545: LD_VAR 0 6
52549: PUSH
52550: LD_INT 1
52552: ARRAY
52553: PUSH
52554: FOR_TO
52555: IFFALSE 52677
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52557: LD_ADDR_VAR 0 7
52561: PUSH
52562: LD_VAR 0 6
52566: PUSH
52567: LD_INT 1
52569: ARRAY
52570: PUSH
52571: LD_VAR 0 5
52575: ARRAY
52576: PUSH
52577: LD_VAR 0 6
52581: PUSH
52582: LD_INT 2
52584: ARRAY
52585: PUSH
52586: LD_VAR 0 5
52590: ARRAY
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52596: LD_VAR 0 7
52600: PUSH
52601: LD_INT 1
52603: ARRAY
52604: PPUSH
52605: LD_VAR 0 7
52609: PUSH
52610: LD_INT 2
52612: ARRAY
52613: PPUSH
52614: CALL_OW 428
52618: PUSH
52619: LD_INT 0
52621: EQUAL
52622: IFFALSE 52675
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52624: LD_VAR 0 1
52628: PPUSH
52629: LD_VAR 0 7
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PPUSH
52638: LD_VAR 0 7
52642: PUSH
52643: LD_INT 2
52645: ARRAY
52646: PPUSH
52647: LD_VAR 0 3
52651: PPUSH
52652: CALL_OW 48
// result := IsPlaced ( unit ) ;
52656: LD_ADDR_VAR 0 4
52660: PUSH
52661: LD_VAR 0 1
52665: PPUSH
52666: CALL_OW 305
52670: ST_TO_ADDR
// exit ;
52671: POP
52672: POP
52673: GO 52679
// end ; end ;
52675: GO 52554
52677: POP
52678: POP
// end ;
52679: LD_VAR 0 4
52683: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52684: LD_INT 0
52686: PPUSH
52687: PPUSH
52688: PPUSH
// if not side or side > 8 then
52689: LD_VAR 0 1
52693: NOT
52694: PUSH
52695: LD_VAR 0 1
52699: PUSH
52700: LD_INT 8
52702: GREATER
52703: OR
52704: IFFALSE 52708
// exit ;
52706: GO 52895
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52708: LD_ADDR_VAR 0 4
52712: PUSH
52713: LD_INT 22
52715: PUSH
52716: LD_VAR 0 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 21
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PPUSH
52739: CALL_OW 69
52743: ST_TO_ADDR
// if not tmp then
52744: LD_VAR 0 4
52748: NOT
52749: IFFALSE 52753
// exit ;
52751: GO 52895
// enable_addtolog := true ;
52753: LD_ADDR_OWVAR 81
52757: PUSH
52758: LD_INT 1
52760: ST_TO_ADDR
// AddToLog ( [ ) ;
52761: LD_STRING [
52763: PPUSH
52764: CALL_OW 561
// for i in tmp do
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: LD_VAR 0 4
52777: PUSH
52778: FOR_IN
52779: IFFALSE 52886
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52781: LD_STRING [
52783: PUSH
52784: LD_VAR 0 3
52788: PPUSH
52789: CALL_OW 266
52793: STR
52794: PUSH
52795: LD_STRING , 
52797: STR
52798: PUSH
52799: LD_VAR 0 3
52803: PPUSH
52804: CALL_OW 250
52808: STR
52809: PUSH
52810: LD_STRING , 
52812: STR
52813: PUSH
52814: LD_VAR 0 3
52818: PPUSH
52819: CALL_OW 251
52823: STR
52824: PUSH
52825: LD_STRING , 
52827: STR
52828: PUSH
52829: LD_VAR 0 3
52833: PPUSH
52834: CALL_OW 254
52838: STR
52839: PUSH
52840: LD_STRING , 
52842: STR
52843: PUSH
52844: LD_VAR 0 3
52848: PPUSH
52849: LD_INT 1
52851: PPUSH
52852: CALL_OW 268
52856: STR
52857: PUSH
52858: LD_STRING , 
52860: STR
52861: PUSH
52862: LD_VAR 0 3
52866: PPUSH
52867: LD_INT 2
52869: PPUSH
52870: CALL_OW 268
52874: STR
52875: PUSH
52876: LD_STRING ],
52878: STR
52879: PPUSH
52880: CALL_OW 561
// end ;
52884: GO 52778
52886: POP
52887: POP
// AddToLog ( ]; ) ;
52888: LD_STRING ];
52890: PPUSH
52891: CALL_OW 561
// end ;
52895: LD_VAR 0 2
52899: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52900: LD_INT 0
52902: PPUSH
52903: PPUSH
52904: PPUSH
52905: PPUSH
52906: PPUSH
// if not area or not rate or not max then
52907: LD_VAR 0 1
52911: NOT
52912: PUSH
52913: LD_VAR 0 2
52917: NOT
52918: OR
52919: PUSH
52920: LD_VAR 0 4
52924: NOT
52925: OR
52926: IFFALSE 52930
// exit ;
52928: GO 53122
// while 1 do
52930: LD_INT 1
52932: IFFALSE 53122
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52934: LD_ADDR_VAR 0 9
52938: PUSH
52939: LD_VAR 0 1
52943: PPUSH
52944: LD_INT 1
52946: PPUSH
52947: CALL_OW 287
52951: PUSH
52952: LD_INT 10
52954: MUL
52955: ST_TO_ADDR
// r := rate / 10 ;
52956: LD_ADDR_VAR 0 7
52960: PUSH
52961: LD_VAR 0 2
52965: PUSH
52966: LD_INT 10
52968: DIVREAL
52969: ST_TO_ADDR
// time := 1 1$00 ;
52970: LD_ADDR_VAR 0 8
52974: PUSH
52975: LD_INT 2100
52977: ST_TO_ADDR
// if amount < min then
52978: LD_VAR 0 9
52982: PUSH
52983: LD_VAR 0 3
52987: LESS
52988: IFFALSE 53006
// r := r * 2 else
52990: LD_ADDR_VAR 0 7
52994: PUSH
52995: LD_VAR 0 7
52999: PUSH
53000: LD_INT 2
53002: MUL
53003: ST_TO_ADDR
53004: GO 53032
// if amount > max then
53006: LD_VAR 0 9
53010: PUSH
53011: LD_VAR 0 4
53015: GREATER
53016: IFFALSE 53032
// r := r / 2 ;
53018: LD_ADDR_VAR 0 7
53022: PUSH
53023: LD_VAR 0 7
53027: PUSH
53028: LD_INT 2
53030: DIVREAL
53031: ST_TO_ADDR
// time := time / r ;
53032: LD_ADDR_VAR 0 8
53036: PUSH
53037: LD_VAR 0 8
53041: PUSH
53042: LD_VAR 0 7
53046: DIVREAL
53047: ST_TO_ADDR
// if time < 0 then
53048: LD_VAR 0 8
53052: PUSH
53053: LD_INT 0
53055: LESS
53056: IFFALSE 53073
// time := time * - 1 ;
53058: LD_ADDR_VAR 0 8
53062: PUSH
53063: LD_VAR 0 8
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: MUL
53072: ST_TO_ADDR
// wait ( time ) ;
53073: LD_VAR 0 8
53077: PPUSH
53078: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53082: LD_INT 35
53084: PPUSH
53085: LD_INT 875
53087: PPUSH
53088: CALL_OW 12
53092: PPUSH
53093: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53097: LD_INT 1
53099: PPUSH
53100: LD_INT 5
53102: PPUSH
53103: CALL_OW 12
53107: PPUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: LD_INT 1
53115: PPUSH
53116: CALL_OW 55
// end ;
53120: GO 52930
// end ;
53122: LD_VAR 0 5
53126: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53127: LD_INT 0
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
53136: PPUSH
// if not turrets or not factories then
53137: LD_VAR 0 1
53141: NOT
53142: PUSH
53143: LD_VAR 0 2
53147: NOT
53148: OR
53149: IFFALSE 53153
// exit ;
53151: GO 53460
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53153: LD_ADDR_VAR 0 10
53157: PUSH
53158: LD_INT 5
53160: PUSH
53161: LD_INT 6
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 4
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 5
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 24
53195: PUSH
53196: LD_INT 25
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 23
53205: PUSH
53206: LD_INT 27
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 42
53219: PUSH
53220: LD_INT 43
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 44
53229: PUSH
53230: LD_INT 46
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 45
53239: PUSH
53240: LD_INT 47
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// result := [ ] ;
53257: LD_ADDR_VAR 0 3
53261: PUSH
53262: EMPTY
53263: ST_TO_ADDR
// for i in turrets do
53264: LD_ADDR_VAR 0 4
53268: PUSH
53269: LD_VAR 0 1
53273: PUSH
53274: FOR_IN
53275: IFFALSE 53458
// begin nat := GetNation ( i ) ;
53277: LD_ADDR_VAR 0 7
53281: PUSH
53282: LD_VAR 0 4
53286: PPUSH
53287: CALL_OW 248
53291: ST_TO_ADDR
// weapon := 0 ;
53292: LD_ADDR_VAR 0 8
53296: PUSH
53297: LD_INT 0
53299: ST_TO_ADDR
// if not nat then
53300: LD_VAR 0 7
53304: NOT
53305: IFFALSE 53309
// continue ;
53307: GO 53274
// for j in list [ nat ] do
53309: LD_ADDR_VAR 0 5
53313: PUSH
53314: LD_VAR 0 10
53318: PUSH
53319: LD_VAR 0 7
53323: ARRAY
53324: PUSH
53325: FOR_IN
53326: IFFALSE 53367
// if GetBWeapon ( i ) = j [ 1 ] then
53328: LD_VAR 0 4
53332: PPUSH
53333: CALL_OW 269
53337: PUSH
53338: LD_VAR 0 5
53342: PUSH
53343: LD_INT 1
53345: ARRAY
53346: EQUAL
53347: IFFALSE 53365
// begin weapon := j [ 2 ] ;
53349: LD_ADDR_VAR 0 8
53353: PUSH
53354: LD_VAR 0 5
53358: PUSH
53359: LD_INT 2
53361: ARRAY
53362: ST_TO_ADDR
// break ;
53363: GO 53367
// end ;
53365: GO 53325
53367: POP
53368: POP
// if not weapon then
53369: LD_VAR 0 8
53373: NOT
53374: IFFALSE 53378
// continue ;
53376: GO 53274
// for k in factories do
53378: LD_ADDR_VAR 0 6
53382: PUSH
53383: LD_VAR 0 2
53387: PUSH
53388: FOR_IN
53389: IFFALSE 53454
// begin weapons := AvailableWeaponList ( k ) ;
53391: LD_ADDR_VAR 0 9
53395: PUSH
53396: LD_VAR 0 6
53400: PPUSH
53401: CALL_OW 478
53405: ST_TO_ADDR
// if not weapons then
53406: LD_VAR 0 9
53410: NOT
53411: IFFALSE 53415
// continue ;
53413: GO 53388
// if weapon in weapons then
53415: LD_VAR 0 8
53419: PUSH
53420: LD_VAR 0 9
53424: IN
53425: IFFALSE 53452
// begin result := [ i , weapon ] ;
53427: LD_ADDR_VAR 0 3
53431: PUSH
53432: LD_VAR 0 4
53436: PUSH
53437: LD_VAR 0 8
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// exit ;
53446: POP
53447: POP
53448: POP
53449: POP
53450: GO 53460
// end ; end ;
53452: GO 53388
53454: POP
53455: POP
// end ;
53456: GO 53274
53458: POP
53459: POP
// end ;
53460: LD_VAR 0 3
53464: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53465: LD_INT 0
53467: PPUSH
// if not side or side > 8 then
53468: LD_VAR 0 3
53472: NOT
53473: PUSH
53474: LD_VAR 0 3
53478: PUSH
53479: LD_INT 8
53481: GREATER
53482: OR
53483: IFFALSE 53487
// exit ;
53485: GO 53546
// if not range then
53487: LD_VAR 0 4
53491: NOT
53492: IFFALSE 53503
// range := - 12 ;
53494: LD_ADDR_VAR 0 4
53498: PUSH
53499: LD_INT 12
53501: NEG
53502: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53503: LD_VAR 0 1
53507: PPUSH
53508: LD_VAR 0 2
53512: PPUSH
53513: LD_VAR 0 3
53517: PPUSH
53518: LD_VAR 0 4
53522: PPUSH
53523: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53527: LD_VAR 0 1
53531: PPUSH
53532: LD_VAR 0 2
53536: PPUSH
53537: LD_VAR 0 3
53541: PPUSH
53542: CALL_OW 331
// end ;
53546: LD_VAR 0 5
53550: RET
// export function Video ( mode ) ; begin
53551: LD_INT 0
53553: PPUSH
// ingame_video = mode ;
53554: LD_ADDR_OWVAR 52
53558: PUSH
53559: LD_VAR 0 1
53563: ST_TO_ADDR
// interface_hidden = mode ;
53564: LD_ADDR_OWVAR 54
53568: PUSH
53569: LD_VAR 0 1
53573: ST_TO_ADDR
// end ;
53574: LD_VAR 0 2
53578: RET
// export function Join ( array , element ) ; begin
53579: LD_INT 0
53581: PPUSH
// result := array ^ element ;
53582: LD_ADDR_VAR 0 3
53586: PUSH
53587: LD_VAR 0 1
53591: PUSH
53592: LD_VAR 0 2
53596: ADD
53597: ST_TO_ADDR
// end ;
53598: LD_VAR 0 3
53602: RET
// export function JoinUnion ( array , element ) ; begin
53603: LD_INT 0
53605: PPUSH
// result := array union element ;
53606: LD_ADDR_VAR 0 3
53610: PUSH
53611: LD_VAR 0 1
53615: PUSH
53616: LD_VAR 0 2
53620: UNION
53621: ST_TO_ADDR
// end ;
53622: LD_VAR 0 3
53626: RET
// export function GetBehemoths ( side ) ; begin
53627: LD_INT 0
53629: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53630: LD_ADDR_VAR 0 2
53634: PUSH
53635: LD_INT 22
53637: PUSH
53638: LD_VAR 0 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 31
53649: PUSH
53650: LD_INT 25
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PPUSH
53661: CALL_OW 69
53665: ST_TO_ADDR
// end ;
53666: LD_VAR 0 2
53670: RET
// export function Shuffle ( array ) ; var i , index ; begin
53671: LD_INT 0
53673: PPUSH
53674: PPUSH
53675: PPUSH
// result := [ ] ;
53676: LD_ADDR_VAR 0 2
53680: PUSH
53681: EMPTY
53682: ST_TO_ADDR
// if not array then
53683: LD_VAR 0 1
53687: NOT
53688: IFFALSE 53692
// exit ;
53690: GO 53791
// Randomize ;
53692: CALL_OW 10
// for i = array downto 1 do
53696: LD_ADDR_VAR 0 3
53700: PUSH
53701: DOUBLE
53702: LD_VAR 0 1
53706: INC
53707: ST_TO_ADDR
53708: LD_INT 1
53710: PUSH
53711: FOR_DOWNTO
53712: IFFALSE 53789
// begin index := rand ( 1 , array ) ;
53714: LD_ADDR_VAR 0 4
53718: PUSH
53719: LD_INT 1
53721: PPUSH
53722: LD_VAR 0 1
53726: PPUSH
53727: CALL_OW 12
53731: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53732: LD_ADDR_VAR 0 2
53736: PUSH
53737: LD_VAR 0 2
53741: PPUSH
53742: LD_VAR 0 2
53746: PUSH
53747: LD_INT 1
53749: PLUS
53750: PPUSH
53751: LD_VAR 0 1
53755: PUSH
53756: LD_VAR 0 4
53760: ARRAY
53761: PPUSH
53762: CALL_OW 2
53766: ST_TO_ADDR
// array := Delete ( array , index ) ;
53767: LD_ADDR_VAR 0 1
53771: PUSH
53772: LD_VAR 0 1
53776: PPUSH
53777: LD_VAR 0 4
53781: PPUSH
53782: CALL_OW 3
53786: ST_TO_ADDR
// end ;
53787: GO 53711
53789: POP
53790: POP
// end ; end_of_file
53791: LD_VAR 0 2
53795: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
53796: GO 53798
53798: DISABLE
// begin ru_radar := 98 ;
53799: LD_ADDR_EXP 45
53803: PUSH
53804: LD_INT 98
53806: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
53807: LD_ADDR_EXP 46
53811: PUSH
53812: LD_INT 89
53814: ST_TO_ADDR
// us_hack := 99 ;
53815: LD_ADDR_EXP 47
53819: PUSH
53820: LD_INT 99
53822: ST_TO_ADDR
// us_artillery := 97 ;
53823: LD_ADDR_EXP 48
53827: PUSH
53828: LD_INT 97
53830: ST_TO_ADDR
// ar_bio_bomb := 91 ;
53831: LD_ADDR_EXP 49
53835: PUSH
53836: LD_INT 91
53838: ST_TO_ADDR
// end ; end_of_file
53839: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
53840: LD_INT 0
53842: PPUSH
53843: PPUSH
// skirmish := false ;
53844: LD_ADDR_EXP 50
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// debug_mc := false ;
53852: LD_ADDR_EXP 51
53856: PUSH
53857: LD_INT 0
53859: ST_TO_ADDR
// mc_bases := [ ] ;
53860: LD_ADDR_EXP 52
53864: PUSH
53865: EMPTY
53866: ST_TO_ADDR
// mc_sides := [ ] ;
53867: LD_ADDR_EXP 78
53871: PUSH
53872: EMPTY
53873: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
53874: LD_ADDR_EXP 53
53878: PUSH
53879: EMPTY
53880: ST_TO_ADDR
// mc_building_repairs := [ ] ;
53881: LD_ADDR_EXP 54
53885: PUSH
53886: EMPTY
53887: ST_TO_ADDR
// mc_need_heal := [ ] ;
53888: LD_ADDR_EXP 55
53892: PUSH
53893: EMPTY
53894: ST_TO_ADDR
// mc_healers := [ ] ;
53895: LD_ADDR_EXP 56
53899: PUSH
53900: EMPTY
53901: ST_TO_ADDR
// mc_build_list := [ ] ;
53902: LD_ADDR_EXP 57
53906: PUSH
53907: EMPTY
53908: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
53909: LD_ADDR_EXP 84
53913: PUSH
53914: EMPTY
53915: ST_TO_ADDR
// mc_builders := [ ] ;
53916: LD_ADDR_EXP 58
53920: PUSH
53921: EMPTY
53922: ST_TO_ADDR
// mc_construct_list := [ ] ;
53923: LD_ADDR_EXP 59
53927: PUSH
53928: EMPTY
53929: ST_TO_ADDR
// mc_turret_list := [ ] ;
53930: LD_ADDR_EXP 60
53934: PUSH
53935: EMPTY
53936: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
53937: LD_ADDR_EXP 61
53941: PUSH
53942: EMPTY
53943: ST_TO_ADDR
// mc_miners := [ ] ;
53944: LD_ADDR_EXP 66
53948: PUSH
53949: EMPTY
53950: ST_TO_ADDR
// mc_mines := [ ] ;
53951: LD_ADDR_EXP 65
53955: PUSH
53956: EMPTY
53957: ST_TO_ADDR
// mc_minefields := [ ] ;
53958: LD_ADDR_EXP 67
53962: PUSH
53963: EMPTY
53964: ST_TO_ADDR
// mc_crates := [ ] ;
53965: LD_ADDR_EXP 68
53969: PUSH
53970: EMPTY
53971: ST_TO_ADDR
// mc_crates_collector := [ ] ;
53972: LD_ADDR_EXP 69
53976: PUSH
53977: EMPTY
53978: ST_TO_ADDR
// mc_crates_area := [ ] ;
53979: LD_ADDR_EXP 70
53983: PUSH
53984: EMPTY
53985: ST_TO_ADDR
// mc_vehicles := [ ] ;
53986: LD_ADDR_EXP 71
53990: PUSH
53991: EMPTY
53992: ST_TO_ADDR
// mc_attack := [ ] ;
53993: LD_ADDR_EXP 72
53997: PUSH
53998: EMPTY
53999: ST_TO_ADDR
// mc_produce := [ ] ;
54000: LD_ADDR_EXP 73
54004: PUSH
54005: EMPTY
54006: ST_TO_ADDR
// mc_defender := [ ] ;
54007: LD_ADDR_EXP 74
54011: PUSH
54012: EMPTY
54013: ST_TO_ADDR
// mc_parking := [ ] ;
54014: LD_ADDR_EXP 76
54018: PUSH
54019: EMPTY
54020: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
54021: LD_ADDR_EXP 62
54025: PUSH
54026: EMPTY
54027: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
54028: LD_ADDR_EXP 64
54032: PUSH
54033: EMPTY
54034: ST_TO_ADDR
// mc_scan := [ ] ;
54035: LD_ADDR_EXP 75
54039: PUSH
54040: EMPTY
54041: ST_TO_ADDR
// mc_scan_area := [ ] ;
54042: LD_ADDR_EXP 77
54046: PUSH
54047: EMPTY
54048: ST_TO_ADDR
// mc_tech := [ ] ;
54049: LD_ADDR_EXP 79
54053: PUSH
54054: EMPTY
54055: ST_TO_ADDR
// mc_class := [ ] ;
54056: LD_ADDR_EXP 93
54060: PUSH
54061: EMPTY
54062: ST_TO_ADDR
// mc_class_case_use := [ ] ;
54063: LD_ADDR_EXP 94
54067: PUSH
54068: EMPTY
54069: ST_TO_ADDR
// end ;
54070: LD_VAR 0 1
54074: RET
// export function MC_Kill ( base ) ; begin
54075: LD_INT 0
54077: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
54078: LD_ADDR_EXP 52
54082: PUSH
54083: LD_EXP 52
54087: PPUSH
54088: LD_VAR 0 1
54092: PPUSH
54093: EMPTY
54094: PPUSH
54095: CALL_OW 1
54099: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54100: LD_ADDR_EXP 53
54104: PUSH
54105: LD_EXP 53
54109: PPUSH
54110: LD_VAR 0 1
54114: PPUSH
54115: EMPTY
54116: PPUSH
54117: CALL_OW 1
54121: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54122: LD_ADDR_EXP 54
54126: PUSH
54127: LD_EXP 54
54131: PPUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: EMPTY
54138: PPUSH
54139: CALL_OW 1
54143: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54144: LD_ADDR_EXP 55
54148: PUSH
54149: LD_EXP 55
54153: PPUSH
54154: LD_VAR 0 1
54158: PPUSH
54159: EMPTY
54160: PPUSH
54161: CALL_OW 1
54165: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54166: LD_ADDR_EXP 56
54170: PUSH
54171: LD_EXP 56
54175: PPUSH
54176: LD_VAR 0 1
54180: PPUSH
54181: EMPTY
54182: PPUSH
54183: CALL_OW 1
54187: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54188: LD_ADDR_EXP 57
54192: PUSH
54193: LD_EXP 57
54197: PPUSH
54198: LD_VAR 0 1
54202: PPUSH
54203: EMPTY
54204: PPUSH
54205: CALL_OW 1
54209: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54210: LD_ADDR_EXP 58
54214: PUSH
54215: LD_EXP 58
54219: PPUSH
54220: LD_VAR 0 1
54224: PPUSH
54225: EMPTY
54226: PPUSH
54227: CALL_OW 1
54231: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54232: LD_ADDR_EXP 59
54236: PUSH
54237: LD_EXP 59
54241: PPUSH
54242: LD_VAR 0 1
54246: PPUSH
54247: EMPTY
54248: PPUSH
54249: CALL_OW 1
54253: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54254: LD_ADDR_EXP 60
54258: PUSH
54259: LD_EXP 60
54263: PPUSH
54264: LD_VAR 0 1
54268: PPUSH
54269: EMPTY
54270: PPUSH
54271: CALL_OW 1
54275: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54276: LD_ADDR_EXP 61
54280: PUSH
54281: LD_EXP 61
54285: PPUSH
54286: LD_VAR 0 1
54290: PPUSH
54291: EMPTY
54292: PPUSH
54293: CALL_OW 1
54297: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54298: LD_ADDR_EXP 62
54302: PUSH
54303: LD_EXP 62
54307: PPUSH
54308: LD_VAR 0 1
54312: PPUSH
54313: EMPTY
54314: PPUSH
54315: CALL_OW 1
54319: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54320: LD_ADDR_EXP 63
54324: PUSH
54325: LD_EXP 63
54329: PPUSH
54330: LD_VAR 0 1
54334: PPUSH
54335: LD_INT 0
54337: PPUSH
54338: CALL_OW 1
54342: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54343: LD_ADDR_EXP 64
54347: PUSH
54348: LD_EXP 64
54352: PPUSH
54353: LD_VAR 0 1
54357: PPUSH
54358: EMPTY
54359: PPUSH
54360: CALL_OW 1
54364: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54365: LD_ADDR_EXP 65
54369: PUSH
54370: LD_EXP 65
54374: PPUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: EMPTY
54381: PPUSH
54382: CALL_OW 1
54386: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54387: LD_ADDR_EXP 66
54391: PUSH
54392: LD_EXP 66
54396: PPUSH
54397: LD_VAR 0 1
54401: PPUSH
54402: EMPTY
54403: PPUSH
54404: CALL_OW 1
54408: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54409: LD_ADDR_EXP 67
54413: PUSH
54414: LD_EXP 67
54418: PPUSH
54419: LD_VAR 0 1
54423: PPUSH
54424: EMPTY
54425: PPUSH
54426: CALL_OW 1
54430: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54431: LD_ADDR_EXP 68
54435: PUSH
54436: LD_EXP 68
54440: PPUSH
54441: LD_VAR 0 1
54445: PPUSH
54446: EMPTY
54447: PPUSH
54448: CALL_OW 1
54452: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54453: LD_ADDR_EXP 69
54457: PUSH
54458: LD_EXP 69
54462: PPUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: EMPTY
54469: PPUSH
54470: CALL_OW 1
54474: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54475: LD_ADDR_EXP 70
54479: PUSH
54480: LD_EXP 70
54484: PPUSH
54485: LD_VAR 0 1
54489: PPUSH
54490: EMPTY
54491: PPUSH
54492: CALL_OW 1
54496: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54497: LD_ADDR_EXP 71
54501: PUSH
54502: LD_EXP 71
54506: PPUSH
54507: LD_VAR 0 1
54511: PPUSH
54512: EMPTY
54513: PPUSH
54514: CALL_OW 1
54518: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54519: LD_ADDR_EXP 72
54523: PUSH
54524: LD_EXP 72
54528: PPUSH
54529: LD_VAR 0 1
54533: PPUSH
54534: EMPTY
54535: PPUSH
54536: CALL_OW 1
54540: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54541: LD_ADDR_EXP 73
54545: PUSH
54546: LD_EXP 73
54550: PPUSH
54551: LD_VAR 0 1
54555: PPUSH
54556: EMPTY
54557: PPUSH
54558: CALL_OW 1
54562: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54563: LD_ADDR_EXP 74
54567: PUSH
54568: LD_EXP 74
54572: PPUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: EMPTY
54579: PPUSH
54580: CALL_OW 1
54584: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54585: LD_ADDR_EXP 75
54589: PUSH
54590: LD_EXP 75
54594: PPUSH
54595: LD_VAR 0 1
54599: PPUSH
54600: EMPTY
54601: PPUSH
54602: CALL_OW 1
54606: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54607: LD_ADDR_EXP 76
54611: PUSH
54612: LD_EXP 76
54616: PPUSH
54617: LD_VAR 0 1
54621: PPUSH
54622: EMPTY
54623: PPUSH
54624: CALL_OW 1
54628: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54629: LD_ADDR_EXP 77
54633: PUSH
54634: LD_EXP 77
54638: PPUSH
54639: LD_VAR 0 1
54643: PPUSH
54644: EMPTY
54645: PPUSH
54646: CALL_OW 1
54650: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54651: LD_ADDR_EXP 79
54655: PUSH
54656: LD_EXP 79
54660: PPUSH
54661: LD_VAR 0 1
54665: PPUSH
54666: EMPTY
54667: PPUSH
54668: CALL_OW 1
54672: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54673: LD_ADDR_EXP 81
54677: PUSH
54678: LD_EXP 81
54682: PPUSH
54683: LD_VAR 0 1
54687: PPUSH
54688: EMPTY
54689: PPUSH
54690: CALL_OW 1
54694: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54695: LD_ADDR_EXP 82
54699: PUSH
54700: LD_EXP 82
54704: PPUSH
54705: LD_VAR 0 1
54709: PPUSH
54710: EMPTY
54711: PPUSH
54712: CALL_OW 1
54716: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54717: LD_ADDR_EXP 83
54721: PUSH
54722: LD_EXP 83
54726: PPUSH
54727: LD_VAR 0 1
54731: PPUSH
54732: EMPTY
54733: PPUSH
54734: CALL_OW 1
54738: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54739: LD_ADDR_EXP 84
54743: PUSH
54744: LD_EXP 84
54748: PPUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: EMPTY
54755: PPUSH
54756: CALL_OW 1
54760: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54761: LD_ADDR_EXP 85
54765: PUSH
54766: LD_EXP 85
54770: PPUSH
54771: LD_VAR 0 1
54775: PPUSH
54776: EMPTY
54777: PPUSH
54778: CALL_OW 1
54782: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54783: LD_ADDR_EXP 86
54787: PUSH
54788: LD_EXP 86
54792: PPUSH
54793: LD_VAR 0 1
54797: PPUSH
54798: EMPTY
54799: PPUSH
54800: CALL_OW 1
54804: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54805: LD_ADDR_EXP 87
54809: PUSH
54810: LD_EXP 87
54814: PPUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: EMPTY
54821: PPUSH
54822: CALL_OW 1
54826: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54827: LD_ADDR_EXP 88
54831: PUSH
54832: LD_EXP 88
54836: PPUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: EMPTY
54843: PPUSH
54844: CALL_OW 1
54848: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54849: LD_ADDR_EXP 89
54853: PUSH
54854: LD_EXP 89
54858: PPUSH
54859: LD_VAR 0 1
54863: PPUSH
54864: EMPTY
54865: PPUSH
54866: CALL_OW 1
54870: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54871: LD_ADDR_EXP 90
54875: PUSH
54876: LD_EXP 90
54880: PPUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: EMPTY
54887: PPUSH
54888: CALL_OW 1
54892: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54893: LD_ADDR_EXP 91
54897: PUSH
54898: LD_EXP 91
54902: PPUSH
54903: LD_VAR 0 1
54907: PPUSH
54908: EMPTY
54909: PPUSH
54910: CALL_OW 1
54914: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54915: LD_ADDR_EXP 92
54919: PUSH
54920: LD_EXP 92
54924: PPUSH
54925: LD_VAR 0 1
54929: PPUSH
54930: EMPTY
54931: PPUSH
54932: CALL_OW 1
54936: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54937: LD_ADDR_EXP 93
54941: PUSH
54942: LD_EXP 93
54946: PPUSH
54947: LD_VAR 0 1
54951: PPUSH
54952: EMPTY
54953: PPUSH
54954: CALL_OW 1
54958: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54959: LD_ADDR_EXP 94
54963: PUSH
54964: LD_EXP 94
54968: PPUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: LD_INT 0
54976: PPUSH
54977: CALL_OW 1
54981: ST_TO_ADDR
// end ;
54982: LD_VAR 0 2
54986: RET
// export function MC_Add ( side , units ) ; var base ; begin
54987: LD_INT 0
54989: PPUSH
54990: PPUSH
// base := mc_bases + 1 ;
54991: LD_ADDR_VAR 0 4
54995: PUSH
54996: LD_EXP 52
55000: PUSH
55001: LD_INT 1
55003: PLUS
55004: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
55005: LD_ADDR_EXP 78
55009: PUSH
55010: LD_EXP 78
55014: PPUSH
55015: LD_VAR 0 4
55019: PPUSH
55020: LD_VAR 0 1
55024: PPUSH
55025: CALL_OW 1
55029: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
55030: LD_ADDR_EXP 52
55034: PUSH
55035: LD_EXP 52
55039: PPUSH
55040: LD_VAR 0 4
55044: PPUSH
55045: LD_VAR 0 2
55049: PPUSH
55050: CALL_OW 1
55054: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55055: LD_ADDR_EXP 53
55059: PUSH
55060: LD_EXP 53
55064: PPUSH
55065: LD_VAR 0 4
55069: PPUSH
55070: EMPTY
55071: PPUSH
55072: CALL_OW 1
55076: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55077: LD_ADDR_EXP 54
55081: PUSH
55082: LD_EXP 54
55086: PPUSH
55087: LD_VAR 0 4
55091: PPUSH
55092: EMPTY
55093: PPUSH
55094: CALL_OW 1
55098: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55099: LD_ADDR_EXP 55
55103: PUSH
55104: LD_EXP 55
55108: PPUSH
55109: LD_VAR 0 4
55113: PPUSH
55114: EMPTY
55115: PPUSH
55116: CALL_OW 1
55120: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55121: LD_ADDR_EXP 56
55125: PUSH
55126: LD_EXP 56
55130: PPUSH
55131: LD_VAR 0 4
55135: PPUSH
55136: EMPTY
55137: PPUSH
55138: CALL_OW 1
55142: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55143: LD_ADDR_EXP 57
55147: PUSH
55148: LD_EXP 57
55152: PPUSH
55153: LD_VAR 0 4
55157: PPUSH
55158: EMPTY
55159: PPUSH
55160: CALL_OW 1
55164: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
55165: LD_ADDR_EXP 58
55169: PUSH
55170: LD_EXP 58
55174: PPUSH
55175: LD_VAR 0 4
55179: PPUSH
55180: EMPTY
55181: PPUSH
55182: CALL_OW 1
55186: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
55187: LD_ADDR_EXP 59
55191: PUSH
55192: LD_EXP 59
55196: PPUSH
55197: LD_VAR 0 4
55201: PPUSH
55202: EMPTY
55203: PPUSH
55204: CALL_OW 1
55208: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
55209: LD_ADDR_EXP 60
55213: PUSH
55214: LD_EXP 60
55218: PPUSH
55219: LD_VAR 0 4
55223: PPUSH
55224: EMPTY
55225: PPUSH
55226: CALL_OW 1
55230: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
55231: LD_ADDR_EXP 61
55235: PUSH
55236: LD_EXP 61
55240: PPUSH
55241: LD_VAR 0 4
55245: PPUSH
55246: EMPTY
55247: PPUSH
55248: CALL_OW 1
55252: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
55253: LD_ADDR_EXP 62
55257: PUSH
55258: LD_EXP 62
55262: PPUSH
55263: LD_VAR 0 4
55267: PPUSH
55268: EMPTY
55269: PPUSH
55270: CALL_OW 1
55274: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
55275: LD_ADDR_EXP 63
55279: PUSH
55280: LD_EXP 63
55284: PPUSH
55285: LD_VAR 0 4
55289: PPUSH
55290: LD_INT 0
55292: PPUSH
55293: CALL_OW 1
55297: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
55298: LD_ADDR_EXP 64
55302: PUSH
55303: LD_EXP 64
55307: PPUSH
55308: LD_VAR 0 4
55312: PPUSH
55313: EMPTY
55314: PPUSH
55315: CALL_OW 1
55319: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
55320: LD_ADDR_EXP 65
55324: PUSH
55325: LD_EXP 65
55329: PPUSH
55330: LD_VAR 0 4
55334: PPUSH
55335: EMPTY
55336: PPUSH
55337: CALL_OW 1
55341: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55342: LD_ADDR_EXP 66
55346: PUSH
55347: LD_EXP 66
55351: PPUSH
55352: LD_VAR 0 4
55356: PPUSH
55357: EMPTY
55358: PPUSH
55359: CALL_OW 1
55363: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55364: LD_ADDR_EXP 67
55368: PUSH
55369: LD_EXP 67
55373: PPUSH
55374: LD_VAR 0 4
55378: PPUSH
55379: EMPTY
55380: PPUSH
55381: CALL_OW 1
55385: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55386: LD_ADDR_EXP 68
55390: PUSH
55391: LD_EXP 68
55395: PPUSH
55396: LD_VAR 0 4
55400: PPUSH
55401: EMPTY
55402: PPUSH
55403: CALL_OW 1
55407: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55408: LD_ADDR_EXP 69
55412: PUSH
55413: LD_EXP 69
55417: PPUSH
55418: LD_VAR 0 4
55422: PPUSH
55423: EMPTY
55424: PPUSH
55425: CALL_OW 1
55429: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
55430: LD_ADDR_EXP 70
55434: PUSH
55435: LD_EXP 70
55439: PPUSH
55440: LD_VAR 0 4
55444: PPUSH
55445: EMPTY
55446: PPUSH
55447: CALL_OW 1
55451: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
55452: LD_ADDR_EXP 71
55456: PUSH
55457: LD_EXP 71
55461: PPUSH
55462: LD_VAR 0 4
55466: PPUSH
55467: EMPTY
55468: PPUSH
55469: CALL_OW 1
55473: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
55474: LD_ADDR_EXP 72
55478: PUSH
55479: LD_EXP 72
55483: PPUSH
55484: LD_VAR 0 4
55488: PPUSH
55489: EMPTY
55490: PPUSH
55491: CALL_OW 1
55495: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
55496: LD_ADDR_EXP 73
55500: PUSH
55501: LD_EXP 73
55505: PPUSH
55506: LD_VAR 0 4
55510: PPUSH
55511: EMPTY
55512: PPUSH
55513: CALL_OW 1
55517: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55518: LD_ADDR_EXP 74
55522: PUSH
55523: LD_EXP 74
55527: PPUSH
55528: LD_VAR 0 4
55532: PPUSH
55533: EMPTY
55534: PPUSH
55535: CALL_OW 1
55539: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55540: LD_ADDR_EXP 75
55544: PUSH
55545: LD_EXP 75
55549: PPUSH
55550: LD_VAR 0 4
55554: PPUSH
55555: EMPTY
55556: PPUSH
55557: CALL_OW 1
55561: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55562: LD_ADDR_EXP 76
55566: PUSH
55567: LD_EXP 76
55571: PPUSH
55572: LD_VAR 0 4
55576: PPUSH
55577: EMPTY
55578: PPUSH
55579: CALL_OW 1
55583: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55584: LD_ADDR_EXP 77
55588: PUSH
55589: LD_EXP 77
55593: PPUSH
55594: LD_VAR 0 4
55598: PPUSH
55599: EMPTY
55600: PPUSH
55601: CALL_OW 1
55605: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55606: LD_ADDR_EXP 79
55610: PUSH
55611: LD_EXP 79
55615: PPUSH
55616: LD_VAR 0 4
55620: PPUSH
55621: EMPTY
55622: PPUSH
55623: CALL_OW 1
55627: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55628: LD_ADDR_EXP 81
55632: PUSH
55633: LD_EXP 81
55637: PPUSH
55638: LD_VAR 0 4
55642: PPUSH
55643: EMPTY
55644: PPUSH
55645: CALL_OW 1
55649: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55650: LD_ADDR_EXP 82
55654: PUSH
55655: LD_EXP 82
55659: PPUSH
55660: LD_VAR 0 4
55664: PPUSH
55665: EMPTY
55666: PPUSH
55667: CALL_OW 1
55671: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55672: LD_ADDR_EXP 83
55676: PUSH
55677: LD_EXP 83
55681: PPUSH
55682: LD_VAR 0 4
55686: PPUSH
55687: EMPTY
55688: PPUSH
55689: CALL_OW 1
55693: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55694: LD_ADDR_EXP 84
55698: PUSH
55699: LD_EXP 84
55703: PPUSH
55704: LD_VAR 0 4
55708: PPUSH
55709: EMPTY
55710: PPUSH
55711: CALL_OW 1
55715: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55716: LD_ADDR_EXP 85
55720: PUSH
55721: LD_EXP 85
55725: PPUSH
55726: LD_VAR 0 4
55730: PPUSH
55731: EMPTY
55732: PPUSH
55733: CALL_OW 1
55737: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55738: LD_ADDR_EXP 86
55742: PUSH
55743: LD_EXP 86
55747: PPUSH
55748: LD_VAR 0 4
55752: PPUSH
55753: EMPTY
55754: PPUSH
55755: CALL_OW 1
55759: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55760: LD_ADDR_EXP 87
55764: PUSH
55765: LD_EXP 87
55769: PPUSH
55770: LD_VAR 0 4
55774: PPUSH
55775: EMPTY
55776: PPUSH
55777: CALL_OW 1
55781: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55782: LD_ADDR_EXP 88
55786: PUSH
55787: LD_EXP 88
55791: PPUSH
55792: LD_VAR 0 4
55796: PPUSH
55797: EMPTY
55798: PPUSH
55799: CALL_OW 1
55803: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55804: LD_ADDR_EXP 89
55808: PUSH
55809: LD_EXP 89
55813: PPUSH
55814: LD_VAR 0 4
55818: PPUSH
55819: EMPTY
55820: PPUSH
55821: CALL_OW 1
55825: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55826: LD_ADDR_EXP 90
55830: PUSH
55831: LD_EXP 90
55835: PPUSH
55836: LD_VAR 0 4
55840: PPUSH
55841: EMPTY
55842: PPUSH
55843: CALL_OW 1
55847: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55848: LD_ADDR_EXP 91
55852: PUSH
55853: LD_EXP 91
55857: PPUSH
55858: LD_VAR 0 4
55862: PPUSH
55863: EMPTY
55864: PPUSH
55865: CALL_OW 1
55869: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55870: LD_ADDR_EXP 92
55874: PUSH
55875: LD_EXP 92
55879: PPUSH
55880: LD_VAR 0 4
55884: PPUSH
55885: EMPTY
55886: PPUSH
55887: CALL_OW 1
55891: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55892: LD_ADDR_EXP 93
55896: PUSH
55897: LD_EXP 93
55901: PPUSH
55902: LD_VAR 0 4
55906: PPUSH
55907: EMPTY
55908: PPUSH
55909: CALL_OW 1
55913: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55914: LD_ADDR_EXP 94
55918: PUSH
55919: LD_EXP 94
55923: PPUSH
55924: LD_VAR 0 4
55928: PPUSH
55929: LD_INT 0
55931: PPUSH
55932: CALL_OW 1
55936: ST_TO_ADDR
// result := base ;
55937: LD_ADDR_VAR 0 3
55941: PUSH
55942: LD_VAR 0 4
55946: ST_TO_ADDR
// end ;
55947: LD_VAR 0 3
55951: RET
// export function MC_Start ( ) ; var i ; begin
55952: LD_INT 0
55954: PPUSH
55955: PPUSH
// for i = 1 to mc_bases do
55956: LD_ADDR_VAR 0 2
55960: PUSH
55961: DOUBLE
55962: LD_INT 1
55964: DEC
55965: ST_TO_ADDR
55966: LD_EXP 52
55970: PUSH
55971: FOR_TO
55972: IFFALSE 57049
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
55974: LD_ADDR_EXP 52
55978: PUSH
55979: LD_EXP 52
55983: PPUSH
55984: LD_VAR 0 2
55988: PPUSH
55989: LD_EXP 52
55993: PUSH
55994: LD_VAR 0 2
55998: ARRAY
55999: PUSH
56000: LD_INT 0
56002: DIFF
56003: PPUSH
56004: CALL_OW 1
56008: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
56009: LD_ADDR_EXP 53
56013: PUSH
56014: LD_EXP 53
56018: PPUSH
56019: LD_VAR 0 2
56023: PPUSH
56024: EMPTY
56025: PPUSH
56026: CALL_OW 1
56030: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56031: LD_ADDR_EXP 54
56035: PUSH
56036: LD_EXP 54
56040: PPUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: EMPTY
56047: PPUSH
56048: CALL_OW 1
56052: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
56053: LD_ADDR_EXP 55
56057: PUSH
56058: LD_EXP 55
56062: PPUSH
56063: LD_VAR 0 2
56067: PPUSH
56068: EMPTY
56069: PPUSH
56070: CALL_OW 1
56074: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
56075: LD_ADDR_EXP 56
56079: PUSH
56080: LD_EXP 56
56084: PPUSH
56085: LD_VAR 0 2
56089: PPUSH
56090: EMPTY
56091: PUSH
56092: EMPTY
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PPUSH
56098: CALL_OW 1
56102: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
56103: LD_ADDR_EXP 57
56107: PUSH
56108: LD_EXP 57
56112: PPUSH
56113: LD_VAR 0 2
56117: PPUSH
56118: EMPTY
56119: PPUSH
56120: CALL_OW 1
56124: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
56125: LD_ADDR_EXP 84
56129: PUSH
56130: LD_EXP 84
56134: PPUSH
56135: LD_VAR 0 2
56139: PPUSH
56140: EMPTY
56141: PPUSH
56142: CALL_OW 1
56146: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
56147: LD_ADDR_EXP 58
56151: PUSH
56152: LD_EXP 58
56156: PPUSH
56157: LD_VAR 0 2
56161: PPUSH
56162: EMPTY
56163: PPUSH
56164: CALL_OW 1
56168: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
56169: LD_ADDR_EXP 59
56173: PUSH
56174: LD_EXP 59
56178: PPUSH
56179: LD_VAR 0 2
56183: PPUSH
56184: EMPTY
56185: PPUSH
56186: CALL_OW 1
56190: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
56191: LD_ADDR_EXP 60
56195: PUSH
56196: LD_EXP 60
56200: PPUSH
56201: LD_VAR 0 2
56205: PPUSH
56206: LD_EXP 52
56210: PUSH
56211: LD_VAR 0 2
56215: ARRAY
56216: PPUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 30
56222: PUSH
56223: LD_INT 32
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 30
56232: PUSH
56233: LD_INT 33
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: PPUSH
56245: CALL_OW 72
56249: PPUSH
56250: CALL_OW 1
56254: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
56255: LD_ADDR_EXP 61
56259: PUSH
56260: LD_EXP 61
56264: PPUSH
56265: LD_VAR 0 2
56269: PPUSH
56270: LD_EXP 52
56274: PUSH
56275: LD_VAR 0 2
56279: ARRAY
56280: PPUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 30
56286: PUSH
56287: LD_INT 32
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 30
56296: PUSH
56297: LD_INT 31
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 58
56311: PUSH
56312: EMPTY
56313: LIST
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PPUSH
56319: CALL_OW 72
56323: PPUSH
56324: CALL_OW 1
56328: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
56329: LD_ADDR_EXP 62
56333: PUSH
56334: LD_EXP 62
56338: PPUSH
56339: LD_VAR 0 2
56343: PPUSH
56344: EMPTY
56345: PPUSH
56346: CALL_OW 1
56350: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
56351: LD_ADDR_EXP 66
56355: PUSH
56356: LD_EXP 66
56360: PPUSH
56361: LD_VAR 0 2
56365: PPUSH
56366: EMPTY
56367: PPUSH
56368: CALL_OW 1
56372: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
56373: LD_ADDR_EXP 65
56377: PUSH
56378: LD_EXP 65
56382: PPUSH
56383: LD_VAR 0 2
56387: PPUSH
56388: EMPTY
56389: PPUSH
56390: CALL_OW 1
56394: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
56395: LD_ADDR_EXP 67
56399: PUSH
56400: LD_EXP 67
56404: PPUSH
56405: LD_VAR 0 2
56409: PPUSH
56410: EMPTY
56411: PPUSH
56412: CALL_OW 1
56416: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
56417: LD_ADDR_EXP 68
56421: PUSH
56422: LD_EXP 68
56426: PPUSH
56427: LD_VAR 0 2
56431: PPUSH
56432: EMPTY
56433: PPUSH
56434: CALL_OW 1
56438: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
56439: LD_ADDR_EXP 69
56443: PUSH
56444: LD_EXP 69
56448: PPUSH
56449: LD_VAR 0 2
56453: PPUSH
56454: EMPTY
56455: PPUSH
56456: CALL_OW 1
56460: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
56461: LD_ADDR_EXP 70
56465: PUSH
56466: LD_EXP 70
56470: PPUSH
56471: LD_VAR 0 2
56475: PPUSH
56476: EMPTY
56477: PPUSH
56478: CALL_OW 1
56482: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
56483: LD_ADDR_EXP 71
56487: PUSH
56488: LD_EXP 71
56492: PPUSH
56493: LD_VAR 0 2
56497: PPUSH
56498: EMPTY
56499: PPUSH
56500: CALL_OW 1
56504: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56505: LD_ADDR_EXP 72
56509: PUSH
56510: LD_EXP 72
56514: PPUSH
56515: LD_VAR 0 2
56519: PPUSH
56520: EMPTY
56521: PPUSH
56522: CALL_OW 1
56526: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
56527: LD_ADDR_EXP 73
56531: PUSH
56532: LD_EXP 73
56536: PPUSH
56537: LD_VAR 0 2
56541: PPUSH
56542: EMPTY
56543: PPUSH
56544: CALL_OW 1
56548: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56549: LD_ADDR_EXP 74
56553: PUSH
56554: LD_EXP 74
56558: PPUSH
56559: LD_VAR 0 2
56563: PPUSH
56564: EMPTY
56565: PPUSH
56566: CALL_OW 1
56570: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56571: LD_ADDR_EXP 63
56575: PUSH
56576: LD_EXP 63
56580: PPUSH
56581: LD_VAR 0 2
56585: PPUSH
56586: LD_INT 0
56588: PPUSH
56589: CALL_OW 1
56593: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56594: LD_ADDR_EXP 76
56598: PUSH
56599: LD_EXP 76
56603: PPUSH
56604: LD_VAR 0 2
56608: PPUSH
56609: LD_INT 0
56611: PPUSH
56612: CALL_OW 1
56616: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56617: LD_ADDR_EXP 64
56621: PUSH
56622: LD_EXP 64
56626: PPUSH
56627: LD_VAR 0 2
56631: PPUSH
56632: EMPTY
56633: PPUSH
56634: CALL_OW 1
56638: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56639: LD_ADDR_EXP 75
56643: PUSH
56644: LD_EXP 75
56648: PPUSH
56649: LD_VAR 0 2
56653: PPUSH
56654: LD_INT 0
56656: PPUSH
56657: CALL_OW 1
56661: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56662: LD_ADDR_EXP 77
56666: PUSH
56667: LD_EXP 77
56671: PPUSH
56672: LD_VAR 0 2
56676: PPUSH
56677: EMPTY
56678: PPUSH
56679: CALL_OW 1
56683: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56684: LD_ADDR_EXP 80
56688: PUSH
56689: LD_EXP 80
56693: PPUSH
56694: LD_VAR 0 2
56698: PPUSH
56699: LD_INT 0
56701: PPUSH
56702: CALL_OW 1
56706: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
56707: LD_ADDR_EXP 81
56711: PUSH
56712: LD_EXP 81
56716: PPUSH
56717: LD_VAR 0 2
56721: PPUSH
56722: EMPTY
56723: PPUSH
56724: CALL_OW 1
56728: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56729: LD_ADDR_EXP 82
56733: PUSH
56734: LD_EXP 82
56738: PPUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: EMPTY
56745: PPUSH
56746: CALL_OW 1
56750: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56751: LD_ADDR_EXP 83
56755: PUSH
56756: LD_EXP 83
56760: PPUSH
56761: LD_VAR 0 2
56765: PPUSH
56766: EMPTY
56767: PPUSH
56768: CALL_OW 1
56772: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
56773: LD_ADDR_EXP 85
56777: PUSH
56778: LD_EXP 85
56782: PPUSH
56783: LD_VAR 0 2
56787: PPUSH
56788: LD_EXP 52
56792: PUSH
56793: LD_VAR 0 2
56797: ARRAY
56798: PPUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 30
56804: PUSH
56805: LD_INT 6
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 30
56814: PUSH
56815: LD_INT 7
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 30
56824: PUSH
56825: LD_INT 8
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: PPUSH
56838: CALL_OW 72
56842: PPUSH
56843: CALL_OW 1
56847: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
56848: LD_ADDR_EXP 86
56852: PUSH
56853: LD_EXP 86
56857: PPUSH
56858: LD_VAR 0 2
56862: PPUSH
56863: EMPTY
56864: PPUSH
56865: CALL_OW 1
56869: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
56870: LD_ADDR_EXP 87
56874: PUSH
56875: LD_EXP 87
56879: PPUSH
56880: LD_VAR 0 2
56884: PPUSH
56885: EMPTY
56886: PPUSH
56887: CALL_OW 1
56891: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
56892: LD_ADDR_EXP 88
56896: PUSH
56897: LD_EXP 88
56901: PPUSH
56902: LD_VAR 0 2
56906: PPUSH
56907: EMPTY
56908: PPUSH
56909: CALL_OW 1
56913: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
56914: LD_ADDR_EXP 89
56918: PUSH
56919: LD_EXP 89
56923: PPUSH
56924: LD_VAR 0 2
56928: PPUSH
56929: EMPTY
56930: PPUSH
56931: CALL_OW 1
56935: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
56936: LD_ADDR_EXP 90
56940: PUSH
56941: LD_EXP 90
56945: PPUSH
56946: LD_VAR 0 2
56950: PPUSH
56951: EMPTY
56952: PPUSH
56953: CALL_OW 1
56957: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
56958: LD_ADDR_EXP 91
56962: PUSH
56963: LD_EXP 91
56967: PPUSH
56968: LD_VAR 0 2
56972: PPUSH
56973: EMPTY
56974: PPUSH
56975: CALL_OW 1
56979: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
56980: LD_ADDR_EXP 92
56984: PUSH
56985: LD_EXP 92
56989: PPUSH
56990: LD_VAR 0 2
56994: PPUSH
56995: EMPTY
56996: PPUSH
56997: CALL_OW 1
57001: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
57002: LD_ADDR_EXP 93
57006: PUSH
57007: LD_EXP 93
57011: PPUSH
57012: LD_VAR 0 2
57016: PPUSH
57017: EMPTY
57018: PPUSH
57019: CALL_OW 1
57023: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
57024: LD_ADDR_EXP 94
57028: PUSH
57029: LD_EXP 94
57033: PPUSH
57034: LD_VAR 0 2
57038: PPUSH
57039: LD_INT 0
57041: PPUSH
57042: CALL_OW 1
57046: ST_TO_ADDR
// end ;
57047: GO 55971
57049: POP
57050: POP
// MC_InitSides ( ) ;
57051: CALL 57337 0 0
// MC_InitResearch ( ) ;
57055: CALL 57076 0 0
// CustomInitMacro ( ) ;
57059: CALL 5346 0 0
// skirmish := true ;
57063: LD_ADDR_EXP 50
57067: PUSH
57068: LD_INT 1
57070: ST_TO_ADDR
// end ;
57071: LD_VAR 0 1
57075: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
57076: LD_INT 0
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
57082: PPUSH
57083: PPUSH
// if not mc_bases then
57084: LD_EXP 52
57088: NOT
57089: IFFALSE 57093
// exit ;
57091: GO 57332
// for i = 1 to 8 do
57093: LD_ADDR_VAR 0 2
57097: PUSH
57098: DOUBLE
57099: LD_INT 1
57101: DEC
57102: ST_TO_ADDR
57103: LD_INT 8
57105: PUSH
57106: FOR_TO
57107: IFFALSE 57133
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
57109: LD_ADDR_EXP 79
57113: PUSH
57114: LD_EXP 79
57118: PPUSH
57119: LD_VAR 0 2
57123: PPUSH
57124: EMPTY
57125: PPUSH
57126: CALL_OW 1
57130: ST_TO_ADDR
57131: GO 57106
57133: POP
57134: POP
// tmp := [ ] ;
57135: LD_ADDR_VAR 0 5
57139: PUSH
57140: EMPTY
57141: ST_TO_ADDR
// for i = 1 to mc_sides do
57142: LD_ADDR_VAR 0 2
57146: PUSH
57147: DOUBLE
57148: LD_INT 1
57150: DEC
57151: ST_TO_ADDR
57152: LD_EXP 78
57156: PUSH
57157: FOR_TO
57158: IFFALSE 57216
// if not mc_sides [ i ] in tmp then
57160: LD_EXP 78
57164: PUSH
57165: LD_VAR 0 2
57169: ARRAY
57170: PUSH
57171: LD_VAR 0 5
57175: IN
57176: NOT
57177: IFFALSE 57214
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
57179: LD_ADDR_VAR 0 5
57183: PUSH
57184: LD_VAR 0 5
57188: PPUSH
57189: LD_VAR 0 5
57193: PUSH
57194: LD_INT 1
57196: PLUS
57197: PPUSH
57198: LD_EXP 78
57202: PUSH
57203: LD_VAR 0 2
57207: ARRAY
57208: PPUSH
57209: CALL_OW 2
57213: ST_TO_ADDR
57214: GO 57157
57216: POP
57217: POP
// if not tmp then
57218: LD_VAR 0 5
57222: NOT
57223: IFFALSE 57227
// exit ;
57225: GO 57332
// for j in tmp do
57227: LD_ADDR_VAR 0 3
57231: PUSH
57232: LD_VAR 0 5
57236: PUSH
57237: FOR_IN
57238: IFFALSE 57330
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
57240: LD_ADDR_VAR 0 6
57244: PUSH
57245: LD_INT 22
57247: PUSH
57248: LD_VAR 0 3
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PPUSH
57257: CALL_OW 69
57261: ST_TO_ADDR
// if not un then
57262: LD_VAR 0 6
57266: NOT
57267: IFFALSE 57271
// continue ;
57269: GO 57237
// nation := GetNation ( un [ 1 ] ) ;
57271: LD_ADDR_VAR 0 4
57275: PUSH
57276: LD_VAR 0 6
57280: PUSH
57281: LD_INT 1
57283: ARRAY
57284: PPUSH
57285: CALL_OW 248
57289: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
57290: LD_ADDR_EXP 79
57294: PUSH
57295: LD_EXP 79
57299: PPUSH
57300: LD_VAR 0 3
57304: PPUSH
57305: LD_VAR 0 3
57309: PPUSH
57310: LD_VAR 0 4
57314: PPUSH
57315: LD_INT 1
57317: PPUSH
57318: CALL 11146 0 3
57322: PPUSH
57323: CALL_OW 1
57327: ST_TO_ADDR
// end ;
57328: GO 57237
57330: POP
57331: POP
// end ;
57332: LD_VAR 0 1
57336: RET
// export function MC_InitSides ( ) ; var i ; begin
57337: LD_INT 0
57339: PPUSH
57340: PPUSH
// if not mc_bases then
57341: LD_EXP 52
57345: NOT
57346: IFFALSE 57350
// exit ;
57348: GO 57424
// for i = 1 to mc_bases do
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: DOUBLE
57356: LD_INT 1
57358: DEC
57359: ST_TO_ADDR
57360: LD_EXP 52
57364: PUSH
57365: FOR_TO
57366: IFFALSE 57422
// if mc_bases [ i ] then
57368: LD_EXP 52
57372: PUSH
57373: LD_VAR 0 2
57377: ARRAY
57378: IFFALSE 57420
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57380: LD_ADDR_EXP 78
57384: PUSH
57385: LD_EXP 78
57389: PPUSH
57390: LD_VAR 0 2
57394: PPUSH
57395: LD_EXP 52
57399: PUSH
57400: LD_VAR 0 2
57404: ARRAY
57405: PUSH
57406: LD_INT 1
57408: ARRAY
57409: PPUSH
57410: CALL_OW 255
57414: PPUSH
57415: CALL_OW 1
57419: ST_TO_ADDR
57420: GO 57365
57422: POP
57423: POP
// end ;
57424: LD_VAR 0 1
57428: RET
// every 0 0$01 trigger skirmish do
57429: LD_EXP 50
57433: IFFALSE 57587
57435: GO 57437
57437: DISABLE
// begin enable ;
57438: ENABLE
// MC_CheckBuildings ( ) ;
57439: CALL 62085 0 0
// MC_CheckPeopleLife ( ) ;
57443: CALL 62210 0 0
// RaiseSailEvent ( 100 ) ;
57447: LD_INT 100
57449: PPUSH
57450: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
57454: LD_INT 103
57456: PPUSH
57457: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
57461: LD_INT 104
57463: PPUSH
57464: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
57468: LD_INT 105
57470: PPUSH
57471: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
57475: LD_INT 106
57477: PPUSH
57478: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
57482: LD_INT 107
57484: PPUSH
57485: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
57489: LD_INT 108
57491: PPUSH
57492: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
57496: LD_INT 109
57498: PPUSH
57499: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
57503: LD_INT 110
57505: PPUSH
57506: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
57510: LD_INT 111
57512: PPUSH
57513: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
57517: LD_INT 112
57519: PPUSH
57520: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
57524: LD_INT 113
57526: PPUSH
57527: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
57531: LD_INT 120
57533: PPUSH
57534: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57538: LD_INT 121
57540: PPUSH
57541: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57545: LD_INT 122
57547: PPUSH
57548: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57552: LD_INT 123
57554: PPUSH
57555: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57559: LD_INT 124
57561: PPUSH
57562: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57566: LD_INT 125
57568: PPUSH
57569: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57573: LD_INT 126
57575: PPUSH
57576: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57580: LD_INT 200
57582: PPUSH
57583: CALL_OW 427
// end ;
57587: END
// on SailEvent ( event ) do begin if event < 100 then
57588: LD_VAR 0 1
57592: PUSH
57593: LD_INT 100
57595: LESS
57596: IFFALSE 57607
// CustomEvent ( event ) ;
57598: LD_VAR 0 1
57602: PPUSH
57603: CALL 5338 0 1
// if event = 100 then
57607: LD_VAR 0 1
57611: PUSH
57612: LD_INT 100
57614: EQUAL
57615: IFFALSE 57621
// MC_ClassManager ( ) ;
57617: CALL 58013 0 0
// if event = 101 then
57621: LD_VAR 0 1
57625: PUSH
57626: LD_INT 101
57628: EQUAL
57629: IFFALSE 57635
// MC_RepairBuildings ( ) ;
57631: CALL 62806 0 0
// if event = 102 then
57635: LD_VAR 0 1
57639: PUSH
57640: LD_INT 102
57642: EQUAL
57643: IFFALSE 57649
// MC_Heal ( ) ;
57645: CALL 63538 0 0
// if event = 103 then
57649: LD_VAR 0 1
57653: PUSH
57654: LD_INT 103
57656: EQUAL
57657: IFFALSE 57663
// MC_Build ( ) ;
57659: CALL 63960 0 0
// if event = 104 then
57663: LD_VAR 0 1
57667: PUSH
57668: LD_INT 104
57670: EQUAL
57671: IFFALSE 57677
// MC_TurretWeapon ( ) ;
57673: CALL 65573 0 0
// if event = 105 then
57677: LD_VAR 0 1
57681: PUSH
57682: LD_INT 105
57684: EQUAL
57685: IFFALSE 57691
// MC_BuildUpgrade ( ) ;
57687: CALL 65124 0 0
// if event = 106 then
57691: LD_VAR 0 1
57695: PUSH
57696: LD_INT 106
57698: EQUAL
57699: IFFALSE 57705
// MC_PlantMines ( ) ;
57701: CALL 66003 0 0
// if event = 107 then
57705: LD_VAR 0 1
57709: PUSH
57710: LD_INT 107
57712: EQUAL
57713: IFFALSE 57719
// MC_CollectCrates ( ) ;
57715: CALL 67037 0 0
// if event = 108 then
57719: LD_VAR 0 1
57723: PUSH
57724: LD_INT 108
57726: EQUAL
57727: IFFALSE 57733
// MC_LinkRemoteControl ( ) ;
57729: CALL 68813 0 0
// if event = 109 then
57733: LD_VAR 0 1
57737: PUSH
57738: LD_INT 109
57740: EQUAL
57741: IFFALSE 57747
// MC_ProduceVehicle ( ) ;
57743: CALL 68994 0 0
// if event = 110 then
57747: LD_VAR 0 1
57751: PUSH
57752: LD_INT 110
57754: EQUAL
57755: IFFALSE 57761
// MC_SendAttack ( ) ;
57757: CALL 69460 0 0
// if event = 111 then
57761: LD_VAR 0 1
57765: PUSH
57766: LD_INT 111
57768: EQUAL
57769: IFFALSE 57775
// MC_Defend ( ) ;
57771: CALL 69568 0 0
// if event = 112 then
57775: LD_VAR 0 1
57779: PUSH
57780: LD_INT 112
57782: EQUAL
57783: IFFALSE 57789
// MC_Research ( ) ;
57785: CALL 70173 0 0
// if event = 113 then
57789: LD_VAR 0 1
57793: PUSH
57794: LD_INT 113
57796: EQUAL
57797: IFFALSE 57803
// MC_MinesTrigger ( ) ;
57799: CALL 71287 0 0
// if event = 120 then
57803: LD_VAR 0 1
57807: PUSH
57808: LD_INT 120
57810: EQUAL
57811: IFFALSE 57817
// MC_RepairVehicle ( ) ;
57813: CALL 71386 0 0
// if event = 121 then
57817: LD_VAR 0 1
57821: PUSH
57822: LD_INT 121
57824: EQUAL
57825: IFFALSE 57831
// MC_TameApe ( ) ;
57827: CALL 72116 0 0
// if event = 122 then
57831: LD_VAR 0 1
57835: PUSH
57836: LD_INT 122
57838: EQUAL
57839: IFFALSE 57845
// MC_ChangeApeClass ( ) ;
57841: CALL 72945 0 0
// if event = 123 then
57845: LD_VAR 0 1
57849: PUSH
57850: LD_INT 123
57852: EQUAL
57853: IFFALSE 57859
// MC_Bazooka ( ) ;
57855: CALL 73595 0 0
// if event = 124 then
57859: LD_VAR 0 1
57863: PUSH
57864: LD_INT 124
57866: EQUAL
57867: IFFALSE 57873
// MC_TeleportExit ( ) ;
57869: CALL 73793 0 0
// if event = 125 then
57873: LD_VAR 0 1
57877: PUSH
57878: LD_INT 125
57880: EQUAL
57881: IFFALSE 57887
// MC_Deposits ( ) ;
57883: CALL 74440 0 0
// if event = 126 then
57887: LD_VAR 0 1
57891: PUSH
57892: LD_INT 126
57894: EQUAL
57895: IFFALSE 57901
// MC_RemoteDriver ( ) ;
57897: CALL 75065 0 0
// if event = 200 then
57901: LD_VAR 0 1
57905: PUSH
57906: LD_INT 200
57908: EQUAL
57909: IFFALSE 57915
// MC_Idle ( ) ;
57911: CALL 76798 0 0
// end ;
57915: PPOPN 1
57917: END
// export function MC_Reset ( base , tag ) ; var i ; begin
57918: LD_INT 0
57920: PPUSH
57921: PPUSH
// if not mc_bases [ base ] or not tag then
57922: LD_EXP 52
57926: PUSH
57927: LD_VAR 0 1
57931: ARRAY
57932: NOT
57933: PUSH
57934: LD_VAR 0 2
57938: NOT
57939: OR
57940: IFFALSE 57944
// exit ;
57942: GO 58008
// for i in mc_bases [ base ] union mc_ape [ base ] do
57944: LD_ADDR_VAR 0 4
57948: PUSH
57949: LD_EXP 52
57953: PUSH
57954: LD_VAR 0 1
57958: ARRAY
57959: PUSH
57960: LD_EXP 81
57964: PUSH
57965: LD_VAR 0 1
57969: ARRAY
57970: UNION
57971: PUSH
57972: FOR_IN
57973: IFFALSE 58006
// if GetTag ( i ) = tag then
57975: LD_VAR 0 4
57979: PPUSH
57980: CALL_OW 110
57984: PUSH
57985: LD_VAR 0 2
57989: EQUAL
57990: IFFALSE 58004
// SetTag ( i , 0 ) ;
57992: LD_VAR 0 4
57996: PPUSH
57997: LD_INT 0
57999: PPUSH
58000: CALL_OW 109
58004: GO 57972
58006: POP
58007: POP
// end ;
58008: LD_VAR 0 3
58012: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
58013: LD_INT 0
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
58020: PPUSH
58021: PPUSH
58022: PPUSH
// if not mc_bases then
58023: LD_EXP 52
58027: NOT
58028: IFFALSE 58032
// exit ;
58030: GO 58490
// for i = 1 to mc_bases do
58032: LD_ADDR_VAR 0 2
58036: PUSH
58037: DOUBLE
58038: LD_INT 1
58040: DEC
58041: ST_TO_ADDR
58042: LD_EXP 52
58046: PUSH
58047: FOR_TO
58048: IFFALSE 58488
// begin tmp := MC_ClassCheckReq ( i ) ;
58050: LD_ADDR_VAR 0 4
58054: PUSH
58055: LD_VAR 0 2
58059: PPUSH
58060: CALL 58495 0 1
58064: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
58065: LD_ADDR_EXP 93
58069: PUSH
58070: LD_EXP 93
58074: PPUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_VAR 0 4
58084: PPUSH
58085: CALL_OW 1
58089: ST_TO_ADDR
// if not tmp then
58090: LD_VAR 0 4
58094: NOT
58095: IFFALSE 58099
// continue ;
58097: GO 58047
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
58099: LD_ADDR_VAR 0 6
58103: PUSH
58104: LD_EXP 52
58108: PUSH
58109: LD_VAR 0 2
58113: ARRAY
58114: PPUSH
58115: LD_INT 2
58117: PUSH
58118: LD_INT 30
58120: PUSH
58121: LD_INT 4
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 30
58130: PUSH
58131: LD_INT 5
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: PPUSH
58143: CALL_OW 72
58147: PUSH
58148: LD_EXP 52
58152: PUSH
58153: LD_VAR 0 2
58157: ARRAY
58158: PPUSH
58159: LD_INT 2
58161: PUSH
58162: LD_INT 30
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 30
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: PPUSH
58187: CALL_OW 72
58191: PUSH
58192: LD_EXP 52
58196: PUSH
58197: LD_VAR 0 2
58201: ARRAY
58202: PPUSH
58203: LD_INT 30
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PPUSH
58213: CALL_OW 72
58217: PUSH
58218: LD_EXP 52
58222: PUSH
58223: LD_VAR 0 2
58227: ARRAY
58228: PPUSH
58229: LD_INT 2
58231: PUSH
58232: LD_INT 30
58234: PUSH
58235: LD_INT 6
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 30
58244: PUSH
58245: LD_INT 7
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 30
58254: PUSH
58255: LD_INT 8
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: PPUSH
58268: CALL_OW 72
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// for j = 1 to 4 do
58279: LD_ADDR_VAR 0 3
58283: PUSH
58284: DOUBLE
58285: LD_INT 1
58287: DEC
58288: ST_TO_ADDR
58289: LD_INT 4
58291: PUSH
58292: FOR_TO
58293: IFFALSE 58484
// begin if not tmp [ j ] then
58295: LD_VAR 0 4
58299: PUSH
58300: LD_VAR 0 3
58304: ARRAY
58305: NOT
58306: IFFALSE 58310
// continue ;
58308: GO 58292
// for p in tmp [ j ] do
58310: LD_ADDR_VAR 0 5
58314: PUSH
58315: LD_VAR 0 4
58319: PUSH
58320: LD_VAR 0 3
58324: ARRAY
58325: PUSH
58326: FOR_IN
58327: IFFALSE 58480
// begin if not b [ j ] then
58329: LD_VAR 0 6
58333: PUSH
58334: LD_VAR 0 3
58338: ARRAY
58339: NOT
58340: IFFALSE 58344
// break ;
58342: GO 58480
// e := 0 ;
58344: LD_ADDR_VAR 0 7
58348: PUSH
58349: LD_INT 0
58351: ST_TO_ADDR
// for k in b [ j ] do
58352: LD_ADDR_VAR 0 8
58356: PUSH
58357: LD_VAR 0 6
58361: PUSH
58362: LD_VAR 0 3
58366: ARRAY
58367: PUSH
58368: FOR_IN
58369: IFFALSE 58396
// if IsNotFull ( k ) then
58371: LD_VAR 0 8
58375: PPUSH
58376: CALL 15222 0 1
58380: IFFALSE 58394
// begin e := k ;
58382: LD_ADDR_VAR 0 7
58386: PUSH
58387: LD_VAR 0 8
58391: ST_TO_ADDR
// break ;
58392: GO 58396
// end ;
58394: GO 58368
58396: POP
58397: POP
// if e and not UnitGoingToBuilding ( p , e ) then
58398: LD_VAR 0 7
58402: PUSH
58403: LD_VAR 0 5
58407: PPUSH
58408: LD_VAR 0 7
58412: PPUSH
58413: CALL 52341 0 2
58417: NOT
58418: AND
58419: IFFALSE 58478
// begin if IsInUnit ( p ) then
58421: LD_VAR 0 5
58425: PPUSH
58426: CALL_OW 310
58430: IFFALSE 58441
// ComExitBuilding ( p ) ;
58432: LD_VAR 0 5
58436: PPUSH
58437: CALL_OW 122
// ComEnterUnit ( p , e ) ;
58441: LD_VAR 0 5
58445: PPUSH
58446: LD_VAR 0 7
58450: PPUSH
58451: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
58455: LD_VAR 0 5
58459: PPUSH
58460: LD_VAR 0 3
58464: PPUSH
58465: CALL_OW 183
// AddComExitBuilding ( p ) ;
58469: LD_VAR 0 5
58473: PPUSH
58474: CALL_OW 182
// end ; end ;
58478: GO 58326
58480: POP
58481: POP
// end ;
58482: GO 58292
58484: POP
58485: POP
// end ;
58486: GO 58047
58488: POP
58489: POP
// end ;
58490: LD_VAR 0 1
58494: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
58495: LD_INT 0
58497: PPUSH
58498: PPUSH
58499: PPUSH
58500: PPUSH
58501: PPUSH
58502: PPUSH
58503: PPUSH
58504: PPUSH
58505: PPUSH
58506: PPUSH
58507: PPUSH
58508: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
58509: LD_VAR 0 1
58513: NOT
58514: PUSH
58515: LD_EXP 52
58519: PUSH
58520: LD_VAR 0 1
58524: ARRAY
58525: NOT
58526: OR
58527: PUSH
58528: LD_EXP 52
58532: PUSH
58533: LD_VAR 0 1
58537: ARRAY
58538: PPUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 30
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 30
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: PPUSH
58567: CALL_OW 72
58571: NOT
58572: OR
58573: IFFALSE 58577
// exit ;
58575: GO 62080
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58577: LD_ADDR_VAR 0 4
58581: PUSH
58582: LD_EXP 52
58586: PUSH
58587: LD_VAR 0 1
58591: ARRAY
58592: PPUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 25
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 25
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 25
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 25
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 25
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 25
58648: PUSH
58649: LD_INT 8
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 25
58658: PUSH
58659: LD_INT 9
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: PPUSH
58676: CALL_OW 72
58680: ST_TO_ADDR
// if not tmp then
58681: LD_VAR 0 4
58685: NOT
58686: IFFALSE 58690
// exit ;
58688: GO 62080
// for i in tmp do
58690: LD_ADDR_VAR 0 3
58694: PUSH
58695: LD_VAR 0 4
58699: PUSH
58700: FOR_IN
58701: IFFALSE 58732
// if GetTag ( i ) then
58703: LD_VAR 0 3
58707: PPUSH
58708: CALL_OW 110
58712: IFFALSE 58730
// tmp := tmp diff i ;
58714: LD_ADDR_VAR 0 4
58718: PUSH
58719: LD_VAR 0 4
58723: PUSH
58724: LD_VAR 0 3
58728: DIFF
58729: ST_TO_ADDR
58730: GO 58700
58732: POP
58733: POP
// if not tmp then
58734: LD_VAR 0 4
58738: NOT
58739: IFFALSE 58743
// exit ;
58741: GO 62080
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58743: LD_ADDR_VAR 0 5
58747: PUSH
58748: LD_EXP 52
58752: PUSH
58753: LD_VAR 0 1
58757: ARRAY
58758: PPUSH
58759: LD_INT 2
58761: PUSH
58762: LD_INT 25
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 25
58774: PUSH
58775: LD_INT 5
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 25
58784: PUSH
58785: LD_INT 8
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 25
58794: PUSH
58795: LD_INT 9
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: PPUSH
58809: CALL_OW 72
58813: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
58814: LD_ADDR_VAR 0 6
58818: PUSH
58819: LD_EXP 52
58823: PUSH
58824: LD_VAR 0 1
58828: ARRAY
58829: PPUSH
58830: LD_INT 25
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PPUSH
58840: CALL_OW 72
58844: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
58845: LD_ADDR_VAR 0 7
58849: PUSH
58850: LD_EXP 52
58854: PUSH
58855: LD_VAR 0 1
58859: ARRAY
58860: PPUSH
58861: LD_INT 25
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PPUSH
58871: CALL_OW 72
58875: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
58876: LD_ADDR_VAR 0 8
58880: PUSH
58881: LD_EXP 52
58885: PUSH
58886: LD_VAR 0 1
58890: ARRAY
58891: PPUSH
58892: LD_INT 25
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 24
58904: PUSH
58905: LD_INT 251
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PPUSH
58916: CALL_OW 72
58920: ST_TO_ADDR
// if mc_scan [ base ] then
58921: LD_EXP 75
58925: PUSH
58926: LD_VAR 0 1
58930: ARRAY
58931: IFFALSE 59392
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
58933: LD_ADDR_EXP 94
58937: PUSH
58938: LD_EXP 94
58942: PPUSH
58943: LD_VAR 0 1
58947: PPUSH
58948: LD_INT 4
58950: PPUSH
58951: CALL_OW 1
58955: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58956: LD_ADDR_VAR 0 12
58960: PUSH
58961: LD_EXP 52
58965: PUSH
58966: LD_VAR 0 1
58970: ARRAY
58971: PPUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 30
58977: PUSH
58978: LD_INT 4
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 30
58987: PUSH
58988: LD_INT 5
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: PPUSH
59000: CALL_OW 72
59004: ST_TO_ADDR
// if not b then
59005: LD_VAR 0 12
59009: NOT
59010: IFFALSE 59014
// exit ;
59012: GO 62080
// p := [ ] ;
59014: LD_ADDR_VAR 0 11
59018: PUSH
59019: EMPTY
59020: ST_TO_ADDR
// if sci >= 2 then
59021: LD_VAR 0 8
59025: PUSH
59026: LD_INT 2
59028: GREATEREQUAL
59029: IFFALSE 59060
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
59031: LD_ADDR_VAR 0 8
59035: PUSH
59036: LD_VAR 0 8
59040: PUSH
59041: LD_INT 1
59043: ARRAY
59044: PUSH
59045: LD_VAR 0 8
59049: PUSH
59050: LD_INT 2
59052: ARRAY
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: ST_TO_ADDR
59058: GO 59121
// if sci = 1 then
59060: LD_VAR 0 8
59064: PUSH
59065: LD_INT 1
59067: EQUAL
59068: IFFALSE 59089
// sci := [ sci [ 1 ] ] else
59070: LD_ADDR_VAR 0 8
59074: PUSH
59075: LD_VAR 0 8
59079: PUSH
59080: LD_INT 1
59082: ARRAY
59083: PUSH
59084: EMPTY
59085: LIST
59086: ST_TO_ADDR
59087: GO 59121
// if sci = 0 then
59089: LD_VAR 0 8
59093: PUSH
59094: LD_INT 0
59096: EQUAL
59097: IFFALSE 59121
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
59099: LD_ADDR_VAR 0 11
59103: PUSH
59104: LD_VAR 0 4
59108: PPUSH
59109: LD_INT 4
59111: PPUSH
59112: CALL 52204 0 2
59116: PUSH
59117: LD_INT 1
59119: ARRAY
59120: ST_TO_ADDR
// if eng > 4 then
59121: LD_VAR 0 6
59125: PUSH
59126: LD_INT 4
59128: GREATER
59129: IFFALSE 59175
// for i = eng downto 4 do
59131: LD_ADDR_VAR 0 3
59135: PUSH
59136: DOUBLE
59137: LD_VAR 0 6
59141: INC
59142: ST_TO_ADDR
59143: LD_INT 4
59145: PUSH
59146: FOR_DOWNTO
59147: IFFALSE 59173
// eng := eng diff eng [ i ] ;
59149: LD_ADDR_VAR 0 6
59153: PUSH
59154: LD_VAR 0 6
59158: PUSH
59159: LD_VAR 0 6
59163: PUSH
59164: LD_VAR 0 3
59168: ARRAY
59169: DIFF
59170: ST_TO_ADDR
59171: GO 59146
59173: POP
59174: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
59175: LD_ADDR_VAR 0 4
59179: PUSH
59180: LD_VAR 0 4
59184: PUSH
59185: LD_VAR 0 5
59189: PUSH
59190: LD_VAR 0 6
59194: UNION
59195: PUSH
59196: LD_VAR 0 7
59200: UNION
59201: PUSH
59202: LD_VAR 0 8
59206: UNION
59207: DIFF
59208: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
59209: LD_ADDR_VAR 0 13
59213: PUSH
59214: LD_EXP 52
59218: PUSH
59219: LD_VAR 0 1
59223: ARRAY
59224: PPUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 30
59230: PUSH
59231: LD_INT 32
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 30
59240: PUSH
59241: LD_INT 31
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: PPUSH
59253: CALL_OW 72
59257: PUSH
59258: LD_EXP 52
59262: PUSH
59263: LD_VAR 0 1
59267: ARRAY
59268: PPUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 30
59274: PUSH
59275: LD_INT 4
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 30
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: PPUSH
59297: CALL_OW 72
59301: PUSH
59302: LD_INT 6
59304: MUL
59305: PLUS
59306: ST_TO_ADDR
// if bcount < tmp then
59307: LD_VAR 0 13
59311: PUSH
59312: LD_VAR 0 4
59316: LESS
59317: IFFALSE 59363
// for i = tmp downto bcount do
59319: LD_ADDR_VAR 0 3
59323: PUSH
59324: DOUBLE
59325: LD_VAR 0 4
59329: INC
59330: ST_TO_ADDR
59331: LD_VAR 0 13
59335: PUSH
59336: FOR_DOWNTO
59337: IFFALSE 59361
// tmp := Delete ( tmp , tmp ) ;
59339: LD_ADDR_VAR 0 4
59343: PUSH
59344: LD_VAR 0 4
59348: PPUSH
59349: LD_VAR 0 4
59353: PPUSH
59354: CALL_OW 3
59358: ST_TO_ADDR
59359: GO 59336
59361: POP
59362: POP
// result := [ tmp , 0 , 0 , p ] ;
59363: LD_ADDR_VAR 0 2
59367: PUSH
59368: LD_VAR 0 4
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_VAR 0 11
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// exit ;
59390: GO 62080
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59392: LD_EXP 52
59396: PUSH
59397: LD_VAR 0 1
59401: ARRAY
59402: PPUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 30
59408: PUSH
59409: LD_INT 6
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 30
59418: PUSH
59419: LD_INT 7
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 30
59428: PUSH
59429: LD_INT 8
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: PPUSH
59442: CALL_OW 72
59446: NOT
59447: PUSH
59448: LD_EXP 52
59452: PUSH
59453: LD_VAR 0 1
59457: ARRAY
59458: PPUSH
59459: LD_INT 30
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PPUSH
59469: CALL_OW 72
59473: NOT
59474: AND
59475: IFFALSE 59547
// begin if eng = tmp then
59477: LD_VAR 0 6
59481: PUSH
59482: LD_VAR 0 4
59486: EQUAL
59487: IFFALSE 59491
// exit ;
59489: GO 62080
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
59491: LD_ADDR_EXP 94
59495: PUSH
59496: LD_EXP 94
59500: PPUSH
59501: LD_VAR 0 1
59505: PPUSH
59506: LD_INT 1
59508: PPUSH
59509: CALL_OW 1
59513: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
59514: LD_ADDR_VAR 0 2
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_VAR 0 4
59526: PUSH
59527: LD_VAR 0 6
59531: DIFF
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// exit ;
59545: GO 62080
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59547: LD_EXP 79
59551: PUSH
59552: LD_EXP 78
59556: PUSH
59557: LD_VAR 0 1
59561: ARRAY
59562: ARRAY
59563: PUSH
59564: LD_EXP 52
59568: PUSH
59569: LD_VAR 0 1
59573: ARRAY
59574: PPUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 30
59580: PUSH
59581: LD_INT 6
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 30
59590: PUSH
59591: LD_INT 7
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 30
59600: PUSH
59601: LD_INT 8
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: PPUSH
59614: CALL_OW 72
59618: AND
59619: PUSH
59620: LD_EXP 52
59624: PUSH
59625: LD_VAR 0 1
59629: ARRAY
59630: PPUSH
59631: LD_INT 30
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PPUSH
59641: CALL_OW 72
59645: NOT
59646: AND
59647: IFFALSE 59861
// begin if sci >= 6 then
59649: LD_VAR 0 8
59653: PUSH
59654: LD_INT 6
59656: GREATEREQUAL
59657: IFFALSE 59661
// exit ;
59659: GO 62080
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59661: LD_ADDR_EXP 94
59665: PUSH
59666: LD_EXP 94
59670: PPUSH
59671: LD_VAR 0 1
59675: PPUSH
59676: LD_INT 2
59678: PPUSH
59679: CALL_OW 1
59683: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59684: LD_ADDR_VAR 0 9
59688: PUSH
59689: LD_VAR 0 4
59693: PUSH
59694: LD_VAR 0 8
59698: DIFF
59699: PPUSH
59700: LD_INT 4
59702: PPUSH
59703: CALL 52204 0 2
59707: ST_TO_ADDR
// p := [ ] ;
59708: LD_ADDR_VAR 0 11
59712: PUSH
59713: EMPTY
59714: ST_TO_ADDR
// if sci < 6 and sort > 6 then
59715: LD_VAR 0 8
59719: PUSH
59720: LD_INT 6
59722: LESS
59723: PUSH
59724: LD_VAR 0 9
59728: PUSH
59729: LD_INT 6
59731: GREATER
59732: AND
59733: IFFALSE 59814
// begin for i = 1 to 6 - sci do
59735: LD_ADDR_VAR 0 3
59739: PUSH
59740: DOUBLE
59741: LD_INT 1
59743: DEC
59744: ST_TO_ADDR
59745: LD_INT 6
59747: PUSH
59748: LD_VAR 0 8
59752: MINUS
59753: PUSH
59754: FOR_TO
59755: IFFALSE 59810
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
59757: LD_ADDR_VAR 0 11
59761: PUSH
59762: LD_VAR 0 11
59766: PPUSH
59767: LD_VAR 0 11
59771: PUSH
59772: LD_INT 1
59774: PLUS
59775: PPUSH
59776: LD_VAR 0 9
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: PPUSH
59785: CALL_OW 2
59789: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
59790: LD_ADDR_VAR 0 9
59794: PUSH
59795: LD_VAR 0 9
59799: PPUSH
59800: LD_INT 1
59802: PPUSH
59803: CALL_OW 3
59807: ST_TO_ADDR
// end ;
59808: GO 59754
59810: POP
59811: POP
// end else
59812: GO 59834
// if sort then
59814: LD_VAR 0 9
59818: IFFALSE 59834
// p := sort [ 1 ] ;
59820: LD_ADDR_VAR 0 11
59824: PUSH
59825: LD_VAR 0 9
59829: PUSH
59830: LD_INT 1
59832: ARRAY
59833: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
59834: LD_ADDR_VAR 0 2
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_VAR 0 11
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: ST_TO_ADDR
// exit ;
59859: GO 62080
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59861: LD_EXP 79
59865: PUSH
59866: LD_EXP 78
59870: PUSH
59871: LD_VAR 0 1
59875: ARRAY
59876: ARRAY
59877: PUSH
59878: LD_EXP 52
59882: PUSH
59883: LD_VAR 0 1
59887: ARRAY
59888: PPUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 30
59894: PUSH
59895: LD_INT 6
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 30
59904: PUSH
59905: LD_INT 7
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 30
59914: PUSH
59915: LD_INT 8
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: PPUSH
59928: CALL_OW 72
59932: AND
59933: PUSH
59934: LD_EXP 52
59938: PUSH
59939: LD_VAR 0 1
59943: ARRAY
59944: PPUSH
59945: LD_INT 30
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PPUSH
59955: CALL_OW 72
59959: AND
59960: IFFALSE 60694
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
59962: LD_ADDR_EXP 94
59966: PUSH
59967: LD_EXP 94
59971: PPUSH
59972: LD_VAR 0 1
59976: PPUSH
59977: LD_INT 3
59979: PPUSH
59980: CALL_OW 1
59984: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59985: LD_ADDR_VAR 0 2
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// if not eng then
60008: LD_VAR 0 6
60012: NOT
60013: IFFALSE 60076
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
60015: LD_ADDR_VAR 0 11
60019: PUSH
60020: LD_VAR 0 4
60024: PPUSH
60025: LD_INT 2
60027: PPUSH
60028: CALL 52204 0 2
60032: PUSH
60033: LD_INT 1
60035: ARRAY
60036: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: LD_VAR 0 2
60046: PPUSH
60047: LD_INT 2
60049: PPUSH
60050: LD_VAR 0 11
60054: PPUSH
60055: CALL_OW 1
60059: ST_TO_ADDR
// tmp := tmp diff p ;
60060: LD_ADDR_VAR 0 4
60064: PUSH
60065: LD_VAR 0 4
60069: PUSH
60070: LD_VAR 0 11
60074: DIFF
60075: ST_TO_ADDR
// end ; if tmp and sci < 6 then
60076: LD_VAR 0 4
60080: PUSH
60081: LD_VAR 0 8
60085: PUSH
60086: LD_INT 6
60088: LESS
60089: AND
60090: IFFALSE 60278
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
60092: LD_ADDR_VAR 0 9
60096: PUSH
60097: LD_VAR 0 4
60101: PUSH
60102: LD_VAR 0 8
60106: PUSH
60107: LD_VAR 0 7
60111: UNION
60112: DIFF
60113: PPUSH
60114: LD_INT 4
60116: PPUSH
60117: CALL 52204 0 2
60121: ST_TO_ADDR
// p := [ ] ;
60122: LD_ADDR_VAR 0 11
60126: PUSH
60127: EMPTY
60128: ST_TO_ADDR
// if sort then
60129: LD_VAR 0 9
60133: IFFALSE 60249
// for i = 1 to 6 - sci do
60135: LD_ADDR_VAR 0 3
60139: PUSH
60140: DOUBLE
60141: LD_INT 1
60143: DEC
60144: ST_TO_ADDR
60145: LD_INT 6
60147: PUSH
60148: LD_VAR 0 8
60152: MINUS
60153: PUSH
60154: FOR_TO
60155: IFFALSE 60247
// begin if i = sort then
60157: LD_VAR 0 3
60161: PUSH
60162: LD_VAR 0 9
60166: EQUAL
60167: IFFALSE 60171
// break ;
60169: GO 60247
// if GetClass ( i ) = 4 then
60171: LD_VAR 0 3
60175: PPUSH
60176: CALL_OW 257
60180: PUSH
60181: LD_INT 4
60183: EQUAL
60184: IFFALSE 60188
// continue ;
60186: GO 60154
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60188: LD_ADDR_VAR 0 11
60192: PUSH
60193: LD_VAR 0 11
60197: PPUSH
60198: LD_VAR 0 11
60202: PUSH
60203: LD_INT 1
60205: PLUS
60206: PPUSH
60207: LD_VAR 0 9
60211: PUSH
60212: LD_VAR 0 3
60216: ARRAY
60217: PPUSH
60218: CALL_OW 2
60222: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60223: LD_ADDR_VAR 0 4
60227: PUSH
60228: LD_VAR 0 4
60232: PUSH
60233: LD_VAR 0 9
60237: PUSH
60238: LD_VAR 0 3
60242: ARRAY
60243: DIFF
60244: ST_TO_ADDR
// end ;
60245: GO 60154
60247: POP
60248: POP
// if p then
60249: LD_VAR 0 11
60253: IFFALSE 60278
// result := Replace ( result , 4 , p ) ;
60255: LD_ADDR_VAR 0 2
60259: PUSH
60260: LD_VAR 0 2
60264: PPUSH
60265: LD_INT 4
60267: PPUSH
60268: LD_VAR 0 11
60272: PPUSH
60273: CALL_OW 1
60277: ST_TO_ADDR
// end ; if tmp and mech < 6 then
60278: LD_VAR 0 4
60282: PUSH
60283: LD_VAR 0 7
60287: PUSH
60288: LD_INT 6
60290: LESS
60291: AND
60292: IFFALSE 60480
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60294: LD_ADDR_VAR 0 9
60298: PUSH
60299: LD_VAR 0 4
60303: PUSH
60304: LD_VAR 0 8
60308: PUSH
60309: LD_VAR 0 7
60313: UNION
60314: DIFF
60315: PPUSH
60316: LD_INT 3
60318: PPUSH
60319: CALL 52204 0 2
60323: ST_TO_ADDR
// p := [ ] ;
60324: LD_ADDR_VAR 0 11
60328: PUSH
60329: EMPTY
60330: ST_TO_ADDR
// if sort then
60331: LD_VAR 0 9
60335: IFFALSE 60451
// for i = 1 to 6 - mech do
60337: LD_ADDR_VAR 0 3
60341: PUSH
60342: DOUBLE
60343: LD_INT 1
60345: DEC
60346: ST_TO_ADDR
60347: LD_INT 6
60349: PUSH
60350: LD_VAR 0 7
60354: MINUS
60355: PUSH
60356: FOR_TO
60357: IFFALSE 60449
// begin if i = sort then
60359: LD_VAR 0 3
60363: PUSH
60364: LD_VAR 0 9
60368: EQUAL
60369: IFFALSE 60373
// break ;
60371: GO 60449
// if GetClass ( i ) = 3 then
60373: LD_VAR 0 3
60377: PPUSH
60378: CALL_OW 257
60382: PUSH
60383: LD_INT 3
60385: EQUAL
60386: IFFALSE 60390
// continue ;
60388: GO 60356
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60390: LD_ADDR_VAR 0 11
60394: PUSH
60395: LD_VAR 0 11
60399: PPUSH
60400: LD_VAR 0 11
60404: PUSH
60405: LD_INT 1
60407: PLUS
60408: PPUSH
60409: LD_VAR 0 9
60413: PUSH
60414: LD_VAR 0 3
60418: ARRAY
60419: PPUSH
60420: CALL_OW 2
60424: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60425: LD_ADDR_VAR 0 4
60429: PUSH
60430: LD_VAR 0 4
60434: PUSH
60435: LD_VAR 0 9
60439: PUSH
60440: LD_VAR 0 3
60444: ARRAY
60445: DIFF
60446: ST_TO_ADDR
// end ;
60447: GO 60356
60449: POP
60450: POP
// if p then
60451: LD_VAR 0 11
60455: IFFALSE 60480
// result := Replace ( result , 3 , p ) ;
60457: LD_ADDR_VAR 0 2
60461: PUSH
60462: LD_VAR 0 2
60466: PPUSH
60467: LD_INT 3
60469: PPUSH
60470: LD_VAR 0 11
60474: PPUSH
60475: CALL_OW 1
60479: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
60480: LD_VAR 0 4
60484: PUSH
60485: LD_INT 6
60487: GREATER
60488: PUSH
60489: LD_VAR 0 6
60493: PUSH
60494: LD_INT 6
60496: LESS
60497: AND
60498: IFFALSE 60692
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60500: LD_ADDR_VAR 0 9
60504: PUSH
60505: LD_VAR 0 4
60509: PUSH
60510: LD_VAR 0 8
60514: PUSH
60515: LD_VAR 0 7
60519: UNION
60520: PUSH
60521: LD_VAR 0 6
60525: UNION
60526: DIFF
60527: PPUSH
60528: LD_INT 2
60530: PPUSH
60531: CALL 52204 0 2
60535: ST_TO_ADDR
// p := [ ] ;
60536: LD_ADDR_VAR 0 11
60540: PUSH
60541: EMPTY
60542: ST_TO_ADDR
// if sort then
60543: LD_VAR 0 9
60547: IFFALSE 60663
// for i = 1 to 6 - eng do
60549: LD_ADDR_VAR 0 3
60553: PUSH
60554: DOUBLE
60555: LD_INT 1
60557: DEC
60558: ST_TO_ADDR
60559: LD_INT 6
60561: PUSH
60562: LD_VAR 0 6
60566: MINUS
60567: PUSH
60568: FOR_TO
60569: IFFALSE 60661
// begin if i = sort then
60571: LD_VAR 0 3
60575: PUSH
60576: LD_VAR 0 9
60580: EQUAL
60581: IFFALSE 60585
// break ;
60583: GO 60661
// if GetClass ( i ) = 2 then
60585: LD_VAR 0 3
60589: PPUSH
60590: CALL_OW 257
60594: PUSH
60595: LD_INT 2
60597: EQUAL
60598: IFFALSE 60602
// continue ;
60600: GO 60568
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60602: LD_ADDR_VAR 0 11
60606: PUSH
60607: LD_VAR 0 11
60611: PPUSH
60612: LD_VAR 0 11
60616: PUSH
60617: LD_INT 1
60619: PLUS
60620: PPUSH
60621: LD_VAR 0 9
60625: PUSH
60626: LD_VAR 0 3
60630: ARRAY
60631: PPUSH
60632: CALL_OW 2
60636: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60637: LD_ADDR_VAR 0 4
60641: PUSH
60642: LD_VAR 0 4
60646: PUSH
60647: LD_VAR 0 9
60651: PUSH
60652: LD_VAR 0 3
60656: ARRAY
60657: DIFF
60658: ST_TO_ADDR
// end ;
60659: GO 60568
60661: POP
60662: POP
// if p then
60663: LD_VAR 0 11
60667: IFFALSE 60692
// result := Replace ( result , 2 , p ) ;
60669: LD_ADDR_VAR 0 2
60673: PUSH
60674: LD_VAR 0 2
60678: PPUSH
60679: LD_INT 2
60681: PPUSH
60682: LD_VAR 0 11
60686: PPUSH
60687: CALL_OW 1
60691: ST_TO_ADDR
// end ; exit ;
60692: GO 62080
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
60694: LD_EXP 79
60698: PUSH
60699: LD_EXP 78
60703: PUSH
60704: LD_VAR 0 1
60708: ARRAY
60709: ARRAY
60710: NOT
60711: PUSH
60712: LD_EXP 52
60716: PUSH
60717: LD_VAR 0 1
60721: ARRAY
60722: PPUSH
60723: LD_INT 30
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PPUSH
60733: CALL_OW 72
60737: AND
60738: PUSH
60739: LD_EXP 57
60743: PUSH
60744: LD_VAR 0 1
60748: ARRAY
60749: AND
60750: IFFALSE 61358
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
60752: LD_ADDR_EXP 94
60756: PUSH
60757: LD_EXP 94
60761: PPUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: LD_INT 5
60769: PPUSH
60770: CALL_OW 1
60774: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60775: LD_ADDR_VAR 0 2
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// if sci > 1 then
60798: LD_VAR 0 8
60802: PUSH
60803: LD_INT 1
60805: GREATER
60806: IFFALSE 60834
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
60808: LD_ADDR_VAR 0 4
60812: PUSH
60813: LD_VAR 0 4
60817: PUSH
60818: LD_VAR 0 8
60822: PUSH
60823: LD_VAR 0 8
60827: PUSH
60828: LD_INT 1
60830: ARRAY
60831: DIFF
60832: DIFF
60833: ST_TO_ADDR
// if tmp and not sci then
60834: LD_VAR 0 4
60838: PUSH
60839: LD_VAR 0 8
60843: NOT
60844: AND
60845: IFFALSE 60914
// begin sort := SortBySkill ( tmp , 4 ) ;
60847: LD_ADDR_VAR 0 9
60851: PUSH
60852: LD_VAR 0 4
60856: PPUSH
60857: LD_INT 4
60859: PPUSH
60860: CALL 52204 0 2
60864: ST_TO_ADDR
// if sort then
60865: LD_VAR 0 9
60869: IFFALSE 60885
// p := sort [ 1 ] ;
60871: LD_ADDR_VAR 0 11
60875: PUSH
60876: LD_VAR 0 9
60880: PUSH
60881: LD_INT 1
60883: ARRAY
60884: ST_TO_ADDR
// if p then
60885: LD_VAR 0 11
60889: IFFALSE 60914
// result := Replace ( result , 4 , p ) ;
60891: LD_ADDR_VAR 0 2
60895: PUSH
60896: LD_VAR 0 2
60900: PPUSH
60901: LD_INT 4
60903: PPUSH
60904: LD_VAR 0 11
60908: PPUSH
60909: CALL_OW 1
60913: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60914: LD_ADDR_VAR 0 4
60918: PUSH
60919: LD_VAR 0 4
60923: PUSH
60924: LD_VAR 0 7
60928: DIFF
60929: ST_TO_ADDR
// if tmp and mech < 6 then
60930: LD_VAR 0 4
60934: PUSH
60935: LD_VAR 0 7
60939: PUSH
60940: LD_INT 6
60942: LESS
60943: AND
60944: IFFALSE 61132
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60946: LD_ADDR_VAR 0 9
60950: PUSH
60951: LD_VAR 0 4
60955: PUSH
60956: LD_VAR 0 8
60960: PUSH
60961: LD_VAR 0 7
60965: UNION
60966: DIFF
60967: PPUSH
60968: LD_INT 3
60970: PPUSH
60971: CALL 52204 0 2
60975: ST_TO_ADDR
// p := [ ] ;
60976: LD_ADDR_VAR 0 11
60980: PUSH
60981: EMPTY
60982: ST_TO_ADDR
// if sort then
60983: LD_VAR 0 9
60987: IFFALSE 61103
// for i = 1 to 6 - mech do
60989: LD_ADDR_VAR 0 3
60993: PUSH
60994: DOUBLE
60995: LD_INT 1
60997: DEC
60998: ST_TO_ADDR
60999: LD_INT 6
61001: PUSH
61002: LD_VAR 0 7
61006: MINUS
61007: PUSH
61008: FOR_TO
61009: IFFALSE 61101
// begin if i = sort then
61011: LD_VAR 0 3
61015: PUSH
61016: LD_VAR 0 9
61020: EQUAL
61021: IFFALSE 61025
// break ;
61023: GO 61101
// if GetClass ( i ) = 3 then
61025: LD_VAR 0 3
61029: PPUSH
61030: CALL_OW 257
61034: PUSH
61035: LD_INT 3
61037: EQUAL
61038: IFFALSE 61042
// continue ;
61040: GO 61008
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61042: LD_ADDR_VAR 0 11
61046: PUSH
61047: LD_VAR 0 11
61051: PPUSH
61052: LD_VAR 0 11
61056: PUSH
61057: LD_INT 1
61059: PLUS
61060: PPUSH
61061: LD_VAR 0 9
61065: PUSH
61066: LD_VAR 0 3
61070: ARRAY
61071: PPUSH
61072: CALL_OW 2
61076: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61077: LD_ADDR_VAR 0 4
61081: PUSH
61082: LD_VAR 0 4
61086: PUSH
61087: LD_VAR 0 9
61091: PUSH
61092: LD_VAR 0 3
61096: ARRAY
61097: DIFF
61098: ST_TO_ADDR
// end ;
61099: GO 61008
61101: POP
61102: POP
// if p then
61103: LD_VAR 0 11
61107: IFFALSE 61132
// result := Replace ( result , 3 , p ) ;
61109: LD_ADDR_VAR 0 2
61113: PUSH
61114: LD_VAR 0 2
61118: PPUSH
61119: LD_INT 3
61121: PPUSH
61122: LD_VAR 0 11
61126: PPUSH
61127: CALL_OW 1
61131: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61132: LD_ADDR_VAR 0 4
61136: PUSH
61137: LD_VAR 0 4
61141: PUSH
61142: LD_VAR 0 6
61146: DIFF
61147: ST_TO_ADDR
// if tmp and eng < 6 then
61148: LD_VAR 0 4
61152: PUSH
61153: LD_VAR 0 6
61157: PUSH
61158: LD_INT 6
61160: LESS
61161: AND
61162: IFFALSE 61356
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61164: LD_ADDR_VAR 0 9
61168: PUSH
61169: LD_VAR 0 4
61173: PUSH
61174: LD_VAR 0 8
61178: PUSH
61179: LD_VAR 0 7
61183: UNION
61184: PUSH
61185: LD_VAR 0 6
61189: UNION
61190: DIFF
61191: PPUSH
61192: LD_INT 2
61194: PPUSH
61195: CALL 52204 0 2
61199: ST_TO_ADDR
// p := [ ] ;
61200: LD_ADDR_VAR 0 11
61204: PUSH
61205: EMPTY
61206: ST_TO_ADDR
// if sort then
61207: LD_VAR 0 9
61211: IFFALSE 61327
// for i = 1 to 6 - eng do
61213: LD_ADDR_VAR 0 3
61217: PUSH
61218: DOUBLE
61219: LD_INT 1
61221: DEC
61222: ST_TO_ADDR
61223: LD_INT 6
61225: PUSH
61226: LD_VAR 0 6
61230: MINUS
61231: PUSH
61232: FOR_TO
61233: IFFALSE 61325
// begin if i = sort then
61235: LD_VAR 0 3
61239: PUSH
61240: LD_VAR 0 9
61244: EQUAL
61245: IFFALSE 61249
// break ;
61247: GO 61325
// if GetClass ( i ) = 2 then
61249: LD_VAR 0 3
61253: PPUSH
61254: CALL_OW 257
61258: PUSH
61259: LD_INT 2
61261: EQUAL
61262: IFFALSE 61266
// continue ;
61264: GO 61232
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61266: LD_ADDR_VAR 0 11
61270: PUSH
61271: LD_VAR 0 11
61275: PPUSH
61276: LD_VAR 0 11
61280: PUSH
61281: LD_INT 1
61283: PLUS
61284: PPUSH
61285: LD_VAR 0 9
61289: PUSH
61290: LD_VAR 0 3
61294: ARRAY
61295: PPUSH
61296: CALL_OW 2
61300: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61301: LD_ADDR_VAR 0 4
61305: PUSH
61306: LD_VAR 0 4
61310: PUSH
61311: LD_VAR 0 9
61315: PUSH
61316: LD_VAR 0 3
61320: ARRAY
61321: DIFF
61322: ST_TO_ADDR
// end ;
61323: GO 61232
61325: POP
61326: POP
// if p then
61327: LD_VAR 0 11
61331: IFFALSE 61356
// result := Replace ( result , 2 , p ) ;
61333: LD_ADDR_VAR 0 2
61337: PUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: LD_INT 2
61345: PPUSH
61346: LD_VAR 0 11
61350: PPUSH
61351: CALL_OW 1
61355: ST_TO_ADDR
// end ; exit ;
61356: GO 62080
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
61358: LD_EXP 79
61362: PUSH
61363: LD_EXP 78
61367: PUSH
61368: LD_VAR 0 1
61372: ARRAY
61373: ARRAY
61374: NOT
61375: PUSH
61376: LD_EXP 52
61380: PUSH
61381: LD_VAR 0 1
61385: ARRAY
61386: PPUSH
61387: LD_INT 30
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PPUSH
61397: CALL_OW 72
61401: AND
61402: PUSH
61403: LD_EXP 57
61407: PUSH
61408: LD_VAR 0 1
61412: ARRAY
61413: NOT
61414: AND
61415: IFFALSE 62080
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
61417: LD_ADDR_EXP 94
61421: PUSH
61422: LD_EXP 94
61426: PPUSH
61427: LD_VAR 0 1
61431: PPUSH
61432: LD_INT 6
61434: PPUSH
61435: CALL_OW 1
61439: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61440: LD_ADDR_VAR 0 2
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: ST_TO_ADDR
// if sci >= 1 then
61463: LD_VAR 0 8
61467: PUSH
61468: LD_INT 1
61470: GREATEREQUAL
61471: IFFALSE 61493
// tmp := tmp diff sci [ 1 ] ;
61473: LD_ADDR_VAR 0 4
61477: PUSH
61478: LD_VAR 0 4
61482: PUSH
61483: LD_VAR 0 8
61487: PUSH
61488: LD_INT 1
61490: ARRAY
61491: DIFF
61492: ST_TO_ADDR
// if tmp and not sci then
61493: LD_VAR 0 4
61497: PUSH
61498: LD_VAR 0 8
61502: NOT
61503: AND
61504: IFFALSE 61573
// begin sort := SortBySkill ( tmp , 4 ) ;
61506: LD_ADDR_VAR 0 9
61510: PUSH
61511: LD_VAR 0 4
61515: PPUSH
61516: LD_INT 4
61518: PPUSH
61519: CALL 52204 0 2
61523: ST_TO_ADDR
// if sort then
61524: LD_VAR 0 9
61528: IFFALSE 61544
// p := sort [ 1 ] ;
61530: LD_ADDR_VAR 0 11
61534: PUSH
61535: LD_VAR 0 9
61539: PUSH
61540: LD_INT 1
61542: ARRAY
61543: ST_TO_ADDR
// if p then
61544: LD_VAR 0 11
61548: IFFALSE 61573
// result := Replace ( result , 4 , p ) ;
61550: LD_ADDR_VAR 0 2
61554: PUSH
61555: LD_VAR 0 2
61559: PPUSH
61560: LD_INT 4
61562: PPUSH
61563: LD_VAR 0 11
61567: PPUSH
61568: CALL_OW 1
61572: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61573: LD_ADDR_VAR 0 4
61577: PUSH
61578: LD_VAR 0 4
61582: PUSH
61583: LD_VAR 0 7
61587: DIFF
61588: ST_TO_ADDR
// if tmp and mech < 6 then
61589: LD_VAR 0 4
61593: PUSH
61594: LD_VAR 0 7
61598: PUSH
61599: LD_INT 6
61601: LESS
61602: AND
61603: IFFALSE 61785
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61605: LD_ADDR_VAR 0 9
61609: PUSH
61610: LD_VAR 0 4
61614: PUSH
61615: LD_VAR 0 7
61619: DIFF
61620: PPUSH
61621: LD_INT 3
61623: PPUSH
61624: CALL 52204 0 2
61628: ST_TO_ADDR
// p := [ ] ;
61629: LD_ADDR_VAR 0 11
61633: PUSH
61634: EMPTY
61635: ST_TO_ADDR
// if sort then
61636: LD_VAR 0 9
61640: IFFALSE 61756
// for i = 1 to 6 - mech do
61642: LD_ADDR_VAR 0 3
61646: PUSH
61647: DOUBLE
61648: LD_INT 1
61650: DEC
61651: ST_TO_ADDR
61652: LD_INT 6
61654: PUSH
61655: LD_VAR 0 7
61659: MINUS
61660: PUSH
61661: FOR_TO
61662: IFFALSE 61754
// begin if i = sort then
61664: LD_VAR 0 3
61668: PUSH
61669: LD_VAR 0 9
61673: EQUAL
61674: IFFALSE 61678
// break ;
61676: GO 61754
// if GetClass ( i ) = 3 then
61678: LD_VAR 0 3
61682: PPUSH
61683: CALL_OW 257
61687: PUSH
61688: LD_INT 3
61690: EQUAL
61691: IFFALSE 61695
// continue ;
61693: GO 61661
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61695: LD_ADDR_VAR 0 11
61699: PUSH
61700: LD_VAR 0 11
61704: PPUSH
61705: LD_VAR 0 11
61709: PUSH
61710: LD_INT 1
61712: PLUS
61713: PPUSH
61714: LD_VAR 0 9
61718: PUSH
61719: LD_VAR 0 3
61723: ARRAY
61724: PPUSH
61725: CALL_OW 2
61729: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61730: LD_ADDR_VAR 0 4
61734: PUSH
61735: LD_VAR 0 4
61739: PUSH
61740: LD_VAR 0 9
61744: PUSH
61745: LD_VAR 0 3
61749: ARRAY
61750: DIFF
61751: ST_TO_ADDR
// end ;
61752: GO 61661
61754: POP
61755: POP
// if p then
61756: LD_VAR 0 11
61760: IFFALSE 61785
// result := Replace ( result , 3 , p ) ;
61762: LD_ADDR_VAR 0 2
61766: PUSH
61767: LD_VAR 0 2
61771: PPUSH
61772: LD_INT 3
61774: PPUSH
61775: LD_VAR 0 11
61779: PPUSH
61780: CALL_OW 1
61784: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61785: LD_ADDR_VAR 0 4
61789: PUSH
61790: LD_VAR 0 4
61794: PUSH
61795: LD_VAR 0 6
61799: DIFF
61800: ST_TO_ADDR
// if tmp and eng < 4 then
61801: LD_VAR 0 4
61805: PUSH
61806: LD_VAR 0 6
61810: PUSH
61811: LD_INT 4
61813: LESS
61814: AND
61815: IFFALSE 62005
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
61817: LD_ADDR_VAR 0 9
61821: PUSH
61822: LD_VAR 0 4
61826: PUSH
61827: LD_VAR 0 7
61831: PUSH
61832: LD_VAR 0 6
61836: UNION
61837: DIFF
61838: PPUSH
61839: LD_INT 2
61841: PPUSH
61842: CALL 52204 0 2
61846: ST_TO_ADDR
// p := [ ] ;
61847: LD_ADDR_VAR 0 11
61851: PUSH
61852: EMPTY
61853: ST_TO_ADDR
// if sort then
61854: LD_VAR 0 9
61858: IFFALSE 61974
// for i = 1 to 4 - eng do
61860: LD_ADDR_VAR 0 3
61864: PUSH
61865: DOUBLE
61866: LD_INT 1
61868: DEC
61869: ST_TO_ADDR
61870: LD_INT 4
61872: PUSH
61873: LD_VAR 0 6
61877: MINUS
61878: PUSH
61879: FOR_TO
61880: IFFALSE 61972
// begin if i = sort then
61882: LD_VAR 0 3
61886: PUSH
61887: LD_VAR 0 9
61891: EQUAL
61892: IFFALSE 61896
// break ;
61894: GO 61972
// if GetClass ( i ) = 2 then
61896: LD_VAR 0 3
61900: PPUSH
61901: CALL_OW 257
61905: PUSH
61906: LD_INT 2
61908: EQUAL
61909: IFFALSE 61913
// continue ;
61911: GO 61879
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61913: LD_ADDR_VAR 0 11
61917: PUSH
61918: LD_VAR 0 11
61922: PPUSH
61923: LD_VAR 0 11
61927: PUSH
61928: LD_INT 1
61930: PLUS
61931: PPUSH
61932: LD_VAR 0 9
61936: PUSH
61937: LD_VAR 0 3
61941: ARRAY
61942: PPUSH
61943: CALL_OW 2
61947: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61948: LD_ADDR_VAR 0 4
61952: PUSH
61953: LD_VAR 0 4
61957: PUSH
61958: LD_VAR 0 9
61962: PUSH
61963: LD_VAR 0 3
61967: ARRAY
61968: DIFF
61969: ST_TO_ADDR
// end ;
61970: GO 61879
61972: POP
61973: POP
// if p then
61974: LD_VAR 0 11
61978: IFFALSE 62003
// result := Replace ( result , 2 , p ) ;
61980: LD_ADDR_VAR 0 2
61984: PUSH
61985: LD_VAR 0 2
61989: PPUSH
61990: LD_INT 2
61992: PPUSH
61993: LD_VAR 0 11
61997: PPUSH
61998: CALL_OW 1
62002: ST_TO_ADDR
// end else
62003: GO 62049
// for i = eng downto 5 do
62005: LD_ADDR_VAR 0 3
62009: PUSH
62010: DOUBLE
62011: LD_VAR 0 6
62015: INC
62016: ST_TO_ADDR
62017: LD_INT 5
62019: PUSH
62020: FOR_DOWNTO
62021: IFFALSE 62047
// tmp := tmp union eng [ i ] ;
62023: LD_ADDR_VAR 0 4
62027: PUSH
62028: LD_VAR 0 4
62032: PUSH
62033: LD_VAR 0 6
62037: PUSH
62038: LD_VAR 0 3
62042: ARRAY
62043: UNION
62044: ST_TO_ADDR
62045: GO 62020
62047: POP
62048: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
62049: LD_ADDR_VAR 0 2
62053: PUSH
62054: LD_VAR 0 2
62058: PPUSH
62059: LD_INT 1
62061: PPUSH
62062: LD_VAR 0 4
62066: PUSH
62067: LD_VAR 0 5
62071: DIFF
62072: PPUSH
62073: CALL_OW 1
62077: ST_TO_ADDR
// exit ;
62078: GO 62080
// end ; end ;
62080: LD_VAR 0 2
62084: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
62085: LD_INT 0
62087: PPUSH
62088: PPUSH
62089: PPUSH
// if not mc_bases then
62090: LD_EXP 52
62094: NOT
62095: IFFALSE 62099
// exit ;
62097: GO 62205
// for i = 1 to mc_bases do
62099: LD_ADDR_VAR 0 2
62103: PUSH
62104: DOUBLE
62105: LD_INT 1
62107: DEC
62108: ST_TO_ADDR
62109: LD_EXP 52
62113: PUSH
62114: FOR_TO
62115: IFFALSE 62196
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
62117: LD_ADDR_VAR 0 3
62121: PUSH
62122: LD_EXP 52
62126: PUSH
62127: LD_VAR 0 2
62131: ARRAY
62132: PPUSH
62133: LD_INT 21
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: LD_INT 24
62148: PUSH
62149: LD_INT 1000
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PPUSH
62164: CALL_OW 72
62168: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
62169: LD_ADDR_EXP 53
62173: PUSH
62174: LD_EXP 53
62178: PPUSH
62179: LD_VAR 0 2
62183: PPUSH
62184: LD_VAR 0 3
62188: PPUSH
62189: CALL_OW 1
62193: ST_TO_ADDR
// end ;
62194: GO 62114
62196: POP
62197: POP
// RaiseSailEvent ( 101 ) ;
62198: LD_INT 101
62200: PPUSH
62201: CALL_OW 427
// end ;
62205: LD_VAR 0 1
62209: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
62210: LD_INT 0
62212: PPUSH
62213: PPUSH
62214: PPUSH
62215: PPUSH
62216: PPUSH
62217: PPUSH
62218: PPUSH
// if not mc_bases then
62219: LD_EXP 52
62223: NOT
62224: IFFALSE 62228
// exit ;
62226: GO 62801
// for i = 1 to mc_bases do
62228: LD_ADDR_VAR 0 2
62232: PUSH
62233: DOUBLE
62234: LD_INT 1
62236: DEC
62237: ST_TO_ADDR
62238: LD_EXP 52
62242: PUSH
62243: FOR_TO
62244: IFFALSE 62792
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
62246: LD_ADDR_VAR 0 5
62250: PUSH
62251: LD_EXP 52
62255: PUSH
62256: LD_VAR 0 2
62260: ARRAY
62261: PUSH
62262: LD_EXP 81
62266: PUSH
62267: LD_VAR 0 2
62271: ARRAY
62272: UNION
62273: PPUSH
62274: LD_INT 21
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: LD_INT 54
62292: PUSH
62293: EMPTY
62294: LIST
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: PUSH
62303: LD_INT 24
62305: PUSH
62306: LD_INT 800
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PPUSH
62326: CALL_OW 72
62330: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
62331: LD_ADDR_VAR 0 6
62335: PUSH
62336: LD_EXP 52
62340: PUSH
62341: LD_VAR 0 2
62345: ARRAY
62346: PPUSH
62347: LD_INT 21
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 3
62362: PUSH
62363: LD_INT 54
62365: PUSH
62366: EMPTY
62367: LIST
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: LD_INT 24
62378: PUSH
62379: LD_INT 250
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PPUSH
62399: CALL_OW 72
62403: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
62404: LD_ADDR_VAR 0 7
62408: PUSH
62409: LD_VAR 0 5
62413: PUSH
62414: LD_VAR 0 6
62418: DIFF
62419: ST_TO_ADDR
// if not need_heal_1 then
62420: LD_VAR 0 6
62424: NOT
62425: IFFALSE 62458
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
62427: LD_ADDR_EXP 55
62431: PUSH
62432: LD_EXP 55
62436: PPUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PPUSH
62449: EMPTY
62450: PPUSH
62451: CALL 17956 0 3
62455: ST_TO_ADDR
62456: GO 62528
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
62458: LD_ADDR_EXP 55
62462: PUSH
62463: LD_EXP 55
62467: PPUSH
62468: LD_VAR 0 2
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PPUSH
62480: LD_EXP 55
62484: PUSH
62485: LD_VAR 0 2
62489: ARRAY
62490: PUSH
62491: LD_INT 1
62493: ARRAY
62494: PPUSH
62495: LD_INT 3
62497: PUSH
62498: LD_INT 24
62500: PUSH
62501: LD_INT 1000
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PPUSH
62512: CALL_OW 72
62516: PUSH
62517: LD_VAR 0 6
62521: UNION
62522: PPUSH
62523: CALL 17956 0 3
62527: ST_TO_ADDR
// if not need_heal_2 then
62528: LD_VAR 0 7
62532: NOT
62533: IFFALSE 62566
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
62535: LD_ADDR_EXP 55
62539: PUSH
62540: LD_EXP 55
62544: PPUSH
62545: LD_VAR 0 2
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PPUSH
62557: EMPTY
62558: PPUSH
62559: CALL 17956 0 3
62563: ST_TO_ADDR
62564: GO 62598
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62566: LD_ADDR_EXP 55
62570: PUSH
62571: LD_EXP 55
62575: PPUSH
62576: LD_VAR 0 2
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PPUSH
62588: LD_VAR 0 7
62592: PPUSH
62593: CALL 17956 0 3
62597: ST_TO_ADDR
// if need_heal_2 then
62598: LD_VAR 0 7
62602: IFFALSE 62774
// for j in need_heal_2 do
62604: LD_ADDR_VAR 0 3
62608: PUSH
62609: LD_VAR 0 7
62613: PUSH
62614: FOR_IN
62615: IFFALSE 62772
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62617: LD_ADDR_VAR 0 5
62621: PUSH
62622: LD_EXP 52
62626: PUSH
62627: LD_VAR 0 2
62631: ARRAY
62632: PPUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 30
62638: PUSH
62639: LD_INT 6
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 30
62648: PUSH
62649: LD_INT 7
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 30
62658: PUSH
62659: LD_INT 8
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 30
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 30
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 25
62688: PUSH
62689: LD_INT 4
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: PPUSH
62705: CALL_OW 72
62709: ST_TO_ADDR
// if tmp then
62710: LD_VAR 0 5
62714: IFFALSE 62770
// begin k := NearestUnitToUnit ( tmp , j ) ;
62716: LD_ADDR_VAR 0 4
62720: PUSH
62721: LD_VAR 0 5
62725: PPUSH
62726: LD_VAR 0 3
62730: PPUSH
62731: CALL_OW 74
62735: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
62736: LD_VAR 0 3
62740: PPUSH
62741: LD_VAR 0 4
62745: PPUSH
62746: CALL_OW 296
62750: PUSH
62751: LD_INT 7
62753: GREATER
62754: IFFALSE 62770
// ComMoveUnit ( j , k ) ;
62756: LD_VAR 0 3
62760: PPUSH
62761: LD_VAR 0 4
62765: PPUSH
62766: CALL_OW 112
// end ; end ;
62770: GO 62614
62772: POP
62773: POP
// if not need_heal_1 and not need_heal_2 then
62774: LD_VAR 0 6
62778: NOT
62779: PUSH
62780: LD_VAR 0 7
62784: NOT
62785: AND
62786: IFFALSE 62790
// continue ;
62788: GO 62243
// end ;
62790: GO 62243
62792: POP
62793: POP
// RaiseSailEvent ( 102 ) ;
62794: LD_INT 102
62796: PPUSH
62797: CALL_OW 427
// end ;
62801: LD_VAR 0 1
62805: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
62806: LD_INT 0
62808: PPUSH
62809: PPUSH
62810: PPUSH
62811: PPUSH
62812: PPUSH
62813: PPUSH
// if not mc_bases then
62814: LD_EXP 52
62818: NOT
62819: IFFALSE 62823
// exit ;
62821: GO 63533
// for i = 1 to mc_bases do
62823: LD_ADDR_VAR 0 2
62827: PUSH
62828: DOUBLE
62829: LD_INT 1
62831: DEC
62832: ST_TO_ADDR
62833: LD_EXP 52
62837: PUSH
62838: FOR_TO
62839: IFFALSE 63531
// begin if not mc_building_need_repair [ i ] then
62841: LD_EXP 53
62845: PUSH
62846: LD_VAR 0 2
62850: ARRAY
62851: NOT
62852: IFFALSE 63026
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
62854: LD_ADDR_VAR 0 6
62858: PUSH
62859: LD_EXP 71
62863: PUSH
62864: LD_VAR 0 2
62868: ARRAY
62869: PPUSH
62870: LD_INT 3
62872: PUSH
62873: LD_INT 24
62875: PUSH
62876: LD_INT 1000
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: LD_INT 34
62892: PUSH
62893: LD_INT 13
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 34
62902: PUSH
62903: LD_INT 52
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PPUSH
62919: CALL_OW 72
62923: ST_TO_ADDR
// if cranes then
62924: LD_VAR 0 6
62928: IFFALSE 62990
// for j in cranes do
62930: LD_ADDR_VAR 0 3
62934: PUSH
62935: LD_VAR 0 6
62939: PUSH
62940: FOR_IN
62941: IFFALSE 62988
// if not IsInArea ( j , mc_parking [ i ] ) then
62943: LD_VAR 0 3
62947: PPUSH
62948: LD_EXP 76
62952: PUSH
62953: LD_VAR 0 2
62957: ARRAY
62958: PPUSH
62959: CALL_OW 308
62963: NOT
62964: IFFALSE 62986
// ComMoveToArea ( j , mc_parking [ i ] ) ;
62966: LD_VAR 0 3
62970: PPUSH
62971: LD_EXP 76
62975: PUSH
62976: LD_VAR 0 2
62980: ARRAY
62981: PPUSH
62982: CALL_OW 113
62986: GO 62940
62988: POP
62989: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62990: LD_ADDR_EXP 54
62994: PUSH
62995: LD_EXP 54
62999: PPUSH
63000: LD_VAR 0 2
63004: PPUSH
63005: EMPTY
63006: PPUSH
63007: CALL_OW 1
63011: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
63012: LD_VAR 0 2
63016: PPUSH
63017: LD_INT 101
63019: PPUSH
63020: CALL 57918 0 2
// continue ;
63024: GO 62838
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
63026: LD_ADDR_EXP 58
63030: PUSH
63031: LD_EXP 58
63035: PPUSH
63036: LD_VAR 0 2
63040: PPUSH
63041: EMPTY
63042: PPUSH
63043: CALL_OW 1
63047: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63048: LD_VAR 0 2
63052: PPUSH
63053: LD_INT 103
63055: PPUSH
63056: CALL 57918 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
63060: LD_ADDR_VAR 0 5
63064: PUSH
63065: LD_EXP 52
63069: PUSH
63070: LD_VAR 0 2
63074: ARRAY
63075: PUSH
63076: LD_EXP 81
63080: PUSH
63081: LD_VAR 0 2
63085: ARRAY
63086: UNION
63087: PPUSH
63088: LD_INT 2
63090: PUSH
63091: LD_INT 25
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 25
63103: PUSH
63104: LD_INT 16
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PUSH
63116: EMPTY
63117: LIST
63118: PPUSH
63119: CALL_OW 72
63123: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
63124: LD_ADDR_VAR 0 6
63128: PUSH
63129: LD_EXP 71
63133: PUSH
63134: LD_VAR 0 2
63138: ARRAY
63139: PPUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 34
63145: PUSH
63146: LD_INT 13
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 34
63155: PUSH
63156: LD_INT 52
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: LIST
63167: PPUSH
63168: CALL_OW 72
63172: ST_TO_ADDR
// if cranes then
63173: LD_VAR 0 6
63177: IFFALSE 63313
// begin for j in cranes do
63179: LD_ADDR_VAR 0 3
63183: PUSH
63184: LD_VAR 0 6
63188: PUSH
63189: FOR_IN
63190: IFFALSE 63311
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
63192: LD_VAR 0 3
63196: PPUSH
63197: CALL_OW 256
63201: PUSH
63202: LD_INT 500
63204: GREATEREQUAL
63205: PUSH
63206: LD_VAR 0 3
63210: PPUSH
63211: CALL_OW 314
63215: NOT
63216: AND
63217: IFFALSE 63251
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
63219: LD_VAR 0 3
63223: PPUSH
63224: LD_EXP 53
63228: PUSH
63229: LD_VAR 0 2
63233: ARRAY
63234: PPUSH
63235: LD_VAR 0 3
63239: PPUSH
63240: CALL_OW 74
63244: PPUSH
63245: CALL_OW 130
63249: GO 63309
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
63251: LD_VAR 0 3
63255: PPUSH
63256: CALL_OW 256
63260: PUSH
63261: LD_INT 500
63263: LESS
63264: PUSH
63265: LD_VAR 0 3
63269: PPUSH
63270: LD_EXP 76
63274: PUSH
63275: LD_VAR 0 2
63279: ARRAY
63280: PPUSH
63281: CALL_OW 308
63285: NOT
63286: AND
63287: IFFALSE 63309
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63289: LD_VAR 0 3
63293: PPUSH
63294: LD_EXP 76
63298: PUSH
63299: LD_VAR 0 2
63303: ARRAY
63304: PPUSH
63305: CALL_OW 113
63309: GO 63189
63311: POP
63312: POP
// end ; if not tmp then
63313: LD_VAR 0 5
63317: NOT
63318: IFFALSE 63322
// continue ;
63320: GO 62838
// for j in tmp do
63322: LD_ADDR_VAR 0 3
63326: PUSH
63327: LD_VAR 0 5
63331: PUSH
63332: FOR_IN
63333: IFFALSE 63527
// begin if mc_need_heal [ i ] then
63335: LD_EXP 55
63339: PUSH
63340: LD_VAR 0 2
63344: ARRAY
63345: IFFALSE 63393
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
63347: LD_VAR 0 3
63351: PUSH
63352: LD_EXP 55
63356: PUSH
63357: LD_VAR 0 2
63361: ARRAY
63362: PUSH
63363: LD_INT 1
63365: ARRAY
63366: IN
63367: PUSH
63368: LD_VAR 0 3
63372: PUSH
63373: LD_EXP 55
63377: PUSH
63378: LD_VAR 0 2
63382: ARRAY
63383: PUSH
63384: LD_INT 2
63386: ARRAY
63387: IN
63388: OR
63389: IFFALSE 63393
// continue ;
63391: GO 63332
// if IsInUnit ( j ) then
63393: LD_VAR 0 3
63397: PPUSH
63398: CALL_OW 310
63402: IFFALSE 63413
// ComExitBuilding ( j ) ;
63404: LD_VAR 0 3
63408: PPUSH
63409: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
63413: LD_VAR 0 3
63417: PUSH
63418: LD_EXP 54
63422: PUSH
63423: LD_VAR 0 2
63427: ARRAY
63428: IN
63429: NOT
63430: IFFALSE 63488
// begin SetTag ( j , 101 ) ;
63432: LD_VAR 0 3
63436: PPUSH
63437: LD_INT 101
63439: PPUSH
63440: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
63444: LD_ADDR_EXP 54
63448: PUSH
63449: LD_EXP 54
63453: PPUSH
63454: LD_VAR 0 2
63458: PUSH
63459: LD_EXP 54
63463: PUSH
63464: LD_VAR 0 2
63468: ARRAY
63469: PUSH
63470: LD_INT 1
63472: PLUS
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PPUSH
63478: LD_VAR 0 3
63482: PPUSH
63483: CALL 17956 0 3
63487: ST_TO_ADDR
// end ; wait ( 1 ) ;
63488: LD_INT 1
63490: PPUSH
63491: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
63495: LD_VAR 0 3
63499: PPUSH
63500: LD_EXP 53
63504: PUSH
63505: LD_VAR 0 2
63509: ARRAY
63510: PPUSH
63511: LD_VAR 0 3
63515: PPUSH
63516: CALL_OW 74
63520: PPUSH
63521: CALL_OW 130
// end ;
63525: GO 63332
63527: POP
63528: POP
// end ;
63529: GO 62838
63531: POP
63532: POP
// end ;
63533: LD_VAR 0 1
63537: RET
// export function MC_Heal ; var i , j , tmp ; begin
63538: LD_INT 0
63540: PPUSH
63541: PPUSH
63542: PPUSH
63543: PPUSH
// if not mc_bases then
63544: LD_EXP 52
63548: NOT
63549: IFFALSE 63553
// exit ;
63551: GO 63955
// for i = 1 to mc_bases do
63553: LD_ADDR_VAR 0 2
63557: PUSH
63558: DOUBLE
63559: LD_INT 1
63561: DEC
63562: ST_TO_ADDR
63563: LD_EXP 52
63567: PUSH
63568: FOR_TO
63569: IFFALSE 63953
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
63571: LD_EXP 55
63575: PUSH
63576: LD_VAR 0 2
63580: ARRAY
63581: PUSH
63582: LD_INT 1
63584: ARRAY
63585: NOT
63586: PUSH
63587: LD_EXP 55
63591: PUSH
63592: LD_VAR 0 2
63596: ARRAY
63597: PUSH
63598: LD_INT 2
63600: ARRAY
63601: NOT
63602: AND
63603: IFFALSE 63641
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
63605: LD_ADDR_EXP 56
63609: PUSH
63610: LD_EXP 56
63614: PPUSH
63615: LD_VAR 0 2
63619: PPUSH
63620: EMPTY
63621: PPUSH
63622: CALL_OW 1
63626: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
63627: LD_VAR 0 2
63631: PPUSH
63632: LD_INT 102
63634: PPUSH
63635: CALL 57918 0 2
// continue ;
63639: GO 63568
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
63641: LD_ADDR_VAR 0 4
63645: PUSH
63646: LD_EXP 52
63650: PUSH
63651: LD_VAR 0 2
63655: ARRAY
63656: PPUSH
63657: LD_INT 25
63659: PUSH
63660: LD_INT 4
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PPUSH
63667: CALL_OW 72
63671: ST_TO_ADDR
// if not tmp then
63672: LD_VAR 0 4
63676: NOT
63677: IFFALSE 63681
// continue ;
63679: GO 63568
// if mc_taming [ i ] then
63681: LD_EXP 83
63685: PUSH
63686: LD_VAR 0 2
63690: ARRAY
63691: IFFALSE 63715
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
63693: LD_ADDR_EXP 83
63697: PUSH
63698: LD_EXP 83
63702: PPUSH
63703: LD_VAR 0 2
63707: PPUSH
63708: EMPTY
63709: PPUSH
63710: CALL_OW 1
63714: ST_TO_ADDR
// for j in tmp do
63715: LD_ADDR_VAR 0 3
63719: PUSH
63720: LD_VAR 0 4
63724: PUSH
63725: FOR_IN
63726: IFFALSE 63949
// begin if IsInUnit ( j ) then
63728: LD_VAR 0 3
63732: PPUSH
63733: CALL_OW 310
63737: IFFALSE 63748
// ComExitBuilding ( j ) ;
63739: LD_VAR 0 3
63743: PPUSH
63744: CALL_OW 122
// if not j in mc_healers [ i ] then
63748: LD_VAR 0 3
63752: PUSH
63753: LD_EXP 56
63757: PUSH
63758: LD_VAR 0 2
63762: ARRAY
63763: IN
63764: NOT
63765: IFFALSE 63811
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
63767: LD_ADDR_EXP 56
63771: PUSH
63772: LD_EXP 56
63776: PPUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_EXP 56
63786: PUSH
63787: LD_VAR 0 2
63791: ARRAY
63792: PUSH
63793: LD_INT 1
63795: PLUS
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PPUSH
63801: LD_VAR 0 3
63805: PPUSH
63806: CALL 17956 0 3
63810: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
63811: LD_VAR 0 3
63815: PPUSH
63816: CALL_OW 110
63820: PUSH
63821: LD_INT 102
63823: NONEQUAL
63824: IFFALSE 63838
// SetTag ( j , 102 ) ;
63826: LD_VAR 0 3
63830: PPUSH
63831: LD_INT 102
63833: PPUSH
63834: CALL_OW 109
// Wait ( 3 ) ;
63838: LD_INT 3
63840: PPUSH
63841: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
63845: LD_EXP 55
63849: PUSH
63850: LD_VAR 0 2
63854: ARRAY
63855: PUSH
63856: LD_INT 1
63858: ARRAY
63859: IFFALSE 63891
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
63861: LD_VAR 0 3
63865: PPUSH
63866: LD_EXP 55
63870: PUSH
63871: LD_VAR 0 2
63875: ARRAY
63876: PUSH
63877: LD_INT 1
63879: ARRAY
63880: PUSH
63881: LD_INT 1
63883: ARRAY
63884: PPUSH
63885: CALL_OW 128
63889: GO 63947
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
63891: LD_VAR 0 3
63895: PPUSH
63896: CALL_OW 314
63900: NOT
63901: PUSH
63902: LD_EXP 55
63906: PUSH
63907: LD_VAR 0 2
63911: ARRAY
63912: PUSH
63913: LD_INT 2
63915: ARRAY
63916: AND
63917: IFFALSE 63947
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
63919: LD_VAR 0 3
63923: PPUSH
63924: LD_EXP 55
63928: PUSH
63929: LD_VAR 0 2
63933: ARRAY
63934: PUSH
63935: LD_INT 2
63937: ARRAY
63938: PUSH
63939: LD_INT 1
63941: ARRAY
63942: PPUSH
63943: CALL_OW 128
// end ;
63947: GO 63725
63949: POP
63950: POP
// end ;
63951: GO 63568
63953: POP
63954: POP
// end ;
63955: LD_VAR 0 1
63959: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
63960: LD_INT 0
63962: PPUSH
63963: PPUSH
63964: PPUSH
63965: PPUSH
63966: PPUSH
// if not mc_bases then
63967: LD_EXP 52
63971: NOT
63972: IFFALSE 63976
// exit ;
63974: GO 65119
// for i = 1 to mc_bases do
63976: LD_ADDR_VAR 0 2
63980: PUSH
63981: DOUBLE
63982: LD_INT 1
63984: DEC
63985: ST_TO_ADDR
63986: LD_EXP 52
63990: PUSH
63991: FOR_TO
63992: IFFALSE 65117
// begin if mc_scan [ i ] then
63994: LD_EXP 75
63998: PUSH
63999: LD_VAR 0 2
64003: ARRAY
64004: IFFALSE 64008
// continue ;
64006: GO 63991
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
64008: LD_EXP 57
64012: PUSH
64013: LD_VAR 0 2
64017: ARRAY
64018: NOT
64019: PUSH
64020: LD_EXP 59
64024: PUSH
64025: LD_VAR 0 2
64029: ARRAY
64030: NOT
64031: AND
64032: PUSH
64033: LD_EXP 58
64037: PUSH
64038: LD_VAR 0 2
64042: ARRAY
64043: AND
64044: IFFALSE 64082
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
64046: LD_ADDR_EXP 58
64050: PUSH
64051: LD_EXP 58
64055: PPUSH
64056: LD_VAR 0 2
64060: PPUSH
64061: EMPTY
64062: PPUSH
64063: CALL_OW 1
64067: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64068: LD_VAR 0 2
64072: PPUSH
64073: LD_INT 103
64075: PPUSH
64076: CALL 57918 0 2
// continue ;
64080: GO 63991
// end ; if mc_construct_list [ i ] then
64082: LD_EXP 59
64086: PUSH
64087: LD_VAR 0 2
64091: ARRAY
64092: IFFALSE 64312
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64094: LD_ADDR_VAR 0 4
64098: PUSH
64099: LD_EXP 52
64103: PUSH
64104: LD_VAR 0 2
64108: ARRAY
64109: PPUSH
64110: LD_INT 25
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PPUSH
64120: CALL_OW 72
64124: PUSH
64125: LD_EXP 54
64129: PUSH
64130: LD_VAR 0 2
64134: ARRAY
64135: DIFF
64136: ST_TO_ADDR
// if not tmp then
64137: LD_VAR 0 4
64141: NOT
64142: IFFALSE 64146
// continue ;
64144: GO 63991
// for j in tmp do
64146: LD_ADDR_VAR 0 3
64150: PUSH
64151: LD_VAR 0 4
64155: PUSH
64156: FOR_IN
64157: IFFALSE 64308
// begin if not mc_builders [ i ] then
64159: LD_EXP 58
64163: PUSH
64164: LD_VAR 0 2
64168: ARRAY
64169: NOT
64170: IFFALSE 64228
// begin SetTag ( j , 103 ) ;
64172: LD_VAR 0 3
64176: PPUSH
64177: LD_INT 103
64179: PPUSH
64180: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64184: LD_ADDR_EXP 58
64188: PUSH
64189: LD_EXP 58
64193: PPUSH
64194: LD_VAR 0 2
64198: PUSH
64199: LD_EXP 58
64203: PUSH
64204: LD_VAR 0 2
64208: ARRAY
64209: PUSH
64210: LD_INT 1
64212: PLUS
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PPUSH
64218: LD_VAR 0 3
64222: PPUSH
64223: CALL 17956 0 3
64227: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64228: LD_VAR 0 3
64232: PPUSH
64233: CALL_OW 310
64237: IFFALSE 64248
// ComExitBuilding ( j ) ;
64239: LD_VAR 0 3
64243: PPUSH
64244: CALL_OW 122
// wait ( 3 ) ;
64248: LD_INT 3
64250: PPUSH
64251: CALL_OW 67
// if not mc_construct_list [ i ] then
64255: LD_EXP 59
64259: PUSH
64260: LD_VAR 0 2
64264: ARRAY
64265: NOT
64266: IFFALSE 64270
// break ;
64268: GO 64308
// if not HasTask ( j ) then
64270: LD_VAR 0 3
64274: PPUSH
64275: CALL_OW 314
64279: NOT
64280: IFFALSE 64306
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
64282: LD_VAR 0 3
64286: PPUSH
64287: LD_EXP 59
64291: PUSH
64292: LD_VAR 0 2
64296: ARRAY
64297: PUSH
64298: LD_INT 1
64300: ARRAY
64301: PPUSH
64302: CALL 20807 0 2
// end ;
64306: GO 64156
64308: POP
64309: POP
// end else
64310: GO 65115
// if mc_build_list [ i ] then
64312: LD_EXP 57
64316: PUSH
64317: LD_VAR 0 2
64321: ARRAY
64322: IFFALSE 65115
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64324: LD_ADDR_VAR 0 5
64328: PUSH
64329: LD_EXP 52
64333: PUSH
64334: LD_VAR 0 2
64338: ARRAY
64339: PPUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 30
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 30
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: PPUSH
64368: CALL_OW 72
64372: ST_TO_ADDR
// if depot then
64373: LD_VAR 0 5
64377: IFFALSE 64395
// depot := depot [ 1 ] else
64379: LD_ADDR_VAR 0 5
64383: PUSH
64384: LD_VAR 0 5
64388: PUSH
64389: LD_INT 1
64391: ARRAY
64392: ST_TO_ADDR
64393: GO 64403
// depot := 0 ;
64395: LD_ADDR_VAR 0 5
64399: PUSH
64400: LD_INT 0
64402: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
64403: LD_EXP 57
64407: PUSH
64408: LD_VAR 0 2
64412: ARRAY
64413: PUSH
64414: LD_INT 1
64416: ARRAY
64417: PUSH
64418: LD_INT 1
64420: ARRAY
64421: PPUSH
64422: CALL 20637 0 1
64426: PUSH
64427: LD_EXP 52
64431: PUSH
64432: LD_VAR 0 2
64436: ARRAY
64437: PPUSH
64438: LD_INT 2
64440: PUSH
64441: LD_INT 30
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 30
64453: PUSH
64454: LD_INT 3
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: LIST
64465: PPUSH
64466: CALL_OW 72
64470: NOT
64471: AND
64472: IFFALSE 64577
// begin for j = 1 to mc_build_list [ i ] do
64474: LD_ADDR_VAR 0 3
64478: PUSH
64479: DOUBLE
64480: LD_INT 1
64482: DEC
64483: ST_TO_ADDR
64484: LD_EXP 57
64488: PUSH
64489: LD_VAR 0 2
64493: ARRAY
64494: PUSH
64495: FOR_TO
64496: IFFALSE 64575
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
64498: LD_EXP 57
64502: PUSH
64503: LD_VAR 0 2
64507: ARRAY
64508: PUSH
64509: LD_VAR 0 3
64513: ARRAY
64514: PUSH
64515: LD_INT 1
64517: ARRAY
64518: PUSH
64519: LD_INT 2
64521: EQUAL
64522: IFFALSE 64573
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
64524: LD_ADDR_EXP 57
64528: PUSH
64529: LD_EXP 57
64533: PPUSH
64534: LD_VAR 0 2
64538: PPUSH
64539: LD_EXP 57
64543: PUSH
64544: LD_VAR 0 2
64548: ARRAY
64549: PPUSH
64550: LD_VAR 0 3
64554: PPUSH
64555: LD_INT 1
64557: PPUSH
64558: LD_INT 0
64560: PPUSH
64561: CALL 17374 0 4
64565: PPUSH
64566: CALL_OW 1
64570: ST_TO_ADDR
// break ;
64571: GO 64575
// end ;
64573: GO 64495
64575: POP
64576: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
64577: LD_EXP 57
64581: PUSH
64582: LD_VAR 0 2
64586: ARRAY
64587: PUSH
64588: LD_INT 1
64590: ARRAY
64591: PUSH
64592: LD_INT 1
64594: ARRAY
64595: PUSH
64596: LD_INT 0
64598: EQUAL
64599: PUSH
64600: LD_VAR 0 5
64604: PUSH
64605: LD_VAR 0 5
64609: PPUSH
64610: LD_EXP 57
64614: PUSH
64615: LD_VAR 0 2
64619: ARRAY
64620: PUSH
64621: LD_INT 1
64623: ARRAY
64624: PUSH
64625: LD_INT 1
64627: ARRAY
64628: PPUSH
64629: LD_EXP 57
64633: PUSH
64634: LD_VAR 0 2
64638: ARRAY
64639: PUSH
64640: LD_INT 1
64642: ARRAY
64643: PUSH
64644: LD_INT 2
64646: ARRAY
64647: PPUSH
64648: LD_EXP 57
64652: PUSH
64653: LD_VAR 0 2
64657: ARRAY
64658: PUSH
64659: LD_INT 1
64661: ARRAY
64662: PUSH
64663: LD_INT 3
64665: ARRAY
64666: PPUSH
64667: LD_EXP 57
64671: PUSH
64672: LD_VAR 0 2
64676: ARRAY
64677: PUSH
64678: LD_INT 1
64680: ARRAY
64681: PUSH
64682: LD_INT 4
64684: ARRAY
64685: PPUSH
64686: CALL 25371 0 5
64690: AND
64691: OR
64692: IFFALSE 64973
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64694: LD_ADDR_VAR 0 4
64698: PUSH
64699: LD_EXP 52
64703: PUSH
64704: LD_VAR 0 2
64708: ARRAY
64709: PPUSH
64710: LD_INT 25
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PPUSH
64720: CALL_OW 72
64724: PUSH
64725: LD_EXP 54
64729: PUSH
64730: LD_VAR 0 2
64734: ARRAY
64735: DIFF
64736: ST_TO_ADDR
// if not tmp then
64737: LD_VAR 0 4
64741: NOT
64742: IFFALSE 64746
// continue ;
64744: GO 63991
// for j in tmp do
64746: LD_ADDR_VAR 0 3
64750: PUSH
64751: LD_VAR 0 4
64755: PUSH
64756: FOR_IN
64757: IFFALSE 64969
// begin if not mc_builders [ i ] then
64759: LD_EXP 58
64763: PUSH
64764: LD_VAR 0 2
64768: ARRAY
64769: NOT
64770: IFFALSE 64828
// begin SetTag ( j , 103 ) ;
64772: LD_VAR 0 3
64776: PPUSH
64777: LD_INT 103
64779: PPUSH
64780: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64784: LD_ADDR_EXP 58
64788: PUSH
64789: LD_EXP 58
64793: PPUSH
64794: LD_VAR 0 2
64798: PUSH
64799: LD_EXP 58
64803: PUSH
64804: LD_VAR 0 2
64808: ARRAY
64809: PUSH
64810: LD_INT 1
64812: PLUS
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PPUSH
64818: LD_VAR 0 3
64822: PPUSH
64823: CALL 17956 0 3
64827: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64828: LD_VAR 0 3
64832: PPUSH
64833: CALL_OW 310
64837: IFFALSE 64848
// ComExitBuilding ( j ) ;
64839: LD_VAR 0 3
64843: PPUSH
64844: CALL_OW 122
// wait ( 3 ) ;
64848: LD_INT 3
64850: PPUSH
64851: CALL_OW 67
// if not mc_build_list [ i ] then
64855: LD_EXP 57
64859: PUSH
64860: LD_VAR 0 2
64864: ARRAY
64865: NOT
64866: IFFALSE 64870
// break ;
64868: GO 64969
// if not HasTask ( j ) then
64870: LD_VAR 0 3
64874: PPUSH
64875: CALL_OW 314
64879: NOT
64880: IFFALSE 64967
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
64882: LD_VAR 0 3
64886: PPUSH
64887: LD_EXP 57
64891: PUSH
64892: LD_VAR 0 2
64896: ARRAY
64897: PUSH
64898: LD_INT 1
64900: ARRAY
64901: PUSH
64902: LD_INT 1
64904: ARRAY
64905: PPUSH
64906: LD_EXP 57
64910: PUSH
64911: LD_VAR 0 2
64915: ARRAY
64916: PUSH
64917: LD_INT 1
64919: ARRAY
64920: PUSH
64921: LD_INT 2
64923: ARRAY
64924: PPUSH
64925: LD_EXP 57
64929: PUSH
64930: LD_VAR 0 2
64934: ARRAY
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PUSH
64940: LD_INT 3
64942: ARRAY
64943: PPUSH
64944: LD_EXP 57
64948: PUSH
64949: LD_VAR 0 2
64953: ARRAY
64954: PUSH
64955: LD_INT 1
64957: ARRAY
64958: PUSH
64959: LD_INT 4
64961: ARRAY
64962: PPUSH
64963: CALL_OW 145
// end ;
64967: GO 64756
64969: POP
64970: POP
// end else
64971: GO 65115
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
64973: LD_EXP 52
64977: PUSH
64978: LD_VAR 0 2
64982: ARRAY
64983: PPUSH
64984: LD_EXP 57
64988: PUSH
64989: LD_VAR 0 2
64993: ARRAY
64994: PUSH
64995: LD_INT 1
64997: ARRAY
64998: PUSH
64999: LD_INT 1
65001: ARRAY
65002: PPUSH
65003: LD_EXP 57
65007: PUSH
65008: LD_VAR 0 2
65012: ARRAY
65013: PUSH
65014: LD_INT 1
65016: ARRAY
65017: PUSH
65018: LD_INT 2
65020: ARRAY
65021: PPUSH
65022: LD_EXP 57
65026: PUSH
65027: LD_VAR 0 2
65031: ARRAY
65032: PUSH
65033: LD_INT 1
65035: ARRAY
65036: PUSH
65037: LD_INT 3
65039: ARRAY
65040: PPUSH
65041: LD_EXP 57
65045: PUSH
65046: LD_VAR 0 2
65050: ARRAY
65051: PUSH
65052: LD_INT 1
65054: ARRAY
65055: PUSH
65056: LD_INT 4
65058: ARRAY
65059: PPUSH
65060: CALL 24707 0 5
65064: NOT
65065: IFFALSE 65115
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65067: LD_ADDR_EXP 57
65071: PUSH
65072: LD_EXP 57
65076: PPUSH
65077: LD_VAR 0 2
65081: PPUSH
65082: LD_EXP 57
65086: PUSH
65087: LD_VAR 0 2
65091: ARRAY
65092: PPUSH
65093: LD_INT 1
65095: PPUSH
65096: LD_INT 1
65098: NEG
65099: PPUSH
65100: LD_INT 0
65102: PPUSH
65103: CALL 17374 0 4
65107: PPUSH
65108: CALL_OW 1
65112: ST_TO_ADDR
// continue ;
65113: GO 63991
// end ; end ; end ;
65115: GO 63991
65117: POP
65118: POP
// end ;
65119: LD_VAR 0 1
65123: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65124: LD_INT 0
65126: PPUSH
65127: PPUSH
65128: PPUSH
65129: PPUSH
65130: PPUSH
65131: PPUSH
// if not mc_bases then
65132: LD_EXP 52
65136: NOT
65137: IFFALSE 65141
// exit ;
65139: GO 65568
// for i = 1 to mc_bases do
65141: LD_ADDR_VAR 0 2
65145: PUSH
65146: DOUBLE
65147: LD_INT 1
65149: DEC
65150: ST_TO_ADDR
65151: LD_EXP 52
65155: PUSH
65156: FOR_TO
65157: IFFALSE 65566
// begin tmp := mc_build_upgrade [ i ] ;
65159: LD_ADDR_VAR 0 4
65163: PUSH
65164: LD_EXP 84
65168: PUSH
65169: LD_VAR 0 2
65173: ARRAY
65174: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
65175: LD_ADDR_VAR 0 6
65179: PUSH
65180: LD_EXP 85
65184: PUSH
65185: LD_VAR 0 2
65189: ARRAY
65190: PPUSH
65191: LD_INT 2
65193: PUSH
65194: LD_INT 30
65196: PUSH
65197: LD_INT 6
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 30
65206: PUSH
65207: LD_INT 7
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: PPUSH
65219: CALL_OW 72
65223: ST_TO_ADDR
// if not tmp and not lab then
65224: LD_VAR 0 4
65228: NOT
65229: PUSH
65230: LD_VAR 0 6
65234: NOT
65235: AND
65236: IFFALSE 65240
// continue ;
65238: GO 65156
// if tmp then
65240: LD_VAR 0 4
65244: IFFALSE 65364
// for j in tmp do
65246: LD_ADDR_VAR 0 3
65250: PUSH
65251: LD_VAR 0 4
65255: PUSH
65256: FOR_IN
65257: IFFALSE 65362
// begin if UpgradeCost ( j ) then
65259: LD_VAR 0 3
65263: PPUSH
65264: CALL 24367 0 1
65268: IFFALSE 65360
// begin ComUpgrade ( j ) ;
65270: LD_VAR 0 3
65274: PPUSH
65275: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
65279: LD_ADDR_EXP 84
65283: PUSH
65284: LD_EXP 84
65288: PPUSH
65289: LD_VAR 0 2
65293: PPUSH
65294: LD_EXP 84
65298: PUSH
65299: LD_VAR 0 2
65303: ARRAY
65304: PUSH
65305: LD_VAR 0 3
65309: DIFF
65310: PPUSH
65311: CALL_OW 1
65315: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65316: LD_ADDR_EXP 59
65320: PUSH
65321: LD_EXP 59
65325: PPUSH
65326: LD_VAR 0 2
65330: PUSH
65331: LD_EXP 59
65335: PUSH
65336: LD_VAR 0 2
65340: ARRAY
65341: PUSH
65342: LD_INT 1
65344: PLUS
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PPUSH
65350: LD_VAR 0 3
65354: PPUSH
65355: CALL 17956 0 3
65359: ST_TO_ADDR
// end ; end ;
65360: GO 65256
65362: POP
65363: POP
// if not lab or not mc_lab_upgrade [ i ] then
65364: LD_VAR 0 6
65368: NOT
65369: PUSH
65370: LD_EXP 86
65374: PUSH
65375: LD_VAR 0 2
65379: ARRAY
65380: NOT
65381: OR
65382: IFFALSE 65386
// continue ;
65384: GO 65156
// for j in lab do
65386: LD_ADDR_VAR 0 3
65390: PUSH
65391: LD_VAR 0 6
65395: PUSH
65396: FOR_IN
65397: IFFALSE 65562
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
65399: LD_VAR 0 3
65403: PPUSH
65404: CALL_OW 266
65408: PUSH
65409: LD_INT 6
65411: PUSH
65412: LD_INT 7
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: IN
65419: PUSH
65420: LD_VAR 0 3
65424: PPUSH
65425: CALL_OW 461
65429: PUSH
65430: LD_INT 1
65432: NONEQUAL
65433: AND
65434: IFFALSE 65560
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
65436: LD_VAR 0 3
65440: PPUSH
65441: LD_EXP 86
65445: PUSH
65446: LD_VAR 0 2
65450: ARRAY
65451: PUSH
65452: LD_INT 1
65454: ARRAY
65455: PPUSH
65456: CALL 24572 0 2
65460: IFFALSE 65560
// begin ComCancel ( j ) ;
65462: LD_VAR 0 3
65466: PPUSH
65467: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
65471: LD_VAR 0 3
65475: PPUSH
65476: LD_EXP 86
65480: PUSH
65481: LD_VAR 0 2
65485: ARRAY
65486: PUSH
65487: LD_INT 1
65489: ARRAY
65490: PPUSH
65491: CALL_OW 207
// if not j in mc_construct_list [ i ] then
65495: LD_VAR 0 3
65499: PUSH
65500: LD_EXP 59
65504: PUSH
65505: LD_VAR 0 2
65509: ARRAY
65510: IN
65511: NOT
65512: IFFALSE 65558
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65514: LD_ADDR_EXP 59
65518: PUSH
65519: LD_EXP 59
65523: PPUSH
65524: LD_VAR 0 2
65528: PUSH
65529: LD_EXP 59
65533: PUSH
65534: LD_VAR 0 2
65538: ARRAY
65539: PUSH
65540: LD_INT 1
65542: PLUS
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PPUSH
65548: LD_VAR 0 3
65552: PPUSH
65553: CALL 17956 0 3
65557: ST_TO_ADDR
// break ;
65558: GO 65562
// end ; end ; end ;
65560: GO 65396
65562: POP
65563: POP
// end ;
65564: GO 65156
65566: POP
65567: POP
// end ;
65568: LD_VAR 0 1
65572: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
65573: LD_INT 0
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
65582: PPUSH
65583: PPUSH
// if not mc_bases then
65584: LD_EXP 52
65588: NOT
65589: IFFALSE 65593
// exit ;
65591: GO 65998
// for i = 1 to mc_bases do
65593: LD_ADDR_VAR 0 2
65597: PUSH
65598: DOUBLE
65599: LD_INT 1
65601: DEC
65602: ST_TO_ADDR
65603: LD_EXP 52
65607: PUSH
65608: FOR_TO
65609: IFFALSE 65996
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
65611: LD_EXP 60
65615: PUSH
65616: LD_VAR 0 2
65620: ARRAY
65621: NOT
65622: PUSH
65623: LD_EXP 52
65627: PUSH
65628: LD_VAR 0 2
65632: ARRAY
65633: PPUSH
65634: LD_INT 30
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PPUSH
65644: CALL_OW 72
65648: NOT
65649: OR
65650: IFFALSE 65654
// continue ;
65652: GO 65608
// busy := false ;
65654: LD_ADDR_VAR 0 8
65658: PUSH
65659: LD_INT 0
65661: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65662: LD_ADDR_VAR 0 4
65666: PUSH
65667: LD_EXP 52
65671: PUSH
65672: LD_VAR 0 2
65676: ARRAY
65677: PPUSH
65678: LD_INT 30
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PPUSH
65688: CALL_OW 72
65692: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
65693: LD_ADDR_VAR 0 6
65697: PUSH
65698: LD_EXP 60
65702: PUSH
65703: LD_VAR 0 2
65707: ARRAY
65708: PPUSH
65709: LD_INT 2
65711: PUSH
65712: LD_INT 30
65714: PUSH
65715: LD_INT 32
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 30
65724: PUSH
65725: LD_INT 33
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: PPUSH
65737: CALL_OW 72
65741: ST_TO_ADDR
// if not t then
65742: LD_VAR 0 6
65746: NOT
65747: IFFALSE 65751
// continue ;
65749: GO 65608
// for j in tmp do
65751: LD_ADDR_VAR 0 3
65755: PUSH
65756: LD_VAR 0 4
65760: PUSH
65761: FOR_IN
65762: IFFALSE 65792
// if not BuildingStatus ( j ) = bs_idle then
65764: LD_VAR 0 3
65768: PPUSH
65769: CALL_OW 461
65773: PUSH
65774: LD_INT 2
65776: EQUAL
65777: NOT
65778: IFFALSE 65790
// begin busy := true ;
65780: LD_ADDR_VAR 0 8
65784: PUSH
65785: LD_INT 1
65787: ST_TO_ADDR
// break ;
65788: GO 65792
// end ;
65790: GO 65761
65792: POP
65793: POP
// if busy then
65794: LD_VAR 0 8
65798: IFFALSE 65802
// continue ;
65800: GO 65608
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
65802: LD_ADDR_VAR 0 7
65806: PUSH
65807: LD_VAR 0 6
65811: PPUSH
65812: LD_INT 35
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PPUSH
65822: CALL_OW 72
65826: ST_TO_ADDR
// if tw then
65827: LD_VAR 0 7
65831: IFFALSE 65908
// begin tw := tw [ 1 ] ;
65833: LD_ADDR_VAR 0 7
65837: PUSH
65838: LD_VAR 0 7
65842: PUSH
65843: LD_INT 1
65845: ARRAY
65846: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
65847: LD_ADDR_VAR 0 9
65851: PUSH
65852: LD_VAR 0 7
65856: PPUSH
65857: LD_EXP 77
65861: PUSH
65862: LD_VAR 0 2
65866: ARRAY
65867: PPUSH
65868: CALL 22926 0 2
65872: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
65873: LD_EXP 91
65877: PUSH
65878: LD_VAR 0 2
65882: ARRAY
65883: IFFALSE 65906
// if not weapon in mc_allowed_tower_weapons [ i ] then
65885: LD_VAR 0 9
65889: PUSH
65890: LD_EXP 91
65894: PUSH
65895: LD_VAR 0 2
65899: ARRAY
65900: IN
65901: NOT
65902: IFFALSE 65906
// continue ;
65904: GO 65608
// end else
65906: GO 65971
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
65908: LD_ADDR_VAR 0 5
65912: PUSH
65913: LD_EXP 60
65917: PUSH
65918: LD_VAR 0 2
65922: ARRAY
65923: PPUSH
65924: LD_VAR 0 4
65928: PPUSH
65929: CALL 53127 0 2
65933: ST_TO_ADDR
// if not tmp2 then
65934: LD_VAR 0 5
65938: NOT
65939: IFFALSE 65943
// continue ;
65941: GO 65608
// tw := tmp2 [ 1 ] ;
65943: LD_ADDR_VAR 0 7
65947: PUSH
65948: LD_VAR 0 5
65952: PUSH
65953: LD_INT 1
65955: ARRAY
65956: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
65957: LD_ADDR_VAR 0 9
65961: PUSH
65962: LD_VAR 0 5
65966: PUSH
65967: LD_INT 2
65969: ARRAY
65970: ST_TO_ADDR
// end ; if not weapon then
65971: LD_VAR 0 9
65975: NOT
65976: IFFALSE 65980
// continue ;
65978: GO 65608
// ComPlaceWeapon ( tw , weapon ) ;
65980: LD_VAR 0 7
65984: PPUSH
65985: LD_VAR 0 9
65989: PPUSH
65990: CALL_OW 148
// end ;
65994: GO 65608
65996: POP
65997: POP
// end ;
65998: LD_VAR 0 1
66002: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66003: LD_INT 0
66005: PPUSH
66006: PPUSH
66007: PPUSH
66008: PPUSH
66009: PPUSH
66010: PPUSH
// if not mc_bases then
66011: LD_EXP 52
66015: NOT
66016: IFFALSE 66020
// exit ;
66018: GO 67032
// for i = 1 to mc_bases do
66020: LD_ADDR_VAR 0 2
66024: PUSH
66025: DOUBLE
66026: LD_INT 1
66028: DEC
66029: ST_TO_ADDR
66030: LD_EXP 52
66034: PUSH
66035: FOR_TO
66036: IFFALSE 67030
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
66038: LD_EXP 65
66042: PUSH
66043: LD_VAR 0 2
66047: ARRAY
66048: NOT
66049: PUSH
66050: LD_EXP 65
66054: PUSH
66055: LD_VAR 0 2
66059: ARRAY
66060: PUSH
66061: LD_EXP 66
66065: PUSH
66066: LD_VAR 0 2
66070: ARRAY
66071: EQUAL
66072: OR
66073: IFFALSE 66077
// continue ;
66075: GO 66035
// if mc_miners [ i ] then
66077: LD_EXP 66
66081: PUSH
66082: LD_VAR 0 2
66086: ARRAY
66087: IFFALSE 66717
// begin k := 1 ;
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_INT 1
66096: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
66097: LD_ADDR_VAR 0 3
66101: PUSH
66102: DOUBLE
66103: LD_EXP 66
66107: PUSH
66108: LD_VAR 0 2
66112: ARRAY
66113: INC
66114: ST_TO_ADDR
66115: LD_INT 1
66117: PUSH
66118: FOR_DOWNTO
66119: IFFALSE 66715
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
66121: LD_EXP 66
66125: PUSH
66126: LD_VAR 0 2
66130: ARRAY
66131: PUSH
66132: LD_VAR 0 3
66136: ARRAY
66137: PPUSH
66138: CALL_OW 301
66142: PUSH
66143: LD_EXP 66
66147: PUSH
66148: LD_VAR 0 2
66152: ARRAY
66153: PUSH
66154: LD_VAR 0 3
66158: ARRAY
66159: PPUSH
66160: CALL_OW 257
66164: PUSH
66165: LD_INT 1
66167: NONEQUAL
66168: OR
66169: IFFALSE 66232
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66171: LD_ADDR_VAR 0 5
66175: PUSH
66176: LD_EXP 66
66180: PUSH
66181: LD_VAR 0 2
66185: ARRAY
66186: PUSH
66187: LD_EXP 66
66191: PUSH
66192: LD_VAR 0 2
66196: ARRAY
66197: PUSH
66198: LD_VAR 0 3
66202: ARRAY
66203: DIFF
66204: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66205: LD_ADDR_EXP 66
66209: PUSH
66210: LD_EXP 66
66214: PPUSH
66215: LD_VAR 0 2
66219: PPUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: CALL_OW 1
66229: ST_TO_ADDR
// continue ;
66230: GO 66118
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
66232: LD_EXP 66
66236: PUSH
66237: LD_VAR 0 2
66241: ARRAY
66242: PUSH
66243: LD_VAR 0 3
66247: ARRAY
66248: PPUSH
66249: CALL 17892 0 1
66253: PUSH
66254: LD_EXP 66
66258: PUSH
66259: LD_VAR 0 2
66263: ARRAY
66264: PUSH
66265: LD_VAR 0 3
66269: ARRAY
66270: PPUSH
66271: CALL_OW 255
66275: PPUSH
66276: LD_EXP 65
66280: PUSH
66281: LD_VAR 0 2
66285: ARRAY
66286: PUSH
66287: LD_VAR 0 4
66291: ARRAY
66292: PUSH
66293: LD_INT 1
66295: ARRAY
66296: PPUSH
66297: LD_EXP 65
66301: PUSH
66302: LD_VAR 0 2
66306: ARRAY
66307: PUSH
66308: LD_VAR 0 4
66312: ARRAY
66313: PUSH
66314: LD_INT 2
66316: ARRAY
66317: PPUSH
66318: LD_INT 15
66320: PPUSH
66321: CALL 18852 0 4
66325: PUSH
66326: LD_INT 4
66328: ARRAY
66329: PUSH
66330: LD_EXP 66
66334: PUSH
66335: LD_VAR 0 2
66339: ARRAY
66340: PUSH
66341: LD_VAR 0 3
66345: ARRAY
66346: PPUSH
66347: LD_INT 10
66349: PPUSH
66350: CALL 20549 0 2
66354: PUSH
66355: LD_INT 4
66357: ARRAY
66358: OR
66359: AND
66360: IFFALSE 66383
// ComStop ( mc_miners [ i ] [ j ] ) ;
66362: LD_EXP 66
66366: PUSH
66367: LD_VAR 0 2
66371: ARRAY
66372: PUSH
66373: LD_VAR 0 3
66377: ARRAY
66378: PPUSH
66379: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
66383: LD_EXP 66
66387: PUSH
66388: LD_VAR 0 2
66392: ARRAY
66393: PUSH
66394: LD_VAR 0 3
66398: ARRAY
66399: PPUSH
66400: CALL_OW 257
66404: PUSH
66405: LD_INT 1
66407: EQUAL
66408: PUSH
66409: LD_EXP 66
66413: PUSH
66414: LD_VAR 0 2
66418: ARRAY
66419: PUSH
66420: LD_VAR 0 3
66424: ARRAY
66425: PPUSH
66426: CALL_OW 459
66430: NOT
66431: AND
66432: PUSH
66433: LD_EXP 66
66437: PUSH
66438: LD_VAR 0 2
66442: ARRAY
66443: PUSH
66444: LD_VAR 0 3
66448: ARRAY
66449: PPUSH
66450: CALL_OW 255
66454: PPUSH
66455: LD_EXP 65
66459: PUSH
66460: LD_VAR 0 2
66464: ARRAY
66465: PUSH
66466: LD_VAR 0 4
66470: ARRAY
66471: PUSH
66472: LD_INT 1
66474: ARRAY
66475: PPUSH
66476: LD_EXP 65
66480: PUSH
66481: LD_VAR 0 2
66485: ARRAY
66486: PUSH
66487: LD_VAR 0 4
66491: ARRAY
66492: PUSH
66493: LD_INT 2
66495: ARRAY
66496: PPUSH
66497: LD_INT 15
66499: PPUSH
66500: CALL 18852 0 4
66504: PUSH
66505: LD_INT 4
66507: ARRAY
66508: PUSH
66509: LD_INT 0
66511: EQUAL
66512: AND
66513: PUSH
66514: LD_EXP 66
66518: PUSH
66519: LD_VAR 0 2
66523: ARRAY
66524: PUSH
66525: LD_VAR 0 3
66529: ARRAY
66530: PPUSH
66531: CALL_OW 314
66535: NOT
66536: AND
66537: IFFALSE 66713
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
66539: LD_EXP 66
66543: PUSH
66544: LD_VAR 0 2
66548: ARRAY
66549: PUSH
66550: LD_VAR 0 3
66554: ARRAY
66555: PPUSH
66556: CALL_OW 310
66560: IFFALSE 66583
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
66562: LD_EXP 66
66566: PUSH
66567: LD_VAR 0 2
66571: ARRAY
66572: PUSH
66573: LD_VAR 0 3
66577: ARRAY
66578: PPUSH
66579: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
66583: LD_EXP 66
66587: PUSH
66588: LD_VAR 0 2
66592: ARRAY
66593: PUSH
66594: LD_VAR 0 3
66598: ARRAY
66599: PPUSH
66600: CALL_OW 314
66604: NOT
66605: IFFALSE 66673
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
66607: LD_EXP 66
66611: PUSH
66612: LD_VAR 0 2
66616: ARRAY
66617: PUSH
66618: LD_VAR 0 3
66622: ARRAY
66623: PPUSH
66624: LD_EXP 65
66628: PUSH
66629: LD_VAR 0 2
66633: ARRAY
66634: PUSH
66635: LD_VAR 0 4
66639: ARRAY
66640: PUSH
66641: LD_INT 1
66643: ARRAY
66644: PPUSH
66645: LD_EXP 65
66649: PUSH
66650: LD_VAR 0 2
66654: ARRAY
66655: PUSH
66656: LD_VAR 0 4
66660: ARRAY
66661: PUSH
66662: LD_INT 2
66664: ARRAY
66665: PPUSH
66666: LD_INT 0
66668: PPUSH
66669: CALL_OW 193
// k := k + 1 ;
66673: LD_ADDR_VAR 0 4
66677: PUSH
66678: LD_VAR 0 4
66682: PUSH
66683: LD_INT 1
66685: PLUS
66686: ST_TO_ADDR
// if k > mc_mines [ i ] then
66687: LD_VAR 0 4
66691: PUSH
66692: LD_EXP 65
66696: PUSH
66697: LD_VAR 0 2
66701: ARRAY
66702: GREATER
66703: IFFALSE 66713
// k := 1 ;
66705: LD_ADDR_VAR 0 4
66709: PUSH
66710: LD_INT 1
66712: ST_TO_ADDR
// end ; end ;
66713: GO 66118
66715: POP
66716: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
66717: LD_ADDR_VAR 0 5
66721: PUSH
66722: LD_EXP 52
66726: PUSH
66727: LD_VAR 0 2
66731: ARRAY
66732: PPUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 30
66738: PUSH
66739: LD_INT 4
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 30
66748: PUSH
66749: LD_INT 5
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 30
66758: PUSH
66759: LD_INT 32
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: PPUSH
66772: CALL_OW 72
66776: ST_TO_ADDR
// if not tmp then
66777: LD_VAR 0 5
66781: NOT
66782: IFFALSE 66786
// continue ;
66784: GO 66035
// list := [ ] ;
66786: LD_ADDR_VAR 0 6
66790: PUSH
66791: EMPTY
66792: ST_TO_ADDR
// for j in tmp do
66793: LD_ADDR_VAR 0 3
66797: PUSH
66798: LD_VAR 0 5
66802: PUSH
66803: FOR_IN
66804: IFFALSE 66873
// begin for k in UnitsInside ( j ) do
66806: LD_ADDR_VAR 0 4
66810: PUSH
66811: LD_VAR 0 3
66815: PPUSH
66816: CALL_OW 313
66820: PUSH
66821: FOR_IN
66822: IFFALSE 66869
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
66824: LD_VAR 0 4
66828: PPUSH
66829: CALL_OW 257
66833: PUSH
66834: LD_INT 1
66836: EQUAL
66837: PUSH
66838: LD_VAR 0 4
66842: PPUSH
66843: CALL_OW 459
66847: NOT
66848: AND
66849: IFFALSE 66867
// list := list ^ k ;
66851: LD_ADDR_VAR 0 6
66855: PUSH
66856: LD_VAR 0 6
66860: PUSH
66861: LD_VAR 0 4
66865: ADD
66866: ST_TO_ADDR
66867: GO 66821
66869: POP
66870: POP
// end ;
66871: GO 66803
66873: POP
66874: POP
// list := list diff mc_miners [ i ] ;
66875: LD_ADDR_VAR 0 6
66879: PUSH
66880: LD_VAR 0 6
66884: PUSH
66885: LD_EXP 66
66889: PUSH
66890: LD_VAR 0 2
66894: ARRAY
66895: DIFF
66896: ST_TO_ADDR
// if not list then
66897: LD_VAR 0 6
66901: NOT
66902: IFFALSE 66906
// continue ;
66904: GO 66035
// k := mc_mines [ i ] - mc_miners [ i ] ;
66906: LD_ADDR_VAR 0 4
66910: PUSH
66911: LD_EXP 65
66915: PUSH
66916: LD_VAR 0 2
66920: ARRAY
66921: PUSH
66922: LD_EXP 66
66926: PUSH
66927: LD_VAR 0 2
66931: ARRAY
66932: MINUS
66933: ST_TO_ADDR
// if k > list then
66934: LD_VAR 0 4
66938: PUSH
66939: LD_VAR 0 6
66943: GREATER
66944: IFFALSE 66956
// k := list ;
66946: LD_ADDR_VAR 0 4
66950: PUSH
66951: LD_VAR 0 6
66955: ST_TO_ADDR
// for j = 1 to k do
66956: LD_ADDR_VAR 0 3
66960: PUSH
66961: DOUBLE
66962: LD_INT 1
66964: DEC
66965: ST_TO_ADDR
66966: LD_VAR 0 4
66970: PUSH
66971: FOR_TO
66972: IFFALSE 67026
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
66974: LD_ADDR_EXP 66
66978: PUSH
66979: LD_EXP 66
66983: PPUSH
66984: LD_VAR 0 2
66988: PUSH
66989: LD_EXP 66
66993: PUSH
66994: LD_VAR 0 2
66998: ARRAY
66999: PUSH
67000: LD_INT 1
67002: PLUS
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PPUSH
67008: LD_VAR 0 6
67012: PUSH
67013: LD_VAR 0 3
67017: ARRAY
67018: PPUSH
67019: CALL 17956 0 3
67023: ST_TO_ADDR
67024: GO 66971
67026: POP
67027: POP
// end ;
67028: GO 66035
67030: POP
67031: POP
// end ;
67032: LD_VAR 0 1
67036: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
67037: LD_INT 0
67039: PPUSH
67040: PPUSH
67041: PPUSH
67042: PPUSH
67043: PPUSH
67044: PPUSH
67045: PPUSH
67046: PPUSH
67047: PPUSH
67048: PPUSH
// if not mc_bases then
67049: LD_EXP 52
67053: NOT
67054: IFFALSE 67058
// exit ;
67056: GO 68808
// for i = 1 to mc_bases do
67058: LD_ADDR_VAR 0 2
67062: PUSH
67063: DOUBLE
67064: LD_INT 1
67066: DEC
67067: ST_TO_ADDR
67068: LD_EXP 52
67072: PUSH
67073: FOR_TO
67074: IFFALSE 68806
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67076: LD_EXP 52
67080: PUSH
67081: LD_VAR 0 2
67085: ARRAY
67086: NOT
67087: PUSH
67088: LD_EXP 59
67092: PUSH
67093: LD_VAR 0 2
67097: ARRAY
67098: OR
67099: IFFALSE 67103
// continue ;
67101: GO 67073
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67103: LD_EXP 68
67107: PUSH
67108: LD_VAR 0 2
67112: ARRAY
67113: NOT
67114: PUSH
67115: LD_EXP 69
67119: PUSH
67120: LD_VAR 0 2
67124: ARRAY
67125: AND
67126: IFFALSE 67164
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67128: LD_ADDR_EXP 69
67132: PUSH
67133: LD_EXP 69
67137: PPUSH
67138: LD_VAR 0 2
67142: PPUSH
67143: EMPTY
67144: PPUSH
67145: CALL_OW 1
67149: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67150: LD_VAR 0 2
67154: PPUSH
67155: LD_INT 107
67157: PPUSH
67158: CALL 57918 0 2
// continue ;
67162: GO 67073
// end ; target := [ ] ;
67164: LD_ADDR_VAR 0 6
67168: PUSH
67169: EMPTY
67170: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67171: LD_ADDR_VAR 0 3
67175: PUSH
67176: DOUBLE
67177: LD_EXP 68
67181: PUSH
67182: LD_VAR 0 2
67186: ARRAY
67187: INC
67188: ST_TO_ADDR
67189: LD_INT 1
67191: PUSH
67192: FOR_DOWNTO
67193: IFFALSE 67453
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67195: LD_EXP 68
67199: PUSH
67200: LD_VAR 0 2
67204: ARRAY
67205: PUSH
67206: LD_VAR 0 3
67210: ARRAY
67211: PUSH
67212: LD_INT 2
67214: ARRAY
67215: PPUSH
67216: LD_EXP 68
67220: PUSH
67221: LD_VAR 0 2
67225: ARRAY
67226: PUSH
67227: LD_VAR 0 3
67231: ARRAY
67232: PUSH
67233: LD_INT 3
67235: ARRAY
67236: PPUSH
67237: CALL_OW 488
67241: PUSH
67242: LD_EXP 68
67246: PUSH
67247: LD_VAR 0 2
67251: ARRAY
67252: PUSH
67253: LD_VAR 0 3
67257: ARRAY
67258: PUSH
67259: LD_INT 2
67261: ARRAY
67262: PPUSH
67263: LD_EXP 68
67267: PUSH
67268: LD_VAR 0 2
67272: ARRAY
67273: PUSH
67274: LD_VAR 0 3
67278: ARRAY
67279: PUSH
67280: LD_INT 3
67282: ARRAY
67283: PPUSH
67284: CALL_OW 284
67288: PUSH
67289: LD_INT 0
67291: EQUAL
67292: AND
67293: IFFALSE 67348
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
67295: LD_ADDR_VAR 0 5
67299: PUSH
67300: LD_EXP 68
67304: PUSH
67305: LD_VAR 0 2
67309: ARRAY
67310: PPUSH
67311: LD_VAR 0 3
67315: PPUSH
67316: CALL_OW 3
67320: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
67321: LD_ADDR_EXP 68
67325: PUSH
67326: LD_EXP 68
67330: PPUSH
67331: LD_VAR 0 2
67335: PPUSH
67336: LD_VAR 0 5
67340: PPUSH
67341: CALL_OW 1
67345: ST_TO_ADDR
// continue ;
67346: GO 67192
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
67348: LD_EXP 52
67352: PUSH
67353: LD_VAR 0 2
67357: ARRAY
67358: PUSH
67359: LD_INT 1
67361: ARRAY
67362: PPUSH
67363: CALL_OW 255
67367: PPUSH
67368: LD_EXP 68
67372: PUSH
67373: LD_VAR 0 2
67377: ARRAY
67378: PUSH
67379: LD_VAR 0 3
67383: ARRAY
67384: PUSH
67385: LD_INT 2
67387: ARRAY
67388: PPUSH
67389: LD_EXP 68
67393: PUSH
67394: LD_VAR 0 2
67398: ARRAY
67399: PUSH
67400: LD_VAR 0 3
67404: ARRAY
67405: PUSH
67406: LD_INT 3
67408: ARRAY
67409: PPUSH
67410: LD_INT 30
67412: PPUSH
67413: CALL 18852 0 4
67417: PUSH
67418: LD_INT 4
67420: ARRAY
67421: PUSH
67422: LD_INT 0
67424: EQUAL
67425: IFFALSE 67451
// begin target := mc_crates [ i ] [ j ] ;
67427: LD_ADDR_VAR 0 6
67431: PUSH
67432: LD_EXP 68
67436: PUSH
67437: LD_VAR 0 2
67441: ARRAY
67442: PUSH
67443: LD_VAR 0 3
67447: ARRAY
67448: ST_TO_ADDR
// break ;
67449: GO 67453
// end ; end ;
67451: GO 67192
67453: POP
67454: POP
// if not target then
67455: LD_VAR 0 6
67459: NOT
67460: IFFALSE 67464
// continue ;
67462: GO 67073
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
67464: LD_ADDR_VAR 0 7
67468: PUSH
67469: LD_EXP 71
67473: PUSH
67474: LD_VAR 0 2
67478: ARRAY
67479: PPUSH
67480: LD_INT 2
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: LD_INT 58
67488: PUSH
67489: EMPTY
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 61
67498: PUSH
67499: EMPTY
67500: LIST
67501: PUSH
67502: LD_INT 33
67504: PUSH
67505: LD_INT 5
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 33
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: LD_INT 34
67534: PUSH
67535: LD_INT 32
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 34
67544: PUSH
67545: LD_INT 51
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 34
67554: PUSH
67555: LD_INT 12
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PPUSH
67572: CALL_OW 72
67576: ST_TO_ADDR
// if not cargo then
67577: LD_VAR 0 7
67581: NOT
67582: IFFALSE 68225
// begin if mc_crates_collector [ i ] < 5 then
67584: LD_EXP 69
67588: PUSH
67589: LD_VAR 0 2
67593: ARRAY
67594: PUSH
67595: LD_INT 5
67597: LESS
67598: IFFALSE 67964
// begin if mc_ape [ i ] then
67600: LD_EXP 81
67604: PUSH
67605: LD_VAR 0 2
67609: ARRAY
67610: IFFALSE 67657
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
67612: LD_ADDR_VAR 0 5
67616: PUSH
67617: LD_EXP 81
67621: PUSH
67622: LD_VAR 0 2
67626: ARRAY
67627: PPUSH
67628: LD_INT 25
67630: PUSH
67631: LD_INT 16
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 24
67640: PUSH
67641: LD_INT 750
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PPUSH
67652: CALL_OW 72
67656: ST_TO_ADDR
// if not tmp then
67657: LD_VAR 0 5
67661: NOT
67662: IFFALSE 67709
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
67664: LD_ADDR_VAR 0 5
67668: PUSH
67669: LD_EXP 52
67673: PUSH
67674: LD_VAR 0 2
67678: ARRAY
67679: PPUSH
67680: LD_INT 25
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 24
67692: PUSH
67693: LD_INT 750
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PPUSH
67704: CALL_OW 72
67708: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
67709: LD_EXP 81
67713: PUSH
67714: LD_VAR 0 2
67718: ARRAY
67719: PUSH
67720: LD_EXP 52
67724: PUSH
67725: LD_VAR 0 2
67729: ARRAY
67730: PPUSH
67731: LD_INT 25
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 24
67743: PUSH
67744: LD_INT 750
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PPUSH
67755: CALL_OW 72
67759: AND
67760: PUSH
67761: LD_VAR 0 5
67765: PUSH
67766: LD_INT 5
67768: LESS
67769: AND
67770: IFFALSE 67852
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
67772: LD_ADDR_VAR 0 3
67776: PUSH
67777: LD_EXP 52
67781: PUSH
67782: LD_VAR 0 2
67786: ARRAY
67787: PPUSH
67788: LD_INT 25
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 24
67800: PUSH
67801: LD_INT 750
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PPUSH
67812: CALL_OW 72
67816: PUSH
67817: FOR_IN
67818: IFFALSE 67850
// begin tmp := tmp union j ;
67820: LD_ADDR_VAR 0 5
67824: PUSH
67825: LD_VAR 0 5
67829: PUSH
67830: LD_VAR 0 3
67834: UNION
67835: ST_TO_ADDR
// if tmp >= 5 then
67836: LD_VAR 0 5
67840: PUSH
67841: LD_INT 5
67843: GREATEREQUAL
67844: IFFALSE 67848
// break ;
67846: GO 67850
// end ;
67848: GO 67817
67850: POP
67851: POP
// end ; if not tmp then
67852: LD_VAR 0 5
67856: NOT
67857: IFFALSE 67861
// continue ;
67859: GO 67073
// for j in tmp do
67861: LD_ADDR_VAR 0 3
67865: PUSH
67866: LD_VAR 0 5
67870: PUSH
67871: FOR_IN
67872: IFFALSE 67962
// if not GetTag ( j ) then
67874: LD_VAR 0 3
67878: PPUSH
67879: CALL_OW 110
67883: NOT
67884: IFFALSE 67960
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
67886: LD_ADDR_EXP 69
67890: PUSH
67891: LD_EXP 69
67895: PPUSH
67896: LD_VAR 0 2
67900: PUSH
67901: LD_EXP 69
67905: PUSH
67906: LD_VAR 0 2
67910: ARRAY
67911: PUSH
67912: LD_INT 1
67914: PLUS
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PPUSH
67920: LD_VAR 0 3
67924: PPUSH
67925: CALL 17956 0 3
67929: ST_TO_ADDR
// SetTag ( j , 107 ) ;
67930: LD_VAR 0 3
67934: PPUSH
67935: LD_INT 107
67937: PPUSH
67938: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
67942: LD_EXP 69
67946: PUSH
67947: LD_VAR 0 2
67951: ARRAY
67952: PUSH
67953: LD_INT 5
67955: GREATEREQUAL
67956: IFFALSE 67960
// break ;
67958: GO 67962
// end ;
67960: GO 67871
67962: POP
67963: POP
// end ; if mc_crates_collector [ i ] and target then
67964: LD_EXP 69
67968: PUSH
67969: LD_VAR 0 2
67973: ARRAY
67974: PUSH
67975: LD_VAR 0 6
67979: AND
67980: IFFALSE 68223
// begin if mc_crates_collector [ i ] < target [ 1 ] then
67982: LD_EXP 69
67986: PUSH
67987: LD_VAR 0 2
67991: ARRAY
67992: PUSH
67993: LD_VAR 0 6
67997: PUSH
67998: LD_INT 1
68000: ARRAY
68001: LESS
68002: IFFALSE 68022
// tmp := mc_crates_collector [ i ] else
68004: LD_ADDR_VAR 0 5
68008: PUSH
68009: LD_EXP 69
68013: PUSH
68014: LD_VAR 0 2
68018: ARRAY
68019: ST_TO_ADDR
68020: GO 68036
// tmp := target [ 1 ] ;
68022: LD_ADDR_VAR 0 5
68026: PUSH
68027: LD_VAR 0 6
68031: PUSH
68032: LD_INT 1
68034: ARRAY
68035: ST_TO_ADDR
// k := 0 ;
68036: LD_ADDR_VAR 0 4
68040: PUSH
68041: LD_INT 0
68043: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
68044: LD_ADDR_VAR 0 3
68048: PUSH
68049: LD_EXP 69
68053: PUSH
68054: LD_VAR 0 2
68058: ARRAY
68059: PUSH
68060: FOR_IN
68061: IFFALSE 68221
// begin k := k + 1 ;
68063: LD_ADDR_VAR 0 4
68067: PUSH
68068: LD_VAR 0 4
68072: PUSH
68073: LD_INT 1
68075: PLUS
68076: ST_TO_ADDR
// if k > tmp then
68077: LD_VAR 0 4
68081: PUSH
68082: LD_VAR 0 5
68086: GREATER
68087: IFFALSE 68091
// break ;
68089: GO 68221
// if not GetClass ( j ) in [ 2 , 16 ] then
68091: LD_VAR 0 3
68095: PPUSH
68096: CALL_OW 257
68100: PUSH
68101: LD_INT 2
68103: PUSH
68104: LD_INT 16
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: IN
68111: NOT
68112: IFFALSE 68165
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
68114: LD_ADDR_EXP 69
68118: PUSH
68119: LD_EXP 69
68123: PPUSH
68124: LD_VAR 0 2
68128: PPUSH
68129: LD_EXP 69
68133: PUSH
68134: LD_VAR 0 2
68138: ARRAY
68139: PUSH
68140: LD_VAR 0 3
68144: DIFF
68145: PPUSH
68146: CALL_OW 1
68150: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68151: LD_VAR 0 3
68155: PPUSH
68156: LD_INT 0
68158: PPUSH
68159: CALL_OW 109
// continue ;
68163: GO 68060
// end ; if IsInUnit ( j ) then
68165: LD_VAR 0 3
68169: PPUSH
68170: CALL_OW 310
68174: IFFALSE 68185
// ComExitBuilding ( j ) ;
68176: LD_VAR 0 3
68180: PPUSH
68181: CALL_OW 122
// wait ( 3 ) ;
68185: LD_INT 3
68187: PPUSH
68188: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68192: LD_VAR 0 3
68196: PPUSH
68197: LD_VAR 0 6
68201: PUSH
68202: LD_INT 2
68204: ARRAY
68205: PPUSH
68206: LD_VAR 0 6
68210: PUSH
68211: LD_INT 3
68213: ARRAY
68214: PPUSH
68215: CALL_OW 117
// end ;
68219: GO 68060
68221: POP
68222: POP
// end ; end else
68223: GO 68804
// begin for j in cargo do
68225: LD_ADDR_VAR 0 3
68229: PUSH
68230: LD_VAR 0 7
68234: PUSH
68235: FOR_IN
68236: IFFALSE 68802
// begin if GetTag ( j ) <> 0 then
68238: LD_VAR 0 3
68242: PPUSH
68243: CALL_OW 110
68247: PUSH
68248: LD_INT 0
68250: NONEQUAL
68251: IFFALSE 68255
// continue ;
68253: GO 68235
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
68255: LD_VAR 0 3
68259: PPUSH
68260: CALL_OW 256
68264: PUSH
68265: LD_INT 1000
68267: LESS
68268: PUSH
68269: LD_VAR 0 3
68273: PPUSH
68274: LD_EXP 76
68278: PUSH
68279: LD_VAR 0 2
68283: ARRAY
68284: PPUSH
68285: CALL_OW 308
68289: NOT
68290: AND
68291: IFFALSE 68313
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68293: LD_VAR 0 3
68297: PPUSH
68298: LD_EXP 76
68302: PUSH
68303: LD_VAR 0 2
68307: ARRAY
68308: PPUSH
68309: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
68313: LD_VAR 0 3
68317: PPUSH
68318: CALL_OW 256
68322: PUSH
68323: LD_INT 1000
68325: LESS
68326: PUSH
68327: LD_VAR 0 3
68331: PPUSH
68332: LD_EXP 76
68336: PUSH
68337: LD_VAR 0 2
68341: ARRAY
68342: PPUSH
68343: CALL_OW 308
68347: AND
68348: IFFALSE 68352
// continue ;
68350: GO 68235
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68352: LD_VAR 0 3
68356: PPUSH
68357: CALL_OW 262
68361: PUSH
68362: LD_INT 2
68364: EQUAL
68365: PUSH
68366: LD_VAR 0 3
68370: PPUSH
68371: CALL_OW 261
68375: PUSH
68376: LD_INT 15
68378: LESS
68379: AND
68380: IFFALSE 68384
// continue ;
68382: GO 68235
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68384: LD_VAR 0 3
68388: PPUSH
68389: CALL_OW 262
68393: PUSH
68394: LD_INT 1
68396: EQUAL
68397: PUSH
68398: LD_VAR 0 3
68402: PPUSH
68403: CALL_OW 261
68407: PUSH
68408: LD_INT 10
68410: LESS
68411: AND
68412: IFFALSE 68741
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68414: LD_ADDR_VAR 0 8
68418: PUSH
68419: LD_EXP 52
68423: PUSH
68424: LD_VAR 0 2
68428: ARRAY
68429: PPUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 30
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 30
68445: PUSH
68446: LD_INT 1
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: PPUSH
68458: CALL_OW 72
68462: ST_TO_ADDR
// if not depot then
68463: LD_VAR 0 8
68467: NOT
68468: IFFALSE 68472
// continue ;
68470: GO 68235
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68472: LD_VAR 0 3
68476: PPUSH
68477: LD_VAR 0 8
68481: PPUSH
68482: LD_VAR 0 3
68486: PPUSH
68487: CALL_OW 74
68491: PPUSH
68492: CALL_OW 296
68496: PUSH
68497: LD_INT 6
68499: LESS
68500: IFFALSE 68516
// SetFuel ( j , 100 ) else
68502: LD_VAR 0 3
68506: PPUSH
68507: LD_INT 100
68509: PPUSH
68510: CALL_OW 240
68514: GO 68741
// if GetFuel ( j ) = 0 then
68516: LD_VAR 0 3
68520: PPUSH
68521: CALL_OW 261
68525: PUSH
68526: LD_INT 0
68528: EQUAL
68529: IFFALSE 68741
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
68531: LD_ADDR_EXP 71
68535: PUSH
68536: LD_EXP 71
68540: PPUSH
68541: LD_VAR 0 2
68545: PPUSH
68546: LD_EXP 71
68550: PUSH
68551: LD_VAR 0 2
68555: ARRAY
68556: PUSH
68557: LD_VAR 0 3
68561: DIFF
68562: PPUSH
68563: CALL_OW 1
68567: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
68568: LD_VAR 0 3
68572: PPUSH
68573: CALL_OW 263
68577: PUSH
68578: LD_INT 1
68580: EQUAL
68581: IFFALSE 68597
// ComExitVehicle ( IsInUnit ( j ) ) ;
68583: LD_VAR 0 3
68587: PPUSH
68588: CALL_OW 310
68592: PPUSH
68593: CALL_OW 121
// if GetControl ( j ) = control_remote then
68597: LD_VAR 0 3
68601: PPUSH
68602: CALL_OW 263
68606: PUSH
68607: LD_INT 2
68609: EQUAL
68610: IFFALSE 68621
// ComUnlink ( j ) ;
68612: LD_VAR 0 3
68616: PPUSH
68617: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
68621: LD_ADDR_VAR 0 9
68625: PUSH
68626: LD_VAR 0 2
68630: PPUSH
68631: LD_INT 3
68633: PPUSH
68634: CALL 77878 0 2
68638: ST_TO_ADDR
// if fac then
68639: LD_VAR 0 9
68643: IFFALSE 68739
// begin for k in fac do
68645: LD_ADDR_VAR 0 4
68649: PUSH
68650: LD_VAR 0 9
68654: PUSH
68655: FOR_IN
68656: IFFALSE 68737
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
68658: LD_ADDR_VAR 0 10
68662: PUSH
68663: LD_VAR 0 9
68667: PPUSH
68668: LD_VAR 0 3
68672: PPUSH
68673: CALL_OW 265
68677: PPUSH
68678: LD_VAR 0 3
68682: PPUSH
68683: CALL_OW 262
68687: PPUSH
68688: LD_VAR 0 3
68692: PPUSH
68693: CALL_OW 263
68697: PPUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 264
68707: PPUSH
68708: CALL 15488 0 5
68712: ST_TO_ADDR
// if components then
68713: LD_VAR 0 10
68717: IFFALSE 68735
// begin MC_InsertProduceList ( i , components ) ;
68719: LD_VAR 0 2
68723: PPUSH
68724: LD_VAR 0 10
68728: PPUSH
68729: CALL 77423 0 2
// break ;
68733: GO 68737
// end ; end ;
68735: GO 68655
68737: POP
68738: POP
// end ; continue ;
68739: GO 68235
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
68741: LD_VAR 0 3
68745: PPUSH
68746: LD_INT 1
68748: PPUSH
68749: CALL_OW 289
68753: PUSH
68754: LD_INT 100
68756: LESS
68757: PUSH
68758: LD_VAR 0 3
68762: PPUSH
68763: CALL_OW 314
68767: NOT
68768: AND
68769: IFFALSE 68798
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68771: LD_VAR 0 3
68775: PPUSH
68776: LD_VAR 0 6
68780: PUSH
68781: LD_INT 2
68783: ARRAY
68784: PPUSH
68785: LD_VAR 0 6
68789: PUSH
68790: LD_INT 3
68792: ARRAY
68793: PPUSH
68794: CALL_OW 117
// break ;
68798: GO 68802
// end ;
68800: GO 68235
68802: POP
68803: POP
// end ; end ;
68804: GO 67073
68806: POP
68807: POP
// end ;
68808: LD_VAR 0 1
68812: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
68813: LD_INT 0
68815: PPUSH
68816: PPUSH
68817: PPUSH
68818: PPUSH
// if not mc_bases then
68819: LD_EXP 52
68823: NOT
68824: IFFALSE 68828
// exit ;
68826: GO 68989
// for i = 1 to mc_bases do
68828: LD_ADDR_VAR 0 2
68832: PUSH
68833: DOUBLE
68834: LD_INT 1
68836: DEC
68837: ST_TO_ADDR
68838: LD_EXP 52
68842: PUSH
68843: FOR_TO
68844: IFFALSE 68987
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
68846: LD_ADDR_VAR 0 4
68850: PUSH
68851: LD_EXP 71
68855: PUSH
68856: LD_VAR 0 2
68860: ARRAY
68861: PUSH
68862: LD_EXP 74
68866: PUSH
68867: LD_VAR 0 2
68871: ARRAY
68872: UNION
68873: PPUSH
68874: LD_INT 33
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PPUSH
68884: CALL_OW 72
68888: ST_TO_ADDR
// if tmp then
68889: LD_VAR 0 4
68893: IFFALSE 68985
// for j in tmp do
68895: LD_ADDR_VAR 0 3
68899: PUSH
68900: LD_VAR 0 4
68904: PUSH
68905: FOR_IN
68906: IFFALSE 68983
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
68908: LD_VAR 0 3
68912: PPUSH
68913: CALL_OW 312
68917: NOT
68918: PUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL_OW 256
68928: PUSH
68929: LD_INT 250
68931: GREATEREQUAL
68932: AND
68933: IFFALSE 68946
// Connect ( j ) else
68935: LD_VAR 0 3
68939: PPUSH
68940: CALL 20889 0 1
68944: GO 68981
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
68946: LD_VAR 0 3
68950: PPUSH
68951: CALL_OW 256
68955: PUSH
68956: LD_INT 250
68958: LESS
68959: PUSH
68960: LD_VAR 0 3
68964: PPUSH
68965: CALL_OW 312
68969: AND
68970: IFFALSE 68981
// ComUnlink ( j ) ;
68972: LD_VAR 0 3
68976: PPUSH
68977: CALL_OW 136
68981: GO 68905
68983: POP
68984: POP
// end ;
68985: GO 68843
68987: POP
68988: POP
// end ;
68989: LD_VAR 0 1
68993: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
68994: LD_INT 0
68996: PPUSH
68997: PPUSH
68998: PPUSH
68999: PPUSH
69000: PPUSH
// if not mc_bases then
69001: LD_EXP 52
69005: NOT
69006: IFFALSE 69010
// exit ;
69008: GO 69455
// for i = 1 to mc_bases do
69010: LD_ADDR_VAR 0 2
69014: PUSH
69015: DOUBLE
69016: LD_INT 1
69018: DEC
69019: ST_TO_ADDR
69020: LD_EXP 52
69024: PUSH
69025: FOR_TO
69026: IFFALSE 69453
// begin if not mc_produce [ i ] then
69028: LD_EXP 73
69032: PUSH
69033: LD_VAR 0 2
69037: ARRAY
69038: NOT
69039: IFFALSE 69043
// continue ;
69041: GO 69025
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69043: LD_ADDR_VAR 0 5
69047: PUSH
69048: LD_EXP 52
69052: PUSH
69053: LD_VAR 0 2
69057: ARRAY
69058: PPUSH
69059: LD_INT 30
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PPUSH
69069: CALL_OW 72
69073: ST_TO_ADDR
// if not fac then
69074: LD_VAR 0 5
69078: NOT
69079: IFFALSE 69083
// continue ;
69081: GO 69025
// for j in fac do
69083: LD_ADDR_VAR 0 3
69087: PUSH
69088: LD_VAR 0 5
69092: PUSH
69093: FOR_IN
69094: IFFALSE 69449
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
69096: LD_VAR 0 3
69100: PPUSH
69101: CALL_OW 461
69105: PUSH
69106: LD_INT 2
69108: NONEQUAL
69109: PUSH
69110: LD_VAR 0 3
69114: PPUSH
69115: LD_INT 15
69117: PPUSH
69118: CALL 20549 0 2
69122: PUSH
69123: LD_INT 4
69125: ARRAY
69126: OR
69127: IFFALSE 69131
// continue ;
69129: GO 69093
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69131: LD_VAR 0 3
69135: PPUSH
69136: LD_EXP 73
69140: PUSH
69141: LD_VAR 0 2
69145: ARRAY
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PUSH
69151: LD_INT 1
69153: ARRAY
69154: PPUSH
69155: LD_EXP 73
69159: PUSH
69160: LD_VAR 0 2
69164: ARRAY
69165: PUSH
69166: LD_INT 1
69168: ARRAY
69169: PUSH
69170: LD_INT 2
69172: ARRAY
69173: PPUSH
69174: LD_EXP 73
69178: PUSH
69179: LD_VAR 0 2
69183: ARRAY
69184: PUSH
69185: LD_INT 1
69187: ARRAY
69188: PUSH
69189: LD_INT 3
69191: ARRAY
69192: PPUSH
69193: LD_EXP 73
69197: PUSH
69198: LD_VAR 0 2
69202: ARRAY
69203: PUSH
69204: LD_INT 1
69206: ARRAY
69207: PUSH
69208: LD_INT 4
69210: ARRAY
69211: PPUSH
69212: CALL_OW 448
69216: PUSH
69217: LD_VAR 0 3
69221: PPUSH
69222: LD_EXP 73
69226: PUSH
69227: LD_VAR 0 2
69231: ARRAY
69232: PUSH
69233: LD_INT 1
69235: ARRAY
69236: PUSH
69237: LD_INT 1
69239: ARRAY
69240: PUSH
69241: LD_EXP 73
69245: PUSH
69246: LD_VAR 0 2
69250: ARRAY
69251: PUSH
69252: LD_INT 1
69254: ARRAY
69255: PUSH
69256: LD_INT 2
69258: ARRAY
69259: PUSH
69260: LD_EXP 73
69264: PUSH
69265: LD_VAR 0 2
69269: ARRAY
69270: PUSH
69271: LD_INT 1
69273: ARRAY
69274: PUSH
69275: LD_INT 3
69277: ARRAY
69278: PUSH
69279: LD_EXP 73
69283: PUSH
69284: LD_VAR 0 2
69288: ARRAY
69289: PUSH
69290: LD_INT 1
69292: ARRAY
69293: PUSH
69294: LD_INT 4
69296: ARRAY
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: PPUSH
69304: CALL 24220 0 2
69308: AND
69309: IFFALSE 69447
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69311: LD_VAR 0 3
69315: PPUSH
69316: LD_EXP 73
69320: PUSH
69321: LD_VAR 0 2
69325: ARRAY
69326: PUSH
69327: LD_INT 1
69329: ARRAY
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PPUSH
69335: LD_EXP 73
69339: PUSH
69340: LD_VAR 0 2
69344: ARRAY
69345: PUSH
69346: LD_INT 1
69348: ARRAY
69349: PUSH
69350: LD_INT 2
69352: ARRAY
69353: PPUSH
69354: LD_EXP 73
69358: PUSH
69359: LD_VAR 0 2
69363: ARRAY
69364: PUSH
69365: LD_INT 1
69367: ARRAY
69368: PUSH
69369: LD_INT 3
69371: ARRAY
69372: PPUSH
69373: LD_EXP 73
69377: PUSH
69378: LD_VAR 0 2
69382: ARRAY
69383: PUSH
69384: LD_INT 1
69386: ARRAY
69387: PUSH
69388: LD_INT 4
69390: ARRAY
69391: PPUSH
69392: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69396: LD_ADDR_VAR 0 4
69400: PUSH
69401: LD_EXP 73
69405: PUSH
69406: LD_VAR 0 2
69410: ARRAY
69411: PPUSH
69412: LD_INT 1
69414: PPUSH
69415: CALL_OW 3
69419: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69420: LD_ADDR_EXP 73
69424: PUSH
69425: LD_EXP 73
69429: PPUSH
69430: LD_VAR 0 2
69434: PPUSH
69435: LD_VAR 0 4
69439: PPUSH
69440: CALL_OW 1
69444: ST_TO_ADDR
// break ;
69445: GO 69449
// end ; end ;
69447: GO 69093
69449: POP
69450: POP
// end ;
69451: GO 69025
69453: POP
69454: POP
// end ;
69455: LD_VAR 0 1
69459: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69460: LD_INT 0
69462: PPUSH
69463: PPUSH
69464: PPUSH
// if not mc_bases then
69465: LD_EXP 52
69469: NOT
69470: IFFALSE 69474
// exit ;
69472: GO 69563
// for i = 1 to mc_bases do
69474: LD_ADDR_VAR 0 2
69478: PUSH
69479: DOUBLE
69480: LD_INT 1
69482: DEC
69483: ST_TO_ADDR
69484: LD_EXP 52
69488: PUSH
69489: FOR_TO
69490: IFFALSE 69561
// begin if mc_attack [ i ] then
69492: LD_EXP 72
69496: PUSH
69497: LD_VAR 0 2
69501: ARRAY
69502: IFFALSE 69559
// begin tmp := mc_attack [ i ] [ 1 ] ;
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: LD_EXP 72
69513: PUSH
69514: LD_VAR 0 2
69518: ARRAY
69519: PUSH
69520: LD_INT 1
69522: ARRAY
69523: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
69524: LD_ADDR_EXP 72
69528: PUSH
69529: LD_EXP 72
69533: PPUSH
69534: LD_VAR 0 2
69538: PPUSH
69539: EMPTY
69540: PPUSH
69541: CALL_OW 1
69545: ST_TO_ADDR
// Attack ( tmp ) ;
69546: LD_VAR 0 3
69550: PPUSH
69551: CALL 46433 0 1
// exit ;
69555: POP
69556: POP
69557: GO 69563
// end ; end ;
69559: GO 69489
69561: POP
69562: POP
// end ;
69563: LD_VAR 0 1
69567: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
69568: LD_INT 0
69570: PPUSH
69571: PPUSH
69572: PPUSH
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
// if not mc_bases then
69577: LD_EXP 52
69581: NOT
69582: IFFALSE 69586
// exit ;
69584: GO 70168
// for i = 1 to mc_bases do
69586: LD_ADDR_VAR 0 2
69590: PUSH
69591: DOUBLE
69592: LD_INT 1
69594: DEC
69595: ST_TO_ADDR
69596: LD_EXP 52
69600: PUSH
69601: FOR_TO
69602: IFFALSE 70166
// begin if not mc_bases [ i ] then
69604: LD_EXP 52
69608: PUSH
69609: LD_VAR 0 2
69613: ARRAY
69614: NOT
69615: IFFALSE 69619
// continue ;
69617: GO 69601
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
69619: LD_ADDR_VAR 0 7
69623: PUSH
69624: LD_EXP 52
69628: PUSH
69629: LD_VAR 0 2
69633: ARRAY
69634: PUSH
69635: LD_INT 1
69637: ARRAY
69638: PPUSH
69639: CALL 14792 0 1
69643: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
69644: LD_ADDR_EXP 75
69648: PUSH
69649: LD_EXP 75
69653: PPUSH
69654: LD_VAR 0 2
69658: PPUSH
69659: LD_EXP 52
69663: PUSH
69664: LD_VAR 0 2
69668: ARRAY
69669: PUSH
69670: LD_INT 1
69672: ARRAY
69673: PPUSH
69674: CALL_OW 255
69678: PPUSH
69679: LD_EXP 77
69683: PUSH
69684: LD_VAR 0 2
69688: ARRAY
69689: PPUSH
69690: CALL 12710 0 2
69694: PPUSH
69695: CALL_OW 1
69699: ST_TO_ADDR
// if not mc_scan [ i ] then
69700: LD_EXP 75
69704: PUSH
69705: LD_VAR 0 2
69709: ARRAY
69710: NOT
69711: IFFALSE 69866
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69713: LD_ADDR_VAR 0 4
69717: PUSH
69718: LD_EXP 52
69722: PUSH
69723: LD_VAR 0 2
69727: ARRAY
69728: PPUSH
69729: LD_INT 2
69731: PUSH
69732: LD_INT 25
69734: PUSH
69735: LD_INT 5
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 25
69744: PUSH
69745: LD_INT 8
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 25
69754: PUSH
69755: LD_INT 9
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: PPUSH
69768: CALL_OW 72
69772: ST_TO_ADDR
// if not tmp then
69773: LD_VAR 0 4
69777: NOT
69778: IFFALSE 69782
// continue ;
69780: GO 69601
// for j in tmp do
69782: LD_ADDR_VAR 0 3
69786: PUSH
69787: LD_VAR 0 4
69791: PUSH
69792: FOR_IN
69793: IFFALSE 69864
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
69795: LD_VAR 0 3
69799: PPUSH
69800: CALL_OW 310
69804: PPUSH
69805: CALL_OW 266
69809: PUSH
69810: LD_INT 5
69812: EQUAL
69813: PUSH
69814: LD_VAR 0 3
69818: PPUSH
69819: CALL_OW 257
69823: PUSH
69824: LD_INT 1
69826: EQUAL
69827: AND
69828: PUSH
69829: LD_VAR 0 3
69833: PPUSH
69834: CALL_OW 459
69838: NOT
69839: AND
69840: PUSH
69841: LD_VAR 0 7
69845: AND
69846: IFFALSE 69862
// ComChangeProfession ( j , class ) ;
69848: LD_VAR 0 3
69852: PPUSH
69853: LD_VAR 0 7
69857: PPUSH
69858: CALL_OW 123
69862: GO 69792
69864: POP
69865: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
69866: LD_EXP 75
69870: PUSH
69871: LD_VAR 0 2
69875: ARRAY
69876: PUSH
69877: LD_EXP 74
69881: PUSH
69882: LD_VAR 0 2
69886: ARRAY
69887: NOT
69888: AND
69889: PUSH
69890: LD_EXP 52
69894: PUSH
69895: LD_VAR 0 2
69899: ARRAY
69900: PPUSH
69901: LD_INT 30
69903: PUSH
69904: LD_INT 32
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PPUSH
69911: CALL_OW 72
69915: NOT
69916: AND
69917: PUSH
69918: LD_EXP 52
69922: PUSH
69923: LD_VAR 0 2
69927: ARRAY
69928: PPUSH
69929: LD_INT 2
69931: PUSH
69932: LD_INT 30
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 30
69944: PUSH
69945: LD_INT 5
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: LIST
69956: PPUSH
69957: CALL_OW 72
69961: NOT
69962: AND
69963: IFFALSE 70095
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69965: LD_ADDR_VAR 0 4
69969: PUSH
69970: LD_EXP 52
69974: PUSH
69975: LD_VAR 0 2
69979: ARRAY
69980: PPUSH
69981: LD_INT 2
69983: PUSH
69984: LD_INT 25
69986: PUSH
69987: LD_INT 1
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 25
69996: PUSH
69997: LD_INT 5
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 25
70006: PUSH
70007: LD_INT 8
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 25
70016: PUSH
70017: LD_INT 9
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: PPUSH
70031: CALL_OW 72
70035: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
70036: LD_ADDR_VAR 0 4
70040: PUSH
70041: LD_VAR 0 4
70045: PUSH
70046: LD_VAR 0 4
70050: PPUSH
70051: LD_INT 18
70053: PPUSH
70054: CALL 51216 0 2
70058: DIFF
70059: ST_TO_ADDR
// if tmp then
70060: LD_VAR 0 4
70064: IFFALSE 70095
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
70066: LD_VAR 0 2
70070: PPUSH
70071: LD_VAR 0 4
70075: PPUSH
70076: LD_EXP 77
70080: PUSH
70081: LD_VAR 0 2
70085: ARRAY
70086: PPUSH
70087: CALL 12745 0 3
// exit ;
70091: POP
70092: POP
70093: GO 70168
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
70095: LD_EXP 75
70099: PUSH
70100: LD_VAR 0 2
70104: ARRAY
70105: PUSH
70106: LD_EXP 74
70110: PUSH
70111: LD_VAR 0 2
70115: ARRAY
70116: AND
70117: IFFALSE 70164
// begin tmp := mc_defender [ i ] ;
70119: LD_ADDR_VAR 0 4
70123: PUSH
70124: LD_EXP 74
70128: PUSH
70129: LD_VAR 0 2
70133: ARRAY
70134: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70135: LD_VAR 0 2
70139: PPUSH
70140: LD_VAR 0 4
70144: PPUSH
70145: LD_EXP 75
70149: PUSH
70150: LD_VAR 0 2
70154: ARRAY
70155: PPUSH
70156: CALL 13243 0 3
// exit ;
70160: POP
70161: POP
70162: GO 70168
// end ; end ;
70164: GO 69601
70166: POP
70167: POP
// end ;
70168: LD_VAR 0 1
70172: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
70173: LD_INT 0
70175: PPUSH
70176: PPUSH
70177: PPUSH
70178: PPUSH
70179: PPUSH
70180: PPUSH
70181: PPUSH
70182: PPUSH
70183: PPUSH
70184: PPUSH
70185: PPUSH
// if not mc_bases then
70186: LD_EXP 52
70190: NOT
70191: IFFALSE 70195
// exit ;
70193: GO 71282
// for i = 1 to mc_bases do
70195: LD_ADDR_VAR 0 2
70199: PUSH
70200: DOUBLE
70201: LD_INT 1
70203: DEC
70204: ST_TO_ADDR
70205: LD_EXP 52
70209: PUSH
70210: FOR_TO
70211: IFFALSE 71280
// begin tmp := mc_lab [ i ] ;
70213: LD_ADDR_VAR 0 6
70217: PUSH
70218: LD_EXP 85
70222: PUSH
70223: LD_VAR 0 2
70227: ARRAY
70228: ST_TO_ADDR
// if not tmp then
70229: LD_VAR 0 6
70233: NOT
70234: IFFALSE 70238
// continue ;
70236: GO 70210
// idle_lab := 0 ;
70238: LD_ADDR_VAR 0 11
70242: PUSH
70243: LD_INT 0
70245: ST_TO_ADDR
// for j in tmp do
70246: LD_ADDR_VAR 0 3
70250: PUSH
70251: LD_VAR 0 6
70255: PUSH
70256: FOR_IN
70257: IFFALSE 71276
// begin researching := false ;
70259: LD_ADDR_VAR 0 10
70263: PUSH
70264: LD_INT 0
70266: ST_TO_ADDR
// side := GetSide ( j ) ;
70267: LD_ADDR_VAR 0 4
70271: PUSH
70272: LD_VAR 0 3
70276: PPUSH
70277: CALL_OW 255
70281: ST_TO_ADDR
// if not mc_tech [ side ] then
70282: LD_EXP 79
70286: PUSH
70287: LD_VAR 0 4
70291: ARRAY
70292: NOT
70293: IFFALSE 70297
// continue ;
70295: GO 70256
// if BuildingStatus ( j ) = bs_idle then
70297: LD_VAR 0 3
70301: PPUSH
70302: CALL_OW 461
70306: PUSH
70307: LD_INT 2
70309: EQUAL
70310: IFFALSE 70498
// begin if idle_lab and UnitsInside ( j ) < 6 then
70312: LD_VAR 0 11
70316: PUSH
70317: LD_VAR 0 3
70321: PPUSH
70322: CALL_OW 313
70326: PUSH
70327: LD_INT 6
70329: LESS
70330: AND
70331: IFFALSE 70402
// begin tmp2 := UnitsInside ( idle_lab ) ;
70333: LD_ADDR_VAR 0 9
70337: PUSH
70338: LD_VAR 0 11
70342: PPUSH
70343: CALL_OW 313
70347: ST_TO_ADDR
// if tmp2 then
70348: LD_VAR 0 9
70352: IFFALSE 70394
// for x in tmp2 do
70354: LD_ADDR_VAR 0 7
70358: PUSH
70359: LD_VAR 0 9
70363: PUSH
70364: FOR_IN
70365: IFFALSE 70392
// begin ComExitBuilding ( x ) ;
70367: LD_VAR 0 7
70371: PPUSH
70372: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70376: LD_VAR 0 7
70380: PPUSH
70381: LD_VAR 0 3
70385: PPUSH
70386: CALL_OW 180
// end ;
70390: GO 70364
70392: POP
70393: POP
// idle_lab := 0 ;
70394: LD_ADDR_VAR 0 11
70398: PUSH
70399: LD_INT 0
70401: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
70402: LD_ADDR_VAR 0 5
70406: PUSH
70407: LD_EXP 79
70411: PUSH
70412: LD_VAR 0 4
70416: ARRAY
70417: PUSH
70418: FOR_IN
70419: IFFALSE 70479
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70421: LD_VAR 0 3
70425: PPUSH
70426: LD_VAR 0 5
70430: PPUSH
70431: CALL_OW 430
70435: PUSH
70436: LD_VAR 0 4
70440: PPUSH
70441: LD_VAR 0 5
70445: PPUSH
70446: CALL 11815 0 2
70450: AND
70451: IFFALSE 70477
// begin researching := true ;
70453: LD_ADDR_VAR 0 10
70457: PUSH
70458: LD_INT 1
70460: ST_TO_ADDR
// ComResearch ( j , t ) ;
70461: LD_VAR 0 3
70465: PPUSH
70466: LD_VAR 0 5
70470: PPUSH
70471: CALL_OW 124
// break ;
70475: GO 70479
// end ;
70477: GO 70418
70479: POP
70480: POP
// if not researching then
70481: LD_VAR 0 10
70485: NOT
70486: IFFALSE 70498
// idle_lab := j ;
70488: LD_ADDR_VAR 0 11
70492: PUSH
70493: LD_VAR 0 3
70497: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
70498: LD_VAR 0 3
70502: PPUSH
70503: CALL_OW 461
70507: PUSH
70508: LD_INT 10
70510: EQUAL
70511: IFFALSE 71099
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70513: LD_EXP 81
70517: PUSH
70518: LD_VAR 0 2
70522: ARRAY
70523: NOT
70524: PUSH
70525: LD_EXP 82
70529: PUSH
70530: LD_VAR 0 2
70534: ARRAY
70535: NOT
70536: AND
70537: PUSH
70538: LD_EXP 79
70542: PUSH
70543: LD_VAR 0 4
70547: ARRAY
70548: PUSH
70549: LD_INT 1
70551: GREATER
70552: AND
70553: IFFALSE 70684
// begin ComCancel ( j ) ;
70555: LD_VAR 0 3
70559: PPUSH
70560: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
70564: LD_ADDR_EXP 79
70568: PUSH
70569: LD_EXP 79
70573: PPUSH
70574: LD_VAR 0 4
70578: PPUSH
70579: LD_EXP 79
70583: PUSH
70584: LD_VAR 0 4
70588: ARRAY
70589: PPUSH
70590: LD_EXP 79
70594: PUSH
70595: LD_VAR 0 4
70599: ARRAY
70600: PUSH
70601: LD_INT 1
70603: MINUS
70604: PPUSH
70605: LD_EXP 79
70609: PUSH
70610: LD_VAR 0 4
70614: ARRAY
70615: PPUSH
70616: LD_INT 0
70618: PPUSH
70619: CALL 17374 0 4
70623: PPUSH
70624: CALL_OW 1
70628: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
70629: LD_ADDR_EXP 79
70633: PUSH
70634: LD_EXP 79
70638: PPUSH
70639: LD_VAR 0 4
70643: PPUSH
70644: LD_EXP 79
70648: PUSH
70649: LD_VAR 0 4
70653: ARRAY
70654: PPUSH
70655: LD_EXP 79
70659: PUSH
70660: LD_VAR 0 4
70664: ARRAY
70665: PPUSH
70666: LD_INT 1
70668: PPUSH
70669: LD_INT 0
70671: PPUSH
70672: CALL 17374 0 4
70676: PPUSH
70677: CALL_OW 1
70681: ST_TO_ADDR
// continue ;
70682: GO 70256
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
70684: LD_EXP 81
70688: PUSH
70689: LD_VAR 0 2
70693: ARRAY
70694: PUSH
70695: LD_EXP 82
70699: PUSH
70700: LD_VAR 0 2
70704: ARRAY
70705: NOT
70706: AND
70707: IFFALSE 70834
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
70709: LD_ADDR_EXP 82
70713: PUSH
70714: LD_EXP 82
70718: PPUSH
70719: LD_VAR 0 2
70723: PUSH
70724: LD_EXP 82
70728: PUSH
70729: LD_VAR 0 2
70733: ARRAY
70734: PUSH
70735: LD_INT 1
70737: PLUS
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PPUSH
70743: LD_EXP 81
70747: PUSH
70748: LD_VAR 0 2
70752: ARRAY
70753: PUSH
70754: LD_INT 1
70756: ARRAY
70757: PPUSH
70758: CALL 17956 0 3
70762: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
70763: LD_EXP 81
70767: PUSH
70768: LD_VAR 0 2
70772: ARRAY
70773: PUSH
70774: LD_INT 1
70776: ARRAY
70777: PPUSH
70778: LD_INT 112
70780: PPUSH
70781: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
70785: LD_ADDR_VAR 0 9
70789: PUSH
70790: LD_EXP 81
70794: PUSH
70795: LD_VAR 0 2
70799: ARRAY
70800: PPUSH
70801: LD_INT 1
70803: PPUSH
70804: CALL_OW 3
70808: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
70809: LD_ADDR_EXP 81
70813: PUSH
70814: LD_EXP 81
70818: PPUSH
70819: LD_VAR 0 2
70823: PPUSH
70824: LD_VAR 0 9
70828: PPUSH
70829: CALL_OW 1
70833: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
70834: LD_EXP 81
70838: PUSH
70839: LD_VAR 0 2
70843: ARRAY
70844: PUSH
70845: LD_EXP 82
70849: PUSH
70850: LD_VAR 0 2
70854: ARRAY
70855: AND
70856: PUSH
70857: LD_EXP 82
70861: PUSH
70862: LD_VAR 0 2
70866: ARRAY
70867: PUSH
70868: LD_INT 1
70870: ARRAY
70871: PPUSH
70872: CALL_OW 310
70876: NOT
70877: AND
70878: PUSH
70879: LD_VAR 0 3
70883: PPUSH
70884: CALL_OW 313
70888: PUSH
70889: LD_INT 6
70891: EQUAL
70892: AND
70893: IFFALSE 70949
// begin tmp2 := UnitsInside ( j ) ;
70895: LD_ADDR_VAR 0 9
70899: PUSH
70900: LD_VAR 0 3
70904: PPUSH
70905: CALL_OW 313
70909: ST_TO_ADDR
// if tmp2 = 6 then
70910: LD_VAR 0 9
70914: PUSH
70915: LD_INT 6
70917: EQUAL
70918: IFFALSE 70949
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
70920: LD_VAR 0 9
70924: PUSH
70925: LD_INT 1
70927: ARRAY
70928: PPUSH
70929: LD_INT 112
70931: PPUSH
70932: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
70936: LD_VAR 0 9
70940: PUSH
70941: LD_INT 1
70943: ARRAY
70944: PPUSH
70945: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
70949: LD_EXP 82
70953: PUSH
70954: LD_VAR 0 2
70958: ARRAY
70959: PUSH
70960: LD_EXP 82
70964: PUSH
70965: LD_VAR 0 2
70969: ARRAY
70970: PUSH
70971: LD_INT 1
70973: ARRAY
70974: PPUSH
70975: CALL_OW 314
70979: NOT
70980: AND
70981: PUSH
70982: LD_EXP 82
70986: PUSH
70987: LD_VAR 0 2
70991: ARRAY
70992: PUSH
70993: LD_INT 1
70995: ARRAY
70996: PPUSH
70997: CALL_OW 310
71001: NOT
71002: AND
71003: IFFALSE 71029
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71005: LD_EXP 82
71009: PUSH
71010: LD_VAR 0 2
71014: ARRAY
71015: PUSH
71016: LD_INT 1
71018: ARRAY
71019: PPUSH
71020: LD_VAR 0 3
71024: PPUSH
71025: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71029: LD_EXP 82
71033: PUSH
71034: LD_VAR 0 2
71038: ARRAY
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PPUSH
71044: CALL_OW 310
71048: PUSH
71049: LD_EXP 82
71053: PUSH
71054: LD_VAR 0 2
71058: ARRAY
71059: PUSH
71060: LD_INT 1
71062: ARRAY
71063: PPUSH
71064: CALL_OW 310
71068: PPUSH
71069: CALL_OW 461
71073: PUSH
71074: LD_INT 3
71076: NONEQUAL
71077: AND
71078: IFFALSE 71099
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71080: LD_EXP 82
71084: PUSH
71085: LD_VAR 0 2
71089: ARRAY
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PPUSH
71095: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71099: LD_VAR 0 3
71103: PPUSH
71104: CALL_OW 461
71108: PUSH
71109: LD_INT 6
71111: EQUAL
71112: PUSH
71113: LD_VAR 0 6
71117: PUSH
71118: LD_INT 1
71120: GREATER
71121: AND
71122: IFFALSE 71274
// begin sci := [ ] ;
71124: LD_ADDR_VAR 0 8
71128: PUSH
71129: EMPTY
71130: ST_TO_ADDR
// for x in ( tmp diff j ) do
71131: LD_ADDR_VAR 0 7
71135: PUSH
71136: LD_VAR 0 6
71140: PUSH
71141: LD_VAR 0 3
71145: DIFF
71146: PUSH
71147: FOR_IN
71148: IFFALSE 71200
// begin if sci = 6 then
71150: LD_VAR 0 8
71154: PUSH
71155: LD_INT 6
71157: EQUAL
71158: IFFALSE 71162
// break ;
71160: GO 71200
// if BuildingStatus ( x ) = bs_idle then
71162: LD_VAR 0 7
71166: PPUSH
71167: CALL_OW 461
71171: PUSH
71172: LD_INT 2
71174: EQUAL
71175: IFFALSE 71198
// sci := sci ^ UnitsInside ( x ) ;
71177: LD_ADDR_VAR 0 8
71181: PUSH
71182: LD_VAR 0 8
71186: PUSH
71187: LD_VAR 0 7
71191: PPUSH
71192: CALL_OW 313
71196: ADD
71197: ST_TO_ADDR
// end ;
71198: GO 71147
71200: POP
71201: POP
// if not sci then
71202: LD_VAR 0 8
71206: NOT
71207: IFFALSE 71211
// continue ;
71209: GO 70256
// for x in sci do
71211: LD_ADDR_VAR 0 7
71215: PUSH
71216: LD_VAR 0 8
71220: PUSH
71221: FOR_IN
71222: IFFALSE 71272
// if IsInUnit ( x ) and not HasTask ( x ) then
71224: LD_VAR 0 7
71228: PPUSH
71229: CALL_OW 310
71233: PUSH
71234: LD_VAR 0 7
71238: PPUSH
71239: CALL_OW 314
71243: NOT
71244: AND
71245: IFFALSE 71270
// begin ComExitBuilding ( x ) ;
71247: LD_VAR 0 7
71251: PPUSH
71252: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71256: LD_VAR 0 7
71260: PPUSH
71261: LD_VAR 0 3
71265: PPUSH
71266: CALL_OW 180
// end ;
71270: GO 71221
71272: POP
71273: POP
// end ; end ;
71274: GO 70256
71276: POP
71277: POP
// end ;
71278: GO 70210
71280: POP
71281: POP
// end ;
71282: LD_VAR 0 1
71286: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
71287: LD_INT 0
71289: PPUSH
71290: PPUSH
// if not mc_bases then
71291: LD_EXP 52
71295: NOT
71296: IFFALSE 71300
// exit ;
71298: GO 71381
// for i = 1 to mc_bases do
71300: LD_ADDR_VAR 0 2
71304: PUSH
71305: DOUBLE
71306: LD_INT 1
71308: DEC
71309: ST_TO_ADDR
71310: LD_EXP 52
71314: PUSH
71315: FOR_TO
71316: IFFALSE 71379
// if mc_mines [ i ] and mc_miners [ i ] then
71318: LD_EXP 65
71322: PUSH
71323: LD_VAR 0 2
71327: ARRAY
71328: PUSH
71329: LD_EXP 66
71333: PUSH
71334: LD_VAR 0 2
71338: ARRAY
71339: AND
71340: IFFALSE 71377
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
71342: LD_EXP 66
71346: PUSH
71347: LD_VAR 0 2
71351: ARRAY
71352: PUSH
71353: LD_INT 1
71355: ARRAY
71356: PPUSH
71357: CALL_OW 255
71361: PPUSH
71362: LD_EXP 65
71366: PUSH
71367: LD_VAR 0 2
71371: ARRAY
71372: PPUSH
71373: CALL 14945 0 2
71377: GO 71315
71379: POP
71380: POP
// end ;
71381: LD_VAR 0 1
71385: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71386: LD_INT 0
71388: PPUSH
71389: PPUSH
71390: PPUSH
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
71395: PPUSH
// if not mc_bases or not mc_parking then
71396: LD_EXP 52
71400: NOT
71401: PUSH
71402: LD_EXP 76
71406: NOT
71407: OR
71408: IFFALSE 71412
// exit ;
71410: GO 72111
// for i = 1 to mc_bases do
71412: LD_ADDR_VAR 0 2
71416: PUSH
71417: DOUBLE
71418: LD_INT 1
71420: DEC
71421: ST_TO_ADDR
71422: LD_EXP 52
71426: PUSH
71427: FOR_TO
71428: IFFALSE 72109
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71430: LD_EXP 52
71434: PUSH
71435: LD_VAR 0 2
71439: ARRAY
71440: NOT
71441: PUSH
71442: LD_EXP 76
71446: PUSH
71447: LD_VAR 0 2
71451: ARRAY
71452: NOT
71453: OR
71454: IFFALSE 71458
// continue ;
71456: GO 71427
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71458: LD_ADDR_VAR 0 5
71462: PUSH
71463: LD_EXP 52
71467: PUSH
71468: LD_VAR 0 2
71472: ARRAY
71473: PUSH
71474: LD_INT 1
71476: ARRAY
71477: PPUSH
71478: CALL_OW 255
71482: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71483: LD_ADDR_VAR 0 6
71487: PUSH
71488: LD_EXP 52
71492: PUSH
71493: LD_VAR 0 2
71497: ARRAY
71498: PPUSH
71499: LD_INT 30
71501: PUSH
71502: LD_INT 3
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PPUSH
71509: CALL_OW 72
71513: ST_TO_ADDR
// if not fac then
71514: LD_VAR 0 6
71518: NOT
71519: IFFALSE 71570
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71521: LD_ADDR_VAR 0 6
71525: PUSH
71526: LD_EXP 52
71530: PUSH
71531: LD_VAR 0 2
71535: ARRAY
71536: PPUSH
71537: LD_INT 2
71539: PUSH
71540: LD_INT 30
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 30
71552: PUSH
71553: LD_INT 1
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: LIST
71564: PPUSH
71565: CALL_OW 72
71569: ST_TO_ADDR
// if not fac then
71570: LD_VAR 0 6
71574: NOT
71575: IFFALSE 71579
// continue ;
71577: GO 71427
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71579: LD_ADDR_VAR 0 7
71583: PUSH
71584: LD_EXP 76
71588: PUSH
71589: LD_VAR 0 2
71593: ARRAY
71594: PPUSH
71595: LD_INT 22
71597: PUSH
71598: LD_VAR 0 5
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 21
71609: PUSH
71610: LD_INT 2
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: LD_INT 24
71622: PUSH
71623: LD_INT 1000
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: PPUSH
71639: CALL_OW 70
71643: ST_TO_ADDR
// for j in fac do
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_VAR 0 6
71653: PUSH
71654: FOR_IN
71655: IFFALSE 71736
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71657: LD_ADDR_VAR 0 7
71661: PUSH
71662: LD_VAR 0 7
71666: PUSH
71667: LD_INT 22
71669: PUSH
71670: LD_VAR 0 5
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 91
71681: PUSH
71682: LD_VAR 0 3
71686: PUSH
71687: LD_INT 15
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 21
71697: PUSH
71698: LD_INT 2
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: PUSH
71708: LD_INT 24
71710: PUSH
71711: LD_INT 1000
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: PPUSH
71728: CALL_OW 69
71732: UNION
71733: ST_TO_ADDR
71734: GO 71654
71736: POP
71737: POP
// if not vehs then
71738: LD_VAR 0 7
71742: NOT
71743: IFFALSE 71769
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
71745: LD_ADDR_EXP 64
71749: PUSH
71750: LD_EXP 64
71754: PPUSH
71755: LD_VAR 0 2
71759: PPUSH
71760: EMPTY
71761: PPUSH
71762: CALL_OW 1
71766: ST_TO_ADDR
// continue ;
71767: GO 71427
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71769: LD_ADDR_VAR 0 8
71773: PUSH
71774: LD_EXP 52
71778: PUSH
71779: LD_VAR 0 2
71783: ARRAY
71784: PPUSH
71785: LD_INT 30
71787: PUSH
71788: LD_INT 3
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PPUSH
71795: CALL_OW 72
71799: ST_TO_ADDR
// if tmp then
71800: LD_VAR 0 8
71804: IFFALSE 71907
// begin for j in tmp do
71806: LD_ADDR_VAR 0 3
71810: PUSH
71811: LD_VAR 0 8
71815: PUSH
71816: FOR_IN
71817: IFFALSE 71905
// for k in UnitsInside ( j ) do
71819: LD_ADDR_VAR 0 4
71823: PUSH
71824: LD_VAR 0 3
71828: PPUSH
71829: CALL_OW 313
71833: PUSH
71834: FOR_IN
71835: IFFALSE 71901
// if k then
71837: LD_VAR 0 4
71841: IFFALSE 71899
// if not k in mc_repair_vehicle [ i ] then
71843: LD_VAR 0 4
71847: PUSH
71848: LD_EXP 64
71852: PUSH
71853: LD_VAR 0 2
71857: ARRAY
71858: IN
71859: NOT
71860: IFFALSE 71899
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
71862: LD_ADDR_EXP 64
71866: PUSH
71867: LD_EXP 64
71871: PPUSH
71872: LD_VAR 0 2
71876: PPUSH
71877: LD_EXP 64
71881: PUSH
71882: LD_VAR 0 2
71886: ARRAY
71887: PUSH
71888: LD_VAR 0 4
71892: UNION
71893: PPUSH
71894: CALL_OW 1
71898: ST_TO_ADDR
71899: GO 71834
71901: POP
71902: POP
71903: GO 71816
71905: POP
71906: POP
// end ; if not mc_repair_vehicle [ i ] then
71907: LD_EXP 64
71911: PUSH
71912: LD_VAR 0 2
71916: ARRAY
71917: NOT
71918: IFFALSE 71922
// continue ;
71920: GO 71427
// for j in mc_repair_vehicle [ i ] do
71922: LD_ADDR_VAR 0 3
71926: PUSH
71927: LD_EXP 64
71931: PUSH
71932: LD_VAR 0 2
71936: ARRAY
71937: PUSH
71938: FOR_IN
71939: IFFALSE 72105
// begin if GetClass ( j ) <> 3 then
71941: LD_VAR 0 3
71945: PPUSH
71946: CALL_OW 257
71950: PUSH
71951: LD_INT 3
71953: NONEQUAL
71954: IFFALSE 71995
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
71956: LD_ADDR_EXP 64
71960: PUSH
71961: LD_EXP 64
71965: PPUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_EXP 64
71975: PUSH
71976: LD_VAR 0 2
71980: ARRAY
71981: PUSH
71982: LD_VAR 0 3
71986: DIFF
71987: PPUSH
71988: CALL_OW 1
71992: ST_TO_ADDR
// continue ;
71993: GO 71938
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71995: LD_VAR 0 3
71999: PPUSH
72000: CALL_OW 311
72004: NOT
72005: PUSH
72006: LD_VAR 0 3
72010: PUSH
72011: LD_EXP 55
72015: PUSH
72016: LD_VAR 0 2
72020: ARRAY
72021: PUSH
72022: LD_INT 1
72024: ARRAY
72025: IN
72026: NOT
72027: AND
72028: PUSH
72029: LD_VAR 0 3
72033: PUSH
72034: LD_EXP 55
72038: PUSH
72039: LD_VAR 0 2
72043: ARRAY
72044: PUSH
72045: LD_INT 2
72047: ARRAY
72048: IN
72049: NOT
72050: AND
72051: IFFALSE 72103
// begin if IsInUnit ( j ) then
72053: LD_VAR 0 3
72057: PPUSH
72058: CALL_OW 310
72062: IFFALSE 72073
// ComExitBuilding ( j ) ;
72064: LD_VAR 0 3
72068: PPUSH
72069: CALL_OW 122
// if not HasTask ( j ) then
72073: LD_VAR 0 3
72077: PPUSH
72078: CALL_OW 314
72082: NOT
72083: IFFALSE 72103
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72085: LD_VAR 0 3
72089: PPUSH
72090: LD_VAR 0 7
72094: PUSH
72095: LD_INT 1
72097: ARRAY
72098: PPUSH
72099: CALL_OW 189
// end ; end ;
72103: GO 71938
72105: POP
72106: POP
// end ;
72107: GO 71427
72109: POP
72110: POP
// end ;
72111: LD_VAR 0 1
72115: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72116: LD_INT 0
72118: PPUSH
72119: PPUSH
72120: PPUSH
72121: PPUSH
72122: PPUSH
72123: PPUSH
72124: PPUSH
72125: PPUSH
72126: PPUSH
72127: PPUSH
72128: PPUSH
// if not mc_bases then
72129: LD_EXP 52
72133: NOT
72134: IFFALSE 72138
// exit ;
72136: GO 72940
// for i = 1 to mc_bases do
72138: LD_ADDR_VAR 0 2
72142: PUSH
72143: DOUBLE
72144: LD_INT 1
72146: DEC
72147: ST_TO_ADDR
72148: LD_EXP 52
72152: PUSH
72153: FOR_TO
72154: IFFALSE 72938
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72156: LD_EXP 80
72160: PUSH
72161: LD_VAR 0 2
72165: ARRAY
72166: NOT
72167: PUSH
72168: LD_EXP 55
72172: PUSH
72173: LD_VAR 0 2
72177: ARRAY
72178: PUSH
72179: LD_INT 1
72181: ARRAY
72182: OR
72183: PUSH
72184: LD_EXP 55
72188: PUSH
72189: LD_VAR 0 2
72193: ARRAY
72194: PUSH
72195: LD_INT 2
72197: ARRAY
72198: OR
72199: PUSH
72200: LD_EXP 78
72204: PUSH
72205: LD_VAR 0 2
72209: ARRAY
72210: PPUSH
72211: LD_INT 1
72213: PPUSH
72214: CALL_OW 325
72218: NOT
72219: OR
72220: PUSH
72221: LD_EXP 75
72225: PUSH
72226: LD_VAR 0 2
72230: ARRAY
72231: OR
72232: IFFALSE 72236
// continue ;
72234: GO 72153
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72236: LD_ADDR_VAR 0 8
72240: PUSH
72241: LD_EXP 52
72245: PUSH
72246: LD_VAR 0 2
72250: ARRAY
72251: PPUSH
72252: LD_INT 25
72254: PUSH
72255: LD_INT 4
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 50
72264: PUSH
72265: EMPTY
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: LD_INT 60
72273: PUSH
72274: EMPTY
72275: LIST
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: LIST
72285: PPUSH
72286: CALL_OW 72
72290: PUSH
72291: LD_EXP 56
72295: PUSH
72296: LD_VAR 0 2
72300: ARRAY
72301: DIFF
72302: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72303: LD_ADDR_VAR 0 9
72307: PUSH
72308: LD_EXP 52
72312: PUSH
72313: LD_VAR 0 2
72317: ARRAY
72318: PPUSH
72319: LD_INT 2
72321: PUSH
72322: LD_INT 30
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 30
72334: PUSH
72335: LD_INT 1
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: PPUSH
72347: CALL_OW 72
72351: ST_TO_ADDR
// if not tmp or not dep then
72352: LD_VAR 0 8
72356: NOT
72357: PUSH
72358: LD_VAR 0 9
72362: NOT
72363: OR
72364: IFFALSE 72368
// continue ;
72366: GO 72153
// side := GetSide ( tmp [ 1 ] ) ;
72368: LD_ADDR_VAR 0 11
72372: PUSH
72373: LD_VAR 0 8
72377: PUSH
72378: LD_INT 1
72380: ARRAY
72381: PPUSH
72382: CALL_OW 255
72386: ST_TO_ADDR
// dep := dep [ 1 ] ;
72387: LD_ADDR_VAR 0 9
72391: PUSH
72392: LD_VAR 0 9
72396: PUSH
72397: LD_INT 1
72399: ARRAY
72400: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72401: LD_ADDR_VAR 0 7
72405: PUSH
72406: LD_EXP 80
72410: PUSH
72411: LD_VAR 0 2
72415: ARRAY
72416: PPUSH
72417: LD_INT 22
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 25
72429: PUSH
72430: LD_INT 12
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PPUSH
72441: CALL_OW 70
72445: PUSH
72446: LD_INT 22
72448: PUSH
72449: LD_INT 0
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 25
72458: PUSH
72459: LD_INT 12
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 91
72468: PUSH
72469: LD_VAR 0 9
72473: PUSH
72474: LD_INT 20
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: LIST
72486: PPUSH
72487: CALL_OW 69
72491: UNION
72492: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72493: LD_ADDR_VAR 0 10
72497: PUSH
72498: LD_EXP 80
72502: PUSH
72503: LD_VAR 0 2
72507: ARRAY
72508: PPUSH
72509: LD_INT 81
72511: PUSH
72512: LD_VAR 0 11
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PPUSH
72521: CALL_OW 70
72525: ST_TO_ADDR
// if not apes or danger_at_area then
72526: LD_VAR 0 7
72530: NOT
72531: PUSH
72532: LD_VAR 0 10
72536: OR
72537: IFFALSE 72587
// begin if mc_taming [ i ] then
72539: LD_EXP 83
72543: PUSH
72544: LD_VAR 0 2
72548: ARRAY
72549: IFFALSE 72585
// begin MC_Reset ( i , 121 ) ;
72551: LD_VAR 0 2
72555: PPUSH
72556: LD_INT 121
72558: PPUSH
72559: CALL 57918 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72563: LD_ADDR_EXP 83
72567: PUSH
72568: LD_EXP 83
72572: PPUSH
72573: LD_VAR 0 2
72577: PPUSH
72578: EMPTY
72579: PPUSH
72580: CALL_OW 1
72584: ST_TO_ADDR
// end ; continue ;
72585: GO 72153
// end ; for j in tmp do
72587: LD_ADDR_VAR 0 3
72591: PUSH
72592: LD_VAR 0 8
72596: PUSH
72597: FOR_IN
72598: IFFALSE 72934
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
72600: LD_VAR 0 3
72604: PUSH
72605: LD_EXP 83
72609: PUSH
72610: LD_VAR 0 2
72614: ARRAY
72615: IN
72616: NOT
72617: PUSH
72618: LD_EXP 83
72622: PUSH
72623: LD_VAR 0 2
72627: ARRAY
72628: PUSH
72629: LD_INT 3
72631: LESS
72632: AND
72633: IFFALSE 72691
// begin SetTag ( j , 121 ) ;
72635: LD_VAR 0 3
72639: PPUSH
72640: LD_INT 121
72642: PPUSH
72643: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
72647: LD_ADDR_EXP 83
72651: PUSH
72652: LD_EXP 83
72656: PPUSH
72657: LD_VAR 0 2
72661: PUSH
72662: LD_EXP 83
72666: PUSH
72667: LD_VAR 0 2
72671: ARRAY
72672: PUSH
72673: LD_INT 1
72675: PLUS
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PPUSH
72681: LD_VAR 0 3
72685: PPUSH
72686: CALL 17956 0 3
72690: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
72691: LD_VAR 0 3
72695: PUSH
72696: LD_EXP 83
72700: PUSH
72701: LD_VAR 0 2
72705: ARRAY
72706: IN
72707: IFFALSE 72932
// begin if GetClass ( j ) <> 4 then
72709: LD_VAR 0 3
72713: PPUSH
72714: CALL_OW 257
72718: PUSH
72719: LD_INT 4
72721: NONEQUAL
72722: IFFALSE 72775
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
72724: LD_ADDR_EXP 83
72728: PUSH
72729: LD_EXP 83
72733: PPUSH
72734: LD_VAR 0 2
72738: PPUSH
72739: LD_EXP 83
72743: PUSH
72744: LD_VAR 0 2
72748: ARRAY
72749: PUSH
72750: LD_VAR 0 3
72754: DIFF
72755: PPUSH
72756: CALL_OW 1
72760: ST_TO_ADDR
// SetTag ( j , 0 ) ;
72761: LD_VAR 0 3
72765: PPUSH
72766: LD_INT 0
72768: PPUSH
72769: CALL_OW 109
// continue ;
72773: GO 72597
// end ; if IsInUnit ( j ) then
72775: LD_VAR 0 3
72779: PPUSH
72780: CALL_OW 310
72784: IFFALSE 72795
// ComExitBuilding ( j ) ;
72786: LD_VAR 0 3
72790: PPUSH
72791: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
72795: LD_ADDR_VAR 0 6
72799: PUSH
72800: LD_VAR 0 7
72804: PPUSH
72805: LD_VAR 0 3
72809: PPUSH
72810: CALL_OW 74
72814: ST_TO_ADDR
// if not ape then
72815: LD_VAR 0 6
72819: NOT
72820: IFFALSE 72824
// break ;
72822: GO 72934
// x := GetX ( ape ) ;
72824: LD_ADDR_VAR 0 4
72828: PUSH
72829: LD_VAR 0 6
72833: PPUSH
72834: CALL_OW 250
72838: ST_TO_ADDR
// y := GetY ( ape ) ;
72839: LD_ADDR_VAR 0 5
72843: PUSH
72844: LD_VAR 0 6
72848: PPUSH
72849: CALL_OW 251
72853: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
72854: LD_VAR 0 4
72858: PPUSH
72859: LD_VAR 0 5
72863: PPUSH
72864: CALL_OW 488
72868: NOT
72869: PUSH
72870: LD_VAR 0 11
72874: PPUSH
72875: LD_VAR 0 4
72879: PPUSH
72880: LD_VAR 0 5
72884: PPUSH
72885: LD_INT 20
72887: PPUSH
72888: CALL 18852 0 4
72892: PUSH
72893: LD_INT 4
72895: ARRAY
72896: OR
72897: IFFALSE 72901
// break ;
72899: GO 72934
// if not HasTask ( j ) then
72901: LD_VAR 0 3
72905: PPUSH
72906: CALL_OW 314
72910: NOT
72911: IFFALSE 72932
// ComTameXY ( j , x , y ) ;
72913: LD_VAR 0 3
72917: PPUSH
72918: LD_VAR 0 4
72922: PPUSH
72923: LD_VAR 0 5
72927: PPUSH
72928: CALL_OW 131
// end ; end ;
72932: GO 72597
72934: POP
72935: POP
// end ;
72936: GO 72153
72938: POP
72939: POP
// end ;
72940: LD_VAR 0 1
72944: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72945: LD_INT 0
72947: PPUSH
72948: PPUSH
72949: PPUSH
72950: PPUSH
72951: PPUSH
72952: PPUSH
72953: PPUSH
72954: PPUSH
// if not mc_bases then
72955: LD_EXP 52
72959: NOT
72960: IFFALSE 72964
// exit ;
72962: GO 73590
// for i = 1 to mc_bases do
72964: LD_ADDR_VAR 0 2
72968: PUSH
72969: DOUBLE
72970: LD_INT 1
72972: DEC
72973: ST_TO_ADDR
72974: LD_EXP 52
72978: PUSH
72979: FOR_TO
72980: IFFALSE 73588
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72982: LD_EXP 81
72986: PUSH
72987: LD_VAR 0 2
72991: ARRAY
72992: NOT
72993: PUSH
72994: LD_EXP 81
72998: PUSH
72999: LD_VAR 0 2
73003: ARRAY
73004: PPUSH
73005: LD_INT 25
73007: PUSH
73008: LD_INT 12
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PPUSH
73015: CALL_OW 72
73019: NOT
73020: OR
73021: IFFALSE 73025
// continue ;
73023: GO 72979
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73025: LD_ADDR_VAR 0 5
73029: PUSH
73030: LD_EXP 81
73034: PUSH
73035: LD_VAR 0 2
73039: ARRAY
73040: PUSH
73041: LD_INT 1
73043: ARRAY
73044: PPUSH
73045: CALL_OW 255
73049: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73050: LD_VAR 0 5
73054: PPUSH
73055: LD_INT 2
73057: PPUSH
73058: CALL_OW 325
73062: IFFALSE 73315
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73064: LD_ADDR_VAR 0 4
73068: PUSH
73069: LD_EXP 81
73073: PUSH
73074: LD_VAR 0 2
73078: ARRAY
73079: PPUSH
73080: LD_INT 25
73082: PUSH
73083: LD_INT 16
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PPUSH
73090: CALL_OW 72
73094: ST_TO_ADDR
// if tmp < 6 then
73095: LD_VAR 0 4
73099: PUSH
73100: LD_INT 6
73102: LESS
73103: IFFALSE 73315
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73105: LD_ADDR_VAR 0 6
73109: PUSH
73110: LD_EXP 52
73114: PUSH
73115: LD_VAR 0 2
73119: ARRAY
73120: PPUSH
73121: LD_INT 2
73123: PUSH
73124: LD_INT 30
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 30
73136: PUSH
73137: LD_INT 1
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: LIST
73148: PPUSH
73149: CALL_OW 72
73153: ST_TO_ADDR
// if depot then
73154: LD_VAR 0 6
73158: IFFALSE 73315
// begin selected := 0 ;
73160: LD_ADDR_VAR 0 7
73164: PUSH
73165: LD_INT 0
73167: ST_TO_ADDR
// for j in depot do
73168: LD_ADDR_VAR 0 3
73172: PUSH
73173: LD_VAR 0 6
73177: PUSH
73178: FOR_IN
73179: IFFALSE 73210
// begin if UnitsInside ( j ) < 6 then
73181: LD_VAR 0 3
73185: PPUSH
73186: CALL_OW 313
73190: PUSH
73191: LD_INT 6
73193: LESS
73194: IFFALSE 73208
// begin selected := j ;
73196: LD_ADDR_VAR 0 7
73200: PUSH
73201: LD_VAR 0 3
73205: ST_TO_ADDR
// break ;
73206: GO 73210
// end ; end ;
73208: GO 73178
73210: POP
73211: POP
// if selected then
73212: LD_VAR 0 7
73216: IFFALSE 73315
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73218: LD_ADDR_VAR 0 3
73222: PUSH
73223: LD_EXP 81
73227: PUSH
73228: LD_VAR 0 2
73232: ARRAY
73233: PPUSH
73234: LD_INT 25
73236: PUSH
73237: LD_INT 12
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PPUSH
73244: CALL_OW 72
73248: PUSH
73249: FOR_IN
73250: IFFALSE 73313
// if not HasTask ( j ) then
73252: LD_VAR 0 3
73256: PPUSH
73257: CALL_OW 314
73261: NOT
73262: IFFALSE 73311
// begin if not IsInUnit ( j ) then
73264: LD_VAR 0 3
73268: PPUSH
73269: CALL_OW 310
73273: NOT
73274: IFFALSE 73290
// ComEnterUnit ( j , selected ) ;
73276: LD_VAR 0 3
73280: PPUSH
73281: LD_VAR 0 7
73285: PPUSH
73286: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73290: LD_VAR 0 3
73294: PPUSH
73295: LD_INT 16
73297: PPUSH
73298: CALL_OW 183
// AddComExitBuilding ( j ) ;
73302: LD_VAR 0 3
73306: PPUSH
73307: CALL_OW 182
// end ;
73311: GO 73249
73313: POP
73314: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73315: LD_VAR 0 5
73319: PPUSH
73320: LD_INT 11
73322: PPUSH
73323: CALL_OW 325
73327: IFFALSE 73586
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73329: LD_ADDR_VAR 0 4
73333: PUSH
73334: LD_EXP 81
73338: PUSH
73339: LD_VAR 0 2
73343: ARRAY
73344: PPUSH
73345: LD_INT 25
73347: PUSH
73348: LD_INT 16
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PPUSH
73355: CALL_OW 72
73359: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73360: LD_VAR 0 4
73364: PUSH
73365: LD_INT 6
73367: GREATEREQUAL
73368: PUSH
73369: LD_VAR 0 5
73373: PPUSH
73374: LD_INT 2
73376: PPUSH
73377: CALL_OW 325
73381: NOT
73382: OR
73383: IFFALSE 73586
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73385: LD_ADDR_VAR 0 8
73389: PUSH
73390: LD_EXP 52
73394: PUSH
73395: LD_VAR 0 2
73399: ARRAY
73400: PPUSH
73401: LD_INT 2
73403: PUSH
73404: LD_INT 30
73406: PUSH
73407: LD_INT 4
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 30
73416: PUSH
73417: LD_INT 5
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: PPUSH
73429: CALL_OW 72
73433: ST_TO_ADDR
// if barracks then
73434: LD_VAR 0 8
73438: IFFALSE 73586
// begin selected := 0 ;
73440: LD_ADDR_VAR 0 7
73444: PUSH
73445: LD_INT 0
73447: ST_TO_ADDR
// for j in barracks do
73448: LD_ADDR_VAR 0 3
73452: PUSH
73453: LD_VAR 0 8
73457: PUSH
73458: FOR_IN
73459: IFFALSE 73490
// begin if UnitsInside ( j ) < 6 then
73461: LD_VAR 0 3
73465: PPUSH
73466: CALL_OW 313
73470: PUSH
73471: LD_INT 6
73473: LESS
73474: IFFALSE 73488
// begin selected := j ;
73476: LD_ADDR_VAR 0 7
73480: PUSH
73481: LD_VAR 0 3
73485: ST_TO_ADDR
// break ;
73486: GO 73490
// end ; end ;
73488: GO 73458
73490: POP
73491: POP
// if selected then
73492: LD_VAR 0 7
73496: IFFALSE 73586
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73498: LD_ADDR_VAR 0 3
73502: PUSH
73503: LD_EXP 81
73507: PUSH
73508: LD_VAR 0 2
73512: ARRAY
73513: PPUSH
73514: LD_INT 25
73516: PUSH
73517: LD_INT 12
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PPUSH
73524: CALL_OW 72
73528: PUSH
73529: FOR_IN
73530: IFFALSE 73584
// if not IsInUnit ( j ) and not HasTask ( j ) then
73532: LD_VAR 0 3
73536: PPUSH
73537: CALL_OW 310
73541: NOT
73542: PUSH
73543: LD_VAR 0 3
73547: PPUSH
73548: CALL_OW 314
73552: NOT
73553: AND
73554: IFFALSE 73582
// begin ComEnterUnit ( j , selected ) ;
73556: LD_VAR 0 3
73560: PPUSH
73561: LD_VAR 0 7
73565: PPUSH
73566: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
73570: LD_VAR 0 3
73574: PPUSH
73575: LD_INT 15
73577: PPUSH
73578: CALL_OW 183
// end ;
73582: GO 73529
73584: POP
73585: POP
// end ; end ; end ; end ; end ;
73586: GO 72979
73588: POP
73589: POP
// end ;
73590: LD_VAR 0 1
73594: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
73595: LD_INT 0
73597: PPUSH
73598: PPUSH
73599: PPUSH
73600: PPUSH
// if not mc_bases then
73601: LD_EXP 52
73605: NOT
73606: IFFALSE 73610
// exit ;
73608: GO 73788
// for i = 1 to mc_bases do
73610: LD_ADDR_VAR 0 2
73614: PUSH
73615: DOUBLE
73616: LD_INT 1
73618: DEC
73619: ST_TO_ADDR
73620: LD_EXP 52
73624: PUSH
73625: FOR_TO
73626: IFFALSE 73786
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
73628: LD_ADDR_VAR 0 4
73632: PUSH
73633: LD_EXP 52
73637: PUSH
73638: LD_VAR 0 2
73642: ARRAY
73643: PPUSH
73644: LD_INT 25
73646: PUSH
73647: LD_INT 9
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PPUSH
73654: CALL_OW 72
73658: ST_TO_ADDR
// if not tmp then
73659: LD_VAR 0 4
73663: NOT
73664: IFFALSE 73668
// continue ;
73666: GO 73625
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
73668: LD_EXP 78
73672: PUSH
73673: LD_VAR 0 2
73677: ARRAY
73678: PPUSH
73679: LD_INT 29
73681: PPUSH
73682: CALL_OW 325
73686: NOT
73687: PUSH
73688: LD_EXP 78
73692: PUSH
73693: LD_VAR 0 2
73697: ARRAY
73698: PPUSH
73699: LD_INT 28
73701: PPUSH
73702: CALL_OW 325
73706: NOT
73707: AND
73708: IFFALSE 73712
// continue ;
73710: GO 73625
// for j in tmp do
73712: LD_ADDR_VAR 0 3
73716: PUSH
73717: LD_VAR 0 4
73721: PUSH
73722: FOR_IN
73723: IFFALSE 73782
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73725: LD_VAR 0 3
73729: PUSH
73730: LD_EXP 55
73734: PUSH
73735: LD_VAR 0 2
73739: ARRAY
73740: PUSH
73741: LD_INT 1
73743: ARRAY
73744: IN
73745: NOT
73746: PUSH
73747: LD_VAR 0 3
73751: PUSH
73752: LD_EXP 55
73756: PUSH
73757: LD_VAR 0 2
73761: ARRAY
73762: PUSH
73763: LD_INT 2
73765: ARRAY
73766: IN
73767: NOT
73768: AND
73769: IFFALSE 73780
// ComSpaceTimeShoot ( j ) ;
73771: LD_VAR 0 3
73775: PPUSH
73776: CALL 11906 0 1
73780: GO 73722
73782: POP
73783: POP
// end ;
73784: GO 73625
73786: POP
73787: POP
// end ;
73788: LD_VAR 0 1
73792: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
73793: LD_INT 0
73795: PPUSH
73796: PPUSH
73797: PPUSH
73798: PPUSH
73799: PPUSH
73800: PPUSH
73801: PPUSH
73802: PPUSH
73803: PPUSH
// if not mc_bases then
73804: LD_EXP 52
73808: NOT
73809: IFFALSE 73813
// exit ;
73811: GO 74435
// for i = 1 to mc_bases do
73813: LD_ADDR_VAR 0 2
73817: PUSH
73818: DOUBLE
73819: LD_INT 1
73821: DEC
73822: ST_TO_ADDR
73823: LD_EXP 52
73827: PUSH
73828: FOR_TO
73829: IFFALSE 74433
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
73831: LD_EXP 87
73835: PUSH
73836: LD_VAR 0 2
73840: ARRAY
73841: NOT
73842: PUSH
73843: LD_INT 38
73845: PPUSH
73846: LD_EXP 78
73850: PUSH
73851: LD_VAR 0 2
73855: ARRAY
73856: PPUSH
73857: CALL_OW 321
73861: PUSH
73862: LD_INT 2
73864: NONEQUAL
73865: OR
73866: IFFALSE 73870
// continue ;
73868: GO 73828
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
73870: LD_ADDR_VAR 0 8
73874: PUSH
73875: LD_EXP 52
73879: PUSH
73880: LD_VAR 0 2
73884: ARRAY
73885: PPUSH
73886: LD_INT 30
73888: PUSH
73889: LD_INT 34
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PPUSH
73896: CALL_OW 72
73900: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
73901: LD_ADDR_VAR 0 9
73905: PUSH
73906: LD_EXP 52
73910: PUSH
73911: LD_VAR 0 2
73915: ARRAY
73916: PPUSH
73917: LD_INT 25
73919: PUSH
73920: LD_INT 4
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PPUSH
73927: CALL_OW 72
73931: PPUSH
73932: LD_INT 0
73934: PPUSH
73935: CALL 51216 0 2
73939: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
73940: LD_VAR 0 9
73944: NOT
73945: PUSH
73946: LD_VAR 0 8
73950: NOT
73951: OR
73952: PUSH
73953: LD_EXP 52
73957: PUSH
73958: LD_VAR 0 2
73962: ARRAY
73963: PPUSH
73964: LD_INT 124
73966: PPUSH
73967: CALL 51216 0 2
73971: OR
73972: IFFALSE 73976
// continue ;
73974: GO 73828
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
73976: LD_EXP 88
73980: PUSH
73981: LD_VAR 0 2
73985: ARRAY
73986: PUSH
73987: LD_EXP 87
73991: PUSH
73992: LD_VAR 0 2
73996: ARRAY
73997: LESS
73998: PUSH
73999: LD_EXP 88
74003: PUSH
74004: LD_VAR 0 2
74008: ARRAY
74009: PUSH
74010: LD_VAR 0 8
74014: LESS
74015: AND
74016: IFFALSE 74431
// begin tmp := sci [ 1 ] ;
74018: LD_ADDR_VAR 0 7
74022: PUSH
74023: LD_VAR 0 9
74027: PUSH
74028: LD_INT 1
74030: ARRAY
74031: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
74032: LD_VAR 0 7
74036: PPUSH
74037: LD_INT 124
74039: PPUSH
74040: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
74044: LD_ADDR_VAR 0 3
74048: PUSH
74049: DOUBLE
74050: LD_EXP 87
74054: PUSH
74055: LD_VAR 0 2
74059: ARRAY
74060: INC
74061: ST_TO_ADDR
74062: LD_EXP 87
74066: PUSH
74067: LD_VAR 0 2
74071: ARRAY
74072: PUSH
74073: FOR_DOWNTO
74074: IFFALSE 74417
// begin if IsInUnit ( tmp ) then
74076: LD_VAR 0 7
74080: PPUSH
74081: CALL_OW 310
74085: IFFALSE 74096
// ComExitBuilding ( tmp ) ;
74087: LD_VAR 0 7
74091: PPUSH
74092: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
74096: LD_INT 35
74098: PPUSH
74099: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
74103: LD_VAR 0 7
74107: PPUSH
74108: CALL_OW 310
74112: NOT
74113: PUSH
74114: LD_VAR 0 7
74118: PPUSH
74119: CALL_OW 314
74123: NOT
74124: AND
74125: IFFALSE 74096
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
74127: LD_ADDR_VAR 0 6
74131: PUSH
74132: LD_VAR 0 7
74136: PPUSH
74137: CALL_OW 250
74141: PUSH
74142: LD_VAR 0 7
74146: PPUSH
74147: CALL_OW 251
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74156: LD_INT 35
74158: PPUSH
74159: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
74163: LD_ADDR_VAR 0 4
74167: PUSH
74168: LD_EXP 87
74172: PUSH
74173: LD_VAR 0 2
74177: ARRAY
74178: PUSH
74179: LD_VAR 0 3
74183: ARRAY
74184: PUSH
74185: LD_INT 1
74187: ARRAY
74188: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
74189: LD_ADDR_VAR 0 5
74193: PUSH
74194: LD_EXP 87
74198: PUSH
74199: LD_VAR 0 2
74203: ARRAY
74204: PUSH
74205: LD_VAR 0 3
74209: ARRAY
74210: PUSH
74211: LD_INT 2
74213: ARRAY
74214: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
74215: LD_VAR 0 7
74219: PPUSH
74220: LD_INT 10
74222: PPUSH
74223: CALL 20549 0 2
74227: PUSH
74228: LD_INT 4
74230: ARRAY
74231: IFFALSE 74269
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
74233: LD_VAR 0 7
74237: PPUSH
74238: LD_VAR 0 6
74242: PUSH
74243: LD_INT 1
74245: ARRAY
74246: PPUSH
74247: LD_VAR 0 6
74251: PUSH
74252: LD_INT 2
74254: ARRAY
74255: PPUSH
74256: CALL_OW 111
// wait ( 0 0$10 ) ;
74260: LD_INT 350
74262: PPUSH
74263: CALL_OW 67
// end else
74267: GO 74295
// begin ComMoveXY ( tmp , x , y ) ;
74269: LD_VAR 0 7
74273: PPUSH
74274: LD_VAR 0 4
74278: PPUSH
74279: LD_VAR 0 5
74283: PPUSH
74284: CALL_OW 111
// wait ( 0 0$3 ) ;
74288: LD_INT 105
74290: PPUSH
74291: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
74295: LD_VAR 0 7
74299: PPUSH
74300: LD_VAR 0 4
74304: PPUSH
74305: LD_VAR 0 5
74309: PPUSH
74310: CALL_OW 307
74314: IFFALSE 74156
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
74316: LD_VAR 0 7
74320: PPUSH
74321: LD_VAR 0 4
74325: PPUSH
74326: LD_VAR 0 5
74330: PPUSH
74331: LD_VAR 0 8
74335: PUSH
74336: LD_VAR 0 3
74340: ARRAY
74341: PPUSH
74342: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
74346: LD_INT 35
74348: PPUSH
74349: CALL_OW 67
// until not HasTask ( tmp ) ;
74353: LD_VAR 0 7
74357: PPUSH
74358: CALL_OW 314
74362: NOT
74363: IFFALSE 74346
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
74365: LD_ADDR_EXP 88
74369: PUSH
74370: LD_EXP 88
74374: PPUSH
74375: LD_VAR 0 2
74379: PUSH
74380: LD_EXP 88
74384: PUSH
74385: LD_VAR 0 2
74389: ARRAY
74390: PUSH
74391: LD_INT 1
74393: PLUS
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PPUSH
74399: LD_VAR 0 8
74403: PUSH
74404: LD_VAR 0 3
74408: ARRAY
74409: PPUSH
74410: CALL 17956 0 3
74414: ST_TO_ADDR
// end ;
74415: GO 74073
74417: POP
74418: POP
// MC_Reset ( i , 124 ) ;
74419: LD_VAR 0 2
74423: PPUSH
74424: LD_INT 124
74426: PPUSH
74427: CALL 57918 0 2
// end ; end ;
74431: GO 73828
74433: POP
74434: POP
// end ;
74435: LD_VAR 0 1
74439: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74440: LD_INT 0
74442: PPUSH
74443: PPUSH
74444: PPUSH
// if not mc_bases then
74445: LD_EXP 52
74449: NOT
74450: IFFALSE 74454
// exit ;
74452: GO 75060
// for i = 1 to mc_bases do
74454: LD_ADDR_VAR 0 2
74458: PUSH
74459: DOUBLE
74460: LD_INT 1
74462: DEC
74463: ST_TO_ADDR
74464: LD_EXP 52
74468: PUSH
74469: FOR_TO
74470: IFFALSE 75058
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74472: LD_ADDR_VAR 0 3
74476: PUSH
74477: LD_EXP 52
74481: PUSH
74482: LD_VAR 0 2
74486: ARRAY
74487: PPUSH
74488: LD_INT 25
74490: PUSH
74491: LD_INT 4
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PPUSH
74498: CALL_OW 72
74502: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
74503: LD_VAR 0 3
74507: NOT
74508: PUSH
74509: LD_EXP 89
74513: PUSH
74514: LD_VAR 0 2
74518: ARRAY
74519: NOT
74520: OR
74521: PUSH
74522: LD_EXP 52
74526: PUSH
74527: LD_VAR 0 2
74531: ARRAY
74532: PPUSH
74533: LD_INT 2
74535: PUSH
74536: LD_INT 30
74538: PUSH
74539: LD_INT 0
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: LD_INT 30
74548: PUSH
74549: LD_INT 1
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: LIST
74560: PPUSH
74561: CALL_OW 72
74565: NOT
74566: OR
74567: IFFALSE 74617
// begin if mc_deposits_finder [ i ] then
74569: LD_EXP 90
74573: PUSH
74574: LD_VAR 0 2
74578: ARRAY
74579: IFFALSE 74615
// begin MC_Reset ( i , 125 ) ;
74581: LD_VAR 0 2
74585: PPUSH
74586: LD_INT 125
74588: PPUSH
74589: CALL 57918 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74593: LD_ADDR_EXP 90
74597: PUSH
74598: LD_EXP 90
74602: PPUSH
74603: LD_VAR 0 2
74607: PPUSH
74608: EMPTY
74609: PPUSH
74610: CALL_OW 1
74614: ST_TO_ADDR
// end ; continue ;
74615: GO 74469
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
74617: LD_EXP 89
74621: PUSH
74622: LD_VAR 0 2
74626: ARRAY
74627: PUSH
74628: LD_INT 1
74630: ARRAY
74631: PUSH
74632: LD_INT 3
74634: ARRAY
74635: PUSH
74636: LD_INT 1
74638: EQUAL
74639: PUSH
74640: LD_INT 20
74642: PPUSH
74643: LD_EXP 78
74647: PUSH
74648: LD_VAR 0 2
74652: ARRAY
74653: PPUSH
74654: CALL_OW 321
74658: PUSH
74659: LD_INT 2
74661: NONEQUAL
74662: AND
74663: IFFALSE 74713
// begin if mc_deposits_finder [ i ] then
74665: LD_EXP 90
74669: PUSH
74670: LD_VAR 0 2
74674: ARRAY
74675: IFFALSE 74711
// begin MC_Reset ( i , 125 ) ;
74677: LD_VAR 0 2
74681: PPUSH
74682: LD_INT 125
74684: PPUSH
74685: CALL 57918 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74689: LD_ADDR_EXP 90
74693: PUSH
74694: LD_EXP 90
74698: PPUSH
74699: LD_VAR 0 2
74703: PPUSH
74704: EMPTY
74705: PPUSH
74706: CALL_OW 1
74710: ST_TO_ADDR
// end ; continue ;
74711: GO 74469
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
74713: LD_EXP 89
74717: PUSH
74718: LD_VAR 0 2
74722: ARRAY
74723: PUSH
74724: LD_INT 1
74726: ARRAY
74727: PUSH
74728: LD_INT 1
74730: ARRAY
74731: PPUSH
74732: LD_EXP 89
74736: PUSH
74737: LD_VAR 0 2
74741: ARRAY
74742: PUSH
74743: LD_INT 1
74745: ARRAY
74746: PUSH
74747: LD_INT 2
74749: ARRAY
74750: PPUSH
74751: LD_EXP 78
74755: PUSH
74756: LD_VAR 0 2
74760: ARRAY
74761: PPUSH
74762: CALL_OW 440
74766: IFFALSE 74809
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
74768: LD_ADDR_EXP 89
74772: PUSH
74773: LD_EXP 89
74777: PPUSH
74778: LD_VAR 0 2
74782: PPUSH
74783: LD_EXP 89
74787: PUSH
74788: LD_VAR 0 2
74792: ARRAY
74793: PPUSH
74794: LD_INT 1
74796: PPUSH
74797: CALL_OW 3
74801: PPUSH
74802: CALL_OW 1
74806: ST_TO_ADDR
74807: GO 75056
// begin if not mc_deposits_finder [ i ] then
74809: LD_EXP 90
74813: PUSH
74814: LD_VAR 0 2
74818: ARRAY
74819: NOT
74820: IFFALSE 74872
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
74822: LD_ADDR_EXP 90
74826: PUSH
74827: LD_EXP 90
74831: PPUSH
74832: LD_VAR 0 2
74836: PPUSH
74837: LD_VAR 0 3
74841: PUSH
74842: LD_INT 1
74844: ARRAY
74845: PUSH
74846: EMPTY
74847: LIST
74848: PPUSH
74849: CALL_OW 1
74853: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
74854: LD_VAR 0 3
74858: PUSH
74859: LD_INT 1
74861: ARRAY
74862: PPUSH
74863: LD_INT 125
74865: PPUSH
74866: CALL_OW 109
// end else
74870: GO 75056
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
74872: LD_EXP 90
74876: PUSH
74877: LD_VAR 0 2
74881: ARRAY
74882: PUSH
74883: LD_INT 1
74885: ARRAY
74886: PPUSH
74887: CALL_OW 310
74891: IFFALSE 74914
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
74893: LD_EXP 90
74897: PUSH
74898: LD_VAR 0 2
74902: ARRAY
74903: PUSH
74904: LD_INT 1
74906: ARRAY
74907: PPUSH
74908: CALL_OW 122
74912: GO 75056
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74914: LD_EXP 90
74918: PUSH
74919: LD_VAR 0 2
74923: ARRAY
74924: PUSH
74925: LD_INT 1
74927: ARRAY
74928: PPUSH
74929: CALL_OW 314
74933: NOT
74934: PUSH
74935: LD_EXP 90
74939: PUSH
74940: LD_VAR 0 2
74944: ARRAY
74945: PUSH
74946: LD_INT 1
74948: ARRAY
74949: PPUSH
74950: LD_EXP 89
74954: PUSH
74955: LD_VAR 0 2
74959: ARRAY
74960: PUSH
74961: LD_INT 1
74963: ARRAY
74964: PUSH
74965: LD_INT 1
74967: ARRAY
74968: PPUSH
74969: LD_EXP 89
74973: PUSH
74974: LD_VAR 0 2
74978: ARRAY
74979: PUSH
74980: LD_INT 1
74982: ARRAY
74983: PUSH
74984: LD_INT 2
74986: ARRAY
74987: PPUSH
74988: CALL_OW 297
74992: PUSH
74993: LD_INT 6
74995: GREATER
74996: AND
74997: IFFALSE 75056
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74999: LD_EXP 90
75003: PUSH
75004: LD_VAR 0 2
75008: ARRAY
75009: PUSH
75010: LD_INT 1
75012: ARRAY
75013: PPUSH
75014: LD_EXP 89
75018: PUSH
75019: LD_VAR 0 2
75023: ARRAY
75024: PUSH
75025: LD_INT 1
75027: ARRAY
75028: PUSH
75029: LD_INT 1
75031: ARRAY
75032: PPUSH
75033: LD_EXP 89
75037: PUSH
75038: LD_VAR 0 2
75042: ARRAY
75043: PUSH
75044: LD_INT 1
75046: ARRAY
75047: PUSH
75048: LD_INT 2
75050: ARRAY
75051: PPUSH
75052: CALL_OW 111
// end ; end ; end ;
75056: GO 74469
75058: POP
75059: POP
// end ;
75060: LD_VAR 0 1
75064: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
75065: LD_INT 0
75067: PPUSH
75068: PPUSH
75069: PPUSH
75070: PPUSH
75071: PPUSH
75072: PPUSH
75073: PPUSH
75074: PPUSH
75075: PPUSH
75076: PPUSH
75077: PPUSH
// if not mc_bases then
75078: LD_EXP 52
75082: NOT
75083: IFFALSE 75087
// exit ;
75085: GO 75811
// for i = 1 to mc_bases do
75087: LD_ADDR_VAR 0 2
75091: PUSH
75092: DOUBLE
75093: LD_INT 1
75095: DEC
75096: ST_TO_ADDR
75097: LD_EXP 52
75101: PUSH
75102: FOR_TO
75103: IFFALSE 75809
// begin if not mc_bases [ i ] then
75105: LD_EXP 52
75109: PUSH
75110: LD_VAR 0 2
75114: ARRAY
75115: NOT
75116: IFFALSE 75120
// continue ;
75118: GO 75102
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75120: LD_ADDR_VAR 0 7
75124: PUSH
75125: LD_EXP 52
75129: PUSH
75130: LD_VAR 0 2
75134: ARRAY
75135: PUSH
75136: LD_INT 1
75138: ARRAY
75139: PPUSH
75140: CALL_OW 248
75144: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
75145: LD_VAR 0 7
75149: PUSH
75150: LD_INT 3
75152: EQUAL
75153: PUSH
75154: LD_EXP 71
75158: PUSH
75159: LD_VAR 0 2
75163: ARRAY
75164: PUSH
75165: LD_EXP 74
75169: PUSH
75170: LD_VAR 0 2
75174: ARRAY
75175: UNION
75176: PPUSH
75177: LD_INT 33
75179: PUSH
75180: LD_INT 2
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PPUSH
75187: CALL_OW 72
75191: NOT
75192: OR
75193: IFFALSE 75197
// continue ;
75195: GO 75102
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75197: LD_ADDR_VAR 0 9
75201: PUSH
75202: LD_EXP 52
75206: PUSH
75207: LD_VAR 0 2
75211: ARRAY
75212: PPUSH
75213: LD_INT 30
75215: PUSH
75216: LD_INT 36
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PPUSH
75223: CALL_OW 72
75227: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
75228: LD_ADDR_VAR 0 10
75232: PUSH
75233: LD_EXP 71
75237: PUSH
75238: LD_VAR 0 2
75242: ARRAY
75243: PPUSH
75244: LD_INT 34
75246: PUSH
75247: LD_INT 31
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PPUSH
75254: CALL_OW 72
75258: ST_TO_ADDR
// if not cts and not mcts then
75259: LD_VAR 0 9
75263: NOT
75264: PUSH
75265: LD_VAR 0 10
75269: NOT
75270: AND
75271: IFFALSE 75275
// continue ;
75273: GO 75102
// x := cts ;
75275: LD_ADDR_VAR 0 11
75279: PUSH
75280: LD_VAR 0 9
75284: ST_TO_ADDR
// if not x then
75285: LD_VAR 0 11
75289: NOT
75290: IFFALSE 75302
// x := mcts ;
75292: LD_ADDR_VAR 0 11
75296: PUSH
75297: LD_VAR 0 10
75301: ST_TO_ADDR
// if mc_remote_driver [ i ] then
75302: LD_EXP 92
75306: PUSH
75307: LD_VAR 0 2
75311: ARRAY
75312: IFFALSE 75581
// for j in mc_remote_driver [ i ] do
75314: LD_ADDR_VAR 0 3
75318: PUSH
75319: LD_EXP 92
75323: PUSH
75324: LD_VAR 0 2
75328: ARRAY
75329: PUSH
75330: FOR_IN
75331: IFFALSE 75579
// begin if GetClass ( j ) <> 3 then
75333: LD_VAR 0 3
75337: PPUSH
75338: CALL_OW 257
75342: PUSH
75343: LD_INT 3
75345: NONEQUAL
75346: IFFALSE 75399
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
75348: LD_ADDR_EXP 92
75352: PUSH
75353: LD_EXP 92
75357: PPUSH
75358: LD_VAR 0 2
75362: PPUSH
75363: LD_EXP 92
75367: PUSH
75368: LD_VAR 0 2
75372: ARRAY
75373: PUSH
75374: LD_VAR 0 3
75378: DIFF
75379: PPUSH
75380: CALL_OW 1
75384: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75385: LD_VAR 0 3
75389: PPUSH
75390: LD_INT 0
75392: PPUSH
75393: CALL_OW 109
// continue ;
75397: GO 75330
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
75399: LD_VAR 0 3
75403: PPUSH
75404: CALL_OW 310
75408: NOT
75409: PUSH
75410: LD_VAR 0 3
75414: PPUSH
75415: CALL_OW 310
75419: PPUSH
75420: CALL_OW 266
75424: PUSH
75425: LD_INT 36
75427: NONEQUAL
75428: PUSH
75429: LD_VAR 0 3
75433: PPUSH
75434: CALL 51304 0 1
75438: NOT
75439: AND
75440: OR
75441: IFFALSE 75577
// begin if IsInUnit ( j ) then
75443: LD_VAR 0 3
75447: PPUSH
75448: CALL_OW 310
75452: IFFALSE 75463
// ComExitBuilding ( j ) ;
75454: LD_VAR 0 3
75458: PPUSH
75459: CALL_OW 122
// ct := 0 ;
75463: LD_ADDR_VAR 0 8
75467: PUSH
75468: LD_INT 0
75470: ST_TO_ADDR
// for k in x do
75471: LD_ADDR_VAR 0 4
75475: PUSH
75476: LD_VAR 0 11
75480: PUSH
75481: FOR_IN
75482: IFFALSE 75555
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
75484: LD_VAR 0 4
75488: PPUSH
75489: CALL_OW 264
75493: PUSH
75494: LD_INT 31
75496: EQUAL
75497: PUSH
75498: LD_VAR 0 4
75502: PPUSH
75503: CALL_OW 311
75507: NOT
75508: AND
75509: PUSH
75510: LD_VAR 0 4
75514: PPUSH
75515: CALL_OW 266
75519: PUSH
75520: LD_INT 36
75522: EQUAL
75523: PUSH
75524: LD_VAR 0 4
75528: PPUSH
75529: CALL_OW 313
75533: PUSH
75534: LD_INT 3
75536: LESS
75537: AND
75538: OR
75539: IFFALSE 75553
// begin ct := k ;
75541: LD_ADDR_VAR 0 8
75545: PUSH
75546: LD_VAR 0 4
75550: ST_TO_ADDR
// break ;
75551: GO 75555
// end ;
75553: GO 75481
75555: POP
75556: POP
// if ct then
75557: LD_VAR 0 8
75561: IFFALSE 75577
// ComEnterUnit ( j , ct ) ;
75563: LD_VAR 0 3
75567: PPUSH
75568: LD_VAR 0 8
75572: PPUSH
75573: CALL_OW 120
// end ; end ;
75577: GO 75330
75579: POP
75580: POP
// places := 0 ;
75581: LD_ADDR_VAR 0 5
75585: PUSH
75586: LD_INT 0
75588: ST_TO_ADDR
// for j = 1 to x do
75589: LD_ADDR_VAR 0 3
75593: PUSH
75594: DOUBLE
75595: LD_INT 1
75597: DEC
75598: ST_TO_ADDR
75599: LD_VAR 0 11
75603: PUSH
75604: FOR_TO
75605: IFFALSE 75660
// if GetWeapon ( x [ j ] ) = ar_control_tower then
75607: LD_VAR 0 11
75611: PUSH
75612: LD_VAR 0 3
75616: ARRAY
75617: PPUSH
75618: CALL_OW 264
75622: PUSH
75623: LD_INT 31
75625: EQUAL
75626: IFFALSE 75644
// places := places + 1 else
75628: LD_ADDR_VAR 0 5
75632: PUSH
75633: LD_VAR 0 5
75637: PUSH
75638: LD_INT 1
75640: PLUS
75641: ST_TO_ADDR
75642: GO 75658
// places := places + 3 ;
75644: LD_ADDR_VAR 0 5
75648: PUSH
75649: LD_VAR 0 5
75653: PUSH
75654: LD_INT 3
75656: PLUS
75657: ST_TO_ADDR
75658: GO 75604
75660: POP
75661: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
75662: LD_ADDR_VAR 0 6
75666: PUSH
75667: LD_EXP 52
75671: PUSH
75672: LD_VAR 0 2
75676: ARRAY
75677: PPUSH
75678: LD_INT 25
75680: PUSH
75681: LD_INT 3
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PPUSH
75688: CALL_OW 72
75692: PUSH
75693: LD_EXP 92
75697: PUSH
75698: LD_VAR 0 2
75702: ARRAY
75703: DIFF
75704: PPUSH
75705: LD_INT 3
75707: PPUSH
75708: CALL 52204 0 2
75712: ST_TO_ADDR
// if not tmp then
75713: LD_VAR 0 6
75717: NOT
75718: IFFALSE 75722
// continue ;
75720: GO 75102
// places := places - mc_remote_driver [ i ] ;
75722: LD_ADDR_VAR 0 5
75726: PUSH
75727: LD_VAR 0 5
75731: PUSH
75732: LD_EXP 92
75736: PUSH
75737: LD_VAR 0 2
75741: ARRAY
75742: MINUS
75743: ST_TO_ADDR
// if places then
75744: LD_VAR 0 5
75748: IFFALSE 75807
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
75750: LD_ADDR_EXP 92
75754: PUSH
75755: LD_EXP 92
75759: PPUSH
75760: LD_VAR 0 2
75764: PPUSH
75765: LD_EXP 92
75769: PUSH
75770: LD_VAR 0 2
75774: ARRAY
75775: PUSH
75776: LD_VAR 0 6
75780: PUSH
75781: LD_INT 1
75783: ARRAY
75784: UNION
75785: PPUSH
75786: CALL_OW 1
75790: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
75791: LD_VAR 0 6
75795: PUSH
75796: LD_INT 1
75798: ARRAY
75799: PPUSH
75800: LD_INT 126
75802: PPUSH
75803: CALL_OW 109
// end ; end ;
75807: GO 75102
75809: POP
75810: POP
// end ;
75811: LD_VAR 0 1
75815: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
75816: LD_INT 0
75818: PPUSH
75819: PPUSH
75820: PPUSH
75821: PPUSH
75822: PPUSH
75823: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
75824: LD_VAR 0 1
75828: NOT
75829: PUSH
75830: LD_VAR 0 2
75834: NOT
75835: OR
75836: PUSH
75837: LD_VAR 0 3
75841: NOT
75842: OR
75843: PUSH
75844: LD_VAR 0 4
75848: PUSH
75849: LD_INT 1
75851: PUSH
75852: LD_INT 2
75854: PUSH
75855: LD_INT 3
75857: PUSH
75858: LD_INT 4
75860: PUSH
75861: LD_INT 5
75863: PUSH
75864: LD_INT 8
75866: PUSH
75867: LD_INT 9
75869: PUSH
75870: LD_INT 15
75872: PUSH
75873: LD_INT 16
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: IN
75887: NOT
75888: OR
75889: IFFALSE 75893
// exit ;
75891: GO 76793
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
75893: LD_ADDR_VAR 0 2
75897: PUSH
75898: LD_VAR 0 2
75902: PPUSH
75903: LD_INT 21
75905: PUSH
75906: LD_INT 3
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 24
75915: PUSH
75916: LD_INT 250
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PPUSH
75927: CALL_OW 72
75931: ST_TO_ADDR
// case class of 1 , 15 :
75932: LD_VAR 0 4
75936: PUSH
75937: LD_INT 1
75939: DOUBLE
75940: EQUAL
75941: IFTRUE 75951
75943: LD_INT 15
75945: DOUBLE
75946: EQUAL
75947: IFTRUE 75951
75949: GO 76036
75951: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75952: LD_ADDR_VAR 0 8
75956: PUSH
75957: LD_VAR 0 2
75961: PPUSH
75962: LD_INT 2
75964: PUSH
75965: LD_INT 30
75967: PUSH
75968: LD_INT 32
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: PUSH
75975: LD_INT 30
75977: PUSH
75978: LD_INT 31
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: LIST
75989: PPUSH
75990: CALL_OW 72
75994: PUSH
75995: LD_VAR 0 2
75999: PPUSH
76000: LD_INT 2
76002: PUSH
76003: LD_INT 30
76005: PUSH
76006: LD_INT 4
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PUSH
76013: LD_INT 30
76015: PUSH
76016: LD_INT 5
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: PPUSH
76028: CALL_OW 72
76032: ADD
76033: ST_TO_ADDR
76034: GO 76282
76036: LD_INT 2
76038: DOUBLE
76039: EQUAL
76040: IFTRUE 76050
76042: LD_INT 16
76044: DOUBLE
76045: EQUAL
76046: IFTRUE 76050
76048: GO 76096
76050: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76051: LD_ADDR_VAR 0 8
76055: PUSH
76056: LD_VAR 0 2
76060: PPUSH
76061: LD_INT 2
76063: PUSH
76064: LD_INT 30
76066: PUSH
76067: LD_INT 0
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: LD_INT 30
76076: PUSH
76077: LD_INT 1
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: LIST
76088: PPUSH
76089: CALL_OW 72
76093: ST_TO_ADDR
76094: GO 76282
76096: LD_INT 3
76098: DOUBLE
76099: EQUAL
76100: IFTRUE 76104
76102: GO 76150
76104: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76105: LD_ADDR_VAR 0 8
76109: PUSH
76110: LD_VAR 0 2
76114: PPUSH
76115: LD_INT 2
76117: PUSH
76118: LD_INT 30
76120: PUSH
76121: LD_INT 2
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: LD_INT 30
76130: PUSH
76131: LD_INT 3
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: LIST
76142: PPUSH
76143: CALL_OW 72
76147: ST_TO_ADDR
76148: GO 76282
76150: LD_INT 4
76152: DOUBLE
76153: EQUAL
76154: IFTRUE 76158
76156: GO 76215
76158: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76159: LD_ADDR_VAR 0 8
76163: PUSH
76164: LD_VAR 0 2
76168: PPUSH
76169: LD_INT 2
76171: PUSH
76172: LD_INT 30
76174: PUSH
76175: LD_INT 6
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_INT 30
76184: PUSH
76185: LD_INT 7
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 30
76194: PUSH
76195: LD_INT 8
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: PPUSH
76208: CALL_OW 72
76212: ST_TO_ADDR
76213: GO 76282
76215: LD_INT 5
76217: DOUBLE
76218: EQUAL
76219: IFTRUE 76235
76221: LD_INT 8
76223: DOUBLE
76224: EQUAL
76225: IFTRUE 76235
76227: LD_INT 9
76229: DOUBLE
76230: EQUAL
76231: IFTRUE 76235
76233: GO 76281
76235: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76236: LD_ADDR_VAR 0 8
76240: PUSH
76241: LD_VAR 0 2
76245: PPUSH
76246: LD_INT 2
76248: PUSH
76249: LD_INT 30
76251: PUSH
76252: LD_INT 4
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 30
76261: PUSH
76262: LD_INT 5
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: LIST
76273: PPUSH
76274: CALL_OW 72
76278: ST_TO_ADDR
76279: GO 76282
76281: POP
// if not tmp then
76282: LD_VAR 0 8
76286: NOT
76287: IFFALSE 76291
// exit ;
76289: GO 76793
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
76291: LD_VAR 0 4
76295: PUSH
76296: LD_INT 1
76298: PUSH
76299: LD_INT 15
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: IN
76306: PUSH
76307: LD_EXP 61
76311: PUSH
76312: LD_VAR 0 1
76316: ARRAY
76317: AND
76318: IFFALSE 76474
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
76320: LD_ADDR_VAR 0 9
76324: PUSH
76325: LD_EXP 61
76329: PUSH
76330: LD_VAR 0 1
76334: ARRAY
76335: PUSH
76336: LD_INT 1
76338: ARRAY
76339: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
76340: LD_VAR 0 9
76344: PUSH
76345: LD_EXP 62
76349: PUSH
76350: LD_VAR 0 1
76354: ARRAY
76355: IN
76356: NOT
76357: IFFALSE 76472
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
76359: LD_ADDR_EXP 62
76363: PUSH
76364: LD_EXP 62
76368: PPUSH
76369: LD_VAR 0 1
76373: PUSH
76374: LD_EXP 62
76378: PUSH
76379: LD_VAR 0 1
76383: ARRAY
76384: PUSH
76385: LD_INT 1
76387: PLUS
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PPUSH
76393: LD_VAR 0 9
76397: PPUSH
76398: CALL 17956 0 3
76402: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
76403: LD_ADDR_EXP 61
76407: PUSH
76408: LD_EXP 61
76412: PPUSH
76413: LD_VAR 0 1
76417: PPUSH
76418: LD_EXP 61
76422: PUSH
76423: LD_VAR 0 1
76427: ARRAY
76428: PUSH
76429: LD_VAR 0 9
76433: DIFF
76434: PPUSH
76435: CALL_OW 1
76439: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
76440: LD_VAR 0 3
76444: PPUSH
76445: LD_EXP 62
76449: PUSH
76450: LD_VAR 0 1
76454: ARRAY
76455: PUSH
76456: LD_EXP 62
76460: PUSH
76461: LD_VAR 0 1
76465: ARRAY
76466: ARRAY
76467: PPUSH
76468: CALL_OW 120
// end ; exit ;
76472: GO 76793
// end ; if tmp > 1 then
76474: LD_VAR 0 8
76478: PUSH
76479: LD_INT 1
76481: GREATER
76482: IFFALSE 76586
// for i = 2 to tmp do
76484: LD_ADDR_VAR 0 6
76488: PUSH
76489: DOUBLE
76490: LD_INT 2
76492: DEC
76493: ST_TO_ADDR
76494: LD_VAR 0 8
76498: PUSH
76499: FOR_TO
76500: IFFALSE 76584
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
76502: LD_VAR 0 8
76506: PUSH
76507: LD_VAR 0 6
76511: ARRAY
76512: PPUSH
76513: CALL_OW 461
76517: PUSH
76518: LD_INT 6
76520: EQUAL
76521: IFFALSE 76582
// begin x := tmp [ i ] ;
76523: LD_ADDR_VAR 0 9
76527: PUSH
76528: LD_VAR 0 8
76532: PUSH
76533: LD_VAR 0 6
76537: ARRAY
76538: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
76539: LD_ADDR_VAR 0 8
76543: PUSH
76544: LD_VAR 0 8
76548: PPUSH
76549: LD_VAR 0 6
76553: PPUSH
76554: CALL_OW 3
76558: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
76559: LD_ADDR_VAR 0 8
76563: PUSH
76564: LD_VAR 0 8
76568: PPUSH
76569: LD_INT 1
76571: PPUSH
76572: LD_VAR 0 9
76576: PPUSH
76577: CALL_OW 2
76581: ST_TO_ADDR
// end ;
76582: GO 76499
76584: POP
76585: POP
// for i in tmp do
76586: LD_ADDR_VAR 0 6
76590: PUSH
76591: LD_VAR 0 8
76595: PUSH
76596: FOR_IN
76597: IFFALSE 76666
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
76599: LD_VAR 0 6
76603: PPUSH
76604: CALL_OW 313
76608: PUSH
76609: LD_INT 6
76611: LESS
76612: PUSH
76613: LD_VAR 0 6
76617: PPUSH
76618: CALL_OW 266
76622: PUSH
76623: LD_INT 31
76625: PUSH
76626: LD_INT 32
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: IN
76633: NOT
76634: AND
76635: PUSH
76636: LD_VAR 0 6
76640: PPUSH
76641: CALL_OW 313
76645: PUSH
76646: LD_INT 0
76648: EQUAL
76649: OR
76650: IFFALSE 76664
// begin j := i ;
76652: LD_ADDR_VAR 0 7
76656: PUSH
76657: LD_VAR 0 6
76661: ST_TO_ADDR
// break ;
76662: GO 76666
// end ; end ;
76664: GO 76596
76666: POP
76667: POP
// if j then
76668: LD_VAR 0 7
76672: IFFALSE 76690
// ComEnterUnit ( unit , j ) else
76674: LD_VAR 0 3
76678: PPUSH
76679: LD_VAR 0 7
76683: PPUSH
76684: CALL_OW 120
76688: GO 76793
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76690: LD_ADDR_VAR 0 10
76694: PUSH
76695: LD_VAR 0 2
76699: PPUSH
76700: LD_INT 2
76702: PUSH
76703: LD_INT 30
76705: PUSH
76706: LD_INT 0
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: LD_INT 30
76715: PUSH
76716: LD_INT 1
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: PPUSH
76728: CALL_OW 72
76732: ST_TO_ADDR
// if depot then
76733: LD_VAR 0 10
76737: IFFALSE 76793
// begin depot := NearestUnitToUnit ( depot , unit ) ;
76739: LD_ADDR_VAR 0 10
76743: PUSH
76744: LD_VAR 0 10
76748: PPUSH
76749: LD_VAR 0 3
76753: PPUSH
76754: CALL_OW 74
76758: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
76759: LD_VAR 0 3
76763: PPUSH
76764: LD_VAR 0 10
76768: PPUSH
76769: CALL_OW 296
76773: PUSH
76774: LD_INT 10
76776: GREATER
76777: IFFALSE 76793
// ComStandNearbyBuilding ( unit , depot ) ;
76779: LD_VAR 0 3
76783: PPUSH
76784: LD_VAR 0 10
76788: PPUSH
76789: CALL 12523 0 2
// end ; end ; end ;
76793: LD_VAR 0 5
76797: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
76798: LD_INT 0
76800: PPUSH
76801: PPUSH
76802: PPUSH
76803: PPUSH
// if not mc_bases then
76804: LD_EXP 52
76808: NOT
76809: IFFALSE 76813
// exit ;
76811: GO 77052
// for i = 1 to mc_bases do
76813: LD_ADDR_VAR 0 2
76817: PUSH
76818: DOUBLE
76819: LD_INT 1
76821: DEC
76822: ST_TO_ADDR
76823: LD_EXP 52
76827: PUSH
76828: FOR_TO
76829: IFFALSE 77050
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
76831: LD_ADDR_VAR 0 4
76835: PUSH
76836: LD_EXP 52
76840: PUSH
76841: LD_VAR 0 2
76845: ARRAY
76846: PPUSH
76847: LD_INT 21
76849: PUSH
76850: LD_INT 1
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PPUSH
76857: CALL_OW 72
76861: PUSH
76862: LD_EXP 81
76866: PUSH
76867: LD_VAR 0 2
76871: ARRAY
76872: UNION
76873: ST_TO_ADDR
// if not tmp then
76874: LD_VAR 0 4
76878: NOT
76879: IFFALSE 76883
// continue ;
76881: GO 76828
// for j in tmp do
76883: LD_ADDR_VAR 0 3
76887: PUSH
76888: LD_VAR 0 4
76892: PUSH
76893: FOR_IN
76894: IFFALSE 77046
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
76896: LD_VAR 0 3
76900: PPUSH
76901: CALL_OW 110
76905: NOT
76906: PUSH
76907: LD_VAR 0 3
76911: PPUSH
76912: CALL_OW 314
76916: NOT
76917: AND
76918: PUSH
76919: LD_VAR 0 3
76923: PPUSH
76924: CALL_OW 311
76928: NOT
76929: AND
76930: PUSH
76931: LD_VAR 0 3
76935: PPUSH
76936: CALL_OW 310
76940: NOT
76941: AND
76942: PUSH
76943: LD_VAR 0 3
76947: PUSH
76948: LD_EXP 55
76952: PUSH
76953: LD_VAR 0 2
76957: ARRAY
76958: PUSH
76959: LD_INT 1
76961: ARRAY
76962: IN
76963: NOT
76964: AND
76965: PUSH
76966: LD_VAR 0 3
76970: PUSH
76971: LD_EXP 55
76975: PUSH
76976: LD_VAR 0 2
76980: ARRAY
76981: PUSH
76982: LD_INT 2
76984: ARRAY
76985: IN
76986: NOT
76987: AND
76988: PUSH
76989: LD_VAR 0 3
76993: PUSH
76994: LD_EXP 64
76998: PUSH
76999: LD_VAR 0 2
77003: ARRAY
77004: IN
77005: NOT
77006: AND
77007: IFFALSE 77044
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77009: LD_VAR 0 2
77013: PPUSH
77014: LD_EXP 52
77018: PUSH
77019: LD_VAR 0 2
77023: ARRAY
77024: PPUSH
77025: LD_VAR 0 3
77029: PPUSH
77030: LD_VAR 0 3
77034: PPUSH
77035: CALL_OW 257
77039: PPUSH
77040: CALL 75816 0 4
// end ;
77044: GO 76893
77046: POP
77047: POP
// end ;
77048: GO 76828
77050: POP
77051: POP
// end ;
77052: LD_VAR 0 1
77056: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77057: LD_INT 0
77059: PPUSH
77060: PPUSH
77061: PPUSH
77062: PPUSH
77063: PPUSH
77064: PPUSH
// if not mc_bases [ base ] then
77065: LD_EXP 52
77069: PUSH
77070: LD_VAR 0 1
77074: ARRAY
77075: NOT
77076: IFFALSE 77080
// exit ;
77078: GO 77262
// tmp := [ ] ;
77080: LD_ADDR_VAR 0 6
77084: PUSH
77085: EMPTY
77086: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77087: LD_ADDR_VAR 0 7
77091: PUSH
77092: LD_VAR 0 3
77096: PPUSH
77097: LD_INT 0
77099: PPUSH
77100: CALL_OW 517
77104: ST_TO_ADDR
// if not list then
77105: LD_VAR 0 7
77109: NOT
77110: IFFALSE 77114
// exit ;
77112: GO 77262
// for i = 1 to amount do
77114: LD_ADDR_VAR 0 5
77118: PUSH
77119: DOUBLE
77120: LD_INT 1
77122: DEC
77123: ST_TO_ADDR
77124: LD_VAR 0 2
77128: PUSH
77129: FOR_TO
77130: IFFALSE 77210
// begin x := rand ( 1 , list [ 1 ] ) ;
77132: LD_ADDR_VAR 0 8
77136: PUSH
77137: LD_INT 1
77139: PPUSH
77140: LD_VAR 0 7
77144: PUSH
77145: LD_INT 1
77147: ARRAY
77148: PPUSH
77149: CALL_OW 12
77153: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77154: LD_ADDR_VAR 0 6
77158: PUSH
77159: LD_VAR 0 6
77163: PPUSH
77164: LD_VAR 0 5
77168: PPUSH
77169: LD_VAR 0 7
77173: PUSH
77174: LD_INT 1
77176: ARRAY
77177: PUSH
77178: LD_VAR 0 8
77182: ARRAY
77183: PUSH
77184: LD_VAR 0 7
77188: PUSH
77189: LD_INT 2
77191: ARRAY
77192: PUSH
77193: LD_VAR 0 8
77197: ARRAY
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PPUSH
77203: CALL_OW 1
77207: ST_TO_ADDR
// end ;
77208: GO 77129
77210: POP
77211: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77212: LD_ADDR_EXP 65
77216: PUSH
77217: LD_EXP 65
77221: PPUSH
77222: LD_VAR 0 1
77226: PPUSH
77227: LD_VAR 0 6
77231: PPUSH
77232: CALL_OW 1
77236: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77237: LD_ADDR_EXP 67
77241: PUSH
77242: LD_EXP 67
77246: PPUSH
77247: LD_VAR 0 1
77251: PPUSH
77252: LD_VAR 0 3
77256: PPUSH
77257: CALL_OW 1
77261: ST_TO_ADDR
// end ;
77262: LD_VAR 0 4
77266: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77267: LD_INT 0
77269: PPUSH
// if not mc_bases [ base ] then
77270: LD_EXP 52
77274: PUSH
77275: LD_VAR 0 1
77279: ARRAY
77280: NOT
77281: IFFALSE 77285
// exit ;
77283: GO 77310
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
77285: LD_ADDR_EXP 57
77289: PUSH
77290: LD_EXP 57
77294: PPUSH
77295: LD_VAR 0 1
77299: PPUSH
77300: LD_VAR 0 2
77304: PPUSH
77305: CALL_OW 1
77309: ST_TO_ADDR
// end ;
77310: LD_VAR 0 3
77314: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
77315: LD_INT 0
77317: PPUSH
// if not mc_bases [ base ] then
77318: LD_EXP 52
77322: PUSH
77323: LD_VAR 0 1
77327: ARRAY
77328: NOT
77329: IFFALSE 77333
// exit ;
77331: GO 77370
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
77333: LD_ADDR_EXP 57
77337: PUSH
77338: LD_EXP 57
77342: PPUSH
77343: LD_VAR 0 1
77347: PPUSH
77348: LD_EXP 57
77352: PUSH
77353: LD_VAR 0 1
77357: ARRAY
77358: PUSH
77359: LD_VAR 0 2
77363: UNION
77364: PPUSH
77365: CALL_OW 1
77369: ST_TO_ADDR
// end ;
77370: LD_VAR 0 3
77374: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
77375: LD_INT 0
77377: PPUSH
// if not mc_bases [ base ] then
77378: LD_EXP 52
77382: PUSH
77383: LD_VAR 0 1
77387: ARRAY
77388: NOT
77389: IFFALSE 77393
// exit ;
77391: GO 77418
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
77393: LD_ADDR_EXP 73
77397: PUSH
77398: LD_EXP 73
77402: PPUSH
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 2
77412: PPUSH
77413: CALL_OW 1
77417: ST_TO_ADDR
// end ;
77418: LD_VAR 0 3
77422: RET
// export function MC_InsertProduceList ( base , components ) ; begin
77423: LD_INT 0
77425: PPUSH
// if not mc_bases [ base ] then
77426: LD_EXP 52
77430: PUSH
77431: LD_VAR 0 1
77435: ARRAY
77436: NOT
77437: IFFALSE 77441
// exit ;
77439: GO 77478
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
77441: LD_ADDR_EXP 73
77445: PUSH
77446: LD_EXP 73
77450: PPUSH
77451: LD_VAR 0 1
77455: PPUSH
77456: LD_EXP 73
77460: PUSH
77461: LD_VAR 0 1
77465: ARRAY
77466: PUSH
77467: LD_VAR 0 2
77471: ADD
77472: PPUSH
77473: CALL_OW 1
77477: ST_TO_ADDR
// end ;
77478: LD_VAR 0 3
77482: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
77483: LD_INT 0
77485: PPUSH
// if not mc_bases [ base ] then
77486: LD_EXP 52
77490: PUSH
77491: LD_VAR 0 1
77495: ARRAY
77496: NOT
77497: IFFALSE 77501
// exit ;
77499: GO 77555
// mc_defender := Replace ( mc_defender , base , deflist ) ;
77501: LD_ADDR_EXP 74
77505: PUSH
77506: LD_EXP 74
77510: PPUSH
77511: LD_VAR 0 1
77515: PPUSH
77516: LD_VAR 0 2
77520: PPUSH
77521: CALL_OW 1
77525: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
77526: LD_ADDR_EXP 63
77530: PUSH
77531: LD_EXP 63
77535: PPUSH
77536: LD_VAR 0 1
77540: PPUSH
77541: LD_VAR 0 2
77545: PUSH
77546: LD_INT 0
77548: PLUS
77549: PPUSH
77550: CALL_OW 1
77554: ST_TO_ADDR
// end ;
77555: LD_VAR 0 3
77559: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
77560: LD_INT 0
77562: PPUSH
// if not mc_bases [ base ] then
77563: LD_EXP 52
77567: PUSH
77568: LD_VAR 0 1
77572: ARRAY
77573: NOT
77574: IFFALSE 77578
// exit ;
77576: GO 77603
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
77578: LD_ADDR_EXP 63
77582: PUSH
77583: LD_EXP 63
77587: PPUSH
77588: LD_VAR 0 1
77592: PPUSH
77593: LD_VAR 0 2
77597: PPUSH
77598: CALL_OW 1
77602: ST_TO_ADDR
// end ;
77603: LD_VAR 0 3
77607: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
77608: LD_INT 0
77610: PPUSH
77611: PPUSH
77612: PPUSH
77613: PPUSH
// if not mc_bases [ base ] then
77614: LD_EXP 52
77618: PUSH
77619: LD_VAR 0 1
77623: ARRAY
77624: NOT
77625: IFFALSE 77629
// exit ;
77627: GO 77694
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
77629: LD_ADDR_EXP 72
77633: PUSH
77634: LD_EXP 72
77638: PPUSH
77639: LD_VAR 0 1
77643: PUSH
77644: LD_EXP 72
77648: PUSH
77649: LD_VAR 0 1
77653: ARRAY
77654: PUSH
77655: LD_INT 1
77657: PLUS
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PPUSH
77663: LD_VAR 0 1
77667: PUSH
77668: LD_VAR 0 2
77672: PUSH
77673: LD_VAR 0 3
77677: PUSH
77678: LD_VAR 0 4
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: PPUSH
77689: CALL 17956 0 3
77693: ST_TO_ADDR
// end ;
77694: LD_VAR 0 5
77698: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
77699: LD_INT 0
77701: PPUSH
// if not mc_bases [ base ] then
77702: LD_EXP 52
77706: PUSH
77707: LD_VAR 0 1
77711: ARRAY
77712: NOT
77713: IFFALSE 77717
// exit ;
77715: GO 77742
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
77717: LD_ADDR_EXP 89
77721: PUSH
77722: LD_EXP 89
77726: PPUSH
77727: LD_VAR 0 1
77731: PPUSH
77732: LD_VAR 0 2
77736: PPUSH
77737: CALL_OW 1
77741: ST_TO_ADDR
// end ;
77742: LD_VAR 0 3
77746: RET
// export function MC_GetMinesField ( base ) ; begin
77747: LD_INT 0
77749: PPUSH
// result := mc_mines [ base ] ;
77750: LD_ADDR_VAR 0 2
77754: PUSH
77755: LD_EXP 65
77759: PUSH
77760: LD_VAR 0 1
77764: ARRAY
77765: ST_TO_ADDR
// end ;
77766: LD_VAR 0 2
77770: RET
// export function MC_GetProduceList ( base ) ; begin
77771: LD_INT 0
77773: PPUSH
// result := mc_produce [ base ] ;
77774: LD_ADDR_VAR 0 2
77778: PUSH
77779: LD_EXP 73
77783: PUSH
77784: LD_VAR 0 1
77788: ARRAY
77789: ST_TO_ADDR
// end ;
77790: LD_VAR 0 2
77794: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
77795: LD_INT 0
77797: PPUSH
77798: PPUSH
// if not mc_bases then
77799: LD_EXP 52
77803: NOT
77804: IFFALSE 77808
// exit ;
77806: GO 77873
// if mc_bases [ base ] then
77808: LD_EXP 52
77812: PUSH
77813: LD_VAR 0 1
77817: ARRAY
77818: IFFALSE 77873
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77820: LD_ADDR_VAR 0 3
77824: PUSH
77825: LD_EXP 52
77829: PUSH
77830: LD_VAR 0 1
77834: ARRAY
77835: PPUSH
77836: LD_INT 30
77838: PUSH
77839: LD_VAR 0 2
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PPUSH
77848: CALL_OW 72
77852: ST_TO_ADDR
// if result then
77853: LD_VAR 0 3
77857: IFFALSE 77873
// result := result [ 1 ] ;
77859: LD_ADDR_VAR 0 3
77863: PUSH
77864: LD_VAR 0 3
77868: PUSH
77869: LD_INT 1
77871: ARRAY
77872: ST_TO_ADDR
// end ; end ;
77873: LD_VAR 0 3
77877: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
77878: LD_INT 0
77880: PPUSH
77881: PPUSH
// if not mc_bases then
77882: LD_EXP 52
77886: NOT
77887: IFFALSE 77891
// exit ;
77889: GO 77936
// if mc_bases [ base ] then
77891: LD_EXP 52
77895: PUSH
77896: LD_VAR 0 1
77900: ARRAY
77901: IFFALSE 77936
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77903: LD_ADDR_VAR 0 3
77907: PUSH
77908: LD_EXP 52
77912: PUSH
77913: LD_VAR 0 1
77917: ARRAY
77918: PPUSH
77919: LD_INT 30
77921: PUSH
77922: LD_VAR 0 2
77926: PUSH
77927: EMPTY
77928: LIST
77929: LIST
77930: PPUSH
77931: CALL_OW 72
77935: ST_TO_ADDR
// end ;
77936: LD_VAR 0 3
77940: RET
// export function MC_SetTame ( base , area ) ; begin
77941: LD_INT 0
77943: PPUSH
// if not mc_bases or not base then
77944: LD_EXP 52
77948: NOT
77949: PUSH
77950: LD_VAR 0 1
77954: NOT
77955: OR
77956: IFFALSE 77960
// exit ;
77958: GO 77985
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77960: LD_ADDR_EXP 80
77964: PUSH
77965: LD_EXP 80
77969: PPUSH
77970: LD_VAR 0 1
77974: PPUSH
77975: LD_VAR 0 2
77979: PPUSH
77980: CALL_OW 1
77984: ST_TO_ADDR
// end ;
77985: LD_VAR 0 3
77989: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77990: LD_INT 0
77992: PPUSH
77993: PPUSH
// if not mc_bases or not base then
77994: LD_EXP 52
77998: NOT
77999: PUSH
78000: LD_VAR 0 1
78004: NOT
78005: OR
78006: IFFALSE 78010
// exit ;
78008: GO 78112
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78010: LD_ADDR_VAR 0 4
78014: PUSH
78015: LD_EXP 52
78019: PUSH
78020: LD_VAR 0 1
78024: ARRAY
78025: PPUSH
78026: LD_INT 30
78028: PUSH
78029: LD_VAR 0 2
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PPUSH
78038: CALL_OW 72
78042: ST_TO_ADDR
// if not tmp then
78043: LD_VAR 0 4
78047: NOT
78048: IFFALSE 78052
// exit ;
78050: GO 78112
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78052: LD_ADDR_EXP 84
78056: PUSH
78057: LD_EXP 84
78061: PPUSH
78062: LD_VAR 0 1
78066: PPUSH
78067: LD_EXP 84
78071: PUSH
78072: LD_VAR 0 1
78076: ARRAY
78077: PPUSH
78078: LD_EXP 84
78082: PUSH
78083: LD_VAR 0 1
78087: ARRAY
78088: PUSH
78089: LD_INT 1
78091: PLUS
78092: PPUSH
78093: LD_VAR 0 4
78097: PUSH
78098: LD_INT 1
78100: ARRAY
78101: PPUSH
78102: CALL_OW 2
78106: PPUSH
78107: CALL_OW 1
78111: ST_TO_ADDR
// end ;
78112: LD_VAR 0 3
78116: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78117: LD_INT 0
78119: PPUSH
78120: PPUSH
// if not mc_bases or not base or not kinds then
78121: LD_EXP 52
78125: NOT
78126: PUSH
78127: LD_VAR 0 1
78131: NOT
78132: OR
78133: PUSH
78134: LD_VAR 0 2
78138: NOT
78139: OR
78140: IFFALSE 78144
// exit ;
78142: GO 78205
// for i in kinds do
78144: LD_ADDR_VAR 0 4
78148: PUSH
78149: LD_VAR 0 2
78153: PUSH
78154: FOR_IN
78155: IFFALSE 78203
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78157: LD_ADDR_EXP 86
78161: PUSH
78162: LD_EXP 86
78166: PPUSH
78167: LD_VAR 0 1
78171: PUSH
78172: LD_EXP 86
78176: PUSH
78177: LD_VAR 0 1
78181: ARRAY
78182: PUSH
78183: LD_INT 1
78185: PLUS
78186: PUSH
78187: EMPTY
78188: LIST
78189: LIST
78190: PPUSH
78191: LD_VAR 0 4
78195: PPUSH
78196: CALL 17956 0 3
78200: ST_TO_ADDR
78201: GO 78154
78203: POP
78204: POP
// end ;
78205: LD_VAR 0 3
78209: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78210: LD_INT 0
78212: PPUSH
// if not mc_bases or not base or not areas then
78213: LD_EXP 52
78217: NOT
78218: PUSH
78219: LD_VAR 0 1
78223: NOT
78224: OR
78225: PUSH
78226: LD_VAR 0 2
78230: NOT
78231: OR
78232: IFFALSE 78236
// exit ;
78234: GO 78261
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78236: LD_ADDR_EXP 70
78240: PUSH
78241: LD_EXP 70
78245: PPUSH
78246: LD_VAR 0 1
78250: PPUSH
78251: LD_VAR 0 2
78255: PPUSH
78256: CALL_OW 1
78260: ST_TO_ADDR
// end ;
78261: LD_VAR 0 3
78265: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
78266: LD_INT 0
78268: PPUSH
// if not mc_bases or not base or not teleports_exit then
78269: LD_EXP 52
78273: NOT
78274: PUSH
78275: LD_VAR 0 1
78279: NOT
78280: OR
78281: PUSH
78282: LD_VAR 0 2
78286: NOT
78287: OR
78288: IFFALSE 78292
// exit ;
78290: GO 78317
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
78292: LD_ADDR_EXP 87
78296: PUSH
78297: LD_EXP 87
78301: PPUSH
78302: LD_VAR 0 1
78306: PPUSH
78307: LD_VAR 0 2
78311: PPUSH
78312: CALL_OW 1
78316: ST_TO_ADDR
// end ;
78317: LD_VAR 0 3
78321: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
78326: PPUSH
// if not mc_bases or not base or not ext_list then
78327: LD_EXP 52
78331: NOT
78332: PUSH
78333: LD_VAR 0 1
78337: NOT
78338: OR
78339: PUSH
78340: LD_VAR 0 5
78344: NOT
78345: OR
78346: IFFALSE 78350
// exit ;
78348: GO 78523
// tmp := GetFacExtXYD ( x , y , d ) ;
78350: LD_ADDR_VAR 0 8
78354: PUSH
78355: LD_VAR 0 2
78359: PPUSH
78360: LD_VAR 0 3
78364: PPUSH
78365: LD_VAR 0 4
78369: PPUSH
78370: CALL 51334 0 3
78374: ST_TO_ADDR
// if not tmp then
78375: LD_VAR 0 8
78379: NOT
78380: IFFALSE 78384
// exit ;
78382: GO 78523
// for i in tmp do
78384: LD_ADDR_VAR 0 7
78388: PUSH
78389: LD_VAR 0 8
78393: PUSH
78394: FOR_IN
78395: IFFALSE 78521
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
78397: LD_ADDR_EXP 57
78401: PUSH
78402: LD_EXP 57
78406: PPUSH
78407: LD_VAR 0 1
78411: PPUSH
78412: LD_EXP 57
78416: PUSH
78417: LD_VAR 0 1
78421: ARRAY
78422: PPUSH
78423: LD_EXP 57
78427: PUSH
78428: LD_VAR 0 1
78432: ARRAY
78433: PUSH
78434: LD_INT 1
78436: PLUS
78437: PPUSH
78438: LD_VAR 0 5
78442: PUSH
78443: LD_INT 1
78445: ARRAY
78446: PUSH
78447: LD_VAR 0 7
78451: PUSH
78452: LD_INT 1
78454: ARRAY
78455: PUSH
78456: LD_VAR 0 7
78460: PUSH
78461: LD_INT 2
78463: ARRAY
78464: PUSH
78465: LD_VAR 0 7
78469: PUSH
78470: LD_INT 3
78472: ARRAY
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: PPUSH
78480: CALL_OW 2
78484: PPUSH
78485: CALL_OW 1
78489: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
78490: LD_ADDR_VAR 0 5
78494: PUSH
78495: LD_VAR 0 5
78499: PPUSH
78500: LD_INT 1
78502: PPUSH
78503: CALL_OW 3
78507: ST_TO_ADDR
// if not ext_list then
78508: LD_VAR 0 5
78512: NOT
78513: IFFALSE 78519
// exit ;
78515: POP
78516: POP
78517: GO 78523
// end ;
78519: GO 78394
78521: POP
78522: POP
// end ;
78523: LD_VAR 0 6
78527: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
78528: LD_INT 0
78530: PPUSH
// if not mc_bases or not base or not weapon_list then
78531: LD_EXP 52
78535: NOT
78536: PUSH
78537: LD_VAR 0 1
78541: NOT
78542: OR
78543: PUSH
78544: LD_VAR 0 2
78548: NOT
78549: OR
78550: IFFALSE 78554
// exit ;
78552: GO 78579
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
78554: LD_ADDR_EXP 91
78558: PUSH
78559: LD_EXP 91
78563: PPUSH
78564: LD_VAR 0 1
78568: PPUSH
78569: LD_VAR 0 2
78573: PPUSH
78574: CALL_OW 1
78578: ST_TO_ADDR
// end ;
78579: LD_VAR 0 3
78583: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
78584: LD_INT 0
78586: PPUSH
// if not mc_bases or not base or not tech_list then
78587: LD_EXP 52
78591: NOT
78592: PUSH
78593: LD_VAR 0 1
78597: NOT
78598: OR
78599: PUSH
78600: LD_VAR 0 2
78604: NOT
78605: OR
78606: IFFALSE 78610
// exit ;
78608: GO 78635
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
78610: LD_ADDR_EXP 79
78614: PUSH
78615: LD_EXP 79
78619: PPUSH
78620: LD_VAR 0 1
78624: PPUSH
78625: LD_VAR 0 2
78629: PPUSH
78630: CALL_OW 1
78634: ST_TO_ADDR
// end ;
78635: LD_VAR 0 3
78639: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
78640: LD_INT 0
78642: PPUSH
// if not mc_bases or not parking_area or not base then
78643: LD_EXP 52
78647: NOT
78648: PUSH
78649: LD_VAR 0 2
78653: NOT
78654: OR
78655: PUSH
78656: LD_VAR 0 1
78660: NOT
78661: OR
78662: IFFALSE 78666
// exit ;
78664: GO 78691
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
78666: LD_ADDR_EXP 76
78670: PUSH
78671: LD_EXP 76
78675: PPUSH
78676: LD_VAR 0 1
78680: PPUSH
78681: LD_VAR 0 2
78685: PPUSH
78686: CALL_OW 1
78690: ST_TO_ADDR
// end ;
78691: LD_VAR 0 3
78695: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
78696: LD_INT 0
78698: PPUSH
// if not mc_bases or not base or not scan_area then
78699: LD_EXP 52
78703: NOT
78704: PUSH
78705: LD_VAR 0 1
78709: NOT
78710: OR
78711: PUSH
78712: LD_VAR 0 2
78716: NOT
78717: OR
78718: IFFALSE 78722
// exit ;
78720: GO 78747
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
78722: LD_ADDR_EXP 77
78726: PUSH
78727: LD_EXP 77
78731: PPUSH
78732: LD_VAR 0 1
78736: PPUSH
78737: LD_VAR 0 2
78741: PPUSH
78742: CALL_OW 1
78746: ST_TO_ADDR
// end ;
78747: LD_VAR 0 3
78751: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
78752: LD_INT 0
78754: PPUSH
78755: PPUSH
// if not mc_bases or not base then
78756: LD_EXP 52
78760: NOT
78761: PUSH
78762: LD_VAR 0 1
78766: NOT
78767: OR
78768: IFFALSE 78772
// exit ;
78770: GO 78836
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
78772: LD_ADDR_VAR 0 3
78776: PUSH
78777: LD_INT 1
78779: PUSH
78780: LD_INT 2
78782: PUSH
78783: LD_INT 3
78785: PUSH
78786: LD_INT 4
78788: PUSH
78789: LD_INT 11
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
78799: LD_ADDR_EXP 79
78803: PUSH
78804: LD_EXP 79
78808: PPUSH
78809: LD_VAR 0 1
78813: PPUSH
78814: LD_EXP 79
78818: PUSH
78819: LD_VAR 0 1
78823: ARRAY
78824: PUSH
78825: LD_VAR 0 3
78829: DIFF
78830: PPUSH
78831: CALL_OW 1
78835: ST_TO_ADDR
// end ;
78836: LD_VAR 0 2
78840: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
78841: LD_INT 0
78843: PPUSH
// result := mc_vehicles [ base ] ;
78844: LD_ADDR_VAR 0 3
78848: PUSH
78849: LD_EXP 71
78853: PUSH
78854: LD_VAR 0 1
78858: ARRAY
78859: ST_TO_ADDR
// if onlyCombat then
78860: LD_VAR 0 2
78864: IFFALSE 79029
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
78866: LD_ADDR_VAR 0 3
78870: PUSH
78871: LD_VAR 0 3
78875: PUSH
78876: LD_VAR 0 3
78880: PPUSH
78881: LD_INT 2
78883: PUSH
78884: LD_INT 34
78886: PUSH
78887: LD_INT 12
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: LD_INT 34
78896: PUSH
78897: LD_INT 51
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: PUSH
78904: LD_INT 34
78906: PUSH
78907: LD_EXP 46
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: PUSH
78916: LD_INT 34
78918: PUSH
78919: LD_INT 32
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: PUSH
78926: LD_INT 34
78928: PUSH
78929: LD_INT 13
78931: PUSH
78932: EMPTY
78933: LIST
78934: LIST
78935: PUSH
78936: LD_INT 34
78938: PUSH
78939: LD_INT 52
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: LD_INT 34
78948: PUSH
78949: LD_INT 14
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: LD_INT 34
78958: PUSH
78959: LD_INT 53
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PUSH
78966: LD_INT 34
78968: PUSH
78969: LD_EXP 45
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 34
78980: PUSH
78981: LD_INT 31
78983: PUSH
78984: EMPTY
78985: LIST
78986: LIST
78987: PUSH
78988: LD_INT 34
78990: PUSH
78991: LD_INT 48
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 34
79000: PUSH
79001: LD_INT 8
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: LIST
79021: LIST
79022: PPUSH
79023: CALL_OW 72
79027: DIFF
79028: ST_TO_ADDR
// end ; end_of_file
79029: LD_VAR 0 3
79033: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
79034: LD_INT 0
79036: PPUSH
79037: PPUSH
79038: PPUSH
// if not mc_bases or not skirmish then
79039: LD_EXP 52
79043: NOT
79044: PUSH
79045: LD_EXP 50
79049: NOT
79050: OR
79051: IFFALSE 79055
// exit ;
79053: GO 79220
// for i = 1 to mc_bases do
79055: LD_ADDR_VAR 0 4
79059: PUSH
79060: DOUBLE
79061: LD_INT 1
79063: DEC
79064: ST_TO_ADDR
79065: LD_EXP 52
79069: PUSH
79070: FOR_TO
79071: IFFALSE 79218
// begin if sci in mc_bases [ i ] then
79073: LD_VAR 0 2
79077: PUSH
79078: LD_EXP 52
79082: PUSH
79083: LD_VAR 0 4
79087: ARRAY
79088: IN
79089: IFFALSE 79216
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79091: LD_ADDR_EXP 81
79095: PUSH
79096: LD_EXP 81
79100: PPUSH
79101: LD_VAR 0 4
79105: PUSH
79106: LD_EXP 81
79110: PUSH
79111: LD_VAR 0 4
79115: ARRAY
79116: PUSH
79117: LD_INT 1
79119: PLUS
79120: PUSH
79121: EMPTY
79122: LIST
79123: LIST
79124: PPUSH
79125: LD_VAR 0 1
79129: PPUSH
79130: CALL 17956 0 3
79134: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79135: LD_ADDR_VAR 0 5
79139: PUSH
79140: LD_EXP 52
79144: PUSH
79145: LD_VAR 0 4
79149: ARRAY
79150: PPUSH
79151: LD_INT 2
79153: PUSH
79154: LD_INT 30
79156: PUSH
79157: LD_INT 0
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PUSH
79164: LD_INT 30
79166: PUSH
79167: LD_INT 1
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: EMPTY
79175: LIST
79176: LIST
79177: LIST
79178: PPUSH
79179: CALL_OW 72
79183: PPUSH
79184: LD_VAR 0 1
79188: PPUSH
79189: CALL_OW 74
79193: ST_TO_ADDR
// if tmp then
79194: LD_VAR 0 5
79198: IFFALSE 79214
// ComStandNearbyBuilding ( ape , tmp ) ;
79200: LD_VAR 0 1
79204: PPUSH
79205: LD_VAR 0 5
79209: PPUSH
79210: CALL 12523 0 2
// break ;
79214: GO 79218
// end ; end ;
79216: GO 79070
79218: POP
79219: POP
// end ;
79220: LD_VAR 0 3
79224: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79225: LD_INT 0
79227: PPUSH
79228: PPUSH
79229: PPUSH
// if not mc_bases or not skirmish then
79230: LD_EXP 52
79234: NOT
79235: PUSH
79236: LD_EXP 50
79240: NOT
79241: OR
79242: IFFALSE 79246
// exit ;
79244: GO 79335
// for i = 1 to mc_bases do
79246: LD_ADDR_VAR 0 4
79250: PUSH
79251: DOUBLE
79252: LD_INT 1
79254: DEC
79255: ST_TO_ADDR
79256: LD_EXP 52
79260: PUSH
79261: FOR_TO
79262: IFFALSE 79333
// begin if building in mc_busy_turret_list [ i ] then
79264: LD_VAR 0 1
79268: PUSH
79269: LD_EXP 62
79273: PUSH
79274: LD_VAR 0 4
79278: ARRAY
79279: IN
79280: IFFALSE 79331
// begin tmp := mc_busy_turret_list [ i ] diff building ;
79282: LD_ADDR_VAR 0 5
79286: PUSH
79287: LD_EXP 62
79291: PUSH
79292: LD_VAR 0 4
79296: ARRAY
79297: PUSH
79298: LD_VAR 0 1
79302: DIFF
79303: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
79304: LD_ADDR_EXP 62
79308: PUSH
79309: LD_EXP 62
79313: PPUSH
79314: LD_VAR 0 4
79318: PPUSH
79319: LD_VAR 0 5
79323: PPUSH
79324: CALL_OW 1
79328: ST_TO_ADDR
// break ;
79329: GO 79333
// end ; end ;
79331: GO 79261
79333: POP
79334: POP
// end ;
79335: LD_VAR 0 3
79339: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
79340: LD_INT 0
79342: PPUSH
79343: PPUSH
79344: PPUSH
// if not mc_bases or not skirmish then
79345: LD_EXP 52
79349: NOT
79350: PUSH
79351: LD_EXP 50
79355: NOT
79356: OR
79357: IFFALSE 79361
// exit ;
79359: GO 79560
// for i = 1 to mc_bases do
79361: LD_ADDR_VAR 0 5
79365: PUSH
79366: DOUBLE
79367: LD_INT 1
79369: DEC
79370: ST_TO_ADDR
79371: LD_EXP 52
79375: PUSH
79376: FOR_TO
79377: IFFALSE 79558
// if building in mc_bases [ i ] then
79379: LD_VAR 0 1
79383: PUSH
79384: LD_EXP 52
79388: PUSH
79389: LD_VAR 0 5
79393: ARRAY
79394: IN
79395: IFFALSE 79556
// begin tmp := mc_bases [ i ] diff building ;
79397: LD_ADDR_VAR 0 6
79401: PUSH
79402: LD_EXP 52
79406: PUSH
79407: LD_VAR 0 5
79411: ARRAY
79412: PUSH
79413: LD_VAR 0 1
79417: DIFF
79418: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
79419: LD_ADDR_EXP 52
79423: PUSH
79424: LD_EXP 52
79428: PPUSH
79429: LD_VAR 0 5
79433: PPUSH
79434: LD_VAR 0 6
79438: PPUSH
79439: CALL_OW 1
79443: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
79444: LD_VAR 0 1
79448: PUSH
79449: LD_EXP 60
79453: PUSH
79454: LD_VAR 0 5
79458: ARRAY
79459: IN
79460: IFFALSE 79499
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
79462: LD_ADDR_EXP 60
79466: PUSH
79467: LD_EXP 60
79471: PPUSH
79472: LD_VAR 0 5
79476: PPUSH
79477: LD_EXP 60
79481: PUSH
79482: LD_VAR 0 5
79486: ARRAY
79487: PUSH
79488: LD_VAR 0 1
79492: DIFF
79493: PPUSH
79494: CALL_OW 1
79498: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
79499: LD_VAR 0 1
79503: PUSH
79504: LD_EXP 61
79508: PUSH
79509: LD_VAR 0 5
79513: ARRAY
79514: IN
79515: IFFALSE 79554
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
79517: LD_ADDR_EXP 61
79521: PUSH
79522: LD_EXP 61
79526: PPUSH
79527: LD_VAR 0 5
79531: PPUSH
79532: LD_EXP 61
79536: PUSH
79537: LD_VAR 0 5
79541: ARRAY
79542: PUSH
79543: LD_VAR 0 1
79547: DIFF
79548: PPUSH
79549: CALL_OW 1
79553: ST_TO_ADDR
// break ;
79554: GO 79558
// end ;
79556: GO 79376
79558: POP
79559: POP
// end ;
79560: LD_VAR 0 4
79564: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
79565: LD_INT 0
79567: PPUSH
79568: PPUSH
79569: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
79570: LD_EXP 52
79574: NOT
79575: PUSH
79576: LD_EXP 50
79580: NOT
79581: OR
79582: PUSH
79583: LD_VAR 0 3
79587: PUSH
79588: LD_EXP 78
79592: IN
79593: NOT
79594: OR
79595: IFFALSE 79599
// exit ;
79597: GO 79722
// for i = 1 to mc_vehicles do
79599: LD_ADDR_VAR 0 6
79603: PUSH
79604: DOUBLE
79605: LD_INT 1
79607: DEC
79608: ST_TO_ADDR
79609: LD_EXP 71
79613: PUSH
79614: FOR_TO
79615: IFFALSE 79720
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
79617: LD_VAR 0 2
79621: PUSH
79622: LD_EXP 71
79626: PUSH
79627: LD_VAR 0 6
79631: ARRAY
79632: IN
79633: PUSH
79634: LD_VAR 0 1
79638: PUSH
79639: LD_EXP 71
79643: PUSH
79644: LD_VAR 0 6
79648: ARRAY
79649: IN
79650: OR
79651: IFFALSE 79718
// begin tmp := mc_vehicles [ i ] diff old ;
79653: LD_ADDR_VAR 0 7
79657: PUSH
79658: LD_EXP 71
79662: PUSH
79663: LD_VAR 0 6
79667: ARRAY
79668: PUSH
79669: LD_VAR 0 2
79673: DIFF
79674: ST_TO_ADDR
// tmp := tmp diff new ;
79675: LD_ADDR_VAR 0 7
79679: PUSH
79680: LD_VAR 0 7
79684: PUSH
79685: LD_VAR 0 1
79689: DIFF
79690: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
79691: LD_ADDR_EXP 71
79695: PUSH
79696: LD_EXP 71
79700: PPUSH
79701: LD_VAR 0 6
79705: PPUSH
79706: LD_VAR 0 7
79710: PPUSH
79711: CALL_OW 1
79715: ST_TO_ADDR
// break ;
79716: GO 79720
// end ;
79718: GO 79614
79720: POP
79721: POP
// end ;
79722: LD_VAR 0 5
79726: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
79727: LD_INT 0
79729: PPUSH
79730: PPUSH
79731: PPUSH
79732: PPUSH
// if not mc_bases or not skirmish then
79733: LD_EXP 52
79737: NOT
79738: PUSH
79739: LD_EXP 50
79743: NOT
79744: OR
79745: IFFALSE 79749
// exit ;
79747: GO 80126
// side := GetSide ( vehicle ) ;
79749: LD_ADDR_VAR 0 5
79753: PUSH
79754: LD_VAR 0 1
79758: PPUSH
79759: CALL_OW 255
79763: ST_TO_ADDR
// for i = 1 to mc_bases do
79764: LD_ADDR_VAR 0 4
79768: PUSH
79769: DOUBLE
79770: LD_INT 1
79772: DEC
79773: ST_TO_ADDR
79774: LD_EXP 52
79778: PUSH
79779: FOR_TO
79780: IFFALSE 80124
// begin if factory in mc_bases [ i ] then
79782: LD_VAR 0 2
79786: PUSH
79787: LD_EXP 52
79791: PUSH
79792: LD_VAR 0 4
79796: ARRAY
79797: IN
79798: IFFALSE 80122
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
79800: LD_EXP 74
79804: PUSH
79805: LD_VAR 0 4
79809: ARRAY
79810: PUSH
79811: LD_EXP 63
79815: PUSH
79816: LD_VAR 0 4
79820: ARRAY
79821: LESS
79822: PUSH
79823: LD_VAR 0 1
79827: PPUSH
79828: CALL_OW 264
79832: PUSH
79833: LD_INT 31
79835: PUSH
79836: LD_INT 32
79838: PUSH
79839: LD_INT 51
79841: PUSH
79842: LD_EXP 46
79846: PUSH
79847: LD_INT 12
79849: PUSH
79850: LD_INT 30
79852: PUSH
79853: LD_EXP 45
79857: PUSH
79858: LD_INT 11
79860: PUSH
79861: LD_INT 53
79863: PUSH
79864: LD_INT 14
79866: PUSH
79867: LD_EXP 49
79871: PUSH
79872: LD_INT 29
79874: PUSH
79875: LD_EXP 47
79879: PUSH
79880: LD_INT 13
79882: PUSH
79883: LD_INT 52
79885: PUSH
79886: LD_INT 48
79888: PUSH
79889: LD_INT 8
79891: PUSH
79892: EMPTY
79893: LIST
79894: LIST
79895: LIST
79896: LIST
79897: LIST
79898: LIST
79899: LIST
79900: LIST
79901: LIST
79902: LIST
79903: LIST
79904: LIST
79905: LIST
79906: LIST
79907: LIST
79908: LIST
79909: LIST
79910: IN
79911: NOT
79912: AND
79913: IFFALSE 79961
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
79915: LD_ADDR_EXP 74
79919: PUSH
79920: LD_EXP 74
79924: PPUSH
79925: LD_VAR 0 4
79929: PUSH
79930: LD_EXP 74
79934: PUSH
79935: LD_VAR 0 4
79939: ARRAY
79940: PUSH
79941: LD_INT 1
79943: PLUS
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PPUSH
79949: LD_VAR 0 1
79953: PPUSH
79954: CALL 17956 0 3
79958: ST_TO_ADDR
79959: GO 80005
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
79961: LD_ADDR_EXP 71
79965: PUSH
79966: LD_EXP 71
79970: PPUSH
79971: LD_VAR 0 4
79975: PUSH
79976: LD_EXP 71
79980: PUSH
79981: LD_VAR 0 4
79985: ARRAY
79986: PUSH
79987: LD_INT 1
79989: PLUS
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: PPUSH
79995: LD_VAR 0 1
79999: PPUSH
80000: CALL 17956 0 3
80004: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
80005: LD_VAR 0 1
80009: PPUSH
80010: CALL_OW 263
80014: PUSH
80015: LD_INT 2
80017: EQUAL
80018: IFFALSE 80038
// begin repeat wait ( 0 0$1 ) ;
80020: LD_INT 35
80022: PPUSH
80023: CALL_OW 67
// until IsControledBy ( vehicle ) ;
80027: LD_VAR 0 1
80031: PPUSH
80032: CALL_OW 312
80036: IFFALSE 80020
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
80038: LD_VAR 0 1
80042: PPUSH
80043: LD_EXP 76
80047: PUSH
80048: LD_VAR 0 4
80052: ARRAY
80053: PPUSH
80054: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
80058: LD_VAR 0 1
80062: PPUSH
80063: CALL_OW 263
80067: PUSH
80068: LD_INT 1
80070: NONEQUAL
80071: IFFALSE 80075
// break ;
80073: GO 80124
// repeat wait ( 0 0$1 ) ;
80075: LD_INT 35
80077: PPUSH
80078: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
80082: LD_VAR 0 1
80086: PPUSH
80087: LD_EXP 76
80091: PUSH
80092: LD_VAR 0 4
80096: ARRAY
80097: PPUSH
80098: CALL_OW 308
80102: IFFALSE 80075
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
80104: LD_VAR 0 1
80108: PPUSH
80109: CALL_OW 311
80113: PPUSH
80114: CALL_OW 121
// exit ;
80118: POP
80119: POP
80120: GO 80126
// end ; end ;
80122: GO 79779
80124: POP
80125: POP
// end ;
80126: LD_VAR 0 3
80130: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
80131: LD_INT 0
80133: PPUSH
80134: PPUSH
80135: PPUSH
80136: PPUSH
// if not mc_bases or not skirmish then
80137: LD_EXP 52
80141: NOT
80142: PUSH
80143: LD_EXP 50
80147: NOT
80148: OR
80149: IFFALSE 80153
// exit ;
80151: GO 80506
// repeat wait ( 0 0$1 ) ;
80153: LD_INT 35
80155: PPUSH
80156: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
80160: LD_VAR 0 2
80164: PPUSH
80165: LD_VAR 0 3
80169: PPUSH
80170: CALL_OW 284
80174: IFFALSE 80153
// if GetResourceTypeXY ( x , y ) = mat_artefact then
80176: LD_VAR 0 2
80180: PPUSH
80181: LD_VAR 0 3
80185: PPUSH
80186: CALL_OW 283
80190: PUSH
80191: LD_INT 4
80193: EQUAL
80194: IFFALSE 80198
// exit ;
80196: GO 80506
// for i = 1 to mc_bases do
80198: LD_ADDR_VAR 0 7
80202: PUSH
80203: DOUBLE
80204: LD_INT 1
80206: DEC
80207: ST_TO_ADDR
80208: LD_EXP 52
80212: PUSH
80213: FOR_TO
80214: IFFALSE 80504
// begin if mc_crates_area [ i ] then
80216: LD_EXP 70
80220: PUSH
80221: LD_VAR 0 7
80225: ARRAY
80226: IFFALSE 80337
// for j in mc_crates_area [ i ] do
80228: LD_ADDR_VAR 0 8
80232: PUSH
80233: LD_EXP 70
80237: PUSH
80238: LD_VAR 0 7
80242: ARRAY
80243: PUSH
80244: FOR_IN
80245: IFFALSE 80335
// if InArea ( x , y , j ) then
80247: LD_VAR 0 2
80251: PPUSH
80252: LD_VAR 0 3
80256: PPUSH
80257: LD_VAR 0 8
80261: PPUSH
80262: CALL_OW 309
80266: IFFALSE 80333
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80268: LD_ADDR_EXP 68
80272: PUSH
80273: LD_EXP 68
80277: PPUSH
80278: LD_VAR 0 7
80282: PUSH
80283: LD_EXP 68
80287: PUSH
80288: LD_VAR 0 7
80292: ARRAY
80293: PUSH
80294: LD_INT 1
80296: PLUS
80297: PUSH
80298: EMPTY
80299: LIST
80300: LIST
80301: PPUSH
80302: LD_VAR 0 4
80306: PUSH
80307: LD_VAR 0 2
80311: PUSH
80312: LD_VAR 0 3
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: LIST
80321: PPUSH
80322: CALL 17956 0 3
80326: ST_TO_ADDR
// exit ;
80327: POP
80328: POP
80329: POP
80330: POP
80331: GO 80506
// end ;
80333: GO 80244
80335: POP
80336: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80337: LD_ADDR_VAR 0 9
80341: PUSH
80342: LD_EXP 52
80346: PUSH
80347: LD_VAR 0 7
80351: ARRAY
80352: PPUSH
80353: LD_INT 2
80355: PUSH
80356: LD_INT 30
80358: PUSH
80359: LD_INT 0
80361: PUSH
80362: EMPTY
80363: LIST
80364: LIST
80365: PUSH
80366: LD_INT 30
80368: PUSH
80369: LD_INT 1
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: EMPTY
80377: LIST
80378: LIST
80379: LIST
80380: PPUSH
80381: CALL_OW 72
80385: ST_TO_ADDR
// if not depot then
80386: LD_VAR 0 9
80390: NOT
80391: IFFALSE 80395
// continue ;
80393: GO 80213
// for j in depot do
80395: LD_ADDR_VAR 0 8
80399: PUSH
80400: LD_VAR 0 9
80404: PUSH
80405: FOR_IN
80406: IFFALSE 80500
// if GetDistUnitXY ( j , x , y ) < 30 then
80408: LD_VAR 0 8
80412: PPUSH
80413: LD_VAR 0 2
80417: PPUSH
80418: LD_VAR 0 3
80422: PPUSH
80423: CALL_OW 297
80427: PUSH
80428: LD_INT 30
80430: LESS
80431: IFFALSE 80498
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80433: LD_ADDR_EXP 68
80437: PUSH
80438: LD_EXP 68
80442: PPUSH
80443: LD_VAR 0 7
80447: PUSH
80448: LD_EXP 68
80452: PUSH
80453: LD_VAR 0 7
80457: ARRAY
80458: PUSH
80459: LD_INT 1
80461: PLUS
80462: PUSH
80463: EMPTY
80464: LIST
80465: LIST
80466: PPUSH
80467: LD_VAR 0 4
80471: PUSH
80472: LD_VAR 0 2
80476: PUSH
80477: LD_VAR 0 3
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: LIST
80486: PPUSH
80487: CALL 17956 0 3
80491: ST_TO_ADDR
// exit ;
80492: POP
80493: POP
80494: POP
80495: POP
80496: GO 80506
// end ;
80498: GO 80405
80500: POP
80501: POP
// end ;
80502: GO 80213
80504: POP
80505: POP
// end ;
80506: LD_VAR 0 6
80510: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
80511: LD_INT 0
80513: PPUSH
80514: PPUSH
80515: PPUSH
80516: PPUSH
// if not mc_bases or not skirmish then
80517: LD_EXP 52
80521: NOT
80522: PUSH
80523: LD_EXP 50
80527: NOT
80528: OR
80529: IFFALSE 80533
// exit ;
80531: GO 80810
// side := GetSide ( lab ) ;
80533: LD_ADDR_VAR 0 4
80537: PUSH
80538: LD_VAR 0 2
80542: PPUSH
80543: CALL_OW 255
80547: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
80548: LD_VAR 0 4
80552: PUSH
80553: LD_EXP 78
80557: IN
80558: NOT
80559: PUSH
80560: LD_EXP 79
80564: NOT
80565: OR
80566: PUSH
80567: LD_EXP 52
80571: NOT
80572: OR
80573: IFFALSE 80577
// exit ;
80575: GO 80810
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
80577: LD_ADDR_EXP 79
80581: PUSH
80582: LD_EXP 79
80586: PPUSH
80587: LD_VAR 0 4
80591: PPUSH
80592: LD_EXP 79
80596: PUSH
80597: LD_VAR 0 4
80601: ARRAY
80602: PUSH
80603: LD_VAR 0 1
80607: DIFF
80608: PPUSH
80609: CALL_OW 1
80613: ST_TO_ADDR
// for i = 1 to mc_bases do
80614: LD_ADDR_VAR 0 5
80618: PUSH
80619: DOUBLE
80620: LD_INT 1
80622: DEC
80623: ST_TO_ADDR
80624: LD_EXP 52
80628: PUSH
80629: FOR_TO
80630: IFFALSE 80808
// begin if lab in mc_bases [ i ] then
80632: LD_VAR 0 2
80636: PUSH
80637: LD_EXP 52
80641: PUSH
80642: LD_VAR 0 5
80646: ARRAY
80647: IN
80648: IFFALSE 80806
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
80650: LD_VAR 0 1
80654: PUSH
80655: LD_INT 11
80657: PUSH
80658: LD_INT 4
80660: PUSH
80661: LD_INT 3
80663: PUSH
80664: LD_INT 2
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: LIST
80671: LIST
80672: IN
80673: PUSH
80674: LD_EXP 82
80678: PUSH
80679: LD_VAR 0 5
80683: ARRAY
80684: AND
80685: IFFALSE 80806
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
80687: LD_ADDR_VAR 0 6
80691: PUSH
80692: LD_EXP 82
80696: PUSH
80697: LD_VAR 0 5
80701: ARRAY
80702: PUSH
80703: LD_INT 1
80705: ARRAY
80706: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80707: LD_ADDR_EXP 82
80711: PUSH
80712: LD_EXP 82
80716: PPUSH
80717: LD_VAR 0 5
80721: PPUSH
80722: EMPTY
80723: PPUSH
80724: CALL_OW 1
80728: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
80729: LD_VAR 0 6
80733: PPUSH
80734: LD_INT 0
80736: PPUSH
80737: CALL_OW 109
// ComExitBuilding ( tmp ) ;
80741: LD_VAR 0 6
80745: PPUSH
80746: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
80750: LD_ADDR_EXP 81
80754: PUSH
80755: LD_EXP 81
80759: PPUSH
80760: LD_VAR 0 5
80764: PPUSH
80765: LD_EXP 81
80769: PUSH
80770: LD_VAR 0 5
80774: ARRAY
80775: PPUSH
80776: LD_INT 1
80778: PPUSH
80779: LD_VAR 0 6
80783: PPUSH
80784: CALL_OW 2
80788: PPUSH
80789: CALL_OW 1
80793: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
80794: LD_VAR 0 5
80798: PPUSH
80799: LD_INT 112
80801: PPUSH
80802: CALL 57918 0 2
// end ; end ; end ;
80806: GO 80629
80808: POP
80809: POP
// end ;
80810: LD_VAR 0 3
80814: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
80815: LD_INT 0
80817: PPUSH
80818: PPUSH
80819: PPUSH
80820: PPUSH
80821: PPUSH
80822: PPUSH
80823: PPUSH
80824: PPUSH
// if not mc_bases or not skirmish then
80825: LD_EXP 52
80829: NOT
80830: PUSH
80831: LD_EXP 50
80835: NOT
80836: OR
80837: IFFALSE 80841
// exit ;
80839: GO 81990
// for i = 1 to mc_bases do
80841: LD_ADDR_VAR 0 3
80845: PUSH
80846: DOUBLE
80847: LD_INT 1
80849: DEC
80850: ST_TO_ADDR
80851: LD_EXP 52
80855: PUSH
80856: FOR_TO
80857: IFFALSE 81988
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
80859: LD_VAR 0 1
80863: PUSH
80864: LD_EXP 52
80868: PUSH
80869: LD_VAR 0 3
80873: ARRAY
80874: IN
80875: PUSH
80876: LD_VAR 0 1
80880: PUSH
80881: LD_EXP 59
80885: PUSH
80886: LD_VAR 0 3
80890: ARRAY
80891: IN
80892: OR
80893: PUSH
80894: LD_VAR 0 1
80898: PUSH
80899: LD_EXP 74
80903: PUSH
80904: LD_VAR 0 3
80908: ARRAY
80909: IN
80910: OR
80911: PUSH
80912: LD_VAR 0 1
80916: PUSH
80917: LD_EXP 71
80921: PUSH
80922: LD_VAR 0 3
80926: ARRAY
80927: IN
80928: OR
80929: PUSH
80930: LD_VAR 0 1
80934: PUSH
80935: LD_EXP 81
80939: PUSH
80940: LD_VAR 0 3
80944: ARRAY
80945: IN
80946: OR
80947: PUSH
80948: LD_VAR 0 1
80952: PUSH
80953: LD_EXP 82
80957: PUSH
80958: LD_VAR 0 3
80962: ARRAY
80963: IN
80964: OR
80965: IFFALSE 81986
// begin if un in mc_ape [ i ] then
80967: LD_VAR 0 1
80971: PUSH
80972: LD_EXP 81
80976: PUSH
80977: LD_VAR 0 3
80981: ARRAY
80982: IN
80983: IFFALSE 81022
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80985: LD_ADDR_EXP 81
80989: PUSH
80990: LD_EXP 81
80994: PPUSH
80995: LD_VAR 0 3
80999: PPUSH
81000: LD_EXP 81
81004: PUSH
81005: LD_VAR 0 3
81009: ARRAY
81010: PUSH
81011: LD_VAR 0 1
81015: DIFF
81016: PPUSH
81017: CALL_OW 1
81021: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
81022: LD_VAR 0 1
81026: PUSH
81027: LD_EXP 82
81031: PUSH
81032: LD_VAR 0 3
81036: ARRAY
81037: IN
81038: IFFALSE 81062
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81040: LD_ADDR_EXP 82
81044: PUSH
81045: LD_EXP 82
81049: PPUSH
81050: LD_VAR 0 3
81054: PPUSH
81055: EMPTY
81056: PPUSH
81057: CALL_OW 1
81061: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
81062: LD_VAR 0 1
81066: PPUSH
81067: CALL_OW 247
81071: PUSH
81072: LD_INT 2
81074: EQUAL
81075: PUSH
81076: LD_VAR 0 1
81080: PPUSH
81081: CALL_OW 110
81085: PUSH
81086: LD_INT 20
81088: EQUAL
81089: PUSH
81090: LD_VAR 0 1
81094: PUSH
81095: LD_EXP 74
81099: PUSH
81100: LD_VAR 0 3
81104: ARRAY
81105: IN
81106: OR
81107: PUSH
81108: LD_VAR 0 1
81112: PPUSH
81113: CALL_OW 264
81117: PUSH
81118: LD_INT 12
81120: PUSH
81121: LD_INT 51
81123: PUSH
81124: LD_EXP 46
81128: PUSH
81129: LD_INT 32
81131: PUSH
81132: LD_INT 13
81134: PUSH
81135: LD_INT 52
81137: PUSH
81138: EMPTY
81139: LIST
81140: LIST
81141: LIST
81142: LIST
81143: LIST
81144: LIST
81145: IN
81146: OR
81147: AND
81148: IFFALSE 81326
// begin if un in mc_defender [ i ] then
81150: LD_VAR 0 1
81154: PUSH
81155: LD_EXP 74
81159: PUSH
81160: LD_VAR 0 3
81164: ARRAY
81165: IN
81166: IFFALSE 81205
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81168: LD_ADDR_EXP 74
81172: PUSH
81173: LD_EXP 74
81177: PPUSH
81178: LD_VAR 0 3
81182: PPUSH
81183: LD_EXP 74
81187: PUSH
81188: LD_VAR 0 3
81192: ARRAY
81193: PUSH
81194: LD_VAR 0 1
81198: DIFF
81199: PPUSH
81200: CALL_OW 1
81204: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
81205: LD_ADDR_VAR 0 8
81209: PUSH
81210: LD_VAR 0 3
81214: PPUSH
81215: LD_INT 3
81217: PPUSH
81218: CALL 77878 0 2
81222: ST_TO_ADDR
// if fac then
81223: LD_VAR 0 8
81227: IFFALSE 81326
// begin for j in fac do
81229: LD_ADDR_VAR 0 4
81233: PUSH
81234: LD_VAR 0 8
81238: PUSH
81239: FOR_IN
81240: IFFALSE 81324
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
81242: LD_ADDR_VAR 0 9
81246: PUSH
81247: LD_VAR 0 8
81251: PPUSH
81252: LD_VAR 0 1
81256: PPUSH
81257: CALL_OW 265
81261: PPUSH
81262: LD_VAR 0 1
81266: PPUSH
81267: CALL_OW 262
81271: PPUSH
81272: LD_VAR 0 1
81276: PPUSH
81277: CALL_OW 263
81281: PPUSH
81282: LD_VAR 0 1
81286: PPUSH
81287: CALL_OW 264
81291: PPUSH
81292: CALL 15488 0 5
81296: ST_TO_ADDR
// if components then
81297: LD_VAR 0 9
81301: IFFALSE 81322
// begin MC_InsertProduceList ( i , [ components ] ) ;
81303: LD_VAR 0 3
81307: PPUSH
81308: LD_VAR 0 9
81312: PUSH
81313: EMPTY
81314: LIST
81315: PPUSH
81316: CALL 77423 0 2
// break ;
81320: GO 81324
// end ; end ;
81322: GO 81239
81324: POP
81325: POP
// end ; end ; if GetType ( un ) = unit_building then
81326: LD_VAR 0 1
81330: PPUSH
81331: CALL_OW 247
81335: PUSH
81336: LD_INT 3
81338: EQUAL
81339: IFFALSE 81654
// begin btype := GetBType ( un ) ;
81341: LD_ADDR_VAR 0 5
81345: PUSH
81346: LD_VAR 0 1
81350: PPUSH
81351: CALL_OW 266
81355: ST_TO_ADDR
// if btype = b_warehouse then
81356: LD_VAR 0 5
81360: PUSH
81361: LD_INT 1
81363: EQUAL
81364: IFFALSE 81382
// begin btype := b_depot ;
81366: LD_ADDR_VAR 0 5
81370: PUSH
81371: LD_INT 0
81373: ST_TO_ADDR
// pos := 1 ;
81374: LD_ADDR_VAR 0 6
81378: PUSH
81379: LD_INT 1
81381: ST_TO_ADDR
// end ; if btype = b_factory then
81382: LD_VAR 0 5
81386: PUSH
81387: LD_INT 3
81389: EQUAL
81390: IFFALSE 81408
// begin btype := b_workshop ;
81392: LD_ADDR_VAR 0 5
81396: PUSH
81397: LD_INT 2
81399: ST_TO_ADDR
// pos := 1 ;
81400: LD_ADDR_VAR 0 6
81404: PUSH
81405: LD_INT 1
81407: ST_TO_ADDR
// end ; if btype = b_barracks then
81408: LD_VAR 0 5
81412: PUSH
81413: LD_INT 5
81415: EQUAL
81416: IFFALSE 81426
// btype := b_armoury ;
81418: LD_ADDR_VAR 0 5
81422: PUSH
81423: LD_INT 4
81425: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
81426: LD_VAR 0 5
81430: PUSH
81431: LD_INT 7
81433: PUSH
81434: LD_INT 8
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: IN
81441: IFFALSE 81451
// btype := b_lab ;
81443: LD_ADDR_VAR 0 5
81447: PUSH
81448: LD_INT 6
81450: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
81451: LD_ADDR_EXP 57
81455: PUSH
81456: LD_EXP 57
81460: PPUSH
81461: LD_VAR 0 3
81465: PUSH
81466: LD_EXP 57
81470: PUSH
81471: LD_VAR 0 3
81475: ARRAY
81476: PUSH
81477: LD_INT 1
81479: PLUS
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: PPUSH
81485: LD_VAR 0 5
81489: PUSH
81490: LD_VAR 0 1
81494: PPUSH
81495: CALL_OW 250
81499: PUSH
81500: LD_VAR 0 1
81504: PPUSH
81505: CALL_OW 251
81509: PUSH
81510: LD_VAR 0 1
81514: PPUSH
81515: CALL_OW 254
81519: PUSH
81520: EMPTY
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: PPUSH
81526: CALL 17956 0 3
81530: ST_TO_ADDR
// if pos = 1 then
81531: LD_VAR 0 6
81535: PUSH
81536: LD_INT 1
81538: EQUAL
81539: IFFALSE 81654
// begin tmp := mc_build_list [ i ] ;
81541: LD_ADDR_VAR 0 7
81545: PUSH
81546: LD_EXP 57
81550: PUSH
81551: LD_VAR 0 3
81555: ARRAY
81556: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81557: LD_VAR 0 7
81561: PPUSH
81562: LD_INT 2
81564: PUSH
81565: LD_INT 30
81567: PUSH
81568: LD_INT 0
81570: PUSH
81571: EMPTY
81572: LIST
81573: LIST
81574: PUSH
81575: LD_INT 30
81577: PUSH
81578: LD_INT 1
81580: PUSH
81581: EMPTY
81582: LIST
81583: LIST
81584: PUSH
81585: EMPTY
81586: LIST
81587: LIST
81588: LIST
81589: PPUSH
81590: CALL_OW 72
81594: IFFALSE 81604
// pos := 2 ;
81596: LD_ADDR_VAR 0 6
81600: PUSH
81601: LD_INT 2
81603: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
81604: LD_ADDR_VAR 0 7
81608: PUSH
81609: LD_VAR 0 7
81613: PPUSH
81614: LD_VAR 0 6
81618: PPUSH
81619: LD_VAR 0 7
81623: PPUSH
81624: CALL 18282 0 3
81628: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
81629: LD_ADDR_EXP 57
81633: PUSH
81634: LD_EXP 57
81638: PPUSH
81639: LD_VAR 0 3
81643: PPUSH
81644: LD_VAR 0 7
81648: PPUSH
81649: CALL_OW 1
81653: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
81654: LD_VAR 0 1
81658: PUSH
81659: LD_EXP 52
81663: PUSH
81664: LD_VAR 0 3
81668: ARRAY
81669: IN
81670: IFFALSE 81709
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
81672: LD_ADDR_EXP 52
81676: PUSH
81677: LD_EXP 52
81681: PPUSH
81682: LD_VAR 0 3
81686: PPUSH
81687: LD_EXP 52
81691: PUSH
81692: LD_VAR 0 3
81696: ARRAY
81697: PUSH
81698: LD_VAR 0 1
81702: DIFF
81703: PPUSH
81704: CALL_OW 1
81708: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
81709: LD_VAR 0 1
81713: PUSH
81714: LD_EXP 59
81718: PUSH
81719: LD_VAR 0 3
81723: ARRAY
81724: IN
81725: IFFALSE 81764
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
81727: LD_ADDR_EXP 59
81731: PUSH
81732: LD_EXP 59
81736: PPUSH
81737: LD_VAR 0 3
81741: PPUSH
81742: LD_EXP 59
81746: PUSH
81747: LD_VAR 0 3
81751: ARRAY
81752: PUSH
81753: LD_VAR 0 1
81757: DIFF
81758: PPUSH
81759: CALL_OW 1
81763: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
81764: LD_VAR 0 1
81768: PUSH
81769: LD_EXP 71
81773: PUSH
81774: LD_VAR 0 3
81778: ARRAY
81779: IN
81780: IFFALSE 81819
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
81782: LD_ADDR_EXP 71
81786: PUSH
81787: LD_EXP 71
81791: PPUSH
81792: LD_VAR 0 3
81796: PPUSH
81797: LD_EXP 71
81801: PUSH
81802: LD_VAR 0 3
81806: ARRAY
81807: PUSH
81808: LD_VAR 0 1
81812: DIFF
81813: PPUSH
81814: CALL_OW 1
81818: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
81819: LD_VAR 0 1
81823: PUSH
81824: LD_EXP 74
81828: PUSH
81829: LD_VAR 0 3
81833: ARRAY
81834: IN
81835: IFFALSE 81874
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81837: LD_ADDR_EXP 74
81841: PUSH
81842: LD_EXP 74
81846: PPUSH
81847: LD_VAR 0 3
81851: PPUSH
81852: LD_EXP 74
81856: PUSH
81857: LD_VAR 0 3
81861: ARRAY
81862: PUSH
81863: LD_VAR 0 1
81867: DIFF
81868: PPUSH
81869: CALL_OW 1
81873: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
81874: LD_VAR 0 1
81878: PUSH
81879: LD_EXP 61
81883: PUSH
81884: LD_VAR 0 3
81888: ARRAY
81889: IN
81890: IFFALSE 81929
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
81892: LD_ADDR_EXP 61
81896: PUSH
81897: LD_EXP 61
81901: PPUSH
81902: LD_VAR 0 3
81906: PPUSH
81907: LD_EXP 61
81911: PUSH
81912: LD_VAR 0 3
81916: ARRAY
81917: PUSH
81918: LD_VAR 0 1
81922: DIFF
81923: PPUSH
81924: CALL_OW 1
81928: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
81929: LD_VAR 0 1
81933: PUSH
81934: LD_EXP 60
81938: PUSH
81939: LD_VAR 0 3
81943: ARRAY
81944: IN
81945: IFFALSE 81984
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
81947: LD_ADDR_EXP 60
81951: PUSH
81952: LD_EXP 60
81956: PPUSH
81957: LD_VAR 0 3
81961: PPUSH
81962: LD_EXP 60
81966: PUSH
81967: LD_VAR 0 3
81971: ARRAY
81972: PUSH
81973: LD_VAR 0 1
81977: DIFF
81978: PPUSH
81979: CALL_OW 1
81983: ST_TO_ADDR
// end ; break ;
81984: GO 81988
// end ;
81986: GO 80856
81988: POP
81989: POP
// end ;
81990: LD_VAR 0 2
81994: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
81995: LD_INT 0
81997: PPUSH
81998: PPUSH
81999: PPUSH
// if not mc_bases or not skirmish then
82000: LD_EXP 52
82004: NOT
82005: PUSH
82006: LD_EXP 50
82010: NOT
82011: OR
82012: IFFALSE 82016
// exit ;
82014: GO 82231
// for i = 1 to mc_bases do
82016: LD_ADDR_VAR 0 3
82020: PUSH
82021: DOUBLE
82022: LD_INT 1
82024: DEC
82025: ST_TO_ADDR
82026: LD_EXP 52
82030: PUSH
82031: FOR_TO
82032: IFFALSE 82229
// begin if building in mc_construct_list [ i ] then
82034: LD_VAR 0 1
82038: PUSH
82039: LD_EXP 59
82043: PUSH
82044: LD_VAR 0 3
82048: ARRAY
82049: IN
82050: IFFALSE 82227
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82052: LD_ADDR_EXP 59
82056: PUSH
82057: LD_EXP 59
82061: PPUSH
82062: LD_VAR 0 3
82066: PPUSH
82067: LD_EXP 59
82071: PUSH
82072: LD_VAR 0 3
82076: ARRAY
82077: PUSH
82078: LD_VAR 0 1
82082: DIFF
82083: PPUSH
82084: CALL_OW 1
82088: ST_TO_ADDR
// if building in mc_lab [ i ] then
82089: LD_VAR 0 1
82093: PUSH
82094: LD_EXP 85
82098: PUSH
82099: LD_VAR 0 3
82103: ARRAY
82104: IN
82105: IFFALSE 82160
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
82107: LD_ADDR_EXP 86
82111: PUSH
82112: LD_EXP 86
82116: PPUSH
82117: LD_VAR 0 3
82121: PPUSH
82122: LD_EXP 86
82126: PUSH
82127: LD_VAR 0 3
82131: ARRAY
82132: PPUSH
82133: LD_INT 1
82135: PPUSH
82136: LD_EXP 86
82140: PUSH
82141: LD_VAR 0 3
82145: ARRAY
82146: PPUSH
82147: LD_INT 0
82149: PPUSH
82150: CALL 17374 0 4
82154: PPUSH
82155: CALL_OW 1
82159: ST_TO_ADDR
// if not building in mc_bases [ i ] then
82160: LD_VAR 0 1
82164: PUSH
82165: LD_EXP 52
82169: PUSH
82170: LD_VAR 0 3
82174: ARRAY
82175: IN
82176: NOT
82177: IFFALSE 82223
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82179: LD_ADDR_EXP 52
82183: PUSH
82184: LD_EXP 52
82188: PPUSH
82189: LD_VAR 0 3
82193: PUSH
82194: LD_EXP 52
82198: PUSH
82199: LD_VAR 0 3
82203: ARRAY
82204: PUSH
82205: LD_INT 1
82207: PLUS
82208: PUSH
82209: EMPTY
82210: LIST
82211: LIST
82212: PPUSH
82213: LD_VAR 0 1
82217: PPUSH
82218: CALL 17956 0 3
82222: ST_TO_ADDR
// exit ;
82223: POP
82224: POP
82225: GO 82231
// end ; end ;
82227: GO 82031
82229: POP
82230: POP
// end ;
82231: LD_VAR 0 2
82235: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
82236: LD_INT 0
82238: PPUSH
82239: PPUSH
82240: PPUSH
82241: PPUSH
82242: PPUSH
82243: PPUSH
82244: PPUSH
// if not mc_bases or not skirmish then
82245: LD_EXP 52
82249: NOT
82250: PUSH
82251: LD_EXP 50
82255: NOT
82256: OR
82257: IFFALSE 82261
// exit ;
82259: GO 82922
// for i = 1 to mc_bases do
82261: LD_ADDR_VAR 0 3
82265: PUSH
82266: DOUBLE
82267: LD_INT 1
82269: DEC
82270: ST_TO_ADDR
82271: LD_EXP 52
82275: PUSH
82276: FOR_TO
82277: IFFALSE 82920
// begin if building in mc_construct_list [ i ] then
82279: LD_VAR 0 1
82283: PUSH
82284: LD_EXP 59
82288: PUSH
82289: LD_VAR 0 3
82293: ARRAY
82294: IN
82295: IFFALSE 82918
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82297: LD_ADDR_EXP 59
82301: PUSH
82302: LD_EXP 59
82306: PPUSH
82307: LD_VAR 0 3
82311: PPUSH
82312: LD_EXP 59
82316: PUSH
82317: LD_VAR 0 3
82321: ARRAY
82322: PUSH
82323: LD_VAR 0 1
82327: DIFF
82328: PPUSH
82329: CALL_OW 1
82333: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82334: LD_ADDR_EXP 52
82338: PUSH
82339: LD_EXP 52
82343: PPUSH
82344: LD_VAR 0 3
82348: PUSH
82349: LD_EXP 52
82353: PUSH
82354: LD_VAR 0 3
82358: ARRAY
82359: PUSH
82360: LD_INT 1
82362: PLUS
82363: PUSH
82364: EMPTY
82365: LIST
82366: LIST
82367: PPUSH
82368: LD_VAR 0 1
82372: PPUSH
82373: CALL 17956 0 3
82377: ST_TO_ADDR
// btype := GetBType ( building ) ;
82378: LD_ADDR_VAR 0 5
82382: PUSH
82383: LD_VAR 0 1
82387: PPUSH
82388: CALL_OW 266
82392: ST_TO_ADDR
// side := GetSide ( building ) ;
82393: LD_ADDR_VAR 0 8
82397: PUSH
82398: LD_VAR 0 1
82402: PPUSH
82403: CALL_OW 255
82407: ST_TO_ADDR
// if btype = b_lab then
82408: LD_VAR 0 5
82412: PUSH
82413: LD_INT 6
82415: EQUAL
82416: IFFALSE 82466
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
82418: LD_ADDR_EXP 85
82422: PUSH
82423: LD_EXP 85
82427: PPUSH
82428: LD_VAR 0 3
82432: PUSH
82433: LD_EXP 85
82437: PUSH
82438: LD_VAR 0 3
82442: ARRAY
82443: PUSH
82444: LD_INT 1
82446: PLUS
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PPUSH
82452: LD_VAR 0 1
82456: PPUSH
82457: CALL 17956 0 3
82461: ST_TO_ADDR
// exit ;
82462: POP
82463: POP
82464: GO 82922
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
82466: LD_VAR 0 5
82470: PUSH
82471: LD_INT 0
82473: PUSH
82474: LD_INT 2
82476: PUSH
82477: LD_INT 4
82479: PUSH
82480: EMPTY
82481: LIST
82482: LIST
82483: LIST
82484: IN
82485: IFFALSE 82609
// begin if btype = b_armoury then
82487: LD_VAR 0 5
82491: PUSH
82492: LD_INT 4
82494: EQUAL
82495: IFFALSE 82505
// btype := b_barracks ;
82497: LD_ADDR_VAR 0 5
82501: PUSH
82502: LD_INT 5
82504: ST_TO_ADDR
// if btype = b_depot then
82505: LD_VAR 0 5
82509: PUSH
82510: LD_INT 0
82512: EQUAL
82513: IFFALSE 82523
// btype := b_warehouse ;
82515: LD_ADDR_VAR 0 5
82519: PUSH
82520: LD_INT 1
82522: ST_TO_ADDR
// if btype = b_workshop then
82523: LD_VAR 0 5
82527: PUSH
82528: LD_INT 2
82530: EQUAL
82531: IFFALSE 82541
// btype := b_factory ;
82533: LD_ADDR_VAR 0 5
82537: PUSH
82538: LD_INT 3
82540: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
82541: LD_VAR 0 5
82545: PPUSH
82546: LD_VAR 0 8
82550: PPUSH
82551: CALL_OW 323
82555: PUSH
82556: LD_INT 1
82558: EQUAL
82559: IFFALSE 82605
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
82561: LD_ADDR_EXP 84
82565: PUSH
82566: LD_EXP 84
82570: PPUSH
82571: LD_VAR 0 3
82575: PUSH
82576: LD_EXP 84
82580: PUSH
82581: LD_VAR 0 3
82585: ARRAY
82586: PUSH
82587: LD_INT 1
82589: PLUS
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PPUSH
82595: LD_VAR 0 1
82599: PPUSH
82600: CALL 17956 0 3
82604: ST_TO_ADDR
// exit ;
82605: POP
82606: POP
82607: GO 82922
// end ; if btype in [ b_bunker , b_turret ] then
82609: LD_VAR 0 5
82613: PUSH
82614: LD_INT 32
82616: PUSH
82617: LD_INT 33
82619: PUSH
82620: EMPTY
82621: LIST
82622: LIST
82623: IN
82624: IFFALSE 82914
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
82626: LD_ADDR_EXP 60
82630: PUSH
82631: LD_EXP 60
82635: PPUSH
82636: LD_VAR 0 3
82640: PUSH
82641: LD_EXP 60
82645: PUSH
82646: LD_VAR 0 3
82650: ARRAY
82651: PUSH
82652: LD_INT 1
82654: PLUS
82655: PUSH
82656: EMPTY
82657: LIST
82658: LIST
82659: PPUSH
82660: LD_VAR 0 1
82664: PPUSH
82665: CALL 17956 0 3
82669: ST_TO_ADDR
// if btype = b_bunker then
82670: LD_VAR 0 5
82674: PUSH
82675: LD_INT 32
82677: EQUAL
82678: IFFALSE 82914
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82680: LD_ADDR_EXP 61
82684: PUSH
82685: LD_EXP 61
82689: PPUSH
82690: LD_VAR 0 3
82694: PUSH
82695: LD_EXP 61
82699: PUSH
82700: LD_VAR 0 3
82704: ARRAY
82705: PUSH
82706: LD_INT 1
82708: PLUS
82709: PUSH
82710: EMPTY
82711: LIST
82712: LIST
82713: PPUSH
82714: LD_VAR 0 1
82718: PPUSH
82719: CALL 17956 0 3
82723: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
82724: LD_ADDR_VAR 0 6
82728: PUSH
82729: LD_EXP 52
82733: PUSH
82734: LD_VAR 0 3
82738: ARRAY
82739: PPUSH
82740: LD_INT 25
82742: PUSH
82743: LD_INT 1
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PUSH
82750: LD_INT 3
82752: PUSH
82753: LD_INT 54
82755: PUSH
82756: EMPTY
82757: LIST
82758: PUSH
82759: EMPTY
82760: LIST
82761: LIST
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PPUSH
82767: CALL_OW 72
82771: ST_TO_ADDR
// if tmp then
82772: LD_VAR 0 6
82776: IFFALSE 82782
// exit ;
82778: POP
82779: POP
82780: GO 82922
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82782: LD_ADDR_VAR 0 6
82786: PUSH
82787: LD_EXP 52
82791: PUSH
82792: LD_VAR 0 3
82796: ARRAY
82797: PPUSH
82798: LD_INT 2
82800: PUSH
82801: LD_INT 30
82803: PUSH
82804: LD_INT 4
82806: PUSH
82807: EMPTY
82808: LIST
82809: LIST
82810: PUSH
82811: LD_INT 30
82813: PUSH
82814: LD_INT 5
82816: PUSH
82817: EMPTY
82818: LIST
82819: LIST
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: LIST
82825: PPUSH
82826: CALL_OW 72
82830: ST_TO_ADDR
// if not tmp then
82831: LD_VAR 0 6
82835: NOT
82836: IFFALSE 82842
// exit ;
82838: POP
82839: POP
82840: GO 82922
// for j in tmp do
82842: LD_ADDR_VAR 0 4
82846: PUSH
82847: LD_VAR 0 6
82851: PUSH
82852: FOR_IN
82853: IFFALSE 82912
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
82855: LD_ADDR_VAR 0 7
82859: PUSH
82860: LD_VAR 0 4
82864: PPUSH
82865: CALL_OW 313
82869: PPUSH
82870: LD_INT 25
82872: PUSH
82873: LD_INT 1
82875: PUSH
82876: EMPTY
82877: LIST
82878: LIST
82879: PPUSH
82880: CALL_OW 72
82884: ST_TO_ADDR
// if units then
82885: LD_VAR 0 7
82889: IFFALSE 82910
// begin ComExitBuilding ( units [ 1 ] ) ;
82891: LD_VAR 0 7
82895: PUSH
82896: LD_INT 1
82898: ARRAY
82899: PPUSH
82900: CALL_OW 122
// exit ;
82904: POP
82905: POP
82906: POP
82907: POP
82908: GO 82922
// end ; end ;
82910: GO 82852
82912: POP
82913: POP
// end ; end ; exit ;
82914: POP
82915: POP
82916: GO 82922
// end ; end ;
82918: GO 82276
82920: POP
82921: POP
// end ;
82922: LD_VAR 0 2
82926: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
82927: LD_INT 0
82929: PPUSH
82930: PPUSH
82931: PPUSH
82932: PPUSH
82933: PPUSH
82934: PPUSH
82935: PPUSH
// if not mc_bases or not skirmish then
82936: LD_EXP 52
82940: NOT
82941: PUSH
82942: LD_EXP 50
82946: NOT
82947: OR
82948: IFFALSE 82952
// exit ;
82950: GO 83183
// btype := GetBType ( building ) ;
82952: LD_ADDR_VAR 0 6
82956: PUSH
82957: LD_VAR 0 1
82961: PPUSH
82962: CALL_OW 266
82966: ST_TO_ADDR
// x := GetX ( building ) ;
82967: LD_ADDR_VAR 0 7
82971: PUSH
82972: LD_VAR 0 1
82976: PPUSH
82977: CALL_OW 250
82981: ST_TO_ADDR
// y := GetY ( building ) ;
82982: LD_ADDR_VAR 0 8
82986: PUSH
82987: LD_VAR 0 1
82991: PPUSH
82992: CALL_OW 251
82996: ST_TO_ADDR
// d := GetDir ( building ) ;
82997: LD_ADDR_VAR 0 9
83001: PUSH
83002: LD_VAR 0 1
83006: PPUSH
83007: CALL_OW 254
83011: ST_TO_ADDR
// for i = 1 to mc_bases do
83012: LD_ADDR_VAR 0 4
83016: PUSH
83017: DOUBLE
83018: LD_INT 1
83020: DEC
83021: ST_TO_ADDR
83022: LD_EXP 52
83026: PUSH
83027: FOR_TO
83028: IFFALSE 83181
// begin if not mc_build_list [ i ] then
83030: LD_EXP 57
83034: PUSH
83035: LD_VAR 0 4
83039: ARRAY
83040: NOT
83041: IFFALSE 83045
// continue ;
83043: GO 83027
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
83045: LD_VAR 0 6
83049: PUSH
83050: LD_VAR 0 7
83054: PUSH
83055: LD_VAR 0 8
83059: PUSH
83060: LD_VAR 0 9
83064: PUSH
83065: EMPTY
83066: LIST
83067: LIST
83068: LIST
83069: LIST
83070: PPUSH
83071: LD_EXP 57
83075: PUSH
83076: LD_VAR 0 4
83080: ARRAY
83081: PUSH
83082: LD_INT 1
83084: ARRAY
83085: PPUSH
83086: CALL 24125 0 2
83090: IFFALSE 83179
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
83092: LD_ADDR_EXP 57
83096: PUSH
83097: LD_EXP 57
83101: PPUSH
83102: LD_VAR 0 4
83106: PPUSH
83107: LD_EXP 57
83111: PUSH
83112: LD_VAR 0 4
83116: ARRAY
83117: PPUSH
83118: LD_INT 1
83120: PPUSH
83121: CALL_OW 3
83125: PPUSH
83126: CALL_OW 1
83130: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
83131: LD_ADDR_EXP 59
83135: PUSH
83136: LD_EXP 59
83140: PPUSH
83141: LD_VAR 0 4
83145: PUSH
83146: LD_EXP 59
83150: PUSH
83151: LD_VAR 0 4
83155: ARRAY
83156: PUSH
83157: LD_INT 1
83159: PLUS
83160: PUSH
83161: EMPTY
83162: LIST
83163: LIST
83164: PPUSH
83165: LD_VAR 0 1
83169: PPUSH
83170: CALL 17956 0 3
83174: ST_TO_ADDR
// exit ;
83175: POP
83176: POP
83177: GO 83183
// end ; end ;
83179: GO 83027
83181: POP
83182: POP
// end ;
83183: LD_VAR 0 3
83187: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
83188: LD_INT 0
83190: PPUSH
83191: PPUSH
83192: PPUSH
// if not mc_bases or not skirmish then
83193: LD_EXP 52
83197: NOT
83198: PUSH
83199: LD_EXP 50
83203: NOT
83204: OR
83205: IFFALSE 83209
// exit ;
83207: GO 83399
// for i = 1 to mc_bases do
83209: LD_ADDR_VAR 0 4
83213: PUSH
83214: DOUBLE
83215: LD_INT 1
83217: DEC
83218: ST_TO_ADDR
83219: LD_EXP 52
83223: PUSH
83224: FOR_TO
83225: IFFALSE 83312
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
83227: LD_VAR 0 1
83231: PUSH
83232: LD_EXP 60
83236: PUSH
83237: LD_VAR 0 4
83241: ARRAY
83242: IN
83243: PUSH
83244: LD_VAR 0 1
83248: PUSH
83249: LD_EXP 61
83253: PUSH
83254: LD_VAR 0 4
83258: ARRAY
83259: IN
83260: NOT
83261: AND
83262: IFFALSE 83310
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83264: LD_ADDR_EXP 61
83268: PUSH
83269: LD_EXP 61
83273: PPUSH
83274: LD_VAR 0 4
83278: PUSH
83279: LD_EXP 61
83283: PUSH
83284: LD_VAR 0 4
83288: ARRAY
83289: PUSH
83290: LD_INT 1
83292: PLUS
83293: PUSH
83294: EMPTY
83295: LIST
83296: LIST
83297: PPUSH
83298: LD_VAR 0 1
83302: PPUSH
83303: CALL 17956 0 3
83307: ST_TO_ADDR
// break ;
83308: GO 83312
// end ; end ;
83310: GO 83224
83312: POP
83313: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
83314: LD_VAR 0 1
83318: PPUSH
83319: CALL_OW 257
83323: PUSH
83324: LD_EXP 78
83328: IN
83329: PUSH
83330: LD_VAR 0 1
83334: PPUSH
83335: CALL_OW 266
83339: PUSH
83340: LD_INT 5
83342: EQUAL
83343: AND
83344: PUSH
83345: LD_VAR 0 2
83349: PPUSH
83350: CALL_OW 110
83354: PUSH
83355: LD_INT 18
83357: NONEQUAL
83358: AND
83359: IFFALSE 83399
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
83361: LD_VAR 0 2
83365: PPUSH
83366: CALL_OW 257
83370: PUSH
83371: LD_INT 5
83373: PUSH
83374: LD_INT 8
83376: PUSH
83377: LD_INT 9
83379: PUSH
83380: EMPTY
83381: LIST
83382: LIST
83383: LIST
83384: IN
83385: IFFALSE 83399
// SetClass ( unit , 1 ) ;
83387: LD_VAR 0 2
83391: PPUSH
83392: LD_INT 1
83394: PPUSH
83395: CALL_OW 336
// end ;
83399: LD_VAR 0 3
83403: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
83404: LD_INT 0
83406: PPUSH
83407: PPUSH
// if not mc_bases or not skirmish then
83408: LD_EXP 52
83412: NOT
83413: PUSH
83414: LD_EXP 50
83418: NOT
83419: OR
83420: IFFALSE 83424
// exit ;
83422: GO 83540
// if GetLives ( abandoned_vehicle ) > 250 then
83424: LD_VAR 0 2
83428: PPUSH
83429: CALL_OW 256
83433: PUSH
83434: LD_INT 250
83436: GREATER
83437: IFFALSE 83441
// exit ;
83439: GO 83540
// for i = 1 to mc_bases do
83441: LD_ADDR_VAR 0 6
83445: PUSH
83446: DOUBLE
83447: LD_INT 1
83449: DEC
83450: ST_TO_ADDR
83451: LD_EXP 52
83455: PUSH
83456: FOR_TO
83457: IFFALSE 83538
// begin if driver in mc_bases [ i ] then
83459: LD_VAR 0 1
83463: PUSH
83464: LD_EXP 52
83468: PUSH
83469: LD_VAR 0 6
83473: ARRAY
83474: IN
83475: IFFALSE 83536
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
83477: LD_VAR 0 1
83481: PPUSH
83482: LD_EXP 52
83486: PUSH
83487: LD_VAR 0 6
83491: ARRAY
83492: PPUSH
83493: LD_INT 2
83495: PUSH
83496: LD_INT 30
83498: PUSH
83499: LD_INT 0
83501: PUSH
83502: EMPTY
83503: LIST
83504: LIST
83505: PUSH
83506: LD_INT 30
83508: PUSH
83509: LD_INT 1
83511: PUSH
83512: EMPTY
83513: LIST
83514: LIST
83515: PUSH
83516: EMPTY
83517: LIST
83518: LIST
83519: LIST
83520: PPUSH
83521: CALL_OW 72
83525: PUSH
83526: LD_INT 1
83528: ARRAY
83529: PPUSH
83530: CALL_OW 112
// break ;
83534: GO 83538
// end ; end ;
83536: GO 83456
83538: POP
83539: POP
// end ; end_of_file end_of_file end_of_file
83540: LD_VAR 0 5
83544: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
83545: LD_INT 0
83547: PPUSH
83548: PPUSH
83549: PPUSH
83550: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83551: LD_VAR 0 1
83555: PPUSH
83556: CALL_OW 264
83560: PUSH
83561: LD_EXP 49
83565: EQUAL
83566: IFFALSE 83638
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83568: LD_INT 68
83570: PPUSH
83571: LD_VAR 0 1
83575: PPUSH
83576: CALL_OW 255
83580: PPUSH
83581: CALL_OW 321
83585: PUSH
83586: LD_INT 2
83588: EQUAL
83589: IFFALSE 83601
// eff := 70 else
83591: LD_ADDR_VAR 0 6
83595: PUSH
83596: LD_INT 70
83598: ST_TO_ADDR
83599: GO 83609
// eff := 30 ;
83601: LD_ADDR_VAR 0 6
83605: PUSH
83606: LD_INT 30
83608: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83609: LD_VAR 0 1
83613: PPUSH
83614: CALL_OW 250
83618: PPUSH
83619: LD_VAR 0 1
83623: PPUSH
83624: CALL_OW 251
83628: PPUSH
83629: LD_VAR 0 6
83633: PPUSH
83634: CALL_OW 495
// end ; end ;
83638: LD_VAR 0 4
83642: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
83643: LD_INT 0
83645: PPUSH
83646: PPUSH
83647: PPUSH
83648: PPUSH
83649: PPUSH
83650: PPUSH
// if cmd = 124 then
83651: LD_VAR 0 1
83655: PUSH
83656: LD_INT 124
83658: EQUAL
83659: IFFALSE 83865
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
83661: LD_ADDR_VAR 0 5
83665: PUSH
83666: LD_INT 2
83668: PUSH
83669: LD_INT 34
83671: PUSH
83672: LD_INT 53
83674: PUSH
83675: EMPTY
83676: LIST
83677: LIST
83678: PUSH
83679: LD_INT 34
83681: PUSH
83682: LD_INT 14
83684: PUSH
83685: EMPTY
83686: LIST
83687: LIST
83688: PUSH
83689: EMPTY
83690: LIST
83691: LIST
83692: LIST
83693: PPUSH
83694: CALL_OW 69
83698: ST_TO_ADDR
// if not tmp then
83699: LD_VAR 0 5
83703: NOT
83704: IFFALSE 83708
// exit ;
83706: GO 83865
// for i in tmp do
83708: LD_ADDR_VAR 0 3
83712: PUSH
83713: LD_VAR 0 5
83717: PUSH
83718: FOR_IN
83719: IFFALSE 83863
// begin taskList := GetTaskList ( i ) ;
83721: LD_ADDR_VAR 0 6
83725: PUSH
83726: LD_VAR 0 3
83730: PPUSH
83731: CALL_OW 437
83735: ST_TO_ADDR
// if not taskList then
83736: LD_VAR 0 6
83740: NOT
83741: IFFALSE 83745
// continue ;
83743: GO 83718
// for j = 1 to taskList do
83745: LD_ADDR_VAR 0 4
83749: PUSH
83750: DOUBLE
83751: LD_INT 1
83753: DEC
83754: ST_TO_ADDR
83755: LD_VAR 0 6
83759: PUSH
83760: FOR_TO
83761: IFFALSE 83859
// if taskList [ j ] [ 1 ] = | then
83763: LD_VAR 0 6
83767: PUSH
83768: LD_VAR 0 4
83772: ARRAY
83773: PUSH
83774: LD_INT 1
83776: ARRAY
83777: PUSH
83778: LD_STRING |
83780: EQUAL
83781: IFFALSE 83857
// begin _taskList := Delete ( taskList , 1 ) ;
83783: LD_ADDR_VAR 0 7
83787: PUSH
83788: LD_VAR 0 6
83792: PPUSH
83793: LD_INT 1
83795: PPUSH
83796: CALL_OW 3
83800: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
83801: LD_VAR 0 3
83805: PPUSH
83806: LD_VAR 0 7
83810: PPUSH
83811: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
83815: LD_VAR 0 3
83819: PPUSH
83820: LD_VAR 0 6
83824: PUSH
83825: LD_VAR 0 4
83829: ARRAY
83830: PUSH
83831: LD_INT 2
83833: ARRAY
83834: PPUSH
83835: LD_VAR 0 6
83839: PUSH
83840: LD_VAR 0 4
83844: ARRAY
83845: PUSH
83846: LD_INT 3
83848: ARRAY
83849: PPUSH
83850: LD_INT 8
83852: PPUSH
83853: CALL 83870 0 4
// end ;
83857: GO 83760
83859: POP
83860: POP
// end ;
83861: GO 83718
83863: POP
83864: POP
// end ; end ;
83865: LD_VAR 0 2
83869: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83870: LD_INT 0
83872: PPUSH
83873: PPUSH
83874: PPUSH
83875: PPUSH
83876: PPUSH
83877: PPUSH
83878: PPUSH
83879: PPUSH
83880: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83881: LD_VAR 0 1
83885: NOT
83886: PUSH
83887: LD_VAR 0 2
83891: PPUSH
83892: LD_VAR 0 3
83896: PPUSH
83897: CALL_OW 488
83901: NOT
83902: OR
83903: PUSH
83904: LD_VAR 0 4
83908: NOT
83909: OR
83910: IFFALSE 83914
// exit ;
83912: GO 84254
// list := [ ] ;
83914: LD_ADDR_VAR 0 13
83918: PUSH
83919: EMPTY
83920: ST_TO_ADDR
// if x - r < 0 then
83921: LD_VAR 0 2
83925: PUSH
83926: LD_VAR 0 4
83930: MINUS
83931: PUSH
83932: LD_INT 0
83934: LESS
83935: IFFALSE 83947
// min_x := 0 else
83937: LD_ADDR_VAR 0 7
83941: PUSH
83942: LD_INT 0
83944: ST_TO_ADDR
83945: GO 83963
// min_x := x - r ;
83947: LD_ADDR_VAR 0 7
83951: PUSH
83952: LD_VAR 0 2
83956: PUSH
83957: LD_VAR 0 4
83961: MINUS
83962: ST_TO_ADDR
// if y - r < 0 then
83963: LD_VAR 0 3
83967: PUSH
83968: LD_VAR 0 4
83972: MINUS
83973: PUSH
83974: LD_INT 0
83976: LESS
83977: IFFALSE 83989
// min_y := 0 else
83979: LD_ADDR_VAR 0 8
83983: PUSH
83984: LD_INT 0
83986: ST_TO_ADDR
83987: GO 84005
// min_y := y - r ;
83989: LD_ADDR_VAR 0 8
83993: PUSH
83994: LD_VAR 0 3
83998: PUSH
83999: LD_VAR 0 4
84003: MINUS
84004: ST_TO_ADDR
// max_x := x + r ;
84005: LD_ADDR_VAR 0 9
84009: PUSH
84010: LD_VAR 0 2
84014: PUSH
84015: LD_VAR 0 4
84019: PLUS
84020: ST_TO_ADDR
// max_y := y + r ;
84021: LD_ADDR_VAR 0 10
84025: PUSH
84026: LD_VAR 0 3
84030: PUSH
84031: LD_VAR 0 4
84035: PLUS
84036: ST_TO_ADDR
// for _x = min_x to max_x do
84037: LD_ADDR_VAR 0 11
84041: PUSH
84042: DOUBLE
84043: LD_VAR 0 7
84047: DEC
84048: ST_TO_ADDR
84049: LD_VAR 0 9
84053: PUSH
84054: FOR_TO
84055: IFFALSE 84172
// for _y = min_y to max_y do
84057: LD_ADDR_VAR 0 12
84061: PUSH
84062: DOUBLE
84063: LD_VAR 0 8
84067: DEC
84068: ST_TO_ADDR
84069: LD_VAR 0 10
84073: PUSH
84074: FOR_TO
84075: IFFALSE 84168
// begin if not ValidHex ( _x , _y ) then
84077: LD_VAR 0 11
84081: PPUSH
84082: LD_VAR 0 12
84086: PPUSH
84087: CALL_OW 488
84091: NOT
84092: IFFALSE 84096
// continue ;
84094: GO 84074
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84096: LD_VAR 0 11
84100: PPUSH
84101: LD_VAR 0 12
84105: PPUSH
84106: CALL_OW 351
84110: PUSH
84111: LD_VAR 0 11
84115: PPUSH
84116: LD_VAR 0 12
84120: PPUSH
84121: CALL_OW 554
84125: AND
84126: IFFALSE 84166
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84128: LD_ADDR_VAR 0 13
84132: PUSH
84133: LD_VAR 0 13
84137: PPUSH
84138: LD_VAR 0 13
84142: PUSH
84143: LD_INT 1
84145: PLUS
84146: PPUSH
84147: LD_VAR 0 11
84151: PUSH
84152: LD_VAR 0 12
84156: PUSH
84157: EMPTY
84158: LIST
84159: LIST
84160: PPUSH
84161: CALL_OW 2
84165: ST_TO_ADDR
// end ;
84166: GO 84074
84168: POP
84169: POP
84170: GO 84054
84172: POP
84173: POP
// if not list then
84174: LD_VAR 0 13
84178: NOT
84179: IFFALSE 84183
// exit ;
84181: GO 84254
// for i in list do
84183: LD_ADDR_VAR 0 6
84187: PUSH
84188: LD_VAR 0 13
84192: PUSH
84193: FOR_IN
84194: IFFALSE 84252
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84196: LD_VAR 0 1
84200: PPUSH
84201: LD_STRING M
84203: PUSH
84204: LD_VAR 0 6
84208: PUSH
84209: LD_INT 1
84211: ARRAY
84212: PUSH
84213: LD_VAR 0 6
84217: PUSH
84218: LD_INT 2
84220: ARRAY
84221: PUSH
84222: LD_INT 0
84224: PUSH
84225: LD_INT 0
84227: PUSH
84228: LD_INT 0
84230: PUSH
84231: LD_INT 0
84233: PUSH
84234: EMPTY
84235: LIST
84236: LIST
84237: LIST
84238: LIST
84239: LIST
84240: LIST
84241: LIST
84242: PUSH
84243: EMPTY
84244: LIST
84245: PPUSH
84246: CALL_OW 447
84250: GO 84193
84252: POP
84253: POP
// end ;
84254: LD_VAR 0 5
84258: RET
