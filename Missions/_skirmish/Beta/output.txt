// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5228 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2391 0 0
// PrepareBeta ;
  49: CALL 2780 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 11035 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3362 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4087 0 0
// PrepareRUBase_v2 ;
 877: CALL 4503 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 56526 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3974 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10892 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10892 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10892 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10892 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2069
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4831 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2027
// begin AddMedal ( Russians , 1 ) ;
2003: LD_STRING Russians
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2013: LD_EXP 8
2017: PPUSH
2018: LD_STRING DBrighton-F1a
2020: PPUSH
2021: CALL_OW 88
// end else
2025: GO 2057
// begin AddMedal ( Russians , - 1 ) ;
2027: LD_STRING Russians
2029: PPUSH
2030: LD_INT 1
2032: NEG
2033: PPUSH
2034: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2038: LD_EXP 8
2042: PPUSH
2043: LD_STRING DBrighton-F1
2045: PPUSH
2046: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2050: LD_STRING C3
2052: PPUSH
2053: CALL_OW 337
// end ; DialogueOff ;
2057: CALL_OW 7
// JMM_Arrived := true ;
2061: LD_ADDR_EXP 5
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// end ;
2069: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2070: LD_EXP 5
2074: PUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_EXP 18
2082: PPUSH
2083: CALL_OW 292
2087: AND
2088: IFFALSE 2117
2090: GO 2092
2092: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2093: LD_EXP 18
2097: PPUSH
2098: LD_STRING DBurlak
2100: PPUSH
2101: CALL_OW 88
// Say ( JMM , DJMM ) ;
2105: LD_EXP 36
2109: PPUSH
2110: LD_STRING DJMM
2112: PPUSH
2113: CALL_OW 88
// end ;
2117: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2118: LD_INT 1
2120: PUSH
2121: LD_INT 22
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: LD_INT 34
2136: PUSH
2137: LD_INT 9
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 35
2146: PUSH
2147: LD_INT 9
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 69
2168: PUSH
2169: LD_INT 1
2171: GREATER
2172: IFFALSE 2185
2174: GO 2176
2176: DISABLE
// begin LaserBuilt := true ;
2177: LD_ADDR_EXP 6
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// end ;
2185: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2186: LD_EXP 7
2190: PUSH
2191: LD_INT 6
2193: PPUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 9
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PPUSH
2230: LD_EXP 15
2234: PPUSH
2235: CALL_OW 310
2239: PPUSH
2240: CALL_OW 74
2244: PPUSH
2245: CALL_OW 292
2249: AND
2250: IFFALSE 2286
2252: GO 2254
2254: DISABLE
// begin wait ( 0 0$5 ) ;
2255: LD_INT 175
2257: PPUSH
2258: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_STRING DDeath-Vse-2
2269: PPUSH
2270: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2274: LD_EXP 12
2278: PPUSH
2279: LD_STRING DDeath-Yas-2
2281: PPUSH
2282: CALL_OW 88
// end ;
2286: END
// every 0 0$1 trigger AssaultStarted do
2287: LD_EXP 7
2291: IFFALSE 2315
2293: GO 2295
2295: DISABLE
// begin wait ( 0 0$20 ) ;
2296: LD_INT 700
2298: PPUSH
2299: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2303: LD_EXP 13
2307: PPUSH
2308: LD_STRING DDeath-Pop-2
2310: PPUSH
2311: CALL_OW 88
// end ;
2315: END
// every 0 0$1 trigger MissionStart do
2316: LD_EXP 1
2320: IFFALSE 2362
2322: GO 2324
2324: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2325: LD_INT 1750
2327: PPUSH
2328: LD_INT 4900
2330: PPUSH
2331: CALL_OW 12
2335: PPUSH
2336: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 5
2345: PPUSH
2346: CALL_OW 12
2350: PPUSH
2351: LD_INT 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 55
// enable ;
2361: ENABLE
// end ;
2362: END
// every 0 0$1 trigger MissionStart do
2363: LD_EXP 1
2367: IFFALSE 2390
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// display_Strings := [ #tick , tick ] ;
2373: LD_ADDR_OWVAR 47
2377: PUSH
2378: LD_STRING #tick
2380: PUSH
2381: LD_OWVAR 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// end ; end_of_file
2390: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2391: LD_INT 0
2393: PPUSH
// uc_side := 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_class = class_soldier ;
2402: LD_ADDR_OWVAR 28
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// uc_nation := nation_american ;
2410: LD_ADDR_OWVAR 21
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// hc_sex = sex_male ;
2418: LD_ADDR_OWVAR 27
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// hc_importance = 110 ;
2426: LD_ADDR_OWVAR 32
2430: PUSH
2431: LD_INT 110
2433: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2434: LD_ADDR_OWVAR 30
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 4
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 9
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 6
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 12
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING Gerard Brighton
2502: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2503: LD_ADDR_OWVAR 33
2507: PUSH
2508: LD_STRING Beta_Skirmish
2510: ST_TO_ADDR
// hc_face_number := 1 ;
2511: LD_ADDR_OWVAR 34
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// Brighton := CreateHuman ;
2519: LD_ADDR_EXP 8
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// hc_importance = 80 ;
2537: LD_ADDR_OWVAR 32
2541: PUSH
2542: LD_INT 80
2544: ST_TO_ADDR
// hc_sex = sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2553: LD_ADDR_OWVAR 30
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2576: LD_ADDR_OWVAR 31
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 6
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2599: LD_ADDR_OWVAR 29
2603: PUSH
2604: LD_INT 10
2606: PUSH
2607: LD_INT 10
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_name := Brian Palmer ;
2614: LD_ADDR_OWVAR 26
2618: PUSH
2619: LD_STRING Brian Palmer
2621: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING Beta_Skirmish
2629: ST_TO_ADDR
// hc_face_number := 3 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// Palmer := CreateHuman ;
2638: LD_ADDR_EXP 9
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// hc_class = class_scientistic ;
2648: LD_ADDR_OWVAR 28
2652: PUSH
2653: LD_INT 4
2655: ST_TO_ADDR
// uc_nation := nation_american ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// hc_importance = 70 ;
2664: LD_ADDR_OWVAR 32
2668: PUSH
2669: LD_INT 70
2671: ST_TO_ADDR
// hc_sex = sex_female ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2680: LD_ADDR_OWVAR 30
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2703: LD_ADDR_OWVAR 31
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 8
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2726: LD_ADDR_OWVAR 29
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: LD_INT 10
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_name := Megan Armitage ;
2741: LD_ADDR_OWVAR 26
2745: PUSH
2746: LD_STRING Megan Armitage
2748: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2749: LD_ADDR_OWVAR 33
2753: PUSH
2754: LD_STRING Beta_Skirmish
2756: ST_TO_ADDR
// hc_face_number := 4 ;
2757: LD_ADDR_OWVAR 34
2761: PUSH
2762: LD_INT 4
2764: ST_TO_ADDR
// Megan := CreateHuman ;
2765: LD_ADDR_EXP 10
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 1
2779: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
// uc_side := 1 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_nation := nation_american ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 32
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2893
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2840: LD_VAR 0 2
2844: PPUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 11
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 4
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 7
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
2891: GO 2837
2893: POP
2894: POP
// hc_name :=  ;
2895: LD_ADDR_OWVAR 26
2899: PUSH
2900: LD_STRING 
2902: ST_TO_ADDR
// hc_gallery :=  ;
2903: LD_ADDR_OWVAR 33
2907: PUSH
2908: LD_STRING 
2910: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
2911: LD_ADDR_VAR 0 2
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_INT 6
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: PUSH
2941: FOR_TO
2942: IFFALSE 3000
// begin PrepareSoldier ( 1 , game_skill ) ;
2944: LD_INT 1
2946: PPUSH
2947: LD_EXP 38
2951: PPUSH
2952: CALL_OW 381
// un := CreateHuman ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// filter := filter ^ un ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: LD_VAR 0 4
2996: ADD
2997: ST_TO_ADDR
// end ;
2998: GO 2941
3000: POP
3001: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_OWVAR 67
3030: ARRAY
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3087
// begin PrepareEngineer ( 0 , game_skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_EXP 38
3042: PPUSH
3043: CALL_OW 382
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// filter := filter ^ un ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_VAR 0 4
3071: ADD
3072: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 52
// end ;
3085: GO 3032
3087: POP
3088: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 4
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3174
// begin PrepareMechanic ( 0 , game_skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// filter := filter ^ un ;
3144: LD_ADDR_VAR 0 3
3148: PUSH
3149: LD_VAR 0 3
3153: PUSH
3154: LD_VAR 0 4
3158: ADD
3159: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3160: LD_VAR 0 4
3164: PPUSH
3165: LD_INT 8
3167: PPUSH
3168: CALL_OW 52
// end ;
3172: GO 3119
3174: POP
3175: POP
// for i = 1 to 2 do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_INT 2
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3244
// begin PrepareScientist ( 0 , game_skill ) ;
3192: LD_INT 0
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 384
// un := CreateHuman ;
3204: LD_ADDR_VAR 0 4
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// filter := filter ^ un ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_VAR 0 4
3228: ADD
3229: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_INT 14
3237: PPUSH
3238: CALL_OW 52
// end ;
3242: GO 3189
3244: POP
3245: POP
// for i = 1 to soldiers do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_VAR 0 5
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3287
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3264: LD_VAR 0 5
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
3285: GO 3261
3287: POP
3288: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_INT 51
3296: PPUSH
3297: LD_INT 43
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3307: LD_EXP 9
3311: PPUSH
3312: LD_INT 55
3314: PPUSH
3315: LD_INT 58
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3325: LD_EXP 10
3329: PPUSH
3330: LD_INT 39
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: CALL_OW 48
// BetaSquad := filter diff 0 ;
3343: LD_ADDR_EXP 11
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 0
3355: DIFF
3356: ST_TO_ADDR
// end ;
3357: LD_VAR 0 1
3361: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// uc_side := 6 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 6
3377: ST_TO_ADDR
// uc_nation := nation_russian ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// soldiers := [ ] ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// vehs := [ ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// RUArmada := [ ] ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3407: LD_ADDR_EXP 12
3411: PUSH
3412: LD_STRING Yashin
3414: PPUSH
3415: CALL_OW 25
3419: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3420: LD_ADDR_EXP 13
3424: PUSH
3425: LD_STRING Popov
3427: PPUSH
3428: CALL_OW 25
3432: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3433: LD_ADDR_EXP 14
3437: PUSH
3438: LD_STRING Gaydar
3440: PPUSH
3441: CALL_OW 25
3445: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3446: LD_ADDR_EXP 15
3450: PUSH
3451: LD_STRING Vsevolod
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// for i = 1 to 16 do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_INT 16
3471: PUSH
3472: FOR_TO
3473: IFFALSE 3515
// begin PrepareSoldier ( 0 , game_eskill ) ;
3475: LD_INT 0
3477: PPUSH
3478: LD_EXP 39
3482: PPUSH
3483: CALL_OW 381
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_VAR 0 5
3511: ADD
3512: ST_TO_ADDR
// end ;
3513: GO 3472
3515: POP
3516: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_EXP 12
3526: PUSH
3527: LD_EXP 13
3531: ADD
3532: PUSH
3533: LD_EXP 14
3537: ADD
3538: PUSH
3539: LD_EXP 15
3543: ADD
3544: PUSH
3545: LD_VAR 0 4
3549: ADD
3550: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3551: LD_INT 24
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 46
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL 18297 0 5
// for i = 1 to 8 do
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_INT 8
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3667
// begin vehicle := CreateVehicle ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 3
3609: PPUSH
3610: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 4
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: DIFF
3633: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// vehs := vehs ^ vehicle ;
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 3
3663: ADD
3664: ST_TO_ADDR
// end ;
3665: GO 3583
3667: POP
3668: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3669: LD_INT 24
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 43
3680: PPUSH
3681: LD_INT 100
3683: PPUSH
3684: CALL 18297 0 5
// for i = 1 to 8 do
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: DOUBLE
3694: LD_INT 1
3696: DEC
3697: ST_TO_ADDR
3698: LD_INT 8
3700: PUSH
3701: FOR_TO
3702: IFFALSE 3785
// begin vehicle := CreateVehicle ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: DIFF
3751: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// vehs := vehs ^ vehicle ;
3767: LD_ADDR_VAR 0 6
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_VAR 0 3
3781: ADD
3782: ST_TO_ADDR
// end ;
3783: GO 3701
3785: POP
3786: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3787: LD_INT 22
3789: PPUSH
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_INT 44
3798: PPUSH
3799: LD_INT 100
3801: PPUSH
3802: CALL 18297 0 5
// for i = 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3903
// begin vehicle := CreateVehicle ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3832: LD_VAR 0 4
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: LD_VAR 0 3
3845: PPUSH
3846: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: DIFF
3869: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// vehs := vehs ^ vehicle ;
3885: LD_ADDR_VAR 0 6
3889: PUSH
3890: LD_VAR 0 6
3894: PUSH
3895: LD_VAR 0 3
3899: ADD
3900: ST_TO_ADDR
// end ;
3901: GO 3819
3903: POP
3904: POP
// RUArmada := vehs ;
3905: LD_ADDR_EXP 16
3909: PUSH
3910: LD_VAR 0 6
3914: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3915: LD_EXP 12
3919: PPUSH
3920: CALL_OW 310
3924: PUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 310
3934: PUSH
3935: LD_EXP 14
3939: PPUSH
3940: CALL_OW 310
3944: PUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 310
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: LD_INT 6
3963: NEG
3964: PPUSH
3965: CALL_OW 242
// end ;
3969: LD_VAR 0 1
3973: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 6 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 6
3986: ST_TO_ADDR
// uc_nation := nation_russian ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 3
3994: ST_TO_ADDR
// Bulldozers := [ ] ;
3995: LD_ADDR_EXP 17
3999: PUSH
4000: EMPTY
4001: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4002: LD_INT 24
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 53
4013: PPUSH
4014: LD_INT 100
4016: PPUSH
4017: CALL 18297 0 5
// for i = 1 to 2 do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: DOUBLE
4027: LD_INT 1
4029: DEC
4030: ST_TO_ADDR
4031: LD_INT 2
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4080
// begin vehicle := CreateVehicle ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 45
4046: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4062: LD_ADDR_EXP 17
4066: PUSH
4067: LD_EXP 17
4071: PUSH
4072: LD_VAR 0 3
4076: ADD
4077: ST_TO_ADDR
// end ;
4078: GO 4034
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// uc_side := 3 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// uc_nation := nation_russian ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_INT 3
4108: ST_TO_ADDR
// hc_name :=  ;
4109: LD_ADDR_OWVAR 26
4113: PUSH
4114: LD_STRING 
4116: ST_TO_ADDR
// hc_gallery :=  ;
4117: LD_ADDR_OWVAR 33
4121: PUSH
4122: LD_STRING 
4124: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4125: LD_ADDR_EXP 18
4129: PUSH
4130: LD_STRING Burlak
4132: PPUSH
4133: CALL_OW 25
4137: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4138: LD_ADDR_EXP 19
4142: PUSH
4143: LD_STRING Gleb
4145: PPUSH
4146: CALL_OW 25
4150: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4151: LD_ADDR_EXP 20
4155: PUSH
4156: LD_STRING Furmanov
4158: PPUSH
4159: CALL_OW 25
4163: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4164: LD_ADDR_EXP 21
4168: PUSH
4169: LD_STRING Titov
4171: PPUSH
4172: CALL_OW 25
4176: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4177: LD_ADDR_EXP 22
4181: PUSH
4182: LD_STRING Scholtze
4184: PPUSH
4185: CALL_OW 25
4189: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4190: LD_ADDR_EXP 23
4194: PUSH
4195: LD_STRING Dolgov
4197: PPUSH
4198: CALL_OW 25
4202: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4203: LD_ADDR_EXP 24
4207: PUSH
4208: LD_STRING Kapitsova
4210: PPUSH
4211: CALL_OW 25
4215: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4216: LD_ADDR_EXP 25
4220: PUSH
4221: LD_STRING Karamazov
4223: PPUSH
4224: CALL_OW 25
4228: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Kirlenkova
4236: PPUSH
4237: CALL_OW 25
4241: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4242: LD_ADDR_EXP 27
4246: PUSH
4247: LD_STRING Kovalyuk
4249: PPUSH
4250: CALL_OW 25
4254: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4255: LD_ADDR_EXP 28
4259: PUSH
4260: LD_STRING Kozlov
4262: PPUSH
4263: CALL_OW 25
4267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4268: LD_ADDR_EXP 29
4272: PUSH
4273: LD_STRING Kuzmov
4275: PPUSH
4276: CALL_OW 25
4280: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4281: LD_ADDR_EXP 30
4285: PUSH
4286: LD_STRING Lipshchin
4288: PPUSH
4289: CALL_OW 25
4293: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4294: LD_ADDR_EXP 31
4298: PUSH
4299: LD_STRING Oblukov
4301: PPUSH
4302: CALL_OW 25
4306: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_STRING Xavier2
4314: PPUSH
4315: CALL_OW 25
4319: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4320: LD_ADDR_EXP 33
4324: PUSH
4325: LD_STRING Gnyevko
4327: PPUSH
4328: CALL_OW 25
4332: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4333: LD_ADDR_EXP 34
4337: PUSH
4338: LD_STRING Belkov
4340: PPUSH
4341: CALL_OW 25
4345: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 18
4355: PUSH
4356: LD_EXP 19
4360: PUSH
4361: LD_EXP 20
4365: PUSH
4366: LD_EXP 21
4370: PUSH
4371: LD_EXP 22
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 24
4385: PUSH
4386: LD_EXP 25
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_EXP 27
4400: PUSH
4401: LD_EXP 28
4405: PUSH
4406: LD_EXP 29
4410: PUSH
4411: LD_EXP 30
4415: PUSH
4416: LD_EXP 31
4420: PUSH
4421: LD_EXP 32
4425: PUSH
4426: LD_EXP 33
4430: PUSH
4431: LD_EXP 34
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// for i = 1 to filter do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 6
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// for i = 1 to 8 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4597
// begin PrepareSoldier ( 0 , game_eskill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_EXP 39
4564: PPUSH
4565: CALL_OW 381
// un := CreateHuman ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 44
4578: ST_TO_ADDR
// filter := filter ^ un ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_VAR 0 4
4593: ADD
4594: ST_TO_ADDR
// end ;
4595: GO 4554
4597: POP
4598: POP
// for i = 1 to 4 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 4
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4655
// begin PrepareEngineer ( 0 , game_eskill ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_EXP 39
4622: PPUSH
4623: CALL_OW 382
// un := CreateHuman ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: CALL_OW 44
4636: ST_TO_ADDR
// filter := filter ^ un ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ADD
4652: ST_TO_ADDR
// end ;
4653: GO 4612
4655: POP
4656: POP
// for i = 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4713
// begin PrepareMechanic ( 0 , game_eskill ) ;
4673: LD_INT 0
4675: PPUSH
4676: LD_EXP 39
4680: PPUSH
4681: CALL_OW 383
// un := CreateHuman ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: CALL_OW 44
4694: ST_TO_ADDR
// filter := filter ^ un ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_VAR 0 4
4709: ADD
4710: ST_TO_ADDR
// end ;
4711: GO 4670
4713: POP
4714: POP
// for i = 1 to 4 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 4
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4771
// begin PrepareScientist ( 0 , game_eskill ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 384
// un := CreateHuman ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: CALL_OW 44
4752: ST_TO_ADDR
// filter := filter ^ un ;
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 4
4767: ADD
4768: ST_TO_ADDR
// end ;
4769: GO 4728
4771: POP
4772: POP
// for i = 1 to filter do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4791: LD_VAR 0 3
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// RU_SecondPersonnel := filter ;
4816: LD_ADDR_EXP 35
4820: PUSH
4821: LD_VAR 0 3
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 1
4830: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := nation_american ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4856: LD_ADDR_EXP 36
4860: PUSH
4861: LD_STRING JMM
4863: PPUSH
4864: CALL_OW 25
4868: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4869: LD_EXP 36
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4881: LD_EXP 36
4885: PPUSH
4886: LD_INT 7
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 49
// mechs := [ ] ;
4896: LD_ADDR_VAR 0 7
4900: PUSH
4901: EMPTY
4902: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_INT 4
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 4995
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4936: LD_INT 0
4938: PPUSH
4939: LD_EXP 38
4943: PUSH
4944: LD_INT 1
4946: PLUS
4947: PPUSH
4948: CALL_OW 381
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_VAR 0 4
4976: ADD
4977: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_INT 7
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// end ;
4993: GO 4933
4995: POP
4996: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 7
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5074
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 38
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: PPUSH
5042: CALL_OW 383
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// mechs := mechs ^ un ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_VAR 0 4
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 5027
5074: POP
5075: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 5
5087: PPUSH
5088: LD_INT 100
5090: PPUSH
5091: CALL 18297 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_INT 7
5107: PUSH
5108: LD_INT 6
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PUSH
5119: LD_OWVAR 67
5123: ARRAY
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5221
// begin vehicle := CreateVehicle ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: CALL_OW 45
5137: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5156: LD_ADDR_VAR 0 7
5160: PUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_VAR 0 7
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: DIFF
5175: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5188: LD_VAR 0 6
5192: PPUSH
5193: LD_INT 7
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// vehs := vehs ^ vehicle ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 6
5217: ADD
5218: ST_TO_ADDR
// end ;
5219: GO 5125
5221: POP
5222: POP
// end ; end_of_file
5223: LD_VAR 0 1
5227: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5228: LD_INT 0
5230: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5231: LD_ADDR_OWVAR 67
5235: PUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 426
5243: ST_TO_ADDR
// game_diff := Difficulty ;
5244: LD_ADDR_EXP 37
5248: PUSH
5249: LD_OWVAR 67
5253: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5254: LD_ADDR_EXP 38
5258: PUSH
5259: LD_INT 7
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 6
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 37
5277: ARRAY
5278: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5279: LD_ADDR_EXP 39
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: LD_INT 7
5289: PUSH
5290: LD_INT 8
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 37
5302: ARRAY
5303: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5304: LD_ADDR_EXP 41
5308: PUSH
5309: LD_INT 10500
5311: PUSH
5312: LD_INT 6300
5314: PUSH
5315: LD_INT 4200
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_EXP 37
5327: ARRAY
5328: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: LD_INT 73500
5336: PUSH
5337: LD_INT 94500
5339: PUSH
5340: LD_INT 115500
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_EXP 37
5352: ARRAY
5353: ST_TO_ADDR
// end ; end_of_file
5354: LD_VAR 0 1
5358: RET
// export function CustomEvent ( event ) ; begin
5359: LD_INT 0
5361: PPUSH
// end ;
5362: LD_VAR 0 2
5366: RET
// export function CustomInitMacro ( ) ; begin
5367: LD_INT 0
5369: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: CALL 79382 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL 79326 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 136
5395: PUSH
5396: LD_INT 130
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 145
5409: PUSH
5410: LD_INT 123
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 78385 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 43
5434: PUSH
5435: LD_INT 46
5437: PUSH
5438: LD_INT 45
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL 79214 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5450: LD_INT 1
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: CALL 78896 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: CALL 78627 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 8
5475: PPUSH
5476: CALL 78246 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 43
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 44
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 3
5527: PUSH
5528: LD_INT 45
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 24
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 43
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: LD_INT 43
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: LD_INT 46
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 43
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 44
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL 78061 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 0
5646: PUSH
5647: LD_INT 127
5649: PUSH
5650: LD_INT 125
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 124
5667: PUSH
5668: LD_INT 132
5670: PUSH
5671: LD_INT 0
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 29
5682: PUSH
5683: LD_INT 136
5685: PUSH
5686: LD_INT 130
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 4
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: LD_INT 114
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 145
5721: PUSH
5722: LD_INT 123
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 150
5739: PUSH
5740: LD_INT 135
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 140
5757: PUSH
5758: LD_INT 134
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 137
5775: PUSH
5776: LD_INT 121
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: LD_INT 155
5793: PUSH
5794: LD_INT 130
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: LD_INT 155
5811: PUSH
5812: LD_INT 130
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 130
5829: PUSH
5830: LD_INT 114
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 32
5844: PUSH
5845: LD_INT 142
5847: PUSH
5848: LD_INT 115
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 32
5862: PUSH
5863: LD_INT 153
5865: PUSH
5866: LD_INT 120
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL 77953 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5897: LD_INT 1
5899: PPUSH
5900: LD_INT 10
5902: PUSH
5903: LD_INT 12
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL 78803 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 155
5919: PPUSH
5920: LD_INT 130
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: LD_INT 24
5928: PUSH
5929: LD_INT 16
5931: PUSH
5932: LD_INT 17
5934: PUSH
5935: LD_INT 18
5937: PUSH
5938: LD_INT 21
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL 79008 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL 79382 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5962: LD_INT 2
5964: PPUSH
5965: LD_INT 4
5967: PPUSH
5968: CALL 79326 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 84
5977: PUSH
5978: LD_INT 125
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: PPUSH
5992: CALL 78385 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 43
6001: PUSH
6002: LD_INT 46
6004: PUSH
6005: LD_INT 45
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL 79214 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: CALL 78896 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL 78627 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL 78246 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_INT 43
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 44
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: LD_INT 45
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 43
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 43
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 24
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 46
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 43
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 44
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 78061 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 96
6216: PUSH
6217: LD_INT 125
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 74
6234: PUSH
6235: LD_INT 122
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 84
6252: PUSH
6253: LD_INT 125
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 28
6267: PUSH
6268: LD_INT 86
6270: PUSH
6271: LD_INT 128
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 28
6285: PUSH
6286: LD_INT 85
6288: PUSH
6289: LD_INT 130
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 88
6306: PUSH
6307: LD_INT 132
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 106
6324: PUSH
6325: LD_INT 130
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 99
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 72
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 78
6378: PUSH
6379: LD_INT 110
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 110
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 32
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL 77953 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 14
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL 78803 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 106
6467: PPUSH
6468: LD_INT 130
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: LD_INT 24
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 18
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 79008 0 5
// end ;
6500: LD_VAR 0 1
6504: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 30
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: IFFALSE 7389
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6546: LD_INT 6300
6548: PUSH
6549: LD_INT 4200
6551: PUSH
6552: LD_INT 2100
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: PPUSH
6566: CALL_OW 67
// base := 2 ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: NOT
6607: IFFALSE 6611
// continue ;
6609: GO 6546
// case Rand ( 1 , 3 ) of 1 :
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6806
6630: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 46
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 24
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 43
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 45
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 43
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 24
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 46
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL 78109 0 2
// end ; 2 :
6804: GO 7137
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6952
6814: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 43
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 46
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 24
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 43
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 46
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 45
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL 78109 0 2
// end ; 3 :
6950: GO 7137
6952: LD_INT 3
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7136
6960: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 43
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 24
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 46
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 43
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 46
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 45
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: LD_INT 43
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 46
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 3
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL 78109 0 2
// end ; end ;
7134: GO 7137
7136: POP
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7144: LD_VAR 0 2
7148: PPUSH
7149: CALL 78457 0 1
7153: PUSH
7154: LD_INT 0
7156: EQUAL
7157: IFFALSE 7137
// wait ( 0 0$30 ) ;
7159: LD_INT 1050
7161: PPUSH
7162: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 86
7173: PUSH
7174: LD_INT 77
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 63
7183: PUSH
7184: LD_INT 38
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_EXP 71
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PUSH
7258: LD_EXP 74
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: DIFF
7269: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7270: LD_ADDR_EXP 71
7274: PUSH
7275: LD_EXP 71
7279: PPUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_EXP 71
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 6
7300: DIFF
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// if not attackers then
7307: LD_VAR 0 6
7311: NOT
7312: IFFALSE 7316
// continue ;
7314: GO 6546
// repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_INT 60
7330: PUSH
7331: EMPTY
7332: LIST
7333: PPUSH
7334: CALL_OW 72
7338: NOT
7339: IFFALSE 7316
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL 78294 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7365: LD_EXP 52
7369: PUSH
7370: LD_VAR 0 2
7374: ARRAY
7375: PPUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 72
7386: NOT
7387: IFFALSE 6546
// end ;
7389: PPOPN 6
7391: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 8317
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7433: LD_INT 6300
7435: PUSH
7436: LD_INT 4200
7438: PUSH
7439: LD_INT 2100
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: LD_OWVAR 67
7451: ARRAY
7452: PPUSH
7453: CALL_OW 67
// base := 1 ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: NOT
7494: IFFALSE 7498
// continue ;
7496: GO 7433
// case Rand ( 1 , 3 ) of 1 :
7498: LD_INT 1
7500: PPUSH
7501: LD_INT 3
7503: PPUSH
7504: CALL_OW 12
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7693
7517: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 43
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 46
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 24
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 43
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 45
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 43
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 46
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 45
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL 78109 0 2
// end ; 2 :
7691: GO 8062
7693: LD_INT 2
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7877
7701: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_INT 46
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: LD_INT 46
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 45
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 45
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 45
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL 78109 0 2
// end ; 3 :
7875: GO 8062
7877: LD_INT 3
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8061
7885: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 43
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 46
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 22
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 43
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 45
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 43
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 45
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: CALL 78109 0 2
// end ; end ;
8059: GO 8062
8061: POP
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 79527 0 2
8081: PUSH
8082: LD_INT 8
8084: GREATEREQUAL
8085: IFFALSE 8062
// wait ( 0 0$30 ) ;
8087: LD_INT 1050
8089: PPUSH
8090: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8094: LD_ADDR_VAR 0 5
8098: PUSH
8099: LD_INT 144
8101: PUSH
8102: LD_INT 65
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 63
8111: PUSH
8112: LD_INT 38
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 0
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 71
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_EXP 74
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: DIFF
8197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8198: LD_ADDR_EXP 71
8202: PUSH
8203: LD_EXP 71
8207: PPUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_EXP 71
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 6
8228: DIFF
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// if not attackers then
8235: LD_VAR 0 6
8239: NOT
8240: IFFALSE 8244
// continue ;
8242: GO 7433
// repeat wait ( 0 0$1 ) ;
8244: LD_INT 35
8246: PPUSH
8247: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 60
8258: PUSH
8259: EMPTY
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: NOT
8267: IFFALSE 8244
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 6
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: LD_VAR 0 4
8288: PPUSH
8289: CALL 78294 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8293: LD_EXP 52
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 50
8306: PUSH
8307: EMPTY
8308: LIST
8309: PPUSH
8310: CALL_OW 72
8314: NOT
8315: IFFALSE 7433
// end ;
8317: PPOPN 6
8319: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8320: LD_EXP 3
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: LD_INT 0
8356: EQUAL
8357: AND
8358: IFFALSE 8371
8360: GO 8362
8362: DISABLE
// begin RussiansDefeated := true ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// end ;
8371: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8372: LD_EXP 3
8376: PUSH
8377: LD_EXP 5
8381: NOT
8382: AND
8383: IFFALSE 9356
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8402: LD_INT 10500
8404: PPUSH
8405: LD_INT 13650
8407: PPUSH
8408: CALL_OW 12
8412: PUSH
8413: LD_INT 9450
8415: PPUSH
8416: LD_INT 11550
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 8400
8426: PPUSH
8427: LD_INT 10500
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 67
// filter := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_INT 2
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 12
8472: PUSH
8473: LD_INT 3
8475: PPUSH
8476: LD_INT 4
8478: PPUSH
8479: CALL_OW 12
8483: PUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 12
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_OWVAR 67
8504: ARRAY
8505: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 3
8557: PPUSH
8558: CALL_OW 12
8562: PUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: CALL_OW 12
8573: PUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 5
8579: PPUSH
8580: CALL_OW 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: LD_OWVAR 67
8594: ARRAY
8595: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8596: LD_ADDR_VAR 0 8
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: ST_TO_ADDR
// uc_side := 3 ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
// uc_nation := nation_russian ;
8629: LD_ADDR_OWVAR 21
8633: PUSH
8634: LD_INT 3
8636: ST_TO_ADDR
// for i = 1 to soldiers do
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 4
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8695
// begin PrepareSoldier ( 0 , game_eskill ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_EXP 39
8662: PPUSH
8663: CALL_OW 381
// un := CreateHuman ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// filter := filter ^ un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8652
8695: POP
8696: POP
// for i = 1 to bazookas do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_VAR 0 5
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8763
// begin PrepareSoldier ( 0 , game_eskill ) ;
8715: LD_INT 0
8717: PPUSH
8718: LD_EXP 39
8722: PPUSH
8723: CALL_OW 381
// hc_class := class_bazooker ;
8727: LD_ADDR_OWVAR 28
8731: PUSH
8732: LD_INT 9
8734: ST_TO_ADDR
// un := CreateHuman ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// filter := filter ^ un ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8712
8763: POP
8764: POP
// for i = 1 to medics do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_VAR 0 8
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8823
// begin PrepareScientist ( 0 , game_eskill ) ;
8783: LD_INT 0
8785: PPUSH
8786: LD_EXP 39
8790: PPUSH
8791: CALL_OW 384
// un := CreateHuman ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: CALL_OW 44
8804: ST_TO_ADDR
// filter := filter ^ un ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_VAR 0 2
8819: ADD
8820: ST_TO_ADDR
// end ;
8821: GO 8780
8823: POP
8824: POP
// for i = 1 to vehs do
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_TO
8841: IFFALSE 9033
// begin case Rand ( 1 , 5 ) of 1 :
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 12
8853: PUSH
8854: LD_INT 1
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8884
8862: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8863: LD_INT 22
8865: PPUSH
8866: LD_INT 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 43
8874: PPUSH
8875: LD_INT 100
8877: PPUSH
8878: CALL 18297 0 5
8882: GO 9005
8884: LD_INT 2
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8914
8892: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8893: LD_INT 22
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: LD_INT 44
8904: PPUSH
8905: LD_INT 100
8907: PPUSH
8908: CALL 18297 0 5
8912: GO 9005
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8944
8922: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8923: LD_INT 22
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_INT 45
8934: PPUSH
8935: LD_INT 100
8937: PPUSH
8938: CALL 18297 0 5
8942: GO 9005
8944: LD_INT 4
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8974
8952: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8953: LD_INT 24
8955: PPUSH
8956: LD_INT 3
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: LD_INT 43
8964: PPUSH
8965: LD_INT 100
8967: PPUSH
8968: CALL 18297 0 5
8972: GO 9005
8974: LD_INT 5
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9004
8982: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: LD_INT 46
8994: PPUSH
8995: LD_INT 100
8997: PPUSH
8998: CALL 18297 0 5
9002: GO 9005
9004: POP
// vehicle := CreateVehicle ;
9005: LD_ADDR_VAR 0 7
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// filter := filter ^ vehicle ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 7
9029: ADD
9030: ST_TO_ADDR
// end ;
9031: GO 8840
9033: POP
9034: POP
// for i = 1 to filter do
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: DOUBLE
9041: LD_INT 1
9043: DEC
9044: ST_TO_ADDR
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9076
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 1
9062: ARRAY
9063: PPUSH
9064: LD_INT 14
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
9074: GO 9050
9076: POP
9077: POP
// case Rand ( 1 , 3 ) of 1 :
9078: LD_INT 1
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: CALL_OW 12
9088: PUSH
9089: LD_INT 1
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9151
9097: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9098: LD_ADDR_VAR 0 11
9102: PUSH
9103: LD_INT 165
9105: PUSH
9106: LD_INT 114
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 104
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 77
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 63
9135: PUSH
9136: LD_INT 38
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9276
9151: LD_INT 2
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9213
9159: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9160: LD_ADDR_VAR 0 11
9164: PUSH
9165: LD_INT 165
9167: PUSH
9168: LD_INT 114
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 146
9177: PUSH
9178: LD_INT 71
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 112
9187: PUSH
9188: LD_INT 41
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 63
9197: PUSH
9198: LD_INT 38
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
9211: GO 9276
9213: LD_INT 3
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9275
9221: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_INT 165
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 63
9239: PUSH
9240: LD_INT 99
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 77
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 63
9259: PUSH
9260: LD_INT 38
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9276
9275: POP
// attackers := filter ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9286: LD_ADDR_VAR 0 12
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: LD_VAR 0 11
9345: PPUSH
9346: LD_VAR 0 12
9350: PPUSH
9351: CALL 78294 0 4
// enable ;
9355: ENABLE
// end ;
9356: PPOPN 12
9358: END
// every 0 0$1 do var i , tmp ;
9359: GO 9361
9361: DISABLE
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
// begin enable ;
9366: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if tmp then
9408: LD_VAR 0 2
9412: IFFALSE 9458
// for i in tmp do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9456
// if GetFuel ( i ) < 3 then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 261
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9454
// SetFuel ( i , 3 ) ;
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 240
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: PPOPN 2
9460: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
9461: LD_INT 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: PUSH
9479: LD_EXP 40
9483: NOT
9484: AND
9485: PUSH
9486: LD_INT 10
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: PUSH
9504: LD_EXP 3
9508: NOT
9509: AND
9510: OR
9511: IFFALSE 9525
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
// begin Antirush ;
9521: CALL 9528 0 0
// end ;
9525: PPOPN 3
9527: END
// export function Antirush ; var i , veh , tmp , num ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// tmp := [ ] ;
9535: LD_ADDR_VAR 0 4
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// if not FirstAssaultRepelled then
9542: LD_EXP 3
9546: NOT
9547: IFFALSE 9559
// num := 18 else
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_INT 18
9556: ST_TO_ADDR
9557: GO 9567
// num := 12 ;
9559: LD_ADDR_VAR 0 5
9563: PUSH
9564: LD_INT 12
9566: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_OWVAR 67
9595: ARRAY
9596: MINUS
9597: ST_TO_ADDR
// for i := 1 to num do
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: DOUBLE
9604: LD_INT 1
9606: DEC
9607: ST_TO_ADDR
9608: LD_VAR 0 5
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9753
// begin uc_side := 3 ;
9616: LD_ADDR_OWVAR 20
9620: PUSH
9621: LD_INT 3
9623: ST_TO_ADDR
// uc_nation := 3 ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 3
9631: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9632: LD_INT 23
9634: PPUSH
9635: LD_INT 3
9637: PPUSH
9638: LD_INT 3
9640: PPUSH
9641: LD_INT 46
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_INT 2
9656: PPUSH
9657: CALL_OW 12
9661: ARRAY
9662: PPUSH
9663: LD_INT 100
9665: PPUSH
9666: CALL 18297 0 5
// veh := CreateVehicle ;
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: CALL_OW 45
9679: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 5
9687: PPUSH
9688: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 199
9699: PPUSH
9700: LD_INT 135
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: LD_INT 0
9708: PPUSH
9709: CALL_OW 50
// tmp := tmp ^ veh ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_VAR 0 4
9722: PUSH
9723: LD_VAR 0 3
9727: ADD
9728: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 173
9736: PPUSH
9737: LD_INT 118
9739: PPUSH
9740: CALL_OW 111
// wait ( 0 0$2 ) ;
9744: LD_INT 70
9746: PPUSH
9747: CALL_OW 67
// end ;
9751: GO 9613
9753: POP
9754: POP
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// for i in tmp do
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9840
// if IsDead ( i ) then
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 301
9784: IFFALSE 9804
// tmp := tmp diff i else
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: DIFF
9801: ST_TO_ADDR
9802: GO 9838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9804: LD_VAR 0 2
9808: PPUSH
9809: LD_INT 22
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PPUSH
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 74
9833: PPUSH
9834: CALL_OW 115
9838: GO 9772
9840: POP
9841: POP
// until not tmp ;
9842: LD_VAR 0 4
9846: NOT
9847: IFFALSE 9755
// end ; end_of_file
9849: LD_VAR 0 1
9853: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 8
9863: EQUAL
9864: IFFALSE 9880
// begin wait ( 0 0$1 ) ;
9866: LD_INT 35
9868: PPUSH
9869: CALL_OW 67
// YouLost ( Brighton ) ;
9873: LD_STRING Brighton
9875: PPUSH
9876: CALL_OW 104
// end ; if un = JMM then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_EXP 36
9889: EQUAL
9890: IFFALSE 9906
// begin wait ( 0 0$1 ) ;
9892: LD_INT 35
9894: PPUSH
9895: CALL_OW 67
// YouLost ( JMM ) ;
9899: LD_STRING JMM
9901: PPUSH
9902: CALL_OW 104
// end ; if un = Megan then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_EXP 10
9915: EQUAL
9916: IFFALSE 9930
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9918: LD_EXP 8
9922: PPUSH
9923: LD_STRING DBrighton-MeganDeath
9925: PPUSH
9926: CALL_OW 88
// end ; if un = Palmer then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_EXP 9
9939: EQUAL
9940: IFFALSE 9954
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9942: LD_EXP 8
9946: PPUSH
9947: LD_STRING DBrighton-PalmerDeath
9949: PPUSH
9950: CALL_OW 88
// end ; if un = Burlak then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_EXP 18
9963: EQUAL
9964: IFFALSE 9996
// begin if JMM_Arrived then
9966: LD_EXP 5
9970: IFFALSE 9984
// Say ( JMM , DJMM-BurlakDead ) ;
9972: LD_EXP 36
9976: PPUSH
9977: LD_STRING DJMM-BurlakDead
9979: PPUSH
9980: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9984: LD_EXP 9
9988: PPUSH
9989: LD_STRING DSol-BurlakDead
9991: PPUSH
9992: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9996: LD_VAR 0 1
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: OR
10014: IFFALSE 10030
// begin wait ( 0 0$1 ) ;
10016: LD_INT 35
10018: PPUSH
10019: CALL_OW 67
// YouLost ( Depot ) ;
10023: LD_STRING Depot
10025: PPUSH
10026: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10030: LD_VAR 0 1
10034: PPUSH
10035: CALL_OW 255
10039: PUSH
10040: LD_INT 1
10042: EQUAL
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 247
10053: PUSH
10054: LD_INT 1
10056: EQUAL
10057: AND
10058: IFFALSE 10074
// Losses := Losses + 1 ;
10060: LD_ADDR_EXP 43
10064: PUSH
10065: LD_EXP 43
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL 81501 0 1
// end ;
10083: PPOPN 1
10085: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10086: LD_VAR 0 1
10090: PUSH
10091: LD_EXP 12
10095: EQUAL
10096: IFFALSE 10110
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10098: LD_EXP 12
10102: PPUSH
10103: LD_STRING DDeath-Yas-3
10105: PPUSH
10106: CALL_OW 91
// if un = Popov then
10110: LD_VAR 0 1
10114: PUSH
10115: LD_EXP 13
10119: EQUAL
10120: IFFALSE 10134
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10122: LD_EXP 13
10126: PPUSH
10127: LD_STRING DDeath-Pop-3
10129: PPUSH
10130: CALL_OW 91
// if un = Gaydar then
10134: LD_VAR 0 1
10138: PUSH
10139: LD_EXP 14
10143: EQUAL
10144: IFFALSE 10158
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10146: LD_EXP 14
10150: PPUSH
10151: LD_STRING DDeath-Gay-3
10153: PPUSH
10154: CALL_OW 91
// if un = Sevi then
10158: LD_VAR 0 1
10162: PUSH
10163: LD_EXP 15
10167: EQUAL
10168: IFFALSE 10182
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10170: LD_EXP 15
10174: PPUSH
10175: LD_STRING DDeath-Vse-3
10177: PPUSH
10178: CALL_OW 91
// end ;
10182: PPOPN 1
10184: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 10
10192: EQUAL
10193: IFFALSE 10231
// begin Say ( Brighton , DBrighton-C1 ) ;
10195: LD_EXP 8
10199: PPUSH
10200: LD_STRING DBrighton-C1
10202: PPUSH
10203: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10207: LD_EXP 10
10211: PPUSH
10212: LD_STRING DMegan-C1
10214: PPUSH
10215: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10219: LD_EXP 8
10223: PPUSH
10224: LD_STRING DBrighton-C2
10226: PPUSH
10227: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10231: LD_VAR 0 1
10235: PPUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL 81197 0 2
// end ;
10245: PPOPN 2
10247: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL 83835 0 2
// end ;
10262: PPOPN 2
10264: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL 82903 0 1
// end ;
10274: PPOPN 1
10276: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10277: LD_VAR 0 1
10281: PPUSH
10282: CALL_OW 266
10286: PUSH
10287: LD_INT 0
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10367
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 274
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 10000
10322: PPUSH
10323: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 274
10336: PPUSH
10337: LD_INT 2
10339: PPUSH
10340: LD_INT 250
10342: PPUSH
10343: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 274
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: LD_INT 100
10362: PPUSH
10363: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL 83144 0 1
// end ;
10376: PPOPN 1
10378: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: LD_VAR 0 5
10403: PPUSH
10404: CALL 80817 0 5
// end ;
10408: PPOPN 5
10410: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL 80413 0 2
// end ;
10425: PPOPN 2
10427: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 80251 0 4
// end ;
10452: PPOPN 4
10454: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: CALL 80026 0 3
// end ;
10474: PPOPN 3
10476: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL 79911 0 2
// end ;
10491: PPOPN 2
10493: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_VAR 0 2
10503: PPUSH
10504: CALL 84096 0 2
// end ;
10508: PPOPN 2
10510: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: LD_INT 6
10523: EQUAL
10524: IFFALSE 10654
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10526: LD_VAR 0 1
10530: PUSH
10531: LD_EXP 12
10535: PUSH
10536: LD_EXP 15
10540: PUSH
10541: LD_EXP 14
10545: PUSH
10546: LD_EXP 13
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: IN
10557: IFFALSE 10561
// exit ;
10559: GO 10678
// if AssaultStarted then
10561: LD_EXP 7
10565: IFFALSE 10639
// case Rand ( 1 , 4 ) of 1 .. 3 :
10567: LD_INT 1
10569: PPUSH
10570: LD_INT 4
10572: PPUSH
10573: CALL_OW 12
10577: PUSH
10578: LD_INT 1
10580: DOUBLE
10581: GREATEREQUAL
10582: IFFALSE 10590
10584: LD_INT 3
10586: DOUBLE
10587: LESSEQUAL
10588: IFTRUE 10592
10590: GO 10610
10592: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_INT 67
10600: PPUSH
10601: LD_INT 37
10603: PPUSH
10604: CALL_OW 114
10608: GO 10637
10610: LD_INT 4
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10636
10618: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 120
10626: PPUSH
10627: LD_INT 131
10629: PPUSH
10630: CALL_OW 111
10634: GO 10637
10636: POP
10637: GO 10654
// ComMoveXY ( driver , 120 , 131 ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_INT 120
10646: PPUSH
10647: LD_INT 131
10649: PPUSH
10650: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: CALL 84312 0 4
// end ;
10678: PPOPN 4
10680: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL 79720 0 2
// end ;
10695: PPOPN 2
10697: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL 84551 0 1
// end ; end_of_file
10707: PPOPN 1
10709: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10710: LD_EXP 5
10714: PUSH
10715: LD_EXP 42
10719: AND
10720: IFFALSE 10891
10722: GO 10724
10724: DISABLE
// begin wait ( 0 0$2 ) ;
10725: LD_INT 70
10727: PPUSH
10728: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10732: LD_EXP 8
10736: PPUSH
10737: LD_STRING DBrighton-G1
10739: PPUSH
10740: CALL_OW 88
// if Losses < 1 then
10744: LD_EXP 43
10748: PUSH
10749: LD_INT 1
10751: LESS
10752: IFFALSE 10766
// AddMedal ( Losses , 1 ) else
10754: LD_STRING Losses
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 101
10764: GO 10799
// if Losses < 5 then
10766: LD_EXP 43
10770: PUSH
10771: LD_INT 5
10773: LESS
10774: IFFALSE 10788
// AddMedal ( Losses , 2 ) else
10776: LD_STRING Losses
10778: PPUSH
10779: LD_INT 2
10781: PPUSH
10782: CALL_OW 101
10786: GO 10799
// AddMedal ( Losses , - 1 ) ;
10788: LD_STRING Losses
10790: PPUSH
10791: LD_INT 1
10793: NEG
10794: PPUSH
10795: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10799: LD_EXP 6
10803: PUSH
10804: LD_INT 10
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 321
10814: PUSH
10815: LD_INT 2
10817: EQUAL
10818: AND
10819: IFFALSE 10833
// AddMedal ( Laser , 1 ) else
10821: LD_STRING Laser
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
10831: GO 10880
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10833: LD_EXP 6
10837: NOT
10838: PUSH
10839: LD_INT 10
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 321
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: AND
10854: IFFALSE 10869
// AddMedal ( Laser , - 1 ) else
10856: LD_STRING Laser
10858: PPUSH
10859: LD_INT 1
10861: NEG
10862: PPUSH
10863: CALL_OW 101
10867: GO 10880
// AddMedal ( Laser , - 2 ) ;
10869: LD_STRING Laser
10871: PPUSH
10872: LD_INT 2
10874: NEG
10875: PPUSH
10876: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10880: LD_STRING BaseMain
10882: PPUSH
10883: CALL_OW 102
// YouWin ;
10887: CALL_OW 103
// end ; end_of_file
10891: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// area = ListEnvironmentArea ( area ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_VAR 0 2
10905: PPUSH
10906: CALL_OW 353
10910: ST_TO_ADDR
// if bulldozer > 0 then
10911: LD_VAR 0 1
10915: PUSH
10916: LD_INT 0
10918: GREATER
10919: IFFALSE 11030
// for i = area downto 1 do
10921: LD_ADDR_VAR 0 4
10925: PUSH
10926: DOUBLE
10927: LD_VAR 0 2
10931: INC
10932: ST_TO_ADDR
10933: LD_INT 1
10935: PUSH
10936: FOR_DOWNTO
10937: IFFALSE 11028
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10939: LD_VAR 0 2
10943: PUSH
10944: LD_VAR 0 4
10948: ARRAY
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 2
10958: PUSH
10959: LD_VAR 0 4
10963: ARRAY
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: CALL_OW 351
10973: IFFALSE 11026
// if not HasTask ( bulldozer ) then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 314
10984: NOT
10985: IFFALSE 11026
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 4
11001: ARRAY
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PPUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_VAR 0 4
11016: ARRAY
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: CALL_OW 171
11026: GO 10936
11028: POP
11029: POP
// end ;
11030: LD_VAR 0 3
11034: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
11035: LD_INT 0
11037: PPUSH
11038: PPUSH
11039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_VAR 0 2
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 517
11057: ST_TO_ADDR
// for i = 1 to team do
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 1
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11175
// begin if IsInUnit ( team [ i ] ) then
11076: LD_VAR 0 1
11080: PUSH
11081: LD_VAR 0 4
11085: ARRAY
11086: PPUSH
11087: CALL_OW 310
11091: IFFALSE 11108
// ComExitBuilding ( team [ i ] ) ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_VAR 0 4
11102: ARRAY
11103: PPUSH
11104: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11108: LD_VAR 0 1
11112: PUSH
11113: LD_VAR 0 4
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 5
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PUSH
11128: LD_VAR 0 4
11132: ARRAY
11133: PPUSH
11134: LD_VAR 0 5
11138: PUSH
11139: LD_INT 2
11141: ARRAY
11142: PUSH
11143: LD_VAR 0 4
11147: ARRAY
11148: PPUSH
11149: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11153: LD_VAR 0 1
11157: PUSH
11158: LD_VAR 0 4
11162: ARRAY
11163: PPUSH
11164: LD_EXP 8
11168: PPUSH
11169: CALL_OW 179
// end ;
11173: GO 11073
11175: POP
11176: POP
// end ; end_of_file
11177: LD_VAR 0 3
11181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11182: LD_INT 0
11184: PPUSH
11185: PPUSH
// if exist_mode then
11186: LD_VAR 0 2
11190: IFFALSE 11215
// unit := CreateCharacter ( prefix & ident ) else
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 1
11206: STR
11207: PPUSH
11208: CALL_OW 34
11212: ST_TO_ADDR
11213: GO 11230
// unit := NewCharacter ( ident ) ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 25
11229: ST_TO_ADDR
// result := unit ;
11230: LD_ADDR_VAR 0 4
11234: PUSH
11235: LD_VAR 0 5
11239: ST_TO_ADDR
// end ;
11240: LD_VAR 0 4
11244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
// if not side or not nation then
11249: LD_VAR 0 1
11253: NOT
11254: PUSH
11255: LD_VAR 0 2
11259: NOT
11260: OR
11261: IFFALSE 11265
// exit ;
11263: GO 11909
// case nation of nation_american :
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11452
11278: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_INT 35
11286: PUSH
11287: LD_INT 45
11289: PUSH
11290: LD_INT 46
11292: PUSH
11293: LD_INT 47
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 6
11304: PUSH
11305: LD_INT 15
11307: PUSH
11308: LD_INT 16
11310: PUSH
11311: LD_INT 7
11313: PUSH
11314: LD_INT 12
11316: PUSH
11317: LD_INT 13
11319: PUSH
11320: LD_INT 10
11322: PUSH
11323: LD_INT 14
11325: PUSH
11326: LD_INT 20
11328: PUSH
11329: LD_INT 21
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 32
11340: PUSH
11341: LD_INT 27
11343: PUSH
11344: LD_INT 36
11346: PUSH
11347: LD_INT 69
11349: PUSH
11350: LD_INT 39
11352: PUSH
11353: LD_INT 34
11355: PUSH
11356: LD_INT 40
11358: PUSH
11359: LD_INT 48
11361: PUSH
11362: LD_INT 49
11364: PUSH
11365: LD_INT 50
11367: PUSH
11368: LD_INT 51
11370: PUSH
11371: LD_INT 52
11373: PUSH
11374: LD_INT 53
11376: PUSH
11377: LD_INT 54
11379: PUSH
11380: LD_INT 55
11382: PUSH
11383: LD_INT 56
11385: PUSH
11386: LD_INT 57
11388: PUSH
11389: LD_INT 58
11391: PUSH
11392: LD_INT 59
11394: PUSH
11395: LD_INT 60
11397: PUSH
11398: LD_INT 61
11400: PUSH
11401: LD_INT 62
11403: PUSH
11404: LD_INT 80
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: ST_TO_ADDR
11450: GO 11833
11452: LD_INT 2
11454: DOUBLE
11455: EQUAL
11456: IFTRUE 11460
11458: GO 11642
11460: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
11461: LD_ADDR_VAR 0 4
11465: PUSH
11466: LD_INT 35
11468: PUSH
11469: LD_INT 45
11471: PUSH
11472: LD_INT 46
11474: PUSH
11475: LD_INT 47
11477: PUSH
11478: LD_INT 70
11480: PUSH
11481: LD_INT 1
11483: PUSH
11484: LD_INT 11
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: LD_INT 4
11492: PUSH
11493: LD_INT 5
11495: PUSH
11496: LD_INT 6
11498: PUSH
11499: LD_INT 15
11501: PUSH
11502: LD_INT 18
11504: PUSH
11505: LD_INT 7
11507: PUSH
11508: LD_INT 17
11510: PUSH
11511: LD_INT 8
11513: PUSH
11514: LD_INT 20
11516: PUSH
11517: LD_INT 21
11519: PUSH
11520: LD_INT 22
11522: PUSH
11523: LD_INT 72
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 69
11531: PUSH
11532: LD_INT 39
11534: PUSH
11535: LD_INT 40
11537: PUSH
11538: LD_INT 41
11540: PUSH
11541: LD_INT 42
11543: PUSH
11544: LD_INT 43
11546: PUSH
11547: LD_INT 48
11549: PUSH
11550: LD_INT 49
11552: PUSH
11553: LD_INT 50
11555: PUSH
11556: LD_INT 51
11558: PUSH
11559: LD_INT 52
11561: PUSH
11562: LD_INT 53
11564: PUSH
11565: LD_INT 54
11567: PUSH
11568: LD_INT 55
11570: PUSH
11571: LD_INT 56
11573: PUSH
11574: LD_INT 60
11576: PUSH
11577: LD_INT 61
11579: PUSH
11580: LD_INT 62
11582: PUSH
11583: LD_INT 66
11585: PUSH
11586: LD_INT 67
11588: PUSH
11589: LD_INT 68
11591: PUSH
11592: LD_INT 81
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: ST_TO_ADDR
11640: GO 11833
11642: LD_INT 3
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11832
11650: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11651: LD_ADDR_VAR 0 4
11655: PUSH
11656: LD_INT 46
11658: PUSH
11659: LD_INT 47
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: LD_INT 11
11670: PUSH
11671: LD_INT 9
11673: PUSH
11674: LD_INT 20
11676: PUSH
11677: LD_INT 19
11679: PUSH
11680: LD_INT 21
11682: PUSH
11683: LD_INT 24
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 28
11694: PUSH
11695: LD_INT 29
11697: PUSH
11698: LD_INT 30
11700: PUSH
11701: LD_INT 31
11703: PUSH
11704: LD_INT 37
11706: PUSH
11707: LD_INT 38
11709: PUSH
11710: LD_INT 32
11712: PUSH
11713: LD_INT 27
11715: PUSH
11716: LD_INT 33
11718: PUSH
11719: LD_INT 69
11721: PUSH
11722: LD_INT 39
11724: PUSH
11725: LD_INT 34
11727: PUSH
11728: LD_INT 40
11730: PUSH
11731: LD_INT 71
11733: PUSH
11734: LD_INT 23
11736: PUSH
11737: LD_INT 44
11739: PUSH
11740: LD_INT 48
11742: PUSH
11743: LD_INT 49
11745: PUSH
11746: LD_INT 50
11748: PUSH
11749: LD_INT 51
11751: PUSH
11752: LD_INT 52
11754: PUSH
11755: LD_INT 53
11757: PUSH
11758: LD_INT 54
11760: PUSH
11761: LD_INT 55
11763: PUSH
11764: LD_INT 56
11766: PUSH
11767: LD_INT 57
11769: PUSH
11770: LD_INT 58
11772: PUSH
11773: LD_INT 59
11775: PUSH
11776: LD_INT 63
11778: PUSH
11779: LD_INT 64
11781: PUSH
11782: LD_INT 65
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 11833
11832: POP
// if state > - 1 and state < 3 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 1
11840: NEG
11841: GREATER
11842: PUSH
11843: LD_VAR 0 3
11847: PUSH
11848: LD_INT 3
11850: LESS
11851: AND
11852: IFFALSE 11909
// for i in result do
11854: LD_ADDR_VAR 0 5
11858: PUSH
11859: LD_VAR 0 4
11863: PUSH
11864: FOR_IN
11865: IFFALSE 11907
// if GetTech ( i , side ) <> state then
11867: LD_VAR 0 5
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: CALL_OW 321
11881: PUSH
11882: LD_VAR 0 3
11886: NONEQUAL
11887: IFFALSE 11905
// result := result diff i ;
11889: LD_ADDR_VAR 0 4
11893: PUSH
11894: LD_VAR 0 4
11898: PUSH
11899: LD_VAR 0 5
11903: DIFF
11904: ST_TO_ADDR
11905: GO 11864
11907: POP
11908: POP
// end ;
11909: LD_VAR 0 4
11913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
11918: PPUSH
// result := true ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11927: LD_ADDR_VAR 0 5
11931: PUSH
11932: LD_VAR 0 2
11936: PPUSH
11937: CALL_OW 480
11941: ST_TO_ADDR
// if not tmp then
11942: LD_VAR 0 5
11946: NOT
11947: IFFALSE 11951
// exit ;
11949: GO 12000
// for i in tmp do
11951: LD_ADDR_VAR 0 4
11955: PUSH
11956: LD_VAR 0 5
11960: PUSH
11961: FOR_IN
11962: IFFALSE 11998
// if GetTech ( i , side ) <> state_researched then
11964: LD_VAR 0 4
11968: PPUSH
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 321
11978: PUSH
11979: LD_INT 2
11981: NONEQUAL
11982: IFFALSE 11996
// begin result := false ;
11984: LD_ADDR_VAR 0 3
11988: PUSH
11989: LD_INT 0
11991: ST_TO_ADDR
// exit ;
11992: POP
11993: POP
11994: GO 12000
// end ;
11996: GO 11961
11998: POP
11999: POP
// end ;
12000: LD_VAR 0 3
12004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12005: LD_INT 0
12007: PPUSH
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
12016: PPUSH
12017: PPUSH
12018: PPUSH
12019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12020: LD_VAR 0 1
12024: NOT
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 257
12035: PUSH
12036: LD_INT 9
12038: NONEQUAL
12039: OR
12040: IFFALSE 12044
// exit ;
12042: GO 12617
// side := GetSide ( unit ) ;
12044: LD_ADDR_VAR 0 9
12048: PUSH
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 255
12058: ST_TO_ADDR
// tech_space := tech_spacanom ;
12059: LD_ADDR_VAR 0 12
12063: PUSH
12064: LD_INT 29
12066: ST_TO_ADDR
// tech_time := tech_taurad ;
12067: LD_ADDR_VAR 0 13
12071: PUSH
12072: LD_INT 28
12074: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12075: LD_ADDR_VAR 0 11
12079: PUSH
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 310
12089: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12090: LD_VAR 0 11
12094: PPUSH
12095: CALL_OW 247
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: IFFALSE 12107
// exit ;
12105: GO 12617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12107: LD_ADDR_VAR 0 8
12111: PUSH
12112: LD_INT 81
12114: PUSH
12115: LD_VAR 0 9
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// if not tmp then
12150: LD_VAR 0 8
12154: NOT
12155: IFFALSE 12159
// exit ;
12157: GO 12617
// if in_unit then
12159: LD_VAR 0 11
12163: IFFALSE 12187
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12165: LD_ADDR_VAR 0 10
12169: PUSH
12170: LD_VAR 0 8
12174: PPUSH
12175: LD_VAR 0 11
12179: PPUSH
12180: CALL_OW 74
12184: ST_TO_ADDR
12185: GO 12207
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12187: LD_ADDR_VAR 0 10
12191: PUSH
12192: LD_VAR 0 8
12196: PPUSH
12197: LD_VAR 0 1
12201: PPUSH
12202: CALL_OW 74
12206: ST_TO_ADDR
// if not enemy then
12207: LD_VAR 0 10
12211: NOT
12212: IFFALSE 12216
// exit ;
12214: GO 12617
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12216: LD_VAR 0 11
12220: PUSH
12221: LD_VAR 0 11
12225: PPUSH
12226: LD_VAR 0 10
12230: PPUSH
12231: CALL_OW 296
12235: PUSH
12236: LD_INT 13
12238: GREATER
12239: AND
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: LD_VAR 0 10
12250: PPUSH
12251: CALL_OW 296
12255: PUSH
12256: LD_INT 12
12258: GREATER
12259: OR
12260: IFFALSE 12264
// exit ;
12262: GO 12617
// missile := [ 1 ] ;
12264: LD_ADDR_VAR 0 14
12268: PUSH
12269: LD_INT 1
12271: PUSH
12272: EMPTY
12273: LIST
12274: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12275: LD_VAR 0 9
12279: PPUSH
12280: LD_VAR 0 12
12284: PPUSH
12285: CALL_OW 325
12289: IFFALSE 12318
// missile := Insert ( missile , missile + 1 , 2 ) ;
12291: LD_ADDR_VAR 0 14
12295: PUSH
12296: LD_VAR 0 14
12300: PPUSH
12301: LD_VAR 0 14
12305: PUSH
12306: LD_INT 1
12308: PLUS
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 2
12317: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12318: LD_VAR 0 9
12322: PPUSH
12323: LD_VAR 0 13
12327: PPUSH
12328: CALL_OW 325
12332: PUSH
12333: LD_VAR 0 10
12337: PPUSH
12338: CALL_OW 255
12342: PPUSH
12343: LD_VAR 0 13
12347: PPUSH
12348: CALL_OW 325
12352: NOT
12353: AND
12354: IFFALSE 12383
// missile := Insert ( missile , missile + 1 , 3 ) ;
12356: LD_ADDR_VAR 0 14
12360: PUSH
12361: LD_VAR 0 14
12365: PPUSH
12366: LD_VAR 0 14
12370: PUSH
12371: LD_INT 1
12373: PLUS
12374: PPUSH
12375: LD_INT 3
12377: PPUSH
12378: CALL_OW 2
12382: ST_TO_ADDR
// if missile < 2 then
12383: LD_VAR 0 14
12387: PUSH
12388: LD_INT 2
12390: LESS
12391: IFFALSE 12395
// exit ;
12393: GO 12617
// x := GetX ( enemy ) ;
12395: LD_ADDR_VAR 0 4
12399: PUSH
12400: LD_VAR 0 10
12404: PPUSH
12405: CALL_OW 250
12409: ST_TO_ADDR
// y := GetY ( enemy ) ;
12410: LD_ADDR_VAR 0 5
12414: PUSH
12415: LD_VAR 0 10
12419: PPUSH
12420: CALL_OW 251
12424: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12425: LD_ADDR_VAR 0 6
12429: PUSH
12430: LD_VAR 0 4
12434: PUSH
12435: LD_INT 1
12437: NEG
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 12
12446: PLUS
12447: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12448: LD_ADDR_VAR 0 7
12452: PUSH
12453: LD_VAR 0 5
12457: PUSH
12458: LD_INT 1
12460: NEG
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 12
12469: PLUS
12470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12471: LD_VAR 0 6
12475: PPUSH
12476: LD_VAR 0 7
12480: PPUSH
12481: CALL_OW 488
12485: NOT
12486: IFFALSE 12508
// begin _x := x ;
12488: LD_ADDR_VAR 0 6
12492: PUSH
12493: LD_VAR 0 4
12497: ST_TO_ADDR
// _y := y ;
12498: LD_ADDR_VAR 0 7
12502: PUSH
12503: LD_VAR 0 5
12507: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12508: LD_ADDR_VAR 0 3
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 14
12520: PPUSH
12521: CALL_OW 12
12525: ST_TO_ADDR
// case i of 1 :
12526: LD_VAR 0 3
12530: PUSH
12531: LD_INT 1
12533: DOUBLE
12534: EQUAL
12535: IFTRUE 12539
12537: GO 12556
12539: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12540: LD_VAR 0 1
12544: PPUSH
12545: LD_VAR 0 10
12549: PPUSH
12550: CALL_OW 115
12554: GO 12617
12556: LD_INT 2
12558: DOUBLE
12559: EQUAL
12560: IFTRUE 12564
12562: GO 12586
12564: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12565: LD_VAR 0 1
12569: PPUSH
12570: LD_VAR 0 6
12574: PPUSH
12575: LD_VAR 0 7
12579: PPUSH
12580: CALL_OW 153
12584: GO 12617
12586: LD_INT 3
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12616
12594: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12595: LD_VAR 0 1
12599: PPUSH
12600: LD_VAR 0 6
12604: PPUSH
12605: LD_VAR 0 7
12609: PPUSH
12610: CALL_OW 154
12614: GO 12617
12616: POP
// end ;
12617: LD_VAR 0 2
12621: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
// if not unit or not building then
12630: LD_VAR 0 1
12634: NOT
12635: PUSH
12636: LD_VAR 0 2
12640: NOT
12641: OR
12642: IFFALSE 12646
// exit ;
12644: GO 12804
// x := GetX ( building ) ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_VAR 0 2
12655: PPUSH
12656: CALL_OW 250
12660: ST_TO_ADDR
// y := GetY ( building ) ;
12661: LD_ADDR_VAR 0 6
12665: PUSH
12666: LD_VAR 0 2
12670: PPUSH
12671: CALL_OW 251
12675: ST_TO_ADDR
// for i = 0 to 5 do
12676: LD_ADDR_VAR 0 4
12680: PUSH
12681: DOUBLE
12682: LD_INT 0
12684: DEC
12685: ST_TO_ADDR
12686: LD_INT 5
12688: PUSH
12689: FOR_TO
12690: IFFALSE 12802
// begin _x := ShiftX ( x , i , 3 ) ;
12692: LD_ADDR_VAR 0 7
12696: PUSH
12697: LD_VAR 0 5
12701: PPUSH
12702: LD_VAR 0 4
12706: PPUSH
12707: LD_INT 3
12709: PPUSH
12710: CALL_OW 272
12714: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12715: LD_ADDR_VAR 0 8
12719: PUSH
12720: LD_VAR 0 6
12724: PPUSH
12725: LD_VAR 0 4
12729: PPUSH
12730: LD_INT 3
12732: PPUSH
12733: CALL_OW 273
12737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12738: LD_VAR 0 7
12742: PPUSH
12743: LD_VAR 0 8
12747: PPUSH
12748: CALL_OW 488
12752: NOT
12753: IFFALSE 12757
// continue ;
12755: GO 12689
// if HexInfo ( _x , _y ) = 0 then
12757: LD_VAR 0 7
12761: PPUSH
12762: LD_VAR 0 8
12766: PPUSH
12767: CALL_OW 428
12771: PUSH
12772: LD_INT 0
12774: EQUAL
12775: IFFALSE 12800
// begin ComMoveXY ( unit , _x , _y ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: LD_VAR 0 7
12786: PPUSH
12787: LD_VAR 0 8
12791: PPUSH
12792: CALL_OW 111
// exit ;
12796: POP
12797: POP
12798: GO 12804
// end ; end ;
12800: GO 12689
12802: POP
12803: POP
// end ;
12804: LD_VAR 0 3
12808: RET
// export function ScanBase ( side , base_area ) ; begin
12809: LD_INT 0
12811: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_INT 81
12824: PUSH
12825: LD_VAR 0 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 70
12838: ST_TO_ADDR
// end ;
12839: LD_VAR 0 3
12843: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12844: LD_INT 0
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12851: LD_VAR 0 1
12855: NOT
12856: PUSH
12857: LD_EXP 52
12861: PUSH
12862: LD_VAR 0 1
12866: ARRAY
12867: NOT
12868: OR
12869: PUSH
12870: LD_VAR 0 2
12874: NOT
12875: OR
12876: PUSH
12877: LD_VAR 0 3
12881: NOT
12882: OR
12883: IFFALSE 12887
// exit ;
12885: GO 13400
// side := mc_sides [ base ] ;
12887: LD_ADDR_VAR 0 6
12891: PUSH
12892: LD_EXP 78
12896: PUSH
12897: LD_VAR 0 1
12901: ARRAY
12902: ST_TO_ADDR
// if not side then
12903: LD_VAR 0 6
12907: NOT
12908: IFFALSE 12912
// exit ;
12910: GO 13400
// for i in solds do
12912: LD_ADDR_VAR 0 7
12916: PUSH
12917: LD_VAR 0 2
12921: PUSH
12922: FOR_IN
12923: IFFALSE 12984
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12925: LD_VAR 0 7
12929: PPUSH
12930: CALL_OW 310
12934: PPUSH
12935: CALL_OW 266
12939: PUSH
12940: LD_INT 32
12942: PUSH
12943: LD_INT 31
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: IN
12950: IFFALSE 12970
// solds := solds diff i else
12952: LD_ADDR_VAR 0 2
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_VAR 0 7
12966: DIFF
12967: ST_TO_ADDR
12968: GO 12982
// SetTag ( i , 18 ) ;
12970: LD_VAR 0 7
12974: PPUSH
12975: LD_INT 18
12977: PPUSH
12978: CALL_OW 109
12982: GO 12922
12984: POP
12985: POP
// if not solds then
12986: LD_VAR 0 2
12990: NOT
12991: IFFALSE 12995
// exit ;
12993: GO 13400
// repeat wait ( 0 0$1 ) ;
12995: LD_INT 35
12997: PPUSH
12998: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: LD_VAR 0 6
13011: PPUSH
13012: LD_VAR 0 3
13016: PPUSH
13017: CALL 12809 0 2
13021: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13022: LD_EXP 52
13026: PUSH
13027: LD_VAR 0 1
13031: ARRAY
13032: NOT
13033: PUSH
13034: LD_EXP 52
13038: PUSH
13039: LD_VAR 0 1
13043: ARRAY
13044: PUSH
13045: EMPTY
13046: EQUAL
13047: OR
13048: IFFALSE 13085
// begin for i in solds do
13050: LD_ADDR_VAR 0 7
13054: PUSH
13055: LD_VAR 0 2
13059: PUSH
13060: FOR_IN
13061: IFFALSE 13074
// ComStop ( i ) ;
13063: LD_VAR 0 7
13067: PPUSH
13068: CALL_OW 141
13072: GO 13060
13074: POP
13075: POP
// solds := [ ] ;
13076: LD_ADDR_VAR 0 2
13080: PUSH
13081: EMPTY
13082: ST_TO_ADDR
// exit ;
13083: GO 13400
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
13085: LD_VAR 0 5
13089: NOT
13090: PUSH
13091: LD_VAR 0 5
13095: PUSH
13096: LD_INT 3
13098: GREATER
13099: OR
13100: PUSH
13101: LD_EXP 74
13105: PUSH
13106: LD_VAR 0 1
13110: ARRAY
13111: OR
13112: IFFALSE 13153
// begin for i in solds do
13114: LD_ADDR_VAR 0 7
13118: PUSH
13119: LD_VAR 0 2
13123: PUSH
13124: FOR_IN
13125: IFFALSE 13149
// if HasTask ( i ) then
13127: LD_VAR 0 7
13131: PPUSH
13132: CALL_OW 314
13136: IFFALSE 13147
// ComStop ( i ) ;
13138: LD_VAR 0 7
13142: PPUSH
13143: CALL_OW 141
13147: GO 13124
13149: POP
13150: POP
// break ;
13151: GO 13388
// end ; for i in solds do
13153: LD_ADDR_VAR 0 7
13157: PUSH
13158: LD_VAR 0 2
13162: PUSH
13163: FOR_IN
13164: IFFALSE 13380
// begin if IsInUnit ( i ) then
13166: LD_VAR 0 7
13170: PPUSH
13171: CALL_OW 310
13175: IFFALSE 13186
// ComExitBuilding ( i ) ;
13177: LD_VAR 0 7
13181: PPUSH
13182: CALL_OW 122
// if GetLives ( i ) > 333 then
13186: LD_VAR 0 7
13190: PPUSH
13191: CALL_OW 256
13195: PUSH
13196: LD_INT 333
13198: GREATER
13199: IFFALSE 13227
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13201: LD_VAR 0 7
13205: PPUSH
13206: LD_VAR 0 5
13210: PPUSH
13211: LD_VAR 0 7
13215: PPUSH
13216: CALL_OW 74
13220: PPUSH
13221: CALL_OW 115
13225: GO 13378
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
13227: LD_ADDR_VAR 0 8
13231: PUSH
13232: LD_EXP 52
13236: PUSH
13237: LD_VAR 0 1
13241: ARRAY
13242: PPUSH
13243: LD_INT 2
13245: PUSH
13246: LD_INT 30
13248: PUSH
13249: LD_INT 0
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 72
13286: PPUSH
13287: LD_VAR 0 7
13291: PPUSH
13292: CALL_OW 74
13296: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
13297: LD_VAR 0 7
13301: PPUSH
13302: LD_VAR 0 8
13306: PPUSH
13307: CALL_OW 250
13311: PPUSH
13312: LD_INT 3
13314: PPUSH
13315: LD_INT 5
13317: PPUSH
13318: CALL_OW 272
13322: PPUSH
13323: LD_VAR 0 8
13327: PPUSH
13328: CALL_OW 251
13332: PPUSH
13333: LD_INT 3
13335: PPUSH
13336: LD_INT 5
13338: PPUSH
13339: CALL_OW 273
13343: PPUSH
13344: CALL_OW 111
// SetTag ( i , 0 ) ;
13348: LD_VAR 0 7
13352: PPUSH
13353: LD_INT 0
13355: PPUSH
13356: CALL_OW 109
// solds := solds diff i ;
13360: LD_ADDR_VAR 0 2
13364: PUSH
13365: LD_VAR 0 2
13369: PUSH
13370: LD_VAR 0 7
13374: DIFF
13375: ST_TO_ADDR
// continue ;
13376: GO 13163
// end ; end ;
13378: GO 13163
13380: POP
13381: POP
// until solds ;
13382: LD_VAR 0 2
13386: IFFALSE 12995
// MC_Reset ( base , 18 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_INT 18
13395: PPUSH
13396: CALL 58492 0 2
// end ;
13400: LD_VAR 0 4
13404: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13405: LD_INT 0
13407: PPUSH
13408: PPUSH
13409: PPUSH
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
13423: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13424: LD_ADDR_VAR 0 13
13428: PUSH
13429: LD_EXP 52
13433: PUSH
13434: LD_VAR 0 1
13438: ARRAY
13439: PPUSH
13440: LD_INT 25
13442: PUSH
13443: LD_INT 3
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PPUSH
13450: CALL_OW 72
13454: ST_TO_ADDR
// if mc_remote_driver [ base ] then
13455: LD_EXP 92
13459: PUSH
13460: LD_VAR 0 1
13464: ARRAY
13465: IFFALSE 13489
// mechs := mechs diff mc_remote_driver [ base ] ;
13467: LD_ADDR_VAR 0 13
13471: PUSH
13472: LD_VAR 0 13
13476: PUSH
13477: LD_EXP 92
13481: PUSH
13482: LD_VAR 0 1
13486: ARRAY
13487: DIFF
13488: ST_TO_ADDR
// for i in mechs do
13489: LD_ADDR_VAR 0 5
13493: PUSH
13494: LD_VAR 0 13
13498: PUSH
13499: FOR_IN
13500: IFFALSE 13535
// if GetTag ( i ) > 0 then
13502: LD_VAR 0 5
13506: PPUSH
13507: CALL_OW 110
13511: PUSH
13512: LD_INT 0
13514: GREATER
13515: IFFALSE 13533
// mechs := mechs diff i ;
13517: LD_ADDR_VAR 0 13
13521: PUSH
13522: LD_VAR 0 13
13526: PUSH
13527: LD_VAR 0 5
13531: DIFF
13532: ST_TO_ADDR
13533: GO 13499
13535: POP
13536: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13537: LD_ADDR_VAR 0 9
13541: PUSH
13542: LD_EXP 52
13546: PUSH
13547: LD_VAR 0 1
13551: ARRAY
13552: PPUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 25
13558: PUSH
13559: LD_INT 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 25
13568: PUSH
13569: LD_INT 5
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 25
13578: PUSH
13579: LD_INT 8
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 25
13588: PUSH
13589: LD_INT 9
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 72
13607: ST_TO_ADDR
// if not defenders and not solds then
13608: LD_VAR 0 2
13612: NOT
13613: PUSH
13614: LD_VAR 0 9
13618: NOT
13619: AND
13620: IFFALSE 13624
// exit ;
13622: GO 15250
// depot_under_attack := false ;
13624: LD_ADDR_VAR 0 17
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// sold_defenders := [ ] ;
13632: LD_ADDR_VAR 0 18
13636: PUSH
13637: EMPTY
13638: ST_TO_ADDR
// if mechs then
13639: LD_VAR 0 13
13643: IFFALSE 13772
// for i in defenders do
13645: LD_ADDR_VAR 0 5
13649: PUSH
13650: LD_VAR 0 2
13654: PUSH
13655: FOR_IN
13656: IFFALSE 13770
// begin SetTag ( i , 20 ) ;
13658: LD_VAR 0 5
13662: PPUSH
13663: LD_INT 20
13665: PPUSH
13666: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13670: LD_VAR 0 5
13674: PPUSH
13675: CALL_OW 263
13679: PUSH
13680: LD_INT 1
13682: EQUAL
13683: PUSH
13684: LD_VAR 0 5
13688: PPUSH
13689: CALL_OW 311
13693: NOT
13694: AND
13695: PUSH
13696: LD_VAR 0 13
13700: AND
13701: IFFALSE 13768
// begin un := mechs [ 1 ] ;
13703: LD_ADDR_VAR 0 11
13707: PUSH
13708: LD_VAR 0 13
13712: PUSH
13713: LD_INT 1
13715: ARRAY
13716: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13717: LD_VAR 0 11
13721: PPUSH
13722: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13726: LD_VAR 0 11
13730: PPUSH
13731: LD_VAR 0 5
13735: PPUSH
13736: CALL_OW 180
// SetTag ( un , 19 ) ;
13740: LD_VAR 0 11
13744: PPUSH
13745: LD_INT 19
13747: PPUSH
13748: CALL_OW 109
// mechs := mechs diff un ;
13752: LD_ADDR_VAR 0 13
13756: PUSH
13757: LD_VAR 0 13
13761: PUSH
13762: LD_VAR 0 11
13766: DIFF
13767: ST_TO_ADDR
// end ; end ;
13768: GO 13655
13770: POP
13771: POP
// if solds then
13772: LD_VAR 0 9
13776: IFFALSE 13835
// for i in solds do
13778: LD_ADDR_VAR 0 5
13782: PUSH
13783: LD_VAR 0 9
13787: PUSH
13788: FOR_IN
13789: IFFALSE 13833
// if not GetTag ( i ) then
13791: LD_VAR 0 5
13795: PPUSH
13796: CALL_OW 110
13800: NOT
13801: IFFALSE 13831
// begin defenders := defenders union i ;
13803: LD_ADDR_VAR 0 2
13807: PUSH
13808: LD_VAR 0 2
13812: PUSH
13813: LD_VAR 0 5
13817: UNION
13818: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13819: LD_VAR 0 5
13823: PPUSH
13824: LD_INT 18
13826: PPUSH
13827: CALL_OW 109
// end ;
13831: GO 13788
13833: POP
13834: POP
// repeat wait ( 0 0$1 ) ;
13835: LD_INT 35
13837: PPUSH
13838: CALL_OW 67
// enemy := mc_scan [ base ] ;
13842: LD_ADDR_VAR 0 3
13846: PUSH
13847: LD_EXP 75
13851: PUSH
13852: LD_VAR 0 1
13856: ARRAY
13857: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13858: LD_EXP 52
13862: PUSH
13863: LD_VAR 0 1
13867: ARRAY
13868: NOT
13869: PUSH
13870: LD_EXP 52
13874: PUSH
13875: LD_VAR 0 1
13879: ARRAY
13880: PUSH
13881: EMPTY
13882: EQUAL
13883: OR
13884: IFFALSE 13921
// begin for i in defenders do
13886: LD_ADDR_VAR 0 5
13890: PUSH
13891: LD_VAR 0 2
13895: PUSH
13896: FOR_IN
13897: IFFALSE 13910
// ComStop ( i ) ;
13899: LD_VAR 0 5
13903: PPUSH
13904: CALL_OW 141
13908: GO 13896
13910: POP
13911: POP
// defenders := [ ] ;
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: EMPTY
13918: ST_TO_ADDR
// exit ;
13919: GO 15250
// end ; for i in defenders do
13921: LD_ADDR_VAR 0 5
13925: PUSH
13926: LD_VAR 0 2
13930: PUSH
13931: FOR_IN
13932: IFFALSE 14750
// begin e := NearestUnitToUnit ( enemy , i ) ;
13934: LD_ADDR_VAR 0 14
13938: PUSH
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_VAR 0 5
13948: PPUSH
13949: CALL_OW 74
13953: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
13954: LD_ADDR_VAR 0 8
13958: PUSH
13959: LD_EXP 52
13963: PUSH
13964: LD_VAR 0 1
13968: ARRAY
13969: PPUSH
13970: LD_INT 2
13972: PUSH
13973: LD_INT 30
13975: PUSH
13976: LD_INT 0
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 72
14002: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
14003: LD_ADDR_VAR 0 17
14007: PUSH
14008: LD_VAR 0 8
14012: NOT
14013: PUSH
14014: LD_VAR 0 8
14018: PPUSH
14019: LD_INT 3
14021: PUSH
14022: LD_INT 24
14024: PUSH
14025: LD_INT 600
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PPUSH
14036: CALL_OW 72
14040: OR
14041: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
14042: LD_VAR 0 5
14046: PPUSH
14047: CALL_OW 247
14051: PUSH
14052: LD_INT 2
14054: DOUBLE
14055: EQUAL
14056: IFTRUE 14060
14058: GO 14456
14060: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
14061: LD_VAR 0 5
14065: PPUSH
14066: CALL_OW 256
14070: PUSH
14071: LD_INT 650
14073: GREATER
14074: PUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: LD_VAR 0 14
14084: PPUSH
14085: CALL_OW 296
14089: PUSH
14090: LD_INT 40
14092: LESS
14093: PUSH
14094: LD_VAR 0 14
14098: PPUSH
14099: LD_EXP 77
14103: PUSH
14104: LD_VAR 0 1
14108: ARRAY
14109: PPUSH
14110: CALL_OW 308
14114: OR
14115: AND
14116: IFFALSE 14238
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
14118: LD_VAR 0 5
14122: PPUSH
14123: CALL_OW 262
14127: PUSH
14128: LD_INT 1
14130: EQUAL
14131: PUSH
14132: LD_VAR 0 5
14136: PPUSH
14137: CALL_OW 261
14141: PUSH
14142: LD_INT 30
14144: LESS
14145: AND
14146: PUSH
14147: LD_VAR 0 8
14151: AND
14152: IFFALSE 14222
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
14154: LD_VAR 0 5
14158: PPUSH
14159: LD_VAR 0 8
14163: PPUSH
14164: LD_VAR 0 5
14168: PPUSH
14169: CALL_OW 74
14173: PPUSH
14174: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
14178: LD_VAR 0 5
14182: PPUSH
14183: LD_VAR 0 8
14187: PPUSH
14188: LD_VAR 0 5
14192: PPUSH
14193: CALL_OW 74
14197: PPUSH
14198: CALL_OW 296
14202: PUSH
14203: LD_INT 6
14205: LESS
14206: IFFALSE 14220
// SetFuel ( i , 100 ) ;
14208: LD_VAR 0 5
14212: PPUSH
14213: LD_INT 100
14215: PPUSH
14216: CALL_OW 240
// end else
14220: GO 14236
// ComAttackUnit ( i , e ) ;
14222: LD_VAR 0 5
14226: PPUSH
14227: LD_VAR 0 14
14231: PPUSH
14232: CALL_OW 115
// end else
14236: GO 14339
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14238: LD_VAR 0 14
14242: PPUSH
14243: LD_EXP 77
14247: PUSH
14248: LD_VAR 0 1
14252: ARRAY
14253: PPUSH
14254: CALL_OW 308
14258: NOT
14259: PUSH
14260: LD_VAR 0 5
14264: PPUSH
14265: LD_VAR 0 14
14269: PPUSH
14270: CALL_OW 296
14274: PUSH
14275: LD_INT 40
14277: GREATEREQUAL
14278: AND
14279: PUSH
14280: LD_VAR 0 5
14284: PPUSH
14285: CALL_OW 256
14289: PUSH
14290: LD_INT 650
14292: LESSEQUAL
14293: OR
14294: PUSH
14295: LD_VAR 0 5
14299: PPUSH
14300: LD_EXP 76
14304: PUSH
14305: LD_VAR 0 1
14309: ARRAY
14310: PPUSH
14311: CALL_OW 308
14315: NOT
14316: AND
14317: IFFALSE 14339
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14319: LD_VAR 0 5
14323: PPUSH
14324: LD_EXP 76
14328: PUSH
14329: LD_VAR 0 1
14333: ARRAY
14334: PPUSH
14335: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14339: LD_VAR 0 5
14343: PPUSH
14344: CALL_OW 256
14348: PUSH
14349: LD_INT 998
14351: LESS
14352: PUSH
14353: LD_VAR 0 5
14357: PPUSH
14358: CALL_OW 263
14362: PUSH
14363: LD_INT 1
14365: EQUAL
14366: AND
14367: PUSH
14368: LD_VAR 0 5
14372: PPUSH
14373: CALL_OW 311
14377: AND
14378: PUSH
14379: LD_VAR 0 5
14383: PPUSH
14384: LD_EXP 76
14388: PUSH
14389: LD_VAR 0 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 308
14399: AND
14400: IFFALSE 14454
// begin mech := IsDrivenBy ( i ) ;
14402: LD_ADDR_VAR 0 10
14406: PUSH
14407: LD_VAR 0 5
14411: PPUSH
14412: CALL_OW 311
14416: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14417: LD_VAR 0 10
14421: PPUSH
14422: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14426: LD_VAR 0 10
14430: PPUSH
14431: LD_VAR 0 5
14435: PPUSH
14436: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14440: LD_VAR 0 10
14444: PPUSH
14445: LD_VAR 0 5
14449: PPUSH
14450: CALL_OW 180
// end ; end ; unit_human :
14454: GO 14721
14456: LD_INT 1
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14720
14464: POP
// begin b := IsInUnit ( i ) ;
14465: LD_ADDR_VAR 0 19
14469: PUSH
14470: LD_VAR 0 5
14474: PPUSH
14475: CALL_OW 310
14479: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14480: LD_ADDR_VAR 0 20
14484: PUSH
14485: LD_VAR 0 19
14489: NOT
14490: PUSH
14491: LD_VAR 0 19
14495: PPUSH
14496: CALL_OW 266
14500: PUSH
14501: LD_INT 32
14503: PUSH
14504: LD_INT 31
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: IN
14511: OR
14512: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14513: LD_VAR 0 17
14517: PUSH
14518: LD_VAR 0 2
14522: PPUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 72
14537: PUSH
14538: LD_INT 1
14540: LESSEQUAL
14541: OR
14542: PUSH
14543: LD_VAR 0 20
14547: AND
14548: PUSH
14549: LD_VAR 0 5
14553: PUSH
14554: LD_VAR 0 18
14558: IN
14559: NOT
14560: AND
14561: IFFALSE 14654
// begin if b then
14563: LD_VAR 0 19
14567: IFFALSE 14616
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14569: LD_VAR 0 19
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_VAR 0 19
14583: PPUSH
14584: CALL_OW 74
14588: PPUSH
14589: CALL_OW 296
14593: PUSH
14594: LD_INT 10
14596: LESS
14597: PUSH
14598: LD_VAR 0 19
14602: PPUSH
14603: CALL_OW 461
14607: PUSH
14608: LD_INT 7
14610: NONEQUAL
14611: AND
14612: IFFALSE 14616
// continue ;
14614: GO 13931
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14616: LD_ADDR_VAR 0 18
14620: PUSH
14621: LD_VAR 0 18
14625: PPUSH
14626: LD_VAR 0 18
14630: PUSH
14631: LD_INT 1
14633: PLUS
14634: PPUSH
14635: LD_VAR 0 5
14639: PPUSH
14640: CALL_OW 1
14644: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14645: LD_VAR 0 5
14649: PPUSH
14650: CALL_OW 122
// end ; if sold_defenders then
14654: LD_VAR 0 18
14658: IFFALSE 14718
// if i in sold_defenders then
14660: LD_VAR 0 5
14664: PUSH
14665: LD_VAR 0 18
14669: IN
14670: IFFALSE 14718
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14672: LD_VAR 0 5
14676: PPUSH
14677: CALL_OW 314
14681: NOT
14682: PUSH
14683: LD_VAR 0 5
14687: PPUSH
14688: LD_VAR 0 14
14692: PPUSH
14693: CALL_OW 296
14697: PUSH
14698: LD_INT 30
14700: LESS
14701: AND
14702: IFFALSE 14718
// ComAttackUnit ( i , e ) ;
14704: LD_VAR 0 5
14708: PPUSH
14709: LD_VAR 0 14
14713: PPUSH
14714: CALL_OW 115
// end ; end ; end ;
14718: GO 14721
14720: POP
// if IsDead ( i ) then
14721: LD_VAR 0 5
14725: PPUSH
14726: CALL_OW 301
14730: IFFALSE 14748
// defenders := defenders diff i ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_VAR 0 2
14741: PUSH
14742: LD_VAR 0 5
14746: DIFF
14747: ST_TO_ADDR
// end ;
14748: GO 13931
14750: POP
14751: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
14752: LD_VAR 0 3
14756: NOT
14757: PUSH
14758: LD_VAR 0 2
14762: NOT
14763: OR
14764: PUSH
14765: LD_EXP 52
14769: PUSH
14770: LD_VAR 0 1
14774: ARRAY
14775: NOT
14776: OR
14777: IFFALSE 13835
// MC_Reset ( base , 18 ) ;
14779: LD_VAR 0 1
14783: PPUSH
14784: LD_INT 18
14786: PPUSH
14787: CALL 58492 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14791: LD_ADDR_VAR 0 2
14795: PUSH
14796: LD_VAR 0 2
14800: PUSH
14801: LD_VAR 0 2
14805: PPUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 25
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 25
14821: PUSH
14822: LD_INT 5
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 25
14831: PUSH
14832: LD_INT 8
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 25
14841: PUSH
14842: LD_INT 9
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 72
14860: DIFF
14861: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14862: LD_VAR 0 3
14866: NOT
14867: PUSH
14868: LD_VAR 0 2
14872: PPUSH
14873: LD_INT 21
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 72
14887: AND
14888: IFFALSE 15226
// begin tmp := FilterByTag ( defenders , 19 ) ;
14890: LD_ADDR_VAR 0 12
14894: PUSH
14895: LD_VAR 0 2
14899: PPUSH
14900: LD_INT 19
14902: PPUSH
14903: CALL 51705 0 2
14907: ST_TO_ADDR
// if tmp then
14908: LD_VAR 0 12
14912: IFFALSE 14982
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14914: LD_ADDR_VAR 0 12
14918: PUSH
14919: LD_VAR 0 12
14923: PPUSH
14924: LD_INT 25
14926: PUSH
14927: LD_INT 3
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PPUSH
14934: CALL_OW 72
14938: ST_TO_ADDR
// if tmp then
14939: LD_VAR 0 12
14943: IFFALSE 14982
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14945: LD_ADDR_EXP 64
14949: PUSH
14950: LD_EXP 64
14954: PPUSH
14955: LD_VAR 0 1
14959: PPUSH
14960: LD_EXP 64
14964: PUSH
14965: LD_VAR 0 1
14969: ARRAY
14970: PUSH
14971: LD_VAR 0 12
14975: UNION
14976: PPUSH
14977: CALL_OW 1
14981: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_INT 19
14989: PPUSH
14990: CALL 58492 0 2
// repeat wait ( 0 0$1 ) ;
14994: LD_INT 35
14996: PPUSH
14997: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
15001: LD_EXP 52
15005: PUSH
15006: LD_VAR 0 1
15010: ARRAY
15011: NOT
15012: PUSH
15013: LD_EXP 52
15017: PUSH
15018: LD_VAR 0 1
15022: ARRAY
15023: PUSH
15024: EMPTY
15025: EQUAL
15026: OR
15027: IFFALSE 15064
// begin for i in defenders do
15029: LD_ADDR_VAR 0 5
15033: PUSH
15034: LD_VAR 0 2
15038: PUSH
15039: FOR_IN
15040: IFFALSE 15053
// ComStop ( i ) ;
15042: LD_VAR 0 5
15046: PPUSH
15047: CALL_OW 141
15051: GO 15039
15053: POP
15054: POP
// defenders := [ ] ;
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: EMPTY
15061: ST_TO_ADDR
// exit ;
15062: GO 15250
// end ; for i in defenders do
15064: LD_ADDR_VAR 0 5
15068: PUSH
15069: LD_VAR 0 2
15073: PUSH
15074: FOR_IN
15075: IFFALSE 15164
// begin if not IsInArea ( i , mc_parking [ base ] ) then
15077: LD_VAR 0 5
15081: PPUSH
15082: LD_EXP 76
15086: PUSH
15087: LD_VAR 0 1
15091: ARRAY
15092: PPUSH
15093: CALL_OW 308
15097: NOT
15098: IFFALSE 15122
// ComMoveToArea ( i , mc_parking [ base ] ) else
15100: LD_VAR 0 5
15104: PPUSH
15105: LD_EXP 76
15109: PUSH
15110: LD_VAR 0 1
15114: ARRAY
15115: PPUSH
15116: CALL_OW 113
15120: GO 15162
// if GetControl ( i ) = control_manual then
15122: LD_VAR 0 5
15126: PPUSH
15127: CALL_OW 263
15131: PUSH
15132: LD_INT 1
15134: EQUAL
15135: IFFALSE 15162
// if IsDrivenBy ( i ) then
15137: LD_VAR 0 5
15141: PPUSH
15142: CALL_OW 311
15146: IFFALSE 15162
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
15148: LD_VAR 0 5
15152: PPUSH
15153: CALL_OW 311
15157: PPUSH
15158: CALL_OW 121
// end ;
15162: GO 15074
15164: POP
15165: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
15166: LD_VAR 0 2
15170: PPUSH
15171: LD_INT 95
15173: PUSH
15174: LD_EXP 76
15178: PUSH
15179: LD_VAR 0 1
15183: ARRAY
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 72
15193: PUSH
15194: LD_VAR 0 2
15198: EQUAL
15199: PUSH
15200: LD_EXP 75
15204: PUSH
15205: LD_VAR 0 1
15209: ARRAY
15210: OR
15211: PUSH
15212: LD_EXP 52
15216: PUSH
15217: LD_VAR 0 1
15221: ARRAY
15222: NOT
15223: OR
15224: IFFALSE 14994
// end ; MC_Reset ( base , 19 ) ;
15226: LD_VAR 0 1
15230: PPUSH
15231: LD_INT 19
15233: PPUSH
15234: CALL 58492 0 2
// MC_Reset ( base , 20 ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_INT 20
15245: PPUSH
15246: CALL 58492 0 2
// end ;
15250: LD_VAR 0 4
15254: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15255: LD_INT 0
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
// result := false ;
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// side := GetSide ( unit ) ;
15269: LD_ADDR_VAR 0 3
15273: PUSH
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 255
15283: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15284: LD_ADDR_VAR 0 4
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 248
15298: ST_TO_ADDR
// case nat of 1 :
15299: LD_VAR 0 4
15303: PUSH
15304: LD_INT 1
15306: DOUBLE
15307: EQUAL
15308: IFTRUE 15312
15310: GO 15323
15312: POP
// tech := tech_lassight ; 2 :
15313: LD_ADDR_VAR 0 5
15317: PUSH
15318: LD_INT 12
15320: ST_TO_ADDR
15321: GO 15362
15323: LD_INT 2
15325: DOUBLE
15326: EQUAL
15327: IFTRUE 15331
15329: GO 15342
15331: POP
// tech := tech_mortar ; 3 :
15332: LD_ADDR_VAR 0 5
15336: PUSH
15337: LD_INT 41
15339: ST_TO_ADDR
15340: GO 15362
15342: LD_INT 3
15344: DOUBLE
15345: EQUAL
15346: IFTRUE 15350
15348: GO 15361
15350: POP
// tech := tech_bazooka ; end ;
15351: LD_ADDR_VAR 0 5
15355: PUSH
15356: LD_INT 44
15358: ST_TO_ADDR
15359: GO 15362
15361: POP
// if Researched ( side , tech ) then
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_VAR 0 5
15371: PPUSH
15372: CALL_OW 325
15376: IFFALSE 15403
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15378: LD_ADDR_VAR 0 2
15382: PUSH
15383: LD_INT 5
15385: PUSH
15386: LD_INT 8
15388: PUSH
15389: LD_INT 9
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: PUSH
15397: LD_VAR 0 4
15401: ARRAY
15402: ST_TO_ADDR
// end ;
15403: LD_VAR 0 2
15407: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15408: LD_INT 0
15410: PPUSH
15411: PPUSH
15412: PPUSH
// if not mines then
15413: LD_VAR 0 2
15417: NOT
15418: IFFALSE 15422
// exit ;
15420: GO 15566
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15422: LD_ADDR_VAR 0 5
15426: PUSH
15427: LD_INT 81
15429: PUSH
15430: LD_VAR 0 1
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: LD_INT 21
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 69
15464: ST_TO_ADDR
// for i in mines do
15465: LD_ADDR_VAR 0 4
15469: PUSH
15470: LD_VAR 0 2
15474: PUSH
15475: FOR_IN
15476: IFFALSE 15564
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15478: LD_VAR 0 4
15482: PUSH
15483: LD_INT 1
15485: ARRAY
15486: PPUSH
15487: LD_VAR 0 4
15491: PUSH
15492: LD_INT 2
15494: ARRAY
15495: PPUSH
15496: CALL_OW 458
15500: NOT
15501: IFFALSE 15505
// continue ;
15503: GO 15475
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15505: LD_VAR 0 4
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 4
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PPUSH
15523: CALL_OW 428
15527: PUSH
15528: LD_VAR 0 5
15532: IN
15533: IFFALSE 15562
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15535: LD_VAR 0 4
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_VAR 0 4
15548: PUSH
15549: LD_INT 2
15551: ARRAY
15552: PPUSH
15553: LD_VAR 0 1
15557: PPUSH
15558: CALL_OW 456
// end ;
15562: GO 15475
15564: POP
15565: POP
// end ;
15566: LD_VAR 0 3
15570: RET
// export function Count ( array ) ; var i ; begin
15571: LD_INT 0
15573: PPUSH
15574: PPUSH
// result := 0 ;
15575: LD_ADDR_VAR 0 2
15579: PUSH
15580: LD_INT 0
15582: ST_TO_ADDR
// for i in array do
15583: LD_ADDR_VAR 0 3
15587: PUSH
15588: LD_VAR 0 1
15592: PUSH
15593: FOR_IN
15594: IFFALSE 15618
// if i then
15596: LD_VAR 0 3
15600: IFFALSE 15616
// result := result + 1 ;
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_VAR 0 2
15611: PUSH
15612: LD_INT 1
15614: PLUS
15615: ST_TO_ADDR
15616: GO 15593
15618: POP
15619: POP
// end ;
15620: LD_VAR 0 2
15624: RET
// export function IsEmpty ( building ) ; begin
15625: LD_INT 0
15627: PPUSH
// if not building then
15628: LD_VAR 0 1
15632: NOT
15633: IFFALSE 15637
// exit ;
15635: GO 15680
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_VAR 0 1
15646: PUSH
15647: LD_INT 22
15649: PUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 255
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 58
15666: PUSH
15667: EMPTY
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 69
15678: IN
15679: ST_TO_ADDR
// end ;
15680: LD_VAR 0 2
15684: RET
// export function IsNotFull ( building ) ; begin
15685: LD_INT 0
15687: PPUSH
// if not building then
15688: LD_VAR 0 1
15692: NOT
15693: IFFALSE 15697
// exit ;
15695: GO 15716
// result := UnitsInside ( building ) < 6 ;
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 313
15711: PUSH
15712: LD_INT 6
15714: LESS
15715: ST_TO_ADDR
// end ;
15716: LD_VAR 0 2
15720: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15721: LD_INT 0
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
// tmp := [ ] ;
15727: LD_ADDR_VAR 0 3
15731: PUSH
15732: EMPTY
15733: ST_TO_ADDR
// list := [ ] ;
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: EMPTY
15740: ST_TO_ADDR
// for i = 16 to 25 do
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: DOUBLE
15747: LD_INT 16
15749: DEC
15750: ST_TO_ADDR
15751: LD_INT 25
15753: PUSH
15754: FOR_TO
15755: IFFALSE 15828
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15757: LD_ADDR_VAR 0 3
15761: PUSH
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 255
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 91
15786: PUSH
15787: LD_VAR 0 1
15791: PUSH
15792: LD_INT 6
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 30
15802: PUSH
15803: LD_VAR 0 4
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: PPUSH
15820: CALL_OW 69
15824: ADD
15825: ST_TO_ADDR
15826: GO 15754
15828: POP
15829: POP
// for i = 1 to tmp do
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: DOUBLE
15836: LD_INT 1
15838: DEC
15839: ST_TO_ADDR
15840: LD_VAR 0 3
15844: PUSH
15845: FOR_TO
15846: IFFALSE 15934
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15848: LD_ADDR_VAR 0 5
15852: PUSH
15853: LD_VAR 0 5
15857: PUSH
15858: LD_VAR 0 3
15862: PUSH
15863: LD_VAR 0 4
15867: ARRAY
15868: PPUSH
15869: CALL_OW 266
15873: PUSH
15874: LD_VAR 0 3
15878: PUSH
15879: LD_VAR 0 4
15883: ARRAY
15884: PPUSH
15885: CALL_OW 250
15889: PUSH
15890: LD_VAR 0 3
15894: PUSH
15895: LD_VAR 0 4
15899: ARRAY
15900: PPUSH
15901: CALL_OW 251
15905: PUSH
15906: LD_VAR 0 3
15910: PUSH
15911: LD_VAR 0 4
15915: ARRAY
15916: PPUSH
15917: CALL_OW 254
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: ADD
15931: ST_TO_ADDR
15932: GO 15845
15934: POP
15935: POP
// result := list ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_VAR 0 5
15945: ST_TO_ADDR
// end ;
15946: LD_VAR 0 2
15950: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
15959: PPUSH
// if not factory then
15960: LD_VAR 0 1
15964: NOT
15965: IFFALSE 15969
// exit ;
15967: GO 16562
// if control = control_apeman then
15969: LD_VAR 0 4
15973: PUSH
15974: LD_INT 5
15976: EQUAL
15977: IFFALSE 16086
// begin tmp := UnitsInside ( factory ) ;
15979: LD_ADDR_VAR 0 8
15983: PUSH
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 313
15993: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15994: LD_VAR 0 8
15998: PPUSH
15999: LD_INT 25
16001: PUSH
16002: LD_INT 12
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 72
16013: NOT
16014: IFFALSE 16024
// control := control_manual ;
16016: LD_ADDR_VAR 0 4
16020: PUSH
16021: LD_INT 1
16023: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16024: LD_ADDR_VAR 0 8
16028: PUSH
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL 15721 0 1
16038: ST_TO_ADDR
// if tmp then
16039: LD_VAR 0 8
16043: IFFALSE 16086
// begin for i in tmp do
16045: LD_ADDR_VAR 0 7
16049: PUSH
16050: LD_VAR 0 8
16054: PUSH
16055: FOR_IN
16056: IFFALSE 16084
// if i [ 1 ] = b_ext_radio then
16058: LD_VAR 0 7
16062: PUSH
16063: LD_INT 1
16065: ARRAY
16066: PUSH
16067: LD_INT 22
16069: EQUAL
16070: IFFALSE 16082
// begin control := control_remote ;
16072: LD_ADDR_VAR 0 4
16076: PUSH
16077: LD_INT 2
16079: ST_TO_ADDR
// break ;
16080: GO 16084
// end ;
16082: GO 16055
16084: POP
16085: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_VAR 0 4
16105: PPUSH
16106: LD_VAR 0 5
16110: PPUSH
16111: CALL_OW 448
16115: IFFALSE 16150
// begin result := [ chassis , engine , control , weapon ] ;
16117: LD_ADDR_VAR 0 6
16121: PUSH
16122: LD_VAR 0 2
16126: PUSH
16127: LD_VAR 0 3
16131: PUSH
16132: LD_VAR 0 4
16136: PUSH
16137: LD_VAR 0 5
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: ST_TO_ADDR
// exit ;
16148: GO 16562
// end ; _chassis := AvailableChassisList ( factory ) ;
16150: LD_ADDR_VAR 0 9
16154: PUSH
16155: LD_VAR 0 1
16159: PPUSH
16160: CALL_OW 475
16164: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16165: LD_ADDR_VAR 0 11
16169: PUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 476
16179: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16180: LD_ADDR_VAR 0 12
16184: PUSH
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 477
16194: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16195: LD_ADDR_VAR 0 10
16199: PUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 478
16209: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16210: LD_VAR 0 9
16214: NOT
16215: PUSH
16216: LD_VAR 0 11
16220: NOT
16221: OR
16222: PUSH
16223: LD_VAR 0 12
16227: NOT
16228: OR
16229: PUSH
16230: LD_VAR 0 10
16234: NOT
16235: OR
16236: IFFALSE 16271
// begin result := [ chassis , engine , control , weapon ] ;
16238: LD_ADDR_VAR 0 6
16242: PUSH
16243: LD_VAR 0 2
16247: PUSH
16248: LD_VAR 0 3
16252: PUSH
16253: LD_VAR 0 4
16257: PUSH
16258: LD_VAR 0 5
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: ST_TO_ADDR
// exit ;
16269: GO 16562
// end ; if not chassis in _chassis then
16271: LD_VAR 0 2
16275: PUSH
16276: LD_VAR 0 9
16280: IN
16281: NOT
16282: IFFALSE 16308
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16284: LD_ADDR_VAR 0 2
16288: PUSH
16289: LD_VAR 0 9
16293: PUSH
16294: LD_INT 1
16296: PPUSH
16297: LD_VAR 0 9
16301: PPUSH
16302: CALL_OW 12
16306: ARRAY
16307: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16308: LD_VAR 0 2
16312: PPUSH
16313: LD_VAR 0 3
16317: PPUSH
16318: CALL 16567 0 2
16322: NOT
16323: IFFALSE 16382
// repeat engine := _engine [ 1 ] ;
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_VAR 0 11
16334: PUSH
16335: LD_INT 1
16337: ARRAY
16338: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16339: LD_ADDR_VAR 0 11
16343: PUSH
16344: LD_VAR 0 11
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 3
16356: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16357: LD_VAR 0 2
16361: PPUSH
16362: LD_VAR 0 3
16366: PPUSH
16367: CALL 16567 0 2
16371: PUSH
16372: LD_VAR 0 11
16376: PUSH
16377: EMPTY
16378: EQUAL
16379: OR
16380: IFFALSE 16325
// if not control in _control then
16382: LD_VAR 0 4
16386: PUSH
16387: LD_VAR 0 12
16391: IN
16392: NOT
16393: IFFALSE 16419
// control := _control [ rand ( 1 , _control ) ] ;
16395: LD_ADDR_VAR 0 4
16399: PUSH
16400: LD_VAR 0 12
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 12
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_VAR 0 5
16428: PPUSH
16429: CALL 16787 0 2
16433: NOT
16434: IFFALSE 16493
// repeat weapon := _weapon [ 1 ] ;
16436: LD_ADDR_VAR 0 5
16440: PUSH
16441: LD_VAR 0 10
16445: PUSH
16446: LD_INT 1
16448: ARRAY
16449: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16450: LD_ADDR_VAR 0 10
16454: PUSH
16455: LD_VAR 0 10
16459: PPUSH
16460: LD_INT 1
16462: PPUSH
16463: CALL_OW 3
16467: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16468: LD_VAR 0 2
16472: PPUSH
16473: LD_VAR 0 5
16477: PPUSH
16478: CALL 16787 0 2
16482: PUSH
16483: LD_VAR 0 10
16487: PUSH
16488: EMPTY
16489: EQUAL
16490: OR
16491: IFFALSE 16436
// result := [ ] ;
16493: LD_ADDR_VAR 0 6
16497: PUSH
16498: EMPTY
16499: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16500: LD_VAR 0 1
16504: PPUSH
16505: LD_VAR 0 2
16509: PPUSH
16510: LD_VAR 0 3
16514: PPUSH
16515: LD_VAR 0 4
16519: PPUSH
16520: LD_VAR 0 5
16524: PPUSH
16525: CALL_OW 448
16529: IFFALSE 16562
// result := [ chassis , engine , control , weapon ] ;
16531: LD_ADDR_VAR 0 6
16535: PUSH
16536: LD_VAR 0 2
16540: PUSH
16541: LD_VAR 0 3
16545: PUSH
16546: LD_VAR 0 4
16550: PUSH
16551: LD_VAR 0 5
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: ST_TO_ADDR
// end ;
16562: LD_VAR 0 6
16566: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16567: LD_INT 0
16569: PPUSH
// if not chassis or not engine then
16570: LD_VAR 0 1
16574: NOT
16575: PUSH
16576: LD_VAR 0 2
16580: NOT
16581: OR
16582: IFFALSE 16586
// exit ;
16584: GO 16782
// case engine of engine_solar :
16586: LD_VAR 0 2
16590: PUSH
16591: LD_INT 2
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16637
16599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16600: LD_ADDR_VAR 0 3
16604: PUSH
16605: LD_INT 11
16607: PUSH
16608: LD_INT 12
16610: PUSH
16611: LD_INT 13
16613: PUSH
16614: LD_INT 14
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: LD_INT 3
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: ST_TO_ADDR
16635: GO 16766
16637: LD_INT 1
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16707
16645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16646: LD_ADDR_VAR 0 3
16650: PUSH
16651: LD_INT 11
16653: PUSH
16654: LD_INT 12
16656: PUSH
16657: LD_INT 13
16659: PUSH
16660: LD_INT 14
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: LD_INT 2
16668: PUSH
16669: LD_INT 3
16671: PUSH
16672: LD_INT 4
16674: PUSH
16675: LD_INT 5
16677: PUSH
16678: LD_INT 21
16680: PUSH
16681: LD_INT 23
16683: PUSH
16684: LD_INT 22
16686: PUSH
16687: LD_INT 24
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: ST_TO_ADDR
16705: GO 16766
16707: LD_INT 3
16709: DOUBLE
16710: EQUAL
16711: IFTRUE 16715
16713: GO 16765
16715: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16716: LD_ADDR_VAR 0 3
16720: PUSH
16721: LD_INT 13
16723: PUSH
16724: LD_INT 14
16726: PUSH
16727: LD_INT 2
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: LD_INT 4
16735: PUSH
16736: LD_INT 5
16738: PUSH
16739: LD_INT 21
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_INT 23
16747: PUSH
16748: LD_INT 24
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: ST_TO_ADDR
16763: GO 16766
16765: POP
// result := ( chassis in result ) ;
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_VAR 0 1
16775: PUSH
16776: LD_VAR 0 3
16780: IN
16781: ST_TO_ADDR
// end ;
16782: LD_VAR 0 3
16786: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16787: LD_INT 0
16789: PPUSH
// if not chassis or not weapon then
16790: LD_VAR 0 1
16794: NOT
16795: PUSH
16796: LD_VAR 0 2
16800: NOT
16801: OR
16802: IFFALSE 16806
// exit ;
16804: GO 17832
// case weapon of us_machine_gun :
16806: LD_VAR 0 2
16810: PUSH
16811: LD_INT 2
16813: DOUBLE
16814: EQUAL
16815: IFTRUE 16819
16817: GO 16849
16819: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16820: LD_ADDR_VAR 0 3
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 4
16836: PUSH
16837: LD_INT 5
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: ST_TO_ADDR
16847: GO 17816
16849: LD_INT 3
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16887
16857: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: LD_INT 2
16868: PUSH
16869: LD_INT 3
16871: PUSH
16872: LD_INT 4
16874: PUSH
16875: LD_INT 5
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
16885: GO 17816
16887: LD_INT 11
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16925
16895: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16896: LD_ADDR_VAR 0 3
16900: PUSH
16901: LD_INT 1
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: LD_INT 3
16909: PUSH
16910: LD_INT 4
16912: PUSH
16913: LD_INT 5
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: ST_TO_ADDR
16923: GO 17816
16925: LD_INT 4
16927: DOUBLE
16928: EQUAL
16929: IFTRUE 16933
16931: GO 16959
16933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16934: LD_ADDR_VAR 0 3
16938: PUSH
16939: LD_INT 2
16941: PUSH
16942: LD_INT 3
16944: PUSH
16945: LD_INT 4
16947: PUSH
16948: LD_INT 5
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: ST_TO_ADDR
16957: GO 17816
16959: LD_INT 5
16961: DOUBLE
16962: EQUAL
16963: IFTRUE 16967
16965: GO 16993
16967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_INT 2
16975: PUSH
16976: LD_INT 3
16978: PUSH
16979: LD_INT 4
16981: PUSH
16982: LD_INT 5
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: ST_TO_ADDR
16991: GO 17816
16993: LD_INT 9
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17027
17001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: LD_INT 3
17012: PUSH
17013: LD_INT 4
17015: PUSH
17016: LD_INT 5
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17816
17027: LD_INT 7
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17061
17035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17036: LD_ADDR_VAR 0 3
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 3
17046: PUSH
17047: LD_INT 4
17049: PUSH
17050: LD_INT 5
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
17059: GO 17816
17061: LD_INT 12
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17095
17069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: LD_INT 5
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: ST_TO_ADDR
17093: GO 17816
17095: LD_INT 13
17097: DOUBLE
17098: EQUAL
17099: IFTRUE 17103
17101: GO 17129
17103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_INT 2
17111: PUSH
17112: LD_INT 3
17114: PUSH
17115: LD_INT 4
17117: PUSH
17118: LD_INT 5
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: ST_TO_ADDR
17127: GO 17816
17129: LD_INT 14
17131: DOUBLE
17132: EQUAL
17133: IFTRUE 17137
17135: GO 17155
17137: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_INT 4
17145: PUSH
17146: LD_INT 5
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: ST_TO_ADDR
17153: GO 17816
17155: LD_INT 6
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17181
17163: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17164: LD_ADDR_VAR 0 3
17168: PUSH
17169: LD_INT 4
17171: PUSH
17172: LD_INT 5
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: ST_TO_ADDR
17179: GO 17816
17181: LD_INT 10
17183: DOUBLE
17184: EQUAL
17185: IFTRUE 17189
17187: GO 17207
17189: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17190: LD_ADDR_VAR 0 3
17194: PUSH
17195: LD_INT 4
17197: PUSH
17198: LD_INT 5
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: ST_TO_ADDR
17205: GO 17816
17207: LD_INT 22
17209: DOUBLE
17210: EQUAL
17211: IFTRUE 17215
17213: GO 17241
17215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17216: LD_ADDR_VAR 0 3
17220: PUSH
17221: LD_INT 11
17223: PUSH
17224: LD_INT 12
17226: PUSH
17227: LD_INT 13
17229: PUSH
17230: LD_INT 14
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: ST_TO_ADDR
17239: GO 17816
17241: LD_INT 23
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17275
17249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17250: LD_ADDR_VAR 0 3
17254: PUSH
17255: LD_INT 11
17257: PUSH
17258: LD_INT 12
17260: PUSH
17261: LD_INT 13
17263: PUSH
17264: LD_INT 14
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: ST_TO_ADDR
17273: GO 17816
17275: LD_INT 24
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17309
17283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_INT 11
17291: PUSH
17292: LD_INT 12
17294: PUSH
17295: LD_INT 13
17297: PUSH
17298: LD_INT 14
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: ST_TO_ADDR
17307: GO 17816
17309: LD_INT 30
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17343
17317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_INT 11
17325: PUSH
17326: LD_INT 12
17328: PUSH
17329: LD_INT 13
17331: PUSH
17332: LD_INT 14
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: ST_TO_ADDR
17341: GO 17816
17343: LD_INT 25
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17369
17351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17352: LD_ADDR_VAR 0 3
17356: PUSH
17357: LD_INT 13
17359: PUSH
17360: LD_INT 14
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 17816
17369: LD_INT 27
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17395
17377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17378: LD_ADDR_VAR 0 3
17382: PUSH
17383: LD_INT 13
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: ST_TO_ADDR
17393: GO 17816
17395: LD_INT 28
17397: DOUBLE
17398: EQUAL
17399: IFTRUE 17403
17401: GO 17421
17403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17404: LD_ADDR_VAR 0 3
17408: PUSH
17409: LD_INT 13
17411: PUSH
17412: LD_INT 14
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: ST_TO_ADDR
17419: GO 17816
17421: LD_INT 29
17423: DOUBLE
17424: EQUAL
17425: IFTRUE 17429
17427: GO 17447
17429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: LD_INT 13
17437: PUSH
17438: LD_INT 14
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: ST_TO_ADDR
17445: GO 17816
17447: LD_INT 31
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17473
17455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17456: LD_ADDR_VAR 0 3
17460: PUSH
17461: LD_INT 13
17463: PUSH
17464: LD_INT 14
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: ST_TO_ADDR
17471: GO 17816
17473: LD_INT 26
17475: DOUBLE
17476: EQUAL
17477: IFTRUE 17481
17479: GO 17499
17481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17482: LD_ADDR_VAR 0 3
17486: PUSH
17487: LD_INT 13
17489: PUSH
17490: LD_INT 14
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: ST_TO_ADDR
17497: GO 17816
17499: LD_INT 42
17501: DOUBLE
17502: EQUAL
17503: IFTRUE 17507
17505: GO 17533
17507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17508: LD_ADDR_VAR 0 3
17512: PUSH
17513: LD_INT 21
17515: PUSH
17516: LD_INT 22
17518: PUSH
17519: LD_INT 23
17521: PUSH
17522: LD_INT 24
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: ST_TO_ADDR
17531: GO 17816
17533: LD_INT 43
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17567
17541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 22
17552: PUSH
17553: LD_INT 23
17555: PUSH
17556: LD_INT 24
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: ST_TO_ADDR
17565: GO 17816
17567: LD_INT 44
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17601
17575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17576: LD_ADDR_VAR 0 3
17580: PUSH
17581: LD_INT 21
17583: PUSH
17584: LD_INT 22
17586: PUSH
17587: LD_INT 23
17589: PUSH
17590: LD_INT 24
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: ST_TO_ADDR
17599: GO 17816
17601: LD_INT 45
17603: DOUBLE
17604: EQUAL
17605: IFTRUE 17609
17607: GO 17635
17609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17610: LD_ADDR_VAR 0 3
17614: PUSH
17615: LD_INT 21
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_INT 23
17623: PUSH
17624: LD_INT 24
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: ST_TO_ADDR
17633: GO 17816
17635: LD_INT 49
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17669
17643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17644: LD_ADDR_VAR 0 3
17648: PUSH
17649: LD_INT 21
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 23
17657: PUSH
17658: LD_INT 24
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: ST_TO_ADDR
17667: GO 17816
17669: LD_INT 51
17671: DOUBLE
17672: EQUAL
17673: IFTRUE 17677
17675: GO 17703
17677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17678: LD_ADDR_VAR 0 3
17682: PUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_INT 23
17691: PUSH
17692: LD_INT 24
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: ST_TO_ADDR
17701: GO 17816
17703: LD_INT 52
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17737
17711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17712: LD_ADDR_VAR 0 3
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_INT 23
17725: PUSH
17726: LD_INT 24
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: ST_TO_ADDR
17735: GO 17816
17737: LD_INT 53
17739: DOUBLE
17740: EQUAL
17741: IFTRUE 17745
17743: GO 17763
17745: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17746: LD_ADDR_VAR 0 3
17750: PUSH
17751: LD_INT 23
17753: PUSH
17754: LD_INT 24
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: ST_TO_ADDR
17761: GO 17816
17763: LD_INT 46
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 17789
17771: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17772: LD_ADDR_VAR 0 3
17776: PUSH
17777: LD_INT 23
17779: PUSH
17780: LD_INT 24
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: ST_TO_ADDR
17787: GO 17816
17789: LD_INT 47
17791: DOUBLE
17792: EQUAL
17793: IFTRUE 17797
17795: GO 17815
17797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17798: LD_ADDR_VAR 0 3
17802: PUSH
17803: LD_INT 23
17805: PUSH
17806: LD_INT 24
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: ST_TO_ADDR
17813: GO 17816
17815: POP
// result := ( chassis in result ) ;
17816: LD_ADDR_VAR 0 3
17820: PUSH
17821: LD_VAR 0 1
17825: PUSH
17826: LD_VAR 0 3
17830: IN
17831: ST_TO_ADDR
// end ;
17832: LD_VAR 0 3
17836: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17837: LD_INT 0
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
// result := array ;
17846: LD_ADDR_VAR 0 5
17850: PUSH
17851: LD_VAR 0 1
17855: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17856: LD_VAR 0 1
17860: NOT
17861: PUSH
17862: LD_VAR 0 2
17866: NOT
17867: OR
17868: PUSH
17869: LD_VAR 0 3
17873: NOT
17874: OR
17875: PUSH
17876: LD_VAR 0 2
17880: PUSH
17881: LD_VAR 0 1
17885: GREATER
17886: OR
17887: PUSH
17888: LD_VAR 0 3
17892: PUSH
17893: LD_VAR 0 1
17897: GREATER
17898: OR
17899: IFFALSE 17903
// exit ;
17901: GO 18199
// if direction then
17903: LD_VAR 0 4
17907: IFFALSE 17971
// begin d := 1 ;
17909: LD_ADDR_VAR 0 9
17913: PUSH
17914: LD_INT 1
17916: ST_TO_ADDR
// if i_from > i_to then
17917: LD_VAR 0 2
17921: PUSH
17922: LD_VAR 0 3
17926: GREATER
17927: IFFALSE 17953
// length := ( array - i_from ) + i_to else
17929: LD_ADDR_VAR 0 11
17933: PUSH
17934: LD_VAR 0 1
17938: PUSH
17939: LD_VAR 0 2
17943: MINUS
17944: PUSH
17945: LD_VAR 0 3
17949: PLUS
17950: ST_TO_ADDR
17951: GO 17969
// length := i_to - i_from ;
17953: LD_ADDR_VAR 0 11
17957: PUSH
17958: LD_VAR 0 3
17962: PUSH
17963: LD_VAR 0 2
17967: MINUS
17968: ST_TO_ADDR
// end else
17969: GO 18032
// begin d := - 1 ;
17971: LD_ADDR_VAR 0 9
17975: PUSH
17976: LD_INT 1
17978: NEG
17979: ST_TO_ADDR
// if i_from > i_to then
17980: LD_VAR 0 2
17984: PUSH
17985: LD_VAR 0 3
17989: GREATER
17990: IFFALSE 18010
// length := i_from - i_to else
17992: LD_ADDR_VAR 0 11
17996: PUSH
17997: LD_VAR 0 2
18001: PUSH
18002: LD_VAR 0 3
18006: MINUS
18007: ST_TO_ADDR
18008: GO 18032
// length := ( array - i_to ) + i_from ;
18010: LD_ADDR_VAR 0 11
18014: PUSH
18015: LD_VAR 0 1
18019: PUSH
18020: LD_VAR 0 3
18024: MINUS
18025: PUSH
18026: LD_VAR 0 2
18030: PLUS
18031: ST_TO_ADDR
// end ; if not length then
18032: LD_VAR 0 11
18036: NOT
18037: IFFALSE 18041
// exit ;
18039: GO 18199
// tmp := array ;
18041: LD_ADDR_VAR 0 10
18045: PUSH
18046: LD_VAR 0 1
18050: ST_TO_ADDR
// for i = 1 to length do
18051: LD_ADDR_VAR 0 6
18055: PUSH
18056: DOUBLE
18057: LD_INT 1
18059: DEC
18060: ST_TO_ADDR
18061: LD_VAR 0 11
18065: PUSH
18066: FOR_TO
18067: IFFALSE 18187
// begin for j = 1 to array do
18069: LD_ADDR_VAR 0 7
18073: PUSH
18074: DOUBLE
18075: LD_INT 1
18077: DEC
18078: ST_TO_ADDR
18079: LD_VAR 0 1
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18173
// begin k := j + d ;
18087: LD_ADDR_VAR 0 8
18091: PUSH
18092: LD_VAR 0 7
18096: PUSH
18097: LD_VAR 0 9
18101: PLUS
18102: ST_TO_ADDR
// if k > array then
18103: LD_VAR 0 8
18107: PUSH
18108: LD_VAR 0 1
18112: GREATER
18113: IFFALSE 18123
// k := 1 ;
18115: LD_ADDR_VAR 0 8
18119: PUSH
18120: LD_INT 1
18122: ST_TO_ADDR
// if not k then
18123: LD_VAR 0 8
18127: NOT
18128: IFFALSE 18140
// k := array ;
18130: LD_ADDR_VAR 0 8
18134: PUSH
18135: LD_VAR 0 1
18139: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18140: LD_ADDR_VAR 0 10
18144: PUSH
18145: LD_VAR 0 10
18149: PPUSH
18150: LD_VAR 0 8
18154: PPUSH
18155: LD_VAR 0 1
18159: PUSH
18160: LD_VAR 0 7
18164: ARRAY
18165: PPUSH
18166: CALL_OW 1
18170: ST_TO_ADDR
// end ;
18171: GO 18084
18173: POP
18174: POP
// array := tmp ;
18175: LD_ADDR_VAR 0 1
18179: PUSH
18180: LD_VAR 0 10
18184: ST_TO_ADDR
// end ;
18185: GO 18066
18187: POP
18188: POP
// result := array ;
18189: LD_ADDR_VAR 0 5
18193: PUSH
18194: LD_VAR 0 1
18198: ST_TO_ADDR
// end ;
18199: LD_VAR 0 5
18203: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18204: LD_INT 0
18206: PPUSH
18207: PPUSH
// result := 0 ;
18208: LD_ADDR_VAR 0 3
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// if not array or not value in array then
18216: LD_VAR 0 1
18220: NOT
18221: PUSH
18222: LD_VAR 0 2
18226: PUSH
18227: LD_VAR 0 1
18231: IN
18232: NOT
18233: OR
18234: IFFALSE 18238
// exit ;
18236: GO 18292
// for i = 1 to array do
18238: LD_ADDR_VAR 0 4
18242: PUSH
18243: DOUBLE
18244: LD_INT 1
18246: DEC
18247: ST_TO_ADDR
18248: LD_VAR 0 1
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18290
// if value = array [ i ] then
18256: LD_VAR 0 2
18260: PUSH
18261: LD_VAR 0 1
18265: PUSH
18266: LD_VAR 0 4
18270: ARRAY
18271: EQUAL
18272: IFFALSE 18288
// begin result := i ;
18274: LD_ADDR_VAR 0 3
18278: PUSH
18279: LD_VAR 0 4
18283: ST_TO_ADDR
// exit ;
18284: POP
18285: POP
18286: GO 18292
// end ;
18288: GO 18253
18290: POP
18291: POP
// end ;
18292: LD_VAR 0 3
18296: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18297: LD_INT 0
18299: PPUSH
// vc_chassis := chassis ;
18300: LD_ADDR_OWVAR 37
18304: PUSH
18305: LD_VAR 0 1
18309: ST_TO_ADDR
// vc_engine := engine ;
18310: LD_ADDR_OWVAR 39
18314: PUSH
18315: LD_VAR 0 2
18319: ST_TO_ADDR
// vc_control := control ;
18320: LD_ADDR_OWVAR 38
18324: PUSH
18325: LD_VAR 0 3
18329: ST_TO_ADDR
// vc_weapon := weapon ;
18330: LD_ADDR_OWVAR 40
18334: PUSH
18335: LD_VAR 0 4
18339: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18340: LD_ADDR_OWVAR 41
18344: PUSH
18345: LD_VAR 0 5
18349: ST_TO_ADDR
// end ;
18350: LD_VAR 0 6
18354: RET
// export function WantPlant ( unit ) ; var task ; begin
18355: LD_INT 0
18357: PPUSH
18358: PPUSH
// result := false ;
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: LD_INT 0
18366: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18367: LD_ADDR_VAR 0 3
18371: PUSH
18372: LD_VAR 0 1
18376: PPUSH
18377: CALL_OW 437
18381: ST_TO_ADDR
// if task then
18382: LD_VAR 0 3
18386: IFFALSE 18414
// if task [ 1 ] [ 1 ] = p then
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 1
18395: ARRAY
18396: PUSH
18397: LD_INT 1
18399: ARRAY
18400: PUSH
18401: LD_STRING p
18403: EQUAL
18404: IFFALSE 18414
// result := true ;
18406: LD_ADDR_VAR 0 2
18410: PUSH
18411: LD_INT 1
18413: ST_TO_ADDR
// end ;
18414: LD_VAR 0 2
18418: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18419: LD_INT 0
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
// if pos < 1 then
18425: LD_VAR 0 2
18429: PUSH
18430: LD_INT 1
18432: LESS
18433: IFFALSE 18437
// exit ;
18435: GO 18740
// if pos = 1 then
18437: LD_VAR 0 2
18441: PUSH
18442: LD_INT 1
18444: EQUAL
18445: IFFALSE 18478
// result := Replace ( arr , pos [ 1 ] , value ) else
18447: LD_ADDR_VAR 0 4
18451: PUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: LD_VAR 0 2
18461: PUSH
18462: LD_INT 1
18464: ARRAY
18465: PPUSH
18466: LD_VAR 0 3
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
18476: GO 18740
// begin tmp := arr ;
18478: LD_ADDR_VAR 0 6
18482: PUSH
18483: LD_VAR 0 1
18487: ST_TO_ADDR
// s_arr := [ tmp ] ;
18488: LD_ADDR_VAR 0 7
18492: PUSH
18493: LD_VAR 0 6
18497: PUSH
18498: EMPTY
18499: LIST
18500: ST_TO_ADDR
// for i = 1 to pos - 1 do
18501: LD_ADDR_VAR 0 5
18505: PUSH
18506: DOUBLE
18507: LD_INT 1
18509: DEC
18510: ST_TO_ADDR
18511: LD_VAR 0 2
18515: PUSH
18516: LD_INT 1
18518: MINUS
18519: PUSH
18520: FOR_TO
18521: IFFALSE 18566
// begin tmp := tmp [ pos [ i ] ] ;
18523: LD_ADDR_VAR 0 6
18527: PUSH
18528: LD_VAR 0 6
18532: PUSH
18533: LD_VAR 0 2
18537: PUSH
18538: LD_VAR 0 5
18542: ARRAY
18543: ARRAY
18544: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18545: LD_ADDR_VAR 0 7
18549: PUSH
18550: LD_VAR 0 7
18554: PUSH
18555: LD_VAR 0 6
18559: PUSH
18560: EMPTY
18561: LIST
18562: ADD
18563: ST_TO_ADDR
// end ;
18564: GO 18520
18566: POP
18567: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18568: LD_ADDR_VAR 0 6
18572: PUSH
18573: LD_VAR 0 6
18577: PPUSH
18578: LD_VAR 0 2
18582: PUSH
18583: LD_VAR 0 2
18587: ARRAY
18588: PPUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: CALL_OW 1
18598: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18599: LD_ADDR_VAR 0 7
18603: PUSH
18604: LD_VAR 0 7
18608: PPUSH
18609: LD_VAR 0 7
18613: PPUSH
18614: LD_VAR 0 6
18618: PPUSH
18619: CALL_OW 1
18623: ST_TO_ADDR
// for i = s_arr downto 2 do
18624: LD_ADDR_VAR 0 5
18628: PUSH
18629: DOUBLE
18630: LD_VAR 0 7
18634: INC
18635: ST_TO_ADDR
18636: LD_INT 2
18638: PUSH
18639: FOR_DOWNTO
18640: IFFALSE 18724
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18642: LD_ADDR_VAR 0 6
18646: PUSH
18647: LD_VAR 0 7
18651: PUSH
18652: LD_VAR 0 5
18656: PUSH
18657: LD_INT 1
18659: MINUS
18660: ARRAY
18661: PPUSH
18662: LD_VAR 0 2
18666: PUSH
18667: LD_VAR 0 5
18671: PUSH
18672: LD_INT 1
18674: MINUS
18675: ARRAY
18676: PPUSH
18677: LD_VAR 0 7
18681: PUSH
18682: LD_VAR 0 5
18686: ARRAY
18687: PPUSH
18688: CALL_OW 1
18692: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18693: LD_ADDR_VAR 0 7
18697: PUSH
18698: LD_VAR 0 7
18702: PPUSH
18703: LD_VAR 0 5
18707: PUSH
18708: LD_INT 1
18710: MINUS
18711: PPUSH
18712: LD_VAR 0 6
18716: PPUSH
18717: CALL_OW 1
18721: ST_TO_ADDR
// end ;
18722: GO 18639
18724: POP
18725: POP
// result := s_arr [ 1 ] ;
18726: LD_ADDR_VAR 0 4
18730: PUSH
18731: LD_VAR 0 7
18735: PUSH
18736: LD_INT 1
18738: ARRAY
18739: ST_TO_ADDR
// end ; end ;
18740: LD_VAR 0 4
18744: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18745: LD_INT 0
18747: PPUSH
18748: PPUSH
// if not list then
18749: LD_VAR 0 1
18753: NOT
18754: IFFALSE 18758
// exit ;
18756: GO 18849
// i := list [ pos1 ] ;
18758: LD_ADDR_VAR 0 5
18762: PUSH
18763: LD_VAR 0 1
18767: PUSH
18768: LD_VAR 0 2
18772: ARRAY
18773: ST_TO_ADDR
// if not i then
18774: LD_VAR 0 5
18778: NOT
18779: IFFALSE 18783
// exit ;
18781: GO 18849
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18783: LD_ADDR_VAR 0 1
18787: PUSH
18788: LD_VAR 0 1
18792: PPUSH
18793: LD_VAR 0 2
18797: PPUSH
18798: LD_VAR 0 1
18802: PUSH
18803: LD_VAR 0 3
18807: ARRAY
18808: PPUSH
18809: CALL_OW 1
18813: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18814: LD_ADDR_VAR 0 1
18818: PUSH
18819: LD_VAR 0 1
18823: PPUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: LD_VAR 0 5
18833: PPUSH
18834: CALL_OW 1
18838: ST_TO_ADDR
// result := list ;
18839: LD_ADDR_VAR 0 4
18843: PUSH
18844: LD_VAR 0 1
18848: ST_TO_ADDR
// end ;
18849: LD_VAR 0 4
18853: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18854: LD_INT 0
18856: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18857: LD_ADDR_VAR 0 5
18861: PUSH
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 250
18871: PPUSH
18872: LD_VAR 0 1
18876: PPUSH
18877: CALL_OW 251
18881: PPUSH
18882: LD_VAR 0 2
18886: PPUSH
18887: LD_VAR 0 3
18891: PPUSH
18892: LD_VAR 0 4
18896: PPUSH
18897: CALL 18907 0 5
18901: ST_TO_ADDR
// end ;
18902: LD_VAR 0 5
18906: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18907: LD_INT 0
18909: PPUSH
18910: PPUSH
18911: PPUSH
18912: PPUSH
// if not list then
18913: LD_VAR 0 3
18917: NOT
18918: IFFALSE 18922
// exit ;
18920: GO 19310
// result := [ ] ;
18922: LD_ADDR_VAR 0 6
18926: PUSH
18927: EMPTY
18928: ST_TO_ADDR
// for i in list do
18929: LD_ADDR_VAR 0 7
18933: PUSH
18934: LD_VAR 0 3
18938: PUSH
18939: FOR_IN
18940: IFFALSE 19142
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18942: LD_ADDR_VAR 0 9
18946: PUSH
18947: LD_VAR 0 7
18951: PPUSH
18952: LD_VAR 0 1
18956: PPUSH
18957: LD_VAR 0 2
18961: PPUSH
18962: CALL_OW 297
18966: ST_TO_ADDR
// if not result then
18967: LD_VAR 0 6
18971: NOT
18972: IFFALSE 18998
// result := [ [ i , tmp ] ] else
18974: LD_ADDR_VAR 0 6
18978: PUSH
18979: LD_VAR 0 7
18983: PUSH
18984: LD_VAR 0 9
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: ST_TO_ADDR
18996: GO 19140
// begin if result [ result ] [ 2 ] < tmp then
18998: LD_VAR 0 6
19002: PUSH
19003: LD_VAR 0 6
19007: ARRAY
19008: PUSH
19009: LD_INT 2
19011: ARRAY
19012: PUSH
19013: LD_VAR 0 9
19017: LESS
19018: IFFALSE 19060
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19020: LD_ADDR_VAR 0 6
19024: PUSH
19025: LD_VAR 0 6
19029: PPUSH
19030: LD_VAR 0 6
19034: PUSH
19035: LD_INT 1
19037: PLUS
19038: PPUSH
19039: LD_VAR 0 7
19043: PUSH
19044: LD_VAR 0 9
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 2
19057: ST_TO_ADDR
19058: GO 19140
// for j = 1 to result do
19060: LD_ADDR_VAR 0 8
19064: PUSH
19065: DOUBLE
19066: LD_INT 1
19068: DEC
19069: ST_TO_ADDR
19070: LD_VAR 0 6
19074: PUSH
19075: FOR_TO
19076: IFFALSE 19138
// begin if tmp < result [ j ] [ 2 ] then
19078: LD_VAR 0 9
19082: PUSH
19083: LD_VAR 0 6
19087: PUSH
19088: LD_VAR 0 8
19092: ARRAY
19093: PUSH
19094: LD_INT 2
19096: ARRAY
19097: LESS
19098: IFFALSE 19136
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19100: LD_ADDR_VAR 0 6
19104: PUSH
19105: LD_VAR 0 6
19109: PPUSH
19110: LD_VAR 0 8
19114: PPUSH
19115: LD_VAR 0 7
19119: PUSH
19120: LD_VAR 0 9
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PPUSH
19129: CALL_OW 2
19133: ST_TO_ADDR
// break ;
19134: GO 19138
// end ; end ;
19136: GO 19075
19138: POP
19139: POP
// end ; end ;
19140: GO 18939
19142: POP
19143: POP
// if result and not asc then
19144: LD_VAR 0 6
19148: PUSH
19149: LD_VAR 0 4
19153: NOT
19154: AND
19155: IFFALSE 19230
// begin tmp := result ;
19157: LD_ADDR_VAR 0 9
19161: PUSH
19162: LD_VAR 0 6
19166: ST_TO_ADDR
// for i = tmp downto 1 do
19167: LD_ADDR_VAR 0 7
19171: PUSH
19172: DOUBLE
19173: LD_VAR 0 9
19177: INC
19178: ST_TO_ADDR
19179: LD_INT 1
19181: PUSH
19182: FOR_DOWNTO
19183: IFFALSE 19228
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19185: LD_ADDR_VAR 0 6
19189: PUSH
19190: LD_VAR 0 6
19194: PPUSH
19195: LD_VAR 0 9
19199: PUSH
19200: LD_VAR 0 7
19204: MINUS
19205: PUSH
19206: LD_INT 1
19208: PLUS
19209: PPUSH
19210: LD_VAR 0 9
19214: PUSH
19215: LD_VAR 0 7
19219: ARRAY
19220: PPUSH
19221: CALL_OW 1
19225: ST_TO_ADDR
19226: GO 19182
19228: POP
19229: POP
// end ; tmp := [ ] ;
19230: LD_ADDR_VAR 0 9
19234: PUSH
19235: EMPTY
19236: ST_TO_ADDR
// if mode then
19237: LD_VAR 0 5
19241: IFFALSE 19310
// begin for i = 1 to result do
19243: LD_ADDR_VAR 0 7
19247: PUSH
19248: DOUBLE
19249: LD_INT 1
19251: DEC
19252: ST_TO_ADDR
19253: LD_VAR 0 6
19257: PUSH
19258: FOR_TO
19259: IFFALSE 19298
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19261: LD_ADDR_VAR 0 9
19265: PUSH
19266: LD_VAR 0 9
19270: PPUSH
19271: LD_VAR 0 7
19275: PPUSH
19276: LD_VAR 0 6
19280: PUSH
19281: LD_VAR 0 7
19285: ARRAY
19286: PUSH
19287: LD_INT 1
19289: ARRAY
19290: PPUSH
19291: CALL_OW 1
19295: ST_TO_ADDR
19296: GO 19258
19298: POP
19299: POP
// result := tmp ;
19300: LD_ADDR_VAR 0 6
19304: PUSH
19305: LD_VAR 0 9
19309: ST_TO_ADDR
// end ; end ;
19310: LD_VAR 0 6
19314: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19315: LD_INT 0
19317: PPUSH
19318: PPUSH
19319: PPUSH
19320: PPUSH
19321: PPUSH
19322: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19323: LD_ADDR_VAR 0 5
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: EMPTY
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: ST_TO_ADDR
// if not x or not y then
19345: LD_VAR 0 2
19349: NOT
19350: PUSH
19351: LD_VAR 0 3
19355: NOT
19356: OR
19357: IFFALSE 19361
// exit ;
19359: GO 21007
// if not range then
19361: LD_VAR 0 4
19365: NOT
19366: IFFALSE 19376
// range := 10 ;
19368: LD_ADDR_VAR 0 4
19372: PUSH
19373: LD_INT 10
19375: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19376: LD_ADDR_VAR 0 8
19380: PUSH
19381: LD_INT 81
19383: PUSH
19384: LD_VAR 0 1
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 92
19395: PUSH
19396: LD_VAR 0 2
19400: PUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 4
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 3
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: PPUSH
19439: CALL_OW 69
19443: ST_TO_ADDR
// if not tmp then
19444: LD_VAR 0 8
19448: NOT
19449: IFFALSE 19453
// exit ;
19451: GO 21007
// for i in tmp do
19453: LD_ADDR_VAR 0 6
19457: PUSH
19458: LD_VAR 0 8
19462: PUSH
19463: FOR_IN
19464: IFFALSE 20982
// begin points := [ 0 , 0 , 0 ] ;
19466: LD_ADDR_VAR 0 9
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: LIST
19484: ST_TO_ADDR
// bpoints := 1 ;
19485: LD_ADDR_VAR 0 10
19489: PUSH
19490: LD_INT 1
19492: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19493: LD_VAR 0 6
19497: PPUSH
19498: CALL_OW 247
19502: PUSH
19503: LD_INT 1
19505: DOUBLE
19506: EQUAL
19507: IFTRUE 19511
19509: GO 20089
19511: POP
// begin if GetClass ( i ) = 1 then
19512: LD_VAR 0 6
19516: PPUSH
19517: CALL_OW 257
19521: PUSH
19522: LD_INT 1
19524: EQUAL
19525: IFFALSE 19546
// points := [ 10 , 5 , 3 ] ;
19527: LD_ADDR_VAR 0 9
19531: PUSH
19532: LD_INT 10
19534: PUSH
19535: LD_INT 5
19537: PUSH
19538: LD_INT 3
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19546: LD_VAR 0 6
19550: PPUSH
19551: CALL_OW 257
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 3
19561: PUSH
19562: LD_INT 4
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: IN
19570: IFFALSE 19591
// points := [ 3 , 2 , 1 ] ;
19572: LD_ADDR_VAR 0 9
19576: PUSH
19577: LD_INT 3
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19591: LD_VAR 0 6
19595: PPUSH
19596: CALL_OW 257
19600: PUSH
19601: LD_INT 5
19603: EQUAL
19604: IFFALSE 19625
// points := [ 130 , 5 , 2 ] ;
19606: LD_ADDR_VAR 0 9
19610: PUSH
19611: LD_INT 130
19613: PUSH
19614: LD_INT 5
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19625: LD_VAR 0 6
19629: PPUSH
19630: CALL_OW 257
19634: PUSH
19635: LD_INT 8
19637: EQUAL
19638: IFFALSE 19659
// points := [ 35 , 35 , 30 ] ;
19640: LD_ADDR_VAR 0 9
19644: PUSH
19645: LD_INT 35
19647: PUSH
19648: LD_INT 35
19650: PUSH
19651: LD_INT 30
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19659: LD_VAR 0 6
19663: PPUSH
19664: CALL_OW 257
19668: PUSH
19669: LD_INT 9
19671: EQUAL
19672: IFFALSE 19693
// points := [ 20 , 55 , 40 ] ;
19674: LD_ADDR_VAR 0 9
19678: PUSH
19679: LD_INT 20
19681: PUSH
19682: LD_INT 55
19684: PUSH
19685: LD_INT 40
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19693: LD_VAR 0 6
19697: PPUSH
19698: CALL_OW 257
19702: PUSH
19703: LD_INT 12
19705: PUSH
19706: LD_INT 16
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: IN
19713: IFFALSE 19734
// points := [ 5 , 3 , 2 ] ;
19715: LD_ADDR_VAR 0 9
19719: PUSH
19720: LD_INT 5
19722: PUSH
19723: LD_INT 3
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: LIST
19733: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19734: LD_VAR 0 6
19738: PPUSH
19739: CALL_OW 257
19743: PUSH
19744: LD_INT 17
19746: EQUAL
19747: IFFALSE 19768
// points := [ 100 , 50 , 75 ] ;
19749: LD_ADDR_VAR 0 9
19753: PUSH
19754: LD_INT 100
19756: PUSH
19757: LD_INT 50
19759: PUSH
19760: LD_INT 75
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19768: LD_VAR 0 6
19772: PPUSH
19773: CALL_OW 257
19777: PUSH
19778: LD_INT 15
19780: EQUAL
19781: IFFALSE 19802
// points := [ 10 , 5 , 3 ] ;
19783: LD_ADDR_VAR 0 9
19787: PUSH
19788: LD_INT 10
19790: PUSH
19791: LD_INT 5
19793: PUSH
19794: LD_INT 3
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19802: LD_VAR 0 6
19806: PPUSH
19807: CALL_OW 257
19811: PUSH
19812: LD_INT 14
19814: EQUAL
19815: IFFALSE 19836
// points := [ 10 , 0 , 0 ] ;
19817: LD_ADDR_VAR 0 9
19821: PUSH
19822: LD_INT 10
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19836: LD_VAR 0 6
19840: PPUSH
19841: CALL_OW 257
19845: PUSH
19846: LD_INT 11
19848: EQUAL
19849: IFFALSE 19870
// points := [ 30 , 10 , 5 ] ;
19851: LD_ADDR_VAR 0 9
19855: PUSH
19856: LD_INT 30
19858: PUSH
19859: LD_INT 10
19861: PUSH
19862: LD_INT 5
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19870: LD_VAR 0 1
19874: PPUSH
19875: LD_INT 5
19877: PPUSH
19878: CALL_OW 321
19882: PUSH
19883: LD_INT 2
19885: EQUAL
19886: IFFALSE 19903
// bpoints := bpoints * 1.8 ;
19888: LD_ADDR_VAR 0 10
19892: PUSH
19893: LD_VAR 0 10
19897: PUSH
19898: LD_REAL  1.80000000000000E+0000
19901: MUL
19902: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19903: LD_VAR 0 6
19907: PPUSH
19908: CALL_OW 257
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 3
19921: PUSH
19922: LD_INT 4
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: IN
19931: PUSH
19932: LD_VAR 0 1
19936: PPUSH
19937: LD_INT 51
19939: PPUSH
19940: CALL_OW 321
19944: PUSH
19945: LD_INT 2
19947: EQUAL
19948: AND
19949: IFFALSE 19966
// bpoints := bpoints * 1.2 ;
19951: LD_ADDR_VAR 0 10
19955: PUSH
19956: LD_VAR 0 10
19960: PUSH
19961: LD_REAL  1.20000000000000E+0000
19964: MUL
19965: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19966: LD_VAR 0 6
19970: PPUSH
19971: CALL_OW 257
19975: PUSH
19976: LD_INT 5
19978: PUSH
19979: LD_INT 7
19981: PUSH
19982: LD_INT 9
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: IN
19990: PUSH
19991: LD_VAR 0 1
19995: PPUSH
19996: LD_INT 52
19998: PPUSH
19999: CALL_OW 321
20003: PUSH
20004: LD_INT 2
20006: EQUAL
20007: AND
20008: IFFALSE 20025
// bpoints := bpoints * 1.5 ;
20010: LD_ADDR_VAR 0 10
20014: PUSH
20015: LD_VAR 0 10
20019: PUSH
20020: LD_REAL  1.50000000000000E+0000
20023: MUL
20024: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20025: LD_VAR 0 1
20029: PPUSH
20030: LD_INT 66
20032: PPUSH
20033: CALL_OW 321
20037: PUSH
20038: LD_INT 2
20040: EQUAL
20041: IFFALSE 20058
// bpoints := bpoints * 1.1 ;
20043: LD_ADDR_VAR 0 10
20047: PUSH
20048: LD_VAR 0 10
20052: PUSH
20053: LD_REAL  1.10000000000000E+0000
20056: MUL
20057: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20058: LD_ADDR_VAR 0 10
20062: PUSH
20063: LD_VAR 0 10
20067: PUSH
20068: LD_VAR 0 6
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: CALL_OW 259
20080: PUSH
20081: LD_REAL  1.15000000000000E+0000
20084: MUL
20085: MUL
20086: ST_TO_ADDR
// end ; unit_vehicle :
20087: GO 20911
20089: LD_INT 2
20091: DOUBLE
20092: EQUAL
20093: IFTRUE 20097
20095: GO 20899
20097: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20098: LD_VAR 0 6
20102: PPUSH
20103: CALL_OW 264
20107: PUSH
20108: LD_INT 2
20110: PUSH
20111: LD_INT 42
20113: PUSH
20114: LD_INT 24
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: IN
20122: IFFALSE 20143
// points := [ 25 , 5 , 3 ] ;
20124: LD_ADDR_VAR 0 9
20128: PUSH
20129: LD_INT 25
20131: PUSH
20132: LD_INT 5
20134: PUSH
20135: LD_INT 3
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20143: LD_VAR 0 6
20147: PPUSH
20148: CALL_OW 264
20152: PUSH
20153: LD_INT 4
20155: PUSH
20156: LD_INT 43
20158: PUSH
20159: LD_INT 25
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: IN
20167: IFFALSE 20188
// points := [ 40 , 15 , 5 ] ;
20169: LD_ADDR_VAR 0 9
20173: PUSH
20174: LD_INT 40
20176: PUSH
20177: LD_INT 15
20179: PUSH
20180: LD_INT 5
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20188: LD_VAR 0 6
20192: PPUSH
20193: CALL_OW 264
20197: PUSH
20198: LD_INT 3
20200: PUSH
20201: LD_INT 23
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: IN
20208: IFFALSE 20229
// points := [ 7 , 25 , 8 ] ;
20210: LD_ADDR_VAR 0 9
20214: PUSH
20215: LD_INT 7
20217: PUSH
20218: LD_INT 25
20220: PUSH
20221: LD_INT 8
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20229: LD_VAR 0 6
20233: PPUSH
20234: CALL_OW 264
20238: PUSH
20239: LD_INT 5
20241: PUSH
20242: LD_INT 27
20244: PUSH
20245: LD_INT 44
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: IN
20253: IFFALSE 20274
// points := [ 14 , 50 , 16 ] ;
20255: LD_ADDR_VAR 0 9
20259: PUSH
20260: LD_INT 14
20262: PUSH
20263: LD_INT 50
20265: PUSH
20266: LD_INT 16
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20274: LD_VAR 0 6
20278: PPUSH
20279: CALL_OW 264
20283: PUSH
20284: LD_INT 6
20286: PUSH
20287: LD_INT 46
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: IN
20294: IFFALSE 20315
// points := [ 32 , 120 , 70 ] ;
20296: LD_ADDR_VAR 0 9
20300: PUSH
20301: LD_INT 32
20303: PUSH
20304: LD_INT 120
20306: PUSH
20307: LD_INT 70
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20315: LD_VAR 0 6
20319: PPUSH
20320: CALL_OW 264
20324: PUSH
20325: LD_INT 7
20327: PUSH
20328: LD_INT 28
20330: PUSH
20331: LD_INT 45
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: IN
20339: IFFALSE 20360
// points := [ 35 , 20 , 45 ] ;
20341: LD_ADDR_VAR 0 9
20345: PUSH
20346: LD_INT 35
20348: PUSH
20349: LD_INT 20
20351: PUSH
20352: LD_INT 45
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20360: LD_VAR 0 6
20364: PPUSH
20365: CALL_OW 264
20369: PUSH
20370: LD_INT 47
20372: PUSH
20373: EMPTY
20374: LIST
20375: IN
20376: IFFALSE 20397
// points := [ 67 , 45 , 75 ] ;
20378: LD_ADDR_VAR 0 9
20382: PUSH
20383: LD_INT 67
20385: PUSH
20386: LD_INT 45
20388: PUSH
20389: LD_INT 75
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20397: LD_VAR 0 6
20401: PPUSH
20402: CALL_OW 264
20406: PUSH
20407: LD_INT 26
20409: PUSH
20410: EMPTY
20411: LIST
20412: IN
20413: IFFALSE 20434
// points := [ 120 , 30 , 80 ] ;
20415: LD_ADDR_VAR 0 9
20419: PUSH
20420: LD_INT 120
20422: PUSH
20423: LD_INT 30
20425: PUSH
20426: LD_INT 80
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20434: LD_VAR 0 6
20438: PPUSH
20439: CALL_OW 264
20443: PUSH
20444: LD_INT 22
20446: PUSH
20447: EMPTY
20448: LIST
20449: IN
20450: IFFALSE 20471
// points := [ 40 , 1 , 1 ] ;
20452: LD_ADDR_VAR 0 9
20456: PUSH
20457: LD_INT 40
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20471: LD_VAR 0 6
20475: PPUSH
20476: CALL_OW 264
20480: PUSH
20481: LD_INT 29
20483: PUSH
20484: EMPTY
20485: LIST
20486: IN
20487: IFFALSE 20508
// points := [ 70 , 200 , 400 ] ;
20489: LD_ADDR_VAR 0 9
20493: PUSH
20494: LD_INT 70
20496: PUSH
20497: LD_INT 200
20499: PUSH
20500: LD_INT 400
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20508: LD_VAR 0 6
20512: PPUSH
20513: CALL_OW 264
20517: PUSH
20518: LD_INT 14
20520: PUSH
20521: LD_INT 53
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: IN
20528: IFFALSE 20549
// points := [ 40 , 10 , 20 ] ;
20530: LD_ADDR_VAR 0 9
20534: PUSH
20535: LD_INT 40
20537: PUSH
20538: LD_INT 10
20540: PUSH
20541: LD_INT 20
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20549: LD_VAR 0 6
20553: PPUSH
20554: CALL_OW 264
20558: PUSH
20559: LD_INT 9
20561: PUSH
20562: EMPTY
20563: LIST
20564: IN
20565: IFFALSE 20586
// points := [ 5 , 70 , 20 ] ;
20567: LD_ADDR_VAR 0 9
20571: PUSH
20572: LD_INT 5
20574: PUSH
20575: LD_INT 70
20577: PUSH
20578: LD_INT 20
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20586: LD_VAR 0 6
20590: PPUSH
20591: CALL_OW 264
20595: PUSH
20596: LD_INT 10
20598: PUSH
20599: EMPTY
20600: LIST
20601: IN
20602: IFFALSE 20623
// points := [ 35 , 110 , 70 ] ;
20604: LD_ADDR_VAR 0 9
20608: PUSH
20609: LD_INT 35
20611: PUSH
20612: LD_INT 110
20614: PUSH
20615: LD_INT 70
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20623: LD_VAR 0 6
20627: PPUSH
20628: CALL_OW 265
20632: PUSH
20633: LD_INT 25
20635: EQUAL
20636: IFFALSE 20657
// points := [ 80 , 65 , 100 ] ;
20638: LD_ADDR_VAR 0 9
20642: PUSH
20643: LD_INT 80
20645: PUSH
20646: LD_INT 65
20648: PUSH
20649: LD_INT 100
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20657: LD_VAR 0 6
20661: PPUSH
20662: CALL_OW 263
20666: PUSH
20667: LD_INT 1
20669: EQUAL
20670: IFFALSE 20705
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20672: LD_ADDR_VAR 0 10
20676: PUSH
20677: LD_VAR 0 10
20681: PUSH
20682: LD_VAR 0 6
20686: PPUSH
20687: CALL_OW 311
20691: PPUSH
20692: LD_INT 3
20694: PPUSH
20695: CALL_OW 259
20699: PUSH
20700: LD_INT 4
20702: MUL
20703: MUL
20704: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20705: LD_VAR 0 6
20709: PPUSH
20710: CALL_OW 263
20714: PUSH
20715: LD_INT 2
20717: EQUAL
20718: IFFALSE 20769
// begin j := IsControledBy ( i ) ;
20720: LD_ADDR_VAR 0 7
20724: PUSH
20725: LD_VAR 0 6
20729: PPUSH
20730: CALL_OW 312
20734: ST_TO_ADDR
// if j then
20735: LD_VAR 0 7
20739: IFFALSE 20769
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20741: LD_ADDR_VAR 0 10
20745: PUSH
20746: LD_VAR 0 10
20750: PUSH
20751: LD_VAR 0 7
20755: PPUSH
20756: LD_INT 3
20758: PPUSH
20759: CALL_OW 259
20763: PUSH
20764: LD_INT 3
20766: MUL
20767: MUL
20768: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20769: LD_VAR 0 6
20773: PPUSH
20774: CALL_OW 264
20778: PUSH
20779: LD_INT 5
20781: PUSH
20782: LD_INT 6
20784: PUSH
20785: LD_INT 46
20787: PUSH
20788: LD_INT 44
20790: PUSH
20791: LD_INT 47
20793: PUSH
20794: LD_INT 45
20796: PUSH
20797: LD_INT 28
20799: PUSH
20800: LD_INT 7
20802: PUSH
20803: LD_INT 27
20805: PUSH
20806: LD_INT 29
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: IN
20821: PUSH
20822: LD_VAR 0 1
20826: PPUSH
20827: LD_INT 52
20829: PPUSH
20830: CALL_OW 321
20834: PUSH
20835: LD_INT 2
20837: EQUAL
20838: AND
20839: IFFALSE 20856
// bpoints := bpoints * 1.2 ;
20841: LD_ADDR_VAR 0 10
20845: PUSH
20846: LD_VAR 0 10
20850: PUSH
20851: LD_REAL  1.20000000000000E+0000
20854: MUL
20855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20856: LD_VAR 0 6
20860: PPUSH
20861: CALL_OW 264
20865: PUSH
20866: LD_INT 6
20868: PUSH
20869: LD_INT 46
20871: PUSH
20872: LD_INT 47
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: IN
20880: IFFALSE 20897
// bpoints := bpoints * 1.2 ;
20882: LD_ADDR_VAR 0 10
20886: PUSH
20887: LD_VAR 0 10
20891: PUSH
20892: LD_REAL  1.20000000000000E+0000
20895: MUL
20896: ST_TO_ADDR
// end ; unit_building :
20897: GO 20911
20899: LD_INT 3
20901: DOUBLE
20902: EQUAL
20903: IFTRUE 20907
20905: GO 20910
20907: POP
// ; end ;
20908: GO 20911
20910: POP
// for j = 1 to 3 do
20911: LD_ADDR_VAR 0 7
20915: PUSH
20916: DOUBLE
20917: LD_INT 1
20919: DEC
20920: ST_TO_ADDR
20921: LD_INT 3
20923: PUSH
20924: FOR_TO
20925: IFFALSE 20978
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20927: LD_ADDR_VAR 0 5
20931: PUSH
20932: LD_VAR 0 5
20936: PPUSH
20937: LD_VAR 0 7
20941: PPUSH
20942: LD_VAR 0 5
20946: PUSH
20947: LD_VAR 0 7
20951: ARRAY
20952: PUSH
20953: LD_VAR 0 9
20957: PUSH
20958: LD_VAR 0 7
20962: ARRAY
20963: PUSH
20964: LD_VAR 0 10
20968: MUL
20969: PLUS
20970: PPUSH
20971: CALL_OW 1
20975: ST_TO_ADDR
20976: GO 20924
20978: POP
20979: POP
// end ;
20980: GO 19463
20982: POP
20983: POP
// result := Replace ( result , 4 , tmp ) ;
20984: LD_ADDR_VAR 0 5
20988: PUSH
20989: LD_VAR 0 5
20993: PPUSH
20994: LD_INT 4
20996: PPUSH
20997: LD_VAR 0 8
21001: PPUSH
21002: CALL_OW 1
21006: ST_TO_ADDR
// end ;
21007: LD_VAR 0 5
21011: RET
// export function DangerAtRange ( unit , range ) ; begin
21012: LD_INT 0
21014: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21015: LD_ADDR_VAR 0 3
21019: PUSH
21020: LD_VAR 0 1
21024: PPUSH
21025: CALL_OW 255
21029: PPUSH
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 250
21039: PPUSH
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 251
21049: PPUSH
21050: LD_VAR 0 2
21054: PPUSH
21055: CALL 19315 0 4
21059: ST_TO_ADDR
// end ;
21060: LD_VAR 0 3
21064: RET
// export function DangerInArea ( side , area ) ; begin
21065: LD_INT 0
21067: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21068: LD_ADDR_VAR 0 3
21072: PUSH
21073: LD_VAR 0 2
21077: PPUSH
21078: LD_INT 81
21080: PUSH
21081: LD_VAR 0 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 70
21094: ST_TO_ADDR
// end ;
21095: LD_VAR 0 3
21099: RET
// export function IsExtension ( b ) ; begin
21100: LD_INT 0
21102: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21103: LD_ADDR_VAR 0 2
21107: PUSH
21108: LD_VAR 0 1
21112: PUSH
21113: LD_INT 23
21115: PUSH
21116: LD_INT 20
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_INT 17
21124: PUSH
21125: LD_INT 24
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 19
21133: PUSH
21134: LD_INT 16
21136: PUSH
21137: LD_INT 25
21139: PUSH
21140: LD_INT 18
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: IN
21155: ST_TO_ADDR
// end ;
21156: LD_VAR 0 2
21160: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
21165: PPUSH
// result := [ ] ;
21166: LD_ADDR_VAR 0 3
21170: PUSH
21171: EMPTY
21172: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: LD_VAR 0 2
21182: PPUSH
21183: LD_INT 21
21185: PUSH
21186: LD_INT 3
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PPUSH
21193: CALL_OW 70
21197: ST_TO_ADDR
// if not tmp then
21198: LD_VAR 0 4
21202: NOT
21203: IFFALSE 21207
// exit ;
21205: GO 21265
// for i in tmp do
21207: LD_ADDR_VAR 0 5
21211: PUSH
21212: LD_VAR 0 4
21216: PUSH
21217: FOR_IN
21218: IFFALSE 21253
// if GetBase ( i ) <> base then
21220: LD_VAR 0 5
21224: PPUSH
21225: CALL_OW 274
21229: PUSH
21230: LD_VAR 0 1
21234: NONEQUAL
21235: IFFALSE 21251
// ComLinkToBase ( base , i ) ;
21237: LD_VAR 0 1
21241: PPUSH
21242: LD_VAR 0 5
21246: PPUSH
21247: CALL_OW 169
21251: GO 21217
21253: POP
21254: POP
// result := tmp ;
21255: LD_ADDR_VAR 0 3
21259: PUSH
21260: LD_VAR 0 4
21264: ST_TO_ADDR
// end ;
21265: LD_VAR 0 3
21269: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21270: LD_INT 0
21272: PPUSH
21273: PPUSH
// if BuildingStatus ( b ) = bs_build then
21274: LD_VAR 0 2
21278: PPUSH
21279: CALL_OW 461
21283: PUSH
21284: LD_INT 1
21286: EQUAL
21287: IFFALSE 21347
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21289: LD_VAR 0 1
21293: PPUSH
21294: LD_STRING h
21296: PUSH
21297: LD_VAR 0 2
21301: PPUSH
21302: CALL_OW 250
21306: PUSH
21307: LD_VAR 0 2
21311: PPUSH
21312: CALL_OW 251
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: PPUSH
21343: CALL_OW 446
// end ;
21347: LD_VAR 0 3
21351: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21352: LD_INT 0
21354: PPUSH
21355: PPUSH
21356: PPUSH
21357: PPUSH
21358: PPUSH
21359: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21360: LD_VAR 0 1
21364: NOT
21365: PUSH
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 263
21375: PUSH
21376: LD_INT 2
21378: EQUAL
21379: NOT
21380: OR
21381: IFFALSE 21385
// exit ;
21383: GO 21701
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21385: LD_ADDR_VAR 0 6
21389: PUSH
21390: LD_INT 22
21392: PUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 255
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 2
21409: PUSH
21410: LD_INT 30
21412: PUSH
21413: LD_INT 36
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 34
21422: PUSH
21423: LD_INT 31
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PPUSH
21439: CALL_OW 69
21443: ST_TO_ADDR
// if not tmp then
21444: LD_VAR 0 6
21448: NOT
21449: IFFALSE 21453
// exit ;
21451: GO 21701
// result := [ ] ;
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: EMPTY
21459: ST_TO_ADDR
// for i in tmp do
21460: LD_ADDR_VAR 0 3
21464: PUSH
21465: LD_VAR 0 6
21469: PUSH
21470: FOR_IN
21471: IFFALSE 21542
// begin t := UnitsInside ( i ) ;
21473: LD_ADDR_VAR 0 4
21477: PUSH
21478: LD_VAR 0 3
21482: PPUSH
21483: CALL_OW 313
21487: ST_TO_ADDR
// if t then
21488: LD_VAR 0 4
21492: IFFALSE 21540
// for j in t do
21494: LD_ADDR_VAR 0 7
21498: PUSH
21499: LD_VAR 0 4
21503: PUSH
21504: FOR_IN
21505: IFFALSE 21538
// result := Insert ( result , result + 1 , j ) ;
21507: LD_ADDR_VAR 0 2
21511: PUSH
21512: LD_VAR 0 2
21516: PPUSH
21517: LD_VAR 0 2
21521: PUSH
21522: LD_INT 1
21524: PLUS
21525: PPUSH
21526: LD_VAR 0 7
21530: PPUSH
21531: CALL_OW 2
21535: ST_TO_ADDR
21536: GO 21504
21538: POP
21539: POP
// end ;
21540: GO 21470
21542: POP
21543: POP
// if not result then
21544: LD_VAR 0 2
21548: NOT
21549: IFFALSE 21553
// exit ;
21551: GO 21701
// mech := result [ 1 ] ;
21553: LD_ADDR_VAR 0 5
21557: PUSH
21558: LD_VAR 0 2
21562: PUSH
21563: LD_INT 1
21565: ARRAY
21566: ST_TO_ADDR
// if result > 1 then
21567: LD_VAR 0 2
21571: PUSH
21572: LD_INT 1
21574: GREATER
21575: IFFALSE 21687
// for i = 2 to result do
21577: LD_ADDR_VAR 0 3
21581: PUSH
21582: DOUBLE
21583: LD_INT 2
21585: DEC
21586: ST_TO_ADDR
21587: LD_VAR 0 2
21591: PUSH
21592: FOR_TO
21593: IFFALSE 21685
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21595: LD_ADDR_VAR 0 4
21599: PUSH
21600: LD_VAR 0 2
21604: PUSH
21605: LD_VAR 0 3
21609: ARRAY
21610: PPUSH
21611: LD_INT 3
21613: PPUSH
21614: CALL_OW 259
21618: PUSH
21619: LD_VAR 0 2
21623: PUSH
21624: LD_VAR 0 3
21628: ARRAY
21629: PPUSH
21630: CALL_OW 432
21634: MINUS
21635: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21636: LD_VAR 0 4
21640: PUSH
21641: LD_VAR 0 5
21645: PPUSH
21646: LD_INT 3
21648: PPUSH
21649: CALL_OW 259
21653: PUSH
21654: LD_VAR 0 5
21658: PPUSH
21659: CALL_OW 432
21663: MINUS
21664: GREATEREQUAL
21665: IFFALSE 21683
// mech := result [ i ] ;
21667: LD_ADDR_VAR 0 5
21671: PUSH
21672: LD_VAR 0 2
21676: PUSH
21677: LD_VAR 0 3
21681: ARRAY
21682: ST_TO_ADDR
// end ;
21683: GO 21592
21685: POP
21686: POP
// ComLinkTo ( vehicle , mech ) ;
21687: LD_VAR 0 1
21691: PPUSH
21692: LD_VAR 0 5
21696: PPUSH
21697: CALL_OW 135
// end ;
21701: LD_VAR 0 2
21705: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
// result := [ ] ;
21721: LD_ADDR_VAR 0 7
21725: PUSH
21726: EMPTY
21727: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 266
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: IN
21748: NOT
21749: IFFALSE 21753
// exit ;
21751: GO 23384
// if name then
21753: LD_VAR 0 3
21757: IFFALSE 21773
// SetBName ( base_dep , name ) ;
21759: LD_VAR 0 1
21763: PPUSH
21764: LD_VAR 0 3
21768: PPUSH
21769: CALL_OW 500
// base := GetBase ( base_dep ) ;
21773: LD_ADDR_VAR 0 15
21777: PUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 274
21787: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21788: LD_ADDR_VAR 0 16
21792: PUSH
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 255
21802: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21803: LD_ADDR_VAR 0 17
21807: PUSH
21808: LD_VAR 0 1
21812: PPUSH
21813: CALL_OW 248
21817: ST_TO_ADDR
// if sources then
21818: LD_VAR 0 5
21822: IFFALSE 21869
// for i = 1 to 3 do
21824: LD_ADDR_VAR 0 8
21828: PUSH
21829: DOUBLE
21830: LD_INT 1
21832: DEC
21833: ST_TO_ADDR
21834: LD_INT 3
21836: PUSH
21837: FOR_TO
21838: IFFALSE 21867
// AddResourceType ( base , i , sources [ i ] ) ;
21840: LD_VAR 0 15
21844: PPUSH
21845: LD_VAR 0 8
21849: PPUSH
21850: LD_VAR 0 5
21854: PUSH
21855: LD_VAR 0 8
21859: ARRAY
21860: PPUSH
21861: CALL_OW 276
21865: GO 21837
21867: POP
21868: POP
// buildings := GetBaseBuildings ( base , area ) ;
21869: LD_ADDR_VAR 0 18
21873: PUSH
21874: LD_VAR 0 15
21878: PPUSH
21879: LD_VAR 0 2
21883: PPUSH
21884: CALL 21161 0 2
21888: ST_TO_ADDR
// InitHc ;
21889: CALL_OW 19
// InitUc ;
21893: CALL_OW 18
// uc_side := side ;
21897: LD_ADDR_OWVAR 20
21901: PUSH
21902: LD_VAR 0 16
21906: ST_TO_ADDR
// uc_nation := nation ;
21907: LD_ADDR_OWVAR 21
21911: PUSH
21912: LD_VAR 0 17
21916: ST_TO_ADDR
// if buildings then
21917: LD_VAR 0 18
21921: IFFALSE 23243
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21923: LD_ADDR_VAR 0 19
21927: PUSH
21928: LD_VAR 0 18
21932: PPUSH
21933: LD_INT 2
21935: PUSH
21936: LD_INT 30
21938: PUSH
21939: LD_INT 29
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 30
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: PPUSH
21961: CALL_OW 72
21965: ST_TO_ADDR
// if tmp then
21966: LD_VAR 0 19
21970: IFFALSE 22018
// for i in tmp do
21972: LD_ADDR_VAR 0 8
21976: PUSH
21977: LD_VAR 0 19
21981: PUSH
21982: FOR_IN
21983: IFFALSE 22016
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21985: LD_VAR 0 8
21989: PPUSH
21990: CALL_OW 250
21994: PPUSH
21995: LD_VAR 0 8
21999: PPUSH
22000: CALL_OW 251
22004: PPUSH
22005: LD_VAR 0 16
22009: PPUSH
22010: CALL_OW 441
22014: GO 21982
22016: POP
22017: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22018: LD_VAR 0 18
22022: PPUSH
22023: LD_INT 2
22025: PUSH
22026: LD_INT 30
22028: PUSH
22029: LD_INT 32
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 30
22038: PUSH
22039: LD_INT 33
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: PPUSH
22051: CALL_OW 72
22055: IFFALSE 22143
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22057: LD_ADDR_VAR 0 8
22061: PUSH
22062: LD_VAR 0 18
22066: PPUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 30
22072: PUSH
22073: LD_INT 32
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 33
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 72
22099: PUSH
22100: FOR_IN
22101: IFFALSE 22141
// begin if not GetBWeapon ( i ) then
22103: LD_VAR 0 8
22107: PPUSH
22108: CALL_OW 269
22112: NOT
22113: IFFALSE 22139
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22115: LD_VAR 0 8
22119: PPUSH
22120: LD_VAR 0 8
22124: PPUSH
22125: LD_VAR 0 2
22129: PPUSH
22130: CALL 23389 0 2
22134: PPUSH
22135: CALL_OW 431
// end ;
22139: GO 22100
22141: POP
22142: POP
// end ; for i = 1 to personel do
22143: LD_ADDR_VAR 0 8
22147: PUSH
22148: DOUBLE
22149: LD_INT 1
22151: DEC
22152: ST_TO_ADDR
22153: LD_VAR 0 6
22157: PUSH
22158: FOR_TO
22159: IFFALSE 23223
// begin if i > 4 then
22161: LD_VAR 0 8
22165: PUSH
22166: LD_INT 4
22168: GREATER
22169: IFFALSE 22173
// break ;
22171: GO 23223
// case i of 1 :
22173: LD_VAR 0 8
22177: PUSH
22178: LD_INT 1
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22266
22186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22187: LD_ADDR_VAR 0 12
22191: PUSH
22192: LD_VAR 0 18
22196: PPUSH
22197: LD_INT 22
22199: PUSH
22200: LD_VAR 0 16
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 58
22211: PUSH
22212: EMPTY
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: LD_INT 30
22220: PUSH
22221: LD_INT 32
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 30
22230: PUSH
22231: LD_INT 4
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 30
22240: PUSH
22241: LD_INT 5
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: PPUSH
22259: CALL_OW 72
22263: ST_TO_ADDR
22264: GO 22488
22266: LD_INT 2
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22336
22274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22275: LD_ADDR_VAR 0 12
22279: PUSH
22280: LD_VAR 0 18
22284: PPUSH
22285: LD_INT 22
22287: PUSH
22288: LD_VAR 0 16
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 30
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 30
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 72
22333: ST_TO_ADDR
22334: GO 22488
22336: LD_INT 3
22338: DOUBLE
22339: EQUAL
22340: IFTRUE 22344
22342: GO 22406
22344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22345: LD_ADDR_VAR 0 12
22349: PUSH
22350: LD_VAR 0 18
22354: PPUSH
22355: LD_INT 22
22357: PUSH
22358: LD_VAR 0 16
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 30
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 30
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PPUSH
22399: CALL_OW 72
22403: ST_TO_ADDR
22404: GO 22488
22406: LD_INT 4
22408: DOUBLE
22409: EQUAL
22410: IFTRUE 22414
22412: GO 22487
22414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22415: LD_ADDR_VAR 0 12
22419: PUSH
22420: LD_VAR 0 18
22424: PPUSH
22425: LD_INT 22
22427: PUSH
22428: LD_VAR 0 16
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 2
22439: PUSH
22440: LD_INT 30
22442: PUSH
22443: LD_INT 6
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 30
22452: PUSH
22453: LD_INT 7
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 8
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 72
22484: ST_TO_ADDR
22485: GO 22488
22487: POP
// if i = 1 then
22488: LD_VAR 0 8
22492: PUSH
22493: LD_INT 1
22495: EQUAL
22496: IFFALSE 22607
// begin tmp := [ ] ;
22498: LD_ADDR_VAR 0 19
22502: PUSH
22503: EMPTY
22504: ST_TO_ADDR
// for j in f do
22505: LD_ADDR_VAR 0 9
22509: PUSH
22510: LD_VAR 0 12
22514: PUSH
22515: FOR_IN
22516: IFFALSE 22589
// if GetBType ( j ) = b_bunker then
22518: LD_VAR 0 9
22522: PPUSH
22523: CALL_OW 266
22527: PUSH
22528: LD_INT 32
22530: EQUAL
22531: IFFALSE 22558
// tmp := Insert ( tmp , 1 , j ) else
22533: LD_ADDR_VAR 0 19
22537: PUSH
22538: LD_VAR 0 19
22542: PPUSH
22543: LD_INT 1
22545: PPUSH
22546: LD_VAR 0 9
22550: PPUSH
22551: CALL_OW 2
22555: ST_TO_ADDR
22556: GO 22587
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22558: LD_ADDR_VAR 0 19
22562: PUSH
22563: LD_VAR 0 19
22567: PPUSH
22568: LD_VAR 0 19
22572: PUSH
22573: LD_INT 1
22575: PLUS
22576: PPUSH
22577: LD_VAR 0 9
22581: PPUSH
22582: CALL_OW 2
22586: ST_TO_ADDR
22587: GO 22515
22589: POP
22590: POP
// if tmp then
22591: LD_VAR 0 19
22595: IFFALSE 22607
// f := tmp ;
22597: LD_ADDR_VAR 0 12
22601: PUSH
22602: LD_VAR 0 19
22606: ST_TO_ADDR
// end ; x := personel [ i ] ;
22607: LD_ADDR_VAR 0 13
22611: PUSH
22612: LD_VAR 0 6
22616: PUSH
22617: LD_VAR 0 8
22621: ARRAY
22622: ST_TO_ADDR
// if x = - 1 then
22623: LD_VAR 0 13
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: EQUAL
22632: IFFALSE 22841
// begin for j in f do
22634: LD_ADDR_VAR 0 9
22638: PUSH
22639: LD_VAR 0 12
22643: PUSH
22644: FOR_IN
22645: IFFALSE 22837
// repeat InitHc ;
22647: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22651: LD_VAR 0 9
22655: PPUSH
22656: CALL_OW 266
22660: PUSH
22661: LD_INT 5
22663: EQUAL
22664: IFFALSE 22734
// begin if UnitsInside ( j ) < 3 then
22666: LD_VAR 0 9
22670: PPUSH
22671: CALL_OW 313
22675: PUSH
22676: LD_INT 3
22678: LESS
22679: IFFALSE 22715
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22681: LD_INT 0
22683: PPUSH
22684: LD_INT 5
22686: PUSH
22687: LD_INT 8
22689: PUSH
22690: LD_INT 9
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: LIST
22697: PUSH
22698: LD_VAR 0 17
22702: ARRAY
22703: PPUSH
22704: LD_VAR 0 4
22708: PPUSH
22709: CALL_OW 380
22713: GO 22732
// PrepareHuman ( false , i , skill ) ;
22715: LD_INT 0
22717: PPUSH
22718: LD_VAR 0 8
22722: PPUSH
22723: LD_VAR 0 4
22727: PPUSH
22728: CALL_OW 380
// end else
22732: GO 22751
// PrepareHuman ( false , i , skill ) ;
22734: LD_INT 0
22736: PPUSH
22737: LD_VAR 0 8
22741: PPUSH
22742: LD_VAR 0 4
22746: PPUSH
22747: CALL_OW 380
// un := CreateHuman ;
22751: LD_ADDR_VAR 0 14
22755: PUSH
22756: CALL_OW 44
22760: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22761: LD_ADDR_VAR 0 7
22765: PUSH
22766: LD_VAR 0 7
22770: PPUSH
22771: LD_INT 1
22773: PPUSH
22774: LD_VAR 0 14
22778: PPUSH
22779: CALL_OW 2
22783: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22784: LD_VAR 0 14
22788: PPUSH
22789: LD_VAR 0 9
22793: PPUSH
22794: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22798: LD_VAR 0 9
22802: PPUSH
22803: CALL_OW 313
22807: PUSH
22808: LD_INT 6
22810: EQUAL
22811: PUSH
22812: LD_VAR 0 9
22816: PPUSH
22817: CALL_OW 266
22821: PUSH
22822: LD_INT 32
22824: PUSH
22825: LD_INT 31
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: IN
22832: OR
22833: IFFALSE 22647
22835: GO 22644
22837: POP
22838: POP
// end else
22839: GO 23221
// for j = 1 to x do
22841: LD_ADDR_VAR 0 9
22845: PUSH
22846: DOUBLE
22847: LD_INT 1
22849: DEC
22850: ST_TO_ADDR
22851: LD_VAR 0 13
22855: PUSH
22856: FOR_TO
22857: IFFALSE 23219
// begin InitHc ;
22859: CALL_OW 19
// if not f then
22863: LD_VAR 0 12
22867: NOT
22868: IFFALSE 22957
// begin PrepareHuman ( false , i , skill ) ;
22870: LD_INT 0
22872: PPUSH
22873: LD_VAR 0 8
22877: PPUSH
22878: LD_VAR 0 4
22882: PPUSH
22883: CALL_OW 380
// un := CreateHuman ;
22887: LD_ADDR_VAR 0 14
22891: PUSH
22892: CALL_OW 44
22896: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22897: LD_ADDR_VAR 0 7
22901: PUSH
22902: LD_VAR 0 7
22906: PPUSH
22907: LD_INT 1
22909: PPUSH
22910: LD_VAR 0 14
22914: PPUSH
22915: CALL_OW 2
22919: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22920: LD_VAR 0 14
22924: PPUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 250
22934: PPUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 251
22944: PPUSH
22945: LD_INT 10
22947: PPUSH
22948: LD_INT 0
22950: PPUSH
22951: CALL_OW 50
// continue ;
22955: GO 22856
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22957: LD_VAR 0 12
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: CALL_OW 313
22970: PUSH
22971: LD_VAR 0 12
22975: PUSH
22976: LD_INT 1
22978: ARRAY
22979: PPUSH
22980: CALL_OW 266
22984: PUSH
22985: LD_INT 32
22987: PUSH
22988: LD_INT 31
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: IN
22995: AND
22996: PUSH
22997: LD_VAR 0 12
23001: PUSH
23002: LD_INT 1
23004: ARRAY
23005: PPUSH
23006: CALL_OW 313
23010: PUSH
23011: LD_INT 6
23013: EQUAL
23014: OR
23015: IFFALSE 23035
// f := Delete ( f , 1 ) ;
23017: LD_ADDR_VAR 0 12
23021: PUSH
23022: LD_VAR 0 12
23026: PPUSH
23027: LD_INT 1
23029: PPUSH
23030: CALL_OW 3
23034: ST_TO_ADDR
// if not f then
23035: LD_VAR 0 12
23039: NOT
23040: IFFALSE 23058
// begin x := x + 2 ;
23042: LD_ADDR_VAR 0 13
23046: PUSH
23047: LD_VAR 0 13
23051: PUSH
23052: LD_INT 2
23054: PLUS
23055: ST_TO_ADDR
// continue ;
23056: GO 22856
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23058: LD_VAR 0 12
23062: PUSH
23063: LD_INT 1
23065: ARRAY
23066: PPUSH
23067: CALL_OW 266
23071: PUSH
23072: LD_INT 5
23074: EQUAL
23075: IFFALSE 23149
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23077: LD_VAR 0 12
23081: PUSH
23082: LD_INT 1
23084: ARRAY
23085: PPUSH
23086: CALL_OW 313
23090: PUSH
23091: LD_INT 3
23093: LESS
23094: IFFALSE 23130
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23096: LD_INT 0
23098: PPUSH
23099: LD_INT 5
23101: PUSH
23102: LD_INT 8
23104: PUSH
23105: LD_INT 9
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: PUSH
23113: LD_VAR 0 17
23117: ARRAY
23118: PPUSH
23119: LD_VAR 0 4
23123: PPUSH
23124: CALL_OW 380
23128: GO 23147
// PrepareHuman ( false , i , skill ) ;
23130: LD_INT 0
23132: PPUSH
23133: LD_VAR 0 8
23137: PPUSH
23138: LD_VAR 0 4
23142: PPUSH
23143: CALL_OW 380
// end else
23147: GO 23166
// PrepareHuman ( false , i , skill ) ;
23149: LD_INT 0
23151: PPUSH
23152: LD_VAR 0 8
23156: PPUSH
23157: LD_VAR 0 4
23161: PPUSH
23162: CALL_OW 380
// un := CreateHuman ;
23166: LD_ADDR_VAR 0 14
23170: PUSH
23171: CALL_OW 44
23175: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23176: LD_ADDR_VAR 0 7
23180: PUSH
23181: LD_VAR 0 7
23185: PPUSH
23186: LD_INT 1
23188: PPUSH
23189: LD_VAR 0 14
23193: PPUSH
23194: CALL_OW 2
23198: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23199: LD_VAR 0 14
23203: PPUSH
23204: LD_VAR 0 12
23208: PUSH
23209: LD_INT 1
23211: ARRAY
23212: PPUSH
23213: CALL_OW 52
// end ;
23217: GO 22856
23219: POP
23220: POP
// end ;
23221: GO 22158
23223: POP
23224: POP
// result := result ^ buildings ;
23225: LD_ADDR_VAR 0 7
23229: PUSH
23230: LD_VAR 0 7
23234: PUSH
23235: LD_VAR 0 18
23239: ADD
23240: ST_TO_ADDR
// end else
23241: GO 23384
// begin for i = 1 to personel do
23243: LD_ADDR_VAR 0 8
23247: PUSH
23248: DOUBLE
23249: LD_INT 1
23251: DEC
23252: ST_TO_ADDR
23253: LD_VAR 0 6
23257: PUSH
23258: FOR_TO
23259: IFFALSE 23382
// begin if i > 4 then
23261: LD_VAR 0 8
23265: PUSH
23266: LD_INT 4
23268: GREATER
23269: IFFALSE 23273
// break ;
23271: GO 23382
// x := personel [ i ] ;
23273: LD_ADDR_VAR 0 13
23277: PUSH
23278: LD_VAR 0 6
23282: PUSH
23283: LD_VAR 0 8
23287: ARRAY
23288: ST_TO_ADDR
// if x = - 1 then
23289: LD_VAR 0 13
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: EQUAL
23298: IFFALSE 23302
// continue ;
23300: GO 23258
// PrepareHuman ( false , i , skill ) ;
23302: LD_INT 0
23304: PPUSH
23305: LD_VAR 0 8
23309: PPUSH
23310: LD_VAR 0 4
23314: PPUSH
23315: CALL_OW 380
// un := CreateHuman ;
23319: LD_ADDR_VAR 0 14
23323: PUSH
23324: CALL_OW 44
23328: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23329: LD_VAR 0 14
23333: PPUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL_OW 250
23343: PPUSH
23344: LD_VAR 0 1
23348: PPUSH
23349: CALL_OW 251
23353: PPUSH
23354: LD_INT 10
23356: PPUSH
23357: LD_INT 0
23359: PPUSH
23360: CALL_OW 50
// result := result ^ un ;
23364: LD_ADDR_VAR 0 7
23368: PUSH
23369: LD_VAR 0 7
23373: PUSH
23374: LD_VAR 0 14
23378: ADD
23379: ST_TO_ADDR
// end ;
23380: GO 23258
23382: POP
23383: POP
// end ; end ;
23384: LD_VAR 0 7
23388: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
// result := false ;
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_INT 0
23414: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23415: LD_VAR 0 1
23419: NOT
23420: PUSH
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 266
23430: PUSH
23431: LD_INT 32
23433: PUSH
23434: LD_INT 33
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: IN
23441: NOT
23442: OR
23443: IFFALSE 23447
// exit ;
23445: GO 24583
// nat := GetNation ( tower ) ;
23447: LD_ADDR_VAR 0 12
23451: PUSH
23452: LD_VAR 0 1
23456: PPUSH
23457: CALL_OW 248
23461: ST_TO_ADDR
// side := GetSide ( tower ) ;
23462: LD_ADDR_VAR 0 16
23466: PUSH
23467: LD_VAR 0 1
23471: PPUSH
23472: CALL_OW 255
23476: ST_TO_ADDR
// x := GetX ( tower ) ;
23477: LD_ADDR_VAR 0 10
23481: PUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 250
23491: ST_TO_ADDR
// y := GetY ( tower ) ;
23492: LD_ADDR_VAR 0 11
23496: PUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: CALL_OW 251
23506: ST_TO_ADDR
// if not x or not y then
23507: LD_VAR 0 10
23511: NOT
23512: PUSH
23513: LD_VAR 0 11
23517: NOT
23518: OR
23519: IFFALSE 23523
// exit ;
23521: GO 24583
// weapon := 0 ;
23523: LD_ADDR_VAR 0 18
23527: PUSH
23528: LD_INT 0
23530: ST_TO_ADDR
// fac_list := [ ] ;
23531: LD_ADDR_VAR 0 17
23535: PUSH
23536: EMPTY
23537: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23538: LD_ADDR_VAR 0 6
23542: PUSH
23543: LD_VAR 0 1
23547: PPUSH
23548: CALL_OW 274
23552: PPUSH
23553: LD_VAR 0 2
23557: PPUSH
23558: CALL 21161 0 2
23562: PPUSH
23563: LD_INT 30
23565: PUSH
23566: LD_INT 3
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PPUSH
23573: CALL_OW 72
23577: ST_TO_ADDR
// if not factories then
23578: LD_VAR 0 6
23582: NOT
23583: IFFALSE 23587
// exit ;
23585: GO 24583
// for i in factories do
23587: LD_ADDR_VAR 0 8
23591: PUSH
23592: LD_VAR 0 6
23596: PUSH
23597: FOR_IN
23598: IFFALSE 23623
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23600: LD_ADDR_VAR 0 17
23604: PUSH
23605: LD_VAR 0 17
23609: PUSH
23610: LD_VAR 0 8
23614: PPUSH
23615: CALL_OW 478
23619: UNION
23620: ST_TO_ADDR
23621: GO 23597
23623: POP
23624: POP
// if not fac_list then
23625: LD_VAR 0 17
23629: NOT
23630: IFFALSE 23634
// exit ;
23632: GO 24583
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23634: LD_ADDR_VAR 0 5
23638: PUSH
23639: LD_INT 4
23641: PUSH
23642: LD_INT 5
23644: PUSH
23645: LD_INT 9
23647: PUSH
23648: LD_INT 10
23650: PUSH
23651: LD_INT 6
23653: PUSH
23654: LD_INT 7
23656: PUSH
23657: LD_INT 11
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 27
23671: PUSH
23672: LD_INT 28
23674: PUSH
23675: LD_INT 26
23677: PUSH
23678: LD_INT 30
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 43
23689: PUSH
23690: LD_INT 44
23692: PUSH
23693: LD_INT 46
23695: PUSH
23696: LD_INT 45
23698: PUSH
23699: LD_INT 47
23701: PUSH
23702: LD_INT 49
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: PUSH
23718: LD_VAR 0 12
23722: ARRAY
23723: ST_TO_ADDR
// for i in list do
23724: LD_ADDR_VAR 0 8
23728: PUSH
23729: LD_VAR 0 5
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23768
// if not i in fac_list then
23737: LD_VAR 0 8
23741: PUSH
23742: LD_VAR 0 17
23746: IN
23747: NOT
23748: IFFALSE 23766
// list := list diff i ;
23750: LD_ADDR_VAR 0 5
23754: PUSH
23755: LD_VAR 0 5
23759: PUSH
23760: LD_VAR 0 8
23764: DIFF
23765: ST_TO_ADDR
23766: GO 23734
23768: POP
23769: POP
// if not list then
23770: LD_VAR 0 5
23774: NOT
23775: IFFALSE 23779
// exit ;
23777: GO 24583
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23779: LD_VAR 0 12
23783: PUSH
23784: LD_INT 3
23786: EQUAL
23787: PUSH
23788: LD_INT 49
23790: PUSH
23791: LD_VAR 0 5
23795: IN
23796: AND
23797: PUSH
23798: LD_INT 31
23800: PPUSH
23801: LD_VAR 0 16
23805: PPUSH
23806: CALL_OW 321
23810: PUSH
23811: LD_INT 2
23813: EQUAL
23814: AND
23815: IFFALSE 23875
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23817: LD_INT 22
23819: PUSH
23820: LD_VAR 0 16
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 35
23831: PUSH
23832: LD_INT 49
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 91
23841: PUSH
23842: LD_VAR 0 1
23846: PUSH
23847: LD_INT 10
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: PPUSH
23860: CALL_OW 69
23864: NOT
23865: IFFALSE 23875
// weapon := ru_time_lapser ;
23867: LD_ADDR_VAR 0 18
23871: PUSH
23872: LD_INT 49
23874: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23875: LD_VAR 0 12
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: IN
23890: PUSH
23891: LD_INT 11
23893: PUSH
23894: LD_VAR 0 5
23898: IN
23899: PUSH
23900: LD_INT 30
23902: PUSH
23903: LD_VAR 0 5
23907: IN
23908: OR
23909: AND
23910: PUSH
23911: LD_INT 6
23913: PPUSH
23914: LD_VAR 0 16
23918: PPUSH
23919: CALL_OW 321
23923: PUSH
23924: LD_INT 2
23926: EQUAL
23927: AND
23928: IFFALSE 24093
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23930: LD_INT 22
23932: PUSH
23933: LD_VAR 0 16
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: LD_INT 35
23947: PUSH
23948: LD_INT 11
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 35
23957: PUSH
23958: LD_INT 30
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 91
23972: PUSH
23973: LD_VAR 0 1
23977: PUSH
23978: LD_INT 18
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PPUSH
23991: CALL_OW 69
23995: NOT
23996: PUSH
23997: LD_INT 22
23999: PUSH
24000: LD_VAR 0 16
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: LD_INT 30
24014: PUSH
24015: LD_INT 32
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 30
24024: PUSH
24025: LD_INT 33
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 91
24039: PUSH
24040: LD_VAR 0 1
24044: PUSH
24045: LD_INT 12
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: PUSH
24066: LD_INT 2
24068: GREATER
24069: AND
24070: IFFALSE 24093
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24072: LD_ADDR_VAR 0 18
24076: PUSH
24077: LD_INT 11
24079: PUSH
24080: LD_INT 30
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_VAR 0 12
24091: ARRAY
24092: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24093: LD_VAR 0 18
24097: NOT
24098: PUSH
24099: LD_INT 40
24101: PPUSH
24102: LD_VAR 0 16
24106: PPUSH
24107: CALL_OW 321
24111: PUSH
24112: LD_INT 2
24114: EQUAL
24115: AND
24116: PUSH
24117: LD_INT 7
24119: PUSH
24120: LD_VAR 0 5
24124: IN
24125: PUSH
24126: LD_INT 28
24128: PUSH
24129: LD_VAR 0 5
24133: IN
24134: OR
24135: PUSH
24136: LD_INT 45
24138: PUSH
24139: LD_VAR 0 5
24143: IN
24144: OR
24145: AND
24146: IFFALSE 24400
// begin hex := GetHexInfo ( x , y ) ;
24148: LD_ADDR_VAR 0 4
24152: PUSH
24153: LD_VAR 0 10
24157: PPUSH
24158: LD_VAR 0 11
24162: PPUSH
24163: CALL_OW 546
24167: ST_TO_ADDR
// if hex [ 1 ] then
24168: LD_VAR 0 4
24172: PUSH
24173: LD_INT 1
24175: ARRAY
24176: IFFALSE 24180
// exit ;
24178: GO 24583
// height := hex [ 2 ] ;
24180: LD_ADDR_VAR 0 15
24184: PUSH
24185: LD_VAR 0 4
24189: PUSH
24190: LD_INT 2
24192: ARRAY
24193: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24194: LD_ADDR_VAR 0 14
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 3
24207: PUSH
24208: LD_INT 5
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// for i in tmp do
24217: LD_ADDR_VAR 0 8
24221: PUSH
24222: LD_VAR 0 14
24226: PUSH
24227: FOR_IN
24228: IFFALSE 24398
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24230: LD_ADDR_VAR 0 9
24234: PUSH
24235: LD_VAR 0 10
24239: PPUSH
24240: LD_VAR 0 8
24244: PPUSH
24245: LD_INT 5
24247: PPUSH
24248: CALL_OW 272
24252: PUSH
24253: LD_VAR 0 11
24257: PPUSH
24258: LD_VAR 0 8
24262: PPUSH
24263: LD_INT 5
24265: PPUSH
24266: CALL_OW 273
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24275: LD_VAR 0 9
24279: PUSH
24280: LD_INT 1
24282: ARRAY
24283: PPUSH
24284: LD_VAR 0 9
24288: PUSH
24289: LD_INT 2
24291: ARRAY
24292: PPUSH
24293: CALL_OW 488
24297: IFFALSE 24396
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24299: LD_ADDR_VAR 0 4
24303: PUSH
24304: LD_VAR 0 9
24308: PUSH
24309: LD_INT 1
24311: ARRAY
24312: PPUSH
24313: LD_VAR 0 9
24317: PUSH
24318: LD_INT 2
24320: ARRAY
24321: PPUSH
24322: CALL_OW 546
24326: ST_TO_ADDR
// if hex [ 1 ] then
24327: LD_VAR 0 4
24331: PUSH
24332: LD_INT 1
24334: ARRAY
24335: IFFALSE 24339
// continue ;
24337: GO 24227
// h := hex [ 2 ] ;
24339: LD_ADDR_VAR 0 13
24343: PUSH
24344: LD_VAR 0 4
24348: PUSH
24349: LD_INT 2
24351: ARRAY
24352: ST_TO_ADDR
// if h + 7 < height then
24353: LD_VAR 0 13
24357: PUSH
24358: LD_INT 7
24360: PLUS
24361: PUSH
24362: LD_VAR 0 15
24366: LESS
24367: IFFALSE 24396
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24369: LD_ADDR_VAR 0 18
24373: PUSH
24374: LD_INT 7
24376: PUSH
24377: LD_INT 28
24379: PUSH
24380: LD_INT 45
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: PUSH
24388: LD_VAR 0 12
24392: ARRAY
24393: ST_TO_ADDR
// break ;
24394: GO 24398
// end ; end ; end ;
24396: GO 24227
24398: POP
24399: POP
// end ; if not weapon then
24400: LD_VAR 0 18
24404: NOT
24405: IFFALSE 24465
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24407: LD_ADDR_VAR 0 5
24411: PUSH
24412: LD_VAR 0 5
24416: PUSH
24417: LD_INT 11
24419: PUSH
24420: LD_INT 30
24422: PUSH
24423: LD_INT 49
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: DIFF
24431: ST_TO_ADDR
// if not list then
24432: LD_VAR 0 5
24436: NOT
24437: IFFALSE 24441
// exit ;
24439: GO 24583
// weapon := list [ rand ( 1 , list ) ] ;
24441: LD_ADDR_VAR 0 18
24445: PUSH
24446: LD_VAR 0 5
24450: PUSH
24451: LD_INT 1
24453: PPUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL_OW 12
24463: ARRAY
24464: ST_TO_ADDR
// end ; if weapon then
24465: LD_VAR 0 18
24469: IFFALSE 24583
// begin tmp := CostOfWeapon ( weapon ) ;
24471: LD_ADDR_VAR 0 14
24475: PUSH
24476: LD_VAR 0 18
24480: PPUSH
24481: CALL_OW 451
24485: ST_TO_ADDR
// j := GetBase ( tower ) ;
24486: LD_ADDR_VAR 0 9
24490: PUSH
24491: LD_VAR 0 1
24495: PPUSH
24496: CALL_OW 274
24500: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24501: LD_VAR 0 9
24505: PPUSH
24506: LD_INT 1
24508: PPUSH
24509: CALL_OW 275
24513: PUSH
24514: LD_VAR 0 14
24518: PUSH
24519: LD_INT 1
24521: ARRAY
24522: GREATEREQUAL
24523: PUSH
24524: LD_VAR 0 9
24528: PPUSH
24529: LD_INT 2
24531: PPUSH
24532: CALL_OW 275
24536: PUSH
24537: LD_VAR 0 14
24541: PUSH
24542: LD_INT 2
24544: ARRAY
24545: GREATEREQUAL
24546: AND
24547: PUSH
24548: LD_VAR 0 9
24552: PPUSH
24553: LD_INT 3
24555: PPUSH
24556: CALL_OW 275
24560: PUSH
24561: LD_VAR 0 14
24565: PUSH
24566: LD_INT 3
24568: ARRAY
24569: GREATEREQUAL
24570: AND
24571: IFFALSE 24583
// result := weapon ;
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_VAR 0 18
24582: ST_TO_ADDR
// end ; end ;
24583: LD_VAR 0 3
24587: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
// result := true ;
24592: LD_ADDR_VAR 0 3
24596: PUSH
24597: LD_INT 1
24599: ST_TO_ADDR
// if array1 = array2 then
24600: LD_VAR 0 1
24604: PUSH
24605: LD_VAR 0 2
24609: EQUAL
24610: IFFALSE 24670
// begin for i = 1 to array1 do
24612: LD_ADDR_VAR 0 4
24616: PUSH
24617: DOUBLE
24618: LD_INT 1
24620: DEC
24621: ST_TO_ADDR
24622: LD_VAR 0 1
24626: PUSH
24627: FOR_TO
24628: IFFALSE 24666
// if array1 [ i ] <> array2 [ i ] then
24630: LD_VAR 0 1
24634: PUSH
24635: LD_VAR 0 4
24639: ARRAY
24640: PUSH
24641: LD_VAR 0 2
24645: PUSH
24646: LD_VAR 0 4
24650: ARRAY
24651: NONEQUAL
24652: IFFALSE 24664
// begin result := false ;
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_INT 0
24661: ST_TO_ADDR
// break ;
24662: GO 24666
// end ;
24664: GO 24627
24666: POP
24667: POP
// end else
24668: GO 24678
// result := false ;
24670: LD_ADDR_VAR 0 3
24674: PUSH
24675: LD_INT 0
24677: ST_TO_ADDR
// end ;
24678: LD_VAR 0 3
24682: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24683: LD_INT 0
24685: PPUSH
24686: PPUSH
24687: PPUSH
// pom := GetBase ( fac ) ;
24688: LD_ADDR_VAR 0 5
24692: PUSH
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 274
24702: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24703: LD_ADDR_VAR 0 4
24707: PUSH
24708: LD_VAR 0 2
24712: PUSH
24713: LD_INT 1
24715: ARRAY
24716: PPUSH
24717: LD_VAR 0 2
24721: PUSH
24722: LD_INT 2
24724: ARRAY
24725: PPUSH
24726: LD_VAR 0 2
24730: PUSH
24731: LD_INT 3
24733: ARRAY
24734: PPUSH
24735: LD_VAR 0 2
24739: PUSH
24740: LD_INT 4
24742: ARRAY
24743: PPUSH
24744: CALL_OW 449
24748: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24749: LD_ADDR_VAR 0 3
24753: PUSH
24754: LD_VAR 0 5
24758: PPUSH
24759: LD_INT 1
24761: PPUSH
24762: CALL_OW 275
24766: PUSH
24767: LD_VAR 0 4
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: GREATEREQUAL
24776: PUSH
24777: LD_VAR 0 5
24781: PPUSH
24782: LD_INT 2
24784: PPUSH
24785: CALL_OW 275
24789: PUSH
24790: LD_VAR 0 4
24794: PUSH
24795: LD_INT 2
24797: ARRAY
24798: GREATEREQUAL
24799: AND
24800: PUSH
24801: LD_VAR 0 5
24805: PPUSH
24806: LD_INT 3
24808: PPUSH
24809: CALL_OW 275
24813: PUSH
24814: LD_VAR 0 4
24818: PUSH
24819: LD_INT 3
24821: ARRAY
24822: GREATEREQUAL
24823: AND
24824: ST_TO_ADDR
// end ;
24825: LD_VAR 0 3
24829: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24830: LD_INT 0
24832: PPUSH
24833: PPUSH
24834: PPUSH
24835: PPUSH
// pom := GetBase ( building ) ;
24836: LD_ADDR_VAR 0 3
24840: PUSH
24841: LD_VAR 0 1
24845: PPUSH
24846: CALL_OW 274
24850: ST_TO_ADDR
// if not pom then
24851: LD_VAR 0 3
24855: NOT
24856: IFFALSE 24860
// exit ;
24858: GO 25030
// btype := GetBType ( building ) ;
24860: LD_ADDR_VAR 0 5
24864: PUSH
24865: LD_VAR 0 1
24869: PPUSH
24870: CALL_OW 266
24874: ST_TO_ADDR
// if btype = b_armoury then
24875: LD_VAR 0 5
24879: PUSH
24880: LD_INT 4
24882: EQUAL
24883: IFFALSE 24893
// btype := b_barracks ;
24885: LD_ADDR_VAR 0 5
24889: PUSH
24890: LD_INT 5
24892: ST_TO_ADDR
// if btype = b_depot then
24893: LD_VAR 0 5
24897: PUSH
24898: LD_INT 0
24900: EQUAL
24901: IFFALSE 24911
// btype := b_warehouse ;
24903: LD_ADDR_VAR 0 5
24907: PUSH
24908: LD_INT 1
24910: ST_TO_ADDR
// if btype = b_workshop then
24911: LD_VAR 0 5
24915: PUSH
24916: LD_INT 2
24918: EQUAL
24919: IFFALSE 24929
// btype := b_factory ;
24921: LD_ADDR_VAR 0 5
24925: PUSH
24926: LD_INT 3
24928: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24929: LD_ADDR_VAR 0 4
24933: PUSH
24934: LD_VAR 0 5
24938: PPUSH
24939: LD_VAR 0 1
24943: PPUSH
24944: CALL_OW 248
24948: PPUSH
24949: CALL_OW 450
24953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_VAR 0 3
24963: PPUSH
24964: LD_INT 1
24966: PPUSH
24967: CALL_OW 275
24971: PUSH
24972: LD_VAR 0 4
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: GREATEREQUAL
24981: PUSH
24982: LD_VAR 0 3
24986: PPUSH
24987: LD_INT 2
24989: PPUSH
24990: CALL_OW 275
24994: PUSH
24995: LD_VAR 0 4
24999: PUSH
25000: LD_INT 2
25002: ARRAY
25003: GREATEREQUAL
25004: AND
25005: PUSH
25006: LD_VAR 0 3
25010: PPUSH
25011: LD_INT 3
25013: PPUSH
25014: CALL_OW 275
25018: PUSH
25019: LD_VAR 0 4
25023: PUSH
25024: LD_INT 3
25026: ARRAY
25027: GREATEREQUAL
25028: AND
25029: ST_TO_ADDR
// end ;
25030: LD_VAR 0 2
25034: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25035: LD_INT 0
25037: PPUSH
25038: PPUSH
25039: PPUSH
// pom := GetBase ( building ) ;
25040: LD_ADDR_VAR 0 4
25044: PUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 274
25054: ST_TO_ADDR
// if not pom then
25055: LD_VAR 0 4
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25165
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25064: LD_ADDR_VAR 0 5
25068: PUSH
25069: LD_VAR 0 2
25073: PPUSH
25074: LD_VAR 0 1
25078: PPUSH
25079: CALL_OW 248
25083: PPUSH
25084: CALL_OW 450
25088: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25089: LD_ADDR_VAR 0 3
25093: PUSH
25094: LD_VAR 0 4
25098: PPUSH
25099: LD_INT 1
25101: PPUSH
25102: CALL_OW 275
25106: PUSH
25107: LD_VAR 0 5
25111: PUSH
25112: LD_INT 1
25114: ARRAY
25115: GREATEREQUAL
25116: PUSH
25117: LD_VAR 0 4
25121: PPUSH
25122: LD_INT 2
25124: PPUSH
25125: CALL_OW 275
25129: PUSH
25130: LD_VAR 0 5
25134: PUSH
25135: LD_INT 2
25137: ARRAY
25138: GREATEREQUAL
25139: AND
25140: PUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: LD_INT 3
25148: PPUSH
25149: CALL_OW 275
25153: PUSH
25154: LD_VAR 0 5
25158: PUSH
25159: LD_INT 3
25161: ARRAY
25162: GREATEREQUAL
25163: AND
25164: ST_TO_ADDR
// end ;
25165: LD_VAR 0 3
25169: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25170: LD_INT 0
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
// result := false ;
25182: LD_ADDR_VAR 0 6
25186: PUSH
25187: LD_INT 0
25189: ST_TO_ADDR
// if not base or not btype or not x or not y then
25190: LD_VAR 0 1
25194: NOT
25195: PUSH
25196: LD_VAR 0 2
25200: NOT
25201: OR
25202: PUSH
25203: LD_VAR 0 3
25207: NOT
25208: OR
25209: PUSH
25210: LD_VAR 0 4
25214: NOT
25215: OR
25216: IFFALSE 25220
// exit ;
25218: GO 25829
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25220: LD_ADDR_VAR 0 12
25224: PUSH
25225: LD_VAR 0 2
25229: PPUSH
25230: LD_VAR 0 3
25234: PPUSH
25235: LD_VAR 0 4
25239: PPUSH
25240: LD_VAR 0 5
25244: PPUSH
25245: LD_VAR 0 1
25249: PUSH
25250: LD_INT 1
25252: ARRAY
25253: PPUSH
25254: CALL_OW 248
25258: PPUSH
25259: LD_INT 0
25261: PPUSH
25262: CALL 26666 0 6
25266: ST_TO_ADDR
// if not hexes then
25267: LD_VAR 0 12
25271: NOT
25272: IFFALSE 25276
// exit ;
25274: GO 25829
// for i = 1 to hexes do
25276: LD_ADDR_VAR 0 7
25280: PUSH
25281: DOUBLE
25282: LD_INT 1
25284: DEC
25285: ST_TO_ADDR
25286: LD_VAR 0 12
25290: PUSH
25291: FOR_TO
25292: IFFALSE 25827
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25294: LD_ADDR_VAR 0 11
25298: PUSH
25299: LD_VAR 0 12
25303: PUSH
25304: LD_VAR 0 7
25308: ARRAY
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: LD_VAR 0 12
25318: PUSH
25319: LD_VAR 0 7
25323: ARRAY
25324: PUSH
25325: LD_INT 2
25327: ARRAY
25328: PPUSH
25329: CALL_OW 428
25333: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25334: LD_VAR 0 12
25338: PUSH
25339: LD_VAR 0 7
25343: ARRAY
25344: PUSH
25345: LD_INT 1
25347: ARRAY
25348: PPUSH
25349: LD_VAR 0 12
25353: PUSH
25354: LD_VAR 0 7
25358: ARRAY
25359: PUSH
25360: LD_INT 2
25362: ARRAY
25363: PPUSH
25364: CALL_OW 351
25368: PUSH
25369: LD_VAR 0 12
25373: PUSH
25374: LD_VAR 0 7
25378: ARRAY
25379: PUSH
25380: LD_INT 1
25382: ARRAY
25383: PPUSH
25384: LD_VAR 0 12
25388: PUSH
25389: LD_VAR 0 7
25393: ARRAY
25394: PUSH
25395: LD_INT 2
25397: ARRAY
25398: PPUSH
25399: CALL_OW 488
25403: NOT
25404: OR
25405: PUSH
25406: LD_VAR 0 11
25410: PPUSH
25411: CALL_OW 247
25415: PUSH
25416: LD_INT 3
25418: EQUAL
25419: OR
25420: IFFALSE 25426
// exit ;
25422: POP
25423: POP
25424: GO 25829
// if not tmp or not tmp in base then
25426: LD_VAR 0 11
25430: NOT
25431: PUSH
25432: LD_VAR 0 11
25436: PUSH
25437: LD_VAR 0 1
25441: IN
25442: NOT
25443: OR
25444: IFFALSE 25448
// continue ;
25446: GO 25291
// result := true ;
25448: LD_ADDR_VAR 0 6
25452: PUSH
25453: LD_INT 1
25455: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25456: LD_ADDR_VAR 0 15
25460: PUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: LD_INT 22
25468: PUSH
25469: LD_VAR 0 11
25473: PPUSH
25474: CALL_OW 255
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 30
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 30
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PPUSH
25515: CALL_OW 72
25519: ST_TO_ADDR
// if dep then
25520: LD_VAR 0 15
25524: IFFALSE 25660
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25526: LD_ADDR_VAR 0 14
25530: PUSH
25531: LD_VAR 0 15
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PPUSH
25540: CALL_OW 250
25544: PPUSH
25545: LD_VAR 0 15
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: CALL_OW 254
25558: PPUSH
25559: LD_INT 5
25561: PPUSH
25562: CALL_OW 272
25566: PUSH
25567: LD_VAR 0 15
25571: PUSH
25572: LD_INT 1
25574: ARRAY
25575: PPUSH
25576: CALL_OW 251
25580: PPUSH
25581: LD_VAR 0 15
25585: PUSH
25586: LD_INT 1
25588: ARRAY
25589: PPUSH
25590: CALL_OW 254
25594: PPUSH
25595: LD_INT 5
25597: PPUSH
25598: CALL_OW 273
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25607: LD_VAR 0 14
25611: PUSH
25612: LD_INT 1
25614: ARRAY
25615: PPUSH
25616: LD_VAR 0 14
25620: PUSH
25621: LD_INT 2
25623: ARRAY
25624: PPUSH
25625: CALL_OW 488
25629: IFFALSE 25660
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25631: LD_VAR 0 11
25635: PPUSH
25636: LD_VAR 0 14
25640: PUSH
25641: LD_INT 1
25643: ARRAY
25644: PPUSH
25645: LD_VAR 0 14
25649: PUSH
25650: LD_INT 2
25652: ARRAY
25653: PPUSH
25654: CALL_OW 111
// continue ;
25658: GO 25291
// end ; end ; r := GetDir ( tmp ) ;
25660: LD_ADDR_VAR 0 13
25664: PUSH
25665: LD_VAR 0 11
25669: PPUSH
25670: CALL_OW 254
25674: ST_TO_ADDR
// if r = 5 then
25675: LD_VAR 0 13
25679: PUSH
25680: LD_INT 5
25682: EQUAL
25683: IFFALSE 25693
// r := 0 ;
25685: LD_ADDR_VAR 0 13
25689: PUSH
25690: LD_INT 0
25692: ST_TO_ADDR
// for j = r to 5 do
25693: LD_ADDR_VAR 0 8
25697: PUSH
25698: DOUBLE
25699: LD_VAR 0 13
25703: DEC
25704: ST_TO_ADDR
25705: LD_INT 5
25707: PUSH
25708: FOR_TO
25709: IFFALSE 25823
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25711: LD_ADDR_VAR 0 9
25715: PUSH
25716: LD_VAR 0 11
25720: PPUSH
25721: CALL_OW 250
25725: PPUSH
25726: LD_VAR 0 8
25730: PPUSH
25731: LD_INT 2
25733: PPUSH
25734: CALL_OW 272
25738: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25739: LD_ADDR_VAR 0 10
25743: PUSH
25744: LD_VAR 0 11
25748: PPUSH
25749: CALL_OW 251
25753: PPUSH
25754: LD_VAR 0 8
25758: PPUSH
25759: LD_INT 2
25761: PPUSH
25762: CALL_OW 273
25766: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25767: LD_VAR 0 9
25771: PPUSH
25772: LD_VAR 0 10
25776: PPUSH
25777: CALL_OW 488
25781: PUSH
25782: LD_VAR 0 9
25786: PPUSH
25787: LD_VAR 0 10
25791: PPUSH
25792: CALL_OW 428
25796: NOT
25797: AND
25798: IFFALSE 25821
// begin ComMoveXY ( tmp , _x , _y ) ;
25800: LD_VAR 0 11
25804: PPUSH
25805: LD_VAR 0 9
25809: PPUSH
25810: LD_VAR 0 10
25814: PPUSH
25815: CALL_OW 111
// break ;
25819: GO 25823
// end ; end ;
25821: GO 25708
25823: POP
25824: POP
// end ;
25825: GO 25291
25827: POP
25828: POP
// end ;
25829: LD_VAR 0 6
25833: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25834: LD_INT 0
25836: PPUSH
25837: PPUSH
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
// result := false ;
25846: LD_ADDR_VAR 0 6
25850: PUSH
25851: LD_INT 0
25853: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25854: LD_VAR 0 1
25858: NOT
25859: PUSH
25860: LD_VAR 0 1
25864: PPUSH
25865: CALL_OW 266
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: IN
25880: NOT
25881: OR
25882: PUSH
25883: LD_VAR 0 2
25887: NOT
25888: OR
25889: PUSH
25890: LD_VAR 0 5
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 3
25906: PUSH
25907: LD_INT 4
25909: PUSH
25910: LD_INT 5
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: IN
25921: NOT
25922: OR
25923: PUSH
25924: LD_VAR 0 3
25928: PPUSH
25929: LD_VAR 0 4
25933: PPUSH
25934: CALL_OW 488
25938: NOT
25939: OR
25940: IFFALSE 25944
// exit ;
25942: GO 26661
// pom := GetBase ( depot ) ;
25944: LD_ADDR_VAR 0 10
25948: PUSH
25949: LD_VAR 0 1
25953: PPUSH
25954: CALL_OW 274
25958: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25959: LD_ADDR_VAR 0 11
25963: PUSH
25964: LD_VAR 0 2
25968: PPUSH
25969: LD_VAR 0 1
25973: PPUSH
25974: CALL_OW 248
25978: PPUSH
25979: CALL_OW 450
25983: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25984: LD_VAR 0 10
25988: PPUSH
25989: LD_INT 1
25991: PPUSH
25992: CALL_OW 275
25996: PUSH
25997: LD_VAR 0 11
26001: PUSH
26002: LD_INT 1
26004: ARRAY
26005: GREATEREQUAL
26006: PUSH
26007: LD_VAR 0 10
26011: PPUSH
26012: LD_INT 2
26014: PPUSH
26015: CALL_OW 275
26019: PUSH
26020: LD_VAR 0 11
26024: PUSH
26025: LD_INT 2
26027: ARRAY
26028: GREATEREQUAL
26029: AND
26030: PUSH
26031: LD_VAR 0 10
26035: PPUSH
26036: LD_INT 3
26038: PPUSH
26039: CALL_OW 275
26043: PUSH
26044: LD_VAR 0 11
26048: PUSH
26049: LD_INT 3
26051: ARRAY
26052: GREATEREQUAL
26053: AND
26054: NOT
26055: IFFALSE 26059
// exit ;
26057: GO 26661
// if GetBType ( depot ) = b_depot then
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL_OW 266
26068: PUSH
26069: LD_INT 0
26071: EQUAL
26072: IFFALSE 26084
// dist := 28 else
26074: LD_ADDR_VAR 0 14
26078: PUSH
26079: LD_INT 28
26081: ST_TO_ADDR
26082: GO 26092
// dist := 36 ;
26084: LD_ADDR_VAR 0 14
26088: PUSH
26089: LD_INT 36
26091: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26092: LD_VAR 0 1
26096: PPUSH
26097: LD_VAR 0 3
26101: PPUSH
26102: LD_VAR 0 4
26106: PPUSH
26107: CALL_OW 297
26111: PUSH
26112: LD_VAR 0 14
26116: GREATER
26117: IFFALSE 26121
// exit ;
26119: GO 26661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26121: LD_ADDR_VAR 0 12
26125: PUSH
26126: LD_VAR 0 2
26130: PPUSH
26131: LD_VAR 0 3
26135: PPUSH
26136: LD_VAR 0 4
26140: PPUSH
26141: LD_VAR 0 5
26145: PPUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 248
26155: PPUSH
26156: LD_INT 0
26158: PPUSH
26159: CALL 26666 0 6
26163: ST_TO_ADDR
// if not hexes then
26164: LD_VAR 0 12
26168: NOT
26169: IFFALSE 26173
// exit ;
26171: GO 26661
// hex := GetHexInfo ( x , y ) ;
26173: LD_ADDR_VAR 0 15
26177: PUSH
26178: LD_VAR 0 3
26182: PPUSH
26183: LD_VAR 0 4
26187: PPUSH
26188: CALL_OW 546
26192: ST_TO_ADDR
// if hex [ 1 ] then
26193: LD_VAR 0 15
26197: PUSH
26198: LD_INT 1
26200: ARRAY
26201: IFFALSE 26205
// exit ;
26203: GO 26661
// height := hex [ 2 ] ;
26205: LD_ADDR_VAR 0 13
26209: PUSH
26210: LD_VAR 0 15
26214: PUSH
26215: LD_INT 2
26217: ARRAY
26218: ST_TO_ADDR
// for i = 1 to hexes do
26219: LD_ADDR_VAR 0 7
26223: PUSH
26224: DOUBLE
26225: LD_INT 1
26227: DEC
26228: ST_TO_ADDR
26229: LD_VAR 0 12
26233: PUSH
26234: FOR_TO
26235: IFFALSE 26565
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26237: LD_VAR 0 12
26241: PUSH
26242: LD_VAR 0 7
26246: ARRAY
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: PPUSH
26252: LD_VAR 0 12
26256: PUSH
26257: LD_VAR 0 7
26261: ARRAY
26262: PUSH
26263: LD_INT 2
26265: ARRAY
26266: PPUSH
26267: CALL_OW 488
26271: NOT
26272: PUSH
26273: LD_VAR 0 12
26277: PUSH
26278: LD_VAR 0 7
26282: ARRAY
26283: PUSH
26284: LD_INT 1
26286: ARRAY
26287: PPUSH
26288: LD_VAR 0 12
26292: PUSH
26293: LD_VAR 0 7
26297: ARRAY
26298: PUSH
26299: LD_INT 2
26301: ARRAY
26302: PPUSH
26303: CALL_OW 428
26307: PUSH
26308: LD_INT 0
26310: GREATER
26311: OR
26312: PUSH
26313: LD_VAR 0 12
26317: PUSH
26318: LD_VAR 0 7
26322: ARRAY
26323: PUSH
26324: LD_INT 1
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 12
26332: PUSH
26333: LD_VAR 0 7
26337: ARRAY
26338: PUSH
26339: LD_INT 2
26341: ARRAY
26342: PPUSH
26343: CALL_OW 351
26347: OR
26348: IFFALSE 26354
// exit ;
26350: POP
26351: POP
26352: GO 26661
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26354: LD_ADDR_VAR 0 8
26358: PUSH
26359: LD_VAR 0 12
26363: PUSH
26364: LD_VAR 0 7
26368: ARRAY
26369: PUSH
26370: LD_INT 1
26372: ARRAY
26373: PPUSH
26374: LD_VAR 0 12
26378: PUSH
26379: LD_VAR 0 7
26383: ARRAY
26384: PUSH
26385: LD_INT 2
26387: ARRAY
26388: PPUSH
26389: CALL_OW 546
26393: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26394: LD_VAR 0 8
26398: PUSH
26399: LD_INT 1
26401: ARRAY
26402: PUSH
26403: LD_VAR 0 8
26407: PUSH
26408: LD_INT 2
26410: ARRAY
26411: PUSH
26412: LD_VAR 0 13
26416: PUSH
26417: LD_INT 2
26419: PLUS
26420: GREATER
26421: OR
26422: PUSH
26423: LD_VAR 0 8
26427: PUSH
26428: LD_INT 2
26430: ARRAY
26431: PUSH
26432: LD_VAR 0 13
26436: PUSH
26437: LD_INT 2
26439: MINUS
26440: LESS
26441: OR
26442: PUSH
26443: LD_VAR 0 8
26447: PUSH
26448: LD_INT 3
26450: ARRAY
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 8
26457: PUSH
26458: LD_INT 9
26460: PUSH
26461: LD_INT 10
26463: PUSH
26464: LD_INT 11
26466: PUSH
26467: LD_INT 12
26469: PUSH
26470: LD_INT 13
26472: PUSH
26473: LD_INT 16
26475: PUSH
26476: LD_INT 17
26478: PUSH
26479: LD_INT 18
26481: PUSH
26482: LD_INT 19
26484: PUSH
26485: LD_INT 20
26487: PUSH
26488: LD_INT 21
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: IN
26506: NOT
26507: OR
26508: PUSH
26509: LD_VAR 0 8
26513: PUSH
26514: LD_INT 5
26516: ARRAY
26517: NOT
26518: OR
26519: PUSH
26520: LD_VAR 0 8
26524: PUSH
26525: LD_INT 6
26527: ARRAY
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: LD_INT 7
26537: PUSH
26538: LD_INT 9
26540: PUSH
26541: LD_INT 10
26543: PUSH
26544: LD_INT 11
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: IN
26555: NOT
26556: OR
26557: IFFALSE 26563
// exit ;
26559: POP
26560: POP
26561: GO 26661
// end ;
26563: GO 26234
26565: POP
26566: POP
// side := GetSide ( depot ) ;
26567: LD_ADDR_VAR 0 9
26571: PUSH
26572: LD_VAR 0 1
26576: PPUSH
26577: CALL_OW 255
26581: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26582: LD_VAR 0 9
26586: PPUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: LD_VAR 0 4
26596: PPUSH
26597: LD_INT 20
26599: PPUSH
26600: CALL 19315 0 4
26604: PUSH
26605: LD_INT 4
26607: ARRAY
26608: IFFALSE 26612
// exit ;
26610: GO 26661
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26612: LD_VAR 0 2
26616: PUSH
26617: LD_INT 29
26619: PUSH
26620: LD_INT 30
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: IN
26627: PUSH
26628: LD_VAR 0 3
26632: PPUSH
26633: LD_VAR 0 4
26637: PPUSH
26638: LD_VAR 0 9
26642: PPUSH
26643: CALL_OW 440
26647: NOT
26648: AND
26649: IFFALSE 26653
// exit ;
26651: GO 26661
// result := true ;
26653: LD_ADDR_VAR 0 6
26657: PUSH
26658: LD_INT 1
26660: ST_TO_ADDR
// end ;
26661: LD_VAR 0 6
26665: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26666: LD_INT 0
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
// result = [ ] ;
26726: LD_ADDR_VAR 0 7
26730: PUSH
26731: EMPTY
26732: ST_TO_ADDR
// temp_list = [ ] ;
26733: LD_ADDR_VAR 0 9
26737: PUSH
26738: EMPTY
26739: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26740: LD_VAR 0 4
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 3
26756: PUSH
26757: LD_INT 4
26759: PUSH
26760: LD_INT 5
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: IN
26771: NOT
26772: PUSH
26773: LD_VAR 0 1
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: IN
26788: PUSH
26789: LD_VAR 0 5
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 2
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: LIST
26807: IN
26808: NOT
26809: AND
26810: OR
26811: IFFALSE 26815
// exit ;
26813: GO 45206
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26815: LD_VAR 0 1
26819: PUSH
26820: LD_INT 6
26822: PUSH
26823: LD_INT 7
26825: PUSH
26826: LD_INT 8
26828: PUSH
26829: LD_INT 13
26831: PUSH
26832: LD_INT 12
26834: PUSH
26835: LD_INT 15
26837: PUSH
26838: LD_INT 11
26840: PUSH
26841: LD_INT 14
26843: PUSH
26844: LD_INT 10
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: IN
26858: IFFALSE 26868
// btype = b_lab ;
26860: LD_ADDR_VAR 0 1
26864: PUSH
26865: LD_INT 6
26867: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26868: LD_VAR 0 6
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: IN
26887: NOT
26888: PUSH
26889: LD_VAR 0 1
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 6
26908: PUSH
26909: LD_INT 36
26911: PUSH
26912: LD_INT 4
26914: PUSH
26915: LD_INT 5
26917: PUSH
26918: LD_INT 31
26920: PUSH
26921: LD_INT 32
26923: PUSH
26924: LD_INT 33
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: IN
26940: NOT
26941: PUSH
26942: LD_VAR 0 6
26946: PUSH
26947: LD_INT 1
26949: EQUAL
26950: AND
26951: OR
26952: PUSH
26953: LD_VAR 0 1
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: LD_INT 3
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: IN
26968: NOT
26969: PUSH
26970: LD_VAR 0 6
26974: PUSH
26975: LD_INT 2
26977: EQUAL
26978: AND
26979: OR
26980: IFFALSE 26990
// mode = 0 ;
26982: LD_ADDR_VAR 0 6
26986: PUSH
26987: LD_INT 0
26989: ST_TO_ADDR
// case mode of 0 :
26990: LD_VAR 0 6
26994: PUSH
26995: LD_INT 0
26997: DOUBLE
26998: EQUAL
26999: IFTRUE 27003
27001: GO 38456
27003: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27004: LD_ADDR_VAR 0 11
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 2
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 3
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27197: LD_ADDR_VAR 0 12
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: NEG
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 3
27354: NEG
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 3
27365: NEG
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27393: LD_ADDR_VAR 0 13
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: LD_INT 2
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 2
27516: NEG
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: LD_INT 2
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: LD_INT 3
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 3
27552: NEG
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 3
27564: NEG
27565: PUSH
27566: LD_INT 3
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27592: LD_ADDR_VAR 0 14
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 3
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 3
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 2
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27788: LD_ADDR_VAR 0 15
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 3
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27981: LD_ADDR_VAR 0 16
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 2
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: LD_INT 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 2
28104: NEG
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: LD_INT 2
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 3
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 3
28138: PUSH
28139: LD_INT 3
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: LD_INT 3
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28174: LD_ADDR_VAR 0 17
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: LD_INT 2
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: NEG
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28404: LD_ADDR_VAR 0 18
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 1
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 2
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28634: LD_ADDR_VAR 0 19
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: LD_INT 2
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 2
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: LD_INT 2
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28864: LD_ADDR_VAR 0 20
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: LD_INT 2
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 2
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: LD_INT 2
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29094: LD_ADDR_VAR 0 21
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: NEG
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: NEG
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29324: LD_ADDR_VAR 0 22
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 2
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29554: LD_ADDR_VAR 0 23
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 2
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: LD_INT 3
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: LD_INT 3
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29834: LD_ADDR_VAR 0 24
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: LD_INT 2
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 2
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 2
30021: NEG
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30110: LD_ADDR_VAR 0 25
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 2
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 2
30286: NEG
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: LD_INT 2
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 3
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30384: LD_ADDR_VAR 0 26
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 1
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: LD_INT 2
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 2
30583: NEG
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30660: LD_ADDR_VAR 0 27
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: LD_INT 2
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 2
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: LD_INT 2
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 3
30893: NEG
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30940: LD_ADDR_VAR 0 28
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 1
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 2
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 3
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: NEG
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31222: LD_ADDR_VAR 0 29
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: LD_INT 3
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: LD_INT 3
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 3
31466: NEG
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31501: LD_ADDR_VAR 0 30
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 0
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31779: LD_ADDR_VAR 0 31
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: NEG
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: NEG
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: LD_INT 3
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 3
32022: NEG
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32057: LD_ADDR_VAR 0 32
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: NEG
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: NEG
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: LD_INT 3
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32335: LD_ADDR_VAR 0 33
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: LD_INT 3
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 3
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 3
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 3
32579: NEG
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32614: LD_ADDR_VAR 0 34
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 2
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32894: LD_ADDR_VAR 0 35
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33006: LD_ADDR_VAR 0 36
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: NEG
33065: PUSH
33066: LD_INT 0
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: LD_INT 1
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33118: LD_ADDR_VAR 0 37
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33230: LD_ADDR_VAR 0 38
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33342: LD_ADDR_VAR 0 39
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33454: LD_ADDR_VAR 0 40
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33566: LD_ADDR_VAR 0 41
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 2
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: NEG
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 2
33744: NEG
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 3
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 3
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33916: LD_ADDR_VAR 0 42
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 3
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: LD_INT 2
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34266: LD_ADDR_VAR 0 43
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 3
34562: NEG
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34614: LD_ADDR_VAR 0 44
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 2
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: NEG
34805: PUSH
34806: LD_INT 3
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 3
34888: NEG
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 3
34899: NEG
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 3
34911: NEG
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 3
34923: NEG
34924: PUSH
34925: LD_INT 3
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34964: LD_ADDR_VAR 0 45
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: NEG
35143: PUSH
35144: LD_INT 2
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: NEG
35155: PUSH
35156: LD_INT 3
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 3
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 3
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: LD_INT 3
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 3
35261: NEG
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: NEG
35274: PUSH
35275: LD_INT 3
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35314: LD_ADDR_VAR 0 46
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: NEG
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: LD_INT 3
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 3
35610: NEG
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 3
35621: NEG
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35662: LD_ADDR_VAR 0 47
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 2
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35813: LD_ADDR_VAR 0 48
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35960: LD_ADDR_VAR 0 49
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36104: LD_ADDR_VAR 0 50
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36248: LD_ADDR_VAR 0 51
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36395: LD_ADDR_VAR 0 52
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 2
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36546: LD_ADDR_VAR 0 53
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: LD_INT 2
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36776: LD_ADDR_VAR 0 54
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37006: LD_ADDR_VAR 0 55
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 2
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37236: LD_ADDR_VAR 0 56
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 2
37435: NEG
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37466: LD_ADDR_VAR 0 57
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37696: LD_ADDR_VAR 0 58
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37926: LD_ADDR_VAR 0 59
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38014: LD_ADDR_VAR 0 60
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38102: LD_ADDR_VAR 0 61
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38190: LD_ADDR_VAR 0 62
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38278: LD_ADDR_VAR 0 63
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38366: LD_ADDR_VAR 0 64
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: ST_TO_ADDR
// end ; 1 :
38454: GO 44351
38456: LD_INT 1
38458: DOUBLE
38459: EQUAL
38460: IFTRUE 38464
38462: GO 41087
38464: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38465: LD_ADDR_VAR 0 11
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 3
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38509: LD_ADDR_VAR 0 12
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 3
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 3
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38550: LD_ADDR_VAR 0 13
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 3
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38590: LD_ADDR_VAR 0 14
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38631: LD_ADDR_VAR 0 15
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 3
38649: NEG
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 3
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38675: LD_ADDR_VAR 0 16
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 3
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 3
38706: NEG
38707: PUSH
38708: LD_INT 3
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38721: LD_ADDR_VAR 0 17
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 3
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 3
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38765: LD_ADDR_VAR 0 18
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38806: LD_ADDR_VAR 0 19
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38846: LD_ADDR_VAR 0 20
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38887: LD_ADDR_VAR 0 21
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: NEG
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 3
38916: NEG
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38931: LD_ADDR_VAR 0 22
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 3
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 3
38962: NEG
38963: PUSH
38964: LD_INT 3
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38977: LD_ADDR_VAR 0 23
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 3
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 4
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39021: LD_ADDR_VAR 0 24
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 3
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39062: LD_ADDR_VAR 0 25
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 4
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 4
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39102: LD_ADDR_VAR 0 26
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 4
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39143: LD_ADDR_VAR 0 27
39147: PUSH
39148: LD_INT 3
39150: NEG
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 3
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 4
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39187: LD_ADDR_VAR 0 28
39191: PUSH
39192: LD_INT 3
39194: NEG
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 3
39206: NEG
39207: PUSH
39208: LD_INT 4
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 4
39218: NEG
39219: PUSH
39220: LD_INT 3
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39233: LD_ADDR_VAR 0 29
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 3
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 4
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 4
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 3
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 5
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 5
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 4
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 6
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 6
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 5
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39388: LD_ADDR_VAR 0 30
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 3
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 4
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 4
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 5
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 5
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 5
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 6
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 6
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39531: LD_ADDR_VAR 0 31
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: LD_INT 3
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 4
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 4
39578: PUSH
39579: LD_INT 4
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: LD_INT 4
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 5
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 5
39608: PUSH
39609: LD_INT 5
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 4
39618: PUSH
39619: LD_INT 5
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 6
39628: PUSH
39629: LD_INT 5
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 6
39638: PUSH
39639: LD_INT 6
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: LD_INT 6
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39670: LD_ADDR_VAR 0 32
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 4
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 4
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 5
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 5
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 6
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 6
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 5
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39813: LD_ADDR_VAR 0 33
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 4
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 4
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 4
39888: NEG
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 5
39899: NEG
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 5
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 5
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 6
39933: NEG
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 6
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39968: LD_ADDR_VAR 0 34
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 3
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 3
40011: NEG
40012: PUSH
40013: LD_INT 4
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 4
40023: NEG
40024: PUSH
40025: LD_INT 3
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 4
40035: NEG
40036: PUSH
40037: LD_INT 4
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 4
40047: NEG
40048: PUSH
40049: LD_INT 5
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 5
40059: NEG
40060: PUSH
40061: LD_INT 4
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 5
40071: NEG
40072: PUSH
40073: LD_INT 5
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 5
40083: NEG
40084: PUSH
40085: LD_INT 6
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 6
40095: NEG
40096: PUSH
40097: LD_INT 5
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 6
40107: NEG
40108: PUSH
40109: LD_INT 6
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40131: LD_ADDR_VAR 0 41
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 3
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40175: LD_ADDR_VAR 0 42
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40216: LD_ADDR_VAR 0 43
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 3
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40256: LD_ADDR_VAR 0 44
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40297: LD_ADDR_VAR 0 45
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 3
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40341: LD_ADDR_VAR 0 46
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40387: LD_ADDR_VAR 0 47
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 3
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40420: LD_ADDR_VAR 0 48
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40451: LD_ADDR_VAR 0 49
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 3
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40480: LD_ADDR_VAR 0 50
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40509: LD_ADDR_VAR 0 51
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40540: LD_ADDR_VAR 0 52
40544: PUSH
40545: LD_INT 3
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40573: LD_ADDR_VAR 0 53
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 3
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 3
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 2
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40617: LD_ADDR_VAR 0 54
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40658: LD_ADDR_VAR 0 55
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: LD_INT 3
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 3
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40698: LD_ADDR_VAR 0 56
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40739: LD_ADDR_VAR 0 57
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: NEG
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40783: LD_ADDR_VAR 0 58
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: NEG
40815: PUSH
40816: LD_INT 3
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40829: LD_ADDR_VAR 0 59
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40873: LD_ADDR_VAR 0 60
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40914: LD_ADDR_VAR 0 61
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40954: LD_ADDR_VAR 0 62
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40995: LD_ADDR_VAR 0 63
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41039: LD_ADDR_VAR 0 64
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: ST_TO_ADDR
// end ; 2 :
41085: GO 44351
41087: LD_INT 2
41089: DOUBLE
41090: EQUAL
41091: IFTRUE 41095
41093: GO 44350
41095: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41096: LD_ADDR_VAR 0 29
41100: PUSH
41101: LD_INT 4
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 4
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 5
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 5
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 4
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 5
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 3
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 4
41216: PUSH
41217: LD_INT 3
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: LD_INT 4
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 4
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 4
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 4
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 4
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 5
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 5
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 4
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 3
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 5
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 3
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: NEG
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 2
41402: NEG
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 2
41413: NEG
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 3
41424: NEG
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 4
41435: NEG
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 4
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 4
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 4
41481: NEG
41482: PUSH
41483: LD_INT 4
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 4
41493: NEG
41494: PUSH
41495: LD_INT 5
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: LD_INT 4
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 4
41529: NEG
41530: PUSH
41531: LD_INT 3
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 5
41541: NEG
41542: PUSH
41543: LD_INT 4
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 5
41553: NEG
41554: PUSH
41555: LD_INT 5
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: LD_INT 5
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 5
41577: NEG
41578: PUSH
41579: LD_INT 3
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41634: LD_ADDR_VAR 0 30
41638: PUSH
41639: LD_INT 4
41641: PUSH
41642: LD_INT 4
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 4
41651: PUSH
41652: LD_INT 3
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 5
41661: PUSH
41662: LD_INT 4
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 5
41671: PUSH
41672: LD_INT 5
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 4
41681: PUSH
41682: LD_INT 5
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 4
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 5
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: LD_INT 5
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 4
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 4
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 3
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 4
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 4
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 4
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 3
41858: NEG
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 4
41869: NEG
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 5
41880: NEG
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 5
41891: NEG
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 5
41903: NEG
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 3
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: LD_INT 3
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 3
41938: NEG
41939: PUSH
41940: LD_INT 4
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 3
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: NEG
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 4
41986: NEG
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 4
41998: NEG
41999: PUSH
42000: LD_INT 4
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 4
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 4
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 4
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 5
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 4
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 3
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 4
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 5
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 5
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42181: LD_ADDR_VAR 0 31
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 4
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 3
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 4
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 5
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 5
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 4
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 3
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 5
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: NEG
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 4
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 4
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 4
42360: NEG
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 4
42383: NEG
42384: PUSH
42385: LD_INT 4
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 4
42395: NEG
42396: PUSH
42397: LD_INT 5
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: NEG
42408: PUSH
42409: LD_INT 4
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: NEG
42420: PUSH
42421: LD_INT 3
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 4
42431: NEG
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 5
42443: NEG
42444: PUSH
42445: LD_INT 4
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 5
42455: NEG
42456: PUSH
42457: LD_INT 5
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: NEG
42468: PUSH
42469: LD_INT 5
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 5
42479: NEG
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 4
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 3
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: LD_INT 4
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: LD_INT 4
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 4
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 4
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 5
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 3
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 5
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42731: LD_ADDR_VAR 0 32
42735: PUSH
42736: LD_INT 4
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 4
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 4
42783: NEG
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 5
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 5
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 5
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 3
42829: NEG
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 3
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: LD_INT 4
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 3
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 4
42900: NEG
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 4
42912: NEG
42913: PUSH
42914: LD_INT 4
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 4
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 4
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 4
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 5
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 4
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 3
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 3
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 4
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 5
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 3
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 5
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 4
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 4
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 4
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 4
43143: PUSH
43144: LD_INT 4
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 5
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 5
43173: PUSH
43174: LD_INT 5
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 4
43183: PUSH
43184: LD_INT 5
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: LD_INT 4
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 5
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43278: LD_ADDR_VAR 0 33
43282: PUSH
43283: LD_INT 4
43285: NEG
43286: PUSH
43287: LD_INT 4
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 4
43297: NEG
43298: PUSH
43299: LD_INT 5
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 3
43309: NEG
43310: PUSH
43311: LD_INT 4
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 4
43333: NEG
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 5
43345: NEG
43346: PUSH
43347: LD_INT 4
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 5
43357: NEG
43358: PUSH
43359: LD_INT 5
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: LD_INT 5
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 5
43381: NEG
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 4
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 3
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 3
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 4
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 4
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 4
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 4
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 5
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 5
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 4
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 5
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 4
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 4
43618: PUSH
43619: LD_INT 4
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: LD_INT 4
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 4
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 4
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 4
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 5
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 5
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 4
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 5
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43816: LD_ADDR_VAR 0 34
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 4
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 5
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 4
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 4
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 5
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 3
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 5
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 3
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 4
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 4
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 4
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 4
44018: PUSH
44019: LD_INT 4
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 4
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 5
44038: PUSH
44039: LD_INT 4
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 5
44048: PUSH
44049: LD_INT 5
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: LD_INT 5
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 5
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 3
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 4
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 4
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 4
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 4
44201: NEG
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 4
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 3
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 4
44246: NEG
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 5
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 5
44280: NEG
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 3
44292: NEG
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: ST_TO_ADDR
// end ; end ;
44348: GO 44351
44350: POP
// case btype of b_depot , b_warehouse :
44351: LD_VAR 0 1
44355: PUSH
44356: LD_INT 0
44358: DOUBLE
44359: EQUAL
44360: IFTRUE 44370
44362: LD_INT 1
44364: DOUBLE
44365: EQUAL
44366: IFTRUE 44370
44368: GO 44571
44370: POP
// case nation of nation_american :
44371: LD_VAR 0 5
44375: PUSH
44376: LD_INT 1
44378: DOUBLE
44379: EQUAL
44380: IFTRUE 44384
44382: GO 44440
44384: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44385: LD_ADDR_VAR 0 9
44389: PUSH
44390: LD_VAR 0 11
44394: PUSH
44395: LD_VAR 0 12
44399: PUSH
44400: LD_VAR 0 13
44404: PUSH
44405: LD_VAR 0 14
44409: PUSH
44410: LD_VAR 0 15
44414: PUSH
44415: LD_VAR 0 16
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: PUSH
44428: LD_VAR 0 4
44432: PUSH
44433: LD_INT 1
44435: PLUS
44436: ARRAY
44437: ST_TO_ADDR
44438: GO 44569
44440: LD_INT 2
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44448
44446: GO 44504
44448: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44449: LD_ADDR_VAR 0 9
44453: PUSH
44454: LD_VAR 0 17
44458: PUSH
44459: LD_VAR 0 18
44463: PUSH
44464: LD_VAR 0 19
44468: PUSH
44469: LD_VAR 0 20
44473: PUSH
44474: LD_VAR 0 21
44478: PUSH
44479: LD_VAR 0 22
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: PUSH
44492: LD_VAR 0 4
44496: PUSH
44497: LD_INT 1
44499: PLUS
44500: ARRAY
44501: ST_TO_ADDR
44502: GO 44569
44504: LD_INT 3
44506: DOUBLE
44507: EQUAL
44508: IFTRUE 44512
44510: GO 44568
44512: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44513: LD_ADDR_VAR 0 9
44517: PUSH
44518: LD_VAR 0 23
44522: PUSH
44523: LD_VAR 0 24
44527: PUSH
44528: LD_VAR 0 25
44532: PUSH
44533: LD_VAR 0 26
44537: PUSH
44538: LD_VAR 0 27
44542: PUSH
44543: LD_VAR 0 28
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: PUSH
44556: LD_VAR 0 4
44560: PUSH
44561: LD_INT 1
44563: PLUS
44564: ARRAY
44565: ST_TO_ADDR
44566: GO 44569
44568: POP
44569: GO 45124
44571: LD_INT 2
44573: DOUBLE
44574: EQUAL
44575: IFTRUE 44585
44577: LD_INT 3
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44641
44585: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44586: LD_ADDR_VAR 0 9
44590: PUSH
44591: LD_VAR 0 29
44595: PUSH
44596: LD_VAR 0 30
44600: PUSH
44601: LD_VAR 0 31
44605: PUSH
44606: LD_VAR 0 32
44610: PUSH
44611: LD_VAR 0 33
44615: PUSH
44616: LD_VAR 0 34
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: PUSH
44629: LD_VAR 0 4
44633: PUSH
44634: LD_INT 1
44636: PLUS
44637: ARRAY
44638: ST_TO_ADDR
44639: GO 45124
44641: LD_INT 16
44643: DOUBLE
44644: EQUAL
44645: IFTRUE 44703
44647: LD_INT 17
44649: DOUBLE
44650: EQUAL
44651: IFTRUE 44703
44653: LD_INT 18
44655: DOUBLE
44656: EQUAL
44657: IFTRUE 44703
44659: LD_INT 19
44661: DOUBLE
44662: EQUAL
44663: IFTRUE 44703
44665: LD_INT 22
44667: DOUBLE
44668: EQUAL
44669: IFTRUE 44703
44671: LD_INT 20
44673: DOUBLE
44674: EQUAL
44675: IFTRUE 44703
44677: LD_INT 21
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44703
44683: LD_INT 23
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44703
44689: LD_INT 24
44691: DOUBLE
44692: EQUAL
44693: IFTRUE 44703
44695: LD_INT 25
44697: DOUBLE
44698: EQUAL
44699: IFTRUE 44703
44701: GO 44759
44703: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44704: LD_ADDR_VAR 0 9
44708: PUSH
44709: LD_VAR 0 35
44713: PUSH
44714: LD_VAR 0 36
44718: PUSH
44719: LD_VAR 0 37
44723: PUSH
44724: LD_VAR 0 38
44728: PUSH
44729: LD_VAR 0 39
44733: PUSH
44734: LD_VAR 0 40
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: PUSH
44747: LD_VAR 0 4
44751: PUSH
44752: LD_INT 1
44754: PLUS
44755: ARRAY
44756: ST_TO_ADDR
44757: GO 45124
44759: LD_INT 6
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44815
44765: LD_INT 7
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44815
44771: LD_INT 8
44773: DOUBLE
44774: EQUAL
44775: IFTRUE 44815
44777: LD_INT 13
44779: DOUBLE
44780: EQUAL
44781: IFTRUE 44815
44783: LD_INT 12
44785: DOUBLE
44786: EQUAL
44787: IFTRUE 44815
44789: LD_INT 15
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44815
44795: LD_INT 11
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44815
44801: LD_INT 14
44803: DOUBLE
44804: EQUAL
44805: IFTRUE 44815
44807: LD_INT 10
44809: DOUBLE
44810: EQUAL
44811: IFTRUE 44815
44813: GO 44871
44815: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44816: LD_ADDR_VAR 0 9
44820: PUSH
44821: LD_VAR 0 41
44825: PUSH
44826: LD_VAR 0 42
44830: PUSH
44831: LD_VAR 0 43
44835: PUSH
44836: LD_VAR 0 44
44840: PUSH
44841: LD_VAR 0 45
44845: PUSH
44846: LD_VAR 0 46
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: PUSH
44859: LD_VAR 0 4
44863: PUSH
44864: LD_INT 1
44866: PLUS
44867: ARRAY
44868: ST_TO_ADDR
44869: GO 45124
44871: LD_INT 36
44873: DOUBLE
44874: EQUAL
44875: IFTRUE 44879
44877: GO 44935
44879: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44880: LD_ADDR_VAR 0 9
44884: PUSH
44885: LD_VAR 0 47
44889: PUSH
44890: LD_VAR 0 48
44894: PUSH
44895: LD_VAR 0 49
44899: PUSH
44900: LD_VAR 0 50
44904: PUSH
44905: LD_VAR 0 51
44909: PUSH
44910: LD_VAR 0 52
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: PUSH
44923: LD_VAR 0 4
44927: PUSH
44928: LD_INT 1
44930: PLUS
44931: ARRAY
44932: ST_TO_ADDR
44933: GO 45124
44935: LD_INT 4
44937: DOUBLE
44938: EQUAL
44939: IFTRUE 44961
44941: LD_INT 5
44943: DOUBLE
44944: EQUAL
44945: IFTRUE 44961
44947: LD_INT 34
44949: DOUBLE
44950: EQUAL
44951: IFTRUE 44961
44953: LD_INT 37
44955: DOUBLE
44956: EQUAL
44957: IFTRUE 44961
44959: GO 45017
44961: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44962: LD_ADDR_VAR 0 9
44966: PUSH
44967: LD_VAR 0 53
44971: PUSH
44972: LD_VAR 0 54
44976: PUSH
44977: LD_VAR 0 55
44981: PUSH
44982: LD_VAR 0 56
44986: PUSH
44987: LD_VAR 0 57
44991: PUSH
44992: LD_VAR 0 58
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: PUSH
45005: LD_VAR 0 4
45009: PUSH
45010: LD_INT 1
45012: PLUS
45013: ARRAY
45014: ST_TO_ADDR
45015: GO 45124
45017: LD_INT 31
45019: DOUBLE
45020: EQUAL
45021: IFTRUE 45067
45023: LD_INT 32
45025: DOUBLE
45026: EQUAL
45027: IFTRUE 45067
45029: LD_INT 33
45031: DOUBLE
45032: EQUAL
45033: IFTRUE 45067
45035: LD_INT 27
45037: DOUBLE
45038: EQUAL
45039: IFTRUE 45067
45041: LD_INT 26
45043: DOUBLE
45044: EQUAL
45045: IFTRUE 45067
45047: LD_INT 28
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45067
45053: LD_INT 29
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45067
45059: LD_INT 30
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45123
45067: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45068: LD_ADDR_VAR 0 9
45072: PUSH
45073: LD_VAR 0 59
45077: PUSH
45078: LD_VAR 0 60
45082: PUSH
45083: LD_VAR 0 61
45087: PUSH
45088: LD_VAR 0 62
45092: PUSH
45093: LD_VAR 0 63
45097: PUSH
45098: LD_VAR 0 64
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: PUSH
45111: LD_VAR 0 4
45115: PUSH
45116: LD_INT 1
45118: PLUS
45119: ARRAY
45120: ST_TO_ADDR
45121: GO 45124
45123: POP
// temp_list2 = [ ] ;
45124: LD_ADDR_VAR 0 10
45128: PUSH
45129: EMPTY
45130: ST_TO_ADDR
// for i in temp_list do
45131: LD_ADDR_VAR 0 8
45135: PUSH
45136: LD_VAR 0 9
45140: PUSH
45141: FOR_IN
45142: IFFALSE 45194
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45144: LD_ADDR_VAR 0 10
45148: PUSH
45149: LD_VAR 0 10
45153: PUSH
45154: LD_VAR 0 8
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: PUSH
45163: LD_VAR 0 2
45167: PLUS
45168: PUSH
45169: LD_VAR 0 8
45173: PUSH
45174: LD_INT 2
45176: ARRAY
45177: PUSH
45178: LD_VAR 0 3
45182: PLUS
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: ADD
45191: ST_TO_ADDR
45192: GO 45141
45194: POP
45195: POP
// result = temp_list2 ;
45196: LD_ADDR_VAR 0 7
45200: PUSH
45201: LD_VAR 0 10
45205: ST_TO_ADDR
// end ;
45206: LD_VAR 0 7
45210: RET
// export function EnemyInRange ( unit , dist ) ; begin
45211: LD_INT 0
45213: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45214: LD_ADDR_VAR 0 3
45218: PUSH
45219: LD_VAR 0 1
45223: PPUSH
45224: CALL_OW 255
45228: PPUSH
45229: LD_VAR 0 1
45233: PPUSH
45234: CALL_OW 250
45238: PPUSH
45239: LD_VAR 0 1
45243: PPUSH
45244: CALL_OW 251
45248: PPUSH
45249: LD_VAR 0 2
45253: PPUSH
45254: CALL 19315 0 4
45258: PUSH
45259: LD_INT 4
45261: ARRAY
45262: ST_TO_ADDR
// end ;
45263: LD_VAR 0 3
45267: RET
// export function PlayerSeeMe ( unit ) ; begin
45268: LD_INT 0
45270: PPUSH
// result := See ( your_side , unit ) ;
45271: LD_ADDR_VAR 0 2
45275: PUSH
45276: LD_OWVAR 2
45280: PPUSH
45281: LD_VAR 0 1
45285: PPUSH
45286: CALL_OW 292
45290: ST_TO_ADDR
// end ;
45291: LD_VAR 0 2
45295: RET
// export function ReverseDir ( unit ) ; begin
45296: LD_INT 0
45298: PPUSH
// if not unit then
45299: LD_VAR 0 1
45303: NOT
45304: IFFALSE 45308
// exit ;
45306: GO 45354
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
45308: LD_ADDR_VAR 0 2
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: LD_INT 4
45318: PUSH
45319: LD_INT 5
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: PUSH
45339: LD_VAR 0 1
45343: PPUSH
45344: CALL_OW 254
45348: PUSH
45349: LD_INT 1
45351: PLUS
45352: ARRAY
45353: ST_TO_ADDR
// end ;
45354: LD_VAR 0 2
45358: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45359: LD_INT 0
45361: PPUSH
45362: PPUSH
45363: PPUSH
45364: PPUSH
45365: PPUSH
// if not hexes then
45366: LD_VAR 0 2
45370: NOT
45371: IFFALSE 45375
// exit ;
45373: GO 45523
// dist := 9999 ;
45375: LD_ADDR_VAR 0 5
45379: PUSH
45380: LD_INT 9999
45382: ST_TO_ADDR
// for i = 1 to hexes do
45383: LD_ADDR_VAR 0 4
45387: PUSH
45388: DOUBLE
45389: LD_INT 1
45391: DEC
45392: ST_TO_ADDR
45393: LD_VAR 0 2
45397: PUSH
45398: FOR_TO
45399: IFFALSE 45511
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45401: LD_VAR 0 1
45405: PPUSH
45406: LD_VAR 0 2
45410: PUSH
45411: LD_VAR 0 4
45415: ARRAY
45416: PUSH
45417: LD_INT 1
45419: ARRAY
45420: PPUSH
45421: LD_VAR 0 2
45425: PUSH
45426: LD_VAR 0 4
45430: ARRAY
45431: PUSH
45432: LD_INT 2
45434: ARRAY
45435: PPUSH
45436: CALL_OW 297
45440: PUSH
45441: LD_VAR 0 5
45445: LESS
45446: IFFALSE 45509
// begin hex := hexes [ i ] ;
45448: LD_ADDR_VAR 0 7
45452: PUSH
45453: LD_VAR 0 2
45457: PUSH
45458: LD_VAR 0 4
45462: ARRAY
45463: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45464: LD_ADDR_VAR 0 5
45468: PUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: LD_VAR 0 2
45478: PUSH
45479: LD_VAR 0 4
45483: ARRAY
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PPUSH
45489: LD_VAR 0 2
45493: PUSH
45494: LD_VAR 0 4
45498: ARRAY
45499: PUSH
45500: LD_INT 2
45502: ARRAY
45503: PPUSH
45504: CALL_OW 297
45508: ST_TO_ADDR
// end ; end ;
45509: GO 45398
45511: POP
45512: POP
// result := hex ;
45513: LD_ADDR_VAR 0 3
45517: PUSH
45518: LD_VAR 0 7
45522: ST_TO_ADDR
// end ;
45523: LD_VAR 0 3
45527: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45528: LD_INT 0
45530: PPUSH
45531: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45532: LD_VAR 0 1
45536: NOT
45537: PUSH
45538: LD_VAR 0 1
45542: PUSH
45543: LD_INT 21
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 23
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PPUSH
45567: CALL_OW 69
45571: IN
45572: NOT
45573: OR
45574: IFFALSE 45578
// exit ;
45576: GO 45625
// for i = 1 to 3 do
45578: LD_ADDR_VAR 0 3
45582: PUSH
45583: DOUBLE
45584: LD_INT 1
45586: DEC
45587: ST_TO_ADDR
45588: LD_INT 3
45590: PUSH
45591: FOR_TO
45592: IFFALSE 45623
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45594: LD_VAR 0 1
45598: PPUSH
45599: CALL_OW 250
45603: PPUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: CALL_OW 251
45613: PPUSH
45614: LD_INT 1
45616: PPUSH
45617: CALL_OW 453
45621: GO 45591
45623: POP
45624: POP
// end ;
45625: LD_VAR 0 2
45629: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45630: LD_INT 0
45632: PPUSH
45633: PPUSH
45634: PPUSH
45635: PPUSH
45636: PPUSH
45637: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45638: LD_VAR 0 1
45642: NOT
45643: PUSH
45644: LD_VAR 0 2
45648: NOT
45649: OR
45650: PUSH
45651: LD_VAR 0 1
45655: PPUSH
45656: CALL_OW 314
45660: OR
45661: IFFALSE 45665
// exit ;
45663: GO 46106
// x := GetX ( enemy_unit ) ;
45665: LD_ADDR_VAR 0 7
45669: PUSH
45670: LD_VAR 0 2
45674: PPUSH
45675: CALL_OW 250
45679: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45680: LD_ADDR_VAR 0 8
45684: PUSH
45685: LD_VAR 0 2
45689: PPUSH
45690: CALL_OW 251
45694: ST_TO_ADDR
// if not x or not y then
45695: LD_VAR 0 7
45699: NOT
45700: PUSH
45701: LD_VAR 0 8
45705: NOT
45706: OR
45707: IFFALSE 45711
// exit ;
45709: GO 46106
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45711: LD_ADDR_VAR 0 6
45715: PUSH
45716: LD_VAR 0 7
45720: PPUSH
45721: LD_INT 0
45723: PPUSH
45724: LD_INT 4
45726: PPUSH
45727: CALL_OW 272
45731: PUSH
45732: LD_VAR 0 8
45736: PPUSH
45737: LD_INT 0
45739: PPUSH
45740: LD_INT 4
45742: PPUSH
45743: CALL_OW 273
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_VAR 0 7
45756: PPUSH
45757: LD_INT 1
45759: PPUSH
45760: LD_INT 4
45762: PPUSH
45763: CALL_OW 272
45767: PUSH
45768: LD_VAR 0 8
45772: PPUSH
45773: LD_INT 1
45775: PPUSH
45776: LD_INT 4
45778: PPUSH
45779: CALL_OW 273
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_VAR 0 7
45792: PPUSH
45793: LD_INT 2
45795: PPUSH
45796: LD_INT 4
45798: PPUSH
45799: CALL_OW 272
45803: PUSH
45804: LD_VAR 0 8
45808: PPUSH
45809: LD_INT 2
45811: PPUSH
45812: LD_INT 4
45814: PPUSH
45815: CALL_OW 273
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_VAR 0 7
45828: PPUSH
45829: LD_INT 3
45831: PPUSH
45832: LD_INT 4
45834: PPUSH
45835: CALL_OW 272
45839: PUSH
45840: LD_VAR 0 8
45844: PPUSH
45845: LD_INT 3
45847: PPUSH
45848: LD_INT 4
45850: PPUSH
45851: CALL_OW 273
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_VAR 0 7
45864: PPUSH
45865: LD_INT 4
45867: PPUSH
45868: LD_INT 4
45870: PPUSH
45871: CALL_OW 272
45875: PUSH
45876: LD_VAR 0 8
45880: PPUSH
45881: LD_INT 4
45883: PPUSH
45884: LD_INT 4
45886: PPUSH
45887: CALL_OW 273
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_VAR 0 7
45900: PPUSH
45901: LD_INT 5
45903: PPUSH
45904: LD_INT 4
45906: PPUSH
45907: CALL_OW 272
45911: PUSH
45912: LD_VAR 0 8
45916: PPUSH
45917: LD_INT 5
45919: PPUSH
45920: LD_INT 4
45922: PPUSH
45923: CALL_OW 273
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// for i = tmp downto 1 do
45940: LD_ADDR_VAR 0 4
45944: PUSH
45945: DOUBLE
45946: LD_VAR 0 6
45950: INC
45951: ST_TO_ADDR
45952: LD_INT 1
45954: PUSH
45955: FOR_DOWNTO
45956: IFFALSE 46057
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45958: LD_VAR 0 6
45962: PUSH
45963: LD_VAR 0 4
45967: ARRAY
45968: PUSH
45969: LD_INT 1
45971: ARRAY
45972: PPUSH
45973: LD_VAR 0 6
45977: PUSH
45978: LD_VAR 0 4
45982: ARRAY
45983: PUSH
45984: LD_INT 2
45986: ARRAY
45987: PPUSH
45988: CALL_OW 488
45992: NOT
45993: PUSH
45994: LD_VAR 0 6
45998: PUSH
45999: LD_VAR 0 4
46003: ARRAY
46004: PUSH
46005: LD_INT 1
46007: ARRAY
46008: PPUSH
46009: LD_VAR 0 6
46013: PUSH
46014: LD_VAR 0 4
46018: ARRAY
46019: PUSH
46020: LD_INT 2
46022: ARRAY
46023: PPUSH
46024: CALL_OW 428
46028: PUSH
46029: LD_INT 0
46031: NONEQUAL
46032: OR
46033: IFFALSE 46055
// tmp := Delete ( tmp , i ) ;
46035: LD_ADDR_VAR 0 6
46039: PUSH
46040: LD_VAR 0 6
46044: PPUSH
46045: LD_VAR 0 4
46049: PPUSH
46050: CALL_OW 3
46054: ST_TO_ADDR
46055: GO 45955
46057: POP
46058: POP
// j := GetClosestHex ( unit , tmp ) ;
46059: LD_ADDR_VAR 0 5
46063: PUSH
46064: LD_VAR 0 1
46068: PPUSH
46069: LD_VAR 0 6
46073: PPUSH
46074: CALL 45359 0 2
46078: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46079: LD_VAR 0 1
46083: PPUSH
46084: LD_VAR 0 5
46088: PUSH
46089: LD_INT 1
46091: ARRAY
46092: PPUSH
46093: LD_VAR 0 5
46097: PUSH
46098: LD_INT 2
46100: ARRAY
46101: PPUSH
46102: CALL_OW 111
// end ;
46106: LD_VAR 0 3
46110: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46111: LD_INT 0
46113: PPUSH
46114: PPUSH
46115: PPUSH
// uc_side = 0 ;
46116: LD_ADDR_OWVAR 20
46120: PUSH
46121: LD_INT 0
46123: ST_TO_ADDR
// uc_nation = 0 ;
46124: LD_ADDR_OWVAR 21
46128: PUSH
46129: LD_INT 0
46131: ST_TO_ADDR
// InitHc ;
46132: CALL_OW 19
// InitVc ;
46136: CALL_OW 20
// if mastodonts then
46140: LD_VAR 0 6
46144: IFFALSE 46211
// for i = 1 to mastodonts do
46146: LD_ADDR_VAR 0 11
46150: PUSH
46151: DOUBLE
46152: LD_INT 1
46154: DEC
46155: ST_TO_ADDR
46156: LD_VAR 0 6
46160: PUSH
46161: FOR_TO
46162: IFFALSE 46209
// begin vc_chassis := 31 ;
46164: LD_ADDR_OWVAR 37
46168: PUSH
46169: LD_INT 31
46171: ST_TO_ADDR
// vc_control := control_rider ;
46172: LD_ADDR_OWVAR 38
46176: PUSH
46177: LD_INT 4
46179: ST_TO_ADDR
// animal := CreateVehicle ;
46180: LD_ADDR_VAR 0 12
46184: PUSH
46185: CALL_OW 45
46189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46190: LD_VAR 0 12
46194: PPUSH
46195: LD_VAR 0 8
46199: PPUSH
46200: LD_INT 0
46202: PPUSH
46203: CALL 52982 0 3
// end ;
46207: GO 46161
46209: POP
46210: POP
// if horses then
46211: LD_VAR 0 5
46215: IFFALSE 46282
// for i = 1 to horses do
46217: LD_ADDR_VAR 0 11
46221: PUSH
46222: DOUBLE
46223: LD_INT 1
46225: DEC
46226: ST_TO_ADDR
46227: LD_VAR 0 5
46231: PUSH
46232: FOR_TO
46233: IFFALSE 46280
// begin hc_class := 21 ;
46235: LD_ADDR_OWVAR 28
46239: PUSH
46240: LD_INT 21
46242: ST_TO_ADDR
// hc_gallery :=  ;
46243: LD_ADDR_OWVAR 33
46247: PUSH
46248: LD_STRING 
46250: ST_TO_ADDR
// animal := CreateHuman ;
46251: LD_ADDR_VAR 0 12
46255: PUSH
46256: CALL_OW 44
46260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46261: LD_VAR 0 12
46265: PPUSH
46266: LD_VAR 0 8
46270: PPUSH
46271: LD_INT 0
46273: PPUSH
46274: CALL 52982 0 3
// end ;
46278: GO 46232
46280: POP
46281: POP
// if birds then
46282: LD_VAR 0 1
46286: IFFALSE 46353
// for i = 1 to birds do
46288: LD_ADDR_VAR 0 11
46292: PUSH
46293: DOUBLE
46294: LD_INT 1
46296: DEC
46297: ST_TO_ADDR
46298: LD_VAR 0 1
46302: PUSH
46303: FOR_TO
46304: IFFALSE 46351
// begin hc_class = 18 ;
46306: LD_ADDR_OWVAR 28
46310: PUSH
46311: LD_INT 18
46313: ST_TO_ADDR
// hc_gallery =  ;
46314: LD_ADDR_OWVAR 33
46318: PUSH
46319: LD_STRING 
46321: ST_TO_ADDR
// animal := CreateHuman ;
46322: LD_ADDR_VAR 0 12
46326: PUSH
46327: CALL_OW 44
46331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46332: LD_VAR 0 12
46336: PPUSH
46337: LD_VAR 0 8
46341: PPUSH
46342: LD_INT 0
46344: PPUSH
46345: CALL 52982 0 3
// end ;
46349: GO 46303
46351: POP
46352: POP
// if tigers then
46353: LD_VAR 0 2
46357: IFFALSE 46441
// for i = 1 to tigers do
46359: LD_ADDR_VAR 0 11
46363: PUSH
46364: DOUBLE
46365: LD_INT 1
46367: DEC
46368: ST_TO_ADDR
46369: LD_VAR 0 2
46373: PUSH
46374: FOR_TO
46375: IFFALSE 46439
// begin hc_class = class_tiger ;
46377: LD_ADDR_OWVAR 28
46381: PUSH
46382: LD_INT 14
46384: ST_TO_ADDR
// hc_gallery =  ;
46385: LD_ADDR_OWVAR 33
46389: PUSH
46390: LD_STRING 
46392: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46393: LD_ADDR_OWVAR 35
46397: PUSH
46398: LD_INT 7
46400: NEG
46401: PPUSH
46402: LD_INT 7
46404: PPUSH
46405: CALL_OW 12
46409: ST_TO_ADDR
// animal := CreateHuman ;
46410: LD_ADDR_VAR 0 12
46414: PUSH
46415: CALL_OW 44
46419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46420: LD_VAR 0 12
46424: PPUSH
46425: LD_VAR 0 8
46429: PPUSH
46430: LD_INT 0
46432: PPUSH
46433: CALL 52982 0 3
// end ;
46437: GO 46374
46439: POP
46440: POP
// if apemans then
46441: LD_VAR 0 3
46445: IFFALSE 46568
// for i = 1 to apemans do
46447: LD_ADDR_VAR 0 11
46451: PUSH
46452: DOUBLE
46453: LD_INT 1
46455: DEC
46456: ST_TO_ADDR
46457: LD_VAR 0 3
46461: PUSH
46462: FOR_TO
46463: IFFALSE 46566
// begin hc_class = class_apeman ;
46465: LD_ADDR_OWVAR 28
46469: PUSH
46470: LD_INT 12
46472: ST_TO_ADDR
// hc_gallery =  ;
46473: LD_ADDR_OWVAR 33
46477: PUSH
46478: LD_STRING 
46480: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46481: LD_ADDR_OWVAR 35
46485: PUSH
46486: LD_INT 5
46488: NEG
46489: PPUSH
46490: LD_INT 5
46492: PPUSH
46493: CALL_OW 12
46497: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46498: LD_ADDR_OWVAR 31
46502: PUSH
46503: LD_INT 1
46505: PPUSH
46506: LD_INT 3
46508: PPUSH
46509: CALL_OW 12
46513: PUSH
46514: LD_INT 1
46516: PPUSH
46517: LD_INT 3
46519: PPUSH
46520: CALL_OW 12
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// animal := CreateHuman ;
46537: LD_ADDR_VAR 0 12
46541: PUSH
46542: CALL_OW 44
46546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46547: LD_VAR 0 12
46551: PPUSH
46552: LD_VAR 0 8
46556: PPUSH
46557: LD_INT 0
46559: PPUSH
46560: CALL 52982 0 3
// end ;
46564: GO 46462
46566: POP
46567: POP
// if enchidnas then
46568: LD_VAR 0 4
46572: IFFALSE 46639
// for i = 1 to enchidnas do
46574: LD_ADDR_VAR 0 11
46578: PUSH
46579: DOUBLE
46580: LD_INT 1
46582: DEC
46583: ST_TO_ADDR
46584: LD_VAR 0 4
46588: PUSH
46589: FOR_TO
46590: IFFALSE 46637
// begin hc_class = 13 ;
46592: LD_ADDR_OWVAR 28
46596: PUSH
46597: LD_INT 13
46599: ST_TO_ADDR
// hc_gallery =  ;
46600: LD_ADDR_OWVAR 33
46604: PUSH
46605: LD_STRING 
46607: ST_TO_ADDR
// animal := CreateHuman ;
46608: LD_ADDR_VAR 0 12
46612: PUSH
46613: CALL_OW 44
46617: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46618: LD_VAR 0 12
46622: PPUSH
46623: LD_VAR 0 8
46627: PPUSH
46628: LD_INT 0
46630: PPUSH
46631: CALL 52982 0 3
// end ;
46635: GO 46589
46637: POP
46638: POP
// if fishes then
46639: LD_VAR 0 7
46643: IFFALSE 46710
// for i = 1 to fishes do
46645: LD_ADDR_VAR 0 11
46649: PUSH
46650: DOUBLE
46651: LD_INT 1
46653: DEC
46654: ST_TO_ADDR
46655: LD_VAR 0 7
46659: PUSH
46660: FOR_TO
46661: IFFALSE 46708
// begin hc_class = 20 ;
46663: LD_ADDR_OWVAR 28
46667: PUSH
46668: LD_INT 20
46670: ST_TO_ADDR
// hc_gallery =  ;
46671: LD_ADDR_OWVAR 33
46675: PUSH
46676: LD_STRING 
46678: ST_TO_ADDR
// animal := CreateHuman ;
46679: LD_ADDR_VAR 0 12
46683: PUSH
46684: CALL_OW 44
46688: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46689: LD_VAR 0 12
46693: PPUSH
46694: LD_VAR 0 9
46698: PPUSH
46699: LD_INT 0
46701: PPUSH
46702: CALL 52982 0 3
// end ;
46706: GO 46660
46708: POP
46709: POP
// end ;
46710: LD_VAR 0 10
46714: RET
// export function WantHeal ( sci , unit ) ; begin
46715: LD_INT 0
46717: PPUSH
// if GetTaskList ( sci ) > 0 then
46718: LD_VAR 0 1
46722: PPUSH
46723: CALL_OW 437
46727: PUSH
46728: LD_INT 0
46730: GREATER
46731: IFFALSE 46801
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46733: LD_VAR 0 1
46737: PPUSH
46738: CALL_OW 437
46742: PUSH
46743: LD_INT 1
46745: ARRAY
46746: PUSH
46747: LD_INT 1
46749: ARRAY
46750: PUSH
46751: LD_STRING l
46753: EQUAL
46754: PUSH
46755: LD_VAR 0 1
46759: PPUSH
46760: CALL_OW 437
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PUSH
46769: LD_INT 4
46771: ARRAY
46772: PUSH
46773: LD_VAR 0 2
46777: EQUAL
46778: AND
46779: IFFALSE 46791
// result := true else
46781: LD_ADDR_VAR 0 3
46785: PUSH
46786: LD_INT 1
46788: ST_TO_ADDR
46789: GO 46799
// result := false ;
46791: LD_ADDR_VAR 0 3
46795: PUSH
46796: LD_INT 0
46798: ST_TO_ADDR
// end else
46799: GO 46809
// result := false ;
46801: LD_ADDR_VAR 0 3
46805: PUSH
46806: LD_INT 0
46808: ST_TO_ADDR
// end ;
46809: LD_VAR 0 3
46813: RET
// export function HealTarget ( sci ) ; begin
46814: LD_INT 0
46816: PPUSH
// if not sci then
46817: LD_VAR 0 1
46821: NOT
46822: IFFALSE 46826
// exit ;
46824: GO 46891
// result := 0 ;
46826: LD_ADDR_VAR 0 2
46830: PUSH
46831: LD_INT 0
46833: ST_TO_ADDR
// if GetTaskList ( sci ) then
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 437
46843: IFFALSE 46891
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46845: LD_VAR 0 1
46849: PPUSH
46850: CALL_OW 437
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: PUSH
46859: LD_INT 1
46861: ARRAY
46862: PUSH
46863: LD_STRING l
46865: EQUAL
46866: IFFALSE 46891
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46868: LD_ADDR_VAR 0 2
46872: PUSH
46873: LD_VAR 0 1
46877: PPUSH
46878: CALL_OW 437
46882: PUSH
46883: LD_INT 1
46885: ARRAY
46886: PUSH
46887: LD_INT 4
46889: ARRAY
46890: ST_TO_ADDR
// end ;
46891: LD_VAR 0 2
46895: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
46896: LD_INT 0
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
// if not list then
46932: LD_VAR 0 1
46936: NOT
46937: IFFALSE 46941
// exit ;
46939: GO 51593
// base := list [ 1 ] ;
46941: LD_ADDR_VAR 0 3
46945: PUSH
46946: LD_VAR 0 1
46950: PUSH
46951: LD_INT 1
46953: ARRAY
46954: ST_TO_ADDR
// group := list [ 2 ] ;
46955: LD_ADDR_VAR 0 4
46959: PUSH
46960: LD_VAR 0 1
46964: PUSH
46965: LD_INT 2
46967: ARRAY
46968: ST_TO_ADDR
// path := list [ 3 ] ;
46969: LD_ADDR_VAR 0 5
46973: PUSH
46974: LD_VAR 0 1
46978: PUSH
46979: LD_INT 3
46981: ARRAY
46982: ST_TO_ADDR
// flags := list [ 4 ] ;
46983: LD_ADDR_VAR 0 6
46987: PUSH
46988: LD_VAR 0 1
46992: PUSH
46993: LD_INT 4
46995: ARRAY
46996: ST_TO_ADDR
// mined := [ ] ;
46997: LD_ADDR_VAR 0 27
47001: PUSH
47002: EMPTY
47003: ST_TO_ADDR
// bombed := [ ] ;
47004: LD_ADDR_VAR 0 28
47008: PUSH
47009: EMPTY
47010: ST_TO_ADDR
// healers := [ ] ;
47011: LD_ADDR_VAR 0 31
47015: PUSH
47016: EMPTY
47017: ST_TO_ADDR
// to_heal := [ ] ;
47018: LD_ADDR_VAR 0 30
47022: PUSH
47023: EMPTY
47024: ST_TO_ADDR
// repairs := [ ] ;
47025: LD_ADDR_VAR 0 33
47029: PUSH
47030: EMPTY
47031: ST_TO_ADDR
// to_repair := [ ] ;
47032: LD_ADDR_VAR 0 32
47036: PUSH
47037: EMPTY
47038: ST_TO_ADDR
// if not group or not path then
47039: LD_VAR 0 4
47043: NOT
47044: PUSH
47045: LD_VAR 0 5
47049: NOT
47050: OR
47051: IFFALSE 47055
// exit ;
47053: GO 51593
// side := GetSide ( group [ 1 ] ) ;
47055: LD_ADDR_VAR 0 35
47059: PUSH
47060: LD_VAR 0 4
47064: PUSH
47065: LD_INT 1
47067: ARRAY
47068: PPUSH
47069: CALL_OW 255
47073: ST_TO_ADDR
// if flags then
47074: LD_VAR 0 6
47078: IFFALSE 47222
// begin f_ignore_area := flags [ 1 ] ;
47080: LD_ADDR_VAR 0 17
47084: PUSH
47085: LD_VAR 0 6
47089: PUSH
47090: LD_INT 1
47092: ARRAY
47093: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
47094: LD_ADDR_VAR 0 18
47098: PUSH
47099: LD_VAR 0 6
47103: PUSH
47104: LD_INT 2
47106: ARRAY
47107: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
47108: LD_ADDR_VAR 0 19
47112: PUSH
47113: LD_VAR 0 6
47117: PUSH
47118: LD_INT 3
47120: ARRAY
47121: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
47122: LD_ADDR_VAR 0 20
47126: PUSH
47127: LD_VAR 0 6
47131: PUSH
47132: LD_INT 4
47134: ARRAY
47135: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
47136: LD_ADDR_VAR 0 21
47140: PUSH
47141: LD_VAR 0 6
47145: PUSH
47146: LD_INT 5
47148: ARRAY
47149: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47150: LD_ADDR_VAR 0 22
47154: PUSH
47155: LD_VAR 0 6
47159: PUSH
47160: LD_INT 6
47162: ARRAY
47163: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47164: LD_ADDR_VAR 0 23
47168: PUSH
47169: LD_VAR 0 6
47173: PUSH
47174: LD_INT 7
47176: ARRAY
47177: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47178: LD_ADDR_VAR 0 24
47182: PUSH
47183: LD_VAR 0 6
47187: PUSH
47188: LD_INT 8
47190: ARRAY
47191: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47192: LD_ADDR_VAR 0 25
47196: PUSH
47197: LD_VAR 0 6
47201: PUSH
47202: LD_INT 9
47204: ARRAY
47205: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47206: LD_ADDR_VAR 0 26
47210: PUSH
47211: LD_VAR 0 6
47215: PUSH
47216: LD_INT 10
47218: ARRAY
47219: ST_TO_ADDR
// end else
47220: GO 47302
// begin f_ignore_area := false ;
47222: LD_ADDR_VAR 0 17
47226: PUSH
47227: LD_INT 0
47229: ST_TO_ADDR
// f_capture := false ;
47230: LD_ADDR_VAR 0 18
47234: PUSH
47235: LD_INT 0
47237: ST_TO_ADDR
// f_ignore_civ := false ;
47238: LD_ADDR_VAR 0 19
47242: PUSH
47243: LD_INT 0
47245: ST_TO_ADDR
// f_murder := false ;
47246: LD_ADDR_VAR 0 20
47250: PUSH
47251: LD_INT 0
47253: ST_TO_ADDR
// f_mines := false ;
47254: LD_ADDR_VAR 0 21
47258: PUSH
47259: LD_INT 0
47261: ST_TO_ADDR
// f_repair := false ;
47262: LD_ADDR_VAR 0 22
47266: PUSH
47267: LD_INT 0
47269: ST_TO_ADDR
// f_heal := false ;
47270: LD_ADDR_VAR 0 23
47274: PUSH
47275: LD_INT 0
47277: ST_TO_ADDR
// f_spacetime := false ;
47278: LD_ADDR_VAR 0 24
47282: PUSH
47283: LD_INT 0
47285: ST_TO_ADDR
// f_attack_depot := false ;
47286: LD_ADDR_VAR 0 25
47290: PUSH
47291: LD_INT 0
47293: ST_TO_ADDR
// f_crawl := false ;
47294: LD_ADDR_VAR 0 26
47298: PUSH
47299: LD_INT 0
47301: ST_TO_ADDR
// end ; if f_heal then
47302: LD_VAR 0 23
47306: IFFALSE 47333
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
47308: LD_ADDR_VAR 0 31
47312: PUSH
47313: LD_VAR 0 4
47317: PPUSH
47318: LD_INT 25
47320: PUSH
47321: LD_INT 4
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PPUSH
47328: CALL_OW 72
47332: ST_TO_ADDR
// if f_repair then
47333: LD_VAR 0 22
47337: IFFALSE 47364
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
47339: LD_ADDR_VAR 0 33
47343: PUSH
47344: LD_VAR 0 4
47348: PPUSH
47349: LD_INT 25
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PPUSH
47359: CALL_OW 72
47363: ST_TO_ADDR
// units_path := [ ] ;
47364: LD_ADDR_VAR 0 16
47368: PUSH
47369: EMPTY
47370: ST_TO_ADDR
// for i = 1 to group do
47371: LD_ADDR_VAR 0 7
47375: PUSH
47376: DOUBLE
47377: LD_INT 1
47379: DEC
47380: ST_TO_ADDR
47381: LD_VAR 0 4
47385: PUSH
47386: FOR_TO
47387: IFFALSE 47416
// units_path := Replace ( units_path , i , path ) ;
47389: LD_ADDR_VAR 0 16
47393: PUSH
47394: LD_VAR 0 16
47398: PPUSH
47399: LD_VAR 0 7
47403: PPUSH
47404: LD_VAR 0 5
47408: PPUSH
47409: CALL_OW 1
47413: ST_TO_ADDR
47414: GO 47386
47416: POP
47417: POP
// repeat for i = group downto 1 do
47418: LD_ADDR_VAR 0 7
47422: PUSH
47423: DOUBLE
47424: LD_VAR 0 4
47428: INC
47429: ST_TO_ADDR
47430: LD_INT 1
47432: PUSH
47433: FOR_DOWNTO
47434: IFFALSE 51556
// begin wait ( 5 ) ;
47436: LD_INT 5
47438: PPUSH
47439: CALL_OW 67
// tmp := [ ] ;
47443: LD_ADDR_VAR 0 14
47447: PUSH
47448: EMPTY
47449: ST_TO_ADDR
// attacking := false ;
47450: LD_ADDR_VAR 0 29
47454: PUSH
47455: LD_INT 0
47457: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
47458: LD_VAR 0 4
47462: PUSH
47463: LD_VAR 0 7
47467: ARRAY
47468: PPUSH
47469: CALL_OW 301
47473: PUSH
47474: LD_VAR 0 4
47478: PUSH
47479: LD_VAR 0 7
47483: ARRAY
47484: NOT
47485: OR
47486: IFFALSE 47595
// begin if GetType ( group [ i ] ) = unit_human then
47488: LD_VAR 0 4
47492: PUSH
47493: LD_VAR 0 7
47497: ARRAY
47498: PPUSH
47499: CALL_OW 247
47503: PUSH
47504: LD_INT 1
47506: EQUAL
47507: IFFALSE 47553
// begin to_heal := to_heal diff group [ i ] ;
47509: LD_ADDR_VAR 0 30
47513: PUSH
47514: LD_VAR 0 30
47518: PUSH
47519: LD_VAR 0 4
47523: PUSH
47524: LD_VAR 0 7
47528: ARRAY
47529: DIFF
47530: ST_TO_ADDR
// healers := healers diff group [ i ] ;
47531: LD_ADDR_VAR 0 31
47535: PUSH
47536: LD_VAR 0 31
47540: PUSH
47541: LD_VAR 0 4
47545: PUSH
47546: LD_VAR 0 7
47550: ARRAY
47551: DIFF
47552: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
47553: LD_ADDR_VAR 0 4
47557: PUSH
47558: LD_VAR 0 4
47562: PPUSH
47563: LD_VAR 0 7
47567: PPUSH
47568: CALL_OW 3
47572: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47573: LD_ADDR_VAR 0 16
47577: PUSH
47578: LD_VAR 0 16
47582: PPUSH
47583: LD_VAR 0 7
47587: PPUSH
47588: CALL_OW 3
47592: ST_TO_ADDR
// continue ;
47593: GO 47433
// end ; if f_repair then
47595: LD_VAR 0 22
47599: IFFALSE 48088
// begin if GetType ( group [ i ] ) = unit_vehicle then
47601: LD_VAR 0 4
47605: PUSH
47606: LD_VAR 0 7
47610: ARRAY
47611: PPUSH
47612: CALL_OW 247
47616: PUSH
47617: LD_INT 2
47619: EQUAL
47620: IFFALSE 47810
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
47622: LD_VAR 0 4
47626: PUSH
47627: LD_VAR 0 7
47631: ARRAY
47632: PPUSH
47633: CALL_OW 256
47637: PUSH
47638: LD_INT 700
47640: LESS
47641: PUSH
47642: LD_VAR 0 4
47646: PUSH
47647: LD_VAR 0 7
47651: ARRAY
47652: PUSH
47653: LD_VAR 0 32
47657: IN
47658: NOT
47659: AND
47660: IFFALSE 47684
// to_repair := to_repair union group [ i ] ;
47662: LD_ADDR_VAR 0 32
47666: PUSH
47667: LD_VAR 0 32
47671: PUSH
47672: LD_VAR 0 4
47676: PUSH
47677: LD_VAR 0 7
47681: ARRAY
47682: UNION
47683: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
47684: LD_VAR 0 4
47688: PUSH
47689: LD_VAR 0 7
47693: ARRAY
47694: PPUSH
47695: CALL_OW 256
47699: PUSH
47700: LD_INT 1000
47702: EQUAL
47703: PUSH
47704: LD_VAR 0 4
47708: PUSH
47709: LD_VAR 0 7
47713: ARRAY
47714: PUSH
47715: LD_VAR 0 32
47719: IN
47720: AND
47721: IFFALSE 47745
// to_repair := to_repair diff group [ i ] ;
47723: LD_ADDR_VAR 0 32
47727: PUSH
47728: LD_VAR 0 32
47732: PUSH
47733: LD_VAR 0 4
47737: PUSH
47738: LD_VAR 0 7
47742: ARRAY
47743: DIFF
47744: ST_TO_ADDR
// if group [ i ] in to_repair then
47745: LD_VAR 0 4
47749: PUSH
47750: LD_VAR 0 7
47754: ARRAY
47755: PUSH
47756: LD_VAR 0 32
47760: IN
47761: IFFALSE 47808
// begin if not IsInArea ( group [ i ] , f_repair ) then
47763: LD_VAR 0 4
47767: PUSH
47768: LD_VAR 0 7
47772: ARRAY
47773: PPUSH
47774: LD_VAR 0 22
47778: PPUSH
47779: CALL_OW 308
47783: NOT
47784: IFFALSE 47806
// ComMoveToArea ( group [ i ] , f_repair ) ;
47786: LD_VAR 0 4
47790: PUSH
47791: LD_VAR 0 7
47795: ARRAY
47796: PPUSH
47797: LD_VAR 0 22
47801: PPUSH
47802: CALL_OW 113
// continue ;
47806: GO 47433
// end ; end else
47808: GO 48088
// if group [ i ] in repairs then
47810: LD_VAR 0 4
47814: PUSH
47815: LD_VAR 0 7
47819: ARRAY
47820: PUSH
47821: LD_VAR 0 33
47825: IN
47826: IFFALSE 48088
// begin if IsInUnit ( group [ i ] ) then
47828: LD_VAR 0 4
47832: PUSH
47833: LD_VAR 0 7
47837: ARRAY
47838: PPUSH
47839: CALL_OW 310
47843: IFFALSE 47911
// begin z := IsInUnit ( group [ i ] ) ;
47845: LD_ADDR_VAR 0 13
47849: PUSH
47850: LD_VAR 0 4
47854: PUSH
47855: LD_VAR 0 7
47859: ARRAY
47860: PPUSH
47861: CALL_OW 310
47865: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
47866: LD_VAR 0 13
47870: PUSH
47871: LD_VAR 0 32
47875: IN
47876: PUSH
47877: LD_VAR 0 13
47881: PPUSH
47882: LD_VAR 0 22
47886: PPUSH
47887: CALL_OW 308
47891: AND
47892: IFFALSE 47909
// ComExitVehicle ( group [ i ] ) ;
47894: LD_VAR 0 4
47898: PUSH
47899: LD_VAR 0 7
47903: ARRAY
47904: PPUSH
47905: CALL_OW 121
// end else
47909: GO 48088
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
47911: LD_ADDR_VAR 0 13
47915: PUSH
47916: LD_VAR 0 4
47920: PPUSH
47921: LD_INT 95
47923: PUSH
47924: LD_VAR 0 22
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 58
47935: PUSH
47936: EMPTY
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PPUSH
47943: CALL_OW 72
47947: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
47948: LD_VAR 0 4
47952: PUSH
47953: LD_VAR 0 7
47957: ARRAY
47958: PPUSH
47959: CALL_OW 314
47963: NOT
47964: IFFALSE 48086
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
47966: LD_ADDR_VAR 0 10
47970: PUSH
47971: LD_VAR 0 13
47975: PPUSH
47976: LD_VAR 0 4
47980: PUSH
47981: LD_VAR 0 7
47985: ARRAY
47986: PPUSH
47987: CALL_OW 74
47991: ST_TO_ADDR
// if not x then
47992: LD_VAR 0 10
47996: NOT
47997: IFFALSE 48001
// continue ;
47999: GO 47433
// if GetLives ( x ) < 1000 then
48001: LD_VAR 0 10
48005: PPUSH
48006: CALL_OW 256
48010: PUSH
48011: LD_INT 1000
48013: LESS
48014: IFFALSE 48038
// ComRepairVehicle ( group [ i ] , x ) else
48016: LD_VAR 0 4
48020: PUSH
48021: LD_VAR 0 7
48025: ARRAY
48026: PPUSH
48027: LD_VAR 0 10
48031: PPUSH
48032: CALL_OW 129
48036: GO 48086
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
48038: LD_VAR 0 23
48042: PUSH
48043: LD_VAR 0 4
48047: PUSH
48048: LD_VAR 0 7
48052: ARRAY
48053: PPUSH
48054: CALL_OW 256
48058: PUSH
48059: LD_INT 1000
48061: LESS
48062: AND
48063: NOT
48064: IFFALSE 48086
// ComEnterUnit ( group [ i ] , x ) ;
48066: LD_VAR 0 4
48070: PUSH
48071: LD_VAR 0 7
48075: ARRAY
48076: PPUSH
48077: LD_VAR 0 10
48081: PPUSH
48082: CALL_OW 120
// end ; continue ;
48086: GO 47433
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
48088: LD_VAR 0 23
48092: PUSH
48093: LD_VAR 0 4
48097: PUSH
48098: LD_VAR 0 7
48102: ARRAY
48103: PPUSH
48104: CALL_OW 247
48108: PUSH
48109: LD_INT 1
48111: EQUAL
48112: AND
48113: IFFALSE 48591
// begin if group [ i ] in healers then
48115: LD_VAR 0 4
48119: PUSH
48120: LD_VAR 0 7
48124: ARRAY
48125: PUSH
48126: LD_VAR 0 31
48130: IN
48131: IFFALSE 48404
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
48133: LD_VAR 0 4
48137: PUSH
48138: LD_VAR 0 7
48142: ARRAY
48143: PPUSH
48144: LD_VAR 0 23
48148: PPUSH
48149: CALL_OW 308
48153: NOT
48154: PUSH
48155: LD_VAR 0 4
48159: PUSH
48160: LD_VAR 0 7
48164: ARRAY
48165: PPUSH
48166: CALL_OW 314
48170: NOT
48171: AND
48172: IFFALSE 48196
// ComMoveToArea ( group [ i ] , f_heal ) else
48174: LD_VAR 0 4
48178: PUSH
48179: LD_VAR 0 7
48183: ARRAY
48184: PPUSH
48185: LD_VAR 0 23
48189: PPUSH
48190: CALL_OW 113
48194: GO 48402
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
48196: LD_VAR 0 4
48200: PUSH
48201: LD_VAR 0 7
48205: ARRAY
48206: PPUSH
48207: CALL 46814 0 1
48211: PPUSH
48212: CALL_OW 256
48216: PUSH
48217: LD_INT 1000
48219: EQUAL
48220: IFFALSE 48239
// ComStop ( group [ i ] ) else
48222: LD_VAR 0 4
48226: PUSH
48227: LD_VAR 0 7
48231: ARRAY
48232: PPUSH
48233: CALL_OW 141
48237: GO 48402
// if not HasTask ( group [ i ] ) and to_heal then
48239: LD_VAR 0 4
48243: PUSH
48244: LD_VAR 0 7
48248: ARRAY
48249: PPUSH
48250: CALL_OW 314
48254: NOT
48255: PUSH
48256: LD_VAR 0 30
48260: AND
48261: IFFALSE 48402
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
48263: LD_ADDR_VAR 0 13
48267: PUSH
48268: LD_VAR 0 30
48272: PPUSH
48273: LD_INT 3
48275: PUSH
48276: LD_INT 54
48278: PUSH
48279: EMPTY
48280: LIST
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PPUSH
48286: CALL_OW 72
48290: PPUSH
48291: LD_VAR 0 4
48295: PUSH
48296: LD_VAR 0 7
48300: ARRAY
48301: PPUSH
48302: CALL_OW 74
48306: ST_TO_ADDR
// if z then
48307: LD_VAR 0 13
48311: IFFALSE 48402
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
48313: LD_INT 91
48315: PUSH
48316: LD_VAR 0 13
48320: PUSH
48321: LD_INT 10
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 81
48331: PUSH
48332: LD_VAR 0 13
48336: PPUSH
48337: CALL_OW 255
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PPUSH
48350: CALL_OW 69
48354: PUSH
48355: LD_INT 0
48357: EQUAL
48358: IFFALSE 48382
// ComHeal ( group [ i ] , z ) else
48360: LD_VAR 0 4
48364: PUSH
48365: LD_VAR 0 7
48369: ARRAY
48370: PPUSH
48371: LD_VAR 0 13
48375: PPUSH
48376: CALL_OW 128
48380: GO 48402
// ComMoveToArea ( group [ i ] , f_heal ) ;
48382: LD_VAR 0 4
48386: PUSH
48387: LD_VAR 0 7
48391: ARRAY
48392: PPUSH
48393: LD_VAR 0 23
48397: PPUSH
48398: CALL_OW 113
// end ; continue ;
48402: GO 47433
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
48404: LD_VAR 0 4
48408: PUSH
48409: LD_VAR 0 7
48413: ARRAY
48414: PPUSH
48415: CALL_OW 256
48419: PUSH
48420: LD_INT 700
48422: LESS
48423: PUSH
48424: LD_VAR 0 4
48428: PUSH
48429: LD_VAR 0 7
48433: ARRAY
48434: PUSH
48435: LD_VAR 0 30
48439: IN
48440: NOT
48441: AND
48442: IFFALSE 48466
// to_heal := to_heal union group [ i ] ;
48444: LD_ADDR_VAR 0 30
48448: PUSH
48449: LD_VAR 0 30
48453: PUSH
48454: LD_VAR 0 4
48458: PUSH
48459: LD_VAR 0 7
48463: ARRAY
48464: UNION
48465: ST_TO_ADDR
// if group [ i ] in to_heal then
48466: LD_VAR 0 4
48470: PUSH
48471: LD_VAR 0 7
48475: ARRAY
48476: PUSH
48477: LD_VAR 0 30
48481: IN
48482: IFFALSE 48591
// begin if GetLives ( group [ i ] ) = 1000 then
48484: LD_VAR 0 4
48488: PUSH
48489: LD_VAR 0 7
48493: ARRAY
48494: PPUSH
48495: CALL_OW 256
48499: PUSH
48500: LD_INT 1000
48502: EQUAL
48503: IFFALSE 48529
// to_heal := to_heal diff group [ i ] else
48505: LD_ADDR_VAR 0 30
48509: PUSH
48510: LD_VAR 0 30
48514: PUSH
48515: LD_VAR 0 4
48519: PUSH
48520: LD_VAR 0 7
48524: ARRAY
48525: DIFF
48526: ST_TO_ADDR
48527: GO 48591
// begin if not IsInArea ( group [ i ] , to_heal ) then
48529: LD_VAR 0 4
48533: PUSH
48534: LD_VAR 0 7
48538: ARRAY
48539: PPUSH
48540: LD_VAR 0 30
48544: PPUSH
48545: CALL_OW 308
48549: NOT
48550: IFFALSE 48574
// ComMoveToArea ( group [ i ] , f_heal ) else
48552: LD_VAR 0 4
48556: PUSH
48557: LD_VAR 0 7
48561: ARRAY
48562: PPUSH
48563: LD_VAR 0 23
48567: PPUSH
48568: CALL_OW 113
48572: GO 48589
// ComHold ( group [ i ] ) ;
48574: LD_VAR 0 4
48578: PUSH
48579: LD_VAR 0 7
48583: ARRAY
48584: PPUSH
48585: CALL_OW 140
// continue ;
48589: GO 47433
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48591: LD_VAR 0 4
48595: PUSH
48596: LD_VAR 0 7
48600: ARRAY
48601: PPUSH
48602: LD_INT 10
48604: PPUSH
48605: CALL 45211 0 2
48609: NOT
48610: PUSH
48611: LD_VAR 0 16
48615: PUSH
48616: LD_VAR 0 7
48620: ARRAY
48621: PUSH
48622: EMPTY
48623: EQUAL
48624: NOT
48625: AND
48626: IFFALSE 48892
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48628: LD_VAR 0 4
48632: PUSH
48633: LD_VAR 0 7
48637: ARRAY
48638: PPUSH
48639: CALL_OW 262
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: IN
48654: IFFALSE 48695
// if GetFuel ( group [ i ] ) < 10 then
48656: LD_VAR 0 4
48660: PUSH
48661: LD_VAR 0 7
48665: ARRAY
48666: PPUSH
48667: CALL_OW 261
48671: PUSH
48672: LD_INT 10
48674: LESS
48675: IFFALSE 48695
// SetFuel ( group [ i ] , 12 ) ;
48677: LD_VAR 0 4
48681: PUSH
48682: LD_VAR 0 7
48686: ARRAY
48687: PPUSH
48688: LD_INT 12
48690: PPUSH
48691: CALL_OW 240
// if units_path [ i ] then
48695: LD_VAR 0 16
48699: PUSH
48700: LD_VAR 0 7
48704: ARRAY
48705: IFFALSE 48890
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48707: LD_VAR 0 4
48711: PUSH
48712: LD_VAR 0 7
48716: ARRAY
48717: PPUSH
48718: LD_VAR 0 16
48722: PUSH
48723: LD_VAR 0 7
48727: ARRAY
48728: PUSH
48729: LD_INT 1
48731: ARRAY
48732: PUSH
48733: LD_INT 1
48735: ARRAY
48736: PPUSH
48737: LD_VAR 0 16
48741: PUSH
48742: LD_VAR 0 7
48746: ARRAY
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: PUSH
48752: LD_INT 2
48754: ARRAY
48755: PPUSH
48756: CALL_OW 297
48760: PUSH
48761: LD_INT 6
48763: GREATER
48764: IFFALSE 48839
// begin if not HasTask ( group [ i ] ) then
48766: LD_VAR 0 4
48770: PUSH
48771: LD_VAR 0 7
48775: ARRAY
48776: PPUSH
48777: CALL_OW 314
48781: NOT
48782: IFFALSE 48837
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48784: LD_VAR 0 4
48788: PUSH
48789: LD_VAR 0 7
48793: ARRAY
48794: PPUSH
48795: LD_VAR 0 16
48799: PUSH
48800: LD_VAR 0 7
48804: ARRAY
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: PUSH
48810: LD_INT 1
48812: ARRAY
48813: PPUSH
48814: LD_VAR 0 16
48818: PUSH
48819: LD_VAR 0 7
48823: ARRAY
48824: PUSH
48825: LD_INT 1
48827: ARRAY
48828: PUSH
48829: LD_INT 2
48831: ARRAY
48832: PPUSH
48833: CALL_OW 114
// end else
48837: GO 48890
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48839: LD_ADDR_VAR 0 15
48843: PUSH
48844: LD_VAR 0 16
48848: PUSH
48849: LD_VAR 0 7
48853: ARRAY
48854: PPUSH
48855: LD_INT 1
48857: PPUSH
48858: CALL_OW 3
48862: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48863: LD_ADDR_VAR 0 16
48867: PUSH
48868: LD_VAR 0 16
48872: PPUSH
48873: LD_VAR 0 7
48877: PPUSH
48878: LD_VAR 0 15
48882: PPUSH
48883: CALL_OW 1
48887: ST_TO_ADDR
// continue ;
48888: GO 47433
// end ; end ; end else
48890: GO 51554
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48892: LD_ADDR_VAR 0 14
48896: PUSH
48897: LD_INT 81
48899: PUSH
48900: LD_VAR 0 4
48904: PUSH
48905: LD_VAR 0 7
48909: ARRAY
48910: PPUSH
48911: CALL_OW 255
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PPUSH
48920: CALL_OW 69
48924: ST_TO_ADDR
// if not tmp then
48925: LD_VAR 0 14
48929: NOT
48930: IFFALSE 48934
// continue ;
48932: GO 47433
// if f_ignore_area then
48934: LD_VAR 0 17
48938: IFFALSE 49026
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48940: LD_ADDR_VAR 0 15
48944: PUSH
48945: LD_VAR 0 14
48949: PPUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 92
48955: PUSH
48956: LD_VAR 0 17
48960: PUSH
48961: LD_INT 1
48963: ARRAY
48964: PUSH
48965: LD_VAR 0 17
48969: PUSH
48970: LD_INT 2
48972: ARRAY
48973: PUSH
48974: LD_VAR 0 17
48978: PUSH
48979: LD_INT 3
48981: ARRAY
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PPUSH
48993: CALL_OW 72
48997: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48998: LD_VAR 0 14
49002: PUSH
49003: LD_VAR 0 15
49007: DIFF
49008: IFFALSE 49026
// tmp := tmp diff tmp2 ;
49010: LD_ADDR_VAR 0 14
49014: PUSH
49015: LD_VAR 0 14
49019: PUSH
49020: LD_VAR 0 15
49024: DIFF
49025: ST_TO_ADDR
// end ; if not f_murder then
49026: LD_VAR 0 20
49030: NOT
49031: IFFALSE 49089
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
49033: LD_ADDR_VAR 0 15
49037: PUSH
49038: LD_VAR 0 14
49042: PPUSH
49043: LD_INT 3
49045: PUSH
49046: LD_INT 50
49048: PUSH
49049: EMPTY
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PPUSH
49056: CALL_OW 72
49060: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
49061: LD_VAR 0 14
49065: PUSH
49066: LD_VAR 0 15
49070: DIFF
49071: IFFALSE 49089
// tmp := tmp diff tmp2 ;
49073: LD_ADDR_VAR 0 14
49077: PUSH
49078: LD_VAR 0 14
49082: PUSH
49083: LD_VAR 0 15
49087: DIFF
49088: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
49089: LD_ADDR_VAR 0 14
49093: PUSH
49094: LD_VAR 0 4
49098: PUSH
49099: LD_VAR 0 7
49103: ARRAY
49104: PPUSH
49105: LD_VAR 0 14
49109: PPUSH
49110: LD_INT 1
49112: PPUSH
49113: LD_INT 1
49115: PPUSH
49116: CALL 18854 0 4
49120: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
49121: LD_VAR 0 4
49125: PUSH
49126: LD_VAR 0 7
49130: ARRAY
49131: PPUSH
49132: CALL_OW 257
49136: PUSH
49137: LD_INT 1
49139: EQUAL
49140: IFFALSE 49588
// begin if WantPlant ( group [ i ] ) then
49142: LD_VAR 0 4
49146: PUSH
49147: LD_VAR 0 7
49151: ARRAY
49152: PPUSH
49153: CALL 18355 0 1
49157: IFFALSE 49161
// continue ;
49159: GO 47433
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
49161: LD_VAR 0 18
49165: PUSH
49166: LD_VAR 0 4
49170: PUSH
49171: LD_VAR 0 7
49175: ARRAY
49176: PPUSH
49177: CALL_OW 310
49181: NOT
49182: AND
49183: PUSH
49184: LD_VAR 0 14
49188: PUSH
49189: LD_INT 1
49191: ARRAY
49192: PUSH
49193: LD_VAR 0 14
49197: PPUSH
49198: LD_INT 21
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 58
49210: PUSH
49211: EMPTY
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PPUSH
49218: CALL_OW 72
49222: IN
49223: AND
49224: IFFALSE 49260
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
49226: LD_VAR 0 4
49230: PUSH
49231: LD_VAR 0 7
49235: ARRAY
49236: PPUSH
49237: LD_VAR 0 14
49241: PUSH
49242: LD_INT 1
49244: ARRAY
49245: PPUSH
49246: CALL_OW 120
// attacking := true ;
49250: LD_ADDR_VAR 0 29
49254: PUSH
49255: LD_INT 1
49257: ST_TO_ADDR
// continue ;
49258: GO 47433
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
49260: LD_VAR 0 26
49264: PUSH
49265: LD_VAR 0 4
49269: PUSH
49270: LD_VAR 0 7
49274: ARRAY
49275: PPUSH
49276: CALL_OW 257
49280: PUSH
49281: LD_INT 1
49283: EQUAL
49284: AND
49285: PUSH
49286: LD_VAR 0 4
49290: PUSH
49291: LD_VAR 0 7
49295: ARRAY
49296: PPUSH
49297: CALL_OW 256
49301: PUSH
49302: LD_INT 800
49304: LESS
49305: AND
49306: PUSH
49307: LD_VAR 0 4
49311: PUSH
49312: LD_VAR 0 7
49316: ARRAY
49317: PPUSH
49318: CALL_OW 318
49322: NOT
49323: AND
49324: IFFALSE 49341
// ComCrawl ( group [ i ] ) ;
49326: LD_VAR 0 4
49330: PUSH
49331: LD_VAR 0 7
49335: ARRAY
49336: PPUSH
49337: CALL_OW 137
// if f_mines then
49341: LD_VAR 0 21
49345: IFFALSE 49588
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
49347: LD_VAR 0 14
49351: PUSH
49352: LD_INT 1
49354: ARRAY
49355: PPUSH
49356: CALL_OW 247
49360: PUSH
49361: LD_INT 3
49363: EQUAL
49364: PUSH
49365: LD_VAR 0 14
49369: PUSH
49370: LD_INT 1
49372: ARRAY
49373: PUSH
49374: LD_VAR 0 27
49378: IN
49379: NOT
49380: AND
49381: IFFALSE 49588
// begin x := GetX ( tmp [ 1 ] ) ;
49383: LD_ADDR_VAR 0 10
49387: PUSH
49388: LD_VAR 0 14
49392: PUSH
49393: LD_INT 1
49395: ARRAY
49396: PPUSH
49397: CALL_OW 250
49401: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
49402: LD_ADDR_VAR 0 11
49406: PUSH
49407: LD_VAR 0 14
49411: PUSH
49412: LD_INT 1
49414: ARRAY
49415: PPUSH
49416: CALL_OW 251
49420: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
49421: LD_ADDR_VAR 0 12
49425: PUSH
49426: LD_VAR 0 4
49430: PUSH
49431: LD_VAR 0 7
49435: ARRAY
49436: PPUSH
49437: CALL 45296 0 1
49441: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49442: LD_VAR 0 4
49446: PUSH
49447: LD_VAR 0 7
49451: ARRAY
49452: PPUSH
49453: LD_VAR 0 10
49457: PPUSH
49458: LD_VAR 0 11
49462: PPUSH
49463: LD_VAR 0 14
49467: PUSH
49468: LD_INT 1
49470: ARRAY
49471: PPUSH
49472: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49476: LD_VAR 0 4
49480: PUSH
49481: LD_VAR 0 7
49485: ARRAY
49486: PPUSH
49487: LD_VAR 0 10
49491: PPUSH
49492: LD_VAR 0 12
49496: PPUSH
49497: LD_INT 7
49499: PPUSH
49500: CALL_OW 272
49504: PPUSH
49505: LD_VAR 0 11
49509: PPUSH
49510: LD_VAR 0 12
49514: PPUSH
49515: LD_INT 7
49517: PPUSH
49518: CALL_OW 273
49522: PPUSH
49523: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49527: LD_VAR 0 4
49531: PUSH
49532: LD_VAR 0 7
49536: ARRAY
49537: PPUSH
49538: LD_INT 71
49540: PPUSH
49541: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49545: LD_ADDR_VAR 0 27
49549: PUSH
49550: LD_VAR 0 27
49554: PPUSH
49555: LD_VAR 0 27
49559: PUSH
49560: LD_INT 1
49562: PLUS
49563: PPUSH
49564: LD_VAR 0 14
49568: PUSH
49569: LD_INT 1
49571: ARRAY
49572: PPUSH
49573: CALL_OW 1
49577: ST_TO_ADDR
// attacking := true ;
49578: LD_ADDR_VAR 0 29
49582: PUSH
49583: LD_INT 1
49585: ST_TO_ADDR
// continue ;
49586: GO 47433
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49588: LD_VAR 0 4
49592: PUSH
49593: LD_VAR 0 7
49597: ARRAY
49598: PPUSH
49599: CALL_OW 257
49603: PUSH
49604: LD_INT 17
49606: EQUAL
49607: PUSH
49608: LD_VAR 0 4
49612: PUSH
49613: LD_VAR 0 7
49617: ARRAY
49618: PPUSH
49619: CALL_OW 110
49623: PUSH
49624: LD_INT 71
49626: EQUAL
49627: NOT
49628: AND
49629: IFFALSE 49775
// begin attacking := false ;
49631: LD_ADDR_VAR 0 29
49635: PUSH
49636: LD_INT 0
49638: ST_TO_ADDR
// k := 5 ;
49639: LD_ADDR_VAR 0 9
49643: PUSH
49644: LD_INT 5
49646: ST_TO_ADDR
// if tmp < k then
49647: LD_VAR 0 14
49651: PUSH
49652: LD_VAR 0 9
49656: LESS
49657: IFFALSE 49669
// k := tmp ;
49659: LD_ADDR_VAR 0 9
49663: PUSH
49664: LD_VAR 0 14
49668: ST_TO_ADDR
// for j = 1 to k do
49669: LD_ADDR_VAR 0 8
49673: PUSH
49674: DOUBLE
49675: LD_INT 1
49677: DEC
49678: ST_TO_ADDR
49679: LD_VAR 0 9
49683: PUSH
49684: FOR_TO
49685: IFFALSE 49773
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49687: LD_VAR 0 14
49691: PUSH
49692: LD_VAR 0 8
49696: ARRAY
49697: PUSH
49698: LD_VAR 0 14
49702: PPUSH
49703: LD_INT 58
49705: PUSH
49706: EMPTY
49707: LIST
49708: PPUSH
49709: CALL_OW 72
49713: IN
49714: NOT
49715: IFFALSE 49771
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49717: LD_VAR 0 4
49721: PUSH
49722: LD_VAR 0 7
49726: ARRAY
49727: PPUSH
49728: LD_VAR 0 14
49732: PUSH
49733: LD_VAR 0 8
49737: ARRAY
49738: PPUSH
49739: CALL_OW 115
// attacking := true ;
49743: LD_ADDR_VAR 0 29
49747: PUSH
49748: LD_INT 1
49750: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49751: LD_VAR 0 4
49755: PUSH
49756: LD_VAR 0 7
49760: ARRAY
49761: PPUSH
49762: LD_INT 71
49764: PPUSH
49765: CALL_OW 109
// continue ;
49769: GO 49684
// end ; end ;
49771: GO 49684
49773: POP
49774: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49775: LD_VAR 0 4
49779: PUSH
49780: LD_VAR 0 7
49784: ARRAY
49785: PPUSH
49786: CALL_OW 257
49790: PUSH
49791: LD_INT 8
49793: EQUAL
49794: PUSH
49795: LD_VAR 0 4
49799: PUSH
49800: LD_VAR 0 7
49804: ARRAY
49805: PPUSH
49806: CALL_OW 264
49810: PUSH
49811: LD_INT 28
49813: PUSH
49814: LD_INT 45
49816: PUSH
49817: LD_INT 7
49819: PUSH
49820: LD_INT 47
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: IN
49829: OR
49830: IFFALSE 50086
// begin attacking := false ;
49832: LD_ADDR_VAR 0 29
49836: PUSH
49837: LD_INT 0
49839: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49840: LD_VAR 0 14
49844: PUSH
49845: LD_INT 1
49847: ARRAY
49848: PPUSH
49849: CALL_OW 266
49853: PUSH
49854: LD_INT 32
49856: PUSH
49857: LD_INT 31
49859: PUSH
49860: LD_INT 33
49862: PUSH
49863: LD_INT 4
49865: PUSH
49866: LD_INT 5
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: IN
49876: IFFALSE 50062
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49878: LD_ADDR_VAR 0 9
49882: PUSH
49883: LD_VAR 0 14
49887: PUSH
49888: LD_INT 1
49890: ARRAY
49891: PPUSH
49892: CALL_OW 266
49896: PPUSH
49897: LD_VAR 0 14
49901: PUSH
49902: LD_INT 1
49904: ARRAY
49905: PPUSH
49906: CALL_OW 250
49910: PPUSH
49911: LD_VAR 0 14
49915: PUSH
49916: LD_INT 1
49918: ARRAY
49919: PPUSH
49920: CALL_OW 251
49924: PPUSH
49925: LD_VAR 0 14
49929: PUSH
49930: LD_INT 1
49932: ARRAY
49933: PPUSH
49934: CALL_OW 254
49938: PPUSH
49939: LD_VAR 0 14
49943: PUSH
49944: LD_INT 1
49946: ARRAY
49947: PPUSH
49948: CALL_OW 248
49952: PPUSH
49953: LD_INT 0
49955: PPUSH
49956: CALL 26666 0 6
49960: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49961: LD_ADDR_VAR 0 8
49965: PUSH
49966: LD_VAR 0 4
49970: PUSH
49971: LD_VAR 0 7
49975: ARRAY
49976: PPUSH
49977: LD_VAR 0 9
49981: PPUSH
49982: CALL 45359 0 2
49986: ST_TO_ADDR
// if j then
49987: LD_VAR 0 8
49991: IFFALSE 50060
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49993: LD_VAR 0 8
49997: PUSH
49998: LD_INT 1
50000: ARRAY
50001: PPUSH
50002: LD_VAR 0 8
50006: PUSH
50007: LD_INT 2
50009: ARRAY
50010: PPUSH
50011: CALL_OW 488
50015: IFFALSE 50060
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
50017: LD_VAR 0 4
50021: PUSH
50022: LD_VAR 0 7
50026: ARRAY
50027: PPUSH
50028: LD_VAR 0 8
50032: PUSH
50033: LD_INT 1
50035: ARRAY
50036: PPUSH
50037: LD_VAR 0 8
50041: PUSH
50042: LD_INT 2
50044: ARRAY
50045: PPUSH
50046: CALL_OW 116
// attacking := true ;
50050: LD_ADDR_VAR 0 29
50054: PUSH
50055: LD_INT 1
50057: ST_TO_ADDR
// continue ;
50058: GO 47433
// end ; end else
50060: GO 50086
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50062: LD_VAR 0 4
50066: PUSH
50067: LD_VAR 0 7
50071: ARRAY
50072: PPUSH
50073: LD_VAR 0 14
50077: PUSH
50078: LD_INT 1
50080: ARRAY
50081: PPUSH
50082: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
50086: LD_VAR 0 4
50090: PUSH
50091: LD_VAR 0 7
50095: ARRAY
50096: PPUSH
50097: CALL_OW 265
50101: PUSH
50102: LD_INT 11
50104: EQUAL
50105: IFFALSE 50383
// begin k := 10 ;
50107: LD_ADDR_VAR 0 9
50111: PUSH
50112: LD_INT 10
50114: ST_TO_ADDR
// x := 0 ;
50115: LD_ADDR_VAR 0 10
50119: PUSH
50120: LD_INT 0
50122: ST_TO_ADDR
// if tmp < k then
50123: LD_VAR 0 14
50127: PUSH
50128: LD_VAR 0 9
50132: LESS
50133: IFFALSE 50145
// k := tmp ;
50135: LD_ADDR_VAR 0 9
50139: PUSH
50140: LD_VAR 0 14
50144: ST_TO_ADDR
// for j = k downto 1 do
50145: LD_ADDR_VAR 0 8
50149: PUSH
50150: DOUBLE
50151: LD_VAR 0 9
50155: INC
50156: ST_TO_ADDR
50157: LD_INT 1
50159: PUSH
50160: FOR_DOWNTO
50161: IFFALSE 50236
// begin if GetType ( tmp [ j ] ) = unit_human then
50163: LD_VAR 0 14
50167: PUSH
50168: LD_VAR 0 8
50172: ARRAY
50173: PPUSH
50174: CALL_OW 247
50178: PUSH
50179: LD_INT 1
50181: EQUAL
50182: IFFALSE 50234
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
50184: LD_VAR 0 4
50188: PUSH
50189: LD_VAR 0 7
50193: ARRAY
50194: PPUSH
50195: LD_VAR 0 14
50199: PUSH
50200: LD_VAR 0 8
50204: ARRAY
50205: PPUSH
50206: CALL 45630 0 2
// x := tmp [ j ] ;
50210: LD_ADDR_VAR 0 10
50214: PUSH
50215: LD_VAR 0 14
50219: PUSH
50220: LD_VAR 0 8
50224: ARRAY
50225: ST_TO_ADDR
// attacking := true ;
50226: LD_ADDR_VAR 0 29
50230: PUSH
50231: LD_INT 1
50233: ST_TO_ADDR
// end ; end ;
50234: GO 50160
50236: POP
50237: POP
// if not x then
50238: LD_VAR 0 10
50242: NOT
50243: IFFALSE 50383
// begin attacking := true ;
50245: LD_ADDR_VAR 0 29
50249: PUSH
50250: LD_INT 1
50252: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
50253: LD_VAR 0 4
50257: PUSH
50258: LD_VAR 0 7
50262: ARRAY
50263: PPUSH
50264: CALL_OW 250
50268: PPUSH
50269: LD_VAR 0 4
50273: PUSH
50274: LD_VAR 0 7
50278: ARRAY
50279: PPUSH
50280: CALL_OW 251
50284: PPUSH
50285: CALL_OW 546
50289: PUSH
50290: LD_INT 2
50292: ARRAY
50293: PUSH
50294: LD_VAR 0 14
50298: PUSH
50299: LD_INT 1
50301: ARRAY
50302: PPUSH
50303: CALL_OW 250
50307: PPUSH
50308: LD_VAR 0 14
50312: PUSH
50313: LD_INT 1
50315: ARRAY
50316: PPUSH
50317: CALL_OW 251
50321: PPUSH
50322: CALL_OW 546
50326: PUSH
50327: LD_INT 2
50329: ARRAY
50330: EQUAL
50331: IFFALSE 50359
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
50333: LD_VAR 0 4
50337: PUSH
50338: LD_VAR 0 7
50342: ARRAY
50343: PPUSH
50344: LD_VAR 0 14
50348: PUSH
50349: LD_INT 1
50351: ARRAY
50352: PPUSH
50353: CALL 45630 0 2
50357: GO 50383
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50359: LD_VAR 0 4
50363: PUSH
50364: LD_VAR 0 7
50368: ARRAY
50369: PPUSH
50370: LD_VAR 0 14
50374: PUSH
50375: LD_INT 1
50377: ARRAY
50378: PPUSH
50379: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
50383: LD_VAR 0 4
50387: PUSH
50388: LD_VAR 0 7
50392: ARRAY
50393: PPUSH
50394: CALL_OW 264
50398: PUSH
50399: LD_INT 29
50401: EQUAL
50402: IFFALSE 50768
// begin if WantsToAttack ( group [ i ] ) in bombed then
50404: LD_VAR 0 4
50408: PUSH
50409: LD_VAR 0 7
50413: ARRAY
50414: PPUSH
50415: CALL_OW 319
50419: PUSH
50420: LD_VAR 0 28
50424: IN
50425: IFFALSE 50429
// continue ;
50427: GO 47433
// k := 8 ;
50429: LD_ADDR_VAR 0 9
50433: PUSH
50434: LD_INT 8
50436: ST_TO_ADDR
// x := 0 ;
50437: LD_ADDR_VAR 0 10
50441: PUSH
50442: LD_INT 0
50444: ST_TO_ADDR
// if tmp < k then
50445: LD_VAR 0 14
50449: PUSH
50450: LD_VAR 0 9
50454: LESS
50455: IFFALSE 50467
// k := tmp ;
50457: LD_ADDR_VAR 0 9
50461: PUSH
50462: LD_VAR 0 14
50466: ST_TO_ADDR
// for j = 1 to k do
50467: LD_ADDR_VAR 0 8
50471: PUSH
50472: DOUBLE
50473: LD_INT 1
50475: DEC
50476: ST_TO_ADDR
50477: LD_VAR 0 9
50481: PUSH
50482: FOR_TO
50483: IFFALSE 50615
// begin if GetType ( tmp [ j ] ) = unit_building then
50485: LD_VAR 0 14
50489: PUSH
50490: LD_VAR 0 8
50494: ARRAY
50495: PPUSH
50496: CALL_OW 247
50500: PUSH
50501: LD_INT 3
50503: EQUAL
50504: IFFALSE 50613
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50506: LD_VAR 0 14
50510: PUSH
50511: LD_VAR 0 8
50515: ARRAY
50516: PUSH
50517: LD_VAR 0 28
50521: IN
50522: NOT
50523: PUSH
50524: LD_VAR 0 14
50528: PUSH
50529: LD_VAR 0 8
50533: ARRAY
50534: PPUSH
50535: CALL_OW 313
50539: AND
50540: IFFALSE 50613
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50542: LD_VAR 0 4
50546: PUSH
50547: LD_VAR 0 7
50551: ARRAY
50552: PPUSH
50553: LD_VAR 0 14
50557: PUSH
50558: LD_VAR 0 8
50562: ARRAY
50563: PPUSH
50564: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50568: LD_ADDR_VAR 0 28
50572: PUSH
50573: LD_VAR 0 28
50577: PPUSH
50578: LD_VAR 0 28
50582: PUSH
50583: LD_INT 1
50585: PLUS
50586: PPUSH
50587: LD_VAR 0 14
50591: PUSH
50592: LD_VAR 0 8
50596: ARRAY
50597: PPUSH
50598: CALL_OW 1
50602: ST_TO_ADDR
// attacking := true ;
50603: LD_ADDR_VAR 0 29
50607: PUSH
50608: LD_INT 1
50610: ST_TO_ADDR
// break ;
50611: GO 50615
// end ; end ;
50613: GO 50482
50615: POP
50616: POP
// if not attacking and f_attack_depot then
50617: LD_VAR 0 29
50621: NOT
50622: PUSH
50623: LD_VAR 0 25
50627: AND
50628: IFFALSE 50723
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50630: LD_ADDR_VAR 0 13
50634: PUSH
50635: LD_VAR 0 14
50639: PPUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 30
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 30
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: PPUSH
50668: CALL_OW 72
50672: ST_TO_ADDR
// if z then
50673: LD_VAR 0 13
50677: IFFALSE 50723
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50679: LD_VAR 0 4
50683: PUSH
50684: LD_VAR 0 7
50688: ARRAY
50689: PPUSH
50690: LD_VAR 0 13
50694: PPUSH
50695: LD_VAR 0 4
50699: PUSH
50700: LD_VAR 0 7
50704: ARRAY
50705: PPUSH
50706: CALL_OW 74
50710: PPUSH
50711: CALL_OW 115
// attacking := true ;
50715: LD_ADDR_VAR 0 29
50719: PUSH
50720: LD_INT 1
50722: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50723: LD_VAR 0 4
50727: PUSH
50728: LD_VAR 0 7
50732: ARRAY
50733: PPUSH
50734: CALL_OW 256
50738: PUSH
50739: LD_INT 500
50741: LESS
50742: IFFALSE 50768
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50744: LD_VAR 0 4
50748: PUSH
50749: LD_VAR 0 7
50753: ARRAY
50754: PPUSH
50755: LD_VAR 0 14
50759: PUSH
50760: LD_INT 1
50762: ARRAY
50763: PPUSH
50764: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
50768: LD_VAR 0 4
50772: PUSH
50773: LD_VAR 0 7
50777: ARRAY
50778: PPUSH
50779: CALL_OW 264
50783: PUSH
50784: LD_INT 49
50786: EQUAL
50787: IFFALSE 50908
// begin if not HasTask ( group [ i ] ) then
50789: LD_VAR 0 4
50793: PUSH
50794: LD_VAR 0 7
50798: ARRAY
50799: PPUSH
50800: CALL_OW 314
50804: NOT
50805: IFFALSE 50908
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
50807: LD_ADDR_VAR 0 9
50811: PUSH
50812: LD_INT 81
50814: PUSH
50815: LD_VAR 0 4
50819: PUSH
50820: LD_VAR 0 7
50824: ARRAY
50825: PPUSH
50826: CALL_OW 255
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PPUSH
50835: CALL_OW 69
50839: PPUSH
50840: LD_VAR 0 4
50844: PUSH
50845: LD_VAR 0 7
50849: ARRAY
50850: PPUSH
50851: CALL_OW 74
50855: ST_TO_ADDR
// if k then
50856: LD_VAR 0 9
50860: IFFALSE 50908
// if GetDistUnits ( group [ i ] , k ) > 10 then
50862: LD_VAR 0 4
50866: PUSH
50867: LD_VAR 0 7
50871: ARRAY
50872: PPUSH
50873: LD_VAR 0 9
50877: PPUSH
50878: CALL_OW 296
50882: PUSH
50883: LD_INT 10
50885: GREATER
50886: IFFALSE 50908
// ComMoveUnit ( group [ i ] , k ) ;
50888: LD_VAR 0 4
50892: PUSH
50893: LD_VAR 0 7
50897: ARRAY
50898: PPUSH
50899: LD_VAR 0 9
50903: PPUSH
50904: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50908: LD_VAR 0 4
50912: PUSH
50913: LD_VAR 0 7
50917: ARRAY
50918: PPUSH
50919: CALL_OW 256
50923: PUSH
50924: LD_INT 250
50926: LESS
50927: PUSH
50928: LD_VAR 0 4
50932: PUSH
50933: LD_VAR 0 7
50937: ARRAY
50938: PUSH
50939: LD_INT 21
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 23
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PPUSH
50963: CALL_OW 69
50967: IN
50968: AND
50969: IFFALSE 51094
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50971: LD_ADDR_VAR 0 9
50975: PUSH
50976: LD_OWVAR 3
50980: PUSH
50981: LD_VAR 0 4
50985: PUSH
50986: LD_VAR 0 7
50990: ARRAY
50991: DIFF
50992: PPUSH
50993: LD_VAR 0 4
50997: PUSH
50998: LD_VAR 0 7
51002: ARRAY
51003: PPUSH
51004: CALL_OW 74
51008: ST_TO_ADDR
// if not k then
51009: LD_VAR 0 9
51013: NOT
51014: IFFALSE 51018
// continue ;
51016: GO 47433
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
51018: LD_VAR 0 9
51022: PUSH
51023: LD_INT 81
51025: PUSH
51026: LD_VAR 0 4
51030: PUSH
51031: LD_VAR 0 7
51035: ARRAY
51036: PPUSH
51037: CALL_OW 255
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PPUSH
51046: CALL_OW 69
51050: IN
51051: PUSH
51052: LD_VAR 0 9
51056: PPUSH
51057: LD_VAR 0 4
51061: PUSH
51062: LD_VAR 0 7
51066: ARRAY
51067: PPUSH
51068: CALL_OW 296
51072: PUSH
51073: LD_INT 5
51075: LESS
51076: AND
51077: IFFALSE 51094
// ComAutodestruct ( group [ i ] ) ;
51079: LD_VAR 0 4
51083: PUSH
51084: LD_VAR 0 7
51088: ARRAY
51089: PPUSH
51090: CALL 45528 0 1
// end ; if f_attack_depot then
51094: LD_VAR 0 25
51098: IFFALSE 51210
// begin k := 6 ;
51100: LD_ADDR_VAR 0 9
51104: PUSH
51105: LD_INT 6
51107: ST_TO_ADDR
// if tmp < k then
51108: LD_VAR 0 14
51112: PUSH
51113: LD_VAR 0 9
51117: LESS
51118: IFFALSE 51130
// k := tmp ;
51120: LD_ADDR_VAR 0 9
51124: PUSH
51125: LD_VAR 0 14
51129: ST_TO_ADDR
// for j = 1 to k do
51130: LD_ADDR_VAR 0 8
51134: PUSH
51135: DOUBLE
51136: LD_INT 1
51138: DEC
51139: ST_TO_ADDR
51140: LD_VAR 0 9
51144: PUSH
51145: FOR_TO
51146: IFFALSE 51208
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
51148: LD_VAR 0 8
51152: PPUSH
51153: CALL_OW 266
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: IN
51168: IFFALSE 51206
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
51170: LD_VAR 0 4
51174: PUSH
51175: LD_VAR 0 7
51179: ARRAY
51180: PPUSH
51181: LD_VAR 0 14
51185: PUSH
51186: LD_VAR 0 8
51190: ARRAY
51191: PPUSH
51192: CALL_OW 115
// attacking := true ;
51196: LD_ADDR_VAR 0 29
51200: PUSH
51201: LD_INT 1
51203: ST_TO_ADDR
// break ;
51204: GO 51208
// end ;
51206: GO 51145
51208: POP
51209: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
51210: LD_VAR 0 4
51214: PUSH
51215: LD_VAR 0 7
51219: ARRAY
51220: PPUSH
51221: CALL_OW 302
51225: PUSH
51226: LD_VAR 0 29
51230: NOT
51231: AND
51232: IFFALSE 51554
// begin if GetTag ( group [ i ] ) = 71 then
51234: LD_VAR 0 4
51238: PUSH
51239: LD_VAR 0 7
51243: ARRAY
51244: PPUSH
51245: CALL_OW 110
51249: PUSH
51250: LD_INT 71
51252: EQUAL
51253: IFFALSE 51294
// begin if HasTask ( group [ i ] ) then
51255: LD_VAR 0 4
51259: PUSH
51260: LD_VAR 0 7
51264: ARRAY
51265: PPUSH
51266: CALL_OW 314
51270: IFFALSE 51276
// continue else
51272: GO 47433
51274: GO 51294
// SetTag ( group [ i ] , 0 ) ;
51276: LD_VAR 0 4
51280: PUSH
51281: LD_VAR 0 7
51285: ARRAY
51286: PPUSH
51287: LD_INT 0
51289: PPUSH
51290: CALL_OW 109
// end ; k := 8 ;
51294: LD_ADDR_VAR 0 9
51298: PUSH
51299: LD_INT 8
51301: ST_TO_ADDR
// x := 0 ;
51302: LD_ADDR_VAR 0 10
51306: PUSH
51307: LD_INT 0
51309: ST_TO_ADDR
// if tmp < k then
51310: LD_VAR 0 14
51314: PUSH
51315: LD_VAR 0 9
51319: LESS
51320: IFFALSE 51332
// k := tmp ;
51322: LD_ADDR_VAR 0 9
51326: PUSH
51327: LD_VAR 0 14
51331: ST_TO_ADDR
// for j = 1 to k do
51332: LD_ADDR_VAR 0 8
51336: PUSH
51337: DOUBLE
51338: LD_INT 1
51340: DEC
51341: ST_TO_ADDR
51342: LD_VAR 0 9
51346: PUSH
51347: FOR_TO
51348: IFFALSE 51446
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
51350: LD_VAR 0 14
51354: PUSH
51355: LD_VAR 0 8
51359: ARRAY
51360: PPUSH
51361: CALL_OW 247
51365: PUSH
51366: LD_INT 1
51368: EQUAL
51369: PUSH
51370: LD_VAR 0 14
51374: PUSH
51375: LD_VAR 0 8
51379: ARRAY
51380: PPUSH
51381: CALL_OW 256
51385: PUSH
51386: LD_INT 250
51388: LESS
51389: PUSH
51390: LD_VAR 0 20
51394: AND
51395: PUSH
51396: LD_VAR 0 20
51400: NOT
51401: PUSH
51402: LD_VAR 0 14
51406: PUSH
51407: LD_VAR 0 8
51411: ARRAY
51412: PPUSH
51413: CALL_OW 256
51417: PUSH
51418: LD_INT 250
51420: GREATEREQUAL
51421: AND
51422: OR
51423: AND
51424: IFFALSE 51444
// begin x := tmp [ j ] ;
51426: LD_ADDR_VAR 0 10
51430: PUSH
51431: LD_VAR 0 14
51435: PUSH
51436: LD_VAR 0 8
51440: ARRAY
51441: ST_TO_ADDR
// break ;
51442: GO 51446
// end ;
51444: GO 51347
51446: POP
51447: POP
// if x then
51448: LD_VAR 0 10
51452: IFFALSE 51476
// ComAttackUnit ( group [ i ] , x ) else
51454: LD_VAR 0 4
51458: PUSH
51459: LD_VAR 0 7
51463: ARRAY
51464: PPUSH
51465: LD_VAR 0 10
51469: PPUSH
51470: CALL_OW 115
51474: GO 51500
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
51476: LD_VAR 0 4
51480: PUSH
51481: LD_VAR 0 7
51485: ARRAY
51486: PPUSH
51487: LD_VAR 0 14
51491: PUSH
51492: LD_INT 1
51494: ARRAY
51495: PPUSH
51496: CALL_OW 115
// if not HasTask ( group [ i ] ) then
51500: LD_VAR 0 4
51504: PUSH
51505: LD_VAR 0 7
51509: ARRAY
51510: PPUSH
51511: CALL_OW 314
51515: NOT
51516: IFFALSE 51554
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
51518: LD_VAR 0 4
51522: PUSH
51523: LD_VAR 0 7
51527: ARRAY
51528: PPUSH
51529: LD_VAR 0 14
51533: PPUSH
51534: LD_VAR 0 4
51538: PUSH
51539: LD_VAR 0 7
51543: ARRAY
51544: PPUSH
51545: CALL_OW 74
51549: PPUSH
51550: CALL_OW 115
// end ; end ; end ;
51554: GO 47433
51556: POP
51557: POP
// wait ( 0 0$1 ) ;
51558: LD_INT 35
51560: PPUSH
51561: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
51565: LD_VAR 0 4
51569: PUSH
51570: EMPTY
51571: EQUAL
51572: PUSH
51573: LD_INT 81
51575: PUSH
51576: LD_VAR 0 35
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PPUSH
51585: CALL_OW 69
51589: NOT
51590: OR
51591: IFFALSE 47418
// end ;
51593: LD_VAR 0 2
51597: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51598: LD_INT 0
51600: PPUSH
51601: PPUSH
51602: PPUSH
51603: PPUSH
// if not base_units then
51604: LD_VAR 0 1
51608: NOT
51609: IFFALSE 51613
// exit ;
51611: GO 51700
// result := false ;
51613: LD_ADDR_VAR 0 2
51617: PUSH
51618: LD_INT 0
51620: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51621: LD_ADDR_VAR 0 5
51625: PUSH
51626: LD_VAR 0 1
51630: PPUSH
51631: LD_INT 21
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PPUSH
51641: CALL_OW 72
51645: ST_TO_ADDR
// if not tmp then
51646: LD_VAR 0 5
51650: NOT
51651: IFFALSE 51655
// exit ;
51653: GO 51700
// for i in tmp do
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: LD_VAR 0 5
51664: PUSH
51665: FOR_IN
51666: IFFALSE 51698
// begin result := EnemyInRange ( i , 22 ) ;
51668: LD_ADDR_VAR 0 2
51672: PUSH
51673: LD_VAR 0 3
51677: PPUSH
51678: LD_INT 22
51680: PPUSH
51681: CALL 45211 0 2
51685: ST_TO_ADDR
// if result then
51686: LD_VAR 0 2
51690: IFFALSE 51696
// exit ;
51692: POP
51693: POP
51694: GO 51700
// end ;
51696: GO 51665
51698: POP
51699: POP
// end ;
51700: LD_VAR 0 2
51704: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51705: LD_INT 0
51707: PPUSH
51708: PPUSH
// if not units then
51709: LD_VAR 0 1
51713: NOT
51714: IFFALSE 51718
// exit ;
51716: GO 51788
// result := [ ] ;
51718: LD_ADDR_VAR 0 3
51722: PUSH
51723: EMPTY
51724: ST_TO_ADDR
// for i in units do
51725: LD_ADDR_VAR 0 4
51729: PUSH
51730: LD_VAR 0 1
51734: PUSH
51735: FOR_IN
51736: IFFALSE 51786
// if GetTag ( i ) = tag then
51738: LD_VAR 0 4
51742: PPUSH
51743: CALL_OW 110
51747: PUSH
51748: LD_VAR 0 2
51752: EQUAL
51753: IFFALSE 51784
// result := Insert ( result , result + 1 , i ) ;
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: LD_VAR 0 3
51764: PPUSH
51765: LD_VAR 0 3
51769: PUSH
51770: LD_INT 1
51772: PLUS
51773: PPUSH
51774: LD_VAR 0 4
51778: PPUSH
51779: CALL_OW 2
51783: ST_TO_ADDR
51784: GO 51735
51786: POP
51787: POP
// end ;
51788: LD_VAR 0 3
51792: RET
// export function IsDriver ( un ) ; begin
51793: LD_INT 0
51795: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51796: LD_ADDR_VAR 0 2
51800: PUSH
51801: LD_VAR 0 1
51805: PUSH
51806: LD_INT 55
51808: PUSH
51809: EMPTY
51810: LIST
51811: PPUSH
51812: CALL_OW 69
51816: IN
51817: ST_TO_ADDR
// end ;
51818: LD_VAR 0 2
51822: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51823: LD_INT 0
51825: PPUSH
51826: PPUSH
// list := [ ] ;
51827: LD_ADDR_VAR 0 5
51831: PUSH
51832: EMPTY
51833: ST_TO_ADDR
// case d of 0 :
51834: LD_VAR 0 3
51838: PUSH
51839: LD_INT 0
51841: DOUBLE
51842: EQUAL
51843: IFTRUE 51847
51845: GO 51980
51847: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51848: LD_ADDR_VAR 0 5
51852: PUSH
51853: LD_VAR 0 1
51857: PUSH
51858: LD_INT 4
51860: MINUS
51861: PUSH
51862: LD_VAR 0 2
51866: PUSH
51867: LD_INT 4
51869: MINUS
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: PUSH
51879: LD_VAR 0 1
51883: PUSH
51884: LD_INT 3
51886: MINUS
51887: PUSH
51888: LD_VAR 0 2
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: PUSH
51901: LD_VAR 0 1
51905: PUSH
51906: LD_INT 4
51908: PLUS
51909: PUSH
51910: LD_VAR 0 2
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: PUSH
51923: LD_VAR 0 1
51927: PUSH
51928: LD_INT 3
51930: PLUS
51931: PUSH
51932: LD_VAR 0 2
51936: PUSH
51937: LD_INT 3
51939: PLUS
51940: PUSH
51941: LD_INT 5
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 4
51961: PLUS
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: ST_TO_ADDR
// end ; 1 :
51978: GO 52678
51980: LD_INT 1
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 51988
51986: GO 52121
51988: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51989: LD_ADDR_VAR 0 5
51993: PUSH
51994: LD_VAR 0 1
51998: PUSH
51999: LD_VAR 0 2
52003: PUSH
52004: LD_INT 4
52006: MINUS
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: PUSH
52016: LD_VAR 0 1
52020: PUSH
52021: LD_INT 3
52023: MINUS
52024: PUSH
52025: LD_VAR 0 2
52029: PUSH
52030: LD_INT 3
52032: MINUS
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: PUSH
52042: LD_VAR 0 1
52046: PUSH
52047: LD_INT 4
52049: MINUS
52050: PUSH
52051: LD_VAR 0 2
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: PUSH
52064: LD_VAR 0 1
52068: PUSH
52069: LD_VAR 0 2
52073: PUSH
52074: LD_INT 3
52076: PLUS
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: PUSH
52086: LD_VAR 0 1
52090: PUSH
52091: LD_INT 4
52093: PLUS
52094: PUSH
52095: LD_VAR 0 2
52099: PUSH
52100: LD_INT 4
52102: PLUS
52103: PUSH
52104: LD_INT 5
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// end ; 2 :
52119: GO 52678
52121: LD_INT 2
52123: DOUBLE
52124: EQUAL
52125: IFTRUE 52129
52127: GO 52258
52129: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52130: LD_ADDR_VAR 0 5
52134: PUSH
52135: LD_VAR 0 1
52139: PUSH
52140: LD_VAR 0 2
52144: PUSH
52145: LD_INT 3
52147: MINUS
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: PUSH
52157: LD_VAR 0 1
52161: PUSH
52162: LD_INT 4
52164: PLUS
52165: PUSH
52166: LD_VAR 0 2
52170: PUSH
52171: LD_INT 4
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: PUSH
52179: LD_VAR 0 1
52183: PUSH
52184: LD_VAR 0 2
52188: PUSH
52189: LD_INT 4
52191: PLUS
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: PUSH
52201: LD_VAR 0 1
52205: PUSH
52206: LD_INT 3
52208: MINUS
52209: PUSH
52210: LD_VAR 0 2
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: PUSH
52223: LD_VAR 0 1
52227: PUSH
52228: LD_INT 4
52230: MINUS
52231: PUSH
52232: LD_VAR 0 2
52236: PUSH
52237: LD_INT 4
52239: MINUS
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// end ; 3 :
52256: GO 52678
52258: LD_INT 3
52260: DOUBLE
52261: EQUAL
52262: IFTRUE 52266
52264: GO 52399
52266: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52267: LD_ADDR_VAR 0 5
52271: PUSH
52272: LD_VAR 0 1
52276: PUSH
52277: LD_INT 3
52279: PLUS
52280: PUSH
52281: LD_VAR 0 2
52285: PUSH
52286: LD_INT 4
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: PUSH
52294: LD_VAR 0 1
52298: PUSH
52299: LD_INT 4
52301: PLUS
52302: PUSH
52303: LD_VAR 0 2
52307: PUSH
52308: LD_INT 4
52310: PLUS
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: PUSH
52320: LD_VAR 0 1
52324: PUSH
52325: LD_INT 4
52327: MINUS
52328: PUSH
52329: LD_VAR 0 2
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: PUSH
52342: LD_VAR 0 1
52346: PUSH
52347: LD_VAR 0 2
52351: PUSH
52352: LD_INT 4
52354: MINUS
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: PUSH
52364: LD_VAR 0 1
52368: PUSH
52369: LD_INT 3
52371: MINUS
52372: PUSH
52373: LD_VAR 0 2
52377: PUSH
52378: LD_INT 3
52380: MINUS
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: ST_TO_ADDR
// end ; 4 :
52397: GO 52678
52399: LD_INT 4
52401: DOUBLE
52402: EQUAL
52403: IFTRUE 52407
52405: GO 52540
52407: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52408: LD_ADDR_VAR 0 5
52412: PUSH
52413: LD_VAR 0 1
52417: PUSH
52418: LD_VAR 0 2
52422: PUSH
52423: LD_INT 4
52425: PLUS
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: PUSH
52435: LD_VAR 0 1
52439: PUSH
52440: LD_INT 3
52442: PLUS
52443: PUSH
52444: LD_VAR 0 2
52448: PUSH
52449: LD_INT 3
52451: PLUS
52452: PUSH
52453: LD_INT 5
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: PUSH
52461: LD_VAR 0 1
52465: PUSH
52466: LD_INT 4
52468: PLUS
52469: PUSH
52470: LD_VAR 0 2
52474: PUSH
52475: LD_INT 4
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: PUSH
52483: LD_VAR 0 1
52487: PUSH
52488: LD_VAR 0 2
52492: PUSH
52493: LD_INT 3
52495: MINUS
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: PUSH
52505: LD_VAR 0 1
52509: PUSH
52510: LD_INT 4
52512: MINUS
52513: PUSH
52514: LD_VAR 0 2
52518: PUSH
52519: LD_INT 4
52521: MINUS
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// end ; 5 :
52538: GO 52678
52540: LD_INT 5
52542: DOUBLE
52543: EQUAL
52544: IFTRUE 52548
52546: GO 52677
52548: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52549: LD_ADDR_VAR 0 5
52553: PUSH
52554: LD_VAR 0 1
52558: PUSH
52559: LD_INT 4
52561: MINUS
52562: PUSH
52563: LD_VAR 0 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: PUSH
52576: LD_VAR 0 1
52580: PUSH
52581: LD_VAR 0 2
52585: PUSH
52586: LD_INT 4
52588: MINUS
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: PUSH
52598: LD_VAR 0 1
52602: PUSH
52603: LD_INT 4
52605: PLUS
52606: PUSH
52607: LD_VAR 0 2
52611: PUSH
52612: LD_INT 4
52614: PLUS
52615: PUSH
52616: LD_INT 5
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: PUSH
52624: LD_VAR 0 1
52628: PUSH
52629: LD_INT 3
52631: PLUS
52632: PUSH
52633: LD_VAR 0 2
52637: PUSH
52638: LD_INT 4
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: PUSH
52646: LD_VAR 0 1
52650: PUSH
52651: LD_VAR 0 2
52655: PUSH
52656: LD_INT 3
52658: PLUS
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// end ; end ;
52675: GO 52678
52677: POP
// result := list ;
52678: LD_ADDR_VAR 0 4
52682: PUSH
52683: LD_VAR 0 5
52687: ST_TO_ADDR
// end ;
52688: LD_VAR 0 4
52692: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52693: LD_INT 0
52695: PPUSH
52696: PPUSH
52697: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52698: LD_VAR 0 1
52702: NOT
52703: PUSH
52704: LD_VAR 0 2
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 4
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: IN
52727: NOT
52728: OR
52729: IFFALSE 52733
// exit ;
52731: GO 52825
// tmp := [ ] ;
52733: LD_ADDR_VAR 0 5
52737: PUSH
52738: EMPTY
52739: ST_TO_ADDR
// for i in units do
52740: LD_ADDR_VAR 0 4
52744: PUSH
52745: LD_VAR 0 1
52749: PUSH
52750: FOR_IN
52751: IFFALSE 52794
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52753: LD_ADDR_VAR 0 5
52757: PUSH
52758: LD_VAR 0 5
52762: PPUSH
52763: LD_VAR 0 5
52767: PUSH
52768: LD_INT 1
52770: PLUS
52771: PPUSH
52772: LD_VAR 0 4
52776: PPUSH
52777: LD_VAR 0 2
52781: PPUSH
52782: CALL_OW 259
52786: PPUSH
52787: CALL_OW 2
52791: ST_TO_ADDR
52792: GO 52750
52794: POP
52795: POP
// if not tmp then
52796: LD_VAR 0 5
52800: NOT
52801: IFFALSE 52805
// exit ;
52803: GO 52825
// result := SortListByListDesc ( units , tmp ) ;
52805: LD_ADDR_VAR 0 3
52809: PUSH
52810: LD_VAR 0 1
52814: PPUSH
52815: LD_VAR 0 5
52819: PPUSH
52820: CALL_OW 77
52824: ST_TO_ADDR
// end ;
52825: LD_VAR 0 3
52829: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52830: LD_INT 0
52832: PPUSH
52833: PPUSH
52834: PPUSH
// x := GetX ( building ) ;
52835: LD_ADDR_VAR 0 4
52839: PUSH
52840: LD_VAR 0 2
52844: PPUSH
52845: CALL_OW 250
52849: ST_TO_ADDR
// y := GetY ( building ) ;
52850: LD_ADDR_VAR 0 5
52854: PUSH
52855: LD_VAR 0 2
52859: PPUSH
52860: CALL_OW 251
52864: ST_TO_ADDR
// if GetTaskList ( unit ) then
52865: LD_VAR 0 1
52869: PPUSH
52870: CALL_OW 437
52874: IFFALSE 52969
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52876: LD_STRING e
52878: PUSH
52879: LD_VAR 0 1
52883: PPUSH
52884: CALL_OW 437
52888: PUSH
52889: LD_INT 1
52891: ARRAY
52892: PUSH
52893: LD_INT 1
52895: ARRAY
52896: EQUAL
52897: PUSH
52898: LD_VAR 0 4
52902: PUSH
52903: LD_VAR 0 1
52907: PPUSH
52908: CALL_OW 437
52912: PUSH
52913: LD_INT 1
52915: ARRAY
52916: PUSH
52917: LD_INT 2
52919: ARRAY
52920: EQUAL
52921: AND
52922: PUSH
52923: LD_VAR 0 5
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 437
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PUSH
52942: LD_INT 3
52944: ARRAY
52945: EQUAL
52946: AND
52947: IFFALSE 52959
// result := true else
52949: LD_ADDR_VAR 0 3
52953: PUSH
52954: LD_INT 1
52956: ST_TO_ADDR
52957: GO 52967
// result := false ;
52959: LD_ADDR_VAR 0 3
52963: PUSH
52964: LD_INT 0
52966: ST_TO_ADDR
// end else
52967: GO 52977
// result := false ;
52969: LD_ADDR_VAR 0 3
52973: PUSH
52974: LD_INT 0
52976: ST_TO_ADDR
// end ;
52977: LD_VAR 0 3
52981: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52982: LD_INT 0
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
// if not unit or not area then
52988: LD_VAR 0 1
52992: NOT
52993: PUSH
52994: LD_VAR 0 2
52998: NOT
52999: OR
53000: IFFALSE 53004
// exit ;
53002: GO 53168
// tmp := AreaToList ( area , i ) ;
53004: LD_ADDR_VAR 0 6
53008: PUSH
53009: LD_VAR 0 2
53013: PPUSH
53014: LD_VAR 0 5
53018: PPUSH
53019: CALL_OW 517
53023: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53024: LD_ADDR_VAR 0 5
53028: PUSH
53029: DOUBLE
53030: LD_INT 1
53032: DEC
53033: ST_TO_ADDR
53034: LD_VAR 0 6
53038: PUSH
53039: LD_INT 1
53041: ARRAY
53042: PUSH
53043: FOR_TO
53044: IFFALSE 53166
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53046: LD_ADDR_VAR 0 7
53050: PUSH
53051: LD_VAR 0 6
53055: PUSH
53056: LD_INT 1
53058: ARRAY
53059: PUSH
53060: LD_VAR 0 5
53064: ARRAY
53065: PUSH
53066: LD_VAR 0 6
53070: PUSH
53071: LD_INT 2
53073: ARRAY
53074: PUSH
53075: LD_VAR 0 5
53079: ARRAY
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53085: LD_VAR 0 7
53089: PUSH
53090: LD_INT 1
53092: ARRAY
53093: PPUSH
53094: LD_VAR 0 7
53098: PUSH
53099: LD_INT 2
53101: ARRAY
53102: PPUSH
53103: CALL_OW 428
53107: PUSH
53108: LD_INT 0
53110: EQUAL
53111: IFFALSE 53164
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53113: LD_VAR 0 1
53117: PPUSH
53118: LD_VAR 0 7
53122: PUSH
53123: LD_INT 1
53125: ARRAY
53126: PPUSH
53127: LD_VAR 0 7
53131: PUSH
53132: LD_INT 2
53134: ARRAY
53135: PPUSH
53136: LD_VAR 0 3
53140: PPUSH
53141: CALL_OW 48
// result := IsPlaced ( unit ) ;
53145: LD_ADDR_VAR 0 4
53149: PUSH
53150: LD_VAR 0 1
53154: PPUSH
53155: CALL_OW 305
53159: ST_TO_ADDR
// exit ;
53160: POP
53161: POP
53162: GO 53168
// end ; end ;
53164: GO 53043
53166: POP
53167: POP
// end ;
53168: LD_VAR 0 4
53172: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53173: LD_INT 0
53175: PPUSH
53176: PPUSH
53177: PPUSH
// if not side or side > 8 then
53178: LD_VAR 0 1
53182: NOT
53183: PUSH
53184: LD_VAR 0 1
53188: PUSH
53189: LD_INT 8
53191: GREATER
53192: OR
53193: IFFALSE 53197
// exit ;
53195: GO 53384
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53197: LD_ADDR_VAR 0 4
53201: PUSH
53202: LD_INT 22
53204: PUSH
53205: LD_VAR 0 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 21
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PPUSH
53228: CALL_OW 69
53232: ST_TO_ADDR
// if not tmp then
53233: LD_VAR 0 4
53237: NOT
53238: IFFALSE 53242
// exit ;
53240: GO 53384
// enable_addtolog := true ;
53242: LD_ADDR_OWVAR 81
53246: PUSH
53247: LD_INT 1
53249: ST_TO_ADDR
// AddToLog ( [ ) ;
53250: LD_STRING [
53252: PPUSH
53253: CALL_OW 561
// for i in tmp do
53257: LD_ADDR_VAR 0 3
53261: PUSH
53262: LD_VAR 0 4
53266: PUSH
53267: FOR_IN
53268: IFFALSE 53375
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53270: LD_STRING [
53272: PUSH
53273: LD_VAR 0 3
53277: PPUSH
53278: CALL_OW 266
53282: STR
53283: PUSH
53284: LD_STRING , 
53286: STR
53287: PUSH
53288: LD_VAR 0 3
53292: PPUSH
53293: CALL_OW 250
53297: STR
53298: PUSH
53299: LD_STRING , 
53301: STR
53302: PUSH
53303: LD_VAR 0 3
53307: PPUSH
53308: CALL_OW 251
53312: STR
53313: PUSH
53314: LD_STRING , 
53316: STR
53317: PUSH
53318: LD_VAR 0 3
53322: PPUSH
53323: CALL_OW 254
53327: STR
53328: PUSH
53329: LD_STRING , 
53331: STR
53332: PUSH
53333: LD_VAR 0 3
53337: PPUSH
53338: LD_INT 1
53340: PPUSH
53341: CALL_OW 268
53345: STR
53346: PUSH
53347: LD_STRING , 
53349: STR
53350: PUSH
53351: LD_VAR 0 3
53355: PPUSH
53356: LD_INT 2
53358: PPUSH
53359: CALL_OW 268
53363: STR
53364: PUSH
53365: LD_STRING ],
53367: STR
53368: PPUSH
53369: CALL_OW 561
// end ;
53373: GO 53267
53375: POP
53376: POP
// AddToLog ( ]; ) ;
53377: LD_STRING ];
53379: PPUSH
53380: CALL_OW 561
// end ;
53384: LD_VAR 0 2
53388: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53389: LD_INT 0
53391: PPUSH
53392: PPUSH
53393: PPUSH
53394: PPUSH
53395: PPUSH
// if not area or not rate or not max then
53396: LD_VAR 0 1
53400: NOT
53401: PUSH
53402: LD_VAR 0 2
53406: NOT
53407: OR
53408: PUSH
53409: LD_VAR 0 4
53413: NOT
53414: OR
53415: IFFALSE 53419
// exit ;
53417: GO 53611
// while 1 do
53419: LD_INT 1
53421: IFFALSE 53611
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53423: LD_ADDR_VAR 0 9
53427: PUSH
53428: LD_VAR 0 1
53432: PPUSH
53433: LD_INT 1
53435: PPUSH
53436: CALL_OW 287
53440: PUSH
53441: LD_INT 10
53443: MUL
53444: ST_TO_ADDR
// r := rate / 10 ;
53445: LD_ADDR_VAR 0 7
53449: PUSH
53450: LD_VAR 0 2
53454: PUSH
53455: LD_INT 10
53457: DIVREAL
53458: ST_TO_ADDR
// time := 1 1$00 ;
53459: LD_ADDR_VAR 0 8
53463: PUSH
53464: LD_INT 2100
53466: ST_TO_ADDR
// if amount < min then
53467: LD_VAR 0 9
53471: PUSH
53472: LD_VAR 0 3
53476: LESS
53477: IFFALSE 53495
// r := r * 2 else
53479: LD_ADDR_VAR 0 7
53483: PUSH
53484: LD_VAR 0 7
53488: PUSH
53489: LD_INT 2
53491: MUL
53492: ST_TO_ADDR
53493: GO 53521
// if amount > max then
53495: LD_VAR 0 9
53499: PUSH
53500: LD_VAR 0 4
53504: GREATER
53505: IFFALSE 53521
// r := r / 2 ;
53507: LD_ADDR_VAR 0 7
53511: PUSH
53512: LD_VAR 0 7
53516: PUSH
53517: LD_INT 2
53519: DIVREAL
53520: ST_TO_ADDR
// time := time / r ;
53521: LD_ADDR_VAR 0 8
53525: PUSH
53526: LD_VAR 0 8
53530: PUSH
53531: LD_VAR 0 7
53535: DIVREAL
53536: ST_TO_ADDR
// if time < 0 then
53537: LD_VAR 0 8
53541: PUSH
53542: LD_INT 0
53544: LESS
53545: IFFALSE 53562
// time := time * - 1 ;
53547: LD_ADDR_VAR 0 8
53551: PUSH
53552: LD_VAR 0 8
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: MUL
53561: ST_TO_ADDR
// wait ( time ) ;
53562: LD_VAR 0 8
53566: PPUSH
53567: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53571: LD_INT 35
53573: PPUSH
53574: LD_INT 875
53576: PPUSH
53577: CALL_OW 12
53581: PPUSH
53582: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53586: LD_INT 1
53588: PPUSH
53589: LD_INT 5
53591: PPUSH
53592: CALL_OW 12
53596: PPUSH
53597: LD_VAR 0 1
53601: PPUSH
53602: LD_INT 1
53604: PPUSH
53605: CALL_OW 55
// end ;
53609: GO 53419
// end ;
53611: LD_VAR 0 5
53615: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53616: LD_INT 0
53618: PPUSH
53619: PPUSH
53620: PPUSH
53621: PPUSH
53622: PPUSH
53623: PPUSH
53624: PPUSH
53625: PPUSH
// if not turrets or not factories then
53626: LD_VAR 0 1
53630: NOT
53631: PUSH
53632: LD_VAR 0 2
53636: NOT
53637: OR
53638: IFFALSE 53642
// exit ;
53640: GO 53949
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53642: LD_ADDR_VAR 0 10
53646: PUSH
53647: LD_INT 5
53649: PUSH
53650: LD_INT 6
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 5
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 24
53684: PUSH
53685: LD_INT 25
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 23
53694: PUSH
53695: LD_INT 27
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 42
53708: PUSH
53709: LD_INT 43
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 44
53718: PUSH
53719: LD_INT 46
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 45
53728: PUSH
53729: LD_INT 47
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: ST_TO_ADDR
// result := [ ] ;
53746: LD_ADDR_VAR 0 3
53750: PUSH
53751: EMPTY
53752: ST_TO_ADDR
// for i in turrets do
53753: LD_ADDR_VAR 0 4
53757: PUSH
53758: LD_VAR 0 1
53762: PUSH
53763: FOR_IN
53764: IFFALSE 53947
// begin nat := GetNation ( i ) ;
53766: LD_ADDR_VAR 0 7
53770: PUSH
53771: LD_VAR 0 4
53775: PPUSH
53776: CALL_OW 248
53780: ST_TO_ADDR
// weapon := 0 ;
53781: LD_ADDR_VAR 0 8
53785: PUSH
53786: LD_INT 0
53788: ST_TO_ADDR
// if not nat then
53789: LD_VAR 0 7
53793: NOT
53794: IFFALSE 53798
// continue ;
53796: GO 53763
// for j in list [ nat ] do
53798: LD_ADDR_VAR 0 5
53802: PUSH
53803: LD_VAR 0 10
53807: PUSH
53808: LD_VAR 0 7
53812: ARRAY
53813: PUSH
53814: FOR_IN
53815: IFFALSE 53856
// if GetBWeapon ( i ) = j [ 1 ] then
53817: LD_VAR 0 4
53821: PPUSH
53822: CALL_OW 269
53826: PUSH
53827: LD_VAR 0 5
53831: PUSH
53832: LD_INT 1
53834: ARRAY
53835: EQUAL
53836: IFFALSE 53854
// begin weapon := j [ 2 ] ;
53838: LD_ADDR_VAR 0 8
53842: PUSH
53843: LD_VAR 0 5
53847: PUSH
53848: LD_INT 2
53850: ARRAY
53851: ST_TO_ADDR
// break ;
53852: GO 53856
// end ;
53854: GO 53814
53856: POP
53857: POP
// if not weapon then
53858: LD_VAR 0 8
53862: NOT
53863: IFFALSE 53867
// continue ;
53865: GO 53763
// for k in factories do
53867: LD_ADDR_VAR 0 6
53871: PUSH
53872: LD_VAR 0 2
53876: PUSH
53877: FOR_IN
53878: IFFALSE 53943
// begin weapons := AvailableWeaponList ( k ) ;
53880: LD_ADDR_VAR 0 9
53884: PUSH
53885: LD_VAR 0 6
53889: PPUSH
53890: CALL_OW 478
53894: ST_TO_ADDR
// if not weapons then
53895: LD_VAR 0 9
53899: NOT
53900: IFFALSE 53904
// continue ;
53902: GO 53877
// if weapon in weapons then
53904: LD_VAR 0 8
53908: PUSH
53909: LD_VAR 0 9
53913: IN
53914: IFFALSE 53941
// begin result := [ i , weapon ] ;
53916: LD_ADDR_VAR 0 3
53920: PUSH
53921: LD_VAR 0 4
53925: PUSH
53926: LD_VAR 0 8
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: ST_TO_ADDR
// exit ;
53935: POP
53936: POP
53937: POP
53938: POP
53939: GO 53949
// end ; end ;
53941: GO 53877
53943: POP
53944: POP
// end ;
53945: GO 53763
53947: POP
53948: POP
// end ;
53949: LD_VAR 0 3
53953: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53954: LD_INT 0
53956: PPUSH
// if not side or side > 8 then
53957: LD_VAR 0 3
53961: NOT
53962: PUSH
53963: LD_VAR 0 3
53967: PUSH
53968: LD_INT 8
53970: GREATER
53971: OR
53972: IFFALSE 53976
// exit ;
53974: GO 54035
// if not range then
53976: LD_VAR 0 4
53980: NOT
53981: IFFALSE 53992
// range := - 12 ;
53983: LD_ADDR_VAR 0 4
53987: PUSH
53988: LD_INT 12
53990: NEG
53991: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53992: LD_VAR 0 1
53996: PPUSH
53997: LD_VAR 0 2
54001: PPUSH
54002: LD_VAR 0 3
54006: PPUSH
54007: LD_VAR 0 4
54011: PPUSH
54012: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54016: LD_VAR 0 1
54020: PPUSH
54021: LD_VAR 0 2
54025: PPUSH
54026: LD_VAR 0 3
54030: PPUSH
54031: CALL_OW 331
// end ;
54035: LD_VAR 0 5
54039: RET
// export function Video ( mode ) ; begin
54040: LD_INT 0
54042: PPUSH
// ingame_video = mode ;
54043: LD_ADDR_OWVAR 52
54047: PUSH
54048: LD_VAR 0 1
54052: ST_TO_ADDR
// interface_hidden = mode ;
54053: LD_ADDR_OWVAR 54
54057: PUSH
54058: LD_VAR 0 1
54062: ST_TO_ADDR
// end ;
54063: LD_VAR 0 2
54067: RET
// export function Join ( array , element ) ; begin
54068: LD_INT 0
54070: PPUSH
// result := array ^ element ;
54071: LD_ADDR_VAR 0 3
54075: PUSH
54076: LD_VAR 0 1
54080: PUSH
54081: LD_VAR 0 2
54085: ADD
54086: ST_TO_ADDR
// end ;
54087: LD_VAR 0 3
54091: RET
// export function JoinUnion ( array , element ) ; begin
54092: LD_INT 0
54094: PPUSH
// result := array union element ;
54095: LD_ADDR_VAR 0 3
54099: PUSH
54100: LD_VAR 0 1
54104: PUSH
54105: LD_VAR 0 2
54109: UNION
54110: ST_TO_ADDR
// end ;
54111: LD_VAR 0 3
54115: RET
// export function GetBehemoths ( side ) ; begin
54116: LD_INT 0
54118: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54119: LD_ADDR_VAR 0 2
54123: PUSH
54124: LD_INT 22
54126: PUSH
54127: LD_VAR 0 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 31
54138: PUSH
54139: LD_INT 25
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PPUSH
54150: CALL_OW 69
54154: ST_TO_ADDR
// end ;
54155: LD_VAR 0 2
54159: RET
// export function Shuffle ( array ) ; var i , index ; begin
54160: LD_INT 0
54162: PPUSH
54163: PPUSH
54164: PPUSH
// result := [ ] ;
54165: LD_ADDR_VAR 0 2
54169: PUSH
54170: EMPTY
54171: ST_TO_ADDR
// if not array then
54172: LD_VAR 0 1
54176: NOT
54177: IFFALSE 54181
// exit ;
54179: GO 54280
// Randomize ;
54181: CALL_OW 10
// for i = array downto 1 do
54185: LD_ADDR_VAR 0 3
54189: PUSH
54190: DOUBLE
54191: LD_VAR 0 1
54195: INC
54196: ST_TO_ADDR
54197: LD_INT 1
54199: PUSH
54200: FOR_DOWNTO
54201: IFFALSE 54278
// begin index := rand ( 1 , array ) ;
54203: LD_ADDR_VAR 0 4
54207: PUSH
54208: LD_INT 1
54210: PPUSH
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL_OW 12
54220: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54221: LD_ADDR_VAR 0 2
54225: PUSH
54226: LD_VAR 0 2
54230: PPUSH
54231: LD_VAR 0 2
54235: PUSH
54236: LD_INT 1
54238: PLUS
54239: PPUSH
54240: LD_VAR 0 1
54244: PUSH
54245: LD_VAR 0 4
54249: ARRAY
54250: PPUSH
54251: CALL_OW 2
54255: ST_TO_ADDR
// array := Delete ( array , index ) ;
54256: LD_ADDR_VAR 0 1
54260: PUSH
54261: LD_VAR 0 1
54265: PPUSH
54266: LD_VAR 0 4
54270: PPUSH
54271: CALL_OW 3
54275: ST_TO_ADDR
// end ;
54276: GO 54200
54278: POP
54279: POP
// end ;
54280: LD_VAR 0 2
54284: RET
// export function GetBaseMaterials ( base ) ; begin
54285: LD_INT 0
54287: PPUSH
// result := [ 0 , 0 , 0 ] ;
54288: LD_ADDR_VAR 0 2
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// if not base then
54307: LD_VAR 0 1
54311: NOT
54312: IFFALSE 54316
// exit ;
54314: GO 54365
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54316: LD_ADDR_VAR 0 2
54320: PUSH
54321: LD_VAR 0 1
54325: PPUSH
54326: LD_INT 1
54328: PPUSH
54329: CALL_OW 275
54333: PUSH
54334: LD_VAR 0 1
54338: PPUSH
54339: LD_INT 2
54341: PPUSH
54342: CALL_OW 275
54346: PUSH
54347: LD_VAR 0 1
54351: PPUSH
54352: LD_INT 3
54354: PPUSH
54355: CALL_OW 275
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// end ; end_of_file
54365: LD_VAR 0 2
54369: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
54370: GO 54372
54372: DISABLE
// begin ru_radar := 98 ;
54373: LD_ADDR_EXP 45
54377: PUSH
54378: LD_INT 98
54380: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
54381: LD_ADDR_EXP 46
54385: PUSH
54386: LD_INT 89
54388: ST_TO_ADDR
// us_hack := 99 ;
54389: LD_ADDR_EXP 47
54393: PUSH
54394: LD_INT 99
54396: ST_TO_ADDR
// us_artillery := 97 ;
54397: LD_ADDR_EXP 48
54401: PUSH
54402: LD_INT 97
54404: ST_TO_ADDR
// ar_bio_bomb := 91 ;
54405: LD_ADDR_EXP 49
54409: PUSH
54410: LD_INT 91
54412: ST_TO_ADDR
// end ; end_of_file
54413: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
54414: LD_INT 0
54416: PPUSH
54417: PPUSH
// skirmish := false ;
54418: LD_ADDR_EXP 50
54422: PUSH
54423: LD_INT 0
54425: ST_TO_ADDR
// debug_mc := false ;
54426: LD_ADDR_EXP 51
54430: PUSH
54431: LD_INT 0
54433: ST_TO_ADDR
// mc_bases := [ ] ;
54434: LD_ADDR_EXP 52
54438: PUSH
54439: EMPTY
54440: ST_TO_ADDR
// mc_sides := [ ] ;
54441: LD_ADDR_EXP 78
54445: PUSH
54446: EMPTY
54447: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
54448: LD_ADDR_EXP 53
54452: PUSH
54453: EMPTY
54454: ST_TO_ADDR
// mc_building_repairs := [ ] ;
54455: LD_ADDR_EXP 54
54459: PUSH
54460: EMPTY
54461: ST_TO_ADDR
// mc_need_heal := [ ] ;
54462: LD_ADDR_EXP 55
54466: PUSH
54467: EMPTY
54468: ST_TO_ADDR
// mc_healers := [ ] ;
54469: LD_ADDR_EXP 56
54473: PUSH
54474: EMPTY
54475: ST_TO_ADDR
// mc_build_list := [ ] ;
54476: LD_ADDR_EXP 57
54480: PUSH
54481: EMPTY
54482: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
54483: LD_ADDR_EXP 84
54487: PUSH
54488: EMPTY
54489: ST_TO_ADDR
// mc_builders := [ ] ;
54490: LD_ADDR_EXP 58
54494: PUSH
54495: EMPTY
54496: ST_TO_ADDR
// mc_construct_list := [ ] ;
54497: LD_ADDR_EXP 59
54501: PUSH
54502: EMPTY
54503: ST_TO_ADDR
// mc_turret_list := [ ] ;
54504: LD_ADDR_EXP 60
54508: PUSH
54509: EMPTY
54510: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
54511: LD_ADDR_EXP 61
54515: PUSH
54516: EMPTY
54517: ST_TO_ADDR
// mc_miners := [ ] ;
54518: LD_ADDR_EXP 66
54522: PUSH
54523: EMPTY
54524: ST_TO_ADDR
// mc_mines := [ ] ;
54525: LD_ADDR_EXP 65
54529: PUSH
54530: EMPTY
54531: ST_TO_ADDR
// mc_minefields := [ ] ;
54532: LD_ADDR_EXP 67
54536: PUSH
54537: EMPTY
54538: ST_TO_ADDR
// mc_crates := [ ] ;
54539: LD_ADDR_EXP 68
54543: PUSH
54544: EMPTY
54545: ST_TO_ADDR
// mc_crates_collector := [ ] ;
54546: LD_ADDR_EXP 69
54550: PUSH
54551: EMPTY
54552: ST_TO_ADDR
// mc_crates_area := [ ] ;
54553: LD_ADDR_EXP 70
54557: PUSH
54558: EMPTY
54559: ST_TO_ADDR
// mc_vehicles := [ ] ;
54560: LD_ADDR_EXP 71
54564: PUSH
54565: EMPTY
54566: ST_TO_ADDR
// mc_attack := [ ] ;
54567: LD_ADDR_EXP 72
54571: PUSH
54572: EMPTY
54573: ST_TO_ADDR
// mc_produce := [ ] ;
54574: LD_ADDR_EXP 73
54578: PUSH
54579: EMPTY
54580: ST_TO_ADDR
// mc_defender := [ ] ;
54581: LD_ADDR_EXP 74
54585: PUSH
54586: EMPTY
54587: ST_TO_ADDR
// mc_parking := [ ] ;
54588: LD_ADDR_EXP 76
54592: PUSH
54593: EMPTY
54594: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
54595: LD_ADDR_EXP 62
54599: PUSH
54600: EMPTY
54601: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
54602: LD_ADDR_EXP 64
54606: PUSH
54607: EMPTY
54608: ST_TO_ADDR
// mc_scan := [ ] ;
54609: LD_ADDR_EXP 75
54613: PUSH
54614: EMPTY
54615: ST_TO_ADDR
// mc_scan_area := [ ] ;
54616: LD_ADDR_EXP 77
54620: PUSH
54621: EMPTY
54622: ST_TO_ADDR
// mc_tech := [ ] ;
54623: LD_ADDR_EXP 79
54627: PUSH
54628: EMPTY
54629: ST_TO_ADDR
// mc_class := [ ] ;
54630: LD_ADDR_EXP 93
54634: PUSH
54635: EMPTY
54636: ST_TO_ADDR
// mc_class_case_use := [ ] ;
54637: LD_ADDR_EXP 94
54641: PUSH
54642: EMPTY
54643: ST_TO_ADDR
// end ;
54644: LD_VAR 0 1
54648: RET
// export function MC_Kill ( base ) ; begin
54649: LD_INT 0
54651: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
54652: LD_ADDR_EXP 52
54656: PUSH
54657: LD_EXP 52
54661: PPUSH
54662: LD_VAR 0 1
54666: PPUSH
54667: EMPTY
54668: PPUSH
54669: CALL_OW 1
54673: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54674: LD_ADDR_EXP 53
54678: PUSH
54679: LD_EXP 53
54683: PPUSH
54684: LD_VAR 0 1
54688: PPUSH
54689: EMPTY
54690: PPUSH
54691: CALL_OW 1
54695: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54696: LD_ADDR_EXP 54
54700: PUSH
54701: LD_EXP 54
54705: PPUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: EMPTY
54712: PPUSH
54713: CALL_OW 1
54717: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54718: LD_ADDR_EXP 55
54722: PUSH
54723: LD_EXP 55
54727: PPUSH
54728: LD_VAR 0 1
54732: PPUSH
54733: EMPTY
54734: PPUSH
54735: CALL_OW 1
54739: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54740: LD_ADDR_EXP 56
54744: PUSH
54745: LD_EXP 56
54749: PPUSH
54750: LD_VAR 0 1
54754: PPUSH
54755: EMPTY
54756: PPUSH
54757: CALL_OW 1
54761: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54762: LD_ADDR_EXP 57
54766: PUSH
54767: LD_EXP 57
54771: PPUSH
54772: LD_VAR 0 1
54776: PPUSH
54777: EMPTY
54778: PPUSH
54779: CALL_OW 1
54783: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54784: LD_ADDR_EXP 58
54788: PUSH
54789: LD_EXP 58
54793: PPUSH
54794: LD_VAR 0 1
54798: PPUSH
54799: EMPTY
54800: PPUSH
54801: CALL_OW 1
54805: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54806: LD_ADDR_EXP 59
54810: PUSH
54811: LD_EXP 59
54815: PPUSH
54816: LD_VAR 0 1
54820: PPUSH
54821: EMPTY
54822: PPUSH
54823: CALL_OW 1
54827: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54828: LD_ADDR_EXP 60
54832: PUSH
54833: LD_EXP 60
54837: PPUSH
54838: LD_VAR 0 1
54842: PPUSH
54843: EMPTY
54844: PPUSH
54845: CALL_OW 1
54849: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54850: LD_ADDR_EXP 61
54854: PUSH
54855: LD_EXP 61
54859: PPUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: EMPTY
54866: PPUSH
54867: CALL_OW 1
54871: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54872: LD_ADDR_EXP 62
54876: PUSH
54877: LD_EXP 62
54881: PPUSH
54882: LD_VAR 0 1
54886: PPUSH
54887: EMPTY
54888: PPUSH
54889: CALL_OW 1
54893: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54894: LD_ADDR_EXP 63
54898: PUSH
54899: LD_EXP 63
54903: PPUSH
54904: LD_VAR 0 1
54908: PPUSH
54909: LD_INT 0
54911: PPUSH
54912: CALL_OW 1
54916: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54917: LD_ADDR_EXP 64
54921: PUSH
54922: LD_EXP 64
54926: PPUSH
54927: LD_VAR 0 1
54931: PPUSH
54932: EMPTY
54933: PPUSH
54934: CALL_OW 1
54938: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54939: LD_ADDR_EXP 65
54943: PUSH
54944: LD_EXP 65
54948: PPUSH
54949: LD_VAR 0 1
54953: PPUSH
54954: EMPTY
54955: PPUSH
54956: CALL_OW 1
54960: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54961: LD_ADDR_EXP 66
54965: PUSH
54966: LD_EXP 66
54970: PPUSH
54971: LD_VAR 0 1
54975: PPUSH
54976: EMPTY
54977: PPUSH
54978: CALL_OW 1
54982: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54983: LD_ADDR_EXP 67
54987: PUSH
54988: LD_EXP 67
54992: PPUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: EMPTY
54999: PPUSH
55000: CALL_OW 1
55004: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55005: LD_ADDR_EXP 68
55009: PUSH
55010: LD_EXP 68
55014: PPUSH
55015: LD_VAR 0 1
55019: PPUSH
55020: EMPTY
55021: PPUSH
55022: CALL_OW 1
55026: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55027: LD_ADDR_EXP 69
55031: PUSH
55032: LD_EXP 69
55036: PPUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: EMPTY
55043: PPUSH
55044: CALL_OW 1
55048: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
55049: LD_ADDR_EXP 70
55053: PUSH
55054: LD_EXP 70
55058: PPUSH
55059: LD_VAR 0 1
55063: PPUSH
55064: EMPTY
55065: PPUSH
55066: CALL_OW 1
55070: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
55071: LD_ADDR_EXP 71
55075: PUSH
55076: LD_EXP 71
55080: PPUSH
55081: LD_VAR 0 1
55085: PPUSH
55086: EMPTY
55087: PPUSH
55088: CALL_OW 1
55092: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
55093: LD_ADDR_EXP 72
55097: PUSH
55098: LD_EXP 72
55102: PPUSH
55103: LD_VAR 0 1
55107: PPUSH
55108: EMPTY
55109: PPUSH
55110: CALL_OW 1
55114: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
55115: LD_ADDR_EXP 73
55119: PUSH
55120: LD_EXP 73
55124: PPUSH
55125: LD_VAR 0 1
55129: PPUSH
55130: EMPTY
55131: PPUSH
55132: CALL_OW 1
55136: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55137: LD_ADDR_EXP 74
55141: PUSH
55142: LD_EXP 74
55146: PPUSH
55147: LD_VAR 0 1
55151: PPUSH
55152: EMPTY
55153: PPUSH
55154: CALL_OW 1
55158: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55159: LD_ADDR_EXP 75
55163: PUSH
55164: LD_EXP 75
55168: PPUSH
55169: LD_VAR 0 1
55173: PPUSH
55174: EMPTY
55175: PPUSH
55176: CALL_OW 1
55180: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55181: LD_ADDR_EXP 76
55185: PUSH
55186: LD_EXP 76
55190: PPUSH
55191: LD_VAR 0 1
55195: PPUSH
55196: EMPTY
55197: PPUSH
55198: CALL_OW 1
55202: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55203: LD_ADDR_EXP 77
55207: PUSH
55208: LD_EXP 77
55212: PPUSH
55213: LD_VAR 0 1
55217: PPUSH
55218: EMPTY
55219: PPUSH
55220: CALL_OW 1
55224: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55225: LD_ADDR_EXP 79
55229: PUSH
55230: LD_EXP 79
55234: PPUSH
55235: LD_VAR 0 1
55239: PPUSH
55240: EMPTY
55241: PPUSH
55242: CALL_OW 1
55246: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55247: LD_ADDR_EXP 81
55251: PUSH
55252: LD_EXP 81
55256: PPUSH
55257: LD_VAR 0 1
55261: PPUSH
55262: EMPTY
55263: PPUSH
55264: CALL_OW 1
55268: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55269: LD_ADDR_EXP 82
55273: PUSH
55274: LD_EXP 82
55278: PPUSH
55279: LD_VAR 0 1
55283: PPUSH
55284: EMPTY
55285: PPUSH
55286: CALL_OW 1
55290: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55291: LD_ADDR_EXP 83
55295: PUSH
55296: LD_EXP 83
55300: PPUSH
55301: LD_VAR 0 1
55305: PPUSH
55306: EMPTY
55307: PPUSH
55308: CALL_OW 1
55312: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55313: LD_ADDR_EXP 84
55317: PUSH
55318: LD_EXP 84
55322: PPUSH
55323: LD_VAR 0 1
55327: PPUSH
55328: EMPTY
55329: PPUSH
55330: CALL_OW 1
55334: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55335: LD_ADDR_EXP 85
55339: PUSH
55340: LD_EXP 85
55344: PPUSH
55345: LD_VAR 0 1
55349: PPUSH
55350: EMPTY
55351: PPUSH
55352: CALL_OW 1
55356: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55357: LD_ADDR_EXP 86
55361: PUSH
55362: LD_EXP 86
55366: PPUSH
55367: LD_VAR 0 1
55371: PPUSH
55372: EMPTY
55373: PPUSH
55374: CALL_OW 1
55378: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55379: LD_ADDR_EXP 87
55383: PUSH
55384: LD_EXP 87
55388: PPUSH
55389: LD_VAR 0 1
55393: PPUSH
55394: EMPTY
55395: PPUSH
55396: CALL_OW 1
55400: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55401: LD_ADDR_EXP 88
55405: PUSH
55406: LD_EXP 88
55410: PPUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: EMPTY
55417: PPUSH
55418: CALL_OW 1
55422: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55423: LD_ADDR_EXP 89
55427: PUSH
55428: LD_EXP 89
55432: PPUSH
55433: LD_VAR 0 1
55437: PPUSH
55438: EMPTY
55439: PPUSH
55440: CALL_OW 1
55444: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55445: LD_ADDR_EXP 90
55449: PUSH
55450: LD_EXP 90
55454: PPUSH
55455: LD_VAR 0 1
55459: PPUSH
55460: EMPTY
55461: PPUSH
55462: CALL_OW 1
55466: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55467: LD_ADDR_EXP 91
55471: PUSH
55472: LD_EXP 91
55476: PPUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: EMPTY
55483: PPUSH
55484: CALL_OW 1
55488: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55489: LD_ADDR_EXP 92
55493: PUSH
55494: LD_EXP 92
55498: PPUSH
55499: LD_VAR 0 1
55503: PPUSH
55504: EMPTY
55505: PPUSH
55506: CALL_OW 1
55510: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55511: LD_ADDR_EXP 93
55515: PUSH
55516: LD_EXP 93
55520: PPUSH
55521: LD_VAR 0 1
55525: PPUSH
55526: EMPTY
55527: PPUSH
55528: CALL_OW 1
55532: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55533: LD_ADDR_EXP 94
55537: PUSH
55538: LD_EXP 94
55542: PPUSH
55543: LD_VAR 0 1
55547: PPUSH
55548: LD_INT 0
55550: PPUSH
55551: CALL_OW 1
55555: ST_TO_ADDR
// end ;
55556: LD_VAR 0 2
55560: RET
// export function MC_Add ( side , units ) ; var base ; begin
55561: LD_INT 0
55563: PPUSH
55564: PPUSH
// base := mc_bases + 1 ;
55565: LD_ADDR_VAR 0 4
55569: PUSH
55570: LD_EXP 52
55574: PUSH
55575: LD_INT 1
55577: PLUS
55578: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
55579: LD_ADDR_EXP 78
55583: PUSH
55584: LD_EXP 78
55588: PPUSH
55589: LD_VAR 0 4
55593: PPUSH
55594: LD_VAR 0 1
55598: PPUSH
55599: CALL_OW 1
55603: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
55604: LD_ADDR_EXP 52
55608: PUSH
55609: LD_EXP 52
55613: PPUSH
55614: LD_VAR 0 4
55618: PPUSH
55619: LD_VAR 0 2
55623: PPUSH
55624: CALL_OW 1
55628: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55629: LD_ADDR_EXP 53
55633: PUSH
55634: LD_EXP 53
55638: PPUSH
55639: LD_VAR 0 4
55643: PPUSH
55644: EMPTY
55645: PPUSH
55646: CALL_OW 1
55650: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55651: LD_ADDR_EXP 54
55655: PUSH
55656: LD_EXP 54
55660: PPUSH
55661: LD_VAR 0 4
55665: PPUSH
55666: EMPTY
55667: PPUSH
55668: CALL_OW 1
55672: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55673: LD_ADDR_EXP 55
55677: PUSH
55678: LD_EXP 55
55682: PPUSH
55683: LD_VAR 0 4
55687: PPUSH
55688: EMPTY
55689: PPUSH
55690: CALL_OW 1
55694: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55695: LD_ADDR_EXP 56
55699: PUSH
55700: LD_EXP 56
55704: PPUSH
55705: LD_VAR 0 4
55709: PPUSH
55710: EMPTY
55711: PPUSH
55712: CALL_OW 1
55716: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55717: LD_ADDR_EXP 57
55721: PUSH
55722: LD_EXP 57
55726: PPUSH
55727: LD_VAR 0 4
55731: PPUSH
55732: EMPTY
55733: PPUSH
55734: CALL_OW 1
55738: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
55739: LD_ADDR_EXP 58
55743: PUSH
55744: LD_EXP 58
55748: PPUSH
55749: LD_VAR 0 4
55753: PPUSH
55754: EMPTY
55755: PPUSH
55756: CALL_OW 1
55760: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
55761: LD_ADDR_EXP 59
55765: PUSH
55766: LD_EXP 59
55770: PPUSH
55771: LD_VAR 0 4
55775: PPUSH
55776: EMPTY
55777: PPUSH
55778: CALL_OW 1
55782: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
55783: LD_ADDR_EXP 60
55787: PUSH
55788: LD_EXP 60
55792: PPUSH
55793: LD_VAR 0 4
55797: PPUSH
55798: EMPTY
55799: PPUSH
55800: CALL_OW 1
55804: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
55805: LD_ADDR_EXP 61
55809: PUSH
55810: LD_EXP 61
55814: PPUSH
55815: LD_VAR 0 4
55819: PPUSH
55820: EMPTY
55821: PPUSH
55822: CALL_OW 1
55826: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
55827: LD_ADDR_EXP 62
55831: PUSH
55832: LD_EXP 62
55836: PPUSH
55837: LD_VAR 0 4
55841: PPUSH
55842: EMPTY
55843: PPUSH
55844: CALL_OW 1
55848: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
55849: LD_ADDR_EXP 63
55853: PUSH
55854: LD_EXP 63
55858: PPUSH
55859: LD_VAR 0 4
55863: PPUSH
55864: LD_INT 0
55866: PPUSH
55867: CALL_OW 1
55871: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
55872: LD_ADDR_EXP 64
55876: PUSH
55877: LD_EXP 64
55881: PPUSH
55882: LD_VAR 0 4
55886: PPUSH
55887: EMPTY
55888: PPUSH
55889: CALL_OW 1
55893: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
55894: LD_ADDR_EXP 65
55898: PUSH
55899: LD_EXP 65
55903: PPUSH
55904: LD_VAR 0 4
55908: PPUSH
55909: EMPTY
55910: PPUSH
55911: CALL_OW 1
55915: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55916: LD_ADDR_EXP 66
55920: PUSH
55921: LD_EXP 66
55925: PPUSH
55926: LD_VAR 0 4
55930: PPUSH
55931: EMPTY
55932: PPUSH
55933: CALL_OW 1
55937: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55938: LD_ADDR_EXP 67
55942: PUSH
55943: LD_EXP 67
55947: PPUSH
55948: LD_VAR 0 4
55952: PPUSH
55953: EMPTY
55954: PPUSH
55955: CALL_OW 1
55959: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55960: LD_ADDR_EXP 68
55964: PUSH
55965: LD_EXP 68
55969: PPUSH
55970: LD_VAR 0 4
55974: PPUSH
55975: EMPTY
55976: PPUSH
55977: CALL_OW 1
55981: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55982: LD_ADDR_EXP 69
55986: PUSH
55987: LD_EXP 69
55991: PPUSH
55992: LD_VAR 0 4
55996: PPUSH
55997: EMPTY
55998: PPUSH
55999: CALL_OW 1
56003: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56004: LD_ADDR_EXP 70
56008: PUSH
56009: LD_EXP 70
56013: PPUSH
56014: LD_VAR 0 4
56018: PPUSH
56019: EMPTY
56020: PPUSH
56021: CALL_OW 1
56025: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56026: LD_ADDR_EXP 71
56030: PUSH
56031: LD_EXP 71
56035: PPUSH
56036: LD_VAR 0 4
56040: PPUSH
56041: EMPTY
56042: PPUSH
56043: CALL_OW 1
56047: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56048: LD_ADDR_EXP 72
56052: PUSH
56053: LD_EXP 72
56057: PPUSH
56058: LD_VAR 0 4
56062: PPUSH
56063: EMPTY
56064: PPUSH
56065: CALL_OW 1
56069: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56070: LD_ADDR_EXP 73
56074: PUSH
56075: LD_EXP 73
56079: PPUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: EMPTY
56086: PPUSH
56087: CALL_OW 1
56091: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56092: LD_ADDR_EXP 74
56096: PUSH
56097: LD_EXP 74
56101: PPUSH
56102: LD_VAR 0 4
56106: PPUSH
56107: EMPTY
56108: PPUSH
56109: CALL_OW 1
56113: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56114: LD_ADDR_EXP 75
56118: PUSH
56119: LD_EXP 75
56123: PPUSH
56124: LD_VAR 0 4
56128: PPUSH
56129: EMPTY
56130: PPUSH
56131: CALL_OW 1
56135: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56136: LD_ADDR_EXP 76
56140: PUSH
56141: LD_EXP 76
56145: PPUSH
56146: LD_VAR 0 4
56150: PPUSH
56151: EMPTY
56152: PPUSH
56153: CALL_OW 1
56157: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56158: LD_ADDR_EXP 77
56162: PUSH
56163: LD_EXP 77
56167: PPUSH
56168: LD_VAR 0 4
56172: PPUSH
56173: EMPTY
56174: PPUSH
56175: CALL_OW 1
56179: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56180: LD_ADDR_EXP 79
56184: PUSH
56185: LD_EXP 79
56189: PPUSH
56190: LD_VAR 0 4
56194: PPUSH
56195: EMPTY
56196: PPUSH
56197: CALL_OW 1
56201: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56202: LD_ADDR_EXP 81
56206: PUSH
56207: LD_EXP 81
56211: PPUSH
56212: LD_VAR 0 4
56216: PPUSH
56217: EMPTY
56218: PPUSH
56219: CALL_OW 1
56223: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56224: LD_ADDR_EXP 82
56228: PUSH
56229: LD_EXP 82
56233: PPUSH
56234: LD_VAR 0 4
56238: PPUSH
56239: EMPTY
56240: PPUSH
56241: CALL_OW 1
56245: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56246: LD_ADDR_EXP 83
56250: PUSH
56251: LD_EXP 83
56255: PPUSH
56256: LD_VAR 0 4
56260: PPUSH
56261: EMPTY
56262: PPUSH
56263: CALL_OW 1
56267: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56268: LD_ADDR_EXP 84
56272: PUSH
56273: LD_EXP 84
56277: PPUSH
56278: LD_VAR 0 4
56282: PPUSH
56283: EMPTY
56284: PPUSH
56285: CALL_OW 1
56289: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56290: LD_ADDR_EXP 85
56294: PUSH
56295: LD_EXP 85
56299: PPUSH
56300: LD_VAR 0 4
56304: PPUSH
56305: EMPTY
56306: PPUSH
56307: CALL_OW 1
56311: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56312: LD_ADDR_EXP 86
56316: PUSH
56317: LD_EXP 86
56321: PPUSH
56322: LD_VAR 0 4
56326: PPUSH
56327: EMPTY
56328: PPUSH
56329: CALL_OW 1
56333: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56334: LD_ADDR_EXP 87
56338: PUSH
56339: LD_EXP 87
56343: PPUSH
56344: LD_VAR 0 4
56348: PPUSH
56349: EMPTY
56350: PPUSH
56351: CALL_OW 1
56355: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56356: LD_ADDR_EXP 88
56360: PUSH
56361: LD_EXP 88
56365: PPUSH
56366: LD_VAR 0 4
56370: PPUSH
56371: EMPTY
56372: PPUSH
56373: CALL_OW 1
56377: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56378: LD_ADDR_EXP 89
56382: PUSH
56383: LD_EXP 89
56387: PPUSH
56388: LD_VAR 0 4
56392: PPUSH
56393: EMPTY
56394: PPUSH
56395: CALL_OW 1
56399: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56400: LD_ADDR_EXP 90
56404: PUSH
56405: LD_EXP 90
56409: PPUSH
56410: LD_VAR 0 4
56414: PPUSH
56415: EMPTY
56416: PPUSH
56417: CALL_OW 1
56421: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56422: LD_ADDR_EXP 91
56426: PUSH
56427: LD_EXP 91
56431: PPUSH
56432: LD_VAR 0 4
56436: PPUSH
56437: EMPTY
56438: PPUSH
56439: CALL_OW 1
56443: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56444: LD_ADDR_EXP 92
56448: PUSH
56449: LD_EXP 92
56453: PPUSH
56454: LD_VAR 0 4
56458: PPUSH
56459: EMPTY
56460: PPUSH
56461: CALL_OW 1
56465: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56466: LD_ADDR_EXP 93
56470: PUSH
56471: LD_EXP 93
56475: PPUSH
56476: LD_VAR 0 4
56480: PPUSH
56481: EMPTY
56482: PPUSH
56483: CALL_OW 1
56487: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56488: LD_ADDR_EXP 94
56492: PUSH
56493: LD_EXP 94
56497: PPUSH
56498: LD_VAR 0 4
56502: PPUSH
56503: LD_INT 0
56505: PPUSH
56506: CALL_OW 1
56510: ST_TO_ADDR
// result := base ;
56511: LD_ADDR_VAR 0 3
56515: PUSH
56516: LD_VAR 0 4
56520: ST_TO_ADDR
// end ;
56521: LD_VAR 0 3
56525: RET
// export function MC_Start ( ) ; var i ; begin
56526: LD_INT 0
56528: PPUSH
56529: PPUSH
// for i = 1 to mc_bases do
56530: LD_ADDR_VAR 0 2
56534: PUSH
56535: DOUBLE
56536: LD_INT 1
56538: DEC
56539: ST_TO_ADDR
56540: LD_EXP 52
56544: PUSH
56545: FOR_TO
56546: IFFALSE 57623
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
56548: LD_ADDR_EXP 52
56552: PUSH
56553: LD_EXP 52
56557: PPUSH
56558: LD_VAR 0 2
56562: PPUSH
56563: LD_EXP 52
56567: PUSH
56568: LD_VAR 0 2
56572: ARRAY
56573: PUSH
56574: LD_INT 0
56576: DIFF
56577: PPUSH
56578: CALL_OW 1
56582: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
56583: LD_ADDR_EXP 53
56587: PUSH
56588: LD_EXP 53
56592: PPUSH
56593: LD_VAR 0 2
56597: PPUSH
56598: EMPTY
56599: PPUSH
56600: CALL_OW 1
56604: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56605: LD_ADDR_EXP 54
56609: PUSH
56610: LD_EXP 54
56614: PPUSH
56615: LD_VAR 0 2
56619: PPUSH
56620: EMPTY
56621: PPUSH
56622: CALL_OW 1
56626: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
56627: LD_ADDR_EXP 55
56631: PUSH
56632: LD_EXP 55
56636: PPUSH
56637: LD_VAR 0 2
56641: PPUSH
56642: EMPTY
56643: PPUSH
56644: CALL_OW 1
56648: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
56649: LD_ADDR_EXP 56
56653: PUSH
56654: LD_EXP 56
56658: PPUSH
56659: LD_VAR 0 2
56663: PPUSH
56664: EMPTY
56665: PUSH
56666: EMPTY
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PPUSH
56672: CALL_OW 1
56676: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
56677: LD_ADDR_EXP 57
56681: PUSH
56682: LD_EXP 57
56686: PPUSH
56687: LD_VAR 0 2
56691: PPUSH
56692: EMPTY
56693: PPUSH
56694: CALL_OW 1
56698: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
56699: LD_ADDR_EXP 84
56703: PUSH
56704: LD_EXP 84
56708: PPUSH
56709: LD_VAR 0 2
56713: PPUSH
56714: EMPTY
56715: PPUSH
56716: CALL_OW 1
56720: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
56721: LD_ADDR_EXP 58
56725: PUSH
56726: LD_EXP 58
56730: PPUSH
56731: LD_VAR 0 2
56735: PPUSH
56736: EMPTY
56737: PPUSH
56738: CALL_OW 1
56742: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
56743: LD_ADDR_EXP 59
56747: PUSH
56748: LD_EXP 59
56752: PPUSH
56753: LD_VAR 0 2
56757: PPUSH
56758: EMPTY
56759: PPUSH
56760: CALL_OW 1
56764: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
56765: LD_ADDR_EXP 60
56769: PUSH
56770: LD_EXP 60
56774: PPUSH
56775: LD_VAR 0 2
56779: PPUSH
56780: LD_EXP 52
56784: PUSH
56785: LD_VAR 0 2
56789: ARRAY
56790: PPUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 30
56796: PUSH
56797: LD_INT 32
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 30
56806: PUSH
56807: LD_INT 33
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: PPUSH
56819: CALL_OW 72
56823: PPUSH
56824: CALL_OW 1
56828: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
56829: LD_ADDR_EXP 61
56833: PUSH
56834: LD_EXP 61
56838: PPUSH
56839: LD_VAR 0 2
56843: PPUSH
56844: LD_EXP 52
56848: PUSH
56849: LD_VAR 0 2
56853: ARRAY
56854: PPUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 30
56860: PUSH
56861: LD_INT 32
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 30
56870: PUSH
56871: LD_INT 31
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 58
56885: PUSH
56886: EMPTY
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PPUSH
56893: CALL_OW 72
56897: PPUSH
56898: CALL_OW 1
56902: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
56903: LD_ADDR_EXP 62
56907: PUSH
56908: LD_EXP 62
56912: PPUSH
56913: LD_VAR 0 2
56917: PPUSH
56918: EMPTY
56919: PPUSH
56920: CALL_OW 1
56924: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
56925: LD_ADDR_EXP 66
56929: PUSH
56930: LD_EXP 66
56934: PPUSH
56935: LD_VAR 0 2
56939: PPUSH
56940: EMPTY
56941: PPUSH
56942: CALL_OW 1
56946: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
56947: LD_ADDR_EXP 65
56951: PUSH
56952: LD_EXP 65
56956: PPUSH
56957: LD_VAR 0 2
56961: PPUSH
56962: EMPTY
56963: PPUSH
56964: CALL_OW 1
56968: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
56969: LD_ADDR_EXP 67
56973: PUSH
56974: LD_EXP 67
56978: PPUSH
56979: LD_VAR 0 2
56983: PPUSH
56984: EMPTY
56985: PPUSH
56986: CALL_OW 1
56990: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
56991: LD_ADDR_EXP 68
56995: PUSH
56996: LD_EXP 68
57000: PPUSH
57001: LD_VAR 0 2
57005: PPUSH
57006: EMPTY
57007: PPUSH
57008: CALL_OW 1
57012: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
57013: LD_ADDR_EXP 69
57017: PUSH
57018: LD_EXP 69
57022: PPUSH
57023: LD_VAR 0 2
57027: PPUSH
57028: EMPTY
57029: PPUSH
57030: CALL_OW 1
57034: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
57035: LD_ADDR_EXP 70
57039: PUSH
57040: LD_EXP 70
57044: PPUSH
57045: LD_VAR 0 2
57049: PPUSH
57050: EMPTY
57051: PPUSH
57052: CALL_OW 1
57056: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
57057: LD_ADDR_EXP 71
57061: PUSH
57062: LD_EXP 71
57066: PPUSH
57067: LD_VAR 0 2
57071: PPUSH
57072: EMPTY
57073: PPUSH
57074: CALL_OW 1
57078: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
57079: LD_ADDR_EXP 72
57083: PUSH
57084: LD_EXP 72
57088: PPUSH
57089: LD_VAR 0 2
57093: PPUSH
57094: EMPTY
57095: PPUSH
57096: CALL_OW 1
57100: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
57101: LD_ADDR_EXP 73
57105: PUSH
57106: LD_EXP 73
57110: PPUSH
57111: LD_VAR 0 2
57115: PPUSH
57116: EMPTY
57117: PPUSH
57118: CALL_OW 1
57122: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
57123: LD_ADDR_EXP 74
57127: PUSH
57128: LD_EXP 74
57132: PPUSH
57133: LD_VAR 0 2
57137: PPUSH
57138: EMPTY
57139: PPUSH
57140: CALL_OW 1
57144: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
57145: LD_ADDR_EXP 63
57149: PUSH
57150: LD_EXP 63
57154: PPUSH
57155: LD_VAR 0 2
57159: PPUSH
57160: LD_INT 0
57162: PPUSH
57163: CALL_OW 1
57167: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
57168: LD_ADDR_EXP 76
57172: PUSH
57173: LD_EXP 76
57177: PPUSH
57178: LD_VAR 0 2
57182: PPUSH
57183: LD_INT 0
57185: PPUSH
57186: CALL_OW 1
57190: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
57191: LD_ADDR_EXP 64
57195: PUSH
57196: LD_EXP 64
57200: PPUSH
57201: LD_VAR 0 2
57205: PPUSH
57206: EMPTY
57207: PPUSH
57208: CALL_OW 1
57212: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
57213: LD_ADDR_EXP 75
57217: PUSH
57218: LD_EXP 75
57222: PPUSH
57223: LD_VAR 0 2
57227: PPUSH
57228: LD_INT 0
57230: PPUSH
57231: CALL_OW 1
57235: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
57236: LD_ADDR_EXP 77
57240: PUSH
57241: LD_EXP 77
57245: PPUSH
57246: LD_VAR 0 2
57250: PPUSH
57251: EMPTY
57252: PPUSH
57253: CALL_OW 1
57257: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
57258: LD_ADDR_EXP 80
57262: PUSH
57263: LD_EXP 80
57267: PPUSH
57268: LD_VAR 0 2
57272: PPUSH
57273: LD_INT 0
57275: PPUSH
57276: CALL_OW 1
57280: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
57281: LD_ADDR_EXP 81
57285: PUSH
57286: LD_EXP 81
57290: PPUSH
57291: LD_VAR 0 2
57295: PPUSH
57296: EMPTY
57297: PPUSH
57298: CALL_OW 1
57302: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57303: LD_ADDR_EXP 82
57307: PUSH
57308: LD_EXP 82
57312: PPUSH
57313: LD_VAR 0 2
57317: PPUSH
57318: EMPTY
57319: PPUSH
57320: CALL_OW 1
57324: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57325: LD_ADDR_EXP 83
57329: PUSH
57330: LD_EXP 83
57334: PPUSH
57335: LD_VAR 0 2
57339: PPUSH
57340: EMPTY
57341: PPUSH
57342: CALL_OW 1
57346: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
57347: LD_ADDR_EXP 85
57351: PUSH
57352: LD_EXP 85
57356: PPUSH
57357: LD_VAR 0 2
57361: PPUSH
57362: LD_EXP 52
57366: PUSH
57367: LD_VAR 0 2
57371: ARRAY
57372: PPUSH
57373: LD_INT 2
57375: PUSH
57376: LD_INT 30
57378: PUSH
57379: LD_INT 6
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 30
57388: PUSH
57389: LD_INT 7
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 30
57398: PUSH
57399: LD_INT 8
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: PPUSH
57412: CALL_OW 72
57416: PPUSH
57417: CALL_OW 1
57421: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
57422: LD_ADDR_EXP 86
57426: PUSH
57427: LD_EXP 86
57431: PPUSH
57432: LD_VAR 0 2
57436: PPUSH
57437: EMPTY
57438: PPUSH
57439: CALL_OW 1
57443: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
57444: LD_ADDR_EXP 87
57448: PUSH
57449: LD_EXP 87
57453: PPUSH
57454: LD_VAR 0 2
57458: PPUSH
57459: EMPTY
57460: PPUSH
57461: CALL_OW 1
57465: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
57466: LD_ADDR_EXP 88
57470: PUSH
57471: LD_EXP 88
57475: PPUSH
57476: LD_VAR 0 2
57480: PPUSH
57481: EMPTY
57482: PPUSH
57483: CALL_OW 1
57487: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
57488: LD_ADDR_EXP 89
57492: PUSH
57493: LD_EXP 89
57497: PPUSH
57498: LD_VAR 0 2
57502: PPUSH
57503: EMPTY
57504: PPUSH
57505: CALL_OW 1
57509: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
57510: LD_ADDR_EXP 90
57514: PUSH
57515: LD_EXP 90
57519: PPUSH
57520: LD_VAR 0 2
57524: PPUSH
57525: EMPTY
57526: PPUSH
57527: CALL_OW 1
57531: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
57532: LD_ADDR_EXP 91
57536: PUSH
57537: LD_EXP 91
57541: PPUSH
57542: LD_VAR 0 2
57546: PPUSH
57547: EMPTY
57548: PPUSH
57549: CALL_OW 1
57553: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
57554: LD_ADDR_EXP 92
57558: PUSH
57559: LD_EXP 92
57563: PPUSH
57564: LD_VAR 0 2
57568: PPUSH
57569: EMPTY
57570: PPUSH
57571: CALL_OW 1
57575: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
57576: LD_ADDR_EXP 93
57580: PUSH
57581: LD_EXP 93
57585: PPUSH
57586: LD_VAR 0 2
57590: PPUSH
57591: EMPTY
57592: PPUSH
57593: CALL_OW 1
57597: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
57598: LD_ADDR_EXP 94
57602: PUSH
57603: LD_EXP 94
57607: PPUSH
57608: LD_VAR 0 2
57612: PPUSH
57613: LD_INT 0
57615: PPUSH
57616: CALL_OW 1
57620: ST_TO_ADDR
// end ;
57621: GO 56545
57623: POP
57624: POP
// MC_InitSides ( ) ;
57625: CALL 57911 0 0
// MC_InitResearch ( ) ;
57629: CALL 57650 0 0
// CustomInitMacro ( ) ;
57633: CALL 5367 0 0
// skirmish := true ;
57637: LD_ADDR_EXP 50
57641: PUSH
57642: LD_INT 1
57644: ST_TO_ADDR
// end ;
57645: LD_VAR 0 1
57649: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
57650: LD_INT 0
57652: PPUSH
57653: PPUSH
57654: PPUSH
57655: PPUSH
57656: PPUSH
57657: PPUSH
// if not mc_bases then
57658: LD_EXP 52
57662: NOT
57663: IFFALSE 57667
// exit ;
57665: GO 57906
// for i = 1 to 8 do
57667: LD_ADDR_VAR 0 2
57671: PUSH
57672: DOUBLE
57673: LD_INT 1
57675: DEC
57676: ST_TO_ADDR
57677: LD_INT 8
57679: PUSH
57680: FOR_TO
57681: IFFALSE 57707
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
57683: LD_ADDR_EXP 79
57687: PUSH
57688: LD_EXP 79
57692: PPUSH
57693: LD_VAR 0 2
57697: PPUSH
57698: EMPTY
57699: PPUSH
57700: CALL_OW 1
57704: ST_TO_ADDR
57705: GO 57680
57707: POP
57708: POP
// tmp := [ ] ;
57709: LD_ADDR_VAR 0 5
57713: PUSH
57714: EMPTY
57715: ST_TO_ADDR
// for i = 1 to mc_sides do
57716: LD_ADDR_VAR 0 2
57720: PUSH
57721: DOUBLE
57722: LD_INT 1
57724: DEC
57725: ST_TO_ADDR
57726: LD_EXP 78
57730: PUSH
57731: FOR_TO
57732: IFFALSE 57790
// if not mc_sides [ i ] in tmp then
57734: LD_EXP 78
57738: PUSH
57739: LD_VAR 0 2
57743: ARRAY
57744: PUSH
57745: LD_VAR 0 5
57749: IN
57750: NOT
57751: IFFALSE 57788
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
57753: LD_ADDR_VAR 0 5
57757: PUSH
57758: LD_VAR 0 5
57762: PPUSH
57763: LD_VAR 0 5
57767: PUSH
57768: LD_INT 1
57770: PLUS
57771: PPUSH
57772: LD_EXP 78
57776: PUSH
57777: LD_VAR 0 2
57781: ARRAY
57782: PPUSH
57783: CALL_OW 2
57787: ST_TO_ADDR
57788: GO 57731
57790: POP
57791: POP
// if not tmp then
57792: LD_VAR 0 5
57796: NOT
57797: IFFALSE 57801
// exit ;
57799: GO 57906
// for j in tmp do
57801: LD_ADDR_VAR 0 3
57805: PUSH
57806: LD_VAR 0 5
57810: PUSH
57811: FOR_IN
57812: IFFALSE 57904
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
57814: LD_ADDR_VAR 0 6
57818: PUSH
57819: LD_INT 22
57821: PUSH
57822: LD_VAR 0 3
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PPUSH
57831: CALL_OW 69
57835: ST_TO_ADDR
// if not un then
57836: LD_VAR 0 6
57840: NOT
57841: IFFALSE 57845
// continue ;
57843: GO 57811
// nation := GetNation ( un [ 1 ] ) ;
57845: LD_ADDR_VAR 0 4
57849: PUSH
57850: LD_VAR 0 6
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: PPUSH
57859: CALL_OW 248
57863: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
57864: LD_ADDR_EXP 79
57868: PUSH
57869: LD_EXP 79
57873: PPUSH
57874: LD_VAR 0 3
57878: PPUSH
57879: LD_VAR 0 3
57883: PPUSH
57884: LD_VAR 0 4
57888: PPUSH
57889: LD_INT 1
57891: PPUSH
57892: CALL 11245 0 3
57896: PPUSH
57897: CALL_OW 1
57901: ST_TO_ADDR
// end ;
57902: GO 57811
57904: POP
57905: POP
// end ;
57906: LD_VAR 0 1
57910: RET
// export function MC_InitSides ( ) ; var i ; begin
57911: LD_INT 0
57913: PPUSH
57914: PPUSH
// if not mc_bases then
57915: LD_EXP 52
57919: NOT
57920: IFFALSE 57924
// exit ;
57922: GO 57998
// for i = 1 to mc_bases do
57924: LD_ADDR_VAR 0 2
57928: PUSH
57929: DOUBLE
57930: LD_INT 1
57932: DEC
57933: ST_TO_ADDR
57934: LD_EXP 52
57938: PUSH
57939: FOR_TO
57940: IFFALSE 57996
// if mc_bases [ i ] then
57942: LD_EXP 52
57946: PUSH
57947: LD_VAR 0 2
57951: ARRAY
57952: IFFALSE 57994
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57954: LD_ADDR_EXP 78
57958: PUSH
57959: LD_EXP 78
57963: PPUSH
57964: LD_VAR 0 2
57968: PPUSH
57969: LD_EXP 52
57973: PUSH
57974: LD_VAR 0 2
57978: ARRAY
57979: PUSH
57980: LD_INT 1
57982: ARRAY
57983: PPUSH
57984: CALL_OW 255
57988: PPUSH
57989: CALL_OW 1
57993: ST_TO_ADDR
57994: GO 57939
57996: POP
57997: POP
// end ;
57998: LD_VAR 0 1
58002: RET
// every 0 0$01 trigger skirmish do
58003: LD_EXP 50
58007: IFFALSE 58161
58009: GO 58011
58011: DISABLE
// begin enable ;
58012: ENABLE
// MC_CheckBuildings ( ) ;
58013: CALL 62659 0 0
// MC_CheckPeopleLife ( ) ;
58017: CALL 62784 0 0
// RaiseSailEvent ( 100 ) ;
58021: LD_INT 100
58023: PPUSH
58024: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
58028: LD_INT 103
58030: PPUSH
58031: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
58035: LD_INT 104
58037: PPUSH
58038: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
58042: LD_INT 105
58044: PPUSH
58045: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
58049: LD_INT 106
58051: PPUSH
58052: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
58056: LD_INT 107
58058: PPUSH
58059: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
58063: LD_INT 108
58065: PPUSH
58066: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
58070: LD_INT 109
58072: PPUSH
58073: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
58077: LD_INT 110
58079: PPUSH
58080: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
58084: LD_INT 111
58086: PPUSH
58087: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
58091: LD_INT 112
58093: PPUSH
58094: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
58098: LD_INT 113
58100: PPUSH
58101: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
58105: LD_INT 120
58107: PPUSH
58108: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
58112: LD_INT 121
58114: PPUSH
58115: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
58119: LD_INT 122
58121: PPUSH
58122: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
58126: LD_INT 123
58128: PPUSH
58129: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
58133: LD_INT 124
58135: PPUSH
58136: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
58140: LD_INT 125
58142: PPUSH
58143: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
58147: LD_INT 126
58149: PPUSH
58150: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
58154: LD_INT 200
58156: PPUSH
58157: CALL_OW 427
// end ;
58161: END
// on SailEvent ( event ) do begin if event < 100 then
58162: LD_VAR 0 1
58166: PUSH
58167: LD_INT 100
58169: LESS
58170: IFFALSE 58181
// CustomEvent ( event ) ;
58172: LD_VAR 0 1
58176: PPUSH
58177: CALL 5359 0 1
// if event = 100 then
58181: LD_VAR 0 1
58185: PUSH
58186: LD_INT 100
58188: EQUAL
58189: IFFALSE 58195
// MC_ClassManager ( ) ;
58191: CALL 58587 0 0
// if event = 101 then
58195: LD_VAR 0 1
58199: PUSH
58200: LD_INT 101
58202: EQUAL
58203: IFFALSE 58209
// MC_RepairBuildings ( ) ;
58205: CALL 63380 0 0
// if event = 102 then
58209: LD_VAR 0 1
58213: PUSH
58214: LD_INT 102
58216: EQUAL
58217: IFFALSE 58223
// MC_Heal ( ) ;
58219: CALL 64244 0 0
// if event = 103 then
58223: LD_VAR 0 1
58227: PUSH
58228: LD_INT 103
58230: EQUAL
58231: IFFALSE 58237
// MC_Build ( ) ;
58233: CALL 64666 0 0
// if event = 104 then
58237: LD_VAR 0 1
58241: PUSH
58242: LD_INT 104
58244: EQUAL
58245: IFFALSE 58251
// MC_TurretWeapon ( ) ;
58247: CALL 66279 0 0
// if event = 105 then
58251: LD_VAR 0 1
58255: PUSH
58256: LD_INT 105
58258: EQUAL
58259: IFFALSE 58265
// MC_BuildUpgrade ( ) ;
58261: CALL 65830 0 0
// if event = 106 then
58265: LD_VAR 0 1
58269: PUSH
58270: LD_INT 106
58272: EQUAL
58273: IFFALSE 58279
// MC_PlantMines ( ) ;
58275: CALL 66709 0 0
// if event = 107 then
58279: LD_VAR 0 1
58283: PUSH
58284: LD_INT 107
58286: EQUAL
58287: IFFALSE 58293
// MC_CollectCrates ( ) ;
58289: CALL 67507 0 0
// if event = 108 then
58293: LD_VAR 0 1
58297: PUSH
58298: LD_INT 108
58300: EQUAL
58301: IFFALSE 58307
// MC_LinkRemoteControl ( ) ;
58303: CALL 69283 0 0
// if event = 109 then
58307: LD_VAR 0 1
58311: PUSH
58312: LD_INT 109
58314: EQUAL
58315: IFFALSE 58321
// MC_ProduceVehicle ( ) ;
58317: CALL 69464 0 0
// if event = 110 then
58321: LD_VAR 0 1
58325: PUSH
58326: LD_INT 110
58328: EQUAL
58329: IFFALSE 58335
// MC_SendAttack ( ) ;
58331: CALL 69930 0 0
// if event = 111 then
58335: LD_VAR 0 1
58339: PUSH
58340: LD_INT 111
58342: EQUAL
58343: IFFALSE 58349
// MC_Defend ( ) ;
58345: CALL 70038 0 0
// if event = 112 then
58349: LD_VAR 0 1
58353: PUSH
58354: LD_INT 112
58356: EQUAL
58357: IFFALSE 58363
// MC_Research ( ) ;
58359: CALL 70643 0 0
// if event = 113 then
58363: LD_VAR 0 1
58367: PUSH
58368: LD_INT 113
58370: EQUAL
58371: IFFALSE 58377
// MC_MinesTrigger ( ) ;
58373: CALL 71757 0 0
// if event = 120 then
58377: LD_VAR 0 1
58381: PUSH
58382: LD_INT 120
58384: EQUAL
58385: IFFALSE 58391
// MC_RepairVehicle ( ) ;
58387: CALL 71856 0 0
// if event = 121 then
58391: LD_VAR 0 1
58395: PUSH
58396: LD_INT 121
58398: EQUAL
58399: IFFALSE 58405
// MC_TameApe ( ) ;
58401: CALL 72586 0 0
// if event = 122 then
58405: LD_VAR 0 1
58409: PUSH
58410: LD_INT 122
58412: EQUAL
58413: IFFALSE 58419
// MC_ChangeApeClass ( ) ;
58415: CALL 73415 0 0
// if event = 123 then
58419: LD_VAR 0 1
58423: PUSH
58424: LD_INT 123
58426: EQUAL
58427: IFFALSE 58433
// MC_Bazooka ( ) ;
58429: CALL 74065 0 0
// if event = 124 then
58433: LD_VAR 0 1
58437: PUSH
58438: LD_INT 124
58440: EQUAL
58441: IFFALSE 58447
// MC_TeleportExit ( ) ;
58443: CALL 74263 0 0
// if event = 125 then
58447: LD_VAR 0 1
58451: PUSH
58452: LD_INT 125
58454: EQUAL
58455: IFFALSE 58461
// MC_Deposits ( ) ;
58457: CALL 74910 0 0
// if event = 126 then
58461: LD_VAR 0 1
58465: PUSH
58466: LD_INT 126
58468: EQUAL
58469: IFFALSE 58475
// MC_RemoteDriver ( ) ;
58471: CALL 75535 0 0
// if event = 200 then
58475: LD_VAR 0 1
58479: PUSH
58480: LD_INT 200
58482: EQUAL
58483: IFFALSE 58489
// MC_Idle ( ) ;
58485: CALL 77484 0 0
// end ;
58489: PPOPN 1
58491: END
// export function MC_Reset ( base , tag ) ; var i ; begin
58492: LD_INT 0
58494: PPUSH
58495: PPUSH
// if not mc_bases [ base ] or not tag then
58496: LD_EXP 52
58500: PUSH
58501: LD_VAR 0 1
58505: ARRAY
58506: NOT
58507: PUSH
58508: LD_VAR 0 2
58512: NOT
58513: OR
58514: IFFALSE 58518
// exit ;
58516: GO 58582
// for i in mc_bases [ base ] union mc_ape [ base ] do
58518: LD_ADDR_VAR 0 4
58522: PUSH
58523: LD_EXP 52
58527: PUSH
58528: LD_VAR 0 1
58532: ARRAY
58533: PUSH
58534: LD_EXP 81
58538: PUSH
58539: LD_VAR 0 1
58543: ARRAY
58544: UNION
58545: PUSH
58546: FOR_IN
58547: IFFALSE 58580
// if GetTag ( i ) = tag then
58549: LD_VAR 0 4
58553: PPUSH
58554: CALL_OW 110
58558: PUSH
58559: LD_VAR 0 2
58563: EQUAL
58564: IFFALSE 58578
// SetTag ( i , 0 ) ;
58566: LD_VAR 0 4
58570: PPUSH
58571: LD_INT 0
58573: PPUSH
58574: CALL_OW 109
58578: GO 58546
58580: POP
58581: POP
// end ;
58582: LD_VAR 0 3
58586: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
58587: LD_INT 0
58589: PPUSH
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
58595: PPUSH
58596: PPUSH
// if not mc_bases then
58597: LD_EXP 52
58601: NOT
58602: IFFALSE 58606
// exit ;
58604: GO 59064
// for i = 1 to mc_bases do
58606: LD_ADDR_VAR 0 2
58610: PUSH
58611: DOUBLE
58612: LD_INT 1
58614: DEC
58615: ST_TO_ADDR
58616: LD_EXP 52
58620: PUSH
58621: FOR_TO
58622: IFFALSE 59062
// begin tmp := MC_ClassCheckReq ( i ) ;
58624: LD_ADDR_VAR 0 4
58628: PUSH
58629: LD_VAR 0 2
58633: PPUSH
58634: CALL 59069 0 1
58638: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
58639: LD_ADDR_EXP 93
58643: PUSH
58644: LD_EXP 93
58648: PPUSH
58649: LD_VAR 0 2
58653: PPUSH
58654: LD_VAR 0 4
58658: PPUSH
58659: CALL_OW 1
58663: ST_TO_ADDR
// if not tmp then
58664: LD_VAR 0 4
58668: NOT
58669: IFFALSE 58673
// continue ;
58671: GO 58621
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
58673: LD_ADDR_VAR 0 6
58677: PUSH
58678: LD_EXP 52
58682: PUSH
58683: LD_VAR 0 2
58687: ARRAY
58688: PPUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 30
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 30
58704: PUSH
58705: LD_INT 5
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: PPUSH
58717: CALL_OW 72
58721: PUSH
58722: LD_EXP 52
58726: PUSH
58727: LD_VAR 0 2
58731: ARRAY
58732: PPUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 30
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 30
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: PPUSH
58761: CALL_OW 72
58765: PUSH
58766: LD_EXP 52
58770: PUSH
58771: LD_VAR 0 2
58775: ARRAY
58776: PPUSH
58777: LD_INT 30
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PPUSH
58787: CALL_OW 72
58791: PUSH
58792: LD_EXP 52
58796: PUSH
58797: LD_VAR 0 2
58801: ARRAY
58802: PPUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 30
58808: PUSH
58809: LD_INT 6
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 30
58818: PUSH
58819: LD_INT 7
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 30
58828: PUSH
58829: LD_INT 8
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: PPUSH
58842: CALL_OW 72
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// for j = 1 to 4 do
58853: LD_ADDR_VAR 0 3
58857: PUSH
58858: DOUBLE
58859: LD_INT 1
58861: DEC
58862: ST_TO_ADDR
58863: LD_INT 4
58865: PUSH
58866: FOR_TO
58867: IFFALSE 59058
// begin if not tmp [ j ] then
58869: LD_VAR 0 4
58873: PUSH
58874: LD_VAR 0 3
58878: ARRAY
58879: NOT
58880: IFFALSE 58884
// continue ;
58882: GO 58866
// for p in tmp [ j ] do
58884: LD_ADDR_VAR 0 5
58888: PUSH
58889: LD_VAR 0 4
58893: PUSH
58894: LD_VAR 0 3
58898: ARRAY
58899: PUSH
58900: FOR_IN
58901: IFFALSE 59054
// begin if not b [ j ] then
58903: LD_VAR 0 6
58907: PUSH
58908: LD_VAR 0 3
58912: ARRAY
58913: NOT
58914: IFFALSE 58918
// break ;
58916: GO 59054
// e := 0 ;
58918: LD_ADDR_VAR 0 7
58922: PUSH
58923: LD_INT 0
58925: ST_TO_ADDR
// for k in b [ j ] do
58926: LD_ADDR_VAR 0 8
58930: PUSH
58931: LD_VAR 0 6
58935: PUSH
58936: LD_VAR 0 3
58940: ARRAY
58941: PUSH
58942: FOR_IN
58943: IFFALSE 58970
// if IsNotFull ( k ) then
58945: LD_VAR 0 8
58949: PPUSH
58950: CALL 15685 0 1
58954: IFFALSE 58968
// begin e := k ;
58956: LD_ADDR_VAR 0 7
58960: PUSH
58961: LD_VAR 0 8
58965: ST_TO_ADDR
// break ;
58966: GO 58970
// end ;
58968: GO 58942
58970: POP
58971: POP
// if e and not UnitGoingToBuilding ( p , e ) then
58972: LD_VAR 0 7
58976: PUSH
58977: LD_VAR 0 5
58981: PPUSH
58982: LD_VAR 0 7
58986: PPUSH
58987: CALL 52830 0 2
58991: NOT
58992: AND
58993: IFFALSE 59052
// begin if IsInUnit ( p ) then
58995: LD_VAR 0 5
58999: PPUSH
59000: CALL_OW 310
59004: IFFALSE 59015
// ComExitBuilding ( p ) ;
59006: LD_VAR 0 5
59010: PPUSH
59011: CALL_OW 122
// ComEnterUnit ( p , e ) ;
59015: LD_VAR 0 5
59019: PPUSH
59020: LD_VAR 0 7
59024: PPUSH
59025: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
59029: LD_VAR 0 5
59033: PPUSH
59034: LD_VAR 0 3
59038: PPUSH
59039: CALL_OW 183
// AddComExitBuilding ( p ) ;
59043: LD_VAR 0 5
59047: PPUSH
59048: CALL_OW 182
// end ; end ;
59052: GO 58900
59054: POP
59055: POP
// end ;
59056: GO 58866
59058: POP
59059: POP
// end ;
59060: GO 58621
59062: POP
59063: POP
// end ;
59064: LD_VAR 0 1
59068: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
59069: LD_INT 0
59071: PPUSH
59072: PPUSH
59073: PPUSH
59074: PPUSH
59075: PPUSH
59076: PPUSH
59077: PPUSH
59078: PPUSH
59079: PPUSH
59080: PPUSH
59081: PPUSH
59082: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
59083: LD_VAR 0 1
59087: NOT
59088: PUSH
59089: LD_EXP 52
59093: PUSH
59094: LD_VAR 0 1
59098: ARRAY
59099: NOT
59100: OR
59101: PUSH
59102: LD_EXP 52
59106: PUSH
59107: LD_VAR 0 1
59111: ARRAY
59112: PPUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 30
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 30
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: PPUSH
59141: CALL_OW 72
59145: NOT
59146: OR
59147: IFFALSE 59151
// exit ;
59149: GO 62654
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59151: LD_ADDR_VAR 0 4
59155: PUSH
59156: LD_EXP 52
59160: PUSH
59161: LD_VAR 0 1
59165: ARRAY
59166: PPUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 25
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 25
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 25
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 25
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 25
59212: PUSH
59213: LD_INT 5
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 25
59222: PUSH
59223: LD_INT 8
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 25
59232: PUSH
59233: LD_INT 9
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: PPUSH
59250: CALL_OW 72
59254: ST_TO_ADDR
// if not tmp then
59255: LD_VAR 0 4
59259: NOT
59260: IFFALSE 59264
// exit ;
59262: GO 62654
// for i in tmp do
59264: LD_ADDR_VAR 0 3
59268: PUSH
59269: LD_VAR 0 4
59273: PUSH
59274: FOR_IN
59275: IFFALSE 59306
// if GetTag ( i ) then
59277: LD_VAR 0 3
59281: PPUSH
59282: CALL_OW 110
59286: IFFALSE 59304
// tmp := tmp diff i ;
59288: LD_ADDR_VAR 0 4
59292: PUSH
59293: LD_VAR 0 4
59297: PUSH
59298: LD_VAR 0 3
59302: DIFF
59303: ST_TO_ADDR
59304: GO 59274
59306: POP
59307: POP
// if not tmp then
59308: LD_VAR 0 4
59312: NOT
59313: IFFALSE 59317
// exit ;
59315: GO 62654
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59317: LD_ADDR_VAR 0 5
59321: PUSH
59322: LD_EXP 52
59326: PUSH
59327: LD_VAR 0 1
59331: ARRAY
59332: PPUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 25
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 25
59348: PUSH
59349: LD_INT 5
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 25
59358: PUSH
59359: LD_INT 8
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 25
59368: PUSH
59369: LD_INT 9
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: PPUSH
59383: CALL_OW 72
59387: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
59388: LD_ADDR_VAR 0 6
59392: PUSH
59393: LD_EXP 52
59397: PUSH
59398: LD_VAR 0 1
59402: ARRAY
59403: PPUSH
59404: LD_INT 25
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PPUSH
59414: CALL_OW 72
59418: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
59419: LD_ADDR_VAR 0 7
59423: PUSH
59424: LD_EXP 52
59428: PUSH
59429: LD_VAR 0 1
59433: ARRAY
59434: PPUSH
59435: LD_INT 25
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PPUSH
59445: CALL_OW 72
59449: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
59450: LD_ADDR_VAR 0 8
59454: PUSH
59455: LD_EXP 52
59459: PUSH
59460: LD_VAR 0 1
59464: ARRAY
59465: PPUSH
59466: LD_INT 25
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 24
59478: PUSH
59479: LD_INT 251
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PPUSH
59490: CALL_OW 72
59494: ST_TO_ADDR
// if mc_scan [ base ] then
59495: LD_EXP 75
59499: PUSH
59500: LD_VAR 0 1
59504: ARRAY
59505: IFFALSE 59966
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
59507: LD_ADDR_EXP 94
59511: PUSH
59512: LD_EXP 94
59516: PPUSH
59517: LD_VAR 0 1
59521: PPUSH
59522: LD_INT 4
59524: PPUSH
59525: CALL_OW 1
59529: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59530: LD_ADDR_VAR 0 12
59534: PUSH
59535: LD_EXP 52
59539: PUSH
59540: LD_VAR 0 1
59544: ARRAY
59545: PPUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 30
59551: PUSH
59552: LD_INT 4
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 30
59561: PUSH
59562: LD_INT 5
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: PPUSH
59574: CALL_OW 72
59578: ST_TO_ADDR
// if not b then
59579: LD_VAR 0 12
59583: NOT
59584: IFFALSE 59588
// exit ;
59586: GO 62654
// p := [ ] ;
59588: LD_ADDR_VAR 0 11
59592: PUSH
59593: EMPTY
59594: ST_TO_ADDR
// if sci >= 2 then
59595: LD_VAR 0 8
59599: PUSH
59600: LD_INT 2
59602: GREATEREQUAL
59603: IFFALSE 59634
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
59605: LD_ADDR_VAR 0 8
59609: PUSH
59610: LD_VAR 0 8
59614: PUSH
59615: LD_INT 1
59617: ARRAY
59618: PUSH
59619: LD_VAR 0 8
59623: PUSH
59624: LD_INT 2
59626: ARRAY
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: ST_TO_ADDR
59632: GO 59695
// if sci = 1 then
59634: LD_VAR 0 8
59638: PUSH
59639: LD_INT 1
59641: EQUAL
59642: IFFALSE 59663
// sci := [ sci [ 1 ] ] else
59644: LD_ADDR_VAR 0 8
59648: PUSH
59649: LD_VAR 0 8
59653: PUSH
59654: LD_INT 1
59656: ARRAY
59657: PUSH
59658: EMPTY
59659: LIST
59660: ST_TO_ADDR
59661: GO 59695
// if sci = 0 then
59663: LD_VAR 0 8
59667: PUSH
59668: LD_INT 0
59670: EQUAL
59671: IFFALSE 59695
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
59673: LD_ADDR_VAR 0 11
59677: PUSH
59678: LD_VAR 0 4
59682: PPUSH
59683: LD_INT 4
59685: PPUSH
59686: CALL 52693 0 2
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: ST_TO_ADDR
// if eng > 4 then
59695: LD_VAR 0 6
59699: PUSH
59700: LD_INT 4
59702: GREATER
59703: IFFALSE 59749
// for i = eng downto 4 do
59705: LD_ADDR_VAR 0 3
59709: PUSH
59710: DOUBLE
59711: LD_VAR 0 6
59715: INC
59716: ST_TO_ADDR
59717: LD_INT 4
59719: PUSH
59720: FOR_DOWNTO
59721: IFFALSE 59747
// eng := eng diff eng [ i ] ;
59723: LD_ADDR_VAR 0 6
59727: PUSH
59728: LD_VAR 0 6
59732: PUSH
59733: LD_VAR 0 6
59737: PUSH
59738: LD_VAR 0 3
59742: ARRAY
59743: DIFF
59744: ST_TO_ADDR
59745: GO 59720
59747: POP
59748: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
59749: LD_ADDR_VAR 0 4
59753: PUSH
59754: LD_VAR 0 4
59758: PUSH
59759: LD_VAR 0 5
59763: PUSH
59764: LD_VAR 0 6
59768: UNION
59769: PUSH
59770: LD_VAR 0 7
59774: UNION
59775: PUSH
59776: LD_VAR 0 8
59780: UNION
59781: DIFF
59782: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
59783: LD_ADDR_VAR 0 13
59787: PUSH
59788: LD_EXP 52
59792: PUSH
59793: LD_VAR 0 1
59797: ARRAY
59798: PPUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 30
59804: PUSH
59805: LD_INT 32
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 30
59814: PUSH
59815: LD_INT 31
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: PPUSH
59827: CALL_OW 72
59831: PUSH
59832: LD_EXP 52
59836: PUSH
59837: LD_VAR 0 1
59841: ARRAY
59842: PPUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 30
59848: PUSH
59849: LD_INT 4
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 30
59858: PUSH
59859: LD_INT 5
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: PPUSH
59871: CALL_OW 72
59875: PUSH
59876: LD_INT 6
59878: MUL
59879: PLUS
59880: ST_TO_ADDR
// if bcount < tmp then
59881: LD_VAR 0 13
59885: PUSH
59886: LD_VAR 0 4
59890: LESS
59891: IFFALSE 59937
// for i = tmp downto bcount do
59893: LD_ADDR_VAR 0 3
59897: PUSH
59898: DOUBLE
59899: LD_VAR 0 4
59903: INC
59904: ST_TO_ADDR
59905: LD_VAR 0 13
59909: PUSH
59910: FOR_DOWNTO
59911: IFFALSE 59935
// tmp := Delete ( tmp , tmp ) ;
59913: LD_ADDR_VAR 0 4
59917: PUSH
59918: LD_VAR 0 4
59922: PPUSH
59923: LD_VAR 0 4
59927: PPUSH
59928: CALL_OW 3
59932: ST_TO_ADDR
59933: GO 59910
59935: POP
59936: POP
// result := [ tmp , 0 , 0 , p ] ;
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_VAR 0 4
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_VAR 0 11
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// exit ;
59964: GO 62654
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59966: LD_EXP 52
59970: PUSH
59971: LD_VAR 0 1
59975: ARRAY
59976: PPUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 30
59982: PUSH
59983: LD_INT 6
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 30
59992: PUSH
59993: LD_INT 7
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 30
60002: PUSH
60003: LD_INT 8
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: PPUSH
60016: CALL_OW 72
60020: NOT
60021: PUSH
60022: LD_EXP 52
60026: PUSH
60027: LD_VAR 0 1
60031: ARRAY
60032: PPUSH
60033: LD_INT 30
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PPUSH
60043: CALL_OW 72
60047: NOT
60048: AND
60049: IFFALSE 60121
// begin if eng = tmp then
60051: LD_VAR 0 6
60055: PUSH
60056: LD_VAR 0 4
60060: EQUAL
60061: IFFALSE 60065
// exit ;
60063: GO 62654
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
60065: LD_ADDR_EXP 94
60069: PUSH
60070: LD_EXP 94
60074: PPUSH
60075: LD_VAR 0 1
60079: PPUSH
60080: LD_INT 1
60082: PPUSH
60083: CALL_OW 1
60087: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
60088: LD_ADDR_VAR 0 2
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_VAR 0 4
60100: PUSH
60101: LD_VAR 0 6
60105: DIFF
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: ST_TO_ADDR
// exit ;
60119: GO 62654
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60121: LD_EXP 79
60125: PUSH
60126: LD_EXP 78
60130: PUSH
60131: LD_VAR 0 1
60135: ARRAY
60136: ARRAY
60137: PUSH
60138: LD_EXP 52
60142: PUSH
60143: LD_VAR 0 1
60147: ARRAY
60148: PPUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 30
60154: PUSH
60155: LD_INT 6
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 30
60164: PUSH
60165: LD_INT 7
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 30
60174: PUSH
60175: LD_INT 8
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: PPUSH
60188: CALL_OW 72
60192: AND
60193: PUSH
60194: LD_EXP 52
60198: PUSH
60199: LD_VAR 0 1
60203: ARRAY
60204: PPUSH
60205: LD_INT 30
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PPUSH
60215: CALL_OW 72
60219: NOT
60220: AND
60221: IFFALSE 60435
// begin if sci >= 6 then
60223: LD_VAR 0 8
60227: PUSH
60228: LD_INT 6
60230: GREATEREQUAL
60231: IFFALSE 60235
// exit ;
60233: GO 62654
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
60235: LD_ADDR_EXP 94
60239: PUSH
60240: LD_EXP 94
60244: PPUSH
60245: LD_VAR 0 1
60249: PPUSH
60250: LD_INT 2
60252: PPUSH
60253: CALL_OW 1
60257: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
60258: LD_ADDR_VAR 0 9
60262: PUSH
60263: LD_VAR 0 4
60267: PUSH
60268: LD_VAR 0 8
60272: DIFF
60273: PPUSH
60274: LD_INT 4
60276: PPUSH
60277: CALL 52693 0 2
60281: ST_TO_ADDR
// p := [ ] ;
60282: LD_ADDR_VAR 0 11
60286: PUSH
60287: EMPTY
60288: ST_TO_ADDR
// if sci < 6 and sort > 6 then
60289: LD_VAR 0 8
60293: PUSH
60294: LD_INT 6
60296: LESS
60297: PUSH
60298: LD_VAR 0 9
60302: PUSH
60303: LD_INT 6
60305: GREATER
60306: AND
60307: IFFALSE 60388
// begin for i = 1 to 6 - sci do
60309: LD_ADDR_VAR 0 3
60313: PUSH
60314: DOUBLE
60315: LD_INT 1
60317: DEC
60318: ST_TO_ADDR
60319: LD_INT 6
60321: PUSH
60322: LD_VAR 0 8
60326: MINUS
60327: PUSH
60328: FOR_TO
60329: IFFALSE 60384
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
60331: LD_ADDR_VAR 0 11
60335: PUSH
60336: LD_VAR 0 11
60340: PPUSH
60341: LD_VAR 0 11
60345: PUSH
60346: LD_INT 1
60348: PLUS
60349: PPUSH
60350: LD_VAR 0 9
60354: PUSH
60355: LD_INT 1
60357: ARRAY
60358: PPUSH
60359: CALL_OW 2
60363: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
60364: LD_ADDR_VAR 0 9
60368: PUSH
60369: LD_VAR 0 9
60373: PPUSH
60374: LD_INT 1
60376: PPUSH
60377: CALL_OW 3
60381: ST_TO_ADDR
// end ;
60382: GO 60328
60384: POP
60385: POP
// end else
60386: GO 60408
// if sort then
60388: LD_VAR 0 9
60392: IFFALSE 60408
// p := sort [ 1 ] ;
60394: LD_ADDR_VAR 0 11
60398: PUSH
60399: LD_VAR 0 9
60403: PUSH
60404: LD_INT 1
60406: ARRAY
60407: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
60408: LD_ADDR_VAR 0 2
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_VAR 0 11
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// exit ;
60433: GO 62654
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60435: LD_EXP 79
60439: PUSH
60440: LD_EXP 78
60444: PUSH
60445: LD_VAR 0 1
60449: ARRAY
60450: ARRAY
60451: PUSH
60452: LD_EXP 52
60456: PUSH
60457: LD_VAR 0 1
60461: ARRAY
60462: PPUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 30
60468: PUSH
60469: LD_INT 6
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 30
60478: PUSH
60479: LD_INT 7
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 30
60488: PUSH
60489: LD_INT 8
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: PPUSH
60502: CALL_OW 72
60506: AND
60507: PUSH
60508: LD_EXP 52
60512: PUSH
60513: LD_VAR 0 1
60517: ARRAY
60518: PPUSH
60519: LD_INT 30
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PPUSH
60529: CALL_OW 72
60533: AND
60534: IFFALSE 61268
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
60536: LD_ADDR_EXP 94
60540: PUSH
60541: LD_EXP 94
60545: PPUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: LD_INT 3
60553: PPUSH
60554: CALL_OW 1
60558: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60559: LD_ADDR_VAR 0 2
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: ST_TO_ADDR
// if not eng then
60582: LD_VAR 0 6
60586: NOT
60587: IFFALSE 60650
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
60589: LD_ADDR_VAR 0 11
60593: PUSH
60594: LD_VAR 0 4
60598: PPUSH
60599: LD_INT 2
60601: PPUSH
60602: CALL 52693 0 2
60606: PUSH
60607: LD_INT 1
60609: ARRAY
60610: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
60611: LD_ADDR_VAR 0 2
60615: PUSH
60616: LD_VAR 0 2
60620: PPUSH
60621: LD_INT 2
60623: PPUSH
60624: LD_VAR 0 11
60628: PPUSH
60629: CALL_OW 1
60633: ST_TO_ADDR
// tmp := tmp diff p ;
60634: LD_ADDR_VAR 0 4
60638: PUSH
60639: LD_VAR 0 4
60643: PUSH
60644: LD_VAR 0 11
60648: DIFF
60649: ST_TO_ADDR
// end ; if tmp and sci < 6 then
60650: LD_VAR 0 4
60654: PUSH
60655: LD_VAR 0 8
60659: PUSH
60660: LD_INT 6
60662: LESS
60663: AND
60664: IFFALSE 60852
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
60666: LD_ADDR_VAR 0 9
60670: PUSH
60671: LD_VAR 0 4
60675: PUSH
60676: LD_VAR 0 8
60680: PUSH
60681: LD_VAR 0 7
60685: UNION
60686: DIFF
60687: PPUSH
60688: LD_INT 4
60690: PPUSH
60691: CALL 52693 0 2
60695: ST_TO_ADDR
// p := [ ] ;
60696: LD_ADDR_VAR 0 11
60700: PUSH
60701: EMPTY
60702: ST_TO_ADDR
// if sort then
60703: LD_VAR 0 9
60707: IFFALSE 60823
// for i = 1 to 6 - sci do
60709: LD_ADDR_VAR 0 3
60713: PUSH
60714: DOUBLE
60715: LD_INT 1
60717: DEC
60718: ST_TO_ADDR
60719: LD_INT 6
60721: PUSH
60722: LD_VAR 0 8
60726: MINUS
60727: PUSH
60728: FOR_TO
60729: IFFALSE 60821
// begin if i = sort then
60731: LD_VAR 0 3
60735: PUSH
60736: LD_VAR 0 9
60740: EQUAL
60741: IFFALSE 60745
// break ;
60743: GO 60821
// if GetClass ( i ) = 4 then
60745: LD_VAR 0 3
60749: PPUSH
60750: CALL_OW 257
60754: PUSH
60755: LD_INT 4
60757: EQUAL
60758: IFFALSE 60762
// continue ;
60760: GO 60728
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60762: LD_ADDR_VAR 0 11
60766: PUSH
60767: LD_VAR 0 11
60771: PPUSH
60772: LD_VAR 0 11
60776: PUSH
60777: LD_INT 1
60779: PLUS
60780: PPUSH
60781: LD_VAR 0 9
60785: PUSH
60786: LD_VAR 0 3
60790: ARRAY
60791: PPUSH
60792: CALL_OW 2
60796: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60797: LD_ADDR_VAR 0 4
60801: PUSH
60802: LD_VAR 0 4
60806: PUSH
60807: LD_VAR 0 9
60811: PUSH
60812: LD_VAR 0 3
60816: ARRAY
60817: DIFF
60818: ST_TO_ADDR
// end ;
60819: GO 60728
60821: POP
60822: POP
// if p then
60823: LD_VAR 0 11
60827: IFFALSE 60852
// result := Replace ( result , 4 , p ) ;
60829: LD_ADDR_VAR 0 2
60833: PUSH
60834: LD_VAR 0 2
60838: PPUSH
60839: LD_INT 4
60841: PPUSH
60842: LD_VAR 0 11
60846: PPUSH
60847: CALL_OW 1
60851: ST_TO_ADDR
// end ; if tmp and mech < 6 then
60852: LD_VAR 0 4
60856: PUSH
60857: LD_VAR 0 7
60861: PUSH
60862: LD_INT 6
60864: LESS
60865: AND
60866: IFFALSE 61054
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60868: LD_ADDR_VAR 0 9
60872: PUSH
60873: LD_VAR 0 4
60877: PUSH
60878: LD_VAR 0 8
60882: PUSH
60883: LD_VAR 0 7
60887: UNION
60888: DIFF
60889: PPUSH
60890: LD_INT 3
60892: PPUSH
60893: CALL 52693 0 2
60897: ST_TO_ADDR
// p := [ ] ;
60898: LD_ADDR_VAR 0 11
60902: PUSH
60903: EMPTY
60904: ST_TO_ADDR
// if sort then
60905: LD_VAR 0 9
60909: IFFALSE 61025
// for i = 1 to 6 - mech do
60911: LD_ADDR_VAR 0 3
60915: PUSH
60916: DOUBLE
60917: LD_INT 1
60919: DEC
60920: ST_TO_ADDR
60921: LD_INT 6
60923: PUSH
60924: LD_VAR 0 7
60928: MINUS
60929: PUSH
60930: FOR_TO
60931: IFFALSE 61023
// begin if i = sort then
60933: LD_VAR 0 3
60937: PUSH
60938: LD_VAR 0 9
60942: EQUAL
60943: IFFALSE 60947
// break ;
60945: GO 61023
// if GetClass ( i ) = 3 then
60947: LD_VAR 0 3
60951: PPUSH
60952: CALL_OW 257
60956: PUSH
60957: LD_INT 3
60959: EQUAL
60960: IFFALSE 60964
// continue ;
60962: GO 60930
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60964: LD_ADDR_VAR 0 11
60968: PUSH
60969: LD_VAR 0 11
60973: PPUSH
60974: LD_VAR 0 11
60978: PUSH
60979: LD_INT 1
60981: PLUS
60982: PPUSH
60983: LD_VAR 0 9
60987: PUSH
60988: LD_VAR 0 3
60992: ARRAY
60993: PPUSH
60994: CALL_OW 2
60998: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60999: LD_ADDR_VAR 0 4
61003: PUSH
61004: LD_VAR 0 4
61008: PUSH
61009: LD_VAR 0 9
61013: PUSH
61014: LD_VAR 0 3
61018: ARRAY
61019: DIFF
61020: ST_TO_ADDR
// end ;
61021: GO 60930
61023: POP
61024: POP
// if p then
61025: LD_VAR 0 11
61029: IFFALSE 61054
// result := Replace ( result , 3 , p ) ;
61031: LD_ADDR_VAR 0 2
61035: PUSH
61036: LD_VAR 0 2
61040: PPUSH
61041: LD_INT 3
61043: PPUSH
61044: LD_VAR 0 11
61048: PPUSH
61049: CALL_OW 1
61053: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
61054: LD_VAR 0 4
61058: PUSH
61059: LD_INT 6
61061: GREATER
61062: PUSH
61063: LD_VAR 0 6
61067: PUSH
61068: LD_INT 6
61070: LESS
61071: AND
61072: IFFALSE 61266
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61074: LD_ADDR_VAR 0 9
61078: PUSH
61079: LD_VAR 0 4
61083: PUSH
61084: LD_VAR 0 8
61088: PUSH
61089: LD_VAR 0 7
61093: UNION
61094: PUSH
61095: LD_VAR 0 6
61099: UNION
61100: DIFF
61101: PPUSH
61102: LD_INT 2
61104: PPUSH
61105: CALL 52693 0 2
61109: ST_TO_ADDR
// p := [ ] ;
61110: LD_ADDR_VAR 0 11
61114: PUSH
61115: EMPTY
61116: ST_TO_ADDR
// if sort then
61117: LD_VAR 0 9
61121: IFFALSE 61237
// for i = 1 to 6 - eng do
61123: LD_ADDR_VAR 0 3
61127: PUSH
61128: DOUBLE
61129: LD_INT 1
61131: DEC
61132: ST_TO_ADDR
61133: LD_INT 6
61135: PUSH
61136: LD_VAR 0 6
61140: MINUS
61141: PUSH
61142: FOR_TO
61143: IFFALSE 61235
// begin if i = sort then
61145: LD_VAR 0 3
61149: PUSH
61150: LD_VAR 0 9
61154: EQUAL
61155: IFFALSE 61159
// break ;
61157: GO 61235
// if GetClass ( i ) = 2 then
61159: LD_VAR 0 3
61163: PPUSH
61164: CALL_OW 257
61168: PUSH
61169: LD_INT 2
61171: EQUAL
61172: IFFALSE 61176
// continue ;
61174: GO 61142
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61176: LD_ADDR_VAR 0 11
61180: PUSH
61181: LD_VAR 0 11
61185: PPUSH
61186: LD_VAR 0 11
61190: PUSH
61191: LD_INT 1
61193: PLUS
61194: PPUSH
61195: LD_VAR 0 9
61199: PUSH
61200: LD_VAR 0 3
61204: ARRAY
61205: PPUSH
61206: CALL_OW 2
61210: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61211: LD_ADDR_VAR 0 4
61215: PUSH
61216: LD_VAR 0 4
61220: PUSH
61221: LD_VAR 0 9
61225: PUSH
61226: LD_VAR 0 3
61230: ARRAY
61231: DIFF
61232: ST_TO_ADDR
// end ;
61233: GO 61142
61235: POP
61236: POP
// if p then
61237: LD_VAR 0 11
61241: IFFALSE 61266
// result := Replace ( result , 2 , p ) ;
61243: LD_ADDR_VAR 0 2
61247: PUSH
61248: LD_VAR 0 2
61252: PPUSH
61253: LD_INT 2
61255: PPUSH
61256: LD_VAR 0 11
61260: PPUSH
61261: CALL_OW 1
61265: ST_TO_ADDR
// end ; exit ;
61266: GO 62654
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
61268: LD_EXP 79
61272: PUSH
61273: LD_EXP 78
61277: PUSH
61278: LD_VAR 0 1
61282: ARRAY
61283: ARRAY
61284: NOT
61285: PUSH
61286: LD_EXP 52
61290: PUSH
61291: LD_VAR 0 1
61295: ARRAY
61296: PPUSH
61297: LD_INT 30
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PPUSH
61307: CALL_OW 72
61311: AND
61312: PUSH
61313: LD_EXP 57
61317: PUSH
61318: LD_VAR 0 1
61322: ARRAY
61323: AND
61324: IFFALSE 61932
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
61326: LD_ADDR_EXP 94
61330: PUSH
61331: LD_EXP 94
61335: PPUSH
61336: LD_VAR 0 1
61340: PPUSH
61341: LD_INT 5
61343: PPUSH
61344: CALL_OW 1
61348: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61349: LD_ADDR_VAR 0 2
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// if sci > 1 then
61372: LD_VAR 0 8
61376: PUSH
61377: LD_INT 1
61379: GREATER
61380: IFFALSE 61408
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
61382: LD_ADDR_VAR 0 4
61386: PUSH
61387: LD_VAR 0 4
61391: PUSH
61392: LD_VAR 0 8
61396: PUSH
61397: LD_VAR 0 8
61401: PUSH
61402: LD_INT 1
61404: ARRAY
61405: DIFF
61406: DIFF
61407: ST_TO_ADDR
// if tmp and not sci then
61408: LD_VAR 0 4
61412: PUSH
61413: LD_VAR 0 8
61417: NOT
61418: AND
61419: IFFALSE 61488
// begin sort := SortBySkill ( tmp , 4 ) ;
61421: LD_ADDR_VAR 0 9
61425: PUSH
61426: LD_VAR 0 4
61430: PPUSH
61431: LD_INT 4
61433: PPUSH
61434: CALL 52693 0 2
61438: ST_TO_ADDR
// if sort then
61439: LD_VAR 0 9
61443: IFFALSE 61459
// p := sort [ 1 ] ;
61445: LD_ADDR_VAR 0 11
61449: PUSH
61450: LD_VAR 0 9
61454: PUSH
61455: LD_INT 1
61457: ARRAY
61458: ST_TO_ADDR
// if p then
61459: LD_VAR 0 11
61463: IFFALSE 61488
// result := Replace ( result , 4 , p ) ;
61465: LD_ADDR_VAR 0 2
61469: PUSH
61470: LD_VAR 0 2
61474: PPUSH
61475: LD_INT 4
61477: PPUSH
61478: LD_VAR 0 11
61482: PPUSH
61483: CALL_OW 1
61487: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61488: LD_ADDR_VAR 0 4
61492: PUSH
61493: LD_VAR 0 4
61497: PUSH
61498: LD_VAR 0 7
61502: DIFF
61503: ST_TO_ADDR
// if tmp and mech < 6 then
61504: LD_VAR 0 4
61508: PUSH
61509: LD_VAR 0 7
61513: PUSH
61514: LD_INT 6
61516: LESS
61517: AND
61518: IFFALSE 61706
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
61520: LD_ADDR_VAR 0 9
61524: PUSH
61525: LD_VAR 0 4
61529: PUSH
61530: LD_VAR 0 8
61534: PUSH
61535: LD_VAR 0 7
61539: UNION
61540: DIFF
61541: PPUSH
61542: LD_INT 3
61544: PPUSH
61545: CALL 52693 0 2
61549: ST_TO_ADDR
// p := [ ] ;
61550: LD_ADDR_VAR 0 11
61554: PUSH
61555: EMPTY
61556: ST_TO_ADDR
// if sort then
61557: LD_VAR 0 9
61561: IFFALSE 61677
// for i = 1 to 6 - mech do
61563: LD_ADDR_VAR 0 3
61567: PUSH
61568: DOUBLE
61569: LD_INT 1
61571: DEC
61572: ST_TO_ADDR
61573: LD_INT 6
61575: PUSH
61576: LD_VAR 0 7
61580: MINUS
61581: PUSH
61582: FOR_TO
61583: IFFALSE 61675
// begin if i = sort then
61585: LD_VAR 0 3
61589: PUSH
61590: LD_VAR 0 9
61594: EQUAL
61595: IFFALSE 61599
// break ;
61597: GO 61675
// if GetClass ( i ) = 3 then
61599: LD_VAR 0 3
61603: PPUSH
61604: CALL_OW 257
61608: PUSH
61609: LD_INT 3
61611: EQUAL
61612: IFFALSE 61616
// continue ;
61614: GO 61582
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61616: LD_ADDR_VAR 0 11
61620: PUSH
61621: LD_VAR 0 11
61625: PPUSH
61626: LD_VAR 0 11
61630: PUSH
61631: LD_INT 1
61633: PLUS
61634: PPUSH
61635: LD_VAR 0 9
61639: PUSH
61640: LD_VAR 0 3
61644: ARRAY
61645: PPUSH
61646: CALL_OW 2
61650: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61651: LD_ADDR_VAR 0 4
61655: PUSH
61656: LD_VAR 0 4
61660: PUSH
61661: LD_VAR 0 9
61665: PUSH
61666: LD_VAR 0 3
61670: ARRAY
61671: DIFF
61672: ST_TO_ADDR
// end ;
61673: GO 61582
61675: POP
61676: POP
// if p then
61677: LD_VAR 0 11
61681: IFFALSE 61706
// result := Replace ( result , 3 , p ) ;
61683: LD_ADDR_VAR 0 2
61687: PUSH
61688: LD_VAR 0 2
61692: PPUSH
61693: LD_INT 3
61695: PPUSH
61696: LD_VAR 0 11
61700: PPUSH
61701: CALL_OW 1
61705: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61706: LD_ADDR_VAR 0 4
61710: PUSH
61711: LD_VAR 0 4
61715: PUSH
61716: LD_VAR 0 6
61720: DIFF
61721: ST_TO_ADDR
// if tmp and eng < 6 then
61722: LD_VAR 0 4
61726: PUSH
61727: LD_VAR 0 6
61731: PUSH
61732: LD_INT 6
61734: LESS
61735: AND
61736: IFFALSE 61930
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61738: LD_ADDR_VAR 0 9
61742: PUSH
61743: LD_VAR 0 4
61747: PUSH
61748: LD_VAR 0 8
61752: PUSH
61753: LD_VAR 0 7
61757: UNION
61758: PUSH
61759: LD_VAR 0 6
61763: UNION
61764: DIFF
61765: PPUSH
61766: LD_INT 2
61768: PPUSH
61769: CALL 52693 0 2
61773: ST_TO_ADDR
// p := [ ] ;
61774: LD_ADDR_VAR 0 11
61778: PUSH
61779: EMPTY
61780: ST_TO_ADDR
// if sort then
61781: LD_VAR 0 9
61785: IFFALSE 61901
// for i = 1 to 6 - eng do
61787: LD_ADDR_VAR 0 3
61791: PUSH
61792: DOUBLE
61793: LD_INT 1
61795: DEC
61796: ST_TO_ADDR
61797: LD_INT 6
61799: PUSH
61800: LD_VAR 0 6
61804: MINUS
61805: PUSH
61806: FOR_TO
61807: IFFALSE 61899
// begin if i = sort then
61809: LD_VAR 0 3
61813: PUSH
61814: LD_VAR 0 9
61818: EQUAL
61819: IFFALSE 61823
// break ;
61821: GO 61899
// if GetClass ( i ) = 2 then
61823: LD_VAR 0 3
61827: PPUSH
61828: CALL_OW 257
61832: PUSH
61833: LD_INT 2
61835: EQUAL
61836: IFFALSE 61840
// continue ;
61838: GO 61806
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61840: LD_ADDR_VAR 0 11
61844: PUSH
61845: LD_VAR 0 11
61849: PPUSH
61850: LD_VAR 0 11
61854: PUSH
61855: LD_INT 1
61857: PLUS
61858: PPUSH
61859: LD_VAR 0 9
61863: PUSH
61864: LD_VAR 0 3
61868: ARRAY
61869: PPUSH
61870: CALL_OW 2
61874: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61875: LD_ADDR_VAR 0 4
61879: PUSH
61880: LD_VAR 0 4
61884: PUSH
61885: LD_VAR 0 9
61889: PUSH
61890: LD_VAR 0 3
61894: ARRAY
61895: DIFF
61896: ST_TO_ADDR
// end ;
61897: GO 61806
61899: POP
61900: POP
// if p then
61901: LD_VAR 0 11
61905: IFFALSE 61930
// result := Replace ( result , 2 , p ) ;
61907: LD_ADDR_VAR 0 2
61911: PUSH
61912: LD_VAR 0 2
61916: PPUSH
61917: LD_INT 2
61919: PPUSH
61920: LD_VAR 0 11
61924: PPUSH
61925: CALL_OW 1
61929: ST_TO_ADDR
// end ; exit ;
61930: GO 62654
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
61932: LD_EXP 79
61936: PUSH
61937: LD_EXP 78
61941: PUSH
61942: LD_VAR 0 1
61946: ARRAY
61947: ARRAY
61948: NOT
61949: PUSH
61950: LD_EXP 52
61954: PUSH
61955: LD_VAR 0 1
61959: ARRAY
61960: PPUSH
61961: LD_INT 30
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PPUSH
61971: CALL_OW 72
61975: AND
61976: PUSH
61977: LD_EXP 57
61981: PUSH
61982: LD_VAR 0 1
61986: ARRAY
61987: NOT
61988: AND
61989: IFFALSE 62654
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
61991: LD_ADDR_EXP 94
61995: PUSH
61996: LD_EXP 94
62000: PPUSH
62001: LD_VAR 0 1
62005: PPUSH
62006: LD_INT 6
62008: PPUSH
62009: CALL_OW 1
62013: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62014: LD_ADDR_VAR 0 2
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// if sci >= 1 then
62037: LD_VAR 0 8
62041: PUSH
62042: LD_INT 1
62044: GREATEREQUAL
62045: IFFALSE 62067
// tmp := tmp diff sci [ 1 ] ;
62047: LD_ADDR_VAR 0 4
62051: PUSH
62052: LD_VAR 0 4
62056: PUSH
62057: LD_VAR 0 8
62061: PUSH
62062: LD_INT 1
62064: ARRAY
62065: DIFF
62066: ST_TO_ADDR
// if tmp and not sci then
62067: LD_VAR 0 4
62071: PUSH
62072: LD_VAR 0 8
62076: NOT
62077: AND
62078: IFFALSE 62147
// begin sort := SortBySkill ( tmp , 4 ) ;
62080: LD_ADDR_VAR 0 9
62084: PUSH
62085: LD_VAR 0 4
62089: PPUSH
62090: LD_INT 4
62092: PPUSH
62093: CALL 52693 0 2
62097: ST_TO_ADDR
// if sort then
62098: LD_VAR 0 9
62102: IFFALSE 62118
// p := sort [ 1 ] ;
62104: LD_ADDR_VAR 0 11
62108: PUSH
62109: LD_VAR 0 9
62113: PUSH
62114: LD_INT 1
62116: ARRAY
62117: ST_TO_ADDR
// if p then
62118: LD_VAR 0 11
62122: IFFALSE 62147
// result := Replace ( result , 4 , p ) ;
62124: LD_ADDR_VAR 0 2
62128: PUSH
62129: LD_VAR 0 2
62133: PPUSH
62134: LD_INT 4
62136: PPUSH
62137: LD_VAR 0 11
62141: PPUSH
62142: CALL_OW 1
62146: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62147: LD_ADDR_VAR 0 4
62151: PUSH
62152: LD_VAR 0 4
62156: PUSH
62157: LD_VAR 0 7
62161: DIFF
62162: ST_TO_ADDR
// if tmp and mech < 6 then
62163: LD_VAR 0 4
62167: PUSH
62168: LD_VAR 0 7
62172: PUSH
62173: LD_INT 6
62175: LESS
62176: AND
62177: IFFALSE 62359
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
62179: LD_ADDR_VAR 0 9
62183: PUSH
62184: LD_VAR 0 4
62188: PUSH
62189: LD_VAR 0 7
62193: DIFF
62194: PPUSH
62195: LD_INT 3
62197: PPUSH
62198: CALL 52693 0 2
62202: ST_TO_ADDR
// p := [ ] ;
62203: LD_ADDR_VAR 0 11
62207: PUSH
62208: EMPTY
62209: ST_TO_ADDR
// if sort then
62210: LD_VAR 0 9
62214: IFFALSE 62330
// for i = 1 to 6 - mech do
62216: LD_ADDR_VAR 0 3
62220: PUSH
62221: DOUBLE
62222: LD_INT 1
62224: DEC
62225: ST_TO_ADDR
62226: LD_INT 6
62228: PUSH
62229: LD_VAR 0 7
62233: MINUS
62234: PUSH
62235: FOR_TO
62236: IFFALSE 62328
// begin if i = sort then
62238: LD_VAR 0 3
62242: PUSH
62243: LD_VAR 0 9
62247: EQUAL
62248: IFFALSE 62252
// break ;
62250: GO 62328
// if GetClass ( i ) = 3 then
62252: LD_VAR 0 3
62256: PPUSH
62257: CALL_OW 257
62261: PUSH
62262: LD_INT 3
62264: EQUAL
62265: IFFALSE 62269
// continue ;
62267: GO 62235
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62269: LD_ADDR_VAR 0 11
62273: PUSH
62274: LD_VAR 0 11
62278: PPUSH
62279: LD_VAR 0 11
62283: PUSH
62284: LD_INT 1
62286: PLUS
62287: PPUSH
62288: LD_VAR 0 9
62292: PUSH
62293: LD_VAR 0 3
62297: ARRAY
62298: PPUSH
62299: CALL_OW 2
62303: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62304: LD_ADDR_VAR 0 4
62308: PUSH
62309: LD_VAR 0 4
62313: PUSH
62314: LD_VAR 0 9
62318: PUSH
62319: LD_VAR 0 3
62323: ARRAY
62324: DIFF
62325: ST_TO_ADDR
// end ;
62326: GO 62235
62328: POP
62329: POP
// if p then
62330: LD_VAR 0 11
62334: IFFALSE 62359
// result := Replace ( result , 3 , p ) ;
62336: LD_ADDR_VAR 0 2
62340: PUSH
62341: LD_VAR 0 2
62345: PPUSH
62346: LD_INT 3
62348: PPUSH
62349: LD_VAR 0 11
62353: PPUSH
62354: CALL_OW 1
62358: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
62359: LD_ADDR_VAR 0 4
62363: PUSH
62364: LD_VAR 0 4
62368: PUSH
62369: LD_VAR 0 6
62373: DIFF
62374: ST_TO_ADDR
// if tmp and eng < 4 then
62375: LD_VAR 0 4
62379: PUSH
62380: LD_VAR 0 6
62384: PUSH
62385: LD_INT 4
62387: LESS
62388: AND
62389: IFFALSE 62579
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
62391: LD_ADDR_VAR 0 9
62395: PUSH
62396: LD_VAR 0 4
62400: PUSH
62401: LD_VAR 0 7
62405: PUSH
62406: LD_VAR 0 6
62410: UNION
62411: DIFF
62412: PPUSH
62413: LD_INT 2
62415: PPUSH
62416: CALL 52693 0 2
62420: ST_TO_ADDR
// p := [ ] ;
62421: LD_ADDR_VAR 0 11
62425: PUSH
62426: EMPTY
62427: ST_TO_ADDR
// if sort then
62428: LD_VAR 0 9
62432: IFFALSE 62548
// for i = 1 to 4 - eng do
62434: LD_ADDR_VAR 0 3
62438: PUSH
62439: DOUBLE
62440: LD_INT 1
62442: DEC
62443: ST_TO_ADDR
62444: LD_INT 4
62446: PUSH
62447: LD_VAR 0 6
62451: MINUS
62452: PUSH
62453: FOR_TO
62454: IFFALSE 62546
// begin if i = sort then
62456: LD_VAR 0 3
62460: PUSH
62461: LD_VAR 0 9
62465: EQUAL
62466: IFFALSE 62470
// break ;
62468: GO 62546
// if GetClass ( i ) = 2 then
62470: LD_VAR 0 3
62474: PPUSH
62475: CALL_OW 257
62479: PUSH
62480: LD_INT 2
62482: EQUAL
62483: IFFALSE 62487
// continue ;
62485: GO 62453
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62487: LD_ADDR_VAR 0 11
62491: PUSH
62492: LD_VAR 0 11
62496: PPUSH
62497: LD_VAR 0 11
62501: PUSH
62502: LD_INT 1
62504: PLUS
62505: PPUSH
62506: LD_VAR 0 9
62510: PUSH
62511: LD_VAR 0 3
62515: ARRAY
62516: PPUSH
62517: CALL_OW 2
62521: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62522: LD_ADDR_VAR 0 4
62526: PUSH
62527: LD_VAR 0 4
62531: PUSH
62532: LD_VAR 0 9
62536: PUSH
62537: LD_VAR 0 3
62541: ARRAY
62542: DIFF
62543: ST_TO_ADDR
// end ;
62544: GO 62453
62546: POP
62547: POP
// if p then
62548: LD_VAR 0 11
62552: IFFALSE 62577
// result := Replace ( result , 2 , p ) ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_VAR 0 2
62563: PPUSH
62564: LD_INT 2
62566: PPUSH
62567: LD_VAR 0 11
62571: PPUSH
62572: CALL_OW 1
62576: ST_TO_ADDR
// end else
62577: GO 62623
// for i = eng downto 5 do
62579: LD_ADDR_VAR 0 3
62583: PUSH
62584: DOUBLE
62585: LD_VAR 0 6
62589: INC
62590: ST_TO_ADDR
62591: LD_INT 5
62593: PUSH
62594: FOR_DOWNTO
62595: IFFALSE 62621
// tmp := tmp union eng [ i ] ;
62597: LD_ADDR_VAR 0 4
62601: PUSH
62602: LD_VAR 0 4
62606: PUSH
62607: LD_VAR 0 6
62611: PUSH
62612: LD_VAR 0 3
62616: ARRAY
62617: UNION
62618: ST_TO_ADDR
62619: GO 62594
62621: POP
62622: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
62623: LD_ADDR_VAR 0 2
62627: PUSH
62628: LD_VAR 0 2
62632: PPUSH
62633: LD_INT 1
62635: PPUSH
62636: LD_VAR 0 4
62640: PUSH
62641: LD_VAR 0 5
62645: DIFF
62646: PPUSH
62647: CALL_OW 1
62651: ST_TO_ADDR
// exit ;
62652: GO 62654
// end ; end ;
62654: LD_VAR 0 2
62658: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
62659: LD_INT 0
62661: PPUSH
62662: PPUSH
62663: PPUSH
// if not mc_bases then
62664: LD_EXP 52
62668: NOT
62669: IFFALSE 62673
// exit ;
62671: GO 62779
// for i = 1 to mc_bases do
62673: LD_ADDR_VAR 0 2
62677: PUSH
62678: DOUBLE
62679: LD_INT 1
62681: DEC
62682: ST_TO_ADDR
62683: LD_EXP 52
62687: PUSH
62688: FOR_TO
62689: IFFALSE 62770
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
62691: LD_ADDR_VAR 0 3
62695: PUSH
62696: LD_EXP 52
62700: PUSH
62701: LD_VAR 0 2
62705: ARRAY
62706: PPUSH
62707: LD_INT 21
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: LD_INT 24
62722: PUSH
62723: LD_INT 1000
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PPUSH
62738: CALL_OW 72
62742: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
62743: LD_ADDR_EXP 53
62747: PUSH
62748: LD_EXP 53
62752: PPUSH
62753: LD_VAR 0 2
62757: PPUSH
62758: LD_VAR 0 3
62762: PPUSH
62763: CALL_OW 1
62767: ST_TO_ADDR
// end ;
62768: GO 62688
62770: POP
62771: POP
// RaiseSailEvent ( 101 ) ;
62772: LD_INT 101
62774: PPUSH
62775: CALL_OW 427
// end ;
62779: LD_VAR 0 1
62783: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
62784: LD_INT 0
62786: PPUSH
62787: PPUSH
62788: PPUSH
62789: PPUSH
62790: PPUSH
62791: PPUSH
62792: PPUSH
// if not mc_bases then
62793: LD_EXP 52
62797: NOT
62798: IFFALSE 62802
// exit ;
62800: GO 63375
// for i = 1 to mc_bases do
62802: LD_ADDR_VAR 0 2
62806: PUSH
62807: DOUBLE
62808: LD_INT 1
62810: DEC
62811: ST_TO_ADDR
62812: LD_EXP 52
62816: PUSH
62817: FOR_TO
62818: IFFALSE 63366
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
62820: LD_ADDR_VAR 0 5
62824: PUSH
62825: LD_EXP 52
62829: PUSH
62830: LD_VAR 0 2
62834: ARRAY
62835: PUSH
62836: LD_EXP 81
62840: PUSH
62841: LD_VAR 0 2
62845: ARRAY
62846: UNION
62847: PPUSH
62848: LD_INT 21
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 3
62863: PUSH
62864: LD_INT 54
62866: PUSH
62867: EMPTY
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: LD_INT 24
62879: PUSH
62880: LD_INT 800
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PPUSH
62900: CALL_OW 72
62904: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
62905: LD_ADDR_VAR 0 6
62909: PUSH
62910: LD_EXP 52
62914: PUSH
62915: LD_VAR 0 2
62919: ARRAY
62920: PPUSH
62921: LD_INT 21
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 54
62939: PUSH
62940: EMPTY
62941: LIST
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: LD_INT 24
62952: PUSH
62953: LD_INT 250
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PPUSH
62973: CALL_OW 72
62977: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
62978: LD_ADDR_VAR 0 7
62982: PUSH
62983: LD_VAR 0 5
62987: PUSH
62988: LD_VAR 0 6
62992: DIFF
62993: ST_TO_ADDR
// if not need_heal_1 then
62994: LD_VAR 0 6
62998: NOT
62999: IFFALSE 63032
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
63001: LD_ADDR_EXP 55
63005: PUSH
63006: LD_EXP 55
63010: PPUSH
63011: LD_VAR 0 2
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PPUSH
63023: EMPTY
63024: PPUSH
63025: CALL 18419 0 3
63029: ST_TO_ADDR
63030: GO 63102
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
63032: LD_ADDR_EXP 55
63036: PUSH
63037: LD_EXP 55
63041: PPUSH
63042: LD_VAR 0 2
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PPUSH
63054: LD_EXP 55
63058: PUSH
63059: LD_VAR 0 2
63063: ARRAY
63064: PUSH
63065: LD_INT 1
63067: ARRAY
63068: PPUSH
63069: LD_INT 3
63071: PUSH
63072: LD_INT 24
63074: PUSH
63075: LD_INT 1000
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PPUSH
63086: CALL_OW 72
63090: PUSH
63091: LD_VAR 0 6
63095: UNION
63096: PPUSH
63097: CALL 18419 0 3
63101: ST_TO_ADDR
// if not need_heal_2 then
63102: LD_VAR 0 7
63106: NOT
63107: IFFALSE 63140
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
63109: LD_ADDR_EXP 55
63113: PUSH
63114: LD_EXP 55
63118: PPUSH
63119: LD_VAR 0 2
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PPUSH
63131: EMPTY
63132: PPUSH
63133: CALL 18419 0 3
63137: ST_TO_ADDR
63138: GO 63172
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
63140: LD_ADDR_EXP 55
63144: PUSH
63145: LD_EXP 55
63149: PPUSH
63150: LD_VAR 0 2
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PPUSH
63162: LD_VAR 0 7
63166: PPUSH
63167: CALL 18419 0 3
63171: ST_TO_ADDR
// if need_heal_2 then
63172: LD_VAR 0 7
63176: IFFALSE 63348
// for j in need_heal_2 do
63178: LD_ADDR_VAR 0 3
63182: PUSH
63183: LD_VAR 0 7
63187: PUSH
63188: FOR_IN
63189: IFFALSE 63346
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
63191: LD_ADDR_VAR 0 5
63195: PUSH
63196: LD_EXP 52
63200: PUSH
63201: LD_VAR 0 2
63205: ARRAY
63206: PPUSH
63207: LD_INT 2
63209: PUSH
63210: LD_INT 30
63212: PUSH
63213: LD_INT 6
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 30
63222: PUSH
63223: LD_INT 7
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 30
63232: PUSH
63233: LD_INT 8
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 30
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 30
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 25
63262: PUSH
63263: LD_INT 4
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: PPUSH
63279: CALL_OW 72
63283: ST_TO_ADDR
// if tmp then
63284: LD_VAR 0 5
63288: IFFALSE 63344
// begin k := NearestUnitToUnit ( tmp , j ) ;
63290: LD_ADDR_VAR 0 4
63294: PUSH
63295: LD_VAR 0 5
63299: PPUSH
63300: LD_VAR 0 3
63304: PPUSH
63305: CALL_OW 74
63309: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
63310: LD_VAR 0 3
63314: PPUSH
63315: LD_VAR 0 4
63319: PPUSH
63320: CALL_OW 296
63324: PUSH
63325: LD_INT 7
63327: GREATER
63328: IFFALSE 63344
// ComMoveUnit ( j , k ) ;
63330: LD_VAR 0 3
63334: PPUSH
63335: LD_VAR 0 4
63339: PPUSH
63340: CALL_OW 112
// end ; end ;
63344: GO 63188
63346: POP
63347: POP
// if not need_heal_1 and not need_heal_2 then
63348: LD_VAR 0 6
63352: NOT
63353: PUSH
63354: LD_VAR 0 7
63358: NOT
63359: AND
63360: IFFALSE 63364
// continue ;
63362: GO 62817
// end ;
63364: GO 62817
63366: POP
63367: POP
// RaiseSailEvent ( 102 ) ;
63368: LD_INT 102
63370: PPUSH
63371: CALL_OW 427
// end ;
63375: LD_VAR 0 1
63379: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
63380: LD_INT 0
63382: PPUSH
63383: PPUSH
63384: PPUSH
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
// if not mc_bases then
63390: LD_EXP 52
63394: NOT
63395: IFFALSE 63399
// exit ;
63397: GO 64239
// for i = 1 to mc_bases do
63399: LD_ADDR_VAR 0 2
63403: PUSH
63404: DOUBLE
63405: LD_INT 1
63407: DEC
63408: ST_TO_ADDR
63409: LD_EXP 52
63413: PUSH
63414: FOR_TO
63415: IFFALSE 64237
// begin if not mc_building_need_repair [ i ] then
63417: LD_EXP 53
63421: PUSH
63422: LD_VAR 0 2
63426: ARRAY
63427: NOT
63428: IFFALSE 63602
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
63430: LD_ADDR_VAR 0 6
63434: PUSH
63435: LD_EXP 71
63439: PUSH
63440: LD_VAR 0 2
63444: ARRAY
63445: PPUSH
63446: LD_INT 3
63448: PUSH
63449: LD_INT 24
63451: PUSH
63452: LD_INT 1000
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: LD_INT 34
63468: PUSH
63469: LD_INT 13
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 34
63478: PUSH
63479: LD_INT 52
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PPUSH
63495: CALL_OW 72
63499: ST_TO_ADDR
// if cranes then
63500: LD_VAR 0 6
63504: IFFALSE 63566
// for j in cranes do
63506: LD_ADDR_VAR 0 3
63510: PUSH
63511: LD_VAR 0 6
63515: PUSH
63516: FOR_IN
63517: IFFALSE 63564
// if not IsInArea ( j , mc_parking [ i ] ) then
63519: LD_VAR 0 3
63523: PPUSH
63524: LD_EXP 76
63528: PUSH
63529: LD_VAR 0 2
63533: ARRAY
63534: PPUSH
63535: CALL_OW 308
63539: NOT
63540: IFFALSE 63562
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63542: LD_VAR 0 3
63546: PPUSH
63547: LD_EXP 76
63551: PUSH
63552: LD_VAR 0 2
63556: ARRAY
63557: PPUSH
63558: CALL_OW 113
63562: GO 63516
63564: POP
63565: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
63566: LD_ADDR_EXP 54
63570: PUSH
63571: LD_EXP 54
63575: PPUSH
63576: LD_VAR 0 2
63580: PPUSH
63581: EMPTY
63582: PPUSH
63583: CALL_OW 1
63587: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
63588: LD_VAR 0 2
63592: PPUSH
63593: LD_INT 101
63595: PPUSH
63596: CALL 58492 0 2
// continue ;
63600: GO 63414
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
63602: LD_ADDR_EXP 58
63606: PUSH
63607: LD_EXP 58
63611: PPUSH
63612: LD_VAR 0 2
63616: PPUSH
63617: EMPTY
63618: PPUSH
63619: CALL_OW 1
63623: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63624: LD_VAR 0 2
63628: PPUSH
63629: LD_INT 103
63631: PPUSH
63632: CALL 58492 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
63636: LD_ADDR_VAR 0 5
63640: PUSH
63641: LD_EXP 52
63645: PUSH
63646: LD_VAR 0 2
63650: ARRAY
63651: PUSH
63652: LD_EXP 81
63656: PUSH
63657: LD_VAR 0 2
63661: ARRAY
63662: UNION
63663: PPUSH
63664: LD_INT 2
63666: PUSH
63667: LD_INT 25
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 25
63679: PUSH
63680: LD_INT 16
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: PPUSH
63695: CALL_OW 72
63699: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
63700: LD_ADDR_VAR 0 6
63704: PUSH
63705: LD_EXP 71
63709: PUSH
63710: LD_VAR 0 2
63714: ARRAY
63715: PPUSH
63716: LD_INT 2
63718: PUSH
63719: LD_INT 34
63721: PUSH
63722: LD_INT 13
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 34
63731: PUSH
63732: LD_INT 52
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: PPUSH
63744: CALL_OW 72
63748: ST_TO_ADDR
// if cranes then
63749: LD_VAR 0 6
63753: IFFALSE 63889
// begin for j in cranes do
63755: LD_ADDR_VAR 0 3
63759: PUSH
63760: LD_VAR 0 6
63764: PUSH
63765: FOR_IN
63766: IFFALSE 63887
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
63768: LD_VAR 0 3
63772: PPUSH
63773: CALL_OW 256
63777: PUSH
63778: LD_INT 500
63780: GREATEREQUAL
63781: PUSH
63782: LD_VAR 0 3
63786: PPUSH
63787: CALL_OW 314
63791: NOT
63792: AND
63793: IFFALSE 63827
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
63795: LD_VAR 0 3
63799: PPUSH
63800: LD_EXP 53
63804: PUSH
63805: LD_VAR 0 2
63809: ARRAY
63810: PPUSH
63811: LD_VAR 0 3
63815: PPUSH
63816: CALL_OW 74
63820: PPUSH
63821: CALL_OW 130
63825: GO 63885
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
63827: LD_VAR 0 3
63831: PPUSH
63832: CALL_OW 256
63836: PUSH
63837: LD_INT 500
63839: LESS
63840: PUSH
63841: LD_VAR 0 3
63845: PPUSH
63846: LD_EXP 76
63850: PUSH
63851: LD_VAR 0 2
63855: ARRAY
63856: PPUSH
63857: CALL_OW 308
63861: NOT
63862: AND
63863: IFFALSE 63885
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63865: LD_VAR 0 3
63869: PPUSH
63870: LD_EXP 76
63874: PUSH
63875: LD_VAR 0 2
63879: ARRAY
63880: PPUSH
63881: CALL_OW 113
63885: GO 63765
63887: POP
63888: POP
// end ; if not tmp then
63889: LD_VAR 0 5
63893: NOT
63894: IFFALSE 63898
// continue ;
63896: GO 63414
// for j in tmp do
63898: LD_ADDR_VAR 0 3
63902: PUSH
63903: LD_VAR 0 5
63907: PUSH
63908: FOR_IN
63909: IFFALSE 64233
// begin if mc_need_heal [ i ] then
63911: LD_EXP 55
63915: PUSH
63916: LD_VAR 0 2
63920: ARRAY
63921: IFFALSE 63969
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
63923: LD_VAR 0 3
63927: PUSH
63928: LD_EXP 55
63932: PUSH
63933: LD_VAR 0 2
63937: ARRAY
63938: PUSH
63939: LD_INT 1
63941: ARRAY
63942: IN
63943: PUSH
63944: LD_VAR 0 3
63948: PUSH
63949: LD_EXP 55
63953: PUSH
63954: LD_VAR 0 2
63958: ARRAY
63959: PUSH
63960: LD_INT 2
63962: ARRAY
63963: IN
63964: OR
63965: IFFALSE 63969
// continue ;
63967: GO 63908
// if IsInUnit ( j ) then
63969: LD_VAR 0 3
63973: PPUSH
63974: CALL_OW 310
63978: IFFALSE 63989
// ComExitBuilding ( j ) ;
63980: LD_VAR 0 3
63984: PPUSH
63985: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
63989: LD_VAR 0 3
63993: PUSH
63994: LD_EXP 54
63998: PUSH
63999: LD_VAR 0 2
64003: ARRAY
64004: IN
64005: NOT
64006: IFFALSE 64064
// begin SetTag ( j , 101 ) ;
64008: LD_VAR 0 3
64012: PPUSH
64013: LD_INT 101
64015: PPUSH
64016: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
64020: LD_ADDR_EXP 54
64024: PUSH
64025: LD_EXP 54
64029: PPUSH
64030: LD_VAR 0 2
64034: PUSH
64035: LD_EXP 54
64039: PUSH
64040: LD_VAR 0 2
64044: ARRAY
64045: PUSH
64046: LD_INT 1
64048: PLUS
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PPUSH
64054: LD_VAR 0 3
64058: PPUSH
64059: CALL 18419 0 3
64063: ST_TO_ADDR
// end ; wait ( 1 ) ;
64064: LD_INT 1
64066: PPUSH
64067: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
64071: LD_ADDR_VAR 0 7
64075: PUSH
64076: LD_EXP 53
64080: PUSH
64081: LD_VAR 0 2
64085: ARRAY
64086: ST_TO_ADDR
// if mc_scan [ i ] then
64087: LD_EXP 75
64091: PUSH
64092: LD_VAR 0 2
64096: ARRAY
64097: IFFALSE 64166
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
64099: LD_ADDR_VAR 0 7
64103: PUSH
64104: LD_EXP 53
64108: PUSH
64109: LD_VAR 0 2
64113: ARRAY
64114: PPUSH
64115: LD_INT 3
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: LD_INT 30
64123: PUSH
64124: LD_INT 32
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 30
64133: PUSH
64134: LD_INT 33
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 30
64143: PUSH
64144: LD_INT 31
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PPUSH
64161: CALL_OW 72
64165: ST_TO_ADDR
// if not to_repair_tmp then
64166: LD_VAR 0 7
64170: NOT
64171: IFFALSE 64175
// continue ;
64173: GO 63908
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
64175: LD_ADDR_VAR 0 8
64179: PUSH
64180: LD_VAR 0 7
64184: PPUSH
64185: LD_VAR 0 3
64189: PPUSH
64190: CALL_OW 74
64194: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
64195: LD_VAR 0 8
64199: PPUSH
64200: LD_INT 14
64202: PPUSH
64203: CALL 21012 0 2
64207: PUSH
64208: LD_INT 4
64210: ARRAY
64211: PUSH
64212: LD_INT 5
64214: LESS
64215: IFFALSE 64231
// ComRepairBuilding ( j , to_repair ) ;
64217: LD_VAR 0 3
64221: PPUSH
64222: LD_VAR 0 8
64226: PPUSH
64227: CALL_OW 130
// end ;
64231: GO 63908
64233: POP
64234: POP
// end ;
64235: GO 63414
64237: POP
64238: POP
// end ;
64239: LD_VAR 0 1
64243: RET
// export function MC_Heal ; var i , j , tmp ; begin
64244: LD_INT 0
64246: PPUSH
64247: PPUSH
64248: PPUSH
64249: PPUSH
// if not mc_bases then
64250: LD_EXP 52
64254: NOT
64255: IFFALSE 64259
// exit ;
64257: GO 64661
// for i = 1 to mc_bases do
64259: LD_ADDR_VAR 0 2
64263: PUSH
64264: DOUBLE
64265: LD_INT 1
64267: DEC
64268: ST_TO_ADDR
64269: LD_EXP 52
64273: PUSH
64274: FOR_TO
64275: IFFALSE 64659
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
64277: LD_EXP 55
64281: PUSH
64282: LD_VAR 0 2
64286: ARRAY
64287: PUSH
64288: LD_INT 1
64290: ARRAY
64291: NOT
64292: PUSH
64293: LD_EXP 55
64297: PUSH
64298: LD_VAR 0 2
64302: ARRAY
64303: PUSH
64304: LD_INT 2
64306: ARRAY
64307: NOT
64308: AND
64309: IFFALSE 64347
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
64311: LD_ADDR_EXP 56
64315: PUSH
64316: LD_EXP 56
64320: PPUSH
64321: LD_VAR 0 2
64325: PPUSH
64326: EMPTY
64327: PPUSH
64328: CALL_OW 1
64332: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
64333: LD_VAR 0 2
64337: PPUSH
64338: LD_INT 102
64340: PPUSH
64341: CALL 58492 0 2
// continue ;
64345: GO 64274
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
64347: LD_ADDR_VAR 0 4
64351: PUSH
64352: LD_EXP 52
64356: PUSH
64357: LD_VAR 0 2
64361: ARRAY
64362: PPUSH
64363: LD_INT 25
64365: PUSH
64366: LD_INT 4
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PPUSH
64373: CALL_OW 72
64377: ST_TO_ADDR
// if not tmp then
64378: LD_VAR 0 4
64382: NOT
64383: IFFALSE 64387
// continue ;
64385: GO 64274
// if mc_taming [ i ] then
64387: LD_EXP 83
64391: PUSH
64392: LD_VAR 0 2
64396: ARRAY
64397: IFFALSE 64421
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64399: LD_ADDR_EXP 83
64403: PUSH
64404: LD_EXP 83
64408: PPUSH
64409: LD_VAR 0 2
64413: PPUSH
64414: EMPTY
64415: PPUSH
64416: CALL_OW 1
64420: ST_TO_ADDR
// for j in tmp do
64421: LD_ADDR_VAR 0 3
64425: PUSH
64426: LD_VAR 0 4
64430: PUSH
64431: FOR_IN
64432: IFFALSE 64655
// begin if IsInUnit ( j ) then
64434: LD_VAR 0 3
64438: PPUSH
64439: CALL_OW 310
64443: IFFALSE 64454
// ComExitBuilding ( j ) ;
64445: LD_VAR 0 3
64449: PPUSH
64450: CALL_OW 122
// if not j in mc_healers [ i ] then
64454: LD_VAR 0 3
64458: PUSH
64459: LD_EXP 56
64463: PUSH
64464: LD_VAR 0 2
64468: ARRAY
64469: IN
64470: NOT
64471: IFFALSE 64517
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
64473: LD_ADDR_EXP 56
64477: PUSH
64478: LD_EXP 56
64482: PPUSH
64483: LD_VAR 0 2
64487: PUSH
64488: LD_EXP 56
64492: PUSH
64493: LD_VAR 0 2
64497: ARRAY
64498: PUSH
64499: LD_INT 1
64501: PLUS
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PPUSH
64507: LD_VAR 0 3
64511: PPUSH
64512: CALL 18419 0 3
64516: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
64517: LD_VAR 0 3
64521: PPUSH
64522: CALL_OW 110
64526: PUSH
64527: LD_INT 102
64529: NONEQUAL
64530: IFFALSE 64544
// SetTag ( j , 102 ) ;
64532: LD_VAR 0 3
64536: PPUSH
64537: LD_INT 102
64539: PPUSH
64540: CALL_OW 109
// Wait ( 3 ) ;
64544: LD_INT 3
64546: PPUSH
64547: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
64551: LD_EXP 55
64555: PUSH
64556: LD_VAR 0 2
64560: ARRAY
64561: PUSH
64562: LD_INT 1
64564: ARRAY
64565: IFFALSE 64597
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
64567: LD_VAR 0 3
64571: PPUSH
64572: LD_EXP 55
64576: PUSH
64577: LD_VAR 0 2
64581: ARRAY
64582: PUSH
64583: LD_INT 1
64585: ARRAY
64586: PUSH
64587: LD_INT 1
64589: ARRAY
64590: PPUSH
64591: CALL_OW 128
64595: GO 64653
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
64597: LD_VAR 0 3
64601: PPUSH
64602: CALL_OW 314
64606: NOT
64607: PUSH
64608: LD_EXP 55
64612: PUSH
64613: LD_VAR 0 2
64617: ARRAY
64618: PUSH
64619: LD_INT 2
64621: ARRAY
64622: AND
64623: IFFALSE 64653
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
64625: LD_VAR 0 3
64629: PPUSH
64630: LD_EXP 55
64634: PUSH
64635: LD_VAR 0 2
64639: ARRAY
64640: PUSH
64641: LD_INT 2
64643: ARRAY
64644: PUSH
64645: LD_INT 1
64647: ARRAY
64648: PPUSH
64649: CALL_OW 128
// end ;
64653: GO 64431
64655: POP
64656: POP
// end ;
64657: GO 64274
64659: POP
64660: POP
// end ;
64661: LD_VAR 0 1
64665: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
64666: LD_INT 0
64668: PPUSH
64669: PPUSH
64670: PPUSH
64671: PPUSH
64672: PPUSH
// if not mc_bases then
64673: LD_EXP 52
64677: NOT
64678: IFFALSE 64682
// exit ;
64680: GO 65825
// for i = 1 to mc_bases do
64682: LD_ADDR_VAR 0 2
64686: PUSH
64687: DOUBLE
64688: LD_INT 1
64690: DEC
64691: ST_TO_ADDR
64692: LD_EXP 52
64696: PUSH
64697: FOR_TO
64698: IFFALSE 65823
// begin if mc_scan [ i ] then
64700: LD_EXP 75
64704: PUSH
64705: LD_VAR 0 2
64709: ARRAY
64710: IFFALSE 64714
// continue ;
64712: GO 64697
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
64714: LD_EXP 57
64718: PUSH
64719: LD_VAR 0 2
64723: ARRAY
64724: NOT
64725: PUSH
64726: LD_EXP 59
64730: PUSH
64731: LD_VAR 0 2
64735: ARRAY
64736: NOT
64737: AND
64738: PUSH
64739: LD_EXP 58
64743: PUSH
64744: LD_VAR 0 2
64748: ARRAY
64749: AND
64750: IFFALSE 64788
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
64752: LD_ADDR_EXP 58
64756: PUSH
64757: LD_EXP 58
64761: PPUSH
64762: LD_VAR 0 2
64766: PPUSH
64767: EMPTY
64768: PPUSH
64769: CALL_OW 1
64773: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64774: LD_VAR 0 2
64778: PPUSH
64779: LD_INT 103
64781: PPUSH
64782: CALL 58492 0 2
// continue ;
64786: GO 64697
// end ; if mc_construct_list [ i ] then
64788: LD_EXP 59
64792: PUSH
64793: LD_VAR 0 2
64797: ARRAY
64798: IFFALSE 65018
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64800: LD_ADDR_VAR 0 4
64804: PUSH
64805: LD_EXP 52
64809: PUSH
64810: LD_VAR 0 2
64814: ARRAY
64815: PPUSH
64816: LD_INT 25
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PPUSH
64826: CALL_OW 72
64830: PUSH
64831: LD_EXP 54
64835: PUSH
64836: LD_VAR 0 2
64840: ARRAY
64841: DIFF
64842: ST_TO_ADDR
// if not tmp then
64843: LD_VAR 0 4
64847: NOT
64848: IFFALSE 64852
// continue ;
64850: GO 64697
// for j in tmp do
64852: LD_ADDR_VAR 0 3
64856: PUSH
64857: LD_VAR 0 4
64861: PUSH
64862: FOR_IN
64863: IFFALSE 65014
// begin if not mc_builders [ i ] then
64865: LD_EXP 58
64869: PUSH
64870: LD_VAR 0 2
64874: ARRAY
64875: NOT
64876: IFFALSE 64934
// begin SetTag ( j , 103 ) ;
64878: LD_VAR 0 3
64882: PPUSH
64883: LD_INT 103
64885: PPUSH
64886: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64890: LD_ADDR_EXP 58
64894: PUSH
64895: LD_EXP 58
64899: PPUSH
64900: LD_VAR 0 2
64904: PUSH
64905: LD_EXP 58
64909: PUSH
64910: LD_VAR 0 2
64914: ARRAY
64915: PUSH
64916: LD_INT 1
64918: PLUS
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PPUSH
64924: LD_VAR 0 3
64928: PPUSH
64929: CALL 18419 0 3
64933: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64934: LD_VAR 0 3
64938: PPUSH
64939: CALL_OW 310
64943: IFFALSE 64954
// ComExitBuilding ( j ) ;
64945: LD_VAR 0 3
64949: PPUSH
64950: CALL_OW 122
// wait ( 3 ) ;
64954: LD_INT 3
64956: PPUSH
64957: CALL_OW 67
// if not mc_construct_list [ i ] then
64961: LD_EXP 59
64965: PUSH
64966: LD_VAR 0 2
64970: ARRAY
64971: NOT
64972: IFFALSE 64976
// break ;
64974: GO 65014
// if not HasTask ( j ) then
64976: LD_VAR 0 3
64980: PPUSH
64981: CALL_OW 314
64985: NOT
64986: IFFALSE 65012
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
64988: LD_VAR 0 3
64992: PPUSH
64993: LD_EXP 59
64997: PUSH
64998: LD_VAR 0 2
65002: ARRAY
65003: PUSH
65004: LD_INT 1
65006: ARRAY
65007: PPUSH
65008: CALL 21270 0 2
// end ;
65012: GO 64862
65014: POP
65015: POP
// end else
65016: GO 65821
// if mc_build_list [ i ] then
65018: LD_EXP 57
65022: PUSH
65023: LD_VAR 0 2
65027: ARRAY
65028: IFFALSE 65821
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: LD_EXP 52
65039: PUSH
65040: LD_VAR 0 2
65044: ARRAY
65045: PPUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 30
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 30
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: LIST
65073: PPUSH
65074: CALL_OW 72
65078: ST_TO_ADDR
// if depot then
65079: LD_VAR 0 5
65083: IFFALSE 65101
// depot := depot [ 1 ] else
65085: LD_ADDR_VAR 0 5
65089: PUSH
65090: LD_VAR 0 5
65094: PUSH
65095: LD_INT 1
65097: ARRAY
65098: ST_TO_ADDR
65099: GO 65109
// depot := 0 ;
65101: LD_ADDR_VAR 0 5
65105: PUSH
65106: LD_INT 0
65108: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
65109: LD_EXP 57
65113: PUSH
65114: LD_VAR 0 2
65118: ARRAY
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PUSH
65124: LD_INT 1
65126: ARRAY
65127: PPUSH
65128: CALL 21100 0 1
65132: PUSH
65133: LD_EXP 52
65137: PUSH
65138: LD_VAR 0 2
65142: ARRAY
65143: PPUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 30
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 30
65159: PUSH
65160: LD_INT 3
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: PPUSH
65172: CALL_OW 72
65176: NOT
65177: AND
65178: IFFALSE 65283
// begin for j = 1 to mc_build_list [ i ] do
65180: LD_ADDR_VAR 0 3
65184: PUSH
65185: DOUBLE
65186: LD_INT 1
65188: DEC
65189: ST_TO_ADDR
65190: LD_EXP 57
65194: PUSH
65195: LD_VAR 0 2
65199: ARRAY
65200: PUSH
65201: FOR_TO
65202: IFFALSE 65281
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
65204: LD_EXP 57
65208: PUSH
65209: LD_VAR 0 2
65213: ARRAY
65214: PUSH
65215: LD_VAR 0 3
65219: ARRAY
65220: PUSH
65221: LD_INT 1
65223: ARRAY
65224: PUSH
65225: LD_INT 2
65227: EQUAL
65228: IFFALSE 65279
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
65230: LD_ADDR_EXP 57
65234: PUSH
65235: LD_EXP 57
65239: PPUSH
65240: LD_VAR 0 2
65244: PPUSH
65245: LD_EXP 57
65249: PUSH
65250: LD_VAR 0 2
65254: ARRAY
65255: PPUSH
65256: LD_VAR 0 3
65260: PPUSH
65261: LD_INT 1
65263: PPUSH
65264: LD_INT 0
65266: PPUSH
65267: CALL 17837 0 4
65271: PPUSH
65272: CALL_OW 1
65276: ST_TO_ADDR
// break ;
65277: GO 65281
// end ;
65279: GO 65201
65281: POP
65282: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
65283: LD_EXP 57
65287: PUSH
65288: LD_VAR 0 2
65292: ARRAY
65293: PUSH
65294: LD_INT 1
65296: ARRAY
65297: PUSH
65298: LD_INT 1
65300: ARRAY
65301: PUSH
65302: LD_INT 0
65304: EQUAL
65305: PUSH
65306: LD_VAR 0 5
65310: PUSH
65311: LD_VAR 0 5
65315: PPUSH
65316: LD_EXP 57
65320: PUSH
65321: LD_VAR 0 2
65325: ARRAY
65326: PUSH
65327: LD_INT 1
65329: ARRAY
65330: PUSH
65331: LD_INT 1
65333: ARRAY
65334: PPUSH
65335: LD_EXP 57
65339: PUSH
65340: LD_VAR 0 2
65344: ARRAY
65345: PUSH
65346: LD_INT 1
65348: ARRAY
65349: PUSH
65350: LD_INT 2
65352: ARRAY
65353: PPUSH
65354: LD_EXP 57
65358: PUSH
65359: LD_VAR 0 2
65363: ARRAY
65364: PUSH
65365: LD_INT 1
65367: ARRAY
65368: PUSH
65369: LD_INT 3
65371: ARRAY
65372: PPUSH
65373: LD_EXP 57
65377: PUSH
65378: LD_VAR 0 2
65382: ARRAY
65383: PUSH
65384: LD_INT 1
65386: ARRAY
65387: PUSH
65388: LD_INT 4
65390: ARRAY
65391: PPUSH
65392: CALL 25834 0 5
65396: AND
65397: OR
65398: IFFALSE 65679
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65400: LD_ADDR_VAR 0 4
65404: PUSH
65405: LD_EXP 52
65409: PUSH
65410: LD_VAR 0 2
65414: ARRAY
65415: PPUSH
65416: LD_INT 25
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PPUSH
65426: CALL_OW 72
65430: PUSH
65431: LD_EXP 54
65435: PUSH
65436: LD_VAR 0 2
65440: ARRAY
65441: DIFF
65442: ST_TO_ADDR
// if not tmp then
65443: LD_VAR 0 4
65447: NOT
65448: IFFALSE 65452
// continue ;
65450: GO 64697
// for j in tmp do
65452: LD_ADDR_VAR 0 3
65456: PUSH
65457: LD_VAR 0 4
65461: PUSH
65462: FOR_IN
65463: IFFALSE 65675
// begin if not mc_builders [ i ] then
65465: LD_EXP 58
65469: PUSH
65470: LD_VAR 0 2
65474: ARRAY
65475: NOT
65476: IFFALSE 65534
// begin SetTag ( j , 103 ) ;
65478: LD_VAR 0 3
65482: PPUSH
65483: LD_INT 103
65485: PPUSH
65486: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65490: LD_ADDR_EXP 58
65494: PUSH
65495: LD_EXP 58
65499: PPUSH
65500: LD_VAR 0 2
65504: PUSH
65505: LD_EXP 58
65509: PUSH
65510: LD_VAR 0 2
65514: ARRAY
65515: PUSH
65516: LD_INT 1
65518: PLUS
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PPUSH
65524: LD_VAR 0 3
65528: PPUSH
65529: CALL 18419 0 3
65533: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65534: LD_VAR 0 3
65538: PPUSH
65539: CALL_OW 310
65543: IFFALSE 65554
// ComExitBuilding ( j ) ;
65545: LD_VAR 0 3
65549: PPUSH
65550: CALL_OW 122
// wait ( 3 ) ;
65554: LD_INT 3
65556: PPUSH
65557: CALL_OW 67
// if not mc_build_list [ i ] then
65561: LD_EXP 57
65565: PUSH
65566: LD_VAR 0 2
65570: ARRAY
65571: NOT
65572: IFFALSE 65576
// break ;
65574: GO 65675
// if not HasTask ( j ) then
65576: LD_VAR 0 3
65580: PPUSH
65581: CALL_OW 314
65585: NOT
65586: IFFALSE 65673
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65588: LD_VAR 0 3
65592: PPUSH
65593: LD_EXP 57
65597: PUSH
65598: LD_VAR 0 2
65602: ARRAY
65603: PUSH
65604: LD_INT 1
65606: ARRAY
65607: PUSH
65608: LD_INT 1
65610: ARRAY
65611: PPUSH
65612: LD_EXP 57
65616: PUSH
65617: LD_VAR 0 2
65621: ARRAY
65622: PUSH
65623: LD_INT 1
65625: ARRAY
65626: PUSH
65627: LD_INT 2
65629: ARRAY
65630: PPUSH
65631: LD_EXP 57
65635: PUSH
65636: LD_VAR 0 2
65640: ARRAY
65641: PUSH
65642: LD_INT 1
65644: ARRAY
65645: PUSH
65646: LD_INT 3
65648: ARRAY
65649: PPUSH
65650: LD_EXP 57
65654: PUSH
65655: LD_VAR 0 2
65659: ARRAY
65660: PUSH
65661: LD_INT 1
65663: ARRAY
65664: PUSH
65665: LD_INT 4
65667: ARRAY
65668: PPUSH
65669: CALL_OW 145
// end ;
65673: GO 65462
65675: POP
65676: POP
// end else
65677: GO 65821
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
65679: LD_EXP 52
65683: PUSH
65684: LD_VAR 0 2
65688: ARRAY
65689: PPUSH
65690: LD_EXP 57
65694: PUSH
65695: LD_VAR 0 2
65699: ARRAY
65700: PUSH
65701: LD_INT 1
65703: ARRAY
65704: PUSH
65705: LD_INT 1
65707: ARRAY
65708: PPUSH
65709: LD_EXP 57
65713: PUSH
65714: LD_VAR 0 2
65718: ARRAY
65719: PUSH
65720: LD_INT 1
65722: ARRAY
65723: PUSH
65724: LD_INT 2
65726: ARRAY
65727: PPUSH
65728: LD_EXP 57
65732: PUSH
65733: LD_VAR 0 2
65737: ARRAY
65738: PUSH
65739: LD_INT 1
65741: ARRAY
65742: PUSH
65743: LD_INT 3
65745: ARRAY
65746: PPUSH
65747: LD_EXP 57
65751: PUSH
65752: LD_VAR 0 2
65756: ARRAY
65757: PUSH
65758: LD_INT 1
65760: ARRAY
65761: PUSH
65762: LD_INT 4
65764: ARRAY
65765: PPUSH
65766: CALL 25170 0 5
65770: NOT
65771: IFFALSE 65821
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65773: LD_ADDR_EXP 57
65777: PUSH
65778: LD_EXP 57
65782: PPUSH
65783: LD_VAR 0 2
65787: PPUSH
65788: LD_EXP 57
65792: PUSH
65793: LD_VAR 0 2
65797: ARRAY
65798: PPUSH
65799: LD_INT 1
65801: PPUSH
65802: LD_INT 1
65804: NEG
65805: PPUSH
65806: LD_INT 0
65808: PPUSH
65809: CALL 17837 0 4
65813: PPUSH
65814: CALL_OW 1
65818: ST_TO_ADDR
// continue ;
65819: GO 64697
// end ; end ; end ;
65821: GO 64697
65823: POP
65824: POP
// end ;
65825: LD_VAR 0 1
65829: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65830: LD_INT 0
65832: PPUSH
65833: PPUSH
65834: PPUSH
65835: PPUSH
65836: PPUSH
65837: PPUSH
// if not mc_bases then
65838: LD_EXP 52
65842: NOT
65843: IFFALSE 65847
// exit ;
65845: GO 66274
// for i = 1 to mc_bases do
65847: LD_ADDR_VAR 0 2
65851: PUSH
65852: DOUBLE
65853: LD_INT 1
65855: DEC
65856: ST_TO_ADDR
65857: LD_EXP 52
65861: PUSH
65862: FOR_TO
65863: IFFALSE 66272
// begin tmp := mc_build_upgrade [ i ] ;
65865: LD_ADDR_VAR 0 4
65869: PUSH
65870: LD_EXP 84
65874: PUSH
65875: LD_VAR 0 2
65879: ARRAY
65880: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
65881: LD_ADDR_VAR 0 6
65885: PUSH
65886: LD_EXP 85
65890: PUSH
65891: LD_VAR 0 2
65895: ARRAY
65896: PPUSH
65897: LD_INT 2
65899: PUSH
65900: LD_INT 30
65902: PUSH
65903: LD_INT 6
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 30
65912: PUSH
65913: LD_INT 7
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: PPUSH
65925: CALL_OW 72
65929: ST_TO_ADDR
// if not tmp and not lab then
65930: LD_VAR 0 4
65934: NOT
65935: PUSH
65936: LD_VAR 0 6
65940: NOT
65941: AND
65942: IFFALSE 65946
// continue ;
65944: GO 65862
// if tmp then
65946: LD_VAR 0 4
65950: IFFALSE 66070
// for j in tmp do
65952: LD_ADDR_VAR 0 3
65956: PUSH
65957: LD_VAR 0 4
65961: PUSH
65962: FOR_IN
65963: IFFALSE 66068
// begin if UpgradeCost ( j ) then
65965: LD_VAR 0 3
65969: PPUSH
65970: CALL 24830 0 1
65974: IFFALSE 66066
// begin ComUpgrade ( j ) ;
65976: LD_VAR 0 3
65980: PPUSH
65981: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
65985: LD_ADDR_EXP 84
65989: PUSH
65990: LD_EXP 84
65994: PPUSH
65995: LD_VAR 0 2
65999: PPUSH
66000: LD_EXP 84
66004: PUSH
66005: LD_VAR 0 2
66009: ARRAY
66010: PUSH
66011: LD_VAR 0 3
66015: DIFF
66016: PPUSH
66017: CALL_OW 1
66021: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66022: LD_ADDR_EXP 59
66026: PUSH
66027: LD_EXP 59
66031: PPUSH
66032: LD_VAR 0 2
66036: PUSH
66037: LD_EXP 59
66041: PUSH
66042: LD_VAR 0 2
66046: ARRAY
66047: PUSH
66048: LD_INT 1
66050: PLUS
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PPUSH
66056: LD_VAR 0 3
66060: PPUSH
66061: CALL 18419 0 3
66065: ST_TO_ADDR
// end ; end ;
66066: GO 65962
66068: POP
66069: POP
// if not lab or not mc_lab_upgrade [ i ] then
66070: LD_VAR 0 6
66074: NOT
66075: PUSH
66076: LD_EXP 86
66080: PUSH
66081: LD_VAR 0 2
66085: ARRAY
66086: NOT
66087: OR
66088: IFFALSE 66092
// continue ;
66090: GO 65862
// for j in lab do
66092: LD_ADDR_VAR 0 3
66096: PUSH
66097: LD_VAR 0 6
66101: PUSH
66102: FOR_IN
66103: IFFALSE 66268
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
66105: LD_VAR 0 3
66109: PPUSH
66110: CALL_OW 266
66114: PUSH
66115: LD_INT 6
66117: PUSH
66118: LD_INT 7
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: IN
66125: PUSH
66126: LD_VAR 0 3
66130: PPUSH
66131: CALL_OW 461
66135: PUSH
66136: LD_INT 1
66138: NONEQUAL
66139: AND
66140: IFFALSE 66266
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
66142: LD_VAR 0 3
66146: PPUSH
66147: LD_EXP 86
66151: PUSH
66152: LD_VAR 0 2
66156: ARRAY
66157: PUSH
66158: LD_INT 1
66160: ARRAY
66161: PPUSH
66162: CALL 25035 0 2
66166: IFFALSE 66266
// begin ComCancel ( j ) ;
66168: LD_VAR 0 3
66172: PPUSH
66173: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
66177: LD_VAR 0 3
66181: PPUSH
66182: LD_EXP 86
66186: PUSH
66187: LD_VAR 0 2
66191: ARRAY
66192: PUSH
66193: LD_INT 1
66195: ARRAY
66196: PPUSH
66197: CALL_OW 207
// if not j in mc_construct_list [ i ] then
66201: LD_VAR 0 3
66205: PUSH
66206: LD_EXP 59
66210: PUSH
66211: LD_VAR 0 2
66215: ARRAY
66216: IN
66217: NOT
66218: IFFALSE 66264
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66220: LD_ADDR_EXP 59
66224: PUSH
66225: LD_EXP 59
66229: PPUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_EXP 59
66239: PUSH
66240: LD_VAR 0 2
66244: ARRAY
66245: PUSH
66246: LD_INT 1
66248: PLUS
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PPUSH
66254: LD_VAR 0 3
66258: PPUSH
66259: CALL 18419 0 3
66263: ST_TO_ADDR
// break ;
66264: GO 66268
// end ; end ; end ;
66266: GO 66102
66268: POP
66269: POP
// end ;
66270: GO 65862
66272: POP
66273: POP
// end ;
66274: LD_VAR 0 1
66278: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
66279: LD_INT 0
66281: PPUSH
66282: PPUSH
66283: PPUSH
66284: PPUSH
66285: PPUSH
66286: PPUSH
66287: PPUSH
66288: PPUSH
66289: PPUSH
// if not mc_bases then
66290: LD_EXP 52
66294: NOT
66295: IFFALSE 66299
// exit ;
66297: GO 66704
// for i = 1 to mc_bases do
66299: LD_ADDR_VAR 0 2
66303: PUSH
66304: DOUBLE
66305: LD_INT 1
66307: DEC
66308: ST_TO_ADDR
66309: LD_EXP 52
66313: PUSH
66314: FOR_TO
66315: IFFALSE 66702
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
66317: LD_EXP 60
66321: PUSH
66322: LD_VAR 0 2
66326: ARRAY
66327: NOT
66328: PUSH
66329: LD_EXP 52
66333: PUSH
66334: LD_VAR 0 2
66338: ARRAY
66339: PPUSH
66340: LD_INT 30
66342: PUSH
66343: LD_INT 3
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PPUSH
66350: CALL_OW 72
66354: NOT
66355: OR
66356: IFFALSE 66360
// continue ;
66358: GO 66314
// busy := false ;
66360: LD_ADDR_VAR 0 8
66364: PUSH
66365: LD_INT 0
66367: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66368: LD_ADDR_VAR 0 4
66372: PUSH
66373: LD_EXP 52
66377: PUSH
66378: LD_VAR 0 2
66382: ARRAY
66383: PPUSH
66384: LD_INT 30
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PPUSH
66394: CALL_OW 72
66398: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
66399: LD_ADDR_VAR 0 6
66403: PUSH
66404: LD_EXP 60
66408: PUSH
66409: LD_VAR 0 2
66413: ARRAY
66414: PPUSH
66415: LD_INT 2
66417: PUSH
66418: LD_INT 30
66420: PUSH
66421: LD_INT 32
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 30
66430: PUSH
66431: LD_INT 33
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: PPUSH
66443: CALL_OW 72
66447: ST_TO_ADDR
// if not t then
66448: LD_VAR 0 6
66452: NOT
66453: IFFALSE 66457
// continue ;
66455: GO 66314
// for j in tmp do
66457: LD_ADDR_VAR 0 3
66461: PUSH
66462: LD_VAR 0 4
66466: PUSH
66467: FOR_IN
66468: IFFALSE 66498
// if not BuildingStatus ( j ) = bs_idle then
66470: LD_VAR 0 3
66474: PPUSH
66475: CALL_OW 461
66479: PUSH
66480: LD_INT 2
66482: EQUAL
66483: NOT
66484: IFFALSE 66496
// begin busy := true ;
66486: LD_ADDR_VAR 0 8
66490: PUSH
66491: LD_INT 1
66493: ST_TO_ADDR
// break ;
66494: GO 66498
// end ;
66496: GO 66467
66498: POP
66499: POP
// if busy then
66500: LD_VAR 0 8
66504: IFFALSE 66508
// continue ;
66506: GO 66314
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
66508: LD_ADDR_VAR 0 7
66512: PUSH
66513: LD_VAR 0 6
66517: PPUSH
66518: LD_INT 35
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PPUSH
66528: CALL_OW 72
66532: ST_TO_ADDR
// if tw then
66533: LD_VAR 0 7
66537: IFFALSE 66614
// begin tw := tw [ 1 ] ;
66539: LD_ADDR_VAR 0 7
66543: PUSH
66544: LD_VAR 0 7
66548: PUSH
66549: LD_INT 1
66551: ARRAY
66552: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
66553: LD_ADDR_VAR 0 9
66557: PUSH
66558: LD_VAR 0 7
66562: PPUSH
66563: LD_EXP 77
66567: PUSH
66568: LD_VAR 0 2
66572: ARRAY
66573: PPUSH
66574: CALL 23389 0 2
66578: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
66579: LD_EXP 91
66583: PUSH
66584: LD_VAR 0 2
66588: ARRAY
66589: IFFALSE 66612
// if not weapon in mc_allowed_tower_weapons [ i ] then
66591: LD_VAR 0 9
66595: PUSH
66596: LD_EXP 91
66600: PUSH
66601: LD_VAR 0 2
66605: ARRAY
66606: IN
66607: NOT
66608: IFFALSE 66612
// continue ;
66610: GO 66314
// end else
66612: GO 66677
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
66614: LD_ADDR_VAR 0 5
66618: PUSH
66619: LD_EXP 60
66623: PUSH
66624: LD_VAR 0 2
66628: ARRAY
66629: PPUSH
66630: LD_VAR 0 4
66634: PPUSH
66635: CALL 53616 0 2
66639: ST_TO_ADDR
// if not tmp2 then
66640: LD_VAR 0 5
66644: NOT
66645: IFFALSE 66649
// continue ;
66647: GO 66314
// tw := tmp2 [ 1 ] ;
66649: LD_ADDR_VAR 0 7
66653: PUSH
66654: LD_VAR 0 5
66658: PUSH
66659: LD_INT 1
66661: ARRAY
66662: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
66663: LD_ADDR_VAR 0 9
66667: PUSH
66668: LD_VAR 0 5
66672: PUSH
66673: LD_INT 2
66675: ARRAY
66676: ST_TO_ADDR
// end ; if not weapon then
66677: LD_VAR 0 9
66681: NOT
66682: IFFALSE 66686
// continue ;
66684: GO 66314
// ComPlaceWeapon ( tw , weapon ) ;
66686: LD_VAR 0 7
66690: PPUSH
66691: LD_VAR 0 9
66695: PPUSH
66696: CALL_OW 148
// end ;
66700: GO 66314
66702: POP
66703: POP
// end ;
66704: LD_VAR 0 1
66708: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66709: LD_INT 0
66711: PPUSH
66712: PPUSH
66713: PPUSH
66714: PPUSH
66715: PPUSH
66716: PPUSH
// if not mc_bases then
66717: LD_EXP 52
66721: NOT
66722: IFFALSE 66726
// exit ;
66724: GO 67502
// for i = 1 to mc_bases do
66726: LD_ADDR_VAR 0 2
66730: PUSH
66731: DOUBLE
66732: LD_INT 1
66734: DEC
66735: ST_TO_ADDR
66736: LD_EXP 52
66740: PUSH
66741: FOR_TO
66742: IFFALSE 67500
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
66744: LD_EXP 65
66748: PUSH
66749: LD_VAR 0 2
66753: ARRAY
66754: NOT
66755: PUSH
66756: LD_EXP 65
66760: PUSH
66761: LD_VAR 0 2
66765: ARRAY
66766: PUSH
66767: LD_EXP 66
66771: PUSH
66772: LD_VAR 0 2
66776: ARRAY
66777: EQUAL
66778: OR
66779: PUSH
66780: LD_EXP 75
66784: PUSH
66785: LD_VAR 0 2
66789: ARRAY
66790: OR
66791: IFFALSE 66795
// continue ;
66793: GO 66741
// if mc_miners [ i ] then
66795: LD_EXP 66
66799: PUSH
66800: LD_VAR 0 2
66804: ARRAY
66805: IFFALSE 67187
// begin for j = mc_miners [ i ] downto 1 do
66807: LD_ADDR_VAR 0 3
66811: PUSH
66812: DOUBLE
66813: LD_EXP 66
66817: PUSH
66818: LD_VAR 0 2
66822: ARRAY
66823: INC
66824: ST_TO_ADDR
66825: LD_INT 1
66827: PUSH
66828: FOR_DOWNTO
66829: IFFALSE 67185
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
66831: LD_EXP 66
66835: PUSH
66836: LD_VAR 0 2
66840: ARRAY
66841: PUSH
66842: LD_VAR 0 3
66846: ARRAY
66847: PPUSH
66848: CALL_OW 301
66852: PUSH
66853: LD_EXP 66
66857: PUSH
66858: LD_VAR 0 2
66862: ARRAY
66863: PUSH
66864: LD_VAR 0 3
66868: ARRAY
66869: PPUSH
66870: CALL_OW 257
66874: PUSH
66875: LD_INT 1
66877: NONEQUAL
66878: OR
66879: IFFALSE 66942
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66881: LD_ADDR_VAR 0 5
66885: PUSH
66886: LD_EXP 66
66890: PUSH
66891: LD_VAR 0 2
66895: ARRAY
66896: PUSH
66897: LD_EXP 66
66901: PUSH
66902: LD_VAR 0 2
66906: ARRAY
66907: PUSH
66908: LD_VAR 0 3
66912: ARRAY
66913: DIFF
66914: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66915: LD_ADDR_EXP 66
66919: PUSH
66920: LD_EXP 66
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 5
66934: PPUSH
66935: CALL_OW 1
66939: ST_TO_ADDR
// continue ;
66940: GO 66828
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
66942: LD_EXP 66
66946: PUSH
66947: LD_VAR 0 2
66951: ARRAY
66952: PUSH
66953: LD_VAR 0 3
66957: ARRAY
66958: PPUSH
66959: CALL_OW 257
66963: PUSH
66964: LD_INT 1
66966: EQUAL
66967: PUSH
66968: LD_EXP 66
66972: PUSH
66973: LD_VAR 0 2
66977: ARRAY
66978: PUSH
66979: LD_VAR 0 3
66983: ARRAY
66984: PPUSH
66985: CALL_OW 459
66989: NOT
66990: AND
66991: PUSH
66992: LD_EXP 66
66996: PUSH
66997: LD_VAR 0 2
67001: ARRAY
67002: PUSH
67003: LD_VAR 0 3
67007: ARRAY
67008: PPUSH
67009: CALL_OW 314
67013: NOT
67014: AND
67015: IFFALSE 67183
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
67017: LD_EXP 66
67021: PUSH
67022: LD_VAR 0 2
67026: ARRAY
67027: PUSH
67028: LD_VAR 0 3
67032: ARRAY
67033: PPUSH
67034: CALL_OW 310
67038: IFFALSE 67061
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
67040: LD_EXP 66
67044: PUSH
67045: LD_VAR 0 2
67049: ARRAY
67050: PUSH
67051: LD_VAR 0 3
67055: ARRAY
67056: PPUSH
67057: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
67061: LD_EXP 66
67065: PUSH
67066: LD_VAR 0 2
67070: ARRAY
67071: PUSH
67072: LD_VAR 0 3
67076: ARRAY
67077: PPUSH
67078: CALL_OW 314
67082: NOT
67083: IFFALSE 67183
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
67085: LD_EXP 66
67089: PUSH
67090: LD_VAR 0 2
67094: ARRAY
67095: PUSH
67096: LD_VAR 0 3
67100: ARRAY
67101: PPUSH
67102: LD_EXP 65
67106: PUSH
67107: LD_VAR 0 2
67111: ARRAY
67112: PUSH
67113: LD_VAR 0 3
67117: PUSH
67118: LD_EXP 65
67122: PUSH
67123: LD_VAR 0 2
67127: ARRAY
67128: MOD
67129: PUSH
67130: LD_INT 1
67132: PLUS
67133: ARRAY
67134: PUSH
67135: LD_INT 1
67137: ARRAY
67138: PPUSH
67139: LD_EXP 65
67143: PUSH
67144: LD_VAR 0 2
67148: ARRAY
67149: PUSH
67150: LD_VAR 0 3
67154: PUSH
67155: LD_EXP 65
67159: PUSH
67160: LD_VAR 0 2
67164: ARRAY
67165: MOD
67166: PUSH
67167: LD_INT 1
67169: PLUS
67170: ARRAY
67171: PUSH
67172: LD_INT 2
67174: ARRAY
67175: PPUSH
67176: LD_INT 0
67178: PPUSH
67179: CALL_OW 193
// end ; end ;
67183: GO 66828
67185: POP
67186: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67187: LD_ADDR_VAR 0 5
67191: PUSH
67192: LD_EXP 52
67196: PUSH
67197: LD_VAR 0 2
67201: ARRAY
67202: PPUSH
67203: LD_INT 2
67205: PUSH
67206: LD_INT 30
67208: PUSH
67209: LD_INT 4
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 30
67218: PUSH
67219: LD_INT 5
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 30
67228: PUSH
67229: LD_INT 32
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: PPUSH
67242: CALL_OW 72
67246: ST_TO_ADDR
// if not tmp then
67247: LD_VAR 0 5
67251: NOT
67252: IFFALSE 67256
// continue ;
67254: GO 66741
// list := [ ] ;
67256: LD_ADDR_VAR 0 6
67260: PUSH
67261: EMPTY
67262: ST_TO_ADDR
// for j in tmp do
67263: LD_ADDR_VAR 0 3
67267: PUSH
67268: LD_VAR 0 5
67272: PUSH
67273: FOR_IN
67274: IFFALSE 67343
// begin for k in UnitsInside ( j ) do
67276: LD_ADDR_VAR 0 4
67280: PUSH
67281: LD_VAR 0 3
67285: PPUSH
67286: CALL_OW 313
67290: PUSH
67291: FOR_IN
67292: IFFALSE 67339
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67294: LD_VAR 0 4
67298: PPUSH
67299: CALL_OW 257
67303: PUSH
67304: LD_INT 1
67306: EQUAL
67307: PUSH
67308: LD_VAR 0 4
67312: PPUSH
67313: CALL_OW 459
67317: NOT
67318: AND
67319: IFFALSE 67337
// list := list ^ k ;
67321: LD_ADDR_VAR 0 6
67325: PUSH
67326: LD_VAR 0 6
67330: PUSH
67331: LD_VAR 0 4
67335: ADD
67336: ST_TO_ADDR
67337: GO 67291
67339: POP
67340: POP
// end ;
67341: GO 67273
67343: POP
67344: POP
// list := list diff mc_miners [ i ] ;
67345: LD_ADDR_VAR 0 6
67349: PUSH
67350: LD_VAR 0 6
67354: PUSH
67355: LD_EXP 66
67359: PUSH
67360: LD_VAR 0 2
67364: ARRAY
67365: DIFF
67366: ST_TO_ADDR
// if not list then
67367: LD_VAR 0 6
67371: NOT
67372: IFFALSE 67376
// continue ;
67374: GO 66741
// k := mc_mines [ i ] - mc_miners [ i ] ;
67376: LD_ADDR_VAR 0 4
67380: PUSH
67381: LD_EXP 65
67385: PUSH
67386: LD_VAR 0 2
67390: ARRAY
67391: PUSH
67392: LD_EXP 66
67396: PUSH
67397: LD_VAR 0 2
67401: ARRAY
67402: MINUS
67403: ST_TO_ADDR
// if k > list then
67404: LD_VAR 0 4
67408: PUSH
67409: LD_VAR 0 6
67413: GREATER
67414: IFFALSE 67426
// k := list ;
67416: LD_ADDR_VAR 0 4
67420: PUSH
67421: LD_VAR 0 6
67425: ST_TO_ADDR
// for j = 1 to k do
67426: LD_ADDR_VAR 0 3
67430: PUSH
67431: DOUBLE
67432: LD_INT 1
67434: DEC
67435: ST_TO_ADDR
67436: LD_VAR 0 4
67440: PUSH
67441: FOR_TO
67442: IFFALSE 67496
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67444: LD_ADDR_EXP 66
67448: PUSH
67449: LD_EXP 66
67453: PPUSH
67454: LD_VAR 0 2
67458: PUSH
67459: LD_EXP 66
67463: PUSH
67464: LD_VAR 0 2
67468: ARRAY
67469: PUSH
67470: LD_INT 1
67472: PLUS
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PPUSH
67478: LD_VAR 0 6
67482: PUSH
67483: LD_VAR 0 3
67487: ARRAY
67488: PPUSH
67489: CALL 18419 0 3
67493: ST_TO_ADDR
67494: GO 67441
67496: POP
67497: POP
// end ;
67498: GO 66741
67500: POP
67501: POP
// end ;
67502: LD_VAR 0 1
67506: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
67511: PPUSH
67512: PPUSH
67513: PPUSH
67514: PPUSH
67515: PPUSH
67516: PPUSH
67517: PPUSH
67518: PPUSH
// if not mc_bases then
67519: LD_EXP 52
67523: NOT
67524: IFFALSE 67528
// exit ;
67526: GO 69278
// for i = 1 to mc_bases do
67528: LD_ADDR_VAR 0 2
67532: PUSH
67533: DOUBLE
67534: LD_INT 1
67536: DEC
67537: ST_TO_ADDR
67538: LD_EXP 52
67542: PUSH
67543: FOR_TO
67544: IFFALSE 69276
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67546: LD_EXP 52
67550: PUSH
67551: LD_VAR 0 2
67555: ARRAY
67556: NOT
67557: PUSH
67558: LD_EXP 59
67562: PUSH
67563: LD_VAR 0 2
67567: ARRAY
67568: OR
67569: IFFALSE 67573
// continue ;
67571: GO 67543
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67573: LD_EXP 68
67577: PUSH
67578: LD_VAR 0 2
67582: ARRAY
67583: NOT
67584: PUSH
67585: LD_EXP 69
67589: PUSH
67590: LD_VAR 0 2
67594: ARRAY
67595: AND
67596: IFFALSE 67634
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67598: LD_ADDR_EXP 69
67602: PUSH
67603: LD_EXP 69
67607: PPUSH
67608: LD_VAR 0 2
67612: PPUSH
67613: EMPTY
67614: PPUSH
67615: CALL_OW 1
67619: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67620: LD_VAR 0 2
67624: PPUSH
67625: LD_INT 107
67627: PPUSH
67628: CALL 58492 0 2
// continue ;
67632: GO 67543
// end ; target := [ ] ;
67634: LD_ADDR_VAR 0 6
67638: PUSH
67639: EMPTY
67640: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67641: LD_ADDR_VAR 0 3
67645: PUSH
67646: DOUBLE
67647: LD_EXP 68
67651: PUSH
67652: LD_VAR 0 2
67656: ARRAY
67657: INC
67658: ST_TO_ADDR
67659: LD_INT 1
67661: PUSH
67662: FOR_DOWNTO
67663: IFFALSE 67923
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67665: LD_EXP 68
67669: PUSH
67670: LD_VAR 0 2
67674: ARRAY
67675: PUSH
67676: LD_VAR 0 3
67680: ARRAY
67681: PUSH
67682: LD_INT 2
67684: ARRAY
67685: PPUSH
67686: LD_EXP 68
67690: PUSH
67691: LD_VAR 0 2
67695: ARRAY
67696: PUSH
67697: LD_VAR 0 3
67701: ARRAY
67702: PUSH
67703: LD_INT 3
67705: ARRAY
67706: PPUSH
67707: CALL_OW 488
67711: PUSH
67712: LD_EXP 68
67716: PUSH
67717: LD_VAR 0 2
67721: ARRAY
67722: PUSH
67723: LD_VAR 0 3
67727: ARRAY
67728: PUSH
67729: LD_INT 2
67731: ARRAY
67732: PPUSH
67733: LD_EXP 68
67737: PUSH
67738: LD_VAR 0 2
67742: ARRAY
67743: PUSH
67744: LD_VAR 0 3
67748: ARRAY
67749: PUSH
67750: LD_INT 3
67752: ARRAY
67753: PPUSH
67754: CALL_OW 284
67758: PUSH
67759: LD_INT 0
67761: EQUAL
67762: AND
67763: IFFALSE 67818
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
67765: LD_ADDR_VAR 0 5
67769: PUSH
67770: LD_EXP 68
67774: PUSH
67775: LD_VAR 0 2
67779: ARRAY
67780: PPUSH
67781: LD_VAR 0 3
67785: PPUSH
67786: CALL_OW 3
67790: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
67791: LD_ADDR_EXP 68
67795: PUSH
67796: LD_EXP 68
67800: PPUSH
67801: LD_VAR 0 2
67805: PPUSH
67806: LD_VAR 0 5
67810: PPUSH
67811: CALL_OW 1
67815: ST_TO_ADDR
// continue ;
67816: GO 67662
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
67818: LD_EXP 52
67822: PUSH
67823: LD_VAR 0 2
67827: ARRAY
67828: PUSH
67829: LD_INT 1
67831: ARRAY
67832: PPUSH
67833: CALL_OW 255
67837: PPUSH
67838: LD_EXP 68
67842: PUSH
67843: LD_VAR 0 2
67847: ARRAY
67848: PUSH
67849: LD_VAR 0 3
67853: ARRAY
67854: PUSH
67855: LD_INT 2
67857: ARRAY
67858: PPUSH
67859: LD_EXP 68
67863: PUSH
67864: LD_VAR 0 2
67868: ARRAY
67869: PUSH
67870: LD_VAR 0 3
67874: ARRAY
67875: PUSH
67876: LD_INT 3
67878: ARRAY
67879: PPUSH
67880: LD_INT 30
67882: PPUSH
67883: CALL 19315 0 4
67887: PUSH
67888: LD_INT 4
67890: ARRAY
67891: PUSH
67892: LD_INT 0
67894: EQUAL
67895: IFFALSE 67921
// begin target := mc_crates [ i ] [ j ] ;
67897: LD_ADDR_VAR 0 6
67901: PUSH
67902: LD_EXP 68
67906: PUSH
67907: LD_VAR 0 2
67911: ARRAY
67912: PUSH
67913: LD_VAR 0 3
67917: ARRAY
67918: ST_TO_ADDR
// break ;
67919: GO 67923
// end ; end ;
67921: GO 67662
67923: POP
67924: POP
// if not target then
67925: LD_VAR 0 6
67929: NOT
67930: IFFALSE 67934
// continue ;
67932: GO 67543
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
67934: LD_ADDR_VAR 0 7
67938: PUSH
67939: LD_EXP 71
67943: PUSH
67944: LD_VAR 0 2
67948: ARRAY
67949: PPUSH
67950: LD_INT 2
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: LD_INT 58
67958: PUSH
67959: EMPTY
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 61
67968: PUSH
67969: EMPTY
67970: LIST
67971: PUSH
67972: LD_INT 33
67974: PUSH
67975: LD_INT 5
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 33
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: LD_INT 34
68004: PUSH
68005: LD_INT 32
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 34
68014: PUSH
68015: LD_INT 51
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 34
68024: PUSH
68025: LD_INT 12
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PPUSH
68042: CALL_OW 72
68046: ST_TO_ADDR
// if not cargo then
68047: LD_VAR 0 7
68051: NOT
68052: IFFALSE 68695
// begin if mc_crates_collector [ i ] < 5 then
68054: LD_EXP 69
68058: PUSH
68059: LD_VAR 0 2
68063: ARRAY
68064: PUSH
68065: LD_INT 5
68067: LESS
68068: IFFALSE 68434
// begin if mc_ape [ i ] then
68070: LD_EXP 81
68074: PUSH
68075: LD_VAR 0 2
68079: ARRAY
68080: IFFALSE 68127
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
68082: LD_ADDR_VAR 0 5
68086: PUSH
68087: LD_EXP 81
68091: PUSH
68092: LD_VAR 0 2
68096: ARRAY
68097: PPUSH
68098: LD_INT 25
68100: PUSH
68101: LD_INT 16
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 24
68110: PUSH
68111: LD_INT 750
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PPUSH
68122: CALL_OW 72
68126: ST_TO_ADDR
// if not tmp then
68127: LD_VAR 0 5
68131: NOT
68132: IFFALSE 68179
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
68134: LD_ADDR_VAR 0 5
68138: PUSH
68139: LD_EXP 52
68143: PUSH
68144: LD_VAR 0 2
68148: ARRAY
68149: PPUSH
68150: LD_INT 25
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 24
68162: PUSH
68163: LD_INT 750
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PPUSH
68174: CALL_OW 72
68178: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
68179: LD_EXP 81
68183: PUSH
68184: LD_VAR 0 2
68188: ARRAY
68189: PUSH
68190: LD_EXP 52
68194: PUSH
68195: LD_VAR 0 2
68199: ARRAY
68200: PPUSH
68201: LD_INT 25
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 24
68213: PUSH
68214: LD_INT 750
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PPUSH
68225: CALL_OW 72
68229: AND
68230: PUSH
68231: LD_VAR 0 5
68235: PUSH
68236: LD_INT 5
68238: LESS
68239: AND
68240: IFFALSE 68322
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
68242: LD_ADDR_VAR 0 3
68246: PUSH
68247: LD_EXP 52
68251: PUSH
68252: LD_VAR 0 2
68256: ARRAY
68257: PPUSH
68258: LD_INT 25
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 24
68270: PUSH
68271: LD_INT 750
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PPUSH
68282: CALL_OW 72
68286: PUSH
68287: FOR_IN
68288: IFFALSE 68320
// begin tmp := tmp union j ;
68290: LD_ADDR_VAR 0 5
68294: PUSH
68295: LD_VAR 0 5
68299: PUSH
68300: LD_VAR 0 3
68304: UNION
68305: ST_TO_ADDR
// if tmp >= 5 then
68306: LD_VAR 0 5
68310: PUSH
68311: LD_INT 5
68313: GREATEREQUAL
68314: IFFALSE 68318
// break ;
68316: GO 68320
// end ;
68318: GO 68287
68320: POP
68321: POP
// end ; if not tmp then
68322: LD_VAR 0 5
68326: NOT
68327: IFFALSE 68331
// continue ;
68329: GO 67543
// for j in tmp do
68331: LD_ADDR_VAR 0 3
68335: PUSH
68336: LD_VAR 0 5
68340: PUSH
68341: FOR_IN
68342: IFFALSE 68432
// if not GetTag ( j ) then
68344: LD_VAR 0 3
68348: PPUSH
68349: CALL_OW 110
68353: NOT
68354: IFFALSE 68430
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68356: LD_ADDR_EXP 69
68360: PUSH
68361: LD_EXP 69
68365: PPUSH
68366: LD_VAR 0 2
68370: PUSH
68371: LD_EXP 69
68375: PUSH
68376: LD_VAR 0 2
68380: ARRAY
68381: PUSH
68382: LD_INT 1
68384: PLUS
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PPUSH
68390: LD_VAR 0 3
68394: PPUSH
68395: CALL 18419 0 3
68399: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68400: LD_VAR 0 3
68404: PPUSH
68405: LD_INT 107
68407: PPUSH
68408: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68412: LD_EXP 69
68416: PUSH
68417: LD_VAR 0 2
68421: ARRAY
68422: PUSH
68423: LD_INT 5
68425: GREATEREQUAL
68426: IFFALSE 68430
// break ;
68428: GO 68432
// end ;
68430: GO 68341
68432: POP
68433: POP
// end ; if mc_crates_collector [ i ] and target then
68434: LD_EXP 69
68438: PUSH
68439: LD_VAR 0 2
68443: ARRAY
68444: PUSH
68445: LD_VAR 0 6
68449: AND
68450: IFFALSE 68693
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68452: LD_EXP 69
68456: PUSH
68457: LD_VAR 0 2
68461: ARRAY
68462: PUSH
68463: LD_VAR 0 6
68467: PUSH
68468: LD_INT 1
68470: ARRAY
68471: LESS
68472: IFFALSE 68492
// tmp := mc_crates_collector [ i ] else
68474: LD_ADDR_VAR 0 5
68478: PUSH
68479: LD_EXP 69
68483: PUSH
68484: LD_VAR 0 2
68488: ARRAY
68489: ST_TO_ADDR
68490: GO 68506
// tmp := target [ 1 ] ;
68492: LD_ADDR_VAR 0 5
68496: PUSH
68497: LD_VAR 0 6
68501: PUSH
68502: LD_INT 1
68504: ARRAY
68505: ST_TO_ADDR
// k := 0 ;
68506: LD_ADDR_VAR 0 4
68510: PUSH
68511: LD_INT 0
68513: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
68514: LD_ADDR_VAR 0 3
68518: PUSH
68519: LD_EXP 69
68523: PUSH
68524: LD_VAR 0 2
68528: ARRAY
68529: PUSH
68530: FOR_IN
68531: IFFALSE 68691
// begin k := k + 1 ;
68533: LD_ADDR_VAR 0 4
68537: PUSH
68538: LD_VAR 0 4
68542: PUSH
68543: LD_INT 1
68545: PLUS
68546: ST_TO_ADDR
// if k > tmp then
68547: LD_VAR 0 4
68551: PUSH
68552: LD_VAR 0 5
68556: GREATER
68557: IFFALSE 68561
// break ;
68559: GO 68691
// if not GetClass ( j ) in [ 2 , 16 ] then
68561: LD_VAR 0 3
68565: PPUSH
68566: CALL_OW 257
68570: PUSH
68571: LD_INT 2
68573: PUSH
68574: LD_INT 16
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: IN
68581: NOT
68582: IFFALSE 68635
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
68584: LD_ADDR_EXP 69
68588: PUSH
68589: LD_EXP 69
68593: PPUSH
68594: LD_VAR 0 2
68598: PPUSH
68599: LD_EXP 69
68603: PUSH
68604: LD_VAR 0 2
68608: ARRAY
68609: PUSH
68610: LD_VAR 0 3
68614: DIFF
68615: PPUSH
68616: CALL_OW 1
68620: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68621: LD_VAR 0 3
68625: PPUSH
68626: LD_INT 0
68628: PPUSH
68629: CALL_OW 109
// continue ;
68633: GO 68530
// end ; if IsInUnit ( j ) then
68635: LD_VAR 0 3
68639: PPUSH
68640: CALL_OW 310
68644: IFFALSE 68655
// ComExitBuilding ( j ) ;
68646: LD_VAR 0 3
68650: PPUSH
68651: CALL_OW 122
// wait ( 3 ) ;
68655: LD_INT 3
68657: PPUSH
68658: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68662: LD_VAR 0 3
68666: PPUSH
68667: LD_VAR 0 6
68671: PUSH
68672: LD_INT 2
68674: ARRAY
68675: PPUSH
68676: LD_VAR 0 6
68680: PUSH
68681: LD_INT 3
68683: ARRAY
68684: PPUSH
68685: CALL_OW 117
// end ;
68689: GO 68530
68691: POP
68692: POP
// end ; end else
68693: GO 69274
// begin for j in cargo do
68695: LD_ADDR_VAR 0 3
68699: PUSH
68700: LD_VAR 0 7
68704: PUSH
68705: FOR_IN
68706: IFFALSE 69272
// begin if GetTag ( j ) <> 0 then
68708: LD_VAR 0 3
68712: PPUSH
68713: CALL_OW 110
68717: PUSH
68718: LD_INT 0
68720: NONEQUAL
68721: IFFALSE 68725
// continue ;
68723: GO 68705
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
68725: LD_VAR 0 3
68729: PPUSH
68730: CALL_OW 256
68734: PUSH
68735: LD_INT 1000
68737: LESS
68738: PUSH
68739: LD_VAR 0 3
68743: PPUSH
68744: LD_EXP 76
68748: PUSH
68749: LD_VAR 0 2
68753: ARRAY
68754: PPUSH
68755: CALL_OW 308
68759: NOT
68760: AND
68761: IFFALSE 68783
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68763: LD_VAR 0 3
68767: PPUSH
68768: LD_EXP 76
68772: PUSH
68773: LD_VAR 0 2
68777: ARRAY
68778: PPUSH
68779: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
68783: LD_VAR 0 3
68787: PPUSH
68788: CALL_OW 256
68792: PUSH
68793: LD_INT 1000
68795: LESS
68796: PUSH
68797: LD_VAR 0 3
68801: PPUSH
68802: LD_EXP 76
68806: PUSH
68807: LD_VAR 0 2
68811: ARRAY
68812: PPUSH
68813: CALL_OW 308
68817: AND
68818: IFFALSE 68822
// continue ;
68820: GO 68705
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68822: LD_VAR 0 3
68826: PPUSH
68827: CALL_OW 262
68831: PUSH
68832: LD_INT 2
68834: EQUAL
68835: PUSH
68836: LD_VAR 0 3
68840: PPUSH
68841: CALL_OW 261
68845: PUSH
68846: LD_INT 15
68848: LESS
68849: AND
68850: IFFALSE 68854
// continue ;
68852: GO 68705
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68854: LD_VAR 0 3
68858: PPUSH
68859: CALL_OW 262
68863: PUSH
68864: LD_INT 1
68866: EQUAL
68867: PUSH
68868: LD_VAR 0 3
68872: PPUSH
68873: CALL_OW 261
68877: PUSH
68878: LD_INT 10
68880: LESS
68881: AND
68882: IFFALSE 69211
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68884: LD_ADDR_VAR 0 8
68888: PUSH
68889: LD_EXP 52
68893: PUSH
68894: LD_VAR 0 2
68898: ARRAY
68899: PPUSH
68900: LD_INT 2
68902: PUSH
68903: LD_INT 30
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 30
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: LIST
68927: PPUSH
68928: CALL_OW 72
68932: ST_TO_ADDR
// if not depot then
68933: LD_VAR 0 8
68937: NOT
68938: IFFALSE 68942
// continue ;
68940: GO 68705
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68942: LD_VAR 0 3
68946: PPUSH
68947: LD_VAR 0 8
68951: PPUSH
68952: LD_VAR 0 3
68956: PPUSH
68957: CALL_OW 74
68961: PPUSH
68962: CALL_OW 296
68966: PUSH
68967: LD_INT 6
68969: LESS
68970: IFFALSE 68986
// SetFuel ( j , 100 ) else
68972: LD_VAR 0 3
68976: PPUSH
68977: LD_INT 100
68979: PPUSH
68980: CALL_OW 240
68984: GO 69211
// if GetFuel ( j ) = 0 then
68986: LD_VAR 0 3
68990: PPUSH
68991: CALL_OW 261
68995: PUSH
68996: LD_INT 0
68998: EQUAL
68999: IFFALSE 69211
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
69001: LD_ADDR_EXP 71
69005: PUSH
69006: LD_EXP 71
69010: PPUSH
69011: LD_VAR 0 2
69015: PPUSH
69016: LD_EXP 71
69020: PUSH
69021: LD_VAR 0 2
69025: ARRAY
69026: PUSH
69027: LD_VAR 0 3
69031: DIFF
69032: PPUSH
69033: CALL_OW 1
69037: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
69038: LD_VAR 0 3
69042: PPUSH
69043: CALL_OW 263
69047: PUSH
69048: LD_INT 1
69050: EQUAL
69051: IFFALSE 69067
// ComExitVehicle ( IsInUnit ( j ) ) ;
69053: LD_VAR 0 3
69057: PPUSH
69058: CALL_OW 310
69062: PPUSH
69063: CALL_OW 121
// if GetControl ( j ) = control_remote then
69067: LD_VAR 0 3
69071: PPUSH
69072: CALL_OW 263
69076: PUSH
69077: LD_INT 2
69079: EQUAL
69080: IFFALSE 69091
// ComUnlink ( j ) ;
69082: LD_VAR 0 3
69086: PPUSH
69087: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
69091: LD_ADDR_VAR 0 9
69095: PUSH
69096: LD_VAR 0 2
69100: PPUSH
69101: LD_INT 3
69103: PPUSH
69104: CALL 78564 0 2
69108: ST_TO_ADDR
// if fac then
69109: LD_VAR 0 9
69113: IFFALSE 69209
// begin for k in fac do
69115: LD_ADDR_VAR 0 4
69119: PUSH
69120: LD_VAR 0 9
69124: PUSH
69125: FOR_IN
69126: IFFALSE 69207
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
69128: LD_ADDR_VAR 0 10
69132: PUSH
69133: LD_VAR 0 9
69137: PPUSH
69138: LD_VAR 0 3
69142: PPUSH
69143: CALL_OW 265
69147: PPUSH
69148: LD_VAR 0 3
69152: PPUSH
69153: CALL_OW 262
69157: PPUSH
69158: LD_VAR 0 3
69162: PPUSH
69163: CALL_OW 263
69167: PPUSH
69168: LD_VAR 0 3
69172: PPUSH
69173: CALL_OW 264
69177: PPUSH
69178: CALL 15951 0 5
69182: ST_TO_ADDR
// if components then
69183: LD_VAR 0 10
69187: IFFALSE 69205
// begin MC_InsertProduceList ( i , components ) ;
69189: LD_VAR 0 2
69193: PPUSH
69194: LD_VAR 0 10
69198: PPUSH
69199: CALL 78109 0 2
// break ;
69203: GO 69207
// end ; end ;
69205: GO 69125
69207: POP
69208: POP
// end ; continue ;
69209: GO 68705
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69211: LD_VAR 0 3
69215: PPUSH
69216: LD_INT 1
69218: PPUSH
69219: CALL_OW 289
69223: PUSH
69224: LD_INT 100
69226: LESS
69227: PUSH
69228: LD_VAR 0 3
69232: PPUSH
69233: CALL_OW 314
69237: NOT
69238: AND
69239: IFFALSE 69268
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69241: LD_VAR 0 3
69245: PPUSH
69246: LD_VAR 0 6
69250: PUSH
69251: LD_INT 2
69253: ARRAY
69254: PPUSH
69255: LD_VAR 0 6
69259: PUSH
69260: LD_INT 3
69262: ARRAY
69263: PPUSH
69264: CALL_OW 117
// break ;
69268: GO 69272
// end ;
69270: GO 68705
69272: POP
69273: POP
// end ; end ;
69274: GO 67543
69276: POP
69277: POP
// end ;
69278: LD_VAR 0 1
69282: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69283: LD_INT 0
69285: PPUSH
69286: PPUSH
69287: PPUSH
69288: PPUSH
// if not mc_bases then
69289: LD_EXP 52
69293: NOT
69294: IFFALSE 69298
// exit ;
69296: GO 69459
// for i = 1 to mc_bases do
69298: LD_ADDR_VAR 0 2
69302: PUSH
69303: DOUBLE
69304: LD_INT 1
69306: DEC
69307: ST_TO_ADDR
69308: LD_EXP 52
69312: PUSH
69313: FOR_TO
69314: IFFALSE 69457
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
69316: LD_ADDR_VAR 0 4
69320: PUSH
69321: LD_EXP 71
69325: PUSH
69326: LD_VAR 0 2
69330: ARRAY
69331: PUSH
69332: LD_EXP 74
69336: PUSH
69337: LD_VAR 0 2
69341: ARRAY
69342: UNION
69343: PPUSH
69344: LD_INT 33
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PPUSH
69354: CALL_OW 72
69358: ST_TO_ADDR
// if tmp then
69359: LD_VAR 0 4
69363: IFFALSE 69455
// for j in tmp do
69365: LD_ADDR_VAR 0 3
69369: PUSH
69370: LD_VAR 0 4
69374: PUSH
69375: FOR_IN
69376: IFFALSE 69453
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69378: LD_VAR 0 3
69382: PPUSH
69383: CALL_OW 312
69387: NOT
69388: PUSH
69389: LD_VAR 0 3
69393: PPUSH
69394: CALL_OW 256
69398: PUSH
69399: LD_INT 250
69401: GREATEREQUAL
69402: AND
69403: IFFALSE 69416
// Connect ( j ) else
69405: LD_VAR 0 3
69409: PPUSH
69410: CALL 21352 0 1
69414: GO 69451
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69416: LD_VAR 0 3
69420: PPUSH
69421: CALL_OW 256
69425: PUSH
69426: LD_INT 250
69428: LESS
69429: PUSH
69430: LD_VAR 0 3
69434: PPUSH
69435: CALL_OW 312
69439: AND
69440: IFFALSE 69451
// ComUnlink ( j ) ;
69442: LD_VAR 0 3
69446: PPUSH
69447: CALL_OW 136
69451: GO 69375
69453: POP
69454: POP
// end ;
69455: GO 69313
69457: POP
69458: POP
// end ;
69459: LD_VAR 0 1
69463: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69464: LD_INT 0
69466: PPUSH
69467: PPUSH
69468: PPUSH
69469: PPUSH
69470: PPUSH
// if not mc_bases then
69471: LD_EXP 52
69475: NOT
69476: IFFALSE 69480
// exit ;
69478: GO 69925
// for i = 1 to mc_bases do
69480: LD_ADDR_VAR 0 2
69484: PUSH
69485: DOUBLE
69486: LD_INT 1
69488: DEC
69489: ST_TO_ADDR
69490: LD_EXP 52
69494: PUSH
69495: FOR_TO
69496: IFFALSE 69923
// begin if not mc_produce [ i ] then
69498: LD_EXP 73
69502: PUSH
69503: LD_VAR 0 2
69507: ARRAY
69508: NOT
69509: IFFALSE 69513
// continue ;
69511: GO 69495
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69513: LD_ADDR_VAR 0 5
69517: PUSH
69518: LD_EXP 52
69522: PUSH
69523: LD_VAR 0 2
69527: ARRAY
69528: PPUSH
69529: LD_INT 30
69531: PUSH
69532: LD_INT 3
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PPUSH
69539: CALL_OW 72
69543: ST_TO_ADDR
// if not fac then
69544: LD_VAR 0 5
69548: NOT
69549: IFFALSE 69553
// continue ;
69551: GO 69495
// for j in fac do
69553: LD_ADDR_VAR 0 3
69557: PUSH
69558: LD_VAR 0 5
69562: PUSH
69563: FOR_IN
69564: IFFALSE 69919
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
69566: LD_VAR 0 3
69570: PPUSH
69571: CALL_OW 461
69575: PUSH
69576: LD_INT 2
69578: NONEQUAL
69579: PUSH
69580: LD_VAR 0 3
69584: PPUSH
69585: LD_INT 15
69587: PPUSH
69588: CALL 21012 0 2
69592: PUSH
69593: LD_INT 4
69595: ARRAY
69596: OR
69597: IFFALSE 69601
// continue ;
69599: GO 69563
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69601: LD_VAR 0 3
69605: PPUSH
69606: LD_EXP 73
69610: PUSH
69611: LD_VAR 0 2
69615: ARRAY
69616: PUSH
69617: LD_INT 1
69619: ARRAY
69620: PUSH
69621: LD_INT 1
69623: ARRAY
69624: PPUSH
69625: LD_EXP 73
69629: PUSH
69630: LD_VAR 0 2
69634: ARRAY
69635: PUSH
69636: LD_INT 1
69638: ARRAY
69639: PUSH
69640: LD_INT 2
69642: ARRAY
69643: PPUSH
69644: LD_EXP 73
69648: PUSH
69649: LD_VAR 0 2
69653: ARRAY
69654: PUSH
69655: LD_INT 1
69657: ARRAY
69658: PUSH
69659: LD_INT 3
69661: ARRAY
69662: PPUSH
69663: LD_EXP 73
69667: PUSH
69668: LD_VAR 0 2
69672: ARRAY
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PUSH
69678: LD_INT 4
69680: ARRAY
69681: PPUSH
69682: CALL_OW 448
69686: PUSH
69687: LD_VAR 0 3
69691: PPUSH
69692: LD_EXP 73
69696: PUSH
69697: LD_VAR 0 2
69701: ARRAY
69702: PUSH
69703: LD_INT 1
69705: ARRAY
69706: PUSH
69707: LD_INT 1
69709: ARRAY
69710: PUSH
69711: LD_EXP 73
69715: PUSH
69716: LD_VAR 0 2
69720: ARRAY
69721: PUSH
69722: LD_INT 1
69724: ARRAY
69725: PUSH
69726: LD_INT 2
69728: ARRAY
69729: PUSH
69730: LD_EXP 73
69734: PUSH
69735: LD_VAR 0 2
69739: ARRAY
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: PUSH
69745: LD_INT 3
69747: ARRAY
69748: PUSH
69749: LD_EXP 73
69753: PUSH
69754: LD_VAR 0 2
69758: ARRAY
69759: PUSH
69760: LD_INT 1
69762: ARRAY
69763: PUSH
69764: LD_INT 4
69766: ARRAY
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: PPUSH
69774: CALL 24683 0 2
69778: AND
69779: IFFALSE 69917
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69781: LD_VAR 0 3
69785: PPUSH
69786: LD_EXP 73
69790: PUSH
69791: LD_VAR 0 2
69795: ARRAY
69796: PUSH
69797: LD_INT 1
69799: ARRAY
69800: PUSH
69801: LD_INT 1
69803: ARRAY
69804: PPUSH
69805: LD_EXP 73
69809: PUSH
69810: LD_VAR 0 2
69814: ARRAY
69815: PUSH
69816: LD_INT 1
69818: ARRAY
69819: PUSH
69820: LD_INT 2
69822: ARRAY
69823: PPUSH
69824: LD_EXP 73
69828: PUSH
69829: LD_VAR 0 2
69833: ARRAY
69834: PUSH
69835: LD_INT 1
69837: ARRAY
69838: PUSH
69839: LD_INT 3
69841: ARRAY
69842: PPUSH
69843: LD_EXP 73
69847: PUSH
69848: LD_VAR 0 2
69852: ARRAY
69853: PUSH
69854: LD_INT 1
69856: ARRAY
69857: PUSH
69858: LD_INT 4
69860: ARRAY
69861: PPUSH
69862: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69866: LD_ADDR_VAR 0 4
69870: PUSH
69871: LD_EXP 73
69875: PUSH
69876: LD_VAR 0 2
69880: ARRAY
69881: PPUSH
69882: LD_INT 1
69884: PPUSH
69885: CALL_OW 3
69889: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69890: LD_ADDR_EXP 73
69894: PUSH
69895: LD_EXP 73
69899: PPUSH
69900: LD_VAR 0 2
69904: PPUSH
69905: LD_VAR 0 4
69909: PPUSH
69910: CALL_OW 1
69914: ST_TO_ADDR
// break ;
69915: GO 69919
// end ; end ;
69917: GO 69563
69919: POP
69920: POP
// end ;
69921: GO 69495
69923: POP
69924: POP
// end ;
69925: LD_VAR 0 1
69929: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
69934: PPUSH
// if not mc_bases then
69935: LD_EXP 52
69939: NOT
69940: IFFALSE 69944
// exit ;
69942: GO 70033
// for i = 1 to mc_bases do
69944: LD_ADDR_VAR 0 2
69948: PUSH
69949: DOUBLE
69950: LD_INT 1
69952: DEC
69953: ST_TO_ADDR
69954: LD_EXP 52
69958: PUSH
69959: FOR_TO
69960: IFFALSE 70031
// begin if mc_attack [ i ] then
69962: LD_EXP 72
69966: PUSH
69967: LD_VAR 0 2
69971: ARRAY
69972: IFFALSE 70029
// begin tmp := mc_attack [ i ] [ 1 ] ;
69974: LD_ADDR_VAR 0 3
69978: PUSH
69979: LD_EXP 72
69983: PUSH
69984: LD_VAR 0 2
69988: ARRAY
69989: PUSH
69990: LD_INT 1
69992: ARRAY
69993: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
69994: LD_ADDR_EXP 72
69998: PUSH
69999: LD_EXP 72
70003: PPUSH
70004: LD_VAR 0 2
70008: PPUSH
70009: EMPTY
70010: PPUSH
70011: CALL_OW 1
70015: ST_TO_ADDR
// Attack ( tmp ) ;
70016: LD_VAR 0 3
70020: PPUSH
70021: CALL 46896 0 1
// exit ;
70025: POP
70026: POP
70027: GO 70033
// end ; end ;
70029: GO 69959
70031: POP
70032: POP
// end ;
70033: LD_VAR 0 1
70037: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
70038: LD_INT 0
70040: PPUSH
70041: PPUSH
70042: PPUSH
70043: PPUSH
70044: PPUSH
70045: PPUSH
70046: PPUSH
// if not mc_bases then
70047: LD_EXP 52
70051: NOT
70052: IFFALSE 70056
// exit ;
70054: GO 70638
// for i = 1 to mc_bases do
70056: LD_ADDR_VAR 0 2
70060: PUSH
70061: DOUBLE
70062: LD_INT 1
70064: DEC
70065: ST_TO_ADDR
70066: LD_EXP 52
70070: PUSH
70071: FOR_TO
70072: IFFALSE 70636
// begin if not mc_bases [ i ] then
70074: LD_EXP 52
70078: PUSH
70079: LD_VAR 0 2
70083: ARRAY
70084: NOT
70085: IFFALSE 70089
// continue ;
70087: GO 70071
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
70089: LD_ADDR_VAR 0 7
70093: PUSH
70094: LD_EXP 52
70098: PUSH
70099: LD_VAR 0 2
70103: ARRAY
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: CALL 15255 0 1
70113: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
70114: LD_ADDR_EXP 75
70118: PUSH
70119: LD_EXP 75
70123: PPUSH
70124: LD_VAR 0 2
70128: PPUSH
70129: LD_EXP 52
70133: PUSH
70134: LD_VAR 0 2
70138: ARRAY
70139: PUSH
70140: LD_INT 1
70142: ARRAY
70143: PPUSH
70144: CALL_OW 255
70148: PPUSH
70149: LD_EXP 77
70153: PUSH
70154: LD_VAR 0 2
70158: ARRAY
70159: PPUSH
70160: CALL 12809 0 2
70164: PPUSH
70165: CALL_OW 1
70169: ST_TO_ADDR
// if not mc_scan [ i ] then
70170: LD_EXP 75
70174: PUSH
70175: LD_VAR 0 2
70179: ARRAY
70180: NOT
70181: IFFALSE 70336
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70183: LD_ADDR_VAR 0 4
70187: PUSH
70188: LD_EXP 52
70192: PUSH
70193: LD_VAR 0 2
70197: ARRAY
70198: PPUSH
70199: LD_INT 2
70201: PUSH
70202: LD_INT 25
70204: PUSH
70205: LD_INT 5
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 25
70214: PUSH
70215: LD_INT 8
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 25
70224: PUSH
70225: LD_INT 9
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: PPUSH
70238: CALL_OW 72
70242: ST_TO_ADDR
// if not tmp then
70243: LD_VAR 0 4
70247: NOT
70248: IFFALSE 70252
// continue ;
70250: GO 70071
// for j in tmp do
70252: LD_ADDR_VAR 0 3
70256: PUSH
70257: LD_VAR 0 4
70261: PUSH
70262: FOR_IN
70263: IFFALSE 70334
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70265: LD_VAR 0 3
70269: PPUSH
70270: CALL_OW 310
70274: PPUSH
70275: CALL_OW 266
70279: PUSH
70280: LD_INT 5
70282: EQUAL
70283: PUSH
70284: LD_VAR 0 3
70288: PPUSH
70289: CALL_OW 257
70293: PUSH
70294: LD_INT 1
70296: EQUAL
70297: AND
70298: PUSH
70299: LD_VAR 0 3
70303: PPUSH
70304: CALL_OW 459
70308: NOT
70309: AND
70310: PUSH
70311: LD_VAR 0 7
70315: AND
70316: IFFALSE 70332
// ComChangeProfession ( j , class ) ;
70318: LD_VAR 0 3
70322: PPUSH
70323: LD_VAR 0 7
70327: PPUSH
70328: CALL_OW 123
70332: GO 70262
70334: POP
70335: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
70336: LD_EXP 75
70340: PUSH
70341: LD_VAR 0 2
70345: ARRAY
70346: PUSH
70347: LD_EXP 74
70351: PUSH
70352: LD_VAR 0 2
70356: ARRAY
70357: NOT
70358: AND
70359: PUSH
70360: LD_EXP 52
70364: PUSH
70365: LD_VAR 0 2
70369: ARRAY
70370: PPUSH
70371: LD_INT 30
70373: PUSH
70374: LD_INT 32
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PPUSH
70381: CALL_OW 72
70385: NOT
70386: AND
70387: PUSH
70388: LD_EXP 52
70392: PUSH
70393: LD_VAR 0 2
70397: ARRAY
70398: PPUSH
70399: LD_INT 2
70401: PUSH
70402: LD_INT 30
70404: PUSH
70405: LD_INT 4
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 30
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: PPUSH
70427: CALL_OW 72
70431: NOT
70432: AND
70433: IFFALSE 70565
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70435: LD_ADDR_VAR 0 4
70439: PUSH
70440: LD_EXP 52
70444: PUSH
70445: LD_VAR 0 2
70449: ARRAY
70450: PPUSH
70451: LD_INT 2
70453: PUSH
70454: LD_INT 25
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 25
70466: PUSH
70467: LD_INT 5
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 25
70476: PUSH
70477: LD_INT 8
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 25
70486: PUSH
70487: LD_INT 9
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: PPUSH
70501: CALL_OW 72
70505: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
70506: LD_ADDR_VAR 0 4
70510: PUSH
70511: LD_VAR 0 4
70515: PUSH
70516: LD_VAR 0 4
70520: PPUSH
70521: LD_INT 18
70523: PPUSH
70524: CALL 51705 0 2
70528: DIFF
70529: ST_TO_ADDR
// if tmp then
70530: LD_VAR 0 4
70534: IFFALSE 70565
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
70536: LD_VAR 0 2
70540: PPUSH
70541: LD_VAR 0 4
70545: PPUSH
70546: LD_EXP 77
70550: PUSH
70551: LD_VAR 0 2
70555: ARRAY
70556: PPUSH
70557: CALL 12844 0 3
// exit ;
70561: POP
70562: POP
70563: GO 70638
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
70565: LD_EXP 75
70569: PUSH
70570: LD_VAR 0 2
70574: ARRAY
70575: PUSH
70576: LD_EXP 74
70580: PUSH
70581: LD_VAR 0 2
70585: ARRAY
70586: AND
70587: IFFALSE 70634
// begin tmp := mc_defender [ i ] ;
70589: LD_ADDR_VAR 0 4
70593: PUSH
70594: LD_EXP 74
70598: PUSH
70599: LD_VAR 0 2
70603: ARRAY
70604: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70605: LD_VAR 0 2
70609: PPUSH
70610: LD_VAR 0 4
70614: PPUSH
70615: LD_EXP 75
70619: PUSH
70620: LD_VAR 0 2
70624: ARRAY
70625: PPUSH
70626: CALL 13405 0 3
// exit ;
70630: POP
70631: POP
70632: GO 70638
// end ; end ;
70634: GO 70071
70636: POP
70637: POP
// end ;
70638: LD_VAR 0 1
70642: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
70643: LD_INT 0
70645: PPUSH
70646: PPUSH
70647: PPUSH
70648: PPUSH
70649: PPUSH
70650: PPUSH
70651: PPUSH
70652: PPUSH
70653: PPUSH
70654: PPUSH
70655: PPUSH
// if not mc_bases then
70656: LD_EXP 52
70660: NOT
70661: IFFALSE 70665
// exit ;
70663: GO 71752
// for i = 1 to mc_bases do
70665: LD_ADDR_VAR 0 2
70669: PUSH
70670: DOUBLE
70671: LD_INT 1
70673: DEC
70674: ST_TO_ADDR
70675: LD_EXP 52
70679: PUSH
70680: FOR_TO
70681: IFFALSE 71750
// begin tmp := mc_lab [ i ] ;
70683: LD_ADDR_VAR 0 6
70687: PUSH
70688: LD_EXP 85
70692: PUSH
70693: LD_VAR 0 2
70697: ARRAY
70698: ST_TO_ADDR
// if not tmp then
70699: LD_VAR 0 6
70703: NOT
70704: IFFALSE 70708
// continue ;
70706: GO 70680
// idle_lab := 0 ;
70708: LD_ADDR_VAR 0 11
70712: PUSH
70713: LD_INT 0
70715: ST_TO_ADDR
// for j in tmp do
70716: LD_ADDR_VAR 0 3
70720: PUSH
70721: LD_VAR 0 6
70725: PUSH
70726: FOR_IN
70727: IFFALSE 71746
// begin researching := false ;
70729: LD_ADDR_VAR 0 10
70733: PUSH
70734: LD_INT 0
70736: ST_TO_ADDR
// side := GetSide ( j ) ;
70737: LD_ADDR_VAR 0 4
70741: PUSH
70742: LD_VAR 0 3
70746: PPUSH
70747: CALL_OW 255
70751: ST_TO_ADDR
// if not mc_tech [ side ] then
70752: LD_EXP 79
70756: PUSH
70757: LD_VAR 0 4
70761: ARRAY
70762: NOT
70763: IFFALSE 70767
// continue ;
70765: GO 70726
// if BuildingStatus ( j ) = bs_idle then
70767: LD_VAR 0 3
70771: PPUSH
70772: CALL_OW 461
70776: PUSH
70777: LD_INT 2
70779: EQUAL
70780: IFFALSE 70968
// begin if idle_lab and UnitsInside ( j ) < 6 then
70782: LD_VAR 0 11
70786: PUSH
70787: LD_VAR 0 3
70791: PPUSH
70792: CALL_OW 313
70796: PUSH
70797: LD_INT 6
70799: LESS
70800: AND
70801: IFFALSE 70872
// begin tmp2 := UnitsInside ( idle_lab ) ;
70803: LD_ADDR_VAR 0 9
70807: PUSH
70808: LD_VAR 0 11
70812: PPUSH
70813: CALL_OW 313
70817: ST_TO_ADDR
// if tmp2 then
70818: LD_VAR 0 9
70822: IFFALSE 70864
// for x in tmp2 do
70824: LD_ADDR_VAR 0 7
70828: PUSH
70829: LD_VAR 0 9
70833: PUSH
70834: FOR_IN
70835: IFFALSE 70862
// begin ComExitBuilding ( x ) ;
70837: LD_VAR 0 7
70841: PPUSH
70842: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70846: LD_VAR 0 7
70850: PPUSH
70851: LD_VAR 0 3
70855: PPUSH
70856: CALL_OW 180
// end ;
70860: GO 70834
70862: POP
70863: POP
// idle_lab := 0 ;
70864: LD_ADDR_VAR 0 11
70868: PUSH
70869: LD_INT 0
70871: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
70872: LD_ADDR_VAR 0 5
70876: PUSH
70877: LD_EXP 79
70881: PUSH
70882: LD_VAR 0 4
70886: ARRAY
70887: PUSH
70888: FOR_IN
70889: IFFALSE 70949
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70891: LD_VAR 0 3
70895: PPUSH
70896: LD_VAR 0 5
70900: PPUSH
70901: CALL_OW 430
70905: PUSH
70906: LD_VAR 0 4
70910: PPUSH
70911: LD_VAR 0 5
70915: PPUSH
70916: CALL 11914 0 2
70920: AND
70921: IFFALSE 70947
// begin researching := true ;
70923: LD_ADDR_VAR 0 10
70927: PUSH
70928: LD_INT 1
70930: ST_TO_ADDR
// ComResearch ( j , t ) ;
70931: LD_VAR 0 3
70935: PPUSH
70936: LD_VAR 0 5
70940: PPUSH
70941: CALL_OW 124
// break ;
70945: GO 70949
// end ;
70947: GO 70888
70949: POP
70950: POP
// if not researching then
70951: LD_VAR 0 10
70955: NOT
70956: IFFALSE 70968
// idle_lab := j ;
70958: LD_ADDR_VAR 0 11
70962: PUSH
70963: LD_VAR 0 3
70967: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
70968: LD_VAR 0 3
70972: PPUSH
70973: CALL_OW 461
70977: PUSH
70978: LD_INT 10
70980: EQUAL
70981: IFFALSE 71569
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70983: LD_EXP 81
70987: PUSH
70988: LD_VAR 0 2
70992: ARRAY
70993: NOT
70994: PUSH
70995: LD_EXP 82
70999: PUSH
71000: LD_VAR 0 2
71004: ARRAY
71005: NOT
71006: AND
71007: PUSH
71008: LD_EXP 79
71012: PUSH
71013: LD_VAR 0 4
71017: ARRAY
71018: PUSH
71019: LD_INT 1
71021: GREATER
71022: AND
71023: IFFALSE 71154
// begin ComCancel ( j ) ;
71025: LD_VAR 0 3
71029: PPUSH
71030: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
71034: LD_ADDR_EXP 79
71038: PUSH
71039: LD_EXP 79
71043: PPUSH
71044: LD_VAR 0 4
71048: PPUSH
71049: LD_EXP 79
71053: PUSH
71054: LD_VAR 0 4
71058: ARRAY
71059: PPUSH
71060: LD_EXP 79
71064: PUSH
71065: LD_VAR 0 4
71069: ARRAY
71070: PUSH
71071: LD_INT 1
71073: MINUS
71074: PPUSH
71075: LD_EXP 79
71079: PUSH
71080: LD_VAR 0 4
71084: ARRAY
71085: PPUSH
71086: LD_INT 0
71088: PPUSH
71089: CALL 17837 0 4
71093: PPUSH
71094: CALL_OW 1
71098: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
71099: LD_ADDR_EXP 79
71103: PUSH
71104: LD_EXP 79
71108: PPUSH
71109: LD_VAR 0 4
71113: PPUSH
71114: LD_EXP 79
71118: PUSH
71119: LD_VAR 0 4
71123: ARRAY
71124: PPUSH
71125: LD_EXP 79
71129: PUSH
71130: LD_VAR 0 4
71134: ARRAY
71135: PPUSH
71136: LD_INT 1
71138: PPUSH
71139: LD_INT 0
71141: PPUSH
71142: CALL 17837 0 4
71146: PPUSH
71147: CALL_OW 1
71151: ST_TO_ADDR
// continue ;
71152: GO 70726
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
71154: LD_EXP 81
71158: PUSH
71159: LD_VAR 0 2
71163: ARRAY
71164: PUSH
71165: LD_EXP 82
71169: PUSH
71170: LD_VAR 0 2
71174: ARRAY
71175: NOT
71176: AND
71177: IFFALSE 71304
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
71179: LD_ADDR_EXP 82
71183: PUSH
71184: LD_EXP 82
71188: PPUSH
71189: LD_VAR 0 2
71193: PUSH
71194: LD_EXP 82
71198: PUSH
71199: LD_VAR 0 2
71203: ARRAY
71204: PUSH
71205: LD_INT 1
71207: PLUS
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PPUSH
71213: LD_EXP 81
71217: PUSH
71218: LD_VAR 0 2
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: ARRAY
71227: PPUSH
71228: CALL 18419 0 3
71232: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
71233: LD_EXP 81
71237: PUSH
71238: LD_VAR 0 2
71242: ARRAY
71243: PUSH
71244: LD_INT 1
71246: ARRAY
71247: PPUSH
71248: LD_INT 112
71250: PPUSH
71251: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
71255: LD_ADDR_VAR 0 9
71259: PUSH
71260: LD_EXP 81
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: PPUSH
71271: LD_INT 1
71273: PPUSH
71274: CALL_OW 3
71278: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
71279: LD_ADDR_EXP 81
71283: PUSH
71284: LD_EXP 81
71288: PPUSH
71289: LD_VAR 0 2
71293: PPUSH
71294: LD_VAR 0 9
71298: PPUSH
71299: CALL_OW 1
71303: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
71304: LD_EXP 81
71308: PUSH
71309: LD_VAR 0 2
71313: ARRAY
71314: PUSH
71315: LD_EXP 82
71319: PUSH
71320: LD_VAR 0 2
71324: ARRAY
71325: AND
71326: PUSH
71327: LD_EXP 82
71331: PUSH
71332: LD_VAR 0 2
71336: ARRAY
71337: PUSH
71338: LD_INT 1
71340: ARRAY
71341: PPUSH
71342: CALL_OW 310
71346: NOT
71347: AND
71348: PUSH
71349: LD_VAR 0 3
71353: PPUSH
71354: CALL_OW 313
71358: PUSH
71359: LD_INT 6
71361: EQUAL
71362: AND
71363: IFFALSE 71419
// begin tmp2 := UnitsInside ( j ) ;
71365: LD_ADDR_VAR 0 9
71369: PUSH
71370: LD_VAR 0 3
71374: PPUSH
71375: CALL_OW 313
71379: ST_TO_ADDR
// if tmp2 = 6 then
71380: LD_VAR 0 9
71384: PUSH
71385: LD_INT 6
71387: EQUAL
71388: IFFALSE 71419
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71390: LD_VAR 0 9
71394: PUSH
71395: LD_INT 1
71397: ARRAY
71398: PPUSH
71399: LD_INT 112
71401: PPUSH
71402: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71406: LD_VAR 0 9
71410: PUSH
71411: LD_INT 1
71413: ARRAY
71414: PPUSH
71415: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71419: LD_EXP 82
71423: PUSH
71424: LD_VAR 0 2
71428: ARRAY
71429: PUSH
71430: LD_EXP 82
71434: PUSH
71435: LD_VAR 0 2
71439: ARRAY
71440: PUSH
71441: LD_INT 1
71443: ARRAY
71444: PPUSH
71445: CALL_OW 314
71449: NOT
71450: AND
71451: PUSH
71452: LD_EXP 82
71456: PUSH
71457: LD_VAR 0 2
71461: ARRAY
71462: PUSH
71463: LD_INT 1
71465: ARRAY
71466: PPUSH
71467: CALL_OW 310
71471: NOT
71472: AND
71473: IFFALSE 71499
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71475: LD_EXP 82
71479: PUSH
71480: LD_VAR 0 2
71484: ARRAY
71485: PUSH
71486: LD_INT 1
71488: ARRAY
71489: PPUSH
71490: LD_VAR 0 3
71494: PPUSH
71495: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71499: LD_EXP 82
71503: PUSH
71504: LD_VAR 0 2
71508: ARRAY
71509: PUSH
71510: LD_INT 1
71512: ARRAY
71513: PPUSH
71514: CALL_OW 310
71518: PUSH
71519: LD_EXP 82
71523: PUSH
71524: LD_VAR 0 2
71528: ARRAY
71529: PUSH
71530: LD_INT 1
71532: ARRAY
71533: PPUSH
71534: CALL_OW 310
71538: PPUSH
71539: CALL_OW 461
71543: PUSH
71544: LD_INT 3
71546: NONEQUAL
71547: AND
71548: IFFALSE 71569
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71550: LD_EXP 82
71554: PUSH
71555: LD_VAR 0 2
71559: ARRAY
71560: PUSH
71561: LD_INT 1
71563: ARRAY
71564: PPUSH
71565: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71569: LD_VAR 0 3
71573: PPUSH
71574: CALL_OW 461
71578: PUSH
71579: LD_INT 6
71581: EQUAL
71582: PUSH
71583: LD_VAR 0 6
71587: PUSH
71588: LD_INT 1
71590: GREATER
71591: AND
71592: IFFALSE 71744
// begin sci := [ ] ;
71594: LD_ADDR_VAR 0 8
71598: PUSH
71599: EMPTY
71600: ST_TO_ADDR
// for x in ( tmp diff j ) do
71601: LD_ADDR_VAR 0 7
71605: PUSH
71606: LD_VAR 0 6
71610: PUSH
71611: LD_VAR 0 3
71615: DIFF
71616: PUSH
71617: FOR_IN
71618: IFFALSE 71670
// begin if sci = 6 then
71620: LD_VAR 0 8
71624: PUSH
71625: LD_INT 6
71627: EQUAL
71628: IFFALSE 71632
// break ;
71630: GO 71670
// if BuildingStatus ( x ) = bs_idle then
71632: LD_VAR 0 7
71636: PPUSH
71637: CALL_OW 461
71641: PUSH
71642: LD_INT 2
71644: EQUAL
71645: IFFALSE 71668
// sci := sci ^ UnitsInside ( x ) ;
71647: LD_ADDR_VAR 0 8
71651: PUSH
71652: LD_VAR 0 8
71656: PUSH
71657: LD_VAR 0 7
71661: PPUSH
71662: CALL_OW 313
71666: ADD
71667: ST_TO_ADDR
// end ;
71668: GO 71617
71670: POP
71671: POP
// if not sci then
71672: LD_VAR 0 8
71676: NOT
71677: IFFALSE 71681
// continue ;
71679: GO 70726
// for x in sci do
71681: LD_ADDR_VAR 0 7
71685: PUSH
71686: LD_VAR 0 8
71690: PUSH
71691: FOR_IN
71692: IFFALSE 71742
// if IsInUnit ( x ) and not HasTask ( x ) then
71694: LD_VAR 0 7
71698: PPUSH
71699: CALL_OW 310
71703: PUSH
71704: LD_VAR 0 7
71708: PPUSH
71709: CALL_OW 314
71713: NOT
71714: AND
71715: IFFALSE 71740
// begin ComExitBuilding ( x ) ;
71717: LD_VAR 0 7
71721: PPUSH
71722: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71726: LD_VAR 0 7
71730: PPUSH
71731: LD_VAR 0 3
71735: PPUSH
71736: CALL_OW 180
// end ;
71740: GO 71691
71742: POP
71743: POP
// end ; end ;
71744: GO 70726
71746: POP
71747: POP
// end ;
71748: GO 70680
71750: POP
71751: POP
// end ;
71752: LD_VAR 0 1
71756: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
71757: LD_INT 0
71759: PPUSH
71760: PPUSH
// if not mc_bases then
71761: LD_EXP 52
71765: NOT
71766: IFFALSE 71770
// exit ;
71768: GO 71851
// for i = 1 to mc_bases do
71770: LD_ADDR_VAR 0 2
71774: PUSH
71775: DOUBLE
71776: LD_INT 1
71778: DEC
71779: ST_TO_ADDR
71780: LD_EXP 52
71784: PUSH
71785: FOR_TO
71786: IFFALSE 71849
// if mc_mines [ i ] and mc_miners [ i ] then
71788: LD_EXP 65
71792: PUSH
71793: LD_VAR 0 2
71797: ARRAY
71798: PUSH
71799: LD_EXP 66
71803: PUSH
71804: LD_VAR 0 2
71808: ARRAY
71809: AND
71810: IFFALSE 71847
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
71812: LD_EXP 66
71816: PUSH
71817: LD_VAR 0 2
71821: ARRAY
71822: PUSH
71823: LD_INT 1
71825: ARRAY
71826: PPUSH
71827: CALL_OW 255
71831: PPUSH
71832: LD_EXP 65
71836: PUSH
71837: LD_VAR 0 2
71841: ARRAY
71842: PPUSH
71843: CALL 15408 0 2
71847: GO 71785
71849: POP
71850: POP
// end ;
71851: LD_VAR 0 1
71855: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71856: LD_INT 0
71858: PPUSH
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
71863: PPUSH
71864: PPUSH
71865: PPUSH
// if not mc_bases or not mc_parking then
71866: LD_EXP 52
71870: NOT
71871: PUSH
71872: LD_EXP 76
71876: NOT
71877: OR
71878: IFFALSE 71882
// exit ;
71880: GO 72581
// for i = 1 to mc_bases do
71882: LD_ADDR_VAR 0 2
71886: PUSH
71887: DOUBLE
71888: LD_INT 1
71890: DEC
71891: ST_TO_ADDR
71892: LD_EXP 52
71896: PUSH
71897: FOR_TO
71898: IFFALSE 72579
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71900: LD_EXP 52
71904: PUSH
71905: LD_VAR 0 2
71909: ARRAY
71910: NOT
71911: PUSH
71912: LD_EXP 76
71916: PUSH
71917: LD_VAR 0 2
71921: ARRAY
71922: NOT
71923: OR
71924: IFFALSE 71928
// continue ;
71926: GO 71897
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71928: LD_ADDR_VAR 0 5
71932: PUSH
71933: LD_EXP 52
71937: PUSH
71938: LD_VAR 0 2
71942: ARRAY
71943: PUSH
71944: LD_INT 1
71946: ARRAY
71947: PPUSH
71948: CALL_OW 255
71952: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71953: LD_ADDR_VAR 0 6
71957: PUSH
71958: LD_EXP 52
71962: PUSH
71963: LD_VAR 0 2
71967: ARRAY
71968: PPUSH
71969: LD_INT 30
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PPUSH
71979: CALL_OW 72
71983: ST_TO_ADDR
// if not fac then
71984: LD_VAR 0 6
71988: NOT
71989: IFFALSE 72040
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71991: LD_ADDR_VAR 0 6
71995: PUSH
71996: LD_EXP 52
72000: PUSH
72001: LD_VAR 0 2
72005: ARRAY
72006: PPUSH
72007: LD_INT 2
72009: PUSH
72010: LD_INT 30
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 30
72022: PUSH
72023: LD_INT 1
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: LIST
72034: PPUSH
72035: CALL_OW 72
72039: ST_TO_ADDR
// if not fac then
72040: LD_VAR 0 6
72044: NOT
72045: IFFALSE 72049
// continue ;
72047: GO 71897
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
72049: LD_ADDR_VAR 0 7
72053: PUSH
72054: LD_EXP 76
72058: PUSH
72059: LD_VAR 0 2
72063: ARRAY
72064: PPUSH
72065: LD_INT 22
72067: PUSH
72068: LD_VAR 0 5
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 21
72079: PUSH
72080: LD_INT 2
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 3
72089: PUSH
72090: LD_INT 24
72092: PUSH
72093: LD_INT 1000
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PPUSH
72109: CALL_OW 70
72113: ST_TO_ADDR
// for j in fac do
72114: LD_ADDR_VAR 0 3
72118: PUSH
72119: LD_VAR 0 6
72123: PUSH
72124: FOR_IN
72125: IFFALSE 72206
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
72127: LD_ADDR_VAR 0 7
72131: PUSH
72132: LD_VAR 0 7
72136: PUSH
72137: LD_INT 22
72139: PUSH
72140: LD_VAR 0 5
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 91
72151: PUSH
72152: LD_VAR 0 3
72156: PUSH
72157: LD_INT 15
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 21
72167: PUSH
72168: LD_INT 2
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 3
72177: PUSH
72178: LD_INT 24
72180: PUSH
72181: LD_INT 1000
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: PPUSH
72198: CALL_OW 69
72202: UNION
72203: ST_TO_ADDR
72204: GO 72124
72206: POP
72207: POP
// if not vehs then
72208: LD_VAR 0 7
72212: NOT
72213: IFFALSE 72239
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72215: LD_ADDR_EXP 64
72219: PUSH
72220: LD_EXP 64
72224: PPUSH
72225: LD_VAR 0 2
72229: PPUSH
72230: EMPTY
72231: PPUSH
72232: CALL_OW 1
72236: ST_TO_ADDR
// continue ;
72237: GO 71897
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72239: LD_ADDR_VAR 0 8
72243: PUSH
72244: LD_EXP 52
72248: PUSH
72249: LD_VAR 0 2
72253: ARRAY
72254: PPUSH
72255: LD_INT 30
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PPUSH
72265: CALL_OW 72
72269: ST_TO_ADDR
// if tmp then
72270: LD_VAR 0 8
72274: IFFALSE 72377
// begin for j in tmp do
72276: LD_ADDR_VAR 0 3
72280: PUSH
72281: LD_VAR 0 8
72285: PUSH
72286: FOR_IN
72287: IFFALSE 72375
// for k in UnitsInside ( j ) do
72289: LD_ADDR_VAR 0 4
72293: PUSH
72294: LD_VAR 0 3
72298: PPUSH
72299: CALL_OW 313
72303: PUSH
72304: FOR_IN
72305: IFFALSE 72371
// if k then
72307: LD_VAR 0 4
72311: IFFALSE 72369
// if not k in mc_repair_vehicle [ i ] then
72313: LD_VAR 0 4
72317: PUSH
72318: LD_EXP 64
72322: PUSH
72323: LD_VAR 0 2
72327: ARRAY
72328: IN
72329: NOT
72330: IFFALSE 72369
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
72332: LD_ADDR_EXP 64
72336: PUSH
72337: LD_EXP 64
72341: PPUSH
72342: LD_VAR 0 2
72346: PPUSH
72347: LD_EXP 64
72351: PUSH
72352: LD_VAR 0 2
72356: ARRAY
72357: PUSH
72358: LD_VAR 0 4
72362: UNION
72363: PPUSH
72364: CALL_OW 1
72368: ST_TO_ADDR
72369: GO 72304
72371: POP
72372: POP
72373: GO 72286
72375: POP
72376: POP
// end ; if not mc_repair_vehicle [ i ] then
72377: LD_EXP 64
72381: PUSH
72382: LD_VAR 0 2
72386: ARRAY
72387: NOT
72388: IFFALSE 72392
// continue ;
72390: GO 71897
// for j in mc_repair_vehicle [ i ] do
72392: LD_ADDR_VAR 0 3
72396: PUSH
72397: LD_EXP 64
72401: PUSH
72402: LD_VAR 0 2
72406: ARRAY
72407: PUSH
72408: FOR_IN
72409: IFFALSE 72575
// begin if GetClass ( j ) <> 3 then
72411: LD_VAR 0 3
72415: PPUSH
72416: CALL_OW 257
72420: PUSH
72421: LD_INT 3
72423: NONEQUAL
72424: IFFALSE 72465
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
72426: LD_ADDR_EXP 64
72430: PUSH
72431: LD_EXP 64
72435: PPUSH
72436: LD_VAR 0 2
72440: PPUSH
72441: LD_EXP 64
72445: PUSH
72446: LD_VAR 0 2
72450: ARRAY
72451: PUSH
72452: LD_VAR 0 3
72456: DIFF
72457: PPUSH
72458: CALL_OW 1
72462: ST_TO_ADDR
// continue ;
72463: GO 72408
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72465: LD_VAR 0 3
72469: PPUSH
72470: CALL_OW 311
72474: NOT
72475: PUSH
72476: LD_VAR 0 3
72480: PUSH
72481: LD_EXP 55
72485: PUSH
72486: LD_VAR 0 2
72490: ARRAY
72491: PUSH
72492: LD_INT 1
72494: ARRAY
72495: IN
72496: NOT
72497: AND
72498: PUSH
72499: LD_VAR 0 3
72503: PUSH
72504: LD_EXP 55
72508: PUSH
72509: LD_VAR 0 2
72513: ARRAY
72514: PUSH
72515: LD_INT 2
72517: ARRAY
72518: IN
72519: NOT
72520: AND
72521: IFFALSE 72573
// begin if IsInUnit ( j ) then
72523: LD_VAR 0 3
72527: PPUSH
72528: CALL_OW 310
72532: IFFALSE 72543
// ComExitBuilding ( j ) ;
72534: LD_VAR 0 3
72538: PPUSH
72539: CALL_OW 122
// if not HasTask ( j ) then
72543: LD_VAR 0 3
72547: PPUSH
72548: CALL_OW 314
72552: NOT
72553: IFFALSE 72573
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72555: LD_VAR 0 3
72559: PPUSH
72560: LD_VAR 0 7
72564: PUSH
72565: LD_INT 1
72567: ARRAY
72568: PPUSH
72569: CALL_OW 189
// end ; end ;
72573: GO 72408
72575: POP
72576: POP
// end ;
72577: GO 71897
72579: POP
72580: POP
// end ;
72581: LD_VAR 0 1
72585: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72586: LD_INT 0
72588: PPUSH
72589: PPUSH
72590: PPUSH
72591: PPUSH
72592: PPUSH
72593: PPUSH
72594: PPUSH
72595: PPUSH
72596: PPUSH
72597: PPUSH
72598: PPUSH
// if not mc_bases then
72599: LD_EXP 52
72603: NOT
72604: IFFALSE 72608
// exit ;
72606: GO 73410
// for i = 1 to mc_bases do
72608: LD_ADDR_VAR 0 2
72612: PUSH
72613: DOUBLE
72614: LD_INT 1
72616: DEC
72617: ST_TO_ADDR
72618: LD_EXP 52
72622: PUSH
72623: FOR_TO
72624: IFFALSE 73408
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72626: LD_EXP 80
72630: PUSH
72631: LD_VAR 0 2
72635: ARRAY
72636: NOT
72637: PUSH
72638: LD_EXP 55
72642: PUSH
72643: LD_VAR 0 2
72647: ARRAY
72648: PUSH
72649: LD_INT 1
72651: ARRAY
72652: OR
72653: PUSH
72654: LD_EXP 55
72658: PUSH
72659: LD_VAR 0 2
72663: ARRAY
72664: PUSH
72665: LD_INT 2
72667: ARRAY
72668: OR
72669: PUSH
72670: LD_EXP 78
72674: PUSH
72675: LD_VAR 0 2
72679: ARRAY
72680: PPUSH
72681: LD_INT 1
72683: PPUSH
72684: CALL_OW 325
72688: NOT
72689: OR
72690: PUSH
72691: LD_EXP 75
72695: PUSH
72696: LD_VAR 0 2
72700: ARRAY
72701: OR
72702: IFFALSE 72706
// continue ;
72704: GO 72623
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72706: LD_ADDR_VAR 0 8
72710: PUSH
72711: LD_EXP 52
72715: PUSH
72716: LD_VAR 0 2
72720: ARRAY
72721: PPUSH
72722: LD_INT 25
72724: PUSH
72725: LD_INT 4
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 50
72734: PUSH
72735: EMPTY
72736: LIST
72737: PUSH
72738: LD_INT 3
72740: PUSH
72741: LD_INT 60
72743: PUSH
72744: EMPTY
72745: LIST
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: LIST
72755: PPUSH
72756: CALL_OW 72
72760: PUSH
72761: LD_EXP 56
72765: PUSH
72766: LD_VAR 0 2
72770: ARRAY
72771: DIFF
72772: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72773: LD_ADDR_VAR 0 9
72777: PUSH
72778: LD_EXP 52
72782: PUSH
72783: LD_VAR 0 2
72787: ARRAY
72788: PPUSH
72789: LD_INT 2
72791: PUSH
72792: LD_INT 30
72794: PUSH
72795: LD_INT 0
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 30
72804: PUSH
72805: LD_INT 1
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: LIST
72816: PPUSH
72817: CALL_OW 72
72821: ST_TO_ADDR
// if not tmp or not dep then
72822: LD_VAR 0 8
72826: NOT
72827: PUSH
72828: LD_VAR 0 9
72832: NOT
72833: OR
72834: IFFALSE 72838
// continue ;
72836: GO 72623
// side := GetSide ( tmp [ 1 ] ) ;
72838: LD_ADDR_VAR 0 11
72842: PUSH
72843: LD_VAR 0 8
72847: PUSH
72848: LD_INT 1
72850: ARRAY
72851: PPUSH
72852: CALL_OW 255
72856: ST_TO_ADDR
// dep := dep [ 1 ] ;
72857: LD_ADDR_VAR 0 9
72861: PUSH
72862: LD_VAR 0 9
72866: PUSH
72867: LD_INT 1
72869: ARRAY
72870: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72871: LD_ADDR_VAR 0 7
72875: PUSH
72876: LD_EXP 80
72880: PUSH
72881: LD_VAR 0 2
72885: ARRAY
72886: PPUSH
72887: LD_INT 22
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 25
72899: PUSH
72900: LD_INT 12
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PPUSH
72911: CALL_OW 70
72915: PUSH
72916: LD_INT 22
72918: PUSH
72919: LD_INT 0
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 25
72928: PUSH
72929: LD_INT 12
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 91
72938: PUSH
72939: LD_VAR 0 9
72943: PUSH
72944: LD_INT 20
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: LIST
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: LIST
72956: PPUSH
72957: CALL_OW 69
72961: UNION
72962: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72963: LD_ADDR_VAR 0 10
72967: PUSH
72968: LD_EXP 80
72972: PUSH
72973: LD_VAR 0 2
72977: ARRAY
72978: PPUSH
72979: LD_INT 81
72981: PUSH
72982: LD_VAR 0 11
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PPUSH
72991: CALL_OW 70
72995: ST_TO_ADDR
// if not apes or danger_at_area then
72996: LD_VAR 0 7
73000: NOT
73001: PUSH
73002: LD_VAR 0 10
73006: OR
73007: IFFALSE 73057
// begin if mc_taming [ i ] then
73009: LD_EXP 83
73013: PUSH
73014: LD_VAR 0 2
73018: ARRAY
73019: IFFALSE 73055
// begin MC_Reset ( i , 121 ) ;
73021: LD_VAR 0 2
73025: PPUSH
73026: LD_INT 121
73028: PPUSH
73029: CALL 58492 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
73033: LD_ADDR_EXP 83
73037: PUSH
73038: LD_EXP 83
73042: PPUSH
73043: LD_VAR 0 2
73047: PPUSH
73048: EMPTY
73049: PPUSH
73050: CALL_OW 1
73054: ST_TO_ADDR
// end ; continue ;
73055: GO 72623
// end ; for j in tmp do
73057: LD_ADDR_VAR 0 3
73061: PUSH
73062: LD_VAR 0 8
73066: PUSH
73067: FOR_IN
73068: IFFALSE 73404
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
73070: LD_VAR 0 3
73074: PUSH
73075: LD_EXP 83
73079: PUSH
73080: LD_VAR 0 2
73084: ARRAY
73085: IN
73086: NOT
73087: PUSH
73088: LD_EXP 83
73092: PUSH
73093: LD_VAR 0 2
73097: ARRAY
73098: PUSH
73099: LD_INT 3
73101: LESS
73102: AND
73103: IFFALSE 73161
// begin SetTag ( j , 121 ) ;
73105: LD_VAR 0 3
73109: PPUSH
73110: LD_INT 121
73112: PPUSH
73113: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
73117: LD_ADDR_EXP 83
73121: PUSH
73122: LD_EXP 83
73126: PPUSH
73127: LD_VAR 0 2
73131: PUSH
73132: LD_EXP 83
73136: PUSH
73137: LD_VAR 0 2
73141: ARRAY
73142: PUSH
73143: LD_INT 1
73145: PLUS
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PPUSH
73151: LD_VAR 0 3
73155: PPUSH
73156: CALL 18419 0 3
73160: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
73161: LD_VAR 0 3
73165: PUSH
73166: LD_EXP 83
73170: PUSH
73171: LD_VAR 0 2
73175: ARRAY
73176: IN
73177: IFFALSE 73402
// begin if GetClass ( j ) <> 4 then
73179: LD_VAR 0 3
73183: PPUSH
73184: CALL_OW 257
73188: PUSH
73189: LD_INT 4
73191: NONEQUAL
73192: IFFALSE 73245
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
73194: LD_ADDR_EXP 83
73198: PUSH
73199: LD_EXP 83
73203: PPUSH
73204: LD_VAR 0 2
73208: PPUSH
73209: LD_EXP 83
73213: PUSH
73214: LD_VAR 0 2
73218: ARRAY
73219: PUSH
73220: LD_VAR 0 3
73224: DIFF
73225: PPUSH
73226: CALL_OW 1
73230: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73231: LD_VAR 0 3
73235: PPUSH
73236: LD_INT 0
73238: PPUSH
73239: CALL_OW 109
// continue ;
73243: GO 73067
// end ; if IsInUnit ( j ) then
73245: LD_VAR 0 3
73249: PPUSH
73250: CALL_OW 310
73254: IFFALSE 73265
// ComExitBuilding ( j ) ;
73256: LD_VAR 0 3
73260: PPUSH
73261: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
73265: LD_ADDR_VAR 0 6
73269: PUSH
73270: LD_VAR 0 7
73274: PPUSH
73275: LD_VAR 0 3
73279: PPUSH
73280: CALL_OW 74
73284: ST_TO_ADDR
// if not ape then
73285: LD_VAR 0 6
73289: NOT
73290: IFFALSE 73294
// break ;
73292: GO 73404
// x := GetX ( ape ) ;
73294: LD_ADDR_VAR 0 4
73298: PUSH
73299: LD_VAR 0 6
73303: PPUSH
73304: CALL_OW 250
73308: ST_TO_ADDR
// y := GetY ( ape ) ;
73309: LD_ADDR_VAR 0 5
73313: PUSH
73314: LD_VAR 0 6
73318: PPUSH
73319: CALL_OW 251
73323: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73324: LD_VAR 0 4
73328: PPUSH
73329: LD_VAR 0 5
73333: PPUSH
73334: CALL_OW 488
73338: NOT
73339: PUSH
73340: LD_VAR 0 11
73344: PPUSH
73345: LD_VAR 0 4
73349: PPUSH
73350: LD_VAR 0 5
73354: PPUSH
73355: LD_INT 20
73357: PPUSH
73358: CALL 19315 0 4
73362: PUSH
73363: LD_INT 4
73365: ARRAY
73366: OR
73367: IFFALSE 73371
// break ;
73369: GO 73404
// if not HasTask ( j ) then
73371: LD_VAR 0 3
73375: PPUSH
73376: CALL_OW 314
73380: NOT
73381: IFFALSE 73402
// ComTameXY ( j , x , y ) ;
73383: LD_VAR 0 3
73387: PPUSH
73388: LD_VAR 0 4
73392: PPUSH
73393: LD_VAR 0 5
73397: PPUSH
73398: CALL_OW 131
// end ; end ;
73402: GO 73067
73404: POP
73405: POP
// end ;
73406: GO 72623
73408: POP
73409: POP
// end ;
73410: LD_VAR 0 1
73414: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
73415: LD_INT 0
73417: PPUSH
73418: PPUSH
73419: PPUSH
73420: PPUSH
73421: PPUSH
73422: PPUSH
73423: PPUSH
73424: PPUSH
// if not mc_bases then
73425: LD_EXP 52
73429: NOT
73430: IFFALSE 73434
// exit ;
73432: GO 74060
// for i = 1 to mc_bases do
73434: LD_ADDR_VAR 0 2
73438: PUSH
73439: DOUBLE
73440: LD_INT 1
73442: DEC
73443: ST_TO_ADDR
73444: LD_EXP 52
73448: PUSH
73449: FOR_TO
73450: IFFALSE 74058
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
73452: LD_EXP 81
73456: PUSH
73457: LD_VAR 0 2
73461: ARRAY
73462: NOT
73463: PUSH
73464: LD_EXP 81
73468: PUSH
73469: LD_VAR 0 2
73473: ARRAY
73474: PPUSH
73475: LD_INT 25
73477: PUSH
73478: LD_INT 12
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PPUSH
73485: CALL_OW 72
73489: NOT
73490: OR
73491: IFFALSE 73495
// continue ;
73493: GO 73449
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73495: LD_ADDR_VAR 0 5
73499: PUSH
73500: LD_EXP 81
73504: PUSH
73505: LD_VAR 0 2
73509: ARRAY
73510: PUSH
73511: LD_INT 1
73513: ARRAY
73514: PPUSH
73515: CALL_OW 255
73519: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73520: LD_VAR 0 5
73524: PPUSH
73525: LD_INT 2
73527: PPUSH
73528: CALL_OW 325
73532: IFFALSE 73785
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73534: LD_ADDR_VAR 0 4
73538: PUSH
73539: LD_EXP 81
73543: PUSH
73544: LD_VAR 0 2
73548: ARRAY
73549: PPUSH
73550: LD_INT 25
73552: PUSH
73553: LD_INT 16
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PPUSH
73560: CALL_OW 72
73564: ST_TO_ADDR
// if tmp < 6 then
73565: LD_VAR 0 4
73569: PUSH
73570: LD_INT 6
73572: LESS
73573: IFFALSE 73785
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73575: LD_ADDR_VAR 0 6
73579: PUSH
73580: LD_EXP 52
73584: PUSH
73585: LD_VAR 0 2
73589: ARRAY
73590: PPUSH
73591: LD_INT 2
73593: PUSH
73594: LD_INT 30
73596: PUSH
73597: LD_INT 0
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 30
73606: PUSH
73607: LD_INT 1
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: LIST
73618: PPUSH
73619: CALL_OW 72
73623: ST_TO_ADDR
// if depot then
73624: LD_VAR 0 6
73628: IFFALSE 73785
// begin selected := 0 ;
73630: LD_ADDR_VAR 0 7
73634: PUSH
73635: LD_INT 0
73637: ST_TO_ADDR
// for j in depot do
73638: LD_ADDR_VAR 0 3
73642: PUSH
73643: LD_VAR 0 6
73647: PUSH
73648: FOR_IN
73649: IFFALSE 73680
// begin if UnitsInside ( j ) < 6 then
73651: LD_VAR 0 3
73655: PPUSH
73656: CALL_OW 313
73660: PUSH
73661: LD_INT 6
73663: LESS
73664: IFFALSE 73678
// begin selected := j ;
73666: LD_ADDR_VAR 0 7
73670: PUSH
73671: LD_VAR 0 3
73675: ST_TO_ADDR
// break ;
73676: GO 73680
// end ; end ;
73678: GO 73648
73680: POP
73681: POP
// if selected then
73682: LD_VAR 0 7
73686: IFFALSE 73785
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73688: LD_ADDR_VAR 0 3
73692: PUSH
73693: LD_EXP 81
73697: PUSH
73698: LD_VAR 0 2
73702: ARRAY
73703: PPUSH
73704: LD_INT 25
73706: PUSH
73707: LD_INT 12
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PPUSH
73714: CALL_OW 72
73718: PUSH
73719: FOR_IN
73720: IFFALSE 73783
// if not HasTask ( j ) then
73722: LD_VAR 0 3
73726: PPUSH
73727: CALL_OW 314
73731: NOT
73732: IFFALSE 73781
// begin if not IsInUnit ( j ) then
73734: LD_VAR 0 3
73738: PPUSH
73739: CALL_OW 310
73743: NOT
73744: IFFALSE 73760
// ComEnterUnit ( j , selected ) ;
73746: LD_VAR 0 3
73750: PPUSH
73751: LD_VAR 0 7
73755: PPUSH
73756: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73760: LD_VAR 0 3
73764: PPUSH
73765: LD_INT 16
73767: PPUSH
73768: CALL_OW 183
// AddComExitBuilding ( j ) ;
73772: LD_VAR 0 3
73776: PPUSH
73777: CALL_OW 182
// end ;
73781: GO 73719
73783: POP
73784: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73785: LD_VAR 0 5
73789: PPUSH
73790: LD_INT 11
73792: PPUSH
73793: CALL_OW 325
73797: IFFALSE 74056
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73799: LD_ADDR_VAR 0 4
73803: PUSH
73804: LD_EXP 81
73808: PUSH
73809: LD_VAR 0 2
73813: ARRAY
73814: PPUSH
73815: LD_INT 25
73817: PUSH
73818: LD_INT 16
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PPUSH
73825: CALL_OW 72
73829: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73830: LD_VAR 0 4
73834: PUSH
73835: LD_INT 6
73837: GREATEREQUAL
73838: PUSH
73839: LD_VAR 0 5
73843: PPUSH
73844: LD_INT 2
73846: PPUSH
73847: CALL_OW 325
73851: NOT
73852: OR
73853: IFFALSE 74056
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73855: LD_ADDR_VAR 0 8
73859: PUSH
73860: LD_EXP 52
73864: PUSH
73865: LD_VAR 0 2
73869: ARRAY
73870: PPUSH
73871: LD_INT 2
73873: PUSH
73874: LD_INT 30
73876: PUSH
73877: LD_INT 4
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 30
73886: PUSH
73887: LD_INT 5
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: PPUSH
73899: CALL_OW 72
73903: ST_TO_ADDR
// if barracks then
73904: LD_VAR 0 8
73908: IFFALSE 74056
// begin selected := 0 ;
73910: LD_ADDR_VAR 0 7
73914: PUSH
73915: LD_INT 0
73917: ST_TO_ADDR
// for j in barracks do
73918: LD_ADDR_VAR 0 3
73922: PUSH
73923: LD_VAR 0 8
73927: PUSH
73928: FOR_IN
73929: IFFALSE 73960
// begin if UnitsInside ( j ) < 6 then
73931: LD_VAR 0 3
73935: PPUSH
73936: CALL_OW 313
73940: PUSH
73941: LD_INT 6
73943: LESS
73944: IFFALSE 73958
// begin selected := j ;
73946: LD_ADDR_VAR 0 7
73950: PUSH
73951: LD_VAR 0 3
73955: ST_TO_ADDR
// break ;
73956: GO 73960
// end ; end ;
73958: GO 73928
73960: POP
73961: POP
// if selected then
73962: LD_VAR 0 7
73966: IFFALSE 74056
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73968: LD_ADDR_VAR 0 3
73972: PUSH
73973: LD_EXP 81
73977: PUSH
73978: LD_VAR 0 2
73982: ARRAY
73983: PPUSH
73984: LD_INT 25
73986: PUSH
73987: LD_INT 12
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PPUSH
73994: CALL_OW 72
73998: PUSH
73999: FOR_IN
74000: IFFALSE 74054
// if not IsInUnit ( j ) and not HasTask ( j ) then
74002: LD_VAR 0 3
74006: PPUSH
74007: CALL_OW 310
74011: NOT
74012: PUSH
74013: LD_VAR 0 3
74017: PPUSH
74018: CALL_OW 314
74022: NOT
74023: AND
74024: IFFALSE 74052
// begin ComEnterUnit ( j , selected ) ;
74026: LD_VAR 0 3
74030: PPUSH
74031: LD_VAR 0 7
74035: PPUSH
74036: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
74040: LD_VAR 0 3
74044: PPUSH
74045: LD_INT 15
74047: PPUSH
74048: CALL_OW 183
// end ;
74052: GO 73999
74054: POP
74055: POP
// end ; end ; end ; end ; end ;
74056: GO 73449
74058: POP
74059: POP
// end ;
74060: LD_VAR 0 1
74064: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
74065: LD_INT 0
74067: PPUSH
74068: PPUSH
74069: PPUSH
74070: PPUSH
// if not mc_bases then
74071: LD_EXP 52
74075: NOT
74076: IFFALSE 74080
// exit ;
74078: GO 74258
// for i = 1 to mc_bases do
74080: LD_ADDR_VAR 0 2
74084: PUSH
74085: DOUBLE
74086: LD_INT 1
74088: DEC
74089: ST_TO_ADDR
74090: LD_EXP 52
74094: PUSH
74095: FOR_TO
74096: IFFALSE 74256
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
74098: LD_ADDR_VAR 0 4
74102: PUSH
74103: LD_EXP 52
74107: PUSH
74108: LD_VAR 0 2
74112: ARRAY
74113: PPUSH
74114: LD_INT 25
74116: PUSH
74117: LD_INT 9
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PPUSH
74124: CALL_OW 72
74128: ST_TO_ADDR
// if not tmp then
74129: LD_VAR 0 4
74133: NOT
74134: IFFALSE 74138
// continue ;
74136: GO 74095
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
74138: LD_EXP 78
74142: PUSH
74143: LD_VAR 0 2
74147: ARRAY
74148: PPUSH
74149: LD_INT 29
74151: PPUSH
74152: CALL_OW 325
74156: NOT
74157: PUSH
74158: LD_EXP 78
74162: PUSH
74163: LD_VAR 0 2
74167: ARRAY
74168: PPUSH
74169: LD_INT 28
74171: PPUSH
74172: CALL_OW 325
74176: NOT
74177: AND
74178: IFFALSE 74182
// continue ;
74180: GO 74095
// for j in tmp do
74182: LD_ADDR_VAR 0 3
74186: PUSH
74187: LD_VAR 0 4
74191: PUSH
74192: FOR_IN
74193: IFFALSE 74252
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74195: LD_VAR 0 3
74199: PUSH
74200: LD_EXP 55
74204: PUSH
74205: LD_VAR 0 2
74209: ARRAY
74210: PUSH
74211: LD_INT 1
74213: ARRAY
74214: IN
74215: NOT
74216: PUSH
74217: LD_VAR 0 3
74221: PUSH
74222: LD_EXP 55
74226: PUSH
74227: LD_VAR 0 2
74231: ARRAY
74232: PUSH
74233: LD_INT 2
74235: ARRAY
74236: IN
74237: NOT
74238: AND
74239: IFFALSE 74250
// ComSpaceTimeShoot ( j ) ;
74241: LD_VAR 0 3
74245: PPUSH
74246: CALL 12005 0 1
74250: GO 74192
74252: POP
74253: POP
// end ;
74254: GO 74095
74256: POP
74257: POP
// end ;
74258: LD_VAR 0 1
74262: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
74263: LD_INT 0
74265: PPUSH
74266: PPUSH
74267: PPUSH
74268: PPUSH
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
// if not mc_bases then
74274: LD_EXP 52
74278: NOT
74279: IFFALSE 74283
// exit ;
74281: GO 74905
// for i = 1 to mc_bases do
74283: LD_ADDR_VAR 0 2
74287: PUSH
74288: DOUBLE
74289: LD_INT 1
74291: DEC
74292: ST_TO_ADDR
74293: LD_EXP 52
74297: PUSH
74298: FOR_TO
74299: IFFALSE 74903
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
74301: LD_EXP 87
74305: PUSH
74306: LD_VAR 0 2
74310: ARRAY
74311: NOT
74312: PUSH
74313: LD_INT 38
74315: PPUSH
74316: LD_EXP 78
74320: PUSH
74321: LD_VAR 0 2
74325: ARRAY
74326: PPUSH
74327: CALL_OW 321
74331: PUSH
74332: LD_INT 2
74334: NONEQUAL
74335: OR
74336: IFFALSE 74340
// continue ;
74338: GO 74298
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
74340: LD_ADDR_VAR 0 8
74344: PUSH
74345: LD_EXP 52
74349: PUSH
74350: LD_VAR 0 2
74354: ARRAY
74355: PPUSH
74356: LD_INT 30
74358: PUSH
74359: LD_INT 34
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PPUSH
74366: CALL_OW 72
74370: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
74371: LD_ADDR_VAR 0 9
74375: PUSH
74376: LD_EXP 52
74380: PUSH
74381: LD_VAR 0 2
74385: ARRAY
74386: PPUSH
74387: LD_INT 25
74389: PUSH
74390: LD_INT 4
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PPUSH
74397: CALL_OW 72
74401: PPUSH
74402: LD_INT 0
74404: PPUSH
74405: CALL 51705 0 2
74409: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
74410: LD_VAR 0 9
74414: NOT
74415: PUSH
74416: LD_VAR 0 8
74420: NOT
74421: OR
74422: PUSH
74423: LD_EXP 52
74427: PUSH
74428: LD_VAR 0 2
74432: ARRAY
74433: PPUSH
74434: LD_INT 124
74436: PPUSH
74437: CALL 51705 0 2
74441: OR
74442: IFFALSE 74446
// continue ;
74444: GO 74298
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
74446: LD_EXP 88
74450: PUSH
74451: LD_VAR 0 2
74455: ARRAY
74456: PUSH
74457: LD_EXP 87
74461: PUSH
74462: LD_VAR 0 2
74466: ARRAY
74467: LESS
74468: PUSH
74469: LD_EXP 88
74473: PUSH
74474: LD_VAR 0 2
74478: ARRAY
74479: PUSH
74480: LD_VAR 0 8
74484: LESS
74485: AND
74486: IFFALSE 74901
// begin tmp := sci [ 1 ] ;
74488: LD_ADDR_VAR 0 7
74492: PUSH
74493: LD_VAR 0 9
74497: PUSH
74498: LD_INT 1
74500: ARRAY
74501: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
74502: LD_VAR 0 7
74506: PPUSH
74507: LD_INT 124
74509: PPUSH
74510: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
74514: LD_ADDR_VAR 0 3
74518: PUSH
74519: DOUBLE
74520: LD_EXP 87
74524: PUSH
74525: LD_VAR 0 2
74529: ARRAY
74530: INC
74531: ST_TO_ADDR
74532: LD_EXP 87
74536: PUSH
74537: LD_VAR 0 2
74541: ARRAY
74542: PUSH
74543: FOR_DOWNTO
74544: IFFALSE 74887
// begin if IsInUnit ( tmp ) then
74546: LD_VAR 0 7
74550: PPUSH
74551: CALL_OW 310
74555: IFFALSE 74566
// ComExitBuilding ( tmp ) ;
74557: LD_VAR 0 7
74561: PPUSH
74562: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
74566: LD_INT 35
74568: PPUSH
74569: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
74573: LD_VAR 0 7
74577: PPUSH
74578: CALL_OW 310
74582: NOT
74583: PUSH
74584: LD_VAR 0 7
74588: PPUSH
74589: CALL_OW 314
74593: NOT
74594: AND
74595: IFFALSE 74566
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
74597: LD_ADDR_VAR 0 6
74601: PUSH
74602: LD_VAR 0 7
74606: PPUSH
74607: CALL_OW 250
74611: PUSH
74612: LD_VAR 0 7
74616: PPUSH
74617: CALL_OW 251
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74626: LD_INT 35
74628: PPUSH
74629: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
74633: LD_ADDR_VAR 0 4
74637: PUSH
74638: LD_EXP 87
74642: PUSH
74643: LD_VAR 0 2
74647: ARRAY
74648: PUSH
74649: LD_VAR 0 3
74653: ARRAY
74654: PUSH
74655: LD_INT 1
74657: ARRAY
74658: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
74659: LD_ADDR_VAR 0 5
74663: PUSH
74664: LD_EXP 87
74668: PUSH
74669: LD_VAR 0 2
74673: ARRAY
74674: PUSH
74675: LD_VAR 0 3
74679: ARRAY
74680: PUSH
74681: LD_INT 2
74683: ARRAY
74684: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
74685: LD_VAR 0 7
74689: PPUSH
74690: LD_INT 10
74692: PPUSH
74693: CALL 21012 0 2
74697: PUSH
74698: LD_INT 4
74700: ARRAY
74701: IFFALSE 74739
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
74703: LD_VAR 0 7
74707: PPUSH
74708: LD_VAR 0 6
74712: PUSH
74713: LD_INT 1
74715: ARRAY
74716: PPUSH
74717: LD_VAR 0 6
74721: PUSH
74722: LD_INT 2
74724: ARRAY
74725: PPUSH
74726: CALL_OW 111
// wait ( 0 0$10 ) ;
74730: LD_INT 350
74732: PPUSH
74733: CALL_OW 67
// end else
74737: GO 74765
// begin ComMoveXY ( tmp , x , y ) ;
74739: LD_VAR 0 7
74743: PPUSH
74744: LD_VAR 0 4
74748: PPUSH
74749: LD_VAR 0 5
74753: PPUSH
74754: CALL_OW 111
// wait ( 0 0$3 ) ;
74758: LD_INT 105
74760: PPUSH
74761: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
74765: LD_VAR 0 7
74769: PPUSH
74770: LD_VAR 0 4
74774: PPUSH
74775: LD_VAR 0 5
74779: PPUSH
74780: CALL_OW 307
74784: IFFALSE 74626
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
74786: LD_VAR 0 7
74790: PPUSH
74791: LD_VAR 0 4
74795: PPUSH
74796: LD_VAR 0 5
74800: PPUSH
74801: LD_VAR 0 8
74805: PUSH
74806: LD_VAR 0 3
74810: ARRAY
74811: PPUSH
74812: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
74816: LD_INT 35
74818: PPUSH
74819: CALL_OW 67
// until not HasTask ( tmp ) ;
74823: LD_VAR 0 7
74827: PPUSH
74828: CALL_OW 314
74832: NOT
74833: IFFALSE 74816
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
74835: LD_ADDR_EXP 88
74839: PUSH
74840: LD_EXP 88
74844: PPUSH
74845: LD_VAR 0 2
74849: PUSH
74850: LD_EXP 88
74854: PUSH
74855: LD_VAR 0 2
74859: ARRAY
74860: PUSH
74861: LD_INT 1
74863: PLUS
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PPUSH
74869: LD_VAR 0 8
74873: PUSH
74874: LD_VAR 0 3
74878: ARRAY
74879: PPUSH
74880: CALL 18419 0 3
74884: ST_TO_ADDR
// end ;
74885: GO 74543
74887: POP
74888: POP
// MC_Reset ( i , 124 ) ;
74889: LD_VAR 0 2
74893: PPUSH
74894: LD_INT 124
74896: PPUSH
74897: CALL 58492 0 2
// end ; end ;
74901: GO 74298
74903: POP
74904: POP
// end ;
74905: LD_VAR 0 1
74909: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74910: LD_INT 0
74912: PPUSH
74913: PPUSH
74914: PPUSH
// if not mc_bases then
74915: LD_EXP 52
74919: NOT
74920: IFFALSE 74924
// exit ;
74922: GO 75530
// for i = 1 to mc_bases do
74924: LD_ADDR_VAR 0 2
74928: PUSH
74929: DOUBLE
74930: LD_INT 1
74932: DEC
74933: ST_TO_ADDR
74934: LD_EXP 52
74938: PUSH
74939: FOR_TO
74940: IFFALSE 75528
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74942: LD_ADDR_VAR 0 3
74946: PUSH
74947: LD_EXP 52
74951: PUSH
74952: LD_VAR 0 2
74956: ARRAY
74957: PPUSH
74958: LD_INT 25
74960: PUSH
74961: LD_INT 4
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PPUSH
74968: CALL_OW 72
74972: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
74973: LD_VAR 0 3
74977: NOT
74978: PUSH
74979: LD_EXP 89
74983: PUSH
74984: LD_VAR 0 2
74988: ARRAY
74989: NOT
74990: OR
74991: PUSH
74992: LD_EXP 52
74996: PUSH
74997: LD_VAR 0 2
75001: ARRAY
75002: PPUSH
75003: LD_INT 2
75005: PUSH
75006: LD_INT 30
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 30
75018: PUSH
75019: LD_INT 1
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: LIST
75030: PPUSH
75031: CALL_OW 72
75035: NOT
75036: OR
75037: IFFALSE 75087
// begin if mc_deposits_finder [ i ] then
75039: LD_EXP 90
75043: PUSH
75044: LD_VAR 0 2
75048: ARRAY
75049: IFFALSE 75085
// begin MC_Reset ( i , 125 ) ;
75051: LD_VAR 0 2
75055: PPUSH
75056: LD_INT 125
75058: PPUSH
75059: CALL 58492 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75063: LD_ADDR_EXP 90
75067: PUSH
75068: LD_EXP 90
75072: PPUSH
75073: LD_VAR 0 2
75077: PPUSH
75078: EMPTY
75079: PPUSH
75080: CALL_OW 1
75084: ST_TO_ADDR
// end ; continue ;
75085: GO 74939
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
75087: LD_EXP 89
75091: PUSH
75092: LD_VAR 0 2
75096: ARRAY
75097: PUSH
75098: LD_INT 1
75100: ARRAY
75101: PUSH
75102: LD_INT 3
75104: ARRAY
75105: PUSH
75106: LD_INT 1
75108: EQUAL
75109: PUSH
75110: LD_INT 20
75112: PPUSH
75113: LD_EXP 78
75117: PUSH
75118: LD_VAR 0 2
75122: ARRAY
75123: PPUSH
75124: CALL_OW 321
75128: PUSH
75129: LD_INT 2
75131: NONEQUAL
75132: AND
75133: IFFALSE 75183
// begin if mc_deposits_finder [ i ] then
75135: LD_EXP 90
75139: PUSH
75140: LD_VAR 0 2
75144: ARRAY
75145: IFFALSE 75181
// begin MC_Reset ( i , 125 ) ;
75147: LD_VAR 0 2
75151: PPUSH
75152: LD_INT 125
75154: PPUSH
75155: CALL 58492 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75159: LD_ADDR_EXP 90
75163: PUSH
75164: LD_EXP 90
75168: PPUSH
75169: LD_VAR 0 2
75173: PPUSH
75174: EMPTY
75175: PPUSH
75176: CALL_OW 1
75180: ST_TO_ADDR
// end ; continue ;
75181: GO 74939
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
75183: LD_EXP 89
75187: PUSH
75188: LD_VAR 0 2
75192: ARRAY
75193: PUSH
75194: LD_INT 1
75196: ARRAY
75197: PUSH
75198: LD_INT 1
75200: ARRAY
75201: PPUSH
75202: LD_EXP 89
75206: PUSH
75207: LD_VAR 0 2
75211: ARRAY
75212: PUSH
75213: LD_INT 1
75215: ARRAY
75216: PUSH
75217: LD_INT 2
75219: ARRAY
75220: PPUSH
75221: LD_EXP 78
75225: PUSH
75226: LD_VAR 0 2
75230: ARRAY
75231: PPUSH
75232: CALL_OW 440
75236: IFFALSE 75279
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
75238: LD_ADDR_EXP 89
75242: PUSH
75243: LD_EXP 89
75247: PPUSH
75248: LD_VAR 0 2
75252: PPUSH
75253: LD_EXP 89
75257: PUSH
75258: LD_VAR 0 2
75262: ARRAY
75263: PPUSH
75264: LD_INT 1
75266: PPUSH
75267: CALL_OW 3
75271: PPUSH
75272: CALL_OW 1
75276: ST_TO_ADDR
75277: GO 75526
// begin if not mc_deposits_finder [ i ] then
75279: LD_EXP 90
75283: PUSH
75284: LD_VAR 0 2
75288: ARRAY
75289: NOT
75290: IFFALSE 75342
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
75292: LD_ADDR_EXP 90
75296: PUSH
75297: LD_EXP 90
75301: PPUSH
75302: LD_VAR 0 2
75306: PPUSH
75307: LD_VAR 0 3
75311: PUSH
75312: LD_INT 1
75314: ARRAY
75315: PUSH
75316: EMPTY
75317: LIST
75318: PPUSH
75319: CALL_OW 1
75323: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
75324: LD_VAR 0 3
75328: PUSH
75329: LD_INT 1
75331: ARRAY
75332: PPUSH
75333: LD_INT 125
75335: PPUSH
75336: CALL_OW 109
// end else
75340: GO 75526
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
75342: LD_EXP 90
75346: PUSH
75347: LD_VAR 0 2
75351: ARRAY
75352: PUSH
75353: LD_INT 1
75355: ARRAY
75356: PPUSH
75357: CALL_OW 310
75361: IFFALSE 75384
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
75363: LD_EXP 90
75367: PUSH
75368: LD_VAR 0 2
75372: ARRAY
75373: PUSH
75374: LD_INT 1
75376: ARRAY
75377: PPUSH
75378: CALL_OW 122
75382: GO 75526
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
75384: LD_EXP 90
75388: PUSH
75389: LD_VAR 0 2
75393: ARRAY
75394: PUSH
75395: LD_INT 1
75397: ARRAY
75398: PPUSH
75399: CALL_OW 314
75403: NOT
75404: PUSH
75405: LD_EXP 90
75409: PUSH
75410: LD_VAR 0 2
75414: ARRAY
75415: PUSH
75416: LD_INT 1
75418: ARRAY
75419: PPUSH
75420: LD_EXP 89
75424: PUSH
75425: LD_VAR 0 2
75429: ARRAY
75430: PUSH
75431: LD_INT 1
75433: ARRAY
75434: PUSH
75435: LD_INT 1
75437: ARRAY
75438: PPUSH
75439: LD_EXP 89
75443: PUSH
75444: LD_VAR 0 2
75448: ARRAY
75449: PUSH
75450: LD_INT 1
75452: ARRAY
75453: PUSH
75454: LD_INT 2
75456: ARRAY
75457: PPUSH
75458: CALL_OW 297
75462: PUSH
75463: LD_INT 6
75465: GREATER
75466: AND
75467: IFFALSE 75526
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
75469: LD_EXP 90
75473: PUSH
75474: LD_VAR 0 2
75478: ARRAY
75479: PUSH
75480: LD_INT 1
75482: ARRAY
75483: PPUSH
75484: LD_EXP 89
75488: PUSH
75489: LD_VAR 0 2
75493: ARRAY
75494: PUSH
75495: LD_INT 1
75497: ARRAY
75498: PUSH
75499: LD_INT 1
75501: ARRAY
75502: PPUSH
75503: LD_EXP 89
75507: PUSH
75508: LD_VAR 0 2
75512: ARRAY
75513: PUSH
75514: LD_INT 1
75516: ARRAY
75517: PUSH
75518: LD_INT 2
75520: ARRAY
75521: PPUSH
75522: CALL_OW 111
// end ; end ; end ;
75526: GO 74939
75528: POP
75529: POP
// end ;
75530: LD_VAR 0 1
75534: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
75535: LD_INT 0
75537: PPUSH
75538: PPUSH
75539: PPUSH
75540: PPUSH
75541: PPUSH
75542: PPUSH
75543: PPUSH
75544: PPUSH
75545: PPUSH
75546: PPUSH
75547: PPUSH
// if not mc_bases then
75548: LD_EXP 52
75552: NOT
75553: IFFALSE 75557
// exit ;
75555: GO 76497
// for i = 1 to mc_bases do
75557: LD_ADDR_VAR 0 2
75561: PUSH
75562: DOUBLE
75563: LD_INT 1
75565: DEC
75566: ST_TO_ADDR
75567: LD_EXP 52
75571: PUSH
75572: FOR_TO
75573: IFFALSE 76495
// begin if not mc_bases [ i ] or mc_scan [ i ] then
75575: LD_EXP 52
75579: PUSH
75580: LD_VAR 0 2
75584: ARRAY
75585: NOT
75586: PUSH
75587: LD_EXP 75
75591: PUSH
75592: LD_VAR 0 2
75596: ARRAY
75597: OR
75598: IFFALSE 75602
// continue ;
75600: GO 75572
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75602: LD_ADDR_VAR 0 7
75606: PUSH
75607: LD_EXP 52
75611: PUSH
75612: LD_VAR 0 2
75616: ARRAY
75617: PUSH
75618: LD_INT 1
75620: ARRAY
75621: PPUSH
75622: CALL_OW 248
75626: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
75627: LD_VAR 0 7
75631: PUSH
75632: LD_INT 3
75634: EQUAL
75635: PUSH
75636: LD_EXP 71
75640: PUSH
75641: LD_VAR 0 2
75645: ARRAY
75646: PUSH
75647: LD_EXP 74
75651: PUSH
75652: LD_VAR 0 2
75656: ARRAY
75657: UNION
75658: PPUSH
75659: LD_INT 33
75661: PUSH
75662: LD_INT 2
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PPUSH
75669: CALL_OW 72
75673: NOT
75674: OR
75675: IFFALSE 75679
// continue ;
75677: GO 75572
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75679: LD_ADDR_VAR 0 9
75683: PUSH
75684: LD_EXP 52
75688: PUSH
75689: LD_VAR 0 2
75693: ARRAY
75694: PPUSH
75695: LD_INT 30
75697: PUSH
75698: LD_INT 36
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PPUSH
75705: CALL_OW 72
75709: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
75710: LD_ADDR_VAR 0 10
75714: PUSH
75715: LD_EXP 71
75719: PUSH
75720: LD_VAR 0 2
75724: ARRAY
75725: PPUSH
75726: LD_INT 34
75728: PUSH
75729: LD_INT 31
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: PPUSH
75736: CALL_OW 72
75740: ST_TO_ADDR
// if not cts and not mcts then
75741: LD_VAR 0 9
75745: NOT
75746: PUSH
75747: LD_VAR 0 10
75751: NOT
75752: AND
75753: IFFALSE 75757
// continue ;
75755: GO 75572
// x := cts ;
75757: LD_ADDR_VAR 0 11
75761: PUSH
75762: LD_VAR 0 9
75766: ST_TO_ADDR
// if not x then
75767: LD_VAR 0 11
75771: NOT
75772: IFFALSE 75784
// x := mcts ;
75774: LD_ADDR_VAR 0 11
75778: PUSH
75779: LD_VAR 0 10
75783: ST_TO_ADDR
// if not x then
75784: LD_VAR 0 11
75788: NOT
75789: IFFALSE 75793
// continue ;
75791: GO 75572
// if mc_remote_driver [ i ] then
75793: LD_EXP 92
75797: PUSH
75798: LD_VAR 0 2
75802: ARRAY
75803: IFFALSE 76190
// for j in mc_remote_driver [ i ] do
75805: LD_ADDR_VAR 0 3
75809: PUSH
75810: LD_EXP 92
75814: PUSH
75815: LD_VAR 0 2
75819: ARRAY
75820: PUSH
75821: FOR_IN
75822: IFFALSE 76188
// begin if GetClass ( j ) <> 3 then
75824: LD_VAR 0 3
75828: PPUSH
75829: CALL_OW 257
75833: PUSH
75834: LD_INT 3
75836: NONEQUAL
75837: IFFALSE 75890
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
75839: LD_ADDR_EXP 92
75843: PUSH
75844: LD_EXP 92
75848: PPUSH
75849: LD_VAR 0 2
75853: PPUSH
75854: LD_EXP 92
75858: PUSH
75859: LD_VAR 0 2
75863: ARRAY
75864: PUSH
75865: LD_VAR 0 3
75869: DIFF
75870: PPUSH
75871: CALL_OW 1
75875: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75876: LD_VAR 0 3
75880: PPUSH
75881: LD_INT 0
75883: PPUSH
75884: CALL_OW 109
// continue ;
75888: GO 75821
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
75890: LD_EXP 71
75894: PUSH
75895: LD_VAR 0 2
75899: ARRAY
75900: PPUSH
75901: LD_INT 34
75903: PUSH
75904: LD_INT 31
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 58
75913: PUSH
75914: EMPTY
75915: LIST
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PPUSH
75921: CALL_OW 72
75925: PUSH
75926: LD_VAR 0 3
75930: PPUSH
75931: CALL 51793 0 1
75935: NOT
75936: AND
75937: IFFALSE 76008
// begin if IsInUnit ( j ) then
75939: LD_VAR 0 3
75943: PPUSH
75944: CALL_OW 310
75948: IFFALSE 75959
// ComExitBuilding ( j ) ;
75950: LD_VAR 0 3
75954: PPUSH
75955: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
75959: LD_VAR 0 3
75963: PPUSH
75964: LD_EXP 71
75968: PUSH
75969: LD_VAR 0 2
75973: ARRAY
75974: PPUSH
75975: LD_INT 34
75977: PUSH
75978: LD_INT 31
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 58
75987: PUSH
75988: EMPTY
75989: LIST
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PPUSH
75995: CALL_OW 72
75999: PUSH
76000: LD_INT 1
76002: ARRAY
76003: PPUSH
76004: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
76008: LD_VAR 0 3
76012: PPUSH
76013: CALL_OW 310
76017: NOT
76018: PUSH
76019: LD_VAR 0 3
76023: PPUSH
76024: CALL_OW 310
76028: PPUSH
76029: CALL_OW 266
76033: PUSH
76034: LD_INT 36
76036: NONEQUAL
76037: PUSH
76038: LD_VAR 0 3
76042: PPUSH
76043: CALL 51793 0 1
76047: NOT
76048: AND
76049: OR
76050: IFFALSE 76186
// begin if IsInUnit ( j ) then
76052: LD_VAR 0 3
76056: PPUSH
76057: CALL_OW 310
76061: IFFALSE 76072
// ComExitBuilding ( j ) ;
76063: LD_VAR 0 3
76067: PPUSH
76068: CALL_OW 122
// ct := 0 ;
76072: LD_ADDR_VAR 0 8
76076: PUSH
76077: LD_INT 0
76079: ST_TO_ADDR
// for k in x do
76080: LD_ADDR_VAR 0 4
76084: PUSH
76085: LD_VAR 0 11
76089: PUSH
76090: FOR_IN
76091: IFFALSE 76164
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
76093: LD_VAR 0 4
76097: PPUSH
76098: CALL_OW 264
76102: PUSH
76103: LD_INT 31
76105: EQUAL
76106: PUSH
76107: LD_VAR 0 4
76111: PPUSH
76112: CALL_OW 311
76116: NOT
76117: AND
76118: PUSH
76119: LD_VAR 0 4
76123: PPUSH
76124: CALL_OW 266
76128: PUSH
76129: LD_INT 36
76131: EQUAL
76132: PUSH
76133: LD_VAR 0 4
76137: PPUSH
76138: CALL_OW 313
76142: PUSH
76143: LD_INT 3
76145: LESS
76146: AND
76147: OR
76148: IFFALSE 76162
// begin ct := k ;
76150: LD_ADDR_VAR 0 8
76154: PUSH
76155: LD_VAR 0 4
76159: ST_TO_ADDR
// break ;
76160: GO 76164
// end ;
76162: GO 76090
76164: POP
76165: POP
// if ct then
76166: LD_VAR 0 8
76170: IFFALSE 76186
// ComEnterUnit ( j , ct ) ;
76172: LD_VAR 0 3
76176: PPUSH
76177: LD_VAR 0 8
76181: PPUSH
76182: CALL_OW 120
// end ; end ;
76186: GO 75821
76188: POP
76189: POP
// places := 0 ;
76190: LD_ADDR_VAR 0 5
76194: PUSH
76195: LD_INT 0
76197: ST_TO_ADDR
// for j = 1 to x do
76198: LD_ADDR_VAR 0 3
76202: PUSH
76203: DOUBLE
76204: LD_INT 1
76206: DEC
76207: ST_TO_ADDR
76208: LD_VAR 0 11
76212: PUSH
76213: FOR_TO
76214: IFFALSE 76290
// if GetWeapon ( x [ j ] ) = ar_control_tower then
76216: LD_VAR 0 11
76220: PUSH
76221: LD_VAR 0 3
76225: ARRAY
76226: PPUSH
76227: CALL_OW 264
76231: PUSH
76232: LD_INT 31
76234: EQUAL
76235: IFFALSE 76253
// places := places + 1 else
76237: LD_ADDR_VAR 0 5
76241: PUSH
76242: LD_VAR 0 5
76246: PUSH
76247: LD_INT 1
76249: PLUS
76250: ST_TO_ADDR
76251: GO 76288
// if GetBType ( x [ j ] ) = b_control_tower then
76253: LD_VAR 0 11
76257: PUSH
76258: LD_VAR 0 3
76262: ARRAY
76263: PPUSH
76264: CALL_OW 266
76268: PUSH
76269: LD_INT 36
76271: EQUAL
76272: IFFALSE 76288
// places := places + 3 ;
76274: LD_ADDR_VAR 0 5
76278: PUSH
76279: LD_VAR 0 5
76283: PUSH
76284: LD_INT 3
76286: PLUS
76287: ST_TO_ADDR
76288: GO 76213
76290: POP
76291: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
76292: LD_VAR 0 5
76296: PUSH
76297: LD_INT 0
76299: EQUAL
76300: PUSH
76301: LD_VAR 0 5
76305: PUSH
76306: LD_EXP 92
76310: PUSH
76311: LD_VAR 0 2
76315: ARRAY
76316: LESSEQUAL
76317: OR
76318: IFFALSE 76322
// continue ;
76320: GO 75572
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
76322: LD_ADDR_VAR 0 6
76326: PUSH
76327: LD_EXP 52
76331: PUSH
76332: LD_VAR 0 2
76336: ARRAY
76337: PPUSH
76338: LD_INT 25
76340: PUSH
76341: LD_INT 3
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PPUSH
76348: CALL_OW 72
76352: PUSH
76353: LD_EXP 92
76357: PUSH
76358: LD_VAR 0 2
76362: ARRAY
76363: DIFF
76364: PPUSH
76365: LD_INT 3
76367: PPUSH
76368: CALL 52693 0 2
76372: ST_TO_ADDR
// for j in tmp do
76373: LD_ADDR_VAR 0 3
76377: PUSH
76378: LD_VAR 0 6
76382: PUSH
76383: FOR_IN
76384: IFFALSE 76419
// if GetTag ( j ) > 0 then
76386: LD_VAR 0 3
76390: PPUSH
76391: CALL_OW 110
76395: PUSH
76396: LD_INT 0
76398: GREATER
76399: IFFALSE 76417
// tmp := tmp diff j ;
76401: LD_ADDR_VAR 0 6
76405: PUSH
76406: LD_VAR 0 6
76410: PUSH
76411: LD_VAR 0 3
76415: DIFF
76416: ST_TO_ADDR
76417: GO 76383
76419: POP
76420: POP
// if not tmp then
76421: LD_VAR 0 6
76425: NOT
76426: IFFALSE 76430
// continue ;
76428: GO 75572
// if places then
76430: LD_VAR 0 5
76434: IFFALSE 76493
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
76436: LD_ADDR_EXP 92
76440: PUSH
76441: LD_EXP 92
76445: PPUSH
76446: LD_VAR 0 2
76450: PPUSH
76451: LD_EXP 92
76455: PUSH
76456: LD_VAR 0 2
76460: ARRAY
76461: PUSH
76462: LD_VAR 0 6
76466: PUSH
76467: LD_INT 1
76469: ARRAY
76470: UNION
76471: PPUSH
76472: CALL_OW 1
76476: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
76477: LD_VAR 0 6
76481: PUSH
76482: LD_INT 1
76484: ARRAY
76485: PPUSH
76486: LD_INT 126
76488: PPUSH
76489: CALL_OW 109
// end ; end ;
76493: GO 75572
76495: POP
76496: POP
// end ;
76497: LD_VAR 0 1
76501: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
76502: LD_INT 0
76504: PPUSH
76505: PPUSH
76506: PPUSH
76507: PPUSH
76508: PPUSH
76509: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
76510: LD_VAR 0 1
76514: NOT
76515: PUSH
76516: LD_VAR 0 2
76520: NOT
76521: OR
76522: PUSH
76523: LD_VAR 0 3
76527: NOT
76528: OR
76529: PUSH
76530: LD_VAR 0 4
76534: PUSH
76535: LD_INT 1
76537: PUSH
76538: LD_INT 2
76540: PUSH
76541: LD_INT 3
76543: PUSH
76544: LD_INT 4
76546: PUSH
76547: LD_INT 5
76549: PUSH
76550: LD_INT 8
76552: PUSH
76553: LD_INT 9
76555: PUSH
76556: LD_INT 15
76558: PUSH
76559: LD_INT 16
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: LIST
76566: LIST
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: IN
76573: NOT
76574: OR
76575: IFFALSE 76579
// exit ;
76577: GO 77479
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
76579: LD_ADDR_VAR 0 2
76583: PUSH
76584: LD_VAR 0 2
76588: PPUSH
76589: LD_INT 21
76591: PUSH
76592: LD_INT 3
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: PUSH
76599: LD_INT 24
76601: PUSH
76602: LD_INT 250
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PPUSH
76613: CALL_OW 72
76617: ST_TO_ADDR
// case class of 1 , 15 :
76618: LD_VAR 0 4
76622: PUSH
76623: LD_INT 1
76625: DOUBLE
76626: EQUAL
76627: IFTRUE 76637
76629: LD_INT 15
76631: DOUBLE
76632: EQUAL
76633: IFTRUE 76637
76635: GO 76722
76637: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
76638: LD_ADDR_VAR 0 8
76642: PUSH
76643: LD_VAR 0 2
76647: PPUSH
76648: LD_INT 2
76650: PUSH
76651: LD_INT 30
76653: PUSH
76654: LD_INT 32
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: LD_INT 30
76663: PUSH
76664: LD_INT 31
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: LIST
76675: PPUSH
76676: CALL_OW 72
76680: PUSH
76681: LD_VAR 0 2
76685: PPUSH
76686: LD_INT 2
76688: PUSH
76689: LD_INT 30
76691: PUSH
76692: LD_INT 4
76694: PUSH
76695: EMPTY
76696: LIST
76697: LIST
76698: PUSH
76699: LD_INT 30
76701: PUSH
76702: LD_INT 5
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: LIST
76713: PPUSH
76714: CALL_OW 72
76718: ADD
76719: ST_TO_ADDR
76720: GO 76968
76722: LD_INT 2
76724: DOUBLE
76725: EQUAL
76726: IFTRUE 76736
76728: LD_INT 16
76730: DOUBLE
76731: EQUAL
76732: IFTRUE 76736
76734: GO 76782
76736: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76737: LD_ADDR_VAR 0 8
76741: PUSH
76742: LD_VAR 0 2
76746: PPUSH
76747: LD_INT 2
76749: PUSH
76750: LD_INT 30
76752: PUSH
76753: LD_INT 0
76755: PUSH
76756: EMPTY
76757: LIST
76758: LIST
76759: PUSH
76760: LD_INT 30
76762: PUSH
76763: LD_INT 1
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: LIST
76774: PPUSH
76775: CALL_OW 72
76779: ST_TO_ADDR
76780: GO 76968
76782: LD_INT 3
76784: DOUBLE
76785: EQUAL
76786: IFTRUE 76790
76788: GO 76836
76790: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76791: LD_ADDR_VAR 0 8
76795: PUSH
76796: LD_VAR 0 2
76800: PPUSH
76801: LD_INT 2
76803: PUSH
76804: LD_INT 30
76806: PUSH
76807: LD_INT 2
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 30
76816: PUSH
76817: LD_INT 3
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: LIST
76828: PPUSH
76829: CALL_OW 72
76833: ST_TO_ADDR
76834: GO 76968
76836: LD_INT 4
76838: DOUBLE
76839: EQUAL
76840: IFTRUE 76844
76842: GO 76901
76844: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76845: LD_ADDR_VAR 0 8
76849: PUSH
76850: LD_VAR 0 2
76854: PPUSH
76855: LD_INT 2
76857: PUSH
76858: LD_INT 30
76860: PUSH
76861: LD_INT 6
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: LD_INT 30
76870: PUSH
76871: LD_INT 7
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 30
76880: PUSH
76881: LD_INT 8
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: PPUSH
76894: CALL_OW 72
76898: ST_TO_ADDR
76899: GO 76968
76901: LD_INT 5
76903: DOUBLE
76904: EQUAL
76905: IFTRUE 76921
76907: LD_INT 8
76909: DOUBLE
76910: EQUAL
76911: IFTRUE 76921
76913: LD_INT 9
76915: DOUBLE
76916: EQUAL
76917: IFTRUE 76921
76919: GO 76967
76921: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76922: LD_ADDR_VAR 0 8
76926: PUSH
76927: LD_VAR 0 2
76931: PPUSH
76932: LD_INT 2
76934: PUSH
76935: LD_INT 30
76937: PUSH
76938: LD_INT 4
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: PUSH
76945: LD_INT 30
76947: PUSH
76948: LD_INT 5
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: LIST
76959: PPUSH
76960: CALL_OW 72
76964: ST_TO_ADDR
76965: GO 76968
76967: POP
// if not tmp then
76968: LD_VAR 0 8
76972: NOT
76973: IFFALSE 76977
// exit ;
76975: GO 77479
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
76977: LD_VAR 0 4
76981: PUSH
76982: LD_INT 1
76984: PUSH
76985: LD_INT 15
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: IN
76992: PUSH
76993: LD_EXP 61
76997: PUSH
76998: LD_VAR 0 1
77002: ARRAY
77003: AND
77004: IFFALSE 77160
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
77006: LD_ADDR_VAR 0 9
77010: PUSH
77011: LD_EXP 61
77015: PUSH
77016: LD_VAR 0 1
77020: ARRAY
77021: PUSH
77022: LD_INT 1
77024: ARRAY
77025: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
77026: LD_VAR 0 9
77030: PUSH
77031: LD_EXP 62
77035: PUSH
77036: LD_VAR 0 1
77040: ARRAY
77041: IN
77042: NOT
77043: IFFALSE 77158
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
77045: LD_ADDR_EXP 62
77049: PUSH
77050: LD_EXP 62
77054: PPUSH
77055: LD_VAR 0 1
77059: PUSH
77060: LD_EXP 62
77064: PUSH
77065: LD_VAR 0 1
77069: ARRAY
77070: PUSH
77071: LD_INT 1
77073: PLUS
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PPUSH
77079: LD_VAR 0 9
77083: PPUSH
77084: CALL 18419 0 3
77088: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
77089: LD_ADDR_EXP 61
77093: PUSH
77094: LD_EXP 61
77098: PPUSH
77099: LD_VAR 0 1
77103: PPUSH
77104: LD_EXP 61
77108: PUSH
77109: LD_VAR 0 1
77113: ARRAY
77114: PUSH
77115: LD_VAR 0 9
77119: DIFF
77120: PPUSH
77121: CALL_OW 1
77125: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
77126: LD_VAR 0 3
77130: PPUSH
77131: LD_EXP 62
77135: PUSH
77136: LD_VAR 0 1
77140: ARRAY
77141: PUSH
77142: LD_EXP 62
77146: PUSH
77147: LD_VAR 0 1
77151: ARRAY
77152: ARRAY
77153: PPUSH
77154: CALL_OW 120
// end ; exit ;
77158: GO 77479
// end ; if tmp > 1 then
77160: LD_VAR 0 8
77164: PUSH
77165: LD_INT 1
77167: GREATER
77168: IFFALSE 77272
// for i = 2 to tmp do
77170: LD_ADDR_VAR 0 6
77174: PUSH
77175: DOUBLE
77176: LD_INT 2
77178: DEC
77179: ST_TO_ADDR
77180: LD_VAR 0 8
77184: PUSH
77185: FOR_TO
77186: IFFALSE 77270
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
77188: LD_VAR 0 8
77192: PUSH
77193: LD_VAR 0 6
77197: ARRAY
77198: PPUSH
77199: CALL_OW 461
77203: PUSH
77204: LD_INT 6
77206: EQUAL
77207: IFFALSE 77268
// begin x := tmp [ i ] ;
77209: LD_ADDR_VAR 0 9
77213: PUSH
77214: LD_VAR 0 8
77218: PUSH
77219: LD_VAR 0 6
77223: ARRAY
77224: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
77225: LD_ADDR_VAR 0 8
77229: PUSH
77230: LD_VAR 0 8
77234: PPUSH
77235: LD_VAR 0 6
77239: PPUSH
77240: CALL_OW 3
77244: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
77245: LD_ADDR_VAR 0 8
77249: PUSH
77250: LD_VAR 0 8
77254: PPUSH
77255: LD_INT 1
77257: PPUSH
77258: LD_VAR 0 9
77262: PPUSH
77263: CALL_OW 2
77267: ST_TO_ADDR
// end ;
77268: GO 77185
77270: POP
77271: POP
// for i in tmp do
77272: LD_ADDR_VAR 0 6
77276: PUSH
77277: LD_VAR 0 8
77281: PUSH
77282: FOR_IN
77283: IFFALSE 77352
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
77285: LD_VAR 0 6
77289: PPUSH
77290: CALL_OW 313
77294: PUSH
77295: LD_INT 6
77297: LESS
77298: PUSH
77299: LD_VAR 0 6
77303: PPUSH
77304: CALL_OW 266
77308: PUSH
77309: LD_INT 31
77311: PUSH
77312: LD_INT 32
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: IN
77319: NOT
77320: AND
77321: PUSH
77322: LD_VAR 0 6
77326: PPUSH
77327: CALL_OW 313
77331: PUSH
77332: LD_INT 0
77334: EQUAL
77335: OR
77336: IFFALSE 77350
// begin j := i ;
77338: LD_ADDR_VAR 0 7
77342: PUSH
77343: LD_VAR 0 6
77347: ST_TO_ADDR
// break ;
77348: GO 77352
// end ; end ;
77350: GO 77282
77352: POP
77353: POP
// if j then
77354: LD_VAR 0 7
77358: IFFALSE 77376
// ComEnterUnit ( unit , j ) else
77360: LD_VAR 0 3
77364: PPUSH
77365: LD_VAR 0 7
77369: PPUSH
77370: CALL_OW 120
77374: GO 77479
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77376: LD_ADDR_VAR 0 10
77380: PUSH
77381: LD_VAR 0 2
77385: PPUSH
77386: LD_INT 2
77388: PUSH
77389: LD_INT 30
77391: PUSH
77392: LD_INT 0
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: PUSH
77399: LD_INT 30
77401: PUSH
77402: LD_INT 1
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: LIST
77413: PPUSH
77414: CALL_OW 72
77418: ST_TO_ADDR
// if depot then
77419: LD_VAR 0 10
77423: IFFALSE 77479
// begin depot := NearestUnitToUnit ( depot , unit ) ;
77425: LD_ADDR_VAR 0 10
77429: PUSH
77430: LD_VAR 0 10
77434: PPUSH
77435: LD_VAR 0 3
77439: PPUSH
77440: CALL_OW 74
77444: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
77445: LD_VAR 0 3
77449: PPUSH
77450: LD_VAR 0 10
77454: PPUSH
77455: CALL_OW 296
77459: PUSH
77460: LD_INT 10
77462: GREATER
77463: IFFALSE 77479
// ComStandNearbyBuilding ( unit , depot ) ;
77465: LD_VAR 0 3
77469: PPUSH
77470: LD_VAR 0 10
77474: PPUSH
77475: CALL 12622 0 2
// end ; end ; end ;
77479: LD_VAR 0 5
77483: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
77484: LD_INT 0
77486: PPUSH
77487: PPUSH
77488: PPUSH
77489: PPUSH
// if not mc_bases then
77490: LD_EXP 52
77494: NOT
77495: IFFALSE 77499
// exit ;
77497: GO 77738
// for i = 1 to mc_bases do
77499: LD_ADDR_VAR 0 2
77503: PUSH
77504: DOUBLE
77505: LD_INT 1
77507: DEC
77508: ST_TO_ADDR
77509: LD_EXP 52
77513: PUSH
77514: FOR_TO
77515: IFFALSE 77736
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
77517: LD_ADDR_VAR 0 4
77521: PUSH
77522: LD_EXP 52
77526: PUSH
77527: LD_VAR 0 2
77531: ARRAY
77532: PPUSH
77533: LD_INT 21
77535: PUSH
77536: LD_INT 1
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PPUSH
77543: CALL_OW 72
77547: PUSH
77548: LD_EXP 81
77552: PUSH
77553: LD_VAR 0 2
77557: ARRAY
77558: UNION
77559: ST_TO_ADDR
// if not tmp then
77560: LD_VAR 0 4
77564: NOT
77565: IFFALSE 77569
// continue ;
77567: GO 77514
// for j in tmp do
77569: LD_ADDR_VAR 0 3
77573: PUSH
77574: LD_VAR 0 4
77578: PUSH
77579: FOR_IN
77580: IFFALSE 77732
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
77582: LD_VAR 0 3
77586: PPUSH
77587: CALL_OW 110
77591: NOT
77592: PUSH
77593: LD_VAR 0 3
77597: PPUSH
77598: CALL_OW 314
77602: NOT
77603: AND
77604: PUSH
77605: LD_VAR 0 3
77609: PPUSH
77610: CALL_OW 311
77614: NOT
77615: AND
77616: PUSH
77617: LD_VAR 0 3
77621: PPUSH
77622: CALL_OW 310
77626: NOT
77627: AND
77628: PUSH
77629: LD_VAR 0 3
77633: PUSH
77634: LD_EXP 55
77638: PUSH
77639: LD_VAR 0 2
77643: ARRAY
77644: PUSH
77645: LD_INT 1
77647: ARRAY
77648: IN
77649: NOT
77650: AND
77651: PUSH
77652: LD_VAR 0 3
77656: PUSH
77657: LD_EXP 55
77661: PUSH
77662: LD_VAR 0 2
77666: ARRAY
77667: PUSH
77668: LD_INT 2
77670: ARRAY
77671: IN
77672: NOT
77673: AND
77674: PUSH
77675: LD_VAR 0 3
77679: PUSH
77680: LD_EXP 64
77684: PUSH
77685: LD_VAR 0 2
77689: ARRAY
77690: IN
77691: NOT
77692: AND
77693: IFFALSE 77730
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77695: LD_VAR 0 2
77699: PPUSH
77700: LD_EXP 52
77704: PUSH
77705: LD_VAR 0 2
77709: ARRAY
77710: PPUSH
77711: LD_VAR 0 3
77715: PPUSH
77716: LD_VAR 0 3
77720: PPUSH
77721: CALL_OW 257
77725: PPUSH
77726: CALL 76502 0 4
// end ;
77730: GO 77579
77732: POP
77733: POP
// end ;
77734: GO 77514
77736: POP
77737: POP
// end ;
77738: LD_VAR 0 1
77742: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77743: LD_INT 0
77745: PPUSH
77746: PPUSH
77747: PPUSH
77748: PPUSH
77749: PPUSH
77750: PPUSH
// if not mc_bases [ base ] then
77751: LD_EXP 52
77755: PUSH
77756: LD_VAR 0 1
77760: ARRAY
77761: NOT
77762: IFFALSE 77766
// exit ;
77764: GO 77948
// tmp := [ ] ;
77766: LD_ADDR_VAR 0 6
77770: PUSH
77771: EMPTY
77772: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77773: LD_ADDR_VAR 0 7
77777: PUSH
77778: LD_VAR 0 3
77782: PPUSH
77783: LD_INT 0
77785: PPUSH
77786: CALL_OW 517
77790: ST_TO_ADDR
// if not list then
77791: LD_VAR 0 7
77795: NOT
77796: IFFALSE 77800
// exit ;
77798: GO 77948
// for i = 1 to amount do
77800: LD_ADDR_VAR 0 5
77804: PUSH
77805: DOUBLE
77806: LD_INT 1
77808: DEC
77809: ST_TO_ADDR
77810: LD_VAR 0 2
77814: PUSH
77815: FOR_TO
77816: IFFALSE 77896
// begin x := rand ( 1 , list [ 1 ] ) ;
77818: LD_ADDR_VAR 0 8
77822: PUSH
77823: LD_INT 1
77825: PPUSH
77826: LD_VAR 0 7
77830: PUSH
77831: LD_INT 1
77833: ARRAY
77834: PPUSH
77835: CALL_OW 12
77839: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77840: LD_ADDR_VAR 0 6
77844: PUSH
77845: LD_VAR 0 6
77849: PPUSH
77850: LD_VAR 0 5
77854: PPUSH
77855: LD_VAR 0 7
77859: PUSH
77860: LD_INT 1
77862: ARRAY
77863: PUSH
77864: LD_VAR 0 8
77868: ARRAY
77869: PUSH
77870: LD_VAR 0 7
77874: PUSH
77875: LD_INT 2
77877: ARRAY
77878: PUSH
77879: LD_VAR 0 8
77883: ARRAY
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: PPUSH
77889: CALL_OW 1
77893: ST_TO_ADDR
// end ;
77894: GO 77815
77896: POP
77897: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77898: LD_ADDR_EXP 65
77902: PUSH
77903: LD_EXP 65
77907: PPUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: LD_VAR 0 6
77917: PPUSH
77918: CALL_OW 1
77922: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77923: LD_ADDR_EXP 67
77927: PUSH
77928: LD_EXP 67
77932: PPUSH
77933: LD_VAR 0 1
77937: PPUSH
77938: LD_VAR 0 3
77942: PPUSH
77943: CALL_OW 1
77947: ST_TO_ADDR
// end ;
77948: LD_VAR 0 4
77952: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77953: LD_INT 0
77955: PPUSH
// if not mc_bases [ base ] then
77956: LD_EXP 52
77960: PUSH
77961: LD_VAR 0 1
77965: ARRAY
77966: NOT
77967: IFFALSE 77971
// exit ;
77969: GO 77996
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
77971: LD_ADDR_EXP 57
77975: PUSH
77976: LD_EXP 57
77980: PPUSH
77981: LD_VAR 0 1
77985: PPUSH
77986: LD_VAR 0 2
77990: PPUSH
77991: CALL_OW 1
77995: ST_TO_ADDR
// end ;
77996: LD_VAR 0 3
78000: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
78001: LD_INT 0
78003: PPUSH
// if not mc_bases [ base ] then
78004: LD_EXP 52
78008: PUSH
78009: LD_VAR 0 1
78013: ARRAY
78014: NOT
78015: IFFALSE 78019
// exit ;
78017: GO 78056
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
78019: LD_ADDR_EXP 57
78023: PUSH
78024: LD_EXP 57
78028: PPUSH
78029: LD_VAR 0 1
78033: PPUSH
78034: LD_EXP 57
78038: PUSH
78039: LD_VAR 0 1
78043: ARRAY
78044: PUSH
78045: LD_VAR 0 2
78049: UNION
78050: PPUSH
78051: CALL_OW 1
78055: ST_TO_ADDR
// end ;
78056: LD_VAR 0 3
78060: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
78061: LD_INT 0
78063: PPUSH
// if not mc_bases [ base ] then
78064: LD_EXP 52
78068: PUSH
78069: LD_VAR 0 1
78073: ARRAY
78074: NOT
78075: IFFALSE 78079
// exit ;
78077: GO 78104
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
78079: LD_ADDR_EXP 73
78083: PUSH
78084: LD_EXP 73
78088: PPUSH
78089: LD_VAR 0 1
78093: PPUSH
78094: LD_VAR 0 2
78098: PPUSH
78099: CALL_OW 1
78103: ST_TO_ADDR
// end ;
78104: LD_VAR 0 3
78108: RET
// export function MC_InsertProduceList ( base , components ) ; begin
78109: LD_INT 0
78111: PPUSH
// if not mc_bases [ base ] then
78112: LD_EXP 52
78116: PUSH
78117: LD_VAR 0 1
78121: ARRAY
78122: NOT
78123: IFFALSE 78127
// exit ;
78125: GO 78164
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
78127: LD_ADDR_EXP 73
78131: PUSH
78132: LD_EXP 73
78136: PPUSH
78137: LD_VAR 0 1
78141: PPUSH
78142: LD_EXP 73
78146: PUSH
78147: LD_VAR 0 1
78151: ARRAY
78152: PUSH
78153: LD_VAR 0 2
78157: ADD
78158: PPUSH
78159: CALL_OW 1
78163: ST_TO_ADDR
// end ;
78164: LD_VAR 0 3
78168: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
78169: LD_INT 0
78171: PPUSH
// if not mc_bases [ base ] then
78172: LD_EXP 52
78176: PUSH
78177: LD_VAR 0 1
78181: ARRAY
78182: NOT
78183: IFFALSE 78187
// exit ;
78185: GO 78241
// mc_defender := Replace ( mc_defender , base , deflist ) ;
78187: LD_ADDR_EXP 74
78191: PUSH
78192: LD_EXP 74
78196: PPUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: LD_VAR 0 2
78206: PPUSH
78207: CALL_OW 1
78211: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
78212: LD_ADDR_EXP 63
78216: PUSH
78217: LD_EXP 63
78221: PPUSH
78222: LD_VAR 0 1
78226: PPUSH
78227: LD_VAR 0 2
78231: PUSH
78232: LD_INT 0
78234: PLUS
78235: PPUSH
78236: CALL_OW 1
78240: ST_TO_ADDR
// end ;
78241: LD_VAR 0 3
78245: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
78246: LD_INT 0
78248: PPUSH
// if not mc_bases [ base ] then
78249: LD_EXP 52
78253: PUSH
78254: LD_VAR 0 1
78258: ARRAY
78259: NOT
78260: IFFALSE 78264
// exit ;
78262: GO 78289
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
78264: LD_ADDR_EXP 63
78268: PUSH
78269: LD_EXP 63
78273: PPUSH
78274: LD_VAR 0 1
78278: PPUSH
78279: LD_VAR 0 2
78283: PPUSH
78284: CALL_OW 1
78288: ST_TO_ADDR
// end ;
78289: LD_VAR 0 3
78293: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
78294: LD_INT 0
78296: PPUSH
78297: PPUSH
78298: PPUSH
78299: PPUSH
// if not mc_bases [ base ] then
78300: LD_EXP 52
78304: PUSH
78305: LD_VAR 0 1
78309: ARRAY
78310: NOT
78311: IFFALSE 78315
// exit ;
78313: GO 78380
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
78315: LD_ADDR_EXP 72
78319: PUSH
78320: LD_EXP 72
78324: PPUSH
78325: LD_VAR 0 1
78329: PUSH
78330: LD_EXP 72
78334: PUSH
78335: LD_VAR 0 1
78339: ARRAY
78340: PUSH
78341: LD_INT 1
78343: PLUS
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: PPUSH
78349: LD_VAR 0 1
78353: PUSH
78354: LD_VAR 0 2
78358: PUSH
78359: LD_VAR 0 3
78363: PUSH
78364: LD_VAR 0 4
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: LIST
78373: LIST
78374: PPUSH
78375: CALL 18419 0 3
78379: ST_TO_ADDR
// end ;
78380: LD_VAR 0 5
78384: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
78385: LD_INT 0
78387: PPUSH
// if not mc_bases [ base ] then
78388: LD_EXP 52
78392: PUSH
78393: LD_VAR 0 1
78397: ARRAY
78398: NOT
78399: IFFALSE 78403
// exit ;
78401: GO 78428
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
78403: LD_ADDR_EXP 89
78407: PUSH
78408: LD_EXP 89
78412: PPUSH
78413: LD_VAR 0 1
78417: PPUSH
78418: LD_VAR 0 2
78422: PPUSH
78423: CALL_OW 1
78427: ST_TO_ADDR
// end ;
78428: LD_VAR 0 3
78432: RET
// export function MC_GetMinesField ( base ) ; begin
78433: LD_INT 0
78435: PPUSH
// result := mc_mines [ base ] ;
78436: LD_ADDR_VAR 0 2
78440: PUSH
78441: LD_EXP 65
78445: PUSH
78446: LD_VAR 0 1
78450: ARRAY
78451: ST_TO_ADDR
// end ;
78452: LD_VAR 0 2
78456: RET
// export function MC_GetProduceList ( base ) ; begin
78457: LD_INT 0
78459: PPUSH
// result := mc_produce [ base ] ;
78460: LD_ADDR_VAR 0 2
78464: PUSH
78465: LD_EXP 73
78469: PUSH
78470: LD_VAR 0 1
78474: ARRAY
78475: ST_TO_ADDR
// end ;
78476: LD_VAR 0 2
78480: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
78481: LD_INT 0
78483: PPUSH
78484: PPUSH
// if not mc_bases then
78485: LD_EXP 52
78489: NOT
78490: IFFALSE 78494
// exit ;
78492: GO 78559
// if mc_bases [ base ] then
78494: LD_EXP 52
78498: PUSH
78499: LD_VAR 0 1
78503: ARRAY
78504: IFFALSE 78559
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78506: LD_ADDR_VAR 0 3
78510: PUSH
78511: LD_EXP 52
78515: PUSH
78516: LD_VAR 0 1
78520: ARRAY
78521: PPUSH
78522: LD_INT 30
78524: PUSH
78525: LD_VAR 0 2
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: PPUSH
78534: CALL_OW 72
78538: ST_TO_ADDR
// if result then
78539: LD_VAR 0 3
78543: IFFALSE 78559
// result := result [ 1 ] ;
78545: LD_ADDR_VAR 0 3
78549: PUSH
78550: LD_VAR 0 3
78554: PUSH
78555: LD_INT 1
78557: ARRAY
78558: ST_TO_ADDR
// end ; end ;
78559: LD_VAR 0 3
78563: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
78564: LD_INT 0
78566: PPUSH
78567: PPUSH
// if not mc_bases then
78568: LD_EXP 52
78572: NOT
78573: IFFALSE 78577
// exit ;
78575: GO 78622
// if mc_bases [ base ] then
78577: LD_EXP 52
78581: PUSH
78582: LD_VAR 0 1
78586: ARRAY
78587: IFFALSE 78622
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78589: LD_ADDR_VAR 0 3
78593: PUSH
78594: LD_EXP 52
78598: PUSH
78599: LD_VAR 0 1
78603: ARRAY
78604: PPUSH
78605: LD_INT 30
78607: PUSH
78608: LD_VAR 0 2
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PPUSH
78617: CALL_OW 72
78621: ST_TO_ADDR
// end ;
78622: LD_VAR 0 3
78626: RET
// export function MC_SetTame ( base , area ) ; begin
78627: LD_INT 0
78629: PPUSH
// if not mc_bases or not base then
78630: LD_EXP 52
78634: NOT
78635: PUSH
78636: LD_VAR 0 1
78640: NOT
78641: OR
78642: IFFALSE 78646
// exit ;
78644: GO 78671
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
78646: LD_ADDR_EXP 80
78650: PUSH
78651: LD_EXP 80
78655: PPUSH
78656: LD_VAR 0 1
78660: PPUSH
78661: LD_VAR 0 2
78665: PPUSH
78666: CALL_OW 1
78670: ST_TO_ADDR
// end ;
78671: LD_VAR 0 3
78675: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
78676: LD_INT 0
78678: PPUSH
78679: PPUSH
// if not mc_bases or not base then
78680: LD_EXP 52
78684: NOT
78685: PUSH
78686: LD_VAR 0 1
78690: NOT
78691: OR
78692: IFFALSE 78696
// exit ;
78694: GO 78798
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78696: LD_ADDR_VAR 0 4
78700: PUSH
78701: LD_EXP 52
78705: PUSH
78706: LD_VAR 0 1
78710: ARRAY
78711: PPUSH
78712: LD_INT 30
78714: PUSH
78715: LD_VAR 0 2
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PPUSH
78724: CALL_OW 72
78728: ST_TO_ADDR
// if not tmp then
78729: LD_VAR 0 4
78733: NOT
78734: IFFALSE 78738
// exit ;
78736: GO 78798
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78738: LD_ADDR_EXP 84
78742: PUSH
78743: LD_EXP 84
78747: PPUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: LD_EXP 84
78757: PUSH
78758: LD_VAR 0 1
78762: ARRAY
78763: PPUSH
78764: LD_EXP 84
78768: PUSH
78769: LD_VAR 0 1
78773: ARRAY
78774: PUSH
78775: LD_INT 1
78777: PLUS
78778: PPUSH
78779: LD_VAR 0 4
78783: PUSH
78784: LD_INT 1
78786: ARRAY
78787: PPUSH
78788: CALL_OW 2
78792: PPUSH
78793: CALL_OW 1
78797: ST_TO_ADDR
// end ;
78798: LD_VAR 0 3
78802: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78803: LD_INT 0
78805: PPUSH
78806: PPUSH
// if not mc_bases or not base or not kinds then
78807: LD_EXP 52
78811: NOT
78812: PUSH
78813: LD_VAR 0 1
78817: NOT
78818: OR
78819: PUSH
78820: LD_VAR 0 2
78824: NOT
78825: OR
78826: IFFALSE 78830
// exit ;
78828: GO 78891
// for i in kinds do
78830: LD_ADDR_VAR 0 4
78834: PUSH
78835: LD_VAR 0 2
78839: PUSH
78840: FOR_IN
78841: IFFALSE 78889
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78843: LD_ADDR_EXP 86
78847: PUSH
78848: LD_EXP 86
78852: PPUSH
78853: LD_VAR 0 1
78857: PUSH
78858: LD_EXP 86
78862: PUSH
78863: LD_VAR 0 1
78867: ARRAY
78868: PUSH
78869: LD_INT 1
78871: PLUS
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: PPUSH
78877: LD_VAR 0 4
78881: PPUSH
78882: CALL 18419 0 3
78886: ST_TO_ADDR
78887: GO 78840
78889: POP
78890: POP
// end ;
78891: LD_VAR 0 3
78895: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78896: LD_INT 0
78898: PPUSH
// if not mc_bases or not base or not areas then
78899: LD_EXP 52
78903: NOT
78904: PUSH
78905: LD_VAR 0 1
78909: NOT
78910: OR
78911: PUSH
78912: LD_VAR 0 2
78916: NOT
78917: OR
78918: IFFALSE 78922
// exit ;
78920: GO 78947
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78922: LD_ADDR_EXP 70
78926: PUSH
78927: LD_EXP 70
78931: PPUSH
78932: LD_VAR 0 1
78936: PPUSH
78937: LD_VAR 0 2
78941: PPUSH
78942: CALL_OW 1
78946: ST_TO_ADDR
// end ;
78947: LD_VAR 0 3
78951: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
78952: LD_INT 0
78954: PPUSH
// if not mc_bases or not base or not teleports_exit then
78955: LD_EXP 52
78959: NOT
78960: PUSH
78961: LD_VAR 0 1
78965: NOT
78966: OR
78967: PUSH
78968: LD_VAR 0 2
78972: NOT
78973: OR
78974: IFFALSE 78978
// exit ;
78976: GO 79003
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
78978: LD_ADDR_EXP 87
78982: PUSH
78983: LD_EXP 87
78987: PPUSH
78988: LD_VAR 0 1
78992: PPUSH
78993: LD_VAR 0 2
78997: PPUSH
78998: CALL_OW 1
79002: ST_TO_ADDR
// end ;
79003: LD_VAR 0 3
79007: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
79008: LD_INT 0
79010: PPUSH
79011: PPUSH
79012: PPUSH
// if not mc_bases or not base or not ext_list then
79013: LD_EXP 52
79017: NOT
79018: PUSH
79019: LD_VAR 0 1
79023: NOT
79024: OR
79025: PUSH
79026: LD_VAR 0 5
79030: NOT
79031: OR
79032: IFFALSE 79036
// exit ;
79034: GO 79209
// tmp := GetFacExtXYD ( x , y , d ) ;
79036: LD_ADDR_VAR 0 8
79040: PUSH
79041: LD_VAR 0 2
79045: PPUSH
79046: LD_VAR 0 3
79050: PPUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: CALL 51823 0 3
79060: ST_TO_ADDR
// if not tmp then
79061: LD_VAR 0 8
79065: NOT
79066: IFFALSE 79070
// exit ;
79068: GO 79209
// for i in tmp do
79070: LD_ADDR_VAR 0 7
79074: PUSH
79075: LD_VAR 0 8
79079: PUSH
79080: FOR_IN
79081: IFFALSE 79207
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
79083: LD_ADDR_EXP 57
79087: PUSH
79088: LD_EXP 57
79092: PPUSH
79093: LD_VAR 0 1
79097: PPUSH
79098: LD_EXP 57
79102: PUSH
79103: LD_VAR 0 1
79107: ARRAY
79108: PPUSH
79109: LD_EXP 57
79113: PUSH
79114: LD_VAR 0 1
79118: ARRAY
79119: PUSH
79120: LD_INT 1
79122: PLUS
79123: PPUSH
79124: LD_VAR 0 5
79128: PUSH
79129: LD_INT 1
79131: ARRAY
79132: PUSH
79133: LD_VAR 0 7
79137: PUSH
79138: LD_INT 1
79140: ARRAY
79141: PUSH
79142: LD_VAR 0 7
79146: PUSH
79147: LD_INT 2
79149: ARRAY
79150: PUSH
79151: LD_VAR 0 7
79155: PUSH
79156: LD_INT 3
79158: ARRAY
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: LIST
79164: LIST
79165: PPUSH
79166: CALL_OW 2
79170: PPUSH
79171: CALL_OW 1
79175: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
79176: LD_ADDR_VAR 0 5
79180: PUSH
79181: LD_VAR 0 5
79185: PPUSH
79186: LD_INT 1
79188: PPUSH
79189: CALL_OW 3
79193: ST_TO_ADDR
// if not ext_list then
79194: LD_VAR 0 5
79198: NOT
79199: IFFALSE 79205
// exit ;
79201: POP
79202: POP
79203: GO 79209
// end ;
79205: GO 79080
79207: POP
79208: POP
// end ;
79209: LD_VAR 0 6
79213: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
79214: LD_INT 0
79216: PPUSH
// if not mc_bases or not base or not weapon_list then
79217: LD_EXP 52
79221: NOT
79222: PUSH
79223: LD_VAR 0 1
79227: NOT
79228: OR
79229: PUSH
79230: LD_VAR 0 2
79234: NOT
79235: OR
79236: IFFALSE 79240
// exit ;
79238: GO 79265
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
79240: LD_ADDR_EXP 91
79244: PUSH
79245: LD_EXP 91
79249: PPUSH
79250: LD_VAR 0 1
79254: PPUSH
79255: LD_VAR 0 2
79259: PPUSH
79260: CALL_OW 1
79264: ST_TO_ADDR
// end ;
79265: LD_VAR 0 3
79269: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
79270: LD_INT 0
79272: PPUSH
// if not mc_bases or not base or not tech_list then
79273: LD_EXP 52
79277: NOT
79278: PUSH
79279: LD_VAR 0 1
79283: NOT
79284: OR
79285: PUSH
79286: LD_VAR 0 2
79290: NOT
79291: OR
79292: IFFALSE 79296
// exit ;
79294: GO 79321
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
79296: LD_ADDR_EXP 79
79300: PUSH
79301: LD_EXP 79
79305: PPUSH
79306: LD_VAR 0 1
79310: PPUSH
79311: LD_VAR 0 2
79315: PPUSH
79316: CALL_OW 1
79320: ST_TO_ADDR
// end ;
79321: LD_VAR 0 3
79325: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
79326: LD_INT 0
79328: PPUSH
// if not mc_bases or not parking_area or not base then
79329: LD_EXP 52
79333: NOT
79334: PUSH
79335: LD_VAR 0 2
79339: NOT
79340: OR
79341: PUSH
79342: LD_VAR 0 1
79346: NOT
79347: OR
79348: IFFALSE 79352
// exit ;
79350: GO 79377
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
79352: LD_ADDR_EXP 76
79356: PUSH
79357: LD_EXP 76
79361: PPUSH
79362: LD_VAR 0 1
79366: PPUSH
79367: LD_VAR 0 2
79371: PPUSH
79372: CALL_OW 1
79376: ST_TO_ADDR
// end ;
79377: LD_VAR 0 3
79381: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
79382: LD_INT 0
79384: PPUSH
// if not mc_bases or not base or not scan_area then
79385: LD_EXP 52
79389: NOT
79390: PUSH
79391: LD_VAR 0 1
79395: NOT
79396: OR
79397: PUSH
79398: LD_VAR 0 2
79402: NOT
79403: OR
79404: IFFALSE 79408
// exit ;
79406: GO 79433
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
79408: LD_ADDR_EXP 77
79412: PUSH
79413: LD_EXP 77
79417: PPUSH
79418: LD_VAR 0 1
79422: PPUSH
79423: LD_VAR 0 2
79427: PPUSH
79428: CALL_OW 1
79432: ST_TO_ADDR
// end ;
79433: LD_VAR 0 3
79437: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
79438: LD_INT 0
79440: PPUSH
79441: PPUSH
// if not mc_bases or not base then
79442: LD_EXP 52
79446: NOT
79447: PUSH
79448: LD_VAR 0 1
79452: NOT
79453: OR
79454: IFFALSE 79458
// exit ;
79456: GO 79522
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
79458: LD_ADDR_VAR 0 3
79462: PUSH
79463: LD_INT 1
79465: PUSH
79466: LD_INT 2
79468: PUSH
79469: LD_INT 3
79471: PUSH
79472: LD_INT 4
79474: PUSH
79475: LD_INT 11
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
79485: LD_ADDR_EXP 79
79489: PUSH
79490: LD_EXP 79
79494: PPUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: LD_EXP 79
79504: PUSH
79505: LD_VAR 0 1
79509: ARRAY
79510: PUSH
79511: LD_VAR 0 3
79515: DIFF
79516: PPUSH
79517: CALL_OW 1
79521: ST_TO_ADDR
// end ;
79522: LD_VAR 0 2
79526: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
79527: LD_INT 0
79529: PPUSH
// result := mc_vehicles [ base ] ;
79530: LD_ADDR_VAR 0 3
79534: PUSH
79535: LD_EXP 71
79539: PUSH
79540: LD_VAR 0 1
79544: ARRAY
79545: ST_TO_ADDR
// if onlyCombat then
79546: LD_VAR 0 2
79550: IFFALSE 79715
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
79552: LD_ADDR_VAR 0 3
79556: PUSH
79557: LD_VAR 0 3
79561: PUSH
79562: LD_VAR 0 3
79566: PPUSH
79567: LD_INT 2
79569: PUSH
79570: LD_INT 34
79572: PUSH
79573: LD_INT 12
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: PUSH
79580: LD_INT 34
79582: PUSH
79583: LD_INT 51
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 34
79592: PUSH
79593: LD_EXP 46
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 34
79604: PUSH
79605: LD_INT 32
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: PUSH
79612: LD_INT 34
79614: PUSH
79615: LD_INT 13
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: PUSH
79622: LD_INT 34
79624: PUSH
79625: LD_INT 52
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: LD_INT 34
79634: PUSH
79635: LD_INT 14
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: PUSH
79642: LD_INT 34
79644: PUSH
79645: LD_INT 53
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: PUSH
79652: LD_INT 34
79654: PUSH
79655: LD_EXP 45
79659: PUSH
79660: EMPTY
79661: LIST
79662: LIST
79663: PUSH
79664: LD_INT 34
79666: PUSH
79667: LD_INT 31
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: LD_INT 34
79676: PUSH
79677: LD_INT 48
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: PUSH
79684: LD_INT 34
79686: PUSH
79687: LD_INT 8
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: PPUSH
79709: CALL_OW 72
79713: DIFF
79714: ST_TO_ADDR
// end ; end_of_file
79715: LD_VAR 0 3
79719: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
79720: LD_INT 0
79722: PPUSH
79723: PPUSH
79724: PPUSH
// if not mc_bases or not skirmish then
79725: LD_EXP 52
79729: NOT
79730: PUSH
79731: LD_EXP 50
79735: NOT
79736: OR
79737: IFFALSE 79741
// exit ;
79739: GO 79906
// for i = 1 to mc_bases do
79741: LD_ADDR_VAR 0 4
79745: PUSH
79746: DOUBLE
79747: LD_INT 1
79749: DEC
79750: ST_TO_ADDR
79751: LD_EXP 52
79755: PUSH
79756: FOR_TO
79757: IFFALSE 79904
// begin if sci in mc_bases [ i ] then
79759: LD_VAR 0 2
79763: PUSH
79764: LD_EXP 52
79768: PUSH
79769: LD_VAR 0 4
79773: ARRAY
79774: IN
79775: IFFALSE 79902
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79777: LD_ADDR_EXP 81
79781: PUSH
79782: LD_EXP 81
79786: PPUSH
79787: LD_VAR 0 4
79791: PUSH
79792: LD_EXP 81
79796: PUSH
79797: LD_VAR 0 4
79801: ARRAY
79802: PUSH
79803: LD_INT 1
79805: PLUS
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PPUSH
79811: LD_VAR 0 1
79815: PPUSH
79816: CALL 18419 0 3
79820: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79821: LD_ADDR_VAR 0 5
79825: PUSH
79826: LD_EXP 52
79830: PUSH
79831: LD_VAR 0 4
79835: ARRAY
79836: PPUSH
79837: LD_INT 2
79839: PUSH
79840: LD_INT 30
79842: PUSH
79843: LD_INT 0
79845: PUSH
79846: EMPTY
79847: LIST
79848: LIST
79849: PUSH
79850: LD_INT 30
79852: PUSH
79853: LD_INT 1
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: LIST
79864: PPUSH
79865: CALL_OW 72
79869: PPUSH
79870: LD_VAR 0 1
79874: PPUSH
79875: CALL_OW 74
79879: ST_TO_ADDR
// if tmp then
79880: LD_VAR 0 5
79884: IFFALSE 79900
// ComStandNearbyBuilding ( ape , tmp ) ;
79886: LD_VAR 0 1
79890: PPUSH
79891: LD_VAR 0 5
79895: PPUSH
79896: CALL 12622 0 2
// break ;
79900: GO 79904
// end ; end ;
79902: GO 79756
79904: POP
79905: POP
// end ;
79906: LD_VAR 0 3
79910: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79911: LD_INT 0
79913: PPUSH
79914: PPUSH
79915: PPUSH
// if not mc_bases or not skirmish then
79916: LD_EXP 52
79920: NOT
79921: PUSH
79922: LD_EXP 50
79926: NOT
79927: OR
79928: IFFALSE 79932
// exit ;
79930: GO 80021
// for i = 1 to mc_bases do
79932: LD_ADDR_VAR 0 4
79936: PUSH
79937: DOUBLE
79938: LD_INT 1
79940: DEC
79941: ST_TO_ADDR
79942: LD_EXP 52
79946: PUSH
79947: FOR_TO
79948: IFFALSE 80019
// begin if building in mc_busy_turret_list [ i ] then
79950: LD_VAR 0 1
79954: PUSH
79955: LD_EXP 62
79959: PUSH
79960: LD_VAR 0 4
79964: ARRAY
79965: IN
79966: IFFALSE 80017
// begin tmp := mc_busy_turret_list [ i ] diff building ;
79968: LD_ADDR_VAR 0 5
79972: PUSH
79973: LD_EXP 62
79977: PUSH
79978: LD_VAR 0 4
79982: ARRAY
79983: PUSH
79984: LD_VAR 0 1
79988: DIFF
79989: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
79990: LD_ADDR_EXP 62
79994: PUSH
79995: LD_EXP 62
79999: PPUSH
80000: LD_VAR 0 4
80004: PPUSH
80005: LD_VAR 0 5
80009: PPUSH
80010: CALL_OW 1
80014: ST_TO_ADDR
// break ;
80015: GO 80019
// end ; end ;
80017: GO 79947
80019: POP
80020: POP
// end ;
80021: LD_VAR 0 3
80025: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
80026: LD_INT 0
80028: PPUSH
80029: PPUSH
80030: PPUSH
// if not mc_bases or not skirmish then
80031: LD_EXP 52
80035: NOT
80036: PUSH
80037: LD_EXP 50
80041: NOT
80042: OR
80043: IFFALSE 80047
// exit ;
80045: GO 80246
// for i = 1 to mc_bases do
80047: LD_ADDR_VAR 0 5
80051: PUSH
80052: DOUBLE
80053: LD_INT 1
80055: DEC
80056: ST_TO_ADDR
80057: LD_EXP 52
80061: PUSH
80062: FOR_TO
80063: IFFALSE 80244
// if building in mc_bases [ i ] then
80065: LD_VAR 0 1
80069: PUSH
80070: LD_EXP 52
80074: PUSH
80075: LD_VAR 0 5
80079: ARRAY
80080: IN
80081: IFFALSE 80242
// begin tmp := mc_bases [ i ] diff building ;
80083: LD_ADDR_VAR 0 6
80087: PUSH
80088: LD_EXP 52
80092: PUSH
80093: LD_VAR 0 5
80097: ARRAY
80098: PUSH
80099: LD_VAR 0 1
80103: DIFF
80104: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
80105: LD_ADDR_EXP 52
80109: PUSH
80110: LD_EXP 52
80114: PPUSH
80115: LD_VAR 0 5
80119: PPUSH
80120: LD_VAR 0 6
80124: PPUSH
80125: CALL_OW 1
80129: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
80130: LD_VAR 0 1
80134: PUSH
80135: LD_EXP 60
80139: PUSH
80140: LD_VAR 0 5
80144: ARRAY
80145: IN
80146: IFFALSE 80185
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
80148: LD_ADDR_EXP 60
80152: PUSH
80153: LD_EXP 60
80157: PPUSH
80158: LD_VAR 0 5
80162: PPUSH
80163: LD_EXP 60
80167: PUSH
80168: LD_VAR 0 5
80172: ARRAY
80173: PUSH
80174: LD_VAR 0 1
80178: DIFF
80179: PPUSH
80180: CALL_OW 1
80184: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
80185: LD_VAR 0 1
80189: PUSH
80190: LD_EXP 61
80194: PUSH
80195: LD_VAR 0 5
80199: ARRAY
80200: IN
80201: IFFALSE 80240
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
80203: LD_ADDR_EXP 61
80207: PUSH
80208: LD_EXP 61
80212: PPUSH
80213: LD_VAR 0 5
80217: PPUSH
80218: LD_EXP 61
80222: PUSH
80223: LD_VAR 0 5
80227: ARRAY
80228: PUSH
80229: LD_VAR 0 1
80233: DIFF
80234: PPUSH
80235: CALL_OW 1
80239: ST_TO_ADDR
// break ;
80240: GO 80244
// end ;
80242: GO 80062
80244: POP
80245: POP
// end ;
80246: LD_VAR 0 4
80250: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
80251: LD_INT 0
80253: PPUSH
80254: PPUSH
80255: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
80256: LD_EXP 52
80260: NOT
80261: PUSH
80262: LD_EXP 50
80266: NOT
80267: OR
80268: PUSH
80269: LD_VAR 0 3
80273: PUSH
80274: LD_EXP 78
80278: IN
80279: NOT
80280: OR
80281: IFFALSE 80285
// exit ;
80283: GO 80408
// for i = 1 to mc_vehicles do
80285: LD_ADDR_VAR 0 6
80289: PUSH
80290: DOUBLE
80291: LD_INT 1
80293: DEC
80294: ST_TO_ADDR
80295: LD_EXP 71
80299: PUSH
80300: FOR_TO
80301: IFFALSE 80406
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
80303: LD_VAR 0 2
80307: PUSH
80308: LD_EXP 71
80312: PUSH
80313: LD_VAR 0 6
80317: ARRAY
80318: IN
80319: PUSH
80320: LD_VAR 0 1
80324: PUSH
80325: LD_EXP 71
80329: PUSH
80330: LD_VAR 0 6
80334: ARRAY
80335: IN
80336: OR
80337: IFFALSE 80404
// begin tmp := mc_vehicles [ i ] diff old ;
80339: LD_ADDR_VAR 0 7
80343: PUSH
80344: LD_EXP 71
80348: PUSH
80349: LD_VAR 0 6
80353: ARRAY
80354: PUSH
80355: LD_VAR 0 2
80359: DIFF
80360: ST_TO_ADDR
// tmp := tmp diff new ;
80361: LD_ADDR_VAR 0 7
80365: PUSH
80366: LD_VAR 0 7
80370: PUSH
80371: LD_VAR 0 1
80375: DIFF
80376: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
80377: LD_ADDR_EXP 71
80381: PUSH
80382: LD_EXP 71
80386: PPUSH
80387: LD_VAR 0 6
80391: PPUSH
80392: LD_VAR 0 7
80396: PPUSH
80397: CALL_OW 1
80401: ST_TO_ADDR
// break ;
80402: GO 80406
// end ;
80404: GO 80300
80406: POP
80407: POP
// end ;
80408: LD_VAR 0 5
80412: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
80413: LD_INT 0
80415: PPUSH
80416: PPUSH
80417: PPUSH
80418: PPUSH
// if not mc_bases or not skirmish then
80419: LD_EXP 52
80423: NOT
80424: PUSH
80425: LD_EXP 50
80429: NOT
80430: OR
80431: IFFALSE 80435
// exit ;
80433: GO 80812
// side := GetSide ( vehicle ) ;
80435: LD_ADDR_VAR 0 5
80439: PUSH
80440: LD_VAR 0 1
80444: PPUSH
80445: CALL_OW 255
80449: ST_TO_ADDR
// for i = 1 to mc_bases do
80450: LD_ADDR_VAR 0 4
80454: PUSH
80455: DOUBLE
80456: LD_INT 1
80458: DEC
80459: ST_TO_ADDR
80460: LD_EXP 52
80464: PUSH
80465: FOR_TO
80466: IFFALSE 80810
// begin if factory in mc_bases [ i ] then
80468: LD_VAR 0 2
80472: PUSH
80473: LD_EXP 52
80477: PUSH
80478: LD_VAR 0 4
80482: ARRAY
80483: IN
80484: IFFALSE 80808
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
80486: LD_EXP 74
80490: PUSH
80491: LD_VAR 0 4
80495: ARRAY
80496: PUSH
80497: LD_EXP 63
80501: PUSH
80502: LD_VAR 0 4
80506: ARRAY
80507: LESS
80508: PUSH
80509: LD_VAR 0 1
80513: PPUSH
80514: CALL_OW 264
80518: PUSH
80519: LD_INT 31
80521: PUSH
80522: LD_INT 32
80524: PUSH
80525: LD_INT 51
80527: PUSH
80528: LD_EXP 46
80532: PUSH
80533: LD_INT 12
80535: PUSH
80536: LD_INT 30
80538: PUSH
80539: LD_EXP 45
80543: PUSH
80544: LD_INT 11
80546: PUSH
80547: LD_INT 53
80549: PUSH
80550: LD_INT 14
80552: PUSH
80553: LD_EXP 49
80557: PUSH
80558: LD_INT 29
80560: PUSH
80561: LD_EXP 47
80565: PUSH
80566: LD_INT 13
80568: PUSH
80569: LD_INT 52
80571: PUSH
80572: LD_INT 48
80574: PUSH
80575: LD_INT 8
80577: PUSH
80578: EMPTY
80579: LIST
80580: LIST
80581: LIST
80582: LIST
80583: LIST
80584: LIST
80585: LIST
80586: LIST
80587: LIST
80588: LIST
80589: LIST
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: IN
80597: NOT
80598: AND
80599: IFFALSE 80647
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
80601: LD_ADDR_EXP 74
80605: PUSH
80606: LD_EXP 74
80610: PPUSH
80611: LD_VAR 0 4
80615: PUSH
80616: LD_EXP 74
80620: PUSH
80621: LD_VAR 0 4
80625: ARRAY
80626: PUSH
80627: LD_INT 1
80629: PLUS
80630: PUSH
80631: EMPTY
80632: LIST
80633: LIST
80634: PPUSH
80635: LD_VAR 0 1
80639: PPUSH
80640: CALL 18419 0 3
80644: ST_TO_ADDR
80645: GO 80691
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
80647: LD_ADDR_EXP 71
80651: PUSH
80652: LD_EXP 71
80656: PPUSH
80657: LD_VAR 0 4
80661: PUSH
80662: LD_EXP 71
80666: PUSH
80667: LD_VAR 0 4
80671: ARRAY
80672: PUSH
80673: LD_INT 1
80675: PLUS
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PPUSH
80681: LD_VAR 0 1
80685: PPUSH
80686: CALL 18419 0 3
80690: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
80691: LD_VAR 0 1
80695: PPUSH
80696: CALL_OW 263
80700: PUSH
80701: LD_INT 2
80703: EQUAL
80704: IFFALSE 80724
// begin repeat wait ( 0 0$1 ) ;
80706: LD_INT 35
80708: PPUSH
80709: CALL_OW 67
// until IsControledBy ( vehicle ) ;
80713: LD_VAR 0 1
80717: PPUSH
80718: CALL_OW 312
80722: IFFALSE 80706
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
80724: LD_VAR 0 1
80728: PPUSH
80729: LD_EXP 76
80733: PUSH
80734: LD_VAR 0 4
80738: ARRAY
80739: PPUSH
80740: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
80744: LD_VAR 0 1
80748: PPUSH
80749: CALL_OW 263
80753: PUSH
80754: LD_INT 1
80756: NONEQUAL
80757: IFFALSE 80761
// break ;
80759: GO 80810
// repeat wait ( 0 0$1 ) ;
80761: LD_INT 35
80763: PPUSH
80764: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
80768: LD_VAR 0 1
80772: PPUSH
80773: LD_EXP 76
80777: PUSH
80778: LD_VAR 0 4
80782: ARRAY
80783: PPUSH
80784: CALL_OW 308
80788: IFFALSE 80761
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
80790: LD_VAR 0 1
80794: PPUSH
80795: CALL_OW 311
80799: PPUSH
80800: CALL_OW 121
// exit ;
80804: POP
80805: POP
80806: GO 80812
// end ; end ;
80808: GO 80465
80810: POP
80811: POP
// end ;
80812: LD_VAR 0 3
80816: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
80817: LD_INT 0
80819: PPUSH
80820: PPUSH
80821: PPUSH
80822: PPUSH
// if not mc_bases or not skirmish then
80823: LD_EXP 52
80827: NOT
80828: PUSH
80829: LD_EXP 50
80833: NOT
80834: OR
80835: IFFALSE 80839
// exit ;
80837: GO 81192
// repeat wait ( 0 0$1 ) ;
80839: LD_INT 35
80841: PPUSH
80842: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
80846: LD_VAR 0 2
80850: PPUSH
80851: LD_VAR 0 3
80855: PPUSH
80856: CALL_OW 284
80860: IFFALSE 80839
// if GetResourceTypeXY ( x , y ) = mat_artefact then
80862: LD_VAR 0 2
80866: PPUSH
80867: LD_VAR 0 3
80871: PPUSH
80872: CALL_OW 283
80876: PUSH
80877: LD_INT 4
80879: EQUAL
80880: IFFALSE 80884
// exit ;
80882: GO 81192
// for i = 1 to mc_bases do
80884: LD_ADDR_VAR 0 7
80888: PUSH
80889: DOUBLE
80890: LD_INT 1
80892: DEC
80893: ST_TO_ADDR
80894: LD_EXP 52
80898: PUSH
80899: FOR_TO
80900: IFFALSE 81190
// begin if mc_crates_area [ i ] then
80902: LD_EXP 70
80906: PUSH
80907: LD_VAR 0 7
80911: ARRAY
80912: IFFALSE 81023
// for j in mc_crates_area [ i ] do
80914: LD_ADDR_VAR 0 8
80918: PUSH
80919: LD_EXP 70
80923: PUSH
80924: LD_VAR 0 7
80928: ARRAY
80929: PUSH
80930: FOR_IN
80931: IFFALSE 81021
// if InArea ( x , y , j ) then
80933: LD_VAR 0 2
80937: PPUSH
80938: LD_VAR 0 3
80942: PPUSH
80943: LD_VAR 0 8
80947: PPUSH
80948: CALL_OW 309
80952: IFFALSE 81019
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80954: LD_ADDR_EXP 68
80958: PUSH
80959: LD_EXP 68
80963: PPUSH
80964: LD_VAR 0 7
80968: PUSH
80969: LD_EXP 68
80973: PUSH
80974: LD_VAR 0 7
80978: ARRAY
80979: PUSH
80980: LD_INT 1
80982: PLUS
80983: PUSH
80984: EMPTY
80985: LIST
80986: LIST
80987: PPUSH
80988: LD_VAR 0 4
80992: PUSH
80993: LD_VAR 0 2
80997: PUSH
80998: LD_VAR 0 3
81002: PUSH
81003: EMPTY
81004: LIST
81005: LIST
81006: LIST
81007: PPUSH
81008: CALL 18419 0 3
81012: ST_TO_ADDR
// exit ;
81013: POP
81014: POP
81015: POP
81016: POP
81017: GO 81192
// end ;
81019: GO 80930
81021: POP
81022: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81023: LD_ADDR_VAR 0 9
81027: PUSH
81028: LD_EXP 52
81032: PUSH
81033: LD_VAR 0 7
81037: ARRAY
81038: PPUSH
81039: LD_INT 2
81041: PUSH
81042: LD_INT 30
81044: PUSH
81045: LD_INT 0
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: PUSH
81052: LD_INT 30
81054: PUSH
81055: LD_INT 1
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: PUSH
81062: EMPTY
81063: LIST
81064: LIST
81065: LIST
81066: PPUSH
81067: CALL_OW 72
81071: ST_TO_ADDR
// if not depot then
81072: LD_VAR 0 9
81076: NOT
81077: IFFALSE 81081
// continue ;
81079: GO 80899
// for j in depot do
81081: LD_ADDR_VAR 0 8
81085: PUSH
81086: LD_VAR 0 9
81090: PUSH
81091: FOR_IN
81092: IFFALSE 81186
// if GetDistUnitXY ( j , x , y ) < 30 then
81094: LD_VAR 0 8
81098: PPUSH
81099: LD_VAR 0 2
81103: PPUSH
81104: LD_VAR 0 3
81108: PPUSH
81109: CALL_OW 297
81113: PUSH
81114: LD_INT 30
81116: LESS
81117: IFFALSE 81184
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
81119: LD_ADDR_EXP 68
81123: PUSH
81124: LD_EXP 68
81128: PPUSH
81129: LD_VAR 0 7
81133: PUSH
81134: LD_EXP 68
81138: PUSH
81139: LD_VAR 0 7
81143: ARRAY
81144: PUSH
81145: LD_INT 1
81147: PLUS
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PPUSH
81153: LD_VAR 0 4
81157: PUSH
81158: LD_VAR 0 2
81162: PUSH
81163: LD_VAR 0 3
81167: PUSH
81168: EMPTY
81169: LIST
81170: LIST
81171: LIST
81172: PPUSH
81173: CALL 18419 0 3
81177: ST_TO_ADDR
// exit ;
81178: POP
81179: POP
81180: POP
81181: POP
81182: GO 81192
// end ;
81184: GO 81091
81186: POP
81187: POP
// end ;
81188: GO 80899
81190: POP
81191: POP
// end ;
81192: LD_VAR 0 6
81196: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
81197: LD_INT 0
81199: PPUSH
81200: PPUSH
81201: PPUSH
81202: PPUSH
// if not mc_bases or not skirmish then
81203: LD_EXP 52
81207: NOT
81208: PUSH
81209: LD_EXP 50
81213: NOT
81214: OR
81215: IFFALSE 81219
// exit ;
81217: GO 81496
// side := GetSide ( lab ) ;
81219: LD_ADDR_VAR 0 4
81223: PUSH
81224: LD_VAR 0 2
81228: PPUSH
81229: CALL_OW 255
81233: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
81234: LD_VAR 0 4
81238: PUSH
81239: LD_EXP 78
81243: IN
81244: NOT
81245: PUSH
81246: LD_EXP 79
81250: NOT
81251: OR
81252: PUSH
81253: LD_EXP 52
81257: NOT
81258: OR
81259: IFFALSE 81263
// exit ;
81261: GO 81496
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
81263: LD_ADDR_EXP 79
81267: PUSH
81268: LD_EXP 79
81272: PPUSH
81273: LD_VAR 0 4
81277: PPUSH
81278: LD_EXP 79
81282: PUSH
81283: LD_VAR 0 4
81287: ARRAY
81288: PUSH
81289: LD_VAR 0 1
81293: DIFF
81294: PPUSH
81295: CALL_OW 1
81299: ST_TO_ADDR
// for i = 1 to mc_bases do
81300: LD_ADDR_VAR 0 5
81304: PUSH
81305: DOUBLE
81306: LD_INT 1
81308: DEC
81309: ST_TO_ADDR
81310: LD_EXP 52
81314: PUSH
81315: FOR_TO
81316: IFFALSE 81494
// begin if lab in mc_bases [ i ] then
81318: LD_VAR 0 2
81322: PUSH
81323: LD_EXP 52
81327: PUSH
81328: LD_VAR 0 5
81332: ARRAY
81333: IN
81334: IFFALSE 81492
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
81336: LD_VAR 0 1
81340: PUSH
81341: LD_INT 11
81343: PUSH
81344: LD_INT 4
81346: PUSH
81347: LD_INT 3
81349: PUSH
81350: LD_INT 2
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: LIST
81357: LIST
81358: IN
81359: PUSH
81360: LD_EXP 82
81364: PUSH
81365: LD_VAR 0 5
81369: ARRAY
81370: AND
81371: IFFALSE 81492
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
81373: LD_ADDR_VAR 0 6
81377: PUSH
81378: LD_EXP 82
81382: PUSH
81383: LD_VAR 0 5
81387: ARRAY
81388: PUSH
81389: LD_INT 1
81391: ARRAY
81392: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81393: LD_ADDR_EXP 82
81397: PUSH
81398: LD_EXP 82
81402: PPUSH
81403: LD_VAR 0 5
81407: PPUSH
81408: EMPTY
81409: PPUSH
81410: CALL_OW 1
81414: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
81415: LD_VAR 0 6
81419: PPUSH
81420: LD_INT 0
81422: PPUSH
81423: CALL_OW 109
// ComExitBuilding ( tmp ) ;
81427: LD_VAR 0 6
81431: PPUSH
81432: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
81436: LD_ADDR_EXP 81
81440: PUSH
81441: LD_EXP 81
81445: PPUSH
81446: LD_VAR 0 5
81450: PPUSH
81451: LD_EXP 81
81455: PUSH
81456: LD_VAR 0 5
81460: ARRAY
81461: PPUSH
81462: LD_INT 1
81464: PPUSH
81465: LD_VAR 0 6
81469: PPUSH
81470: CALL_OW 2
81474: PPUSH
81475: CALL_OW 1
81479: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
81480: LD_VAR 0 5
81484: PPUSH
81485: LD_INT 112
81487: PPUSH
81488: CALL 58492 0 2
// end ; end ; end ;
81492: GO 81315
81494: POP
81495: POP
// end ;
81496: LD_VAR 0 3
81500: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
81501: LD_INT 0
81503: PPUSH
81504: PPUSH
81505: PPUSH
81506: PPUSH
81507: PPUSH
81508: PPUSH
81509: PPUSH
81510: PPUSH
// if not mc_bases or not skirmish then
81511: LD_EXP 52
81515: NOT
81516: PUSH
81517: LD_EXP 50
81521: NOT
81522: OR
81523: IFFALSE 81527
// exit ;
81525: GO 82898
// for i = 1 to mc_bases do
81527: LD_ADDR_VAR 0 3
81531: PUSH
81532: DOUBLE
81533: LD_INT 1
81535: DEC
81536: ST_TO_ADDR
81537: LD_EXP 52
81541: PUSH
81542: FOR_TO
81543: IFFALSE 82896
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
81545: LD_VAR 0 1
81549: PUSH
81550: LD_EXP 52
81554: PUSH
81555: LD_VAR 0 3
81559: ARRAY
81560: IN
81561: PUSH
81562: LD_VAR 0 1
81566: PUSH
81567: LD_EXP 59
81571: PUSH
81572: LD_VAR 0 3
81576: ARRAY
81577: IN
81578: OR
81579: PUSH
81580: LD_VAR 0 1
81584: PUSH
81585: LD_EXP 74
81589: PUSH
81590: LD_VAR 0 3
81594: ARRAY
81595: IN
81596: OR
81597: PUSH
81598: LD_VAR 0 1
81602: PUSH
81603: LD_EXP 71
81607: PUSH
81608: LD_VAR 0 3
81612: ARRAY
81613: IN
81614: OR
81615: PUSH
81616: LD_VAR 0 1
81620: PUSH
81621: LD_EXP 81
81625: PUSH
81626: LD_VAR 0 3
81630: ARRAY
81631: IN
81632: OR
81633: PUSH
81634: LD_VAR 0 1
81638: PUSH
81639: LD_EXP 82
81643: PUSH
81644: LD_VAR 0 3
81648: ARRAY
81649: IN
81650: OR
81651: IFFALSE 82894
// begin if un in mc_ape [ i ] then
81653: LD_VAR 0 1
81657: PUSH
81658: LD_EXP 81
81662: PUSH
81663: LD_VAR 0 3
81667: ARRAY
81668: IN
81669: IFFALSE 81708
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
81671: LD_ADDR_EXP 81
81675: PUSH
81676: LD_EXP 81
81680: PPUSH
81681: LD_VAR 0 3
81685: PPUSH
81686: LD_EXP 81
81690: PUSH
81691: LD_VAR 0 3
81695: ARRAY
81696: PUSH
81697: LD_VAR 0 1
81701: DIFF
81702: PPUSH
81703: CALL_OW 1
81707: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
81708: LD_VAR 0 1
81712: PUSH
81713: LD_EXP 82
81717: PUSH
81718: LD_VAR 0 3
81722: ARRAY
81723: IN
81724: IFFALSE 81748
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81726: LD_ADDR_EXP 82
81730: PUSH
81731: LD_EXP 82
81735: PPUSH
81736: LD_VAR 0 3
81740: PPUSH
81741: EMPTY
81742: PPUSH
81743: CALL_OW 1
81747: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
81748: LD_VAR 0 1
81752: PPUSH
81753: CALL_OW 247
81757: PUSH
81758: LD_INT 2
81760: EQUAL
81761: PUSH
81762: LD_VAR 0 1
81766: PPUSH
81767: CALL_OW 110
81771: PUSH
81772: LD_INT 20
81774: EQUAL
81775: PUSH
81776: LD_VAR 0 1
81780: PUSH
81781: LD_EXP 74
81785: PUSH
81786: LD_VAR 0 3
81790: ARRAY
81791: IN
81792: OR
81793: PUSH
81794: LD_VAR 0 1
81798: PPUSH
81799: CALL_OW 264
81803: PUSH
81804: LD_INT 12
81806: PUSH
81807: LD_INT 51
81809: PUSH
81810: LD_EXP 46
81814: PUSH
81815: LD_INT 32
81817: PUSH
81818: LD_INT 13
81820: PUSH
81821: LD_INT 52
81823: PUSH
81824: LD_INT 31
81826: PUSH
81827: EMPTY
81828: LIST
81829: LIST
81830: LIST
81831: LIST
81832: LIST
81833: LIST
81834: LIST
81835: IN
81836: OR
81837: AND
81838: IFFALSE 82146
// begin if un in mc_defender [ i ] then
81840: LD_VAR 0 1
81844: PUSH
81845: LD_EXP 74
81849: PUSH
81850: LD_VAR 0 3
81854: ARRAY
81855: IN
81856: IFFALSE 81895
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81858: LD_ADDR_EXP 74
81862: PUSH
81863: LD_EXP 74
81867: PPUSH
81868: LD_VAR 0 3
81872: PPUSH
81873: LD_EXP 74
81877: PUSH
81878: LD_VAR 0 3
81882: ARRAY
81883: PUSH
81884: LD_VAR 0 1
81888: DIFF
81889: PPUSH
81890: CALL_OW 1
81894: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
81895: LD_ADDR_VAR 0 8
81899: PUSH
81900: LD_VAR 0 3
81904: PPUSH
81905: LD_INT 3
81907: PPUSH
81908: CALL 78564 0 2
81912: ST_TO_ADDR
// if fac then
81913: LD_VAR 0 8
81917: IFFALSE 82146
// begin for j in fac do
81919: LD_ADDR_VAR 0 4
81923: PUSH
81924: LD_VAR 0 8
81928: PUSH
81929: FOR_IN
81930: IFFALSE 82144
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
81932: LD_ADDR_VAR 0 9
81936: PUSH
81937: LD_VAR 0 8
81941: PPUSH
81942: LD_VAR 0 1
81946: PPUSH
81947: CALL_OW 265
81951: PPUSH
81952: LD_VAR 0 1
81956: PPUSH
81957: CALL_OW 262
81961: PPUSH
81962: LD_VAR 0 1
81966: PPUSH
81967: CALL_OW 263
81971: PPUSH
81972: LD_VAR 0 1
81976: PPUSH
81977: CALL_OW 264
81981: PPUSH
81982: CALL 15951 0 5
81986: ST_TO_ADDR
// if components then
81987: LD_VAR 0 9
81991: IFFALSE 82142
// begin if GetWeapon ( un ) = ar_control_tower then
81993: LD_VAR 0 1
81997: PPUSH
81998: CALL_OW 264
82002: PUSH
82003: LD_INT 31
82005: EQUAL
82006: IFFALSE 82123
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
82008: LD_VAR 0 1
82012: PPUSH
82013: CALL_OW 311
82017: PPUSH
82018: LD_INT 0
82020: PPUSH
82021: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
82025: LD_ADDR_EXP 92
82029: PUSH
82030: LD_EXP 92
82034: PPUSH
82035: LD_VAR 0 3
82039: PPUSH
82040: LD_EXP 92
82044: PUSH
82045: LD_VAR 0 3
82049: ARRAY
82050: PUSH
82051: LD_VAR 0 1
82055: PPUSH
82056: CALL_OW 311
82060: DIFF
82061: PPUSH
82062: CALL_OW 1
82066: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
82067: LD_ADDR_VAR 0 7
82071: PUSH
82072: LD_EXP 73
82076: PUSH
82077: LD_VAR 0 3
82081: ARRAY
82082: PPUSH
82083: LD_INT 1
82085: PPUSH
82086: LD_VAR 0 9
82090: PPUSH
82091: CALL_OW 2
82095: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
82096: LD_ADDR_EXP 73
82100: PUSH
82101: LD_EXP 73
82105: PPUSH
82106: LD_VAR 0 3
82110: PPUSH
82111: LD_VAR 0 7
82115: PPUSH
82116: CALL_OW 1
82120: ST_TO_ADDR
// end else
82121: GO 82140
// MC_InsertProduceList ( i , [ components ] ) ;
82123: LD_VAR 0 3
82127: PPUSH
82128: LD_VAR 0 9
82132: PUSH
82133: EMPTY
82134: LIST
82135: PPUSH
82136: CALL 78109 0 2
// break ;
82140: GO 82144
// end ; end ;
82142: GO 81929
82144: POP
82145: POP
// end ; end ; if GetType ( un ) = unit_building then
82146: LD_VAR 0 1
82150: PPUSH
82151: CALL_OW 247
82155: PUSH
82156: LD_INT 3
82158: EQUAL
82159: IFFALSE 82562
// begin btype := GetBType ( un ) ;
82161: LD_ADDR_VAR 0 5
82165: PUSH
82166: LD_VAR 0 1
82170: PPUSH
82171: CALL_OW 266
82175: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
82176: LD_VAR 0 5
82180: PUSH
82181: LD_INT 29
82183: PUSH
82184: LD_INT 30
82186: PUSH
82187: EMPTY
82188: LIST
82189: LIST
82190: IN
82191: IFFALSE 82264
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
82193: LD_VAR 0 1
82197: PPUSH
82198: CALL_OW 250
82202: PPUSH
82203: LD_VAR 0 1
82207: PPUSH
82208: CALL_OW 251
82212: PPUSH
82213: LD_VAR 0 1
82217: PPUSH
82218: CALL_OW 255
82222: PPUSH
82223: CALL_OW 440
82227: NOT
82228: IFFALSE 82264
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
82230: LD_VAR 0 1
82234: PPUSH
82235: CALL_OW 250
82239: PPUSH
82240: LD_VAR 0 1
82244: PPUSH
82245: CALL_OW 251
82249: PPUSH
82250: LD_VAR 0 1
82254: PPUSH
82255: CALL_OW 255
82259: PPUSH
82260: CALL_OW 441
// end ; if btype = b_warehouse then
82264: LD_VAR 0 5
82268: PUSH
82269: LD_INT 1
82271: EQUAL
82272: IFFALSE 82290
// begin btype := b_depot ;
82274: LD_ADDR_VAR 0 5
82278: PUSH
82279: LD_INT 0
82281: ST_TO_ADDR
// pos := 1 ;
82282: LD_ADDR_VAR 0 6
82286: PUSH
82287: LD_INT 1
82289: ST_TO_ADDR
// end ; if btype = b_factory then
82290: LD_VAR 0 5
82294: PUSH
82295: LD_INT 3
82297: EQUAL
82298: IFFALSE 82316
// begin btype := b_workshop ;
82300: LD_ADDR_VAR 0 5
82304: PUSH
82305: LD_INT 2
82307: ST_TO_ADDR
// pos := 1 ;
82308: LD_ADDR_VAR 0 6
82312: PUSH
82313: LD_INT 1
82315: ST_TO_ADDR
// end ; if btype = b_barracks then
82316: LD_VAR 0 5
82320: PUSH
82321: LD_INT 5
82323: EQUAL
82324: IFFALSE 82334
// btype := b_armoury ;
82326: LD_ADDR_VAR 0 5
82330: PUSH
82331: LD_INT 4
82333: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
82334: LD_VAR 0 5
82338: PUSH
82339: LD_INT 7
82341: PUSH
82342: LD_INT 8
82344: PUSH
82345: EMPTY
82346: LIST
82347: LIST
82348: IN
82349: IFFALSE 82359
// btype := b_lab ;
82351: LD_ADDR_VAR 0 5
82355: PUSH
82356: LD_INT 6
82358: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
82359: LD_ADDR_EXP 57
82363: PUSH
82364: LD_EXP 57
82368: PPUSH
82369: LD_VAR 0 3
82373: PUSH
82374: LD_EXP 57
82378: PUSH
82379: LD_VAR 0 3
82383: ARRAY
82384: PUSH
82385: LD_INT 1
82387: PLUS
82388: PUSH
82389: EMPTY
82390: LIST
82391: LIST
82392: PPUSH
82393: LD_VAR 0 5
82397: PUSH
82398: LD_VAR 0 1
82402: PPUSH
82403: CALL_OW 250
82407: PUSH
82408: LD_VAR 0 1
82412: PPUSH
82413: CALL_OW 251
82417: PUSH
82418: LD_VAR 0 1
82422: PPUSH
82423: CALL_OW 254
82427: PUSH
82428: EMPTY
82429: LIST
82430: LIST
82431: LIST
82432: LIST
82433: PPUSH
82434: CALL 18419 0 3
82438: ST_TO_ADDR
// if pos = 1 then
82439: LD_VAR 0 6
82443: PUSH
82444: LD_INT 1
82446: EQUAL
82447: IFFALSE 82562
// begin tmp := mc_build_list [ i ] ;
82449: LD_ADDR_VAR 0 7
82453: PUSH
82454: LD_EXP 57
82458: PUSH
82459: LD_VAR 0 3
82463: ARRAY
82464: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82465: LD_VAR 0 7
82469: PPUSH
82470: LD_INT 2
82472: PUSH
82473: LD_INT 30
82475: PUSH
82476: LD_INT 0
82478: PUSH
82479: EMPTY
82480: LIST
82481: LIST
82482: PUSH
82483: LD_INT 30
82485: PUSH
82486: LD_INT 1
82488: PUSH
82489: EMPTY
82490: LIST
82491: LIST
82492: PUSH
82493: EMPTY
82494: LIST
82495: LIST
82496: LIST
82497: PPUSH
82498: CALL_OW 72
82502: IFFALSE 82512
// pos := 2 ;
82504: LD_ADDR_VAR 0 6
82508: PUSH
82509: LD_INT 2
82511: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
82512: LD_ADDR_VAR 0 7
82516: PUSH
82517: LD_VAR 0 7
82521: PPUSH
82522: LD_VAR 0 6
82526: PPUSH
82527: LD_VAR 0 7
82531: PPUSH
82532: CALL 18745 0 3
82536: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
82537: LD_ADDR_EXP 57
82541: PUSH
82542: LD_EXP 57
82546: PPUSH
82547: LD_VAR 0 3
82551: PPUSH
82552: LD_VAR 0 7
82556: PPUSH
82557: CALL_OW 1
82561: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
82562: LD_VAR 0 1
82566: PUSH
82567: LD_EXP 52
82571: PUSH
82572: LD_VAR 0 3
82576: ARRAY
82577: IN
82578: IFFALSE 82617
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
82580: LD_ADDR_EXP 52
82584: PUSH
82585: LD_EXP 52
82589: PPUSH
82590: LD_VAR 0 3
82594: PPUSH
82595: LD_EXP 52
82599: PUSH
82600: LD_VAR 0 3
82604: ARRAY
82605: PUSH
82606: LD_VAR 0 1
82610: DIFF
82611: PPUSH
82612: CALL_OW 1
82616: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
82617: LD_VAR 0 1
82621: PUSH
82622: LD_EXP 59
82626: PUSH
82627: LD_VAR 0 3
82631: ARRAY
82632: IN
82633: IFFALSE 82672
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
82635: LD_ADDR_EXP 59
82639: PUSH
82640: LD_EXP 59
82644: PPUSH
82645: LD_VAR 0 3
82649: PPUSH
82650: LD_EXP 59
82654: PUSH
82655: LD_VAR 0 3
82659: ARRAY
82660: PUSH
82661: LD_VAR 0 1
82665: DIFF
82666: PPUSH
82667: CALL_OW 1
82671: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
82672: LD_VAR 0 1
82676: PUSH
82677: LD_EXP 71
82681: PUSH
82682: LD_VAR 0 3
82686: ARRAY
82687: IN
82688: IFFALSE 82727
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
82690: LD_ADDR_EXP 71
82694: PUSH
82695: LD_EXP 71
82699: PPUSH
82700: LD_VAR 0 3
82704: PPUSH
82705: LD_EXP 71
82709: PUSH
82710: LD_VAR 0 3
82714: ARRAY
82715: PUSH
82716: LD_VAR 0 1
82720: DIFF
82721: PPUSH
82722: CALL_OW 1
82726: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
82727: LD_VAR 0 1
82731: PUSH
82732: LD_EXP 74
82736: PUSH
82737: LD_VAR 0 3
82741: ARRAY
82742: IN
82743: IFFALSE 82782
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
82745: LD_ADDR_EXP 74
82749: PUSH
82750: LD_EXP 74
82754: PPUSH
82755: LD_VAR 0 3
82759: PPUSH
82760: LD_EXP 74
82764: PUSH
82765: LD_VAR 0 3
82769: ARRAY
82770: PUSH
82771: LD_VAR 0 1
82775: DIFF
82776: PPUSH
82777: CALL_OW 1
82781: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
82782: LD_VAR 0 1
82786: PUSH
82787: LD_EXP 61
82791: PUSH
82792: LD_VAR 0 3
82796: ARRAY
82797: IN
82798: IFFALSE 82837
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
82800: LD_ADDR_EXP 61
82804: PUSH
82805: LD_EXP 61
82809: PPUSH
82810: LD_VAR 0 3
82814: PPUSH
82815: LD_EXP 61
82819: PUSH
82820: LD_VAR 0 3
82824: ARRAY
82825: PUSH
82826: LD_VAR 0 1
82830: DIFF
82831: PPUSH
82832: CALL_OW 1
82836: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
82837: LD_VAR 0 1
82841: PUSH
82842: LD_EXP 60
82846: PUSH
82847: LD_VAR 0 3
82851: ARRAY
82852: IN
82853: IFFALSE 82892
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
82855: LD_ADDR_EXP 60
82859: PUSH
82860: LD_EXP 60
82864: PPUSH
82865: LD_VAR 0 3
82869: PPUSH
82870: LD_EXP 60
82874: PUSH
82875: LD_VAR 0 3
82879: ARRAY
82880: PUSH
82881: LD_VAR 0 1
82885: DIFF
82886: PPUSH
82887: CALL_OW 1
82891: ST_TO_ADDR
// end ; break ;
82892: GO 82896
// end ;
82894: GO 81542
82896: POP
82897: POP
// end ;
82898: LD_VAR 0 2
82902: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
82903: LD_INT 0
82905: PPUSH
82906: PPUSH
82907: PPUSH
// if not mc_bases or not skirmish then
82908: LD_EXP 52
82912: NOT
82913: PUSH
82914: LD_EXP 50
82918: NOT
82919: OR
82920: IFFALSE 82924
// exit ;
82922: GO 83139
// for i = 1 to mc_bases do
82924: LD_ADDR_VAR 0 3
82928: PUSH
82929: DOUBLE
82930: LD_INT 1
82932: DEC
82933: ST_TO_ADDR
82934: LD_EXP 52
82938: PUSH
82939: FOR_TO
82940: IFFALSE 83137
// begin if building in mc_construct_list [ i ] then
82942: LD_VAR 0 1
82946: PUSH
82947: LD_EXP 59
82951: PUSH
82952: LD_VAR 0 3
82956: ARRAY
82957: IN
82958: IFFALSE 83135
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82960: LD_ADDR_EXP 59
82964: PUSH
82965: LD_EXP 59
82969: PPUSH
82970: LD_VAR 0 3
82974: PPUSH
82975: LD_EXP 59
82979: PUSH
82980: LD_VAR 0 3
82984: ARRAY
82985: PUSH
82986: LD_VAR 0 1
82990: DIFF
82991: PPUSH
82992: CALL_OW 1
82996: ST_TO_ADDR
// if building in mc_lab [ i ] then
82997: LD_VAR 0 1
83001: PUSH
83002: LD_EXP 85
83006: PUSH
83007: LD_VAR 0 3
83011: ARRAY
83012: IN
83013: IFFALSE 83068
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
83015: LD_ADDR_EXP 86
83019: PUSH
83020: LD_EXP 86
83024: PPUSH
83025: LD_VAR 0 3
83029: PPUSH
83030: LD_EXP 86
83034: PUSH
83035: LD_VAR 0 3
83039: ARRAY
83040: PPUSH
83041: LD_INT 1
83043: PPUSH
83044: LD_EXP 86
83048: PUSH
83049: LD_VAR 0 3
83053: ARRAY
83054: PPUSH
83055: LD_INT 0
83057: PPUSH
83058: CALL 17837 0 4
83062: PPUSH
83063: CALL_OW 1
83067: ST_TO_ADDR
// if not building in mc_bases [ i ] then
83068: LD_VAR 0 1
83072: PUSH
83073: LD_EXP 52
83077: PUSH
83078: LD_VAR 0 3
83082: ARRAY
83083: IN
83084: NOT
83085: IFFALSE 83131
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
83087: LD_ADDR_EXP 52
83091: PUSH
83092: LD_EXP 52
83096: PPUSH
83097: LD_VAR 0 3
83101: PUSH
83102: LD_EXP 52
83106: PUSH
83107: LD_VAR 0 3
83111: ARRAY
83112: PUSH
83113: LD_INT 1
83115: PLUS
83116: PUSH
83117: EMPTY
83118: LIST
83119: LIST
83120: PPUSH
83121: LD_VAR 0 1
83125: PPUSH
83126: CALL 18419 0 3
83130: ST_TO_ADDR
// exit ;
83131: POP
83132: POP
83133: GO 83139
// end ; end ;
83135: GO 82939
83137: POP
83138: POP
// end ;
83139: LD_VAR 0 2
83143: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
83144: LD_INT 0
83146: PPUSH
83147: PPUSH
83148: PPUSH
83149: PPUSH
83150: PPUSH
83151: PPUSH
83152: PPUSH
// if not mc_bases or not skirmish then
83153: LD_EXP 52
83157: NOT
83158: PUSH
83159: LD_EXP 50
83163: NOT
83164: OR
83165: IFFALSE 83169
// exit ;
83167: GO 83830
// for i = 1 to mc_bases do
83169: LD_ADDR_VAR 0 3
83173: PUSH
83174: DOUBLE
83175: LD_INT 1
83177: DEC
83178: ST_TO_ADDR
83179: LD_EXP 52
83183: PUSH
83184: FOR_TO
83185: IFFALSE 83828
// begin if building in mc_construct_list [ i ] then
83187: LD_VAR 0 1
83191: PUSH
83192: LD_EXP 59
83196: PUSH
83197: LD_VAR 0 3
83201: ARRAY
83202: IN
83203: IFFALSE 83826
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
83205: LD_ADDR_EXP 59
83209: PUSH
83210: LD_EXP 59
83214: PPUSH
83215: LD_VAR 0 3
83219: PPUSH
83220: LD_EXP 59
83224: PUSH
83225: LD_VAR 0 3
83229: ARRAY
83230: PUSH
83231: LD_VAR 0 1
83235: DIFF
83236: PPUSH
83237: CALL_OW 1
83241: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
83242: LD_ADDR_EXP 52
83246: PUSH
83247: LD_EXP 52
83251: PPUSH
83252: LD_VAR 0 3
83256: PUSH
83257: LD_EXP 52
83261: PUSH
83262: LD_VAR 0 3
83266: ARRAY
83267: PUSH
83268: LD_INT 1
83270: PLUS
83271: PUSH
83272: EMPTY
83273: LIST
83274: LIST
83275: PPUSH
83276: LD_VAR 0 1
83280: PPUSH
83281: CALL 18419 0 3
83285: ST_TO_ADDR
// btype := GetBType ( building ) ;
83286: LD_ADDR_VAR 0 5
83290: PUSH
83291: LD_VAR 0 1
83295: PPUSH
83296: CALL_OW 266
83300: ST_TO_ADDR
// side := GetSide ( building ) ;
83301: LD_ADDR_VAR 0 8
83305: PUSH
83306: LD_VAR 0 1
83310: PPUSH
83311: CALL_OW 255
83315: ST_TO_ADDR
// if btype = b_lab then
83316: LD_VAR 0 5
83320: PUSH
83321: LD_INT 6
83323: EQUAL
83324: IFFALSE 83374
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
83326: LD_ADDR_EXP 85
83330: PUSH
83331: LD_EXP 85
83335: PPUSH
83336: LD_VAR 0 3
83340: PUSH
83341: LD_EXP 85
83345: PUSH
83346: LD_VAR 0 3
83350: ARRAY
83351: PUSH
83352: LD_INT 1
83354: PLUS
83355: PUSH
83356: EMPTY
83357: LIST
83358: LIST
83359: PPUSH
83360: LD_VAR 0 1
83364: PPUSH
83365: CALL 18419 0 3
83369: ST_TO_ADDR
// exit ;
83370: POP
83371: POP
83372: GO 83830
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
83374: LD_VAR 0 5
83378: PUSH
83379: LD_INT 0
83381: PUSH
83382: LD_INT 2
83384: PUSH
83385: LD_INT 4
83387: PUSH
83388: EMPTY
83389: LIST
83390: LIST
83391: LIST
83392: IN
83393: IFFALSE 83517
// begin if btype = b_armoury then
83395: LD_VAR 0 5
83399: PUSH
83400: LD_INT 4
83402: EQUAL
83403: IFFALSE 83413
// btype := b_barracks ;
83405: LD_ADDR_VAR 0 5
83409: PUSH
83410: LD_INT 5
83412: ST_TO_ADDR
// if btype = b_depot then
83413: LD_VAR 0 5
83417: PUSH
83418: LD_INT 0
83420: EQUAL
83421: IFFALSE 83431
// btype := b_warehouse ;
83423: LD_ADDR_VAR 0 5
83427: PUSH
83428: LD_INT 1
83430: ST_TO_ADDR
// if btype = b_workshop then
83431: LD_VAR 0 5
83435: PUSH
83436: LD_INT 2
83438: EQUAL
83439: IFFALSE 83449
// btype := b_factory ;
83441: LD_ADDR_VAR 0 5
83445: PUSH
83446: LD_INT 3
83448: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
83449: LD_VAR 0 5
83453: PPUSH
83454: LD_VAR 0 8
83458: PPUSH
83459: CALL_OW 323
83463: PUSH
83464: LD_INT 1
83466: EQUAL
83467: IFFALSE 83513
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
83469: LD_ADDR_EXP 84
83473: PUSH
83474: LD_EXP 84
83478: PPUSH
83479: LD_VAR 0 3
83483: PUSH
83484: LD_EXP 84
83488: PUSH
83489: LD_VAR 0 3
83493: ARRAY
83494: PUSH
83495: LD_INT 1
83497: PLUS
83498: PUSH
83499: EMPTY
83500: LIST
83501: LIST
83502: PPUSH
83503: LD_VAR 0 1
83507: PPUSH
83508: CALL 18419 0 3
83512: ST_TO_ADDR
// exit ;
83513: POP
83514: POP
83515: GO 83830
// end ; if btype in [ b_bunker , b_turret ] then
83517: LD_VAR 0 5
83521: PUSH
83522: LD_INT 32
83524: PUSH
83525: LD_INT 33
83527: PUSH
83528: EMPTY
83529: LIST
83530: LIST
83531: IN
83532: IFFALSE 83822
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
83534: LD_ADDR_EXP 60
83538: PUSH
83539: LD_EXP 60
83543: PPUSH
83544: LD_VAR 0 3
83548: PUSH
83549: LD_EXP 60
83553: PUSH
83554: LD_VAR 0 3
83558: ARRAY
83559: PUSH
83560: LD_INT 1
83562: PLUS
83563: PUSH
83564: EMPTY
83565: LIST
83566: LIST
83567: PPUSH
83568: LD_VAR 0 1
83572: PPUSH
83573: CALL 18419 0 3
83577: ST_TO_ADDR
// if btype = b_bunker then
83578: LD_VAR 0 5
83582: PUSH
83583: LD_INT 32
83585: EQUAL
83586: IFFALSE 83822
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83588: LD_ADDR_EXP 61
83592: PUSH
83593: LD_EXP 61
83597: PPUSH
83598: LD_VAR 0 3
83602: PUSH
83603: LD_EXP 61
83607: PUSH
83608: LD_VAR 0 3
83612: ARRAY
83613: PUSH
83614: LD_INT 1
83616: PLUS
83617: PUSH
83618: EMPTY
83619: LIST
83620: LIST
83621: PPUSH
83622: LD_VAR 0 1
83626: PPUSH
83627: CALL 18419 0 3
83631: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
83632: LD_ADDR_VAR 0 6
83636: PUSH
83637: LD_EXP 52
83641: PUSH
83642: LD_VAR 0 3
83646: ARRAY
83647: PPUSH
83648: LD_INT 25
83650: PUSH
83651: LD_INT 1
83653: PUSH
83654: EMPTY
83655: LIST
83656: LIST
83657: PUSH
83658: LD_INT 3
83660: PUSH
83661: LD_INT 54
83663: PUSH
83664: EMPTY
83665: LIST
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PUSH
83671: EMPTY
83672: LIST
83673: LIST
83674: PPUSH
83675: CALL_OW 72
83679: ST_TO_ADDR
// if tmp then
83680: LD_VAR 0 6
83684: IFFALSE 83690
// exit ;
83686: POP
83687: POP
83688: GO 83830
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
83690: LD_ADDR_VAR 0 6
83694: PUSH
83695: LD_EXP 52
83699: PUSH
83700: LD_VAR 0 3
83704: ARRAY
83705: PPUSH
83706: LD_INT 2
83708: PUSH
83709: LD_INT 30
83711: PUSH
83712: LD_INT 4
83714: PUSH
83715: EMPTY
83716: LIST
83717: LIST
83718: PUSH
83719: LD_INT 30
83721: PUSH
83722: LD_INT 5
83724: PUSH
83725: EMPTY
83726: LIST
83727: LIST
83728: PUSH
83729: EMPTY
83730: LIST
83731: LIST
83732: LIST
83733: PPUSH
83734: CALL_OW 72
83738: ST_TO_ADDR
// if not tmp then
83739: LD_VAR 0 6
83743: NOT
83744: IFFALSE 83750
// exit ;
83746: POP
83747: POP
83748: GO 83830
// for j in tmp do
83750: LD_ADDR_VAR 0 4
83754: PUSH
83755: LD_VAR 0 6
83759: PUSH
83760: FOR_IN
83761: IFFALSE 83820
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
83763: LD_ADDR_VAR 0 7
83767: PUSH
83768: LD_VAR 0 4
83772: PPUSH
83773: CALL_OW 313
83777: PPUSH
83778: LD_INT 25
83780: PUSH
83781: LD_INT 1
83783: PUSH
83784: EMPTY
83785: LIST
83786: LIST
83787: PPUSH
83788: CALL_OW 72
83792: ST_TO_ADDR
// if units then
83793: LD_VAR 0 7
83797: IFFALSE 83818
// begin ComExitBuilding ( units [ 1 ] ) ;
83799: LD_VAR 0 7
83803: PUSH
83804: LD_INT 1
83806: ARRAY
83807: PPUSH
83808: CALL_OW 122
// exit ;
83812: POP
83813: POP
83814: POP
83815: POP
83816: GO 83830
// end ; end ;
83818: GO 83760
83820: POP
83821: POP
// end ; end ; exit ;
83822: POP
83823: POP
83824: GO 83830
// end ; end ;
83826: GO 83184
83828: POP
83829: POP
// end ;
83830: LD_VAR 0 2
83834: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
83835: LD_INT 0
83837: PPUSH
83838: PPUSH
83839: PPUSH
83840: PPUSH
83841: PPUSH
83842: PPUSH
83843: PPUSH
// if not mc_bases or not skirmish then
83844: LD_EXP 52
83848: NOT
83849: PUSH
83850: LD_EXP 50
83854: NOT
83855: OR
83856: IFFALSE 83860
// exit ;
83858: GO 84091
// btype := GetBType ( building ) ;
83860: LD_ADDR_VAR 0 6
83864: PUSH
83865: LD_VAR 0 1
83869: PPUSH
83870: CALL_OW 266
83874: ST_TO_ADDR
// x := GetX ( building ) ;
83875: LD_ADDR_VAR 0 7
83879: PUSH
83880: LD_VAR 0 1
83884: PPUSH
83885: CALL_OW 250
83889: ST_TO_ADDR
// y := GetY ( building ) ;
83890: LD_ADDR_VAR 0 8
83894: PUSH
83895: LD_VAR 0 1
83899: PPUSH
83900: CALL_OW 251
83904: ST_TO_ADDR
// d := GetDir ( building ) ;
83905: LD_ADDR_VAR 0 9
83909: PUSH
83910: LD_VAR 0 1
83914: PPUSH
83915: CALL_OW 254
83919: ST_TO_ADDR
// for i = 1 to mc_bases do
83920: LD_ADDR_VAR 0 4
83924: PUSH
83925: DOUBLE
83926: LD_INT 1
83928: DEC
83929: ST_TO_ADDR
83930: LD_EXP 52
83934: PUSH
83935: FOR_TO
83936: IFFALSE 84089
// begin if not mc_build_list [ i ] then
83938: LD_EXP 57
83942: PUSH
83943: LD_VAR 0 4
83947: ARRAY
83948: NOT
83949: IFFALSE 83953
// continue ;
83951: GO 83935
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
83953: LD_VAR 0 6
83957: PUSH
83958: LD_VAR 0 7
83962: PUSH
83963: LD_VAR 0 8
83967: PUSH
83968: LD_VAR 0 9
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: LIST
83977: LIST
83978: PPUSH
83979: LD_EXP 57
83983: PUSH
83984: LD_VAR 0 4
83988: ARRAY
83989: PUSH
83990: LD_INT 1
83992: ARRAY
83993: PPUSH
83994: CALL 24588 0 2
83998: IFFALSE 84087
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
84000: LD_ADDR_EXP 57
84004: PUSH
84005: LD_EXP 57
84009: PPUSH
84010: LD_VAR 0 4
84014: PPUSH
84015: LD_EXP 57
84019: PUSH
84020: LD_VAR 0 4
84024: ARRAY
84025: PPUSH
84026: LD_INT 1
84028: PPUSH
84029: CALL_OW 3
84033: PPUSH
84034: CALL_OW 1
84038: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
84039: LD_ADDR_EXP 59
84043: PUSH
84044: LD_EXP 59
84048: PPUSH
84049: LD_VAR 0 4
84053: PUSH
84054: LD_EXP 59
84058: PUSH
84059: LD_VAR 0 4
84063: ARRAY
84064: PUSH
84065: LD_INT 1
84067: PLUS
84068: PUSH
84069: EMPTY
84070: LIST
84071: LIST
84072: PPUSH
84073: LD_VAR 0 1
84077: PPUSH
84078: CALL 18419 0 3
84082: ST_TO_ADDR
// exit ;
84083: POP
84084: POP
84085: GO 84091
// end ; end ;
84087: GO 83935
84089: POP
84090: POP
// end ;
84091: LD_VAR 0 3
84095: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
84096: LD_INT 0
84098: PPUSH
84099: PPUSH
84100: PPUSH
// if not mc_bases or not skirmish then
84101: LD_EXP 52
84105: NOT
84106: PUSH
84107: LD_EXP 50
84111: NOT
84112: OR
84113: IFFALSE 84117
// exit ;
84115: GO 84307
// for i = 1 to mc_bases do
84117: LD_ADDR_VAR 0 4
84121: PUSH
84122: DOUBLE
84123: LD_INT 1
84125: DEC
84126: ST_TO_ADDR
84127: LD_EXP 52
84131: PUSH
84132: FOR_TO
84133: IFFALSE 84220
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
84135: LD_VAR 0 1
84139: PUSH
84140: LD_EXP 60
84144: PUSH
84145: LD_VAR 0 4
84149: ARRAY
84150: IN
84151: PUSH
84152: LD_VAR 0 1
84156: PUSH
84157: LD_EXP 61
84161: PUSH
84162: LD_VAR 0 4
84166: ARRAY
84167: IN
84168: NOT
84169: AND
84170: IFFALSE 84218
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84172: LD_ADDR_EXP 61
84176: PUSH
84177: LD_EXP 61
84181: PPUSH
84182: LD_VAR 0 4
84186: PUSH
84187: LD_EXP 61
84191: PUSH
84192: LD_VAR 0 4
84196: ARRAY
84197: PUSH
84198: LD_INT 1
84200: PLUS
84201: PUSH
84202: EMPTY
84203: LIST
84204: LIST
84205: PPUSH
84206: LD_VAR 0 1
84210: PPUSH
84211: CALL 18419 0 3
84215: ST_TO_ADDR
// break ;
84216: GO 84220
// end ; end ;
84218: GO 84132
84220: POP
84221: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
84222: LD_VAR 0 1
84226: PPUSH
84227: CALL_OW 257
84231: PUSH
84232: LD_EXP 78
84236: IN
84237: PUSH
84238: LD_VAR 0 1
84242: PPUSH
84243: CALL_OW 266
84247: PUSH
84248: LD_INT 5
84250: EQUAL
84251: AND
84252: PUSH
84253: LD_VAR 0 2
84257: PPUSH
84258: CALL_OW 110
84262: PUSH
84263: LD_INT 18
84265: NONEQUAL
84266: AND
84267: IFFALSE 84307
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
84269: LD_VAR 0 2
84273: PPUSH
84274: CALL_OW 257
84278: PUSH
84279: LD_INT 5
84281: PUSH
84282: LD_INT 8
84284: PUSH
84285: LD_INT 9
84287: PUSH
84288: EMPTY
84289: LIST
84290: LIST
84291: LIST
84292: IN
84293: IFFALSE 84307
// SetClass ( unit , 1 ) ;
84295: LD_VAR 0 2
84299: PPUSH
84300: LD_INT 1
84302: PPUSH
84303: CALL_OW 336
// end ;
84307: LD_VAR 0 3
84311: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
84312: LD_INT 0
84314: PPUSH
84315: PPUSH
// if not mc_bases or not skirmish then
84316: LD_EXP 52
84320: NOT
84321: PUSH
84322: LD_EXP 50
84326: NOT
84327: OR
84328: IFFALSE 84332
// exit ;
84330: GO 84448
// if GetLives ( abandoned_vehicle ) > 250 then
84332: LD_VAR 0 2
84336: PPUSH
84337: CALL_OW 256
84341: PUSH
84342: LD_INT 250
84344: GREATER
84345: IFFALSE 84349
// exit ;
84347: GO 84448
// for i = 1 to mc_bases do
84349: LD_ADDR_VAR 0 6
84353: PUSH
84354: DOUBLE
84355: LD_INT 1
84357: DEC
84358: ST_TO_ADDR
84359: LD_EXP 52
84363: PUSH
84364: FOR_TO
84365: IFFALSE 84446
// begin if driver in mc_bases [ i ] then
84367: LD_VAR 0 1
84371: PUSH
84372: LD_EXP 52
84376: PUSH
84377: LD_VAR 0 6
84381: ARRAY
84382: IN
84383: IFFALSE 84444
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
84385: LD_VAR 0 1
84389: PPUSH
84390: LD_EXP 52
84394: PUSH
84395: LD_VAR 0 6
84399: ARRAY
84400: PPUSH
84401: LD_INT 2
84403: PUSH
84404: LD_INT 30
84406: PUSH
84407: LD_INT 0
84409: PUSH
84410: EMPTY
84411: LIST
84412: LIST
84413: PUSH
84414: LD_INT 30
84416: PUSH
84417: LD_INT 1
84419: PUSH
84420: EMPTY
84421: LIST
84422: LIST
84423: PUSH
84424: EMPTY
84425: LIST
84426: LIST
84427: LIST
84428: PPUSH
84429: CALL_OW 72
84433: PUSH
84434: LD_INT 1
84436: ARRAY
84437: PPUSH
84438: CALL_OW 112
// break ;
84442: GO 84446
// end ; end ;
84444: GO 84364
84446: POP
84447: POP
// end ; end_of_file end_of_file end_of_file
84448: LD_VAR 0 5
84452: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
84453: LD_INT 0
84455: PPUSH
84456: PPUSH
84457: PPUSH
84458: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84459: LD_VAR 0 1
84463: PPUSH
84464: CALL_OW 264
84468: PUSH
84469: LD_EXP 49
84473: EQUAL
84474: IFFALSE 84546
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84476: LD_INT 68
84478: PPUSH
84479: LD_VAR 0 1
84483: PPUSH
84484: CALL_OW 255
84488: PPUSH
84489: CALL_OW 321
84493: PUSH
84494: LD_INT 2
84496: EQUAL
84497: IFFALSE 84509
// eff := 70 else
84499: LD_ADDR_VAR 0 6
84503: PUSH
84504: LD_INT 70
84506: ST_TO_ADDR
84507: GO 84517
// eff := 30 ;
84509: LD_ADDR_VAR 0 6
84513: PUSH
84514: LD_INT 30
84516: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84517: LD_VAR 0 1
84521: PPUSH
84522: CALL_OW 250
84526: PPUSH
84527: LD_VAR 0 1
84531: PPUSH
84532: CALL_OW 251
84536: PPUSH
84537: LD_VAR 0 6
84541: PPUSH
84542: CALL_OW 495
// end ; end ;
84546: LD_VAR 0 4
84550: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
84551: LD_INT 0
84553: PPUSH
84554: PPUSH
84555: PPUSH
84556: PPUSH
84557: PPUSH
84558: PPUSH
// if cmd = 124 then
84559: LD_VAR 0 1
84563: PUSH
84564: LD_INT 124
84566: EQUAL
84567: IFFALSE 84773
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
84569: LD_ADDR_VAR 0 5
84573: PUSH
84574: LD_INT 2
84576: PUSH
84577: LD_INT 34
84579: PUSH
84580: LD_INT 53
84582: PUSH
84583: EMPTY
84584: LIST
84585: LIST
84586: PUSH
84587: LD_INT 34
84589: PUSH
84590: LD_INT 14
84592: PUSH
84593: EMPTY
84594: LIST
84595: LIST
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: LIST
84601: PPUSH
84602: CALL_OW 69
84606: ST_TO_ADDR
// if not tmp then
84607: LD_VAR 0 5
84611: NOT
84612: IFFALSE 84616
// exit ;
84614: GO 84773
// for i in tmp do
84616: LD_ADDR_VAR 0 3
84620: PUSH
84621: LD_VAR 0 5
84625: PUSH
84626: FOR_IN
84627: IFFALSE 84771
// begin taskList := GetTaskList ( i ) ;
84629: LD_ADDR_VAR 0 6
84633: PUSH
84634: LD_VAR 0 3
84638: PPUSH
84639: CALL_OW 437
84643: ST_TO_ADDR
// if not taskList then
84644: LD_VAR 0 6
84648: NOT
84649: IFFALSE 84653
// continue ;
84651: GO 84626
// for j = 1 to taskList do
84653: LD_ADDR_VAR 0 4
84657: PUSH
84658: DOUBLE
84659: LD_INT 1
84661: DEC
84662: ST_TO_ADDR
84663: LD_VAR 0 6
84667: PUSH
84668: FOR_TO
84669: IFFALSE 84767
// if taskList [ j ] [ 1 ] = | then
84671: LD_VAR 0 6
84675: PUSH
84676: LD_VAR 0 4
84680: ARRAY
84681: PUSH
84682: LD_INT 1
84684: ARRAY
84685: PUSH
84686: LD_STRING |
84688: EQUAL
84689: IFFALSE 84765
// begin _taskList := Delete ( taskList , 1 ) ;
84691: LD_ADDR_VAR 0 7
84695: PUSH
84696: LD_VAR 0 6
84700: PPUSH
84701: LD_INT 1
84703: PPUSH
84704: CALL_OW 3
84708: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
84709: LD_VAR 0 3
84713: PPUSH
84714: LD_VAR 0 7
84718: PPUSH
84719: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
84723: LD_VAR 0 3
84727: PPUSH
84728: LD_VAR 0 6
84732: PUSH
84733: LD_VAR 0 4
84737: ARRAY
84738: PUSH
84739: LD_INT 2
84741: ARRAY
84742: PPUSH
84743: LD_VAR 0 6
84747: PUSH
84748: LD_VAR 0 4
84752: ARRAY
84753: PUSH
84754: LD_INT 3
84756: ARRAY
84757: PPUSH
84758: LD_INT 8
84760: PPUSH
84761: CALL 84778 0 4
// end ;
84765: GO 84668
84767: POP
84768: POP
// end ;
84769: GO 84626
84771: POP
84772: POP
// end ; end ;
84773: LD_VAR 0 2
84777: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84778: LD_INT 0
84780: PPUSH
84781: PPUSH
84782: PPUSH
84783: PPUSH
84784: PPUSH
84785: PPUSH
84786: PPUSH
84787: PPUSH
84788: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84789: LD_VAR 0 1
84793: NOT
84794: PUSH
84795: LD_VAR 0 2
84799: PPUSH
84800: LD_VAR 0 3
84804: PPUSH
84805: CALL_OW 488
84809: NOT
84810: OR
84811: PUSH
84812: LD_VAR 0 4
84816: NOT
84817: OR
84818: IFFALSE 84822
// exit ;
84820: GO 85162
// list := [ ] ;
84822: LD_ADDR_VAR 0 13
84826: PUSH
84827: EMPTY
84828: ST_TO_ADDR
// if x - r < 0 then
84829: LD_VAR 0 2
84833: PUSH
84834: LD_VAR 0 4
84838: MINUS
84839: PUSH
84840: LD_INT 0
84842: LESS
84843: IFFALSE 84855
// min_x := 0 else
84845: LD_ADDR_VAR 0 7
84849: PUSH
84850: LD_INT 0
84852: ST_TO_ADDR
84853: GO 84871
// min_x := x - r ;
84855: LD_ADDR_VAR 0 7
84859: PUSH
84860: LD_VAR 0 2
84864: PUSH
84865: LD_VAR 0 4
84869: MINUS
84870: ST_TO_ADDR
// if y - r < 0 then
84871: LD_VAR 0 3
84875: PUSH
84876: LD_VAR 0 4
84880: MINUS
84881: PUSH
84882: LD_INT 0
84884: LESS
84885: IFFALSE 84897
// min_y := 0 else
84887: LD_ADDR_VAR 0 8
84891: PUSH
84892: LD_INT 0
84894: ST_TO_ADDR
84895: GO 84913
// min_y := y - r ;
84897: LD_ADDR_VAR 0 8
84901: PUSH
84902: LD_VAR 0 3
84906: PUSH
84907: LD_VAR 0 4
84911: MINUS
84912: ST_TO_ADDR
// max_x := x + r ;
84913: LD_ADDR_VAR 0 9
84917: PUSH
84918: LD_VAR 0 2
84922: PUSH
84923: LD_VAR 0 4
84927: PLUS
84928: ST_TO_ADDR
// max_y := y + r ;
84929: LD_ADDR_VAR 0 10
84933: PUSH
84934: LD_VAR 0 3
84938: PUSH
84939: LD_VAR 0 4
84943: PLUS
84944: ST_TO_ADDR
// for _x = min_x to max_x do
84945: LD_ADDR_VAR 0 11
84949: PUSH
84950: DOUBLE
84951: LD_VAR 0 7
84955: DEC
84956: ST_TO_ADDR
84957: LD_VAR 0 9
84961: PUSH
84962: FOR_TO
84963: IFFALSE 85080
// for _y = min_y to max_y do
84965: LD_ADDR_VAR 0 12
84969: PUSH
84970: DOUBLE
84971: LD_VAR 0 8
84975: DEC
84976: ST_TO_ADDR
84977: LD_VAR 0 10
84981: PUSH
84982: FOR_TO
84983: IFFALSE 85076
// begin if not ValidHex ( _x , _y ) then
84985: LD_VAR 0 11
84989: PPUSH
84990: LD_VAR 0 12
84994: PPUSH
84995: CALL_OW 488
84999: NOT
85000: IFFALSE 85004
// continue ;
85002: GO 84982
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85004: LD_VAR 0 11
85008: PPUSH
85009: LD_VAR 0 12
85013: PPUSH
85014: CALL_OW 351
85018: PUSH
85019: LD_VAR 0 11
85023: PPUSH
85024: LD_VAR 0 12
85028: PPUSH
85029: CALL_OW 554
85033: AND
85034: IFFALSE 85074
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85036: LD_ADDR_VAR 0 13
85040: PUSH
85041: LD_VAR 0 13
85045: PPUSH
85046: LD_VAR 0 13
85050: PUSH
85051: LD_INT 1
85053: PLUS
85054: PPUSH
85055: LD_VAR 0 11
85059: PUSH
85060: LD_VAR 0 12
85064: PUSH
85065: EMPTY
85066: LIST
85067: LIST
85068: PPUSH
85069: CALL_OW 2
85073: ST_TO_ADDR
// end ;
85074: GO 84982
85076: POP
85077: POP
85078: GO 84962
85080: POP
85081: POP
// if not list then
85082: LD_VAR 0 13
85086: NOT
85087: IFFALSE 85091
// exit ;
85089: GO 85162
// for i in list do
85091: LD_ADDR_VAR 0 6
85095: PUSH
85096: LD_VAR 0 13
85100: PUSH
85101: FOR_IN
85102: IFFALSE 85160
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85104: LD_VAR 0 1
85108: PPUSH
85109: LD_STRING M
85111: PUSH
85112: LD_VAR 0 6
85116: PUSH
85117: LD_INT 1
85119: ARRAY
85120: PUSH
85121: LD_VAR 0 6
85125: PUSH
85126: LD_INT 2
85128: ARRAY
85129: PUSH
85130: LD_INT 0
85132: PUSH
85133: LD_INT 0
85135: PUSH
85136: LD_INT 0
85138: PUSH
85139: LD_INT 0
85141: PUSH
85142: EMPTY
85143: LIST
85144: LIST
85145: LIST
85146: LIST
85147: LIST
85148: LIST
85149: LIST
85150: PUSH
85151: EMPTY
85152: LIST
85153: PPUSH
85154: CALL_OW 447
85158: GO 85101
85160: POP
85161: POP
// end ;
85162: LD_VAR 0 5
85166: RET
