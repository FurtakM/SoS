// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5207 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2370 0 0
// PrepareBeta ;
  49: CALL 2759 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 10936 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3341 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4066 0 0
// PrepareRUBase_v2 ;
 877: CALL 4482 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 56252 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3953 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10793 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10793 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10793 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10793 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2048
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4810 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2017
// Say ( Brighton , DBrighton-F1a ) else
2003: LD_EXP 8
2007: PPUSH
2008: LD_STRING DBrighton-F1a
2010: PPUSH
2011: CALL_OW 88
2015: GO 2036
// begin Say ( Brighton , DBrighton-F1 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DBrighton-F1
2024: PPUSH
2025: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2029: LD_STRING C3
2031: PPUSH
2032: CALL_OW 337
// end ; DialogueOff ;
2036: CALL_OW 7
// JMM_Arrived := true ;
2040: LD_ADDR_EXP 5
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// end ;
2048: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2049: LD_EXP 5
2053: PUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_EXP 18
2061: PPUSH
2062: CALL_OW 292
2066: AND
2067: IFFALSE 2096
2069: GO 2071
2071: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2072: LD_EXP 18
2076: PPUSH
2077: LD_STRING DBurlak
2079: PPUSH
2080: CALL_OW 88
// Say ( JMM , DJMM ) ;
2084: LD_EXP 36
2088: PPUSH
2089: LD_STRING DJMM
2091: PPUSH
2092: CALL_OW 88
// end ;
2096: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2097: LD_INT 1
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: LD_INT 34
2115: PUSH
2116: LD_INT 9
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 35
2125: PUSH
2126: LD_INT 9
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: GREATER
2151: IFFALSE 2164
2153: GO 2155
2155: DISABLE
// begin LaserBuilt := true ;
2156: LD_ADDR_EXP 6
2160: PUSH
2161: LD_INT 1
2163: ST_TO_ADDR
// end ;
2164: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2165: LD_EXP 7
2169: PUSH
2170: LD_INT 6
2172: PPUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 35
2188: PUSH
2189: LD_INT 9
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 69
2208: PPUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 310
2218: PPUSH
2219: CALL_OW 74
2223: PPUSH
2224: CALL_OW 292
2228: AND
2229: IFFALSE 2265
2231: GO 2233
2233: DISABLE
// begin wait ( 0 0$5 ) ;
2234: LD_INT 175
2236: PPUSH
2237: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2241: LD_EXP 15
2245: PPUSH
2246: LD_STRING DDeath-Vse-2
2248: PPUSH
2249: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2253: LD_EXP 12
2257: PPUSH
2258: LD_STRING DDeath-Yas-2
2260: PPUSH
2261: CALL_OW 88
// end ;
2265: END
// every 0 0$1 trigger AssaultStarted do
2266: LD_EXP 7
2270: IFFALSE 2294
2272: GO 2274
2274: DISABLE
// begin wait ( 0 0$20 ) ;
2275: LD_INT 700
2277: PPUSH
2278: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2282: LD_EXP 13
2286: PPUSH
2287: LD_STRING DDeath-Pop-2
2289: PPUSH
2290: CALL_OW 88
// end ;
2294: END
// every 0 0$1 trigger MissionStart do
2295: LD_EXP 1
2299: IFFALSE 2341
2301: GO 2303
2303: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2304: LD_INT 1750
2306: PPUSH
2307: LD_INT 4900
2309: PPUSH
2310: CALL_OW 12
2314: PPUSH
2315: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2319: LD_INT 2
2321: PPUSH
2322: LD_INT 5
2324: PPUSH
2325: CALL_OW 12
2329: PPUSH
2330: LD_INT 12
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 55
// enable ;
2340: ENABLE
// end ;
2341: END
// every 0 0$1 trigger MissionStart do
2342: LD_EXP 1
2346: IFFALSE 2369
2348: GO 2350
2350: DISABLE
// begin enable ;
2351: ENABLE
// display_Strings := [ #tick , tick ] ;
2352: LD_ADDR_OWVAR 47
2356: PUSH
2357: LD_STRING #tick
2359: PUSH
2360: LD_OWVAR 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: ST_TO_ADDR
// end ; end_of_file
2369: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2370: LD_INT 0
2372: PPUSH
// uc_side := 1 ;
2373: LD_ADDR_OWVAR 20
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// hc_class = class_soldier ;
2381: LD_ADDR_OWVAR 28
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// uc_nation := nation_american ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// hc_sex = sex_male ;
2397: LD_ADDR_OWVAR 27
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// hc_importance = 110 ;
2405: LD_ADDR_OWVAR 32
2409: PUSH
2410: LD_INT 110
2412: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2413: LD_ADDR_OWVAR 30
2417: PUSH
2418: LD_INT 5
2420: PUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 5
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2436: LD_ADDR_OWVAR 31
2440: PUSH
2441: LD_INT 9
2443: PUSH
2444: LD_INT 6
2446: PUSH
2447: LD_INT 7
2449: PUSH
2450: LD_INT 6
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2459: LD_ADDR_OWVAR 29
2463: PUSH
2464: LD_INT 12
2466: PUSH
2467: LD_INT 10
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2474: LD_ADDR_OWVAR 26
2478: PUSH
2479: LD_STRING Gerard Brighton
2481: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2482: LD_ADDR_OWVAR 33
2486: PUSH
2487: LD_STRING Beta_Skirmish
2489: ST_TO_ADDR
// hc_face_number := 1 ;
2490: LD_ADDR_OWVAR 34
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// Brighton := CreateHuman ;
2498: LD_ADDR_EXP 8
2502: PUSH
2503: CALL_OW 44
2507: ST_TO_ADDR
// uc_nation := nation_american ;
2508: LD_ADDR_OWVAR 21
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// hc_importance = 80 ;
2516: LD_ADDR_OWVAR 32
2520: PUSH
2521: LD_INT 80
2523: ST_TO_ADDR
// hc_sex = sex_male ;
2524: LD_ADDR_OWVAR 27
2528: PUSH
2529: LD_INT 1
2531: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2532: LD_ADDR_OWVAR 30
2536: PUSH
2537: LD_INT 5
2539: PUSH
2540: LD_INT 5
2542: PUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2555: LD_ADDR_OWVAR 31
2559: PUSH
2560: LD_INT 7
2562: PUSH
2563: LD_INT 6
2565: PUSH
2566: LD_INT 5
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2578: LD_ADDR_OWVAR 29
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 10
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// hc_name := Brian Palmer ;
2593: LD_ADDR_OWVAR 26
2597: PUSH
2598: LD_STRING Brian Palmer
2600: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2601: LD_ADDR_OWVAR 33
2605: PUSH
2606: LD_STRING Beta_Skirmish
2608: ST_TO_ADDR
// hc_face_number := 3 ;
2609: LD_ADDR_OWVAR 34
2613: PUSH
2614: LD_INT 3
2616: ST_TO_ADDR
// Palmer := CreateHuman ;
2617: LD_ADDR_EXP 9
2621: PUSH
2622: CALL_OW 44
2626: ST_TO_ADDR
// hc_class = class_scientistic ;
2627: LD_ADDR_OWVAR 28
2631: PUSH
2632: LD_INT 4
2634: ST_TO_ADDR
// uc_nation := nation_american ;
2635: LD_ADDR_OWVAR 21
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// hc_importance = 70 ;
2643: LD_ADDR_OWVAR 32
2647: PUSH
2648: LD_INT 70
2650: ST_TO_ADDR
// hc_sex = sex_female ;
2651: LD_ADDR_OWVAR 27
2655: PUSH
2656: LD_INT 2
2658: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2659: LD_ADDR_OWVAR 30
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: LD_INT 4
2672: PUSH
2673: LD_INT 6
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2682: LD_ADDR_OWVAR 31
2686: PUSH
2687: LD_INT 4
2689: PUSH
2690: LD_INT 2
2692: PUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 8
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2705: LD_ADDR_OWVAR 29
2709: PUSH
2710: LD_INT 10
2712: PUSH
2713: LD_INT 10
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: ST_TO_ADDR
// hc_name := Megan Armitage ;
2720: LD_ADDR_OWVAR 26
2724: PUSH
2725: LD_STRING Megan Armitage
2727: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2728: LD_ADDR_OWVAR 33
2732: PUSH
2733: LD_STRING Beta_Skirmish
2735: ST_TO_ADDR
// hc_face_number := 4 ;
2736: LD_ADDR_OWVAR 34
2740: PUSH
2741: LD_INT 4
2743: ST_TO_ADDR
// Megan := CreateHuman ;
2744: LD_ADDR_EXP 10
2748: PUSH
2749: CALL_OW 44
2753: ST_TO_ADDR
// end ;
2754: LD_VAR 0 1
2758: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
2764: PPUSH
2765: PPUSH
// uc_side := 1 ;
2766: LD_ADDR_OWVAR 20
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// uc_nation := nation_american ;
2774: LD_ADDR_OWVAR 21
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2782: LD_ADDR_VAR 0 2
2786: PUSH
2787: LD_INT 22
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 30
2799: PUSH
2800: LD_INT 32
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PPUSH
2811: CALL_OW 69
2815: PUSH
2816: FOR_IN
2817: IFFALSE 2872
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2819: LD_VAR 0 2
2823: PPUSH
2824: LD_INT 2
2826: PUSH
2827: LD_INT 3
2829: PUSH
2830: LD_INT 4
2832: PUSH
2833: LD_INT 5
2835: PUSH
2836: LD_INT 11
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 4
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 1
2856: PPUSH
2857: LD_INT 7
2859: PPUSH
2860: CALL_OW 12
2864: ARRAY
2865: PPUSH
2866: CALL_OW 431
2870: GO 2816
2872: POP
2873: POP
// hc_name :=  ;
2874: LD_ADDR_OWVAR 26
2878: PUSH
2879: LD_STRING 
2881: ST_TO_ADDR
// hc_gallery :=  ;
2882: LD_ADDR_OWVAR 33
2886: PUSH
2887: LD_STRING 
2889: ST_TO_ADDR
// for i = 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 7
2902: PUSH
2903: LD_INT 6
2905: PUSH
2906: LD_INT 5
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: PUSH
2914: LD_OWVAR 67
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 2979
// begin PrepareSoldier ( 1 , game_skill ) ;
2923: LD_INT 1
2925: PPUSH
2926: LD_EXP 38
2930: PPUSH
2931: CALL_OW 381
// un := CreateHuman ;
2935: LD_ADDR_VAR 0 4
2939: PUSH
2940: CALL_OW 44
2944: ST_TO_ADDR
// filter := filter ^ un ;
2945: LD_ADDR_VAR 0 3
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_VAR 0 4
2959: ADD
2960: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2961: LD_ADDR_VAR 0 5
2965: PUSH
2966: LD_VAR 0 5
2970: PUSH
2971: LD_VAR 0 4
2975: ADD
2976: ST_TO_ADDR
// end ;
2977: GO 2920
2979: POP
2980: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 3
2993: PUSH
2994: LD_INT 2
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: PUSH
3005: LD_OWVAR 67
3009: ARRAY
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3066
// begin PrepareEngineer ( 0 , game_skill ) ;
3014: LD_INT 0
3016: PPUSH
3017: LD_EXP 38
3021: PPUSH
3022: CALL_OW 382
// un := CreateHuman ;
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: CALL_OW 44
3035: ST_TO_ADDR
// filter := filter ^ un ;
3036: LD_ADDR_VAR 0 3
3040: PUSH
3041: LD_VAR 0 3
3045: PUSH
3046: LD_VAR 0 4
3050: ADD
3051: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3052: LD_VAR 0 4
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: CALL_OW 52
// end ;
3064: GO 3011
3066: POP
3067: POP
// for i = 1 to [ 4 , 4 , 3 ] [ Difficulty ] do
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: DOUBLE
3074: LD_INT 1
3076: DEC
3077: ST_TO_ADDR
3078: LD_INT 4
3080: PUSH
3081: LD_INT 4
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: PUSH
3092: LD_OWVAR 67
3096: ARRAY
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3153
// begin PrepareMechanic ( 0 , game_skill ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_EXP 38
3108: PPUSH
3109: CALL_OW 383
// un := CreateHuman ;
3113: LD_ADDR_VAR 0 4
3117: PUSH
3118: CALL_OW 44
3122: ST_TO_ADDR
// filter := filter ^ un ;
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: LD_VAR 0 3
3132: PUSH
3133: LD_VAR 0 4
3137: ADD
3138: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 8
3146: PPUSH
3147: CALL_OW 52
// end ;
3151: GO 3098
3153: POP
3154: POP
// for i = 1 to 3 do
3155: LD_ADDR_VAR 0 2
3159: PUSH
3160: DOUBLE
3161: LD_INT 1
3163: DEC
3164: ST_TO_ADDR
3165: LD_INT 3
3167: PUSH
3168: FOR_TO
3169: IFFALSE 3223
// begin PrepareScientist ( 0 , game_skill ) ;
3171: LD_INT 0
3173: PPUSH
3174: LD_EXP 38
3178: PPUSH
3179: CALL_OW 384
// un := CreateHuman ;
3183: LD_ADDR_VAR 0 4
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// filter := filter ^ un ;
3193: LD_ADDR_VAR 0 3
3197: PUSH
3198: LD_VAR 0 3
3202: PUSH
3203: LD_VAR 0 4
3207: ADD
3208: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3209: LD_VAR 0 4
3213: PPUSH
3214: LD_INT 14
3216: PPUSH
3217: CALL_OW 52
// end ;
3221: GO 3168
3223: POP
3224: POP
// for i = 1 to soldiers do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_VAR 0 5
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3266
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3243: LD_VAR 0 5
3247: PUSH
3248: LD_VAR 0 2
3252: ARRAY
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
3264: GO 3240
3266: POP
3267: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3268: LD_EXP 8
3272: PPUSH
3273: LD_INT 51
3275: PPUSH
3276: LD_INT 43
3278: PPUSH
3279: LD_INT 0
3281: PPUSH
3282: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3286: LD_EXP 9
3290: PPUSH
3291: LD_INT 55
3293: PPUSH
3294: LD_INT 58
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3304: LD_EXP 10
3308: PPUSH
3309: LD_INT 39
3311: PPUSH
3312: LD_INT 36
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 48
// BetaSquad := filter diff 0 ;
3322: LD_ADDR_EXP 11
3326: PUSH
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 0
3334: DIFF
3335: ST_TO_ADDR
// end ;
3336: LD_VAR 0 1
3340: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3341: LD_INT 0
3343: PPUSH
3344: PPUSH
3345: PPUSH
3346: PPUSH
3347: PPUSH
3348: PPUSH
// uc_side := 6 ;
3349: LD_ADDR_OWVAR 20
3353: PUSH
3354: LD_INT 6
3356: ST_TO_ADDR
// uc_nation := nation_russian ;
3357: LD_ADDR_OWVAR 21
3361: PUSH
3362: LD_INT 3
3364: ST_TO_ADDR
// soldiers := [ ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// vehs := [ ] ;
3372: LD_ADDR_VAR 0 6
3376: PUSH
3377: EMPTY
3378: ST_TO_ADDR
// RUArmada := [ ] ;
3379: LD_ADDR_EXP 16
3383: PUSH
3384: EMPTY
3385: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3386: LD_ADDR_EXP 12
3390: PUSH
3391: LD_STRING Yashin
3393: PPUSH
3394: CALL_OW 25
3398: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3399: LD_ADDR_EXP 13
3403: PUSH
3404: LD_STRING Popov
3406: PPUSH
3407: CALL_OW 25
3411: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3412: LD_ADDR_EXP 14
3416: PUSH
3417: LD_STRING Gaydar
3419: PPUSH
3420: CALL_OW 25
3424: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3425: LD_ADDR_EXP 15
3429: PUSH
3430: LD_STRING Vsevolod
3432: PPUSH
3433: CALL_OW 25
3437: ST_TO_ADDR
// for i = 1 to 16 do
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 16
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3494
// begin PrepareSoldier ( 0 , game_eskill ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_EXP 39
3461: PPUSH
3462: CALL_OW 381
// un := CreateHuman ;
3466: LD_ADDR_VAR 0 5
3470: PUSH
3471: CALL_OW 44
3475: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: LD_VAR 0 4
3485: PUSH
3486: LD_VAR 0 5
3490: ADD
3491: ST_TO_ADDR
// end ;
3492: GO 3451
3494: POP
3495: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3496: LD_ADDR_VAR 0 4
3500: PUSH
3501: LD_EXP 12
3505: PUSH
3506: LD_EXP 13
3510: ADD
3511: PUSH
3512: LD_EXP 14
3516: ADD
3517: PUSH
3518: LD_EXP 15
3522: ADD
3523: PUSH
3524: LD_VAR 0 4
3528: ADD
3529: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3530: LD_INT 24
3532: PPUSH
3533: LD_INT 3
3535: PPUSH
3536: LD_INT 1
3538: PPUSH
3539: LD_INT 46
3541: PPUSH
3542: LD_INT 100
3544: PPUSH
3545: CALL 18049 0 5
// for i = 1 to 8 do
3549: LD_ADDR_VAR 0 2
3553: PUSH
3554: DOUBLE
3555: LD_INT 1
3557: DEC
3558: ST_TO_ADDR
3559: LD_INT 8
3561: PUSH
3562: FOR_TO
3563: IFFALSE 3646
// begin vehicle := CreateVehicle ;
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: CALL_OW 45
3574: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: PPUSH
3584: LD_VAR 0 3
3588: PPUSH
3589: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: LD_VAR 0 4
3602: PUSH
3603: LD_VAR 0 4
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: DIFF
3612: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL_OW 49
// vehs := vehs ^ vehicle ;
3628: LD_ADDR_VAR 0 6
3632: PUSH
3633: LD_VAR 0 6
3637: PUSH
3638: LD_VAR 0 3
3642: ADD
3643: ST_TO_ADDR
// end ;
3644: GO 3562
3646: POP
3647: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3648: LD_INT 24
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 1
3656: PPUSH
3657: LD_INT 43
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL 18049 0 5
// for i = 1 to 8 do
3667: LD_ADDR_VAR 0 2
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_INT 8
3679: PUSH
3680: FOR_TO
3681: IFFALSE 3764
// begin vehicle := CreateVehicle ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 45
3692: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3711: LD_ADDR_VAR 0 4
3715: PUSH
3716: LD_VAR 0 4
3720: PUSH
3721: LD_VAR 0 4
3725: PUSH
3726: LD_INT 1
3728: ARRAY
3729: DIFF
3730: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL_OW 49
// vehs := vehs ^ vehicle ;
3746: LD_ADDR_VAR 0 6
3750: PUSH
3751: LD_VAR 0 6
3755: PUSH
3756: LD_VAR 0 3
3760: ADD
3761: ST_TO_ADDR
// end ;
3762: GO 3680
3764: POP
3765: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3766: LD_INT 22
3768: PPUSH
3769: LD_INT 3
3771: PPUSH
3772: LD_INT 1
3774: PPUSH
3775: LD_INT 44
3777: PPUSH
3778: LD_INT 100
3780: PPUSH
3781: CALL 18049 0 5
// for i = 1 to 4 do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: DOUBLE
3791: LD_INT 1
3793: DEC
3794: ST_TO_ADDR
3795: LD_INT 4
3797: PUSH
3798: FOR_TO
3799: IFFALSE 3882
// begin vehicle := CreateVehicle ;
3801: LD_ADDR_VAR 0 3
3805: PUSH
3806: CALL_OW 45
3810: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3811: LD_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: LD_VAR 0 3
3824: PPUSH
3825: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 4
3838: PUSH
3839: LD_VAR 0 4
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: DIFF
3848: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3849: LD_VAR 0 3
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 49
// vehs := vehs ^ vehicle ;
3864: LD_ADDR_VAR 0 6
3868: PUSH
3869: LD_VAR 0 6
3873: PUSH
3874: LD_VAR 0 3
3878: ADD
3879: ST_TO_ADDR
// end ;
3880: GO 3798
3882: POP
3883: POP
// RUArmada := vehs ;
3884: LD_ADDR_EXP 16
3888: PUSH
3889: LD_VAR 0 6
3893: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3894: LD_EXP 12
3898: PPUSH
3899: CALL_OW 310
3903: PUSH
3904: LD_EXP 13
3908: PPUSH
3909: CALL_OW 310
3913: PUSH
3914: LD_EXP 14
3918: PPUSH
3919: CALL_OW 310
3923: PUSH
3924: LD_EXP 15
3928: PPUSH
3929: CALL_OW 310
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: PPUSH
3940: LD_INT 6
3942: NEG
3943: PPUSH
3944: CALL_OW 242
// end ;
3948: LD_VAR 0 1
3952: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3953: LD_INT 0
3955: PPUSH
3956: PPUSH
3957: PPUSH
// uc_side := 6 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 6
3965: ST_TO_ADDR
// uc_nation := nation_russian ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// Bulldozers := [ ] ;
3974: LD_ADDR_EXP 17
3978: PUSH
3979: EMPTY
3980: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3981: LD_INT 24
3983: PPUSH
3984: LD_INT 3
3986: PPUSH
3987: LD_INT 3
3989: PPUSH
3990: LD_INT 53
3992: PPUSH
3993: LD_INT 100
3995: PPUSH
3996: CALL 18049 0 5
// for i = 1 to 2 do
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_INT 2
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4059
// begin vehicle := CreateVehicle ;
4016: LD_ADDR_VAR 0 3
4020: PUSH
4021: CALL_OW 45
4025: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4026: LD_VAR 0 3
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4041: LD_ADDR_EXP 17
4045: PUSH
4046: LD_EXP 17
4050: PUSH
4051: LD_VAR 0 3
4055: ADD
4056: ST_TO_ADDR
// end ;
4057: GO 4013
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 1
4065: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
// uc_side := 3 ;
4072: LD_ADDR_OWVAR 20
4076: PUSH
4077: LD_INT 3
4079: ST_TO_ADDR
// uc_nation := nation_russian ;
4080: LD_ADDR_OWVAR 21
4084: PUSH
4085: LD_INT 3
4087: ST_TO_ADDR
// hc_name :=  ;
4088: LD_ADDR_OWVAR 26
4092: PUSH
4093: LD_STRING 
4095: ST_TO_ADDR
// hc_gallery :=  ;
4096: LD_ADDR_OWVAR 33
4100: PUSH
4101: LD_STRING 
4103: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4104: LD_ADDR_EXP 18
4108: PUSH
4109: LD_STRING Burlak
4111: PPUSH
4112: CALL_OW 25
4116: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4117: LD_ADDR_EXP 19
4121: PUSH
4122: LD_STRING Gleb
4124: PPUSH
4125: CALL_OW 25
4129: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4130: LD_ADDR_EXP 20
4134: PUSH
4135: LD_STRING Furmanov
4137: PPUSH
4138: CALL_OW 25
4142: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4143: LD_ADDR_EXP 21
4147: PUSH
4148: LD_STRING Titov
4150: PPUSH
4151: CALL_OW 25
4155: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4156: LD_ADDR_EXP 22
4160: PUSH
4161: LD_STRING Scholtze
4163: PPUSH
4164: CALL_OW 25
4168: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4169: LD_ADDR_EXP 23
4173: PUSH
4174: LD_STRING Dolgov
4176: PPUSH
4177: CALL_OW 25
4181: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4182: LD_ADDR_EXP 24
4186: PUSH
4187: LD_STRING Kapitsova
4189: PPUSH
4190: CALL_OW 25
4194: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4195: LD_ADDR_EXP 25
4199: PUSH
4200: LD_STRING Karamazov
4202: PPUSH
4203: CALL_OW 25
4207: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4208: LD_ADDR_EXP 26
4212: PUSH
4213: LD_STRING Kirlenkova
4215: PPUSH
4216: CALL_OW 25
4220: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4221: LD_ADDR_EXP 27
4225: PUSH
4226: LD_STRING Kovalyuk
4228: PPUSH
4229: CALL_OW 25
4233: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4234: LD_ADDR_EXP 28
4238: PUSH
4239: LD_STRING Kozlov
4241: PPUSH
4242: CALL_OW 25
4246: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4247: LD_ADDR_EXP 29
4251: PUSH
4252: LD_STRING Kuzmov
4254: PPUSH
4255: CALL_OW 25
4259: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4260: LD_ADDR_EXP 30
4264: PUSH
4265: LD_STRING Lipshchin
4267: PPUSH
4268: CALL_OW 25
4272: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4273: LD_ADDR_EXP 31
4277: PUSH
4278: LD_STRING Oblukov
4280: PPUSH
4281: CALL_OW 25
4285: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4286: LD_ADDR_EXP 32
4290: PUSH
4291: LD_STRING Xavier2
4293: PPUSH
4294: CALL_OW 25
4298: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4299: LD_ADDR_EXP 33
4303: PUSH
4304: LD_STRING Gnyevko
4306: PPUSH
4307: CALL_OW 25
4311: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4312: LD_ADDR_EXP 34
4316: PUSH
4317: LD_STRING Belkov
4319: PPUSH
4320: CALL_OW 25
4324: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_EXP 18
4334: PUSH
4335: LD_EXP 19
4339: PUSH
4340: LD_EXP 20
4344: PUSH
4345: LD_EXP 21
4349: PUSH
4350: LD_EXP 22
4354: PUSH
4355: LD_EXP 23
4359: PUSH
4360: LD_EXP 24
4364: PUSH
4365: LD_EXP 25
4369: PUSH
4370: LD_EXP 26
4374: PUSH
4375: LD_EXP 27
4379: PUSH
4380: LD_EXP 28
4384: PUSH
4385: LD_EXP 29
4389: PUSH
4390: LD_EXP 30
4394: PUSH
4395: LD_EXP 31
4399: PUSH
4400: LD_EXP 32
4404: PUSH
4405: LD_EXP 33
4409: PUSH
4410: LD_EXP 34
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: ST_TO_ADDR
// for i = 1 to filter do
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: DOUBLE
4440: LD_INT 1
4442: DEC
4443: ST_TO_ADDR
4444: LD_VAR 0 3
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4475
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4452: LD_VAR 0 3
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: PPUSH
4463: LD_INT 6
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: CALL_OW 49
4473: GO 4449
4475: POP
4476: POP
// end ;
4477: LD_VAR 0 1
4481: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
// uc_side := 3 ;
4488: LD_ADDR_OWVAR 20
4492: PUSH
4493: LD_INT 3
4495: ST_TO_ADDR
// uc_nation := nation_russian ;
4496: LD_ADDR_OWVAR 21
4500: PUSH
4501: LD_INT 3
4503: ST_TO_ADDR
// hc_name :=  ;
4504: LD_ADDR_OWVAR 26
4508: PUSH
4509: LD_STRING 
4511: ST_TO_ADDR
// hc_gallery :=  ;
4512: LD_ADDR_OWVAR 33
4516: PUSH
4517: LD_STRING 
4519: ST_TO_ADDR
// for i = 1 to 8 do
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: DOUBLE
4526: LD_INT 1
4528: DEC
4529: ST_TO_ADDR
4530: LD_INT 8
4532: PUSH
4533: FOR_TO
4534: IFFALSE 4576
// begin PrepareSoldier ( 0 , game_eskill ) ;
4536: LD_INT 0
4538: PPUSH
4539: LD_EXP 39
4543: PPUSH
4544: CALL_OW 381
// un := CreateHuman ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: CALL_OW 44
4557: ST_TO_ADDR
// filter := filter ^ un ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: LD_VAR 0 3
4567: PUSH
4568: LD_VAR 0 4
4572: ADD
4573: ST_TO_ADDR
// end ;
4574: GO 4533
4576: POP
4577: POP
// for i = 1 to 4 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 4
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4634
// begin PrepareEngineer ( 0 , game_eskill ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_EXP 39
4601: PPUSH
4602: CALL_OW 382
// un := CreateHuman ;
4606: LD_ADDR_VAR 0 4
4610: PUSH
4611: CALL_OW 44
4615: ST_TO_ADDR
// filter := filter ^ un ;
4616: LD_ADDR_VAR 0 3
4620: PUSH
4621: LD_VAR 0 3
4625: PUSH
4626: LD_VAR 0 4
4630: ADD
4631: ST_TO_ADDR
// end ;
4632: GO 4591
4634: POP
4635: POP
// for i = 1 to 6 do
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: DOUBLE
4642: LD_INT 1
4644: DEC
4645: ST_TO_ADDR
4646: LD_INT 6
4648: PUSH
4649: FOR_TO
4650: IFFALSE 4692
// begin PrepareMechanic ( 0 , game_eskill ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_EXP 39
4659: PPUSH
4660: CALL_OW 383
// un := CreateHuman ;
4664: LD_ADDR_VAR 0 4
4668: PUSH
4669: CALL_OW 44
4673: ST_TO_ADDR
// filter := filter ^ un ;
4674: LD_ADDR_VAR 0 3
4678: PUSH
4679: LD_VAR 0 3
4683: PUSH
4684: LD_VAR 0 4
4688: ADD
4689: ST_TO_ADDR
// end ;
4690: GO 4649
4692: POP
4693: POP
// for i = 1 to 4 do
4694: LD_ADDR_VAR 0 2
4698: PUSH
4699: DOUBLE
4700: LD_INT 1
4702: DEC
4703: ST_TO_ADDR
4704: LD_INT 4
4706: PUSH
4707: FOR_TO
4708: IFFALSE 4750
// begin PrepareScientist ( 0 , game_eskill ) ;
4710: LD_INT 0
4712: PPUSH
4713: LD_EXP 39
4717: PPUSH
4718: CALL_OW 384
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 4
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// filter := filter ^ un ;
4732: LD_ADDR_VAR 0 3
4736: PUSH
4737: LD_VAR 0 3
4741: PUSH
4742: LD_VAR 0 4
4746: ADD
4747: ST_TO_ADDR
// end ;
4748: GO 4707
4750: POP
4751: POP
// for i = 1 to filter do
4752: LD_ADDR_VAR 0 2
4756: PUSH
4757: DOUBLE
4758: LD_INT 1
4760: DEC
4761: ST_TO_ADDR
4762: LD_VAR 0 3
4766: PUSH
4767: FOR_TO
4768: IFFALSE 4793
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4770: LD_VAR 0 3
4774: PUSH
4775: LD_VAR 0 2
4779: ARRAY
4780: PPUSH
4781: LD_INT 6
4783: PPUSH
4784: LD_INT 0
4786: PPUSH
4787: CALL_OW 49
4791: GO 4767
4793: POP
4794: POP
// RU_SecondPersonnel := filter ;
4795: LD_ADDR_EXP 35
4799: PUSH
4800: LD_VAR 0 3
4804: ST_TO_ADDR
// end ;
4805: LD_VAR 0 1
4809: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4810: LD_INT 0
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
4817: PPUSH
4818: PPUSH
// uc_side := 1 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// uc_nation := nation_american ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4835: LD_ADDR_EXP 36
4839: PUSH
4840: LD_STRING JMM
4842: PPUSH
4843: CALL_OW 25
4847: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4848: LD_EXP 36
4852: PPUSH
4853: LD_INT 1
4855: PPUSH
4856: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4860: LD_EXP 36
4864: PPUSH
4865: LD_INT 7
4867: PPUSH
4868: LD_INT 0
4870: PPUSH
4871: CALL_OW 49
// mechs := [ ] ;
4875: LD_ADDR_VAR 0 7
4879: PUSH
4880: EMPTY
4881: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4882: LD_ADDR_VAR 0 2
4886: PUSH
4887: DOUBLE
4888: LD_INT 1
4890: DEC
4891: ST_TO_ADDR
4892: LD_INT 4
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_OWVAR 67
4910: ARRAY
4911: PUSH
4912: FOR_TO
4913: IFFALSE 4974
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4915: LD_INT 0
4917: PPUSH
4918: LD_EXP 38
4922: PUSH
4923: LD_INT 1
4925: PLUS
4926: PPUSH
4927: CALL_OW 381
// un := CreateHuman ;
4931: LD_ADDR_VAR 0 4
4935: PUSH
4936: CALL_OW 44
4940: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: LD_VAR 0 3
4950: PUSH
4951: LD_VAR 0 4
4955: ADD
4956: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4957: LD_VAR 0 4
4961: PPUSH
4962: LD_INT 7
4964: PPUSH
4965: LD_INT 0
4967: PPUSH
4968: CALL_OW 49
// end ;
4972: GO 4912
4974: POP
4975: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4976: LD_ADDR_VAR 0 2
4980: PUSH
4981: DOUBLE
4982: LD_INT 1
4984: DEC
4985: ST_TO_ADDR
4986: LD_INT 7
4988: PUSH
4989: LD_INT 6
4991: PUSH
4992: LD_INT 4
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: LD_OWVAR 67
5004: ARRAY
5005: PUSH
5006: FOR_TO
5007: IFFALSE 5053
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5009: LD_INT 0
5011: PPUSH
5012: LD_EXP 38
5016: PUSH
5017: LD_INT 1
5019: PLUS
5020: PPUSH
5021: CALL_OW 383
// un := CreateHuman ;
5025: LD_ADDR_VAR 0 4
5029: PUSH
5030: CALL_OW 44
5034: ST_TO_ADDR
// mechs := mechs ^ un ;
5035: LD_ADDR_VAR 0 7
5039: PUSH
5040: LD_VAR 0 7
5044: PUSH
5045: LD_VAR 0 4
5049: ADD
5050: ST_TO_ADDR
// end ;
5051: GO 5006
5053: POP
5054: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5055: LD_INT 3
5057: PPUSH
5058: LD_INT 3
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: LD_INT 5
5066: PPUSH
5067: LD_INT 100
5069: PPUSH
5070: CALL 18049 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5074: LD_ADDR_VAR 0 2
5078: PUSH
5079: DOUBLE
5080: LD_INT 1
5082: DEC
5083: ST_TO_ADDR
5084: LD_INT 7
5086: PUSH
5087: LD_INT 6
5089: PUSH
5090: LD_INT 4
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_OWVAR 67
5102: ARRAY
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5200
// begin vehicle := CreateVehicle ;
5107: LD_ADDR_VAR 0 6
5111: PUSH
5112: CALL_OW 45
5116: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5117: LD_VAR 0 7
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: PPUSH
5126: LD_VAR 0 6
5130: PPUSH
5131: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5135: LD_ADDR_VAR 0 7
5139: PUSH
5140: LD_VAR 0 7
5144: PUSH
5145: LD_VAR 0 7
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: DIFF
5154: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5155: LD_VAR 0 6
5159: PPUSH
5160: LD_INT 1
5162: PPUSH
5163: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5167: LD_VAR 0 6
5171: PPUSH
5172: LD_INT 7
5174: PPUSH
5175: LD_INT 0
5177: PPUSH
5178: CALL_OW 49
// vehs := vehs ^ vehicle ;
5182: LD_ADDR_VAR 0 5
5186: PUSH
5187: LD_VAR 0 5
5191: PUSH
5192: LD_VAR 0 6
5196: ADD
5197: ST_TO_ADDR
// end ;
5198: GO 5104
5200: POP
5201: POP
// end ; end_of_file
5202: LD_VAR 0 1
5206: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5207: LD_INT 0
5209: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5210: LD_ADDR_OWVAR 67
5214: PUSH
5215: LD_INT 0
5217: PPUSH
5218: CALL_OW 426
5222: ST_TO_ADDR
// game_diff := Difficulty ;
5223: LD_ADDR_EXP 37
5227: PUSH
5228: LD_OWVAR 67
5232: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5233: LD_ADDR_EXP 38
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 6
5243: PUSH
5244: LD_INT 6
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_EXP 37
5256: ARRAY
5257: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5258: LD_ADDR_EXP 39
5262: PUSH
5263: LD_INT 6
5265: PUSH
5266: LD_INT 7
5268: PUSH
5269: LD_INT 8
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: LIST
5276: PUSH
5277: LD_EXP 37
5281: ARRAY
5282: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5283: LD_ADDR_EXP 41
5287: PUSH
5288: LD_INT 6300
5290: PUSH
5291: LD_INT 5250
5293: PUSH
5294: LD_INT 4200
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_EXP 37
5306: ARRAY
5307: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5308: LD_ADDR_EXP 40
5312: PUSH
5313: LD_INT 73500
5315: PUSH
5316: LD_INT 94500
5318: PUSH
5319: LD_INT 115500
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: LD_EXP 37
5331: ARRAY
5332: ST_TO_ADDR
// end ; end_of_file
5333: LD_VAR 0 1
5337: RET
// export function CustomEvent ( event ) ; begin
5338: LD_INT 0
5340: PPUSH
// end ;
5341: LD_VAR 0 2
5345: RET
// export function CustomInitMacro ( ) ; begin
5346: LD_INT 0
5348: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 3
5354: PPUSH
5355: CALL 78996 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5359: LD_INT 1
5361: PPUSH
5362: LD_INT 4
5364: PPUSH
5365: CALL 78940 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 136
5374: PUSH
5375: LD_INT 130
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 145
5388: PUSH
5389: LD_INT 123
5391: PUSH
5392: LD_INT 0
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PPUSH
5404: CALL 77999 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5408: LD_INT 1
5410: PPUSH
5411: LD_INT 43
5413: PUSH
5414: LD_INT 46
5416: PUSH
5417: LD_INT 45
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 78828 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 3
5434: PPUSH
5435: CALL 78510 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5439: LD_INT 1
5441: PPUSH
5442: LD_INT 3
5444: PPUSH
5445: CALL 78241 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 8
5454: PPUSH
5455: CALL 77860 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5459: LD_INT 1
5461: PPUSH
5462: LD_INT 22
5464: PUSH
5465: LD_INT 1
5467: PUSH
5468: LD_INT 3
5470: PUSH
5471: LD_INT 43
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_INT 1
5485: PUSH
5486: LD_INT 3
5488: PUSH
5489: LD_INT 44
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 22
5500: PUSH
5501: LD_INT 1
5503: PUSH
5504: LD_INT 3
5506: PUSH
5507: LD_INT 45
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 1
5521: PUSH
5522: LD_INT 3
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 1
5539: PUSH
5540: LD_INT 3
5542: PUSH
5543: LD_INT 43
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 24
5554: PUSH
5555: LD_INT 1
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: LD_INT 46
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_INT 1
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: LD_INT 43
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: PUSH
5588: LD_INT 22
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: LD_INT 3
5596: PUSH
5597: LD_INT 44
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: PPUSH
5616: CALL 77675 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 0
5625: PUSH
5626: LD_INT 127
5628: PUSH
5629: LD_INT 125
5631: PUSH
5632: LD_INT 5
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 6
5643: PUSH
5644: LD_INT 124
5646: PUSH
5647: LD_INT 132
5649: PUSH
5650: LD_INT 0
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 29
5661: PUSH
5662: LD_INT 136
5664: PUSH
5665: LD_INT 130
5667: PUSH
5668: LD_INT 1
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 4
5679: PUSH
5680: LD_INT 118
5682: PUSH
5683: LD_INT 114
5685: PUSH
5686: LD_INT 2
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 29
5697: PUSH
5698: LD_INT 145
5700: PUSH
5701: LD_INT 123
5703: PUSH
5704: LD_INT 1
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: LD_INT 150
5718: PUSH
5719: LD_INT 135
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 26
5733: PUSH
5734: LD_INT 140
5736: PUSH
5737: LD_INT 134
5739: PUSH
5740: LD_INT 2
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 26
5751: PUSH
5752: LD_INT 137
5754: PUSH
5755: LD_INT 121
5757: PUSH
5758: LD_INT 5
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: LD_INT 155
5772: PUSH
5773: LD_INT 130
5775: PUSH
5776: LD_INT 0
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 32
5787: PUSH
5788: LD_INT 155
5790: PUSH
5791: LD_INT 130
5793: PUSH
5794: LD_INT 0
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 32
5805: PUSH
5806: LD_INT 130
5808: PUSH
5809: LD_INT 114
5811: PUSH
5812: LD_INT 3
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 32
5823: PUSH
5824: LD_INT 142
5826: PUSH
5827: LD_INT 115
5829: PUSH
5830: LD_INT 3
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 32
5841: PUSH
5842: LD_INT 153
5844: PUSH
5845: LD_INT 120
5847: PUSH
5848: LD_INT 3
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL 77567 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5876: LD_INT 1
5878: PPUSH
5879: LD_INT 10
5881: PUSH
5882: LD_INT 12
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PPUSH
5889: CALL 78417 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5893: LD_INT 1
5895: PPUSH
5896: LD_INT 155
5898: PPUSH
5899: LD_INT 130
5901: PPUSH
5902: LD_INT 0
5904: PPUSH
5905: LD_INT 24
5907: PUSH
5908: LD_INT 16
5910: PUSH
5911: LD_INT 17
5913: PUSH
5914: LD_INT 18
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL 78622 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5931: LD_INT 2
5933: PPUSH
5934: LD_INT 3
5936: PPUSH
5937: CALL 78996 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5941: LD_INT 2
5943: PPUSH
5944: LD_INT 4
5946: PPUSH
5947: CALL 78940 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5951: LD_INT 2
5953: PPUSH
5954: LD_INT 84
5956: PUSH
5957: LD_INT 125
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: EMPTY
5969: LIST
5970: PPUSH
5971: CALL 77999 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5975: LD_INT 2
5977: PPUSH
5978: LD_INT 43
5980: PUSH
5981: LD_INT 46
5983: PUSH
5984: LD_INT 45
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL 78828 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 3
6001: PPUSH
6002: CALL 78510 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6006: LD_INT 2
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: CALL 78241 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6016: LD_INT 2
6018: PPUSH
6019: LD_INT 8
6021: PPUSH
6022: CALL 77860 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6026: LD_INT 2
6028: PPUSH
6029: LD_INT 22
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: LD_INT 3
6037: PUSH
6038: LD_INT 43
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 22
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 44
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 3
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 45
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 24
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 43
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 24
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 46
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 3
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 43
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 22
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 44
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL 77675 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6187: LD_INT 2
6189: PPUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 96
6195: PUSH
6196: LD_INT 125
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 6
6210: PUSH
6211: LD_INT 74
6213: PUSH
6214: LD_INT 122
6216: PUSH
6217: LD_INT 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 30
6228: PUSH
6229: LD_INT 84
6231: PUSH
6232: LD_INT 125
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 28
6246: PUSH
6247: LD_INT 86
6249: PUSH
6250: LD_INT 128
6252: PUSH
6253: LD_INT 1
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 28
6264: PUSH
6265: LD_INT 85
6267: PUSH
6268: LD_INT 130
6270: PUSH
6271: LD_INT 2
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 28
6282: PUSH
6283: LD_INT 88
6285: PUSH
6286: LD_INT 132
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 106
6303: PUSH
6304: LD_INT 130
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 4
6318: PUSH
6319: LD_INT 99
6321: PUSH
6322: LD_INT 114
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 32
6336: PUSH
6337: LD_INT 72
6339: PUSH
6340: LD_INT 112
6342: PUSH
6343: LD_INT 2
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 32
6354: PUSH
6355: LD_INT 78
6357: PUSH
6358: LD_INT 110
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 32
6372: PUSH
6373: LD_INT 84
6375: PUSH
6376: LD_INT 110
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 32
6390: PUSH
6391: LD_INT 105
6393: PUSH
6394: LD_INT 117
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL 77567 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6424: LD_INT 2
6426: PPUSH
6427: LD_INT 14
6429: PUSH
6430: LD_INT 11
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL 78417 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6441: LD_INT 2
6443: PPUSH
6444: LD_INT 106
6446: PPUSH
6447: LD_INT 130
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: LD_INT 24
6455: PUSH
6456: LD_INT 16
6458: PUSH
6459: LD_INT 17
6461: PUSH
6462: LD_INT 18
6464: PUSH
6465: LD_INT 21
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL 78622 0 5
// end ;
6479: LD_VAR 0 1
6483: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6484: LD_INT 22
6486: PUSH
6487: LD_INT 3
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 30
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 69
6512: IFFALSE 7368
6514: GO 6516
6516: DISABLE
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6525: LD_INT 6300
6527: PUSH
6528: LD_INT 4200
6530: PUSH
6531: LD_INT 2100
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// base := 2 ;
6549: LD_ADDR_VAR 0 2
6553: PUSH
6554: LD_INT 2
6556: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6557: LD_INT 22
6559: PUSH
6560: LD_INT 3
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 3
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 69
6585: NOT
6586: IFFALSE 6590
// continue ;
6588: GO 6525
// case Rand ( 1 , 3 ) of 1 :
6590: LD_INT 1
6592: PPUSH
6593: LD_INT 3
6595: PPUSH
6596: CALL_OW 12
6600: PUSH
6601: LD_INT 1
6603: DOUBLE
6604: EQUAL
6605: IFTRUE 6609
6607: GO 6785
6609: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6610: LD_ADDR_VAR 0 3
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 43
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 24
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 46
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 24
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 43
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 24
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 46
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 45
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 43
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 24
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 46
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 22
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 45
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PPUSH
6779: CALL 77723 0 2
// end ; 2 :
6783: GO 7116
6785: LD_INT 2
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 6931
6793: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6794: LD_ADDR_VAR 0 3
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: LD_INT 3
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 43
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 24
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 46
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 24
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 43
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 24
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 46
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 45
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 22
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 45
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6915: LD_VAR 0 2
6919: PPUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: CALL 77723 0 2
// end ; 3 :
6929: GO 7116
6931: LD_INT 3
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 7115
6939: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: LD_INT 3
6953: PUSH
6954: LD_INT 43
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 24
6965: PUSH
6966: LD_INT 3
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 46
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 43
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 24
7001: PUSH
7002: LD_INT 3
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 46
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_INT 3
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 45
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 3
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 43
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 24
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 46
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 45
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7099: LD_VAR 0 2
7103: PPUSH
7104: LD_VAR 0 3
7108: PPUSH
7109: CALL 77723 0 2
// end ; end ;
7113: GO 7116
7115: POP
// repeat wait ( 0 0$1 ) ;
7116: LD_INT 35
7118: PPUSH
7119: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7123: LD_VAR 0 2
7127: PPUSH
7128: CALL 78071 0 1
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7116
// wait ( 0 0$30 ) ;
7138: LD_INT 1050
7140: PPUSH
7141: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7145: LD_ADDR_VAR 0 5
7149: PUSH
7150: LD_INT 86
7152: PUSH
7153: LD_INT 77
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 63
7162: PUSH
7163: LD_INT 38
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7174: LD_ADDR_VAR 0 4
7178: PUSH
7179: LD_INT 0
7181: PUSH
7182: LD_INT 0
7184: PUSH
7185: LD_INT 0
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: LD_INT 0
7193: PUSH
7194: LD_INT 0
7196: PUSH
7197: LD_INT 0
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7221: LD_ADDR_VAR 0 6
7225: PUSH
7226: LD_EXP 71
7230: PUSH
7231: LD_VAR 0 2
7235: ARRAY
7236: PUSH
7237: LD_EXP 74
7241: PUSH
7242: LD_VAR 0 2
7246: ARRAY
7247: DIFF
7248: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7249: LD_ADDR_EXP 71
7253: PUSH
7254: LD_EXP 71
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: LD_EXP 71
7268: PUSH
7269: LD_VAR 0 2
7273: ARRAY
7274: PUSH
7275: LD_VAR 0 6
7279: DIFF
7280: PPUSH
7281: CALL_OW 1
7285: ST_TO_ADDR
// if not attackers then
7286: LD_VAR 0 6
7290: NOT
7291: IFFALSE 7295
// continue ;
7293: GO 6525
// repeat wait ( 0 0$1 ) ;
7295: LD_INT 35
7297: PPUSH
7298: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7302: LD_VAR 0 6
7306: PPUSH
7307: LD_INT 60
7309: PUSH
7310: EMPTY
7311: LIST
7312: PPUSH
7313: CALL_OW 72
7317: NOT
7318: IFFALSE 7295
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7320: LD_VAR 0 2
7324: PPUSH
7325: LD_VAR 0 6
7329: PPUSH
7330: LD_VAR 0 5
7334: PPUSH
7335: LD_VAR 0 4
7339: PPUSH
7340: CALL 77908 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7344: LD_EXP 52
7348: PUSH
7349: LD_VAR 0 2
7353: ARRAY
7354: PPUSH
7355: LD_INT 50
7357: PUSH
7358: EMPTY
7359: LIST
7360: PPUSH
7361: CALL_OW 72
7365: NOT
7366: IFFALSE 6525
// end ;
7368: PPOPN 6
7370: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7371: LD_INT 22
7373: PUSH
7374: LD_INT 3
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 30
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL_OW 69
7399: IFFALSE 8296
7401: GO 7403
7403: DISABLE
7404: LD_INT 0
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7412: LD_INT 6300
7414: PUSH
7415: LD_INT 4200
7417: PUSH
7418: LD_INT 2100
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: PUSH
7426: LD_OWVAR 67
7430: ARRAY
7431: PPUSH
7432: CALL_OW 67
// base := 1 ;
7436: LD_ADDR_VAR 0 2
7440: PUSH
7441: LD_INT 1
7443: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7444: LD_INT 22
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 30
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 69
7472: NOT
7473: IFFALSE 7477
// continue ;
7475: GO 7412
// case Rand ( 1 , 3 ) of 1 :
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 3
7482: PPUSH
7483: CALL_OW 12
7487: PUSH
7488: LD_INT 1
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7672
7496: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 43
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 24
7522: PUSH
7523: LD_INT 1
7525: PUSH
7526: LD_INT 3
7528: PUSH
7529: LD_INT 46
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 24
7540: PUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 3
7546: PUSH
7547: LD_INT 43
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 24
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: LD_INT 46
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 1
7579: PUSH
7580: LD_INT 3
7582: PUSH
7583: LD_INT 45
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 22
7594: PUSH
7595: LD_INT 1
7597: PUSH
7598: LD_INT 3
7600: PUSH
7601: LD_INT 43
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 24
7612: PUSH
7613: LD_INT 1
7615: PUSH
7616: LD_INT 3
7618: PUSH
7619: LD_INT 46
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: LD_INT 3
7636: PUSH
7637: LD_INT 45
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7656: LD_VAR 0 2
7660: PPUSH
7661: LD_VAR 0 3
7665: PPUSH
7666: CALL 77723 0 2
// end ; 2 :
7670: GO 8041
7672: LD_INT 2
7674: DOUBLE
7675: EQUAL
7676: IFTRUE 7680
7678: GO 7856
7680: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7681: LD_ADDR_VAR 0 3
7685: PUSH
7686: LD_INT 24
7688: PUSH
7689: LD_INT 1
7691: PUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 43
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 24
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: LD_INT 46
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 24
7724: PUSH
7725: LD_INT 1
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 43
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 24
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: LD_INT 3
7748: PUSH
7749: LD_INT 46
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 22
7760: PUSH
7761: LD_INT 1
7763: PUSH
7764: LD_INT 3
7766: PUSH
7767: LD_INT 45
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 22
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: LD_INT 3
7784: PUSH
7785: LD_INT 45
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 22
7796: PUSH
7797: LD_INT 1
7799: PUSH
7800: LD_INT 3
7802: PUSH
7803: LD_INT 45
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 22
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: LD_INT 45
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7840: LD_VAR 0 2
7844: PPUSH
7845: LD_VAR 0 3
7849: PPUSH
7850: CALL 77723 0 2
// end ; 3 :
7854: GO 8041
7856: LD_INT 3
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 8040
7864: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_INT 22
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: LD_INT 3
7878: PUSH
7879: LD_INT 43
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 24
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: LD_INT 46
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: LD_INT 3
7914: PUSH
7915: LD_INT 43
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 24
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: LD_INT 3
7932: PUSH
7933: LD_INT 46
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 22
7944: PUSH
7945: LD_INT 1
7947: PUSH
7948: LD_INT 3
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: LD_INT 43
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 24
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: LD_INT 3
7986: PUSH
7987: LD_INT 46
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 45
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8024: LD_VAR 0 2
8028: PPUSH
8029: LD_VAR 0 3
8033: PPUSH
8034: CALL 77723 0 2
// end ; end ;
8038: GO 8041
8040: POP
// repeat wait ( 0 0$1 ) ;
8041: LD_INT 35
8043: PPUSH
8044: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8048: LD_VAR 0 2
8052: PPUSH
8053: LD_INT 1
8055: PPUSH
8056: CALL 79141 0 2
8060: PUSH
8061: LD_INT 8
8063: GREATEREQUAL
8064: IFFALSE 8041
// wait ( 0 0$30 ) ;
8066: LD_INT 1050
8068: PPUSH
8069: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8073: LD_ADDR_VAR 0 5
8077: PUSH
8078: LD_INT 144
8080: PUSH
8081: LD_INT 65
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 63
8090: PUSH
8091: LD_INT 38
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8102: LD_ADDR_VAR 0 4
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: LD_INT 0
8112: PUSH
8113: LD_INT 0
8115: PUSH
8116: LD_INT 1
8118: PUSH
8119: LD_INT 0
8121: PUSH
8122: LD_INT 0
8124: PUSH
8125: LD_INT 0
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8149: LD_ADDR_VAR 0 6
8153: PUSH
8154: LD_EXP 71
8158: PUSH
8159: LD_VAR 0 2
8163: ARRAY
8164: PUSH
8165: LD_EXP 74
8169: PUSH
8170: LD_VAR 0 2
8174: ARRAY
8175: DIFF
8176: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8177: LD_ADDR_EXP 71
8181: PUSH
8182: LD_EXP 71
8186: PPUSH
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_EXP 71
8196: PUSH
8197: LD_VAR 0 2
8201: ARRAY
8202: PUSH
8203: LD_VAR 0 6
8207: DIFF
8208: PPUSH
8209: CALL_OW 1
8213: ST_TO_ADDR
// if not attackers then
8214: LD_VAR 0 6
8218: NOT
8219: IFFALSE 8223
// continue ;
8221: GO 7412
// repeat wait ( 0 0$1 ) ;
8223: LD_INT 35
8225: PPUSH
8226: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8230: LD_VAR 0 6
8234: PPUSH
8235: LD_INT 60
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: NOT
8246: IFFALSE 8223
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8248: LD_VAR 0 2
8252: PPUSH
8253: LD_VAR 0 6
8257: PPUSH
8258: LD_VAR 0 5
8262: PPUSH
8263: LD_VAR 0 4
8267: PPUSH
8268: CALL 77908 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8272: LD_EXP 52
8276: PUSH
8277: LD_VAR 0 2
8281: ARRAY
8282: PPUSH
8283: LD_INT 50
8285: PUSH
8286: EMPTY
8287: LIST
8288: PPUSH
8289: CALL_OW 72
8293: NOT
8294: IFFALSE 7412
// end ;
8296: PPOPN 6
8298: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8299: LD_EXP 3
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 21
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 69
8332: PUSH
8333: LD_INT 0
8335: EQUAL
8336: AND
8337: IFFALSE 8350
8339: GO 8341
8341: DISABLE
// begin RussiansDefeated := true ;
8342: LD_ADDR_EXP 42
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// end ;
8350: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8351: LD_EXP 3
8355: PUSH
8356: LD_EXP 5
8360: NOT
8361: AND
8362: IFFALSE 9335
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
8373: PPUSH
8374: PPUSH
8375: PPUSH
8376: PPUSH
8377: PPUSH
8378: PPUSH
8379: PPUSH
8380: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8381: LD_INT 10500
8383: PPUSH
8384: LD_INT 13650
8386: PPUSH
8387: CALL_OW 12
8391: PUSH
8392: LD_INT 9450
8394: PPUSH
8395: LD_INT 11550
8397: PPUSH
8398: CALL_OW 12
8402: PUSH
8403: LD_INT 8400
8405: PPUSH
8406: LD_INT 10500
8408: PPUSH
8409: CALL_OW 12
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: PUSH
8419: LD_OWVAR 67
8423: ARRAY
8424: PPUSH
8425: CALL_OW 67
// filter := [ ] ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: EMPTY
8435: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_INT 2
8443: PPUSH
8444: LD_INT 3
8446: PPUSH
8447: CALL_OW 12
8451: PUSH
8452: LD_INT 3
8454: PPUSH
8455: LD_INT 4
8457: PPUSH
8458: CALL_OW 12
8462: PUSH
8463: LD_INT 3
8465: PPUSH
8466: LD_INT 5
8468: PPUSH
8469: CALL_OW 12
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: LD_OWVAR 67
8483: ARRAY
8484: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8485: LD_ADDR_VAR 0 5
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: LD_INT 1
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 12
8503: PUSH
8504: LD_INT 2
8506: PPUSH
8507: LD_INT 3
8509: PPUSH
8510: CALL_OW 12
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: PUSH
8520: LD_OWVAR 67
8524: ARRAY
8525: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8526: LD_ADDR_VAR 0 6
8530: PUSH
8531: LD_INT 2
8533: PPUSH
8534: LD_INT 3
8536: PPUSH
8537: CALL_OW 12
8541: PUSH
8542: LD_INT 2
8544: PPUSH
8545: LD_INT 4
8547: PPUSH
8548: CALL_OW 12
8552: PUSH
8553: LD_INT 3
8555: PPUSH
8556: LD_INT 5
8558: PPUSH
8559: CALL_OW 12
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: LD_OWVAR 67
8573: ARRAY
8574: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8575: LD_ADDR_VAR 0 8
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: LD_INT 2
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: PUSH
8594: LD_OWVAR 67
8598: ARRAY
8599: ST_TO_ADDR
// uc_side := 3 ;
8600: LD_ADDR_OWVAR 20
8604: PUSH
8605: LD_INT 3
8607: ST_TO_ADDR
// uc_nation := nation_russian ;
8608: LD_ADDR_OWVAR 21
8612: PUSH
8613: LD_INT 3
8615: ST_TO_ADDR
// for i = 1 to soldiers do
8616: LD_ADDR_VAR 0 1
8620: PUSH
8621: DOUBLE
8622: LD_INT 1
8624: DEC
8625: ST_TO_ADDR
8626: LD_VAR 0 4
8630: PUSH
8631: FOR_TO
8632: IFFALSE 8674
// begin PrepareSoldier ( 0 , game_eskill ) ;
8634: LD_INT 0
8636: PPUSH
8637: LD_EXP 39
8641: PPUSH
8642: CALL_OW 381
// un := CreateHuman ;
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: CALL_OW 44
8655: ST_TO_ADDR
// filter := filter ^ un ;
8656: LD_ADDR_VAR 0 3
8660: PUSH
8661: LD_VAR 0 3
8665: PUSH
8666: LD_VAR 0 2
8670: ADD
8671: ST_TO_ADDR
// end ;
8672: GO 8631
8674: POP
8675: POP
// for i = 1 to bazookas do
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: DOUBLE
8682: LD_INT 1
8684: DEC
8685: ST_TO_ADDR
8686: LD_VAR 0 5
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8742
// begin PrepareSoldier ( 0 , game_eskill ) ;
8694: LD_INT 0
8696: PPUSH
8697: LD_EXP 39
8701: PPUSH
8702: CALL_OW 381
// hc_class := class_bazooker ;
8706: LD_ADDR_OWVAR 28
8710: PUSH
8711: LD_INT 9
8713: ST_TO_ADDR
// un := CreateHuman ;
8714: LD_ADDR_VAR 0 2
8718: PUSH
8719: CALL_OW 44
8723: ST_TO_ADDR
// filter := filter ^ un ;
8724: LD_ADDR_VAR 0 3
8728: PUSH
8729: LD_VAR 0 3
8733: PUSH
8734: LD_VAR 0 2
8738: ADD
8739: ST_TO_ADDR
// end ;
8740: GO 8691
8742: POP
8743: POP
// for i = 1 to medics do
8744: LD_ADDR_VAR 0 1
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_VAR 0 8
8758: PUSH
8759: FOR_TO
8760: IFFALSE 8802
// begin PrepareScientist ( 0 , game_eskill ) ;
8762: LD_INT 0
8764: PPUSH
8765: LD_EXP 39
8769: PPUSH
8770: CALL_OW 384
// un := CreateHuman ;
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: CALL_OW 44
8783: ST_TO_ADDR
// filter := filter ^ un ;
8784: LD_ADDR_VAR 0 3
8788: PUSH
8789: LD_VAR 0 3
8793: PUSH
8794: LD_VAR 0 2
8798: ADD
8799: ST_TO_ADDR
// end ;
8800: GO 8759
8802: POP
8803: POP
// for i = 1 to vehs do
8804: LD_ADDR_VAR 0 1
8808: PUSH
8809: DOUBLE
8810: LD_INT 1
8812: DEC
8813: ST_TO_ADDR
8814: LD_VAR 0 6
8818: PUSH
8819: FOR_TO
8820: IFFALSE 9012
// begin case Rand ( 1 , 5 ) of 1 :
8822: LD_INT 1
8824: PPUSH
8825: LD_INT 5
8827: PPUSH
8828: CALL_OW 12
8832: PUSH
8833: LD_INT 1
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8863
8841: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8842: LD_INT 22
8844: PPUSH
8845: LD_INT 3
8847: PPUSH
8848: LD_INT 3
8850: PPUSH
8851: LD_INT 43
8853: PPUSH
8854: LD_INT 100
8856: PPUSH
8857: CALL 18049 0 5
8861: GO 8984
8863: LD_INT 2
8865: DOUBLE
8866: EQUAL
8867: IFTRUE 8871
8869: GO 8893
8871: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8872: LD_INT 22
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: LD_INT 3
8880: PPUSH
8881: LD_INT 44
8883: PPUSH
8884: LD_INT 100
8886: PPUSH
8887: CALL 18049 0 5
8891: GO 8984
8893: LD_INT 3
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8923
8901: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8902: LD_INT 22
8904: PPUSH
8905: LD_INT 3
8907: PPUSH
8908: LD_INT 3
8910: PPUSH
8911: LD_INT 45
8913: PPUSH
8914: LD_INT 100
8916: PPUSH
8917: CALL 18049 0 5
8921: GO 8984
8923: LD_INT 4
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 8953
8931: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8932: LD_INT 24
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_INT 3
8940: PPUSH
8941: LD_INT 43
8943: PPUSH
8944: LD_INT 100
8946: PPUSH
8947: CALL 18049 0 5
8951: GO 8984
8953: LD_INT 5
8955: DOUBLE
8956: EQUAL
8957: IFTRUE 8961
8959: GO 8983
8961: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8962: LD_INT 24
8964: PPUSH
8965: LD_INT 3
8967: PPUSH
8968: LD_INT 3
8970: PPUSH
8971: LD_INT 46
8973: PPUSH
8974: LD_INT 100
8976: PPUSH
8977: CALL 18049 0 5
8981: GO 8984
8983: POP
// vehicle := CreateVehicle ;
8984: LD_ADDR_VAR 0 7
8988: PUSH
8989: CALL_OW 45
8993: ST_TO_ADDR
// filter := filter ^ vehicle ;
8994: LD_ADDR_VAR 0 3
8998: PUSH
8999: LD_VAR 0 3
9003: PUSH
9004: LD_VAR 0 7
9008: ADD
9009: ST_TO_ADDR
// end ;
9010: GO 8819
9012: POP
9013: POP
// for i = 1 to filter do
9014: LD_ADDR_VAR 0 1
9018: PUSH
9019: DOUBLE
9020: LD_INT 1
9022: DEC
9023: ST_TO_ADDR
9024: LD_VAR 0 3
9028: PUSH
9029: FOR_TO
9030: IFFALSE 9055
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9032: LD_VAR 0 3
9036: PUSH
9037: LD_VAR 0 1
9041: ARRAY
9042: PPUSH
9043: LD_INT 14
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 49
9053: GO 9029
9055: POP
9056: POP
// case Rand ( 1 , 3 ) of 1 :
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 3
9062: PPUSH
9063: CALL_OW 12
9067: PUSH
9068: LD_INT 1
9070: DOUBLE
9071: EQUAL
9072: IFTRUE 9076
9074: GO 9130
9076: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9077: LD_ADDR_VAR 0 11
9081: PUSH
9082: LD_INT 165
9084: PUSH
9085: LD_INT 114
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 104
9094: PUSH
9095: LD_INT 108
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 86
9104: PUSH
9105: LD_INT 77
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 63
9114: PUSH
9115: LD_INT 38
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: ST_TO_ADDR
9128: GO 9255
9130: LD_INT 2
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9192
9138: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9139: LD_ADDR_VAR 0 11
9143: PUSH
9144: LD_INT 165
9146: PUSH
9147: LD_INT 114
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 146
9156: PUSH
9157: LD_INT 71
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 112
9166: PUSH
9167: LD_INT 41
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 63
9176: PUSH
9177: LD_INT 38
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
9190: GO 9255
9192: LD_INT 3
9194: DOUBLE
9195: EQUAL
9196: IFTRUE 9200
9198: GO 9254
9200: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9201: LD_ADDR_VAR 0 11
9205: PUSH
9206: LD_INT 165
9208: PUSH
9209: LD_INT 114
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 63
9218: PUSH
9219: LD_INT 99
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 55
9228: PUSH
9229: LD_INT 77
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 63
9238: PUSH
9239: LD_INT 38
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 9255
9254: POP
// attackers := filter ;
9255: LD_ADDR_VAR 0 10
9259: PUSH
9260: LD_VAR 0 3
9264: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9265: LD_ADDR_VAR 0 12
9269: PUSH
9270: LD_INT 0
9272: PUSH
9273: LD_INT 1
9275: PUSH
9276: LD_INT 0
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: LD_INT 0
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9312: LD_INT 1
9314: PPUSH
9315: LD_VAR 0 10
9319: PPUSH
9320: LD_VAR 0 11
9324: PPUSH
9325: LD_VAR 0 12
9329: PPUSH
9330: CALL 77908 0 4
// enable ;
9334: ENABLE
// end ;
9335: PPOPN 12
9337: END
// every 0 0$1 do var i , tmp ;
9338: GO 9340
9340: DISABLE
9341: LD_INT 0
9343: PPUSH
9344: PPUSH
// begin enable ;
9345: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 22
9356: PUSH
9357: LD_INT 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 32
9370: PUSH
9371: LD_INT 1
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 69
9386: ST_TO_ADDR
// if tmp then
9387: LD_VAR 0 2
9391: IFFALSE 9437
// for i in tmp do
9393: LD_ADDR_VAR 0 1
9397: PUSH
9398: LD_VAR 0 2
9402: PUSH
9403: FOR_IN
9404: IFFALSE 9435
// if GetFuel ( i ) < 3 then
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 261
9415: PUSH
9416: LD_INT 3
9418: LESS
9419: IFFALSE 9433
// SetFuel ( i , 3 ) ;
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_INT 3
9428: PPUSH
9429: CALL_OW 240
9433: GO 9403
9435: POP
9436: POP
// end ;
9437: PPOPN 2
9439: END
// every 0 0$3 trigger FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) or FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) do var i , veh , tmp ;
9440: LD_INT 3
9442: PPUSH
9443: LD_INT 22
9445: PUSH
9446: LD_INT 1
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 70
9457: PUSH
9458: LD_INT 10
9460: PPUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PPUSH
9471: CALL_OW 70
9475: OR
9476: IFFALSE 9742
9478: GO 9480
9480: DISABLE
9481: LD_INT 0
9483: PPUSH
9484: PPUSH
9485: PPUSH
// begin tmp := [ ] ;
9486: LD_ADDR_VAR 0 3
9490: PUSH
9491: EMPTY
9492: ST_TO_ADDR
// for i := 1 to 12 do
9493: LD_ADDR_VAR 0 1
9497: PUSH
9498: DOUBLE
9499: LD_INT 1
9501: DEC
9502: ST_TO_ADDR
9503: LD_INT 12
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9646
// begin uc_side := 3 ;
9509: LD_ADDR_OWVAR 20
9513: PUSH
9514: LD_INT 3
9516: ST_TO_ADDR
// uc_nation := 3 ;
9517: LD_ADDR_OWVAR 21
9521: PUSH
9522: LD_INT 3
9524: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9525: LD_INT 23
9527: PPUSH
9528: LD_INT 3
9530: PPUSH
9531: LD_INT 3
9533: PPUSH
9534: LD_INT 46
9536: PUSH
9537: LD_INT 43
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 1
9546: PPUSH
9547: LD_INT 2
9549: PPUSH
9550: CALL_OW 12
9554: ARRAY
9555: PPUSH
9556: LD_INT 100
9558: PPUSH
9559: CALL 18049 0 5
// veh := CreateVehicle ;
9563: LD_ADDR_VAR 0 2
9567: PUSH
9568: CALL_OW 45
9572: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9573: LD_VAR 0 2
9577: PPUSH
9578: LD_INT 5
9580: PPUSH
9581: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_INT 199
9592: PPUSH
9593: LD_INT 135
9595: PPUSH
9596: LD_INT 3
9598: PPUSH
9599: LD_INT 0
9601: PPUSH
9602: CALL_OW 50
// tmp := tmp ^ veh ;
9606: LD_ADDR_VAR 0 3
9610: PUSH
9611: LD_VAR 0 3
9615: PUSH
9616: LD_VAR 0 2
9620: ADD
9621: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9622: LD_VAR 0 2
9626: PPUSH
9627: LD_INT 173
9629: PPUSH
9630: LD_INT 118
9632: PPUSH
9633: CALL_OW 111
// wait ( 0 0$2 ) ;
9637: LD_INT 70
9639: PPUSH
9640: CALL_OW 67
// end ;
9644: GO 9506
9646: POP
9647: POP
// repeat wait ( 0 0$1 ) ;
9648: LD_INT 35
9650: PPUSH
9651: CALL_OW 67
// for i in tmp do
9655: LD_ADDR_VAR 0 1
9659: PUSH
9660: LD_VAR 0 3
9664: PUSH
9665: FOR_IN
9666: IFFALSE 9733
// if IsDead ( i ) then
9668: LD_VAR 0 1
9672: PPUSH
9673: CALL_OW 301
9677: IFFALSE 9697
// tmp := tmp diff i else
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 3
9688: PUSH
9689: LD_VAR 0 1
9693: DIFF
9694: ST_TO_ADDR
9695: GO 9731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9697: LD_VAR 0 1
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PPUSH
9717: LD_VAR 0 1
9721: PPUSH
9722: CALL_OW 74
9726: PPUSH
9727: CALL_OW 115
9731: GO 9665
9733: POP
9734: POP
// until not tmp ;
9735: LD_VAR 0 3
9739: NOT
9740: IFFALSE 9648
// end ; end_of_file
9742: PPOPN 3
9744: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9745: LD_VAR 0 1
9749: PUSH
9750: LD_EXP 8
9754: EQUAL
9755: IFFALSE 9771
// begin wait ( 0 0$1 ) ;
9757: LD_INT 35
9759: PPUSH
9760: CALL_OW 67
// YouLost ( Brighton ) ;
9764: LD_STRING Brighton
9766: PPUSH
9767: CALL_OW 104
// end ; if un = JMM then
9771: LD_VAR 0 1
9775: PUSH
9776: LD_EXP 36
9780: EQUAL
9781: IFFALSE 9797
// begin wait ( 0 0$1 ) ;
9783: LD_INT 35
9785: PPUSH
9786: CALL_OW 67
// YouLost ( JMM ) ;
9790: LD_STRING JMM
9792: PPUSH
9793: CALL_OW 104
// end ; if un = Megan then
9797: LD_VAR 0 1
9801: PUSH
9802: LD_EXP 10
9806: EQUAL
9807: IFFALSE 9821
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9809: LD_EXP 8
9813: PPUSH
9814: LD_STRING DBrighton-MeganDeath
9816: PPUSH
9817: CALL_OW 88
// end ; if un = Palmer then
9821: LD_VAR 0 1
9825: PUSH
9826: LD_EXP 9
9830: EQUAL
9831: IFFALSE 9845
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9833: LD_EXP 8
9837: PPUSH
9838: LD_STRING DBrighton-PalmerDeath
9840: PPUSH
9841: CALL_OW 88
// end ; if un = Burlak then
9845: LD_VAR 0 1
9849: PUSH
9850: LD_EXP 18
9854: EQUAL
9855: IFFALSE 9887
// begin if JMM_Arrived then
9857: LD_EXP 5
9861: IFFALSE 9875
// Say ( JMM , DJMM-BurlakDead ) ;
9863: LD_EXP 36
9867: PPUSH
9868: LD_STRING DJMM-BurlakDead
9870: PPUSH
9871: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9875: LD_EXP 9
9879: PPUSH
9880: LD_STRING DSol-BurlakDead
9882: PPUSH
9883: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9887: LD_VAR 0 1
9891: PUSH
9892: LD_INT 1
9894: EQUAL
9895: PUSH
9896: LD_VAR 0 1
9900: PUSH
9901: LD_INT 3
9903: EQUAL
9904: OR
9905: IFFALSE 9921
// begin wait ( 0 0$1 ) ;
9907: LD_INT 35
9909: PPUSH
9910: CALL_OW 67
// YouLost ( Depot ) ;
9914: LD_STRING Depot
9916: PPUSH
9917: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9921: LD_VAR 0 1
9925: PPUSH
9926: CALL_OW 255
9930: PUSH
9931: LD_INT 1
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 1
9939: PPUSH
9940: CALL_OW 247
9944: PUSH
9945: LD_INT 1
9947: EQUAL
9948: AND
9949: IFFALSE 9965
// Losses := Losses + 1 ;
9951: LD_ADDR_EXP 43
9955: PUSH
9956: LD_EXP 43
9960: PUSH
9961: LD_INT 1
9963: PLUS
9964: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9965: LD_VAR 0 1
9969: PPUSH
9970: CALL 81115 0 1
// end ;
9974: PPOPN 1
9976: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9977: LD_VAR 0 1
9981: PUSH
9982: LD_EXP 12
9986: EQUAL
9987: IFFALSE 10001
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9989: LD_EXP 12
9993: PPUSH
9994: LD_STRING DDeath-Yas-3
9996: PPUSH
9997: CALL_OW 91
// if un = Popov then
10001: LD_VAR 0 1
10005: PUSH
10006: LD_EXP 13
10010: EQUAL
10011: IFFALSE 10025
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10013: LD_EXP 13
10017: PPUSH
10018: LD_STRING DDeath-Pop-3
10020: PPUSH
10021: CALL_OW 91
// if un = Gaydar then
10025: LD_VAR 0 1
10029: PUSH
10030: LD_EXP 14
10034: EQUAL
10035: IFFALSE 10049
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10037: LD_EXP 14
10041: PPUSH
10042: LD_STRING DDeath-Gay-3
10044: PPUSH
10045: CALL_OW 91
// if un = Sevi then
10049: LD_VAR 0 1
10053: PUSH
10054: LD_EXP 15
10058: EQUAL
10059: IFFALSE 10073
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10061: LD_EXP 15
10065: PPUSH
10066: LD_STRING DDeath-Vse-3
10068: PPUSH
10069: CALL_OW 91
// end ;
10073: PPOPN 1
10075: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10076: LD_VAR 0 1
10080: PUSH
10081: LD_INT 10
10083: EQUAL
10084: IFFALSE 10122
// begin Say ( Brighton , DBrighton-C1 ) ;
10086: LD_EXP 8
10090: PPUSH
10091: LD_STRING DBrighton-C1
10093: PPUSH
10094: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10098: LD_EXP 10
10102: PPUSH
10103: LD_STRING DMegan-C1
10105: PPUSH
10106: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10110: LD_EXP 8
10114: PPUSH
10115: LD_STRING DBrighton-C2
10117: PPUSH
10118: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10122: LD_VAR 0 1
10126: PPUSH
10127: LD_VAR 0 2
10131: PPUSH
10132: CALL 80811 0 2
// end ;
10136: PPOPN 2
10138: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10139: LD_VAR 0 1
10143: PPUSH
10144: LD_VAR 0 2
10148: PPUSH
10149: CALL 83315 0 2
// end ;
10153: PPOPN 2
10155: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10156: LD_VAR 0 1
10160: PPUSH
10161: CALL 82383 0 1
// end ;
10165: PPOPN 1
10167: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 266
10177: PUSH
10178: LD_INT 0
10180: EQUAL
10181: PUSH
10182: LD_VAR 0 1
10186: PPUSH
10187: CALL_OW 255
10191: PUSH
10192: LD_INT 3
10194: EQUAL
10195: AND
10196: IFFALSE 10258
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 274
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: LD_INT 10000
10213: PPUSH
10214: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10218: LD_VAR 0 1
10222: PPUSH
10223: CALL_OW 274
10227: PPUSH
10228: LD_INT 2
10230: PPUSH
10231: LD_INT 250
10233: PPUSH
10234: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10238: LD_VAR 0 1
10242: PPUSH
10243: CALL_OW 274
10247: PPUSH
10248: LD_INT 3
10250: PPUSH
10251: LD_INT 100
10253: PPUSH
10254: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL 82624 0 1
// end ;
10267: PPOPN 1
10269: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_VAR 0 4
10289: PPUSH
10290: LD_VAR 0 5
10294: PPUSH
10295: CALL 80431 0 5
// end ;
10299: PPOPN 5
10301: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_VAR 0 2
10311: PPUSH
10312: CALL 80027 0 2
// end ;
10316: PPOPN 2
10318: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10319: LD_VAR 0 1
10323: PPUSH
10324: LD_VAR 0 2
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL 79865 0 4
// end ;
10343: PPOPN 4
10345: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10346: LD_VAR 0 1
10350: PPUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: LD_VAR 0 3
10360: PPUSH
10361: CALL 79640 0 3
// end ;
10365: PPOPN 3
10367: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10368: LD_VAR 0 1
10372: PPUSH
10373: LD_VAR 0 2
10377: PPUSH
10378: CALL 79525 0 2
// end ;
10382: PPOPN 2
10384: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_VAR 0 2
10394: PPUSH
10395: CALL 83576 0 2
// end ;
10399: PPOPN 2
10401: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 255
10411: PUSH
10412: LD_INT 6
10414: EQUAL
10415: IFFALSE 10545
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10417: LD_VAR 0 1
10421: PUSH
10422: LD_EXP 12
10426: PUSH
10427: LD_EXP 15
10431: PUSH
10432: LD_EXP 14
10436: PUSH
10437: LD_EXP 13
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: IN
10448: IFFALSE 10452
// exit ;
10450: GO 10569
// if AssaultStarted then
10452: LD_EXP 7
10456: IFFALSE 10530
// case Rand ( 1 , 4 ) of 1 .. 3 :
10458: LD_INT 1
10460: PPUSH
10461: LD_INT 4
10463: PPUSH
10464: CALL_OW 12
10468: PUSH
10469: LD_INT 1
10471: DOUBLE
10472: GREATEREQUAL
10473: IFFALSE 10481
10475: LD_INT 3
10477: DOUBLE
10478: LESSEQUAL
10479: IFTRUE 10483
10481: GO 10501
10483: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_INT 67
10491: PPUSH
10492: LD_INT 37
10494: PPUSH
10495: CALL_OW 114
10499: GO 10528
10501: LD_INT 4
10503: DOUBLE
10504: EQUAL
10505: IFTRUE 10509
10507: GO 10527
10509: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_INT 120
10517: PPUSH
10518: LD_INT 131
10520: PPUSH
10521: CALL_OW 111
10525: GO 10528
10527: POP
10528: GO 10545
// ComMoveXY ( driver , 120 , 131 ) ;
10530: LD_VAR 0 1
10534: PPUSH
10535: LD_INT 120
10537: PPUSH
10538: LD_INT 131
10540: PPUSH
10541: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_VAR 0 4
10564: PPUSH
10565: CALL 83792 0 4
// end ;
10569: PPOPN 4
10571: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10572: LD_VAR 0 1
10576: PPUSH
10577: LD_VAR 0 2
10581: PPUSH
10582: CALL 79334 0 2
// end ;
10586: PPOPN 2
10588: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: CALL 84031 0 1
// end ; end_of_file
10598: PPOPN 1
10600: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10601: LD_EXP 5
10605: PUSH
10606: LD_EXP 42
10610: AND
10611: IFFALSE 10792
10613: GO 10615
10615: DISABLE
// begin wait ( 0 0$2 ) ;
10616: LD_INT 70
10618: PPUSH
10619: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10623: LD_EXP 8
10627: PPUSH
10628: LD_STRING DBrighton-G1
10630: PPUSH
10631: CALL_OW 88
// if Losses < 1 then
10635: LD_EXP 43
10639: PUSH
10640: LD_INT 1
10642: LESS
10643: IFFALSE 10657
// AddMedal ( Losses , 1 ) else
10645: LD_STRING Losses
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 101
10655: GO 10690
// if Losses < 5 then
10657: LD_EXP 43
10661: PUSH
10662: LD_INT 5
10664: LESS
10665: IFFALSE 10679
// AddMedal ( Losses , 2 ) else
10667: LD_STRING Losses
10669: PPUSH
10670: LD_INT 2
10672: PPUSH
10673: CALL_OW 101
10677: GO 10690
// AddMedal ( Losses , - 1 ) ;
10679: LD_STRING Losses
10681: PPUSH
10682: LD_INT 1
10684: NEG
10685: PPUSH
10686: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10690: LD_EXP 6
10694: PUSH
10695: LD_INT 10
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 321
10705: PUSH
10706: LD_INT 2
10708: EQUAL
10709: AND
10710: IFFALSE 10724
// AddMedal ( Laser , 1 ) else
10712: LD_STRING Laser
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 101
10722: GO 10771
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10724: LD_EXP 6
10728: NOT
10729: PUSH
10730: LD_INT 10
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 321
10740: PUSH
10741: LD_INT 2
10743: EQUAL
10744: AND
10745: IFFALSE 10760
// AddMedal ( Laser , - 1 ) else
10747: LD_STRING Laser
10749: PPUSH
10750: LD_INT 1
10752: NEG
10753: PPUSH
10754: CALL_OW 101
10758: GO 10771
// AddMedal ( Laser , - 2 ) ;
10760: LD_STRING Laser
10762: PPUSH
10763: LD_INT 2
10765: NEG
10766: PPUSH
10767: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
10771: LD_STRING med3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10781: LD_STRING BaseMain
10783: PPUSH
10784: CALL_OW 102
// YouWin ;
10788: CALL_OW 103
// end ; end_of_file
10792: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10793: LD_INT 0
10795: PPUSH
10796: PPUSH
// area = ListEnvironmentArea ( area ) ;
10797: LD_ADDR_VAR 0 2
10801: PUSH
10802: LD_VAR 0 2
10806: PPUSH
10807: CALL_OW 353
10811: ST_TO_ADDR
// if bulldozer > 0 then
10812: LD_VAR 0 1
10816: PUSH
10817: LD_INT 0
10819: GREATER
10820: IFFALSE 10931
// for i = area downto 1 do
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: DOUBLE
10828: LD_VAR 0 2
10832: INC
10833: ST_TO_ADDR
10834: LD_INT 1
10836: PUSH
10837: FOR_DOWNTO
10838: IFFALSE 10929
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10840: LD_VAR 0 2
10844: PUSH
10845: LD_VAR 0 4
10849: ARRAY
10850: PUSH
10851: LD_INT 1
10853: ARRAY
10854: PPUSH
10855: LD_VAR 0 2
10859: PUSH
10860: LD_VAR 0 4
10864: ARRAY
10865: PUSH
10866: LD_INT 2
10868: ARRAY
10869: PPUSH
10870: CALL_OW 351
10874: IFFALSE 10927
// if not HasTask ( bulldozer ) then
10876: LD_VAR 0 1
10880: PPUSH
10881: CALL_OW 314
10885: NOT
10886: IFFALSE 10927
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_VAR 0 2
10897: PUSH
10898: LD_VAR 0 4
10902: ARRAY
10903: PUSH
10904: LD_INT 1
10906: ARRAY
10907: PPUSH
10908: LD_VAR 0 2
10912: PUSH
10913: LD_VAR 0 4
10917: ARRAY
10918: PUSH
10919: LD_INT 2
10921: ARRAY
10922: PPUSH
10923: CALL_OW 171
10927: GO 10837
10929: POP
10930: POP
// end ;
10931: LD_VAR 0 3
10935: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10936: LD_INT 0
10938: PPUSH
10939: PPUSH
10940: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10941: LD_ADDR_VAR 0 5
10945: PUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 517
10958: ST_TO_ADDR
// for i = 1 to team do
10959: LD_ADDR_VAR 0 4
10963: PUSH
10964: DOUBLE
10965: LD_INT 1
10967: DEC
10968: ST_TO_ADDR
10969: LD_VAR 0 1
10973: PUSH
10974: FOR_TO
10975: IFFALSE 11076
// begin if IsInUnit ( team [ i ] ) then
10977: LD_VAR 0 1
10981: PUSH
10982: LD_VAR 0 4
10986: ARRAY
10987: PPUSH
10988: CALL_OW 310
10992: IFFALSE 11009
// ComExitBuilding ( team [ i ] ) ;
10994: LD_VAR 0 1
10998: PUSH
10999: LD_VAR 0 4
11003: ARRAY
11004: PPUSH
11005: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11009: LD_VAR 0 1
11013: PUSH
11014: LD_VAR 0 4
11018: ARRAY
11019: PPUSH
11020: LD_VAR 0 5
11024: PUSH
11025: LD_INT 1
11027: ARRAY
11028: PUSH
11029: LD_VAR 0 4
11033: ARRAY
11034: PPUSH
11035: LD_VAR 0 5
11039: PUSH
11040: LD_INT 2
11042: ARRAY
11043: PUSH
11044: LD_VAR 0 4
11048: ARRAY
11049: PPUSH
11050: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11054: LD_VAR 0 1
11058: PUSH
11059: LD_VAR 0 4
11063: ARRAY
11064: PPUSH
11065: LD_EXP 8
11069: PPUSH
11070: CALL_OW 179
// end ;
11074: GO 10974
11076: POP
11077: POP
// end ; end_of_file
11078: LD_VAR 0 3
11082: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
// if exist_mode then
11087: LD_VAR 0 2
11091: IFFALSE 11116
// unit := CreateCharacter ( prefix & ident ) else
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_VAR 0 3
11102: PUSH
11103: LD_VAR 0 1
11107: STR
11108: PPUSH
11109: CALL_OW 34
11113: ST_TO_ADDR
11114: GO 11131
// unit := NewCharacter ( ident ) ;
11116: LD_ADDR_VAR 0 5
11120: PUSH
11121: LD_VAR 0 1
11125: PPUSH
11126: CALL_OW 25
11130: ST_TO_ADDR
// result := unit ;
11131: LD_ADDR_VAR 0 4
11135: PUSH
11136: LD_VAR 0 5
11140: ST_TO_ADDR
// end ;
11141: LD_VAR 0 4
11145: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11146: LD_INT 0
11148: PPUSH
11149: PPUSH
// if not side or not nation then
11150: LD_VAR 0 1
11154: NOT
11155: PUSH
11156: LD_VAR 0 2
11160: NOT
11161: OR
11162: IFFALSE 11166
// exit ;
11164: GO 11810
// case nation of nation_american :
11166: LD_VAR 0 2
11170: PUSH
11171: LD_INT 1
11173: DOUBLE
11174: EQUAL
11175: IFTRUE 11179
11177: GO 11353
11179: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11180: LD_ADDR_VAR 0 4
11184: PUSH
11185: LD_INT 35
11187: PUSH
11188: LD_INT 45
11190: PUSH
11191: LD_INT 46
11193: PUSH
11194: LD_INT 47
11196: PUSH
11197: LD_INT 1
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 6
11205: PUSH
11206: LD_INT 15
11208: PUSH
11209: LD_INT 16
11211: PUSH
11212: LD_INT 7
11214: PUSH
11215: LD_INT 12
11217: PUSH
11218: LD_INT 13
11220: PUSH
11221: LD_INT 10
11223: PUSH
11224: LD_INT 14
11226: PUSH
11227: LD_INT 20
11229: PUSH
11230: LD_INT 21
11232: PUSH
11233: LD_INT 22
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 32
11241: PUSH
11242: LD_INT 27
11244: PUSH
11245: LD_INT 36
11247: PUSH
11248: LD_INT 69
11250: PUSH
11251: LD_INT 39
11253: PUSH
11254: LD_INT 34
11256: PUSH
11257: LD_INT 40
11259: PUSH
11260: LD_INT 48
11262: PUSH
11263: LD_INT 49
11265: PUSH
11266: LD_INT 50
11268: PUSH
11269: LD_INT 51
11271: PUSH
11272: LD_INT 52
11274: PUSH
11275: LD_INT 53
11277: PUSH
11278: LD_INT 54
11280: PUSH
11281: LD_INT 55
11283: PUSH
11284: LD_INT 56
11286: PUSH
11287: LD_INT 57
11289: PUSH
11290: LD_INT 58
11292: PUSH
11293: LD_INT 59
11295: PUSH
11296: LD_INT 60
11298: PUSH
11299: LD_INT 61
11301: PUSH
11302: LD_INT 62
11304: PUSH
11305: LD_INT 80
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: ST_TO_ADDR
11351: GO 11734
11353: LD_INT 2
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11543
11361: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
11362: LD_ADDR_VAR 0 4
11366: PUSH
11367: LD_INT 35
11369: PUSH
11370: LD_INT 45
11372: PUSH
11373: LD_INT 46
11375: PUSH
11376: LD_INT 47
11378: PUSH
11379: LD_INT 70
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: LD_INT 11
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: LD_INT 4
11393: PUSH
11394: LD_INT 5
11396: PUSH
11397: LD_INT 6
11399: PUSH
11400: LD_INT 15
11402: PUSH
11403: LD_INT 18
11405: PUSH
11406: LD_INT 7
11408: PUSH
11409: LD_INT 17
11411: PUSH
11412: LD_INT 8
11414: PUSH
11415: LD_INT 20
11417: PUSH
11418: LD_INT 21
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: LD_INT 72
11426: PUSH
11427: LD_INT 26
11429: PUSH
11430: LD_INT 69
11432: PUSH
11433: LD_INT 39
11435: PUSH
11436: LD_INT 40
11438: PUSH
11439: LD_INT 41
11441: PUSH
11442: LD_INT 42
11444: PUSH
11445: LD_INT 43
11447: PUSH
11448: LD_INT 48
11450: PUSH
11451: LD_INT 49
11453: PUSH
11454: LD_INT 50
11456: PUSH
11457: LD_INT 51
11459: PUSH
11460: LD_INT 52
11462: PUSH
11463: LD_INT 53
11465: PUSH
11466: LD_INT 54
11468: PUSH
11469: LD_INT 55
11471: PUSH
11472: LD_INT 56
11474: PUSH
11475: LD_INT 60
11477: PUSH
11478: LD_INT 61
11480: PUSH
11481: LD_INT 62
11483: PUSH
11484: LD_INT 66
11486: PUSH
11487: LD_INT 67
11489: PUSH
11490: LD_INT 68
11492: PUSH
11493: LD_INT 81
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 11734
11543: LD_INT 3
11545: DOUBLE
11546: EQUAL
11547: IFTRUE 11551
11549: GO 11733
11551: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11552: LD_ADDR_VAR 0 4
11556: PUSH
11557: LD_INT 46
11559: PUSH
11560: LD_INT 47
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: LD_INT 11
11571: PUSH
11572: LD_INT 9
11574: PUSH
11575: LD_INT 20
11577: PUSH
11578: LD_INT 19
11580: PUSH
11581: LD_INT 21
11583: PUSH
11584: LD_INT 24
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_INT 25
11592: PUSH
11593: LD_INT 28
11595: PUSH
11596: LD_INT 29
11598: PUSH
11599: LD_INT 30
11601: PUSH
11602: LD_INT 31
11604: PUSH
11605: LD_INT 37
11607: PUSH
11608: LD_INT 38
11610: PUSH
11611: LD_INT 32
11613: PUSH
11614: LD_INT 27
11616: PUSH
11617: LD_INT 33
11619: PUSH
11620: LD_INT 69
11622: PUSH
11623: LD_INT 39
11625: PUSH
11626: LD_INT 34
11628: PUSH
11629: LD_INT 40
11631: PUSH
11632: LD_INT 71
11634: PUSH
11635: LD_INT 23
11637: PUSH
11638: LD_INT 44
11640: PUSH
11641: LD_INT 48
11643: PUSH
11644: LD_INT 49
11646: PUSH
11647: LD_INT 50
11649: PUSH
11650: LD_INT 51
11652: PUSH
11653: LD_INT 52
11655: PUSH
11656: LD_INT 53
11658: PUSH
11659: LD_INT 54
11661: PUSH
11662: LD_INT 55
11664: PUSH
11665: LD_INT 56
11667: PUSH
11668: LD_INT 57
11670: PUSH
11671: LD_INT 58
11673: PUSH
11674: LD_INT 59
11676: PUSH
11677: LD_INT 63
11679: PUSH
11680: LD_INT 64
11682: PUSH
11683: LD_INT 65
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: ST_TO_ADDR
11731: GO 11734
11733: POP
// if state > - 1 and state < 3 then
11734: LD_VAR 0 3
11738: PUSH
11739: LD_INT 1
11741: NEG
11742: GREATER
11743: PUSH
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 3
11751: LESS
11752: AND
11753: IFFALSE 11810
// for i in result do
11755: LD_ADDR_VAR 0 5
11759: PUSH
11760: LD_VAR 0 4
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11808
// if GetTech ( i , side ) <> state then
11768: LD_VAR 0 5
11772: PPUSH
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 321
11782: PUSH
11783: LD_VAR 0 3
11787: NONEQUAL
11788: IFFALSE 11806
// result := result diff i ;
11790: LD_ADDR_VAR 0 4
11794: PUSH
11795: LD_VAR 0 4
11799: PUSH
11800: LD_VAR 0 5
11804: DIFF
11805: ST_TO_ADDR
11806: GO 11765
11808: POP
11809: POP
// end ;
11810: LD_VAR 0 4
11814: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
11819: PPUSH
// result := true ;
11820: LD_ADDR_VAR 0 3
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11828: LD_ADDR_VAR 0 5
11832: PUSH
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 480
11842: ST_TO_ADDR
// if not tmp then
11843: LD_VAR 0 5
11847: NOT
11848: IFFALSE 11852
// exit ;
11850: GO 11901
// for i in tmp do
11852: LD_ADDR_VAR 0 4
11856: PUSH
11857: LD_VAR 0 5
11861: PUSH
11862: FOR_IN
11863: IFFALSE 11899
// if GetTech ( i , side ) <> state_researched then
11865: LD_VAR 0 4
11869: PPUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 321
11879: PUSH
11880: LD_INT 2
11882: NONEQUAL
11883: IFFALSE 11897
// begin result := false ;
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// exit ;
11893: POP
11894: POP
11895: GO 11901
// end ;
11897: GO 11862
11899: POP
11900: POP
// end ;
11901: LD_VAR 0 3
11905: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11906: LD_INT 0
11908: PPUSH
11909: PPUSH
11910: PPUSH
11911: PPUSH
11912: PPUSH
11913: PPUSH
11914: PPUSH
11915: PPUSH
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11921: LD_VAR 0 1
11925: NOT
11926: PUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 257
11936: PUSH
11937: LD_INT 9
11939: NONEQUAL
11940: OR
11941: IFFALSE 11945
// exit ;
11943: GO 12518
// side := GetSide ( unit ) ;
11945: LD_ADDR_VAR 0 9
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 255
11959: ST_TO_ADDR
// tech_space := tech_spacanom ;
11960: LD_ADDR_VAR 0 12
11964: PUSH
11965: LD_INT 29
11967: ST_TO_ADDR
// tech_time := tech_taurad ;
11968: LD_ADDR_VAR 0 13
11972: PUSH
11973: LD_INT 28
11975: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11976: LD_ADDR_VAR 0 11
11980: PUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 310
11990: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11991: LD_VAR 0 11
11995: PPUSH
11996: CALL_OW 247
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: IFFALSE 12008
// exit ;
12006: GO 12518
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12008: LD_ADDR_VAR 0 8
12012: PUSH
12013: LD_INT 81
12015: PUSH
12016: LD_VAR 0 9
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 3
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 69
12050: ST_TO_ADDR
// if not tmp then
12051: LD_VAR 0 8
12055: NOT
12056: IFFALSE 12060
// exit ;
12058: GO 12518
// if in_unit then
12060: LD_VAR 0 11
12064: IFFALSE 12088
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12066: LD_ADDR_VAR 0 10
12070: PUSH
12071: LD_VAR 0 8
12075: PPUSH
12076: LD_VAR 0 11
12080: PPUSH
12081: CALL_OW 74
12085: ST_TO_ADDR
12086: GO 12108
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12088: LD_ADDR_VAR 0 10
12092: PUSH
12093: LD_VAR 0 8
12097: PPUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 74
12107: ST_TO_ADDR
// if not enemy then
12108: LD_VAR 0 10
12112: NOT
12113: IFFALSE 12117
// exit ;
12115: GO 12518
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12117: LD_VAR 0 11
12121: PUSH
12122: LD_VAR 0 11
12126: PPUSH
12127: LD_VAR 0 10
12131: PPUSH
12132: CALL_OW 296
12136: PUSH
12137: LD_INT 13
12139: GREATER
12140: AND
12141: PUSH
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_VAR 0 10
12151: PPUSH
12152: CALL_OW 296
12156: PUSH
12157: LD_INT 12
12159: GREATER
12160: OR
12161: IFFALSE 12165
// exit ;
12163: GO 12518
// missile := [ 1 ] ;
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12176: LD_VAR 0 9
12180: PPUSH
12181: LD_VAR 0 12
12185: PPUSH
12186: CALL_OW 325
12190: IFFALSE 12219
// missile := Insert ( missile , missile + 1 , 2 ) ;
12192: LD_ADDR_VAR 0 14
12196: PUSH
12197: LD_VAR 0 14
12201: PPUSH
12202: LD_VAR 0 14
12206: PUSH
12207: LD_INT 1
12209: PLUS
12210: PPUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 2
12218: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12219: LD_VAR 0 9
12223: PPUSH
12224: LD_VAR 0 13
12228: PPUSH
12229: CALL_OW 325
12233: PUSH
12234: LD_VAR 0 10
12238: PPUSH
12239: CALL_OW 255
12243: PPUSH
12244: LD_VAR 0 13
12248: PPUSH
12249: CALL_OW 325
12253: NOT
12254: AND
12255: IFFALSE 12284
// missile := Insert ( missile , missile + 1 , 3 ) ;
12257: LD_ADDR_VAR 0 14
12261: PUSH
12262: LD_VAR 0 14
12266: PPUSH
12267: LD_VAR 0 14
12271: PUSH
12272: LD_INT 1
12274: PLUS
12275: PPUSH
12276: LD_INT 3
12278: PPUSH
12279: CALL_OW 2
12283: ST_TO_ADDR
// if missile < 2 then
12284: LD_VAR 0 14
12288: PUSH
12289: LD_INT 2
12291: LESS
12292: IFFALSE 12296
// exit ;
12294: GO 12518
// x := GetX ( enemy ) ;
12296: LD_ADDR_VAR 0 4
12300: PUSH
12301: LD_VAR 0 10
12305: PPUSH
12306: CALL_OW 250
12310: ST_TO_ADDR
// y := GetY ( enemy ) ;
12311: LD_ADDR_VAR 0 5
12315: PUSH
12316: LD_VAR 0 10
12320: PPUSH
12321: CALL_OW 251
12325: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12326: LD_ADDR_VAR 0 6
12330: PUSH
12331: LD_VAR 0 4
12335: PUSH
12336: LD_INT 1
12338: NEG
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 12
12347: PLUS
12348: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12349: LD_ADDR_VAR 0 7
12353: PUSH
12354: LD_VAR 0 5
12358: PUSH
12359: LD_INT 1
12361: NEG
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 12
12370: PLUS
12371: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12372: LD_VAR 0 6
12376: PPUSH
12377: LD_VAR 0 7
12381: PPUSH
12382: CALL_OW 488
12386: NOT
12387: IFFALSE 12409
// begin _x := x ;
12389: LD_ADDR_VAR 0 6
12393: PUSH
12394: LD_VAR 0 4
12398: ST_TO_ADDR
// _y := y ;
12399: LD_ADDR_VAR 0 7
12403: PUSH
12404: LD_VAR 0 5
12408: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12409: LD_ADDR_VAR 0 3
12413: PUSH
12414: LD_INT 1
12416: PPUSH
12417: LD_VAR 0 14
12421: PPUSH
12422: CALL_OW 12
12426: ST_TO_ADDR
// case i of 1 :
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 1
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12457
12440: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12441: LD_VAR 0 1
12445: PPUSH
12446: LD_VAR 0 10
12450: PPUSH
12451: CALL_OW 115
12455: GO 12518
12457: LD_INT 2
12459: DOUBLE
12460: EQUAL
12461: IFTRUE 12465
12463: GO 12487
12465: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12466: LD_VAR 0 1
12470: PPUSH
12471: LD_VAR 0 6
12475: PPUSH
12476: LD_VAR 0 7
12480: PPUSH
12481: CALL_OW 153
12485: GO 12518
12487: LD_INT 3
12489: DOUBLE
12490: EQUAL
12491: IFTRUE 12495
12493: GO 12517
12495: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12496: LD_VAR 0 1
12500: PPUSH
12501: LD_VAR 0 6
12505: PPUSH
12506: LD_VAR 0 7
12510: PPUSH
12511: CALL_OW 154
12515: GO 12518
12517: POP
// end ;
12518: LD_VAR 0 2
12522: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12523: LD_INT 0
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
// if not unit or not building then
12531: LD_VAR 0 1
12535: NOT
12536: PUSH
12537: LD_VAR 0 2
12541: NOT
12542: OR
12543: IFFALSE 12547
// exit ;
12545: GO 12705
// x := GetX ( building ) ;
12547: LD_ADDR_VAR 0 5
12551: PUSH
12552: LD_VAR 0 2
12556: PPUSH
12557: CALL_OW 250
12561: ST_TO_ADDR
// y := GetY ( building ) ;
12562: LD_ADDR_VAR 0 6
12566: PUSH
12567: LD_VAR 0 2
12571: PPUSH
12572: CALL_OW 251
12576: ST_TO_ADDR
// for i = 0 to 5 do
12577: LD_ADDR_VAR 0 4
12581: PUSH
12582: DOUBLE
12583: LD_INT 0
12585: DEC
12586: ST_TO_ADDR
12587: LD_INT 5
12589: PUSH
12590: FOR_TO
12591: IFFALSE 12703
// begin _x := ShiftX ( x , i , 3 ) ;
12593: LD_ADDR_VAR 0 7
12597: PUSH
12598: LD_VAR 0 5
12602: PPUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: LD_INT 3
12610: PPUSH
12611: CALL_OW 272
12615: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12616: LD_ADDR_VAR 0 8
12620: PUSH
12621: LD_VAR 0 6
12625: PPUSH
12626: LD_VAR 0 4
12630: PPUSH
12631: LD_INT 3
12633: PPUSH
12634: CALL_OW 273
12638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12639: LD_VAR 0 7
12643: PPUSH
12644: LD_VAR 0 8
12648: PPUSH
12649: CALL_OW 488
12653: NOT
12654: IFFALSE 12658
// continue ;
12656: GO 12590
// if HexInfo ( _x , _y ) = 0 then
12658: LD_VAR 0 7
12662: PPUSH
12663: LD_VAR 0 8
12667: PPUSH
12668: CALL_OW 428
12672: PUSH
12673: LD_INT 0
12675: EQUAL
12676: IFFALSE 12701
// begin ComMoveXY ( unit , _x , _y ) ;
12678: LD_VAR 0 1
12682: PPUSH
12683: LD_VAR 0 7
12687: PPUSH
12688: LD_VAR 0 8
12692: PPUSH
12693: CALL_OW 111
// exit ;
12697: POP
12698: POP
12699: GO 12705
// end ; end ;
12701: GO 12590
12703: POP
12704: POP
// end ;
12705: LD_VAR 0 3
12709: RET
// export function ScanBase ( side , base_area ) ; begin
12710: LD_INT 0
12712: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12713: LD_ADDR_VAR 0 3
12717: PUSH
12718: LD_VAR 0 2
12722: PPUSH
12723: LD_INT 81
12725: PUSH
12726: LD_VAR 0 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PPUSH
12735: CALL_OW 70
12739: ST_TO_ADDR
// end ;
12740: LD_VAR 0 3
12744: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12745: LD_INT 0
12747: PPUSH
12748: PPUSH
12749: PPUSH
12750: PPUSH
12751: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12752: LD_VAR 0 1
12756: NOT
12757: PUSH
12758: LD_EXP 52
12762: PUSH
12763: LD_VAR 0 1
12767: ARRAY
12768: NOT
12769: OR
12770: PUSH
12771: LD_VAR 0 2
12775: NOT
12776: OR
12777: PUSH
12778: LD_VAR 0 3
12782: NOT
12783: OR
12784: IFFALSE 12788
// exit ;
12786: GO 13301
// side := mc_sides [ base ] ;
12788: LD_ADDR_VAR 0 6
12792: PUSH
12793: LD_EXP 78
12797: PUSH
12798: LD_VAR 0 1
12802: ARRAY
12803: ST_TO_ADDR
// if not side then
12804: LD_VAR 0 6
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 13301
// for i in solds do
12813: LD_ADDR_VAR 0 7
12817: PUSH
12818: LD_VAR 0 2
12822: PUSH
12823: FOR_IN
12824: IFFALSE 12885
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12826: LD_VAR 0 7
12830: PPUSH
12831: CALL_OW 310
12835: PPUSH
12836: CALL_OW 266
12840: PUSH
12841: LD_INT 32
12843: PUSH
12844: LD_INT 31
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: IN
12851: IFFALSE 12871
// solds := solds diff i else
12853: LD_ADDR_VAR 0 2
12857: PUSH
12858: LD_VAR 0 2
12862: PUSH
12863: LD_VAR 0 7
12867: DIFF
12868: ST_TO_ADDR
12869: GO 12883
// SetTag ( i , 18 ) ;
12871: LD_VAR 0 7
12875: PPUSH
12876: LD_INT 18
12878: PPUSH
12879: CALL_OW 109
12883: GO 12823
12885: POP
12886: POP
// if not solds then
12887: LD_VAR 0 2
12891: NOT
12892: IFFALSE 12896
// exit ;
12894: GO 13301
// repeat wait ( 0 0$1 ) ;
12896: LD_INT 35
12898: PPUSH
12899: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12903: LD_ADDR_VAR 0 5
12907: PUSH
12908: LD_VAR 0 6
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: CALL 12710 0 2
12922: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
12923: LD_EXP 52
12927: PUSH
12928: LD_VAR 0 1
12932: ARRAY
12933: NOT
12934: PUSH
12935: LD_EXP 52
12939: PUSH
12940: LD_VAR 0 1
12944: ARRAY
12945: PUSH
12946: EMPTY
12947: EQUAL
12948: OR
12949: IFFALSE 12986
// begin for i in solds do
12951: LD_ADDR_VAR 0 7
12955: PUSH
12956: LD_VAR 0 2
12960: PUSH
12961: FOR_IN
12962: IFFALSE 12975
// ComStop ( i ) ;
12964: LD_VAR 0 7
12968: PPUSH
12969: CALL_OW 141
12973: GO 12961
12975: POP
12976: POP
// solds := [ ] ;
12977: LD_ADDR_VAR 0 2
12981: PUSH
12982: EMPTY
12983: ST_TO_ADDR
// exit ;
12984: GO 13301
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
12986: LD_VAR 0 5
12990: NOT
12991: PUSH
12992: LD_VAR 0 5
12996: PUSH
12997: LD_INT 3
12999: GREATER
13000: OR
13001: PUSH
13002: LD_EXP 74
13006: PUSH
13007: LD_VAR 0 1
13011: ARRAY
13012: OR
13013: IFFALSE 13054
// begin for i in solds do
13015: LD_ADDR_VAR 0 7
13019: PUSH
13020: LD_VAR 0 2
13024: PUSH
13025: FOR_IN
13026: IFFALSE 13050
// if HasTask ( i ) then
13028: LD_VAR 0 7
13032: PPUSH
13033: CALL_OW 314
13037: IFFALSE 13048
// ComStop ( i ) ;
13039: LD_VAR 0 7
13043: PPUSH
13044: CALL_OW 141
13048: GO 13025
13050: POP
13051: POP
// break ;
13052: GO 13289
// end ; for i in solds do
13054: LD_ADDR_VAR 0 7
13058: PUSH
13059: LD_VAR 0 2
13063: PUSH
13064: FOR_IN
13065: IFFALSE 13281
// begin if IsInUnit ( i ) then
13067: LD_VAR 0 7
13071: PPUSH
13072: CALL_OW 310
13076: IFFALSE 13087
// ComExitBuilding ( i ) ;
13078: LD_VAR 0 7
13082: PPUSH
13083: CALL_OW 122
// if GetLives ( i ) > 333 then
13087: LD_VAR 0 7
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 333
13099: GREATER
13100: IFFALSE 13128
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13102: LD_VAR 0 7
13106: PPUSH
13107: LD_VAR 0 5
13111: PPUSH
13112: LD_VAR 0 7
13116: PPUSH
13117: CALL_OW 74
13121: PPUSH
13122: CALL_OW 115
13126: GO 13279
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
13128: LD_ADDR_VAR 0 8
13132: PUSH
13133: LD_EXP 52
13137: PUSH
13138: LD_VAR 0 1
13142: ARRAY
13143: PPUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 0
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 30
13159: PUSH
13160: LD_INT 1
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 30
13169: PUSH
13170: LD_INT 6
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PPUSH
13183: CALL_OW 72
13187: PPUSH
13188: LD_VAR 0 7
13192: PPUSH
13193: CALL_OW 74
13197: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
13198: LD_VAR 0 7
13202: PPUSH
13203: LD_VAR 0 8
13207: PPUSH
13208: CALL_OW 250
13212: PPUSH
13213: LD_INT 3
13215: PPUSH
13216: LD_INT 5
13218: PPUSH
13219: CALL_OW 272
13223: PPUSH
13224: LD_VAR 0 8
13228: PPUSH
13229: CALL_OW 251
13233: PPUSH
13234: LD_INT 3
13236: PPUSH
13237: LD_INT 5
13239: PPUSH
13240: CALL_OW 273
13244: PPUSH
13245: CALL_OW 111
// SetTag ( i , 0 ) ;
13249: LD_VAR 0 7
13253: PPUSH
13254: LD_INT 0
13256: PPUSH
13257: CALL_OW 109
// solds := solds diff i ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_VAR 0 2
13270: PUSH
13271: LD_VAR 0 7
13275: DIFF
13276: ST_TO_ADDR
// continue ;
13277: GO 13064
// end ; end ;
13279: GO 13064
13281: POP
13282: POP
// until solds ;
13283: LD_VAR 0 2
13287: IFFALSE 12896
// MC_Reset ( base , 18 ) ;
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 18
13296: PPUSH
13297: CALL 58218 0 2
// end ;
13301: LD_VAR 0 4
13305: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13306: LD_INT 0
13308: PPUSH
13309: PPUSH
13310: PPUSH
13311: PPUSH
13312: PPUSH
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13324: LD_ADDR_VAR 0 12
13328: PUSH
13329: LD_EXP 52
13333: PUSH
13334: LD_VAR 0 1
13338: ARRAY
13339: PPUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 3
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 72
13354: ST_TO_ADDR
// if mc_remote_driver [ base ] then
13355: LD_EXP 92
13359: PUSH
13360: LD_VAR 0 1
13364: ARRAY
13365: IFFALSE 13389
// mechs := mechs diff mc_remote_driver [ base ] ;
13367: LD_ADDR_VAR 0 12
13371: PUSH
13372: LD_VAR 0 12
13376: PUSH
13377: LD_EXP 92
13381: PUSH
13382: LD_VAR 0 1
13386: ARRAY
13387: DIFF
13388: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13389: LD_ADDR_VAR 0 8
13393: PUSH
13394: LD_EXP 52
13398: PUSH
13399: LD_VAR 0 1
13403: ARRAY
13404: PPUSH
13405: LD_INT 2
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 5
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 8
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 9
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PPUSH
13455: CALL_OW 72
13459: ST_TO_ADDR
// if not defenders and not solds then
13460: LD_VAR 0 2
13464: NOT
13465: PUSH
13466: LD_VAR 0 8
13470: NOT
13471: AND
13472: IFFALSE 13476
// exit ;
13474: GO 15002
// depot_under_attack := false ;
13476: LD_ADDR_VAR 0 16
13480: PUSH
13481: LD_INT 0
13483: ST_TO_ADDR
// sold_defenders := [ ] ;
13484: LD_ADDR_VAR 0 17
13488: PUSH
13489: EMPTY
13490: ST_TO_ADDR
// if mechs then
13491: LD_VAR 0 12
13495: IFFALSE 13624
// for i in defenders do
13497: LD_ADDR_VAR 0 5
13501: PUSH
13502: LD_VAR 0 2
13506: PUSH
13507: FOR_IN
13508: IFFALSE 13622
// begin SetTag ( i , 20 ) ;
13510: LD_VAR 0 5
13514: PPUSH
13515: LD_INT 20
13517: PPUSH
13518: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13522: LD_VAR 0 5
13526: PPUSH
13527: CALL_OW 263
13531: PUSH
13532: LD_INT 1
13534: EQUAL
13535: PUSH
13536: LD_VAR 0 5
13540: PPUSH
13541: CALL_OW 311
13545: NOT
13546: AND
13547: PUSH
13548: LD_VAR 0 12
13552: AND
13553: IFFALSE 13620
// begin un := mechs [ 1 ] ;
13555: LD_ADDR_VAR 0 10
13559: PUSH
13560: LD_VAR 0 12
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13569: LD_VAR 0 10
13573: PPUSH
13574: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13578: LD_VAR 0 10
13582: PPUSH
13583: LD_VAR 0 5
13587: PPUSH
13588: CALL_OW 180
// SetTag ( un , 19 ) ;
13592: LD_VAR 0 10
13596: PPUSH
13597: LD_INT 19
13599: PPUSH
13600: CALL_OW 109
// mechs := mechs diff un ;
13604: LD_ADDR_VAR 0 12
13608: PUSH
13609: LD_VAR 0 12
13613: PUSH
13614: LD_VAR 0 10
13618: DIFF
13619: ST_TO_ADDR
// end ; end ;
13620: GO 13507
13622: POP
13623: POP
// if solds then
13624: LD_VAR 0 8
13628: IFFALSE 13687
// for i in solds do
13630: LD_ADDR_VAR 0 5
13634: PUSH
13635: LD_VAR 0 8
13639: PUSH
13640: FOR_IN
13641: IFFALSE 13685
// if not GetTag ( i ) then
13643: LD_VAR 0 5
13647: PPUSH
13648: CALL_OW 110
13652: NOT
13653: IFFALSE 13683
// begin defenders := defenders union i ;
13655: LD_ADDR_VAR 0 2
13659: PUSH
13660: LD_VAR 0 2
13664: PUSH
13665: LD_VAR 0 5
13669: UNION
13670: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13671: LD_VAR 0 5
13675: PPUSH
13676: LD_INT 18
13678: PPUSH
13679: CALL_OW 109
// end ;
13683: GO 13640
13685: POP
13686: POP
// repeat wait ( 0 0$1 ) ;
13687: LD_INT 35
13689: PPUSH
13690: CALL_OW 67
// enemy := mc_scan [ base ] ;
13694: LD_ADDR_VAR 0 3
13698: PUSH
13699: LD_EXP 75
13703: PUSH
13704: LD_VAR 0 1
13708: ARRAY
13709: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13710: LD_EXP 52
13714: PUSH
13715: LD_VAR 0 1
13719: ARRAY
13720: NOT
13721: PUSH
13722: LD_EXP 52
13726: PUSH
13727: LD_VAR 0 1
13731: ARRAY
13732: PUSH
13733: EMPTY
13734: EQUAL
13735: OR
13736: IFFALSE 13773
// begin for i in defenders do
13738: LD_ADDR_VAR 0 5
13742: PUSH
13743: LD_VAR 0 2
13747: PUSH
13748: FOR_IN
13749: IFFALSE 13762
// ComStop ( i ) ;
13751: LD_VAR 0 5
13755: PPUSH
13756: CALL_OW 141
13760: GO 13748
13762: POP
13763: POP
// defenders := [ ] ;
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: EMPTY
13770: ST_TO_ADDR
// exit ;
13771: GO 15002
// end ; for i in defenders do
13773: LD_ADDR_VAR 0 5
13777: PUSH
13778: LD_VAR 0 2
13782: PUSH
13783: FOR_IN
13784: IFFALSE 14514
// begin e := NearestUnitToUnit ( enemy , i ) ;
13786: LD_ADDR_VAR 0 13
13790: PUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_VAR 0 5
13800: PPUSH
13801: CALL_OW 74
13805: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13806: LD_ADDR_VAR 0 16
13810: PUSH
13811: LD_EXP 52
13815: PUSH
13816: LD_VAR 0 1
13820: ARRAY
13821: PPUSH
13822: LD_INT 2
13824: PUSH
13825: LD_INT 30
13827: PUSH
13828: LD_INT 0
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 30
13837: PUSH
13838: LD_INT 1
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: PPUSH
13850: CALL_OW 72
13854: NOT
13855: PUSH
13856: LD_EXP 52
13860: PUSH
13861: LD_VAR 0 1
13865: ARRAY
13866: PPUSH
13867: LD_INT 2
13869: PUSH
13870: LD_INT 30
13872: PUSH
13873: LD_INT 0
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 1
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: PPUSH
13895: CALL_OW 72
13899: PPUSH
13900: CALL_OW 256
13904: PUSH
13905: LD_INT 600
13907: LESS
13908: OR
13909: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13910: LD_VAR 0 5
13914: PPUSH
13915: CALL_OW 247
13919: PUSH
13920: LD_INT 2
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 14220
13928: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
13929: LD_VAR 0 5
13933: PPUSH
13934: CALL_OW 256
13938: PUSH
13939: LD_INT 650
13941: GREATER
13942: PUSH
13943: LD_VAR 0 5
13947: PPUSH
13948: LD_VAR 0 13
13952: PPUSH
13953: CALL_OW 296
13957: PUSH
13958: LD_INT 40
13960: LESS
13961: PUSH
13962: LD_VAR 0 13
13966: PPUSH
13967: LD_EXP 77
13971: PUSH
13972: LD_VAR 0 1
13976: ARRAY
13977: PPUSH
13978: CALL_OW 308
13982: OR
13983: AND
13984: IFFALSE 14002
// ComAttackUnit ( i , e ) else
13986: LD_VAR 0 5
13990: PPUSH
13991: LD_VAR 0 13
13995: PPUSH
13996: CALL_OW 115
14000: GO 14103
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14002: LD_VAR 0 13
14006: PPUSH
14007: LD_EXP 77
14011: PUSH
14012: LD_VAR 0 1
14016: ARRAY
14017: PPUSH
14018: CALL_OW 308
14022: NOT
14023: PUSH
14024: LD_VAR 0 5
14028: PPUSH
14029: LD_VAR 0 13
14033: PPUSH
14034: CALL_OW 296
14038: PUSH
14039: LD_INT 40
14041: GREATEREQUAL
14042: AND
14043: PUSH
14044: LD_VAR 0 5
14048: PPUSH
14049: CALL_OW 256
14053: PUSH
14054: LD_INT 650
14056: LESSEQUAL
14057: OR
14058: PUSH
14059: LD_VAR 0 5
14063: PPUSH
14064: LD_EXP 76
14068: PUSH
14069: LD_VAR 0 1
14073: ARRAY
14074: PPUSH
14075: CALL_OW 308
14079: NOT
14080: AND
14081: IFFALSE 14103
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14083: LD_VAR 0 5
14087: PPUSH
14088: LD_EXP 76
14092: PUSH
14093: LD_VAR 0 1
14097: ARRAY
14098: PPUSH
14099: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14103: LD_VAR 0 5
14107: PPUSH
14108: CALL_OW 256
14112: PUSH
14113: LD_INT 998
14115: LESS
14116: PUSH
14117: LD_VAR 0 5
14121: PPUSH
14122: CALL_OW 263
14126: PUSH
14127: LD_INT 1
14129: EQUAL
14130: AND
14131: PUSH
14132: LD_VAR 0 5
14136: PPUSH
14137: CALL_OW 311
14141: AND
14142: PUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: LD_EXP 76
14152: PUSH
14153: LD_VAR 0 1
14157: ARRAY
14158: PPUSH
14159: CALL_OW 308
14163: AND
14164: IFFALSE 14218
// begin mech := IsDrivenBy ( i ) ;
14166: LD_ADDR_VAR 0 9
14170: PUSH
14171: LD_VAR 0 5
14175: PPUSH
14176: CALL_OW 311
14180: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14181: LD_VAR 0 9
14185: PPUSH
14186: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14190: LD_VAR 0 9
14194: PPUSH
14195: LD_VAR 0 5
14199: PPUSH
14200: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14204: LD_VAR 0 9
14208: PPUSH
14209: LD_VAR 0 5
14213: PPUSH
14214: CALL_OW 180
// end ; end ; unit_human :
14218: GO 14485
14220: LD_INT 1
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14484
14228: POP
// begin b := IsInUnit ( i ) ;
14229: LD_ADDR_VAR 0 18
14233: PUSH
14234: LD_VAR 0 5
14238: PPUSH
14239: CALL_OW 310
14243: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14244: LD_ADDR_VAR 0 19
14248: PUSH
14249: LD_VAR 0 18
14253: NOT
14254: PUSH
14255: LD_VAR 0 18
14259: PPUSH
14260: CALL_OW 266
14264: PUSH
14265: LD_INT 32
14267: PUSH
14268: LD_INT 31
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: IN
14275: OR
14276: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14277: LD_VAR 0 16
14281: PUSH
14282: LD_VAR 0 2
14286: PPUSH
14287: LD_INT 21
14289: PUSH
14290: LD_INT 2
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PPUSH
14297: CALL_OW 72
14301: PUSH
14302: LD_INT 1
14304: LESSEQUAL
14305: OR
14306: PUSH
14307: LD_VAR 0 19
14311: AND
14312: PUSH
14313: LD_VAR 0 5
14317: PUSH
14318: LD_VAR 0 17
14322: IN
14323: NOT
14324: AND
14325: IFFALSE 14418
// begin if b then
14327: LD_VAR 0 18
14331: IFFALSE 14380
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14333: LD_VAR 0 18
14337: PPUSH
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_VAR 0 18
14347: PPUSH
14348: CALL_OW 74
14352: PPUSH
14353: CALL_OW 296
14357: PUSH
14358: LD_INT 10
14360: LESS
14361: PUSH
14362: LD_VAR 0 18
14366: PPUSH
14367: CALL_OW 461
14371: PUSH
14372: LD_INT 7
14374: NONEQUAL
14375: AND
14376: IFFALSE 14380
// continue ;
14378: GO 13783
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14380: LD_ADDR_VAR 0 17
14384: PUSH
14385: LD_VAR 0 17
14389: PPUSH
14390: LD_VAR 0 17
14394: PUSH
14395: LD_INT 1
14397: PLUS
14398: PPUSH
14399: LD_VAR 0 5
14403: PPUSH
14404: CALL_OW 1
14408: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14409: LD_VAR 0 5
14413: PPUSH
14414: CALL_OW 122
// end ; if sold_defenders then
14418: LD_VAR 0 17
14422: IFFALSE 14482
// if i in sold_defenders then
14424: LD_VAR 0 5
14428: PUSH
14429: LD_VAR 0 17
14433: IN
14434: IFFALSE 14482
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14436: LD_VAR 0 5
14440: PPUSH
14441: CALL_OW 314
14445: NOT
14446: PUSH
14447: LD_VAR 0 5
14451: PPUSH
14452: LD_VAR 0 13
14456: PPUSH
14457: CALL_OW 296
14461: PUSH
14462: LD_INT 30
14464: LESS
14465: AND
14466: IFFALSE 14482
// ComAttackUnit ( i , e ) ;
14468: LD_VAR 0 5
14472: PPUSH
14473: LD_VAR 0 13
14477: PPUSH
14478: CALL_OW 115
// end ; end ; end ;
14482: GO 14485
14484: POP
// if IsDead ( i ) then
14485: LD_VAR 0 5
14489: PPUSH
14490: CALL_OW 301
14494: IFFALSE 14512
// defenders := defenders diff i ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_VAR 0 2
14505: PUSH
14506: LD_VAR 0 5
14510: DIFF
14511: ST_TO_ADDR
// end ;
14512: GO 13783
14514: POP
14515: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
14516: LD_VAR 0 3
14520: NOT
14521: PUSH
14522: LD_VAR 0 2
14526: NOT
14527: OR
14528: PUSH
14529: LD_EXP 52
14533: PUSH
14534: LD_VAR 0 1
14538: ARRAY
14539: NOT
14540: OR
14541: IFFALSE 13687
// MC_Reset ( base , 18 ) ;
14543: LD_VAR 0 1
14547: PPUSH
14548: LD_INT 18
14550: PPUSH
14551: CALL 58218 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14555: LD_ADDR_VAR 0 2
14559: PUSH
14560: LD_VAR 0 2
14564: PUSH
14565: LD_VAR 0 2
14569: PPUSH
14570: LD_INT 2
14572: PUSH
14573: LD_INT 25
14575: PUSH
14576: LD_INT 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 25
14585: PUSH
14586: LD_INT 5
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 25
14595: PUSH
14596: LD_INT 8
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 25
14605: PUSH
14606: LD_INT 9
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 72
14624: DIFF
14625: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14626: LD_VAR 0 3
14630: NOT
14631: PUSH
14632: LD_VAR 0 2
14636: PPUSH
14637: LD_INT 21
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 72
14651: AND
14652: IFFALSE 14990
// begin tmp := FilterByTag ( defenders , 19 ) ;
14654: LD_ADDR_VAR 0 11
14658: PUSH
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_INT 19
14666: PPUSH
14667: CALL 51431 0 2
14671: ST_TO_ADDR
// if tmp then
14672: LD_VAR 0 11
14676: IFFALSE 14746
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14678: LD_ADDR_VAR 0 11
14682: PUSH
14683: LD_VAR 0 11
14687: PPUSH
14688: LD_INT 25
14690: PUSH
14691: LD_INT 3
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PPUSH
14698: CALL_OW 72
14702: ST_TO_ADDR
// if tmp then
14703: LD_VAR 0 11
14707: IFFALSE 14746
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14709: LD_ADDR_EXP 64
14713: PUSH
14714: LD_EXP 64
14718: PPUSH
14719: LD_VAR 0 1
14723: PPUSH
14724: LD_EXP 64
14728: PUSH
14729: LD_VAR 0 1
14733: ARRAY
14734: PUSH
14735: LD_VAR 0 11
14739: UNION
14740: PPUSH
14741: CALL_OW 1
14745: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_INT 19
14753: PPUSH
14754: CALL 58218 0 2
// repeat wait ( 0 0$1 ) ;
14758: LD_INT 35
14760: PPUSH
14761: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
14765: LD_EXP 52
14769: PUSH
14770: LD_VAR 0 1
14774: ARRAY
14775: NOT
14776: PUSH
14777: LD_EXP 52
14781: PUSH
14782: LD_VAR 0 1
14786: ARRAY
14787: PUSH
14788: EMPTY
14789: EQUAL
14790: OR
14791: IFFALSE 14828
// begin for i in defenders do
14793: LD_ADDR_VAR 0 5
14797: PUSH
14798: LD_VAR 0 2
14802: PUSH
14803: FOR_IN
14804: IFFALSE 14817
// ComStop ( i ) ;
14806: LD_VAR 0 5
14810: PPUSH
14811: CALL_OW 141
14815: GO 14803
14817: POP
14818: POP
// defenders := [ ] ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: EMPTY
14825: ST_TO_ADDR
// exit ;
14826: GO 15002
// end ; for i in defenders do
14828: LD_ADDR_VAR 0 5
14832: PUSH
14833: LD_VAR 0 2
14837: PUSH
14838: FOR_IN
14839: IFFALSE 14928
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14841: LD_VAR 0 5
14845: PPUSH
14846: LD_EXP 76
14850: PUSH
14851: LD_VAR 0 1
14855: ARRAY
14856: PPUSH
14857: CALL_OW 308
14861: NOT
14862: IFFALSE 14886
// ComMoveToArea ( i , mc_parking [ base ] ) else
14864: LD_VAR 0 5
14868: PPUSH
14869: LD_EXP 76
14873: PUSH
14874: LD_VAR 0 1
14878: ARRAY
14879: PPUSH
14880: CALL_OW 113
14884: GO 14926
// if GetControl ( i ) = control_manual then
14886: LD_VAR 0 5
14890: PPUSH
14891: CALL_OW 263
14895: PUSH
14896: LD_INT 1
14898: EQUAL
14899: IFFALSE 14926
// if IsDrivenBy ( i ) then
14901: LD_VAR 0 5
14905: PPUSH
14906: CALL_OW 311
14910: IFFALSE 14926
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14912: LD_VAR 0 5
14916: PPUSH
14917: CALL_OW 311
14921: PPUSH
14922: CALL_OW 121
// end ;
14926: GO 14838
14928: POP
14929: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
14930: LD_VAR 0 2
14934: PPUSH
14935: LD_INT 95
14937: PUSH
14938: LD_EXP 76
14942: PUSH
14943: LD_VAR 0 1
14947: ARRAY
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 72
14957: PUSH
14958: LD_VAR 0 2
14962: EQUAL
14963: PUSH
14964: LD_EXP 75
14968: PUSH
14969: LD_VAR 0 1
14973: ARRAY
14974: OR
14975: PUSH
14976: LD_EXP 52
14980: PUSH
14981: LD_VAR 0 1
14985: ARRAY
14986: NOT
14987: OR
14988: IFFALSE 14758
// end ; MC_Reset ( base , 20 ) ;
14990: LD_VAR 0 1
14994: PPUSH
14995: LD_INT 20
14997: PPUSH
14998: CALL 58218 0 2
// end ;
15002: LD_VAR 0 4
15006: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15007: LD_INT 0
15009: PPUSH
15010: PPUSH
15011: PPUSH
15012: PPUSH
// result := false ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 0
15020: ST_TO_ADDR
// side := GetSide ( unit ) ;
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_VAR 0 1
15030: PPUSH
15031: CALL_OW 255
15035: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15036: LD_ADDR_VAR 0 4
15040: PUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 248
15050: ST_TO_ADDR
// case nat of 1 :
15051: LD_VAR 0 4
15055: PUSH
15056: LD_INT 1
15058: DOUBLE
15059: EQUAL
15060: IFTRUE 15064
15062: GO 15075
15064: POP
// tech := tech_lassight ; 2 :
15065: LD_ADDR_VAR 0 5
15069: PUSH
15070: LD_INT 12
15072: ST_TO_ADDR
15073: GO 15114
15075: LD_INT 2
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15094
15083: POP
// tech := tech_mortar ; 3 :
15084: LD_ADDR_VAR 0 5
15088: PUSH
15089: LD_INT 41
15091: ST_TO_ADDR
15092: GO 15114
15094: LD_INT 3
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15102
15100: GO 15113
15102: POP
// tech := tech_bazooka ; end ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 44
15110: ST_TO_ADDR
15111: GO 15114
15113: POP
// if Researched ( side , tech ) then
15114: LD_VAR 0 3
15118: PPUSH
15119: LD_VAR 0 5
15123: PPUSH
15124: CALL_OW 325
15128: IFFALSE 15155
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15130: LD_ADDR_VAR 0 2
15134: PUSH
15135: LD_INT 5
15137: PUSH
15138: LD_INT 8
15140: PUSH
15141: LD_INT 9
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: PUSH
15149: LD_VAR 0 4
15153: ARRAY
15154: ST_TO_ADDR
// end ;
15155: LD_VAR 0 2
15159: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15160: LD_INT 0
15162: PPUSH
15163: PPUSH
15164: PPUSH
// if not mines then
15165: LD_VAR 0 2
15169: NOT
15170: IFFALSE 15174
// exit ;
15172: GO 15318
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15174: LD_ADDR_VAR 0 5
15178: PUSH
15179: LD_INT 81
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 3
15193: PUSH
15194: LD_INT 21
15196: PUSH
15197: LD_INT 3
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PPUSH
15212: CALL_OW 69
15216: ST_TO_ADDR
// for i in mines do
15217: LD_ADDR_VAR 0 4
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: FOR_IN
15228: IFFALSE 15316
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15230: LD_VAR 0 4
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PPUSH
15239: LD_VAR 0 4
15243: PUSH
15244: LD_INT 2
15246: ARRAY
15247: PPUSH
15248: CALL_OW 458
15252: NOT
15253: IFFALSE 15257
// continue ;
15255: GO 15227
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15257: LD_VAR 0 4
15261: PUSH
15262: LD_INT 1
15264: ARRAY
15265: PPUSH
15266: LD_VAR 0 4
15270: PUSH
15271: LD_INT 2
15273: ARRAY
15274: PPUSH
15275: CALL_OW 428
15279: PUSH
15280: LD_VAR 0 5
15284: IN
15285: IFFALSE 15314
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15287: LD_VAR 0 4
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 4
15300: PUSH
15301: LD_INT 2
15303: ARRAY
15304: PPUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 456
// end ;
15314: GO 15227
15316: POP
15317: POP
// end ;
15318: LD_VAR 0 3
15322: RET
// export function Count ( array ) ; var i ; begin
15323: LD_INT 0
15325: PPUSH
15326: PPUSH
// result := 0 ;
15327: LD_ADDR_VAR 0 2
15331: PUSH
15332: LD_INT 0
15334: ST_TO_ADDR
// for i in array do
15335: LD_ADDR_VAR 0 3
15339: PUSH
15340: LD_VAR 0 1
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15370
// if i then
15348: LD_VAR 0 3
15352: IFFALSE 15368
// result := result + 1 ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_VAR 0 2
15363: PUSH
15364: LD_INT 1
15366: PLUS
15367: ST_TO_ADDR
15368: GO 15345
15370: POP
15371: POP
// end ;
15372: LD_VAR 0 2
15376: RET
// export function IsEmpty ( building ) ; begin
15377: LD_INT 0
15379: PPUSH
// if not building then
15380: LD_VAR 0 1
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15432
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_VAR 0 1
15398: PUSH
15399: LD_INT 22
15401: PUSH
15402: LD_VAR 0 1
15406: PPUSH
15407: CALL_OW 255
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 58
15418: PUSH
15419: EMPTY
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: IN
15431: ST_TO_ADDR
// end ;
15432: LD_VAR 0 2
15436: RET
// export function IsNotFull ( building ) ; begin
15437: LD_INT 0
15439: PPUSH
// if not building then
15440: LD_VAR 0 1
15444: NOT
15445: IFFALSE 15449
// exit ;
15447: GO 15468
// result := UnitsInside ( building ) < 6 ;
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_VAR 0 1
15458: PPUSH
15459: CALL_OW 313
15463: PUSH
15464: LD_INT 6
15466: LESS
15467: ST_TO_ADDR
// end ;
15468: LD_VAR 0 2
15472: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15473: LD_INT 0
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
// tmp := [ ] ;
15479: LD_ADDR_VAR 0 3
15483: PUSH
15484: EMPTY
15485: ST_TO_ADDR
// list := [ ] ;
15486: LD_ADDR_VAR 0 5
15490: PUSH
15491: EMPTY
15492: ST_TO_ADDR
// for i = 16 to 25 do
15493: LD_ADDR_VAR 0 4
15497: PUSH
15498: DOUBLE
15499: LD_INT 16
15501: DEC
15502: ST_TO_ADDR
15503: LD_INT 25
15505: PUSH
15506: FOR_TO
15507: IFFALSE 15580
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15509: LD_ADDR_VAR 0 3
15513: PUSH
15514: LD_VAR 0 3
15518: PUSH
15519: LD_INT 22
15521: PUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 255
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 91
15538: PUSH
15539: LD_VAR 0 1
15543: PUSH
15544: LD_INT 6
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 30
15554: PUSH
15555: LD_VAR 0 4
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: PUSH
15569: EMPTY
15570: LIST
15571: PPUSH
15572: CALL_OW 69
15576: ADD
15577: ST_TO_ADDR
15578: GO 15506
15580: POP
15581: POP
// for i = 1 to tmp do
15582: LD_ADDR_VAR 0 4
15586: PUSH
15587: DOUBLE
15588: LD_INT 1
15590: DEC
15591: ST_TO_ADDR
15592: LD_VAR 0 3
15596: PUSH
15597: FOR_TO
15598: IFFALSE 15686
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15600: LD_ADDR_VAR 0 5
15604: PUSH
15605: LD_VAR 0 5
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 4
15619: ARRAY
15620: PPUSH
15621: CALL_OW 266
15625: PUSH
15626: LD_VAR 0 3
15630: PUSH
15631: LD_VAR 0 4
15635: ARRAY
15636: PPUSH
15637: CALL_OW 250
15641: PUSH
15642: LD_VAR 0 3
15646: PUSH
15647: LD_VAR 0 4
15651: ARRAY
15652: PPUSH
15653: CALL_OW 251
15657: PUSH
15658: LD_VAR 0 3
15662: PUSH
15663: LD_VAR 0 4
15667: ARRAY
15668: PPUSH
15669: CALL_OW 254
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: ADD
15683: ST_TO_ADDR
15684: GO 15597
15686: POP
15687: POP
// result := list ;
15688: LD_ADDR_VAR 0 2
15692: PUSH
15693: LD_VAR 0 5
15697: ST_TO_ADDR
// end ;
15698: LD_VAR 0 2
15702: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15703: LD_INT 0
15705: PPUSH
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
// if not factory then
15712: LD_VAR 0 1
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 16314
// if control = control_apeman then
15721: LD_VAR 0 4
15725: PUSH
15726: LD_INT 5
15728: EQUAL
15729: IFFALSE 15838
// begin tmp := UnitsInside ( factory ) ;
15731: LD_ADDR_VAR 0 8
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 313
15745: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15746: LD_VAR 0 8
15750: PPUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 12
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PPUSH
15761: CALL_OW 72
15765: NOT
15766: IFFALSE 15776
// control := control_manual ;
15768: LD_ADDR_VAR 0 4
15772: PUSH
15773: LD_INT 1
15775: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15776: LD_ADDR_VAR 0 8
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL 15473 0 1
15790: ST_TO_ADDR
// if tmp then
15791: LD_VAR 0 8
15795: IFFALSE 15838
// begin for i in tmp do
15797: LD_ADDR_VAR 0 7
15801: PUSH
15802: LD_VAR 0 8
15806: PUSH
15807: FOR_IN
15808: IFFALSE 15836
// if i [ 1 ] = b_ext_radio then
15810: LD_VAR 0 7
15814: PUSH
15815: LD_INT 1
15817: ARRAY
15818: PUSH
15819: LD_INT 22
15821: EQUAL
15822: IFFALSE 15834
// begin control := control_remote ;
15824: LD_ADDR_VAR 0 4
15828: PUSH
15829: LD_INT 2
15831: ST_TO_ADDR
// break ;
15832: GO 15836
// end ;
15834: GO 15807
15836: POP
15837: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: LD_VAR 0 3
15852: PPUSH
15853: LD_VAR 0 4
15857: PPUSH
15858: LD_VAR 0 5
15862: PPUSH
15863: CALL_OW 448
15867: IFFALSE 15902
// begin result := [ chassis , engine , control , weapon ] ;
15869: LD_ADDR_VAR 0 6
15873: PUSH
15874: LD_VAR 0 2
15878: PUSH
15879: LD_VAR 0 3
15883: PUSH
15884: LD_VAR 0 4
15888: PUSH
15889: LD_VAR 0 5
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: ST_TO_ADDR
// exit ;
15900: GO 16314
// end ; _chassis := AvailableChassisList ( factory ) ;
15902: LD_ADDR_VAR 0 9
15906: PUSH
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 475
15916: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15917: LD_ADDR_VAR 0 11
15921: PUSH
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 476
15931: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15932: LD_ADDR_VAR 0 12
15936: PUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 477
15946: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15947: LD_ADDR_VAR 0 10
15951: PUSH
15952: LD_VAR 0 1
15956: PPUSH
15957: CALL_OW 478
15961: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15962: LD_VAR 0 9
15966: NOT
15967: PUSH
15968: LD_VAR 0 11
15972: NOT
15973: OR
15974: PUSH
15975: LD_VAR 0 12
15979: NOT
15980: OR
15981: PUSH
15982: LD_VAR 0 10
15986: NOT
15987: OR
15988: IFFALSE 16023
// begin result := [ chassis , engine , control , weapon ] ;
15990: LD_ADDR_VAR 0 6
15994: PUSH
15995: LD_VAR 0 2
15999: PUSH
16000: LD_VAR 0 3
16004: PUSH
16005: LD_VAR 0 4
16009: PUSH
16010: LD_VAR 0 5
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: ST_TO_ADDR
// exit ;
16021: GO 16314
// end ; if not chassis in _chassis then
16023: LD_VAR 0 2
16027: PUSH
16028: LD_VAR 0 9
16032: IN
16033: NOT
16034: IFFALSE 16060
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16036: LD_ADDR_VAR 0 2
16040: PUSH
16041: LD_VAR 0 9
16045: PUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_VAR 0 9
16053: PPUSH
16054: CALL_OW 12
16058: ARRAY
16059: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16060: LD_VAR 0 2
16064: PPUSH
16065: LD_VAR 0 3
16069: PPUSH
16070: CALL 16319 0 2
16074: NOT
16075: IFFALSE 16134
// repeat engine := _engine [ 1 ] ;
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: LD_VAR 0 11
16086: PUSH
16087: LD_INT 1
16089: ARRAY
16090: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16091: LD_ADDR_VAR 0 11
16095: PUSH
16096: LD_VAR 0 11
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: CALL_OW 3
16108: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16109: LD_VAR 0 2
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: CALL 16319 0 2
16123: PUSH
16124: LD_VAR 0 11
16128: PUSH
16129: EMPTY
16130: EQUAL
16131: OR
16132: IFFALSE 16077
// if not control in _control then
16134: LD_VAR 0 4
16138: PUSH
16139: LD_VAR 0 12
16143: IN
16144: NOT
16145: IFFALSE 16171
// control := _control [ rand ( 1 , _control ) ] ;
16147: LD_ADDR_VAR 0 4
16151: PUSH
16152: LD_VAR 0 12
16156: PUSH
16157: LD_INT 1
16159: PPUSH
16160: LD_VAR 0 12
16164: PPUSH
16165: CALL_OW 12
16169: ARRAY
16170: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16171: LD_VAR 0 2
16175: PPUSH
16176: LD_VAR 0 5
16180: PPUSH
16181: CALL 16539 0 2
16185: NOT
16186: IFFALSE 16245
// repeat weapon := _weapon [ 1 ] ;
16188: LD_ADDR_VAR 0 5
16192: PUSH
16193: LD_VAR 0 10
16197: PUSH
16198: LD_INT 1
16200: ARRAY
16201: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16202: LD_ADDR_VAR 0 10
16206: PUSH
16207: LD_VAR 0 10
16211: PPUSH
16212: LD_INT 1
16214: PPUSH
16215: CALL_OW 3
16219: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16220: LD_VAR 0 2
16224: PPUSH
16225: LD_VAR 0 5
16229: PPUSH
16230: CALL 16539 0 2
16234: PUSH
16235: LD_VAR 0 10
16239: PUSH
16240: EMPTY
16241: EQUAL
16242: OR
16243: IFFALSE 16188
// result := [ ] ;
16245: LD_ADDR_VAR 0 6
16249: PUSH
16250: EMPTY
16251: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16252: LD_VAR 0 1
16256: PPUSH
16257: LD_VAR 0 2
16261: PPUSH
16262: LD_VAR 0 3
16266: PPUSH
16267: LD_VAR 0 4
16271: PPUSH
16272: LD_VAR 0 5
16276: PPUSH
16277: CALL_OW 448
16281: IFFALSE 16314
// result := [ chassis , engine , control , weapon ] ;
16283: LD_ADDR_VAR 0 6
16287: PUSH
16288: LD_VAR 0 2
16292: PUSH
16293: LD_VAR 0 3
16297: PUSH
16298: LD_VAR 0 4
16302: PUSH
16303: LD_VAR 0 5
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: ST_TO_ADDR
// end ;
16314: LD_VAR 0 6
16318: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16319: LD_INT 0
16321: PPUSH
// if not chassis or not engine then
16322: LD_VAR 0 1
16326: NOT
16327: PUSH
16328: LD_VAR 0 2
16332: NOT
16333: OR
16334: IFFALSE 16338
// exit ;
16336: GO 16534
// case engine of engine_solar :
16338: LD_VAR 0 2
16342: PUSH
16343: LD_INT 2
16345: DOUBLE
16346: EQUAL
16347: IFTRUE 16351
16349: GO 16389
16351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16352: LD_ADDR_VAR 0 3
16356: PUSH
16357: LD_INT 11
16359: PUSH
16360: LD_INT 12
16362: PUSH
16363: LD_INT 13
16365: PUSH
16366: LD_INT 14
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: LD_INT 2
16374: PUSH
16375: LD_INT 3
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: ST_TO_ADDR
16387: GO 16518
16389: LD_INT 1
16391: DOUBLE
16392: EQUAL
16393: IFTRUE 16397
16395: GO 16459
16397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 11
16405: PUSH
16406: LD_INT 12
16408: PUSH
16409: LD_INT 13
16411: PUSH
16412: LD_INT 14
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: LD_INT 2
16420: PUSH
16421: LD_INT 3
16423: PUSH
16424: LD_INT 4
16426: PUSH
16427: LD_INT 5
16429: PUSH
16430: LD_INT 21
16432: PUSH
16433: LD_INT 23
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_INT 24
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: ST_TO_ADDR
16457: GO 16518
16459: LD_INT 3
16461: DOUBLE
16462: EQUAL
16463: IFTRUE 16467
16465: GO 16517
16467: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16468: LD_ADDR_VAR 0 3
16472: PUSH
16473: LD_INT 13
16475: PUSH
16476: LD_INT 14
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: LD_INT 4
16487: PUSH
16488: LD_INT 5
16490: PUSH
16491: LD_INT 21
16493: PUSH
16494: LD_INT 22
16496: PUSH
16497: LD_INT 23
16499: PUSH
16500: LD_INT 24
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: ST_TO_ADDR
16515: GO 16518
16517: POP
// result := ( chassis in result ) ;
16518: LD_ADDR_VAR 0 3
16522: PUSH
16523: LD_VAR 0 1
16527: PUSH
16528: LD_VAR 0 3
16532: IN
16533: ST_TO_ADDR
// end ;
16534: LD_VAR 0 3
16538: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16539: LD_INT 0
16541: PPUSH
// if not chassis or not weapon then
16542: LD_VAR 0 1
16546: NOT
16547: PUSH
16548: LD_VAR 0 2
16552: NOT
16553: OR
16554: IFFALSE 16558
// exit ;
16556: GO 17584
// case weapon of us_machine_gun :
16558: LD_VAR 0 2
16562: PUSH
16563: LD_INT 2
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16571
16569: GO 16601
16571: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: ST_TO_ADDR
16599: GO 17568
16601: LD_INT 3
16603: DOUBLE
16604: EQUAL
16605: IFTRUE 16609
16607: GO 16639
16609: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16610: LD_ADDR_VAR 0 3
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: LD_INT 2
16620: PUSH
16621: LD_INT 3
16623: PUSH
16624: LD_INT 4
16626: PUSH
16627: LD_INT 5
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: ST_TO_ADDR
16637: GO 17568
16639: LD_INT 11
16641: DOUBLE
16642: EQUAL
16643: IFTRUE 16647
16645: GO 16677
16647: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16648: LD_ADDR_VAR 0 3
16652: PUSH
16653: LD_INT 1
16655: PUSH
16656: LD_INT 2
16658: PUSH
16659: LD_INT 3
16661: PUSH
16662: LD_INT 4
16664: PUSH
16665: LD_INT 5
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: ST_TO_ADDR
16675: GO 17568
16677: LD_INT 4
16679: DOUBLE
16680: EQUAL
16681: IFTRUE 16685
16683: GO 16711
16685: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16686: LD_ADDR_VAR 0 3
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: LD_INT 4
16699: PUSH
16700: LD_INT 5
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: ST_TO_ADDR
16709: GO 17568
16711: LD_INT 5
16713: DOUBLE
16714: EQUAL
16715: IFTRUE 16719
16717: GO 16745
16719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16720: LD_ADDR_VAR 0 3
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: LD_INT 3
16730: PUSH
16731: LD_INT 4
16733: PUSH
16734: LD_INT 5
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: ST_TO_ADDR
16743: GO 17568
16745: LD_INT 9
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16779
16753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16754: LD_ADDR_VAR 0 3
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: LD_INT 3
16764: PUSH
16765: LD_INT 4
16767: PUSH
16768: LD_INT 5
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: ST_TO_ADDR
16777: GO 17568
16779: LD_INT 7
16781: DOUBLE
16782: EQUAL
16783: IFTRUE 16787
16785: GO 16813
16787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16788: LD_ADDR_VAR 0 3
16792: PUSH
16793: LD_INT 2
16795: PUSH
16796: LD_INT 3
16798: PUSH
16799: LD_INT 4
16801: PUSH
16802: LD_INT 5
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: ST_TO_ADDR
16811: GO 17568
16813: LD_INT 12
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16821
16819: GO 16847
16821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16822: LD_ADDR_VAR 0 3
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: LD_INT 3
16832: PUSH
16833: LD_INT 4
16835: PUSH
16836: LD_INT 5
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: ST_TO_ADDR
16845: GO 17568
16847: LD_INT 13
16849: DOUBLE
16850: EQUAL
16851: IFTRUE 16855
16853: GO 16881
16855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16856: LD_ADDR_VAR 0 3
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: LD_INT 3
16866: PUSH
16867: LD_INT 4
16869: PUSH
16870: LD_INT 5
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: ST_TO_ADDR
16879: GO 17568
16881: LD_INT 14
16883: DOUBLE
16884: EQUAL
16885: IFTRUE 16889
16887: GO 16907
16889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16890: LD_ADDR_VAR 0 3
16894: PUSH
16895: LD_INT 4
16897: PUSH
16898: LD_INT 5
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: ST_TO_ADDR
16905: GO 17568
16907: LD_INT 6
16909: DOUBLE
16910: EQUAL
16911: IFTRUE 16915
16913: GO 16933
16915: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_INT 4
16923: PUSH
16924: LD_INT 5
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: ST_TO_ADDR
16931: GO 17568
16933: LD_INT 10
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 16959
16941: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16942: LD_ADDR_VAR 0 3
16946: PUSH
16947: LD_INT 4
16949: PUSH
16950: LD_INT 5
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: ST_TO_ADDR
16957: GO 17568
16959: LD_INT 22
16961: DOUBLE
16962: EQUAL
16963: IFTRUE 16967
16965: GO 16993
16967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_INT 11
16975: PUSH
16976: LD_INT 12
16978: PUSH
16979: LD_INT 13
16981: PUSH
16982: LD_INT 14
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: ST_TO_ADDR
16991: GO 17568
16993: LD_INT 23
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17027
17001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: LD_INT 11
17009: PUSH
17010: LD_INT 12
17012: PUSH
17013: LD_INT 13
17015: PUSH
17016: LD_INT 14
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17568
17027: LD_INT 24
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17061
17035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17036: LD_ADDR_VAR 0 3
17040: PUSH
17041: LD_INT 11
17043: PUSH
17044: LD_INT 12
17046: PUSH
17047: LD_INT 13
17049: PUSH
17050: LD_INT 14
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
17059: GO 17568
17061: LD_INT 30
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17095
17069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_INT 11
17077: PUSH
17078: LD_INT 12
17080: PUSH
17081: LD_INT 13
17083: PUSH
17084: LD_INT 14
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: ST_TO_ADDR
17093: GO 17568
17095: LD_INT 25
17097: DOUBLE
17098: EQUAL
17099: IFTRUE 17103
17101: GO 17121
17103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_INT 13
17111: PUSH
17112: LD_INT 14
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: ST_TO_ADDR
17119: GO 17568
17121: LD_INT 27
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17147
17129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17130: LD_ADDR_VAR 0 3
17134: PUSH
17135: LD_INT 13
17137: PUSH
17138: LD_INT 14
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: ST_TO_ADDR
17145: GO 17568
17147: LD_INT 28
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17173
17155: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17156: LD_ADDR_VAR 0 3
17160: PUSH
17161: LD_INT 13
17163: PUSH
17164: LD_INT 14
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: ST_TO_ADDR
17171: GO 17568
17173: LD_INT 29
17175: DOUBLE
17176: EQUAL
17177: IFTRUE 17181
17179: GO 17199
17181: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_INT 13
17189: PUSH
17190: LD_INT 14
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: ST_TO_ADDR
17197: GO 17568
17199: LD_INT 31
17201: DOUBLE
17202: EQUAL
17203: IFTRUE 17207
17205: GO 17225
17207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17208: LD_ADDR_VAR 0 3
17212: PUSH
17213: LD_INT 13
17215: PUSH
17216: LD_INT 14
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: ST_TO_ADDR
17223: GO 17568
17225: LD_INT 26
17227: DOUBLE
17228: EQUAL
17229: IFTRUE 17233
17231: GO 17251
17233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17234: LD_ADDR_VAR 0 3
17238: PUSH
17239: LD_INT 13
17241: PUSH
17242: LD_INT 14
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: ST_TO_ADDR
17249: GO 17568
17251: LD_INT 42
17253: DOUBLE
17254: EQUAL
17255: IFTRUE 17259
17257: GO 17285
17259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17260: LD_ADDR_VAR 0 3
17264: PUSH
17265: LD_INT 21
17267: PUSH
17268: LD_INT 22
17270: PUSH
17271: LD_INT 23
17273: PUSH
17274: LD_INT 24
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: ST_TO_ADDR
17283: GO 17568
17285: LD_INT 43
17287: DOUBLE
17288: EQUAL
17289: IFTRUE 17293
17291: GO 17319
17293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17294: LD_ADDR_VAR 0 3
17298: PUSH
17299: LD_INT 21
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_INT 23
17307: PUSH
17308: LD_INT 24
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: ST_TO_ADDR
17317: GO 17568
17319: LD_INT 44
17321: DOUBLE
17322: EQUAL
17323: IFTRUE 17327
17325: GO 17353
17327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: LD_INT 21
17335: PUSH
17336: LD_INT 22
17338: PUSH
17339: LD_INT 23
17341: PUSH
17342: LD_INT 24
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: ST_TO_ADDR
17351: GO 17568
17353: LD_INT 45
17355: DOUBLE
17356: EQUAL
17357: IFTRUE 17361
17359: GO 17387
17361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17362: LD_ADDR_VAR 0 3
17366: PUSH
17367: LD_INT 21
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: LD_INT 23
17375: PUSH
17376: LD_INT 24
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: ST_TO_ADDR
17385: GO 17568
17387: LD_INT 49
17389: DOUBLE
17390: EQUAL
17391: IFTRUE 17395
17393: GO 17421
17395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17396: LD_ADDR_VAR 0 3
17400: PUSH
17401: LD_INT 21
17403: PUSH
17404: LD_INT 22
17406: PUSH
17407: LD_INT 23
17409: PUSH
17410: LD_INT 24
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: ST_TO_ADDR
17419: GO 17568
17421: LD_INT 51
17423: DOUBLE
17424: EQUAL
17425: IFTRUE 17429
17427: GO 17455
17429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: LD_INT 21
17437: PUSH
17438: LD_INT 22
17440: PUSH
17441: LD_INT 23
17443: PUSH
17444: LD_INT 24
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: ST_TO_ADDR
17453: GO 17568
17455: LD_INT 52
17457: DOUBLE
17458: EQUAL
17459: IFTRUE 17463
17461: GO 17489
17463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17464: LD_ADDR_VAR 0 3
17468: PUSH
17469: LD_INT 21
17471: PUSH
17472: LD_INT 22
17474: PUSH
17475: LD_INT 23
17477: PUSH
17478: LD_INT 24
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: ST_TO_ADDR
17487: GO 17568
17489: LD_INT 53
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17497
17495: GO 17515
17497: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17498: LD_ADDR_VAR 0 3
17502: PUSH
17503: LD_INT 23
17505: PUSH
17506: LD_INT 24
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: ST_TO_ADDR
17513: GO 17568
17515: LD_INT 46
17517: DOUBLE
17518: EQUAL
17519: IFTRUE 17523
17521: GO 17541
17523: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17524: LD_ADDR_VAR 0 3
17528: PUSH
17529: LD_INT 23
17531: PUSH
17532: LD_INT 24
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: ST_TO_ADDR
17539: GO 17568
17541: LD_INT 47
17543: DOUBLE
17544: EQUAL
17545: IFTRUE 17549
17547: GO 17567
17549: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17550: LD_ADDR_VAR 0 3
17554: PUSH
17555: LD_INT 23
17557: PUSH
17558: LD_INT 24
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: ST_TO_ADDR
17565: GO 17568
17567: POP
// result := ( chassis in result ) ;
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_VAR 0 1
17577: PUSH
17578: LD_VAR 0 3
17582: IN
17583: ST_TO_ADDR
// end ;
17584: LD_VAR 0 3
17588: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17589: LD_INT 0
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
// result := array ;
17598: LD_ADDR_VAR 0 5
17602: PUSH
17603: LD_VAR 0 1
17607: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17608: LD_VAR 0 1
17612: NOT
17613: PUSH
17614: LD_VAR 0 2
17618: NOT
17619: OR
17620: PUSH
17621: LD_VAR 0 3
17625: NOT
17626: OR
17627: PUSH
17628: LD_VAR 0 2
17632: PUSH
17633: LD_VAR 0 1
17637: GREATER
17638: OR
17639: PUSH
17640: LD_VAR 0 3
17644: PUSH
17645: LD_VAR 0 1
17649: GREATER
17650: OR
17651: IFFALSE 17655
// exit ;
17653: GO 17951
// if direction then
17655: LD_VAR 0 4
17659: IFFALSE 17723
// begin d := 1 ;
17661: LD_ADDR_VAR 0 9
17665: PUSH
17666: LD_INT 1
17668: ST_TO_ADDR
// if i_from > i_to then
17669: LD_VAR 0 2
17673: PUSH
17674: LD_VAR 0 3
17678: GREATER
17679: IFFALSE 17705
// length := ( array - i_from ) + i_to else
17681: LD_ADDR_VAR 0 11
17685: PUSH
17686: LD_VAR 0 1
17690: PUSH
17691: LD_VAR 0 2
17695: MINUS
17696: PUSH
17697: LD_VAR 0 3
17701: PLUS
17702: ST_TO_ADDR
17703: GO 17721
// length := i_to - i_from ;
17705: LD_ADDR_VAR 0 11
17709: PUSH
17710: LD_VAR 0 3
17714: PUSH
17715: LD_VAR 0 2
17719: MINUS
17720: ST_TO_ADDR
// end else
17721: GO 17784
// begin d := - 1 ;
17723: LD_ADDR_VAR 0 9
17727: PUSH
17728: LD_INT 1
17730: NEG
17731: ST_TO_ADDR
// if i_from > i_to then
17732: LD_VAR 0 2
17736: PUSH
17737: LD_VAR 0 3
17741: GREATER
17742: IFFALSE 17762
// length := i_from - i_to else
17744: LD_ADDR_VAR 0 11
17748: PUSH
17749: LD_VAR 0 2
17753: PUSH
17754: LD_VAR 0 3
17758: MINUS
17759: ST_TO_ADDR
17760: GO 17784
// length := ( array - i_to ) + i_from ;
17762: LD_ADDR_VAR 0 11
17766: PUSH
17767: LD_VAR 0 1
17771: PUSH
17772: LD_VAR 0 3
17776: MINUS
17777: PUSH
17778: LD_VAR 0 2
17782: PLUS
17783: ST_TO_ADDR
// end ; if not length then
17784: LD_VAR 0 11
17788: NOT
17789: IFFALSE 17793
// exit ;
17791: GO 17951
// tmp := array ;
17793: LD_ADDR_VAR 0 10
17797: PUSH
17798: LD_VAR 0 1
17802: ST_TO_ADDR
// for i = 1 to length do
17803: LD_ADDR_VAR 0 6
17807: PUSH
17808: DOUBLE
17809: LD_INT 1
17811: DEC
17812: ST_TO_ADDR
17813: LD_VAR 0 11
17817: PUSH
17818: FOR_TO
17819: IFFALSE 17939
// begin for j = 1 to array do
17821: LD_ADDR_VAR 0 7
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 1
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17925
// begin k := j + d ;
17839: LD_ADDR_VAR 0 8
17843: PUSH
17844: LD_VAR 0 7
17848: PUSH
17849: LD_VAR 0 9
17853: PLUS
17854: ST_TO_ADDR
// if k > array then
17855: LD_VAR 0 8
17859: PUSH
17860: LD_VAR 0 1
17864: GREATER
17865: IFFALSE 17875
// k := 1 ;
17867: LD_ADDR_VAR 0 8
17871: PUSH
17872: LD_INT 1
17874: ST_TO_ADDR
// if not k then
17875: LD_VAR 0 8
17879: NOT
17880: IFFALSE 17892
// k := array ;
17882: LD_ADDR_VAR 0 8
17886: PUSH
17887: LD_VAR 0 1
17891: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17892: LD_ADDR_VAR 0 10
17896: PUSH
17897: LD_VAR 0 10
17901: PPUSH
17902: LD_VAR 0 8
17906: PPUSH
17907: LD_VAR 0 1
17911: PUSH
17912: LD_VAR 0 7
17916: ARRAY
17917: PPUSH
17918: CALL_OW 1
17922: ST_TO_ADDR
// end ;
17923: GO 17836
17925: POP
17926: POP
// array := tmp ;
17927: LD_ADDR_VAR 0 1
17931: PUSH
17932: LD_VAR 0 10
17936: ST_TO_ADDR
// end ;
17937: GO 17818
17939: POP
17940: POP
// result := array ;
17941: LD_ADDR_VAR 0 5
17945: PUSH
17946: LD_VAR 0 1
17950: ST_TO_ADDR
// end ;
17951: LD_VAR 0 5
17955: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17956: LD_INT 0
17958: PPUSH
17959: PPUSH
// result := 0 ;
17960: LD_ADDR_VAR 0 3
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// if not array or not value in array then
17968: LD_VAR 0 1
17972: NOT
17973: PUSH
17974: LD_VAR 0 2
17978: PUSH
17979: LD_VAR 0 1
17983: IN
17984: NOT
17985: OR
17986: IFFALSE 17990
// exit ;
17988: GO 18044
// for i = 1 to array do
17990: LD_ADDR_VAR 0 4
17994: PUSH
17995: DOUBLE
17996: LD_INT 1
17998: DEC
17999: ST_TO_ADDR
18000: LD_VAR 0 1
18004: PUSH
18005: FOR_TO
18006: IFFALSE 18042
// if value = array [ i ] then
18008: LD_VAR 0 2
18012: PUSH
18013: LD_VAR 0 1
18017: PUSH
18018: LD_VAR 0 4
18022: ARRAY
18023: EQUAL
18024: IFFALSE 18040
// begin result := i ;
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: LD_VAR 0 4
18035: ST_TO_ADDR
// exit ;
18036: POP
18037: POP
18038: GO 18044
// end ;
18040: GO 18005
18042: POP
18043: POP
// end ;
18044: LD_VAR 0 3
18048: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18049: LD_INT 0
18051: PPUSH
// vc_chassis := chassis ;
18052: LD_ADDR_OWVAR 37
18056: PUSH
18057: LD_VAR 0 1
18061: ST_TO_ADDR
// vc_engine := engine ;
18062: LD_ADDR_OWVAR 39
18066: PUSH
18067: LD_VAR 0 2
18071: ST_TO_ADDR
// vc_control := control ;
18072: LD_ADDR_OWVAR 38
18076: PUSH
18077: LD_VAR 0 3
18081: ST_TO_ADDR
// vc_weapon := weapon ;
18082: LD_ADDR_OWVAR 40
18086: PUSH
18087: LD_VAR 0 4
18091: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18092: LD_ADDR_OWVAR 41
18096: PUSH
18097: LD_VAR 0 5
18101: ST_TO_ADDR
// end ;
18102: LD_VAR 0 6
18106: RET
// export function WantPlant ( unit ) ; var task ; begin
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
// result := false ;
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_INT 0
18118: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 437
18133: ST_TO_ADDR
// if task then
18134: LD_VAR 0 3
18138: IFFALSE 18166
// if task [ 1 ] [ 1 ] = p then
18140: LD_VAR 0 3
18144: PUSH
18145: LD_INT 1
18147: ARRAY
18148: PUSH
18149: LD_INT 1
18151: ARRAY
18152: PUSH
18153: LD_STRING p
18155: EQUAL
18156: IFFALSE 18166
// result := true ;
18158: LD_ADDR_VAR 0 2
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// end ;
18166: LD_VAR 0 2
18170: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18171: LD_INT 0
18173: PPUSH
18174: PPUSH
18175: PPUSH
18176: PPUSH
// if pos < 1 then
18177: LD_VAR 0 2
18181: PUSH
18182: LD_INT 1
18184: LESS
18185: IFFALSE 18189
// exit ;
18187: GO 18492
// if pos = 1 then
18189: LD_VAR 0 2
18193: PUSH
18194: LD_INT 1
18196: EQUAL
18197: IFFALSE 18230
// result := Replace ( arr , pos [ 1 ] , value ) else
18199: LD_ADDR_VAR 0 4
18203: PUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: LD_VAR 0 2
18213: PUSH
18214: LD_INT 1
18216: ARRAY
18217: PPUSH
18218: LD_VAR 0 3
18222: PPUSH
18223: CALL_OW 1
18227: ST_TO_ADDR
18228: GO 18492
// begin tmp := arr ;
18230: LD_ADDR_VAR 0 6
18234: PUSH
18235: LD_VAR 0 1
18239: ST_TO_ADDR
// s_arr := [ tmp ] ;
18240: LD_ADDR_VAR 0 7
18244: PUSH
18245: LD_VAR 0 6
18249: PUSH
18250: EMPTY
18251: LIST
18252: ST_TO_ADDR
// for i = 1 to pos - 1 do
18253: LD_ADDR_VAR 0 5
18257: PUSH
18258: DOUBLE
18259: LD_INT 1
18261: DEC
18262: ST_TO_ADDR
18263: LD_VAR 0 2
18267: PUSH
18268: LD_INT 1
18270: MINUS
18271: PUSH
18272: FOR_TO
18273: IFFALSE 18318
// begin tmp := tmp [ pos [ i ] ] ;
18275: LD_ADDR_VAR 0 6
18279: PUSH
18280: LD_VAR 0 6
18284: PUSH
18285: LD_VAR 0 2
18289: PUSH
18290: LD_VAR 0 5
18294: ARRAY
18295: ARRAY
18296: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18297: LD_ADDR_VAR 0 7
18301: PUSH
18302: LD_VAR 0 7
18306: PUSH
18307: LD_VAR 0 6
18311: PUSH
18312: EMPTY
18313: LIST
18314: ADD
18315: ST_TO_ADDR
// end ;
18316: GO 18272
18318: POP
18319: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18320: LD_ADDR_VAR 0 6
18324: PUSH
18325: LD_VAR 0 6
18329: PPUSH
18330: LD_VAR 0 2
18334: PUSH
18335: LD_VAR 0 2
18339: ARRAY
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18351: LD_ADDR_VAR 0 7
18355: PUSH
18356: LD_VAR 0 7
18360: PPUSH
18361: LD_VAR 0 7
18365: PPUSH
18366: LD_VAR 0 6
18370: PPUSH
18371: CALL_OW 1
18375: ST_TO_ADDR
// for i = s_arr downto 2 do
18376: LD_ADDR_VAR 0 5
18380: PUSH
18381: DOUBLE
18382: LD_VAR 0 7
18386: INC
18387: ST_TO_ADDR
18388: LD_INT 2
18390: PUSH
18391: FOR_DOWNTO
18392: IFFALSE 18476
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18394: LD_ADDR_VAR 0 6
18398: PUSH
18399: LD_VAR 0 7
18403: PUSH
18404: LD_VAR 0 5
18408: PUSH
18409: LD_INT 1
18411: MINUS
18412: ARRAY
18413: PPUSH
18414: LD_VAR 0 2
18418: PUSH
18419: LD_VAR 0 5
18423: PUSH
18424: LD_INT 1
18426: MINUS
18427: ARRAY
18428: PPUSH
18429: LD_VAR 0 7
18433: PUSH
18434: LD_VAR 0 5
18438: ARRAY
18439: PPUSH
18440: CALL_OW 1
18444: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18445: LD_ADDR_VAR 0 7
18449: PUSH
18450: LD_VAR 0 7
18454: PPUSH
18455: LD_VAR 0 5
18459: PUSH
18460: LD_INT 1
18462: MINUS
18463: PPUSH
18464: LD_VAR 0 6
18468: PPUSH
18469: CALL_OW 1
18473: ST_TO_ADDR
// end ;
18474: GO 18391
18476: POP
18477: POP
// result := s_arr [ 1 ] ;
18478: LD_ADDR_VAR 0 4
18482: PUSH
18483: LD_VAR 0 7
18487: PUSH
18488: LD_INT 1
18490: ARRAY
18491: ST_TO_ADDR
// end ; end ;
18492: LD_VAR 0 4
18496: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
// if not list then
18501: LD_VAR 0 1
18505: NOT
18506: IFFALSE 18510
// exit ;
18508: GO 18601
// i := list [ pos1 ] ;
18510: LD_ADDR_VAR 0 5
18514: PUSH
18515: LD_VAR 0 1
18519: PUSH
18520: LD_VAR 0 2
18524: ARRAY
18525: ST_TO_ADDR
// if not i then
18526: LD_VAR 0 5
18530: NOT
18531: IFFALSE 18535
// exit ;
18533: GO 18601
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18535: LD_ADDR_VAR 0 1
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_VAR 0 2
18549: PPUSH
18550: LD_VAR 0 1
18554: PUSH
18555: LD_VAR 0 3
18559: ARRAY
18560: PPUSH
18561: CALL_OW 1
18565: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18566: LD_ADDR_VAR 0 1
18570: PUSH
18571: LD_VAR 0 1
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_VAR 0 5
18585: PPUSH
18586: CALL_OW 1
18590: ST_TO_ADDR
// result := list ;
18591: LD_ADDR_VAR 0 4
18595: PUSH
18596: LD_VAR 0 1
18600: ST_TO_ADDR
// end ;
18601: LD_VAR 0 4
18605: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18606: LD_INT 0
18608: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18609: LD_ADDR_VAR 0 5
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 250
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 251
18633: PPUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_VAR 0 4
18648: PPUSH
18649: CALL 18659 0 5
18653: ST_TO_ADDR
// end ;
18654: LD_VAR 0 5
18658: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18659: LD_INT 0
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
// if not list then
18665: LD_VAR 0 3
18669: NOT
18670: IFFALSE 18674
// exit ;
18672: GO 19062
// result := [ ] ;
18674: LD_ADDR_VAR 0 6
18678: PUSH
18679: EMPTY
18680: ST_TO_ADDR
// for i in list do
18681: LD_ADDR_VAR 0 7
18685: PUSH
18686: LD_VAR 0 3
18690: PUSH
18691: FOR_IN
18692: IFFALSE 18894
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18694: LD_ADDR_VAR 0 9
18698: PUSH
18699: LD_VAR 0 7
18703: PPUSH
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_VAR 0 2
18713: PPUSH
18714: CALL_OW 297
18718: ST_TO_ADDR
// if not result then
18719: LD_VAR 0 6
18723: NOT
18724: IFFALSE 18750
// result := [ [ i , tmp ] ] else
18726: LD_ADDR_VAR 0 6
18730: PUSH
18731: LD_VAR 0 7
18735: PUSH
18736: LD_VAR 0 9
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: ST_TO_ADDR
18748: GO 18892
// begin if result [ result ] [ 2 ] < tmp then
18750: LD_VAR 0 6
18754: PUSH
18755: LD_VAR 0 6
18759: ARRAY
18760: PUSH
18761: LD_INT 2
18763: ARRAY
18764: PUSH
18765: LD_VAR 0 9
18769: LESS
18770: IFFALSE 18812
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18772: LD_ADDR_VAR 0 6
18776: PUSH
18777: LD_VAR 0 6
18781: PPUSH
18782: LD_VAR 0 6
18786: PUSH
18787: LD_INT 1
18789: PLUS
18790: PPUSH
18791: LD_VAR 0 7
18795: PUSH
18796: LD_VAR 0 9
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 2
18809: ST_TO_ADDR
18810: GO 18892
// for j = 1 to result do
18812: LD_ADDR_VAR 0 8
18816: PUSH
18817: DOUBLE
18818: LD_INT 1
18820: DEC
18821: ST_TO_ADDR
18822: LD_VAR 0 6
18826: PUSH
18827: FOR_TO
18828: IFFALSE 18890
// begin if tmp < result [ j ] [ 2 ] then
18830: LD_VAR 0 9
18834: PUSH
18835: LD_VAR 0 6
18839: PUSH
18840: LD_VAR 0 8
18844: ARRAY
18845: PUSH
18846: LD_INT 2
18848: ARRAY
18849: LESS
18850: IFFALSE 18888
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18852: LD_ADDR_VAR 0 6
18856: PUSH
18857: LD_VAR 0 6
18861: PPUSH
18862: LD_VAR 0 8
18866: PPUSH
18867: LD_VAR 0 7
18871: PUSH
18872: LD_VAR 0 9
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 2
18885: ST_TO_ADDR
// break ;
18886: GO 18890
// end ; end ;
18888: GO 18827
18890: POP
18891: POP
// end ; end ;
18892: GO 18691
18894: POP
18895: POP
// if result and not asc then
18896: LD_VAR 0 6
18900: PUSH
18901: LD_VAR 0 4
18905: NOT
18906: AND
18907: IFFALSE 18982
// begin tmp := result ;
18909: LD_ADDR_VAR 0 9
18913: PUSH
18914: LD_VAR 0 6
18918: ST_TO_ADDR
// for i = tmp downto 1 do
18919: LD_ADDR_VAR 0 7
18923: PUSH
18924: DOUBLE
18925: LD_VAR 0 9
18929: INC
18930: ST_TO_ADDR
18931: LD_INT 1
18933: PUSH
18934: FOR_DOWNTO
18935: IFFALSE 18980
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18937: LD_ADDR_VAR 0 6
18941: PUSH
18942: LD_VAR 0 6
18946: PPUSH
18947: LD_VAR 0 9
18951: PUSH
18952: LD_VAR 0 7
18956: MINUS
18957: PUSH
18958: LD_INT 1
18960: PLUS
18961: PPUSH
18962: LD_VAR 0 9
18966: PUSH
18967: LD_VAR 0 7
18971: ARRAY
18972: PPUSH
18973: CALL_OW 1
18977: ST_TO_ADDR
18978: GO 18934
18980: POP
18981: POP
// end ; tmp := [ ] ;
18982: LD_ADDR_VAR 0 9
18986: PUSH
18987: EMPTY
18988: ST_TO_ADDR
// if mode then
18989: LD_VAR 0 5
18993: IFFALSE 19062
// begin for i = 1 to result do
18995: LD_ADDR_VAR 0 7
18999: PUSH
19000: DOUBLE
19001: LD_INT 1
19003: DEC
19004: ST_TO_ADDR
19005: LD_VAR 0 6
19009: PUSH
19010: FOR_TO
19011: IFFALSE 19050
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19013: LD_ADDR_VAR 0 9
19017: PUSH
19018: LD_VAR 0 9
19022: PPUSH
19023: LD_VAR 0 7
19027: PPUSH
19028: LD_VAR 0 6
19032: PUSH
19033: LD_VAR 0 7
19037: ARRAY
19038: PUSH
19039: LD_INT 1
19041: ARRAY
19042: PPUSH
19043: CALL_OW 1
19047: ST_TO_ADDR
19048: GO 19010
19050: POP
19051: POP
// result := tmp ;
19052: LD_ADDR_VAR 0 6
19056: PUSH
19057: LD_VAR 0 9
19061: ST_TO_ADDR
// end ; end ;
19062: LD_VAR 0 6
19066: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19075: LD_ADDR_VAR 0 5
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: ST_TO_ADDR
// if not x or not y then
19097: LD_VAR 0 2
19101: NOT
19102: PUSH
19103: LD_VAR 0 3
19107: NOT
19108: OR
19109: IFFALSE 19113
// exit ;
19111: GO 20759
// if not range then
19113: LD_VAR 0 4
19117: NOT
19118: IFFALSE 19128
// range := 10 ;
19120: LD_ADDR_VAR 0 4
19124: PUSH
19125: LD_INT 10
19127: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19128: LD_ADDR_VAR 0 8
19132: PUSH
19133: LD_INT 81
19135: PUSH
19136: LD_VAR 0 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 92
19147: PUSH
19148: LD_VAR 0 2
19152: PUSH
19153: LD_VAR 0 3
19157: PUSH
19158: LD_VAR 0 4
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: LD_INT 21
19174: PUSH
19175: LD_INT 3
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: ST_TO_ADDR
// if not tmp then
19196: LD_VAR 0 8
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 20759
// for i in tmp do
19205: LD_ADDR_VAR 0 6
19209: PUSH
19210: LD_VAR 0 8
19214: PUSH
19215: FOR_IN
19216: IFFALSE 20734
// begin points := [ 0 , 0 , 0 ] ;
19218: LD_ADDR_VAR 0 9
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: ST_TO_ADDR
// bpoints := 1 ;
19237: LD_ADDR_VAR 0 10
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19245: LD_VAR 0 6
19249: PPUSH
19250: CALL_OW 247
19254: PUSH
19255: LD_INT 1
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19841
19263: POP
// begin if GetClass ( i ) = 1 then
19264: LD_VAR 0 6
19268: PPUSH
19269: CALL_OW 257
19273: PUSH
19274: LD_INT 1
19276: EQUAL
19277: IFFALSE 19298
// points := [ 10 , 5 , 3 ] ;
19279: LD_ADDR_VAR 0 9
19283: PUSH
19284: LD_INT 10
19286: PUSH
19287: LD_INT 5
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19298: LD_VAR 0 6
19302: PPUSH
19303: CALL_OW 257
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: LD_INT 3
19313: PUSH
19314: LD_INT 4
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: IN
19322: IFFALSE 19343
// points := [ 3 , 2 , 1 ] ;
19324: LD_ADDR_VAR 0 9
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: LD_INT 2
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19343: LD_VAR 0 6
19347: PPUSH
19348: CALL_OW 257
19352: PUSH
19353: LD_INT 5
19355: EQUAL
19356: IFFALSE 19377
// points := [ 130 , 5 , 2 ] ;
19358: LD_ADDR_VAR 0 9
19362: PUSH
19363: LD_INT 130
19365: PUSH
19366: LD_INT 5
19368: PUSH
19369: LD_INT 2
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19377: LD_VAR 0 6
19381: PPUSH
19382: CALL_OW 257
19386: PUSH
19387: LD_INT 8
19389: EQUAL
19390: IFFALSE 19411
// points := [ 35 , 35 , 30 ] ;
19392: LD_ADDR_VAR 0 9
19396: PUSH
19397: LD_INT 35
19399: PUSH
19400: LD_INT 35
19402: PUSH
19403: LD_INT 30
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19411: LD_VAR 0 6
19415: PPUSH
19416: CALL_OW 257
19420: PUSH
19421: LD_INT 9
19423: EQUAL
19424: IFFALSE 19445
// points := [ 20 , 55 , 40 ] ;
19426: LD_ADDR_VAR 0 9
19430: PUSH
19431: LD_INT 20
19433: PUSH
19434: LD_INT 55
19436: PUSH
19437: LD_INT 40
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19445: LD_VAR 0 6
19449: PPUSH
19450: CALL_OW 257
19454: PUSH
19455: LD_INT 12
19457: PUSH
19458: LD_INT 16
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: IN
19465: IFFALSE 19486
// points := [ 5 , 3 , 2 ] ;
19467: LD_ADDR_VAR 0 9
19471: PUSH
19472: LD_INT 5
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19486: LD_VAR 0 6
19490: PPUSH
19491: CALL_OW 257
19495: PUSH
19496: LD_INT 17
19498: EQUAL
19499: IFFALSE 19520
// points := [ 100 , 50 , 75 ] ;
19501: LD_ADDR_VAR 0 9
19505: PUSH
19506: LD_INT 100
19508: PUSH
19509: LD_INT 50
19511: PUSH
19512: LD_INT 75
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19520: LD_VAR 0 6
19524: PPUSH
19525: CALL_OW 257
19529: PUSH
19530: LD_INT 15
19532: EQUAL
19533: IFFALSE 19554
// points := [ 10 , 5 , 3 ] ;
19535: LD_ADDR_VAR 0 9
19539: PUSH
19540: LD_INT 10
19542: PUSH
19543: LD_INT 5
19545: PUSH
19546: LD_INT 3
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19554: LD_VAR 0 6
19558: PPUSH
19559: CALL_OW 257
19563: PUSH
19564: LD_INT 14
19566: EQUAL
19567: IFFALSE 19588
// points := [ 10 , 0 , 0 ] ;
19569: LD_ADDR_VAR 0 9
19573: PUSH
19574: LD_INT 10
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19588: LD_VAR 0 6
19592: PPUSH
19593: CALL_OW 257
19597: PUSH
19598: LD_INT 11
19600: EQUAL
19601: IFFALSE 19622
// points := [ 30 , 10 , 5 ] ;
19603: LD_ADDR_VAR 0 9
19607: PUSH
19608: LD_INT 30
19610: PUSH
19611: LD_INT 10
19613: PUSH
19614: LD_INT 5
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19622: LD_VAR 0 1
19626: PPUSH
19627: LD_INT 5
19629: PPUSH
19630: CALL_OW 321
19634: PUSH
19635: LD_INT 2
19637: EQUAL
19638: IFFALSE 19655
// bpoints := bpoints * 1.8 ;
19640: LD_ADDR_VAR 0 10
19644: PUSH
19645: LD_VAR 0 10
19649: PUSH
19650: LD_REAL  1.80000000000000E+0000
19653: MUL
19654: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19655: LD_VAR 0 6
19659: PPUSH
19660: CALL_OW 257
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: LD_INT 3
19673: PUSH
19674: LD_INT 4
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: IN
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 51
19691: PPUSH
19692: CALL_OW 321
19696: PUSH
19697: LD_INT 2
19699: EQUAL
19700: AND
19701: IFFALSE 19718
// bpoints := bpoints * 1.2 ;
19703: LD_ADDR_VAR 0 10
19707: PUSH
19708: LD_VAR 0 10
19712: PUSH
19713: LD_REAL  1.20000000000000E+0000
19716: MUL
19717: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19718: LD_VAR 0 6
19722: PPUSH
19723: CALL_OW 257
19727: PUSH
19728: LD_INT 5
19730: PUSH
19731: LD_INT 7
19733: PUSH
19734: LD_INT 9
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: IN
19742: PUSH
19743: LD_VAR 0 1
19747: PPUSH
19748: LD_INT 52
19750: PPUSH
19751: CALL_OW 321
19755: PUSH
19756: LD_INT 2
19758: EQUAL
19759: AND
19760: IFFALSE 19777
// bpoints := bpoints * 1.5 ;
19762: LD_ADDR_VAR 0 10
19766: PUSH
19767: LD_VAR 0 10
19771: PUSH
19772: LD_REAL  1.50000000000000E+0000
19775: MUL
19776: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_INT 66
19784: PPUSH
19785: CALL_OW 321
19789: PUSH
19790: LD_INT 2
19792: EQUAL
19793: IFFALSE 19810
// bpoints := bpoints * 1.1 ;
19795: LD_ADDR_VAR 0 10
19799: PUSH
19800: LD_VAR 0 10
19804: PUSH
19805: LD_REAL  1.10000000000000E+0000
19808: MUL
19809: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19810: LD_ADDR_VAR 0 10
19814: PUSH
19815: LD_VAR 0 10
19819: PUSH
19820: LD_VAR 0 6
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 259
19832: PUSH
19833: LD_REAL  1.15000000000000E+0000
19836: MUL
19837: MUL
19838: ST_TO_ADDR
// end ; unit_vehicle :
19839: GO 20663
19841: LD_INT 2
19843: DOUBLE
19844: EQUAL
19845: IFTRUE 19849
19847: GO 20651
19849: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19850: LD_VAR 0 6
19854: PPUSH
19855: CALL_OW 264
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 42
19865: PUSH
19866: LD_INT 24
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: IN
19874: IFFALSE 19895
// points := [ 25 , 5 , 3 ] ;
19876: LD_ADDR_VAR 0 9
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 5
19886: PUSH
19887: LD_INT 3
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19895: LD_VAR 0 6
19899: PPUSH
19900: CALL_OW 264
19904: PUSH
19905: LD_INT 4
19907: PUSH
19908: LD_INT 43
19910: PUSH
19911: LD_INT 25
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: IN
19919: IFFALSE 19940
// points := [ 40 , 15 , 5 ] ;
19921: LD_ADDR_VAR 0 9
19925: PUSH
19926: LD_INT 40
19928: PUSH
19929: LD_INT 15
19931: PUSH
19932: LD_INT 5
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19940: LD_VAR 0 6
19944: PPUSH
19945: CALL_OW 264
19949: PUSH
19950: LD_INT 3
19952: PUSH
19953: LD_INT 23
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: IN
19960: IFFALSE 19981
// points := [ 7 , 25 , 8 ] ;
19962: LD_ADDR_VAR 0 9
19966: PUSH
19967: LD_INT 7
19969: PUSH
19970: LD_INT 25
19972: PUSH
19973: LD_INT 8
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19981: LD_VAR 0 6
19985: PPUSH
19986: CALL_OW 264
19990: PUSH
19991: LD_INT 5
19993: PUSH
19994: LD_INT 27
19996: PUSH
19997: LD_INT 44
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: IN
20005: IFFALSE 20026
// points := [ 14 , 50 , 16 ] ;
20007: LD_ADDR_VAR 0 9
20011: PUSH
20012: LD_INT 14
20014: PUSH
20015: LD_INT 50
20017: PUSH
20018: LD_INT 16
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20026: LD_VAR 0 6
20030: PPUSH
20031: CALL_OW 264
20035: PUSH
20036: LD_INT 6
20038: PUSH
20039: LD_INT 46
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: IN
20046: IFFALSE 20067
// points := [ 32 , 120 , 70 ] ;
20048: LD_ADDR_VAR 0 9
20052: PUSH
20053: LD_INT 32
20055: PUSH
20056: LD_INT 120
20058: PUSH
20059: LD_INT 70
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20067: LD_VAR 0 6
20071: PPUSH
20072: CALL_OW 264
20076: PUSH
20077: LD_INT 7
20079: PUSH
20080: LD_INT 28
20082: PUSH
20083: LD_INT 45
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: IN
20091: IFFALSE 20112
// points := [ 35 , 20 , 45 ] ;
20093: LD_ADDR_VAR 0 9
20097: PUSH
20098: LD_INT 35
20100: PUSH
20101: LD_INT 20
20103: PUSH
20104: LD_INT 45
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20112: LD_VAR 0 6
20116: PPUSH
20117: CALL_OW 264
20121: PUSH
20122: LD_INT 47
20124: PUSH
20125: EMPTY
20126: LIST
20127: IN
20128: IFFALSE 20149
// points := [ 67 , 45 , 75 ] ;
20130: LD_ADDR_VAR 0 9
20134: PUSH
20135: LD_INT 67
20137: PUSH
20138: LD_INT 45
20140: PUSH
20141: LD_INT 75
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20149: LD_VAR 0 6
20153: PPUSH
20154: CALL_OW 264
20158: PUSH
20159: LD_INT 26
20161: PUSH
20162: EMPTY
20163: LIST
20164: IN
20165: IFFALSE 20186
// points := [ 120 , 30 , 80 ] ;
20167: LD_ADDR_VAR 0 9
20171: PUSH
20172: LD_INT 120
20174: PUSH
20175: LD_INT 30
20177: PUSH
20178: LD_INT 80
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20186: LD_VAR 0 6
20190: PPUSH
20191: CALL_OW 264
20195: PUSH
20196: LD_INT 22
20198: PUSH
20199: EMPTY
20200: LIST
20201: IN
20202: IFFALSE 20223
// points := [ 40 , 1 , 1 ] ;
20204: LD_ADDR_VAR 0 9
20208: PUSH
20209: LD_INT 40
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20223: LD_VAR 0 6
20227: PPUSH
20228: CALL_OW 264
20232: PUSH
20233: LD_INT 29
20235: PUSH
20236: EMPTY
20237: LIST
20238: IN
20239: IFFALSE 20260
// points := [ 70 , 200 , 400 ] ;
20241: LD_ADDR_VAR 0 9
20245: PUSH
20246: LD_INT 70
20248: PUSH
20249: LD_INT 200
20251: PUSH
20252: LD_INT 400
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20260: LD_VAR 0 6
20264: PPUSH
20265: CALL_OW 264
20269: PUSH
20270: LD_INT 14
20272: PUSH
20273: LD_INT 53
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: IN
20280: IFFALSE 20301
// points := [ 40 , 10 , 20 ] ;
20282: LD_ADDR_VAR 0 9
20286: PUSH
20287: LD_INT 40
20289: PUSH
20290: LD_INT 10
20292: PUSH
20293: LD_INT 20
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20301: LD_VAR 0 6
20305: PPUSH
20306: CALL_OW 264
20310: PUSH
20311: LD_INT 9
20313: PUSH
20314: EMPTY
20315: LIST
20316: IN
20317: IFFALSE 20338
// points := [ 5 , 70 , 20 ] ;
20319: LD_ADDR_VAR 0 9
20323: PUSH
20324: LD_INT 5
20326: PUSH
20327: LD_INT 70
20329: PUSH
20330: LD_INT 20
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20338: LD_VAR 0 6
20342: PPUSH
20343: CALL_OW 264
20347: PUSH
20348: LD_INT 10
20350: PUSH
20351: EMPTY
20352: LIST
20353: IN
20354: IFFALSE 20375
// points := [ 35 , 110 , 70 ] ;
20356: LD_ADDR_VAR 0 9
20360: PUSH
20361: LD_INT 35
20363: PUSH
20364: LD_INT 110
20366: PUSH
20367: LD_INT 70
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20375: LD_VAR 0 6
20379: PPUSH
20380: CALL_OW 265
20384: PUSH
20385: LD_INT 25
20387: EQUAL
20388: IFFALSE 20409
// points := [ 80 , 65 , 100 ] ;
20390: LD_ADDR_VAR 0 9
20394: PUSH
20395: LD_INT 80
20397: PUSH
20398: LD_INT 65
20400: PUSH
20401: LD_INT 100
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20409: LD_VAR 0 6
20413: PPUSH
20414: CALL_OW 263
20418: PUSH
20419: LD_INT 1
20421: EQUAL
20422: IFFALSE 20457
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20424: LD_ADDR_VAR 0 10
20428: PUSH
20429: LD_VAR 0 10
20433: PUSH
20434: LD_VAR 0 6
20438: PPUSH
20439: CALL_OW 311
20443: PPUSH
20444: LD_INT 3
20446: PPUSH
20447: CALL_OW 259
20451: PUSH
20452: LD_INT 4
20454: MUL
20455: MUL
20456: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20457: LD_VAR 0 6
20461: PPUSH
20462: CALL_OW 263
20466: PUSH
20467: LD_INT 2
20469: EQUAL
20470: IFFALSE 20521
// begin j := IsControledBy ( i ) ;
20472: LD_ADDR_VAR 0 7
20476: PUSH
20477: LD_VAR 0 6
20481: PPUSH
20482: CALL_OW 312
20486: ST_TO_ADDR
// if j then
20487: LD_VAR 0 7
20491: IFFALSE 20521
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20493: LD_ADDR_VAR 0 10
20497: PUSH
20498: LD_VAR 0 10
20502: PUSH
20503: LD_VAR 0 7
20507: PPUSH
20508: LD_INT 3
20510: PPUSH
20511: CALL_OW 259
20515: PUSH
20516: LD_INT 3
20518: MUL
20519: MUL
20520: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20521: LD_VAR 0 6
20525: PPUSH
20526: CALL_OW 264
20530: PUSH
20531: LD_INT 5
20533: PUSH
20534: LD_INT 6
20536: PUSH
20537: LD_INT 46
20539: PUSH
20540: LD_INT 44
20542: PUSH
20543: LD_INT 47
20545: PUSH
20546: LD_INT 45
20548: PUSH
20549: LD_INT 28
20551: PUSH
20552: LD_INT 7
20554: PUSH
20555: LD_INT 27
20557: PUSH
20558: LD_INT 29
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: IN
20573: PUSH
20574: LD_VAR 0 1
20578: PPUSH
20579: LD_INT 52
20581: PPUSH
20582: CALL_OW 321
20586: PUSH
20587: LD_INT 2
20589: EQUAL
20590: AND
20591: IFFALSE 20608
// bpoints := bpoints * 1.2 ;
20593: LD_ADDR_VAR 0 10
20597: PUSH
20598: LD_VAR 0 10
20602: PUSH
20603: LD_REAL  1.20000000000000E+0000
20606: MUL
20607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20608: LD_VAR 0 6
20612: PPUSH
20613: CALL_OW 264
20617: PUSH
20618: LD_INT 6
20620: PUSH
20621: LD_INT 46
20623: PUSH
20624: LD_INT 47
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: IN
20632: IFFALSE 20649
// bpoints := bpoints * 1.2 ;
20634: LD_ADDR_VAR 0 10
20638: PUSH
20639: LD_VAR 0 10
20643: PUSH
20644: LD_REAL  1.20000000000000E+0000
20647: MUL
20648: ST_TO_ADDR
// end ; unit_building :
20649: GO 20663
20651: LD_INT 3
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20662
20659: POP
// ; end ;
20660: GO 20663
20662: POP
// for j = 1 to 3 do
20663: LD_ADDR_VAR 0 7
20667: PUSH
20668: DOUBLE
20669: LD_INT 1
20671: DEC
20672: ST_TO_ADDR
20673: LD_INT 3
20675: PUSH
20676: FOR_TO
20677: IFFALSE 20730
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20679: LD_ADDR_VAR 0 5
20683: PUSH
20684: LD_VAR 0 5
20688: PPUSH
20689: LD_VAR 0 7
20693: PPUSH
20694: LD_VAR 0 5
20698: PUSH
20699: LD_VAR 0 7
20703: ARRAY
20704: PUSH
20705: LD_VAR 0 9
20709: PUSH
20710: LD_VAR 0 7
20714: ARRAY
20715: PUSH
20716: LD_VAR 0 10
20720: MUL
20721: PLUS
20722: PPUSH
20723: CALL_OW 1
20727: ST_TO_ADDR
20728: GO 20676
20730: POP
20731: POP
// end ;
20732: GO 19215
20734: POP
20735: POP
// result := Replace ( result , 4 , tmp ) ;
20736: LD_ADDR_VAR 0 5
20740: PUSH
20741: LD_VAR 0 5
20745: PPUSH
20746: LD_INT 4
20748: PPUSH
20749: LD_VAR 0 8
20753: PPUSH
20754: CALL_OW 1
20758: ST_TO_ADDR
// end ;
20759: LD_VAR 0 5
20763: RET
// export function DangerAtRange ( unit , range ) ; begin
20764: LD_INT 0
20766: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 255
20781: PPUSH
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 250
20791: PPUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 251
20801: PPUSH
20802: LD_VAR 0 2
20806: PPUSH
20807: CALL 19067 0 4
20811: ST_TO_ADDR
// end ;
20812: LD_VAR 0 3
20816: RET
// export function DangerInArea ( side , area ) ; begin
20817: LD_INT 0
20819: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20820: LD_ADDR_VAR 0 3
20824: PUSH
20825: LD_VAR 0 2
20829: PPUSH
20830: LD_INT 81
20832: PUSH
20833: LD_VAR 0 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PPUSH
20842: CALL_OW 70
20846: ST_TO_ADDR
// end ;
20847: LD_VAR 0 3
20851: RET
// export function IsExtension ( b ) ; begin
20852: LD_INT 0
20854: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20855: LD_ADDR_VAR 0 2
20859: PUSH
20860: LD_VAR 0 1
20864: PUSH
20865: LD_INT 23
20867: PUSH
20868: LD_INT 20
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_INT 17
20876: PUSH
20877: LD_INT 24
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 19
20885: PUSH
20886: LD_INT 16
20888: PUSH
20889: LD_INT 25
20891: PUSH
20892: LD_INT 18
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: IN
20907: ST_TO_ADDR
// end ;
20908: LD_VAR 0 2
20912: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20913: LD_INT 0
20915: PPUSH
20916: PPUSH
20917: PPUSH
// result := [ ] ;
20918: LD_ADDR_VAR 0 3
20922: PUSH
20923: EMPTY
20924: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20925: LD_ADDR_VAR 0 4
20929: PUSH
20930: LD_VAR 0 2
20934: PPUSH
20935: LD_INT 21
20937: PUSH
20938: LD_INT 3
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PPUSH
20945: CALL_OW 70
20949: ST_TO_ADDR
// if not tmp then
20950: LD_VAR 0 4
20954: NOT
20955: IFFALSE 20959
// exit ;
20957: GO 21017
// for i in tmp do
20959: LD_ADDR_VAR 0 5
20963: PUSH
20964: LD_VAR 0 4
20968: PUSH
20969: FOR_IN
20970: IFFALSE 21005
// if GetBase ( i ) <> base then
20972: LD_VAR 0 5
20976: PPUSH
20977: CALL_OW 274
20981: PUSH
20982: LD_VAR 0 1
20986: NONEQUAL
20987: IFFALSE 21003
// ComLinkToBase ( base , i ) ;
20989: LD_VAR 0 1
20993: PPUSH
20994: LD_VAR 0 5
20998: PPUSH
20999: CALL_OW 169
21003: GO 20969
21005: POP
21006: POP
// result := tmp ;
21007: LD_ADDR_VAR 0 3
21011: PUSH
21012: LD_VAR 0 4
21016: ST_TO_ADDR
// end ;
21017: LD_VAR 0 3
21021: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21022: LD_INT 0
21024: PPUSH
21025: PPUSH
// if BuildingStatus ( b ) = bs_build then
21026: LD_VAR 0 2
21030: PPUSH
21031: CALL_OW 461
21035: PUSH
21036: LD_INT 1
21038: EQUAL
21039: IFFALSE 21099
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_STRING h
21048: PUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: CALL_OW 250
21058: PUSH
21059: LD_VAR 0 2
21063: PPUSH
21064: CALL_OW 251
21068: PUSH
21069: LD_VAR 0 2
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: PPUSH
21095: CALL_OW 446
// end ;
21099: LD_VAR 0 3
21103: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21104: LD_INT 0
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21112: LD_VAR 0 1
21116: NOT
21117: PUSH
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 263
21127: PUSH
21128: LD_INT 2
21130: EQUAL
21131: NOT
21132: OR
21133: IFFALSE 21137
// exit ;
21135: GO 21453
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21137: LD_ADDR_VAR 0 6
21141: PUSH
21142: LD_INT 22
21144: PUSH
21145: LD_VAR 0 1
21149: PPUSH
21150: CALL_OW 255
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 30
21164: PUSH
21165: LD_INT 36
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 34
21174: PUSH
21175: LD_INT 31
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PPUSH
21191: CALL_OW 69
21195: ST_TO_ADDR
// if not tmp then
21196: LD_VAR 0 6
21200: NOT
21201: IFFALSE 21205
// exit ;
21203: GO 21453
// result := [ ] ;
21205: LD_ADDR_VAR 0 2
21209: PUSH
21210: EMPTY
21211: ST_TO_ADDR
// for i in tmp do
21212: LD_ADDR_VAR 0 3
21216: PUSH
21217: LD_VAR 0 6
21221: PUSH
21222: FOR_IN
21223: IFFALSE 21294
// begin t := UnitsInside ( i ) ;
21225: LD_ADDR_VAR 0 4
21229: PUSH
21230: LD_VAR 0 3
21234: PPUSH
21235: CALL_OW 313
21239: ST_TO_ADDR
// if t then
21240: LD_VAR 0 4
21244: IFFALSE 21292
// for j in t do
21246: LD_ADDR_VAR 0 7
21250: PUSH
21251: LD_VAR 0 4
21255: PUSH
21256: FOR_IN
21257: IFFALSE 21290
// result := Insert ( result , result + 1 , j ) ;
21259: LD_ADDR_VAR 0 2
21263: PUSH
21264: LD_VAR 0 2
21268: PPUSH
21269: LD_VAR 0 2
21273: PUSH
21274: LD_INT 1
21276: PLUS
21277: PPUSH
21278: LD_VAR 0 7
21282: PPUSH
21283: CALL_OW 2
21287: ST_TO_ADDR
21288: GO 21256
21290: POP
21291: POP
// end ;
21292: GO 21222
21294: POP
21295: POP
// if not result then
21296: LD_VAR 0 2
21300: NOT
21301: IFFALSE 21305
// exit ;
21303: GO 21453
// mech := result [ 1 ] ;
21305: LD_ADDR_VAR 0 5
21309: PUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: ST_TO_ADDR
// if result > 1 then
21319: LD_VAR 0 2
21323: PUSH
21324: LD_INT 1
21326: GREATER
21327: IFFALSE 21439
// for i = 2 to result do
21329: LD_ADDR_VAR 0 3
21333: PUSH
21334: DOUBLE
21335: LD_INT 2
21337: DEC
21338: ST_TO_ADDR
21339: LD_VAR 0 2
21343: PUSH
21344: FOR_TO
21345: IFFALSE 21437
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21347: LD_ADDR_VAR 0 4
21351: PUSH
21352: LD_VAR 0 2
21356: PUSH
21357: LD_VAR 0 3
21361: ARRAY
21362: PPUSH
21363: LD_INT 3
21365: PPUSH
21366: CALL_OW 259
21370: PUSH
21371: LD_VAR 0 2
21375: PUSH
21376: LD_VAR 0 3
21380: ARRAY
21381: PPUSH
21382: CALL_OW 432
21386: MINUS
21387: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21388: LD_VAR 0 4
21392: PUSH
21393: LD_VAR 0 5
21397: PPUSH
21398: LD_INT 3
21400: PPUSH
21401: CALL_OW 259
21405: PUSH
21406: LD_VAR 0 5
21410: PPUSH
21411: CALL_OW 432
21415: MINUS
21416: GREATEREQUAL
21417: IFFALSE 21435
// mech := result [ i ] ;
21419: LD_ADDR_VAR 0 5
21423: PUSH
21424: LD_VAR 0 2
21428: PUSH
21429: LD_VAR 0 3
21433: ARRAY
21434: ST_TO_ADDR
// end ;
21435: GO 21344
21437: POP
21438: POP
// ComLinkTo ( vehicle , mech ) ;
21439: LD_VAR 0 1
21443: PPUSH
21444: LD_VAR 0 5
21448: PPUSH
21449: CALL_OW 135
// end ;
21453: LD_VAR 0 2
21457: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21458: LD_INT 0
21460: PPUSH
21461: PPUSH
21462: PPUSH
21463: PPUSH
21464: PPUSH
21465: PPUSH
21466: PPUSH
21467: PPUSH
21468: PPUSH
21469: PPUSH
21470: PPUSH
21471: PPUSH
21472: PPUSH
// result := [ ] ;
21473: LD_ADDR_VAR 0 7
21477: PUSH
21478: EMPTY
21479: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 266
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: IN
21500: NOT
21501: IFFALSE 21505
// exit ;
21503: GO 23136
// if name then
21505: LD_VAR 0 3
21509: IFFALSE 21525
// SetBName ( base_dep , name ) ;
21511: LD_VAR 0 1
21515: PPUSH
21516: LD_VAR 0 3
21520: PPUSH
21521: CALL_OW 500
// base := GetBase ( base_dep ) ;
21525: LD_ADDR_VAR 0 15
21529: PUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 274
21539: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21540: LD_ADDR_VAR 0 16
21544: PUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 255
21554: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21555: LD_ADDR_VAR 0 17
21559: PUSH
21560: LD_VAR 0 1
21564: PPUSH
21565: CALL_OW 248
21569: ST_TO_ADDR
// if sources then
21570: LD_VAR 0 5
21574: IFFALSE 21621
// for i = 1 to 3 do
21576: LD_ADDR_VAR 0 8
21580: PUSH
21581: DOUBLE
21582: LD_INT 1
21584: DEC
21585: ST_TO_ADDR
21586: LD_INT 3
21588: PUSH
21589: FOR_TO
21590: IFFALSE 21619
// AddResourceType ( base , i , sources [ i ] ) ;
21592: LD_VAR 0 15
21596: PPUSH
21597: LD_VAR 0 8
21601: PPUSH
21602: LD_VAR 0 5
21606: PUSH
21607: LD_VAR 0 8
21611: ARRAY
21612: PPUSH
21613: CALL_OW 276
21617: GO 21589
21619: POP
21620: POP
// buildings := GetBaseBuildings ( base , area ) ;
21621: LD_ADDR_VAR 0 18
21625: PUSH
21626: LD_VAR 0 15
21630: PPUSH
21631: LD_VAR 0 2
21635: PPUSH
21636: CALL 20913 0 2
21640: ST_TO_ADDR
// InitHc ;
21641: CALL_OW 19
// InitUc ;
21645: CALL_OW 18
// uc_side := side ;
21649: LD_ADDR_OWVAR 20
21653: PUSH
21654: LD_VAR 0 16
21658: ST_TO_ADDR
// uc_nation := nation ;
21659: LD_ADDR_OWVAR 21
21663: PUSH
21664: LD_VAR 0 17
21668: ST_TO_ADDR
// if buildings then
21669: LD_VAR 0 18
21673: IFFALSE 22995
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21675: LD_ADDR_VAR 0 19
21679: PUSH
21680: LD_VAR 0 18
21684: PPUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 30
21690: PUSH
21691: LD_INT 29
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 30
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: PPUSH
21713: CALL_OW 72
21717: ST_TO_ADDR
// if tmp then
21718: LD_VAR 0 19
21722: IFFALSE 21770
// for i in tmp do
21724: LD_ADDR_VAR 0 8
21728: PUSH
21729: LD_VAR 0 19
21733: PUSH
21734: FOR_IN
21735: IFFALSE 21768
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21737: LD_VAR 0 8
21741: PPUSH
21742: CALL_OW 250
21746: PPUSH
21747: LD_VAR 0 8
21751: PPUSH
21752: CALL_OW 251
21756: PPUSH
21757: LD_VAR 0 16
21761: PPUSH
21762: CALL_OW 441
21766: GO 21734
21768: POP
21769: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21770: LD_VAR 0 18
21774: PPUSH
21775: LD_INT 2
21777: PUSH
21778: LD_INT 30
21780: PUSH
21781: LD_INT 32
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 30
21790: PUSH
21791: LD_INT 33
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: LIST
21802: PPUSH
21803: CALL_OW 72
21807: IFFALSE 21895
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21809: LD_ADDR_VAR 0 8
21813: PUSH
21814: LD_VAR 0 18
21818: PPUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 30
21824: PUSH
21825: LD_INT 32
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 30
21834: PUSH
21835: LD_INT 33
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: PPUSH
21847: CALL_OW 72
21851: PUSH
21852: FOR_IN
21853: IFFALSE 21893
// begin if not GetBWeapon ( i ) then
21855: LD_VAR 0 8
21859: PPUSH
21860: CALL_OW 269
21864: NOT
21865: IFFALSE 21891
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21867: LD_VAR 0 8
21871: PPUSH
21872: LD_VAR 0 8
21876: PPUSH
21877: LD_VAR 0 2
21881: PPUSH
21882: CALL 23141 0 2
21886: PPUSH
21887: CALL_OW 431
// end ;
21891: GO 21852
21893: POP
21894: POP
// end ; for i = 1 to personel do
21895: LD_ADDR_VAR 0 8
21899: PUSH
21900: DOUBLE
21901: LD_INT 1
21903: DEC
21904: ST_TO_ADDR
21905: LD_VAR 0 6
21909: PUSH
21910: FOR_TO
21911: IFFALSE 22975
// begin if i > 4 then
21913: LD_VAR 0 8
21917: PUSH
21918: LD_INT 4
21920: GREATER
21921: IFFALSE 21925
// break ;
21923: GO 22975
// case i of 1 :
21925: LD_VAR 0 8
21929: PUSH
21930: LD_INT 1
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22018
21938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21939: LD_ADDR_VAR 0 12
21943: PUSH
21944: LD_VAR 0 18
21948: PPUSH
21949: LD_INT 22
21951: PUSH
21952: LD_VAR 0 16
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 58
21963: PUSH
21964: EMPTY
21965: LIST
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 32
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 30
21982: PUSH
21983: LD_INT 4
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 30
21992: PUSH
21993: LD_INT 5
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: PPUSH
22011: CALL_OW 72
22015: ST_TO_ADDR
22016: GO 22240
22018: LD_INT 2
22020: DOUBLE
22021: EQUAL
22022: IFTRUE 22026
22024: GO 22088
22026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22027: LD_ADDR_VAR 0 12
22031: PUSH
22032: LD_VAR 0 18
22036: PPUSH
22037: LD_INT 22
22039: PUSH
22040: LD_VAR 0 16
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 30
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PPUSH
22081: CALL_OW 72
22085: ST_TO_ADDR
22086: GO 22240
22088: LD_INT 3
22090: DOUBLE
22091: EQUAL
22092: IFTRUE 22096
22094: GO 22158
22096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22097: LD_ADDR_VAR 0 12
22101: PUSH
22102: LD_VAR 0 18
22106: PPUSH
22107: LD_INT 22
22109: PUSH
22110: LD_VAR 0 16
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: LD_INT 3
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PPUSH
22151: CALL_OW 72
22155: ST_TO_ADDR
22156: GO 22240
22158: LD_INT 4
22160: DOUBLE
22161: EQUAL
22162: IFTRUE 22166
22164: GO 22239
22166: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22167: LD_ADDR_VAR 0 12
22171: PUSH
22172: LD_VAR 0 18
22176: PPUSH
22177: LD_INT 22
22179: PUSH
22180: LD_VAR 0 16
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: LD_INT 30
22194: PUSH
22195: LD_INT 6
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 30
22204: PUSH
22205: LD_INT 7
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 30
22214: PUSH
22215: LD_INT 8
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PPUSH
22232: CALL_OW 72
22236: ST_TO_ADDR
22237: GO 22240
22239: POP
// if i = 1 then
22240: LD_VAR 0 8
22244: PUSH
22245: LD_INT 1
22247: EQUAL
22248: IFFALSE 22359
// begin tmp := [ ] ;
22250: LD_ADDR_VAR 0 19
22254: PUSH
22255: EMPTY
22256: ST_TO_ADDR
// for j in f do
22257: LD_ADDR_VAR 0 9
22261: PUSH
22262: LD_VAR 0 12
22266: PUSH
22267: FOR_IN
22268: IFFALSE 22341
// if GetBType ( j ) = b_bunker then
22270: LD_VAR 0 9
22274: PPUSH
22275: CALL_OW 266
22279: PUSH
22280: LD_INT 32
22282: EQUAL
22283: IFFALSE 22310
// tmp := Insert ( tmp , 1 , j ) else
22285: LD_ADDR_VAR 0 19
22289: PUSH
22290: LD_VAR 0 19
22294: PPUSH
22295: LD_INT 1
22297: PPUSH
22298: LD_VAR 0 9
22302: PPUSH
22303: CALL_OW 2
22307: ST_TO_ADDR
22308: GO 22339
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22310: LD_ADDR_VAR 0 19
22314: PUSH
22315: LD_VAR 0 19
22319: PPUSH
22320: LD_VAR 0 19
22324: PUSH
22325: LD_INT 1
22327: PLUS
22328: PPUSH
22329: LD_VAR 0 9
22333: PPUSH
22334: CALL_OW 2
22338: ST_TO_ADDR
22339: GO 22267
22341: POP
22342: POP
// if tmp then
22343: LD_VAR 0 19
22347: IFFALSE 22359
// f := tmp ;
22349: LD_ADDR_VAR 0 12
22353: PUSH
22354: LD_VAR 0 19
22358: ST_TO_ADDR
// end ; x := personel [ i ] ;
22359: LD_ADDR_VAR 0 13
22363: PUSH
22364: LD_VAR 0 6
22368: PUSH
22369: LD_VAR 0 8
22373: ARRAY
22374: ST_TO_ADDR
// if x = - 1 then
22375: LD_VAR 0 13
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: EQUAL
22384: IFFALSE 22593
// begin for j in f do
22386: LD_ADDR_VAR 0 9
22390: PUSH
22391: LD_VAR 0 12
22395: PUSH
22396: FOR_IN
22397: IFFALSE 22589
// repeat InitHc ;
22399: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22403: LD_VAR 0 9
22407: PPUSH
22408: CALL_OW 266
22412: PUSH
22413: LD_INT 5
22415: EQUAL
22416: IFFALSE 22486
// begin if UnitsInside ( j ) < 3 then
22418: LD_VAR 0 9
22422: PPUSH
22423: CALL_OW 313
22427: PUSH
22428: LD_INT 3
22430: LESS
22431: IFFALSE 22467
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22433: LD_INT 0
22435: PPUSH
22436: LD_INT 5
22438: PUSH
22439: LD_INT 8
22441: PUSH
22442: LD_INT 9
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: PUSH
22450: LD_VAR 0 17
22454: ARRAY
22455: PPUSH
22456: LD_VAR 0 4
22460: PPUSH
22461: CALL_OW 380
22465: GO 22484
// PrepareHuman ( false , i , skill ) ;
22467: LD_INT 0
22469: PPUSH
22470: LD_VAR 0 8
22474: PPUSH
22475: LD_VAR 0 4
22479: PPUSH
22480: CALL_OW 380
// end else
22484: GO 22503
// PrepareHuman ( false , i , skill ) ;
22486: LD_INT 0
22488: PPUSH
22489: LD_VAR 0 8
22493: PPUSH
22494: LD_VAR 0 4
22498: PPUSH
22499: CALL_OW 380
// un := CreateHuman ;
22503: LD_ADDR_VAR 0 14
22507: PUSH
22508: CALL_OW 44
22512: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22513: LD_ADDR_VAR 0 7
22517: PUSH
22518: LD_VAR 0 7
22522: PPUSH
22523: LD_INT 1
22525: PPUSH
22526: LD_VAR 0 14
22530: PPUSH
22531: CALL_OW 2
22535: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22536: LD_VAR 0 14
22540: PPUSH
22541: LD_VAR 0 9
22545: PPUSH
22546: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22550: LD_VAR 0 9
22554: PPUSH
22555: CALL_OW 313
22559: PUSH
22560: LD_INT 6
22562: EQUAL
22563: PUSH
22564: LD_VAR 0 9
22568: PPUSH
22569: CALL_OW 266
22573: PUSH
22574: LD_INT 32
22576: PUSH
22577: LD_INT 31
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: IN
22584: OR
22585: IFFALSE 22399
22587: GO 22396
22589: POP
22590: POP
// end else
22591: GO 22973
// for j = 1 to x do
22593: LD_ADDR_VAR 0 9
22597: PUSH
22598: DOUBLE
22599: LD_INT 1
22601: DEC
22602: ST_TO_ADDR
22603: LD_VAR 0 13
22607: PUSH
22608: FOR_TO
22609: IFFALSE 22971
// begin InitHc ;
22611: CALL_OW 19
// if not f then
22615: LD_VAR 0 12
22619: NOT
22620: IFFALSE 22709
// begin PrepareHuman ( false , i , skill ) ;
22622: LD_INT 0
22624: PPUSH
22625: LD_VAR 0 8
22629: PPUSH
22630: LD_VAR 0 4
22634: PPUSH
22635: CALL_OW 380
// un := CreateHuman ;
22639: LD_ADDR_VAR 0 14
22643: PUSH
22644: CALL_OW 44
22648: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22649: LD_ADDR_VAR 0 7
22653: PUSH
22654: LD_VAR 0 7
22658: PPUSH
22659: LD_INT 1
22661: PPUSH
22662: LD_VAR 0 14
22666: PPUSH
22667: CALL_OW 2
22671: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22672: LD_VAR 0 14
22676: PPUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 250
22686: PPUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 251
22696: PPUSH
22697: LD_INT 10
22699: PPUSH
22700: LD_INT 0
22702: PPUSH
22703: CALL_OW 50
// continue ;
22707: GO 22608
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22709: LD_VAR 0 12
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: PPUSH
22718: CALL_OW 313
22722: PUSH
22723: LD_VAR 0 12
22727: PUSH
22728: LD_INT 1
22730: ARRAY
22731: PPUSH
22732: CALL_OW 266
22736: PUSH
22737: LD_INT 32
22739: PUSH
22740: LD_INT 31
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: IN
22747: AND
22748: PUSH
22749: LD_VAR 0 12
22753: PUSH
22754: LD_INT 1
22756: ARRAY
22757: PPUSH
22758: CALL_OW 313
22762: PUSH
22763: LD_INT 6
22765: EQUAL
22766: OR
22767: IFFALSE 22787
// f := Delete ( f , 1 ) ;
22769: LD_ADDR_VAR 0 12
22773: PUSH
22774: LD_VAR 0 12
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL_OW 3
22786: ST_TO_ADDR
// if not f then
22787: LD_VAR 0 12
22791: NOT
22792: IFFALSE 22810
// begin x := x + 2 ;
22794: LD_ADDR_VAR 0 13
22798: PUSH
22799: LD_VAR 0 13
22803: PUSH
22804: LD_INT 2
22806: PLUS
22807: ST_TO_ADDR
// continue ;
22808: GO 22608
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22810: LD_VAR 0 12
22814: PUSH
22815: LD_INT 1
22817: ARRAY
22818: PPUSH
22819: CALL_OW 266
22823: PUSH
22824: LD_INT 5
22826: EQUAL
22827: IFFALSE 22901
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22829: LD_VAR 0 12
22833: PUSH
22834: LD_INT 1
22836: ARRAY
22837: PPUSH
22838: CALL_OW 313
22842: PUSH
22843: LD_INT 3
22845: LESS
22846: IFFALSE 22882
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22848: LD_INT 0
22850: PPUSH
22851: LD_INT 5
22853: PUSH
22854: LD_INT 8
22856: PUSH
22857: LD_INT 9
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: PUSH
22865: LD_VAR 0 17
22869: ARRAY
22870: PPUSH
22871: LD_VAR 0 4
22875: PPUSH
22876: CALL_OW 380
22880: GO 22899
// PrepareHuman ( false , i , skill ) ;
22882: LD_INT 0
22884: PPUSH
22885: LD_VAR 0 8
22889: PPUSH
22890: LD_VAR 0 4
22894: PPUSH
22895: CALL_OW 380
// end else
22899: GO 22918
// PrepareHuman ( false , i , skill ) ;
22901: LD_INT 0
22903: PPUSH
22904: LD_VAR 0 8
22908: PPUSH
22909: LD_VAR 0 4
22913: PPUSH
22914: CALL_OW 380
// un := CreateHuman ;
22918: LD_ADDR_VAR 0 14
22922: PUSH
22923: CALL_OW 44
22927: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22928: LD_ADDR_VAR 0 7
22932: PUSH
22933: LD_VAR 0 7
22937: PPUSH
22938: LD_INT 1
22940: PPUSH
22941: LD_VAR 0 14
22945: PPUSH
22946: CALL_OW 2
22950: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22951: LD_VAR 0 14
22955: PPUSH
22956: LD_VAR 0 12
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: PPUSH
22965: CALL_OW 52
// end ;
22969: GO 22608
22971: POP
22972: POP
// end ;
22973: GO 21910
22975: POP
22976: POP
// result := result ^ buildings ;
22977: LD_ADDR_VAR 0 7
22981: PUSH
22982: LD_VAR 0 7
22986: PUSH
22987: LD_VAR 0 18
22991: ADD
22992: ST_TO_ADDR
// end else
22993: GO 23136
// begin for i = 1 to personel do
22995: LD_ADDR_VAR 0 8
22999: PUSH
23000: DOUBLE
23001: LD_INT 1
23003: DEC
23004: ST_TO_ADDR
23005: LD_VAR 0 6
23009: PUSH
23010: FOR_TO
23011: IFFALSE 23134
// begin if i > 4 then
23013: LD_VAR 0 8
23017: PUSH
23018: LD_INT 4
23020: GREATER
23021: IFFALSE 23025
// break ;
23023: GO 23134
// x := personel [ i ] ;
23025: LD_ADDR_VAR 0 13
23029: PUSH
23030: LD_VAR 0 6
23034: PUSH
23035: LD_VAR 0 8
23039: ARRAY
23040: ST_TO_ADDR
// if x = - 1 then
23041: LD_VAR 0 13
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: EQUAL
23050: IFFALSE 23054
// continue ;
23052: GO 23010
// PrepareHuman ( false , i , skill ) ;
23054: LD_INT 0
23056: PPUSH
23057: LD_VAR 0 8
23061: PPUSH
23062: LD_VAR 0 4
23066: PPUSH
23067: CALL_OW 380
// un := CreateHuman ;
23071: LD_ADDR_VAR 0 14
23075: PUSH
23076: CALL_OW 44
23080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23081: LD_VAR 0 14
23085: PPUSH
23086: LD_VAR 0 1
23090: PPUSH
23091: CALL_OW 250
23095: PPUSH
23096: LD_VAR 0 1
23100: PPUSH
23101: CALL_OW 251
23105: PPUSH
23106: LD_INT 10
23108: PPUSH
23109: LD_INT 0
23111: PPUSH
23112: CALL_OW 50
// result := result ^ un ;
23116: LD_ADDR_VAR 0 7
23120: PUSH
23121: LD_VAR 0 7
23125: PUSH
23126: LD_VAR 0 14
23130: ADD
23131: ST_TO_ADDR
// end ;
23132: GO 23010
23134: POP
23135: POP
// end ; end ;
23136: LD_VAR 0 7
23140: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23141: LD_INT 0
23143: PPUSH
23144: PPUSH
23145: PPUSH
23146: PPUSH
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
// result := false ;
23159: LD_ADDR_VAR 0 3
23163: PUSH
23164: LD_INT 0
23166: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23167: LD_VAR 0 1
23171: NOT
23172: PUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 266
23182: PUSH
23183: LD_INT 32
23185: PUSH
23186: LD_INT 33
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: IN
23193: NOT
23194: OR
23195: IFFALSE 23199
// exit ;
23197: GO 24335
// nat := GetNation ( tower ) ;
23199: LD_ADDR_VAR 0 12
23203: PUSH
23204: LD_VAR 0 1
23208: PPUSH
23209: CALL_OW 248
23213: ST_TO_ADDR
// side := GetSide ( tower ) ;
23214: LD_ADDR_VAR 0 16
23218: PUSH
23219: LD_VAR 0 1
23223: PPUSH
23224: CALL_OW 255
23228: ST_TO_ADDR
// x := GetX ( tower ) ;
23229: LD_ADDR_VAR 0 10
23233: PUSH
23234: LD_VAR 0 1
23238: PPUSH
23239: CALL_OW 250
23243: ST_TO_ADDR
// y := GetY ( tower ) ;
23244: LD_ADDR_VAR 0 11
23248: PUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 251
23258: ST_TO_ADDR
// if not x or not y then
23259: LD_VAR 0 10
23263: NOT
23264: PUSH
23265: LD_VAR 0 11
23269: NOT
23270: OR
23271: IFFALSE 23275
// exit ;
23273: GO 24335
// weapon := 0 ;
23275: LD_ADDR_VAR 0 18
23279: PUSH
23280: LD_INT 0
23282: ST_TO_ADDR
// fac_list := [ ] ;
23283: LD_ADDR_VAR 0 17
23287: PUSH
23288: EMPTY
23289: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23290: LD_ADDR_VAR 0 6
23294: PUSH
23295: LD_VAR 0 1
23299: PPUSH
23300: CALL_OW 274
23304: PPUSH
23305: LD_VAR 0 2
23309: PPUSH
23310: CALL 20913 0 2
23314: PPUSH
23315: LD_INT 30
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PPUSH
23325: CALL_OW 72
23329: ST_TO_ADDR
// if not factories then
23330: LD_VAR 0 6
23334: NOT
23335: IFFALSE 23339
// exit ;
23337: GO 24335
// for i in factories do
23339: LD_ADDR_VAR 0 8
23343: PUSH
23344: LD_VAR 0 6
23348: PUSH
23349: FOR_IN
23350: IFFALSE 23375
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23352: LD_ADDR_VAR 0 17
23356: PUSH
23357: LD_VAR 0 17
23361: PUSH
23362: LD_VAR 0 8
23366: PPUSH
23367: CALL_OW 478
23371: UNION
23372: ST_TO_ADDR
23373: GO 23349
23375: POP
23376: POP
// if not fac_list then
23377: LD_VAR 0 17
23381: NOT
23382: IFFALSE 23386
// exit ;
23384: GO 24335
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23386: LD_ADDR_VAR 0 5
23390: PUSH
23391: LD_INT 4
23393: PUSH
23394: LD_INT 5
23396: PUSH
23397: LD_INT 9
23399: PUSH
23400: LD_INT 10
23402: PUSH
23403: LD_INT 6
23405: PUSH
23406: LD_INT 7
23408: PUSH
23409: LD_INT 11
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 27
23423: PUSH
23424: LD_INT 28
23426: PUSH
23427: LD_INT 26
23429: PUSH
23430: LD_INT 30
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 43
23441: PUSH
23442: LD_INT 44
23444: PUSH
23445: LD_INT 46
23447: PUSH
23448: LD_INT 45
23450: PUSH
23451: LD_INT 47
23453: PUSH
23454: LD_INT 49
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: PUSH
23470: LD_VAR 0 12
23474: ARRAY
23475: ST_TO_ADDR
// for i in list do
23476: LD_ADDR_VAR 0 8
23480: PUSH
23481: LD_VAR 0 5
23485: PUSH
23486: FOR_IN
23487: IFFALSE 23520
// if not i in fac_list then
23489: LD_VAR 0 8
23493: PUSH
23494: LD_VAR 0 17
23498: IN
23499: NOT
23500: IFFALSE 23518
// list := list diff i ;
23502: LD_ADDR_VAR 0 5
23506: PUSH
23507: LD_VAR 0 5
23511: PUSH
23512: LD_VAR 0 8
23516: DIFF
23517: ST_TO_ADDR
23518: GO 23486
23520: POP
23521: POP
// if not list then
23522: LD_VAR 0 5
23526: NOT
23527: IFFALSE 23531
// exit ;
23529: GO 24335
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23531: LD_VAR 0 12
23535: PUSH
23536: LD_INT 3
23538: EQUAL
23539: PUSH
23540: LD_INT 49
23542: PUSH
23543: LD_VAR 0 5
23547: IN
23548: AND
23549: PUSH
23550: LD_INT 31
23552: PPUSH
23553: LD_VAR 0 16
23557: PPUSH
23558: CALL_OW 321
23562: PUSH
23563: LD_INT 2
23565: EQUAL
23566: AND
23567: IFFALSE 23627
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23569: LD_INT 22
23571: PUSH
23572: LD_VAR 0 16
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 35
23583: PUSH
23584: LD_INT 49
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 91
23593: PUSH
23594: LD_VAR 0 1
23598: PUSH
23599: LD_INT 10
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: NOT
23617: IFFALSE 23627
// weapon := ru_time_lapser ;
23619: LD_ADDR_VAR 0 18
23623: PUSH
23624: LD_INT 49
23626: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23627: LD_VAR 0 12
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: IN
23642: PUSH
23643: LD_INT 11
23645: PUSH
23646: LD_VAR 0 5
23650: IN
23651: PUSH
23652: LD_INT 30
23654: PUSH
23655: LD_VAR 0 5
23659: IN
23660: OR
23661: AND
23662: PUSH
23663: LD_INT 6
23665: PPUSH
23666: LD_VAR 0 16
23670: PPUSH
23671: CALL_OW 321
23675: PUSH
23676: LD_INT 2
23678: EQUAL
23679: AND
23680: IFFALSE 23845
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23682: LD_INT 22
23684: PUSH
23685: LD_VAR 0 16
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: LD_INT 35
23699: PUSH
23700: LD_INT 11
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 35
23709: PUSH
23710: LD_INT 30
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 91
23724: PUSH
23725: LD_VAR 0 1
23729: PUSH
23730: LD_INT 18
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 69
23747: NOT
23748: PUSH
23749: LD_INT 22
23751: PUSH
23752: LD_VAR 0 16
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: LD_INT 30
23766: PUSH
23767: LD_INT 32
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 30
23776: PUSH
23777: LD_INT 33
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 91
23791: PUSH
23792: LD_VAR 0 1
23796: PUSH
23797: LD_INT 12
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: PUSH
23818: LD_INT 2
23820: GREATER
23821: AND
23822: IFFALSE 23845
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23824: LD_ADDR_VAR 0 18
23828: PUSH
23829: LD_INT 11
23831: PUSH
23832: LD_INT 30
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_VAR 0 12
23843: ARRAY
23844: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23845: LD_VAR 0 18
23849: NOT
23850: PUSH
23851: LD_INT 40
23853: PPUSH
23854: LD_VAR 0 16
23858: PPUSH
23859: CALL_OW 321
23863: PUSH
23864: LD_INT 2
23866: EQUAL
23867: AND
23868: PUSH
23869: LD_INT 7
23871: PUSH
23872: LD_VAR 0 5
23876: IN
23877: PUSH
23878: LD_INT 28
23880: PUSH
23881: LD_VAR 0 5
23885: IN
23886: OR
23887: PUSH
23888: LD_INT 45
23890: PUSH
23891: LD_VAR 0 5
23895: IN
23896: OR
23897: AND
23898: IFFALSE 24152
// begin hex := GetHexInfo ( x , y ) ;
23900: LD_ADDR_VAR 0 4
23904: PUSH
23905: LD_VAR 0 10
23909: PPUSH
23910: LD_VAR 0 11
23914: PPUSH
23915: CALL_OW 546
23919: ST_TO_ADDR
// if hex [ 1 ] then
23920: LD_VAR 0 4
23924: PUSH
23925: LD_INT 1
23927: ARRAY
23928: IFFALSE 23932
// exit ;
23930: GO 24335
// height := hex [ 2 ] ;
23932: LD_ADDR_VAR 0 15
23936: PUSH
23937: LD_VAR 0 4
23941: PUSH
23942: LD_INT 2
23944: ARRAY
23945: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23946: LD_ADDR_VAR 0 14
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 3
23959: PUSH
23960: LD_INT 5
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: ST_TO_ADDR
// for i in tmp do
23969: LD_ADDR_VAR 0 8
23973: PUSH
23974: LD_VAR 0 14
23978: PUSH
23979: FOR_IN
23980: IFFALSE 24150
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23982: LD_ADDR_VAR 0 9
23986: PUSH
23987: LD_VAR 0 10
23991: PPUSH
23992: LD_VAR 0 8
23996: PPUSH
23997: LD_INT 5
23999: PPUSH
24000: CALL_OW 272
24004: PUSH
24005: LD_VAR 0 11
24009: PPUSH
24010: LD_VAR 0 8
24014: PPUSH
24015: LD_INT 5
24017: PPUSH
24018: CALL_OW 273
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24027: LD_VAR 0 9
24031: PUSH
24032: LD_INT 1
24034: ARRAY
24035: PPUSH
24036: LD_VAR 0 9
24040: PUSH
24041: LD_INT 2
24043: ARRAY
24044: PPUSH
24045: CALL_OW 488
24049: IFFALSE 24148
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24051: LD_ADDR_VAR 0 4
24055: PUSH
24056: LD_VAR 0 9
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: PPUSH
24065: LD_VAR 0 9
24069: PUSH
24070: LD_INT 2
24072: ARRAY
24073: PPUSH
24074: CALL_OW 546
24078: ST_TO_ADDR
// if hex [ 1 ] then
24079: LD_VAR 0 4
24083: PUSH
24084: LD_INT 1
24086: ARRAY
24087: IFFALSE 24091
// continue ;
24089: GO 23979
// h := hex [ 2 ] ;
24091: LD_ADDR_VAR 0 13
24095: PUSH
24096: LD_VAR 0 4
24100: PUSH
24101: LD_INT 2
24103: ARRAY
24104: ST_TO_ADDR
// if h + 7 < height then
24105: LD_VAR 0 13
24109: PUSH
24110: LD_INT 7
24112: PLUS
24113: PUSH
24114: LD_VAR 0 15
24118: LESS
24119: IFFALSE 24148
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24121: LD_ADDR_VAR 0 18
24125: PUSH
24126: LD_INT 7
24128: PUSH
24129: LD_INT 28
24131: PUSH
24132: LD_INT 45
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_VAR 0 12
24144: ARRAY
24145: ST_TO_ADDR
// break ;
24146: GO 24150
// end ; end ; end ;
24148: GO 23979
24150: POP
24151: POP
// end ; if not weapon then
24152: LD_VAR 0 18
24156: NOT
24157: IFFALSE 24217
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24159: LD_ADDR_VAR 0 5
24163: PUSH
24164: LD_VAR 0 5
24168: PUSH
24169: LD_INT 11
24171: PUSH
24172: LD_INT 30
24174: PUSH
24175: LD_INT 49
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: DIFF
24183: ST_TO_ADDR
// if not list then
24184: LD_VAR 0 5
24188: NOT
24189: IFFALSE 24193
// exit ;
24191: GO 24335
// weapon := list [ rand ( 1 , list ) ] ;
24193: LD_ADDR_VAR 0 18
24197: PUSH
24198: LD_VAR 0 5
24202: PUSH
24203: LD_INT 1
24205: PPUSH
24206: LD_VAR 0 5
24210: PPUSH
24211: CALL_OW 12
24215: ARRAY
24216: ST_TO_ADDR
// end ; if weapon then
24217: LD_VAR 0 18
24221: IFFALSE 24335
// begin tmp := CostOfWeapon ( weapon ) ;
24223: LD_ADDR_VAR 0 14
24227: PUSH
24228: LD_VAR 0 18
24232: PPUSH
24233: CALL_OW 451
24237: ST_TO_ADDR
// j := GetBase ( tower ) ;
24238: LD_ADDR_VAR 0 9
24242: PUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 274
24252: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24253: LD_VAR 0 9
24257: PPUSH
24258: LD_INT 1
24260: PPUSH
24261: CALL_OW 275
24265: PUSH
24266: LD_VAR 0 14
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: GREATEREQUAL
24275: PUSH
24276: LD_VAR 0 9
24280: PPUSH
24281: LD_INT 2
24283: PPUSH
24284: CALL_OW 275
24288: PUSH
24289: LD_VAR 0 14
24293: PUSH
24294: LD_INT 2
24296: ARRAY
24297: GREATEREQUAL
24298: AND
24299: PUSH
24300: LD_VAR 0 9
24304: PPUSH
24305: LD_INT 3
24307: PPUSH
24308: CALL_OW 275
24312: PUSH
24313: LD_VAR 0 14
24317: PUSH
24318: LD_INT 3
24320: ARRAY
24321: GREATEREQUAL
24322: AND
24323: IFFALSE 24335
// result := weapon ;
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: LD_VAR 0 18
24334: ST_TO_ADDR
// end ; end ;
24335: LD_VAR 0 3
24339: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
// result := true ;
24344: LD_ADDR_VAR 0 3
24348: PUSH
24349: LD_INT 1
24351: ST_TO_ADDR
// if array1 = array2 then
24352: LD_VAR 0 1
24356: PUSH
24357: LD_VAR 0 2
24361: EQUAL
24362: IFFALSE 24422
// begin for i = 1 to array1 do
24364: LD_ADDR_VAR 0 4
24368: PUSH
24369: DOUBLE
24370: LD_INT 1
24372: DEC
24373: ST_TO_ADDR
24374: LD_VAR 0 1
24378: PUSH
24379: FOR_TO
24380: IFFALSE 24418
// if array1 [ i ] <> array2 [ i ] then
24382: LD_VAR 0 1
24386: PUSH
24387: LD_VAR 0 4
24391: ARRAY
24392: PUSH
24393: LD_VAR 0 2
24397: PUSH
24398: LD_VAR 0 4
24402: ARRAY
24403: NONEQUAL
24404: IFFALSE 24416
// begin result := false ;
24406: LD_ADDR_VAR 0 3
24410: PUSH
24411: LD_INT 0
24413: ST_TO_ADDR
// break ;
24414: GO 24418
// end ;
24416: GO 24379
24418: POP
24419: POP
// end else
24420: GO 24430
// result := false ;
24422: LD_ADDR_VAR 0 3
24426: PUSH
24427: LD_INT 0
24429: ST_TO_ADDR
// end ;
24430: LD_VAR 0 3
24434: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24435: LD_INT 0
24437: PPUSH
24438: PPUSH
24439: PPUSH
// pom := GetBase ( fac ) ;
24440: LD_ADDR_VAR 0 5
24444: PUSH
24445: LD_VAR 0 1
24449: PPUSH
24450: CALL_OW 274
24454: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24455: LD_ADDR_VAR 0 4
24459: PUSH
24460: LD_VAR 0 2
24464: PUSH
24465: LD_INT 1
24467: ARRAY
24468: PPUSH
24469: LD_VAR 0 2
24473: PUSH
24474: LD_INT 2
24476: ARRAY
24477: PPUSH
24478: LD_VAR 0 2
24482: PUSH
24483: LD_INT 3
24485: ARRAY
24486: PPUSH
24487: LD_VAR 0 2
24491: PUSH
24492: LD_INT 4
24494: ARRAY
24495: PPUSH
24496: CALL_OW 449
24500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24501: LD_ADDR_VAR 0 3
24505: PUSH
24506: LD_VAR 0 5
24510: PPUSH
24511: LD_INT 1
24513: PPUSH
24514: CALL_OW 275
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: GREATEREQUAL
24528: PUSH
24529: LD_VAR 0 5
24533: PPUSH
24534: LD_INT 2
24536: PPUSH
24537: CALL_OW 275
24541: PUSH
24542: LD_VAR 0 4
24546: PUSH
24547: LD_INT 2
24549: ARRAY
24550: GREATEREQUAL
24551: AND
24552: PUSH
24553: LD_VAR 0 5
24557: PPUSH
24558: LD_INT 3
24560: PPUSH
24561: CALL_OW 275
24565: PUSH
24566: LD_VAR 0 4
24570: PUSH
24571: LD_INT 3
24573: ARRAY
24574: GREATEREQUAL
24575: AND
24576: ST_TO_ADDR
// end ;
24577: LD_VAR 0 3
24581: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
// pom := GetBase ( building ) ;
24588: LD_ADDR_VAR 0 3
24592: PUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 274
24602: ST_TO_ADDR
// if not pom then
24603: LD_VAR 0 3
24607: NOT
24608: IFFALSE 24612
// exit ;
24610: GO 24782
// btype := GetBType ( building ) ;
24612: LD_ADDR_VAR 0 5
24616: PUSH
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL_OW 266
24626: ST_TO_ADDR
// if btype = b_armoury then
24627: LD_VAR 0 5
24631: PUSH
24632: LD_INT 4
24634: EQUAL
24635: IFFALSE 24645
// btype := b_barracks ;
24637: LD_ADDR_VAR 0 5
24641: PUSH
24642: LD_INT 5
24644: ST_TO_ADDR
// if btype = b_depot then
24645: LD_VAR 0 5
24649: PUSH
24650: LD_INT 0
24652: EQUAL
24653: IFFALSE 24663
// btype := b_warehouse ;
24655: LD_ADDR_VAR 0 5
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// if btype = b_workshop then
24663: LD_VAR 0 5
24667: PUSH
24668: LD_INT 2
24670: EQUAL
24671: IFFALSE 24681
// btype := b_factory ;
24673: LD_ADDR_VAR 0 5
24677: PUSH
24678: LD_INT 3
24680: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24681: LD_ADDR_VAR 0 4
24685: PUSH
24686: LD_VAR 0 5
24690: PPUSH
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 248
24700: PPUSH
24701: CALL_OW 450
24705: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24706: LD_ADDR_VAR 0 2
24710: PUSH
24711: LD_VAR 0 3
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: CALL_OW 275
24723: PUSH
24724: LD_VAR 0 4
24728: PUSH
24729: LD_INT 1
24731: ARRAY
24732: GREATEREQUAL
24733: PUSH
24734: LD_VAR 0 3
24738: PPUSH
24739: LD_INT 2
24741: PPUSH
24742: CALL_OW 275
24746: PUSH
24747: LD_VAR 0 4
24751: PUSH
24752: LD_INT 2
24754: ARRAY
24755: GREATEREQUAL
24756: AND
24757: PUSH
24758: LD_VAR 0 3
24762: PPUSH
24763: LD_INT 3
24765: PPUSH
24766: CALL_OW 275
24770: PUSH
24771: LD_VAR 0 4
24775: PUSH
24776: LD_INT 3
24778: ARRAY
24779: GREATEREQUAL
24780: AND
24781: ST_TO_ADDR
// end ;
24782: LD_VAR 0 2
24786: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24787: LD_INT 0
24789: PPUSH
24790: PPUSH
24791: PPUSH
// pom := GetBase ( building ) ;
24792: LD_ADDR_VAR 0 4
24796: PUSH
24797: LD_VAR 0 1
24801: PPUSH
24802: CALL_OW 274
24806: ST_TO_ADDR
// if not pom then
24807: LD_VAR 0 4
24811: NOT
24812: IFFALSE 24816
// exit ;
24814: GO 24917
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24816: LD_ADDR_VAR 0 5
24820: PUSH
24821: LD_VAR 0 2
24825: PPUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 248
24835: PPUSH
24836: CALL_OW 450
24840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24841: LD_ADDR_VAR 0 3
24845: PUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_INT 1
24853: PPUSH
24854: CALL_OW 275
24858: PUSH
24859: LD_VAR 0 5
24863: PUSH
24864: LD_INT 1
24866: ARRAY
24867: GREATEREQUAL
24868: PUSH
24869: LD_VAR 0 4
24873: PPUSH
24874: LD_INT 2
24876: PPUSH
24877: CALL_OW 275
24881: PUSH
24882: LD_VAR 0 5
24886: PUSH
24887: LD_INT 2
24889: ARRAY
24890: GREATEREQUAL
24891: AND
24892: PUSH
24893: LD_VAR 0 4
24897: PPUSH
24898: LD_INT 3
24900: PPUSH
24901: CALL_OW 275
24905: PUSH
24906: LD_VAR 0 5
24910: PUSH
24911: LD_INT 3
24913: ARRAY
24914: GREATEREQUAL
24915: AND
24916: ST_TO_ADDR
// end ;
24917: LD_VAR 0 3
24921: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24922: LD_INT 0
24924: PPUSH
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
// result := false ;
24934: LD_ADDR_VAR 0 6
24938: PUSH
24939: LD_INT 0
24941: ST_TO_ADDR
// if not base or not btype or not x or not y then
24942: LD_VAR 0 1
24946: NOT
24947: PUSH
24948: LD_VAR 0 2
24952: NOT
24953: OR
24954: PUSH
24955: LD_VAR 0 3
24959: NOT
24960: OR
24961: PUSH
24962: LD_VAR 0 4
24966: NOT
24967: OR
24968: IFFALSE 24972
// exit ;
24970: GO 25581
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24972: LD_ADDR_VAR 0 12
24976: PUSH
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_VAR 0 3
24986: PPUSH
24987: LD_VAR 0 4
24991: PPUSH
24992: LD_VAR 0 5
24996: PPUSH
24997: LD_VAR 0 1
25001: PUSH
25002: LD_INT 1
25004: ARRAY
25005: PPUSH
25006: CALL_OW 248
25010: PPUSH
25011: LD_INT 0
25013: PPUSH
25014: CALL 26418 0 6
25018: ST_TO_ADDR
// if not hexes then
25019: LD_VAR 0 12
25023: NOT
25024: IFFALSE 25028
// exit ;
25026: GO 25581
// for i = 1 to hexes do
25028: LD_ADDR_VAR 0 7
25032: PUSH
25033: DOUBLE
25034: LD_INT 1
25036: DEC
25037: ST_TO_ADDR
25038: LD_VAR 0 12
25042: PUSH
25043: FOR_TO
25044: IFFALSE 25579
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25046: LD_ADDR_VAR 0 11
25050: PUSH
25051: LD_VAR 0 12
25055: PUSH
25056: LD_VAR 0 7
25060: ARRAY
25061: PUSH
25062: LD_INT 1
25064: ARRAY
25065: PPUSH
25066: LD_VAR 0 12
25070: PUSH
25071: LD_VAR 0 7
25075: ARRAY
25076: PUSH
25077: LD_INT 2
25079: ARRAY
25080: PPUSH
25081: CALL_OW 428
25085: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25086: LD_VAR 0 12
25090: PUSH
25091: LD_VAR 0 7
25095: ARRAY
25096: PUSH
25097: LD_INT 1
25099: ARRAY
25100: PPUSH
25101: LD_VAR 0 12
25105: PUSH
25106: LD_VAR 0 7
25110: ARRAY
25111: PUSH
25112: LD_INT 2
25114: ARRAY
25115: PPUSH
25116: CALL_OW 351
25120: PUSH
25121: LD_VAR 0 12
25125: PUSH
25126: LD_VAR 0 7
25130: ARRAY
25131: PUSH
25132: LD_INT 1
25134: ARRAY
25135: PPUSH
25136: LD_VAR 0 12
25140: PUSH
25141: LD_VAR 0 7
25145: ARRAY
25146: PUSH
25147: LD_INT 2
25149: ARRAY
25150: PPUSH
25151: CALL_OW 488
25155: NOT
25156: OR
25157: PUSH
25158: LD_VAR 0 11
25162: PPUSH
25163: CALL_OW 247
25167: PUSH
25168: LD_INT 3
25170: EQUAL
25171: OR
25172: IFFALSE 25178
// exit ;
25174: POP
25175: POP
25176: GO 25581
// if not tmp or not tmp in base then
25178: LD_VAR 0 11
25182: NOT
25183: PUSH
25184: LD_VAR 0 11
25188: PUSH
25189: LD_VAR 0 1
25193: IN
25194: NOT
25195: OR
25196: IFFALSE 25200
// continue ;
25198: GO 25043
// result := true ;
25200: LD_ADDR_VAR 0 6
25204: PUSH
25205: LD_INT 1
25207: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25208: LD_ADDR_VAR 0 15
25212: PUSH
25213: LD_VAR 0 1
25217: PPUSH
25218: LD_INT 22
25220: PUSH
25221: LD_VAR 0 11
25225: PPUSH
25226: CALL_OW 255
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 30
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 30
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PPUSH
25267: CALL_OW 72
25271: ST_TO_ADDR
// if dep then
25272: LD_VAR 0 15
25276: IFFALSE 25412
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25278: LD_ADDR_VAR 0 14
25282: PUSH
25283: LD_VAR 0 15
25287: PUSH
25288: LD_INT 1
25290: ARRAY
25291: PPUSH
25292: CALL_OW 250
25296: PPUSH
25297: LD_VAR 0 15
25301: PUSH
25302: LD_INT 1
25304: ARRAY
25305: PPUSH
25306: CALL_OW 254
25310: PPUSH
25311: LD_INT 5
25313: PPUSH
25314: CALL_OW 272
25318: PUSH
25319: LD_VAR 0 15
25323: PUSH
25324: LD_INT 1
25326: ARRAY
25327: PPUSH
25328: CALL_OW 251
25332: PPUSH
25333: LD_VAR 0 15
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: PPUSH
25342: CALL_OW 254
25346: PPUSH
25347: LD_INT 5
25349: PPUSH
25350: CALL_OW 273
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25359: LD_VAR 0 14
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PPUSH
25368: LD_VAR 0 14
25372: PUSH
25373: LD_INT 2
25375: ARRAY
25376: PPUSH
25377: CALL_OW 488
25381: IFFALSE 25412
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25383: LD_VAR 0 11
25387: PPUSH
25388: LD_VAR 0 14
25392: PUSH
25393: LD_INT 1
25395: ARRAY
25396: PPUSH
25397: LD_VAR 0 14
25401: PUSH
25402: LD_INT 2
25404: ARRAY
25405: PPUSH
25406: CALL_OW 111
// continue ;
25410: GO 25043
// end ; end ; r := GetDir ( tmp ) ;
25412: LD_ADDR_VAR 0 13
25416: PUSH
25417: LD_VAR 0 11
25421: PPUSH
25422: CALL_OW 254
25426: ST_TO_ADDR
// if r = 5 then
25427: LD_VAR 0 13
25431: PUSH
25432: LD_INT 5
25434: EQUAL
25435: IFFALSE 25445
// r := 0 ;
25437: LD_ADDR_VAR 0 13
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
// for j = r to 5 do
25445: LD_ADDR_VAR 0 8
25449: PUSH
25450: DOUBLE
25451: LD_VAR 0 13
25455: DEC
25456: ST_TO_ADDR
25457: LD_INT 5
25459: PUSH
25460: FOR_TO
25461: IFFALSE 25575
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25463: LD_ADDR_VAR 0 9
25467: PUSH
25468: LD_VAR 0 11
25472: PPUSH
25473: CALL_OW 250
25477: PPUSH
25478: LD_VAR 0 8
25482: PPUSH
25483: LD_INT 2
25485: PPUSH
25486: CALL_OW 272
25490: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25491: LD_ADDR_VAR 0 10
25495: PUSH
25496: LD_VAR 0 11
25500: PPUSH
25501: CALL_OW 251
25505: PPUSH
25506: LD_VAR 0 8
25510: PPUSH
25511: LD_INT 2
25513: PPUSH
25514: CALL_OW 273
25518: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25519: LD_VAR 0 9
25523: PPUSH
25524: LD_VAR 0 10
25528: PPUSH
25529: CALL_OW 488
25533: PUSH
25534: LD_VAR 0 9
25538: PPUSH
25539: LD_VAR 0 10
25543: PPUSH
25544: CALL_OW 428
25548: NOT
25549: AND
25550: IFFALSE 25573
// begin ComMoveXY ( tmp , _x , _y ) ;
25552: LD_VAR 0 11
25556: PPUSH
25557: LD_VAR 0 9
25561: PPUSH
25562: LD_VAR 0 10
25566: PPUSH
25567: CALL_OW 111
// break ;
25571: GO 25575
// end ; end ;
25573: GO 25460
25575: POP
25576: POP
// end ;
25577: GO 25043
25579: POP
25580: POP
// end ;
25581: LD_VAR 0 6
25585: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
25593: PPUSH
25594: PPUSH
25595: PPUSH
25596: PPUSH
25597: PPUSH
// result := false ;
25598: LD_ADDR_VAR 0 6
25602: PUSH
25603: LD_INT 0
25605: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25606: LD_VAR 0 1
25610: NOT
25611: PUSH
25612: LD_VAR 0 1
25616: PPUSH
25617: CALL_OW 266
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: IN
25632: NOT
25633: OR
25634: PUSH
25635: LD_VAR 0 2
25639: NOT
25640: OR
25641: PUSH
25642: LD_VAR 0 5
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: LD_INT 4
25661: PUSH
25662: LD_INT 5
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: IN
25673: NOT
25674: OR
25675: PUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_VAR 0 4
25685: PPUSH
25686: CALL_OW 488
25690: NOT
25691: OR
25692: IFFALSE 25696
// exit ;
25694: GO 26413
// pom := GetBase ( depot ) ;
25696: LD_ADDR_VAR 0 10
25700: PUSH
25701: LD_VAR 0 1
25705: PPUSH
25706: CALL_OW 274
25710: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25711: LD_ADDR_VAR 0 11
25715: PUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_VAR 0 1
25725: PPUSH
25726: CALL_OW 248
25730: PPUSH
25731: CALL_OW 450
25735: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25736: LD_VAR 0 10
25740: PPUSH
25741: LD_INT 1
25743: PPUSH
25744: CALL_OW 275
25748: PUSH
25749: LD_VAR 0 11
25753: PUSH
25754: LD_INT 1
25756: ARRAY
25757: GREATEREQUAL
25758: PUSH
25759: LD_VAR 0 10
25763: PPUSH
25764: LD_INT 2
25766: PPUSH
25767: CALL_OW 275
25771: PUSH
25772: LD_VAR 0 11
25776: PUSH
25777: LD_INT 2
25779: ARRAY
25780: GREATEREQUAL
25781: AND
25782: PUSH
25783: LD_VAR 0 10
25787: PPUSH
25788: LD_INT 3
25790: PPUSH
25791: CALL_OW 275
25795: PUSH
25796: LD_VAR 0 11
25800: PUSH
25801: LD_INT 3
25803: ARRAY
25804: GREATEREQUAL
25805: AND
25806: NOT
25807: IFFALSE 25811
// exit ;
25809: GO 26413
// if GetBType ( depot ) = b_depot then
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 266
25820: PUSH
25821: LD_INT 0
25823: EQUAL
25824: IFFALSE 25836
// dist := 28 else
25826: LD_ADDR_VAR 0 14
25830: PUSH
25831: LD_INT 28
25833: ST_TO_ADDR
25834: GO 25844
// dist := 36 ;
25836: LD_ADDR_VAR 0 14
25840: PUSH
25841: LD_INT 36
25843: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25844: LD_VAR 0 1
25848: PPUSH
25849: LD_VAR 0 3
25853: PPUSH
25854: LD_VAR 0 4
25858: PPUSH
25859: CALL_OW 297
25863: PUSH
25864: LD_VAR 0 14
25868: GREATER
25869: IFFALSE 25873
// exit ;
25871: GO 26413
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25873: LD_ADDR_VAR 0 12
25877: PUSH
25878: LD_VAR 0 2
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: LD_VAR 0 4
25892: PPUSH
25893: LD_VAR 0 5
25897: PPUSH
25898: LD_VAR 0 1
25902: PPUSH
25903: CALL_OW 248
25907: PPUSH
25908: LD_INT 0
25910: PPUSH
25911: CALL 26418 0 6
25915: ST_TO_ADDR
// if not hexes then
25916: LD_VAR 0 12
25920: NOT
25921: IFFALSE 25925
// exit ;
25923: GO 26413
// hex := GetHexInfo ( x , y ) ;
25925: LD_ADDR_VAR 0 15
25929: PUSH
25930: LD_VAR 0 3
25934: PPUSH
25935: LD_VAR 0 4
25939: PPUSH
25940: CALL_OW 546
25944: ST_TO_ADDR
// if hex [ 1 ] then
25945: LD_VAR 0 15
25949: PUSH
25950: LD_INT 1
25952: ARRAY
25953: IFFALSE 25957
// exit ;
25955: GO 26413
// height := hex [ 2 ] ;
25957: LD_ADDR_VAR 0 13
25961: PUSH
25962: LD_VAR 0 15
25966: PUSH
25967: LD_INT 2
25969: ARRAY
25970: ST_TO_ADDR
// for i = 1 to hexes do
25971: LD_ADDR_VAR 0 7
25975: PUSH
25976: DOUBLE
25977: LD_INT 1
25979: DEC
25980: ST_TO_ADDR
25981: LD_VAR 0 12
25985: PUSH
25986: FOR_TO
25987: IFFALSE 26317
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25989: LD_VAR 0 12
25993: PUSH
25994: LD_VAR 0 7
25998: ARRAY
25999: PUSH
26000: LD_INT 1
26002: ARRAY
26003: PPUSH
26004: LD_VAR 0 12
26008: PUSH
26009: LD_VAR 0 7
26013: ARRAY
26014: PUSH
26015: LD_INT 2
26017: ARRAY
26018: PPUSH
26019: CALL_OW 488
26023: NOT
26024: PUSH
26025: LD_VAR 0 12
26029: PUSH
26030: LD_VAR 0 7
26034: ARRAY
26035: PUSH
26036: LD_INT 1
26038: ARRAY
26039: PPUSH
26040: LD_VAR 0 12
26044: PUSH
26045: LD_VAR 0 7
26049: ARRAY
26050: PUSH
26051: LD_INT 2
26053: ARRAY
26054: PPUSH
26055: CALL_OW 428
26059: PUSH
26060: LD_INT 0
26062: GREATER
26063: OR
26064: PUSH
26065: LD_VAR 0 12
26069: PUSH
26070: LD_VAR 0 7
26074: ARRAY
26075: PUSH
26076: LD_INT 1
26078: ARRAY
26079: PPUSH
26080: LD_VAR 0 12
26084: PUSH
26085: LD_VAR 0 7
26089: ARRAY
26090: PUSH
26091: LD_INT 2
26093: ARRAY
26094: PPUSH
26095: CALL_OW 351
26099: OR
26100: IFFALSE 26106
// exit ;
26102: POP
26103: POP
26104: GO 26413
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26106: LD_ADDR_VAR 0 8
26110: PUSH
26111: LD_VAR 0 12
26115: PUSH
26116: LD_VAR 0 7
26120: ARRAY
26121: PUSH
26122: LD_INT 1
26124: ARRAY
26125: PPUSH
26126: LD_VAR 0 12
26130: PUSH
26131: LD_VAR 0 7
26135: ARRAY
26136: PUSH
26137: LD_INT 2
26139: ARRAY
26140: PPUSH
26141: CALL_OW 546
26145: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26146: LD_VAR 0 8
26150: PUSH
26151: LD_INT 1
26153: ARRAY
26154: PUSH
26155: LD_VAR 0 8
26159: PUSH
26160: LD_INT 2
26162: ARRAY
26163: PUSH
26164: LD_VAR 0 13
26168: PUSH
26169: LD_INT 2
26171: PLUS
26172: GREATER
26173: OR
26174: PUSH
26175: LD_VAR 0 8
26179: PUSH
26180: LD_INT 2
26182: ARRAY
26183: PUSH
26184: LD_VAR 0 13
26188: PUSH
26189: LD_INT 2
26191: MINUS
26192: LESS
26193: OR
26194: PUSH
26195: LD_VAR 0 8
26199: PUSH
26200: LD_INT 3
26202: ARRAY
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 8
26209: PUSH
26210: LD_INT 9
26212: PUSH
26213: LD_INT 10
26215: PUSH
26216: LD_INT 11
26218: PUSH
26219: LD_INT 12
26221: PUSH
26222: LD_INT 13
26224: PUSH
26225: LD_INT 16
26227: PUSH
26228: LD_INT 17
26230: PUSH
26231: LD_INT 18
26233: PUSH
26234: LD_INT 19
26236: PUSH
26237: LD_INT 20
26239: PUSH
26240: LD_INT 21
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: IN
26258: NOT
26259: OR
26260: PUSH
26261: LD_VAR 0 8
26265: PUSH
26266: LD_INT 5
26268: ARRAY
26269: NOT
26270: OR
26271: PUSH
26272: LD_VAR 0 8
26276: PUSH
26277: LD_INT 6
26279: ARRAY
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: LD_INT 7
26289: PUSH
26290: LD_INT 9
26292: PUSH
26293: LD_INT 10
26295: PUSH
26296: LD_INT 11
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: IN
26307: NOT
26308: OR
26309: IFFALSE 26315
// exit ;
26311: POP
26312: POP
26313: GO 26413
// end ;
26315: GO 25986
26317: POP
26318: POP
// side := GetSide ( depot ) ;
26319: LD_ADDR_VAR 0 9
26323: PUSH
26324: LD_VAR 0 1
26328: PPUSH
26329: CALL_OW 255
26333: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26334: LD_VAR 0 9
26338: PPUSH
26339: LD_VAR 0 3
26343: PPUSH
26344: LD_VAR 0 4
26348: PPUSH
26349: LD_INT 20
26351: PPUSH
26352: CALL 19067 0 4
26356: PUSH
26357: LD_INT 4
26359: ARRAY
26360: IFFALSE 26364
// exit ;
26362: GO 26413
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26364: LD_VAR 0 2
26368: PUSH
26369: LD_INT 29
26371: PUSH
26372: LD_INT 30
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: IN
26379: PUSH
26380: LD_VAR 0 3
26384: PPUSH
26385: LD_VAR 0 4
26389: PPUSH
26390: LD_VAR 0 9
26394: PPUSH
26395: CALL_OW 440
26399: NOT
26400: AND
26401: IFFALSE 26405
// exit ;
26403: GO 26413
// result := true ;
26405: LD_ADDR_VAR 0 6
26409: PUSH
26410: LD_INT 1
26412: ST_TO_ADDR
// end ;
26413: LD_VAR 0 6
26417: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
26427: PPUSH
26428: PPUSH
26429: PPUSH
26430: PPUSH
26431: PPUSH
26432: PPUSH
26433: PPUSH
26434: PPUSH
26435: PPUSH
26436: PPUSH
26437: PPUSH
26438: PPUSH
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
26443: PPUSH
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
26452: PPUSH
26453: PPUSH
26454: PPUSH
26455: PPUSH
26456: PPUSH
26457: PPUSH
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
26470: PPUSH
26471: PPUSH
26472: PPUSH
26473: PPUSH
26474: PPUSH
26475: PPUSH
26476: PPUSH
26477: PPUSH
// result = [ ] ;
26478: LD_ADDR_VAR 0 7
26482: PUSH
26483: EMPTY
26484: ST_TO_ADDR
// temp_list = [ ] ;
26485: LD_ADDR_VAR 0 9
26489: PUSH
26490: EMPTY
26491: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26492: LD_VAR 0 4
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: LD_INT 3
26508: PUSH
26509: LD_INT 4
26511: PUSH
26512: LD_INT 5
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: IN
26523: NOT
26524: PUSH
26525: LD_VAR 0 1
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: IN
26540: PUSH
26541: LD_VAR 0 5
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: LD_INT 3
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: IN
26560: NOT
26561: AND
26562: OR
26563: IFFALSE 26567
// exit ;
26565: GO 44958
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26567: LD_VAR 0 1
26571: PUSH
26572: LD_INT 6
26574: PUSH
26575: LD_INT 7
26577: PUSH
26578: LD_INT 8
26580: PUSH
26581: LD_INT 13
26583: PUSH
26584: LD_INT 12
26586: PUSH
26587: LD_INT 15
26589: PUSH
26590: LD_INT 11
26592: PUSH
26593: LD_INT 14
26595: PUSH
26596: LD_INT 10
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: IN
26610: IFFALSE 26620
// btype = b_lab ;
26612: LD_ADDR_VAR 0 1
26616: PUSH
26617: LD_INT 6
26619: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26620: LD_VAR 0 6
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: IN
26639: NOT
26640: PUSH
26641: LD_VAR 0 1
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: LD_INT 3
26657: PUSH
26658: LD_INT 6
26660: PUSH
26661: LD_INT 36
26663: PUSH
26664: LD_INT 4
26666: PUSH
26667: LD_INT 5
26669: PUSH
26670: LD_INT 31
26672: PUSH
26673: LD_INT 32
26675: PUSH
26676: LD_INT 33
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: IN
26692: NOT
26693: PUSH
26694: LD_VAR 0 6
26698: PUSH
26699: LD_INT 1
26701: EQUAL
26702: AND
26703: OR
26704: PUSH
26705: LD_VAR 0 1
26709: PUSH
26710: LD_INT 2
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: IN
26720: NOT
26721: PUSH
26722: LD_VAR 0 6
26726: PUSH
26727: LD_INT 2
26729: EQUAL
26730: AND
26731: OR
26732: IFFALSE 26742
// mode = 0 ;
26734: LD_ADDR_VAR 0 6
26738: PUSH
26739: LD_INT 0
26741: ST_TO_ADDR
// case mode of 0 :
26742: LD_VAR 0 6
26746: PUSH
26747: LD_INT 0
26749: DOUBLE
26750: EQUAL
26751: IFTRUE 26755
26753: GO 38208
26755: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26756: LD_ADDR_VAR 0 11
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26949: LD_ADDR_VAR 0 12
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 2
27072: NEG
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 3
27106: NEG
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 3
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27145: LD_ADDR_VAR 0 13
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: NEG
27293: PUSH
27294: LD_INT 3
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: NEG
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 3
27316: NEG
27317: PUSH
27318: LD_INT 3
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27344: LD_ADDR_VAR 0 14
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 2
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 3
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 3
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: LD_INT 2
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27540: LD_ADDR_VAR 0 15
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27733: LD_ADDR_VAR 0 16
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 3
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: LD_INT 3
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 3
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27926: LD_ADDR_VAR 0 17
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 2
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 2
28102: NEG
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28156: LD_ADDR_VAR 0 18
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: NEG
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28386: LD_ADDR_VAR 0 19
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28616: LD_ADDR_VAR 0 20
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: NEG
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28846: LD_ADDR_VAR 0 21
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29076: LD_ADDR_VAR 0 22
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29306: LD_ADDR_VAR 0 23
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 2
29482: NEG
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: LD_INT 3
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: LD_INT 3
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 2
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29586: LD_ADDR_VAR 0 24
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 2
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29862: LD_ADDR_VAR 0 25
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: NEG
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30136: LD_ADDR_VAR 0 26
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 2
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 2
30378: NEG
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30412: LD_ADDR_VAR 0 27
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: LD_INT 2
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: LD_INT 2
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: NEG
30612: PUSH
30613: LD_INT 2
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: NEG
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 3
30657: NEG
30658: PUSH
30659: LD_INT 2
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30692: LD_ADDR_VAR 0 28
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: LD_INT 3
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 3
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: LD_INT 2
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30974: LD_ADDR_VAR 0 29
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: LD_INT 2
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: NEG
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31253: LD_ADDR_VAR 0 30
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: LD_INT 3
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31531: LD_ADDR_VAR 0 31
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 2
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: NEG
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 3
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31809: LD_ADDR_VAR 0 32
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: NEG
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32087: LD_ADDR_VAR 0 33
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 2
32242: NEG
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 3
32331: NEG
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32366: LD_ADDR_VAR 0 34
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 3
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32646: LD_ADDR_VAR 0 35
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32758: LD_ADDR_VAR 0 36
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32870: LD_ADDR_VAR 0 37
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32982: LD_ADDR_VAR 0 38
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33094: LD_ADDR_VAR 0 39
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 2
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33206: LD_ADDR_VAR 0 40
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33318: LD_ADDR_VAR 0 41
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: LD_INT 3
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: NEG
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 3
33627: NEG
33628: PUSH
33629: LD_INT 3
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33668: LD_ADDR_VAR 0 42
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: NEG
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 3
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: LD_INT 3
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 3
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: LD_INT 3
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 3
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: LD_INT 3
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34018: LD_ADDR_VAR 0 43
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 3
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: LD_INT 3
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 3
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34366: LD_ADDR_VAR 0 44
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: LD_INT 3
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 3
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 3
34640: NEG
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 3
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 3
34663: NEG
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 3
34675: NEG
34676: PUSH
34677: LD_INT 3
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34716: LD_ADDR_VAR 0 45
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 3
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 3
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 3
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 3
35013: NEG
35014: PUSH
35015: LD_INT 2
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 3
35025: NEG
35026: PUSH
35027: LD_INT 3
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35066: LD_ADDR_VAR 0 46
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: LD_INT 3
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35414: LD_ADDR_VAR 0 47
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 2
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35565: LD_ADDR_VAR 0 48
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35712: LD_ADDR_VAR 0 49
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 2
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35856: LD_ADDR_VAR 0 50
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36000: LD_ADDR_VAR 0 51
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36147: LD_ADDR_VAR 0 52
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 2
36251: NEG
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36298: LD_ADDR_VAR 0 53
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36528: LD_ADDR_VAR 0 54
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: LD_INT 2
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36758: LD_ADDR_VAR 0 55
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36988: LD_ADDR_VAR 0 56
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37218: LD_ADDR_VAR 0 57
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 2
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37448: LD_ADDR_VAR 0 58
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 2
37624: NEG
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: NEG
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 2
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37678: LD_ADDR_VAR 0 59
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37766: LD_ADDR_VAR 0 60
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37854: LD_ADDR_VAR 0 61
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37942: LD_ADDR_VAR 0 62
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38030: LD_ADDR_VAR 0 63
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38118: LD_ADDR_VAR 0 64
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// end ; 1 :
38206: GO 44103
38208: LD_INT 1
38210: DOUBLE
38211: EQUAL
38212: IFTRUE 38216
38214: GO 40839
38216: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38217: LD_ADDR_VAR 0 11
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 3
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 3
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38261: LD_ADDR_VAR 0 12
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38302: LD_ADDR_VAR 0 13
38306: PUSH
38307: LD_INT 3
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 3
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38342: LD_ADDR_VAR 0 14
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 3
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38383: LD_ADDR_VAR 0 15
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 3
38412: NEG
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38427: LD_ADDR_VAR 0 16
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: LD_INT 3
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: NEG
38459: PUSH
38460: LD_INT 3
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38473: LD_ADDR_VAR 0 17
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38517: LD_ADDR_VAR 0 18
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38558: LD_ADDR_VAR 0 19
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 3
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38598: LD_ADDR_VAR 0 20
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 3
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 3
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38639: LD_ADDR_VAR 0 21
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 3
38657: NEG
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38683: LD_ADDR_VAR 0 22
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38729: LD_ADDR_VAR 0 23
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 3
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 4
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38773: LD_ADDR_VAR 0 24
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 3
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 4
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38814: LD_ADDR_VAR 0 25
38818: PUSH
38819: LD_INT 3
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 4
38831: PUSH
38832: LD_INT 3
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: LD_INT 4
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38854: LD_ADDR_VAR 0 26
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 4
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: LIST
38894: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38895: LD_ADDR_VAR 0 27
38899: PUSH
38900: LD_INT 3
38902: NEG
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 3
38913: NEG
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 4
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38939: LD_ADDR_VAR 0 28
38943: PUSH
38944: LD_INT 3
38946: NEG
38947: PUSH
38948: LD_INT 3
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: LD_INT 4
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 4
38970: NEG
38971: PUSH
38972: LD_INT 3
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38985: LD_ADDR_VAR 0 29
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 3
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 4
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 4
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 5
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 5
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: LD_INT 4
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 6
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 6
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 5
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39140: LD_ADDR_VAR 0 30
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 3
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 4
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 4
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 5
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 5
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 5
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 6
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 6
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39283: LD_ADDR_VAR 0 31
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 4
39320: PUSH
39321: LD_INT 3
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 4
39330: PUSH
39331: LD_INT 4
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: LD_INT 4
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 5
39350: PUSH
39351: LD_INT 4
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 5
39360: PUSH
39361: LD_INT 5
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 4
39370: PUSH
39371: LD_INT 5
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 6
39380: PUSH
39381: LD_INT 5
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 6
39390: PUSH
39391: LD_INT 6
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: LD_INT 6
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39422: LD_ADDR_VAR 0 32
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 3
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 3
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 4
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 5
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 5
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 6
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 6
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: LD_INT 5
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39565: LD_ADDR_VAR 0 33
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 3
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 4
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 4
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 5
39651: NEG
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 5
39662: NEG
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 5
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 6
39685: NEG
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 6
39696: NEG
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39720: LD_ADDR_VAR 0 34
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: LD_INT 3
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 3
39739: NEG
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 3
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: LD_INT 4
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 4
39775: NEG
39776: PUSH
39777: LD_INT 3
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 4
39787: NEG
39788: PUSH
39789: LD_INT 4
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 4
39799: NEG
39800: PUSH
39801: LD_INT 5
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 5
39811: NEG
39812: PUSH
39813: LD_INT 4
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 5
39823: NEG
39824: PUSH
39825: LD_INT 5
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 5
39835: NEG
39836: PUSH
39837: LD_INT 6
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 6
39847: NEG
39848: PUSH
39849: LD_INT 5
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 6
39859: NEG
39860: PUSH
39861: LD_INT 6
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39883: LD_ADDR_VAR 0 41
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 3
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39927: LD_ADDR_VAR 0 42
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39968: LD_ADDR_VAR 0 43
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40008: LD_ADDR_VAR 0 44
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 3
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40049: LD_ADDR_VAR 0 45
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40093: LD_ADDR_VAR 0 46
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 3
40124: NEG
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40139: LD_ADDR_VAR 0 47
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: LD_INT 3
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 3
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40172: LD_ADDR_VAR 0 48
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40203: LD_ADDR_VAR 0 49
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40232: LD_ADDR_VAR 0 50
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 3
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 3
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40261: LD_ADDR_VAR 0 51
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40292: LD_ADDR_VAR 0 52
40296: PUSH
40297: LD_INT 3
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 3
40311: NEG
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40325: LD_ADDR_VAR 0 53
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 3
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 3
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40369: LD_ADDR_VAR 0 54
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 3
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 3
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40410: LD_ADDR_VAR 0 55
40414: PUSH
40415: LD_INT 3
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 3
40427: PUSH
40428: LD_INT 3
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40450: LD_ADDR_VAR 0 56
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40491: LD_ADDR_VAR 0 57
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: NEG
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: LIST
40534: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40535: LD_ADDR_VAR 0 58
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 3
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 3
40566: NEG
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40581: LD_ADDR_VAR 0 59
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40625: LD_ADDR_VAR 0 60
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40666: LD_ADDR_VAR 0 61
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40706: LD_ADDR_VAR 0 62
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40747: LD_ADDR_VAR 0 63
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40791: LD_ADDR_VAR 0 64
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: ST_TO_ADDR
// end ; 2 :
40837: GO 44103
40839: LD_INT 2
40841: DOUBLE
40842: EQUAL
40843: IFTRUE 40847
40845: GO 44102
40847: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40848: LD_ADDR_VAR 0 29
40852: PUSH
40853: LD_INT 4
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 4
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 5
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 5
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 4
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 3
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 5
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 4
40968: PUSH
40969: LD_INT 3
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 4
40978: PUSH
40979: LD_INT 4
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: LD_INT 4
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 4
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 4
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 4
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 3
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 4
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 5
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 4
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: LD_INT 5
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: LD_INT 3
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 3
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 4
41187: NEG
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 4
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 4
41210: NEG
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 4
41233: NEG
41234: PUSH
41235: LD_INT 4
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 4
41245: NEG
41246: PUSH
41247: LD_INT 5
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 3
41257: NEG
41258: PUSH
41259: LD_INT 4
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 4
41281: NEG
41282: PUSH
41283: LD_INT 3
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 5
41293: NEG
41294: PUSH
41295: LD_INT 4
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 5
41305: NEG
41306: PUSH
41307: LD_INT 5
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 3
41317: NEG
41318: PUSH
41319: LD_INT 5
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 5
41329: NEG
41330: PUSH
41331: LD_INT 3
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41386: LD_ADDR_VAR 0 30
41390: PUSH
41391: LD_INT 4
41393: PUSH
41394: LD_INT 4
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 4
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 5
41413: PUSH
41414: LD_INT 4
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 5
41423: PUSH
41424: LD_INT 5
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 4
41433: PUSH
41434: LD_INT 5
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: LD_INT 4
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 5
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: LD_INT 5
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 3
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 4
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 4
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 4
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 4
41576: NEG
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 4
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 4
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 5
41632: NEG
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 5
41643: NEG
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 5
41655: NEG
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: NEG
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: LD_INT 3
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 4
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 3
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 4
41738: NEG
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 4
41750: NEG
41751: PUSH
41752: LD_INT 4
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: LD_INT 4
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 4
41774: NEG
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 4
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 5
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 4
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 3
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 4
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 5
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 3
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: LD_INT 5
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41933: LD_ADDR_VAR 0 31
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 4
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 4
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 5
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 5
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: LD_INT 4
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 5
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 3
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 3
42033: NEG
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 4
42089: NEG
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 4
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 4
42112: NEG
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 4
42135: NEG
42136: PUSH
42137: LD_INT 4
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 4
42147: NEG
42148: PUSH
42149: LD_INT 5
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: NEG
42160: PUSH
42161: LD_INT 4
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 3
42171: NEG
42172: PUSH
42173: LD_INT 3
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 4
42183: NEG
42184: PUSH
42185: LD_INT 3
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 5
42195: NEG
42196: PUSH
42197: LD_INT 4
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 5
42207: NEG
42208: PUSH
42209: LD_INT 5
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: LD_INT 5
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 5
42231: NEG
42232: PUSH
42233: LD_INT 3
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 4
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 3
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 4
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 4
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 4
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 4
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 5
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 3
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 5
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42483: LD_ADDR_VAR 0 32
42487: PUSH
42488: LD_INT 4
42490: NEG
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 4
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 4
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 5
42546: NEG
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 5
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 5
42569: NEG
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 3
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: NEG
42605: PUSH
42606: LD_INT 4
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: NEG
42617: PUSH
42618: LD_INT 3
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 4
42652: NEG
42653: PUSH
42654: LD_INT 3
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 4
42664: NEG
42665: PUSH
42666: LD_INT 4
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 4
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 4
42688: NEG
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 4
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 5
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 4
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 4
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 5
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: LD_INT 5
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 4
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 4
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 3
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 4
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 4
42895: PUSH
42896: LD_INT 4
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 4
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 5
42915: PUSH
42916: LD_INT 4
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 5
42925: PUSH
42926: LD_INT 5
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 4
42935: PUSH
42936: LD_INT 5
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: LD_INT 4
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: LD_INT 3
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 5
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 5
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43030: LD_ADDR_VAR 0 33
43034: PUSH
43035: LD_INT 4
43037: NEG
43038: PUSH
43039: LD_INT 4
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 4
43049: NEG
43050: PUSH
43051: LD_INT 5
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: LD_INT 4
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: LD_INT 3
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 4
43085: NEG
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 5
43097: NEG
43098: PUSH
43099: LD_INT 4
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 5
43109: NEG
43110: PUSH
43111: LD_INT 5
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: LD_INT 5
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 5
43133: NEG
43134: PUSH
43135: LD_INT 3
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 4
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 4
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: LD_INT 4
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 4
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 4
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 5
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 5
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 4
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 5
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 4
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 4
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 4
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 4
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 4
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 4
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 5
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 4
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43568: LD_ADDR_VAR 0 34
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 4
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 5
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 4
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 3
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 4
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 5
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 5
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 3
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 3
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 4
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 4
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 4
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 4
43770: PUSH
43771: LD_INT 4
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 4
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 5
43790: PUSH
43791: LD_INT 4
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 5
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 4
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: LD_INT 4
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 5
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: LD_INT 5
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 4
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 4
43953: NEG
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 4
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 3
43976: NEG
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 3
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 4
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 5
44009: NEG
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 5
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 5
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 3
44044: NEG
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// end ; end ;
44100: GO 44103
44102: POP
// case btype of b_depot , b_warehouse :
44103: LD_VAR 0 1
44107: PUSH
44108: LD_INT 0
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44122
44114: LD_INT 1
44116: DOUBLE
44117: EQUAL
44118: IFTRUE 44122
44120: GO 44323
44122: POP
// case nation of nation_american :
44123: LD_VAR 0 5
44127: PUSH
44128: LD_INT 1
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44192
44136: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44137: LD_ADDR_VAR 0 9
44141: PUSH
44142: LD_VAR 0 11
44146: PUSH
44147: LD_VAR 0 12
44151: PUSH
44152: LD_VAR 0 13
44156: PUSH
44157: LD_VAR 0 14
44161: PUSH
44162: LD_VAR 0 15
44166: PUSH
44167: LD_VAR 0 16
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: PUSH
44180: LD_VAR 0 4
44184: PUSH
44185: LD_INT 1
44187: PLUS
44188: ARRAY
44189: ST_TO_ADDR
44190: GO 44321
44192: LD_INT 2
44194: DOUBLE
44195: EQUAL
44196: IFTRUE 44200
44198: GO 44256
44200: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44201: LD_ADDR_VAR 0 9
44205: PUSH
44206: LD_VAR 0 17
44210: PUSH
44211: LD_VAR 0 18
44215: PUSH
44216: LD_VAR 0 19
44220: PUSH
44221: LD_VAR 0 20
44225: PUSH
44226: LD_VAR 0 21
44230: PUSH
44231: LD_VAR 0 22
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: PUSH
44244: LD_VAR 0 4
44248: PUSH
44249: LD_INT 1
44251: PLUS
44252: ARRAY
44253: ST_TO_ADDR
44254: GO 44321
44256: LD_INT 3
44258: DOUBLE
44259: EQUAL
44260: IFTRUE 44264
44262: GO 44320
44264: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44265: LD_ADDR_VAR 0 9
44269: PUSH
44270: LD_VAR 0 23
44274: PUSH
44275: LD_VAR 0 24
44279: PUSH
44280: LD_VAR 0 25
44284: PUSH
44285: LD_VAR 0 26
44289: PUSH
44290: LD_VAR 0 27
44294: PUSH
44295: LD_VAR 0 28
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: PUSH
44308: LD_VAR 0 4
44312: PUSH
44313: LD_INT 1
44315: PLUS
44316: ARRAY
44317: ST_TO_ADDR
44318: GO 44321
44320: POP
44321: GO 44876
44323: LD_INT 2
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44337
44329: LD_INT 3
44331: DOUBLE
44332: EQUAL
44333: IFTRUE 44337
44335: GO 44393
44337: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44338: LD_ADDR_VAR 0 9
44342: PUSH
44343: LD_VAR 0 29
44347: PUSH
44348: LD_VAR 0 30
44352: PUSH
44353: LD_VAR 0 31
44357: PUSH
44358: LD_VAR 0 32
44362: PUSH
44363: LD_VAR 0 33
44367: PUSH
44368: LD_VAR 0 34
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: PUSH
44381: LD_VAR 0 4
44385: PUSH
44386: LD_INT 1
44388: PLUS
44389: ARRAY
44390: ST_TO_ADDR
44391: GO 44876
44393: LD_INT 16
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44455
44399: LD_INT 17
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44455
44405: LD_INT 18
44407: DOUBLE
44408: EQUAL
44409: IFTRUE 44455
44411: LD_INT 19
44413: DOUBLE
44414: EQUAL
44415: IFTRUE 44455
44417: LD_INT 22
44419: DOUBLE
44420: EQUAL
44421: IFTRUE 44455
44423: LD_INT 20
44425: DOUBLE
44426: EQUAL
44427: IFTRUE 44455
44429: LD_INT 21
44431: DOUBLE
44432: EQUAL
44433: IFTRUE 44455
44435: LD_INT 23
44437: DOUBLE
44438: EQUAL
44439: IFTRUE 44455
44441: LD_INT 24
44443: DOUBLE
44444: EQUAL
44445: IFTRUE 44455
44447: LD_INT 25
44449: DOUBLE
44450: EQUAL
44451: IFTRUE 44455
44453: GO 44511
44455: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44456: LD_ADDR_VAR 0 9
44460: PUSH
44461: LD_VAR 0 35
44465: PUSH
44466: LD_VAR 0 36
44470: PUSH
44471: LD_VAR 0 37
44475: PUSH
44476: LD_VAR 0 38
44480: PUSH
44481: LD_VAR 0 39
44485: PUSH
44486: LD_VAR 0 40
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: PUSH
44499: LD_VAR 0 4
44503: PUSH
44504: LD_INT 1
44506: PLUS
44507: ARRAY
44508: ST_TO_ADDR
44509: GO 44876
44511: LD_INT 6
44513: DOUBLE
44514: EQUAL
44515: IFTRUE 44567
44517: LD_INT 7
44519: DOUBLE
44520: EQUAL
44521: IFTRUE 44567
44523: LD_INT 8
44525: DOUBLE
44526: EQUAL
44527: IFTRUE 44567
44529: LD_INT 13
44531: DOUBLE
44532: EQUAL
44533: IFTRUE 44567
44535: LD_INT 12
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44567
44541: LD_INT 15
44543: DOUBLE
44544: EQUAL
44545: IFTRUE 44567
44547: LD_INT 11
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44567
44553: LD_INT 14
44555: DOUBLE
44556: EQUAL
44557: IFTRUE 44567
44559: LD_INT 10
44561: DOUBLE
44562: EQUAL
44563: IFTRUE 44567
44565: GO 44623
44567: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44568: LD_ADDR_VAR 0 9
44572: PUSH
44573: LD_VAR 0 41
44577: PUSH
44578: LD_VAR 0 42
44582: PUSH
44583: LD_VAR 0 43
44587: PUSH
44588: LD_VAR 0 44
44592: PUSH
44593: LD_VAR 0 45
44597: PUSH
44598: LD_VAR 0 46
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: PUSH
44611: LD_VAR 0 4
44615: PUSH
44616: LD_INT 1
44618: PLUS
44619: ARRAY
44620: ST_TO_ADDR
44621: GO 44876
44623: LD_INT 36
44625: DOUBLE
44626: EQUAL
44627: IFTRUE 44631
44629: GO 44687
44631: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44632: LD_ADDR_VAR 0 9
44636: PUSH
44637: LD_VAR 0 47
44641: PUSH
44642: LD_VAR 0 48
44646: PUSH
44647: LD_VAR 0 49
44651: PUSH
44652: LD_VAR 0 50
44656: PUSH
44657: LD_VAR 0 51
44661: PUSH
44662: LD_VAR 0 52
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: PUSH
44675: LD_VAR 0 4
44679: PUSH
44680: LD_INT 1
44682: PLUS
44683: ARRAY
44684: ST_TO_ADDR
44685: GO 44876
44687: LD_INT 4
44689: DOUBLE
44690: EQUAL
44691: IFTRUE 44713
44693: LD_INT 5
44695: DOUBLE
44696: EQUAL
44697: IFTRUE 44713
44699: LD_INT 34
44701: DOUBLE
44702: EQUAL
44703: IFTRUE 44713
44705: LD_INT 37
44707: DOUBLE
44708: EQUAL
44709: IFTRUE 44713
44711: GO 44769
44713: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44714: LD_ADDR_VAR 0 9
44718: PUSH
44719: LD_VAR 0 53
44723: PUSH
44724: LD_VAR 0 54
44728: PUSH
44729: LD_VAR 0 55
44733: PUSH
44734: LD_VAR 0 56
44738: PUSH
44739: LD_VAR 0 57
44743: PUSH
44744: LD_VAR 0 58
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: PUSH
44757: LD_VAR 0 4
44761: PUSH
44762: LD_INT 1
44764: PLUS
44765: ARRAY
44766: ST_TO_ADDR
44767: GO 44876
44769: LD_INT 31
44771: DOUBLE
44772: EQUAL
44773: IFTRUE 44819
44775: LD_INT 32
44777: DOUBLE
44778: EQUAL
44779: IFTRUE 44819
44781: LD_INT 33
44783: DOUBLE
44784: EQUAL
44785: IFTRUE 44819
44787: LD_INT 27
44789: DOUBLE
44790: EQUAL
44791: IFTRUE 44819
44793: LD_INT 26
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44819
44799: LD_INT 28
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44819
44805: LD_INT 29
44807: DOUBLE
44808: EQUAL
44809: IFTRUE 44819
44811: LD_INT 30
44813: DOUBLE
44814: EQUAL
44815: IFTRUE 44819
44817: GO 44875
44819: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44820: LD_ADDR_VAR 0 9
44824: PUSH
44825: LD_VAR 0 59
44829: PUSH
44830: LD_VAR 0 60
44834: PUSH
44835: LD_VAR 0 61
44839: PUSH
44840: LD_VAR 0 62
44844: PUSH
44845: LD_VAR 0 63
44849: PUSH
44850: LD_VAR 0 64
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: PUSH
44863: LD_VAR 0 4
44867: PUSH
44868: LD_INT 1
44870: PLUS
44871: ARRAY
44872: ST_TO_ADDR
44873: GO 44876
44875: POP
// temp_list2 = [ ] ;
44876: LD_ADDR_VAR 0 10
44880: PUSH
44881: EMPTY
44882: ST_TO_ADDR
// for i in temp_list do
44883: LD_ADDR_VAR 0 8
44887: PUSH
44888: LD_VAR 0 9
44892: PUSH
44893: FOR_IN
44894: IFFALSE 44946
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44896: LD_ADDR_VAR 0 10
44900: PUSH
44901: LD_VAR 0 10
44905: PUSH
44906: LD_VAR 0 8
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: PUSH
44915: LD_VAR 0 2
44919: PLUS
44920: PUSH
44921: LD_VAR 0 8
44925: PUSH
44926: LD_INT 2
44928: ARRAY
44929: PUSH
44930: LD_VAR 0 3
44934: PLUS
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: ADD
44943: ST_TO_ADDR
44944: GO 44893
44946: POP
44947: POP
// result = temp_list2 ;
44948: LD_ADDR_VAR 0 7
44952: PUSH
44953: LD_VAR 0 10
44957: ST_TO_ADDR
// end ;
44958: LD_VAR 0 7
44962: RET
// export function EnemyInRange ( unit , dist ) ; begin
44963: LD_INT 0
44965: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44966: LD_ADDR_VAR 0 3
44970: PUSH
44971: LD_VAR 0 1
44975: PPUSH
44976: CALL_OW 255
44980: PPUSH
44981: LD_VAR 0 1
44985: PPUSH
44986: CALL_OW 250
44990: PPUSH
44991: LD_VAR 0 1
44995: PPUSH
44996: CALL_OW 251
45000: PPUSH
45001: LD_VAR 0 2
45005: PPUSH
45006: CALL 19067 0 4
45010: PUSH
45011: LD_INT 4
45013: ARRAY
45014: ST_TO_ADDR
// end ;
45015: LD_VAR 0 3
45019: RET
// export function PlayerSeeMe ( unit ) ; begin
45020: LD_INT 0
45022: PPUSH
// result := See ( your_side , unit ) ;
45023: LD_ADDR_VAR 0 2
45027: PUSH
45028: LD_OWVAR 2
45032: PPUSH
45033: LD_VAR 0 1
45037: PPUSH
45038: CALL_OW 292
45042: ST_TO_ADDR
// end ;
45043: LD_VAR 0 2
45047: RET
// export function ReverseDir ( unit ) ; begin
45048: LD_INT 0
45050: PPUSH
// if not unit then
45051: LD_VAR 0 1
45055: NOT
45056: IFFALSE 45060
// exit ;
45058: GO 45106
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
45060: LD_ADDR_VAR 0 2
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: LD_INT 4
45070: PUSH
45071: LD_INT 5
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: PUSH
45091: LD_VAR 0 1
45095: PPUSH
45096: CALL_OW 254
45100: PUSH
45101: LD_INT 1
45103: PLUS
45104: ARRAY
45105: ST_TO_ADDR
// end ;
45106: LD_VAR 0 2
45110: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45111: LD_INT 0
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
// if not hexes then
45118: LD_VAR 0 2
45122: NOT
45123: IFFALSE 45127
// exit ;
45125: GO 45275
// dist := 9999 ;
45127: LD_ADDR_VAR 0 5
45131: PUSH
45132: LD_INT 9999
45134: ST_TO_ADDR
// for i = 1 to hexes do
45135: LD_ADDR_VAR 0 4
45139: PUSH
45140: DOUBLE
45141: LD_INT 1
45143: DEC
45144: ST_TO_ADDR
45145: LD_VAR 0 2
45149: PUSH
45150: FOR_TO
45151: IFFALSE 45263
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45153: LD_VAR 0 1
45157: PPUSH
45158: LD_VAR 0 2
45162: PUSH
45163: LD_VAR 0 4
45167: ARRAY
45168: PUSH
45169: LD_INT 1
45171: ARRAY
45172: PPUSH
45173: LD_VAR 0 2
45177: PUSH
45178: LD_VAR 0 4
45182: ARRAY
45183: PUSH
45184: LD_INT 2
45186: ARRAY
45187: PPUSH
45188: CALL_OW 297
45192: PUSH
45193: LD_VAR 0 5
45197: LESS
45198: IFFALSE 45261
// begin hex := hexes [ i ] ;
45200: LD_ADDR_VAR 0 7
45204: PUSH
45205: LD_VAR 0 2
45209: PUSH
45210: LD_VAR 0 4
45214: ARRAY
45215: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45216: LD_ADDR_VAR 0 5
45220: PUSH
45221: LD_VAR 0 1
45225: PPUSH
45226: LD_VAR 0 2
45230: PUSH
45231: LD_VAR 0 4
45235: ARRAY
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PPUSH
45241: LD_VAR 0 2
45245: PUSH
45246: LD_VAR 0 4
45250: ARRAY
45251: PUSH
45252: LD_INT 2
45254: ARRAY
45255: PPUSH
45256: CALL_OW 297
45260: ST_TO_ADDR
// end ; end ;
45261: GO 45150
45263: POP
45264: POP
// result := hex ;
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_VAR 0 7
45274: ST_TO_ADDR
// end ;
45275: LD_VAR 0 3
45279: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45280: LD_INT 0
45282: PPUSH
45283: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45284: LD_VAR 0 1
45288: NOT
45289: PUSH
45290: LD_VAR 0 1
45294: PUSH
45295: LD_INT 21
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 23
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PPUSH
45319: CALL_OW 69
45323: IN
45324: NOT
45325: OR
45326: IFFALSE 45330
// exit ;
45328: GO 45377
// for i = 1 to 3 do
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: DOUBLE
45336: LD_INT 1
45338: DEC
45339: ST_TO_ADDR
45340: LD_INT 3
45342: PUSH
45343: FOR_TO
45344: IFFALSE 45375
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45346: LD_VAR 0 1
45350: PPUSH
45351: CALL_OW 250
45355: PPUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: CALL_OW 251
45365: PPUSH
45366: LD_INT 1
45368: PPUSH
45369: CALL_OW 453
45373: GO 45343
45375: POP
45376: POP
// end ;
45377: LD_VAR 0 2
45381: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45382: LD_INT 0
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45390: LD_VAR 0 1
45394: NOT
45395: PUSH
45396: LD_VAR 0 2
45400: NOT
45401: OR
45402: PUSH
45403: LD_VAR 0 1
45407: PPUSH
45408: CALL_OW 314
45412: OR
45413: IFFALSE 45417
// exit ;
45415: GO 45858
// x := GetX ( enemy_unit ) ;
45417: LD_ADDR_VAR 0 7
45421: PUSH
45422: LD_VAR 0 2
45426: PPUSH
45427: CALL_OW 250
45431: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45432: LD_ADDR_VAR 0 8
45436: PUSH
45437: LD_VAR 0 2
45441: PPUSH
45442: CALL_OW 251
45446: ST_TO_ADDR
// if not x or not y then
45447: LD_VAR 0 7
45451: NOT
45452: PUSH
45453: LD_VAR 0 8
45457: NOT
45458: OR
45459: IFFALSE 45463
// exit ;
45461: GO 45858
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45463: LD_ADDR_VAR 0 6
45467: PUSH
45468: LD_VAR 0 7
45472: PPUSH
45473: LD_INT 0
45475: PPUSH
45476: LD_INT 4
45478: PPUSH
45479: CALL_OW 272
45483: PUSH
45484: LD_VAR 0 8
45488: PPUSH
45489: LD_INT 0
45491: PPUSH
45492: LD_INT 4
45494: PPUSH
45495: CALL_OW 273
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_VAR 0 7
45508: PPUSH
45509: LD_INT 1
45511: PPUSH
45512: LD_INT 4
45514: PPUSH
45515: CALL_OW 272
45519: PUSH
45520: LD_VAR 0 8
45524: PPUSH
45525: LD_INT 1
45527: PPUSH
45528: LD_INT 4
45530: PPUSH
45531: CALL_OW 273
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_VAR 0 7
45544: PPUSH
45545: LD_INT 2
45547: PPUSH
45548: LD_INT 4
45550: PPUSH
45551: CALL_OW 272
45555: PUSH
45556: LD_VAR 0 8
45560: PPUSH
45561: LD_INT 2
45563: PPUSH
45564: LD_INT 4
45566: PPUSH
45567: CALL_OW 273
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_VAR 0 7
45580: PPUSH
45581: LD_INT 3
45583: PPUSH
45584: LD_INT 4
45586: PPUSH
45587: CALL_OW 272
45591: PUSH
45592: LD_VAR 0 8
45596: PPUSH
45597: LD_INT 3
45599: PPUSH
45600: LD_INT 4
45602: PPUSH
45603: CALL_OW 273
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_VAR 0 7
45616: PPUSH
45617: LD_INT 4
45619: PPUSH
45620: LD_INT 4
45622: PPUSH
45623: CALL_OW 272
45627: PUSH
45628: LD_VAR 0 8
45632: PPUSH
45633: LD_INT 4
45635: PPUSH
45636: LD_INT 4
45638: PPUSH
45639: CALL_OW 273
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_VAR 0 7
45652: PPUSH
45653: LD_INT 5
45655: PPUSH
45656: LD_INT 4
45658: PPUSH
45659: CALL_OW 272
45663: PUSH
45664: LD_VAR 0 8
45668: PPUSH
45669: LD_INT 5
45671: PPUSH
45672: LD_INT 4
45674: PPUSH
45675: CALL_OW 273
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// for i = tmp downto 1 do
45692: LD_ADDR_VAR 0 4
45696: PUSH
45697: DOUBLE
45698: LD_VAR 0 6
45702: INC
45703: ST_TO_ADDR
45704: LD_INT 1
45706: PUSH
45707: FOR_DOWNTO
45708: IFFALSE 45809
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45710: LD_VAR 0 6
45714: PUSH
45715: LD_VAR 0 4
45719: ARRAY
45720: PUSH
45721: LD_INT 1
45723: ARRAY
45724: PPUSH
45725: LD_VAR 0 6
45729: PUSH
45730: LD_VAR 0 4
45734: ARRAY
45735: PUSH
45736: LD_INT 2
45738: ARRAY
45739: PPUSH
45740: CALL_OW 488
45744: NOT
45745: PUSH
45746: LD_VAR 0 6
45750: PUSH
45751: LD_VAR 0 4
45755: ARRAY
45756: PUSH
45757: LD_INT 1
45759: ARRAY
45760: PPUSH
45761: LD_VAR 0 6
45765: PUSH
45766: LD_VAR 0 4
45770: ARRAY
45771: PUSH
45772: LD_INT 2
45774: ARRAY
45775: PPUSH
45776: CALL_OW 428
45780: PUSH
45781: LD_INT 0
45783: NONEQUAL
45784: OR
45785: IFFALSE 45807
// tmp := Delete ( tmp , i ) ;
45787: LD_ADDR_VAR 0 6
45791: PUSH
45792: LD_VAR 0 6
45796: PPUSH
45797: LD_VAR 0 4
45801: PPUSH
45802: CALL_OW 3
45806: ST_TO_ADDR
45807: GO 45707
45809: POP
45810: POP
// j := GetClosestHex ( unit , tmp ) ;
45811: LD_ADDR_VAR 0 5
45815: PUSH
45816: LD_VAR 0 1
45820: PPUSH
45821: LD_VAR 0 6
45825: PPUSH
45826: CALL 45111 0 2
45830: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45831: LD_VAR 0 1
45835: PPUSH
45836: LD_VAR 0 5
45840: PUSH
45841: LD_INT 1
45843: ARRAY
45844: PPUSH
45845: LD_VAR 0 5
45849: PUSH
45850: LD_INT 2
45852: ARRAY
45853: PPUSH
45854: CALL_OW 111
// end ;
45858: LD_VAR 0 3
45862: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45863: LD_INT 0
45865: PPUSH
45866: PPUSH
45867: PPUSH
// uc_side = 0 ;
45868: LD_ADDR_OWVAR 20
45872: PUSH
45873: LD_INT 0
45875: ST_TO_ADDR
// uc_nation = 0 ;
45876: LD_ADDR_OWVAR 21
45880: PUSH
45881: LD_INT 0
45883: ST_TO_ADDR
// InitHc ;
45884: CALL_OW 19
// InitVc ;
45888: CALL_OW 20
// if mastodonts then
45892: LD_VAR 0 6
45896: IFFALSE 45963
// for i = 1 to mastodonts do
45898: LD_ADDR_VAR 0 11
45902: PUSH
45903: DOUBLE
45904: LD_INT 1
45906: DEC
45907: ST_TO_ADDR
45908: LD_VAR 0 6
45912: PUSH
45913: FOR_TO
45914: IFFALSE 45961
// begin vc_chassis := 31 ;
45916: LD_ADDR_OWVAR 37
45920: PUSH
45921: LD_INT 31
45923: ST_TO_ADDR
// vc_control := control_rider ;
45924: LD_ADDR_OWVAR 38
45928: PUSH
45929: LD_INT 4
45931: ST_TO_ADDR
// animal := CreateVehicle ;
45932: LD_ADDR_VAR 0 12
45936: PUSH
45937: CALL_OW 45
45941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45942: LD_VAR 0 12
45946: PPUSH
45947: LD_VAR 0 8
45951: PPUSH
45952: LD_INT 0
45954: PPUSH
45955: CALL 52708 0 3
// end ;
45959: GO 45913
45961: POP
45962: POP
// if horses then
45963: LD_VAR 0 5
45967: IFFALSE 46034
// for i = 1 to horses do
45969: LD_ADDR_VAR 0 11
45973: PUSH
45974: DOUBLE
45975: LD_INT 1
45977: DEC
45978: ST_TO_ADDR
45979: LD_VAR 0 5
45983: PUSH
45984: FOR_TO
45985: IFFALSE 46032
// begin hc_class := 21 ;
45987: LD_ADDR_OWVAR 28
45991: PUSH
45992: LD_INT 21
45994: ST_TO_ADDR
// hc_gallery :=  ;
45995: LD_ADDR_OWVAR 33
45999: PUSH
46000: LD_STRING 
46002: ST_TO_ADDR
// animal := CreateHuman ;
46003: LD_ADDR_VAR 0 12
46007: PUSH
46008: CALL_OW 44
46012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46013: LD_VAR 0 12
46017: PPUSH
46018: LD_VAR 0 8
46022: PPUSH
46023: LD_INT 0
46025: PPUSH
46026: CALL 52708 0 3
// end ;
46030: GO 45984
46032: POP
46033: POP
// if birds then
46034: LD_VAR 0 1
46038: IFFALSE 46105
// for i = 1 to birds do
46040: LD_ADDR_VAR 0 11
46044: PUSH
46045: DOUBLE
46046: LD_INT 1
46048: DEC
46049: ST_TO_ADDR
46050: LD_VAR 0 1
46054: PUSH
46055: FOR_TO
46056: IFFALSE 46103
// begin hc_class = 18 ;
46058: LD_ADDR_OWVAR 28
46062: PUSH
46063: LD_INT 18
46065: ST_TO_ADDR
// hc_gallery =  ;
46066: LD_ADDR_OWVAR 33
46070: PUSH
46071: LD_STRING 
46073: ST_TO_ADDR
// animal := CreateHuman ;
46074: LD_ADDR_VAR 0 12
46078: PUSH
46079: CALL_OW 44
46083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46084: LD_VAR 0 12
46088: PPUSH
46089: LD_VAR 0 8
46093: PPUSH
46094: LD_INT 0
46096: PPUSH
46097: CALL 52708 0 3
// end ;
46101: GO 46055
46103: POP
46104: POP
// if tigers then
46105: LD_VAR 0 2
46109: IFFALSE 46193
// for i = 1 to tigers do
46111: LD_ADDR_VAR 0 11
46115: PUSH
46116: DOUBLE
46117: LD_INT 1
46119: DEC
46120: ST_TO_ADDR
46121: LD_VAR 0 2
46125: PUSH
46126: FOR_TO
46127: IFFALSE 46191
// begin hc_class = class_tiger ;
46129: LD_ADDR_OWVAR 28
46133: PUSH
46134: LD_INT 14
46136: ST_TO_ADDR
// hc_gallery =  ;
46137: LD_ADDR_OWVAR 33
46141: PUSH
46142: LD_STRING 
46144: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46145: LD_ADDR_OWVAR 35
46149: PUSH
46150: LD_INT 7
46152: NEG
46153: PPUSH
46154: LD_INT 7
46156: PPUSH
46157: CALL_OW 12
46161: ST_TO_ADDR
// animal := CreateHuman ;
46162: LD_ADDR_VAR 0 12
46166: PUSH
46167: CALL_OW 44
46171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46172: LD_VAR 0 12
46176: PPUSH
46177: LD_VAR 0 8
46181: PPUSH
46182: LD_INT 0
46184: PPUSH
46185: CALL 52708 0 3
// end ;
46189: GO 46126
46191: POP
46192: POP
// if apemans then
46193: LD_VAR 0 3
46197: IFFALSE 46320
// for i = 1 to apemans do
46199: LD_ADDR_VAR 0 11
46203: PUSH
46204: DOUBLE
46205: LD_INT 1
46207: DEC
46208: ST_TO_ADDR
46209: LD_VAR 0 3
46213: PUSH
46214: FOR_TO
46215: IFFALSE 46318
// begin hc_class = class_apeman ;
46217: LD_ADDR_OWVAR 28
46221: PUSH
46222: LD_INT 12
46224: ST_TO_ADDR
// hc_gallery =  ;
46225: LD_ADDR_OWVAR 33
46229: PUSH
46230: LD_STRING 
46232: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46233: LD_ADDR_OWVAR 35
46237: PUSH
46238: LD_INT 5
46240: NEG
46241: PPUSH
46242: LD_INT 5
46244: PPUSH
46245: CALL_OW 12
46249: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46250: LD_ADDR_OWVAR 31
46254: PUSH
46255: LD_INT 1
46257: PPUSH
46258: LD_INT 3
46260: PPUSH
46261: CALL_OW 12
46265: PUSH
46266: LD_INT 1
46268: PPUSH
46269: LD_INT 3
46271: PPUSH
46272: CALL_OW 12
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// animal := CreateHuman ;
46289: LD_ADDR_VAR 0 12
46293: PUSH
46294: CALL_OW 44
46298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46299: LD_VAR 0 12
46303: PPUSH
46304: LD_VAR 0 8
46308: PPUSH
46309: LD_INT 0
46311: PPUSH
46312: CALL 52708 0 3
// end ;
46316: GO 46214
46318: POP
46319: POP
// if enchidnas then
46320: LD_VAR 0 4
46324: IFFALSE 46391
// for i = 1 to enchidnas do
46326: LD_ADDR_VAR 0 11
46330: PUSH
46331: DOUBLE
46332: LD_INT 1
46334: DEC
46335: ST_TO_ADDR
46336: LD_VAR 0 4
46340: PUSH
46341: FOR_TO
46342: IFFALSE 46389
// begin hc_class = 13 ;
46344: LD_ADDR_OWVAR 28
46348: PUSH
46349: LD_INT 13
46351: ST_TO_ADDR
// hc_gallery =  ;
46352: LD_ADDR_OWVAR 33
46356: PUSH
46357: LD_STRING 
46359: ST_TO_ADDR
// animal := CreateHuman ;
46360: LD_ADDR_VAR 0 12
46364: PUSH
46365: CALL_OW 44
46369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46370: LD_VAR 0 12
46374: PPUSH
46375: LD_VAR 0 8
46379: PPUSH
46380: LD_INT 0
46382: PPUSH
46383: CALL 52708 0 3
// end ;
46387: GO 46341
46389: POP
46390: POP
// if fishes then
46391: LD_VAR 0 7
46395: IFFALSE 46462
// for i = 1 to fishes do
46397: LD_ADDR_VAR 0 11
46401: PUSH
46402: DOUBLE
46403: LD_INT 1
46405: DEC
46406: ST_TO_ADDR
46407: LD_VAR 0 7
46411: PUSH
46412: FOR_TO
46413: IFFALSE 46460
// begin hc_class = 20 ;
46415: LD_ADDR_OWVAR 28
46419: PUSH
46420: LD_INT 20
46422: ST_TO_ADDR
// hc_gallery =  ;
46423: LD_ADDR_OWVAR 33
46427: PUSH
46428: LD_STRING 
46430: ST_TO_ADDR
// animal := CreateHuman ;
46431: LD_ADDR_VAR 0 12
46435: PUSH
46436: CALL_OW 44
46440: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46441: LD_VAR 0 12
46445: PPUSH
46446: LD_VAR 0 9
46450: PPUSH
46451: LD_INT 0
46453: PPUSH
46454: CALL 52708 0 3
// end ;
46458: GO 46412
46460: POP
46461: POP
// end ;
46462: LD_VAR 0 10
46466: RET
// export function WantHeal ( sci , unit ) ; begin
46467: LD_INT 0
46469: PPUSH
// if GetTaskList ( sci ) > 0 then
46470: LD_VAR 0 1
46474: PPUSH
46475: CALL_OW 437
46479: PUSH
46480: LD_INT 0
46482: GREATER
46483: IFFALSE 46553
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46485: LD_VAR 0 1
46489: PPUSH
46490: CALL_OW 437
46494: PUSH
46495: LD_INT 1
46497: ARRAY
46498: PUSH
46499: LD_INT 1
46501: ARRAY
46502: PUSH
46503: LD_STRING l
46505: EQUAL
46506: PUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: CALL_OW 437
46516: PUSH
46517: LD_INT 1
46519: ARRAY
46520: PUSH
46521: LD_INT 4
46523: ARRAY
46524: PUSH
46525: LD_VAR 0 2
46529: EQUAL
46530: AND
46531: IFFALSE 46543
// result := true else
46533: LD_ADDR_VAR 0 3
46537: PUSH
46538: LD_INT 1
46540: ST_TO_ADDR
46541: GO 46551
// result := false ;
46543: LD_ADDR_VAR 0 3
46547: PUSH
46548: LD_INT 0
46550: ST_TO_ADDR
// end else
46551: GO 46561
// result := false ;
46553: LD_ADDR_VAR 0 3
46557: PUSH
46558: LD_INT 0
46560: ST_TO_ADDR
// end ;
46561: LD_VAR 0 3
46565: RET
// export function HealTarget ( sci ) ; begin
46566: LD_INT 0
46568: PPUSH
// if not sci then
46569: LD_VAR 0 1
46573: NOT
46574: IFFALSE 46578
// exit ;
46576: GO 46643
// result := 0 ;
46578: LD_ADDR_VAR 0 2
46582: PUSH
46583: LD_INT 0
46585: ST_TO_ADDR
// if GetTaskList ( sci ) then
46586: LD_VAR 0 1
46590: PPUSH
46591: CALL_OW 437
46595: IFFALSE 46643
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46597: LD_VAR 0 1
46601: PPUSH
46602: CALL_OW 437
46606: PUSH
46607: LD_INT 1
46609: ARRAY
46610: PUSH
46611: LD_INT 1
46613: ARRAY
46614: PUSH
46615: LD_STRING l
46617: EQUAL
46618: IFFALSE 46643
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46620: LD_ADDR_VAR 0 2
46624: PUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 437
46634: PUSH
46635: LD_INT 1
46637: ARRAY
46638: PUSH
46639: LD_INT 4
46641: ARRAY
46642: ST_TO_ADDR
// end ;
46643: LD_VAR 0 2
46647: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
46648: LD_INT 0
46650: PPUSH
46651: PPUSH
46652: PPUSH
46653: PPUSH
46654: PPUSH
46655: PPUSH
46656: PPUSH
46657: PPUSH
46658: PPUSH
46659: PPUSH
46660: PPUSH
46661: PPUSH
46662: PPUSH
46663: PPUSH
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
// if not list then
46684: LD_VAR 0 1
46688: NOT
46689: IFFALSE 46693
// exit ;
46691: GO 51319
// base := list [ 1 ] ;
46693: LD_ADDR_VAR 0 3
46697: PUSH
46698: LD_VAR 0 1
46702: PUSH
46703: LD_INT 1
46705: ARRAY
46706: ST_TO_ADDR
// group := list [ 2 ] ;
46707: LD_ADDR_VAR 0 4
46711: PUSH
46712: LD_VAR 0 1
46716: PUSH
46717: LD_INT 2
46719: ARRAY
46720: ST_TO_ADDR
// path := list [ 3 ] ;
46721: LD_ADDR_VAR 0 5
46725: PUSH
46726: LD_VAR 0 1
46730: PUSH
46731: LD_INT 3
46733: ARRAY
46734: ST_TO_ADDR
// flags := list [ 4 ] ;
46735: LD_ADDR_VAR 0 6
46739: PUSH
46740: LD_VAR 0 1
46744: PUSH
46745: LD_INT 4
46747: ARRAY
46748: ST_TO_ADDR
// mined := [ ] ;
46749: LD_ADDR_VAR 0 27
46753: PUSH
46754: EMPTY
46755: ST_TO_ADDR
// bombed := [ ] ;
46756: LD_ADDR_VAR 0 28
46760: PUSH
46761: EMPTY
46762: ST_TO_ADDR
// healers := [ ] ;
46763: LD_ADDR_VAR 0 31
46767: PUSH
46768: EMPTY
46769: ST_TO_ADDR
// to_heal := [ ] ;
46770: LD_ADDR_VAR 0 30
46774: PUSH
46775: EMPTY
46776: ST_TO_ADDR
// repairs := [ ] ;
46777: LD_ADDR_VAR 0 33
46781: PUSH
46782: EMPTY
46783: ST_TO_ADDR
// to_repair := [ ] ;
46784: LD_ADDR_VAR 0 32
46788: PUSH
46789: EMPTY
46790: ST_TO_ADDR
// if not group or not path then
46791: LD_VAR 0 4
46795: NOT
46796: PUSH
46797: LD_VAR 0 5
46801: NOT
46802: OR
46803: IFFALSE 46807
// exit ;
46805: GO 51319
// side := GetSide ( group [ 1 ] ) ;
46807: LD_ADDR_VAR 0 35
46811: PUSH
46812: LD_VAR 0 4
46816: PUSH
46817: LD_INT 1
46819: ARRAY
46820: PPUSH
46821: CALL_OW 255
46825: ST_TO_ADDR
// if flags then
46826: LD_VAR 0 6
46830: IFFALSE 46974
// begin f_ignore_area := flags [ 1 ] ;
46832: LD_ADDR_VAR 0 17
46836: PUSH
46837: LD_VAR 0 6
46841: PUSH
46842: LD_INT 1
46844: ARRAY
46845: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46846: LD_ADDR_VAR 0 18
46850: PUSH
46851: LD_VAR 0 6
46855: PUSH
46856: LD_INT 2
46858: ARRAY
46859: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46860: LD_ADDR_VAR 0 19
46864: PUSH
46865: LD_VAR 0 6
46869: PUSH
46870: LD_INT 3
46872: ARRAY
46873: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46874: LD_ADDR_VAR 0 20
46878: PUSH
46879: LD_VAR 0 6
46883: PUSH
46884: LD_INT 4
46886: ARRAY
46887: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46888: LD_ADDR_VAR 0 21
46892: PUSH
46893: LD_VAR 0 6
46897: PUSH
46898: LD_INT 5
46900: ARRAY
46901: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46902: LD_ADDR_VAR 0 22
46906: PUSH
46907: LD_VAR 0 6
46911: PUSH
46912: LD_INT 6
46914: ARRAY
46915: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46916: LD_ADDR_VAR 0 23
46920: PUSH
46921: LD_VAR 0 6
46925: PUSH
46926: LD_INT 7
46928: ARRAY
46929: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46930: LD_ADDR_VAR 0 24
46934: PUSH
46935: LD_VAR 0 6
46939: PUSH
46940: LD_INT 8
46942: ARRAY
46943: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46944: LD_ADDR_VAR 0 25
46948: PUSH
46949: LD_VAR 0 6
46953: PUSH
46954: LD_INT 9
46956: ARRAY
46957: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46958: LD_ADDR_VAR 0 26
46962: PUSH
46963: LD_VAR 0 6
46967: PUSH
46968: LD_INT 10
46970: ARRAY
46971: ST_TO_ADDR
// end else
46972: GO 47054
// begin f_ignore_area := false ;
46974: LD_ADDR_VAR 0 17
46978: PUSH
46979: LD_INT 0
46981: ST_TO_ADDR
// f_capture := false ;
46982: LD_ADDR_VAR 0 18
46986: PUSH
46987: LD_INT 0
46989: ST_TO_ADDR
// f_ignore_civ := false ;
46990: LD_ADDR_VAR 0 19
46994: PUSH
46995: LD_INT 0
46997: ST_TO_ADDR
// f_murder := false ;
46998: LD_ADDR_VAR 0 20
47002: PUSH
47003: LD_INT 0
47005: ST_TO_ADDR
// f_mines := false ;
47006: LD_ADDR_VAR 0 21
47010: PUSH
47011: LD_INT 0
47013: ST_TO_ADDR
// f_repair := false ;
47014: LD_ADDR_VAR 0 22
47018: PUSH
47019: LD_INT 0
47021: ST_TO_ADDR
// f_heal := false ;
47022: LD_ADDR_VAR 0 23
47026: PUSH
47027: LD_INT 0
47029: ST_TO_ADDR
// f_spacetime := false ;
47030: LD_ADDR_VAR 0 24
47034: PUSH
47035: LD_INT 0
47037: ST_TO_ADDR
// f_attack_depot := false ;
47038: LD_ADDR_VAR 0 25
47042: PUSH
47043: LD_INT 0
47045: ST_TO_ADDR
// f_crawl := false ;
47046: LD_ADDR_VAR 0 26
47050: PUSH
47051: LD_INT 0
47053: ST_TO_ADDR
// end ; if f_heal then
47054: LD_VAR 0 23
47058: IFFALSE 47085
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
47060: LD_ADDR_VAR 0 31
47064: PUSH
47065: LD_VAR 0 4
47069: PPUSH
47070: LD_INT 25
47072: PUSH
47073: LD_INT 4
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PPUSH
47080: CALL_OW 72
47084: ST_TO_ADDR
// if f_repair then
47085: LD_VAR 0 22
47089: IFFALSE 47116
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
47091: LD_ADDR_VAR 0 33
47095: PUSH
47096: LD_VAR 0 4
47100: PPUSH
47101: LD_INT 25
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PPUSH
47111: CALL_OW 72
47115: ST_TO_ADDR
// units_path := [ ] ;
47116: LD_ADDR_VAR 0 16
47120: PUSH
47121: EMPTY
47122: ST_TO_ADDR
// for i = 1 to group do
47123: LD_ADDR_VAR 0 7
47127: PUSH
47128: DOUBLE
47129: LD_INT 1
47131: DEC
47132: ST_TO_ADDR
47133: LD_VAR 0 4
47137: PUSH
47138: FOR_TO
47139: IFFALSE 47168
// units_path := Replace ( units_path , i , path ) ;
47141: LD_ADDR_VAR 0 16
47145: PUSH
47146: LD_VAR 0 16
47150: PPUSH
47151: LD_VAR 0 7
47155: PPUSH
47156: LD_VAR 0 5
47160: PPUSH
47161: CALL_OW 1
47165: ST_TO_ADDR
47166: GO 47138
47168: POP
47169: POP
// repeat for i = group downto 1 do
47170: LD_ADDR_VAR 0 7
47174: PUSH
47175: DOUBLE
47176: LD_VAR 0 4
47180: INC
47181: ST_TO_ADDR
47182: LD_INT 1
47184: PUSH
47185: FOR_DOWNTO
47186: IFFALSE 51282
// begin wait ( 5 ) ;
47188: LD_INT 5
47190: PPUSH
47191: CALL_OW 67
// tmp := [ ] ;
47195: LD_ADDR_VAR 0 14
47199: PUSH
47200: EMPTY
47201: ST_TO_ADDR
// attacking := false ;
47202: LD_ADDR_VAR 0 29
47206: PUSH
47207: LD_INT 0
47209: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
47210: LD_VAR 0 4
47214: PUSH
47215: LD_VAR 0 7
47219: ARRAY
47220: PPUSH
47221: CALL_OW 301
47225: PUSH
47226: LD_VAR 0 4
47230: PUSH
47231: LD_VAR 0 7
47235: ARRAY
47236: NOT
47237: OR
47238: IFFALSE 47347
// begin if GetType ( group [ i ] ) = unit_human then
47240: LD_VAR 0 4
47244: PUSH
47245: LD_VAR 0 7
47249: ARRAY
47250: PPUSH
47251: CALL_OW 247
47255: PUSH
47256: LD_INT 1
47258: EQUAL
47259: IFFALSE 47305
// begin to_heal := to_heal diff group [ i ] ;
47261: LD_ADDR_VAR 0 30
47265: PUSH
47266: LD_VAR 0 30
47270: PUSH
47271: LD_VAR 0 4
47275: PUSH
47276: LD_VAR 0 7
47280: ARRAY
47281: DIFF
47282: ST_TO_ADDR
// healers := healers diff group [ i ] ;
47283: LD_ADDR_VAR 0 31
47287: PUSH
47288: LD_VAR 0 31
47292: PUSH
47293: LD_VAR 0 4
47297: PUSH
47298: LD_VAR 0 7
47302: ARRAY
47303: DIFF
47304: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
47305: LD_ADDR_VAR 0 4
47309: PUSH
47310: LD_VAR 0 4
47314: PPUSH
47315: LD_VAR 0 7
47319: PPUSH
47320: CALL_OW 3
47324: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47325: LD_ADDR_VAR 0 16
47329: PUSH
47330: LD_VAR 0 16
47334: PPUSH
47335: LD_VAR 0 7
47339: PPUSH
47340: CALL_OW 3
47344: ST_TO_ADDR
// continue ;
47345: GO 47185
// end ; if f_repair then
47347: LD_VAR 0 22
47351: IFFALSE 47840
// begin if GetType ( group [ i ] ) = unit_vehicle then
47353: LD_VAR 0 4
47357: PUSH
47358: LD_VAR 0 7
47362: ARRAY
47363: PPUSH
47364: CALL_OW 247
47368: PUSH
47369: LD_INT 2
47371: EQUAL
47372: IFFALSE 47562
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
47374: LD_VAR 0 4
47378: PUSH
47379: LD_VAR 0 7
47383: ARRAY
47384: PPUSH
47385: CALL_OW 256
47389: PUSH
47390: LD_INT 700
47392: LESS
47393: PUSH
47394: LD_VAR 0 4
47398: PUSH
47399: LD_VAR 0 7
47403: ARRAY
47404: PUSH
47405: LD_VAR 0 32
47409: IN
47410: NOT
47411: AND
47412: IFFALSE 47436
// to_repair := to_repair union group [ i ] ;
47414: LD_ADDR_VAR 0 32
47418: PUSH
47419: LD_VAR 0 32
47423: PUSH
47424: LD_VAR 0 4
47428: PUSH
47429: LD_VAR 0 7
47433: ARRAY
47434: UNION
47435: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
47436: LD_VAR 0 4
47440: PUSH
47441: LD_VAR 0 7
47445: ARRAY
47446: PPUSH
47447: CALL_OW 256
47451: PUSH
47452: LD_INT 1000
47454: EQUAL
47455: PUSH
47456: LD_VAR 0 4
47460: PUSH
47461: LD_VAR 0 7
47465: ARRAY
47466: PUSH
47467: LD_VAR 0 32
47471: IN
47472: AND
47473: IFFALSE 47497
// to_repair := to_repair diff group [ i ] ;
47475: LD_ADDR_VAR 0 32
47479: PUSH
47480: LD_VAR 0 32
47484: PUSH
47485: LD_VAR 0 4
47489: PUSH
47490: LD_VAR 0 7
47494: ARRAY
47495: DIFF
47496: ST_TO_ADDR
// if group [ i ] in to_repair then
47497: LD_VAR 0 4
47501: PUSH
47502: LD_VAR 0 7
47506: ARRAY
47507: PUSH
47508: LD_VAR 0 32
47512: IN
47513: IFFALSE 47560
// begin if not IsInArea ( group [ i ] , f_repair ) then
47515: LD_VAR 0 4
47519: PUSH
47520: LD_VAR 0 7
47524: ARRAY
47525: PPUSH
47526: LD_VAR 0 22
47530: PPUSH
47531: CALL_OW 308
47535: NOT
47536: IFFALSE 47558
// ComMoveToArea ( group [ i ] , f_repair ) ;
47538: LD_VAR 0 4
47542: PUSH
47543: LD_VAR 0 7
47547: ARRAY
47548: PPUSH
47549: LD_VAR 0 22
47553: PPUSH
47554: CALL_OW 113
// continue ;
47558: GO 47185
// end ; end else
47560: GO 47840
// if group [ i ] in repairs then
47562: LD_VAR 0 4
47566: PUSH
47567: LD_VAR 0 7
47571: ARRAY
47572: PUSH
47573: LD_VAR 0 33
47577: IN
47578: IFFALSE 47840
// begin if IsInUnit ( group [ i ] ) then
47580: LD_VAR 0 4
47584: PUSH
47585: LD_VAR 0 7
47589: ARRAY
47590: PPUSH
47591: CALL_OW 310
47595: IFFALSE 47663
// begin z := IsInUnit ( group [ i ] ) ;
47597: LD_ADDR_VAR 0 13
47601: PUSH
47602: LD_VAR 0 4
47606: PUSH
47607: LD_VAR 0 7
47611: ARRAY
47612: PPUSH
47613: CALL_OW 310
47617: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
47618: LD_VAR 0 13
47622: PUSH
47623: LD_VAR 0 32
47627: IN
47628: PUSH
47629: LD_VAR 0 13
47633: PPUSH
47634: LD_VAR 0 22
47638: PPUSH
47639: CALL_OW 308
47643: AND
47644: IFFALSE 47661
// ComExitVehicle ( group [ i ] ) ;
47646: LD_VAR 0 4
47650: PUSH
47651: LD_VAR 0 7
47655: ARRAY
47656: PPUSH
47657: CALL_OW 121
// end else
47661: GO 47840
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
47663: LD_ADDR_VAR 0 13
47667: PUSH
47668: LD_VAR 0 4
47672: PPUSH
47673: LD_INT 95
47675: PUSH
47676: LD_VAR 0 22
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 58
47687: PUSH
47688: EMPTY
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PPUSH
47695: CALL_OW 72
47699: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
47700: LD_VAR 0 4
47704: PUSH
47705: LD_VAR 0 7
47709: ARRAY
47710: PPUSH
47711: CALL_OW 314
47715: NOT
47716: IFFALSE 47838
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
47718: LD_ADDR_VAR 0 10
47722: PUSH
47723: LD_VAR 0 13
47727: PPUSH
47728: LD_VAR 0 4
47732: PUSH
47733: LD_VAR 0 7
47737: ARRAY
47738: PPUSH
47739: CALL_OW 74
47743: ST_TO_ADDR
// if not x then
47744: LD_VAR 0 10
47748: NOT
47749: IFFALSE 47753
// continue ;
47751: GO 47185
// if GetLives ( x ) < 1000 then
47753: LD_VAR 0 10
47757: PPUSH
47758: CALL_OW 256
47762: PUSH
47763: LD_INT 1000
47765: LESS
47766: IFFALSE 47790
// ComRepairVehicle ( group [ i ] , x ) else
47768: LD_VAR 0 4
47772: PUSH
47773: LD_VAR 0 7
47777: ARRAY
47778: PPUSH
47779: LD_VAR 0 10
47783: PPUSH
47784: CALL_OW 129
47788: GO 47838
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47790: LD_VAR 0 23
47794: PUSH
47795: LD_VAR 0 4
47799: PUSH
47800: LD_VAR 0 7
47804: ARRAY
47805: PPUSH
47806: CALL_OW 256
47810: PUSH
47811: LD_INT 1000
47813: LESS
47814: AND
47815: NOT
47816: IFFALSE 47838
// ComEnterUnit ( group [ i ] , x ) ;
47818: LD_VAR 0 4
47822: PUSH
47823: LD_VAR 0 7
47827: ARRAY
47828: PPUSH
47829: LD_VAR 0 10
47833: PPUSH
47834: CALL_OW 120
// end ; continue ;
47838: GO 47185
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47840: LD_VAR 0 23
47844: PUSH
47845: LD_VAR 0 4
47849: PUSH
47850: LD_VAR 0 7
47854: ARRAY
47855: PPUSH
47856: CALL_OW 247
47860: PUSH
47861: LD_INT 1
47863: EQUAL
47864: AND
47865: IFFALSE 48343
// begin if group [ i ] in healers then
47867: LD_VAR 0 4
47871: PUSH
47872: LD_VAR 0 7
47876: ARRAY
47877: PUSH
47878: LD_VAR 0 31
47882: IN
47883: IFFALSE 48156
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47885: LD_VAR 0 4
47889: PUSH
47890: LD_VAR 0 7
47894: ARRAY
47895: PPUSH
47896: LD_VAR 0 23
47900: PPUSH
47901: CALL_OW 308
47905: NOT
47906: PUSH
47907: LD_VAR 0 4
47911: PUSH
47912: LD_VAR 0 7
47916: ARRAY
47917: PPUSH
47918: CALL_OW 314
47922: NOT
47923: AND
47924: IFFALSE 47948
// ComMoveToArea ( group [ i ] , f_heal ) else
47926: LD_VAR 0 4
47930: PUSH
47931: LD_VAR 0 7
47935: ARRAY
47936: PPUSH
47937: LD_VAR 0 23
47941: PPUSH
47942: CALL_OW 113
47946: GO 48154
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47948: LD_VAR 0 4
47952: PUSH
47953: LD_VAR 0 7
47957: ARRAY
47958: PPUSH
47959: CALL 46566 0 1
47963: PPUSH
47964: CALL_OW 256
47968: PUSH
47969: LD_INT 1000
47971: EQUAL
47972: IFFALSE 47991
// ComStop ( group [ i ] ) else
47974: LD_VAR 0 4
47978: PUSH
47979: LD_VAR 0 7
47983: ARRAY
47984: PPUSH
47985: CALL_OW 141
47989: GO 48154
// if not HasTask ( group [ i ] ) and to_heal then
47991: LD_VAR 0 4
47995: PUSH
47996: LD_VAR 0 7
48000: ARRAY
48001: PPUSH
48002: CALL_OW 314
48006: NOT
48007: PUSH
48008: LD_VAR 0 30
48012: AND
48013: IFFALSE 48154
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
48015: LD_ADDR_VAR 0 13
48019: PUSH
48020: LD_VAR 0 30
48024: PPUSH
48025: LD_INT 3
48027: PUSH
48028: LD_INT 54
48030: PUSH
48031: EMPTY
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PPUSH
48038: CALL_OW 72
48042: PPUSH
48043: LD_VAR 0 4
48047: PUSH
48048: LD_VAR 0 7
48052: ARRAY
48053: PPUSH
48054: CALL_OW 74
48058: ST_TO_ADDR
// if z then
48059: LD_VAR 0 13
48063: IFFALSE 48154
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
48065: LD_INT 91
48067: PUSH
48068: LD_VAR 0 13
48072: PUSH
48073: LD_INT 10
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 81
48083: PUSH
48084: LD_VAR 0 13
48088: PPUSH
48089: CALL_OW 255
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PPUSH
48102: CALL_OW 69
48106: PUSH
48107: LD_INT 0
48109: EQUAL
48110: IFFALSE 48134
// ComHeal ( group [ i ] , z ) else
48112: LD_VAR 0 4
48116: PUSH
48117: LD_VAR 0 7
48121: ARRAY
48122: PPUSH
48123: LD_VAR 0 13
48127: PPUSH
48128: CALL_OW 128
48132: GO 48154
// ComMoveToArea ( group [ i ] , f_heal ) ;
48134: LD_VAR 0 4
48138: PUSH
48139: LD_VAR 0 7
48143: ARRAY
48144: PPUSH
48145: LD_VAR 0 23
48149: PPUSH
48150: CALL_OW 113
// end ; continue ;
48154: GO 47185
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
48156: LD_VAR 0 4
48160: PUSH
48161: LD_VAR 0 7
48165: ARRAY
48166: PPUSH
48167: CALL_OW 256
48171: PUSH
48172: LD_INT 700
48174: LESS
48175: PUSH
48176: LD_VAR 0 4
48180: PUSH
48181: LD_VAR 0 7
48185: ARRAY
48186: PUSH
48187: LD_VAR 0 30
48191: IN
48192: NOT
48193: AND
48194: IFFALSE 48218
// to_heal := to_heal union group [ i ] ;
48196: LD_ADDR_VAR 0 30
48200: PUSH
48201: LD_VAR 0 30
48205: PUSH
48206: LD_VAR 0 4
48210: PUSH
48211: LD_VAR 0 7
48215: ARRAY
48216: UNION
48217: ST_TO_ADDR
// if group [ i ] in to_heal then
48218: LD_VAR 0 4
48222: PUSH
48223: LD_VAR 0 7
48227: ARRAY
48228: PUSH
48229: LD_VAR 0 30
48233: IN
48234: IFFALSE 48343
// begin if GetLives ( group [ i ] ) = 1000 then
48236: LD_VAR 0 4
48240: PUSH
48241: LD_VAR 0 7
48245: ARRAY
48246: PPUSH
48247: CALL_OW 256
48251: PUSH
48252: LD_INT 1000
48254: EQUAL
48255: IFFALSE 48281
// to_heal := to_heal diff group [ i ] else
48257: LD_ADDR_VAR 0 30
48261: PUSH
48262: LD_VAR 0 30
48266: PUSH
48267: LD_VAR 0 4
48271: PUSH
48272: LD_VAR 0 7
48276: ARRAY
48277: DIFF
48278: ST_TO_ADDR
48279: GO 48343
// begin if not IsInArea ( group [ i ] , to_heal ) then
48281: LD_VAR 0 4
48285: PUSH
48286: LD_VAR 0 7
48290: ARRAY
48291: PPUSH
48292: LD_VAR 0 30
48296: PPUSH
48297: CALL_OW 308
48301: NOT
48302: IFFALSE 48326
// ComMoveToArea ( group [ i ] , f_heal ) else
48304: LD_VAR 0 4
48308: PUSH
48309: LD_VAR 0 7
48313: ARRAY
48314: PPUSH
48315: LD_VAR 0 23
48319: PPUSH
48320: CALL_OW 113
48324: GO 48341
// ComHold ( group [ i ] ) ;
48326: LD_VAR 0 4
48330: PUSH
48331: LD_VAR 0 7
48335: ARRAY
48336: PPUSH
48337: CALL_OW 140
// continue ;
48341: GO 47185
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48343: LD_VAR 0 4
48347: PUSH
48348: LD_VAR 0 7
48352: ARRAY
48353: PPUSH
48354: LD_INT 10
48356: PPUSH
48357: CALL 44963 0 2
48361: NOT
48362: PUSH
48363: LD_VAR 0 16
48367: PUSH
48368: LD_VAR 0 7
48372: ARRAY
48373: PUSH
48374: EMPTY
48375: EQUAL
48376: NOT
48377: AND
48378: IFFALSE 48644
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48380: LD_VAR 0 4
48384: PUSH
48385: LD_VAR 0 7
48389: ARRAY
48390: PPUSH
48391: CALL_OW 262
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: IN
48406: IFFALSE 48447
// if GetFuel ( group [ i ] ) < 10 then
48408: LD_VAR 0 4
48412: PUSH
48413: LD_VAR 0 7
48417: ARRAY
48418: PPUSH
48419: CALL_OW 261
48423: PUSH
48424: LD_INT 10
48426: LESS
48427: IFFALSE 48447
// SetFuel ( group [ i ] , 12 ) ;
48429: LD_VAR 0 4
48433: PUSH
48434: LD_VAR 0 7
48438: ARRAY
48439: PPUSH
48440: LD_INT 12
48442: PPUSH
48443: CALL_OW 240
// if units_path [ i ] then
48447: LD_VAR 0 16
48451: PUSH
48452: LD_VAR 0 7
48456: ARRAY
48457: IFFALSE 48642
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48459: LD_VAR 0 4
48463: PUSH
48464: LD_VAR 0 7
48468: ARRAY
48469: PPUSH
48470: LD_VAR 0 16
48474: PUSH
48475: LD_VAR 0 7
48479: ARRAY
48480: PUSH
48481: LD_INT 1
48483: ARRAY
48484: PUSH
48485: LD_INT 1
48487: ARRAY
48488: PPUSH
48489: LD_VAR 0 16
48493: PUSH
48494: LD_VAR 0 7
48498: ARRAY
48499: PUSH
48500: LD_INT 1
48502: ARRAY
48503: PUSH
48504: LD_INT 2
48506: ARRAY
48507: PPUSH
48508: CALL_OW 297
48512: PUSH
48513: LD_INT 6
48515: GREATER
48516: IFFALSE 48591
// begin if not HasTask ( group [ i ] ) then
48518: LD_VAR 0 4
48522: PUSH
48523: LD_VAR 0 7
48527: ARRAY
48528: PPUSH
48529: CALL_OW 314
48533: NOT
48534: IFFALSE 48589
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48536: LD_VAR 0 4
48540: PUSH
48541: LD_VAR 0 7
48545: ARRAY
48546: PPUSH
48547: LD_VAR 0 16
48551: PUSH
48552: LD_VAR 0 7
48556: ARRAY
48557: PUSH
48558: LD_INT 1
48560: ARRAY
48561: PUSH
48562: LD_INT 1
48564: ARRAY
48565: PPUSH
48566: LD_VAR 0 16
48570: PUSH
48571: LD_VAR 0 7
48575: ARRAY
48576: PUSH
48577: LD_INT 1
48579: ARRAY
48580: PUSH
48581: LD_INT 2
48583: ARRAY
48584: PPUSH
48585: CALL_OW 114
// end else
48589: GO 48642
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48591: LD_ADDR_VAR 0 15
48595: PUSH
48596: LD_VAR 0 16
48600: PUSH
48601: LD_VAR 0 7
48605: ARRAY
48606: PPUSH
48607: LD_INT 1
48609: PPUSH
48610: CALL_OW 3
48614: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48615: LD_ADDR_VAR 0 16
48619: PUSH
48620: LD_VAR 0 16
48624: PPUSH
48625: LD_VAR 0 7
48629: PPUSH
48630: LD_VAR 0 15
48634: PPUSH
48635: CALL_OW 1
48639: ST_TO_ADDR
// continue ;
48640: GO 47185
// end ; end ; end else
48642: GO 51280
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48644: LD_ADDR_VAR 0 14
48648: PUSH
48649: LD_INT 81
48651: PUSH
48652: LD_VAR 0 4
48656: PUSH
48657: LD_VAR 0 7
48661: ARRAY
48662: PPUSH
48663: CALL_OW 255
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PPUSH
48672: CALL_OW 69
48676: ST_TO_ADDR
// if not tmp then
48677: LD_VAR 0 14
48681: NOT
48682: IFFALSE 48686
// continue ;
48684: GO 47185
// if f_ignore_area then
48686: LD_VAR 0 17
48690: IFFALSE 48778
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48692: LD_ADDR_VAR 0 15
48696: PUSH
48697: LD_VAR 0 14
48701: PPUSH
48702: LD_INT 3
48704: PUSH
48705: LD_INT 92
48707: PUSH
48708: LD_VAR 0 17
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PUSH
48717: LD_VAR 0 17
48721: PUSH
48722: LD_INT 2
48724: ARRAY
48725: PUSH
48726: LD_VAR 0 17
48730: PUSH
48731: LD_INT 3
48733: ARRAY
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PPUSH
48745: CALL_OW 72
48749: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48750: LD_VAR 0 14
48754: PUSH
48755: LD_VAR 0 15
48759: DIFF
48760: IFFALSE 48778
// tmp := tmp diff tmp2 ;
48762: LD_ADDR_VAR 0 14
48766: PUSH
48767: LD_VAR 0 14
48771: PUSH
48772: LD_VAR 0 15
48776: DIFF
48777: ST_TO_ADDR
// end ; if not f_murder then
48778: LD_VAR 0 20
48782: NOT
48783: IFFALSE 48841
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48785: LD_ADDR_VAR 0 15
48789: PUSH
48790: LD_VAR 0 14
48794: PPUSH
48795: LD_INT 3
48797: PUSH
48798: LD_INT 50
48800: PUSH
48801: EMPTY
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PPUSH
48808: CALL_OW 72
48812: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48813: LD_VAR 0 14
48817: PUSH
48818: LD_VAR 0 15
48822: DIFF
48823: IFFALSE 48841
// tmp := tmp diff tmp2 ;
48825: LD_ADDR_VAR 0 14
48829: PUSH
48830: LD_VAR 0 14
48834: PUSH
48835: LD_VAR 0 15
48839: DIFF
48840: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48841: LD_ADDR_VAR 0 14
48845: PUSH
48846: LD_VAR 0 4
48850: PUSH
48851: LD_VAR 0 7
48855: ARRAY
48856: PPUSH
48857: LD_VAR 0 14
48861: PPUSH
48862: LD_INT 1
48864: PPUSH
48865: LD_INT 1
48867: PPUSH
48868: CALL 18606 0 4
48872: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48873: LD_VAR 0 4
48877: PUSH
48878: LD_VAR 0 7
48882: ARRAY
48883: PPUSH
48884: CALL_OW 257
48888: PUSH
48889: LD_INT 1
48891: EQUAL
48892: IFFALSE 49340
// begin if WantPlant ( group [ i ] ) then
48894: LD_VAR 0 4
48898: PUSH
48899: LD_VAR 0 7
48903: ARRAY
48904: PPUSH
48905: CALL 18107 0 1
48909: IFFALSE 48913
// continue ;
48911: GO 47185
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48913: LD_VAR 0 18
48917: PUSH
48918: LD_VAR 0 4
48922: PUSH
48923: LD_VAR 0 7
48927: ARRAY
48928: PPUSH
48929: CALL_OW 310
48933: NOT
48934: AND
48935: PUSH
48936: LD_VAR 0 14
48940: PUSH
48941: LD_INT 1
48943: ARRAY
48944: PUSH
48945: LD_VAR 0 14
48949: PPUSH
48950: LD_INT 21
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 58
48962: PUSH
48963: EMPTY
48964: LIST
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PPUSH
48970: CALL_OW 72
48974: IN
48975: AND
48976: IFFALSE 49012
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48978: LD_VAR 0 4
48982: PUSH
48983: LD_VAR 0 7
48987: ARRAY
48988: PPUSH
48989: LD_VAR 0 14
48993: PUSH
48994: LD_INT 1
48996: ARRAY
48997: PPUSH
48998: CALL_OW 120
// attacking := true ;
49002: LD_ADDR_VAR 0 29
49006: PUSH
49007: LD_INT 1
49009: ST_TO_ADDR
// continue ;
49010: GO 47185
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
49012: LD_VAR 0 26
49016: PUSH
49017: LD_VAR 0 4
49021: PUSH
49022: LD_VAR 0 7
49026: ARRAY
49027: PPUSH
49028: CALL_OW 257
49032: PUSH
49033: LD_INT 1
49035: EQUAL
49036: AND
49037: PUSH
49038: LD_VAR 0 4
49042: PUSH
49043: LD_VAR 0 7
49047: ARRAY
49048: PPUSH
49049: CALL_OW 256
49053: PUSH
49054: LD_INT 800
49056: LESS
49057: AND
49058: PUSH
49059: LD_VAR 0 4
49063: PUSH
49064: LD_VAR 0 7
49068: ARRAY
49069: PPUSH
49070: CALL_OW 318
49074: NOT
49075: AND
49076: IFFALSE 49093
// ComCrawl ( group [ i ] ) ;
49078: LD_VAR 0 4
49082: PUSH
49083: LD_VAR 0 7
49087: ARRAY
49088: PPUSH
49089: CALL_OW 137
// if f_mines then
49093: LD_VAR 0 21
49097: IFFALSE 49340
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
49099: LD_VAR 0 14
49103: PUSH
49104: LD_INT 1
49106: ARRAY
49107: PPUSH
49108: CALL_OW 247
49112: PUSH
49113: LD_INT 3
49115: EQUAL
49116: PUSH
49117: LD_VAR 0 14
49121: PUSH
49122: LD_INT 1
49124: ARRAY
49125: PUSH
49126: LD_VAR 0 27
49130: IN
49131: NOT
49132: AND
49133: IFFALSE 49340
// begin x := GetX ( tmp [ 1 ] ) ;
49135: LD_ADDR_VAR 0 10
49139: PUSH
49140: LD_VAR 0 14
49144: PUSH
49145: LD_INT 1
49147: ARRAY
49148: PPUSH
49149: CALL_OW 250
49153: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
49154: LD_ADDR_VAR 0 11
49158: PUSH
49159: LD_VAR 0 14
49163: PUSH
49164: LD_INT 1
49166: ARRAY
49167: PPUSH
49168: CALL_OW 251
49172: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
49173: LD_ADDR_VAR 0 12
49177: PUSH
49178: LD_VAR 0 4
49182: PUSH
49183: LD_VAR 0 7
49187: ARRAY
49188: PPUSH
49189: CALL 45048 0 1
49193: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49194: LD_VAR 0 4
49198: PUSH
49199: LD_VAR 0 7
49203: ARRAY
49204: PPUSH
49205: LD_VAR 0 10
49209: PPUSH
49210: LD_VAR 0 11
49214: PPUSH
49215: LD_VAR 0 14
49219: PUSH
49220: LD_INT 1
49222: ARRAY
49223: PPUSH
49224: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49228: LD_VAR 0 4
49232: PUSH
49233: LD_VAR 0 7
49237: ARRAY
49238: PPUSH
49239: LD_VAR 0 10
49243: PPUSH
49244: LD_VAR 0 12
49248: PPUSH
49249: LD_INT 7
49251: PPUSH
49252: CALL_OW 272
49256: PPUSH
49257: LD_VAR 0 11
49261: PPUSH
49262: LD_VAR 0 12
49266: PPUSH
49267: LD_INT 7
49269: PPUSH
49270: CALL_OW 273
49274: PPUSH
49275: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49279: LD_VAR 0 4
49283: PUSH
49284: LD_VAR 0 7
49288: ARRAY
49289: PPUSH
49290: LD_INT 71
49292: PPUSH
49293: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49297: LD_ADDR_VAR 0 27
49301: PUSH
49302: LD_VAR 0 27
49306: PPUSH
49307: LD_VAR 0 27
49311: PUSH
49312: LD_INT 1
49314: PLUS
49315: PPUSH
49316: LD_VAR 0 14
49320: PUSH
49321: LD_INT 1
49323: ARRAY
49324: PPUSH
49325: CALL_OW 1
49329: ST_TO_ADDR
// attacking := true ;
49330: LD_ADDR_VAR 0 29
49334: PUSH
49335: LD_INT 1
49337: ST_TO_ADDR
// continue ;
49338: GO 47185
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49340: LD_VAR 0 4
49344: PUSH
49345: LD_VAR 0 7
49349: ARRAY
49350: PPUSH
49351: CALL_OW 257
49355: PUSH
49356: LD_INT 17
49358: EQUAL
49359: PUSH
49360: LD_VAR 0 4
49364: PUSH
49365: LD_VAR 0 7
49369: ARRAY
49370: PPUSH
49371: CALL_OW 110
49375: PUSH
49376: LD_INT 71
49378: EQUAL
49379: NOT
49380: AND
49381: IFFALSE 49527
// begin attacking := false ;
49383: LD_ADDR_VAR 0 29
49387: PUSH
49388: LD_INT 0
49390: ST_TO_ADDR
// k := 5 ;
49391: LD_ADDR_VAR 0 9
49395: PUSH
49396: LD_INT 5
49398: ST_TO_ADDR
// if tmp < k then
49399: LD_VAR 0 14
49403: PUSH
49404: LD_VAR 0 9
49408: LESS
49409: IFFALSE 49421
// k := tmp ;
49411: LD_ADDR_VAR 0 9
49415: PUSH
49416: LD_VAR 0 14
49420: ST_TO_ADDR
// for j = 1 to k do
49421: LD_ADDR_VAR 0 8
49425: PUSH
49426: DOUBLE
49427: LD_INT 1
49429: DEC
49430: ST_TO_ADDR
49431: LD_VAR 0 9
49435: PUSH
49436: FOR_TO
49437: IFFALSE 49525
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49439: LD_VAR 0 14
49443: PUSH
49444: LD_VAR 0 8
49448: ARRAY
49449: PUSH
49450: LD_VAR 0 14
49454: PPUSH
49455: LD_INT 58
49457: PUSH
49458: EMPTY
49459: LIST
49460: PPUSH
49461: CALL_OW 72
49465: IN
49466: NOT
49467: IFFALSE 49523
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49469: LD_VAR 0 4
49473: PUSH
49474: LD_VAR 0 7
49478: ARRAY
49479: PPUSH
49480: LD_VAR 0 14
49484: PUSH
49485: LD_VAR 0 8
49489: ARRAY
49490: PPUSH
49491: CALL_OW 115
// attacking := true ;
49495: LD_ADDR_VAR 0 29
49499: PUSH
49500: LD_INT 1
49502: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49503: LD_VAR 0 4
49507: PUSH
49508: LD_VAR 0 7
49512: ARRAY
49513: PPUSH
49514: LD_INT 71
49516: PPUSH
49517: CALL_OW 109
// continue ;
49521: GO 49436
// end ; end ;
49523: GO 49436
49525: POP
49526: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49527: LD_VAR 0 4
49531: PUSH
49532: LD_VAR 0 7
49536: ARRAY
49537: PPUSH
49538: CALL_OW 257
49542: PUSH
49543: LD_INT 8
49545: EQUAL
49546: PUSH
49547: LD_VAR 0 4
49551: PUSH
49552: LD_VAR 0 7
49556: ARRAY
49557: PPUSH
49558: CALL_OW 264
49562: PUSH
49563: LD_INT 28
49565: PUSH
49566: LD_INT 45
49568: PUSH
49569: LD_INT 7
49571: PUSH
49572: LD_INT 47
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: IN
49581: OR
49582: IFFALSE 49812
// begin attacking := false ;
49584: LD_ADDR_VAR 0 29
49588: PUSH
49589: LD_INT 0
49591: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49592: LD_VAR 0 14
49596: PUSH
49597: LD_INT 1
49599: ARRAY
49600: PPUSH
49601: CALL_OW 266
49605: PUSH
49606: LD_INT 32
49608: PUSH
49609: LD_INT 31
49611: PUSH
49612: LD_INT 33
49614: PUSH
49615: LD_INT 4
49617: PUSH
49618: LD_INT 5
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: IN
49628: IFFALSE 49812
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49630: LD_ADDR_VAR 0 9
49634: PUSH
49635: LD_VAR 0 14
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PPUSH
49644: CALL_OW 266
49648: PPUSH
49649: LD_VAR 0 14
49653: PUSH
49654: LD_INT 1
49656: ARRAY
49657: PPUSH
49658: CALL_OW 250
49662: PPUSH
49663: LD_VAR 0 14
49667: PUSH
49668: LD_INT 1
49670: ARRAY
49671: PPUSH
49672: CALL_OW 251
49676: PPUSH
49677: LD_VAR 0 14
49681: PUSH
49682: LD_INT 1
49684: ARRAY
49685: PPUSH
49686: CALL_OW 254
49690: PPUSH
49691: LD_VAR 0 14
49695: PUSH
49696: LD_INT 1
49698: ARRAY
49699: PPUSH
49700: CALL_OW 248
49704: PPUSH
49705: LD_INT 0
49707: PPUSH
49708: CALL 26418 0 6
49712: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49713: LD_ADDR_VAR 0 8
49717: PUSH
49718: LD_VAR 0 4
49722: PUSH
49723: LD_VAR 0 7
49727: ARRAY
49728: PPUSH
49729: LD_VAR 0 9
49733: PPUSH
49734: CALL 45111 0 2
49738: ST_TO_ADDR
// if j then
49739: LD_VAR 0 8
49743: IFFALSE 49812
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49745: LD_VAR 0 8
49749: PUSH
49750: LD_INT 1
49752: ARRAY
49753: PPUSH
49754: LD_VAR 0 8
49758: PUSH
49759: LD_INT 2
49761: ARRAY
49762: PPUSH
49763: CALL_OW 488
49767: IFFALSE 49812
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49769: LD_VAR 0 4
49773: PUSH
49774: LD_VAR 0 7
49778: ARRAY
49779: PPUSH
49780: LD_VAR 0 8
49784: PUSH
49785: LD_INT 1
49787: ARRAY
49788: PPUSH
49789: LD_VAR 0 8
49793: PUSH
49794: LD_INT 2
49796: ARRAY
49797: PPUSH
49798: CALL_OW 116
// attacking := true ;
49802: LD_ADDR_VAR 0 29
49806: PUSH
49807: LD_INT 1
49809: ST_TO_ADDR
// continue ;
49810: GO 47185
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49812: LD_VAR 0 4
49816: PUSH
49817: LD_VAR 0 7
49821: ARRAY
49822: PPUSH
49823: CALL_OW 265
49827: PUSH
49828: LD_INT 11
49830: EQUAL
49831: IFFALSE 50109
// begin k := 10 ;
49833: LD_ADDR_VAR 0 9
49837: PUSH
49838: LD_INT 10
49840: ST_TO_ADDR
// x := 0 ;
49841: LD_ADDR_VAR 0 10
49845: PUSH
49846: LD_INT 0
49848: ST_TO_ADDR
// if tmp < k then
49849: LD_VAR 0 14
49853: PUSH
49854: LD_VAR 0 9
49858: LESS
49859: IFFALSE 49871
// k := tmp ;
49861: LD_ADDR_VAR 0 9
49865: PUSH
49866: LD_VAR 0 14
49870: ST_TO_ADDR
// for j = k downto 1 do
49871: LD_ADDR_VAR 0 8
49875: PUSH
49876: DOUBLE
49877: LD_VAR 0 9
49881: INC
49882: ST_TO_ADDR
49883: LD_INT 1
49885: PUSH
49886: FOR_DOWNTO
49887: IFFALSE 49962
// begin if GetType ( tmp [ j ] ) = unit_human then
49889: LD_VAR 0 14
49893: PUSH
49894: LD_VAR 0 8
49898: ARRAY
49899: PPUSH
49900: CALL_OW 247
49904: PUSH
49905: LD_INT 1
49907: EQUAL
49908: IFFALSE 49960
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49910: LD_VAR 0 4
49914: PUSH
49915: LD_VAR 0 7
49919: ARRAY
49920: PPUSH
49921: LD_VAR 0 14
49925: PUSH
49926: LD_VAR 0 8
49930: ARRAY
49931: PPUSH
49932: CALL 45382 0 2
// x := tmp [ j ] ;
49936: LD_ADDR_VAR 0 10
49940: PUSH
49941: LD_VAR 0 14
49945: PUSH
49946: LD_VAR 0 8
49950: ARRAY
49951: ST_TO_ADDR
// attacking := true ;
49952: LD_ADDR_VAR 0 29
49956: PUSH
49957: LD_INT 1
49959: ST_TO_ADDR
// end ; end ;
49960: GO 49886
49962: POP
49963: POP
// if not x then
49964: LD_VAR 0 10
49968: NOT
49969: IFFALSE 50109
// begin attacking := true ;
49971: LD_ADDR_VAR 0 29
49975: PUSH
49976: LD_INT 1
49978: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49979: LD_VAR 0 4
49983: PUSH
49984: LD_VAR 0 7
49988: ARRAY
49989: PPUSH
49990: CALL_OW 250
49994: PPUSH
49995: LD_VAR 0 4
49999: PUSH
50000: LD_VAR 0 7
50004: ARRAY
50005: PPUSH
50006: CALL_OW 251
50010: PPUSH
50011: CALL_OW 546
50015: PUSH
50016: LD_INT 2
50018: ARRAY
50019: PUSH
50020: LD_VAR 0 14
50024: PUSH
50025: LD_INT 1
50027: ARRAY
50028: PPUSH
50029: CALL_OW 250
50033: PPUSH
50034: LD_VAR 0 14
50038: PUSH
50039: LD_INT 1
50041: ARRAY
50042: PPUSH
50043: CALL_OW 251
50047: PPUSH
50048: CALL_OW 546
50052: PUSH
50053: LD_INT 2
50055: ARRAY
50056: EQUAL
50057: IFFALSE 50085
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
50059: LD_VAR 0 4
50063: PUSH
50064: LD_VAR 0 7
50068: ARRAY
50069: PPUSH
50070: LD_VAR 0 14
50074: PUSH
50075: LD_INT 1
50077: ARRAY
50078: PPUSH
50079: CALL 45382 0 2
50083: GO 50109
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50085: LD_VAR 0 4
50089: PUSH
50090: LD_VAR 0 7
50094: ARRAY
50095: PPUSH
50096: LD_VAR 0 14
50100: PUSH
50101: LD_INT 1
50103: ARRAY
50104: PPUSH
50105: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
50109: LD_VAR 0 4
50113: PUSH
50114: LD_VAR 0 7
50118: ARRAY
50119: PPUSH
50120: CALL_OW 264
50124: PUSH
50125: LD_INT 29
50127: EQUAL
50128: IFFALSE 50494
// begin if WantsToAttack ( group [ i ] ) in bombed then
50130: LD_VAR 0 4
50134: PUSH
50135: LD_VAR 0 7
50139: ARRAY
50140: PPUSH
50141: CALL_OW 319
50145: PUSH
50146: LD_VAR 0 28
50150: IN
50151: IFFALSE 50155
// continue ;
50153: GO 47185
// k := 8 ;
50155: LD_ADDR_VAR 0 9
50159: PUSH
50160: LD_INT 8
50162: ST_TO_ADDR
// x := 0 ;
50163: LD_ADDR_VAR 0 10
50167: PUSH
50168: LD_INT 0
50170: ST_TO_ADDR
// if tmp < k then
50171: LD_VAR 0 14
50175: PUSH
50176: LD_VAR 0 9
50180: LESS
50181: IFFALSE 50193
// k := tmp ;
50183: LD_ADDR_VAR 0 9
50187: PUSH
50188: LD_VAR 0 14
50192: ST_TO_ADDR
// for j = 1 to k do
50193: LD_ADDR_VAR 0 8
50197: PUSH
50198: DOUBLE
50199: LD_INT 1
50201: DEC
50202: ST_TO_ADDR
50203: LD_VAR 0 9
50207: PUSH
50208: FOR_TO
50209: IFFALSE 50341
// begin if GetType ( tmp [ j ] ) = unit_building then
50211: LD_VAR 0 14
50215: PUSH
50216: LD_VAR 0 8
50220: ARRAY
50221: PPUSH
50222: CALL_OW 247
50226: PUSH
50227: LD_INT 3
50229: EQUAL
50230: IFFALSE 50339
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50232: LD_VAR 0 14
50236: PUSH
50237: LD_VAR 0 8
50241: ARRAY
50242: PUSH
50243: LD_VAR 0 28
50247: IN
50248: NOT
50249: PUSH
50250: LD_VAR 0 14
50254: PUSH
50255: LD_VAR 0 8
50259: ARRAY
50260: PPUSH
50261: CALL_OW 313
50265: AND
50266: IFFALSE 50339
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50268: LD_VAR 0 4
50272: PUSH
50273: LD_VAR 0 7
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 14
50283: PUSH
50284: LD_VAR 0 8
50288: ARRAY
50289: PPUSH
50290: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50294: LD_ADDR_VAR 0 28
50298: PUSH
50299: LD_VAR 0 28
50303: PPUSH
50304: LD_VAR 0 28
50308: PUSH
50309: LD_INT 1
50311: PLUS
50312: PPUSH
50313: LD_VAR 0 14
50317: PUSH
50318: LD_VAR 0 8
50322: ARRAY
50323: PPUSH
50324: CALL_OW 1
50328: ST_TO_ADDR
// attacking := true ;
50329: LD_ADDR_VAR 0 29
50333: PUSH
50334: LD_INT 1
50336: ST_TO_ADDR
// break ;
50337: GO 50341
// end ; end ;
50339: GO 50208
50341: POP
50342: POP
// if not attacking and f_attack_depot then
50343: LD_VAR 0 29
50347: NOT
50348: PUSH
50349: LD_VAR 0 25
50353: AND
50354: IFFALSE 50449
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50356: LD_ADDR_VAR 0 13
50360: PUSH
50361: LD_VAR 0 14
50365: PPUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 30
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 30
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: PPUSH
50394: CALL_OW 72
50398: ST_TO_ADDR
// if z then
50399: LD_VAR 0 13
50403: IFFALSE 50449
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50405: LD_VAR 0 4
50409: PUSH
50410: LD_VAR 0 7
50414: ARRAY
50415: PPUSH
50416: LD_VAR 0 13
50420: PPUSH
50421: LD_VAR 0 4
50425: PUSH
50426: LD_VAR 0 7
50430: ARRAY
50431: PPUSH
50432: CALL_OW 74
50436: PPUSH
50437: CALL_OW 115
// attacking := true ;
50441: LD_ADDR_VAR 0 29
50445: PUSH
50446: LD_INT 1
50448: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50449: LD_VAR 0 4
50453: PUSH
50454: LD_VAR 0 7
50458: ARRAY
50459: PPUSH
50460: CALL_OW 256
50464: PUSH
50465: LD_INT 500
50467: LESS
50468: IFFALSE 50494
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50470: LD_VAR 0 4
50474: PUSH
50475: LD_VAR 0 7
50479: ARRAY
50480: PPUSH
50481: LD_VAR 0 14
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PPUSH
50490: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
50494: LD_VAR 0 4
50498: PUSH
50499: LD_VAR 0 7
50503: ARRAY
50504: PPUSH
50505: CALL_OW 264
50509: PUSH
50510: LD_INT 49
50512: EQUAL
50513: IFFALSE 50634
// begin if not HasTask ( group [ i ] ) then
50515: LD_VAR 0 4
50519: PUSH
50520: LD_VAR 0 7
50524: ARRAY
50525: PPUSH
50526: CALL_OW 314
50530: NOT
50531: IFFALSE 50634
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
50533: LD_ADDR_VAR 0 9
50537: PUSH
50538: LD_INT 81
50540: PUSH
50541: LD_VAR 0 4
50545: PUSH
50546: LD_VAR 0 7
50550: ARRAY
50551: PPUSH
50552: CALL_OW 255
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PPUSH
50561: CALL_OW 69
50565: PPUSH
50566: LD_VAR 0 4
50570: PUSH
50571: LD_VAR 0 7
50575: ARRAY
50576: PPUSH
50577: CALL_OW 74
50581: ST_TO_ADDR
// if k then
50582: LD_VAR 0 9
50586: IFFALSE 50634
// if GetDistUnits ( group [ i ] , k ) > 10 then
50588: LD_VAR 0 4
50592: PUSH
50593: LD_VAR 0 7
50597: ARRAY
50598: PPUSH
50599: LD_VAR 0 9
50603: PPUSH
50604: CALL_OW 296
50608: PUSH
50609: LD_INT 10
50611: GREATER
50612: IFFALSE 50634
// ComMoveUnit ( group [ i ] , k ) ;
50614: LD_VAR 0 4
50618: PUSH
50619: LD_VAR 0 7
50623: ARRAY
50624: PPUSH
50625: LD_VAR 0 9
50629: PPUSH
50630: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50634: LD_VAR 0 4
50638: PUSH
50639: LD_VAR 0 7
50643: ARRAY
50644: PPUSH
50645: CALL_OW 256
50649: PUSH
50650: LD_INT 250
50652: LESS
50653: PUSH
50654: LD_VAR 0 4
50658: PUSH
50659: LD_VAR 0 7
50663: ARRAY
50664: PUSH
50665: LD_INT 21
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 23
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PPUSH
50689: CALL_OW 69
50693: IN
50694: AND
50695: IFFALSE 50820
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50697: LD_ADDR_VAR 0 9
50701: PUSH
50702: LD_OWVAR 3
50706: PUSH
50707: LD_VAR 0 4
50711: PUSH
50712: LD_VAR 0 7
50716: ARRAY
50717: DIFF
50718: PPUSH
50719: LD_VAR 0 4
50723: PUSH
50724: LD_VAR 0 7
50728: ARRAY
50729: PPUSH
50730: CALL_OW 74
50734: ST_TO_ADDR
// if not k then
50735: LD_VAR 0 9
50739: NOT
50740: IFFALSE 50744
// continue ;
50742: GO 47185
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50744: LD_VAR 0 9
50748: PUSH
50749: LD_INT 81
50751: PUSH
50752: LD_VAR 0 4
50756: PUSH
50757: LD_VAR 0 7
50761: ARRAY
50762: PPUSH
50763: CALL_OW 255
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PPUSH
50772: CALL_OW 69
50776: IN
50777: PUSH
50778: LD_VAR 0 9
50782: PPUSH
50783: LD_VAR 0 4
50787: PUSH
50788: LD_VAR 0 7
50792: ARRAY
50793: PPUSH
50794: CALL_OW 296
50798: PUSH
50799: LD_INT 5
50801: LESS
50802: AND
50803: IFFALSE 50820
// ComAutodestruct ( group [ i ] ) ;
50805: LD_VAR 0 4
50809: PUSH
50810: LD_VAR 0 7
50814: ARRAY
50815: PPUSH
50816: CALL 45280 0 1
// end ; if f_attack_depot then
50820: LD_VAR 0 25
50824: IFFALSE 50936
// begin k := 6 ;
50826: LD_ADDR_VAR 0 9
50830: PUSH
50831: LD_INT 6
50833: ST_TO_ADDR
// if tmp < k then
50834: LD_VAR 0 14
50838: PUSH
50839: LD_VAR 0 9
50843: LESS
50844: IFFALSE 50856
// k := tmp ;
50846: LD_ADDR_VAR 0 9
50850: PUSH
50851: LD_VAR 0 14
50855: ST_TO_ADDR
// for j = 1 to k do
50856: LD_ADDR_VAR 0 8
50860: PUSH
50861: DOUBLE
50862: LD_INT 1
50864: DEC
50865: ST_TO_ADDR
50866: LD_VAR 0 9
50870: PUSH
50871: FOR_TO
50872: IFFALSE 50934
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50874: LD_VAR 0 8
50878: PPUSH
50879: CALL_OW 266
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: IN
50894: IFFALSE 50932
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50896: LD_VAR 0 4
50900: PUSH
50901: LD_VAR 0 7
50905: ARRAY
50906: PPUSH
50907: LD_VAR 0 14
50911: PUSH
50912: LD_VAR 0 8
50916: ARRAY
50917: PPUSH
50918: CALL_OW 115
// attacking := true ;
50922: LD_ADDR_VAR 0 29
50926: PUSH
50927: LD_INT 1
50929: ST_TO_ADDR
// break ;
50930: GO 50934
// end ;
50932: GO 50871
50934: POP
50935: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50936: LD_VAR 0 4
50940: PUSH
50941: LD_VAR 0 7
50945: ARRAY
50946: PPUSH
50947: CALL_OW 302
50951: PUSH
50952: LD_VAR 0 29
50956: NOT
50957: AND
50958: IFFALSE 51280
// begin if GetTag ( group [ i ] ) = 71 then
50960: LD_VAR 0 4
50964: PUSH
50965: LD_VAR 0 7
50969: ARRAY
50970: PPUSH
50971: CALL_OW 110
50975: PUSH
50976: LD_INT 71
50978: EQUAL
50979: IFFALSE 51020
// begin if HasTask ( group [ i ] ) then
50981: LD_VAR 0 4
50985: PUSH
50986: LD_VAR 0 7
50990: ARRAY
50991: PPUSH
50992: CALL_OW 314
50996: IFFALSE 51002
// continue else
50998: GO 47185
51000: GO 51020
// SetTag ( group [ i ] , 0 ) ;
51002: LD_VAR 0 4
51006: PUSH
51007: LD_VAR 0 7
51011: ARRAY
51012: PPUSH
51013: LD_INT 0
51015: PPUSH
51016: CALL_OW 109
// end ; k := 8 ;
51020: LD_ADDR_VAR 0 9
51024: PUSH
51025: LD_INT 8
51027: ST_TO_ADDR
// x := 0 ;
51028: LD_ADDR_VAR 0 10
51032: PUSH
51033: LD_INT 0
51035: ST_TO_ADDR
// if tmp < k then
51036: LD_VAR 0 14
51040: PUSH
51041: LD_VAR 0 9
51045: LESS
51046: IFFALSE 51058
// k := tmp ;
51048: LD_ADDR_VAR 0 9
51052: PUSH
51053: LD_VAR 0 14
51057: ST_TO_ADDR
// for j = 1 to k do
51058: LD_ADDR_VAR 0 8
51062: PUSH
51063: DOUBLE
51064: LD_INT 1
51066: DEC
51067: ST_TO_ADDR
51068: LD_VAR 0 9
51072: PUSH
51073: FOR_TO
51074: IFFALSE 51172
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
51076: LD_VAR 0 14
51080: PUSH
51081: LD_VAR 0 8
51085: ARRAY
51086: PPUSH
51087: CALL_OW 247
51091: PUSH
51092: LD_INT 1
51094: EQUAL
51095: PUSH
51096: LD_VAR 0 14
51100: PUSH
51101: LD_VAR 0 8
51105: ARRAY
51106: PPUSH
51107: CALL_OW 256
51111: PUSH
51112: LD_INT 250
51114: LESS
51115: PUSH
51116: LD_VAR 0 20
51120: AND
51121: PUSH
51122: LD_VAR 0 20
51126: NOT
51127: PUSH
51128: LD_VAR 0 14
51132: PUSH
51133: LD_VAR 0 8
51137: ARRAY
51138: PPUSH
51139: CALL_OW 256
51143: PUSH
51144: LD_INT 250
51146: GREATEREQUAL
51147: AND
51148: OR
51149: AND
51150: IFFALSE 51170
// begin x := tmp [ j ] ;
51152: LD_ADDR_VAR 0 10
51156: PUSH
51157: LD_VAR 0 14
51161: PUSH
51162: LD_VAR 0 8
51166: ARRAY
51167: ST_TO_ADDR
// break ;
51168: GO 51172
// end ;
51170: GO 51073
51172: POP
51173: POP
// if x then
51174: LD_VAR 0 10
51178: IFFALSE 51202
// ComAttackUnit ( group [ i ] , x ) else
51180: LD_VAR 0 4
51184: PUSH
51185: LD_VAR 0 7
51189: ARRAY
51190: PPUSH
51191: LD_VAR 0 10
51195: PPUSH
51196: CALL_OW 115
51200: GO 51226
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
51202: LD_VAR 0 4
51206: PUSH
51207: LD_VAR 0 7
51211: ARRAY
51212: PPUSH
51213: LD_VAR 0 14
51217: PUSH
51218: LD_INT 1
51220: ARRAY
51221: PPUSH
51222: CALL_OW 115
// if not HasTask ( group [ i ] ) then
51226: LD_VAR 0 4
51230: PUSH
51231: LD_VAR 0 7
51235: ARRAY
51236: PPUSH
51237: CALL_OW 314
51241: NOT
51242: IFFALSE 51280
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
51244: LD_VAR 0 4
51248: PUSH
51249: LD_VAR 0 7
51253: ARRAY
51254: PPUSH
51255: LD_VAR 0 14
51259: PPUSH
51260: LD_VAR 0 4
51264: PUSH
51265: LD_VAR 0 7
51269: ARRAY
51270: PPUSH
51271: CALL_OW 74
51275: PPUSH
51276: CALL_OW 115
// end ; end ; end ;
51280: GO 47185
51282: POP
51283: POP
// wait ( 0 0$1 ) ;
51284: LD_INT 35
51286: PPUSH
51287: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
51291: LD_VAR 0 4
51295: PUSH
51296: EMPTY
51297: EQUAL
51298: PUSH
51299: LD_INT 81
51301: PUSH
51302: LD_VAR 0 35
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PPUSH
51311: CALL_OW 69
51315: NOT
51316: OR
51317: IFFALSE 47170
// end ;
51319: LD_VAR 0 2
51323: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51324: LD_INT 0
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
// if not base_units then
51330: LD_VAR 0 1
51334: NOT
51335: IFFALSE 51339
// exit ;
51337: GO 51426
// result := false ;
51339: LD_ADDR_VAR 0 2
51343: PUSH
51344: LD_INT 0
51346: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51347: LD_ADDR_VAR 0 5
51351: PUSH
51352: LD_VAR 0 1
51356: PPUSH
51357: LD_INT 21
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PPUSH
51367: CALL_OW 72
51371: ST_TO_ADDR
// if not tmp then
51372: LD_VAR 0 5
51376: NOT
51377: IFFALSE 51381
// exit ;
51379: GO 51426
// for i in tmp do
51381: LD_ADDR_VAR 0 3
51385: PUSH
51386: LD_VAR 0 5
51390: PUSH
51391: FOR_IN
51392: IFFALSE 51424
// begin result := EnemyInRange ( i , 22 ) ;
51394: LD_ADDR_VAR 0 2
51398: PUSH
51399: LD_VAR 0 3
51403: PPUSH
51404: LD_INT 22
51406: PPUSH
51407: CALL 44963 0 2
51411: ST_TO_ADDR
// if result then
51412: LD_VAR 0 2
51416: IFFALSE 51422
// exit ;
51418: POP
51419: POP
51420: GO 51426
// end ;
51422: GO 51391
51424: POP
51425: POP
// end ;
51426: LD_VAR 0 2
51430: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51431: LD_INT 0
51433: PPUSH
51434: PPUSH
// if not units then
51435: LD_VAR 0 1
51439: NOT
51440: IFFALSE 51444
// exit ;
51442: GO 51514
// result := [ ] ;
51444: LD_ADDR_VAR 0 3
51448: PUSH
51449: EMPTY
51450: ST_TO_ADDR
// for i in units do
51451: LD_ADDR_VAR 0 4
51455: PUSH
51456: LD_VAR 0 1
51460: PUSH
51461: FOR_IN
51462: IFFALSE 51512
// if GetTag ( i ) = tag then
51464: LD_VAR 0 4
51468: PPUSH
51469: CALL_OW 110
51473: PUSH
51474: LD_VAR 0 2
51478: EQUAL
51479: IFFALSE 51510
// result := Insert ( result , result + 1 , i ) ;
51481: LD_ADDR_VAR 0 3
51485: PUSH
51486: LD_VAR 0 3
51490: PPUSH
51491: LD_VAR 0 3
51495: PUSH
51496: LD_INT 1
51498: PLUS
51499: PPUSH
51500: LD_VAR 0 4
51504: PPUSH
51505: CALL_OW 2
51509: ST_TO_ADDR
51510: GO 51461
51512: POP
51513: POP
// end ;
51514: LD_VAR 0 3
51518: RET
// export function IsDriver ( un ) ; begin
51519: LD_INT 0
51521: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51522: LD_ADDR_VAR 0 2
51526: PUSH
51527: LD_VAR 0 1
51531: PUSH
51532: LD_INT 55
51534: PUSH
51535: EMPTY
51536: LIST
51537: PPUSH
51538: CALL_OW 69
51542: IN
51543: ST_TO_ADDR
// end ;
51544: LD_VAR 0 2
51548: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51549: LD_INT 0
51551: PPUSH
51552: PPUSH
// list := [ ] ;
51553: LD_ADDR_VAR 0 5
51557: PUSH
51558: EMPTY
51559: ST_TO_ADDR
// case d of 0 :
51560: LD_VAR 0 3
51564: PUSH
51565: LD_INT 0
51567: DOUBLE
51568: EQUAL
51569: IFTRUE 51573
51571: GO 51706
51573: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51574: LD_ADDR_VAR 0 5
51578: PUSH
51579: LD_VAR 0 1
51583: PUSH
51584: LD_INT 4
51586: MINUS
51587: PUSH
51588: LD_VAR 0 2
51592: PUSH
51593: LD_INT 4
51595: MINUS
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: PUSH
51605: LD_VAR 0 1
51609: PUSH
51610: LD_INT 3
51612: MINUS
51613: PUSH
51614: LD_VAR 0 2
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: PUSH
51627: LD_VAR 0 1
51631: PUSH
51632: LD_INT 4
51634: PLUS
51635: PUSH
51636: LD_VAR 0 2
51640: PUSH
51641: LD_INT 4
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: LD_VAR 0 1
51653: PUSH
51654: LD_INT 3
51656: PLUS
51657: PUSH
51658: LD_VAR 0 2
51662: PUSH
51663: LD_INT 3
51665: PLUS
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_VAR 0 1
51679: PUSH
51680: LD_VAR 0 2
51684: PUSH
51685: LD_INT 4
51687: PLUS
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// end ; 1 :
51704: GO 52404
51706: LD_INT 1
51708: DOUBLE
51709: EQUAL
51710: IFTRUE 51714
51712: GO 51847
51714: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51715: LD_ADDR_VAR 0 5
51719: PUSH
51720: LD_VAR 0 1
51724: PUSH
51725: LD_VAR 0 2
51729: PUSH
51730: LD_INT 4
51732: MINUS
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: PUSH
51742: LD_VAR 0 1
51746: PUSH
51747: LD_INT 3
51749: MINUS
51750: PUSH
51751: LD_VAR 0 2
51755: PUSH
51756: LD_INT 3
51758: MINUS
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: PUSH
51768: LD_VAR 0 1
51772: PUSH
51773: LD_INT 4
51775: MINUS
51776: PUSH
51777: LD_VAR 0 2
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: PUSH
51790: LD_VAR 0 1
51794: PUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_INT 3
51802: PLUS
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: PUSH
51812: LD_VAR 0 1
51816: PUSH
51817: LD_INT 4
51819: PLUS
51820: PUSH
51821: LD_VAR 0 2
51825: PUSH
51826: LD_INT 4
51828: PLUS
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: ST_TO_ADDR
// end ; 2 :
51845: GO 52404
51847: LD_INT 2
51849: DOUBLE
51850: EQUAL
51851: IFTRUE 51855
51853: GO 51984
51855: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51856: LD_ADDR_VAR 0 5
51860: PUSH
51861: LD_VAR 0 1
51865: PUSH
51866: LD_VAR 0 2
51870: PUSH
51871: LD_INT 3
51873: MINUS
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: PUSH
51883: LD_VAR 0 1
51887: PUSH
51888: LD_INT 4
51890: PLUS
51891: PUSH
51892: LD_VAR 0 2
51896: PUSH
51897: LD_INT 4
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: PUSH
51905: LD_VAR 0 1
51909: PUSH
51910: LD_VAR 0 2
51914: PUSH
51915: LD_INT 4
51917: PLUS
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: PUSH
51927: LD_VAR 0 1
51931: PUSH
51932: LD_INT 3
51934: MINUS
51935: PUSH
51936: LD_VAR 0 2
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_INT 4
51956: MINUS
51957: PUSH
51958: LD_VAR 0 2
51962: PUSH
51963: LD_INT 4
51965: MINUS
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: ST_TO_ADDR
// end ; 3 :
51982: GO 52404
51984: LD_INT 3
51986: DOUBLE
51987: EQUAL
51988: IFTRUE 51992
51990: GO 52125
51992: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51993: LD_ADDR_VAR 0 5
51997: PUSH
51998: LD_VAR 0 1
52002: PUSH
52003: LD_INT 3
52005: PLUS
52006: PUSH
52007: LD_VAR 0 2
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: PUSH
52020: LD_VAR 0 1
52024: PUSH
52025: LD_INT 4
52027: PLUS
52028: PUSH
52029: LD_VAR 0 2
52033: PUSH
52034: LD_INT 4
52036: PLUS
52037: PUSH
52038: LD_INT 5
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: PUSH
52046: LD_VAR 0 1
52050: PUSH
52051: LD_INT 4
52053: MINUS
52054: PUSH
52055: LD_VAR 0 2
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: LIST
52067: PUSH
52068: LD_VAR 0 1
52072: PUSH
52073: LD_VAR 0 2
52077: PUSH
52078: LD_INT 4
52080: MINUS
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: PUSH
52090: LD_VAR 0 1
52094: PUSH
52095: LD_INT 3
52097: MINUS
52098: PUSH
52099: LD_VAR 0 2
52103: PUSH
52104: LD_INT 3
52106: MINUS
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: ST_TO_ADDR
// end ; 4 :
52123: GO 52404
52125: LD_INT 4
52127: DOUBLE
52128: EQUAL
52129: IFTRUE 52133
52131: GO 52266
52133: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52134: LD_ADDR_VAR 0 5
52138: PUSH
52139: LD_VAR 0 1
52143: PUSH
52144: LD_VAR 0 2
52148: PUSH
52149: LD_INT 4
52151: PLUS
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: PUSH
52161: LD_VAR 0 1
52165: PUSH
52166: LD_INT 3
52168: PLUS
52169: PUSH
52170: LD_VAR 0 2
52174: PUSH
52175: LD_INT 3
52177: PLUS
52178: PUSH
52179: LD_INT 5
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: PUSH
52187: LD_VAR 0 1
52191: PUSH
52192: LD_INT 4
52194: PLUS
52195: PUSH
52196: LD_VAR 0 2
52200: PUSH
52201: LD_INT 4
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: PUSH
52209: LD_VAR 0 1
52213: PUSH
52214: LD_VAR 0 2
52218: PUSH
52219: LD_INT 3
52221: MINUS
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: PUSH
52231: LD_VAR 0 1
52235: PUSH
52236: LD_INT 4
52238: MINUS
52239: PUSH
52240: LD_VAR 0 2
52244: PUSH
52245: LD_INT 4
52247: MINUS
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// end ; 5 :
52264: GO 52404
52266: LD_INT 5
52268: DOUBLE
52269: EQUAL
52270: IFTRUE 52274
52272: GO 52403
52274: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52275: LD_ADDR_VAR 0 5
52279: PUSH
52280: LD_VAR 0 1
52284: PUSH
52285: LD_INT 4
52287: MINUS
52288: PUSH
52289: LD_VAR 0 2
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: PUSH
52302: LD_VAR 0 1
52306: PUSH
52307: LD_VAR 0 2
52311: PUSH
52312: LD_INT 4
52314: MINUS
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: PUSH
52324: LD_VAR 0 1
52328: PUSH
52329: LD_INT 4
52331: PLUS
52332: PUSH
52333: LD_VAR 0 2
52337: PUSH
52338: LD_INT 4
52340: PLUS
52341: PUSH
52342: LD_INT 5
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: PUSH
52350: LD_VAR 0 1
52354: PUSH
52355: LD_INT 3
52357: PLUS
52358: PUSH
52359: LD_VAR 0 2
52363: PUSH
52364: LD_INT 4
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: LD_VAR 0 1
52376: PUSH
52377: LD_VAR 0 2
52381: PUSH
52382: LD_INT 3
52384: PLUS
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: ST_TO_ADDR
// end ; end ;
52401: GO 52404
52403: POP
// result := list ;
52404: LD_ADDR_VAR 0 4
52408: PUSH
52409: LD_VAR 0 5
52413: ST_TO_ADDR
// end ;
52414: LD_VAR 0 4
52418: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52419: LD_INT 0
52421: PPUSH
52422: PPUSH
52423: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52424: LD_VAR 0 1
52428: NOT
52429: PUSH
52430: LD_VAR 0 2
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: IN
52453: NOT
52454: OR
52455: IFFALSE 52459
// exit ;
52457: GO 52551
// tmp := [ ] ;
52459: LD_ADDR_VAR 0 5
52463: PUSH
52464: EMPTY
52465: ST_TO_ADDR
// for i in units do
52466: LD_ADDR_VAR 0 4
52470: PUSH
52471: LD_VAR 0 1
52475: PUSH
52476: FOR_IN
52477: IFFALSE 52520
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52479: LD_ADDR_VAR 0 5
52483: PUSH
52484: LD_VAR 0 5
52488: PPUSH
52489: LD_VAR 0 5
52493: PUSH
52494: LD_INT 1
52496: PLUS
52497: PPUSH
52498: LD_VAR 0 4
52502: PPUSH
52503: LD_VAR 0 2
52507: PPUSH
52508: CALL_OW 259
52512: PPUSH
52513: CALL_OW 2
52517: ST_TO_ADDR
52518: GO 52476
52520: POP
52521: POP
// if not tmp then
52522: LD_VAR 0 5
52526: NOT
52527: IFFALSE 52531
// exit ;
52529: GO 52551
// result := SortListByListDesc ( units , tmp ) ;
52531: LD_ADDR_VAR 0 3
52535: PUSH
52536: LD_VAR 0 1
52540: PPUSH
52541: LD_VAR 0 5
52545: PPUSH
52546: CALL_OW 77
52550: ST_TO_ADDR
// end ;
52551: LD_VAR 0 3
52555: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52556: LD_INT 0
52558: PPUSH
52559: PPUSH
52560: PPUSH
// x := GetX ( building ) ;
52561: LD_ADDR_VAR 0 4
52565: PUSH
52566: LD_VAR 0 2
52570: PPUSH
52571: CALL_OW 250
52575: ST_TO_ADDR
// y := GetY ( building ) ;
52576: LD_ADDR_VAR 0 5
52580: PUSH
52581: LD_VAR 0 2
52585: PPUSH
52586: CALL_OW 251
52590: ST_TO_ADDR
// if GetTaskList ( unit ) then
52591: LD_VAR 0 1
52595: PPUSH
52596: CALL_OW 437
52600: IFFALSE 52695
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52602: LD_STRING e
52604: PUSH
52605: LD_VAR 0 1
52609: PPUSH
52610: CALL_OW 437
52614: PUSH
52615: LD_INT 1
52617: ARRAY
52618: PUSH
52619: LD_INT 1
52621: ARRAY
52622: EQUAL
52623: PUSH
52624: LD_VAR 0 4
52628: PUSH
52629: LD_VAR 0 1
52633: PPUSH
52634: CALL_OW 437
52638: PUSH
52639: LD_INT 1
52641: ARRAY
52642: PUSH
52643: LD_INT 2
52645: ARRAY
52646: EQUAL
52647: AND
52648: PUSH
52649: LD_VAR 0 5
52653: PUSH
52654: LD_VAR 0 1
52658: PPUSH
52659: CALL_OW 437
52663: PUSH
52664: LD_INT 1
52666: ARRAY
52667: PUSH
52668: LD_INT 3
52670: ARRAY
52671: EQUAL
52672: AND
52673: IFFALSE 52685
// result := true else
52675: LD_ADDR_VAR 0 3
52679: PUSH
52680: LD_INT 1
52682: ST_TO_ADDR
52683: GO 52693
// result := false ;
52685: LD_ADDR_VAR 0 3
52689: PUSH
52690: LD_INT 0
52692: ST_TO_ADDR
// end else
52693: GO 52703
// result := false ;
52695: LD_ADDR_VAR 0 3
52699: PUSH
52700: LD_INT 0
52702: ST_TO_ADDR
// end ;
52703: LD_VAR 0 3
52707: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52708: LD_INT 0
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
// if not unit or not area then
52714: LD_VAR 0 1
52718: NOT
52719: PUSH
52720: LD_VAR 0 2
52724: NOT
52725: OR
52726: IFFALSE 52730
// exit ;
52728: GO 52894
// tmp := AreaToList ( area , i ) ;
52730: LD_ADDR_VAR 0 6
52734: PUSH
52735: LD_VAR 0 2
52739: PPUSH
52740: LD_VAR 0 5
52744: PPUSH
52745: CALL_OW 517
52749: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52750: LD_ADDR_VAR 0 5
52754: PUSH
52755: DOUBLE
52756: LD_INT 1
52758: DEC
52759: ST_TO_ADDR
52760: LD_VAR 0 6
52764: PUSH
52765: LD_INT 1
52767: ARRAY
52768: PUSH
52769: FOR_TO
52770: IFFALSE 52892
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52772: LD_ADDR_VAR 0 7
52776: PUSH
52777: LD_VAR 0 6
52781: PUSH
52782: LD_INT 1
52784: ARRAY
52785: PUSH
52786: LD_VAR 0 5
52790: ARRAY
52791: PUSH
52792: LD_VAR 0 6
52796: PUSH
52797: LD_INT 2
52799: ARRAY
52800: PUSH
52801: LD_VAR 0 5
52805: ARRAY
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52811: LD_VAR 0 7
52815: PUSH
52816: LD_INT 1
52818: ARRAY
52819: PPUSH
52820: LD_VAR 0 7
52824: PUSH
52825: LD_INT 2
52827: ARRAY
52828: PPUSH
52829: CALL_OW 428
52833: PUSH
52834: LD_INT 0
52836: EQUAL
52837: IFFALSE 52890
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52839: LD_VAR 0 1
52843: PPUSH
52844: LD_VAR 0 7
52848: PUSH
52849: LD_INT 1
52851: ARRAY
52852: PPUSH
52853: LD_VAR 0 7
52857: PUSH
52858: LD_INT 2
52860: ARRAY
52861: PPUSH
52862: LD_VAR 0 3
52866: PPUSH
52867: CALL_OW 48
// result := IsPlaced ( unit ) ;
52871: LD_ADDR_VAR 0 4
52875: PUSH
52876: LD_VAR 0 1
52880: PPUSH
52881: CALL_OW 305
52885: ST_TO_ADDR
// exit ;
52886: POP
52887: POP
52888: GO 52894
// end ; end ;
52890: GO 52769
52892: POP
52893: POP
// end ;
52894: LD_VAR 0 4
52898: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52899: LD_INT 0
52901: PPUSH
52902: PPUSH
52903: PPUSH
// if not side or side > 8 then
52904: LD_VAR 0 1
52908: NOT
52909: PUSH
52910: LD_VAR 0 1
52914: PUSH
52915: LD_INT 8
52917: GREATER
52918: OR
52919: IFFALSE 52923
// exit ;
52921: GO 53110
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52923: LD_ADDR_VAR 0 4
52927: PUSH
52928: LD_INT 22
52930: PUSH
52931: LD_VAR 0 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 21
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PPUSH
52954: CALL_OW 69
52958: ST_TO_ADDR
// if not tmp then
52959: LD_VAR 0 4
52963: NOT
52964: IFFALSE 52968
// exit ;
52966: GO 53110
// enable_addtolog := true ;
52968: LD_ADDR_OWVAR 81
52972: PUSH
52973: LD_INT 1
52975: ST_TO_ADDR
// AddToLog ( [ ) ;
52976: LD_STRING [
52978: PPUSH
52979: CALL_OW 561
// for i in tmp do
52983: LD_ADDR_VAR 0 3
52987: PUSH
52988: LD_VAR 0 4
52992: PUSH
52993: FOR_IN
52994: IFFALSE 53101
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52996: LD_STRING [
52998: PUSH
52999: LD_VAR 0 3
53003: PPUSH
53004: CALL_OW 266
53008: STR
53009: PUSH
53010: LD_STRING , 
53012: STR
53013: PUSH
53014: LD_VAR 0 3
53018: PPUSH
53019: CALL_OW 250
53023: STR
53024: PUSH
53025: LD_STRING , 
53027: STR
53028: PUSH
53029: LD_VAR 0 3
53033: PPUSH
53034: CALL_OW 251
53038: STR
53039: PUSH
53040: LD_STRING , 
53042: STR
53043: PUSH
53044: LD_VAR 0 3
53048: PPUSH
53049: CALL_OW 254
53053: STR
53054: PUSH
53055: LD_STRING , 
53057: STR
53058: PUSH
53059: LD_VAR 0 3
53063: PPUSH
53064: LD_INT 1
53066: PPUSH
53067: CALL_OW 268
53071: STR
53072: PUSH
53073: LD_STRING , 
53075: STR
53076: PUSH
53077: LD_VAR 0 3
53081: PPUSH
53082: LD_INT 2
53084: PPUSH
53085: CALL_OW 268
53089: STR
53090: PUSH
53091: LD_STRING ],
53093: STR
53094: PPUSH
53095: CALL_OW 561
// end ;
53099: GO 52993
53101: POP
53102: POP
// AddToLog ( ]; ) ;
53103: LD_STRING ];
53105: PPUSH
53106: CALL_OW 561
// end ;
53110: LD_VAR 0 2
53114: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53115: LD_INT 0
53117: PPUSH
53118: PPUSH
53119: PPUSH
53120: PPUSH
53121: PPUSH
// if not area or not rate or not max then
53122: LD_VAR 0 1
53126: NOT
53127: PUSH
53128: LD_VAR 0 2
53132: NOT
53133: OR
53134: PUSH
53135: LD_VAR 0 4
53139: NOT
53140: OR
53141: IFFALSE 53145
// exit ;
53143: GO 53337
// while 1 do
53145: LD_INT 1
53147: IFFALSE 53337
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53149: LD_ADDR_VAR 0 9
53153: PUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: LD_INT 1
53161: PPUSH
53162: CALL_OW 287
53166: PUSH
53167: LD_INT 10
53169: MUL
53170: ST_TO_ADDR
// r := rate / 10 ;
53171: LD_ADDR_VAR 0 7
53175: PUSH
53176: LD_VAR 0 2
53180: PUSH
53181: LD_INT 10
53183: DIVREAL
53184: ST_TO_ADDR
// time := 1 1$00 ;
53185: LD_ADDR_VAR 0 8
53189: PUSH
53190: LD_INT 2100
53192: ST_TO_ADDR
// if amount < min then
53193: LD_VAR 0 9
53197: PUSH
53198: LD_VAR 0 3
53202: LESS
53203: IFFALSE 53221
// r := r * 2 else
53205: LD_ADDR_VAR 0 7
53209: PUSH
53210: LD_VAR 0 7
53214: PUSH
53215: LD_INT 2
53217: MUL
53218: ST_TO_ADDR
53219: GO 53247
// if amount > max then
53221: LD_VAR 0 9
53225: PUSH
53226: LD_VAR 0 4
53230: GREATER
53231: IFFALSE 53247
// r := r / 2 ;
53233: LD_ADDR_VAR 0 7
53237: PUSH
53238: LD_VAR 0 7
53242: PUSH
53243: LD_INT 2
53245: DIVREAL
53246: ST_TO_ADDR
// time := time / r ;
53247: LD_ADDR_VAR 0 8
53251: PUSH
53252: LD_VAR 0 8
53256: PUSH
53257: LD_VAR 0 7
53261: DIVREAL
53262: ST_TO_ADDR
// if time < 0 then
53263: LD_VAR 0 8
53267: PUSH
53268: LD_INT 0
53270: LESS
53271: IFFALSE 53288
// time := time * - 1 ;
53273: LD_ADDR_VAR 0 8
53277: PUSH
53278: LD_VAR 0 8
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: MUL
53287: ST_TO_ADDR
// wait ( time ) ;
53288: LD_VAR 0 8
53292: PPUSH
53293: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53297: LD_INT 35
53299: PPUSH
53300: LD_INT 875
53302: PPUSH
53303: CALL_OW 12
53307: PPUSH
53308: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53312: LD_INT 1
53314: PPUSH
53315: LD_INT 5
53317: PPUSH
53318: CALL_OW 12
53322: PPUSH
53323: LD_VAR 0 1
53327: PPUSH
53328: LD_INT 1
53330: PPUSH
53331: CALL_OW 55
// end ;
53335: GO 53145
// end ;
53337: LD_VAR 0 5
53341: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53342: LD_INT 0
53344: PPUSH
53345: PPUSH
53346: PPUSH
53347: PPUSH
53348: PPUSH
53349: PPUSH
53350: PPUSH
53351: PPUSH
// if not turrets or not factories then
53352: LD_VAR 0 1
53356: NOT
53357: PUSH
53358: LD_VAR 0 2
53362: NOT
53363: OR
53364: IFFALSE 53368
// exit ;
53366: GO 53675
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53368: LD_ADDR_VAR 0 10
53372: PUSH
53373: LD_INT 5
53375: PUSH
53376: LD_INT 6
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 4
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: LD_INT 5
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 24
53410: PUSH
53411: LD_INT 25
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 23
53420: PUSH
53421: LD_INT 27
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 42
53434: PUSH
53435: LD_INT 43
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 44
53444: PUSH
53445: LD_INT 46
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 45
53454: PUSH
53455: LD_INT 47
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// result := [ ] ;
53472: LD_ADDR_VAR 0 3
53476: PUSH
53477: EMPTY
53478: ST_TO_ADDR
// for i in turrets do
53479: LD_ADDR_VAR 0 4
53483: PUSH
53484: LD_VAR 0 1
53488: PUSH
53489: FOR_IN
53490: IFFALSE 53673
// begin nat := GetNation ( i ) ;
53492: LD_ADDR_VAR 0 7
53496: PUSH
53497: LD_VAR 0 4
53501: PPUSH
53502: CALL_OW 248
53506: ST_TO_ADDR
// weapon := 0 ;
53507: LD_ADDR_VAR 0 8
53511: PUSH
53512: LD_INT 0
53514: ST_TO_ADDR
// if not nat then
53515: LD_VAR 0 7
53519: NOT
53520: IFFALSE 53524
// continue ;
53522: GO 53489
// for j in list [ nat ] do
53524: LD_ADDR_VAR 0 5
53528: PUSH
53529: LD_VAR 0 10
53533: PUSH
53534: LD_VAR 0 7
53538: ARRAY
53539: PUSH
53540: FOR_IN
53541: IFFALSE 53582
// if GetBWeapon ( i ) = j [ 1 ] then
53543: LD_VAR 0 4
53547: PPUSH
53548: CALL_OW 269
53552: PUSH
53553: LD_VAR 0 5
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: EQUAL
53562: IFFALSE 53580
// begin weapon := j [ 2 ] ;
53564: LD_ADDR_VAR 0 8
53568: PUSH
53569: LD_VAR 0 5
53573: PUSH
53574: LD_INT 2
53576: ARRAY
53577: ST_TO_ADDR
// break ;
53578: GO 53582
// end ;
53580: GO 53540
53582: POP
53583: POP
// if not weapon then
53584: LD_VAR 0 8
53588: NOT
53589: IFFALSE 53593
// continue ;
53591: GO 53489
// for k in factories do
53593: LD_ADDR_VAR 0 6
53597: PUSH
53598: LD_VAR 0 2
53602: PUSH
53603: FOR_IN
53604: IFFALSE 53669
// begin weapons := AvailableWeaponList ( k ) ;
53606: LD_ADDR_VAR 0 9
53610: PUSH
53611: LD_VAR 0 6
53615: PPUSH
53616: CALL_OW 478
53620: ST_TO_ADDR
// if not weapons then
53621: LD_VAR 0 9
53625: NOT
53626: IFFALSE 53630
// continue ;
53628: GO 53603
// if weapon in weapons then
53630: LD_VAR 0 8
53634: PUSH
53635: LD_VAR 0 9
53639: IN
53640: IFFALSE 53667
// begin result := [ i , weapon ] ;
53642: LD_ADDR_VAR 0 3
53646: PUSH
53647: LD_VAR 0 4
53651: PUSH
53652: LD_VAR 0 8
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// exit ;
53661: POP
53662: POP
53663: POP
53664: POP
53665: GO 53675
// end ; end ;
53667: GO 53603
53669: POP
53670: POP
// end ;
53671: GO 53489
53673: POP
53674: POP
// end ;
53675: LD_VAR 0 3
53679: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53680: LD_INT 0
53682: PPUSH
// if not side or side > 8 then
53683: LD_VAR 0 3
53687: NOT
53688: PUSH
53689: LD_VAR 0 3
53693: PUSH
53694: LD_INT 8
53696: GREATER
53697: OR
53698: IFFALSE 53702
// exit ;
53700: GO 53761
// if not range then
53702: LD_VAR 0 4
53706: NOT
53707: IFFALSE 53718
// range := - 12 ;
53709: LD_ADDR_VAR 0 4
53713: PUSH
53714: LD_INT 12
53716: NEG
53717: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53718: LD_VAR 0 1
53722: PPUSH
53723: LD_VAR 0 2
53727: PPUSH
53728: LD_VAR 0 3
53732: PPUSH
53733: LD_VAR 0 4
53737: PPUSH
53738: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53742: LD_VAR 0 1
53746: PPUSH
53747: LD_VAR 0 2
53751: PPUSH
53752: LD_VAR 0 3
53756: PPUSH
53757: CALL_OW 331
// end ;
53761: LD_VAR 0 5
53765: RET
// export function Video ( mode ) ; begin
53766: LD_INT 0
53768: PPUSH
// ingame_video = mode ;
53769: LD_ADDR_OWVAR 52
53773: PUSH
53774: LD_VAR 0 1
53778: ST_TO_ADDR
// interface_hidden = mode ;
53779: LD_ADDR_OWVAR 54
53783: PUSH
53784: LD_VAR 0 1
53788: ST_TO_ADDR
// end ;
53789: LD_VAR 0 2
53793: RET
// export function Join ( array , element ) ; begin
53794: LD_INT 0
53796: PPUSH
// result := array ^ element ;
53797: LD_ADDR_VAR 0 3
53801: PUSH
53802: LD_VAR 0 1
53806: PUSH
53807: LD_VAR 0 2
53811: ADD
53812: ST_TO_ADDR
// end ;
53813: LD_VAR 0 3
53817: RET
// export function JoinUnion ( array , element ) ; begin
53818: LD_INT 0
53820: PPUSH
// result := array union element ;
53821: LD_ADDR_VAR 0 3
53825: PUSH
53826: LD_VAR 0 1
53830: PUSH
53831: LD_VAR 0 2
53835: UNION
53836: ST_TO_ADDR
// end ;
53837: LD_VAR 0 3
53841: RET
// export function GetBehemoths ( side ) ; begin
53842: LD_INT 0
53844: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53845: LD_ADDR_VAR 0 2
53849: PUSH
53850: LD_INT 22
53852: PUSH
53853: LD_VAR 0 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 31
53864: PUSH
53865: LD_INT 25
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PPUSH
53876: CALL_OW 69
53880: ST_TO_ADDR
// end ;
53881: LD_VAR 0 2
53885: RET
// export function Shuffle ( array ) ; var i , index ; begin
53886: LD_INT 0
53888: PPUSH
53889: PPUSH
53890: PPUSH
// result := [ ] ;
53891: LD_ADDR_VAR 0 2
53895: PUSH
53896: EMPTY
53897: ST_TO_ADDR
// if not array then
53898: LD_VAR 0 1
53902: NOT
53903: IFFALSE 53907
// exit ;
53905: GO 54006
// Randomize ;
53907: CALL_OW 10
// for i = array downto 1 do
53911: LD_ADDR_VAR 0 3
53915: PUSH
53916: DOUBLE
53917: LD_VAR 0 1
53921: INC
53922: ST_TO_ADDR
53923: LD_INT 1
53925: PUSH
53926: FOR_DOWNTO
53927: IFFALSE 54004
// begin index := rand ( 1 , array ) ;
53929: LD_ADDR_VAR 0 4
53933: PUSH
53934: LD_INT 1
53936: PPUSH
53937: LD_VAR 0 1
53941: PPUSH
53942: CALL_OW 12
53946: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53947: LD_ADDR_VAR 0 2
53951: PUSH
53952: LD_VAR 0 2
53956: PPUSH
53957: LD_VAR 0 2
53961: PUSH
53962: LD_INT 1
53964: PLUS
53965: PPUSH
53966: LD_VAR 0 1
53970: PUSH
53971: LD_VAR 0 4
53975: ARRAY
53976: PPUSH
53977: CALL_OW 2
53981: ST_TO_ADDR
// array := Delete ( array , index ) ;
53982: LD_ADDR_VAR 0 1
53986: PUSH
53987: LD_VAR 0 1
53991: PPUSH
53992: LD_VAR 0 4
53996: PPUSH
53997: CALL_OW 3
54001: ST_TO_ADDR
// end ;
54002: GO 53926
54004: POP
54005: POP
// end ;
54006: LD_VAR 0 2
54010: RET
// export function GetBaseMaterials ( base ) ; begin
54011: LD_INT 0
54013: PPUSH
// result := [ 0 , 0 , 0 ] ;
54014: LD_ADDR_VAR 0 2
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// if not base then
54033: LD_VAR 0 1
54037: NOT
54038: IFFALSE 54042
// exit ;
54040: GO 54091
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54042: LD_ADDR_VAR 0 2
54046: PUSH
54047: LD_VAR 0 1
54051: PPUSH
54052: LD_INT 1
54054: PPUSH
54055: CALL_OW 275
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_INT 2
54067: PPUSH
54068: CALL_OW 275
54072: PUSH
54073: LD_VAR 0 1
54077: PPUSH
54078: LD_INT 3
54080: PPUSH
54081: CALL_OW 275
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: ST_TO_ADDR
// end ; end_of_file
54091: LD_VAR 0 2
54095: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
54096: GO 54098
54098: DISABLE
// begin ru_radar := 98 ;
54099: LD_ADDR_EXP 45
54103: PUSH
54104: LD_INT 98
54106: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
54107: LD_ADDR_EXP 46
54111: PUSH
54112: LD_INT 89
54114: ST_TO_ADDR
// us_hack := 99 ;
54115: LD_ADDR_EXP 47
54119: PUSH
54120: LD_INT 99
54122: ST_TO_ADDR
// us_artillery := 97 ;
54123: LD_ADDR_EXP 48
54127: PUSH
54128: LD_INT 97
54130: ST_TO_ADDR
// ar_bio_bomb := 91 ;
54131: LD_ADDR_EXP 49
54135: PUSH
54136: LD_INT 91
54138: ST_TO_ADDR
// end ; end_of_file
54139: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
54140: LD_INT 0
54142: PPUSH
54143: PPUSH
// skirmish := false ;
54144: LD_ADDR_EXP 50
54148: PUSH
54149: LD_INT 0
54151: ST_TO_ADDR
// debug_mc := false ;
54152: LD_ADDR_EXP 51
54156: PUSH
54157: LD_INT 0
54159: ST_TO_ADDR
// mc_bases := [ ] ;
54160: LD_ADDR_EXP 52
54164: PUSH
54165: EMPTY
54166: ST_TO_ADDR
// mc_sides := [ ] ;
54167: LD_ADDR_EXP 78
54171: PUSH
54172: EMPTY
54173: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
54174: LD_ADDR_EXP 53
54178: PUSH
54179: EMPTY
54180: ST_TO_ADDR
// mc_building_repairs := [ ] ;
54181: LD_ADDR_EXP 54
54185: PUSH
54186: EMPTY
54187: ST_TO_ADDR
// mc_need_heal := [ ] ;
54188: LD_ADDR_EXP 55
54192: PUSH
54193: EMPTY
54194: ST_TO_ADDR
// mc_healers := [ ] ;
54195: LD_ADDR_EXP 56
54199: PUSH
54200: EMPTY
54201: ST_TO_ADDR
// mc_build_list := [ ] ;
54202: LD_ADDR_EXP 57
54206: PUSH
54207: EMPTY
54208: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
54209: LD_ADDR_EXP 84
54213: PUSH
54214: EMPTY
54215: ST_TO_ADDR
// mc_builders := [ ] ;
54216: LD_ADDR_EXP 58
54220: PUSH
54221: EMPTY
54222: ST_TO_ADDR
// mc_construct_list := [ ] ;
54223: LD_ADDR_EXP 59
54227: PUSH
54228: EMPTY
54229: ST_TO_ADDR
// mc_turret_list := [ ] ;
54230: LD_ADDR_EXP 60
54234: PUSH
54235: EMPTY
54236: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
54237: LD_ADDR_EXP 61
54241: PUSH
54242: EMPTY
54243: ST_TO_ADDR
// mc_miners := [ ] ;
54244: LD_ADDR_EXP 66
54248: PUSH
54249: EMPTY
54250: ST_TO_ADDR
// mc_mines := [ ] ;
54251: LD_ADDR_EXP 65
54255: PUSH
54256: EMPTY
54257: ST_TO_ADDR
// mc_minefields := [ ] ;
54258: LD_ADDR_EXP 67
54262: PUSH
54263: EMPTY
54264: ST_TO_ADDR
// mc_crates := [ ] ;
54265: LD_ADDR_EXP 68
54269: PUSH
54270: EMPTY
54271: ST_TO_ADDR
// mc_crates_collector := [ ] ;
54272: LD_ADDR_EXP 69
54276: PUSH
54277: EMPTY
54278: ST_TO_ADDR
// mc_crates_area := [ ] ;
54279: LD_ADDR_EXP 70
54283: PUSH
54284: EMPTY
54285: ST_TO_ADDR
// mc_vehicles := [ ] ;
54286: LD_ADDR_EXP 71
54290: PUSH
54291: EMPTY
54292: ST_TO_ADDR
// mc_attack := [ ] ;
54293: LD_ADDR_EXP 72
54297: PUSH
54298: EMPTY
54299: ST_TO_ADDR
// mc_produce := [ ] ;
54300: LD_ADDR_EXP 73
54304: PUSH
54305: EMPTY
54306: ST_TO_ADDR
// mc_defender := [ ] ;
54307: LD_ADDR_EXP 74
54311: PUSH
54312: EMPTY
54313: ST_TO_ADDR
// mc_parking := [ ] ;
54314: LD_ADDR_EXP 76
54318: PUSH
54319: EMPTY
54320: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
54321: LD_ADDR_EXP 62
54325: PUSH
54326: EMPTY
54327: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
54328: LD_ADDR_EXP 64
54332: PUSH
54333: EMPTY
54334: ST_TO_ADDR
// mc_scan := [ ] ;
54335: LD_ADDR_EXP 75
54339: PUSH
54340: EMPTY
54341: ST_TO_ADDR
// mc_scan_area := [ ] ;
54342: LD_ADDR_EXP 77
54346: PUSH
54347: EMPTY
54348: ST_TO_ADDR
// mc_tech := [ ] ;
54349: LD_ADDR_EXP 79
54353: PUSH
54354: EMPTY
54355: ST_TO_ADDR
// mc_class := [ ] ;
54356: LD_ADDR_EXP 93
54360: PUSH
54361: EMPTY
54362: ST_TO_ADDR
// mc_class_case_use := [ ] ;
54363: LD_ADDR_EXP 94
54367: PUSH
54368: EMPTY
54369: ST_TO_ADDR
// end ;
54370: LD_VAR 0 1
54374: RET
// export function MC_Kill ( base ) ; begin
54375: LD_INT 0
54377: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
54378: LD_ADDR_EXP 52
54382: PUSH
54383: LD_EXP 52
54387: PPUSH
54388: LD_VAR 0 1
54392: PPUSH
54393: EMPTY
54394: PPUSH
54395: CALL_OW 1
54399: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54400: LD_ADDR_EXP 53
54404: PUSH
54405: LD_EXP 53
54409: PPUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: EMPTY
54416: PPUSH
54417: CALL_OW 1
54421: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54422: LD_ADDR_EXP 54
54426: PUSH
54427: LD_EXP 54
54431: PPUSH
54432: LD_VAR 0 1
54436: PPUSH
54437: EMPTY
54438: PPUSH
54439: CALL_OW 1
54443: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54444: LD_ADDR_EXP 55
54448: PUSH
54449: LD_EXP 55
54453: PPUSH
54454: LD_VAR 0 1
54458: PPUSH
54459: EMPTY
54460: PPUSH
54461: CALL_OW 1
54465: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54466: LD_ADDR_EXP 56
54470: PUSH
54471: LD_EXP 56
54475: PPUSH
54476: LD_VAR 0 1
54480: PPUSH
54481: EMPTY
54482: PPUSH
54483: CALL_OW 1
54487: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54488: LD_ADDR_EXP 57
54492: PUSH
54493: LD_EXP 57
54497: PPUSH
54498: LD_VAR 0 1
54502: PPUSH
54503: EMPTY
54504: PPUSH
54505: CALL_OW 1
54509: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54510: LD_ADDR_EXP 58
54514: PUSH
54515: LD_EXP 58
54519: PPUSH
54520: LD_VAR 0 1
54524: PPUSH
54525: EMPTY
54526: PPUSH
54527: CALL_OW 1
54531: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54532: LD_ADDR_EXP 59
54536: PUSH
54537: LD_EXP 59
54541: PPUSH
54542: LD_VAR 0 1
54546: PPUSH
54547: EMPTY
54548: PPUSH
54549: CALL_OW 1
54553: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54554: LD_ADDR_EXP 60
54558: PUSH
54559: LD_EXP 60
54563: PPUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: EMPTY
54570: PPUSH
54571: CALL_OW 1
54575: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54576: LD_ADDR_EXP 61
54580: PUSH
54581: LD_EXP 61
54585: PPUSH
54586: LD_VAR 0 1
54590: PPUSH
54591: EMPTY
54592: PPUSH
54593: CALL_OW 1
54597: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54598: LD_ADDR_EXP 62
54602: PUSH
54603: LD_EXP 62
54607: PPUSH
54608: LD_VAR 0 1
54612: PPUSH
54613: EMPTY
54614: PPUSH
54615: CALL_OW 1
54619: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54620: LD_ADDR_EXP 63
54624: PUSH
54625: LD_EXP 63
54629: PPUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: LD_INT 0
54637: PPUSH
54638: CALL_OW 1
54642: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54643: LD_ADDR_EXP 64
54647: PUSH
54648: LD_EXP 64
54652: PPUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: EMPTY
54659: PPUSH
54660: CALL_OW 1
54664: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54665: LD_ADDR_EXP 65
54669: PUSH
54670: LD_EXP 65
54674: PPUSH
54675: LD_VAR 0 1
54679: PPUSH
54680: EMPTY
54681: PPUSH
54682: CALL_OW 1
54686: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54687: LD_ADDR_EXP 66
54691: PUSH
54692: LD_EXP 66
54696: PPUSH
54697: LD_VAR 0 1
54701: PPUSH
54702: EMPTY
54703: PPUSH
54704: CALL_OW 1
54708: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54709: LD_ADDR_EXP 67
54713: PUSH
54714: LD_EXP 67
54718: PPUSH
54719: LD_VAR 0 1
54723: PPUSH
54724: EMPTY
54725: PPUSH
54726: CALL_OW 1
54730: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54731: LD_ADDR_EXP 68
54735: PUSH
54736: LD_EXP 68
54740: PPUSH
54741: LD_VAR 0 1
54745: PPUSH
54746: EMPTY
54747: PPUSH
54748: CALL_OW 1
54752: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54753: LD_ADDR_EXP 69
54757: PUSH
54758: LD_EXP 69
54762: PPUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: EMPTY
54769: PPUSH
54770: CALL_OW 1
54774: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54775: LD_ADDR_EXP 70
54779: PUSH
54780: LD_EXP 70
54784: PPUSH
54785: LD_VAR 0 1
54789: PPUSH
54790: EMPTY
54791: PPUSH
54792: CALL_OW 1
54796: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54797: LD_ADDR_EXP 71
54801: PUSH
54802: LD_EXP 71
54806: PPUSH
54807: LD_VAR 0 1
54811: PPUSH
54812: EMPTY
54813: PPUSH
54814: CALL_OW 1
54818: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54819: LD_ADDR_EXP 72
54823: PUSH
54824: LD_EXP 72
54828: PPUSH
54829: LD_VAR 0 1
54833: PPUSH
54834: EMPTY
54835: PPUSH
54836: CALL_OW 1
54840: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54841: LD_ADDR_EXP 73
54845: PUSH
54846: LD_EXP 73
54850: PPUSH
54851: LD_VAR 0 1
54855: PPUSH
54856: EMPTY
54857: PPUSH
54858: CALL_OW 1
54862: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54863: LD_ADDR_EXP 74
54867: PUSH
54868: LD_EXP 74
54872: PPUSH
54873: LD_VAR 0 1
54877: PPUSH
54878: EMPTY
54879: PPUSH
54880: CALL_OW 1
54884: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54885: LD_ADDR_EXP 75
54889: PUSH
54890: LD_EXP 75
54894: PPUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: EMPTY
54901: PPUSH
54902: CALL_OW 1
54906: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54907: LD_ADDR_EXP 76
54911: PUSH
54912: LD_EXP 76
54916: PPUSH
54917: LD_VAR 0 1
54921: PPUSH
54922: EMPTY
54923: PPUSH
54924: CALL_OW 1
54928: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54929: LD_ADDR_EXP 77
54933: PUSH
54934: LD_EXP 77
54938: PPUSH
54939: LD_VAR 0 1
54943: PPUSH
54944: EMPTY
54945: PPUSH
54946: CALL_OW 1
54950: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54951: LD_ADDR_EXP 79
54955: PUSH
54956: LD_EXP 79
54960: PPUSH
54961: LD_VAR 0 1
54965: PPUSH
54966: EMPTY
54967: PPUSH
54968: CALL_OW 1
54972: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54973: LD_ADDR_EXP 81
54977: PUSH
54978: LD_EXP 81
54982: PPUSH
54983: LD_VAR 0 1
54987: PPUSH
54988: EMPTY
54989: PPUSH
54990: CALL_OW 1
54994: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54995: LD_ADDR_EXP 82
54999: PUSH
55000: LD_EXP 82
55004: PPUSH
55005: LD_VAR 0 1
55009: PPUSH
55010: EMPTY
55011: PPUSH
55012: CALL_OW 1
55016: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55017: LD_ADDR_EXP 83
55021: PUSH
55022: LD_EXP 83
55026: PPUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: EMPTY
55033: PPUSH
55034: CALL_OW 1
55038: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55039: LD_ADDR_EXP 84
55043: PUSH
55044: LD_EXP 84
55048: PPUSH
55049: LD_VAR 0 1
55053: PPUSH
55054: EMPTY
55055: PPUSH
55056: CALL_OW 1
55060: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55061: LD_ADDR_EXP 85
55065: PUSH
55066: LD_EXP 85
55070: PPUSH
55071: LD_VAR 0 1
55075: PPUSH
55076: EMPTY
55077: PPUSH
55078: CALL_OW 1
55082: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55083: LD_ADDR_EXP 86
55087: PUSH
55088: LD_EXP 86
55092: PPUSH
55093: LD_VAR 0 1
55097: PPUSH
55098: EMPTY
55099: PPUSH
55100: CALL_OW 1
55104: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55105: LD_ADDR_EXP 87
55109: PUSH
55110: LD_EXP 87
55114: PPUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: EMPTY
55121: PPUSH
55122: CALL_OW 1
55126: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55127: LD_ADDR_EXP 88
55131: PUSH
55132: LD_EXP 88
55136: PPUSH
55137: LD_VAR 0 1
55141: PPUSH
55142: EMPTY
55143: PPUSH
55144: CALL_OW 1
55148: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55149: LD_ADDR_EXP 89
55153: PUSH
55154: LD_EXP 89
55158: PPUSH
55159: LD_VAR 0 1
55163: PPUSH
55164: EMPTY
55165: PPUSH
55166: CALL_OW 1
55170: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55171: LD_ADDR_EXP 90
55175: PUSH
55176: LD_EXP 90
55180: PPUSH
55181: LD_VAR 0 1
55185: PPUSH
55186: EMPTY
55187: PPUSH
55188: CALL_OW 1
55192: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55193: LD_ADDR_EXP 91
55197: PUSH
55198: LD_EXP 91
55202: PPUSH
55203: LD_VAR 0 1
55207: PPUSH
55208: EMPTY
55209: PPUSH
55210: CALL_OW 1
55214: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55215: LD_ADDR_EXP 92
55219: PUSH
55220: LD_EXP 92
55224: PPUSH
55225: LD_VAR 0 1
55229: PPUSH
55230: EMPTY
55231: PPUSH
55232: CALL_OW 1
55236: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55237: LD_ADDR_EXP 93
55241: PUSH
55242: LD_EXP 93
55246: PPUSH
55247: LD_VAR 0 1
55251: PPUSH
55252: EMPTY
55253: PPUSH
55254: CALL_OW 1
55258: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55259: LD_ADDR_EXP 94
55263: PUSH
55264: LD_EXP 94
55268: PPUSH
55269: LD_VAR 0 1
55273: PPUSH
55274: LD_INT 0
55276: PPUSH
55277: CALL_OW 1
55281: ST_TO_ADDR
// end ;
55282: LD_VAR 0 2
55286: RET
// export function MC_Add ( side , units ) ; var base ; begin
55287: LD_INT 0
55289: PPUSH
55290: PPUSH
// base := mc_bases + 1 ;
55291: LD_ADDR_VAR 0 4
55295: PUSH
55296: LD_EXP 52
55300: PUSH
55301: LD_INT 1
55303: PLUS
55304: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
55305: LD_ADDR_EXP 78
55309: PUSH
55310: LD_EXP 78
55314: PPUSH
55315: LD_VAR 0 4
55319: PPUSH
55320: LD_VAR 0 1
55324: PPUSH
55325: CALL_OW 1
55329: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
55330: LD_ADDR_EXP 52
55334: PUSH
55335: LD_EXP 52
55339: PPUSH
55340: LD_VAR 0 4
55344: PPUSH
55345: LD_VAR 0 2
55349: PPUSH
55350: CALL_OW 1
55354: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55355: LD_ADDR_EXP 53
55359: PUSH
55360: LD_EXP 53
55364: PPUSH
55365: LD_VAR 0 4
55369: PPUSH
55370: EMPTY
55371: PPUSH
55372: CALL_OW 1
55376: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55377: LD_ADDR_EXP 54
55381: PUSH
55382: LD_EXP 54
55386: PPUSH
55387: LD_VAR 0 4
55391: PPUSH
55392: EMPTY
55393: PPUSH
55394: CALL_OW 1
55398: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55399: LD_ADDR_EXP 55
55403: PUSH
55404: LD_EXP 55
55408: PPUSH
55409: LD_VAR 0 4
55413: PPUSH
55414: EMPTY
55415: PPUSH
55416: CALL_OW 1
55420: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55421: LD_ADDR_EXP 56
55425: PUSH
55426: LD_EXP 56
55430: PPUSH
55431: LD_VAR 0 4
55435: PPUSH
55436: EMPTY
55437: PPUSH
55438: CALL_OW 1
55442: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55443: LD_ADDR_EXP 57
55447: PUSH
55448: LD_EXP 57
55452: PPUSH
55453: LD_VAR 0 4
55457: PPUSH
55458: EMPTY
55459: PPUSH
55460: CALL_OW 1
55464: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
55465: LD_ADDR_EXP 58
55469: PUSH
55470: LD_EXP 58
55474: PPUSH
55475: LD_VAR 0 4
55479: PPUSH
55480: EMPTY
55481: PPUSH
55482: CALL_OW 1
55486: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
55487: LD_ADDR_EXP 59
55491: PUSH
55492: LD_EXP 59
55496: PPUSH
55497: LD_VAR 0 4
55501: PPUSH
55502: EMPTY
55503: PPUSH
55504: CALL_OW 1
55508: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
55509: LD_ADDR_EXP 60
55513: PUSH
55514: LD_EXP 60
55518: PPUSH
55519: LD_VAR 0 4
55523: PPUSH
55524: EMPTY
55525: PPUSH
55526: CALL_OW 1
55530: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
55531: LD_ADDR_EXP 61
55535: PUSH
55536: LD_EXP 61
55540: PPUSH
55541: LD_VAR 0 4
55545: PPUSH
55546: EMPTY
55547: PPUSH
55548: CALL_OW 1
55552: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
55553: LD_ADDR_EXP 62
55557: PUSH
55558: LD_EXP 62
55562: PPUSH
55563: LD_VAR 0 4
55567: PPUSH
55568: EMPTY
55569: PPUSH
55570: CALL_OW 1
55574: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
55575: LD_ADDR_EXP 63
55579: PUSH
55580: LD_EXP 63
55584: PPUSH
55585: LD_VAR 0 4
55589: PPUSH
55590: LD_INT 0
55592: PPUSH
55593: CALL_OW 1
55597: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
55598: LD_ADDR_EXP 64
55602: PUSH
55603: LD_EXP 64
55607: PPUSH
55608: LD_VAR 0 4
55612: PPUSH
55613: EMPTY
55614: PPUSH
55615: CALL_OW 1
55619: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
55620: LD_ADDR_EXP 65
55624: PUSH
55625: LD_EXP 65
55629: PPUSH
55630: LD_VAR 0 4
55634: PPUSH
55635: EMPTY
55636: PPUSH
55637: CALL_OW 1
55641: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55642: LD_ADDR_EXP 66
55646: PUSH
55647: LD_EXP 66
55651: PPUSH
55652: LD_VAR 0 4
55656: PPUSH
55657: EMPTY
55658: PPUSH
55659: CALL_OW 1
55663: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55664: LD_ADDR_EXP 67
55668: PUSH
55669: LD_EXP 67
55673: PPUSH
55674: LD_VAR 0 4
55678: PPUSH
55679: EMPTY
55680: PPUSH
55681: CALL_OW 1
55685: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55686: LD_ADDR_EXP 68
55690: PUSH
55691: LD_EXP 68
55695: PPUSH
55696: LD_VAR 0 4
55700: PPUSH
55701: EMPTY
55702: PPUSH
55703: CALL_OW 1
55707: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55708: LD_ADDR_EXP 69
55712: PUSH
55713: LD_EXP 69
55717: PPUSH
55718: LD_VAR 0 4
55722: PPUSH
55723: EMPTY
55724: PPUSH
55725: CALL_OW 1
55729: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
55730: LD_ADDR_EXP 70
55734: PUSH
55735: LD_EXP 70
55739: PPUSH
55740: LD_VAR 0 4
55744: PPUSH
55745: EMPTY
55746: PPUSH
55747: CALL_OW 1
55751: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
55752: LD_ADDR_EXP 71
55756: PUSH
55757: LD_EXP 71
55761: PPUSH
55762: LD_VAR 0 4
55766: PPUSH
55767: EMPTY
55768: PPUSH
55769: CALL_OW 1
55773: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
55774: LD_ADDR_EXP 72
55778: PUSH
55779: LD_EXP 72
55783: PPUSH
55784: LD_VAR 0 4
55788: PPUSH
55789: EMPTY
55790: PPUSH
55791: CALL_OW 1
55795: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
55796: LD_ADDR_EXP 73
55800: PUSH
55801: LD_EXP 73
55805: PPUSH
55806: LD_VAR 0 4
55810: PPUSH
55811: EMPTY
55812: PPUSH
55813: CALL_OW 1
55817: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55818: LD_ADDR_EXP 74
55822: PUSH
55823: LD_EXP 74
55827: PPUSH
55828: LD_VAR 0 4
55832: PPUSH
55833: EMPTY
55834: PPUSH
55835: CALL_OW 1
55839: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55840: LD_ADDR_EXP 75
55844: PUSH
55845: LD_EXP 75
55849: PPUSH
55850: LD_VAR 0 4
55854: PPUSH
55855: EMPTY
55856: PPUSH
55857: CALL_OW 1
55861: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55862: LD_ADDR_EXP 76
55866: PUSH
55867: LD_EXP 76
55871: PPUSH
55872: LD_VAR 0 4
55876: PPUSH
55877: EMPTY
55878: PPUSH
55879: CALL_OW 1
55883: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55884: LD_ADDR_EXP 77
55888: PUSH
55889: LD_EXP 77
55893: PPUSH
55894: LD_VAR 0 4
55898: PPUSH
55899: EMPTY
55900: PPUSH
55901: CALL_OW 1
55905: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55906: LD_ADDR_EXP 79
55910: PUSH
55911: LD_EXP 79
55915: PPUSH
55916: LD_VAR 0 4
55920: PPUSH
55921: EMPTY
55922: PPUSH
55923: CALL_OW 1
55927: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55928: LD_ADDR_EXP 81
55932: PUSH
55933: LD_EXP 81
55937: PPUSH
55938: LD_VAR 0 4
55942: PPUSH
55943: EMPTY
55944: PPUSH
55945: CALL_OW 1
55949: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55950: LD_ADDR_EXP 82
55954: PUSH
55955: LD_EXP 82
55959: PPUSH
55960: LD_VAR 0 4
55964: PPUSH
55965: EMPTY
55966: PPUSH
55967: CALL_OW 1
55971: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55972: LD_ADDR_EXP 83
55976: PUSH
55977: LD_EXP 83
55981: PPUSH
55982: LD_VAR 0 4
55986: PPUSH
55987: EMPTY
55988: PPUSH
55989: CALL_OW 1
55993: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55994: LD_ADDR_EXP 84
55998: PUSH
55999: LD_EXP 84
56003: PPUSH
56004: LD_VAR 0 4
56008: PPUSH
56009: EMPTY
56010: PPUSH
56011: CALL_OW 1
56015: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56016: LD_ADDR_EXP 85
56020: PUSH
56021: LD_EXP 85
56025: PPUSH
56026: LD_VAR 0 4
56030: PPUSH
56031: EMPTY
56032: PPUSH
56033: CALL_OW 1
56037: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56038: LD_ADDR_EXP 86
56042: PUSH
56043: LD_EXP 86
56047: PPUSH
56048: LD_VAR 0 4
56052: PPUSH
56053: EMPTY
56054: PPUSH
56055: CALL_OW 1
56059: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56060: LD_ADDR_EXP 87
56064: PUSH
56065: LD_EXP 87
56069: PPUSH
56070: LD_VAR 0 4
56074: PPUSH
56075: EMPTY
56076: PPUSH
56077: CALL_OW 1
56081: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56082: LD_ADDR_EXP 88
56086: PUSH
56087: LD_EXP 88
56091: PPUSH
56092: LD_VAR 0 4
56096: PPUSH
56097: EMPTY
56098: PPUSH
56099: CALL_OW 1
56103: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56104: LD_ADDR_EXP 89
56108: PUSH
56109: LD_EXP 89
56113: PPUSH
56114: LD_VAR 0 4
56118: PPUSH
56119: EMPTY
56120: PPUSH
56121: CALL_OW 1
56125: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56126: LD_ADDR_EXP 90
56130: PUSH
56131: LD_EXP 90
56135: PPUSH
56136: LD_VAR 0 4
56140: PPUSH
56141: EMPTY
56142: PPUSH
56143: CALL_OW 1
56147: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56148: LD_ADDR_EXP 91
56152: PUSH
56153: LD_EXP 91
56157: PPUSH
56158: LD_VAR 0 4
56162: PPUSH
56163: EMPTY
56164: PPUSH
56165: CALL_OW 1
56169: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56170: LD_ADDR_EXP 92
56174: PUSH
56175: LD_EXP 92
56179: PPUSH
56180: LD_VAR 0 4
56184: PPUSH
56185: EMPTY
56186: PPUSH
56187: CALL_OW 1
56191: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56192: LD_ADDR_EXP 93
56196: PUSH
56197: LD_EXP 93
56201: PPUSH
56202: LD_VAR 0 4
56206: PPUSH
56207: EMPTY
56208: PPUSH
56209: CALL_OW 1
56213: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56214: LD_ADDR_EXP 94
56218: PUSH
56219: LD_EXP 94
56223: PPUSH
56224: LD_VAR 0 4
56228: PPUSH
56229: LD_INT 0
56231: PPUSH
56232: CALL_OW 1
56236: ST_TO_ADDR
// result := base ;
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: LD_VAR 0 4
56246: ST_TO_ADDR
// end ;
56247: LD_VAR 0 3
56251: RET
// export function MC_Start ( ) ; var i ; begin
56252: LD_INT 0
56254: PPUSH
56255: PPUSH
// for i = 1 to mc_bases do
56256: LD_ADDR_VAR 0 2
56260: PUSH
56261: DOUBLE
56262: LD_INT 1
56264: DEC
56265: ST_TO_ADDR
56266: LD_EXP 52
56270: PUSH
56271: FOR_TO
56272: IFFALSE 57349
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
56274: LD_ADDR_EXP 52
56278: PUSH
56279: LD_EXP 52
56283: PPUSH
56284: LD_VAR 0 2
56288: PPUSH
56289: LD_EXP 52
56293: PUSH
56294: LD_VAR 0 2
56298: ARRAY
56299: PUSH
56300: LD_INT 0
56302: DIFF
56303: PPUSH
56304: CALL_OW 1
56308: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
56309: LD_ADDR_EXP 53
56313: PUSH
56314: LD_EXP 53
56318: PPUSH
56319: LD_VAR 0 2
56323: PPUSH
56324: EMPTY
56325: PPUSH
56326: CALL_OW 1
56330: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56331: LD_ADDR_EXP 54
56335: PUSH
56336: LD_EXP 54
56340: PPUSH
56341: LD_VAR 0 2
56345: PPUSH
56346: EMPTY
56347: PPUSH
56348: CALL_OW 1
56352: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
56353: LD_ADDR_EXP 55
56357: PUSH
56358: LD_EXP 55
56362: PPUSH
56363: LD_VAR 0 2
56367: PPUSH
56368: EMPTY
56369: PPUSH
56370: CALL_OW 1
56374: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
56375: LD_ADDR_EXP 56
56379: PUSH
56380: LD_EXP 56
56384: PPUSH
56385: LD_VAR 0 2
56389: PPUSH
56390: EMPTY
56391: PUSH
56392: EMPTY
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PPUSH
56398: CALL_OW 1
56402: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
56403: LD_ADDR_EXP 57
56407: PUSH
56408: LD_EXP 57
56412: PPUSH
56413: LD_VAR 0 2
56417: PPUSH
56418: EMPTY
56419: PPUSH
56420: CALL_OW 1
56424: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
56425: LD_ADDR_EXP 84
56429: PUSH
56430: LD_EXP 84
56434: PPUSH
56435: LD_VAR 0 2
56439: PPUSH
56440: EMPTY
56441: PPUSH
56442: CALL_OW 1
56446: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
56447: LD_ADDR_EXP 58
56451: PUSH
56452: LD_EXP 58
56456: PPUSH
56457: LD_VAR 0 2
56461: PPUSH
56462: EMPTY
56463: PPUSH
56464: CALL_OW 1
56468: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
56469: LD_ADDR_EXP 59
56473: PUSH
56474: LD_EXP 59
56478: PPUSH
56479: LD_VAR 0 2
56483: PPUSH
56484: EMPTY
56485: PPUSH
56486: CALL_OW 1
56490: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
56491: LD_ADDR_EXP 60
56495: PUSH
56496: LD_EXP 60
56500: PPUSH
56501: LD_VAR 0 2
56505: PPUSH
56506: LD_EXP 52
56510: PUSH
56511: LD_VAR 0 2
56515: ARRAY
56516: PPUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 30
56522: PUSH
56523: LD_INT 32
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 30
56532: PUSH
56533: LD_INT 33
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: PPUSH
56545: CALL_OW 72
56549: PPUSH
56550: CALL_OW 1
56554: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
56555: LD_ADDR_EXP 61
56559: PUSH
56560: LD_EXP 61
56564: PPUSH
56565: LD_VAR 0 2
56569: PPUSH
56570: LD_EXP 52
56574: PUSH
56575: LD_VAR 0 2
56579: ARRAY
56580: PPUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 30
56586: PUSH
56587: LD_INT 32
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 30
56596: PUSH
56597: LD_INT 31
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 58
56611: PUSH
56612: EMPTY
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PPUSH
56619: CALL_OW 72
56623: PPUSH
56624: CALL_OW 1
56628: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
56629: LD_ADDR_EXP 62
56633: PUSH
56634: LD_EXP 62
56638: PPUSH
56639: LD_VAR 0 2
56643: PPUSH
56644: EMPTY
56645: PPUSH
56646: CALL_OW 1
56650: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
56651: LD_ADDR_EXP 66
56655: PUSH
56656: LD_EXP 66
56660: PPUSH
56661: LD_VAR 0 2
56665: PPUSH
56666: EMPTY
56667: PPUSH
56668: CALL_OW 1
56672: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
56673: LD_ADDR_EXP 65
56677: PUSH
56678: LD_EXP 65
56682: PPUSH
56683: LD_VAR 0 2
56687: PPUSH
56688: EMPTY
56689: PPUSH
56690: CALL_OW 1
56694: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
56695: LD_ADDR_EXP 67
56699: PUSH
56700: LD_EXP 67
56704: PPUSH
56705: LD_VAR 0 2
56709: PPUSH
56710: EMPTY
56711: PPUSH
56712: CALL_OW 1
56716: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
56717: LD_ADDR_EXP 68
56721: PUSH
56722: LD_EXP 68
56726: PPUSH
56727: LD_VAR 0 2
56731: PPUSH
56732: EMPTY
56733: PPUSH
56734: CALL_OW 1
56738: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
56739: LD_ADDR_EXP 69
56743: PUSH
56744: LD_EXP 69
56748: PPUSH
56749: LD_VAR 0 2
56753: PPUSH
56754: EMPTY
56755: PPUSH
56756: CALL_OW 1
56760: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
56761: LD_ADDR_EXP 70
56765: PUSH
56766: LD_EXP 70
56770: PPUSH
56771: LD_VAR 0 2
56775: PPUSH
56776: EMPTY
56777: PPUSH
56778: CALL_OW 1
56782: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
56783: LD_ADDR_EXP 71
56787: PUSH
56788: LD_EXP 71
56792: PPUSH
56793: LD_VAR 0 2
56797: PPUSH
56798: EMPTY
56799: PPUSH
56800: CALL_OW 1
56804: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56805: LD_ADDR_EXP 72
56809: PUSH
56810: LD_EXP 72
56814: PPUSH
56815: LD_VAR 0 2
56819: PPUSH
56820: EMPTY
56821: PPUSH
56822: CALL_OW 1
56826: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
56827: LD_ADDR_EXP 73
56831: PUSH
56832: LD_EXP 73
56836: PPUSH
56837: LD_VAR 0 2
56841: PPUSH
56842: EMPTY
56843: PPUSH
56844: CALL_OW 1
56848: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56849: LD_ADDR_EXP 74
56853: PUSH
56854: LD_EXP 74
56858: PPUSH
56859: LD_VAR 0 2
56863: PPUSH
56864: EMPTY
56865: PPUSH
56866: CALL_OW 1
56870: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56871: LD_ADDR_EXP 63
56875: PUSH
56876: LD_EXP 63
56880: PPUSH
56881: LD_VAR 0 2
56885: PPUSH
56886: LD_INT 0
56888: PPUSH
56889: CALL_OW 1
56893: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56894: LD_ADDR_EXP 76
56898: PUSH
56899: LD_EXP 76
56903: PPUSH
56904: LD_VAR 0 2
56908: PPUSH
56909: LD_INT 0
56911: PPUSH
56912: CALL_OW 1
56916: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56917: LD_ADDR_EXP 64
56921: PUSH
56922: LD_EXP 64
56926: PPUSH
56927: LD_VAR 0 2
56931: PPUSH
56932: EMPTY
56933: PPUSH
56934: CALL_OW 1
56938: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56939: LD_ADDR_EXP 75
56943: PUSH
56944: LD_EXP 75
56948: PPUSH
56949: LD_VAR 0 2
56953: PPUSH
56954: LD_INT 0
56956: PPUSH
56957: CALL_OW 1
56961: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56962: LD_ADDR_EXP 77
56966: PUSH
56967: LD_EXP 77
56971: PPUSH
56972: LD_VAR 0 2
56976: PPUSH
56977: EMPTY
56978: PPUSH
56979: CALL_OW 1
56983: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56984: LD_ADDR_EXP 80
56988: PUSH
56989: LD_EXP 80
56993: PPUSH
56994: LD_VAR 0 2
56998: PPUSH
56999: LD_INT 0
57001: PPUSH
57002: CALL_OW 1
57006: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
57007: LD_ADDR_EXP 81
57011: PUSH
57012: LD_EXP 81
57016: PPUSH
57017: LD_VAR 0 2
57021: PPUSH
57022: EMPTY
57023: PPUSH
57024: CALL_OW 1
57028: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57029: LD_ADDR_EXP 82
57033: PUSH
57034: LD_EXP 82
57038: PPUSH
57039: LD_VAR 0 2
57043: PPUSH
57044: EMPTY
57045: PPUSH
57046: CALL_OW 1
57050: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57051: LD_ADDR_EXP 83
57055: PUSH
57056: LD_EXP 83
57060: PPUSH
57061: LD_VAR 0 2
57065: PPUSH
57066: EMPTY
57067: PPUSH
57068: CALL_OW 1
57072: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
57073: LD_ADDR_EXP 85
57077: PUSH
57078: LD_EXP 85
57082: PPUSH
57083: LD_VAR 0 2
57087: PPUSH
57088: LD_EXP 52
57092: PUSH
57093: LD_VAR 0 2
57097: ARRAY
57098: PPUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 30
57104: PUSH
57105: LD_INT 6
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 30
57114: PUSH
57115: LD_INT 7
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 30
57124: PUSH
57125: LD_INT 8
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: PPUSH
57138: CALL_OW 72
57142: PPUSH
57143: CALL_OW 1
57147: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
57148: LD_ADDR_EXP 86
57152: PUSH
57153: LD_EXP 86
57157: PPUSH
57158: LD_VAR 0 2
57162: PPUSH
57163: EMPTY
57164: PPUSH
57165: CALL_OW 1
57169: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
57170: LD_ADDR_EXP 87
57174: PUSH
57175: LD_EXP 87
57179: PPUSH
57180: LD_VAR 0 2
57184: PPUSH
57185: EMPTY
57186: PPUSH
57187: CALL_OW 1
57191: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
57192: LD_ADDR_EXP 88
57196: PUSH
57197: LD_EXP 88
57201: PPUSH
57202: LD_VAR 0 2
57206: PPUSH
57207: EMPTY
57208: PPUSH
57209: CALL_OW 1
57213: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
57214: LD_ADDR_EXP 89
57218: PUSH
57219: LD_EXP 89
57223: PPUSH
57224: LD_VAR 0 2
57228: PPUSH
57229: EMPTY
57230: PPUSH
57231: CALL_OW 1
57235: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
57236: LD_ADDR_EXP 90
57240: PUSH
57241: LD_EXP 90
57245: PPUSH
57246: LD_VAR 0 2
57250: PPUSH
57251: EMPTY
57252: PPUSH
57253: CALL_OW 1
57257: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
57258: LD_ADDR_EXP 91
57262: PUSH
57263: LD_EXP 91
57267: PPUSH
57268: LD_VAR 0 2
57272: PPUSH
57273: EMPTY
57274: PPUSH
57275: CALL_OW 1
57279: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
57280: LD_ADDR_EXP 92
57284: PUSH
57285: LD_EXP 92
57289: PPUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: EMPTY
57296: PPUSH
57297: CALL_OW 1
57301: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
57302: LD_ADDR_EXP 93
57306: PUSH
57307: LD_EXP 93
57311: PPUSH
57312: LD_VAR 0 2
57316: PPUSH
57317: EMPTY
57318: PPUSH
57319: CALL_OW 1
57323: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
57324: LD_ADDR_EXP 94
57328: PUSH
57329: LD_EXP 94
57333: PPUSH
57334: LD_VAR 0 2
57338: PPUSH
57339: LD_INT 0
57341: PPUSH
57342: CALL_OW 1
57346: ST_TO_ADDR
// end ;
57347: GO 56271
57349: POP
57350: POP
// MC_InitSides ( ) ;
57351: CALL 57637 0 0
// MC_InitResearch ( ) ;
57355: CALL 57376 0 0
// CustomInitMacro ( ) ;
57359: CALL 5346 0 0
// skirmish := true ;
57363: LD_ADDR_EXP 50
57367: PUSH
57368: LD_INT 1
57370: ST_TO_ADDR
// end ;
57371: LD_VAR 0 1
57375: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
57376: LD_INT 0
57378: PPUSH
57379: PPUSH
57380: PPUSH
57381: PPUSH
57382: PPUSH
57383: PPUSH
// if not mc_bases then
57384: LD_EXP 52
57388: NOT
57389: IFFALSE 57393
// exit ;
57391: GO 57632
// for i = 1 to 8 do
57393: LD_ADDR_VAR 0 2
57397: PUSH
57398: DOUBLE
57399: LD_INT 1
57401: DEC
57402: ST_TO_ADDR
57403: LD_INT 8
57405: PUSH
57406: FOR_TO
57407: IFFALSE 57433
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
57409: LD_ADDR_EXP 79
57413: PUSH
57414: LD_EXP 79
57418: PPUSH
57419: LD_VAR 0 2
57423: PPUSH
57424: EMPTY
57425: PPUSH
57426: CALL_OW 1
57430: ST_TO_ADDR
57431: GO 57406
57433: POP
57434: POP
// tmp := [ ] ;
57435: LD_ADDR_VAR 0 5
57439: PUSH
57440: EMPTY
57441: ST_TO_ADDR
// for i = 1 to mc_sides do
57442: LD_ADDR_VAR 0 2
57446: PUSH
57447: DOUBLE
57448: LD_INT 1
57450: DEC
57451: ST_TO_ADDR
57452: LD_EXP 78
57456: PUSH
57457: FOR_TO
57458: IFFALSE 57516
// if not mc_sides [ i ] in tmp then
57460: LD_EXP 78
57464: PUSH
57465: LD_VAR 0 2
57469: ARRAY
57470: PUSH
57471: LD_VAR 0 5
57475: IN
57476: NOT
57477: IFFALSE 57514
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
57479: LD_ADDR_VAR 0 5
57483: PUSH
57484: LD_VAR 0 5
57488: PPUSH
57489: LD_VAR 0 5
57493: PUSH
57494: LD_INT 1
57496: PLUS
57497: PPUSH
57498: LD_EXP 78
57502: PUSH
57503: LD_VAR 0 2
57507: ARRAY
57508: PPUSH
57509: CALL_OW 2
57513: ST_TO_ADDR
57514: GO 57457
57516: POP
57517: POP
// if not tmp then
57518: LD_VAR 0 5
57522: NOT
57523: IFFALSE 57527
// exit ;
57525: GO 57632
// for j in tmp do
57527: LD_ADDR_VAR 0 3
57531: PUSH
57532: LD_VAR 0 5
57536: PUSH
57537: FOR_IN
57538: IFFALSE 57630
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
57540: LD_ADDR_VAR 0 6
57544: PUSH
57545: LD_INT 22
57547: PUSH
57548: LD_VAR 0 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PPUSH
57557: CALL_OW 69
57561: ST_TO_ADDR
// if not un then
57562: LD_VAR 0 6
57566: NOT
57567: IFFALSE 57571
// continue ;
57569: GO 57537
// nation := GetNation ( un [ 1 ] ) ;
57571: LD_ADDR_VAR 0 4
57575: PUSH
57576: LD_VAR 0 6
57580: PUSH
57581: LD_INT 1
57583: ARRAY
57584: PPUSH
57585: CALL_OW 248
57589: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
57590: LD_ADDR_EXP 79
57594: PUSH
57595: LD_EXP 79
57599: PPUSH
57600: LD_VAR 0 3
57604: PPUSH
57605: LD_VAR 0 3
57609: PPUSH
57610: LD_VAR 0 4
57614: PPUSH
57615: LD_INT 1
57617: PPUSH
57618: CALL 11146 0 3
57622: PPUSH
57623: CALL_OW 1
57627: ST_TO_ADDR
// end ;
57628: GO 57537
57630: POP
57631: POP
// end ;
57632: LD_VAR 0 1
57636: RET
// export function MC_InitSides ( ) ; var i ; begin
57637: LD_INT 0
57639: PPUSH
57640: PPUSH
// if not mc_bases then
57641: LD_EXP 52
57645: NOT
57646: IFFALSE 57650
// exit ;
57648: GO 57724
// for i = 1 to mc_bases do
57650: LD_ADDR_VAR 0 2
57654: PUSH
57655: DOUBLE
57656: LD_INT 1
57658: DEC
57659: ST_TO_ADDR
57660: LD_EXP 52
57664: PUSH
57665: FOR_TO
57666: IFFALSE 57722
// if mc_bases [ i ] then
57668: LD_EXP 52
57672: PUSH
57673: LD_VAR 0 2
57677: ARRAY
57678: IFFALSE 57720
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57680: LD_ADDR_EXP 78
57684: PUSH
57685: LD_EXP 78
57689: PPUSH
57690: LD_VAR 0 2
57694: PPUSH
57695: LD_EXP 52
57699: PUSH
57700: LD_VAR 0 2
57704: ARRAY
57705: PUSH
57706: LD_INT 1
57708: ARRAY
57709: PPUSH
57710: CALL_OW 255
57714: PPUSH
57715: CALL_OW 1
57719: ST_TO_ADDR
57720: GO 57665
57722: POP
57723: POP
// end ;
57724: LD_VAR 0 1
57728: RET
// every 0 0$01 trigger skirmish do
57729: LD_EXP 50
57733: IFFALSE 57887
57735: GO 57737
57737: DISABLE
// begin enable ;
57738: ENABLE
// MC_CheckBuildings ( ) ;
57739: CALL 62385 0 0
// MC_CheckPeopleLife ( ) ;
57743: CALL 62510 0 0
// RaiseSailEvent ( 100 ) ;
57747: LD_INT 100
57749: PPUSH
57750: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
57754: LD_INT 103
57756: PPUSH
57757: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
57761: LD_INT 104
57763: PPUSH
57764: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
57768: LD_INT 105
57770: PPUSH
57771: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
57775: LD_INT 106
57777: PPUSH
57778: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
57782: LD_INT 107
57784: PPUSH
57785: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
57789: LD_INT 108
57791: PPUSH
57792: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
57796: LD_INT 109
57798: PPUSH
57799: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
57803: LD_INT 110
57805: PPUSH
57806: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
57810: LD_INT 111
57812: PPUSH
57813: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
57817: LD_INT 112
57819: PPUSH
57820: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
57824: LD_INT 113
57826: PPUSH
57827: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
57831: LD_INT 120
57833: PPUSH
57834: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57838: LD_INT 121
57840: PPUSH
57841: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57845: LD_INT 122
57847: PPUSH
57848: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57852: LD_INT 123
57854: PPUSH
57855: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57859: LD_INT 124
57861: PPUSH
57862: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57866: LD_INT 125
57868: PPUSH
57869: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57873: LD_INT 126
57875: PPUSH
57876: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57880: LD_INT 200
57882: PPUSH
57883: CALL_OW 427
// end ;
57887: END
// on SailEvent ( event ) do begin if event < 100 then
57888: LD_VAR 0 1
57892: PUSH
57893: LD_INT 100
57895: LESS
57896: IFFALSE 57907
// CustomEvent ( event ) ;
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL 5338 0 1
// if event = 100 then
57907: LD_VAR 0 1
57911: PUSH
57912: LD_INT 100
57914: EQUAL
57915: IFFALSE 57921
// MC_ClassManager ( ) ;
57917: CALL 58313 0 0
// if event = 101 then
57921: LD_VAR 0 1
57925: PUSH
57926: LD_INT 101
57928: EQUAL
57929: IFFALSE 57935
// MC_RepairBuildings ( ) ;
57931: CALL 63106 0 0
// if event = 102 then
57935: LD_VAR 0 1
57939: PUSH
57940: LD_INT 102
57942: EQUAL
57943: IFFALSE 57949
// MC_Heal ( ) ;
57945: CALL 63838 0 0
// if event = 103 then
57949: LD_VAR 0 1
57953: PUSH
57954: LD_INT 103
57956: EQUAL
57957: IFFALSE 57963
// MC_Build ( ) ;
57959: CALL 64260 0 0
// if event = 104 then
57963: LD_VAR 0 1
57967: PUSH
57968: LD_INT 104
57970: EQUAL
57971: IFFALSE 57977
// MC_TurretWeapon ( ) ;
57973: CALL 65873 0 0
// if event = 105 then
57977: LD_VAR 0 1
57981: PUSH
57982: LD_INT 105
57984: EQUAL
57985: IFFALSE 57991
// MC_BuildUpgrade ( ) ;
57987: CALL 65424 0 0
// if event = 106 then
57991: LD_VAR 0 1
57995: PUSH
57996: LD_INT 106
57998: EQUAL
57999: IFFALSE 58005
// MC_PlantMines ( ) ;
58001: CALL 66303 0 0
// if event = 107 then
58005: LD_VAR 0 1
58009: PUSH
58010: LD_INT 107
58012: EQUAL
58013: IFFALSE 58019
// MC_CollectCrates ( ) ;
58015: CALL 67337 0 0
// if event = 108 then
58019: LD_VAR 0 1
58023: PUSH
58024: LD_INT 108
58026: EQUAL
58027: IFFALSE 58033
// MC_LinkRemoteControl ( ) ;
58029: CALL 69113 0 0
// if event = 109 then
58033: LD_VAR 0 1
58037: PUSH
58038: LD_INT 109
58040: EQUAL
58041: IFFALSE 58047
// MC_ProduceVehicle ( ) ;
58043: CALL 69294 0 0
// if event = 110 then
58047: LD_VAR 0 1
58051: PUSH
58052: LD_INT 110
58054: EQUAL
58055: IFFALSE 58061
// MC_SendAttack ( ) ;
58057: CALL 69760 0 0
// if event = 111 then
58061: LD_VAR 0 1
58065: PUSH
58066: LD_INT 111
58068: EQUAL
58069: IFFALSE 58075
// MC_Defend ( ) ;
58071: CALL 69868 0 0
// if event = 112 then
58075: LD_VAR 0 1
58079: PUSH
58080: LD_INT 112
58082: EQUAL
58083: IFFALSE 58089
// MC_Research ( ) ;
58085: CALL 70473 0 0
// if event = 113 then
58089: LD_VAR 0 1
58093: PUSH
58094: LD_INT 113
58096: EQUAL
58097: IFFALSE 58103
// MC_MinesTrigger ( ) ;
58099: CALL 71587 0 0
// if event = 120 then
58103: LD_VAR 0 1
58107: PUSH
58108: LD_INT 120
58110: EQUAL
58111: IFFALSE 58117
// MC_RepairVehicle ( ) ;
58113: CALL 71686 0 0
// if event = 121 then
58117: LD_VAR 0 1
58121: PUSH
58122: LD_INT 121
58124: EQUAL
58125: IFFALSE 58131
// MC_TameApe ( ) ;
58127: CALL 72416 0 0
// if event = 122 then
58131: LD_VAR 0 1
58135: PUSH
58136: LD_INT 122
58138: EQUAL
58139: IFFALSE 58145
// MC_ChangeApeClass ( ) ;
58141: CALL 73245 0 0
// if event = 123 then
58145: LD_VAR 0 1
58149: PUSH
58150: LD_INT 123
58152: EQUAL
58153: IFFALSE 58159
// MC_Bazooka ( ) ;
58155: CALL 73895 0 0
// if event = 124 then
58159: LD_VAR 0 1
58163: PUSH
58164: LD_INT 124
58166: EQUAL
58167: IFFALSE 58173
// MC_TeleportExit ( ) ;
58169: CALL 74093 0 0
// if event = 125 then
58173: LD_VAR 0 1
58177: PUSH
58178: LD_INT 125
58180: EQUAL
58181: IFFALSE 58187
// MC_Deposits ( ) ;
58183: CALL 74740 0 0
// if event = 126 then
58187: LD_VAR 0 1
58191: PUSH
58192: LD_INT 126
58194: EQUAL
58195: IFFALSE 58201
// MC_RemoteDriver ( ) ;
58197: CALL 75365 0 0
// if event = 200 then
58201: LD_VAR 0 1
58205: PUSH
58206: LD_INT 200
58208: EQUAL
58209: IFFALSE 58215
// MC_Idle ( ) ;
58211: CALL 77098 0 0
// end ;
58215: PPOPN 1
58217: END
// export function MC_Reset ( base , tag ) ; var i ; begin
58218: LD_INT 0
58220: PPUSH
58221: PPUSH
// if not mc_bases [ base ] or not tag then
58222: LD_EXP 52
58226: PUSH
58227: LD_VAR 0 1
58231: ARRAY
58232: NOT
58233: PUSH
58234: LD_VAR 0 2
58238: NOT
58239: OR
58240: IFFALSE 58244
// exit ;
58242: GO 58308
// for i in mc_bases [ base ] union mc_ape [ base ] do
58244: LD_ADDR_VAR 0 4
58248: PUSH
58249: LD_EXP 52
58253: PUSH
58254: LD_VAR 0 1
58258: ARRAY
58259: PUSH
58260: LD_EXP 81
58264: PUSH
58265: LD_VAR 0 1
58269: ARRAY
58270: UNION
58271: PUSH
58272: FOR_IN
58273: IFFALSE 58306
// if GetTag ( i ) = tag then
58275: LD_VAR 0 4
58279: PPUSH
58280: CALL_OW 110
58284: PUSH
58285: LD_VAR 0 2
58289: EQUAL
58290: IFFALSE 58304
// SetTag ( i , 0 ) ;
58292: LD_VAR 0 4
58296: PPUSH
58297: LD_INT 0
58299: PPUSH
58300: CALL_OW 109
58304: GO 58272
58306: POP
58307: POP
// end ;
58308: LD_VAR 0 3
58312: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
58313: LD_INT 0
58315: PPUSH
58316: PPUSH
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
58321: PPUSH
58322: PPUSH
// if not mc_bases then
58323: LD_EXP 52
58327: NOT
58328: IFFALSE 58332
// exit ;
58330: GO 58790
// for i = 1 to mc_bases do
58332: LD_ADDR_VAR 0 2
58336: PUSH
58337: DOUBLE
58338: LD_INT 1
58340: DEC
58341: ST_TO_ADDR
58342: LD_EXP 52
58346: PUSH
58347: FOR_TO
58348: IFFALSE 58788
// begin tmp := MC_ClassCheckReq ( i ) ;
58350: LD_ADDR_VAR 0 4
58354: PUSH
58355: LD_VAR 0 2
58359: PPUSH
58360: CALL 58795 0 1
58364: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
58365: LD_ADDR_EXP 93
58369: PUSH
58370: LD_EXP 93
58374: PPUSH
58375: LD_VAR 0 2
58379: PPUSH
58380: LD_VAR 0 4
58384: PPUSH
58385: CALL_OW 1
58389: ST_TO_ADDR
// if not tmp then
58390: LD_VAR 0 4
58394: NOT
58395: IFFALSE 58399
// continue ;
58397: GO 58347
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
58399: LD_ADDR_VAR 0 6
58403: PUSH
58404: LD_EXP 52
58408: PUSH
58409: LD_VAR 0 2
58413: ARRAY
58414: PPUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 30
58420: PUSH
58421: LD_INT 4
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 30
58430: PUSH
58431: LD_INT 5
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: PPUSH
58443: CALL_OW 72
58447: PUSH
58448: LD_EXP 52
58452: PUSH
58453: LD_VAR 0 2
58457: ARRAY
58458: PPUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 30
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 30
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: PPUSH
58487: CALL_OW 72
58491: PUSH
58492: LD_EXP 52
58496: PUSH
58497: LD_VAR 0 2
58501: ARRAY
58502: PPUSH
58503: LD_INT 30
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PPUSH
58513: CALL_OW 72
58517: PUSH
58518: LD_EXP 52
58522: PUSH
58523: LD_VAR 0 2
58527: ARRAY
58528: PPUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 30
58534: PUSH
58535: LD_INT 6
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 30
58544: PUSH
58545: LD_INT 7
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 30
58554: PUSH
58555: LD_INT 8
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: PPUSH
58568: CALL_OW 72
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: ST_TO_ADDR
// for j = 1 to 4 do
58579: LD_ADDR_VAR 0 3
58583: PUSH
58584: DOUBLE
58585: LD_INT 1
58587: DEC
58588: ST_TO_ADDR
58589: LD_INT 4
58591: PUSH
58592: FOR_TO
58593: IFFALSE 58784
// begin if not tmp [ j ] then
58595: LD_VAR 0 4
58599: PUSH
58600: LD_VAR 0 3
58604: ARRAY
58605: NOT
58606: IFFALSE 58610
// continue ;
58608: GO 58592
// for p in tmp [ j ] do
58610: LD_ADDR_VAR 0 5
58614: PUSH
58615: LD_VAR 0 4
58619: PUSH
58620: LD_VAR 0 3
58624: ARRAY
58625: PUSH
58626: FOR_IN
58627: IFFALSE 58780
// begin if not b [ j ] then
58629: LD_VAR 0 6
58633: PUSH
58634: LD_VAR 0 3
58638: ARRAY
58639: NOT
58640: IFFALSE 58644
// break ;
58642: GO 58780
// e := 0 ;
58644: LD_ADDR_VAR 0 7
58648: PUSH
58649: LD_INT 0
58651: ST_TO_ADDR
// for k in b [ j ] do
58652: LD_ADDR_VAR 0 8
58656: PUSH
58657: LD_VAR 0 6
58661: PUSH
58662: LD_VAR 0 3
58666: ARRAY
58667: PUSH
58668: FOR_IN
58669: IFFALSE 58696
// if IsNotFull ( k ) then
58671: LD_VAR 0 8
58675: PPUSH
58676: CALL 15437 0 1
58680: IFFALSE 58694
// begin e := k ;
58682: LD_ADDR_VAR 0 7
58686: PUSH
58687: LD_VAR 0 8
58691: ST_TO_ADDR
// break ;
58692: GO 58696
// end ;
58694: GO 58668
58696: POP
58697: POP
// if e and not UnitGoingToBuilding ( p , e ) then
58698: LD_VAR 0 7
58702: PUSH
58703: LD_VAR 0 5
58707: PPUSH
58708: LD_VAR 0 7
58712: PPUSH
58713: CALL 52556 0 2
58717: NOT
58718: AND
58719: IFFALSE 58778
// begin if IsInUnit ( p ) then
58721: LD_VAR 0 5
58725: PPUSH
58726: CALL_OW 310
58730: IFFALSE 58741
// ComExitBuilding ( p ) ;
58732: LD_VAR 0 5
58736: PPUSH
58737: CALL_OW 122
// ComEnterUnit ( p , e ) ;
58741: LD_VAR 0 5
58745: PPUSH
58746: LD_VAR 0 7
58750: PPUSH
58751: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
58755: LD_VAR 0 5
58759: PPUSH
58760: LD_VAR 0 3
58764: PPUSH
58765: CALL_OW 183
// AddComExitBuilding ( p ) ;
58769: LD_VAR 0 5
58773: PPUSH
58774: CALL_OW 182
// end ; end ;
58778: GO 58626
58780: POP
58781: POP
// end ;
58782: GO 58592
58784: POP
58785: POP
// end ;
58786: GO 58347
58788: POP
58789: POP
// end ;
58790: LD_VAR 0 1
58794: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
58795: LD_INT 0
58797: PPUSH
58798: PPUSH
58799: PPUSH
58800: PPUSH
58801: PPUSH
58802: PPUSH
58803: PPUSH
58804: PPUSH
58805: PPUSH
58806: PPUSH
58807: PPUSH
58808: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
58809: LD_VAR 0 1
58813: NOT
58814: PUSH
58815: LD_EXP 52
58819: PUSH
58820: LD_VAR 0 1
58824: ARRAY
58825: NOT
58826: OR
58827: PUSH
58828: LD_EXP 52
58832: PUSH
58833: LD_VAR 0 1
58837: ARRAY
58838: PPUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 30
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 30
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: PPUSH
58867: CALL_OW 72
58871: NOT
58872: OR
58873: IFFALSE 58877
// exit ;
58875: GO 62380
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58877: LD_ADDR_VAR 0 4
58881: PUSH
58882: LD_EXP 52
58886: PUSH
58887: LD_VAR 0 1
58891: ARRAY
58892: PPUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 25
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 25
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 25
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 25
58928: PUSH
58929: LD_INT 4
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 25
58938: PUSH
58939: LD_INT 5
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 25
58948: PUSH
58949: LD_INT 8
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 25
58958: PUSH
58959: LD_INT 9
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: PPUSH
58976: CALL_OW 72
58980: ST_TO_ADDR
// if not tmp then
58981: LD_VAR 0 4
58985: NOT
58986: IFFALSE 58990
// exit ;
58988: GO 62380
// for i in tmp do
58990: LD_ADDR_VAR 0 3
58994: PUSH
58995: LD_VAR 0 4
58999: PUSH
59000: FOR_IN
59001: IFFALSE 59032
// if GetTag ( i ) then
59003: LD_VAR 0 3
59007: PPUSH
59008: CALL_OW 110
59012: IFFALSE 59030
// tmp := tmp diff i ;
59014: LD_ADDR_VAR 0 4
59018: PUSH
59019: LD_VAR 0 4
59023: PUSH
59024: LD_VAR 0 3
59028: DIFF
59029: ST_TO_ADDR
59030: GO 59000
59032: POP
59033: POP
// if not tmp then
59034: LD_VAR 0 4
59038: NOT
59039: IFFALSE 59043
// exit ;
59041: GO 62380
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59043: LD_ADDR_VAR 0 5
59047: PUSH
59048: LD_EXP 52
59052: PUSH
59053: LD_VAR 0 1
59057: ARRAY
59058: PPUSH
59059: LD_INT 2
59061: PUSH
59062: LD_INT 25
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 25
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 25
59084: PUSH
59085: LD_INT 8
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 25
59094: PUSH
59095: LD_INT 9
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: PPUSH
59109: CALL_OW 72
59113: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
59114: LD_ADDR_VAR 0 6
59118: PUSH
59119: LD_EXP 52
59123: PUSH
59124: LD_VAR 0 1
59128: ARRAY
59129: PPUSH
59130: LD_INT 25
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PPUSH
59140: CALL_OW 72
59144: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
59145: LD_ADDR_VAR 0 7
59149: PUSH
59150: LD_EXP 52
59154: PUSH
59155: LD_VAR 0 1
59159: ARRAY
59160: PPUSH
59161: LD_INT 25
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PPUSH
59171: CALL_OW 72
59175: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
59176: LD_ADDR_VAR 0 8
59180: PUSH
59181: LD_EXP 52
59185: PUSH
59186: LD_VAR 0 1
59190: ARRAY
59191: PPUSH
59192: LD_INT 25
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 24
59204: PUSH
59205: LD_INT 251
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PPUSH
59216: CALL_OW 72
59220: ST_TO_ADDR
// if mc_scan [ base ] then
59221: LD_EXP 75
59225: PUSH
59226: LD_VAR 0 1
59230: ARRAY
59231: IFFALSE 59692
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
59233: LD_ADDR_EXP 94
59237: PUSH
59238: LD_EXP 94
59242: PPUSH
59243: LD_VAR 0 1
59247: PPUSH
59248: LD_INT 4
59250: PPUSH
59251: CALL_OW 1
59255: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59256: LD_ADDR_VAR 0 12
59260: PUSH
59261: LD_EXP 52
59265: PUSH
59266: LD_VAR 0 1
59270: ARRAY
59271: PPUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 30
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 30
59287: PUSH
59288: LD_INT 5
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: PPUSH
59300: CALL_OW 72
59304: ST_TO_ADDR
// if not b then
59305: LD_VAR 0 12
59309: NOT
59310: IFFALSE 59314
// exit ;
59312: GO 62380
// p := [ ] ;
59314: LD_ADDR_VAR 0 11
59318: PUSH
59319: EMPTY
59320: ST_TO_ADDR
// if sci >= 2 then
59321: LD_VAR 0 8
59325: PUSH
59326: LD_INT 2
59328: GREATEREQUAL
59329: IFFALSE 59360
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
59331: LD_ADDR_VAR 0 8
59335: PUSH
59336: LD_VAR 0 8
59340: PUSH
59341: LD_INT 1
59343: ARRAY
59344: PUSH
59345: LD_VAR 0 8
59349: PUSH
59350: LD_INT 2
59352: ARRAY
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: ST_TO_ADDR
59358: GO 59421
// if sci = 1 then
59360: LD_VAR 0 8
59364: PUSH
59365: LD_INT 1
59367: EQUAL
59368: IFFALSE 59389
// sci := [ sci [ 1 ] ] else
59370: LD_ADDR_VAR 0 8
59374: PUSH
59375: LD_VAR 0 8
59379: PUSH
59380: LD_INT 1
59382: ARRAY
59383: PUSH
59384: EMPTY
59385: LIST
59386: ST_TO_ADDR
59387: GO 59421
// if sci = 0 then
59389: LD_VAR 0 8
59393: PUSH
59394: LD_INT 0
59396: EQUAL
59397: IFFALSE 59421
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
59399: LD_ADDR_VAR 0 11
59403: PUSH
59404: LD_VAR 0 4
59408: PPUSH
59409: LD_INT 4
59411: PPUSH
59412: CALL 52419 0 2
59416: PUSH
59417: LD_INT 1
59419: ARRAY
59420: ST_TO_ADDR
// if eng > 4 then
59421: LD_VAR 0 6
59425: PUSH
59426: LD_INT 4
59428: GREATER
59429: IFFALSE 59475
// for i = eng downto 4 do
59431: LD_ADDR_VAR 0 3
59435: PUSH
59436: DOUBLE
59437: LD_VAR 0 6
59441: INC
59442: ST_TO_ADDR
59443: LD_INT 4
59445: PUSH
59446: FOR_DOWNTO
59447: IFFALSE 59473
// eng := eng diff eng [ i ] ;
59449: LD_ADDR_VAR 0 6
59453: PUSH
59454: LD_VAR 0 6
59458: PUSH
59459: LD_VAR 0 6
59463: PUSH
59464: LD_VAR 0 3
59468: ARRAY
59469: DIFF
59470: ST_TO_ADDR
59471: GO 59446
59473: POP
59474: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
59475: LD_ADDR_VAR 0 4
59479: PUSH
59480: LD_VAR 0 4
59484: PUSH
59485: LD_VAR 0 5
59489: PUSH
59490: LD_VAR 0 6
59494: UNION
59495: PUSH
59496: LD_VAR 0 7
59500: UNION
59501: PUSH
59502: LD_VAR 0 8
59506: UNION
59507: DIFF
59508: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
59509: LD_ADDR_VAR 0 13
59513: PUSH
59514: LD_EXP 52
59518: PUSH
59519: LD_VAR 0 1
59523: ARRAY
59524: PPUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 30
59530: PUSH
59531: LD_INT 32
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 30
59540: PUSH
59541: LD_INT 31
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: PPUSH
59553: CALL_OW 72
59557: PUSH
59558: LD_EXP 52
59562: PUSH
59563: LD_VAR 0 1
59567: ARRAY
59568: PPUSH
59569: LD_INT 2
59571: PUSH
59572: LD_INT 30
59574: PUSH
59575: LD_INT 4
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 30
59584: PUSH
59585: LD_INT 5
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: PPUSH
59597: CALL_OW 72
59601: PUSH
59602: LD_INT 6
59604: MUL
59605: PLUS
59606: ST_TO_ADDR
// if bcount < tmp then
59607: LD_VAR 0 13
59611: PUSH
59612: LD_VAR 0 4
59616: LESS
59617: IFFALSE 59663
// for i = tmp downto bcount do
59619: LD_ADDR_VAR 0 3
59623: PUSH
59624: DOUBLE
59625: LD_VAR 0 4
59629: INC
59630: ST_TO_ADDR
59631: LD_VAR 0 13
59635: PUSH
59636: FOR_DOWNTO
59637: IFFALSE 59661
// tmp := Delete ( tmp , tmp ) ;
59639: LD_ADDR_VAR 0 4
59643: PUSH
59644: LD_VAR 0 4
59648: PPUSH
59649: LD_VAR 0 4
59653: PPUSH
59654: CALL_OW 3
59658: ST_TO_ADDR
59659: GO 59636
59661: POP
59662: POP
// result := [ tmp , 0 , 0 , p ] ;
59663: LD_ADDR_VAR 0 2
59667: PUSH
59668: LD_VAR 0 4
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_VAR 0 11
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: ST_TO_ADDR
// exit ;
59690: GO 62380
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59692: LD_EXP 52
59696: PUSH
59697: LD_VAR 0 1
59701: ARRAY
59702: PPUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 30
59708: PUSH
59709: LD_INT 6
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 30
59718: PUSH
59719: LD_INT 7
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 30
59728: PUSH
59729: LD_INT 8
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: PPUSH
59742: CALL_OW 72
59746: NOT
59747: PUSH
59748: LD_EXP 52
59752: PUSH
59753: LD_VAR 0 1
59757: ARRAY
59758: PPUSH
59759: LD_INT 30
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PPUSH
59769: CALL_OW 72
59773: NOT
59774: AND
59775: IFFALSE 59847
// begin if eng = tmp then
59777: LD_VAR 0 6
59781: PUSH
59782: LD_VAR 0 4
59786: EQUAL
59787: IFFALSE 59791
// exit ;
59789: GO 62380
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
59791: LD_ADDR_EXP 94
59795: PUSH
59796: LD_EXP 94
59800: PPUSH
59801: LD_VAR 0 1
59805: PPUSH
59806: LD_INT 1
59808: PPUSH
59809: CALL_OW 1
59813: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
59814: LD_ADDR_VAR 0 2
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_VAR 0 4
59826: PUSH
59827: LD_VAR 0 6
59831: DIFF
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: ST_TO_ADDR
// exit ;
59845: GO 62380
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59847: LD_EXP 79
59851: PUSH
59852: LD_EXP 78
59856: PUSH
59857: LD_VAR 0 1
59861: ARRAY
59862: ARRAY
59863: PUSH
59864: LD_EXP 52
59868: PUSH
59869: LD_VAR 0 1
59873: ARRAY
59874: PPUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 30
59880: PUSH
59881: LD_INT 6
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 30
59890: PUSH
59891: LD_INT 7
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 30
59900: PUSH
59901: LD_INT 8
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: PPUSH
59914: CALL_OW 72
59918: AND
59919: PUSH
59920: LD_EXP 52
59924: PUSH
59925: LD_VAR 0 1
59929: ARRAY
59930: PPUSH
59931: LD_INT 30
59933: PUSH
59934: LD_INT 3
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PPUSH
59941: CALL_OW 72
59945: NOT
59946: AND
59947: IFFALSE 60161
// begin if sci >= 6 then
59949: LD_VAR 0 8
59953: PUSH
59954: LD_INT 6
59956: GREATEREQUAL
59957: IFFALSE 59961
// exit ;
59959: GO 62380
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59961: LD_ADDR_EXP 94
59965: PUSH
59966: LD_EXP 94
59970: PPUSH
59971: LD_VAR 0 1
59975: PPUSH
59976: LD_INT 2
59978: PPUSH
59979: CALL_OW 1
59983: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59984: LD_ADDR_VAR 0 9
59988: PUSH
59989: LD_VAR 0 4
59993: PUSH
59994: LD_VAR 0 8
59998: DIFF
59999: PPUSH
60000: LD_INT 4
60002: PPUSH
60003: CALL 52419 0 2
60007: ST_TO_ADDR
// p := [ ] ;
60008: LD_ADDR_VAR 0 11
60012: PUSH
60013: EMPTY
60014: ST_TO_ADDR
// if sci < 6 and sort > 6 then
60015: LD_VAR 0 8
60019: PUSH
60020: LD_INT 6
60022: LESS
60023: PUSH
60024: LD_VAR 0 9
60028: PUSH
60029: LD_INT 6
60031: GREATER
60032: AND
60033: IFFALSE 60114
// begin for i = 1 to 6 - sci do
60035: LD_ADDR_VAR 0 3
60039: PUSH
60040: DOUBLE
60041: LD_INT 1
60043: DEC
60044: ST_TO_ADDR
60045: LD_INT 6
60047: PUSH
60048: LD_VAR 0 8
60052: MINUS
60053: PUSH
60054: FOR_TO
60055: IFFALSE 60110
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
60057: LD_ADDR_VAR 0 11
60061: PUSH
60062: LD_VAR 0 11
60066: PPUSH
60067: LD_VAR 0 11
60071: PUSH
60072: LD_INT 1
60074: PLUS
60075: PPUSH
60076: LD_VAR 0 9
60080: PUSH
60081: LD_INT 1
60083: ARRAY
60084: PPUSH
60085: CALL_OW 2
60089: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
60090: LD_ADDR_VAR 0 9
60094: PUSH
60095: LD_VAR 0 9
60099: PPUSH
60100: LD_INT 1
60102: PPUSH
60103: CALL_OW 3
60107: ST_TO_ADDR
// end ;
60108: GO 60054
60110: POP
60111: POP
// end else
60112: GO 60134
// if sort then
60114: LD_VAR 0 9
60118: IFFALSE 60134
// p := sort [ 1 ] ;
60120: LD_ADDR_VAR 0 11
60124: PUSH
60125: LD_VAR 0 9
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
60134: LD_ADDR_VAR 0 2
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_VAR 0 11
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// exit ;
60159: GO 62380
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60161: LD_EXP 79
60165: PUSH
60166: LD_EXP 78
60170: PUSH
60171: LD_VAR 0 1
60175: ARRAY
60176: ARRAY
60177: PUSH
60178: LD_EXP 52
60182: PUSH
60183: LD_VAR 0 1
60187: ARRAY
60188: PPUSH
60189: LD_INT 2
60191: PUSH
60192: LD_INT 30
60194: PUSH
60195: LD_INT 6
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 30
60204: PUSH
60205: LD_INT 7
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 30
60214: PUSH
60215: LD_INT 8
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: PPUSH
60228: CALL_OW 72
60232: AND
60233: PUSH
60234: LD_EXP 52
60238: PUSH
60239: LD_VAR 0 1
60243: ARRAY
60244: PPUSH
60245: LD_INT 30
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PPUSH
60255: CALL_OW 72
60259: AND
60260: IFFALSE 60994
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
60262: LD_ADDR_EXP 94
60266: PUSH
60267: LD_EXP 94
60271: PPUSH
60272: LD_VAR 0 1
60276: PPUSH
60277: LD_INT 3
60279: PPUSH
60280: CALL_OW 1
60284: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60285: LD_ADDR_VAR 0 2
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// if not eng then
60308: LD_VAR 0 6
60312: NOT
60313: IFFALSE 60376
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
60315: LD_ADDR_VAR 0 11
60319: PUSH
60320: LD_VAR 0 4
60324: PPUSH
60325: LD_INT 2
60327: PPUSH
60328: CALL 52419 0 2
60332: PUSH
60333: LD_INT 1
60335: ARRAY
60336: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
60337: LD_ADDR_VAR 0 2
60341: PUSH
60342: LD_VAR 0 2
60346: PPUSH
60347: LD_INT 2
60349: PPUSH
60350: LD_VAR 0 11
60354: PPUSH
60355: CALL_OW 1
60359: ST_TO_ADDR
// tmp := tmp diff p ;
60360: LD_ADDR_VAR 0 4
60364: PUSH
60365: LD_VAR 0 4
60369: PUSH
60370: LD_VAR 0 11
60374: DIFF
60375: ST_TO_ADDR
// end ; if tmp and sci < 6 then
60376: LD_VAR 0 4
60380: PUSH
60381: LD_VAR 0 8
60385: PUSH
60386: LD_INT 6
60388: LESS
60389: AND
60390: IFFALSE 60578
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
60392: LD_ADDR_VAR 0 9
60396: PUSH
60397: LD_VAR 0 4
60401: PUSH
60402: LD_VAR 0 8
60406: PUSH
60407: LD_VAR 0 7
60411: UNION
60412: DIFF
60413: PPUSH
60414: LD_INT 4
60416: PPUSH
60417: CALL 52419 0 2
60421: ST_TO_ADDR
// p := [ ] ;
60422: LD_ADDR_VAR 0 11
60426: PUSH
60427: EMPTY
60428: ST_TO_ADDR
// if sort then
60429: LD_VAR 0 9
60433: IFFALSE 60549
// for i = 1 to 6 - sci do
60435: LD_ADDR_VAR 0 3
60439: PUSH
60440: DOUBLE
60441: LD_INT 1
60443: DEC
60444: ST_TO_ADDR
60445: LD_INT 6
60447: PUSH
60448: LD_VAR 0 8
60452: MINUS
60453: PUSH
60454: FOR_TO
60455: IFFALSE 60547
// begin if i = sort then
60457: LD_VAR 0 3
60461: PUSH
60462: LD_VAR 0 9
60466: EQUAL
60467: IFFALSE 60471
// break ;
60469: GO 60547
// if GetClass ( i ) = 4 then
60471: LD_VAR 0 3
60475: PPUSH
60476: CALL_OW 257
60480: PUSH
60481: LD_INT 4
60483: EQUAL
60484: IFFALSE 60488
// continue ;
60486: GO 60454
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60488: LD_ADDR_VAR 0 11
60492: PUSH
60493: LD_VAR 0 11
60497: PPUSH
60498: LD_VAR 0 11
60502: PUSH
60503: LD_INT 1
60505: PLUS
60506: PPUSH
60507: LD_VAR 0 9
60511: PUSH
60512: LD_VAR 0 3
60516: ARRAY
60517: PPUSH
60518: CALL_OW 2
60522: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60523: LD_ADDR_VAR 0 4
60527: PUSH
60528: LD_VAR 0 4
60532: PUSH
60533: LD_VAR 0 9
60537: PUSH
60538: LD_VAR 0 3
60542: ARRAY
60543: DIFF
60544: ST_TO_ADDR
// end ;
60545: GO 60454
60547: POP
60548: POP
// if p then
60549: LD_VAR 0 11
60553: IFFALSE 60578
// result := Replace ( result , 4 , p ) ;
60555: LD_ADDR_VAR 0 2
60559: PUSH
60560: LD_VAR 0 2
60564: PPUSH
60565: LD_INT 4
60567: PPUSH
60568: LD_VAR 0 11
60572: PPUSH
60573: CALL_OW 1
60577: ST_TO_ADDR
// end ; if tmp and mech < 6 then
60578: LD_VAR 0 4
60582: PUSH
60583: LD_VAR 0 7
60587: PUSH
60588: LD_INT 6
60590: LESS
60591: AND
60592: IFFALSE 60780
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60594: LD_ADDR_VAR 0 9
60598: PUSH
60599: LD_VAR 0 4
60603: PUSH
60604: LD_VAR 0 8
60608: PUSH
60609: LD_VAR 0 7
60613: UNION
60614: DIFF
60615: PPUSH
60616: LD_INT 3
60618: PPUSH
60619: CALL 52419 0 2
60623: ST_TO_ADDR
// p := [ ] ;
60624: LD_ADDR_VAR 0 11
60628: PUSH
60629: EMPTY
60630: ST_TO_ADDR
// if sort then
60631: LD_VAR 0 9
60635: IFFALSE 60751
// for i = 1 to 6 - mech do
60637: LD_ADDR_VAR 0 3
60641: PUSH
60642: DOUBLE
60643: LD_INT 1
60645: DEC
60646: ST_TO_ADDR
60647: LD_INT 6
60649: PUSH
60650: LD_VAR 0 7
60654: MINUS
60655: PUSH
60656: FOR_TO
60657: IFFALSE 60749
// begin if i = sort then
60659: LD_VAR 0 3
60663: PUSH
60664: LD_VAR 0 9
60668: EQUAL
60669: IFFALSE 60673
// break ;
60671: GO 60749
// if GetClass ( i ) = 3 then
60673: LD_VAR 0 3
60677: PPUSH
60678: CALL_OW 257
60682: PUSH
60683: LD_INT 3
60685: EQUAL
60686: IFFALSE 60690
// continue ;
60688: GO 60656
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60690: LD_ADDR_VAR 0 11
60694: PUSH
60695: LD_VAR 0 11
60699: PPUSH
60700: LD_VAR 0 11
60704: PUSH
60705: LD_INT 1
60707: PLUS
60708: PPUSH
60709: LD_VAR 0 9
60713: PUSH
60714: LD_VAR 0 3
60718: ARRAY
60719: PPUSH
60720: CALL_OW 2
60724: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60725: LD_ADDR_VAR 0 4
60729: PUSH
60730: LD_VAR 0 4
60734: PUSH
60735: LD_VAR 0 9
60739: PUSH
60740: LD_VAR 0 3
60744: ARRAY
60745: DIFF
60746: ST_TO_ADDR
// end ;
60747: GO 60656
60749: POP
60750: POP
// if p then
60751: LD_VAR 0 11
60755: IFFALSE 60780
// result := Replace ( result , 3 , p ) ;
60757: LD_ADDR_VAR 0 2
60761: PUSH
60762: LD_VAR 0 2
60766: PPUSH
60767: LD_INT 3
60769: PPUSH
60770: LD_VAR 0 11
60774: PPUSH
60775: CALL_OW 1
60779: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
60780: LD_VAR 0 4
60784: PUSH
60785: LD_INT 6
60787: GREATER
60788: PUSH
60789: LD_VAR 0 6
60793: PUSH
60794: LD_INT 6
60796: LESS
60797: AND
60798: IFFALSE 60992
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60800: LD_ADDR_VAR 0 9
60804: PUSH
60805: LD_VAR 0 4
60809: PUSH
60810: LD_VAR 0 8
60814: PUSH
60815: LD_VAR 0 7
60819: UNION
60820: PUSH
60821: LD_VAR 0 6
60825: UNION
60826: DIFF
60827: PPUSH
60828: LD_INT 2
60830: PPUSH
60831: CALL 52419 0 2
60835: ST_TO_ADDR
// p := [ ] ;
60836: LD_ADDR_VAR 0 11
60840: PUSH
60841: EMPTY
60842: ST_TO_ADDR
// if sort then
60843: LD_VAR 0 9
60847: IFFALSE 60963
// for i = 1 to 6 - eng do
60849: LD_ADDR_VAR 0 3
60853: PUSH
60854: DOUBLE
60855: LD_INT 1
60857: DEC
60858: ST_TO_ADDR
60859: LD_INT 6
60861: PUSH
60862: LD_VAR 0 6
60866: MINUS
60867: PUSH
60868: FOR_TO
60869: IFFALSE 60961
// begin if i = sort then
60871: LD_VAR 0 3
60875: PUSH
60876: LD_VAR 0 9
60880: EQUAL
60881: IFFALSE 60885
// break ;
60883: GO 60961
// if GetClass ( i ) = 2 then
60885: LD_VAR 0 3
60889: PPUSH
60890: CALL_OW 257
60894: PUSH
60895: LD_INT 2
60897: EQUAL
60898: IFFALSE 60902
// continue ;
60900: GO 60868
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60902: LD_ADDR_VAR 0 11
60906: PUSH
60907: LD_VAR 0 11
60911: PPUSH
60912: LD_VAR 0 11
60916: PUSH
60917: LD_INT 1
60919: PLUS
60920: PPUSH
60921: LD_VAR 0 9
60925: PUSH
60926: LD_VAR 0 3
60930: ARRAY
60931: PPUSH
60932: CALL_OW 2
60936: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60937: LD_ADDR_VAR 0 4
60941: PUSH
60942: LD_VAR 0 4
60946: PUSH
60947: LD_VAR 0 9
60951: PUSH
60952: LD_VAR 0 3
60956: ARRAY
60957: DIFF
60958: ST_TO_ADDR
// end ;
60959: GO 60868
60961: POP
60962: POP
// if p then
60963: LD_VAR 0 11
60967: IFFALSE 60992
// result := Replace ( result , 2 , p ) ;
60969: LD_ADDR_VAR 0 2
60973: PUSH
60974: LD_VAR 0 2
60978: PPUSH
60979: LD_INT 2
60981: PPUSH
60982: LD_VAR 0 11
60986: PPUSH
60987: CALL_OW 1
60991: ST_TO_ADDR
// end ; exit ;
60992: GO 62380
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
60994: LD_EXP 79
60998: PUSH
60999: LD_EXP 78
61003: PUSH
61004: LD_VAR 0 1
61008: ARRAY
61009: ARRAY
61010: NOT
61011: PUSH
61012: LD_EXP 52
61016: PUSH
61017: LD_VAR 0 1
61021: ARRAY
61022: PPUSH
61023: LD_INT 30
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PPUSH
61033: CALL_OW 72
61037: AND
61038: PUSH
61039: LD_EXP 57
61043: PUSH
61044: LD_VAR 0 1
61048: ARRAY
61049: AND
61050: IFFALSE 61658
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
61052: LD_ADDR_EXP 94
61056: PUSH
61057: LD_EXP 94
61061: PPUSH
61062: LD_VAR 0 1
61066: PPUSH
61067: LD_INT 5
61069: PPUSH
61070: CALL_OW 1
61074: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61075: LD_ADDR_VAR 0 2
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: ST_TO_ADDR
// if sci > 1 then
61098: LD_VAR 0 8
61102: PUSH
61103: LD_INT 1
61105: GREATER
61106: IFFALSE 61134
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
61108: LD_ADDR_VAR 0 4
61112: PUSH
61113: LD_VAR 0 4
61117: PUSH
61118: LD_VAR 0 8
61122: PUSH
61123: LD_VAR 0 8
61127: PUSH
61128: LD_INT 1
61130: ARRAY
61131: DIFF
61132: DIFF
61133: ST_TO_ADDR
// if tmp and not sci then
61134: LD_VAR 0 4
61138: PUSH
61139: LD_VAR 0 8
61143: NOT
61144: AND
61145: IFFALSE 61214
// begin sort := SortBySkill ( tmp , 4 ) ;
61147: LD_ADDR_VAR 0 9
61151: PUSH
61152: LD_VAR 0 4
61156: PPUSH
61157: LD_INT 4
61159: PPUSH
61160: CALL 52419 0 2
61164: ST_TO_ADDR
// if sort then
61165: LD_VAR 0 9
61169: IFFALSE 61185
// p := sort [ 1 ] ;
61171: LD_ADDR_VAR 0 11
61175: PUSH
61176: LD_VAR 0 9
61180: PUSH
61181: LD_INT 1
61183: ARRAY
61184: ST_TO_ADDR
// if p then
61185: LD_VAR 0 11
61189: IFFALSE 61214
// result := Replace ( result , 4 , p ) ;
61191: LD_ADDR_VAR 0 2
61195: PUSH
61196: LD_VAR 0 2
61200: PPUSH
61201: LD_INT 4
61203: PPUSH
61204: LD_VAR 0 11
61208: PPUSH
61209: CALL_OW 1
61213: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61214: LD_ADDR_VAR 0 4
61218: PUSH
61219: LD_VAR 0 4
61223: PUSH
61224: LD_VAR 0 7
61228: DIFF
61229: ST_TO_ADDR
// if tmp and mech < 6 then
61230: LD_VAR 0 4
61234: PUSH
61235: LD_VAR 0 7
61239: PUSH
61240: LD_INT 6
61242: LESS
61243: AND
61244: IFFALSE 61432
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
61246: LD_ADDR_VAR 0 9
61250: PUSH
61251: LD_VAR 0 4
61255: PUSH
61256: LD_VAR 0 8
61260: PUSH
61261: LD_VAR 0 7
61265: UNION
61266: DIFF
61267: PPUSH
61268: LD_INT 3
61270: PPUSH
61271: CALL 52419 0 2
61275: ST_TO_ADDR
// p := [ ] ;
61276: LD_ADDR_VAR 0 11
61280: PUSH
61281: EMPTY
61282: ST_TO_ADDR
// if sort then
61283: LD_VAR 0 9
61287: IFFALSE 61403
// for i = 1 to 6 - mech do
61289: LD_ADDR_VAR 0 3
61293: PUSH
61294: DOUBLE
61295: LD_INT 1
61297: DEC
61298: ST_TO_ADDR
61299: LD_INT 6
61301: PUSH
61302: LD_VAR 0 7
61306: MINUS
61307: PUSH
61308: FOR_TO
61309: IFFALSE 61401
// begin if i = sort then
61311: LD_VAR 0 3
61315: PUSH
61316: LD_VAR 0 9
61320: EQUAL
61321: IFFALSE 61325
// break ;
61323: GO 61401
// if GetClass ( i ) = 3 then
61325: LD_VAR 0 3
61329: PPUSH
61330: CALL_OW 257
61334: PUSH
61335: LD_INT 3
61337: EQUAL
61338: IFFALSE 61342
// continue ;
61340: GO 61308
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61342: LD_ADDR_VAR 0 11
61346: PUSH
61347: LD_VAR 0 11
61351: PPUSH
61352: LD_VAR 0 11
61356: PUSH
61357: LD_INT 1
61359: PLUS
61360: PPUSH
61361: LD_VAR 0 9
61365: PUSH
61366: LD_VAR 0 3
61370: ARRAY
61371: PPUSH
61372: CALL_OW 2
61376: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61377: LD_ADDR_VAR 0 4
61381: PUSH
61382: LD_VAR 0 4
61386: PUSH
61387: LD_VAR 0 9
61391: PUSH
61392: LD_VAR 0 3
61396: ARRAY
61397: DIFF
61398: ST_TO_ADDR
// end ;
61399: GO 61308
61401: POP
61402: POP
// if p then
61403: LD_VAR 0 11
61407: IFFALSE 61432
// result := Replace ( result , 3 , p ) ;
61409: LD_ADDR_VAR 0 2
61413: PUSH
61414: LD_VAR 0 2
61418: PPUSH
61419: LD_INT 3
61421: PPUSH
61422: LD_VAR 0 11
61426: PPUSH
61427: CALL_OW 1
61431: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61432: LD_ADDR_VAR 0 4
61436: PUSH
61437: LD_VAR 0 4
61441: PUSH
61442: LD_VAR 0 6
61446: DIFF
61447: ST_TO_ADDR
// if tmp and eng < 6 then
61448: LD_VAR 0 4
61452: PUSH
61453: LD_VAR 0 6
61457: PUSH
61458: LD_INT 6
61460: LESS
61461: AND
61462: IFFALSE 61656
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61464: LD_ADDR_VAR 0 9
61468: PUSH
61469: LD_VAR 0 4
61473: PUSH
61474: LD_VAR 0 8
61478: PUSH
61479: LD_VAR 0 7
61483: UNION
61484: PUSH
61485: LD_VAR 0 6
61489: UNION
61490: DIFF
61491: PPUSH
61492: LD_INT 2
61494: PPUSH
61495: CALL 52419 0 2
61499: ST_TO_ADDR
// p := [ ] ;
61500: LD_ADDR_VAR 0 11
61504: PUSH
61505: EMPTY
61506: ST_TO_ADDR
// if sort then
61507: LD_VAR 0 9
61511: IFFALSE 61627
// for i = 1 to 6 - eng do
61513: LD_ADDR_VAR 0 3
61517: PUSH
61518: DOUBLE
61519: LD_INT 1
61521: DEC
61522: ST_TO_ADDR
61523: LD_INT 6
61525: PUSH
61526: LD_VAR 0 6
61530: MINUS
61531: PUSH
61532: FOR_TO
61533: IFFALSE 61625
// begin if i = sort then
61535: LD_VAR 0 3
61539: PUSH
61540: LD_VAR 0 9
61544: EQUAL
61545: IFFALSE 61549
// break ;
61547: GO 61625
// if GetClass ( i ) = 2 then
61549: LD_VAR 0 3
61553: PPUSH
61554: CALL_OW 257
61558: PUSH
61559: LD_INT 2
61561: EQUAL
61562: IFFALSE 61566
// continue ;
61564: GO 61532
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61566: LD_ADDR_VAR 0 11
61570: PUSH
61571: LD_VAR 0 11
61575: PPUSH
61576: LD_VAR 0 11
61580: PUSH
61581: LD_INT 1
61583: PLUS
61584: PPUSH
61585: LD_VAR 0 9
61589: PUSH
61590: LD_VAR 0 3
61594: ARRAY
61595: PPUSH
61596: CALL_OW 2
61600: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61601: LD_ADDR_VAR 0 4
61605: PUSH
61606: LD_VAR 0 4
61610: PUSH
61611: LD_VAR 0 9
61615: PUSH
61616: LD_VAR 0 3
61620: ARRAY
61621: DIFF
61622: ST_TO_ADDR
// end ;
61623: GO 61532
61625: POP
61626: POP
// if p then
61627: LD_VAR 0 11
61631: IFFALSE 61656
// result := Replace ( result , 2 , p ) ;
61633: LD_ADDR_VAR 0 2
61637: PUSH
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_INT 2
61645: PPUSH
61646: LD_VAR 0 11
61650: PPUSH
61651: CALL_OW 1
61655: ST_TO_ADDR
// end ; exit ;
61656: GO 62380
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
61658: LD_EXP 79
61662: PUSH
61663: LD_EXP 78
61667: PUSH
61668: LD_VAR 0 1
61672: ARRAY
61673: ARRAY
61674: NOT
61675: PUSH
61676: LD_EXP 52
61680: PUSH
61681: LD_VAR 0 1
61685: ARRAY
61686: PPUSH
61687: LD_INT 30
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PPUSH
61697: CALL_OW 72
61701: AND
61702: PUSH
61703: LD_EXP 57
61707: PUSH
61708: LD_VAR 0 1
61712: ARRAY
61713: NOT
61714: AND
61715: IFFALSE 62380
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
61717: LD_ADDR_EXP 94
61721: PUSH
61722: LD_EXP 94
61726: PPUSH
61727: LD_VAR 0 1
61731: PPUSH
61732: LD_INT 6
61734: PPUSH
61735: CALL_OW 1
61739: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61740: LD_ADDR_VAR 0 2
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: ST_TO_ADDR
// if sci >= 1 then
61763: LD_VAR 0 8
61767: PUSH
61768: LD_INT 1
61770: GREATEREQUAL
61771: IFFALSE 61793
// tmp := tmp diff sci [ 1 ] ;
61773: LD_ADDR_VAR 0 4
61777: PUSH
61778: LD_VAR 0 4
61782: PUSH
61783: LD_VAR 0 8
61787: PUSH
61788: LD_INT 1
61790: ARRAY
61791: DIFF
61792: ST_TO_ADDR
// if tmp and not sci then
61793: LD_VAR 0 4
61797: PUSH
61798: LD_VAR 0 8
61802: NOT
61803: AND
61804: IFFALSE 61873
// begin sort := SortBySkill ( tmp , 4 ) ;
61806: LD_ADDR_VAR 0 9
61810: PUSH
61811: LD_VAR 0 4
61815: PPUSH
61816: LD_INT 4
61818: PPUSH
61819: CALL 52419 0 2
61823: ST_TO_ADDR
// if sort then
61824: LD_VAR 0 9
61828: IFFALSE 61844
// p := sort [ 1 ] ;
61830: LD_ADDR_VAR 0 11
61834: PUSH
61835: LD_VAR 0 9
61839: PUSH
61840: LD_INT 1
61842: ARRAY
61843: ST_TO_ADDR
// if p then
61844: LD_VAR 0 11
61848: IFFALSE 61873
// result := Replace ( result , 4 , p ) ;
61850: LD_ADDR_VAR 0 2
61854: PUSH
61855: LD_VAR 0 2
61859: PPUSH
61860: LD_INT 4
61862: PPUSH
61863: LD_VAR 0 11
61867: PPUSH
61868: CALL_OW 1
61872: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61873: LD_ADDR_VAR 0 4
61877: PUSH
61878: LD_VAR 0 4
61882: PUSH
61883: LD_VAR 0 7
61887: DIFF
61888: ST_TO_ADDR
// if tmp and mech < 6 then
61889: LD_VAR 0 4
61893: PUSH
61894: LD_VAR 0 7
61898: PUSH
61899: LD_INT 6
61901: LESS
61902: AND
61903: IFFALSE 62085
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61905: LD_ADDR_VAR 0 9
61909: PUSH
61910: LD_VAR 0 4
61914: PUSH
61915: LD_VAR 0 7
61919: DIFF
61920: PPUSH
61921: LD_INT 3
61923: PPUSH
61924: CALL 52419 0 2
61928: ST_TO_ADDR
// p := [ ] ;
61929: LD_ADDR_VAR 0 11
61933: PUSH
61934: EMPTY
61935: ST_TO_ADDR
// if sort then
61936: LD_VAR 0 9
61940: IFFALSE 62056
// for i = 1 to 6 - mech do
61942: LD_ADDR_VAR 0 3
61946: PUSH
61947: DOUBLE
61948: LD_INT 1
61950: DEC
61951: ST_TO_ADDR
61952: LD_INT 6
61954: PUSH
61955: LD_VAR 0 7
61959: MINUS
61960: PUSH
61961: FOR_TO
61962: IFFALSE 62054
// begin if i = sort then
61964: LD_VAR 0 3
61968: PUSH
61969: LD_VAR 0 9
61973: EQUAL
61974: IFFALSE 61978
// break ;
61976: GO 62054
// if GetClass ( i ) = 3 then
61978: LD_VAR 0 3
61982: PPUSH
61983: CALL_OW 257
61987: PUSH
61988: LD_INT 3
61990: EQUAL
61991: IFFALSE 61995
// continue ;
61993: GO 61961
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61995: LD_ADDR_VAR 0 11
61999: PUSH
62000: LD_VAR 0 11
62004: PPUSH
62005: LD_VAR 0 11
62009: PUSH
62010: LD_INT 1
62012: PLUS
62013: PPUSH
62014: LD_VAR 0 9
62018: PUSH
62019: LD_VAR 0 3
62023: ARRAY
62024: PPUSH
62025: CALL_OW 2
62029: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62030: LD_ADDR_VAR 0 4
62034: PUSH
62035: LD_VAR 0 4
62039: PUSH
62040: LD_VAR 0 9
62044: PUSH
62045: LD_VAR 0 3
62049: ARRAY
62050: DIFF
62051: ST_TO_ADDR
// end ;
62052: GO 61961
62054: POP
62055: POP
// if p then
62056: LD_VAR 0 11
62060: IFFALSE 62085
// result := Replace ( result , 3 , p ) ;
62062: LD_ADDR_VAR 0 2
62066: PUSH
62067: LD_VAR 0 2
62071: PPUSH
62072: LD_INT 3
62074: PPUSH
62075: LD_VAR 0 11
62079: PPUSH
62080: CALL_OW 1
62084: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
62085: LD_ADDR_VAR 0 4
62089: PUSH
62090: LD_VAR 0 4
62094: PUSH
62095: LD_VAR 0 6
62099: DIFF
62100: ST_TO_ADDR
// if tmp and eng < 4 then
62101: LD_VAR 0 4
62105: PUSH
62106: LD_VAR 0 6
62110: PUSH
62111: LD_INT 4
62113: LESS
62114: AND
62115: IFFALSE 62305
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
62117: LD_ADDR_VAR 0 9
62121: PUSH
62122: LD_VAR 0 4
62126: PUSH
62127: LD_VAR 0 7
62131: PUSH
62132: LD_VAR 0 6
62136: UNION
62137: DIFF
62138: PPUSH
62139: LD_INT 2
62141: PPUSH
62142: CALL 52419 0 2
62146: ST_TO_ADDR
// p := [ ] ;
62147: LD_ADDR_VAR 0 11
62151: PUSH
62152: EMPTY
62153: ST_TO_ADDR
// if sort then
62154: LD_VAR 0 9
62158: IFFALSE 62274
// for i = 1 to 4 - eng do
62160: LD_ADDR_VAR 0 3
62164: PUSH
62165: DOUBLE
62166: LD_INT 1
62168: DEC
62169: ST_TO_ADDR
62170: LD_INT 4
62172: PUSH
62173: LD_VAR 0 6
62177: MINUS
62178: PUSH
62179: FOR_TO
62180: IFFALSE 62272
// begin if i = sort then
62182: LD_VAR 0 3
62186: PUSH
62187: LD_VAR 0 9
62191: EQUAL
62192: IFFALSE 62196
// break ;
62194: GO 62272
// if GetClass ( i ) = 2 then
62196: LD_VAR 0 3
62200: PPUSH
62201: CALL_OW 257
62205: PUSH
62206: LD_INT 2
62208: EQUAL
62209: IFFALSE 62213
// continue ;
62211: GO 62179
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62213: LD_ADDR_VAR 0 11
62217: PUSH
62218: LD_VAR 0 11
62222: PPUSH
62223: LD_VAR 0 11
62227: PUSH
62228: LD_INT 1
62230: PLUS
62231: PPUSH
62232: LD_VAR 0 9
62236: PUSH
62237: LD_VAR 0 3
62241: ARRAY
62242: PPUSH
62243: CALL_OW 2
62247: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62248: LD_ADDR_VAR 0 4
62252: PUSH
62253: LD_VAR 0 4
62257: PUSH
62258: LD_VAR 0 9
62262: PUSH
62263: LD_VAR 0 3
62267: ARRAY
62268: DIFF
62269: ST_TO_ADDR
// end ;
62270: GO 62179
62272: POP
62273: POP
// if p then
62274: LD_VAR 0 11
62278: IFFALSE 62303
// result := Replace ( result , 2 , p ) ;
62280: LD_ADDR_VAR 0 2
62284: PUSH
62285: LD_VAR 0 2
62289: PPUSH
62290: LD_INT 2
62292: PPUSH
62293: LD_VAR 0 11
62297: PPUSH
62298: CALL_OW 1
62302: ST_TO_ADDR
// end else
62303: GO 62349
// for i = eng downto 5 do
62305: LD_ADDR_VAR 0 3
62309: PUSH
62310: DOUBLE
62311: LD_VAR 0 6
62315: INC
62316: ST_TO_ADDR
62317: LD_INT 5
62319: PUSH
62320: FOR_DOWNTO
62321: IFFALSE 62347
// tmp := tmp union eng [ i ] ;
62323: LD_ADDR_VAR 0 4
62327: PUSH
62328: LD_VAR 0 4
62332: PUSH
62333: LD_VAR 0 6
62337: PUSH
62338: LD_VAR 0 3
62342: ARRAY
62343: UNION
62344: ST_TO_ADDR
62345: GO 62320
62347: POP
62348: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
62349: LD_ADDR_VAR 0 2
62353: PUSH
62354: LD_VAR 0 2
62358: PPUSH
62359: LD_INT 1
62361: PPUSH
62362: LD_VAR 0 4
62366: PUSH
62367: LD_VAR 0 5
62371: DIFF
62372: PPUSH
62373: CALL_OW 1
62377: ST_TO_ADDR
// exit ;
62378: GO 62380
// end ; end ;
62380: LD_VAR 0 2
62384: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
62385: LD_INT 0
62387: PPUSH
62388: PPUSH
62389: PPUSH
// if not mc_bases then
62390: LD_EXP 52
62394: NOT
62395: IFFALSE 62399
// exit ;
62397: GO 62505
// for i = 1 to mc_bases do
62399: LD_ADDR_VAR 0 2
62403: PUSH
62404: DOUBLE
62405: LD_INT 1
62407: DEC
62408: ST_TO_ADDR
62409: LD_EXP 52
62413: PUSH
62414: FOR_TO
62415: IFFALSE 62496
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
62417: LD_ADDR_VAR 0 3
62421: PUSH
62422: LD_EXP 52
62426: PUSH
62427: LD_VAR 0 2
62431: ARRAY
62432: PPUSH
62433: LD_INT 21
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: LD_INT 24
62448: PUSH
62449: LD_INT 1000
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PPUSH
62464: CALL_OW 72
62468: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
62469: LD_ADDR_EXP 53
62473: PUSH
62474: LD_EXP 53
62478: PPUSH
62479: LD_VAR 0 2
62483: PPUSH
62484: LD_VAR 0 3
62488: PPUSH
62489: CALL_OW 1
62493: ST_TO_ADDR
// end ;
62494: GO 62414
62496: POP
62497: POP
// RaiseSailEvent ( 101 ) ;
62498: LD_INT 101
62500: PPUSH
62501: CALL_OW 427
// end ;
62505: LD_VAR 0 1
62509: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
62510: LD_INT 0
62512: PPUSH
62513: PPUSH
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
// if not mc_bases then
62519: LD_EXP 52
62523: NOT
62524: IFFALSE 62528
// exit ;
62526: GO 63101
// for i = 1 to mc_bases do
62528: LD_ADDR_VAR 0 2
62532: PUSH
62533: DOUBLE
62534: LD_INT 1
62536: DEC
62537: ST_TO_ADDR
62538: LD_EXP 52
62542: PUSH
62543: FOR_TO
62544: IFFALSE 63092
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
62546: LD_ADDR_VAR 0 5
62550: PUSH
62551: LD_EXP 52
62555: PUSH
62556: LD_VAR 0 2
62560: ARRAY
62561: PUSH
62562: LD_EXP 81
62566: PUSH
62567: LD_VAR 0 2
62571: ARRAY
62572: UNION
62573: PPUSH
62574: LD_INT 21
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 54
62592: PUSH
62593: EMPTY
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 24
62605: PUSH
62606: LD_INT 800
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PPUSH
62626: CALL_OW 72
62630: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
62631: LD_ADDR_VAR 0 6
62635: PUSH
62636: LD_EXP 52
62640: PUSH
62641: LD_VAR 0 2
62645: ARRAY
62646: PPUSH
62647: LD_INT 21
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: LD_INT 54
62665: PUSH
62666: EMPTY
62667: LIST
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: PUSH
62676: LD_INT 24
62678: PUSH
62679: LD_INT 250
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PPUSH
62699: CALL_OW 72
62703: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
62704: LD_ADDR_VAR 0 7
62708: PUSH
62709: LD_VAR 0 5
62713: PUSH
62714: LD_VAR 0 6
62718: DIFF
62719: ST_TO_ADDR
// if not need_heal_1 then
62720: LD_VAR 0 6
62724: NOT
62725: IFFALSE 62758
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
62727: LD_ADDR_EXP 55
62731: PUSH
62732: LD_EXP 55
62736: PPUSH
62737: LD_VAR 0 2
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PPUSH
62749: EMPTY
62750: PPUSH
62751: CALL 18171 0 3
62755: ST_TO_ADDR
62756: GO 62828
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
62758: LD_ADDR_EXP 55
62762: PUSH
62763: LD_EXP 55
62767: PPUSH
62768: LD_VAR 0 2
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PPUSH
62780: LD_EXP 55
62784: PUSH
62785: LD_VAR 0 2
62789: ARRAY
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: PPUSH
62795: LD_INT 3
62797: PUSH
62798: LD_INT 24
62800: PUSH
62801: LD_INT 1000
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PPUSH
62812: CALL_OW 72
62816: PUSH
62817: LD_VAR 0 6
62821: UNION
62822: PPUSH
62823: CALL 18171 0 3
62827: ST_TO_ADDR
// if not need_heal_2 then
62828: LD_VAR 0 7
62832: NOT
62833: IFFALSE 62866
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
62835: LD_ADDR_EXP 55
62839: PUSH
62840: LD_EXP 55
62844: PPUSH
62845: LD_VAR 0 2
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PPUSH
62857: EMPTY
62858: PPUSH
62859: CALL 18171 0 3
62863: ST_TO_ADDR
62864: GO 62898
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62866: LD_ADDR_EXP 55
62870: PUSH
62871: LD_EXP 55
62875: PPUSH
62876: LD_VAR 0 2
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PPUSH
62888: LD_VAR 0 7
62892: PPUSH
62893: CALL 18171 0 3
62897: ST_TO_ADDR
// if need_heal_2 then
62898: LD_VAR 0 7
62902: IFFALSE 63074
// for j in need_heal_2 do
62904: LD_ADDR_VAR 0 3
62908: PUSH
62909: LD_VAR 0 7
62913: PUSH
62914: FOR_IN
62915: IFFALSE 63072
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62917: LD_ADDR_VAR 0 5
62921: PUSH
62922: LD_EXP 52
62926: PUSH
62927: LD_VAR 0 2
62931: ARRAY
62932: PPUSH
62933: LD_INT 2
62935: PUSH
62936: LD_INT 30
62938: PUSH
62939: LD_INT 6
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 30
62948: PUSH
62949: LD_INT 7
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 30
62958: PUSH
62959: LD_INT 8
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 30
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 30
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 25
62988: PUSH
62989: LD_INT 4
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: PPUSH
63005: CALL_OW 72
63009: ST_TO_ADDR
// if tmp then
63010: LD_VAR 0 5
63014: IFFALSE 63070
// begin k := NearestUnitToUnit ( tmp , j ) ;
63016: LD_ADDR_VAR 0 4
63020: PUSH
63021: LD_VAR 0 5
63025: PPUSH
63026: LD_VAR 0 3
63030: PPUSH
63031: CALL_OW 74
63035: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
63036: LD_VAR 0 3
63040: PPUSH
63041: LD_VAR 0 4
63045: PPUSH
63046: CALL_OW 296
63050: PUSH
63051: LD_INT 7
63053: GREATER
63054: IFFALSE 63070
// ComMoveUnit ( j , k ) ;
63056: LD_VAR 0 3
63060: PPUSH
63061: LD_VAR 0 4
63065: PPUSH
63066: CALL_OW 112
// end ; end ;
63070: GO 62914
63072: POP
63073: POP
// if not need_heal_1 and not need_heal_2 then
63074: LD_VAR 0 6
63078: NOT
63079: PUSH
63080: LD_VAR 0 7
63084: NOT
63085: AND
63086: IFFALSE 63090
// continue ;
63088: GO 62543
// end ;
63090: GO 62543
63092: POP
63093: POP
// RaiseSailEvent ( 102 ) ;
63094: LD_INT 102
63096: PPUSH
63097: CALL_OW 427
// end ;
63101: LD_VAR 0 1
63105: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
63106: LD_INT 0
63108: PPUSH
63109: PPUSH
63110: PPUSH
63111: PPUSH
63112: PPUSH
63113: PPUSH
// if not mc_bases then
63114: LD_EXP 52
63118: NOT
63119: IFFALSE 63123
// exit ;
63121: GO 63833
// for i = 1 to mc_bases do
63123: LD_ADDR_VAR 0 2
63127: PUSH
63128: DOUBLE
63129: LD_INT 1
63131: DEC
63132: ST_TO_ADDR
63133: LD_EXP 52
63137: PUSH
63138: FOR_TO
63139: IFFALSE 63831
// begin if not mc_building_need_repair [ i ] then
63141: LD_EXP 53
63145: PUSH
63146: LD_VAR 0 2
63150: ARRAY
63151: NOT
63152: IFFALSE 63326
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
63154: LD_ADDR_VAR 0 6
63158: PUSH
63159: LD_EXP 71
63163: PUSH
63164: LD_VAR 0 2
63168: ARRAY
63169: PPUSH
63170: LD_INT 3
63172: PUSH
63173: LD_INT 24
63175: PUSH
63176: LD_INT 1000
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 2
63189: PUSH
63190: LD_INT 34
63192: PUSH
63193: LD_INT 13
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 34
63202: PUSH
63203: LD_INT 52
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PPUSH
63219: CALL_OW 72
63223: ST_TO_ADDR
// if cranes then
63224: LD_VAR 0 6
63228: IFFALSE 63290
// for j in cranes do
63230: LD_ADDR_VAR 0 3
63234: PUSH
63235: LD_VAR 0 6
63239: PUSH
63240: FOR_IN
63241: IFFALSE 63288
// if not IsInArea ( j , mc_parking [ i ] ) then
63243: LD_VAR 0 3
63247: PPUSH
63248: LD_EXP 76
63252: PUSH
63253: LD_VAR 0 2
63257: ARRAY
63258: PPUSH
63259: CALL_OW 308
63263: NOT
63264: IFFALSE 63286
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63266: LD_VAR 0 3
63270: PPUSH
63271: LD_EXP 76
63275: PUSH
63276: LD_VAR 0 2
63280: ARRAY
63281: PPUSH
63282: CALL_OW 113
63286: GO 63240
63288: POP
63289: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
63290: LD_ADDR_EXP 54
63294: PUSH
63295: LD_EXP 54
63299: PPUSH
63300: LD_VAR 0 2
63304: PPUSH
63305: EMPTY
63306: PPUSH
63307: CALL_OW 1
63311: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
63312: LD_VAR 0 2
63316: PPUSH
63317: LD_INT 101
63319: PPUSH
63320: CALL 58218 0 2
// continue ;
63324: GO 63138
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
63326: LD_ADDR_EXP 58
63330: PUSH
63331: LD_EXP 58
63335: PPUSH
63336: LD_VAR 0 2
63340: PPUSH
63341: EMPTY
63342: PPUSH
63343: CALL_OW 1
63347: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63348: LD_VAR 0 2
63352: PPUSH
63353: LD_INT 103
63355: PPUSH
63356: CALL 58218 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
63360: LD_ADDR_VAR 0 5
63364: PUSH
63365: LD_EXP 52
63369: PUSH
63370: LD_VAR 0 2
63374: ARRAY
63375: PUSH
63376: LD_EXP 81
63380: PUSH
63381: LD_VAR 0 2
63385: ARRAY
63386: UNION
63387: PPUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 25
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 25
63403: PUSH
63404: LD_INT 16
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: PUSH
63416: EMPTY
63417: LIST
63418: PPUSH
63419: CALL_OW 72
63423: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
63424: LD_ADDR_VAR 0 6
63428: PUSH
63429: LD_EXP 71
63433: PUSH
63434: LD_VAR 0 2
63438: ARRAY
63439: PPUSH
63440: LD_INT 2
63442: PUSH
63443: LD_INT 34
63445: PUSH
63446: LD_INT 13
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 34
63455: PUSH
63456: LD_INT 52
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: LIST
63467: PPUSH
63468: CALL_OW 72
63472: ST_TO_ADDR
// if cranes then
63473: LD_VAR 0 6
63477: IFFALSE 63613
// begin for j in cranes do
63479: LD_ADDR_VAR 0 3
63483: PUSH
63484: LD_VAR 0 6
63488: PUSH
63489: FOR_IN
63490: IFFALSE 63611
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
63492: LD_VAR 0 3
63496: PPUSH
63497: CALL_OW 256
63501: PUSH
63502: LD_INT 500
63504: GREATEREQUAL
63505: PUSH
63506: LD_VAR 0 3
63510: PPUSH
63511: CALL_OW 314
63515: NOT
63516: AND
63517: IFFALSE 63551
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
63519: LD_VAR 0 3
63523: PPUSH
63524: LD_EXP 53
63528: PUSH
63529: LD_VAR 0 2
63533: ARRAY
63534: PPUSH
63535: LD_VAR 0 3
63539: PPUSH
63540: CALL_OW 74
63544: PPUSH
63545: CALL_OW 130
63549: GO 63609
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
63551: LD_VAR 0 3
63555: PPUSH
63556: CALL_OW 256
63560: PUSH
63561: LD_INT 500
63563: LESS
63564: PUSH
63565: LD_VAR 0 3
63569: PPUSH
63570: LD_EXP 76
63574: PUSH
63575: LD_VAR 0 2
63579: ARRAY
63580: PPUSH
63581: CALL_OW 308
63585: NOT
63586: AND
63587: IFFALSE 63609
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63589: LD_VAR 0 3
63593: PPUSH
63594: LD_EXP 76
63598: PUSH
63599: LD_VAR 0 2
63603: ARRAY
63604: PPUSH
63605: CALL_OW 113
63609: GO 63489
63611: POP
63612: POP
// end ; if not tmp then
63613: LD_VAR 0 5
63617: NOT
63618: IFFALSE 63622
// continue ;
63620: GO 63138
// for j in tmp do
63622: LD_ADDR_VAR 0 3
63626: PUSH
63627: LD_VAR 0 5
63631: PUSH
63632: FOR_IN
63633: IFFALSE 63827
// begin if mc_need_heal [ i ] then
63635: LD_EXP 55
63639: PUSH
63640: LD_VAR 0 2
63644: ARRAY
63645: IFFALSE 63693
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
63647: LD_VAR 0 3
63651: PUSH
63652: LD_EXP 55
63656: PUSH
63657: LD_VAR 0 2
63661: ARRAY
63662: PUSH
63663: LD_INT 1
63665: ARRAY
63666: IN
63667: PUSH
63668: LD_VAR 0 3
63672: PUSH
63673: LD_EXP 55
63677: PUSH
63678: LD_VAR 0 2
63682: ARRAY
63683: PUSH
63684: LD_INT 2
63686: ARRAY
63687: IN
63688: OR
63689: IFFALSE 63693
// continue ;
63691: GO 63632
// if IsInUnit ( j ) then
63693: LD_VAR 0 3
63697: PPUSH
63698: CALL_OW 310
63702: IFFALSE 63713
// ComExitBuilding ( j ) ;
63704: LD_VAR 0 3
63708: PPUSH
63709: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
63713: LD_VAR 0 3
63717: PUSH
63718: LD_EXP 54
63722: PUSH
63723: LD_VAR 0 2
63727: ARRAY
63728: IN
63729: NOT
63730: IFFALSE 63788
// begin SetTag ( j , 101 ) ;
63732: LD_VAR 0 3
63736: PPUSH
63737: LD_INT 101
63739: PPUSH
63740: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
63744: LD_ADDR_EXP 54
63748: PUSH
63749: LD_EXP 54
63753: PPUSH
63754: LD_VAR 0 2
63758: PUSH
63759: LD_EXP 54
63763: PUSH
63764: LD_VAR 0 2
63768: ARRAY
63769: PUSH
63770: LD_INT 1
63772: PLUS
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PPUSH
63778: LD_VAR 0 3
63782: PPUSH
63783: CALL 18171 0 3
63787: ST_TO_ADDR
// end ; wait ( 1 ) ;
63788: LD_INT 1
63790: PPUSH
63791: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
63795: LD_VAR 0 3
63799: PPUSH
63800: LD_EXP 53
63804: PUSH
63805: LD_VAR 0 2
63809: ARRAY
63810: PPUSH
63811: LD_VAR 0 3
63815: PPUSH
63816: CALL_OW 74
63820: PPUSH
63821: CALL_OW 130
// end ;
63825: GO 63632
63827: POP
63828: POP
// end ;
63829: GO 63138
63831: POP
63832: POP
// end ;
63833: LD_VAR 0 1
63837: RET
// export function MC_Heal ; var i , j , tmp ; begin
63838: LD_INT 0
63840: PPUSH
63841: PPUSH
63842: PPUSH
63843: PPUSH
// if not mc_bases then
63844: LD_EXP 52
63848: NOT
63849: IFFALSE 63853
// exit ;
63851: GO 64255
// for i = 1 to mc_bases do
63853: LD_ADDR_VAR 0 2
63857: PUSH
63858: DOUBLE
63859: LD_INT 1
63861: DEC
63862: ST_TO_ADDR
63863: LD_EXP 52
63867: PUSH
63868: FOR_TO
63869: IFFALSE 64253
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
63871: LD_EXP 55
63875: PUSH
63876: LD_VAR 0 2
63880: ARRAY
63881: PUSH
63882: LD_INT 1
63884: ARRAY
63885: NOT
63886: PUSH
63887: LD_EXP 55
63891: PUSH
63892: LD_VAR 0 2
63896: ARRAY
63897: PUSH
63898: LD_INT 2
63900: ARRAY
63901: NOT
63902: AND
63903: IFFALSE 63941
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
63905: LD_ADDR_EXP 56
63909: PUSH
63910: LD_EXP 56
63914: PPUSH
63915: LD_VAR 0 2
63919: PPUSH
63920: EMPTY
63921: PPUSH
63922: CALL_OW 1
63926: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
63927: LD_VAR 0 2
63931: PPUSH
63932: LD_INT 102
63934: PPUSH
63935: CALL 58218 0 2
// continue ;
63939: GO 63868
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
63941: LD_ADDR_VAR 0 4
63945: PUSH
63946: LD_EXP 52
63950: PUSH
63951: LD_VAR 0 2
63955: ARRAY
63956: PPUSH
63957: LD_INT 25
63959: PUSH
63960: LD_INT 4
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PPUSH
63967: CALL_OW 72
63971: ST_TO_ADDR
// if not tmp then
63972: LD_VAR 0 4
63976: NOT
63977: IFFALSE 63981
// continue ;
63979: GO 63868
// if mc_taming [ i ] then
63981: LD_EXP 83
63985: PUSH
63986: LD_VAR 0 2
63990: ARRAY
63991: IFFALSE 64015
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
63993: LD_ADDR_EXP 83
63997: PUSH
63998: LD_EXP 83
64002: PPUSH
64003: LD_VAR 0 2
64007: PPUSH
64008: EMPTY
64009: PPUSH
64010: CALL_OW 1
64014: ST_TO_ADDR
// for j in tmp do
64015: LD_ADDR_VAR 0 3
64019: PUSH
64020: LD_VAR 0 4
64024: PUSH
64025: FOR_IN
64026: IFFALSE 64249
// begin if IsInUnit ( j ) then
64028: LD_VAR 0 3
64032: PPUSH
64033: CALL_OW 310
64037: IFFALSE 64048
// ComExitBuilding ( j ) ;
64039: LD_VAR 0 3
64043: PPUSH
64044: CALL_OW 122
// if not j in mc_healers [ i ] then
64048: LD_VAR 0 3
64052: PUSH
64053: LD_EXP 56
64057: PUSH
64058: LD_VAR 0 2
64062: ARRAY
64063: IN
64064: NOT
64065: IFFALSE 64111
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
64067: LD_ADDR_EXP 56
64071: PUSH
64072: LD_EXP 56
64076: PPUSH
64077: LD_VAR 0 2
64081: PUSH
64082: LD_EXP 56
64086: PUSH
64087: LD_VAR 0 2
64091: ARRAY
64092: PUSH
64093: LD_INT 1
64095: PLUS
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PPUSH
64101: LD_VAR 0 3
64105: PPUSH
64106: CALL 18171 0 3
64110: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
64111: LD_VAR 0 3
64115: PPUSH
64116: CALL_OW 110
64120: PUSH
64121: LD_INT 102
64123: NONEQUAL
64124: IFFALSE 64138
// SetTag ( j , 102 ) ;
64126: LD_VAR 0 3
64130: PPUSH
64131: LD_INT 102
64133: PPUSH
64134: CALL_OW 109
// Wait ( 3 ) ;
64138: LD_INT 3
64140: PPUSH
64141: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
64145: LD_EXP 55
64149: PUSH
64150: LD_VAR 0 2
64154: ARRAY
64155: PUSH
64156: LD_INT 1
64158: ARRAY
64159: IFFALSE 64191
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
64161: LD_VAR 0 3
64165: PPUSH
64166: LD_EXP 55
64170: PUSH
64171: LD_VAR 0 2
64175: ARRAY
64176: PUSH
64177: LD_INT 1
64179: ARRAY
64180: PUSH
64181: LD_INT 1
64183: ARRAY
64184: PPUSH
64185: CALL_OW 128
64189: GO 64247
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
64191: LD_VAR 0 3
64195: PPUSH
64196: CALL_OW 314
64200: NOT
64201: PUSH
64202: LD_EXP 55
64206: PUSH
64207: LD_VAR 0 2
64211: ARRAY
64212: PUSH
64213: LD_INT 2
64215: ARRAY
64216: AND
64217: IFFALSE 64247
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
64219: LD_VAR 0 3
64223: PPUSH
64224: LD_EXP 55
64228: PUSH
64229: LD_VAR 0 2
64233: ARRAY
64234: PUSH
64235: LD_INT 2
64237: ARRAY
64238: PUSH
64239: LD_INT 1
64241: ARRAY
64242: PPUSH
64243: CALL_OW 128
// end ;
64247: GO 64025
64249: POP
64250: POP
// end ;
64251: GO 63868
64253: POP
64254: POP
// end ;
64255: LD_VAR 0 1
64259: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
64260: LD_INT 0
64262: PPUSH
64263: PPUSH
64264: PPUSH
64265: PPUSH
64266: PPUSH
// if not mc_bases then
64267: LD_EXP 52
64271: NOT
64272: IFFALSE 64276
// exit ;
64274: GO 65419
// for i = 1 to mc_bases do
64276: LD_ADDR_VAR 0 2
64280: PUSH
64281: DOUBLE
64282: LD_INT 1
64284: DEC
64285: ST_TO_ADDR
64286: LD_EXP 52
64290: PUSH
64291: FOR_TO
64292: IFFALSE 65417
// begin if mc_scan [ i ] then
64294: LD_EXP 75
64298: PUSH
64299: LD_VAR 0 2
64303: ARRAY
64304: IFFALSE 64308
// continue ;
64306: GO 64291
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
64308: LD_EXP 57
64312: PUSH
64313: LD_VAR 0 2
64317: ARRAY
64318: NOT
64319: PUSH
64320: LD_EXP 59
64324: PUSH
64325: LD_VAR 0 2
64329: ARRAY
64330: NOT
64331: AND
64332: PUSH
64333: LD_EXP 58
64337: PUSH
64338: LD_VAR 0 2
64342: ARRAY
64343: AND
64344: IFFALSE 64382
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
64346: LD_ADDR_EXP 58
64350: PUSH
64351: LD_EXP 58
64355: PPUSH
64356: LD_VAR 0 2
64360: PPUSH
64361: EMPTY
64362: PPUSH
64363: CALL_OW 1
64367: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64368: LD_VAR 0 2
64372: PPUSH
64373: LD_INT 103
64375: PPUSH
64376: CALL 58218 0 2
// continue ;
64380: GO 64291
// end ; if mc_construct_list [ i ] then
64382: LD_EXP 59
64386: PUSH
64387: LD_VAR 0 2
64391: ARRAY
64392: IFFALSE 64612
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64394: LD_ADDR_VAR 0 4
64398: PUSH
64399: LD_EXP 52
64403: PUSH
64404: LD_VAR 0 2
64408: ARRAY
64409: PPUSH
64410: LD_INT 25
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PPUSH
64420: CALL_OW 72
64424: PUSH
64425: LD_EXP 54
64429: PUSH
64430: LD_VAR 0 2
64434: ARRAY
64435: DIFF
64436: ST_TO_ADDR
// if not tmp then
64437: LD_VAR 0 4
64441: NOT
64442: IFFALSE 64446
// continue ;
64444: GO 64291
// for j in tmp do
64446: LD_ADDR_VAR 0 3
64450: PUSH
64451: LD_VAR 0 4
64455: PUSH
64456: FOR_IN
64457: IFFALSE 64608
// begin if not mc_builders [ i ] then
64459: LD_EXP 58
64463: PUSH
64464: LD_VAR 0 2
64468: ARRAY
64469: NOT
64470: IFFALSE 64528
// begin SetTag ( j , 103 ) ;
64472: LD_VAR 0 3
64476: PPUSH
64477: LD_INT 103
64479: PPUSH
64480: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64484: LD_ADDR_EXP 58
64488: PUSH
64489: LD_EXP 58
64493: PPUSH
64494: LD_VAR 0 2
64498: PUSH
64499: LD_EXP 58
64503: PUSH
64504: LD_VAR 0 2
64508: ARRAY
64509: PUSH
64510: LD_INT 1
64512: PLUS
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PPUSH
64518: LD_VAR 0 3
64522: PPUSH
64523: CALL 18171 0 3
64527: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64528: LD_VAR 0 3
64532: PPUSH
64533: CALL_OW 310
64537: IFFALSE 64548
// ComExitBuilding ( j ) ;
64539: LD_VAR 0 3
64543: PPUSH
64544: CALL_OW 122
// wait ( 3 ) ;
64548: LD_INT 3
64550: PPUSH
64551: CALL_OW 67
// if not mc_construct_list [ i ] then
64555: LD_EXP 59
64559: PUSH
64560: LD_VAR 0 2
64564: ARRAY
64565: NOT
64566: IFFALSE 64570
// break ;
64568: GO 64608
// if not HasTask ( j ) then
64570: LD_VAR 0 3
64574: PPUSH
64575: CALL_OW 314
64579: NOT
64580: IFFALSE 64606
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
64582: LD_VAR 0 3
64586: PPUSH
64587: LD_EXP 59
64591: PUSH
64592: LD_VAR 0 2
64596: ARRAY
64597: PUSH
64598: LD_INT 1
64600: ARRAY
64601: PPUSH
64602: CALL 21022 0 2
// end ;
64606: GO 64456
64608: POP
64609: POP
// end else
64610: GO 65415
// if mc_build_list [ i ] then
64612: LD_EXP 57
64616: PUSH
64617: LD_VAR 0 2
64621: ARRAY
64622: IFFALSE 65415
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64624: LD_ADDR_VAR 0 5
64628: PUSH
64629: LD_EXP 52
64633: PUSH
64634: LD_VAR 0 2
64638: ARRAY
64639: PPUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 30
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 30
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: PPUSH
64668: CALL_OW 72
64672: ST_TO_ADDR
// if depot then
64673: LD_VAR 0 5
64677: IFFALSE 64695
// depot := depot [ 1 ] else
64679: LD_ADDR_VAR 0 5
64683: PUSH
64684: LD_VAR 0 5
64688: PUSH
64689: LD_INT 1
64691: ARRAY
64692: ST_TO_ADDR
64693: GO 64703
// depot := 0 ;
64695: LD_ADDR_VAR 0 5
64699: PUSH
64700: LD_INT 0
64702: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
64703: LD_EXP 57
64707: PUSH
64708: LD_VAR 0 2
64712: ARRAY
64713: PUSH
64714: LD_INT 1
64716: ARRAY
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: PPUSH
64722: CALL 20852 0 1
64726: PUSH
64727: LD_EXP 52
64731: PUSH
64732: LD_VAR 0 2
64736: ARRAY
64737: PPUSH
64738: LD_INT 2
64740: PUSH
64741: LD_INT 30
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 30
64753: PUSH
64754: LD_INT 3
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: PPUSH
64766: CALL_OW 72
64770: NOT
64771: AND
64772: IFFALSE 64877
// begin for j = 1 to mc_build_list [ i ] do
64774: LD_ADDR_VAR 0 3
64778: PUSH
64779: DOUBLE
64780: LD_INT 1
64782: DEC
64783: ST_TO_ADDR
64784: LD_EXP 57
64788: PUSH
64789: LD_VAR 0 2
64793: ARRAY
64794: PUSH
64795: FOR_TO
64796: IFFALSE 64875
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
64798: LD_EXP 57
64802: PUSH
64803: LD_VAR 0 2
64807: ARRAY
64808: PUSH
64809: LD_VAR 0 3
64813: ARRAY
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PUSH
64819: LD_INT 2
64821: EQUAL
64822: IFFALSE 64873
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
64824: LD_ADDR_EXP 57
64828: PUSH
64829: LD_EXP 57
64833: PPUSH
64834: LD_VAR 0 2
64838: PPUSH
64839: LD_EXP 57
64843: PUSH
64844: LD_VAR 0 2
64848: ARRAY
64849: PPUSH
64850: LD_VAR 0 3
64854: PPUSH
64855: LD_INT 1
64857: PPUSH
64858: LD_INT 0
64860: PPUSH
64861: CALL 17589 0 4
64865: PPUSH
64866: CALL_OW 1
64870: ST_TO_ADDR
// break ;
64871: GO 64875
// end ;
64873: GO 64795
64875: POP
64876: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
64877: LD_EXP 57
64881: PUSH
64882: LD_VAR 0 2
64886: ARRAY
64887: PUSH
64888: LD_INT 1
64890: ARRAY
64891: PUSH
64892: LD_INT 1
64894: ARRAY
64895: PUSH
64896: LD_INT 0
64898: EQUAL
64899: PUSH
64900: LD_VAR 0 5
64904: PUSH
64905: LD_VAR 0 5
64909: PPUSH
64910: LD_EXP 57
64914: PUSH
64915: LD_VAR 0 2
64919: ARRAY
64920: PUSH
64921: LD_INT 1
64923: ARRAY
64924: PUSH
64925: LD_INT 1
64927: ARRAY
64928: PPUSH
64929: LD_EXP 57
64933: PUSH
64934: LD_VAR 0 2
64938: ARRAY
64939: PUSH
64940: LD_INT 1
64942: ARRAY
64943: PUSH
64944: LD_INT 2
64946: ARRAY
64947: PPUSH
64948: LD_EXP 57
64952: PUSH
64953: LD_VAR 0 2
64957: ARRAY
64958: PUSH
64959: LD_INT 1
64961: ARRAY
64962: PUSH
64963: LD_INT 3
64965: ARRAY
64966: PPUSH
64967: LD_EXP 57
64971: PUSH
64972: LD_VAR 0 2
64976: ARRAY
64977: PUSH
64978: LD_INT 1
64980: ARRAY
64981: PUSH
64982: LD_INT 4
64984: ARRAY
64985: PPUSH
64986: CALL 25586 0 5
64990: AND
64991: OR
64992: IFFALSE 65273
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64994: LD_ADDR_VAR 0 4
64998: PUSH
64999: LD_EXP 52
65003: PUSH
65004: LD_VAR 0 2
65008: ARRAY
65009: PPUSH
65010: LD_INT 25
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PPUSH
65020: CALL_OW 72
65024: PUSH
65025: LD_EXP 54
65029: PUSH
65030: LD_VAR 0 2
65034: ARRAY
65035: DIFF
65036: ST_TO_ADDR
// if not tmp then
65037: LD_VAR 0 4
65041: NOT
65042: IFFALSE 65046
// continue ;
65044: GO 64291
// for j in tmp do
65046: LD_ADDR_VAR 0 3
65050: PUSH
65051: LD_VAR 0 4
65055: PUSH
65056: FOR_IN
65057: IFFALSE 65269
// begin if not mc_builders [ i ] then
65059: LD_EXP 58
65063: PUSH
65064: LD_VAR 0 2
65068: ARRAY
65069: NOT
65070: IFFALSE 65128
// begin SetTag ( j , 103 ) ;
65072: LD_VAR 0 3
65076: PPUSH
65077: LD_INT 103
65079: PPUSH
65080: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65084: LD_ADDR_EXP 58
65088: PUSH
65089: LD_EXP 58
65093: PPUSH
65094: LD_VAR 0 2
65098: PUSH
65099: LD_EXP 58
65103: PUSH
65104: LD_VAR 0 2
65108: ARRAY
65109: PUSH
65110: LD_INT 1
65112: PLUS
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PPUSH
65118: LD_VAR 0 3
65122: PPUSH
65123: CALL 18171 0 3
65127: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65128: LD_VAR 0 3
65132: PPUSH
65133: CALL_OW 310
65137: IFFALSE 65148
// ComExitBuilding ( j ) ;
65139: LD_VAR 0 3
65143: PPUSH
65144: CALL_OW 122
// wait ( 3 ) ;
65148: LD_INT 3
65150: PPUSH
65151: CALL_OW 67
// if not mc_build_list [ i ] then
65155: LD_EXP 57
65159: PUSH
65160: LD_VAR 0 2
65164: ARRAY
65165: NOT
65166: IFFALSE 65170
// break ;
65168: GO 65269
// if not HasTask ( j ) then
65170: LD_VAR 0 3
65174: PPUSH
65175: CALL_OW 314
65179: NOT
65180: IFFALSE 65267
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65182: LD_VAR 0 3
65186: PPUSH
65187: LD_EXP 57
65191: PUSH
65192: LD_VAR 0 2
65196: ARRAY
65197: PUSH
65198: LD_INT 1
65200: ARRAY
65201: PUSH
65202: LD_INT 1
65204: ARRAY
65205: PPUSH
65206: LD_EXP 57
65210: PUSH
65211: LD_VAR 0 2
65215: ARRAY
65216: PUSH
65217: LD_INT 1
65219: ARRAY
65220: PUSH
65221: LD_INT 2
65223: ARRAY
65224: PPUSH
65225: LD_EXP 57
65229: PUSH
65230: LD_VAR 0 2
65234: ARRAY
65235: PUSH
65236: LD_INT 1
65238: ARRAY
65239: PUSH
65240: LD_INT 3
65242: ARRAY
65243: PPUSH
65244: LD_EXP 57
65248: PUSH
65249: LD_VAR 0 2
65253: ARRAY
65254: PUSH
65255: LD_INT 1
65257: ARRAY
65258: PUSH
65259: LD_INT 4
65261: ARRAY
65262: PPUSH
65263: CALL_OW 145
// end ;
65267: GO 65056
65269: POP
65270: POP
// end else
65271: GO 65415
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
65273: LD_EXP 52
65277: PUSH
65278: LD_VAR 0 2
65282: ARRAY
65283: PPUSH
65284: LD_EXP 57
65288: PUSH
65289: LD_VAR 0 2
65293: ARRAY
65294: PUSH
65295: LD_INT 1
65297: ARRAY
65298: PUSH
65299: LD_INT 1
65301: ARRAY
65302: PPUSH
65303: LD_EXP 57
65307: PUSH
65308: LD_VAR 0 2
65312: ARRAY
65313: PUSH
65314: LD_INT 1
65316: ARRAY
65317: PUSH
65318: LD_INT 2
65320: ARRAY
65321: PPUSH
65322: LD_EXP 57
65326: PUSH
65327: LD_VAR 0 2
65331: ARRAY
65332: PUSH
65333: LD_INT 1
65335: ARRAY
65336: PUSH
65337: LD_INT 3
65339: ARRAY
65340: PPUSH
65341: LD_EXP 57
65345: PUSH
65346: LD_VAR 0 2
65350: ARRAY
65351: PUSH
65352: LD_INT 1
65354: ARRAY
65355: PUSH
65356: LD_INT 4
65358: ARRAY
65359: PPUSH
65360: CALL 24922 0 5
65364: NOT
65365: IFFALSE 65415
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65367: LD_ADDR_EXP 57
65371: PUSH
65372: LD_EXP 57
65376: PPUSH
65377: LD_VAR 0 2
65381: PPUSH
65382: LD_EXP 57
65386: PUSH
65387: LD_VAR 0 2
65391: ARRAY
65392: PPUSH
65393: LD_INT 1
65395: PPUSH
65396: LD_INT 1
65398: NEG
65399: PPUSH
65400: LD_INT 0
65402: PPUSH
65403: CALL 17589 0 4
65407: PPUSH
65408: CALL_OW 1
65412: ST_TO_ADDR
// continue ;
65413: GO 64291
// end ; end ; end ;
65415: GO 64291
65417: POP
65418: POP
// end ;
65419: LD_VAR 0 1
65423: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65424: LD_INT 0
65426: PPUSH
65427: PPUSH
65428: PPUSH
65429: PPUSH
65430: PPUSH
65431: PPUSH
// if not mc_bases then
65432: LD_EXP 52
65436: NOT
65437: IFFALSE 65441
// exit ;
65439: GO 65868
// for i = 1 to mc_bases do
65441: LD_ADDR_VAR 0 2
65445: PUSH
65446: DOUBLE
65447: LD_INT 1
65449: DEC
65450: ST_TO_ADDR
65451: LD_EXP 52
65455: PUSH
65456: FOR_TO
65457: IFFALSE 65866
// begin tmp := mc_build_upgrade [ i ] ;
65459: LD_ADDR_VAR 0 4
65463: PUSH
65464: LD_EXP 84
65468: PUSH
65469: LD_VAR 0 2
65473: ARRAY
65474: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
65475: LD_ADDR_VAR 0 6
65479: PUSH
65480: LD_EXP 85
65484: PUSH
65485: LD_VAR 0 2
65489: ARRAY
65490: PPUSH
65491: LD_INT 2
65493: PUSH
65494: LD_INT 30
65496: PUSH
65497: LD_INT 6
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 30
65506: PUSH
65507: LD_INT 7
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: PPUSH
65519: CALL_OW 72
65523: ST_TO_ADDR
// if not tmp and not lab then
65524: LD_VAR 0 4
65528: NOT
65529: PUSH
65530: LD_VAR 0 6
65534: NOT
65535: AND
65536: IFFALSE 65540
// continue ;
65538: GO 65456
// if tmp then
65540: LD_VAR 0 4
65544: IFFALSE 65664
// for j in tmp do
65546: LD_ADDR_VAR 0 3
65550: PUSH
65551: LD_VAR 0 4
65555: PUSH
65556: FOR_IN
65557: IFFALSE 65662
// begin if UpgradeCost ( j ) then
65559: LD_VAR 0 3
65563: PPUSH
65564: CALL 24582 0 1
65568: IFFALSE 65660
// begin ComUpgrade ( j ) ;
65570: LD_VAR 0 3
65574: PPUSH
65575: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
65579: LD_ADDR_EXP 84
65583: PUSH
65584: LD_EXP 84
65588: PPUSH
65589: LD_VAR 0 2
65593: PPUSH
65594: LD_EXP 84
65598: PUSH
65599: LD_VAR 0 2
65603: ARRAY
65604: PUSH
65605: LD_VAR 0 3
65609: DIFF
65610: PPUSH
65611: CALL_OW 1
65615: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65616: LD_ADDR_EXP 59
65620: PUSH
65621: LD_EXP 59
65625: PPUSH
65626: LD_VAR 0 2
65630: PUSH
65631: LD_EXP 59
65635: PUSH
65636: LD_VAR 0 2
65640: ARRAY
65641: PUSH
65642: LD_INT 1
65644: PLUS
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PPUSH
65650: LD_VAR 0 3
65654: PPUSH
65655: CALL 18171 0 3
65659: ST_TO_ADDR
// end ; end ;
65660: GO 65556
65662: POP
65663: POP
// if not lab or not mc_lab_upgrade [ i ] then
65664: LD_VAR 0 6
65668: NOT
65669: PUSH
65670: LD_EXP 86
65674: PUSH
65675: LD_VAR 0 2
65679: ARRAY
65680: NOT
65681: OR
65682: IFFALSE 65686
// continue ;
65684: GO 65456
// for j in lab do
65686: LD_ADDR_VAR 0 3
65690: PUSH
65691: LD_VAR 0 6
65695: PUSH
65696: FOR_IN
65697: IFFALSE 65862
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
65699: LD_VAR 0 3
65703: PPUSH
65704: CALL_OW 266
65708: PUSH
65709: LD_INT 6
65711: PUSH
65712: LD_INT 7
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: IN
65719: PUSH
65720: LD_VAR 0 3
65724: PPUSH
65725: CALL_OW 461
65729: PUSH
65730: LD_INT 1
65732: NONEQUAL
65733: AND
65734: IFFALSE 65860
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
65736: LD_VAR 0 3
65740: PPUSH
65741: LD_EXP 86
65745: PUSH
65746: LD_VAR 0 2
65750: ARRAY
65751: PUSH
65752: LD_INT 1
65754: ARRAY
65755: PPUSH
65756: CALL 24787 0 2
65760: IFFALSE 65860
// begin ComCancel ( j ) ;
65762: LD_VAR 0 3
65766: PPUSH
65767: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
65771: LD_VAR 0 3
65775: PPUSH
65776: LD_EXP 86
65780: PUSH
65781: LD_VAR 0 2
65785: ARRAY
65786: PUSH
65787: LD_INT 1
65789: ARRAY
65790: PPUSH
65791: CALL_OW 207
// if not j in mc_construct_list [ i ] then
65795: LD_VAR 0 3
65799: PUSH
65800: LD_EXP 59
65804: PUSH
65805: LD_VAR 0 2
65809: ARRAY
65810: IN
65811: NOT
65812: IFFALSE 65858
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65814: LD_ADDR_EXP 59
65818: PUSH
65819: LD_EXP 59
65823: PPUSH
65824: LD_VAR 0 2
65828: PUSH
65829: LD_EXP 59
65833: PUSH
65834: LD_VAR 0 2
65838: ARRAY
65839: PUSH
65840: LD_INT 1
65842: PLUS
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PPUSH
65848: LD_VAR 0 3
65852: PPUSH
65853: CALL 18171 0 3
65857: ST_TO_ADDR
// break ;
65858: GO 65862
// end ; end ; end ;
65860: GO 65696
65862: POP
65863: POP
// end ;
65864: GO 65456
65866: POP
65867: POP
// end ;
65868: LD_VAR 0 1
65872: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
65873: LD_INT 0
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
// if not mc_bases then
65884: LD_EXP 52
65888: NOT
65889: IFFALSE 65893
// exit ;
65891: GO 66298
// for i = 1 to mc_bases do
65893: LD_ADDR_VAR 0 2
65897: PUSH
65898: DOUBLE
65899: LD_INT 1
65901: DEC
65902: ST_TO_ADDR
65903: LD_EXP 52
65907: PUSH
65908: FOR_TO
65909: IFFALSE 66296
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
65911: LD_EXP 60
65915: PUSH
65916: LD_VAR 0 2
65920: ARRAY
65921: NOT
65922: PUSH
65923: LD_EXP 52
65927: PUSH
65928: LD_VAR 0 2
65932: ARRAY
65933: PPUSH
65934: LD_INT 30
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PPUSH
65944: CALL_OW 72
65948: NOT
65949: OR
65950: IFFALSE 65954
// continue ;
65952: GO 65908
// busy := false ;
65954: LD_ADDR_VAR 0 8
65958: PUSH
65959: LD_INT 0
65961: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65962: LD_ADDR_VAR 0 4
65966: PUSH
65967: LD_EXP 52
65971: PUSH
65972: LD_VAR 0 2
65976: ARRAY
65977: PPUSH
65978: LD_INT 30
65980: PUSH
65981: LD_INT 3
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PPUSH
65988: CALL_OW 72
65992: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
65993: LD_ADDR_VAR 0 6
65997: PUSH
65998: LD_EXP 60
66002: PUSH
66003: LD_VAR 0 2
66007: ARRAY
66008: PPUSH
66009: LD_INT 2
66011: PUSH
66012: LD_INT 30
66014: PUSH
66015: LD_INT 32
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 30
66024: PUSH
66025: LD_INT 33
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: PPUSH
66037: CALL_OW 72
66041: ST_TO_ADDR
// if not t then
66042: LD_VAR 0 6
66046: NOT
66047: IFFALSE 66051
// continue ;
66049: GO 65908
// for j in tmp do
66051: LD_ADDR_VAR 0 3
66055: PUSH
66056: LD_VAR 0 4
66060: PUSH
66061: FOR_IN
66062: IFFALSE 66092
// if not BuildingStatus ( j ) = bs_idle then
66064: LD_VAR 0 3
66068: PPUSH
66069: CALL_OW 461
66073: PUSH
66074: LD_INT 2
66076: EQUAL
66077: NOT
66078: IFFALSE 66090
// begin busy := true ;
66080: LD_ADDR_VAR 0 8
66084: PUSH
66085: LD_INT 1
66087: ST_TO_ADDR
// break ;
66088: GO 66092
// end ;
66090: GO 66061
66092: POP
66093: POP
// if busy then
66094: LD_VAR 0 8
66098: IFFALSE 66102
// continue ;
66100: GO 65908
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
66102: LD_ADDR_VAR 0 7
66106: PUSH
66107: LD_VAR 0 6
66111: PPUSH
66112: LD_INT 35
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PPUSH
66122: CALL_OW 72
66126: ST_TO_ADDR
// if tw then
66127: LD_VAR 0 7
66131: IFFALSE 66208
// begin tw := tw [ 1 ] ;
66133: LD_ADDR_VAR 0 7
66137: PUSH
66138: LD_VAR 0 7
66142: PUSH
66143: LD_INT 1
66145: ARRAY
66146: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
66147: LD_ADDR_VAR 0 9
66151: PUSH
66152: LD_VAR 0 7
66156: PPUSH
66157: LD_EXP 77
66161: PUSH
66162: LD_VAR 0 2
66166: ARRAY
66167: PPUSH
66168: CALL 23141 0 2
66172: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
66173: LD_EXP 91
66177: PUSH
66178: LD_VAR 0 2
66182: ARRAY
66183: IFFALSE 66206
// if not weapon in mc_allowed_tower_weapons [ i ] then
66185: LD_VAR 0 9
66189: PUSH
66190: LD_EXP 91
66194: PUSH
66195: LD_VAR 0 2
66199: ARRAY
66200: IN
66201: NOT
66202: IFFALSE 66206
// continue ;
66204: GO 65908
// end else
66206: GO 66271
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
66208: LD_ADDR_VAR 0 5
66212: PUSH
66213: LD_EXP 60
66217: PUSH
66218: LD_VAR 0 2
66222: ARRAY
66223: PPUSH
66224: LD_VAR 0 4
66228: PPUSH
66229: CALL 53342 0 2
66233: ST_TO_ADDR
// if not tmp2 then
66234: LD_VAR 0 5
66238: NOT
66239: IFFALSE 66243
// continue ;
66241: GO 65908
// tw := tmp2 [ 1 ] ;
66243: LD_ADDR_VAR 0 7
66247: PUSH
66248: LD_VAR 0 5
66252: PUSH
66253: LD_INT 1
66255: ARRAY
66256: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
66257: LD_ADDR_VAR 0 9
66261: PUSH
66262: LD_VAR 0 5
66266: PUSH
66267: LD_INT 2
66269: ARRAY
66270: ST_TO_ADDR
// end ; if not weapon then
66271: LD_VAR 0 9
66275: NOT
66276: IFFALSE 66280
// continue ;
66278: GO 65908
// ComPlaceWeapon ( tw , weapon ) ;
66280: LD_VAR 0 7
66284: PPUSH
66285: LD_VAR 0 9
66289: PPUSH
66290: CALL_OW 148
// end ;
66294: GO 65908
66296: POP
66297: POP
// end ;
66298: LD_VAR 0 1
66302: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66303: LD_INT 0
66305: PPUSH
66306: PPUSH
66307: PPUSH
66308: PPUSH
66309: PPUSH
66310: PPUSH
// if not mc_bases then
66311: LD_EXP 52
66315: NOT
66316: IFFALSE 66320
// exit ;
66318: GO 67332
// for i = 1 to mc_bases do
66320: LD_ADDR_VAR 0 2
66324: PUSH
66325: DOUBLE
66326: LD_INT 1
66328: DEC
66329: ST_TO_ADDR
66330: LD_EXP 52
66334: PUSH
66335: FOR_TO
66336: IFFALSE 67330
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
66338: LD_EXP 65
66342: PUSH
66343: LD_VAR 0 2
66347: ARRAY
66348: NOT
66349: PUSH
66350: LD_EXP 65
66354: PUSH
66355: LD_VAR 0 2
66359: ARRAY
66360: PUSH
66361: LD_EXP 66
66365: PUSH
66366: LD_VAR 0 2
66370: ARRAY
66371: EQUAL
66372: OR
66373: IFFALSE 66377
// continue ;
66375: GO 66335
// if mc_miners [ i ] then
66377: LD_EXP 66
66381: PUSH
66382: LD_VAR 0 2
66386: ARRAY
66387: IFFALSE 67017
// begin k := 1 ;
66389: LD_ADDR_VAR 0 4
66393: PUSH
66394: LD_INT 1
66396: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
66397: LD_ADDR_VAR 0 3
66401: PUSH
66402: DOUBLE
66403: LD_EXP 66
66407: PUSH
66408: LD_VAR 0 2
66412: ARRAY
66413: INC
66414: ST_TO_ADDR
66415: LD_INT 1
66417: PUSH
66418: FOR_DOWNTO
66419: IFFALSE 67015
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
66421: LD_EXP 66
66425: PUSH
66426: LD_VAR 0 2
66430: ARRAY
66431: PUSH
66432: LD_VAR 0 3
66436: ARRAY
66437: PPUSH
66438: CALL_OW 301
66442: PUSH
66443: LD_EXP 66
66447: PUSH
66448: LD_VAR 0 2
66452: ARRAY
66453: PUSH
66454: LD_VAR 0 3
66458: ARRAY
66459: PPUSH
66460: CALL_OW 257
66464: PUSH
66465: LD_INT 1
66467: NONEQUAL
66468: OR
66469: IFFALSE 66532
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66471: LD_ADDR_VAR 0 5
66475: PUSH
66476: LD_EXP 66
66480: PUSH
66481: LD_VAR 0 2
66485: ARRAY
66486: PUSH
66487: LD_EXP 66
66491: PUSH
66492: LD_VAR 0 2
66496: ARRAY
66497: PUSH
66498: LD_VAR 0 3
66502: ARRAY
66503: DIFF
66504: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66505: LD_ADDR_EXP 66
66509: PUSH
66510: LD_EXP 66
66514: PPUSH
66515: LD_VAR 0 2
66519: PPUSH
66520: LD_VAR 0 5
66524: PPUSH
66525: CALL_OW 1
66529: ST_TO_ADDR
// continue ;
66530: GO 66418
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
66532: LD_EXP 66
66536: PUSH
66537: LD_VAR 0 2
66541: ARRAY
66542: PUSH
66543: LD_VAR 0 3
66547: ARRAY
66548: PPUSH
66549: CALL 18107 0 1
66553: PUSH
66554: LD_EXP 66
66558: PUSH
66559: LD_VAR 0 2
66563: ARRAY
66564: PUSH
66565: LD_VAR 0 3
66569: ARRAY
66570: PPUSH
66571: CALL_OW 255
66575: PPUSH
66576: LD_EXP 65
66580: PUSH
66581: LD_VAR 0 2
66585: ARRAY
66586: PUSH
66587: LD_VAR 0 4
66591: ARRAY
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: PPUSH
66597: LD_EXP 65
66601: PUSH
66602: LD_VAR 0 2
66606: ARRAY
66607: PUSH
66608: LD_VAR 0 4
66612: ARRAY
66613: PUSH
66614: LD_INT 2
66616: ARRAY
66617: PPUSH
66618: LD_INT 15
66620: PPUSH
66621: CALL 19067 0 4
66625: PUSH
66626: LD_INT 4
66628: ARRAY
66629: PUSH
66630: LD_EXP 66
66634: PUSH
66635: LD_VAR 0 2
66639: ARRAY
66640: PUSH
66641: LD_VAR 0 3
66645: ARRAY
66646: PPUSH
66647: LD_INT 10
66649: PPUSH
66650: CALL 20764 0 2
66654: PUSH
66655: LD_INT 4
66657: ARRAY
66658: OR
66659: AND
66660: IFFALSE 66683
// ComStop ( mc_miners [ i ] [ j ] ) ;
66662: LD_EXP 66
66666: PUSH
66667: LD_VAR 0 2
66671: ARRAY
66672: PUSH
66673: LD_VAR 0 3
66677: ARRAY
66678: PPUSH
66679: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
66683: LD_EXP 66
66687: PUSH
66688: LD_VAR 0 2
66692: ARRAY
66693: PUSH
66694: LD_VAR 0 3
66698: ARRAY
66699: PPUSH
66700: CALL_OW 257
66704: PUSH
66705: LD_INT 1
66707: EQUAL
66708: PUSH
66709: LD_EXP 66
66713: PUSH
66714: LD_VAR 0 2
66718: ARRAY
66719: PUSH
66720: LD_VAR 0 3
66724: ARRAY
66725: PPUSH
66726: CALL_OW 459
66730: NOT
66731: AND
66732: PUSH
66733: LD_EXP 66
66737: PUSH
66738: LD_VAR 0 2
66742: ARRAY
66743: PUSH
66744: LD_VAR 0 3
66748: ARRAY
66749: PPUSH
66750: CALL_OW 255
66754: PPUSH
66755: LD_EXP 65
66759: PUSH
66760: LD_VAR 0 2
66764: ARRAY
66765: PUSH
66766: LD_VAR 0 4
66770: ARRAY
66771: PUSH
66772: LD_INT 1
66774: ARRAY
66775: PPUSH
66776: LD_EXP 65
66780: PUSH
66781: LD_VAR 0 2
66785: ARRAY
66786: PUSH
66787: LD_VAR 0 4
66791: ARRAY
66792: PUSH
66793: LD_INT 2
66795: ARRAY
66796: PPUSH
66797: LD_INT 15
66799: PPUSH
66800: CALL 19067 0 4
66804: PUSH
66805: LD_INT 4
66807: ARRAY
66808: PUSH
66809: LD_INT 0
66811: EQUAL
66812: AND
66813: PUSH
66814: LD_EXP 66
66818: PUSH
66819: LD_VAR 0 2
66823: ARRAY
66824: PUSH
66825: LD_VAR 0 3
66829: ARRAY
66830: PPUSH
66831: CALL_OW 314
66835: NOT
66836: AND
66837: IFFALSE 67013
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
66839: LD_EXP 66
66843: PUSH
66844: LD_VAR 0 2
66848: ARRAY
66849: PUSH
66850: LD_VAR 0 3
66854: ARRAY
66855: PPUSH
66856: CALL_OW 310
66860: IFFALSE 66883
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
66862: LD_EXP 66
66866: PUSH
66867: LD_VAR 0 2
66871: ARRAY
66872: PUSH
66873: LD_VAR 0 3
66877: ARRAY
66878: PPUSH
66879: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
66883: LD_EXP 66
66887: PUSH
66888: LD_VAR 0 2
66892: ARRAY
66893: PUSH
66894: LD_VAR 0 3
66898: ARRAY
66899: PPUSH
66900: CALL_OW 314
66904: NOT
66905: IFFALSE 66973
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
66907: LD_EXP 66
66911: PUSH
66912: LD_VAR 0 2
66916: ARRAY
66917: PUSH
66918: LD_VAR 0 3
66922: ARRAY
66923: PPUSH
66924: LD_EXP 65
66928: PUSH
66929: LD_VAR 0 2
66933: ARRAY
66934: PUSH
66935: LD_VAR 0 4
66939: ARRAY
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PPUSH
66945: LD_EXP 65
66949: PUSH
66950: LD_VAR 0 2
66954: ARRAY
66955: PUSH
66956: LD_VAR 0 4
66960: ARRAY
66961: PUSH
66962: LD_INT 2
66964: ARRAY
66965: PPUSH
66966: LD_INT 0
66968: PPUSH
66969: CALL_OW 193
// k := k + 1 ;
66973: LD_ADDR_VAR 0 4
66977: PUSH
66978: LD_VAR 0 4
66982: PUSH
66983: LD_INT 1
66985: PLUS
66986: ST_TO_ADDR
// if k > mc_mines [ i ] then
66987: LD_VAR 0 4
66991: PUSH
66992: LD_EXP 65
66996: PUSH
66997: LD_VAR 0 2
67001: ARRAY
67002: GREATER
67003: IFFALSE 67013
// k := 1 ;
67005: LD_ADDR_VAR 0 4
67009: PUSH
67010: LD_INT 1
67012: ST_TO_ADDR
// end ; end ;
67013: GO 66418
67015: POP
67016: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67017: LD_ADDR_VAR 0 5
67021: PUSH
67022: LD_EXP 52
67026: PUSH
67027: LD_VAR 0 2
67031: ARRAY
67032: PPUSH
67033: LD_INT 2
67035: PUSH
67036: LD_INT 30
67038: PUSH
67039: LD_INT 4
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 30
67048: PUSH
67049: LD_INT 5
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 30
67058: PUSH
67059: LD_INT 32
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: PPUSH
67072: CALL_OW 72
67076: ST_TO_ADDR
// if not tmp then
67077: LD_VAR 0 5
67081: NOT
67082: IFFALSE 67086
// continue ;
67084: GO 66335
// list := [ ] ;
67086: LD_ADDR_VAR 0 6
67090: PUSH
67091: EMPTY
67092: ST_TO_ADDR
// for j in tmp do
67093: LD_ADDR_VAR 0 3
67097: PUSH
67098: LD_VAR 0 5
67102: PUSH
67103: FOR_IN
67104: IFFALSE 67173
// begin for k in UnitsInside ( j ) do
67106: LD_ADDR_VAR 0 4
67110: PUSH
67111: LD_VAR 0 3
67115: PPUSH
67116: CALL_OW 313
67120: PUSH
67121: FOR_IN
67122: IFFALSE 67169
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67124: LD_VAR 0 4
67128: PPUSH
67129: CALL_OW 257
67133: PUSH
67134: LD_INT 1
67136: EQUAL
67137: PUSH
67138: LD_VAR 0 4
67142: PPUSH
67143: CALL_OW 459
67147: NOT
67148: AND
67149: IFFALSE 67167
// list := list ^ k ;
67151: LD_ADDR_VAR 0 6
67155: PUSH
67156: LD_VAR 0 6
67160: PUSH
67161: LD_VAR 0 4
67165: ADD
67166: ST_TO_ADDR
67167: GO 67121
67169: POP
67170: POP
// end ;
67171: GO 67103
67173: POP
67174: POP
// list := list diff mc_miners [ i ] ;
67175: LD_ADDR_VAR 0 6
67179: PUSH
67180: LD_VAR 0 6
67184: PUSH
67185: LD_EXP 66
67189: PUSH
67190: LD_VAR 0 2
67194: ARRAY
67195: DIFF
67196: ST_TO_ADDR
// if not list then
67197: LD_VAR 0 6
67201: NOT
67202: IFFALSE 67206
// continue ;
67204: GO 66335
// k := mc_mines [ i ] - mc_miners [ i ] ;
67206: LD_ADDR_VAR 0 4
67210: PUSH
67211: LD_EXP 65
67215: PUSH
67216: LD_VAR 0 2
67220: ARRAY
67221: PUSH
67222: LD_EXP 66
67226: PUSH
67227: LD_VAR 0 2
67231: ARRAY
67232: MINUS
67233: ST_TO_ADDR
// if k > list then
67234: LD_VAR 0 4
67238: PUSH
67239: LD_VAR 0 6
67243: GREATER
67244: IFFALSE 67256
// k := list ;
67246: LD_ADDR_VAR 0 4
67250: PUSH
67251: LD_VAR 0 6
67255: ST_TO_ADDR
// for j = 1 to k do
67256: LD_ADDR_VAR 0 3
67260: PUSH
67261: DOUBLE
67262: LD_INT 1
67264: DEC
67265: ST_TO_ADDR
67266: LD_VAR 0 4
67270: PUSH
67271: FOR_TO
67272: IFFALSE 67326
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67274: LD_ADDR_EXP 66
67278: PUSH
67279: LD_EXP 66
67283: PPUSH
67284: LD_VAR 0 2
67288: PUSH
67289: LD_EXP 66
67293: PUSH
67294: LD_VAR 0 2
67298: ARRAY
67299: PUSH
67300: LD_INT 1
67302: PLUS
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PPUSH
67308: LD_VAR 0 6
67312: PUSH
67313: LD_VAR 0 3
67317: ARRAY
67318: PPUSH
67319: CALL 18171 0 3
67323: ST_TO_ADDR
67324: GO 67271
67326: POP
67327: POP
// end ;
67328: GO 66335
67330: POP
67331: POP
// end ;
67332: LD_VAR 0 1
67336: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
67337: LD_INT 0
67339: PPUSH
67340: PPUSH
67341: PPUSH
67342: PPUSH
67343: PPUSH
67344: PPUSH
67345: PPUSH
67346: PPUSH
67347: PPUSH
67348: PPUSH
// if not mc_bases then
67349: LD_EXP 52
67353: NOT
67354: IFFALSE 67358
// exit ;
67356: GO 69108
// for i = 1 to mc_bases do
67358: LD_ADDR_VAR 0 2
67362: PUSH
67363: DOUBLE
67364: LD_INT 1
67366: DEC
67367: ST_TO_ADDR
67368: LD_EXP 52
67372: PUSH
67373: FOR_TO
67374: IFFALSE 69106
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67376: LD_EXP 52
67380: PUSH
67381: LD_VAR 0 2
67385: ARRAY
67386: NOT
67387: PUSH
67388: LD_EXP 59
67392: PUSH
67393: LD_VAR 0 2
67397: ARRAY
67398: OR
67399: IFFALSE 67403
// continue ;
67401: GO 67373
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67403: LD_EXP 68
67407: PUSH
67408: LD_VAR 0 2
67412: ARRAY
67413: NOT
67414: PUSH
67415: LD_EXP 69
67419: PUSH
67420: LD_VAR 0 2
67424: ARRAY
67425: AND
67426: IFFALSE 67464
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67428: LD_ADDR_EXP 69
67432: PUSH
67433: LD_EXP 69
67437: PPUSH
67438: LD_VAR 0 2
67442: PPUSH
67443: EMPTY
67444: PPUSH
67445: CALL_OW 1
67449: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67450: LD_VAR 0 2
67454: PPUSH
67455: LD_INT 107
67457: PPUSH
67458: CALL 58218 0 2
// continue ;
67462: GO 67373
// end ; target := [ ] ;
67464: LD_ADDR_VAR 0 6
67468: PUSH
67469: EMPTY
67470: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67471: LD_ADDR_VAR 0 3
67475: PUSH
67476: DOUBLE
67477: LD_EXP 68
67481: PUSH
67482: LD_VAR 0 2
67486: ARRAY
67487: INC
67488: ST_TO_ADDR
67489: LD_INT 1
67491: PUSH
67492: FOR_DOWNTO
67493: IFFALSE 67753
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67495: LD_EXP 68
67499: PUSH
67500: LD_VAR 0 2
67504: ARRAY
67505: PUSH
67506: LD_VAR 0 3
67510: ARRAY
67511: PUSH
67512: LD_INT 2
67514: ARRAY
67515: PPUSH
67516: LD_EXP 68
67520: PUSH
67521: LD_VAR 0 2
67525: ARRAY
67526: PUSH
67527: LD_VAR 0 3
67531: ARRAY
67532: PUSH
67533: LD_INT 3
67535: ARRAY
67536: PPUSH
67537: CALL_OW 488
67541: PUSH
67542: LD_EXP 68
67546: PUSH
67547: LD_VAR 0 2
67551: ARRAY
67552: PUSH
67553: LD_VAR 0 3
67557: ARRAY
67558: PUSH
67559: LD_INT 2
67561: ARRAY
67562: PPUSH
67563: LD_EXP 68
67567: PUSH
67568: LD_VAR 0 2
67572: ARRAY
67573: PUSH
67574: LD_VAR 0 3
67578: ARRAY
67579: PUSH
67580: LD_INT 3
67582: ARRAY
67583: PPUSH
67584: CALL_OW 284
67588: PUSH
67589: LD_INT 0
67591: EQUAL
67592: AND
67593: IFFALSE 67648
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
67595: LD_ADDR_VAR 0 5
67599: PUSH
67600: LD_EXP 68
67604: PUSH
67605: LD_VAR 0 2
67609: ARRAY
67610: PPUSH
67611: LD_VAR 0 3
67615: PPUSH
67616: CALL_OW 3
67620: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
67621: LD_ADDR_EXP 68
67625: PUSH
67626: LD_EXP 68
67630: PPUSH
67631: LD_VAR 0 2
67635: PPUSH
67636: LD_VAR 0 5
67640: PPUSH
67641: CALL_OW 1
67645: ST_TO_ADDR
// continue ;
67646: GO 67492
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
67648: LD_EXP 52
67652: PUSH
67653: LD_VAR 0 2
67657: ARRAY
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PPUSH
67663: CALL_OW 255
67667: PPUSH
67668: LD_EXP 68
67672: PUSH
67673: LD_VAR 0 2
67677: ARRAY
67678: PUSH
67679: LD_VAR 0 3
67683: ARRAY
67684: PUSH
67685: LD_INT 2
67687: ARRAY
67688: PPUSH
67689: LD_EXP 68
67693: PUSH
67694: LD_VAR 0 2
67698: ARRAY
67699: PUSH
67700: LD_VAR 0 3
67704: ARRAY
67705: PUSH
67706: LD_INT 3
67708: ARRAY
67709: PPUSH
67710: LD_INT 30
67712: PPUSH
67713: CALL 19067 0 4
67717: PUSH
67718: LD_INT 4
67720: ARRAY
67721: PUSH
67722: LD_INT 0
67724: EQUAL
67725: IFFALSE 67751
// begin target := mc_crates [ i ] [ j ] ;
67727: LD_ADDR_VAR 0 6
67731: PUSH
67732: LD_EXP 68
67736: PUSH
67737: LD_VAR 0 2
67741: ARRAY
67742: PUSH
67743: LD_VAR 0 3
67747: ARRAY
67748: ST_TO_ADDR
// break ;
67749: GO 67753
// end ; end ;
67751: GO 67492
67753: POP
67754: POP
// if not target then
67755: LD_VAR 0 6
67759: NOT
67760: IFFALSE 67764
// continue ;
67762: GO 67373
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
67764: LD_ADDR_VAR 0 7
67768: PUSH
67769: LD_EXP 71
67773: PUSH
67774: LD_VAR 0 2
67778: ARRAY
67779: PPUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: LD_INT 58
67788: PUSH
67789: EMPTY
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 61
67798: PUSH
67799: EMPTY
67800: LIST
67801: PUSH
67802: LD_INT 33
67804: PUSH
67805: LD_INT 5
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 33
67814: PUSH
67815: LD_INT 3
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: LD_INT 34
67834: PUSH
67835: LD_INT 32
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 34
67844: PUSH
67845: LD_INT 51
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 34
67854: PUSH
67855: LD_INT 12
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PPUSH
67872: CALL_OW 72
67876: ST_TO_ADDR
// if not cargo then
67877: LD_VAR 0 7
67881: NOT
67882: IFFALSE 68525
// begin if mc_crates_collector [ i ] < 5 then
67884: LD_EXP 69
67888: PUSH
67889: LD_VAR 0 2
67893: ARRAY
67894: PUSH
67895: LD_INT 5
67897: LESS
67898: IFFALSE 68264
// begin if mc_ape [ i ] then
67900: LD_EXP 81
67904: PUSH
67905: LD_VAR 0 2
67909: ARRAY
67910: IFFALSE 67957
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
67912: LD_ADDR_VAR 0 5
67916: PUSH
67917: LD_EXP 81
67921: PUSH
67922: LD_VAR 0 2
67926: ARRAY
67927: PPUSH
67928: LD_INT 25
67930: PUSH
67931: LD_INT 16
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 24
67940: PUSH
67941: LD_INT 750
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PPUSH
67952: CALL_OW 72
67956: ST_TO_ADDR
// if not tmp then
67957: LD_VAR 0 5
67961: NOT
67962: IFFALSE 68009
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
67964: LD_ADDR_VAR 0 5
67968: PUSH
67969: LD_EXP 52
67973: PUSH
67974: LD_VAR 0 2
67978: ARRAY
67979: PPUSH
67980: LD_INT 25
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 24
67992: PUSH
67993: LD_INT 750
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PPUSH
68004: CALL_OW 72
68008: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
68009: LD_EXP 81
68013: PUSH
68014: LD_VAR 0 2
68018: ARRAY
68019: PUSH
68020: LD_EXP 52
68024: PUSH
68025: LD_VAR 0 2
68029: ARRAY
68030: PPUSH
68031: LD_INT 25
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 24
68043: PUSH
68044: LD_INT 750
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PPUSH
68055: CALL_OW 72
68059: AND
68060: PUSH
68061: LD_VAR 0 5
68065: PUSH
68066: LD_INT 5
68068: LESS
68069: AND
68070: IFFALSE 68152
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
68072: LD_ADDR_VAR 0 3
68076: PUSH
68077: LD_EXP 52
68081: PUSH
68082: LD_VAR 0 2
68086: ARRAY
68087: PPUSH
68088: LD_INT 25
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 24
68100: PUSH
68101: LD_INT 750
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PPUSH
68112: CALL_OW 72
68116: PUSH
68117: FOR_IN
68118: IFFALSE 68150
// begin tmp := tmp union j ;
68120: LD_ADDR_VAR 0 5
68124: PUSH
68125: LD_VAR 0 5
68129: PUSH
68130: LD_VAR 0 3
68134: UNION
68135: ST_TO_ADDR
// if tmp >= 5 then
68136: LD_VAR 0 5
68140: PUSH
68141: LD_INT 5
68143: GREATEREQUAL
68144: IFFALSE 68148
// break ;
68146: GO 68150
// end ;
68148: GO 68117
68150: POP
68151: POP
// end ; if not tmp then
68152: LD_VAR 0 5
68156: NOT
68157: IFFALSE 68161
// continue ;
68159: GO 67373
// for j in tmp do
68161: LD_ADDR_VAR 0 3
68165: PUSH
68166: LD_VAR 0 5
68170: PUSH
68171: FOR_IN
68172: IFFALSE 68262
// if not GetTag ( j ) then
68174: LD_VAR 0 3
68178: PPUSH
68179: CALL_OW 110
68183: NOT
68184: IFFALSE 68260
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68186: LD_ADDR_EXP 69
68190: PUSH
68191: LD_EXP 69
68195: PPUSH
68196: LD_VAR 0 2
68200: PUSH
68201: LD_EXP 69
68205: PUSH
68206: LD_VAR 0 2
68210: ARRAY
68211: PUSH
68212: LD_INT 1
68214: PLUS
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PPUSH
68220: LD_VAR 0 3
68224: PPUSH
68225: CALL 18171 0 3
68229: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68230: LD_VAR 0 3
68234: PPUSH
68235: LD_INT 107
68237: PPUSH
68238: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68242: LD_EXP 69
68246: PUSH
68247: LD_VAR 0 2
68251: ARRAY
68252: PUSH
68253: LD_INT 5
68255: GREATEREQUAL
68256: IFFALSE 68260
// break ;
68258: GO 68262
// end ;
68260: GO 68171
68262: POP
68263: POP
// end ; if mc_crates_collector [ i ] and target then
68264: LD_EXP 69
68268: PUSH
68269: LD_VAR 0 2
68273: ARRAY
68274: PUSH
68275: LD_VAR 0 6
68279: AND
68280: IFFALSE 68523
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68282: LD_EXP 69
68286: PUSH
68287: LD_VAR 0 2
68291: ARRAY
68292: PUSH
68293: LD_VAR 0 6
68297: PUSH
68298: LD_INT 1
68300: ARRAY
68301: LESS
68302: IFFALSE 68322
// tmp := mc_crates_collector [ i ] else
68304: LD_ADDR_VAR 0 5
68308: PUSH
68309: LD_EXP 69
68313: PUSH
68314: LD_VAR 0 2
68318: ARRAY
68319: ST_TO_ADDR
68320: GO 68336
// tmp := target [ 1 ] ;
68322: LD_ADDR_VAR 0 5
68326: PUSH
68327: LD_VAR 0 6
68331: PUSH
68332: LD_INT 1
68334: ARRAY
68335: ST_TO_ADDR
// k := 0 ;
68336: LD_ADDR_VAR 0 4
68340: PUSH
68341: LD_INT 0
68343: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
68344: LD_ADDR_VAR 0 3
68348: PUSH
68349: LD_EXP 69
68353: PUSH
68354: LD_VAR 0 2
68358: ARRAY
68359: PUSH
68360: FOR_IN
68361: IFFALSE 68521
// begin k := k + 1 ;
68363: LD_ADDR_VAR 0 4
68367: PUSH
68368: LD_VAR 0 4
68372: PUSH
68373: LD_INT 1
68375: PLUS
68376: ST_TO_ADDR
// if k > tmp then
68377: LD_VAR 0 4
68381: PUSH
68382: LD_VAR 0 5
68386: GREATER
68387: IFFALSE 68391
// break ;
68389: GO 68521
// if not GetClass ( j ) in [ 2 , 16 ] then
68391: LD_VAR 0 3
68395: PPUSH
68396: CALL_OW 257
68400: PUSH
68401: LD_INT 2
68403: PUSH
68404: LD_INT 16
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: IN
68411: NOT
68412: IFFALSE 68465
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
68414: LD_ADDR_EXP 69
68418: PUSH
68419: LD_EXP 69
68423: PPUSH
68424: LD_VAR 0 2
68428: PPUSH
68429: LD_EXP 69
68433: PUSH
68434: LD_VAR 0 2
68438: ARRAY
68439: PUSH
68440: LD_VAR 0 3
68444: DIFF
68445: PPUSH
68446: CALL_OW 1
68450: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68451: LD_VAR 0 3
68455: PPUSH
68456: LD_INT 0
68458: PPUSH
68459: CALL_OW 109
// continue ;
68463: GO 68360
// end ; if IsInUnit ( j ) then
68465: LD_VAR 0 3
68469: PPUSH
68470: CALL_OW 310
68474: IFFALSE 68485
// ComExitBuilding ( j ) ;
68476: LD_VAR 0 3
68480: PPUSH
68481: CALL_OW 122
// wait ( 3 ) ;
68485: LD_INT 3
68487: PPUSH
68488: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68492: LD_VAR 0 3
68496: PPUSH
68497: LD_VAR 0 6
68501: PUSH
68502: LD_INT 2
68504: ARRAY
68505: PPUSH
68506: LD_VAR 0 6
68510: PUSH
68511: LD_INT 3
68513: ARRAY
68514: PPUSH
68515: CALL_OW 117
// end ;
68519: GO 68360
68521: POP
68522: POP
// end ; end else
68523: GO 69104
// begin for j in cargo do
68525: LD_ADDR_VAR 0 3
68529: PUSH
68530: LD_VAR 0 7
68534: PUSH
68535: FOR_IN
68536: IFFALSE 69102
// begin if GetTag ( j ) <> 0 then
68538: LD_VAR 0 3
68542: PPUSH
68543: CALL_OW 110
68547: PUSH
68548: LD_INT 0
68550: NONEQUAL
68551: IFFALSE 68555
// continue ;
68553: GO 68535
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
68555: LD_VAR 0 3
68559: PPUSH
68560: CALL_OW 256
68564: PUSH
68565: LD_INT 1000
68567: LESS
68568: PUSH
68569: LD_VAR 0 3
68573: PPUSH
68574: LD_EXP 76
68578: PUSH
68579: LD_VAR 0 2
68583: ARRAY
68584: PPUSH
68585: CALL_OW 308
68589: NOT
68590: AND
68591: IFFALSE 68613
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68593: LD_VAR 0 3
68597: PPUSH
68598: LD_EXP 76
68602: PUSH
68603: LD_VAR 0 2
68607: ARRAY
68608: PPUSH
68609: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
68613: LD_VAR 0 3
68617: PPUSH
68618: CALL_OW 256
68622: PUSH
68623: LD_INT 1000
68625: LESS
68626: PUSH
68627: LD_VAR 0 3
68631: PPUSH
68632: LD_EXP 76
68636: PUSH
68637: LD_VAR 0 2
68641: ARRAY
68642: PPUSH
68643: CALL_OW 308
68647: AND
68648: IFFALSE 68652
// continue ;
68650: GO 68535
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68652: LD_VAR 0 3
68656: PPUSH
68657: CALL_OW 262
68661: PUSH
68662: LD_INT 2
68664: EQUAL
68665: PUSH
68666: LD_VAR 0 3
68670: PPUSH
68671: CALL_OW 261
68675: PUSH
68676: LD_INT 15
68678: LESS
68679: AND
68680: IFFALSE 68684
// continue ;
68682: GO 68535
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68684: LD_VAR 0 3
68688: PPUSH
68689: CALL_OW 262
68693: PUSH
68694: LD_INT 1
68696: EQUAL
68697: PUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 261
68707: PUSH
68708: LD_INT 10
68710: LESS
68711: AND
68712: IFFALSE 69041
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68714: LD_ADDR_VAR 0 8
68718: PUSH
68719: LD_EXP 52
68723: PUSH
68724: LD_VAR 0 2
68728: ARRAY
68729: PPUSH
68730: LD_INT 2
68732: PUSH
68733: LD_INT 30
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 30
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: PPUSH
68758: CALL_OW 72
68762: ST_TO_ADDR
// if not depot then
68763: LD_VAR 0 8
68767: NOT
68768: IFFALSE 68772
// continue ;
68770: GO 68535
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68772: LD_VAR 0 3
68776: PPUSH
68777: LD_VAR 0 8
68781: PPUSH
68782: LD_VAR 0 3
68786: PPUSH
68787: CALL_OW 74
68791: PPUSH
68792: CALL_OW 296
68796: PUSH
68797: LD_INT 6
68799: LESS
68800: IFFALSE 68816
// SetFuel ( j , 100 ) else
68802: LD_VAR 0 3
68806: PPUSH
68807: LD_INT 100
68809: PPUSH
68810: CALL_OW 240
68814: GO 69041
// if GetFuel ( j ) = 0 then
68816: LD_VAR 0 3
68820: PPUSH
68821: CALL_OW 261
68825: PUSH
68826: LD_INT 0
68828: EQUAL
68829: IFFALSE 69041
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
68831: LD_ADDR_EXP 71
68835: PUSH
68836: LD_EXP 71
68840: PPUSH
68841: LD_VAR 0 2
68845: PPUSH
68846: LD_EXP 71
68850: PUSH
68851: LD_VAR 0 2
68855: ARRAY
68856: PUSH
68857: LD_VAR 0 3
68861: DIFF
68862: PPUSH
68863: CALL_OW 1
68867: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
68868: LD_VAR 0 3
68872: PPUSH
68873: CALL_OW 263
68877: PUSH
68878: LD_INT 1
68880: EQUAL
68881: IFFALSE 68897
// ComExitVehicle ( IsInUnit ( j ) ) ;
68883: LD_VAR 0 3
68887: PPUSH
68888: CALL_OW 310
68892: PPUSH
68893: CALL_OW 121
// if GetControl ( j ) = control_remote then
68897: LD_VAR 0 3
68901: PPUSH
68902: CALL_OW 263
68906: PUSH
68907: LD_INT 2
68909: EQUAL
68910: IFFALSE 68921
// ComUnlink ( j ) ;
68912: LD_VAR 0 3
68916: PPUSH
68917: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
68921: LD_ADDR_VAR 0 9
68925: PUSH
68926: LD_VAR 0 2
68930: PPUSH
68931: LD_INT 3
68933: PPUSH
68934: CALL 78178 0 2
68938: ST_TO_ADDR
// if fac then
68939: LD_VAR 0 9
68943: IFFALSE 69039
// begin for k in fac do
68945: LD_ADDR_VAR 0 4
68949: PUSH
68950: LD_VAR 0 9
68954: PUSH
68955: FOR_IN
68956: IFFALSE 69037
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
68958: LD_ADDR_VAR 0 10
68962: PUSH
68963: LD_VAR 0 9
68967: PPUSH
68968: LD_VAR 0 3
68972: PPUSH
68973: CALL_OW 265
68977: PPUSH
68978: LD_VAR 0 3
68982: PPUSH
68983: CALL_OW 262
68987: PPUSH
68988: LD_VAR 0 3
68992: PPUSH
68993: CALL_OW 263
68997: PPUSH
68998: LD_VAR 0 3
69002: PPUSH
69003: CALL_OW 264
69007: PPUSH
69008: CALL 15703 0 5
69012: ST_TO_ADDR
// if components then
69013: LD_VAR 0 10
69017: IFFALSE 69035
// begin MC_InsertProduceList ( i , components ) ;
69019: LD_VAR 0 2
69023: PPUSH
69024: LD_VAR 0 10
69028: PPUSH
69029: CALL 77723 0 2
// break ;
69033: GO 69037
// end ; end ;
69035: GO 68955
69037: POP
69038: POP
// end ; continue ;
69039: GO 68535
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69041: LD_VAR 0 3
69045: PPUSH
69046: LD_INT 1
69048: PPUSH
69049: CALL_OW 289
69053: PUSH
69054: LD_INT 100
69056: LESS
69057: PUSH
69058: LD_VAR 0 3
69062: PPUSH
69063: CALL_OW 314
69067: NOT
69068: AND
69069: IFFALSE 69098
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69071: LD_VAR 0 3
69075: PPUSH
69076: LD_VAR 0 6
69080: PUSH
69081: LD_INT 2
69083: ARRAY
69084: PPUSH
69085: LD_VAR 0 6
69089: PUSH
69090: LD_INT 3
69092: ARRAY
69093: PPUSH
69094: CALL_OW 117
// break ;
69098: GO 69102
// end ;
69100: GO 68535
69102: POP
69103: POP
// end ; end ;
69104: GO 67373
69106: POP
69107: POP
// end ;
69108: LD_VAR 0 1
69112: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69113: LD_INT 0
69115: PPUSH
69116: PPUSH
69117: PPUSH
69118: PPUSH
// if not mc_bases then
69119: LD_EXP 52
69123: NOT
69124: IFFALSE 69128
// exit ;
69126: GO 69289
// for i = 1 to mc_bases do
69128: LD_ADDR_VAR 0 2
69132: PUSH
69133: DOUBLE
69134: LD_INT 1
69136: DEC
69137: ST_TO_ADDR
69138: LD_EXP 52
69142: PUSH
69143: FOR_TO
69144: IFFALSE 69287
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
69146: LD_ADDR_VAR 0 4
69150: PUSH
69151: LD_EXP 71
69155: PUSH
69156: LD_VAR 0 2
69160: ARRAY
69161: PUSH
69162: LD_EXP 74
69166: PUSH
69167: LD_VAR 0 2
69171: ARRAY
69172: UNION
69173: PPUSH
69174: LD_INT 33
69176: PUSH
69177: LD_INT 2
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PPUSH
69184: CALL_OW 72
69188: ST_TO_ADDR
// if tmp then
69189: LD_VAR 0 4
69193: IFFALSE 69285
// for j in tmp do
69195: LD_ADDR_VAR 0 3
69199: PUSH
69200: LD_VAR 0 4
69204: PUSH
69205: FOR_IN
69206: IFFALSE 69283
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69208: LD_VAR 0 3
69212: PPUSH
69213: CALL_OW 312
69217: NOT
69218: PUSH
69219: LD_VAR 0 3
69223: PPUSH
69224: CALL_OW 256
69228: PUSH
69229: LD_INT 250
69231: GREATEREQUAL
69232: AND
69233: IFFALSE 69246
// Connect ( j ) else
69235: LD_VAR 0 3
69239: PPUSH
69240: CALL 21104 0 1
69244: GO 69281
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69246: LD_VAR 0 3
69250: PPUSH
69251: CALL_OW 256
69255: PUSH
69256: LD_INT 250
69258: LESS
69259: PUSH
69260: LD_VAR 0 3
69264: PPUSH
69265: CALL_OW 312
69269: AND
69270: IFFALSE 69281
// ComUnlink ( j ) ;
69272: LD_VAR 0 3
69276: PPUSH
69277: CALL_OW 136
69281: GO 69205
69283: POP
69284: POP
// end ;
69285: GO 69143
69287: POP
69288: POP
// end ;
69289: LD_VAR 0 1
69293: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69294: LD_INT 0
69296: PPUSH
69297: PPUSH
69298: PPUSH
69299: PPUSH
69300: PPUSH
// if not mc_bases then
69301: LD_EXP 52
69305: NOT
69306: IFFALSE 69310
// exit ;
69308: GO 69755
// for i = 1 to mc_bases do
69310: LD_ADDR_VAR 0 2
69314: PUSH
69315: DOUBLE
69316: LD_INT 1
69318: DEC
69319: ST_TO_ADDR
69320: LD_EXP 52
69324: PUSH
69325: FOR_TO
69326: IFFALSE 69753
// begin if not mc_produce [ i ] then
69328: LD_EXP 73
69332: PUSH
69333: LD_VAR 0 2
69337: ARRAY
69338: NOT
69339: IFFALSE 69343
// continue ;
69341: GO 69325
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69343: LD_ADDR_VAR 0 5
69347: PUSH
69348: LD_EXP 52
69352: PUSH
69353: LD_VAR 0 2
69357: ARRAY
69358: PPUSH
69359: LD_INT 30
69361: PUSH
69362: LD_INT 3
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PPUSH
69369: CALL_OW 72
69373: ST_TO_ADDR
// if not fac then
69374: LD_VAR 0 5
69378: NOT
69379: IFFALSE 69383
// continue ;
69381: GO 69325
// for j in fac do
69383: LD_ADDR_VAR 0 3
69387: PUSH
69388: LD_VAR 0 5
69392: PUSH
69393: FOR_IN
69394: IFFALSE 69749
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
69396: LD_VAR 0 3
69400: PPUSH
69401: CALL_OW 461
69405: PUSH
69406: LD_INT 2
69408: NONEQUAL
69409: PUSH
69410: LD_VAR 0 3
69414: PPUSH
69415: LD_INT 15
69417: PPUSH
69418: CALL 20764 0 2
69422: PUSH
69423: LD_INT 4
69425: ARRAY
69426: OR
69427: IFFALSE 69431
// continue ;
69429: GO 69393
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69431: LD_VAR 0 3
69435: PPUSH
69436: LD_EXP 73
69440: PUSH
69441: LD_VAR 0 2
69445: ARRAY
69446: PUSH
69447: LD_INT 1
69449: ARRAY
69450: PUSH
69451: LD_INT 1
69453: ARRAY
69454: PPUSH
69455: LD_EXP 73
69459: PUSH
69460: LD_VAR 0 2
69464: ARRAY
69465: PUSH
69466: LD_INT 1
69468: ARRAY
69469: PUSH
69470: LD_INT 2
69472: ARRAY
69473: PPUSH
69474: LD_EXP 73
69478: PUSH
69479: LD_VAR 0 2
69483: ARRAY
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PUSH
69489: LD_INT 3
69491: ARRAY
69492: PPUSH
69493: LD_EXP 73
69497: PUSH
69498: LD_VAR 0 2
69502: ARRAY
69503: PUSH
69504: LD_INT 1
69506: ARRAY
69507: PUSH
69508: LD_INT 4
69510: ARRAY
69511: PPUSH
69512: CALL_OW 448
69516: PUSH
69517: LD_VAR 0 3
69521: PPUSH
69522: LD_EXP 73
69526: PUSH
69527: LD_VAR 0 2
69531: ARRAY
69532: PUSH
69533: LD_INT 1
69535: ARRAY
69536: PUSH
69537: LD_INT 1
69539: ARRAY
69540: PUSH
69541: LD_EXP 73
69545: PUSH
69546: LD_VAR 0 2
69550: ARRAY
69551: PUSH
69552: LD_INT 1
69554: ARRAY
69555: PUSH
69556: LD_INT 2
69558: ARRAY
69559: PUSH
69560: LD_EXP 73
69564: PUSH
69565: LD_VAR 0 2
69569: ARRAY
69570: PUSH
69571: LD_INT 1
69573: ARRAY
69574: PUSH
69575: LD_INT 3
69577: ARRAY
69578: PUSH
69579: LD_EXP 73
69583: PUSH
69584: LD_VAR 0 2
69588: ARRAY
69589: PUSH
69590: LD_INT 1
69592: ARRAY
69593: PUSH
69594: LD_INT 4
69596: ARRAY
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: PPUSH
69604: CALL 24435 0 2
69608: AND
69609: IFFALSE 69747
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69611: LD_VAR 0 3
69615: PPUSH
69616: LD_EXP 73
69620: PUSH
69621: LD_VAR 0 2
69625: ARRAY
69626: PUSH
69627: LD_INT 1
69629: ARRAY
69630: PUSH
69631: LD_INT 1
69633: ARRAY
69634: PPUSH
69635: LD_EXP 73
69639: PUSH
69640: LD_VAR 0 2
69644: ARRAY
69645: PUSH
69646: LD_INT 1
69648: ARRAY
69649: PUSH
69650: LD_INT 2
69652: ARRAY
69653: PPUSH
69654: LD_EXP 73
69658: PUSH
69659: LD_VAR 0 2
69663: ARRAY
69664: PUSH
69665: LD_INT 1
69667: ARRAY
69668: PUSH
69669: LD_INT 3
69671: ARRAY
69672: PPUSH
69673: LD_EXP 73
69677: PUSH
69678: LD_VAR 0 2
69682: ARRAY
69683: PUSH
69684: LD_INT 1
69686: ARRAY
69687: PUSH
69688: LD_INT 4
69690: ARRAY
69691: PPUSH
69692: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69696: LD_ADDR_VAR 0 4
69700: PUSH
69701: LD_EXP 73
69705: PUSH
69706: LD_VAR 0 2
69710: ARRAY
69711: PPUSH
69712: LD_INT 1
69714: PPUSH
69715: CALL_OW 3
69719: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69720: LD_ADDR_EXP 73
69724: PUSH
69725: LD_EXP 73
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: LD_VAR 0 4
69739: PPUSH
69740: CALL_OW 1
69744: ST_TO_ADDR
// break ;
69745: GO 69749
// end ; end ;
69747: GO 69393
69749: POP
69750: POP
// end ;
69751: GO 69325
69753: POP
69754: POP
// end ;
69755: LD_VAR 0 1
69759: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69760: LD_INT 0
69762: PPUSH
69763: PPUSH
69764: PPUSH
// if not mc_bases then
69765: LD_EXP 52
69769: NOT
69770: IFFALSE 69774
// exit ;
69772: GO 69863
// for i = 1 to mc_bases do
69774: LD_ADDR_VAR 0 2
69778: PUSH
69779: DOUBLE
69780: LD_INT 1
69782: DEC
69783: ST_TO_ADDR
69784: LD_EXP 52
69788: PUSH
69789: FOR_TO
69790: IFFALSE 69861
// begin if mc_attack [ i ] then
69792: LD_EXP 72
69796: PUSH
69797: LD_VAR 0 2
69801: ARRAY
69802: IFFALSE 69859
// begin tmp := mc_attack [ i ] [ 1 ] ;
69804: LD_ADDR_VAR 0 3
69808: PUSH
69809: LD_EXP 72
69813: PUSH
69814: LD_VAR 0 2
69818: ARRAY
69819: PUSH
69820: LD_INT 1
69822: ARRAY
69823: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
69824: LD_ADDR_EXP 72
69828: PUSH
69829: LD_EXP 72
69833: PPUSH
69834: LD_VAR 0 2
69838: PPUSH
69839: EMPTY
69840: PPUSH
69841: CALL_OW 1
69845: ST_TO_ADDR
// Attack ( tmp ) ;
69846: LD_VAR 0 3
69850: PPUSH
69851: CALL 46648 0 1
// exit ;
69855: POP
69856: POP
69857: GO 69863
// end ; end ;
69859: GO 69789
69861: POP
69862: POP
// end ;
69863: LD_VAR 0 1
69867: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
69868: LD_INT 0
69870: PPUSH
69871: PPUSH
69872: PPUSH
69873: PPUSH
69874: PPUSH
69875: PPUSH
69876: PPUSH
// if not mc_bases then
69877: LD_EXP 52
69881: NOT
69882: IFFALSE 69886
// exit ;
69884: GO 70468
// for i = 1 to mc_bases do
69886: LD_ADDR_VAR 0 2
69890: PUSH
69891: DOUBLE
69892: LD_INT 1
69894: DEC
69895: ST_TO_ADDR
69896: LD_EXP 52
69900: PUSH
69901: FOR_TO
69902: IFFALSE 70466
// begin if not mc_bases [ i ] then
69904: LD_EXP 52
69908: PUSH
69909: LD_VAR 0 2
69913: ARRAY
69914: NOT
69915: IFFALSE 69919
// continue ;
69917: GO 69901
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
69919: LD_ADDR_VAR 0 7
69923: PUSH
69924: LD_EXP 52
69928: PUSH
69929: LD_VAR 0 2
69933: ARRAY
69934: PUSH
69935: LD_INT 1
69937: ARRAY
69938: PPUSH
69939: CALL 15007 0 1
69943: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
69944: LD_ADDR_EXP 75
69948: PUSH
69949: LD_EXP 75
69953: PPUSH
69954: LD_VAR 0 2
69958: PPUSH
69959: LD_EXP 52
69963: PUSH
69964: LD_VAR 0 2
69968: ARRAY
69969: PUSH
69970: LD_INT 1
69972: ARRAY
69973: PPUSH
69974: CALL_OW 255
69978: PPUSH
69979: LD_EXP 77
69983: PUSH
69984: LD_VAR 0 2
69988: ARRAY
69989: PPUSH
69990: CALL 12710 0 2
69994: PPUSH
69995: CALL_OW 1
69999: ST_TO_ADDR
// if not mc_scan [ i ] then
70000: LD_EXP 75
70004: PUSH
70005: LD_VAR 0 2
70009: ARRAY
70010: NOT
70011: IFFALSE 70166
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70013: LD_ADDR_VAR 0 4
70017: PUSH
70018: LD_EXP 52
70022: PUSH
70023: LD_VAR 0 2
70027: ARRAY
70028: PPUSH
70029: LD_INT 2
70031: PUSH
70032: LD_INT 25
70034: PUSH
70035: LD_INT 5
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 25
70044: PUSH
70045: LD_INT 8
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 25
70054: PUSH
70055: LD_INT 9
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: PPUSH
70068: CALL_OW 72
70072: ST_TO_ADDR
// if not tmp then
70073: LD_VAR 0 4
70077: NOT
70078: IFFALSE 70082
// continue ;
70080: GO 69901
// for j in tmp do
70082: LD_ADDR_VAR 0 3
70086: PUSH
70087: LD_VAR 0 4
70091: PUSH
70092: FOR_IN
70093: IFFALSE 70164
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70095: LD_VAR 0 3
70099: PPUSH
70100: CALL_OW 310
70104: PPUSH
70105: CALL_OW 266
70109: PUSH
70110: LD_INT 5
70112: EQUAL
70113: PUSH
70114: LD_VAR 0 3
70118: PPUSH
70119: CALL_OW 257
70123: PUSH
70124: LD_INT 1
70126: EQUAL
70127: AND
70128: PUSH
70129: LD_VAR 0 3
70133: PPUSH
70134: CALL_OW 459
70138: NOT
70139: AND
70140: PUSH
70141: LD_VAR 0 7
70145: AND
70146: IFFALSE 70162
// ComChangeProfession ( j , class ) ;
70148: LD_VAR 0 3
70152: PPUSH
70153: LD_VAR 0 7
70157: PPUSH
70158: CALL_OW 123
70162: GO 70092
70164: POP
70165: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
70166: LD_EXP 75
70170: PUSH
70171: LD_VAR 0 2
70175: ARRAY
70176: PUSH
70177: LD_EXP 74
70181: PUSH
70182: LD_VAR 0 2
70186: ARRAY
70187: NOT
70188: AND
70189: PUSH
70190: LD_EXP 52
70194: PUSH
70195: LD_VAR 0 2
70199: ARRAY
70200: PPUSH
70201: LD_INT 30
70203: PUSH
70204: LD_INT 32
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PPUSH
70211: CALL_OW 72
70215: NOT
70216: AND
70217: PUSH
70218: LD_EXP 52
70222: PUSH
70223: LD_VAR 0 2
70227: ARRAY
70228: PPUSH
70229: LD_INT 2
70231: PUSH
70232: LD_INT 30
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 30
70244: PUSH
70245: LD_INT 5
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: PPUSH
70257: CALL_OW 72
70261: NOT
70262: AND
70263: IFFALSE 70395
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70265: LD_ADDR_VAR 0 4
70269: PUSH
70270: LD_EXP 52
70274: PUSH
70275: LD_VAR 0 2
70279: ARRAY
70280: PPUSH
70281: LD_INT 2
70283: PUSH
70284: LD_INT 25
70286: PUSH
70287: LD_INT 1
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 25
70296: PUSH
70297: LD_INT 5
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 25
70306: PUSH
70307: LD_INT 8
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 25
70316: PUSH
70317: LD_INT 9
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: PPUSH
70331: CALL_OW 72
70335: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
70336: LD_ADDR_VAR 0 4
70340: PUSH
70341: LD_VAR 0 4
70345: PUSH
70346: LD_VAR 0 4
70350: PPUSH
70351: LD_INT 18
70353: PPUSH
70354: CALL 51431 0 2
70358: DIFF
70359: ST_TO_ADDR
// if tmp then
70360: LD_VAR 0 4
70364: IFFALSE 70395
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
70366: LD_VAR 0 2
70370: PPUSH
70371: LD_VAR 0 4
70375: PPUSH
70376: LD_EXP 77
70380: PUSH
70381: LD_VAR 0 2
70385: ARRAY
70386: PPUSH
70387: CALL 12745 0 3
// exit ;
70391: POP
70392: POP
70393: GO 70468
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
70395: LD_EXP 75
70399: PUSH
70400: LD_VAR 0 2
70404: ARRAY
70405: PUSH
70406: LD_EXP 74
70410: PUSH
70411: LD_VAR 0 2
70415: ARRAY
70416: AND
70417: IFFALSE 70464
// begin tmp := mc_defender [ i ] ;
70419: LD_ADDR_VAR 0 4
70423: PUSH
70424: LD_EXP 74
70428: PUSH
70429: LD_VAR 0 2
70433: ARRAY
70434: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70435: LD_VAR 0 2
70439: PPUSH
70440: LD_VAR 0 4
70444: PPUSH
70445: LD_EXP 75
70449: PUSH
70450: LD_VAR 0 2
70454: ARRAY
70455: PPUSH
70456: CALL 13306 0 3
// exit ;
70460: POP
70461: POP
70462: GO 70468
// end ; end ;
70464: GO 69901
70466: POP
70467: POP
// end ;
70468: LD_VAR 0 1
70472: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
70473: LD_INT 0
70475: PPUSH
70476: PPUSH
70477: PPUSH
70478: PPUSH
70479: PPUSH
70480: PPUSH
70481: PPUSH
70482: PPUSH
70483: PPUSH
70484: PPUSH
70485: PPUSH
// if not mc_bases then
70486: LD_EXP 52
70490: NOT
70491: IFFALSE 70495
// exit ;
70493: GO 71582
// for i = 1 to mc_bases do
70495: LD_ADDR_VAR 0 2
70499: PUSH
70500: DOUBLE
70501: LD_INT 1
70503: DEC
70504: ST_TO_ADDR
70505: LD_EXP 52
70509: PUSH
70510: FOR_TO
70511: IFFALSE 71580
// begin tmp := mc_lab [ i ] ;
70513: LD_ADDR_VAR 0 6
70517: PUSH
70518: LD_EXP 85
70522: PUSH
70523: LD_VAR 0 2
70527: ARRAY
70528: ST_TO_ADDR
// if not tmp then
70529: LD_VAR 0 6
70533: NOT
70534: IFFALSE 70538
// continue ;
70536: GO 70510
// idle_lab := 0 ;
70538: LD_ADDR_VAR 0 11
70542: PUSH
70543: LD_INT 0
70545: ST_TO_ADDR
// for j in tmp do
70546: LD_ADDR_VAR 0 3
70550: PUSH
70551: LD_VAR 0 6
70555: PUSH
70556: FOR_IN
70557: IFFALSE 71576
// begin researching := false ;
70559: LD_ADDR_VAR 0 10
70563: PUSH
70564: LD_INT 0
70566: ST_TO_ADDR
// side := GetSide ( j ) ;
70567: LD_ADDR_VAR 0 4
70571: PUSH
70572: LD_VAR 0 3
70576: PPUSH
70577: CALL_OW 255
70581: ST_TO_ADDR
// if not mc_tech [ side ] then
70582: LD_EXP 79
70586: PUSH
70587: LD_VAR 0 4
70591: ARRAY
70592: NOT
70593: IFFALSE 70597
// continue ;
70595: GO 70556
// if BuildingStatus ( j ) = bs_idle then
70597: LD_VAR 0 3
70601: PPUSH
70602: CALL_OW 461
70606: PUSH
70607: LD_INT 2
70609: EQUAL
70610: IFFALSE 70798
// begin if idle_lab and UnitsInside ( j ) < 6 then
70612: LD_VAR 0 11
70616: PUSH
70617: LD_VAR 0 3
70621: PPUSH
70622: CALL_OW 313
70626: PUSH
70627: LD_INT 6
70629: LESS
70630: AND
70631: IFFALSE 70702
// begin tmp2 := UnitsInside ( idle_lab ) ;
70633: LD_ADDR_VAR 0 9
70637: PUSH
70638: LD_VAR 0 11
70642: PPUSH
70643: CALL_OW 313
70647: ST_TO_ADDR
// if tmp2 then
70648: LD_VAR 0 9
70652: IFFALSE 70694
// for x in tmp2 do
70654: LD_ADDR_VAR 0 7
70658: PUSH
70659: LD_VAR 0 9
70663: PUSH
70664: FOR_IN
70665: IFFALSE 70692
// begin ComExitBuilding ( x ) ;
70667: LD_VAR 0 7
70671: PPUSH
70672: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70676: LD_VAR 0 7
70680: PPUSH
70681: LD_VAR 0 3
70685: PPUSH
70686: CALL_OW 180
// end ;
70690: GO 70664
70692: POP
70693: POP
// idle_lab := 0 ;
70694: LD_ADDR_VAR 0 11
70698: PUSH
70699: LD_INT 0
70701: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
70702: LD_ADDR_VAR 0 5
70706: PUSH
70707: LD_EXP 79
70711: PUSH
70712: LD_VAR 0 4
70716: ARRAY
70717: PUSH
70718: FOR_IN
70719: IFFALSE 70779
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70721: LD_VAR 0 3
70725: PPUSH
70726: LD_VAR 0 5
70730: PPUSH
70731: CALL_OW 430
70735: PUSH
70736: LD_VAR 0 4
70740: PPUSH
70741: LD_VAR 0 5
70745: PPUSH
70746: CALL 11815 0 2
70750: AND
70751: IFFALSE 70777
// begin researching := true ;
70753: LD_ADDR_VAR 0 10
70757: PUSH
70758: LD_INT 1
70760: ST_TO_ADDR
// ComResearch ( j , t ) ;
70761: LD_VAR 0 3
70765: PPUSH
70766: LD_VAR 0 5
70770: PPUSH
70771: CALL_OW 124
// break ;
70775: GO 70779
// end ;
70777: GO 70718
70779: POP
70780: POP
// if not researching then
70781: LD_VAR 0 10
70785: NOT
70786: IFFALSE 70798
// idle_lab := j ;
70788: LD_ADDR_VAR 0 11
70792: PUSH
70793: LD_VAR 0 3
70797: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
70798: LD_VAR 0 3
70802: PPUSH
70803: CALL_OW 461
70807: PUSH
70808: LD_INT 10
70810: EQUAL
70811: IFFALSE 71399
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70813: LD_EXP 81
70817: PUSH
70818: LD_VAR 0 2
70822: ARRAY
70823: NOT
70824: PUSH
70825: LD_EXP 82
70829: PUSH
70830: LD_VAR 0 2
70834: ARRAY
70835: NOT
70836: AND
70837: PUSH
70838: LD_EXP 79
70842: PUSH
70843: LD_VAR 0 4
70847: ARRAY
70848: PUSH
70849: LD_INT 1
70851: GREATER
70852: AND
70853: IFFALSE 70984
// begin ComCancel ( j ) ;
70855: LD_VAR 0 3
70859: PPUSH
70860: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
70864: LD_ADDR_EXP 79
70868: PUSH
70869: LD_EXP 79
70873: PPUSH
70874: LD_VAR 0 4
70878: PPUSH
70879: LD_EXP 79
70883: PUSH
70884: LD_VAR 0 4
70888: ARRAY
70889: PPUSH
70890: LD_EXP 79
70894: PUSH
70895: LD_VAR 0 4
70899: ARRAY
70900: PUSH
70901: LD_INT 1
70903: MINUS
70904: PPUSH
70905: LD_EXP 79
70909: PUSH
70910: LD_VAR 0 4
70914: ARRAY
70915: PPUSH
70916: LD_INT 0
70918: PPUSH
70919: CALL 17589 0 4
70923: PPUSH
70924: CALL_OW 1
70928: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
70929: LD_ADDR_EXP 79
70933: PUSH
70934: LD_EXP 79
70938: PPUSH
70939: LD_VAR 0 4
70943: PPUSH
70944: LD_EXP 79
70948: PUSH
70949: LD_VAR 0 4
70953: ARRAY
70954: PPUSH
70955: LD_EXP 79
70959: PUSH
70960: LD_VAR 0 4
70964: ARRAY
70965: PPUSH
70966: LD_INT 1
70968: PPUSH
70969: LD_INT 0
70971: PPUSH
70972: CALL 17589 0 4
70976: PPUSH
70977: CALL_OW 1
70981: ST_TO_ADDR
// continue ;
70982: GO 70556
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
70984: LD_EXP 81
70988: PUSH
70989: LD_VAR 0 2
70993: ARRAY
70994: PUSH
70995: LD_EXP 82
70999: PUSH
71000: LD_VAR 0 2
71004: ARRAY
71005: NOT
71006: AND
71007: IFFALSE 71134
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
71009: LD_ADDR_EXP 82
71013: PUSH
71014: LD_EXP 82
71018: PPUSH
71019: LD_VAR 0 2
71023: PUSH
71024: LD_EXP 82
71028: PUSH
71029: LD_VAR 0 2
71033: ARRAY
71034: PUSH
71035: LD_INT 1
71037: PLUS
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PPUSH
71043: LD_EXP 81
71047: PUSH
71048: LD_VAR 0 2
71052: ARRAY
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: PPUSH
71058: CALL 18171 0 3
71062: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
71063: LD_EXP 81
71067: PUSH
71068: LD_VAR 0 2
71072: ARRAY
71073: PUSH
71074: LD_INT 1
71076: ARRAY
71077: PPUSH
71078: LD_INT 112
71080: PPUSH
71081: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
71085: LD_ADDR_VAR 0 9
71089: PUSH
71090: LD_EXP 81
71094: PUSH
71095: LD_VAR 0 2
71099: ARRAY
71100: PPUSH
71101: LD_INT 1
71103: PPUSH
71104: CALL_OW 3
71108: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
71109: LD_ADDR_EXP 81
71113: PUSH
71114: LD_EXP 81
71118: PPUSH
71119: LD_VAR 0 2
71123: PPUSH
71124: LD_VAR 0 9
71128: PPUSH
71129: CALL_OW 1
71133: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
71134: LD_EXP 81
71138: PUSH
71139: LD_VAR 0 2
71143: ARRAY
71144: PUSH
71145: LD_EXP 82
71149: PUSH
71150: LD_VAR 0 2
71154: ARRAY
71155: AND
71156: PUSH
71157: LD_EXP 82
71161: PUSH
71162: LD_VAR 0 2
71166: ARRAY
71167: PUSH
71168: LD_INT 1
71170: ARRAY
71171: PPUSH
71172: CALL_OW 310
71176: NOT
71177: AND
71178: PUSH
71179: LD_VAR 0 3
71183: PPUSH
71184: CALL_OW 313
71188: PUSH
71189: LD_INT 6
71191: EQUAL
71192: AND
71193: IFFALSE 71249
// begin tmp2 := UnitsInside ( j ) ;
71195: LD_ADDR_VAR 0 9
71199: PUSH
71200: LD_VAR 0 3
71204: PPUSH
71205: CALL_OW 313
71209: ST_TO_ADDR
// if tmp2 = 6 then
71210: LD_VAR 0 9
71214: PUSH
71215: LD_INT 6
71217: EQUAL
71218: IFFALSE 71249
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71220: LD_VAR 0 9
71224: PUSH
71225: LD_INT 1
71227: ARRAY
71228: PPUSH
71229: LD_INT 112
71231: PPUSH
71232: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71236: LD_VAR 0 9
71240: PUSH
71241: LD_INT 1
71243: ARRAY
71244: PPUSH
71245: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71249: LD_EXP 82
71253: PUSH
71254: LD_VAR 0 2
71258: ARRAY
71259: PUSH
71260: LD_EXP 82
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: PUSH
71271: LD_INT 1
71273: ARRAY
71274: PPUSH
71275: CALL_OW 314
71279: NOT
71280: AND
71281: PUSH
71282: LD_EXP 82
71286: PUSH
71287: LD_VAR 0 2
71291: ARRAY
71292: PUSH
71293: LD_INT 1
71295: ARRAY
71296: PPUSH
71297: CALL_OW 310
71301: NOT
71302: AND
71303: IFFALSE 71329
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71305: LD_EXP 82
71309: PUSH
71310: LD_VAR 0 2
71314: ARRAY
71315: PUSH
71316: LD_INT 1
71318: ARRAY
71319: PPUSH
71320: LD_VAR 0 3
71324: PPUSH
71325: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71329: LD_EXP 82
71333: PUSH
71334: LD_VAR 0 2
71338: ARRAY
71339: PUSH
71340: LD_INT 1
71342: ARRAY
71343: PPUSH
71344: CALL_OW 310
71348: PUSH
71349: LD_EXP 82
71353: PUSH
71354: LD_VAR 0 2
71358: ARRAY
71359: PUSH
71360: LD_INT 1
71362: ARRAY
71363: PPUSH
71364: CALL_OW 310
71368: PPUSH
71369: CALL_OW 461
71373: PUSH
71374: LD_INT 3
71376: NONEQUAL
71377: AND
71378: IFFALSE 71399
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71380: LD_EXP 82
71384: PUSH
71385: LD_VAR 0 2
71389: ARRAY
71390: PUSH
71391: LD_INT 1
71393: ARRAY
71394: PPUSH
71395: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71399: LD_VAR 0 3
71403: PPUSH
71404: CALL_OW 461
71408: PUSH
71409: LD_INT 6
71411: EQUAL
71412: PUSH
71413: LD_VAR 0 6
71417: PUSH
71418: LD_INT 1
71420: GREATER
71421: AND
71422: IFFALSE 71574
// begin sci := [ ] ;
71424: LD_ADDR_VAR 0 8
71428: PUSH
71429: EMPTY
71430: ST_TO_ADDR
// for x in ( tmp diff j ) do
71431: LD_ADDR_VAR 0 7
71435: PUSH
71436: LD_VAR 0 6
71440: PUSH
71441: LD_VAR 0 3
71445: DIFF
71446: PUSH
71447: FOR_IN
71448: IFFALSE 71500
// begin if sci = 6 then
71450: LD_VAR 0 8
71454: PUSH
71455: LD_INT 6
71457: EQUAL
71458: IFFALSE 71462
// break ;
71460: GO 71500
// if BuildingStatus ( x ) = bs_idle then
71462: LD_VAR 0 7
71466: PPUSH
71467: CALL_OW 461
71471: PUSH
71472: LD_INT 2
71474: EQUAL
71475: IFFALSE 71498
// sci := sci ^ UnitsInside ( x ) ;
71477: LD_ADDR_VAR 0 8
71481: PUSH
71482: LD_VAR 0 8
71486: PUSH
71487: LD_VAR 0 7
71491: PPUSH
71492: CALL_OW 313
71496: ADD
71497: ST_TO_ADDR
// end ;
71498: GO 71447
71500: POP
71501: POP
// if not sci then
71502: LD_VAR 0 8
71506: NOT
71507: IFFALSE 71511
// continue ;
71509: GO 70556
// for x in sci do
71511: LD_ADDR_VAR 0 7
71515: PUSH
71516: LD_VAR 0 8
71520: PUSH
71521: FOR_IN
71522: IFFALSE 71572
// if IsInUnit ( x ) and not HasTask ( x ) then
71524: LD_VAR 0 7
71528: PPUSH
71529: CALL_OW 310
71533: PUSH
71534: LD_VAR 0 7
71538: PPUSH
71539: CALL_OW 314
71543: NOT
71544: AND
71545: IFFALSE 71570
// begin ComExitBuilding ( x ) ;
71547: LD_VAR 0 7
71551: PPUSH
71552: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71556: LD_VAR 0 7
71560: PPUSH
71561: LD_VAR 0 3
71565: PPUSH
71566: CALL_OW 180
// end ;
71570: GO 71521
71572: POP
71573: POP
// end ; end ;
71574: GO 70556
71576: POP
71577: POP
// end ;
71578: GO 70510
71580: POP
71581: POP
// end ;
71582: LD_VAR 0 1
71586: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
71587: LD_INT 0
71589: PPUSH
71590: PPUSH
// if not mc_bases then
71591: LD_EXP 52
71595: NOT
71596: IFFALSE 71600
// exit ;
71598: GO 71681
// for i = 1 to mc_bases do
71600: LD_ADDR_VAR 0 2
71604: PUSH
71605: DOUBLE
71606: LD_INT 1
71608: DEC
71609: ST_TO_ADDR
71610: LD_EXP 52
71614: PUSH
71615: FOR_TO
71616: IFFALSE 71679
// if mc_mines [ i ] and mc_miners [ i ] then
71618: LD_EXP 65
71622: PUSH
71623: LD_VAR 0 2
71627: ARRAY
71628: PUSH
71629: LD_EXP 66
71633: PUSH
71634: LD_VAR 0 2
71638: ARRAY
71639: AND
71640: IFFALSE 71677
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
71642: LD_EXP 66
71646: PUSH
71647: LD_VAR 0 2
71651: ARRAY
71652: PUSH
71653: LD_INT 1
71655: ARRAY
71656: PPUSH
71657: CALL_OW 255
71661: PPUSH
71662: LD_EXP 65
71666: PUSH
71667: LD_VAR 0 2
71671: ARRAY
71672: PPUSH
71673: CALL 15160 0 2
71677: GO 71615
71679: POP
71680: POP
// end ;
71681: LD_VAR 0 1
71685: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
71690: PPUSH
71691: PPUSH
71692: PPUSH
71693: PPUSH
71694: PPUSH
71695: PPUSH
// if not mc_bases or not mc_parking then
71696: LD_EXP 52
71700: NOT
71701: PUSH
71702: LD_EXP 76
71706: NOT
71707: OR
71708: IFFALSE 71712
// exit ;
71710: GO 72411
// for i = 1 to mc_bases do
71712: LD_ADDR_VAR 0 2
71716: PUSH
71717: DOUBLE
71718: LD_INT 1
71720: DEC
71721: ST_TO_ADDR
71722: LD_EXP 52
71726: PUSH
71727: FOR_TO
71728: IFFALSE 72409
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71730: LD_EXP 52
71734: PUSH
71735: LD_VAR 0 2
71739: ARRAY
71740: NOT
71741: PUSH
71742: LD_EXP 76
71746: PUSH
71747: LD_VAR 0 2
71751: ARRAY
71752: NOT
71753: OR
71754: IFFALSE 71758
// continue ;
71756: GO 71727
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71758: LD_ADDR_VAR 0 5
71762: PUSH
71763: LD_EXP 52
71767: PUSH
71768: LD_VAR 0 2
71772: ARRAY
71773: PUSH
71774: LD_INT 1
71776: ARRAY
71777: PPUSH
71778: CALL_OW 255
71782: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71783: LD_ADDR_VAR 0 6
71787: PUSH
71788: LD_EXP 52
71792: PUSH
71793: LD_VAR 0 2
71797: ARRAY
71798: PPUSH
71799: LD_INT 30
71801: PUSH
71802: LD_INT 3
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PPUSH
71809: CALL_OW 72
71813: ST_TO_ADDR
// if not fac then
71814: LD_VAR 0 6
71818: NOT
71819: IFFALSE 71870
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71821: LD_ADDR_VAR 0 6
71825: PUSH
71826: LD_EXP 52
71830: PUSH
71831: LD_VAR 0 2
71835: ARRAY
71836: PPUSH
71837: LD_INT 2
71839: PUSH
71840: LD_INT 30
71842: PUSH
71843: LD_INT 0
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 30
71852: PUSH
71853: LD_INT 1
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: PPUSH
71865: CALL_OW 72
71869: ST_TO_ADDR
// if not fac then
71870: LD_VAR 0 6
71874: NOT
71875: IFFALSE 71879
// continue ;
71877: GO 71727
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71879: LD_ADDR_VAR 0 7
71883: PUSH
71884: LD_EXP 76
71888: PUSH
71889: LD_VAR 0 2
71893: ARRAY
71894: PPUSH
71895: LD_INT 22
71897: PUSH
71898: LD_VAR 0 5
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 21
71909: PUSH
71910: LD_INT 2
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 3
71919: PUSH
71920: LD_INT 24
71922: PUSH
71923: LD_INT 1000
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: LIST
71938: PPUSH
71939: CALL_OW 70
71943: ST_TO_ADDR
// for j in fac do
71944: LD_ADDR_VAR 0 3
71948: PUSH
71949: LD_VAR 0 6
71953: PUSH
71954: FOR_IN
71955: IFFALSE 72036
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71957: LD_ADDR_VAR 0 7
71961: PUSH
71962: LD_VAR 0 7
71966: PUSH
71967: LD_INT 22
71969: PUSH
71970: LD_VAR 0 5
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 91
71981: PUSH
71982: LD_VAR 0 3
71986: PUSH
71987: LD_INT 15
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 21
71997: PUSH
71998: LD_INT 2
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: LD_INT 24
72010: PUSH
72011: LD_INT 1000
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: PPUSH
72028: CALL_OW 69
72032: UNION
72033: ST_TO_ADDR
72034: GO 71954
72036: POP
72037: POP
// if not vehs then
72038: LD_VAR 0 7
72042: NOT
72043: IFFALSE 72069
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72045: LD_ADDR_EXP 64
72049: PUSH
72050: LD_EXP 64
72054: PPUSH
72055: LD_VAR 0 2
72059: PPUSH
72060: EMPTY
72061: PPUSH
72062: CALL_OW 1
72066: ST_TO_ADDR
// continue ;
72067: GO 71727
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72069: LD_ADDR_VAR 0 8
72073: PUSH
72074: LD_EXP 52
72078: PUSH
72079: LD_VAR 0 2
72083: ARRAY
72084: PPUSH
72085: LD_INT 30
72087: PUSH
72088: LD_INT 3
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PPUSH
72095: CALL_OW 72
72099: ST_TO_ADDR
// if tmp then
72100: LD_VAR 0 8
72104: IFFALSE 72207
// begin for j in tmp do
72106: LD_ADDR_VAR 0 3
72110: PUSH
72111: LD_VAR 0 8
72115: PUSH
72116: FOR_IN
72117: IFFALSE 72205
// for k in UnitsInside ( j ) do
72119: LD_ADDR_VAR 0 4
72123: PUSH
72124: LD_VAR 0 3
72128: PPUSH
72129: CALL_OW 313
72133: PUSH
72134: FOR_IN
72135: IFFALSE 72201
// if k then
72137: LD_VAR 0 4
72141: IFFALSE 72199
// if not k in mc_repair_vehicle [ i ] then
72143: LD_VAR 0 4
72147: PUSH
72148: LD_EXP 64
72152: PUSH
72153: LD_VAR 0 2
72157: ARRAY
72158: IN
72159: NOT
72160: IFFALSE 72199
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
72162: LD_ADDR_EXP 64
72166: PUSH
72167: LD_EXP 64
72171: PPUSH
72172: LD_VAR 0 2
72176: PPUSH
72177: LD_EXP 64
72181: PUSH
72182: LD_VAR 0 2
72186: ARRAY
72187: PUSH
72188: LD_VAR 0 4
72192: UNION
72193: PPUSH
72194: CALL_OW 1
72198: ST_TO_ADDR
72199: GO 72134
72201: POP
72202: POP
72203: GO 72116
72205: POP
72206: POP
// end ; if not mc_repair_vehicle [ i ] then
72207: LD_EXP 64
72211: PUSH
72212: LD_VAR 0 2
72216: ARRAY
72217: NOT
72218: IFFALSE 72222
// continue ;
72220: GO 71727
// for j in mc_repair_vehicle [ i ] do
72222: LD_ADDR_VAR 0 3
72226: PUSH
72227: LD_EXP 64
72231: PUSH
72232: LD_VAR 0 2
72236: ARRAY
72237: PUSH
72238: FOR_IN
72239: IFFALSE 72405
// begin if GetClass ( j ) <> 3 then
72241: LD_VAR 0 3
72245: PPUSH
72246: CALL_OW 257
72250: PUSH
72251: LD_INT 3
72253: NONEQUAL
72254: IFFALSE 72295
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
72256: LD_ADDR_EXP 64
72260: PUSH
72261: LD_EXP 64
72265: PPUSH
72266: LD_VAR 0 2
72270: PPUSH
72271: LD_EXP 64
72275: PUSH
72276: LD_VAR 0 2
72280: ARRAY
72281: PUSH
72282: LD_VAR 0 3
72286: DIFF
72287: PPUSH
72288: CALL_OW 1
72292: ST_TO_ADDR
// continue ;
72293: GO 72238
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72295: LD_VAR 0 3
72299: PPUSH
72300: CALL_OW 311
72304: NOT
72305: PUSH
72306: LD_VAR 0 3
72310: PUSH
72311: LD_EXP 55
72315: PUSH
72316: LD_VAR 0 2
72320: ARRAY
72321: PUSH
72322: LD_INT 1
72324: ARRAY
72325: IN
72326: NOT
72327: AND
72328: PUSH
72329: LD_VAR 0 3
72333: PUSH
72334: LD_EXP 55
72338: PUSH
72339: LD_VAR 0 2
72343: ARRAY
72344: PUSH
72345: LD_INT 2
72347: ARRAY
72348: IN
72349: NOT
72350: AND
72351: IFFALSE 72403
// begin if IsInUnit ( j ) then
72353: LD_VAR 0 3
72357: PPUSH
72358: CALL_OW 310
72362: IFFALSE 72373
// ComExitBuilding ( j ) ;
72364: LD_VAR 0 3
72368: PPUSH
72369: CALL_OW 122
// if not HasTask ( j ) then
72373: LD_VAR 0 3
72377: PPUSH
72378: CALL_OW 314
72382: NOT
72383: IFFALSE 72403
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72385: LD_VAR 0 3
72389: PPUSH
72390: LD_VAR 0 7
72394: PUSH
72395: LD_INT 1
72397: ARRAY
72398: PPUSH
72399: CALL_OW 189
// end ; end ;
72403: GO 72238
72405: POP
72406: POP
// end ;
72407: GO 71727
72409: POP
72410: POP
// end ;
72411: LD_VAR 0 1
72415: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72416: LD_INT 0
72418: PPUSH
72419: PPUSH
72420: PPUSH
72421: PPUSH
72422: PPUSH
72423: PPUSH
72424: PPUSH
72425: PPUSH
72426: PPUSH
72427: PPUSH
72428: PPUSH
// if not mc_bases then
72429: LD_EXP 52
72433: NOT
72434: IFFALSE 72438
// exit ;
72436: GO 73240
// for i = 1 to mc_bases do
72438: LD_ADDR_VAR 0 2
72442: PUSH
72443: DOUBLE
72444: LD_INT 1
72446: DEC
72447: ST_TO_ADDR
72448: LD_EXP 52
72452: PUSH
72453: FOR_TO
72454: IFFALSE 73238
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72456: LD_EXP 80
72460: PUSH
72461: LD_VAR 0 2
72465: ARRAY
72466: NOT
72467: PUSH
72468: LD_EXP 55
72472: PUSH
72473: LD_VAR 0 2
72477: ARRAY
72478: PUSH
72479: LD_INT 1
72481: ARRAY
72482: OR
72483: PUSH
72484: LD_EXP 55
72488: PUSH
72489: LD_VAR 0 2
72493: ARRAY
72494: PUSH
72495: LD_INT 2
72497: ARRAY
72498: OR
72499: PUSH
72500: LD_EXP 78
72504: PUSH
72505: LD_VAR 0 2
72509: ARRAY
72510: PPUSH
72511: LD_INT 1
72513: PPUSH
72514: CALL_OW 325
72518: NOT
72519: OR
72520: PUSH
72521: LD_EXP 75
72525: PUSH
72526: LD_VAR 0 2
72530: ARRAY
72531: OR
72532: IFFALSE 72536
// continue ;
72534: GO 72453
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72536: LD_ADDR_VAR 0 8
72540: PUSH
72541: LD_EXP 52
72545: PUSH
72546: LD_VAR 0 2
72550: ARRAY
72551: PPUSH
72552: LD_INT 25
72554: PUSH
72555: LD_INT 4
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 50
72564: PUSH
72565: EMPTY
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: PUSH
72571: LD_INT 60
72573: PUSH
72574: EMPTY
72575: LIST
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: PPUSH
72586: CALL_OW 72
72590: PUSH
72591: LD_EXP 56
72595: PUSH
72596: LD_VAR 0 2
72600: ARRAY
72601: DIFF
72602: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72603: LD_ADDR_VAR 0 9
72607: PUSH
72608: LD_EXP 52
72612: PUSH
72613: LD_VAR 0 2
72617: ARRAY
72618: PPUSH
72619: LD_INT 2
72621: PUSH
72622: LD_INT 30
72624: PUSH
72625: LD_INT 0
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 30
72634: PUSH
72635: LD_INT 1
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: PPUSH
72647: CALL_OW 72
72651: ST_TO_ADDR
// if not tmp or not dep then
72652: LD_VAR 0 8
72656: NOT
72657: PUSH
72658: LD_VAR 0 9
72662: NOT
72663: OR
72664: IFFALSE 72668
// continue ;
72666: GO 72453
// side := GetSide ( tmp [ 1 ] ) ;
72668: LD_ADDR_VAR 0 11
72672: PUSH
72673: LD_VAR 0 8
72677: PUSH
72678: LD_INT 1
72680: ARRAY
72681: PPUSH
72682: CALL_OW 255
72686: ST_TO_ADDR
// dep := dep [ 1 ] ;
72687: LD_ADDR_VAR 0 9
72691: PUSH
72692: LD_VAR 0 9
72696: PUSH
72697: LD_INT 1
72699: ARRAY
72700: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72701: LD_ADDR_VAR 0 7
72705: PUSH
72706: LD_EXP 80
72710: PUSH
72711: LD_VAR 0 2
72715: ARRAY
72716: PPUSH
72717: LD_INT 22
72719: PUSH
72720: LD_INT 0
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 25
72729: PUSH
72730: LD_INT 12
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PPUSH
72741: CALL_OW 70
72745: PUSH
72746: LD_INT 22
72748: PUSH
72749: LD_INT 0
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 25
72758: PUSH
72759: LD_INT 12
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 91
72768: PUSH
72769: LD_VAR 0 9
72773: PUSH
72774: LD_INT 20
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: PPUSH
72787: CALL_OW 69
72791: UNION
72792: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72793: LD_ADDR_VAR 0 10
72797: PUSH
72798: LD_EXP 80
72802: PUSH
72803: LD_VAR 0 2
72807: ARRAY
72808: PPUSH
72809: LD_INT 81
72811: PUSH
72812: LD_VAR 0 11
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PPUSH
72821: CALL_OW 70
72825: ST_TO_ADDR
// if not apes or danger_at_area then
72826: LD_VAR 0 7
72830: NOT
72831: PUSH
72832: LD_VAR 0 10
72836: OR
72837: IFFALSE 72887
// begin if mc_taming [ i ] then
72839: LD_EXP 83
72843: PUSH
72844: LD_VAR 0 2
72848: ARRAY
72849: IFFALSE 72885
// begin MC_Reset ( i , 121 ) ;
72851: LD_VAR 0 2
72855: PPUSH
72856: LD_INT 121
72858: PPUSH
72859: CALL 58218 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72863: LD_ADDR_EXP 83
72867: PUSH
72868: LD_EXP 83
72872: PPUSH
72873: LD_VAR 0 2
72877: PPUSH
72878: EMPTY
72879: PPUSH
72880: CALL_OW 1
72884: ST_TO_ADDR
// end ; continue ;
72885: GO 72453
// end ; for j in tmp do
72887: LD_ADDR_VAR 0 3
72891: PUSH
72892: LD_VAR 0 8
72896: PUSH
72897: FOR_IN
72898: IFFALSE 73234
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
72900: LD_VAR 0 3
72904: PUSH
72905: LD_EXP 83
72909: PUSH
72910: LD_VAR 0 2
72914: ARRAY
72915: IN
72916: NOT
72917: PUSH
72918: LD_EXP 83
72922: PUSH
72923: LD_VAR 0 2
72927: ARRAY
72928: PUSH
72929: LD_INT 3
72931: LESS
72932: AND
72933: IFFALSE 72991
// begin SetTag ( j , 121 ) ;
72935: LD_VAR 0 3
72939: PPUSH
72940: LD_INT 121
72942: PPUSH
72943: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
72947: LD_ADDR_EXP 83
72951: PUSH
72952: LD_EXP 83
72956: PPUSH
72957: LD_VAR 0 2
72961: PUSH
72962: LD_EXP 83
72966: PUSH
72967: LD_VAR 0 2
72971: ARRAY
72972: PUSH
72973: LD_INT 1
72975: PLUS
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PPUSH
72981: LD_VAR 0 3
72985: PPUSH
72986: CALL 18171 0 3
72990: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
72991: LD_VAR 0 3
72995: PUSH
72996: LD_EXP 83
73000: PUSH
73001: LD_VAR 0 2
73005: ARRAY
73006: IN
73007: IFFALSE 73232
// begin if GetClass ( j ) <> 4 then
73009: LD_VAR 0 3
73013: PPUSH
73014: CALL_OW 257
73018: PUSH
73019: LD_INT 4
73021: NONEQUAL
73022: IFFALSE 73075
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
73024: LD_ADDR_EXP 83
73028: PUSH
73029: LD_EXP 83
73033: PPUSH
73034: LD_VAR 0 2
73038: PPUSH
73039: LD_EXP 83
73043: PUSH
73044: LD_VAR 0 2
73048: ARRAY
73049: PUSH
73050: LD_VAR 0 3
73054: DIFF
73055: PPUSH
73056: CALL_OW 1
73060: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73061: LD_VAR 0 3
73065: PPUSH
73066: LD_INT 0
73068: PPUSH
73069: CALL_OW 109
// continue ;
73073: GO 72897
// end ; if IsInUnit ( j ) then
73075: LD_VAR 0 3
73079: PPUSH
73080: CALL_OW 310
73084: IFFALSE 73095
// ComExitBuilding ( j ) ;
73086: LD_VAR 0 3
73090: PPUSH
73091: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
73095: LD_ADDR_VAR 0 6
73099: PUSH
73100: LD_VAR 0 7
73104: PPUSH
73105: LD_VAR 0 3
73109: PPUSH
73110: CALL_OW 74
73114: ST_TO_ADDR
// if not ape then
73115: LD_VAR 0 6
73119: NOT
73120: IFFALSE 73124
// break ;
73122: GO 73234
// x := GetX ( ape ) ;
73124: LD_ADDR_VAR 0 4
73128: PUSH
73129: LD_VAR 0 6
73133: PPUSH
73134: CALL_OW 250
73138: ST_TO_ADDR
// y := GetY ( ape ) ;
73139: LD_ADDR_VAR 0 5
73143: PUSH
73144: LD_VAR 0 6
73148: PPUSH
73149: CALL_OW 251
73153: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73154: LD_VAR 0 4
73158: PPUSH
73159: LD_VAR 0 5
73163: PPUSH
73164: CALL_OW 488
73168: NOT
73169: PUSH
73170: LD_VAR 0 11
73174: PPUSH
73175: LD_VAR 0 4
73179: PPUSH
73180: LD_VAR 0 5
73184: PPUSH
73185: LD_INT 20
73187: PPUSH
73188: CALL 19067 0 4
73192: PUSH
73193: LD_INT 4
73195: ARRAY
73196: OR
73197: IFFALSE 73201
// break ;
73199: GO 73234
// if not HasTask ( j ) then
73201: LD_VAR 0 3
73205: PPUSH
73206: CALL_OW 314
73210: NOT
73211: IFFALSE 73232
// ComTameXY ( j , x , y ) ;
73213: LD_VAR 0 3
73217: PPUSH
73218: LD_VAR 0 4
73222: PPUSH
73223: LD_VAR 0 5
73227: PPUSH
73228: CALL_OW 131
// end ; end ;
73232: GO 72897
73234: POP
73235: POP
// end ;
73236: GO 72453
73238: POP
73239: POP
// end ;
73240: LD_VAR 0 1
73244: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
73245: LD_INT 0
73247: PPUSH
73248: PPUSH
73249: PPUSH
73250: PPUSH
73251: PPUSH
73252: PPUSH
73253: PPUSH
73254: PPUSH
// if not mc_bases then
73255: LD_EXP 52
73259: NOT
73260: IFFALSE 73264
// exit ;
73262: GO 73890
// for i = 1 to mc_bases do
73264: LD_ADDR_VAR 0 2
73268: PUSH
73269: DOUBLE
73270: LD_INT 1
73272: DEC
73273: ST_TO_ADDR
73274: LD_EXP 52
73278: PUSH
73279: FOR_TO
73280: IFFALSE 73888
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
73282: LD_EXP 81
73286: PUSH
73287: LD_VAR 0 2
73291: ARRAY
73292: NOT
73293: PUSH
73294: LD_EXP 81
73298: PUSH
73299: LD_VAR 0 2
73303: ARRAY
73304: PPUSH
73305: LD_INT 25
73307: PUSH
73308: LD_INT 12
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PPUSH
73315: CALL_OW 72
73319: NOT
73320: OR
73321: IFFALSE 73325
// continue ;
73323: GO 73279
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73325: LD_ADDR_VAR 0 5
73329: PUSH
73330: LD_EXP 81
73334: PUSH
73335: LD_VAR 0 2
73339: ARRAY
73340: PUSH
73341: LD_INT 1
73343: ARRAY
73344: PPUSH
73345: CALL_OW 255
73349: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73350: LD_VAR 0 5
73354: PPUSH
73355: LD_INT 2
73357: PPUSH
73358: CALL_OW 325
73362: IFFALSE 73615
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73364: LD_ADDR_VAR 0 4
73368: PUSH
73369: LD_EXP 81
73373: PUSH
73374: LD_VAR 0 2
73378: ARRAY
73379: PPUSH
73380: LD_INT 25
73382: PUSH
73383: LD_INT 16
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PPUSH
73390: CALL_OW 72
73394: ST_TO_ADDR
// if tmp < 6 then
73395: LD_VAR 0 4
73399: PUSH
73400: LD_INT 6
73402: LESS
73403: IFFALSE 73615
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73405: LD_ADDR_VAR 0 6
73409: PUSH
73410: LD_EXP 52
73414: PUSH
73415: LD_VAR 0 2
73419: ARRAY
73420: PPUSH
73421: LD_INT 2
73423: PUSH
73424: LD_INT 30
73426: PUSH
73427: LD_INT 0
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 30
73436: PUSH
73437: LD_INT 1
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: LIST
73448: PPUSH
73449: CALL_OW 72
73453: ST_TO_ADDR
// if depot then
73454: LD_VAR 0 6
73458: IFFALSE 73615
// begin selected := 0 ;
73460: LD_ADDR_VAR 0 7
73464: PUSH
73465: LD_INT 0
73467: ST_TO_ADDR
// for j in depot do
73468: LD_ADDR_VAR 0 3
73472: PUSH
73473: LD_VAR 0 6
73477: PUSH
73478: FOR_IN
73479: IFFALSE 73510
// begin if UnitsInside ( j ) < 6 then
73481: LD_VAR 0 3
73485: PPUSH
73486: CALL_OW 313
73490: PUSH
73491: LD_INT 6
73493: LESS
73494: IFFALSE 73508
// begin selected := j ;
73496: LD_ADDR_VAR 0 7
73500: PUSH
73501: LD_VAR 0 3
73505: ST_TO_ADDR
// break ;
73506: GO 73510
// end ; end ;
73508: GO 73478
73510: POP
73511: POP
// if selected then
73512: LD_VAR 0 7
73516: IFFALSE 73615
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73518: LD_ADDR_VAR 0 3
73522: PUSH
73523: LD_EXP 81
73527: PUSH
73528: LD_VAR 0 2
73532: ARRAY
73533: PPUSH
73534: LD_INT 25
73536: PUSH
73537: LD_INT 12
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PPUSH
73544: CALL_OW 72
73548: PUSH
73549: FOR_IN
73550: IFFALSE 73613
// if not HasTask ( j ) then
73552: LD_VAR 0 3
73556: PPUSH
73557: CALL_OW 314
73561: NOT
73562: IFFALSE 73611
// begin if not IsInUnit ( j ) then
73564: LD_VAR 0 3
73568: PPUSH
73569: CALL_OW 310
73573: NOT
73574: IFFALSE 73590
// ComEnterUnit ( j , selected ) ;
73576: LD_VAR 0 3
73580: PPUSH
73581: LD_VAR 0 7
73585: PPUSH
73586: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73590: LD_VAR 0 3
73594: PPUSH
73595: LD_INT 16
73597: PPUSH
73598: CALL_OW 183
// AddComExitBuilding ( j ) ;
73602: LD_VAR 0 3
73606: PPUSH
73607: CALL_OW 182
// end ;
73611: GO 73549
73613: POP
73614: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73615: LD_VAR 0 5
73619: PPUSH
73620: LD_INT 11
73622: PPUSH
73623: CALL_OW 325
73627: IFFALSE 73886
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73629: LD_ADDR_VAR 0 4
73633: PUSH
73634: LD_EXP 81
73638: PUSH
73639: LD_VAR 0 2
73643: ARRAY
73644: PPUSH
73645: LD_INT 25
73647: PUSH
73648: LD_INT 16
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PPUSH
73655: CALL_OW 72
73659: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73660: LD_VAR 0 4
73664: PUSH
73665: LD_INT 6
73667: GREATEREQUAL
73668: PUSH
73669: LD_VAR 0 5
73673: PPUSH
73674: LD_INT 2
73676: PPUSH
73677: CALL_OW 325
73681: NOT
73682: OR
73683: IFFALSE 73886
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73685: LD_ADDR_VAR 0 8
73689: PUSH
73690: LD_EXP 52
73694: PUSH
73695: LD_VAR 0 2
73699: ARRAY
73700: PPUSH
73701: LD_INT 2
73703: PUSH
73704: LD_INT 30
73706: PUSH
73707: LD_INT 4
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 30
73716: PUSH
73717: LD_INT 5
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: LIST
73728: PPUSH
73729: CALL_OW 72
73733: ST_TO_ADDR
// if barracks then
73734: LD_VAR 0 8
73738: IFFALSE 73886
// begin selected := 0 ;
73740: LD_ADDR_VAR 0 7
73744: PUSH
73745: LD_INT 0
73747: ST_TO_ADDR
// for j in barracks do
73748: LD_ADDR_VAR 0 3
73752: PUSH
73753: LD_VAR 0 8
73757: PUSH
73758: FOR_IN
73759: IFFALSE 73790
// begin if UnitsInside ( j ) < 6 then
73761: LD_VAR 0 3
73765: PPUSH
73766: CALL_OW 313
73770: PUSH
73771: LD_INT 6
73773: LESS
73774: IFFALSE 73788
// begin selected := j ;
73776: LD_ADDR_VAR 0 7
73780: PUSH
73781: LD_VAR 0 3
73785: ST_TO_ADDR
// break ;
73786: GO 73790
// end ; end ;
73788: GO 73758
73790: POP
73791: POP
// if selected then
73792: LD_VAR 0 7
73796: IFFALSE 73886
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73798: LD_ADDR_VAR 0 3
73802: PUSH
73803: LD_EXP 81
73807: PUSH
73808: LD_VAR 0 2
73812: ARRAY
73813: PPUSH
73814: LD_INT 25
73816: PUSH
73817: LD_INT 12
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PPUSH
73824: CALL_OW 72
73828: PUSH
73829: FOR_IN
73830: IFFALSE 73884
// if not IsInUnit ( j ) and not HasTask ( j ) then
73832: LD_VAR 0 3
73836: PPUSH
73837: CALL_OW 310
73841: NOT
73842: PUSH
73843: LD_VAR 0 3
73847: PPUSH
73848: CALL_OW 314
73852: NOT
73853: AND
73854: IFFALSE 73882
// begin ComEnterUnit ( j , selected ) ;
73856: LD_VAR 0 3
73860: PPUSH
73861: LD_VAR 0 7
73865: PPUSH
73866: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
73870: LD_VAR 0 3
73874: PPUSH
73875: LD_INT 15
73877: PPUSH
73878: CALL_OW 183
// end ;
73882: GO 73829
73884: POP
73885: POP
// end ; end ; end ; end ; end ;
73886: GO 73279
73888: POP
73889: POP
// end ;
73890: LD_VAR 0 1
73894: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
73895: LD_INT 0
73897: PPUSH
73898: PPUSH
73899: PPUSH
73900: PPUSH
// if not mc_bases then
73901: LD_EXP 52
73905: NOT
73906: IFFALSE 73910
// exit ;
73908: GO 74088
// for i = 1 to mc_bases do
73910: LD_ADDR_VAR 0 2
73914: PUSH
73915: DOUBLE
73916: LD_INT 1
73918: DEC
73919: ST_TO_ADDR
73920: LD_EXP 52
73924: PUSH
73925: FOR_TO
73926: IFFALSE 74086
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
73928: LD_ADDR_VAR 0 4
73932: PUSH
73933: LD_EXP 52
73937: PUSH
73938: LD_VAR 0 2
73942: ARRAY
73943: PPUSH
73944: LD_INT 25
73946: PUSH
73947: LD_INT 9
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PPUSH
73954: CALL_OW 72
73958: ST_TO_ADDR
// if not tmp then
73959: LD_VAR 0 4
73963: NOT
73964: IFFALSE 73968
// continue ;
73966: GO 73925
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
73968: LD_EXP 78
73972: PUSH
73973: LD_VAR 0 2
73977: ARRAY
73978: PPUSH
73979: LD_INT 29
73981: PPUSH
73982: CALL_OW 325
73986: NOT
73987: PUSH
73988: LD_EXP 78
73992: PUSH
73993: LD_VAR 0 2
73997: ARRAY
73998: PPUSH
73999: LD_INT 28
74001: PPUSH
74002: CALL_OW 325
74006: NOT
74007: AND
74008: IFFALSE 74012
// continue ;
74010: GO 73925
// for j in tmp do
74012: LD_ADDR_VAR 0 3
74016: PUSH
74017: LD_VAR 0 4
74021: PUSH
74022: FOR_IN
74023: IFFALSE 74082
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74025: LD_VAR 0 3
74029: PUSH
74030: LD_EXP 55
74034: PUSH
74035: LD_VAR 0 2
74039: ARRAY
74040: PUSH
74041: LD_INT 1
74043: ARRAY
74044: IN
74045: NOT
74046: PUSH
74047: LD_VAR 0 3
74051: PUSH
74052: LD_EXP 55
74056: PUSH
74057: LD_VAR 0 2
74061: ARRAY
74062: PUSH
74063: LD_INT 2
74065: ARRAY
74066: IN
74067: NOT
74068: AND
74069: IFFALSE 74080
// ComSpaceTimeShoot ( j ) ;
74071: LD_VAR 0 3
74075: PPUSH
74076: CALL 11906 0 1
74080: GO 74022
74082: POP
74083: POP
// end ;
74084: GO 73925
74086: POP
74087: POP
// end ;
74088: LD_VAR 0 1
74092: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
74093: LD_INT 0
74095: PPUSH
74096: PPUSH
74097: PPUSH
74098: PPUSH
74099: PPUSH
74100: PPUSH
74101: PPUSH
74102: PPUSH
74103: PPUSH
// if not mc_bases then
74104: LD_EXP 52
74108: NOT
74109: IFFALSE 74113
// exit ;
74111: GO 74735
// for i = 1 to mc_bases do
74113: LD_ADDR_VAR 0 2
74117: PUSH
74118: DOUBLE
74119: LD_INT 1
74121: DEC
74122: ST_TO_ADDR
74123: LD_EXP 52
74127: PUSH
74128: FOR_TO
74129: IFFALSE 74733
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
74131: LD_EXP 87
74135: PUSH
74136: LD_VAR 0 2
74140: ARRAY
74141: NOT
74142: PUSH
74143: LD_INT 38
74145: PPUSH
74146: LD_EXP 78
74150: PUSH
74151: LD_VAR 0 2
74155: ARRAY
74156: PPUSH
74157: CALL_OW 321
74161: PUSH
74162: LD_INT 2
74164: NONEQUAL
74165: OR
74166: IFFALSE 74170
// continue ;
74168: GO 74128
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
74170: LD_ADDR_VAR 0 8
74174: PUSH
74175: LD_EXP 52
74179: PUSH
74180: LD_VAR 0 2
74184: ARRAY
74185: PPUSH
74186: LD_INT 30
74188: PUSH
74189: LD_INT 34
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PPUSH
74196: CALL_OW 72
74200: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
74201: LD_ADDR_VAR 0 9
74205: PUSH
74206: LD_EXP 52
74210: PUSH
74211: LD_VAR 0 2
74215: ARRAY
74216: PPUSH
74217: LD_INT 25
74219: PUSH
74220: LD_INT 4
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PPUSH
74227: CALL_OW 72
74231: PPUSH
74232: LD_INT 0
74234: PPUSH
74235: CALL 51431 0 2
74239: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
74240: LD_VAR 0 9
74244: NOT
74245: PUSH
74246: LD_VAR 0 8
74250: NOT
74251: OR
74252: PUSH
74253: LD_EXP 52
74257: PUSH
74258: LD_VAR 0 2
74262: ARRAY
74263: PPUSH
74264: LD_INT 124
74266: PPUSH
74267: CALL 51431 0 2
74271: OR
74272: IFFALSE 74276
// continue ;
74274: GO 74128
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
74276: LD_EXP 88
74280: PUSH
74281: LD_VAR 0 2
74285: ARRAY
74286: PUSH
74287: LD_EXP 87
74291: PUSH
74292: LD_VAR 0 2
74296: ARRAY
74297: LESS
74298: PUSH
74299: LD_EXP 88
74303: PUSH
74304: LD_VAR 0 2
74308: ARRAY
74309: PUSH
74310: LD_VAR 0 8
74314: LESS
74315: AND
74316: IFFALSE 74731
// begin tmp := sci [ 1 ] ;
74318: LD_ADDR_VAR 0 7
74322: PUSH
74323: LD_VAR 0 9
74327: PUSH
74328: LD_INT 1
74330: ARRAY
74331: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
74332: LD_VAR 0 7
74336: PPUSH
74337: LD_INT 124
74339: PPUSH
74340: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
74344: LD_ADDR_VAR 0 3
74348: PUSH
74349: DOUBLE
74350: LD_EXP 87
74354: PUSH
74355: LD_VAR 0 2
74359: ARRAY
74360: INC
74361: ST_TO_ADDR
74362: LD_EXP 87
74366: PUSH
74367: LD_VAR 0 2
74371: ARRAY
74372: PUSH
74373: FOR_DOWNTO
74374: IFFALSE 74717
// begin if IsInUnit ( tmp ) then
74376: LD_VAR 0 7
74380: PPUSH
74381: CALL_OW 310
74385: IFFALSE 74396
// ComExitBuilding ( tmp ) ;
74387: LD_VAR 0 7
74391: PPUSH
74392: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
74396: LD_INT 35
74398: PPUSH
74399: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
74403: LD_VAR 0 7
74407: PPUSH
74408: CALL_OW 310
74412: NOT
74413: PUSH
74414: LD_VAR 0 7
74418: PPUSH
74419: CALL_OW 314
74423: NOT
74424: AND
74425: IFFALSE 74396
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
74427: LD_ADDR_VAR 0 6
74431: PUSH
74432: LD_VAR 0 7
74436: PPUSH
74437: CALL_OW 250
74441: PUSH
74442: LD_VAR 0 7
74446: PPUSH
74447: CALL_OW 251
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74456: LD_INT 35
74458: PPUSH
74459: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
74463: LD_ADDR_VAR 0 4
74467: PUSH
74468: LD_EXP 87
74472: PUSH
74473: LD_VAR 0 2
74477: ARRAY
74478: PUSH
74479: LD_VAR 0 3
74483: ARRAY
74484: PUSH
74485: LD_INT 1
74487: ARRAY
74488: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
74489: LD_ADDR_VAR 0 5
74493: PUSH
74494: LD_EXP 87
74498: PUSH
74499: LD_VAR 0 2
74503: ARRAY
74504: PUSH
74505: LD_VAR 0 3
74509: ARRAY
74510: PUSH
74511: LD_INT 2
74513: ARRAY
74514: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
74515: LD_VAR 0 7
74519: PPUSH
74520: LD_INT 10
74522: PPUSH
74523: CALL 20764 0 2
74527: PUSH
74528: LD_INT 4
74530: ARRAY
74531: IFFALSE 74569
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
74533: LD_VAR 0 7
74537: PPUSH
74538: LD_VAR 0 6
74542: PUSH
74543: LD_INT 1
74545: ARRAY
74546: PPUSH
74547: LD_VAR 0 6
74551: PUSH
74552: LD_INT 2
74554: ARRAY
74555: PPUSH
74556: CALL_OW 111
// wait ( 0 0$10 ) ;
74560: LD_INT 350
74562: PPUSH
74563: CALL_OW 67
// end else
74567: GO 74595
// begin ComMoveXY ( tmp , x , y ) ;
74569: LD_VAR 0 7
74573: PPUSH
74574: LD_VAR 0 4
74578: PPUSH
74579: LD_VAR 0 5
74583: PPUSH
74584: CALL_OW 111
// wait ( 0 0$3 ) ;
74588: LD_INT 105
74590: PPUSH
74591: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
74595: LD_VAR 0 7
74599: PPUSH
74600: LD_VAR 0 4
74604: PPUSH
74605: LD_VAR 0 5
74609: PPUSH
74610: CALL_OW 307
74614: IFFALSE 74456
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
74616: LD_VAR 0 7
74620: PPUSH
74621: LD_VAR 0 4
74625: PPUSH
74626: LD_VAR 0 5
74630: PPUSH
74631: LD_VAR 0 8
74635: PUSH
74636: LD_VAR 0 3
74640: ARRAY
74641: PPUSH
74642: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
74646: LD_INT 35
74648: PPUSH
74649: CALL_OW 67
// until not HasTask ( tmp ) ;
74653: LD_VAR 0 7
74657: PPUSH
74658: CALL_OW 314
74662: NOT
74663: IFFALSE 74646
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
74665: LD_ADDR_EXP 88
74669: PUSH
74670: LD_EXP 88
74674: PPUSH
74675: LD_VAR 0 2
74679: PUSH
74680: LD_EXP 88
74684: PUSH
74685: LD_VAR 0 2
74689: ARRAY
74690: PUSH
74691: LD_INT 1
74693: PLUS
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PPUSH
74699: LD_VAR 0 8
74703: PUSH
74704: LD_VAR 0 3
74708: ARRAY
74709: PPUSH
74710: CALL 18171 0 3
74714: ST_TO_ADDR
// end ;
74715: GO 74373
74717: POP
74718: POP
// MC_Reset ( i , 124 ) ;
74719: LD_VAR 0 2
74723: PPUSH
74724: LD_INT 124
74726: PPUSH
74727: CALL 58218 0 2
// end ; end ;
74731: GO 74128
74733: POP
74734: POP
// end ;
74735: LD_VAR 0 1
74739: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74740: LD_INT 0
74742: PPUSH
74743: PPUSH
74744: PPUSH
// if not mc_bases then
74745: LD_EXP 52
74749: NOT
74750: IFFALSE 74754
// exit ;
74752: GO 75360
// for i = 1 to mc_bases do
74754: LD_ADDR_VAR 0 2
74758: PUSH
74759: DOUBLE
74760: LD_INT 1
74762: DEC
74763: ST_TO_ADDR
74764: LD_EXP 52
74768: PUSH
74769: FOR_TO
74770: IFFALSE 75358
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74772: LD_ADDR_VAR 0 3
74776: PUSH
74777: LD_EXP 52
74781: PUSH
74782: LD_VAR 0 2
74786: ARRAY
74787: PPUSH
74788: LD_INT 25
74790: PUSH
74791: LD_INT 4
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PPUSH
74798: CALL_OW 72
74802: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
74803: LD_VAR 0 3
74807: NOT
74808: PUSH
74809: LD_EXP 89
74813: PUSH
74814: LD_VAR 0 2
74818: ARRAY
74819: NOT
74820: OR
74821: PUSH
74822: LD_EXP 52
74826: PUSH
74827: LD_VAR 0 2
74831: ARRAY
74832: PPUSH
74833: LD_INT 2
74835: PUSH
74836: LD_INT 30
74838: PUSH
74839: LD_INT 0
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PUSH
74846: LD_INT 30
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: LIST
74860: PPUSH
74861: CALL_OW 72
74865: NOT
74866: OR
74867: IFFALSE 74917
// begin if mc_deposits_finder [ i ] then
74869: LD_EXP 90
74873: PUSH
74874: LD_VAR 0 2
74878: ARRAY
74879: IFFALSE 74915
// begin MC_Reset ( i , 125 ) ;
74881: LD_VAR 0 2
74885: PPUSH
74886: LD_INT 125
74888: PPUSH
74889: CALL 58218 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74893: LD_ADDR_EXP 90
74897: PUSH
74898: LD_EXP 90
74902: PPUSH
74903: LD_VAR 0 2
74907: PPUSH
74908: EMPTY
74909: PPUSH
74910: CALL_OW 1
74914: ST_TO_ADDR
// end ; continue ;
74915: GO 74769
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
74917: LD_EXP 89
74921: PUSH
74922: LD_VAR 0 2
74926: ARRAY
74927: PUSH
74928: LD_INT 1
74930: ARRAY
74931: PUSH
74932: LD_INT 3
74934: ARRAY
74935: PUSH
74936: LD_INT 1
74938: EQUAL
74939: PUSH
74940: LD_INT 20
74942: PPUSH
74943: LD_EXP 78
74947: PUSH
74948: LD_VAR 0 2
74952: ARRAY
74953: PPUSH
74954: CALL_OW 321
74958: PUSH
74959: LD_INT 2
74961: NONEQUAL
74962: AND
74963: IFFALSE 75013
// begin if mc_deposits_finder [ i ] then
74965: LD_EXP 90
74969: PUSH
74970: LD_VAR 0 2
74974: ARRAY
74975: IFFALSE 75011
// begin MC_Reset ( i , 125 ) ;
74977: LD_VAR 0 2
74981: PPUSH
74982: LD_INT 125
74984: PPUSH
74985: CALL 58218 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74989: LD_ADDR_EXP 90
74993: PUSH
74994: LD_EXP 90
74998: PPUSH
74999: LD_VAR 0 2
75003: PPUSH
75004: EMPTY
75005: PPUSH
75006: CALL_OW 1
75010: ST_TO_ADDR
// end ; continue ;
75011: GO 74769
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
75013: LD_EXP 89
75017: PUSH
75018: LD_VAR 0 2
75022: ARRAY
75023: PUSH
75024: LD_INT 1
75026: ARRAY
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: PPUSH
75032: LD_EXP 89
75036: PUSH
75037: LD_VAR 0 2
75041: ARRAY
75042: PUSH
75043: LD_INT 1
75045: ARRAY
75046: PUSH
75047: LD_INT 2
75049: ARRAY
75050: PPUSH
75051: LD_EXP 78
75055: PUSH
75056: LD_VAR 0 2
75060: ARRAY
75061: PPUSH
75062: CALL_OW 440
75066: IFFALSE 75109
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
75068: LD_ADDR_EXP 89
75072: PUSH
75073: LD_EXP 89
75077: PPUSH
75078: LD_VAR 0 2
75082: PPUSH
75083: LD_EXP 89
75087: PUSH
75088: LD_VAR 0 2
75092: ARRAY
75093: PPUSH
75094: LD_INT 1
75096: PPUSH
75097: CALL_OW 3
75101: PPUSH
75102: CALL_OW 1
75106: ST_TO_ADDR
75107: GO 75356
// begin if not mc_deposits_finder [ i ] then
75109: LD_EXP 90
75113: PUSH
75114: LD_VAR 0 2
75118: ARRAY
75119: NOT
75120: IFFALSE 75172
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
75122: LD_ADDR_EXP 90
75126: PUSH
75127: LD_EXP 90
75131: PPUSH
75132: LD_VAR 0 2
75136: PPUSH
75137: LD_VAR 0 3
75141: PUSH
75142: LD_INT 1
75144: ARRAY
75145: PUSH
75146: EMPTY
75147: LIST
75148: PPUSH
75149: CALL_OW 1
75153: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
75154: LD_VAR 0 3
75158: PUSH
75159: LD_INT 1
75161: ARRAY
75162: PPUSH
75163: LD_INT 125
75165: PPUSH
75166: CALL_OW 109
// end else
75170: GO 75356
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
75172: LD_EXP 90
75176: PUSH
75177: LD_VAR 0 2
75181: ARRAY
75182: PUSH
75183: LD_INT 1
75185: ARRAY
75186: PPUSH
75187: CALL_OW 310
75191: IFFALSE 75214
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
75193: LD_EXP 90
75197: PUSH
75198: LD_VAR 0 2
75202: ARRAY
75203: PUSH
75204: LD_INT 1
75206: ARRAY
75207: PPUSH
75208: CALL_OW 122
75212: GO 75356
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
75214: LD_EXP 90
75218: PUSH
75219: LD_VAR 0 2
75223: ARRAY
75224: PUSH
75225: LD_INT 1
75227: ARRAY
75228: PPUSH
75229: CALL_OW 314
75233: NOT
75234: PUSH
75235: LD_EXP 90
75239: PUSH
75240: LD_VAR 0 2
75244: ARRAY
75245: PUSH
75246: LD_INT 1
75248: ARRAY
75249: PPUSH
75250: LD_EXP 89
75254: PUSH
75255: LD_VAR 0 2
75259: ARRAY
75260: PUSH
75261: LD_INT 1
75263: ARRAY
75264: PUSH
75265: LD_INT 1
75267: ARRAY
75268: PPUSH
75269: LD_EXP 89
75273: PUSH
75274: LD_VAR 0 2
75278: ARRAY
75279: PUSH
75280: LD_INT 1
75282: ARRAY
75283: PUSH
75284: LD_INT 2
75286: ARRAY
75287: PPUSH
75288: CALL_OW 297
75292: PUSH
75293: LD_INT 6
75295: GREATER
75296: AND
75297: IFFALSE 75356
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
75299: LD_EXP 90
75303: PUSH
75304: LD_VAR 0 2
75308: ARRAY
75309: PUSH
75310: LD_INT 1
75312: ARRAY
75313: PPUSH
75314: LD_EXP 89
75318: PUSH
75319: LD_VAR 0 2
75323: ARRAY
75324: PUSH
75325: LD_INT 1
75327: ARRAY
75328: PUSH
75329: LD_INT 1
75331: ARRAY
75332: PPUSH
75333: LD_EXP 89
75337: PUSH
75338: LD_VAR 0 2
75342: ARRAY
75343: PUSH
75344: LD_INT 1
75346: ARRAY
75347: PUSH
75348: LD_INT 2
75350: ARRAY
75351: PPUSH
75352: CALL_OW 111
// end ; end ; end ;
75356: GO 74769
75358: POP
75359: POP
// end ;
75360: LD_VAR 0 1
75364: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
75365: LD_INT 0
75367: PPUSH
75368: PPUSH
75369: PPUSH
75370: PPUSH
75371: PPUSH
75372: PPUSH
75373: PPUSH
75374: PPUSH
75375: PPUSH
75376: PPUSH
75377: PPUSH
// if not mc_bases then
75378: LD_EXP 52
75382: NOT
75383: IFFALSE 75387
// exit ;
75385: GO 76111
// for i = 1 to mc_bases do
75387: LD_ADDR_VAR 0 2
75391: PUSH
75392: DOUBLE
75393: LD_INT 1
75395: DEC
75396: ST_TO_ADDR
75397: LD_EXP 52
75401: PUSH
75402: FOR_TO
75403: IFFALSE 76109
// begin if not mc_bases [ i ] then
75405: LD_EXP 52
75409: PUSH
75410: LD_VAR 0 2
75414: ARRAY
75415: NOT
75416: IFFALSE 75420
// continue ;
75418: GO 75402
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75420: LD_ADDR_VAR 0 7
75424: PUSH
75425: LD_EXP 52
75429: PUSH
75430: LD_VAR 0 2
75434: ARRAY
75435: PUSH
75436: LD_INT 1
75438: ARRAY
75439: PPUSH
75440: CALL_OW 248
75444: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
75445: LD_VAR 0 7
75449: PUSH
75450: LD_INT 3
75452: EQUAL
75453: PUSH
75454: LD_EXP 71
75458: PUSH
75459: LD_VAR 0 2
75463: ARRAY
75464: PUSH
75465: LD_EXP 74
75469: PUSH
75470: LD_VAR 0 2
75474: ARRAY
75475: UNION
75476: PPUSH
75477: LD_INT 33
75479: PUSH
75480: LD_INT 2
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PPUSH
75487: CALL_OW 72
75491: NOT
75492: OR
75493: IFFALSE 75497
// continue ;
75495: GO 75402
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75497: LD_ADDR_VAR 0 9
75501: PUSH
75502: LD_EXP 52
75506: PUSH
75507: LD_VAR 0 2
75511: ARRAY
75512: PPUSH
75513: LD_INT 30
75515: PUSH
75516: LD_INT 36
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PPUSH
75523: CALL_OW 72
75527: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
75528: LD_ADDR_VAR 0 10
75532: PUSH
75533: LD_EXP 71
75537: PUSH
75538: LD_VAR 0 2
75542: ARRAY
75543: PPUSH
75544: LD_INT 34
75546: PUSH
75547: LD_INT 31
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PPUSH
75554: CALL_OW 72
75558: ST_TO_ADDR
// if not cts and not mcts then
75559: LD_VAR 0 9
75563: NOT
75564: PUSH
75565: LD_VAR 0 10
75569: NOT
75570: AND
75571: IFFALSE 75575
// continue ;
75573: GO 75402
// x := cts ;
75575: LD_ADDR_VAR 0 11
75579: PUSH
75580: LD_VAR 0 9
75584: ST_TO_ADDR
// if not x then
75585: LD_VAR 0 11
75589: NOT
75590: IFFALSE 75602
// x := mcts ;
75592: LD_ADDR_VAR 0 11
75596: PUSH
75597: LD_VAR 0 10
75601: ST_TO_ADDR
// if mc_remote_driver [ i ] then
75602: LD_EXP 92
75606: PUSH
75607: LD_VAR 0 2
75611: ARRAY
75612: IFFALSE 75881
// for j in mc_remote_driver [ i ] do
75614: LD_ADDR_VAR 0 3
75618: PUSH
75619: LD_EXP 92
75623: PUSH
75624: LD_VAR 0 2
75628: ARRAY
75629: PUSH
75630: FOR_IN
75631: IFFALSE 75879
// begin if GetClass ( j ) <> 3 then
75633: LD_VAR 0 3
75637: PPUSH
75638: CALL_OW 257
75642: PUSH
75643: LD_INT 3
75645: NONEQUAL
75646: IFFALSE 75699
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
75648: LD_ADDR_EXP 92
75652: PUSH
75653: LD_EXP 92
75657: PPUSH
75658: LD_VAR 0 2
75662: PPUSH
75663: LD_EXP 92
75667: PUSH
75668: LD_VAR 0 2
75672: ARRAY
75673: PUSH
75674: LD_VAR 0 3
75678: DIFF
75679: PPUSH
75680: CALL_OW 1
75684: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75685: LD_VAR 0 3
75689: PPUSH
75690: LD_INT 0
75692: PPUSH
75693: CALL_OW 109
// continue ;
75697: GO 75630
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
75699: LD_VAR 0 3
75703: PPUSH
75704: CALL_OW 310
75708: NOT
75709: PUSH
75710: LD_VAR 0 3
75714: PPUSH
75715: CALL_OW 310
75719: PPUSH
75720: CALL_OW 266
75724: PUSH
75725: LD_INT 36
75727: NONEQUAL
75728: PUSH
75729: LD_VAR 0 3
75733: PPUSH
75734: CALL 51519 0 1
75738: NOT
75739: AND
75740: OR
75741: IFFALSE 75877
// begin if IsInUnit ( j ) then
75743: LD_VAR 0 3
75747: PPUSH
75748: CALL_OW 310
75752: IFFALSE 75763
// ComExitBuilding ( j ) ;
75754: LD_VAR 0 3
75758: PPUSH
75759: CALL_OW 122
// ct := 0 ;
75763: LD_ADDR_VAR 0 8
75767: PUSH
75768: LD_INT 0
75770: ST_TO_ADDR
// for k in x do
75771: LD_ADDR_VAR 0 4
75775: PUSH
75776: LD_VAR 0 11
75780: PUSH
75781: FOR_IN
75782: IFFALSE 75855
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
75784: LD_VAR 0 4
75788: PPUSH
75789: CALL_OW 264
75793: PUSH
75794: LD_INT 31
75796: EQUAL
75797: PUSH
75798: LD_VAR 0 4
75802: PPUSH
75803: CALL_OW 311
75807: NOT
75808: AND
75809: PUSH
75810: LD_VAR 0 4
75814: PPUSH
75815: CALL_OW 266
75819: PUSH
75820: LD_INT 36
75822: EQUAL
75823: PUSH
75824: LD_VAR 0 4
75828: PPUSH
75829: CALL_OW 313
75833: PUSH
75834: LD_INT 3
75836: LESS
75837: AND
75838: OR
75839: IFFALSE 75853
// begin ct := k ;
75841: LD_ADDR_VAR 0 8
75845: PUSH
75846: LD_VAR 0 4
75850: ST_TO_ADDR
// break ;
75851: GO 75855
// end ;
75853: GO 75781
75855: POP
75856: POP
// if ct then
75857: LD_VAR 0 8
75861: IFFALSE 75877
// ComEnterUnit ( j , ct ) ;
75863: LD_VAR 0 3
75867: PPUSH
75868: LD_VAR 0 8
75872: PPUSH
75873: CALL_OW 120
// end ; end ;
75877: GO 75630
75879: POP
75880: POP
// places := 0 ;
75881: LD_ADDR_VAR 0 5
75885: PUSH
75886: LD_INT 0
75888: ST_TO_ADDR
// for j = 1 to x do
75889: LD_ADDR_VAR 0 3
75893: PUSH
75894: DOUBLE
75895: LD_INT 1
75897: DEC
75898: ST_TO_ADDR
75899: LD_VAR 0 11
75903: PUSH
75904: FOR_TO
75905: IFFALSE 75960
// if GetWeapon ( x [ j ] ) = ar_control_tower then
75907: LD_VAR 0 11
75911: PUSH
75912: LD_VAR 0 3
75916: ARRAY
75917: PPUSH
75918: CALL_OW 264
75922: PUSH
75923: LD_INT 31
75925: EQUAL
75926: IFFALSE 75944
// places := places + 1 else
75928: LD_ADDR_VAR 0 5
75932: PUSH
75933: LD_VAR 0 5
75937: PUSH
75938: LD_INT 1
75940: PLUS
75941: ST_TO_ADDR
75942: GO 75958
// places := places + 3 ;
75944: LD_ADDR_VAR 0 5
75948: PUSH
75949: LD_VAR 0 5
75953: PUSH
75954: LD_INT 3
75956: PLUS
75957: ST_TO_ADDR
75958: GO 75904
75960: POP
75961: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
75962: LD_ADDR_VAR 0 6
75966: PUSH
75967: LD_EXP 52
75971: PUSH
75972: LD_VAR 0 2
75976: ARRAY
75977: PPUSH
75978: LD_INT 25
75980: PUSH
75981: LD_INT 3
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PPUSH
75988: CALL_OW 72
75992: PUSH
75993: LD_EXP 92
75997: PUSH
75998: LD_VAR 0 2
76002: ARRAY
76003: DIFF
76004: PPUSH
76005: LD_INT 3
76007: PPUSH
76008: CALL 52419 0 2
76012: ST_TO_ADDR
// if not tmp then
76013: LD_VAR 0 6
76017: NOT
76018: IFFALSE 76022
// continue ;
76020: GO 75402
// places := places - mc_remote_driver [ i ] ;
76022: LD_ADDR_VAR 0 5
76026: PUSH
76027: LD_VAR 0 5
76031: PUSH
76032: LD_EXP 92
76036: PUSH
76037: LD_VAR 0 2
76041: ARRAY
76042: MINUS
76043: ST_TO_ADDR
// if places then
76044: LD_VAR 0 5
76048: IFFALSE 76107
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
76050: LD_ADDR_EXP 92
76054: PUSH
76055: LD_EXP 92
76059: PPUSH
76060: LD_VAR 0 2
76064: PPUSH
76065: LD_EXP 92
76069: PUSH
76070: LD_VAR 0 2
76074: ARRAY
76075: PUSH
76076: LD_VAR 0 6
76080: PUSH
76081: LD_INT 1
76083: ARRAY
76084: UNION
76085: PPUSH
76086: CALL_OW 1
76090: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
76091: LD_VAR 0 6
76095: PUSH
76096: LD_INT 1
76098: ARRAY
76099: PPUSH
76100: LD_INT 126
76102: PPUSH
76103: CALL_OW 109
// end ; end ;
76107: GO 75402
76109: POP
76110: POP
// end ;
76111: LD_VAR 0 1
76115: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
76116: LD_INT 0
76118: PPUSH
76119: PPUSH
76120: PPUSH
76121: PPUSH
76122: PPUSH
76123: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
76124: LD_VAR 0 1
76128: NOT
76129: PUSH
76130: LD_VAR 0 2
76134: NOT
76135: OR
76136: PUSH
76137: LD_VAR 0 3
76141: NOT
76142: OR
76143: PUSH
76144: LD_VAR 0 4
76148: PUSH
76149: LD_INT 1
76151: PUSH
76152: LD_INT 2
76154: PUSH
76155: LD_INT 3
76157: PUSH
76158: LD_INT 4
76160: PUSH
76161: LD_INT 5
76163: PUSH
76164: LD_INT 8
76166: PUSH
76167: LD_INT 9
76169: PUSH
76170: LD_INT 15
76172: PUSH
76173: LD_INT 16
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: IN
76187: NOT
76188: OR
76189: IFFALSE 76193
// exit ;
76191: GO 77093
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
76193: LD_ADDR_VAR 0 2
76197: PUSH
76198: LD_VAR 0 2
76202: PPUSH
76203: LD_INT 21
76205: PUSH
76206: LD_INT 3
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PUSH
76213: LD_INT 24
76215: PUSH
76216: LD_INT 250
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PPUSH
76227: CALL_OW 72
76231: ST_TO_ADDR
// case class of 1 , 15 :
76232: LD_VAR 0 4
76236: PUSH
76237: LD_INT 1
76239: DOUBLE
76240: EQUAL
76241: IFTRUE 76251
76243: LD_INT 15
76245: DOUBLE
76246: EQUAL
76247: IFTRUE 76251
76249: GO 76336
76251: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
76252: LD_ADDR_VAR 0 8
76256: PUSH
76257: LD_VAR 0 2
76261: PPUSH
76262: LD_INT 2
76264: PUSH
76265: LD_INT 30
76267: PUSH
76268: LD_INT 32
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_INT 30
76277: PUSH
76278: LD_INT 31
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: LIST
76289: PPUSH
76290: CALL_OW 72
76294: PUSH
76295: LD_VAR 0 2
76299: PPUSH
76300: LD_INT 2
76302: PUSH
76303: LD_INT 30
76305: PUSH
76306: LD_INT 4
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 30
76315: PUSH
76316: LD_INT 5
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: LIST
76327: PPUSH
76328: CALL_OW 72
76332: ADD
76333: ST_TO_ADDR
76334: GO 76582
76336: LD_INT 2
76338: DOUBLE
76339: EQUAL
76340: IFTRUE 76350
76342: LD_INT 16
76344: DOUBLE
76345: EQUAL
76346: IFTRUE 76350
76348: GO 76396
76350: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76351: LD_ADDR_VAR 0 8
76355: PUSH
76356: LD_VAR 0 2
76360: PPUSH
76361: LD_INT 2
76363: PUSH
76364: LD_INT 30
76366: PUSH
76367: LD_INT 0
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 30
76376: PUSH
76377: LD_INT 1
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: PPUSH
76389: CALL_OW 72
76393: ST_TO_ADDR
76394: GO 76582
76396: LD_INT 3
76398: DOUBLE
76399: EQUAL
76400: IFTRUE 76404
76402: GO 76450
76404: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76405: LD_ADDR_VAR 0 8
76409: PUSH
76410: LD_VAR 0 2
76414: PPUSH
76415: LD_INT 2
76417: PUSH
76418: LD_INT 30
76420: PUSH
76421: LD_INT 2
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 30
76430: PUSH
76431: LD_INT 3
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: LIST
76442: PPUSH
76443: CALL_OW 72
76447: ST_TO_ADDR
76448: GO 76582
76450: LD_INT 4
76452: DOUBLE
76453: EQUAL
76454: IFTRUE 76458
76456: GO 76515
76458: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76459: LD_ADDR_VAR 0 8
76463: PUSH
76464: LD_VAR 0 2
76468: PPUSH
76469: LD_INT 2
76471: PUSH
76472: LD_INT 30
76474: PUSH
76475: LD_INT 6
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 30
76484: PUSH
76485: LD_INT 7
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: LD_INT 30
76494: PUSH
76495: LD_INT 8
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: PPUSH
76508: CALL_OW 72
76512: ST_TO_ADDR
76513: GO 76582
76515: LD_INT 5
76517: DOUBLE
76518: EQUAL
76519: IFTRUE 76535
76521: LD_INT 8
76523: DOUBLE
76524: EQUAL
76525: IFTRUE 76535
76527: LD_INT 9
76529: DOUBLE
76530: EQUAL
76531: IFTRUE 76535
76533: GO 76581
76535: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76536: LD_ADDR_VAR 0 8
76540: PUSH
76541: LD_VAR 0 2
76545: PPUSH
76546: LD_INT 2
76548: PUSH
76549: LD_INT 30
76551: PUSH
76552: LD_INT 4
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 30
76561: PUSH
76562: LD_INT 5
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: LIST
76573: PPUSH
76574: CALL_OW 72
76578: ST_TO_ADDR
76579: GO 76582
76581: POP
// if not tmp then
76582: LD_VAR 0 8
76586: NOT
76587: IFFALSE 76591
// exit ;
76589: GO 77093
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
76591: LD_VAR 0 4
76595: PUSH
76596: LD_INT 1
76598: PUSH
76599: LD_INT 15
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: IN
76606: PUSH
76607: LD_EXP 61
76611: PUSH
76612: LD_VAR 0 1
76616: ARRAY
76617: AND
76618: IFFALSE 76774
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
76620: LD_ADDR_VAR 0 9
76624: PUSH
76625: LD_EXP 61
76629: PUSH
76630: LD_VAR 0 1
76634: ARRAY
76635: PUSH
76636: LD_INT 1
76638: ARRAY
76639: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
76640: LD_VAR 0 9
76644: PUSH
76645: LD_EXP 62
76649: PUSH
76650: LD_VAR 0 1
76654: ARRAY
76655: IN
76656: NOT
76657: IFFALSE 76772
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
76659: LD_ADDR_EXP 62
76663: PUSH
76664: LD_EXP 62
76668: PPUSH
76669: LD_VAR 0 1
76673: PUSH
76674: LD_EXP 62
76678: PUSH
76679: LD_VAR 0 1
76683: ARRAY
76684: PUSH
76685: LD_INT 1
76687: PLUS
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PPUSH
76693: LD_VAR 0 9
76697: PPUSH
76698: CALL 18171 0 3
76702: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
76703: LD_ADDR_EXP 61
76707: PUSH
76708: LD_EXP 61
76712: PPUSH
76713: LD_VAR 0 1
76717: PPUSH
76718: LD_EXP 61
76722: PUSH
76723: LD_VAR 0 1
76727: ARRAY
76728: PUSH
76729: LD_VAR 0 9
76733: DIFF
76734: PPUSH
76735: CALL_OW 1
76739: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
76740: LD_VAR 0 3
76744: PPUSH
76745: LD_EXP 62
76749: PUSH
76750: LD_VAR 0 1
76754: ARRAY
76755: PUSH
76756: LD_EXP 62
76760: PUSH
76761: LD_VAR 0 1
76765: ARRAY
76766: ARRAY
76767: PPUSH
76768: CALL_OW 120
// end ; exit ;
76772: GO 77093
// end ; if tmp > 1 then
76774: LD_VAR 0 8
76778: PUSH
76779: LD_INT 1
76781: GREATER
76782: IFFALSE 76886
// for i = 2 to tmp do
76784: LD_ADDR_VAR 0 6
76788: PUSH
76789: DOUBLE
76790: LD_INT 2
76792: DEC
76793: ST_TO_ADDR
76794: LD_VAR 0 8
76798: PUSH
76799: FOR_TO
76800: IFFALSE 76884
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
76802: LD_VAR 0 8
76806: PUSH
76807: LD_VAR 0 6
76811: ARRAY
76812: PPUSH
76813: CALL_OW 461
76817: PUSH
76818: LD_INT 6
76820: EQUAL
76821: IFFALSE 76882
// begin x := tmp [ i ] ;
76823: LD_ADDR_VAR 0 9
76827: PUSH
76828: LD_VAR 0 8
76832: PUSH
76833: LD_VAR 0 6
76837: ARRAY
76838: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
76839: LD_ADDR_VAR 0 8
76843: PUSH
76844: LD_VAR 0 8
76848: PPUSH
76849: LD_VAR 0 6
76853: PPUSH
76854: CALL_OW 3
76858: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
76859: LD_ADDR_VAR 0 8
76863: PUSH
76864: LD_VAR 0 8
76868: PPUSH
76869: LD_INT 1
76871: PPUSH
76872: LD_VAR 0 9
76876: PPUSH
76877: CALL_OW 2
76881: ST_TO_ADDR
// end ;
76882: GO 76799
76884: POP
76885: POP
// for i in tmp do
76886: LD_ADDR_VAR 0 6
76890: PUSH
76891: LD_VAR 0 8
76895: PUSH
76896: FOR_IN
76897: IFFALSE 76966
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
76899: LD_VAR 0 6
76903: PPUSH
76904: CALL_OW 313
76908: PUSH
76909: LD_INT 6
76911: LESS
76912: PUSH
76913: LD_VAR 0 6
76917: PPUSH
76918: CALL_OW 266
76922: PUSH
76923: LD_INT 31
76925: PUSH
76926: LD_INT 32
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: IN
76933: NOT
76934: AND
76935: PUSH
76936: LD_VAR 0 6
76940: PPUSH
76941: CALL_OW 313
76945: PUSH
76946: LD_INT 0
76948: EQUAL
76949: OR
76950: IFFALSE 76964
// begin j := i ;
76952: LD_ADDR_VAR 0 7
76956: PUSH
76957: LD_VAR 0 6
76961: ST_TO_ADDR
// break ;
76962: GO 76966
// end ; end ;
76964: GO 76896
76966: POP
76967: POP
// if j then
76968: LD_VAR 0 7
76972: IFFALSE 76990
// ComEnterUnit ( unit , j ) else
76974: LD_VAR 0 3
76978: PPUSH
76979: LD_VAR 0 7
76983: PPUSH
76984: CALL_OW 120
76988: GO 77093
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76990: LD_ADDR_VAR 0 10
76994: PUSH
76995: LD_VAR 0 2
76999: PPUSH
77000: LD_INT 2
77002: PUSH
77003: LD_INT 30
77005: PUSH
77006: LD_INT 0
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 30
77015: PUSH
77016: LD_INT 1
77018: PUSH
77019: EMPTY
77020: LIST
77021: LIST
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: LIST
77027: PPUSH
77028: CALL_OW 72
77032: ST_TO_ADDR
// if depot then
77033: LD_VAR 0 10
77037: IFFALSE 77093
// begin depot := NearestUnitToUnit ( depot , unit ) ;
77039: LD_ADDR_VAR 0 10
77043: PUSH
77044: LD_VAR 0 10
77048: PPUSH
77049: LD_VAR 0 3
77053: PPUSH
77054: CALL_OW 74
77058: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
77059: LD_VAR 0 3
77063: PPUSH
77064: LD_VAR 0 10
77068: PPUSH
77069: CALL_OW 296
77073: PUSH
77074: LD_INT 10
77076: GREATER
77077: IFFALSE 77093
// ComStandNearbyBuilding ( unit , depot ) ;
77079: LD_VAR 0 3
77083: PPUSH
77084: LD_VAR 0 10
77088: PPUSH
77089: CALL 12523 0 2
// end ; end ; end ;
77093: LD_VAR 0 5
77097: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
77098: LD_INT 0
77100: PPUSH
77101: PPUSH
77102: PPUSH
77103: PPUSH
// if not mc_bases then
77104: LD_EXP 52
77108: NOT
77109: IFFALSE 77113
// exit ;
77111: GO 77352
// for i = 1 to mc_bases do
77113: LD_ADDR_VAR 0 2
77117: PUSH
77118: DOUBLE
77119: LD_INT 1
77121: DEC
77122: ST_TO_ADDR
77123: LD_EXP 52
77127: PUSH
77128: FOR_TO
77129: IFFALSE 77350
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
77131: LD_ADDR_VAR 0 4
77135: PUSH
77136: LD_EXP 52
77140: PUSH
77141: LD_VAR 0 2
77145: ARRAY
77146: PPUSH
77147: LD_INT 21
77149: PUSH
77150: LD_INT 1
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: PPUSH
77157: CALL_OW 72
77161: PUSH
77162: LD_EXP 81
77166: PUSH
77167: LD_VAR 0 2
77171: ARRAY
77172: UNION
77173: ST_TO_ADDR
// if not tmp then
77174: LD_VAR 0 4
77178: NOT
77179: IFFALSE 77183
// continue ;
77181: GO 77128
// for j in tmp do
77183: LD_ADDR_VAR 0 3
77187: PUSH
77188: LD_VAR 0 4
77192: PUSH
77193: FOR_IN
77194: IFFALSE 77346
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
77196: LD_VAR 0 3
77200: PPUSH
77201: CALL_OW 110
77205: NOT
77206: PUSH
77207: LD_VAR 0 3
77211: PPUSH
77212: CALL_OW 314
77216: NOT
77217: AND
77218: PUSH
77219: LD_VAR 0 3
77223: PPUSH
77224: CALL_OW 311
77228: NOT
77229: AND
77230: PUSH
77231: LD_VAR 0 3
77235: PPUSH
77236: CALL_OW 310
77240: NOT
77241: AND
77242: PUSH
77243: LD_VAR 0 3
77247: PUSH
77248: LD_EXP 55
77252: PUSH
77253: LD_VAR 0 2
77257: ARRAY
77258: PUSH
77259: LD_INT 1
77261: ARRAY
77262: IN
77263: NOT
77264: AND
77265: PUSH
77266: LD_VAR 0 3
77270: PUSH
77271: LD_EXP 55
77275: PUSH
77276: LD_VAR 0 2
77280: ARRAY
77281: PUSH
77282: LD_INT 2
77284: ARRAY
77285: IN
77286: NOT
77287: AND
77288: PUSH
77289: LD_VAR 0 3
77293: PUSH
77294: LD_EXP 64
77298: PUSH
77299: LD_VAR 0 2
77303: ARRAY
77304: IN
77305: NOT
77306: AND
77307: IFFALSE 77344
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77309: LD_VAR 0 2
77313: PPUSH
77314: LD_EXP 52
77318: PUSH
77319: LD_VAR 0 2
77323: ARRAY
77324: PPUSH
77325: LD_VAR 0 3
77329: PPUSH
77330: LD_VAR 0 3
77334: PPUSH
77335: CALL_OW 257
77339: PPUSH
77340: CALL 76116 0 4
// end ;
77344: GO 77193
77346: POP
77347: POP
// end ;
77348: GO 77128
77350: POP
77351: POP
// end ;
77352: LD_VAR 0 1
77356: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77357: LD_INT 0
77359: PPUSH
77360: PPUSH
77361: PPUSH
77362: PPUSH
77363: PPUSH
77364: PPUSH
// if not mc_bases [ base ] then
77365: LD_EXP 52
77369: PUSH
77370: LD_VAR 0 1
77374: ARRAY
77375: NOT
77376: IFFALSE 77380
// exit ;
77378: GO 77562
// tmp := [ ] ;
77380: LD_ADDR_VAR 0 6
77384: PUSH
77385: EMPTY
77386: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77387: LD_ADDR_VAR 0 7
77391: PUSH
77392: LD_VAR 0 3
77396: PPUSH
77397: LD_INT 0
77399: PPUSH
77400: CALL_OW 517
77404: ST_TO_ADDR
// if not list then
77405: LD_VAR 0 7
77409: NOT
77410: IFFALSE 77414
// exit ;
77412: GO 77562
// for i = 1 to amount do
77414: LD_ADDR_VAR 0 5
77418: PUSH
77419: DOUBLE
77420: LD_INT 1
77422: DEC
77423: ST_TO_ADDR
77424: LD_VAR 0 2
77428: PUSH
77429: FOR_TO
77430: IFFALSE 77510
// begin x := rand ( 1 , list [ 1 ] ) ;
77432: LD_ADDR_VAR 0 8
77436: PUSH
77437: LD_INT 1
77439: PPUSH
77440: LD_VAR 0 7
77444: PUSH
77445: LD_INT 1
77447: ARRAY
77448: PPUSH
77449: CALL_OW 12
77453: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77454: LD_ADDR_VAR 0 6
77458: PUSH
77459: LD_VAR 0 6
77463: PPUSH
77464: LD_VAR 0 5
77468: PPUSH
77469: LD_VAR 0 7
77473: PUSH
77474: LD_INT 1
77476: ARRAY
77477: PUSH
77478: LD_VAR 0 8
77482: ARRAY
77483: PUSH
77484: LD_VAR 0 7
77488: PUSH
77489: LD_INT 2
77491: ARRAY
77492: PUSH
77493: LD_VAR 0 8
77497: ARRAY
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PPUSH
77503: CALL_OW 1
77507: ST_TO_ADDR
// end ;
77508: GO 77429
77510: POP
77511: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77512: LD_ADDR_EXP 65
77516: PUSH
77517: LD_EXP 65
77521: PPUSH
77522: LD_VAR 0 1
77526: PPUSH
77527: LD_VAR 0 6
77531: PPUSH
77532: CALL_OW 1
77536: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77537: LD_ADDR_EXP 67
77541: PUSH
77542: LD_EXP 67
77546: PPUSH
77547: LD_VAR 0 1
77551: PPUSH
77552: LD_VAR 0 3
77556: PPUSH
77557: CALL_OW 1
77561: ST_TO_ADDR
// end ;
77562: LD_VAR 0 4
77566: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77567: LD_INT 0
77569: PPUSH
// if not mc_bases [ base ] then
77570: LD_EXP 52
77574: PUSH
77575: LD_VAR 0 1
77579: ARRAY
77580: NOT
77581: IFFALSE 77585
// exit ;
77583: GO 77610
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
77585: LD_ADDR_EXP 57
77589: PUSH
77590: LD_EXP 57
77594: PPUSH
77595: LD_VAR 0 1
77599: PPUSH
77600: LD_VAR 0 2
77604: PPUSH
77605: CALL_OW 1
77609: ST_TO_ADDR
// end ;
77610: LD_VAR 0 3
77614: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
77615: LD_INT 0
77617: PPUSH
// if not mc_bases [ base ] then
77618: LD_EXP 52
77622: PUSH
77623: LD_VAR 0 1
77627: ARRAY
77628: NOT
77629: IFFALSE 77633
// exit ;
77631: GO 77670
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
77633: LD_ADDR_EXP 57
77637: PUSH
77638: LD_EXP 57
77642: PPUSH
77643: LD_VAR 0 1
77647: PPUSH
77648: LD_EXP 57
77652: PUSH
77653: LD_VAR 0 1
77657: ARRAY
77658: PUSH
77659: LD_VAR 0 2
77663: UNION
77664: PPUSH
77665: CALL_OW 1
77669: ST_TO_ADDR
// end ;
77670: LD_VAR 0 3
77674: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
77675: LD_INT 0
77677: PPUSH
// if not mc_bases [ base ] then
77678: LD_EXP 52
77682: PUSH
77683: LD_VAR 0 1
77687: ARRAY
77688: NOT
77689: IFFALSE 77693
// exit ;
77691: GO 77718
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
77693: LD_ADDR_EXP 73
77697: PUSH
77698: LD_EXP 73
77702: PPUSH
77703: LD_VAR 0 1
77707: PPUSH
77708: LD_VAR 0 2
77712: PPUSH
77713: CALL_OW 1
77717: ST_TO_ADDR
// end ;
77718: LD_VAR 0 3
77722: RET
// export function MC_InsertProduceList ( base , components ) ; begin
77723: LD_INT 0
77725: PPUSH
// if not mc_bases [ base ] then
77726: LD_EXP 52
77730: PUSH
77731: LD_VAR 0 1
77735: ARRAY
77736: NOT
77737: IFFALSE 77741
// exit ;
77739: GO 77778
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
77741: LD_ADDR_EXP 73
77745: PUSH
77746: LD_EXP 73
77750: PPUSH
77751: LD_VAR 0 1
77755: PPUSH
77756: LD_EXP 73
77760: PUSH
77761: LD_VAR 0 1
77765: ARRAY
77766: PUSH
77767: LD_VAR 0 2
77771: ADD
77772: PPUSH
77773: CALL_OW 1
77777: ST_TO_ADDR
// end ;
77778: LD_VAR 0 3
77782: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
77783: LD_INT 0
77785: PPUSH
// if not mc_bases [ base ] then
77786: LD_EXP 52
77790: PUSH
77791: LD_VAR 0 1
77795: ARRAY
77796: NOT
77797: IFFALSE 77801
// exit ;
77799: GO 77855
// mc_defender := Replace ( mc_defender , base , deflist ) ;
77801: LD_ADDR_EXP 74
77805: PUSH
77806: LD_EXP 74
77810: PPUSH
77811: LD_VAR 0 1
77815: PPUSH
77816: LD_VAR 0 2
77820: PPUSH
77821: CALL_OW 1
77825: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
77826: LD_ADDR_EXP 63
77830: PUSH
77831: LD_EXP 63
77835: PPUSH
77836: LD_VAR 0 1
77840: PPUSH
77841: LD_VAR 0 2
77845: PUSH
77846: LD_INT 0
77848: PLUS
77849: PPUSH
77850: CALL_OW 1
77854: ST_TO_ADDR
// end ;
77855: LD_VAR 0 3
77859: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
77860: LD_INT 0
77862: PPUSH
// if not mc_bases [ base ] then
77863: LD_EXP 52
77867: PUSH
77868: LD_VAR 0 1
77872: ARRAY
77873: NOT
77874: IFFALSE 77878
// exit ;
77876: GO 77903
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
77878: LD_ADDR_EXP 63
77882: PUSH
77883: LD_EXP 63
77887: PPUSH
77888: LD_VAR 0 1
77892: PPUSH
77893: LD_VAR 0 2
77897: PPUSH
77898: CALL_OW 1
77902: ST_TO_ADDR
// end ;
77903: LD_VAR 0 3
77907: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
77908: LD_INT 0
77910: PPUSH
77911: PPUSH
77912: PPUSH
77913: PPUSH
// if not mc_bases [ base ] then
77914: LD_EXP 52
77918: PUSH
77919: LD_VAR 0 1
77923: ARRAY
77924: NOT
77925: IFFALSE 77929
// exit ;
77927: GO 77994
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
77929: LD_ADDR_EXP 72
77933: PUSH
77934: LD_EXP 72
77938: PPUSH
77939: LD_VAR 0 1
77943: PUSH
77944: LD_EXP 72
77948: PUSH
77949: LD_VAR 0 1
77953: ARRAY
77954: PUSH
77955: LD_INT 1
77957: PLUS
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PPUSH
77963: LD_VAR 0 1
77967: PUSH
77968: LD_VAR 0 2
77972: PUSH
77973: LD_VAR 0 3
77977: PUSH
77978: LD_VAR 0 4
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: PPUSH
77989: CALL 18171 0 3
77993: ST_TO_ADDR
// end ;
77994: LD_VAR 0 5
77998: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
77999: LD_INT 0
78001: PPUSH
// if not mc_bases [ base ] then
78002: LD_EXP 52
78006: PUSH
78007: LD_VAR 0 1
78011: ARRAY
78012: NOT
78013: IFFALSE 78017
// exit ;
78015: GO 78042
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
78017: LD_ADDR_EXP 89
78021: PUSH
78022: LD_EXP 89
78026: PPUSH
78027: LD_VAR 0 1
78031: PPUSH
78032: LD_VAR 0 2
78036: PPUSH
78037: CALL_OW 1
78041: ST_TO_ADDR
// end ;
78042: LD_VAR 0 3
78046: RET
// export function MC_GetMinesField ( base ) ; begin
78047: LD_INT 0
78049: PPUSH
// result := mc_mines [ base ] ;
78050: LD_ADDR_VAR 0 2
78054: PUSH
78055: LD_EXP 65
78059: PUSH
78060: LD_VAR 0 1
78064: ARRAY
78065: ST_TO_ADDR
// end ;
78066: LD_VAR 0 2
78070: RET
// export function MC_GetProduceList ( base ) ; begin
78071: LD_INT 0
78073: PPUSH
// result := mc_produce [ base ] ;
78074: LD_ADDR_VAR 0 2
78078: PUSH
78079: LD_EXP 73
78083: PUSH
78084: LD_VAR 0 1
78088: ARRAY
78089: ST_TO_ADDR
// end ;
78090: LD_VAR 0 2
78094: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
78095: LD_INT 0
78097: PPUSH
78098: PPUSH
// if not mc_bases then
78099: LD_EXP 52
78103: NOT
78104: IFFALSE 78108
// exit ;
78106: GO 78173
// if mc_bases [ base ] then
78108: LD_EXP 52
78112: PUSH
78113: LD_VAR 0 1
78117: ARRAY
78118: IFFALSE 78173
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78120: LD_ADDR_VAR 0 3
78124: PUSH
78125: LD_EXP 52
78129: PUSH
78130: LD_VAR 0 1
78134: ARRAY
78135: PPUSH
78136: LD_INT 30
78138: PUSH
78139: LD_VAR 0 2
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PPUSH
78148: CALL_OW 72
78152: ST_TO_ADDR
// if result then
78153: LD_VAR 0 3
78157: IFFALSE 78173
// result := result [ 1 ] ;
78159: LD_ADDR_VAR 0 3
78163: PUSH
78164: LD_VAR 0 3
78168: PUSH
78169: LD_INT 1
78171: ARRAY
78172: ST_TO_ADDR
// end ; end ;
78173: LD_VAR 0 3
78177: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
78178: LD_INT 0
78180: PPUSH
78181: PPUSH
// if not mc_bases then
78182: LD_EXP 52
78186: NOT
78187: IFFALSE 78191
// exit ;
78189: GO 78236
// if mc_bases [ base ] then
78191: LD_EXP 52
78195: PUSH
78196: LD_VAR 0 1
78200: ARRAY
78201: IFFALSE 78236
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78203: LD_ADDR_VAR 0 3
78207: PUSH
78208: LD_EXP 52
78212: PUSH
78213: LD_VAR 0 1
78217: ARRAY
78218: PPUSH
78219: LD_INT 30
78221: PUSH
78222: LD_VAR 0 2
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: PPUSH
78231: CALL_OW 72
78235: ST_TO_ADDR
// end ;
78236: LD_VAR 0 3
78240: RET
// export function MC_SetTame ( base , area ) ; begin
78241: LD_INT 0
78243: PPUSH
// if not mc_bases or not base then
78244: LD_EXP 52
78248: NOT
78249: PUSH
78250: LD_VAR 0 1
78254: NOT
78255: OR
78256: IFFALSE 78260
// exit ;
78258: GO 78285
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
78260: LD_ADDR_EXP 80
78264: PUSH
78265: LD_EXP 80
78269: PPUSH
78270: LD_VAR 0 1
78274: PPUSH
78275: LD_VAR 0 2
78279: PPUSH
78280: CALL_OW 1
78284: ST_TO_ADDR
// end ;
78285: LD_VAR 0 3
78289: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
78290: LD_INT 0
78292: PPUSH
78293: PPUSH
// if not mc_bases or not base then
78294: LD_EXP 52
78298: NOT
78299: PUSH
78300: LD_VAR 0 1
78304: NOT
78305: OR
78306: IFFALSE 78310
// exit ;
78308: GO 78412
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78310: LD_ADDR_VAR 0 4
78314: PUSH
78315: LD_EXP 52
78319: PUSH
78320: LD_VAR 0 1
78324: ARRAY
78325: PPUSH
78326: LD_INT 30
78328: PUSH
78329: LD_VAR 0 2
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PPUSH
78338: CALL_OW 72
78342: ST_TO_ADDR
// if not tmp then
78343: LD_VAR 0 4
78347: NOT
78348: IFFALSE 78352
// exit ;
78350: GO 78412
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78352: LD_ADDR_EXP 84
78356: PUSH
78357: LD_EXP 84
78361: PPUSH
78362: LD_VAR 0 1
78366: PPUSH
78367: LD_EXP 84
78371: PUSH
78372: LD_VAR 0 1
78376: ARRAY
78377: PPUSH
78378: LD_EXP 84
78382: PUSH
78383: LD_VAR 0 1
78387: ARRAY
78388: PUSH
78389: LD_INT 1
78391: PLUS
78392: PPUSH
78393: LD_VAR 0 4
78397: PUSH
78398: LD_INT 1
78400: ARRAY
78401: PPUSH
78402: CALL_OW 2
78406: PPUSH
78407: CALL_OW 1
78411: ST_TO_ADDR
// end ;
78412: LD_VAR 0 3
78416: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78417: LD_INT 0
78419: PPUSH
78420: PPUSH
// if not mc_bases or not base or not kinds then
78421: LD_EXP 52
78425: NOT
78426: PUSH
78427: LD_VAR 0 1
78431: NOT
78432: OR
78433: PUSH
78434: LD_VAR 0 2
78438: NOT
78439: OR
78440: IFFALSE 78444
// exit ;
78442: GO 78505
// for i in kinds do
78444: LD_ADDR_VAR 0 4
78448: PUSH
78449: LD_VAR 0 2
78453: PUSH
78454: FOR_IN
78455: IFFALSE 78503
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78457: LD_ADDR_EXP 86
78461: PUSH
78462: LD_EXP 86
78466: PPUSH
78467: LD_VAR 0 1
78471: PUSH
78472: LD_EXP 86
78476: PUSH
78477: LD_VAR 0 1
78481: ARRAY
78482: PUSH
78483: LD_INT 1
78485: PLUS
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PPUSH
78491: LD_VAR 0 4
78495: PPUSH
78496: CALL 18171 0 3
78500: ST_TO_ADDR
78501: GO 78454
78503: POP
78504: POP
// end ;
78505: LD_VAR 0 3
78509: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78510: LD_INT 0
78512: PPUSH
// if not mc_bases or not base or not areas then
78513: LD_EXP 52
78517: NOT
78518: PUSH
78519: LD_VAR 0 1
78523: NOT
78524: OR
78525: PUSH
78526: LD_VAR 0 2
78530: NOT
78531: OR
78532: IFFALSE 78536
// exit ;
78534: GO 78561
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78536: LD_ADDR_EXP 70
78540: PUSH
78541: LD_EXP 70
78545: PPUSH
78546: LD_VAR 0 1
78550: PPUSH
78551: LD_VAR 0 2
78555: PPUSH
78556: CALL_OW 1
78560: ST_TO_ADDR
// end ;
78561: LD_VAR 0 3
78565: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
78566: LD_INT 0
78568: PPUSH
// if not mc_bases or not base or not teleports_exit then
78569: LD_EXP 52
78573: NOT
78574: PUSH
78575: LD_VAR 0 1
78579: NOT
78580: OR
78581: PUSH
78582: LD_VAR 0 2
78586: NOT
78587: OR
78588: IFFALSE 78592
// exit ;
78590: GO 78617
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
78592: LD_ADDR_EXP 87
78596: PUSH
78597: LD_EXP 87
78601: PPUSH
78602: LD_VAR 0 1
78606: PPUSH
78607: LD_VAR 0 2
78611: PPUSH
78612: CALL_OW 1
78616: ST_TO_ADDR
// end ;
78617: LD_VAR 0 3
78621: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
78622: LD_INT 0
78624: PPUSH
78625: PPUSH
78626: PPUSH
// if not mc_bases or not base or not ext_list then
78627: LD_EXP 52
78631: NOT
78632: PUSH
78633: LD_VAR 0 1
78637: NOT
78638: OR
78639: PUSH
78640: LD_VAR 0 5
78644: NOT
78645: OR
78646: IFFALSE 78650
// exit ;
78648: GO 78823
// tmp := GetFacExtXYD ( x , y , d ) ;
78650: LD_ADDR_VAR 0 8
78654: PUSH
78655: LD_VAR 0 2
78659: PPUSH
78660: LD_VAR 0 3
78664: PPUSH
78665: LD_VAR 0 4
78669: PPUSH
78670: CALL 51549 0 3
78674: ST_TO_ADDR
// if not tmp then
78675: LD_VAR 0 8
78679: NOT
78680: IFFALSE 78684
// exit ;
78682: GO 78823
// for i in tmp do
78684: LD_ADDR_VAR 0 7
78688: PUSH
78689: LD_VAR 0 8
78693: PUSH
78694: FOR_IN
78695: IFFALSE 78821
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
78697: LD_ADDR_EXP 57
78701: PUSH
78702: LD_EXP 57
78706: PPUSH
78707: LD_VAR 0 1
78711: PPUSH
78712: LD_EXP 57
78716: PUSH
78717: LD_VAR 0 1
78721: ARRAY
78722: PPUSH
78723: LD_EXP 57
78727: PUSH
78728: LD_VAR 0 1
78732: ARRAY
78733: PUSH
78734: LD_INT 1
78736: PLUS
78737: PPUSH
78738: LD_VAR 0 5
78742: PUSH
78743: LD_INT 1
78745: ARRAY
78746: PUSH
78747: LD_VAR 0 7
78751: PUSH
78752: LD_INT 1
78754: ARRAY
78755: PUSH
78756: LD_VAR 0 7
78760: PUSH
78761: LD_INT 2
78763: ARRAY
78764: PUSH
78765: LD_VAR 0 7
78769: PUSH
78770: LD_INT 3
78772: ARRAY
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: PPUSH
78780: CALL_OW 2
78784: PPUSH
78785: CALL_OW 1
78789: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
78790: LD_ADDR_VAR 0 5
78794: PUSH
78795: LD_VAR 0 5
78799: PPUSH
78800: LD_INT 1
78802: PPUSH
78803: CALL_OW 3
78807: ST_TO_ADDR
// if not ext_list then
78808: LD_VAR 0 5
78812: NOT
78813: IFFALSE 78819
// exit ;
78815: POP
78816: POP
78817: GO 78823
// end ;
78819: GO 78694
78821: POP
78822: POP
// end ;
78823: LD_VAR 0 6
78827: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
78828: LD_INT 0
78830: PPUSH
// if not mc_bases or not base or not weapon_list then
78831: LD_EXP 52
78835: NOT
78836: PUSH
78837: LD_VAR 0 1
78841: NOT
78842: OR
78843: PUSH
78844: LD_VAR 0 2
78848: NOT
78849: OR
78850: IFFALSE 78854
// exit ;
78852: GO 78879
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
78854: LD_ADDR_EXP 91
78858: PUSH
78859: LD_EXP 91
78863: PPUSH
78864: LD_VAR 0 1
78868: PPUSH
78869: LD_VAR 0 2
78873: PPUSH
78874: CALL_OW 1
78878: ST_TO_ADDR
// end ;
78879: LD_VAR 0 3
78883: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
78884: LD_INT 0
78886: PPUSH
// if not mc_bases or not base or not tech_list then
78887: LD_EXP 52
78891: NOT
78892: PUSH
78893: LD_VAR 0 1
78897: NOT
78898: OR
78899: PUSH
78900: LD_VAR 0 2
78904: NOT
78905: OR
78906: IFFALSE 78910
// exit ;
78908: GO 78935
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
78910: LD_ADDR_EXP 79
78914: PUSH
78915: LD_EXP 79
78919: PPUSH
78920: LD_VAR 0 1
78924: PPUSH
78925: LD_VAR 0 2
78929: PPUSH
78930: CALL_OW 1
78934: ST_TO_ADDR
// end ;
78935: LD_VAR 0 3
78939: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
78940: LD_INT 0
78942: PPUSH
// if not mc_bases or not parking_area or not base then
78943: LD_EXP 52
78947: NOT
78948: PUSH
78949: LD_VAR 0 2
78953: NOT
78954: OR
78955: PUSH
78956: LD_VAR 0 1
78960: NOT
78961: OR
78962: IFFALSE 78966
// exit ;
78964: GO 78991
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
78966: LD_ADDR_EXP 76
78970: PUSH
78971: LD_EXP 76
78975: PPUSH
78976: LD_VAR 0 1
78980: PPUSH
78981: LD_VAR 0 2
78985: PPUSH
78986: CALL_OW 1
78990: ST_TO_ADDR
// end ;
78991: LD_VAR 0 3
78995: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
78996: LD_INT 0
78998: PPUSH
// if not mc_bases or not base or not scan_area then
78999: LD_EXP 52
79003: NOT
79004: PUSH
79005: LD_VAR 0 1
79009: NOT
79010: OR
79011: PUSH
79012: LD_VAR 0 2
79016: NOT
79017: OR
79018: IFFALSE 79022
// exit ;
79020: GO 79047
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
79022: LD_ADDR_EXP 77
79026: PUSH
79027: LD_EXP 77
79031: PPUSH
79032: LD_VAR 0 1
79036: PPUSH
79037: LD_VAR 0 2
79041: PPUSH
79042: CALL_OW 1
79046: ST_TO_ADDR
// end ;
79047: LD_VAR 0 3
79051: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
79052: LD_INT 0
79054: PPUSH
79055: PPUSH
// if not mc_bases or not base then
79056: LD_EXP 52
79060: NOT
79061: PUSH
79062: LD_VAR 0 1
79066: NOT
79067: OR
79068: IFFALSE 79072
// exit ;
79070: GO 79136
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
79072: LD_ADDR_VAR 0 3
79076: PUSH
79077: LD_INT 1
79079: PUSH
79080: LD_INT 2
79082: PUSH
79083: LD_INT 3
79085: PUSH
79086: LD_INT 4
79088: PUSH
79089: LD_INT 11
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
79099: LD_ADDR_EXP 79
79103: PUSH
79104: LD_EXP 79
79108: PPUSH
79109: LD_VAR 0 1
79113: PPUSH
79114: LD_EXP 79
79118: PUSH
79119: LD_VAR 0 1
79123: ARRAY
79124: PUSH
79125: LD_VAR 0 3
79129: DIFF
79130: PPUSH
79131: CALL_OW 1
79135: ST_TO_ADDR
// end ;
79136: LD_VAR 0 2
79140: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
79141: LD_INT 0
79143: PPUSH
// result := mc_vehicles [ base ] ;
79144: LD_ADDR_VAR 0 3
79148: PUSH
79149: LD_EXP 71
79153: PUSH
79154: LD_VAR 0 1
79158: ARRAY
79159: ST_TO_ADDR
// if onlyCombat then
79160: LD_VAR 0 2
79164: IFFALSE 79329
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
79166: LD_ADDR_VAR 0 3
79170: PUSH
79171: LD_VAR 0 3
79175: PUSH
79176: LD_VAR 0 3
79180: PPUSH
79181: LD_INT 2
79183: PUSH
79184: LD_INT 34
79186: PUSH
79187: LD_INT 12
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 34
79196: PUSH
79197: LD_INT 51
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: PUSH
79204: LD_INT 34
79206: PUSH
79207: LD_EXP 46
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: PUSH
79216: LD_INT 34
79218: PUSH
79219: LD_INT 32
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: PUSH
79226: LD_INT 34
79228: PUSH
79229: LD_INT 13
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: PUSH
79236: LD_INT 34
79238: PUSH
79239: LD_INT 52
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: PUSH
79246: LD_INT 34
79248: PUSH
79249: LD_INT 14
79251: PUSH
79252: EMPTY
79253: LIST
79254: LIST
79255: PUSH
79256: LD_INT 34
79258: PUSH
79259: LD_INT 53
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PUSH
79266: LD_INT 34
79268: PUSH
79269: LD_EXP 45
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 34
79280: PUSH
79281: LD_INT 31
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PUSH
79288: LD_INT 34
79290: PUSH
79291: LD_INT 48
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: PUSH
79298: LD_INT 34
79300: PUSH
79301: LD_INT 8
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: PPUSH
79323: CALL_OW 72
79327: DIFF
79328: ST_TO_ADDR
// end ; end_of_file
79329: LD_VAR 0 3
79333: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
79334: LD_INT 0
79336: PPUSH
79337: PPUSH
79338: PPUSH
// if not mc_bases or not skirmish then
79339: LD_EXP 52
79343: NOT
79344: PUSH
79345: LD_EXP 50
79349: NOT
79350: OR
79351: IFFALSE 79355
// exit ;
79353: GO 79520
// for i = 1 to mc_bases do
79355: LD_ADDR_VAR 0 4
79359: PUSH
79360: DOUBLE
79361: LD_INT 1
79363: DEC
79364: ST_TO_ADDR
79365: LD_EXP 52
79369: PUSH
79370: FOR_TO
79371: IFFALSE 79518
// begin if sci in mc_bases [ i ] then
79373: LD_VAR 0 2
79377: PUSH
79378: LD_EXP 52
79382: PUSH
79383: LD_VAR 0 4
79387: ARRAY
79388: IN
79389: IFFALSE 79516
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79391: LD_ADDR_EXP 81
79395: PUSH
79396: LD_EXP 81
79400: PPUSH
79401: LD_VAR 0 4
79405: PUSH
79406: LD_EXP 81
79410: PUSH
79411: LD_VAR 0 4
79415: ARRAY
79416: PUSH
79417: LD_INT 1
79419: PLUS
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: PPUSH
79425: LD_VAR 0 1
79429: PPUSH
79430: CALL 18171 0 3
79434: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79435: LD_ADDR_VAR 0 5
79439: PUSH
79440: LD_EXP 52
79444: PUSH
79445: LD_VAR 0 4
79449: ARRAY
79450: PPUSH
79451: LD_INT 2
79453: PUSH
79454: LD_INT 30
79456: PUSH
79457: LD_INT 0
79459: PUSH
79460: EMPTY
79461: LIST
79462: LIST
79463: PUSH
79464: LD_INT 30
79466: PUSH
79467: LD_INT 1
79469: PUSH
79470: EMPTY
79471: LIST
79472: LIST
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: LIST
79478: PPUSH
79479: CALL_OW 72
79483: PPUSH
79484: LD_VAR 0 1
79488: PPUSH
79489: CALL_OW 74
79493: ST_TO_ADDR
// if tmp then
79494: LD_VAR 0 5
79498: IFFALSE 79514
// ComStandNearbyBuilding ( ape , tmp ) ;
79500: LD_VAR 0 1
79504: PPUSH
79505: LD_VAR 0 5
79509: PPUSH
79510: CALL 12523 0 2
// break ;
79514: GO 79518
// end ; end ;
79516: GO 79370
79518: POP
79519: POP
// end ;
79520: LD_VAR 0 3
79524: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79525: LD_INT 0
79527: PPUSH
79528: PPUSH
79529: PPUSH
// if not mc_bases or not skirmish then
79530: LD_EXP 52
79534: NOT
79535: PUSH
79536: LD_EXP 50
79540: NOT
79541: OR
79542: IFFALSE 79546
// exit ;
79544: GO 79635
// for i = 1 to mc_bases do
79546: LD_ADDR_VAR 0 4
79550: PUSH
79551: DOUBLE
79552: LD_INT 1
79554: DEC
79555: ST_TO_ADDR
79556: LD_EXP 52
79560: PUSH
79561: FOR_TO
79562: IFFALSE 79633
// begin if building in mc_busy_turret_list [ i ] then
79564: LD_VAR 0 1
79568: PUSH
79569: LD_EXP 62
79573: PUSH
79574: LD_VAR 0 4
79578: ARRAY
79579: IN
79580: IFFALSE 79631
// begin tmp := mc_busy_turret_list [ i ] diff building ;
79582: LD_ADDR_VAR 0 5
79586: PUSH
79587: LD_EXP 62
79591: PUSH
79592: LD_VAR 0 4
79596: ARRAY
79597: PUSH
79598: LD_VAR 0 1
79602: DIFF
79603: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
79604: LD_ADDR_EXP 62
79608: PUSH
79609: LD_EXP 62
79613: PPUSH
79614: LD_VAR 0 4
79618: PPUSH
79619: LD_VAR 0 5
79623: PPUSH
79624: CALL_OW 1
79628: ST_TO_ADDR
// break ;
79629: GO 79633
// end ; end ;
79631: GO 79561
79633: POP
79634: POP
// end ;
79635: LD_VAR 0 3
79639: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
79640: LD_INT 0
79642: PPUSH
79643: PPUSH
79644: PPUSH
// if not mc_bases or not skirmish then
79645: LD_EXP 52
79649: NOT
79650: PUSH
79651: LD_EXP 50
79655: NOT
79656: OR
79657: IFFALSE 79661
// exit ;
79659: GO 79860
// for i = 1 to mc_bases do
79661: LD_ADDR_VAR 0 5
79665: PUSH
79666: DOUBLE
79667: LD_INT 1
79669: DEC
79670: ST_TO_ADDR
79671: LD_EXP 52
79675: PUSH
79676: FOR_TO
79677: IFFALSE 79858
// if building in mc_bases [ i ] then
79679: LD_VAR 0 1
79683: PUSH
79684: LD_EXP 52
79688: PUSH
79689: LD_VAR 0 5
79693: ARRAY
79694: IN
79695: IFFALSE 79856
// begin tmp := mc_bases [ i ] diff building ;
79697: LD_ADDR_VAR 0 6
79701: PUSH
79702: LD_EXP 52
79706: PUSH
79707: LD_VAR 0 5
79711: ARRAY
79712: PUSH
79713: LD_VAR 0 1
79717: DIFF
79718: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
79719: LD_ADDR_EXP 52
79723: PUSH
79724: LD_EXP 52
79728: PPUSH
79729: LD_VAR 0 5
79733: PPUSH
79734: LD_VAR 0 6
79738: PPUSH
79739: CALL_OW 1
79743: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
79744: LD_VAR 0 1
79748: PUSH
79749: LD_EXP 60
79753: PUSH
79754: LD_VAR 0 5
79758: ARRAY
79759: IN
79760: IFFALSE 79799
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
79762: LD_ADDR_EXP 60
79766: PUSH
79767: LD_EXP 60
79771: PPUSH
79772: LD_VAR 0 5
79776: PPUSH
79777: LD_EXP 60
79781: PUSH
79782: LD_VAR 0 5
79786: ARRAY
79787: PUSH
79788: LD_VAR 0 1
79792: DIFF
79793: PPUSH
79794: CALL_OW 1
79798: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
79799: LD_VAR 0 1
79803: PUSH
79804: LD_EXP 61
79808: PUSH
79809: LD_VAR 0 5
79813: ARRAY
79814: IN
79815: IFFALSE 79854
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
79817: LD_ADDR_EXP 61
79821: PUSH
79822: LD_EXP 61
79826: PPUSH
79827: LD_VAR 0 5
79831: PPUSH
79832: LD_EXP 61
79836: PUSH
79837: LD_VAR 0 5
79841: ARRAY
79842: PUSH
79843: LD_VAR 0 1
79847: DIFF
79848: PPUSH
79849: CALL_OW 1
79853: ST_TO_ADDR
// break ;
79854: GO 79858
// end ;
79856: GO 79676
79858: POP
79859: POP
// end ;
79860: LD_VAR 0 4
79864: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
79865: LD_INT 0
79867: PPUSH
79868: PPUSH
79869: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
79870: LD_EXP 52
79874: NOT
79875: PUSH
79876: LD_EXP 50
79880: NOT
79881: OR
79882: PUSH
79883: LD_VAR 0 3
79887: PUSH
79888: LD_EXP 78
79892: IN
79893: NOT
79894: OR
79895: IFFALSE 79899
// exit ;
79897: GO 80022
// for i = 1 to mc_vehicles do
79899: LD_ADDR_VAR 0 6
79903: PUSH
79904: DOUBLE
79905: LD_INT 1
79907: DEC
79908: ST_TO_ADDR
79909: LD_EXP 71
79913: PUSH
79914: FOR_TO
79915: IFFALSE 80020
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
79917: LD_VAR 0 2
79921: PUSH
79922: LD_EXP 71
79926: PUSH
79927: LD_VAR 0 6
79931: ARRAY
79932: IN
79933: PUSH
79934: LD_VAR 0 1
79938: PUSH
79939: LD_EXP 71
79943: PUSH
79944: LD_VAR 0 6
79948: ARRAY
79949: IN
79950: OR
79951: IFFALSE 80018
// begin tmp := mc_vehicles [ i ] diff old ;
79953: LD_ADDR_VAR 0 7
79957: PUSH
79958: LD_EXP 71
79962: PUSH
79963: LD_VAR 0 6
79967: ARRAY
79968: PUSH
79969: LD_VAR 0 2
79973: DIFF
79974: ST_TO_ADDR
// tmp := tmp diff new ;
79975: LD_ADDR_VAR 0 7
79979: PUSH
79980: LD_VAR 0 7
79984: PUSH
79985: LD_VAR 0 1
79989: DIFF
79990: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
79991: LD_ADDR_EXP 71
79995: PUSH
79996: LD_EXP 71
80000: PPUSH
80001: LD_VAR 0 6
80005: PPUSH
80006: LD_VAR 0 7
80010: PPUSH
80011: CALL_OW 1
80015: ST_TO_ADDR
// break ;
80016: GO 80020
// end ;
80018: GO 79914
80020: POP
80021: POP
// end ;
80022: LD_VAR 0 5
80026: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
80027: LD_INT 0
80029: PPUSH
80030: PPUSH
80031: PPUSH
80032: PPUSH
// if not mc_bases or not skirmish then
80033: LD_EXP 52
80037: NOT
80038: PUSH
80039: LD_EXP 50
80043: NOT
80044: OR
80045: IFFALSE 80049
// exit ;
80047: GO 80426
// side := GetSide ( vehicle ) ;
80049: LD_ADDR_VAR 0 5
80053: PUSH
80054: LD_VAR 0 1
80058: PPUSH
80059: CALL_OW 255
80063: ST_TO_ADDR
// for i = 1 to mc_bases do
80064: LD_ADDR_VAR 0 4
80068: PUSH
80069: DOUBLE
80070: LD_INT 1
80072: DEC
80073: ST_TO_ADDR
80074: LD_EXP 52
80078: PUSH
80079: FOR_TO
80080: IFFALSE 80424
// begin if factory in mc_bases [ i ] then
80082: LD_VAR 0 2
80086: PUSH
80087: LD_EXP 52
80091: PUSH
80092: LD_VAR 0 4
80096: ARRAY
80097: IN
80098: IFFALSE 80422
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
80100: LD_EXP 74
80104: PUSH
80105: LD_VAR 0 4
80109: ARRAY
80110: PUSH
80111: LD_EXP 63
80115: PUSH
80116: LD_VAR 0 4
80120: ARRAY
80121: LESS
80122: PUSH
80123: LD_VAR 0 1
80127: PPUSH
80128: CALL_OW 264
80132: PUSH
80133: LD_INT 31
80135: PUSH
80136: LD_INT 32
80138: PUSH
80139: LD_INT 51
80141: PUSH
80142: LD_EXP 46
80146: PUSH
80147: LD_INT 12
80149: PUSH
80150: LD_INT 30
80152: PUSH
80153: LD_EXP 45
80157: PUSH
80158: LD_INT 11
80160: PUSH
80161: LD_INT 53
80163: PUSH
80164: LD_INT 14
80166: PUSH
80167: LD_EXP 49
80171: PUSH
80172: LD_INT 29
80174: PUSH
80175: LD_EXP 47
80179: PUSH
80180: LD_INT 13
80182: PUSH
80183: LD_INT 52
80185: PUSH
80186: LD_INT 48
80188: PUSH
80189: LD_INT 8
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: LIST
80196: LIST
80197: LIST
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: LIST
80203: LIST
80204: LIST
80205: LIST
80206: LIST
80207: LIST
80208: LIST
80209: LIST
80210: IN
80211: NOT
80212: AND
80213: IFFALSE 80261
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
80215: LD_ADDR_EXP 74
80219: PUSH
80220: LD_EXP 74
80224: PPUSH
80225: LD_VAR 0 4
80229: PUSH
80230: LD_EXP 74
80234: PUSH
80235: LD_VAR 0 4
80239: ARRAY
80240: PUSH
80241: LD_INT 1
80243: PLUS
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: PPUSH
80249: LD_VAR 0 1
80253: PPUSH
80254: CALL 18171 0 3
80258: ST_TO_ADDR
80259: GO 80305
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
80261: LD_ADDR_EXP 71
80265: PUSH
80266: LD_EXP 71
80270: PPUSH
80271: LD_VAR 0 4
80275: PUSH
80276: LD_EXP 71
80280: PUSH
80281: LD_VAR 0 4
80285: ARRAY
80286: PUSH
80287: LD_INT 1
80289: PLUS
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: PPUSH
80295: LD_VAR 0 1
80299: PPUSH
80300: CALL 18171 0 3
80304: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
80305: LD_VAR 0 1
80309: PPUSH
80310: CALL_OW 263
80314: PUSH
80315: LD_INT 2
80317: EQUAL
80318: IFFALSE 80338
// begin repeat wait ( 0 0$1 ) ;
80320: LD_INT 35
80322: PPUSH
80323: CALL_OW 67
// until IsControledBy ( vehicle ) ;
80327: LD_VAR 0 1
80331: PPUSH
80332: CALL_OW 312
80336: IFFALSE 80320
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
80338: LD_VAR 0 1
80342: PPUSH
80343: LD_EXP 76
80347: PUSH
80348: LD_VAR 0 4
80352: ARRAY
80353: PPUSH
80354: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
80358: LD_VAR 0 1
80362: PPUSH
80363: CALL_OW 263
80367: PUSH
80368: LD_INT 1
80370: NONEQUAL
80371: IFFALSE 80375
// break ;
80373: GO 80424
// repeat wait ( 0 0$1 ) ;
80375: LD_INT 35
80377: PPUSH
80378: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
80382: LD_VAR 0 1
80386: PPUSH
80387: LD_EXP 76
80391: PUSH
80392: LD_VAR 0 4
80396: ARRAY
80397: PPUSH
80398: CALL_OW 308
80402: IFFALSE 80375
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
80404: LD_VAR 0 1
80408: PPUSH
80409: CALL_OW 311
80413: PPUSH
80414: CALL_OW 121
// exit ;
80418: POP
80419: POP
80420: GO 80426
// end ; end ;
80422: GO 80079
80424: POP
80425: POP
// end ;
80426: LD_VAR 0 3
80430: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
80431: LD_INT 0
80433: PPUSH
80434: PPUSH
80435: PPUSH
80436: PPUSH
// if not mc_bases or not skirmish then
80437: LD_EXP 52
80441: NOT
80442: PUSH
80443: LD_EXP 50
80447: NOT
80448: OR
80449: IFFALSE 80453
// exit ;
80451: GO 80806
// repeat wait ( 0 0$1 ) ;
80453: LD_INT 35
80455: PPUSH
80456: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
80460: LD_VAR 0 2
80464: PPUSH
80465: LD_VAR 0 3
80469: PPUSH
80470: CALL_OW 284
80474: IFFALSE 80453
// if GetResourceTypeXY ( x , y ) = mat_artefact then
80476: LD_VAR 0 2
80480: PPUSH
80481: LD_VAR 0 3
80485: PPUSH
80486: CALL_OW 283
80490: PUSH
80491: LD_INT 4
80493: EQUAL
80494: IFFALSE 80498
// exit ;
80496: GO 80806
// for i = 1 to mc_bases do
80498: LD_ADDR_VAR 0 7
80502: PUSH
80503: DOUBLE
80504: LD_INT 1
80506: DEC
80507: ST_TO_ADDR
80508: LD_EXP 52
80512: PUSH
80513: FOR_TO
80514: IFFALSE 80804
// begin if mc_crates_area [ i ] then
80516: LD_EXP 70
80520: PUSH
80521: LD_VAR 0 7
80525: ARRAY
80526: IFFALSE 80637
// for j in mc_crates_area [ i ] do
80528: LD_ADDR_VAR 0 8
80532: PUSH
80533: LD_EXP 70
80537: PUSH
80538: LD_VAR 0 7
80542: ARRAY
80543: PUSH
80544: FOR_IN
80545: IFFALSE 80635
// if InArea ( x , y , j ) then
80547: LD_VAR 0 2
80551: PPUSH
80552: LD_VAR 0 3
80556: PPUSH
80557: LD_VAR 0 8
80561: PPUSH
80562: CALL_OW 309
80566: IFFALSE 80633
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80568: LD_ADDR_EXP 68
80572: PUSH
80573: LD_EXP 68
80577: PPUSH
80578: LD_VAR 0 7
80582: PUSH
80583: LD_EXP 68
80587: PUSH
80588: LD_VAR 0 7
80592: ARRAY
80593: PUSH
80594: LD_INT 1
80596: PLUS
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: PPUSH
80602: LD_VAR 0 4
80606: PUSH
80607: LD_VAR 0 2
80611: PUSH
80612: LD_VAR 0 3
80616: PUSH
80617: EMPTY
80618: LIST
80619: LIST
80620: LIST
80621: PPUSH
80622: CALL 18171 0 3
80626: ST_TO_ADDR
// exit ;
80627: POP
80628: POP
80629: POP
80630: POP
80631: GO 80806
// end ;
80633: GO 80544
80635: POP
80636: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80637: LD_ADDR_VAR 0 9
80641: PUSH
80642: LD_EXP 52
80646: PUSH
80647: LD_VAR 0 7
80651: ARRAY
80652: PPUSH
80653: LD_INT 2
80655: PUSH
80656: LD_INT 30
80658: PUSH
80659: LD_INT 0
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: LD_INT 30
80668: PUSH
80669: LD_INT 1
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: PUSH
80676: EMPTY
80677: LIST
80678: LIST
80679: LIST
80680: PPUSH
80681: CALL_OW 72
80685: ST_TO_ADDR
// if not depot then
80686: LD_VAR 0 9
80690: NOT
80691: IFFALSE 80695
// continue ;
80693: GO 80513
// for j in depot do
80695: LD_ADDR_VAR 0 8
80699: PUSH
80700: LD_VAR 0 9
80704: PUSH
80705: FOR_IN
80706: IFFALSE 80800
// if GetDistUnitXY ( j , x , y ) < 30 then
80708: LD_VAR 0 8
80712: PPUSH
80713: LD_VAR 0 2
80717: PPUSH
80718: LD_VAR 0 3
80722: PPUSH
80723: CALL_OW 297
80727: PUSH
80728: LD_INT 30
80730: LESS
80731: IFFALSE 80798
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80733: LD_ADDR_EXP 68
80737: PUSH
80738: LD_EXP 68
80742: PPUSH
80743: LD_VAR 0 7
80747: PUSH
80748: LD_EXP 68
80752: PUSH
80753: LD_VAR 0 7
80757: ARRAY
80758: PUSH
80759: LD_INT 1
80761: PLUS
80762: PUSH
80763: EMPTY
80764: LIST
80765: LIST
80766: PPUSH
80767: LD_VAR 0 4
80771: PUSH
80772: LD_VAR 0 2
80776: PUSH
80777: LD_VAR 0 3
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: LIST
80786: PPUSH
80787: CALL 18171 0 3
80791: ST_TO_ADDR
// exit ;
80792: POP
80793: POP
80794: POP
80795: POP
80796: GO 80806
// end ;
80798: GO 80705
80800: POP
80801: POP
// end ;
80802: GO 80513
80804: POP
80805: POP
// end ;
80806: LD_VAR 0 6
80810: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
80811: LD_INT 0
80813: PPUSH
80814: PPUSH
80815: PPUSH
80816: PPUSH
// if not mc_bases or not skirmish then
80817: LD_EXP 52
80821: NOT
80822: PUSH
80823: LD_EXP 50
80827: NOT
80828: OR
80829: IFFALSE 80833
// exit ;
80831: GO 81110
// side := GetSide ( lab ) ;
80833: LD_ADDR_VAR 0 4
80837: PUSH
80838: LD_VAR 0 2
80842: PPUSH
80843: CALL_OW 255
80847: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
80848: LD_VAR 0 4
80852: PUSH
80853: LD_EXP 78
80857: IN
80858: NOT
80859: PUSH
80860: LD_EXP 79
80864: NOT
80865: OR
80866: PUSH
80867: LD_EXP 52
80871: NOT
80872: OR
80873: IFFALSE 80877
// exit ;
80875: GO 81110
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
80877: LD_ADDR_EXP 79
80881: PUSH
80882: LD_EXP 79
80886: PPUSH
80887: LD_VAR 0 4
80891: PPUSH
80892: LD_EXP 79
80896: PUSH
80897: LD_VAR 0 4
80901: ARRAY
80902: PUSH
80903: LD_VAR 0 1
80907: DIFF
80908: PPUSH
80909: CALL_OW 1
80913: ST_TO_ADDR
// for i = 1 to mc_bases do
80914: LD_ADDR_VAR 0 5
80918: PUSH
80919: DOUBLE
80920: LD_INT 1
80922: DEC
80923: ST_TO_ADDR
80924: LD_EXP 52
80928: PUSH
80929: FOR_TO
80930: IFFALSE 81108
// begin if lab in mc_bases [ i ] then
80932: LD_VAR 0 2
80936: PUSH
80937: LD_EXP 52
80941: PUSH
80942: LD_VAR 0 5
80946: ARRAY
80947: IN
80948: IFFALSE 81106
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
80950: LD_VAR 0 1
80954: PUSH
80955: LD_INT 11
80957: PUSH
80958: LD_INT 4
80960: PUSH
80961: LD_INT 3
80963: PUSH
80964: LD_INT 2
80966: PUSH
80967: EMPTY
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: IN
80973: PUSH
80974: LD_EXP 82
80978: PUSH
80979: LD_VAR 0 5
80983: ARRAY
80984: AND
80985: IFFALSE 81106
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
80987: LD_ADDR_VAR 0 6
80991: PUSH
80992: LD_EXP 82
80996: PUSH
80997: LD_VAR 0 5
81001: ARRAY
81002: PUSH
81003: LD_INT 1
81005: ARRAY
81006: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81007: LD_ADDR_EXP 82
81011: PUSH
81012: LD_EXP 82
81016: PPUSH
81017: LD_VAR 0 5
81021: PPUSH
81022: EMPTY
81023: PPUSH
81024: CALL_OW 1
81028: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
81029: LD_VAR 0 6
81033: PPUSH
81034: LD_INT 0
81036: PPUSH
81037: CALL_OW 109
// ComExitBuilding ( tmp ) ;
81041: LD_VAR 0 6
81045: PPUSH
81046: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
81050: LD_ADDR_EXP 81
81054: PUSH
81055: LD_EXP 81
81059: PPUSH
81060: LD_VAR 0 5
81064: PPUSH
81065: LD_EXP 81
81069: PUSH
81070: LD_VAR 0 5
81074: ARRAY
81075: PPUSH
81076: LD_INT 1
81078: PPUSH
81079: LD_VAR 0 6
81083: PPUSH
81084: CALL_OW 2
81088: PPUSH
81089: CALL_OW 1
81093: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
81094: LD_VAR 0 5
81098: PPUSH
81099: LD_INT 112
81101: PPUSH
81102: CALL 58218 0 2
// end ; end ; end ;
81106: GO 80929
81108: POP
81109: POP
// end ;
81110: LD_VAR 0 3
81114: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
81115: LD_INT 0
81117: PPUSH
81118: PPUSH
81119: PPUSH
81120: PPUSH
81121: PPUSH
81122: PPUSH
81123: PPUSH
81124: PPUSH
// if not mc_bases or not skirmish then
81125: LD_EXP 52
81129: NOT
81130: PUSH
81131: LD_EXP 50
81135: NOT
81136: OR
81137: IFFALSE 81141
// exit ;
81139: GO 82378
// for i = 1 to mc_bases do
81141: LD_ADDR_VAR 0 3
81145: PUSH
81146: DOUBLE
81147: LD_INT 1
81149: DEC
81150: ST_TO_ADDR
81151: LD_EXP 52
81155: PUSH
81156: FOR_TO
81157: IFFALSE 82376
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
81159: LD_VAR 0 1
81163: PUSH
81164: LD_EXP 52
81168: PUSH
81169: LD_VAR 0 3
81173: ARRAY
81174: IN
81175: PUSH
81176: LD_VAR 0 1
81180: PUSH
81181: LD_EXP 59
81185: PUSH
81186: LD_VAR 0 3
81190: ARRAY
81191: IN
81192: OR
81193: PUSH
81194: LD_VAR 0 1
81198: PUSH
81199: LD_EXP 74
81203: PUSH
81204: LD_VAR 0 3
81208: ARRAY
81209: IN
81210: OR
81211: PUSH
81212: LD_VAR 0 1
81216: PUSH
81217: LD_EXP 71
81221: PUSH
81222: LD_VAR 0 3
81226: ARRAY
81227: IN
81228: OR
81229: PUSH
81230: LD_VAR 0 1
81234: PUSH
81235: LD_EXP 81
81239: PUSH
81240: LD_VAR 0 3
81244: ARRAY
81245: IN
81246: OR
81247: PUSH
81248: LD_VAR 0 1
81252: PUSH
81253: LD_EXP 82
81257: PUSH
81258: LD_VAR 0 3
81262: ARRAY
81263: IN
81264: OR
81265: IFFALSE 82374
// begin if un in mc_ape [ i ] then
81267: LD_VAR 0 1
81271: PUSH
81272: LD_EXP 81
81276: PUSH
81277: LD_VAR 0 3
81281: ARRAY
81282: IN
81283: IFFALSE 81322
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
81285: LD_ADDR_EXP 81
81289: PUSH
81290: LD_EXP 81
81294: PPUSH
81295: LD_VAR 0 3
81299: PPUSH
81300: LD_EXP 81
81304: PUSH
81305: LD_VAR 0 3
81309: ARRAY
81310: PUSH
81311: LD_VAR 0 1
81315: DIFF
81316: PPUSH
81317: CALL_OW 1
81321: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
81322: LD_VAR 0 1
81326: PUSH
81327: LD_EXP 82
81331: PUSH
81332: LD_VAR 0 3
81336: ARRAY
81337: IN
81338: IFFALSE 81362
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81340: LD_ADDR_EXP 82
81344: PUSH
81345: LD_EXP 82
81349: PPUSH
81350: LD_VAR 0 3
81354: PPUSH
81355: EMPTY
81356: PPUSH
81357: CALL_OW 1
81361: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
81362: LD_VAR 0 1
81366: PPUSH
81367: CALL_OW 247
81371: PUSH
81372: LD_INT 2
81374: EQUAL
81375: PUSH
81376: LD_VAR 0 1
81380: PPUSH
81381: CALL_OW 110
81385: PUSH
81386: LD_INT 20
81388: EQUAL
81389: PUSH
81390: LD_VAR 0 1
81394: PUSH
81395: LD_EXP 74
81399: PUSH
81400: LD_VAR 0 3
81404: ARRAY
81405: IN
81406: OR
81407: PUSH
81408: LD_VAR 0 1
81412: PPUSH
81413: CALL_OW 264
81417: PUSH
81418: LD_INT 12
81420: PUSH
81421: LD_INT 51
81423: PUSH
81424: LD_EXP 46
81428: PUSH
81429: LD_INT 32
81431: PUSH
81432: LD_INT 13
81434: PUSH
81435: LD_INT 52
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: LIST
81442: LIST
81443: LIST
81444: LIST
81445: IN
81446: OR
81447: AND
81448: IFFALSE 81626
// begin if un in mc_defender [ i ] then
81450: LD_VAR 0 1
81454: PUSH
81455: LD_EXP 74
81459: PUSH
81460: LD_VAR 0 3
81464: ARRAY
81465: IN
81466: IFFALSE 81505
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81468: LD_ADDR_EXP 74
81472: PUSH
81473: LD_EXP 74
81477: PPUSH
81478: LD_VAR 0 3
81482: PPUSH
81483: LD_EXP 74
81487: PUSH
81488: LD_VAR 0 3
81492: ARRAY
81493: PUSH
81494: LD_VAR 0 1
81498: DIFF
81499: PPUSH
81500: CALL_OW 1
81504: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
81505: LD_ADDR_VAR 0 8
81509: PUSH
81510: LD_VAR 0 3
81514: PPUSH
81515: LD_INT 3
81517: PPUSH
81518: CALL 78178 0 2
81522: ST_TO_ADDR
// if fac then
81523: LD_VAR 0 8
81527: IFFALSE 81626
// begin for j in fac do
81529: LD_ADDR_VAR 0 4
81533: PUSH
81534: LD_VAR 0 8
81538: PUSH
81539: FOR_IN
81540: IFFALSE 81624
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
81542: LD_ADDR_VAR 0 9
81546: PUSH
81547: LD_VAR 0 8
81551: PPUSH
81552: LD_VAR 0 1
81556: PPUSH
81557: CALL_OW 265
81561: PPUSH
81562: LD_VAR 0 1
81566: PPUSH
81567: CALL_OW 262
81571: PPUSH
81572: LD_VAR 0 1
81576: PPUSH
81577: CALL_OW 263
81581: PPUSH
81582: LD_VAR 0 1
81586: PPUSH
81587: CALL_OW 264
81591: PPUSH
81592: CALL 15703 0 5
81596: ST_TO_ADDR
// if components then
81597: LD_VAR 0 9
81601: IFFALSE 81622
// begin MC_InsertProduceList ( i , [ components ] ) ;
81603: LD_VAR 0 3
81607: PPUSH
81608: LD_VAR 0 9
81612: PUSH
81613: EMPTY
81614: LIST
81615: PPUSH
81616: CALL 77723 0 2
// break ;
81620: GO 81624
// end ; end ;
81622: GO 81539
81624: POP
81625: POP
// end ; end ; if GetType ( un ) = unit_building then
81626: LD_VAR 0 1
81630: PPUSH
81631: CALL_OW 247
81635: PUSH
81636: LD_INT 3
81638: EQUAL
81639: IFFALSE 82042
// begin btype := GetBType ( un ) ;
81641: LD_ADDR_VAR 0 5
81645: PUSH
81646: LD_VAR 0 1
81650: PPUSH
81651: CALL_OW 266
81655: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
81656: LD_VAR 0 5
81660: PUSH
81661: LD_INT 29
81663: PUSH
81664: LD_INT 30
81666: PUSH
81667: EMPTY
81668: LIST
81669: LIST
81670: IN
81671: IFFALSE 81744
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
81673: LD_VAR 0 1
81677: PPUSH
81678: CALL_OW 250
81682: PPUSH
81683: LD_VAR 0 1
81687: PPUSH
81688: CALL_OW 251
81692: PPUSH
81693: LD_VAR 0 1
81697: PPUSH
81698: CALL_OW 255
81702: PPUSH
81703: CALL_OW 440
81707: NOT
81708: IFFALSE 81744
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
81710: LD_VAR 0 1
81714: PPUSH
81715: CALL_OW 250
81719: PPUSH
81720: LD_VAR 0 1
81724: PPUSH
81725: CALL_OW 251
81729: PPUSH
81730: LD_VAR 0 1
81734: PPUSH
81735: CALL_OW 255
81739: PPUSH
81740: CALL_OW 441
// end ; if btype = b_warehouse then
81744: LD_VAR 0 5
81748: PUSH
81749: LD_INT 1
81751: EQUAL
81752: IFFALSE 81770
// begin btype := b_depot ;
81754: LD_ADDR_VAR 0 5
81758: PUSH
81759: LD_INT 0
81761: ST_TO_ADDR
// pos := 1 ;
81762: LD_ADDR_VAR 0 6
81766: PUSH
81767: LD_INT 1
81769: ST_TO_ADDR
// end ; if btype = b_factory then
81770: LD_VAR 0 5
81774: PUSH
81775: LD_INT 3
81777: EQUAL
81778: IFFALSE 81796
// begin btype := b_workshop ;
81780: LD_ADDR_VAR 0 5
81784: PUSH
81785: LD_INT 2
81787: ST_TO_ADDR
// pos := 1 ;
81788: LD_ADDR_VAR 0 6
81792: PUSH
81793: LD_INT 1
81795: ST_TO_ADDR
// end ; if btype = b_barracks then
81796: LD_VAR 0 5
81800: PUSH
81801: LD_INT 5
81803: EQUAL
81804: IFFALSE 81814
// btype := b_armoury ;
81806: LD_ADDR_VAR 0 5
81810: PUSH
81811: LD_INT 4
81813: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
81814: LD_VAR 0 5
81818: PUSH
81819: LD_INT 7
81821: PUSH
81822: LD_INT 8
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: IN
81829: IFFALSE 81839
// btype := b_lab ;
81831: LD_ADDR_VAR 0 5
81835: PUSH
81836: LD_INT 6
81838: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
81839: LD_ADDR_EXP 57
81843: PUSH
81844: LD_EXP 57
81848: PPUSH
81849: LD_VAR 0 3
81853: PUSH
81854: LD_EXP 57
81858: PUSH
81859: LD_VAR 0 3
81863: ARRAY
81864: PUSH
81865: LD_INT 1
81867: PLUS
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PPUSH
81873: LD_VAR 0 5
81877: PUSH
81878: LD_VAR 0 1
81882: PPUSH
81883: CALL_OW 250
81887: PUSH
81888: LD_VAR 0 1
81892: PPUSH
81893: CALL_OW 251
81897: PUSH
81898: LD_VAR 0 1
81902: PPUSH
81903: CALL_OW 254
81907: PUSH
81908: EMPTY
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: PPUSH
81914: CALL 18171 0 3
81918: ST_TO_ADDR
// if pos = 1 then
81919: LD_VAR 0 6
81923: PUSH
81924: LD_INT 1
81926: EQUAL
81927: IFFALSE 82042
// begin tmp := mc_build_list [ i ] ;
81929: LD_ADDR_VAR 0 7
81933: PUSH
81934: LD_EXP 57
81938: PUSH
81939: LD_VAR 0 3
81943: ARRAY
81944: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81945: LD_VAR 0 7
81949: PPUSH
81950: LD_INT 2
81952: PUSH
81953: LD_INT 30
81955: PUSH
81956: LD_INT 0
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: PUSH
81963: LD_INT 30
81965: PUSH
81966: LD_INT 1
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PUSH
81973: EMPTY
81974: LIST
81975: LIST
81976: LIST
81977: PPUSH
81978: CALL_OW 72
81982: IFFALSE 81992
// pos := 2 ;
81984: LD_ADDR_VAR 0 6
81988: PUSH
81989: LD_INT 2
81991: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
81992: LD_ADDR_VAR 0 7
81996: PUSH
81997: LD_VAR 0 7
82001: PPUSH
82002: LD_VAR 0 6
82006: PPUSH
82007: LD_VAR 0 7
82011: PPUSH
82012: CALL 18497 0 3
82016: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
82017: LD_ADDR_EXP 57
82021: PUSH
82022: LD_EXP 57
82026: PPUSH
82027: LD_VAR 0 3
82031: PPUSH
82032: LD_VAR 0 7
82036: PPUSH
82037: CALL_OW 1
82041: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
82042: LD_VAR 0 1
82046: PUSH
82047: LD_EXP 52
82051: PUSH
82052: LD_VAR 0 3
82056: ARRAY
82057: IN
82058: IFFALSE 82097
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
82060: LD_ADDR_EXP 52
82064: PUSH
82065: LD_EXP 52
82069: PPUSH
82070: LD_VAR 0 3
82074: PPUSH
82075: LD_EXP 52
82079: PUSH
82080: LD_VAR 0 3
82084: ARRAY
82085: PUSH
82086: LD_VAR 0 1
82090: DIFF
82091: PPUSH
82092: CALL_OW 1
82096: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
82097: LD_VAR 0 1
82101: PUSH
82102: LD_EXP 59
82106: PUSH
82107: LD_VAR 0 3
82111: ARRAY
82112: IN
82113: IFFALSE 82152
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
82115: LD_ADDR_EXP 59
82119: PUSH
82120: LD_EXP 59
82124: PPUSH
82125: LD_VAR 0 3
82129: PPUSH
82130: LD_EXP 59
82134: PUSH
82135: LD_VAR 0 3
82139: ARRAY
82140: PUSH
82141: LD_VAR 0 1
82145: DIFF
82146: PPUSH
82147: CALL_OW 1
82151: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
82152: LD_VAR 0 1
82156: PUSH
82157: LD_EXP 71
82161: PUSH
82162: LD_VAR 0 3
82166: ARRAY
82167: IN
82168: IFFALSE 82207
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
82170: LD_ADDR_EXP 71
82174: PUSH
82175: LD_EXP 71
82179: PPUSH
82180: LD_VAR 0 3
82184: PPUSH
82185: LD_EXP 71
82189: PUSH
82190: LD_VAR 0 3
82194: ARRAY
82195: PUSH
82196: LD_VAR 0 1
82200: DIFF
82201: PPUSH
82202: CALL_OW 1
82206: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
82207: LD_VAR 0 1
82211: PUSH
82212: LD_EXP 74
82216: PUSH
82217: LD_VAR 0 3
82221: ARRAY
82222: IN
82223: IFFALSE 82262
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
82225: LD_ADDR_EXP 74
82229: PUSH
82230: LD_EXP 74
82234: PPUSH
82235: LD_VAR 0 3
82239: PPUSH
82240: LD_EXP 74
82244: PUSH
82245: LD_VAR 0 3
82249: ARRAY
82250: PUSH
82251: LD_VAR 0 1
82255: DIFF
82256: PPUSH
82257: CALL_OW 1
82261: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
82262: LD_VAR 0 1
82266: PUSH
82267: LD_EXP 61
82271: PUSH
82272: LD_VAR 0 3
82276: ARRAY
82277: IN
82278: IFFALSE 82317
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
82280: LD_ADDR_EXP 61
82284: PUSH
82285: LD_EXP 61
82289: PPUSH
82290: LD_VAR 0 3
82294: PPUSH
82295: LD_EXP 61
82299: PUSH
82300: LD_VAR 0 3
82304: ARRAY
82305: PUSH
82306: LD_VAR 0 1
82310: DIFF
82311: PPUSH
82312: CALL_OW 1
82316: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
82317: LD_VAR 0 1
82321: PUSH
82322: LD_EXP 60
82326: PUSH
82327: LD_VAR 0 3
82331: ARRAY
82332: IN
82333: IFFALSE 82372
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
82335: LD_ADDR_EXP 60
82339: PUSH
82340: LD_EXP 60
82344: PPUSH
82345: LD_VAR 0 3
82349: PPUSH
82350: LD_EXP 60
82354: PUSH
82355: LD_VAR 0 3
82359: ARRAY
82360: PUSH
82361: LD_VAR 0 1
82365: DIFF
82366: PPUSH
82367: CALL_OW 1
82371: ST_TO_ADDR
// end ; break ;
82372: GO 82376
// end ;
82374: GO 81156
82376: POP
82377: POP
// end ;
82378: LD_VAR 0 2
82382: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
82383: LD_INT 0
82385: PPUSH
82386: PPUSH
82387: PPUSH
// if not mc_bases or not skirmish then
82388: LD_EXP 52
82392: NOT
82393: PUSH
82394: LD_EXP 50
82398: NOT
82399: OR
82400: IFFALSE 82404
// exit ;
82402: GO 82619
// for i = 1 to mc_bases do
82404: LD_ADDR_VAR 0 3
82408: PUSH
82409: DOUBLE
82410: LD_INT 1
82412: DEC
82413: ST_TO_ADDR
82414: LD_EXP 52
82418: PUSH
82419: FOR_TO
82420: IFFALSE 82617
// begin if building in mc_construct_list [ i ] then
82422: LD_VAR 0 1
82426: PUSH
82427: LD_EXP 59
82431: PUSH
82432: LD_VAR 0 3
82436: ARRAY
82437: IN
82438: IFFALSE 82615
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82440: LD_ADDR_EXP 59
82444: PUSH
82445: LD_EXP 59
82449: PPUSH
82450: LD_VAR 0 3
82454: PPUSH
82455: LD_EXP 59
82459: PUSH
82460: LD_VAR 0 3
82464: ARRAY
82465: PUSH
82466: LD_VAR 0 1
82470: DIFF
82471: PPUSH
82472: CALL_OW 1
82476: ST_TO_ADDR
// if building in mc_lab [ i ] then
82477: LD_VAR 0 1
82481: PUSH
82482: LD_EXP 85
82486: PUSH
82487: LD_VAR 0 3
82491: ARRAY
82492: IN
82493: IFFALSE 82548
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
82495: LD_ADDR_EXP 86
82499: PUSH
82500: LD_EXP 86
82504: PPUSH
82505: LD_VAR 0 3
82509: PPUSH
82510: LD_EXP 86
82514: PUSH
82515: LD_VAR 0 3
82519: ARRAY
82520: PPUSH
82521: LD_INT 1
82523: PPUSH
82524: LD_EXP 86
82528: PUSH
82529: LD_VAR 0 3
82533: ARRAY
82534: PPUSH
82535: LD_INT 0
82537: PPUSH
82538: CALL 17589 0 4
82542: PPUSH
82543: CALL_OW 1
82547: ST_TO_ADDR
// if not building in mc_bases [ i ] then
82548: LD_VAR 0 1
82552: PUSH
82553: LD_EXP 52
82557: PUSH
82558: LD_VAR 0 3
82562: ARRAY
82563: IN
82564: NOT
82565: IFFALSE 82611
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82567: LD_ADDR_EXP 52
82571: PUSH
82572: LD_EXP 52
82576: PPUSH
82577: LD_VAR 0 3
82581: PUSH
82582: LD_EXP 52
82586: PUSH
82587: LD_VAR 0 3
82591: ARRAY
82592: PUSH
82593: LD_INT 1
82595: PLUS
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: PPUSH
82601: LD_VAR 0 1
82605: PPUSH
82606: CALL 18171 0 3
82610: ST_TO_ADDR
// exit ;
82611: POP
82612: POP
82613: GO 82619
// end ; end ;
82615: GO 82419
82617: POP
82618: POP
// end ;
82619: LD_VAR 0 2
82623: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
82624: LD_INT 0
82626: PPUSH
82627: PPUSH
82628: PPUSH
82629: PPUSH
82630: PPUSH
82631: PPUSH
82632: PPUSH
// if not mc_bases or not skirmish then
82633: LD_EXP 52
82637: NOT
82638: PUSH
82639: LD_EXP 50
82643: NOT
82644: OR
82645: IFFALSE 82649
// exit ;
82647: GO 83310
// for i = 1 to mc_bases do
82649: LD_ADDR_VAR 0 3
82653: PUSH
82654: DOUBLE
82655: LD_INT 1
82657: DEC
82658: ST_TO_ADDR
82659: LD_EXP 52
82663: PUSH
82664: FOR_TO
82665: IFFALSE 83308
// begin if building in mc_construct_list [ i ] then
82667: LD_VAR 0 1
82671: PUSH
82672: LD_EXP 59
82676: PUSH
82677: LD_VAR 0 3
82681: ARRAY
82682: IN
82683: IFFALSE 83306
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82685: LD_ADDR_EXP 59
82689: PUSH
82690: LD_EXP 59
82694: PPUSH
82695: LD_VAR 0 3
82699: PPUSH
82700: LD_EXP 59
82704: PUSH
82705: LD_VAR 0 3
82709: ARRAY
82710: PUSH
82711: LD_VAR 0 1
82715: DIFF
82716: PPUSH
82717: CALL_OW 1
82721: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82722: LD_ADDR_EXP 52
82726: PUSH
82727: LD_EXP 52
82731: PPUSH
82732: LD_VAR 0 3
82736: PUSH
82737: LD_EXP 52
82741: PUSH
82742: LD_VAR 0 3
82746: ARRAY
82747: PUSH
82748: LD_INT 1
82750: PLUS
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: PPUSH
82756: LD_VAR 0 1
82760: PPUSH
82761: CALL 18171 0 3
82765: ST_TO_ADDR
// btype := GetBType ( building ) ;
82766: LD_ADDR_VAR 0 5
82770: PUSH
82771: LD_VAR 0 1
82775: PPUSH
82776: CALL_OW 266
82780: ST_TO_ADDR
// side := GetSide ( building ) ;
82781: LD_ADDR_VAR 0 8
82785: PUSH
82786: LD_VAR 0 1
82790: PPUSH
82791: CALL_OW 255
82795: ST_TO_ADDR
// if btype = b_lab then
82796: LD_VAR 0 5
82800: PUSH
82801: LD_INT 6
82803: EQUAL
82804: IFFALSE 82854
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
82806: LD_ADDR_EXP 85
82810: PUSH
82811: LD_EXP 85
82815: PPUSH
82816: LD_VAR 0 3
82820: PUSH
82821: LD_EXP 85
82825: PUSH
82826: LD_VAR 0 3
82830: ARRAY
82831: PUSH
82832: LD_INT 1
82834: PLUS
82835: PUSH
82836: EMPTY
82837: LIST
82838: LIST
82839: PPUSH
82840: LD_VAR 0 1
82844: PPUSH
82845: CALL 18171 0 3
82849: ST_TO_ADDR
// exit ;
82850: POP
82851: POP
82852: GO 83310
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
82854: LD_VAR 0 5
82858: PUSH
82859: LD_INT 0
82861: PUSH
82862: LD_INT 2
82864: PUSH
82865: LD_INT 4
82867: PUSH
82868: EMPTY
82869: LIST
82870: LIST
82871: LIST
82872: IN
82873: IFFALSE 82997
// begin if btype = b_armoury then
82875: LD_VAR 0 5
82879: PUSH
82880: LD_INT 4
82882: EQUAL
82883: IFFALSE 82893
// btype := b_barracks ;
82885: LD_ADDR_VAR 0 5
82889: PUSH
82890: LD_INT 5
82892: ST_TO_ADDR
// if btype = b_depot then
82893: LD_VAR 0 5
82897: PUSH
82898: LD_INT 0
82900: EQUAL
82901: IFFALSE 82911
// btype := b_warehouse ;
82903: LD_ADDR_VAR 0 5
82907: PUSH
82908: LD_INT 1
82910: ST_TO_ADDR
// if btype = b_workshop then
82911: LD_VAR 0 5
82915: PUSH
82916: LD_INT 2
82918: EQUAL
82919: IFFALSE 82929
// btype := b_factory ;
82921: LD_ADDR_VAR 0 5
82925: PUSH
82926: LD_INT 3
82928: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
82929: LD_VAR 0 5
82933: PPUSH
82934: LD_VAR 0 8
82938: PPUSH
82939: CALL_OW 323
82943: PUSH
82944: LD_INT 1
82946: EQUAL
82947: IFFALSE 82993
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
82949: LD_ADDR_EXP 84
82953: PUSH
82954: LD_EXP 84
82958: PPUSH
82959: LD_VAR 0 3
82963: PUSH
82964: LD_EXP 84
82968: PUSH
82969: LD_VAR 0 3
82973: ARRAY
82974: PUSH
82975: LD_INT 1
82977: PLUS
82978: PUSH
82979: EMPTY
82980: LIST
82981: LIST
82982: PPUSH
82983: LD_VAR 0 1
82987: PPUSH
82988: CALL 18171 0 3
82992: ST_TO_ADDR
// exit ;
82993: POP
82994: POP
82995: GO 83310
// end ; if btype in [ b_bunker , b_turret ] then
82997: LD_VAR 0 5
83001: PUSH
83002: LD_INT 32
83004: PUSH
83005: LD_INT 33
83007: PUSH
83008: EMPTY
83009: LIST
83010: LIST
83011: IN
83012: IFFALSE 83302
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
83014: LD_ADDR_EXP 60
83018: PUSH
83019: LD_EXP 60
83023: PPUSH
83024: LD_VAR 0 3
83028: PUSH
83029: LD_EXP 60
83033: PUSH
83034: LD_VAR 0 3
83038: ARRAY
83039: PUSH
83040: LD_INT 1
83042: PLUS
83043: PUSH
83044: EMPTY
83045: LIST
83046: LIST
83047: PPUSH
83048: LD_VAR 0 1
83052: PPUSH
83053: CALL 18171 0 3
83057: ST_TO_ADDR
// if btype = b_bunker then
83058: LD_VAR 0 5
83062: PUSH
83063: LD_INT 32
83065: EQUAL
83066: IFFALSE 83302
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83068: LD_ADDR_EXP 61
83072: PUSH
83073: LD_EXP 61
83077: PPUSH
83078: LD_VAR 0 3
83082: PUSH
83083: LD_EXP 61
83087: PUSH
83088: LD_VAR 0 3
83092: ARRAY
83093: PUSH
83094: LD_INT 1
83096: PLUS
83097: PUSH
83098: EMPTY
83099: LIST
83100: LIST
83101: PPUSH
83102: LD_VAR 0 1
83106: PPUSH
83107: CALL 18171 0 3
83111: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
83112: LD_ADDR_VAR 0 6
83116: PUSH
83117: LD_EXP 52
83121: PUSH
83122: LD_VAR 0 3
83126: ARRAY
83127: PPUSH
83128: LD_INT 25
83130: PUSH
83131: LD_INT 1
83133: PUSH
83134: EMPTY
83135: LIST
83136: LIST
83137: PUSH
83138: LD_INT 3
83140: PUSH
83141: LD_INT 54
83143: PUSH
83144: EMPTY
83145: LIST
83146: PUSH
83147: EMPTY
83148: LIST
83149: LIST
83150: PUSH
83151: EMPTY
83152: LIST
83153: LIST
83154: PPUSH
83155: CALL_OW 72
83159: ST_TO_ADDR
// if tmp then
83160: LD_VAR 0 6
83164: IFFALSE 83170
// exit ;
83166: POP
83167: POP
83168: GO 83310
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
83170: LD_ADDR_VAR 0 6
83174: PUSH
83175: LD_EXP 52
83179: PUSH
83180: LD_VAR 0 3
83184: ARRAY
83185: PPUSH
83186: LD_INT 2
83188: PUSH
83189: LD_INT 30
83191: PUSH
83192: LD_INT 4
83194: PUSH
83195: EMPTY
83196: LIST
83197: LIST
83198: PUSH
83199: LD_INT 30
83201: PUSH
83202: LD_INT 5
83204: PUSH
83205: EMPTY
83206: LIST
83207: LIST
83208: PUSH
83209: EMPTY
83210: LIST
83211: LIST
83212: LIST
83213: PPUSH
83214: CALL_OW 72
83218: ST_TO_ADDR
// if not tmp then
83219: LD_VAR 0 6
83223: NOT
83224: IFFALSE 83230
// exit ;
83226: POP
83227: POP
83228: GO 83310
// for j in tmp do
83230: LD_ADDR_VAR 0 4
83234: PUSH
83235: LD_VAR 0 6
83239: PUSH
83240: FOR_IN
83241: IFFALSE 83300
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
83243: LD_ADDR_VAR 0 7
83247: PUSH
83248: LD_VAR 0 4
83252: PPUSH
83253: CALL_OW 313
83257: PPUSH
83258: LD_INT 25
83260: PUSH
83261: LD_INT 1
83263: PUSH
83264: EMPTY
83265: LIST
83266: LIST
83267: PPUSH
83268: CALL_OW 72
83272: ST_TO_ADDR
// if units then
83273: LD_VAR 0 7
83277: IFFALSE 83298
// begin ComExitBuilding ( units [ 1 ] ) ;
83279: LD_VAR 0 7
83283: PUSH
83284: LD_INT 1
83286: ARRAY
83287: PPUSH
83288: CALL_OW 122
// exit ;
83292: POP
83293: POP
83294: POP
83295: POP
83296: GO 83310
// end ; end ;
83298: GO 83240
83300: POP
83301: POP
// end ; end ; exit ;
83302: POP
83303: POP
83304: GO 83310
// end ; end ;
83306: GO 82664
83308: POP
83309: POP
// end ;
83310: LD_VAR 0 2
83314: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
83315: LD_INT 0
83317: PPUSH
83318: PPUSH
83319: PPUSH
83320: PPUSH
83321: PPUSH
83322: PPUSH
83323: PPUSH
// if not mc_bases or not skirmish then
83324: LD_EXP 52
83328: NOT
83329: PUSH
83330: LD_EXP 50
83334: NOT
83335: OR
83336: IFFALSE 83340
// exit ;
83338: GO 83571
// btype := GetBType ( building ) ;
83340: LD_ADDR_VAR 0 6
83344: PUSH
83345: LD_VAR 0 1
83349: PPUSH
83350: CALL_OW 266
83354: ST_TO_ADDR
// x := GetX ( building ) ;
83355: LD_ADDR_VAR 0 7
83359: PUSH
83360: LD_VAR 0 1
83364: PPUSH
83365: CALL_OW 250
83369: ST_TO_ADDR
// y := GetY ( building ) ;
83370: LD_ADDR_VAR 0 8
83374: PUSH
83375: LD_VAR 0 1
83379: PPUSH
83380: CALL_OW 251
83384: ST_TO_ADDR
// d := GetDir ( building ) ;
83385: LD_ADDR_VAR 0 9
83389: PUSH
83390: LD_VAR 0 1
83394: PPUSH
83395: CALL_OW 254
83399: ST_TO_ADDR
// for i = 1 to mc_bases do
83400: LD_ADDR_VAR 0 4
83404: PUSH
83405: DOUBLE
83406: LD_INT 1
83408: DEC
83409: ST_TO_ADDR
83410: LD_EXP 52
83414: PUSH
83415: FOR_TO
83416: IFFALSE 83569
// begin if not mc_build_list [ i ] then
83418: LD_EXP 57
83422: PUSH
83423: LD_VAR 0 4
83427: ARRAY
83428: NOT
83429: IFFALSE 83433
// continue ;
83431: GO 83415
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
83433: LD_VAR 0 6
83437: PUSH
83438: LD_VAR 0 7
83442: PUSH
83443: LD_VAR 0 8
83447: PUSH
83448: LD_VAR 0 9
83452: PUSH
83453: EMPTY
83454: LIST
83455: LIST
83456: LIST
83457: LIST
83458: PPUSH
83459: LD_EXP 57
83463: PUSH
83464: LD_VAR 0 4
83468: ARRAY
83469: PUSH
83470: LD_INT 1
83472: ARRAY
83473: PPUSH
83474: CALL 24340 0 2
83478: IFFALSE 83567
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
83480: LD_ADDR_EXP 57
83484: PUSH
83485: LD_EXP 57
83489: PPUSH
83490: LD_VAR 0 4
83494: PPUSH
83495: LD_EXP 57
83499: PUSH
83500: LD_VAR 0 4
83504: ARRAY
83505: PPUSH
83506: LD_INT 1
83508: PPUSH
83509: CALL_OW 3
83513: PPUSH
83514: CALL_OW 1
83518: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
83519: LD_ADDR_EXP 59
83523: PUSH
83524: LD_EXP 59
83528: PPUSH
83529: LD_VAR 0 4
83533: PUSH
83534: LD_EXP 59
83538: PUSH
83539: LD_VAR 0 4
83543: ARRAY
83544: PUSH
83545: LD_INT 1
83547: PLUS
83548: PUSH
83549: EMPTY
83550: LIST
83551: LIST
83552: PPUSH
83553: LD_VAR 0 1
83557: PPUSH
83558: CALL 18171 0 3
83562: ST_TO_ADDR
// exit ;
83563: POP
83564: POP
83565: GO 83571
// end ; end ;
83567: GO 83415
83569: POP
83570: POP
// end ;
83571: LD_VAR 0 3
83575: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
83576: LD_INT 0
83578: PPUSH
83579: PPUSH
83580: PPUSH
// if not mc_bases or not skirmish then
83581: LD_EXP 52
83585: NOT
83586: PUSH
83587: LD_EXP 50
83591: NOT
83592: OR
83593: IFFALSE 83597
// exit ;
83595: GO 83787
// for i = 1 to mc_bases do
83597: LD_ADDR_VAR 0 4
83601: PUSH
83602: DOUBLE
83603: LD_INT 1
83605: DEC
83606: ST_TO_ADDR
83607: LD_EXP 52
83611: PUSH
83612: FOR_TO
83613: IFFALSE 83700
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
83615: LD_VAR 0 1
83619: PUSH
83620: LD_EXP 60
83624: PUSH
83625: LD_VAR 0 4
83629: ARRAY
83630: IN
83631: PUSH
83632: LD_VAR 0 1
83636: PUSH
83637: LD_EXP 61
83641: PUSH
83642: LD_VAR 0 4
83646: ARRAY
83647: IN
83648: NOT
83649: AND
83650: IFFALSE 83698
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83652: LD_ADDR_EXP 61
83656: PUSH
83657: LD_EXP 61
83661: PPUSH
83662: LD_VAR 0 4
83666: PUSH
83667: LD_EXP 61
83671: PUSH
83672: LD_VAR 0 4
83676: ARRAY
83677: PUSH
83678: LD_INT 1
83680: PLUS
83681: PUSH
83682: EMPTY
83683: LIST
83684: LIST
83685: PPUSH
83686: LD_VAR 0 1
83690: PPUSH
83691: CALL 18171 0 3
83695: ST_TO_ADDR
// break ;
83696: GO 83700
// end ; end ;
83698: GO 83612
83700: POP
83701: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
83702: LD_VAR 0 1
83706: PPUSH
83707: CALL_OW 257
83711: PUSH
83712: LD_EXP 78
83716: IN
83717: PUSH
83718: LD_VAR 0 1
83722: PPUSH
83723: CALL_OW 266
83727: PUSH
83728: LD_INT 5
83730: EQUAL
83731: AND
83732: PUSH
83733: LD_VAR 0 2
83737: PPUSH
83738: CALL_OW 110
83742: PUSH
83743: LD_INT 18
83745: NONEQUAL
83746: AND
83747: IFFALSE 83787
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
83749: LD_VAR 0 2
83753: PPUSH
83754: CALL_OW 257
83758: PUSH
83759: LD_INT 5
83761: PUSH
83762: LD_INT 8
83764: PUSH
83765: LD_INT 9
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: LIST
83772: IN
83773: IFFALSE 83787
// SetClass ( unit , 1 ) ;
83775: LD_VAR 0 2
83779: PPUSH
83780: LD_INT 1
83782: PPUSH
83783: CALL_OW 336
// end ;
83787: LD_VAR 0 3
83791: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
83792: LD_INT 0
83794: PPUSH
83795: PPUSH
// if not mc_bases or not skirmish then
83796: LD_EXP 52
83800: NOT
83801: PUSH
83802: LD_EXP 50
83806: NOT
83807: OR
83808: IFFALSE 83812
// exit ;
83810: GO 83928
// if GetLives ( abandoned_vehicle ) > 250 then
83812: LD_VAR 0 2
83816: PPUSH
83817: CALL_OW 256
83821: PUSH
83822: LD_INT 250
83824: GREATER
83825: IFFALSE 83829
// exit ;
83827: GO 83928
// for i = 1 to mc_bases do
83829: LD_ADDR_VAR 0 6
83833: PUSH
83834: DOUBLE
83835: LD_INT 1
83837: DEC
83838: ST_TO_ADDR
83839: LD_EXP 52
83843: PUSH
83844: FOR_TO
83845: IFFALSE 83926
// begin if driver in mc_bases [ i ] then
83847: LD_VAR 0 1
83851: PUSH
83852: LD_EXP 52
83856: PUSH
83857: LD_VAR 0 6
83861: ARRAY
83862: IN
83863: IFFALSE 83924
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
83865: LD_VAR 0 1
83869: PPUSH
83870: LD_EXP 52
83874: PUSH
83875: LD_VAR 0 6
83879: ARRAY
83880: PPUSH
83881: LD_INT 2
83883: PUSH
83884: LD_INT 30
83886: PUSH
83887: LD_INT 0
83889: PUSH
83890: EMPTY
83891: LIST
83892: LIST
83893: PUSH
83894: LD_INT 30
83896: PUSH
83897: LD_INT 1
83899: PUSH
83900: EMPTY
83901: LIST
83902: LIST
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: LIST
83908: PPUSH
83909: CALL_OW 72
83913: PUSH
83914: LD_INT 1
83916: ARRAY
83917: PPUSH
83918: CALL_OW 112
// break ;
83922: GO 83926
// end ; end ;
83924: GO 83844
83926: POP
83927: POP
// end ; end_of_file end_of_file end_of_file
83928: LD_VAR 0 5
83932: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
83933: LD_INT 0
83935: PPUSH
83936: PPUSH
83937: PPUSH
83938: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83939: LD_VAR 0 1
83943: PPUSH
83944: CALL_OW 264
83948: PUSH
83949: LD_EXP 49
83953: EQUAL
83954: IFFALSE 84026
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83956: LD_INT 68
83958: PPUSH
83959: LD_VAR 0 1
83963: PPUSH
83964: CALL_OW 255
83968: PPUSH
83969: CALL_OW 321
83973: PUSH
83974: LD_INT 2
83976: EQUAL
83977: IFFALSE 83989
// eff := 70 else
83979: LD_ADDR_VAR 0 6
83983: PUSH
83984: LD_INT 70
83986: ST_TO_ADDR
83987: GO 83997
// eff := 30 ;
83989: LD_ADDR_VAR 0 6
83993: PUSH
83994: LD_INT 30
83996: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83997: LD_VAR 0 1
84001: PPUSH
84002: CALL_OW 250
84006: PPUSH
84007: LD_VAR 0 1
84011: PPUSH
84012: CALL_OW 251
84016: PPUSH
84017: LD_VAR 0 6
84021: PPUSH
84022: CALL_OW 495
// end ; end ;
84026: LD_VAR 0 4
84030: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
84031: LD_INT 0
84033: PPUSH
84034: PPUSH
84035: PPUSH
84036: PPUSH
84037: PPUSH
84038: PPUSH
// if cmd = 124 then
84039: LD_VAR 0 1
84043: PUSH
84044: LD_INT 124
84046: EQUAL
84047: IFFALSE 84253
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
84049: LD_ADDR_VAR 0 5
84053: PUSH
84054: LD_INT 2
84056: PUSH
84057: LD_INT 34
84059: PUSH
84060: LD_INT 53
84062: PUSH
84063: EMPTY
84064: LIST
84065: LIST
84066: PUSH
84067: LD_INT 34
84069: PUSH
84070: LD_INT 14
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PUSH
84077: EMPTY
84078: LIST
84079: LIST
84080: LIST
84081: PPUSH
84082: CALL_OW 69
84086: ST_TO_ADDR
// if not tmp then
84087: LD_VAR 0 5
84091: NOT
84092: IFFALSE 84096
// exit ;
84094: GO 84253
// for i in tmp do
84096: LD_ADDR_VAR 0 3
84100: PUSH
84101: LD_VAR 0 5
84105: PUSH
84106: FOR_IN
84107: IFFALSE 84251
// begin taskList := GetTaskList ( i ) ;
84109: LD_ADDR_VAR 0 6
84113: PUSH
84114: LD_VAR 0 3
84118: PPUSH
84119: CALL_OW 437
84123: ST_TO_ADDR
// if not taskList then
84124: LD_VAR 0 6
84128: NOT
84129: IFFALSE 84133
// continue ;
84131: GO 84106
// for j = 1 to taskList do
84133: LD_ADDR_VAR 0 4
84137: PUSH
84138: DOUBLE
84139: LD_INT 1
84141: DEC
84142: ST_TO_ADDR
84143: LD_VAR 0 6
84147: PUSH
84148: FOR_TO
84149: IFFALSE 84247
// if taskList [ j ] [ 1 ] = | then
84151: LD_VAR 0 6
84155: PUSH
84156: LD_VAR 0 4
84160: ARRAY
84161: PUSH
84162: LD_INT 1
84164: ARRAY
84165: PUSH
84166: LD_STRING |
84168: EQUAL
84169: IFFALSE 84245
// begin _taskList := Delete ( taskList , 1 ) ;
84171: LD_ADDR_VAR 0 7
84175: PUSH
84176: LD_VAR 0 6
84180: PPUSH
84181: LD_INT 1
84183: PPUSH
84184: CALL_OW 3
84188: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
84189: LD_VAR 0 3
84193: PPUSH
84194: LD_VAR 0 7
84198: PPUSH
84199: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
84203: LD_VAR 0 3
84207: PPUSH
84208: LD_VAR 0 6
84212: PUSH
84213: LD_VAR 0 4
84217: ARRAY
84218: PUSH
84219: LD_INT 2
84221: ARRAY
84222: PPUSH
84223: LD_VAR 0 6
84227: PUSH
84228: LD_VAR 0 4
84232: ARRAY
84233: PUSH
84234: LD_INT 3
84236: ARRAY
84237: PPUSH
84238: LD_INT 8
84240: PPUSH
84241: CALL 84258 0 4
// end ;
84245: GO 84148
84247: POP
84248: POP
// end ;
84249: GO 84106
84251: POP
84252: POP
// end ; end ;
84253: LD_VAR 0 2
84257: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84258: LD_INT 0
84260: PPUSH
84261: PPUSH
84262: PPUSH
84263: PPUSH
84264: PPUSH
84265: PPUSH
84266: PPUSH
84267: PPUSH
84268: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84269: LD_VAR 0 1
84273: NOT
84274: PUSH
84275: LD_VAR 0 2
84279: PPUSH
84280: LD_VAR 0 3
84284: PPUSH
84285: CALL_OW 488
84289: NOT
84290: OR
84291: PUSH
84292: LD_VAR 0 4
84296: NOT
84297: OR
84298: IFFALSE 84302
// exit ;
84300: GO 84642
// list := [ ] ;
84302: LD_ADDR_VAR 0 13
84306: PUSH
84307: EMPTY
84308: ST_TO_ADDR
// if x - r < 0 then
84309: LD_VAR 0 2
84313: PUSH
84314: LD_VAR 0 4
84318: MINUS
84319: PUSH
84320: LD_INT 0
84322: LESS
84323: IFFALSE 84335
// min_x := 0 else
84325: LD_ADDR_VAR 0 7
84329: PUSH
84330: LD_INT 0
84332: ST_TO_ADDR
84333: GO 84351
// min_x := x - r ;
84335: LD_ADDR_VAR 0 7
84339: PUSH
84340: LD_VAR 0 2
84344: PUSH
84345: LD_VAR 0 4
84349: MINUS
84350: ST_TO_ADDR
// if y - r < 0 then
84351: LD_VAR 0 3
84355: PUSH
84356: LD_VAR 0 4
84360: MINUS
84361: PUSH
84362: LD_INT 0
84364: LESS
84365: IFFALSE 84377
// min_y := 0 else
84367: LD_ADDR_VAR 0 8
84371: PUSH
84372: LD_INT 0
84374: ST_TO_ADDR
84375: GO 84393
// min_y := y - r ;
84377: LD_ADDR_VAR 0 8
84381: PUSH
84382: LD_VAR 0 3
84386: PUSH
84387: LD_VAR 0 4
84391: MINUS
84392: ST_TO_ADDR
// max_x := x + r ;
84393: LD_ADDR_VAR 0 9
84397: PUSH
84398: LD_VAR 0 2
84402: PUSH
84403: LD_VAR 0 4
84407: PLUS
84408: ST_TO_ADDR
// max_y := y + r ;
84409: LD_ADDR_VAR 0 10
84413: PUSH
84414: LD_VAR 0 3
84418: PUSH
84419: LD_VAR 0 4
84423: PLUS
84424: ST_TO_ADDR
// for _x = min_x to max_x do
84425: LD_ADDR_VAR 0 11
84429: PUSH
84430: DOUBLE
84431: LD_VAR 0 7
84435: DEC
84436: ST_TO_ADDR
84437: LD_VAR 0 9
84441: PUSH
84442: FOR_TO
84443: IFFALSE 84560
// for _y = min_y to max_y do
84445: LD_ADDR_VAR 0 12
84449: PUSH
84450: DOUBLE
84451: LD_VAR 0 8
84455: DEC
84456: ST_TO_ADDR
84457: LD_VAR 0 10
84461: PUSH
84462: FOR_TO
84463: IFFALSE 84556
// begin if not ValidHex ( _x , _y ) then
84465: LD_VAR 0 11
84469: PPUSH
84470: LD_VAR 0 12
84474: PPUSH
84475: CALL_OW 488
84479: NOT
84480: IFFALSE 84484
// continue ;
84482: GO 84462
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84484: LD_VAR 0 11
84488: PPUSH
84489: LD_VAR 0 12
84493: PPUSH
84494: CALL_OW 351
84498: PUSH
84499: LD_VAR 0 11
84503: PPUSH
84504: LD_VAR 0 12
84508: PPUSH
84509: CALL_OW 554
84513: AND
84514: IFFALSE 84554
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84516: LD_ADDR_VAR 0 13
84520: PUSH
84521: LD_VAR 0 13
84525: PPUSH
84526: LD_VAR 0 13
84530: PUSH
84531: LD_INT 1
84533: PLUS
84534: PPUSH
84535: LD_VAR 0 11
84539: PUSH
84540: LD_VAR 0 12
84544: PUSH
84545: EMPTY
84546: LIST
84547: LIST
84548: PPUSH
84549: CALL_OW 2
84553: ST_TO_ADDR
// end ;
84554: GO 84462
84556: POP
84557: POP
84558: GO 84442
84560: POP
84561: POP
// if not list then
84562: LD_VAR 0 13
84566: NOT
84567: IFFALSE 84571
// exit ;
84569: GO 84642
// for i in list do
84571: LD_ADDR_VAR 0 6
84575: PUSH
84576: LD_VAR 0 13
84580: PUSH
84581: FOR_IN
84582: IFFALSE 84640
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84584: LD_VAR 0 1
84588: PPUSH
84589: LD_STRING M
84591: PUSH
84592: LD_VAR 0 6
84596: PUSH
84597: LD_INT 1
84599: ARRAY
84600: PUSH
84601: LD_VAR 0 6
84605: PUSH
84606: LD_INT 2
84608: ARRAY
84609: PUSH
84610: LD_INT 0
84612: PUSH
84613: LD_INT 0
84615: PUSH
84616: LD_INT 0
84618: PUSH
84619: LD_INT 0
84621: PUSH
84622: EMPTY
84623: LIST
84624: LIST
84625: LIST
84626: LIST
84627: LIST
84628: LIST
84629: LIST
84630: PUSH
84631: EMPTY
84632: LIST
84633: PPUSH
84634: CALL_OW 447
84638: GO 84581
84640: POP
84641: POP
// end ;
84642: LD_VAR 0 5
84646: RET
