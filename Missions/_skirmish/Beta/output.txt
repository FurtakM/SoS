// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5682 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2845 0 0
// PrepareBeta ;
 105: CALL 3234 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_INT 40
 273: PPUSH
 274: LD_INT 37
 276: PPUSH
 277: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 281: LD_EXP 11
 285: PPUSH
 286: LD_EXP 9
 290: PPUSH
 291: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 295: LD_EXP 10
 299: PPUSH
 300: LD_INT 50
 302: PPUSH
 303: LD_INT 42
 305: PPUSH
 306: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 310: LD_INT 35
 312: PPUSH
 313: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 317: LD_EXP 9
 321: PPUSH
 322: LD_EXP 10
 326: PPUSH
 327: CALL_OW 296
 331: PUSH
 332: LD_INT 6
 334: LESS
 335: IFFALSE 310
// ComTurnUnit ( Brighton , Palmer ) ;
 337: LD_EXP 9
 341: PPUSH
 342: LD_EXP 10
 346: PPUSH
 347: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 351: LD_EXP 10
 355: PPUSH
 356: LD_EXP 9
 360: PPUSH
 361: CALL_OW 119
// Say ( Palmer , DPalmer-1 ) ;
 365: LD_EXP 10
 369: PPUSH
 370: LD_STRING DPalmer-1
 372: PPUSH
 373: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 377: LD_EXP 9
 381: PPUSH
 382: LD_STRING DBrighton-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 389: LD_EXP 10
 393: PPUSH
 394: LD_STRING DPalmer-2
 396: PPUSH
 397: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 401: LD_EXP 9
 405: PPUSH
 406: LD_STRING DBrighton-2
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-3
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-3
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-4
 444: PPUSH
 445: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 449: LD_EXP 10
 453: PPUSH
 454: LD_INT 6
 456: PPUSH
 457: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 461: LD_INT 35
 463: PPUSH
 464: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 468: LD_EXP 10
 472: PPUSH
 473: CALL_OW 310
 477: PUSH
 478: LD_INT 6
 480: EQUAL
 481: IFFALSE 461
// SayRadio ( Palmer , DPalmer-5 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_STRING DPalmer-5
 490: PPUSH
 491: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 495: LD_EXP 9
 499: PPUSH
 500: LD_INT 59
 502: PPUSH
 503: LD_INT 36
 505: PPUSH
 506: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 510: LD_EXP 11
 514: PPUSH
 515: LD_INT 60
 517: PPUSH
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 525: LD_EXP 10
 529: PPUSH
 530: LD_INT 60
 532: PPUSH
 533: LD_INT 34
 535: PPUSH
 536: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 540: LD_EXP 9
 544: PPUSH
 545: LD_INT 99
 547: PPUSH
 548: LD_INT 37
 550: PPUSH
 551: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 555: LD_EXP 11
 559: PPUSH
 560: LD_EXP 9
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 569: LD_EXP 10
 573: PPUSH
 574: LD_EXP 9
 578: PPUSH
 579: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 583: LD_INT 64
 585: PPUSH
 586: LD_INT 40
 588: PPUSH
 589: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 593: LD_EXP 12
 597: PPUSH
 598: LD_INT 13
 600: PPUSH
 601: CALL 12677 0 2
// wait ( 0 0$30 ) ;
 605: LD_INT 1050
 607: PPUSH
 608: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 612: LD_EXP 9
 616: PPUSH
 617: LD_STRING DBrighton-4
 619: PPUSH
 620: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 624: LD_EXP 9
 628: PPUSH
 629: LD_STRING DBrighton-5
 631: PPUSH
 632: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 636: LD_EXP 9
 640: PPUSH
 641: LD_EXP 11
 645: PPUSH
 646: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 650: LD_EXP 9
 654: PPUSH
 655: LD_STRING DBrighton-6
 657: PPUSH
 658: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 662: LD_EXP 11
 666: PPUSH
 667: LD_STRING DMegan-1
 669: PPUSH
 670: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 674: LD_EXP 9
 678: PPUSH
 679: LD_STRING DBrighton-7
 681: PPUSH
 682: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 686: LD_EXP 9
 690: PPUSH
 691: LD_INT 99
 693: PPUSH
 694: LD_INT 37
 696: PPUSH
 697: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 701: LD_EXP 9
 705: PPUSH
 706: LD_STRING DBrighton-8
 708: PPUSH
 709: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 713: LD_STRING C1
 715: PPUSH
 716: CALL_OW 337
// InGameOff ;
 720: CALL_OW 9
// SaveForQuickRestart ;
 724: CALL_OW 22
// MissionStart := true ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 1
 735: ST_TO_ADDR
// PrepareRUBase_v2 ;
 736: CALL 4957 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 740: LD_ADDR_EXP 65
 744: PUSH
 745: LD_EXP 65
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PPUSH
 768: CALL_OW 1
 772: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 773: LD_ADDR_EXP 65
 777: PUSH
 778: LD_EXP 65
 782: PPUSH
 783: LD_INT 2
 785: PPUSH
 786: LD_EXP 36
 790: PPUSH
 791: CALL_OW 1
 795: ST_TO_ADDR
// MC_Start ( ) ;
 796: CALL 52173 0 0
// music_nat := 1 ;
 800: LD_ADDR_OWVAR 71
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// end ;
 808: END
// every 1 trigger southAreaBlocker do var unit ;
 809: LD_EXP 2
 813: IFFALSE 974
 815: GO 817
 817: DISABLE
 818: LD_INT 0
 820: PPUSH
// begin enable ;
 821: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 822: LD_INT 16
 824: PPUSH
 825: LD_INT 22
 827: PUSH
 828: LD_INT 1
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 2
 837: PUSH
 838: LD_INT 21
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: LD_INT 21
 850: PUSH
 851: LD_INT 2
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 70
 871: PUSH
 872: LD_INT 0
 874: EQUAL
 875: IFFALSE 879
// exit ;
 877: GO 974
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 879: LD_ADDR_VAR 0 1
 883: PUSH
 884: LD_INT 16
 886: PPUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 21
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 70
 933: PUSH
 934: FOR_IN
 935: IFFALSE 972
// ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 250
 951: PPUSH
 952: LD_VAR 0 1
 956: PPUSH
 957: CALL_OW 251
 961: PUSH
 962: LD_INT 2
 964: MINUS
 965: PPUSH
 966: CALL_OW 111
 970: GO 934
 972: POP
 973: POP
// end ;
 974: PPOPN 1
 976: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
 977: LD_EXP 1
 981: IFFALSE 1614
 983: GO 985
 985: DISABLE
 986: LD_INT 0
 988: PPUSH
 989: PPUSH
// begin wait ( ruArrival ) ;
 990: LD_EXP 42
 994: PPUSH
 995: CALL_OW 67
// PrepareRUArmada ;
 999: CALL 3816 0 0
// wait ( 0 0$3 ) ;
1003: LD_INT 105
1005: PPUSH
1006: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 15
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 517
1025: ST_TO_ADDR
// for i = 1 to RUArmada do
1026: LD_ADDR_VAR 0 1
1030: PUSH
1031: DOUBLE
1032: LD_INT 1
1034: DEC
1035: ST_TO_ADDR
1036: LD_EXP 17
1040: PUSH
1041: FOR_TO
1042: IFFALSE 1091
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1044: LD_EXP 17
1048: PUSH
1049: LD_VAR 0 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: ARRAY
1063: PUSH
1064: LD_VAR 0 1
1068: ARRAY
1069: PPUSH
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 2
1077: ARRAY
1078: PUSH
1079: LD_VAR 0 1
1083: ARRAY
1084: PPUSH
1085: CALL_OW 111
1089: GO 1041
1091: POP
1092: POP
// ArmadaArrived := true ;
1093: LD_ADDR_EXP 3
1097: PUSH
1098: LD_INT 1
1100: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1101: LD_EXP 10
1105: PPUSH
1106: LD_STRING DPalmer-A1
1108: PPUSH
1109: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1113: LD_EXP 9
1117: PPUSH
1118: LD_STRING DBrighton-A1
1120: PPUSH
1121: CALL_OW 88
// wait ( 0 0$20 ) ;
1125: LD_INT 700
1127: PPUSH
1128: CALL_OW 67
// PrepareRUBase ;
1132: CALL 4541 0 0
// wait ( 1 1$20 ) ;
1136: LD_INT 2800
1138: PPUSH
1139: CALL_OW 67
// PrepareRUBulldozers ;
1143: CALL 4428 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1147: LD_EXP 18
1151: PUSH
1152: LD_INT 1
1154: ARRAY
1155: PPUSH
1156: LD_INT 9
1158: PPUSH
1159: CALL 12534 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1163: LD_EXP 18
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: PPUSH
1172: LD_INT 11
1174: PPUSH
1175: CALL 12534 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1179: LD_INT 1
1181: PPUSH
1182: LD_EXP 18
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1195: LD_INT 1
1197: PPUSH
1198: LD_EXP 18
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: CALL_OW 471
// wait ( 0 0$50 ) ;
1211: LD_INT 1750
1213: PPUSH
1214: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1218: LD_INT 1
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: CALL_OW 334
// InGameOn ;
1228: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1232: LD_INT 95
1234: PPUSH
1235: LD_INT 93
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 30
1243: NEG
1244: PPUSH
1245: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1249: LD_INT 10
1251: PPUSH
1252: LD_INT 22
1254: PUSH
1255: LD_INT 1
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 70
1266: PPUSH
1267: LD_INT 63
1269: PPUSH
1270: LD_INT 39
1272: PPUSH
1273: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1277: LD_INT 95
1279: PPUSH
1280: LD_INT 93
1282: PPUSH
1283: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1287: LD_INT 35
1289: PPUSH
1290: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1294: LD_EXP 18
1298: PUSH
1299: LD_INT 1
1301: ARRAY
1302: PPUSH
1303: CALL_OW 314
1307: NOT
1308: IFFALSE 1326
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1310: LD_EXP 18
1314: PUSH
1315: LD_INT 1
1317: ARRAY
1318: PPUSH
1319: LD_INT 9
1321: PPUSH
1322: CALL 12534 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1326: LD_EXP 18
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: CALL_OW 314
1339: NOT
1340: IFFALSE 1358
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 2
1349: ARRAY
1350: PPUSH
1351: LD_INT 11
1353: PPUSH
1354: CALL 12534 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1358: LD_INT 9
1360: PPUSH
1361: CALL_OW 353
1365: PUSH
1366: LD_INT 2
1368: LESS
1369: PUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 353
1377: PUSH
1378: LD_INT 2
1380: LESS
1381: OR
1382: PUSH
1383: LD_EXP 18
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 301
1396: OR
1397: IFFALSE 1287
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1399: LD_EXP 18
1403: PPUSH
1404: LD_INT 50
1406: PUSH
1407: EMPTY
1408: LIST
1409: PPUSH
1410: CALL_OW 72
1414: IFFALSE 1467
// begin wait ( 0 0$10 ) ;
1416: LD_INT 350
1418: PPUSH
1419: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1423: LD_EXP 18
1427: PPUSH
1428: LD_INT 120
1430: PPUSH
1431: LD_INT 131
1433: PPUSH
1434: CALL_OW 111
// for i in Bulldozers do
1438: LD_ADDR_VAR 0 1
1442: PUSH
1443: LD_EXP 18
1447: PUSH
1448: FOR_IN
1449: IFFALSE 1465
// NormalAttack ( 1 , i ) ;
1451: LD_INT 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: CALL_OW 472
1463: GO 1448
1465: POP
1466: POP
// end ; wait ( 0 0$10 ) ;
1467: LD_INT 350
1469: PPUSH
1470: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1474: LD_INT 95
1476: PPUSH
1477: LD_INT 93
1479: PPUSH
1480: LD_INT 1
1482: PPUSH
1483: CALL_OW 331
// southAreaBlocker = false ;
1487: LD_ADDR_EXP 2
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// wait ( 0 0$3 ) ;
1495: LD_INT 105
1497: PPUSH
1498: CALL_OW 67
// InGameOff ;
1502: CALL_OW 9
// SayEffect ( DRuSol-A1 ) ;
1506: LD_STRING DRuSol-A1
1508: PPUSH
1509: CALL_OW 96
// AssaultStarted := true ;
1513: LD_ADDR_EXP 8
1517: PUSH
1518: LD_INT 1
1520: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1521: LD_INT 70
1523: PPUSH
1524: CALL_OW 67
// Say ( Yashin , DDeath-Yas-1 ) ;
1528: LD_EXP 13
1532: PPUSH
1533: LD_STRING DDeath-Yas-1
1535: PPUSH
1536: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
1540: LD_EXP 15
1544: PPUSH
1545: LD_STRING DDeath-Gay-2
1547: PPUSH
1548: CALL_OW 88
// wait ( 0 0$2 ) ;
1552: LD_INT 70
1554: PPUSH
1555: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1559: LD_EXP 14
1563: PPUSH
1564: LD_STRING DDeath-Pop-1
1566: PPUSH
1567: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1571: LD_EXP 15
1575: PPUSH
1576: LD_STRING DDeath-Gay-1
1578: PPUSH
1579: CALL_OW 88
// wait ( 0 0$5 ) ;
1583: LD_INT 175
1585: PPUSH
1586: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1590: LD_EXP 16
1594: PPUSH
1595: LD_STRING DDeath-Vse-1
1597: PPUSH
1598: CALL_OW 88
// Say ( Popov , DDeath-Pop-2 ) ;
1602: LD_EXP 14
1606: PPUSH
1607: LD_STRING DDeath-Pop-2
1609: PPUSH
1610: CALL_OW 88
// end ;
1614: PPOPN 2
1616: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1617: LD_EXP 8
1621: IFFALSE 2073
1623: GO 1625
1625: DISABLE
1626: LD_INT 0
1628: PPUSH
1629: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1630: LD_INT 6
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1640: LD_INT 6
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: CALL_OW 470
// repeat for i in RuArmada do
1650: LD_ADDR_VAR 0 1
1654: PUSH
1655: LD_EXP 17
1659: PUSH
1660: FOR_IN
1661: IFFALSE 1699
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1663: LD_VAR 0 1
1667: PPUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PPUSH
1678: CALL_OW 69
1682: PPUSH
1683: LD_VAR 0 1
1687: PPUSH
1688: CALL_OW 74
1692: PPUSH
1693: CALL_OW 115
1697: GO 1660
1699: POP
1700: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 67
1708: LD_INT 1
1710: PUSH
1711: LD_INT 22
1713: PUSH
1714: LD_INT 6
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 21
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: PPUSH
1736: CALL_OW 69
1740: PUSH
1741: LD_INT 10
1743: LESS
1744: PUSH
1745: LD_EXP 13
1749: PPUSH
1750: CALL_OW 301
1754: AND
1755: PUSH
1756: LD_EXP 14
1760: PPUSH
1761: CALL_OW 301
1765: AND
1766: PUSH
1767: LD_EXP 15
1771: PPUSH
1772: CALL_OW 301
1776: AND
1777: PUSH
1778: LD_EXP 16
1782: PPUSH
1783: CALL_OW 301
1787: AND
1788: IFFALSE 1650
// AssaultStarted := false ;
1790: LD_ADDR_EXP 8
1794: PUSH
1795: LD_INT 0
1797: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1798: LD_INT 22
1800: PUSH
1801: LD_INT 6
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_INT 5
1815: PPUSH
1816: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1820: LD_ADDR_EXP 5
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_INT 6
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 26
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 21
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 24
1860: PUSH
1861: LD_INT 500
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 69
1879: ST_TO_ADDR
// if RuSpeaker then
1880: LD_EXP 5
1884: IFFALSE 1902
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1886: LD_EXP 5
1890: PUSH
1891: LD_INT 1
1893: ARRAY
1894: PPUSH
1895: LD_STRING DRuSol-A2
1897: PPUSH
1898: CALL_OW 88
// wait ( 0 0$30 ) ;
1902: LD_INT 1050
1904: PPUSH
1905: CALL_OW 67
// DialogueOn ;
1909: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1913: LD_EXP 9
1917: PPUSH
1918: LD_STRING DBrighton-B1
1920: PPUSH
1921: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1925: LD_EXP 10
1929: PPUSH
1930: LD_STRING DPalmer-B1
1932: PPUSH
1933: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1937: LD_EXP 9
1941: PPUSH
1942: LD_STRING DBrighton-B2
1944: PPUSH
1945: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1949: LD_EXP 19
1953: PPUSH
1954: LD_STRING DBurlak-B1
1956: PPUSH
1957: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1961: LD_EXP 9
1965: PPUSH
1966: LD_STRING DBrighton-B3
1968: PPUSH
1969: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1973: LD_EXP 10
1977: PPUSH
1978: LD_STRING DPalmer-B2
1980: PPUSH
1981: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1985: LD_EXP 9
1989: PPUSH
1990: LD_STRING DBrighton-B4
1992: PPUSH
1993: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1997: LD_EXP 9
2001: PPUSH
2002: LD_STRING DBrighton-B5
2004: PPUSH
2005: CALL_OW 88
// DialogueOff ;
2009: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2013: LD_STRING C2
2015: PPUSH
2016: CALL_OW 337
// FirstAssaultRepelled := true ;
2020: LD_ADDR_EXP 4
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2028: LD_EXP 18
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: PPUSH
2037: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2041: LD_EXP 18
2045: PUSH
2046: LD_INT 2
2048: ARRAY
2049: PPUSH
2050: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2054: LD_INT 22
2056: PUSH
2057: LD_INT 6
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: PPUSH
2069: CALL_OW 181
// end ;
2073: PPOPN 2
2075: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2076: LD_EXP 4
2080: IFFALSE 2245
2082: GO 2084
2084: DISABLE
2085: LD_INT 0
2087: PPUSH
2088: PPUSH
// begin enable ;
2089: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2090: LD_INT 5
2092: PPUSH
2093: LD_INT 22
2095: PUSH
2096: LD_INT 6
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: PPUSH
2106: CALL_OW 70
2110: PUSH
2111: LD_INT 0
2113: EQUAL
2114: IFFALSE 2118
// exit ;
2116: GO 2245
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2118: LD_ADDR_VAR 0 1
2122: PUSH
2123: LD_INT 5
2125: PPUSH
2126: LD_INT 22
2128: PUSH
2129: LD_INT 6
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 70
2143: PUSH
2144: FOR_IN
2145: IFFALSE 2243
// begin SetSide ( unit , 3 ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2159: LD_VAR 0 1
2163: PPUSH
2164: CALL_OW 247
2168: PUSH
2169: LD_INT 2
2171: EQUAL
2172: IFFALSE 2208
// for insideUnit in UnitsInside ( unit ) do
2174: LD_ADDR_VAR 0 2
2178: PUSH
2179: LD_VAR 0 1
2183: PPUSH
2184: CALL_OW 313
2188: PUSH
2189: FOR_IN
2190: IFFALSE 2206
// SetSide ( insideUnit , 3 ) ;
2192: LD_VAR 0 2
2196: PPUSH
2197: LD_INT 3
2199: PPUSH
2200: CALL_OW 235
2204: GO 2189
2206: POP
2207: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2208: LD_ADDR_EXP 65
2212: PUSH
2213: LD_EXP 65
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_INT 22
2223: PUSH
2224: LD_INT 3
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PPUSH
2231: CALL_OW 69
2235: PPUSH
2236: CALL_OW 1
2240: ST_TO_ADDR
// end ;
2241: GO 2144
2243: POP
2244: POP
// end ;
2245: PPOPN 2
2247: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2248: LD_EXP 4
2252: PUSH
2253: LD_EXP 41
2257: PUSH
2258: LD_INT 0
2260: GREATER
2261: AND
2262: IFFALSE 2282
2264: GO 2266
2266: DISABLE
// begin enable ;
2267: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2268: LD_ADDR_EXP 41
2272: PUSH
2273: LD_EXP 41
2277: PUSH
2278: LD_INT 35
2280: MINUS
2281: ST_TO_ADDR
// end ;
2282: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2283: LD_EXP 41
2287: PUSH
2288: LD_INT 0
2290: EQUAL
2291: IFFALSE 2397
2293: GO 2295
2295: DISABLE
// begin JMMReinforcement ;
2296: CALL 5285 0 0
// DialogueOn ;
2300: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2304: LD_EXP 37
2308: PPUSH
2309: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2313: LD_EXP 37
2317: PPUSH
2318: LD_STRING DJMM-F1
2320: PPUSH
2321: CALL_OW 88
// if RussiansDefeated then
2325: LD_EXP 44
2329: IFFALSE 2355
// begin AddMedal ( Russians , 1 ) ;
2331: LD_STRING Russians
2333: PPUSH
2334: LD_INT 1
2336: PPUSH
2337: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2341: LD_EXP 9
2345: PPUSH
2346: LD_STRING DBrighton-F1a
2348: PPUSH
2349: CALL_OW 88
// end else
2353: GO 2385
// begin AddMedal ( Russians , - 1 ) ;
2355: LD_STRING Russians
2357: PPUSH
2358: LD_INT 1
2360: NEG
2361: PPUSH
2362: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2366: LD_EXP 9
2370: PPUSH
2371: LD_STRING DBrighton-F1
2373: PPUSH
2374: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2378: LD_STRING C3
2380: PPUSH
2381: CALL_OW 337
// end ; DialogueOff ;
2385: CALL_OW 7
// JMM_Arrived := true ;
2389: LD_ADDR_EXP 6
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// end ;
2397: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2398: LD_EXP 6
2402: PUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_EXP 19
2410: PPUSH
2411: CALL_OW 292
2415: AND
2416: IFFALSE 2445
2418: GO 2420
2420: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2421: LD_EXP 19
2425: PPUSH
2426: LD_STRING DBurlak
2428: PPUSH
2429: CALL_OW 88
// Say ( JMM , DJMM ) ;
2433: LD_EXP 37
2437: PPUSH
2438: LD_STRING DJMM
2440: PPUSH
2441: CALL_OW 88
// end ;
2445: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2446: LD_INT 1
2448: PUSH
2449: LD_INT 22
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: LD_INT 34
2464: PUSH
2465: LD_INT 9
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 35
2474: PUSH
2475: LD_INT 9
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: PUSH
2497: LD_INT 1
2499: GREATER
2500: IFFALSE 2513
2502: GO 2504
2504: DISABLE
// LaserBuilt := true ;
2505: LD_ADDR_EXP 7
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
2513: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2514: LD_EXP 8
2518: PUSH
2519: LD_INT 6
2521: PPUSH
2522: LD_INT 1
2524: PUSH
2525: LD_INT 22
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 35
2537: PUSH
2538: LD_INT 9
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 69
2557: PPUSH
2558: LD_EXP 16
2562: PPUSH
2563: CALL_OW 310
2567: PPUSH
2568: CALL_OW 74
2572: PPUSH
2573: CALL_OW 292
2577: AND
2578: IFFALSE 2607
2580: GO 2582
2582: DISABLE
// begin Say ( Sevi , DDeath-Vse-2 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING DDeath-Vse-2
2590: PPUSH
2591: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2595: LD_EXP 13
2599: PPUSH
2600: LD_STRING DDeath-Yas-2
2602: PPUSH
2603: CALL_OW 88
// end ;
2607: END
// every 0 0$1 trigger MissionStart and GetResourceArea ( CratesArea , mat_cans ) < 20 do
2608: LD_EXP 1
2612: PUSH
2613: LD_INT 12
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: CALL_OW 287
2623: PUSH
2624: LD_INT 20
2626: LESS
2627: AND
2628: IFFALSE 2670
2630: GO 2632
2632: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2633: LD_INT 1750
2635: PPUSH
2636: LD_INT 4900
2638: PPUSH
2639: CALL_OW 12
2643: PPUSH
2644: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2648: LD_INT 2
2650: PPUSH
2651: LD_INT 5
2653: PPUSH
2654: CALL_OW 12
2658: PPUSH
2659: LD_INT 12
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: CALL_OW 55
// enable ;
2669: ENABLE
// end ;
2670: END
// every 0 0$1 trigger FilterUnitsInArea ( EastFlankArea , [ f_enemy , 1 ] ) do var un , x , y ;
2671: LD_INT 17
2673: PPUSH
2674: LD_INT 81
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 70
2688: IFFALSE 2814
2690: GO 2692
2692: DISABLE
2693: LD_INT 0
2695: PPUSH
2696: PPUSH
2697: PPUSH
// begin un := FilterUnitsInArea ( EastFlankArea , [ f_enemy , 1 ] ) [ 1 ] ;
2698: LD_ADDR_VAR 0 1
2702: PUSH
2703: LD_INT 17
2705: PPUSH
2706: LD_INT 81
2708: PUSH
2709: LD_INT 1
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 70
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: ST_TO_ADDR
// x := GetX ( un ) ;
2725: LD_ADDR_VAR 0 2
2729: PUSH
2730: LD_VAR 0 1
2734: PPUSH
2735: CALL_OW 250
2739: ST_TO_ADDR
// y := GetY ( un ) ;
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_VAR 0 1
2749: PPUSH
2750: CALL_OW 251
2754: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 12 ) ;
2755: LD_VAR 0 2
2759: PPUSH
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 12
2770: NEG
2771: PPUSH
2772: CALL_OW 330
// CenterNowOnUnits ( un ) ;
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 87
// Say ( Brighton , DBrighton-E1 ) ;
2785: LD_EXP 9
2789: PPUSH
2790: LD_STRING DBrighton-E1
2792: PPUSH
2793: CALL_OW 88
// RemoveSeeing ( x , y , 1 ) ;
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: CALL_OW 331
// end ;
2814: PPOPN 3
2816: END
// every 0 0$1 trigger MissionStart do
2817: LD_EXP 1
2821: IFFALSE 2844
2823: GO 2825
2825: DISABLE
// begin enable ;
2826: ENABLE
// display_Strings := [ #tick , tick ] ;
2827: LD_ADDR_OWVAR 47
2831: PUSH
2832: LD_STRING #tick
2834: PUSH
2835: LD_OWVAR 1
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// end ; end_of_file
2844: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2845: LD_INT 0
2847: PPUSH
// uc_side := 1 ;
2848: LD_ADDR_OWVAR 20
2852: PUSH
2853: LD_INT 1
2855: ST_TO_ADDR
// hc_class = class_soldier ;
2856: LD_ADDR_OWVAR 28
2860: PUSH
2861: LD_INT 1
2863: ST_TO_ADDR
// uc_nation := nation_american ;
2864: LD_ADDR_OWVAR 21
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// hc_sex = sex_male ;
2872: LD_ADDR_OWVAR 27
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// hc_importance = 110 ;
2880: LD_ADDR_OWVAR 32
2884: PUSH
2885: LD_INT 110
2887: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2888: LD_ADDR_OWVAR 30
2892: PUSH
2893: LD_INT 5
2895: PUSH
2896: LD_INT 4
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 3
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2911: LD_ADDR_OWVAR 31
2915: PUSH
2916: LD_INT 9
2918: PUSH
2919: LD_INT 6
2921: PUSH
2922: LD_INT 7
2924: PUSH
2925: LD_INT 6
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2934: LD_ADDR_OWVAR 29
2938: PUSH
2939: LD_INT 12
2941: PUSH
2942: LD_INT 10
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2949: LD_ADDR_OWVAR 26
2953: PUSH
2954: LD_STRING Gerard Brighton
2956: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2957: LD_ADDR_OWVAR 33
2961: PUSH
2962: LD_STRING Beta_Skirmish
2964: ST_TO_ADDR
// hc_face_number := 1 ;
2965: LD_ADDR_OWVAR 34
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// Brighton := CreateHuman ;
2973: LD_ADDR_EXP 9
2977: PUSH
2978: CALL_OW 44
2982: ST_TO_ADDR
// uc_nation := nation_american ;
2983: LD_ADDR_OWVAR 21
2987: PUSH
2988: LD_INT 1
2990: ST_TO_ADDR
// hc_importance = 80 ;
2991: LD_ADDR_OWVAR 32
2995: PUSH
2996: LD_INT 80
2998: ST_TO_ADDR
// hc_sex = sex_male ;
2999: LD_ADDR_OWVAR 27
3003: PUSH
3004: LD_INT 1
3006: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
3007: LD_ADDR_OWVAR 30
3011: PUSH
3012: LD_INT 5
3014: PUSH
3015: LD_INT 5
3017: PUSH
3018: LD_INT 3
3020: PUSH
3021: LD_INT 1
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
3030: LD_ADDR_OWVAR 31
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: LD_INT 6
3040: PUSH
3041: LD_INT 5
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3053: LD_ADDR_OWVAR 29
3057: PUSH
3058: LD_INT 10
3060: PUSH
3061: LD_INT 10
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// hc_name := Brian Palmer ;
3068: LD_ADDR_OWVAR 26
3072: PUSH
3073: LD_STRING Brian Palmer
3075: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3076: LD_ADDR_OWVAR 33
3080: PUSH
3081: LD_STRING Beta_Skirmish
3083: ST_TO_ADDR
// hc_face_number := 3 ;
3084: LD_ADDR_OWVAR 34
3088: PUSH
3089: LD_INT 3
3091: ST_TO_ADDR
// Palmer := CreateHuman ;
3092: LD_ADDR_EXP 10
3096: PUSH
3097: CALL_OW 44
3101: ST_TO_ADDR
// hc_class = class_scientistic ;
3102: LD_ADDR_OWVAR 28
3106: PUSH
3107: LD_INT 4
3109: ST_TO_ADDR
// uc_nation := nation_american ;
3110: LD_ADDR_OWVAR 21
3114: PUSH
3115: LD_INT 1
3117: ST_TO_ADDR
// hc_importance = 70 ;
3118: LD_ADDR_OWVAR 32
3122: PUSH
3123: LD_INT 70
3125: ST_TO_ADDR
// hc_sex = sex_female ;
3126: LD_ADDR_OWVAR 27
3130: PUSH
3131: LD_INT 2
3133: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
3134: LD_ADDR_OWVAR 30
3138: PUSH
3139: LD_INT 3
3141: PUSH
3142: LD_INT 2
3144: PUSH
3145: LD_INT 4
3147: PUSH
3148: LD_INT 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3157: LD_ADDR_OWVAR 31
3161: PUSH
3162: LD_INT 4
3164: PUSH
3165: LD_INT 2
3167: PUSH
3168: LD_INT 5
3170: PUSH
3171: LD_INT 8
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3180: LD_ADDR_OWVAR 29
3184: PUSH
3185: LD_INT 10
3187: PUSH
3188: LD_INT 10
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: ST_TO_ADDR
// hc_name := Megan Armitage ;
3195: LD_ADDR_OWVAR 26
3199: PUSH
3200: LD_STRING Megan Armitage
3202: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3203: LD_ADDR_OWVAR 33
3207: PUSH
3208: LD_STRING Beta_Skirmish
3210: ST_TO_ADDR
// hc_face_number := 4 ;
3211: LD_ADDR_OWVAR 34
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// Megan := CreateHuman ;
3219: LD_ADDR_EXP 11
3223: PUSH
3224: CALL_OW 44
3228: ST_TO_ADDR
// end ;
3229: LD_VAR 0 1
3233: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3234: LD_INT 0
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
3240: PPUSH
// uc_side := 1 ;
3241: LD_ADDR_OWVAR 20
3245: PUSH
3246: LD_INT 1
3248: ST_TO_ADDR
// uc_nation := nation_american ;
3249: LD_ADDR_OWVAR 21
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3347
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_INT 3
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: LD_INT 5
3310: PUSH
3311: LD_INT 11
3313: PUSH
3314: LD_INT 3
3316: PUSH
3317: LD_INT 4
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_INT 7
3334: PPUSH
3335: CALL_OW 12
3339: ARRAY
3340: PPUSH
3341: CALL_OW 431
3345: GO 3291
3347: POP
3348: POP
// hc_name :=  ;
3349: LD_ADDR_OWVAR 26
3353: PUSH
3354: LD_STRING 
3356: ST_TO_ADDR
// hc_gallery :=  ;
3357: LD_ADDR_OWVAR 33
3361: PUSH
3362: LD_STRING 
3364: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_INT 6
3377: PUSH
3378: LD_INT 5
3380: PUSH
3381: LD_INT 5
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: LIST
3388: PUSH
3389: LD_OWVAR 67
3393: ARRAY
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3454
// begin PrepareSoldier ( 1 , game_skill ) ;
3398: LD_INT 1
3400: PPUSH
3401: LD_EXP 39
3405: PPUSH
3406: CALL_OW 381
// un := CreateHuman ;
3410: LD_ADDR_VAR 0 4
3414: PUSH
3415: CALL_OW 44
3419: ST_TO_ADDR
// filter := filter ^ un ;
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: LD_VAR 0 3
3429: PUSH
3430: LD_VAR 0 4
3434: ADD
3435: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3436: LD_ADDR_VAR 0 5
3440: PUSH
3441: LD_VAR 0 5
3445: PUSH
3446: LD_VAR 0 4
3450: ADD
3451: ST_TO_ADDR
// end ;
3452: GO 3395
3454: POP
3455: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3456: LD_ADDR_VAR 0 2
3460: PUSH
3461: DOUBLE
3462: LD_INT 1
3464: DEC
3465: ST_TO_ADDR
3466: LD_INT 3
3468: PUSH
3469: LD_INT 2
3471: PUSH
3472: LD_INT 2
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: PUSH
3480: LD_OWVAR 67
3484: ARRAY
3485: PUSH
3486: FOR_TO
3487: IFFALSE 3541
// begin PrepareEngineer ( 0 , game_skill ) ;
3489: LD_INT 0
3491: PPUSH
3492: LD_EXP 39
3496: PPUSH
3497: CALL_OW 382
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 4
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// filter := filter ^ un ;
3511: LD_ADDR_VAR 0 3
3515: PUSH
3516: LD_VAR 0 3
3520: PUSH
3521: LD_VAR 0 4
3525: ADD
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3527: LD_VAR 0 4
3531: PPUSH
3532: LD_INT 3
3534: PPUSH
3535: CALL_OW 52
// end ;
3539: GO 3486
3541: POP
3542: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: DOUBLE
3549: LD_INT 1
3551: DEC
3552: ST_TO_ADDR
3553: LD_INT 4
3555: PUSH
3556: LD_INT 3
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_OWVAR 67
3571: ARRAY
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// begin PrepareMechanic ( 0 , game_skill ) ;
3576: LD_INT 0
3578: PPUSH
3579: LD_EXP 39
3583: PPUSH
3584: CALL_OW 383
// un := CreateHuman ;
3588: LD_ADDR_VAR 0 4
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// filter := filter ^ un ;
3598: LD_ADDR_VAR 0 3
3602: PUSH
3603: LD_VAR 0 3
3607: PUSH
3608: LD_VAR 0 4
3612: ADD
3613: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3614: LD_VAR 0 4
3618: PPUSH
3619: LD_INT 8
3621: PPUSH
3622: CALL_OW 52
// end ;
3626: GO 3573
3628: POP
3629: POP
// for i = 1 to 2 do
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: DOUBLE
3636: LD_INT 1
3638: DEC
3639: ST_TO_ADDR
3640: LD_INT 2
3642: PUSH
3643: FOR_TO
3644: IFFALSE 3698
// begin PrepareScientist ( 0 , game_skill ) ;
3646: LD_INT 0
3648: PPUSH
3649: LD_EXP 39
3653: PPUSH
3654: CALL_OW 384
// un := CreateHuman ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: CALL_OW 44
3667: ST_TO_ADDR
// filter := filter ^ un ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: LD_VAR 0 3
3677: PUSH
3678: LD_VAR 0 4
3682: ADD
3683: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3684: LD_VAR 0 4
3688: PPUSH
3689: LD_INT 14
3691: PPUSH
3692: CALL_OW 52
// end ;
3696: GO 3643
3698: POP
3699: POP
// for i = 1 to soldiers do
3700: LD_ADDR_VAR 0 2
3704: PUSH
3705: DOUBLE
3706: LD_INT 1
3708: DEC
3709: ST_TO_ADDR
3710: LD_VAR 0 5
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3741
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3718: LD_VAR 0 5
3722: PUSH
3723: LD_VAR 0 2
3727: ARRAY
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: LD_INT 0
3734: PPUSH
3735: CALL_OW 49
3739: GO 3715
3741: POP
3742: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3743: LD_EXP 9
3747: PPUSH
3748: LD_INT 51
3750: PPUSH
3751: LD_INT 43
3753: PPUSH
3754: LD_INT 0
3756: PPUSH
3757: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3761: LD_EXP 10
3765: PPUSH
3766: LD_INT 55
3768: PPUSH
3769: LD_INT 58
3771: PPUSH
3772: LD_INT 0
3774: PPUSH
3775: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3779: LD_EXP 11
3783: PPUSH
3784: LD_INT 39
3786: PPUSH
3787: LD_INT 36
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL_OW 48
// BetaSquad := filter diff 0 ;
3797: LD_ADDR_EXP 12
3801: PUSH
3802: LD_VAR 0 3
3806: PUSH
3807: LD_INT 0
3809: DIFF
3810: ST_TO_ADDR
// end ;
3811: LD_VAR 0 1
3815: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
3823: PPUSH
// uc_side := 6 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 6
3831: ST_TO_ADDR
// uc_nation := nation_russian ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// soldiers := [ ] ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// vehs := [ ] ;
3847: LD_ADDR_VAR 0 6
3851: PUSH
3852: EMPTY
3853: ST_TO_ADDR
// RUArmada := [ ] ;
3854: LD_ADDR_EXP 17
3858: PUSH
3859: EMPTY
3860: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3861: LD_ADDR_EXP 13
3865: PUSH
3866: LD_STRING Yashin
3868: PPUSH
3869: CALL_OW 25
3873: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3874: LD_ADDR_EXP 14
3878: PUSH
3879: LD_STRING Popov
3881: PPUSH
3882: CALL_OW 25
3886: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3887: LD_ADDR_EXP 15
3891: PUSH
3892: LD_STRING Gaydar
3894: PPUSH
3895: CALL_OW 25
3899: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3900: LD_ADDR_EXP 16
3904: PUSH
3905: LD_STRING Vsevolod
3907: PPUSH
3908: CALL_OW 25
3912: ST_TO_ADDR
// for i = 1 to 16 do
3913: LD_ADDR_VAR 0 2
3917: PUSH
3918: DOUBLE
3919: LD_INT 1
3921: DEC
3922: ST_TO_ADDR
3923: LD_INT 16
3925: PUSH
3926: FOR_TO
3927: IFFALSE 3969
// begin PrepareSoldier ( 0 , game_eskill ) ;
3929: LD_INT 0
3931: PPUSH
3932: LD_EXP 40
3936: PPUSH
3937: CALL_OW 381
// un := CreateHuman ;
3941: LD_ADDR_VAR 0 5
3945: PUSH
3946: CALL_OW 44
3950: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3951: LD_ADDR_VAR 0 4
3955: PUSH
3956: LD_VAR 0 4
3960: PUSH
3961: LD_VAR 0 5
3965: ADD
3966: ST_TO_ADDR
// end ;
3967: GO 3926
3969: POP
3970: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3971: LD_ADDR_VAR 0 4
3975: PUSH
3976: LD_EXP 13
3980: PUSH
3981: LD_EXP 14
3985: ADD
3986: PUSH
3987: LD_EXP 15
3991: ADD
3992: PUSH
3993: LD_EXP 16
3997: ADD
3998: PUSH
3999: LD_VAR 0 4
4003: ADD
4004: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
4005: LD_INT 24
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 46
4016: PPUSH
4017: LD_INT 100
4019: PPUSH
4020: CALL 18388 0 5
// for i = 1 to 8 do
4024: LD_ADDR_VAR 0 2
4028: PUSH
4029: DOUBLE
4030: LD_INT 1
4032: DEC
4033: ST_TO_ADDR
4034: LD_INT 8
4036: PUSH
4037: FOR_TO
4038: IFFALSE 4121
// begin vehicle := CreateVehicle ;
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: CALL_OW 45
4049: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4050: LD_VAR 0 4
4054: PUSH
4055: LD_INT 1
4057: ARRAY
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4068: LD_ADDR_VAR 0 4
4072: PUSH
4073: LD_VAR 0 4
4077: PUSH
4078: LD_VAR 0 4
4082: PUSH
4083: LD_INT 1
4085: ARRAY
4086: DIFF
4087: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4088: LD_VAR 0 3
4092: PPUSH
4093: LD_INT 5
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL_OW 49
// vehs := vehs ^ vehicle ;
4103: LD_ADDR_VAR 0 6
4107: PUSH
4108: LD_VAR 0 6
4112: PUSH
4113: LD_VAR 0 3
4117: ADD
4118: ST_TO_ADDR
// end ;
4119: GO 4037
4121: POP
4122: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
4123: LD_INT 24
4125: PPUSH
4126: LD_INT 3
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: LD_INT 43
4134: PPUSH
4135: LD_INT 100
4137: PPUSH
4138: CALL 18388 0 5
// for i = 1 to 8 do
4142: LD_ADDR_VAR 0 2
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_INT 8
4154: PUSH
4155: FOR_TO
4156: IFFALSE 4239
// begin vehicle := CreateVehicle ;
4158: LD_ADDR_VAR 0 3
4162: PUSH
4163: CALL_OW 45
4167: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4168: LD_VAR 0 4
4172: PUSH
4173: LD_INT 1
4175: ARRAY
4176: PPUSH
4177: LD_VAR 0 3
4181: PPUSH
4182: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4186: LD_ADDR_VAR 0 4
4190: PUSH
4191: LD_VAR 0 4
4195: PUSH
4196: LD_VAR 0 4
4200: PUSH
4201: LD_INT 1
4203: ARRAY
4204: DIFF
4205: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4206: LD_VAR 0 3
4210: PPUSH
4211: LD_INT 5
4213: PPUSH
4214: LD_INT 0
4216: PPUSH
4217: CALL_OW 49
// vehs := vehs ^ vehicle ;
4221: LD_ADDR_VAR 0 6
4225: PUSH
4226: LD_VAR 0 6
4230: PUSH
4231: LD_VAR 0 3
4235: ADD
4236: ST_TO_ADDR
// end ;
4237: GO 4155
4239: POP
4240: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4241: LD_INT 22
4243: PPUSH
4244: LD_INT 3
4246: PPUSH
4247: LD_INT 1
4249: PPUSH
4250: LD_INT 44
4252: PPUSH
4253: LD_INT 100
4255: PPUSH
4256: CALL 18388 0 5
// for i = 1 to 4 do
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: DOUBLE
4266: LD_INT 1
4268: DEC
4269: ST_TO_ADDR
4270: LD_INT 4
4272: PUSH
4273: FOR_TO
4274: IFFALSE 4357
// begin vehicle := CreateVehicle ;
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: CALL_OW 45
4285: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4286: LD_VAR 0 4
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_VAR 0 3
4299: PPUSH
4300: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4304: LD_ADDR_VAR 0 4
4308: PUSH
4309: LD_VAR 0 4
4313: PUSH
4314: LD_VAR 0 4
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: DIFF
4323: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4324: LD_VAR 0 3
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// vehs := vehs ^ vehicle ;
4339: LD_ADDR_VAR 0 6
4343: PUSH
4344: LD_VAR 0 6
4348: PUSH
4349: LD_VAR 0 3
4353: ADD
4354: ST_TO_ADDR
// end ;
4355: GO 4273
4357: POP
4358: POP
// RUArmada := vehs ;
4359: LD_ADDR_EXP 17
4363: PUSH
4364: LD_VAR 0 6
4368: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4369: LD_EXP 13
4373: PPUSH
4374: CALL_OW 310
4378: PUSH
4379: LD_EXP 14
4383: PPUSH
4384: CALL_OW 310
4388: PUSH
4389: LD_EXP 15
4393: PPUSH
4394: CALL_OW 310
4398: PUSH
4399: LD_EXP 16
4403: PPUSH
4404: CALL_OW 310
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PPUSH
4415: LD_INT 6
4417: NEG
4418: PPUSH
4419: CALL_OW 242
// end ;
4423: LD_VAR 0 1
4427: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4428: LD_INT 0
4430: PPUSH
4431: PPUSH
4432: PPUSH
// uc_side := 6 ;
4433: LD_ADDR_OWVAR 20
4437: PUSH
4438: LD_INT 6
4440: ST_TO_ADDR
// uc_nation := nation_russian ;
4441: LD_ADDR_OWVAR 21
4445: PUSH
4446: LD_INT 3
4448: ST_TO_ADDR
// Bulldozers := [ ] ;
4449: LD_ADDR_EXP 18
4453: PUSH
4454: EMPTY
4455: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4456: LD_INT 24
4458: PPUSH
4459: LD_INT 3
4461: PPUSH
4462: LD_INT 3
4464: PPUSH
4465: LD_INT 53
4467: PPUSH
4468: LD_INT 100
4470: PPUSH
4471: CALL 18388 0 5
// for i = 1 to 2 do
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: DOUBLE
4481: LD_INT 1
4483: DEC
4484: ST_TO_ADDR
4485: LD_INT 2
4487: PUSH
4488: FOR_TO
4489: IFFALSE 4534
// begin vehicle := CreateVehicle ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: CALL_OW 45
4500: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_INT 5
4508: PPUSH
4509: LD_INT 0
4511: PPUSH
4512: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4516: LD_ADDR_EXP 18
4520: PUSH
4521: LD_EXP 18
4525: PUSH
4526: LD_VAR 0 3
4530: ADD
4531: ST_TO_ADDR
// end ;
4532: GO 4488
4534: POP
4535: POP
// end ;
4536: LD_VAR 0 1
4540: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
// uc_side := 3 ;
4547: LD_ADDR_OWVAR 20
4551: PUSH
4552: LD_INT 3
4554: ST_TO_ADDR
// uc_nation := nation_russian ;
4555: LD_ADDR_OWVAR 21
4559: PUSH
4560: LD_INT 3
4562: ST_TO_ADDR
// hc_name :=  ;
4563: LD_ADDR_OWVAR 26
4567: PUSH
4568: LD_STRING 
4570: ST_TO_ADDR
// hc_gallery :=  ;
4571: LD_ADDR_OWVAR 33
4575: PUSH
4576: LD_STRING 
4578: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4579: LD_ADDR_EXP 19
4583: PUSH
4584: LD_STRING Burlak
4586: PPUSH
4587: CALL_OW 25
4591: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4592: LD_ADDR_EXP 20
4596: PUSH
4597: LD_STRING Gleb
4599: PPUSH
4600: CALL_OW 25
4604: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4605: LD_ADDR_EXP 21
4609: PUSH
4610: LD_STRING Furmanov
4612: PPUSH
4613: CALL_OW 25
4617: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4618: LD_ADDR_EXP 22
4622: PUSH
4623: LD_STRING Titov
4625: PPUSH
4626: CALL_OW 25
4630: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4631: LD_ADDR_EXP 23
4635: PUSH
4636: LD_STRING Scholtze
4638: PPUSH
4639: CALL_OW 25
4643: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4644: LD_ADDR_EXP 24
4648: PUSH
4649: LD_STRING Dolgov
4651: PPUSH
4652: CALL_OW 25
4656: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4657: LD_ADDR_EXP 25
4661: PUSH
4662: LD_STRING Kapitsova
4664: PPUSH
4665: CALL_OW 25
4669: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4670: LD_ADDR_EXP 26
4674: PUSH
4675: LD_STRING Karamazov
4677: PPUSH
4678: CALL_OW 25
4682: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4683: LD_ADDR_EXP 27
4687: PUSH
4688: LD_STRING Kirlenkova
4690: PPUSH
4691: CALL_OW 25
4695: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4696: LD_ADDR_EXP 28
4700: PUSH
4701: LD_STRING Kovalyuk
4703: PPUSH
4704: CALL_OW 25
4708: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4709: LD_ADDR_EXP 29
4713: PUSH
4714: LD_STRING Kozlov
4716: PPUSH
4717: CALL_OW 25
4721: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4722: LD_ADDR_EXP 30
4726: PUSH
4727: LD_STRING Kuzmov
4729: PPUSH
4730: CALL_OW 25
4734: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4735: LD_ADDR_EXP 31
4739: PUSH
4740: LD_STRING Lipshchin
4742: PPUSH
4743: CALL_OW 25
4747: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4748: LD_ADDR_EXP 32
4752: PUSH
4753: LD_STRING Oblukov
4755: PPUSH
4756: CALL_OW 25
4760: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4761: LD_ADDR_EXP 33
4765: PUSH
4766: LD_STRING Xavier2
4768: PPUSH
4769: CALL_OW 25
4773: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4774: LD_ADDR_EXP 34
4778: PUSH
4779: LD_STRING Gnyevko
4781: PPUSH
4782: CALL_OW 25
4786: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4787: LD_ADDR_EXP 35
4791: PUSH
4792: LD_STRING Belkov
4794: PPUSH
4795: CALL_OW 25
4799: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: LD_EXP 19
4809: PUSH
4810: LD_EXP 20
4814: PUSH
4815: LD_EXP 21
4819: PUSH
4820: LD_EXP 22
4824: PUSH
4825: LD_EXP 23
4829: PUSH
4830: LD_EXP 24
4834: PUSH
4835: LD_EXP 25
4839: PUSH
4840: LD_EXP 26
4844: PUSH
4845: LD_EXP 27
4849: PUSH
4850: LD_EXP 28
4854: PUSH
4855: LD_EXP 29
4859: PUSH
4860: LD_EXP 30
4864: PUSH
4865: LD_EXP 31
4869: PUSH
4870: LD_EXP 32
4874: PUSH
4875: LD_EXP 33
4879: PUSH
4880: LD_EXP 34
4884: PUSH
4885: LD_EXP 35
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: ST_TO_ADDR
// for i = 1 to filter do
4909: LD_ADDR_VAR 0 2
4913: PUSH
4914: DOUBLE
4915: LD_INT 1
4917: DEC
4918: ST_TO_ADDR
4919: LD_VAR 0 3
4923: PUSH
4924: FOR_TO
4925: IFFALSE 4950
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4927: LD_VAR 0 3
4931: PUSH
4932: LD_VAR 0 2
4936: ARRAY
4937: PPUSH
4938: LD_INT 6
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 49
4948: GO 4924
4950: POP
4951: POP
// end ;
4952: LD_VAR 0 1
4956: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4957: LD_INT 0
4959: PPUSH
4960: PPUSH
4961: PPUSH
4962: PPUSH
// uc_side := 3 ;
4963: LD_ADDR_OWVAR 20
4967: PUSH
4968: LD_INT 3
4970: ST_TO_ADDR
// uc_nation := nation_russian ;
4971: LD_ADDR_OWVAR 21
4975: PUSH
4976: LD_INT 3
4978: ST_TO_ADDR
// hc_name :=  ;
4979: LD_ADDR_OWVAR 26
4983: PUSH
4984: LD_STRING 
4986: ST_TO_ADDR
// hc_gallery :=  ;
4987: LD_ADDR_OWVAR 33
4991: PUSH
4992: LD_STRING 
4994: ST_TO_ADDR
// for i = 1 to 8 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 8
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5051
// begin PrepareSoldier ( 0 , game_eskill ) ;
5011: LD_INT 0
5013: PPUSH
5014: LD_EXP 40
5018: PPUSH
5019: CALL_OW 381
// un := CreateHuman ;
5023: LD_ADDR_VAR 0 4
5027: PUSH
5028: CALL_OW 44
5032: ST_TO_ADDR
// filter := filter ^ un ;
5033: LD_ADDR_VAR 0 3
5037: PUSH
5038: LD_VAR 0 3
5042: PUSH
5043: LD_VAR 0 4
5047: ADD
5048: ST_TO_ADDR
// end ;
5049: GO 5008
5051: POP
5052: POP
// for i = 1 to 4 do
5053: LD_ADDR_VAR 0 2
5057: PUSH
5058: DOUBLE
5059: LD_INT 1
5061: DEC
5062: ST_TO_ADDR
5063: LD_INT 4
5065: PUSH
5066: FOR_TO
5067: IFFALSE 5109
// begin PrepareEngineer ( 0 , game_eskill ) ;
5069: LD_INT 0
5071: PPUSH
5072: LD_EXP 40
5076: PPUSH
5077: CALL_OW 382
// un := CreateHuman ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 44
5090: ST_TO_ADDR
// filter := filter ^ un ;
5091: LD_ADDR_VAR 0 3
5095: PUSH
5096: LD_VAR 0 3
5100: PUSH
5101: LD_VAR 0 4
5105: ADD
5106: ST_TO_ADDR
// end ;
5107: GO 5066
5109: POP
5110: POP
// for i = 1 to 6 do
5111: LD_ADDR_VAR 0 2
5115: PUSH
5116: DOUBLE
5117: LD_INT 1
5119: DEC
5120: ST_TO_ADDR
5121: LD_INT 6
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5167
// begin PrepareMechanic ( 0 , game_eskill ) ;
5127: LD_INT 0
5129: PPUSH
5130: LD_EXP 40
5134: PPUSH
5135: CALL_OW 383
// un := CreateHuman ;
5139: LD_ADDR_VAR 0 4
5143: PUSH
5144: CALL_OW 44
5148: ST_TO_ADDR
// filter := filter ^ un ;
5149: LD_ADDR_VAR 0 3
5153: PUSH
5154: LD_VAR 0 3
5158: PUSH
5159: LD_VAR 0 4
5163: ADD
5164: ST_TO_ADDR
// end ;
5165: GO 5124
5167: POP
5168: POP
// for i = 1 to 4 do
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: DOUBLE
5175: LD_INT 1
5177: DEC
5178: ST_TO_ADDR
5179: LD_INT 4
5181: PUSH
5182: FOR_TO
5183: IFFALSE 5225
// begin PrepareScientist ( 0 , game_eskill ) ;
5185: LD_INT 0
5187: PPUSH
5188: LD_EXP 40
5192: PPUSH
5193: CALL_OW 384
// un := CreateHuman ;
5197: LD_ADDR_VAR 0 4
5201: PUSH
5202: CALL_OW 44
5206: ST_TO_ADDR
// filter := filter ^ un ;
5207: LD_ADDR_VAR 0 3
5211: PUSH
5212: LD_VAR 0 3
5216: PUSH
5217: LD_VAR 0 4
5221: ADD
5222: ST_TO_ADDR
// end ;
5223: GO 5182
5225: POP
5226: POP
// for i = 1 to filter do
5227: LD_ADDR_VAR 0 2
5231: PUSH
5232: DOUBLE
5233: LD_INT 1
5235: DEC
5236: ST_TO_ADDR
5237: LD_VAR 0 3
5241: PUSH
5242: FOR_TO
5243: IFFALSE 5268
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5245: LD_VAR 0 3
5249: PUSH
5250: LD_VAR 0 2
5254: ARRAY
5255: PPUSH
5256: LD_INT 6
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: CALL_OW 49
5266: GO 5242
5268: POP
5269: POP
// RU_SecondPersonnel := filter ;
5270: LD_ADDR_EXP 36
5274: PUSH
5275: LD_VAR 0 3
5279: ST_TO_ADDR
// end ;
5280: LD_VAR 0 1
5284: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5285: LD_INT 0
5287: PPUSH
5288: PPUSH
5289: PPUSH
5290: PPUSH
5291: PPUSH
5292: PPUSH
5293: PPUSH
// uc_side := 1 ;
5294: LD_ADDR_OWVAR 20
5298: PUSH
5299: LD_INT 1
5301: ST_TO_ADDR
// uc_nation := nation_american ;
5302: LD_ADDR_OWVAR 21
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5310: LD_ADDR_EXP 37
5314: PUSH
5315: LD_STRING JMM
5317: PPUSH
5318: CALL_OW 25
5322: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5323: LD_EXP 37
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5335: LD_EXP 37
5339: PPUSH
5340: LD_INT 7
5342: PPUSH
5343: LD_INT 0
5345: PPUSH
5346: CALL_OW 49
// mechs := [ ] ;
5350: LD_ADDR_VAR 0 7
5354: PUSH
5355: EMPTY
5356: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5357: LD_ADDR_VAR 0 2
5361: PUSH
5362: DOUBLE
5363: LD_INT 1
5365: DEC
5366: ST_TO_ADDR
5367: LD_INT 4
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: LD_INT 3
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_OWVAR 67
5385: ARRAY
5386: PUSH
5387: FOR_TO
5388: IFFALSE 5449
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5390: LD_INT 0
5392: PPUSH
5393: LD_EXP 39
5397: PUSH
5398: LD_INT 1
5400: PLUS
5401: PPUSH
5402: CALL_OW 381
// un := CreateHuman ;
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: CALL_OW 44
5415: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5416: LD_ADDR_VAR 0 3
5420: PUSH
5421: LD_VAR 0 3
5425: PUSH
5426: LD_VAR 0 4
5430: ADD
5431: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5432: LD_VAR 0 4
5436: PPUSH
5437: LD_INT 7
5439: PPUSH
5440: LD_INT 0
5442: PPUSH
5443: CALL_OW 49
// end ;
5447: GO 5387
5449: POP
5450: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 7
5463: PUSH
5464: LD_INT 6
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5528
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5484: LD_INT 0
5486: PPUSH
5487: LD_EXP 39
5491: PUSH
5492: LD_INT 1
5494: PLUS
5495: PPUSH
5496: CALL_OW 383
// un := CreateHuman ;
5500: LD_ADDR_VAR 0 4
5504: PUSH
5505: CALL_OW 44
5509: ST_TO_ADDR
// mechs := mechs ^ un ;
5510: LD_ADDR_VAR 0 7
5514: PUSH
5515: LD_VAR 0 7
5519: PUSH
5520: LD_VAR 0 4
5524: ADD
5525: ST_TO_ADDR
// end ;
5526: GO 5481
5528: POP
5529: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 3
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 5
5541: PPUSH
5542: LD_INT 100
5544: PPUSH
5545: CALL 18388 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5549: LD_ADDR_VAR 0 2
5553: PUSH
5554: DOUBLE
5555: LD_INT 1
5557: DEC
5558: ST_TO_ADDR
5559: LD_INT 7
5561: PUSH
5562: LD_INT 6
5564: PUSH
5565: LD_INT 4
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_OWVAR 67
5577: ARRAY
5578: PUSH
5579: FOR_TO
5580: IFFALSE 5675
// begin vehicle := CreateVehicle ;
5582: LD_ADDR_VAR 0 6
5586: PUSH
5587: CALL_OW 45
5591: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5592: LD_VAR 0 7
5596: PUSH
5597: LD_INT 1
5599: ARRAY
5600: PPUSH
5601: LD_VAR 0 6
5605: PPUSH
5606: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5610: LD_ADDR_VAR 0 7
5614: PUSH
5615: LD_VAR 0 7
5619: PUSH
5620: LD_VAR 0 7
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: DIFF
5629: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5630: LD_VAR 0 6
5634: PPUSH
5635: LD_INT 1
5637: PPUSH
5638: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5642: LD_VAR 0 6
5646: PPUSH
5647: LD_INT 7
5649: PPUSH
5650: LD_INT 0
5652: PPUSH
5653: CALL_OW 49
// vehs := vehs ^ vehicle ;
5657: LD_ADDR_VAR 0 5
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_VAR 0 6
5671: ADD
5672: ST_TO_ADDR
// end ;
5673: GO 5579
5675: POP
5676: POP
// end ; end_of_file
5677: LD_VAR 0 1
5681: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
5686: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5687: LD_ADDR_OWVAR 67
5691: PUSH
5692: LD_INT 0
5694: PPUSH
5695: CALL_OW 426
5699: ST_TO_ADDR
// game_diff := Difficulty ;
5700: LD_ADDR_EXP 38
5704: PUSH
5705: LD_OWVAR 67
5709: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5710: LD_ADDR_EXP 39
5714: PUSH
5715: LD_INT 7
5717: PUSH
5718: LD_INT 6
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_EXP 38
5733: ARRAY
5734: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5735: LD_ADDR_EXP 40
5739: PUSH
5740: LD_INT 6
5742: PUSH
5743: LD_INT 7
5745: PUSH
5746: LD_INT 8
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PUSH
5754: LD_EXP 38
5758: ARRAY
5759: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5760: LD_ADDR_EXP 42
5764: PUSH
5765: LD_INT 10500
5767: PUSH
5768: LD_INT 6300
5770: PUSH
5771: LD_INT 4200
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: PUSH
5779: LD_EXP 38
5783: ARRAY
5784: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5785: LD_ADDR_EXP 41
5789: PUSH
5790: LD_INT 73500
5792: PUSH
5793: LD_INT 94500
5795: PUSH
5796: LD_INT 115500
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: PUSH
5804: LD_EXP 38
5808: ARRAY
5809: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: LD_INT 51
5817: PUSH
5818: EMPTY
5819: LIST
5820: PUSH
5821: LD_INT 51
5823: PUSH
5824: LD_INT 57
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 51
5833: PUSH
5834: LD_INT 52
5836: PUSH
5837: LD_INT 57
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5850: LD_ADDR_EXP 43
5854: PUSH
5855: LD_INT 300
5857: PUSH
5858: LD_INT 350
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PUSH
5865: LD_INT 230
5867: PUSH
5868: LD_INT 200
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 150
5877: PUSH
5878: LD_INT 100
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: PUSH
5890: LD_EXP 38
5894: ARRAY
5895: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: DOUBLE
5902: LD_INT 1
5904: DEC
5905: ST_TO_ADDR
5906: LD_VAR 0 3
5910: PUSH
5911: LD_EXP 38
5915: ARRAY
5916: PUSH
5917: FOR_TO
5918: IFFALSE 5976
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5920: LD_VAR 0 3
5924: PUSH
5925: LD_EXP 38
5929: ARRAY
5930: PUSH
5931: LD_VAR 0 2
5935: ARRAY
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: LD_INT 2
5942: PPUSH
5943: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5947: LD_VAR 0 3
5951: PUSH
5952: LD_EXP 38
5956: ARRAY
5957: PUSH
5958: LD_VAR 0 2
5962: ARRAY
5963: PPUSH
5964: LD_INT 6
5966: PPUSH
5967: LD_INT 2
5969: PPUSH
5970: CALL_OW 322
// end ;
5974: GO 5917
5976: POP
5977: POP
// end ; end_of_file
5978: LD_VAR 0 1
5982: RET
// export function CustomEvent ( event ) ; begin
5983: LD_INT 0
5985: PPUSH
// end ;
5986: LD_VAR 0 2
5990: RET
// export function CustomInitMacro ( ) ; begin
5991: LD_INT 0
5993: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 3
5999: PPUSH
6000: CALL 75013 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
6004: LD_INT 1
6006: PPUSH
6007: LD_INT 4
6009: PPUSH
6010: CALL 74957 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
6014: LD_INT 1
6016: PPUSH
6017: LD_INT 136
6019: PUSH
6020: LD_INT 130
6022: PUSH
6023: LD_INT 0
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 145
6033: PUSH
6034: LD_INT 123
6036: PUSH
6037: LD_INT 0
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL 74016 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6053: LD_INT 1
6055: PPUSH
6056: LD_INT 43
6058: PUSH
6059: LD_INT 46
6061: PUSH
6062: LD_INT 45
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: PPUSH
6070: CALL 74845 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
6074: LD_INT 1
6076: PPUSH
6077: LD_INT 3
6079: PPUSH
6080: CALL 74527 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
6084: LD_INT 1
6086: PPUSH
6087: LD_INT 3
6089: PPUSH
6090: CALL 74258 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
6094: LD_INT 1
6096: PPUSH
6097: LD_INT 8
6099: PPUSH
6100: CALL 73877 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
6104: LD_INT 1
6106: PPUSH
6107: LD_INT 22
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: LD_INT 43
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_INT 44
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 22
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 45
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 24
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: LD_INT 3
6169: PUSH
6170: LD_INT 43
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 24
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: LD_INT 43
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 24
6199: PUSH
6200: LD_INT 1
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: LD_INT 46
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 22
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 43
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 1
6238: PUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL 73692 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6265: LD_INT 1
6267: PPUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 127
6273: PUSH
6274: LD_INT 125
6276: PUSH
6277: LD_INT 5
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 6
6288: PUSH
6289: LD_INT 124
6291: PUSH
6292: LD_INT 132
6294: PUSH
6295: LD_INT 0
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 29
6306: PUSH
6307: LD_INT 136
6309: PUSH
6310: LD_INT 130
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 4
6324: PUSH
6325: LD_INT 118
6327: PUSH
6328: LD_INT 114
6330: PUSH
6331: LD_INT 2
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 29
6342: PUSH
6343: LD_INT 145
6345: PUSH
6346: LD_INT 123
6348: PUSH
6349: LD_INT 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 26
6360: PUSH
6361: LD_INT 150
6363: PUSH
6364: LD_INT 135
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 26
6378: PUSH
6379: LD_INT 140
6381: PUSH
6382: LD_INT 134
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 26
6396: PUSH
6397: LD_INT 137
6399: PUSH
6400: LD_INT 121
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: LD_INT 155
6417: PUSH
6418: LD_INT 130
6420: PUSH
6421: LD_INT 0
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 32
6432: PUSH
6433: LD_INT 155
6435: PUSH
6436: LD_INT 130
6438: PUSH
6439: LD_INT 0
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 32
6450: PUSH
6451: LD_INT 130
6453: PUSH
6454: LD_INT 114
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 32
6468: PUSH
6469: LD_INT 142
6471: PUSH
6472: LD_INT 115
6474: PUSH
6475: LD_INT 3
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 32
6486: PUSH
6487: LD_INT 153
6489: PUSH
6490: LD_INT 120
6492: PUSH
6493: LD_INT 3
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PPUSH
6517: CALL 73584 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6521: LD_INT 1
6523: PPUSH
6524: LD_INT 10
6526: PUSH
6527: LD_INT 12
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PPUSH
6534: CALL 74434 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 155
6543: PPUSH
6544: LD_INT 130
6546: PPUSH
6547: LD_INT 0
6549: PPUSH
6550: LD_INT 24
6552: PUSH
6553: LD_INT 16
6555: PUSH
6556: LD_INT 17
6558: PUSH
6559: LD_INT 18
6561: PUSH
6562: LD_INT 21
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PPUSH
6572: CALL 74639 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6576: LD_INT 2
6578: PPUSH
6579: LD_INT 3
6581: PPUSH
6582: CALL 75013 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6586: LD_INT 2
6588: PPUSH
6589: LD_INT 4
6591: PPUSH
6592: CALL 74957 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6596: LD_INT 2
6598: PPUSH
6599: LD_INT 84
6601: PUSH
6602: LD_INT 125
6604: PUSH
6605: LD_INT 1
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: PPUSH
6616: CALL 74016 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6620: LD_INT 2
6622: PPUSH
6623: LD_INT 43
6625: PUSH
6626: LD_INT 46
6628: PUSH
6629: LD_INT 45
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PPUSH
6637: CALL 74845 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6641: LD_INT 2
6643: PPUSH
6644: LD_INT 3
6646: PPUSH
6647: CALL 74527 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6651: LD_INT 2
6653: PPUSH
6654: LD_INT 3
6656: PPUSH
6657: CALL 74258 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6661: LD_INT 2
6663: PPUSH
6664: LD_INT 8
6666: PPUSH
6667: CALL 73877 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6671: LD_INT 2
6673: PPUSH
6674: LD_INT 22
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 43
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 44
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 22
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: LD_INT 45
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 24
6730: PUSH
6731: LD_INT 3
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: LD_INT 43
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 24
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: LD_INT 43
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 24
6766: PUSH
6767: LD_INT 3
6769: PUSH
6770: LD_INT 3
6772: PUSH
6773: LD_INT 46
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 22
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: LD_INT 3
6790: PUSH
6791: LD_INT 43
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 22
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 44
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL 73692 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6832: LD_INT 2
6834: PPUSH
6835: LD_INT 0
6837: PUSH
6838: LD_INT 96
6840: PUSH
6841: LD_INT 125
6843: PUSH
6844: LD_INT 0
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 6
6855: PUSH
6856: LD_INT 74
6858: PUSH
6859: LD_INT 122
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 30
6873: PUSH
6874: LD_INT 84
6876: PUSH
6877: LD_INT 125
6879: PUSH
6880: LD_INT 1
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 28
6891: PUSH
6892: LD_INT 86
6894: PUSH
6895: LD_INT 128
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 28
6909: PUSH
6910: LD_INT 85
6912: PUSH
6913: LD_INT 130
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 28
6927: PUSH
6928: LD_INT 88
6930: PUSH
6931: LD_INT 132
6933: PUSH
6934: LD_INT 5
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: LD_INT 106
6948: PUSH
6949: LD_INT 130
6951: PUSH
6952: LD_INT 0
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: LD_INT 99
6966: PUSH
6967: LD_INT 114
6969: PUSH
6970: LD_INT 3
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 32
6981: PUSH
6982: LD_INT 72
6984: PUSH
6985: LD_INT 112
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 32
6999: PUSH
7000: LD_INT 78
7002: PUSH
7003: LD_INT 110
7005: PUSH
7006: LD_INT 3
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 32
7017: PUSH
7018: LD_INT 84
7020: PUSH
7021: LD_INT 110
7023: PUSH
7024: LD_INT 2
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 32
7035: PUSH
7036: LD_INT 105
7038: PUSH
7039: LD_INT 117
7041: PUSH
7042: LD_INT 3
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: PPUSH
7065: CALL 73584 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
7069: LD_INT 2
7071: PPUSH
7072: LD_INT 14
7074: PUSH
7075: LD_INT 11
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL 74434 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
7086: LD_INT 2
7088: PPUSH
7089: LD_INT 106
7091: PPUSH
7092: LD_INT 130
7094: PPUSH
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 24
7100: PUSH
7101: LD_INT 16
7103: PUSH
7104: LD_INT 17
7106: PUSH
7107: LD_INT 18
7109: PUSH
7110: LD_INT 21
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL 74639 0 5
// end ;
7124: LD_VAR 0 1
7128: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7129: LD_INT 22
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 30
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: IFFALSE 8300
7159: GO 7161
7161: DISABLE
7162: LD_INT 0
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
7169: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7170: LD_INT 6300
7172: PUSH
7173: LD_INT 4200
7175: PUSH
7176: LD_INT 2100
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: LD_OWVAR 67
7188: ARRAY
7189: PPUSH
7190: CALL_OW 67
// base := 2 ;
7194: LD_ADDR_VAR 0 2
7198: PUSH
7199: LD_INT 2
7201: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7202: LD_INT 22
7204: PUSH
7205: LD_INT 3
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 30
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PPUSH
7226: CALL_OW 69
7230: NOT
7231: IFFALSE 7235
// continue ;
7233: GO 7170
// case Rand ( 1 , 3 ) of 1 :
7235: LD_INT 1
7237: PPUSH
7238: LD_INT 3
7240: PPUSH
7241: CALL_OW 12
7245: PUSH
7246: LD_INT 1
7248: DOUBLE
7249: EQUAL
7250: IFTRUE 7254
7252: GO 7430
7254: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: LD_INT 43
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 24
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: LD_INT 3
7286: PUSH
7287: LD_INT 46
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 24
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 3
7304: PUSH
7305: LD_INT 43
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 24
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: LD_INT 3
7322: PUSH
7323: LD_INT 46
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 22
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 45
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: LD_INT 43
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 24
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 3
7376: PUSH
7377: LD_INT 46
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 22
7388: PUSH
7389: LD_INT 3
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: LD_INT 45
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7414: LD_VAR 0 2
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL 73740 0 2
// end ; 2 :
7428: GO 7761
7430: LD_INT 2
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7576
7438: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: LD_INT 24
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: LD_INT 3
7452: PUSH
7453: LD_INT 43
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 24
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 46
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 24
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: LD_INT 3
7488: PUSH
7489: LD_INT 43
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 24
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 3
7506: PUSH
7507: LD_INT 46
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 22
7518: PUSH
7519: LD_INT 3
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: LD_INT 45
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 22
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: LD_INT 3
7542: PUSH
7543: LD_INT 45
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7560: LD_VAR 0 2
7564: PPUSH
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL 73740 0 2
// end ; 3 :
7574: GO 7761
7576: LD_INT 3
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7760
7584: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7585: LD_ADDR_VAR 0 3
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: LD_INT 43
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 24
7610: PUSH
7611: LD_INT 3
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 46
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 22
7628: PUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 43
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 24
7646: PUSH
7647: LD_INT 3
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: LD_INT 46
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 22
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 45
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 3
7685: PUSH
7686: LD_INT 3
7688: PUSH
7689: LD_INT 43
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 24
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: LD_INT 46
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_INT 3
7721: PUSH
7722: LD_INT 3
7724: PUSH
7725: LD_INT 45
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 3
7753: PPUSH
7754: CALL 73740 0 2
// end ; end ;
7758: GO 7761
7760: POP
// repeat wait ( 0 0$1 ) ;
7761: LD_INT 35
7763: PPUSH
7764: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7768: LD_VAR 0 2
7772: PPUSH
7773: CALL 74088 0 1
7777: PUSH
7778: LD_INT 0
7780: EQUAL
7781: IFFALSE 7761
// wait ( 0 0$30 ) ;
7783: LD_INT 1050
7785: PPUSH
7786: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7790: LD_ADDR_VAR 0 5
7794: PUSH
7795: LD_INT 86
7797: PUSH
7798: LD_INT 77
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 63
7807: PUSH
7808: LD_INT 38
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7819: LD_ADDR_VAR 0 4
7823: PUSH
7824: LD_INT 0
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: LD_INT 0
7844: PUSH
7845: LD_INT 0
7847: PUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 0
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7866: LD_ADDR_VAR 0 6
7870: PUSH
7871: LD_EXP 84
7875: PUSH
7876: LD_VAR 0 2
7880: ARRAY
7881: PUSH
7882: LD_EXP 87
7886: PUSH
7887: LD_VAR 0 2
7891: ARRAY
7892: DIFF
7893: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7894: LD_ADDR_EXP 84
7898: PUSH
7899: LD_EXP 84
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_EXP 84
7913: PUSH
7914: LD_VAR 0 2
7918: ARRAY
7919: PUSH
7920: LD_VAR 0 6
7924: DIFF
7925: PPUSH
7926: CALL_OW 1
7930: ST_TO_ADDR
// if not attackers then
7931: LD_VAR 0 6
7935: NOT
7936: IFFALSE 7940
// continue ;
7938: GO 7170
// repeat wait ( 0 0$1 ) ;
7940: LD_INT 35
7942: PPUSH
7943: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7947: LD_VAR 0 6
7951: PPUSH
7952: LD_INT 60
7954: PUSH
7955: EMPTY
7956: LIST
7957: PPUSH
7958: CALL_OW 72
7962: NOT
7963: IFFALSE 7940
// repeat wait ( 0 0$1 ) ;
7965: LD_INT 35
7967: PPUSH
7968: CALL_OW 67
// for i in attackers do
7972: LD_ADDR_VAR 0 1
7976: PUSH
7977: LD_VAR 0 6
7981: PUSH
7982: FOR_IN
7983: IFFALSE 8267
// begin if IsDead ( i ) then
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL_OW 301
7994: IFFALSE 8012
// attackers := attackers diff i ;
7996: LD_ADDR_VAR 0 6
8000: PUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_VAR 0 1
8010: DIFF
8011: ST_TO_ADDR
// if not HasTask ( i ) then
8012: LD_VAR 0 1
8016: PPUSH
8017: CALL_OW 314
8021: NOT
8022: IFFALSE 8265
// begin if not GetTag ( i ) then
8024: LD_VAR 0 1
8028: PPUSH
8029: CALL_OW 110
8033: NOT
8034: IFFALSE 8126
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
8036: LD_VAR 0 1
8040: PPUSH
8041: LD_VAR 0 5
8045: PUSH
8046: LD_INT 1
8048: ARRAY
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: PPUSH
8054: LD_VAR 0 5
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
8071: LD_VAR 0 1
8075: PPUSH
8076: LD_VAR 0 5
8080: PUSH
8081: LD_INT 1
8083: ARRAY
8084: PUSH
8085: LD_INT 1
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PUSH
8098: LD_INT 2
8100: ARRAY
8101: PPUSH
8102: CALL_OW 297
8106: PUSH
8107: LD_INT 8
8109: LESS
8110: IFFALSE 8124
// SetTag ( i , 1 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 1
8119: PPUSH
8120: CALL_OW 109
// end else
8124: GO 8265
// if GetTag ( i ) = 1 then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 110
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8231
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_VAR 0 5
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 5
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
8176: LD_VAR 0 1
8180: PPUSH
8181: LD_VAR 0 5
8185: PUSH
8186: LD_INT 2
8188: ARRAY
8189: PUSH
8190: LD_INT 1
8192: ARRAY
8193: PPUSH
8194: LD_VAR 0 5
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: PUSH
8203: LD_INT 2
8205: ARRAY
8206: PPUSH
8207: CALL_OW 297
8211: PUSH
8212: LD_INT 8
8214: LESS
8215: IFFALSE 8229
// SetTag ( i , 2 ) ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_INT 2
8224: PPUSH
8225: CALL_OW 109
// end else
8229: GO 8265
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8231: LD_VAR 0 1
8235: PPUSH
8236: LD_INT 81
8238: PUSH
8239: LD_INT 3
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 69
8250: PPUSH
8251: LD_VAR 0 1
8255: PPUSH
8256: CALL_OW 74
8260: PPUSH
8261: CALL_OW 115
// end ; end ;
8265: GO 7982
8267: POP
8268: POP
// until not attackers ;
8269: LD_VAR 0 6
8273: NOT
8274: IFFALSE 7965
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8276: LD_EXP 65
8280: PUSH
8281: LD_VAR 0 2
8285: ARRAY
8286: PPUSH
8287: LD_INT 50
8289: PUSH
8290: EMPTY
8291: LIST
8292: PPUSH
8293: CALL_OW 72
8297: NOT
8298: IFFALSE 7170
// end ;
8300: PPOPN 6
8302: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
8303: LD_INT 22
8305: PUSH
8306: LD_INT 3
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 30
8315: PUSH
8316: LD_INT 3
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PPUSH
8327: CALL_OW 69
8331: IFFALSE 9515
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
8339: PPUSH
8340: PPUSH
8341: PPUSH
8342: PPUSH
8343: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
8344: LD_INT 6300
8346: PUSH
8347: LD_INT 4200
8349: PUSH
8350: LD_INT 2100
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: PUSH
8358: LD_OWVAR 67
8362: ARRAY
8363: PPUSH
8364: CALL_OW 67
// base := 1 ;
8368: LD_ADDR_VAR 0 2
8372: PUSH
8373: LD_INT 1
8375: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
8376: LD_INT 22
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: LD_INT 30
8388: PUSH
8389: LD_INT 3
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PPUSH
8400: CALL_OW 69
8404: NOT
8405: IFFALSE 8409
// continue ;
8407: GO 8344
// case Rand ( 1 , 3 ) of 1 :
8409: LD_INT 1
8411: PPUSH
8412: LD_INT 3
8414: PPUSH
8415: CALL_OW 12
8419: PUSH
8420: LD_INT 1
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8604
8428: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 22
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 3
8442: PUSH
8443: LD_INT 43
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 24
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: LD_INT 46
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 24
8472: PUSH
8473: LD_INT 1
8475: PUSH
8476: LD_INT 3
8478: PUSH
8479: LD_INT 43
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 24
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: LD_INT 3
8496: PUSH
8497: LD_INT 46
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 1
8511: PUSH
8512: LD_INT 3
8514: PUSH
8515: LD_INT 45
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PUSH
8524: LD_INT 22
8526: PUSH
8527: LD_INT 1
8529: PUSH
8530: LD_INT 3
8532: PUSH
8533: LD_INT 43
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 24
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 3
8550: PUSH
8551: LD_INT 46
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 1
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 45
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8588: LD_VAR 0 2
8592: PPUSH
8593: LD_VAR 0 3
8597: PPUSH
8598: CALL 73740 0 2
// end ; 2 :
8602: GO 8973
8604: LD_INT 2
8606: DOUBLE
8607: EQUAL
8608: IFTRUE 8612
8610: GO 8788
8612: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_INT 24
8620: PUSH
8621: LD_INT 1
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 43
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 24
8638: PUSH
8639: LD_INT 1
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: LD_INT 46
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 24
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: LD_INT 3
8662: PUSH
8663: LD_INT 43
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 24
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: LD_INT 3
8680: PUSH
8681: LD_INT 46
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 22
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: LD_INT 3
8698: PUSH
8699: LD_INT 45
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 22
8710: PUSH
8711: LD_INT 1
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: LD_INT 45
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 22
8728: PUSH
8729: LD_INT 1
8731: PUSH
8732: LD_INT 3
8734: PUSH
8735: LD_INT 45
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: LD_INT 45
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8772: LD_VAR 0 2
8776: PPUSH
8777: LD_VAR 0 3
8781: PPUSH
8782: CALL 73740 0 2
// end ; 3 :
8786: GO 8973
8788: LD_INT 3
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8972
8796: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: LD_INT 22
8804: PUSH
8805: LD_INT 1
8807: PUSH
8808: LD_INT 3
8810: PUSH
8811: LD_INT 43
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 24
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: LD_INT 3
8828: PUSH
8829: LD_INT 46
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 22
8840: PUSH
8841: LD_INT 1
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: LD_INT 43
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 24
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: LD_INT 3
8864: PUSH
8865: LD_INT 46
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 22
8876: PUSH
8877: LD_INT 1
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: LD_INT 45
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: LD_INT 43
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 24
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: LD_INT 46
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: LD_INT 3
8936: PUSH
8937: LD_INT 45
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8956: LD_VAR 0 2
8960: PPUSH
8961: LD_VAR 0 3
8965: PPUSH
8966: CALL 73740 0 2
// end ; end ;
8970: GO 8973
8972: POP
// repeat wait ( 0 0$1 ) ;
8973: LD_INT 35
8975: PPUSH
8976: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8980: LD_VAR 0 2
8984: PPUSH
8985: LD_INT 1
8987: PPUSH
8988: CALL 75158 0 2
8992: PUSH
8993: LD_INT 8
8995: GREATEREQUAL
8996: IFFALSE 8973
// wait ( 0 0$30 ) ;
8998: LD_INT 1050
9000: PPUSH
9001: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_INT 144
9012: PUSH
9013: LD_INT 65
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 63
9022: PUSH
9023: LD_INT 38
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
9034: LD_ADDR_VAR 0 4
9038: PUSH
9039: LD_INT 0
9041: PUSH
9042: LD_INT 0
9044: PUSH
9045: LD_INT 0
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: LD_INT 0
9053: PUSH
9054: LD_INT 0
9056: PUSH
9057: LD_INT 0
9059: PUSH
9060: LD_INT 0
9062: PUSH
9063: LD_INT 1
9065: PUSH
9066: LD_INT 0
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
9081: LD_ADDR_VAR 0 6
9085: PUSH
9086: LD_EXP 84
9090: PUSH
9091: LD_VAR 0 2
9095: ARRAY
9096: PUSH
9097: LD_EXP 87
9101: PUSH
9102: LD_VAR 0 2
9106: ARRAY
9107: DIFF
9108: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
9109: LD_ADDR_EXP 84
9113: PUSH
9114: LD_EXP 84
9118: PPUSH
9119: LD_VAR 0 2
9123: PPUSH
9124: LD_EXP 84
9128: PUSH
9129: LD_VAR 0 2
9133: ARRAY
9134: PUSH
9135: LD_VAR 0 6
9139: DIFF
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// if not attackers then
9146: LD_VAR 0 6
9150: NOT
9151: IFFALSE 9155
// continue ;
9153: GO 8344
// repeat wait ( 0 0$1 ) ;
9155: LD_INT 35
9157: PPUSH
9158: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
9162: LD_VAR 0 6
9166: PPUSH
9167: LD_INT 60
9169: PUSH
9170: EMPTY
9171: LIST
9172: PPUSH
9173: CALL_OW 72
9177: NOT
9178: IFFALSE 9155
// repeat wait ( 0 0$1 ) ;
9180: LD_INT 35
9182: PPUSH
9183: CALL_OW 67
// for i in attackers do
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: LD_VAR 0 6
9196: PUSH
9197: FOR_IN
9198: IFFALSE 9482
// begin if IsDead ( i ) then
9200: LD_VAR 0 1
9204: PPUSH
9205: CALL_OW 301
9209: IFFALSE 9227
// attackers := attackers diff i ;
9211: LD_ADDR_VAR 0 6
9215: PUSH
9216: LD_VAR 0 6
9220: PUSH
9221: LD_VAR 0 1
9225: DIFF
9226: ST_TO_ADDR
// if not HasTask ( i ) then
9227: LD_VAR 0 1
9231: PPUSH
9232: CALL_OW 314
9236: NOT
9237: IFFALSE 9480
// begin if not GetTag ( i ) then
9239: LD_VAR 0 1
9243: PPUSH
9244: CALL_OW 110
9248: NOT
9249: IFFALSE 9341
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_VAR 0 5
9260: PUSH
9261: LD_INT 1
9263: ARRAY
9264: PUSH
9265: LD_INT 1
9267: ARRAY
9268: PPUSH
9269: LD_VAR 0 5
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
9286: LD_VAR 0 1
9290: PPUSH
9291: LD_VAR 0 5
9295: PUSH
9296: LD_INT 1
9298: ARRAY
9299: PUSH
9300: LD_INT 1
9302: ARRAY
9303: PPUSH
9304: LD_VAR 0 5
9308: PUSH
9309: LD_INT 1
9311: ARRAY
9312: PUSH
9313: LD_INT 2
9315: ARRAY
9316: PPUSH
9317: CALL_OW 297
9321: PUSH
9322: LD_INT 8
9324: LESS
9325: IFFALSE 9339
// SetTag ( i , 1 ) ;
9327: LD_VAR 0 1
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 109
// end else
9339: GO 9480
// if GetTag ( i ) = 1 then
9341: LD_VAR 0 1
9345: PPUSH
9346: CALL_OW 110
9350: PUSH
9351: LD_INT 1
9353: EQUAL
9354: IFFALSE 9446
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
9356: LD_VAR 0 1
9360: PPUSH
9361: LD_VAR 0 5
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PUSH
9370: LD_INT 1
9372: ARRAY
9373: PPUSH
9374: LD_VAR 0 5
9378: PUSH
9379: LD_INT 2
9381: ARRAY
9382: PUSH
9383: LD_INT 2
9385: ARRAY
9386: PPUSH
9387: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
9391: LD_VAR 0 1
9395: PPUSH
9396: LD_VAR 0 5
9400: PUSH
9401: LD_INT 2
9403: ARRAY
9404: PUSH
9405: LD_INT 1
9407: ARRAY
9408: PPUSH
9409: LD_VAR 0 5
9413: PUSH
9414: LD_INT 2
9416: ARRAY
9417: PUSH
9418: LD_INT 2
9420: ARRAY
9421: PPUSH
9422: CALL_OW 297
9426: PUSH
9427: LD_INT 8
9429: LESS
9430: IFFALSE 9444
// SetTag ( i , 2 ) ;
9432: LD_VAR 0 1
9436: PPUSH
9437: LD_INT 2
9439: PPUSH
9440: CALL_OW 109
// end else
9444: GO 9480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9446: LD_VAR 0 1
9450: PPUSH
9451: LD_INT 81
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PPUSH
9461: CALL_OW 69
9465: PPUSH
9466: LD_VAR 0 1
9470: PPUSH
9471: CALL_OW 74
9475: PPUSH
9476: CALL_OW 115
// end ; end ;
9480: GO 9197
9482: POP
9483: POP
// until not attackers ;
9484: LD_VAR 0 6
9488: NOT
9489: IFFALSE 9180
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
9491: LD_EXP 65
9495: PUSH
9496: LD_VAR 0 2
9500: ARRAY
9501: PPUSH
9502: LD_INT 50
9504: PUSH
9505: EMPTY
9506: LIST
9507: PPUSH
9508: CALL_OW 72
9512: NOT
9513: IFFALSE 8344
// end ;
9515: PPOPN 6
9517: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9518: LD_EXP 4
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_INT 3
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 21
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PPUSH
9547: CALL_OW 69
9551: PUSH
9552: LD_INT 0
9554: EQUAL
9555: AND
9556: IFFALSE 9569
9558: GO 9560
9560: DISABLE
// RussiansDefeated := true ;
9561: LD_ADDR_EXP 44
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
9569: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
9570: LD_EXP 4
9574: PUSH
9575: LD_EXP 6
9579: NOT
9580: AND
9581: IFFALSE 11005
9583: GO 9585
9585: DISABLE
9586: LD_INT 0
9588: PPUSH
9589: PPUSH
9590: PPUSH
9591: PPUSH
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
9600: LD_INT 8400
9602: PPUSH
9603: LD_INT 9450
9605: PPUSH
9606: CALL_OW 12
9610: PUSH
9611: LD_INT 9450
9613: PPUSH
9614: LD_INT 7350
9616: PPUSH
9617: CALL_OW 12
9621: PUSH
9622: LD_INT 6300
9624: PPUSH
9625: LD_INT 4200
9627: PPUSH
9628: CALL_OW 12
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_OWVAR 67
9642: ARRAY
9643: PPUSH
9644: CALL_OW 67
// filter := [ ] ;
9648: LD_ADDR_VAR 0 3
9652: PUSH
9653: EMPTY
9654: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9655: LD_ADDR_VAR 0 4
9659: PUSH
9660: LD_INT 2
9662: PPUSH
9663: LD_INT 3
9665: PPUSH
9666: CALL_OW 12
9670: PUSH
9671: LD_INT 3
9673: PPUSH
9674: LD_INT 4
9676: PPUSH
9677: CALL_OW 12
9681: PUSH
9682: LD_INT 3
9684: PPUSH
9685: LD_INT 5
9687: PPUSH
9688: CALL_OW 12
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_OWVAR 67
9702: ARRAY
9703: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9704: LD_ADDR_VAR 0 5
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: LD_INT 1
9714: PPUSH
9715: LD_INT 2
9717: PPUSH
9718: CALL_OW 12
9722: PUSH
9723: LD_INT 2
9725: PPUSH
9726: LD_INT 3
9728: PPUSH
9729: CALL_OW 12
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: PUSH
9739: LD_OWVAR 67
9743: ARRAY
9744: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9745: LD_ADDR_VAR 0 6
9749: PUSH
9750: LD_INT 2
9752: PPUSH
9753: LD_INT 3
9755: PPUSH
9756: CALL_OW 12
9760: PUSH
9761: LD_INT 2
9763: PPUSH
9764: LD_INT 4
9766: PPUSH
9767: CALL_OW 12
9771: PUSH
9772: LD_INT 3
9774: PPUSH
9775: LD_INT 5
9777: PPUSH
9778: CALL_OW 12
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_OWVAR 67
9792: ARRAY
9793: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9794: LD_ADDR_VAR 0 8
9798: PUSH
9799: LD_INT 1
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: PUSH
9813: LD_OWVAR 67
9817: ARRAY
9818: ST_TO_ADDR
// uc_side := 3 ;
9819: LD_ADDR_OWVAR 20
9823: PUSH
9824: LD_INT 3
9826: ST_TO_ADDR
// uc_nation := nation_russian ;
9827: LD_ADDR_OWVAR 21
9831: PUSH
9832: LD_INT 3
9834: ST_TO_ADDR
// for i = 1 to soldiers do
9835: LD_ADDR_VAR 0 1
9839: PUSH
9840: DOUBLE
9841: LD_INT 1
9843: DEC
9844: ST_TO_ADDR
9845: LD_VAR 0 4
9849: PUSH
9850: FOR_TO
9851: IFFALSE 9893
// begin PrepareSoldier ( 0 , game_eskill ) ;
9853: LD_INT 0
9855: PPUSH
9856: LD_EXP 40
9860: PPUSH
9861: CALL_OW 381
// un := CreateHuman ;
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: CALL_OW 44
9874: ST_TO_ADDR
// filter := filter ^ un ;
9875: LD_ADDR_VAR 0 3
9879: PUSH
9880: LD_VAR 0 3
9884: PUSH
9885: LD_VAR 0 2
9889: ADD
9890: ST_TO_ADDR
// end ;
9891: GO 9850
9893: POP
9894: POP
// for i = 1 to bazookas do
9895: LD_ADDR_VAR 0 1
9899: PUSH
9900: DOUBLE
9901: LD_INT 1
9903: DEC
9904: ST_TO_ADDR
9905: LD_VAR 0 5
9909: PUSH
9910: FOR_TO
9911: IFFALSE 9961
// begin PrepareSoldier ( 0 , game_eskill ) ;
9913: LD_INT 0
9915: PPUSH
9916: LD_EXP 40
9920: PPUSH
9921: CALL_OW 381
// hc_class := class_bazooker ;
9925: LD_ADDR_OWVAR 28
9929: PUSH
9930: LD_INT 9
9932: ST_TO_ADDR
// un := CreateHuman ;
9933: LD_ADDR_VAR 0 2
9937: PUSH
9938: CALL_OW 44
9942: ST_TO_ADDR
// filter := filter ^ un ;
9943: LD_ADDR_VAR 0 3
9947: PUSH
9948: LD_VAR 0 3
9952: PUSH
9953: LD_VAR 0 2
9957: ADD
9958: ST_TO_ADDR
// end ;
9959: GO 9910
9961: POP
9962: POP
// for i = 1 to medics do
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: DOUBLE
9969: LD_INT 1
9971: DEC
9972: ST_TO_ADDR
9973: LD_VAR 0 8
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10021
// begin PrepareScientist ( 0 , game_eskill ) ;
9981: LD_INT 0
9983: PPUSH
9984: LD_EXP 40
9988: PPUSH
9989: CALL_OW 384
// un := CreateHuman ;
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: CALL_OW 44
10002: ST_TO_ADDR
// filter := filter ^ un ;
10003: LD_ADDR_VAR 0 3
10007: PUSH
10008: LD_VAR 0 3
10012: PUSH
10013: LD_VAR 0 2
10017: ADD
10018: ST_TO_ADDR
// end ;
10019: GO 9978
10021: POP
10022: POP
// for i = 1 to vehs do
10023: LD_ADDR_VAR 0 1
10027: PUSH
10028: DOUBLE
10029: LD_INT 1
10031: DEC
10032: ST_TO_ADDR
10033: LD_VAR 0 6
10037: PUSH
10038: FOR_TO
10039: IFFALSE 10231
// begin case Rand ( 1 , 5 ) of 1 :
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 5
10046: PPUSH
10047: CALL_OW 12
10051: PUSH
10052: LD_INT 1
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10082
10060: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
10061: LD_INT 22
10063: PPUSH
10064: LD_INT 3
10066: PPUSH
10067: LD_INT 3
10069: PPUSH
10070: LD_INT 43
10072: PPUSH
10073: LD_INT 100
10075: PPUSH
10076: CALL 18388 0 5
10080: GO 10203
10082: LD_INT 2
10084: DOUBLE
10085: EQUAL
10086: IFTRUE 10090
10088: GO 10112
10090: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
10091: LD_INT 22
10093: PPUSH
10094: LD_INT 3
10096: PPUSH
10097: LD_INT 3
10099: PPUSH
10100: LD_INT 44
10102: PPUSH
10103: LD_INT 100
10105: PPUSH
10106: CALL 18388 0 5
10110: GO 10203
10112: LD_INT 3
10114: DOUBLE
10115: EQUAL
10116: IFTRUE 10120
10118: GO 10142
10120: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
10121: LD_INT 22
10123: PPUSH
10124: LD_INT 3
10126: PPUSH
10127: LD_INT 3
10129: PPUSH
10130: LD_INT 45
10132: PPUSH
10133: LD_INT 100
10135: PPUSH
10136: CALL 18388 0 5
10140: GO 10203
10142: LD_INT 4
10144: DOUBLE
10145: EQUAL
10146: IFTRUE 10150
10148: GO 10172
10150: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
10151: LD_INT 24
10153: PPUSH
10154: LD_INT 3
10156: PPUSH
10157: LD_INT 3
10159: PPUSH
10160: LD_INT 43
10162: PPUSH
10163: LD_INT 100
10165: PPUSH
10166: CALL 18388 0 5
10170: GO 10203
10172: LD_INT 5
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10202
10180: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
10181: LD_INT 24
10183: PPUSH
10184: LD_INT 3
10186: PPUSH
10187: LD_INT 3
10189: PPUSH
10190: LD_INT 46
10192: PPUSH
10193: LD_INT 100
10195: PPUSH
10196: CALL 18388 0 5
10200: GO 10203
10202: POP
// vehicle := CreateVehicle ;
10203: LD_ADDR_VAR 0 7
10207: PUSH
10208: CALL_OW 45
10212: ST_TO_ADDR
// filter := filter ^ vehicle ;
10213: LD_ADDR_VAR 0 3
10217: PUSH
10218: LD_VAR 0 3
10222: PUSH
10223: LD_VAR 0 7
10227: ADD
10228: ST_TO_ADDR
// end ;
10229: GO 10038
10231: POP
10232: POP
// for i = 1 to filter do
10233: LD_ADDR_VAR 0 1
10237: PUSH
10238: DOUBLE
10239: LD_INT 1
10241: DEC
10242: ST_TO_ADDR
10243: LD_VAR 0 3
10247: PUSH
10248: FOR_TO
10249: IFFALSE 10274
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
10251: LD_VAR 0 3
10255: PUSH
10256: LD_VAR 0 1
10260: ARRAY
10261: PPUSH
10262: LD_INT 14
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL_OW 49
10272: GO 10248
10274: POP
10275: POP
// case Rand ( 1 , 3 ) of 1 :
10276: LD_INT 1
10278: PPUSH
10279: LD_INT 3
10281: PPUSH
10282: CALL_OW 12
10286: PUSH
10287: LD_INT 1
10289: DOUBLE
10290: EQUAL
10291: IFTRUE 10295
10293: GO 10349
10295: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
10296: LD_ADDR_VAR 0 11
10300: PUSH
10301: LD_INT 165
10303: PUSH
10304: LD_INT 114
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 104
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 86
10323: PUSH
10324: LD_INT 77
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 63
10333: PUSH
10334: LD_INT 38
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: ST_TO_ADDR
10347: GO 10474
10349: LD_INT 2
10351: DOUBLE
10352: EQUAL
10353: IFTRUE 10357
10355: GO 10411
10357: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
10358: LD_ADDR_VAR 0 11
10362: PUSH
10363: LD_INT 165
10365: PUSH
10366: LD_INT 114
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 146
10375: PUSH
10376: LD_INT 71
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 112
10385: PUSH
10386: LD_INT 41
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 63
10395: PUSH
10396: LD_INT 38
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: ST_TO_ADDR
10409: GO 10474
10411: LD_INT 3
10413: DOUBLE
10414: EQUAL
10415: IFTRUE 10419
10417: GO 10473
10419: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
10420: LD_ADDR_VAR 0 11
10424: PUSH
10425: LD_INT 165
10427: PUSH
10428: LD_INT 114
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 63
10437: PUSH
10438: LD_INT 99
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 55
10447: PUSH
10448: LD_INT 77
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 63
10457: PUSH
10458: LD_INT 38
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: ST_TO_ADDR
10471: GO 10474
10473: POP
// attackers := filter ;
10474: LD_ADDR_VAR 0 10
10478: PUSH
10479: LD_VAR 0 3
10483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10484: LD_INT 35
10486: PPUSH
10487: CALL_OW 67
// for i in attackers do
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_VAR 0 10
10500: PUSH
10501: FOR_IN
10502: IFFALSE 10996
// begin if IsDead ( i ) then
10504: LD_VAR 0 1
10508: PPUSH
10509: CALL_OW 301
10513: IFFALSE 10531
// attackers := attackers diff i ;
10515: LD_ADDR_VAR 0 10
10519: PUSH
10520: LD_VAR 0 10
10524: PUSH
10525: LD_VAR 0 1
10529: DIFF
10530: ST_TO_ADDR
// if not HasTask ( i ) then
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 314
10540: NOT
10541: IFFALSE 10994
// begin if not GetTag ( i ) then
10543: LD_VAR 0 1
10547: PPUSH
10548: CALL_OW 110
10552: NOT
10553: IFFALSE 10645
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
10555: LD_VAR 0 1
10559: PPUSH
10560: LD_VAR 0 11
10564: PUSH
10565: LD_INT 1
10567: ARRAY
10568: PUSH
10569: LD_INT 1
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 11
10577: PUSH
10578: LD_INT 1
10580: ARRAY
10581: PUSH
10582: LD_INT 2
10584: ARRAY
10585: PPUSH
10586: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_VAR 0 11
10599: PUSH
10600: LD_INT 1
10602: ARRAY
10603: PUSH
10604: LD_INT 1
10606: ARRAY
10607: PPUSH
10608: LD_VAR 0 11
10612: PUSH
10613: LD_INT 1
10615: ARRAY
10616: PUSH
10617: LD_INT 2
10619: ARRAY
10620: PPUSH
10621: CALL_OW 297
10625: PUSH
10626: LD_INT 8
10628: LESS
10629: IFFALSE 10643
// SetTag ( i , 1 ) ;
10631: LD_VAR 0 1
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 109
// end else
10643: GO 10994
// if GetTag ( i ) = 1 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_INT 1
10657: EQUAL
10658: IFFALSE 10750
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
10660: LD_VAR 0 1
10664: PPUSH
10665: LD_VAR 0 11
10669: PUSH
10670: LD_INT 2
10672: ARRAY
10673: PUSH
10674: LD_INT 1
10676: ARRAY
10677: PPUSH
10678: LD_VAR 0 11
10682: PUSH
10683: LD_INT 2
10685: ARRAY
10686: PUSH
10687: LD_INT 2
10689: ARRAY
10690: PPUSH
10691: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
10695: LD_VAR 0 1
10699: PPUSH
10700: LD_VAR 0 11
10704: PUSH
10705: LD_INT 2
10707: ARRAY
10708: PUSH
10709: LD_INT 1
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 11
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: LD_INT 2
10724: ARRAY
10725: PPUSH
10726: CALL_OW 297
10730: PUSH
10731: LD_INT 8
10733: LESS
10734: IFFALSE 10748
// SetTag ( i , 2 ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_INT 2
10743: PPUSH
10744: CALL_OW 109
// end else
10748: GO 10994
// if GetTag ( i ) = 2 then
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 110
10759: PUSH
10760: LD_INT 2
10762: EQUAL
10763: IFFALSE 10855
// begin ComAgressiveMove ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) ;
10765: LD_VAR 0 1
10769: PPUSH
10770: LD_VAR 0 11
10774: PUSH
10775: LD_INT 3
10777: ARRAY
10778: PUSH
10779: LD_INT 1
10781: ARRAY
10782: PPUSH
10783: LD_VAR 0 11
10787: PUSH
10788: LD_INT 3
10790: ARRAY
10791: PUSH
10792: LD_INT 2
10794: ARRAY
10795: PPUSH
10796: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) < 8 then
10800: LD_VAR 0 1
10804: PPUSH
10805: LD_VAR 0 11
10809: PUSH
10810: LD_INT 3
10812: ARRAY
10813: PUSH
10814: LD_INT 1
10816: ARRAY
10817: PPUSH
10818: LD_VAR 0 11
10822: PUSH
10823: LD_INT 3
10825: ARRAY
10826: PUSH
10827: LD_INT 2
10829: ARRAY
10830: PPUSH
10831: CALL_OW 297
10835: PUSH
10836: LD_INT 8
10838: LESS
10839: IFFALSE 10853
// SetTag ( i , 3 ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: LD_INT 3
10848: PPUSH
10849: CALL_OW 109
// end else
10853: GO 10994
// if GetTag ( i ) = 3 then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 110
10864: PUSH
10865: LD_INT 3
10867: EQUAL
10868: IFFALSE 10960
// begin ComAgressiveMove ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) ;
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_VAR 0 11
10879: PUSH
10880: LD_INT 4
10882: ARRAY
10883: PUSH
10884: LD_INT 1
10886: ARRAY
10887: PPUSH
10888: LD_VAR 0 11
10892: PUSH
10893: LD_INT 4
10895: ARRAY
10896: PUSH
10897: LD_INT 2
10899: ARRAY
10900: PPUSH
10901: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) < 8 then
10905: LD_VAR 0 1
10909: PPUSH
10910: LD_VAR 0 11
10914: PUSH
10915: LD_INT 4
10917: ARRAY
10918: PUSH
10919: LD_INT 1
10921: ARRAY
10922: PPUSH
10923: LD_VAR 0 11
10927: PUSH
10928: LD_INT 4
10930: ARRAY
10931: PUSH
10932: LD_INT 2
10934: ARRAY
10935: PPUSH
10936: CALL_OW 297
10940: PUSH
10941: LD_INT 8
10943: LESS
10944: IFFALSE 10958
// SetTag ( i , 4 ) ;
10946: LD_VAR 0 1
10950: PPUSH
10951: LD_INT 4
10953: PPUSH
10954: CALL_OW 109
// end else
10958: GO 10994
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10960: LD_VAR 0 1
10964: PPUSH
10965: LD_INT 81
10967: PUSH
10968: LD_INT 3
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PPUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: CALL_OW 74
10989: PPUSH
10990: CALL_OW 115
// end ; end ;
10994: GO 10501
10996: POP
10997: POP
// until not attackers ;
10998: LD_VAR 0 10
11002: NOT
11003: IFFALSE 10484
// end ;
11005: PPOPN 12
11007: END
// every 0 0$1 do var i , tmp ;
11008: GO 11010
11010: DISABLE
11011: LD_INT 0
11013: PPUSH
11014: PPUSH
// begin enable ;
11015: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
11016: LD_ADDR_VAR 0 2
11020: PUSH
11021: LD_INT 3
11023: PUSH
11024: LD_INT 22
11026: PUSH
11027: LD_INT 1
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 32
11040: PUSH
11041: LD_INT 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PPUSH
11052: CALL_OW 69
11056: ST_TO_ADDR
// if tmp then
11057: LD_VAR 0 2
11061: IFFALSE 11107
// for i in tmp do
11063: LD_ADDR_VAR 0 1
11067: PUSH
11068: LD_VAR 0 2
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11105
// if GetFuel ( i ) < 3 then
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL_OW 261
11085: PUSH
11086: LD_INT 3
11088: LESS
11089: IFFALSE 11103
// SetFuel ( i , 3 ) ;
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_INT 3
11098: PPUSH
11099: CALL_OW 240
11103: GO 11073
11105: POP
11106: POP
// end ;
11107: PPOPN 2
11109: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do
11110: LD_INT 3
11112: PPUSH
11113: LD_INT 22
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 70
11127: PUSH
11128: LD_EXP 41
11132: NOT
11133: AND
11134: PUSH
11135: LD_INT 10
11137: PPUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 70
11152: PUSH
11153: LD_EXP 4
11157: NOT
11158: AND
11159: OR
11160: IFFALSE 11169
11162: GO 11164
11164: DISABLE
// Antirush ;
11165: CALL 11170 0 0
11169: END
// export function Antirush ; var i , veh , tmp , num ; begin
11170: LD_INT 0
11172: PPUSH
11173: PPUSH
11174: PPUSH
11175: PPUSH
11176: PPUSH
// tmp := [ ] ;
11177: LD_ADDR_VAR 0 4
11181: PUSH
11182: EMPTY
11183: ST_TO_ADDR
// if not FirstAssaultRepelled then
11184: LD_EXP 4
11188: NOT
11189: IFFALSE 11201
// num := 18 else
11191: LD_ADDR_VAR 0 5
11195: PUSH
11196: LD_INT 18
11198: ST_TO_ADDR
11199: GO 11209
// num := 12 ;
11201: LD_ADDR_VAR 0 5
11205: PUSH
11206: LD_INT 12
11208: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
11209: LD_ADDR_VAR 0 5
11213: PUSH
11214: LD_VAR 0 5
11218: PUSH
11219: LD_INT 4
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 0
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: PUSH
11233: LD_OWVAR 67
11237: ARRAY
11238: MINUS
11239: ST_TO_ADDR
// for i := 1 to num do
11240: LD_ADDR_VAR 0 2
11244: PUSH
11245: DOUBLE
11246: LD_INT 1
11248: DEC
11249: ST_TO_ADDR
11250: LD_VAR 0 5
11254: PUSH
11255: FOR_TO
11256: IFFALSE 11395
// begin uc_side := 3 ;
11258: LD_ADDR_OWVAR 20
11262: PUSH
11263: LD_INT 3
11265: ST_TO_ADDR
// uc_nation := 3 ;
11266: LD_ADDR_OWVAR 21
11270: PUSH
11271: LD_INT 3
11273: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
11274: LD_INT 23
11276: PPUSH
11277: LD_INT 3
11279: PPUSH
11280: LD_INT 3
11282: PPUSH
11283: LD_INT 46
11285: PUSH
11286: LD_INT 43
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 2
11298: PPUSH
11299: CALL_OW 12
11303: ARRAY
11304: PPUSH
11305: LD_INT 100
11307: PPUSH
11308: CALL 18388 0 5
// veh := CreateVehicle ;
11312: LD_ADDR_VAR 0 3
11316: PUSH
11317: CALL_OW 45
11321: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11322: LD_VAR 0 3
11326: PPUSH
11327: LD_INT 5
11329: PPUSH
11330: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
11334: LD_VAR 0 3
11338: PPUSH
11339: LD_INT 199
11341: PPUSH
11342: LD_INT 135
11344: PPUSH
11345: LD_INT 3
11347: PPUSH
11348: LD_INT 0
11350: PPUSH
11351: CALL_OW 50
// tmp := tmp ^ veh ;
11355: LD_ADDR_VAR 0 4
11359: PUSH
11360: LD_VAR 0 4
11364: PUSH
11365: LD_VAR 0 3
11369: ADD
11370: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 173
11378: PPUSH
11379: LD_INT 118
11381: PPUSH
11382: CALL_OW 111
// wait ( 0 0$2 ) ;
11386: LD_INT 70
11388: PPUSH
11389: CALL_OW 67
// end ;
11393: GO 11255
11395: POP
11396: POP
// repeat wait ( 0 0$1 ) ;
11397: LD_INT 35
11399: PPUSH
11400: CALL_OW 67
// for i in tmp do
11404: LD_ADDR_VAR 0 2
11408: PUSH
11409: LD_VAR 0 4
11413: PUSH
11414: FOR_IN
11415: IFFALSE 11482
// if IsDead ( i ) then
11417: LD_VAR 0 2
11421: PPUSH
11422: CALL_OW 301
11426: IFFALSE 11446
// tmp := tmp diff i else
11428: LD_ADDR_VAR 0 4
11432: PUSH
11433: LD_VAR 0 4
11437: PUSH
11438: LD_VAR 0 2
11442: DIFF
11443: ST_TO_ADDR
11444: GO 11480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
11446: LD_VAR 0 2
11450: PPUSH
11451: LD_INT 22
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 69
11465: PPUSH
11466: LD_VAR 0 2
11470: PPUSH
11471: CALL_OW 74
11475: PPUSH
11476: CALL_OW 115
11480: GO 11414
11482: POP
11483: POP
// until not tmp ;
11484: LD_VAR 0 4
11488: NOT
11489: IFFALSE 11397
// end ; end_of_file
11491: LD_VAR 0 1
11495: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
11496: LD_VAR 0 1
11500: PUSH
11501: LD_EXP 9
11505: EQUAL
11506: IFFALSE 11522
// begin wait ( 0 0$1 ) ;
11508: LD_INT 35
11510: PPUSH
11511: CALL_OW 67
// YouLost ( Brighton ) ;
11515: LD_STRING Brighton
11517: PPUSH
11518: CALL_OW 104
// end ; if un = JMM then
11522: LD_VAR 0 1
11526: PUSH
11527: LD_EXP 37
11531: EQUAL
11532: IFFALSE 11548
// begin wait ( 0 0$1 ) ;
11534: LD_INT 35
11536: PPUSH
11537: CALL_OW 67
// YouLost ( JMM ) ;
11541: LD_STRING JMM
11543: PPUSH
11544: CALL_OW 104
// end ; if un = Megan then
11548: LD_VAR 0 1
11552: PUSH
11553: LD_EXP 11
11557: EQUAL
11558: IFFALSE 11572
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
11560: LD_EXP 9
11564: PPUSH
11565: LD_STRING DBrighton-MeganDeath
11567: PPUSH
11568: CALL_OW 88
// end ; if un = Palmer then
11572: LD_VAR 0 1
11576: PUSH
11577: LD_EXP 10
11581: EQUAL
11582: IFFALSE 11596
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
11584: LD_EXP 9
11588: PPUSH
11589: LD_STRING DBrighton-PalmerDeath
11591: PPUSH
11592: CALL_OW 88
// end ; if un = Burlak then
11596: LD_VAR 0 1
11600: PUSH
11601: LD_EXP 19
11605: EQUAL
11606: IFFALSE 11638
// begin if JMM_Arrived then
11608: LD_EXP 6
11612: IFFALSE 11626
// Say ( JMM , DJMM-BurlakDead ) ;
11614: LD_EXP 37
11618: PPUSH
11619: LD_STRING DJMM-BurlakDead
11621: PPUSH
11622: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
11626: LD_EXP 10
11630: PPUSH
11631: LD_STRING DSol-BurlakDead
11633: PPUSH
11634: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
11638: LD_VAR 0 1
11642: PUSH
11643: LD_INT 1
11645: EQUAL
11646: PUSH
11647: LD_VAR 0 1
11651: PUSH
11652: LD_INT 3
11654: EQUAL
11655: OR
11656: IFFALSE 11672
// begin wait ( 0 0$1 ) ;
11658: LD_INT 35
11660: PPUSH
11661: CALL_OW 67
// YouLost ( Depot ) ;
11665: LD_STRING Depot
11667: PPUSH
11668: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
11672: LD_VAR 0 1
11676: PPUSH
11677: CALL_OW 255
11681: PUSH
11682: LD_INT 1
11684: EQUAL
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 247
11695: PUSH
11696: LD_INT 1
11698: EQUAL
11699: AND
11700: IFFALSE 11716
// Losses := Losses + 1 ;
11702: LD_ADDR_EXP 45
11706: PUSH
11707: LD_EXP 45
11711: PUSH
11712: LD_INT 1
11714: PLUS
11715: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL 77132 0 1
// end ;
11725: PPOPN 1
11727: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
11728: LD_VAR 0 1
11732: PUSH
11733: LD_EXP 13
11737: EQUAL
11738: IFFALSE 11752
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
11740: LD_EXP 13
11744: PPUSH
11745: LD_STRING DDeath-Yas-3
11747: PPUSH
11748: CALL_OW 91
// if un = Popov then
11752: LD_VAR 0 1
11756: PUSH
11757: LD_EXP 14
11761: EQUAL
11762: IFFALSE 11776
// ForceSay ( Popov , DDeath-Pop-3 ) ;
11764: LD_EXP 14
11768: PPUSH
11769: LD_STRING DDeath-Pop-3
11771: PPUSH
11772: CALL_OW 91
// if un = Gaydar then
11776: LD_VAR 0 1
11780: PUSH
11781: LD_EXP 15
11785: EQUAL
11786: IFFALSE 11800
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
11788: LD_EXP 15
11792: PPUSH
11793: LD_STRING DDeath-Gay-3
11795: PPUSH
11796: CALL_OW 91
// if un = Sevi then
11800: LD_VAR 0 1
11804: PUSH
11805: LD_EXP 16
11809: EQUAL
11810: IFFALSE 11824
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
11812: LD_EXP 16
11816: PPUSH
11817: LD_STRING DDeath-Vse-3
11819: PPUSH
11820: CALL_OW 91
// end ;
11824: PPOPN 1
11826: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
11827: LD_VAR 0 1
11831: PUSH
11832: LD_INT 10
11834: EQUAL
11835: IFFALSE 11873
// begin Say ( Brighton , DBrighton-C1 ) ;
11837: LD_EXP 9
11841: PPUSH
11842: LD_STRING DBrighton-C1
11844: PPUSH
11845: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
11849: LD_EXP 11
11853: PPUSH
11854: LD_STRING DMegan-C1
11856: PPUSH
11857: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
11861: LD_EXP 9
11865: PPUSH
11866: LD_STRING DBrighton-C2
11868: PPUSH
11869: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_VAR 0 2
11882: PPUSH
11883: CALL 76828 0 2
// end ;
11887: PPOPN 2
11889: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL 79466 0 2
// end ;
11904: PPOPN 2
11906: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL 78534 0 1
// end ;
11916: PPOPN 1
11918: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL_OW 266
11928: PUSH
11929: LD_INT 0
11931: EQUAL
11932: PUSH
11933: LD_VAR 0 1
11937: PPUSH
11938: CALL_OW 255
11942: PUSH
11943: LD_INT 3
11945: EQUAL
11946: AND
11947: IFFALSE 12009
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
11949: LD_VAR 0 1
11953: PPUSH
11954: CALL_OW 274
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: LD_INT 10000
11964: PPUSH
11965: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 274
11978: PPUSH
11979: LD_INT 2
11981: PPUSH
11982: LD_INT 250
11984: PPUSH
11985: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
11989: LD_VAR 0 1
11993: PPUSH
11994: CALL_OW 274
11998: PPUSH
11999: LD_INT 3
12001: PPUSH
12002: LD_INT 100
12004: PPUSH
12005: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: CALL 78775 0 1
// end ;
12018: PPOPN 1
12020: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
12021: LD_VAR 0 1
12025: PPUSH
12026: LD_VAR 0 2
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_VAR 0 4
12040: PPUSH
12041: LD_VAR 0 5
12045: PPUSH
12046: CALL 76448 0 5
// end ;
12050: PPOPN 5
12052: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12053: LD_VAR 0 1
12057: PPUSH
12058: LD_VAR 0 2
12062: PPUSH
12063: CALL 76044 0 2
// end ;
12067: PPOPN 2
12069: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_VAR 0 2
12079: PPUSH
12080: LD_VAR 0 3
12084: PPUSH
12085: LD_VAR 0 4
12089: PPUSH
12090: CALL 75882 0 4
// end ;
12094: PPOPN 4
12096: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_VAR 0 3
12111: PPUSH
12112: CALL 75657 0 3
// end ;
12116: PPOPN 3
12118: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12119: LD_VAR 0 1
12123: PPUSH
12124: LD_VAR 0 2
12128: PPUSH
12129: CALL 75542 0 2
// end ;
12133: PPOPN 2
12135: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12136: LD_VAR 0 1
12140: PPUSH
12141: LD_VAR 0 2
12145: PPUSH
12146: CALL 79727 0 2
// end ;
12150: PPOPN 2
12152: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
12153: LD_VAR 0 1
12157: PPUSH
12158: CALL_OW 255
12162: PUSH
12163: LD_INT 6
12165: EQUAL
12166: IFFALSE 12296
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
12168: LD_VAR 0 1
12172: PUSH
12173: LD_EXP 13
12177: PUSH
12178: LD_EXP 16
12182: PUSH
12183: LD_EXP 15
12187: PUSH
12188: LD_EXP 14
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: IN
12199: IFFALSE 12203
// exit ;
12201: GO 12320
// if AssaultStarted then
12203: LD_EXP 8
12207: IFFALSE 12281
// case Rand ( 1 , 4 ) of 1 .. 3 :
12209: LD_INT 1
12211: PPUSH
12212: LD_INT 4
12214: PPUSH
12215: CALL_OW 12
12219: PUSH
12220: LD_INT 1
12222: DOUBLE
12223: GREATEREQUAL
12224: IFFALSE 12232
12226: LD_INT 3
12228: DOUBLE
12229: LESSEQUAL
12230: IFTRUE 12234
12232: GO 12252
12234: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
12235: LD_VAR 0 1
12239: PPUSH
12240: LD_INT 67
12242: PPUSH
12243: LD_INT 37
12245: PPUSH
12246: CALL_OW 114
12250: GO 12279
12252: LD_INT 4
12254: DOUBLE
12255: EQUAL
12256: IFTRUE 12260
12258: GO 12278
12260: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
12261: LD_VAR 0 1
12265: PPUSH
12266: LD_INT 120
12268: PPUSH
12269: LD_INT 131
12271: PPUSH
12272: CALL_OW 111
12276: GO 12279
12278: POP
12279: GO 12296
// ComMoveXY ( driver , 120 , 131 ) ;
12281: LD_VAR 0 1
12285: PPUSH
12286: LD_INT 120
12288: PPUSH
12289: LD_INT 131
12291: PPUSH
12292: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_VAR 0 2
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_VAR 0 4
12315: PPUSH
12316: CALL 79943 0 4
// end ;
12320: PPOPN 4
12322: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12323: LD_VAR 0 1
12327: PPUSH
12328: LD_VAR 0 2
12332: PPUSH
12333: CALL 75351 0 2
// end ;
12337: PPOPN 2
12339: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
12340: LD_VAR 0 1
12344: PPUSH
12345: CALL 91241 0 1
// end ; end_of_file
12349: PPOPN 1
12351: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
12352: LD_EXP 6
12356: PUSH
12357: LD_EXP 44
12361: AND
12362: IFFALSE 12533
12364: GO 12366
12366: DISABLE
// begin wait ( 0 0$2 ) ;
12367: LD_INT 70
12369: PPUSH
12370: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
12374: LD_EXP 9
12378: PPUSH
12379: LD_STRING DBrighton-G1
12381: PPUSH
12382: CALL_OW 88
// if Losses < 1 then
12386: LD_EXP 45
12390: PUSH
12391: LD_INT 1
12393: LESS
12394: IFFALSE 12408
// AddMedal ( Losses , 1 ) else
12396: LD_STRING Losses
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 101
12406: GO 12441
// if Losses < 5 then
12408: LD_EXP 45
12412: PUSH
12413: LD_INT 5
12415: LESS
12416: IFFALSE 12430
// AddMedal ( Losses , 2 ) else
12418: LD_STRING Losses
12420: PPUSH
12421: LD_INT 2
12423: PPUSH
12424: CALL_OW 101
12428: GO 12441
// AddMedal ( Losses , - 1 ) ;
12430: LD_STRING Losses
12432: PPUSH
12433: LD_INT 1
12435: NEG
12436: PPUSH
12437: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12441: LD_EXP 7
12445: PUSH
12446: LD_INT 10
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 321
12456: PUSH
12457: LD_INT 2
12459: EQUAL
12460: AND
12461: IFFALSE 12475
// AddMedal ( Laser , 1 ) else
12463: LD_STRING Laser
12465: PPUSH
12466: LD_INT 1
12468: PPUSH
12469: CALL_OW 101
12473: GO 12522
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12475: LD_EXP 7
12479: NOT
12480: PUSH
12481: LD_INT 10
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 321
12491: PUSH
12492: LD_INT 2
12494: EQUAL
12495: AND
12496: IFFALSE 12511
// AddMedal ( Laser , - 1 ) else
12498: LD_STRING Laser
12500: PPUSH
12501: LD_INT 1
12503: NEG
12504: PPUSH
12505: CALL_OW 101
12509: GO 12522
// AddMedal ( Laser , - 2 ) ;
12511: LD_STRING Laser
12513: PPUSH
12514: LD_INT 2
12516: NEG
12517: PPUSH
12518: CALL_OW 101
// GiveMedals ( BaseMain ) ;
12522: LD_STRING BaseMain
12524: PPUSH
12525: CALL_OW 102
// YouWin ;
12529: CALL_OW 103
// end ; end_of_file
12533: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
12534: LD_INT 0
12536: PPUSH
12537: PPUSH
// area = ListEnvironmentArea ( area ) ;
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_VAR 0 2
12547: PPUSH
12548: CALL_OW 353
12552: ST_TO_ADDR
// if bulldozer > 0 then
12553: LD_VAR 0 1
12557: PUSH
12558: LD_INT 0
12560: GREATER
12561: IFFALSE 12672
// for i = area downto 1 do
12563: LD_ADDR_VAR 0 4
12567: PUSH
12568: DOUBLE
12569: LD_VAR 0 2
12573: INC
12574: ST_TO_ADDR
12575: LD_INT 1
12577: PUSH
12578: FOR_DOWNTO
12579: IFFALSE 12670
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
12581: LD_VAR 0 2
12585: PUSH
12586: LD_VAR 0 4
12590: ARRAY
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PPUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 4
12605: ARRAY
12606: PUSH
12607: LD_INT 2
12609: ARRAY
12610: PPUSH
12611: CALL_OW 351
12615: IFFALSE 12668
// if not HasTask ( bulldozer ) then
12617: LD_VAR 0 1
12621: PPUSH
12622: CALL_OW 314
12626: NOT
12627: IFFALSE 12668
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
12629: LD_VAR 0 1
12633: PPUSH
12634: LD_VAR 0 2
12638: PUSH
12639: LD_VAR 0 4
12643: ARRAY
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: LD_VAR 0 2
12653: PUSH
12654: LD_VAR 0 4
12658: ARRAY
12659: PUSH
12660: LD_INT 2
12662: ARRAY
12663: PPUSH
12664: CALL_OW 171
12668: GO 12578
12670: POP
12671: POP
// end ;
12672: LD_VAR 0 3
12676: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
12685: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
12686: LD_ADDR_VAR 0 8
12690: PUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: LD_INT 22
12698: PUSH
12699: LD_INT 1
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 21
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 25
12718: PUSH
12719: LD_INT 1
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 72
12735: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
12736: LD_ADDR_VAR 0 9
12740: PUSH
12741: LD_VAR 0 1
12745: PPUSH
12746: LD_INT 22
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 21
12758: PUSH
12759: LD_INT 1
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 72
12792: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
12793: LD_ADDR_EXP 47
12797: PUSH
12798: LD_VAR 0 8
12802: PPUSH
12803: LD_VAR 0 9
12807: PPUSH
12808: CALL 13201 0 2
12812: ST_TO_ADDR
// offset = 0 ;
12813: LD_ADDR_VAR 0 7
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// for i := 1 to sold_team do
12821: LD_ADDR_VAR 0 4
12825: PUSH
12826: DOUBLE
12827: LD_INT 1
12829: DEC
12830: ST_TO_ADDR
12831: LD_VAR 0 8
12835: PUSH
12836: FOR_TO
12837: IFFALSE 12968
// begin if IsInUnit ( sold_team [ i ] ) then
12839: LD_VAR 0 8
12843: PUSH
12844: LD_VAR 0 4
12848: ARRAY
12849: PPUSH
12850: CALL_OW 310
12854: IFFALSE 12871
// ComExitBuilding ( sold_team [ i ] ) ;
12856: LD_VAR 0 8
12860: PUSH
12861: LD_VAR 0 4
12865: ARRAY
12866: PPUSH
12867: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
12871: LD_VAR 0 8
12875: PUSH
12876: LD_VAR 0 4
12880: ARRAY
12881: PPUSH
12882: LD_EXP 47
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_VAR 0 4
12895: PUSH
12896: LD_VAR 0 7
12900: PLUS
12901: ARRAY
12902: PPUSH
12903: LD_EXP 47
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PUSH
12912: LD_VAR 0 4
12916: PUSH
12917: LD_INT 1
12919: PLUS
12920: PUSH
12921: LD_VAR 0 7
12925: PLUS
12926: ARRAY
12927: PPUSH
12928: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
12932: LD_VAR 0 8
12936: PUSH
12937: LD_VAR 0 4
12941: ARRAY
12942: PPUSH
12943: LD_EXP 9
12947: PPUSH
12948: CALL_OW 179
// offset = offset + 1 ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_VAR 0 7
12961: PUSH
12962: LD_INT 1
12964: PLUS
12965: ST_TO_ADDR
// end ;
12966: GO 12836
12968: POP
12969: POP
// offset = 0 ;
12970: LD_ADDR_VAR 0 7
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// tmp = 1 ;
12978: LD_ADDR_VAR 0 6
12982: PUSH
12983: LD_INT 1
12985: ST_TO_ADDR
// for i := 2 to rows do
12986: LD_ADDR_VAR 0 4
12990: PUSH
12991: DOUBLE
12992: LD_INT 2
12994: DEC
12995: ST_TO_ADDR
12996: LD_EXP 47
13000: PUSH
13001: FOR_TO
13002: IFFALSE 13194
// begin for x := 1 to sold_team do
13004: LD_ADDR_VAR 0 5
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_VAR 0 8
13018: PUSH
13019: FOR_TO
13020: IFFALSE 13182
// begin if IsInUnit ( civil_team [ tmp ] ) then
13022: LD_VAR 0 9
13026: PUSH
13027: LD_VAR 0 6
13031: ARRAY
13032: PPUSH
13033: CALL_OW 310
13037: IFFALSE 13054
// ComExitBuilding ( civil_team [ tmp ] ) ;
13039: LD_VAR 0 9
13043: PUSH
13044: LD_VAR 0 6
13048: ARRAY
13049: PPUSH
13050: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
13054: LD_VAR 0 9
13058: PUSH
13059: LD_VAR 0 6
13063: ARRAY
13064: PPUSH
13065: LD_EXP 47
13069: PUSH
13070: LD_VAR 0 4
13074: ARRAY
13075: PUSH
13076: LD_VAR 0 5
13080: PUSH
13081: LD_VAR 0 7
13085: PLUS
13086: ARRAY
13087: PPUSH
13088: LD_EXP 47
13092: PUSH
13093: LD_VAR 0 4
13097: ARRAY
13098: PUSH
13099: LD_VAR 0 5
13103: PUSH
13104: LD_INT 1
13106: PLUS
13107: PUSH
13108: LD_VAR 0 7
13112: PLUS
13113: ARRAY
13114: PPUSH
13115: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
13119: LD_VAR 0 9
13123: PUSH
13124: LD_VAR 0 6
13128: ARRAY
13129: PPUSH
13130: LD_EXP 9
13134: PPUSH
13135: CALL_OW 179
// offset = offset + 1 ;
13139: LD_ADDR_VAR 0 7
13143: PUSH
13144: LD_VAR 0 7
13148: PUSH
13149: LD_INT 1
13151: PLUS
13152: ST_TO_ADDR
// if not ( tmp = civil_team ) then
13153: LD_VAR 0 6
13157: PUSH
13158: LD_VAR 0 9
13162: EQUAL
13163: NOT
13164: IFFALSE 13180
// tmp = tmp + 1 ;
13166: LD_ADDR_VAR 0 6
13170: PUSH
13171: LD_VAR 0 6
13175: PUSH
13176: LD_INT 1
13178: PLUS
13179: ST_TO_ADDR
// end ;
13180: GO 13019
13182: POP
13183: POP
// offset = 0 ;
13184: LD_ADDR_VAR 0 7
13188: PUSH
13189: LD_INT 0
13191: ST_TO_ADDR
// end ;
13192: GO 13001
13194: POP
13195: POP
// end ;
13196: LD_VAR 0 3
13200: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
13201: LD_INT 0
13203: PPUSH
13204: PPUSH
13205: PPUSH
13206: PPUSH
13207: PPUSH
13208: PPUSH
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
// start_pos = [ 65 , 34 ] ;
13213: LD_ADDR_VAR 0 6
13217: PUSH
13218: LD_INT 65
13220: PUSH
13221: LD_INT 34
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: ST_TO_ADDR
// row_size = 0 ;
13228: LD_ADDR_VAR 0 7
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// result_rows = [ ] ;
13236: LD_ADDR_VAR 0 9
13240: PUSH
13241: EMPTY
13242: ST_TO_ADDR
// new_row = [ ] ;
13243: LD_ADDR_VAR 0 8
13247: PUSH
13248: EMPTY
13249: ST_TO_ADDR
// for i := 1 to sold_team do
13250: LD_ADDR_VAR 0 4
13254: PUSH
13255: DOUBLE
13256: LD_INT 1
13258: DEC
13259: ST_TO_ADDR
13260: LD_VAR 0 1
13264: PUSH
13265: FOR_TO
13266: IFFALSE 13320
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
13268: LD_ADDR_VAR 0 8
13272: PUSH
13273: LD_VAR 0 8
13277: PUSH
13278: LD_VAR 0 6
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: ADD
13287: PUSH
13288: LD_VAR 0 6
13292: PUSH
13293: LD_INT 2
13295: ARRAY
13296: PUSH
13297: LD_VAR 0 4
13301: PLUS
13302: ADD
13303: ST_TO_ADDR
// row_size = row_size + 1 ;
13304: LD_ADDR_VAR 0 7
13308: PUSH
13309: LD_VAR 0 7
13313: PUSH
13314: LD_INT 1
13316: PLUS
13317: ST_TO_ADDR
// end ;
13318: GO 13265
13320: POP
13321: POP
// result_rows = result_rows ^ [ new_row ] ;
13322: LD_ADDR_VAR 0 9
13326: PUSH
13327: LD_VAR 0 9
13331: PUSH
13332: LD_VAR 0 8
13336: PUSH
13337: EMPTY
13338: LIST
13339: ADD
13340: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
13341: LD_ADDR_VAR 0 10
13345: PUSH
13346: LD_VAR 0 2
13350: PUSH
13351: LD_VAR 0 1
13355: DIV
13356: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
13357: LD_VAR 0 10
13361: PUSH
13362: LD_VAR 0 1
13366: MOD
13367: PUSH
13368: LD_INT 0
13370: GREATER
13371: IFFALSE 13387
// civil_rows = civil_rows + 1 ;
13373: LD_ADDR_VAR 0 10
13377: PUSH
13378: LD_VAR 0 10
13382: PUSH
13383: LD_INT 1
13385: PLUS
13386: ST_TO_ADDR
// offsetX = 2 ;
13387: LD_ADDR_VAR 0 11
13391: PUSH
13392: LD_INT 2
13394: ST_TO_ADDR
// offsetY = 1 ;
13395: LD_ADDR_VAR 0 12
13399: PUSH
13400: LD_INT 1
13402: ST_TO_ADDR
// for i := 1 to civil_rows do
13403: LD_ADDR_VAR 0 4
13407: PUSH
13408: DOUBLE
13409: LD_INT 1
13411: DEC
13412: ST_TO_ADDR
13413: LD_VAR 0 10
13417: PUSH
13418: FOR_TO
13419: IFFALSE 13547
// begin new_row = [ ] ;
13421: LD_ADDR_VAR 0 8
13425: PUSH
13426: EMPTY
13427: ST_TO_ADDR
// for x := 1 to row_size do
13428: LD_ADDR_VAR 0 5
13432: PUSH
13433: DOUBLE
13434: LD_INT 1
13436: DEC
13437: ST_TO_ADDR
13438: LD_VAR 0 7
13442: PUSH
13443: FOR_TO
13444: IFFALSE 13496
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
13446: LD_ADDR_VAR 0 8
13450: PUSH
13451: LD_VAR 0 8
13455: PUSH
13456: LD_VAR 0 6
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: PUSH
13465: LD_VAR 0 11
13469: PLUS
13470: ADD
13471: PUSH
13472: LD_VAR 0 6
13476: PUSH
13477: LD_INT 2
13479: ARRAY
13480: PUSH
13481: LD_VAR 0 12
13485: PLUS
13486: PUSH
13487: LD_VAR 0 5
13491: PLUS
13492: ADD
13493: ST_TO_ADDR
// end ;
13494: GO 13443
13496: POP
13497: POP
// result_rows = result_rows ^ [ new_row ] ;
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 9
13507: PUSH
13508: LD_VAR 0 8
13512: PUSH
13513: EMPTY
13514: LIST
13515: ADD
13516: ST_TO_ADDR
// offsetX = offsetX + 2 ;
13517: LD_ADDR_VAR 0 11
13521: PUSH
13522: LD_VAR 0 11
13526: PUSH
13527: LD_INT 2
13529: PLUS
13530: ST_TO_ADDR
// offsetY = offsetY + 1 ;
13531: LD_ADDR_VAR 0 12
13535: PUSH
13536: LD_VAR 0 12
13540: PUSH
13541: LD_INT 1
13543: PLUS
13544: ST_TO_ADDR
// end ;
13545: GO 13418
13547: POP
13548: POP
// result = result_rows ;
13549: LD_ADDR_VAR 0 3
13553: PUSH
13554: LD_VAR 0 9
13558: ST_TO_ADDR
// end ; end_of_file
13559: LD_VAR 0 3
13563: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13564: LD_INT 0
13566: PPUSH
13567: PPUSH
// if exist_mode then
13568: LD_VAR 0 2
13572: IFFALSE 13597
// unit := CreateCharacter ( prefix & ident ) else
13574: LD_ADDR_VAR 0 5
13578: PUSH
13579: LD_VAR 0 3
13583: PUSH
13584: LD_VAR 0 1
13588: STR
13589: PPUSH
13590: CALL_OW 34
13594: ST_TO_ADDR
13595: GO 13612
// unit := NewCharacter ( ident ) ;
13597: LD_ADDR_VAR 0 5
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 25
13611: ST_TO_ADDR
// result := unit ;
13612: LD_ADDR_VAR 0 4
13616: PUSH
13617: LD_VAR 0 5
13621: ST_TO_ADDR
// end ;
13622: LD_VAR 0 4
13626: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13627: LD_INT 0
13629: PPUSH
13630: PPUSH
// if not side or not nation then
13631: LD_VAR 0 1
13635: NOT
13636: PUSH
13637: LD_VAR 0 2
13641: NOT
13642: OR
13643: IFFALSE 13647
// exit ;
13645: GO 14411
// case nation of nation_american :
13647: LD_VAR 0 2
13651: PUSH
13652: LD_INT 1
13654: DOUBLE
13655: EQUAL
13656: IFTRUE 13660
13658: GO 13874
13660: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_INT 35
13668: PUSH
13669: LD_INT 45
13671: PUSH
13672: LD_INT 46
13674: PUSH
13675: LD_INT 47
13677: PUSH
13678: LD_INT 82
13680: PUSH
13681: LD_INT 83
13683: PUSH
13684: LD_INT 84
13686: PUSH
13687: LD_INT 85
13689: PUSH
13690: LD_INT 86
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: LD_INT 2
13698: PUSH
13699: LD_INT 6
13701: PUSH
13702: LD_INT 15
13704: PUSH
13705: LD_INT 16
13707: PUSH
13708: LD_INT 7
13710: PUSH
13711: LD_INT 12
13713: PUSH
13714: LD_INT 13
13716: PUSH
13717: LD_INT 10
13719: PUSH
13720: LD_INT 14
13722: PUSH
13723: LD_INT 20
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 22
13731: PUSH
13732: LD_INT 25
13734: PUSH
13735: LD_INT 32
13737: PUSH
13738: LD_INT 27
13740: PUSH
13741: LD_INT 36
13743: PUSH
13744: LD_INT 69
13746: PUSH
13747: LD_INT 39
13749: PUSH
13750: LD_INT 34
13752: PUSH
13753: LD_INT 40
13755: PUSH
13756: LD_INT 48
13758: PUSH
13759: LD_INT 49
13761: PUSH
13762: LD_INT 50
13764: PUSH
13765: LD_INT 51
13767: PUSH
13768: LD_INT 52
13770: PUSH
13771: LD_INT 53
13773: PUSH
13774: LD_INT 54
13776: PUSH
13777: LD_INT 55
13779: PUSH
13780: LD_INT 56
13782: PUSH
13783: LD_INT 57
13785: PUSH
13786: LD_INT 58
13788: PUSH
13789: LD_INT 59
13791: PUSH
13792: LD_INT 60
13794: PUSH
13795: LD_INT 61
13797: PUSH
13798: LD_INT 62
13800: PUSH
13801: LD_INT 80
13803: PUSH
13804: LD_INT 82
13806: PUSH
13807: LD_INT 83
13809: PUSH
13810: LD_INT 84
13812: PUSH
13813: LD_INT 85
13815: PUSH
13816: LD_INT 86
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: ST_TO_ADDR
13872: GO 14335
13874: LD_INT 2
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 14104
13882: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
13883: LD_ADDR_VAR 0 4
13887: PUSH
13888: LD_INT 35
13890: PUSH
13891: LD_INT 45
13893: PUSH
13894: LD_INT 46
13896: PUSH
13897: LD_INT 47
13899: PUSH
13900: LD_INT 82
13902: PUSH
13903: LD_INT 83
13905: PUSH
13906: LD_INT 84
13908: PUSH
13909: LD_INT 85
13911: PUSH
13912: LD_INT 87
13914: PUSH
13915: LD_INT 70
13917: PUSH
13918: LD_INT 1
13920: PUSH
13921: LD_INT 11
13923: PUSH
13924: LD_INT 3
13926: PUSH
13927: LD_INT 4
13929: PUSH
13930: LD_INT 5
13932: PUSH
13933: LD_INT 6
13935: PUSH
13936: LD_INT 15
13938: PUSH
13939: LD_INT 18
13941: PUSH
13942: LD_INT 7
13944: PUSH
13945: LD_INT 17
13947: PUSH
13948: LD_INT 8
13950: PUSH
13951: LD_INT 20
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_INT 72
13962: PUSH
13963: LD_INT 26
13965: PUSH
13966: LD_INT 69
13968: PUSH
13969: LD_INT 39
13971: PUSH
13972: LD_INT 40
13974: PUSH
13975: LD_INT 41
13977: PUSH
13978: LD_INT 42
13980: PUSH
13981: LD_INT 43
13983: PUSH
13984: LD_INT 48
13986: PUSH
13987: LD_INT 49
13989: PUSH
13990: LD_INT 50
13992: PUSH
13993: LD_INT 51
13995: PUSH
13996: LD_INT 52
13998: PUSH
13999: LD_INT 53
14001: PUSH
14002: LD_INT 54
14004: PUSH
14005: LD_INT 55
14007: PUSH
14008: LD_INT 56
14010: PUSH
14011: LD_INT 60
14013: PUSH
14014: LD_INT 61
14016: PUSH
14017: LD_INT 62
14019: PUSH
14020: LD_INT 66
14022: PUSH
14023: LD_INT 67
14025: PUSH
14026: LD_INT 68
14028: PUSH
14029: LD_INT 81
14031: PUSH
14032: LD_INT 82
14034: PUSH
14035: LD_INT 83
14037: PUSH
14038: LD_INT 84
14040: PUSH
14041: LD_INT 85
14043: PUSH
14044: LD_INT 87
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: ST_TO_ADDR
14102: GO 14335
14104: LD_INT 3
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14334
14112: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14113: LD_ADDR_VAR 0 4
14117: PUSH
14118: LD_INT 46
14120: PUSH
14121: LD_INT 47
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: LD_INT 82
14132: PUSH
14133: LD_INT 83
14135: PUSH
14136: LD_INT 84
14138: PUSH
14139: LD_INT 85
14141: PUSH
14142: LD_INT 86
14144: PUSH
14145: LD_INT 11
14147: PUSH
14148: LD_INT 9
14150: PUSH
14151: LD_INT 20
14153: PUSH
14154: LD_INT 19
14156: PUSH
14157: LD_INT 21
14159: PUSH
14160: LD_INT 24
14162: PUSH
14163: LD_INT 22
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 28
14171: PUSH
14172: LD_INT 29
14174: PUSH
14175: LD_INT 30
14177: PUSH
14178: LD_INT 31
14180: PUSH
14181: LD_INT 37
14183: PUSH
14184: LD_INT 38
14186: PUSH
14187: LD_INT 32
14189: PUSH
14190: LD_INT 27
14192: PUSH
14193: LD_INT 33
14195: PUSH
14196: LD_INT 69
14198: PUSH
14199: LD_INT 39
14201: PUSH
14202: LD_INT 34
14204: PUSH
14205: LD_INT 40
14207: PUSH
14208: LD_INT 71
14210: PUSH
14211: LD_INT 23
14213: PUSH
14214: LD_INT 44
14216: PUSH
14217: LD_INT 48
14219: PUSH
14220: LD_INT 49
14222: PUSH
14223: LD_INT 50
14225: PUSH
14226: LD_INT 51
14228: PUSH
14229: LD_INT 52
14231: PUSH
14232: LD_INT 53
14234: PUSH
14235: LD_INT 54
14237: PUSH
14238: LD_INT 55
14240: PUSH
14241: LD_INT 56
14243: PUSH
14244: LD_INT 57
14246: PUSH
14247: LD_INT 58
14249: PUSH
14250: LD_INT 59
14252: PUSH
14253: LD_INT 63
14255: PUSH
14256: LD_INT 64
14258: PUSH
14259: LD_INT 65
14261: PUSH
14262: LD_INT 82
14264: PUSH
14265: LD_INT 83
14267: PUSH
14268: LD_INT 84
14270: PUSH
14271: LD_INT 85
14273: PUSH
14274: LD_INT 86
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: ST_TO_ADDR
14332: GO 14335
14334: POP
// if state > - 1 and state < 3 then
14335: LD_VAR 0 3
14339: PUSH
14340: LD_INT 1
14342: NEG
14343: GREATER
14344: PUSH
14345: LD_VAR 0 3
14349: PUSH
14350: LD_INT 3
14352: LESS
14353: AND
14354: IFFALSE 14411
// for i in result do
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: LD_VAR 0 4
14365: PUSH
14366: FOR_IN
14367: IFFALSE 14409
// if GetTech ( i , side ) <> state then
14369: LD_VAR 0 5
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 321
14383: PUSH
14384: LD_VAR 0 3
14388: NONEQUAL
14389: IFFALSE 14407
// result := result diff i ;
14391: LD_ADDR_VAR 0 4
14395: PUSH
14396: LD_VAR 0 4
14400: PUSH
14401: LD_VAR 0 5
14405: DIFF
14406: ST_TO_ADDR
14407: GO 14366
14409: POP
14410: POP
// end ;
14411: LD_VAR 0 4
14415: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14416: LD_INT 0
14418: PPUSH
14419: PPUSH
14420: PPUSH
// result := true ;
14421: LD_ADDR_VAR 0 3
14425: PUSH
14426: LD_INT 1
14428: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14429: LD_ADDR_VAR 0 5
14433: PUSH
14434: LD_VAR 0 2
14438: PPUSH
14439: CALL_OW 480
14443: ST_TO_ADDR
// if not tmp then
14444: LD_VAR 0 5
14448: NOT
14449: IFFALSE 14453
// exit ;
14451: GO 14502
// for i in tmp do
14453: LD_ADDR_VAR 0 4
14457: PUSH
14458: LD_VAR 0 5
14462: PUSH
14463: FOR_IN
14464: IFFALSE 14500
// if GetTech ( i , side ) <> state_researched then
14466: LD_VAR 0 4
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 321
14480: PUSH
14481: LD_INT 2
14483: NONEQUAL
14484: IFFALSE 14498
// begin result := false ;
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_INT 0
14493: ST_TO_ADDR
// exit ;
14494: POP
14495: POP
14496: GO 14502
// end ;
14498: GO 14463
14500: POP
14501: POP
// end ;
14502: LD_VAR 0 3
14506: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14522: LD_VAR 0 1
14526: NOT
14527: PUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 257
14537: PUSH
14538: LD_INT 9
14540: NONEQUAL
14541: OR
14542: IFFALSE 14546
// exit ;
14544: GO 15119
// side := GetSide ( unit ) ;
14546: LD_ADDR_VAR 0 9
14550: PUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 255
14560: ST_TO_ADDR
// tech_space := tech_spacanom ;
14561: LD_ADDR_VAR 0 12
14565: PUSH
14566: LD_INT 29
14568: ST_TO_ADDR
// tech_time := tech_taurad ;
14569: LD_ADDR_VAR 0 13
14573: PUSH
14574: LD_INT 28
14576: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14577: LD_ADDR_VAR 0 11
14581: PUSH
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 310
14591: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14592: LD_VAR 0 11
14596: PPUSH
14597: CALL_OW 247
14601: PUSH
14602: LD_INT 2
14604: EQUAL
14605: IFFALSE 14609
// exit ;
14607: GO 15119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14609: LD_ADDR_VAR 0 8
14613: PUSH
14614: LD_INT 81
14616: PUSH
14617: LD_VAR 0 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 3
14628: PUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 3
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 69
14651: ST_TO_ADDR
// if not tmp then
14652: LD_VAR 0 8
14656: NOT
14657: IFFALSE 14661
// exit ;
14659: GO 15119
// if in_unit then
14661: LD_VAR 0 11
14665: IFFALSE 14689
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14667: LD_ADDR_VAR 0 10
14671: PUSH
14672: LD_VAR 0 8
14676: PPUSH
14677: LD_VAR 0 11
14681: PPUSH
14682: CALL_OW 74
14686: ST_TO_ADDR
14687: GO 14709
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14689: LD_ADDR_VAR 0 10
14693: PUSH
14694: LD_VAR 0 8
14698: PPUSH
14699: LD_VAR 0 1
14703: PPUSH
14704: CALL_OW 74
14708: ST_TO_ADDR
// if not enemy then
14709: LD_VAR 0 10
14713: NOT
14714: IFFALSE 14718
// exit ;
14716: GO 15119
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14718: LD_VAR 0 11
14722: PUSH
14723: LD_VAR 0 11
14727: PPUSH
14728: LD_VAR 0 10
14732: PPUSH
14733: CALL_OW 296
14737: PUSH
14738: LD_INT 13
14740: GREATER
14741: AND
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: LD_VAR 0 10
14752: PPUSH
14753: CALL_OW 296
14757: PUSH
14758: LD_INT 12
14760: GREATER
14761: OR
14762: IFFALSE 14766
// exit ;
14764: GO 15119
// missile := [ 1 ] ;
14766: LD_ADDR_VAR 0 14
14770: PUSH
14771: LD_INT 1
14773: PUSH
14774: EMPTY
14775: LIST
14776: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14777: LD_VAR 0 9
14781: PPUSH
14782: LD_VAR 0 12
14786: PPUSH
14787: CALL_OW 325
14791: IFFALSE 14820
// missile := Insert ( missile , missile + 1 , 2 ) ;
14793: LD_ADDR_VAR 0 14
14797: PUSH
14798: LD_VAR 0 14
14802: PPUSH
14803: LD_VAR 0 14
14807: PUSH
14808: LD_INT 1
14810: PLUS
14811: PPUSH
14812: LD_INT 2
14814: PPUSH
14815: CALL_OW 2
14819: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14820: LD_VAR 0 9
14824: PPUSH
14825: LD_VAR 0 13
14829: PPUSH
14830: CALL_OW 325
14834: PUSH
14835: LD_VAR 0 10
14839: PPUSH
14840: CALL_OW 255
14844: PPUSH
14845: LD_VAR 0 13
14849: PPUSH
14850: CALL_OW 325
14854: NOT
14855: AND
14856: IFFALSE 14885
// missile := Insert ( missile , missile + 1 , 3 ) ;
14858: LD_ADDR_VAR 0 14
14862: PUSH
14863: LD_VAR 0 14
14867: PPUSH
14868: LD_VAR 0 14
14872: PUSH
14873: LD_INT 1
14875: PLUS
14876: PPUSH
14877: LD_INT 3
14879: PPUSH
14880: CALL_OW 2
14884: ST_TO_ADDR
// if missile < 2 then
14885: LD_VAR 0 14
14889: PUSH
14890: LD_INT 2
14892: LESS
14893: IFFALSE 14897
// exit ;
14895: GO 15119
// x := GetX ( enemy ) ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_VAR 0 10
14906: PPUSH
14907: CALL_OW 250
14911: ST_TO_ADDR
// y := GetY ( enemy ) ;
14912: LD_ADDR_VAR 0 5
14916: PUSH
14917: LD_VAR 0 10
14921: PPUSH
14922: CALL_OW 251
14926: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14927: LD_ADDR_VAR 0 6
14931: PUSH
14932: LD_VAR 0 4
14936: PUSH
14937: LD_INT 1
14939: NEG
14940: PPUSH
14941: LD_INT 1
14943: PPUSH
14944: CALL_OW 12
14948: PLUS
14949: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14950: LD_ADDR_VAR 0 7
14954: PUSH
14955: LD_VAR 0 5
14959: PUSH
14960: LD_INT 1
14962: NEG
14963: PPUSH
14964: LD_INT 1
14966: PPUSH
14967: CALL_OW 12
14971: PLUS
14972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14973: LD_VAR 0 6
14977: PPUSH
14978: LD_VAR 0 7
14982: PPUSH
14983: CALL_OW 488
14987: NOT
14988: IFFALSE 15010
// begin _x := x ;
14990: LD_ADDR_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ST_TO_ADDR
// _y := y ;
15000: LD_ADDR_VAR 0 7
15004: PUSH
15005: LD_VAR 0 5
15009: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: LD_INT 1
15017: PPUSH
15018: LD_VAR 0 14
15022: PPUSH
15023: CALL_OW 12
15027: ST_TO_ADDR
// case i of 1 :
15028: LD_VAR 0 3
15032: PUSH
15033: LD_INT 1
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15058
15041: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_VAR 0 10
15051: PPUSH
15052: CALL_OW 115
15056: GO 15119
15058: LD_INT 2
15060: DOUBLE
15061: EQUAL
15062: IFTRUE 15066
15064: GO 15088
15066: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_VAR 0 6
15076: PPUSH
15077: LD_VAR 0 7
15081: PPUSH
15082: CALL_OW 153
15086: GO 15119
15088: LD_INT 3
15090: DOUBLE
15091: EQUAL
15092: IFTRUE 15096
15094: GO 15118
15096: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_VAR 0 6
15106: PPUSH
15107: LD_VAR 0 7
15111: PPUSH
15112: CALL_OW 154
15116: GO 15119
15118: POP
// end ;
15119: LD_VAR 0 2
15123: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15124: LD_INT 0
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
// if not unit or not building then
15132: LD_VAR 0 1
15136: NOT
15137: PUSH
15138: LD_VAR 0 2
15142: NOT
15143: OR
15144: IFFALSE 15148
// exit ;
15146: GO 15306
// x := GetX ( building ) ;
15148: LD_ADDR_VAR 0 5
15152: PUSH
15153: LD_VAR 0 2
15157: PPUSH
15158: CALL_OW 250
15162: ST_TO_ADDR
// y := GetY ( building ) ;
15163: LD_ADDR_VAR 0 6
15167: PUSH
15168: LD_VAR 0 2
15172: PPUSH
15173: CALL_OW 251
15177: ST_TO_ADDR
// for i = 0 to 5 do
15178: LD_ADDR_VAR 0 4
15182: PUSH
15183: DOUBLE
15184: LD_INT 0
15186: DEC
15187: ST_TO_ADDR
15188: LD_INT 5
15190: PUSH
15191: FOR_TO
15192: IFFALSE 15304
// begin _x := ShiftX ( x , i , 3 ) ;
15194: LD_ADDR_VAR 0 7
15198: PUSH
15199: LD_VAR 0 5
15203: PPUSH
15204: LD_VAR 0 4
15208: PPUSH
15209: LD_INT 3
15211: PPUSH
15212: CALL_OW 272
15216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15217: LD_ADDR_VAR 0 8
15221: PUSH
15222: LD_VAR 0 6
15226: PPUSH
15227: LD_VAR 0 4
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: CALL_OW 273
15239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15240: LD_VAR 0 7
15244: PPUSH
15245: LD_VAR 0 8
15249: PPUSH
15250: CALL_OW 488
15254: NOT
15255: IFFALSE 15259
// continue ;
15257: GO 15191
// if HexInfo ( _x , _y ) = 0 then
15259: LD_VAR 0 7
15263: PPUSH
15264: LD_VAR 0 8
15268: PPUSH
15269: CALL_OW 428
15273: PUSH
15274: LD_INT 0
15276: EQUAL
15277: IFFALSE 15302
// begin ComMoveXY ( unit , _x , _y ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 7
15288: PPUSH
15289: LD_VAR 0 8
15293: PPUSH
15294: CALL_OW 111
// exit ;
15298: POP
15299: POP
15300: GO 15306
// end ; end ;
15302: GO 15191
15304: POP
15305: POP
// end ;
15306: LD_VAR 0 3
15310: RET
// export function ScanBase ( side , base_area ) ; begin
15311: LD_INT 0
15313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15314: LD_ADDR_VAR 0 3
15318: PUSH
15319: LD_VAR 0 2
15323: PPUSH
15324: LD_INT 81
15326: PUSH
15327: LD_VAR 0 1
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PPUSH
15336: CALL_OW 70
15340: ST_TO_ADDR
// end ;
15341: LD_VAR 0 3
15345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15346: LD_INT 0
15348: PPUSH
15349: PPUSH
15350: PPUSH
15351: PPUSH
// result := false ;
15352: LD_ADDR_VAR 0 2
15356: PUSH
15357: LD_INT 0
15359: ST_TO_ADDR
// side := GetSide ( unit ) ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 255
15374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15375: LD_ADDR_VAR 0 4
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: CALL_OW 248
15389: ST_TO_ADDR
// case nat of 1 :
15390: LD_VAR 0 4
15394: PUSH
15395: LD_INT 1
15397: DOUBLE
15398: EQUAL
15399: IFTRUE 15403
15401: GO 15414
15403: POP
// tech := tech_lassight ; 2 :
15404: LD_ADDR_VAR 0 5
15408: PUSH
15409: LD_INT 12
15411: ST_TO_ADDR
15412: GO 15453
15414: LD_INT 2
15416: DOUBLE
15417: EQUAL
15418: IFTRUE 15422
15420: GO 15433
15422: POP
// tech := tech_mortar ; 3 :
15423: LD_ADDR_VAR 0 5
15427: PUSH
15428: LD_INT 41
15430: ST_TO_ADDR
15431: GO 15453
15433: LD_INT 3
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15452
15441: POP
// tech := tech_bazooka ; end ;
15442: LD_ADDR_VAR 0 5
15446: PUSH
15447: LD_INT 44
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// if Researched ( side , tech ) then
15453: LD_VAR 0 3
15457: PPUSH
15458: LD_VAR 0 5
15462: PPUSH
15463: CALL_OW 325
15467: IFFALSE 15494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15469: LD_ADDR_VAR 0 2
15473: PUSH
15474: LD_INT 5
15476: PUSH
15477: LD_INT 8
15479: PUSH
15480: LD_INT 9
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: PUSH
15488: LD_VAR 0 4
15492: ARRAY
15493: ST_TO_ADDR
// end ;
15494: LD_VAR 0 2
15498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
15503: PPUSH
// if not mines then
15504: LD_VAR 0 2
15508: NOT
15509: IFFALSE 15513
// exit ;
15511: GO 15657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15513: LD_ADDR_VAR 0 5
15517: PUSH
15518: LD_INT 81
15520: PUSH
15521: LD_VAR 0 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 3
15532: PUSH
15533: LD_INT 21
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: ST_TO_ADDR
// for i in mines do
15556: LD_ADDR_VAR 0 4
15560: PUSH
15561: LD_VAR 0 2
15565: PUSH
15566: FOR_IN
15567: IFFALSE 15655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15569: LD_VAR 0 4
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 4
15582: PUSH
15583: LD_INT 2
15585: ARRAY
15586: PPUSH
15587: CALL_OW 458
15591: NOT
15592: IFFALSE 15596
// continue ;
15594: GO 15566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15596: LD_VAR 0 4
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: LD_VAR 0 4
15609: PUSH
15610: LD_INT 2
15612: ARRAY
15613: PPUSH
15614: CALL_OW 428
15618: PUSH
15619: LD_VAR 0 5
15623: IN
15624: IFFALSE 15653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15626: LD_VAR 0 4
15630: PUSH
15631: LD_INT 1
15633: ARRAY
15634: PPUSH
15635: LD_VAR 0 4
15639: PUSH
15640: LD_INT 2
15642: ARRAY
15643: PPUSH
15644: LD_VAR 0 1
15648: PPUSH
15649: CALL_OW 456
// end ;
15653: GO 15566
15655: POP
15656: POP
// end ;
15657: LD_VAR 0 3
15661: RET
// export function Count ( array ) ; var i ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
// result := 0 ;
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// for i in array do
15674: LD_ADDR_VAR 0 3
15678: PUSH
15679: LD_VAR 0 1
15683: PUSH
15684: FOR_IN
15685: IFFALSE 15709
// if i then
15687: LD_VAR 0 3
15691: IFFALSE 15707
// result := result + 1 ;
15693: LD_ADDR_VAR 0 2
15697: PUSH
15698: LD_VAR 0 2
15702: PUSH
15703: LD_INT 1
15705: PLUS
15706: ST_TO_ADDR
15707: GO 15684
15709: POP
15710: POP
// end ;
15711: LD_VAR 0 2
15715: RET
// export function IsEmpty ( building ) ; begin
15716: LD_INT 0
15718: PPUSH
// if not building then
15719: LD_VAR 0 1
15723: NOT
15724: IFFALSE 15728
// exit ;
15726: GO 15771
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15728: LD_ADDR_VAR 0 2
15732: PUSH
15733: LD_VAR 0 1
15737: PUSH
15738: LD_INT 22
15740: PUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 255
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 58
15757: PUSH
15758: EMPTY
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 69
15769: IN
15770: ST_TO_ADDR
// end ;
15771: LD_VAR 0 2
15775: RET
// export function IsNotFull ( building ) ; begin
15776: LD_INT 0
15778: PPUSH
// if not building then
15779: LD_VAR 0 1
15783: NOT
15784: IFFALSE 15788
// exit ;
15786: GO 15807
// result := UnitsInside ( building ) < 6 ;
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: LD_VAR 0 1
15797: PPUSH
15798: CALL_OW 313
15802: PUSH
15803: LD_INT 6
15805: LESS
15806: ST_TO_ADDR
// end ;
15807: LD_VAR 0 2
15811: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
15816: PPUSH
15817: PPUSH
// tmp := [ ] ;
15818: LD_ADDR_VAR 0 3
15822: PUSH
15823: EMPTY
15824: ST_TO_ADDR
// list := [ ] ;
15825: LD_ADDR_VAR 0 5
15829: PUSH
15830: EMPTY
15831: ST_TO_ADDR
// for i = 16 to 25 do
15832: LD_ADDR_VAR 0 4
15836: PUSH
15837: DOUBLE
15838: LD_INT 16
15840: DEC
15841: ST_TO_ADDR
15842: LD_INT 25
15844: PUSH
15845: FOR_TO
15846: IFFALSE 15919
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15848: LD_ADDR_VAR 0 3
15852: PUSH
15853: LD_VAR 0 3
15857: PUSH
15858: LD_INT 22
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 255
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 91
15877: PUSH
15878: LD_VAR 0 1
15882: PUSH
15883: LD_INT 6
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 30
15893: PUSH
15894: LD_VAR 0 4
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: PPUSH
15911: CALL_OW 69
15915: ADD
15916: ST_TO_ADDR
15917: GO 15845
15919: POP
15920: POP
// for i = 1 to tmp do
15921: LD_ADDR_VAR 0 4
15925: PUSH
15926: DOUBLE
15927: LD_INT 1
15929: DEC
15930: ST_TO_ADDR
15931: LD_VAR 0 3
15935: PUSH
15936: FOR_TO
15937: IFFALSE 16025
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15939: LD_ADDR_VAR 0 5
15943: PUSH
15944: LD_VAR 0 5
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: LD_VAR 0 4
15958: ARRAY
15959: PPUSH
15960: CALL_OW 266
15964: PUSH
15965: LD_VAR 0 3
15969: PUSH
15970: LD_VAR 0 4
15974: ARRAY
15975: PPUSH
15976: CALL_OW 250
15980: PUSH
15981: LD_VAR 0 3
15985: PUSH
15986: LD_VAR 0 4
15990: ARRAY
15991: PPUSH
15992: CALL_OW 251
15996: PUSH
15997: LD_VAR 0 3
16001: PUSH
16002: LD_VAR 0 4
16006: ARRAY
16007: PPUSH
16008: CALL_OW 254
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: ADD
16022: ST_TO_ADDR
16023: GO 15936
16025: POP
16026: POP
// result := list ;
16027: LD_ADDR_VAR 0 2
16031: PUSH
16032: LD_VAR 0 5
16036: ST_TO_ADDR
// end ;
16037: LD_VAR 0 2
16041: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
// if not factory then
16051: LD_VAR 0 1
16055: NOT
16056: IFFALSE 16060
// exit ;
16058: GO 16653
// if control = control_apeman then
16060: LD_VAR 0 4
16064: PUSH
16065: LD_INT 5
16067: EQUAL
16068: IFFALSE 16177
// begin tmp := UnitsInside ( factory ) ;
16070: LD_ADDR_VAR 0 8
16074: PUSH
16075: LD_VAR 0 1
16079: PPUSH
16080: CALL_OW 313
16084: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16085: LD_VAR 0 8
16089: PPUSH
16090: LD_INT 25
16092: PUSH
16093: LD_INT 12
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 72
16104: NOT
16105: IFFALSE 16115
// control := control_manual ;
16107: LD_ADDR_VAR 0 4
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16115: LD_ADDR_VAR 0 8
16119: PUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL 15812 0 1
16129: ST_TO_ADDR
// if tmp then
16130: LD_VAR 0 8
16134: IFFALSE 16177
// begin for i in tmp do
16136: LD_ADDR_VAR 0 7
16140: PUSH
16141: LD_VAR 0 8
16145: PUSH
16146: FOR_IN
16147: IFFALSE 16175
// if i [ 1 ] = b_ext_radio then
16149: LD_VAR 0 7
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PUSH
16158: LD_INT 22
16160: EQUAL
16161: IFFALSE 16173
// begin control := control_remote ;
16163: LD_ADDR_VAR 0 4
16167: PUSH
16168: LD_INT 2
16170: ST_TO_ADDR
// break ;
16171: GO 16175
// end ;
16173: GO 16146
16175: POP
16176: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16177: LD_VAR 0 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_VAR 0 4
16196: PPUSH
16197: LD_VAR 0 5
16201: PPUSH
16202: CALL_OW 448
16206: IFFALSE 16241
// begin result := [ chassis , engine , control , weapon ] ;
16208: LD_ADDR_VAR 0 6
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_VAR 0 3
16222: PUSH
16223: LD_VAR 0 4
16227: PUSH
16228: LD_VAR 0 5
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: ST_TO_ADDR
// exit ;
16239: GO 16653
// end ; _chassis := AvailableChassisList ( factory ) ;
16241: LD_ADDR_VAR 0 9
16245: PUSH
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 475
16255: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16256: LD_ADDR_VAR 0 11
16260: PUSH
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 476
16270: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16271: LD_ADDR_VAR 0 12
16275: PUSH
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 477
16285: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16286: LD_ADDR_VAR 0 10
16290: PUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 478
16300: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16301: LD_VAR 0 9
16305: NOT
16306: PUSH
16307: LD_VAR 0 11
16311: NOT
16312: OR
16313: PUSH
16314: LD_VAR 0 12
16318: NOT
16319: OR
16320: PUSH
16321: LD_VAR 0 10
16325: NOT
16326: OR
16327: IFFALSE 16362
// begin result := [ chassis , engine , control , weapon ] ;
16329: LD_ADDR_VAR 0 6
16333: PUSH
16334: LD_VAR 0 2
16338: PUSH
16339: LD_VAR 0 3
16343: PUSH
16344: LD_VAR 0 4
16348: PUSH
16349: LD_VAR 0 5
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// exit ;
16360: GO 16653
// end ; if not chassis in _chassis then
16362: LD_VAR 0 2
16366: PUSH
16367: LD_VAR 0 9
16371: IN
16372: NOT
16373: IFFALSE 16399
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16375: LD_ADDR_VAR 0 2
16379: PUSH
16380: LD_VAR 0 9
16384: PUSH
16385: LD_INT 1
16387: PPUSH
16388: LD_VAR 0 9
16392: PPUSH
16393: CALL_OW 12
16397: ARRAY
16398: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16399: LD_VAR 0 2
16403: PPUSH
16404: LD_VAR 0 3
16408: PPUSH
16409: CALL 16658 0 2
16413: NOT
16414: IFFALSE 16473
// repeat engine := _engine [ 1 ] ;
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_VAR 0 11
16425: PUSH
16426: LD_INT 1
16428: ARRAY
16429: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16430: LD_ADDR_VAR 0 11
16434: PUSH
16435: LD_VAR 0 11
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 3
16447: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16448: LD_VAR 0 2
16452: PPUSH
16453: LD_VAR 0 3
16457: PPUSH
16458: CALL 16658 0 2
16462: PUSH
16463: LD_VAR 0 11
16467: PUSH
16468: EMPTY
16469: EQUAL
16470: OR
16471: IFFALSE 16416
// if not control in _control then
16473: LD_VAR 0 4
16477: PUSH
16478: LD_VAR 0 12
16482: IN
16483: NOT
16484: IFFALSE 16510
// control := _control [ rand ( 1 , _control ) ] ;
16486: LD_ADDR_VAR 0 4
16490: PUSH
16491: LD_VAR 0 12
16495: PUSH
16496: LD_INT 1
16498: PPUSH
16499: LD_VAR 0 12
16503: PPUSH
16504: CALL_OW 12
16508: ARRAY
16509: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16510: LD_VAR 0 2
16514: PPUSH
16515: LD_VAR 0 5
16519: PPUSH
16520: CALL 16878 0 2
16524: NOT
16525: IFFALSE 16584
// repeat weapon := _weapon [ 1 ] ;
16527: LD_ADDR_VAR 0 5
16531: PUSH
16532: LD_VAR 0 10
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16541: LD_ADDR_VAR 0 10
16545: PUSH
16546: LD_VAR 0 10
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 3
16558: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16559: LD_VAR 0 2
16563: PPUSH
16564: LD_VAR 0 5
16568: PPUSH
16569: CALL 16878 0 2
16573: PUSH
16574: LD_VAR 0 10
16578: PUSH
16579: EMPTY
16580: EQUAL
16581: OR
16582: IFFALSE 16527
// result := [ ] ;
16584: LD_ADDR_VAR 0 6
16588: PUSH
16589: EMPTY
16590: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16591: LD_VAR 0 1
16595: PPUSH
16596: LD_VAR 0 2
16600: PPUSH
16601: LD_VAR 0 3
16605: PPUSH
16606: LD_VAR 0 4
16610: PPUSH
16611: LD_VAR 0 5
16615: PPUSH
16616: CALL_OW 448
16620: IFFALSE 16653
// result := [ chassis , engine , control , weapon ] ;
16622: LD_ADDR_VAR 0 6
16626: PUSH
16627: LD_VAR 0 2
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_VAR 0 4
16641: PUSH
16642: LD_VAR 0 5
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: ST_TO_ADDR
// end ;
16653: LD_VAR 0 6
16657: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16658: LD_INT 0
16660: PPUSH
// if not chassis or not engine then
16661: LD_VAR 0 1
16665: NOT
16666: PUSH
16667: LD_VAR 0 2
16671: NOT
16672: OR
16673: IFFALSE 16677
// exit ;
16675: GO 16873
// case engine of engine_solar :
16677: LD_VAR 0 2
16681: PUSH
16682: LD_INT 2
16684: DOUBLE
16685: EQUAL
16686: IFTRUE 16690
16688: GO 16728
16690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16691: LD_ADDR_VAR 0 3
16695: PUSH
16696: LD_INT 11
16698: PUSH
16699: LD_INT 12
16701: PUSH
16702: LD_INT 13
16704: PUSH
16705: LD_INT 14
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 3
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: ST_TO_ADDR
16726: GO 16857
16728: LD_INT 1
16730: DOUBLE
16731: EQUAL
16732: IFTRUE 16736
16734: GO 16798
16736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16737: LD_ADDR_VAR 0 3
16741: PUSH
16742: LD_INT 11
16744: PUSH
16745: LD_INT 12
16747: PUSH
16748: LD_INT 13
16750: PUSH
16751: LD_INT 14
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: LD_INT 3
16762: PUSH
16763: LD_INT 4
16765: PUSH
16766: LD_INT 5
16768: PUSH
16769: LD_INT 21
16771: PUSH
16772: LD_INT 23
16774: PUSH
16775: LD_INT 22
16777: PUSH
16778: LD_INT 24
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: ST_TO_ADDR
16796: GO 16857
16798: LD_INT 3
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16856
16806: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_INT 13
16814: PUSH
16815: LD_INT 14
16817: PUSH
16818: LD_INT 2
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: LD_INT 4
16826: PUSH
16827: LD_INT 5
16829: PUSH
16830: LD_INT 21
16832: PUSH
16833: LD_INT 22
16835: PUSH
16836: LD_INT 23
16838: PUSH
16839: LD_INT 24
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: ST_TO_ADDR
16854: GO 16857
16856: POP
// result := ( chassis in result ) ;
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_VAR 0 1
16866: PUSH
16867: LD_VAR 0 3
16871: IN
16872: ST_TO_ADDR
// end ;
16873: LD_VAR 0 3
16877: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16878: LD_INT 0
16880: PPUSH
// if not chassis or not weapon then
16881: LD_VAR 0 1
16885: NOT
16886: PUSH
16887: LD_VAR 0 2
16891: NOT
16892: OR
16893: IFFALSE 16897
// exit ;
16895: GO 17923
// case weapon of us_machine_gun :
16897: LD_VAR 0 2
16901: PUSH
16902: LD_INT 2
16904: DOUBLE
16905: EQUAL
16906: IFTRUE 16910
16908: GO 16940
16910: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16911: LD_ADDR_VAR 0 3
16915: PUSH
16916: LD_INT 1
16918: PUSH
16919: LD_INT 2
16921: PUSH
16922: LD_INT 3
16924: PUSH
16925: LD_INT 4
16927: PUSH
16928: LD_INT 5
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: ST_TO_ADDR
16938: GO 17907
16940: LD_INT 3
16942: DOUBLE
16943: EQUAL
16944: IFTRUE 16948
16946: GO 16978
16948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16949: LD_ADDR_VAR 0 3
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: LD_INT 2
16959: PUSH
16960: LD_INT 3
16962: PUSH
16963: LD_INT 4
16965: PUSH
16966: LD_INT 5
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: ST_TO_ADDR
16976: GO 17907
16978: LD_INT 11
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 17016
16986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16987: LD_ADDR_VAR 0 3
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 2
16997: PUSH
16998: LD_INT 3
17000: PUSH
17001: LD_INT 4
17003: PUSH
17004: LD_INT 5
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: ST_TO_ADDR
17014: GO 17907
17016: LD_INT 4
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17050
17024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17025: LD_ADDR_VAR 0 3
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: LD_INT 4
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: ST_TO_ADDR
17048: GO 17907
17050: LD_INT 5
17052: DOUBLE
17053: EQUAL
17054: IFTRUE 17058
17056: GO 17084
17058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17059: LD_ADDR_VAR 0 3
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 4
17072: PUSH
17073: LD_INT 5
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: ST_TO_ADDR
17082: GO 17907
17084: LD_INT 9
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17118
17092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17093: LD_ADDR_VAR 0 3
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 3
17103: PUSH
17104: LD_INT 4
17106: PUSH
17107: LD_INT 5
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: ST_TO_ADDR
17116: GO 17907
17118: LD_INT 7
17120: DOUBLE
17121: EQUAL
17122: IFTRUE 17126
17124: GO 17152
17126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17127: LD_ADDR_VAR 0 3
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: LD_INT 3
17137: PUSH
17138: LD_INT 4
17140: PUSH
17141: LD_INT 5
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: ST_TO_ADDR
17150: GO 17907
17152: LD_INT 12
17154: DOUBLE
17155: EQUAL
17156: IFTRUE 17160
17158: GO 17186
17160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 3
17171: PUSH
17172: LD_INT 4
17174: PUSH
17175: LD_INT 5
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: ST_TO_ADDR
17184: GO 17907
17186: LD_INT 13
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17220
17194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17195: LD_ADDR_VAR 0 3
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: LD_INT 4
17208: PUSH
17209: LD_INT 5
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 17907
17220: LD_INT 14
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17246
17228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: ST_TO_ADDR
17244: GO 17907
17246: LD_INT 6
17248: DOUBLE
17249: EQUAL
17250: IFTRUE 17254
17252: GO 17272
17254: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17255: LD_ADDR_VAR 0 3
17259: PUSH
17260: LD_INT 4
17262: PUSH
17263: LD_INT 5
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: ST_TO_ADDR
17270: GO 17907
17272: LD_INT 10
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17298
17280: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17281: LD_ADDR_VAR 0 3
17285: PUSH
17286: LD_INT 4
17288: PUSH
17289: LD_INT 5
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
17296: GO 17907
17298: LD_INT 22
17300: DOUBLE
17301: EQUAL
17302: IFTRUE 17306
17304: GO 17332
17306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17307: LD_ADDR_VAR 0 3
17311: PUSH
17312: LD_INT 11
17314: PUSH
17315: LD_INT 12
17317: PUSH
17318: LD_INT 13
17320: PUSH
17321: LD_INT 14
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: ST_TO_ADDR
17330: GO 17907
17332: LD_INT 23
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17366
17340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17341: LD_ADDR_VAR 0 3
17345: PUSH
17346: LD_INT 11
17348: PUSH
17349: LD_INT 12
17351: PUSH
17352: LD_INT 13
17354: PUSH
17355: LD_INT 14
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: ST_TO_ADDR
17364: GO 17907
17366: LD_INT 24
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17374
17372: GO 17400
17374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17375: LD_ADDR_VAR 0 3
17379: PUSH
17380: LD_INT 11
17382: PUSH
17383: LD_INT 12
17385: PUSH
17386: LD_INT 13
17388: PUSH
17389: LD_INT 14
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: ST_TO_ADDR
17398: GO 17907
17400: LD_INT 30
17402: DOUBLE
17403: EQUAL
17404: IFTRUE 17408
17406: GO 17434
17408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17409: LD_ADDR_VAR 0 3
17413: PUSH
17414: LD_INT 11
17416: PUSH
17417: LD_INT 12
17419: PUSH
17420: LD_INT 13
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: ST_TO_ADDR
17432: GO 17907
17434: LD_INT 25
17436: DOUBLE
17437: EQUAL
17438: IFTRUE 17442
17440: GO 17460
17442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17443: LD_ADDR_VAR 0 3
17447: PUSH
17448: LD_INT 13
17450: PUSH
17451: LD_INT 14
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: ST_TO_ADDR
17458: GO 17907
17460: LD_INT 27
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17486
17468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17469: LD_ADDR_VAR 0 3
17473: PUSH
17474: LD_INT 13
17476: PUSH
17477: LD_INT 14
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: ST_TO_ADDR
17484: GO 17907
17486: LD_INT 28
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 17512
17494: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17495: LD_ADDR_VAR 0 3
17499: PUSH
17500: LD_INT 13
17502: PUSH
17503: LD_INT 14
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: ST_TO_ADDR
17510: GO 17907
17512: LD_INT 29
17514: DOUBLE
17515: EQUAL
17516: IFTRUE 17520
17518: GO 17538
17520: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17521: LD_ADDR_VAR 0 3
17525: PUSH
17526: LD_INT 13
17528: PUSH
17529: LD_INT 14
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: ST_TO_ADDR
17536: GO 17907
17538: LD_INT 31
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17564
17546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17547: LD_ADDR_VAR 0 3
17551: PUSH
17552: LD_INT 13
17554: PUSH
17555: LD_INT 14
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: ST_TO_ADDR
17562: GO 17907
17564: LD_INT 26
17566: DOUBLE
17567: EQUAL
17568: IFTRUE 17572
17570: GO 17590
17572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17573: LD_ADDR_VAR 0 3
17577: PUSH
17578: LD_INT 13
17580: PUSH
17581: LD_INT 14
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: ST_TO_ADDR
17588: GO 17907
17590: LD_INT 42
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17624
17598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17599: LD_ADDR_VAR 0 3
17603: PUSH
17604: LD_INT 21
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 23
17612: PUSH
17613: LD_INT 24
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: ST_TO_ADDR
17622: GO 17907
17624: LD_INT 43
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17658
17632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17633: LD_ADDR_VAR 0 3
17637: PUSH
17638: LD_INT 21
17640: PUSH
17641: LD_INT 22
17643: PUSH
17644: LD_INT 23
17646: PUSH
17647: LD_INT 24
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: ST_TO_ADDR
17656: GO 17907
17658: LD_INT 44
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17692
17666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: LD_INT 21
17674: PUSH
17675: LD_INT 22
17677: PUSH
17678: LD_INT 23
17680: PUSH
17681: LD_INT 24
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: ST_TO_ADDR
17690: GO 17907
17692: LD_INT 45
17694: DOUBLE
17695: EQUAL
17696: IFTRUE 17700
17698: GO 17726
17700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17701: LD_ADDR_VAR 0 3
17705: PUSH
17706: LD_INT 21
17708: PUSH
17709: LD_INT 22
17711: PUSH
17712: LD_INT 23
17714: PUSH
17715: LD_INT 24
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: ST_TO_ADDR
17724: GO 17907
17726: LD_INT 49
17728: DOUBLE
17729: EQUAL
17730: IFTRUE 17734
17732: GO 17760
17734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_INT 21
17742: PUSH
17743: LD_INT 22
17745: PUSH
17746: LD_INT 23
17748: PUSH
17749: LD_INT 24
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: ST_TO_ADDR
17758: GO 17907
17760: LD_INT 51
17762: DOUBLE
17763: EQUAL
17764: IFTRUE 17768
17766: GO 17794
17768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 22
17779: PUSH
17780: LD_INT 23
17782: PUSH
17783: LD_INT 24
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: ST_TO_ADDR
17792: GO 17907
17794: LD_INT 52
17796: DOUBLE
17797: EQUAL
17798: IFTRUE 17802
17800: GO 17828
17802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17803: LD_ADDR_VAR 0 3
17807: PUSH
17808: LD_INT 21
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_INT 23
17816: PUSH
17817: LD_INT 24
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: ST_TO_ADDR
17826: GO 17907
17828: LD_INT 53
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17854
17836: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17837: LD_ADDR_VAR 0 3
17841: PUSH
17842: LD_INT 23
17844: PUSH
17845: LD_INT 24
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: ST_TO_ADDR
17852: GO 17907
17854: LD_INT 46
17856: DOUBLE
17857: EQUAL
17858: IFTRUE 17862
17860: GO 17880
17862: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17863: LD_ADDR_VAR 0 3
17867: PUSH
17868: LD_INT 23
17870: PUSH
17871: LD_INT 24
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: ST_TO_ADDR
17878: GO 17907
17880: LD_INT 47
17882: DOUBLE
17883: EQUAL
17884: IFTRUE 17888
17886: GO 17906
17888: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_INT 23
17896: PUSH
17897: LD_INT 24
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: ST_TO_ADDR
17904: GO 17907
17906: POP
// result := ( chassis in result ) ;
17907: LD_ADDR_VAR 0 3
17911: PUSH
17912: LD_VAR 0 1
17916: PUSH
17917: LD_VAR 0 3
17921: IN
17922: ST_TO_ADDR
// end ;
17923: LD_VAR 0 3
17927: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17928: LD_INT 0
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
17934: PPUSH
17935: PPUSH
17936: PPUSH
// result := array ;
17937: LD_ADDR_VAR 0 5
17941: PUSH
17942: LD_VAR 0 1
17946: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17947: LD_VAR 0 1
17951: NOT
17952: PUSH
17953: LD_VAR 0 2
17957: NOT
17958: OR
17959: PUSH
17960: LD_VAR 0 3
17964: NOT
17965: OR
17966: PUSH
17967: LD_VAR 0 2
17971: PUSH
17972: LD_VAR 0 1
17976: GREATER
17977: OR
17978: PUSH
17979: LD_VAR 0 3
17983: PUSH
17984: LD_VAR 0 1
17988: GREATER
17989: OR
17990: IFFALSE 17994
// exit ;
17992: GO 18290
// if direction then
17994: LD_VAR 0 4
17998: IFFALSE 18062
// begin d := 1 ;
18000: LD_ADDR_VAR 0 9
18004: PUSH
18005: LD_INT 1
18007: ST_TO_ADDR
// if i_from > i_to then
18008: LD_VAR 0 2
18012: PUSH
18013: LD_VAR 0 3
18017: GREATER
18018: IFFALSE 18044
// length := ( array - i_from ) + i_to else
18020: LD_ADDR_VAR 0 11
18024: PUSH
18025: LD_VAR 0 1
18029: PUSH
18030: LD_VAR 0 2
18034: MINUS
18035: PUSH
18036: LD_VAR 0 3
18040: PLUS
18041: ST_TO_ADDR
18042: GO 18060
// length := i_to - i_from ;
18044: LD_ADDR_VAR 0 11
18048: PUSH
18049: LD_VAR 0 3
18053: PUSH
18054: LD_VAR 0 2
18058: MINUS
18059: ST_TO_ADDR
// end else
18060: GO 18123
// begin d := - 1 ;
18062: LD_ADDR_VAR 0 9
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: ST_TO_ADDR
// if i_from > i_to then
18071: LD_VAR 0 2
18075: PUSH
18076: LD_VAR 0 3
18080: GREATER
18081: IFFALSE 18101
// length := i_from - i_to else
18083: LD_ADDR_VAR 0 11
18087: PUSH
18088: LD_VAR 0 2
18092: PUSH
18093: LD_VAR 0 3
18097: MINUS
18098: ST_TO_ADDR
18099: GO 18123
// length := ( array - i_to ) + i_from ;
18101: LD_ADDR_VAR 0 11
18105: PUSH
18106: LD_VAR 0 1
18110: PUSH
18111: LD_VAR 0 3
18115: MINUS
18116: PUSH
18117: LD_VAR 0 2
18121: PLUS
18122: ST_TO_ADDR
// end ; if not length then
18123: LD_VAR 0 11
18127: NOT
18128: IFFALSE 18132
// exit ;
18130: GO 18290
// tmp := array ;
18132: LD_ADDR_VAR 0 10
18136: PUSH
18137: LD_VAR 0 1
18141: ST_TO_ADDR
// for i = 1 to length do
18142: LD_ADDR_VAR 0 6
18146: PUSH
18147: DOUBLE
18148: LD_INT 1
18150: DEC
18151: ST_TO_ADDR
18152: LD_VAR 0 11
18156: PUSH
18157: FOR_TO
18158: IFFALSE 18278
// begin for j = 1 to array do
18160: LD_ADDR_VAR 0 7
18164: PUSH
18165: DOUBLE
18166: LD_INT 1
18168: DEC
18169: ST_TO_ADDR
18170: LD_VAR 0 1
18174: PUSH
18175: FOR_TO
18176: IFFALSE 18264
// begin k := j + d ;
18178: LD_ADDR_VAR 0 8
18182: PUSH
18183: LD_VAR 0 7
18187: PUSH
18188: LD_VAR 0 9
18192: PLUS
18193: ST_TO_ADDR
// if k > array then
18194: LD_VAR 0 8
18198: PUSH
18199: LD_VAR 0 1
18203: GREATER
18204: IFFALSE 18214
// k := 1 ;
18206: LD_ADDR_VAR 0 8
18210: PUSH
18211: LD_INT 1
18213: ST_TO_ADDR
// if not k then
18214: LD_VAR 0 8
18218: NOT
18219: IFFALSE 18231
// k := array ;
18221: LD_ADDR_VAR 0 8
18225: PUSH
18226: LD_VAR 0 1
18230: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18231: LD_ADDR_VAR 0 10
18235: PUSH
18236: LD_VAR 0 10
18240: PPUSH
18241: LD_VAR 0 8
18245: PPUSH
18246: LD_VAR 0 1
18250: PUSH
18251: LD_VAR 0 7
18255: ARRAY
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// end ;
18262: GO 18175
18264: POP
18265: POP
// array := tmp ;
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_VAR 0 10
18275: ST_TO_ADDR
// end ;
18276: GO 18157
18278: POP
18279: POP
// result := array ;
18280: LD_ADDR_VAR 0 5
18284: PUSH
18285: LD_VAR 0 1
18289: ST_TO_ADDR
// end ;
18290: LD_VAR 0 5
18294: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18295: LD_INT 0
18297: PPUSH
18298: PPUSH
// result := 0 ;
18299: LD_ADDR_VAR 0 3
18303: PUSH
18304: LD_INT 0
18306: ST_TO_ADDR
// if not array or not value in array then
18307: LD_VAR 0 1
18311: NOT
18312: PUSH
18313: LD_VAR 0 2
18317: PUSH
18318: LD_VAR 0 1
18322: IN
18323: NOT
18324: OR
18325: IFFALSE 18329
// exit ;
18327: GO 18383
// for i = 1 to array do
18329: LD_ADDR_VAR 0 4
18333: PUSH
18334: DOUBLE
18335: LD_INT 1
18337: DEC
18338: ST_TO_ADDR
18339: LD_VAR 0 1
18343: PUSH
18344: FOR_TO
18345: IFFALSE 18381
// if value = array [ i ] then
18347: LD_VAR 0 2
18351: PUSH
18352: LD_VAR 0 1
18356: PUSH
18357: LD_VAR 0 4
18361: ARRAY
18362: EQUAL
18363: IFFALSE 18379
// begin result := i ;
18365: LD_ADDR_VAR 0 3
18369: PUSH
18370: LD_VAR 0 4
18374: ST_TO_ADDR
// exit ;
18375: POP
18376: POP
18377: GO 18383
// end ;
18379: GO 18344
18381: POP
18382: POP
// end ;
18383: LD_VAR 0 3
18387: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18388: LD_INT 0
18390: PPUSH
// vc_chassis := chassis ;
18391: LD_ADDR_OWVAR 37
18395: PUSH
18396: LD_VAR 0 1
18400: ST_TO_ADDR
// vc_engine := engine ;
18401: LD_ADDR_OWVAR 39
18405: PUSH
18406: LD_VAR 0 2
18410: ST_TO_ADDR
// vc_control := control ;
18411: LD_ADDR_OWVAR 38
18415: PUSH
18416: LD_VAR 0 3
18420: ST_TO_ADDR
// vc_weapon := weapon ;
18421: LD_ADDR_OWVAR 40
18425: PUSH
18426: LD_VAR 0 4
18430: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18431: LD_ADDR_OWVAR 41
18435: PUSH
18436: LD_VAR 0 5
18440: ST_TO_ADDR
// end ;
18441: LD_VAR 0 6
18445: RET
// export function WantPlant ( unit ) ; var task ; begin
18446: LD_INT 0
18448: PPUSH
18449: PPUSH
// result := false ;
18450: LD_ADDR_VAR 0 2
18454: PUSH
18455: LD_INT 0
18457: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18458: LD_ADDR_VAR 0 3
18462: PUSH
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 437
18472: ST_TO_ADDR
// if task then
18473: LD_VAR 0 3
18477: IFFALSE 18505
// if task [ 1 ] [ 1 ] = p then
18479: LD_VAR 0 3
18483: PUSH
18484: LD_INT 1
18486: ARRAY
18487: PUSH
18488: LD_INT 1
18490: ARRAY
18491: PUSH
18492: LD_STRING p
18494: EQUAL
18495: IFFALSE 18505
// result := true ;
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_INT 1
18504: ST_TO_ADDR
// end ;
18505: LD_VAR 0 2
18509: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18510: LD_INT 0
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
// if pos < 1 then
18516: LD_VAR 0 2
18520: PUSH
18521: LD_INT 1
18523: LESS
18524: IFFALSE 18528
// exit ;
18526: GO 18831
// if pos = 1 then
18528: LD_VAR 0 2
18532: PUSH
18533: LD_INT 1
18535: EQUAL
18536: IFFALSE 18569
// result := Replace ( arr , pos [ 1 ] , value ) else
18538: LD_ADDR_VAR 0 4
18542: PUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: LD_VAR 0 2
18552: PUSH
18553: LD_INT 1
18555: ARRAY
18556: PPUSH
18557: LD_VAR 0 3
18561: PPUSH
18562: CALL_OW 1
18566: ST_TO_ADDR
18567: GO 18831
// begin tmp := arr ;
18569: LD_ADDR_VAR 0 6
18573: PUSH
18574: LD_VAR 0 1
18578: ST_TO_ADDR
// s_arr := [ tmp ] ;
18579: LD_ADDR_VAR 0 7
18583: PUSH
18584: LD_VAR 0 6
18588: PUSH
18589: EMPTY
18590: LIST
18591: ST_TO_ADDR
// for i = 1 to pos - 1 do
18592: LD_ADDR_VAR 0 5
18596: PUSH
18597: DOUBLE
18598: LD_INT 1
18600: DEC
18601: ST_TO_ADDR
18602: LD_VAR 0 2
18606: PUSH
18607: LD_INT 1
18609: MINUS
18610: PUSH
18611: FOR_TO
18612: IFFALSE 18657
// begin tmp := tmp [ pos [ i ] ] ;
18614: LD_ADDR_VAR 0 6
18618: PUSH
18619: LD_VAR 0 6
18623: PUSH
18624: LD_VAR 0 2
18628: PUSH
18629: LD_VAR 0 5
18633: ARRAY
18634: ARRAY
18635: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18636: LD_ADDR_VAR 0 7
18640: PUSH
18641: LD_VAR 0 7
18645: PUSH
18646: LD_VAR 0 6
18650: PUSH
18651: EMPTY
18652: LIST
18653: ADD
18654: ST_TO_ADDR
// end ;
18655: GO 18611
18657: POP
18658: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18659: LD_ADDR_VAR 0 6
18663: PUSH
18664: LD_VAR 0 6
18668: PPUSH
18669: LD_VAR 0 2
18673: PUSH
18674: LD_VAR 0 2
18678: ARRAY
18679: PPUSH
18680: LD_VAR 0 3
18684: PPUSH
18685: CALL_OW 1
18689: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18690: LD_ADDR_VAR 0 7
18694: PUSH
18695: LD_VAR 0 7
18699: PPUSH
18700: LD_VAR 0 7
18704: PPUSH
18705: LD_VAR 0 6
18709: PPUSH
18710: CALL_OW 1
18714: ST_TO_ADDR
// for i = s_arr downto 2 do
18715: LD_ADDR_VAR 0 5
18719: PUSH
18720: DOUBLE
18721: LD_VAR 0 7
18725: INC
18726: ST_TO_ADDR
18727: LD_INT 2
18729: PUSH
18730: FOR_DOWNTO
18731: IFFALSE 18815
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18733: LD_ADDR_VAR 0 6
18737: PUSH
18738: LD_VAR 0 7
18742: PUSH
18743: LD_VAR 0 5
18747: PUSH
18748: LD_INT 1
18750: MINUS
18751: ARRAY
18752: PPUSH
18753: LD_VAR 0 2
18757: PUSH
18758: LD_VAR 0 5
18762: PUSH
18763: LD_INT 1
18765: MINUS
18766: ARRAY
18767: PPUSH
18768: LD_VAR 0 7
18772: PUSH
18773: LD_VAR 0 5
18777: ARRAY
18778: PPUSH
18779: CALL_OW 1
18783: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18784: LD_ADDR_VAR 0 7
18788: PUSH
18789: LD_VAR 0 7
18793: PPUSH
18794: LD_VAR 0 5
18798: PUSH
18799: LD_INT 1
18801: MINUS
18802: PPUSH
18803: LD_VAR 0 6
18807: PPUSH
18808: CALL_OW 1
18812: ST_TO_ADDR
// end ;
18813: GO 18730
18815: POP
18816: POP
// result := s_arr [ 1 ] ;
18817: LD_ADDR_VAR 0 4
18821: PUSH
18822: LD_VAR 0 7
18826: PUSH
18827: LD_INT 1
18829: ARRAY
18830: ST_TO_ADDR
// end ; end ;
18831: LD_VAR 0 4
18835: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18836: LD_INT 0
18838: PPUSH
18839: PPUSH
// if not list then
18840: LD_VAR 0 1
18844: NOT
18845: IFFALSE 18849
// exit ;
18847: GO 18940
// i := list [ pos1 ] ;
18849: LD_ADDR_VAR 0 5
18853: PUSH
18854: LD_VAR 0 1
18858: PUSH
18859: LD_VAR 0 2
18863: ARRAY
18864: ST_TO_ADDR
// if not i then
18865: LD_VAR 0 5
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18940
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_VAR 0 2
18888: PPUSH
18889: LD_VAR 0 1
18893: PUSH
18894: LD_VAR 0 3
18898: ARRAY
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18905: LD_ADDR_VAR 0 1
18909: PUSH
18910: LD_VAR 0 1
18914: PPUSH
18915: LD_VAR 0 3
18919: PPUSH
18920: LD_VAR 0 5
18924: PPUSH
18925: CALL_OW 1
18929: ST_TO_ADDR
// result := list ;
18930: LD_ADDR_VAR 0 4
18934: PUSH
18935: LD_VAR 0 1
18939: ST_TO_ADDR
// end ;
18940: LD_VAR 0 4
18944: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18945: LD_INT 0
18947: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18948: LD_ADDR_VAR 0 5
18952: PUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 250
18962: PPUSH
18963: LD_VAR 0 1
18967: PPUSH
18968: CALL_OW 251
18972: PPUSH
18973: LD_VAR 0 2
18977: PPUSH
18978: LD_VAR 0 3
18982: PPUSH
18983: LD_VAR 0 4
18987: PPUSH
18988: CALL 18998 0 5
18992: ST_TO_ADDR
// end ;
18993: LD_VAR 0 5
18997: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18998: LD_INT 0
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
// if not list then
19004: LD_VAR 0 3
19008: NOT
19009: IFFALSE 19013
// exit ;
19011: GO 19401
// result := [ ] ;
19013: LD_ADDR_VAR 0 6
19017: PUSH
19018: EMPTY
19019: ST_TO_ADDR
// for i in list do
19020: LD_ADDR_VAR 0 7
19024: PUSH
19025: LD_VAR 0 3
19029: PUSH
19030: FOR_IN
19031: IFFALSE 19233
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19033: LD_ADDR_VAR 0 9
19037: PUSH
19038: LD_VAR 0 7
19042: PPUSH
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 297
19057: ST_TO_ADDR
// if not result then
19058: LD_VAR 0 6
19062: NOT
19063: IFFALSE 19089
// result := [ [ i , tmp ] ] else
19065: LD_ADDR_VAR 0 6
19069: PUSH
19070: LD_VAR 0 7
19074: PUSH
19075: LD_VAR 0 9
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: ST_TO_ADDR
19087: GO 19231
// begin if result [ result ] [ 2 ] < tmp then
19089: LD_VAR 0 6
19093: PUSH
19094: LD_VAR 0 6
19098: ARRAY
19099: PUSH
19100: LD_INT 2
19102: ARRAY
19103: PUSH
19104: LD_VAR 0 9
19108: LESS
19109: IFFALSE 19151
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19111: LD_ADDR_VAR 0 6
19115: PUSH
19116: LD_VAR 0 6
19120: PPUSH
19121: LD_VAR 0 6
19125: PUSH
19126: LD_INT 1
19128: PLUS
19129: PPUSH
19130: LD_VAR 0 7
19134: PUSH
19135: LD_VAR 0 9
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PPUSH
19144: CALL_OW 2
19148: ST_TO_ADDR
19149: GO 19231
// for j = 1 to result do
19151: LD_ADDR_VAR 0 8
19155: PUSH
19156: DOUBLE
19157: LD_INT 1
19159: DEC
19160: ST_TO_ADDR
19161: LD_VAR 0 6
19165: PUSH
19166: FOR_TO
19167: IFFALSE 19229
// begin if tmp < result [ j ] [ 2 ] then
19169: LD_VAR 0 9
19173: PUSH
19174: LD_VAR 0 6
19178: PUSH
19179: LD_VAR 0 8
19183: ARRAY
19184: PUSH
19185: LD_INT 2
19187: ARRAY
19188: LESS
19189: IFFALSE 19227
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19191: LD_ADDR_VAR 0 6
19195: PUSH
19196: LD_VAR 0 6
19200: PPUSH
19201: LD_VAR 0 8
19205: PPUSH
19206: LD_VAR 0 7
19210: PUSH
19211: LD_VAR 0 9
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 2
19224: ST_TO_ADDR
// break ;
19225: GO 19229
// end ; end ;
19227: GO 19166
19229: POP
19230: POP
// end ; end ;
19231: GO 19030
19233: POP
19234: POP
// if result and not asc then
19235: LD_VAR 0 6
19239: PUSH
19240: LD_VAR 0 4
19244: NOT
19245: AND
19246: IFFALSE 19321
// begin tmp := result ;
19248: LD_ADDR_VAR 0 9
19252: PUSH
19253: LD_VAR 0 6
19257: ST_TO_ADDR
// for i = tmp downto 1 do
19258: LD_ADDR_VAR 0 7
19262: PUSH
19263: DOUBLE
19264: LD_VAR 0 9
19268: INC
19269: ST_TO_ADDR
19270: LD_INT 1
19272: PUSH
19273: FOR_DOWNTO
19274: IFFALSE 19319
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19276: LD_ADDR_VAR 0 6
19280: PUSH
19281: LD_VAR 0 6
19285: PPUSH
19286: LD_VAR 0 9
19290: PUSH
19291: LD_VAR 0 7
19295: MINUS
19296: PUSH
19297: LD_INT 1
19299: PLUS
19300: PPUSH
19301: LD_VAR 0 9
19305: PUSH
19306: LD_VAR 0 7
19310: ARRAY
19311: PPUSH
19312: CALL_OW 1
19316: ST_TO_ADDR
19317: GO 19273
19319: POP
19320: POP
// end ; tmp := [ ] ;
19321: LD_ADDR_VAR 0 9
19325: PUSH
19326: EMPTY
19327: ST_TO_ADDR
// if mode then
19328: LD_VAR 0 5
19332: IFFALSE 19401
// begin for i = 1 to result do
19334: LD_ADDR_VAR 0 7
19338: PUSH
19339: DOUBLE
19340: LD_INT 1
19342: DEC
19343: ST_TO_ADDR
19344: LD_VAR 0 6
19348: PUSH
19349: FOR_TO
19350: IFFALSE 19389
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19352: LD_ADDR_VAR 0 9
19356: PUSH
19357: LD_VAR 0 9
19361: PPUSH
19362: LD_VAR 0 7
19366: PPUSH
19367: LD_VAR 0 6
19371: PUSH
19372: LD_VAR 0 7
19376: ARRAY
19377: PUSH
19378: LD_INT 1
19380: ARRAY
19381: PPUSH
19382: CALL_OW 1
19386: ST_TO_ADDR
19387: GO 19349
19389: POP
19390: POP
// result := tmp ;
19391: LD_ADDR_VAR 0 6
19395: PUSH
19396: LD_VAR 0 9
19400: ST_TO_ADDR
// end ; end ;
19401: LD_VAR 0 6
19405: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19406: LD_INT 0
19408: PPUSH
19409: PPUSH
19410: PPUSH
19411: PPUSH
19412: PPUSH
19413: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19414: LD_ADDR_VAR 0 5
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: EMPTY
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: ST_TO_ADDR
// if not x or not y then
19436: LD_VAR 0 2
19440: NOT
19441: PUSH
19442: LD_VAR 0 3
19446: NOT
19447: OR
19448: IFFALSE 19452
// exit ;
19450: GO 21098
// if not range then
19452: LD_VAR 0 4
19456: NOT
19457: IFFALSE 19467
// range := 10 ;
19459: LD_ADDR_VAR 0 4
19463: PUSH
19464: LD_INT 10
19466: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19467: LD_ADDR_VAR 0 8
19471: PUSH
19472: LD_INT 81
19474: PUSH
19475: LD_VAR 0 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 92
19486: PUSH
19487: LD_VAR 0 2
19491: PUSH
19492: LD_VAR 0 3
19496: PUSH
19497: LD_VAR 0 4
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 3
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 3
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: ST_TO_ADDR
// if not tmp then
19535: LD_VAR 0 8
19539: NOT
19540: IFFALSE 19544
// exit ;
19542: GO 21098
// for i in tmp do
19544: LD_ADDR_VAR 0 6
19548: PUSH
19549: LD_VAR 0 8
19553: PUSH
19554: FOR_IN
19555: IFFALSE 21073
// begin points := [ 0 , 0 , 0 ] ;
19557: LD_ADDR_VAR 0 9
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: ST_TO_ADDR
// bpoints := 1 ;
19576: LD_ADDR_VAR 0 10
19580: PUSH
19581: LD_INT 1
19583: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19584: LD_VAR 0 6
19588: PPUSH
19589: CALL_OW 247
19593: PUSH
19594: LD_INT 1
19596: DOUBLE
19597: EQUAL
19598: IFTRUE 19602
19600: GO 20180
19602: POP
// begin if GetClass ( i ) = 1 then
19603: LD_VAR 0 6
19607: PPUSH
19608: CALL_OW 257
19612: PUSH
19613: LD_INT 1
19615: EQUAL
19616: IFFALSE 19637
// points := [ 10 , 5 , 3 ] ;
19618: LD_ADDR_VAR 0 9
19622: PUSH
19623: LD_INT 10
19625: PUSH
19626: LD_INT 5
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19637: LD_VAR 0 6
19641: PPUSH
19642: CALL_OW 257
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: LD_INT 4
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: LIST
19660: IN
19661: IFFALSE 19682
// points := [ 3 , 2 , 1 ] ;
19663: LD_ADDR_VAR 0 9
19667: PUSH
19668: LD_INT 3
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19682: LD_VAR 0 6
19686: PPUSH
19687: CALL_OW 257
19691: PUSH
19692: LD_INT 5
19694: EQUAL
19695: IFFALSE 19716
// points := [ 130 , 5 , 2 ] ;
19697: LD_ADDR_VAR 0 9
19701: PUSH
19702: LD_INT 130
19704: PUSH
19705: LD_INT 5
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19716: LD_VAR 0 6
19720: PPUSH
19721: CALL_OW 257
19725: PUSH
19726: LD_INT 8
19728: EQUAL
19729: IFFALSE 19750
// points := [ 35 , 35 , 30 ] ;
19731: LD_ADDR_VAR 0 9
19735: PUSH
19736: LD_INT 35
19738: PUSH
19739: LD_INT 35
19741: PUSH
19742: LD_INT 30
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19750: LD_VAR 0 6
19754: PPUSH
19755: CALL_OW 257
19759: PUSH
19760: LD_INT 9
19762: EQUAL
19763: IFFALSE 19784
// points := [ 20 , 55 , 40 ] ;
19765: LD_ADDR_VAR 0 9
19769: PUSH
19770: LD_INT 20
19772: PUSH
19773: LD_INT 55
19775: PUSH
19776: LD_INT 40
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19784: LD_VAR 0 6
19788: PPUSH
19789: CALL_OW 257
19793: PUSH
19794: LD_INT 12
19796: PUSH
19797: LD_INT 16
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: IN
19804: IFFALSE 19825
// points := [ 5 , 3 , 2 ] ;
19806: LD_ADDR_VAR 0 9
19810: PUSH
19811: LD_INT 5
19813: PUSH
19814: LD_INT 3
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19825: LD_VAR 0 6
19829: PPUSH
19830: CALL_OW 257
19834: PUSH
19835: LD_INT 17
19837: EQUAL
19838: IFFALSE 19859
// points := [ 100 , 50 , 75 ] ;
19840: LD_ADDR_VAR 0 9
19844: PUSH
19845: LD_INT 100
19847: PUSH
19848: LD_INT 50
19850: PUSH
19851: LD_INT 75
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19859: LD_VAR 0 6
19863: PPUSH
19864: CALL_OW 257
19868: PUSH
19869: LD_INT 15
19871: EQUAL
19872: IFFALSE 19893
// points := [ 10 , 5 , 3 ] ;
19874: LD_ADDR_VAR 0 9
19878: PUSH
19879: LD_INT 10
19881: PUSH
19882: LD_INT 5
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19893: LD_VAR 0 6
19897: PPUSH
19898: CALL_OW 257
19902: PUSH
19903: LD_INT 14
19905: EQUAL
19906: IFFALSE 19927
// points := [ 10 , 0 , 0 ] ;
19908: LD_ADDR_VAR 0 9
19912: PUSH
19913: LD_INT 10
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19927: LD_VAR 0 6
19931: PPUSH
19932: CALL_OW 257
19936: PUSH
19937: LD_INT 11
19939: EQUAL
19940: IFFALSE 19961
// points := [ 30 , 10 , 5 ] ;
19942: LD_ADDR_VAR 0 9
19946: PUSH
19947: LD_INT 30
19949: PUSH
19950: LD_INT 10
19952: PUSH
19953: LD_INT 5
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19961: LD_VAR 0 1
19965: PPUSH
19966: LD_INT 5
19968: PPUSH
19969: CALL_OW 321
19973: PUSH
19974: LD_INT 2
19976: EQUAL
19977: IFFALSE 19994
// bpoints := bpoints * 1.8 ;
19979: LD_ADDR_VAR 0 10
19983: PUSH
19984: LD_VAR 0 10
19988: PUSH
19989: LD_REAL  1.80000000000000E+0000
19992: MUL
19993: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19994: LD_VAR 0 6
19998: PPUSH
19999: CALL_OW 257
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 3
20012: PUSH
20013: LD_INT 4
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: IN
20022: PUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: LD_INT 51
20030: PPUSH
20031: CALL_OW 321
20035: PUSH
20036: LD_INT 2
20038: EQUAL
20039: AND
20040: IFFALSE 20057
// bpoints := bpoints * 1.2 ;
20042: LD_ADDR_VAR 0 10
20046: PUSH
20047: LD_VAR 0 10
20051: PUSH
20052: LD_REAL  1.20000000000000E+0000
20055: MUL
20056: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20057: LD_VAR 0 6
20061: PPUSH
20062: CALL_OW 257
20066: PUSH
20067: LD_INT 5
20069: PUSH
20070: LD_INT 7
20072: PUSH
20073: LD_INT 9
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: LIST
20080: IN
20081: PUSH
20082: LD_VAR 0 1
20086: PPUSH
20087: LD_INT 52
20089: PPUSH
20090: CALL_OW 321
20094: PUSH
20095: LD_INT 2
20097: EQUAL
20098: AND
20099: IFFALSE 20116
// bpoints := bpoints * 1.5 ;
20101: LD_ADDR_VAR 0 10
20105: PUSH
20106: LD_VAR 0 10
20110: PUSH
20111: LD_REAL  1.50000000000000E+0000
20114: MUL
20115: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20116: LD_VAR 0 1
20120: PPUSH
20121: LD_INT 66
20123: PPUSH
20124: CALL_OW 321
20128: PUSH
20129: LD_INT 2
20131: EQUAL
20132: IFFALSE 20149
// bpoints := bpoints * 1.1 ;
20134: LD_ADDR_VAR 0 10
20138: PUSH
20139: LD_VAR 0 10
20143: PUSH
20144: LD_REAL  1.10000000000000E+0000
20147: MUL
20148: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20149: LD_ADDR_VAR 0 10
20153: PUSH
20154: LD_VAR 0 10
20158: PUSH
20159: LD_VAR 0 6
20163: PPUSH
20164: LD_INT 1
20166: PPUSH
20167: CALL_OW 259
20171: PUSH
20172: LD_REAL  1.15000000000000E+0000
20175: MUL
20176: MUL
20177: ST_TO_ADDR
// end ; unit_vehicle :
20178: GO 21002
20180: LD_INT 2
20182: DOUBLE
20183: EQUAL
20184: IFTRUE 20188
20186: GO 20990
20188: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20189: LD_VAR 0 6
20193: PPUSH
20194: CALL_OW 264
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 42
20204: PUSH
20205: LD_INT 24
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: IN
20213: IFFALSE 20234
// points := [ 25 , 5 , 3 ] ;
20215: LD_ADDR_VAR 0 9
20219: PUSH
20220: LD_INT 25
20222: PUSH
20223: LD_INT 5
20225: PUSH
20226: LD_INT 3
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: LIST
20233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20234: LD_VAR 0 6
20238: PPUSH
20239: CALL_OW 264
20243: PUSH
20244: LD_INT 4
20246: PUSH
20247: LD_INT 43
20249: PUSH
20250: LD_INT 25
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: IN
20258: IFFALSE 20279
// points := [ 40 , 15 , 5 ] ;
20260: LD_ADDR_VAR 0 9
20264: PUSH
20265: LD_INT 40
20267: PUSH
20268: LD_INT 15
20270: PUSH
20271: LD_INT 5
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20279: LD_VAR 0 6
20283: PPUSH
20284: CALL_OW 264
20288: PUSH
20289: LD_INT 3
20291: PUSH
20292: LD_INT 23
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: IN
20299: IFFALSE 20320
// points := [ 7 , 25 , 8 ] ;
20301: LD_ADDR_VAR 0 9
20305: PUSH
20306: LD_INT 7
20308: PUSH
20309: LD_INT 25
20311: PUSH
20312: LD_INT 8
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20320: LD_VAR 0 6
20324: PPUSH
20325: CALL_OW 264
20329: PUSH
20330: LD_INT 5
20332: PUSH
20333: LD_INT 27
20335: PUSH
20336: LD_INT 44
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: IN
20344: IFFALSE 20365
// points := [ 14 , 50 , 16 ] ;
20346: LD_ADDR_VAR 0 9
20350: PUSH
20351: LD_INT 14
20353: PUSH
20354: LD_INT 50
20356: PUSH
20357: LD_INT 16
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20365: LD_VAR 0 6
20369: PPUSH
20370: CALL_OW 264
20374: PUSH
20375: LD_INT 6
20377: PUSH
20378: LD_INT 46
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: IN
20385: IFFALSE 20406
// points := [ 32 , 120 , 70 ] ;
20387: LD_ADDR_VAR 0 9
20391: PUSH
20392: LD_INT 32
20394: PUSH
20395: LD_INT 120
20397: PUSH
20398: LD_INT 70
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: LIST
20405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20406: LD_VAR 0 6
20410: PPUSH
20411: CALL_OW 264
20415: PUSH
20416: LD_INT 7
20418: PUSH
20419: LD_INT 28
20421: PUSH
20422: LD_INT 45
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: IN
20430: IFFALSE 20451
// points := [ 35 , 20 , 45 ] ;
20432: LD_ADDR_VAR 0 9
20436: PUSH
20437: LD_INT 35
20439: PUSH
20440: LD_INT 20
20442: PUSH
20443: LD_INT 45
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20451: LD_VAR 0 6
20455: PPUSH
20456: CALL_OW 264
20460: PUSH
20461: LD_INT 47
20463: PUSH
20464: EMPTY
20465: LIST
20466: IN
20467: IFFALSE 20488
// points := [ 67 , 45 , 75 ] ;
20469: LD_ADDR_VAR 0 9
20473: PUSH
20474: LD_INT 67
20476: PUSH
20477: LD_INT 45
20479: PUSH
20480: LD_INT 75
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20488: LD_VAR 0 6
20492: PPUSH
20493: CALL_OW 264
20497: PUSH
20498: LD_INT 26
20500: PUSH
20501: EMPTY
20502: LIST
20503: IN
20504: IFFALSE 20525
// points := [ 120 , 30 , 80 ] ;
20506: LD_ADDR_VAR 0 9
20510: PUSH
20511: LD_INT 120
20513: PUSH
20514: LD_INT 30
20516: PUSH
20517: LD_INT 80
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20525: LD_VAR 0 6
20529: PPUSH
20530: CALL_OW 264
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: EMPTY
20539: LIST
20540: IN
20541: IFFALSE 20562
// points := [ 40 , 1 , 1 ] ;
20543: LD_ADDR_VAR 0 9
20547: PUSH
20548: LD_INT 40
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20562: LD_VAR 0 6
20566: PPUSH
20567: CALL_OW 264
20571: PUSH
20572: LD_INT 29
20574: PUSH
20575: EMPTY
20576: LIST
20577: IN
20578: IFFALSE 20599
// points := [ 70 , 200 , 400 ] ;
20580: LD_ADDR_VAR 0 9
20584: PUSH
20585: LD_INT 70
20587: PUSH
20588: LD_INT 200
20590: PUSH
20591: LD_INT 400
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20599: LD_VAR 0 6
20603: PPUSH
20604: CALL_OW 264
20608: PUSH
20609: LD_INT 14
20611: PUSH
20612: LD_INT 53
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: IN
20619: IFFALSE 20640
// points := [ 40 , 10 , 20 ] ;
20621: LD_ADDR_VAR 0 9
20625: PUSH
20626: LD_INT 40
20628: PUSH
20629: LD_INT 10
20631: PUSH
20632: LD_INT 20
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20640: LD_VAR 0 6
20644: PPUSH
20645: CALL_OW 264
20649: PUSH
20650: LD_INT 9
20652: PUSH
20653: EMPTY
20654: LIST
20655: IN
20656: IFFALSE 20677
// points := [ 5 , 70 , 20 ] ;
20658: LD_ADDR_VAR 0 9
20662: PUSH
20663: LD_INT 5
20665: PUSH
20666: LD_INT 70
20668: PUSH
20669: LD_INT 20
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20677: LD_VAR 0 6
20681: PPUSH
20682: CALL_OW 264
20686: PUSH
20687: LD_INT 10
20689: PUSH
20690: EMPTY
20691: LIST
20692: IN
20693: IFFALSE 20714
// points := [ 35 , 110 , 70 ] ;
20695: LD_ADDR_VAR 0 9
20699: PUSH
20700: LD_INT 35
20702: PUSH
20703: LD_INT 110
20705: PUSH
20706: LD_INT 70
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: LIST
20713: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20714: LD_VAR 0 6
20718: PPUSH
20719: CALL_OW 265
20723: PUSH
20724: LD_INT 25
20726: EQUAL
20727: IFFALSE 20748
// points := [ 80 , 65 , 100 ] ;
20729: LD_ADDR_VAR 0 9
20733: PUSH
20734: LD_INT 80
20736: PUSH
20737: LD_INT 65
20739: PUSH
20740: LD_INT 100
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20748: LD_VAR 0 6
20752: PPUSH
20753: CALL_OW 263
20757: PUSH
20758: LD_INT 1
20760: EQUAL
20761: IFFALSE 20796
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20763: LD_ADDR_VAR 0 10
20767: PUSH
20768: LD_VAR 0 10
20772: PUSH
20773: LD_VAR 0 6
20777: PPUSH
20778: CALL_OW 311
20782: PPUSH
20783: LD_INT 3
20785: PPUSH
20786: CALL_OW 259
20790: PUSH
20791: LD_INT 4
20793: MUL
20794: MUL
20795: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20796: LD_VAR 0 6
20800: PPUSH
20801: CALL_OW 263
20805: PUSH
20806: LD_INT 2
20808: EQUAL
20809: IFFALSE 20860
// begin j := IsControledBy ( i ) ;
20811: LD_ADDR_VAR 0 7
20815: PUSH
20816: LD_VAR 0 6
20820: PPUSH
20821: CALL_OW 312
20825: ST_TO_ADDR
// if j then
20826: LD_VAR 0 7
20830: IFFALSE 20860
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20832: LD_ADDR_VAR 0 10
20836: PUSH
20837: LD_VAR 0 10
20841: PUSH
20842: LD_VAR 0 7
20846: PPUSH
20847: LD_INT 3
20849: PPUSH
20850: CALL_OW 259
20854: PUSH
20855: LD_INT 3
20857: MUL
20858: MUL
20859: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20860: LD_VAR 0 6
20864: PPUSH
20865: CALL_OW 264
20869: PUSH
20870: LD_INT 5
20872: PUSH
20873: LD_INT 6
20875: PUSH
20876: LD_INT 46
20878: PUSH
20879: LD_INT 44
20881: PUSH
20882: LD_INT 47
20884: PUSH
20885: LD_INT 45
20887: PUSH
20888: LD_INT 28
20890: PUSH
20891: LD_INT 7
20893: PUSH
20894: LD_INT 27
20896: PUSH
20897: LD_INT 29
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: IN
20912: PUSH
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_INT 52
20920: PPUSH
20921: CALL_OW 321
20925: PUSH
20926: LD_INT 2
20928: EQUAL
20929: AND
20930: IFFALSE 20947
// bpoints := bpoints * 1.2 ;
20932: LD_ADDR_VAR 0 10
20936: PUSH
20937: LD_VAR 0 10
20941: PUSH
20942: LD_REAL  1.20000000000000E+0000
20945: MUL
20946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20947: LD_VAR 0 6
20951: PPUSH
20952: CALL_OW 264
20956: PUSH
20957: LD_INT 6
20959: PUSH
20960: LD_INT 46
20962: PUSH
20963: LD_INT 47
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: LIST
20970: IN
20971: IFFALSE 20988
// bpoints := bpoints * 1.2 ;
20973: LD_ADDR_VAR 0 10
20977: PUSH
20978: LD_VAR 0 10
20982: PUSH
20983: LD_REAL  1.20000000000000E+0000
20986: MUL
20987: ST_TO_ADDR
// end ; unit_building :
20988: GO 21002
20990: LD_INT 3
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21001
20998: POP
// ; end ;
20999: GO 21002
21001: POP
// for j = 1 to 3 do
21002: LD_ADDR_VAR 0 7
21006: PUSH
21007: DOUBLE
21008: LD_INT 1
21010: DEC
21011: ST_TO_ADDR
21012: LD_INT 3
21014: PUSH
21015: FOR_TO
21016: IFFALSE 21069
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21018: LD_ADDR_VAR 0 5
21022: PUSH
21023: LD_VAR 0 5
21027: PPUSH
21028: LD_VAR 0 7
21032: PPUSH
21033: LD_VAR 0 5
21037: PUSH
21038: LD_VAR 0 7
21042: ARRAY
21043: PUSH
21044: LD_VAR 0 9
21048: PUSH
21049: LD_VAR 0 7
21053: ARRAY
21054: PUSH
21055: LD_VAR 0 10
21059: MUL
21060: PLUS
21061: PPUSH
21062: CALL_OW 1
21066: ST_TO_ADDR
21067: GO 21015
21069: POP
21070: POP
// end ;
21071: GO 19554
21073: POP
21074: POP
// result := Replace ( result , 4 , tmp ) ;
21075: LD_ADDR_VAR 0 5
21079: PUSH
21080: LD_VAR 0 5
21084: PPUSH
21085: LD_INT 4
21087: PPUSH
21088: LD_VAR 0 8
21092: PPUSH
21093: CALL_OW 1
21097: ST_TO_ADDR
// end ;
21098: LD_VAR 0 5
21102: RET
// export function DangerAtRange ( unit , range ) ; begin
21103: LD_INT 0
21105: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21106: LD_ADDR_VAR 0 3
21110: PUSH
21111: LD_VAR 0 1
21115: PPUSH
21116: CALL_OW 255
21120: PPUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 250
21130: PPUSH
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 251
21140: PPUSH
21141: LD_VAR 0 2
21145: PPUSH
21146: CALL 19406 0 4
21150: ST_TO_ADDR
// end ;
21151: LD_VAR 0 3
21155: RET
// export function DangerInArea ( side , area ) ; begin
21156: LD_INT 0
21158: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_VAR 0 2
21168: PPUSH
21169: LD_INT 81
21171: PUSH
21172: LD_VAR 0 1
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PPUSH
21181: CALL_OW 70
21185: ST_TO_ADDR
// end ;
21186: LD_VAR 0 3
21190: RET
// export function IsExtension ( b ) ; begin
21191: LD_INT 0
21193: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21194: LD_ADDR_VAR 0 2
21198: PUSH
21199: LD_VAR 0 1
21203: PUSH
21204: LD_INT 23
21206: PUSH
21207: LD_INT 20
21209: PUSH
21210: LD_INT 22
21212: PUSH
21213: LD_INT 17
21215: PUSH
21216: LD_INT 24
21218: PUSH
21219: LD_INT 21
21221: PUSH
21222: LD_INT 19
21224: PUSH
21225: LD_INT 16
21227: PUSH
21228: LD_INT 25
21230: PUSH
21231: LD_INT 18
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: IN
21246: ST_TO_ADDR
// end ;
21247: LD_VAR 0 2
21251: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21252: LD_INT 0
21254: PPUSH
21255: PPUSH
21256: PPUSH
// result := [ ] ;
21257: LD_ADDR_VAR 0 3
21261: PUSH
21262: EMPTY
21263: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21264: LD_ADDR_VAR 0 4
21268: PUSH
21269: LD_VAR 0 2
21273: PPUSH
21274: LD_INT 21
21276: PUSH
21277: LD_INT 3
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 70
21288: ST_TO_ADDR
// if not tmp then
21289: LD_VAR 0 4
21293: NOT
21294: IFFALSE 21298
// exit ;
21296: GO 21356
// for i in tmp do
21298: LD_ADDR_VAR 0 5
21302: PUSH
21303: LD_VAR 0 4
21307: PUSH
21308: FOR_IN
21309: IFFALSE 21344
// if GetBase ( i ) <> base then
21311: LD_VAR 0 5
21315: PPUSH
21316: CALL_OW 274
21320: PUSH
21321: LD_VAR 0 1
21325: NONEQUAL
21326: IFFALSE 21342
// ComLinkToBase ( base , i ) ;
21328: LD_VAR 0 1
21332: PPUSH
21333: LD_VAR 0 5
21337: PPUSH
21338: CALL_OW 169
21342: GO 21308
21344: POP
21345: POP
// result := tmp ;
21346: LD_ADDR_VAR 0 3
21350: PUSH
21351: LD_VAR 0 4
21355: ST_TO_ADDR
// end ;
21356: LD_VAR 0 3
21360: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21361: LD_INT 0
21363: PPUSH
21364: PPUSH
// if BuildingStatus ( b ) = bs_build then
21365: LD_VAR 0 2
21369: PPUSH
21370: CALL_OW 461
21374: PUSH
21375: LD_INT 1
21377: EQUAL
21378: IFFALSE 21438
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21380: LD_VAR 0 1
21384: PPUSH
21385: LD_STRING h
21387: PUSH
21388: LD_VAR 0 2
21392: PPUSH
21393: CALL_OW 250
21397: PUSH
21398: LD_VAR 0 2
21402: PPUSH
21403: CALL_OW 251
21407: PUSH
21408: LD_VAR 0 2
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: PPUSH
21434: CALL_OW 446
// end ;
21438: LD_VAR 0 3
21442: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21443: LD_INT 0
21445: PPUSH
21446: PPUSH
21447: PPUSH
21448: PPUSH
21449: PPUSH
21450: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21451: LD_VAR 0 1
21455: NOT
21456: PUSH
21457: LD_VAR 0 1
21461: PPUSH
21462: CALL_OW 263
21466: PUSH
21467: LD_INT 2
21469: EQUAL
21470: NOT
21471: OR
21472: IFFALSE 21476
// exit ;
21474: GO 21792
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21476: LD_ADDR_VAR 0 6
21480: PUSH
21481: LD_INT 22
21483: PUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 255
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 30
21503: PUSH
21504: LD_INT 36
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 34
21513: PUSH
21514: LD_INT 31
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PPUSH
21530: CALL_OW 69
21534: ST_TO_ADDR
// if not tmp then
21535: LD_VAR 0 6
21539: NOT
21540: IFFALSE 21544
// exit ;
21542: GO 21792
// result := [ ] ;
21544: LD_ADDR_VAR 0 2
21548: PUSH
21549: EMPTY
21550: ST_TO_ADDR
// for i in tmp do
21551: LD_ADDR_VAR 0 3
21555: PUSH
21556: LD_VAR 0 6
21560: PUSH
21561: FOR_IN
21562: IFFALSE 21633
// begin t := UnitsInside ( i ) ;
21564: LD_ADDR_VAR 0 4
21568: PUSH
21569: LD_VAR 0 3
21573: PPUSH
21574: CALL_OW 313
21578: ST_TO_ADDR
// if t then
21579: LD_VAR 0 4
21583: IFFALSE 21631
// for j in t do
21585: LD_ADDR_VAR 0 7
21589: PUSH
21590: LD_VAR 0 4
21594: PUSH
21595: FOR_IN
21596: IFFALSE 21629
// result := Insert ( result , result + 1 , j ) ;
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_VAR 0 2
21607: PPUSH
21608: LD_VAR 0 2
21612: PUSH
21613: LD_INT 1
21615: PLUS
21616: PPUSH
21617: LD_VAR 0 7
21621: PPUSH
21622: CALL_OW 2
21626: ST_TO_ADDR
21627: GO 21595
21629: POP
21630: POP
// end ;
21631: GO 21561
21633: POP
21634: POP
// if not result then
21635: LD_VAR 0 2
21639: NOT
21640: IFFALSE 21644
// exit ;
21642: GO 21792
// mech := result [ 1 ] ;
21644: LD_ADDR_VAR 0 5
21648: PUSH
21649: LD_VAR 0 2
21653: PUSH
21654: LD_INT 1
21656: ARRAY
21657: ST_TO_ADDR
// if result > 1 then
21658: LD_VAR 0 2
21662: PUSH
21663: LD_INT 1
21665: GREATER
21666: IFFALSE 21778
// for i = 2 to result do
21668: LD_ADDR_VAR 0 3
21672: PUSH
21673: DOUBLE
21674: LD_INT 2
21676: DEC
21677: ST_TO_ADDR
21678: LD_VAR 0 2
21682: PUSH
21683: FOR_TO
21684: IFFALSE 21776
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21686: LD_ADDR_VAR 0 4
21690: PUSH
21691: LD_VAR 0 2
21695: PUSH
21696: LD_VAR 0 3
21700: ARRAY
21701: PPUSH
21702: LD_INT 3
21704: PPUSH
21705: CALL_OW 259
21709: PUSH
21710: LD_VAR 0 2
21714: PUSH
21715: LD_VAR 0 3
21719: ARRAY
21720: PPUSH
21721: CALL_OW 432
21725: MINUS
21726: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21727: LD_VAR 0 4
21731: PUSH
21732: LD_VAR 0 5
21736: PPUSH
21737: LD_INT 3
21739: PPUSH
21740: CALL_OW 259
21744: PUSH
21745: LD_VAR 0 5
21749: PPUSH
21750: CALL_OW 432
21754: MINUS
21755: GREATEREQUAL
21756: IFFALSE 21774
// mech := result [ i ] ;
21758: LD_ADDR_VAR 0 5
21762: PUSH
21763: LD_VAR 0 2
21767: PUSH
21768: LD_VAR 0 3
21772: ARRAY
21773: ST_TO_ADDR
// end ;
21774: GO 21683
21776: POP
21777: POP
// ComLinkTo ( vehicle , mech ) ;
21778: LD_VAR 0 1
21782: PPUSH
21783: LD_VAR 0 5
21787: PPUSH
21788: CALL_OW 135
// end ;
21792: LD_VAR 0 2
21796: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21797: LD_INT 0
21799: PPUSH
21800: PPUSH
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
// result := [ ] ;
21812: LD_ADDR_VAR 0 7
21816: PUSH
21817: EMPTY
21818: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21819: LD_VAR 0 1
21823: PPUSH
21824: CALL_OW 266
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: IN
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 23475
// if name then
21844: LD_VAR 0 3
21848: IFFALSE 21864
// SetBName ( base_dep , name ) ;
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_VAR 0 3
21859: PPUSH
21860: CALL_OW 500
// base := GetBase ( base_dep ) ;
21864: LD_ADDR_VAR 0 15
21868: PUSH
21869: LD_VAR 0 1
21873: PPUSH
21874: CALL_OW 274
21878: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21879: LD_ADDR_VAR 0 16
21883: PUSH
21884: LD_VAR 0 1
21888: PPUSH
21889: CALL_OW 255
21893: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21894: LD_ADDR_VAR 0 17
21898: PUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 248
21908: ST_TO_ADDR
// if sources then
21909: LD_VAR 0 5
21913: IFFALSE 21960
// for i = 1 to 3 do
21915: LD_ADDR_VAR 0 8
21919: PUSH
21920: DOUBLE
21921: LD_INT 1
21923: DEC
21924: ST_TO_ADDR
21925: LD_INT 3
21927: PUSH
21928: FOR_TO
21929: IFFALSE 21958
// AddResourceType ( base , i , sources [ i ] ) ;
21931: LD_VAR 0 15
21935: PPUSH
21936: LD_VAR 0 8
21940: PPUSH
21941: LD_VAR 0 5
21945: PUSH
21946: LD_VAR 0 8
21950: ARRAY
21951: PPUSH
21952: CALL_OW 276
21956: GO 21928
21958: POP
21959: POP
// buildings := GetBaseBuildings ( base , area ) ;
21960: LD_ADDR_VAR 0 18
21964: PUSH
21965: LD_VAR 0 15
21969: PPUSH
21970: LD_VAR 0 2
21974: PPUSH
21975: CALL 21252 0 2
21979: ST_TO_ADDR
// InitHc ;
21980: CALL_OW 19
// InitUc ;
21984: CALL_OW 18
// uc_side := side ;
21988: LD_ADDR_OWVAR 20
21992: PUSH
21993: LD_VAR 0 16
21997: ST_TO_ADDR
// uc_nation := nation ;
21998: LD_ADDR_OWVAR 21
22002: PUSH
22003: LD_VAR 0 17
22007: ST_TO_ADDR
// if buildings then
22008: LD_VAR 0 18
22012: IFFALSE 23334
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22014: LD_ADDR_VAR 0 19
22018: PUSH
22019: LD_VAR 0 18
22023: PPUSH
22024: LD_INT 2
22026: PUSH
22027: LD_INT 30
22029: PUSH
22030: LD_INT 29
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 30
22039: PUSH
22040: LD_INT 30
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: PPUSH
22052: CALL_OW 72
22056: ST_TO_ADDR
// if tmp then
22057: LD_VAR 0 19
22061: IFFALSE 22109
// for i in tmp do
22063: LD_ADDR_VAR 0 8
22067: PUSH
22068: LD_VAR 0 19
22072: PUSH
22073: FOR_IN
22074: IFFALSE 22107
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22076: LD_VAR 0 8
22080: PPUSH
22081: CALL_OW 250
22085: PPUSH
22086: LD_VAR 0 8
22090: PPUSH
22091: CALL_OW 251
22095: PPUSH
22096: LD_VAR 0 16
22100: PPUSH
22101: CALL_OW 441
22105: GO 22073
22107: POP
22108: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22109: LD_VAR 0 18
22113: PPUSH
22114: LD_INT 2
22116: PUSH
22117: LD_INT 30
22119: PUSH
22120: LD_INT 32
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 30
22129: PUSH
22130: LD_INT 33
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: PPUSH
22142: CALL_OW 72
22146: IFFALSE 22234
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22148: LD_ADDR_VAR 0 8
22152: PUSH
22153: LD_VAR 0 18
22157: PPUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 30
22163: PUSH
22164: LD_INT 32
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 30
22173: PUSH
22174: LD_INT 33
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: PPUSH
22186: CALL_OW 72
22190: PUSH
22191: FOR_IN
22192: IFFALSE 22232
// begin if not GetBWeapon ( i ) then
22194: LD_VAR 0 8
22198: PPUSH
22199: CALL_OW 269
22203: NOT
22204: IFFALSE 22230
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22206: LD_VAR 0 8
22210: PPUSH
22211: LD_VAR 0 8
22215: PPUSH
22216: LD_VAR 0 2
22220: PPUSH
22221: CALL 23480 0 2
22225: PPUSH
22226: CALL_OW 431
// end ;
22230: GO 22191
22232: POP
22233: POP
// end ; for i = 1 to personel do
22234: LD_ADDR_VAR 0 8
22238: PUSH
22239: DOUBLE
22240: LD_INT 1
22242: DEC
22243: ST_TO_ADDR
22244: LD_VAR 0 6
22248: PUSH
22249: FOR_TO
22250: IFFALSE 23314
// begin if i > 4 then
22252: LD_VAR 0 8
22256: PUSH
22257: LD_INT 4
22259: GREATER
22260: IFFALSE 22264
// break ;
22262: GO 23314
// case i of 1 :
22264: LD_VAR 0 8
22268: PUSH
22269: LD_INT 1
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22357
22277: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22278: LD_ADDR_VAR 0 12
22282: PUSH
22283: LD_VAR 0 18
22287: PPUSH
22288: LD_INT 22
22290: PUSH
22291: LD_VAR 0 16
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 58
22302: PUSH
22303: EMPTY
22304: LIST
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: LD_INT 30
22311: PUSH
22312: LD_INT 32
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 4
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 30
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: PPUSH
22350: CALL_OW 72
22354: ST_TO_ADDR
22355: GO 22579
22357: LD_INT 2
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22427
22365: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22366: LD_ADDR_VAR 0 12
22370: PUSH
22371: LD_VAR 0 18
22375: PPUSH
22376: LD_INT 22
22378: PUSH
22379: LD_VAR 0 16
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 30
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PPUSH
22420: CALL_OW 72
22424: ST_TO_ADDR
22425: GO 22579
22427: LD_INT 3
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22497
22435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22436: LD_ADDR_VAR 0 12
22440: PUSH
22441: LD_VAR 0 18
22445: PPUSH
22446: LD_INT 22
22448: PUSH
22449: LD_VAR 0 16
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 30
22473: PUSH
22474: LD_INT 3
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PPUSH
22490: CALL_OW 72
22494: ST_TO_ADDR
22495: GO 22579
22497: LD_INT 4
22499: DOUBLE
22500: EQUAL
22501: IFTRUE 22505
22503: GO 22578
22505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22506: LD_ADDR_VAR 0 12
22510: PUSH
22511: LD_VAR 0 18
22515: PPUSH
22516: LD_INT 22
22518: PUSH
22519: LD_VAR 0 16
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: LD_INT 30
22533: PUSH
22534: LD_INT 6
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 7
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 30
22553: PUSH
22554: LD_INT 8
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 72
22575: ST_TO_ADDR
22576: GO 22579
22578: POP
// if i = 1 then
22579: LD_VAR 0 8
22583: PUSH
22584: LD_INT 1
22586: EQUAL
22587: IFFALSE 22698
// begin tmp := [ ] ;
22589: LD_ADDR_VAR 0 19
22593: PUSH
22594: EMPTY
22595: ST_TO_ADDR
// for j in f do
22596: LD_ADDR_VAR 0 9
22600: PUSH
22601: LD_VAR 0 12
22605: PUSH
22606: FOR_IN
22607: IFFALSE 22680
// if GetBType ( j ) = b_bunker then
22609: LD_VAR 0 9
22613: PPUSH
22614: CALL_OW 266
22618: PUSH
22619: LD_INT 32
22621: EQUAL
22622: IFFALSE 22649
// tmp := Insert ( tmp , 1 , j ) else
22624: LD_ADDR_VAR 0 19
22628: PUSH
22629: LD_VAR 0 19
22633: PPUSH
22634: LD_INT 1
22636: PPUSH
22637: LD_VAR 0 9
22641: PPUSH
22642: CALL_OW 2
22646: ST_TO_ADDR
22647: GO 22678
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22649: LD_ADDR_VAR 0 19
22653: PUSH
22654: LD_VAR 0 19
22658: PPUSH
22659: LD_VAR 0 19
22663: PUSH
22664: LD_INT 1
22666: PLUS
22667: PPUSH
22668: LD_VAR 0 9
22672: PPUSH
22673: CALL_OW 2
22677: ST_TO_ADDR
22678: GO 22606
22680: POP
22681: POP
// if tmp then
22682: LD_VAR 0 19
22686: IFFALSE 22698
// f := tmp ;
22688: LD_ADDR_VAR 0 12
22692: PUSH
22693: LD_VAR 0 19
22697: ST_TO_ADDR
// end ; x := personel [ i ] ;
22698: LD_ADDR_VAR 0 13
22702: PUSH
22703: LD_VAR 0 6
22707: PUSH
22708: LD_VAR 0 8
22712: ARRAY
22713: ST_TO_ADDR
// if x = - 1 then
22714: LD_VAR 0 13
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: EQUAL
22723: IFFALSE 22932
// begin for j in f do
22725: LD_ADDR_VAR 0 9
22729: PUSH
22730: LD_VAR 0 12
22734: PUSH
22735: FOR_IN
22736: IFFALSE 22928
// repeat InitHc ;
22738: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22742: LD_VAR 0 9
22746: PPUSH
22747: CALL_OW 266
22751: PUSH
22752: LD_INT 5
22754: EQUAL
22755: IFFALSE 22825
// begin if UnitsInside ( j ) < 3 then
22757: LD_VAR 0 9
22761: PPUSH
22762: CALL_OW 313
22766: PUSH
22767: LD_INT 3
22769: LESS
22770: IFFALSE 22806
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22772: LD_INT 0
22774: PPUSH
22775: LD_INT 5
22777: PUSH
22778: LD_INT 8
22780: PUSH
22781: LD_INT 9
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: PUSH
22789: LD_VAR 0 17
22793: ARRAY
22794: PPUSH
22795: LD_VAR 0 4
22799: PPUSH
22800: CALL_OW 380
22804: GO 22823
// PrepareHuman ( false , i , skill ) ;
22806: LD_INT 0
22808: PPUSH
22809: LD_VAR 0 8
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: CALL_OW 380
// end else
22823: GO 22842
// PrepareHuman ( false , i , skill ) ;
22825: LD_INT 0
22827: PPUSH
22828: LD_VAR 0 8
22832: PPUSH
22833: LD_VAR 0 4
22837: PPUSH
22838: CALL_OW 380
// un := CreateHuman ;
22842: LD_ADDR_VAR 0 14
22846: PUSH
22847: CALL_OW 44
22851: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22852: LD_ADDR_VAR 0 7
22856: PUSH
22857: LD_VAR 0 7
22861: PPUSH
22862: LD_INT 1
22864: PPUSH
22865: LD_VAR 0 14
22869: PPUSH
22870: CALL_OW 2
22874: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22875: LD_VAR 0 14
22879: PPUSH
22880: LD_VAR 0 9
22884: PPUSH
22885: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22889: LD_VAR 0 9
22893: PPUSH
22894: CALL_OW 313
22898: PUSH
22899: LD_INT 6
22901: EQUAL
22902: PUSH
22903: LD_VAR 0 9
22907: PPUSH
22908: CALL_OW 266
22912: PUSH
22913: LD_INT 32
22915: PUSH
22916: LD_INT 31
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: IN
22923: OR
22924: IFFALSE 22738
22926: GO 22735
22928: POP
22929: POP
// end else
22930: GO 23312
// for j = 1 to x do
22932: LD_ADDR_VAR 0 9
22936: PUSH
22937: DOUBLE
22938: LD_INT 1
22940: DEC
22941: ST_TO_ADDR
22942: LD_VAR 0 13
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23310
// begin InitHc ;
22950: CALL_OW 19
// if not f then
22954: LD_VAR 0 12
22958: NOT
22959: IFFALSE 23048
// begin PrepareHuman ( false , i , skill ) ;
22961: LD_INT 0
22963: PPUSH
22964: LD_VAR 0 8
22968: PPUSH
22969: LD_VAR 0 4
22973: PPUSH
22974: CALL_OW 380
// un := CreateHuman ;
22978: LD_ADDR_VAR 0 14
22982: PUSH
22983: CALL_OW 44
22987: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22988: LD_ADDR_VAR 0 7
22992: PUSH
22993: LD_VAR 0 7
22997: PPUSH
22998: LD_INT 1
23000: PPUSH
23001: LD_VAR 0 14
23005: PPUSH
23006: CALL_OW 2
23010: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23011: LD_VAR 0 14
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 250
23025: PPUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 251
23035: PPUSH
23036: LD_INT 10
23038: PPUSH
23039: LD_INT 0
23041: PPUSH
23042: CALL_OW 50
// continue ;
23046: GO 22947
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23048: LD_VAR 0 12
23052: PUSH
23053: LD_INT 1
23055: ARRAY
23056: PPUSH
23057: CALL_OW 313
23061: PUSH
23062: LD_VAR 0 12
23066: PUSH
23067: LD_INT 1
23069: ARRAY
23070: PPUSH
23071: CALL_OW 266
23075: PUSH
23076: LD_INT 32
23078: PUSH
23079: LD_INT 31
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: IN
23086: AND
23087: PUSH
23088: LD_VAR 0 12
23092: PUSH
23093: LD_INT 1
23095: ARRAY
23096: PPUSH
23097: CALL_OW 313
23101: PUSH
23102: LD_INT 6
23104: EQUAL
23105: OR
23106: IFFALSE 23126
// f := Delete ( f , 1 ) ;
23108: LD_ADDR_VAR 0 12
23112: PUSH
23113: LD_VAR 0 12
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 3
23125: ST_TO_ADDR
// if not f then
23126: LD_VAR 0 12
23130: NOT
23131: IFFALSE 23149
// begin x := x + 2 ;
23133: LD_ADDR_VAR 0 13
23137: PUSH
23138: LD_VAR 0 13
23142: PUSH
23143: LD_INT 2
23145: PLUS
23146: ST_TO_ADDR
// continue ;
23147: GO 22947
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23149: LD_VAR 0 12
23153: PUSH
23154: LD_INT 1
23156: ARRAY
23157: PPUSH
23158: CALL_OW 266
23162: PUSH
23163: LD_INT 5
23165: EQUAL
23166: IFFALSE 23240
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23168: LD_VAR 0 12
23172: PUSH
23173: LD_INT 1
23175: ARRAY
23176: PPUSH
23177: CALL_OW 313
23181: PUSH
23182: LD_INT 3
23184: LESS
23185: IFFALSE 23221
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23187: LD_INT 0
23189: PPUSH
23190: LD_INT 5
23192: PUSH
23193: LD_INT 8
23195: PUSH
23196: LD_INT 9
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: PUSH
23204: LD_VAR 0 17
23208: ARRAY
23209: PPUSH
23210: LD_VAR 0 4
23214: PPUSH
23215: CALL_OW 380
23219: GO 23238
// PrepareHuman ( false , i , skill ) ;
23221: LD_INT 0
23223: PPUSH
23224: LD_VAR 0 8
23228: PPUSH
23229: LD_VAR 0 4
23233: PPUSH
23234: CALL_OW 380
// end else
23238: GO 23257
// PrepareHuman ( false , i , skill ) ;
23240: LD_INT 0
23242: PPUSH
23243: LD_VAR 0 8
23247: PPUSH
23248: LD_VAR 0 4
23252: PPUSH
23253: CALL_OW 380
// un := CreateHuman ;
23257: LD_ADDR_VAR 0 14
23261: PUSH
23262: CALL_OW 44
23266: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23267: LD_ADDR_VAR 0 7
23271: PUSH
23272: LD_VAR 0 7
23276: PPUSH
23277: LD_INT 1
23279: PPUSH
23280: LD_VAR 0 14
23284: PPUSH
23285: CALL_OW 2
23289: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23290: LD_VAR 0 14
23294: PPUSH
23295: LD_VAR 0 12
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: PPUSH
23304: CALL_OW 52
// end ;
23308: GO 22947
23310: POP
23311: POP
// end ;
23312: GO 22249
23314: POP
23315: POP
// result := result ^ buildings ;
23316: LD_ADDR_VAR 0 7
23320: PUSH
23321: LD_VAR 0 7
23325: PUSH
23326: LD_VAR 0 18
23330: ADD
23331: ST_TO_ADDR
// end else
23332: GO 23475
// begin for i = 1 to personel do
23334: LD_ADDR_VAR 0 8
23338: PUSH
23339: DOUBLE
23340: LD_INT 1
23342: DEC
23343: ST_TO_ADDR
23344: LD_VAR 0 6
23348: PUSH
23349: FOR_TO
23350: IFFALSE 23473
// begin if i > 4 then
23352: LD_VAR 0 8
23356: PUSH
23357: LD_INT 4
23359: GREATER
23360: IFFALSE 23364
// break ;
23362: GO 23473
// x := personel [ i ] ;
23364: LD_ADDR_VAR 0 13
23368: PUSH
23369: LD_VAR 0 6
23373: PUSH
23374: LD_VAR 0 8
23378: ARRAY
23379: ST_TO_ADDR
// if x = - 1 then
23380: LD_VAR 0 13
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: EQUAL
23389: IFFALSE 23393
// continue ;
23391: GO 23349
// PrepareHuman ( false , i , skill ) ;
23393: LD_INT 0
23395: PPUSH
23396: LD_VAR 0 8
23400: PPUSH
23401: LD_VAR 0 4
23405: PPUSH
23406: CALL_OW 380
// un := CreateHuman ;
23410: LD_ADDR_VAR 0 14
23414: PUSH
23415: CALL_OW 44
23419: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23420: LD_VAR 0 14
23424: PPUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 250
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 251
23444: PPUSH
23445: LD_INT 10
23447: PPUSH
23448: LD_INT 0
23450: PPUSH
23451: CALL_OW 50
// result := result ^ un ;
23455: LD_ADDR_VAR 0 7
23459: PUSH
23460: LD_VAR 0 7
23464: PUSH
23465: LD_VAR 0 14
23469: ADD
23470: ST_TO_ADDR
// end ;
23471: GO 23349
23473: POP
23474: POP
// end ; end ;
23475: LD_VAR 0 7
23479: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23480: LD_INT 0
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
// result := false ;
23498: LD_ADDR_VAR 0 3
23502: PUSH
23503: LD_INT 0
23505: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23506: LD_VAR 0 1
23510: NOT
23511: PUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 266
23521: PUSH
23522: LD_INT 32
23524: PUSH
23525: LD_INT 33
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: IN
23532: NOT
23533: OR
23534: IFFALSE 23538
// exit ;
23536: GO 24674
// nat := GetNation ( tower ) ;
23538: LD_ADDR_VAR 0 12
23542: PUSH
23543: LD_VAR 0 1
23547: PPUSH
23548: CALL_OW 248
23552: ST_TO_ADDR
// side := GetSide ( tower ) ;
23553: LD_ADDR_VAR 0 16
23557: PUSH
23558: LD_VAR 0 1
23562: PPUSH
23563: CALL_OW 255
23567: ST_TO_ADDR
// x := GetX ( tower ) ;
23568: LD_ADDR_VAR 0 10
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 250
23582: ST_TO_ADDR
// y := GetY ( tower ) ;
23583: LD_ADDR_VAR 0 11
23587: PUSH
23588: LD_VAR 0 1
23592: PPUSH
23593: CALL_OW 251
23597: ST_TO_ADDR
// if not x or not y then
23598: LD_VAR 0 10
23602: NOT
23603: PUSH
23604: LD_VAR 0 11
23608: NOT
23609: OR
23610: IFFALSE 23614
// exit ;
23612: GO 24674
// weapon := 0 ;
23614: LD_ADDR_VAR 0 18
23618: PUSH
23619: LD_INT 0
23621: ST_TO_ADDR
// fac_list := [ ] ;
23622: LD_ADDR_VAR 0 17
23626: PUSH
23627: EMPTY
23628: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23629: LD_ADDR_VAR 0 6
23633: PUSH
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 274
23643: PPUSH
23644: LD_VAR 0 2
23648: PPUSH
23649: CALL 21252 0 2
23653: PPUSH
23654: LD_INT 30
23656: PUSH
23657: LD_INT 3
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PPUSH
23664: CALL_OW 72
23668: ST_TO_ADDR
// if not factories then
23669: LD_VAR 0 6
23673: NOT
23674: IFFALSE 23678
// exit ;
23676: GO 24674
// for i in factories do
23678: LD_ADDR_VAR 0 8
23682: PUSH
23683: LD_VAR 0 6
23687: PUSH
23688: FOR_IN
23689: IFFALSE 23714
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23691: LD_ADDR_VAR 0 17
23695: PUSH
23696: LD_VAR 0 17
23700: PUSH
23701: LD_VAR 0 8
23705: PPUSH
23706: CALL_OW 478
23710: UNION
23711: ST_TO_ADDR
23712: GO 23688
23714: POP
23715: POP
// if not fac_list then
23716: LD_VAR 0 17
23720: NOT
23721: IFFALSE 23725
// exit ;
23723: GO 24674
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23725: LD_ADDR_VAR 0 5
23729: PUSH
23730: LD_INT 4
23732: PUSH
23733: LD_INT 5
23735: PUSH
23736: LD_INT 9
23738: PUSH
23739: LD_INT 10
23741: PUSH
23742: LD_INT 6
23744: PUSH
23745: LD_INT 7
23747: PUSH
23748: LD_INT 11
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 27
23762: PUSH
23763: LD_INT 28
23765: PUSH
23766: LD_INT 26
23768: PUSH
23769: LD_INT 30
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 43
23780: PUSH
23781: LD_INT 44
23783: PUSH
23784: LD_INT 46
23786: PUSH
23787: LD_INT 45
23789: PUSH
23790: LD_INT 47
23792: PUSH
23793: LD_INT 49
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: PUSH
23809: LD_VAR 0 12
23813: ARRAY
23814: ST_TO_ADDR
// for i in list do
23815: LD_ADDR_VAR 0 8
23819: PUSH
23820: LD_VAR 0 5
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23859
// if not i in fac_list then
23828: LD_VAR 0 8
23832: PUSH
23833: LD_VAR 0 17
23837: IN
23838: NOT
23839: IFFALSE 23857
// list := list diff i ;
23841: LD_ADDR_VAR 0 5
23845: PUSH
23846: LD_VAR 0 5
23850: PUSH
23851: LD_VAR 0 8
23855: DIFF
23856: ST_TO_ADDR
23857: GO 23825
23859: POP
23860: POP
// if not list then
23861: LD_VAR 0 5
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 24674
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23870: LD_VAR 0 12
23874: PUSH
23875: LD_INT 3
23877: EQUAL
23878: PUSH
23879: LD_INT 49
23881: PUSH
23882: LD_VAR 0 5
23886: IN
23887: AND
23888: PUSH
23889: LD_INT 31
23891: PPUSH
23892: LD_VAR 0 16
23896: PPUSH
23897: CALL_OW 321
23901: PUSH
23902: LD_INT 2
23904: EQUAL
23905: AND
23906: IFFALSE 23966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23908: LD_INT 22
23910: PUSH
23911: LD_VAR 0 16
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 35
23922: PUSH
23923: LD_INT 49
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 91
23932: PUSH
23933: LD_VAR 0 1
23937: PUSH
23938: LD_INT 10
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 69
23955: NOT
23956: IFFALSE 23966
// weapon := ru_time_lapser ;
23958: LD_ADDR_VAR 0 18
23962: PUSH
23963: LD_INT 49
23965: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23966: LD_VAR 0 12
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: IN
23981: PUSH
23982: LD_INT 11
23984: PUSH
23985: LD_VAR 0 5
23989: IN
23990: PUSH
23991: LD_INT 30
23993: PUSH
23994: LD_VAR 0 5
23998: IN
23999: OR
24000: AND
24001: PUSH
24002: LD_INT 6
24004: PPUSH
24005: LD_VAR 0 16
24009: PPUSH
24010: CALL_OW 321
24014: PUSH
24015: LD_INT 2
24017: EQUAL
24018: AND
24019: IFFALSE 24184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24021: LD_INT 22
24023: PUSH
24024: LD_VAR 0 16
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 35
24038: PUSH
24039: LD_INT 11
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 35
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 91
24063: PUSH
24064: LD_VAR 0 1
24068: PUSH
24069: LD_INT 18
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 69
24086: NOT
24087: PUSH
24088: LD_INT 22
24090: PUSH
24091: LD_VAR 0 16
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: LD_INT 30
24105: PUSH
24106: LD_INT 32
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 30
24115: PUSH
24116: LD_INT 33
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 91
24130: PUSH
24131: LD_VAR 0 1
24135: PUSH
24136: LD_INT 12
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: PUSH
24157: LD_INT 2
24159: GREATER
24160: AND
24161: IFFALSE 24184
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24163: LD_ADDR_VAR 0 18
24167: PUSH
24168: LD_INT 11
24170: PUSH
24171: LD_INT 30
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_VAR 0 12
24182: ARRAY
24183: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24184: LD_VAR 0 18
24188: NOT
24189: PUSH
24190: LD_INT 40
24192: PPUSH
24193: LD_VAR 0 16
24197: PPUSH
24198: CALL_OW 321
24202: PUSH
24203: LD_INT 2
24205: EQUAL
24206: AND
24207: PUSH
24208: LD_INT 7
24210: PUSH
24211: LD_VAR 0 5
24215: IN
24216: PUSH
24217: LD_INT 28
24219: PUSH
24220: LD_VAR 0 5
24224: IN
24225: OR
24226: PUSH
24227: LD_INT 45
24229: PUSH
24230: LD_VAR 0 5
24234: IN
24235: OR
24236: AND
24237: IFFALSE 24491
// begin hex := GetHexInfo ( x , y ) ;
24239: LD_ADDR_VAR 0 4
24243: PUSH
24244: LD_VAR 0 10
24248: PPUSH
24249: LD_VAR 0 11
24253: PPUSH
24254: CALL_OW 546
24258: ST_TO_ADDR
// if hex [ 1 ] then
24259: LD_VAR 0 4
24263: PUSH
24264: LD_INT 1
24266: ARRAY
24267: IFFALSE 24271
// exit ;
24269: GO 24674
// height := hex [ 2 ] ;
24271: LD_ADDR_VAR 0 15
24275: PUSH
24276: LD_VAR 0 4
24280: PUSH
24281: LD_INT 2
24283: ARRAY
24284: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24285: LD_ADDR_VAR 0 14
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: LD_INT 5
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: ST_TO_ADDR
// for i in tmp do
24308: LD_ADDR_VAR 0 8
24312: PUSH
24313: LD_VAR 0 14
24317: PUSH
24318: FOR_IN
24319: IFFALSE 24489
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24321: LD_ADDR_VAR 0 9
24325: PUSH
24326: LD_VAR 0 10
24330: PPUSH
24331: LD_VAR 0 8
24335: PPUSH
24336: LD_INT 5
24338: PPUSH
24339: CALL_OW 272
24343: PUSH
24344: LD_VAR 0 11
24348: PPUSH
24349: LD_VAR 0 8
24353: PPUSH
24354: LD_INT 5
24356: PPUSH
24357: CALL_OW 273
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24366: LD_VAR 0 9
24370: PUSH
24371: LD_INT 1
24373: ARRAY
24374: PPUSH
24375: LD_VAR 0 9
24379: PUSH
24380: LD_INT 2
24382: ARRAY
24383: PPUSH
24384: CALL_OW 488
24388: IFFALSE 24487
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24390: LD_ADDR_VAR 0 4
24394: PUSH
24395: LD_VAR 0 9
24399: PUSH
24400: LD_INT 1
24402: ARRAY
24403: PPUSH
24404: LD_VAR 0 9
24408: PUSH
24409: LD_INT 2
24411: ARRAY
24412: PPUSH
24413: CALL_OW 546
24417: ST_TO_ADDR
// if hex [ 1 ] then
24418: LD_VAR 0 4
24422: PUSH
24423: LD_INT 1
24425: ARRAY
24426: IFFALSE 24430
// continue ;
24428: GO 24318
// h := hex [ 2 ] ;
24430: LD_ADDR_VAR 0 13
24434: PUSH
24435: LD_VAR 0 4
24439: PUSH
24440: LD_INT 2
24442: ARRAY
24443: ST_TO_ADDR
// if h + 7 < height then
24444: LD_VAR 0 13
24448: PUSH
24449: LD_INT 7
24451: PLUS
24452: PUSH
24453: LD_VAR 0 15
24457: LESS
24458: IFFALSE 24487
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24460: LD_ADDR_VAR 0 18
24464: PUSH
24465: LD_INT 7
24467: PUSH
24468: LD_INT 28
24470: PUSH
24471: LD_INT 45
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: PUSH
24479: LD_VAR 0 12
24483: ARRAY
24484: ST_TO_ADDR
// break ;
24485: GO 24489
// end ; end ; end ;
24487: GO 24318
24489: POP
24490: POP
// end ; if not weapon then
24491: LD_VAR 0 18
24495: NOT
24496: IFFALSE 24556
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24498: LD_ADDR_VAR 0 5
24502: PUSH
24503: LD_VAR 0 5
24507: PUSH
24508: LD_INT 11
24510: PUSH
24511: LD_INT 30
24513: PUSH
24514: LD_INT 49
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: DIFF
24522: ST_TO_ADDR
// if not list then
24523: LD_VAR 0 5
24527: NOT
24528: IFFALSE 24532
// exit ;
24530: GO 24674
// weapon := list [ rand ( 1 , list ) ] ;
24532: LD_ADDR_VAR 0 18
24536: PUSH
24537: LD_VAR 0 5
24541: PUSH
24542: LD_INT 1
24544: PPUSH
24545: LD_VAR 0 5
24549: PPUSH
24550: CALL_OW 12
24554: ARRAY
24555: ST_TO_ADDR
// end ; if weapon then
24556: LD_VAR 0 18
24560: IFFALSE 24674
// begin tmp := CostOfWeapon ( weapon ) ;
24562: LD_ADDR_VAR 0 14
24566: PUSH
24567: LD_VAR 0 18
24571: PPUSH
24572: CALL_OW 451
24576: ST_TO_ADDR
// j := GetBase ( tower ) ;
24577: LD_ADDR_VAR 0 9
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 274
24591: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24592: LD_VAR 0 9
24596: PPUSH
24597: LD_INT 1
24599: PPUSH
24600: CALL_OW 275
24604: PUSH
24605: LD_VAR 0 14
24609: PUSH
24610: LD_INT 1
24612: ARRAY
24613: GREATEREQUAL
24614: PUSH
24615: LD_VAR 0 9
24619: PPUSH
24620: LD_INT 2
24622: PPUSH
24623: CALL_OW 275
24627: PUSH
24628: LD_VAR 0 14
24632: PUSH
24633: LD_INT 2
24635: ARRAY
24636: GREATEREQUAL
24637: AND
24638: PUSH
24639: LD_VAR 0 9
24643: PPUSH
24644: LD_INT 3
24646: PPUSH
24647: CALL_OW 275
24651: PUSH
24652: LD_VAR 0 14
24656: PUSH
24657: LD_INT 3
24659: ARRAY
24660: GREATEREQUAL
24661: AND
24662: IFFALSE 24674
// result := weapon ;
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_VAR 0 18
24673: ST_TO_ADDR
// end ; end ;
24674: LD_VAR 0 3
24678: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// result := true ;
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 1
24690: ST_TO_ADDR
// if array1 = array2 then
24691: LD_VAR 0 1
24695: PUSH
24696: LD_VAR 0 2
24700: EQUAL
24701: IFFALSE 24761
// begin for i = 1 to array1 do
24703: LD_ADDR_VAR 0 4
24707: PUSH
24708: DOUBLE
24709: LD_INT 1
24711: DEC
24712: ST_TO_ADDR
24713: LD_VAR 0 1
24717: PUSH
24718: FOR_TO
24719: IFFALSE 24757
// if array1 [ i ] <> array2 [ i ] then
24721: LD_VAR 0 1
24725: PUSH
24726: LD_VAR 0 4
24730: ARRAY
24731: PUSH
24732: LD_VAR 0 2
24736: PUSH
24737: LD_VAR 0 4
24741: ARRAY
24742: NONEQUAL
24743: IFFALSE 24755
// begin result := false ;
24745: LD_ADDR_VAR 0 3
24749: PUSH
24750: LD_INT 0
24752: ST_TO_ADDR
// break ;
24753: GO 24757
// end ;
24755: GO 24718
24757: POP
24758: POP
// end else
24759: GO 24769
// result := false ;
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 0
24768: ST_TO_ADDR
// end ;
24769: LD_VAR 0 3
24773: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24774: LD_INT 0
24776: PPUSH
24777: PPUSH
24778: PPUSH
// pom := GetBase ( fac ) ;
24779: LD_ADDR_VAR 0 5
24783: PUSH
24784: LD_VAR 0 1
24788: PPUSH
24789: CALL_OW 274
24793: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24794: LD_ADDR_VAR 0 4
24798: PUSH
24799: LD_VAR 0 2
24803: PUSH
24804: LD_INT 1
24806: ARRAY
24807: PPUSH
24808: LD_VAR 0 2
24812: PUSH
24813: LD_INT 2
24815: ARRAY
24816: PPUSH
24817: LD_VAR 0 2
24821: PUSH
24822: LD_INT 3
24824: ARRAY
24825: PPUSH
24826: LD_VAR 0 2
24830: PUSH
24831: LD_INT 4
24833: ARRAY
24834: PPUSH
24835: CALL_OW 449
24839: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24840: LD_ADDR_VAR 0 3
24844: PUSH
24845: LD_VAR 0 5
24849: PPUSH
24850: LD_INT 1
24852: PPUSH
24853: CALL_OW 275
24857: PUSH
24858: LD_VAR 0 4
24862: PUSH
24863: LD_INT 1
24865: ARRAY
24866: GREATEREQUAL
24867: PUSH
24868: LD_VAR 0 5
24872: PPUSH
24873: LD_INT 2
24875: PPUSH
24876: CALL_OW 275
24880: PUSH
24881: LD_VAR 0 4
24885: PUSH
24886: LD_INT 2
24888: ARRAY
24889: GREATEREQUAL
24890: AND
24891: PUSH
24892: LD_VAR 0 5
24896: PPUSH
24897: LD_INT 3
24899: PPUSH
24900: CALL_OW 275
24904: PUSH
24905: LD_VAR 0 4
24909: PUSH
24910: LD_INT 3
24912: ARRAY
24913: GREATEREQUAL
24914: AND
24915: ST_TO_ADDR
// end ;
24916: LD_VAR 0 3
24920: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24921: LD_INT 0
24923: PPUSH
24924: PPUSH
24925: PPUSH
24926: PPUSH
// pom := GetBase ( building ) ;
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 274
24941: ST_TO_ADDR
// if not pom then
24942: LD_VAR 0 3
24946: NOT
24947: IFFALSE 24951
// exit ;
24949: GO 25121
// btype := GetBType ( building ) ;
24951: LD_ADDR_VAR 0 5
24955: PUSH
24956: LD_VAR 0 1
24960: PPUSH
24961: CALL_OW 266
24965: ST_TO_ADDR
// if btype = b_armoury then
24966: LD_VAR 0 5
24970: PUSH
24971: LD_INT 4
24973: EQUAL
24974: IFFALSE 24984
// btype := b_barracks ;
24976: LD_ADDR_VAR 0 5
24980: PUSH
24981: LD_INT 5
24983: ST_TO_ADDR
// if btype = b_depot then
24984: LD_VAR 0 5
24988: PUSH
24989: LD_INT 0
24991: EQUAL
24992: IFFALSE 25002
// btype := b_warehouse ;
24994: LD_ADDR_VAR 0 5
24998: PUSH
24999: LD_INT 1
25001: ST_TO_ADDR
// if btype = b_workshop then
25002: LD_VAR 0 5
25006: PUSH
25007: LD_INT 2
25009: EQUAL
25010: IFFALSE 25020
// btype := b_factory ;
25012: LD_ADDR_VAR 0 5
25016: PUSH
25017: LD_INT 3
25019: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25020: LD_ADDR_VAR 0 4
25024: PUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL_OW 248
25039: PPUSH
25040: CALL_OW 450
25044: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25045: LD_ADDR_VAR 0 2
25049: PUSH
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 275
25062: PUSH
25063: LD_VAR 0 4
25067: PUSH
25068: LD_INT 1
25070: ARRAY
25071: GREATEREQUAL
25072: PUSH
25073: LD_VAR 0 3
25077: PPUSH
25078: LD_INT 2
25080: PPUSH
25081: CALL_OW 275
25085: PUSH
25086: LD_VAR 0 4
25090: PUSH
25091: LD_INT 2
25093: ARRAY
25094: GREATEREQUAL
25095: AND
25096: PUSH
25097: LD_VAR 0 3
25101: PPUSH
25102: LD_INT 3
25104: PPUSH
25105: CALL_OW 275
25109: PUSH
25110: LD_VAR 0 4
25114: PUSH
25115: LD_INT 3
25117: ARRAY
25118: GREATEREQUAL
25119: AND
25120: ST_TO_ADDR
// end ;
25121: LD_VAR 0 2
25125: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25126: LD_INT 0
25128: PPUSH
25129: PPUSH
25130: PPUSH
// pom := GetBase ( building ) ;
25131: LD_ADDR_VAR 0 4
25135: PUSH
25136: LD_VAR 0 1
25140: PPUSH
25141: CALL_OW 274
25145: ST_TO_ADDR
// if not pom then
25146: LD_VAR 0 4
25150: NOT
25151: IFFALSE 25155
// exit ;
25153: GO 25256
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25155: LD_ADDR_VAR 0 5
25159: PUSH
25160: LD_VAR 0 2
25164: PPUSH
25165: LD_VAR 0 1
25169: PPUSH
25170: CALL_OW 248
25174: PPUSH
25175: CALL_OW 450
25179: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_VAR 0 4
25189: PPUSH
25190: LD_INT 1
25192: PPUSH
25193: CALL_OW 275
25197: PUSH
25198: LD_VAR 0 5
25202: PUSH
25203: LD_INT 1
25205: ARRAY
25206: GREATEREQUAL
25207: PUSH
25208: LD_VAR 0 4
25212: PPUSH
25213: LD_INT 2
25215: PPUSH
25216: CALL_OW 275
25220: PUSH
25221: LD_VAR 0 5
25225: PUSH
25226: LD_INT 2
25228: ARRAY
25229: GREATEREQUAL
25230: AND
25231: PUSH
25232: LD_VAR 0 4
25236: PPUSH
25237: LD_INT 3
25239: PPUSH
25240: CALL_OW 275
25244: PUSH
25245: LD_VAR 0 5
25249: PUSH
25250: LD_INT 3
25252: ARRAY
25253: GREATEREQUAL
25254: AND
25255: ST_TO_ADDR
// end ;
25256: LD_VAR 0 3
25260: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25261: LD_INT 0
25263: PPUSH
25264: PPUSH
25265: PPUSH
25266: PPUSH
25267: PPUSH
25268: PPUSH
25269: PPUSH
25270: PPUSH
25271: PPUSH
25272: PPUSH
// result := false ;
25273: LD_ADDR_VAR 0 6
25277: PUSH
25278: LD_INT 0
25280: ST_TO_ADDR
// if not base or not btype or not x or not y then
25281: LD_VAR 0 1
25285: NOT
25286: PUSH
25287: LD_VAR 0 2
25291: NOT
25292: OR
25293: PUSH
25294: LD_VAR 0 3
25298: NOT
25299: OR
25300: PUSH
25301: LD_VAR 0 4
25305: NOT
25306: OR
25307: IFFALSE 25311
// exit ;
25309: GO 25920
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25311: LD_ADDR_VAR 0 12
25315: PUSH
25316: LD_VAR 0 2
25320: PPUSH
25321: LD_VAR 0 3
25325: PPUSH
25326: LD_VAR 0 4
25330: PPUSH
25331: LD_VAR 0 5
25335: PPUSH
25336: LD_VAR 0 1
25340: PUSH
25341: LD_INT 1
25343: ARRAY
25344: PPUSH
25345: CALL_OW 248
25349: PPUSH
25350: LD_INT 0
25352: PPUSH
25353: CALL 26757 0 6
25357: ST_TO_ADDR
// if not hexes then
25358: LD_VAR 0 12
25362: NOT
25363: IFFALSE 25367
// exit ;
25365: GO 25920
// for i = 1 to hexes do
25367: LD_ADDR_VAR 0 7
25371: PUSH
25372: DOUBLE
25373: LD_INT 1
25375: DEC
25376: ST_TO_ADDR
25377: LD_VAR 0 12
25381: PUSH
25382: FOR_TO
25383: IFFALSE 25918
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25385: LD_ADDR_VAR 0 11
25389: PUSH
25390: LD_VAR 0 12
25394: PUSH
25395: LD_VAR 0 7
25399: ARRAY
25400: PUSH
25401: LD_INT 1
25403: ARRAY
25404: PPUSH
25405: LD_VAR 0 12
25409: PUSH
25410: LD_VAR 0 7
25414: ARRAY
25415: PUSH
25416: LD_INT 2
25418: ARRAY
25419: PPUSH
25420: CALL_OW 428
25424: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25425: LD_VAR 0 12
25429: PUSH
25430: LD_VAR 0 7
25434: ARRAY
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: LD_VAR 0 12
25444: PUSH
25445: LD_VAR 0 7
25449: ARRAY
25450: PUSH
25451: LD_INT 2
25453: ARRAY
25454: PPUSH
25455: CALL_OW 351
25459: PUSH
25460: LD_VAR 0 12
25464: PUSH
25465: LD_VAR 0 7
25469: ARRAY
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PPUSH
25475: LD_VAR 0 12
25479: PUSH
25480: LD_VAR 0 7
25484: ARRAY
25485: PUSH
25486: LD_INT 2
25488: ARRAY
25489: PPUSH
25490: CALL_OW 488
25494: NOT
25495: OR
25496: PUSH
25497: LD_VAR 0 11
25501: PPUSH
25502: CALL_OW 247
25506: PUSH
25507: LD_INT 3
25509: EQUAL
25510: OR
25511: IFFALSE 25517
// exit ;
25513: POP
25514: POP
25515: GO 25920
// if not tmp or not tmp in base then
25517: LD_VAR 0 11
25521: NOT
25522: PUSH
25523: LD_VAR 0 11
25527: PUSH
25528: LD_VAR 0 1
25532: IN
25533: NOT
25534: OR
25535: IFFALSE 25539
// continue ;
25537: GO 25382
// result := true ;
25539: LD_ADDR_VAR 0 6
25543: PUSH
25544: LD_INT 1
25546: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25547: LD_ADDR_VAR 0 15
25551: PUSH
25552: LD_VAR 0 1
25556: PPUSH
25557: LD_INT 22
25559: PUSH
25560: LD_VAR 0 11
25564: PPUSH
25565: CALL_OW 255
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 30
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 30
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PPUSH
25606: CALL_OW 72
25610: ST_TO_ADDR
// if dep then
25611: LD_VAR 0 15
25615: IFFALSE 25751
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25617: LD_ADDR_VAR 0 14
25621: PUSH
25622: LD_VAR 0 15
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: CALL_OW 250
25635: PPUSH
25636: LD_VAR 0 15
25640: PUSH
25641: LD_INT 1
25643: ARRAY
25644: PPUSH
25645: CALL_OW 254
25649: PPUSH
25650: LD_INT 5
25652: PPUSH
25653: CALL_OW 272
25657: PUSH
25658: LD_VAR 0 15
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: PPUSH
25667: CALL_OW 251
25671: PPUSH
25672: LD_VAR 0 15
25676: PUSH
25677: LD_INT 1
25679: ARRAY
25680: PPUSH
25681: CALL_OW 254
25685: PPUSH
25686: LD_INT 5
25688: PPUSH
25689: CALL_OW 273
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25698: LD_VAR 0 14
25702: PUSH
25703: LD_INT 1
25705: ARRAY
25706: PPUSH
25707: LD_VAR 0 14
25711: PUSH
25712: LD_INT 2
25714: ARRAY
25715: PPUSH
25716: CALL_OW 488
25720: IFFALSE 25751
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25722: LD_VAR 0 11
25726: PPUSH
25727: LD_VAR 0 14
25731: PUSH
25732: LD_INT 1
25734: ARRAY
25735: PPUSH
25736: LD_VAR 0 14
25740: PUSH
25741: LD_INT 2
25743: ARRAY
25744: PPUSH
25745: CALL_OW 111
// continue ;
25749: GO 25382
// end ; end ; r := GetDir ( tmp ) ;
25751: LD_ADDR_VAR 0 13
25755: PUSH
25756: LD_VAR 0 11
25760: PPUSH
25761: CALL_OW 254
25765: ST_TO_ADDR
// if r = 5 then
25766: LD_VAR 0 13
25770: PUSH
25771: LD_INT 5
25773: EQUAL
25774: IFFALSE 25784
// r := 0 ;
25776: LD_ADDR_VAR 0 13
25780: PUSH
25781: LD_INT 0
25783: ST_TO_ADDR
// for j = r to 5 do
25784: LD_ADDR_VAR 0 8
25788: PUSH
25789: DOUBLE
25790: LD_VAR 0 13
25794: DEC
25795: ST_TO_ADDR
25796: LD_INT 5
25798: PUSH
25799: FOR_TO
25800: IFFALSE 25914
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25802: LD_ADDR_VAR 0 9
25806: PUSH
25807: LD_VAR 0 11
25811: PPUSH
25812: CALL_OW 250
25816: PPUSH
25817: LD_VAR 0 8
25821: PPUSH
25822: LD_INT 2
25824: PPUSH
25825: CALL_OW 272
25829: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25830: LD_ADDR_VAR 0 10
25834: PUSH
25835: LD_VAR 0 11
25839: PPUSH
25840: CALL_OW 251
25844: PPUSH
25845: LD_VAR 0 8
25849: PPUSH
25850: LD_INT 2
25852: PPUSH
25853: CALL_OW 273
25857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25858: LD_VAR 0 9
25862: PPUSH
25863: LD_VAR 0 10
25867: PPUSH
25868: CALL_OW 488
25872: PUSH
25873: LD_VAR 0 9
25877: PPUSH
25878: LD_VAR 0 10
25882: PPUSH
25883: CALL_OW 428
25887: NOT
25888: AND
25889: IFFALSE 25912
// begin ComMoveXY ( tmp , _x , _y ) ;
25891: LD_VAR 0 11
25895: PPUSH
25896: LD_VAR 0 9
25900: PPUSH
25901: LD_VAR 0 10
25905: PPUSH
25906: CALL_OW 111
// break ;
25910: GO 25914
// end ; end ;
25912: GO 25799
25914: POP
25915: POP
// end ;
25916: GO 25382
25918: POP
25919: POP
// end ;
25920: LD_VAR 0 6
25924: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25925: LD_INT 0
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
25934: PPUSH
25935: PPUSH
25936: PPUSH
// result := false ;
25937: LD_ADDR_VAR 0 6
25941: PUSH
25942: LD_INT 0
25944: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25945: LD_VAR 0 1
25949: NOT
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 266
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: IN
25971: NOT
25972: OR
25973: PUSH
25974: LD_VAR 0 2
25978: NOT
25979: OR
25980: PUSH
25981: LD_VAR 0 5
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: LD_INT 3
25997: PUSH
25998: LD_INT 4
26000: PUSH
26001: LD_INT 5
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: IN
26012: NOT
26013: OR
26014: PUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: LD_VAR 0 4
26024: PPUSH
26025: CALL_OW 488
26029: NOT
26030: OR
26031: IFFALSE 26035
// exit ;
26033: GO 26752
// pom := GetBase ( depot ) ;
26035: LD_ADDR_VAR 0 10
26039: PUSH
26040: LD_VAR 0 1
26044: PPUSH
26045: CALL_OW 274
26049: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26050: LD_ADDR_VAR 0 11
26054: PUSH
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 248
26069: PPUSH
26070: CALL_OW 450
26074: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26075: LD_VAR 0 10
26079: PPUSH
26080: LD_INT 1
26082: PPUSH
26083: CALL_OW 275
26087: PUSH
26088: LD_VAR 0 11
26092: PUSH
26093: LD_INT 1
26095: ARRAY
26096: GREATEREQUAL
26097: PUSH
26098: LD_VAR 0 10
26102: PPUSH
26103: LD_INT 2
26105: PPUSH
26106: CALL_OW 275
26110: PUSH
26111: LD_VAR 0 11
26115: PUSH
26116: LD_INT 2
26118: ARRAY
26119: GREATEREQUAL
26120: AND
26121: PUSH
26122: LD_VAR 0 10
26126: PPUSH
26127: LD_INT 3
26129: PPUSH
26130: CALL_OW 275
26134: PUSH
26135: LD_VAR 0 11
26139: PUSH
26140: LD_INT 3
26142: ARRAY
26143: GREATEREQUAL
26144: AND
26145: NOT
26146: IFFALSE 26150
// exit ;
26148: GO 26752
// if GetBType ( depot ) = b_depot then
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL_OW 266
26159: PUSH
26160: LD_INT 0
26162: EQUAL
26163: IFFALSE 26175
// dist := 28 else
26165: LD_ADDR_VAR 0 14
26169: PUSH
26170: LD_INT 28
26172: ST_TO_ADDR
26173: GO 26183
// dist := 36 ;
26175: LD_ADDR_VAR 0 14
26179: PUSH
26180: LD_INT 36
26182: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26183: LD_VAR 0 1
26187: PPUSH
26188: LD_VAR 0 3
26192: PPUSH
26193: LD_VAR 0 4
26197: PPUSH
26198: CALL_OW 297
26202: PUSH
26203: LD_VAR 0 14
26207: GREATER
26208: IFFALSE 26212
// exit ;
26210: GO 26752
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26212: LD_ADDR_VAR 0 12
26216: PUSH
26217: LD_VAR 0 2
26221: PPUSH
26222: LD_VAR 0 3
26226: PPUSH
26227: LD_VAR 0 4
26231: PPUSH
26232: LD_VAR 0 5
26236: PPUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 248
26246: PPUSH
26247: LD_INT 0
26249: PPUSH
26250: CALL 26757 0 6
26254: ST_TO_ADDR
// if not hexes then
26255: LD_VAR 0 12
26259: NOT
26260: IFFALSE 26264
// exit ;
26262: GO 26752
// hex := GetHexInfo ( x , y ) ;
26264: LD_ADDR_VAR 0 15
26268: PUSH
26269: LD_VAR 0 3
26273: PPUSH
26274: LD_VAR 0 4
26278: PPUSH
26279: CALL_OW 546
26283: ST_TO_ADDR
// if hex [ 1 ] then
26284: LD_VAR 0 15
26288: PUSH
26289: LD_INT 1
26291: ARRAY
26292: IFFALSE 26296
// exit ;
26294: GO 26752
// height := hex [ 2 ] ;
26296: LD_ADDR_VAR 0 13
26300: PUSH
26301: LD_VAR 0 15
26305: PUSH
26306: LD_INT 2
26308: ARRAY
26309: ST_TO_ADDR
// for i = 1 to hexes do
26310: LD_ADDR_VAR 0 7
26314: PUSH
26315: DOUBLE
26316: LD_INT 1
26318: DEC
26319: ST_TO_ADDR
26320: LD_VAR 0 12
26324: PUSH
26325: FOR_TO
26326: IFFALSE 26656
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26328: LD_VAR 0 12
26332: PUSH
26333: LD_VAR 0 7
26337: ARRAY
26338: PUSH
26339: LD_INT 1
26341: ARRAY
26342: PPUSH
26343: LD_VAR 0 12
26347: PUSH
26348: LD_VAR 0 7
26352: ARRAY
26353: PUSH
26354: LD_INT 2
26356: ARRAY
26357: PPUSH
26358: CALL_OW 488
26362: NOT
26363: PUSH
26364: LD_VAR 0 12
26368: PUSH
26369: LD_VAR 0 7
26373: ARRAY
26374: PUSH
26375: LD_INT 1
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 12
26383: PUSH
26384: LD_VAR 0 7
26388: ARRAY
26389: PUSH
26390: LD_INT 2
26392: ARRAY
26393: PPUSH
26394: CALL_OW 428
26398: PUSH
26399: LD_INT 0
26401: GREATER
26402: OR
26403: PUSH
26404: LD_VAR 0 12
26408: PUSH
26409: LD_VAR 0 7
26413: ARRAY
26414: PUSH
26415: LD_INT 1
26417: ARRAY
26418: PPUSH
26419: LD_VAR 0 12
26423: PUSH
26424: LD_VAR 0 7
26428: ARRAY
26429: PUSH
26430: LD_INT 2
26432: ARRAY
26433: PPUSH
26434: CALL_OW 351
26438: OR
26439: IFFALSE 26445
// exit ;
26441: POP
26442: POP
26443: GO 26752
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26445: LD_ADDR_VAR 0 8
26449: PUSH
26450: LD_VAR 0 12
26454: PUSH
26455: LD_VAR 0 7
26459: ARRAY
26460: PUSH
26461: LD_INT 1
26463: ARRAY
26464: PPUSH
26465: LD_VAR 0 12
26469: PUSH
26470: LD_VAR 0 7
26474: ARRAY
26475: PUSH
26476: LD_INT 2
26478: ARRAY
26479: PPUSH
26480: CALL_OW 546
26484: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26485: LD_VAR 0 8
26489: PUSH
26490: LD_INT 1
26492: ARRAY
26493: PUSH
26494: LD_VAR 0 8
26498: PUSH
26499: LD_INT 2
26501: ARRAY
26502: PUSH
26503: LD_VAR 0 13
26507: PUSH
26508: LD_INT 2
26510: PLUS
26511: GREATER
26512: OR
26513: PUSH
26514: LD_VAR 0 8
26518: PUSH
26519: LD_INT 2
26521: ARRAY
26522: PUSH
26523: LD_VAR 0 13
26527: PUSH
26528: LD_INT 2
26530: MINUS
26531: LESS
26532: OR
26533: PUSH
26534: LD_VAR 0 8
26538: PUSH
26539: LD_INT 3
26541: ARRAY
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: LD_INT 8
26548: PUSH
26549: LD_INT 9
26551: PUSH
26552: LD_INT 10
26554: PUSH
26555: LD_INT 11
26557: PUSH
26558: LD_INT 12
26560: PUSH
26561: LD_INT 13
26563: PUSH
26564: LD_INT 16
26566: PUSH
26567: LD_INT 17
26569: PUSH
26570: LD_INT 18
26572: PUSH
26573: LD_INT 19
26575: PUSH
26576: LD_INT 20
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: IN
26597: NOT
26598: OR
26599: PUSH
26600: LD_VAR 0 8
26604: PUSH
26605: LD_INT 5
26607: ARRAY
26608: NOT
26609: OR
26610: PUSH
26611: LD_VAR 0 8
26615: PUSH
26616: LD_INT 6
26618: ARRAY
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 2
26625: PUSH
26626: LD_INT 7
26628: PUSH
26629: LD_INT 9
26631: PUSH
26632: LD_INT 10
26634: PUSH
26635: LD_INT 11
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: IN
26646: NOT
26647: OR
26648: IFFALSE 26654
// exit ;
26650: POP
26651: POP
26652: GO 26752
// end ;
26654: GO 26325
26656: POP
26657: POP
// side := GetSide ( depot ) ;
26658: LD_ADDR_VAR 0 9
26662: PUSH
26663: LD_VAR 0 1
26667: PPUSH
26668: CALL_OW 255
26672: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26673: LD_VAR 0 9
26677: PPUSH
26678: LD_VAR 0 3
26682: PPUSH
26683: LD_VAR 0 4
26687: PPUSH
26688: LD_INT 20
26690: PPUSH
26691: CALL 19406 0 4
26695: PUSH
26696: LD_INT 4
26698: ARRAY
26699: IFFALSE 26703
// exit ;
26701: GO 26752
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26703: LD_VAR 0 2
26707: PUSH
26708: LD_INT 29
26710: PUSH
26711: LD_INT 30
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: IN
26718: PUSH
26719: LD_VAR 0 3
26723: PPUSH
26724: LD_VAR 0 4
26728: PPUSH
26729: LD_VAR 0 9
26733: PPUSH
26734: CALL_OW 440
26738: NOT
26739: AND
26740: IFFALSE 26744
// exit ;
26742: GO 26752
// result := true ;
26744: LD_ADDR_VAR 0 6
26748: PUSH
26749: LD_INT 1
26751: ST_TO_ADDR
// end ;
26752: LD_VAR 0 6
26756: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26757: LD_INT 0
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
26771: PPUSH
26772: PPUSH
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
// result = [ ] ;
26817: LD_ADDR_VAR 0 7
26821: PUSH
26822: EMPTY
26823: ST_TO_ADDR
// temp_list = [ ] ;
26824: LD_ADDR_VAR 0 9
26828: PUSH
26829: EMPTY
26830: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26831: LD_VAR 0 4
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: LD_INT 4
26850: PUSH
26851: LD_INT 5
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: IN
26862: NOT
26863: PUSH
26864: LD_VAR 0 1
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: IN
26879: PUSH
26880: LD_VAR 0 5
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: IN
26899: NOT
26900: AND
26901: OR
26902: IFFALSE 26906
// exit ;
26904: GO 45297
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26906: LD_VAR 0 1
26910: PUSH
26911: LD_INT 6
26913: PUSH
26914: LD_INT 7
26916: PUSH
26917: LD_INT 8
26919: PUSH
26920: LD_INT 13
26922: PUSH
26923: LD_INT 12
26925: PUSH
26926: LD_INT 15
26928: PUSH
26929: LD_INT 11
26931: PUSH
26932: LD_INT 14
26934: PUSH
26935: LD_INT 10
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: IN
26949: IFFALSE 26959
// btype = b_lab ;
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_INT 6
26958: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26959: LD_VAR 0 6
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: IN
26978: NOT
26979: PUSH
26980: LD_VAR 0 1
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: LD_INT 3
26996: PUSH
26997: LD_INT 6
26999: PUSH
27000: LD_INT 36
27002: PUSH
27003: LD_INT 4
27005: PUSH
27006: LD_INT 5
27008: PUSH
27009: LD_INT 31
27011: PUSH
27012: LD_INT 32
27014: PUSH
27015: LD_INT 33
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: IN
27031: NOT
27032: PUSH
27033: LD_VAR 0 6
27037: PUSH
27038: LD_INT 1
27040: EQUAL
27041: AND
27042: OR
27043: PUSH
27044: LD_VAR 0 1
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 3
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: IN
27059: NOT
27060: PUSH
27061: LD_VAR 0 6
27065: PUSH
27066: LD_INT 2
27068: EQUAL
27069: AND
27070: OR
27071: IFFALSE 27081
// mode = 0 ;
27073: LD_ADDR_VAR 0 6
27077: PUSH
27078: LD_INT 0
27080: ST_TO_ADDR
// case mode of 0 :
27081: LD_VAR 0 6
27085: PUSH
27086: LD_INT 0
27088: DOUBLE
27089: EQUAL
27090: IFTRUE 27094
27092: GO 38547
27094: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27095: LD_ADDR_VAR 0 11
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: LD_INT 3
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 3
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27288: LD_ADDR_VAR 0 12
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 3
27445: NEG
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 3
27456: NEG
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27484: LD_ADDR_VAR 0 13
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: LD_INT 2
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 3
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 3
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 3
27655: NEG
27656: PUSH
27657: LD_INT 3
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27683: LD_ADDR_VAR 0 14
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: LD_INT 2
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 3
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 3
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27879: LD_ADDR_VAR 0 15
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 1
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 3
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 3
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28072: LD_ADDR_VAR 0 16
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: LD_INT 3
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28265: LD_ADDR_VAR 0 17
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 2
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: NEG
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 2
28452: NEG
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: LD_INT 2
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28495: LD_ADDR_VAR 0 18
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28725: LD_ADDR_VAR 0 19
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: NEG
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: LD_INT 2
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28955: LD_ADDR_VAR 0 20
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 2
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 2
29142: NEG
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 2
29154: NEG
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29185: LD_ADDR_VAR 0 21
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: LD_INT 2
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 0
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 1
29292: NEG
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: NEG
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 2
29384: NEG
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29415: LD_ADDR_VAR 0 22
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 1
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29645: LD_ADDR_VAR 0 23
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: NEG
29845: PUSH
29846: LD_INT 2
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29925: LD_ADDR_VAR 0 24
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: NEG
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 2
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 2
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 2
30101: NEG
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: LD_INT 2
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: LD_INT 2
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30201: LD_ADDR_VAR 0 25
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 2
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30475: LD_ADDR_VAR 0 26
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 1
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30751: LD_ADDR_VAR 0 27
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 0
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: NEG
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 3
30984: NEG
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31031: LD_ADDR_VAR 0 28
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: NEG
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: NEG
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: LD_INT 3
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31313: LD_ADDR_VAR 0 29
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: NEG
31504: PUSH
31505: LD_INT 3
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31592: LD_ADDR_VAR 0 30
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: LD_INT 1
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31870: LD_ADDR_VAR 0 31
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: LD_INT 3
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32148: LD_ADDR_VAR 0 32
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: NEG
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: LD_INT 3
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32426: LD_ADDR_VAR 0 33
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 2
32592: NEG
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: NEG
32605: PUSH
32606: LD_INT 2
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: NEG
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 3
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32705: LD_ADDR_VAR 0 34
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32985: LD_ADDR_VAR 0 35
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33097: LD_ADDR_VAR 0 36
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33209: LD_ADDR_VAR 0 37
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33321: LD_ADDR_VAR 0 38
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33433: LD_ADDR_VAR 0 39
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33545: LD_ADDR_VAR 0 40
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33657: LD_ADDR_VAR 0 41
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: LD_INT 2
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 3
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 3
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 3
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 3
33931: NEG
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 3
33954: NEG
33955: PUSH
33956: LD_INT 2
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 3
33966: NEG
33967: PUSH
33968: LD_INT 3
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34007: LD_ADDR_VAR 0 42
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: LD_INT 3
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: LD_INT 2
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 3
34304: NEG
34305: PUSH
34306: LD_INT 2
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 3
34316: NEG
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34357: LD_ADDR_VAR 0 43
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 3
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: LD_INT 2
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 3
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: LD_INT 3
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 3
34653: NEG
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 3
34664: NEG
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34705: LD_ADDR_VAR 0 44
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: LD_INT 2
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: LD_INT 3
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 3
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: LD_INT 3
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: LD_INT 3
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 3
34979: NEG
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 3
34990: NEG
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 3
35002: NEG
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: LD_INT 3
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35055: LD_ADDR_VAR 0 45
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 2
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: LD_INT 3
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 3
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: LD_INT 3
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 2
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 3
35352: NEG
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 3
35364: NEG
35365: PUSH
35366: LD_INT 3
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35405: LD_ADDR_VAR 0 46
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 3
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 3
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 3
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 3
35701: NEG
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35753: LD_ADDR_VAR 0 47
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 2
35868: NEG
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35904: LD_ADDR_VAR 0 48
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36051: LD_ADDR_VAR 0 49
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36195: LD_ADDR_VAR 0 50
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36339: LD_ADDR_VAR 0 51
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36486: LD_ADDR_VAR 0 52
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: LD_INT 2
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36637: LD_ADDR_VAR 0 53
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36867: LD_ADDR_VAR 0 54
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37097: LD_ADDR_VAR 0 55
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37327: LD_ADDR_VAR 0 56
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37557: LD_ADDR_VAR 0 57
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37787: LD_ADDR_VAR 0 58
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 2
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38017: LD_ADDR_VAR 0 59
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38105: LD_ADDR_VAR 0 60
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38193: LD_ADDR_VAR 0 61
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38281: LD_ADDR_VAR 0 62
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38369: LD_ADDR_VAR 0 63
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38457: LD_ADDR_VAR 0 64
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// end ; 1 :
38545: GO 44442
38547: LD_INT 1
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 41178
38555: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38556: LD_ADDR_VAR 0 11
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 3
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 3
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38600: LD_ADDR_VAR 0 12
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 3
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38641: LD_ADDR_VAR 0 13
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 3
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38681: LD_ADDR_VAR 0 14
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38722: LD_ADDR_VAR 0 15
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38766: LD_ADDR_VAR 0 16
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: LD_INT 3
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 3
38797: NEG
38798: PUSH
38799: LD_INT 3
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38812: LD_ADDR_VAR 0 17
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38856: LD_ADDR_VAR 0 18
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38897: LD_ADDR_VAR 0 19
38901: PUSH
38902: LD_INT 3
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38937: LD_ADDR_VAR 0 20
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 3
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38978: LD_ADDR_VAR 0 21
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 3
39007: NEG
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39022: LD_ADDR_VAR 0 22
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 3
39041: NEG
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 3
39053: NEG
39054: PUSH
39055: LD_INT 3
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39068: LD_ADDR_VAR 0 23
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 4
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 3
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39112: LD_ADDR_VAR 0 24
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 4
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39153: LD_ADDR_VAR 0 25
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 4
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: LD_INT 4
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39193: LD_ADDR_VAR 0 26
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 4
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 3
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39234: LD_ADDR_VAR 0 27
39238: PUSH
39239: LD_INT 3
39241: NEG
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 4
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39278: LD_ADDR_VAR 0 28
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: LD_INT 4
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 4
39309: NEG
39310: PUSH
39311: LD_INT 3
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39324: LD_ADDR_VAR 0 29
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 3
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 4
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 4
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 5
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 5
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 4
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 6
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 6
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 5
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39479: LD_ADDR_VAR 0 30
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 4
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 4
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 4
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 5
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 5
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 5
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 6
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 6
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39622: LD_ADDR_VAR 0 31
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 3
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 4
39659: PUSH
39660: LD_INT 3
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 4
39669: PUSH
39670: LD_INT 4
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 3
39679: PUSH
39680: LD_INT 4
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 5
39689: PUSH
39690: LD_INT 4
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 5
39699: PUSH
39700: LD_INT 5
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 4
39709: PUSH
39710: LD_INT 5
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 6
39719: PUSH
39720: LD_INT 5
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 6
39729: PUSH
39730: LD_INT 6
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 5
39739: PUSH
39740: LD_INT 6
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39761: LD_ADDR_VAR 0 32
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 4
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 4
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 3
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 5
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 5
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 4
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 6
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 6
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 5
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39904: LD_ADDR_VAR 0 33
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 3
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 3
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 3
39945: NEG
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 4
39967: NEG
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 5
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 5
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 5
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 6
40024: NEG
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 6
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40059: LD_ADDR_VAR 0 34
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: LD_INT 3
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 3
40102: NEG
40103: PUSH
40104: LD_INT 4
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 4
40114: NEG
40115: PUSH
40116: LD_INT 3
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 4
40126: NEG
40127: PUSH
40128: LD_INT 4
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 4
40138: NEG
40139: PUSH
40140: LD_INT 5
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 5
40150: NEG
40151: PUSH
40152: LD_INT 4
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 5
40162: NEG
40163: PUSH
40164: LD_INT 5
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 5
40174: NEG
40175: PUSH
40176: LD_INT 6
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 6
40186: NEG
40187: PUSH
40188: LD_INT 5
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 6
40198: NEG
40199: PUSH
40200: LD_INT 6
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40222: LD_ADDR_VAR 0 41
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40266: LD_ADDR_VAR 0 42
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 3
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40307: LD_ADDR_VAR 0 43
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 3
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 3
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40347: LD_ADDR_VAR 0 44
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40388: LD_ADDR_VAR 0 45
40392: PUSH
40393: LD_INT 2
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 3
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40432: LD_ADDR_VAR 0 46
40436: PUSH
40437: LD_INT 2
40439: NEG
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: LD_INT 3
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40478: LD_ADDR_VAR 0 47
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 3
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40511: LD_ADDR_VAR 0 48
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40542: LD_ADDR_VAR 0 49
40546: PUSH
40547: LD_INT 3
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40571: LD_ADDR_VAR 0 50
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 3
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40600: LD_ADDR_VAR 0 51
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40631: LD_ADDR_VAR 0 52
40635: PUSH
40636: LD_INT 3
40638: NEG
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 3
40650: NEG
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40664: LD_ADDR_VAR 0 53
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 3
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40708: LD_ADDR_VAR 0 54
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: LIST
40748: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40749: LD_ADDR_VAR 0 55
40753: PUSH
40754: LD_INT 3
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 3
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40789: LD_ADDR_VAR 0 56
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 3
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 3
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40830: LD_ADDR_VAR 0 57
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40874: LD_ADDR_VAR 0 58
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: LD_INT 3
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 3
40893: NEG
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 3
40905: NEG
40906: PUSH
40907: LD_INT 3
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40920: LD_ADDR_VAR 0 59
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40964: LD_ADDR_VAR 0 60
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41005: LD_ADDR_VAR 0 61
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: LIST
41044: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41045: LD_ADDR_VAR 0 62
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41086: LD_ADDR_VAR 0 63
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41130: LD_ADDR_VAR 0 64
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: ST_TO_ADDR
// end ; 2 :
41176: GO 44442
41178: LD_INT 2
41180: DOUBLE
41181: EQUAL
41182: IFTRUE 41186
41184: GO 44441
41186: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41187: LD_ADDR_VAR 0 29
41191: PUSH
41192: LD_INT 4
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 4
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 5
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 5
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 4
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 3
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 5
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 3
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 4
41307: PUSH
41308: LD_INT 3
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 4
41317: PUSH
41318: LD_INT 4
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: LD_INT 4
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 4
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 4
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 4
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 4
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 5
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: LD_INT 3
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 5
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 3
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 4
41526: NEG
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 4
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 4
41549: NEG
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: NEG
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 4
41572: NEG
41573: PUSH
41574: LD_INT 4
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 4
41584: NEG
41585: PUSH
41586: LD_INT 5
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: LD_INT 4
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 3
41608: NEG
41609: PUSH
41610: LD_INT 3
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 4
41620: NEG
41621: PUSH
41622: LD_INT 3
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 5
41632: NEG
41633: PUSH
41634: LD_INT 4
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 5
41644: NEG
41645: PUSH
41646: LD_INT 5
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: LD_INT 5
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 5
41668: NEG
41669: PUSH
41670: LD_INT 3
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41725: LD_ADDR_VAR 0 30
41729: PUSH
41730: LD_INT 4
41732: PUSH
41733: LD_INT 4
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 4
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 5
41752: PUSH
41753: LD_INT 4
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 5
41762: PUSH
41763: LD_INT 5
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 4
41772: PUSH
41773: LD_INT 5
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: LD_INT 4
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 5
41802: PUSH
41803: LD_INT 3
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: LD_INT 5
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 4
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: LD_INT 4
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 4
41915: NEG
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 4
41926: NEG
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 3
41938: NEG
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 4
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 5
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 5
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 5
41994: NEG
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: LD_INT 3
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 3
42029: NEG
42030: PUSH
42031: LD_INT 4
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 3
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 3
42065: NEG
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 4
42077: NEG
42078: PUSH
42079: LD_INT 3
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 4
42089: NEG
42090: PUSH
42091: LD_INT 4
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 4
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 4
42113: NEG
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 4
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 5
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 4
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 3
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 4
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 5
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 3
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 5
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42272: LD_ADDR_VAR 0 31
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 4
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 4
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 5
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 5
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 4
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: LD_INT 5
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 3
42372: NEG
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 3
42383: NEG
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 4
42428: NEG
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 4
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 4
42451: NEG
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 4
42474: NEG
42475: PUSH
42476: LD_INT 4
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 4
42486: NEG
42487: PUSH
42488: LD_INT 5
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 3
42498: NEG
42499: PUSH
42500: LD_INT 4
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: LD_INT 3
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 4
42522: NEG
42523: PUSH
42524: LD_INT 3
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 5
42534: NEG
42535: PUSH
42536: LD_INT 4
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 5
42546: NEG
42547: PUSH
42548: LD_INT 5
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: LD_INT 5
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 5
42570: NEG
42571: PUSH
42572: LD_INT 3
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 4
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 3
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 4
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 4
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 4
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 4
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 5
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 5
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 4
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 5
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42822: LD_ADDR_VAR 0 32
42826: PUSH
42827: LD_INT 4
42829: NEG
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 4
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 4
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 5
42885: NEG
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 5
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 5
42908: NEG
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: LD_INT 4
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 3
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 3
42979: NEG
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 4
42991: NEG
42992: PUSH
42993: LD_INT 3
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 4
43003: NEG
43004: PUSH
43005: LD_INT 4
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 4
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 4
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 4
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 5
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 4
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 3
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 4
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 5
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 5
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 4
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 4
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 4
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 4
43234: PUSH
43235: LD_INT 4
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 4
43244: PUSH
43245: LD_INT 3
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 5
43254: PUSH
43255: LD_INT 4
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 5
43264: PUSH
43265: LD_INT 5
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 4
43274: PUSH
43275: LD_INT 5
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: LD_INT 4
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 5
43304: PUSH
43305: LD_INT 3
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: PUSH
43315: LD_INT 5
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43369: LD_ADDR_VAR 0 33
43373: PUSH
43374: LD_INT 4
43376: NEG
43377: PUSH
43378: LD_INT 4
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 4
43388: NEG
43389: PUSH
43390: LD_INT 5
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: LD_INT 4
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 4
43424: NEG
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 5
43436: NEG
43437: PUSH
43438: LD_INT 4
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 5
43448: NEG
43449: PUSH
43450: LD_INT 5
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 3
43460: NEG
43461: PUSH
43462: LD_INT 5
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 5
43472: NEG
43473: PUSH
43474: LD_INT 3
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 3
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 4
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 3
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 4
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: LD_INT 4
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 4
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 4
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 5
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 5
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 4
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 3
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 5
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 3
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 4
43699: PUSH
43700: LD_INT 3
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 4
43709: PUSH
43710: LD_INT 4
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: PUSH
43720: LD_INT 4
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 4
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 4
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 4
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 3
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 5
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 5
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 4
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 5
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 3
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43907: LD_ADDR_VAR 0 34
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 4
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 5
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 4
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 4
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 5
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 5
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 4
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 4
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 3
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 4
44109: PUSH
44110: LD_INT 4
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 4
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 5
44129: PUSH
44130: LD_INT 4
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 5
44139: PUSH
44140: LD_INT 5
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 4
44149: PUSH
44150: LD_INT 5
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 5
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 5
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 4
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 4
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 4
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 4
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: NEG
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 3
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 4
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 5
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 5
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 5
44371: NEG
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 3
44383: NEG
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// end ; end ;
44439: GO 44442
44441: POP
// case btype of b_depot , b_warehouse :
44442: LD_VAR 0 1
44446: PUSH
44447: LD_INT 0
44449: DOUBLE
44450: EQUAL
44451: IFTRUE 44461
44453: LD_INT 1
44455: DOUBLE
44456: EQUAL
44457: IFTRUE 44461
44459: GO 44662
44461: POP
// case nation of nation_american :
44462: LD_VAR 0 5
44466: PUSH
44467: LD_INT 1
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44531
44475: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44476: LD_ADDR_VAR 0 9
44480: PUSH
44481: LD_VAR 0 11
44485: PUSH
44486: LD_VAR 0 12
44490: PUSH
44491: LD_VAR 0 13
44495: PUSH
44496: LD_VAR 0 14
44500: PUSH
44501: LD_VAR 0 15
44505: PUSH
44506: LD_VAR 0 16
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: PUSH
44519: LD_VAR 0 4
44523: PUSH
44524: LD_INT 1
44526: PLUS
44527: ARRAY
44528: ST_TO_ADDR
44529: GO 44660
44531: LD_INT 2
44533: DOUBLE
44534: EQUAL
44535: IFTRUE 44539
44537: GO 44595
44539: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44540: LD_ADDR_VAR 0 9
44544: PUSH
44545: LD_VAR 0 17
44549: PUSH
44550: LD_VAR 0 18
44554: PUSH
44555: LD_VAR 0 19
44559: PUSH
44560: LD_VAR 0 20
44564: PUSH
44565: LD_VAR 0 21
44569: PUSH
44570: LD_VAR 0 22
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: PUSH
44583: LD_VAR 0 4
44587: PUSH
44588: LD_INT 1
44590: PLUS
44591: ARRAY
44592: ST_TO_ADDR
44593: GO 44660
44595: LD_INT 3
44597: DOUBLE
44598: EQUAL
44599: IFTRUE 44603
44601: GO 44659
44603: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44604: LD_ADDR_VAR 0 9
44608: PUSH
44609: LD_VAR 0 23
44613: PUSH
44614: LD_VAR 0 24
44618: PUSH
44619: LD_VAR 0 25
44623: PUSH
44624: LD_VAR 0 26
44628: PUSH
44629: LD_VAR 0 27
44633: PUSH
44634: LD_VAR 0 28
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: PUSH
44647: LD_VAR 0 4
44651: PUSH
44652: LD_INT 1
44654: PLUS
44655: ARRAY
44656: ST_TO_ADDR
44657: GO 44660
44659: POP
44660: GO 45215
44662: LD_INT 2
44664: DOUBLE
44665: EQUAL
44666: IFTRUE 44676
44668: LD_INT 3
44670: DOUBLE
44671: EQUAL
44672: IFTRUE 44676
44674: GO 44732
44676: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44677: LD_ADDR_VAR 0 9
44681: PUSH
44682: LD_VAR 0 29
44686: PUSH
44687: LD_VAR 0 30
44691: PUSH
44692: LD_VAR 0 31
44696: PUSH
44697: LD_VAR 0 32
44701: PUSH
44702: LD_VAR 0 33
44706: PUSH
44707: LD_VAR 0 34
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: PUSH
44720: LD_VAR 0 4
44724: PUSH
44725: LD_INT 1
44727: PLUS
44728: ARRAY
44729: ST_TO_ADDR
44730: GO 45215
44732: LD_INT 16
44734: DOUBLE
44735: EQUAL
44736: IFTRUE 44794
44738: LD_INT 17
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44794
44744: LD_INT 18
44746: DOUBLE
44747: EQUAL
44748: IFTRUE 44794
44750: LD_INT 19
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44794
44756: LD_INT 22
44758: DOUBLE
44759: EQUAL
44760: IFTRUE 44794
44762: LD_INT 20
44764: DOUBLE
44765: EQUAL
44766: IFTRUE 44794
44768: LD_INT 21
44770: DOUBLE
44771: EQUAL
44772: IFTRUE 44794
44774: LD_INT 23
44776: DOUBLE
44777: EQUAL
44778: IFTRUE 44794
44780: LD_INT 24
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44794
44786: LD_INT 25
44788: DOUBLE
44789: EQUAL
44790: IFTRUE 44794
44792: GO 44850
44794: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44795: LD_ADDR_VAR 0 9
44799: PUSH
44800: LD_VAR 0 35
44804: PUSH
44805: LD_VAR 0 36
44809: PUSH
44810: LD_VAR 0 37
44814: PUSH
44815: LD_VAR 0 38
44819: PUSH
44820: LD_VAR 0 39
44824: PUSH
44825: LD_VAR 0 40
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: PUSH
44838: LD_VAR 0 4
44842: PUSH
44843: LD_INT 1
44845: PLUS
44846: ARRAY
44847: ST_TO_ADDR
44848: GO 45215
44850: LD_INT 6
44852: DOUBLE
44853: EQUAL
44854: IFTRUE 44906
44856: LD_INT 7
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44906
44862: LD_INT 8
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44906
44868: LD_INT 13
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44906
44874: LD_INT 12
44876: DOUBLE
44877: EQUAL
44878: IFTRUE 44906
44880: LD_INT 15
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44906
44886: LD_INT 11
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44906
44892: LD_INT 14
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44906
44898: LD_INT 10
44900: DOUBLE
44901: EQUAL
44902: IFTRUE 44906
44904: GO 44962
44906: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44907: LD_ADDR_VAR 0 9
44911: PUSH
44912: LD_VAR 0 41
44916: PUSH
44917: LD_VAR 0 42
44921: PUSH
44922: LD_VAR 0 43
44926: PUSH
44927: LD_VAR 0 44
44931: PUSH
44932: LD_VAR 0 45
44936: PUSH
44937: LD_VAR 0 46
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: PUSH
44950: LD_VAR 0 4
44954: PUSH
44955: LD_INT 1
44957: PLUS
44958: ARRAY
44959: ST_TO_ADDR
44960: GO 45215
44962: LD_INT 36
44964: DOUBLE
44965: EQUAL
44966: IFTRUE 44970
44968: GO 45026
44970: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44971: LD_ADDR_VAR 0 9
44975: PUSH
44976: LD_VAR 0 47
44980: PUSH
44981: LD_VAR 0 48
44985: PUSH
44986: LD_VAR 0 49
44990: PUSH
44991: LD_VAR 0 50
44995: PUSH
44996: LD_VAR 0 51
45000: PUSH
45001: LD_VAR 0 52
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: PUSH
45014: LD_VAR 0 4
45018: PUSH
45019: LD_INT 1
45021: PLUS
45022: ARRAY
45023: ST_TO_ADDR
45024: GO 45215
45026: LD_INT 4
45028: DOUBLE
45029: EQUAL
45030: IFTRUE 45052
45032: LD_INT 5
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45052
45038: LD_INT 34
45040: DOUBLE
45041: EQUAL
45042: IFTRUE 45052
45044: LD_INT 37
45046: DOUBLE
45047: EQUAL
45048: IFTRUE 45052
45050: GO 45108
45052: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_VAR 0 53
45062: PUSH
45063: LD_VAR 0 54
45067: PUSH
45068: LD_VAR 0 55
45072: PUSH
45073: LD_VAR 0 56
45077: PUSH
45078: LD_VAR 0 57
45082: PUSH
45083: LD_VAR 0 58
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: PUSH
45096: LD_VAR 0 4
45100: PUSH
45101: LD_INT 1
45103: PLUS
45104: ARRAY
45105: ST_TO_ADDR
45106: GO 45215
45108: LD_INT 31
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45158
45114: LD_INT 32
45116: DOUBLE
45117: EQUAL
45118: IFTRUE 45158
45120: LD_INT 33
45122: DOUBLE
45123: EQUAL
45124: IFTRUE 45158
45126: LD_INT 27
45128: DOUBLE
45129: EQUAL
45130: IFTRUE 45158
45132: LD_INT 26
45134: DOUBLE
45135: EQUAL
45136: IFTRUE 45158
45138: LD_INT 28
45140: DOUBLE
45141: EQUAL
45142: IFTRUE 45158
45144: LD_INT 29
45146: DOUBLE
45147: EQUAL
45148: IFTRUE 45158
45150: LD_INT 30
45152: DOUBLE
45153: EQUAL
45154: IFTRUE 45158
45156: GO 45214
45158: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45159: LD_ADDR_VAR 0 9
45163: PUSH
45164: LD_VAR 0 59
45168: PUSH
45169: LD_VAR 0 60
45173: PUSH
45174: LD_VAR 0 61
45178: PUSH
45179: LD_VAR 0 62
45183: PUSH
45184: LD_VAR 0 63
45188: PUSH
45189: LD_VAR 0 64
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: PUSH
45202: LD_VAR 0 4
45206: PUSH
45207: LD_INT 1
45209: PLUS
45210: ARRAY
45211: ST_TO_ADDR
45212: GO 45215
45214: POP
// temp_list2 = [ ] ;
45215: LD_ADDR_VAR 0 10
45219: PUSH
45220: EMPTY
45221: ST_TO_ADDR
// for i in temp_list do
45222: LD_ADDR_VAR 0 8
45226: PUSH
45227: LD_VAR 0 9
45231: PUSH
45232: FOR_IN
45233: IFFALSE 45285
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45235: LD_ADDR_VAR 0 10
45239: PUSH
45240: LD_VAR 0 10
45244: PUSH
45245: LD_VAR 0 8
45249: PUSH
45250: LD_INT 1
45252: ARRAY
45253: PUSH
45254: LD_VAR 0 2
45258: PLUS
45259: PUSH
45260: LD_VAR 0 8
45264: PUSH
45265: LD_INT 2
45267: ARRAY
45268: PUSH
45269: LD_VAR 0 3
45273: PLUS
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: EMPTY
45280: LIST
45281: ADD
45282: ST_TO_ADDR
45283: GO 45232
45285: POP
45286: POP
// result = temp_list2 ;
45287: LD_ADDR_VAR 0 7
45291: PUSH
45292: LD_VAR 0 10
45296: ST_TO_ADDR
// end ;
45297: LD_VAR 0 7
45301: RET
// export function EnemyInRange ( unit , dist ) ; begin
45302: LD_INT 0
45304: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_VAR 0 1
45314: PPUSH
45315: CALL_OW 255
45319: PPUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: CALL_OW 250
45329: PPUSH
45330: LD_VAR 0 1
45334: PPUSH
45335: CALL_OW 251
45339: PPUSH
45340: LD_VAR 0 2
45344: PPUSH
45345: CALL 19406 0 4
45349: PUSH
45350: LD_INT 4
45352: ARRAY
45353: ST_TO_ADDR
// end ;
45354: LD_VAR 0 3
45358: RET
// export function PlayerSeeMe ( unit ) ; begin
45359: LD_INT 0
45361: PPUSH
// result := See ( your_side , unit ) ;
45362: LD_ADDR_VAR 0 2
45366: PUSH
45367: LD_OWVAR 2
45371: PPUSH
45372: LD_VAR 0 1
45376: PPUSH
45377: CALL_OW 292
45381: ST_TO_ADDR
// end ;
45382: LD_VAR 0 2
45386: RET
// export function ReverseDir ( unit ) ; begin
45387: LD_INT 0
45389: PPUSH
// if not unit then
45390: LD_VAR 0 1
45394: NOT
45395: IFFALSE 45399
// exit ;
45397: GO 45422
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: CALL_OW 254
45413: PUSH
45414: LD_INT 3
45416: PLUS
45417: PUSH
45418: LD_INT 6
45420: MOD
45421: ST_TO_ADDR
// end ;
45422: LD_VAR 0 2
45426: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45427: LD_INT 0
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
// if not hexes then
45434: LD_VAR 0 2
45438: NOT
45439: IFFALSE 45443
// exit ;
45441: GO 45591
// dist := 9999 ;
45443: LD_ADDR_VAR 0 5
45447: PUSH
45448: LD_INT 9999
45450: ST_TO_ADDR
// for i = 1 to hexes do
45451: LD_ADDR_VAR 0 4
45455: PUSH
45456: DOUBLE
45457: LD_INT 1
45459: DEC
45460: ST_TO_ADDR
45461: LD_VAR 0 2
45465: PUSH
45466: FOR_TO
45467: IFFALSE 45579
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45469: LD_VAR 0 1
45473: PPUSH
45474: LD_VAR 0 2
45478: PUSH
45479: LD_VAR 0 4
45483: ARRAY
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PPUSH
45489: LD_VAR 0 2
45493: PUSH
45494: LD_VAR 0 4
45498: ARRAY
45499: PUSH
45500: LD_INT 2
45502: ARRAY
45503: PPUSH
45504: CALL_OW 297
45508: PUSH
45509: LD_VAR 0 5
45513: LESS
45514: IFFALSE 45577
// begin hex := hexes [ i ] ;
45516: LD_ADDR_VAR 0 7
45520: PUSH
45521: LD_VAR 0 2
45525: PUSH
45526: LD_VAR 0 4
45530: ARRAY
45531: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45532: LD_ADDR_VAR 0 5
45536: PUSH
45537: LD_VAR 0 1
45541: PPUSH
45542: LD_VAR 0 2
45546: PUSH
45547: LD_VAR 0 4
45551: ARRAY
45552: PUSH
45553: LD_INT 1
45555: ARRAY
45556: PPUSH
45557: LD_VAR 0 2
45561: PUSH
45562: LD_VAR 0 4
45566: ARRAY
45567: PUSH
45568: LD_INT 2
45570: ARRAY
45571: PPUSH
45572: CALL_OW 297
45576: ST_TO_ADDR
// end ; end ;
45577: GO 45466
45579: POP
45580: POP
// result := hex ;
45581: LD_ADDR_VAR 0 3
45585: PUSH
45586: LD_VAR 0 7
45590: ST_TO_ADDR
// end ;
45591: LD_VAR 0 3
45595: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45596: LD_INT 0
45598: PPUSH
45599: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45600: LD_VAR 0 1
45604: NOT
45605: PUSH
45606: LD_VAR 0 1
45610: PUSH
45611: LD_INT 21
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 23
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PPUSH
45635: CALL_OW 69
45639: IN
45640: NOT
45641: OR
45642: IFFALSE 45646
// exit ;
45644: GO 45693
// for i = 1 to 3 do
45646: LD_ADDR_VAR 0 3
45650: PUSH
45651: DOUBLE
45652: LD_INT 1
45654: DEC
45655: ST_TO_ADDR
45656: LD_INT 3
45658: PUSH
45659: FOR_TO
45660: IFFALSE 45691
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45662: LD_VAR 0 1
45666: PPUSH
45667: CALL_OW 250
45671: PPUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: CALL_OW 251
45681: PPUSH
45682: LD_INT 1
45684: PPUSH
45685: CALL_OW 453
45689: GO 45659
45691: POP
45692: POP
// end ;
45693: LD_VAR 0 2
45697: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45698: LD_INT 0
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45706: LD_VAR 0 1
45710: NOT
45711: PUSH
45712: LD_VAR 0 2
45716: NOT
45717: OR
45718: PUSH
45719: LD_VAR 0 1
45723: PPUSH
45724: CALL_OW 314
45728: OR
45729: IFFALSE 45733
// exit ;
45731: GO 46174
// x := GetX ( enemy_unit ) ;
45733: LD_ADDR_VAR 0 7
45737: PUSH
45738: LD_VAR 0 2
45742: PPUSH
45743: CALL_OW 250
45747: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45748: LD_ADDR_VAR 0 8
45752: PUSH
45753: LD_VAR 0 2
45757: PPUSH
45758: CALL_OW 251
45762: ST_TO_ADDR
// if not x or not y then
45763: LD_VAR 0 7
45767: NOT
45768: PUSH
45769: LD_VAR 0 8
45773: NOT
45774: OR
45775: IFFALSE 45779
// exit ;
45777: GO 46174
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45779: LD_ADDR_VAR 0 6
45783: PUSH
45784: LD_VAR 0 7
45788: PPUSH
45789: LD_INT 0
45791: PPUSH
45792: LD_INT 4
45794: PPUSH
45795: CALL_OW 272
45799: PUSH
45800: LD_VAR 0 8
45804: PPUSH
45805: LD_INT 0
45807: PPUSH
45808: LD_INT 4
45810: PPUSH
45811: CALL_OW 273
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_VAR 0 7
45824: PPUSH
45825: LD_INT 1
45827: PPUSH
45828: LD_INT 4
45830: PPUSH
45831: CALL_OW 272
45835: PUSH
45836: LD_VAR 0 8
45840: PPUSH
45841: LD_INT 1
45843: PPUSH
45844: LD_INT 4
45846: PPUSH
45847: CALL_OW 273
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_VAR 0 7
45860: PPUSH
45861: LD_INT 2
45863: PPUSH
45864: LD_INT 4
45866: PPUSH
45867: CALL_OW 272
45871: PUSH
45872: LD_VAR 0 8
45876: PPUSH
45877: LD_INT 2
45879: PPUSH
45880: LD_INT 4
45882: PPUSH
45883: CALL_OW 273
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_VAR 0 7
45896: PPUSH
45897: LD_INT 3
45899: PPUSH
45900: LD_INT 4
45902: PPUSH
45903: CALL_OW 272
45907: PUSH
45908: LD_VAR 0 8
45912: PPUSH
45913: LD_INT 3
45915: PPUSH
45916: LD_INT 4
45918: PPUSH
45919: CALL_OW 273
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_VAR 0 7
45932: PPUSH
45933: LD_INT 4
45935: PPUSH
45936: LD_INT 4
45938: PPUSH
45939: CALL_OW 272
45943: PUSH
45944: LD_VAR 0 8
45948: PPUSH
45949: LD_INT 4
45951: PPUSH
45952: LD_INT 4
45954: PPUSH
45955: CALL_OW 273
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_VAR 0 7
45968: PPUSH
45969: LD_INT 5
45971: PPUSH
45972: LD_INT 4
45974: PPUSH
45975: CALL_OW 272
45979: PUSH
45980: LD_VAR 0 8
45984: PPUSH
45985: LD_INT 5
45987: PPUSH
45988: LD_INT 4
45990: PPUSH
45991: CALL_OW 273
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
// for i = tmp downto 1 do
46008: LD_ADDR_VAR 0 4
46012: PUSH
46013: DOUBLE
46014: LD_VAR 0 6
46018: INC
46019: ST_TO_ADDR
46020: LD_INT 1
46022: PUSH
46023: FOR_DOWNTO
46024: IFFALSE 46125
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46026: LD_VAR 0 6
46030: PUSH
46031: LD_VAR 0 4
46035: ARRAY
46036: PUSH
46037: LD_INT 1
46039: ARRAY
46040: PPUSH
46041: LD_VAR 0 6
46045: PUSH
46046: LD_VAR 0 4
46050: ARRAY
46051: PUSH
46052: LD_INT 2
46054: ARRAY
46055: PPUSH
46056: CALL_OW 488
46060: NOT
46061: PUSH
46062: LD_VAR 0 6
46066: PUSH
46067: LD_VAR 0 4
46071: ARRAY
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: PPUSH
46077: LD_VAR 0 6
46081: PUSH
46082: LD_VAR 0 4
46086: ARRAY
46087: PUSH
46088: LD_INT 2
46090: ARRAY
46091: PPUSH
46092: CALL_OW 428
46096: PUSH
46097: LD_INT 0
46099: NONEQUAL
46100: OR
46101: IFFALSE 46123
// tmp := Delete ( tmp , i ) ;
46103: LD_ADDR_VAR 0 6
46107: PUSH
46108: LD_VAR 0 6
46112: PPUSH
46113: LD_VAR 0 4
46117: PPUSH
46118: CALL_OW 3
46122: ST_TO_ADDR
46123: GO 46023
46125: POP
46126: POP
// j := GetClosestHex ( unit , tmp ) ;
46127: LD_ADDR_VAR 0 5
46131: PUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: LD_VAR 0 6
46141: PPUSH
46142: CALL 45427 0 2
46146: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46147: LD_VAR 0 1
46151: PPUSH
46152: LD_VAR 0 5
46156: PUSH
46157: LD_INT 1
46159: ARRAY
46160: PPUSH
46161: LD_VAR 0 5
46165: PUSH
46166: LD_INT 2
46168: ARRAY
46169: PPUSH
46170: CALL_OW 111
// end ;
46174: LD_VAR 0 3
46178: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46179: LD_INT 0
46181: PPUSH
46182: PPUSH
46183: PPUSH
// uc_side = 0 ;
46184: LD_ADDR_OWVAR 20
46188: PUSH
46189: LD_INT 0
46191: ST_TO_ADDR
// uc_nation = 0 ;
46192: LD_ADDR_OWVAR 21
46196: PUSH
46197: LD_INT 0
46199: ST_TO_ADDR
// InitHc ;
46200: CALL_OW 19
// InitVc ;
46204: CALL_OW 20
// if mastodonts then
46208: LD_VAR 0 6
46212: IFFALSE 46279
// for i = 1 to mastodonts do
46214: LD_ADDR_VAR 0 11
46218: PUSH
46219: DOUBLE
46220: LD_INT 1
46222: DEC
46223: ST_TO_ADDR
46224: LD_VAR 0 6
46228: PUSH
46229: FOR_TO
46230: IFFALSE 46277
// begin vc_chassis := 31 ;
46232: LD_ADDR_OWVAR 37
46236: PUSH
46237: LD_INT 31
46239: ST_TO_ADDR
// vc_control := control_rider ;
46240: LD_ADDR_OWVAR 38
46244: PUSH
46245: LD_INT 4
46247: ST_TO_ADDR
// animal := CreateVehicle ;
46248: LD_ADDR_VAR 0 12
46252: PUSH
46253: CALL_OW 45
46257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46258: LD_VAR 0 12
46262: PPUSH
46263: LD_VAR 0 8
46267: PPUSH
46268: LD_INT 0
46270: PPUSH
46271: CALL 48348 0 3
// end ;
46275: GO 46229
46277: POP
46278: POP
// if horses then
46279: LD_VAR 0 5
46283: IFFALSE 46350
// for i = 1 to horses do
46285: LD_ADDR_VAR 0 11
46289: PUSH
46290: DOUBLE
46291: LD_INT 1
46293: DEC
46294: ST_TO_ADDR
46295: LD_VAR 0 5
46299: PUSH
46300: FOR_TO
46301: IFFALSE 46348
// begin hc_class := 21 ;
46303: LD_ADDR_OWVAR 28
46307: PUSH
46308: LD_INT 21
46310: ST_TO_ADDR
// hc_gallery :=  ;
46311: LD_ADDR_OWVAR 33
46315: PUSH
46316: LD_STRING 
46318: ST_TO_ADDR
// animal := CreateHuman ;
46319: LD_ADDR_VAR 0 12
46323: PUSH
46324: CALL_OW 44
46328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46329: LD_VAR 0 12
46333: PPUSH
46334: LD_VAR 0 8
46338: PPUSH
46339: LD_INT 0
46341: PPUSH
46342: CALL 48348 0 3
// end ;
46346: GO 46300
46348: POP
46349: POP
// if birds then
46350: LD_VAR 0 1
46354: IFFALSE 46421
// for i = 1 to birds do
46356: LD_ADDR_VAR 0 11
46360: PUSH
46361: DOUBLE
46362: LD_INT 1
46364: DEC
46365: ST_TO_ADDR
46366: LD_VAR 0 1
46370: PUSH
46371: FOR_TO
46372: IFFALSE 46419
// begin hc_class = 18 ;
46374: LD_ADDR_OWVAR 28
46378: PUSH
46379: LD_INT 18
46381: ST_TO_ADDR
// hc_gallery =  ;
46382: LD_ADDR_OWVAR 33
46386: PUSH
46387: LD_STRING 
46389: ST_TO_ADDR
// animal := CreateHuman ;
46390: LD_ADDR_VAR 0 12
46394: PUSH
46395: CALL_OW 44
46399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46400: LD_VAR 0 12
46404: PPUSH
46405: LD_VAR 0 8
46409: PPUSH
46410: LD_INT 0
46412: PPUSH
46413: CALL 48348 0 3
// end ;
46417: GO 46371
46419: POP
46420: POP
// if tigers then
46421: LD_VAR 0 2
46425: IFFALSE 46509
// for i = 1 to tigers do
46427: LD_ADDR_VAR 0 11
46431: PUSH
46432: DOUBLE
46433: LD_INT 1
46435: DEC
46436: ST_TO_ADDR
46437: LD_VAR 0 2
46441: PUSH
46442: FOR_TO
46443: IFFALSE 46507
// begin hc_class = class_tiger ;
46445: LD_ADDR_OWVAR 28
46449: PUSH
46450: LD_INT 14
46452: ST_TO_ADDR
// hc_gallery =  ;
46453: LD_ADDR_OWVAR 33
46457: PUSH
46458: LD_STRING 
46460: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46461: LD_ADDR_OWVAR 35
46465: PUSH
46466: LD_INT 7
46468: NEG
46469: PPUSH
46470: LD_INT 7
46472: PPUSH
46473: CALL_OW 12
46477: ST_TO_ADDR
// animal := CreateHuman ;
46478: LD_ADDR_VAR 0 12
46482: PUSH
46483: CALL_OW 44
46487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46488: LD_VAR 0 12
46492: PPUSH
46493: LD_VAR 0 8
46497: PPUSH
46498: LD_INT 0
46500: PPUSH
46501: CALL 48348 0 3
// end ;
46505: GO 46442
46507: POP
46508: POP
// if apemans then
46509: LD_VAR 0 3
46513: IFFALSE 46636
// for i = 1 to apemans do
46515: LD_ADDR_VAR 0 11
46519: PUSH
46520: DOUBLE
46521: LD_INT 1
46523: DEC
46524: ST_TO_ADDR
46525: LD_VAR 0 3
46529: PUSH
46530: FOR_TO
46531: IFFALSE 46634
// begin hc_class = class_apeman ;
46533: LD_ADDR_OWVAR 28
46537: PUSH
46538: LD_INT 12
46540: ST_TO_ADDR
// hc_gallery =  ;
46541: LD_ADDR_OWVAR 33
46545: PUSH
46546: LD_STRING 
46548: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46549: LD_ADDR_OWVAR 35
46553: PUSH
46554: LD_INT 5
46556: NEG
46557: PPUSH
46558: LD_INT 5
46560: PPUSH
46561: CALL_OW 12
46565: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46566: LD_ADDR_OWVAR 31
46570: PUSH
46571: LD_INT 1
46573: PPUSH
46574: LD_INT 3
46576: PPUSH
46577: CALL_OW 12
46581: PUSH
46582: LD_INT 1
46584: PPUSH
46585: LD_INT 3
46587: PPUSH
46588: CALL_OW 12
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: ST_TO_ADDR
// animal := CreateHuman ;
46605: LD_ADDR_VAR 0 12
46609: PUSH
46610: CALL_OW 44
46614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46615: LD_VAR 0 12
46619: PPUSH
46620: LD_VAR 0 8
46624: PPUSH
46625: LD_INT 0
46627: PPUSH
46628: CALL 48348 0 3
// end ;
46632: GO 46530
46634: POP
46635: POP
// if enchidnas then
46636: LD_VAR 0 4
46640: IFFALSE 46707
// for i = 1 to enchidnas do
46642: LD_ADDR_VAR 0 11
46646: PUSH
46647: DOUBLE
46648: LD_INT 1
46650: DEC
46651: ST_TO_ADDR
46652: LD_VAR 0 4
46656: PUSH
46657: FOR_TO
46658: IFFALSE 46705
// begin hc_class = 13 ;
46660: LD_ADDR_OWVAR 28
46664: PUSH
46665: LD_INT 13
46667: ST_TO_ADDR
// hc_gallery =  ;
46668: LD_ADDR_OWVAR 33
46672: PUSH
46673: LD_STRING 
46675: ST_TO_ADDR
// animal := CreateHuman ;
46676: LD_ADDR_VAR 0 12
46680: PUSH
46681: CALL_OW 44
46685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46686: LD_VAR 0 12
46690: PPUSH
46691: LD_VAR 0 8
46695: PPUSH
46696: LD_INT 0
46698: PPUSH
46699: CALL 48348 0 3
// end ;
46703: GO 46657
46705: POP
46706: POP
// if fishes then
46707: LD_VAR 0 7
46711: IFFALSE 46778
// for i = 1 to fishes do
46713: LD_ADDR_VAR 0 11
46717: PUSH
46718: DOUBLE
46719: LD_INT 1
46721: DEC
46722: ST_TO_ADDR
46723: LD_VAR 0 7
46727: PUSH
46728: FOR_TO
46729: IFFALSE 46776
// begin hc_class = 20 ;
46731: LD_ADDR_OWVAR 28
46735: PUSH
46736: LD_INT 20
46738: ST_TO_ADDR
// hc_gallery =  ;
46739: LD_ADDR_OWVAR 33
46743: PUSH
46744: LD_STRING 
46746: ST_TO_ADDR
// animal := CreateHuman ;
46747: LD_ADDR_VAR 0 12
46751: PUSH
46752: CALL_OW 44
46756: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46757: LD_VAR 0 12
46761: PPUSH
46762: LD_VAR 0 9
46766: PPUSH
46767: LD_INT 0
46769: PPUSH
46770: CALL 48348 0 3
// end ;
46774: GO 46728
46776: POP
46777: POP
// end ;
46778: LD_VAR 0 10
46782: RET
// export function WantHeal ( sci , unit ) ; begin
46783: LD_INT 0
46785: PPUSH
// if GetTaskList ( sci ) > 0 then
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 437
46795: PUSH
46796: LD_INT 0
46798: GREATER
46799: IFFALSE 46869
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46801: LD_VAR 0 1
46805: PPUSH
46806: CALL_OW 437
46810: PUSH
46811: LD_INT 1
46813: ARRAY
46814: PUSH
46815: LD_INT 1
46817: ARRAY
46818: PUSH
46819: LD_STRING l
46821: EQUAL
46822: PUSH
46823: LD_VAR 0 1
46827: PPUSH
46828: CALL_OW 437
46832: PUSH
46833: LD_INT 1
46835: ARRAY
46836: PUSH
46837: LD_INT 4
46839: ARRAY
46840: PUSH
46841: LD_VAR 0 2
46845: EQUAL
46846: AND
46847: IFFALSE 46859
// result := true else
46849: LD_ADDR_VAR 0 3
46853: PUSH
46854: LD_INT 1
46856: ST_TO_ADDR
46857: GO 46867
// result := false ;
46859: LD_ADDR_VAR 0 3
46863: PUSH
46864: LD_INT 0
46866: ST_TO_ADDR
// end else
46867: GO 46877
// result := false ;
46869: LD_ADDR_VAR 0 3
46873: PUSH
46874: LD_INT 0
46876: ST_TO_ADDR
// end ;
46877: LD_VAR 0 3
46881: RET
// export function HealTarget ( sci ) ; begin
46882: LD_INT 0
46884: PPUSH
// if not sci then
46885: LD_VAR 0 1
46889: NOT
46890: IFFALSE 46894
// exit ;
46892: GO 46959
// result := 0 ;
46894: LD_ADDR_VAR 0 2
46898: PUSH
46899: LD_INT 0
46901: ST_TO_ADDR
// if GetTaskList ( sci ) then
46902: LD_VAR 0 1
46906: PPUSH
46907: CALL_OW 437
46911: IFFALSE 46959
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46913: LD_VAR 0 1
46917: PPUSH
46918: CALL_OW 437
46922: PUSH
46923: LD_INT 1
46925: ARRAY
46926: PUSH
46927: LD_INT 1
46929: ARRAY
46930: PUSH
46931: LD_STRING l
46933: EQUAL
46934: IFFALSE 46959
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46936: LD_ADDR_VAR 0 2
46940: PUSH
46941: LD_VAR 0 1
46945: PPUSH
46946: CALL_OW 437
46950: PUSH
46951: LD_INT 1
46953: ARRAY
46954: PUSH
46955: LD_INT 4
46957: ARRAY
46958: ST_TO_ADDR
// end ;
46959: LD_VAR 0 2
46963: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46964: LD_INT 0
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
// if not base_units then
46970: LD_VAR 0 1
46974: NOT
46975: IFFALSE 46979
// exit ;
46977: GO 47066
// result := false ;
46979: LD_ADDR_VAR 0 2
46983: PUSH
46984: LD_INT 0
46986: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46987: LD_ADDR_VAR 0 5
46991: PUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: LD_INT 21
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PPUSH
47007: CALL_OW 72
47011: ST_TO_ADDR
// if not tmp then
47012: LD_VAR 0 5
47016: NOT
47017: IFFALSE 47021
// exit ;
47019: GO 47066
// for i in tmp do
47021: LD_ADDR_VAR 0 3
47025: PUSH
47026: LD_VAR 0 5
47030: PUSH
47031: FOR_IN
47032: IFFALSE 47064
// begin result := EnemyInRange ( i , 22 ) ;
47034: LD_ADDR_VAR 0 2
47038: PUSH
47039: LD_VAR 0 3
47043: PPUSH
47044: LD_INT 22
47046: PPUSH
47047: CALL 45302 0 2
47051: ST_TO_ADDR
// if result then
47052: LD_VAR 0 2
47056: IFFALSE 47062
// exit ;
47058: POP
47059: POP
47060: GO 47066
// end ;
47062: GO 47031
47064: POP
47065: POP
// end ;
47066: LD_VAR 0 2
47070: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
47071: LD_INT 0
47073: PPUSH
47074: PPUSH
// if not units then
47075: LD_VAR 0 1
47079: NOT
47080: IFFALSE 47084
// exit ;
47082: GO 47154
// result := [ ] ;
47084: LD_ADDR_VAR 0 3
47088: PUSH
47089: EMPTY
47090: ST_TO_ADDR
// for i in units do
47091: LD_ADDR_VAR 0 4
47095: PUSH
47096: LD_VAR 0 1
47100: PUSH
47101: FOR_IN
47102: IFFALSE 47152
// if GetTag ( i ) = tag then
47104: LD_VAR 0 4
47108: PPUSH
47109: CALL_OW 110
47113: PUSH
47114: LD_VAR 0 2
47118: EQUAL
47119: IFFALSE 47150
// result := Insert ( result , result + 1 , i ) ;
47121: LD_ADDR_VAR 0 3
47125: PUSH
47126: LD_VAR 0 3
47130: PPUSH
47131: LD_VAR 0 3
47135: PUSH
47136: LD_INT 1
47138: PLUS
47139: PPUSH
47140: LD_VAR 0 4
47144: PPUSH
47145: CALL_OW 2
47149: ST_TO_ADDR
47150: GO 47101
47152: POP
47153: POP
// end ;
47154: LD_VAR 0 3
47158: RET
// export function IsDriver ( un ) ; begin
47159: LD_INT 0
47161: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47162: LD_ADDR_VAR 0 2
47166: PUSH
47167: LD_VAR 0 1
47171: PUSH
47172: LD_INT 55
47174: PUSH
47175: EMPTY
47176: LIST
47177: PPUSH
47178: CALL_OW 69
47182: IN
47183: ST_TO_ADDR
// end ;
47184: LD_VAR 0 2
47188: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47189: LD_INT 0
47191: PPUSH
47192: PPUSH
// list := [ ] ;
47193: LD_ADDR_VAR 0 5
47197: PUSH
47198: EMPTY
47199: ST_TO_ADDR
// case d of 0 :
47200: LD_VAR 0 3
47204: PUSH
47205: LD_INT 0
47207: DOUBLE
47208: EQUAL
47209: IFTRUE 47213
47211: GO 47346
47213: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47214: LD_ADDR_VAR 0 5
47218: PUSH
47219: LD_VAR 0 1
47223: PUSH
47224: LD_INT 4
47226: MINUS
47227: PUSH
47228: LD_VAR 0 2
47232: PUSH
47233: LD_INT 4
47235: MINUS
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: PUSH
47245: LD_VAR 0 1
47249: PUSH
47250: LD_INT 3
47252: MINUS
47253: PUSH
47254: LD_VAR 0 2
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: PUSH
47267: LD_VAR 0 1
47271: PUSH
47272: LD_INT 4
47274: PLUS
47275: PUSH
47276: LD_VAR 0 2
47280: PUSH
47281: LD_INT 4
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: LIST
47288: PUSH
47289: LD_VAR 0 1
47293: PUSH
47294: LD_INT 3
47296: PLUS
47297: PUSH
47298: LD_VAR 0 2
47302: PUSH
47303: LD_INT 3
47305: PLUS
47306: PUSH
47307: LD_INT 5
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: PUSH
47315: LD_VAR 0 1
47319: PUSH
47320: LD_VAR 0 2
47324: PUSH
47325: LD_INT 4
47327: PLUS
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: LIST
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// end ; 1 :
47344: GO 48044
47346: LD_INT 1
47348: DOUBLE
47349: EQUAL
47350: IFTRUE 47354
47352: GO 47487
47354: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47355: LD_ADDR_VAR 0 5
47359: PUSH
47360: LD_VAR 0 1
47364: PUSH
47365: LD_VAR 0 2
47369: PUSH
47370: LD_INT 4
47372: MINUS
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: PUSH
47382: LD_VAR 0 1
47386: PUSH
47387: LD_INT 3
47389: MINUS
47390: PUSH
47391: LD_VAR 0 2
47395: PUSH
47396: LD_INT 3
47398: MINUS
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: PUSH
47408: LD_VAR 0 1
47412: PUSH
47413: LD_INT 4
47415: MINUS
47416: PUSH
47417: LD_VAR 0 2
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: PUSH
47430: LD_VAR 0 1
47434: PUSH
47435: LD_VAR 0 2
47439: PUSH
47440: LD_INT 3
47442: PLUS
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: PUSH
47452: LD_VAR 0 1
47456: PUSH
47457: LD_INT 4
47459: PLUS
47460: PUSH
47461: LD_VAR 0 2
47465: PUSH
47466: LD_INT 4
47468: PLUS
47469: PUSH
47470: LD_INT 5
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: ST_TO_ADDR
// end ; 2 :
47485: GO 48044
47487: LD_INT 2
47489: DOUBLE
47490: EQUAL
47491: IFTRUE 47495
47493: GO 47624
47495: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47496: LD_ADDR_VAR 0 5
47500: PUSH
47501: LD_VAR 0 1
47505: PUSH
47506: LD_VAR 0 2
47510: PUSH
47511: LD_INT 3
47513: MINUS
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: PUSH
47523: LD_VAR 0 1
47527: PUSH
47528: LD_INT 4
47530: PLUS
47531: PUSH
47532: LD_VAR 0 2
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: PUSH
47545: LD_VAR 0 1
47549: PUSH
47550: LD_VAR 0 2
47554: PUSH
47555: LD_INT 4
47557: PLUS
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: PUSH
47567: LD_VAR 0 1
47571: PUSH
47572: LD_INT 3
47574: MINUS
47575: PUSH
47576: LD_VAR 0 2
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: LIST
47588: PUSH
47589: LD_VAR 0 1
47593: PUSH
47594: LD_INT 4
47596: MINUS
47597: PUSH
47598: LD_VAR 0 2
47602: PUSH
47603: LD_INT 4
47605: MINUS
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// end ; 3 :
47622: GO 48044
47624: LD_INT 3
47626: DOUBLE
47627: EQUAL
47628: IFTRUE 47632
47630: GO 47765
47632: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47633: LD_ADDR_VAR 0 5
47637: PUSH
47638: LD_VAR 0 1
47642: PUSH
47643: LD_INT 3
47645: PLUS
47646: PUSH
47647: LD_VAR 0 2
47651: PUSH
47652: LD_INT 4
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: LIST
47659: PUSH
47660: LD_VAR 0 1
47664: PUSH
47665: LD_INT 4
47667: PLUS
47668: PUSH
47669: LD_VAR 0 2
47673: PUSH
47674: LD_INT 4
47676: PLUS
47677: PUSH
47678: LD_INT 5
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: PUSH
47686: LD_VAR 0 1
47690: PUSH
47691: LD_INT 4
47693: MINUS
47694: PUSH
47695: LD_VAR 0 2
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: PUSH
47708: LD_VAR 0 1
47712: PUSH
47713: LD_VAR 0 2
47717: PUSH
47718: LD_INT 4
47720: MINUS
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: PUSH
47730: LD_VAR 0 1
47734: PUSH
47735: LD_INT 3
47737: MINUS
47738: PUSH
47739: LD_VAR 0 2
47743: PUSH
47744: LD_INT 3
47746: MINUS
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: ST_TO_ADDR
// end ; 4 :
47763: GO 48044
47765: LD_INT 4
47767: DOUBLE
47768: EQUAL
47769: IFTRUE 47773
47771: GO 47906
47773: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47774: LD_ADDR_VAR 0 5
47778: PUSH
47779: LD_VAR 0 1
47783: PUSH
47784: LD_VAR 0 2
47788: PUSH
47789: LD_INT 4
47791: PLUS
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: PUSH
47801: LD_VAR 0 1
47805: PUSH
47806: LD_INT 3
47808: PLUS
47809: PUSH
47810: LD_VAR 0 2
47814: PUSH
47815: LD_INT 3
47817: PLUS
47818: PUSH
47819: LD_INT 5
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: PUSH
47827: LD_VAR 0 1
47831: PUSH
47832: LD_INT 4
47834: PLUS
47835: PUSH
47836: LD_VAR 0 2
47840: PUSH
47841: LD_INT 4
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: PUSH
47849: LD_VAR 0 1
47853: PUSH
47854: LD_VAR 0 2
47858: PUSH
47859: LD_INT 3
47861: MINUS
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: PUSH
47871: LD_VAR 0 1
47875: PUSH
47876: LD_INT 4
47878: MINUS
47879: PUSH
47880: LD_VAR 0 2
47884: PUSH
47885: LD_INT 4
47887: MINUS
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// end ; 5 :
47904: GO 48044
47906: LD_INT 5
47908: DOUBLE
47909: EQUAL
47910: IFTRUE 47914
47912: GO 48043
47914: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47915: LD_ADDR_VAR 0 5
47919: PUSH
47920: LD_VAR 0 1
47924: PUSH
47925: LD_INT 4
47927: MINUS
47928: PUSH
47929: LD_VAR 0 2
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: PUSH
47942: LD_VAR 0 1
47946: PUSH
47947: LD_VAR 0 2
47951: PUSH
47952: LD_INT 4
47954: MINUS
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: PUSH
47964: LD_VAR 0 1
47968: PUSH
47969: LD_INT 4
47971: PLUS
47972: PUSH
47973: LD_VAR 0 2
47977: PUSH
47978: LD_INT 4
47980: PLUS
47981: PUSH
47982: LD_INT 5
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: PUSH
47990: LD_VAR 0 1
47994: PUSH
47995: LD_INT 3
47997: PLUS
47998: PUSH
47999: LD_VAR 0 2
48003: PUSH
48004: LD_INT 4
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: PUSH
48012: LD_VAR 0 1
48016: PUSH
48017: LD_VAR 0 2
48021: PUSH
48022: LD_INT 3
48024: PLUS
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// end ; end ;
48041: GO 48044
48043: POP
// result := list ;
48044: LD_ADDR_VAR 0 4
48048: PUSH
48049: LD_VAR 0 5
48053: ST_TO_ADDR
// end ;
48054: LD_VAR 0 4
48058: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48059: LD_INT 0
48061: PPUSH
48062: PPUSH
48063: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48064: LD_VAR 0 1
48068: NOT
48069: PUSH
48070: LD_VAR 0 2
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: IN
48093: NOT
48094: OR
48095: IFFALSE 48099
// exit ;
48097: GO 48191
// tmp := [ ] ;
48099: LD_ADDR_VAR 0 5
48103: PUSH
48104: EMPTY
48105: ST_TO_ADDR
// for i in units do
48106: LD_ADDR_VAR 0 4
48110: PUSH
48111: LD_VAR 0 1
48115: PUSH
48116: FOR_IN
48117: IFFALSE 48160
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48119: LD_ADDR_VAR 0 5
48123: PUSH
48124: LD_VAR 0 5
48128: PPUSH
48129: LD_VAR 0 5
48133: PUSH
48134: LD_INT 1
48136: PLUS
48137: PPUSH
48138: LD_VAR 0 4
48142: PPUSH
48143: LD_VAR 0 2
48147: PPUSH
48148: CALL_OW 259
48152: PPUSH
48153: CALL_OW 2
48157: ST_TO_ADDR
48158: GO 48116
48160: POP
48161: POP
// if not tmp then
48162: LD_VAR 0 5
48166: NOT
48167: IFFALSE 48171
// exit ;
48169: GO 48191
// result := SortListByListDesc ( units , tmp ) ;
48171: LD_ADDR_VAR 0 3
48175: PUSH
48176: LD_VAR 0 1
48180: PPUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: CALL_OW 77
48190: ST_TO_ADDR
// end ;
48191: LD_VAR 0 3
48195: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48196: LD_INT 0
48198: PPUSH
48199: PPUSH
48200: PPUSH
// x := GetX ( building ) ;
48201: LD_ADDR_VAR 0 4
48205: PUSH
48206: LD_VAR 0 2
48210: PPUSH
48211: CALL_OW 250
48215: ST_TO_ADDR
// y := GetY ( building ) ;
48216: LD_ADDR_VAR 0 5
48220: PUSH
48221: LD_VAR 0 2
48225: PPUSH
48226: CALL_OW 251
48230: ST_TO_ADDR
// if GetTaskList ( unit ) then
48231: LD_VAR 0 1
48235: PPUSH
48236: CALL_OW 437
48240: IFFALSE 48335
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48242: LD_STRING e
48244: PUSH
48245: LD_VAR 0 1
48249: PPUSH
48250: CALL_OW 437
48254: PUSH
48255: LD_INT 1
48257: ARRAY
48258: PUSH
48259: LD_INT 1
48261: ARRAY
48262: EQUAL
48263: PUSH
48264: LD_VAR 0 4
48268: PUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 437
48278: PUSH
48279: LD_INT 1
48281: ARRAY
48282: PUSH
48283: LD_INT 2
48285: ARRAY
48286: EQUAL
48287: AND
48288: PUSH
48289: LD_VAR 0 5
48293: PUSH
48294: LD_VAR 0 1
48298: PPUSH
48299: CALL_OW 437
48303: PUSH
48304: LD_INT 1
48306: ARRAY
48307: PUSH
48308: LD_INT 3
48310: ARRAY
48311: EQUAL
48312: AND
48313: IFFALSE 48325
// result := true else
48315: LD_ADDR_VAR 0 3
48319: PUSH
48320: LD_INT 1
48322: ST_TO_ADDR
48323: GO 48333
// result := false ;
48325: LD_ADDR_VAR 0 3
48329: PUSH
48330: LD_INT 0
48332: ST_TO_ADDR
// end else
48333: GO 48343
// result := false ;
48335: LD_ADDR_VAR 0 3
48339: PUSH
48340: LD_INT 0
48342: ST_TO_ADDR
// end ;
48343: LD_VAR 0 3
48347: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48348: LD_INT 0
48350: PPUSH
48351: PPUSH
48352: PPUSH
48353: PPUSH
// if not unit or not area then
48354: LD_VAR 0 1
48358: NOT
48359: PUSH
48360: LD_VAR 0 2
48364: NOT
48365: OR
48366: IFFALSE 48370
// exit ;
48368: GO 48534
// tmp := AreaToList ( area , i ) ;
48370: LD_ADDR_VAR 0 6
48374: PUSH
48375: LD_VAR 0 2
48379: PPUSH
48380: LD_VAR 0 5
48384: PPUSH
48385: CALL_OW 517
48389: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48390: LD_ADDR_VAR 0 5
48394: PUSH
48395: DOUBLE
48396: LD_INT 1
48398: DEC
48399: ST_TO_ADDR
48400: LD_VAR 0 6
48404: PUSH
48405: LD_INT 1
48407: ARRAY
48408: PUSH
48409: FOR_TO
48410: IFFALSE 48532
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48412: LD_ADDR_VAR 0 7
48416: PUSH
48417: LD_VAR 0 6
48421: PUSH
48422: LD_INT 1
48424: ARRAY
48425: PUSH
48426: LD_VAR 0 5
48430: ARRAY
48431: PUSH
48432: LD_VAR 0 6
48436: PUSH
48437: LD_INT 2
48439: ARRAY
48440: PUSH
48441: LD_VAR 0 5
48445: ARRAY
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48451: LD_VAR 0 7
48455: PUSH
48456: LD_INT 1
48458: ARRAY
48459: PPUSH
48460: LD_VAR 0 7
48464: PUSH
48465: LD_INT 2
48467: ARRAY
48468: PPUSH
48469: CALL_OW 428
48473: PUSH
48474: LD_INT 0
48476: EQUAL
48477: IFFALSE 48530
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48479: LD_VAR 0 1
48483: PPUSH
48484: LD_VAR 0 7
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PPUSH
48493: LD_VAR 0 7
48497: PUSH
48498: LD_INT 2
48500: ARRAY
48501: PPUSH
48502: LD_VAR 0 3
48506: PPUSH
48507: CALL_OW 48
// result := IsPlaced ( unit ) ;
48511: LD_ADDR_VAR 0 4
48515: PUSH
48516: LD_VAR 0 1
48520: PPUSH
48521: CALL_OW 305
48525: ST_TO_ADDR
// exit ;
48526: POP
48527: POP
48528: GO 48534
// end ; end ;
48530: GO 48409
48532: POP
48533: POP
// end ;
48534: LD_VAR 0 4
48538: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48539: LD_INT 0
48541: PPUSH
48542: PPUSH
48543: PPUSH
// if not side or side > 8 then
48544: LD_VAR 0 1
48548: NOT
48549: PUSH
48550: LD_VAR 0 1
48554: PUSH
48555: LD_INT 8
48557: GREATER
48558: OR
48559: IFFALSE 48563
// exit ;
48561: GO 48750
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48563: LD_ADDR_VAR 0 4
48567: PUSH
48568: LD_INT 22
48570: PUSH
48571: LD_VAR 0 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 21
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PPUSH
48594: CALL_OW 69
48598: ST_TO_ADDR
// if not tmp then
48599: LD_VAR 0 4
48603: NOT
48604: IFFALSE 48608
// exit ;
48606: GO 48750
// enable_addtolog := true ;
48608: LD_ADDR_OWVAR 81
48612: PUSH
48613: LD_INT 1
48615: ST_TO_ADDR
// AddToLog ( [ ) ;
48616: LD_STRING [
48618: PPUSH
48619: CALL_OW 561
// for i in tmp do
48623: LD_ADDR_VAR 0 3
48627: PUSH
48628: LD_VAR 0 4
48632: PUSH
48633: FOR_IN
48634: IFFALSE 48741
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48636: LD_STRING [
48638: PUSH
48639: LD_VAR 0 3
48643: PPUSH
48644: CALL_OW 266
48648: STR
48649: PUSH
48650: LD_STRING , 
48652: STR
48653: PUSH
48654: LD_VAR 0 3
48658: PPUSH
48659: CALL_OW 250
48663: STR
48664: PUSH
48665: LD_STRING , 
48667: STR
48668: PUSH
48669: LD_VAR 0 3
48673: PPUSH
48674: CALL_OW 251
48678: STR
48679: PUSH
48680: LD_STRING , 
48682: STR
48683: PUSH
48684: LD_VAR 0 3
48688: PPUSH
48689: CALL_OW 254
48693: STR
48694: PUSH
48695: LD_STRING , 
48697: STR
48698: PUSH
48699: LD_VAR 0 3
48703: PPUSH
48704: LD_INT 1
48706: PPUSH
48707: CALL_OW 268
48711: STR
48712: PUSH
48713: LD_STRING , 
48715: STR
48716: PUSH
48717: LD_VAR 0 3
48721: PPUSH
48722: LD_INT 2
48724: PPUSH
48725: CALL_OW 268
48729: STR
48730: PUSH
48731: LD_STRING ],
48733: STR
48734: PPUSH
48735: CALL_OW 561
// end ;
48739: GO 48633
48741: POP
48742: POP
// AddToLog ( ]; ) ;
48743: LD_STRING ];
48745: PPUSH
48746: CALL_OW 561
// end ;
48750: LD_VAR 0 2
48754: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48755: LD_INT 0
48757: PPUSH
48758: PPUSH
48759: PPUSH
48760: PPUSH
48761: PPUSH
// if not area or not rate or not max then
48762: LD_VAR 0 1
48766: NOT
48767: PUSH
48768: LD_VAR 0 2
48772: NOT
48773: OR
48774: PUSH
48775: LD_VAR 0 4
48779: NOT
48780: OR
48781: IFFALSE 48785
// exit ;
48783: GO 48977
// while 1 do
48785: LD_INT 1
48787: IFFALSE 48977
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48789: LD_ADDR_VAR 0 9
48793: PUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: LD_INT 1
48801: PPUSH
48802: CALL_OW 287
48806: PUSH
48807: LD_INT 10
48809: MUL
48810: ST_TO_ADDR
// r := rate / 10 ;
48811: LD_ADDR_VAR 0 7
48815: PUSH
48816: LD_VAR 0 2
48820: PUSH
48821: LD_INT 10
48823: DIVREAL
48824: ST_TO_ADDR
// time := 1 1$00 ;
48825: LD_ADDR_VAR 0 8
48829: PUSH
48830: LD_INT 2100
48832: ST_TO_ADDR
// if amount < min then
48833: LD_VAR 0 9
48837: PUSH
48838: LD_VAR 0 3
48842: LESS
48843: IFFALSE 48861
// r := r * 2 else
48845: LD_ADDR_VAR 0 7
48849: PUSH
48850: LD_VAR 0 7
48854: PUSH
48855: LD_INT 2
48857: MUL
48858: ST_TO_ADDR
48859: GO 48887
// if amount > max then
48861: LD_VAR 0 9
48865: PUSH
48866: LD_VAR 0 4
48870: GREATER
48871: IFFALSE 48887
// r := r / 2 ;
48873: LD_ADDR_VAR 0 7
48877: PUSH
48878: LD_VAR 0 7
48882: PUSH
48883: LD_INT 2
48885: DIVREAL
48886: ST_TO_ADDR
// time := time / r ;
48887: LD_ADDR_VAR 0 8
48891: PUSH
48892: LD_VAR 0 8
48896: PUSH
48897: LD_VAR 0 7
48901: DIVREAL
48902: ST_TO_ADDR
// if time < 0 then
48903: LD_VAR 0 8
48907: PUSH
48908: LD_INT 0
48910: LESS
48911: IFFALSE 48928
// time := time * - 1 ;
48913: LD_ADDR_VAR 0 8
48917: PUSH
48918: LD_VAR 0 8
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: MUL
48927: ST_TO_ADDR
// wait ( time ) ;
48928: LD_VAR 0 8
48932: PPUSH
48933: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
48937: LD_INT 35
48939: PPUSH
48940: LD_INT 875
48942: PPUSH
48943: CALL_OW 12
48947: PPUSH
48948: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48952: LD_INT 1
48954: PPUSH
48955: LD_INT 5
48957: PPUSH
48958: CALL_OW 12
48962: PPUSH
48963: LD_VAR 0 1
48967: PPUSH
48968: LD_INT 1
48970: PPUSH
48971: CALL_OW 55
// end ;
48975: GO 48785
// end ;
48977: LD_VAR 0 5
48981: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48982: LD_INT 0
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
// if not turrets or not factories then
48992: LD_VAR 0 1
48996: NOT
48997: PUSH
48998: LD_VAR 0 2
49002: NOT
49003: OR
49004: IFFALSE 49008
// exit ;
49006: GO 49315
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49008: LD_ADDR_VAR 0 10
49012: PUSH
49013: LD_INT 5
49015: PUSH
49016: LD_INT 6
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: LD_INT 5
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 24
49050: PUSH
49051: LD_INT 25
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 23
49060: PUSH
49061: LD_INT 27
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 42
49074: PUSH
49075: LD_INT 43
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 44
49084: PUSH
49085: LD_INT 46
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 45
49094: PUSH
49095: LD_INT 47
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: LIST
49111: ST_TO_ADDR
// result := [ ] ;
49112: LD_ADDR_VAR 0 3
49116: PUSH
49117: EMPTY
49118: ST_TO_ADDR
// for i in turrets do
49119: LD_ADDR_VAR 0 4
49123: PUSH
49124: LD_VAR 0 1
49128: PUSH
49129: FOR_IN
49130: IFFALSE 49313
// begin nat := GetNation ( i ) ;
49132: LD_ADDR_VAR 0 7
49136: PUSH
49137: LD_VAR 0 4
49141: PPUSH
49142: CALL_OW 248
49146: ST_TO_ADDR
// weapon := 0 ;
49147: LD_ADDR_VAR 0 8
49151: PUSH
49152: LD_INT 0
49154: ST_TO_ADDR
// if not nat then
49155: LD_VAR 0 7
49159: NOT
49160: IFFALSE 49164
// continue ;
49162: GO 49129
// for j in list [ nat ] do
49164: LD_ADDR_VAR 0 5
49168: PUSH
49169: LD_VAR 0 10
49173: PUSH
49174: LD_VAR 0 7
49178: ARRAY
49179: PUSH
49180: FOR_IN
49181: IFFALSE 49222
// if GetBWeapon ( i ) = j [ 1 ] then
49183: LD_VAR 0 4
49187: PPUSH
49188: CALL_OW 269
49192: PUSH
49193: LD_VAR 0 5
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: EQUAL
49202: IFFALSE 49220
// begin weapon := j [ 2 ] ;
49204: LD_ADDR_VAR 0 8
49208: PUSH
49209: LD_VAR 0 5
49213: PUSH
49214: LD_INT 2
49216: ARRAY
49217: ST_TO_ADDR
// break ;
49218: GO 49222
// end ;
49220: GO 49180
49222: POP
49223: POP
// if not weapon then
49224: LD_VAR 0 8
49228: NOT
49229: IFFALSE 49233
// continue ;
49231: GO 49129
// for k in factories do
49233: LD_ADDR_VAR 0 6
49237: PUSH
49238: LD_VAR 0 2
49242: PUSH
49243: FOR_IN
49244: IFFALSE 49309
// begin weapons := AvailableWeaponList ( k ) ;
49246: LD_ADDR_VAR 0 9
49250: PUSH
49251: LD_VAR 0 6
49255: PPUSH
49256: CALL_OW 478
49260: ST_TO_ADDR
// if not weapons then
49261: LD_VAR 0 9
49265: NOT
49266: IFFALSE 49270
// continue ;
49268: GO 49243
// if weapon in weapons then
49270: LD_VAR 0 8
49274: PUSH
49275: LD_VAR 0 9
49279: IN
49280: IFFALSE 49307
// begin result := [ i , weapon ] ;
49282: LD_ADDR_VAR 0 3
49286: PUSH
49287: LD_VAR 0 4
49291: PUSH
49292: LD_VAR 0 8
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// exit ;
49301: POP
49302: POP
49303: POP
49304: POP
49305: GO 49315
// end ; end ;
49307: GO 49243
49309: POP
49310: POP
// end ;
49311: GO 49129
49313: POP
49314: POP
// end ;
49315: LD_VAR 0 3
49319: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49320: LD_INT 0
49322: PPUSH
// if not side or side > 8 then
49323: LD_VAR 0 3
49327: NOT
49328: PUSH
49329: LD_VAR 0 3
49333: PUSH
49334: LD_INT 8
49336: GREATER
49337: OR
49338: IFFALSE 49342
// exit ;
49340: GO 49401
// if not range then
49342: LD_VAR 0 4
49346: NOT
49347: IFFALSE 49358
// range := - 12 ;
49349: LD_ADDR_VAR 0 4
49353: PUSH
49354: LD_INT 12
49356: NEG
49357: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49358: LD_VAR 0 1
49362: PPUSH
49363: LD_VAR 0 2
49367: PPUSH
49368: LD_VAR 0 3
49372: PPUSH
49373: LD_VAR 0 4
49377: PPUSH
49378: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49382: LD_VAR 0 1
49386: PPUSH
49387: LD_VAR 0 2
49391: PPUSH
49392: LD_VAR 0 3
49396: PPUSH
49397: CALL_OW 331
// end ;
49401: LD_VAR 0 5
49405: RET
// export function Video ( mode ) ; begin
49406: LD_INT 0
49408: PPUSH
// ingame_video = mode ;
49409: LD_ADDR_OWVAR 52
49413: PUSH
49414: LD_VAR 0 1
49418: ST_TO_ADDR
// interface_hidden = mode ;
49419: LD_ADDR_OWVAR 54
49423: PUSH
49424: LD_VAR 0 1
49428: ST_TO_ADDR
// end ;
49429: LD_VAR 0 2
49433: RET
// export function Join ( array , element ) ; begin
49434: LD_INT 0
49436: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49437: LD_ADDR_VAR 0 3
49441: PUSH
49442: LD_VAR 0 1
49446: PPUSH
49447: LD_VAR 0 1
49451: PUSH
49452: LD_INT 1
49454: PLUS
49455: PPUSH
49456: LD_VAR 0 2
49460: PPUSH
49461: CALL_OW 1
49465: ST_TO_ADDR
// end ;
49466: LD_VAR 0 3
49470: RET
// export function JoinUnion ( array , element ) ; begin
49471: LD_INT 0
49473: PPUSH
// result := array union element ;
49474: LD_ADDR_VAR 0 3
49478: PUSH
49479: LD_VAR 0 1
49483: PUSH
49484: LD_VAR 0 2
49488: UNION
49489: ST_TO_ADDR
// end ;
49490: LD_VAR 0 3
49494: RET
// export function GetBehemoths ( side ) ; begin
49495: LD_INT 0
49497: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49498: LD_ADDR_VAR 0 2
49502: PUSH
49503: LD_INT 22
49505: PUSH
49506: LD_VAR 0 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 31
49517: PUSH
49518: LD_INT 25
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PPUSH
49529: CALL_OW 69
49533: ST_TO_ADDR
// end ;
49534: LD_VAR 0 2
49538: RET
// export function Shuffle ( array ) ; var i , index ; begin
49539: LD_INT 0
49541: PPUSH
49542: PPUSH
49543: PPUSH
// result := [ ] ;
49544: LD_ADDR_VAR 0 2
49548: PUSH
49549: EMPTY
49550: ST_TO_ADDR
// if not array then
49551: LD_VAR 0 1
49555: NOT
49556: IFFALSE 49560
// exit ;
49558: GO 49659
// Randomize ;
49560: CALL_OW 10
// for i = array downto 1 do
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: DOUBLE
49570: LD_VAR 0 1
49574: INC
49575: ST_TO_ADDR
49576: LD_INT 1
49578: PUSH
49579: FOR_DOWNTO
49580: IFFALSE 49657
// begin index := rand ( 1 , array ) ;
49582: LD_ADDR_VAR 0 4
49586: PUSH
49587: LD_INT 1
49589: PPUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: CALL_OW 12
49599: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49600: LD_ADDR_VAR 0 2
49604: PUSH
49605: LD_VAR 0 2
49609: PPUSH
49610: LD_VAR 0 2
49614: PUSH
49615: LD_INT 1
49617: PLUS
49618: PPUSH
49619: LD_VAR 0 1
49623: PUSH
49624: LD_VAR 0 4
49628: ARRAY
49629: PPUSH
49630: CALL_OW 2
49634: ST_TO_ADDR
// array := Delete ( array , index ) ;
49635: LD_ADDR_VAR 0 1
49639: PUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: LD_VAR 0 4
49649: PPUSH
49650: CALL_OW 3
49654: ST_TO_ADDR
// end ;
49655: GO 49579
49657: POP
49658: POP
// end ;
49659: LD_VAR 0 2
49663: RET
// export function GetBaseMaterials ( base ) ; begin
49664: LD_INT 0
49666: PPUSH
// result := [ 0 , 0 , 0 ] ;
49667: LD_ADDR_VAR 0 2
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// if not base then
49686: LD_VAR 0 1
49690: NOT
49691: IFFALSE 49695
// exit ;
49693: GO 49744
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49695: LD_ADDR_VAR 0 2
49699: PUSH
49700: LD_VAR 0 1
49704: PPUSH
49705: LD_INT 1
49707: PPUSH
49708: CALL_OW 275
49712: PUSH
49713: LD_VAR 0 1
49717: PPUSH
49718: LD_INT 2
49720: PPUSH
49721: CALL_OW 275
49725: PUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: LD_INT 3
49733: PPUSH
49734: CALL_OW 275
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: ST_TO_ADDR
// end ;
49744: LD_VAR 0 2
49748: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49749: LD_INT 0
49751: PPUSH
49752: PPUSH
// result := array ;
49753: LD_ADDR_VAR 0 3
49757: PUSH
49758: LD_VAR 0 1
49762: ST_TO_ADDR
// if size > 0 then
49763: LD_VAR 0 2
49767: PUSH
49768: LD_INT 0
49770: GREATER
49771: IFFALSE 49817
// for i := array downto size do
49773: LD_ADDR_VAR 0 4
49777: PUSH
49778: DOUBLE
49779: LD_VAR 0 1
49783: INC
49784: ST_TO_ADDR
49785: LD_VAR 0 2
49789: PUSH
49790: FOR_DOWNTO
49791: IFFALSE 49815
// result := Delete ( result , result ) ;
49793: LD_ADDR_VAR 0 3
49797: PUSH
49798: LD_VAR 0 3
49802: PPUSH
49803: LD_VAR 0 3
49807: PPUSH
49808: CALL_OW 3
49812: ST_TO_ADDR
49813: GO 49790
49815: POP
49816: POP
// end ;
49817: LD_VAR 0 3
49821: RET
// export function ComExit ( unit ) ; var tmp ; begin
49822: LD_INT 0
49824: PPUSH
49825: PPUSH
// if not IsInUnit ( unit ) then
49826: LD_VAR 0 1
49830: PPUSH
49831: CALL_OW 310
49835: NOT
49836: IFFALSE 49840
// exit ;
49838: GO 49900
// tmp := IsInUnit ( unit ) ;
49840: LD_ADDR_VAR 0 3
49844: PUSH
49845: LD_VAR 0 1
49849: PPUSH
49850: CALL_OW 310
49854: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49855: LD_VAR 0 3
49859: PPUSH
49860: CALL_OW 247
49864: PUSH
49865: LD_INT 2
49867: EQUAL
49868: IFFALSE 49881
// ComExitVehicle ( unit ) else
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 121
49879: GO 49890
// ComExitBuilding ( unit ) ;
49881: LD_VAR 0 1
49885: PPUSH
49886: CALL_OW 122
// result := tmp ;
49890: LD_ADDR_VAR 0 2
49894: PUSH
49895: LD_VAR 0 3
49899: ST_TO_ADDR
// end ;
49900: LD_VAR 0 2
49904: RET
// export function ResetHc ; begin
49905: LD_INT 0
49907: PPUSH
// InitHc ;
49908: CALL_OW 19
// hc_importance := 0 ;
49912: LD_ADDR_OWVAR 32
49916: PUSH
49917: LD_INT 0
49919: ST_TO_ADDR
// end ; end_of_file
49920: LD_VAR 0 1
49924: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
49925: LD_INT 0
49927: PPUSH
// ar_crane := 88 ;
49928: LD_ADDR_EXP 54
49932: PUSH
49933: LD_INT 88
49935: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49936: LD_ADDR_EXP 49
49940: PUSH
49941: LD_INT 89
49943: ST_TO_ADDR
// us_hack := 99 ;
49944: LD_ADDR_EXP 50
49948: PUSH
49949: LD_INT 99
49951: ST_TO_ADDR
// us_artillery := 97 ;
49952: LD_ADDR_EXP 51
49956: PUSH
49957: LD_INT 97
49959: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49960: LD_ADDR_EXP 52
49964: PUSH
49965: LD_INT 91
49967: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
49968: LD_ADDR_EXP 53
49972: PUSH
49973: LD_INT 92
49975: ST_TO_ADDR
// ru_radar := 98 ;
49976: LD_ADDR_EXP 48
49980: PUSH
49981: LD_INT 98
49983: ST_TO_ADDR
// tech_Artillery := 80 ;
49984: LD_ADDR_EXP 55
49988: PUSH
49989: LD_INT 80
49991: ST_TO_ADDR
// tech_RadMat := 81 ;
49992: LD_ADDR_EXP 56
49996: PUSH
49997: LD_INT 81
49999: ST_TO_ADDR
// tech_BasicTools := 82 ;
50000: LD_ADDR_EXP 57
50004: PUSH
50005: LD_INT 82
50007: ST_TO_ADDR
// tech_Cargo := 83 ;
50008: LD_ADDR_EXP 58
50012: PUSH
50013: LD_INT 83
50015: ST_TO_ADDR
// tech_Track := 84 ;
50016: LD_ADDR_EXP 59
50020: PUSH
50021: LD_INT 84
50023: ST_TO_ADDR
// tech_Crane := 85 ;
50024: LD_ADDR_EXP 60
50028: PUSH
50029: LD_INT 85
50031: ST_TO_ADDR
// tech_Bulldozer := 86 ;
50032: LD_ADDR_EXP 61
50036: PUSH
50037: LD_INT 86
50039: ST_TO_ADDR
// tech_Hovercraft := 87 ;
50040: LD_ADDR_EXP 62
50044: PUSH
50045: LD_INT 87
50047: ST_TO_ADDR
// end ;
50048: LD_VAR 0 1
50052: RET
// every 1 do
50053: GO 50055
50055: DISABLE
// InitGlobalVariables ; end_of_file
50056: CALL 49925 0 0
50060: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
50061: LD_INT 0
50063: PPUSH
50064: PPUSH
// skirmish := false ;
50065: LD_ADDR_EXP 63
50069: PUSH
50070: LD_INT 0
50072: ST_TO_ADDR
// debug_mc := false ;
50073: LD_ADDR_EXP 64
50077: PUSH
50078: LD_INT 0
50080: ST_TO_ADDR
// mc_bases := [ ] ;
50081: LD_ADDR_EXP 65
50085: PUSH
50086: EMPTY
50087: ST_TO_ADDR
// mc_sides := [ ] ;
50088: LD_ADDR_EXP 91
50092: PUSH
50093: EMPTY
50094: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
50095: LD_ADDR_EXP 66
50099: PUSH
50100: EMPTY
50101: ST_TO_ADDR
// mc_building_repairs := [ ] ;
50102: LD_ADDR_EXP 67
50106: PUSH
50107: EMPTY
50108: ST_TO_ADDR
// mc_need_heal := [ ] ;
50109: LD_ADDR_EXP 68
50113: PUSH
50114: EMPTY
50115: ST_TO_ADDR
// mc_healers := [ ] ;
50116: LD_ADDR_EXP 69
50120: PUSH
50121: EMPTY
50122: ST_TO_ADDR
// mc_build_list := [ ] ;
50123: LD_ADDR_EXP 70
50127: PUSH
50128: EMPTY
50129: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
50130: LD_ADDR_EXP 97
50134: PUSH
50135: EMPTY
50136: ST_TO_ADDR
// mc_builders := [ ] ;
50137: LD_ADDR_EXP 71
50141: PUSH
50142: EMPTY
50143: ST_TO_ADDR
// mc_construct_list := [ ] ;
50144: LD_ADDR_EXP 72
50148: PUSH
50149: EMPTY
50150: ST_TO_ADDR
// mc_turret_list := [ ] ;
50151: LD_ADDR_EXP 73
50155: PUSH
50156: EMPTY
50157: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
50158: LD_ADDR_EXP 74
50162: PUSH
50163: EMPTY
50164: ST_TO_ADDR
// mc_miners := [ ] ;
50165: LD_ADDR_EXP 79
50169: PUSH
50170: EMPTY
50171: ST_TO_ADDR
// mc_mines := [ ] ;
50172: LD_ADDR_EXP 78
50176: PUSH
50177: EMPTY
50178: ST_TO_ADDR
// mc_minefields := [ ] ;
50179: LD_ADDR_EXP 80
50183: PUSH
50184: EMPTY
50185: ST_TO_ADDR
// mc_crates := [ ] ;
50186: LD_ADDR_EXP 81
50190: PUSH
50191: EMPTY
50192: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50193: LD_ADDR_EXP 82
50197: PUSH
50198: EMPTY
50199: ST_TO_ADDR
// mc_crates_area := [ ] ;
50200: LD_ADDR_EXP 83
50204: PUSH
50205: EMPTY
50206: ST_TO_ADDR
// mc_vehicles := [ ] ;
50207: LD_ADDR_EXP 84
50211: PUSH
50212: EMPTY
50213: ST_TO_ADDR
// mc_attack := [ ] ;
50214: LD_ADDR_EXP 85
50218: PUSH
50219: EMPTY
50220: ST_TO_ADDR
// mc_produce := [ ] ;
50221: LD_ADDR_EXP 86
50225: PUSH
50226: EMPTY
50227: ST_TO_ADDR
// mc_defender := [ ] ;
50228: LD_ADDR_EXP 87
50232: PUSH
50233: EMPTY
50234: ST_TO_ADDR
// mc_parking := [ ] ;
50235: LD_ADDR_EXP 89
50239: PUSH
50240: EMPTY
50241: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50242: LD_ADDR_EXP 75
50246: PUSH
50247: EMPTY
50248: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50249: LD_ADDR_EXP 77
50253: PUSH
50254: EMPTY
50255: ST_TO_ADDR
// mc_scan := [ ] ;
50256: LD_ADDR_EXP 88
50260: PUSH
50261: EMPTY
50262: ST_TO_ADDR
// mc_scan_area := [ ] ;
50263: LD_ADDR_EXP 90
50267: PUSH
50268: EMPTY
50269: ST_TO_ADDR
// mc_tech := [ ] ;
50270: LD_ADDR_EXP 92
50274: PUSH
50275: EMPTY
50276: ST_TO_ADDR
// mc_class := [ ] ;
50277: LD_ADDR_EXP 106
50281: PUSH
50282: EMPTY
50283: ST_TO_ADDR
// mc_class_case_use := [ ] ;
50284: LD_ADDR_EXP 107
50288: PUSH
50289: EMPTY
50290: ST_TO_ADDR
// end ;
50291: LD_VAR 0 1
50295: RET
// export function MC_Kill ( base ) ; begin
50296: LD_INT 0
50298: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
50299: LD_ADDR_EXP 65
50303: PUSH
50304: LD_EXP 65
50308: PPUSH
50309: LD_VAR 0 1
50313: PPUSH
50314: EMPTY
50315: PPUSH
50316: CALL_OW 1
50320: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50321: LD_ADDR_EXP 66
50325: PUSH
50326: LD_EXP 66
50330: PPUSH
50331: LD_VAR 0 1
50335: PPUSH
50336: EMPTY
50337: PPUSH
50338: CALL_OW 1
50342: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50343: LD_ADDR_EXP 67
50347: PUSH
50348: LD_EXP 67
50352: PPUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: EMPTY
50359: PPUSH
50360: CALL_OW 1
50364: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50365: LD_ADDR_EXP 68
50369: PUSH
50370: LD_EXP 68
50374: PPUSH
50375: LD_VAR 0 1
50379: PPUSH
50380: EMPTY
50381: PPUSH
50382: CALL_OW 1
50386: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50387: LD_ADDR_EXP 69
50391: PUSH
50392: LD_EXP 69
50396: PPUSH
50397: LD_VAR 0 1
50401: PPUSH
50402: EMPTY
50403: PPUSH
50404: CALL_OW 1
50408: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50409: LD_ADDR_EXP 70
50413: PUSH
50414: LD_EXP 70
50418: PPUSH
50419: LD_VAR 0 1
50423: PPUSH
50424: EMPTY
50425: PPUSH
50426: CALL_OW 1
50430: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50431: LD_ADDR_EXP 71
50435: PUSH
50436: LD_EXP 71
50440: PPUSH
50441: LD_VAR 0 1
50445: PPUSH
50446: EMPTY
50447: PPUSH
50448: CALL_OW 1
50452: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50453: LD_ADDR_EXP 72
50457: PUSH
50458: LD_EXP 72
50462: PPUSH
50463: LD_VAR 0 1
50467: PPUSH
50468: EMPTY
50469: PPUSH
50470: CALL_OW 1
50474: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50475: LD_ADDR_EXP 73
50479: PUSH
50480: LD_EXP 73
50484: PPUSH
50485: LD_VAR 0 1
50489: PPUSH
50490: EMPTY
50491: PPUSH
50492: CALL_OW 1
50496: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50497: LD_ADDR_EXP 74
50501: PUSH
50502: LD_EXP 74
50506: PPUSH
50507: LD_VAR 0 1
50511: PPUSH
50512: EMPTY
50513: PPUSH
50514: CALL_OW 1
50518: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50519: LD_ADDR_EXP 75
50523: PUSH
50524: LD_EXP 75
50528: PPUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: EMPTY
50535: PPUSH
50536: CALL_OW 1
50540: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50541: LD_ADDR_EXP 76
50545: PUSH
50546: LD_EXP 76
50550: PPUSH
50551: LD_VAR 0 1
50555: PPUSH
50556: LD_INT 0
50558: PPUSH
50559: CALL_OW 1
50563: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50564: LD_ADDR_EXP 77
50568: PUSH
50569: LD_EXP 77
50573: PPUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: EMPTY
50580: PPUSH
50581: CALL_OW 1
50585: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50586: LD_ADDR_EXP 78
50590: PUSH
50591: LD_EXP 78
50595: PPUSH
50596: LD_VAR 0 1
50600: PPUSH
50601: EMPTY
50602: PPUSH
50603: CALL_OW 1
50607: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50608: LD_ADDR_EXP 79
50612: PUSH
50613: LD_EXP 79
50617: PPUSH
50618: LD_VAR 0 1
50622: PPUSH
50623: EMPTY
50624: PPUSH
50625: CALL_OW 1
50629: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50630: LD_ADDR_EXP 80
50634: PUSH
50635: LD_EXP 80
50639: PPUSH
50640: LD_VAR 0 1
50644: PPUSH
50645: EMPTY
50646: PPUSH
50647: CALL_OW 1
50651: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50652: LD_ADDR_EXP 81
50656: PUSH
50657: LD_EXP 81
50661: PPUSH
50662: LD_VAR 0 1
50666: PPUSH
50667: EMPTY
50668: PPUSH
50669: CALL_OW 1
50673: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50674: LD_ADDR_EXP 82
50678: PUSH
50679: LD_EXP 82
50683: PPUSH
50684: LD_VAR 0 1
50688: PPUSH
50689: EMPTY
50690: PPUSH
50691: CALL_OW 1
50695: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50696: LD_ADDR_EXP 83
50700: PUSH
50701: LD_EXP 83
50705: PPUSH
50706: LD_VAR 0 1
50710: PPUSH
50711: EMPTY
50712: PPUSH
50713: CALL_OW 1
50717: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50718: LD_ADDR_EXP 84
50722: PUSH
50723: LD_EXP 84
50727: PPUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: EMPTY
50734: PPUSH
50735: CALL_OW 1
50739: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50740: LD_ADDR_EXP 85
50744: PUSH
50745: LD_EXP 85
50749: PPUSH
50750: LD_VAR 0 1
50754: PPUSH
50755: EMPTY
50756: PPUSH
50757: CALL_OW 1
50761: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50762: LD_ADDR_EXP 86
50766: PUSH
50767: LD_EXP 86
50771: PPUSH
50772: LD_VAR 0 1
50776: PPUSH
50777: EMPTY
50778: PPUSH
50779: CALL_OW 1
50783: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50784: LD_ADDR_EXP 87
50788: PUSH
50789: LD_EXP 87
50793: PPUSH
50794: LD_VAR 0 1
50798: PPUSH
50799: EMPTY
50800: PPUSH
50801: CALL_OW 1
50805: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50806: LD_ADDR_EXP 88
50810: PUSH
50811: LD_EXP 88
50815: PPUSH
50816: LD_VAR 0 1
50820: PPUSH
50821: EMPTY
50822: PPUSH
50823: CALL_OW 1
50827: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50828: LD_ADDR_EXP 89
50832: PUSH
50833: LD_EXP 89
50837: PPUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: EMPTY
50844: PPUSH
50845: CALL_OW 1
50849: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50850: LD_ADDR_EXP 90
50854: PUSH
50855: LD_EXP 90
50859: PPUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: EMPTY
50866: PPUSH
50867: CALL_OW 1
50871: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50872: LD_ADDR_EXP 92
50876: PUSH
50877: LD_EXP 92
50881: PPUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: EMPTY
50888: PPUSH
50889: CALL_OW 1
50893: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50894: LD_ADDR_EXP 94
50898: PUSH
50899: LD_EXP 94
50903: PPUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: EMPTY
50910: PPUSH
50911: CALL_OW 1
50915: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50916: LD_ADDR_EXP 95
50920: PUSH
50921: LD_EXP 95
50925: PPUSH
50926: LD_VAR 0 1
50930: PPUSH
50931: EMPTY
50932: PPUSH
50933: CALL_OW 1
50937: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50938: LD_ADDR_EXP 96
50942: PUSH
50943: LD_EXP 96
50947: PPUSH
50948: LD_VAR 0 1
50952: PPUSH
50953: EMPTY
50954: PPUSH
50955: CALL_OW 1
50959: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50960: LD_ADDR_EXP 97
50964: PUSH
50965: LD_EXP 97
50969: PPUSH
50970: LD_VAR 0 1
50974: PPUSH
50975: EMPTY
50976: PPUSH
50977: CALL_OW 1
50981: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50982: LD_ADDR_EXP 98
50986: PUSH
50987: LD_EXP 98
50991: PPUSH
50992: LD_VAR 0 1
50996: PPUSH
50997: EMPTY
50998: PPUSH
50999: CALL_OW 1
51003: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
51004: LD_ADDR_EXP 99
51008: PUSH
51009: LD_EXP 99
51013: PPUSH
51014: LD_VAR 0 1
51018: PPUSH
51019: EMPTY
51020: PPUSH
51021: CALL_OW 1
51025: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
51026: LD_ADDR_EXP 100
51030: PUSH
51031: LD_EXP 100
51035: PPUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: EMPTY
51042: PPUSH
51043: CALL_OW 1
51047: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
51048: LD_ADDR_EXP 101
51052: PUSH
51053: LD_EXP 101
51057: PPUSH
51058: LD_VAR 0 1
51062: PPUSH
51063: EMPTY
51064: PPUSH
51065: CALL_OW 1
51069: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
51070: LD_ADDR_EXP 102
51074: PUSH
51075: LD_EXP 102
51079: PPUSH
51080: LD_VAR 0 1
51084: PPUSH
51085: EMPTY
51086: PPUSH
51087: CALL_OW 1
51091: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
51092: LD_ADDR_EXP 103
51096: PUSH
51097: LD_EXP 103
51101: PPUSH
51102: LD_VAR 0 1
51106: PPUSH
51107: EMPTY
51108: PPUSH
51109: CALL_OW 1
51113: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
51114: LD_ADDR_EXP 104
51118: PUSH
51119: LD_EXP 104
51123: PPUSH
51124: LD_VAR 0 1
51128: PPUSH
51129: EMPTY
51130: PPUSH
51131: CALL_OW 1
51135: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51136: LD_ADDR_EXP 105
51140: PUSH
51141: LD_EXP 105
51145: PPUSH
51146: LD_VAR 0 1
51150: PPUSH
51151: EMPTY
51152: PPUSH
51153: CALL_OW 1
51157: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51158: LD_ADDR_EXP 106
51162: PUSH
51163: LD_EXP 106
51167: PPUSH
51168: LD_VAR 0 1
51172: PPUSH
51173: EMPTY
51174: PPUSH
51175: CALL_OW 1
51179: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51180: LD_ADDR_EXP 107
51184: PUSH
51185: LD_EXP 107
51189: PPUSH
51190: LD_VAR 0 1
51194: PPUSH
51195: LD_INT 0
51197: PPUSH
51198: CALL_OW 1
51202: ST_TO_ADDR
// end ;
51203: LD_VAR 0 2
51207: RET
// export function MC_Add ( side , units ) ; var base ; begin
51208: LD_INT 0
51210: PPUSH
51211: PPUSH
// base := mc_bases + 1 ;
51212: LD_ADDR_VAR 0 4
51216: PUSH
51217: LD_EXP 65
51221: PUSH
51222: LD_INT 1
51224: PLUS
51225: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
51226: LD_ADDR_EXP 91
51230: PUSH
51231: LD_EXP 91
51235: PPUSH
51236: LD_VAR 0 4
51240: PPUSH
51241: LD_VAR 0 1
51245: PPUSH
51246: CALL_OW 1
51250: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
51251: LD_ADDR_EXP 65
51255: PUSH
51256: LD_EXP 65
51260: PPUSH
51261: LD_VAR 0 4
51265: PPUSH
51266: LD_VAR 0 2
51270: PPUSH
51271: CALL_OW 1
51275: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
51276: LD_ADDR_EXP 66
51280: PUSH
51281: LD_EXP 66
51285: PPUSH
51286: LD_VAR 0 4
51290: PPUSH
51291: EMPTY
51292: PPUSH
51293: CALL_OW 1
51297: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
51298: LD_ADDR_EXP 67
51302: PUSH
51303: LD_EXP 67
51307: PPUSH
51308: LD_VAR 0 4
51312: PPUSH
51313: EMPTY
51314: PPUSH
51315: CALL_OW 1
51319: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
51320: LD_ADDR_EXP 68
51324: PUSH
51325: LD_EXP 68
51329: PPUSH
51330: LD_VAR 0 4
51334: PPUSH
51335: EMPTY
51336: PPUSH
51337: CALL_OW 1
51341: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
51342: LD_ADDR_EXP 69
51346: PUSH
51347: LD_EXP 69
51351: PPUSH
51352: LD_VAR 0 4
51356: PPUSH
51357: EMPTY
51358: PPUSH
51359: CALL_OW 1
51363: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
51364: LD_ADDR_EXP 70
51368: PUSH
51369: LD_EXP 70
51373: PPUSH
51374: LD_VAR 0 4
51378: PPUSH
51379: EMPTY
51380: PPUSH
51381: CALL_OW 1
51385: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
51386: LD_ADDR_EXP 71
51390: PUSH
51391: LD_EXP 71
51395: PPUSH
51396: LD_VAR 0 4
51400: PPUSH
51401: EMPTY
51402: PPUSH
51403: CALL_OW 1
51407: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
51408: LD_ADDR_EXP 72
51412: PUSH
51413: LD_EXP 72
51417: PPUSH
51418: LD_VAR 0 4
51422: PPUSH
51423: EMPTY
51424: PPUSH
51425: CALL_OW 1
51429: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
51430: LD_ADDR_EXP 73
51434: PUSH
51435: LD_EXP 73
51439: PPUSH
51440: LD_VAR 0 4
51444: PPUSH
51445: EMPTY
51446: PPUSH
51447: CALL_OW 1
51451: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
51452: LD_ADDR_EXP 74
51456: PUSH
51457: LD_EXP 74
51461: PPUSH
51462: LD_VAR 0 4
51466: PPUSH
51467: EMPTY
51468: PPUSH
51469: CALL_OW 1
51473: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
51474: LD_ADDR_EXP 75
51478: PUSH
51479: LD_EXP 75
51483: PPUSH
51484: LD_VAR 0 4
51488: PPUSH
51489: EMPTY
51490: PPUSH
51491: CALL_OW 1
51495: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
51496: LD_ADDR_EXP 76
51500: PUSH
51501: LD_EXP 76
51505: PPUSH
51506: LD_VAR 0 4
51510: PPUSH
51511: LD_INT 0
51513: PPUSH
51514: CALL_OW 1
51518: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
51519: LD_ADDR_EXP 77
51523: PUSH
51524: LD_EXP 77
51528: PPUSH
51529: LD_VAR 0 4
51533: PPUSH
51534: EMPTY
51535: PPUSH
51536: CALL_OW 1
51540: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
51541: LD_ADDR_EXP 78
51545: PUSH
51546: LD_EXP 78
51550: PPUSH
51551: LD_VAR 0 4
51555: PPUSH
51556: EMPTY
51557: PPUSH
51558: CALL_OW 1
51562: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
51563: LD_ADDR_EXP 79
51567: PUSH
51568: LD_EXP 79
51572: PPUSH
51573: LD_VAR 0 4
51577: PPUSH
51578: EMPTY
51579: PPUSH
51580: CALL_OW 1
51584: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
51585: LD_ADDR_EXP 80
51589: PUSH
51590: LD_EXP 80
51594: PPUSH
51595: LD_VAR 0 4
51599: PPUSH
51600: EMPTY
51601: PPUSH
51602: CALL_OW 1
51606: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
51607: LD_ADDR_EXP 81
51611: PUSH
51612: LD_EXP 81
51616: PPUSH
51617: LD_VAR 0 4
51621: PPUSH
51622: EMPTY
51623: PPUSH
51624: CALL_OW 1
51628: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
51629: LD_ADDR_EXP 82
51633: PUSH
51634: LD_EXP 82
51638: PPUSH
51639: LD_VAR 0 4
51643: PPUSH
51644: EMPTY
51645: PPUSH
51646: CALL_OW 1
51650: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
51651: LD_ADDR_EXP 83
51655: PUSH
51656: LD_EXP 83
51660: PPUSH
51661: LD_VAR 0 4
51665: PPUSH
51666: EMPTY
51667: PPUSH
51668: CALL_OW 1
51672: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
51673: LD_ADDR_EXP 84
51677: PUSH
51678: LD_EXP 84
51682: PPUSH
51683: LD_VAR 0 4
51687: PPUSH
51688: EMPTY
51689: PPUSH
51690: CALL_OW 1
51694: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
51695: LD_ADDR_EXP 85
51699: PUSH
51700: LD_EXP 85
51704: PPUSH
51705: LD_VAR 0 4
51709: PPUSH
51710: EMPTY
51711: PPUSH
51712: CALL_OW 1
51716: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
51717: LD_ADDR_EXP 86
51721: PUSH
51722: LD_EXP 86
51726: PPUSH
51727: LD_VAR 0 4
51731: PPUSH
51732: EMPTY
51733: PPUSH
51734: CALL_OW 1
51738: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
51739: LD_ADDR_EXP 87
51743: PUSH
51744: LD_EXP 87
51748: PPUSH
51749: LD_VAR 0 4
51753: PPUSH
51754: EMPTY
51755: PPUSH
51756: CALL_OW 1
51760: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
51761: LD_ADDR_EXP 88
51765: PUSH
51766: LD_EXP 88
51770: PPUSH
51771: LD_VAR 0 4
51775: PPUSH
51776: EMPTY
51777: PPUSH
51778: CALL_OW 1
51782: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
51783: LD_ADDR_EXP 89
51787: PUSH
51788: LD_EXP 89
51792: PPUSH
51793: LD_VAR 0 4
51797: PPUSH
51798: EMPTY
51799: PPUSH
51800: CALL_OW 1
51804: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
51805: LD_ADDR_EXP 90
51809: PUSH
51810: LD_EXP 90
51814: PPUSH
51815: LD_VAR 0 4
51819: PPUSH
51820: EMPTY
51821: PPUSH
51822: CALL_OW 1
51826: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
51827: LD_ADDR_EXP 92
51831: PUSH
51832: LD_EXP 92
51836: PPUSH
51837: LD_VAR 0 4
51841: PPUSH
51842: EMPTY
51843: PPUSH
51844: CALL_OW 1
51848: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
51849: LD_ADDR_EXP 94
51853: PUSH
51854: LD_EXP 94
51858: PPUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: EMPTY
51865: PPUSH
51866: CALL_OW 1
51870: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
51871: LD_ADDR_EXP 95
51875: PUSH
51876: LD_EXP 95
51880: PPUSH
51881: LD_VAR 0 4
51885: PPUSH
51886: EMPTY
51887: PPUSH
51888: CALL_OW 1
51892: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
51893: LD_ADDR_EXP 96
51897: PUSH
51898: LD_EXP 96
51902: PPUSH
51903: LD_VAR 0 4
51907: PPUSH
51908: EMPTY
51909: PPUSH
51910: CALL_OW 1
51914: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
51915: LD_ADDR_EXP 97
51919: PUSH
51920: LD_EXP 97
51924: PPUSH
51925: LD_VAR 0 4
51929: PPUSH
51930: EMPTY
51931: PPUSH
51932: CALL_OW 1
51936: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
51937: LD_ADDR_EXP 98
51941: PUSH
51942: LD_EXP 98
51946: PPUSH
51947: LD_VAR 0 4
51951: PPUSH
51952: EMPTY
51953: PPUSH
51954: CALL_OW 1
51958: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
51959: LD_ADDR_EXP 99
51963: PUSH
51964: LD_EXP 99
51968: PPUSH
51969: LD_VAR 0 4
51973: PPUSH
51974: EMPTY
51975: PPUSH
51976: CALL_OW 1
51980: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
51981: LD_ADDR_EXP 100
51985: PUSH
51986: LD_EXP 100
51990: PPUSH
51991: LD_VAR 0 4
51995: PPUSH
51996: EMPTY
51997: PPUSH
51998: CALL_OW 1
52002: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
52003: LD_ADDR_EXP 101
52007: PUSH
52008: LD_EXP 101
52012: PPUSH
52013: LD_VAR 0 4
52017: PPUSH
52018: EMPTY
52019: PPUSH
52020: CALL_OW 1
52024: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
52025: LD_ADDR_EXP 102
52029: PUSH
52030: LD_EXP 102
52034: PPUSH
52035: LD_VAR 0 4
52039: PPUSH
52040: EMPTY
52041: PPUSH
52042: CALL_OW 1
52046: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
52047: LD_ADDR_EXP 103
52051: PUSH
52052: LD_EXP 103
52056: PPUSH
52057: LD_VAR 0 4
52061: PPUSH
52062: EMPTY
52063: PPUSH
52064: CALL_OW 1
52068: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
52069: LD_ADDR_EXP 104
52073: PUSH
52074: LD_EXP 104
52078: PPUSH
52079: LD_VAR 0 4
52083: PPUSH
52084: EMPTY
52085: PPUSH
52086: CALL_OW 1
52090: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
52091: LD_ADDR_EXP 105
52095: PUSH
52096: LD_EXP 105
52100: PPUSH
52101: LD_VAR 0 4
52105: PPUSH
52106: EMPTY
52107: PPUSH
52108: CALL_OW 1
52112: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
52113: LD_ADDR_EXP 106
52117: PUSH
52118: LD_EXP 106
52122: PPUSH
52123: LD_VAR 0 4
52127: PPUSH
52128: EMPTY
52129: PPUSH
52130: CALL_OW 1
52134: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
52135: LD_ADDR_EXP 107
52139: PUSH
52140: LD_EXP 107
52144: PPUSH
52145: LD_VAR 0 4
52149: PPUSH
52150: LD_INT 0
52152: PPUSH
52153: CALL_OW 1
52157: ST_TO_ADDR
// result := base ;
52158: LD_ADDR_VAR 0 3
52162: PUSH
52163: LD_VAR 0 4
52167: ST_TO_ADDR
// end ;
52168: LD_VAR 0 3
52172: RET
// export function MC_Start ( ) ; var i ; begin
52173: LD_INT 0
52175: PPUSH
52176: PPUSH
// for i = 1 to mc_bases do
52177: LD_ADDR_VAR 0 2
52181: PUSH
52182: DOUBLE
52183: LD_INT 1
52185: DEC
52186: ST_TO_ADDR
52187: LD_EXP 65
52191: PUSH
52192: FOR_TO
52193: IFFALSE 53270
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
52195: LD_ADDR_EXP 65
52199: PUSH
52200: LD_EXP 65
52204: PPUSH
52205: LD_VAR 0 2
52209: PPUSH
52210: LD_EXP 65
52214: PUSH
52215: LD_VAR 0 2
52219: ARRAY
52220: PUSH
52221: LD_INT 0
52223: DIFF
52224: PPUSH
52225: CALL_OW 1
52229: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
52230: LD_ADDR_EXP 66
52234: PUSH
52235: LD_EXP 66
52239: PPUSH
52240: LD_VAR 0 2
52244: PPUSH
52245: EMPTY
52246: PPUSH
52247: CALL_OW 1
52251: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52252: LD_ADDR_EXP 67
52256: PUSH
52257: LD_EXP 67
52261: PPUSH
52262: LD_VAR 0 2
52266: PPUSH
52267: EMPTY
52268: PPUSH
52269: CALL_OW 1
52273: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
52274: LD_ADDR_EXP 68
52278: PUSH
52279: LD_EXP 68
52283: PPUSH
52284: LD_VAR 0 2
52288: PPUSH
52289: EMPTY
52290: PPUSH
52291: CALL_OW 1
52295: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
52296: LD_ADDR_EXP 69
52300: PUSH
52301: LD_EXP 69
52305: PPUSH
52306: LD_VAR 0 2
52310: PPUSH
52311: EMPTY
52312: PUSH
52313: EMPTY
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PPUSH
52319: CALL_OW 1
52323: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
52324: LD_ADDR_EXP 70
52328: PUSH
52329: LD_EXP 70
52333: PPUSH
52334: LD_VAR 0 2
52338: PPUSH
52339: EMPTY
52340: PPUSH
52341: CALL_OW 1
52345: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
52346: LD_ADDR_EXP 97
52350: PUSH
52351: LD_EXP 97
52355: PPUSH
52356: LD_VAR 0 2
52360: PPUSH
52361: EMPTY
52362: PPUSH
52363: CALL_OW 1
52367: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
52368: LD_ADDR_EXP 71
52372: PUSH
52373: LD_EXP 71
52377: PPUSH
52378: LD_VAR 0 2
52382: PPUSH
52383: EMPTY
52384: PPUSH
52385: CALL_OW 1
52389: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
52390: LD_ADDR_EXP 72
52394: PUSH
52395: LD_EXP 72
52399: PPUSH
52400: LD_VAR 0 2
52404: PPUSH
52405: EMPTY
52406: PPUSH
52407: CALL_OW 1
52411: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
52412: LD_ADDR_EXP 73
52416: PUSH
52417: LD_EXP 73
52421: PPUSH
52422: LD_VAR 0 2
52426: PPUSH
52427: LD_EXP 65
52431: PUSH
52432: LD_VAR 0 2
52436: ARRAY
52437: PPUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 30
52443: PUSH
52444: LD_INT 32
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 30
52453: PUSH
52454: LD_INT 33
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: PPUSH
52466: CALL_OW 72
52470: PPUSH
52471: CALL_OW 1
52475: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
52476: LD_ADDR_EXP 74
52480: PUSH
52481: LD_EXP 74
52485: PPUSH
52486: LD_VAR 0 2
52490: PPUSH
52491: LD_EXP 65
52495: PUSH
52496: LD_VAR 0 2
52500: ARRAY
52501: PPUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 30
52507: PUSH
52508: LD_INT 32
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 30
52517: PUSH
52518: LD_INT 31
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 58
52532: PUSH
52533: EMPTY
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PPUSH
52540: CALL_OW 72
52544: PPUSH
52545: CALL_OW 1
52549: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
52550: LD_ADDR_EXP 75
52554: PUSH
52555: LD_EXP 75
52559: PPUSH
52560: LD_VAR 0 2
52564: PPUSH
52565: EMPTY
52566: PPUSH
52567: CALL_OW 1
52571: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
52572: LD_ADDR_EXP 79
52576: PUSH
52577: LD_EXP 79
52581: PPUSH
52582: LD_VAR 0 2
52586: PPUSH
52587: EMPTY
52588: PPUSH
52589: CALL_OW 1
52593: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
52594: LD_ADDR_EXP 78
52598: PUSH
52599: LD_EXP 78
52603: PPUSH
52604: LD_VAR 0 2
52608: PPUSH
52609: EMPTY
52610: PPUSH
52611: CALL_OW 1
52615: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
52616: LD_ADDR_EXP 80
52620: PUSH
52621: LD_EXP 80
52625: PPUSH
52626: LD_VAR 0 2
52630: PPUSH
52631: EMPTY
52632: PPUSH
52633: CALL_OW 1
52637: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
52638: LD_ADDR_EXP 81
52642: PUSH
52643: LD_EXP 81
52647: PPUSH
52648: LD_VAR 0 2
52652: PPUSH
52653: EMPTY
52654: PPUSH
52655: CALL_OW 1
52659: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52660: LD_ADDR_EXP 82
52664: PUSH
52665: LD_EXP 82
52669: PPUSH
52670: LD_VAR 0 2
52674: PPUSH
52675: EMPTY
52676: PPUSH
52677: CALL_OW 1
52681: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
52682: LD_ADDR_EXP 83
52686: PUSH
52687: LD_EXP 83
52691: PPUSH
52692: LD_VAR 0 2
52696: PPUSH
52697: EMPTY
52698: PPUSH
52699: CALL_OW 1
52703: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
52704: LD_ADDR_EXP 84
52708: PUSH
52709: LD_EXP 84
52713: PPUSH
52714: LD_VAR 0 2
52718: PPUSH
52719: EMPTY
52720: PPUSH
52721: CALL_OW 1
52725: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52726: LD_ADDR_EXP 85
52730: PUSH
52731: LD_EXP 85
52735: PPUSH
52736: LD_VAR 0 2
52740: PPUSH
52741: EMPTY
52742: PPUSH
52743: CALL_OW 1
52747: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
52748: LD_ADDR_EXP 86
52752: PUSH
52753: LD_EXP 86
52757: PPUSH
52758: LD_VAR 0 2
52762: PPUSH
52763: EMPTY
52764: PPUSH
52765: CALL_OW 1
52769: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52770: LD_ADDR_EXP 87
52774: PUSH
52775: LD_EXP 87
52779: PPUSH
52780: LD_VAR 0 2
52784: PPUSH
52785: EMPTY
52786: PPUSH
52787: CALL_OW 1
52791: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
52792: LD_ADDR_EXP 76
52796: PUSH
52797: LD_EXP 76
52801: PPUSH
52802: LD_VAR 0 2
52806: PPUSH
52807: LD_INT 0
52809: PPUSH
52810: CALL_OW 1
52814: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
52815: LD_ADDR_EXP 89
52819: PUSH
52820: LD_EXP 89
52824: PPUSH
52825: LD_VAR 0 2
52829: PPUSH
52830: LD_INT 0
52832: PPUSH
52833: CALL_OW 1
52837: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52838: LD_ADDR_EXP 77
52842: PUSH
52843: LD_EXP 77
52847: PPUSH
52848: LD_VAR 0 2
52852: PPUSH
52853: EMPTY
52854: PPUSH
52855: CALL_OW 1
52859: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
52860: LD_ADDR_EXP 88
52864: PUSH
52865: LD_EXP 88
52869: PPUSH
52870: LD_VAR 0 2
52874: PPUSH
52875: LD_INT 0
52877: PPUSH
52878: CALL_OW 1
52882: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
52883: LD_ADDR_EXP 90
52887: PUSH
52888: LD_EXP 90
52892: PPUSH
52893: LD_VAR 0 2
52897: PPUSH
52898: EMPTY
52899: PPUSH
52900: CALL_OW 1
52904: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
52905: LD_ADDR_EXP 93
52909: PUSH
52910: LD_EXP 93
52914: PPUSH
52915: LD_VAR 0 2
52919: PPUSH
52920: LD_INT 0
52922: PPUSH
52923: CALL_OW 1
52927: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
52928: LD_ADDR_EXP 94
52932: PUSH
52933: LD_EXP 94
52937: PPUSH
52938: LD_VAR 0 2
52942: PPUSH
52943: EMPTY
52944: PPUSH
52945: CALL_OW 1
52949: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
52950: LD_ADDR_EXP 95
52954: PUSH
52955: LD_EXP 95
52959: PPUSH
52960: LD_VAR 0 2
52964: PPUSH
52965: EMPTY
52966: PPUSH
52967: CALL_OW 1
52971: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52972: LD_ADDR_EXP 96
52976: PUSH
52977: LD_EXP 96
52981: PPUSH
52982: LD_VAR 0 2
52986: PPUSH
52987: EMPTY
52988: PPUSH
52989: CALL_OW 1
52993: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
52994: LD_ADDR_EXP 98
52998: PUSH
52999: LD_EXP 98
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: LD_EXP 65
53013: PUSH
53014: LD_VAR 0 2
53018: ARRAY
53019: PPUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 30
53025: PUSH
53026: LD_INT 6
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 30
53035: PUSH
53036: LD_INT 7
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 30
53045: PUSH
53046: LD_INT 8
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: PPUSH
53059: CALL_OW 72
53063: PPUSH
53064: CALL_OW 1
53068: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
53069: LD_ADDR_EXP 99
53073: PUSH
53074: LD_EXP 99
53078: PPUSH
53079: LD_VAR 0 2
53083: PPUSH
53084: EMPTY
53085: PPUSH
53086: CALL_OW 1
53090: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
53091: LD_ADDR_EXP 100
53095: PUSH
53096: LD_EXP 100
53100: PPUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: EMPTY
53107: PPUSH
53108: CALL_OW 1
53112: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
53113: LD_ADDR_EXP 101
53117: PUSH
53118: LD_EXP 101
53122: PPUSH
53123: LD_VAR 0 2
53127: PPUSH
53128: EMPTY
53129: PPUSH
53130: CALL_OW 1
53134: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53135: LD_ADDR_EXP 102
53139: PUSH
53140: LD_EXP 102
53144: PPUSH
53145: LD_VAR 0 2
53149: PPUSH
53150: EMPTY
53151: PPUSH
53152: CALL_OW 1
53156: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53157: LD_ADDR_EXP 103
53161: PUSH
53162: LD_EXP 103
53166: PPUSH
53167: LD_VAR 0 2
53171: PPUSH
53172: EMPTY
53173: PPUSH
53174: CALL_OW 1
53178: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
53179: LD_ADDR_EXP 104
53183: PUSH
53184: LD_EXP 104
53188: PPUSH
53189: LD_VAR 0 2
53193: PPUSH
53194: EMPTY
53195: PPUSH
53196: CALL_OW 1
53200: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
53201: LD_ADDR_EXP 105
53205: PUSH
53206: LD_EXP 105
53210: PPUSH
53211: LD_VAR 0 2
53215: PPUSH
53216: EMPTY
53217: PPUSH
53218: CALL_OW 1
53222: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
53223: LD_ADDR_EXP 106
53227: PUSH
53228: LD_EXP 106
53232: PPUSH
53233: LD_VAR 0 2
53237: PPUSH
53238: EMPTY
53239: PPUSH
53240: CALL_OW 1
53244: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
53245: LD_ADDR_EXP 107
53249: PUSH
53250: LD_EXP 107
53254: PPUSH
53255: LD_VAR 0 2
53259: PPUSH
53260: LD_INT 0
53262: PPUSH
53263: CALL_OW 1
53267: ST_TO_ADDR
// end ;
53268: GO 52192
53270: POP
53271: POP
// MC_InitSides ( ) ;
53272: CALL 53558 0 0
// MC_InitResearch ( ) ;
53276: CALL 53297 0 0
// CustomInitMacro ( ) ;
53280: CALL 5991 0 0
// skirmish := true ;
53284: LD_ADDR_EXP 63
53288: PUSH
53289: LD_INT 1
53291: ST_TO_ADDR
// end ;
53292: LD_VAR 0 1
53296: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
53297: LD_INT 0
53299: PPUSH
53300: PPUSH
53301: PPUSH
53302: PPUSH
53303: PPUSH
53304: PPUSH
// if not mc_bases then
53305: LD_EXP 65
53309: NOT
53310: IFFALSE 53314
// exit ;
53312: GO 53553
// for i = 1 to 8 do
53314: LD_ADDR_VAR 0 2
53318: PUSH
53319: DOUBLE
53320: LD_INT 1
53322: DEC
53323: ST_TO_ADDR
53324: LD_INT 8
53326: PUSH
53327: FOR_TO
53328: IFFALSE 53354
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
53330: LD_ADDR_EXP 92
53334: PUSH
53335: LD_EXP 92
53339: PPUSH
53340: LD_VAR 0 2
53344: PPUSH
53345: EMPTY
53346: PPUSH
53347: CALL_OW 1
53351: ST_TO_ADDR
53352: GO 53327
53354: POP
53355: POP
// tmp := [ ] ;
53356: LD_ADDR_VAR 0 5
53360: PUSH
53361: EMPTY
53362: ST_TO_ADDR
// for i = 1 to mc_sides do
53363: LD_ADDR_VAR 0 2
53367: PUSH
53368: DOUBLE
53369: LD_INT 1
53371: DEC
53372: ST_TO_ADDR
53373: LD_EXP 91
53377: PUSH
53378: FOR_TO
53379: IFFALSE 53437
// if not mc_sides [ i ] in tmp then
53381: LD_EXP 91
53385: PUSH
53386: LD_VAR 0 2
53390: ARRAY
53391: PUSH
53392: LD_VAR 0 5
53396: IN
53397: NOT
53398: IFFALSE 53435
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
53400: LD_ADDR_VAR 0 5
53404: PUSH
53405: LD_VAR 0 5
53409: PPUSH
53410: LD_VAR 0 5
53414: PUSH
53415: LD_INT 1
53417: PLUS
53418: PPUSH
53419: LD_EXP 91
53423: PUSH
53424: LD_VAR 0 2
53428: ARRAY
53429: PPUSH
53430: CALL_OW 2
53434: ST_TO_ADDR
53435: GO 53378
53437: POP
53438: POP
// if not tmp then
53439: LD_VAR 0 5
53443: NOT
53444: IFFALSE 53448
// exit ;
53446: GO 53553
// for j in tmp do
53448: LD_ADDR_VAR 0 3
53452: PUSH
53453: LD_VAR 0 5
53457: PUSH
53458: FOR_IN
53459: IFFALSE 53551
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
53461: LD_ADDR_VAR 0 6
53465: PUSH
53466: LD_INT 22
53468: PUSH
53469: LD_VAR 0 3
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PPUSH
53478: CALL_OW 69
53482: ST_TO_ADDR
// if not un then
53483: LD_VAR 0 6
53487: NOT
53488: IFFALSE 53492
// continue ;
53490: GO 53458
// nation := GetNation ( un [ 1 ] ) ;
53492: LD_ADDR_VAR 0 4
53496: PUSH
53497: LD_VAR 0 6
53501: PUSH
53502: LD_INT 1
53504: ARRAY
53505: PPUSH
53506: CALL_OW 248
53510: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
53511: LD_ADDR_EXP 92
53515: PUSH
53516: LD_EXP 92
53520: PPUSH
53521: LD_VAR 0 3
53525: PPUSH
53526: LD_VAR 0 3
53530: PPUSH
53531: LD_VAR 0 4
53535: PPUSH
53536: LD_INT 1
53538: PPUSH
53539: CALL 13627 0 3
53543: PPUSH
53544: CALL_OW 1
53548: ST_TO_ADDR
// end ;
53549: GO 53458
53551: POP
53552: POP
// end ;
53553: LD_VAR 0 1
53557: RET
// export function MC_InitSides ( ) ; var i ; begin
53558: LD_INT 0
53560: PPUSH
53561: PPUSH
// if not mc_bases then
53562: LD_EXP 65
53566: NOT
53567: IFFALSE 53571
// exit ;
53569: GO 53645
// for i = 1 to mc_bases do
53571: LD_ADDR_VAR 0 2
53575: PUSH
53576: DOUBLE
53577: LD_INT 1
53579: DEC
53580: ST_TO_ADDR
53581: LD_EXP 65
53585: PUSH
53586: FOR_TO
53587: IFFALSE 53643
// if mc_bases [ i ] then
53589: LD_EXP 65
53593: PUSH
53594: LD_VAR 0 2
53598: ARRAY
53599: IFFALSE 53641
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
53601: LD_ADDR_EXP 91
53605: PUSH
53606: LD_EXP 91
53610: PPUSH
53611: LD_VAR 0 2
53615: PPUSH
53616: LD_EXP 65
53620: PUSH
53621: LD_VAR 0 2
53625: ARRAY
53626: PUSH
53627: LD_INT 1
53629: ARRAY
53630: PPUSH
53631: CALL_OW 255
53635: PPUSH
53636: CALL_OW 1
53640: ST_TO_ADDR
53641: GO 53586
53643: POP
53644: POP
// end ;
53645: LD_VAR 0 1
53649: RET
// every 0 0$01 trigger skirmish do
53650: LD_EXP 63
53654: IFFALSE 53808
53656: GO 53658
53658: DISABLE
// begin enable ;
53659: ENABLE
// MC_CheckBuildings ( ) ;
53660: CALL 58306 0 0
// MC_CheckPeopleLife ( ) ;
53664: CALL 58431 0 0
// RaiseSailEvent ( 100 ) ;
53668: LD_INT 100
53670: PPUSH
53671: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
53675: LD_INT 103
53677: PPUSH
53678: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
53682: LD_INT 104
53684: PPUSH
53685: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
53689: LD_INT 105
53691: PPUSH
53692: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
53696: LD_INT 106
53698: PPUSH
53699: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
53703: LD_INT 107
53705: PPUSH
53706: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
53710: LD_INT 108
53712: PPUSH
53713: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
53717: LD_INT 109
53719: PPUSH
53720: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
53724: LD_INT 110
53726: PPUSH
53727: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
53731: LD_INT 111
53733: PPUSH
53734: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
53738: LD_INT 112
53740: PPUSH
53741: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
53745: LD_INT 113
53747: PPUSH
53748: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
53752: LD_INT 120
53754: PPUSH
53755: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
53759: LD_INT 121
53761: PPUSH
53762: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
53766: LD_INT 122
53768: PPUSH
53769: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
53773: LD_INT 123
53775: PPUSH
53776: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
53780: LD_INT 124
53782: PPUSH
53783: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
53787: LD_INT 125
53789: PPUSH
53790: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
53794: LD_INT 126
53796: PPUSH
53797: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
53801: LD_INT 200
53803: PPUSH
53804: CALL_OW 427
// end ;
53808: END
// on SailEvent ( event ) do begin if event < 100 then
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 100
53816: LESS
53817: IFFALSE 53828
// CustomEvent ( event ) ;
53819: LD_VAR 0 1
53823: PPUSH
53824: CALL 5983 0 1
// if event = 100 then
53828: LD_VAR 0 1
53832: PUSH
53833: LD_INT 100
53835: EQUAL
53836: IFFALSE 53842
// MC_ClassManager ( ) ;
53838: CALL 54234 0 0
// if event = 101 then
53842: LD_VAR 0 1
53846: PUSH
53847: LD_INT 101
53849: EQUAL
53850: IFFALSE 53856
// MC_RepairBuildings ( ) ;
53852: CALL 59016 0 0
// if event = 102 then
53856: LD_VAR 0 1
53860: PUSH
53861: LD_INT 102
53863: EQUAL
53864: IFFALSE 53870
// MC_Heal ( ) ;
53866: CALL 59875 0 0
// if event = 103 then
53870: LD_VAR 0 1
53874: PUSH
53875: LD_INT 103
53877: EQUAL
53878: IFFALSE 53884
// MC_Build ( ) ;
53880: CALL 60297 0 0
// if event = 104 then
53884: LD_VAR 0 1
53888: PUSH
53889: LD_INT 104
53891: EQUAL
53892: IFFALSE 53898
// MC_TurretWeapon ( ) ;
53894: CALL 61910 0 0
// if event = 105 then
53898: LD_VAR 0 1
53902: PUSH
53903: LD_INT 105
53905: EQUAL
53906: IFFALSE 53912
// MC_BuildUpgrade ( ) ;
53908: CALL 61461 0 0
// if event = 106 then
53912: LD_VAR 0 1
53916: PUSH
53917: LD_INT 106
53919: EQUAL
53920: IFFALSE 53926
// MC_PlantMines ( ) ;
53922: CALL 62340 0 0
// if event = 107 then
53926: LD_VAR 0 1
53930: PUSH
53931: LD_INT 107
53933: EQUAL
53934: IFFALSE 53940
// MC_CollectCrates ( ) ;
53936: CALL 63138 0 0
// if event = 108 then
53940: LD_VAR 0 1
53944: PUSH
53945: LD_INT 108
53947: EQUAL
53948: IFFALSE 53954
// MC_LinkRemoteControl ( ) ;
53950: CALL 64914 0 0
// if event = 109 then
53954: LD_VAR 0 1
53958: PUSH
53959: LD_INT 109
53961: EQUAL
53962: IFFALSE 53968
// MC_ProduceVehicle ( ) ;
53964: CALL 65095 0 0
// if event = 110 then
53968: LD_VAR 0 1
53972: PUSH
53973: LD_INT 110
53975: EQUAL
53976: IFFALSE 53982
// MC_SendAttack ( ) ;
53978: CALL 65561 0 0
// if event = 111 then
53982: LD_VAR 0 1
53986: PUSH
53987: LD_INT 111
53989: EQUAL
53990: IFFALSE 53996
// MC_Defend ( ) ;
53992: CALL 65669 0 0
// if event = 112 then
53996: LD_VAR 0 1
54000: PUSH
54001: LD_INT 112
54003: EQUAL
54004: IFFALSE 54010
// MC_Research ( ) ;
54006: CALL 66274 0 0
// if event = 113 then
54010: LD_VAR 0 1
54014: PUSH
54015: LD_INT 113
54017: EQUAL
54018: IFFALSE 54024
// MC_MinesTrigger ( ) ;
54020: CALL 67388 0 0
// if event = 120 then
54024: LD_VAR 0 1
54028: PUSH
54029: LD_INT 120
54031: EQUAL
54032: IFFALSE 54038
// MC_RepairVehicle ( ) ;
54034: CALL 67487 0 0
// if event = 121 then
54038: LD_VAR 0 1
54042: PUSH
54043: LD_INT 121
54045: EQUAL
54046: IFFALSE 54052
// MC_TameApe ( ) ;
54048: CALL 68217 0 0
// if event = 122 then
54052: LD_VAR 0 1
54056: PUSH
54057: LD_INT 122
54059: EQUAL
54060: IFFALSE 54066
// MC_ChangeApeClass ( ) ;
54062: CALL 69046 0 0
// if event = 123 then
54066: LD_VAR 0 1
54070: PUSH
54071: LD_INT 123
54073: EQUAL
54074: IFFALSE 54080
// MC_Bazooka ( ) ;
54076: CALL 69696 0 0
// if event = 124 then
54080: LD_VAR 0 1
54084: PUSH
54085: LD_INT 124
54087: EQUAL
54088: IFFALSE 54094
// MC_TeleportExit ( ) ;
54090: CALL 69894 0 0
// if event = 125 then
54094: LD_VAR 0 1
54098: PUSH
54099: LD_INT 125
54101: EQUAL
54102: IFFALSE 54108
// MC_Deposits ( ) ;
54104: CALL 70541 0 0
// if event = 126 then
54108: LD_VAR 0 1
54112: PUSH
54113: LD_INT 126
54115: EQUAL
54116: IFFALSE 54122
// MC_RemoteDriver ( ) ;
54118: CALL 71166 0 0
// if event = 200 then
54122: LD_VAR 0 1
54126: PUSH
54127: LD_INT 200
54129: EQUAL
54130: IFFALSE 54136
// MC_Idle ( ) ;
54132: CALL 73115 0 0
// end ;
54136: PPOPN 1
54138: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
// if not mc_bases [ base ] or not tag then
54143: LD_EXP 65
54147: PUSH
54148: LD_VAR 0 1
54152: ARRAY
54153: NOT
54154: PUSH
54155: LD_VAR 0 2
54159: NOT
54160: OR
54161: IFFALSE 54165
// exit ;
54163: GO 54229
// for i in mc_bases [ base ] union mc_ape [ base ] do
54165: LD_ADDR_VAR 0 4
54169: PUSH
54170: LD_EXP 65
54174: PUSH
54175: LD_VAR 0 1
54179: ARRAY
54180: PUSH
54181: LD_EXP 94
54185: PUSH
54186: LD_VAR 0 1
54190: ARRAY
54191: UNION
54192: PUSH
54193: FOR_IN
54194: IFFALSE 54227
// if GetTag ( i ) = tag then
54196: LD_VAR 0 4
54200: PPUSH
54201: CALL_OW 110
54205: PUSH
54206: LD_VAR 0 2
54210: EQUAL
54211: IFFALSE 54225
// SetTag ( i , 0 ) ;
54213: LD_VAR 0 4
54217: PPUSH
54218: LD_INT 0
54220: PPUSH
54221: CALL_OW 109
54225: GO 54193
54227: POP
54228: POP
// end ;
54229: LD_VAR 0 3
54233: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
54234: LD_INT 0
54236: PPUSH
54237: PPUSH
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
// if not mc_bases then
54244: LD_EXP 65
54248: NOT
54249: IFFALSE 54253
// exit ;
54251: GO 54711
// for i = 1 to mc_bases do
54253: LD_ADDR_VAR 0 2
54257: PUSH
54258: DOUBLE
54259: LD_INT 1
54261: DEC
54262: ST_TO_ADDR
54263: LD_EXP 65
54267: PUSH
54268: FOR_TO
54269: IFFALSE 54709
// begin tmp := MC_ClassCheckReq ( i ) ;
54271: LD_ADDR_VAR 0 4
54275: PUSH
54276: LD_VAR 0 2
54280: PPUSH
54281: CALL 54716 0 1
54285: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
54286: LD_ADDR_EXP 106
54290: PUSH
54291: LD_EXP 106
54295: PPUSH
54296: LD_VAR 0 2
54300: PPUSH
54301: LD_VAR 0 4
54305: PPUSH
54306: CALL_OW 1
54310: ST_TO_ADDR
// if not tmp then
54311: LD_VAR 0 4
54315: NOT
54316: IFFALSE 54320
// continue ;
54318: GO 54268
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
54320: LD_ADDR_VAR 0 6
54324: PUSH
54325: LD_EXP 65
54329: PUSH
54330: LD_VAR 0 2
54334: ARRAY
54335: PPUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 30
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 30
54351: PUSH
54352: LD_INT 5
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: PPUSH
54364: CALL_OW 72
54368: PUSH
54369: LD_EXP 65
54373: PUSH
54374: LD_VAR 0 2
54378: ARRAY
54379: PPUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 30
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 30
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: PPUSH
54408: CALL_OW 72
54412: PUSH
54413: LD_EXP 65
54417: PUSH
54418: LD_VAR 0 2
54422: ARRAY
54423: PPUSH
54424: LD_INT 30
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PPUSH
54434: CALL_OW 72
54438: PUSH
54439: LD_EXP 65
54443: PUSH
54444: LD_VAR 0 2
54448: ARRAY
54449: PPUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 30
54455: PUSH
54456: LD_INT 6
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 30
54465: PUSH
54466: LD_INT 7
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 30
54475: PUSH
54476: LD_INT 8
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: PPUSH
54489: CALL_OW 72
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// for j = 1 to 4 do
54500: LD_ADDR_VAR 0 3
54504: PUSH
54505: DOUBLE
54506: LD_INT 1
54508: DEC
54509: ST_TO_ADDR
54510: LD_INT 4
54512: PUSH
54513: FOR_TO
54514: IFFALSE 54705
// begin if not tmp [ j ] then
54516: LD_VAR 0 4
54520: PUSH
54521: LD_VAR 0 3
54525: ARRAY
54526: NOT
54527: IFFALSE 54531
// continue ;
54529: GO 54513
// for p in tmp [ j ] do
54531: LD_ADDR_VAR 0 5
54535: PUSH
54536: LD_VAR 0 4
54540: PUSH
54541: LD_VAR 0 3
54545: ARRAY
54546: PUSH
54547: FOR_IN
54548: IFFALSE 54701
// begin if not b [ j ] then
54550: LD_VAR 0 6
54554: PUSH
54555: LD_VAR 0 3
54559: ARRAY
54560: NOT
54561: IFFALSE 54565
// break ;
54563: GO 54701
// e := 0 ;
54565: LD_ADDR_VAR 0 7
54569: PUSH
54570: LD_INT 0
54572: ST_TO_ADDR
// for k in b [ j ] do
54573: LD_ADDR_VAR 0 8
54577: PUSH
54578: LD_VAR 0 6
54582: PUSH
54583: LD_VAR 0 3
54587: ARRAY
54588: PUSH
54589: FOR_IN
54590: IFFALSE 54617
// if IsNotFull ( k ) then
54592: LD_VAR 0 8
54596: PPUSH
54597: CALL 15776 0 1
54601: IFFALSE 54615
// begin e := k ;
54603: LD_ADDR_VAR 0 7
54607: PUSH
54608: LD_VAR 0 8
54612: ST_TO_ADDR
// break ;
54613: GO 54617
// end ;
54615: GO 54589
54617: POP
54618: POP
// if e and not UnitGoingToBuilding ( p , e ) then
54619: LD_VAR 0 7
54623: PUSH
54624: LD_VAR 0 5
54628: PPUSH
54629: LD_VAR 0 7
54633: PPUSH
54634: CALL 48196 0 2
54638: NOT
54639: AND
54640: IFFALSE 54699
// begin if IsInUnit ( p ) then
54642: LD_VAR 0 5
54646: PPUSH
54647: CALL_OW 310
54651: IFFALSE 54662
// ComExitBuilding ( p ) ;
54653: LD_VAR 0 5
54657: PPUSH
54658: CALL_OW 122
// ComEnterUnit ( p , e ) ;
54662: LD_VAR 0 5
54666: PPUSH
54667: LD_VAR 0 7
54671: PPUSH
54672: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
54676: LD_VAR 0 5
54680: PPUSH
54681: LD_VAR 0 3
54685: PPUSH
54686: CALL_OW 183
// AddComExitBuilding ( p ) ;
54690: LD_VAR 0 5
54694: PPUSH
54695: CALL_OW 182
// end ; end ;
54699: GO 54547
54701: POP
54702: POP
// end ;
54703: GO 54513
54705: POP
54706: POP
// end ;
54707: GO 54268
54709: POP
54710: POP
// end ;
54711: LD_VAR 0 1
54715: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
54716: LD_INT 0
54718: PPUSH
54719: PPUSH
54720: PPUSH
54721: PPUSH
54722: PPUSH
54723: PPUSH
54724: PPUSH
54725: PPUSH
54726: PPUSH
54727: PPUSH
54728: PPUSH
54729: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54730: LD_VAR 0 1
54734: NOT
54735: PUSH
54736: LD_EXP 65
54740: PUSH
54741: LD_VAR 0 1
54745: ARRAY
54746: NOT
54747: OR
54748: PUSH
54749: LD_EXP 65
54753: PUSH
54754: LD_VAR 0 1
54758: ARRAY
54759: PPUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 30
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 30
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: PPUSH
54788: CALL_OW 72
54792: NOT
54793: OR
54794: IFFALSE 54798
// exit ;
54796: GO 58301
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54798: LD_ADDR_VAR 0 4
54802: PUSH
54803: LD_EXP 65
54807: PUSH
54808: LD_VAR 0 1
54812: ARRAY
54813: PPUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 25
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 25
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 25
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 25
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 25
54859: PUSH
54860: LD_INT 5
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 25
54869: PUSH
54870: LD_INT 8
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 25
54879: PUSH
54880: LD_INT 9
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: PPUSH
54897: CALL_OW 72
54901: ST_TO_ADDR
// if not tmp then
54902: LD_VAR 0 4
54906: NOT
54907: IFFALSE 54911
// exit ;
54909: GO 58301
// for i in tmp do
54911: LD_ADDR_VAR 0 3
54915: PUSH
54916: LD_VAR 0 4
54920: PUSH
54921: FOR_IN
54922: IFFALSE 54953
// if GetTag ( i ) then
54924: LD_VAR 0 3
54928: PPUSH
54929: CALL_OW 110
54933: IFFALSE 54951
// tmp := tmp diff i ;
54935: LD_ADDR_VAR 0 4
54939: PUSH
54940: LD_VAR 0 4
54944: PUSH
54945: LD_VAR 0 3
54949: DIFF
54950: ST_TO_ADDR
54951: GO 54921
54953: POP
54954: POP
// if not tmp then
54955: LD_VAR 0 4
54959: NOT
54960: IFFALSE 54964
// exit ;
54962: GO 58301
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54964: LD_ADDR_VAR 0 5
54968: PUSH
54969: LD_EXP 65
54973: PUSH
54974: LD_VAR 0 1
54978: ARRAY
54979: PPUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 25
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 25
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 25
55005: PUSH
55006: LD_INT 8
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 25
55015: PUSH
55016: LD_INT 9
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: PPUSH
55030: CALL_OW 72
55034: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
55035: LD_ADDR_VAR 0 6
55039: PUSH
55040: LD_EXP 65
55044: PUSH
55045: LD_VAR 0 1
55049: ARRAY
55050: PPUSH
55051: LD_INT 25
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PPUSH
55061: CALL_OW 72
55065: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
55066: LD_ADDR_VAR 0 7
55070: PUSH
55071: LD_EXP 65
55075: PUSH
55076: LD_VAR 0 1
55080: ARRAY
55081: PPUSH
55082: LD_INT 25
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PPUSH
55092: CALL_OW 72
55096: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
55097: LD_ADDR_VAR 0 8
55101: PUSH
55102: LD_EXP 65
55106: PUSH
55107: LD_VAR 0 1
55111: ARRAY
55112: PPUSH
55113: LD_INT 25
55115: PUSH
55116: LD_INT 4
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 24
55125: PUSH
55126: LD_INT 251
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PPUSH
55137: CALL_OW 72
55141: ST_TO_ADDR
// if mc_scan [ base ] then
55142: LD_EXP 88
55146: PUSH
55147: LD_VAR 0 1
55151: ARRAY
55152: IFFALSE 55613
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
55154: LD_ADDR_EXP 107
55158: PUSH
55159: LD_EXP 107
55163: PPUSH
55164: LD_VAR 0 1
55168: PPUSH
55169: LD_INT 4
55171: PPUSH
55172: CALL_OW 1
55176: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
55177: LD_ADDR_VAR 0 12
55181: PUSH
55182: LD_EXP 65
55186: PUSH
55187: LD_VAR 0 1
55191: ARRAY
55192: PPUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 30
55198: PUSH
55199: LD_INT 4
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 30
55208: PUSH
55209: LD_INT 5
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: PPUSH
55221: CALL_OW 72
55225: ST_TO_ADDR
// if not b then
55226: LD_VAR 0 12
55230: NOT
55231: IFFALSE 55235
// exit ;
55233: GO 58301
// p := [ ] ;
55235: LD_ADDR_VAR 0 11
55239: PUSH
55240: EMPTY
55241: ST_TO_ADDR
// if sci >= 2 then
55242: LD_VAR 0 8
55246: PUSH
55247: LD_INT 2
55249: GREATEREQUAL
55250: IFFALSE 55281
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
55252: LD_ADDR_VAR 0 8
55256: PUSH
55257: LD_VAR 0 8
55261: PUSH
55262: LD_INT 1
55264: ARRAY
55265: PUSH
55266: LD_VAR 0 8
55270: PUSH
55271: LD_INT 2
55273: ARRAY
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: ST_TO_ADDR
55279: GO 55342
// if sci = 1 then
55281: LD_VAR 0 8
55285: PUSH
55286: LD_INT 1
55288: EQUAL
55289: IFFALSE 55310
// sci := [ sci [ 1 ] ] else
55291: LD_ADDR_VAR 0 8
55295: PUSH
55296: LD_VAR 0 8
55300: PUSH
55301: LD_INT 1
55303: ARRAY
55304: PUSH
55305: EMPTY
55306: LIST
55307: ST_TO_ADDR
55308: GO 55342
// if sci = 0 then
55310: LD_VAR 0 8
55314: PUSH
55315: LD_INT 0
55317: EQUAL
55318: IFFALSE 55342
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
55320: LD_ADDR_VAR 0 11
55324: PUSH
55325: LD_VAR 0 4
55329: PPUSH
55330: LD_INT 4
55332: PPUSH
55333: CALL 48059 0 2
55337: PUSH
55338: LD_INT 1
55340: ARRAY
55341: ST_TO_ADDR
// if eng > 4 then
55342: LD_VAR 0 6
55346: PUSH
55347: LD_INT 4
55349: GREATER
55350: IFFALSE 55396
// for i = eng downto 4 do
55352: LD_ADDR_VAR 0 3
55356: PUSH
55357: DOUBLE
55358: LD_VAR 0 6
55362: INC
55363: ST_TO_ADDR
55364: LD_INT 4
55366: PUSH
55367: FOR_DOWNTO
55368: IFFALSE 55394
// eng := eng diff eng [ i ] ;
55370: LD_ADDR_VAR 0 6
55374: PUSH
55375: LD_VAR 0 6
55379: PUSH
55380: LD_VAR 0 6
55384: PUSH
55385: LD_VAR 0 3
55389: ARRAY
55390: DIFF
55391: ST_TO_ADDR
55392: GO 55367
55394: POP
55395: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
55396: LD_ADDR_VAR 0 4
55400: PUSH
55401: LD_VAR 0 4
55405: PUSH
55406: LD_VAR 0 5
55410: PUSH
55411: LD_VAR 0 6
55415: UNION
55416: PUSH
55417: LD_VAR 0 7
55421: UNION
55422: PUSH
55423: LD_VAR 0 8
55427: UNION
55428: DIFF
55429: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
55430: LD_ADDR_VAR 0 13
55434: PUSH
55435: LD_EXP 65
55439: PUSH
55440: LD_VAR 0 1
55444: ARRAY
55445: PPUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 30
55451: PUSH
55452: LD_INT 32
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 30
55461: PUSH
55462: LD_INT 31
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: PPUSH
55474: CALL_OW 72
55478: PUSH
55479: LD_EXP 65
55483: PUSH
55484: LD_VAR 0 1
55488: ARRAY
55489: PPUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 30
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 30
55505: PUSH
55506: LD_INT 5
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: PPUSH
55518: CALL_OW 72
55522: PUSH
55523: LD_INT 6
55525: MUL
55526: PLUS
55527: ST_TO_ADDR
// if bcount < tmp then
55528: LD_VAR 0 13
55532: PUSH
55533: LD_VAR 0 4
55537: LESS
55538: IFFALSE 55584
// for i = tmp downto bcount do
55540: LD_ADDR_VAR 0 3
55544: PUSH
55545: DOUBLE
55546: LD_VAR 0 4
55550: INC
55551: ST_TO_ADDR
55552: LD_VAR 0 13
55556: PUSH
55557: FOR_DOWNTO
55558: IFFALSE 55582
// tmp := Delete ( tmp , tmp ) ;
55560: LD_ADDR_VAR 0 4
55564: PUSH
55565: LD_VAR 0 4
55569: PPUSH
55570: LD_VAR 0 4
55574: PPUSH
55575: CALL_OW 3
55579: ST_TO_ADDR
55580: GO 55557
55582: POP
55583: POP
// result := [ tmp , 0 , 0 , p ] ;
55584: LD_ADDR_VAR 0 2
55588: PUSH
55589: LD_VAR 0 4
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_VAR 0 11
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// exit ;
55611: GO 58301
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55613: LD_EXP 65
55617: PUSH
55618: LD_VAR 0 1
55622: ARRAY
55623: PPUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 30
55629: PUSH
55630: LD_INT 6
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 30
55639: PUSH
55640: LD_INT 7
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 30
55649: PUSH
55650: LD_INT 8
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: PPUSH
55663: CALL_OW 72
55667: NOT
55668: PUSH
55669: LD_EXP 65
55673: PUSH
55674: LD_VAR 0 1
55678: ARRAY
55679: PPUSH
55680: LD_INT 30
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PPUSH
55690: CALL_OW 72
55694: NOT
55695: AND
55696: IFFALSE 55768
// begin if eng = tmp then
55698: LD_VAR 0 6
55702: PUSH
55703: LD_VAR 0 4
55707: EQUAL
55708: IFFALSE 55712
// exit ;
55710: GO 58301
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
55712: LD_ADDR_EXP 107
55716: PUSH
55717: LD_EXP 107
55721: PPUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: LD_INT 1
55729: PPUSH
55730: CALL_OW 1
55734: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
55735: LD_ADDR_VAR 0 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_VAR 0 4
55747: PUSH
55748: LD_VAR 0 6
55752: DIFF
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// exit ;
55766: GO 58301
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55768: LD_EXP 92
55772: PUSH
55773: LD_EXP 91
55777: PUSH
55778: LD_VAR 0 1
55782: ARRAY
55783: ARRAY
55784: PUSH
55785: LD_EXP 65
55789: PUSH
55790: LD_VAR 0 1
55794: ARRAY
55795: PPUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 30
55801: PUSH
55802: LD_INT 6
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 30
55811: PUSH
55812: LD_INT 7
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 30
55821: PUSH
55822: LD_INT 8
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: PPUSH
55835: CALL_OW 72
55839: AND
55840: PUSH
55841: LD_EXP 65
55845: PUSH
55846: LD_VAR 0 1
55850: ARRAY
55851: PPUSH
55852: LD_INT 30
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PPUSH
55862: CALL_OW 72
55866: NOT
55867: AND
55868: IFFALSE 56082
// begin if sci >= 6 then
55870: LD_VAR 0 8
55874: PUSH
55875: LD_INT 6
55877: GREATEREQUAL
55878: IFFALSE 55882
// exit ;
55880: GO 58301
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
55882: LD_ADDR_EXP 107
55886: PUSH
55887: LD_EXP 107
55891: PPUSH
55892: LD_VAR 0 1
55896: PPUSH
55897: LD_INT 2
55899: PPUSH
55900: CALL_OW 1
55904: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
55905: LD_ADDR_VAR 0 9
55909: PUSH
55910: LD_VAR 0 4
55914: PUSH
55915: LD_VAR 0 8
55919: DIFF
55920: PPUSH
55921: LD_INT 4
55923: PPUSH
55924: CALL 48059 0 2
55928: ST_TO_ADDR
// p := [ ] ;
55929: LD_ADDR_VAR 0 11
55933: PUSH
55934: EMPTY
55935: ST_TO_ADDR
// if sci < 6 and sort > 6 then
55936: LD_VAR 0 8
55940: PUSH
55941: LD_INT 6
55943: LESS
55944: PUSH
55945: LD_VAR 0 9
55949: PUSH
55950: LD_INT 6
55952: GREATER
55953: AND
55954: IFFALSE 56035
// begin for i = 1 to 6 - sci do
55956: LD_ADDR_VAR 0 3
55960: PUSH
55961: DOUBLE
55962: LD_INT 1
55964: DEC
55965: ST_TO_ADDR
55966: LD_INT 6
55968: PUSH
55969: LD_VAR 0 8
55973: MINUS
55974: PUSH
55975: FOR_TO
55976: IFFALSE 56031
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
55978: LD_ADDR_VAR 0 11
55982: PUSH
55983: LD_VAR 0 11
55987: PPUSH
55988: LD_VAR 0 11
55992: PUSH
55993: LD_INT 1
55995: PLUS
55996: PPUSH
55997: LD_VAR 0 9
56001: PUSH
56002: LD_INT 1
56004: ARRAY
56005: PPUSH
56006: CALL_OW 2
56010: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
56011: LD_ADDR_VAR 0 9
56015: PUSH
56016: LD_VAR 0 9
56020: PPUSH
56021: LD_INT 1
56023: PPUSH
56024: CALL_OW 3
56028: ST_TO_ADDR
// end ;
56029: GO 55975
56031: POP
56032: POP
// end else
56033: GO 56055
// if sort then
56035: LD_VAR 0 9
56039: IFFALSE 56055
// p := sort [ 1 ] ;
56041: LD_ADDR_VAR 0 11
56045: PUSH
56046: LD_VAR 0 9
56050: PUSH
56051: LD_INT 1
56053: ARRAY
56054: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
56055: LD_ADDR_VAR 0 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_VAR 0 11
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: ST_TO_ADDR
// exit ;
56080: GO 58301
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
56082: LD_EXP 92
56086: PUSH
56087: LD_EXP 91
56091: PUSH
56092: LD_VAR 0 1
56096: ARRAY
56097: ARRAY
56098: PUSH
56099: LD_EXP 65
56103: PUSH
56104: LD_VAR 0 1
56108: ARRAY
56109: PPUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 30
56115: PUSH
56116: LD_INT 6
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 30
56125: PUSH
56126: LD_INT 7
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 30
56135: PUSH
56136: LD_INT 8
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: PPUSH
56149: CALL_OW 72
56153: AND
56154: PUSH
56155: LD_EXP 65
56159: PUSH
56160: LD_VAR 0 1
56164: ARRAY
56165: PPUSH
56166: LD_INT 30
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PPUSH
56176: CALL_OW 72
56180: AND
56181: IFFALSE 56915
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
56183: LD_ADDR_EXP 107
56187: PUSH
56188: LD_EXP 107
56192: PPUSH
56193: LD_VAR 0 1
56197: PPUSH
56198: LD_INT 3
56200: PPUSH
56201: CALL_OW 1
56205: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56206: LD_ADDR_VAR 0 2
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// if not eng then
56229: LD_VAR 0 6
56233: NOT
56234: IFFALSE 56297
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
56236: LD_ADDR_VAR 0 11
56240: PUSH
56241: LD_VAR 0 4
56245: PPUSH
56246: LD_INT 2
56248: PPUSH
56249: CALL 48059 0 2
56253: PUSH
56254: LD_INT 1
56256: ARRAY
56257: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
56258: LD_ADDR_VAR 0 2
56262: PUSH
56263: LD_VAR 0 2
56267: PPUSH
56268: LD_INT 2
56270: PPUSH
56271: LD_VAR 0 11
56275: PPUSH
56276: CALL_OW 1
56280: ST_TO_ADDR
// tmp := tmp diff p ;
56281: LD_ADDR_VAR 0 4
56285: PUSH
56286: LD_VAR 0 4
56290: PUSH
56291: LD_VAR 0 11
56295: DIFF
56296: ST_TO_ADDR
// end ; if tmp and sci < 6 then
56297: LD_VAR 0 4
56301: PUSH
56302: LD_VAR 0 8
56306: PUSH
56307: LD_INT 6
56309: LESS
56310: AND
56311: IFFALSE 56499
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
56313: LD_ADDR_VAR 0 9
56317: PUSH
56318: LD_VAR 0 4
56322: PUSH
56323: LD_VAR 0 8
56327: PUSH
56328: LD_VAR 0 7
56332: UNION
56333: DIFF
56334: PPUSH
56335: LD_INT 4
56337: PPUSH
56338: CALL 48059 0 2
56342: ST_TO_ADDR
// p := [ ] ;
56343: LD_ADDR_VAR 0 11
56347: PUSH
56348: EMPTY
56349: ST_TO_ADDR
// if sort then
56350: LD_VAR 0 9
56354: IFFALSE 56470
// for i = 1 to 6 - sci do
56356: LD_ADDR_VAR 0 3
56360: PUSH
56361: DOUBLE
56362: LD_INT 1
56364: DEC
56365: ST_TO_ADDR
56366: LD_INT 6
56368: PUSH
56369: LD_VAR 0 8
56373: MINUS
56374: PUSH
56375: FOR_TO
56376: IFFALSE 56468
// begin if i = sort then
56378: LD_VAR 0 3
56382: PUSH
56383: LD_VAR 0 9
56387: EQUAL
56388: IFFALSE 56392
// break ;
56390: GO 56468
// if GetClass ( i ) = 4 then
56392: LD_VAR 0 3
56396: PPUSH
56397: CALL_OW 257
56401: PUSH
56402: LD_INT 4
56404: EQUAL
56405: IFFALSE 56409
// continue ;
56407: GO 56375
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56409: LD_ADDR_VAR 0 11
56413: PUSH
56414: LD_VAR 0 11
56418: PPUSH
56419: LD_VAR 0 11
56423: PUSH
56424: LD_INT 1
56426: PLUS
56427: PPUSH
56428: LD_VAR 0 9
56432: PUSH
56433: LD_VAR 0 3
56437: ARRAY
56438: PPUSH
56439: CALL_OW 2
56443: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56444: LD_ADDR_VAR 0 4
56448: PUSH
56449: LD_VAR 0 4
56453: PUSH
56454: LD_VAR 0 9
56458: PUSH
56459: LD_VAR 0 3
56463: ARRAY
56464: DIFF
56465: ST_TO_ADDR
// end ;
56466: GO 56375
56468: POP
56469: POP
// if p then
56470: LD_VAR 0 11
56474: IFFALSE 56499
// result := Replace ( result , 4 , p ) ;
56476: LD_ADDR_VAR 0 2
56480: PUSH
56481: LD_VAR 0 2
56485: PPUSH
56486: LD_INT 4
56488: PPUSH
56489: LD_VAR 0 11
56493: PPUSH
56494: CALL_OW 1
56498: ST_TO_ADDR
// end ; if tmp and mech < 6 then
56499: LD_VAR 0 4
56503: PUSH
56504: LD_VAR 0 7
56508: PUSH
56509: LD_INT 6
56511: LESS
56512: AND
56513: IFFALSE 56701
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56515: LD_ADDR_VAR 0 9
56519: PUSH
56520: LD_VAR 0 4
56524: PUSH
56525: LD_VAR 0 8
56529: PUSH
56530: LD_VAR 0 7
56534: UNION
56535: DIFF
56536: PPUSH
56537: LD_INT 3
56539: PPUSH
56540: CALL 48059 0 2
56544: ST_TO_ADDR
// p := [ ] ;
56545: LD_ADDR_VAR 0 11
56549: PUSH
56550: EMPTY
56551: ST_TO_ADDR
// if sort then
56552: LD_VAR 0 9
56556: IFFALSE 56672
// for i = 1 to 6 - mech do
56558: LD_ADDR_VAR 0 3
56562: PUSH
56563: DOUBLE
56564: LD_INT 1
56566: DEC
56567: ST_TO_ADDR
56568: LD_INT 6
56570: PUSH
56571: LD_VAR 0 7
56575: MINUS
56576: PUSH
56577: FOR_TO
56578: IFFALSE 56670
// begin if i = sort then
56580: LD_VAR 0 3
56584: PUSH
56585: LD_VAR 0 9
56589: EQUAL
56590: IFFALSE 56594
// break ;
56592: GO 56670
// if GetClass ( i ) = 3 then
56594: LD_VAR 0 3
56598: PPUSH
56599: CALL_OW 257
56603: PUSH
56604: LD_INT 3
56606: EQUAL
56607: IFFALSE 56611
// continue ;
56609: GO 56577
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56611: LD_ADDR_VAR 0 11
56615: PUSH
56616: LD_VAR 0 11
56620: PPUSH
56621: LD_VAR 0 11
56625: PUSH
56626: LD_INT 1
56628: PLUS
56629: PPUSH
56630: LD_VAR 0 9
56634: PUSH
56635: LD_VAR 0 3
56639: ARRAY
56640: PPUSH
56641: CALL_OW 2
56645: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56646: LD_ADDR_VAR 0 4
56650: PUSH
56651: LD_VAR 0 4
56655: PUSH
56656: LD_VAR 0 9
56660: PUSH
56661: LD_VAR 0 3
56665: ARRAY
56666: DIFF
56667: ST_TO_ADDR
// end ;
56668: GO 56577
56670: POP
56671: POP
// if p then
56672: LD_VAR 0 11
56676: IFFALSE 56701
// result := Replace ( result , 3 , p ) ;
56678: LD_ADDR_VAR 0 2
56682: PUSH
56683: LD_VAR 0 2
56687: PPUSH
56688: LD_INT 3
56690: PPUSH
56691: LD_VAR 0 11
56695: PPUSH
56696: CALL_OW 1
56700: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
56701: LD_VAR 0 4
56705: PUSH
56706: LD_INT 6
56708: GREATER
56709: PUSH
56710: LD_VAR 0 6
56714: PUSH
56715: LD_INT 6
56717: LESS
56718: AND
56719: IFFALSE 56913
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56721: LD_ADDR_VAR 0 9
56725: PUSH
56726: LD_VAR 0 4
56730: PUSH
56731: LD_VAR 0 8
56735: PUSH
56736: LD_VAR 0 7
56740: UNION
56741: PUSH
56742: LD_VAR 0 6
56746: UNION
56747: DIFF
56748: PPUSH
56749: LD_INT 2
56751: PPUSH
56752: CALL 48059 0 2
56756: ST_TO_ADDR
// p := [ ] ;
56757: LD_ADDR_VAR 0 11
56761: PUSH
56762: EMPTY
56763: ST_TO_ADDR
// if sort then
56764: LD_VAR 0 9
56768: IFFALSE 56884
// for i = 1 to 6 - eng do
56770: LD_ADDR_VAR 0 3
56774: PUSH
56775: DOUBLE
56776: LD_INT 1
56778: DEC
56779: ST_TO_ADDR
56780: LD_INT 6
56782: PUSH
56783: LD_VAR 0 6
56787: MINUS
56788: PUSH
56789: FOR_TO
56790: IFFALSE 56882
// begin if i = sort then
56792: LD_VAR 0 3
56796: PUSH
56797: LD_VAR 0 9
56801: EQUAL
56802: IFFALSE 56806
// break ;
56804: GO 56882
// if GetClass ( i ) = 2 then
56806: LD_VAR 0 3
56810: PPUSH
56811: CALL_OW 257
56815: PUSH
56816: LD_INT 2
56818: EQUAL
56819: IFFALSE 56823
// continue ;
56821: GO 56789
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56823: LD_ADDR_VAR 0 11
56827: PUSH
56828: LD_VAR 0 11
56832: PPUSH
56833: LD_VAR 0 11
56837: PUSH
56838: LD_INT 1
56840: PLUS
56841: PPUSH
56842: LD_VAR 0 9
56846: PUSH
56847: LD_VAR 0 3
56851: ARRAY
56852: PPUSH
56853: CALL_OW 2
56857: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56858: LD_ADDR_VAR 0 4
56862: PUSH
56863: LD_VAR 0 4
56867: PUSH
56868: LD_VAR 0 9
56872: PUSH
56873: LD_VAR 0 3
56877: ARRAY
56878: DIFF
56879: ST_TO_ADDR
// end ;
56880: GO 56789
56882: POP
56883: POP
// if p then
56884: LD_VAR 0 11
56888: IFFALSE 56913
// result := Replace ( result , 2 , p ) ;
56890: LD_ADDR_VAR 0 2
56894: PUSH
56895: LD_VAR 0 2
56899: PPUSH
56900: LD_INT 2
56902: PPUSH
56903: LD_VAR 0 11
56907: PPUSH
56908: CALL_OW 1
56912: ST_TO_ADDR
// end ; exit ;
56913: GO 58301
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
56915: LD_EXP 92
56919: PUSH
56920: LD_EXP 91
56924: PUSH
56925: LD_VAR 0 1
56929: ARRAY
56930: ARRAY
56931: NOT
56932: PUSH
56933: LD_EXP 65
56937: PUSH
56938: LD_VAR 0 1
56942: ARRAY
56943: PPUSH
56944: LD_INT 30
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PPUSH
56954: CALL_OW 72
56958: AND
56959: PUSH
56960: LD_EXP 70
56964: PUSH
56965: LD_VAR 0 1
56969: ARRAY
56970: AND
56971: IFFALSE 57579
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
56973: LD_ADDR_EXP 107
56977: PUSH
56978: LD_EXP 107
56982: PPUSH
56983: LD_VAR 0 1
56987: PPUSH
56988: LD_INT 5
56990: PPUSH
56991: CALL_OW 1
56995: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56996: LD_ADDR_VAR 0 2
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: ST_TO_ADDR
// if sci > 1 then
57019: LD_VAR 0 8
57023: PUSH
57024: LD_INT 1
57026: GREATER
57027: IFFALSE 57055
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
57029: LD_ADDR_VAR 0 4
57033: PUSH
57034: LD_VAR 0 4
57038: PUSH
57039: LD_VAR 0 8
57043: PUSH
57044: LD_VAR 0 8
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: DIFF
57053: DIFF
57054: ST_TO_ADDR
// if tmp and not sci then
57055: LD_VAR 0 4
57059: PUSH
57060: LD_VAR 0 8
57064: NOT
57065: AND
57066: IFFALSE 57135
// begin sort := SortBySkill ( tmp , 4 ) ;
57068: LD_ADDR_VAR 0 9
57072: PUSH
57073: LD_VAR 0 4
57077: PPUSH
57078: LD_INT 4
57080: PPUSH
57081: CALL 48059 0 2
57085: ST_TO_ADDR
// if sort then
57086: LD_VAR 0 9
57090: IFFALSE 57106
// p := sort [ 1 ] ;
57092: LD_ADDR_VAR 0 11
57096: PUSH
57097: LD_VAR 0 9
57101: PUSH
57102: LD_INT 1
57104: ARRAY
57105: ST_TO_ADDR
// if p then
57106: LD_VAR 0 11
57110: IFFALSE 57135
// result := Replace ( result , 4 , p ) ;
57112: LD_ADDR_VAR 0 2
57116: PUSH
57117: LD_VAR 0 2
57121: PPUSH
57122: LD_INT 4
57124: PPUSH
57125: LD_VAR 0 11
57129: PPUSH
57130: CALL_OW 1
57134: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57135: LD_ADDR_VAR 0 4
57139: PUSH
57140: LD_VAR 0 4
57144: PUSH
57145: LD_VAR 0 7
57149: DIFF
57150: ST_TO_ADDR
// if tmp and mech < 6 then
57151: LD_VAR 0 4
57155: PUSH
57156: LD_VAR 0 7
57160: PUSH
57161: LD_INT 6
57163: LESS
57164: AND
57165: IFFALSE 57353
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
57167: LD_ADDR_VAR 0 9
57171: PUSH
57172: LD_VAR 0 4
57176: PUSH
57177: LD_VAR 0 8
57181: PUSH
57182: LD_VAR 0 7
57186: UNION
57187: DIFF
57188: PPUSH
57189: LD_INT 3
57191: PPUSH
57192: CALL 48059 0 2
57196: ST_TO_ADDR
// p := [ ] ;
57197: LD_ADDR_VAR 0 11
57201: PUSH
57202: EMPTY
57203: ST_TO_ADDR
// if sort then
57204: LD_VAR 0 9
57208: IFFALSE 57324
// for i = 1 to 6 - mech do
57210: LD_ADDR_VAR 0 3
57214: PUSH
57215: DOUBLE
57216: LD_INT 1
57218: DEC
57219: ST_TO_ADDR
57220: LD_INT 6
57222: PUSH
57223: LD_VAR 0 7
57227: MINUS
57228: PUSH
57229: FOR_TO
57230: IFFALSE 57322
// begin if i = sort then
57232: LD_VAR 0 3
57236: PUSH
57237: LD_VAR 0 9
57241: EQUAL
57242: IFFALSE 57246
// break ;
57244: GO 57322
// if GetClass ( i ) = 3 then
57246: LD_VAR 0 3
57250: PPUSH
57251: CALL_OW 257
57255: PUSH
57256: LD_INT 3
57258: EQUAL
57259: IFFALSE 57263
// continue ;
57261: GO 57229
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57263: LD_ADDR_VAR 0 11
57267: PUSH
57268: LD_VAR 0 11
57272: PPUSH
57273: LD_VAR 0 11
57277: PUSH
57278: LD_INT 1
57280: PLUS
57281: PPUSH
57282: LD_VAR 0 9
57286: PUSH
57287: LD_VAR 0 3
57291: ARRAY
57292: PPUSH
57293: CALL_OW 2
57297: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57298: LD_ADDR_VAR 0 4
57302: PUSH
57303: LD_VAR 0 4
57307: PUSH
57308: LD_VAR 0 9
57312: PUSH
57313: LD_VAR 0 3
57317: ARRAY
57318: DIFF
57319: ST_TO_ADDR
// end ;
57320: GO 57229
57322: POP
57323: POP
// if p then
57324: LD_VAR 0 11
57328: IFFALSE 57353
// result := Replace ( result , 3 , p ) ;
57330: LD_ADDR_VAR 0 2
57334: PUSH
57335: LD_VAR 0 2
57339: PPUSH
57340: LD_INT 3
57342: PPUSH
57343: LD_VAR 0 11
57347: PPUSH
57348: CALL_OW 1
57352: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57353: LD_ADDR_VAR 0 4
57357: PUSH
57358: LD_VAR 0 4
57362: PUSH
57363: LD_VAR 0 6
57367: DIFF
57368: ST_TO_ADDR
// if tmp and eng < 6 then
57369: LD_VAR 0 4
57373: PUSH
57374: LD_VAR 0 6
57378: PUSH
57379: LD_INT 6
57381: LESS
57382: AND
57383: IFFALSE 57577
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
57385: LD_ADDR_VAR 0 9
57389: PUSH
57390: LD_VAR 0 4
57394: PUSH
57395: LD_VAR 0 8
57399: PUSH
57400: LD_VAR 0 7
57404: UNION
57405: PUSH
57406: LD_VAR 0 6
57410: UNION
57411: DIFF
57412: PPUSH
57413: LD_INT 2
57415: PPUSH
57416: CALL 48059 0 2
57420: ST_TO_ADDR
// p := [ ] ;
57421: LD_ADDR_VAR 0 11
57425: PUSH
57426: EMPTY
57427: ST_TO_ADDR
// if sort then
57428: LD_VAR 0 9
57432: IFFALSE 57548
// for i = 1 to 6 - eng do
57434: LD_ADDR_VAR 0 3
57438: PUSH
57439: DOUBLE
57440: LD_INT 1
57442: DEC
57443: ST_TO_ADDR
57444: LD_INT 6
57446: PUSH
57447: LD_VAR 0 6
57451: MINUS
57452: PUSH
57453: FOR_TO
57454: IFFALSE 57546
// begin if i = sort then
57456: LD_VAR 0 3
57460: PUSH
57461: LD_VAR 0 9
57465: EQUAL
57466: IFFALSE 57470
// break ;
57468: GO 57546
// if GetClass ( i ) = 2 then
57470: LD_VAR 0 3
57474: PPUSH
57475: CALL_OW 257
57479: PUSH
57480: LD_INT 2
57482: EQUAL
57483: IFFALSE 57487
// continue ;
57485: GO 57453
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57487: LD_ADDR_VAR 0 11
57491: PUSH
57492: LD_VAR 0 11
57496: PPUSH
57497: LD_VAR 0 11
57501: PUSH
57502: LD_INT 1
57504: PLUS
57505: PPUSH
57506: LD_VAR 0 9
57510: PUSH
57511: LD_VAR 0 3
57515: ARRAY
57516: PPUSH
57517: CALL_OW 2
57521: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57522: LD_ADDR_VAR 0 4
57526: PUSH
57527: LD_VAR 0 4
57531: PUSH
57532: LD_VAR 0 9
57536: PUSH
57537: LD_VAR 0 3
57541: ARRAY
57542: DIFF
57543: ST_TO_ADDR
// end ;
57544: GO 57453
57546: POP
57547: POP
// if p then
57548: LD_VAR 0 11
57552: IFFALSE 57577
// result := Replace ( result , 2 , p ) ;
57554: LD_ADDR_VAR 0 2
57558: PUSH
57559: LD_VAR 0 2
57563: PPUSH
57564: LD_INT 2
57566: PPUSH
57567: LD_VAR 0 11
57571: PPUSH
57572: CALL_OW 1
57576: ST_TO_ADDR
// end ; exit ;
57577: GO 58301
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
57579: LD_EXP 92
57583: PUSH
57584: LD_EXP 91
57588: PUSH
57589: LD_VAR 0 1
57593: ARRAY
57594: ARRAY
57595: NOT
57596: PUSH
57597: LD_EXP 65
57601: PUSH
57602: LD_VAR 0 1
57606: ARRAY
57607: PPUSH
57608: LD_INT 30
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PPUSH
57618: CALL_OW 72
57622: AND
57623: PUSH
57624: LD_EXP 70
57628: PUSH
57629: LD_VAR 0 1
57633: ARRAY
57634: NOT
57635: AND
57636: IFFALSE 58301
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
57638: LD_ADDR_EXP 107
57642: PUSH
57643: LD_EXP 107
57647: PPUSH
57648: LD_VAR 0 1
57652: PPUSH
57653: LD_INT 6
57655: PPUSH
57656: CALL_OW 1
57660: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
57661: LD_ADDR_VAR 0 2
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: ST_TO_ADDR
// if sci >= 1 then
57684: LD_VAR 0 8
57688: PUSH
57689: LD_INT 1
57691: GREATEREQUAL
57692: IFFALSE 57714
// tmp := tmp diff sci [ 1 ] ;
57694: LD_ADDR_VAR 0 4
57698: PUSH
57699: LD_VAR 0 4
57703: PUSH
57704: LD_VAR 0 8
57708: PUSH
57709: LD_INT 1
57711: ARRAY
57712: DIFF
57713: ST_TO_ADDR
// if tmp and not sci then
57714: LD_VAR 0 4
57718: PUSH
57719: LD_VAR 0 8
57723: NOT
57724: AND
57725: IFFALSE 57794
// begin sort := SortBySkill ( tmp , 4 ) ;
57727: LD_ADDR_VAR 0 9
57731: PUSH
57732: LD_VAR 0 4
57736: PPUSH
57737: LD_INT 4
57739: PPUSH
57740: CALL 48059 0 2
57744: ST_TO_ADDR
// if sort then
57745: LD_VAR 0 9
57749: IFFALSE 57765
// p := sort [ 1 ] ;
57751: LD_ADDR_VAR 0 11
57755: PUSH
57756: LD_VAR 0 9
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: ST_TO_ADDR
// if p then
57765: LD_VAR 0 11
57769: IFFALSE 57794
// result := Replace ( result , 4 , p ) ;
57771: LD_ADDR_VAR 0 2
57775: PUSH
57776: LD_VAR 0 2
57780: PPUSH
57781: LD_INT 4
57783: PPUSH
57784: LD_VAR 0 11
57788: PPUSH
57789: CALL_OW 1
57793: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57794: LD_ADDR_VAR 0 4
57798: PUSH
57799: LD_VAR 0 4
57803: PUSH
57804: LD_VAR 0 7
57808: DIFF
57809: ST_TO_ADDR
// if tmp and mech < 6 then
57810: LD_VAR 0 4
57814: PUSH
57815: LD_VAR 0 7
57819: PUSH
57820: LD_INT 6
57822: LESS
57823: AND
57824: IFFALSE 58006
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
57826: LD_ADDR_VAR 0 9
57830: PUSH
57831: LD_VAR 0 4
57835: PUSH
57836: LD_VAR 0 7
57840: DIFF
57841: PPUSH
57842: LD_INT 3
57844: PPUSH
57845: CALL 48059 0 2
57849: ST_TO_ADDR
// p := [ ] ;
57850: LD_ADDR_VAR 0 11
57854: PUSH
57855: EMPTY
57856: ST_TO_ADDR
// if sort then
57857: LD_VAR 0 9
57861: IFFALSE 57977
// for i = 1 to 6 - mech do
57863: LD_ADDR_VAR 0 3
57867: PUSH
57868: DOUBLE
57869: LD_INT 1
57871: DEC
57872: ST_TO_ADDR
57873: LD_INT 6
57875: PUSH
57876: LD_VAR 0 7
57880: MINUS
57881: PUSH
57882: FOR_TO
57883: IFFALSE 57975
// begin if i = sort then
57885: LD_VAR 0 3
57889: PUSH
57890: LD_VAR 0 9
57894: EQUAL
57895: IFFALSE 57899
// break ;
57897: GO 57975
// if GetClass ( i ) = 3 then
57899: LD_VAR 0 3
57903: PPUSH
57904: CALL_OW 257
57908: PUSH
57909: LD_INT 3
57911: EQUAL
57912: IFFALSE 57916
// continue ;
57914: GO 57882
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57916: LD_ADDR_VAR 0 11
57920: PUSH
57921: LD_VAR 0 11
57925: PPUSH
57926: LD_VAR 0 11
57930: PUSH
57931: LD_INT 1
57933: PLUS
57934: PPUSH
57935: LD_VAR 0 9
57939: PUSH
57940: LD_VAR 0 3
57944: ARRAY
57945: PPUSH
57946: CALL_OW 2
57950: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57951: LD_ADDR_VAR 0 4
57955: PUSH
57956: LD_VAR 0 4
57960: PUSH
57961: LD_VAR 0 9
57965: PUSH
57966: LD_VAR 0 3
57970: ARRAY
57971: DIFF
57972: ST_TO_ADDR
// end ;
57973: GO 57882
57975: POP
57976: POP
// if p then
57977: LD_VAR 0 11
57981: IFFALSE 58006
// result := Replace ( result , 3 , p ) ;
57983: LD_ADDR_VAR 0 2
57987: PUSH
57988: LD_VAR 0 2
57992: PPUSH
57993: LD_INT 3
57995: PPUSH
57996: LD_VAR 0 11
58000: PPUSH
58001: CALL_OW 1
58005: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
58006: LD_ADDR_VAR 0 4
58010: PUSH
58011: LD_VAR 0 4
58015: PUSH
58016: LD_VAR 0 6
58020: DIFF
58021: ST_TO_ADDR
// if tmp and eng < 4 then
58022: LD_VAR 0 4
58026: PUSH
58027: LD_VAR 0 6
58031: PUSH
58032: LD_INT 4
58034: LESS
58035: AND
58036: IFFALSE 58226
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
58038: LD_ADDR_VAR 0 9
58042: PUSH
58043: LD_VAR 0 4
58047: PUSH
58048: LD_VAR 0 7
58052: PUSH
58053: LD_VAR 0 6
58057: UNION
58058: DIFF
58059: PPUSH
58060: LD_INT 2
58062: PPUSH
58063: CALL 48059 0 2
58067: ST_TO_ADDR
// p := [ ] ;
58068: LD_ADDR_VAR 0 11
58072: PUSH
58073: EMPTY
58074: ST_TO_ADDR
// if sort then
58075: LD_VAR 0 9
58079: IFFALSE 58195
// for i = 1 to 4 - eng do
58081: LD_ADDR_VAR 0 3
58085: PUSH
58086: DOUBLE
58087: LD_INT 1
58089: DEC
58090: ST_TO_ADDR
58091: LD_INT 4
58093: PUSH
58094: LD_VAR 0 6
58098: MINUS
58099: PUSH
58100: FOR_TO
58101: IFFALSE 58193
// begin if i = sort then
58103: LD_VAR 0 3
58107: PUSH
58108: LD_VAR 0 9
58112: EQUAL
58113: IFFALSE 58117
// break ;
58115: GO 58193
// if GetClass ( i ) = 2 then
58117: LD_VAR 0 3
58121: PPUSH
58122: CALL_OW 257
58126: PUSH
58127: LD_INT 2
58129: EQUAL
58130: IFFALSE 58134
// continue ;
58132: GO 58100
// p := Insert ( p , p + 1 , sort [ i ] ) ;
58134: LD_ADDR_VAR 0 11
58138: PUSH
58139: LD_VAR 0 11
58143: PPUSH
58144: LD_VAR 0 11
58148: PUSH
58149: LD_INT 1
58151: PLUS
58152: PPUSH
58153: LD_VAR 0 9
58157: PUSH
58158: LD_VAR 0 3
58162: ARRAY
58163: PPUSH
58164: CALL_OW 2
58168: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
58169: LD_ADDR_VAR 0 4
58173: PUSH
58174: LD_VAR 0 4
58178: PUSH
58179: LD_VAR 0 9
58183: PUSH
58184: LD_VAR 0 3
58188: ARRAY
58189: DIFF
58190: ST_TO_ADDR
// end ;
58191: GO 58100
58193: POP
58194: POP
// if p then
58195: LD_VAR 0 11
58199: IFFALSE 58224
// result := Replace ( result , 2 , p ) ;
58201: LD_ADDR_VAR 0 2
58205: PUSH
58206: LD_VAR 0 2
58210: PPUSH
58211: LD_INT 2
58213: PPUSH
58214: LD_VAR 0 11
58218: PPUSH
58219: CALL_OW 1
58223: ST_TO_ADDR
// end else
58224: GO 58270
// for i = eng downto 5 do
58226: LD_ADDR_VAR 0 3
58230: PUSH
58231: DOUBLE
58232: LD_VAR 0 6
58236: INC
58237: ST_TO_ADDR
58238: LD_INT 5
58240: PUSH
58241: FOR_DOWNTO
58242: IFFALSE 58268
// tmp := tmp union eng [ i ] ;
58244: LD_ADDR_VAR 0 4
58248: PUSH
58249: LD_VAR 0 4
58253: PUSH
58254: LD_VAR 0 6
58258: PUSH
58259: LD_VAR 0 3
58263: ARRAY
58264: UNION
58265: ST_TO_ADDR
58266: GO 58241
58268: POP
58269: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
58270: LD_ADDR_VAR 0 2
58274: PUSH
58275: LD_VAR 0 2
58279: PPUSH
58280: LD_INT 1
58282: PPUSH
58283: LD_VAR 0 4
58287: PUSH
58288: LD_VAR 0 5
58292: DIFF
58293: PPUSH
58294: CALL_OW 1
58298: ST_TO_ADDR
// exit ;
58299: GO 58301
// end ; end ;
58301: LD_VAR 0 2
58305: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
58306: LD_INT 0
58308: PPUSH
58309: PPUSH
58310: PPUSH
// if not mc_bases then
58311: LD_EXP 65
58315: NOT
58316: IFFALSE 58320
// exit ;
58318: GO 58426
// for i = 1 to mc_bases do
58320: LD_ADDR_VAR 0 2
58324: PUSH
58325: DOUBLE
58326: LD_INT 1
58328: DEC
58329: ST_TO_ADDR
58330: LD_EXP 65
58334: PUSH
58335: FOR_TO
58336: IFFALSE 58417
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58338: LD_ADDR_VAR 0 3
58342: PUSH
58343: LD_EXP 65
58347: PUSH
58348: LD_VAR 0 2
58352: ARRAY
58353: PPUSH
58354: LD_INT 21
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: LD_INT 24
58369: PUSH
58370: LD_INT 1000
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PPUSH
58385: CALL_OW 72
58389: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
58390: LD_ADDR_EXP 66
58394: PUSH
58395: LD_EXP 66
58399: PPUSH
58400: LD_VAR 0 2
58404: PPUSH
58405: LD_VAR 0 3
58409: PPUSH
58410: CALL_OW 1
58414: ST_TO_ADDR
// end ;
58415: GO 58335
58417: POP
58418: POP
// RaiseSailEvent ( 101 ) ;
58419: LD_INT 101
58421: PPUSH
58422: CALL_OW 427
// end ;
58426: LD_VAR 0 1
58430: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
58431: LD_INT 0
58433: PPUSH
58434: PPUSH
58435: PPUSH
58436: PPUSH
58437: PPUSH
58438: PPUSH
58439: PPUSH
// if not mc_bases then
58440: LD_EXP 65
58444: NOT
58445: IFFALSE 58449
// exit ;
58447: GO 59011
// for i = 1 to mc_bases do
58449: LD_ADDR_VAR 0 2
58453: PUSH
58454: DOUBLE
58455: LD_INT 1
58457: DEC
58458: ST_TO_ADDR
58459: LD_EXP 65
58463: PUSH
58464: FOR_TO
58465: IFFALSE 59002
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
58467: LD_ADDR_VAR 0 5
58471: PUSH
58472: LD_EXP 65
58476: PUSH
58477: LD_VAR 0 2
58481: ARRAY
58482: PUSH
58483: LD_EXP 94
58487: PUSH
58488: LD_VAR 0 2
58492: ARRAY
58493: UNION
58494: PPUSH
58495: LD_INT 21
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 3
58510: PUSH
58511: LD_INT 54
58513: PUSH
58514: EMPTY
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 24
58526: PUSH
58527: LD_INT 800
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PPUSH
58547: CALL_OW 72
58551: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
58552: LD_ADDR_VAR 0 6
58556: PUSH
58557: LD_EXP 65
58561: PUSH
58562: LD_VAR 0 2
58566: ARRAY
58567: PPUSH
58568: LD_INT 21
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: LD_INT 54
58586: PUSH
58587: EMPTY
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 24
58599: PUSH
58600: LD_INT 250
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: LIST
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PPUSH
58620: CALL_OW 72
58624: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
58625: LD_ADDR_VAR 0 7
58629: PUSH
58630: LD_VAR 0 5
58634: PUSH
58635: LD_VAR 0 6
58639: DIFF
58640: ST_TO_ADDR
// if not need_heal_1 then
58641: LD_VAR 0 6
58645: NOT
58646: IFFALSE 58679
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
58648: LD_ADDR_EXP 68
58652: PUSH
58653: LD_EXP 68
58657: PPUSH
58658: LD_VAR 0 2
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PPUSH
58670: EMPTY
58671: PPUSH
58672: CALL 18510 0 3
58676: ST_TO_ADDR
58677: GO 58749
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
58679: LD_ADDR_EXP 68
58683: PUSH
58684: LD_EXP 68
58688: PPUSH
58689: LD_VAR 0 2
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PPUSH
58701: LD_EXP 68
58705: PUSH
58706: LD_VAR 0 2
58710: ARRAY
58711: PUSH
58712: LD_INT 1
58714: ARRAY
58715: PPUSH
58716: LD_INT 3
58718: PUSH
58719: LD_INT 24
58721: PUSH
58722: LD_INT 1000
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PPUSH
58733: CALL_OW 72
58737: PUSH
58738: LD_VAR 0 6
58742: UNION
58743: PPUSH
58744: CALL 18510 0 3
58748: ST_TO_ADDR
// if not need_heal_2 then
58749: LD_VAR 0 7
58753: NOT
58754: IFFALSE 58787
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
58756: LD_ADDR_EXP 68
58760: PUSH
58761: LD_EXP 68
58765: PPUSH
58766: LD_VAR 0 2
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PPUSH
58778: EMPTY
58779: PPUSH
58780: CALL 18510 0 3
58784: ST_TO_ADDR
58785: GO 58819
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
58787: LD_ADDR_EXP 68
58791: PUSH
58792: LD_EXP 68
58796: PPUSH
58797: LD_VAR 0 2
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PPUSH
58809: LD_VAR 0 7
58813: PPUSH
58814: CALL 18510 0 3
58818: ST_TO_ADDR
// if need_heal_2 then
58819: LD_VAR 0 7
58823: IFFALSE 58984
// for j in need_heal_2 do
58825: LD_ADDR_VAR 0 3
58829: PUSH
58830: LD_VAR 0 7
58834: PUSH
58835: FOR_IN
58836: IFFALSE 58982
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58838: LD_ADDR_VAR 0 5
58842: PUSH
58843: LD_EXP 65
58847: PUSH
58848: LD_VAR 0 2
58852: ARRAY
58853: PPUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 30
58859: PUSH
58860: LD_INT 6
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 30
58869: PUSH
58870: LD_INT 7
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 30
58879: PUSH
58880: LD_INT 8
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 30
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 30
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: PPUSH
58915: CALL_OW 72
58919: ST_TO_ADDR
// if tmp then
58920: LD_VAR 0 5
58924: IFFALSE 58980
// begin k := NearestUnitToUnit ( tmp , j ) ;
58926: LD_ADDR_VAR 0 4
58930: PUSH
58931: LD_VAR 0 5
58935: PPUSH
58936: LD_VAR 0 3
58940: PPUSH
58941: CALL_OW 74
58945: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
58946: LD_VAR 0 3
58950: PPUSH
58951: LD_VAR 0 4
58955: PPUSH
58956: CALL_OW 296
58960: PUSH
58961: LD_INT 5
58963: GREATER
58964: IFFALSE 58980
// ComMoveUnit ( j , k ) ;
58966: LD_VAR 0 3
58970: PPUSH
58971: LD_VAR 0 4
58975: PPUSH
58976: CALL_OW 112
// end ; end ;
58980: GO 58835
58982: POP
58983: POP
// if not need_heal_1 and not need_heal_2 then
58984: LD_VAR 0 6
58988: NOT
58989: PUSH
58990: LD_VAR 0 7
58994: NOT
58995: AND
58996: IFFALSE 59000
// continue ;
58998: GO 58464
// end ;
59000: GO 58464
59002: POP
59003: POP
// RaiseSailEvent ( 102 ) ;
59004: LD_INT 102
59006: PPUSH
59007: CALL_OW 427
// end ;
59011: LD_VAR 0 1
59015: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
59016: LD_INT 0
59018: PPUSH
59019: PPUSH
59020: PPUSH
59021: PPUSH
59022: PPUSH
59023: PPUSH
59024: PPUSH
59025: PPUSH
// if not mc_bases then
59026: LD_EXP 65
59030: NOT
59031: IFFALSE 59035
// exit ;
59033: GO 59870
// for i = 1 to mc_bases do
59035: LD_ADDR_VAR 0 2
59039: PUSH
59040: DOUBLE
59041: LD_INT 1
59043: DEC
59044: ST_TO_ADDR
59045: LD_EXP 65
59049: PUSH
59050: FOR_TO
59051: IFFALSE 59868
// begin if not mc_building_need_repair [ i ] then
59053: LD_EXP 66
59057: PUSH
59058: LD_VAR 0 2
59062: ARRAY
59063: NOT
59064: IFFALSE 59238
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
59066: LD_ADDR_VAR 0 6
59070: PUSH
59071: LD_EXP 84
59075: PUSH
59076: LD_VAR 0 2
59080: ARRAY
59081: PPUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 24
59087: PUSH
59088: LD_INT 1000
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 34
59104: PUSH
59105: LD_INT 13
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 34
59114: PUSH
59115: LD_INT 52
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PPUSH
59131: CALL_OW 72
59135: ST_TO_ADDR
// if cranes then
59136: LD_VAR 0 6
59140: IFFALSE 59202
// for j in cranes do
59142: LD_ADDR_VAR 0 3
59146: PUSH
59147: LD_VAR 0 6
59151: PUSH
59152: FOR_IN
59153: IFFALSE 59200
// if not IsInArea ( j , mc_parking [ i ] ) then
59155: LD_VAR 0 3
59159: PPUSH
59160: LD_EXP 89
59164: PUSH
59165: LD_VAR 0 2
59169: ARRAY
59170: PPUSH
59171: CALL_OW 308
59175: NOT
59176: IFFALSE 59198
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59178: LD_VAR 0 3
59182: PPUSH
59183: LD_EXP 89
59187: PUSH
59188: LD_VAR 0 2
59192: ARRAY
59193: PPUSH
59194: CALL_OW 113
59198: GO 59152
59200: POP
59201: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
59202: LD_ADDR_EXP 67
59206: PUSH
59207: LD_EXP 67
59211: PPUSH
59212: LD_VAR 0 2
59216: PPUSH
59217: EMPTY
59218: PPUSH
59219: CALL_OW 1
59223: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
59224: LD_VAR 0 2
59228: PPUSH
59229: LD_INT 101
59231: PPUSH
59232: CALL 54139 0 2
// continue ;
59236: GO 59050
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
59238: LD_ADDR_EXP 71
59242: PUSH
59243: LD_EXP 71
59247: PPUSH
59248: LD_VAR 0 2
59252: PPUSH
59253: EMPTY
59254: PPUSH
59255: CALL_OW 1
59259: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59260: LD_VAR 0 2
59264: PPUSH
59265: LD_INT 103
59267: PPUSH
59268: CALL 54139 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
59272: LD_ADDR_VAR 0 5
59276: PUSH
59277: LD_EXP 65
59281: PUSH
59282: LD_VAR 0 2
59286: ARRAY
59287: PUSH
59288: LD_EXP 94
59292: PUSH
59293: LD_VAR 0 2
59297: ARRAY
59298: UNION
59299: PPUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 25
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 25
59315: PUSH
59316: LD_INT 16
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: LIST
59327: PUSH
59328: EMPTY
59329: LIST
59330: PPUSH
59331: CALL_OW 72
59335: PUSH
59336: LD_EXP 68
59340: PUSH
59341: LD_VAR 0 2
59345: ARRAY
59346: PUSH
59347: LD_INT 1
59349: ARRAY
59350: PUSH
59351: LD_EXP 68
59355: PUSH
59356: LD_VAR 0 2
59360: ARRAY
59361: PUSH
59362: LD_INT 2
59364: ARRAY
59365: UNION
59366: DIFF
59367: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
59368: LD_ADDR_VAR 0 6
59372: PUSH
59373: LD_EXP 84
59377: PUSH
59378: LD_VAR 0 2
59382: ARRAY
59383: PPUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 34
59389: PUSH
59390: LD_INT 13
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 34
59399: PUSH
59400: LD_INT 52
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: PPUSH
59412: CALL_OW 72
59416: ST_TO_ADDR
// if cranes then
59417: LD_VAR 0 6
59421: IFFALSE 59557
// begin for j in cranes do
59423: LD_ADDR_VAR 0 3
59427: PUSH
59428: LD_VAR 0 6
59432: PUSH
59433: FOR_IN
59434: IFFALSE 59555
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
59436: LD_VAR 0 3
59440: PPUSH
59441: CALL_OW 256
59445: PUSH
59446: LD_INT 500
59448: GREATEREQUAL
59449: PUSH
59450: LD_VAR 0 3
59454: PPUSH
59455: CALL_OW 314
59459: NOT
59460: AND
59461: IFFALSE 59495
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
59463: LD_VAR 0 3
59467: PPUSH
59468: LD_EXP 66
59472: PUSH
59473: LD_VAR 0 2
59477: ARRAY
59478: PPUSH
59479: LD_VAR 0 3
59483: PPUSH
59484: CALL_OW 74
59488: PPUSH
59489: CALL_OW 130
59493: GO 59553
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
59495: LD_VAR 0 3
59499: PPUSH
59500: CALL_OW 256
59504: PUSH
59505: LD_INT 500
59507: LESS
59508: PUSH
59509: LD_VAR 0 3
59513: PPUSH
59514: LD_EXP 89
59518: PUSH
59519: LD_VAR 0 2
59523: ARRAY
59524: PPUSH
59525: CALL_OW 308
59529: NOT
59530: AND
59531: IFFALSE 59553
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59533: LD_VAR 0 3
59537: PPUSH
59538: LD_EXP 89
59542: PUSH
59543: LD_VAR 0 2
59547: ARRAY
59548: PPUSH
59549: CALL_OW 113
59553: GO 59433
59555: POP
59556: POP
// end ; if tmp > 3 then
59557: LD_VAR 0 5
59561: PUSH
59562: LD_INT 3
59564: GREATER
59565: IFFALSE 59585
// tmp := ShrinkArray ( tmp , 4 ) ;
59567: LD_ADDR_VAR 0 5
59571: PUSH
59572: LD_VAR 0 5
59576: PPUSH
59577: LD_INT 4
59579: PPUSH
59580: CALL 49749 0 2
59584: ST_TO_ADDR
// if not tmp then
59585: LD_VAR 0 5
59589: NOT
59590: IFFALSE 59594
// continue ;
59592: GO 59050
// for j in tmp do
59594: LD_ADDR_VAR 0 3
59598: PUSH
59599: LD_VAR 0 5
59603: PUSH
59604: FOR_IN
59605: IFFALSE 59864
// begin if IsInUnit ( j ) then
59607: LD_VAR 0 3
59611: PPUSH
59612: CALL_OW 310
59616: IFFALSE 59627
// ComExitBuilding ( j ) ;
59618: LD_VAR 0 3
59622: PPUSH
59623: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
59627: LD_VAR 0 3
59631: PUSH
59632: LD_EXP 67
59636: PUSH
59637: LD_VAR 0 2
59641: ARRAY
59642: IN
59643: NOT
59644: IFFALSE 59702
// begin SetTag ( j , 101 ) ;
59646: LD_VAR 0 3
59650: PPUSH
59651: LD_INT 101
59653: PPUSH
59654: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
59658: LD_ADDR_EXP 67
59662: PUSH
59663: LD_EXP 67
59667: PPUSH
59668: LD_VAR 0 2
59672: PUSH
59673: LD_EXP 67
59677: PUSH
59678: LD_VAR 0 2
59682: ARRAY
59683: PUSH
59684: LD_INT 1
59686: PLUS
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PPUSH
59692: LD_VAR 0 3
59696: PPUSH
59697: CALL 18510 0 3
59701: ST_TO_ADDR
// end ; wait ( 1 ) ;
59702: LD_INT 1
59704: PPUSH
59705: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
59709: LD_ADDR_VAR 0 7
59713: PUSH
59714: LD_EXP 66
59718: PUSH
59719: LD_VAR 0 2
59723: ARRAY
59724: ST_TO_ADDR
// if mc_scan [ i ] then
59725: LD_EXP 88
59729: PUSH
59730: LD_VAR 0 2
59734: ARRAY
59735: IFFALSE 59797
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
59737: LD_ADDR_VAR 0 7
59741: PUSH
59742: LD_EXP 66
59746: PUSH
59747: LD_VAR 0 2
59751: ARRAY
59752: PPUSH
59753: LD_INT 3
59755: PUSH
59756: LD_INT 30
59758: PUSH
59759: LD_INT 32
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 30
59768: PUSH
59769: LD_INT 33
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 30
59778: PUSH
59779: LD_INT 31
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: PPUSH
59792: CALL_OW 72
59796: ST_TO_ADDR
// if not to_repair_tmp then
59797: LD_VAR 0 7
59801: NOT
59802: IFFALSE 59806
// continue ;
59804: GO 59604
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
59806: LD_ADDR_VAR 0 8
59810: PUSH
59811: LD_VAR 0 7
59815: PPUSH
59816: LD_VAR 0 3
59820: PPUSH
59821: CALL_OW 74
59825: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
59826: LD_VAR 0 8
59830: PPUSH
59831: LD_INT 16
59833: PPUSH
59834: CALL 21103 0 2
59838: PUSH
59839: LD_INT 4
59841: ARRAY
59842: PUSH
59843: LD_INT 5
59845: LESS
59846: IFFALSE 59862
// ComRepairBuilding ( j , to_repair ) ;
59848: LD_VAR 0 3
59852: PPUSH
59853: LD_VAR 0 8
59857: PPUSH
59858: CALL_OW 130
// end ;
59862: GO 59604
59864: POP
59865: POP
// end ;
59866: GO 59050
59868: POP
59869: POP
// end ;
59870: LD_VAR 0 1
59874: RET
// export function MC_Heal ; var i , j , tmp ; begin
59875: LD_INT 0
59877: PPUSH
59878: PPUSH
59879: PPUSH
59880: PPUSH
// if not mc_bases then
59881: LD_EXP 65
59885: NOT
59886: IFFALSE 59890
// exit ;
59888: GO 60292
// for i = 1 to mc_bases do
59890: LD_ADDR_VAR 0 2
59894: PUSH
59895: DOUBLE
59896: LD_INT 1
59898: DEC
59899: ST_TO_ADDR
59900: LD_EXP 65
59904: PUSH
59905: FOR_TO
59906: IFFALSE 60290
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
59908: LD_EXP 68
59912: PUSH
59913: LD_VAR 0 2
59917: ARRAY
59918: PUSH
59919: LD_INT 1
59921: ARRAY
59922: NOT
59923: PUSH
59924: LD_EXP 68
59928: PUSH
59929: LD_VAR 0 2
59933: ARRAY
59934: PUSH
59935: LD_INT 2
59937: ARRAY
59938: NOT
59939: AND
59940: IFFALSE 59978
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
59942: LD_ADDR_EXP 69
59946: PUSH
59947: LD_EXP 69
59951: PPUSH
59952: LD_VAR 0 2
59956: PPUSH
59957: EMPTY
59958: PPUSH
59959: CALL_OW 1
59963: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
59964: LD_VAR 0 2
59968: PPUSH
59969: LD_INT 102
59971: PPUSH
59972: CALL 54139 0 2
// continue ;
59976: GO 59905
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_EXP 65
59987: PUSH
59988: LD_VAR 0 2
59992: ARRAY
59993: PPUSH
59994: LD_INT 25
59996: PUSH
59997: LD_INT 4
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PPUSH
60004: CALL_OW 72
60008: ST_TO_ADDR
// if not tmp then
60009: LD_VAR 0 4
60013: NOT
60014: IFFALSE 60018
// continue ;
60016: GO 59905
// if mc_taming [ i ] then
60018: LD_EXP 96
60022: PUSH
60023: LD_VAR 0 2
60027: ARRAY
60028: IFFALSE 60052
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
60030: LD_ADDR_EXP 96
60034: PUSH
60035: LD_EXP 96
60039: PPUSH
60040: LD_VAR 0 2
60044: PPUSH
60045: EMPTY
60046: PPUSH
60047: CALL_OW 1
60051: ST_TO_ADDR
// for j in tmp do
60052: LD_ADDR_VAR 0 3
60056: PUSH
60057: LD_VAR 0 4
60061: PUSH
60062: FOR_IN
60063: IFFALSE 60286
// begin if IsInUnit ( j ) then
60065: LD_VAR 0 3
60069: PPUSH
60070: CALL_OW 310
60074: IFFALSE 60085
// ComExitBuilding ( j ) ;
60076: LD_VAR 0 3
60080: PPUSH
60081: CALL_OW 122
// if not j in mc_healers [ i ] then
60085: LD_VAR 0 3
60089: PUSH
60090: LD_EXP 69
60094: PUSH
60095: LD_VAR 0 2
60099: ARRAY
60100: IN
60101: NOT
60102: IFFALSE 60148
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
60104: LD_ADDR_EXP 69
60108: PUSH
60109: LD_EXP 69
60113: PPUSH
60114: LD_VAR 0 2
60118: PUSH
60119: LD_EXP 69
60123: PUSH
60124: LD_VAR 0 2
60128: ARRAY
60129: PUSH
60130: LD_INT 1
60132: PLUS
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PPUSH
60138: LD_VAR 0 3
60142: PPUSH
60143: CALL 18510 0 3
60147: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
60148: LD_VAR 0 3
60152: PPUSH
60153: CALL_OW 110
60157: PUSH
60158: LD_INT 102
60160: NONEQUAL
60161: IFFALSE 60175
// SetTag ( j , 102 ) ;
60163: LD_VAR 0 3
60167: PPUSH
60168: LD_INT 102
60170: PPUSH
60171: CALL_OW 109
// Wait ( 3 ) ;
60175: LD_INT 3
60177: PPUSH
60178: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
60182: LD_EXP 68
60186: PUSH
60187: LD_VAR 0 2
60191: ARRAY
60192: PUSH
60193: LD_INT 1
60195: ARRAY
60196: IFFALSE 60228
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
60198: LD_VAR 0 3
60202: PPUSH
60203: LD_EXP 68
60207: PUSH
60208: LD_VAR 0 2
60212: ARRAY
60213: PUSH
60214: LD_INT 1
60216: ARRAY
60217: PUSH
60218: LD_INT 1
60220: ARRAY
60221: PPUSH
60222: CALL_OW 128
60226: GO 60284
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
60228: LD_VAR 0 3
60232: PPUSH
60233: CALL_OW 314
60237: NOT
60238: PUSH
60239: LD_EXP 68
60243: PUSH
60244: LD_VAR 0 2
60248: ARRAY
60249: PUSH
60250: LD_INT 2
60252: ARRAY
60253: AND
60254: IFFALSE 60284
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
60256: LD_VAR 0 3
60260: PPUSH
60261: LD_EXP 68
60265: PUSH
60266: LD_VAR 0 2
60270: ARRAY
60271: PUSH
60272: LD_INT 2
60274: ARRAY
60275: PUSH
60276: LD_INT 1
60278: ARRAY
60279: PPUSH
60280: CALL_OW 128
// end ;
60284: GO 60062
60286: POP
60287: POP
// end ;
60288: GO 59905
60290: POP
60291: POP
// end ;
60292: LD_VAR 0 1
60296: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
60297: LD_INT 0
60299: PPUSH
60300: PPUSH
60301: PPUSH
60302: PPUSH
60303: PPUSH
// if not mc_bases then
60304: LD_EXP 65
60308: NOT
60309: IFFALSE 60313
// exit ;
60311: GO 61456
// for i = 1 to mc_bases do
60313: LD_ADDR_VAR 0 2
60317: PUSH
60318: DOUBLE
60319: LD_INT 1
60321: DEC
60322: ST_TO_ADDR
60323: LD_EXP 65
60327: PUSH
60328: FOR_TO
60329: IFFALSE 61454
// begin if mc_scan [ i ] then
60331: LD_EXP 88
60335: PUSH
60336: LD_VAR 0 2
60340: ARRAY
60341: IFFALSE 60345
// continue ;
60343: GO 60328
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
60345: LD_EXP 70
60349: PUSH
60350: LD_VAR 0 2
60354: ARRAY
60355: NOT
60356: PUSH
60357: LD_EXP 72
60361: PUSH
60362: LD_VAR 0 2
60366: ARRAY
60367: NOT
60368: AND
60369: PUSH
60370: LD_EXP 71
60374: PUSH
60375: LD_VAR 0 2
60379: ARRAY
60380: AND
60381: IFFALSE 60419
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
60383: LD_ADDR_EXP 71
60387: PUSH
60388: LD_EXP 71
60392: PPUSH
60393: LD_VAR 0 2
60397: PPUSH
60398: EMPTY
60399: PPUSH
60400: CALL_OW 1
60404: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
60405: LD_VAR 0 2
60409: PPUSH
60410: LD_INT 103
60412: PPUSH
60413: CALL 54139 0 2
// continue ;
60417: GO 60328
// end ; if mc_construct_list [ i ] then
60419: LD_EXP 72
60423: PUSH
60424: LD_VAR 0 2
60428: ARRAY
60429: IFFALSE 60649
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60431: LD_ADDR_VAR 0 4
60435: PUSH
60436: LD_EXP 65
60440: PUSH
60441: LD_VAR 0 2
60445: ARRAY
60446: PPUSH
60447: LD_INT 25
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PPUSH
60457: CALL_OW 72
60461: PUSH
60462: LD_EXP 67
60466: PUSH
60467: LD_VAR 0 2
60471: ARRAY
60472: DIFF
60473: ST_TO_ADDR
// if not tmp then
60474: LD_VAR 0 4
60478: NOT
60479: IFFALSE 60483
// continue ;
60481: GO 60328
// for j in tmp do
60483: LD_ADDR_VAR 0 3
60487: PUSH
60488: LD_VAR 0 4
60492: PUSH
60493: FOR_IN
60494: IFFALSE 60645
// begin if not mc_builders [ i ] then
60496: LD_EXP 71
60500: PUSH
60501: LD_VAR 0 2
60505: ARRAY
60506: NOT
60507: IFFALSE 60565
// begin SetTag ( j , 103 ) ;
60509: LD_VAR 0 3
60513: PPUSH
60514: LD_INT 103
60516: PPUSH
60517: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60521: LD_ADDR_EXP 71
60525: PUSH
60526: LD_EXP 71
60530: PPUSH
60531: LD_VAR 0 2
60535: PUSH
60536: LD_EXP 71
60540: PUSH
60541: LD_VAR 0 2
60545: ARRAY
60546: PUSH
60547: LD_INT 1
60549: PLUS
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PPUSH
60555: LD_VAR 0 3
60559: PPUSH
60560: CALL 18510 0 3
60564: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60565: LD_VAR 0 3
60569: PPUSH
60570: CALL_OW 310
60574: IFFALSE 60585
// ComExitBuilding ( j ) ;
60576: LD_VAR 0 3
60580: PPUSH
60581: CALL_OW 122
// wait ( 3 ) ;
60585: LD_INT 3
60587: PPUSH
60588: CALL_OW 67
// if not mc_construct_list [ i ] then
60592: LD_EXP 72
60596: PUSH
60597: LD_VAR 0 2
60601: ARRAY
60602: NOT
60603: IFFALSE 60607
// break ;
60605: GO 60645
// if not HasTask ( j ) then
60607: LD_VAR 0 3
60611: PPUSH
60612: CALL_OW 314
60616: NOT
60617: IFFALSE 60643
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
60619: LD_VAR 0 3
60623: PPUSH
60624: LD_EXP 72
60628: PUSH
60629: LD_VAR 0 2
60633: ARRAY
60634: PUSH
60635: LD_INT 1
60637: ARRAY
60638: PPUSH
60639: CALL 21361 0 2
// end ;
60643: GO 60493
60645: POP
60646: POP
// end else
60647: GO 61452
// if mc_build_list [ i ] then
60649: LD_EXP 70
60653: PUSH
60654: LD_VAR 0 2
60658: ARRAY
60659: IFFALSE 61452
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60661: LD_ADDR_VAR 0 5
60665: PUSH
60666: LD_EXP 65
60670: PUSH
60671: LD_VAR 0 2
60675: ARRAY
60676: PPUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 30
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 30
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: PPUSH
60705: CALL_OW 72
60709: ST_TO_ADDR
// if depot then
60710: LD_VAR 0 5
60714: IFFALSE 60732
// depot := depot [ 1 ] else
60716: LD_ADDR_VAR 0 5
60720: PUSH
60721: LD_VAR 0 5
60725: PUSH
60726: LD_INT 1
60728: ARRAY
60729: ST_TO_ADDR
60730: GO 60740
// depot := 0 ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_INT 0
60739: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
60740: LD_EXP 70
60744: PUSH
60745: LD_VAR 0 2
60749: ARRAY
60750: PUSH
60751: LD_INT 1
60753: ARRAY
60754: PUSH
60755: LD_INT 1
60757: ARRAY
60758: PPUSH
60759: CALL 21191 0 1
60763: PUSH
60764: LD_EXP 65
60768: PUSH
60769: LD_VAR 0 2
60773: ARRAY
60774: PPUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 30
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 30
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: PPUSH
60803: CALL_OW 72
60807: NOT
60808: AND
60809: IFFALSE 60914
// begin for j = 1 to mc_build_list [ i ] do
60811: LD_ADDR_VAR 0 3
60815: PUSH
60816: DOUBLE
60817: LD_INT 1
60819: DEC
60820: ST_TO_ADDR
60821: LD_EXP 70
60825: PUSH
60826: LD_VAR 0 2
60830: ARRAY
60831: PUSH
60832: FOR_TO
60833: IFFALSE 60912
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
60835: LD_EXP 70
60839: PUSH
60840: LD_VAR 0 2
60844: ARRAY
60845: PUSH
60846: LD_VAR 0 3
60850: ARRAY
60851: PUSH
60852: LD_INT 1
60854: ARRAY
60855: PUSH
60856: LD_INT 2
60858: EQUAL
60859: IFFALSE 60910
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
60861: LD_ADDR_EXP 70
60865: PUSH
60866: LD_EXP 70
60870: PPUSH
60871: LD_VAR 0 2
60875: PPUSH
60876: LD_EXP 70
60880: PUSH
60881: LD_VAR 0 2
60885: ARRAY
60886: PPUSH
60887: LD_VAR 0 3
60891: PPUSH
60892: LD_INT 1
60894: PPUSH
60895: LD_INT 0
60897: PPUSH
60898: CALL 17928 0 4
60902: PPUSH
60903: CALL_OW 1
60907: ST_TO_ADDR
// break ;
60908: GO 60912
// end ;
60910: GO 60832
60912: POP
60913: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
60914: LD_EXP 70
60918: PUSH
60919: LD_VAR 0 2
60923: ARRAY
60924: PUSH
60925: LD_INT 1
60927: ARRAY
60928: PUSH
60929: LD_INT 1
60931: ARRAY
60932: PUSH
60933: LD_INT 0
60935: EQUAL
60936: PUSH
60937: LD_VAR 0 5
60941: PUSH
60942: LD_VAR 0 5
60946: PPUSH
60947: LD_EXP 70
60951: PUSH
60952: LD_VAR 0 2
60956: ARRAY
60957: PUSH
60958: LD_INT 1
60960: ARRAY
60961: PUSH
60962: LD_INT 1
60964: ARRAY
60965: PPUSH
60966: LD_EXP 70
60970: PUSH
60971: LD_VAR 0 2
60975: ARRAY
60976: PUSH
60977: LD_INT 1
60979: ARRAY
60980: PUSH
60981: LD_INT 2
60983: ARRAY
60984: PPUSH
60985: LD_EXP 70
60989: PUSH
60990: LD_VAR 0 2
60994: ARRAY
60995: PUSH
60996: LD_INT 1
60998: ARRAY
60999: PUSH
61000: LD_INT 3
61002: ARRAY
61003: PPUSH
61004: LD_EXP 70
61008: PUSH
61009: LD_VAR 0 2
61013: ARRAY
61014: PUSH
61015: LD_INT 1
61017: ARRAY
61018: PUSH
61019: LD_INT 4
61021: ARRAY
61022: PPUSH
61023: CALL 25925 0 5
61027: AND
61028: OR
61029: IFFALSE 61310
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
61031: LD_ADDR_VAR 0 4
61035: PUSH
61036: LD_EXP 65
61040: PUSH
61041: LD_VAR 0 2
61045: ARRAY
61046: PPUSH
61047: LD_INT 25
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PPUSH
61057: CALL_OW 72
61061: PUSH
61062: LD_EXP 67
61066: PUSH
61067: LD_VAR 0 2
61071: ARRAY
61072: DIFF
61073: ST_TO_ADDR
// if not tmp then
61074: LD_VAR 0 4
61078: NOT
61079: IFFALSE 61083
// continue ;
61081: GO 60328
// for j in tmp do
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_VAR 0 4
61092: PUSH
61093: FOR_IN
61094: IFFALSE 61306
// begin if not mc_builders [ i ] then
61096: LD_EXP 71
61100: PUSH
61101: LD_VAR 0 2
61105: ARRAY
61106: NOT
61107: IFFALSE 61165
// begin SetTag ( j , 103 ) ;
61109: LD_VAR 0 3
61113: PPUSH
61114: LD_INT 103
61116: PPUSH
61117: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
61121: LD_ADDR_EXP 71
61125: PUSH
61126: LD_EXP 71
61130: PPUSH
61131: LD_VAR 0 2
61135: PUSH
61136: LD_EXP 71
61140: PUSH
61141: LD_VAR 0 2
61145: ARRAY
61146: PUSH
61147: LD_INT 1
61149: PLUS
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PPUSH
61155: LD_VAR 0 3
61159: PPUSH
61160: CALL 18510 0 3
61164: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
61165: LD_VAR 0 3
61169: PPUSH
61170: CALL_OW 310
61174: IFFALSE 61185
// ComExitBuilding ( j ) ;
61176: LD_VAR 0 3
61180: PPUSH
61181: CALL_OW 122
// wait ( 3 ) ;
61185: LD_INT 3
61187: PPUSH
61188: CALL_OW 67
// if not mc_build_list [ i ] then
61192: LD_EXP 70
61196: PUSH
61197: LD_VAR 0 2
61201: ARRAY
61202: NOT
61203: IFFALSE 61207
// break ;
61205: GO 61306
// if not HasTask ( j ) then
61207: LD_VAR 0 3
61211: PPUSH
61212: CALL_OW 314
61216: NOT
61217: IFFALSE 61304
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
61219: LD_VAR 0 3
61223: PPUSH
61224: LD_EXP 70
61228: PUSH
61229: LD_VAR 0 2
61233: ARRAY
61234: PUSH
61235: LD_INT 1
61237: ARRAY
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PPUSH
61243: LD_EXP 70
61247: PUSH
61248: LD_VAR 0 2
61252: ARRAY
61253: PUSH
61254: LD_INT 1
61256: ARRAY
61257: PUSH
61258: LD_INT 2
61260: ARRAY
61261: PPUSH
61262: LD_EXP 70
61266: PUSH
61267: LD_VAR 0 2
61271: ARRAY
61272: PUSH
61273: LD_INT 1
61275: ARRAY
61276: PUSH
61277: LD_INT 3
61279: ARRAY
61280: PPUSH
61281: LD_EXP 70
61285: PUSH
61286: LD_VAR 0 2
61290: ARRAY
61291: PUSH
61292: LD_INT 1
61294: ARRAY
61295: PUSH
61296: LD_INT 4
61298: ARRAY
61299: PPUSH
61300: CALL_OW 145
// end ;
61304: GO 61093
61306: POP
61307: POP
// end else
61308: GO 61452
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
61310: LD_EXP 65
61314: PUSH
61315: LD_VAR 0 2
61319: ARRAY
61320: PPUSH
61321: LD_EXP 70
61325: PUSH
61326: LD_VAR 0 2
61330: ARRAY
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: LD_INT 1
61338: ARRAY
61339: PPUSH
61340: LD_EXP 70
61344: PUSH
61345: LD_VAR 0 2
61349: ARRAY
61350: PUSH
61351: LD_INT 1
61353: ARRAY
61354: PUSH
61355: LD_INT 2
61357: ARRAY
61358: PPUSH
61359: LD_EXP 70
61363: PUSH
61364: LD_VAR 0 2
61368: ARRAY
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PUSH
61374: LD_INT 3
61376: ARRAY
61377: PPUSH
61378: LD_EXP 70
61382: PUSH
61383: LD_VAR 0 2
61387: ARRAY
61388: PUSH
61389: LD_INT 1
61391: ARRAY
61392: PUSH
61393: LD_INT 4
61395: ARRAY
61396: PPUSH
61397: CALL 25261 0 5
61401: NOT
61402: IFFALSE 61452
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
61404: LD_ADDR_EXP 70
61408: PUSH
61409: LD_EXP 70
61413: PPUSH
61414: LD_VAR 0 2
61418: PPUSH
61419: LD_EXP 70
61423: PUSH
61424: LD_VAR 0 2
61428: ARRAY
61429: PPUSH
61430: LD_INT 1
61432: PPUSH
61433: LD_INT 1
61435: NEG
61436: PPUSH
61437: LD_INT 0
61439: PPUSH
61440: CALL 17928 0 4
61444: PPUSH
61445: CALL_OW 1
61449: ST_TO_ADDR
// continue ;
61450: GO 60328
// end ; end ; end ;
61452: GO 60328
61454: POP
61455: POP
// end ;
61456: LD_VAR 0 1
61460: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
61461: LD_INT 0
61463: PPUSH
61464: PPUSH
61465: PPUSH
61466: PPUSH
61467: PPUSH
61468: PPUSH
// if not mc_bases then
61469: LD_EXP 65
61473: NOT
61474: IFFALSE 61478
// exit ;
61476: GO 61905
// for i = 1 to mc_bases do
61478: LD_ADDR_VAR 0 2
61482: PUSH
61483: DOUBLE
61484: LD_INT 1
61486: DEC
61487: ST_TO_ADDR
61488: LD_EXP 65
61492: PUSH
61493: FOR_TO
61494: IFFALSE 61903
// begin tmp := mc_build_upgrade [ i ] ;
61496: LD_ADDR_VAR 0 4
61500: PUSH
61501: LD_EXP 97
61505: PUSH
61506: LD_VAR 0 2
61510: ARRAY
61511: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
61512: LD_ADDR_VAR 0 6
61516: PUSH
61517: LD_EXP 98
61521: PUSH
61522: LD_VAR 0 2
61526: ARRAY
61527: PPUSH
61528: LD_INT 2
61530: PUSH
61531: LD_INT 30
61533: PUSH
61534: LD_INT 6
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 30
61543: PUSH
61544: LD_INT 7
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: LIST
61555: PPUSH
61556: CALL_OW 72
61560: ST_TO_ADDR
// if not tmp and not lab then
61561: LD_VAR 0 4
61565: NOT
61566: PUSH
61567: LD_VAR 0 6
61571: NOT
61572: AND
61573: IFFALSE 61577
// continue ;
61575: GO 61493
// if tmp then
61577: LD_VAR 0 4
61581: IFFALSE 61701
// for j in tmp do
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: LD_VAR 0 4
61592: PUSH
61593: FOR_IN
61594: IFFALSE 61699
// begin if UpgradeCost ( j ) then
61596: LD_VAR 0 3
61600: PPUSH
61601: CALL 24921 0 1
61605: IFFALSE 61697
// begin ComUpgrade ( j ) ;
61607: LD_VAR 0 3
61611: PPUSH
61612: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
61616: LD_ADDR_EXP 97
61620: PUSH
61621: LD_EXP 97
61625: PPUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: LD_EXP 97
61635: PUSH
61636: LD_VAR 0 2
61640: ARRAY
61641: PUSH
61642: LD_VAR 0 3
61646: DIFF
61647: PPUSH
61648: CALL_OW 1
61652: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61653: LD_ADDR_EXP 72
61657: PUSH
61658: LD_EXP 72
61662: PPUSH
61663: LD_VAR 0 2
61667: PUSH
61668: LD_EXP 72
61672: PUSH
61673: LD_VAR 0 2
61677: ARRAY
61678: PUSH
61679: LD_INT 1
61681: PLUS
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PPUSH
61687: LD_VAR 0 3
61691: PPUSH
61692: CALL 18510 0 3
61696: ST_TO_ADDR
// end ; end ;
61697: GO 61593
61699: POP
61700: POP
// if not lab or not mc_lab_upgrade [ i ] then
61701: LD_VAR 0 6
61705: NOT
61706: PUSH
61707: LD_EXP 99
61711: PUSH
61712: LD_VAR 0 2
61716: ARRAY
61717: NOT
61718: OR
61719: IFFALSE 61723
// continue ;
61721: GO 61493
// for j in lab do
61723: LD_ADDR_VAR 0 3
61727: PUSH
61728: LD_VAR 0 6
61732: PUSH
61733: FOR_IN
61734: IFFALSE 61899
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
61736: LD_VAR 0 3
61740: PPUSH
61741: CALL_OW 266
61745: PUSH
61746: LD_INT 6
61748: PUSH
61749: LD_INT 7
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: IN
61756: PUSH
61757: LD_VAR 0 3
61761: PPUSH
61762: CALL_OW 461
61766: PUSH
61767: LD_INT 1
61769: NONEQUAL
61770: AND
61771: IFFALSE 61897
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
61773: LD_VAR 0 3
61777: PPUSH
61778: LD_EXP 99
61782: PUSH
61783: LD_VAR 0 2
61787: ARRAY
61788: PUSH
61789: LD_INT 1
61791: ARRAY
61792: PPUSH
61793: CALL 25126 0 2
61797: IFFALSE 61897
// begin ComCancel ( j ) ;
61799: LD_VAR 0 3
61803: PPUSH
61804: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
61808: LD_VAR 0 3
61812: PPUSH
61813: LD_EXP 99
61817: PUSH
61818: LD_VAR 0 2
61822: ARRAY
61823: PUSH
61824: LD_INT 1
61826: ARRAY
61827: PPUSH
61828: CALL_OW 207
// if not j in mc_construct_list [ i ] then
61832: LD_VAR 0 3
61836: PUSH
61837: LD_EXP 72
61841: PUSH
61842: LD_VAR 0 2
61846: ARRAY
61847: IN
61848: NOT
61849: IFFALSE 61895
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61851: LD_ADDR_EXP 72
61855: PUSH
61856: LD_EXP 72
61860: PPUSH
61861: LD_VAR 0 2
61865: PUSH
61866: LD_EXP 72
61870: PUSH
61871: LD_VAR 0 2
61875: ARRAY
61876: PUSH
61877: LD_INT 1
61879: PLUS
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PPUSH
61885: LD_VAR 0 3
61889: PPUSH
61890: CALL 18510 0 3
61894: ST_TO_ADDR
// break ;
61895: GO 61899
// end ; end ; end ;
61897: GO 61733
61899: POP
61900: POP
// end ;
61901: GO 61493
61903: POP
61904: POP
// end ;
61905: LD_VAR 0 1
61909: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
61910: LD_INT 0
61912: PPUSH
61913: PPUSH
61914: PPUSH
61915: PPUSH
61916: PPUSH
61917: PPUSH
61918: PPUSH
61919: PPUSH
61920: PPUSH
// if not mc_bases then
61921: LD_EXP 65
61925: NOT
61926: IFFALSE 61930
// exit ;
61928: GO 62335
// for i = 1 to mc_bases do
61930: LD_ADDR_VAR 0 2
61934: PUSH
61935: DOUBLE
61936: LD_INT 1
61938: DEC
61939: ST_TO_ADDR
61940: LD_EXP 65
61944: PUSH
61945: FOR_TO
61946: IFFALSE 62333
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
61948: LD_EXP 73
61952: PUSH
61953: LD_VAR 0 2
61957: ARRAY
61958: NOT
61959: PUSH
61960: LD_EXP 65
61964: PUSH
61965: LD_VAR 0 2
61969: ARRAY
61970: PPUSH
61971: LD_INT 30
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PPUSH
61981: CALL_OW 72
61985: NOT
61986: OR
61987: IFFALSE 61991
// continue ;
61989: GO 61945
// busy := false ;
61991: LD_ADDR_VAR 0 8
61995: PUSH
61996: LD_INT 0
61998: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61999: LD_ADDR_VAR 0 4
62003: PUSH
62004: LD_EXP 65
62008: PUSH
62009: LD_VAR 0 2
62013: ARRAY
62014: PPUSH
62015: LD_INT 30
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PPUSH
62025: CALL_OW 72
62029: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
62030: LD_ADDR_VAR 0 6
62034: PUSH
62035: LD_EXP 73
62039: PUSH
62040: LD_VAR 0 2
62044: ARRAY
62045: PPUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 30
62051: PUSH
62052: LD_INT 32
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 30
62061: PUSH
62062: LD_INT 33
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: PPUSH
62074: CALL_OW 72
62078: ST_TO_ADDR
// if not t then
62079: LD_VAR 0 6
62083: NOT
62084: IFFALSE 62088
// continue ;
62086: GO 61945
// for j in tmp do
62088: LD_ADDR_VAR 0 3
62092: PUSH
62093: LD_VAR 0 4
62097: PUSH
62098: FOR_IN
62099: IFFALSE 62129
// if not BuildingStatus ( j ) = bs_idle then
62101: LD_VAR 0 3
62105: PPUSH
62106: CALL_OW 461
62110: PUSH
62111: LD_INT 2
62113: EQUAL
62114: NOT
62115: IFFALSE 62127
// begin busy := true ;
62117: LD_ADDR_VAR 0 8
62121: PUSH
62122: LD_INT 1
62124: ST_TO_ADDR
// break ;
62125: GO 62129
// end ;
62127: GO 62098
62129: POP
62130: POP
// if busy then
62131: LD_VAR 0 8
62135: IFFALSE 62139
// continue ;
62137: GO 61945
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
62139: LD_ADDR_VAR 0 7
62143: PUSH
62144: LD_VAR 0 6
62148: PPUSH
62149: LD_INT 35
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PPUSH
62159: CALL_OW 72
62163: ST_TO_ADDR
// if tw then
62164: LD_VAR 0 7
62168: IFFALSE 62245
// begin tw := tw [ 1 ] ;
62170: LD_ADDR_VAR 0 7
62174: PUSH
62175: LD_VAR 0 7
62179: PUSH
62180: LD_INT 1
62182: ARRAY
62183: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
62184: LD_ADDR_VAR 0 9
62188: PUSH
62189: LD_VAR 0 7
62193: PPUSH
62194: LD_EXP 90
62198: PUSH
62199: LD_VAR 0 2
62203: ARRAY
62204: PPUSH
62205: CALL 23480 0 2
62209: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
62210: LD_EXP 104
62214: PUSH
62215: LD_VAR 0 2
62219: ARRAY
62220: IFFALSE 62243
// if not weapon in mc_allowed_tower_weapons [ i ] then
62222: LD_VAR 0 9
62226: PUSH
62227: LD_EXP 104
62231: PUSH
62232: LD_VAR 0 2
62236: ARRAY
62237: IN
62238: NOT
62239: IFFALSE 62243
// continue ;
62241: GO 61945
// end else
62243: GO 62308
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
62245: LD_ADDR_VAR 0 5
62249: PUSH
62250: LD_EXP 73
62254: PUSH
62255: LD_VAR 0 2
62259: ARRAY
62260: PPUSH
62261: LD_VAR 0 4
62265: PPUSH
62266: CALL 48982 0 2
62270: ST_TO_ADDR
// if not tmp2 then
62271: LD_VAR 0 5
62275: NOT
62276: IFFALSE 62280
// continue ;
62278: GO 61945
// tw := tmp2 [ 1 ] ;
62280: LD_ADDR_VAR 0 7
62284: PUSH
62285: LD_VAR 0 5
62289: PUSH
62290: LD_INT 1
62292: ARRAY
62293: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
62294: LD_ADDR_VAR 0 9
62298: PUSH
62299: LD_VAR 0 5
62303: PUSH
62304: LD_INT 2
62306: ARRAY
62307: ST_TO_ADDR
// end ; if not weapon then
62308: LD_VAR 0 9
62312: NOT
62313: IFFALSE 62317
// continue ;
62315: GO 61945
// ComPlaceWeapon ( tw , weapon ) ;
62317: LD_VAR 0 7
62321: PPUSH
62322: LD_VAR 0 9
62326: PPUSH
62327: CALL_OW 148
// end ;
62331: GO 61945
62333: POP
62334: POP
// end ;
62335: LD_VAR 0 1
62339: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
62340: LD_INT 0
62342: PPUSH
62343: PPUSH
62344: PPUSH
62345: PPUSH
62346: PPUSH
62347: PPUSH
// if not mc_bases then
62348: LD_EXP 65
62352: NOT
62353: IFFALSE 62357
// exit ;
62355: GO 63133
// for i = 1 to mc_bases do
62357: LD_ADDR_VAR 0 2
62361: PUSH
62362: DOUBLE
62363: LD_INT 1
62365: DEC
62366: ST_TO_ADDR
62367: LD_EXP 65
62371: PUSH
62372: FOR_TO
62373: IFFALSE 63131
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
62375: LD_EXP 78
62379: PUSH
62380: LD_VAR 0 2
62384: ARRAY
62385: NOT
62386: PUSH
62387: LD_EXP 78
62391: PUSH
62392: LD_VAR 0 2
62396: ARRAY
62397: PUSH
62398: LD_EXP 79
62402: PUSH
62403: LD_VAR 0 2
62407: ARRAY
62408: EQUAL
62409: OR
62410: PUSH
62411: LD_EXP 88
62415: PUSH
62416: LD_VAR 0 2
62420: ARRAY
62421: OR
62422: IFFALSE 62426
// continue ;
62424: GO 62372
// if mc_miners [ i ] then
62426: LD_EXP 79
62430: PUSH
62431: LD_VAR 0 2
62435: ARRAY
62436: IFFALSE 62818
// begin for j = mc_miners [ i ] downto 1 do
62438: LD_ADDR_VAR 0 3
62442: PUSH
62443: DOUBLE
62444: LD_EXP 79
62448: PUSH
62449: LD_VAR 0 2
62453: ARRAY
62454: INC
62455: ST_TO_ADDR
62456: LD_INT 1
62458: PUSH
62459: FOR_DOWNTO
62460: IFFALSE 62816
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
62462: LD_EXP 79
62466: PUSH
62467: LD_VAR 0 2
62471: ARRAY
62472: PUSH
62473: LD_VAR 0 3
62477: ARRAY
62478: PPUSH
62479: CALL_OW 301
62483: PUSH
62484: LD_EXP 79
62488: PUSH
62489: LD_VAR 0 2
62493: ARRAY
62494: PUSH
62495: LD_VAR 0 3
62499: ARRAY
62500: PPUSH
62501: CALL_OW 257
62505: PUSH
62506: LD_INT 1
62508: NONEQUAL
62509: OR
62510: IFFALSE 62573
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
62512: LD_ADDR_VAR 0 5
62516: PUSH
62517: LD_EXP 79
62521: PUSH
62522: LD_VAR 0 2
62526: ARRAY
62527: PUSH
62528: LD_EXP 79
62532: PUSH
62533: LD_VAR 0 2
62537: ARRAY
62538: PUSH
62539: LD_VAR 0 3
62543: ARRAY
62544: DIFF
62545: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
62546: LD_ADDR_EXP 79
62550: PUSH
62551: LD_EXP 79
62555: PPUSH
62556: LD_VAR 0 2
62560: PPUSH
62561: LD_VAR 0 5
62565: PPUSH
62566: CALL_OW 1
62570: ST_TO_ADDR
// continue ;
62571: GO 62459
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
62573: LD_EXP 79
62577: PUSH
62578: LD_VAR 0 2
62582: ARRAY
62583: PUSH
62584: LD_VAR 0 3
62588: ARRAY
62589: PPUSH
62590: CALL_OW 257
62594: PUSH
62595: LD_INT 1
62597: EQUAL
62598: PUSH
62599: LD_EXP 79
62603: PUSH
62604: LD_VAR 0 2
62608: ARRAY
62609: PUSH
62610: LD_VAR 0 3
62614: ARRAY
62615: PPUSH
62616: CALL_OW 459
62620: NOT
62621: AND
62622: PUSH
62623: LD_EXP 79
62627: PUSH
62628: LD_VAR 0 2
62632: ARRAY
62633: PUSH
62634: LD_VAR 0 3
62638: ARRAY
62639: PPUSH
62640: CALL_OW 314
62644: NOT
62645: AND
62646: IFFALSE 62814
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
62648: LD_EXP 79
62652: PUSH
62653: LD_VAR 0 2
62657: ARRAY
62658: PUSH
62659: LD_VAR 0 3
62663: ARRAY
62664: PPUSH
62665: CALL_OW 310
62669: IFFALSE 62692
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
62671: LD_EXP 79
62675: PUSH
62676: LD_VAR 0 2
62680: ARRAY
62681: PUSH
62682: LD_VAR 0 3
62686: ARRAY
62687: PPUSH
62688: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
62692: LD_EXP 79
62696: PUSH
62697: LD_VAR 0 2
62701: ARRAY
62702: PUSH
62703: LD_VAR 0 3
62707: ARRAY
62708: PPUSH
62709: CALL_OW 314
62713: NOT
62714: IFFALSE 62814
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
62716: LD_EXP 79
62720: PUSH
62721: LD_VAR 0 2
62725: ARRAY
62726: PUSH
62727: LD_VAR 0 3
62731: ARRAY
62732: PPUSH
62733: LD_EXP 78
62737: PUSH
62738: LD_VAR 0 2
62742: ARRAY
62743: PUSH
62744: LD_VAR 0 3
62748: PUSH
62749: LD_EXP 78
62753: PUSH
62754: LD_VAR 0 2
62758: ARRAY
62759: MOD
62760: PUSH
62761: LD_INT 1
62763: PLUS
62764: ARRAY
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PPUSH
62770: LD_EXP 78
62774: PUSH
62775: LD_VAR 0 2
62779: ARRAY
62780: PUSH
62781: LD_VAR 0 3
62785: PUSH
62786: LD_EXP 78
62790: PUSH
62791: LD_VAR 0 2
62795: ARRAY
62796: MOD
62797: PUSH
62798: LD_INT 1
62800: PLUS
62801: ARRAY
62802: PUSH
62803: LD_INT 2
62805: ARRAY
62806: PPUSH
62807: LD_INT 0
62809: PPUSH
62810: CALL_OW 193
// end ; end ;
62814: GO 62459
62816: POP
62817: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
62818: LD_ADDR_VAR 0 5
62822: PUSH
62823: LD_EXP 65
62827: PUSH
62828: LD_VAR 0 2
62832: ARRAY
62833: PPUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 30
62839: PUSH
62840: LD_INT 4
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 30
62849: PUSH
62850: LD_INT 5
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 30
62859: PUSH
62860: LD_INT 32
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: PPUSH
62873: CALL_OW 72
62877: ST_TO_ADDR
// if not tmp then
62878: LD_VAR 0 5
62882: NOT
62883: IFFALSE 62887
// continue ;
62885: GO 62372
// list := [ ] ;
62887: LD_ADDR_VAR 0 6
62891: PUSH
62892: EMPTY
62893: ST_TO_ADDR
// for j in tmp do
62894: LD_ADDR_VAR 0 3
62898: PUSH
62899: LD_VAR 0 5
62903: PUSH
62904: FOR_IN
62905: IFFALSE 62974
// begin for k in UnitsInside ( j ) do
62907: LD_ADDR_VAR 0 4
62911: PUSH
62912: LD_VAR 0 3
62916: PPUSH
62917: CALL_OW 313
62921: PUSH
62922: FOR_IN
62923: IFFALSE 62970
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
62925: LD_VAR 0 4
62929: PPUSH
62930: CALL_OW 257
62934: PUSH
62935: LD_INT 1
62937: EQUAL
62938: PUSH
62939: LD_VAR 0 4
62943: PPUSH
62944: CALL_OW 459
62948: NOT
62949: AND
62950: IFFALSE 62968
// list := list ^ k ;
62952: LD_ADDR_VAR 0 6
62956: PUSH
62957: LD_VAR 0 6
62961: PUSH
62962: LD_VAR 0 4
62966: ADD
62967: ST_TO_ADDR
62968: GO 62922
62970: POP
62971: POP
// end ;
62972: GO 62904
62974: POP
62975: POP
// list := list diff mc_miners [ i ] ;
62976: LD_ADDR_VAR 0 6
62980: PUSH
62981: LD_VAR 0 6
62985: PUSH
62986: LD_EXP 79
62990: PUSH
62991: LD_VAR 0 2
62995: ARRAY
62996: DIFF
62997: ST_TO_ADDR
// if not list then
62998: LD_VAR 0 6
63002: NOT
63003: IFFALSE 63007
// continue ;
63005: GO 62372
// k := mc_mines [ i ] - mc_miners [ i ] ;
63007: LD_ADDR_VAR 0 4
63011: PUSH
63012: LD_EXP 78
63016: PUSH
63017: LD_VAR 0 2
63021: ARRAY
63022: PUSH
63023: LD_EXP 79
63027: PUSH
63028: LD_VAR 0 2
63032: ARRAY
63033: MINUS
63034: ST_TO_ADDR
// if k > list then
63035: LD_VAR 0 4
63039: PUSH
63040: LD_VAR 0 6
63044: GREATER
63045: IFFALSE 63057
// k := list ;
63047: LD_ADDR_VAR 0 4
63051: PUSH
63052: LD_VAR 0 6
63056: ST_TO_ADDR
// for j = 1 to k do
63057: LD_ADDR_VAR 0 3
63061: PUSH
63062: DOUBLE
63063: LD_INT 1
63065: DEC
63066: ST_TO_ADDR
63067: LD_VAR 0 4
63071: PUSH
63072: FOR_TO
63073: IFFALSE 63127
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
63075: LD_ADDR_EXP 79
63079: PUSH
63080: LD_EXP 79
63084: PPUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_EXP 79
63094: PUSH
63095: LD_VAR 0 2
63099: ARRAY
63100: PUSH
63101: LD_INT 1
63103: PLUS
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PPUSH
63109: LD_VAR 0 6
63113: PUSH
63114: LD_VAR 0 3
63118: ARRAY
63119: PPUSH
63120: CALL 18510 0 3
63124: ST_TO_ADDR
63125: GO 63072
63127: POP
63128: POP
// end ;
63129: GO 62372
63131: POP
63132: POP
// end ;
63133: LD_VAR 0 1
63137: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
63138: LD_INT 0
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
63147: PPUSH
63148: PPUSH
63149: PPUSH
// if not mc_bases then
63150: LD_EXP 65
63154: NOT
63155: IFFALSE 63159
// exit ;
63157: GO 64909
// for i = 1 to mc_bases do
63159: LD_ADDR_VAR 0 2
63163: PUSH
63164: DOUBLE
63165: LD_INT 1
63167: DEC
63168: ST_TO_ADDR
63169: LD_EXP 65
63173: PUSH
63174: FOR_TO
63175: IFFALSE 64907
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
63177: LD_EXP 65
63181: PUSH
63182: LD_VAR 0 2
63186: ARRAY
63187: NOT
63188: PUSH
63189: LD_EXP 72
63193: PUSH
63194: LD_VAR 0 2
63198: ARRAY
63199: OR
63200: IFFALSE 63204
// continue ;
63202: GO 63174
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
63204: LD_EXP 81
63208: PUSH
63209: LD_VAR 0 2
63213: ARRAY
63214: NOT
63215: PUSH
63216: LD_EXP 82
63220: PUSH
63221: LD_VAR 0 2
63225: ARRAY
63226: AND
63227: IFFALSE 63265
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63229: LD_ADDR_EXP 82
63233: PUSH
63234: LD_EXP 82
63238: PPUSH
63239: LD_VAR 0 2
63243: PPUSH
63244: EMPTY
63245: PPUSH
63246: CALL_OW 1
63250: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_INT 107
63258: PPUSH
63259: CALL 54139 0 2
// continue ;
63263: GO 63174
// end ; target := [ ] ;
63265: LD_ADDR_VAR 0 6
63269: PUSH
63270: EMPTY
63271: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
63272: LD_ADDR_VAR 0 3
63276: PUSH
63277: DOUBLE
63278: LD_EXP 81
63282: PUSH
63283: LD_VAR 0 2
63287: ARRAY
63288: INC
63289: ST_TO_ADDR
63290: LD_INT 1
63292: PUSH
63293: FOR_DOWNTO
63294: IFFALSE 63554
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
63296: LD_EXP 81
63300: PUSH
63301: LD_VAR 0 2
63305: ARRAY
63306: PUSH
63307: LD_VAR 0 3
63311: ARRAY
63312: PUSH
63313: LD_INT 2
63315: ARRAY
63316: PPUSH
63317: LD_EXP 81
63321: PUSH
63322: LD_VAR 0 2
63326: ARRAY
63327: PUSH
63328: LD_VAR 0 3
63332: ARRAY
63333: PUSH
63334: LD_INT 3
63336: ARRAY
63337: PPUSH
63338: CALL_OW 488
63342: PUSH
63343: LD_EXP 81
63347: PUSH
63348: LD_VAR 0 2
63352: ARRAY
63353: PUSH
63354: LD_VAR 0 3
63358: ARRAY
63359: PUSH
63360: LD_INT 2
63362: ARRAY
63363: PPUSH
63364: LD_EXP 81
63368: PUSH
63369: LD_VAR 0 2
63373: ARRAY
63374: PUSH
63375: LD_VAR 0 3
63379: ARRAY
63380: PUSH
63381: LD_INT 3
63383: ARRAY
63384: PPUSH
63385: CALL_OW 284
63389: PUSH
63390: LD_INT 0
63392: EQUAL
63393: AND
63394: IFFALSE 63449
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
63396: LD_ADDR_VAR 0 5
63400: PUSH
63401: LD_EXP 81
63405: PUSH
63406: LD_VAR 0 2
63410: ARRAY
63411: PPUSH
63412: LD_VAR 0 3
63416: PPUSH
63417: CALL_OW 3
63421: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
63422: LD_ADDR_EXP 81
63426: PUSH
63427: LD_EXP 81
63431: PPUSH
63432: LD_VAR 0 2
63436: PPUSH
63437: LD_VAR 0 5
63441: PPUSH
63442: CALL_OW 1
63446: ST_TO_ADDR
// continue ;
63447: GO 63293
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
63449: LD_EXP 65
63453: PUSH
63454: LD_VAR 0 2
63458: ARRAY
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PPUSH
63464: CALL_OW 255
63468: PPUSH
63469: LD_EXP 81
63473: PUSH
63474: LD_VAR 0 2
63478: ARRAY
63479: PUSH
63480: LD_VAR 0 3
63484: ARRAY
63485: PUSH
63486: LD_INT 2
63488: ARRAY
63489: PPUSH
63490: LD_EXP 81
63494: PUSH
63495: LD_VAR 0 2
63499: ARRAY
63500: PUSH
63501: LD_VAR 0 3
63505: ARRAY
63506: PUSH
63507: LD_INT 3
63509: ARRAY
63510: PPUSH
63511: LD_INT 30
63513: PPUSH
63514: CALL 19406 0 4
63518: PUSH
63519: LD_INT 4
63521: ARRAY
63522: PUSH
63523: LD_INT 0
63525: EQUAL
63526: IFFALSE 63552
// begin target := mc_crates [ i ] [ j ] ;
63528: LD_ADDR_VAR 0 6
63532: PUSH
63533: LD_EXP 81
63537: PUSH
63538: LD_VAR 0 2
63542: ARRAY
63543: PUSH
63544: LD_VAR 0 3
63548: ARRAY
63549: ST_TO_ADDR
// break ;
63550: GO 63554
// end ; end ;
63552: GO 63293
63554: POP
63555: POP
// if not target then
63556: LD_VAR 0 6
63560: NOT
63561: IFFALSE 63565
// continue ;
63563: GO 63174
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
63565: LD_ADDR_VAR 0 7
63569: PUSH
63570: LD_EXP 84
63574: PUSH
63575: LD_VAR 0 2
63579: ARRAY
63580: PPUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: LD_INT 58
63589: PUSH
63590: EMPTY
63591: LIST
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 61
63599: PUSH
63600: EMPTY
63601: LIST
63602: PUSH
63603: LD_INT 33
63605: PUSH
63606: LD_INT 5
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 33
63615: PUSH
63616: LD_INT 3
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: LD_INT 34
63635: PUSH
63636: LD_INT 32
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 34
63645: PUSH
63646: LD_INT 51
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 34
63655: PUSH
63656: LD_INT 12
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PPUSH
63673: CALL_OW 72
63677: ST_TO_ADDR
// if not cargo then
63678: LD_VAR 0 7
63682: NOT
63683: IFFALSE 64326
// begin if mc_crates_collector [ i ] < 5 then
63685: LD_EXP 82
63689: PUSH
63690: LD_VAR 0 2
63694: ARRAY
63695: PUSH
63696: LD_INT 5
63698: LESS
63699: IFFALSE 64065
// begin if mc_ape [ i ] then
63701: LD_EXP 94
63705: PUSH
63706: LD_VAR 0 2
63710: ARRAY
63711: IFFALSE 63758
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
63713: LD_ADDR_VAR 0 5
63717: PUSH
63718: LD_EXP 94
63722: PUSH
63723: LD_VAR 0 2
63727: ARRAY
63728: PPUSH
63729: LD_INT 25
63731: PUSH
63732: LD_INT 16
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 24
63741: PUSH
63742: LD_INT 750
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PPUSH
63753: CALL_OW 72
63757: ST_TO_ADDR
// if not tmp then
63758: LD_VAR 0 5
63762: NOT
63763: IFFALSE 63810
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
63765: LD_ADDR_VAR 0 5
63769: PUSH
63770: LD_EXP 65
63774: PUSH
63775: LD_VAR 0 2
63779: ARRAY
63780: PPUSH
63781: LD_INT 25
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 24
63793: PUSH
63794: LD_INT 750
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PPUSH
63805: CALL_OW 72
63809: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
63810: LD_EXP 94
63814: PUSH
63815: LD_VAR 0 2
63819: ARRAY
63820: PUSH
63821: LD_EXP 65
63825: PUSH
63826: LD_VAR 0 2
63830: ARRAY
63831: PPUSH
63832: LD_INT 25
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 24
63844: PUSH
63845: LD_INT 750
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PPUSH
63856: CALL_OW 72
63860: AND
63861: PUSH
63862: LD_VAR 0 5
63866: PUSH
63867: LD_INT 5
63869: LESS
63870: AND
63871: IFFALSE 63953
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
63873: LD_ADDR_VAR 0 3
63877: PUSH
63878: LD_EXP 65
63882: PUSH
63883: LD_VAR 0 2
63887: ARRAY
63888: PPUSH
63889: LD_INT 25
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 24
63901: PUSH
63902: LD_INT 750
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PPUSH
63913: CALL_OW 72
63917: PUSH
63918: FOR_IN
63919: IFFALSE 63951
// begin tmp := tmp union j ;
63921: LD_ADDR_VAR 0 5
63925: PUSH
63926: LD_VAR 0 5
63930: PUSH
63931: LD_VAR 0 3
63935: UNION
63936: ST_TO_ADDR
// if tmp >= 5 then
63937: LD_VAR 0 5
63941: PUSH
63942: LD_INT 5
63944: GREATEREQUAL
63945: IFFALSE 63949
// break ;
63947: GO 63951
// end ;
63949: GO 63918
63951: POP
63952: POP
// end ; if not tmp then
63953: LD_VAR 0 5
63957: NOT
63958: IFFALSE 63962
// continue ;
63960: GO 63174
// for j in tmp do
63962: LD_ADDR_VAR 0 3
63966: PUSH
63967: LD_VAR 0 5
63971: PUSH
63972: FOR_IN
63973: IFFALSE 64063
// if not GetTag ( j ) then
63975: LD_VAR 0 3
63979: PPUSH
63980: CALL_OW 110
63984: NOT
63985: IFFALSE 64061
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
63987: LD_ADDR_EXP 82
63991: PUSH
63992: LD_EXP 82
63996: PPUSH
63997: LD_VAR 0 2
64001: PUSH
64002: LD_EXP 82
64006: PUSH
64007: LD_VAR 0 2
64011: ARRAY
64012: PUSH
64013: LD_INT 1
64015: PLUS
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PPUSH
64021: LD_VAR 0 3
64025: PPUSH
64026: CALL 18510 0 3
64030: ST_TO_ADDR
// SetTag ( j , 107 ) ;
64031: LD_VAR 0 3
64035: PPUSH
64036: LD_INT 107
64038: PPUSH
64039: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
64043: LD_EXP 82
64047: PUSH
64048: LD_VAR 0 2
64052: ARRAY
64053: PUSH
64054: LD_INT 5
64056: GREATEREQUAL
64057: IFFALSE 64061
// break ;
64059: GO 64063
// end ;
64061: GO 63972
64063: POP
64064: POP
// end ; if mc_crates_collector [ i ] and target then
64065: LD_EXP 82
64069: PUSH
64070: LD_VAR 0 2
64074: ARRAY
64075: PUSH
64076: LD_VAR 0 6
64080: AND
64081: IFFALSE 64324
// begin if mc_crates_collector [ i ] < target [ 1 ] then
64083: LD_EXP 82
64087: PUSH
64088: LD_VAR 0 2
64092: ARRAY
64093: PUSH
64094: LD_VAR 0 6
64098: PUSH
64099: LD_INT 1
64101: ARRAY
64102: LESS
64103: IFFALSE 64123
// tmp := mc_crates_collector [ i ] else
64105: LD_ADDR_VAR 0 5
64109: PUSH
64110: LD_EXP 82
64114: PUSH
64115: LD_VAR 0 2
64119: ARRAY
64120: ST_TO_ADDR
64121: GO 64137
// tmp := target [ 1 ] ;
64123: LD_ADDR_VAR 0 5
64127: PUSH
64128: LD_VAR 0 6
64132: PUSH
64133: LD_INT 1
64135: ARRAY
64136: ST_TO_ADDR
// k := 0 ;
64137: LD_ADDR_VAR 0 4
64141: PUSH
64142: LD_INT 0
64144: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
64145: LD_ADDR_VAR 0 3
64149: PUSH
64150: LD_EXP 82
64154: PUSH
64155: LD_VAR 0 2
64159: ARRAY
64160: PUSH
64161: FOR_IN
64162: IFFALSE 64322
// begin k := k + 1 ;
64164: LD_ADDR_VAR 0 4
64168: PUSH
64169: LD_VAR 0 4
64173: PUSH
64174: LD_INT 1
64176: PLUS
64177: ST_TO_ADDR
// if k > tmp then
64178: LD_VAR 0 4
64182: PUSH
64183: LD_VAR 0 5
64187: GREATER
64188: IFFALSE 64192
// break ;
64190: GO 64322
// if not GetClass ( j ) in [ 2 , 16 ] then
64192: LD_VAR 0 3
64196: PPUSH
64197: CALL_OW 257
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: LD_INT 16
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: IN
64212: NOT
64213: IFFALSE 64266
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
64215: LD_ADDR_EXP 82
64219: PUSH
64220: LD_EXP 82
64224: PPUSH
64225: LD_VAR 0 2
64229: PPUSH
64230: LD_EXP 82
64234: PUSH
64235: LD_VAR 0 2
64239: ARRAY
64240: PUSH
64241: LD_VAR 0 3
64245: DIFF
64246: PPUSH
64247: CALL_OW 1
64251: ST_TO_ADDR
// SetTag ( j , 0 ) ;
64252: LD_VAR 0 3
64256: PPUSH
64257: LD_INT 0
64259: PPUSH
64260: CALL_OW 109
// continue ;
64264: GO 64161
// end ; if IsInUnit ( j ) then
64266: LD_VAR 0 3
64270: PPUSH
64271: CALL_OW 310
64275: IFFALSE 64286
// ComExitBuilding ( j ) ;
64277: LD_VAR 0 3
64281: PPUSH
64282: CALL_OW 122
// wait ( 3 ) ;
64286: LD_INT 3
64288: PPUSH
64289: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64293: LD_VAR 0 3
64297: PPUSH
64298: LD_VAR 0 6
64302: PUSH
64303: LD_INT 2
64305: ARRAY
64306: PPUSH
64307: LD_VAR 0 6
64311: PUSH
64312: LD_INT 3
64314: ARRAY
64315: PPUSH
64316: CALL_OW 117
// end ;
64320: GO 64161
64322: POP
64323: POP
// end ; end else
64324: GO 64905
// begin for j in cargo do
64326: LD_ADDR_VAR 0 3
64330: PUSH
64331: LD_VAR 0 7
64335: PUSH
64336: FOR_IN
64337: IFFALSE 64903
// begin if GetTag ( j ) <> 0 then
64339: LD_VAR 0 3
64343: PPUSH
64344: CALL_OW 110
64348: PUSH
64349: LD_INT 0
64351: NONEQUAL
64352: IFFALSE 64356
// continue ;
64354: GO 64336
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
64356: LD_VAR 0 3
64360: PPUSH
64361: CALL_OW 256
64365: PUSH
64366: LD_INT 1000
64368: LESS
64369: PUSH
64370: LD_VAR 0 3
64374: PPUSH
64375: LD_EXP 89
64379: PUSH
64380: LD_VAR 0 2
64384: ARRAY
64385: PPUSH
64386: CALL_OW 308
64390: NOT
64391: AND
64392: IFFALSE 64414
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64394: LD_VAR 0 3
64398: PPUSH
64399: LD_EXP 89
64403: PUSH
64404: LD_VAR 0 2
64408: ARRAY
64409: PPUSH
64410: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
64414: LD_VAR 0 3
64418: PPUSH
64419: CALL_OW 256
64423: PUSH
64424: LD_INT 1000
64426: LESS
64427: PUSH
64428: LD_VAR 0 3
64432: PPUSH
64433: LD_EXP 89
64437: PUSH
64438: LD_VAR 0 2
64442: ARRAY
64443: PPUSH
64444: CALL_OW 308
64448: AND
64449: IFFALSE 64453
// continue ;
64451: GO 64336
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
64453: LD_VAR 0 3
64457: PPUSH
64458: CALL_OW 262
64462: PUSH
64463: LD_INT 2
64465: EQUAL
64466: PUSH
64467: LD_VAR 0 3
64471: PPUSH
64472: CALL_OW 261
64476: PUSH
64477: LD_INT 15
64479: LESS
64480: AND
64481: IFFALSE 64485
// continue ;
64483: GO 64336
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
64485: LD_VAR 0 3
64489: PPUSH
64490: CALL_OW 262
64494: PUSH
64495: LD_INT 1
64497: EQUAL
64498: PUSH
64499: LD_VAR 0 3
64503: PPUSH
64504: CALL_OW 261
64508: PUSH
64509: LD_INT 10
64511: LESS
64512: AND
64513: IFFALSE 64842
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64515: LD_ADDR_VAR 0 8
64519: PUSH
64520: LD_EXP 65
64524: PUSH
64525: LD_VAR 0 2
64529: ARRAY
64530: PPUSH
64531: LD_INT 2
64533: PUSH
64534: LD_INT 30
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 30
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PPUSH
64559: CALL_OW 72
64563: ST_TO_ADDR
// if not depot then
64564: LD_VAR 0 8
64568: NOT
64569: IFFALSE 64573
// continue ;
64571: GO 64336
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
64573: LD_VAR 0 3
64577: PPUSH
64578: LD_VAR 0 8
64582: PPUSH
64583: LD_VAR 0 3
64587: PPUSH
64588: CALL_OW 74
64592: PPUSH
64593: CALL_OW 296
64597: PUSH
64598: LD_INT 6
64600: LESS
64601: IFFALSE 64617
// SetFuel ( j , 100 ) else
64603: LD_VAR 0 3
64607: PPUSH
64608: LD_INT 100
64610: PPUSH
64611: CALL_OW 240
64615: GO 64842
// if GetFuel ( j ) = 0 then
64617: LD_VAR 0 3
64621: PPUSH
64622: CALL_OW 261
64626: PUSH
64627: LD_INT 0
64629: EQUAL
64630: IFFALSE 64842
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
64632: LD_ADDR_EXP 84
64636: PUSH
64637: LD_EXP 84
64641: PPUSH
64642: LD_VAR 0 2
64646: PPUSH
64647: LD_EXP 84
64651: PUSH
64652: LD_VAR 0 2
64656: ARRAY
64657: PUSH
64658: LD_VAR 0 3
64662: DIFF
64663: PPUSH
64664: CALL_OW 1
64668: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
64669: LD_VAR 0 3
64673: PPUSH
64674: CALL_OW 263
64678: PUSH
64679: LD_INT 1
64681: EQUAL
64682: IFFALSE 64698
// ComExitVehicle ( IsInUnit ( j ) ) ;
64684: LD_VAR 0 3
64688: PPUSH
64689: CALL_OW 310
64693: PPUSH
64694: CALL_OW 121
// if GetControl ( j ) = control_remote then
64698: LD_VAR 0 3
64702: PPUSH
64703: CALL_OW 263
64707: PUSH
64708: LD_INT 2
64710: EQUAL
64711: IFFALSE 64722
// ComUnlink ( j ) ;
64713: LD_VAR 0 3
64717: PPUSH
64718: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
64722: LD_ADDR_VAR 0 9
64726: PUSH
64727: LD_VAR 0 2
64731: PPUSH
64732: LD_INT 3
64734: PPUSH
64735: CALL 74195 0 2
64739: ST_TO_ADDR
// if fac then
64740: LD_VAR 0 9
64744: IFFALSE 64840
// begin for k in fac do
64746: LD_ADDR_VAR 0 4
64750: PUSH
64751: LD_VAR 0 9
64755: PUSH
64756: FOR_IN
64757: IFFALSE 64838
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
64759: LD_ADDR_VAR 0 10
64763: PUSH
64764: LD_VAR 0 9
64768: PPUSH
64769: LD_VAR 0 3
64773: PPUSH
64774: CALL_OW 265
64778: PPUSH
64779: LD_VAR 0 3
64783: PPUSH
64784: CALL_OW 262
64788: PPUSH
64789: LD_VAR 0 3
64793: PPUSH
64794: CALL_OW 263
64798: PPUSH
64799: LD_VAR 0 3
64803: PPUSH
64804: CALL_OW 264
64808: PPUSH
64809: CALL 16042 0 5
64813: ST_TO_ADDR
// if components then
64814: LD_VAR 0 10
64818: IFFALSE 64836
// begin MC_InsertProduceList ( i , components ) ;
64820: LD_VAR 0 2
64824: PPUSH
64825: LD_VAR 0 10
64829: PPUSH
64830: CALL 73740 0 2
// break ;
64834: GO 64838
// end ; end ;
64836: GO 64756
64838: POP
64839: POP
// end ; continue ;
64840: GO 64336
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
64842: LD_VAR 0 3
64846: PPUSH
64847: LD_INT 1
64849: PPUSH
64850: CALL_OW 289
64854: PUSH
64855: LD_INT 100
64857: LESS
64858: PUSH
64859: LD_VAR 0 3
64863: PPUSH
64864: CALL_OW 314
64868: NOT
64869: AND
64870: IFFALSE 64899
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64872: LD_VAR 0 3
64876: PPUSH
64877: LD_VAR 0 6
64881: PUSH
64882: LD_INT 2
64884: ARRAY
64885: PPUSH
64886: LD_VAR 0 6
64890: PUSH
64891: LD_INT 3
64893: ARRAY
64894: PPUSH
64895: CALL_OW 117
// break ;
64899: GO 64903
// end ;
64901: GO 64336
64903: POP
64904: POP
// end ; end ;
64905: GO 63174
64907: POP
64908: POP
// end ;
64909: LD_VAR 0 1
64913: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
64914: LD_INT 0
64916: PPUSH
64917: PPUSH
64918: PPUSH
64919: PPUSH
// if not mc_bases then
64920: LD_EXP 65
64924: NOT
64925: IFFALSE 64929
// exit ;
64927: GO 65090
// for i = 1 to mc_bases do
64929: LD_ADDR_VAR 0 2
64933: PUSH
64934: DOUBLE
64935: LD_INT 1
64937: DEC
64938: ST_TO_ADDR
64939: LD_EXP 65
64943: PUSH
64944: FOR_TO
64945: IFFALSE 65088
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
64947: LD_ADDR_VAR 0 4
64951: PUSH
64952: LD_EXP 84
64956: PUSH
64957: LD_VAR 0 2
64961: ARRAY
64962: PUSH
64963: LD_EXP 87
64967: PUSH
64968: LD_VAR 0 2
64972: ARRAY
64973: UNION
64974: PPUSH
64975: LD_INT 33
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PPUSH
64985: CALL_OW 72
64989: ST_TO_ADDR
// if tmp then
64990: LD_VAR 0 4
64994: IFFALSE 65086
// for j in tmp do
64996: LD_ADDR_VAR 0 3
65000: PUSH
65001: LD_VAR 0 4
65005: PUSH
65006: FOR_IN
65007: IFFALSE 65084
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
65009: LD_VAR 0 3
65013: PPUSH
65014: CALL_OW 312
65018: NOT
65019: PUSH
65020: LD_VAR 0 3
65024: PPUSH
65025: CALL_OW 256
65029: PUSH
65030: LD_INT 250
65032: GREATEREQUAL
65033: AND
65034: IFFALSE 65047
// Connect ( j ) else
65036: LD_VAR 0 3
65040: PPUSH
65041: CALL 21443 0 1
65045: GO 65082
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
65047: LD_VAR 0 3
65051: PPUSH
65052: CALL_OW 256
65056: PUSH
65057: LD_INT 250
65059: LESS
65060: PUSH
65061: LD_VAR 0 3
65065: PPUSH
65066: CALL_OW 312
65070: AND
65071: IFFALSE 65082
// ComUnlink ( j ) ;
65073: LD_VAR 0 3
65077: PPUSH
65078: CALL_OW 136
65082: GO 65006
65084: POP
65085: POP
// end ;
65086: GO 64944
65088: POP
65089: POP
// end ;
65090: LD_VAR 0 1
65094: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
65095: LD_INT 0
65097: PPUSH
65098: PPUSH
65099: PPUSH
65100: PPUSH
65101: PPUSH
// if not mc_bases then
65102: LD_EXP 65
65106: NOT
65107: IFFALSE 65111
// exit ;
65109: GO 65556
// for i = 1 to mc_bases do
65111: LD_ADDR_VAR 0 2
65115: PUSH
65116: DOUBLE
65117: LD_INT 1
65119: DEC
65120: ST_TO_ADDR
65121: LD_EXP 65
65125: PUSH
65126: FOR_TO
65127: IFFALSE 65554
// begin if not mc_produce [ i ] then
65129: LD_EXP 86
65133: PUSH
65134: LD_VAR 0 2
65138: ARRAY
65139: NOT
65140: IFFALSE 65144
// continue ;
65142: GO 65126
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: LD_EXP 65
65153: PUSH
65154: LD_VAR 0 2
65158: ARRAY
65159: PPUSH
65160: LD_INT 30
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PPUSH
65170: CALL_OW 72
65174: ST_TO_ADDR
// if not fac then
65175: LD_VAR 0 5
65179: NOT
65180: IFFALSE 65184
// continue ;
65182: GO 65126
// for j in fac do
65184: LD_ADDR_VAR 0 3
65188: PUSH
65189: LD_VAR 0 5
65193: PUSH
65194: FOR_IN
65195: IFFALSE 65550
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
65197: LD_VAR 0 3
65201: PPUSH
65202: CALL_OW 461
65206: PUSH
65207: LD_INT 2
65209: NONEQUAL
65210: PUSH
65211: LD_VAR 0 3
65215: PPUSH
65216: LD_INT 15
65218: PPUSH
65219: CALL 21103 0 2
65223: PUSH
65224: LD_INT 4
65226: ARRAY
65227: OR
65228: IFFALSE 65232
// continue ;
65230: GO 65194
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
65232: LD_VAR 0 3
65236: PPUSH
65237: LD_EXP 86
65241: PUSH
65242: LD_VAR 0 2
65246: ARRAY
65247: PUSH
65248: LD_INT 1
65250: ARRAY
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PPUSH
65256: LD_EXP 86
65260: PUSH
65261: LD_VAR 0 2
65265: ARRAY
65266: PUSH
65267: LD_INT 1
65269: ARRAY
65270: PUSH
65271: LD_INT 2
65273: ARRAY
65274: PPUSH
65275: LD_EXP 86
65279: PUSH
65280: LD_VAR 0 2
65284: ARRAY
65285: PUSH
65286: LD_INT 1
65288: ARRAY
65289: PUSH
65290: LD_INT 3
65292: ARRAY
65293: PPUSH
65294: LD_EXP 86
65298: PUSH
65299: LD_VAR 0 2
65303: ARRAY
65304: PUSH
65305: LD_INT 1
65307: ARRAY
65308: PUSH
65309: LD_INT 4
65311: ARRAY
65312: PPUSH
65313: CALL_OW 448
65317: PUSH
65318: LD_VAR 0 3
65322: PPUSH
65323: LD_EXP 86
65327: PUSH
65328: LD_VAR 0 2
65332: ARRAY
65333: PUSH
65334: LD_INT 1
65336: ARRAY
65337: PUSH
65338: LD_INT 1
65340: ARRAY
65341: PUSH
65342: LD_EXP 86
65346: PUSH
65347: LD_VAR 0 2
65351: ARRAY
65352: PUSH
65353: LD_INT 1
65355: ARRAY
65356: PUSH
65357: LD_INT 2
65359: ARRAY
65360: PUSH
65361: LD_EXP 86
65365: PUSH
65366: LD_VAR 0 2
65370: ARRAY
65371: PUSH
65372: LD_INT 1
65374: ARRAY
65375: PUSH
65376: LD_INT 3
65378: ARRAY
65379: PUSH
65380: LD_EXP 86
65384: PUSH
65385: LD_VAR 0 2
65389: ARRAY
65390: PUSH
65391: LD_INT 1
65393: ARRAY
65394: PUSH
65395: LD_INT 4
65397: ARRAY
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: PPUSH
65405: CALL 24774 0 2
65409: AND
65410: IFFALSE 65548
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
65412: LD_VAR 0 3
65416: PPUSH
65417: LD_EXP 86
65421: PUSH
65422: LD_VAR 0 2
65426: ARRAY
65427: PUSH
65428: LD_INT 1
65430: ARRAY
65431: PUSH
65432: LD_INT 1
65434: ARRAY
65435: PPUSH
65436: LD_EXP 86
65440: PUSH
65441: LD_VAR 0 2
65445: ARRAY
65446: PUSH
65447: LD_INT 1
65449: ARRAY
65450: PUSH
65451: LD_INT 2
65453: ARRAY
65454: PPUSH
65455: LD_EXP 86
65459: PUSH
65460: LD_VAR 0 2
65464: ARRAY
65465: PUSH
65466: LD_INT 1
65468: ARRAY
65469: PUSH
65470: LD_INT 3
65472: ARRAY
65473: PPUSH
65474: LD_EXP 86
65478: PUSH
65479: LD_VAR 0 2
65483: ARRAY
65484: PUSH
65485: LD_INT 1
65487: ARRAY
65488: PUSH
65489: LD_INT 4
65491: ARRAY
65492: PPUSH
65493: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
65497: LD_ADDR_VAR 0 4
65501: PUSH
65502: LD_EXP 86
65506: PUSH
65507: LD_VAR 0 2
65511: ARRAY
65512: PPUSH
65513: LD_INT 1
65515: PPUSH
65516: CALL_OW 3
65520: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
65521: LD_ADDR_EXP 86
65525: PUSH
65526: LD_EXP 86
65530: PPUSH
65531: LD_VAR 0 2
65535: PPUSH
65536: LD_VAR 0 4
65540: PPUSH
65541: CALL_OW 1
65545: ST_TO_ADDR
// break ;
65546: GO 65550
// end ; end ;
65548: GO 65194
65550: POP
65551: POP
// end ;
65552: GO 65126
65554: POP
65555: POP
// end ;
65556: LD_VAR 0 1
65560: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
65561: LD_INT 0
65563: PPUSH
65564: PPUSH
65565: PPUSH
// if not mc_bases then
65566: LD_EXP 65
65570: NOT
65571: IFFALSE 65575
// exit ;
65573: GO 65664
// for i = 1 to mc_bases do
65575: LD_ADDR_VAR 0 2
65579: PUSH
65580: DOUBLE
65581: LD_INT 1
65583: DEC
65584: ST_TO_ADDR
65585: LD_EXP 65
65589: PUSH
65590: FOR_TO
65591: IFFALSE 65662
// begin if mc_attack [ i ] then
65593: LD_EXP 85
65597: PUSH
65598: LD_VAR 0 2
65602: ARRAY
65603: IFFALSE 65660
// begin tmp := mc_attack [ i ] [ 1 ] ;
65605: LD_ADDR_VAR 0 3
65609: PUSH
65610: LD_EXP 85
65614: PUSH
65615: LD_VAR 0 2
65619: ARRAY
65620: PUSH
65621: LD_INT 1
65623: ARRAY
65624: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65625: LD_ADDR_EXP 85
65629: PUSH
65630: LD_EXP 85
65634: PPUSH
65635: LD_VAR 0 2
65639: PPUSH
65640: EMPTY
65641: PPUSH
65642: CALL_OW 1
65646: ST_TO_ADDR
// Attack ( tmp ) ;
65647: LD_VAR 0 3
65651: PPUSH
65652: CALL 92923 0 1
// exit ;
65656: POP
65657: POP
65658: GO 65664
// end ; end ;
65660: GO 65590
65662: POP
65663: POP
// end ;
65664: LD_VAR 0 1
65668: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
65669: LD_INT 0
65671: PPUSH
65672: PPUSH
65673: PPUSH
65674: PPUSH
65675: PPUSH
65676: PPUSH
65677: PPUSH
// if not mc_bases then
65678: LD_EXP 65
65682: NOT
65683: IFFALSE 65687
// exit ;
65685: GO 66269
// for i = 1 to mc_bases do
65687: LD_ADDR_VAR 0 2
65691: PUSH
65692: DOUBLE
65693: LD_INT 1
65695: DEC
65696: ST_TO_ADDR
65697: LD_EXP 65
65701: PUSH
65702: FOR_TO
65703: IFFALSE 66267
// begin if not mc_bases [ i ] then
65705: LD_EXP 65
65709: PUSH
65710: LD_VAR 0 2
65714: ARRAY
65715: NOT
65716: IFFALSE 65720
// continue ;
65718: GO 65702
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
65720: LD_ADDR_VAR 0 7
65724: PUSH
65725: LD_EXP 65
65729: PUSH
65730: LD_VAR 0 2
65734: ARRAY
65735: PUSH
65736: LD_INT 1
65738: ARRAY
65739: PPUSH
65740: CALL 15346 0 1
65744: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
65745: LD_ADDR_EXP 88
65749: PUSH
65750: LD_EXP 88
65754: PPUSH
65755: LD_VAR 0 2
65759: PPUSH
65760: LD_EXP 65
65764: PUSH
65765: LD_VAR 0 2
65769: ARRAY
65770: PUSH
65771: LD_INT 1
65773: ARRAY
65774: PPUSH
65775: CALL_OW 255
65779: PPUSH
65780: LD_EXP 90
65784: PUSH
65785: LD_VAR 0 2
65789: ARRAY
65790: PPUSH
65791: CALL 15311 0 2
65795: PPUSH
65796: CALL_OW 1
65800: ST_TO_ADDR
// if not mc_scan [ i ] then
65801: LD_EXP 88
65805: PUSH
65806: LD_VAR 0 2
65810: ARRAY
65811: NOT
65812: IFFALSE 65967
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65814: LD_ADDR_VAR 0 4
65818: PUSH
65819: LD_EXP 65
65823: PUSH
65824: LD_VAR 0 2
65828: ARRAY
65829: PPUSH
65830: LD_INT 2
65832: PUSH
65833: LD_INT 25
65835: PUSH
65836: LD_INT 5
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 25
65845: PUSH
65846: LD_INT 8
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 25
65855: PUSH
65856: LD_INT 9
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: PPUSH
65869: CALL_OW 72
65873: ST_TO_ADDR
// if not tmp then
65874: LD_VAR 0 4
65878: NOT
65879: IFFALSE 65883
// continue ;
65881: GO 65702
// for j in tmp do
65883: LD_ADDR_VAR 0 3
65887: PUSH
65888: LD_VAR 0 4
65892: PUSH
65893: FOR_IN
65894: IFFALSE 65965
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
65896: LD_VAR 0 3
65900: PPUSH
65901: CALL_OW 310
65905: PPUSH
65906: CALL_OW 266
65910: PUSH
65911: LD_INT 5
65913: EQUAL
65914: PUSH
65915: LD_VAR 0 3
65919: PPUSH
65920: CALL_OW 257
65924: PUSH
65925: LD_INT 1
65927: EQUAL
65928: AND
65929: PUSH
65930: LD_VAR 0 3
65934: PPUSH
65935: CALL_OW 459
65939: NOT
65940: AND
65941: PUSH
65942: LD_VAR 0 7
65946: AND
65947: IFFALSE 65963
// ComChangeProfession ( j , class ) ;
65949: LD_VAR 0 3
65953: PPUSH
65954: LD_VAR 0 7
65958: PPUSH
65959: CALL_OW 123
65963: GO 65893
65965: POP
65966: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
65967: LD_EXP 88
65971: PUSH
65972: LD_VAR 0 2
65976: ARRAY
65977: PUSH
65978: LD_EXP 87
65982: PUSH
65983: LD_VAR 0 2
65987: ARRAY
65988: NOT
65989: AND
65990: PUSH
65991: LD_EXP 65
65995: PUSH
65996: LD_VAR 0 2
66000: ARRAY
66001: PPUSH
66002: LD_INT 30
66004: PUSH
66005: LD_INT 32
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PPUSH
66012: CALL_OW 72
66016: NOT
66017: AND
66018: PUSH
66019: LD_EXP 65
66023: PUSH
66024: LD_VAR 0 2
66028: ARRAY
66029: PPUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 30
66035: PUSH
66036: LD_INT 4
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 30
66045: PUSH
66046: LD_INT 5
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: PPUSH
66058: CALL_OW 72
66062: NOT
66063: AND
66064: IFFALSE 66196
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66066: LD_ADDR_VAR 0 4
66070: PUSH
66071: LD_EXP 65
66075: PUSH
66076: LD_VAR 0 2
66080: ARRAY
66081: PPUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 25
66087: PUSH
66088: LD_INT 1
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 25
66097: PUSH
66098: LD_INT 5
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 25
66107: PUSH
66108: LD_INT 8
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 25
66117: PUSH
66118: LD_INT 9
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: PPUSH
66132: CALL_OW 72
66136: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
66137: LD_ADDR_VAR 0 4
66141: PUSH
66142: LD_VAR 0 4
66146: PUSH
66147: LD_VAR 0 4
66151: PPUSH
66152: LD_INT 18
66154: PPUSH
66155: CALL 47071 0 2
66159: DIFF
66160: ST_TO_ADDR
// if tmp then
66161: LD_VAR 0 4
66165: IFFALSE 66196
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
66167: LD_VAR 0 2
66171: PPUSH
66172: LD_VAR 0 4
66176: PPUSH
66177: LD_EXP 90
66181: PUSH
66182: LD_VAR 0 2
66186: ARRAY
66187: PPUSH
66188: CALL 97632 0 3
// exit ;
66192: POP
66193: POP
66194: GO 66269
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
66196: LD_EXP 88
66200: PUSH
66201: LD_VAR 0 2
66205: ARRAY
66206: PUSH
66207: LD_EXP 87
66211: PUSH
66212: LD_VAR 0 2
66216: ARRAY
66217: AND
66218: IFFALSE 66265
// begin tmp := mc_defender [ i ] ;
66220: LD_ADDR_VAR 0 4
66224: PUSH
66225: LD_EXP 87
66229: PUSH
66230: LD_VAR 0 2
66234: ARRAY
66235: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
66236: LD_VAR 0 2
66240: PPUSH
66241: LD_VAR 0 4
66245: PPUSH
66246: LD_EXP 88
66250: PUSH
66251: LD_VAR 0 2
66255: ARRAY
66256: PPUSH
66257: CALL 98193 0 3
// exit ;
66261: POP
66262: POP
66263: GO 66269
// end ; end ;
66265: GO 65702
66267: POP
66268: POP
// end ;
66269: LD_VAR 0 1
66273: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
66274: LD_INT 0
66276: PPUSH
66277: PPUSH
66278: PPUSH
66279: PPUSH
66280: PPUSH
66281: PPUSH
66282: PPUSH
66283: PPUSH
66284: PPUSH
66285: PPUSH
66286: PPUSH
// if not mc_bases then
66287: LD_EXP 65
66291: NOT
66292: IFFALSE 66296
// exit ;
66294: GO 67383
// for i = 1 to mc_bases do
66296: LD_ADDR_VAR 0 2
66300: PUSH
66301: DOUBLE
66302: LD_INT 1
66304: DEC
66305: ST_TO_ADDR
66306: LD_EXP 65
66310: PUSH
66311: FOR_TO
66312: IFFALSE 67381
// begin tmp := mc_lab [ i ] ;
66314: LD_ADDR_VAR 0 6
66318: PUSH
66319: LD_EXP 98
66323: PUSH
66324: LD_VAR 0 2
66328: ARRAY
66329: ST_TO_ADDR
// if not tmp then
66330: LD_VAR 0 6
66334: NOT
66335: IFFALSE 66339
// continue ;
66337: GO 66311
// idle_lab := 0 ;
66339: LD_ADDR_VAR 0 11
66343: PUSH
66344: LD_INT 0
66346: ST_TO_ADDR
// for j in tmp do
66347: LD_ADDR_VAR 0 3
66351: PUSH
66352: LD_VAR 0 6
66356: PUSH
66357: FOR_IN
66358: IFFALSE 67377
// begin researching := false ;
66360: LD_ADDR_VAR 0 10
66364: PUSH
66365: LD_INT 0
66367: ST_TO_ADDR
// side := GetSide ( j ) ;
66368: LD_ADDR_VAR 0 4
66372: PUSH
66373: LD_VAR 0 3
66377: PPUSH
66378: CALL_OW 255
66382: ST_TO_ADDR
// if not mc_tech [ side ] then
66383: LD_EXP 92
66387: PUSH
66388: LD_VAR 0 4
66392: ARRAY
66393: NOT
66394: IFFALSE 66398
// continue ;
66396: GO 66357
// if BuildingStatus ( j ) = bs_idle then
66398: LD_VAR 0 3
66402: PPUSH
66403: CALL_OW 461
66407: PUSH
66408: LD_INT 2
66410: EQUAL
66411: IFFALSE 66599
// begin if idle_lab and UnitsInside ( j ) < 6 then
66413: LD_VAR 0 11
66417: PUSH
66418: LD_VAR 0 3
66422: PPUSH
66423: CALL_OW 313
66427: PUSH
66428: LD_INT 6
66430: LESS
66431: AND
66432: IFFALSE 66503
// begin tmp2 := UnitsInside ( idle_lab ) ;
66434: LD_ADDR_VAR 0 9
66438: PUSH
66439: LD_VAR 0 11
66443: PPUSH
66444: CALL_OW 313
66448: ST_TO_ADDR
// if tmp2 then
66449: LD_VAR 0 9
66453: IFFALSE 66495
// for x in tmp2 do
66455: LD_ADDR_VAR 0 7
66459: PUSH
66460: LD_VAR 0 9
66464: PUSH
66465: FOR_IN
66466: IFFALSE 66493
// begin ComExitBuilding ( x ) ;
66468: LD_VAR 0 7
66472: PPUSH
66473: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66477: LD_VAR 0 7
66481: PPUSH
66482: LD_VAR 0 3
66486: PPUSH
66487: CALL_OW 180
// end ;
66491: GO 66465
66493: POP
66494: POP
// idle_lab := 0 ;
66495: LD_ADDR_VAR 0 11
66499: PUSH
66500: LD_INT 0
66502: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
66503: LD_ADDR_VAR 0 5
66507: PUSH
66508: LD_EXP 92
66512: PUSH
66513: LD_VAR 0 4
66517: ARRAY
66518: PUSH
66519: FOR_IN
66520: IFFALSE 66580
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
66522: LD_VAR 0 3
66526: PPUSH
66527: LD_VAR 0 5
66531: PPUSH
66532: CALL_OW 430
66536: PUSH
66537: LD_VAR 0 4
66541: PPUSH
66542: LD_VAR 0 5
66546: PPUSH
66547: CALL 14416 0 2
66551: AND
66552: IFFALSE 66578
// begin researching := true ;
66554: LD_ADDR_VAR 0 10
66558: PUSH
66559: LD_INT 1
66561: ST_TO_ADDR
// ComResearch ( j , t ) ;
66562: LD_VAR 0 3
66566: PPUSH
66567: LD_VAR 0 5
66571: PPUSH
66572: CALL_OW 124
// break ;
66576: GO 66580
// end ;
66578: GO 66519
66580: POP
66581: POP
// if not researching then
66582: LD_VAR 0 10
66586: NOT
66587: IFFALSE 66599
// idle_lab := j ;
66589: LD_ADDR_VAR 0 11
66593: PUSH
66594: LD_VAR 0 3
66598: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
66599: LD_VAR 0 3
66603: PPUSH
66604: CALL_OW 461
66608: PUSH
66609: LD_INT 10
66611: EQUAL
66612: IFFALSE 67200
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
66614: LD_EXP 94
66618: PUSH
66619: LD_VAR 0 2
66623: ARRAY
66624: NOT
66625: PUSH
66626: LD_EXP 95
66630: PUSH
66631: LD_VAR 0 2
66635: ARRAY
66636: NOT
66637: AND
66638: PUSH
66639: LD_EXP 92
66643: PUSH
66644: LD_VAR 0 4
66648: ARRAY
66649: PUSH
66650: LD_INT 1
66652: GREATER
66653: AND
66654: IFFALSE 66785
// begin ComCancel ( j ) ;
66656: LD_VAR 0 3
66660: PPUSH
66661: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
66665: LD_ADDR_EXP 92
66669: PUSH
66670: LD_EXP 92
66674: PPUSH
66675: LD_VAR 0 4
66679: PPUSH
66680: LD_EXP 92
66684: PUSH
66685: LD_VAR 0 4
66689: ARRAY
66690: PPUSH
66691: LD_EXP 92
66695: PUSH
66696: LD_VAR 0 4
66700: ARRAY
66701: PUSH
66702: LD_INT 1
66704: MINUS
66705: PPUSH
66706: LD_EXP 92
66710: PUSH
66711: LD_VAR 0 4
66715: ARRAY
66716: PPUSH
66717: LD_INT 0
66719: PPUSH
66720: CALL 17928 0 4
66724: PPUSH
66725: CALL_OW 1
66729: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
66730: LD_ADDR_EXP 92
66734: PUSH
66735: LD_EXP 92
66739: PPUSH
66740: LD_VAR 0 4
66744: PPUSH
66745: LD_EXP 92
66749: PUSH
66750: LD_VAR 0 4
66754: ARRAY
66755: PPUSH
66756: LD_EXP 92
66760: PUSH
66761: LD_VAR 0 4
66765: ARRAY
66766: PPUSH
66767: LD_INT 1
66769: PPUSH
66770: LD_INT 0
66772: PPUSH
66773: CALL 17928 0 4
66777: PPUSH
66778: CALL_OW 1
66782: ST_TO_ADDR
// continue ;
66783: GO 66357
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
66785: LD_EXP 94
66789: PUSH
66790: LD_VAR 0 2
66794: ARRAY
66795: PUSH
66796: LD_EXP 95
66800: PUSH
66801: LD_VAR 0 2
66805: ARRAY
66806: NOT
66807: AND
66808: IFFALSE 66935
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
66810: LD_ADDR_EXP 95
66814: PUSH
66815: LD_EXP 95
66819: PPUSH
66820: LD_VAR 0 2
66824: PUSH
66825: LD_EXP 95
66829: PUSH
66830: LD_VAR 0 2
66834: ARRAY
66835: PUSH
66836: LD_INT 1
66838: PLUS
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PPUSH
66844: LD_EXP 94
66848: PUSH
66849: LD_VAR 0 2
66853: ARRAY
66854: PUSH
66855: LD_INT 1
66857: ARRAY
66858: PPUSH
66859: CALL 18510 0 3
66863: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
66864: LD_EXP 94
66868: PUSH
66869: LD_VAR 0 2
66873: ARRAY
66874: PUSH
66875: LD_INT 1
66877: ARRAY
66878: PPUSH
66879: LD_INT 112
66881: PPUSH
66882: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
66886: LD_ADDR_VAR 0 9
66890: PUSH
66891: LD_EXP 94
66895: PUSH
66896: LD_VAR 0 2
66900: ARRAY
66901: PPUSH
66902: LD_INT 1
66904: PPUSH
66905: CALL_OW 3
66909: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
66910: LD_ADDR_EXP 94
66914: PUSH
66915: LD_EXP 94
66919: PPUSH
66920: LD_VAR 0 2
66924: PPUSH
66925: LD_VAR 0 9
66929: PPUSH
66930: CALL_OW 1
66934: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
66935: LD_EXP 94
66939: PUSH
66940: LD_VAR 0 2
66944: ARRAY
66945: PUSH
66946: LD_EXP 95
66950: PUSH
66951: LD_VAR 0 2
66955: ARRAY
66956: AND
66957: PUSH
66958: LD_EXP 95
66962: PUSH
66963: LD_VAR 0 2
66967: ARRAY
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: PPUSH
66973: CALL_OW 310
66977: NOT
66978: AND
66979: PUSH
66980: LD_VAR 0 3
66984: PPUSH
66985: CALL_OW 313
66989: PUSH
66990: LD_INT 6
66992: EQUAL
66993: AND
66994: IFFALSE 67050
// begin tmp2 := UnitsInside ( j ) ;
66996: LD_ADDR_VAR 0 9
67000: PUSH
67001: LD_VAR 0 3
67005: PPUSH
67006: CALL_OW 313
67010: ST_TO_ADDR
// if tmp2 = 6 then
67011: LD_VAR 0 9
67015: PUSH
67016: LD_INT 6
67018: EQUAL
67019: IFFALSE 67050
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
67021: LD_VAR 0 9
67025: PUSH
67026: LD_INT 1
67028: ARRAY
67029: PPUSH
67030: LD_INT 112
67032: PPUSH
67033: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
67037: LD_VAR 0 9
67041: PUSH
67042: LD_INT 1
67044: ARRAY
67045: PPUSH
67046: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
67050: LD_EXP 95
67054: PUSH
67055: LD_VAR 0 2
67059: ARRAY
67060: PUSH
67061: LD_EXP 95
67065: PUSH
67066: LD_VAR 0 2
67070: ARRAY
67071: PUSH
67072: LD_INT 1
67074: ARRAY
67075: PPUSH
67076: CALL_OW 314
67080: NOT
67081: AND
67082: PUSH
67083: LD_EXP 95
67087: PUSH
67088: LD_VAR 0 2
67092: ARRAY
67093: PUSH
67094: LD_INT 1
67096: ARRAY
67097: PPUSH
67098: CALL_OW 310
67102: NOT
67103: AND
67104: IFFALSE 67130
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
67106: LD_EXP 95
67110: PUSH
67111: LD_VAR 0 2
67115: ARRAY
67116: PUSH
67117: LD_INT 1
67119: ARRAY
67120: PPUSH
67121: LD_VAR 0 3
67125: PPUSH
67126: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
67130: LD_EXP 95
67134: PUSH
67135: LD_VAR 0 2
67139: ARRAY
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PPUSH
67145: CALL_OW 310
67149: PUSH
67150: LD_EXP 95
67154: PUSH
67155: LD_VAR 0 2
67159: ARRAY
67160: PUSH
67161: LD_INT 1
67163: ARRAY
67164: PPUSH
67165: CALL_OW 310
67169: PPUSH
67170: CALL_OW 461
67174: PUSH
67175: LD_INT 3
67177: NONEQUAL
67178: AND
67179: IFFALSE 67200
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
67181: LD_EXP 95
67185: PUSH
67186: LD_VAR 0 2
67190: ARRAY
67191: PUSH
67192: LD_INT 1
67194: ARRAY
67195: PPUSH
67196: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
67200: LD_VAR 0 3
67204: PPUSH
67205: CALL_OW 461
67209: PUSH
67210: LD_INT 6
67212: EQUAL
67213: PUSH
67214: LD_VAR 0 6
67218: PUSH
67219: LD_INT 1
67221: GREATER
67222: AND
67223: IFFALSE 67375
// begin sci := [ ] ;
67225: LD_ADDR_VAR 0 8
67229: PUSH
67230: EMPTY
67231: ST_TO_ADDR
// for x in ( tmp diff j ) do
67232: LD_ADDR_VAR 0 7
67236: PUSH
67237: LD_VAR 0 6
67241: PUSH
67242: LD_VAR 0 3
67246: DIFF
67247: PUSH
67248: FOR_IN
67249: IFFALSE 67301
// begin if sci = 6 then
67251: LD_VAR 0 8
67255: PUSH
67256: LD_INT 6
67258: EQUAL
67259: IFFALSE 67263
// break ;
67261: GO 67301
// if BuildingStatus ( x ) = bs_idle then
67263: LD_VAR 0 7
67267: PPUSH
67268: CALL_OW 461
67272: PUSH
67273: LD_INT 2
67275: EQUAL
67276: IFFALSE 67299
// sci := sci ^ UnitsInside ( x ) ;
67278: LD_ADDR_VAR 0 8
67282: PUSH
67283: LD_VAR 0 8
67287: PUSH
67288: LD_VAR 0 7
67292: PPUSH
67293: CALL_OW 313
67297: ADD
67298: ST_TO_ADDR
// end ;
67299: GO 67248
67301: POP
67302: POP
// if not sci then
67303: LD_VAR 0 8
67307: NOT
67308: IFFALSE 67312
// continue ;
67310: GO 66357
// for x in sci do
67312: LD_ADDR_VAR 0 7
67316: PUSH
67317: LD_VAR 0 8
67321: PUSH
67322: FOR_IN
67323: IFFALSE 67373
// if IsInUnit ( x ) and not HasTask ( x ) then
67325: LD_VAR 0 7
67329: PPUSH
67330: CALL_OW 310
67334: PUSH
67335: LD_VAR 0 7
67339: PPUSH
67340: CALL_OW 314
67344: NOT
67345: AND
67346: IFFALSE 67371
// begin ComExitBuilding ( x ) ;
67348: LD_VAR 0 7
67352: PPUSH
67353: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
67357: LD_VAR 0 7
67361: PPUSH
67362: LD_VAR 0 3
67366: PPUSH
67367: CALL_OW 180
// end ;
67371: GO 67322
67373: POP
67374: POP
// end ; end ;
67375: GO 66357
67377: POP
67378: POP
// end ;
67379: GO 66311
67381: POP
67382: POP
// end ;
67383: LD_VAR 0 1
67387: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
67388: LD_INT 0
67390: PPUSH
67391: PPUSH
// if not mc_bases then
67392: LD_EXP 65
67396: NOT
67397: IFFALSE 67401
// exit ;
67399: GO 67482
// for i = 1 to mc_bases do
67401: LD_ADDR_VAR 0 2
67405: PUSH
67406: DOUBLE
67407: LD_INT 1
67409: DEC
67410: ST_TO_ADDR
67411: LD_EXP 65
67415: PUSH
67416: FOR_TO
67417: IFFALSE 67480
// if mc_mines [ i ] and mc_miners [ i ] then
67419: LD_EXP 78
67423: PUSH
67424: LD_VAR 0 2
67428: ARRAY
67429: PUSH
67430: LD_EXP 79
67434: PUSH
67435: LD_VAR 0 2
67439: ARRAY
67440: AND
67441: IFFALSE 67478
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
67443: LD_EXP 79
67447: PUSH
67448: LD_VAR 0 2
67452: ARRAY
67453: PUSH
67454: LD_INT 1
67456: ARRAY
67457: PPUSH
67458: CALL_OW 255
67462: PPUSH
67463: LD_EXP 78
67467: PUSH
67468: LD_VAR 0 2
67472: ARRAY
67473: PPUSH
67474: CALL 15499 0 2
67478: GO 67416
67480: POP
67481: POP
// end ;
67482: LD_VAR 0 1
67486: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
67487: LD_INT 0
67489: PPUSH
67490: PPUSH
67491: PPUSH
67492: PPUSH
67493: PPUSH
67494: PPUSH
67495: PPUSH
67496: PPUSH
// if not mc_bases or not mc_parking then
67497: LD_EXP 65
67501: NOT
67502: PUSH
67503: LD_EXP 89
67507: NOT
67508: OR
67509: IFFALSE 67513
// exit ;
67511: GO 68212
// for i = 1 to mc_bases do
67513: LD_ADDR_VAR 0 2
67517: PUSH
67518: DOUBLE
67519: LD_INT 1
67521: DEC
67522: ST_TO_ADDR
67523: LD_EXP 65
67527: PUSH
67528: FOR_TO
67529: IFFALSE 68210
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
67531: LD_EXP 65
67535: PUSH
67536: LD_VAR 0 2
67540: ARRAY
67541: NOT
67542: PUSH
67543: LD_EXP 89
67547: PUSH
67548: LD_VAR 0 2
67552: ARRAY
67553: NOT
67554: OR
67555: IFFALSE 67559
// continue ;
67557: GO 67528
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
67559: LD_ADDR_VAR 0 5
67563: PUSH
67564: LD_EXP 65
67568: PUSH
67569: LD_VAR 0 2
67573: ARRAY
67574: PUSH
67575: LD_INT 1
67577: ARRAY
67578: PPUSH
67579: CALL_OW 255
67583: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67584: LD_ADDR_VAR 0 6
67588: PUSH
67589: LD_EXP 65
67593: PUSH
67594: LD_VAR 0 2
67598: ARRAY
67599: PPUSH
67600: LD_INT 30
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PPUSH
67610: CALL_OW 72
67614: ST_TO_ADDR
// if not fac then
67615: LD_VAR 0 6
67619: NOT
67620: IFFALSE 67671
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67622: LD_ADDR_VAR 0 6
67626: PUSH
67627: LD_EXP 65
67631: PUSH
67632: LD_VAR 0 2
67636: ARRAY
67637: PPUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 30
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 30
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: PPUSH
67666: CALL_OW 72
67670: ST_TO_ADDR
// if not fac then
67671: LD_VAR 0 6
67675: NOT
67676: IFFALSE 67680
// continue ;
67678: GO 67528
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67680: LD_ADDR_VAR 0 7
67684: PUSH
67685: LD_EXP 89
67689: PUSH
67690: LD_VAR 0 2
67694: ARRAY
67695: PPUSH
67696: LD_INT 22
67698: PUSH
67699: LD_VAR 0 5
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 21
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 3
67720: PUSH
67721: LD_INT 24
67723: PUSH
67724: LD_INT 1000
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: PPUSH
67740: CALL_OW 70
67744: ST_TO_ADDR
// for j in fac do
67745: LD_ADDR_VAR 0 3
67749: PUSH
67750: LD_VAR 0 6
67754: PUSH
67755: FOR_IN
67756: IFFALSE 67837
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67758: LD_ADDR_VAR 0 7
67762: PUSH
67763: LD_VAR 0 7
67767: PUSH
67768: LD_INT 22
67770: PUSH
67771: LD_VAR 0 5
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 91
67782: PUSH
67783: LD_VAR 0 3
67787: PUSH
67788: LD_INT 15
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 21
67798: PUSH
67799: LD_INT 2
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: LD_INT 24
67811: PUSH
67812: LD_INT 1000
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: PPUSH
67829: CALL_OW 69
67833: UNION
67834: ST_TO_ADDR
67835: GO 67755
67837: POP
67838: POP
// if not vehs then
67839: LD_VAR 0 7
67843: NOT
67844: IFFALSE 67870
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
67846: LD_ADDR_EXP 77
67850: PUSH
67851: LD_EXP 77
67855: PPUSH
67856: LD_VAR 0 2
67860: PPUSH
67861: EMPTY
67862: PPUSH
67863: CALL_OW 1
67867: ST_TO_ADDR
// continue ;
67868: GO 67528
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67870: LD_ADDR_VAR 0 8
67874: PUSH
67875: LD_EXP 65
67879: PUSH
67880: LD_VAR 0 2
67884: ARRAY
67885: PPUSH
67886: LD_INT 30
67888: PUSH
67889: LD_INT 3
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PPUSH
67896: CALL_OW 72
67900: ST_TO_ADDR
// if tmp then
67901: LD_VAR 0 8
67905: IFFALSE 68008
// begin for j in tmp do
67907: LD_ADDR_VAR 0 3
67911: PUSH
67912: LD_VAR 0 8
67916: PUSH
67917: FOR_IN
67918: IFFALSE 68006
// for k in UnitsInside ( j ) do
67920: LD_ADDR_VAR 0 4
67924: PUSH
67925: LD_VAR 0 3
67929: PPUSH
67930: CALL_OW 313
67934: PUSH
67935: FOR_IN
67936: IFFALSE 68002
// if k then
67938: LD_VAR 0 4
67942: IFFALSE 68000
// if not k in mc_repair_vehicle [ i ] then
67944: LD_VAR 0 4
67948: PUSH
67949: LD_EXP 77
67953: PUSH
67954: LD_VAR 0 2
67958: ARRAY
67959: IN
67960: NOT
67961: IFFALSE 68000
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
67963: LD_ADDR_EXP 77
67967: PUSH
67968: LD_EXP 77
67972: PPUSH
67973: LD_VAR 0 2
67977: PPUSH
67978: LD_EXP 77
67982: PUSH
67983: LD_VAR 0 2
67987: ARRAY
67988: PUSH
67989: LD_VAR 0 4
67993: UNION
67994: PPUSH
67995: CALL_OW 1
67999: ST_TO_ADDR
68000: GO 67935
68002: POP
68003: POP
68004: GO 67917
68006: POP
68007: POP
// end ; if not mc_repair_vehicle [ i ] then
68008: LD_EXP 77
68012: PUSH
68013: LD_VAR 0 2
68017: ARRAY
68018: NOT
68019: IFFALSE 68023
// continue ;
68021: GO 67528
// for j in mc_repair_vehicle [ i ] do
68023: LD_ADDR_VAR 0 3
68027: PUSH
68028: LD_EXP 77
68032: PUSH
68033: LD_VAR 0 2
68037: ARRAY
68038: PUSH
68039: FOR_IN
68040: IFFALSE 68206
// begin if GetClass ( j ) <> 3 then
68042: LD_VAR 0 3
68046: PPUSH
68047: CALL_OW 257
68051: PUSH
68052: LD_INT 3
68054: NONEQUAL
68055: IFFALSE 68096
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
68057: LD_ADDR_EXP 77
68061: PUSH
68062: LD_EXP 77
68066: PPUSH
68067: LD_VAR 0 2
68071: PPUSH
68072: LD_EXP 77
68076: PUSH
68077: LD_VAR 0 2
68081: ARRAY
68082: PUSH
68083: LD_VAR 0 3
68087: DIFF
68088: PPUSH
68089: CALL_OW 1
68093: ST_TO_ADDR
// continue ;
68094: GO 68039
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
68096: LD_VAR 0 3
68100: PPUSH
68101: CALL_OW 311
68105: NOT
68106: PUSH
68107: LD_VAR 0 3
68111: PUSH
68112: LD_EXP 68
68116: PUSH
68117: LD_VAR 0 2
68121: ARRAY
68122: PUSH
68123: LD_INT 1
68125: ARRAY
68126: IN
68127: NOT
68128: AND
68129: PUSH
68130: LD_VAR 0 3
68134: PUSH
68135: LD_EXP 68
68139: PUSH
68140: LD_VAR 0 2
68144: ARRAY
68145: PUSH
68146: LD_INT 2
68148: ARRAY
68149: IN
68150: NOT
68151: AND
68152: IFFALSE 68204
// begin if IsInUnit ( j ) then
68154: LD_VAR 0 3
68158: PPUSH
68159: CALL_OW 310
68163: IFFALSE 68174
// ComExitBuilding ( j ) ;
68165: LD_VAR 0 3
68169: PPUSH
68170: CALL_OW 122
// if not HasTask ( j ) then
68174: LD_VAR 0 3
68178: PPUSH
68179: CALL_OW 314
68183: NOT
68184: IFFALSE 68204
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
68186: LD_VAR 0 3
68190: PPUSH
68191: LD_VAR 0 7
68195: PUSH
68196: LD_INT 1
68198: ARRAY
68199: PPUSH
68200: CALL_OW 189
// end ; end ;
68204: GO 68039
68206: POP
68207: POP
// end ;
68208: GO 67528
68210: POP
68211: POP
// end ;
68212: LD_VAR 0 1
68216: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
68217: LD_INT 0
68219: PPUSH
68220: PPUSH
68221: PPUSH
68222: PPUSH
68223: PPUSH
68224: PPUSH
68225: PPUSH
68226: PPUSH
68227: PPUSH
68228: PPUSH
68229: PPUSH
// if not mc_bases then
68230: LD_EXP 65
68234: NOT
68235: IFFALSE 68239
// exit ;
68237: GO 69041
// for i = 1 to mc_bases do
68239: LD_ADDR_VAR 0 2
68243: PUSH
68244: DOUBLE
68245: LD_INT 1
68247: DEC
68248: ST_TO_ADDR
68249: LD_EXP 65
68253: PUSH
68254: FOR_TO
68255: IFFALSE 69039
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
68257: LD_EXP 93
68261: PUSH
68262: LD_VAR 0 2
68266: ARRAY
68267: NOT
68268: PUSH
68269: LD_EXP 68
68273: PUSH
68274: LD_VAR 0 2
68278: ARRAY
68279: PUSH
68280: LD_INT 1
68282: ARRAY
68283: OR
68284: PUSH
68285: LD_EXP 68
68289: PUSH
68290: LD_VAR 0 2
68294: ARRAY
68295: PUSH
68296: LD_INT 2
68298: ARRAY
68299: OR
68300: PUSH
68301: LD_EXP 91
68305: PUSH
68306: LD_VAR 0 2
68310: ARRAY
68311: PPUSH
68312: LD_INT 1
68314: PPUSH
68315: CALL_OW 325
68319: NOT
68320: OR
68321: PUSH
68322: LD_EXP 88
68326: PUSH
68327: LD_VAR 0 2
68331: ARRAY
68332: OR
68333: IFFALSE 68337
// continue ;
68335: GO 68254
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
68337: LD_ADDR_VAR 0 8
68341: PUSH
68342: LD_EXP 65
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PPUSH
68353: LD_INT 25
68355: PUSH
68356: LD_INT 4
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 50
68365: PUSH
68366: EMPTY
68367: LIST
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: LD_INT 60
68374: PUSH
68375: EMPTY
68376: LIST
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: LIST
68386: PPUSH
68387: CALL_OW 72
68391: PUSH
68392: LD_EXP 69
68396: PUSH
68397: LD_VAR 0 2
68401: ARRAY
68402: DIFF
68403: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68404: LD_ADDR_VAR 0 9
68408: PUSH
68409: LD_EXP 65
68413: PUSH
68414: LD_VAR 0 2
68418: ARRAY
68419: PPUSH
68420: LD_INT 2
68422: PUSH
68423: LD_INT 30
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 30
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: PPUSH
68448: CALL_OW 72
68452: ST_TO_ADDR
// if not tmp or not dep then
68453: LD_VAR 0 8
68457: NOT
68458: PUSH
68459: LD_VAR 0 9
68463: NOT
68464: OR
68465: IFFALSE 68469
// continue ;
68467: GO 68254
// side := GetSide ( tmp [ 1 ] ) ;
68469: LD_ADDR_VAR 0 11
68473: PUSH
68474: LD_VAR 0 8
68478: PUSH
68479: LD_INT 1
68481: ARRAY
68482: PPUSH
68483: CALL_OW 255
68487: ST_TO_ADDR
// dep := dep [ 1 ] ;
68488: LD_ADDR_VAR 0 9
68492: PUSH
68493: LD_VAR 0 9
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
68502: LD_ADDR_VAR 0 7
68506: PUSH
68507: LD_EXP 93
68511: PUSH
68512: LD_VAR 0 2
68516: ARRAY
68517: PPUSH
68518: LD_INT 22
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 25
68530: PUSH
68531: LD_INT 12
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PPUSH
68542: CALL_OW 70
68546: PUSH
68547: LD_INT 22
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 25
68559: PUSH
68560: LD_INT 12
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 91
68569: PUSH
68570: LD_VAR 0 9
68574: PUSH
68575: LD_INT 20
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: LIST
68587: PPUSH
68588: CALL_OW 69
68592: UNION
68593: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
68594: LD_ADDR_VAR 0 10
68598: PUSH
68599: LD_EXP 93
68603: PUSH
68604: LD_VAR 0 2
68608: ARRAY
68609: PPUSH
68610: LD_INT 81
68612: PUSH
68613: LD_VAR 0 11
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PPUSH
68622: CALL_OW 70
68626: ST_TO_ADDR
// if not apes or danger_at_area then
68627: LD_VAR 0 7
68631: NOT
68632: PUSH
68633: LD_VAR 0 10
68637: OR
68638: IFFALSE 68688
// begin if mc_taming [ i ] then
68640: LD_EXP 96
68644: PUSH
68645: LD_VAR 0 2
68649: ARRAY
68650: IFFALSE 68686
// begin MC_Reset ( i , 121 ) ;
68652: LD_VAR 0 2
68656: PPUSH
68657: LD_INT 121
68659: PPUSH
68660: CALL 54139 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68664: LD_ADDR_EXP 96
68668: PUSH
68669: LD_EXP 96
68673: PPUSH
68674: LD_VAR 0 2
68678: PPUSH
68679: EMPTY
68680: PPUSH
68681: CALL_OW 1
68685: ST_TO_ADDR
// end ; continue ;
68686: GO 68254
// end ; for j in tmp do
68688: LD_ADDR_VAR 0 3
68692: PUSH
68693: LD_VAR 0 8
68697: PUSH
68698: FOR_IN
68699: IFFALSE 69035
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
68701: LD_VAR 0 3
68705: PUSH
68706: LD_EXP 96
68710: PUSH
68711: LD_VAR 0 2
68715: ARRAY
68716: IN
68717: NOT
68718: PUSH
68719: LD_EXP 96
68723: PUSH
68724: LD_VAR 0 2
68728: ARRAY
68729: PUSH
68730: LD_INT 3
68732: LESS
68733: AND
68734: IFFALSE 68792
// begin SetTag ( j , 121 ) ;
68736: LD_VAR 0 3
68740: PPUSH
68741: LD_INT 121
68743: PPUSH
68744: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
68748: LD_ADDR_EXP 96
68752: PUSH
68753: LD_EXP 96
68757: PPUSH
68758: LD_VAR 0 2
68762: PUSH
68763: LD_EXP 96
68767: PUSH
68768: LD_VAR 0 2
68772: ARRAY
68773: PUSH
68774: LD_INT 1
68776: PLUS
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PPUSH
68782: LD_VAR 0 3
68786: PPUSH
68787: CALL 18510 0 3
68791: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
68792: LD_VAR 0 3
68796: PUSH
68797: LD_EXP 96
68801: PUSH
68802: LD_VAR 0 2
68806: ARRAY
68807: IN
68808: IFFALSE 69033
// begin if GetClass ( j ) <> 4 then
68810: LD_VAR 0 3
68814: PPUSH
68815: CALL_OW 257
68819: PUSH
68820: LD_INT 4
68822: NONEQUAL
68823: IFFALSE 68876
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
68825: LD_ADDR_EXP 96
68829: PUSH
68830: LD_EXP 96
68834: PPUSH
68835: LD_VAR 0 2
68839: PPUSH
68840: LD_EXP 96
68844: PUSH
68845: LD_VAR 0 2
68849: ARRAY
68850: PUSH
68851: LD_VAR 0 3
68855: DIFF
68856: PPUSH
68857: CALL_OW 1
68861: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68862: LD_VAR 0 3
68866: PPUSH
68867: LD_INT 0
68869: PPUSH
68870: CALL_OW 109
// continue ;
68874: GO 68698
// end ; if IsInUnit ( j ) then
68876: LD_VAR 0 3
68880: PPUSH
68881: CALL_OW 310
68885: IFFALSE 68896
// ComExitBuilding ( j ) ;
68887: LD_VAR 0 3
68891: PPUSH
68892: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
68896: LD_ADDR_VAR 0 6
68900: PUSH
68901: LD_VAR 0 7
68905: PPUSH
68906: LD_VAR 0 3
68910: PPUSH
68911: CALL_OW 74
68915: ST_TO_ADDR
// if not ape then
68916: LD_VAR 0 6
68920: NOT
68921: IFFALSE 68925
// break ;
68923: GO 69035
// x := GetX ( ape ) ;
68925: LD_ADDR_VAR 0 4
68929: PUSH
68930: LD_VAR 0 6
68934: PPUSH
68935: CALL_OW 250
68939: ST_TO_ADDR
// y := GetY ( ape ) ;
68940: LD_ADDR_VAR 0 5
68944: PUSH
68945: LD_VAR 0 6
68949: PPUSH
68950: CALL_OW 251
68954: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68955: LD_VAR 0 4
68959: PPUSH
68960: LD_VAR 0 5
68964: PPUSH
68965: CALL_OW 488
68969: NOT
68970: PUSH
68971: LD_VAR 0 11
68975: PPUSH
68976: LD_VAR 0 4
68980: PPUSH
68981: LD_VAR 0 5
68985: PPUSH
68986: LD_INT 20
68988: PPUSH
68989: CALL 19406 0 4
68993: PUSH
68994: LD_INT 4
68996: ARRAY
68997: OR
68998: IFFALSE 69002
// break ;
69000: GO 69035
// if not HasTask ( j ) then
69002: LD_VAR 0 3
69006: PPUSH
69007: CALL_OW 314
69011: NOT
69012: IFFALSE 69033
// ComTameXY ( j , x , y ) ;
69014: LD_VAR 0 3
69018: PPUSH
69019: LD_VAR 0 4
69023: PPUSH
69024: LD_VAR 0 5
69028: PPUSH
69029: CALL_OW 131
// end ; end ;
69033: GO 68698
69035: POP
69036: POP
// end ;
69037: GO 68254
69039: POP
69040: POP
// end ;
69041: LD_VAR 0 1
69045: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
69046: LD_INT 0
69048: PPUSH
69049: PPUSH
69050: PPUSH
69051: PPUSH
69052: PPUSH
69053: PPUSH
69054: PPUSH
69055: PPUSH
// if not mc_bases then
69056: LD_EXP 65
69060: NOT
69061: IFFALSE 69065
// exit ;
69063: GO 69691
// for i = 1 to mc_bases do
69065: LD_ADDR_VAR 0 2
69069: PUSH
69070: DOUBLE
69071: LD_INT 1
69073: DEC
69074: ST_TO_ADDR
69075: LD_EXP 65
69079: PUSH
69080: FOR_TO
69081: IFFALSE 69689
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
69083: LD_EXP 94
69087: PUSH
69088: LD_VAR 0 2
69092: ARRAY
69093: NOT
69094: PUSH
69095: LD_EXP 94
69099: PUSH
69100: LD_VAR 0 2
69104: ARRAY
69105: PPUSH
69106: LD_INT 25
69108: PUSH
69109: LD_INT 12
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PPUSH
69116: CALL_OW 72
69120: NOT
69121: OR
69122: IFFALSE 69126
// continue ;
69124: GO 69080
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
69126: LD_ADDR_VAR 0 5
69130: PUSH
69131: LD_EXP 94
69135: PUSH
69136: LD_VAR 0 2
69140: ARRAY
69141: PUSH
69142: LD_INT 1
69144: ARRAY
69145: PPUSH
69146: CALL_OW 255
69150: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
69151: LD_VAR 0 5
69155: PPUSH
69156: LD_INT 2
69158: PPUSH
69159: CALL_OW 325
69163: IFFALSE 69416
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69165: LD_ADDR_VAR 0 4
69169: PUSH
69170: LD_EXP 94
69174: PUSH
69175: LD_VAR 0 2
69179: ARRAY
69180: PPUSH
69181: LD_INT 25
69183: PUSH
69184: LD_INT 16
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PPUSH
69191: CALL_OW 72
69195: ST_TO_ADDR
// if tmp < 6 then
69196: LD_VAR 0 4
69200: PUSH
69201: LD_INT 6
69203: LESS
69204: IFFALSE 69416
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69206: LD_ADDR_VAR 0 6
69210: PUSH
69211: LD_EXP 65
69215: PUSH
69216: LD_VAR 0 2
69220: ARRAY
69221: PPUSH
69222: LD_INT 2
69224: PUSH
69225: LD_INT 30
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 30
69237: PUSH
69238: LD_INT 1
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: LIST
69249: PPUSH
69250: CALL_OW 72
69254: ST_TO_ADDR
// if depot then
69255: LD_VAR 0 6
69259: IFFALSE 69416
// begin selected := 0 ;
69261: LD_ADDR_VAR 0 7
69265: PUSH
69266: LD_INT 0
69268: ST_TO_ADDR
// for j in depot do
69269: LD_ADDR_VAR 0 3
69273: PUSH
69274: LD_VAR 0 6
69278: PUSH
69279: FOR_IN
69280: IFFALSE 69311
// begin if UnitsInside ( j ) < 6 then
69282: LD_VAR 0 3
69286: PPUSH
69287: CALL_OW 313
69291: PUSH
69292: LD_INT 6
69294: LESS
69295: IFFALSE 69309
// begin selected := j ;
69297: LD_ADDR_VAR 0 7
69301: PUSH
69302: LD_VAR 0 3
69306: ST_TO_ADDR
// break ;
69307: GO 69311
// end ; end ;
69309: GO 69279
69311: POP
69312: POP
// if selected then
69313: LD_VAR 0 7
69317: IFFALSE 69416
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69319: LD_ADDR_VAR 0 3
69323: PUSH
69324: LD_EXP 94
69328: PUSH
69329: LD_VAR 0 2
69333: ARRAY
69334: PPUSH
69335: LD_INT 25
69337: PUSH
69338: LD_INT 12
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PPUSH
69345: CALL_OW 72
69349: PUSH
69350: FOR_IN
69351: IFFALSE 69414
// if not HasTask ( j ) then
69353: LD_VAR 0 3
69357: PPUSH
69358: CALL_OW 314
69362: NOT
69363: IFFALSE 69412
// begin if not IsInUnit ( j ) then
69365: LD_VAR 0 3
69369: PPUSH
69370: CALL_OW 310
69374: NOT
69375: IFFALSE 69391
// ComEnterUnit ( j , selected ) ;
69377: LD_VAR 0 3
69381: PPUSH
69382: LD_VAR 0 7
69386: PPUSH
69387: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
69391: LD_VAR 0 3
69395: PPUSH
69396: LD_INT 16
69398: PPUSH
69399: CALL_OW 183
// AddComExitBuilding ( j ) ;
69403: LD_VAR 0 3
69407: PPUSH
69408: CALL_OW 182
// end ;
69412: GO 69350
69414: POP
69415: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
69416: LD_VAR 0 5
69420: PPUSH
69421: LD_INT 11
69423: PPUSH
69424: CALL_OW 325
69428: IFFALSE 69687
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69430: LD_ADDR_VAR 0 4
69434: PUSH
69435: LD_EXP 94
69439: PUSH
69440: LD_VAR 0 2
69444: ARRAY
69445: PPUSH
69446: LD_INT 25
69448: PUSH
69449: LD_INT 16
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PPUSH
69456: CALL_OW 72
69460: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
69461: LD_VAR 0 4
69465: PUSH
69466: LD_INT 6
69468: GREATEREQUAL
69469: PUSH
69470: LD_VAR 0 5
69474: PPUSH
69475: LD_INT 2
69477: PPUSH
69478: CALL_OW 325
69482: NOT
69483: OR
69484: IFFALSE 69687
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
69486: LD_ADDR_VAR 0 8
69490: PUSH
69491: LD_EXP 65
69495: PUSH
69496: LD_VAR 0 2
69500: ARRAY
69501: PPUSH
69502: LD_INT 2
69504: PUSH
69505: LD_INT 30
69507: PUSH
69508: LD_INT 4
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 30
69517: PUSH
69518: LD_INT 5
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: LIST
69529: PPUSH
69530: CALL_OW 72
69534: ST_TO_ADDR
// if barracks then
69535: LD_VAR 0 8
69539: IFFALSE 69687
// begin selected := 0 ;
69541: LD_ADDR_VAR 0 7
69545: PUSH
69546: LD_INT 0
69548: ST_TO_ADDR
// for j in barracks do
69549: LD_ADDR_VAR 0 3
69553: PUSH
69554: LD_VAR 0 8
69558: PUSH
69559: FOR_IN
69560: IFFALSE 69591
// begin if UnitsInside ( j ) < 6 then
69562: LD_VAR 0 3
69566: PPUSH
69567: CALL_OW 313
69571: PUSH
69572: LD_INT 6
69574: LESS
69575: IFFALSE 69589
// begin selected := j ;
69577: LD_ADDR_VAR 0 7
69581: PUSH
69582: LD_VAR 0 3
69586: ST_TO_ADDR
// break ;
69587: GO 69591
// end ; end ;
69589: GO 69559
69591: POP
69592: POP
// if selected then
69593: LD_VAR 0 7
69597: IFFALSE 69687
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69599: LD_ADDR_VAR 0 3
69603: PUSH
69604: LD_EXP 94
69608: PUSH
69609: LD_VAR 0 2
69613: ARRAY
69614: PPUSH
69615: LD_INT 25
69617: PUSH
69618: LD_INT 12
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PPUSH
69625: CALL_OW 72
69629: PUSH
69630: FOR_IN
69631: IFFALSE 69685
// if not IsInUnit ( j ) and not HasTask ( j ) then
69633: LD_VAR 0 3
69637: PPUSH
69638: CALL_OW 310
69642: NOT
69643: PUSH
69644: LD_VAR 0 3
69648: PPUSH
69649: CALL_OW 314
69653: NOT
69654: AND
69655: IFFALSE 69683
// begin ComEnterUnit ( j , selected ) ;
69657: LD_VAR 0 3
69661: PPUSH
69662: LD_VAR 0 7
69666: PPUSH
69667: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
69671: LD_VAR 0 3
69675: PPUSH
69676: LD_INT 15
69678: PPUSH
69679: CALL_OW 183
// end ;
69683: GO 69630
69685: POP
69686: POP
// end ; end ; end ; end ; end ;
69687: GO 69080
69689: POP
69690: POP
// end ;
69691: LD_VAR 0 1
69695: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
69696: LD_INT 0
69698: PPUSH
69699: PPUSH
69700: PPUSH
69701: PPUSH
// if not mc_bases then
69702: LD_EXP 65
69706: NOT
69707: IFFALSE 69711
// exit ;
69709: GO 69889
// for i = 1 to mc_bases do
69711: LD_ADDR_VAR 0 2
69715: PUSH
69716: DOUBLE
69717: LD_INT 1
69719: DEC
69720: ST_TO_ADDR
69721: LD_EXP 65
69725: PUSH
69726: FOR_TO
69727: IFFALSE 69887
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
69729: LD_ADDR_VAR 0 4
69733: PUSH
69734: LD_EXP 65
69738: PUSH
69739: LD_VAR 0 2
69743: ARRAY
69744: PPUSH
69745: LD_INT 25
69747: PUSH
69748: LD_INT 9
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PPUSH
69755: CALL_OW 72
69759: ST_TO_ADDR
// if not tmp then
69760: LD_VAR 0 4
69764: NOT
69765: IFFALSE 69769
// continue ;
69767: GO 69726
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
69769: LD_EXP 91
69773: PUSH
69774: LD_VAR 0 2
69778: ARRAY
69779: PPUSH
69780: LD_INT 29
69782: PPUSH
69783: CALL_OW 325
69787: NOT
69788: PUSH
69789: LD_EXP 91
69793: PUSH
69794: LD_VAR 0 2
69798: ARRAY
69799: PPUSH
69800: LD_INT 28
69802: PPUSH
69803: CALL_OW 325
69807: NOT
69808: AND
69809: IFFALSE 69813
// continue ;
69811: GO 69726
// for j in tmp do
69813: LD_ADDR_VAR 0 3
69817: PUSH
69818: LD_VAR 0 4
69822: PUSH
69823: FOR_IN
69824: IFFALSE 69883
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69826: LD_VAR 0 3
69830: PUSH
69831: LD_EXP 68
69835: PUSH
69836: LD_VAR 0 2
69840: ARRAY
69841: PUSH
69842: LD_INT 1
69844: ARRAY
69845: IN
69846: NOT
69847: PUSH
69848: LD_VAR 0 3
69852: PUSH
69853: LD_EXP 68
69857: PUSH
69858: LD_VAR 0 2
69862: ARRAY
69863: PUSH
69864: LD_INT 2
69866: ARRAY
69867: IN
69868: NOT
69869: AND
69870: IFFALSE 69881
// ComSpaceTimeShoot ( j ) ;
69872: LD_VAR 0 3
69876: PPUSH
69877: CALL 14507 0 1
69881: GO 69823
69883: POP
69884: POP
// end ;
69885: GO 69726
69887: POP
69888: POP
// end ;
69889: LD_VAR 0 1
69893: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
69894: LD_INT 0
69896: PPUSH
69897: PPUSH
69898: PPUSH
69899: PPUSH
69900: PPUSH
69901: PPUSH
69902: PPUSH
69903: PPUSH
69904: PPUSH
// if not mc_bases then
69905: LD_EXP 65
69909: NOT
69910: IFFALSE 69914
// exit ;
69912: GO 70536
// for i = 1 to mc_bases do
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: DOUBLE
69920: LD_INT 1
69922: DEC
69923: ST_TO_ADDR
69924: LD_EXP 65
69928: PUSH
69929: FOR_TO
69930: IFFALSE 70534
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
69932: LD_EXP 100
69936: PUSH
69937: LD_VAR 0 2
69941: ARRAY
69942: NOT
69943: PUSH
69944: LD_INT 38
69946: PPUSH
69947: LD_EXP 91
69951: PUSH
69952: LD_VAR 0 2
69956: ARRAY
69957: PPUSH
69958: CALL_OW 321
69962: PUSH
69963: LD_INT 2
69965: NONEQUAL
69966: OR
69967: IFFALSE 69971
// continue ;
69969: GO 69929
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
69971: LD_ADDR_VAR 0 8
69975: PUSH
69976: LD_EXP 65
69980: PUSH
69981: LD_VAR 0 2
69985: ARRAY
69986: PPUSH
69987: LD_INT 30
69989: PUSH
69990: LD_INT 34
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PPUSH
69997: CALL_OW 72
70001: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
70002: LD_ADDR_VAR 0 9
70006: PUSH
70007: LD_EXP 65
70011: PUSH
70012: LD_VAR 0 2
70016: ARRAY
70017: PPUSH
70018: LD_INT 25
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PPUSH
70028: CALL_OW 72
70032: PPUSH
70033: LD_INT 0
70035: PPUSH
70036: CALL 47071 0 2
70040: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
70041: LD_VAR 0 9
70045: NOT
70046: PUSH
70047: LD_VAR 0 8
70051: NOT
70052: OR
70053: PUSH
70054: LD_EXP 65
70058: PUSH
70059: LD_VAR 0 2
70063: ARRAY
70064: PPUSH
70065: LD_INT 124
70067: PPUSH
70068: CALL 47071 0 2
70072: OR
70073: IFFALSE 70077
// continue ;
70075: GO 69929
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
70077: LD_EXP 101
70081: PUSH
70082: LD_VAR 0 2
70086: ARRAY
70087: PUSH
70088: LD_EXP 100
70092: PUSH
70093: LD_VAR 0 2
70097: ARRAY
70098: LESS
70099: PUSH
70100: LD_EXP 101
70104: PUSH
70105: LD_VAR 0 2
70109: ARRAY
70110: PUSH
70111: LD_VAR 0 8
70115: LESS
70116: AND
70117: IFFALSE 70532
// begin tmp := sci [ 1 ] ;
70119: LD_ADDR_VAR 0 7
70123: PUSH
70124: LD_VAR 0 9
70128: PUSH
70129: LD_INT 1
70131: ARRAY
70132: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
70133: LD_VAR 0 7
70137: PPUSH
70138: LD_INT 124
70140: PPUSH
70141: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
70145: LD_ADDR_VAR 0 3
70149: PUSH
70150: DOUBLE
70151: LD_EXP 100
70155: PUSH
70156: LD_VAR 0 2
70160: ARRAY
70161: INC
70162: ST_TO_ADDR
70163: LD_EXP 100
70167: PUSH
70168: LD_VAR 0 2
70172: ARRAY
70173: PUSH
70174: FOR_DOWNTO
70175: IFFALSE 70518
// begin if IsInUnit ( tmp ) then
70177: LD_VAR 0 7
70181: PPUSH
70182: CALL_OW 310
70186: IFFALSE 70197
// ComExitBuilding ( tmp ) ;
70188: LD_VAR 0 7
70192: PPUSH
70193: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
70197: LD_INT 35
70199: PPUSH
70200: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
70204: LD_VAR 0 7
70208: PPUSH
70209: CALL_OW 310
70213: NOT
70214: PUSH
70215: LD_VAR 0 7
70219: PPUSH
70220: CALL_OW 314
70224: NOT
70225: AND
70226: IFFALSE 70197
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
70228: LD_ADDR_VAR 0 6
70232: PUSH
70233: LD_VAR 0 7
70237: PPUSH
70238: CALL_OW 250
70242: PUSH
70243: LD_VAR 0 7
70247: PPUSH
70248: CALL_OW 251
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70257: LD_INT 35
70259: PPUSH
70260: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
70264: LD_ADDR_VAR 0 4
70268: PUSH
70269: LD_EXP 100
70273: PUSH
70274: LD_VAR 0 2
70278: ARRAY
70279: PUSH
70280: LD_VAR 0 3
70284: ARRAY
70285: PUSH
70286: LD_INT 1
70288: ARRAY
70289: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
70290: LD_ADDR_VAR 0 5
70294: PUSH
70295: LD_EXP 100
70299: PUSH
70300: LD_VAR 0 2
70304: ARRAY
70305: PUSH
70306: LD_VAR 0 3
70310: ARRAY
70311: PUSH
70312: LD_INT 2
70314: ARRAY
70315: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
70316: LD_VAR 0 7
70320: PPUSH
70321: LD_INT 10
70323: PPUSH
70324: CALL 21103 0 2
70328: PUSH
70329: LD_INT 4
70331: ARRAY
70332: IFFALSE 70370
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
70334: LD_VAR 0 7
70338: PPUSH
70339: LD_VAR 0 6
70343: PUSH
70344: LD_INT 1
70346: ARRAY
70347: PPUSH
70348: LD_VAR 0 6
70352: PUSH
70353: LD_INT 2
70355: ARRAY
70356: PPUSH
70357: CALL_OW 111
// wait ( 0 0$10 ) ;
70361: LD_INT 350
70363: PPUSH
70364: CALL_OW 67
// end else
70368: GO 70396
// begin ComMoveXY ( tmp , x , y ) ;
70370: LD_VAR 0 7
70374: PPUSH
70375: LD_VAR 0 4
70379: PPUSH
70380: LD_VAR 0 5
70384: PPUSH
70385: CALL_OW 111
// wait ( 0 0$3 ) ;
70389: LD_INT 105
70391: PPUSH
70392: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
70396: LD_VAR 0 7
70400: PPUSH
70401: LD_VAR 0 4
70405: PPUSH
70406: LD_VAR 0 5
70410: PPUSH
70411: CALL_OW 307
70415: IFFALSE 70257
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
70417: LD_VAR 0 7
70421: PPUSH
70422: LD_VAR 0 4
70426: PPUSH
70427: LD_VAR 0 5
70431: PPUSH
70432: LD_VAR 0 8
70436: PUSH
70437: LD_VAR 0 3
70441: ARRAY
70442: PPUSH
70443: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
70447: LD_INT 35
70449: PPUSH
70450: CALL_OW 67
// until not HasTask ( tmp ) ;
70454: LD_VAR 0 7
70458: PPUSH
70459: CALL_OW 314
70463: NOT
70464: IFFALSE 70447
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
70466: LD_ADDR_EXP 101
70470: PUSH
70471: LD_EXP 101
70475: PPUSH
70476: LD_VAR 0 2
70480: PUSH
70481: LD_EXP 101
70485: PUSH
70486: LD_VAR 0 2
70490: ARRAY
70491: PUSH
70492: LD_INT 1
70494: PLUS
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PPUSH
70500: LD_VAR 0 8
70504: PUSH
70505: LD_VAR 0 3
70509: ARRAY
70510: PPUSH
70511: CALL 18510 0 3
70515: ST_TO_ADDR
// end ;
70516: GO 70174
70518: POP
70519: POP
// MC_Reset ( i , 124 ) ;
70520: LD_VAR 0 2
70524: PPUSH
70525: LD_INT 124
70527: PPUSH
70528: CALL 54139 0 2
// end ; end ;
70532: GO 69929
70534: POP
70535: POP
// end ;
70536: LD_VAR 0 1
70540: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70541: LD_INT 0
70543: PPUSH
70544: PPUSH
70545: PPUSH
// if not mc_bases then
70546: LD_EXP 65
70550: NOT
70551: IFFALSE 70555
// exit ;
70553: GO 71161
// for i = 1 to mc_bases do
70555: LD_ADDR_VAR 0 2
70559: PUSH
70560: DOUBLE
70561: LD_INT 1
70563: DEC
70564: ST_TO_ADDR
70565: LD_EXP 65
70569: PUSH
70570: FOR_TO
70571: IFFALSE 71159
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70573: LD_ADDR_VAR 0 3
70577: PUSH
70578: LD_EXP 65
70582: PUSH
70583: LD_VAR 0 2
70587: ARRAY
70588: PPUSH
70589: LD_INT 25
70591: PUSH
70592: LD_INT 4
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PPUSH
70599: CALL_OW 72
70603: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
70604: LD_VAR 0 3
70608: NOT
70609: PUSH
70610: LD_EXP 102
70614: PUSH
70615: LD_VAR 0 2
70619: ARRAY
70620: NOT
70621: OR
70622: PUSH
70623: LD_EXP 65
70627: PUSH
70628: LD_VAR 0 2
70632: ARRAY
70633: PPUSH
70634: LD_INT 2
70636: PUSH
70637: LD_INT 30
70639: PUSH
70640: LD_INT 0
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 30
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: LIST
70661: PPUSH
70662: CALL_OW 72
70666: NOT
70667: OR
70668: IFFALSE 70718
// begin if mc_deposits_finder [ i ] then
70670: LD_EXP 103
70674: PUSH
70675: LD_VAR 0 2
70679: ARRAY
70680: IFFALSE 70716
// begin MC_Reset ( i , 125 ) ;
70682: LD_VAR 0 2
70686: PPUSH
70687: LD_INT 125
70689: PPUSH
70690: CALL 54139 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70694: LD_ADDR_EXP 103
70698: PUSH
70699: LD_EXP 103
70703: PPUSH
70704: LD_VAR 0 2
70708: PPUSH
70709: EMPTY
70710: PPUSH
70711: CALL_OW 1
70715: ST_TO_ADDR
// end ; continue ;
70716: GO 70570
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
70718: LD_EXP 102
70722: PUSH
70723: LD_VAR 0 2
70727: ARRAY
70728: PUSH
70729: LD_INT 1
70731: ARRAY
70732: PUSH
70733: LD_INT 3
70735: ARRAY
70736: PUSH
70737: LD_INT 1
70739: EQUAL
70740: PUSH
70741: LD_INT 20
70743: PPUSH
70744: LD_EXP 91
70748: PUSH
70749: LD_VAR 0 2
70753: ARRAY
70754: PPUSH
70755: CALL_OW 321
70759: PUSH
70760: LD_INT 2
70762: NONEQUAL
70763: AND
70764: IFFALSE 70814
// begin if mc_deposits_finder [ i ] then
70766: LD_EXP 103
70770: PUSH
70771: LD_VAR 0 2
70775: ARRAY
70776: IFFALSE 70812
// begin MC_Reset ( i , 125 ) ;
70778: LD_VAR 0 2
70782: PPUSH
70783: LD_INT 125
70785: PPUSH
70786: CALL 54139 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70790: LD_ADDR_EXP 103
70794: PUSH
70795: LD_EXP 103
70799: PPUSH
70800: LD_VAR 0 2
70804: PPUSH
70805: EMPTY
70806: PPUSH
70807: CALL_OW 1
70811: ST_TO_ADDR
// end ; continue ;
70812: GO 70570
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
70814: LD_EXP 102
70818: PUSH
70819: LD_VAR 0 2
70823: ARRAY
70824: PUSH
70825: LD_INT 1
70827: ARRAY
70828: PUSH
70829: LD_INT 1
70831: ARRAY
70832: PPUSH
70833: LD_EXP 102
70837: PUSH
70838: LD_VAR 0 2
70842: ARRAY
70843: PUSH
70844: LD_INT 1
70846: ARRAY
70847: PUSH
70848: LD_INT 2
70850: ARRAY
70851: PPUSH
70852: LD_EXP 91
70856: PUSH
70857: LD_VAR 0 2
70861: ARRAY
70862: PPUSH
70863: CALL_OW 440
70867: IFFALSE 70910
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
70869: LD_ADDR_EXP 102
70873: PUSH
70874: LD_EXP 102
70878: PPUSH
70879: LD_VAR 0 2
70883: PPUSH
70884: LD_EXP 102
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PPUSH
70895: LD_INT 1
70897: PPUSH
70898: CALL_OW 3
70902: PPUSH
70903: CALL_OW 1
70907: ST_TO_ADDR
70908: GO 71157
// begin if not mc_deposits_finder [ i ] then
70910: LD_EXP 103
70914: PUSH
70915: LD_VAR 0 2
70919: ARRAY
70920: NOT
70921: IFFALSE 70973
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
70923: LD_ADDR_EXP 103
70927: PUSH
70928: LD_EXP 103
70932: PPUSH
70933: LD_VAR 0 2
70937: PPUSH
70938: LD_VAR 0 3
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PUSH
70947: EMPTY
70948: LIST
70949: PPUSH
70950: CALL_OW 1
70954: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
70955: LD_VAR 0 3
70959: PUSH
70960: LD_INT 1
70962: ARRAY
70963: PPUSH
70964: LD_INT 125
70966: PPUSH
70967: CALL_OW 109
// end else
70971: GO 71157
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
70973: LD_EXP 103
70977: PUSH
70978: LD_VAR 0 2
70982: ARRAY
70983: PUSH
70984: LD_INT 1
70986: ARRAY
70987: PPUSH
70988: CALL_OW 310
70992: IFFALSE 71015
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
70994: LD_EXP 103
70998: PUSH
70999: LD_VAR 0 2
71003: ARRAY
71004: PUSH
71005: LD_INT 1
71007: ARRAY
71008: PPUSH
71009: CALL_OW 122
71013: GO 71157
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
71015: LD_EXP 103
71019: PUSH
71020: LD_VAR 0 2
71024: ARRAY
71025: PUSH
71026: LD_INT 1
71028: ARRAY
71029: PPUSH
71030: CALL_OW 314
71034: NOT
71035: PUSH
71036: LD_EXP 103
71040: PUSH
71041: LD_VAR 0 2
71045: ARRAY
71046: PUSH
71047: LD_INT 1
71049: ARRAY
71050: PPUSH
71051: LD_EXP 102
71055: PUSH
71056: LD_VAR 0 2
71060: ARRAY
71061: PUSH
71062: LD_INT 1
71064: ARRAY
71065: PUSH
71066: LD_INT 1
71068: ARRAY
71069: PPUSH
71070: LD_EXP 102
71074: PUSH
71075: LD_VAR 0 2
71079: ARRAY
71080: PUSH
71081: LD_INT 1
71083: ARRAY
71084: PUSH
71085: LD_INT 2
71087: ARRAY
71088: PPUSH
71089: CALL_OW 297
71093: PUSH
71094: LD_INT 6
71096: GREATER
71097: AND
71098: IFFALSE 71157
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
71100: LD_EXP 103
71104: PUSH
71105: LD_VAR 0 2
71109: ARRAY
71110: PUSH
71111: LD_INT 1
71113: ARRAY
71114: PPUSH
71115: LD_EXP 102
71119: PUSH
71120: LD_VAR 0 2
71124: ARRAY
71125: PUSH
71126: LD_INT 1
71128: ARRAY
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: PPUSH
71134: LD_EXP 102
71138: PUSH
71139: LD_VAR 0 2
71143: ARRAY
71144: PUSH
71145: LD_INT 1
71147: ARRAY
71148: PUSH
71149: LD_INT 2
71151: ARRAY
71152: PPUSH
71153: CALL_OW 111
// end ; end ; end ;
71157: GO 70570
71159: POP
71160: POP
// end ;
71161: LD_VAR 0 1
71165: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
71166: LD_INT 0
71168: PPUSH
71169: PPUSH
71170: PPUSH
71171: PPUSH
71172: PPUSH
71173: PPUSH
71174: PPUSH
71175: PPUSH
71176: PPUSH
71177: PPUSH
71178: PPUSH
// if not mc_bases then
71179: LD_EXP 65
71183: NOT
71184: IFFALSE 71188
// exit ;
71186: GO 72128
// for i = 1 to mc_bases do
71188: LD_ADDR_VAR 0 2
71192: PUSH
71193: DOUBLE
71194: LD_INT 1
71196: DEC
71197: ST_TO_ADDR
71198: LD_EXP 65
71202: PUSH
71203: FOR_TO
71204: IFFALSE 72126
// begin if not mc_bases [ i ] or mc_scan [ i ] then
71206: LD_EXP 65
71210: PUSH
71211: LD_VAR 0 2
71215: ARRAY
71216: NOT
71217: PUSH
71218: LD_EXP 88
71222: PUSH
71223: LD_VAR 0 2
71227: ARRAY
71228: OR
71229: IFFALSE 71233
// continue ;
71231: GO 71203
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71233: LD_ADDR_VAR 0 7
71237: PUSH
71238: LD_EXP 65
71242: PUSH
71243: LD_VAR 0 2
71247: ARRAY
71248: PUSH
71249: LD_INT 1
71251: ARRAY
71252: PPUSH
71253: CALL_OW 248
71257: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
71258: LD_VAR 0 7
71262: PUSH
71263: LD_INT 3
71265: EQUAL
71266: PUSH
71267: LD_EXP 84
71271: PUSH
71272: LD_VAR 0 2
71276: ARRAY
71277: PUSH
71278: LD_EXP 87
71282: PUSH
71283: LD_VAR 0 2
71287: ARRAY
71288: UNION
71289: PPUSH
71290: LD_INT 33
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PPUSH
71300: CALL_OW 72
71304: NOT
71305: OR
71306: IFFALSE 71310
// continue ;
71308: GO 71203
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71310: LD_ADDR_VAR 0 9
71314: PUSH
71315: LD_EXP 65
71319: PUSH
71320: LD_VAR 0 2
71324: ARRAY
71325: PPUSH
71326: LD_INT 30
71328: PUSH
71329: LD_INT 36
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PPUSH
71336: CALL_OW 72
71340: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
71341: LD_ADDR_VAR 0 10
71345: PUSH
71346: LD_EXP 84
71350: PUSH
71351: LD_VAR 0 2
71355: ARRAY
71356: PPUSH
71357: LD_INT 34
71359: PUSH
71360: LD_INT 31
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PPUSH
71367: CALL_OW 72
71371: ST_TO_ADDR
// if not cts and not mcts then
71372: LD_VAR 0 9
71376: NOT
71377: PUSH
71378: LD_VAR 0 10
71382: NOT
71383: AND
71384: IFFALSE 71388
// continue ;
71386: GO 71203
// x := cts ;
71388: LD_ADDR_VAR 0 11
71392: PUSH
71393: LD_VAR 0 9
71397: ST_TO_ADDR
// if not x then
71398: LD_VAR 0 11
71402: NOT
71403: IFFALSE 71415
// x := mcts ;
71405: LD_ADDR_VAR 0 11
71409: PUSH
71410: LD_VAR 0 10
71414: ST_TO_ADDR
// if not x then
71415: LD_VAR 0 11
71419: NOT
71420: IFFALSE 71424
// continue ;
71422: GO 71203
// if mc_remote_driver [ i ] then
71424: LD_EXP 105
71428: PUSH
71429: LD_VAR 0 2
71433: ARRAY
71434: IFFALSE 71821
// for j in mc_remote_driver [ i ] do
71436: LD_ADDR_VAR 0 3
71440: PUSH
71441: LD_EXP 105
71445: PUSH
71446: LD_VAR 0 2
71450: ARRAY
71451: PUSH
71452: FOR_IN
71453: IFFALSE 71819
// begin if GetClass ( j ) <> 3 then
71455: LD_VAR 0 3
71459: PPUSH
71460: CALL_OW 257
71464: PUSH
71465: LD_INT 3
71467: NONEQUAL
71468: IFFALSE 71521
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
71470: LD_ADDR_EXP 105
71474: PUSH
71475: LD_EXP 105
71479: PPUSH
71480: LD_VAR 0 2
71484: PPUSH
71485: LD_EXP 105
71489: PUSH
71490: LD_VAR 0 2
71494: ARRAY
71495: PUSH
71496: LD_VAR 0 3
71500: DIFF
71501: PPUSH
71502: CALL_OW 1
71506: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71507: LD_VAR 0 3
71511: PPUSH
71512: LD_INT 0
71514: PPUSH
71515: CALL_OW 109
// continue ;
71519: GO 71452
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
71521: LD_EXP 84
71525: PUSH
71526: LD_VAR 0 2
71530: ARRAY
71531: PPUSH
71532: LD_INT 34
71534: PUSH
71535: LD_INT 31
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 58
71544: PUSH
71545: EMPTY
71546: LIST
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PPUSH
71552: CALL_OW 72
71556: PUSH
71557: LD_VAR 0 3
71561: PPUSH
71562: CALL 47159 0 1
71566: NOT
71567: AND
71568: IFFALSE 71639
// begin if IsInUnit ( j ) then
71570: LD_VAR 0 3
71574: PPUSH
71575: CALL_OW 310
71579: IFFALSE 71590
// ComExitBuilding ( j ) ;
71581: LD_VAR 0 3
71585: PPUSH
71586: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
71590: LD_VAR 0 3
71594: PPUSH
71595: LD_EXP 84
71599: PUSH
71600: LD_VAR 0 2
71604: ARRAY
71605: PPUSH
71606: LD_INT 34
71608: PUSH
71609: LD_INT 31
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 58
71618: PUSH
71619: EMPTY
71620: LIST
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PPUSH
71626: CALL_OW 72
71630: PUSH
71631: LD_INT 1
71633: ARRAY
71634: PPUSH
71635: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
71639: LD_VAR 0 3
71643: PPUSH
71644: CALL_OW 310
71648: NOT
71649: PUSH
71650: LD_VAR 0 3
71654: PPUSH
71655: CALL_OW 310
71659: PPUSH
71660: CALL_OW 266
71664: PUSH
71665: LD_INT 36
71667: NONEQUAL
71668: PUSH
71669: LD_VAR 0 3
71673: PPUSH
71674: CALL 47159 0 1
71678: NOT
71679: AND
71680: OR
71681: IFFALSE 71817
// begin if IsInUnit ( j ) then
71683: LD_VAR 0 3
71687: PPUSH
71688: CALL_OW 310
71692: IFFALSE 71703
// ComExitBuilding ( j ) ;
71694: LD_VAR 0 3
71698: PPUSH
71699: CALL_OW 122
// ct := 0 ;
71703: LD_ADDR_VAR 0 8
71707: PUSH
71708: LD_INT 0
71710: ST_TO_ADDR
// for k in x do
71711: LD_ADDR_VAR 0 4
71715: PUSH
71716: LD_VAR 0 11
71720: PUSH
71721: FOR_IN
71722: IFFALSE 71795
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
71724: LD_VAR 0 4
71728: PPUSH
71729: CALL_OW 264
71733: PUSH
71734: LD_INT 31
71736: EQUAL
71737: PUSH
71738: LD_VAR 0 4
71742: PPUSH
71743: CALL_OW 311
71747: NOT
71748: AND
71749: PUSH
71750: LD_VAR 0 4
71754: PPUSH
71755: CALL_OW 266
71759: PUSH
71760: LD_INT 36
71762: EQUAL
71763: PUSH
71764: LD_VAR 0 4
71768: PPUSH
71769: CALL_OW 313
71773: PUSH
71774: LD_INT 3
71776: LESS
71777: AND
71778: OR
71779: IFFALSE 71793
// begin ct := k ;
71781: LD_ADDR_VAR 0 8
71785: PUSH
71786: LD_VAR 0 4
71790: ST_TO_ADDR
// break ;
71791: GO 71795
// end ;
71793: GO 71721
71795: POP
71796: POP
// if ct then
71797: LD_VAR 0 8
71801: IFFALSE 71817
// ComEnterUnit ( j , ct ) ;
71803: LD_VAR 0 3
71807: PPUSH
71808: LD_VAR 0 8
71812: PPUSH
71813: CALL_OW 120
// end ; end ;
71817: GO 71452
71819: POP
71820: POP
// places := 0 ;
71821: LD_ADDR_VAR 0 5
71825: PUSH
71826: LD_INT 0
71828: ST_TO_ADDR
// for j = 1 to x do
71829: LD_ADDR_VAR 0 3
71833: PUSH
71834: DOUBLE
71835: LD_INT 1
71837: DEC
71838: ST_TO_ADDR
71839: LD_VAR 0 11
71843: PUSH
71844: FOR_TO
71845: IFFALSE 71921
// if GetWeapon ( x [ j ] ) = ar_control_tower then
71847: LD_VAR 0 11
71851: PUSH
71852: LD_VAR 0 3
71856: ARRAY
71857: PPUSH
71858: CALL_OW 264
71862: PUSH
71863: LD_INT 31
71865: EQUAL
71866: IFFALSE 71884
// places := places + 1 else
71868: LD_ADDR_VAR 0 5
71872: PUSH
71873: LD_VAR 0 5
71877: PUSH
71878: LD_INT 1
71880: PLUS
71881: ST_TO_ADDR
71882: GO 71919
// if GetBType ( x [ j ] ) = b_control_tower then
71884: LD_VAR 0 11
71888: PUSH
71889: LD_VAR 0 3
71893: ARRAY
71894: PPUSH
71895: CALL_OW 266
71899: PUSH
71900: LD_INT 36
71902: EQUAL
71903: IFFALSE 71919
// places := places + 3 ;
71905: LD_ADDR_VAR 0 5
71909: PUSH
71910: LD_VAR 0 5
71914: PUSH
71915: LD_INT 3
71917: PLUS
71918: ST_TO_ADDR
71919: GO 71844
71921: POP
71922: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
71923: LD_VAR 0 5
71927: PUSH
71928: LD_INT 0
71930: EQUAL
71931: PUSH
71932: LD_VAR 0 5
71936: PUSH
71937: LD_EXP 105
71941: PUSH
71942: LD_VAR 0 2
71946: ARRAY
71947: LESSEQUAL
71948: OR
71949: IFFALSE 71953
// continue ;
71951: GO 71203
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
71953: LD_ADDR_VAR 0 6
71957: PUSH
71958: LD_EXP 65
71962: PUSH
71963: LD_VAR 0 2
71967: ARRAY
71968: PPUSH
71969: LD_INT 25
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PPUSH
71979: CALL_OW 72
71983: PUSH
71984: LD_EXP 105
71988: PUSH
71989: LD_VAR 0 2
71993: ARRAY
71994: DIFF
71995: PPUSH
71996: LD_INT 3
71998: PPUSH
71999: CALL 48059 0 2
72003: ST_TO_ADDR
// for j in tmp do
72004: LD_ADDR_VAR 0 3
72008: PUSH
72009: LD_VAR 0 6
72013: PUSH
72014: FOR_IN
72015: IFFALSE 72050
// if GetTag ( j ) > 0 then
72017: LD_VAR 0 3
72021: PPUSH
72022: CALL_OW 110
72026: PUSH
72027: LD_INT 0
72029: GREATER
72030: IFFALSE 72048
// tmp := tmp diff j ;
72032: LD_ADDR_VAR 0 6
72036: PUSH
72037: LD_VAR 0 6
72041: PUSH
72042: LD_VAR 0 3
72046: DIFF
72047: ST_TO_ADDR
72048: GO 72014
72050: POP
72051: POP
// if not tmp then
72052: LD_VAR 0 6
72056: NOT
72057: IFFALSE 72061
// continue ;
72059: GO 71203
// if places then
72061: LD_VAR 0 5
72065: IFFALSE 72124
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
72067: LD_ADDR_EXP 105
72071: PUSH
72072: LD_EXP 105
72076: PPUSH
72077: LD_VAR 0 2
72081: PPUSH
72082: LD_EXP 105
72086: PUSH
72087: LD_VAR 0 2
72091: ARRAY
72092: PUSH
72093: LD_VAR 0 6
72097: PUSH
72098: LD_INT 1
72100: ARRAY
72101: UNION
72102: PPUSH
72103: CALL_OW 1
72107: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
72108: LD_VAR 0 6
72112: PUSH
72113: LD_INT 1
72115: ARRAY
72116: PPUSH
72117: LD_INT 126
72119: PPUSH
72120: CALL_OW 109
// end ; end ;
72124: GO 71203
72126: POP
72127: POP
// end ;
72128: LD_VAR 0 1
72132: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
72133: LD_INT 0
72135: PPUSH
72136: PPUSH
72137: PPUSH
72138: PPUSH
72139: PPUSH
72140: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
72141: LD_VAR 0 1
72145: NOT
72146: PUSH
72147: LD_VAR 0 2
72151: NOT
72152: OR
72153: PUSH
72154: LD_VAR 0 3
72158: NOT
72159: OR
72160: PUSH
72161: LD_VAR 0 4
72165: PUSH
72166: LD_INT 1
72168: PUSH
72169: LD_INT 2
72171: PUSH
72172: LD_INT 3
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: LD_INT 5
72180: PUSH
72181: LD_INT 8
72183: PUSH
72184: LD_INT 9
72186: PUSH
72187: LD_INT 15
72189: PUSH
72190: LD_INT 16
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: IN
72204: NOT
72205: OR
72206: IFFALSE 72210
// exit ;
72208: GO 73110
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72210: LD_ADDR_VAR 0 2
72214: PUSH
72215: LD_VAR 0 2
72219: PPUSH
72220: LD_INT 21
72222: PUSH
72223: LD_INT 3
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 24
72232: PUSH
72233: LD_INT 250
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PPUSH
72244: CALL_OW 72
72248: ST_TO_ADDR
// case class of 1 , 15 :
72249: LD_VAR 0 4
72253: PUSH
72254: LD_INT 1
72256: DOUBLE
72257: EQUAL
72258: IFTRUE 72268
72260: LD_INT 15
72262: DOUBLE
72263: EQUAL
72264: IFTRUE 72268
72266: GO 72353
72268: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72269: LD_ADDR_VAR 0 8
72273: PUSH
72274: LD_VAR 0 2
72278: PPUSH
72279: LD_INT 2
72281: PUSH
72282: LD_INT 30
72284: PUSH
72285: LD_INT 32
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 30
72294: PUSH
72295: LD_INT 31
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: LIST
72306: PPUSH
72307: CALL_OW 72
72311: PUSH
72312: LD_VAR 0 2
72316: PPUSH
72317: LD_INT 2
72319: PUSH
72320: LD_INT 30
72322: PUSH
72323: LD_INT 4
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 30
72332: PUSH
72333: LD_INT 5
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: PPUSH
72345: CALL_OW 72
72349: ADD
72350: ST_TO_ADDR
72351: GO 72599
72353: LD_INT 2
72355: DOUBLE
72356: EQUAL
72357: IFTRUE 72367
72359: LD_INT 16
72361: DOUBLE
72362: EQUAL
72363: IFTRUE 72367
72365: GO 72413
72367: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72368: LD_ADDR_VAR 0 8
72372: PUSH
72373: LD_VAR 0 2
72377: PPUSH
72378: LD_INT 2
72380: PUSH
72381: LD_INT 30
72383: PUSH
72384: LD_INT 0
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 30
72393: PUSH
72394: LD_INT 1
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: PPUSH
72406: CALL_OW 72
72410: ST_TO_ADDR
72411: GO 72599
72413: LD_INT 3
72415: DOUBLE
72416: EQUAL
72417: IFTRUE 72421
72419: GO 72467
72421: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72422: LD_ADDR_VAR 0 8
72426: PUSH
72427: LD_VAR 0 2
72431: PPUSH
72432: LD_INT 2
72434: PUSH
72435: LD_INT 30
72437: PUSH
72438: LD_INT 2
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 30
72447: PUSH
72448: LD_INT 3
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 72
72464: ST_TO_ADDR
72465: GO 72599
72467: LD_INT 4
72469: DOUBLE
72470: EQUAL
72471: IFTRUE 72475
72473: GO 72532
72475: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72476: LD_ADDR_VAR 0 8
72480: PUSH
72481: LD_VAR 0 2
72485: PPUSH
72486: LD_INT 2
72488: PUSH
72489: LD_INT 30
72491: PUSH
72492: LD_INT 6
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 30
72501: PUSH
72502: LD_INT 7
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 30
72511: PUSH
72512: LD_INT 8
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: PPUSH
72525: CALL_OW 72
72529: ST_TO_ADDR
72530: GO 72599
72532: LD_INT 5
72534: DOUBLE
72535: EQUAL
72536: IFTRUE 72552
72538: LD_INT 8
72540: DOUBLE
72541: EQUAL
72542: IFTRUE 72552
72544: LD_INT 9
72546: DOUBLE
72547: EQUAL
72548: IFTRUE 72552
72550: GO 72598
72552: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72553: LD_ADDR_VAR 0 8
72557: PUSH
72558: LD_VAR 0 2
72562: PPUSH
72563: LD_INT 2
72565: PUSH
72566: LD_INT 30
72568: PUSH
72569: LD_INT 4
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 30
72578: PUSH
72579: LD_INT 5
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: PPUSH
72591: CALL_OW 72
72595: ST_TO_ADDR
72596: GO 72599
72598: POP
// if not tmp then
72599: LD_VAR 0 8
72603: NOT
72604: IFFALSE 72608
// exit ;
72606: GO 73110
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72608: LD_VAR 0 4
72612: PUSH
72613: LD_INT 1
72615: PUSH
72616: LD_INT 15
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: IN
72623: PUSH
72624: LD_EXP 74
72628: PUSH
72629: LD_VAR 0 1
72633: ARRAY
72634: AND
72635: IFFALSE 72791
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72637: LD_ADDR_VAR 0 9
72641: PUSH
72642: LD_EXP 74
72646: PUSH
72647: LD_VAR 0 1
72651: ARRAY
72652: PUSH
72653: LD_INT 1
72655: ARRAY
72656: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72657: LD_VAR 0 9
72661: PUSH
72662: LD_EXP 75
72666: PUSH
72667: LD_VAR 0 1
72671: ARRAY
72672: IN
72673: NOT
72674: IFFALSE 72789
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72676: LD_ADDR_EXP 75
72680: PUSH
72681: LD_EXP 75
72685: PPUSH
72686: LD_VAR 0 1
72690: PUSH
72691: LD_EXP 75
72695: PUSH
72696: LD_VAR 0 1
72700: ARRAY
72701: PUSH
72702: LD_INT 1
72704: PLUS
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PPUSH
72710: LD_VAR 0 9
72714: PPUSH
72715: CALL 18510 0 3
72719: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72720: LD_ADDR_EXP 74
72724: PUSH
72725: LD_EXP 74
72729: PPUSH
72730: LD_VAR 0 1
72734: PPUSH
72735: LD_EXP 74
72739: PUSH
72740: LD_VAR 0 1
72744: ARRAY
72745: PUSH
72746: LD_VAR 0 9
72750: DIFF
72751: PPUSH
72752: CALL_OW 1
72756: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72757: LD_VAR 0 3
72761: PPUSH
72762: LD_EXP 75
72766: PUSH
72767: LD_VAR 0 1
72771: ARRAY
72772: PUSH
72773: LD_EXP 75
72777: PUSH
72778: LD_VAR 0 1
72782: ARRAY
72783: ARRAY
72784: PPUSH
72785: CALL_OW 120
// end ; exit ;
72789: GO 73110
// end ; if tmp > 1 then
72791: LD_VAR 0 8
72795: PUSH
72796: LD_INT 1
72798: GREATER
72799: IFFALSE 72903
// for i = 2 to tmp do
72801: LD_ADDR_VAR 0 6
72805: PUSH
72806: DOUBLE
72807: LD_INT 2
72809: DEC
72810: ST_TO_ADDR
72811: LD_VAR 0 8
72815: PUSH
72816: FOR_TO
72817: IFFALSE 72901
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72819: LD_VAR 0 8
72823: PUSH
72824: LD_VAR 0 6
72828: ARRAY
72829: PPUSH
72830: CALL_OW 461
72834: PUSH
72835: LD_INT 6
72837: EQUAL
72838: IFFALSE 72899
// begin x := tmp [ i ] ;
72840: LD_ADDR_VAR 0 9
72844: PUSH
72845: LD_VAR 0 8
72849: PUSH
72850: LD_VAR 0 6
72854: ARRAY
72855: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72856: LD_ADDR_VAR 0 8
72860: PUSH
72861: LD_VAR 0 8
72865: PPUSH
72866: LD_VAR 0 6
72870: PPUSH
72871: CALL_OW 3
72875: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72876: LD_ADDR_VAR 0 8
72880: PUSH
72881: LD_VAR 0 8
72885: PPUSH
72886: LD_INT 1
72888: PPUSH
72889: LD_VAR 0 9
72893: PPUSH
72894: CALL_OW 2
72898: ST_TO_ADDR
// end ;
72899: GO 72816
72901: POP
72902: POP
// for i in tmp do
72903: LD_ADDR_VAR 0 6
72907: PUSH
72908: LD_VAR 0 8
72912: PUSH
72913: FOR_IN
72914: IFFALSE 72983
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72916: LD_VAR 0 6
72920: PPUSH
72921: CALL_OW 313
72925: PUSH
72926: LD_INT 6
72928: LESS
72929: PUSH
72930: LD_VAR 0 6
72934: PPUSH
72935: CALL_OW 266
72939: PUSH
72940: LD_INT 31
72942: PUSH
72943: LD_INT 32
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: IN
72950: NOT
72951: AND
72952: PUSH
72953: LD_VAR 0 6
72957: PPUSH
72958: CALL_OW 313
72962: PUSH
72963: LD_INT 0
72965: EQUAL
72966: OR
72967: IFFALSE 72981
// begin j := i ;
72969: LD_ADDR_VAR 0 7
72973: PUSH
72974: LD_VAR 0 6
72978: ST_TO_ADDR
// break ;
72979: GO 72983
// end ; end ;
72981: GO 72913
72983: POP
72984: POP
// if j then
72985: LD_VAR 0 7
72989: IFFALSE 73007
// ComEnterUnit ( unit , j ) else
72991: LD_VAR 0 3
72995: PPUSH
72996: LD_VAR 0 7
73000: PPUSH
73001: CALL_OW 120
73005: GO 73110
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73007: LD_ADDR_VAR 0 10
73011: PUSH
73012: LD_VAR 0 2
73016: PPUSH
73017: LD_INT 2
73019: PUSH
73020: LD_INT 30
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 30
73032: PUSH
73033: LD_INT 1
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: LIST
73044: PPUSH
73045: CALL_OW 72
73049: ST_TO_ADDR
// if depot then
73050: LD_VAR 0 10
73054: IFFALSE 73110
// begin depot := NearestUnitToUnit ( depot , unit ) ;
73056: LD_ADDR_VAR 0 10
73060: PUSH
73061: LD_VAR 0 10
73065: PPUSH
73066: LD_VAR 0 3
73070: PPUSH
73071: CALL_OW 74
73075: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
73076: LD_VAR 0 3
73080: PPUSH
73081: LD_VAR 0 10
73085: PPUSH
73086: CALL_OW 296
73090: PUSH
73091: LD_INT 10
73093: GREATER
73094: IFFALSE 73110
// ComStandNearbyBuilding ( unit , depot ) ;
73096: LD_VAR 0 3
73100: PPUSH
73101: LD_VAR 0 10
73105: PPUSH
73106: CALL 15124 0 2
// end ; end ; end ;
73110: LD_VAR 0 5
73114: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
73115: LD_INT 0
73117: PPUSH
73118: PPUSH
73119: PPUSH
73120: PPUSH
// if not mc_bases then
73121: LD_EXP 65
73125: NOT
73126: IFFALSE 73130
// exit ;
73128: GO 73369
// for i = 1 to mc_bases do
73130: LD_ADDR_VAR 0 2
73134: PUSH
73135: DOUBLE
73136: LD_INT 1
73138: DEC
73139: ST_TO_ADDR
73140: LD_EXP 65
73144: PUSH
73145: FOR_TO
73146: IFFALSE 73367
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
73148: LD_ADDR_VAR 0 4
73152: PUSH
73153: LD_EXP 65
73157: PUSH
73158: LD_VAR 0 2
73162: ARRAY
73163: PPUSH
73164: LD_INT 21
73166: PUSH
73167: LD_INT 1
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PPUSH
73174: CALL_OW 72
73178: PUSH
73179: LD_EXP 94
73183: PUSH
73184: LD_VAR 0 2
73188: ARRAY
73189: UNION
73190: ST_TO_ADDR
// if not tmp then
73191: LD_VAR 0 4
73195: NOT
73196: IFFALSE 73200
// continue ;
73198: GO 73145
// for j in tmp do
73200: LD_ADDR_VAR 0 3
73204: PUSH
73205: LD_VAR 0 4
73209: PUSH
73210: FOR_IN
73211: IFFALSE 73363
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73213: LD_VAR 0 3
73217: PPUSH
73218: CALL_OW 110
73222: NOT
73223: PUSH
73224: LD_VAR 0 3
73228: PPUSH
73229: CALL_OW 314
73233: NOT
73234: AND
73235: PUSH
73236: LD_VAR 0 3
73240: PPUSH
73241: CALL_OW 311
73245: NOT
73246: AND
73247: PUSH
73248: LD_VAR 0 3
73252: PPUSH
73253: CALL_OW 310
73257: NOT
73258: AND
73259: PUSH
73260: LD_VAR 0 3
73264: PUSH
73265: LD_EXP 68
73269: PUSH
73270: LD_VAR 0 2
73274: ARRAY
73275: PUSH
73276: LD_INT 1
73278: ARRAY
73279: IN
73280: NOT
73281: AND
73282: PUSH
73283: LD_VAR 0 3
73287: PUSH
73288: LD_EXP 68
73292: PUSH
73293: LD_VAR 0 2
73297: ARRAY
73298: PUSH
73299: LD_INT 2
73301: ARRAY
73302: IN
73303: NOT
73304: AND
73305: PUSH
73306: LD_VAR 0 3
73310: PUSH
73311: LD_EXP 77
73315: PUSH
73316: LD_VAR 0 2
73320: ARRAY
73321: IN
73322: NOT
73323: AND
73324: IFFALSE 73361
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73326: LD_VAR 0 2
73330: PPUSH
73331: LD_EXP 65
73335: PUSH
73336: LD_VAR 0 2
73340: ARRAY
73341: PPUSH
73342: LD_VAR 0 3
73346: PPUSH
73347: LD_VAR 0 3
73351: PPUSH
73352: CALL_OW 257
73356: PPUSH
73357: CALL 72133 0 4
// end ;
73361: GO 73210
73363: POP
73364: POP
// end ;
73365: GO 73145
73367: POP
73368: POP
// end ;
73369: LD_VAR 0 1
73373: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73374: LD_INT 0
73376: PPUSH
73377: PPUSH
73378: PPUSH
73379: PPUSH
73380: PPUSH
73381: PPUSH
// if not mc_bases [ base ] then
73382: LD_EXP 65
73386: PUSH
73387: LD_VAR 0 1
73391: ARRAY
73392: NOT
73393: IFFALSE 73397
// exit ;
73395: GO 73579
// tmp := [ ] ;
73397: LD_ADDR_VAR 0 6
73401: PUSH
73402: EMPTY
73403: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73404: LD_ADDR_VAR 0 7
73408: PUSH
73409: LD_VAR 0 3
73413: PPUSH
73414: LD_INT 0
73416: PPUSH
73417: CALL_OW 517
73421: ST_TO_ADDR
// if not list then
73422: LD_VAR 0 7
73426: NOT
73427: IFFALSE 73431
// exit ;
73429: GO 73579
// for i = 1 to amount do
73431: LD_ADDR_VAR 0 5
73435: PUSH
73436: DOUBLE
73437: LD_INT 1
73439: DEC
73440: ST_TO_ADDR
73441: LD_VAR 0 2
73445: PUSH
73446: FOR_TO
73447: IFFALSE 73527
// begin x := rand ( 1 , list [ 1 ] ) ;
73449: LD_ADDR_VAR 0 8
73453: PUSH
73454: LD_INT 1
73456: PPUSH
73457: LD_VAR 0 7
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PPUSH
73466: CALL_OW 12
73470: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73471: LD_ADDR_VAR 0 6
73475: PUSH
73476: LD_VAR 0 6
73480: PPUSH
73481: LD_VAR 0 5
73485: PPUSH
73486: LD_VAR 0 7
73490: PUSH
73491: LD_INT 1
73493: ARRAY
73494: PUSH
73495: LD_VAR 0 8
73499: ARRAY
73500: PUSH
73501: LD_VAR 0 7
73505: PUSH
73506: LD_INT 2
73508: ARRAY
73509: PUSH
73510: LD_VAR 0 8
73514: ARRAY
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PPUSH
73520: CALL_OW 1
73524: ST_TO_ADDR
// end ;
73525: GO 73446
73527: POP
73528: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73529: LD_ADDR_EXP 78
73533: PUSH
73534: LD_EXP 78
73538: PPUSH
73539: LD_VAR 0 1
73543: PPUSH
73544: LD_VAR 0 6
73548: PPUSH
73549: CALL_OW 1
73553: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73554: LD_ADDR_EXP 80
73558: PUSH
73559: LD_EXP 80
73563: PPUSH
73564: LD_VAR 0 1
73568: PPUSH
73569: LD_VAR 0 3
73573: PPUSH
73574: CALL_OW 1
73578: ST_TO_ADDR
// end ;
73579: LD_VAR 0 4
73583: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73584: LD_INT 0
73586: PPUSH
// if not mc_bases [ base ] then
73587: LD_EXP 65
73591: PUSH
73592: LD_VAR 0 1
73596: ARRAY
73597: NOT
73598: IFFALSE 73602
// exit ;
73600: GO 73627
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73602: LD_ADDR_EXP 70
73606: PUSH
73607: LD_EXP 70
73611: PPUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: LD_VAR 0 2
73621: PPUSH
73622: CALL_OW 1
73626: ST_TO_ADDR
// end ;
73627: LD_VAR 0 3
73631: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73632: LD_INT 0
73634: PPUSH
// if not mc_bases [ base ] then
73635: LD_EXP 65
73639: PUSH
73640: LD_VAR 0 1
73644: ARRAY
73645: NOT
73646: IFFALSE 73650
// exit ;
73648: GO 73687
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
73650: LD_ADDR_EXP 70
73654: PUSH
73655: LD_EXP 70
73659: PPUSH
73660: LD_VAR 0 1
73664: PPUSH
73665: LD_EXP 70
73669: PUSH
73670: LD_VAR 0 1
73674: ARRAY
73675: PUSH
73676: LD_VAR 0 2
73680: UNION
73681: PPUSH
73682: CALL_OW 1
73686: ST_TO_ADDR
// end ;
73687: LD_VAR 0 3
73691: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73692: LD_INT 0
73694: PPUSH
// if not mc_bases [ base ] then
73695: LD_EXP 65
73699: PUSH
73700: LD_VAR 0 1
73704: ARRAY
73705: NOT
73706: IFFALSE 73710
// exit ;
73708: GO 73735
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73710: LD_ADDR_EXP 86
73714: PUSH
73715: LD_EXP 86
73719: PPUSH
73720: LD_VAR 0 1
73724: PPUSH
73725: LD_VAR 0 2
73729: PPUSH
73730: CALL_OW 1
73734: ST_TO_ADDR
// end ;
73735: LD_VAR 0 3
73739: RET
// export function MC_InsertProduceList ( base , components ) ; begin
73740: LD_INT 0
73742: PPUSH
// if not mc_bases [ base ] then
73743: LD_EXP 65
73747: PUSH
73748: LD_VAR 0 1
73752: ARRAY
73753: NOT
73754: IFFALSE 73758
// exit ;
73756: GO 73795
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
73758: LD_ADDR_EXP 86
73762: PUSH
73763: LD_EXP 86
73767: PPUSH
73768: LD_VAR 0 1
73772: PPUSH
73773: LD_EXP 86
73777: PUSH
73778: LD_VAR 0 1
73782: ARRAY
73783: PUSH
73784: LD_VAR 0 2
73788: ADD
73789: PPUSH
73790: CALL_OW 1
73794: ST_TO_ADDR
// end ;
73795: LD_VAR 0 3
73799: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73800: LD_INT 0
73802: PPUSH
// if not mc_bases [ base ] then
73803: LD_EXP 65
73807: PUSH
73808: LD_VAR 0 1
73812: ARRAY
73813: NOT
73814: IFFALSE 73818
// exit ;
73816: GO 73872
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73818: LD_ADDR_EXP 87
73822: PUSH
73823: LD_EXP 87
73827: PPUSH
73828: LD_VAR 0 1
73832: PPUSH
73833: LD_VAR 0 2
73837: PPUSH
73838: CALL_OW 1
73842: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73843: LD_ADDR_EXP 76
73847: PUSH
73848: LD_EXP 76
73852: PPUSH
73853: LD_VAR 0 1
73857: PPUSH
73858: LD_VAR 0 2
73862: PUSH
73863: LD_INT 0
73865: PLUS
73866: PPUSH
73867: CALL_OW 1
73871: ST_TO_ADDR
// end ;
73872: LD_VAR 0 3
73876: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73877: LD_INT 0
73879: PPUSH
// if not mc_bases [ base ] then
73880: LD_EXP 65
73884: PUSH
73885: LD_VAR 0 1
73889: ARRAY
73890: NOT
73891: IFFALSE 73895
// exit ;
73893: GO 73920
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73895: LD_ADDR_EXP 76
73899: PUSH
73900: LD_EXP 76
73904: PPUSH
73905: LD_VAR 0 1
73909: PPUSH
73910: LD_VAR 0 2
73914: PPUSH
73915: CALL_OW 1
73919: ST_TO_ADDR
// end ;
73920: LD_VAR 0 3
73924: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73925: LD_INT 0
73927: PPUSH
73928: PPUSH
73929: PPUSH
73930: PPUSH
// if not mc_bases [ base ] then
73931: LD_EXP 65
73935: PUSH
73936: LD_VAR 0 1
73940: ARRAY
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 74011
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73946: LD_ADDR_EXP 85
73950: PUSH
73951: LD_EXP 85
73955: PPUSH
73956: LD_VAR 0 1
73960: PUSH
73961: LD_EXP 85
73965: PUSH
73966: LD_VAR 0 1
73970: ARRAY
73971: PUSH
73972: LD_INT 1
73974: PLUS
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PPUSH
73980: LD_VAR 0 1
73984: PUSH
73985: LD_VAR 0 2
73989: PUSH
73990: LD_VAR 0 3
73994: PUSH
73995: LD_VAR 0 4
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: PPUSH
74006: CALL 18510 0 3
74010: ST_TO_ADDR
// end ;
74011: LD_VAR 0 5
74015: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
74016: LD_INT 0
74018: PPUSH
// if not mc_bases [ base ] then
74019: LD_EXP 65
74023: PUSH
74024: LD_VAR 0 1
74028: ARRAY
74029: NOT
74030: IFFALSE 74034
// exit ;
74032: GO 74059
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
74034: LD_ADDR_EXP 102
74038: PUSH
74039: LD_EXP 102
74043: PPUSH
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: CALL_OW 1
74058: ST_TO_ADDR
// end ;
74059: LD_VAR 0 3
74063: RET
// export function MC_GetMinesField ( base ) ; begin
74064: LD_INT 0
74066: PPUSH
// result := mc_mines [ base ] ;
74067: LD_ADDR_VAR 0 2
74071: PUSH
74072: LD_EXP 78
74076: PUSH
74077: LD_VAR 0 1
74081: ARRAY
74082: ST_TO_ADDR
// end ;
74083: LD_VAR 0 2
74087: RET
// export function MC_GetProduceList ( base ) ; begin
74088: LD_INT 0
74090: PPUSH
// result := mc_produce [ base ] ;
74091: LD_ADDR_VAR 0 2
74095: PUSH
74096: LD_EXP 86
74100: PUSH
74101: LD_VAR 0 1
74105: ARRAY
74106: ST_TO_ADDR
// end ;
74107: LD_VAR 0 2
74111: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
74112: LD_INT 0
74114: PPUSH
74115: PPUSH
// if not mc_bases then
74116: LD_EXP 65
74120: NOT
74121: IFFALSE 74125
// exit ;
74123: GO 74190
// if mc_bases [ base ] then
74125: LD_EXP 65
74129: PUSH
74130: LD_VAR 0 1
74134: ARRAY
74135: IFFALSE 74190
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74137: LD_ADDR_VAR 0 3
74141: PUSH
74142: LD_EXP 65
74146: PUSH
74147: LD_VAR 0 1
74151: ARRAY
74152: PPUSH
74153: LD_INT 30
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PPUSH
74165: CALL_OW 72
74169: ST_TO_ADDR
// if result then
74170: LD_VAR 0 3
74174: IFFALSE 74190
// result := result [ 1 ] ;
74176: LD_ADDR_VAR 0 3
74180: PUSH
74181: LD_VAR 0 3
74185: PUSH
74186: LD_INT 1
74188: ARRAY
74189: ST_TO_ADDR
// end ; end ;
74190: LD_VAR 0 3
74194: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
74195: LD_INT 0
74197: PPUSH
74198: PPUSH
// if not mc_bases then
74199: LD_EXP 65
74203: NOT
74204: IFFALSE 74208
// exit ;
74206: GO 74253
// if mc_bases [ base ] then
74208: LD_EXP 65
74212: PUSH
74213: LD_VAR 0 1
74217: ARRAY
74218: IFFALSE 74253
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74220: LD_ADDR_VAR 0 3
74224: PUSH
74225: LD_EXP 65
74229: PUSH
74230: LD_VAR 0 1
74234: ARRAY
74235: PPUSH
74236: LD_INT 30
74238: PUSH
74239: LD_VAR 0 2
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PPUSH
74248: CALL_OW 72
74252: ST_TO_ADDR
// end ;
74253: LD_VAR 0 3
74257: RET
// export function MC_SetTame ( base , area ) ; begin
74258: LD_INT 0
74260: PPUSH
// if not mc_bases or not base then
74261: LD_EXP 65
74265: NOT
74266: PUSH
74267: LD_VAR 0 1
74271: NOT
74272: OR
74273: IFFALSE 74277
// exit ;
74275: GO 74302
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74277: LD_ADDR_EXP 93
74281: PUSH
74282: LD_EXP 93
74286: PPUSH
74287: LD_VAR 0 1
74291: PPUSH
74292: LD_VAR 0 2
74296: PPUSH
74297: CALL_OW 1
74301: ST_TO_ADDR
// end ;
74302: LD_VAR 0 3
74306: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74307: LD_INT 0
74309: PPUSH
74310: PPUSH
// if not mc_bases or not base then
74311: LD_EXP 65
74315: NOT
74316: PUSH
74317: LD_VAR 0 1
74321: NOT
74322: OR
74323: IFFALSE 74327
// exit ;
74325: GO 74429
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74327: LD_ADDR_VAR 0 4
74331: PUSH
74332: LD_EXP 65
74336: PUSH
74337: LD_VAR 0 1
74341: ARRAY
74342: PPUSH
74343: LD_INT 30
74345: PUSH
74346: LD_VAR 0 2
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PPUSH
74355: CALL_OW 72
74359: ST_TO_ADDR
// if not tmp then
74360: LD_VAR 0 4
74364: NOT
74365: IFFALSE 74369
// exit ;
74367: GO 74429
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74369: LD_ADDR_EXP 97
74373: PUSH
74374: LD_EXP 97
74378: PPUSH
74379: LD_VAR 0 1
74383: PPUSH
74384: LD_EXP 97
74388: PUSH
74389: LD_VAR 0 1
74393: ARRAY
74394: PPUSH
74395: LD_EXP 97
74399: PUSH
74400: LD_VAR 0 1
74404: ARRAY
74405: PUSH
74406: LD_INT 1
74408: PLUS
74409: PPUSH
74410: LD_VAR 0 4
74414: PUSH
74415: LD_INT 1
74417: ARRAY
74418: PPUSH
74419: CALL_OW 2
74423: PPUSH
74424: CALL_OW 1
74428: ST_TO_ADDR
// end ;
74429: LD_VAR 0 3
74433: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74434: LD_INT 0
74436: PPUSH
74437: PPUSH
// if not mc_bases or not base or not kinds then
74438: LD_EXP 65
74442: NOT
74443: PUSH
74444: LD_VAR 0 1
74448: NOT
74449: OR
74450: PUSH
74451: LD_VAR 0 2
74455: NOT
74456: OR
74457: IFFALSE 74461
// exit ;
74459: GO 74522
// for i in kinds do
74461: LD_ADDR_VAR 0 4
74465: PUSH
74466: LD_VAR 0 2
74470: PUSH
74471: FOR_IN
74472: IFFALSE 74520
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74474: LD_ADDR_EXP 99
74478: PUSH
74479: LD_EXP 99
74483: PPUSH
74484: LD_VAR 0 1
74488: PUSH
74489: LD_EXP 99
74493: PUSH
74494: LD_VAR 0 1
74498: ARRAY
74499: PUSH
74500: LD_INT 1
74502: PLUS
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PPUSH
74508: LD_VAR 0 4
74512: PPUSH
74513: CALL 18510 0 3
74517: ST_TO_ADDR
74518: GO 74471
74520: POP
74521: POP
// end ;
74522: LD_VAR 0 3
74526: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74527: LD_INT 0
74529: PPUSH
// if not mc_bases or not base or not areas then
74530: LD_EXP 65
74534: NOT
74535: PUSH
74536: LD_VAR 0 1
74540: NOT
74541: OR
74542: PUSH
74543: LD_VAR 0 2
74547: NOT
74548: OR
74549: IFFALSE 74553
// exit ;
74551: GO 74578
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74553: LD_ADDR_EXP 83
74557: PUSH
74558: LD_EXP 83
74562: PPUSH
74563: LD_VAR 0 1
74567: PPUSH
74568: LD_VAR 0 2
74572: PPUSH
74573: CALL_OW 1
74577: ST_TO_ADDR
// end ;
74578: LD_VAR 0 3
74582: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
74583: LD_INT 0
74585: PPUSH
// if not mc_bases or not base or not teleports_exit then
74586: LD_EXP 65
74590: NOT
74591: PUSH
74592: LD_VAR 0 1
74596: NOT
74597: OR
74598: PUSH
74599: LD_VAR 0 2
74603: NOT
74604: OR
74605: IFFALSE 74609
// exit ;
74607: GO 74634
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
74609: LD_ADDR_EXP 100
74613: PUSH
74614: LD_EXP 100
74618: PPUSH
74619: LD_VAR 0 1
74623: PPUSH
74624: LD_VAR 0 2
74628: PPUSH
74629: CALL_OW 1
74633: ST_TO_ADDR
// end ;
74634: LD_VAR 0 3
74638: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74639: LD_INT 0
74641: PPUSH
74642: PPUSH
74643: PPUSH
// if not mc_bases or not base or not ext_list then
74644: LD_EXP 65
74648: NOT
74649: PUSH
74650: LD_VAR 0 1
74654: NOT
74655: OR
74656: PUSH
74657: LD_VAR 0 5
74661: NOT
74662: OR
74663: IFFALSE 74667
// exit ;
74665: GO 74840
// tmp := GetFacExtXYD ( x , y , d ) ;
74667: LD_ADDR_VAR 0 8
74671: PUSH
74672: LD_VAR 0 2
74676: PPUSH
74677: LD_VAR 0 3
74681: PPUSH
74682: LD_VAR 0 4
74686: PPUSH
74687: CALL 47189 0 3
74691: ST_TO_ADDR
// if not tmp then
74692: LD_VAR 0 8
74696: NOT
74697: IFFALSE 74701
// exit ;
74699: GO 74840
// for i in tmp do
74701: LD_ADDR_VAR 0 7
74705: PUSH
74706: LD_VAR 0 8
74710: PUSH
74711: FOR_IN
74712: IFFALSE 74838
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74714: LD_ADDR_EXP 70
74718: PUSH
74719: LD_EXP 70
74723: PPUSH
74724: LD_VAR 0 1
74728: PPUSH
74729: LD_EXP 70
74733: PUSH
74734: LD_VAR 0 1
74738: ARRAY
74739: PPUSH
74740: LD_EXP 70
74744: PUSH
74745: LD_VAR 0 1
74749: ARRAY
74750: PUSH
74751: LD_INT 1
74753: PLUS
74754: PPUSH
74755: LD_VAR 0 5
74759: PUSH
74760: LD_INT 1
74762: ARRAY
74763: PUSH
74764: LD_VAR 0 7
74768: PUSH
74769: LD_INT 1
74771: ARRAY
74772: PUSH
74773: LD_VAR 0 7
74777: PUSH
74778: LD_INT 2
74780: ARRAY
74781: PUSH
74782: LD_VAR 0 7
74786: PUSH
74787: LD_INT 3
74789: ARRAY
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: PPUSH
74797: CALL_OW 2
74801: PPUSH
74802: CALL_OW 1
74806: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74807: LD_ADDR_VAR 0 5
74811: PUSH
74812: LD_VAR 0 5
74816: PPUSH
74817: LD_INT 1
74819: PPUSH
74820: CALL_OW 3
74824: ST_TO_ADDR
// if not ext_list then
74825: LD_VAR 0 5
74829: NOT
74830: IFFALSE 74836
// exit ;
74832: POP
74833: POP
74834: GO 74840
// end ;
74836: GO 74711
74838: POP
74839: POP
// end ;
74840: LD_VAR 0 6
74844: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74845: LD_INT 0
74847: PPUSH
// if not mc_bases or not base or not weapon_list then
74848: LD_EXP 65
74852: NOT
74853: PUSH
74854: LD_VAR 0 1
74858: NOT
74859: OR
74860: PUSH
74861: LD_VAR 0 2
74865: NOT
74866: OR
74867: IFFALSE 74871
// exit ;
74869: GO 74896
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74871: LD_ADDR_EXP 104
74875: PUSH
74876: LD_EXP 104
74880: PPUSH
74881: LD_VAR 0 1
74885: PPUSH
74886: LD_VAR 0 2
74890: PPUSH
74891: CALL_OW 1
74895: ST_TO_ADDR
// end ;
74896: LD_VAR 0 3
74900: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74901: LD_INT 0
74903: PPUSH
// if not mc_bases or not base or not tech_list then
74904: LD_EXP 65
74908: NOT
74909: PUSH
74910: LD_VAR 0 1
74914: NOT
74915: OR
74916: PUSH
74917: LD_VAR 0 2
74921: NOT
74922: OR
74923: IFFALSE 74927
// exit ;
74925: GO 74952
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74927: LD_ADDR_EXP 92
74931: PUSH
74932: LD_EXP 92
74936: PPUSH
74937: LD_VAR 0 1
74941: PPUSH
74942: LD_VAR 0 2
74946: PPUSH
74947: CALL_OW 1
74951: ST_TO_ADDR
// end ;
74952: LD_VAR 0 3
74956: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74957: LD_INT 0
74959: PPUSH
// if not mc_bases or not parking_area or not base then
74960: LD_EXP 65
74964: NOT
74965: PUSH
74966: LD_VAR 0 2
74970: NOT
74971: OR
74972: PUSH
74973: LD_VAR 0 1
74977: NOT
74978: OR
74979: IFFALSE 74983
// exit ;
74981: GO 75008
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74983: LD_ADDR_EXP 89
74987: PUSH
74988: LD_EXP 89
74992: PPUSH
74993: LD_VAR 0 1
74997: PPUSH
74998: LD_VAR 0 2
75002: PPUSH
75003: CALL_OW 1
75007: ST_TO_ADDR
// end ;
75008: LD_VAR 0 3
75012: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
75013: LD_INT 0
75015: PPUSH
// if not mc_bases or not base or not scan_area then
75016: LD_EXP 65
75020: NOT
75021: PUSH
75022: LD_VAR 0 1
75026: NOT
75027: OR
75028: PUSH
75029: LD_VAR 0 2
75033: NOT
75034: OR
75035: IFFALSE 75039
// exit ;
75037: GO 75064
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
75039: LD_ADDR_EXP 90
75043: PUSH
75044: LD_EXP 90
75048: PPUSH
75049: LD_VAR 0 1
75053: PPUSH
75054: LD_VAR 0 2
75058: PPUSH
75059: CALL_OW 1
75063: ST_TO_ADDR
// end ;
75064: LD_VAR 0 3
75068: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
75069: LD_INT 0
75071: PPUSH
75072: PPUSH
// if not mc_bases or not base then
75073: LD_EXP 65
75077: NOT
75078: PUSH
75079: LD_VAR 0 1
75083: NOT
75084: OR
75085: IFFALSE 75089
// exit ;
75087: GO 75153
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
75089: LD_ADDR_VAR 0 3
75093: PUSH
75094: LD_INT 1
75096: PUSH
75097: LD_INT 2
75099: PUSH
75100: LD_INT 3
75102: PUSH
75103: LD_INT 4
75105: PUSH
75106: LD_INT 11
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
75116: LD_ADDR_EXP 92
75120: PUSH
75121: LD_EXP 92
75125: PPUSH
75126: LD_VAR 0 1
75130: PPUSH
75131: LD_EXP 92
75135: PUSH
75136: LD_VAR 0 1
75140: ARRAY
75141: PUSH
75142: LD_VAR 0 3
75146: DIFF
75147: PPUSH
75148: CALL_OW 1
75152: ST_TO_ADDR
// end ;
75153: LD_VAR 0 2
75157: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
75158: LD_INT 0
75160: PPUSH
// result := mc_vehicles [ base ] ;
75161: LD_ADDR_VAR 0 3
75165: PUSH
75166: LD_EXP 84
75170: PUSH
75171: LD_VAR 0 1
75175: ARRAY
75176: ST_TO_ADDR
// if onlyCombat then
75177: LD_VAR 0 2
75181: IFFALSE 75346
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
75183: LD_ADDR_VAR 0 3
75187: PUSH
75188: LD_VAR 0 3
75192: PUSH
75193: LD_VAR 0 3
75197: PPUSH
75198: LD_INT 2
75200: PUSH
75201: LD_INT 34
75203: PUSH
75204: LD_INT 12
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 34
75213: PUSH
75214: LD_INT 51
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 34
75223: PUSH
75224: LD_EXP 49
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 34
75235: PUSH
75236: LD_INT 32
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 34
75245: PUSH
75246: LD_INT 13
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: LD_INT 34
75255: PUSH
75256: LD_INT 52
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 34
75265: PUSH
75266: LD_INT 14
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 34
75275: PUSH
75276: LD_INT 53
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 34
75285: PUSH
75286: LD_EXP 48
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 34
75297: PUSH
75298: LD_INT 31
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 34
75307: PUSH
75308: LD_INT 48
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 34
75317: PUSH
75318: LD_INT 8
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: PPUSH
75340: CALL_OW 72
75344: DIFF
75345: ST_TO_ADDR
// end ; end_of_file
75346: LD_VAR 0 3
75350: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75351: LD_INT 0
75353: PPUSH
75354: PPUSH
75355: PPUSH
// if not mc_bases or not skirmish then
75356: LD_EXP 65
75360: NOT
75361: PUSH
75362: LD_EXP 63
75366: NOT
75367: OR
75368: IFFALSE 75372
// exit ;
75370: GO 75537
// for i = 1 to mc_bases do
75372: LD_ADDR_VAR 0 4
75376: PUSH
75377: DOUBLE
75378: LD_INT 1
75380: DEC
75381: ST_TO_ADDR
75382: LD_EXP 65
75386: PUSH
75387: FOR_TO
75388: IFFALSE 75535
// begin if sci in mc_bases [ i ] then
75390: LD_VAR 0 2
75394: PUSH
75395: LD_EXP 65
75399: PUSH
75400: LD_VAR 0 4
75404: ARRAY
75405: IN
75406: IFFALSE 75533
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75408: LD_ADDR_EXP 94
75412: PUSH
75413: LD_EXP 94
75417: PPUSH
75418: LD_VAR 0 4
75422: PUSH
75423: LD_EXP 94
75427: PUSH
75428: LD_VAR 0 4
75432: ARRAY
75433: PUSH
75434: LD_INT 1
75436: PLUS
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PPUSH
75442: LD_VAR 0 1
75446: PPUSH
75447: CALL 18510 0 3
75451: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75452: LD_ADDR_VAR 0 5
75456: PUSH
75457: LD_EXP 65
75461: PUSH
75462: LD_VAR 0 4
75466: ARRAY
75467: PPUSH
75468: LD_INT 2
75470: PUSH
75471: LD_INT 30
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PUSH
75481: LD_INT 30
75483: PUSH
75484: LD_INT 1
75486: PUSH
75487: EMPTY
75488: LIST
75489: LIST
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: LIST
75495: PPUSH
75496: CALL_OW 72
75500: PPUSH
75501: LD_VAR 0 1
75505: PPUSH
75506: CALL_OW 74
75510: ST_TO_ADDR
// if tmp then
75511: LD_VAR 0 5
75515: IFFALSE 75531
// ComStandNearbyBuilding ( ape , tmp ) ;
75517: LD_VAR 0 1
75521: PPUSH
75522: LD_VAR 0 5
75526: PPUSH
75527: CALL 15124 0 2
// break ;
75531: GO 75535
// end ; end ;
75533: GO 75387
75535: POP
75536: POP
// end ;
75537: LD_VAR 0 3
75541: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75542: LD_INT 0
75544: PPUSH
75545: PPUSH
75546: PPUSH
// if not mc_bases or not skirmish then
75547: LD_EXP 65
75551: NOT
75552: PUSH
75553: LD_EXP 63
75557: NOT
75558: OR
75559: IFFALSE 75563
// exit ;
75561: GO 75652
// for i = 1 to mc_bases do
75563: LD_ADDR_VAR 0 4
75567: PUSH
75568: DOUBLE
75569: LD_INT 1
75571: DEC
75572: ST_TO_ADDR
75573: LD_EXP 65
75577: PUSH
75578: FOR_TO
75579: IFFALSE 75650
// begin if building in mc_busy_turret_list [ i ] then
75581: LD_VAR 0 1
75585: PUSH
75586: LD_EXP 75
75590: PUSH
75591: LD_VAR 0 4
75595: ARRAY
75596: IN
75597: IFFALSE 75648
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75599: LD_ADDR_VAR 0 5
75603: PUSH
75604: LD_EXP 75
75608: PUSH
75609: LD_VAR 0 4
75613: ARRAY
75614: PUSH
75615: LD_VAR 0 1
75619: DIFF
75620: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75621: LD_ADDR_EXP 75
75625: PUSH
75626: LD_EXP 75
75630: PPUSH
75631: LD_VAR 0 4
75635: PPUSH
75636: LD_VAR 0 5
75640: PPUSH
75641: CALL_OW 1
75645: ST_TO_ADDR
// break ;
75646: GO 75650
// end ; end ;
75648: GO 75578
75650: POP
75651: POP
// end ;
75652: LD_VAR 0 3
75656: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75657: LD_INT 0
75659: PPUSH
75660: PPUSH
75661: PPUSH
// if not mc_bases or not skirmish then
75662: LD_EXP 65
75666: NOT
75667: PUSH
75668: LD_EXP 63
75672: NOT
75673: OR
75674: IFFALSE 75678
// exit ;
75676: GO 75877
// for i = 1 to mc_bases do
75678: LD_ADDR_VAR 0 5
75682: PUSH
75683: DOUBLE
75684: LD_INT 1
75686: DEC
75687: ST_TO_ADDR
75688: LD_EXP 65
75692: PUSH
75693: FOR_TO
75694: IFFALSE 75875
// if building in mc_bases [ i ] then
75696: LD_VAR 0 1
75700: PUSH
75701: LD_EXP 65
75705: PUSH
75706: LD_VAR 0 5
75710: ARRAY
75711: IN
75712: IFFALSE 75873
// begin tmp := mc_bases [ i ] diff building ;
75714: LD_ADDR_VAR 0 6
75718: PUSH
75719: LD_EXP 65
75723: PUSH
75724: LD_VAR 0 5
75728: ARRAY
75729: PUSH
75730: LD_VAR 0 1
75734: DIFF
75735: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75736: LD_ADDR_EXP 65
75740: PUSH
75741: LD_EXP 65
75745: PPUSH
75746: LD_VAR 0 5
75750: PPUSH
75751: LD_VAR 0 6
75755: PPUSH
75756: CALL_OW 1
75760: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75761: LD_VAR 0 1
75765: PUSH
75766: LD_EXP 73
75770: PUSH
75771: LD_VAR 0 5
75775: ARRAY
75776: IN
75777: IFFALSE 75816
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75779: LD_ADDR_EXP 73
75783: PUSH
75784: LD_EXP 73
75788: PPUSH
75789: LD_VAR 0 5
75793: PPUSH
75794: LD_EXP 73
75798: PUSH
75799: LD_VAR 0 5
75803: ARRAY
75804: PUSH
75805: LD_VAR 0 1
75809: DIFF
75810: PPUSH
75811: CALL_OW 1
75815: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75816: LD_VAR 0 1
75820: PUSH
75821: LD_EXP 74
75825: PUSH
75826: LD_VAR 0 5
75830: ARRAY
75831: IN
75832: IFFALSE 75871
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75834: LD_ADDR_EXP 74
75838: PUSH
75839: LD_EXP 74
75843: PPUSH
75844: LD_VAR 0 5
75848: PPUSH
75849: LD_EXP 74
75853: PUSH
75854: LD_VAR 0 5
75858: ARRAY
75859: PUSH
75860: LD_VAR 0 1
75864: DIFF
75865: PPUSH
75866: CALL_OW 1
75870: ST_TO_ADDR
// break ;
75871: GO 75875
// end ;
75873: GO 75693
75875: POP
75876: POP
// end ;
75877: LD_VAR 0 4
75881: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75882: LD_INT 0
75884: PPUSH
75885: PPUSH
75886: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
75887: LD_EXP 65
75891: NOT
75892: PUSH
75893: LD_EXP 63
75897: NOT
75898: OR
75899: PUSH
75900: LD_VAR 0 3
75904: PUSH
75905: LD_EXP 91
75909: IN
75910: NOT
75911: OR
75912: IFFALSE 75916
// exit ;
75914: GO 76039
// for i = 1 to mc_vehicles do
75916: LD_ADDR_VAR 0 6
75920: PUSH
75921: DOUBLE
75922: LD_INT 1
75924: DEC
75925: ST_TO_ADDR
75926: LD_EXP 84
75930: PUSH
75931: FOR_TO
75932: IFFALSE 76037
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75934: LD_VAR 0 2
75938: PUSH
75939: LD_EXP 84
75943: PUSH
75944: LD_VAR 0 6
75948: ARRAY
75949: IN
75950: PUSH
75951: LD_VAR 0 1
75955: PUSH
75956: LD_EXP 84
75960: PUSH
75961: LD_VAR 0 6
75965: ARRAY
75966: IN
75967: OR
75968: IFFALSE 76035
// begin tmp := mc_vehicles [ i ] diff old ;
75970: LD_ADDR_VAR 0 7
75974: PUSH
75975: LD_EXP 84
75979: PUSH
75980: LD_VAR 0 6
75984: ARRAY
75985: PUSH
75986: LD_VAR 0 2
75990: DIFF
75991: ST_TO_ADDR
// tmp := tmp diff new ;
75992: LD_ADDR_VAR 0 7
75996: PUSH
75997: LD_VAR 0 7
76001: PUSH
76002: LD_VAR 0 1
76006: DIFF
76007: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
76008: LD_ADDR_EXP 84
76012: PUSH
76013: LD_EXP 84
76017: PPUSH
76018: LD_VAR 0 6
76022: PPUSH
76023: LD_VAR 0 7
76027: PPUSH
76028: CALL_OW 1
76032: ST_TO_ADDR
// break ;
76033: GO 76037
// end ;
76035: GO 75931
76037: POP
76038: POP
// end ;
76039: LD_VAR 0 5
76043: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
76044: LD_INT 0
76046: PPUSH
76047: PPUSH
76048: PPUSH
76049: PPUSH
// if not mc_bases or not skirmish then
76050: LD_EXP 65
76054: NOT
76055: PUSH
76056: LD_EXP 63
76060: NOT
76061: OR
76062: IFFALSE 76066
// exit ;
76064: GO 76443
// side := GetSide ( vehicle ) ;
76066: LD_ADDR_VAR 0 5
76070: PUSH
76071: LD_VAR 0 1
76075: PPUSH
76076: CALL_OW 255
76080: ST_TO_ADDR
// for i = 1 to mc_bases do
76081: LD_ADDR_VAR 0 4
76085: PUSH
76086: DOUBLE
76087: LD_INT 1
76089: DEC
76090: ST_TO_ADDR
76091: LD_EXP 65
76095: PUSH
76096: FOR_TO
76097: IFFALSE 76441
// begin if factory in mc_bases [ i ] then
76099: LD_VAR 0 2
76103: PUSH
76104: LD_EXP 65
76108: PUSH
76109: LD_VAR 0 4
76113: ARRAY
76114: IN
76115: IFFALSE 76439
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
76117: LD_EXP 87
76121: PUSH
76122: LD_VAR 0 4
76126: ARRAY
76127: PUSH
76128: LD_EXP 76
76132: PUSH
76133: LD_VAR 0 4
76137: ARRAY
76138: LESS
76139: PUSH
76140: LD_VAR 0 1
76144: PPUSH
76145: CALL_OW 264
76149: PUSH
76150: LD_INT 31
76152: PUSH
76153: LD_INT 32
76155: PUSH
76156: LD_INT 51
76158: PUSH
76159: LD_EXP 49
76163: PUSH
76164: LD_INT 12
76166: PUSH
76167: LD_INT 30
76169: PUSH
76170: LD_EXP 48
76174: PUSH
76175: LD_INT 11
76177: PUSH
76178: LD_INT 53
76180: PUSH
76181: LD_INT 14
76183: PUSH
76184: LD_EXP 52
76188: PUSH
76189: LD_INT 29
76191: PUSH
76192: LD_EXP 50
76196: PUSH
76197: LD_INT 13
76199: PUSH
76200: LD_INT 52
76202: PUSH
76203: LD_INT 48
76205: PUSH
76206: LD_INT 8
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: IN
76228: NOT
76229: AND
76230: IFFALSE 76278
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
76232: LD_ADDR_EXP 87
76236: PUSH
76237: LD_EXP 87
76241: PPUSH
76242: LD_VAR 0 4
76246: PUSH
76247: LD_EXP 87
76251: PUSH
76252: LD_VAR 0 4
76256: ARRAY
76257: PUSH
76258: LD_INT 1
76260: PLUS
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: PPUSH
76266: LD_VAR 0 1
76270: PPUSH
76271: CALL 18510 0 3
76275: ST_TO_ADDR
76276: GO 76322
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
76278: LD_ADDR_EXP 84
76282: PUSH
76283: LD_EXP 84
76287: PPUSH
76288: LD_VAR 0 4
76292: PUSH
76293: LD_EXP 84
76297: PUSH
76298: LD_VAR 0 4
76302: ARRAY
76303: PUSH
76304: LD_INT 1
76306: PLUS
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PPUSH
76312: LD_VAR 0 1
76316: PPUSH
76317: CALL 18510 0 3
76321: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
76322: LD_VAR 0 1
76326: PPUSH
76327: CALL_OW 263
76331: PUSH
76332: LD_INT 2
76334: EQUAL
76335: IFFALSE 76355
// begin repeat wait ( 0 0$1 ) ;
76337: LD_INT 35
76339: PPUSH
76340: CALL_OW 67
// until IsControledBy ( vehicle ) ;
76344: LD_VAR 0 1
76348: PPUSH
76349: CALL_OW 312
76353: IFFALSE 76337
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
76355: LD_VAR 0 1
76359: PPUSH
76360: LD_EXP 89
76364: PUSH
76365: LD_VAR 0 4
76369: ARRAY
76370: PPUSH
76371: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
76375: LD_VAR 0 1
76379: PPUSH
76380: CALL_OW 263
76384: PUSH
76385: LD_INT 1
76387: NONEQUAL
76388: IFFALSE 76392
// break ;
76390: GO 76441
// repeat wait ( 0 0$1 ) ;
76392: LD_INT 35
76394: PPUSH
76395: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
76399: LD_VAR 0 1
76403: PPUSH
76404: LD_EXP 89
76408: PUSH
76409: LD_VAR 0 4
76413: ARRAY
76414: PPUSH
76415: CALL_OW 308
76419: IFFALSE 76392
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
76421: LD_VAR 0 1
76425: PPUSH
76426: CALL_OW 311
76430: PPUSH
76431: CALL_OW 121
// exit ;
76435: POP
76436: POP
76437: GO 76443
// end ; end ;
76439: GO 76096
76441: POP
76442: POP
// end ;
76443: LD_VAR 0 3
76447: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76448: LD_INT 0
76450: PPUSH
76451: PPUSH
76452: PPUSH
76453: PPUSH
// if not mc_bases or not skirmish then
76454: LD_EXP 65
76458: NOT
76459: PUSH
76460: LD_EXP 63
76464: NOT
76465: OR
76466: IFFALSE 76470
// exit ;
76468: GO 76823
// repeat wait ( 0 0$1 ) ;
76470: LD_INT 35
76472: PPUSH
76473: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76477: LD_VAR 0 2
76481: PPUSH
76482: LD_VAR 0 3
76486: PPUSH
76487: CALL_OW 284
76491: IFFALSE 76470
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76493: LD_VAR 0 2
76497: PPUSH
76498: LD_VAR 0 3
76502: PPUSH
76503: CALL_OW 283
76507: PUSH
76508: LD_INT 4
76510: EQUAL
76511: IFFALSE 76515
// exit ;
76513: GO 76823
// for i = 1 to mc_bases do
76515: LD_ADDR_VAR 0 7
76519: PUSH
76520: DOUBLE
76521: LD_INT 1
76523: DEC
76524: ST_TO_ADDR
76525: LD_EXP 65
76529: PUSH
76530: FOR_TO
76531: IFFALSE 76821
// begin if mc_crates_area [ i ] then
76533: LD_EXP 83
76537: PUSH
76538: LD_VAR 0 7
76542: ARRAY
76543: IFFALSE 76654
// for j in mc_crates_area [ i ] do
76545: LD_ADDR_VAR 0 8
76549: PUSH
76550: LD_EXP 83
76554: PUSH
76555: LD_VAR 0 7
76559: ARRAY
76560: PUSH
76561: FOR_IN
76562: IFFALSE 76652
// if InArea ( x , y , j ) then
76564: LD_VAR 0 2
76568: PPUSH
76569: LD_VAR 0 3
76573: PPUSH
76574: LD_VAR 0 8
76578: PPUSH
76579: CALL_OW 309
76583: IFFALSE 76650
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76585: LD_ADDR_EXP 81
76589: PUSH
76590: LD_EXP 81
76594: PPUSH
76595: LD_VAR 0 7
76599: PUSH
76600: LD_EXP 81
76604: PUSH
76605: LD_VAR 0 7
76609: ARRAY
76610: PUSH
76611: LD_INT 1
76613: PLUS
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: PPUSH
76619: LD_VAR 0 4
76623: PUSH
76624: LD_VAR 0 2
76628: PUSH
76629: LD_VAR 0 3
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: LIST
76638: PPUSH
76639: CALL 18510 0 3
76643: ST_TO_ADDR
// exit ;
76644: POP
76645: POP
76646: POP
76647: POP
76648: GO 76823
// end ;
76650: GO 76561
76652: POP
76653: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76654: LD_ADDR_VAR 0 9
76658: PUSH
76659: LD_EXP 65
76663: PUSH
76664: LD_VAR 0 7
76668: ARRAY
76669: PPUSH
76670: LD_INT 2
76672: PUSH
76673: LD_INT 30
76675: PUSH
76676: LD_INT 0
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: LD_INT 30
76685: PUSH
76686: LD_INT 1
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: LIST
76697: PPUSH
76698: CALL_OW 72
76702: ST_TO_ADDR
// if not depot then
76703: LD_VAR 0 9
76707: NOT
76708: IFFALSE 76712
// continue ;
76710: GO 76530
// for j in depot do
76712: LD_ADDR_VAR 0 8
76716: PUSH
76717: LD_VAR 0 9
76721: PUSH
76722: FOR_IN
76723: IFFALSE 76817
// if GetDistUnitXY ( j , x , y ) < 30 then
76725: LD_VAR 0 8
76729: PPUSH
76730: LD_VAR 0 2
76734: PPUSH
76735: LD_VAR 0 3
76739: PPUSH
76740: CALL_OW 297
76744: PUSH
76745: LD_INT 30
76747: LESS
76748: IFFALSE 76815
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76750: LD_ADDR_EXP 81
76754: PUSH
76755: LD_EXP 81
76759: PPUSH
76760: LD_VAR 0 7
76764: PUSH
76765: LD_EXP 81
76769: PUSH
76770: LD_VAR 0 7
76774: ARRAY
76775: PUSH
76776: LD_INT 1
76778: PLUS
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PPUSH
76784: LD_VAR 0 4
76788: PUSH
76789: LD_VAR 0 2
76793: PUSH
76794: LD_VAR 0 3
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: LIST
76803: PPUSH
76804: CALL 18510 0 3
76808: ST_TO_ADDR
// exit ;
76809: POP
76810: POP
76811: POP
76812: POP
76813: GO 76823
// end ;
76815: GO 76722
76817: POP
76818: POP
// end ;
76819: GO 76530
76821: POP
76822: POP
// end ;
76823: LD_VAR 0 6
76827: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76828: LD_INT 0
76830: PPUSH
76831: PPUSH
76832: PPUSH
76833: PPUSH
// if not mc_bases or not skirmish then
76834: LD_EXP 65
76838: NOT
76839: PUSH
76840: LD_EXP 63
76844: NOT
76845: OR
76846: IFFALSE 76850
// exit ;
76848: GO 77127
// side := GetSide ( lab ) ;
76850: LD_ADDR_VAR 0 4
76854: PUSH
76855: LD_VAR 0 2
76859: PPUSH
76860: CALL_OW 255
76864: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76865: LD_VAR 0 4
76869: PUSH
76870: LD_EXP 91
76874: IN
76875: NOT
76876: PUSH
76877: LD_EXP 92
76881: NOT
76882: OR
76883: PUSH
76884: LD_EXP 65
76888: NOT
76889: OR
76890: IFFALSE 76894
// exit ;
76892: GO 77127
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76894: LD_ADDR_EXP 92
76898: PUSH
76899: LD_EXP 92
76903: PPUSH
76904: LD_VAR 0 4
76908: PPUSH
76909: LD_EXP 92
76913: PUSH
76914: LD_VAR 0 4
76918: ARRAY
76919: PUSH
76920: LD_VAR 0 1
76924: DIFF
76925: PPUSH
76926: CALL_OW 1
76930: ST_TO_ADDR
// for i = 1 to mc_bases do
76931: LD_ADDR_VAR 0 5
76935: PUSH
76936: DOUBLE
76937: LD_INT 1
76939: DEC
76940: ST_TO_ADDR
76941: LD_EXP 65
76945: PUSH
76946: FOR_TO
76947: IFFALSE 77125
// begin if lab in mc_bases [ i ] then
76949: LD_VAR 0 2
76953: PUSH
76954: LD_EXP 65
76958: PUSH
76959: LD_VAR 0 5
76963: ARRAY
76964: IN
76965: IFFALSE 77123
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76967: LD_VAR 0 1
76971: PUSH
76972: LD_INT 11
76974: PUSH
76975: LD_INT 4
76977: PUSH
76978: LD_INT 3
76980: PUSH
76981: LD_INT 2
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: IN
76990: PUSH
76991: LD_EXP 95
76995: PUSH
76996: LD_VAR 0 5
77000: ARRAY
77001: AND
77002: IFFALSE 77123
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
77004: LD_ADDR_VAR 0 6
77008: PUSH
77009: LD_EXP 95
77013: PUSH
77014: LD_VAR 0 5
77018: ARRAY
77019: PUSH
77020: LD_INT 1
77022: ARRAY
77023: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
77024: LD_ADDR_EXP 95
77028: PUSH
77029: LD_EXP 95
77033: PPUSH
77034: LD_VAR 0 5
77038: PPUSH
77039: EMPTY
77040: PPUSH
77041: CALL_OW 1
77045: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
77046: LD_VAR 0 6
77050: PPUSH
77051: LD_INT 0
77053: PPUSH
77054: CALL_OW 109
// ComExitBuilding ( tmp ) ;
77058: LD_VAR 0 6
77062: PPUSH
77063: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
77067: LD_ADDR_EXP 94
77071: PUSH
77072: LD_EXP 94
77076: PPUSH
77077: LD_VAR 0 5
77081: PPUSH
77082: LD_EXP 94
77086: PUSH
77087: LD_VAR 0 5
77091: ARRAY
77092: PPUSH
77093: LD_INT 1
77095: PPUSH
77096: LD_VAR 0 6
77100: PPUSH
77101: CALL_OW 2
77105: PPUSH
77106: CALL_OW 1
77110: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
77111: LD_VAR 0 5
77115: PPUSH
77116: LD_INT 112
77118: PPUSH
77119: CALL 54139 0 2
// end ; end ; end ;
77123: GO 76946
77125: POP
77126: POP
// end ;
77127: LD_VAR 0 3
77131: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
77132: LD_INT 0
77134: PPUSH
77135: PPUSH
77136: PPUSH
77137: PPUSH
77138: PPUSH
77139: PPUSH
77140: PPUSH
77141: PPUSH
// if not mc_bases or not skirmish then
77142: LD_EXP 65
77146: NOT
77147: PUSH
77148: LD_EXP 63
77152: NOT
77153: OR
77154: IFFALSE 77158
// exit ;
77156: GO 78529
// for i = 1 to mc_bases do
77158: LD_ADDR_VAR 0 3
77162: PUSH
77163: DOUBLE
77164: LD_INT 1
77166: DEC
77167: ST_TO_ADDR
77168: LD_EXP 65
77172: PUSH
77173: FOR_TO
77174: IFFALSE 78527
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
77176: LD_VAR 0 1
77180: PUSH
77181: LD_EXP 65
77185: PUSH
77186: LD_VAR 0 3
77190: ARRAY
77191: IN
77192: PUSH
77193: LD_VAR 0 1
77197: PUSH
77198: LD_EXP 72
77202: PUSH
77203: LD_VAR 0 3
77207: ARRAY
77208: IN
77209: OR
77210: PUSH
77211: LD_VAR 0 1
77215: PUSH
77216: LD_EXP 87
77220: PUSH
77221: LD_VAR 0 3
77225: ARRAY
77226: IN
77227: OR
77228: PUSH
77229: LD_VAR 0 1
77233: PUSH
77234: LD_EXP 84
77238: PUSH
77239: LD_VAR 0 3
77243: ARRAY
77244: IN
77245: OR
77246: PUSH
77247: LD_VAR 0 1
77251: PUSH
77252: LD_EXP 94
77256: PUSH
77257: LD_VAR 0 3
77261: ARRAY
77262: IN
77263: OR
77264: PUSH
77265: LD_VAR 0 1
77269: PUSH
77270: LD_EXP 95
77274: PUSH
77275: LD_VAR 0 3
77279: ARRAY
77280: IN
77281: OR
77282: IFFALSE 78525
// begin if un in mc_ape [ i ] then
77284: LD_VAR 0 1
77288: PUSH
77289: LD_EXP 94
77293: PUSH
77294: LD_VAR 0 3
77298: ARRAY
77299: IN
77300: IFFALSE 77339
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
77302: LD_ADDR_EXP 94
77306: PUSH
77307: LD_EXP 94
77311: PPUSH
77312: LD_VAR 0 3
77316: PPUSH
77317: LD_EXP 94
77321: PUSH
77322: LD_VAR 0 3
77326: ARRAY
77327: PUSH
77328: LD_VAR 0 1
77332: DIFF
77333: PPUSH
77334: CALL_OW 1
77338: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
77339: LD_VAR 0 1
77343: PUSH
77344: LD_EXP 95
77348: PUSH
77349: LD_VAR 0 3
77353: ARRAY
77354: IN
77355: IFFALSE 77379
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
77357: LD_ADDR_EXP 95
77361: PUSH
77362: LD_EXP 95
77366: PPUSH
77367: LD_VAR 0 3
77371: PPUSH
77372: EMPTY
77373: PPUSH
77374: CALL_OW 1
77378: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
77379: LD_VAR 0 1
77383: PPUSH
77384: CALL_OW 247
77388: PUSH
77389: LD_INT 2
77391: EQUAL
77392: PUSH
77393: LD_VAR 0 1
77397: PPUSH
77398: CALL_OW 110
77402: PUSH
77403: LD_INT 20
77405: EQUAL
77406: PUSH
77407: LD_VAR 0 1
77411: PUSH
77412: LD_EXP 87
77416: PUSH
77417: LD_VAR 0 3
77421: ARRAY
77422: IN
77423: OR
77424: PUSH
77425: LD_VAR 0 1
77429: PPUSH
77430: CALL_OW 264
77434: PUSH
77435: LD_INT 12
77437: PUSH
77438: LD_INT 51
77440: PUSH
77441: LD_EXP 49
77445: PUSH
77446: LD_INT 32
77448: PUSH
77449: LD_INT 13
77451: PUSH
77452: LD_INT 52
77454: PUSH
77455: LD_INT 31
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: IN
77467: OR
77468: AND
77469: IFFALSE 77777
// begin if un in mc_defender [ i ] then
77471: LD_VAR 0 1
77475: PUSH
77476: LD_EXP 87
77480: PUSH
77481: LD_VAR 0 3
77485: ARRAY
77486: IN
77487: IFFALSE 77526
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77489: LD_ADDR_EXP 87
77493: PUSH
77494: LD_EXP 87
77498: PPUSH
77499: LD_VAR 0 3
77503: PPUSH
77504: LD_EXP 87
77508: PUSH
77509: LD_VAR 0 3
77513: ARRAY
77514: PUSH
77515: LD_VAR 0 1
77519: DIFF
77520: PPUSH
77521: CALL_OW 1
77525: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
77526: LD_ADDR_VAR 0 8
77530: PUSH
77531: LD_VAR 0 3
77535: PPUSH
77536: LD_INT 3
77538: PPUSH
77539: CALL 74195 0 2
77543: ST_TO_ADDR
// if fac then
77544: LD_VAR 0 8
77548: IFFALSE 77777
// begin for j in fac do
77550: LD_ADDR_VAR 0 4
77554: PUSH
77555: LD_VAR 0 8
77559: PUSH
77560: FOR_IN
77561: IFFALSE 77775
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
77563: LD_ADDR_VAR 0 9
77567: PUSH
77568: LD_VAR 0 8
77572: PPUSH
77573: LD_VAR 0 1
77577: PPUSH
77578: CALL_OW 265
77582: PPUSH
77583: LD_VAR 0 1
77587: PPUSH
77588: CALL_OW 262
77592: PPUSH
77593: LD_VAR 0 1
77597: PPUSH
77598: CALL_OW 263
77602: PPUSH
77603: LD_VAR 0 1
77607: PPUSH
77608: CALL_OW 264
77612: PPUSH
77613: CALL 16042 0 5
77617: ST_TO_ADDR
// if components then
77618: LD_VAR 0 9
77622: IFFALSE 77773
// begin if GetWeapon ( un ) = ar_control_tower then
77624: LD_VAR 0 1
77628: PPUSH
77629: CALL_OW 264
77633: PUSH
77634: LD_INT 31
77636: EQUAL
77637: IFFALSE 77754
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
77639: LD_VAR 0 1
77643: PPUSH
77644: CALL_OW 311
77648: PPUSH
77649: LD_INT 0
77651: PPUSH
77652: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
77656: LD_ADDR_EXP 105
77660: PUSH
77661: LD_EXP 105
77665: PPUSH
77666: LD_VAR 0 3
77670: PPUSH
77671: LD_EXP 105
77675: PUSH
77676: LD_VAR 0 3
77680: ARRAY
77681: PUSH
77682: LD_VAR 0 1
77686: PPUSH
77687: CALL_OW 311
77691: DIFF
77692: PPUSH
77693: CALL_OW 1
77697: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
77698: LD_ADDR_VAR 0 7
77702: PUSH
77703: LD_EXP 86
77707: PUSH
77708: LD_VAR 0 3
77712: ARRAY
77713: PPUSH
77714: LD_INT 1
77716: PPUSH
77717: LD_VAR 0 9
77721: PPUSH
77722: CALL_OW 2
77726: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77727: LD_ADDR_EXP 86
77731: PUSH
77732: LD_EXP 86
77736: PPUSH
77737: LD_VAR 0 3
77741: PPUSH
77742: LD_VAR 0 7
77746: PPUSH
77747: CALL_OW 1
77751: ST_TO_ADDR
// end else
77752: GO 77771
// MC_InsertProduceList ( i , [ components ] ) ;
77754: LD_VAR 0 3
77758: PPUSH
77759: LD_VAR 0 9
77763: PUSH
77764: EMPTY
77765: LIST
77766: PPUSH
77767: CALL 73740 0 2
// break ;
77771: GO 77775
// end ; end ;
77773: GO 77560
77775: POP
77776: POP
// end ; end ; if GetType ( un ) = unit_building then
77777: LD_VAR 0 1
77781: PPUSH
77782: CALL_OW 247
77786: PUSH
77787: LD_INT 3
77789: EQUAL
77790: IFFALSE 78193
// begin btype := GetBType ( un ) ;
77792: LD_ADDR_VAR 0 5
77796: PUSH
77797: LD_VAR 0 1
77801: PPUSH
77802: CALL_OW 266
77806: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
77807: LD_VAR 0 5
77811: PUSH
77812: LD_INT 29
77814: PUSH
77815: LD_INT 30
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: IN
77822: IFFALSE 77895
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
77824: LD_VAR 0 1
77828: PPUSH
77829: CALL_OW 250
77833: PPUSH
77834: LD_VAR 0 1
77838: PPUSH
77839: CALL_OW 251
77843: PPUSH
77844: LD_VAR 0 1
77848: PPUSH
77849: CALL_OW 255
77853: PPUSH
77854: CALL_OW 440
77858: NOT
77859: IFFALSE 77895
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
77861: LD_VAR 0 1
77865: PPUSH
77866: CALL_OW 250
77870: PPUSH
77871: LD_VAR 0 1
77875: PPUSH
77876: CALL_OW 251
77880: PPUSH
77881: LD_VAR 0 1
77885: PPUSH
77886: CALL_OW 255
77890: PPUSH
77891: CALL_OW 441
// end ; if btype = b_warehouse then
77895: LD_VAR 0 5
77899: PUSH
77900: LD_INT 1
77902: EQUAL
77903: IFFALSE 77921
// begin btype := b_depot ;
77905: LD_ADDR_VAR 0 5
77909: PUSH
77910: LD_INT 0
77912: ST_TO_ADDR
// pos := 1 ;
77913: LD_ADDR_VAR 0 6
77917: PUSH
77918: LD_INT 1
77920: ST_TO_ADDR
// end ; if btype = b_factory then
77921: LD_VAR 0 5
77925: PUSH
77926: LD_INT 3
77928: EQUAL
77929: IFFALSE 77947
// begin btype := b_workshop ;
77931: LD_ADDR_VAR 0 5
77935: PUSH
77936: LD_INT 2
77938: ST_TO_ADDR
// pos := 1 ;
77939: LD_ADDR_VAR 0 6
77943: PUSH
77944: LD_INT 1
77946: ST_TO_ADDR
// end ; if btype = b_barracks then
77947: LD_VAR 0 5
77951: PUSH
77952: LD_INT 5
77954: EQUAL
77955: IFFALSE 77965
// btype := b_armoury ;
77957: LD_ADDR_VAR 0 5
77961: PUSH
77962: LD_INT 4
77964: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
77965: LD_VAR 0 5
77969: PUSH
77970: LD_INT 7
77972: PUSH
77973: LD_INT 8
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: IN
77980: IFFALSE 77990
// btype := b_lab ;
77982: LD_ADDR_VAR 0 5
77986: PUSH
77987: LD_INT 6
77989: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77990: LD_ADDR_EXP 70
77994: PUSH
77995: LD_EXP 70
77999: PPUSH
78000: LD_VAR 0 3
78004: PUSH
78005: LD_EXP 70
78009: PUSH
78010: LD_VAR 0 3
78014: ARRAY
78015: PUSH
78016: LD_INT 1
78018: PLUS
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PPUSH
78024: LD_VAR 0 5
78028: PUSH
78029: LD_VAR 0 1
78033: PPUSH
78034: CALL_OW 250
78038: PUSH
78039: LD_VAR 0 1
78043: PPUSH
78044: CALL_OW 251
78048: PUSH
78049: LD_VAR 0 1
78053: PPUSH
78054: CALL_OW 254
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: PPUSH
78065: CALL 18510 0 3
78069: ST_TO_ADDR
// if pos = 1 then
78070: LD_VAR 0 6
78074: PUSH
78075: LD_INT 1
78077: EQUAL
78078: IFFALSE 78193
// begin tmp := mc_build_list [ i ] ;
78080: LD_ADDR_VAR 0 7
78084: PUSH
78085: LD_EXP 70
78089: PUSH
78090: LD_VAR 0 3
78094: ARRAY
78095: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
78096: LD_VAR 0 7
78100: PPUSH
78101: LD_INT 2
78103: PUSH
78104: LD_INT 30
78106: PUSH
78107: LD_INT 0
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: LD_INT 30
78116: PUSH
78117: LD_INT 1
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: LIST
78128: PPUSH
78129: CALL_OW 72
78133: IFFALSE 78143
// pos := 2 ;
78135: LD_ADDR_VAR 0 6
78139: PUSH
78140: LD_INT 2
78142: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
78143: LD_ADDR_VAR 0 7
78147: PUSH
78148: LD_VAR 0 7
78152: PPUSH
78153: LD_VAR 0 6
78157: PPUSH
78158: LD_VAR 0 7
78162: PPUSH
78163: CALL 18836 0 3
78167: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
78168: LD_ADDR_EXP 70
78172: PUSH
78173: LD_EXP 70
78177: PPUSH
78178: LD_VAR 0 3
78182: PPUSH
78183: LD_VAR 0 7
78187: PPUSH
78188: CALL_OW 1
78192: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
78193: LD_VAR 0 1
78197: PUSH
78198: LD_EXP 65
78202: PUSH
78203: LD_VAR 0 3
78207: ARRAY
78208: IN
78209: IFFALSE 78248
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
78211: LD_ADDR_EXP 65
78215: PUSH
78216: LD_EXP 65
78220: PPUSH
78221: LD_VAR 0 3
78225: PPUSH
78226: LD_EXP 65
78230: PUSH
78231: LD_VAR 0 3
78235: ARRAY
78236: PUSH
78237: LD_VAR 0 1
78241: DIFF
78242: PPUSH
78243: CALL_OW 1
78247: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
78248: LD_VAR 0 1
78252: PUSH
78253: LD_EXP 72
78257: PUSH
78258: LD_VAR 0 3
78262: ARRAY
78263: IN
78264: IFFALSE 78303
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
78266: LD_ADDR_EXP 72
78270: PUSH
78271: LD_EXP 72
78275: PPUSH
78276: LD_VAR 0 3
78280: PPUSH
78281: LD_EXP 72
78285: PUSH
78286: LD_VAR 0 3
78290: ARRAY
78291: PUSH
78292: LD_VAR 0 1
78296: DIFF
78297: PPUSH
78298: CALL_OW 1
78302: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
78303: LD_VAR 0 1
78307: PUSH
78308: LD_EXP 84
78312: PUSH
78313: LD_VAR 0 3
78317: ARRAY
78318: IN
78319: IFFALSE 78358
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
78321: LD_ADDR_EXP 84
78325: PUSH
78326: LD_EXP 84
78330: PPUSH
78331: LD_VAR 0 3
78335: PPUSH
78336: LD_EXP 84
78340: PUSH
78341: LD_VAR 0 3
78345: ARRAY
78346: PUSH
78347: LD_VAR 0 1
78351: DIFF
78352: PPUSH
78353: CALL_OW 1
78357: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
78358: LD_VAR 0 1
78362: PUSH
78363: LD_EXP 87
78367: PUSH
78368: LD_VAR 0 3
78372: ARRAY
78373: IN
78374: IFFALSE 78413
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
78376: LD_ADDR_EXP 87
78380: PUSH
78381: LD_EXP 87
78385: PPUSH
78386: LD_VAR 0 3
78390: PPUSH
78391: LD_EXP 87
78395: PUSH
78396: LD_VAR 0 3
78400: ARRAY
78401: PUSH
78402: LD_VAR 0 1
78406: DIFF
78407: PPUSH
78408: CALL_OW 1
78412: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
78413: LD_VAR 0 1
78417: PUSH
78418: LD_EXP 74
78422: PUSH
78423: LD_VAR 0 3
78427: ARRAY
78428: IN
78429: IFFALSE 78468
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
78431: LD_ADDR_EXP 74
78435: PUSH
78436: LD_EXP 74
78440: PPUSH
78441: LD_VAR 0 3
78445: PPUSH
78446: LD_EXP 74
78450: PUSH
78451: LD_VAR 0 3
78455: ARRAY
78456: PUSH
78457: LD_VAR 0 1
78461: DIFF
78462: PPUSH
78463: CALL_OW 1
78467: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
78468: LD_VAR 0 1
78472: PUSH
78473: LD_EXP 73
78477: PUSH
78478: LD_VAR 0 3
78482: ARRAY
78483: IN
78484: IFFALSE 78523
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
78486: LD_ADDR_EXP 73
78490: PUSH
78491: LD_EXP 73
78495: PPUSH
78496: LD_VAR 0 3
78500: PPUSH
78501: LD_EXP 73
78505: PUSH
78506: LD_VAR 0 3
78510: ARRAY
78511: PUSH
78512: LD_VAR 0 1
78516: DIFF
78517: PPUSH
78518: CALL_OW 1
78522: ST_TO_ADDR
// end ; break ;
78523: GO 78527
// end ;
78525: GO 77173
78527: POP
78528: POP
// end ;
78529: LD_VAR 0 2
78533: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
78534: LD_INT 0
78536: PPUSH
78537: PPUSH
78538: PPUSH
// if not mc_bases or not skirmish then
78539: LD_EXP 65
78543: NOT
78544: PUSH
78545: LD_EXP 63
78549: NOT
78550: OR
78551: IFFALSE 78555
// exit ;
78553: GO 78770
// for i = 1 to mc_bases do
78555: LD_ADDR_VAR 0 3
78559: PUSH
78560: DOUBLE
78561: LD_INT 1
78563: DEC
78564: ST_TO_ADDR
78565: LD_EXP 65
78569: PUSH
78570: FOR_TO
78571: IFFALSE 78768
// begin if building in mc_construct_list [ i ] then
78573: LD_VAR 0 1
78577: PUSH
78578: LD_EXP 72
78582: PUSH
78583: LD_VAR 0 3
78587: ARRAY
78588: IN
78589: IFFALSE 78766
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78591: LD_ADDR_EXP 72
78595: PUSH
78596: LD_EXP 72
78600: PPUSH
78601: LD_VAR 0 3
78605: PPUSH
78606: LD_EXP 72
78610: PUSH
78611: LD_VAR 0 3
78615: ARRAY
78616: PUSH
78617: LD_VAR 0 1
78621: DIFF
78622: PPUSH
78623: CALL_OW 1
78627: ST_TO_ADDR
// if building in mc_lab [ i ] then
78628: LD_VAR 0 1
78632: PUSH
78633: LD_EXP 98
78637: PUSH
78638: LD_VAR 0 3
78642: ARRAY
78643: IN
78644: IFFALSE 78699
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
78646: LD_ADDR_EXP 99
78650: PUSH
78651: LD_EXP 99
78655: PPUSH
78656: LD_VAR 0 3
78660: PPUSH
78661: LD_EXP 99
78665: PUSH
78666: LD_VAR 0 3
78670: ARRAY
78671: PPUSH
78672: LD_INT 1
78674: PPUSH
78675: LD_EXP 99
78679: PUSH
78680: LD_VAR 0 3
78684: ARRAY
78685: PPUSH
78686: LD_INT 0
78688: PPUSH
78689: CALL 17928 0 4
78693: PPUSH
78694: CALL_OW 1
78698: ST_TO_ADDR
// if not building in mc_bases [ i ] then
78699: LD_VAR 0 1
78703: PUSH
78704: LD_EXP 65
78708: PUSH
78709: LD_VAR 0 3
78713: ARRAY
78714: IN
78715: NOT
78716: IFFALSE 78762
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78718: LD_ADDR_EXP 65
78722: PUSH
78723: LD_EXP 65
78727: PPUSH
78728: LD_VAR 0 3
78732: PUSH
78733: LD_EXP 65
78737: PUSH
78738: LD_VAR 0 3
78742: ARRAY
78743: PUSH
78744: LD_INT 1
78746: PLUS
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PPUSH
78752: LD_VAR 0 1
78756: PPUSH
78757: CALL 18510 0 3
78761: ST_TO_ADDR
// exit ;
78762: POP
78763: POP
78764: GO 78770
// end ; end ;
78766: GO 78570
78768: POP
78769: POP
// end ;
78770: LD_VAR 0 2
78774: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
78775: LD_INT 0
78777: PPUSH
78778: PPUSH
78779: PPUSH
78780: PPUSH
78781: PPUSH
78782: PPUSH
78783: PPUSH
// if not mc_bases or not skirmish then
78784: LD_EXP 65
78788: NOT
78789: PUSH
78790: LD_EXP 63
78794: NOT
78795: OR
78796: IFFALSE 78800
// exit ;
78798: GO 79461
// for i = 1 to mc_bases do
78800: LD_ADDR_VAR 0 3
78804: PUSH
78805: DOUBLE
78806: LD_INT 1
78808: DEC
78809: ST_TO_ADDR
78810: LD_EXP 65
78814: PUSH
78815: FOR_TO
78816: IFFALSE 79459
// begin if building in mc_construct_list [ i ] then
78818: LD_VAR 0 1
78822: PUSH
78823: LD_EXP 72
78827: PUSH
78828: LD_VAR 0 3
78832: ARRAY
78833: IN
78834: IFFALSE 79457
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78836: LD_ADDR_EXP 72
78840: PUSH
78841: LD_EXP 72
78845: PPUSH
78846: LD_VAR 0 3
78850: PPUSH
78851: LD_EXP 72
78855: PUSH
78856: LD_VAR 0 3
78860: ARRAY
78861: PUSH
78862: LD_VAR 0 1
78866: DIFF
78867: PPUSH
78868: CALL_OW 1
78872: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78873: LD_ADDR_EXP 65
78877: PUSH
78878: LD_EXP 65
78882: PPUSH
78883: LD_VAR 0 3
78887: PUSH
78888: LD_EXP 65
78892: PUSH
78893: LD_VAR 0 3
78897: ARRAY
78898: PUSH
78899: LD_INT 1
78901: PLUS
78902: PUSH
78903: EMPTY
78904: LIST
78905: LIST
78906: PPUSH
78907: LD_VAR 0 1
78911: PPUSH
78912: CALL 18510 0 3
78916: ST_TO_ADDR
// btype := GetBType ( building ) ;
78917: LD_ADDR_VAR 0 5
78921: PUSH
78922: LD_VAR 0 1
78926: PPUSH
78927: CALL_OW 266
78931: ST_TO_ADDR
// side := GetSide ( building ) ;
78932: LD_ADDR_VAR 0 8
78936: PUSH
78937: LD_VAR 0 1
78941: PPUSH
78942: CALL_OW 255
78946: ST_TO_ADDR
// if btype = b_lab then
78947: LD_VAR 0 5
78951: PUSH
78952: LD_INT 6
78954: EQUAL
78955: IFFALSE 79005
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78957: LD_ADDR_EXP 98
78961: PUSH
78962: LD_EXP 98
78966: PPUSH
78967: LD_VAR 0 3
78971: PUSH
78972: LD_EXP 98
78976: PUSH
78977: LD_VAR 0 3
78981: ARRAY
78982: PUSH
78983: LD_INT 1
78985: PLUS
78986: PUSH
78987: EMPTY
78988: LIST
78989: LIST
78990: PPUSH
78991: LD_VAR 0 1
78995: PPUSH
78996: CALL 18510 0 3
79000: ST_TO_ADDR
// exit ;
79001: POP
79002: POP
79003: GO 79461
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
79005: LD_VAR 0 5
79009: PUSH
79010: LD_INT 0
79012: PUSH
79013: LD_INT 2
79015: PUSH
79016: LD_INT 4
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: LIST
79023: IN
79024: IFFALSE 79148
// begin if btype = b_armoury then
79026: LD_VAR 0 5
79030: PUSH
79031: LD_INT 4
79033: EQUAL
79034: IFFALSE 79044
// btype := b_barracks ;
79036: LD_ADDR_VAR 0 5
79040: PUSH
79041: LD_INT 5
79043: ST_TO_ADDR
// if btype = b_depot then
79044: LD_VAR 0 5
79048: PUSH
79049: LD_INT 0
79051: EQUAL
79052: IFFALSE 79062
// btype := b_warehouse ;
79054: LD_ADDR_VAR 0 5
79058: PUSH
79059: LD_INT 1
79061: ST_TO_ADDR
// if btype = b_workshop then
79062: LD_VAR 0 5
79066: PUSH
79067: LD_INT 2
79069: EQUAL
79070: IFFALSE 79080
// btype := b_factory ;
79072: LD_ADDR_VAR 0 5
79076: PUSH
79077: LD_INT 3
79079: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
79080: LD_VAR 0 5
79084: PPUSH
79085: LD_VAR 0 8
79089: PPUSH
79090: CALL_OW 323
79094: PUSH
79095: LD_INT 1
79097: EQUAL
79098: IFFALSE 79144
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
79100: LD_ADDR_EXP 97
79104: PUSH
79105: LD_EXP 97
79109: PPUSH
79110: LD_VAR 0 3
79114: PUSH
79115: LD_EXP 97
79119: PUSH
79120: LD_VAR 0 3
79124: ARRAY
79125: PUSH
79126: LD_INT 1
79128: PLUS
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PPUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL 18510 0 3
79143: ST_TO_ADDR
// exit ;
79144: POP
79145: POP
79146: GO 79461
// end ; if btype in [ b_bunker , b_turret ] then
79148: LD_VAR 0 5
79152: PUSH
79153: LD_INT 32
79155: PUSH
79156: LD_INT 33
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: IN
79163: IFFALSE 79453
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
79165: LD_ADDR_EXP 73
79169: PUSH
79170: LD_EXP 73
79174: PPUSH
79175: LD_VAR 0 3
79179: PUSH
79180: LD_EXP 73
79184: PUSH
79185: LD_VAR 0 3
79189: ARRAY
79190: PUSH
79191: LD_INT 1
79193: PLUS
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PPUSH
79199: LD_VAR 0 1
79203: PPUSH
79204: CALL 18510 0 3
79208: ST_TO_ADDR
// if btype = b_bunker then
79209: LD_VAR 0 5
79213: PUSH
79214: LD_INT 32
79216: EQUAL
79217: IFFALSE 79453
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79219: LD_ADDR_EXP 74
79223: PUSH
79224: LD_EXP 74
79228: PPUSH
79229: LD_VAR 0 3
79233: PUSH
79234: LD_EXP 74
79238: PUSH
79239: LD_VAR 0 3
79243: ARRAY
79244: PUSH
79245: LD_INT 1
79247: PLUS
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PPUSH
79253: LD_VAR 0 1
79257: PPUSH
79258: CALL 18510 0 3
79262: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
79263: LD_ADDR_VAR 0 6
79267: PUSH
79268: LD_EXP 65
79272: PUSH
79273: LD_VAR 0 3
79277: ARRAY
79278: PPUSH
79279: LD_INT 25
79281: PUSH
79282: LD_INT 1
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 3
79291: PUSH
79292: LD_INT 54
79294: PUSH
79295: EMPTY
79296: LIST
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: EMPTY
79303: LIST
79304: LIST
79305: PPUSH
79306: CALL_OW 72
79310: ST_TO_ADDR
// if tmp then
79311: LD_VAR 0 6
79315: IFFALSE 79321
// exit ;
79317: POP
79318: POP
79319: GO 79461
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
79321: LD_ADDR_VAR 0 6
79325: PUSH
79326: LD_EXP 65
79330: PUSH
79331: LD_VAR 0 3
79335: ARRAY
79336: PPUSH
79337: LD_INT 2
79339: PUSH
79340: LD_INT 30
79342: PUSH
79343: LD_INT 4
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: PUSH
79350: LD_INT 30
79352: PUSH
79353: LD_INT 5
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: LIST
79364: PPUSH
79365: CALL_OW 72
79369: ST_TO_ADDR
// if not tmp then
79370: LD_VAR 0 6
79374: NOT
79375: IFFALSE 79381
// exit ;
79377: POP
79378: POP
79379: GO 79461
// for j in tmp do
79381: LD_ADDR_VAR 0 4
79385: PUSH
79386: LD_VAR 0 6
79390: PUSH
79391: FOR_IN
79392: IFFALSE 79451
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
79394: LD_ADDR_VAR 0 7
79398: PUSH
79399: LD_VAR 0 4
79403: PPUSH
79404: CALL_OW 313
79408: PPUSH
79409: LD_INT 25
79411: PUSH
79412: LD_INT 1
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PPUSH
79419: CALL_OW 72
79423: ST_TO_ADDR
// if units then
79424: LD_VAR 0 7
79428: IFFALSE 79449
// begin ComExitBuilding ( units [ 1 ] ) ;
79430: LD_VAR 0 7
79434: PUSH
79435: LD_INT 1
79437: ARRAY
79438: PPUSH
79439: CALL_OW 122
// exit ;
79443: POP
79444: POP
79445: POP
79446: POP
79447: GO 79461
// end ; end ;
79449: GO 79391
79451: POP
79452: POP
// end ; end ; exit ;
79453: POP
79454: POP
79455: GO 79461
// end ; end ;
79457: GO 78815
79459: POP
79460: POP
// end ;
79461: LD_VAR 0 2
79465: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
79466: LD_INT 0
79468: PPUSH
79469: PPUSH
79470: PPUSH
79471: PPUSH
79472: PPUSH
79473: PPUSH
79474: PPUSH
// if not mc_bases or not skirmish then
79475: LD_EXP 65
79479: NOT
79480: PUSH
79481: LD_EXP 63
79485: NOT
79486: OR
79487: IFFALSE 79491
// exit ;
79489: GO 79722
// btype := GetBType ( building ) ;
79491: LD_ADDR_VAR 0 6
79495: PUSH
79496: LD_VAR 0 1
79500: PPUSH
79501: CALL_OW 266
79505: ST_TO_ADDR
// x := GetX ( building ) ;
79506: LD_ADDR_VAR 0 7
79510: PUSH
79511: LD_VAR 0 1
79515: PPUSH
79516: CALL_OW 250
79520: ST_TO_ADDR
// y := GetY ( building ) ;
79521: LD_ADDR_VAR 0 8
79525: PUSH
79526: LD_VAR 0 1
79530: PPUSH
79531: CALL_OW 251
79535: ST_TO_ADDR
// d := GetDir ( building ) ;
79536: LD_ADDR_VAR 0 9
79540: PUSH
79541: LD_VAR 0 1
79545: PPUSH
79546: CALL_OW 254
79550: ST_TO_ADDR
// for i = 1 to mc_bases do
79551: LD_ADDR_VAR 0 4
79555: PUSH
79556: DOUBLE
79557: LD_INT 1
79559: DEC
79560: ST_TO_ADDR
79561: LD_EXP 65
79565: PUSH
79566: FOR_TO
79567: IFFALSE 79720
// begin if not mc_build_list [ i ] then
79569: LD_EXP 70
79573: PUSH
79574: LD_VAR 0 4
79578: ARRAY
79579: NOT
79580: IFFALSE 79584
// continue ;
79582: GO 79566
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
79584: LD_VAR 0 6
79588: PUSH
79589: LD_VAR 0 7
79593: PUSH
79594: LD_VAR 0 8
79598: PUSH
79599: LD_VAR 0 9
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: PPUSH
79610: LD_EXP 70
79614: PUSH
79615: LD_VAR 0 4
79619: ARRAY
79620: PUSH
79621: LD_INT 1
79623: ARRAY
79624: PPUSH
79625: CALL 24679 0 2
79629: IFFALSE 79718
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
79631: LD_ADDR_EXP 70
79635: PUSH
79636: LD_EXP 70
79640: PPUSH
79641: LD_VAR 0 4
79645: PPUSH
79646: LD_EXP 70
79650: PUSH
79651: LD_VAR 0 4
79655: ARRAY
79656: PPUSH
79657: LD_INT 1
79659: PPUSH
79660: CALL_OW 3
79664: PPUSH
79665: CALL_OW 1
79669: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
79670: LD_ADDR_EXP 72
79674: PUSH
79675: LD_EXP 72
79679: PPUSH
79680: LD_VAR 0 4
79684: PUSH
79685: LD_EXP 72
79689: PUSH
79690: LD_VAR 0 4
79694: ARRAY
79695: PUSH
79696: LD_INT 1
79698: PLUS
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PPUSH
79704: LD_VAR 0 1
79708: PPUSH
79709: CALL 18510 0 3
79713: ST_TO_ADDR
// exit ;
79714: POP
79715: POP
79716: GO 79722
// end ; end ;
79718: GO 79566
79720: POP
79721: POP
// end ;
79722: LD_VAR 0 3
79726: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
79727: LD_INT 0
79729: PPUSH
79730: PPUSH
79731: PPUSH
// if not mc_bases or not skirmish then
79732: LD_EXP 65
79736: NOT
79737: PUSH
79738: LD_EXP 63
79742: NOT
79743: OR
79744: IFFALSE 79748
// exit ;
79746: GO 79938
// for i = 1 to mc_bases do
79748: LD_ADDR_VAR 0 4
79752: PUSH
79753: DOUBLE
79754: LD_INT 1
79756: DEC
79757: ST_TO_ADDR
79758: LD_EXP 65
79762: PUSH
79763: FOR_TO
79764: IFFALSE 79851
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
79766: LD_VAR 0 1
79770: PUSH
79771: LD_EXP 73
79775: PUSH
79776: LD_VAR 0 4
79780: ARRAY
79781: IN
79782: PUSH
79783: LD_VAR 0 1
79787: PUSH
79788: LD_EXP 74
79792: PUSH
79793: LD_VAR 0 4
79797: ARRAY
79798: IN
79799: NOT
79800: AND
79801: IFFALSE 79849
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79803: LD_ADDR_EXP 74
79807: PUSH
79808: LD_EXP 74
79812: PPUSH
79813: LD_VAR 0 4
79817: PUSH
79818: LD_EXP 74
79822: PUSH
79823: LD_VAR 0 4
79827: ARRAY
79828: PUSH
79829: LD_INT 1
79831: PLUS
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: PPUSH
79837: LD_VAR 0 1
79841: PPUSH
79842: CALL 18510 0 3
79846: ST_TO_ADDR
// break ;
79847: GO 79851
// end ; end ;
79849: GO 79763
79851: POP
79852: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
79853: LD_VAR 0 1
79857: PPUSH
79858: CALL_OW 257
79862: PUSH
79863: LD_EXP 91
79867: IN
79868: PUSH
79869: LD_VAR 0 1
79873: PPUSH
79874: CALL_OW 266
79878: PUSH
79879: LD_INT 5
79881: EQUAL
79882: AND
79883: PUSH
79884: LD_VAR 0 2
79888: PPUSH
79889: CALL_OW 110
79893: PUSH
79894: LD_INT 18
79896: NONEQUAL
79897: AND
79898: IFFALSE 79938
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
79900: LD_VAR 0 2
79904: PPUSH
79905: CALL_OW 257
79909: PUSH
79910: LD_INT 5
79912: PUSH
79913: LD_INT 8
79915: PUSH
79916: LD_INT 9
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: LIST
79923: IN
79924: IFFALSE 79938
// SetClass ( unit , 1 ) ;
79926: LD_VAR 0 2
79930: PPUSH
79931: LD_INT 1
79933: PPUSH
79934: CALL_OW 336
// end ;
79938: LD_VAR 0 3
79942: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79943: LD_INT 0
79945: PPUSH
79946: PPUSH
// if not mc_bases or not skirmish then
79947: LD_EXP 65
79951: NOT
79952: PUSH
79953: LD_EXP 63
79957: NOT
79958: OR
79959: IFFALSE 79963
// exit ;
79961: GO 80079
// if GetLives ( abandoned_vehicle ) > 250 then
79963: LD_VAR 0 2
79967: PPUSH
79968: CALL_OW 256
79972: PUSH
79973: LD_INT 250
79975: GREATER
79976: IFFALSE 79980
// exit ;
79978: GO 80079
// for i = 1 to mc_bases do
79980: LD_ADDR_VAR 0 6
79984: PUSH
79985: DOUBLE
79986: LD_INT 1
79988: DEC
79989: ST_TO_ADDR
79990: LD_EXP 65
79994: PUSH
79995: FOR_TO
79996: IFFALSE 80077
// begin if driver in mc_bases [ i ] then
79998: LD_VAR 0 1
80002: PUSH
80003: LD_EXP 65
80007: PUSH
80008: LD_VAR 0 6
80012: ARRAY
80013: IN
80014: IFFALSE 80075
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
80016: LD_VAR 0 1
80020: PPUSH
80021: LD_EXP 65
80025: PUSH
80026: LD_VAR 0 6
80030: ARRAY
80031: PPUSH
80032: LD_INT 2
80034: PUSH
80035: LD_INT 30
80037: PUSH
80038: LD_INT 0
80040: PUSH
80041: EMPTY
80042: LIST
80043: LIST
80044: PUSH
80045: LD_INT 30
80047: PUSH
80048: LD_INT 1
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: PUSH
80055: EMPTY
80056: LIST
80057: LIST
80058: LIST
80059: PPUSH
80060: CALL_OW 72
80064: PUSH
80065: LD_INT 1
80067: ARRAY
80068: PPUSH
80069: CALL_OW 112
// break ;
80073: GO 80077
// end ; end ;
80075: GO 79995
80077: POP
80078: POP
// end ; end_of_file end_of_file
80079: LD_VAR 0 5
80083: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
80084: GO 80086
80086: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
80087: LD_STRING initStreamRollete();
80089: PPUSH
80090: CALL_OW 559
// InitStreamMode ;
80094: CALL 80103 0 0
// DefineStreamItems ( ) ;
80098: CALL 80543 0 0
// end ;
80102: END
// function InitStreamMode ; begin
80103: LD_INT 0
80105: PPUSH
// streamModeActive := false ;
80106: LD_ADDR_EXP 108
80110: PUSH
80111: LD_INT 0
80113: ST_TO_ADDR
// normalCounter := 36 ;
80114: LD_ADDR_EXP 109
80118: PUSH
80119: LD_INT 36
80121: ST_TO_ADDR
// hardcoreCounter := 16 ;
80122: LD_ADDR_EXP 110
80126: PUSH
80127: LD_INT 16
80129: ST_TO_ADDR
// sRocket := false ;
80130: LD_ADDR_EXP 113
80134: PUSH
80135: LD_INT 0
80137: ST_TO_ADDR
// sSpeed := false ;
80138: LD_ADDR_EXP 112
80142: PUSH
80143: LD_INT 0
80145: ST_TO_ADDR
// sEngine := false ;
80146: LD_ADDR_EXP 114
80150: PUSH
80151: LD_INT 0
80153: ST_TO_ADDR
// sSpec := false ;
80154: LD_ADDR_EXP 111
80158: PUSH
80159: LD_INT 0
80161: ST_TO_ADDR
// sLevel := false ;
80162: LD_ADDR_EXP 115
80166: PUSH
80167: LD_INT 0
80169: ST_TO_ADDR
// sArmoury := false ;
80170: LD_ADDR_EXP 116
80174: PUSH
80175: LD_INT 0
80177: ST_TO_ADDR
// sRadar := false ;
80178: LD_ADDR_EXP 117
80182: PUSH
80183: LD_INT 0
80185: ST_TO_ADDR
// sBunker := false ;
80186: LD_ADDR_EXP 118
80190: PUSH
80191: LD_INT 0
80193: ST_TO_ADDR
// sHack := false ;
80194: LD_ADDR_EXP 119
80198: PUSH
80199: LD_INT 0
80201: ST_TO_ADDR
// sFire := false ;
80202: LD_ADDR_EXP 120
80206: PUSH
80207: LD_INT 0
80209: ST_TO_ADDR
// sRefresh := false ;
80210: LD_ADDR_EXP 121
80214: PUSH
80215: LD_INT 0
80217: ST_TO_ADDR
// sExp := false ;
80218: LD_ADDR_EXP 122
80222: PUSH
80223: LD_INT 0
80225: ST_TO_ADDR
// sDepot := false ;
80226: LD_ADDR_EXP 123
80230: PUSH
80231: LD_INT 0
80233: ST_TO_ADDR
// sFlag := false ;
80234: LD_ADDR_EXP 124
80238: PUSH
80239: LD_INT 0
80241: ST_TO_ADDR
// sKamikadze := false ;
80242: LD_ADDR_EXP 132
80246: PUSH
80247: LD_INT 0
80249: ST_TO_ADDR
// sTroll := false ;
80250: LD_ADDR_EXP 133
80254: PUSH
80255: LD_INT 0
80257: ST_TO_ADDR
// sSlow := false ;
80258: LD_ADDR_EXP 134
80262: PUSH
80263: LD_INT 0
80265: ST_TO_ADDR
// sLack := false ;
80266: LD_ADDR_EXP 135
80270: PUSH
80271: LD_INT 0
80273: ST_TO_ADDR
// sTank := false ;
80274: LD_ADDR_EXP 137
80278: PUSH
80279: LD_INT 0
80281: ST_TO_ADDR
// sRemote := false ;
80282: LD_ADDR_EXP 138
80286: PUSH
80287: LD_INT 0
80289: ST_TO_ADDR
// sPowell := false ;
80290: LD_ADDR_EXP 139
80294: PUSH
80295: LD_INT 0
80297: ST_TO_ADDR
// sTeleport := false ;
80298: LD_ADDR_EXP 142
80302: PUSH
80303: LD_INT 0
80305: ST_TO_ADDR
// sOilTower := false ;
80306: LD_ADDR_EXP 144
80310: PUSH
80311: LD_INT 0
80313: ST_TO_ADDR
// sShovel := false ;
80314: LD_ADDR_EXP 145
80318: PUSH
80319: LD_INT 0
80321: ST_TO_ADDR
// sSheik := false ;
80322: LD_ADDR_EXP 146
80326: PUSH
80327: LD_INT 0
80329: ST_TO_ADDR
// sEarthquake := false ;
80330: LD_ADDR_EXP 148
80334: PUSH
80335: LD_INT 0
80337: ST_TO_ADDR
// sAI := false ;
80338: LD_ADDR_EXP 149
80342: PUSH
80343: LD_INT 0
80345: ST_TO_ADDR
// sCargo := false ;
80346: LD_ADDR_EXP 152
80350: PUSH
80351: LD_INT 0
80353: ST_TO_ADDR
// sDLaser := false ;
80354: LD_ADDR_EXP 153
80358: PUSH
80359: LD_INT 0
80361: ST_TO_ADDR
// sExchange := false ;
80362: LD_ADDR_EXP 154
80366: PUSH
80367: LD_INT 0
80369: ST_TO_ADDR
// sFac := false ;
80370: LD_ADDR_EXP 155
80374: PUSH
80375: LD_INT 0
80377: ST_TO_ADDR
// sPower := false ;
80378: LD_ADDR_EXP 156
80382: PUSH
80383: LD_INT 0
80385: ST_TO_ADDR
// sRandom := false ;
80386: LD_ADDR_EXP 157
80390: PUSH
80391: LD_INT 0
80393: ST_TO_ADDR
// sShield := false ;
80394: LD_ADDR_EXP 158
80398: PUSH
80399: LD_INT 0
80401: ST_TO_ADDR
// sTime := false ;
80402: LD_ADDR_EXP 159
80406: PUSH
80407: LD_INT 0
80409: ST_TO_ADDR
// sTools := false ;
80410: LD_ADDR_EXP 160
80414: PUSH
80415: LD_INT 0
80417: ST_TO_ADDR
// sSold := false ;
80418: LD_ADDR_EXP 125
80422: PUSH
80423: LD_INT 0
80425: ST_TO_ADDR
// sDiff := false ;
80426: LD_ADDR_EXP 126
80430: PUSH
80431: LD_INT 0
80433: ST_TO_ADDR
// sFog := false ;
80434: LD_ADDR_EXP 129
80438: PUSH
80439: LD_INT 0
80441: ST_TO_ADDR
// sReset := false ;
80442: LD_ADDR_EXP 130
80446: PUSH
80447: LD_INT 0
80449: ST_TO_ADDR
// sSun := false ;
80450: LD_ADDR_EXP 131
80454: PUSH
80455: LD_INT 0
80457: ST_TO_ADDR
// sTiger := false ;
80458: LD_ADDR_EXP 127
80462: PUSH
80463: LD_INT 0
80465: ST_TO_ADDR
// sBomb := false ;
80466: LD_ADDR_EXP 128
80470: PUSH
80471: LD_INT 0
80473: ST_TO_ADDR
// sWound := false ;
80474: LD_ADDR_EXP 136
80478: PUSH
80479: LD_INT 0
80481: ST_TO_ADDR
// sBetray := false ;
80482: LD_ADDR_EXP 140
80486: PUSH
80487: LD_INT 0
80489: ST_TO_ADDR
// sContamin := false ;
80490: LD_ADDR_EXP 141
80494: PUSH
80495: LD_INT 0
80497: ST_TO_ADDR
// sOil := false ;
80498: LD_ADDR_EXP 143
80502: PUSH
80503: LD_INT 0
80505: ST_TO_ADDR
// sStu := false ;
80506: LD_ADDR_EXP 147
80510: PUSH
80511: LD_INT 0
80513: ST_TO_ADDR
// sBazooka := false ;
80514: LD_ADDR_EXP 150
80518: PUSH
80519: LD_INT 0
80521: ST_TO_ADDR
// sMortar := false ;
80522: LD_ADDR_EXP 151
80526: PUSH
80527: LD_INT 0
80529: ST_TO_ADDR
// sRanger := false ;
80530: LD_ADDR_EXP 161
80534: PUSH
80535: LD_INT 0
80537: ST_TO_ADDR
// end ;
80538: LD_VAR 0 1
80542: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
80543: LD_INT 0
80545: PPUSH
80546: PPUSH
80547: PPUSH
80548: PPUSH
80549: PPUSH
// result := [ ] ;
80550: LD_ADDR_VAR 0 1
80554: PUSH
80555: EMPTY
80556: ST_TO_ADDR
// if campaign_id = 1 then
80557: LD_OWVAR 69
80561: PUSH
80562: LD_INT 1
80564: EQUAL
80565: IFFALSE 83503
// begin case mission_number of 1 :
80567: LD_OWVAR 70
80571: PUSH
80572: LD_INT 1
80574: DOUBLE
80575: EQUAL
80576: IFTRUE 80580
80578: GO 80644
80580: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
80581: LD_ADDR_VAR 0 1
80585: PUSH
80586: LD_INT 2
80588: PUSH
80589: LD_INT 4
80591: PUSH
80592: LD_INT 11
80594: PUSH
80595: LD_INT 12
80597: PUSH
80598: LD_INT 15
80600: PUSH
80601: LD_INT 16
80603: PUSH
80604: LD_INT 22
80606: PUSH
80607: LD_INT 23
80609: PUSH
80610: LD_INT 26
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: LIST
80623: PUSH
80624: LD_INT 101
80626: PUSH
80627: LD_INT 102
80629: PUSH
80630: LD_INT 106
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: LIST
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: ST_TO_ADDR
80642: GO 83501
80644: LD_INT 2
80646: DOUBLE
80647: EQUAL
80648: IFTRUE 80652
80650: GO 80724
80652: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
80653: LD_ADDR_VAR 0 1
80657: PUSH
80658: LD_INT 2
80660: PUSH
80661: LD_INT 4
80663: PUSH
80664: LD_INT 11
80666: PUSH
80667: LD_INT 12
80669: PUSH
80670: LD_INT 15
80672: PUSH
80673: LD_INT 16
80675: PUSH
80676: LD_INT 22
80678: PUSH
80679: LD_INT 23
80681: PUSH
80682: LD_INT 26
80684: PUSH
80685: EMPTY
80686: LIST
80687: LIST
80688: LIST
80689: LIST
80690: LIST
80691: LIST
80692: LIST
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 101
80698: PUSH
80699: LD_INT 102
80701: PUSH
80702: LD_INT 105
80704: PUSH
80705: LD_INT 106
80707: PUSH
80708: LD_INT 108
80710: PUSH
80711: EMPTY
80712: LIST
80713: LIST
80714: LIST
80715: LIST
80716: LIST
80717: PUSH
80718: EMPTY
80719: LIST
80720: LIST
80721: ST_TO_ADDR
80722: GO 83501
80724: LD_INT 3
80726: DOUBLE
80727: EQUAL
80728: IFTRUE 80732
80730: GO 80808
80732: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
80733: LD_ADDR_VAR 0 1
80737: PUSH
80738: LD_INT 2
80740: PUSH
80741: LD_INT 4
80743: PUSH
80744: LD_INT 5
80746: PUSH
80747: LD_INT 11
80749: PUSH
80750: LD_INT 12
80752: PUSH
80753: LD_INT 15
80755: PUSH
80756: LD_INT 16
80758: PUSH
80759: LD_INT 22
80761: PUSH
80762: LD_INT 26
80764: PUSH
80765: LD_INT 36
80767: PUSH
80768: EMPTY
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: PUSH
80780: LD_INT 101
80782: PUSH
80783: LD_INT 102
80785: PUSH
80786: LD_INT 105
80788: PUSH
80789: LD_INT 106
80791: PUSH
80792: LD_INT 108
80794: PUSH
80795: EMPTY
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: ST_TO_ADDR
80806: GO 83501
80808: LD_INT 4
80810: DOUBLE
80811: EQUAL
80812: IFTRUE 80816
80814: GO 80900
80816: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
80817: LD_ADDR_VAR 0 1
80821: PUSH
80822: LD_INT 2
80824: PUSH
80825: LD_INT 4
80827: PUSH
80828: LD_INT 5
80830: PUSH
80831: LD_INT 8
80833: PUSH
80834: LD_INT 11
80836: PUSH
80837: LD_INT 12
80839: PUSH
80840: LD_INT 15
80842: PUSH
80843: LD_INT 16
80845: PUSH
80846: LD_INT 22
80848: PUSH
80849: LD_INT 23
80851: PUSH
80852: LD_INT 26
80854: PUSH
80855: LD_INT 36
80857: PUSH
80858: EMPTY
80859: LIST
80860: LIST
80861: LIST
80862: LIST
80863: LIST
80864: LIST
80865: LIST
80866: LIST
80867: LIST
80868: LIST
80869: LIST
80870: LIST
80871: PUSH
80872: LD_INT 101
80874: PUSH
80875: LD_INT 102
80877: PUSH
80878: LD_INT 105
80880: PUSH
80881: LD_INT 106
80883: PUSH
80884: LD_INT 108
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: LIST
80891: LIST
80892: LIST
80893: PUSH
80894: EMPTY
80895: LIST
80896: LIST
80897: ST_TO_ADDR
80898: GO 83501
80900: LD_INT 5
80902: DOUBLE
80903: EQUAL
80904: IFTRUE 80908
80906: GO 81008
80908: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
80909: LD_ADDR_VAR 0 1
80913: PUSH
80914: LD_INT 2
80916: PUSH
80917: LD_INT 4
80919: PUSH
80920: LD_INT 5
80922: PUSH
80923: LD_INT 6
80925: PUSH
80926: LD_INT 8
80928: PUSH
80929: LD_INT 11
80931: PUSH
80932: LD_INT 12
80934: PUSH
80935: LD_INT 15
80937: PUSH
80938: LD_INT 16
80940: PUSH
80941: LD_INT 22
80943: PUSH
80944: LD_INT 23
80946: PUSH
80947: LD_INT 25
80949: PUSH
80950: LD_INT 26
80952: PUSH
80953: LD_INT 36
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: PUSH
80972: LD_INT 101
80974: PUSH
80975: LD_INT 102
80977: PUSH
80978: LD_INT 105
80980: PUSH
80981: LD_INT 106
80983: PUSH
80984: LD_INT 108
80986: PUSH
80987: LD_INT 109
80989: PUSH
80990: LD_INT 112
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: LIST
80997: LIST
80998: LIST
80999: LIST
81000: LIST
81001: PUSH
81002: EMPTY
81003: LIST
81004: LIST
81005: ST_TO_ADDR
81006: GO 83501
81008: LD_INT 6
81010: DOUBLE
81011: EQUAL
81012: IFTRUE 81016
81014: GO 81136
81016: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
81017: LD_ADDR_VAR 0 1
81021: PUSH
81022: LD_INT 2
81024: PUSH
81025: LD_INT 4
81027: PUSH
81028: LD_INT 5
81030: PUSH
81031: LD_INT 6
81033: PUSH
81034: LD_INT 8
81036: PUSH
81037: LD_INT 11
81039: PUSH
81040: LD_INT 12
81042: PUSH
81043: LD_INT 15
81045: PUSH
81046: LD_INT 16
81048: PUSH
81049: LD_INT 20
81051: PUSH
81052: LD_INT 21
81054: PUSH
81055: LD_INT 22
81057: PUSH
81058: LD_INT 23
81060: PUSH
81061: LD_INT 25
81063: PUSH
81064: LD_INT 26
81066: PUSH
81067: LD_INT 30
81069: PUSH
81070: LD_INT 31
81072: PUSH
81073: LD_INT 32
81075: PUSH
81076: LD_INT 36
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: LIST
81083: LIST
81084: LIST
81085: LIST
81086: LIST
81087: LIST
81088: LIST
81089: LIST
81090: LIST
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: LIST
81098: LIST
81099: PUSH
81100: LD_INT 101
81102: PUSH
81103: LD_INT 102
81105: PUSH
81106: LD_INT 105
81108: PUSH
81109: LD_INT 106
81111: PUSH
81112: LD_INT 108
81114: PUSH
81115: LD_INT 109
81117: PUSH
81118: LD_INT 112
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: LIST
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: ST_TO_ADDR
81134: GO 83501
81136: LD_INT 7
81138: DOUBLE
81139: EQUAL
81140: IFTRUE 81144
81142: GO 81244
81144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
81145: LD_ADDR_VAR 0 1
81149: PUSH
81150: LD_INT 2
81152: PUSH
81153: LD_INT 4
81155: PUSH
81156: LD_INT 5
81158: PUSH
81159: LD_INT 7
81161: PUSH
81162: LD_INT 11
81164: PUSH
81165: LD_INT 12
81167: PUSH
81168: LD_INT 15
81170: PUSH
81171: LD_INT 16
81173: PUSH
81174: LD_INT 20
81176: PUSH
81177: LD_INT 21
81179: PUSH
81180: LD_INT 22
81182: PUSH
81183: LD_INT 23
81185: PUSH
81186: LD_INT 25
81188: PUSH
81189: LD_INT 26
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: LIST
81202: LIST
81203: LIST
81204: LIST
81205: LIST
81206: LIST
81207: PUSH
81208: LD_INT 101
81210: PUSH
81211: LD_INT 102
81213: PUSH
81214: LD_INT 103
81216: PUSH
81217: LD_INT 105
81219: PUSH
81220: LD_INT 106
81222: PUSH
81223: LD_INT 108
81225: PUSH
81226: LD_INT 112
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: LIST
81233: LIST
81234: LIST
81235: LIST
81236: LIST
81237: PUSH
81238: EMPTY
81239: LIST
81240: LIST
81241: ST_TO_ADDR
81242: GO 83501
81244: LD_INT 8
81246: DOUBLE
81247: EQUAL
81248: IFTRUE 81252
81250: GO 81380
81252: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
81253: LD_ADDR_VAR 0 1
81257: PUSH
81258: LD_INT 2
81260: PUSH
81261: LD_INT 4
81263: PUSH
81264: LD_INT 5
81266: PUSH
81267: LD_INT 6
81269: PUSH
81270: LD_INT 7
81272: PUSH
81273: LD_INT 8
81275: PUSH
81276: LD_INT 11
81278: PUSH
81279: LD_INT 12
81281: PUSH
81282: LD_INT 15
81284: PUSH
81285: LD_INT 16
81287: PUSH
81288: LD_INT 20
81290: PUSH
81291: LD_INT 21
81293: PUSH
81294: LD_INT 22
81296: PUSH
81297: LD_INT 23
81299: PUSH
81300: LD_INT 25
81302: PUSH
81303: LD_INT 26
81305: PUSH
81306: LD_INT 30
81308: PUSH
81309: LD_INT 31
81311: PUSH
81312: LD_INT 32
81314: PUSH
81315: LD_INT 36
81317: PUSH
81318: EMPTY
81319: LIST
81320: LIST
81321: LIST
81322: LIST
81323: LIST
81324: LIST
81325: LIST
81326: LIST
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: PUSH
81340: LD_INT 101
81342: PUSH
81343: LD_INT 102
81345: PUSH
81346: LD_INT 103
81348: PUSH
81349: LD_INT 105
81351: PUSH
81352: LD_INT 106
81354: PUSH
81355: LD_INT 108
81357: PUSH
81358: LD_INT 109
81360: PUSH
81361: LD_INT 112
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: LIST
81368: LIST
81369: LIST
81370: LIST
81371: LIST
81372: LIST
81373: PUSH
81374: EMPTY
81375: LIST
81376: LIST
81377: ST_TO_ADDR
81378: GO 83501
81380: LD_INT 9
81382: DOUBLE
81383: EQUAL
81384: IFTRUE 81388
81386: GO 81524
81388: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
81389: LD_ADDR_VAR 0 1
81393: PUSH
81394: LD_INT 2
81396: PUSH
81397: LD_INT 4
81399: PUSH
81400: LD_INT 5
81402: PUSH
81403: LD_INT 6
81405: PUSH
81406: LD_INT 7
81408: PUSH
81409: LD_INT 8
81411: PUSH
81412: LD_INT 11
81414: PUSH
81415: LD_INT 12
81417: PUSH
81418: LD_INT 15
81420: PUSH
81421: LD_INT 16
81423: PUSH
81424: LD_INT 20
81426: PUSH
81427: LD_INT 21
81429: PUSH
81430: LD_INT 22
81432: PUSH
81433: LD_INT 23
81435: PUSH
81436: LD_INT 25
81438: PUSH
81439: LD_INT 26
81441: PUSH
81442: LD_INT 28
81444: PUSH
81445: LD_INT 30
81447: PUSH
81448: LD_INT 31
81450: PUSH
81451: LD_INT 32
81453: PUSH
81454: LD_INT 36
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: LIST
81466: LIST
81467: LIST
81468: LIST
81469: LIST
81470: LIST
81471: LIST
81472: LIST
81473: LIST
81474: LIST
81475: LIST
81476: LIST
81477: LIST
81478: LIST
81479: PUSH
81480: LD_INT 101
81482: PUSH
81483: LD_INT 102
81485: PUSH
81486: LD_INT 103
81488: PUSH
81489: LD_INT 105
81491: PUSH
81492: LD_INT 106
81494: PUSH
81495: LD_INT 108
81497: PUSH
81498: LD_INT 109
81500: PUSH
81501: LD_INT 112
81503: PUSH
81504: LD_INT 114
81506: PUSH
81507: EMPTY
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: PUSH
81518: EMPTY
81519: LIST
81520: LIST
81521: ST_TO_ADDR
81522: GO 83501
81524: LD_INT 10
81526: DOUBLE
81527: EQUAL
81528: IFTRUE 81532
81530: GO 81716
81532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
81533: LD_ADDR_VAR 0 1
81537: PUSH
81538: LD_INT 2
81540: PUSH
81541: LD_INT 4
81543: PUSH
81544: LD_INT 5
81546: PUSH
81547: LD_INT 6
81549: PUSH
81550: LD_INT 7
81552: PUSH
81553: LD_INT 8
81555: PUSH
81556: LD_INT 9
81558: PUSH
81559: LD_INT 10
81561: PUSH
81562: LD_INT 11
81564: PUSH
81565: LD_INT 12
81567: PUSH
81568: LD_INT 13
81570: PUSH
81571: LD_INT 14
81573: PUSH
81574: LD_INT 15
81576: PUSH
81577: LD_INT 16
81579: PUSH
81580: LD_INT 17
81582: PUSH
81583: LD_INT 18
81585: PUSH
81586: LD_INT 19
81588: PUSH
81589: LD_INT 20
81591: PUSH
81592: LD_INT 21
81594: PUSH
81595: LD_INT 22
81597: PUSH
81598: LD_INT 23
81600: PUSH
81601: LD_INT 24
81603: PUSH
81604: LD_INT 25
81606: PUSH
81607: LD_INT 26
81609: PUSH
81610: LD_INT 28
81612: PUSH
81613: LD_INT 30
81615: PUSH
81616: LD_INT 31
81618: PUSH
81619: LD_INT 32
81621: PUSH
81622: LD_INT 36
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: LIST
81629: LIST
81630: LIST
81631: LIST
81632: LIST
81633: LIST
81634: LIST
81635: LIST
81636: LIST
81637: LIST
81638: LIST
81639: LIST
81640: LIST
81641: LIST
81642: LIST
81643: LIST
81644: LIST
81645: LIST
81646: LIST
81647: LIST
81648: LIST
81649: LIST
81650: LIST
81651: LIST
81652: LIST
81653: LIST
81654: LIST
81655: PUSH
81656: LD_INT 101
81658: PUSH
81659: LD_INT 102
81661: PUSH
81662: LD_INT 103
81664: PUSH
81665: LD_INT 104
81667: PUSH
81668: LD_INT 105
81670: PUSH
81671: LD_INT 106
81673: PUSH
81674: LD_INT 107
81676: PUSH
81677: LD_INT 108
81679: PUSH
81680: LD_INT 109
81682: PUSH
81683: LD_INT 110
81685: PUSH
81686: LD_INT 111
81688: PUSH
81689: LD_INT 112
81691: PUSH
81692: LD_INT 114
81694: PUSH
81695: EMPTY
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: LIST
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: LIST
81707: LIST
81708: LIST
81709: PUSH
81710: EMPTY
81711: LIST
81712: LIST
81713: ST_TO_ADDR
81714: GO 83501
81716: LD_INT 11
81718: DOUBLE
81719: EQUAL
81720: IFTRUE 81724
81722: GO 81916
81724: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
81725: LD_ADDR_VAR 0 1
81729: PUSH
81730: LD_INT 2
81732: PUSH
81733: LD_INT 3
81735: PUSH
81736: LD_INT 4
81738: PUSH
81739: LD_INT 5
81741: PUSH
81742: LD_INT 6
81744: PUSH
81745: LD_INT 7
81747: PUSH
81748: LD_INT 8
81750: PUSH
81751: LD_INT 9
81753: PUSH
81754: LD_INT 10
81756: PUSH
81757: LD_INT 11
81759: PUSH
81760: LD_INT 12
81762: PUSH
81763: LD_INT 13
81765: PUSH
81766: LD_INT 14
81768: PUSH
81769: LD_INT 15
81771: PUSH
81772: LD_INT 16
81774: PUSH
81775: LD_INT 17
81777: PUSH
81778: LD_INT 18
81780: PUSH
81781: LD_INT 19
81783: PUSH
81784: LD_INT 20
81786: PUSH
81787: LD_INT 21
81789: PUSH
81790: LD_INT 22
81792: PUSH
81793: LD_INT 23
81795: PUSH
81796: LD_INT 24
81798: PUSH
81799: LD_INT 25
81801: PUSH
81802: LD_INT 26
81804: PUSH
81805: LD_INT 28
81807: PUSH
81808: LD_INT 30
81810: PUSH
81811: LD_INT 31
81813: PUSH
81814: LD_INT 32
81816: PUSH
81817: LD_INT 34
81819: PUSH
81820: LD_INT 36
81822: PUSH
81823: EMPTY
81824: LIST
81825: LIST
81826: LIST
81827: LIST
81828: LIST
81829: LIST
81830: LIST
81831: LIST
81832: LIST
81833: LIST
81834: LIST
81835: LIST
81836: LIST
81837: LIST
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: LIST
81845: LIST
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: LIST
81851: LIST
81852: LIST
81853: LIST
81854: LIST
81855: PUSH
81856: LD_INT 101
81858: PUSH
81859: LD_INT 102
81861: PUSH
81862: LD_INT 103
81864: PUSH
81865: LD_INT 104
81867: PUSH
81868: LD_INT 105
81870: PUSH
81871: LD_INT 106
81873: PUSH
81874: LD_INT 107
81876: PUSH
81877: LD_INT 108
81879: PUSH
81880: LD_INT 109
81882: PUSH
81883: LD_INT 110
81885: PUSH
81886: LD_INT 111
81888: PUSH
81889: LD_INT 112
81891: PUSH
81892: LD_INT 114
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: LIST
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: ST_TO_ADDR
81914: GO 83501
81916: LD_INT 12
81918: DOUBLE
81919: EQUAL
81920: IFTRUE 81924
81922: GO 82132
81924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
81925: LD_ADDR_VAR 0 1
81929: PUSH
81930: LD_INT 1
81932: PUSH
81933: LD_INT 2
81935: PUSH
81936: LD_INT 3
81938: PUSH
81939: LD_INT 4
81941: PUSH
81942: LD_INT 5
81944: PUSH
81945: LD_INT 6
81947: PUSH
81948: LD_INT 7
81950: PUSH
81951: LD_INT 8
81953: PUSH
81954: LD_INT 9
81956: PUSH
81957: LD_INT 10
81959: PUSH
81960: LD_INT 11
81962: PUSH
81963: LD_INT 12
81965: PUSH
81966: LD_INT 13
81968: PUSH
81969: LD_INT 14
81971: PUSH
81972: LD_INT 15
81974: PUSH
81975: LD_INT 16
81977: PUSH
81978: LD_INT 17
81980: PUSH
81981: LD_INT 18
81983: PUSH
81984: LD_INT 19
81986: PUSH
81987: LD_INT 20
81989: PUSH
81990: LD_INT 21
81992: PUSH
81993: LD_INT 22
81995: PUSH
81996: LD_INT 23
81998: PUSH
81999: LD_INT 24
82001: PUSH
82002: LD_INT 25
82004: PUSH
82005: LD_INT 26
82007: PUSH
82008: LD_INT 27
82010: PUSH
82011: LD_INT 28
82013: PUSH
82014: LD_INT 30
82016: PUSH
82017: LD_INT 31
82019: PUSH
82020: LD_INT 32
82022: PUSH
82023: LD_INT 33
82025: PUSH
82026: LD_INT 34
82028: PUSH
82029: LD_INT 36
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: LIST
82036: LIST
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: LIST
82046: LIST
82047: LIST
82048: LIST
82049: LIST
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: LIST
82065: LIST
82066: LIST
82067: PUSH
82068: LD_INT 101
82070: PUSH
82071: LD_INT 102
82073: PUSH
82074: LD_INT 103
82076: PUSH
82077: LD_INT 104
82079: PUSH
82080: LD_INT 105
82082: PUSH
82083: LD_INT 106
82085: PUSH
82086: LD_INT 107
82088: PUSH
82089: LD_INT 108
82091: PUSH
82092: LD_INT 109
82094: PUSH
82095: LD_INT 110
82097: PUSH
82098: LD_INT 111
82100: PUSH
82101: LD_INT 112
82103: PUSH
82104: LD_INT 113
82106: PUSH
82107: LD_INT 114
82109: PUSH
82110: EMPTY
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: PUSH
82126: EMPTY
82127: LIST
82128: LIST
82129: ST_TO_ADDR
82130: GO 83501
82132: LD_INT 13
82134: DOUBLE
82135: EQUAL
82136: IFTRUE 82140
82138: GO 82336
82140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
82141: LD_ADDR_VAR 0 1
82145: PUSH
82146: LD_INT 1
82148: PUSH
82149: LD_INT 2
82151: PUSH
82152: LD_INT 3
82154: PUSH
82155: LD_INT 4
82157: PUSH
82158: LD_INT 5
82160: PUSH
82161: LD_INT 8
82163: PUSH
82164: LD_INT 9
82166: PUSH
82167: LD_INT 10
82169: PUSH
82170: LD_INT 11
82172: PUSH
82173: LD_INT 12
82175: PUSH
82176: LD_INT 14
82178: PUSH
82179: LD_INT 15
82181: PUSH
82182: LD_INT 16
82184: PUSH
82185: LD_INT 17
82187: PUSH
82188: LD_INT 18
82190: PUSH
82191: LD_INT 19
82193: PUSH
82194: LD_INT 20
82196: PUSH
82197: LD_INT 21
82199: PUSH
82200: LD_INT 22
82202: PUSH
82203: LD_INT 23
82205: PUSH
82206: LD_INT 24
82208: PUSH
82209: LD_INT 25
82211: PUSH
82212: LD_INT 26
82214: PUSH
82215: LD_INT 27
82217: PUSH
82218: LD_INT 28
82220: PUSH
82221: LD_INT 30
82223: PUSH
82224: LD_INT 31
82226: PUSH
82227: LD_INT 32
82229: PUSH
82230: LD_INT 33
82232: PUSH
82233: LD_INT 34
82235: PUSH
82236: LD_INT 36
82238: PUSH
82239: EMPTY
82240: LIST
82241: LIST
82242: LIST
82243: LIST
82244: LIST
82245: LIST
82246: LIST
82247: LIST
82248: LIST
82249: LIST
82250: LIST
82251: LIST
82252: LIST
82253: LIST
82254: LIST
82255: LIST
82256: LIST
82257: LIST
82258: LIST
82259: LIST
82260: LIST
82261: LIST
82262: LIST
82263: LIST
82264: LIST
82265: LIST
82266: LIST
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: PUSH
82272: LD_INT 101
82274: PUSH
82275: LD_INT 102
82277: PUSH
82278: LD_INT 103
82280: PUSH
82281: LD_INT 104
82283: PUSH
82284: LD_INT 105
82286: PUSH
82287: LD_INT 106
82289: PUSH
82290: LD_INT 107
82292: PUSH
82293: LD_INT 108
82295: PUSH
82296: LD_INT 109
82298: PUSH
82299: LD_INT 110
82301: PUSH
82302: LD_INT 111
82304: PUSH
82305: LD_INT 112
82307: PUSH
82308: LD_INT 113
82310: PUSH
82311: LD_INT 114
82313: PUSH
82314: EMPTY
82315: LIST
82316: LIST
82317: LIST
82318: LIST
82319: LIST
82320: LIST
82321: LIST
82322: LIST
82323: LIST
82324: LIST
82325: LIST
82326: LIST
82327: LIST
82328: LIST
82329: PUSH
82330: EMPTY
82331: LIST
82332: LIST
82333: ST_TO_ADDR
82334: GO 83501
82336: LD_INT 14
82338: DOUBLE
82339: EQUAL
82340: IFTRUE 82344
82342: GO 82556
82344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
82345: LD_ADDR_VAR 0 1
82349: PUSH
82350: LD_INT 1
82352: PUSH
82353: LD_INT 2
82355: PUSH
82356: LD_INT 3
82358: PUSH
82359: LD_INT 4
82361: PUSH
82362: LD_INT 5
82364: PUSH
82365: LD_INT 6
82367: PUSH
82368: LD_INT 7
82370: PUSH
82371: LD_INT 8
82373: PUSH
82374: LD_INT 9
82376: PUSH
82377: LD_INT 10
82379: PUSH
82380: LD_INT 11
82382: PUSH
82383: LD_INT 12
82385: PUSH
82386: LD_INT 13
82388: PUSH
82389: LD_INT 14
82391: PUSH
82392: LD_INT 15
82394: PUSH
82395: LD_INT 16
82397: PUSH
82398: LD_INT 17
82400: PUSH
82401: LD_INT 18
82403: PUSH
82404: LD_INT 19
82406: PUSH
82407: LD_INT 20
82409: PUSH
82410: LD_INT 21
82412: PUSH
82413: LD_INT 22
82415: PUSH
82416: LD_INT 23
82418: PUSH
82419: LD_INT 24
82421: PUSH
82422: LD_INT 25
82424: PUSH
82425: LD_INT 26
82427: PUSH
82428: LD_INT 27
82430: PUSH
82431: LD_INT 28
82433: PUSH
82434: LD_INT 29
82436: PUSH
82437: LD_INT 30
82439: PUSH
82440: LD_INT 31
82442: PUSH
82443: LD_INT 32
82445: PUSH
82446: LD_INT 33
82448: PUSH
82449: LD_INT 34
82451: PUSH
82452: LD_INT 36
82454: PUSH
82455: EMPTY
82456: LIST
82457: LIST
82458: LIST
82459: LIST
82460: LIST
82461: LIST
82462: LIST
82463: LIST
82464: LIST
82465: LIST
82466: LIST
82467: LIST
82468: LIST
82469: LIST
82470: LIST
82471: LIST
82472: LIST
82473: LIST
82474: LIST
82475: LIST
82476: LIST
82477: LIST
82478: LIST
82479: LIST
82480: LIST
82481: LIST
82482: LIST
82483: LIST
82484: LIST
82485: LIST
82486: LIST
82487: LIST
82488: LIST
82489: LIST
82490: LIST
82491: PUSH
82492: LD_INT 101
82494: PUSH
82495: LD_INT 102
82497: PUSH
82498: LD_INT 103
82500: PUSH
82501: LD_INT 104
82503: PUSH
82504: LD_INT 105
82506: PUSH
82507: LD_INT 106
82509: PUSH
82510: LD_INT 107
82512: PUSH
82513: LD_INT 108
82515: PUSH
82516: LD_INT 109
82518: PUSH
82519: LD_INT 110
82521: PUSH
82522: LD_INT 111
82524: PUSH
82525: LD_INT 112
82527: PUSH
82528: LD_INT 113
82530: PUSH
82531: LD_INT 114
82533: PUSH
82534: EMPTY
82535: LIST
82536: LIST
82537: LIST
82538: LIST
82539: LIST
82540: LIST
82541: LIST
82542: LIST
82543: LIST
82544: LIST
82545: LIST
82546: LIST
82547: LIST
82548: LIST
82549: PUSH
82550: EMPTY
82551: LIST
82552: LIST
82553: ST_TO_ADDR
82554: GO 83501
82556: LD_INT 15
82558: DOUBLE
82559: EQUAL
82560: IFTRUE 82564
82562: GO 82776
82564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
82565: LD_ADDR_VAR 0 1
82569: PUSH
82570: LD_INT 1
82572: PUSH
82573: LD_INT 2
82575: PUSH
82576: LD_INT 3
82578: PUSH
82579: LD_INT 4
82581: PUSH
82582: LD_INT 5
82584: PUSH
82585: LD_INT 6
82587: PUSH
82588: LD_INT 7
82590: PUSH
82591: LD_INT 8
82593: PUSH
82594: LD_INT 9
82596: PUSH
82597: LD_INT 10
82599: PUSH
82600: LD_INT 11
82602: PUSH
82603: LD_INT 12
82605: PUSH
82606: LD_INT 13
82608: PUSH
82609: LD_INT 14
82611: PUSH
82612: LD_INT 15
82614: PUSH
82615: LD_INT 16
82617: PUSH
82618: LD_INT 17
82620: PUSH
82621: LD_INT 18
82623: PUSH
82624: LD_INT 19
82626: PUSH
82627: LD_INT 20
82629: PUSH
82630: LD_INT 21
82632: PUSH
82633: LD_INT 22
82635: PUSH
82636: LD_INT 23
82638: PUSH
82639: LD_INT 24
82641: PUSH
82642: LD_INT 25
82644: PUSH
82645: LD_INT 26
82647: PUSH
82648: LD_INT 27
82650: PUSH
82651: LD_INT 28
82653: PUSH
82654: LD_INT 29
82656: PUSH
82657: LD_INT 30
82659: PUSH
82660: LD_INT 31
82662: PUSH
82663: LD_INT 32
82665: PUSH
82666: LD_INT 33
82668: PUSH
82669: LD_INT 34
82671: PUSH
82672: LD_INT 36
82674: PUSH
82675: EMPTY
82676: LIST
82677: LIST
82678: LIST
82679: LIST
82680: LIST
82681: LIST
82682: LIST
82683: LIST
82684: LIST
82685: LIST
82686: LIST
82687: LIST
82688: LIST
82689: LIST
82690: LIST
82691: LIST
82692: LIST
82693: LIST
82694: LIST
82695: LIST
82696: LIST
82697: LIST
82698: LIST
82699: LIST
82700: LIST
82701: LIST
82702: LIST
82703: LIST
82704: LIST
82705: LIST
82706: LIST
82707: LIST
82708: LIST
82709: LIST
82710: LIST
82711: PUSH
82712: LD_INT 101
82714: PUSH
82715: LD_INT 102
82717: PUSH
82718: LD_INT 103
82720: PUSH
82721: LD_INT 104
82723: PUSH
82724: LD_INT 105
82726: PUSH
82727: LD_INT 106
82729: PUSH
82730: LD_INT 107
82732: PUSH
82733: LD_INT 108
82735: PUSH
82736: LD_INT 109
82738: PUSH
82739: LD_INT 110
82741: PUSH
82742: LD_INT 111
82744: PUSH
82745: LD_INT 112
82747: PUSH
82748: LD_INT 113
82750: PUSH
82751: LD_INT 114
82753: PUSH
82754: EMPTY
82755: LIST
82756: LIST
82757: LIST
82758: LIST
82759: LIST
82760: LIST
82761: LIST
82762: LIST
82763: LIST
82764: LIST
82765: LIST
82766: LIST
82767: LIST
82768: LIST
82769: PUSH
82770: EMPTY
82771: LIST
82772: LIST
82773: ST_TO_ADDR
82774: GO 83501
82776: LD_INT 16
82778: DOUBLE
82779: EQUAL
82780: IFTRUE 82784
82782: GO 82908
82784: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
82785: LD_ADDR_VAR 0 1
82789: PUSH
82790: LD_INT 2
82792: PUSH
82793: LD_INT 4
82795: PUSH
82796: LD_INT 5
82798: PUSH
82799: LD_INT 7
82801: PUSH
82802: LD_INT 11
82804: PUSH
82805: LD_INT 12
82807: PUSH
82808: LD_INT 15
82810: PUSH
82811: LD_INT 16
82813: PUSH
82814: LD_INT 20
82816: PUSH
82817: LD_INT 21
82819: PUSH
82820: LD_INT 22
82822: PUSH
82823: LD_INT 23
82825: PUSH
82826: LD_INT 25
82828: PUSH
82829: LD_INT 26
82831: PUSH
82832: LD_INT 30
82834: PUSH
82835: LD_INT 31
82837: PUSH
82838: LD_INT 32
82840: PUSH
82841: LD_INT 33
82843: PUSH
82844: LD_INT 34
82846: PUSH
82847: EMPTY
82848: LIST
82849: LIST
82850: LIST
82851: LIST
82852: LIST
82853: LIST
82854: LIST
82855: LIST
82856: LIST
82857: LIST
82858: LIST
82859: LIST
82860: LIST
82861: LIST
82862: LIST
82863: LIST
82864: LIST
82865: LIST
82866: LIST
82867: PUSH
82868: LD_INT 101
82870: PUSH
82871: LD_INT 102
82873: PUSH
82874: LD_INT 103
82876: PUSH
82877: LD_INT 106
82879: PUSH
82880: LD_INT 108
82882: PUSH
82883: LD_INT 112
82885: PUSH
82886: LD_INT 113
82888: PUSH
82889: LD_INT 114
82891: PUSH
82892: EMPTY
82893: LIST
82894: LIST
82895: LIST
82896: LIST
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: ST_TO_ADDR
82906: GO 83501
82908: LD_INT 17
82910: DOUBLE
82911: EQUAL
82912: IFTRUE 82916
82914: GO 83128
82916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
82917: LD_ADDR_VAR 0 1
82921: PUSH
82922: LD_INT 1
82924: PUSH
82925: LD_INT 2
82927: PUSH
82928: LD_INT 3
82930: PUSH
82931: LD_INT 4
82933: PUSH
82934: LD_INT 5
82936: PUSH
82937: LD_INT 6
82939: PUSH
82940: LD_INT 7
82942: PUSH
82943: LD_INT 8
82945: PUSH
82946: LD_INT 9
82948: PUSH
82949: LD_INT 10
82951: PUSH
82952: LD_INT 11
82954: PUSH
82955: LD_INT 12
82957: PUSH
82958: LD_INT 13
82960: PUSH
82961: LD_INT 14
82963: PUSH
82964: LD_INT 15
82966: PUSH
82967: LD_INT 16
82969: PUSH
82970: LD_INT 17
82972: PUSH
82973: LD_INT 18
82975: PUSH
82976: LD_INT 19
82978: PUSH
82979: LD_INT 20
82981: PUSH
82982: LD_INT 21
82984: PUSH
82985: LD_INT 22
82987: PUSH
82988: LD_INT 23
82990: PUSH
82991: LD_INT 24
82993: PUSH
82994: LD_INT 25
82996: PUSH
82997: LD_INT 26
82999: PUSH
83000: LD_INT 27
83002: PUSH
83003: LD_INT 28
83005: PUSH
83006: LD_INT 29
83008: PUSH
83009: LD_INT 30
83011: PUSH
83012: LD_INT 31
83014: PUSH
83015: LD_INT 32
83017: PUSH
83018: LD_INT 33
83020: PUSH
83021: LD_INT 34
83023: PUSH
83024: LD_INT 36
83026: PUSH
83027: EMPTY
83028: LIST
83029: LIST
83030: LIST
83031: LIST
83032: LIST
83033: LIST
83034: LIST
83035: LIST
83036: LIST
83037: LIST
83038: LIST
83039: LIST
83040: LIST
83041: LIST
83042: LIST
83043: LIST
83044: LIST
83045: LIST
83046: LIST
83047: LIST
83048: LIST
83049: LIST
83050: LIST
83051: LIST
83052: LIST
83053: LIST
83054: LIST
83055: LIST
83056: LIST
83057: LIST
83058: LIST
83059: LIST
83060: LIST
83061: LIST
83062: LIST
83063: PUSH
83064: LD_INT 101
83066: PUSH
83067: LD_INT 102
83069: PUSH
83070: LD_INT 103
83072: PUSH
83073: LD_INT 104
83075: PUSH
83076: LD_INT 105
83078: PUSH
83079: LD_INT 106
83081: PUSH
83082: LD_INT 107
83084: PUSH
83085: LD_INT 108
83087: PUSH
83088: LD_INT 109
83090: PUSH
83091: LD_INT 110
83093: PUSH
83094: LD_INT 111
83096: PUSH
83097: LD_INT 112
83099: PUSH
83100: LD_INT 113
83102: PUSH
83103: LD_INT 114
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: LIST
83110: LIST
83111: LIST
83112: LIST
83113: LIST
83114: LIST
83115: LIST
83116: LIST
83117: LIST
83118: LIST
83119: LIST
83120: LIST
83121: PUSH
83122: EMPTY
83123: LIST
83124: LIST
83125: ST_TO_ADDR
83126: GO 83501
83128: LD_INT 18
83130: DOUBLE
83131: EQUAL
83132: IFTRUE 83136
83134: GO 83272
83136: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
83137: LD_ADDR_VAR 0 1
83141: PUSH
83142: LD_INT 2
83144: PUSH
83145: LD_INT 4
83147: PUSH
83148: LD_INT 5
83150: PUSH
83151: LD_INT 7
83153: PUSH
83154: LD_INT 11
83156: PUSH
83157: LD_INT 12
83159: PUSH
83160: LD_INT 15
83162: PUSH
83163: LD_INT 16
83165: PUSH
83166: LD_INT 20
83168: PUSH
83169: LD_INT 21
83171: PUSH
83172: LD_INT 22
83174: PUSH
83175: LD_INT 23
83177: PUSH
83178: LD_INT 25
83180: PUSH
83181: LD_INT 26
83183: PUSH
83184: LD_INT 30
83186: PUSH
83187: LD_INT 31
83189: PUSH
83190: LD_INT 32
83192: PUSH
83193: LD_INT 33
83195: PUSH
83196: LD_INT 34
83198: PUSH
83199: LD_INT 35
83201: PUSH
83202: LD_INT 36
83204: PUSH
83205: EMPTY
83206: LIST
83207: LIST
83208: LIST
83209: LIST
83210: LIST
83211: LIST
83212: LIST
83213: LIST
83214: LIST
83215: LIST
83216: LIST
83217: LIST
83218: LIST
83219: LIST
83220: LIST
83221: LIST
83222: LIST
83223: LIST
83224: LIST
83225: LIST
83226: LIST
83227: PUSH
83228: LD_INT 101
83230: PUSH
83231: LD_INT 102
83233: PUSH
83234: LD_INT 103
83236: PUSH
83237: LD_INT 106
83239: PUSH
83240: LD_INT 108
83242: PUSH
83243: LD_INT 112
83245: PUSH
83246: LD_INT 113
83248: PUSH
83249: LD_INT 114
83251: PUSH
83252: LD_INT 115
83254: PUSH
83255: EMPTY
83256: LIST
83257: LIST
83258: LIST
83259: LIST
83260: LIST
83261: LIST
83262: LIST
83263: LIST
83264: LIST
83265: PUSH
83266: EMPTY
83267: LIST
83268: LIST
83269: ST_TO_ADDR
83270: GO 83501
83272: LD_INT 19
83274: DOUBLE
83275: EQUAL
83276: IFTRUE 83280
83278: GO 83500
83280: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
83281: LD_ADDR_VAR 0 1
83285: PUSH
83286: LD_INT 1
83288: PUSH
83289: LD_INT 2
83291: PUSH
83292: LD_INT 3
83294: PUSH
83295: LD_INT 4
83297: PUSH
83298: LD_INT 5
83300: PUSH
83301: LD_INT 6
83303: PUSH
83304: LD_INT 7
83306: PUSH
83307: LD_INT 8
83309: PUSH
83310: LD_INT 9
83312: PUSH
83313: LD_INT 10
83315: PUSH
83316: LD_INT 11
83318: PUSH
83319: LD_INT 12
83321: PUSH
83322: LD_INT 13
83324: PUSH
83325: LD_INT 14
83327: PUSH
83328: LD_INT 15
83330: PUSH
83331: LD_INT 16
83333: PUSH
83334: LD_INT 17
83336: PUSH
83337: LD_INT 18
83339: PUSH
83340: LD_INT 19
83342: PUSH
83343: LD_INT 20
83345: PUSH
83346: LD_INT 21
83348: PUSH
83349: LD_INT 22
83351: PUSH
83352: LD_INT 23
83354: PUSH
83355: LD_INT 24
83357: PUSH
83358: LD_INT 25
83360: PUSH
83361: LD_INT 26
83363: PUSH
83364: LD_INT 27
83366: PUSH
83367: LD_INT 28
83369: PUSH
83370: LD_INT 29
83372: PUSH
83373: LD_INT 30
83375: PUSH
83376: LD_INT 31
83378: PUSH
83379: LD_INT 32
83381: PUSH
83382: LD_INT 33
83384: PUSH
83385: LD_INT 34
83387: PUSH
83388: LD_INT 35
83390: PUSH
83391: LD_INT 36
83393: PUSH
83394: EMPTY
83395: LIST
83396: LIST
83397: LIST
83398: LIST
83399: LIST
83400: LIST
83401: LIST
83402: LIST
83403: LIST
83404: LIST
83405: LIST
83406: LIST
83407: LIST
83408: LIST
83409: LIST
83410: LIST
83411: LIST
83412: LIST
83413: LIST
83414: LIST
83415: LIST
83416: LIST
83417: LIST
83418: LIST
83419: LIST
83420: LIST
83421: LIST
83422: LIST
83423: LIST
83424: LIST
83425: LIST
83426: LIST
83427: LIST
83428: LIST
83429: LIST
83430: LIST
83431: PUSH
83432: LD_INT 101
83434: PUSH
83435: LD_INT 102
83437: PUSH
83438: LD_INT 103
83440: PUSH
83441: LD_INT 104
83443: PUSH
83444: LD_INT 105
83446: PUSH
83447: LD_INT 106
83449: PUSH
83450: LD_INT 107
83452: PUSH
83453: LD_INT 108
83455: PUSH
83456: LD_INT 109
83458: PUSH
83459: LD_INT 110
83461: PUSH
83462: LD_INT 111
83464: PUSH
83465: LD_INT 112
83467: PUSH
83468: LD_INT 113
83470: PUSH
83471: LD_INT 114
83473: PUSH
83474: LD_INT 115
83476: PUSH
83477: EMPTY
83478: LIST
83479: LIST
83480: LIST
83481: LIST
83482: LIST
83483: LIST
83484: LIST
83485: LIST
83486: LIST
83487: LIST
83488: LIST
83489: LIST
83490: LIST
83491: LIST
83492: LIST
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: ST_TO_ADDR
83498: GO 83501
83500: POP
// end else
83501: GO 83720
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
83503: LD_ADDR_VAR 0 1
83507: PUSH
83508: LD_INT 1
83510: PUSH
83511: LD_INT 2
83513: PUSH
83514: LD_INT 3
83516: PUSH
83517: LD_INT 4
83519: PUSH
83520: LD_INT 5
83522: PUSH
83523: LD_INT 6
83525: PUSH
83526: LD_INT 7
83528: PUSH
83529: LD_INT 8
83531: PUSH
83532: LD_INT 9
83534: PUSH
83535: LD_INT 10
83537: PUSH
83538: LD_INT 11
83540: PUSH
83541: LD_INT 12
83543: PUSH
83544: LD_INT 13
83546: PUSH
83547: LD_INT 14
83549: PUSH
83550: LD_INT 15
83552: PUSH
83553: LD_INT 16
83555: PUSH
83556: LD_INT 17
83558: PUSH
83559: LD_INT 18
83561: PUSH
83562: LD_INT 19
83564: PUSH
83565: LD_INT 20
83567: PUSH
83568: LD_INT 21
83570: PUSH
83571: LD_INT 22
83573: PUSH
83574: LD_INT 23
83576: PUSH
83577: LD_INT 24
83579: PUSH
83580: LD_INT 25
83582: PUSH
83583: LD_INT 26
83585: PUSH
83586: LD_INT 27
83588: PUSH
83589: LD_INT 28
83591: PUSH
83592: LD_INT 29
83594: PUSH
83595: LD_INT 30
83597: PUSH
83598: LD_INT 31
83600: PUSH
83601: LD_INT 32
83603: PUSH
83604: LD_INT 33
83606: PUSH
83607: LD_INT 34
83609: PUSH
83610: LD_INT 35
83612: PUSH
83613: LD_INT 36
83615: PUSH
83616: EMPTY
83617: LIST
83618: LIST
83619: LIST
83620: LIST
83621: LIST
83622: LIST
83623: LIST
83624: LIST
83625: LIST
83626: LIST
83627: LIST
83628: LIST
83629: LIST
83630: LIST
83631: LIST
83632: LIST
83633: LIST
83634: LIST
83635: LIST
83636: LIST
83637: LIST
83638: LIST
83639: LIST
83640: LIST
83641: LIST
83642: LIST
83643: LIST
83644: LIST
83645: LIST
83646: LIST
83647: LIST
83648: LIST
83649: LIST
83650: LIST
83651: LIST
83652: LIST
83653: PUSH
83654: LD_INT 101
83656: PUSH
83657: LD_INT 102
83659: PUSH
83660: LD_INT 103
83662: PUSH
83663: LD_INT 104
83665: PUSH
83666: LD_INT 105
83668: PUSH
83669: LD_INT 106
83671: PUSH
83672: LD_INT 107
83674: PUSH
83675: LD_INT 108
83677: PUSH
83678: LD_INT 109
83680: PUSH
83681: LD_INT 110
83683: PUSH
83684: LD_INT 111
83686: PUSH
83687: LD_INT 112
83689: PUSH
83690: LD_INT 113
83692: PUSH
83693: LD_INT 114
83695: PUSH
83696: LD_INT 115
83698: PUSH
83699: EMPTY
83700: LIST
83701: LIST
83702: LIST
83703: LIST
83704: LIST
83705: LIST
83706: LIST
83707: LIST
83708: LIST
83709: LIST
83710: LIST
83711: LIST
83712: LIST
83713: LIST
83714: LIST
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: ST_TO_ADDR
// if result then
83720: LD_VAR 0 1
83724: IFFALSE 84013
// begin normal :=  ;
83726: LD_ADDR_VAR 0 3
83730: PUSH
83731: LD_STRING 
83733: ST_TO_ADDR
// hardcore :=  ;
83734: LD_ADDR_VAR 0 4
83738: PUSH
83739: LD_STRING 
83741: ST_TO_ADDR
// for i = 1 to normalCounter do
83742: LD_ADDR_VAR 0 5
83746: PUSH
83747: DOUBLE
83748: LD_INT 1
83750: DEC
83751: ST_TO_ADDR
83752: LD_EXP 109
83756: PUSH
83757: FOR_TO
83758: IFFALSE 83859
// begin tmp := 0 ;
83760: LD_ADDR_VAR 0 2
83764: PUSH
83765: LD_STRING 0
83767: ST_TO_ADDR
// if result [ 1 ] then
83768: LD_VAR 0 1
83772: PUSH
83773: LD_INT 1
83775: ARRAY
83776: IFFALSE 83841
// if result [ 1 ] [ 1 ] = i then
83778: LD_VAR 0 1
83782: PUSH
83783: LD_INT 1
83785: ARRAY
83786: PUSH
83787: LD_INT 1
83789: ARRAY
83790: PUSH
83791: LD_VAR 0 5
83795: EQUAL
83796: IFFALSE 83841
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
83798: LD_ADDR_VAR 0 1
83802: PUSH
83803: LD_VAR 0 1
83807: PPUSH
83808: LD_INT 1
83810: PPUSH
83811: LD_VAR 0 1
83815: PUSH
83816: LD_INT 1
83818: ARRAY
83819: PPUSH
83820: LD_INT 1
83822: PPUSH
83823: CALL_OW 3
83827: PPUSH
83828: CALL_OW 1
83832: ST_TO_ADDR
// tmp := 1 ;
83833: LD_ADDR_VAR 0 2
83837: PUSH
83838: LD_STRING 1
83840: ST_TO_ADDR
// end ; normal := normal & tmp ;
83841: LD_ADDR_VAR 0 3
83845: PUSH
83846: LD_VAR 0 3
83850: PUSH
83851: LD_VAR 0 2
83855: STR
83856: ST_TO_ADDR
// end ;
83857: GO 83757
83859: POP
83860: POP
// for i = 1 to hardcoreCounter do
83861: LD_ADDR_VAR 0 5
83865: PUSH
83866: DOUBLE
83867: LD_INT 1
83869: DEC
83870: ST_TO_ADDR
83871: LD_EXP 110
83875: PUSH
83876: FOR_TO
83877: IFFALSE 83982
// begin tmp := 0 ;
83879: LD_ADDR_VAR 0 2
83883: PUSH
83884: LD_STRING 0
83886: ST_TO_ADDR
// if result [ 2 ] then
83887: LD_VAR 0 1
83891: PUSH
83892: LD_INT 2
83894: ARRAY
83895: IFFALSE 83964
// if result [ 2 ] [ 1 ] = 100 + i then
83897: LD_VAR 0 1
83901: PUSH
83902: LD_INT 2
83904: ARRAY
83905: PUSH
83906: LD_INT 1
83908: ARRAY
83909: PUSH
83910: LD_INT 100
83912: PUSH
83913: LD_VAR 0 5
83917: PLUS
83918: EQUAL
83919: IFFALSE 83964
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
83921: LD_ADDR_VAR 0 1
83925: PUSH
83926: LD_VAR 0 1
83930: PPUSH
83931: LD_INT 2
83933: PPUSH
83934: LD_VAR 0 1
83938: PUSH
83939: LD_INT 2
83941: ARRAY
83942: PPUSH
83943: LD_INT 1
83945: PPUSH
83946: CALL_OW 3
83950: PPUSH
83951: CALL_OW 1
83955: ST_TO_ADDR
// tmp := 1 ;
83956: LD_ADDR_VAR 0 2
83960: PUSH
83961: LD_STRING 1
83963: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
83964: LD_ADDR_VAR 0 4
83968: PUSH
83969: LD_VAR 0 4
83973: PUSH
83974: LD_VAR 0 2
83978: STR
83979: ST_TO_ADDR
// end ;
83980: GO 83876
83982: POP
83983: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
83984: LD_STRING getStreamItemsFromMission("
83986: PUSH
83987: LD_VAR 0 3
83991: STR
83992: PUSH
83993: LD_STRING ","
83995: STR
83996: PUSH
83997: LD_VAR 0 4
84001: STR
84002: PUSH
84003: LD_STRING ")
84005: STR
84006: PPUSH
84007: CALL_OW 559
// end else
84011: GO 84020
// ToLua ( getStreamItemsFromMission("","") ) ;
84013: LD_STRING getStreamItemsFromMission("","")
84015: PPUSH
84016: CALL_OW 559
// end ;
84020: LD_VAR 0 1
84024: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
84025: LD_VAR 0 2
84029: PUSH
84030: LD_INT 100
84032: EQUAL
84033: IFFALSE 84982
// begin if not StreamModeActive then
84035: LD_EXP 108
84039: NOT
84040: IFFALSE 84050
// StreamModeActive := true ;
84042: LD_ADDR_EXP 108
84046: PUSH
84047: LD_INT 1
84049: ST_TO_ADDR
// if p3 = 0 then
84050: LD_VAR 0 3
84054: PUSH
84055: LD_INT 0
84057: EQUAL
84058: IFFALSE 84064
// InitStreamMode ;
84060: CALL 80103 0 0
// if p3 = 1 then
84064: LD_VAR 0 3
84068: PUSH
84069: LD_INT 1
84071: EQUAL
84072: IFFALSE 84082
// sRocket := true ;
84074: LD_ADDR_EXP 113
84078: PUSH
84079: LD_INT 1
84081: ST_TO_ADDR
// if p3 = 2 then
84082: LD_VAR 0 3
84086: PUSH
84087: LD_INT 2
84089: EQUAL
84090: IFFALSE 84100
// sSpeed := true ;
84092: LD_ADDR_EXP 112
84096: PUSH
84097: LD_INT 1
84099: ST_TO_ADDR
// if p3 = 3 then
84100: LD_VAR 0 3
84104: PUSH
84105: LD_INT 3
84107: EQUAL
84108: IFFALSE 84118
// sEngine := true ;
84110: LD_ADDR_EXP 114
84114: PUSH
84115: LD_INT 1
84117: ST_TO_ADDR
// if p3 = 4 then
84118: LD_VAR 0 3
84122: PUSH
84123: LD_INT 4
84125: EQUAL
84126: IFFALSE 84136
// sSpec := true ;
84128: LD_ADDR_EXP 111
84132: PUSH
84133: LD_INT 1
84135: ST_TO_ADDR
// if p3 = 5 then
84136: LD_VAR 0 3
84140: PUSH
84141: LD_INT 5
84143: EQUAL
84144: IFFALSE 84154
// sLevel := true ;
84146: LD_ADDR_EXP 115
84150: PUSH
84151: LD_INT 1
84153: ST_TO_ADDR
// if p3 = 6 then
84154: LD_VAR 0 3
84158: PUSH
84159: LD_INT 6
84161: EQUAL
84162: IFFALSE 84172
// sArmoury := true ;
84164: LD_ADDR_EXP 116
84168: PUSH
84169: LD_INT 1
84171: ST_TO_ADDR
// if p3 = 7 then
84172: LD_VAR 0 3
84176: PUSH
84177: LD_INT 7
84179: EQUAL
84180: IFFALSE 84190
// sRadar := true ;
84182: LD_ADDR_EXP 117
84186: PUSH
84187: LD_INT 1
84189: ST_TO_ADDR
// if p3 = 8 then
84190: LD_VAR 0 3
84194: PUSH
84195: LD_INT 8
84197: EQUAL
84198: IFFALSE 84208
// sBunker := true ;
84200: LD_ADDR_EXP 118
84204: PUSH
84205: LD_INT 1
84207: ST_TO_ADDR
// if p3 = 9 then
84208: LD_VAR 0 3
84212: PUSH
84213: LD_INT 9
84215: EQUAL
84216: IFFALSE 84226
// sHack := true ;
84218: LD_ADDR_EXP 119
84222: PUSH
84223: LD_INT 1
84225: ST_TO_ADDR
// if p3 = 10 then
84226: LD_VAR 0 3
84230: PUSH
84231: LD_INT 10
84233: EQUAL
84234: IFFALSE 84244
// sFire := true ;
84236: LD_ADDR_EXP 120
84240: PUSH
84241: LD_INT 1
84243: ST_TO_ADDR
// if p3 = 11 then
84244: LD_VAR 0 3
84248: PUSH
84249: LD_INT 11
84251: EQUAL
84252: IFFALSE 84262
// sRefresh := true ;
84254: LD_ADDR_EXP 121
84258: PUSH
84259: LD_INT 1
84261: ST_TO_ADDR
// if p3 = 12 then
84262: LD_VAR 0 3
84266: PUSH
84267: LD_INT 12
84269: EQUAL
84270: IFFALSE 84280
// sExp := true ;
84272: LD_ADDR_EXP 122
84276: PUSH
84277: LD_INT 1
84279: ST_TO_ADDR
// if p3 = 13 then
84280: LD_VAR 0 3
84284: PUSH
84285: LD_INT 13
84287: EQUAL
84288: IFFALSE 84298
// sDepot := true ;
84290: LD_ADDR_EXP 123
84294: PUSH
84295: LD_INT 1
84297: ST_TO_ADDR
// if p3 = 14 then
84298: LD_VAR 0 3
84302: PUSH
84303: LD_INT 14
84305: EQUAL
84306: IFFALSE 84316
// sFlag := true ;
84308: LD_ADDR_EXP 124
84312: PUSH
84313: LD_INT 1
84315: ST_TO_ADDR
// if p3 = 15 then
84316: LD_VAR 0 3
84320: PUSH
84321: LD_INT 15
84323: EQUAL
84324: IFFALSE 84334
// sKamikadze := true ;
84326: LD_ADDR_EXP 132
84330: PUSH
84331: LD_INT 1
84333: ST_TO_ADDR
// if p3 = 16 then
84334: LD_VAR 0 3
84338: PUSH
84339: LD_INT 16
84341: EQUAL
84342: IFFALSE 84352
// sTroll := true ;
84344: LD_ADDR_EXP 133
84348: PUSH
84349: LD_INT 1
84351: ST_TO_ADDR
// if p3 = 17 then
84352: LD_VAR 0 3
84356: PUSH
84357: LD_INT 17
84359: EQUAL
84360: IFFALSE 84370
// sSlow := true ;
84362: LD_ADDR_EXP 134
84366: PUSH
84367: LD_INT 1
84369: ST_TO_ADDR
// if p3 = 18 then
84370: LD_VAR 0 3
84374: PUSH
84375: LD_INT 18
84377: EQUAL
84378: IFFALSE 84388
// sLack := true ;
84380: LD_ADDR_EXP 135
84384: PUSH
84385: LD_INT 1
84387: ST_TO_ADDR
// if p3 = 19 then
84388: LD_VAR 0 3
84392: PUSH
84393: LD_INT 19
84395: EQUAL
84396: IFFALSE 84406
// sTank := true ;
84398: LD_ADDR_EXP 137
84402: PUSH
84403: LD_INT 1
84405: ST_TO_ADDR
// if p3 = 20 then
84406: LD_VAR 0 3
84410: PUSH
84411: LD_INT 20
84413: EQUAL
84414: IFFALSE 84424
// sRemote := true ;
84416: LD_ADDR_EXP 138
84420: PUSH
84421: LD_INT 1
84423: ST_TO_ADDR
// if p3 = 21 then
84424: LD_VAR 0 3
84428: PUSH
84429: LD_INT 21
84431: EQUAL
84432: IFFALSE 84442
// sPowell := true ;
84434: LD_ADDR_EXP 139
84438: PUSH
84439: LD_INT 1
84441: ST_TO_ADDR
// if p3 = 22 then
84442: LD_VAR 0 3
84446: PUSH
84447: LD_INT 22
84449: EQUAL
84450: IFFALSE 84460
// sTeleport := true ;
84452: LD_ADDR_EXP 142
84456: PUSH
84457: LD_INT 1
84459: ST_TO_ADDR
// if p3 = 23 then
84460: LD_VAR 0 3
84464: PUSH
84465: LD_INT 23
84467: EQUAL
84468: IFFALSE 84478
// sOilTower := true ;
84470: LD_ADDR_EXP 144
84474: PUSH
84475: LD_INT 1
84477: ST_TO_ADDR
// if p3 = 24 then
84478: LD_VAR 0 3
84482: PUSH
84483: LD_INT 24
84485: EQUAL
84486: IFFALSE 84496
// sShovel := true ;
84488: LD_ADDR_EXP 145
84492: PUSH
84493: LD_INT 1
84495: ST_TO_ADDR
// if p3 = 25 then
84496: LD_VAR 0 3
84500: PUSH
84501: LD_INT 25
84503: EQUAL
84504: IFFALSE 84514
// sSheik := true ;
84506: LD_ADDR_EXP 146
84510: PUSH
84511: LD_INT 1
84513: ST_TO_ADDR
// if p3 = 26 then
84514: LD_VAR 0 3
84518: PUSH
84519: LD_INT 26
84521: EQUAL
84522: IFFALSE 84532
// sEarthquake := true ;
84524: LD_ADDR_EXP 148
84528: PUSH
84529: LD_INT 1
84531: ST_TO_ADDR
// if p3 = 27 then
84532: LD_VAR 0 3
84536: PUSH
84537: LD_INT 27
84539: EQUAL
84540: IFFALSE 84550
// sAI := true ;
84542: LD_ADDR_EXP 149
84546: PUSH
84547: LD_INT 1
84549: ST_TO_ADDR
// if p3 = 28 then
84550: LD_VAR 0 3
84554: PUSH
84555: LD_INT 28
84557: EQUAL
84558: IFFALSE 84568
// sCargo := true ;
84560: LD_ADDR_EXP 152
84564: PUSH
84565: LD_INT 1
84567: ST_TO_ADDR
// if p3 = 29 then
84568: LD_VAR 0 3
84572: PUSH
84573: LD_INT 29
84575: EQUAL
84576: IFFALSE 84586
// sDLaser := true ;
84578: LD_ADDR_EXP 153
84582: PUSH
84583: LD_INT 1
84585: ST_TO_ADDR
// if p3 = 30 then
84586: LD_VAR 0 3
84590: PUSH
84591: LD_INT 30
84593: EQUAL
84594: IFFALSE 84604
// sExchange := true ;
84596: LD_ADDR_EXP 154
84600: PUSH
84601: LD_INT 1
84603: ST_TO_ADDR
// if p3 = 31 then
84604: LD_VAR 0 3
84608: PUSH
84609: LD_INT 31
84611: EQUAL
84612: IFFALSE 84622
// sFac := true ;
84614: LD_ADDR_EXP 155
84618: PUSH
84619: LD_INT 1
84621: ST_TO_ADDR
// if p3 = 32 then
84622: LD_VAR 0 3
84626: PUSH
84627: LD_INT 32
84629: EQUAL
84630: IFFALSE 84640
// sPower := true ;
84632: LD_ADDR_EXP 156
84636: PUSH
84637: LD_INT 1
84639: ST_TO_ADDR
// if p3 = 33 then
84640: LD_VAR 0 3
84644: PUSH
84645: LD_INT 33
84647: EQUAL
84648: IFFALSE 84658
// sRandom := true ;
84650: LD_ADDR_EXP 157
84654: PUSH
84655: LD_INT 1
84657: ST_TO_ADDR
// if p3 = 34 then
84658: LD_VAR 0 3
84662: PUSH
84663: LD_INT 34
84665: EQUAL
84666: IFFALSE 84676
// sShield := true ;
84668: LD_ADDR_EXP 158
84672: PUSH
84673: LD_INT 1
84675: ST_TO_ADDR
// if p3 = 35 then
84676: LD_VAR 0 3
84680: PUSH
84681: LD_INT 35
84683: EQUAL
84684: IFFALSE 84694
// sTime := true ;
84686: LD_ADDR_EXP 159
84690: PUSH
84691: LD_INT 1
84693: ST_TO_ADDR
// if p3 = 36 then
84694: LD_VAR 0 3
84698: PUSH
84699: LD_INT 36
84701: EQUAL
84702: IFFALSE 84712
// sTools := true ;
84704: LD_ADDR_EXP 160
84708: PUSH
84709: LD_INT 1
84711: ST_TO_ADDR
// if p3 = 101 then
84712: LD_VAR 0 3
84716: PUSH
84717: LD_INT 101
84719: EQUAL
84720: IFFALSE 84730
// sSold := true ;
84722: LD_ADDR_EXP 125
84726: PUSH
84727: LD_INT 1
84729: ST_TO_ADDR
// if p3 = 102 then
84730: LD_VAR 0 3
84734: PUSH
84735: LD_INT 102
84737: EQUAL
84738: IFFALSE 84748
// sDiff := true ;
84740: LD_ADDR_EXP 126
84744: PUSH
84745: LD_INT 1
84747: ST_TO_ADDR
// if p3 = 103 then
84748: LD_VAR 0 3
84752: PUSH
84753: LD_INT 103
84755: EQUAL
84756: IFFALSE 84766
// sFog := true ;
84758: LD_ADDR_EXP 129
84762: PUSH
84763: LD_INT 1
84765: ST_TO_ADDR
// if p3 = 104 then
84766: LD_VAR 0 3
84770: PUSH
84771: LD_INT 104
84773: EQUAL
84774: IFFALSE 84784
// sReset := true ;
84776: LD_ADDR_EXP 130
84780: PUSH
84781: LD_INT 1
84783: ST_TO_ADDR
// if p3 = 105 then
84784: LD_VAR 0 3
84788: PUSH
84789: LD_INT 105
84791: EQUAL
84792: IFFALSE 84802
// sSun := true ;
84794: LD_ADDR_EXP 131
84798: PUSH
84799: LD_INT 1
84801: ST_TO_ADDR
// if p3 = 106 then
84802: LD_VAR 0 3
84806: PUSH
84807: LD_INT 106
84809: EQUAL
84810: IFFALSE 84820
// sTiger := true ;
84812: LD_ADDR_EXP 127
84816: PUSH
84817: LD_INT 1
84819: ST_TO_ADDR
// if p3 = 107 then
84820: LD_VAR 0 3
84824: PUSH
84825: LD_INT 107
84827: EQUAL
84828: IFFALSE 84838
// sBomb := true ;
84830: LD_ADDR_EXP 128
84834: PUSH
84835: LD_INT 1
84837: ST_TO_ADDR
// if p3 = 108 then
84838: LD_VAR 0 3
84842: PUSH
84843: LD_INT 108
84845: EQUAL
84846: IFFALSE 84856
// sWound := true ;
84848: LD_ADDR_EXP 136
84852: PUSH
84853: LD_INT 1
84855: ST_TO_ADDR
// if p3 = 109 then
84856: LD_VAR 0 3
84860: PUSH
84861: LD_INT 109
84863: EQUAL
84864: IFFALSE 84874
// sBetray := true ;
84866: LD_ADDR_EXP 140
84870: PUSH
84871: LD_INT 1
84873: ST_TO_ADDR
// if p3 = 110 then
84874: LD_VAR 0 3
84878: PUSH
84879: LD_INT 110
84881: EQUAL
84882: IFFALSE 84892
// sContamin := true ;
84884: LD_ADDR_EXP 141
84888: PUSH
84889: LD_INT 1
84891: ST_TO_ADDR
// if p3 = 111 then
84892: LD_VAR 0 3
84896: PUSH
84897: LD_INT 111
84899: EQUAL
84900: IFFALSE 84910
// sOil := true ;
84902: LD_ADDR_EXP 143
84906: PUSH
84907: LD_INT 1
84909: ST_TO_ADDR
// if p3 = 112 then
84910: LD_VAR 0 3
84914: PUSH
84915: LD_INT 112
84917: EQUAL
84918: IFFALSE 84928
// sStu := true ;
84920: LD_ADDR_EXP 147
84924: PUSH
84925: LD_INT 1
84927: ST_TO_ADDR
// if p3 = 113 then
84928: LD_VAR 0 3
84932: PUSH
84933: LD_INT 113
84935: EQUAL
84936: IFFALSE 84946
// sBazooka := true ;
84938: LD_ADDR_EXP 150
84942: PUSH
84943: LD_INT 1
84945: ST_TO_ADDR
// if p3 = 114 then
84946: LD_VAR 0 3
84950: PUSH
84951: LD_INT 114
84953: EQUAL
84954: IFFALSE 84964
// sMortar := true ;
84956: LD_ADDR_EXP 151
84960: PUSH
84961: LD_INT 1
84963: ST_TO_ADDR
// if p3 = 115 then
84964: LD_VAR 0 3
84968: PUSH
84969: LD_INT 115
84971: EQUAL
84972: IFFALSE 84982
// sRanger := true ;
84974: LD_ADDR_EXP 161
84978: PUSH
84979: LD_INT 1
84981: ST_TO_ADDR
// end ; end ;
84982: PPOPN 6
84984: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
84985: LD_EXP 108
84989: PUSH
84990: LD_EXP 113
84994: AND
84995: IFFALSE 85119
84997: GO 84999
84999: DISABLE
85000: LD_INT 0
85002: PPUSH
85003: PPUSH
// begin enable ;
85004: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
85005: LD_ADDR_VAR 0 2
85009: PUSH
85010: LD_INT 22
85012: PUSH
85013: LD_OWVAR 2
85017: PUSH
85018: EMPTY
85019: LIST
85020: LIST
85021: PUSH
85022: LD_INT 2
85024: PUSH
85025: LD_INT 34
85027: PUSH
85028: LD_INT 7
85030: PUSH
85031: EMPTY
85032: LIST
85033: LIST
85034: PUSH
85035: LD_INT 34
85037: PUSH
85038: LD_INT 45
85040: PUSH
85041: EMPTY
85042: LIST
85043: LIST
85044: PUSH
85045: LD_INT 34
85047: PUSH
85048: LD_INT 28
85050: PUSH
85051: EMPTY
85052: LIST
85053: LIST
85054: PUSH
85055: LD_INT 34
85057: PUSH
85058: LD_INT 47
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PUSH
85065: EMPTY
85066: LIST
85067: LIST
85068: LIST
85069: LIST
85070: LIST
85071: PUSH
85072: EMPTY
85073: LIST
85074: LIST
85075: PPUSH
85076: CALL_OW 69
85080: ST_TO_ADDR
// if not tmp then
85081: LD_VAR 0 2
85085: NOT
85086: IFFALSE 85090
// exit ;
85088: GO 85119
// for i in tmp do
85090: LD_ADDR_VAR 0 1
85094: PUSH
85095: LD_VAR 0 2
85099: PUSH
85100: FOR_IN
85101: IFFALSE 85117
// begin SetLives ( i , 0 ) ;
85103: LD_VAR 0 1
85107: PPUSH
85108: LD_INT 0
85110: PPUSH
85111: CALL_OW 234
// end ;
85115: GO 85100
85117: POP
85118: POP
// end ;
85119: PPOPN 2
85121: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
85122: LD_EXP 108
85126: PUSH
85127: LD_EXP 114
85131: AND
85132: IFFALSE 85216
85134: GO 85136
85136: DISABLE
85137: LD_INT 0
85139: PPUSH
85140: PPUSH
// begin enable ;
85141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
85142: LD_ADDR_VAR 0 2
85146: PUSH
85147: LD_INT 22
85149: PUSH
85150: LD_OWVAR 2
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: PUSH
85159: LD_INT 32
85161: PUSH
85162: LD_INT 3
85164: PUSH
85165: EMPTY
85166: LIST
85167: LIST
85168: PUSH
85169: EMPTY
85170: LIST
85171: LIST
85172: PPUSH
85173: CALL_OW 69
85177: ST_TO_ADDR
// if not tmp then
85178: LD_VAR 0 2
85182: NOT
85183: IFFALSE 85187
// exit ;
85185: GO 85216
// for i in tmp do
85187: LD_ADDR_VAR 0 1
85191: PUSH
85192: LD_VAR 0 2
85196: PUSH
85197: FOR_IN
85198: IFFALSE 85214
// begin SetLives ( i , 0 ) ;
85200: LD_VAR 0 1
85204: PPUSH
85205: LD_INT 0
85207: PPUSH
85208: CALL_OW 234
// end ;
85212: GO 85197
85214: POP
85215: POP
// end ;
85216: PPOPN 2
85218: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
85219: LD_EXP 108
85223: PUSH
85224: LD_EXP 111
85228: AND
85229: IFFALSE 85322
85231: GO 85233
85233: DISABLE
85234: LD_INT 0
85236: PPUSH
// begin enable ;
85237: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
85238: LD_ADDR_VAR 0 1
85242: PUSH
85243: LD_INT 22
85245: PUSH
85246: LD_OWVAR 2
85250: PUSH
85251: EMPTY
85252: LIST
85253: LIST
85254: PUSH
85255: LD_INT 2
85257: PUSH
85258: LD_INT 25
85260: PUSH
85261: LD_INT 5
85263: PUSH
85264: EMPTY
85265: LIST
85266: LIST
85267: PUSH
85268: LD_INT 25
85270: PUSH
85271: LD_INT 9
85273: PUSH
85274: EMPTY
85275: LIST
85276: LIST
85277: PUSH
85278: LD_INT 25
85280: PUSH
85281: LD_INT 8
85283: PUSH
85284: EMPTY
85285: LIST
85286: LIST
85287: PUSH
85288: EMPTY
85289: LIST
85290: LIST
85291: LIST
85292: LIST
85293: PUSH
85294: EMPTY
85295: LIST
85296: LIST
85297: PPUSH
85298: CALL_OW 69
85302: PUSH
85303: FOR_IN
85304: IFFALSE 85320
// begin SetClass ( i , 1 ) ;
85306: LD_VAR 0 1
85310: PPUSH
85311: LD_INT 1
85313: PPUSH
85314: CALL_OW 336
// end ;
85318: GO 85303
85320: POP
85321: POP
// end ;
85322: PPOPN 1
85324: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
85325: LD_EXP 108
85329: PUSH
85330: LD_EXP 112
85334: AND
85335: PUSH
85336: LD_OWVAR 65
85340: PUSH
85341: LD_INT 7
85343: LESS
85344: AND
85345: IFFALSE 85359
85347: GO 85349
85349: DISABLE
// begin enable ;
85350: ENABLE
// game_speed := 7 ;
85351: LD_ADDR_OWVAR 65
85355: PUSH
85356: LD_INT 7
85358: ST_TO_ADDR
// end ;
85359: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
85360: LD_EXP 108
85364: PUSH
85365: LD_EXP 115
85369: AND
85370: IFFALSE 85572
85372: GO 85374
85374: DISABLE
85375: LD_INT 0
85377: PPUSH
85378: PPUSH
85379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85380: LD_ADDR_VAR 0 3
85384: PUSH
85385: LD_INT 81
85387: PUSH
85388: LD_OWVAR 2
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: PUSH
85397: LD_INT 21
85399: PUSH
85400: LD_INT 1
85402: PUSH
85403: EMPTY
85404: LIST
85405: LIST
85406: PUSH
85407: EMPTY
85408: LIST
85409: LIST
85410: PPUSH
85411: CALL_OW 69
85415: ST_TO_ADDR
// if not tmp then
85416: LD_VAR 0 3
85420: NOT
85421: IFFALSE 85425
// exit ;
85423: GO 85572
// if tmp > 5 then
85425: LD_VAR 0 3
85429: PUSH
85430: LD_INT 5
85432: GREATER
85433: IFFALSE 85445
// k := 5 else
85435: LD_ADDR_VAR 0 2
85439: PUSH
85440: LD_INT 5
85442: ST_TO_ADDR
85443: GO 85455
// k := tmp ;
85445: LD_ADDR_VAR 0 2
85449: PUSH
85450: LD_VAR 0 3
85454: ST_TO_ADDR
// for i := 1 to k do
85455: LD_ADDR_VAR 0 1
85459: PUSH
85460: DOUBLE
85461: LD_INT 1
85463: DEC
85464: ST_TO_ADDR
85465: LD_VAR 0 2
85469: PUSH
85470: FOR_TO
85471: IFFALSE 85570
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
85473: LD_VAR 0 3
85477: PUSH
85478: LD_VAR 0 1
85482: ARRAY
85483: PPUSH
85484: LD_VAR 0 1
85488: PUSH
85489: LD_INT 4
85491: MOD
85492: PUSH
85493: LD_INT 1
85495: PLUS
85496: PPUSH
85497: CALL_OW 259
85501: PUSH
85502: LD_INT 10
85504: LESS
85505: IFFALSE 85568
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
85507: LD_VAR 0 3
85511: PUSH
85512: LD_VAR 0 1
85516: ARRAY
85517: PPUSH
85518: LD_VAR 0 1
85522: PUSH
85523: LD_INT 4
85525: MOD
85526: PUSH
85527: LD_INT 1
85529: PLUS
85530: PPUSH
85531: LD_VAR 0 3
85535: PUSH
85536: LD_VAR 0 1
85540: ARRAY
85541: PPUSH
85542: LD_VAR 0 1
85546: PUSH
85547: LD_INT 4
85549: MOD
85550: PUSH
85551: LD_INT 1
85553: PLUS
85554: PPUSH
85555: CALL_OW 259
85559: PUSH
85560: LD_INT 1
85562: PLUS
85563: PPUSH
85564: CALL_OW 237
85568: GO 85470
85570: POP
85571: POP
// end ;
85572: PPOPN 3
85574: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
85575: LD_EXP 108
85579: PUSH
85580: LD_EXP 116
85584: AND
85585: IFFALSE 85605
85587: GO 85589
85589: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
85590: LD_INT 4
85592: PPUSH
85593: LD_OWVAR 2
85597: PPUSH
85598: LD_INT 0
85600: PPUSH
85601: CALL_OW 324
85605: END
// every 0 0$1 trigger StreamModeActive and sShovel do
85606: LD_EXP 108
85610: PUSH
85611: LD_EXP 145
85615: AND
85616: IFFALSE 85636
85618: GO 85620
85620: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
85621: LD_INT 19
85623: PPUSH
85624: LD_OWVAR 2
85628: PPUSH
85629: LD_INT 0
85631: PPUSH
85632: CALL_OW 324
85636: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
85637: LD_EXP 108
85641: PUSH
85642: LD_EXP 117
85646: AND
85647: IFFALSE 85749
85649: GO 85651
85651: DISABLE
85652: LD_INT 0
85654: PPUSH
85655: PPUSH
// begin enable ;
85656: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
85657: LD_ADDR_VAR 0 2
85661: PUSH
85662: LD_INT 22
85664: PUSH
85665: LD_OWVAR 2
85669: PUSH
85670: EMPTY
85671: LIST
85672: LIST
85673: PUSH
85674: LD_INT 2
85676: PUSH
85677: LD_INT 34
85679: PUSH
85680: LD_INT 11
85682: PUSH
85683: EMPTY
85684: LIST
85685: LIST
85686: PUSH
85687: LD_INT 34
85689: PUSH
85690: LD_INT 30
85692: PUSH
85693: EMPTY
85694: LIST
85695: LIST
85696: PUSH
85697: EMPTY
85698: LIST
85699: LIST
85700: LIST
85701: PUSH
85702: EMPTY
85703: LIST
85704: LIST
85705: PPUSH
85706: CALL_OW 69
85710: ST_TO_ADDR
// if not tmp then
85711: LD_VAR 0 2
85715: NOT
85716: IFFALSE 85720
// exit ;
85718: GO 85749
// for i in tmp do
85720: LD_ADDR_VAR 0 1
85724: PUSH
85725: LD_VAR 0 2
85729: PUSH
85730: FOR_IN
85731: IFFALSE 85747
// begin SetLives ( i , 0 ) ;
85733: LD_VAR 0 1
85737: PPUSH
85738: LD_INT 0
85740: PPUSH
85741: CALL_OW 234
// end ;
85745: GO 85730
85747: POP
85748: POP
// end ;
85749: PPOPN 2
85751: END
// every 0 0$1 trigger StreamModeActive and sBunker do
85752: LD_EXP 108
85756: PUSH
85757: LD_EXP 118
85761: AND
85762: IFFALSE 85782
85764: GO 85766
85766: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
85767: LD_INT 32
85769: PPUSH
85770: LD_OWVAR 2
85774: PPUSH
85775: LD_INT 0
85777: PPUSH
85778: CALL_OW 324
85782: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
85783: LD_EXP 108
85787: PUSH
85788: LD_EXP 119
85792: AND
85793: IFFALSE 85974
85795: GO 85797
85797: DISABLE
85798: LD_INT 0
85800: PPUSH
85801: PPUSH
85802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
85803: LD_ADDR_VAR 0 2
85807: PUSH
85808: LD_INT 22
85810: PUSH
85811: LD_OWVAR 2
85815: PUSH
85816: EMPTY
85817: LIST
85818: LIST
85819: PUSH
85820: LD_INT 33
85822: PUSH
85823: LD_INT 3
85825: PUSH
85826: EMPTY
85827: LIST
85828: LIST
85829: PUSH
85830: EMPTY
85831: LIST
85832: LIST
85833: PPUSH
85834: CALL_OW 69
85838: ST_TO_ADDR
// if not tmp then
85839: LD_VAR 0 2
85843: NOT
85844: IFFALSE 85848
// exit ;
85846: GO 85974
// side := 0 ;
85848: LD_ADDR_VAR 0 3
85852: PUSH
85853: LD_INT 0
85855: ST_TO_ADDR
// for i := 1 to 8 do
85856: LD_ADDR_VAR 0 1
85860: PUSH
85861: DOUBLE
85862: LD_INT 1
85864: DEC
85865: ST_TO_ADDR
85866: LD_INT 8
85868: PUSH
85869: FOR_TO
85870: IFFALSE 85918
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
85872: LD_OWVAR 2
85876: PUSH
85877: LD_VAR 0 1
85881: NONEQUAL
85882: PUSH
85883: LD_OWVAR 2
85887: PPUSH
85888: LD_VAR 0 1
85892: PPUSH
85893: CALL_OW 81
85897: PUSH
85898: LD_INT 2
85900: EQUAL
85901: AND
85902: IFFALSE 85916
// begin side := i ;
85904: LD_ADDR_VAR 0 3
85908: PUSH
85909: LD_VAR 0 1
85913: ST_TO_ADDR
// break ;
85914: GO 85918
// end ;
85916: GO 85869
85918: POP
85919: POP
// if not side then
85920: LD_VAR 0 3
85924: NOT
85925: IFFALSE 85929
// exit ;
85927: GO 85974
// for i := 1 to tmp do
85929: LD_ADDR_VAR 0 1
85933: PUSH
85934: DOUBLE
85935: LD_INT 1
85937: DEC
85938: ST_TO_ADDR
85939: LD_VAR 0 2
85943: PUSH
85944: FOR_TO
85945: IFFALSE 85972
// if Prob ( 60 ) then
85947: LD_INT 60
85949: PPUSH
85950: CALL_OW 13
85954: IFFALSE 85970
// SetSide ( i , side ) ;
85956: LD_VAR 0 1
85960: PPUSH
85961: LD_VAR 0 3
85965: PPUSH
85966: CALL_OW 235
85970: GO 85944
85972: POP
85973: POP
// end ;
85974: PPOPN 3
85976: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
85977: LD_EXP 108
85981: PUSH
85982: LD_EXP 121
85986: AND
85987: IFFALSE 86106
85989: GO 85991
85991: DISABLE
85992: LD_INT 0
85994: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
85995: LD_ADDR_VAR 0 1
85999: PUSH
86000: LD_INT 22
86002: PUSH
86003: LD_OWVAR 2
86007: PUSH
86008: EMPTY
86009: LIST
86010: LIST
86011: PUSH
86012: LD_INT 21
86014: PUSH
86015: LD_INT 1
86017: PUSH
86018: EMPTY
86019: LIST
86020: LIST
86021: PUSH
86022: LD_INT 3
86024: PUSH
86025: LD_INT 23
86027: PUSH
86028: LD_INT 0
86030: PUSH
86031: EMPTY
86032: LIST
86033: LIST
86034: PUSH
86035: EMPTY
86036: LIST
86037: LIST
86038: PUSH
86039: EMPTY
86040: LIST
86041: LIST
86042: LIST
86043: PPUSH
86044: CALL_OW 69
86048: PUSH
86049: FOR_IN
86050: IFFALSE 86104
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
86052: LD_VAR 0 1
86056: PPUSH
86057: CALL_OW 257
86061: PUSH
86062: LD_INT 1
86064: PUSH
86065: LD_INT 2
86067: PUSH
86068: LD_INT 3
86070: PUSH
86071: LD_INT 4
86073: PUSH
86074: EMPTY
86075: LIST
86076: LIST
86077: LIST
86078: LIST
86079: IN
86080: IFFALSE 86102
// SetClass ( un , rand ( 1 , 4 ) ) ;
86082: LD_VAR 0 1
86086: PPUSH
86087: LD_INT 1
86089: PPUSH
86090: LD_INT 4
86092: PPUSH
86093: CALL_OW 12
86097: PPUSH
86098: CALL_OW 336
86102: GO 86049
86104: POP
86105: POP
// end ;
86106: PPOPN 1
86108: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
86109: LD_EXP 108
86113: PUSH
86114: LD_EXP 120
86118: AND
86119: IFFALSE 86198
86121: GO 86123
86123: DISABLE
86124: LD_INT 0
86126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86127: LD_ADDR_VAR 0 1
86131: PUSH
86132: LD_INT 22
86134: PUSH
86135: LD_OWVAR 2
86139: PUSH
86140: EMPTY
86141: LIST
86142: LIST
86143: PUSH
86144: LD_INT 21
86146: PUSH
86147: LD_INT 3
86149: PUSH
86150: EMPTY
86151: LIST
86152: LIST
86153: PUSH
86154: EMPTY
86155: LIST
86156: LIST
86157: PPUSH
86158: CALL_OW 69
86162: ST_TO_ADDR
// if not tmp then
86163: LD_VAR 0 1
86167: NOT
86168: IFFALSE 86172
// exit ;
86170: GO 86198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
86172: LD_VAR 0 1
86176: PUSH
86177: LD_INT 1
86179: PPUSH
86180: LD_VAR 0 1
86184: PPUSH
86185: CALL_OW 12
86189: ARRAY
86190: PPUSH
86191: LD_INT 100
86193: PPUSH
86194: CALL_OW 234
// end ;
86198: PPOPN 1
86200: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
86201: LD_EXP 108
86205: PUSH
86206: LD_EXP 122
86210: AND
86211: IFFALSE 86309
86213: GO 86215
86215: DISABLE
86216: LD_INT 0
86218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
86219: LD_ADDR_VAR 0 1
86223: PUSH
86224: LD_INT 22
86226: PUSH
86227: LD_OWVAR 2
86231: PUSH
86232: EMPTY
86233: LIST
86234: LIST
86235: PUSH
86236: LD_INT 21
86238: PUSH
86239: LD_INT 1
86241: PUSH
86242: EMPTY
86243: LIST
86244: LIST
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: PPUSH
86250: CALL_OW 69
86254: ST_TO_ADDR
// if not tmp then
86255: LD_VAR 0 1
86259: NOT
86260: IFFALSE 86264
// exit ;
86262: GO 86309
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
86264: LD_VAR 0 1
86268: PUSH
86269: LD_INT 1
86271: PPUSH
86272: LD_VAR 0 1
86276: PPUSH
86277: CALL_OW 12
86281: ARRAY
86282: PPUSH
86283: LD_INT 1
86285: PPUSH
86286: LD_INT 4
86288: PPUSH
86289: CALL_OW 12
86293: PPUSH
86294: LD_INT 3000
86296: PPUSH
86297: LD_INT 9000
86299: PPUSH
86300: CALL_OW 12
86304: PPUSH
86305: CALL_OW 492
// end ;
86309: PPOPN 1
86311: END
// every 0 0$1 trigger StreamModeActive and sDepot do
86312: LD_EXP 108
86316: PUSH
86317: LD_EXP 123
86321: AND
86322: IFFALSE 86342
86324: GO 86326
86326: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
86327: LD_INT 1
86329: PPUSH
86330: LD_OWVAR 2
86334: PPUSH
86335: LD_INT 0
86337: PPUSH
86338: CALL_OW 324
86342: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
86343: LD_EXP 108
86347: PUSH
86348: LD_EXP 124
86352: AND
86353: IFFALSE 86436
86355: GO 86357
86357: DISABLE
86358: LD_INT 0
86360: PPUSH
86361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86362: LD_ADDR_VAR 0 2
86366: PUSH
86367: LD_INT 22
86369: PUSH
86370: LD_OWVAR 2
86374: PUSH
86375: EMPTY
86376: LIST
86377: LIST
86378: PUSH
86379: LD_INT 21
86381: PUSH
86382: LD_INT 3
86384: PUSH
86385: EMPTY
86386: LIST
86387: LIST
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PPUSH
86393: CALL_OW 69
86397: ST_TO_ADDR
// if not tmp then
86398: LD_VAR 0 2
86402: NOT
86403: IFFALSE 86407
// exit ;
86405: GO 86436
// for i in tmp do
86407: LD_ADDR_VAR 0 1
86411: PUSH
86412: LD_VAR 0 2
86416: PUSH
86417: FOR_IN
86418: IFFALSE 86434
// SetBLevel ( i , 10 ) ;
86420: LD_VAR 0 1
86424: PPUSH
86425: LD_INT 10
86427: PPUSH
86428: CALL_OW 241
86432: GO 86417
86434: POP
86435: POP
// end ;
86436: PPOPN 2
86438: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
86439: LD_EXP 108
86443: PUSH
86444: LD_EXP 125
86448: AND
86449: IFFALSE 86560
86451: GO 86453
86453: DISABLE
86454: LD_INT 0
86456: PPUSH
86457: PPUSH
86458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86459: LD_ADDR_VAR 0 3
86463: PUSH
86464: LD_INT 22
86466: PUSH
86467: LD_OWVAR 2
86471: PUSH
86472: EMPTY
86473: LIST
86474: LIST
86475: PUSH
86476: LD_INT 25
86478: PUSH
86479: LD_INT 1
86481: PUSH
86482: EMPTY
86483: LIST
86484: LIST
86485: PUSH
86486: EMPTY
86487: LIST
86488: LIST
86489: PPUSH
86490: CALL_OW 69
86494: ST_TO_ADDR
// if not tmp then
86495: LD_VAR 0 3
86499: NOT
86500: IFFALSE 86504
// exit ;
86502: GO 86560
// un := tmp [ rand ( 1 , tmp ) ] ;
86504: LD_ADDR_VAR 0 2
86508: PUSH
86509: LD_VAR 0 3
86513: PUSH
86514: LD_INT 1
86516: PPUSH
86517: LD_VAR 0 3
86521: PPUSH
86522: CALL_OW 12
86526: ARRAY
86527: ST_TO_ADDR
// if Crawls ( un ) then
86528: LD_VAR 0 2
86532: PPUSH
86533: CALL_OW 318
86537: IFFALSE 86548
// ComWalk ( un ) ;
86539: LD_VAR 0 2
86543: PPUSH
86544: CALL_OW 138
// SetClass ( un , class_sniper ) ;
86548: LD_VAR 0 2
86552: PPUSH
86553: LD_INT 5
86555: PPUSH
86556: CALL_OW 336
// end ;
86560: PPOPN 3
86562: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
86563: LD_EXP 108
86567: PUSH
86568: LD_EXP 126
86572: AND
86573: PUSH
86574: LD_OWVAR 67
86578: PUSH
86579: LD_INT 3
86581: LESS
86582: AND
86583: IFFALSE 86602
86585: GO 86587
86587: DISABLE
// Difficulty := Difficulty + 1 ;
86588: LD_ADDR_OWVAR 67
86592: PUSH
86593: LD_OWVAR 67
86597: PUSH
86598: LD_INT 1
86600: PLUS
86601: ST_TO_ADDR
86602: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
86603: LD_EXP 108
86607: PUSH
86608: LD_EXP 127
86612: AND
86613: IFFALSE 86716
86615: GO 86617
86617: DISABLE
86618: LD_INT 0
86620: PPUSH
// begin for i := 1 to 5 do
86621: LD_ADDR_VAR 0 1
86625: PUSH
86626: DOUBLE
86627: LD_INT 1
86629: DEC
86630: ST_TO_ADDR
86631: LD_INT 5
86633: PUSH
86634: FOR_TO
86635: IFFALSE 86714
// begin uc_nation := nation_nature ;
86637: LD_ADDR_OWVAR 21
86641: PUSH
86642: LD_INT 0
86644: ST_TO_ADDR
// uc_side := 0 ;
86645: LD_ADDR_OWVAR 20
86649: PUSH
86650: LD_INT 0
86652: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86653: LD_ADDR_OWVAR 29
86657: PUSH
86658: LD_INT 12
86660: PUSH
86661: LD_INT 12
86663: PUSH
86664: EMPTY
86665: LIST
86666: LIST
86667: ST_TO_ADDR
// hc_agressivity := 20 ;
86668: LD_ADDR_OWVAR 35
86672: PUSH
86673: LD_INT 20
86675: ST_TO_ADDR
// hc_class := class_tiger ;
86676: LD_ADDR_OWVAR 28
86680: PUSH
86681: LD_INT 14
86683: ST_TO_ADDR
// hc_gallery :=  ;
86684: LD_ADDR_OWVAR 33
86688: PUSH
86689: LD_STRING 
86691: ST_TO_ADDR
// hc_name :=  ;
86692: LD_ADDR_OWVAR 26
86696: PUSH
86697: LD_STRING 
86699: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
86700: CALL_OW 44
86704: PPUSH
86705: LD_INT 0
86707: PPUSH
86708: CALL_OW 51
// end ;
86712: GO 86634
86714: POP
86715: POP
// end ;
86716: PPOPN 1
86718: END
// every 0 0$1 trigger StreamModeActive and sBomb do
86719: LD_EXP 108
86723: PUSH
86724: LD_EXP 128
86728: AND
86729: IFFALSE 86738
86731: GO 86733
86733: DISABLE
// StreamSibBomb ;
86734: CALL 86739 0 0
86738: END
// export function StreamSibBomb ; var i , x , y ; begin
86739: LD_INT 0
86741: PPUSH
86742: PPUSH
86743: PPUSH
86744: PPUSH
// result := false ;
86745: LD_ADDR_VAR 0 1
86749: PUSH
86750: LD_INT 0
86752: ST_TO_ADDR
// for i := 1 to 16 do
86753: LD_ADDR_VAR 0 2
86757: PUSH
86758: DOUBLE
86759: LD_INT 1
86761: DEC
86762: ST_TO_ADDR
86763: LD_INT 16
86765: PUSH
86766: FOR_TO
86767: IFFALSE 86966
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86769: LD_ADDR_VAR 0 3
86773: PUSH
86774: LD_INT 10
86776: PUSH
86777: LD_INT 20
86779: PUSH
86780: LD_INT 30
86782: PUSH
86783: LD_INT 40
86785: PUSH
86786: LD_INT 50
86788: PUSH
86789: LD_INT 60
86791: PUSH
86792: LD_INT 70
86794: PUSH
86795: LD_INT 80
86797: PUSH
86798: LD_INT 90
86800: PUSH
86801: LD_INT 100
86803: PUSH
86804: LD_INT 110
86806: PUSH
86807: LD_INT 120
86809: PUSH
86810: LD_INT 130
86812: PUSH
86813: LD_INT 140
86815: PUSH
86816: LD_INT 150
86818: PUSH
86819: EMPTY
86820: LIST
86821: LIST
86822: LIST
86823: LIST
86824: LIST
86825: LIST
86826: LIST
86827: LIST
86828: LIST
86829: LIST
86830: LIST
86831: LIST
86832: LIST
86833: LIST
86834: LIST
86835: PUSH
86836: LD_INT 1
86838: PPUSH
86839: LD_INT 15
86841: PPUSH
86842: CALL_OW 12
86846: ARRAY
86847: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86848: LD_ADDR_VAR 0 4
86852: PUSH
86853: LD_INT 10
86855: PUSH
86856: LD_INT 20
86858: PUSH
86859: LD_INT 30
86861: PUSH
86862: LD_INT 40
86864: PUSH
86865: LD_INT 50
86867: PUSH
86868: LD_INT 60
86870: PUSH
86871: LD_INT 70
86873: PUSH
86874: LD_INT 80
86876: PUSH
86877: LD_INT 90
86879: PUSH
86880: LD_INT 100
86882: PUSH
86883: LD_INT 110
86885: PUSH
86886: LD_INT 120
86888: PUSH
86889: LD_INT 130
86891: PUSH
86892: LD_INT 140
86894: PUSH
86895: LD_INT 150
86897: PUSH
86898: EMPTY
86899: LIST
86900: LIST
86901: LIST
86902: LIST
86903: LIST
86904: LIST
86905: LIST
86906: LIST
86907: LIST
86908: LIST
86909: LIST
86910: LIST
86911: LIST
86912: LIST
86913: LIST
86914: PUSH
86915: LD_INT 1
86917: PPUSH
86918: LD_INT 15
86920: PPUSH
86921: CALL_OW 12
86925: ARRAY
86926: ST_TO_ADDR
// if ValidHex ( x , y ) then
86927: LD_VAR 0 3
86931: PPUSH
86932: LD_VAR 0 4
86936: PPUSH
86937: CALL_OW 488
86941: IFFALSE 86964
// begin result := [ x , y ] ;
86943: LD_ADDR_VAR 0 1
86947: PUSH
86948: LD_VAR 0 3
86952: PUSH
86953: LD_VAR 0 4
86957: PUSH
86958: EMPTY
86959: LIST
86960: LIST
86961: ST_TO_ADDR
// break ;
86962: GO 86966
// end ; end ;
86964: GO 86766
86966: POP
86967: POP
// if result then
86968: LD_VAR 0 1
86972: IFFALSE 87032
// begin ToLua ( playSibBomb() ) ;
86974: LD_STRING playSibBomb()
86976: PPUSH
86977: CALL_OW 559
// wait ( 0 0$14 ) ;
86981: LD_INT 490
86983: PPUSH
86984: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
86988: LD_VAR 0 1
86992: PUSH
86993: LD_INT 1
86995: ARRAY
86996: PPUSH
86997: LD_VAR 0 1
87001: PUSH
87002: LD_INT 2
87004: ARRAY
87005: PPUSH
87006: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
87010: LD_VAR 0 1
87014: PUSH
87015: LD_INT 1
87017: ARRAY
87018: PPUSH
87019: LD_VAR 0 1
87023: PUSH
87024: LD_INT 2
87026: ARRAY
87027: PPUSH
87028: CALL_OW 429
// end ; end ;
87032: LD_VAR 0 1
87036: RET
// every 0 0$1 trigger StreamModeActive and sReset do
87037: LD_EXP 108
87041: PUSH
87042: LD_EXP 130
87046: AND
87047: IFFALSE 87059
87049: GO 87051
87051: DISABLE
// YouLost (  ) ;
87052: LD_STRING 
87054: PPUSH
87055: CALL_OW 104
87059: END
// every 0 0$1 trigger StreamModeActive and sFog do
87060: LD_EXP 108
87064: PUSH
87065: LD_EXP 129
87069: AND
87070: IFFALSE 87084
87072: GO 87074
87074: DISABLE
// FogOff ( your_side ) ;
87075: LD_OWVAR 2
87079: PPUSH
87080: CALL_OW 344
87084: END
// every 0 0$1 trigger StreamModeActive and sSun do
87085: LD_EXP 108
87089: PUSH
87090: LD_EXP 131
87094: AND
87095: IFFALSE 87123
87097: GO 87099
87099: DISABLE
// begin solar_recharge_percent := 0 ;
87100: LD_ADDR_OWVAR 79
87104: PUSH
87105: LD_INT 0
87107: ST_TO_ADDR
// wait ( 5 5$00 ) ;
87108: LD_INT 10500
87110: PPUSH
87111: CALL_OW 67
// solar_recharge_percent := 100 ;
87115: LD_ADDR_OWVAR 79
87119: PUSH
87120: LD_INT 100
87122: ST_TO_ADDR
// end ;
87123: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
87124: LD_EXP 108
87128: PUSH
87129: LD_EXP 132
87133: AND
87134: IFFALSE 87373
87136: GO 87138
87138: DISABLE
87139: LD_INT 0
87141: PPUSH
87142: PPUSH
87143: PPUSH
// begin tmp := [ ] ;
87144: LD_ADDR_VAR 0 3
87148: PUSH
87149: EMPTY
87150: ST_TO_ADDR
// for i := 1 to 6 do
87151: LD_ADDR_VAR 0 1
87155: PUSH
87156: DOUBLE
87157: LD_INT 1
87159: DEC
87160: ST_TO_ADDR
87161: LD_INT 6
87163: PUSH
87164: FOR_TO
87165: IFFALSE 87270
// begin uc_nation := nation_nature ;
87167: LD_ADDR_OWVAR 21
87171: PUSH
87172: LD_INT 0
87174: ST_TO_ADDR
// uc_side := 0 ;
87175: LD_ADDR_OWVAR 20
87179: PUSH
87180: LD_INT 0
87182: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
87183: LD_ADDR_OWVAR 29
87187: PUSH
87188: LD_INT 12
87190: PUSH
87191: LD_INT 12
87193: PUSH
87194: EMPTY
87195: LIST
87196: LIST
87197: ST_TO_ADDR
// hc_agressivity := 20 ;
87198: LD_ADDR_OWVAR 35
87202: PUSH
87203: LD_INT 20
87205: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
87206: LD_ADDR_OWVAR 28
87210: PUSH
87211: LD_INT 17
87213: ST_TO_ADDR
// hc_gallery :=  ;
87214: LD_ADDR_OWVAR 33
87218: PUSH
87219: LD_STRING 
87221: ST_TO_ADDR
// hc_name :=  ;
87222: LD_ADDR_OWVAR 26
87226: PUSH
87227: LD_STRING 
87229: ST_TO_ADDR
// un := CreateHuman ;
87230: LD_ADDR_VAR 0 2
87234: PUSH
87235: CALL_OW 44
87239: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
87240: LD_VAR 0 2
87244: PPUSH
87245: LD_INT 1
87247: PPUSH
87248: CALL_OW 51
// tmp := tmp ^ un ;
87252: LD_ADDR_VAR 0 3
87256: PUSH
87257: LD_VAR 0 3
87261: PUSH
87262: LD_VAR 0 2
87266: ADD
87267: ST_TO_ADDR
// end ;
87268: GO 87164
87270: POP
87271: POP
// repeat wait ( 0 0$1 ) ;
87272: LD_INT 35
87274: PPUSH
87275: CALL_OW 67
// for un in tmp do
87279: LD_ADDR_VAR 0 2
87283: PUSH
87284: LD_VAR 0 3
87288: PUSH
87289: FOR_IN
87290: IFFALSE 87364
// begin if IsDead ( un ) then
87292: LD_VAR 0 2
87296: PPUSH
87297: CALL_OW 301
87301: IFFALSE 87321
// begin tmp := tmp diff un ;
87303: LD_ADDR_VAR 0 3
87307: PUSH
87308: LD_VAR 0 3
87312: PUSH
87313: LD_VAR 0 2
87317: DIFF
87318: ST_TO_ADDR
// continue ;
87319: GO 87289
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
87321: LD_VAR 0 2
87325: PPUSH
87326: LD_INT 3
87328: PUSH
87329: LD_INT 22
87331: PUSH
87332: LD_INT 0
87334: PUSH
87335: EMPTY
87336: LIST
87337: LIST
87338: PUSH
87339: EMPTY
87340: LIST
87341: LIST
87342: PPUSH
87343: CALL_OW 69
87347: PPUSH
87348: LD_VAR 0 2
87352: PPUSH
87353: CALL_OW 74
87357: PPUSH
87358: CALL_OW 115
// end ;
87362: GO 87289
87364: POP
87365: POP
// until not tmp ;
87366: LD_VAR 0 3
87370: NOT
87371: IFFALSE 87272
// end ;
87373: PPOPN 3
87375: END
// every 0 0$1 trigger StreamModeActive and sTroll do
87376: LD_EXP 108
87380: PUSH
87381: LD_EXP 133
87385: AND
87386: IFFALSE 87440
87388: GO 87390
87390: DISABLE
// begin ToLua ( displayTroll(); ) ;
87391: LD_STRING displayTroll();
87393: PPUSH
87394: CALL_OW 559
// wait ( 3 3$00 ) ;
87398: LD_INT 6300
87400: PPUSH
87401: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87405: LD_STRING hideTroll();
87407: PPUSH
87408: CALL_OW 559
// wait ( 1 1$00 ) ;
87412: LD_INT 2100
87414: PPUSH
87415: CALL_OW 67
// ToLua ( displayTroll(); ) ;
87419: LD_STRING displayTroll();
87421: PPUSH
87422: CALL_OW 559
// wait ( 1 1$00 ) ;
87426: LD_INT 2100
87428: PPUSH
87429: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87433: LD_STRING hideTroll();
87435: PPUSH
87436: CALL_OW 559
// end ;
87440: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
87441: LD_EXP 108
87445: PUSH
87446: LD_EXP 134
87450: AND
87451: IFFALSE 87514
87453: GO 87455
87455: DISABLE
87456: LD_INT 0
87458: PPUSH
// begin p := 0 ;
87459: LD_ADDR_VAR 0 1
87463: PUSH
87464: LD_INT 0
87466: ST_TO_ADDR
// repeat game_speed := 1 ;
87467: LD_ADDR_OWVAR 65
87471: PUSH
87472: LD_INT 1
87474: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87475: LD_INT 35
87477: PPUSH
87478: CALL_OW 67
// p := p + 1 ;
87482: LD_ADDR_VAR 0 1
87486: PUSH
87487: LD_VAR 0 1
87491: PUSH
87492: LD_INT 1
87494: PLUS
87495: ST_TO_ADDR
// until p >= 60 ;
87496: LD_VAR 0 1
87500: PUSH
87501: LD_INT 60
87503: GREATEREQUAL
87504: IFFALSE 87467
// game_speed := 4 ;
87506: LD_ADDR_OWVAR 65
87510: PUSH
87511: LD_INT 4
87513: ST_TO_ADDR
// end ;
87514: PPOPN 1
87516: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
87517: LD_EXP 108
87521: PUSH
87522: LD_EXP 135
87526: AND
87527: IFFALSE 87673
87529: GO 87531
87531: DISABLE
87532: LD_INT 0
87534: PPUSH
87535: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87536: LD_ADDR_VAR 0 1
87540: PUSH
87541: LD_INT 22
87543: PUSH
87544: LD_OWVAR 2
87548: PUSH
87549: EMPTY
87550: LIST
87551: LIST
87552: PUSH
87553: LD_INT 2
87555: PUSH
87556: LD_INT 30
87558: PUSH
87559: LD_INT 0
87561: PUSH
87562: EMPTY
87563: LIST
87564: LIST
87565: PUSH
87566: LD_INT 30
87568: PUSH
87569: LD_INT 1
87571: PUSH
87572: EMPTY
87573: LIST
87574: LIST
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: LIST
87580: PUSH
87581: EMPTY
87582: LIST
87583: LIST
87584: PPUSH
87585: CALL_OW 69
87589: ST_TO_ADDR
// if not depot then
87590: LD_VAR 0 1
87594: NOT
87595: IFFALSE 87599
// exit ;
87597: GO 87673
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
87599: LD_ADDR_VAR 0 2
87603: PUSH
87604: LD_VAR 0 1
87608: PUSH
87609: LD_INT 1
87611: PPUSH
87612: LD_VAR 0 1
87616: PPUSH
87617: CALL_OW 12
87621: ARRAY
87622: PPUSH
87623: CALL_OW 274
87627: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
87628: LD_VAR 0 2
87632: PPUSH
87633: LD_INT 1
87635: PPUSH
87636: LD_INT 0
87638: PPUSH
87639: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
87643: LD_VAR 0 2
87647: PPUSH
87648: LD_INT 2
87650: PPUSH
87651: LD_INT 0
87653: PPUSH
87654: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
87658: LD_VAR 0 2
87662: PPUSH
87663: LD_INT 3
87665: PPUSH
87666: LD_INT 0
87668: PPUSH
87669: CALL_OW 277
// end ;
87673: PPOPN 2
87675: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
87676: LD_EXP 108
87680: PUSH
87681: LD_EXP 136
87685: AND
87686: IFFALSE 87783
87688: GO 87690
87690: DISABLE
87691: LD_INT 0
87693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87694: LD_ADDR_VAR 0 1
87698: PUSH
87699: LD_INT 22
87701: PUSH
87702: LD_OWVAR 2
87706: PUSH
87707: EMPTY
87708: LIST
87709: LIST
87710: PUSH
87711: LD_INT 21
87713: PUSH
87714: LD_INT 1
87716: PUSH
87717: EMPTY
87718: LIST
87719: LIST
87720: PUSH
87721: LD_INT 3
87723: PUSH
87724: LD_INT 23
87726: PUSH
87727: LD_INT 0
87729: PUSH
87730: EMPTY
87731: LIST
87732: LIST
87733: PUSH
87734: EMPTY
87735: LIST
87736: LIST
87737: PUSH
87738: EMPTY
87739: LIST
87740: LIST
87741: LIST
87742: PPUSH
87743: CALL_OW 69
87747: ST_TO_ADDR
// if not tmp then
87748: LD_VAR 0 1
87752: NOT
87753: IFFALSE 87757
// exit ;
87755: GO 87783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
87757: LD_VAR 0 1
87761: PUSH
87762: LD_INT 1
87764: PPUSH
87765: LD_VAR 0 1
87769: PPUSH
87770: CALL_OW 12
87774: ARRAY
87775: PPUSH
87776: LD_INT 200
87778: PPUSH
87779: CALL_OW 234
// end ;
87783: PPOPN 1
87785: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
87786: LD_EXP 108
87790: PUSH
87791: LD_EXP 137
87795: AND
87796: IFFALSE 87875
87798: GO 87800
87800: DISABLE
87801: LD_INT 0
87803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
87804: LD_ADDR_VAR 0 1
87808: PUSH
87809: LD_INT 22
87811: PUSH
87812: LD_OWVAR 2
87816: PUSH
87817: EMPTY
87818: LIST
87819: LIST
87820: PUSH
87821: LD_INT 21
87823: PUSH
87824: LD_INT 2
87826: PUSH
87827: EMPTY
87828: LIST
87829: LIST
87830: PUSH
87831: EMPTY
87832: LIST
87833: LIST
87834: PPUSH
87835: CALL_OW 69
87839: ST_TO_ADDR
// if not tmp then
87840: LD_VAR 0 1
87844: NOT
87845: IFFALSE 87849
// exit ;
87847: GO 87875
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
87849: LD_VAR 0 1
87853: PUSH
87854: LD_INT 1
87856: PPUSH
87857: LD_VAR 0 1
87861: PPUSH
87862: CALL_OW 12
87866: ARRAY
87867: PPUSH
87868: LD_INT 60
87870: PPUSH
87871: CALL_OW 234
// end ;
87875: PPOPN 1
87877: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
87878: LD_EXP 108
87882: PUSH
87883: LD_EXP 138
87887: AND
87888: IFFALSE 87987
87890: GO 87892
87892: DISABLE
87893: LD_INT 0
87895: PPUSH
87896: PPUSH
// begin enable ;
87897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
87898: LD_ADDR_VAR 0 1
87902: PUSH
87903: LD_INT 22
87905: PUSH
87906: LD_OWVAR 2
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: PUSH
87915: LD_INT 61
87917: PUSH
87918: EMPTY
87919: LIST
87920: PUSH
87921: LD_INT 33
87923: PUSH
87924: LD_INT 2
87926: PUSH
87927: EMPTY
87928: LIST
87929: LIST
87930: PUSH
87931: EMPTY
87932: LIST
87933: LIST
87934: LIST
87935: PPUSH
87936: CALL_OW 69
87940: ST_TO_ADDR
// if not tmp then
87941: LD_VAR 0 1
87945: NOT
87946: IFFALSE 87950
// exit ;
87948: GO 87987
// for i in tmp do
87950: LD_ADDR_VAR 0 2
87954: PUSH
87955: LD_VAR 0 1
87959: PUSH
87960: FOR_IN
87961: IFFALSE 87985
// if IsControledBy ( i ) then
87963: LD_VAR 0 2
87967: PPUSH
87968: CALL_OW 312
87972: IFFALSE 87983
// ComUnlink ( i ) ;
87974: LD_VAR 0 2
87978: PPUSH
87979: CALL_OW 136
87983: GO 87960
87985: POP
87986: POP
// end ;
87987: PPOPN 2
87989: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
87990: LD_EXP 108
87994: PUSH
87995: LD_EXP 139
87999: AND
88000: IFFALSE 88140
88002: GO 88004
88004: DISABLE
88005: LD_INT 0
88007: PPUSH
88008: PPUSH
// begin ToLua ( displayPowell(); ) ;
88009: LD_STRING displayPowell();
88011: PPUSH
88012: CALL_OW 559
// uc_side := 0 ;
88016: LD_ADDR_OWVAR 20
88020: PUSH
88021: LD_INT 0
88023: ST_TO_ADDR
// uc_nation := 2 ;
88024: LD_ADDR_OWVAR 21
88028: PUSH
88029: LD_INT 2
88031: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
88032: LD_ADDR_OWVAR 37
88036: PUSH
88037: LD_INT 14
88039: ST_TO_ADDR
// vc_engine := engine_siberite ;
88040: LD_ADDR_OWVAR 39
88044: PUSH
88045: LD_INT 3
88047: ST_TO_ADDR
// vc_control := control_apeman ;
88048: LD_ADDR_OWVAR 38
88052: PUSH
88053: LD_INT 5
88055: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
88056: LD_ADDR_OWVAR 40
88060: PUSH
88061: LD_INT 29
88063: ST_TO_ADDR
// un := CreateVehicle ;
88064: LD_ADDR_VAR 0 2
88068: PUSH
88069: CALL_OW 45
88073: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88074: LD_VAR 0 2
88078: PPUSH
88079: LD_INT 1
88081: PPUSH
88082: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
88086: LD_INT 35
88088: PPUSH
88089: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
88093: LD_VAR 0 2
88097: PPUSH
88098: LD_INT 22
88100: PUSH
88101: LD_OWVAR 2
88105: PUSH
88106: EMPTY
88107: LIST
88108: LIST
88109: PPUSH
88110: CALL_OW 69
88114: PPUSH
88115: LD_VAR 0 2
88119: PPUSH
88120: CALL_OW 74
88124: PPUSH
88125: CALL_OW 115
// until IsDead ( un ) ;
88129: LD_VAR 0 2
88133: PPUSH
88134: CALL_OW 301
88138: IFFALSE 88086
// end ;
88140: PPOPN 2
88142: END
// every 0 0$1 trigger StreamModeActive and sStu do
88143: LD_EXP 108
88147: PUSH
88148: LD_EXP 147
88152: AND
88153: IFFALSE 88169
88155: GO 88157
88157: DISABLE
// begin ToLua ( displayStucuk(); ) ;
88158: LD_STRING displayStucuk();
88160: PPUSH
88161: CALL_OW 559
// ResetFog ;
88165: CALL_OW 335
// end ;
88169: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
88170: LD_EXP 108
88174: PUSH
88175: LD_EXP 140
88179: AND
88180: IFFALSE 88321
88182: GO 88184
88184: DISABLE
88185: LD_INT 0
88187: PPUSH
88188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88189: LD_ADDR_VAR 0 2
88193: PUSH
88194: LD_INT 22
88196: PUSH
88197: LD_OWVAR 2
88201: PUSH
88202: EMPTY
88203: LIST
88204: LIST
88205: PUSH
88206: LD_INT 21
88208: PUSH
88209: LD_INT 1
88211: PUSH
88212: EMPTY
88213: LIST
88214: LIST
88215: PUSH
88216: EMPTY
88217: LIST
88218: LIST
88219: PPUSH
88220: CALL_OW 69
88224: ST_TO_ADDR
// if not tmp then
88225: LD_VAR 0 2
88229: NOT
88230: IFFALSE 88234
// exit ;
88232: GO 88321
// un := tmp [ rand ( 1 , tmp ) ] ;
88234: LD_ADDR_VAR 0 1
88238: PUSH
88239: LD_VAR 0 2
88243: PUSH
88244: LD_INT 1
88246: PPUSH
88247: LD_VAR 0 2
88251: PPUSH
88252: CALL_OW 12
88256: ARRAY
88257: ST_TO_ADDR
// SetSide ( un , 0 ) ;
88258: LD_VAR 0 1
88262: PPUSH
88263: LD_INT 0
88265: PPUSH
88266: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
88270: LD_VAR 0 1
88274: PPUSH
88275: LD_OWVAR 3
88279: PUSH
88280: LD_VAR 0 1
88284: DIFF
88285: PPUSH
88286: LD_VAR 0 1
88290: PPUSH
88291: CALL_OW 74
88295: PPUSH
88296: CALL_OW 115
// wait ( 0 0$20 ) ;
88300: LD_INT 700
88302: PPUSH
88303: CALL_OW 67
// SetSide ( un , your_side ) ;
88307: LD_VAR 0 1
88311: PPUSH
88312: LD_OWVAR 2
88316: PPUSH
88317: CALL_OW 235
// end ;
88321: PPOPN 2
88323: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
88324: LD_EXP 108
88328: PUSH
88329: LD_EXP 141
88333: AND
88334: IFFALSE 88440
88336: GO 88338
88338: DISABLE
88339: LD_INT 0
88341: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
88342: LD_ADDR_VAR 0 1
88346: PUSH
88347: LD_INT 22
88349: PUSH
88350: LD_OWVAR 2
88354: PUSH
88355: EMPTY
88356: LIST
88357: LIST
88358: PUSH
88359: LD_INT 2
88361: PUSH
88362: LD_INT 30
88364: PUSH
88365: LD_INT 0
88367: PUSH
88368: EMPTY
88369: LIST
88370: LIST
88371: PUSH
88372: LD_INT 30
88374: PUSH
88375: LD_INT 1
88377: PUSH
88378: EMPTY
88379: LIST
88380: LIST
88381: PUSH
88382: EMPTY
88383: LIST
88384: LIST
88385: LIST
88386: PUSH
88387: EMPTY
88388: LIST
88389: LIST
88390: PPUSH
88391: CALL_OW 69
88395: ST_TO_ADDR
// if not depot then
88396: LD_VAR 0 1
88400: NOT
88401: IFFALSE 88405
// exit ;
88403: GO 88440
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
88405: LD_VAR 0 1
88409: PUSH
88410: LD_INT 1
88412: ARRAY
88413: PPUSH
88414: CALL_OW 250
88418: PPUSH
88419: LD_VAR 0 1
88423: PUSH
88424: LD_INT 1
88426: ARRAY
88427: PPUSH
88428: CALL_OW 251
88432: PPUSH
88433: LD_INT 70
88435: PPUSH
88436: CALL_OW 495
// end ;
88440: PPOPN 1
88442: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
88443: LD_EXP 108
88447: PUSH
88448: LD_EXP 142
88452: AND
88453: IFFALSE 88664
88455: GO 88457
88457: DISABLE
88458: LD_INT 0
88460: PPUSH
88461: PPUSH
88462: PPUSH
88463: PPUSH
88464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88465: LD_ADDR_VAR 0 5
88469: PUSH
88470: LD_INT 22
88472: PUSH
88473: LD_OWVAR 2
88477: PUSH
88478: EMPTY
88479: LIST
88480: LIST
88481: PUSH
88482: LD_INT 21
88484: PUSH
88485: LD_INT 1
88487: PUSH
88488: EMPTY
88489: LIST
88490: LIST
88491: PUSH
88492: EMPTY
88493: LIST
88494: LIST
88495: PPUSH
88496: CALL_OW 69
88500: ST_TO_ADDR
// if not tmp then
88501: LD_VAR 0 5
88505: NOT
88506: IFFALSE 88510
// exit ;
88508: GO 88664
// for i in tmp do
88510: LD_ADDR_VAR 0 1
88514: PUSH
88515: LD_VAR 0 5
88519: PUSH
88520: FOR_IN
88521: IFFALSE 88662
// begin d := rand ( 0 , 5 ) ;
88523: LD_ADDR_VAR 0 4
88527: PUSH
88528: LD_INT 0
88530: PPUSH
88531: LD_INT 5
88533: PPUSH
88534: CALL_OW 12
88538: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
88539: LD_ADDR_VAR 0 2
88543: PUSH
88544: LD_VAR 0 1
88548: PPUSH
88549: CALL_OW 250
88553: PPUSH
88554: LD_VAR 0 4
88558: PPUSH
88559: LD_INT 3
88561: PPUSH
88562: LD_INT 12
88564: PPUSH
88565: CALL_OW 12
88569: PPUSH
88570: CALL_OW 272
88574: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
88575: LD_ADDR_VAR 0 3
88579: PUSH
88580: LD_VAR 0 1
88584: PPUSH
88585: CALL_OW 251
88589: PPUSH
88590: LD_VAR 0 4
88594: PPUSH
88595: LD_INT 3
88597: PPUSH
88598: LD_INT 12
88600: PPUSH
88601: CALL_OW 12
88605: PPUSH
88606: CALL_OW 273
88610: ST_TO_ADDR
// if ValidHex ( x , y ) then
88611: LD_VAR 0 2
88615: PPUSH
88616: LD_VAR 0 3
88620: PPUSH
88621: CALL_OW 488
88625: IFFALSE 88660
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
88627: LD_VAR 0 1
88631: PPUSH
88632: LD_VAR 0 2
88636: PPUSH
88637: LD_VAR 0 3
88641: PPUSH
88642: LD_INT 3
88644: PPUSH
88645: LD_INT 6
88647: PPUSH
88648: CALL_OW 12
88652: PPUSH
88653: LD_INT 1
88655: PPUSH
88656: CALL_OW 483
// end ;
88660: GO 88520
88662: POP
88663: POP
// end ;
88664: PPOPN 5
88666: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
88667: LD_EXP 108
88671: PUSH
88672: LD_EXP 143
88676: AND
88677: IFFALSE 88771
88679: GO 88681
88681: DISABLE
88682: LD_INT 0
88684: PPUSH
88685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
88686: LD_ADDR_VAR 0 2
88690: PUSH
88691: LD_INT 22
88693: PUSH
88694: LD_OWVAR 2
88698: PUSH
88699: EMPTY
88700: LIST
88701: LIST
88702: PUSH
88703: LD_INT 32
88705: PUSH
88706: LD_INT 1
88708: PUSH
88709: EMPTY
88710: LIST
88711: LIST
88712: PUSH
88713: LD_INT 21
88715: PUSH
88716: LD_INT 2
88718: PUSH
88719: EMPTY
88720: LIST
88721: LIST
88722: PUSH
88723: EMPTY
88724: LIST
88725: LIST
88726: LIST
88727: PPUSH
88728: CALL_OW 69
88732: ST_TO_ADDR
// if not tmp then
88733: LD_VAR 0 2
88737: NOT
88738: IFFALSE 88742
// exit ;
88740: GO 88771
// for i in tmp do
88742: LD_ADDR_VAR 0 1
88746: PUSH
88747: LD_VAR 0 2
88751: PUSH
88752: FOR_IN
88753: IFFALSE 88769
// SetFuel ( i , 0 ) ;
88755: LD_VAR 0 1
88759: PPUSH
88760: LD_INT 0
88762: PPUSH
88763: CALL_OW 240
88767: GO 88752
88769: POP
88770: POP
// end ;
88771: PPOPN 2
88773: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
88774: LD_EXP 108
88778: PUSH
88779: LD_EXP 144
88783: AND
88784: IFFALSE 88850
88786: GO 88788
88788: DISABLE
88789: LD_INT 0
88791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
88792: LD_ADDR_VAR 0 1
88796: PUSH
88797: LD_INT 22
88799: PUSH
88800: LD_OWVAR 2
88804: PUSH
88805: EMPTY
88806: LIST
88807: LIST
88808: PUSH
88809: LD_INT 30
88811: PUSH
88812: LD_INT 29
88814: PUSH
88815: EMPTY
88816: LIST
88817: LIST
88818: PUSH
88819: EMPTY
88820: LIST
88821: LIST
88822: PPUSH
88823: CALL_OW 69
88827: ST_TO_ADDR
// if not tmp then
88828: LD_VAR 0 1
88832: NOT
88833: IFFALSE 88837
// exit ;
88835: GO 88850
// DestroyUnit ( tmp [ 1 ] ) ;
88837: LD_VAR 0 1
88841: PUSH
88842: LD_INT 1
88844: ARRAY
88845: PPUSH
88846: CALL_OW 65
// end ;
88850: PPOPN 1
88852: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
88853: LD_EXP 108
88857: PUSH
88858: LD_EXP 146
88862: AND
88863: IFFALSE 88992
88865: GO 88867
88867: DISABLE
88868: LD_INT 0
88870: PPUSH
// begin uc_side := 0 ;
88871: LD_ADDR_OWVAR 20
88875: PUSH
88876: LD_INT 0
88878: ST_TO_ADDR
// uc_nation := nation_arabian ;
88879: LD_ADDR_OWVAR 21
88883: PUSH
88884: LD_INT 2
88886: ST_TO_ADDR
// hc_gallery :=  ;
88887: LD_ADDR_OWVAR 33
88891: PUSH
88892: LD_STRING 
88894: ST_TO_ADDR
// hc_name :=  ;
88895: LD_ADDR_OWVAR 26
88899: PUSH
88900: LD_STRING 
88902: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
88903: LD_INT 1
88905: PPUSH
88906: LD_INT 11
88908: PPUSH
88909: LD_INT 10
88911: PPUSH
88912: CALL_OW 380
// un := CreateHuman ;
88916: LD_ADDR_VAR 0 1
88920: PUSH
88921: CALL_OW 44
88925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88926: LD_VAR 0 1
88930: PPUSH
88931: LD_INT 1
88933: PPUSH
88934: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
88938: LD_INT 35
88940: PPUSH
88941: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
88945: LD_VAR 0 1
88949: PPUSH
88950: LD_INT 22
88952: PUSH
88953: LD_OWVAR 2
88957: PUSH
88958: EMPTY
88959: LIST
88960: LIST
88961: PPUSH
88962: CALL_OW 69
88966: PPUSH
88967: LD_VAR 0 1
88971: PPUSH
88972: CALL_OW 74
88976: PPUSH
88977: CALL_OW 115
// until IsDead ( un ) ;
88981: LD_VAR 0 1
88985: PPUSH
88986: CALL_OW 301
88990: IFFALSE 88938
// end ;
88992: PPOPN 1
88994: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
88995: LD_EXP 108
88999: PUSH
89000: LD_EXP 148
89004: AND
89005: IFFALSE 89017
89007: GO 89009
89009: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
89010: LD_STRING earthquake(getX(game), 0, 32)
89012: PPUSH
89013: CALL_OW 559
89017: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
89018: LD_EXP 108
89022: PUSH
89023: LD_EXP 149
89027: AND
89028: IFFALSE 89119
89030: GO 89032
89032: DISABLE
89033: LD_INT 0
89035: PPUSH
// begin enable ;
89036: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
89037: LD_ADDR_VAR 0 1
89041: PUSH
89042: LD_INT 22
89044: PUSH
89045: LD_OWVAR 2
89049: PUSH
89050: EMPTY
89051: LIST
89052: LIST
89053: PUSH
89054: LD_INT 21
89056: PUSH
89057: LD_INT 2
89059: PUSH
89060: EMPTY
89061: LIST
89062: LIST
89063: PUSH
89064: LD_INT 33
89066: PUSH
89067: LD_INT 3
89069: PUSH
89070: EMPTY
89071: LIST
89072: LIST
89073: PUSH
89074: EMPTY
89075: LIST
89076: LIST
89077: LIST
89078: PPUSH
89079: CALL_OW 69
89083: ST_TO_ADDR
// if not tmp then
89084: LD_VAR 0 1
89088: NOT
89089: IFFALSE 89093
// exit ;
89091: GO 89119
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
89093: LD_VAR 0 1
89097: PUSH
89098: LD_INT 1
89100: PPUSH
89101: LD_VAR 0 1
89105: PPUSH
89106: CALL_OW 12
89110: ARRAY
89111: PPUSH
89112: LD_INT 1
89114: PPUSH
89115: CALL_OW 234
// end ;
89119: PPOPN 1
89121: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
89122: LD_EXP 108
89126: PUSH
89127: LD_EXP 150
89131: AND
89132: IFFALSE 89273
89134: GO 89136
89136: DISABLE
89137: LD_INT 0
89139: PPUSH
89140: PPUSH
89141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89142: LD_ADDR_VAR 0 3
89146: PUSH
89147: LD_INT 22
89149: PUSH
89150: LD_OWVAR 2
89154: PUSH
89155: EMPTY
89156: LIST
89157: LIST
89158: PUSH
89159: LD_INT 25
89161: PUSH
89162: LD_INT 1
89164: PUSH
89165: EMPTY
89166: LIST
89167: LIST
89168: PUSH
89169: EMPTY
89170: LIST
89171: LIST
89172: PPUSH
89173: CALL_OW 69
89177: ST_TO_ADDR
// if not tmp then
89178: LD_VAR 0 3
89182: NOT
89183: IFFALSE 89187
// exit ;
89185: GO 89273
// un := tmp [ rand ( 1 , tmp ) ] ;
89187: LD_ADDR_VAR 0 2
89191: PUSH
89192: LD_VAR 0 3
89196: PUSH
89197: LD_INT 1
89199: PPUSH
89200: LD_VAR 0 3
89204: PPUSH
89205: CALL_OW 12
89209: ARRAY
89210: ST_TO_ADDR
// if Crawls ( un ) then
89211: LD_VAR 0 2
89215: PPUSH
89216: CALL_OW 318
89220: IFFALSE 89231
// ComWalk ( un ) ;
89222: LD_VAR 0 2
89226: PPUSH
89227: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
89231: LD_VAR 0 2
89235: PPUSH
89236: LD_INT 9
89238: PPUSH
89239: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
89243: LD_INT 28
89245: PPUSH
89246: LD_OWVAR 2
89250: PPUSH
89251: LD_INT 2
89253: PPUSH
89254: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
89258: LD_INT 29
89260: PPUSH
89261: LD_OWVAR 2
89265: PPUSH
89266: LD_INT 2
89268: PPUSH
89269: CALL_OW 322
// end ;
89273: PPOPN 3
89275: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
89276: LD_EXP 108
89280: PUSH
89281: LD_EXP 151
89285: AND
89286: IFFALSE 89397
89288: GO 89290
89290: DISABLE
89291: LD_INT 0
89293: PPUSH
89294: PPUSH
89295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89296: LD_ADDR_VAR 0 3
89300: PUSH
89301: LD_INT 22
89303: PUSH
89304: LD_OWVAR 2
89308: PUSH
89309: EMPTY
89310: LIST
89311: LIST
89312: PUSH
89313: LD_INT 25
89315: PUSH
89316: LD_INT 1
89318: PUSH
89319: EMPTY
89320: LIST
89321: LIST
89322: PUSH
89323: EMPTY
89324: LIST
89325: LIST
89326: PPUSH
89327: CALL_OW 69
89331: ST_TO_ADDR
// if not tmp then
89332: LD_VAR 0 3
89336: NOT
89337: IFFALSE 89341
// exit ;
89339: GO 89397
// un := tmp [ rand ( 1 , tmp ) ] ;
89341: LD_ADDR_VAR 0 2
89345: PUSH
89346: LD_VAR 0 3
89350: PUSH
89351: LD_INT 1
89353: PPUSH
89354: LD_VAR 0 3
89358: PPUSH
89359: CALL_OW 12
89363: ARRAY
89364: ST_TO_ADDR
// if Crawls ( un ) then
89365: LD_VAR 0 2
89369: PPUSH
89370: CALL_OW 318
89374: IFFALSE 89385
// ComWalk ( un ) ;
89376: LD_VAR 0 2
89380: PPUSH
89381: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89385: LD_VAR 0 2
89389: PPUSH
89390: LD_INT 8
89392: PPUSH
89393: CALL_OW 336
// end ;
89397: PPOPN 3
89399: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
89400: LD_EXP 108
89404: PUSH
89405: LD_EXP 152
89409: AND
89410: IFFALSE 89554
89412: GO 89414
89414: DISABLE
89415: LD_INT 0
89417: PPUSH
89418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
89419: LD_ADDR_VAR 0 2
89423: PUSH
89424: LD_INT 22
89426: PUSH
89427: LD_OWVAR 2
89431: PUSH
89432: EMPTY
89433: LIST
89434: LIST
89435: PUSH
89436: LD_INT 21
89438: PUSH
89439: LD_INT 2
89441: PUSH
89442: EMPTY
89443: LIST
89444: LIST
89445: PUSH
89446: LD_INT 2
89448: PUSH
89449: LD_INT 34
89451: PUSH
89452: LD_INT 12
89454: PUSH
89455: EMPTY
89456: LIST
89457: LIST
89458: PUSH
89459: LD_INT 34
89461: PUSH
89462: LD_INT 51
89464: PUSH
89465: EMPTY
89466: LIST
89467: LIST
89468: PUSH
89469: LD_INT 34
89471: PUSH
89472: LD_INT 32
89474: PUSH
89475: EMPTY
89476: LIST
89477: LIST
89478: PUSH
89479: EMPTY
89480: LIST
89481: LIST
89482: LIST
89483: LIST
89484: PUSH
89485: EMPTY
89486: LIST
89487: LIST
89488: LIST
89489: PPUSH
89490: CALL_OW 69
89494: ST_TO_ADDR
// if not tmp then
89495: LD_VAR 0 2
89499: NOT
89500: IFFALSE 89504
// exit ;
89502: GO 89554
// for i in tmp do
89504: LD_ADDR_VAR 0 1
89508: PUSH
89509: LD_VAR 0 2
89513: PUSH
89514: FOR_IN
89515: IFFALSE 89552
// if GetCargo ( i , mat_artifact ) = 0 then
89517: LD_VAR 0 1
89521: PPUSH
89522: LD_INT 4
89524: PPUSH
89525: CALL_OW 289
89529: PUSH
89530: LD_INT 0
89532: EQUAL
89533: IFFALSE 89550
// SetCargo ( i , mat_siberit , 100 ) ;
89535: LD_VAR 0 1
89539: PPUSH
89540: LD_INT 3
89542: PPUSH
89543: LD_INT 100
89545: PPUSH
89546: CALL_OW 290
89550: GO 89514
89552: POP
89553: POP
// end ;
89554: PPOPN 2
89556: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
89557: LD_EXP 108
89561: PUSH
89562: LD_EXP 153
89566: AND
89567: IFFALSE 89750
89569: GO 89571
89571: DISABLE
89572: LD_INT 0
89574: PPUSH
89575: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
89576: LD_ADDR_VAR 0 2
89580: PUSH
89581: LD_INT 22
89583: PUSH
89584: LD_OWVAR 2
89588: PUSH
89589: EMPTY
89590: LIST
89591: LIST
89592: PPUSH
89593: CALL_OW 69
89597: ST_TO_ADDR
// if not tmp then
89598: LD_VAR 0 2
89602: NOT
89603: IFFALSE 89607
// exit ;
89605: GO 89750
// for i := 1 to 2 do
89607: LD_ADDR_VAR 0 1
89611: PUSH
89612: DOUBLE
89613: LD_INT 1
89615: DEC
89616: ST_TO_ADDR
89617: LD_INT 2
89619: PUSH
89620: FOR_TO
89621: IFFALSE 89748
// begin uc_side := your_side ;
89623: LD_ADDR_OWVAR 20
89627: PUSH
89628: LD_OWVAR 2
89632: ST_TO_ADDR
// uc_nation := nation_american ;
89633: LD_ADDR_OWVAR 21
89637: PUSH
89638: LD_INT 1
89640: ST_TO_ADDR
// vc_chassis := us_morphling ;
89641: LD_ADDR_OWVAR 37
89645: PUSH
89646: LD_INT 5
89648: ST_TO_ADDR
// vc_engine := engine_siberite ;
89649: LD_ADDR_OWVAR 39
89653: PUSH
89654: LD_INT 3
89656: ST_TO_ADDR
// vc_control := control_computer ;
89657: LD_ADDR_OWVAR 38
89661: PUSH
89662: LD_INT 3
89664: ST_TO_ADDR
// vc_weapon := us_double_laser ;
89665: LD_ADDR_OWVAR 40
89669: PUSH
89670: LD_INT 10
89672: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
89673: LD_VAR 0 2
89677: PUSH
89678: LD_INT 1
89680: ARRAY
89681: PPUSH
89682: CALL_OW 310
89686: NOT
89687: IFFALSE 89734
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
89689: CALL_OW 45
89693: PPUSH
89694: LD_VAR 0 2
89698: PUSH
89699: LD_INT 1
89701: ARRAY
89702: PPUSH
89703: CALL_OW 250
89707: PPUSH
89708: LD_VAR 0 2
89712: PUSH
89713: LD_INT 1
89715: ARRAY
89716: PPUSH
89717: CALL_OW 251
89721: PPUSH
89722: LD_INT 12
89724: PPUSH
89725: LD_INT 1
89727: PPUSH
89728: CALL_OW 50
89732: GO 89746
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
89734: CALL_OW 45
89738: PPUSH
89739: LD_INT 1
89741: PPUSH
89742: CALL_OW 51
// end ;
89746: GO 89620
89748: POP
89749: POP
// end ;
89750: PPOPN 2
89752: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
89753: LD_EXP 108
89757: PUSH
89758: LD_EXP 154
89762: AND
89763: IFFALSE 89985
89765: GO 89767
89767: DISABLE
89768: LD_INT 0
89770: PPUSH
89771: PPUSH
89772: PPUSH
89773: PPUSH
89774: PPUSH
89775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89776: LD_ADDR_VAR 0 6
89780: PUSH
89781: LD_INT 22
89783: PUSH
89784: LD_OWVAR 2
89788: PUSH
89789: EMPTY
89790: LIST
89791: LIST
89792: PUSH
89793: LD_INT 21
89795: PUSH
89796: LD_INT 1
89798: PUSH
89799: EMPTY
89800: LIST
89801: LIST
89802: PUSH
89803: LD_INT 3
89805: PUSH
89806: LD_INT 23
89808: PUSH
89809: LD_INT 0
89811: PUSH
89812: EMPTY
89813: LIST
89814: LIST
89815: PUSH
89816: EMPTY
89817: LIST
89818: LIST
89819: PUSH
89820: EMPTY
89821: LIST
89822: LIST
89823: LIST
89824: PPUSH
89825: CALL_OW 69
89829: ST_TO_ADDR
// if not tmp then
89830: LD_VAR 0 6
89834: NOT
89835: IFFALSE 89839
// exit ;
89837: GO 89985
// s1 := rand ( 1 , 4 ) ;
89839: LD_ADDR_VAR 0 2
89843: PUSH
89844: LD_INT 1
89846: PPUSH
89847: LD_INT 4
89849: PPUSH
89850: CALL_OW 12
89854: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
89855: LD_ADDR_VAR 0 4
89859: PUSH
89860: LD_VAR 0 6
89864: PUSH
89865: LD_INT 1
89867: ARRAY
89868: PPUSH
89869: LD_VAR 0 2
89873: PPUSH
89874: CALL_OW 259
89878: ST_TO_ADDR
// if s1 = 1 then
89879: LD_VAR 0 2
89883: PUSH
89884: LD_INT 1
89886: EQUAL
89887: IFFALSE 89907
// s2 := rand ( 2 , 4 ) else
89889: LD_ADDR_VAR 0 3
89893: PUSH
89894: LD_INT 2
89896: PPUSH
89897: LD_INT 4
89899: PPUSH
89900: CALL_OW 12
89904: ST_TO_ADDR
89905: GO 89915
// s2 := 1 ;
89907: LD_ADDR_VAR 0 3
89911: PUSH
89912: LD_INT 1
89914: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
89915: LD_ADDR_VAR 0 5
89919: PUSH
89920: LD_VAR 0 6
89924: PUSH
89925: LD_INT 1
89927: ARRAY
89928: PPUSH
89929: LD_VAR 0 3
89933: PPUSH
89934: CALL_OW 259
89938: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
89939: LD_VAR 0 6
89943: PUSH
89944: LD_INT 1
89946: ARRAY
89947: PPUSH
89948: LD_VAR 0 2
89952: PPUSH
89953: LD_VAR 0 5
89957: PPUSH
89958: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
89962: LD_VAR 0 6
89966: PUSH
89967: LD_INT 1
89969: ARRAY
89970: PPUSH
89971: LD_VAR 0 3
89975: PPUSH
89976: LD_VAR 0 4
89980: PPUSH
89981: CALL_OW 237
// end ;
89985: PPOPN 6
89987: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
89988: LD_EXP 108
89992: PUSH
89993: LD_EXP 155
89997: AND
89998: IFFALSE 90077
90000: GO 90002
90002: DISABLE
90003: LD_INT 0
90005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
90006: LD_ADDR_VAR 0 1
90010: PUSH
90011: LD_INT 22
90013: PUSH
90014: LD_OWVAR 2
90018: PUSH
90019: EMPTY
90020: LIST
90021: LIST
90022: PUSH
90023: LD_INT 30
90025: PUSH
90026: LD_INT 3
90028: PUSH
90029: EMPTY
90030: LIST
90031: LIST
90032: PUSH
90033: EMPTY
90034: LIST
90035: LIST
90036: PPUSH
90037: CALL_OW 69
90041: ST_TO_ADDR
// if not tmp then
90042: LD_VAR 0 1
90046: NOT
90047: IFFALSE 90051
// exit ;
90049: GO 90077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
90051: LD_VAR 0 1
90055: PUSH
90056: LD_INT 1
90058: PPUSH
90059: LD_VAR 0 1
90063: PPUSH
90064: CALL_OW 12
90068: ARRAY
90069: PPUSH
90070: LD_INT 1
90072: PPUSH
90073: CALL_OW 234
// end ;
90077: PPOPN 1
90079: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
90080: LD_EXP 108
90084: PUSH
90085: LD_EXP 156
90089: AND
90090: IFFALSE 90202
90092: GO 90094
90094: DISABLE
90095: LD_INT 0
90097: PPUSH
90098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
90099: LD_ADDR_VAR 0 2
90103: PUSH
90104: LD_INT 22
90106: PUSH
90107: LD_OWVAR 2
90111: PUSH
90112: EMPTY
90113: LIST
90114: LIST
90115: PUSH
90116: LD_INT 2
90118: PUSH
90119: LD_INT 30
90121: PUSH
90122: LD_INT 27
90124: PUSH
90125: EMPTY
90126: LIST
90127: LIST
90128: PUSH
90129: LD_INT 30
90131: PUSH
90132: LD_INT 26
90134: PUSH
90135: EMPTY
90136: LIST
90137: LIST
90138: PUSH
90139: LD_INT 30
90141: PUSH
90142: LD_INT 28
90144: PUSH
90145: EMPTY
90146: LIST
90147: LIST
90148: PUSH
90149: EMPTY
90150: LIST
90151: LIST
90152: LIST
90153: LIST
90154: PUSH
90155: EMPTY
90156: LIST
90157: LIST
90158: PPUSH
90159: CALL_OW 69
90163: ST_TO_ADDR
// if not tmp then
90164: LD_VAR 0 2
90168: NOT
90169: IFFALSE 90173
// exit ;
90171: GO 90202
// for i in tmp do
90173: LD_ADDR_VAR 0 1
90177: PUSH
90178: LD_VAR 0 2
90182: PUSH
90183: FOR_IN
90184: IFFALSE 90200
// SetLives ( i , 1 ) ;
90186: LD_VAR 0 1
90190: PPUSH
90191: LD_INT 1
90193: PPUSH
90194: CALL_OW 234
90198: GO 90183
90200: POP
90201: POP
// end ;
90202: PPOPN 2
90204: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
90205: LD_EXP 108
90209: PUSH
90210: LD_EXP 157
90214: AND
90215: IFFALSE 90489
90217: GO 90219
90219: DISABLE
90220: LD_INT 0
90222: PPUSH
90223: PPUSH
90224: PPUSH
// begin i := rand ( 1 , 7 ) ;
90225: LD_ADDR_VAR 0 1
90229: PUSH
90230: LD_INT 1
90232: PPUSH
90233: LD_INT 7
90235: PPUSH
90236: CALL_OW 12
90240: ST_TO_ADDR
// case i of 1 :
90241: LD_VAR 0 1
90245: PUSH
90246: LD_INT 1
90248: DOUBLE
90249: EQUAL
90250: IFTRUE 90254
90252: GO 90264
90254: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
90255: LD_STRING earthquake(getX(game), 0, 32)
90257: PPUSH
90258: CALL_OW 559
90262: GO 90489
90264: LD_INT 2
90266: DOUBLE
90267: EQUAL
90268: IFTRUE 90272
90270: GO 90286
90272: POP
// begin ToLua ( displayStucuk(); ) ;
90273: LD_STRING displayStucuk();
90275: PPUSH
90276: CALL_OW 559
// ResetFog ;
90280: CALL_OW 335
// end ; 3 :
90284: GO 90489
90286: LD_INT 3
90288: DOUBLE
90289: EQUAL
90290: IFTRUE 90294
90292: GO 90398
90294: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90295: LD_ADDR_VAR 0 2
90299: PUSH
90300: LD_INT 22
90302: PUSH
90303: LD_OWVAR 2
90307: PUSH
90308: EMPTY
90309: LIST
90310: LIST
90311: PUSH
90312: LD_INT 25
90314: PUSH
90315: LD_INT 1
90317: PUSH
90318: EMPTY
90319: LIST
90320: LIST
90321: PUSH
90322: EMPTY
90323: LIST
90324: LIST
90325: PPUSH
90326: CALL_OW 69
90330: ST_TO_ADDR
// if not tmp then
90331: LD_VAR 0 2
90335: NOT
90336: IFFALSE 90340
// exit ;
90338: GO 90489
// un := tmp [ rand ( 1 , tmp ) ] ;
90340: LD_ADDR_VAR 0 3
90344: PUSH
90345: LD_VAR 0 2
90349: PUSH
90350: LD_INT 1
90352: PPUSH
90353: LD_VAR 0 2
90357: PPUSH
90358: CALL_OW 12
90362: ARRAY
90363: ST_TO_ADDR
// if Crawls ( un ) then
90364: LD_VAR 0 3
90368: PPUSH
90369: CALL_OW 318
90373: IFFALSE 90384
// ComWalk ( un ) ;
90375: LD_VAR 0 3
90379: PPUSH
90380: CALL_OW 138
// SetClass ( un , class_mortar ) ;
90384: LD_VAR 0 3
90388: PPUSH
90389: LD_INT 8
90391: PPUSH
90392: CALL_OW 336
// end ; 4 :
90396: GO 90489
90398: LD_INT 4
90400: DOUBLE
90401: EQUAL
90402: IFTRUE 90406
90404: GO 90467
90406: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
90407: LD_ADDR_VAR 0 2
90411: PUSH
90412: LD_INT 22
90414: PUSH
90415: LD_OWVAR 2
90419: PUSH
90420: EMPTY
90421: LIST
90422: LIST
90423: PUSH
90424: LD_INT 30
90426: PUSH
90427: LD_INT 29
90429: PUSH
90430: EMPTY
90431: LIST
90432: LIST
90433: PUSH
90434: EMPTY
90435: LIST
90436: LIST
90437: PPUSH
90438: CALL_OW 69
90442: ST_TO_ADDR
// if not tmp then
90443: LD_VAR 0 2
90447: NOT
90448: IFFALSE 90452
// exit ;
90450: GO 90489
// DestroyUnit ( tmp [ 1 ] ) ;
90452: LD_VAR 0 2
90456: PUSH
90457: LD_INT 1
90459: ARRAY
90460: PPUSH
90461: CALL_OW 65
// end ; 5 .. 7 :
90465: GO 90489
90467: LD_INT 5
90469: DOUBLE
90470: GREATEREQUAL
90471: IFFALSE 90479
90473: LD_INT 7
90475: DOUBLE
90476: LESSEQUAL
90477: IFTRUE 90481
90479: GO 90488
90481: POP
// StreamSibBomb ; end ;
90482: CALL 86739 0 0
90486: GO 90489
90488: POP
// end ;
90489: PPOPN 3
90491: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
90492: LD_EXP 108
90496: PUSH
90497: LD_EXP 158
90501: AND
90502: IFFALSE 90658
90504: GO 90506
90506: DISABLE
90507: LD_INT 0
90509: PPUSH
90510: PPUSH
90511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
90512: LD_ADDR_VAR 0 2
90516: PUSH
90517: LD_INT 81
90519: PUSH
90520: LD_OWVAR 2
90524: PUSH
90525: EMPTY
90526: LIST
90527: LIST
90528: PUSH
90529: LD_INT 2
90531: PUSH
90532: LD_INT 21
90534: PUSH
90535: LD_INT 1
90537: PUSH
90538: EMPTY
90539: LIST
90540: LIST
90541: PUSH
90542: LD_INT 21
90544: PUSH
90545: LD_INT 2
90547: PUSH
90548: EMPTY
90549: LIST
90550: LIST
90551: PUSH
90552: EMPTY
90553: LIST
90554: LIST
90555: LIST
90556: PUSH
90557: EMPTY
90558: LIST
90559: LIST
90560: PPUSH
90561: CALL_OW 69
90565: ST_TO_ADDR
// if not tmp then
90566: LD_VAR 0 2
90570: NOT
90571: IFFALSE 90575
// exit ;
90573: GO 90658
// p := 0 ;
90575: LD_ADDR_VAR 0 3
90579: PUSH
90580: LD_INT 0
90582: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90583: LD_INT 35
90585: PPUSH
90586: CALL_OW 67
// p := p + 1 ;
90590: LD_ADDR_VAR 0 3
90594: PUSH
90595: LD_VAR 0 3
90599: PUSH
90600: LD_INT 1
90602: PLUS
90603: ST_TO_ADDR
// for i in tmp do
90604: LD_ADDR_VAR 0 1
90608: PUSH
90609: LD_VAR 0 2
90613: PUSH
90614: FOR_IN
90615: IFFALSE 90646
// if GetLives ( i ) < 1000 then
90617: LD_VAR 0 1
90621: PPUSH
90622: CALL_OW 256
90626: PUSH
90627: LD_INT 1000
90629: LESS
90630: IFFALSE 90644
// SetLives ( i , 1000 ) ;
90632: LD_VAR 0 1
90636: PPUSH
90637: LD_INT 1000
90639: PPUSH
90640: CALL_OW 234
90644: GO 90614
90646: POP
90647: POP
// until p > 20 ;
90648: LD_VAR 0 3
90652: PUSH
90653: LD_INT 20
90655: GREATER
90656: IFFALSE 90583
// end ;
90658: PPOPN 3
90660: END
// every 0 0$1 trigger StreamModeActive and sTime do
90661: LD_EXP 108
90665: PUSH
90666: LD_EXP 159
90670: AND
90671: IFFALSE 90706
90673: GO 90675
90675: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
90676: LD_INT 28
90678: PPUSH
90679: LD_OWVAR 2
90683: PPUSH
90684: LD_INT 2
90686: PPUSH
90687: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
90691: LD_INT 30
90693: PPUSH
90694: LD_OWVAR 2
90698: PPUSH
90699: LD_INT 2
90701: PPUSH
90702: CALL_OW 322
// end ;
90706: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
90707: LD_EXP 108
90711: PUSH
90712: LD_EXP 160
90716: AND
90717: IFFALSE 90838
90719: GO 90721
90721: DISABLE
90722: LD_INT 0
90724: PPUSH
90725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
90726: LD_ADDR_VAR 0 2
90730: PUSH
90731: LD_INT 22
90733: PUSH
90734: LD_OWVAR 2
90738: PUSH
90739: EMPTY
90740: LIST
90741: LIST
90742: PUSH
90743: LD_INT 21
90745: PUSH
90746: LD_INT 1
90748: PUSH
90749: EMPTY
90750: LIST
90751: LIST
90752: PUSH
90753: LD_INT 3
90755: PUSH
90756: LD_INT 23
90758: PUSH
90759: LD_INT 0
90761: PUSH
90762: EMPTY
90763: LIST
90764: LIST
90765: PUSH
90766: EMPTY
90767: LIST
90768: LIST
90769: PUSH
90770: EMPTY
90771: LIST
90772: LIST
90773: LIST
90774: PPUSH
90775: CALL_OW 69
90779: ST_TO_ADDR
// if not tmp then
90780: LD_VAR 0 2
90784: NOT
90785: IFFALSE 90789
// exit ;
90787: GO 90838
// for i in tmp do
90789: LD_ADDR_VAR 0 1
90793: PUSH
90794: LD_VAR 0 2
90798: PUSH
90799: FOR_IN
90800: IFFALSE 90836
// begin if Crawls ( i ) then
90802: LD_VAR 0 1
90806: PPUSH
90807: CALL_OW 318
90811: IFFALSE 90822
// ComWalk ( i ) ;
90813: LD_VAR 0 1
90817: PPUSH
90818: CALL_OW 138
// SetClass ( i , 2 ) ;
90822: LD_VAR 0 1
90826: PPUSH
90827: LD_INT 2
90829: PPUSH
90830: CALL_OW 336
// end ;
90834: GO 90799
90836: POP
90837: POP
// end ;
90838: PPOPN 2
90840: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
90841: LD_EXP 108
90845: PUSH
90846: LD_EXP 161
90850: AND
90851: IFFALSE 91132
90853: GO 90855
90855: DISABLE
90856: LD_INT 0
90858: PPUSH
90859: PPUSH
90860: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
90861: LD_OWVAR 2
90865: PPUSH
90866: LD_INT 9
90868: PPUSH
90869: LD_INT 1
90871: PPUSH
90872: LD_INT 1
90874: PPUSH
90875: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
90879: LD_INT 9
90881: PPUSH
90882: LD_OWVAR 2
90886: PPUSH
90887: CALL_OW 343
// uc_side := 9 ;
90891: LD_ADDR_OWVAR 20
90895: PUSH
90896: LD_INT 9
90898: ST_TO_ADDR
// uc_nation := 2 ;
90899: LD_ADDR_OWVAR 21
90903: PUSH
90904: LD_INT 2
90906: ST_TO_ADDR
// hc_name := Dark Warrior ;
90907: LD_ADDR_OWVAR 26
90911: PUSH
90912: LD_STRING Dark Warrior
90914: ST_TO_ADDR
// hc_gallery :=  ;
90915: LD_ADDR_OWVAR 33
90919: PUSH
90920: LD_STRING 
90922: ST_TO_ADDR
// hc_noskilllimit := true ;
90923: LD_ADDR_OWVAR 76
90927: PUSH
90928: LD_INT 1
90930: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
90931: LD_ADDR_OWVAR 31
90935: PUSH
90936: LD_INT 30
90938: PUSH
90939: LD_INT 30
90941: PUSH
90942: LD_INT 30
90944: PUSH
90945: LD_INT 30
90947: PUSH
90948: EMPTY
90949: LIST
90950: LIST
90951: LIST
90952: LIST
90953: ST_TO_ADDR
// un := CreateHuman ;
90954: LD_ADDR_VAR 0 3
90958: PUSH
90959: CALL_OW 44
90963: ST_TO_ADDR
// hc_noskilllimit := false ;
90964: LD_ADDR_OWVAR 76
90968: PUSH
90969: LD_INT 0
90971: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
90972: LD_VAR 0 3
90976: PPUSH
90977: LD_INT 1
90979: PPUSH
90980: CALL_OW 51
// p := 0 ;
90984: LD_ADDR_VAR 0 2
90988: PUSH
90989: LD_INT 0
90991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90992: LD_INT 35
90994: PPUSH
90995: CALL_OW 67
// p := p + 1 ;
90999: LD_ADDR_VAR 0 2
91003: PUSH
91004: LD_VAR 0 2
91008: PUSH
91009: LD_INT 1
91011: PLUS
91012: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
91013: LD_VAR 0 3
91017: PPUSH
91018: CALL_OW 256
91022: PUSH
91023: LD_INT 1000
91025: LESS
91026: IFFALSE 91040
// SetLives ( un , 1000 ) ;
91028: LD_VAR 0 3
91032: PPUSH
91033: LD_INT 1000
91035: PPUSH
91036: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
91040: LD_VAR 0 3
91044: PPUSH
91045: LD_INT 81
91047: PUSH
91048: LD_OWVAR 2
91052: PUSH
91053: EMPTY
91054: LIST
91055: LIST
91056: PUSH
91057: LD_INT 91
91059: PUSH
91060: LD_VAR 0 3
91064: PUSH
91065: LD_INT 30
91067: PUSH
91068: EMPTY
91069: LIST
91070: LIST
91071: LIST
91072: PUSH
91073: EMPTY
91074: LIST
91075: LIST
91076: PPUSH
91077: CALL_OW 69
91081: PPUSH
91082: LD_VAR 0 3
91086: PPUSH
91087: CALL_OW 74
91091: PPUSH
91092: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
91096: LD_VAR 0 2
91100: PUSH
91101: LD_INT 60
91103: GREATER
91104: PUSH
91105: LD_VAR 0 3
91109: PPUSH
91110: CALL_OW 301
91114: OR
91115: IFFALSE 90992
// if un then
91117: LD_VAR 0 3
91121: IFFALSE 91132
// RemoveUnit ( un ) ;
91123: LD_VAR 0 3
91127: PPUSH
91128: CALL_OW 64
// end ; end_of_file
91132: PPOPN 3
91134: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
91135: LD_INT 0
91137: PPUSH
91138: PPUSH
91139: PPUSH
91140: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
91141: LD_VAR 0 1
91145: PPUSH
91146: CALL_OW 264
91150: PUSH
91151: LD_EXP 52
91155: EQUAL
91156: IFFALSE 91228
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91158: LD_INT 68
91160: PPUSH
91161: LD_VAR 0 1
91165: PPUSH
91166: CALL_OW 255
91170: PPUSH
91171: CALL_OW 321
91175: PUSH
91176: LD_INT 2
91178: EQUAL
91179: IFFALSE 91191
// eff := 70 else
91181: LD_ADDR_VAR 0 4
91185: PUSH
91186: LD_INT 70
91188: ST_TO_ADDR
91189: GO 91199
// eff := 30 ;
91191: LD_ADDR_VAR 0 4
91195: PUSH
91196: LD_INT 30
91198: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91199: LD_VAR 0 1
91203: PPUSH
91204: CALL_OW 250
91208: PPUSH
91209: LD_VAR 0 1
91213: PPUSH
91214: CALL_OW 251
91218: PPUSH
91219: LD_VAR 0 4
91223: PPUSH
91224: CALL_OW 495
// end ; end ;
91228: LD_VAR 0 2
91232: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
91233: LD_INT 0
91235: PPUSH
// end ;
91236: LD_VAR 0 4
91240: RET
// export function SOS_Command ( cmd ) ; begin
91241: LD_INT 0
91243: PPUSH
// end ;
91244: LD_VAR 0 2
91248: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
91249: LD_VAR 0 1
91253: PUSH
91254: LD_INT 254
91256: EQUAL
91257: PUSH
91258: LD_VAR 0 2
91262: PPUSH
91263: CALL_OW 264
91267: PUSH
91268: LD_EXP 50
91272: EQUAL
91273: AND
91274: PUSH
91275: LD_VAR 0 3
91279: PPUSH
91280: CALL_OW 263
91284: PUSH
91285: LD_INT 3
91287: EQUAL
91288: AND
91289: IFFALSE 91305
// HackDestroyVehicle ( unit , selectedUnit ) ;
91291: LD_VAR 0 2
91295: PPUSH
91296: LD_VAR 0 3
91300: PPUSH
91301: CALL 92812 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91305: LD_VAR 0 1
91309: PUSH
91310: LD_INT 255
91312: EQUAL
91313: PUSH
91314: LD_VAR 0 2
91318: PPUSH
91319: CALL_OW 264
91323: PUSH
91324: LD_INT 14
91326: PUSH
91327: LD_INT 53
91329: PUSH
91330: EMPTY
91331: LIST
91332: LIST
91333: IN
91334: AND
91335: PUSH
91336: LD_VAR 0 4
91340: PPUSH
91341: LD_VAR 0 5
91345: PPUSH
91346: CALL_OW 488
91350: AND
91351: IFFALSE 91375
// CutTreeXYR ( unit , x , y , 12 ) ;
91353: LD_VAR 0 2
91357: PPUSH
91358: LD_VAR 0 4
91362: PPUSH
91363: LD_VAR 0 5
91367: PPUSH
91368: LD_INT 12
91370: PPUSH
91371: CALL 91378 0 4
// end ;
91375: PPOPN 5
91377: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91378: LD_INT 0
91380: PPUSH
91381: PPUSH
91382: PPUSH
91383: PPUSH
91384: PPUSH
91385: PPUSH
91386: PPUSH
91387: PPUSH
91388: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
91389: LD_VAR 0 1
91393: NOT
91394: PUSH
91395: LD_VAR 0 2
91399: PPUSH
91400: LD_VAR 0 3
91404: PPUSH
91405: CALL_OW 488
91409: NOT
91410: OR
91411: PUSH
91412: LD_VAR 0 4
91416: NOT
91417: OR
91418: IFFALSE 91422
// exit ;
91420: GO 91762
// list := [ ] ;
91422: LD_ADDR_VAR 0 13
91426: PUSH
91427: EMPTY
91428: ST_TO_ADDR
// if x - r < 0 then
91429: LD_VAR 0 2
91433: PUSH
91434: LD_VAR 0 4
91438: MINUS
91439: PUSH
91440: LD_INT 0
91442: LESS
91443: IFFALSE 91455
// min_x := 0 else
91445: LD_ADDR_VAR 0 7
91449: PUSH
91450: LD_INT 0
91452: ST_TO_ADDR
91453: GO 91471
// min_x := x - r ;
91455: LD_ADDR_VAR 0 7
91459: PUSH
91460: LD_VAR 0 2
91464: PUSH
91465: LD_VAR 0 4
91469: MINUS
91470: ST_TO_ADDR
// if y - r < 0 then
91471: LD_VAR 0 3
91475: PUSH
91476: LD_VAR 0 4
91480: MINUS
91481: PUSH
91482: LD_INT 0
91484: LESS
91485: IFFALSE 91497
// min_y := 0 else
91487: LD_ADDR_VAR 0 8
91491: PUSH
91492: LD_INT 0
91494: ST_TO_ADDR
91495: GO 91513
// min_y := y - r ;
91497: LD_ADDR_VAR 0 8
91501: PUSH
91502: LD_VAR 0 3
91506: PUSH
91507: LD_VAR 0 4
91511: MINUS
91512: ST_TO_ADDR
// max_x := x + r ;
91513: LD_ADDR_VAR 0 9
91517: PUSH
91518: LD_VAR 0 2
91522: PUSH
91523: LD_VAR 0 4
91527: PLUS
91528: ST_TO_ADDR
// max_y := y + r ;
91529: LD_ADDR_VAR 0 10
91533: PUSH
91534: LD_VAR 0 3
91538: PUSH
91539: LD_VAR 0 4
91543: PLUS
91544: ST_TO_ADDR
// for _x = min_x to max_x do
91545: LD_ADDR_VAR 0 11
91549: PUSH
91550: DOUBLE
91551: LD_VAR 0 7
91555: DEC
91556: ST_TO_ADDR
91557: LD_VAR 0 9
91561: PUSH
91562: FOR_TO
91563: IFFALSE 91680
// for _y = min_y to max_y do
91565: LD_ADDR_VAR 0 12
91569: PUSH
91570: DOUBLE
91571: LD_VAR 0 8
91575: DEC
91576: ST_TO_ADDR
91577: LD_VAR 0 10
91581: PUSH
91582: FOR_TO
91583: IFFALSE 91676
// begin if not ValidHex ( _x , _y ) then
91585: LD_VAR 0 11
91589: PPUSH
91590: LD_VAR 0 12
91594: PPUSH
91595: CALL_OW 488
91599: NOT
91600: IFFALSE 91604
// continue ;
91602: GO 91582
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91604: LD_VAR 0 11
91608: PPUSH
91609: LD_VAR 0 12
91613: PPUSH
91614: CALL_OW 351
91618: PUSH
91619: LD_VAR 0 11
91623: PPUSH
91624: LD_VAR 0 12
91628: PPUSH
91629: CALL_OW 554
91633: AND
91634: IFFALSE 91674
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91636: LD_ADDR_VAR 0 13
91640: PUSH
91641: LD_VAR 0 13
91645: PPUSH
91646: LD_VAR 0 13
91650: PUSH
91651: LD_INT 1
91653: PLUS
91654: PPUSH
91655: LD_VAR 0 11
91659: PUSH
91660: LD_VAR 0 12
91664: PUSH
91665: EMPTY
91666: LIST
91667: LIST
91668: PPUSH
91669: CALL_OW 2
91673: ST_TO_ADDR
// end ;
91674: GO 91582
91676: POP
91677: POP
91678: GO 91562
91680: POP
91681: POP
// if not list then
91682: LD_VAR 0 13
91686: NOT
91687: IFFALSE 91691
// exit ;
91689: GO 91762
// for i in list do
91691: LD_ADDR_VAR 0 6
91695: PUSH
91696: LD_VAR 0 13
91700: PUSH
91701: FOR_IN
91702: IFFALSE 91760
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91704: LD_VAR 0 1
91708: PPUSH
91709: LD_STRING M
91711: PUSH
91712: LD_VAR 0 6
91716: PUSH
91717: LD_INT 1
91719: ARRAY
91720: PUSH
91721: LD_VAR 0 6
91725: PUSH
91726: LD_INT 2
91728: ARRAY
91729: PUSH
91730: LD_INT 0
91732: PUSH
91733: LD_INT 0
91735: PUSH
91736: LD_INT 0
91738: PUSH
91739: LD_INT 0
91741: PUSH
91742: EMPTY
91743: LIST
91744: LIST
91745: LIST
91746: LIST
91747: LIST
91748: LIST
91749: LIST
91750: PUSH
91751: EMPTY
91752: LIST
91753: PPUSH
91754: CALL_OW 447
91758: GO 91701
91760: POP
91761: POP
// end ;
91762: LD_VAR 0 5
91766: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
91767: LD_EXP 162
91771: NOT
91772: IFFALSE 91822
91774: GO 91776
91776: DISABLE
// begin initHack := true ;
91777: LD_ADDR_EXP 162
91781: PUSH
91782: LD_INT 1
91784: ST_TO_ADDR
// hackTanks := [ ] ;
91785: LD_ADDR_EXP 163
91789: PUSH
91790: EMPTY
91791: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
91792: LD_ADDR_EXP 164
91796: PUSH
91797: EMPTY
91798: ST_TO_ADDR
// hackLimit := 3 ;
91799: LD_ADDR_EXP 165
91803: PUSH
91804: LD_INT 3
91806: ST_TO_ADDR
// hackDist := 12 ;
91807: LD_ADDR_EXP 166
91811: PUSH
91812: LD_INT 12
91814: ST_TO_ADDR
// hackCounter := [ ] ;
91815: LD_ADDR_EXP 167
91819: PUSH
91820: EMPTY
91821: ST_TO_ADDR
// end ;
91822: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
91823: LD_EXP 162
91827: PUSH
91828: LD_INT 34
91830: PUSH
91831: LD_EXP 50
91835: PUSH
91836: EMPTY
91837: LIST
91838: LIST
91839: PPUSH
91840: CALL_OW 69
91844: AND
91845: IFFALSE 92100
91847: GO 91849
91849: DISABLE
91850: LD_INT 0
91852: PPUSH
91853: PPUSH
// begin enable ;
91854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
91855: LD_ADDR_VAR 0 1
91859: PUSH
91860: LD_INT 34
91862: PUSH
91863: LD_EXP 50
91867: PUSH
91868: EMPTY
91869: LIST
91870: LIST
91871: PPUSH
91872: CALL_OW 69
91876: PUSH
91877: FOR_IN
91878: IFFALSE 92098
// begin if not i in hackTanks then
91880: LD_VAR 0 1
91884: PUSH
91885: LD_EXP 163
91889: IN
91890: NOT
91891: IFFALSE 91974
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
91893: LD_ADDR_EXP 163
91897: PUSH
91898: LD_EXP 163
91902: PPUSH
91903: LD_EXP 163
91907: PUSH
91908: LD_INT 1
91910: PLUS
91911: PPUSH
91912: LD_VAR 0 1
91916: PPUSH
91917: CALL_OW 1
91921: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
91922: LD_ADDR_EXP 164
91926: PUSH
91927: LD_EXP 164
91931: PPUSH
91932: LD_EXP 164
91936: PUSH
91937: LD_INT 1
91939: PLUS
91940: PPUSH
91941: EMPTY
91942: PPUSH
91943: CALL_OW 1
91947: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
91948: LD_ADDR_EXP 167
91952: PUSH
91953: LD_EXP 167
91957: PPUSH
91958: LD_EXP 167
91962: PUSH
91963: LD_INT 1
91965: PLUS
91966: PPUSH
91967: EMPTY
91968: PPUSH
91969: CALL_OW 1
91973: ST_TO_ADDR
// end ; if not IsOk ( i ) then
91974: LD_VAR 0 1
91978: PPUSH
91979: CALL_OW 302
91983: NOT
91984: IFFALSE 91997
// begin HackUnlinkAll ( i ) ;
91986: LD_VAR 0 1
91990: PPUSH
91991: CALL 92103 0 1
// continue ;
91995: GO 91877
// end ; HackCheckCapturedStatus ( i ) ;
91997: LD_VAR 0 1
92001: PPUSH
92002: CALL 92546 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
92006: LD_ADDR_VAR 0 2
92010: PUSH
92011: LD_INT 81
92013: PUSH
92014: LD_VAR 0 1
92018: PPUSH
92019: CALL_OW 255
92023: PUSH
92024: EMPTY
92025: LIST
92026: LIST
92027: PUSH
92028: LD_INT 33
92030: PUSH
92031: LD_INT 3
92033: PUSH
92034: EMPTY
92035: LIST
92036: LIST
92037: PUSH
92038: LD_INT 91
92040: PUSH
92041: LD_VAR 0 1
92045: PUSH
92046: LD_EXP 166
92050: PUSH
92051: EMPTY
92052: LIST
92053: LIST
92054: LIST
92055: PUSH
92056: LD_INT 50
92058: PUSH
92059: EMPTY
92060: LIST
92061: PUSH
92062: EMPTY
92063: LIST
92064: LIST
92065: LIST
92066: LIST
92067: PPUSH
92068: CALL_OW 69
92072: ST_TO_ADDR
// if not tmp then
92073: LD_VAR 0 2
92077: NOT
92078: IFFALSE 92082
// continue ;
92080: GO 91877
// HackLink ( i , tmp ) ;
92082: LD_VAR 0 1
92086: PPUSH
92087: LD_VAR 0 2
92091: PPUSH
92092: CALL 92239 0 2
// end ;
92096: GO 91877
92098: POP
92099: POP
// end ;
92100: PPOPN 2
92102: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
92103: LD_INT 0
92105: PPUSH
92106: PPUSH
92107: PPUSH
// if not hack in hackTanks then
92108: LD_VAR 0 1
92112: PUSH
92113: LD_EXP 163
92117: IN
92118: NOT
92119: IFFALSE 92123
// exit ;
92121: GO 92234
// index := GetElementIndex ( hackTanks , hack ) ;
92123: LD_ADDR_VAR 0 4
92127: PUSH
92128: LD_EXP 163
92132: PPUSH
92133: LD_VAR 0 1
92137: PPUSH
92138: CALL 18295 0 2
92142: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
92143: LD_EXP 164
92147: PUSH
92148: LD_VAR 0 4
92152: ARRAY
92153: IFFALSE 92234
// begin for i in hackTanksCaptured [ index ] do
92155: LD_ADDR_VAR 0 3
92159: PUSH
92160: LD_EXP 164
92164: PUSH
92165: LD_VAR 0 4
92169: ARRAY
92170: PUSH
92171: FOR_IN
92172: IFFALSE 92198
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92174: LD_VAR 0 3
92178: PUSH
92179: LD_INT 1
92181: ARRAY
92182: PPUSH
92183: LD_VAR 0 3
92187: PUSH
92188: LD_INT 2
92190: ARRAY
92191: PPUSH
92192: CALL_OW 235
92196: GO 92171
92198: POP
92199: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92200: LD_ADDR_EXP 164
92204: PUSH
92205: LD_EXP 164
92209: PPUSH
92210: LD_VAR 0 4
92214: PPUSH
92215: EMPTY
92216: PPUSH
92217: CALL_OW 1
92221: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92222: LD_VAR 0 1
92226: PPUSH
92227: LD_INT 0
92229: PPUSH
92230: CALL_OW 505
// end ; end ;
92234: LD_VAR 0 2
92238: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92239: LD_INT 0
92241: PPUSH
92242: PPUSH
92243: PPUSH
// if not hack in hackTanks or not vehicles then
92244: LD_VAR 0 1
92248: PUSH
92249: LD_EXP 163
92253: IN
92254: NOT
92255: PUSH
92256: LD_VAR 0 2
92260: NOT
92261: OR
92262: IFFALSE 92266
// exit ;
92264: GO 92541
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92266: LD_ADDR_VAR 0 2
92270: PUSH
92271: LD_VAR 0 1
92275: PPUSH
92276: LD_VAR 0 2
92280: PPUSH
92281: LD_INT 1
92283: PPUSH
92284: LD_INT 1
92286: PPUSH
92287: CALL 18945 0 4
92291: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92292: LD_ADDR_VAR 0 5
92296: PUSH
92297: LD_EXP 163
92301: PPUSH
92302: LD_VAR 0 1
92306: PPUSH
92307: CALL 18295 0 2
92311: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92312: LD_EXP 164
92316: PUSH
92317: LD_VAR 0 5
92321: ARRAY
92322: PUSH
92323: LD_EXP 165
92327: LESS
92328: IFFALSE 92517
// begin for i := 1 to vehicles do
92330: LD_ADDR_VAR 0 4
92334: PUSH
92335: DOUBLE
92336: LD_INT 1
92338: DEC
92339: ST_TO_ADDR
92340: LD_VAR 0 2
92344: PUSH
92345: FOR_TO
92346: IFFALSE 92515
// begin if hackTanksCaptured [ index ] = hackLimit then
92348: LD_EXP 164
92352: PUSH
92353: LD_VAR 0 5
92357: ARRAY
92358: PUSH
92359: LD_EXP 165
92363: EQUAL
92364: IFFALSE 92368
// break ;
92366: GO 92515
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92368: LD_ADDR_EXP 167
92372: PUSH
92373: LD_EXP 167
92377: PPUSH
92378: LD_VAR 0 5
92382: PPUSH
92383: LD_EXP 167
92387: PUSH
92388: LD_VAR 0 5
92392: ARRAY
92393: PUSH
92394: LD_INT 1
92396: PLUS
92397: PPUSH
92398: CALL_OW 1
92402: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92403: LD_ADDR_EXP 164
92407: PUSH
92408: LD_EXP 164
92412: PPUSH
92413: LD_VAR 0 5
92417: PUSH
92418: LD_EXP 164
92422: PUSH
92423: LD_VAR 0 5
92427: ARRAY
92428: PUSH
92429: LD_INT 1
92431: PLUS
92432: PUSH
92433: EMPTY
92434: LIST
92435: LIST
92436: PPUSH
92437: LD_VAR 0 2
92441: PUSH
92442: LD_VAR 0 4
92446: ARRAY
92447: PUSH
92448: LD_VAR 0 2
92452: PUSH
92453: LD_VAR 0 4
92457: ARRAY
92458: PPUSH
92459: CALL_OW 255
92463: PUSH
92464: EMPTY
92465: LIST
92466: LIST
92467: PPUSH
92468: CALL 18510 0 3
92472: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92473: LD_VAR 0 2
92477: PUSH
92478: LD_VAR 0 4
92482: ARRAY
92483: PPUSH
92484: LD_VAR 0 1
92488: PPUSH
92489: CALL_OW 255
92493: PPUSH
92494: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92498: LD_VAR 0 2
92502: PUSH
92503: LD_VAR 0 4
92507: ARRAY
92508: PPUSH
92509: CALL_OW 141
// end ;
92513: GO 92345
92515: POP
92516: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92517: LD_VAR 0 1
92521: PPUSH
92522: LD_EXP 164
92526: PUSH
92527: LD_VAR 0 5
92531: ARRAY
92532: PUSH
92533: LD_INT 0
92535: PLUS
92536: PPUSH
92537: CALL_OW 505
// end ;
92541: LD_VAR 0 3
92545: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92546: LD_INT 0
92548: PPUSH
92549: PPUSH
92550: PPUSH
92551: PPUSH
// if not hack in hackTanks then
92552: LD_VAR 0 1
92556: PUSH
92557: LD_EXP 163
92561: IN
92562: NOT
92563: IFFALSE 92567
// exit ;
92565: GO 92807
// index := GetElementIndex ( hackTanks , hack ) ;
92567: LD_ADDR_VAR 0 4
92571: PUSH
92572: LD_EXP 163
92576: PPUSH
92577: LD_VAR 0 1
92581: PPUSH
92582: CALL 18295 0 2
92586: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92587: LD_ADDR_VAR 0 3
92591: PUSH
92592: DOUBLE
92593: LD_EXP 164
92597: PUSH
92598: LD_VAR 0 4
92602: ARRAY
92603: INC
92604: ST_TO_ADDR
92605: LD_INT 1
92607: PUSH
92608: FOR_DOWNTO
92609: IFFALSE 92781
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92611: LD_ADDR_VAR 0 5
92615: PUSH
92616: LD_EXP 164
92620: PUSH
92621: LD_VAR 0 4
92625: ARRAY
92626: PUSH
92627: LD_VAR 0 3
92631: ARRAY
92632: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92633: LD_VAR 0 5
92637: PUSH
92638: LD_INT 1
92640: ARRAY
92641: PPUSH
92642: CALL_OW 302
92646: NOT
92647: PUSH
92648: LD_VAR 0 5
92652: PUSH
92653: LD_INT 1
92655: ARRAY
92656: PPUSH
92657: CALL_OW 255
92661: PUSH
92662: LD_VAR 0 1
92666: PPUSH
92667: CALL_OW 255
92671: NONEQUAL
92672: OR
92673: IFFALSE 92779
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92675: LD_VAR 0 5
92679: PUSH
92680: LD_INT 1
92682: ARRAY
92683: PPUSH
92684: CALL_OW 305
92688: PUSH
92689: LD_VAR 0 5
92693: PUSH
92694: LD_INT 1
92696: ARRAY
92697: PPUSH
92698: CALL_OW 255
92702: PUSH
92703: LD_VAR 0 1
92707: PPUSH
92708: CALL_OW 255
92712: EQUAL
92713: AND
92714: IFFALSE 92738
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92716: LD_VAR 0 5
92720: PUSH
92721: LD_INT 1
92723: ARRAY
92724: PPUSH
92725: LD_VAR 0 5
92729: PUSH
92730: LD_INT 2
92732: ARRAY
92733: PPUSH
92734: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92738: LD_ADDR_EXP 164
92742: PUSH
92743: LD_EXP 164
92747: PPUSH
92748: LD_VAR 0 4
92752: PPUSH
92753: LD_EXP 164
92757: PUSH
92758: LD_VAR 0 4
92762: ARRAY
92763: PPUSH
92764: LD_VAR 0 3
92768: PPUSH
92769: CALL_OW 3
92773: PPUSH
92774: CALL_OW 1
92778: ST_TO_ADDR
// end ; end ;
92779: GO 92608
92781: POP
92782: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92783: LD_VAR 0 1
92787: PPUSH
92788: LD_EXP 164
92792: PUSH
92793: LD_VAR 0 4
92797: ARRAY
92798: PUSH
92799: LD_INT 0
92801: PLUS
92802: PPUSH
92803: CALL_OW 505
// end ;
92807: LD_VAR 0 2
92811: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
92812: LD_INT 0
92814: PPUSH
92815: PPUSH
92816: PPUSH
92817: PPUSH
// if not hack in hackTanks then
92818: LD_VAR 0 1
92822: PUSH
92823: LD_EXP 163
92827: IN
92828: NOT
92829: IFFALSE 92833
// exit ;
92831: GO 92918
// index := GetElementIndex ( hackTanks , hack ) ;
92833: LD_ADDR_VAR 0 5
92837: PUSH
92838: LD_EXP 163
92842: PPUSH
92843: LD_VAR 0 1
92847: PPUSH
92848: CALL 18295 0 2
92852: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
92853: LD_ADDR_VAR 0 4
92857: PUSH
92858: DOUBLE
92859: LD_INT 1
92861: DEC
92862: ST_TO_ADDR
92863: LD_EXP 164
92867: PUSH
92868: LD_VAR 0 5
92872: ARRAY
92873: PUSH
92874: FOR_TO
92875: IFFALSE 92916
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
92877: LD_EXP 164
92881: PUSH
92882: LD_VAR 0 5
92886: ARRAY
92887: PUSH
92888: LD_VAR 0 4
92892: ARRAY
92893: PUSH
92894: LD_INT 1
92896: ARRAY
92897: PUSH
92898: LD_VAR 0 2
92902: EQUAL
92903: IFFALSE 92914
// KillUnit ( vehicle ) ;
92905: LD_VAR 0 2
92909: PPUSH
92910: CALL_OW 66
92914: GO 92874
92916: POP
92917: POP
// end ; end_of_file
92918: LD_VAR 0 3
92922: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
92923: LD_INT 0
92925: PPUSH
92926: PPUSH
92927: PPUSH
92928: PPUSH
92929: PPUSH
92930: PPUSH
92931: PPUSH
92932: PPUSH
92933: PPUSH
92934: PPUSH
92935: PPUSH
92936: PPUSH
92937: PPUSH
92938: PPUSH
92939: PPUSH
92940: PPUSH
92941: PPUSH
92942: PPUSH
92943: PPUSH
92944: PPUSH
92945: PPUSH
92946: PPUSH
92947: PPUSH
92948: PPUSH
92949: PPUSH
92950: PPUSH
92951: PPUSH
92952: PPUSH
92953: PPUSH
92954: PPUSH
92955: PPUSH
92956: PPUSH
92957: PPUSH
92958: PPUSH
// if not list then
92959: LD_VAR 0 1
92963: NOT
92964: IFFALSE 92968
// exit ;
92966: GO 97627
// base := list [ 1 ] ;
92968: LD_ADDR_VAR 0 3
92972: PUSH
92973: LD_VAR 0 1
92977: PUSH
92978: LD_INT 1
92980: ARRAY
92981: ST_TO_ADDR
// group := list [ 2 ] ;
92982: LD_ADDR_VAR 0 4
92986: PUSH
92987: LD_VAR 0 1
92991: PUSH
92992: LD_INT 2
92994: ARRAY
92995: ST_TO_ADDR
// path := list [ 3 ] ;
92996: LD_ADDR_VAR 0 5
93000: PUSH
93001: LD_VAR 0 1
93005: PUSH
93006: LD_INT 3
93008: ARRAY
93009: ST_TO_ADDR
// flags := list [ 4 ] ;
93010: LD_ADDR_VAR 0 6
93014: PUSH
93015: LD_VAR 0 1
93019: PUSH
93020: LD_INT 4
93022: ARRAY
93023: ST_TO_ADDR
// mined := [ ] ;
93024: LD_ADDR_VAR 0 27
93028: PUSH
93029: EMPTY
93030: ST_TO_ADDR
// bombed := [ ] ;
93031: LD_ADDR_VAR 0 28
93035: PUSH
93036: EMPTY
93037: ST_TO_ADDR
// healers := [ ] ;
93038: LD_ADDR_VAR 0 31
93042: PUSH
93043: EMPTY
93044: ST_TO_ADDR
// to_heal := [ ] ;
93045: LD_ADDR_VAR 0 30
93049: PUSH
93050: EMPTY
93051: ST_TO_ADDR
// repairs := [ ] ;
93052: LD_ADDR_VAR 0 33
93056: PUSH
93057: EMPTY
93058: ST_TO_ADDR
// to_repair := [ ] ;
93059: LD_ADDR_VAR 0 32
93063: PUSH
93064: EMPTY
93065: ST_TO_ADDR
// if not group or not path then
93066: LD_VAR 0 4
93070: NOT
93071: PUSH
93072: LD_VAR 0 5
93076: NOT
93077: OR
93078: IFFALSE 93082
// exit ;
93080: GO 97627
// side := GetSide ( group [ 1 ] ) ;
93082: LD_ADDR_VAR 0 35
93086: PUSH
93087: LD_VAR 0 4
93091: PUSH
93092: LD_INT 1
93094: ARRAY
93095: PPUSH
93096: CALL_OW 255
93100: ST_TO_ADDR
// if flags then
93101: LD_VAR 0 6
93105: IFFALSE 93249
// begin f_ignore_area := flags [ 1 ] ;
93107: LD_ADDR_VAR 0 17
93111: PUSH
93112: LD_VAR 0 6
93116: PUSH
93117: LD_INT 1
93119: ARRAY
93120: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
93121: LD_ADDR_VAR 0 18
93125: PUSH
93126: LD_VAR 0 6
93130: PUSH
93131: LD_INT 2
93133: ARRAY
93134: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
93135: LD_ADDR_VAR 0 19
93139: PUSH
93140: LD_VAR 0 6
93144: PUSH
93145: LD_INT 3
93147: ARRAY
93148: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
93149: LD_ADDR_VAR 0 20
93153: PUSH
93154: LD_VAR 0 6
93158: PUSH
93159: LD_INT 4
93161: ARRAY
93162: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
93163: LD_ADDR_VAR 0 21
93167: PUSH
93168: LD_VAR 0 6
93172: PUSH
93173: LD_INT 5
93175: ARRAY
93176: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
93177: LD_ADDR_VAR 0 22
93181: PUSH
93182: LD_VAR 0 6
93186: PUSH
93187: LD_INT 6
93189: ARRAY
93190: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
93191: LD_ADDR_VAR 0 23
93195: PUSH
93196: LD_VAR 0 6
93200: PUSH
93201: LD_INT 7
93203: ARRAY
93204: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
93205: LD_ADDR_VAR 0 24
93209: PUSH
93210: LD_VAR 0 6
93214: PUSH
93215: LD_INT 8
93217: ARRAY
93218: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
93219: LD_ADDR_VAR 0 25
93223: PUSH
93224: LD_VAR 0 6
93228: PUSH
93229: LD_INT 9
93231: ARRAY
93232: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
93233: LD_ADDR_VAR 0 26
93237: PUSH
93238: LD_VAR 0 6
93242: PUSH
93243: LD_INT 10
93245: ARRAY
93246: ST_TO_ADDR
// end else
93247: GO 93329
// begin f_ignore_area := false ;
93249: LD_ADDR_VAR 0 17
93253: PUSH
93254: LD_INT 0
93256: ST_TO_ADDR
// f_capture := false ;
93257: LD_ADDR_VAR 0 18
93261: PUSH
93262: LD_INT 0
93264: ST_TO_ADDR
// f_ignore_civ := false ;
93265: LD_ADDR_VAR 0 19
93269: PUSH
93270: LD_INT 0
93272: ST_TO_ADDR
// f_murder := false ;
93273: LD_ADDR_VAR 0 20
93277: PUSH
93278: LD_INT 0
93280: ST_TO_ADDR
// f_mines := false ;
93281: LD_ADDR_VAR 0 21
93285: PUSH
93286: LD_INT 0
93288: ST_TO_ADDR
// f_repair := false ;
93289: LD_ADDR_VAR 0 22
93293: PUSH
93294: LD_INT 0
93296: ST_TO_ADDR
// f_heal := false ;
93297: LD_ADDR_VAR 0 23
93301: PUSH
93302: LD_INT 0
93304: ST_TO_ADDR
// f_spacetime := false ;
93305: LD_ADDR_VAR 0 24
93309: PUSH
93310: LD_INT 0
93312: ST_TO_ADDR
// f_attack_depot := false ;
93313: LD_ADDR_VAR 0 25
93317: PUSH
93318: LD_INT 0
93320: ST_TO_ADDR
// f_crawl := false ;
93321: LD_ADDR_VAR 0 26
93325: PUSH
93326: LD_INT 0
93328: ST_TO_ADDR
// end ; if f_heal then
93329: LD_VAR 0 23
93333: IFFALSE 93360
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
93335: LD_ADDR_VAR 0 31
93339: PUSH
93340: LD_VAR 0 4
93344: PPUSH
93345: LD_INT 25
93347: PUSH
93348: LD_INT 4
93350: PUSH
93351: EMPTY
93352: LIST
93353: LIST
93354: PPUSH
93355: CALL_OW 72
93359: ST_TO_ADDR
// if f_repair then
93360: LD_VAR 0 22
93364: IFFALSE 93391
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
93366: LD_ADDR_VAR 0 33
93370: PUSH
93371: LD_VAR 0 4
93375: PPUSH
93376: LD_INT 25
93378: PUSH
93379: LD_INT 3
93381: PUSH
93382: EMPTY
93383: LIST
93384: LIST
93385: PPUSH
93386: CALL_OW 72
93390: ST_TO_ADDR
// units_path := [ ] ;
93391: LD_ADDR_VAR 0 16
93395: PUSH
93396: EMPTY
93397: ST_TO_ADDR
// for i = 1 to group do
93398: LD_ADDR_VAR 0 7
93402: PUSH
93403: DOUBLE
93404: LD_INT 1
93406: DEC
93407: ST_TO_ADDR
93408: LD_VAR 0 4
93412: PUSH
93413: FOR_TO
93414: IFFALSE 93443
// units_path := Replace ( units_path , i , path ) ;
93416: LD_ADDR_VAR 0 16
93420: PUSH
93421: LD_VAR 0 16
93425: PPUSH
93426: LD_VAR 0 7
93430: PPUSH
93431: LD_VAR 0 5
93435: PPUSH
93436: CALL_OW 1
93440: ST_TO_ADDR
93441: GO 93413
93443: POP
93444: POP
// repeat for i = group downto 1 do
93445: LD_ADDR_VAR 0 7
93449: PUSH
93450: DOUBLE
93451: LD_VAR 0 4
93455: INC
93456: ST_TO_ADDR
93457: LD_INT 1
93459: PUSH
93460: FOR_DOWNTO
93461: IFFALSE 97583
// begin wait ( 5 ) ;
93463: LD_INT 5
93465: PPUSH
93466: CALL_OW 67
// tmp := [ ] ;
93470: LD_ADDR_VAR 0 14
93474: PUSH
93475: EMPTY
93476: ST_TO_ADDR
// attacking := false ;
93477: LD_ADDR_VAR 0 29
93481: PUSH
93482: LD_INT 0
93484: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
93485: LD_VAR 0 4
93489: PUSH
93490: LD_VAR 0 7
93494: ARRAY
93495: PPUSH
93496: CALL_OW 301
93500: PUSH
93501: LD_VAR 0 4
93505: PUSH
93506: LD_VAR 0 7
93510: ARRAY
93511: NOT
93512: OR
93513: IFFALSE 93622
// begin if GetType ( group [ i ] ) = unit_human then
93515: LD_VAR 0 4
93519: PUSH
93520: LD_VAR 0 7
93524: ARRAY
93525: PPUSH
93526: CALL_OW 247
93530: PUSH
93531: LD_INT 1
93533: EQUAL
93534: IFFALSE 93580
// begin to_heal := to_heal diff group [ i ] ;
93536: LD_ADDR_VAR 0 30
93540: PUSH
93541: LD_VAR 0 30
93545: PUSH
93546: LD_VAR 0 4
93550: PUSH
93551: LD_VAR 0 7
93555: ARRAY
93556: DIFF
93557: ST_TO_ADDR
// healers := healers diff group [ i ] ;
93558: LD_ADDR_VAR 0 31
93562: PUSH
93563: LD_VAR 0 31
93567: PUSH
93568: LD_VAR 0 4
93572: PUSH
93573: LD_VAR 0 7
93577: ARRAY
93578: DIFF
93579: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
93580: LD_ADDR_VAR 0 4
93584: PUSH
93585: LD_VAR 0 4
93589: PPUSH
93590: LD_VAR 0 7
93594: PPUSH
93595: CALL_OW 3
93599: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
93600: LD_ADDR_VAR 0 16
93604: PUSH
93605: LD_VAR 0 16
93609: PPUSH
93610: LD_VAR 0 7
93614: PPUSH
93615: CALL_OW 3
93619: ST_TO_ADDR
// continue ;
93620: GO 93460
// end ; if f_repair then
93622: LD_VAR 0 22
93626: IFFALSE 94115
// begin if GetType ( group [ i ] ) = unit_vehicle then
93628: LD_VAR 0 4
93632: PUSH
93633: LD_VAR 0 7
93637: ARRAY
93638: PPUSH
93639: CALL_OW 247
93643: PUSH
93644: LD_INT 2
93646: EQUAL
93647: IFFALSE 93837
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
93649: LD_VAR 0 4
93653: PUSH
93654: LD_VAR 0 7
93658: ARRAY
93659: PPUSH
93660: CALL_OW 256
93664: PUSH
93665: LD_INT 700
93667: LESS
93668: PUSH
93669: LD_VAR 0 4
93673: PUSH
93674: LD_VAR 0 7
93678: ARRAY
93679: PUSH
93680: LD_VAR 0 32
93684: IN
93685: NOT
93686: AND
93687: IFFALSE 93711
// to_repair := to_repair union group [ i ] ;
93689: LD_ADDR_VAR 0 32
93693: PUSH
93694: LD_VAR 0 32
93698: PUSH
93699: LD_VAR 0 4
93703: PUSH
93704: LD_VAR 0 7
93708: ARRAY
93709: UNION
93710: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
93711: LD_VAR 0 4
93715: PUSH
93716: LD_VAR 0 7
93720: ARRAY
93721: PPUSH
93722: CALL_OW 256
93726: PUSH
93727: LD_INT 1000
93729: EQUAL
93730: PUSH
93731: LD_VAR 0 4
93735: PUSH
93736: LD_VAR 0 7
93740: ARRAY
93741: PUSH
93742: LD_VAR 0 32
93746: IN
93747: AND
93748: IFFALSE 93772
// to_repair := to_repair diff group [ i ] ;
93750: LD_ADDR_VAR 0 32
93754: PUSH
93755: LD_VAR 0 32
93759: PUSH
93760: LD_VAR 0 4
93764: PUSH
93765: LD_VAR 0 7
93769: ARRAY
93770: DIFF
93771: ST_TO_ADDR
// if group [ i ] in to_repair then
93772: LD_VAR 0 4
93776: PUSH
93777: LD_VAR 0 7
93781: ARRAY
93782: PUSH
93783: LD_VAR 0 32
93787: IN
93788: IFFALSE 93835
// begin if not IsInArea ( group [ i ] , f_repair ) then
93790: LD_VAR 0 4
93794: PUSH
93795: LD_VAR 0 7
93799: ARRAY
93800: PPUSH
93801: LD_VAR 0 22
93805: PPUSH
93806: CALL_OW 308
93810: NOT
93811: IFFALSE 93833
// ComMoveToArea ( group [ i ] , f_repair ) ;
93813: LD_VAR 0 4
93817: PUSH
93818: LD_VAR 0 7
93822: ARRAY
93823: PPUSH
93824: LD_VAR 0 22
93828: PPUSH
93829: CALL_OW 113
// continue ;
93833: GO 93460
// end ; end else
93835: GO 94115
// if group [ i ] in repairs then
93837: LD_VAR 0 4
93841: PUSH
93842: LD_VAR 0 7
93846: ARRAY
93847: PUSH
93848: LD_VAR 0 33
93852: IN
93853: IFFALSE 94115
// begin if IsInUnit ( group [ i ] ) then
93855: LD_VAR 0 4
93859: PUSH
93860: LD_VAR 0 7
93864: ARRAY
93865: PPUSH
93866: CALL_OW 310
93870: IFFALSE 93938
// begin z := IsInUnit ( group [ i ] ) ;
93872: LD_ADDR_VAR 0 13
93876: PUSH
93877: LD_VAR 0 4
93881: PUSH
93882: LD_VAR 0 7
93886: ARRAY
93887: PPUSH
93888: CALL_OW 310
93892: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
93893: LD_VAR 0 13
93897: PUSH
93898: LD_VAR 0 32
93902: IN
93903: PUSH
93904: LD_VAR 0 13
93908: PPUSH
93909: LD_VAR 0 22
93913: PPUSH
93914: CALL_OW 308
93918: AND
93919: IFFALSE 93936
// ComExitVehicle ( group [ i ] ) ;
93921: LD_VAR 0 4
93925: PUSH
93926: LD_VAR 0 7
93930: ARRAY
93931: PPUSH
93932: CALL_OW 121
// end else
93936: GO 94115
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
93938: LD_ADDR_VAR 0 13
93942: PUSH
93943: LD_VAR 0 4
93947: PPUSH
93948: LD_INT 95
93950: PUSH
93951: LD_VAR 0 22
93955: PUSH
93956: EMPTY
93957: LIST
93958: LIST
93959: PUSH
93960: LD_INT 58
93962: PUSH
93963: EMPTY
93964: LIST
93965: PUSH
93966: EMPTY
93967: LIST
93968: LIST
93969: PPUSH
93970: CALL_OW 72
93974: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
93975: LD_VAR 0 4
93979: PUSH
93980: LD_VAR 0 7
93984: ARRAY
93985: PPUSH
93986: CALL_OW 314
93990: NOT
93991: IFFALSE 94113
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
93993: LD_ADDR_VAR 0 10
93997: PUSH
93998: LD_VAR 0 13
94002: PPUSH
94003: LD_VAR 0 4
94007: PUSH
94008: LD_VAR 0 7
94012: ARRAY
94013: PPUSH
94014: CALL_OW 74
94018: ST_TO_ADDR
// if not x then
94019: LD_VAR 0 10
94023: NOT
94024: IFFALSE 94028
// continue ;
94026: GO 93460
// if GetLives ( x ) < 1000 then
94028: LD_VAR 0 10
94032: PPUSH
94033: CALL_OW 256
94037: PUSH
94038: LD_INT 1000
94040: LESS
94041: IFFALSE 94065
// ComRepairVehicle ( group [ i ] , x ) else
94043: LD_VAR 0 4
94047: PUSH
94048: LD_VAR 0 7
94052: ARRAY
94053: PPUSH
94054: LD_VAR 0 10
94058: PPUSH
94059: CALL_OW 129
94063: GO 94113
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
94065: LD_VAR 0 23
94069: PUSH
94070: LD_VAR 0 4
94074: PUSH
94075: LD_VAR 0 7
94079: ARRAY
94080: PPUSH
94081: CALL_OW 256
94085: PUSH
94086: LD_INT 1000
94088: LESS
94089: AND
94090: NOT
94091: IFFALSE 94113
// ComEnterUnit ( group [ i ] , x ) ;
94093: LD_VAR 0 4
94097: PUSH
94098: LD_VAR 0 7
94102: ARRAY
94103: PPUSH
94104: LD_VAR 0 10
94108: PPUSH
94109: CALL_OW 120
// end ; continue ;
94113: GO 93460
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
94115: LD_VAR 0 23
94119: PUSH
94120: LD_VAR 0 4
94124: PUSH
94125: LD_VAR 0 7
94129: ARRAY
94130: PPUSH
94131: CALL_OW 247
94135: PUSH
94136: LD_INT 1
94138: EQUAL
94139: AND
94140: IFFALSE 94618
// begin if group [ i ] in healers then
94142: LD_VAR 0 4
94146: PUSH
94147: LD_VAR 0 7
94151: ARRAY
94152: PUSH
94153: LD_VAR 0 31
94157: IN
94158: IFFALSE 94431
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
94160: LD_VAR 0 4
94164: PUSH
94165: LD_VAR 0 7
94169: ARRAY
94170: PPUSH
94171: LD_VAR 0 23
94175: PPUSH
94176: CALL_OW 308
94180: NOT
94181: PUSH
94182: LD_VAR 0 4
94186: PUSH
94187: LD_VAR 0 7
94191: ARRAY
94192: PPUSH
94193: CALL_OW 314
94197: NOT
94198: AND
94199: IFFALSE 94223
// ComMoveToArea ( group [ i ] , f_heal ) else
94201: LD_VAR 0 4
94205: PUSH
94206: LD_VAR 0 7
94210: ARRAY
94211: PPUSH
94212: LD_VAR 0 23
94216: PPUSH
94217: CALL_OW 113
94221: GO 94429
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
94223: LD_VAR 0 4
94227: PUSH
94228: LD_VAR 0 7
94232: ARRAY
94233: PPUSH
94234: CALL 46882 0 1
94238: PPUSH
94239: CALL_OW 256
94243: PUSH
94244: LD_INT 1000
94246: EQUAL
94247: IFFALSE 94266
// ComStop ( group [ i ] ) else
94249: LD_VAR 0 4
94253: PUSH
94254: LD_VAR 0 7
94258: ARRAY
94259: PPUSH
94260: CALL_OW 141
94264: GO 94429
// if not HasTask ( group [ i ] ) and to_heal then
94266: LD_VAR 0 4
94270: PUSH
94271: LD_VAR 0 7
94275: ARRAY
94276: PPUSH
94277: CALL_OW 314
94281: NOT
94282: PUSH
94283: LD_VAR 0 30
94287: AND
94288: IFFALSE 94429
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
94290: LD_ADDR_VAR 0 13
94294: PUSH
94295: LD_VAR 0 30
94299: PPUSH
94300: LD_INT 3
94302: PUSH
94303: LD_INT 54
94305: PUSH
94306: EMPTY
94307: LIST
94308: PUSH
94309: EMPTY
94310: LIST
94311: LIST
94312: PPUSH
94313: CALL_OW 72
94317: PPUSH
94318: LD_VAR 0 4
94322: PUSH
94323: LD_VAR 0 7
94327: ARRAY
94328: PPUSH
94329: CALL_OW 74
94333: ST_TO_ADDR
// if z then
94334: LD_VAR 0 13
94338: IFFALSE 94429
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
94340: LD_INT 91
94342: PUSH
94343: LD_VAR 0 13
94347: PUSH
94348: LD_INT 10
94350: PUSH
94351: EMPTY
94352: LIST
94353: LIST
94354: LIST
94355: PUSH
94356: LD_INT 81
94358: PUSH
94359: LD_VAR 0 13
94363: PPUSH
94364: CALL_OW 255
94368: PUSH
94369: EMPTY
94370: LIST
94371: LIST
94372: PUSH
94373: EMPTY
94374: LIST
94375: LIST
94376: PPUSH
94377: CALL_OW 69
94381: PUSH
94382: LD_INT 0
94384: EQUAL
94385: IFFALSE 94409
// ComHeal ( group [ i ] , z ) else
94387: LD_VAR 0 4
94391: PUSH
94392: LD_VAR 0 7
94396: ARRAY
94397: PPUSH
94398: LD_VAR 0 13
94402: PPUSH
94403: CALL_OW 128
94407: GO 94429
// ComMoveToArea ( group [ i ] , f_heal ) ;
94409: LD_VAR 0 4
94413: PUSH
94414: LD_VAR 0 7
94418: ARRAY
94419: PPUSH
94420: LD_VAR 0 23
94424: PPUSH
94425: CALL_OW 113
// end ; continue ;
94429: GO 93460
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
94431: LD_VAR 0 4
94435: PUSH
94436: LD_VAR 0 7
94440: ARRAY
94441: PPUSH
94442: CALL_OW 256
94446: PUSH
94447: LD_INT 700
94449: LESS
94450: PUSH
94451: LD_VAR 0 4
94455: PUSH
94456: LD_VAR 0 7
94460: ARRAY
94461: PUSH
94462: LD_VAR 0 30
94466: IN
94467: NOT
94468: AND
94469: IFFALSE 94493
// to_heal := to_heal union group [ i ] ;
94471: LD_ADDR_VAR 0 30
94475: PUSH
94476: LD_VAR 0 30
94480: PUSH
94481: LD_VAR 0 4
94485: PUSH
94486: LD_VAR 0 7
94490: ARRAY
94491: UNION
94492: ST_TO_ADDR
// if group [ i ] in to_heal then
94493: LD_VAR 0 4
94497: PUSH
94498: LD_VAR 0 7
94502: ARRAY
94503: PUSH
94504: LD_VAR 0 30
94508: IN
94509: IFFALSE 94618
// begin if GetLives ( group [ i ] ) = 1000 then
94511: LD_VAR 0 4
94515: PUSH
94516: LD_VAR 0 7
94520: ARRAY
94521: PPUSH
94522: CALL_OW 256
94526: PUSH
94527: LD_INT 1000
94529: EQUAL
94530: IFFALSE 94556
// to_heal := to_heal diff group [ i ] else
94532: LD_ADDR_VAR 0 30
94536: PUSH
94537: LD_VAR 0 30
94541: PUSH
94542: LD_VAR 0 4
94546: PUSH
94547: LD_VAR 0 7
94551: ARRAY
94552: DIFF
94553: ST_TO_ADDR
94554: GO 94618
// begin if not IsInArea ( group [ i ] , to_heal ) then
94556: LD_VAR 0 4
94560: PUSH
94561: LD_VAR 0 7
94565: ARRAY
94566: PPUSH
94567: LD_VAR 0 30
94571: PPUSH
94572: CALL_OW 308
94576: NOT
94577: IFFALSE 94601
// ComMoveToArea ( group [ i ] , f_heal ) else
94579: LD_VAR 0 4
94583: PUSH
94584: LD_VAR 0 7
94588: ARRAY
94589: PPUSH
94590: LD_VAR 0 23
94594: PPUSH
94595: CALL_OW 113
94599: GO 94616
// ComHold ( group [ i ] ) ;
94601: LD_VAR 0 4
94605: PUSH
94606: LD_VAR 0 7
94610: ARRAY
94611: PPUSH
94612: CALL_OW 140
// continue ;
94616: GO 93460
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
94618: LD_VAR 0 4
94622: PUSH
94623: LD_VAR 0 7
94627: ARRAY
94628: PPUSH
94629: LD_INT 10
94631: PPUSH
94632: CALL 45302 0 2
94636: NOT
94637: PUSH
94638: LD_VAR 0 16
94642: PUSH
94643: LD_VAR 0 7
94647: ARRAY
94648: PUSH
94649: EMPTY
94650: EQUAL
94651: NOT
94652: AND
94653: IFFALSE 94919
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
94655: LD_VAR 0 4
94659: PUSH
94660: LD_VAR 0 7
94664: ARRAY
94665: PPUSH
94666: CALL_OW 262
94670: PUSH
94671: LD_INT 1
94673: PUSH
94674: LD_INT 2
94676: PUSH
94677: EMPTY
94678: LIST
94679: LIST
94680: IN
94681: IFFALSE 94722
// if GetFuel ( group [ i ] ) < 10 then
94683: LD_VAR 0 4
94687: PUSH
94688: LD_VAR 0 7
94692: ARRAY
94693: PPUSH
94694: CALL_OW 261
94698: PUSH
94699: LD_INT 10
94701: LESS
94702: IFFALSE 94722
// SetFuel ( group [ i ] , 12 ) ;
94704: LD_VAR 0 4
94708: PUSH
94709: LD_VAR 0 7
94713: ARRAY
94714: PPUSH
94715: LD_INT 12
94717: PPUSH
94718: CALL_OW 240
// if units_path [ i ] then
94722: LD_VAR 0 16
94726: PUSH
94727: LD_VAR 0 7
94731: ARRAY
94732: IFFALSE 94917
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
94734: LD_VAR 0 4
94738: PUSH
94739: LD_VAR 0 7
94743: ARRAY
94744: PPUSH
94745: LD_VAR 0 16
94749: PUSH
94750: LD_VAR 0 7
94754: ARRAY
94755: PUSH
94756: LD_INT 1
94758: ARRAY
94759: PUSH
94760: LD_INT 1
94762: ARRAY
94763: PPUSH
94764: LD_VAR 0 16
94768: PUSH
94769: LD_VAR 0 7
94773: ARRAY
94774: PUSH
94775: LD_INT 1
94777: ARRAY
94778: PUSH
94779: LD_INT 2
94781: ARRAY
94782: PPUSH
94783: CALL_OW 297
94787: PUSH
94788: LD_INT 6
94790: GREATER
94791: IFFALSE 94866
// begin if not HasTask ( group [ i ] ) then
94793: LD_VAR 0 4
94797: PUSH
94798: LD_VAR 0 7
94802: ARRAY
94803: PPUSH
94804: CALL_OW 314
94808: NOT
94809: IFFALSE 94864
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
94811: LD_VAR 0 4
94815: PUSH
94816: LD_VAR 0 7
94820: ARRAY
94821: PPUSH
94822: LD_VAR 0 16
94826: PUSH
94827: LD_VAR 0 7
94831: ARRAY
94832: PUSH
94833: LD_INT 1
94835: ARRAY
94836: PUSH
94837: LD_INT 1
94839: ARRAY
94840: PPUSH
94841: LD_VAR 0 16
94845: PUSH
94846: LD_VAR 0 7
94850: ARRAY
94851: PUSH
94852: LD_INT 1
94854: ARRAY
94855: PUSH
94856: LD_INT 2
94858: ARRAY
94859: PPUSH
94860: CALL_OW 114
// end else
94864: GO 94917
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
94866: LD_ADDR_VAR 0 15
94870: PUSH
94871: LD_VAR 0 16
94875: PUSH
94876: LD_VAR 0 7
94880: ARRAY
94881: PPUSH
94882: LD_INT 1
94884: PPUSH
94885: CALL_OW 3
94889: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
94890: LD_ADDR_VAR 0 16
94894: PUSH
94895: LD_VAR 0 16
94899: PPUSH
94900: LD_VAR 0 7
94904: PPUSH
94905: LD_VAR 0 15
94909: PPUSH
94910: CALL_OW 1
94914: ST_TO_ADDR
// continue ;
94915: GO 93460
// end ; end ; end else
94917: GO 97581
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
94919: LD_ADDR_VAR 0 14
94923: PUSH
94924: LD_INT 81
94926: PUSH
94927: LD_VAR 0 4
94931: PUSH
94932: LD_VAR 0 7
94936: ARRAY
94937: PPUSH
94938: CALL_OW 255
94942: PUSH
94943: EMPTY
94944: LIST
94945: LIST
94946: PPUSH
94947: CALL_OW 69
94951: ST_TO_ADDR
// if not tmp then
94952: LD_VAR 0 14
94956: NOT
94957: IFFALSE 94961
// continue ;
94959: GO 93460
// if f_ignore_area then
94961: LD_VAR 0 17
94965: IFFALSE 95053
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
94967: LD_ADDR_VAR 0 15
94971: PUSH
94972: LD_VAR 0 14
94976: PPUSH
94977: LD_INT 3
94979: PUSH
94980: LD_INT 92
94982: PUSH
94983: LD_VAR 0 17
94987: PUSH
94988: LD_INT 1
94990: ARRAY
94991: PUSH
94992: LD_VAR 0 17
94996: PUSH
94997: LD_INT 2
94999: ARRAY
95000: PUSH
95001: LD_VAR 0 17
95005: PUSH
95006: LD_INT 3
95008: ARRAY
95009: PUSH
95010: EMPTY
95011: LIST
95012: LIST
95013: LIST
95014: LIST
95015: PUSH
95016: EMPTY
95017: LIST
95018: LIST
95019: PPUSH
95020: CALL_OW 72
95024: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
95025: LD_VAR 0 14
95029: PUSH
95030: LD_VAR 0 15
95034: DIFF
95035: IFFALSE 95053
// tmp := tmp diff tmp2 ;
95037: LD_ADDR_VAR 0 14
95041: PUSH
95042: LD_VAR 0 14
95046: PUSH
95047: LD_VAR 0 15
95051: DIFF
95052: ST_TO_ADDR
// end ; if not f_murder then
95053: LD_VAR 0 20
95057: NOT
95058: IFFALSE 95116
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
95060: LD_ADDR_VAR 0 15
95064: PUSH
95065: LD_VAR 0 14
95069: PPUSH
95070: LD_INT 3
95072: PUSH
95073: LD_INT 50
95075: PUSH
95076: EMPTY
95077: LIST
95078: PUSH
95079: EMPTY
95080: LIST
95081: LIST
95082: PPUSH
95083: CALL_OW 72
95087: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
95088: LD_VAR 0 14
95092: PUSH
95093: LD_VAR 0 15
95097: DIFF
95098: IFFALSE 95116
// tmp := tmp diff tmp2 ;
95100: LD_ADDR_VAR 0 14
95104: PUSH
95105: LD_VAR 0 14
95109: PUSH
95110: LD_VAR 0 15
95114: DIFF
95115: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
95116: LD_ADDR_VAR 0 14
95120: PUSH
95121: LD_VAR 0 4
95125: PUSH
95126: LD_VAR 0 7
95130: ARRAY
95131: PPUSH
95132: LD_VAR 0 14
95136: PPUSH
95137: LD_INT 1
95139: PPUSH
95140: LD_INT 1
95142: PPUSH
95143: CALL 18945 0 4
95147: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
95148: LD_VAR 0 4
95152: PUSH
95153: LD_VAR 0 7
95157: ARRAY
95158: PPUSH
95159: CALL_OW 257
95163: PUSH
95164: LD_INT 1
95166: EQUAL
95167: IFFALSE 95615
// begin if WantPlant ( group [ i ] ) then
95169: LD_VAR 0 4
95173: PUSH
95174: LD_VAR 0 7
95178: ARRAY
95179: PPUSH
95180: CALL 18446 0 1
95184: IFFALSE 95188
// continue ;
95186: GO 93460
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
95188: LD_VAR 0 18
95192: PUSH
95193: LD_VAR 0 4
95197: PUSH
95198: LD_VAR 0 7
95202: ARRAY
95203: PPUSH
95204: CALL_OW 310
95208: NOT
95209: AND
95210: PUSH
95211: LD_VAR 0 14
95215: PUSH
95216: LD_INT 1
95218: ARRAY
95219: PUSH
95220: LD_VAR 0 14
95224: PPUSH
95225: LD_INT 21
95227: PUSH
95228: LD_INT 2
95230: PUSH
95231: EMPTY
95232: LIST
95233: LIST
95234: PUSH
95235: LD_INT 58
95237: PUSH
95238: EMPTY
95239: LIST
95240: PUSH
95241: EMPTY
95242: LIST
95243: LIST
95244: PPUSH
95245: CALL_OW 72
95249: IN
95250: AND
95251: IFFALSE 95287
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
95253: LD_VAR 0 4
95257: PUSH
95258: LD_VAR 0 7
95262: ARRAY
95263: PPUSH
95264: LD_VAR 0 14
95268: PUSH
95269: LD_INT 1
95271: ARRAY
95272: PPUSH
95273: CALL_OW 120
// attacking := true ;
95277: LD_ADDR_VAR 0 29
95281: PUSH
95282: LD_INT 1
95284: ST_TO_ADDR
// continue ;
95285: GO 93460
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
95287: LD_VAR 0 26
95291: PUSH
95292: LD_VAR 0 4
95296: PUSH
95297: LD_VAR 0 7
95301: ARRAY
95302: PPUSH
95303: CALL_OW 257
95307: PUSH
95308: LD_INT 1
95310: EQUAL
95311: AND
95312: PUSH
95313: LD_VAR 0 4
95317: PUSH
95318: LD_VAR 0 7
95322: ARRAY
95323: PPUSH
95324: CALL_OW 256
95328: PUSH
95329: LD_INT 800
95331: LESS
95332: AND
95333: PUSH
95334: LD_VAR 0 4
95338: PUSH
95339: LD_VAR 0 7
95343: ARRAY
95344: PPUSH
95345: CALL_OW 318
95349: NOT
95350: AND
95351: IFFALSE 95368
// ComCrawl ( group [ i ] ) ;
95353: LD_VAR 0 4
95357: PUSH
95358: LD_VAR 0 7
95362: ARRAY
95363: PPUSH
95364: CALL_OW 137
// if f_mines then
95368: LD_VAR 0 21
95372: IFFALSE 95615
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
95374: LD_VAR 0 14
95378: PUSH
95379: LD_INT 1
95381: ARRAY
95382: PPUSH
95383: CALL_OW 247
95387: PUSH
95388: LD_INT 3
95390: EQUAL
95391: PUSH
95392: LD_VAR 0 14
95396: PUSH
95397: LD_INT 1
95399: ARRAY
95400: PUSH
95401: LD_VAR 0 27
95405: IN
95406: NOT
95407: AND
95408: IFFALSE 95615
// begin x := GetX ( tmp [ 1 ] ) ;
95410: LD_ADDR_VAR 0 10
95414: PUSH
95415: LD_VAR 0 14
95419: PUSH
95420: LD_INT 1
95422: ARRAY
95423: PPUSH
95424: CALL_OW 250
95428: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
95429: LD_ADDR_VAR 0 11
95433: PUSH
95434: LD_VAR 0 14
95438: PUSH
95439: LD_INT 1
95441: ARRAY
95442: PPUSH
95443: CALL_OW 251
95447: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
95448: LD_ADDR_VAR 0 12
95452: PUSH
95453: LD_VAR 0 4
95457: PUSH
95458: LD_VAR 0 7
95462: ARRAY
95463: PPUSH
95464: CALL 45387 0 1
95468: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
95469: LD_VAR 0 4
95473: PUSH
95474: LD_VAR 0 7
95478: ARRAY
95479: PPUSH
95480: LD_VAR 0 10
95484: PPUSH
95485: LD_VAR 0 11
95489: PPUSH
95490: LD_VAR 0 14
95494: PUSH
95495: LD_INT 1
95497: ARRAY
95498: PPUSH
95499: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
95503: LD_VAR 0 4
95507: PUSH
95508: LD_VAR 0 7
95512: ARRAY
95513: PPUSH
95514: LD_VAR 0 10
95518: PPUSH
95519: LD_VAR 0 12
95523: PPUSH
95524: LD_INT 7
95526: PPUSH
95527: CALL_OW 272
95531: PPUSH
95532: LD_VAR 0 11
95536: PPUSH
95537: LD_VAR 0 12
95541: PPUSH
95542: LD_INT 7
95544: PPUSH
95545: CALL_OW 273
95549: PPUSH
95550: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
95554: LD_VAR 0 4
95558: PUSH
95559: LD_VAR 0 7
95563: ARRAY
95564: PPUSH
95565: LD_INT 71
95567: PPUSH
95568: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
95572: LD_ADDR_VAR 0 27
95576: PUSH
95577: LD_VAR 0 27
95581: PPUSH
95582: LD_VAR 0 27
95586: PUSH
95587: LD_INT 1
95589: PLUS
95590: PPUSH
95591: LD_VAR 0 14
95595: PUSH
95596: LD_INT 1
95598: ARRAY
95599: PPUSH
95600: CALL_OW 1
95604: ST_TO_ADDR
// attacking := true ;
95605: LD_ADDR_VAR 0 29
95609: PUSH
95610: LD_INT 1
95612: ST_TO_ADDR
// continue ;
95613: GO 93460
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
95615: LD_VAR 0 4
95619: PUSH
95620: LD_VAR 0 7
95624: ARRAY
95625: PPUSH
95626: CALL_OW 257
95630: PUSH
95631: LD_INT 17
95633: EQUAL
95634: PUSH
95635: LD_VAR 0 4
95639: PUSH
95640: LD_VAR 0 7
95644: ARRAY
95645: PPUSH
95646: CALL_OW 110
95650: PUSH
95651: LD_INT 71
95653: EQUAL
95654: NOT
95655: AND
95656: IFFALSE 95802
// begin attacking := false ;
95658: LD_ADDR_VAR 0 29
95662: PUSH
95663: LD_INT 0
95665: ST_TO_ADDR
// k := 5 ;
95666: LD_ADDR_VAR 0 9
95670: PUSH
95671: LD_INT 5
95673: ST_TO_ADDR
// if tmp < k then
95674: LD_VAR 0 14
95678: PUSH
95679: LD_VAR 0 9
95683: LESS
95684: IFFALSE 95696
// k := tmp ;
95686: LD_ADDR_VAR 0 9
95690: PUSH
95691: LD_VAR 0 14
95695: ST_TO_ADDR
// for j = 1 to k do
95696: LD_ADDR_VAR 0 8
95700: PUSH
95701: DOUBLE
95702: LD_INT 1
95704: DEC
95705: ST_TO_ADDR
95706: LD_VAR 0 9
95710: PUSH
95711: FOR_TO
95712: IFFALSE 95800
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
95714: LD_VAR 0 14
95718: PUSH
95719: LD_VAR 0 8
95723: ARRAY
95724: PUSH
95725: LD_VAR 0 14
95729: PPUSH
95730: LD_INT 58
95732: PUSH
95733: EMPTY
95734: LIST
95735: PPUSH
95736: CALL_OW 72
95740: IN
95741: NOT
95742: IFFALSE 95798
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95744: LD_VAR 0 4
95748: PUSH
95749: LD_VAR 0 7
95753: ARRAY
95754: PPUSH
95755: LD_VAR 0 14
95759: PUSH
95760: LD_VAR 0 8
95764: ARRAY
95765: PPUSH
95766: CALL_OW 115
// attacking := true ;
95770: LD_ADDR_VAR 0 29
95774: PUSH
95775: LD_INT 1
95777: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
95778: LD_VAR 0 4
95782: PUSH
95783: LD_VAR 0 7
95787: ARRAY
95788: PPUSH
95789: LD_INT 71
95791: PPUSH
95792: CALL_OW 109
// continue ;
95796: GO 95711
// end ; end ;
95798: GO 95711
95800: POP
95801: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
95802: LD_VAR 0 4
95806: PUSH
95807: LD_VAR 0 7
95811: ARRAY
95812: PPUSH
95813: CALL_OW 257
95817: PUSH
95818: LD_INT 8
95820: EQUAL
95821: PUSH
95822: LD_VAR 0 4
95826: PUSH
95827: LD_VAR 0 7
95831: ARRAY
95832: PPUSH
95833: CALL_OW 264
95837: PUSH
95838: LD_INT 28
95840: PUSH
95841: LD_INT 45
95843: PUSH
95844: LD_INT 7
95846: PUSH
95847: LD_INT 47
95849: PUSH
95850: EMPTY
95851: LIST
95852: LIST
95853: LIST
95854: LIST
95855: IN
95856: OR
95857: IFFALSE 96113
// begin attacking := false ;
95859: LD_ADDR_VAR 0 29
95863: PUSH
95864: LD_INT 0
95866: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
95867: LD_VAR 0 14
95871: PUSH
95872: LD_INT 1
95874: ARRAY
95875: PPUSH
95876: CALL_OW 266
95880: PUSH
95881: LD_INT 32
95883: PUSH
95884: LD_INT 31
95886: PUSH
95887: LD_INT 33
95889: PUSH
95890: LD_INT 4
95892: PUSH
95893: LD_INT 5
95895: PUSH
95896: EMPTY
95897: LIST
95898: LIST
95899: LIST
95900: LIST
95901: LIST
95902: IN
95903: IFFALSE 96089
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
95905: LD_ADDR_VAR 0 9
95909: PUSH
95910: LD_VAR 0 14
95914: PUSH
95915: LD_INT 1
95917: ARRAY
95918: PPUSH
95919: CALL_OW 266
95923: PPUSH
95924: LD_VAR 0 14
95928: PUSH
95929: LD_INT 1
95931: ARRAY
95932: PPUSH
95933: CALL_OW 250
95937: PPUSH
95938: LD_VAR 0 14
95942: PUSH
95943: LD_INT 1
95945: ARRAY
95946: PPUSH
95947: CALL_OW 251
95951: PPUSH
95952: LD_VAR 0 14
95956: PUSH
95957: LD_INT 1
95959: ARRAY
95960: PPUSH
95961: CALL_OW 254
95965: PPUSH
95966: LD_VAR 0 14
95970: PUSH
95971: LD_INT 1
95973: ARRAY
95974: PPUSH
95975: CALL_OW 248
95979: PPUSH
95980: LD_INT 0
95982: PPUSH
95983: CALL 26757 0 6
95987: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
95988: LD_ADDR_VAR 0 8
95992: PUSH
95993: LD_VAR 0 4
95997: PUSH
95998: LD_VAR 0 7
96002: ARRAY
96003: PPUSH
96004: LD_VAR 0 9
96008: PPUSH
96009: CALL 45427 0 2
96013: ST_TO_ADDR
// if j then
96014: LD_VAR 0 8
96018: IFFALSE 96087
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
96020: LD_VAR 0 8
96024: PUSH
96025: LD_INT 1
96027: ARRAY
96028: PPUSH
96029: LD_VAR 0 8
96033: PUSH
96034: LD_INT 2
96036: ARRAY
96037: PPUSH
96038: CALL_OW 488
96042: IFFALSE 96087
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
96044: LD_VAR 0 4
96048: PUSH
96049: LD_VAR 0 7
96053: ARRAY
96054: PPUSH
96055: LD_VAR 0 8
96059: PUSH
96060: LD_INT 1
96062: ARRAY
96063: PPUSH
96064: LD_VAR 0 8
96068: PUSH
96069: LD_INT 2
96071: ARRAY
96072: PPUSH
96073: CALL_OW 116
// attacking := true ;
96077: LD_ADDR_VAR 0 29
96081: PUSH
96082: LD_INT 1
96084: ST_TO_ADDR
// continue ;
96085: GO 93460
// end ; end else
96087: GO 96113
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96089: LD_VAR 0 4
96093: PUSH
96094: LD_VAR 0 7
96098: ARRAY
96099: PPUSH
96100: LD_VAR 0 14
96104: PUSH
96105: LD_INT 1
96107: ARRAY
96108: PPUSH
96109: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
96113: LD_VAR 0 4
96117: PUSH
96118: LD_VAR 0 7
96122: ARRAY
96123: PPUSH
96124: CALL_OW 265
96128: PUSH
96129: LD_INT 11
96131: EQUAL
96132: IFFALSE 96410
// begin k := 10 ;
96134: LD_ADDR_VAR 0 9
96138: PUSH
96139: LD_INT 10
96141: ST_TO_ADDR
// x := 0 ;
96142: LD_ADDR_VAR 0 10
96146: PUSH
96147: LD_INT 0
96149: ST_TO_ADDR
// if tmp < k then
96150: LD_VAR 0 14
96154: PUSH
96155: LD_VAR 0 9
96159: LESS
96160: IFFALSE 96172
// k := tmp ;
96162: LD_ADDR_VAR 0 9
96166: PUSH
96167: LD_VAR 0 14
96171: ST_TO_ADDR
// for j = k downto 1 do
96172: LD_ADDR_VAR 0 8
96176: PUSH
96177: DOUBLE
96178: LD_VAR 0 9
96182: INC
96183: ST_TO_ADDR
96184: LD_INT 1
96186: PUSH
96187: FOR_DOWNTO
96188: IFFALSE 96263
// begin if GetType ( tmp [ j ] ) = unit_human then
96190: LD_VAR 0 14
96194: PUSH
96195: LD_VAR 0 8
96199: ARRAY
96200: PPUSH
96201: CALL_OW 247
96205: PUSH
96206: LD_INT 1
96208: EQUAL
96209: IFFALSE 96261
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
96211: LD_VAR 0 4
96215: PUSH
96216: LD_VAR 0 7
96220: ARRAY
96221: PPUSH
96222: LD_VAR 0 14
96226: PUSH
96227: LD_VAR 0 8
96231: ARRAY
96232: PPUSH
96233: CALL 45698 0 2
// x := tmp [ j ] ;
96237: LD_ADDR_VAR 0 10
96241: PUSH
96242: LD_VAR 0 14
96246: PUSH
96247: LD_VAR 0 8
96251: ARRAY
96252: ST_TO_ADDR
// attacking := true ;
96253: LD_ADDR_VAR 0 29
96257: PUSH
96258: LD_INT 1
96260: ST_TO_ADDR
// end ; end ;
96261: GO 96187
96263: POP
96264: POP
// if not x then
96265: LD_VAR 0 10
96269: NOT
96270: IFFALSE 96410
// begin attacking := true ;
96272: LD_ADDR_VAR 0 29
96276: PUSH
96277: LD_INT 1
96279: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
96280: LD_VAR 0 4
96284: PUSH
96285: LD_VAR 0 7
96289: ARRAY
96290: PPUSH
96291: CALL_OW 250
96295: PPUSH
96296: LD_VAR 0 4
96300: PUSH
96301: LD_VAR 0 7
96305: ARRAY
96306: PPUSH
96307: CALL_OW 251
96311: PPUSH
96312: CALL_OW 546
96316: PUSH
96317: LD_INT 2
96319: ARRAY
96320: PUSH
96321: LD_VAR 0 14
96325: PUSH
96326: LD_INT 1
96328: ARRAY
96329: PPUSH
96330: CALL_OW 250
96334: PPUSH
96335: LD_VAR 0 14
96339: PUSH
96340: LD_INT 1
96342: ARRAY
96343: PPUSH
96344: CALL_OW 251
96348: PPUSH
96349: CALL_OW 546
96353: PUSH
96354: LD_INT 2
96356: ARRAY
96357: EQUAL
96358: IFFALSE 96386
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
96360: LD_VAR 0 4
96364: PUSH
96365: LD_VAR 0 7
96369: ARRAY
96370: PPUSH
96371: LD_VAR 0 14
96375: PUSH
96376: LD_INT 1
96378: ARRAY
96379: PPUSH
96380: CALL 45698 0 2
96384: GO 96410
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96386: LD_VAR 0 4
96390: PUSH
96391: LD_VAR 0 7
96395: ARRAY
96396: PPUSH
96397: LD_VAR 0 14
96401: PUSH
96402: LD_INT 1
96404: ARRAY
96405: PPUSH
96406: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
96410: LD_VAR 0 4
96414: PUSH
96415: LD_VAR 0 7
96419: ARRAY
96420: PPUSH
96421: CALL_OW 264
96425: PUSH
96426: LD_INT 29
96428: EQUAL
96429: IFFALSE 96795
// begin if WantsToAttack ( group [ i ] ) in bombed then
96431: LD_VAR 0 4
96435: PUSH
96436: LD_VAR 0 7
96440: ARRAY
96441: PPUSH
96442: CALL_OW 319
96446: PUSH
96447: LD_VAR 0 28
96451: IN
96452: IFFALSE 96456
// continue ;
96454: GO 93460
// k := 8 ;
96456: LD_ADDR_VAR 0 9
96460: PUSH
96461: LD_INT 8
96463: ST_TO_ADDR
// x := 0 ;
96464: LD_ADDR_VAR 0 10
96468: PUSH
96469: LD_INT 0
96471: ST_TO_ADDR
// if tmp < k then
96472: LD_VAR 0 14
96476: PUSH
96477: LD_VAR 0 9
96481: LESS
96482: IFFALSE 96494
// k := tmp ;
96484: LD_ADDR_VAR 0 9
96488: PUSH
96489: LD_VAR 0 14
96493: ST_TO_ADDR
// for j = 1 to k do
96494: LD_ADDR_VAR 0 8
96498: PUSH
96499: DOUBLE
96500: LD_INT 1
96502: DEC
96503: ST_TO_ADDR
96504: LD_VAR 0 9
96508: PUSH
96509: FOR_TO
96510: IFFALSE 96642
// begin if GetType ( tmp [ j ] ) = unit_building then
96512: LD_VAR 0 14
96516: PUSH
96517: LD_VAR 0 8
96521: ARRAY
96522: PPUSH
96523: CALL_OW 247
96527: PUSH
96528: LD_INT 3
96530: EQUAL
96531: IFFALSE 96640
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
96533: LD_VAR 0 14
96537: PUSH
96538: LD_VAR 0 8
96542: ARRAY
96543: PUSH
96544: LD_VAR 0 28
96548: IN
96549: NOT
96550: PUSH
96551: LD_VAR 0 14
96555: PUSH
96556: LD_VAR 0 8
96560: ARRAY
96561: PPUSH
96562: CALL_OW 313
96566: AND
96567: IFFALSE 96640
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
96569: LD_VAR 0 4
96573: PUSH
96574: LD_VAR 0 7
96578: ARRAY
96579: PPUSH
96580: LD_VAR 0 14
96584: PUSH
96585: LD_VAR 0 8
96589: ARRAY
96590: PPUSH
96591: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
96595: LD_ADDR_VAR 0 28
96599: PUSH
96600: LD_VAR 0 28
96604: PPUSH
96605: LD_VAR 0 28
96609: PUSH
96610: LD_INT 1
96612: PLUS
96613: PPUSH
96614: LD_VAR 0 14
96618: PUSH
96619: LD_VAR 0 8
96623: ARRAY
96624: PPUSH
96625: CALL_OW 1
96629: ST_TO_ADDR
// attacking := true ;
96630: LD_ADDR_VAR 0 29
96634: PUSH
96635: LD_INT 1
96637: ST_TO_ADDR
// break ;
96638: GO 96642
// end ; end ;
96640: GO 96509
96642: POP
96643: POP
// if not attacking and f_attack_depot then
96644: LD_VAR 0 29
96648: NOT
96649: PUSH
96650: LD_VAR 0 25
96654: AND
96655: IFFALSE 96750
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
96657: LD_ADDR_VAR 0 13
96661: PUSH
96662: LD_VAR 0 14
96666: PPUSH
96667: LD_INT 2
96669: PUSH
96670: LD_INT 30
96672: PUSH
96673: LD_INT 0
96675: PUSH
96676: EMPTY
96677: LIST
96678: LIST
96679: PUSH
96680: LD_INT 30
96682: PUSH
96683: LD_INT 1
96685: PUSH
96686: EMPTY
96687: LIST
96688: LIST
96689: PUSH
96690: EMPTY
96691: LIST
96692: LIST
96693: LIST
96694: PPUSH
96695: CALL_OW 72
96699: ST_TO_ADDR
// if z then
96700: LD_VAR 0 13
96704: IFFALSE 96750
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
96706: LD_VAR 0 4
96710: PUSH
96711: LD_VAR 0 7
96715: ARRAY
96716: PPUSH
96717: LD_VAR 0 13
96721: PPUSH
96722: LD_VAR 0 4
96726: PUSH
96727: LD_VAR 0 7
96731: ARRAY
96732: PPUSH
96733: CALL_OW 74
96737: PPUSH
96738: CALL_OW 115
// attacking := true ;
96742: LD_ADDR_VAR 0 29
96746: PUSH
96747: LD_INT 1
96749: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
96750: LD_VAR 0 4
96754: PUSH
96755: LD_VAR 0 7
96759: ARRAY
96760: PPUSH
96761: CALL_OW 256
96765: PUSH
96766: LD_INT 500
96768: LESS
96769: IFFALSE 96795
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96771: LD_VAR 0 4
96775: PUSH
96776: LD_VAR 0 7
96780: ARRAY
96781: PPUSH
96782: LD_VAR 0 14
96786: PUSH
96787: LD_INT 1
96789: ARRAY
96790: PPUSH
96791: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
96795: LD_VAR 0 4
96799: PUSH
96800: LD_VAR 0 7
96804: ARRAY
96805: PPUSH
96806: CALL_OW 264
96810: PUSH
96811: LD_INT 49
96813: EQUAL
96814: IFFALSE 96935
// begin if not HasTask ( group [ i ] ) then
96816: LD_VAR 0 4
96820: PUSH
96821: LD_VAR 0 7
96825: ARRAY
96826: PPUSH
96827: CALL_OW 314
96831: NOT
96832: IFFALSE 96935
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
96834: LD_ADDR_VAR 0 9
96838: PUSH
96839: LD_INT 81
96841: PUSH
96842: LD_VAR 0 4
96846: PUSH
96847: LD_VAR 0 7
96851: ARRAY
96852: PPUSH
96853: CALL_OW 255
96857: PUSH
96858: EMPTY
96859: LIST
96860: LIST
96861: PPUSH
96862: CALL_OW 69
96866: PPUSH
96867: LD_VAR 0 4
96871: PUSH
96872: LD_VAR 0 7
96876: ARRAY
96877: PPUSH
96878: CALL_OW 74
96882: ST_TO_ADDR
// if k then
96883: LD_VAR 0 9
96887: IFFALSE 96935
// if GetDistUnits ( group [ i ] , k ) > 10 then
96889: LD_VAR 0 4
96893: PUSH
96894: LD_VAR 0 7
96898: ARRAY
96899: PPUSH
96900: LD_VAR 0 9
96904: PPUSH
96905: CALL_OW 296
96909: PUSH
96910: LD_INT 10
96912: GREATER
96913: IFFALSE 96935
// ComMoveUnit ( group [ i ] , k ) ;
96915: LD_VAR 0 4
96919: PUSH
96920: LD_VAR 0 7
96924: ARRAY
96925: PPUSH
96926: LD_VAR 0 9
96930: PPUSH
96931: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
96935: LD_VAR 0 4
96939: PUSH
96940: LD_VAR 0 7
96944: ARRAY
96945: PPUSH
96946: CALL_OW 256
96950: PUSH
96951: LD_INT 250
96953: LESS
96954: PUSH
96955: LD_VAR 0 4
96959: PUSH
96960: LD_VAR 0 7
96964: ARRAY
96965: PUSH
96966: LD_INT 21
96968: PUSH
96969: LD_INT 2
96971: PUSH
96972: EMPTY
96973: LIST
96974: LIST
96975: PUSH
96976: LD_INT 23
96978: PUSH
96979: LD_INT 2
96981: PUSH
96982: EMPTY
96983: LIST
96984: LIST
96985: PUSH
96986: EMPTY
96987: LIST
96988: LIST
96989: PPUSH
96990: CALL_OW 69
96994: IN
96995: AND
96996: IFFALSE 97121
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
96998: LD_ADDR_VAR 0 9
97002: PUSH
97003: LD_OWVAR 3
97007: PUSH
97008: LD_VAR 0 4
97012: PUSH
97013: LD_VAR 0 7
97017: ARRAY
97018: DIFF
97019: PPUSH
97020: LD_VAR 0 4
97024: PUSH
97025: LD_VAR 0 7
97029: ARRAY
97030: PPUSH
97031: CALL_OW 74
97035: ST_TO_ADDR
// if not k then
97036: LD_VAR 0 9
97040: NOT
97041: IFFALSE 97045
// continue ;
97043: GO 93460
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
97045: LD_VAR 0 9
97049: PUSH
97050: LD_INT 81
97052: PUSH
97053: LD_VAR 0 4
97057: PUSH
97058: LD_VAR 0 7
97062: ARRAY
97063: PPUSH
97064: CALL_OW 255
97068: PUSH
97069: EMPTY
97070: LIST
97071: LIST
97072: PPUSH
97073: CALL_OW 69
97077: IN
97078: PUSH
97079: LD_VAR 0 9
97083: PPUSH
97084: LD_VAR 0 4
97088: PUSH
97089: LD_VAR 0 7
97093: ARRAY
97094: PPUSH
97095: CALL_OW 296
97099: PUSH
97100: LD_INT 5
97102: LESS
97103: AND
97104: IFFALSE 97121
// ComAutodestruct ( group [ i ] ) ;
97106: LD_VAR 0 4
97110: PUSH
97111: LD_VAR 0 7
97115: ARRAY
97116: PPUSH
97117: CALL 45596 0 1
// end ; if f_attack_depot then
97121: LD_VAR 0 25
97125: IFFALSE 97237
// begin k := 6 ;
97127: LD_ADDR_VAR 0 9
97131: PUSH
97132: LD_INT 6
97134: ST_TO_ADDR
// if tmp < k then
97135: LD_VAR 0 14
97139: PUSH
97140: LD_VAR 0 9
97144: LESS
97145: IFFALSE 97157
// k := tmp ;
97147: LD_ADDR_VAR 0 9
97151: PUSH
97152: LD_VAR 0 14
97156: ST_TO_ADDR
// for j = 1 to k do
97157: LD_ADDR_VAR 0 8
97161: PUSH
97162: DOUBLE
97163: LD_INT 1
97165: DEC
97166: ST_TO_ADDR
97167: LD_VAR 0 9
97171: PUSH
97172: FOR_TO
97173: IFFALSE 97235
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
97175: LD_VAR 0 8
97179: PPUSH
97180: CALL_OW 266
97184: PUSH
97185: LD_INT 0
97187: PUSH
97188: LD_INT 1
97190: PUSH
97191: EMPTY
97192: LIST
97193: LIST
97194: IN
97195: IFFALSE 97233
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
97197: LD_VAR 0 4
97201: PUSH
97202: LD_VAR 0 7
97206: ARRAY
97207: PPUSH
97208: LD_VAR 0 14
97212: PUSH
97213: LD_VAR 0 8
97217: ARRAY
97218: PPUSH
97219: CALL_OW 115
// attacking := true ;
97223: LD_ADDR_VAR 0 29
97227: PUSH
97228: LD_INT 1
97230: ST_TO_ADDR
// break ;
97231: GO 97235
// end ;
97233: GO 97172
97235: POP
97236: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
97237: LD_VAR 0 4
97241: PUSH
97242: LD_VAR 0 7
97246: ARRAY
97247: PPUSH
97248: CALL_OW 302
97252: PUSH
97253: LD_VAR 0 29
97257: NOT
97258: AND
97259: IFFALSE 97581
// begin if GetTag ( group [ i ] ) = 71 then
97261: LD_VAR 0 4
97265: PUSH
97266: LD_VAR 0 7
97270: ARRAY
97271: PPUSH
97272: CALL_OW 110
97276: PUSH
97277: LD_INT 71
97279: EQUAL
97280: IFFALSE 97321
// begin if HasTask ( group [ i ] ) then
97282: LD_VAR 0 4
97286: PUSH
97287: LD_VAR 0 7
97291: ARRAY
97292: PPUSH
97293: CALL_OW 314
97297: IFFALSE 97303
// continue else
97299: GO 93460
97301: GO 97321
// SetTag ( group [ i ] , 0 ) ;
97303: LD_VAR 0 4
97307: PUSH
97308: LD_VAR 0 7
97312: ARRAY
97313: PPUSH
97314: LD_INT 0
97316: PPUSH
97317: CALL_OW 109
// end ; k := 8 ;
97321: LD_ADDR_VAR 0 9
97325: PUSH
97326: LD_INT 8
97328: ST_TO_ADDR
// x := 0 ;
97329: LD_ADDR_VAR 0 10
97333: PUSH
97334: LD_INT 0
97336: ST_TO_ADDR
// if tmp < k then
97337: LD_VAR 0 14
97341: PUSH
97342: LD_VAR 0 9
97346: LESS
97347: IFFALSE 97359
// k := tmp ;
97349: LD_ADDR_VAR 0 9
97353: PUSH
97354: LD_VAR 0 14
97358: ST_TO_ADDR
// for j = 1 to k do
97359: LD_ADDR_VAR 0 8
97363: PUSH
97364: DOUBLE
97365: LD_INT 1
97367: DEC
97368: ST_TO_ADDR
97369: LD_VAR 0 9
97373: PUSH
97374: FOR_TO
97375: IFFALSE 97473
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
97377: LD_VAR 0 14
97381: PUSH
97382: LD_VAR 0 8
97386: ARRAY
97387: PPUSH
97388: CALL_OW 247
97392: PUSH
97393: LD_INT 1
97395: EQUAL
97396: PUSH
97397: LD_VAR 0 14
97401: PUSH
97402: LD_VAR 0 8
97406: ARRAY
97407: PPUSH
97408: CALL_OW 256
97412: PUSH
97413: LD_INT 250
97415: LESS
97416: PUSH
97417: LD_VAR 0 20
97421: AND
97422: PUSH
97423: LD_VAR 0 20
97427: NOT
97428: PUSH
97429: LD_VAR 0 14
97433: PUSH
97434: LD_VAR 0 8
97438: ARRAY
97439: PPUSH
97440: CALL_OW 256
97444: PUSH
97445: LD_INT 250
97447: GREATEREQUAL
97448: AND
97449: OR
97450: AND
97451: IFFALSE 97471
// begin x := tmp [ j ] ;
97453: LD_ADDR_VAR 0 10
97457: PUSH
97458: LD_VAR 0 14
97462: PUSH
97463: LD_VAR 0 8
97467: ARRAY
97468: ST_TO_ADDR
// break ;
97469: GO 97473
// end ;
97471: GO 97374
97473: POP
97474: POP
// if x then
97475: LD_VAR 0 10
97479: IFFALSE 97503
// ComAttackUnit ( group [ i ] , x ) else
97481: LD_VAR 0 4
97485: PUSH
97486: LD_VAR 0 7
97490: ARRAY
97491: PPUSH
97492: LD_VAR 0 10
97496: PPUSH
97497: CALL_OW 115
97501: GO 97527
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
97503: LD_VAR 0 4
97507: PUSH
97508: LD_VAR 0 7
97512: ARRAY
97513: PPUSH
97514: LD_VAR 0 14
97518: PUSH
97519: LD_INT 1
97521: ARRAY
97522: PPUSH
97523: CALL_OW 115
// if not HasTask ( group [ i ] ) then
97527: LD_VAR 0 4
97531: PUSH
97532: LD_VAR 0 7
97536: ARRAY
97537: PPUSH
97538: CALL_OW 314
97542: NOT
97543: IFFALSE 97581
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
97545: LD_VAR 0 4
97549: PUSH
97550: LD_VAR 0 7
97554: ARRAY
97555: PPUSH
97556: LD_VAR 0 14
97560: PPUSH
97561: LD_VAR 0 4
97565: PUSH
97566: LD_VAR 0 7
97570: ARRAY
97571: PPUSH
97572: CALL_OW 74
97576: PPUSH
97577: CALL_OW 115
// end ; end ; end ;
97581: GO 93460
97583: POP
97584: POP
// wait ( 0 0$2 ) ;
97585: LD_INT 70
97587: PPUSH
97588: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
97592: LD_VAR 0 4
97596: NOT
97597: PUSH
97598: LD_VAR 0 4
97602: PUSH
97603: EMPTY
97604: EQUAL
97605: OR
97606: PUSH
97607: LD_INT 81
97609: PUSH
97610: LD_VAR 0 35
97614: PUSH
97615: EMPTY
97616: LIST
97617: LIST
97618: PPUSH
97619: CALL_OW 69
97623: NOT
97624: OR
97625: IFFALSE 93445
// end ;
97627: LD_VAR 0 2
97631: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
97632: LD_INT 0
97634: PPUSH
97635: PPUSH
97636: PPUSH
97637: PPUSH
97638: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
97639: LD_VAR 0 1
97643: NOT
97644: PUSH
97645: LD_EXP 65
97649: PUSH
97650: LD_VAR 0 1
97654: ARRAY
97655: NOT
97656: OR
97657: PUSH
97658: LD_VAR 0 2
97662: NOT
97663: OR
97664: PUSH
97665: LD_VAR 0 3
97669: NOT
97670: OR
97671: IFFALSE 97675
// exit ;
97673: GO 98188
// side := mc_sides [ base ] ;
97675: LD_ADDR_VAR 0 6
97679: PUSH
97680: LD_EXP 91
97684: PUSH
97685: LD_VAR 0 1
97689: ARRAY
97690: ST_TO_ADDR
// if not side then
97691: LD_VAR 0 6
97695: NOT
97696: IFFALSE 97700
// exit ;
97698: GO 98188
// for i in solds do
97700: LD_ADDR_VAR 0 7
97704: PUSH
97705: LD_VAR 0 2
97709: PUSH
97710: FOR_IN
97711: IFFALSE 97772
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
97713: LD_VAR 0 7
97717: PPUSH
97718: CALL_OW 310
97722: PPUSH
97723: CALL_OW 266
97727: PUSH
97728: LD_INT 32
97730: PUSH
97731: LD_INT 31
97733: PUSH
97734: EMPTY
97735: LIST
97736: LIST
97737: IN
97738: IFFALSE 97758
// solds := solds diff i else
97740: LD_ADDR_VAR 0 2
97744: PUSH
97745: LD_VAR 0 2
97749: PUSH
97750: LD_VAR 0 7
97754: DIFF
97755: ST_TO_ADDR
97756: GO 97770
// SetTag ( i , 18 ) ;
97758: LD_VAR 0 7
97762: PPUSH
97763: LD_INT 18
97765: PPUSH
97766: CALL_OW 109
97770: GO 97710
97772: POP
97773: POP
// if not solds then
97774: LD_VAR 0 2
97778: NOT
97779: IFFALSE 97783
// exit ;
97781: GO 98188
// repeat wait ( 0 0$1 ) ;
97783: LD_INT 35
97785: PPUSH
97786: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
97790: LD_ADDR_VAR 0 5
97794: PUSH
97795: LD_VAR 0 6
97799: PPUSH
97800: LD_VAR 0 3
97804: PPUSH
97805: CALL 15311 0 2
97809: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97810: LD_EXP 65
97814: PUSH
97815: LD_VAR 0 1
97819: ARRAY
97820: NOT
97821: PUSH
97822: LD_EXP 65
97826: PUSH
97827: LD_VAR 0 1
97831: ARRAY
97832: PUSH
97833: EMPTY
97834: EQUAL
97835: OR
97836: IFFALSE 97873
// begin for i in solds do
97838: LD_ADDR_VAR 0 7
97842: PUSH
97843: LD_VAR 0 2
97847: PUSH
97848: FOR_IN
97849: IFFALSE 97862
// ComStop ( i ) ;
97851: LD_VAR 0 7
97855: PPUSH
97856: CALL_OW 141
97860: GO 97848
97862: POP
97863: POP
// solds := [ ] ;
97864: LD_ADDR_VAR 0 2
97868: PUSH
97869: EMPTY
97870: ST_TO_ADDR
// exit ;
97871: GO 98188
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
97873: LD_VAR 0 5
97877: NOT
97878: PUSH
97879: LD_VAR 0 5
97883: PUSH
97884: LD_INT 3
97886: GREATER
97887: OR
97888: PUSH
97889: LD_EXP 87
97893: PUSH
97894: LD_VAR 0 1
97898: ARRAY
97899: OR
97900: IFFALSE 97941
// begin for i in solds do
97902: LD_ADDR_VAR 0 7
97906: PUSH
97907: LD_VAR 0 2
97911: PUSH
97912: FOR_IN
97913: IFFALSE 97937
// if HasTask ( i ) then
97915: LD_VAR 0 7
97919: PPUSH
97920: CALL_OW 314
97924: IFFALSE 97935
// ComStop ( i ) ;
97926: LD_VAR 0 7
97930: PPUSH
97931: CALL_OW 141
97935: GO 97912
97937: POP
97938: POP
// break ;
97939: GO 98176
// end ; for i in solds do
97941: LD_ADDR_VAR 0 7
97945: PUSH
97946: LD_VAR 0 2
97950: PUSH
97951: FOR_IN
97952: IFFALSE 98168
// begin if IsInUnit ( i ) then
97954: LD_VAR 0 7
97958: PPUSH
97959: CALL_OW 310
97963: IFFALSE 97974
// ComExitBuilding ( i ) ;
97965: LD_VAR 0 7
97969: PPUSH
97970: CALL_OW 122
// if GetLives ( i ) > 333 then
97974: LD_VAR 0 7
97978: PPUSH
97979: CALL_OW 256
97983: PUSH
97984: LD_INT 333
97986: GREATER
97987: IFFALSE 98015
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
97989: LD_VAR 0 7
97993: PPUSH
97994: LD_VAR 0 5
97998: PPUSH
97999: LD_VAR 0 7
98003: PPUSH
98004: CALL_OW 74
98008: PPUSH
98009: CALL_OW 115
98013: GO 98166
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
98015: LD_ADDR_VAR 0 8
98019: PUSH
98020: LD_EXP 65
98024: PUSH
98025: LD_VAR 0 1
98029: ARRAY
98030: PPUSH
98031: LD_INT 2
98033: PUSH
98034: LD_INT 30
98036: PUSH
98037: LD_INT 0
98039: PUSH
98040: EMPTY
98041: LIST
98042: LIST
98043: PUSH
98044: LD_INT 30
98046: PUSH
98047: LD_INT 1
98049: PUSH
98050: EMPTY
98051: LIST
98052: LIST
98053: PUSH
98054: LD_INT 30
98056: PUSH
98057: LD_INT 6
98059: PUSH
98060: EMPTY
98061: LIST
98062: LIST
98063: PUSH
98064: EMPTY
98065: LIST
98066: LIST
98067: LIST
98068: LIST
98069: PPUSH
98070: CALL_OW 72
98074: PPUSH
98075: LD_VAR 0 7
98079: PPUSH
98080: CALL_OW 74
98084: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
98085: LD_VAR 0 7
98089: PPUSH
98090: LD_VAR 0 8
98094: PPUSH
98095: CALL_OW 250
98099: PPUSH
98100: LD_INT 3
98102: PPUSH
98103: LD_INT 5
98105: PPUSH
98106: CALL_OW 272
98110: PPUSH
98111: LD_VAR 0 8
98115: PPUSH
98116: CALL_OW 251
98120: PPUSH
98121: LD_INT 3
98123: PPUSH
98124: LD_INT 5
98126: PPUSH
98127: CALL_OW 273
98131: PPUSH
98132: CALL_OW 111
// SetTag ( i , 0 ) ;
98136: LD_VAR 0 7
98140: PPUSH
98141: LD_INT 0
98143: PPUSH
98144: CALL_OW 109
// solds := solds diff i ;
98148: LD_ADDR_VAR 0 2
98152: PUSH
98153: LD_VAR 0 2
98157: PUSH
98158: LD_VAR 0 7
98162: DIFF
98163: ST_TO_ADDR
// continue ;
98164: GO 97951
// end ; end ;
98166: GO 97951
98168: POP
98169: POP
// until solds ;
98170: LD_VAR 0 2
98174: IFFALSE 97783
// MC_Reset ( base , 18 ) ;
98176: LD_VAR 0 1
98180: PPUSH
98181: LD_INT 18
98183: PPUSH
98184: CALL 54139 0 2
// end ;
98188: LD_VAR 0 4
98192: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
98193: LD_INT 0
98195: PPUSH
98196: PPUSH
98197: PPUSH
98198: PPUSH
98199: PPUSH
98200: PPUSH
98201: PPUSH
98202: PPUSH
98203: PPUSH
98204: PPUSH
98205: PPUSH
98206: PPUSH
98207: PPUSH
98208: PPUSH
98209: PPUSH
98210: PPUSH
98211: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
98212: LD_ADDR_VAR 0 13
98216: PUSH
98217: LD_EXP 65
98221: PUSH
98222: LD_VAR 0 1
98226: ARRAY
98227: PPUSH
98228: LD_INT 25
98230: PUSH
98231: LD_INT 3
98233: PUSH
98234: EMPTY
98235: LIST
98236: LIST
98237: PPUSH
98238: CALL_OW 72
98242: ST_TO_ADDR
// if mc_remote_driver [ base ] then
98243: LD_EXP 105
98247: PUSH
98248: LD_VAR 0 1
98252: ARRAY
98253: IFFALSE 98277
// mechs := mechs diff mc_remote_driver [ base ] ;
98255: LD_ADDR_VAR 0 13
98259: PUSH
98260: LD_VAR 0 13
98264: PUSH
98265: LD_EXP 105
98269: PUSH
98270: LD_VAR 0 1
98274: ARRAY
98275: DIFF
98276: ST_TO_ADDR
// for i in mechs do
98277: LD_ADDR_VAR 0 5
98281: PUSH
98282: LD_VAR 0 13
98286: PUSH
98287: FOR_IN
98288: IFFALSE 98323
// if GetTag ( i ) > 0 then
98290: LD_VAR 0 5
98294: PPUSH
98295: CALL_OW 110
98299: PUSH
98300: LD_INT 0
98302: GREATER
98303: IFFALSE 98321
// mechs := mechs diff i ;
98305: LD_ADDR_VAR 0 13
98309: PUSH
98310: LD_VAR 0 13
98314: PUSH
98315: LD_VAR 0 5
98319: DIFF
98320: ST_TO_ADDR
98321: GO 98287
98323: POP
98324: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
98325: LD_ADDR_VAR 0 9
98329: PUSH
98330: LD_EXP 65
98334: PUSH
98335: LD_VAR 0 1
98339: ARRAY
98340: PPUSH
98341: LD_INT 2
98343: PUSH
98344: LD_INT 25
98346: PUSH
98347: LD_INT 1
98349: PUSH
98350: EMPTY
98351: LIST
98352: LIST
98353: PUSH
98354: LD_INT 25
98356: PUSH
98357: LD_INT 5
98359: PUSH
98360: EMPTY
98361: LIST
98362: LIST
98363: PUSH
98364: LD_INT 25
98366: PUSH
98367: LD_INT 8
98369: PUSH
98370: EMPTY
98371: LIST
98372: LIST
98373: PUSH
98374: LD_INT 25
98376: PUSH
98377: LD_INT 9
98379: PUSH
98380: EMPTY
98381: LIST
98382: LIST
98383: PUSH
98384: EMPTY
98385: LIST
98386: LIST
98387: LIST
98388: LIST
98389: LIST
98390: PPUSH
98391: CALL_OW 72
98395: ST_TO_ADDR
// if not defenders and not solds then
98396: LD_VAR 0 2
98400: NOT
98401: PUSH
98402: LD_VAR 0 9
98406: NOT
98407: AND
98408: IFFALSE 98412
// exit ;
98410: GO 100038
// depot_under_attack := false ;
98412: LD_ADDR_VAR 0 17
98416: PUSH
98417: LD_INT 0
98419: ST_TO_ADDR
// sold_defenders := [ ] ;
98420: LD_ADDR_VAR 0 18
98424: PUSH
98425: EMPTY
98426: ST_TO_ADDR
// if mechs then
98427: LD_VAR 0 13
98431: IFFALSE 98560
// for i in defenders do
98433: LD_ADDR_VAR 0 5
98437: PUSH
98438: LD_VAR 0 2
98442: PUSH
98443: FOR_IN
98444: IFFALSE 98558
// begin SetTag ( i , 20 ) ;
98446: LD_VAR 0 5
98450: PPUSH
98451: LD_INT 20
98453: PPUSH
98454: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
98458: LD_VAR 0 5
98462: PPUSH
98463: CALL_OW 263
98467: PUSH
98468: LD_INT 1
98470: EQUAL
98471: PUSH
98472: LD_VAR 0 5
98476: PPUSH
98477: CALL_OW 311
98481: NOT
98482: AND
98483: PUSH
98484: LD_VAR 0 13
98488: AND
98489: IFFALSE 98556
// begin un := mechs [ 1 ] ;
98491: LD_ADDR_VAR 0 11
98495: PUSH
98496: LD_VAR 0 13
98500: PUSH
98501: LD_INT 1
98503: ARRAY
98504: ST_TO_ADDR
// ComExitBuilding ( un ) ;
98505: LD_VAR 0 11
98509: PPUSH
98510: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
98514: LD_VAR 0 11
98518: PPUSH
98519: LD_VAR 0 5
98523: PPUSH
98524: CALL_OW 180
// SetTag ( un , 19 ) ;
98528: LD_VAR 0 11
98532: PPUSH
98533: LD_INT 19
98535: PPUSH
98536: CALL_OW 109
// mechs := mechs diff un ;
98540: LD_ADDR_VAR 0 13
98544: PUSH
98545: LD_VAR 0 13
98549: PUSH
98550: LD_VAR 0 11
98554: DIFF
98555: ST_TO_ADDR
// end ; end ;
98556: GO 98443
98558: POP
98559: POP
// if solds then
98560: LD_VAR 0 9
98564: IFFALSE 98623
// for i in solds do
98566: LD_ADDR_VAR 0 5
98570: PUSH
98571: LD_VAR 0 9
98575: PUSH
98576: FOR_IN
98577: IFFALSE 98621
// if not GetTag ( i ) then
98579: LD_VAR 0 5
98583: PPUSH
98584: CALL_OW 110
98588: NOT
98589: IFFALSE 98619
// begin defenders := defenders union i ;
98591: LD_ADDR_VAR 0 2
98595: PUSH
98596: LD_VAR 0 2
98600: PUSH
98601: LD_VAR 0 5
98605: UNION
98606: ST_TO_ADDR
// SetTag ( i , 18 ) ;
98607: LD_VAR 0 5
98611: PPUSH
98612: LD_INT 18
98614: PPUSH
98615: CALL_OW 109
// end ;
98619: GO 98576
98621: POP
98622: POP
// repeat wait ( 0 0$1 ) ;
98623: LD_INT 35
98625: PPUSH
98626: CALL_OW 67
// enemy := mc_scan [ base ] ;
98630: LD_ADDR_VAR 0 3
98634: PUSH
98635: LD_EXP 88
98639: PUSH
98640: LD_VAR 0 1
98644: ARRAY
98645: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
98646: LD_EXP 65
98650: PUSH
98651: LD_VAR 0 1
98655: ARRAY
98656: NOT
98657: PUSH
98658: LD_EXP 65
98662: PUSH
98663: LD_VAR 0 1
98667: ARRAY
98668: PUSH
98669: EMPTY
98670: EQUAL
98671: OR
98672: IFFALSE 98709
// begin for i in defenders do
98674: LD_ADDR_VAR 0 5
98678: PUSH
98679: LD_VAR 0 2
98683: PUSH
98684: FOR_IN
98685: IFFALSE 98698
// ComStop ( i ) ;
98687: LD_VAR 0 5
98691: PPUSH
98692: CALL_OW 141
98696: GO 98684
98698: POP
98699: POP
// defenders := [ ] ;
98700: LD_ADDR_VAR 0 2
98704: PUSH
98705: EMPTY
98706: ST_TO_ADDR
// exit ;
98707: GO 100038
// end ; for i in defenders do
98709: LD_ADDR_VAR 0 5
98713: PUSH
98714: LD_VAR 0 2
98718: PUSH
98719: FOR_IN
98720: IFFALSE 99538
// begin e := NearestUnitToUnit ( enemy , i ) ;
98722: LD_ADDR_VAR 0 14
98726: PUSH
98727: LD_VAR 0 3
98731: PPUSH
98732: LD_VAR 0 5
98736: PPUSH
98737: CALL_OW 74
98741: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
98742: LD_ADDR_VAR 0 8
98746: PUSH
98747: LD_EXP 65
98751: PUSH
98752: LD_VAR 0 1
98756: ARRAY
98757: PPUSH
98758: LD_INT 2
98760: PUSH
98761: LD_INT 30
98763: PUSH
98764: LD_INT 0
98766: PUSH
98767: EMPTY
98768: LIST
98769: LIST
98770: PUSH
98771: LD_INT 30
98773: PUSH
98774: LD_INT 1
98776: PUSH
98777: EMPTY
98778: LIST
98779: LIST
98780: PUSH
98781: EMPTY
98782: LIST
98783: LIST
98784: LIST
98785: PPUSH
98786: CALL_OW 72
98790: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
98791: LD_ADDR_VAR 0 17
98795: PUSH
98796: LD_VAR 0 8
98800: NOT
98801: PUSH
98802: LD_VAR 0 8
98806: PPUSH
98807: LD_INT 3
98809: PUSH
98810: LD_INT 24
98812: PUSH
98813: LD_INT 600
98815: PUSH
98816: EMPTY
98817: LIST
98818: LIST
98819: PUSH
98820: EMPTY
98821: LIST
98822: LIST
98823: PPUSH
98824: CALL_OW 72
98828: OR
98829: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
98830: LD_VAR 0 5
98834: PPUSH
98835: CALL_OW 247
98839: PUSH
98840: LD_INT 2
98842: DOUBLE
98843: EQUAL
98844: IFTRUE 98848
98846: GO 99244
98848: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
98849: LD_VAR 0 5
98853: PPUSH
98854: CALL_OW 256
98858: PUSH
98859: LD_INT 650
98861: GREATER
98862: PUSH
98863: LD_VAR 0 5
98867: PPUSH
98868: LD_VAR 0 14
98872: PPUSH
98873: CALL_OW 296
98877: PUSH
98878: LD_INT 40
98880: LESS
98881: PUSH
98882: LD_VAR 0 14
98886: PPUSH
98887: LD_EXP 90
98891: PUSH
98892: LD_VAR 0 1
98896: ARRAY
98897: PPUSH
98898: CALL_OW 308
98902: OR
98903: AND
98904: IFFALSE 99026
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
98906: LD_VAR 0 5
98910: PPUSH
98911: CALL_OW 262
98915: PUSH
98916: LD_INT 1
98918: EQUAL
98919: PUSH
98920: LD_VAR 0 5
98924: PPUSH
98925: CALL_OW 261
98929: PUSH
98930: LD_INT 30
98932: LESS
98933: AND
98934: PUSH
98935: LD_VAR 0 8
98939: AND
98940: IFFALSE 99010
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
98942: LD_VAR 0 5
98946: PPUSH
98947: LD_VAR 0 8
98951: PPUSH
98952: LD_VAR 0 5
98956: PPUSH
98957: CALL_OW 74
98961: PPUSH
98962: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
98966: LD_VAR 0 5
98970: PPUSH
98971: LD_VAR 0 8
98975: PPUSH
98976: LD_VAR 0 5
98980: PPUSH
98981: CALL_OW 74
98985: PPUSH
98986: CALL_OW 296
98990: PUSH
98991: LD_INT 6
98993: LESS
98994: IFFALSE 99008
// SetFuel ( i , 100 ) ;
98996: LD_VAR 0 5
99000: PPUSH
99001: LD_INT 100
99003: PPUSH
99004: CALL_OW 240
// end else
99008: GO 99024
// ComAttackUnit ( i , e ) ;
99010: LD_VAR 0 5
99014: PPUSH
99015: LD_VAR 0 14
99019: PPUSH
99020: CALL_OW 115
// end else
99024: GO 99127
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
99026: LD_VAR 0 14
99030: PPUSH
99031: LD_EXP 90
99035: PUSH
99036: LD_VAR 0 1
99040: ARRAY
99041: PPUSH
99042: CALL_OW 308
99046: NOT
99047: PUSH
99048: LD_VAR 0 5
99052: PPUSH
99053: LD_VAR 0 14
99057: PPUSH
99058: CALL_OW 296
99062: PUSH
99063: LD_INT 40
99065: GREATEREQUAL
99066: AND
99067: PUSH
99068: LD_VAR 0 5
99072: PPUSH
99073: CALL_OW 256
99077: PUSH
99078: LD_INT 650
99080: LESSEQUAL
99081: OR
99082: PUSH
99083: LD_VAR 0 5
99087: PPUSH
99088: LD_EXP 89
99092: PUSH
99093: LD_VAR 0 1
99097: ARRAY
99098: PPUSH
99099: CALL_OW 308
99103: NOT
99104: AND
99105: IFFALSE 99127
// ComMoveToArea ( i , mc_parking [ base ] ) ;
99107: LD_VAR 0 5
99111: PPUSH
99112: LD_EXP 89
99116: PUSH
99117: LD_VAR 0 1
99121: ARRAY
99122: PPUSH
99123: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
99127: LD_VAR 0 5
99131: PPUSH
99132: CALL_OW 256
99136: PUSH
99137: LD_INT 998
99139: LESS
99140: PUSH
99141: LD_VAR 0 5
99145: PPUSH
99146: CALL_OW 263
99150: PUSH
99151: LD_INT 1
99153: EQUAL
99154: AND
99155: PUSH
99156: LD_VAR 0 5
99160: PPUSH
99161: CALL_OW 311
99165: AND
99166: PUSH
99167: LD_VAR 0 5
99171: PPUSH
99172: LD_EXP 89
99176: PUSH
99177: LD_VAR 0 1
99181: ARRAY
99182: PPUSH
99183: CALL_OW 308
99187: AND
99188: IFFALSE 99242
// begin mech := IsDrivenBy ( i ) ;
99190: LD_ADDR_VAR 0 10
99194: PUSH
99195: LD_VAR 0 5
99199: PPUSH
99200: CALL_OW 311
99204: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
99205: LD_VAR 0 10
99209: PPUSH
99210: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
99214: LD_VAR 0 10
99218: PPUSH
99219: LD_VAR 0 5
99223: PPUSH
99224: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
99228: LD_VAR 0 10
99232: PPUSH
99233: LD_VAR 0 5
99237: PPUSH
99238: CALL_OW 180
// end ; end ; unit_human :
99242: GO 99509
99244: LD_INT 1
99246: DOUBLE
99247: EQUAL
99248: IFTRUE 99252
99250: GO 99508
99252: POP
// begin b := IsInUnit ( i ) ;
99253: LD_ADDR_VAR 0 19
99257: PUSH
99258: LD_VAR 0 5
99262: PPUSH
99263: CALL_OW 310
99267: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
99268: LD_ADDR_VAR 0 20
99272: PUSH
99273: LD_VAR 0 19
99277: NOT
99278: PUSH
99279: LD_VAR 0 19
99283: PPUSH
99284: CALL_OW 266
99288: PUSH
99289: LD_INT 32
99291: PUSH
99292: LD_INT 31
99294: PUSH
99295: EMPTY
99296: LIST
99297: LIST
99298: IN
99299: OR
99300: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
99301: LD_VAR 0 17
99305: PUSH
99306: LD_VAR 0 2
99310: PPUSH
99311: LD_INT 21
99313: PUSH
99314: LD_INT 2
99316: PUSH
99317: EMPTY
99318: LIST
99319: LIST
99320: PPUSH
99321: CALL_OW 72
99325: PUSH
99326: LD_INT 1
99328: LESSEQUAL
99329: OR
99330: PUSH
99331: LD_VAR 0 20
99335: AND
99336: PUSH
99337: LD_VAR 0 5
99341: PUSH
99342: LD_VAR 0 18
99346: IN
99347: NOT
99348: AND
99349: IFFALSE 99442
// begin if b then
99351: LD_VAR 0 19
99355: IFFALSE 99404
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
99357: LD_VAR 0 19
99361: PPUSH
99362: LD_VAR 0 3
99366: PPUSH
99367: LD_VAR 0 19
99371: PPUSH
99372: CALL_OW 74
99376: PPUSH
99377: CALL_OW 296
99381: PUSH
99382: LD_INT 10
99384: LESS
99385: PUSH
99386: LD_VAR 0 19
99390: PPUSH
99391: CALL_OW 461
99395: PUSH
99396: LD_INT 7
99398: NONEQUAL
99399: AND
99400: IFFALSE 99404
// continue ;
99402: GO 98719
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
99404: LD_ADDR_VAR 0 18
99408: PUSH
99409: LD_VAR 0 18
99413: PPUSH
99414: LD_VAR 0 18
99418: PUSH
99419: LD_INT 1
99421: PLUS
99422: PPUSH
99423: LD_VAR 0 5
99427: PPUSH
99428: CALL_OW 1
99432: ST_TO_ADDR
// ComExitBuilding ( i ) ;
99433: LD_VAR 0 5
99437: PPUSH
99438: CALL_OW 122
// end ; if sold_defenders then
99442: LD_VAR 0 18
99446: IFFALSE 99506
// if i in sold_defenders then
99448: LD_VAR 0 5
99452: PUSH
99453: LD_VAR 0 18
99457: IN
99458: IFFALSE 99506
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
99460: LD_VAR 0 5
99464: PPUSH
99465: CALL_OW 314
99469: NOT
99470: PUSH
99471: LD_VAR 0 5
99475: PPUSH
99476: LD_VAR 0 14
99480: PPUSH
99481: CALL_OW 296
99485: PUSH
99486: LD_INT 30
99488: LESS
99489: AND
99490: IFFALSE 99506
// ComAttackUnit ( i , e ) ;
99492: LD_VAR 0 5
99496: PPUSH
99497: LD_VAR 0 14
99501: PPUSH
99502: CALL_OW 115
// end ; end ; end ;
99506: GO 99509
99508: POP
// if IsDead ( i ) then
99509: LD_VAR 0 5
99513: PPUSH
99514: CALL_OW 301
99518: IFFALSE 99536
// defenders := defenders diff i ;
99520: LD_ADDR_VAR 0 2
99524: PUSH
99525: LD_VAR 0 2
99529: PUSH
99530: LD_VAR 0 5
99534: DIFF
99535: ST_TO_ADDR
// end ;
99536: GO 98719
99538: POP
99539: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
99540: LD_VAR 0 3
99544: NOT
99545: PUSH
99546: LD_VAR 0 2
99550: NOT
99551: OR
99552: PUSH
99553: LD_EXP 65
99557: PUSH
99558: LD_VAR 0 1
99562: ARRAY
99563: NOT
99564: OR
99565: IFFALSE 98623
// MC_Reset ( base , 18 ) ;
99567: LD_VAR 0 1
99571: PPUSH
99572: LD_INT 18
99574: PPUSH
99575: CALL 54139 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
99579: LD_ADDR_VAR 0 2
99583: PUSH
99584: LD_VAR 0 2
99588: PUSH
99589: LD_VAR 0 2
99593: PPUSH
99594: LD_INT 2
99596: PUSH
99597: LD_INT 25
99599: PUSH
99600: LD_INT 1
99602: PUSH
99603: EMPTY
99604: LIST
99605: LIST
99606: PUSH
99607: LD_INT 25
99609: PUSH
99610: LD_INT 5
99612: PUSH
99613: EMPTY
99614: LIST
99615: LIST
99616: PUSH
99617: LD_INT 25
99619: PUSH
99620: LD_INT 8
99622: PUSH
99623: EMPTY
99624: LIST
99625: LIST
99626: PUSH
99627: LD_INT 25
99629: PUSH
99630: LD_INT 9
99632: PUSH
99633: EMPTY
99634: LIST
99635: LIST
99636: PUSH
99637: EMPTY
99638: LIST
99639: LIST
99640: LIST
99641: LIST
99642: LIST
99643: PPUSH
99644: CALL_OW 72
99648: DIFF
99649: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
99650: LD_VAR 0 3
99654: NOT
99655: PUSH
99656: LD_VAR 0 2
99660: PPUSH
99661: LD_INT 21
99663: PUSH
99664: LD_INT 2
99666: PUSH
99667: EMPTY
99668: LIST
99669: LIST
99670: PPUSH
99671: CALL_OW 72
99675: AND
99676: IFFALSE 100014
// begin tmp := FilterByTag ( defenders , 19 ) ;
99678: LD_ADDR_VAR 0 12
99682: PUSH
99683: LD_VAR 0 2
99687: PPUSH
99688: LD_INT 19
99690: PPUSH
99691: CALL 47071 0 2
99695: ST_TO_ADDR
// if tmp then
99696: LD_VAR 0 12
99700: IFFALSE 99770
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
99702: LD_ADDR_VAR 0 12
99706: PUSH
99707: LD_VAR 0 12
99711: PPUSH
99712: LD_INT 25
99714: PUSH
99715: LD_INT 3
99717: PUSH
99718: EMPTY
99719: LIST
99720: LIST
99721: PPUSH
99722: CALL_OW 72
99726: ST_TO_ADDR
// if tmp then
99727: LD_VAR 0 12
99731: IFFALSE 99770
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
99733: LD_ADDR_EXP 77
99737: PUSH
99738: LD_EXP 77
99742: PPUSH
99743: LD_VAR 0 1
99747: PPUSH
99748: LD_EXP 77
99752: PUSH
99753: LD_VAR 0 1
99757: ARRAY
99758: PUSH
99759: LD_VAR 0 12
99763: UNION
99764: PPUSH
99765: CALL_OW 1
99769: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
99770: LD_VAR 0 1
99774: PPUSH
99775: LD_INT 19
99777: PPUSH
99778: CALL 54139 0 2
// repeat wait ( 0 0$1 ) ;
99782: LD_INT 35
99784: PPUSH
99785: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
99789: LD_EXP 65
99793: PUSH
99794: LD_VAR 0 1
99798: ARRAY
99799: NOT
99800: PUSH
99801: LD_EXP 65
99805: PUSH
99806: LD_VAR 0 1
99810: ARRAY
99811: PUSH
99812: EMPTY
99813: EQUAL
99814: OR
99815: IFFALSE 99852
// begin for i in defenders do
99817: LD_ADDR_VAR 0 5
99821: PUSH
99822: LD_VAR 0 2
99826: PUSH
99827: FOR_IN
99828: IFFALSE 99841
// ComStop ( i ) ;
99830: LD_VAR 0 5
99834: PPUSH
99835: CALL_OW 141
99839: GO 99827
99841: POP
99842: POP
// defenders := [ ] ;
99843: LD_ADDR_VAR 0 2
99847: PUSH
99848: EMPTY
99849: ST_TO_ADDR
// exit ;
99850: GO 100038
// end ; for i in defenders do
99852: LD_ADDR_VAR 0 5
99856: PUSH
99857: LD_VAR 0 2
99861: PUSH
99862: FOR_IN
99863: IFFALSE 99952
// begin if not IsInArea ( i , mc_parking [ base ] ) then
99865: LD_VAR 0 5
99869: PPUSH
99870: LD_EXP 89
99874: PUSH
99875: LD_VAR 0 1
99879: ARRAY
99880: PPUSH
99881: CALL_OW 308
99885: NOT
99886: IFFALSE 99910
// ComMoveToArea ( i , mc_parking [ base ] ) else
99888: LD_VAR 0 5
99892: PPUSH
99893: LD_EXP 89
99897: PUSH
99898: LD_VAR 0 1
99902: ARRAY
99903: PPUSH
99904: CALL_OW 113
99908: GO 99950
// if GetControl ( i ) = control_manual then
99910: LD_VAR 0 5
99914: PPUSH
99915: CALL_OW 263
99919: PUSH
99920: LD_INT 1
99922: EQUAL
99923: IFFALSE 99950
// if IsDrivenBy ( i ) then
99925: LD_VAR 0 5
99929: PPUSH
99930: CALL_OW 311
99934: IFFALSE 99950
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
99936: LD_VAR 0 5
99940: PPUSH
99941: CALL_OW 311
99945: PPUSH
99946: CALL_OW 121
// end ;
99950: GO 99862
99952: POP
99953: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
99954: LD_VAR 0 2
99958: PPUSH
99959: LD_INT 95
99961: PUSH
99962: LD_EXP 89
99966: PUSH
99967: LD_VAR 0 1
99971: ARRAY
99972: PUSH
99973: EMPTY
99974: LIST
99975: LIST
99976: PPUSH
99977: CALL_OW 72
99981: PUSH
99982: LD_VAR 0 2
99986: EQUAL
99987: PUSH
99988: LD_EXP 88
99992: PUSH
99993: LD_VAR 0 1
99997: ARRAY
99998: OR
99999: PUSH
100000: LD_EXP 65
100004: PUSH
100005: LD_VAR 0 1
100009: ARRAY
100010: NOT
100011: OR
100012: IFFALSE 99782
// end ; MC_Reset ( base , 19 ) ;
100014: LD_VAR 0 1
100018: PPUSH
100019: LD_INT 19
100021: PPUSH
100022: CALL 54139 0 2
// MC_Reset ( base , 20 ) ;
100026: LD_VAR 0 1
100030: PPUSH
100031: LD_INT 20
100033: PPUSH
100034: CALL 54139 0 2
// end ;
100038: LD_VAR 0 4
100042: RET
