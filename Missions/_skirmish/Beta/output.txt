// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5228 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2391 0 0
// PrepareBeta ;
  49: CALL 2780 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 11035 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3362 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4087 0 0
// PrepareRUBase_v2 ;
 877: CALL 4503 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 56570 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3974 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10892 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10892 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10892 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10892 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2069
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4831 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2027
// begin AddMedal ( Russians , 1 ) ;
2003: LD_STRING Russians
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2013: LD_EXP 8
2017: PPUSH
2018: LD_STRING DBrighton-F1a
2020: PPUSH
2021: CALL_OW 88
// end else
2025: GO 2057
// begin AddMedal ( Russians , - 1 ) ;
2027: LD_STRING Russians
2029: PPUSH
2030: LD_INT 1
2032: NEG
2033: PPUSH
2034: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2038: LD_EXP 8
2042: PPUSH
2043: LD_STRING DBrighton-F1
2045: PPUSH
2046: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2050: LD_STRING C3
2052: PPUSH
2053: CALL_OW 337
// end ; DialogueOff ;
2057: CALL_OW 7
// JMM_Arrived := true ;
2061: LD_ADDR_EXP 5
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// end ;
2069: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2070: LD_EXP 5
2074: PUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_EXP 18
2082: PPUSH
2083: CALL_OW 292
2087: AND
2088: IFFALSE 2117
2090: GO 2092
2092: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2093: LD_EXP 18
2097: PPUSH
2098: LD_STRING DBurlak
2100: PPUSH
2101: CALL_OW 88
// Say ( JMM , DJMM ) ;
2105: LD_EXP 36
2109: PPUSH
2110: LD_STRING DJMM
2112: PPUSH
2113: CALL_OW 88
// end ;
2117: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2118: LD_INT 1
2120: PUSH
2121: LD_INT 22
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: LD_INT 34
2136: PUSH
2137: LD_INT 9
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 35
2146: PUSH
2147: LD_INT 9
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 69
2168: PUSH
2169: LD_INT 1
2171: GREATER
2172: IFFALSE 2185
2174: GO 2176
2176: DISABLE
// begin LaserBuilt := true ;
2177: LD_ADDR_EXP 6
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// end ;
2185: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2186: LD_EXP 7
2190: PUSH
2191: LD_INT 6
2193: PPUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 9
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PPUSH
2230: LD_EXP 15
2234: PPUSH
2235: CALL_OW 310
2239: PPUSH
2240: CALL_OW 74
2244: PPUSH
2245: CALL_OW 292
2249: AND
2250: IFFALSE 2286
2252: GO 2254
2254: DISABLE
// begin wait ( 0 0$5 ) ;
2255: LD_INT 175
2257: PPUSH
2258: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_STRING DDeath-Vse-2
2269: PPUSH
2270: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2274: LD_EXP 12
2278: PPUSH
2279: LD_STRING DDeath-Yas-2
2281: PPUSH
2282: CALL_OW 88
// end ;
2286: END
// every 0 0$1 trigger AssaultStarted do
2287: LD_EXP 7
2291: IFFALSE 2315
2293: GO 2295
2295: DISABLE
// begin wait ( 0 0$20 ) ;
2296: LD_INT 700
2298: PPUSH
2299: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2303: LD_EXP 13
2307: PPUSH
2308: LD_STRING DDeath-Pop-2
2310: PPUSH
2311: CALL_OW 88
// end ;
2315: END
// every 0 0$1 trigger MissionStart do
2316: LD_EXP 1
2320: IFFALSE 2362
2322: GO 2324
2324: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2325: LD_INT 1750
2327: PPUSH
2328: LD_INT 4900
2330: PPUSH
2331: CALL_OW 12
2335: PPUSH
2336: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 5
2345: PPUSH
2346: CALL_OW 12
2350: PPUSH
2351: LD_INT 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 55
// enable ;
2361: ENABLE
// end ;
2362: END
// every 0 0$1 trigger MissionStart do
2363: LD_EXP 1
2367: IFFALSE 2390
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// display_Strings := [ #tick , tick ] ;
2373: LD_ADDR_OWVAR 47
2377: PUSH
2378: LD_STRING #tick
2380: PUSH
2381: LD_OWVAR 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// end ; end_of_file
2390: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2391: LD_INT 0
2393: PPUSH
// uc_side := 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_class = class_soldier ;
2402: LD_ADDR_OWVAR 28
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// uc_nation := nation_american ;
2410: LD_ADDR_OWVAR 21
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// hc_sex = sex_male ;
2418: LD_ADDR_OWVAR 27
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// hc_importance = 110 ;
2426: LD_ADDR_OWVAR 32
2430: PUSH
2431: LD_INT 110
2433: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2434: LD_ADDR_OWVAR 30
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 4
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 9
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 6
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 12
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING Gerard Brighton
2502: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2503: LD_ADDR_OWVAR 33
2507: PUSH
2508: LD_STRING Beta_Skirmish
2510: ST_TO_ADDR
// hc_face_number := 1 ;
2511: LD_ADDR_OWVAR 34
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// Brighton := CreateHuman ;
2519: LD_ADDR_EXP 8
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// hc_importance = 80 ;
2537: LD_ADDR_OWVAR 32
2541: PUSH
2542: LD_INT 80
2544: ST_TO_ADDR
// hc_sex = sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2553: LD_ADDR_OWVAR 30
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2576: LD_ADDR_OWVAR 31
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 6
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2599: LD_ADDR_OWVAR 29
2603: PUSH
2604: LD_INT 10
2606: PUSH
2607: LD_INT 10
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_name := Brian Palmer ;
2614: LD_ADDR_OWVAR 26
2618: PUSH
2619: LD_STRING Brian Palmer
2621: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING Beta_Skirmish
2629: ST_TO_ADDR
// hc_face_number := 3 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// Palmer := CreateHuman ;
2638: LD_ADDR_EXP 9
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// hc_class = class_scientistic ;
2648: LD_ADDR_OWVAR 28
2652: PUSH
2653: LD_INT 4
2655: ST_TO_ADDR
// uc_nation := nation_american ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// hc_importance = 70 ;
2664: LD_ADDR_OWVAR 32
2668: PUSH
2669: LD_INT 70
2671: ST_TO_ADDR
// hc_sex = sex_female ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2680: LD_ADDR_OWVAR 30
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2703: LD_ADDR_OWVAR 31
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 8
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2726: LD_ADDR_OWVAR 29
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: LD_INT 10
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_name := Megan Armitage ;
2741: LD_ADDR_OWVAR 26
2745: PUSH
2746: LD_STRING Megan Armitage
2748: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2749: LD_ADDR_OWVAR 33
2753: PUSH
2754: LD_STRING Beta_Skirmish
2756: ST_TO_ADDR
// hc_face_number := 4 ;
2757: LD_ADDR_OWVAR 34
2761: PUSH
2762: LD_INT 4
2764: ST_TO_ADDR
// Megan := CreateHuman ;
2765: LD_ADDR_EXP 10
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 1
2779: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
// uc_side := 1 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_nation := nation_american ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 32
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2893
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2840: LD_VAR 0 2
2844: PPUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 11
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 4
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 7
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
2891: GO 2837
2893: POP
2894: POP
// hc_name :=  ;
2895: LD_ADDR_OWVAR 26
2899: PUSH
2900: LD_STRING 
2902: ST_TO_ADDR
// hc_gallery :=  ;
2903: LD_ADDR_OWVAR 33
2907: PUSH
2908: LD_STRING 
2910: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
2911: LD_ADDR_VAR 0 2
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_INT 6
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: PUSH
2941: FOR_TO
2942: IFFALSE 3000
// begin PrepareSoldier ( 1 , game_skill ) ;
2944: LD_INT 1
2946: PPUSH
2947: LD_EXP 38
2951: PPUSH
2952: CALL_OW 381
// un := CreateHuman ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// filter := filter ^ un ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: LD_VAR 0 4
2996: ADD
2997: ST_TO_ADDR
// end ;
2998: GO 2941
3000: POP
3001: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_OWVAR 67
3030: ARRAY
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3087
// begin PrepareEngineer ( 0 , game_skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_EXP 38
3042: PPUSH
3043: CALL_OW 382
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// filter := filter ^ un ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_VAR 0 4
3071: ADD
3072: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 52
// end ;
3085: GO 3032
3087: POP
3088: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 4
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3174
// begin PrepareMechanic ( 0 , game_skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// filter := filter ^ un ;
3144: LD_ADDR_VAR 0 3
3148: PUSH
3149: LD_VAR 0 3
3153: PUSH
3154: LD_VAR 0 4
3158: ADD
3159: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3160: LD_VAR 0 4
3164: PPUSH
3165: LD_INT 8
3167: PPUSH
3168: CALL_OW 52
// end ;
3172: GO 3119
3174: POP
3175: POP
// for i = 1 to 2 do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_INT 2
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3244
// begin PrepareScientist ( 0 , game_skill ) ;
3192: LD_INT 0
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 384
// un := CreateHuman ;
3204: LD_ADDR_VAR 0 4
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// filter := filter ^ un ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_VAR 0 4
3228: ADD
3229: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_INT 14
3237: PPUSH
3238: CALL_OW 52
// end ;
3242: GO 3189
3244: POP
3245: POP
// for i = 1 to soldiers do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_VAR 0 5
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3287
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3264: LD_VAR 0 5
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
3285: GO 3261
3287: POP
3288: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_INT 51
3296: PPUSH
3297: LD_INT 43
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3307: LD_EXP 9
3311: PPUSH
3312: LD_INT 55
3314: PPUSH
3315: LD_INT 58
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3325: LD_EXP 10
3329: PPUSH
3330: LD_INT 39
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: CALL_OW 48
// BetaSquad := filter diff 0 ;
3343: LD_ADDR_EXP 11
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 0
3355: DIFF
3356: ST_TO_ADDR
// end ;
3357: LD_VAR 0 1
3361: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// uc_side := 6 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 6
3377: ST_TO_ADDR
// uc_nation := nation_russian ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// soldiers := [ ] ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// vehs := [ ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// RUArmada := [ ] ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3407: LD_ADDR_EXP 12
3411: PUSH
3412: LD_STRING Yashin
3414: PPUSH
3415: CALL_OW 25
3419: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3420: LD_ADDR_EXP 13
3424: PUSH
3425: LD_STRING Popov
3427: PPUSH
3428: CALL_OW 25
3432: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3433: LD_ADDR_EXP 14
3437: PUSH
3438: LD_STRING Gaydar
3440: PPUSH
3441: CALL_OW 25
3445: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3446: LD_ADDR_EXP 15
3450: PUSH
3451: LD_STRING Vsevolod
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// for i = 1 to 16 do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_INT 16
3471: PUSH
3472: FOR_TO
3473: IFFALSE 3515
// begin PrepareSoldier ( 0 , game_eskill ) ;
3475: LD_INT 0
3477: PPUSH
3478: LD_EXP 39
3482: PPUSH
3483: CALL_OW 381
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_VAR 0 5
3511: ADD
3512: ST_TO_ADDR
// end ;
3513: GO 3472
3515: POP
3516: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_EXP 12
3526: PUSH
3527: LD_EXP 13
3531: ADD
3532: PUSH
3533: LD_EXP 14
3537: ADD
3538: PUSH
3539: LD_EXP 15
3543: ADD
3544: PUSH
3545: LD_VAR 0 4
3549: ADD
3550: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3551: LD_INT 24
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 46
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL 18357 0 5
// for i = 1 to 8 do
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_INT 8
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3667
// begin vehicle := CreateVehicle ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 3
3609: PPUSH
3610: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 4
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: DIFF
3633: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// vehs := vehs ^ vehicle ;
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 3
3663: ADD
3664: ST_TO_ADDR
// end ;
3665: GO 3583
3667: POP
3668: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3669: LD_INT 24
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 43
3680: PPUSH
3681: LD_INT 100
3683: PPUSH
3684: CALL 18357 0 5
// for i = 1 to 8 do
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: DOUBLE
3694: LD_INT 1
3696: DEC
3697: ST_TO_ADDR
3698: LD_INT 8
3700: PUSH
3701: FOR_TO
3702: IFFALSE 3785
// begin vehicle := CreateVehicle ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: DIFF
3751: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// vehs := vehs ^ vehicle ;
3767: LD_ADDR_VAR 0 6
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_VAR 0 3
3781: ADD
3782: ST_TO_ADDR
// end ;
3783: GO 3701
3785: POP
3786: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3787: LD_INT 22
3789: PPUSH
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_INT 44
3798: PPUSH
3799: LD_INT 100
3801: PPUSH
3802: CALL 18357 0 5
// for i = 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3903
// begin vehicle := CreateVehicle ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3832: LD_VAR 0 4
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: LD_VAR 0 3
3845: PPUSH
3846: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: DIFF
3869: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// vehs := vehs ^ vehicle ;
3885: LD_ADDR_VAR 0 6
3889: PUSH
3890: LD_VAR 0 6
3894: PUSH
3895: LD_VAR 0 3
3899: ADD
3900: ST_TO_ADDR
// end ;
3901: GO 3819
3903: POP
3904: POP
// RUArmada := vehs ;
3905: LD_ADDR_EXP 16
3909: PUSH
3910: LD_VAR 0 6
3914: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3915: LD_EXP 12
3919: PPUSH
3920: CALL_OW 310
3924: PUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 310
3934: PUSH
3935: LD_EXP 14
3939: PPUSH
3940: CALL_OW 310
3944: PUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 310
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: LD_INT 6
3963: NEG
3964: PPUSH
3965: CALL_OW 242
// end ;
3969: LD_VAR 0 1
3973: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 6 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 6
3986: ST_TO_ADDR
// uc_nation := nation_russian ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 3
3994: ST_TO_ADDR
// Bulldozers := [ ] ;
3995: LD_ADDR_EXP 17
3999: PUSH
4000: EMPTY
4001: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4002: LD_INT 24
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 53
4013: PPUSH
4014: LD_INT 100
4016: PPUSH
4017: CALL 18357 0 5
// for i = 1 to 2 do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: DOUBLE
4027: LD_INT 1
4029: DEC
4030: ST_TO_ADDR
4031: LD_INT 2
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4080
// begin vehicle := CreateVehicle ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 45
4046: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4062: LD_ADDR_EXP 17
4066: PUSH
4067: LD_EXP 17
4071: PUSH
4072: LD_VAR 0 3
4076: ADD
4077: ST_TO_ADDR
// end ;
4078: GO 4034
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// uc_side := 3 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// uc_nation := nation_russian ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_INT 3
4108: ST_TO_ADDR
// hc_name :=  ;
4109: LD_ADDR_OWVAR 26
4113: PUSH
4114: LD_STRING 
4116: ST_TO_ADDR
// hc_gallery :=  ;
4117: LD_ADDR_OWVAR 33
4121: PUSH
4122: LD_STRING 
4124: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4125: LD_ADDR_EXP 18
4129: PUSH
4130: LD_STRING Burlak
4132: PPUSH
4133: CALL_OW 25
4137: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4138: LD_ADDR_EXP 19
4142: PUSH
4143: LD_STRING Gleb
4145: PPUSH
4146: CALL_OW 25
4150: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4151: LD_ADDR_EXP 20
4155: PUSH
4156: LD_STRING Furmanov
4158: PPUSH
4159: CALL_OW 25
4163: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4164: LD_ADDR_EXP 21
4168: PUSH
4169: LD_STRING Titov
4171: PPUSH
4172: CALL_OW 25
4176: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4177: LD_ADDR_EXP 22
4181: PUSH
4182: LD_STRING Scholtze
4184: PPUSH
4185: CALL_OW 25
4189: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4190: LD_ADDR_EXP 23
4194: PUSH
4195: LD_STRING Dolgov
4197: PPUSH
4198: CALL_OW 25
4202: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4203: LD_ADDR_EXP 24
4207: PUSH
4208: LD_STRING Kapitsova
4210: PPUSH
4211: CALL_OW 25
4215: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4216: LD_ADDR_EXP 25
4220: PUSH
4221: LD_STRING Karamazov
4223: PPUSH
4224: CALL_OW 25
4228: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Kirlenkova
4236: PPUSH
4237: CALL_OW 25
4241: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4242: LD_ADDR_EXP 27
4246: PUSH
4247: LD_STRING Kovalyuk
4249: PPUSH
4250: CALL_OW 25
4254: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4255: LD_ADDR_EXP 28
4259: PUSH
4260: LD_STRING Kozlov
4262: PPUSH
4263: CALL_OW 25
4267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4268: LD_ADDR_EXP 29
4272: PUSH
4273: LD_STRING Kuzmov
4275: PPUSH
4276: CALL_OW 25
4280: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4281: LD_ADDR_EXP 30
4285: PUSH
4286: LD_STRING Lipshchin
4288: PPUSH
4289: CALL_OW 25
4293: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4294: LD_ADDR_EXP 31
4298: PUSH
4299: LD_STRING Oblukov
4301: PPUSH
4302: CALL_OW 25
4306: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_STRING Xavier2
4314: PPUSH
4315: CALL_OW 25
4319: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4320: LD_ADDR_EXP 33
4324: PUSH
4325: LD_STRING Gnyevko
4327: PPUSH
4328: CALL_OW 25
4332: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4333: LD_ADDR_EXP 34
4337: PUSH
4338: LD_STRING Belkov
4340: PPUSH
4341: CALL_OW 25
4345: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 18
4355: PUSH
4356: LD_EXP 19
4360: PUSH
4361: LD_EXP 20
4365: PUSH
4366: LD_EXP 21
4370: PUSH
4371: LD_EXP 22
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 24
4385: PUSH
4386: LD_EXP 25
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_EXP 27
4400: PUSH
4401: LD_EXP 28
4405: PUSH
4406: LD_EXP 29
4410: PUSH
4411: LD_EXP 30
4415: PUSH
4416: LD_EXP 31
4420: PUSH
4421: LD_EXP 32
4425: PUSH
4426: LD_EXP 33
4430: PUSH
4431: LD_EXP 34
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// for i = 1 to filter do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 6
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// for i = 1 to 8 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4597
// begin PrepareSoldier ( 0 , game_eskill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_EXP 39
4564: PPUSH
4565: CALL_OW 381
// un := CreateHuman ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 44
4578: ST_TO_ADDR
// filter := filter ^ un ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_VAR 0 4
4593: ADD
4594: ST_TO_ADDR
// end ;
4595: GO 4554
4597: POP
4598: POP
// for i = 1 to 4 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 4
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4655
// begin PrepareEngineer ( 0 , game_eskill ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_EXP 39
4622: PPUSH
4623: CALL_OW 382
// un := CreateHuman ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: CALL_OW 44
4636: ST_TO_ADDR
// filter := filter ^ un ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ADD
4652: ST_TO_ADDR
// end ;
4653: GO 4612
4655: POP
4656: POP
// for i = 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4713
// begin PrepareMechanic ( 0 , game_eskill ) ;
4673: LD_INT 0
4675: PPUSH
4676: LD_EXP 39
4680: PPUSH
4681: CALL_OW 383
// un := CreateHuman ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: CALL_OW 44
4694: ST_TO_ADDR
// filter := filter ^ un ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_VAR 0 4
4709: ADD
4710: ST_TO_ADDR
// end ;
4711: GO 4670
4713: POP
4714: POP
// for i = 1 to 4 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 4
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4771
// begin PrepareScientist ( 0 , game_eskill ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 384
// un := CreateHuman ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: CALL_OW 44
4752: ST_TO_ADDR
// filter := filter ^ un ;
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 4
4767: ADD
4768: ST_TO_ADDR
// end ;
4769: GO 4728
4771: POP
4772: POP
// for i = 1 to filter do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4791: LD_VAR 0 3
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// RU_SecondPersonnel := filter ;
4816: LD_ADDR_EXP 35
4820: PUSH
4821: LD_VAR 0 3
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 1
4830: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := nation_american ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4856: LD_ADDR_EXP 36
4860: PUSH
4861: LD_STRING JMM
4863: PPUSH
4864: CALL_OW 25
4868: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4869: LD_EXP 36
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4881: LD_EXP 36
4885: PPUSH
4886: LD_INT 7
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 49
// mechs := [ ] ;
4896: LD_ADDR_VAR 0 7
4900: PUSH
4901: EMPTY
4902: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_INT 4
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 4995
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4936: LD_INT 0
4938: PPUSH
4939: LD_EXP 38
4943: PUSH
4944: LD_INT 1
4946: PLUS
4947: PPUSH
4948: CALL_OW 381
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_VAR 0 4
4976: ADD
4977: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_INT 7
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// end ;
4993: GO 4933
4995: POP
4996: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 7
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5074
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 38
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: PPUSH
5042: CALL_OW 383
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// mechs := mechs ^ un ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_VAR 0 4
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 5027
5074: POP
5075: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 5
5087: PPUSH
5088: LD_INT 100
5090: PPUSH
5091: CALL 18357 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_INT 7
5107: PUSH
5108: LD_INT 6
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PUSH
5119: LD_OWVAR 67
5123: ARRAY
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5221
// begin vehicle := CreateVehicle ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: CALL_OW 45
5137: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5156: LD_ADDR_VAR 0 7
5160: PUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_VAR 0 7
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: DIFF
5175: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5188: LD_VAR 0 6
5192: PPUSH
5193: LD_INT 7
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// vehs := vehs ^ vehicle ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 6
5217: ADD
5218: ST_TO_ADDR
// end ;
5219: GO 5125
5221: POP
5222: POP
// end ; end_of_file
5223: LD_VAR 0 1
5227: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5228: LD_INT 0
5230: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5231: LD_ADDR_OWVAR 67
5235: PUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 426
5243: ST_TO_ADDR
// game_diff := Difficulty ;
5244: LD_ADDR_EXP 37
5248: PUSH
5249: LD_OWVAR 67
5253: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5254: LD_ADDR_EXP 38
5258: PUSH
5259: LD_INT 7
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 6
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 37
5277: ARRAY
5278: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5279: LD_ADDR_EXP 39
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: LD_INT 7
5289: PUSH
5290: LD_INT 8
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 37
5302: ARRAY
5303: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5304: LD_ADDR_EXP 41
5308: PUSH
5309: LD_INT 10500
5311: PUSH
5312: LD_INT 6300
5314: PUSH
5315: LD_INT 4200
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_EXP 37
5327: ARRAY
5328: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: LD_INT 73500
5336: PUSH
5337: LD_INT 94500
5339: PUSH
5340: LD_INT 115500
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_EXP 37
5352: ARRAY
5353: ST_TO_ADDR
// end ; end_of_file
5354: LD_VAR 0 1
5358: RET
// export function CustomEvent ( event ) ; begin
5359: LD_INT 0
5361: PPUSH
// end ;
5362: LD_VAR 0 2
5366: RET
// export function CustomInitMacro ( ) ; begin
5367: LD_INT 0
5369: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: CALL 79426 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL 79370 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 136
5395: PUSH
5396: LD_INT 130
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 145
5409: PUSH
5410: LD_INT 123
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 78429 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 43
5434: PUSH
5435: LD_INT 46
5437: PUSH
5438: LD_INT 45
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL 79258 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5450: LD_INT 1
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: CALL 78940 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: CALL 78671 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 8
5475: PPUSH
5476: CALL 78290 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 43
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 44
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 3
5527: PUSH
5528: LD_INT 45
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 24
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 43
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: LD_INT 43
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: LD_INT 46
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 43
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 44
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL 78105 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 0
5646: PUSH
5647: LD_INT 127
5649: PUSH
5650: LD_INT 125
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 124
5667: PUSH
5668: LD_INT 132
5670: PUSH
5671: LD_INT 0
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 29
5682: PUSH
5683: LD_INT 136
5685: PUSH
5686: LD_INT 130
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 4
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: LD_INT 114
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 145
5721: PUSH
5722: LD_INT 123
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 150
5739: PUSH
5740: LD_INT 135
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 140
5757: PUSH
5758: LD_INT 134
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 137
5775: PUSH
5776: LD_INT 121
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: LD_INT 155
5793: PUSH
5794: LD_INT 130
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: LD_INT 155
5811: PUSH
5812: LD_INT 130
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 130
5829: PUSH
5830: LD_INT 114
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 32
5844: PUSH
5845: LD_INT 142
5847: PUSH
5848: LD_INT 115
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 32
5862: PUSH
5863: LD_INT 153
5865: PUSH
5866: LD_INT 120
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL 77997 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5897: LD_INT 1
5899: PPUSH
5900: LD_INT 10
5902: PUSH
5903: LD_INT 12
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL 78847 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 155
5919: PPUSH
5920: LD_INT 130
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: LD_INT 24
5928: PUSH
5929: LD_INT 16
5931: PUSH
5932: LD_INT 17
5934: PUSH
5935: LD_INT 18
5937: PUSH
5938: LD_INT 21
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL 79052 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL 79426 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5962: LD_INT 2
5964: PPUSH
5965: LD_INT 4
5967: PPUSH
5968: CALL 79370 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 84
5977: PUSH
5978: LD_INT 125
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: PPUSH
5992: CALL 78429 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 43
6001: PUSH
6002: LD_INT 46
6004: PUSH
6005: LD_INT 45
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL 79258 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: CALL 78940 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL 78671 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL 78290 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_INT 43
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 44
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: LD_INT 45
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 43
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 43
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 24
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 46
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 43
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 44
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 78105 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 96
6216: PUSH
6217: LD_INT 125
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 74
6234: PUSH
6235: LD_INT 122
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 84
6252: PUSH
6253: LD_INT 125
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 28
6267: PUSH
6268: LD_INT 86
6270: PUSH
6271: LD_INT 128
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 28
6285: PUSH
6286: LD_INT 85
6288: PUSH
6289: LD_INT 130
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 88
6306: PUSH
6307: LD_INT 132
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 106
6324: PUSH
6325: LD_INT 130
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 99
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 72
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 78
6378: PUSH
6379: LD_INT 110
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 110
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 32
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL 77997 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 14
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL 78847 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 106
6467: PPUSH
6468: LD_INT 130
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: LD_INT 24
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 18
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 79052 0 5
// end ;
6500: LD_VAR 0 1
6504: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 30
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: IFFALSE 7389
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6546: LD_INT 6300
6548: PUSH
6549: LD_INT 4200
6551: PUSH
6552: LD_INT 2100
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: PPUSH
6566: CALL_OW 67
// base := 2 ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: NOT
6607: IFFALSE 6611
// continue ;
6609: GO 6546
// case Rand ( 1 , 3 ) of 1 :
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6806
6630: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 46
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 24
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 43
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 45
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 43
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 24
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 46
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL 78153 0 2
// end ; 2 :
6804: GO 7137
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6952
6814: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 43
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 46
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 24
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 43
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 46
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 45
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL 78153 0 2
// end ; 3 :
6950: GO 7137
6952: LD_INT 3
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7136
6960: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 43
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 24
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 46
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 43
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 46
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 45
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: LD_INT 43
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 46
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 3
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL 78153 0 2
// end ; end ;
7134: GO 7137
7136: POP
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7144: LD_VAR 0 2
7148: PPUSH
7149: CALL 78501 0 1
7153: PUSH
7154: LD_INT 0
7156: EQUAL
7157: IFFALSE 7137
// wait ( 0 0$30 ) ;
7159: LD_INT 1050
7161: PPUSH
7162: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 86
7173: PUSH
7174: LD_INT 77
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 63
7183: PUSH
7184: LD_INT 38
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_EXP 71
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PUSH
7258: LD_EXP 74
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: DIFF
7269: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7270: LD_ADDR_EXP 71
7274: PUSH
7275: LD_EXP 71
7279: PPUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_EXP 71
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 6
7300: DIFF
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// if not attackers then
7307: LD_VAR 0 6
7311: NOT
7312: IFFALSE 7316
// continue ;
7314: GO 6546
// repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_INT 60
7330: PUSH
7331: EMPTY
7332: LIST
7333: PPUSH
7334: CALL_OW 72
7338: NOT
7339: IFFALSE 7316
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL 78338 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7365: LD_EXP 52
7369: PUSH
7370: LD_VAR 0 2
7374: ARRAY
7375: PPUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 72
7386: NOT
7387: IFFALSE 6546
// end ;
7389: PPOPN 6
7391: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 8317
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7433: LD_INT 6300
7435: PUSH
7436: LD_INT 4200
7438: PUSH
7439: LD_INT 2100
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: LD_OWVAR 67
7451: ARRAY
7452: PPUSH
7453: CALL_OW 67
// base := 1 ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: NOT
7494: IFFALSE 7498
// continue ;
7496: GO 7433
// case Rand ( 1 , 3 ) of 1 :
7498: LD_INT 1
7500: PPUSH
7501: LD_INT 3
7503: PPUSH
7504: CALL_OW 12
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7693
7517: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 43
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 46
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 24
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 43
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 45
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 43
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 46
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 45
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL 78153 0 2
// end ; 2 :
7691: GO 8062
7693: LD_INT 2
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7877
7701: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_INT 46
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: LD_INT 46
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 45
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 45
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 45
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL 78153 0 2
// end ; 3 :
7875: GO 8062
7877: LD_INT 3
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8061
7885: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 43
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 46
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 22
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 43
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 45
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 43
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 45
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: CALL 78153 0 2
// end ; end ;
8059: GO 8062
8061: POP
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 79571 0 2
8081: PUSH
8082: LD_INT 8
8084: GREATEREQUAL
8085: IFFALSE 8062
// wait ( 0 0$30 ) ;
8087: LD_INT 1050
8089: PPUSH
8090: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8094: LD_ADDR_VAR 0 5
8098: PUSH
8099: LD_INT 144
8101: PUSH
8102: LD_INT 65
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 63
8111: PUSH
8112: LD_INT 38
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 0
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 71
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_EXP 74
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: DIFF
8197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8198: LD_ADDR_EXP 71
8202: PUSH
8203: LD_EXP 71
8207: PPUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_EXP 71
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 6
8228: DIFF
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// if not attackers then
8235: LD_VAR 0 6
8239: NOT
8240: IFFALSE 8244
// continue ;
8242: GO 7433
// repeat wait ( 0 0$1 ) ;
8244: LD_INT 35
8246: PPUSH
8247: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 60
8258: PUSH
8259: EMPTY
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: NOT
8267: IFFALSE 8244
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 6
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: LD_VAR 0 4
8288: PPUSH
8289: CALL 78338 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8293: LD_EXP 52
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 50
8306: PUSH
8307: EMPTY
8308: LIST
8309: PPUSH
8310: CALL_OW 72
8314: NOT
8315: IFFALSE 7433
// end ;
8317: PPOPN 6
8319: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8320: LD_EXP 3
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: LD_INT 0
8356: EQUAL
8357: AND
8358: IFFALSE 8371
8360: GO 8362
8362: DISABLE
// begin RussiansDefeated := true ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// end ;
8371: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8372: LD_EXP 3
8376: PUSH
8377: LD_EXP 5
8381: NOT
8382: AND
8383: IFFALSE 9356
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8402: LD_INT 10500
8404: PPUSH
8405: LD_INT 13650
8407: PPUSH
8408: CALL_OW 12
8412: PUSH
8413: LD_INT 9450
8415: PPUSH
8416: LD_INT 11550
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 8400
8426: PPUSH
8427: LD_INT 10500
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 67
// filter := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_INT 2
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 12
8472: PUSH
8473: LD_INT 3
8475: PPUSH
8476: LD_INT 4
8478: PPUSH
8479: CALL_OW 12
8483: PUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 12
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_OWVAR 67
8504: ARRAY
8505: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 3
8557: PPUSH
8558: CALL_OW 12
8562: PUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: CALL_OW 12
8573: PUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 5
8579: PPUSH
8580: CALL_OW 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: LD_OWVAR 67
8594: ARRAY
8595: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8596: LD_ADDR_VAR 0 8
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: ST_TO_ADDR
// uc_side := 3 ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
// uc_nation := nation_russian ;
8629: LD_ADDR_OWVAR 21
8633: PUSH
8634: LD_INT 3
8636: ST_TO_ADDR
// for i = 1 to soldiers do
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 4
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8695
// begin PrepareSoldier ( 0 , game_eskill ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_EXP 39
8662: PPUSH
8663: CALL_OW 381
// un := CreateHuman ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// filter := filter ^ un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8652
8695: POP
8696: POP
// for i = 1 to bazookas do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_VAR 0 5
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8763
// begin PrepareSoldier ( 0 , game_eskill ) ;
8715: LD_INT 0
8717: PPUSH
8718: LD_EXP 39
8722: PPUSH
8723: CALL_OW 381
// hc_class := class_bazooker ;
8727: LD_ADDR_OWVAR 28
8731: PUSH
8732: LD_INT 9
8734: ST_TO_ADDR
// un := CreateHuman ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// filter := filter ^ un ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8712
8763: POP
8764: POP
// for i = 1 to medics do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_VAR 0 8
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8823
// begin PrepareScientist ( 0 , game_eskill ) ;
8783: LD_INT 0
8785: PPUSH
8786: LD_EXP 39
8790: PPUSH
8791: CALL_OW 384
// un := CreateHuman ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: CALL_OW 44
8804: ST_TO_ADDR
// filter := filter ^ un ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_VAR 0 2
8819: ADD
8820: ST_TO_ADDR
// end ;
8821: GO 8780
8823: POP
8824: POP
// for i = 1 to vehs do
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_TO
8841: IFFALSE 9033
// begin case Rand ( 1 , 5 ) of 1 :
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 12
8853: PUSH
8854: LD_INT 1
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8884
8862: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8863: LD_INT 22
8865: PPUSH
8866: LD_INT 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 43
8874: PPUSH
8875: LD_INT 100
8877: PPUSH
8878: CALL 18357 0 5
8882: GO 9005
8884: LD_INT 2
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8914
8892: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8893: LD_INT 22
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: LD_INT 44
8904: PPUSH
8905: LD_INT 100
8907: PPUSH
8908: CALL 18357 0 5
8912: GO 9005
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8944
8922: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8923: LD_INT 22
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_INT 45
8934: PPUSH
8935: LD_INT 100
8937: PPUSH
8938: CALL 18357 0 5
8942: GO 9005
8944: LD_INT 4
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8974
8952: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8953: LD_INT 24
8955: PPUSH
8956: LD_INT 3
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: LD_INT 43
8964: PPUSH
8965: LD_INT 100
8967: PPUSH
8968: CALL 18357 0 5
8972: GO 9005
8974: LD_INT 5
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9004
8982: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: LD_INT 46
8994: PPUSH
8995: LD_INT 100
8997: PPUSH
8998: CALL 18357 0 5
9002: GO 9005
9004: POP
// vehicle := CreateVehicle ;
9005: LD_ADDR_VAR 0 7
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// filter := filter ^ vehicle ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 7
9029: ADD
9030: ST_TO_ADDR
// end ;
9031: GO 8840
9033: POP
9034: POP
// for i = 1 to filter do
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: DOUBLE
9041: LD_INT 1
9043: DEC
9044: ST_TO_ADDR
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9076
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 1
9062: ARRAY
9063: PPUSH
9064: LD_INT 14
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
9074: GO 9050
9076: POP
9077: POP
// case Rand ( 1 , 3 ) of 1 :
9078: LD_INT 1
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: CALL_OW 12
9088: PUSH
9089: LD_INT 1
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9151
9097: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9098: LD_ADDR_VAR 0 11
9102: PUSH
9103: LD_INT 165
9105: PUSH
9106: LD_INT 114
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 104
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 77
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 63
9135: PUSH
9136: LD_INT 38
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9276
9151: LD_INT 2
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9213
9159: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9160: LD_ADDR_VAR 0 11
9164: PUSH
9165: LD_INT 165
9167: PUSH
9168: LD_INT 114
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 146
9177: PUSH
9178: LD_INT 71
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 112
9187: PUSH
9188: LD_INT 41
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 63
9197: PUSH
9198: LD_INT 38
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
9211: GO 9276
9213: LD_INT 3
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9275
9221: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_INT 165
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 63
9239: PUSH
9240: LD_INT 99
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 77
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 63
9259: PUSH
9260: LD_INT 38
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9276
9275: POP
// attackers := filter ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9286: LD_ADDR_VAR 0 12
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: LD_VAR 0 11
9345: PPUSH
9346: LD_VAR 0 12
9350: PPUSH
9351: CALL 78338 0 4
// enable ;
9355: ENABLE
// end ;
9356: PPOPN 12
9358: END
// every 0 0$1 do var i , tmp ;
9359: GO 9361
9361: DISABLE
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
// begin enable ;
9366: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if tmp then
9408: LD_VAR 0 2
9412: IFFALSE 9458
// for i in tmp do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9456
// if GetFuel ( i ) < 3 then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 261
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9454
// SetFuel ( i , 3 ) ;
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 240
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: PPOPN 2
9460: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
9461: LD_INT 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: PUSH
9479: LD_EXP 40
9483: NOT
9484: AND
9485: PUSH
9486: LD_INT 10
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: PUSH
9504: LD_EXP 3
9508: NOT
9509: AND
9510: OR
9511: IFFALSE 9525
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
// begin Antirush ;
9521: CALL 9528 0 0
// end ;
9525: PPOPN 3
9527: END
// export function Antirush ; var i , veh , tmp , num ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// tmp := [ ] ;
9535: LD_ADDR_VAR 0 4
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// if not FirstAssaultRepelled then
9542: LD_EXP 3
9546: NOT
9547: IFFALSE 9559
// num := 18 else
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_INT 18
9556: ST_TO_ADDR
9557: GO 9567
// num := 12 ;
9559: LD_ADDR_VAR 0 5
9563: PUSH
9564: LD_INT 12
9566: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_OWVAR 67
9595: ARRAY
9596: MINUS
9597: ST_TO_ADDR
// for i := 1 to num do
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: DOUBLE
9604: LD_INT 1
9606: DEC
9607: ST_TO_ADDR
9608: LD_VAR 0 5
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9753
// begin uc_side := 3 ;
9616: LD_ADDR_OWVAR 20
9620: PUSH
9621: LD_INT 3
9623: ST_TO_ADDR
// uc_nation := 3 ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 3
9631: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9632: LD_INT 23
9634: PPUSH
9635: LD_INT 3
9637: PPUSH
9638: LD_INT 3
9640: PPUSH
9641: LD_INT 46
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_INT 2
9656: PPUSH
9657: CALL_OW 12
9661: ARRAY
9662: PPUSH
9663: LD_INT 100
9665: PPUSH
9666: CALL 18357 0 5
// veh := CreateVehicle ;
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: CALL_OW 45
9679: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 5
9687: PPUSH
9688: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 199
9699: PPUSH
9700: LD_INT 135
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: LD_INT 0
9708: PPUSH
9709: CALL_OW 50
// tmp := tmp ^ veh ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_VAR 0 4
9722: PUSH
9723: LD_VAR 0 3
9727: ADD
9728: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 173
9736: PPUSH
9737: LD_INT 118
9739: PPUSH
9740: CALL_OW 111
// wait ( 0 0$2 ) ;
9744: LD_INT 70
9746: PPUSH
9747: CALL_OW 67
// end ;
9751: GO 9613
9753: POP
9754: POP
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// for i in tmp do
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9840
// if IsDead ( i ) then
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 301
9784: IFFALSE 9804
// tmp := tmp diff i else
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: DIFF
9801: ST_TO_ADDR
9802: GO 9838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9804: LD_VAR 0 2
9808: PPUSH
9809: LD_INT 22
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PPUSH
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 74
9833: PPUSH
9834: CALL_OW 115
9838: GO 9772
9840: POP
9841: POP
// until not tmp ;
9842: LD_VAR 0 4
9846: NOT
9847: IFFALSE 9755
// end ; end_of_file
9849: LD_VAR 0 1
9853: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 8
9863: EQUAL
9864: IFFALSE 9880
// begin wait ( 0 0$1 ) ;
9866: LD_INT 35
9868: PPUSH
9869: CALL_OW 67
// YouLost ( Brighton ) ;
9873: LD_STRING Brighton
9875: PPUSH
9876: CALL_OW 104
// end ; if un = JMM then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_EXP 36
9889: EQUAL
9890: IFFALSE 9906
// begin wait ( 0 0$1 ) ;
9892: LD_INT 35
9894: PPUSH
9895: CALL_OW 67
// YouLost ( JMM ) ;
9899: LD_STRING JMM
9901: PPUSH
9902: CALL_OW 104
// end ; if un = Megan then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_EXP 10
9915: EQUAL
9916: IFFALSE 9930
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9918: LD_EXP 8
9922: PPUSH
9923: LD_STRING DBrighton-MeganDeath
9925: PPUSH
9926: CALL_OW 88
// end ; if un = Palmer then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_EXP 9
9939: EQUAL
9940: IFFALSE 9954
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9942: LD_EXP 8
9946: PPUSH
9947: LD_STRING DBrighton-PalmerDeath
9949: PPUSH
9950: CALL_OW 88
// end ; if un = Burlak then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_EXP 18
9963: EQUAL
9964: IFFALSE 9996
// begin if JMM_Arrived then
9966: LD_EXP 5
9970: IFFALSE 9984
// Say ( JMM , DJMM-BurlakDead ) ;
9972: LD_EXP 36
9976: PPUSH
9977: LD_STRING DJMM-BurlakDead
9979: PPUSH
9980: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9984: LD_EXP 9
9988: PPUSH
9989: LD_STRING DSol-BurlakDead
9991: PPUSH
9992: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9996: LD_VAR 0 1
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: OR
10014: IFFALSE 10030
// begin wait ( 0 0$1 ) ;
10016: LD_INT 35
10018: PPUSH
10019: CALL_OW 67
// YouLost ( Depot ) ;
10023: LD_STRING Depot
10025: PPUSH
10026: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10030: LD_VAR 0 1
10034: PPUSH
10035: CALL_OW 255
10039: PUSH
10040: LD_INT 1
10042: EQUAL
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 247
10053: PUSH
10054: LD_INT 1
10056: EQUAL
10057: AND
10058: IFFALSE 10074
// Losses := Losses + 1 ;
10060: LD_ADDR_EXP 43
10064: PUSH
10065: LD_EXP 43
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL 81545 0 1
// end ;
10083: PPOPN 1
10085: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10086: LD_VAR 0 1
10090: PUSH
10091: LD_EXP 12
10095: EQUAL
10096: IFFALSE 10110
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10098: LD_EXP 12
10102: PPUSH
10103: LD_STRING DDeath-Yas-3
10105: PPUSH
10106: CALL_OW 91
// if un = Popov then
10110: LD_VAR 0 1
10114: PUSH
10115: LD_EXP 13
10119: EQUAL
10120: IFFALSE 10134
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10122: LD_EXP 13
10126: PPUSH
10127: LD_STRING DDeath-Pop-3
10129: PPUSH
10130: CALL_OW 91
// if un = Gaydar then
10134: LD_VAR 0 1
10138: PUSH
10139: LD_EXP 14
10143: EQUAL
10144: IFFALSE 10158
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10146: LD_EXP 14
10150: PPUSH
10151: LD_STRING DDeath-Gay-3
10153: PPUSH
10154: CALL_OW 91
// if un = Sevi then
10158: LD_VAR 0 1
10162: PUSH
10163: LD_EXP 15
10167: EQUAL
10168: IFFALSE 10182
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10170: LD_EXP 15
10174: PPUSH
10175: LD_STRING DDeath-Vse-3
10177: PPUSH
10178: CALL_OW 91
// end ;
10182: PPOPN 1
10184: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 10
10192: EQUAL
10193: IFFALSE 10231
// begin Say ( Brighton , DBrighton-C1 ) ;
10195: LD_EXP 8
10199: PPUSH
10200: LD_STRING DBrighton-C1
10202: PPUSH
10203: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10207: LD_EXP 10
10211: PPUSH
10212: LD_STRING DMegan-C1
10214: PPUSH
10215: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10219: LD_EXP 8
10223: PPUSH
10224: LD_STRING DBrighton-C2
10226: PPUSH
10227: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10231: LD_VAR 0 1
10235: PPUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL 81241 0 2
// end ;
10245: PPOPN 2
10247: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL 83879 0 2
// end ;
10262: PPOPN 2
10264: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL 82947 0 1
// end ;
10274: PPOPN 1
10276: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10277: LD_VAR 0 1
10281: PPUSH
10282: CALL_OW 266
10286: PUSH
10287: LD_INT 0
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10367
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 274
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 10000
10322: PPUSH
10323: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 274
10336: PPUSH
10337: LD_INT 2
10339: PPUSH
10340: LD_INT 250
10342: PPUSH
10343: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 274
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: LD_INT 100
10362: PPUSH
10363: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL 83188 0 1
// end ;
10376: PPOPN 1
10378: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: LD_VAR 0 5
10403: PPUSH
10404: CALL 80861 0 5
// end ;
10408: PPOPN 5
10410: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL 80457 0 2
// end ;
10425: PPOPN 2
10427: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 80295 0 4
// end ;
10452: PPOPN 4
10454: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: CALL 80070 0 3
// end ;
10474: PPOPN 3
10476: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL 79955 0 2
// end ;
10491: PPOPN 2
10493: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_VAR 0 2
10503: PPUSH
10504: CALL 84140 0 2
// end ;
10508: PPOPN 2
10510: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: LD_INT 6
10523: EQUAL
10524: IFFALSE 10654
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10526: LD_VAR 0 1
10530: PUSH
10531: LD_EXP 12
10535: PUSH
10536: LD_EXP 15
10540: PUSH
10541: LD_EXP 14
10545: PUSH
10546: LD_EXP 13
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: IN
10557: IFFALSE 10561
// exit ;
10559: GO 10678
// if AssaultStarted then
10561: LD_EXP 7
10565: IFFALSE 10639
// case Rand ( 1 , 4 ) of 1 .. 3 :
10567: LD_INT 1
10569: PPUSH
10570: LD_INT 4
10572: PPUSH
10573: CALL_OW 12
10577: PUSH
10578: LD_INT 1
10580: DOUBLE
10581: GREATEREQUAL
10582: IFFALSE 10590
10584: LD_INT 3
10586: DOUBLE
10587: LESSEQUAL
10588: IFTRUE 10592
10590: GO 10610
10592: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_INT 67
10600: PPUSH
10601: LD_INT 37
10603: PPUSH
10604: CALL_OW 114
10608: GO 10637
10610: LD_INT 4
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10636
10618: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 120
10626: PPUSH
10627: LD_INT 131
10629: PPUSH
10630: CALL_OW 111
10634: GO 10637
10636: POP
10637: GO 10654
// ComMoveXY ( driver , 120 , 131 ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_INT 120
10646: PPUSH
10647: LD_INT 131
10649: PPUSH
10650: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: CALL 84356 0 4
// end ;
10678: PPOPN 4
10680: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL 79764 0 2
// end ;
10695: PPOPN 2
10697: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL 95442 0 1
// end ; end_of_file
10707: PPOPN 1
10709: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10710: LD_EXP 5
10714: PUSH
10715: LD_EXP 42
10719: AND
10720: IFFALSE 10891
10722: GO 10724
10724: DISABLE
// begin wait ( 0 0$2 ) ;
10725: LD_INT 70
10727: PPUSH
10728: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10732: LD_EXP 8
10736: PPUSH
10737: LD_STRING DBrighton-G1
10739: PPUSH
10740: CALL_OW 88
// if Losses < 1 then
10744: LD_EXP 43
10748: PUSH
10749: LD_INT 1
10751: LESS
10752: IFFALSE 10766
// AddMedal ( Losses , 1 ) else
10754: LD_STRING Losses
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 101
10764: GO 10799
// if Losses < 5 then
10766: LD_EXP 43
10770: PUSH
10771: LD_INT 5
10773: LESS
10774: IFFALSE 10788
// AddMedal ( Losses , 2 ) else
10776: LD_STRING Losses
10778: PPUSH
10779: LD_INT 2
10781: PPUSH
10782: CALL_OW 101
10786: GO 10799
// AddMedal ( Losses , - 1 ) ;
10788: LD_STRING Losses
10790: PPUSH
10791: LD_INT 1
10793: NEG
10794: PPUSH
10795: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10799: LD_EXP 6
10803: PUSH
10804: LD_INT 10
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 321
10814: PUSH
10815: LD_INT 2
10817: EQUAL
10818: AND
10819: IFFALSE 10833
// AddMedal ( Laser , 1 ) else
10821: LD_STRING Laser
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
10831: GO 10880
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10833: LD_EXP 6
10837: NOT
10838: PUSH
10839: LD_INT 10
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 321
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: AND
10854: IFFALSE 10869
// AddMedal ( Laser , - 1 ) else
10856: LD_STRING Laser
10858: PPUSH
10859: LD_INT 1
10861: NEG
10862: PPUSH
10863: CALL_OW 101
10867: GO 10880
// AddMedal ( Laser , - 2 ) ;
10869: LD_STRING Laser
10871: PPUSH
10872: LD_INT 2
10874: NEG
10875: PPUSH
10876: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10880: LD_STRING BaseMain
10882: PPUSH
10883: CALL_OW 102
// YouWin ;
10887: CALL_OW 103
// end ; end_of_file
10891: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// area = ListEnvironmentArea ( area ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_VAR 0 2
10905: PPUSH
10906: CALL_OW 353
10910: ST_TO_ADDR
// if bulldozer > 0 then
10911: LD_VAR 0 1
10915: PUSH
10916: LD_INT 0
10918: GREATER
10919: IFFALSE 11030
// for i = area downto 1 do
10921: LD_ADDR_VAR 0 4
10925: PUSH
10926: DOUBLE
10927: LD_VAR 0 2
10931: INC
10932: ST_TO_ADDR
10933: LD_INT 1
10935: PUSH
10936: FOR_DOWNTO
10937: IFFALSE 11028
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10939: LD_VAR 0 2
10943: PUSH
10944: LD_VAR 0 4
10948: ARRAY
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 2
10958: PUSH
10959: LD_VAR 0 4
10963: ARRAY
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: CALL_OW 351
10973: IFFALSE 11026
// if not HasTask ( bulldozer ) then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 314
10984: NOT
10985: IFFALSE 11026
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 4
11001: ARRAY
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PPUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_VAR 0 4
11016: ARRAY
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: CALL_OW 171
11026: GO 10936
11028: POP
11029: POP
// end ;
11030: LD_VAR 0 3
11034: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
11035: LD_INT 0
11037: PPUSH
11038: PPUSH
11039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_VAR 0 2
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 517
11057: ST_TO_ADDR
// for i = 1 to team do
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 1
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11175
// begin if IsInUnit ( team [ i ] ) then
11076: LD_VAR 0 1
11080: PUSH
11081: LD_VAR 0 4
11085: ARRAY
11086: PPUSH
11087: CALL_OW 310
11091: IFFALSE 11108
// ComExitBuilding ( team [ i ] ) ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_VAR 0 4
11102: ARRAY
11103: PPUSH
11104: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11108: LD_VAR 0 1
11112: PUSH
11113: LD_VAR 0 4
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 5
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PUSH
11128: LD_VAR 0 4
11132: ARRAY
11133: PPUSH
11134: LD_VAR 0 5
11138: PUSH
11139: LD_INT 2
11141: ARRAY
11142: PUSH
11143: LD_VAR 0 4
11147: ARRAY
11148: PPUSH
11149: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11153: LD_VAR 0 1
11157: PUSH
11158: LD_VAR 0 4
11162: ARRAY
11163: PPUSH
11164: LD_EXP 8
11168: PPUSH
11169: CALL_OW 179
// end ;
11173: GO 11073
11175: POP
11176: POP
// end ; end_of_file
11177: LD_VAR 0 3
11181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11182: LD_INT 0
11184: PPUSH
11185: PPUSH
// if exist_mode then
11186: LD_VAR 0 2
11190: IFFALSE 11215
// unit := CreateCharacter ( prefix & ident ) else
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 1
11206: STR
11207: PPUSH
11208: CALL_OW 34
11212: ST_TO_ADDR
11213: GO 11230
// unit := NewCharacter ( ident ) ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 25
11229: ST_TO_ADDR
// result := unit ;
11230: LD_ADDR_VAR 0 4
11234: PUSH
11235: LD_VAR 0 5
11239: ST_TO_ADDR
// end ;
11240: LD_VAR 0 4
11244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
// if not side or not nation then
11249: LD_VAR 0 1
11253: NOT
11254: PUSH
11255: LD_VAR 0 2
11259: NOT
11260: OR
11261: IFFALSE 11265
// exit ;
11263: GO 11969
// case nation of nation_american :
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11472
11278: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_INT 35
11286: PUSH
11287: LD_INT 45
11289: PUSH
11290: LD_INT 46
11292: PUSH
11293: LD_INT 47
11295: PUSH
11296: LD_INT 82
11298: PUSH
11299: LD_INT 83
11301: PUSH
11302: LD_INT 84
11304: PUSH
11305: LD_INT 85
11307: PUSH
11308: LD_INT 86
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 6
11319: PUSH
11320: LD_INT 15
11322: PUSH
11323: LD_INT 16
11325: PUSH
11326: LD_INT 7
11328: PUSH
11329: LD_INT 12
11331: PUSH
11332: LD_INT 13
11334: PUSH
11335: LD_INT 10
11337: PUSH
11338: LD_INT 14
11340: PUSH
11341: LD_INT 20
11343: PUSH
11344: LD_INT 21
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_INT 25
11352: PUSH
11353: LD_INT 32
11355: PUSH
11356: LD_INT 27
11358: PUSH
11359: LD_INT 36
11361: PUSH
11362: LD_INT 69
11364: PUSH
11365: LD_INT 39
11367: PUSH
11368: LD_INT 34
11370: PUSH
11371: LD_INT 40
11373: PUSH
11374: LD_INT 48
11376: PUSH
11377: LD_INT 49
11379: PUSH
11380: LD_INT 50
11382: PUSH
11383: LD_INT 51
11385: PUSH
11386: LD_INT 52
11388: PUSH
11389: LD_INT 53
11391: PUSH
11392: LD_INT 54
11394: PUSH
11395: LD_INT 55
11397: PUSH
11398: LD_INT 56
11400: PUSH
11401: LD_INT 57
11403: PUSH
11404: LD_INT 58
11406: PUSH
11407: LD_INT 59
11409: PUSH
11410: LD_INT 60
11412: PUSH
11413: LD_INT 61
11415: PUSH
11416: LD_INT 62
11418: PUSH
11419: LD_INT 80
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
11470: GO 11893
11472: LD_INT 2
11474: DOUBLE
11475: EQUAL
11476: IFTRUE 11480
11478: GO 11682
11480: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_INT 35
11488: PUSH
11489: LD_INT 45
11491: PUSH
11492: LD_INT 46
11494: PUSH
11495: LD_INT 47
11497: PUSH
11498: LD_INT 82
11500: PUSH
11501: LD_INT 83
11503: PUSH
11504: LD_INT 84
11506: PUSH
11507: LD_INT 85
11509: PUSH
11510: LD_INT 87
11512: PUSH
11513: LD_INT 70
11515: PUSH
11516: LD_INT 1
11518: PUSH
11519: LD_INT 11
11521: PUSH
11522: LD_INT 3
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: LD_INT 5
11530: PUSH
11531: LD_INT 6
11533: PUSH
11534: LD_INT 15
11536: PUSH
11537: LD_INT 18
11539: PUSH
11540: LD_INT 7
11542: PUSH
11543: LD_INT 17
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: LD_INT 20
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 22
11557: PUSH
11558: LD_INT 72
11560: PUSH
11561: LD_INT 26
11563: PUSH
11564: LD_INT 69
11566: PUSH
11567: LD_INT 39
11569: PUSH
11570: LD_INT 40
11572: PUSH
11573: LD_INT 41
11575: PUSH
11576: LD_INT 42
11578: PUSH
11579: LD_INT 43
11581: PUSH
11582: LD_INT 48
11584: PUSH
11585: LD_INT 49
11587: PUSH
11588: LD_INT 50
11590: PUSH
11591: LD_INT 51
11593: PUSH
11594: LD_INT 52
11596: PUSH
11597: LD_INT 53
11599: PUSH
11600: LD_INT 54
11602: PUSH
11603: LD_INT 55
11605: PUSH
11606: LD_INT 56
11608: PUSH
11609: LD_INT 60
11611: PUSH
11612: LD_INT 61
11614: PUSH
11615: LD_INT 62
11617: PUSH
11618: LD_INT 66
11620: PUSH
11621: LD_INT 67
11623: PUSH
11624: LD_INT 68
11626: PUSH
11627: LD_INT 81
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: ST_TO_ADDR
11680: GO 11893
11682: LD_INT 3
11684: DOUBLE
11685: EQUAL
11686: IFTRUE 11690
11688: GO 11892
11690: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11691: LD_ADDR_VAR 0 4
11695: PUSH
11696: LD_INT 46
11698: PUSH
11699: LD_INT 47
11701: PUSH
11702: LD_INT 1
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 82
11710: PUSH
11711: LD_INT 83
11713: PUSH
11714: LD_INT 84
11716: PUSH
11717: LD_INT 85
11719: PUSH
11720: LD_INT 86
11722: PUSH
11723: LD_INT 11
11725: PUSH
11726: LD_INT 9
11728: PUSH
11729: LD_INT 20
11731: PUSH
11732: LD_INT 19
11734: PUSH
11735: LD_INT 21
11737: PUSH
11738: LD_INT 24
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 28
11749: PUSH
11750: LD_INT 29
11752: PUSH
11753: LD_INT 30
11755: PUSH
11756: LD_INT 31
11758: PUSH
11759: LD_INT 37
11761: PUSH
11762: LD_INT 38
11764: PUSH
11765: LD_INT 32
11767: PUSH
11768: LD_INT 27
11770: PUSH
11771: LD_INT 33
11773: PUSH
11774: LD_INT 69
11776: PUSH
11777: LD_INT 39
11779: PUSH
11780: LD_INT 34
11782: PUSH
11783: LD_INT 40
11785: PUSH
11786: LD_INT 71
11788: PUSH
11789: LD_INT 23
11791: PUSH
11792: LD_INT 44
11794: PUSH
11795: LD_INT 48
11797: PUSH
11798: LD_INT 49
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: LD_INT 51
11806: PUSH
11807: LD_INT 52
11809: PUSH
11810: LD_INT 53
11812: PUSH
11813: LD_INT 54
11815: PUSH
11816: LD_INT 55
11818: PUSH
11819: LD_INT 56
11821: PUSH
11822: LD_INT 57
11824: PUSH
11825: LD_INT 58
11827: PUSH
11828: LD_INT 59
11830: PUSH
11831: LD_INT 63
11833: PUSH
11834: LD_INT 64
11836: PUSH
11837: LD_INT 65
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: ST_TO_ADDR
11890: GO 11893
11892: POP
// if state > - 1 and state < 3 then
11893: LD_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: NEG
11901: GREATER
11902: PUSH
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 3
11910: LESS
11911: AND
11912: IFFALSE 11969
// for i in result do
11914: LD_ADDR_VAR 0 5
11918: PUSH
11919: LD_VAR 0 4
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11967
// if GetTech ( i , side ) <> state then
11927: LD_VAR 0 5
11931: PPUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 321
11941: PUSH
11942: LD_VAR 0 3
11946: NONEQUAL
11947: IFFALSE 11965
// result := result diff i ;
11949: LD_ADDR_VAR 0 4
11953: PUSH
11954: LD_VAR 0 4
11958: PUSH
11959: LD_VAR 0 5
11963: DIFF
11964: ST_TO_ADDR
11965: GO 11924
11967: POP
11968: POP
// end ;
11969: LD_VAR 0 4
11973: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11974: LD_INT 0
11976: PPUSH
11977: PPUSH
11978: PPUSH
// result := true ;
11979: LD_ADDR_VAR 0 3
11983: PUSH
11984: LD_INT 1
11986: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_VAR 0 2
11996: PPUSH
11997: CALL_OW 480
12001: ST_TO_ADDR
// if not tmp then
12002: LD_VAR 0 5
12006: NOT
12007: IFFALSE 12011
// exit ;
12009: GO 12060
// for i in tmp do
12011: LD_ADDR_VAR 0 4
12015: PUSH
12016: LD_VAR 0 5
12020: PUSH
12021: FOR_IN
12022: IFFALSE 12058
// if GetTech ( i , side ) <> state_researched then
12024: LD_VAR 0 4
12028: PPUSH
12029: LD_VAR 0 1
12033: PPUSH
12034: CALL_OW 321
12038: PUSH
12039: LD_INT 2
12041: NONEQUAL
12042: IFFALSE 12056
// begin result := false ;
12044: LD_ADDR_VAR 0 3
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// exit ;
12052: POP
12053: POP
12054: GO 12060
// end ;
12056: GO 12021
12058: POP
12059: POP
// end ;
12060: LD_VAR 0 3
12064: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12065: LD_INT 0
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12080: LD_VAR 0 1
12084: NOT
12085: PUSH
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 257
12095: PUSH
12096: LD_INT 9
12098: NONEQUAL
12099: OR
12100: IFFALSE 12104
// exit ;
12102: GO 12677
// side := GetSide ( unit ) ;
12104: LD_ADDR_VAR 0 9
12108: PUSH
12109: LD_VAR 0 1
12113: PPUSH
12114: CALL_OW 255
12118: ST_TO_ADDR
// tech_space := tech_spacanom ;
12119: LD_ADDR_VAR 0 12
12123: PUSH
12124: LD_INT 29
12126: ST_TO_ADDR
// tech_time := tech_taurad ;
12127: LD_ADDR_VAR 0 13
12131: PUSH
12132: LD_INT 28
12134: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12135: LD_ADDR_VAR 0 11
12139: PUSH
12140: LD_VAR 0 1
12144: PPUSH
12145: CALL_OW 310
12149: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12150: LD_VAR 0 11
12154: PPUSH
12155: CALL_OW 247
12159: PUSH
12160: LD_INT 2
12162: EQUAL
12163: IFFALSE 12167
// exit ;
12165: GO 12677
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12167: LD_ADDR_VAR 0 8
12171: PUSH
12172: LD_INT 81
12174: PUSH
12175: LD_VAR 0 9
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: LD_INT 21
12189: PUSH
12190: LD_INT 3
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 69
12209: ST_TO_ADDR
// if not tmp then
12210: LD_VAR 0 8
12214: NOT
12215: IFFALSE 12219
// exit ;
12217: GO 12677
// if in_unit then
12219: LD_VAR 0 11
12223: IFFALSE 12247
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12225: LD_ADDR_VAR 0 10
12229: PUSH
12230: LD_VAR 0 8
12234: PPUSH
12235: LD_VAR 0 11
12239: PPUSH
12240: CALL_OW 74
12244: ST_TO_ADDR
12245: GO 12267
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12247: LD_ADDR_VAR 0 10
12251: PUSH
12252: LD_VAR 0 8
12256: PPUSH
12257: LD_VAR 0 1
12261: PPUSH
12262: CALL_OW 74
12266: ST_TO_ADDR
// if not enemy then
12267: LD_VAR 0 10
12271: NOT
12272: IFFALSE 12276
// exit ;
12274: GO 12677
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12276: LD_VAR 0 11
12280: PUSH
12281: LD_VAR 0 11
12285: PPUSH
12286: LD_VAR 0 10
12290: PPUSH
12291: CALL_OW 296
12295: PUSH
12296: LD_INT 13
12298: GREATER
12299: AND
12300: PUSH
12301: LD_VAR 0 1
12305: PPUSH
12306: LD_VAR 0 10
12310: PPUSH
12311: CALL_OW 296
12315: PUSH
12316: LD_INT 12
12318: GREATER
12319: OR
12320: IFFALSE 12324
// exit ;
12322: GO 12677
// missile := [ 1 ] ;
12324: LD_ADDR_VAR 0 14
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12335: LD_VAR 0 9
12339: PPUSH
12340: LD_VAR 0 12
12344: PPUSH
12345: CALL_OW 325
12349: IFFALSE 12378
// missile := Insert ( missile , missile + 1 , 2 ) ;
12351: LD_ADDR_VAR 0 14
12355: PUSH
12356: LD_VAR 0 14
12360: PPUSH
12361: LD_VAR 0 14
12365: PUSH
12366: LD_INT 1
12368: PLUS
12369: PPUSH
12370: LD_INT 2
12372: PPUSH
12373: CALL_OW 2
12377: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12378: LD_VAR 0 9
12382: PPUSH
12383: LD_VAR 0 13
12387: PPUSH
12388: CALL_OW 325
12392: PUSH
12393: LD_VAR 0 10
12397: PPUSH
12398: CALL_OW 255
12402: PPUSH
12403: LD_VAR 0 13
12407: PPUSH
12408: CALL_OW 325
12412: NOT
12413: AND
12414: IFFALSE 12443
// missile := Insert ( missile , missile + 1 , 3 ) ;
12416: LD_ADDR_VAR 0 14
12420: PUSH
12421: LD_VAR 0 14
12425: PPUSH
12426: LD_VAR 0 14
12430: PUSH
12431: LD_INT 1
12433: PLUS
12434: PPUSH
12435: LD_INT 3
12437: PPUSH
12438: CALL_OW 2
12442: ST_TO_ADDR
// if missile < 2 then
12443: LD_VAR 0 14
12447: PUSH
12448: LD_INT 2
12450: LESS
12451: IFFALSE 12455
// exit ;
12453: GO 12677
// x := GetX ( enemy ) ;
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: LD_VAR 0 10
12464: PPUSH
12465: CALL_OW 250
12469: ST_TO_ADDR
// y := GetY ( enemy ) ;
12470: LD_ADDR_VAR 0 5
12474: PUSH
12475: LD_VAR 0 10
12479: PPUSH
12480: CALL_OW 251
12484: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12485: LD_ADDR_VAR 0 6
12489: PUSH
12490: LD_VAR 0 4
12494: PUSH
12495: LD_INT 1
12497: NEG
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 12
12506: PLUS
12507: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12508: LD_ADDR_VAR 0 7
12512: PUSH
12513: LD_VAR 0 5
12517: PUSH
12518: LD_INT 1
12520: NEG
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 12
12529: PLUS
12530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12531: LD_VAR 0 6
12535: PPUSH
12536: LD_VAR 0 7
12540: PPUSH
12541: CALL_OW 488
12545: NOT
12546: IFFALSE 12568
// begin _x := x ;
12548: LD_ADDR_VAR 0 6
12552: PUSH
12553: LD_VAR 0 4
12557: ST_TO_ADDR
// _y := y ;
12558: LD_ADDR_VAR 0 7
12562: PUSH
12563: LD_VAR 0 5
12567: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12568: LD_ADDR_VAR 0 3
12572: PUSH
12573: LD_INT 1
12575: PPUSH
12576: LD_VAR 0 14
12580: PPUSH
12581: CALL_OW 12
12585: ST_TO_ADDR
// case i of 1 :
12586: LD_VAR 0 3
12590: PUSH
12591: LD_INT 1
12593: DOUBLE
12594: EQUAL
12595: IFTRUE 12599
12597: GO 12616
12599: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_VAR 0 10
12609: PPUSH
12610: CALL_OW 115
12614: GO 12677
12616: LD_INT 2
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 12646
12624: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_VAR 0 6
12634: PPUSH
12635: LD_VAR 0 7
12639: PPUSH
12640: CALL_OW 153
12644: GO 12677
12646: LD_INT 3
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12676
12654: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12655: LD_VAR 0 1
12659: PPUSH
12660: LD_VAR 0 6
12664: PPUSH
12665: LD_VAR 0 7
12669: PPUSH
12670: CALL_OW 154
12674: GO 12677
12676: POP
// end ;
12677: LD_VAR 0 2
12681: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12682: LD_INT 0
12684: PPUSH
12685: PPUSH
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
// if not unit or not building then
12690: LD_VAR 0 1
12694: NOT
12695: PUSH
12696: LD_VAR 0 2
12700: NOT
12701: OR
12702: IFFALSE 12706
// exit ;
12704: GO 12864
// x := GetX ( building ) ;
12706: LD_ADDR_VAR 0 5
12710: PUSH
12711: LD_VAR 0 2
12715: PPUSH
12716: CALL_OW 250
12720: ST_TO_ADDR
// y := GetY ( building ) ;
12721: LD_ADDR_VAR 0 6
12725: PUSH
12726: LD_VAR 0 2
12730: PPUSH
12731: CALL_OW 251
12735: ST_TO_ADDR
// for i = 0 to 5 do
12736: LD_ADDR_VAR 0 4
12740: PUSH
12741: DOUBLE
12742: LD_INT 0
12744: DEC
12745: ST_TO_ADDR
12746: LD_INT 5
12748: PUSH
12749: FOR_TO
12750: IFFALSE 12862
// begin _x := ShiftX ( x , i , 3 ) ;
12752: LD_ADDR_VAR 0 7
12756: PUSH
12757: LD_VAR 0 5
12761: PPUSH
12762: LD_VAR 0 4
12766: PPUSH
12767: LD_INT 3
12769: PPUSH
12770: CALL_OW 272
12774: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12775: LD_ADDR_VAR 0 8
12779: PUSH
12780: LD_VAR 0 6
12784: PPUSH
12785: LD_VAR 0 4
12789: PPUSH
12790: LD_INT 3
12792: PPUSH
12793: CALL_OW 273
12797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12798: LD_VAR 0 7
12802: PPUSH
12803: LD_VAR 0 8
12807: PPUSH
12808: CALL_OW 488
12812: NOT
12813: IFFALSE 12817
// continue ;
12815: GO 12749
// if HexInfo ( _x , _y ) = 0 then
12817: LD_VAR 0 7
12821: PPUSH
12822: LD_VAR 0 8
12826: PPUSH
12827: CALL_OW 428
12831: PUSH
12832: LD_INT 0
12834: EQUAL
12835: IFFALSE 12860
// begin ComMoveXY ( unit , _x , _y ) ;
12837: LD_VAR 0 1
12841: PPUSH
12842: LD_VAR 0 7
12846: PPUSH
12847: LD_VAR 0 8
12851: PPUSH
12852: CALL_OW 111
// exit ;
12856: POP
12857: POP
12858: GO 12864
// end ; end ;
12860: GO 12749
12862: POP
12863: POP
// end ;
12864: LD_VAR 0 3
12868: RET
// export function ScanBase ( side , base_area ) ; begin
12869: LD_INT 0
12871: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12872: LD_ADDR_VAR 0 3
12876: PUSH
12877: LD_VAR 0 2
12881: PPUSH
12882: LD_INT 81
12884: PUSH
12885: LD_VAR 0 1
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PPUSH
12894: CALL_OW 70
12898: ST_TO_ADDR
// end ;
12899: LD_VAR 0 3
12903: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12904: LD_INT 0
12906: PPUSH
12907: PPUSH
12908: PPUSH
12909: PPUSH
12910: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12911: LD_VAR 0 1
12915: NOT
12916: PUSH
12917: LD_EXP 52
12921: PUSH
12922: LD_VAR 0 1
12926: ARRAY
12927: NOT
12928: OR
12929: PUSH
12930: LD_VAR 0 2
12934: NOT
12935: OR
12936: PUSH
12937: LD_VAR 0 3
12941: NOT
12942: OR
12943: IFFALSE 12947
// exit ;
12945: GO 13460
// side := mc_sides [ base ] ;
12947: LD_ADDR_VAR 0 6
12951: PUSH
12952: LD_EXP 78
12956: PUSH
12957: LD_VAR 0 1
12961: ARRAY
12962: ST_TO_ADDR
// if not side then
12963: LD_VAR 0 6
12967: NOT
12968: IFFALSE 12972
// exit ;
12970: GO 13460
// for i in solds do
12972: LD_ADDR_VAR 0 7
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: FOR_IN
12983: IFFALSE 13044
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12985: LD_VAR 0 7
12989: PPUSH
12990: CALL_OW 310
12994: PPUSH
12995: CALL_OW 266
12999: PUSH
13000: LD_INT 32
13002: PUSH
13003: LD_INT 31
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: IN
13010: IFFALSE 13030
// solds := solds diff i else
13012: LD_ADDR_VAR 0 2
13016: PUSH
13017: LD_VAR 0 2
13021: PUSH
13022: LD_VAR 0 7
13026: DIFF
13027: ST_TO_ADDR
13028: GO 13042
// SetTag ( i , 18 ) ;
13030: LD_VAR 0 7
13034: PPUSH
13035: LD_INT 18
13037: PPUSH
13038: CALL_OW 109
13042: GO 12982
13044: POP
13045: POP
// if not solds then
13046: LD_VAR 0 2
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13460
// repeat wait ( 0 0$1 ) ;
13055: LD_INT 35
13057: PPUSH
13058: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
13062: LD_ADDR_VAR 0 5
13066: PUSH
13067: LD_VAR 0 6
13071: PPUSH
13072: LD_VAR 0 3
13076: PPUSH
13077: CALL 12869 0 2
13081: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13082: LD_EXP 52
13086: PUSH
13087: LD_VAR 0 1
13091: ARRAY
13092: NOT
13093: PUSH
13094: LD_EXP 52
13098: PUSH
13099: LD_VAR 0 1
13103: ARRAY
13104: PUSH
13105: EMPTY
13106: EQUAL
13107: OR
13108: IFFALSE 13145
// begin for i in solds do
13110: LD_ADDR_VAR 0 7
13114: PUSH
13115: LD_VAR 0 2
13119: PUSH
13120: FOR_IN
13121: IFFALSE 13134
// ComStop ( i ) ;
13123: LD_VAR 0 7
13127: PPUSH
13128: CALL_OW 141
13132: GO 13120
13134: POP
13135: POP
// solds := [ ] ;
13136: LD_ADDR_VAR 0 2
13140: PUSH
13141: EMPTY
13142: ST_TO_ADDR
// exit ;
13143: GO 13460
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
13145: LD_VAR 0 5
13149: NOT
13150: PUSH
13151: LD_VAR 0 5
13155: PUSH
13156: LD_INT 3
13158: GREATER
13159: OR
13160: PUSH
13161: LD_EXP 74
13165: PUSH
13166: LD_VAR 0 1
13170: ARRAY
13171: OR
13172: IFFALSE 13213
// begin for i in solds do
13174: LD_ADDR_VAR 0 7
13178: PUSH
13179: LD_VAR 0 2
13183: PUSH
13184: FOR_IN
13185: IFFALSE 13209
// if HasTask ( i ) then
13187: LD_VAR 0 7
13191: PPUSH
13192: CALL_OW 314
13196: IFFALSE 13207
// ComStop ( i ) ;
13198: LD_VAR 0 7
13202: PPUSH
13203: CALL_OW 141
13207: GO 13184
13209: POP
13210: POP
// break ;
13211: GO 13448
// end ; for i in solds do
13213: LD_ADDR_VAR 0 7
13217: PUSH
13218: LD_VAR 0 2
13222: PUSH
13223: FOR_IN
13224: IFFALSE 13440
// begin if IsInUnit ( i ) then
13226: LD_VAR 0 7
13230: PPUSH
13231: CALL_OW 310
13235: IFFALSE 13246
// ComExitBuilding ( i ) ;
13237: LD_VAR 0 7
13241: PPUSH
13242: CALL_OW 122
// if GetLives ( i ) > 333 then
13246: LD_VAR 0 7
13250: PPUSH
13251: CALL_OW 256
13255: PUSH
13256: LD_INT 333
13258: GREATER
13259: IFFALSE 13287
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13261: LD_VAR 0 7
13265: PPUSH
13266: LD_VAR 0 5
13270: PPUSH
13271: LD_VAR 0 7
13275: PPUSH
13276: CALL_OW 74
13280: PPUSH
13281: CALL_OW 115
13285: GO 13438
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: LD_EXP 52
13296: PUSH
13297: LD_VAR 0 1
13301: ARRAY
13302: PPUSH
13303: LD_INT 2
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 0
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 30
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 30
13328: PUSH
13329: LD_INT 6
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 72
13346: PPUSH
13347: LD_VAR 0 7
13351: PPUSH
13352: CALL_OW 74
13356: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
13357: LD_VAR 0 7
13361: PPUSH
13362: LD_VAR 0 8
13366: PPUSH
13367: CALL_OW 250
13371: PPUSH
13372: LD_INT 3
13374: PPUSH
13375: LD_INT 5
13377: PPUSH
13378: CALL_OW 272
13382: PPUSH
13383: LD_VAR 0 8
13387: PPUSH
13388: CALL_OW 251
13392: PPUSH
13393: LD_INT 3
13395: PPUSH
13396: LD_INT 5
13398: PPUSH
13399: CALL_OW 273
13403: PPUSH
13404: CALL_OW 111
// SetTag ( i , 0 ) ;
13408: LD_VAR 0 7
13412: PPUSH
13413: LD_INT 0
13415: PPUSH
13416: CALL_OW 109
// solds := solds diff i ;
13420: LD_ADDR_VAR 0 2
13424: PUSH
13425: LD_VAR 0 2
13429: PUSH
13430: LD_VAR 0 7
13434: DIFF
13435: ST_TO_ADDR
// continue ;
13436: GO 13223
// end ; end ;
13438: GO 13223
13440: POP
13441: POP
// until solds ;
13442: LD_VAR 0 2
13446: IFFALSE 13055
// MC_Reset ( base , 18 ) ;
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_INT 18
13455: PPUSH
13456: CALL 58536 0 2
// end ;
13460: LD_VAR 0 4
13464: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
13471: PPUSH
13472: PPUSH
13473: PPUSH
13474: PPUSH
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13484: LD_ADDR_VAR 0 13
13488: PUSH
13489: LD_EXP 52
13493: PUSH
13494: LD_VAR 0 1
13498: ARRAY
13499: PPUSH
13500: LD_INT 25
13502: PUSH
13503: LD_INT 3
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 72
13514: ST_TO_ADDR
// if mc_remote_driver [ base ] then
13515: LD_EXP 92
13519: PUSH
13520: LD_VAR 0 1
13524: ARRAY
13525: IFFALSE 13549
// mechs := mechs diff mc_remote_driver [ base ] ;
13527: LD_ADDR_VAR 0 13
13531: PUSH
13532: LD_VAR 0 13
13536: PUSH
13537: LD_EXP 92
13541: PUSH
13542: LD_VAR 0 1
13546: ARRAY
13547: DIFF
13548: ST_TO_ADDR
// for i in mechs do
13549: LD_ADDR_VAR 0 5
13553: PUSH
13554: LD_VAR 0 13
13558: PUSH
13559: FOR_IN
13560: IFFALSE 13595
// if GetTag ( i ) > 0 then
13562: LD_VAR 0 5
13566: PPUSH
13567: CALL_OW 110
13571: PUSH
13572: LD_INT 0
13574: GREATER
13575: IFFALSE 13593
// mechs := mechs diff i ;
13577: LD_ADDR_VAR 0 13
13581: PUSH
13582: LD_VAR 0 13
13586: PUSH
13587: LD_VAR 0 5
13591: DIFF
13592: ST_TO_ADDR
13593: GO 13559
13595: POP
13596: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13597: LD_ADDR_VAR 0 9
13601: PUSH
13602: LD_EXP 52
13606: PUSH
13607: LD_VAR 0 1
13611: ARRAY
13612: PPUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 25
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 25
13628: PUSH
13629: LD_INT 5
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 25
13638: PUSH
13639: LD_INT 8
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 25
13648: PUSH
13649: LD_INT 9
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 72
13667: ST_TO_ADDR
// if not defenders and not solds then
13668: LD_VAR 0 2
13672: NOT
13673: PUSH
13674: LD_VAR 0 9
13678: NOT
13679: AND
13680: IFFALSE 13684
// exit ;
13682: GO 15310
// depot_under_attack := false ;
13684: LD_ADDR_VAR 0 17
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// sold_defenders := [ ] ;
13692: LD_ADDR_VAR 0 18
13696: PUSH
13697: EMPTY
13698: ST_TO_ADDR
// if mechs then
13699: LD_VAR 0 13
13703: IFFALSE 13832
// for i in defenders do
13705: LD_ADDR_VAR 0 5
13709: PUSH
13710: LD_VAR 0 2
13714: PUSH
13715: FOR_IN
13716: IFFALSE 13830
// begin SetTag ( i , 20 ) ;
13718: LD_VAR 0 5
13722: PPUSH
13723: LD_INT 20
13725: PPUSH
13726: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13730: LD_VAR 0 5
13734: PPUSH
13735: CALL_OW 263
13739: PUSH
13740: LD_INT 1
13742: EQUAL
13743: PUSH
13744: LD_VAR 0 5
13748: PPUSH
13749: CALL_OW 311
13753: NOT
13754: AND
13755: PUSH
13756: LD_VAR 0 13
13760: AND
13761: IFFALSE 13828
// begin un := mechs [ 1 ] ;
13763: LD_ADDR_VAR 0 11
13767: PUSH
13768: LD_VAR 0 13
13772: PUSH
13773: LD_INT 1
13775: ARRAY
13776: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13777: LD_VAR 0 11
13781: PPUSH
13782: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13786: LD_VAR 0 11
13790: PPUSH
13791: LD_VAR 0 5
13795: PPUSH
13796: CALL_OW 180
// SetTag ( un , 19 ) ;
13800: LD_VAR 0 11
13804: PPUSH
13805: LD_INT 19
13807: PPUSH
13808: CALL_OW 109
// mechs := mechs diff un ;
13812: LD_ADDR_VAR 0 13
13816: PUSH
13817: LD_VAR 0 13
13821: PUSH
13822: LD_VAR 0 11
13826: DIFF
13827: ST_TO_ADDR
// end ; end ;
13828: GO 13715
13830: POP
13831: POP
// if solds then
13832: LD_VAR 0 9
13836: IFFALSE 13895
// for i in solds do
13838: LD_ADDR_VAR 0 5
13842: PUSH
13843: LD_VAR 0 9
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13893
// if not GetTag ( i ) then
13851: LD_VAR 0 5
13855: PPUSH
13856: CALL_OW 110
13860: NOT
13861: IFFALSE 13891
// begin defenders := defenders union i ;
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: LD_VAR 0 2
13872: PUSH
13873: LD_VAR 0 5
13877: UNION
13878: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13879: LD_VAR 0 5
13883: PPUSH
13884: LD_INT 18
13886: PPUSH
13887: CALL_OW 109
// end ;
13891: GO 13848
13893: POP
13894: POP
// repeat wait ( 0 0$1 ) ;
13895: LD_INT 35
13897: PPUSH
13898: CALL_OW 67
// enemy := mc_scan [ base ] ;
13902: LD_ADDR_VAR 0 3
13906: PUSH
13907: LD_EXP 75
13911: PUSH
13912: LD_VAR 0 1
13916: ARRAY
13917: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13918: LD_EXP 52
13922: PUSH
13923: LD_VAR 0 1
13927: ARRAY
13928: NOT
13929: PUSH
13930: LD_EXP 52
13934: PUSH
13935: LD_VAR 0 1
13939: ARRAY
13940: PUSH
13941: EMPTY
13942: EQUAL
13943: OR
13944: IFFALSE 13981
// begin for i in defenders do
13946: LD_ADDR_VAR 0 5
13950: PUSH
13951: LD_VAR 0 2
13955: PUSH
13956: FOR_IN
13957: IFFALSE 13970
// ComStop ( i ) ;
13959: LD_VAR 0 5
13963: PPUSH
13964: CALL_OW 141
13968: GO 13956
13970: POP
13971: POP
// defenders := [ ] ;
13972: LD_ADDR_VAR 0 2
13976: PUSH
13977: EMPTY
13978: ST_TO_ADDR
// exit ;
13979: GO 15310
// end ; for i in defenders do
13981: LD_ADDR_VAR 0 5
13985: PUSH
13986: LD_VAR 0 2
13990: PUSH
13991: FOR_IN
13992: IFFALSE 14810
// begin e := NearestUnitToUnit ( enemy , i ) ;
13994: LD_ADDR_VAR 0 14
13998: PUSH
13999: LD_VAR 0 3
14003: PPUSH
14004: LD_VAR 0 5
14008: PPUSH
14009: CALL_OW 74
14013: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
14014: LD_ADDR_VAR 0 8
14018: PUSH
14019: LD_EXP 52
14023: PUSH
14024: LD_VAR 0 1
14028: ARRAY
14029: PPUSH
14030: LD_INT 2
14032: PUSH
14033: LD_INT 30
14035: PUSH
14036: LD_INT 0
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 30
14045: PUSH
14046: LD_INT 1
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: PPUSH
14058: CALL_OW 72
14062: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
14063: LD_ADDR_VAR 0 17
14067: PUSH
14068: LD_VAR 0 8
14072: NOT
14073: PUSH
14074: LD_VAR 0 8
14078: PPUSH
14079: LD_INT 3
14081: PUSH
14082: LD_INT 24
14084: PUSH
14085: LD_INT 600
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 72
14100: OR
14101: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
14102: LD_VAR 0 5
14106: PPUSH
14107: CALL_OW 247
14111: PUSH
14112: LD_INT 2
14114: DOUBLE
14115: EQUAL
14116: IFTRUE 14120
14118: GO 14516
14120: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
14121: LD_VAR 0 5
14125: PPUSH
14126: CALL_OW 256
14130: PUSH
14131: LD_INT 650
14133: GREATER
14134: PUSH
14135: LD_VAR 0 5
14139: PPUSH
14140: LD_VAR 0 14
14144: PPUSH
14145: CALL_OW 296
14149: PUSH
14150: LD_INT 40
14152: LESS
14153: PUSH
14154: LD_VAR 0 14
14158: PPUSH
14159: LD_EXP 77
14163: PUSH
14164: LD_VAR 0 1
14168: ARRAY
14169: PPUSH
14170: CALL_OW 308
14174: OR
14175: AND
14176: IFFALSE 14298
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
14178: LD_VAR 0 5
14182: PPUSH
14183: CALL_OW 262
14187: PUSH
14188: LD_INT 1
14190: EQUAL
14191: PUSH
14192: LD_VAR 0 5
14196: PPUSH
14197: CALL_OW 261
14201: PUSH
14202: LD_INT 30
14204: LESS
14205: AND
14206: PUSH
14207: LD_VAR 0 8
14211: AND
14212: IFFALSE 14282
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
14214: LD_VAR 0 5
14218: PPUSH
14219: LD_VAR 0 8
14223: PPUSH
14224: LD_VAR 0 5
14228: PPUSH
14229: CALL_OW 74
14233: PPUSH
14234: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
14238: LD_VAR 0 5
14242: PPUSH
14243: LD_VAR 0 8
14247: PPUSH
14248: LD_VAR 0 5
14252: PPUSH
14253: CALL_OW 74
14257: PPUSH
14258: CALL_OW 296
14262: PUSH
14263: LD_INT 6
14265: LESS
14266: IFFALSE 14280
// SetFuel ( i , 100 ) ;
14268: LD_VAR 0 5
14272: PPUSH
14273: LD_INT 100
14275: PPUSH
14276: CALL_OW 240
// end else
14280: GO 14296
// ComAttackUnit ( i , e ) ;
14282: LD_VAR 0 5
14286: PPUSH
14287: LD_VAR 0 14
14291: PPUSH
14292: CALL_OW 115
// end else
14296: GO 14399
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14298: LD_VAR 0 14
14302: PPUSH
14303: LD_EXP 77
14307: PUSH
14308: LD_VAR 0 1
14312: ARRAY
14313: PPUSH
14314: CALL_OW 308
14318: NOT
14319: PUSH
14320: LD_VAR 0 5
14324: PPUSH
14325: LD_VAR 0 14
14329: PPUSH
14330: CALL_OW 296
14334: PUSH
14335: LD_INT 40
14337: GREATEREQUAL
14338: AND
14339: PUSH
14340: LD_VAR 0 5
14344: PPUSH
14345: CALL_OW 256
14349: PUSH
14350: LD_INT 650
14352: LESSEQUAL
14353: OR
14354: PUSH
14355: LD_VAR 0 5
14359: PPUSH
14360: LD_EXP 76
14364: PUSH
14365: LD_VAR 0 1
14369: ARRAY
14370: PPUSH
14371: CALL_OW 308
14375: NOT
14376: AND
14377: IFFALSE 14399
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14379: LD_VAR 0 5
14383: PPUSH
14384: LD_EXP 76
14388: PUSH
14389: LD_VAR 0 1
14393: ARRAY
14394: PPUSH
14395: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14399: LD_VAR 0 5
14403: PPUSH
14404: CALL_OW 256
14408: PUSH
14409: LD_INT 998
14411: LESS
14412: PUSH
14413: LD_VAR 0 5
14417: PPUSH
14418: CALL_OW 263
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: PUSH
14428: LD_VAR 0 5
14432: PPUSH
14433: CALL_OW 311
14437: AND
14438: PUSH
14439: LD_VAR 0 5
14443: PPUSH
14444: LD_EXP 76
14448: PUSH
14449: LD_VAR 0 1
14453: ARRAY
14454: PPUSH
14455: CALL_OW 308
14459: AND
14460: IFFALSE 14514
// begin mech := IsDrivenBy ( i ) ;
14462: LD_ADDR_VAR 0 10
14466: PUSH
14467: LD_VAR 0 5
14471: PPUSH
14472: CALL_OW 311
14476: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14477: LD_VAR 0 10
14481: PPUSH
14482: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14486: LD_VAR 0 10
14490: PPUSH
14491: LD_VAR 0 5
14495: PPUSH
14496: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14500: LD_VAR 0 10
14504: PPUSH
14505: LD_VAR 0 5
14509: PPUSH
14510: CALL_OW 180
// end ; end ; unit_human :
14514: GO 14781
14516: LD_INT 1
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14780
14524: POP
// begin b := IsInUnit ( i ) ;
14525: LD_ADDR_VAR 0 19
14529: PUSH
14530: LD_VAR 0 5
14534: PPUSH
14535: CALL_OW 310
14539: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14540: LD_ADDR_VAR 0 20
14544: PUSH
14545: LD_VAR 0 19
14549: NOT
14550: PUSH
14551: LD_VAR 0 19
14555: PPUSH
14556: CALL_OW 266
14560: PUSH
14561: LD_INT 32
14563: PUSH
14564: LD_INT 31
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: IN
14571: OR
14572: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14573: LD_VAR 0 17
14577: PUSH
14578: LD_VAR 0 2
14582: PPUSH
14583: LD_INT 21
14585: PUSH
14586: LD_INT 2
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PPUSH
14593: CALL_OW 72
14597: PUSH
14598: LD_INT 1
14600: LESSEQUAL
14601: OR
14602: PUSH
14603: LD_VAR 0 20
14607: AND
14608: PUSH
14609: LD_VAR 0 5
14613: PUSH
14614: LD_VAR 0 18
14618: IN
14619: NOT
14620: AND
14621: IFFALSE 14714
// begin if b then
14623: LD_VAR 0 19
14627: IFFALSE 14676
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14629: LD_VAR 0 19
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_VAR 0 19
14643: PPUSH
14644: CALL_OW 74
14648: PPUSH
14649: CALL_OW 296
14653: PUSH
14654: LD_INT 10
14656: LESS
14657: PUSH
14658: LD_VAR 0 19
14662: PPUSH
14663: CALL_OW 461
14667: PUSH
14668: LD_INT 7
14670: NONEQUAL
14671: AND
14672: IFFALSE 14676
// continue ;
14674: GO 13991
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14676: LD_ADDR_VAR 0 18
14680: PUSH
14681: LD_VAR 0 18
14685: PPUSH
14686: LD_VAR 0 18
14690: PUSH
14691: LD_INT 1
14693: PLUS
14694: PPUSH
14695: LD_VAR 0 5
14699: PPUSH
14700: CALL_OW 1
14704: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: CALL_OW 122
// end ; if sold_defenders then
14714: LD_VAR 0 18
14718: IFFALSE 14778
// if i in sold_defenders then
14720: LD_VAR 0 5
14724: PUSH
14725: LD_VAR 0 18
14729: IN
14730: IFFALSE 14778
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14732: LD_VAR 0 5
14736: PPUSH
14737: CALL_OW 314
14741: NOT
14742: PUSH
14743: LD_VAR 0 5
14747: PPUSH
14748: LD_VAR 0 14
14752: PPUSH
14753: CALL_OW 296
14757: PUSH
14758: LD_INT 30
14760: LESS
14761: AND
14762: IFFALSE 14778
// ComAttackUnit ( i , e ) ;
14764: LD_VAR 0 5
14768: PPUSH
14769: LD_VAR 0 14
14773: PPUSH
14774: CALL_OW 115
// end ; end ; end ;
14778: GO 14781
14780: POP
// if IsDead ( i ) then
14781: LD_VAR 0 5
14785: PPUSH
14786: CALL_OW 301
14790: IFFALSE 14808
// defenders := defenders diff i ;
14792: LD_ADDR_VAR 0 2
14796: PUSH
14797: LD_VAR 0 2
14801: PUSH
14802: LD_VAR 0 5
14806: DIFF
14807: ST_TO_ADDR
// end ;
14808: GO 13991
14810: POP
14811: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
14812: LD_VAR 0 3
14816: NOT
14817: PUSH
14818: LD_VAR 0 2
14822: NOT
14823: OR
14824: PUSH
14825: LD_EXP 52
14829: PUSH
14830: LD_VAR 0 1
14834: ARRAY
14835: NOT
14836: OR
14837: IFFALSE 13895
// MC_Reset ( base , 18 ) ;
14839: LD_VAR 0 1
14843: PPUSH
14844: LD_INT 18
14846: PPUSH
14847: CALL 58536 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_VAR 0 2
14860: PUSH
14861: LD_VAR 0 2
14865: PPUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 25
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 5
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 25
14891: PUSH
14892: LD_INT 8
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 25
14901: PUSH
14902: LD_INT 9
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: PPUSH
14916: CALL_OW 72
14920: DIFF
14921: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14922: LD_VAR 0 3
14926: NOT
14927: PUSH
14928: LD_VAR 0 2
14932: PPUSH
14933: LD_INT 21
14935: PUSH
14936: LD_INT 2
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 72
14947: AND
14948: IFFALSE 15286
// begin tmp := FilterByTag ( defenders , 19 ) ;
14950: LD_ADDR_VAR 0 12
14954: PUSH
14955: LD_VAR 0 2
14959: PPUSH
14960: LD_INT 19
14962: PPUSH
14963: CALL 51749 0 2
14967: ST_TO_ADDR
// if tmp then
14968: LD_VAR 0 12
14972: IFFALSE 15042
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14974: LD_ADDR_VAR 0 12
14978: PUSH
14979: LD_VAR 0 12
14983: PPUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PPUSH
14994: CALL_OW 72
14998: ST_TO_ADDR
// if tmp then
14999: LD_VAR 0 12
15003: IFFALSE 15042
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
15005: LD_ADDR_EXP 64
15009: PUSH
15010: LD_EXP 64
15014: PPUSH
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_EXP 64
15024: PUSH
15025: LD_VAR 0 1
15029: ARRAY
15030: PUSH
15031: LD_VAR 0 12
15035: UNION
15036: PPUSH
15037: CALL_OW 1
15041: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 19
15049: PPUSH
15050: CALL 58536 0 2
// repeat wait ( 0 0$1 ) ;
15054: LD_INT 35
15056: PPUSH
15057: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
15061: LD_EXP 52
15065: PUSH
15066: LD_VAR 0 1
15070: ARRAY
15071: NOT
15072: PUSH
15073: LD_EXP 52
15077: PUSH
15078: LD_VAR 0 1
15082: ARRAY
15083: PUSH
15084: EMPTY
15085: EQUAL
15086: OR
15087: IFFALSE 15124
// begin for i in defenders do
15089: LD_ADDR_VAR 0 5
15093: PUSH
15094: LD_VAR 0 2
15098: PUSH
15099: FOR_IN
15100: IFFALSE 15113
// ComStop ( i ) ;
15102: LD_VAR 0 5
15106: PPUSH
15107: CALL_OW 141
15111: GO 15099
15113: POP
15114: POP
// defenders := [ ] ;
15115: LD_ADDR_VAR 0 2
15119: PUSH
15120: EMPTY
15121: ST_TO_ADDR
// exit ;
15122: GO 15310
// end ; for i in defenders do
15124: LD_ADDR_VAR 0 5
15128: PUSH
15129: LD_VAR 0 2
15133: PUSH
15134: FOR_IN
15135: IFFALSE 15224
// begin if not IsInArea ( i , mc_parking [ base ] ) then
15137: LD_VAR 0 5
15141: PPUSH
15142: LD_EXP 76
15146: PUSH
15147: LD_VAR 0 1
15151: ARRAY
15152: PPUSH
15153: CALL_OW 308
15157: NOT
15158: IFFALSE 15182
// ComMoveToArea ( i , mc_parking [ base ] ) else
15160: LD_VAR 0 5
15164: PPUSH
15165: LD_EXP 76
15169: PUSH
15170: LD_VAR 0 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 113
15180: GO 15222
// if GetControl ( i ) = control_manual then
15182: LD_VAR 0 5
15186: PPUSH
15187: CALL_OW 263
15191: PUSH
15192: LD_INT 1
15194: EQUAL
15195: IFFALSE 15222
// if IsDrivenBy ( i ) then
15197: LD_VAR 0 5
15201: PPUSH
15202: CALL_OW 311
15206: IFFALSE 15222
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
15208: LD_VAR 0 5
15212: PPUSH
15213: CALL_OW 311
15217: PPUSH
15218: CALL_OW 121
// end ;
15222: GO 15134
15224: POP
15225: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
15226: LD_VAR 0 2
15230: PPUSH
15231: LD_INT 95
15233: PUSH
15234: LD_EXP 76
15238: PUSH
15239: LD_VAR 0 1
15243: ARRAY
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 72
15253: PUSH
15254: LD_VAR 0 2
15258: EQUAL
15259: PUSH
15260: LD_EXP 75
15264: PUSH
15265: LD_VAR 0 1
15269: ARRAY
15270: OR
15271: PUSH
15272: LD_EXP 52
15276: PUSH
15277: LD_VAR 0 1
15281: ARRAY
15282: NOT
15283: OR
15284: IFFALSE 15054
// end ; MC_Reset ( base , 19 ) ;
15286: LD_VAR 0 1
15290: PPUSH
15291: LD_INT 19
15293: PPUSH
15294: CALL 58536 0 2
// MC_Reset ( base , 20 ) ;
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_INT 20
15305: PPUSH
15306: CALL 58536 0 2
// end ;
15310: LD_VAR 0 4
15314: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15315: LD_INT 0
15317: PPUSH
15318: PPUSH
15319: PPUSH
15320: PPUSH
// result := false ;
15321: LD_ADDR_VAR 0 2
15325: PUSH
15326: LD_INT 0
15328: ST_TO_ADDR
// side := GetSide ( unit ) ;
15329: LD_ADDR_VAR 0 3
15333: PUSH
15334: LD_VAR 0 1
15338: PPUSH
15339: CALL_OW 255
15343: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15344: LD_ADDR_VAR 0 4
15348: PUSH
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 248
15358: ST_TO_ADDR
// case nat of 1 :
15359: LD_VAR 0 4
15363: PUSH
15364: LD_INT 1
15366: DOUBLE
15367: EQUAL
15368: IFTRUE 15372
15370: GO 15383
15372: POP
// tech := tech_lassight ; 2 :
15373: LD_ADDR_VAR 0 5
15377: PUSH
15378: LD_INT 12
15380: ST_TO_ADDR
15381: GO 15422
15383: LD_INT 2
15385: DOUBLE
15386: EQUAL
15387: IFTRUE 15391
15389: GO 15402
15391: POP
// tech := tech_mortar ; 3 :
15392: LD_ADDR_VAR 0 5
15396: PUSH
15397: LD_INT 41
15399: ST_TO_ADDR
15400: GO 15422
15402: LD_INT 3
15404: DOUBLE
15405: EQUAL
15406: IFTRUE 15410
15408: GO 15421
15410: POP
// tech := tech_bazooka ; end ;
15411: LD_ADDR_VAR 0 5
15415: PUSH
15416: LD_INT 44
15418: ST_TO_ADDR
15419: GO 15422
15421: POP
// if Researched ( side , tech ) then
15422: LD_VAR 0 3
15426: PPUSH
15427: LD_VAR 0 5
15431: PPUSH
15432: CALL_OW 325
15436: IFFALSE 15463
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15438: LD_ADDR_VAR 0 2
15442: PUSH
15443: LD_INT 5
15445: PUSH
15446: LD_INT 8
15448: PUSH
15449: LD_INT 9
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: PUSH
15457: LD_VAR 0 4
15461: ARRAY
15462: ST_TO_ADDR
// end ;
15463: LD_VAR 0 2
15467: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15468: LD_INT 0
15470: PPUSH
15471: PPUSH
15472: PPUSH
// if not mines then
15473: LD_VAR 0 2
15477: NOT
15478: IFFALSE 15482
// exit ;
15480: GO 15626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15482: LD_ADDR_VAR 0 5
15486: PUSH
15487: LD_INT 81
15489: PUSH
15490: LD_VAR 0 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 3
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: ST_TO_ADDR
// for i in mines do
15525: LD_ADDR_VAR 0 4
15529: PUSH
15530: LD_VAR 0 2
15534: PUSH
15535: FOR_IN
15536: IFFALSE 15624
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15538: LD_VAR 0 4
15542: PUSH
15543: LD_INT 1
15545: ARRAY
15546: PPUSH
15547: LD_VAR 0 4
15551: PUSH
15552: LD_INT 2
15554: ARRAY
15555: PPUSH
15556: CALL_OW 458
15560: NOT
15561: IFFALSE 15565
// continue ;
15563: GO 15535
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15565: LD_VAR 0 4
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: LD_VAR 0 4
15578: PUSH
15579: LD_INT 2
15581: ARRAY
15582: PPUSH
15583: CALL_OW 428
15587: PUSH
15588: LD_VAR 0 5
15592: IN
15593: IFFALSE 15622
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15595: LD_VAR 0 4
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: LD_VAR 0 4
15608: PUSH
15609: LD_INT 2
15611: ARRAY
15612: PPUSH
15613: LD_VAR 0 1
15617: PPUSH
15618: CALL_OW 456
// end ;
15622: GO 15535
15624: POP
15625: POP
// end ;
15626: LD_VAR 0 3
15630: RET
// export function Count ( array ) ; var i ; begin
15631: LD_INT 0
15633: PPUSH
15634: PPUSH
// result := 0 ;
15635: LD_ADDR_VAR 0 2
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// for i in array do
15643: LD_ADDR_VAR 0 3
15647: PUSH
15648: LD_VAR 0 1
15652: PUSH
15653: FOR_IN
15654: IFFALSE 15678
// if i then
15656: LD_VAR 0 3
15660: IFFALSE 15676
// result := result + 1 ;
15662: LD_ADDR_VAR 0 2
15666: PUSH
15667: LD_VAR 0 2
15671: PUSH
15672: LD_INT 1
15674: PLUS
15675: ST_TO_ADDR
15676: GO 15653
15678: POP
15679: POP
// end ;
15680: LD_VAR 0 2
15684: RET
// export function IsEmpty ( building ) ; begin
15685: LD_INT 0
15687: PPUSH
// if not building then
15688: LD_VAR 0 1
15692: NOT
15693: IFFALSE 15697
// exit ;
15695: GO 15740
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_VAR 0 1
15706: PUSH
15707: LD_INT 22
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 255
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 58
15726: PUSH
15727: EMPTY
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 69
15738: IN
15739: ST_TO_ADDR
// end ;
15740: LD_VAR 0 2
15744: RET
// export function IsNotFull ( building ) ; begin
15745: LD_INT 0
15747: PPUSH
// if not building then
15748: LD_VAR 0 1
15752: NOT
15753: IFFALSE 15757
// exit ;
15755: GO 15776
// result := UnitsInside ( building ) < 6 ;
15757: LD_ADDR_VAR 0 2
15761: PUSH
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 313
15771: PUSH
15772: LD_INT 6
15774: LESS
15775: ST_TO_ADDR
// end ;
15776: LD_VAR 0 2
15780: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15781: LD_INT 0
15783: PPUSH
15784: PPUSH
15785: PPUSH
15786: PPUSH
// tmp := [ ] ;
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: EMPTY
15793: ST_TO_ADDR
// list := [ ] ;
15794: LD_ADDR_VAR 0 5
15798: PUSH
15799: EMPTY
15800: ST_TO_ADDR
// for i = 16 to 25 do
15801: LD_ADDR_VAR 0 4
15805: PUSH
15806: DOUBLE
15807: LD_INT 16
15809: DEC
15810: ST_TO_ADDR
15811: LD_INT 25
15813: PUSH
15814: FOR_TO
15815: IFFALSE 15888
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_VAR 0 3
15826: PUSH
15827: LD_INT 22
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 255
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 91
15846: PUSH
15847: LD_VAR 0 1
15851: PUSH
15852: LD_INT 6
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 30
15862: PUSH
15863: LD_VAR 0 4
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: ADD
15885: ST_TO_ADDR
15886: GO 15814
15888: POP
15889: POP
// for i = 1 to tmp do
15890: LD_ADDR_VAR 0 4
15894: PUSH
15895: DOUBLE
15896: LD_INT 1
15898: DEC
15899: ST_TO_ADDR
15900: LD_VAR 0 3
15904: PUSH
15905: FOR_TO
15906: IFFALSE 15994
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15908: LD_ADDR_VAR 0 5
15912: PUSH
15913: LD_VAR 0 5
15917: PUSH
15918: LD_VAR 0 3
15922: PUSH
15923: LD_VAR 0 4
15927: ARRAY
15928: PPUSH
15929: CALL_OW 266
15933: PUSH
15934: LD_VAR 0 3
15938: PUSH
15939: LD_VAR 0 4
15943: ARRAY
15944: PPUSH
15945: CALL_OW 250
15949: PUSH
15950: LD_VAR 0 3
15954: PUSH
15955: LD_VAR 0 4
15959: ARRAY
15960: PPUSH
15961: CALL_OW 251
15965: PUSH
15966: LD_VAR 0 3
15970: PUSH
15971: LD_VAR 0 4
15975: ARRAY
15976: PPUSH
15977: CALL_OW 254
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: ADD
15991: ST_TO_ADDR
15992: GO 15905
15994: POP
15995: POP
// result := list ;
15996: LD_ADDR_VAR 0 2
16000: PUSH
16001: LD_VAR 0 5
16005: ST_TO_ADDR
// end ;
16006: LD_VAR 0 2
16010: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16011: LD_INT 0
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
// if not factory then
16020: LD_VAR 0 1
16024: NOT
16025: IFFALSE 16029
// exit ;
16027: GO 16622
// if control = control_apeman then
16029: LD_VAR 0 4
16033: PUSH
16034: LD_INT 5
16036: EQUAL
16037: IFFALSE 16146
// begin tmp := UnitsInside ( factory ) ;
16039: LD_ADDR_VAR 0 8
16043: PUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 313
16053: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16054: LD_VAR 0 8
16058: PPUSH
16059: LD_INT 25
16061: PUSH
16062: LD_INT 12
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 72
16073: NOT
16074: IFFALSE 16084
// control := control_manual ;
16076: LD_ADDR_VAR 0 4
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16084: LD_ADDR_VAR 0 8
16088: PUSH
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL 15781 0 1
16098: ST_TO_ADDR
// if tmp then
16099: LD_VAR 0 8
16103: IFFALSE 16146
// begin for i in tmp do
16105: LD_ADDR_VAR 0 7
16109: PUSH
16110: LD_VAR 0 8
16114: PUSH
16115: FOR_IN
16116: IFFALSE 16144
// if i [ 1 ] = b_ext_radio then
16118: LD_VAR 0 7
16122: PUSH
16123: LD_INT 1
16125: ARRAY
16126: PUSH
16127: LD_INT 22
16129: EQUAL
16130: IFFALSE 16142
// begin control := control_remote ;
16132: LD_ADDR_VAR 0 4
16136: PUSH
16137: LD_INT 2
16139: ST_TO_ADDR
// break ;
16140: GO 16144
// end ;
16142: GO 16115
16144: POP
16145: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16146: LD_VAR 0 1
16150: PPUSH
16151: LD_VAR 0 2
16155: PPUSH
16156: LD_VAR 0 3
16160: PPUSH
16161: LD_VAR 0 4
16165: PPUSH
16166: LD_VAR 0 5
16170: PPUSH
16171: CALL_OW 448
16175: IFFALSE 16210
// begin result := [ chassis , engine , control , weapon ] ;
16177: LD_ADDR_VAR 0 6
16181: PUSH
16182: LD_VAR 0 2
16186: PUSH
16187: LD_VAR 0 3
16191: PUSH
16192: LD_VAR 0 4
16196: PUSH
16197: LD_VAR 0 5
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: ST_TO_ADDR
// exit ;
16208: GO 16622
// end ; _chassis := AvailableChassisList ( factory ) ;
16210: LD_ADDR_VAR 0 9
16214: PUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 475
16224: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16225: LD_ADDR_VAR 0 11
16229: PUSH
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 476
16239: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16240: LD_ADDR_VAR 0 12
16244: PUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL_OW 477
16254: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16255: LD_ADDR_VAR 0 10
16259: PUSH
16260: LD_VAR 0 1
16264: PPUSH
16265: CALL_OW 478
16269: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16270: LD_VAR 0 9
16274: NOT
16275: PUSH
16276: LD_VAR 0 11
16280: NOT
16281: OR
16282: PUSH
16283: LD_VAR 0 12
16287: NOT
16288: OR
16289: PUSH
16290: LD_VAR 0 10
16294: NOT
16295: OR
16296: IFFALSE 16331
// begin result := [ chassis , engine , control , weapon ] ;
16298: LD_ADDR_VAR 0 6
16302: PUSH
16303: LD_VAR 0 2
16307: PUSH
16308: LD_VAR 0 3
16312: PUSH
16313: LD_VAR 0 4
16317: PUSH
16318: LD_VAR 0 5
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: ST_TO_ADDR
// exit ;
16329: GO 16622
// end ; if not chassis in _chassis then
16331: LD_VAR 0 2
16335: PUSH
16336: LD_VAR 0 9
16340: IN
16341: NOT
16342: IFFALSE 16368
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16344: LD_ADDR_VAR 0 2
16348: PUSH
16349: LD_VAR 0 9
16353: PUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_VAR 0 9
16361: PPUSH
16362: CALL_OW 12
16366: ARRAY
16367: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_VAR 0 3
16377: PPUSH
16378: CALL 16627 0 2
16382: NOT
16383: IFFALSE 16442
// repeat engine := _engine [ 1 ] ;
16385: LD_ADDR_VAR 0 3
16389: PUSH
16390: LD_VAR 0 11
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16399: LD_ADDR_VAR 0 11
16403: PUSH
16404: LD_VAR 0 11
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 3
16416: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16417: LD_VAR 0 2
16421: PPUSH
16422: LD_VAR 0 3
16426: PPUSH
16427: CALL 16627 0 2
16431: PUSH
16432: LD_VAR 0 11
16436: PUSH
16437: EMPTY
16438: EQUAL
16439: OR
16440: IFFALSE 16385
// if not control in _control then
16442: LD_VAR 0 4
16446: PUSH
16447: LD_VAR 0 12
16451: IN
16452: NOT
16453: IFFALSE 16479
// control := _control [ rand ( 1 , _control ) ] ;
16455: LD_ADDR_VAR 0 4
16459: PUSH
16460: LD_VAR 0 12
16464: PUSH
16465: LD_INT 1
16467: PPUSH
16468: LD_VAR 0 12
16472: PPUSH
16473: CALL_OW 12
16477: ARRAY
16478: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16479: LD_VAR 0 2
16483: PPUSH
16484: LD_VAR 0 5
16488: PPUSH
16489: CALL 16847 0 2
16493: NOT
16494: IFFALSE 16553
// repeat weapon := _weapon [ 1 ] ;
16496: LD_ADDR_VAR 0 5
16500: PUSH
16501: LD_VAR 0 10
16505: PUSH
16506: LD_INT 1
16508: ARRAY
16509: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16510: LD_ADDR_VAR 0 10
16514: PUSH
16515: LD_VAR 0 10
16519: PPUSH
16520: LD_INT 1
16522: PPUSH
16523: CALL_OW 3
16527: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16528: LD_VAR 0 2
16532: PPUSH
16533: LD_VAR 0 5
16537: PPUSH
16538: CALL 16847 0 2
16542: PUSH
16543: LD_VAR 0 10
16547: PUSH
16548: EMPTY
16549: EQUAL
16550: OR
16551: IFFALSE 16496
// result := [ ] ;
16553: LD_ADDR_VAR 0 6
16557: PUSH
16558: EMPTY
16559: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16560: LD_VAR 0 1
16564: PPUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: LD_VAR 0 3
16574: PPUSH
16575: LD_VAR 0 4
16579: PPUSH
16580: LD_VAR 0 5
16584: PPUSH
16585: CALL_OW 448
16589: IFFALSE 16622
// result := [ chassis , engine , control , weapon ] ;
16591: LD_ADDR_VAR 0 6
16595: PUSH
16596: LD_VAR 0 2
16600: PUSH
16601: LD_VAR 0 3
16605: PUSH
16606: LD_VAR 0 4
16610: PUSH
16611: LD_VAR 0 5
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: ST_TO_ADDR
// end ;
16622: LD_VAR 0 6
16626: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16627: LD_INT 0
16629: PPUSH
// if not chassis or not engine then
16630: LD_VAR 0 1
16634: NOT
16635: PUSH
16636: LD_VAR 0 2
16640: NOT
16641: OR
16642: IFFALSE 16646
// exit ;
16644: GO 16842
// case engine of engine_solar :
16646: LD_VAR 0 2
16650: PUSH
16651: LD_INT 2
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16697
16659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_INT 11
16667: PUSH
16668: LD_INT 12
16670: PUSH
16671: LD_INT 13
16673: PUSH
16674: LD_INT 14
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: LD_INT 2
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: ST_TO_ADDR
16695: GO 16826
16697: LD_INT 1
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16767
16705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16706: LD_ADDR_VAR 0 3
16710: PUSH
16711: LD_INT 11
16713: PUSH
16714: LD_INT 12
16716: PUSH
16717: LD_INT 13
16719: PUSH
16720: LD_INT 14
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: LD_INT 21
16740: PUSH
16741: LD_INT 23
16743: PUSH
16744: LD_INT 22
16746: PUSH
16747: LD_INT 24
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: ST_TO_ADDR
16765: GO 16826
16767: LD_INT 3
16769: DOUBLE
16770: EQUAL
16771: IFTRUE 16775
16773: GO 16825
16775: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16776: LD_ADDR_VAR 0 3
16780: PUSH
16781: LD_INT 13
16783: PUSH
16784: LD_INT 14
16786: PUSH
16787: LD_INT 2
16789: PUSH
16790: LD_INT 3
16792: PUSH
16793: LD_INT 4
16795: PUSH
16796: LD_INT 5
16798: PUSH
16799: LD_INT 21
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: LD_INT 24
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: ST_TO_ADDR
16823: GO 16826
16825: POP
// result := ( chassis in result ) ;
16826: LD_ADDR_VAR 0 3
16830: PUSH
16831: LD_VAR 0 1
16835: PUSH
16836: LD_VAR 0 3
16840: IN
16841: ST_TO_ADDR
// end ;
16842: LD_VAR 0 3
16846: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16847: LD_INT 0
16849: PPUSH
// if not chassis or not weapon then
16850: LD_VAR 0 1
16854: NOT
16855: PUSH
16856: LD_VAR 0 2
16860: NOT
16861: OR
16862: IFFALSE 16866
// exit ;
16864: GO 17892
// case weapon of us_machine_gun :
16866: LD_VAR 0 2
16870: PUSH
16871: LD_INT 2
16873: DOUBLE
16874: EQUAL
16875: IFTRUE 16879
16877: GO 16909
16879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16880: LD_ADDR_VAR 0 3
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 4
16896: PUSH
16897: LD_INT 5
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: ST_TO_ADDR
16907: GO 17876
16909: LD_INT 3
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16947
16917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16918: LD_ADDR_VAR 0 3
16922: PUSH
16923: LD_INT 1
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: LD_INT 5
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: ST_TO_ADDR
16945: GO 17876
16947: LD_INT 11
16949: DOUBLE
16950: EQUAL
16951: IFTRUE 16955
16953: GO 16985
16955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16956: LD_ADDR_VAR 0 3
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 3
16969: PUSH
16970: LD_INT 4
16972: PUSH
16973: LD_INT 5
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: ST_TO_ADDR
16983: GO 17876
16985: LD_INT 4
16987: DOUBLE
16988: EQUAL
16989: IFTRUE 16993
16991: GO 17019
16993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16994: LD_ADDR_VAR 0 3
16998: PUSH
16999: LD_INT 2
17001: PUSH
17002: LD_INT 3
17004: PUSH
17005: LD_INT 4
17007: PUSH
17008: LD_INT 5
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: ST_TO_ADDR
17017: GO 17876
17019: LD_INT 5
17021: DOUBLE
17022: EQUAL
17023: IFTRUE 17027
17025: GO 17053
17027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17028: LD_ADDR_VAR 0 3
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 3
17038: PUSH
17039: LD_INT 4
17041: PUSH
17042: LD_INT 5
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: ST_TO_ADDR
17051: GO 17876
17053: LD_INT 9
17055: DOUBLE
17056: EQUAL
17057: IFTRUE 17061
17059: GO 17087
17061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17062: LD_ADDR_VAR 0 3
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: LD_INT 4
17075: PUSH
17076: LD_INT 5
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: ST_TO_ADDR
17085: GO 17876
17087: LD_INT 7
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17121
17095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: LD_INT 2
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: LD_INT 4
17109: PUSH
17110: LD_INT 5
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: ST_TO_ADDR
17119: GO 17876
17121: LD_INT 12
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17155
17129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17130: LD_ADDR_VAR 0 3
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: LD_INT 3
17140: PUSH
17141: LD_INT 4
17143: PUSH
17144: LD_INT 5
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: ST_TO_ADDR
17153: GO 17876
17155: LD_INT 13
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17189
17163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17164: LD_ADDR_VAR 0 3
17168: PUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: LD_INT 4
17177: PUSH
17178: LD_INT 5
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: ST_TO_ADDR
17187: GO 17876
17189: LD_INT 14
17191: DOUBLE
17192: EQUAL
17193: IFTRUE 17197
17195: GO 17215
17197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17198: LD_ADDR_VAR 0 3
17202: PUSH
17203: LD_INT 4
17205: PUSH
17206: LD_INT 5
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: ST_TO_ADDR
17213: GO 17876
17215: LD_INT 6
17217: DOUBLE
17218: EQUAL
17219: IFTRUE 17223
17221: GO 17241
17223: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17224: LD_ADDR_VAR 0 3
17228: PUSH
17229: LD_INT 4
17231: PUSH
17232: LD_INT 5
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: ST_TO_ADDR
17239: GO 17876
17241: LD_INT 10
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17267
17249: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17250: LD_ADDR_VAR 0 3
17254: PUSH
17255: LD_INT 4
17257: PUSH
17258: LD_INT 5
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: ST_TO_ADDR
17265: GO 17876
17267: LD_INT 22
17269: DOUBLE
17270: EQUAL
17271: IFTRUE 17275
17273: GO 17301
17275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: LD_INT 11
17283: PUSH
17284: LD_INT 12
17286: PUSH
17287: LD_INT 13
17289: PUSH
17290: LD_INT 14
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: ST_TO_ADDR
17299: GO 17876
17301: LD_INT 23
17303: DOUBLE
17304: EQUAL
17305: IFTRUE 17309
17307: GO 17335
17309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17310: LD_ADDR_VAR 0 3
17314: PUSH
17315: LD_INT 11
17317: PUSH
17318: LD_INT 12
17320: PUSH
17321: LD_INT 13
17323: PUSH
17324: LD_INT 14
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: ST_TO_ADDR
17333: GO 17876
17335: LD_INT 24
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17369
17343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17344: LD_ADDR_VAR 0 3
17348: PUSH
17349: LD_INT 11
17351: PUSH
17352: LD_INT 12
17354: PUSH
17355: LD_INT 13
17357: PUSH
17358: LD_INT 14
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 17876
17369: LD_INT 30
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17403
17377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17378: LD_ADDR_VAR 0 3
17382: PUSH
17383: LD_INT 11
17385: PUSH
17386: LD_INT 12
17388: PUSH
17389: LD_INT 13
17391: PUSH
17392: LD_INT 14
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: ST_TO_ADDR
17401: GO 17876
17403: LD_INT 25
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17411
17409: GO 17429
17411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17412: LD_ADDR_VAR 0 3
17416: PUSH
17417: LD_INT 13
17419: PUSH
17420: LD_INT 14
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: ST_TO_ADDR
17427: GO 17876
17429: LD_INT 27
17431: DOUBLE
17432: EQUAL
17433: IFTRUE 17437
17435: GO 17455
17437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: LD_INT 13
17445: PUSH
17446: LD_INT 14
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: ST_TO_ADDR
17453: GO 17876
17455: LD_INT 28
17457: DOUBLE
17458: EQUAL
17459: IFTRUE 17463
17461: GO 17481
17463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17464: LD_ADDR_VAR 0 3
17468: PUSH
17469: LD_INT 13
17471: PUSH
17472: LD_INT 14
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: ST_TO_ADDR
17479: GO 17876
17481: LD_INT 29
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17489
17487: GO 17507
17489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17490: LD_ADDR_VAR 0 3
17494: PUSH
17495: LD_INT 13
17497: PUSH
17498: LD_INT 14
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: ST_TO_ADDR
17505: GO 17876
17507: LD_INT 31
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17515
17513: GO 17533
17515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17516: LD_ADDR_VAR 0 3
17520: PUSH
17521: LD_INT 13
17523: PUSH
17524: LD_INT 14
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: ST_TO_ADDR
17531: GO 17876
17533: LD_INT 26
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17559
17541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: LD_INT 13
17549: PUSH
17550: LD_INT 14
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: ST_TO_ADDR
17557: GO 17876
17559: LD_INT 42
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17593
17567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_INT 21
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_INT 23
17581: PUSH
17582: LD_INT 24
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: ST_TO_ADDR
17591: GO 17876
17593: LD_INT 43
17595: DOUBLE
17596: EQUAL
17597: IFTRUE 17601
17599: GO 17627
17601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: LD_INT 21
17609: PUSH
17610: LD_INT 22
17612: PUSH
17613: LD_INT 23
17615: PUSH
17616: LD_INT 24
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: ST_TO_ADDR
17625: GO 17876
17627: LD_INT 44
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17661
17635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17636: LD_ADDR_VAR 0 3
17640: PUSH
17641: LD_INT 21
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 23
17649: PUSH
17650: LD_INT 24
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: ST_TO_ADDR
17659: GO 17876
17661: LD_INT 45
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17695
17669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17670: LD_ADDR_VAR 0 3
17674: PUSH
17675: LD_INT 21
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_INT 23
17683: PUSH
17684: LD_INT 24
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: ST_TO_ADDR
17693: GO 17876
17695: LD_INT 49
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17729
17703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17704: LD_ADDR_VAR 0 3
17708: PUSH
17709: LD_INT 21
17711: PUSH
17712: LD_INT 22
17714: PUSH
17715: LD_INT 23
17717: PUSH
17718: LD_INT 24
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: ST_TO_ADDR
17727: GO 17876
17729: LD_INT 51
17731: DOUBLE
17732: EQUAL
17733: IFTRUE 17737
17735: GO 17763
17737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17738: LD_ADDR_VAR 0 3
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_INT 23
17751: PUSH
17752: LD_INT 24
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: ST_TO_ADDR
17761: GO 17876
17763: LD_INT 52
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 17797
17771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17772: LD_ADDR_VAR 0 3
17776: PUSH
17777: LD_INT 21
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: LD_INT 23
17785: PUSH
17786: LD_INT 24
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: ST_TO_ADDR
17795: GO 17876
17797: LD_INT 53
17799: DOUBLE
17800: EQUAL
17801: IFTRUE 17805
17803: GO 17823
17805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17806: LD_ADDR_VAR 0 3
17810: PUSH
17811: LD_INT 23
17813: PUSH
17814: LD_INT 24
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: ST_TO_ADDR
17821: GO 17876
17823: LD_INT 46
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 17849
17831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17832: LD_ADDR_VAR 0 3
17836: PUSH
17837: LD_INT 23
17839: PUSH
17840: LD_INT 24
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: ST_TO_ADDR
17847: GO 17876
17849: LD_INT 47
17851: DOUBLE
17852: EQUAL
17853: IFTRUE 17857
17855: GO 17875
17857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17858: LD_ADDR_VAR 0 3
17862: PUSH
17863: LD_INT 23
17865: PUSH
17866: LD_INT 24
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: ST_TO_ADDR
17873: GO 17876
17875: POP
// result := ( chassis in result ) ;
17876: LD_ADDR_VAR 0 3
17880: PUSH
17881: LD_VAR 0 1
17885: PUSH
17886: LD_VAR 0 3
17890: IN
17891: ST_TO_ADDR
// end ;
17892: LD_VAR 0 3
17896: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
17905: PPUSH
// result := array ;
17906: LD_ADDR_VAR 0 5
17910: PUSH
17911: LD_VAR 0 1
17915: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17916: LD_VAR 0 1
17920: NOT
17921: PUSH
17922: LD_VAR 0 2
17926: NOT
17927: OR
17928: PUSH
17929: LD_VAR 0 3
17933: NOT
17934: OR
17935: PUSH
17936: LD_VAR 0 2
17940: PUSH
17941: LD_VAR 0 1
17945: GREATER
17946: OR
17947: PUSH
17948: LD_VAR 0 3
17952: PUSH
17953: LD_VAR 0 1
17957: GREATER
17958: OR
17959: IFFALSE 17963
// exit ;
17961: GO 18259
// if direction then
17963: LD_VAR 0 4
17967: IFFALSE 18031
// begin d := 1 ;
17969: LD_ADDR_VAR 0 9
17973: PUSH
17974: LD_INT 1
17976: ST_TO_ADDR
// if i_from > i_to then
17977: LD_VAR 0 2
17981: PUSH
17982: LD_VAR 0 3
17986: GREATER
17987: IFFALSE 18013
// length := ( array - i_from ) + i_to else
17989: LD_ADDR_VAR 0 11
17993: PUSH
17994: LD_VAR 0 1
17998: PUSH
17999: LD_VAR 0 2
18003: MINUS
18004: PUSH
18005: LD_VAR 0 3
18009: PLUS
18010: ST_TO_ADDR
18011: GO 18029
// length := i_to - i_from ;
18013: LD_ADDR_VAR 0 11
18017: PUSH
18018: LD_VAR 0 3
18022: PUSH
18023: LD_VAR 0 2
18027: MINUS
18028: ST_TO_ADDR
// end else
18029: GO 18092
// begin d := - 1 ;
18031: LD_ADDR_VAR 0 9
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: ST_TO_ADDR
// if i_from > i_to then
18040: LD_VAR 0 2
18044: PUSH
18045: LD_VAR 0 3
18049: GREATER
18050: IFFALSE 18070
// length := i_from - i_to else
18052: LD_ADDR_VAR 0 11
18056: PUSH
18057: LD_VAR 0 2
18061: PUSH
18062: LD_VAR 0 3
18066: MINUS
18067: ST_TO_ADDR
18068: GO 18092
// length := ( array - i_to ) + i_from ;
18070: LD_ADDR_VAR 0 11
18074: PUSH
18075: LD_VAR 0 1
18079: PUSH
18080: LD_VAR 0 3
18084: MINUS
18085: PUSH
18086: LD_VAR 0 2
18090: PLUS
18091: ST_TO_ADDR
// end ; if not length then
18092: LD_VAR 0 11
18096: NOT
18097: IFFALSE 18101
// exit ;
18099: GO 18259
// tmp := array ;
18101: LD_ADDR_VAR 0 10
18105: PUSH
18106: LD_VAR 0 1
18110: ST_TO_ADDR
// for i = 1 to length do
18111: LD_ADDR_VAR 0 6
18115: PUSH
18116: DOUBLE
18117: LD_INT 1
18119: DEC
18120: ST_TO_ADDR
18121: LD_VAR 0 11
18125: PUSH
18126: FOR_TO
18127: IFFALSE 18247
// begin for j = 1 to array do
18129: LD_ADDR_VAR 0 7
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_VAR 0 1
18143: PUSH
18144: FOR_TO
18145: IFFALSE 18233
// begin k := j + d ;
18147: LD_ADDR_VAR 0 8
18151: PUSH
18152: LD_VAR 0 7
18156: PUSH
18157: LD_VAR 0 9
18161: PLUS
18162: ST_TO_ADDR
// if k > array then
18163: LD_VAR 0 8
18167: PUSH
18168: LD_VAR 0 1
18172: GREATER
18173: IFFALSE 18183
// k := 1 ;
18175: LD_ADDR_VAR 0 8
18179: PUSH
18180: LD_INT 1
18182: ST_TO_ADDR
// if not k then
18183: LD_VAR 0 8
18187: NOT
18188: IFFALSE 18200
// k := array ;
18190: LD_ADDR_VAR 0 8
18194: PUSH
18195: LD_VAR 0 1
18199: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18200: LD_ADDR_VAR 0 10
18204: PUSH
18205: LD_VAR 0 10
18209: PPUSH
18210: LD_VAR 0 8
18214: PPUSH
18215: LD_VAR 0 1
18219: PUSH
18220: LD_VAR 0 7
18224: ARRAY
18225: PPUSH
18226: CALL_OW 1
18230: ST_TO_ADDR
// end ;
18231: GO 18144
18233: POP
18234: POP
// array := tmp ;
18235: LD_ADDR_VAR 0 1
18239: PUSH
18240: LD_VAR 0 10
18244: ST_TO_ADDR
// end ;
18245: GO 18126
18247: POP
18248: POP
// result := array ;
18249: LD_ADDR_VAR 0 5
18253: PUSH
18254: LD_VAR 0 1
18258: ST_TO_ADDR
// end ;
18259: LD_VAR 0 5
18263: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18264: LD_INT 0
18266: PPUSH
18267: PPUSH
// result := 0 ;
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// if not array or not value in array then
18276: LD_VAR 0 1
18280: NOT
18281: PUSH
18282: LD_VAR 0 2
18286: PUSH
18287: LD_VAR 0 1
18291: IN
18292: NOT
18293: OR
18294: IFFALSE 18298
// exit ;
18296: GO 18352
// for i = 1 to array do
18298: LD_ADDR_VAR 0 4
18302: PUSH
18303: DOUBLE
18304: LD_INT 1
18306: DEC
18307: ST_TO_ADDR
18308: LD_VAR 0 1
18312: PUSH
18313: FOR_TO
18314: IFFALSE 18350
// if value = array [ i ] then
18316: LD_VAR 0 2
18320: PUSH
18321: LD_VAR 0 1
18325: PUSH
18326: LD_VAR 0 4
18330: ARRAY
18331: EQUAL
18332: IFFALSE 18348
// begin result := i ;
18334: LD_ADDR_VAR 0 3
18338: PUSH
18339: LD_VAR 0 4
18343: ST_TO_ADDR
// exit ;
18344: POP
18345: POP
18346: GO 18352
// end ;
18348: GO 18313
18350: POP
18351: POP
// end ;
18352: LD_VAR 0 3
18356: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18357: LD_INT 0
18359: PPUSH
// vc_chassis := chassis ;
18360: LD_ADDR_OWVAR 37
18364: PUSH
18365: LD_VAR 0 1
18369: ST_TO_ADDR
// vc_engine := engine ;
18370: LD_ADDR_OWVAR 39
18374: PUSH
18375: LD_VAR 0 2
18379: ST_TO_ADDR
// vc_control := control ;
18380: LD_ADDR_OWVAR 38
18384: PUSH
18385: LD_VAR 0 3
18389: ST_TO_ADDR
// vc_weapon := weapon ;
18390: LD_ADDR_OWVAR 40
18394: PUSH
18395: LD_VAR 0 4
18399: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18400: LD_ADDR_OWVAR 41
18404: PUSH
18405: LD_VAR 0 5
18409: ST_TO_ADDR
// end ;
18410: LD_VAR 0 6
18414: RET
// export function WantPlant ( unit ) ; var task ; begin
18415: LD_INT 0
18417: PPUSH
18418: PPUSH
// result := false ;
18419: LD_ADDR_VAR 0 2
18423: PUSH
18424: LD_INT 0
18426: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18427: LD_ADDR_VAR 0 3
18431: PUSH
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 437
18441: ST_TO_ADDR
// if task then
18442: LD_VAR 0 3
18446: IFFALSE 18474
// if task [ 1 ] [ 1 ] = p then
18448: LD_VAR 0 3
18452: PUSH
18453: LD_INT 1
18455: ARRAY
18456: PUSH
18457: LD_INT 1
18459: ARRAY
18460: PUSH
18461: LD_STRING p
18463: EQUAL
18464: IFFALSE 18474
// result := true ;
18466: LD_ADDR_VAR 0 2
18470: PUSH
18471: LD_INT 1
18473: ST_TO_ADDR
// end ;
18474: LD_VAR 0 2
18478: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
// if pos < 1 then
18485: LD_VAR 0 2
18489: PUSH
18490: LD_INT 1
18492: LESS
18493: IFFALSE 18497
// exit ;
18495: GO 18800
// if pos = 1 then
18497: LD_VAR 0 2
18501: PUSH
18502: LD_INT 1
18504: EQUAL
18505: IFFALSE 18538
// result := Replace ( arr , pos [ 1 ] , value ) else
18507: LD_ADDR_VAR 0 4
18511: PUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_VAR 0 2
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: LD_VAR 0 3
18530: PPUSH
18531: CALL_OW 1
18535: ST_TO_ADDR
18536: GO 18800
// begin tmp := arr ;
18538: LD_ADDR_VAR 0 6
18542: PUSH
18543: LD_VAR 0 1
18547: ST_TO_ADDR
// s_arr := [ tmp ] ;
18548: LD_ADDR_VAR 0 7
18552: PUSH
18553: LD_VAR 0 6
18557: PUSH
18558: EMPTY
18559: LIST
18560: ST_TO_ADDR
// for i = 1 to pos - 1 do
18561: LD_ADDR_VAR 0 5
18565: PUSH
18566: DOUBLE
18567: LD_INT 1
18569: DEC
18570: ST_TO_ADDR
18571: LD_VAR 0 2
18575: PUSH
18576: LD_INT 1
18578: MINUS
18579: PUSH
18580: FOR_TO
18581: IFFALSE 18626
// begin tmp := tmp [ pos [ i ] ] ;
18583: LD_ADDR_VAR 0 6
18587: PUSH
18588: LD_VAR 0 6
18592: PUSH
18593: LD_VAR 0 2
18597: PUSH
18598: LD_VAR 0 5
18602: ARRAY
18603: ARRAY
18604: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18605: LD_ADDR_VAR 0 7
18609: PUSH
18610: LD_VAR 0 7
18614: PUSH
18615: LD_VAR 0 6
18619: PUSH
18620: EMPTY
18621: LIST
18622: ADD
18623: ST_TO_ADDR
// end ;
18624: GO 18580
18626: POP
18627: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18628: LD_ADDR_VAR 0 6
18632: PUSH
18633: LD_VAR 0 6
18637: PPUSH
18638: LD_VAR 0 2
18642: PUSH
18643: LD_VAR 0 2
18647: ARRAY
18648: PPUSH
18649: LD_VAR 0 3
18653: PPUSH
18654: CALL_OW 1
18658: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18659: LD_ADDR_VAR 0 7
18663: PUSH
18664: LD_VAR 0 7
18668: PPUSH
18669: LD_VAR 0 7
18673: PPUSH
18674: LD_VAR 0 6
18678: PPUSH
18679: CALL_OW 1
18683: ST_TO_ADDR
// for i = s_arr downto 2 do
18684: LD_ADDR_VAR 0 5
18688: PUSH
18689: DOUBLE
18690: LD_VAR 0 7
18694: INC
18695: ST_TO_ADDR
18696: LD_INT 2
18698: PUSH
18699: FOR_DOWNTO
18700: IFFALSE 18784
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18702: LD_ADDR_VAR 0 6
18706: PUSH
18707: LD_VAR 0 7
18711: PUSH
18712: LD_VAR 0 5
18716: PUSH
18717: LD_INT 1
18719: MINUS
18720: ARRAY
18721: PPUSH
18722: LD_VAR 0 2
18726: PUSH
18727: LD_VAR 0 5
18731: PUSH
18732: LD_INT 1
18734: MINUS
18735: ARRAY
18736: PPUSH
18737: LD_VAR 0 7
18741: PUSH
18742: LD_VAR 0 5
18746: ARRAY
18747: PPUSH
18748: CALL_OW 1
18752: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18753: LD_ADDR_VAR 0 7
18757: PUSH
18758: LD_VAR 0 7
18762: PPUSH
18763: LD_VAR 0 5
18767: PUSH
18768: LD_INT 1
18770: MINUS
18771: PPUSH
18772: LD_VAR 0 6
18776: PPUSH
18777: CALL_OW 1
18781: ST_TO_ADDR
// end ;
18782: GO 18699
18784: POP
18785: POP
// result := s_arr [ 1 ] ;
18786: LD_ADDR_VAR 0 4
18790: PUSH
18791: LD_VAR 0 7
18795: PUSH
18796: LD_INT 1
18798: ARRAY
18799: ST_TO_ADDR
// end ; end ;
18800: LD_VAR 0 4
18804: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
// if not list then
18809: LD_VAR 0 1
18813: NOT
18814: IFFALSE 18818
// exit ;
18816: GO 18909
// i := list [ pos1 ] ;
18818: LD_ADDR_VAR 0 5
18822: PUSH
18823: LD_VAR 0 1
18827: PUSH
18828: LD_VAR 0 2
18832: ARRAY
18833: ST_TO_ADDR
// if not i then
18834: LD_VAR 0 5
18838: NOT
18839: IFFALSE 18843
// exit ;
18841: GO 18909
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18843: LD_ADDR_VAR 0 1
18847: PUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: LD_VAR 0 2
18857: PPUSH
18858: LD_VAR 0 1
18862: PUSH
18863: LD_VAR 0 3
18867: ARRAY
18868: PPUSH
18869: CALL_OW 1
18873: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_VAR 0 3
18888: PPUSH
18889: LD_VAR 0 5
18893: PPUSH
18894: CALL_OW 1
18898: ST_TO_ADDR
// result := list ;
18899: LD_ADDR_VAR 0 4
18903: PUSH
18904: LD_VAR 0 1
18908: ST_TO_ADDR
// end ;
18909: LD_VAR 0 4
18913: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18914: LD_INT 0
18916: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18917: LD_ADDR_VAR 0 5
18921: PUSH
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 250
18931: PPUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 251
18941: PPUSH
18942: LD_VAR 0 2
18946: PPUSH
18947: LD_VAR 0 3
18951: PPUSH
18952: LD_VAR 0 4
18956: PPUSH
18957: CALL 18967 0 5
18961: ST_TO_ADDR
// end ;
18962: LD_VAR 0 5
18966: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18967: LD_INT 0
18969: PPUSH
18970: PPUSH
18971: PPUSH
18972: PPUSH
// if not list then
18973: LD_VAR 0 3
18977: NOT
18978: IFFALSE 18982
// exit ;
18980: GO 19370
// result := [ ] ;
18982: LD_ADDR_VAR 0 6
18986: PUSH
18987: EMPTY
18988: ST_TO_ADDR
// for i in list do
18989: LD_ADDR_VAR 0 7
18993: PUSH
18994: LD_VAR 0 3
18998: PUSH
18999: FOR_IN
19000: IFFALSE 19202
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19002: LD_ADDR_VAR 0 9
19006: PUSH
19007: LD_VAR 0 7
19011: PPUSH
19012: LD_VAR 0 1
19016: PPUSH
19017: LD_VAR 0 2
19021: PPUSH
19022: CALL_OW 297
19026: ST_TO_ADDR
// if not result then
19027: LD_VAR 0 6
19031: NOT
19032: IFFALSE 19058
// result := [ [ i , tmp ] ] else
19034: LD_ADDR_VAR 0 6
19038: PUSH
19039: LD_VAR 0 7
19043: PUSH
19044: LD_VAR 0 9
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: ST_TO_ADDR
19056: GO 19200
// begin if result [ result ] [ 2 ] < tmp then
19058: LD_VAR 0 6
19062: PUSH
19063: LD_VAR 0 6
19067: ARRAY
19068: PUSH
19069: LD_INT 2
19071: ARRAY
19072: PUSH
19073: LD_VAR 0 9
19077: LESS
19078: IFFALSE 19120
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19080: LD_ADDR_VAR 0 6
19084: PUSH
19085: LD_VAR 0 6
19089: PPUSH
19090: LD_VAR 0 6
19094: PUSH
19095: LD_INT 1
19097: PLUS
19098: PPUSH
19099: LD_VAR 0 7
19103: PUSH
19104: LD_VAR 0 9
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 2
19117: ST_TO_ADDR
19118: GO 19200
// for j = 1 to result do
19120: LD_ADDR_VAR 0 8
19124: PUSH
19125: DOUBLE
19126: LD_INT 1
19128: DEC
19129: ST_TO_ADDR
19130: LD_VAR 0 6
19134: PUSH
19135: FOR_TO
19136: IFFALSE 19198
// begin if tmp < result [ j ] [ 2 ] then
19138: LD_VAR 0 9
19142: PUSH
19143: LD_VAR 0 6
19147: PUSH
19148: LD_VAR 0 8
19152: ARRAY
19153: PUSH
19154: LD_INT 2
19156: ARRAY
19157: LESS
19158: IFFALSE 19196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19160: LD_ADDR_VAR 0 6
19164: PUSH
19165: LD_VAR 0 6
19169: PPUSH
19170: LD_VAR 0 8
19174: PPUSH
19175: LD_VAR 0 7
19179: PUSH
19180: LD_VAR 0 9
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PPUSH
19189: CALL_OW 2
19193: ST_TO_ADDR
// break ;
19194: GO 19198
// end ; end ;
19196: GO 19135
19198: POP
19199: POP
// end ; end ;
19200: GO 18999
19202: POP
19203: POP
// if result and not asc then
19204: LD_VAR 0 6
19208: PUSH
19209: LD_VAR 0 4
19213: NOT
19214: AND
19215: IFFALSE 19290
// begin tmp := result ;
19217: LD_ADDR_VAR 0 9
19221: PUSH
19222: LD_VAR 0 6
19226: ST_TO_ADDR
// for i = tmp downto 1 do
19227: LD_ADDR_VAR 0 7
19231: PUSH
19232: DOUBLE
19233: LD_VAR 0 9
19237: INC
19238: ST_TO_ADDR
19239: LD_INT 1
19241: PUSH
19242: FOR_DOWNTO
19243: IFFALSE 19288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19245: LD_ADDR_VAR 0 6
19249: PUSH
19250: LD_VAR 0 6
19254: PPUSH
19255: LD_VAR 0 9
19259: PUSH
19260: LD_VAR 0 7
19264: MINUS
19265: PUSH
19266: LD_INT 1
19268: PLUS
19269: PPUSH
19270: LD_VAR 0 9
19274: PUSH
19275: LD_VAR 0 7
19279: ARRAY
19280: PPUSH
19281: CALL_OW 1
19285: ST_TO_ADDR
19286: GO 19242
19288: POP
19289: POP
// end ; tmp := [ ] ;
19290: LD_ADDR_VAR 0 9
19294: PUSH
19295: EMPTY
19296: ST_TO_ADDR
// if mode then
19297: LD_VAR 0 5
19301: IFFALSE 19370
// begin for i = 1 to result do
19303: LD_ADDR_VAR 0 7
19307: PUSH
19308: DOUBLE
19309: LD_INT 1
19311: DEC
19312: ST_TO_ADDR
19313: LD_VAR 0 6
19317: PUSH
19318: FOR_TO
19319: IFFALSE 19358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19321: LD_ADDR_VAR 0 9
19325: PUSH
19326: LD_VAR 0 9
19330: PPUSH
19331: LD_VAR 0 7
19335: PPUSH
19336: LD_VAR 0 6
19340: PUSH
19341: LD_VAR 0 7
19345: ARRAY
19346: PUSH
19347: LD_INT 1
19349: ARRAY
19350: PPUSH
19351: CALL_OW 1
19355: ST_TO_ADDR
19356: GO 19318
19358: POP
19359: POP
// result := tmp ;
19360: LD_ADDR_VAR 0 6
19364: PUSH
19365: LD_VAR 0 9
19369: ST_TO_ADDR
// end ; end ;
19370: LD_VAR 0 6
19374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
19379: PPUSH
19380: PPUSH
19381: PPUSH
19382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19383: LD_ADDR_VAR 0 5
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: EMPTY
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: ST_TO_ADDR
// if not x or not y then
19405: LD_VAR 0 2
19409: NOT
19410: PUSH
19411: LD_VAR 0 3
19415: NOT
19416: OR
19417: IFFALSE 19421
// exit ;
19419: GO 21067
// if not range then
19421: LD_VAR 0 4
19425: NOT
19426: IFFALSE 19436
// range := 10 ;
19428: LD_ADDR_VAR 0 4
19432: PUSH
19433: LD_INT 10
19435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19436: LD_ADDR_VAR 0 8
19440: PUSH
19441: LD_INT 81
19443: PUSH
19444: LD_VAR 0 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 92
19455: PUSH
19456: LD_VAR 0 2
19460: PUSH
19461: LD_VAR 0 3
19465: PUSH
19466: LD_VAR 0 4
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: LD_INT 21
19482: PUSH
19483: LD_INT 3
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: PPUSH
19499: CALL_OW 69
19503: ST_TO_ADDR
// if not tmp then
19504: LD_VAR 0 8
19508: NOT
19509: IFFALSE 19513
// exit ;
19511: GO 21067
// for i in tmp do
19513: LD_ADDR_VAR 0 6
19517: PUSH
19518: LD_VAR 0 8
19522: PUSH
19523: FOR_IN
19524: IFFALSE 21042
// begin points := [ 0 , 0 , 0 ] ;
19526: LD_ADDR_VAR 0 9
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: ST_TO_ADDR
// bpoints := 1 ;
19545: LD_ADDR_VAR 0 10
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19553: LD_VAR 0 6
19557: PPUSH
19558: CALL_OW 247
19562: PUSH
19563: LD_INT 1
19565: DOUBLE
19566: EQUAL
19567: IFTRUE 19571
19569: GO 20149
19571: POP
// begin if GetClass ( i ) = 1 then
19572: LD_VAR 0 6
19576: PPUSH
19577: CALL_OW 257
19581: PUSH
19582: LD_INT 1
19584: EQUAL
19585: IFFALSE 19606
// points := [ 10 , 5 , 3 ] ;
19587: LD_ADDR_VAR 0 9
19591: PUSH
19592: LD_INT 10
19594: PUSH
19595: LD_INT 5
19597: PUSH
19598: LD_INT 3
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19606: LD_VAR 0 6
19610: PPUSH
19611: CALL_OW 257
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: LD_INT 3
19621: PUSH
19622: LD_INT 4
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: IN
19630: IFFALSE 19651
// points := [ 3 , 2 , 1 ] ;
19632: LD_ADDR_VAR 0 9
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: LIST
19650: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19651: LD_VAR 0 6
19655: PPUSH
19656: CALL_OW 257
19660: PUSH
19661: LD_INT 5
19663: EQUAL
19664: IFFALSE 19685
// points := [ 130 , 5 , 2 ] ;
19666: LD_ADDR_VAR 0 9
19670: PUSH
19671: LD_INT 130
19673: PUSH
19674: LD_INT 5
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19685: LD_VAR 0 6
19689: PPUSH
19690: CALL_OW 257
19694: PUSH
19695: LD_INT 8
19697: EQUAL
19698: IFFALSE 19719
// points := [ 35 , 35 , 30 ] ;
19700: LD_ADDR_VAR 0 9
19704: PUSH
19705: LD_INT 35
19707: PUSH
19708: LD_INT 35
19710: PUSH
19711: LD_INT 30
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19719: LD_VAR 0 6
19723: PPUSH
19724: CALL_OW 257
19728: PUSH
19729: LD_INT 9
19731: EQUAL
19732: IFFALSE 19753
// points := [ 20 , 55 , 40 ] ;
19734: LD_ADDR_VAR 0 9
19738: PUSH
19739: LD_INT 20
19741: PUSH
19742: LD_INT 55
19744: PUSH
19745: LD_INT 40
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19753: LD_VAR 0 6
19757: PPUSH
19758: CALL_OW 257
19762: PUSH
19763: LD_INT 12
19765: PUSH
19766: LD_INT 16
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: IN
19773: IFFALSE 19794
// points := [ 5 , 3 , 2 ] ;
19775: LD_ADDR_VAR 0 9
19779: PUSH
19780: LD_INT 5
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19794: LD_VAR 0 6
19798: PPUSH
19799: CALL_OW 257
19803: PUSH
19804: LD_INT 17
19806: EQUAL
19807: IFFALSE 19828
// points := [ 100 , 50 , 75 ] ;
19809: LD_ADDR_VAR 0 9
19813: PUSH
19814: LD_INT 100
19816: PUSH
19817: LD_INT 50
19819: PUSH
19820: LD_INT 75
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19828: LD_VAR 0 6
19832: PPUSH
19833: CALL_OW 257
19837: PUSH
19838: LD_INT 15
19840: EQUAL
19841: IFFALSE 19862
// points := [ 10 , 5 , 3 ] ;
19843: LD_ADDR_VAR 0 9
19847: PUSH
19848: LD_INT 10
19850: PUSH
19851: LD_INT 5
19853: PUSH
19854: LD_INT 3
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19862: LD_VAR 0 6
19866: PPUSH
19867: CALL_OW 257
19871: PUSH
19872: LD_INT 14
19874: EQUAL
19875: IFFALSE 19896
// points := [ 10 , 0 , 0 ] ;
19877: LD_ADDR_VAR 0 9
19881: PUSH
19882: LD_INT 10
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19896: LD_VAR 0 6
19900: PPUSH
19901: CALL_OW 257
19905: PUSH
19906: LD_INT 11
19908: EQUAL
19909: IFFALSE 19930
// points := [ 30 , 10 , 5 ] ;
19911: LD_ADDR_VAR 0 9
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 10
19921: PUSH
19922: LD_INT 5
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19930: LD_VAR 0 1
19934: PPUSH
19935: LD_INT 5
19937: PPUSH
19938: CALL_OW 321
19942: PUSH
19943: LD_INT 2
19945: EQUAL
19946: IFFALSE 19963
// bpoints := bpoints * 1.8 ;
19948: LD_ADDR_VAR 0 10
19952: PUSH
19953: LD_VAR 0 10
19957: PUSH
19958: LD_REAL  1.80000000000000E+0000
19961: MUL
19962: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19963: LD_VAR 0 6
19967: PPUSH
19968: CALL_OW 257
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: LD_INT 3
19981: PUSH
19982: LD_INT 4
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: IN
19991: PUSH
19992: LD_VAR 0 1
19996: PPUSH
19997: LD_INT 51
19999: PPUSH
20000: CALL_OW 321
20004: PUSH
20005: LD_INT 2
20007: EQUAL
20008: AND
20009: IFFALSE 20026
// bpoints := bpoints * 1.2 ;
20011: LD_ADDR_VAR 0 10
20015: PUSH
20016: LD_VAR 0 10
20020: PUSH
20021: LD_REAL  1.20000000000000E+0000
20024: MUL
20025: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20026: LD_VAR 0 6
20030: PPUSH
20031: CALL_OW 257
20035: PUSH
20036: LD_INT 5
20038: PUSH
20039: LD_INT 7
20041: PUSH
20042: LD_INT 9
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: IN
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_INT 52
20058: PPUSH
20059: CALL_OW 321
20063: PUSH
20064: LD_INT 2
20066: EQUAL
20067: AND
20068: IFFALSE 20085
// bpoints := bpoints * 1.5 ;
20070: LD_ADDR_VAR 0 10
20074: PUSH
20075: LD_VAR 0 10
20079: PUSH
20080: LD_REAL  1.50000000000000E+0000
20083: MUL
20084: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_INT 66
20092: PPUSH
20093: CALL_OW 321
20097: PUSH
20098: LD_INT 2
20100: EQUAL
20101: IFFALSE 20118
// bpoints := bpoints * 1.1 ;
20103: LD_ADDR_VAR 0 10
20107: PUSH
20108: LD_VAR 0 10
20112: PUSH
20113: LD_REAL  1.10000000000000E+0000
20116: MUL
20117: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20118: LD_ADDR_VAR 0 10
20122: PUSH
20123: LD_VAR 0 10
20127: PUSH
20128: LD_VAR 0 6
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: CALL_OW 259
20140: PUSH
20141: LD_REAL  1.15000000000000E+0000
20144: MUL
20145: MUL
20146: ST_TO_ADDR
// end ; unit_vehicle :
20147: GO 20971
20149: LD_INT 2
20151: DOUBLE
20152: EQUAL
20153: IFTRUE 20157
20155: GO 20959
20157: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20158: LD_VAR 0 6
20162: PPUSH
20163: CALL_OW 264
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 42
20173: PUSH
20174: LD_INT 24
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: IN
20182: IFFALSE 20203
// points := [ 25 , 5 , 3 ] ;
20184: LD_ADDR_VAR 0 9
20188: PUSH
20189: LD_INT 25
20191: PUSH
20192: LD_INT 5
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20203: LD_VAR 0 6
20207: PPUSH
20208: CALL_OW 264
20212: PUSH
20213: LD_INT 4
20215: PUSH
20216: LD_INT 43
20218: PUSH
20219: LD_INT 25
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: IN
20227: IFFALSE 20248
// points := [ 40 , 15 , 5 ] ;
20229: LD_ADDR_VAR 0 9
20233: PUSH
20234: LD_INT 40
20236: PUSH
20237: LD_INT 15
20239: PUSH
20240: LD_INT 5
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20248: LD_VAR 0 6
20252: PPUSH
20253: CALL_OW 264
20257: PUSH
20258: LD_INT 3
20260: PUSH
20261: LD_INT 23
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: IN
20268: IFFALSE 20289
// points := [ 7 , 25 , 8 ] ;
20270: LD_ADDR_VAR 0 9
20274: PUSH
20275: LD_INT 7
20277: PUSH
20278: LD_INT 25
20280: PUSH
20281: LD_INT 8
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20289: LD_VAR 0 6
20293: PPUSH
20294: CALL_OW 264
20298: PUSH
20299: LD_INT 5
20301: PUSH
20302: LD_INT 27
20304: PUSH
20305: LD_INT 44
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: IN
20313: IFFALSE 20334
// points := [ 14 , 50 , 16 ] ;
20315: LD_ADDR_VAR 0 9
20319: PUSH
20320: LD_INT 14
20322: PUSH
20323: LD_INT 50
20325: PUSH
20326: LD_INT 16
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20334: LD_VAR 0 6
20338: PPUSH
20339: CALL_OW 264
20343: PUSH
20344: LD_INT 6
20346: PUSH
20347: LD_INT 46
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: IN
20354: IFFALSE 20375
// points := [ 32 , 120 , 70 ] ;
20356: LD_ADDR_VAR 0 9
20360: PUSH
20361: LD_INT 32
20363: PUSH
20364: LD_INT 120
20366: PUSH
20367: LD_INT 70
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20375: LD_VAR 0 6
20379: PPUSH
20380: CALL_OW 264
20384: PUSH
20385: LD_INT 7
20387: PUSH
20388: LD_INT 28
20390: PUSH
20391: LD_INT 45
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: IN
20399: IFFALSE 20420
// points := [ 35 , 20 , 45 ] ;
20401: LD_ADDR_VAR 0 9
20405: PUSH
20406: LD_INT 35
20408: PUSH
20409: LD_INT 20
20411: PUSH
20412: LD_INT 45
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20420: LD_VAR 0 6
20424: PPUSH
20425: CALL_OW 264
20429: PUSH
20430: LD_INT 47
20432: PUSH
20433: EMPTY
20434: LIST
20435: IN
20436: IFFALSE 20457
// points := [ 67 , 45 , 75 ] ;
20438: LD_ADDR_VAR 0 9
20442: PUSH
20443: LD_INT 67
20445: PUSH
20446: LD_INT 45
20448: PUSH
20449: LD_INT 75
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20457: LD_VAR 0 6
20461: PPUSH
20462: CALL_OW 264
20466: PUSH
20467: LD_INT 26
20469: PUSH
20470: EMPTY
20471: LIST
20472: IN
20473: IFFALSE 20494
// points := [ 120 , 30 , 80 ] ;
20475: LD_ADDR_VAR 0 9
20479: PUSH
20480: LD_INT 120
20482: PUSH
20483: LD_INT 30
20485: PUSH
20486: LD_INT 80
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20494: LD_VAR 0 6
20498: PPUSH
20499: CALL_OW 264
20503: PUSH
20504: LD_INT 22
20506: PUSH
20507: EMPTY
20508: LIST
20509: IN
20510: IFFALSE 20531
// points := [ 40 , 1 , 1 ] ;
20512: LD_ADDR_VAR 0 9
20516: PUSH
20517: LD_INT 40
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20531: LD_VAR 0 6
20535: PPUSH
20536: CALL_OW 264
20540: PUSH
20541: LD_INT 29
20543: PUSH
20544: EMPTY
20545: LIST
20546: IN
20547: IFFALSE 20568
// points := [ 70 , 200 , 400 ] ;
20549: LD_ADDR_VAR 0 9
20553: PUSH
20554: LD_INT 70
20556: PUSH
20557: LD_INT 200
20559: PUSH
20560: LD_INT 400
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20568: LD_VAR 0 6
20572: PPUSH
20573: CALL_OW 264
20577: PUSH
20578: LD_INT 14
20580: PUSH
20581: LD_INT 53
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: IN
20588: IFFALSE 20609
// points := [ 40 , 10 , 20 ] ;
20590: LD_ADDR_VAR 0 9
20594: PUSH
20595: LD_INT 40
20597: PUSH
20598: LD_INT 10
20600: PUSH
20601: LD_INT 20
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20609: LD_VAR 0 6
20613: PPUSH
20614: CALL_OW 264
20618: PUSH
20619: LD_INT 9
20621: PUSH
20622: EMPTY
20623: LIST
20624: IN
20625: IFFALSE 20646
// points := [ 5 , 70 , 20 ] ;
20627: LD_ADDR_VAR 0 9
20631: PUSH
20632: LD_INT 5
20634: PUSH
20635: LD_INT 70
20637: PUSH
20638: LD_INT 20
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20646: LD_VAR 0 6
20650: PPUSH
20651: CALL_OW 264
20655: PUSH
20656: LD_INT 10
20658: PUSH
20659: EMPTY
20660: LIST
20661: IN
20662: IFFALSE 20683
// points := [ 35 , 110 , 70 ] ;
20664: LD_ADDR_VAR 0 9
20668: PUSH
20669: LD_INT 35
20671: PUSH
20672: LD_INT 110
20674: PUSH
20675: LD_INT 70
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20683: LD_VAR 0 6
20687: PPUSH
20688: CALL_OW 265
20692: PUSH
20693: LD_INT 25
20695: EQUAL
20696: IFFALSE 20717
// points := [ 80 , 65 , 100 ] ;
20698: LD_ADDR_VAR 0 9
20702: PUSH
20703: LD_INT 80
20705: PUSH
20706: LD_INT 65
20708: PUSH
20709: LD_INT 100
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20717: LD_VAR 0 6
20721: PPUSH
20722: CALL_OW 263
20726: PUSH
20727: LD_INT 1
20729: EQUAL
20730: IFFALSE 20765
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20732: LD_ADDR_VAR 0 10
20736: PUSH
20737: LD_VAR 0 10
20741: PUSH
20742: LD_VAR 0 6
20746: PPUSH
20747: CALL_OW 311
20751: PPUSH
20752: LD_INT 3
20754: PPUSH
20755: CALL_OW 259
20759: PUSH
20760: LD_INT 4
20762: MUL
20763: MUL
20764: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20765: LD_VAR 0 6
20769: PPUSH
20770: CALL_OW 263
20774: PUSH
20775: LD_INT 2
20777: EQUAL
20778: IFFALSE 20829
// begin j := IsControledBy ( i ) ;
20780: LD_ADDR_VAR 0 7
20784: PUSH
20785: LD_VAR 0 6
20789: PPUSH
20790: CALL_OW 312
20794: ST_TO_ADDR
// if j then
20795: LD_VAR 0 7
20799: IFFALSE 20829
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20801: LD_ADDR_VAR 0 10
20805: PUSH
20806: LD_VAR 0 10
20810: PUSH
20811: LD_VAR 0 7
20815: PPUSH
20816: LD_INT 3
20818: PPUSH
20819: CALL_OW 259
20823: PUSH
20824: LD_INT 3
20826: MUL
20827: MUL
20828: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20829: LD_VAR 0 6
20833: PPUSH
20834: CALL_OW 264
20838: PUSH
20839: LD_INT 5
20841: PUSH
20842: LD_INT 6
20844: PUSH
20845: LD_INT 46
20847: PUSH
20848: LD_INT 44
20850: PUSH
20851: LD_INT 47
20853: PUSH
20854: LD_INT 45
20856: PUSH
20857: LD_INT 28
20859: PUSH
20860: LD_INT 7
20862: PUSH
20863: LD_INT 27
20865: PUSH
20866: LD_INT 29
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: IN
20881: PUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: LD_INT 52
20889: PPUSH
20890: CALL_OW 321
20894: PUSH
20895: LD_INT 2
20897: EQUAL
20898: AND
20899: IFFALSE 20916
// bpoints := bpoints * 1.2 ;
20901: LD_ADDR_VAR 0 10
20905: PUSH
20906: LD_VAR 0 10
20910: PUSH
20911: LD_REAL  1.20000000000000E+0000
20914: MUL
20915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20916: LD_VAR 0 6
20920: PPUSH
20921: CALL_OW 264
20925: PUSH
20926: LD_INT 6
20928: PUSH
20929: LD_INT 46
20931: PUSH
20932: LD_INT 47
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: IN
20940: IFFALSE 20957
// bpoints := bpoints * 1.2 ;
20942: LD_ADDR_VAR 0 10
20946: PUSH
20947: LD_VAR 0 10
20951: PUSH
20952: LD_REAL  1.20000000000000E+0000
20955: MUL
20956: ST_TO_ADDR
// end ; unit_building :
20957: GO 20971
20959: LD_INT 3
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20970
20967: POP
// ; end ;
20968: GO 20971
20970: POP
// for j = 1 to 3 do
20971: LD_ADDR_VAR 0 7
20975: PUSH
20976: DOUBLE
20977: LD_INT 1
20979: DEC
20980: ST_TO_ADDR
20981: LD_INT 3
20983: PUSH
20984: FOR_TO
20985: IFFALSE 21038
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20987: LD_ADDR_VAR 0 5
20991: PUSH
20992: LD_VAR 0 5
20996: PPUSH
20997: LD_VAR 0 7
21001: PPUSH
21002: LD_VAR 0 5
21006: PUSH
21007: LD_VAR 0 7
21011: ARRAY
21012: PUSH
21013: LD_VAR 0 9
21017: PUSH
21018: LD_VAR 0 7
21022: ARRAY
21023: PUSH
21024: LD_VAR 0 10
21028: MUL
21029: PLUS
21030: PPUSH
21031: CALL_OW 1
21035: ST_TO_ADDR
21036: GO 20984
21038: POP
21039: POP
// end ;
21040: GO 19523
21042: POP
21043: POP
// result := Replace ( result , 4 , tmp ) ;
21044: LD_ADDR_VAR 0 5
21048: PUSH
21049: LD_VAR 0 5
21053: PPUSH
21054: LD_INT 4
21056: PPUSH
21057: LD_VAR 0 8
21061: PPUSH
21062: CALL_OW 1
21066: ST_TO_ADDR
// end ;
21067: LD_VAR 0 5
21071: RET
// export function DangerAtRange ( unit , range ) ; begin
21072: LD_INT 0
21074: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21075: LD_ADDR_VAR 0 3
21079: PUSH
21080: LD_VAR 0 1
21084: PPUSH
21085: CALL_OW 255
21089: PPUSH
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 250
21099: PPUSH
21100: LD_VAR 0 1
21104: PPUSH
21105: CALL_OW 251
21109: PPUSH
21110: LD_VAR 0 2
21114: PPUSH
21115: CALL 19375 0 4
21119: ST_TO_ADDR
// end ;
21120: LD_VAR 0 3
21124: RET
// export function DangerInArea ( side , area ) ; begin
21125: LD_INT 0
21127: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_VAR 0 2
21137: PPUSH
21138: LD_INT 81
21140: PUSH
21141: LD_VAR 0 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PPUSH
21150: CALL_OW 70
21154: ST_TO_ADDR
// end ;
21155: LD_VAR 0 3
21159: RET
// export function IsExtension ( b ) ; begin
21160: LD_INT 0
21162: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21163: LD_ADDR_VAR 0 2
21167: PUSH
21168: LD_VAR 0 1
21172: PUSH
21173: LD_INT 23
21175: PUSH
21176: LD_INT 20
21178: PUSH
21179: LD_INT 22
21181: PUSH
21182: LD_INT 17
21184: PUSH
21185: LD_INT 24
21187: PUSH
21188: LD_INT 21
21190: PUSH
21191: LD_INT 19
21193: PUSH
21194: LD_INT 16
21196: PUSH
21197: LD_INT 25
21199: PUSH
21200: LD_INT 18
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: IN
21215: ST_TO_ADDR
// end ;
21216: LD_VAR 0 2
21220: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21221: LD_INT 0
21223: PPUSH
21224: PPUSH
21225: PPUSH
// result := [ ] ;
21226: LD_ADDR_VAR 0 3
21230: PUSH
21231: EMPTY
21232: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21233: LD_ADDR_VAR 0 4
21237: PUSH
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_INT 21
21245: PUSH
21246: LD_INT 3
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PPUSH
21253: CALL_OW 70
21257: ST_TO_ADDR
// if not tmp then
21258: LD_VAR 0 4
21262: NOT
21263: IFFALSE 21267
// exit ;
21265: GO 21325
// for i in tmp do
21267: LD_ADDR_VAR 0 5
21271: PUSH
21272: LD_VAR 0 4
21276: PUSH
21277: FOR_IN
21278: IFFALSE 21313
// if GetBase ( i ) <> base then
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL_OW 274
21289: PUSH
21290: LD_VAR 0 1
21294: NONEQUAL
21295: IFFALSE 21311
// ComLinkToBase ( base , i ) ;
21297: LD_VAR 0 1
21301: PPUSH
21302: LD_VAR 0 5
21306: PPUSH
21307: CALL_OW 169
21311: GO 21277
21313: POP
21314: POP
// result := tmp ;
21315: LD_ADDR_VAR 0 3
21319: PUSH
21320: LD_VAR 0 4
21324: ST_TO_ADDR
// end ;
21325: LD_VAR 0 3
21329: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
// if BuildingStatus ( b ) = bs_build then
21334: LD_VAR 0 2
21338: PPUSH
21339: CALL_OW 461
21343: PUSH
21344: LD_INT 1
21346: EQUAL
21347: IFFALSE 21407
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21349: LD_VAR 0 1
21353: PPUSH
21354: LD_STRING h
21356: PUSH
21357: LD_VAR 0 2
21361: PPUSH
21362: CALL_OW 250
21366: PUSH
21367: LD_VAR 0 2
21371: PPUSH
21372: CALL_OW 251
21376: PUSH
21377: LD_VAR 0 2
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: PUSH
21400: EMPTY
21401: LIST
21402: PPUSH
21403: CALL_OW 446
// end ;
21407: LD_VAR 0 3
21411: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21412: LD_INT 0
21414: PPUSH
21415: PPUSH
21416: PPUSH
21417: PPUSH
21418: PPUSH
21419: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21420: LD_VAR 0 1
21424: NOT
21425: PUSH
21426: LD_VAR 0 1
21430: PPUSH
21431: CALL_OW 263
21435: PUSH
21436: LD_INT 2
21438: EQUAL
21439: NOT
21440: OR
21441: IFFALSE 21445
// exit ;
21443: GO 21761
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21445: LD_ADDR_VAR 0 6
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 255
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 30
21472: PUSH
21473: LD_INT 36
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 34
21482: PUSH
21483: LD_INT 31
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PPUSH
21499: CALL_OW 69
21503: ST_TO_ADDR
// if not tmp then
21504: LD_VAR 0 6
21508: NOT
21509: IFFALSE 21513
// exit ;
21511: GO 21761
// result := [ ] ;
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: EMPTY
21519: ST_TO_ADDR
// for i in tmp do
21520: LD_ADDR_VAR 0 3
21524: PUSH
21525: LD_VAR 0 6
21529: PUSH
21530: FOR_IN
21531: IFFALSE 21602
// begin t := UnitsInside ( i ) ;
21533: LD_ADDR_VAR 0 4
21537: PUSH
21538: LD_VAR 0 3
21542: PPUSH
21543: CALL_OW 313
21547: ST_TO_ADDR
// if t then
21548: LD_VAR 0 4
21552: IFFALSE 21600
// for j in t do
21554: LD_ADDR_VAR 0 7
21558: PUSH
21559: LD_VAR 0 4
21563: PUSH
21564: FOR_IN
21565: IFFALSE 21598
// result := Insert ( result , result + 1 , j ) ;
21567: LD_ADDR_VAR 0 2
21571: PUSH
21572: LD_VAR 0 2
21576: PPUSH
21577: LD_VAR 0 2
21581: PUSH
21582: LD_INT 1
21584: PLUS
21585: PPUSH
21586: LD_VAR 0 7
21590: PPUSH
21591: CALL_OW 2
21595: ST_TO_ADDR
21596: GO 21564
21598: POP
21599: POP
// end ;
21600: GO 21530
21602: POP
21603: POP
// if not result then
21604: LD_VAR 0 2
21608: NOT
21609: IFFALSE 21613
// exit ;
21611: GO 21761
// mech := result [ 1 ] ;
21613: LD_ADDR_VAR 0 5
21617: PUSH
21618: LD_VAR 0 2
21622: PUSH
21623: LD_INT 1
21625: ARRAY
21626: ST_TO_ADDR
// if result > 1 then
21627: LD_VAR 0 2
21631: PUSH
21632: LD_INT 1
21634: GREATER
21635: IFFALSE 21747
// for i = 2 to result do
21637: LD_ADDR_VAR 0 3
21641: PUSH
21642: DOUBLE
21643: LD_INT 2
21645: DEC
21646: ST_TO_ADDR
21647: LD_VAR 0 2
21651: PUSH
21652: FOR_TO
21653: IFFALSE 21745
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21655: LD_ADDR_VAR 0 4
21659: PUSH
21660: LD_VAR 0 2
21664: PUSH
21665: LD_VAR 0 3
21669: ARRAY
21670: PPUSH
21671: LD_INT 3
21673: PPUSH
21674: CALL_OW 259
21678: PUSH
21679: LD_VAR 0 2
21683: PUSH
21684: LD_VAR 0 3
21688: ARRAY
21689: PPUSH
21690: CALL_OW 432
21694: MINUS
21695: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21696: LD_VAR 0 4
21700: PUSH
21701: LD_VAR 0 5
21705: PPUSH
21706: LD_INT 3
21708: PPUSH
21709: CALL_OW 259
21713: PUSH
21714: LD_VAR 0 5
21718: PPUSH
21719: CALL_OW 432
21723: MINUS
21724: GREATEREQUAL
21725: IFFALSE 21743
// mech := result [ i ] ;
21727: LD_ADDR_VAR 0 5
21731: PUSH
21732: LD_VAR 0 2
21736: PUSH
21737: LD_VAR 0 3
21741: ARRAY
21742: ST_TO_ADDR
// end ;
21743: GO 21652
21745: POP
21746: POP
// ComLinkTo ( vehicle , mech ) ;
21747: LD_VAR 0 1
21751: PPUSH
21752: LD_VAR 0 5
21756: PPUSH
21757: CALL_OW 135
// end ;
21761: LD_VAR 0 2
21765: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21766: LD_INT 0
21768: PPUSH
21769: PPUSH
21770: PPUSH
21771: PPUSH
21772: PPUSH
21773: PPUSH
21774: PPUSH
21775: PPUSH
21776: PPUSH
21777: PPUSH
21778: PPUSH
21779: PPUSH
21780: PPUSH
// result := [ ] ;
21781: LD_ADDR_VAR 0 7
21785: PUSH
21786: EMPTY
21787: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 266
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: IN
21808: NOT
21809: IFFALSE 21813
// exit ;
21811: GO 23444
// if name then
21813: LD_VAR 0 3
21817: IFFALSE 21833
// SetBName ( base_dep , name ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: CALL_OW 500
// base := GetBase ( base_dep ) ;
21833: LD_ADDR_VAR 0 15
21837: PUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 274
21847: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21848: LD_ADDR_VAR 0 16
21852: PUSH
21853: LD_VAR 0 1
21857: PPUSH
21858: CALL_OW 255
21862: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21863: LD_ADDR_VAR 0 17
21867: PUSH
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 248
21877: ST_TO_ADDR
// if sources then
21878: LD_VAR 0 5
21882: IFFALSE 21929
// for i = 1 to 3 do
21884: LD_ADDR_VAR 0 8
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21927
// AddResourceType ( base , i , sources [ i ] ) ;
21900: LD_VAR 0 15
21904: PPUSH
21905: LD_VAR 0 8
21909: PPUSH
21910: LD_VAR 0 5
21914: PUSH
21915: LD_VAR 0 8
21919: ARRAY
21920: PPUSH
21921: CALL_OW 276
21925: GO 21897
21927: POP
21928: POP
// buildings := GetBaseBuildings ( base , area ) ;
21929: LD_ADDR_VAR 0 18
21933: PUSH
21934: LD_VAR 0 15
21938: PPUSH
21939: LD_VAR 0 2
21943: PPUSH
21944: CALL 21221 0 2
21948: ST_TO_ADDR
// InitHc ;
21949: CALL_OW 19
// InitUc ;
21953: CALL_OW 18
// uc_side := side ;
21957: LD_ADDR_OWVAR 20
21961: PUSH
21962: LD_VAR 0 16
21966: ST_TO_ADDR
// uc_nation := nation ;
21967: LD_ADDR_OWVAR 21
21971: PUSH
21972: LD_VAR 0 17
21976: ST_TO_ADDR
// if buildings then
21977: LD_VAR 0 18
21981: IFFALSE 23303
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21983: LD_ADDR_VAR 0 19
21987: PUSH
21988: LD_VAR 0 18
21992: PPUSH
21993: LD_INT 2
21995: PUSH
21996: LD_INT 30
21998: PUSH
21999: LD_INT 29
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: PPUSH
22021: CALL_OW 72
22025: ST_TO_ADDR
// if tmp then
22026: LD_VAR 0 19
22030: IFFALSE 22078
// for i in tmp do
22032: LD_ADDR_VAR 0 8
22036: PUSH
22037: LD_VAR 0 19
22041: PUSH
22042: FOR_IN
22043: IFFALSE 22076
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22045: LD_VAR 0 8
22049: PPUSH
22050: CALL_OW 250
22054: PPUSH
22055: LD_VAR 0 8
22059: PPUSH
22060: CALL_OW 251
22064: PPUSH
22065: LD_VAR 0 16
22069: PPUSH
22070: CALL_OW 441
22074: GO 22042
22076: POP
22077: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22078: LD_VAR 0 18
22082: PPUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 30
22088: PUSH
22089: LD_INT 32
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 30
22098: PUSH
22099: LD_INT 33
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 72
22115: IFFALSE 22203
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22117: LD_ADDR_VAR 0 8
22121: PUSH
22122: LD_VAR 0 18
22126: PPUSH
22127: LD_INT 2
22129: PUSH
22130: LD_INT 30
22132: PUSH
22133: LD_INT 32
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 30
22142: PUSH
22143: LD_INT 33
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: PPUSH
22155: CALL_OW 72
22159: PUSH
22160: FOR_IN
22161: IFFALSE 22201
// begin if not GetBWeapon ( i ) then
22163: LD_VAR 0 8
22167: PPUSH
22168: CALL_OW 269
22172: NOT
22173: IFFALSE 22199
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22175: LD_VAR 0 8
22179: PPUSH
22180: LD_VAR 0 8
22184: PPUSH
22185: LD_VAR 0 2
22189: PPUSH
22190: CALL 23449 0 2
22194: PPUSH
22195: CALL_OW 431
// end ;
22199: GO 22160
22201: POP
22202: POP
// end ; for i = 1 to personel do
22203: LD_ADDR_VAR 0 8
22207: PUSH
22208: DOUBLE
22209: LD_INT 1
22211: DEC
22212: ST_TO_ADDR
22213: LD_VAR 0 6
22217: PUSH
22218: FOR_TO
22219: IFFALSE 23283
// begin if i > 4 then
22221: LD_VAR 0 8
22225: PUSH
22226: LD_INT 4
22228: GREATER
22229: IFFALSE 22233
// break ;
22231: GO 23283
// case i of 1 :
22233: LD_VAR 0 8
22237: PUSH
22238: LD_INT 1
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22326
22246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22247: LD_ADDR_VAR 0 12
22251: PUSH
22252: LD_VAR 0 18
22256: PPUSH
22257: LD_INT 22
22259: PUSH
22260: LD_VAR 0 16
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 58
22271: PUSH
22272: EMPTY
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 30
22280: PUSH
22281: LD_INT 32
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 30
22290: PUSH
22291: LD_INT 4
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 30
22300: PUSH
22301: LD_INT 5
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 72
22323: ST_TO_ADDR
22324: GO 22548
22326: LD_INT 2
22328: DOUBLE
22329: EQUAL
22330: IFTRUE 22334
22332: GO 22396
22334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22335: LD_ADDR_VAR 0 12
22339: PUSH
22340: LD_VAR 0 18
22344: PPUSH
22345: LD_INT 22
22347: PUSH
22348: LD_VAR 0 16
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: LD_INT 30
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 30
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PPUSH
22389: CALL_OW 72
22393: ST_TO_ADDR
22394: GO 22548
22396: LD_INT 3
22398: DOUBLE
22399: EQUAL
22400: IFTRUE 22404
22402: GO 22466
22404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22405: LD_ADDR_VAR 0 12
22409: PUSH
22410: LD_VAR 0 18
22414: PPUSH
22415: LD_INT 22
22417: PUSH
22418: LD_VAR 0 16
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 30
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 30
22442: PUSH
22443: LD_INT 3
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 72
22463: ST_TO_ADDR
22464: GO 22548
22466: LD_INT 4
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22547
22474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22475: LD_ADDR_VAR 0 12
22479: PUSH
22480: LD_VAR 0 18
22484: PPUSH
22485: LD_INT 22
22487: PUSH
22488: LD_VAR 0 16
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: LD_INT 30
22502: PUSH
22503: LD_INT 6
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 30
22512: PUSH
22513: LD_INT 7
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 30
22522: PUSH
22523: LD_INT 8
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PPUSH
22540: CALL_OW 72
22544: ST_TO_ADDR
22545: GO 22548
22547: POP
// if i = 1 then
22548: LD_VAR 0 8
22552: PUSH
22553: LD_INT 1
22555: EQUAL
22556: IFFALSE 22667
// begin tmp := [ ] ;
22558: LD_ADDR_VAR 0 19
22562: PUSH
22563: EMPTY
22564: ST_TO_ADDR
// for j in f do
22565: LD_ADDR_VAR 0 9
22569: PUSH
22570: LD_VAR 0 12
22574: PUSH
22575: FOR_IN
22576: IFFALSE 22649
// if GetBType ( j ) = b_bunker then
22578: LD_VAR 0 9
22582: PPUSH
22583: CALL_OW 266
22587: PUSH
22588: LD_INT 32
22590: EQUAL
22591: IFFALSE 22618
// tmp := Insert ( tmp , 1 , j ) else
22593: LD_ADDR_VAR 0 19
22597: PUSH
22598: LD_VAR 0 19
22602: PPUSH
22603: LD_INT 1
22605: PPUSH
22606: LD_VAR 0 9
22610: PPUSH
22611: CALL_OW 2
22615: ST_TO_ADDR
22616: GO 22647
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22618: LD_ADDR_VAR 0 19
22622: PUSH
22623: LD_VAR 0 19
22627: PPUSH
22628: LD_VAR 0 19
22632: PUSH
22633: LD_INT 1
22635: PLUS
22636: PPUSH
22637: LD_VAR 0 9
22641: PPUSH
22642: CALL_OW 2
22646: ST_TO_ADDR
22647: GO 22575
22649: POP
22650: POP
// if tmp then
22651: LD_VAR 0 19
22655: IFFALSE 22667
// f := tmp ;
22657: LD_ADDR_VAR 0 12
22661: PUSH
22662: LD_VAR 0 19
22666: ST_TO_ADDR
// end ; x := personel [ i ] ;
22667: LD_ADDR_VAR 0 13
22671: PUSH
22672: LD_VAR 0 6
22676: PUSH
22677: LD_VAR 0 8
22681: ARRAY
22682: ST_TO_ADDR
// if x = - 1 then
22683: LD_VAR 0 13
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: EQUAL
22692: IFFALSE 22901
// begin for j in f do
22694: LD_ADDR_VAR 0 9
22698: PUSH
22699: LD_VAR 0 12
22703: PUSH
22704: FOR_IN
22705: IFFALSE 22897
// repeat InitHc ;
22707: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22711: LD_VAR 0 9
22715: PPUSH
22716: CALL_OW 266
22720: PUSH
22721: LD_INT 5
22723: EQUAL
22724: IFFALSE 22794
// begin if UnitsInside ( j ) < 3 then
22726: LD_VAR 0 9
22730: PPUSH
22731: CALL_OW 313
22735: PUSH
22736: LD_INT 3
22738: LESS
22739: IFFALSE 22775
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22741: LD_INT 0
22743: PPUSH
22744: LD_INT 5
22746: PUSH
22747: LD_INT 8
22749: PUSH
22750: LD_INT 9
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_VAR 0 17
22762: ARRAY
22763: PPUSH
22764: LD_VAR 0 4
22768: PPUSH
22769: CALL_OW 380
22773: GO 22792
// PrepareHuman ( false , i , skill ) ;
22775: LD_INT 0
22777: PPUSH
22778: LD_VAR 0 8
22782: PPUSH
22783: LD_VAR 0 4
22787: PPUSH
22788: CALL_OW 380
// end else
22792: GO 22811
// PrepareHuman ( false , i , skill ) ;
22794: LD_INT 0
22796: PPUSH
22797: LD_VAR 0 8
22801: PPUSH
22802: LD_VAR 0 4
22806: PPUSH
22807: CALL_OW 380
// un := CreateHuman ;
22811: LD_ADDR_VAR 0 14
22815: PUSH
22816: CALL_OW 44
22820: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22821: LD_ADDR_VAR 0 7
22825: PUSH
22826: LD_VAR 0 7
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: LD_VAR 0 14
22838: PPUSH
22839: CALL_OW 2
22843: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22844: LD_VAR 0 14
22848: PPUSH
22849: LD_VAR 0 9
22853: PPUSH
22854: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22858: LD_VAR 0 9
22862: PPUSH
22863: CALL_OW 313
22867: PUSH
22868: LD_INT 6
22870: EQUAL
22871: PUSH
22872: LD_VAR 0 9
22876: PPUSH
22877: CALL_OW 266
22881: PUSH
22882: LD_INT 32
22884: PUSH
22885: LD_INT 31
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: IN
22892: OR
22893: IFFALSE 22707
22895: GO 22704
22897: POP
22898: POP
// end else
22899: GO 23281
// for j = 1 to x do
22901: LD_ADDR_VAR 0 9
22905: PUSH
22906: DOUBLE
22907: LD_INT 1
22909: DEC
22910: ST_TO_ADDR
22911: LD_VAR 0 13
22915: PUSH
22916: FOR_TO
22917: IFFALSE 23279
// begin InitHc ;
22919: CALL_OW 19
// if not f then
22923: LD_VAR 0 12
22927: NOT
22928: IFFALSE 23017
// begin PrepareHuman ( false , i , skill ) ;
22930: LD_INT 0
22932: PPUSH
22933: LD_VAR 0 8
22937: PPUSH
22938: LD_VAR 0 4
22942: PPUSH
22943: CALL_OW 380
// un := CreateHuman ;
22947: LD_ADDR_VAR 0 14
22951: PUSH
22952: CALL_OW 44
22956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22957: LD_ADDR_VAR 0 7
22961: PUSH
22962: LD_VAR 0 7
22966: PPUSH
22967: LD_INT 1
22969: PPUSH
22970: LD_VAR 0 14
22974: PPUSH
22975: CALL_OW 2
22979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22980: LD_VAR 0 14
22984: PPUSH
22985: LD_VAR 0 1
22989: PPUSH
22990: CALL_OW 250
22994: PPUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 251
23004: PPUSH
23005: LD_INT 10
23007: PPUSH
23008: LD_INT 0
23010: PPUSH
23011: CALL_OW 50
// continue ;
23015: GO 22916
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23017: LD_VAR 0 12
23021: PUSH
23022: LD_INT 1
23024: ARRAY
23025: PPUSH
23026: CALL_OW 313
23030: PUSH
23031: LD_VAR 0 12
23035: PUSH
23036: LD_INT 1
23038: ARRAY
23039: PPUSH
23040: CALL_OW 266
23044: PUSH
23045: LD_INT 32
23047: PUSH
23048: LD_INT 31
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: IN
23055: AND
23056: PUSH
23057: LD_VAR 0 12
23061: PUSH
23062: LD_INT 1
23064: ARRAY
23065: PPUSH
23066: CALL_OW 313
23070: PUSH
23071: LD_INT 6
23073: EQUAL
23074: OR
23075: IFFALSE 23095
// f := Delete ( f , 1 ) ;
23077: LD_ADDR_VAR 0 12
23081: PUSH
23082: LD_VAR 0 12
23086: PPUSH
23087: LD_INT 1
23089: PPUSH
23090: CALL_OW 3
23094: ST_TO_ADDR
// if not f then
23095: LD_VAR 0 12
23099: NOT
23100: IFFALSE 23118
// begin x := x + 2 ;
23102: LD_ADDR_VAR 0 13
23106: PUSH
23107: LD_VAR 0 13
23111: PUSH
23112: LD_INT 2
23114: PLUS
23115: ST_TO_ADDR
// continue ;
23116: GO 22916
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23118: LD_VAR 0 12
23122: PUSH
23123: LD_INT 1
23125: ARRAY
23126: PPUSH
23127: CALL_OW 266
23131: PUSH
23132: LD_INT 5
23134: EQUAL
23135: IFFALSE 23209
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23137: LD_VAR 0 12
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: PPUSH
23146: CALL_OW 313
23150: PUSH
23151: LD_INT 3
23153: LESS
23154: IFFALSE 23190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23156: LD_INT 0
23158: PPUSH
23159: LD_INT 5
23161: PUSH
23162: LD_INT 8
23164: PUSH
23165: LD_INT 9
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: PUSH
23173: LD_VAR 0 17
23177: ARRAY
23178: PPUSH
23179: LD_VAR 0 4
23183: PPUSH
23184: CALL_OW 380
23188: GO 23207
// PrepareHuman ( false , i , skill ) ;
23190: LD_INT 0
23192: PPUSH
23193: LD_VAR 0 8
23197: PPUSH
23198: LD_VAR 0 4
23202: PPUSH
23203: CALL_OW 380
// end else
23207: GO 23226
// PrepareHuman ( false , i , skill ) ;
23209: LD_INT 0
23211: PPUSH
23212: LD_VAR 0 8
23216: PPUSH
23217: LD_VAR 0 4
23221: PPUSH
23222: CALL_OW 380
// un := CreateHuman ;
23226: LD_ADDR_VAR 0 14
23230: PUSH
23231: CALL_OW 44
23235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23236: LD_ADDR_VAR 0 7
23240: PUSH
23241: LD_VAR 0 7
23245: PPUSH
23246: LD_INT 1
23248: PPUSH
23249: LD_VAR 0 14
23253: PPUSH
23254: CALL_OW 2
23258: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23259: LD_VAR 0 14
23263: PPUSH
23264: LD_VAR 0 12
23268: PUSH
23269: LD_INT 1
23271: ARRAY
23272: PPUSH
23273: CALL_OW 52
// end ;
23277: GO 22916
23279: POP
23280: POP
// end ;
23281: GO 22218
23283: POP
23284: POP
// result := result ^ buildings ;
23285: LD_ADDR_VAR 0 7
23289: PUSH
23290: LD_VAR 0 7
23294: PUSH
23295: LD_VAR 0 18
23299: ADD
23300: ST_TO_ADDR
// end else
23301: GO 23444
// begin for i = 1 to personel do
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: DOUBLE
23309: LD_INT 1
23311: DEC
23312: ST_TO_ADDR
23313: LD_VAR 0 6
23317: PUSH
23318: FOR_TO
23319: IFFALSE 23442
// begin if i > 4 then
23321: LD_VAR 0 8
23325: PUSH
23326: LD_INT 4
23328: GREATER
23329: IFFALSE 23333
// break ;
23331: GO 23442
// x := personel [ i ] ;
23333: LD_ADDR_VAR 0 13
23337: PUSH
23338: LD_VAR 0 6
23342: PUSH
23343: LD_VAR 0 8
23347: ARRAY
23348: ST_TO_ADDR
// if x = - 1 then
23349: LD_VAR 0 13
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: EQUAL
23358: IFFALSE 23362
// continue ;
23360: GO 23318
// PrepareHuman ( false , i , skill ) ;
23362: LD_INT 0
23364: PPUSH
23365: LD_VAR 0 8
23369: PPUSH
23370: LD_VAR 0 4
23374: PPUSH
23375: CALL_OW 380
// un := CreateHuman ;
23379: LD_ADDR_VAR 0 14
23383: PUSH
23384: CALL_OW 44
23388: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23389: LD_VAR 0 14
23393: PPUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 250
23403: PPUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 251
23413: PPUSH
23414: LD_INT 10
23416: PPUSH
23417: LD_INT 0
23419: PPUSH
23420: CALL_OW 50
// result := result ^ un ;
23424: LD_ADDR_VAR 0 7
23428: PUSH
23429: LD_VAR 0 7
23433: PUSH
23434: LD_VAR 0 14
23438: ADD
23439: ST_TO_ADDR
// end ;
23440: GO 23318
23442: POP
23443: POP
// end ; end ;
23444: LD_VAR 0 7
23448: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23449: LD_INT 0
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
// result := false ;
23467: LD_ADDR_VAR 0 3
23471: PUSH
23472: LD_INT 0
23474: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23475: LD_VAR 0 1
23479: NOT
23480: PUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 266
23490: PUSH
23491: LD_INT 32
23493: PUSH
23494: LD_INT 33
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: IN
23501: NOT
23502: OR
23503: IFFALSE 23507
// exit ;
23505: GO 24643
// nat := GetNation ( tower ) ;
23507: LD_ADDR_VAR 0 12
23511: PUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 248
23521: ST_TO_ADDR
// side := GetSide ( tower ) ;
23522: LD_ADDR_VAR 0 16
23526: PUSH
23527: LD_VAR 0 1
23531: PPUSH
23532: CALL_OW 255
23536: ST_TO_ADDR
// x := GetX ( tower ) ;
23537: LD_ADDR_VAR 0 10
23541: PUSH
23542: LD_VAR 0 1
23546: PPUSH
23547: CALL_OW 250
23551: ST_TO_ADDR
// y := GetY ( tower ) ;
23552: LD_ADDR_VAR 0 11
23556: PUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 251
23566: ST_TO_ADDR
// if not x or not y then
23567: LD_VAR 0 10
23571: NOT
23572: PUSH
23573: LD_VAR 0 11
23577: NOT
23578: OR
23579: IFFALSE 23583
// exit ;
23581: GO 24643
// weapon := 0 ;
23583: LD_ADDR_VAR 0 18
23587: PUSH
23588: LD_INT 0
23590: ST_TO_ADDR
// fac_list := [ ] ;
23591: LD_ADDR_VAR 0 17
23595: PUSH
23596: EMPTY
23597: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23598: LD_ADDR_VAR 0 6
23602: PUSH
23603: LD_VAR 0 1
23607: PPUSH
23608: CALL_OW 274
23612: PPUSH
23613: LD_VAR 0 2
23617: PPUSH
23618: CALL 21221 0 2
23622: PPUSH
23623: LD_INT 30
23625: PUSH
23626: LD_INT 3
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PPUSH
23633: CALL_OW 72
23637: ST_TO_ADDR
// if not factories then
23638: LD_VAR 0 6
23642: NOT
23643: IFFALSE 23647
// exit ;
23645: GO 24643
// for i in factories do
23647: LD_ADDR_VAR 0 8
23651: PUSH
23652: LD_VAR 0 6
23656: PUSH
23657: FOR_IN
23658: IFFALSE 23683
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23660: LD_ADDR_VAR 0 17
23664: PUSH
23665: LD_VAR 0 17
23669: PUSH
23670: LD_VAR 0 8
23674: PPUSH
23675: CALL_OW 478
23679: UNION
23680: ST_TO_ADDR
23681: GO 23657
23683: POP
23684: POP
// if not fac_list then
23685: LD_VAR 0 17
23689: NOT
23690: IFFALSE 23694
// exit ;
23692: GO 24643
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23694: LD_ADDR_VAR 0 5
23698: PUSH
23699: LD_INT 4
23701: PUSH
23702: LD_INT 5
23704: PUSH
23705: LD_INT 9
23707: PUSH
23708: LD_INT 10
23710: PUSH
23711: LD_INT 6
23713: PUSH
23714: LD_INT 7
23716: PUSH
23717: LD_INT 11
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 27
23731: PUSH
23732: LD_INT 28
23734: PUSH
23735: LD_INT 26
23737: PUSH
23738: LD_INT 30
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 43
23749: PUSH
23750: LD_INT 44
23752: PUSH
23753: LD_INT 46
23755: PUSH
23756: LD_INT 45
23758: PUSH
23759: LD_INT 47
23761: PUSH
23762: LD_INT 49
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: PUSH
23778: LD_VAR 0 12
23782: ARRAY
23783: ST_TO_ADDR
// for i in list do
23784: LD_ADDR_VAR 0 8
23788: PUSH
23789: LD_VAR 0 5
23793: PUSH
23794: FOR_IN
23795: IFFALSE 23828
// if not i in fac_list then
23797: LD_VAR 0 8
23801: PUSH
23802: LD_VAR 0 17
23806: IN
23807: NOT
23808: IFFALSE 23826
// list := list diff i ;
23810: LD_ADDR_VAR 0 5
23814: PUSH
23815: LD_VAR 0 5
23819: PUSH
23820: LD_VAR 0 8
23824: DIFF
23825: ST_TO_ADDR
23826: GO 23794
23828: POP
23829: POP
// if not list then
23830: LD_VAR 0 5
23834: NOT
23835: IFFALSE 23839
// exit ;
23837: GO 24643
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23839: LD_VAR 0 12
23843: PUSH
23844: LD_INT 3
23846: EQUAL
23847: PUSH
23848: LD_INT 49
23850: PUSH
23851: LD_VAR 0 5
23855: IN
23856: AND
23857: PUSH
23858: LD_INT 31
23860: PPUSH
23861: LD_VAR 0 16
23865: PPUSH
23866: CALL_OW 321
23870: PUSH
23871: LD_INT 2
23873: EQUAL
23874: AND
23875: IFFALSE 23935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23877: LD_INT 22
23879: PUSH
23880: LD_VAR 0 16
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 35
23891: PUSH
23892: LD_INT 49
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 91
23901: PUSH
23902: LD_VAR 0 1
23906: PUSH
23907: LD_INT 10
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: PPUSH
23920: CALL_OW 69
23924: NOT
23925: IFFALSE 23935
// weapon := ru_time_lapser ;
23927: LD_ADDR_VAR 0 18
23931: PUSH
23932: LD_INT 49
23934: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23935: LD_VAR 0 12
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: IN
23950: PUSH
23951: LD_INT 11
23953: PUSH
23954: LD_VAR 0 5
23958: IN
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_VAR 0 5
23967: IN
23968: OR
23969: AND
23970: PUSH
23971: LD_INT 6
23973: PPUSH
23974: LD_VAR 0 16
23978: PPUSH
23979: CALL_OW 321
23983: PUSH
23984: LD_INT 2
23986: EQUAL
23987: AND
23988: IFFALSE 24153
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23990: LD_INT 22
23992: PUSH
23993: LD_VAR 0 16
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 35
24007: PUSH
24008: LD_INT 11
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 35
24017: PUSH
24018: LD_INT 30
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 91
24032: PUSH
24033: LD_VAR 0 1
24037: PUSH
24038: LD_INT 18
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: PPUSH
24051: CALL_OW 69
24055: NOT
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_VAR 0 16
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 32
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 30
24084: PUSH
24085: LD_INT 33
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 91
24099: PUSH
24100: LD_VAR 0 1
24104: PUSH
24105: LD_INT 12
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: LIST
24117: PUSH
24118: EMPTY
24119: LIST
24120: PPUSH
24121: CALL_OW 69
24125: PUSH
24126: LD_INT 2
24128: GREATER
24129: AND
24130: IFFALSE 24153
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24132: LD_ADDR_VAR 0 18
24136: PUSH
24137: LD_INT 11
24139: PUSH
24140: LD_INT 30
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_VAR 0 12
24151: ARRAY
24152: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24153: LD_VAR 0 18
24157: NOT
24158: PUSH
24159: LD_INT 40
24161: PPUSH
24162: LD_VAR 0 16
24166: PPUSH
24167: CALL_OW 321
24171: PUSH
24172: LD_INT 2
24174: EQUAL
24175: AND
24176: PUSH
24177: LD_INT 7
24179: PUSH
24180: LD_VAR 0 5
24184: IN
24185: PUSH
24186: LD_INT 28
24188: PUSH
24189: LD_VAR 0 5
24193: IN
24194: OR
24195: PUSH
24196: LD_INT 45
24198: PUSH
24199: LD_VAR 0 5
24203: IN
24204: OR
24205: AND
24206: IFFALSE 24460
// begin hex := GetHexInfo ( x , y ) ;
24208: LD_ADDR_VAR 0 4
24212: PUSH
24213: LD_VAR 0 10
24217: PPUSH
24218: LD_VAR 0 11
24222: PPUSH
24223: CALL_OW 546
24227: ST_TO_ADDR
// if hex [ 1 ] then
24228: LD_VAR 0 4
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: IFFALSE 24240
// exit ;
24238: GO 24643
// height := hex [ 2 ] ;
24240: LD_ADDR_VAR 0 15
24244: PUSH
24245: LD_VAR 0 4
24249: PUSH
24250: LD_INT 2
24252: ARRAY
24253: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24254: LD_ADDR_VAR 0 14
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 3
24267: PUSH
24268: LD_INT 5
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: ST_TO_ADDR
// for i in tmp do
24277: LD_ADDR_VAR 0 8
24281: PUSH
24282: LD_VAR 0 14
24286: PUSH
24287: FOR_IN
24288: IFFALSE 24458
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24290: LD_ADDR_VAR 0 9
24294: PUSH
24295: LD_VAR 0 10
24299: PPUSH
24300: LD_VAR 0 8
24304: PPUSH
24305: LD_INT 5
24307: PPUSH
24308: CALL_OW 272
24312: PUSH
24313: LD_VAR 0 11
24317: PPUSH
24318: LD_VAR 0 8
24322: PPUSH
24323: LD_INT 5
24325: PPUSH
24326: CALL_OW 273
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24335: LD_VAR 0 9
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PPUSH
24344: LD_VAR 0 9
24348: PUSH
24349: LD_INT 2
24351: ARRAY
24352: PPUSH
24353: CALL_OW 488
24357: IFFALSE 24456
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24359: LD_ADDR_VAR 0 4
24363: PUSH
24364: LD_VAR 0 9
24368: PUSH
24369: LD_INT 1
24371: ARRAY
24372: PPUSH
24373: LD_VAR 0 9
24377: PUSH
24378: LD_INT 2
24380: ARRAY
24381: PPUSH
24382: CALL_OW 546
24386: ST_TO_ADDR
// if hex [ 1 ] then
24387: LD_VAR 0 4
24391: PUSH
24392: LD_INT 1
24394: ARRAY
24395: IFFALSE 24399
// continue ;
24397: GO 24287
// h := hex [ 2 ] ;
24399: LD_ADDR_VAR 0 13
24403: PUSH
24404: LD_VAR 0 4
24408: PUSH
24409: LD_INT 2
24411: ARRAY
24412: ST_TO_ADDR
// if h + 7 < height then
24413: LD_VAR 0 13
24417: PUSH
24418: LD_INT 7
24420: PLUS
24421: PUSH
24422: LD_VAR 0 15
24426: LESS
24427: IFFALSE 24456
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24429: LD_ADDR_VAR 0 18
24433: PUSH
24434: LD_INT 7
24436: PUSH
24437: LD_INT 28
24439: PUSH
24440: LD_INT 45
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: PUSH
24448: LD_VAR 0 12
24452: ARRAY
24453: ST_TO_ADDR
// break ;
24454: GO 24458
// end ; end ; end ;
24456: GO 24287
24458: POP
24459: POP
// end ; if not weapon then
24460: LD_VAR 0 18
24464: NOT
24465: IFFALSE 24525
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24467: LD_ADDR_VAR 0 5
24471: PUSH
24472: LD_VAR 0 5
24476: PUSH
24477: LD_INT 11
24479: PUSH
24480: LD_INT 30
24482: PUSH
24483: LD_INT 49
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: DIFF
24491: ST_TO_ADDR
// if not list then
24492: LD_VAR 0 5
24496: NOT
24497: IFFALSE 24501
// exit ;
24499: GO 24643
// weapon := list [ rand ( 1 , list ) ] ;
24501: LD_ADDR_VAR 0 18
24505: PUSH
24506: LD_VAR 0 5
24510: PUSH
24511: LD_INT 1
24513: PPUSH
24514: LD_VAR 0 5
24518: PPUSH
24519: CALL_OW 12
24523: ARRAY
24524: ST_TO_ADDR
// end ; if weapon then
24525: LD_VAR 0 18
24529: IFFALSE 24643
// begin tmp := CostOfWeapon ( weapon ) ;
24531: LD_ADDR_VAR 0 14
24535: PUSH
24536: LD_VAR 0 18
24540: PPUSH
24541: CALL_OW 451
24545: ST_TO_ADDR
// j := GetBase ( tower ) ;
24546: LD_ADDR_VAR 0 9
24550: PUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 274
24560: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24561: LD_VAR 0 9
24565: PPUSH
24566: LD_INT 1
24568: PPUSH
24569: CALL_OW 275
24573: PUSH
24574: LD_VAR 0 14
24578: PUSH
24579: LD_INT 1
24581: ARRAY
24582: GREATEREQUAL
24583: PUSH
24584: LD_VAR 0 9
24588: PPUSH
24589: LD_INT 2
24591: PPUSH
24592: CALL_OW 275
24596: PUSH
24597: LD_VAR 0 14
24601: PUSH
24602: LD_INT 2
24604: ARRAY
24605: GREATEREQUAL
24606: AND
24607: PUSH
24608: LD_VAR 0 9
24612: PPUSH
24613: LD_INT 3
24615: PPUSH
24616: CALL_OW 275
24620: PUSH
24621: LD_VAR 0 14
24625: PUSH
24626: LD_INT 3
24628: ARRAY
24629: GREATEREQUAL
24630: AND
24631: IFFALSE 24643
// result := weapon ;
24633: LD_ADDR_VAR 0 3
24637: PUSH
24638: LD_VAR 0 18
24642: ST_TO_ADDR
// end ; end ;
24643: LD_VAR 0 3
24647: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24648: LD_INT 0
24650: PPUSH
24651: PPUSH
// result := true ;
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_INT 1
24659: ST_TO_ADDR
// if array1 = array2 then
24660: LD_VAR 0 1
24664: PUSH
24665: LD_VAR 0 2
24669: EQUAL
24670: IFFALSE 24730
// begin for i = 1 to array1 do
24672: LD_ADDR_VAR 0 4
24676: PUSH
24677: DOUBLE
24678: LD_INT 1
24680: DEC
24681: ST_TO_ADDR
24682: LD_VAR 0 1
24686: PUSH
24687: FOR_TO
24688: IFFALSE 24726
// if array1 [ i ] <> array2 [ i ] then
24690: LD_VAR 0 1
24694: PUSH
24695: LD_VAR 0 4
24699: ARRAY
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: LD_VAR 0 4
24710: ARRAY
24711: NONEQUAL
24712: IFFALSE 24724
// begin result := false ;
24714: LD_ADDR_VAR 0 3
24718: PUSH
24719: LD_INT 0
24721: ST_TO_ADDR
// break ;
24722: GO 24726
// end ;
24724: GO 24687
24726: POP
24727: POP
// end else
24728: GO 24738
// result := false ;
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 0
24737: ST_TO_ADDR
// end ;
24738: LD_VAR 0 3
24742: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24743: LD_INT 0
24745: PPUSH
24746: PPUSH
24747: PPUSH
// pom := GetBase ( fac ) ;
24748: LD_ADDR_VAR 0 5
24752: PUSH
24753: LD_VAR 0 1
24757: PPUSH
24758: CALL_OW 274
24762: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24763: LD_ADDR_VAR 0 4
24767: PUSH
24768: LD_VAR 0 2
24772: PUSH
24773: LD_INT 1
24775: ARRAY
24776: PPUSH
24777: LD_VAR 0 2
24781: PUSH
24782: LD_INT 2
24784: ARRAY
24785: PPUSH
24786: LD_VAR 0 2
24790: PUSH
24791: LD_INT 3
24793: ARRAY
24794: PPUSH
24795: LD_VAR 0 2
24799: PUSH
24800: LD_INT 4
24802: ARRAY
24803: PPUSH
24804: CALL_OW 449
24808: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24809: LD_ADDR_VAR 0 3
24813: PUSH
24814: LD_VAR 0 5
24818: PPUSH
24819: LD_INT 1
24821: PPUSH
24822: CALL_OW 275
24826: PUSH
24827: LD_VAR 0 4
24831: PUSH
24832: LD_INT 1
24834: ARRAY
24835: GREATEREQUAL
24836: PUSH
24837: LD_VAR 0 5
24841: PPUSH
24842: LD_INT 2
24844: PPUSH
24845: CALL_OW 275
24849: PUSH
24850: LD_VAR 0 4
24854: PUSH
24855: LD_INT 2
24857: ARRAY
24858: GREATEREQUAL
24859: AND
24860: PUSH
24861: LD_VAR 0 5
24865: PPUSH
24866: LD_INT 3
24868: PPUSH
24869: CALL_OW 275
24873: PUSH
24874: LD_VAR 0 4
24878: PUSH
24879: LD_INT 3
24881: ARRAY
24882: GREATEREQUAL
24883: AND
24884: ST_TO_ADDR
// end ;
24885: LD_VAR 0 3
24889: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24890: LD_INT 0
24892: PPUSH
24893: PPUSH
24894: PPUSH
24895: PPUSH
// pom := GetBase ( building ) ;
24896: LD_ADDR_VAR 0 3
24900: PUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 274
24910: ST_TO_ADDR
// if not pom then
24911: LD_VAR 0 3
24915: NOT
24916: IFFALSE 24920
// exit ;
24918: GO 25090
// btype := GetBType ( building ) ;
24920: LD_ADDR_VAR 0 5
24924: PUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 266
24934: ST_TO_ADDR
// if btype = b_armoury then
24935: LD_VAR 0 5
24939: PUSH
24940: LD_INT 4
24942: EQUAL
24943: IFFALSE 24953
// btype := b_barracks ;
24945: LD_ADDR_VAR 0 5
24949: PUSH
24950: LD_INT 5
24952: ST_TO_ADDR
// if btype = b_depot then
24953: LD_VAR 0 5
24957: PUSH
24958: LD_INT 0
24960: EQUAL
24961: IFFALSE 24971
// btype := b_warehouse ;
24963: LD_ADDR_VAR 0 5
24967: PUSH
24968: LD_INT 1
24970: ST_TO_ADDR
// if btype = b_workshop then
24971: LD_VAR 0 5
24975: PUSH
24976: LD_INT 2
24978: EQUAL
24979: IFFALSE 24989
// btype := b_factory ;
24981: LD_ADDR_VAR 0 5
24985: PUSH
24986: LD_INT 3
24988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24989: LD_ADDR_VAR 0 4
24993: PUSH
24994: LD_VAR 0 5
24998: PPUSH
24999: LD_VAR 0 1
25003: PPUSH
25004: CALL_OW 248
25008: PPUSH
25009: CALL_OW 450
25013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25014: LD_ADDR_VAR 0 2
25018: PUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: CALL_OW 275
25031: PUSH
25032: LD_VAR 0 4
25036: PUSH
25037: LD_INT 1
25039: ARRAY
25040: GREATEREQUAL
25041: PUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: LD_INT 2
25049: PPUSH
25050: CALL_OW 275
25054: PUSH
25055: LD_VAR 0 4
25059: PUSH
25060: LD_INT 2
25062: ARRAY
25063: GREATEREQUAL
25064: AND
25065: PUSH
25066: LD_VAR 0 3
25070: PPUSH
25071: LD_INT 3
25073: PPUSH
25074: CALL_OW 275
25078: PUSH
25079: LD_VAR 0 4
25083: PUSH
25084: LD_INT 3
25086: ARRAY
25087: GREATEREQUAL
25088: AND
25089: ST_TO_ADDR
// end ;
25090: LD_VAR 0 2
25094: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25095: LD_INT 0
25097: PPUSH
25098: PPUSH
25099: PPUSH
// pom := GetBase ( building ) ;
25100: LD_ADDR_VAR 0 4
25104: PUSH
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL_OW 274
25114: ST_TO_ADDR
// if not pom then
25115: LD_VAR 0 4
25119: NOT
25120: IFFALSE 25124
// exit ;
25122: GO 25225
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25124: LD_ADDR_VAR 0 5
25128: PUSH
25129: LD_VAR 0 2
25133: PPUSH
25134: LD_VAR 0 1
25138: PPUSH
25139: CALL_OW 248
25143: PPUSH
25144: CALL_OW 450
25148: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_VAR 0 4
25158: PPUSH
25159: LD_INT 1
25161: PPUSH
25162: CALL_OW 275
25166: PUSH
25167: LD_VAR 0 5
25171: PUSH
25172: LD_INT 1
25174: ARRAY
25175: GREATEREQUAL
25176: PUSH
25177: LD_VAR 0 4
25181: PPUSH
25182: LD_INT 2
25184: PPUSH
25185: CALL_OW 275
25189: PUSH
25190: LD_VAR 0 5
25194: PUSH
25195: LD_INT 2
25197: ARRAY
25198: GREATEREQUAL
25199: AND
25200: PUSH
25201: LD_VAR 0 4
25205: PPUSH
25206: LD_INT 3
25208: PPUSH
25209: CALL_OW 275
25213: PUSH
25214: LD_VAR 0 5
25218: PUSH
25219: LD_INT 3
25221: ARRAY
25222: GREATEREQUAL
25223: AND
25224: ST_TO_ADDR
// end ;
25225: LD_VAR 0 3
25229: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
// result := false ;
25242: LD_ADDR_VAR 0 6
25246: PUSH
25247: LD_INT 0
25249: ST_TO_ADDR
// if not base or not btype or not x or not y then
25250: LD_VAR 0 1
25254: NOT
25255: PUSH
25256: LD_VAR 0 2
25260: NOT
25261: OR
25262: PUSH
25263: LD_VAR 0 3
25267: NOT
25268: OR
25269: PUSH
25270: LD_VAR 0 4
25274: NOT
25275: OR
25276: IFFALSE 25280
// exit ;
25278: GO 25889
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25280: LD_ADDR_VAR 0 12
25284: PUSH
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_VAR 0 3
25294: PPUSH
25295: LD_VAR 0 4
25299: PPUSH
25300: LD_VAR 0 5
25304: PPUSH
25305: LD_VAR 0 1
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: CALL_OW 248
25318: PPUSH
25319: LD_INT 0
25321: PPUSH
25322: CALL 26726 0 6
25326: ST_TO_ADDR
// if not hexes then
25327: LD_VAR 0 12
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 25889
// for i = 1 to hexes do
25336: LD_ADDR_VAR 0 7
25340: PUSH
25341: DOUBLE
25342: LD_INT 1
25344: DEC
25345: ST_TO_ADDR
25346: LD_VAR 0 12
25350: PUSH
25351: FOR_TO
25352: IFFALSE 25887
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25354: LD_ADDR_VAR 0 11
25358: PUSH
25359: LD_VAR 0 12
25363: PUSH
25364: LD_VAR 0 7
25368: ARRAY
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PPUSH
25374: LD_VAR 0 12
25378: PUSH
25379: LD_VAR 0 7
25383: ARRAY
25384: PUSH
25385: LD_INT 2
25387: ARRAY
25388: PPUSH
25389: CALL_OW 428
25393: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25394: LD_VAR 0 12
25398: PUSH
25399: LD_VAR 0 7
25403: ARRAY
25404: PUSH
25405: LD_INT 1
25407: ARRAY
25408: PPUSH
25409: LD_VAR 0 12
25413: PUSH
25414: LD_VAR 0 7
25418: ARRAY
25419: PUSH
25420: LD_INT 2
25422: ARRAY
25423: PPUSH
25424: CALL_OW 351
25428: PUSH
25429: LD_VAR 0 12
25433: PUSH
25434: LD_VAR 0 7
25438: ARRAY
25439: PUSH
25440: LD_INT 1
25442: ARRAY
25443: PPUSH
25444: LD_VAR 0 12
25448: PUSH
25449: LD_VAR 0 7
25453: ARRAY
25454: PUSH
25455: LD_INT 2
25457: ARRAY
25458: PPUSH
25459: CALL_OW 488
25463: NOT
25464: OR
25465: PUSH
25466: LD_VAR 0 11
25470: PPUSH
25471: CALL_OW 247
25475: PUSH
25476: LD_INT 3
25478: EQUAL
25479: OR
25480: IFFALSE 25486
// exit ;
25482: POP
25483: POP
25484: GO 25889
// if not tmp or not tmp in base then
25486: LD_VAR 0 11
25490: NOT
25491: PUSH
25492: LD_VAR 0 11
25496: PUSH
25497: LD_VAR 0 1
25501: IN
25502: NOT
25503: OR
25504: IFFALSE 25508
// continue ;
25506: GO 25351
// result := true ;
25508: LD_ADDR_VAR 0 6
25512: PUSH
25513: LD_INT 1
25515: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25516: LD_ADDR_VAR 0 15
25520: PUSH
25521: LD_VAR 0 1
25525: PPUSH
25526: LD_INT 22
25528: PUSH
25529: LD_VAR 0 11
25533: PPUSH
25534: CALL_OW 255
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 30
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 30
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PPUSH
25575: CALL_OW 72
25579: ST_TO_ADDR
// if dep then
25580: LD_VAR 0 15
25584: IFFALSE 25720
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25586: LD_ADDR_VAR 0 14
25590: PUSH
25591: LD_VAR 0 15
25595: PUSH
25596: LD_INT 1
25598: ARRAY
25599: PPUSH
25600: CALL_OW 250
25604: PPUSH
25605: LD_VAR 0 15
25609: PUSH
25610: LD_INT 1
25612: ARRAY
25613: PPUSH
25614: CALL_OW 254
25618: PPUSH
25619: LD_INT 5
25621: PPUSH
25622: CALL_OW 272
25626: PUSH
25627: LD_VAR 0 15
25631: PUSH
25632: LD_INT 1
25634: ARRAY
25635: PPUSH
25636: CALL_OW 251
25640: PPUSH
25641: LD_VAR 0 15
25645: PUSH
25646: LD_INT 1
25648: ARRAY
25649: PPUSH
25650: CALL_OW 254
25654: PPUSH
25655: LD_INT 5
25657: PPUSH
25658: CALL_OW 273
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25667: LD_VAR 0 14
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PPUSH
25676: LD_VAR 0 14
25680: PUSH
25681: LD_INT 2
25683: ARRAY
25684: PPUSH
25685: CALL_OW 488
25689: IFFALSE 25720
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25691: LD_VAR 0 11
25695: PPUSH
25696: LD_VAR 0 14
25700: PUSH
25701: LD_INT 1
25703: ARRAY
25704: PPUSH
25705: LD_VAR 0 14
25709: PUSH
25710: LD_INT 2
25712: ARRAY
25713: PPUSH
25714: CALL_OW 111
// continue ;
25718: GO 25351
// end ; end ; r := GetDir ( tmp ) ;
25720: LD_ADDR_VAR 0 13
25724: PUSH
25725: LD_VAR 0 11
25729: PPUSH
25730: CALL_OW 254
25734: ST_TO_ADDR
// if r = 5 then
25735: LD_VAR 0 13
25739: PUSH
25740: LD_INT 5
25742: EQUAL
25743: IFFALSE 25753
// r := 0 ;
25745: LD_ADDR_VAR 0 13
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// for j = r to 5 do
25753: LD_ADDR_VAR 0 8
25757: PUSH
25758: DOUBLE
25759: LD_VAR 0 13
25763: DEC
25764: ST_TO_ADDR
25765: LD_INT 5
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25883
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25771: LD_ADDR_VAR 0 9
25775: PUSH
25776: LD_VAR 0 11
25780: PPUSH
25781: CALL_OW 250
25785: PPUSH
25786: LD_VAR 0 8
25790: PPUSH
25791: LD_INT 2
25793: PPUSH
25794: CALL_OW 272
25798: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25799: LD_ADDR_VAR 0 10
25803: PUSH
25804: LD_VAR 0 11
25808: PPUSH
25809: CALL_OW 251
25813: PPUSH
25814: LD_VAR 0 8
25818: PPUSH
25819: LD_INT 2
25821: PPUSH
25822: CALL_OW 273
25826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25827: LD_VAR 0 9
25831: PPUSH
25832: LD_VAR 0 10
25836: PPUSH
25837: CALL_OW 488
25841: PUSH
25842: LD_VAR 0 9
25846: PPUSH
25847: LD_VAR 0 10
25851: PPUSH
25852: CALL_OW 428
25856: NOT
25857: AND
25858: IFFALSE 25881
// begin ComMoveXY ( tmp , _x , _y ) ;
25860: LD_VAR 0 11
25864: PPUSH
25865: LD_VAR 0 9
25869: PPUSH
25870: LD_VAR 0 10
25874: PPUSH
25875: CALL_OW 111
// break ;
25879: GO 25883
// end ; end ;
25881: GO 25768
25883: POP
25884: POP
// end ;
25885: GO 25351
25887: POP
25888: POP
// end ;
25889: LD_VAR 0 6
25893: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25894: LD_INT 0
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
25903: PPUSH
25904: PPUSH
25905: PPUSH
// result := false ;
25906: LD_ADDR_VAR 0 6
25910: PUSH
25911: LD_INT 0
25913: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25914: LD_VAR 0 1
25918: NOT
25919: PUSH
25920: LD_VAR 0 1
25924: PPUSH
25925: CALL_OW 266
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: IN
25940: NOT
25941: OR
25942: PUSH
25943: LD_VAR 0 2
25947: NOT
25948: OR
25949: PUSH
25950: LD_VAR 0 5
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: LD_INT 4
25969: PUSH
25970: LD_INT 5
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: IN
25981: NOT
25982: OR
25983: PUSH
25984: LD_VAR 0 3
25988: PPUSH
25989: LD_VAR 0 4
25993: PPUSH
25994: CALL_OW 488
25998: NOT
25999: OR
26000: IFFALSE 26004
// exit ;
26002: GO 26721
// pom := GetBase ( depot ) ;
26004: LD_ADDR_VAR 0 10
26008: PUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 274
26018: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26019: LD_ADDR_VAR 0 11
26023: PUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 248
26038: PPUSH
26039: CALL_OW 450
26043: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26044: LD_VAR 0 10
26048: PPUSH
26049: LD_INT 1
26051: PPUSH
26052: CALL_OW 275
26056: PUSH
26057: LD_VAR 0 11
26061: PUSH
26062: LD_INT 1
26064: ARRAY
26065: GREATEREQUAL
26066: PUSH
26067: LD_VAR 0 10
26071: PPUSH
26072: LD_INT 2
26074: PPUSH
26075: CALL_OW 275
26079: PUSH
26080: LD_VAR 0 11
26084: PUSH
26085: LD_INT 2
26087: ARRAY
26088: GREATEREQUAL
26089: AND
26090: PUSH
26091: LD_VAR 0 10
26095: PPUSH
26096: LD_INT 3
26098: PPUSH
26099: CALL_OW 275
26103: PUSH
26104: LD_VAR 0 11
26108: PUSH
26109: LD_INT 3
26111: ARRAY
26112: GREATEREQUAL
26113: AND
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26721
// if GetBType ( depot ) = b_depot then
26119: LD_VAR 0 1
26123: PPUSH
26124: CALL_OW 266
26128: PUSH
26129: LD_INT 0
26131: EQUAL
26132: IFFALSE 26144
// dist := 28 else
26134: LD_ADDR_VAR 0 14
26138: PUSH
26139: LD_INT 28
26141: ST_TO_ADDR
26142: GO 26152
// dist := 36 ;
26144: LD_ADDR_VAR 0 14
26148: PUSH
26149: LD_INT 36
26151: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26152: LD_VAR 0 1
26156: PPUSH
26157: LD_VAR 0 3
26161: PPUSH
26162: LD_VAR 0 4
26166: PPUSH
26167: CALL_OW 297
26171: PUSH
26172: LD_VAR 0 14
26176: GREATER
26177: IFFALSE 26181
// exit ;
26179: GO 26721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26181: LD_ADDR_VAR 0 12
26185: PUSH
26186: LD_VAR 0 2
26190: PPUSH
26191: LD_VAR 0 3
26195: PPUSH
26196: LD_VAR 0 4
26200: PPUSH
26201: LD_VAR 0 5
26205: PPUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 248
26215: PPUSH
26216: LD_INT 0
26218: PPUSH
26219: CALL 26726 0 6
26223: ST_TO_ADDR
// if not hexes then
26224: LD_VAR 0 12
26228: NOT
26229: IFFALSE 26233
// exit ;
26231: GO 26721
// hex := GetHexInfo ( x , y ) ;
26233: LD_ADDR_VAR 0 15
26237: PUSH
26238: LD_VAR 0 3
26242: PPUSH
26243: LD_VAR 0 4
26247: PPUSH
26248: CALL_OW 546
26252: ST_TO_ADDR
// if hex [ 1 ] then
26253: LD_VAR 0 15
26257: PUSH
26258: LD_INT 1
26260: ARRAY
26261: IFFALSE 26265
// exit ;
26263: GO 26721
// height := hex [ 2 ] ;
26265: LD_ADDR_VAR 0 13
26269: PUSH
26270: LD_VAR 0 15
26274: PUSH
26275: LD_INT 2
26277: ARRAY
26278: ST_TO_ADDR
// for i = 1 to hexes do
26279: LD_ADDR_VAR 0 7
26283: PUSH
26284: DOUBLE
26285: LD_INT 1
26287: DEC
26288: ST_TO_ADDR
26289: LD_VAR 0 12
26293: PUSH
26294: FOR_TO
26295: IFFALSE 26625
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26297: LD_VAR 0 12
26301: PUSH
26302: LD_VAR 0 7
26306: ARRAY
26307: PUSH
26308: LD_INT 1
26310: ARRAY
26311: PPUSH
26312: LD_VAR 0 12
26316: PUSH
26317: LD_VAR 0 7
26321: ARRAY
26322: PUSH
26323: LD_INT 2
26325: ARRAY
26326: PPUSH
26327: CALL_OW 488
26331: NOT
26332: PUSH
26333: LD_VAR 0 12
26337: PUSH
26338: LD_VAR 0 7
26342: ARRAY
26343: PUSH
26344: LD_INT 1
26346: ARRAY
26347: PPUSH
26348: LD_VAR 0 12
26352: PUSH
26353: LD_VAR 0 7
26357: ARRAY
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 428
26367: PUSH
26368: LD_INT 0
26370: GREATER
26371: OR
26372: PUSH
26373: LD_VAR 0 12
26377: PUSH
26378: LD_VAR 0 7
26382: ARRAY
26383: PUSH
26384: LD_INT 1
26386: ARRAY
26387: PPUSH
26388: LD_VAR 0 12
26392: PUSH
26393: LD_VAR 0 7
26397: ARRAY
26398: PUSH
26399: LD_INT 2
26401: ARRAY
26402: PPUSH
26403: CALL_OW 351
26407: OR
26408: IFFALSE 26414
// exit ;
26410: POP
26411: POP
26412: GO 26721
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26414: LD_ADDR_VAR 0 8
26418: PUSH
26419: LD_VAR 0 12
26423: PUSH
26424: LD_VAR 0 7
26428: ARRAY
26429: PUSH
26430: LD_INT 1
26432: ARRAY
26433: PPUSH
26434: LD_VAR 0 12
26438: PUSH
26439: LD_VAR 0 7
26443: ARRAY
26444: PUSH
26445: LD_INT 2
26447: ARRAY
26448: PPUSH
26449: CALL_OW 546
26453: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26454: LD_VAR 0 8
26458: PUSH
26459: LD_INT 1
26461: ARRAY
26462: PUSH
26463: LD_VAR 0 8
26467: PUSH
26468: LD_INT 2
26470: ARRAY
26471: PUSH
26472: LD_VAR 0 13
26476: PUSH
26477: LD_INT 2
26479: PLUS
26480: GREATER
26481: OR
26482: PUSH
26483: LD_VAR 0 8
26487: PUSH
26488: LD_INT 2
26490: ARRAY
26491: PUSH
26492: LD_VAR 0 13
26496: PUSH
26497: LD_INT 2
26499: MINUS
26500: LESS
26501: OR
26502: PUSH
26503: LD_VAR 0 8
26507: PUSH
26508: LD_INT 3
26510: ARRAY
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 8
26517: PUSH
26518: LD_INT 9
26520: PUSH
26521: LD_INT 10
26523: PUSH
26524: LD_INT 11
26526: PUSH
26527: LD_INT 12
26529: PUSH
26530: LD_INT 13
26532: PUSH
26533: LD_INT 16
26535: PUSH
26536: LD_INT 17
26538: PUSH
26539: LD_INT 18
26541: PUSH
26542: LD_INT 19
26544: PUSH
26545: LD_INT 20
26547: PUSH
26548: LD_INT 21
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: IN
26566: NOT
26567: OR
26568: PUSH
26569: LD_VAR 0 8
26573: PUSH
26574: LD_INT 5
26576: ARRAY
26577: NOT
26578: OR
26579: PUSH
26580: LD_VAR 0 8
26584: PUSH
26585: LD_INT 6
26587: ARRAY
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: LD_INT 2
26594: PUSH
26595: LD_INT 7
26597: PUSH
26598: LD_INT 9
26600: PUSH
26601: LD_INT 10
26603: PUSH
26604: LD_INT 11
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: IN
26615: NOT
26616: OR
26617: IFFALSE 26623
// exit ;
26619: POP
26620: POP
26621: GO 26721
// end ;
26623: GO 26294
26625: POP
26626: POP
// side := GetSide ( depot ) ;
26627: LD_ADDR_VAR 0 9
26631: PUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL_OW 255
26641: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26642: LD_VAR 0 9
26646: PPUSH
26647: LD_VAR 0 3
26651: PPUSH
26652: LD_VAR 0 4
26656: PPUSH
26657: LD_INT 20
26659: PPUSH
26660: CALL 19375 0 4
26664: PUSH
26665: LD_INT 4
26667: ARRAY
26668: IFFALSE 26672
// exit ;
26670: GO 26721
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26672: LD_VAR 0 2
26676: PUSH
26677: LD_INT 29
26679: PUSH
26680: LD_INT 30
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: IN
26687: PUSH
26688: LD_VAR 0 3
26692: PPUSH
26693: LD_VAR 0 4
26697: PPUSH
26698: LD_VAR 0 9
26702: PPUSH
26703: CALL_OW 440
26707: NOT
26708: AND
26709: IFFALSE 26713
// exit ;
26711: GO 26721
// result := true ;
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: LD_INT 1
26720: ST_TO_ADDR
// end ;
26721: LD_VAR 0 6
26725: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
26756: PPUSH
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
26771: PPUSH
26772: PPUSH
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
// result = [ ] ;
26786: LD_ADDR_VAR 0 7
26790: PUSH
26791: EMPTY
26792: ST_TO_ADDR
// temp_list = [ ] ;
26793: LD_ADDR_VAR 0 9
26797: PUSH
26798: EMPTY
26799: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26800: LD_VAR 0 4
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: LD_INT 4
26819: PUSH
26820: LD_INT 5
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: IN
26831: NOT
26832: PUSH
26833: LD_VAR 0 1
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: IN
26848: PUSH
26849: LD_VAR 0 5
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 3
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: IN
26868: NOT
26869: AND
26870: OR
26871: IFFALSE 26875
// exit ;
26873: GO 45266
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26875: LD_VAR 0 1
26879: PUSH
26880: LD_INT 6
26882: PUSH
26883: LD_INT 7
26885: PUSH
26886: LD_INT 8
26888: PUSH
26889: LD_INT 13
26891: PUSH
26892: LD_INT 12
26894: PUSH
26895: LD_INT 15
26897: PUSH
26898: LD_INT 11
26900: PUSH
26901: LD_INT 14
26903: PUSH
26904: LD_INT 10
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: IN
26918: IFFALSE 26928
// btype = b_lab ;
26920: LD_ADDR_VAR 0 1
26924: PUSH
26925: LD_INT 6
26927: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26928: LD_VAR 0 6
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: IN
26947: NOT
26948: PUSH
26949: LD_VAR 0 1
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 6
26968: PUSH
26969: LD_INT 36
26971: PUSH
26972: LD_INT 4
26974: PUSH
26975: LD_INT 5
26977: PUSH
26978: LD_INT 31
26980: PUSH
26981: LD_INT 32
26983: PUSH
26984: LD_INT 33
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: IN
27000: NOT
27001: PUSH
27002: LD_VAR 0 6
27006: PUSH
27007: LD_INT 1
27009: EQUAL
27010: AND
27011: OR
27012: PUSH
27013: LD_VAR 0 1
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: LD_INT 3
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: IN
27028: NOT
27029: PUSH
27030: LD_VAR 0 6
27034: PUSH
27035: LD_INT 2
27037: EQUAL
27038: AND
27039: OR
27040: IFFALSE 27050
// mode = 0 ;
27042: LD_ADDR_VAR 0 6
27046: PUSH
27047: LD_INT 0
27049: ST_TO_ADDR
// case mode of 0 :
27050: LD_VAR 0 6
27054: PUSH
27055: LD_INT 0
27057: DOUBLE
27058: EQUAL
27059: IFTRUE 27063
27061: GO 38516
27063: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27064: LD_ADDR_VAR 0 11
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 2
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27257: LD_ADDR_VAR 0 12
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 2
27380: NEG
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: NEG
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 3
27425: NEG
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27453: LD_ADDR_VAR 0 13
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: NEG
27589: PUSH
27590: LD_INT 2
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: NEG
27601: PUSH
27602: LD_INT 3
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 3
27612: NEG
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 3
27624: NEG
27625: PUSH
27626: LD_INT 3
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27652: LD_ADDR_VAR 0 14
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 2
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 3
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: LD_INT 3
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: LD_INT 2
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27848: LD_ADDR_VAR 0 15
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28041: LD_ADDR_VAR 0 16
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 1
28114: NEG
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 2
28176: NEG
28177: PUSH
28178: LD_INT 2
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28234: LD_ADDR_VAR 0 17
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 2
28421: NEG
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: LD_INT 2
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28464: LD_ADDR_VAR 0 18
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: NEG
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28694: LD_ADDR_VAR 0 19
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 2
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: NEG
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 2
28893: NEG
28894: PUSH
28895: LD_INT 2
28897: NEG
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28924: LD_ADDR_VAR 0 20
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 2
29100: NEG
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: LD_INT 2
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29154: LD_ADDR_VAR 0 21
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 2
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: NEG
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 2
29353: NEG
29354: PUSH
29355: LD_INT 2
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29384: LD_ADDR_VAR 0 22
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 2
29571: NEG
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29614: LD_ADDR_VAR 0 23
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: LD_INT 1
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: NEG
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 1
29695: NEG
29696: PUSH
29697: LD_INT 2
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 2
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 1
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 2
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29894: LD_ADDR_VAR 0 24
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 2
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 2
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: LD_INT 1
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 2
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 2
30070: NEG
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30170: LD_ADDR_VAR 0 25
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 2
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: NEG
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: NEG
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30444: LD_ADDR_VAR 0 26
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: LD_INT 2
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 1
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 2
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30720: LD_ADDR_VAR 0 27
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: LD_INT 1
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: LD_INT 2
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 2
30942: NEG
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31000: LD_ADDR_VAR 0 28
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: NEG
31188: PUSH
31189: LD_INT 1
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 2
31199: NEG
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 2
31211: NEG
31212: PUSH
31213: LD_INT 3
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 3
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 3
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31282: LD_ADDR_VAR 0 29
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: NEG
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: NEG
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 3
31526: NEG
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31561: LD_ADDR_VAR 0 30
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 3
31804: NEG
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31839: LD_ADDR_VAR 0 31
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 2
32028: NEG
32029: PUSH
32030: LD_INT 3
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: NEG
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32117: LD_ADDR_VAR 0 32
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 2
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: NEG
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 3
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32395: LD_ADDR_VAR 0 33
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: LD_INT 2
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: NEG
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 3
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 3
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 3
32639: NEG
32640: PUSH
32641: LD_INT 2
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32674: LD_ADDR_VAR 0 34
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 3
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 3
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32954: LD_ADDR_VAR 0 35
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: NEG
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33066: LD_ADDR_VAR 0 36
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33178: LD_ADDR_VAR 0 37
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33290: LD_ADDR_VAR 0 38
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33402: LD_ADDR_VAR 0 39
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33514: LD_ADDR_VAR 0 40
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33626: LD_ADDR_VAR 0 41
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 2
33740: PUSH
33741: LD_INT 1
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 2
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 3
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 3
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: NEG
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 3
33935: NEG
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33976: LD_ADDR_VAR 0 42
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: LD_INT 2
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 2
34142: NEG
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: NEG
34155: PUSH
34156: LD_INT 2
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: LD_INT 3
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 3
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 2
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: LD_INT 3
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 3
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: NEG
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 3
34285: NEG
34286: PUSH
34287: LD_INT 3
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34326: LD_ADDR_VAR 0 43
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 3
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 3
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 2
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34674: LD_ADDR_VAR 0 44
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: NEG
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: LD_INT 3
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: NEG
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 3
34948: NEG
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 3
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 3
34971: NEG
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: NEG
34984: PUSH
34985: LD_INT 3
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35024: LD_ADDR_VAR 0 45
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 3
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 3
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 3
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 3
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 3
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 3
35333: NEG
35334: PUSH
35335: LD_INT 3
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35374: LD_ADDR_VAR 0 46
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: LD_INT 3
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 3
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 3
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: NEG
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35722: LD_ADDR_VAR 0 47
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35873: LD_ADDR_VAR 0 48
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36020: LD_ADDR_VAR 0 49
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 1
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36164: LD_ADDR_VAR 0 50
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 2
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36308: LD_ADDR_VAR 0 51
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36455: LD_ADDR_VAR 0 52
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36606: LD_ADDR_VAR 0 53
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: LD_INT 1
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 2
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 2
36741: PUSH
36742: LD_INT 2
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 2
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36836: LD_ADDR_VAR 0 54
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37066: LD_ADDR_VAR 0 55
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37296: LD_ADDR_VAR 0 56
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 2
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 2
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37526: LD_ADDR_VAR 0 57
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: LD_INT 1
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 2
37713: NEG
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: NEG
37726: PUSH
37727: LD_INT 2
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37756: LD_ADDR_VAR 0 58
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37986: LD_ADDR_VAR 0 59
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38074: LD_ADDR_VAR 0 60
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38162: LD_ADDR_VAR 0 61
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38250: LD_ADDR_VAR 0 62
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38338: LD_ADDR_VAR 0 63
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38426: LD_ADDR_VAR 0 64
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
// end ; 1 :
38514: GO 44411
38516: LD_INT 1
38518: DOUBLE
38519: EQUAL
38520: IFTRUE 38524
38522: GO 41147
38524: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38525: LD_ADDR_VAR 0 11
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 3
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38569: LD_ADDR_VAR 0 12
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38610: LD_ADDR_VAR 0 13
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38650: LD_ADDR_VAR 0 14
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 3
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 3
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: LIST
38690: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38691: LD_ADDR_VAR 0 15
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 3
38709: NEG
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38735: LD_ADDR_VAR 0 16
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 3
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 3
38766: NEG
38767: PUSH
38768: LD_INT 3
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38781: LD_ADDR_VAR 0 17
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 3
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 3
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38825: LD_ADDR_VAR 0 18
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38866: LD_ADDR_VAR 0 19
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38906: LD_ADDR_VAR 0 20
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 3
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38947: LD_ADDR_VAR 0 21
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 3
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 3
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38991: LD_ADDR_VAR 0 22
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 3
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 3
39022: NEG
39023: PUSH
39024: LD_INT 3
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39037: LD_ADDR_VAR 0 23
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 3
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: LD_INT 4
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: LD_INT 3
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39081: LD_ADDR_VAR 0 24
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39122: LD_ADDR_VAR 0 25
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 4
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: LD_INT 4
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39162: LD_ADDR_VAR 0 26
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 4
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39203: LD_ADDR_VAR 0 27
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 3
39221: NEG
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 4
39232: NEG
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39247: LD_ADDR_VAR 0 28
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: LD_INT 4
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 4
39278: NEG
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39293: LD_ADDR_VAR 0 29
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 3
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 3
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 4
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 4
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 3
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 5
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 5
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 4
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 6
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 6
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 5
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39448: LD_ADDR_VAR 0 30
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 3
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 3
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 4
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 4
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 4
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 5
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 5
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 5
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 6
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 6
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39591: LD_ADDR_VAR 0 31
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 4
39638: PUSH
39639: LD_INT 4
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: LD_INT 4
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 5
39658: PUSH
39659: LD_INT 4
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 5
39668: PUSH
39669: LD_INT 5
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 4
39678: PUSH
39679: LD_INT 5
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 6
39688: PUSH
39689: LD_INT 5
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 6
39698: PUSH
39699: LD_INT 6
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 5
39708: PUSH
39709: LD_INT 6
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39730: LD_ADDR_VAR 0 32
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 4
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 4
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 5
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 5
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 4
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 6
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 6
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 5
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39873: LD_ADDR_VAR 0 33
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 3
39891: NEG
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 4
39925: NEG
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 4
39936: NEG
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 4
39948: NEG
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 5
39959: NEG
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 5
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 5
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 6
39993: NEG
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 6
40004: NEG
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40028: LD_ADDR_VAR 0 34
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 3
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 3
40047: NEG
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: LD_INT 3
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 3
40071: NEG
40072: PUSH
40073: LD_INT 4
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 4
40083: NEG
40084: PUSH
40085: LD_INT 3
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 4
40095: NEG
40096: PUSH
40097: LD_INT 4
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 4
40107: NEG
40108: PUSH
40109: LD_INT 5
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 5
40119: NEG
40120: PUSH
40121: LD_INT 4
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 5
40131: NEG
40132: PUSH
40133: LD_INT 5
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 5
40143: NEG
40144: PUSH
40145: LD_INT 6
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 6
40155: NEG
40156: PUSH
40157: LD_INT 5
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 6
40167: NEG
40168: PUSH
40169: LD_INT 6
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40191: LD_ADDR_VAR 0 41
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 3
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40235: LD_ADDR_VAR 0 42
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40276: LD_ADDR_VAR 0 43
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 3
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40316: LD_ADDR_VAR 0 44
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40357: LD_ADDR_VAR 0 45
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 3
40386: NEG
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40401: LD_ADDR_VAR 0 46
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: LD_INT 3
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 3
40432: NEG
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40447: LD_ADDR_VAR 0 47
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 3
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40480: LD_ADDR_VAR 0 48
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40511: LD_ADDR_VAR 0 49
40515: PUSH
40516: LD_INT 3
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 3
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40540: LD_ADDR_VAR 0 50
40544: PUSH
40545: LD_INT 2
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40569: LD_ADDR_VAR 0 51
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40600: LD_ADDR_VAR 0 52
40604: PUSH
40605: LD_INT 3
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: NEG
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40633: LD_ADDR_VAR 0 53
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 3
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 3
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40677: LD_ADDR_VAR 0 54
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 3
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 3
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40718: LD_ADDR_VAR 0 55
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40758: LD_ADDR_VAR 0 56
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40799: LD_ADDR_VAR 0 57
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 3
40817: NEG
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 3
40828: NEG
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40843: LD_ADDR_VAR 0 58
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 3
40862: NEG
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 3
40874: NEG
40875: PUSH
40876: LD_INT 3
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40889: LD_ADDR_VAR 0 59
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40933: LD_ADDR_VAR 0 60
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40974: LD_ADDR_VAR 0 61
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41014: LD_ADDR_VAR 0 62
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41055: LD_ADDR_VAR 0 63
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41099: LD_ADDR_VAR 0 64
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// end ; 2 :
41145: GO 44411
41147: LD_INT 2
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 44410
41155: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41156: LD_ADDR_VAR 0 29
41160: PUSH
41161: LD_INT 4
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 4
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 5
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 5
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 4
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 3
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 5
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 4
41276: PUSH
41277: LD_INT 3
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 4
41286: PUSH
41287: LD_INT 4
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: LD_INT 4
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 4
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 4
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 4
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 3
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 4
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 5
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 5
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 4
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 5
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: NEG
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 4
41495: NEG
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 4
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 4
41518: NEG
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 4
41541: NEG
41542: PUSH
41543: LD_INT 4
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 4
41553: NEG
41554: PUSH
41555: LD_INT 5
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: LD_INT 4
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 3
41577: NEG
41578: PUSH
41579: LD_INT 3
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 4
41589: NEG
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 5
41601: NEG
41602: PUSH
41603: LD_INT 4
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 5
41613: NEG
41614: PUSH
41615: LD_INT 5
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 3
41625: NEG
41626: PUSH
41627: LD_INT 5
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 5
41637: NEG
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41694: LD_ADDR_VAR 0 30
41698: PUSH
41699: LD_INT 4
41701: PUSH
41702: LD_INT 4
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 5
41721: PUSH
41722: LD_INT 4
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 5
41731: PUSH
41732: LD_INT 5
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 4
41741: PUSH
41742: LD_INT 5
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: LD_INT 4
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: LD_INT 3
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 5
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 5
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 4
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 4
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 4
41884: NEG
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 4
41895: NEG
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: NEG
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 3
41918: NEG
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 4
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 5
41940: NEG
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 5
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 5
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 3
41975: NEG
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: NEG
41999: PUSH
42000: LD_INT 4
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 3
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 4
42046: NEG
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 4
42058: NEG
42059: PUSH
42060: LD_INT 4
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: LD_INT 4
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 4
42082: NEG
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 4
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 5
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 4
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 3
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 3
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 4
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 5
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 3
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: LD_INT 5
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42241: LD_ADDR_VAR 0 31
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 4
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 4
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 5
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 5
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 4
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 3
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: LD_INT 5
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: NEG
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 4
42397: NEG
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 4
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 4
42420: NEG
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 4
42443: NEG
42444: PUSH
42445: LD_INT 4
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 4
42455: NEG
42456: PUSH
42457: LD_INT 5
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: NEG
42468: PUSH
42469: LD_INT 4
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 4
42491: NEG
42492: PUSH
42493: LD_INT 3
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 5
42503: NEG
42504: PUSH
42505: LD_INT 4
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 5
42515: NEG
42516: PUSH
42517: LD_INT 5
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: NEG
42528: PUSH
42529: LD_INT 5
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 5
42539: NEG
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 3
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 4
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 3
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 3
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 4
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 4
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 4
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 5
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 5
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 4
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42791: LD_ADDR_VAR 0 32
42795: PUSH
42796: LD_INT 4
42798: NEG
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 4
42809: NEG
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 4
42843: NEG
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 5
42854: NEG
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 5
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 5
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: NEG
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 3
42912: NEG
42913: PUSH
42914: LD_INT 4
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 3
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 4
42960: NEG
42961: PUSH
42962: LD_INT 3
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 4
42972: NEG
42973: PUSH
42974: LD_INT 4
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 4
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 4
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 4
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 5
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 4
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 3
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 3
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 4
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 5
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 5
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 3
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 4
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 4
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 4
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 4
43203: PUSH
43204: LD_INT 4
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 4
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 5
43223: PUSH
43224: LD_INT 4
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 5
43233: PUSH
43234: LD_INT 5
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: LD_INT 5
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 4
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 5
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: LD_INT 5
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43338: LD_ADDR_VAR 0 33
43342: PUSH
43343: LD_INT 4
43345: NEG
43346: PUSH
43347: LD_INT 4
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 4
43357: NEG
43358: PUSH
43359: LD_INT 5
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: LD_INT 4
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 4
43393: NEG
43394: PUSH
43395: LD_INT 3
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 5
43405: NEG
43406: PUSH
43407: LD_INT 4
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 5
43417: NEG
43418: PUSH
43419: LD_INT 5
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 3
43429: NEG
43430: PUSH
43431: LD_INT 5
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 5
43441: NEG
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 4
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 3
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 3
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: LD_INT 4
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 4
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 4
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 4
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 5
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 5
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 4
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 3
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 5
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 4
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 4
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 4
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 4
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 4
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 4
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 5
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 5
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43876: LD_ADDR_VAR 0 34
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 4
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 5
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 4
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 3
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 4
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 5
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 3
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: LD_INT 5
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 4
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 4
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 4
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 4
44078: PUSH
44079: LD_INT 4
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 5
44098: PUSH
44099: LD_INT 4
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 5
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 4
44118: PUSH
44119: LD_INT 5
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: LD_INT 4
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 5
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: LD_INT 5
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 3
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 3
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 4
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 4
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 4
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 4
44261: NEG
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 4
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 3
44284: NEG
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 4
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 5
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 5
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 5
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// end ; end ;
44408: GO 44411
44410: POP
// case btype of b_depot , b_warehouse :
44411: LD_VAR 0 1
44415: PUSH
44416: LD_INT 0
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44430
44422: LD_INT 1
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44430
44428: GO 44631
44430: POP
// case nation of nation_american :
44431: LD_VAR 0 5
44435: PUSH
44436: LD_INT 1
44438: DOUBLE
44439: EQUAL
44440: IFTRUE 44444
44442: GO 44500
44444: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44445: LD_ADDR_VAR 0 9
44449: PUSH
44450: LD_VAR 0 11
44454: PUSH
44455: LD_VAR 0 12
44459: PUSH
44460: LD_VAR 0 13
44464: PUSH
44465: LD_VAR 0 14
44469: PUSH
44470: LD_VAR 0 15
44474: PUSH
44475: LD_VAR 0 16
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: PUSH
44488: LD_VAR 0 4
44492: PUSH
44493: LD_INT 1
44495: PLUS
44496: ARRAY
44497: ST_TO_ADDR
44498: GO 44629
44500: LD_INT 2
44502: DOUBLE
44503: EQUAL
44504: IFTRUE 44508
44506: GO 44564
44508: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44509: LD_ADDR_VAR 0 9
44513: PUSH
44514: LD_VAR 0 17
44518: PUSH
44519: LD_VAR 0 18
44523: PUSH
44524: LD_VAR 0 19
44528: PUSH
44529: LD_VAR 0 20
44533: PUSH
44534: LD_VAR 0 21
44538: PUSH
44539: LD_VAR 0 22
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: PUSH
44552: LD_VAR 0 4
44556: PUSH
44557: LD_INT 1
44559: PLUS
44560: ARRAY
44561: ST_TO_ADDR
44562: GO 44629
44564: LD_INT 3
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44572
44570: GO 44628
44572: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44573: LD_ADDR_VAR 0 9
44577: PUSH
44578: LD_VAR 0 23
44582: PUSH
44583: LD_VAR 0 24
44587: PUSH
44588: LD_VAR 0 25
44592: PUSH
44593: LD_VAR 0 26
44597: PUSH
44598: LD_VAR 0 27
44602: PUSH
44603: LD_VAR 0 28
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: PUSH
44616: LD_VAR 0 4
44620: PUSH
44621: LD_INT 1
44623: PLUS
44624: ARRAY
44625: ST_TO_ADDR
44626: GO 44629
44628: POP
44629: GO 45184
44631: LD_INT 2
44633: DOUBLE
44634: EQUAL
44635: IFTRUE 44645
44637: LD_INT 3
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 44701
44645: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44646: LD_ADDR_VAR 0 9
44650: PUSH
44651: LD_VAR 0 29
44655: PUSH
44656: LD_VAR 0 30
44660: PUSH
44661: LD_VAR 0 31
44665: PUSH
44666: LD_VAR 0 32
44670: PUSH
44671: LD_VAR 0 33
44675: PUSH
44676: LD_VAR 0 34
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: PUSH
44689: LD_VAR 0 4
44693: PUSH
44694: LD_INT 1
44696: PLUS
44697: ARRAY
44698: ST_TO_ADDR
44699: GO 45184
44701: LD_INT 16
44703: DOUBLE
44704: EQUAL
44705: IFTRUE 44763
44707: LD_INT 17
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44763
44713: LD_INT 18
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44763
44719: LD_INT 19
44721: DOUBLE
44722: EQUAL
44723: IFTRUE 44763
44725: LD_INT 22
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44763
44731: LD_INT 20
44733: DOUBLE
44734: EQUAL
44735: IFTRUE 44763
44737: LD_INT 21
44739: DOUBLE
44740: EQUAL
44741: IFTRUE 44763
44743: LD_INT 23
44745: DOUBLE
44746: EQUAL
44747: IFTRUE 44763
44749: LD_INT 24
44751: DOUBLE
44752: EQUAL
44753: IFTRUE 44763
44755: LD_INT 25
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44763
44761: GO 44819
44763: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44764: LD_ADDR_VAR 0 9
44768: PUSH
44769: LD_VAR 0 35
44773: PUSH
44774: LD_VAR 0 36
44778: PUSH
44779: LD_VAR 0 37
44783: PUSH
44784: LD_VAR 0 38
44788: PUSH
44789: LD_VAR 0 39
44793: PUSH
44794: LD_VAR 0 40
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: PUSH
44807: LD_VAR 0 4
44811: PUSH
44812: LD_INT 1
44814: PLUS
44815: ARRAY
44816: ST_TO_ADDR
44817: GO 45184
44819: LD_INT 6
44821: DOUBLE
44822: EQUAL
44823: IFTRUE 44875
44825: LD_INT 7
44827: DOUBLE
44828: EQUAL
44829: IFTRUE 44875
44831: LD_INT 8
44833: DOUBLE
44834: EQUAL
44835: IFTRUE 44875
44837: LD_INT 13
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44875
44843: LD_INT 12
44845: DOUBLE
44846: EQUAL
44847: IFTRUE 44875
44849: LD_INT 15
44851: DOUBLE
44852: EQUAL
44853: IFTRUE 44875
44855: LD_INT 11
44857: DOUBLE
44858: EQUAL
44859: IFTRUE 44875
44861: LD_INT 14
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44875
44867: LD_INT 10
44869: DOUBLE
44870: EQUAL
44871: IFTRUE 44875
44873: GO 44931
44875: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44876: LD_ADDR_VAR 0 9
44880: PUSH
44881: LD_VAR 0 41
44885: PUSH
44886: LD_VAR 0 42
44890: PUSH
44891: LD_VAR 0 43
44895: PUSH
44896: LD_VAR 0 44
44900: PUSH
44901: LD_VAR 0 45
44905: PUSH
44906: LD_VAR 0 46
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: PUSH
44919: LD_VAR 0 4
44923: PUSH
44924: LD_INT 1
44926: PLUS
44927: ARRAY
44928: ST_TO_ADDR
44929: GO 45184
44931: LD_INT 36
44933: DOUBLE
44934: EQUAL
44935: IFTRUE 44939
44937: GO 44995
44939: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44940: LD_ADDR_VAR 0 9
44944: PUSH
44945: LD_VAR 0 47
44949: PUSH
44950: LD_VAR 0 48
44954: PUSH
44955: LD_VAR 0 49
44959: PUSH
44960: LD_VAR 0 50
44964: PUSH
44965: LD_VAR 0 51
44969: PUSH
44970: LD_VAR 0 52
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: LD_VAR 0 4
44987: PUSH
44988: LD_INT 1
44990: PLUS
44991: ARRAY
44992: ST_TO_ADDR
44993: GO 45184
44995: LD_INT 4
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45021
45001: LD_INT 5
45003: DOUBLE
45004: EQUAL
45005: IFTRUE 45021
45007: LD_INT 34
45009: DOUBLE
45010: EQUAL
45011: IFTRUE 45021
45013: LD_INT 37
45015: DOUBLE
45016: EQUAL
45017: IFTRUE 45021
45019: GO 45077
45021: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45022: LD_ADDR_VAR 0 9
45026: PUSH
45027: LD_VAR 0 53
45031: PUSH
45032: LD_VAR 0 54
45036: PUSH
45037: LD_VAR 0 55
45041: PUSH
45042: LD_VAR 0 56
45046: PUSH
45047: LD_VAR 0 57
45051: PUSH
45052: LD_VAR 0 58
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: PUSH
45065: LD_VAR 0 4
45069: PUSH
45070: LD_INT 1
45072: PLUS
45073: ARRAY
45074: ST_TO_ADDR
45075: GO 45184
45077: LD_INT 31
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45127
45083: LD_INT 32
45085: DOUBLE
45086: EQUAL
45087: IFTRUE 45127
45089: LD_INT 33
45091: DOUBLE
45092: EQUAL
45093: IFTRUE 45127
45095: LD_INT 27
45097: DOUBLE
45098: EQUAL
45099: IFTRUE 45127
45101: LD_INT 26
45103: DOUBLE
45104: EQUAL
45105: IFTRUE 45127
45107: LD_INT 28
45109: DOUBLE
45110: EQUAL
45111: IFTRUE 45127
45113: LD_INT 29
45115: DOUBLE
45116: EQUAL
45117: IFTRUE 45127
45119: LD_INT 30
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45183
45127: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45128: LD_ADDR_VAR 0 9
45132: PUSH
45133: LD_VAR 0 59
45137: PUSH
45138: LD_VAR 0 60
45142: PUSH
45143: LD_VAR 0 61
45147: PUSH
45148: LD_VAR 0 62
45152: PUSH
45153: LD_VAR 0 63
45157: PUSH
45158: LD_VAR 0 64
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: PUSH
45171: LD_VAR 0 4
45175: PUSH
45176: LD_INT 1
45178: PLUS
45179: ARRAY
45180: ST_TO_ADDR
45181: GO 45184
45183: POP
// temp_list2 = [ ] ;
45184: LD_ADDR_VAR 0 10
45188: PUSH
45189: EMPTY
45190: ST_TO_ADDR
// for i in temp_list do
45191: LD_ADDR_VAR 0 8
45195: PUSH
45196: LD_VAR 0 9
45200: PUSH
45201: FOR_IN
45202: IFFALSE 45254
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45204: LD_ADDR_VAR 0 10
45208: PUSH
45209: LD_VAR 0 10
45213: PUSH
45214: LD_VAR 0 8
45218: PUSH
45219: LD_INT 1
45221: ARRAY
45222: PUSH
45223: LD_VAR 0 2
45227: PLUS
45228: PUSH
45229: LD_VAR 0 8
45233: PUSH
45234: LD_INT 2
45236: ARRAY
45237: PUSH
45238: LD_VAR 0 3
45242: PLUS
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: ADD
45251: ST_TO_ADDR
45252: GO 45201
45254: POP
45255: POP
// result = temp_list2 ;
45256: LD_ADDR_VAR 0 7
45260: PUSH
45261: LD_VAR 0 10
45265: ST_TO_ADDR
// end ;
45266: LD_VAR 0 7
45270: RET
// export function EnemyInRange ( unit , dist ) ; begin
45271: LD_INT 0
45273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45274: LD_ADDR_VAR 0 3
45278: PUSH
45279: LD_VAR 0 1
45283: PPUSH
45284: CALL_OW 255
45288: PPUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 250
45298: PPUSH
45299: LD_VAR 0 1
45303: PPUSH
45304: CALL_OW 251
45308: PPUSH
45309: LD_VAR 0 2
45313: PPUSH
45314: CALL 19375 0 4
45318: PUSH
45319: LD_INT 4
45321: ARRAY
45322: ST_TO_ADDR
// end ;
45323: LD_VAR 0 3
45327: RET
// export function PlayerSeeMe ( unit ) ; begin
45328: LD_INT 0
45330: PPUSH
// result := See ( your_side , unit ) ;
45331: LD_ADDR_VAR 0 2
45335: PUSH
45336: LD_OWVAR 2
45340: PPUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: CALL_OW 292
45350: ST_TO_ADDR
// end ;
45351: LD_VAR 0 2
45355: RET
// export function ReverseDir ( unit ) ; begin
45356: LD_INT 0
45358: PPUSH
// if not unit then
45359: LD_VAR 0 1
45363: NOT
45364: IFFALSE 45368
// exit ;
45366: GO 45391
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45368: LD_ADDR_VAR 0 2
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: CALL_OW 254
45382: PUSH
45383: LD_INT 3
45385: PLUS
45386: PUSH
45387: LD_INT 6
45389: MOD
45390: ST_TO_ADDR
// end ;
45391: LD_VAR 0 2
45395: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45396: LD_INT 0
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
// if not hexes then
45403: LD_VAR 0 2
45407: NOT
45408: IFFALSE 45412
// exit ;
45410: GO 45560
// dist := 9999 ;
45412: LD_ADDR_VAR 0 5
45416: PUSH
45417: LD_INT 9999
45419: ST_TO_ADDR
// for i = 1 to hexes do
45420: LD_ADDR_VAR 0 4
45424: PUSH
45425: DOUBLE
45426: LD_INT 1
45428: DEC
45429: ST_TO_ADDR
45430: LD_VAR 0 2
45434: PUSH
45435: FOR_TO
45436: IFFALSE 45548
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45438: LD_VAR 0 1
45442: PPUSH
45443: LD_VAR 0 2
45447: PUSH
45448: LD_VAR 0 4
45452: ARRAY
45453: PUSH
45454: LD_INT 1
45456: ARRAY
45457: PPUSH
45458: LD_VAR 0 2
45462: PUSH
45463: LD_VAR 0 4
45467: ARRAY
45468: PUSH
45469: LD_INT 2
45471: ARRAY
45472: PPUSH
45473: CALL_OW 297
45477: PUSH
45478: LD_VAR 0 5
45482: LESS
45483: IFFALSE 45546
// begin hex := hexes [ i ] ;
45485: LD_ADDR_VAR 0 7
45489: PUSH
45490: LD_VAR 0 2
45494: PUSH
45495: LD_VAR 0 4
45499: ARRAY
45500: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45501: LD_ADDR_VAR 0 5
45505: PUSH
45506: LD_VAR 0 1
45510: PPUSH
45511: LD_VAR 0 2
45515: PUSH
45516: LD_VAR 0 4
45520: ARRAY
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: PPUSH
45526: LD_VAR 0 2
45530: PUSH
45531: LD_VAR 0 4
45535: ARRAY
45536: PUSH
45537: LD_INT 2
45539: ARRAY
45540: PPUSH
45541: CALL_OW 297
45545: ST_TO_ADDR
// end ; end ;
45546: GO 45435
45548: POP
45549: POP
// result := hex ;
45550: LD_ADDR_VAR 0 3
45554: PUSH
45555: LD_VAR 0 7
45559: ST_TO_ADDR
// end ;
45560: LD_VAR 0 3
45564: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45565: LD_INT 0
45567: PPUSH
45568: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45569: LD_VAR 0 1
45573: NOT
45574: PUSH
45575: LD_VAR 0 1
45579: PUSH
45580: LD_INT 21
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 23
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PPUSH
45604: CALL_OW 69
45608: IN
45609: NOT
45610: OR
45611: IFFALSE 45615
// exit ;
45613: GO 45662
// for i = 1 to 3 do
45615: LD_ADDR_VAR 0 3
45619: PUSH
45620: DOUBLE
45621: LD_INT 1
45623: DEC
45624: ST_TO_ADDR
45625: LD_INT 3
45627: PUSH
45628: FOR_TO
45629: IFFALSE 45660
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45631: LD_VAR 0 1
45635: PPUSH
45636: CALL_OW 250
45640: PPUSH
45641: LD_VAR 0 1
45645: PPUSH
45646: CALL_OW 251
45650: PPUSH
45651: LD_INT 1
45653: PPUSH
45654: CALL_OW 453
45658: GO 45628
45660: POP
45661: POP
// end ;
45662: LD_VAR 0 2
45666: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45667: LD_INT 0
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45675: LD_VAR 0 1
45679: NOT
45680: PUSH
45681: LD_VAR 0 2
45685: NOT
45686: OR
45687: PUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 314
45697: OR
45698: IFFALSE 45702
// exit ;
45700: GO 46143
// x := GetX ( enemy_unit ) ;
45702: LD_ADDR_VAR 0 7
45706: PUSH
45707: LD_VAR 0 2
45711: PPUSH
45712: CALL_OW 250
45716: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45717: LD_ADDR_VAR 0 8
45721: PUSH
45722: LD_VAR 0 2
45726: PPUSH
45727: CALL_OW 251
45731: ST_TO_ADDR
// if not x or not y then
45732: LD_VAR 0 7
45736: NOT
45737: PUSH
45738: LD_VAR 0 8
45742: NOT
45743: OR
45744: IFFALSE 45748
// exit ;
45746: GO 46143
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45748: LD_ADDR_VAR 0 6
45752: PUSH
45753: LD_VAR 0 7
45757: PPUSH
45758: LD_INT 0
45760: PPUSH
45761: LD_INT 4
45763: PPUSH
45764: CALL_OW 272
45768: PUSH
45769: LD_VAR 0 8
45773: PPUSH
45774: LD_INT 0
45776: PPUSH
45777: LD_INT 4
45779: PPUSH
45780: CALL_OW 273
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_VAR 0 7
45793: PPUSH
45794: LD_INT 1
45796: PPUSH
45797: LD_INT 4
45799: PPUSH
45800: CALL_OW 272
45804: PUSH
45805: LD_VAR 0 8
45809: PPUSH
45810: LD_INT 1
45812: PPUSH
45813: LD_INT 4
45815: PPUSH
45816: CALL_OW 273
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_VAR 0 7
45829: PPUSH
45830: LD_INT 2
45832: PPUSH
45833: LD_INT 4
45835: PPUSH
45836: CALL_OW 272
45840: PUSH
45841: LD_VAR 0 8
45845: PPUSH
45846: LD_INT 2
45848: PPUSH
45849: LD_INT 4
45851: PPUSH
45852: CALL_OW 273
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_VAR 0 7
45865: PPUSH
45866: LD_INT 3
45868: PPUSH
45869: LD_INT 4
45871: PPUSH
45872: CALL_OW 272
45876: PUSH
45877: LD_VAR 0 8
45881: PPUSH
45882: LD_INT 3
45884: PPUSH
45885: LD_INT 4
45887: PPUSH
45888: CALL_OW 273
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_VAR 0 7
45901: PPUSH
45902: LD_INT 4
45904: PPUSH
45905: LD_INT 4
45907: PPUSH
45908: CALL_OW 272
45912: PUSH
45913: LD_VAR 0 8
45917: PPUSH
45918: LD_INT 4
45920: PPUSH
45921: LD_INT 4
45923: PPUSH
45924: CALL_OW 273
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_VAR 0 7
45937: PPUSH
45938: LD_INT 5
45940: PPUSH
45941: LD_INT 4
45943: PPUSH
45944: CALL_OW 272
45948: PUSH
45949: LD_VAR 0 8
45953: PPUSH
45954: LD_INT 5
45956: PPUSH
45957: LD_INT 4
45959: PPUSH
45960: CALL_OW 273
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// for i = tmp downto 1 do
45977: LD_ADDR_VAR 0 4
45981: PUSH
45982: DOUBLE
45983: LD_VAR 0 6
45987: INC
45988: ST_TO_ADDR
45989: LD_INT 1
45991: PUSH
45992: FOR_DOWNTO
45993: IFFALSE 46094
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45995: LD_VAR 0 6
45999: PUSH
46000: LD_VAR 0 4
46004: ARRAY
46005: PUSH
46006: LD_INT 1
46008: ARRAY
46009: PPUSH
46010: LD_VAR 0 6
46014: PUSH
46015: LD_VAR 0 4
46019: ARRAY
46020: PUSH
46021: LD_INT 2
46023: ARRAY
46024: PPUSH
46025: CALL_OW 488
46029: NOT
46030: PUSH
46031: LD_VAR 0 6
46035: PUSH
46036: LD_VAR 0 4
46040: ARRAY
46041: PUSH
46042: LD_INT 1
46044: ARRAY
46045: PPUSH
46046: LD_VAR 0 6
46050: PUSH
46051: LD_VAR 0 4
46055: ARRAY
46056: PUSH
46057: LD_INT 2
46059: ARRAY
46060: PPUSH
46061: CALL_OW 428
46065: PUSH
46066: LD_INT 0
46068: NONEQUAL
46069: OR
46070: IFFALSE 46092
// tmp := Delete ( tmp , i ) ;
46072: LD_ADDR_VAR 0 6
46076: PUSH
46077: LD_VAR 0 6
46081: PPUSH
46082: LD_VAR 0 4
46086: PPUSH
46087: CALL_OW 3
46091: ST_TO_ADDR
46092: GO 45992
46094: POP
46095: POP
// j := GetClosestHex ( unit , tmp ) ;
46096: LD_ADDR_VAR 0 5
46100: PUSH
46101: LD_VAR 0 1
46105: PPUSH
46106: LD_VAR 0 6
46110: PPUSH
46111: CALL 45396 0 2
46115: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46116: LD_VAR 0 1
46120: PPUSH
46121: LD_VAR 0 5
46125: PUSH
46126: LD_INT 1
46128: ARRAY
46129: PPUSH
46130: LD_VAR 0 5
46134: PUSH
46135: LD_INT 2
46137: ARRAY
46138: PPUSH
46139: CALL_OW 111
// end ;
46143: LD_VAR 0 3
46147: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46148: LD_INT 0
46150: PPUSH
46151: PPUSH
46152: PPUSH
// uc_side = 0 ;
46153: LD_ADDR_OWVAR 20
46157: PUSH
46158: LD_INT 0
46160: ST_TO_ADDR
// uc_nation = 0 ;
46161: LD_ADDR_OWVAR 21
46165: PUSH
46166: LD_INT 0
46168: ST_TO_ADDR
// InitHc ;
46169: CALL_OW 19
// InitVc ;
46173: CALL_OW 20
// if mastodonts then
46177: LD_VAR 0 6
46181: IFFALSE 46248
// for i = 1 to mastodonts do
46183: LD_ADDR_VAR 0 11
46187: PUSH
46188: DOUBLE
46189: LD_INT 1
46191: DEC
46192: ST_TO_ADDR
46193: LD_VAR 0 6
46197: PUSH
46198: FOR_TO
46199: IFFALSE 46246
// begin vc_chassis := 31 ;
46201: LD_ADDR_OWVAR 37
46205: PUSH
46206: LD_INT 31
46208: ST_TO_ADDR
// vc_control := control_rider ;
46209: LD_ADDR_OWVAR 38
46213: PUSH
46214: LD_INT 4
46216: ST_TO_ADDR
// animal := CreateVehicle ;
46217: LD_ADDR_VAR 0 12
46221: PUSH
46222: CALL_OW 45
46226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46227: LD_VAR 0 12
46231: PPUSH
46232: LD_VAR 0 8
46236: PPUSH
46237: LD_INT 0
46239: PPUSH
46240: CALL 53026 0 3
// end ;
46244: GO 46198
46246: POP
46247: POP
// if horses then
46248: LD_VAR 0 5
46252: IFFALSE 46319
// for i = 1 to horses do
46254: LD_ADDR_VAR 0 11
46258: PUSH
46259: DOUBLE
46260: LD_INT 1
46262: DEC
46263: ST_TO_ADDR
46264: LD_VAR 0 5
46268: PUSH
46269: FOR_TO
46270: IFFALSE 46317
// begin hc_class := 21 ;
46272: LD_ADDR_OWVAR 28
46276: PUSH
46277: LD_INT 21
46279: ST_TO_ADDR
// hc_gallery :=  ;
46280: LD_ADDR_OWVAR 33
46284: PUSH
46285: LD_STRING 
46287: ST_TO_ADDR
// animal := CreateHuman ;
46288: LD_ADDR_VAR 0 12
46292: PUSH
46293: CALL_OW 44
46297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46298: LD_VAR 0 12
46302: PPUSH
46303: LD_VAR 0 8
46307: PPUSH
46308: LD_INT 0
46310: PPUSH
46311: CALL 53026 0 3
// end ;
46315: GO 46269
46317: POP
46318: POP
// if birds then
46319: LD_VAR 0 1
46323: IFFALSE 46390
// for i = 1 to birds do
46325: LD_ADDR_VAR 0 11
46329: PUSH
46330: DOUBLE
46331: LD_INT 1
46333: DEC
46334: ST_TO_ADDR
46335: LD_VAR 0 1
46339: PUSH
46340: FOR_TO
46341: IFFALSE 46388
// begin hc_class = 18 ;
46343: LD_ADDR_OWVAR 28
46347: PUSH
46348: LD_INT 18
46350: ST_TO_ADDR
// hc_gallery =  ;
46351: LD_ADDR_OWVAR 33
46355: PUSH
46356: LD_STRING 
46358: ST_TO_ADDR
// animal := CreateHuman ;
46359: LD_ADDR_VAR 0 12
46363: PUSH
46364: CALL_OW 44
46368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46369: LD_VAR 0 12
46373: PPUSH
46374: LD_VAR 0 8
46378: PPUSH
46379: LD_INT 0
46381: PPUSH
46382: CALL 53026 0 3
// end ;
46386: GO 46340
46388: POP
46389: POP
// if tigers then
46390: LD_VAR 0 2
46394: IFFALSE 46478
// for i = 1 to tigers do
46396: LD_ADDR_VAR 0 11
46400: PUSH
46401: DOUBLE
46402: LD_INT 1
46404: DEC
46405: ST_TO_ADDR
46406: LD_VAR 0 2
46410: PUSH
46411: FOR_TO
46412: IFFALSE 46476
// begin hc_class = class_tiger ;
46414: LD_ADDR_OWVAR 28
46418: PUSH
46419: LD_INT 14
46421: ST_TO_ADDR
// hc_gallery =  ;
46422: LD_ADDR_OWVAR 33
46426: PUSH
46427: LD_STRING 
46429: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46430: LD_ADDR_OWVAR 35
46434: PUSH
46435: LD_INT 7
46437: NEG
46438: PPUSH
46439: LD_INT 7
46441: PPUSH
46442: CALL_OW 12
46446: ST_TO_ADDR
// animal := CreateHuman ;
46447: LD_ADDR_VAR 0 12
46451: PUSH
46452: CALL_OW 44
46456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46457: LD_VAR 0 12
46461: PPUSH
46462: LD_VAR 0 8
46466: PPUSH
46467: LD_INT 0
46469: PPUSH
46470: CALL 53026 0 3
// end ;
46474: GO 46411
46476: POP
46477: POP
// if apemans then
46478: LD_VAR 0 3
46482: IFFALSE 46605
// for i = 1 to apemans do
46484: LD_ADDR_VAR 0 11
46488: PUSH
46489: DOUBLE
46490: LD_INT 1
46492: DEC
46493: ST_TO_ADDR
46494: LD_VAR 0 3
46498: PUSH
46499: FOR_TO
46500: IFFALSE 46603
// begin hc_class = class_apeman ;
46502: LD_ADDR_OWVAR 28
46506: PUSH
46507: LD_INT 12
46509: ST_TO_ADDR
// hc_gallery =  ;
46510: LD_ADDR_OWVAR 33
46514: PUSH
46515: LD_STRING 
46517: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46518: LD_ADDR_OWVAR 35
46522: PUSH
46523: LD_INT 5
46525: NEG
46526: PPUSH
46527: LD_INT 5
46529: PPUSH
46530: CALL_OW 12
46534: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46535: LD_ADDR_OWVAR 31
46539: PUSH
46540: LD_INT 1
46542: PPUSH
46543: LD_INT 3
46545: PPUSH
46546: CALL_OW 12
46550: PUSH
46551: LD_INT 1
46553: PPUSH
46554: LD_INT 3
46556: PPUSH
46557: CALL_OW 12
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: ST_TO_ADDR
// animal := CreateHuman ;
46574: LD_ADDR_VAR 0 12
46578: PUSH
46579: CALL_OW 44
46583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46584: LD_VAR 0 12
46588: PPUSH
46589: LD_VAR 0 8
46593: PPUSH
46594: LD_INT 0
46596: PPUSH
46597: CALL 53026 0 3
// end ;
46601: GO 46499
46603: POP
46604: POP
// if enchidnas then
46605: LD_VAR 0 4
46609: IFFALSE 46676
// for i = 1 to enchidnas do
46611: LD_ADDR_VAR 0 11
46615: PUSH
46616: DOUBLE
46617: LD_INT 1
46619: DEC
46620: ST_TO_ADDR
46621: LD_VAR 0 4
46625: PUSH
46626: FOR_TO
46627: IFFALSE 46674
// begin hc_class = 13 ;
46629: LD_ADDR_OWVAR 28
46633: PUSH
46634: LD_INT 13
46636: ST_TO_ADDR
// hc_gallery =  ;
46637: LD_ADDR_OWVAR 33
46641: PUSH
46642: LD_STRING 
46644: ST_TO_ADDR
// animal := CreateHuman ;
46645: LD_ADDR_VAR 0 12
46649: PUSH
46650: CALL_OW 44
46654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46655: LD_VAR 0 12
46659: PPUSH
46660: LD_VAR 0 8
46664: PPUSH
46665: LD_INT 0
46667: PPUSH
46668: CALL 53026 0 3
// end ;
46672: GO 46626
46674: POP
46675: POP
// if fishes then
46676: LD_VAR 0 7
46680: IFFALSE 46747
// for i = 1 to fishes do
46682: LD_ADDR_VAR 0 11
46686: PUSH
46687: DOUBLE
46688: LD_INT 1
46690: DEC
46691: ST_TO_ADDR
46692: LD_VAR 0 7
46696: PUSH
46697: FOR_TO
46698: IFFALSE 46745
// begin hc_class = 20 ;
46700: LD_ADDR_OWVAR 28
46704: PUSH
46705: LD_INT 20
46707: ST_TO_ADDR
// hc_gallery =  ;
46708: LD_ADDR_OWVAR 33
46712: PUSH
46713: LD_STRING 
46715: ST_TO_ADDR
// animal := CreateHuman ;
46716: LD_ADDR_VAR 0 12
46720: PUSH
46721: CALL_OW 44
46725: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46726: LD_VAR 0 12
46730: PPUSH
46731: LD_VAR 0 9
46735: PPUSH
46736: LD_INT 0
46738: PPUSH
46739: CALL 53026 0 3
// end ;
46743: GO 46697
46745: POP
46746: POP
// end ;
46747: LD_VAR 0 10
46751: RET
// export function WantHeal ( sci , unit ) ; begin
46752: LD_INT 0
46754: PPUSH
// if GetTaskList ( sci ) > 0 then
46755: LD_VAR 0 1
46759: PPUSH
46760: CALL_OW 437
46764: PUSH
46765: LD_INT 0
46767: GREATER
46768: IFFALSE 46838
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46770: LD_VAR 0 1
46774: PPUSH
46775: CALL_OW 437
46779: PUSH
46780: LD_INT 1
46782: ARRAY
46783: PUSH
46784: LD_INT 1
46786: ARRAY
46787: PUSH
46788: LD_STRING l
46790: EQUAL
46791: PUSH
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL_OW 437
46801: PUSH
46802: LD_INT 1
46804: ARRAY
46805: PUSH
46806: LD_INT 4
46808: ARRAY
46809: PUSH
46810: LD_VAR 0 2
46814: EQUAL
46815: AND
46816: IFFALSE 46828
// result := true else
46818: LD_ADDR_VAR 0 3
46822: PUSH
46823: LD_INT 1
46825: ST_TO_ADDR
46826: GO 46836
// result := false ;
46828: LD_ADDR_VAR 0 3
46832: PUSH
46833: LD_INT 0
46835: ST_TO_ADDR
// end else
46836: GO 46846
// result := false ;
46838: LD_ADDR_VAR 0 3
46842: PUSH
46843: LD_INT 0
46845: ST_TO_ADDR
// end ;
46846: LD_VAR 0 3
46850: RET
// export function HealTarget ( sci ) ; begin
46851: LD_INT 0
46853: PPUSH
// if not sci then
46854: LD_VAR 0 1
46858: NOT
46859: IFFALSE 46863
// exit ;
46861: GO 46928
// result := 0 ;
46863: LD_ADDR_VAR 0 2
46867: PUSH
46868: LD_INT 0
46870: ST_TO_ADDR
// if GetTaskList ( sci ) then
46871: LD_VAR 0 1
46875: PPUSH
46876: CALL_OW 437
46880: IFFALSE 46928
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46882: LD_VAR 0 1
46886: PPUSH
46887: CALL_OW 437
46891: PUSH
46892: LD_INT 1
46894: ARRAY
46895: PUSH
46896: LD_INT 1
46898: ARRAY
46899: PUSH
46900: LD_STRING l
46902: EQUAL
46903: IFFALSE 46928
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46905: LD_ADDR_VAR 0 2
46909: PUSH
46910: LD_VAR 0 1
46914: PPUSH
46915: CALL_OW 437
46919: PUSH
46920: LD_INT 1
46922: ARRAY
46923: PUSH
46924: LD_INT 4
46926: ARRAY
46927: ST_TO_ADDR
// end ;
46928: LD_VAR 0 2
46932: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
46933: LD_INT 0
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
// if not list then
46969: LD_VAR 0 1
46973: NOT
46974: IFFALSE 46978
// exit ;
46976: GO 51637
// base := list [ 1 ] ;
46978: LD_ADDR_VAR 0 3
46982: PUSH
46983: LD_VAR 0 1
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: ST_TO_ADDR
// group := list [ 2 ] ;
46992: LD_ADDR_VAR 0 4
46996: PUSH
46997: LD_VAR 0 1
47001: PUSH
47002: LD_INT 2
47004: ARRAY
47005: ST_TO_ADDR
// path := list [ 3 ] ;
47006: LD_ADDR_VAR 0 5
47010: PUSH
47011: LD_VAR 0 1
47015: PUSH
47016: LD_INT 3
47018: ARRAY
47019: ST_TO_ADDR
// flags := list [ 4 ] ;
47020: LD_ADDR_VAR 0 6
47024: PUSH
47025: LD_VAR 0 1
47029: PUSH
47030: LD_INT 4
47032: ARRAY
47033: ST_TO_ADDR
// mined := [ ] ;
47034: LD_ADDR_VAR 0 27
47038: PUSH
47039: EMPTY
47040: ST_TO_ADDR
// bombed := [ ] ;
47041: LD_ADDR_VAR 0 28
47045: PUSH
47046: EMPTY
47047: ST_TO_ADDR
// healers := [ ] ;
47048: LD_ADDR_VAR 0 31
47052: PUSH
47053: EMPTY
47054: ST_TO_ADDR
// to_heal := [ ] ;
47055: LD_ADDR_VAR 0 30
47059: PUSH
47060: EMPTY
47061: ST_TO_ADDR
// repairs := [ ] ;
47062: LD_ADDR_VAR 0 33
47066: PUSH
47067: EMPTY
47068: ST_TO_ADDR
// to_repair := [ ] ;
47069: LD_ADDR_VAR 0 32
47073: PUSH
47074: EMPTY
47075: ST_TO_ADDR
// if not group or not path then
47076: LD_VAR 0 4
47080: NOT
47081: PUSH
47082: LD_VAR 0 5
47086: NOT
47087: OR
47088: IFFALSE 47092
// exit ;
47090: GO 51637
// side := GetSide ( group [ 1 ] ) ;
47092: LD_ADDR_VAR 0 35
47096: PUSH
47097: LD_VAR 0 4
47101: PUSH
47102: LD_INT 1
47104: ARRAY
47105: PPUSH
47106: CALL_OW 255
47110: ST_TO_ADDR
// if flags then
47111: LD_VAR 0 6
47115: IFFALSE 47259
// begin f_ignore_area := flags [ 1 ] ;
47117: LD_ADDR_VAR 0 17
47121: PUSH
47122: LD_VAR 0 6
47126: PUSH
47127: LD_INT 1
47129: ARRAY
47130: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
47131: LD_ADDR_VAR 0 18
47135: PUSH
47136: LD_VAR 0 6
47140: PUSH
47141: LD_INT 2
47143: ARRAY
47144: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
47145: LD_ADDR_VAR 0 19
47149: PUSH
47150: LD_VAR 0 6
47154: PUSH
47155: LD_INT 3
47157: ARRAY
47158: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
47159: LD_ADDR_VAR 0 20
47163: PUSH
47164: LD_VAR 0 6
47168: PUSH
47169: LD_INT 4
47171: ARRAY
47172: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
47173: LD_ADDR_VAR 0 21
47177: PUSH
47178: LD_VAR 0 6
47182: PUSH
47183: LD_INT 5
47185: ARRAY
47186: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47187: LD_ADDR_VAR 0 22
47191: PUSH
47192: LD_VAR 0 6
47196: PUSH
47197: LD_INT 6
47199: ARRAY
47200: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47201: LD_ADDR_VAR 0 23
47205: PUSH
47206: LD_VAR 0 6
47210: PUSH
47211: LD_INT 7
47213: ARRAY
47214: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47215: LD_ADDR_VAR 0 24
47219: PUSH
47220: LD_VAR 0 6
47224: PUSH
47225: LD_INT 8
47227: ARRAY
47228: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47229: LD_ADDR_VAR 0 25
47233: PUSH
47234: LD_VAR 0 6
47238: PUSH
47239: LD_INT 9
47241: ARRAY
47242: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47243: LD_ADDR_VAR 0 26
47247: PUSH
47248: LD_VAR 0 6
47252: PUSH
47253: LD_INT 10
47255: ARRAY
47256: ST_TO_ADDR
// end else
47257: GO 47339
// begin f_ignore_area := false ;
47259: LD_ADDR_VAR 0 17
47263: PUSH
47264: LD_INT 0
47266: ST_TO_ADDR
// f_capture := false ;
47267: LD_ADDR_VAR 0 18
47271: PUSH
47272: LD_INT 0
47274: ST_TO_ADDR
// f_ignore_civ := false ;
47275: LD_ADDR_VAR 0 19
47279: PUSH
47280: LD_INT 0
47282: ST_TO_ADDR
// f_murder := false ;
47283: LD_ADDR_VAR 0 20
47287: PUSH
47288: LD_INT 0
47290: ST_TO_ADDR
// f_mines := false ;
47291: LD_ADDR_VAR 0 21
47295: PUSH
47296: LD_INT 0
47298: ST_TO_ADDR
// f_repair := false ;
47299: LD_ADDR_VAR 0 22
47303: PUSH
47304: LD_INT 0
47306: ST_TO_ADDR
// f_heal := false ;
47307: LD_ADDR_VAR 0 23
47311: PUSH
47312: LD_INT 0
47314: ST_TO_ADDR
// f_spacetime := false ;
47315: LD_ADDR_VAR 0 24
47319: PUSH
47320: LD_INT 0
47322: ST_TO_ADDR
// f_attack_depot := false ;
47323: LD_ADDR_VAR 0 25
47327: PUSH
47328: LD_INT 0
47330: ST_TO_ADDR
// f_crawl := false ;
47331: LD_ADDR_VAR 0 26
47335: PUSH
47336: LD_INT 0
47338: ST_TO_ADDR
// end ; if f_heal then
47339: LD_VAR 0 23
47343: IFFALSE 47370
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
47345: LD_ADDR_VAR 0 31
47349: PUSH
47350: LD_VAR 0 4
47354: PPUSH
47355: LD_INT 25
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PPUSH
47365: CALL_OW 72
47369: ST_TO_ADDR
// if f_repair then
47370: LD_VAR 0 22
47374: IFFALSE 47401
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
47376: LD_ADDR_VAR 0 33
47380: PUSH
47381: LD_VAR 0 4
47385: PPUSH
47386: LD_INT 25
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PPUSH
47396: CALL_OW 72
47400: ST_TO_ADDR
// units_path := [ ] ;
47401: LD_ADDR_VAR 0 16
47405: PUSH
47406: EMPTY
47407: ST_TO_ADDR
// for i = 1 to group do
47408: LD_ADDR_VAR 0 7
47412: PUSH
47413: DOUBLE
47414: LD_INT 1
47416: DEC
47417: ST_TO_ADDR
47418: LD_VAR 0 4
47422: PUSH
47423: FOR_TO
47424: IFFALSE 47453
// units_path := Replace ( units_path , i , path ) ;
47426: LD_ADDR_VAR 0 16
47430: PUSH
47431: LD_VAR 0 16
47435: PPUSH
47436: LD_VAR 0 7
47440: PPUSH
47441: LD_VAR 0 5
47445: PPUSH
47446: CALL_OW 1
47450: ST_TO_ADDR
47451: GO 47423
47453: POP
47454: POP
// repeat for i = group downto 1 do
47455: LD_ADDR_VAR 0 7
47459: PUSH
47460: DOUBLE
47461: LD_VAR 0 4
47465: INC
47466: ST_TO_ADDR
47467: LD_INT 1
47469: PUSH
47470: FOR_DOWNTO
47471: IFFALSE 51593
// begin wait ( 5 ) ;
47473: LD_INT 5
47475: PPUSH
47476: CALL_OW 67
// tmp := [ ] ;
47480: LD_ADDR_VAR 0 14
47484: PUSH
47485: EMPTY
47486: ST_TO_ADDR
// attacking := false ;
47487: LD_ADDR_VAR 0 29
47491: PUSH
47492: LD_INT 0
47494: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
47495: LD_VAR 0 4
47499: PUSH
47500: LD_VAR 0 7
47504: ARRAY
47505: PPUSH
47506: CALL_OW 301
47510: PUSH
47511: LD_VAR 0 4
47515: PUSH
47516: LD_VAR 0 7
47520: ARRAY
47521: NOT
47522: OR
47523: IFFALSE 47632
// begin if GetType ( group [ i ] ) = unit_human then
47525: LD_VAR 0 4
47529: PUSH
47530: LD_VAR 0 7
47534: ARRAY
47535: PPUSH
47536: CALL_OW 247
47540: PUSH
47541: LD_INT 1
47543: EQUAL
47544: IFFALSE 47590
// begin to_heal := to_heal diff group [ i ] ;
47546: LD_ADDR_VAR 0 30
47550: PUSH
47551: LD_VAR 0 30
47555: PUSH
47556: LD_VAR 0 4
47560: PUSH
47561: LD_VAR 0 7
47565: ARRAY
47566: DIFF
47567: ST_TO_ADDR
// healers := healers diff group [ i ] ;
47568: LD_ADDR_VAR 0 31
47572: PUSH
47573: LD_VAR 0 31
47577: PUSH
47578: LD_VAR 0 4
47582: PUSH
47583: LD_VAR 0 7
47587: ARRAY
47588: DIFF
47589: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
47590: LD_ADDR_VAR 0 4
47594: PUSH
47595: LD_VAR 0 4
47599: PPUSH
47600: LD_VAR 0 7
47604: PPUSH
47605: CALL_OW 3
47609: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47610: LD_ADDR_VAR 0 16
47614: PUSH
47615: LD_VAR 0 16
47619: PPUSH
47620: LD_VAR 0 7
47624: PPUSH
47625: CALL_OW 3
47629: ST_TO_ADDR
// continue ;
47630: GO 47470
// end ; if f_repair then
47632: LD_VAR 0 22
47636: IFFALSE 48125
// begin if GetType ( group [ i ] ) = unit_vehicle then
47638: LD_VAR 0 4
47642: PUSH
47643: LD_VAR 0 7
47647: ARRAY
47648: PPUSH
47649: CALL_OW 247
47653: PUSH
47654: LD_INT 2
47656: EQUAL
47657: IFFALSE 47847
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
47659: LD_VAR 0 4
47663: PUSH
47664: LD_VAR 0 7
47668: ARRAY
47669: PPUSH
47670: CALL_OW 256
47674: PUSH
47675: LD_INT 700
47677: LESS
47678: PUSH
47679: LD_VAR 0 4
47683: PUSH
47684: LD_VAR 0 7
47688: ARRAY
47689: PUSH
47690: LD_VAR 0 32
47694: IN
47695: NOT
47696: AND
47697: IFFALSE 47721
// to_repair := to_repair union group [ i ] ;
47699: LD_ADDR_VAR 0 32
47703: PUSH
47704: LD_VAR 0 32
47708: PUSH
47709: LD_VAR 0 4
47713: PUSH
47714: LD_VAR 0 7
47718: ARRAY
47719: UNION
47720: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
47721: LD_VAR 0 4
47725: PUSH
47726: LD_VAR 0 7
47730: ARRAY
47731: PPUSH
47732: CALL_OW 256
47736: PUSH
47737: LD_INT 1000
47739: EQUAL
47740: PUSH
47741: LD_VAR 0 4
47745: PUSH
47746: LD_VAR 0 7
47750: ARRAY
47751: PUSH
47752: LD_VAR 0 32
47756: IN
47757: AND
47758: IFFALSE 47782
// to_repair := to_repair diff group [ i ] ;
47760: LD_ADDR_VAR 0 32
47764: PUSH
47765: LD_VAR 0 32
47769: PUSH
47770: LD_VAR 0 4
47774: PUSH
47775: LD_VAR 0 7
47779: ARRAY
47780: DIFF
47781: ST_TO_ADDR
// if group [ i ] in to_repair then
47782: LD_VAR 0 4
47786: PUSH
47787: LD_VAR 0 7
47791: ARRAY
47792: PUSH
47793: LD_VAR 0 32
47797: IN
47798: IFFALSE 47845
// begin if not IsInArea ( group [ i ] , f_repair ) then
47800: LD_VAR 0 4
47804: PUSH
47805: LD_VAR 0 7
47809: ARRAY
47810: PPUSH
47811: LD_VAR 0 22
47815: PPUSH
47816: CALL_OW 308
47820: NOT
47821: IFFALSE 47843
// ComMoveToArea ( group [ i ] , f_repair ) ;
47823: LD_VAR 0 4
47827: PUSH
47828: LD_VAR 0 7
47832: ARRAY
47833: PPUSH
47834: LD_VAR 0 22
47838: PPUSH
47839: CALL_OW 113
// continue ;
47843: GO 47470
// end ; end else
47845: GO 48125
// if group [ i ] in repairs then
47847: LD_VAR 0 4
47851: PUSH
47852: LD_VAR 0 7
47856: ARRAY
47857: PUSH
47858: LD_VAR 0 33
47862: IN
47863: IFFALSE 48125
// begin if IsInUnit ( group [ i ] ) then
47865: LD_VAR 0 4
47869: PUSH
47870: LD_VAR 0 7
47874: ARRAY
47875: PPUSH
47876: CALL_OW 310
47880: IFFALSE 47948
// begin z := IsInUnit ( group [ i ] ) ;
47882: LD_ADDR_VAR 0 13
47886: PUSH
47887: LD_VAR 0 4
47891: PUSH
47892: LD_VAR 0 7
47896: ARRAY
47897: PPUSH
47898: CALL_OW 310
47902: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
47903: LD_VAR 0 13
47907: PUSH
47908: LD_VAR 0 32
47912: IN
47913: PUSH
47914: LD_VAR 0 13
47918: PPUSH
47919: LD_VAR 0 22
47923: PPUSH
47924: CALL_OW 308
47928: AND
47929: IFFALSE 47946
// ComExitVehicle ( group [ i ] ) ;
47931: LD_VAR 0 4
47935: PUSH
47936: LD_VAR 0 7
47940: ARRAY
47941: PPUSH
47942: CALL_OW 121
// end else
47946: GO 48125
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
47948: LD_ADDR_VAR 0 13
47952: PUSH
47953: LD_VAR 0 4
47957: PPUSH
47958: LD_INT 95
47960: PUSH
47961: LD_VAR 0 22
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 58
47972: PUSH
47973: EMPTY
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PPUSH
47980: CALL_OW 72
47984: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
47985: LD_VAR 0 4
47989: PUSH
47990: LD_VAR 0 7
47994: ARRAY
47995: PPUSH
47996: CALL_OW 314
48000: NOT
48001: IFFALSE 48123
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
48003: LD_ADDR_VAR 0 10
48007: PUSH
48008: LD_VAR 0 13
48012: PPUSH
48013: LD_VAR 0 4
48017: PUSH
48018: LD_VAR 0 7
48022: ARRAY
48023: PPUSH
48024: CALL_OW 74
48028: ST_TO_ADDR
// if not x then
48029: LD_VAR 0 10
48033: NOT
48034: IFFALSE 48038
// continue ;
48036: GO 47470
// if GetLives ( x ) < 1000 then
48038: LD_VAR 0 10
48042: PPUSH
48043: CALL_OW 256
48047: PUSH
48048: LD_INT 1000
48050: LESS
48051: IFFALSE 48075
// ComRepairVehicle ( group [ i ] , x ) else
48053: LD_VAR 0 4
48057: PUSH
48058: LD_VAR 0 7
48062: ARRAY
48063: PPUSH
48064: LD_VAR 0 10
48068: PPUSH
48069: CALL_OW 129
48073: GO 48123
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
48075: LD_VAR 0 23
48079: PUSH
48080: LD_VAR 0 4
48084: PUSH
48085: LD_VAR 0 7
48089: ARRAY
48090: PPUSH
48091: CALL_OW 256
48095: PUSH
48096: LD_INT 1000
48098: LESS
48099: AND
48100: NOT
48101: IFFALSE 48123
// ComEnterUnit ( group [ i ] , x ) ;
48103: LD_VAR 0 4
48107: PUSH
48108: LD_VAR 0 7
48112: ARRAY
48113: PPUSH
48114: LD_VAR 0 10
48118: PPUSH
48119: CALL_OW 120
// end ; continue ;
48123: GO 47470
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
48125: LD_VAR 0 23
48129: PUSH
48130: LD_VAR 0 4
48134: PUSH
48135: LD_VAR 0 7
48139: ARRAY
48140: PPUSH
48141: CALL_OW 247
48145: PUSH
48146: LD_INT 1
48148: EQUAL
48149: AND
48150: IFFALSE 48628
// begin if group [ i ] in healers then
48152: LD_VAR 0 4
48156: PUSH
48157: LD_VAR 0 7
48161: ARRAY
48162: PUSH
48163: LD_VAR 0 31
48167: IN
48168: IFFALSE 48441
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
48170: LD_VAR 0 4
48174: PUSH
48175: LD_VAR 0 7
48179: ARRAY
48180: PPUSH
48181: LD_VAR 0 23
48185: PPUSH
48186: CALL_OW 308
48190: NOT
48191: PUSH
48192: LD_VAR 0 4
48196: PUSH
48197: LD_VAR 0 7
48201: ARRAY
48202: PPUSH
48203: CALL_OW 314
48207: NOT
48208: AND
48209: IFFALSE 48233
// ComMoveToArea ( group [ i ] , f_heal ) else
48211: LD_VAR 0 4
48215: PUSH
48216: LD_VAR 0 7
48220: ARRAY
48221: PPUSH
48222: LD_VAR 0 23
48226: PPUSH
48227: CALL_OW 113
48231: GO 48439
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
48233: LD_VAR 0 4
48237: PUSH
48238: LD_VAR 0 7
48242: ARRAY
48243: PPUSH
48244: CALL 46851 0 1
48248: PPUSH
48249: CALL_OW 256
48253: PUSH
48254: LD_INT 1000
48256: EQUAL
48257: IFFALSE 48276
// ComStop ( group [ i ] ) else
48259: LD_VAR 0 4
48263: PUSH
48264: LD_VAR 0 7
48268: ARRAY
48269: PPUSH
48270: CALL_OW 141
48274: GO 48439
// if not HasTask ( group [ i ] ) and to_heal then
48276: LD_VAR 0 4
48280: PUSH
48281: LD_VAR 0 7
48285: ARRAY
48286: PPUSH
48287: CALL_OW 314
48291: NOT
48292: PUSH
48293: LD_VAR 0 30
48297: AND
48298: IFFALSE 48439
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
48300: LD_ADDR_VAR 0 13
48304: PUSH
48305: LD_VAR 0 30
48309: PPUSH
48310: LD_INT 3
48312: PUSH
48313: LD_INT 54
48315: PUSH
48316: EMPTY
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PPUSH
48323: CALL_OW 72
48327: PPUSH
48328: LD_VAR 0 4
48332: PUSH
48333: LD_VAR 0 7
48337: ARRAY
48338: PPUSH
48339: CALL_OW 74
48343: ST_TO_ADDR
// if z then
48344: LD_VAR 0 13
48348: IFFALSE 48439
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
48350: LD_INT 91
48352: PUSH
48353: LD_VAR 0 13
48357: PUSH
48358: LD_INT 10
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 81
48368: PUSH
48369: LD_VAR 0 13
48373: PPUSH
48374: CALL_OW 255
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PPUSH
48387: CALL_OW 69
48391: PUSH
48392: LD_INT 0
48394: EQUAL
48395: IFFALSE 48419
// ComHeal ( group [ i ] , z ) else
48397: LD_VAR 0 4
48401: PUSH
48402: LD_VAR 0 7
48406: ARRAY
48407: PPUSH
48408: LD_VAR 0 13
48412: PPUSH
48413: CALL_OW 128
48417: GO 48439
// ComMoveToArea ( group [ i ] , f_heal ) ;
48419: LD_VAR 0 4
48423: PUSH
48424: LD_VAR 0 7
48428: ARRAY
48429: PPUSH
48430: LD_VAR 0 23
48434: PPUSH
48435: CALL_OW 113
// end ; continue ;
48439: GO 47470
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
48441: LD_VAR 0 4
48445: PUSH
48446: LD_VAR 0 7
48450: ARRAY
48451: PPUSH
48452: CALL_OW 256
48456: PUSH
48457: LD_INT 700
48459: LESS
48460: PUSH
48461: LD_VAR 0 4
48465: PUSH
48466: LD_VAR 0 7
48470: ARRAY
48471: PUSH
48472: LD_VAR 0 30
48476: IN
48477: NOT
48478: AND
48479: IFFALSE 48503
// to_heal := to_heal union group [ i ] ;
48481: LD_ADDR_VAR 0 30
48485: PUSH
48486: LD_VAR 0 30
48490: PUSH
48491: LD_VAR 0 4
48495: PUSH
48496: LD_VAR 0 7
48500: ARRAY
48501: UNION
48502: ST_TO_ADDR
// if group [ i ] in to_heal then
48503: LD_VAR 0 4
48507: PUSH
48508: LD_VAR 0 7
48512: ARRAY
48513: PUSH
48514: LD_VAR 0 30
48518: IN
48519: IFFALSE 48628
// begin if GetLives ( group [ i ] ) = 1000 then
48521: LD_VAR 0 4
48525: PUSH
48526: LD_VAR 0 7
48530: ARRAY
48531: PPUSH
48532: CALL_OW 256
48536: PUSH
48537: LD_INT 1000
48539: EQUAL
48540: IFFALSE 48566
// to_heal := to_heal diff group [ i ] else
48542: LD_ADDR_VAR 0 30
48546: PUSH
48547: LD_VAR 0 30
48551: PUSH
48552: LD_VAR 0 4
48556: PUSH
48557: LD_VAR 0 7
48561: ARRAY
48562: DIFF
48563: ST_TO_ADDR
48564: GO 48628
// begin if not IsInArea ( group [ i ] , to_heal ) then
48566: LD_VAR 0 4
48570: PUSH
48571: LD_VAR 0 7
48575: ARRAY
48576: PPUSH
48577: LD_VAR 0 30
48581: PPUSH
48582: CALL_OW 308
48586: NOT
48587: IFFALSE 48611
// ComMoveToArea ( group [ i ] , f_heal ) else
48589: LD_VAR 0 4
48593: PUSH
48594: LD_VAR 0 7
48598: ARRAY
48599: PPUSH
48600: LD_VAR 0 23
48604: PPUSH
48605: CALL_OW 113
48609: GO 48626
// ComHold ( group [ i ] ) ;
48611: LD_VAR 0 4
48615: PUSH
48616: LD_VAR 0 7
48620: ARRAY
48621: PPUSH
48622: CALL_OW 140
// continue ;
48626: GO 47470
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48628: LD_VAR 0 4
48632: PUSH
48633: LD_VAR 0 7
48637: ARRAY
48638: PPUSH
48639: LD_INT 10
48641: PPUSH
48642: CALL 45271 0 2
48646: NOT
48647: PUSH
48648: LD_VAR 0 16
48652: PUSH
48653: LD_VAR 0 7
48657: ARRAY
48658: PUSH
48659: EMPTY
48660: EQUAL
48661: NOT
48662: AND
48663: IFFALSE 48929
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48665: LD_VAR 0 4
48669: PUSH
48670: LD_VAR 0 7
48674: ARRAY
48675: PPUSH
48676: CALL_OW 262
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: IN
48691: IFFALSE 48732
// if GetFuel ( group [ i ] ) < 10 then
48693: LD_VAR 0 4
48697: PUSH
48698: LD_VAR 0 7
48702: ARRAY
48703: PPUSH
48704: CALL_OW 261
48708: PUSH
48709: LD_INT 10
48711: LESS
48712: IFFALSE 48732
// SetFuel ( group [ i ] , 12 ) ;
48714: LD_VAR 0 4
48718: PUSH
48719: LD_VAR 0 7
48723: ARRAY
48724: PPUSH
48725: LD_INT 12
48727: PPUSH
48728: CALL_OW 240
// if units_path [ i ] then
48732: LD_VAR 0 16
48736: PUSH
48737: LD_VAR 0 7
48741: ARRAY
48742: IFFALSE 48927
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48744: LD_VAR 0 4
48748: PUSH
48749: LD_VAR 0 7
48753: ARRAY
48754: PPUSH
48755: LD_VAR 0 16
48759: PUSH
48760: LD_VAR 0 7
48764: ARRAY
48765: PUSH
48766: LD_INT 1
48768: ARRAY
48769: PUSH
48770: LD_INT 1
48772: ARRAY
48773: PPUSH
48774: LD_VAR 0 16
48778: PUSH
48779: LD_VAR 0 7
48783: ARRAY
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: PUSH
48789: LD_INT 2
48791: ARRAY
48792: PPUSH
48793: CALL_OW 297
48797: PUSH
48798: LD_INT 6
48800: GREATER
48801: IFFALSE 48876
// begin if not HasTask ( group [ i ] ) then
48803: LD_VAR 0 4
48807: PUSH
48808: LD_VAR 0 7
48812: ARRAY
48813: PPUSH
48814: CALL_OW 314
48818: NOT
48819: IFFALSE 48874
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48821: LD_VAR 0 4
48825: PUSH
48826: LD_VAR 0 7
48830: ARRAY
48831: PPUSH
48832: LD_VAR 0 16
48836: PUSH
48837: LD_VAR 0 7
48841: ARRAY
48842: PUSH
48843: LD_INT 1
48845: ARRAY
48846: PUSH
48847: LD_INT 1
48849: ARRAY
48850: PPUSH
48851: LD_VAR 0 16
48855: PUSH
48856: LD_VAR 0 7
48860: ARRAY
48861: PUSH
48862: LD_INT 1
48864: ARRAY
48865: PUSH
48866: LD_INT 2
48868: ARRAY
48869: PPUSH
48870: CALL_OW 114
// end else
48874: GO 48927
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48876: LD_ADDR_VAR 0 15
48880: PUSH
48881: LD_VAR 0 16
48885: PUSH
48886: LD_VAR 0 7
48890: ARRAY
48891: PPUSH
48892: LD_INT 1
48894: PPUSH
48895: CALL_OW 3
48899: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48900: LD_ADDR_VAR 0 16
48904: PUSH
48905: LD_VAR 0 16
48909: PPUSH
48910: LD_VAR 0 7
48914: PPUSH
48915: LD_VAR 0 15
48919: PPUSH
48920: CALL_OW 1
48924: ST_TO_ADDR
// continue ;
48925: GO 47470
// end ; end ; end else
48927: GO 51591
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48929: LD_ADDR_VAR 0 14
48933: PUSH
48934: LD_INT 81
48936: PUSH
48937: LD_VAR 0 4
48941: PUSH
48942: LD_VAR 0 7
48946: ARRAY
48947: PPUSH
48948: CALL_OW 255
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PPUSH
48957: CALL_OW 69
48961: ST_TO_ADDR
// if not tmp then
48962: LD_VAR 0 14
48966: NOT
48967: IFFALSE 48971
// continue ;
48969: GO 47470
// if f_ignore_area then
48971: LD_VAR 0 17
48975: IFFALSE 49063
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48977: LD_ADDR_VAR 0 15
48981: PUSH
48982: LD_VAR 0 14
48986: PPUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 92
48992: PUSH
48993: LD_VAR 0 17
48997: PUSH
48998: LD_INT 1
49000: ARRAY
49001: PUSH
49002: LD_VAR 0 17
49006: PUSH
49007: LD_INT 2
49009: ARRAY
49010: PUSH
49011: LD_VAR 0 17
49015: PUSH
49016: LD_INT 3
49018: ARRAY
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PPUSH
49030: CALL_OW 72
49034: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
49035: LD_VAR 0 14
49039: PUSH
49040: LD_VAR 0 15
49044: DIFF
49045: IFFALSE 49063
// tmp := tmp diff tmp2 ;
49047: LD_ADDR_VAR 0 14
49051: PUSH
49052: LD_VAR 0 14
49056: PUSH
49057: LD_VAR 0 15
49061: DIFF
49062: ST_TO_ADDR
// end ; if not f_murder then
49063: LD_VAR 0 20
49067: NOT
49068: IFFALSE 49126
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
49070: LD_ADDR_VAR 0 15
49074: PUSH
49075: LD_VAR 0 14
49079: PPUSH
49080: LD_INT 3
49082: PUSH
49083: LD_INT 50
49085: PUSH
49086: EMPTY
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PPUSH
49093: CALL_OW 72
49097: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
49098: LD_VAR 0 14
49102: PUSH
49103: LD_VAR 0 15
49107: DIFF
49108: IFFALSE 49126
// tmp := tmp diff tmp2 ;
49110: LD_ADDR_VAR 0 14
49114: PUSH
49115: LD_VAR 0 14
49119: PUSH
49120: LD_VAR 0 15
49124: DIFF
49125: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
49126: LD_ADDR_VAR 0 14
49130: PUSH
49131: LD_VAR 0 4
49135: PUSH
49136: LD_VAR 0 7
49140: ARRAY
49141: PPUSH
49142: LD_VAR 0 14
49146: PPUSH
49147: LD_INT 1
49149: PPUSH
49150: LD_INT 1
49152: PPUSH
49153: CALL 18914 0 4
49157: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
49158: LD_VAR 0 4
49162: PUSH
49163: LD_VAR 0 7
49167: ARRAY
49168: PPUSH
49169: CALL_OW 257
49173: PUSH
49174: LD_INT 1
49176: EQUAL
49177: IFFALSE 49625
// begin if WantPlant ( group [ i ] ) then
49179: LD_VAR 0 4
49183: PUSH
49184: LD_VAR 0 7
49188: ARRAY
49189: PPUSH
49190: CALL 18415 0 1
49194: IFFALSE 49198
// continue ;
49196: GO 47470
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
49198: LD_VAR 0 18
49202: PUSH
49203: LD_VAR 0 4
49207: PUSH
49208: LD_VAR 0 7
49212: ARRAY
49213: PPUSH
49214: CALL_OW 310
49218: NOT
49219: AND
49220: PUSH
49221: LD_VAR 0 14
49225: PUSH
49226: LD_INT 1
49228: ARRAY
49229: PUSH
49230: LD_VAR 0 14
49234: PPUSH
49235: LD_INT 21
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 58
49247: PUSH
49248: EMPTY
49249: LIST
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PPUSH
49255: CALL_OW 72
49259: IN
49260: AND
49261: IFFALSE 49297
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
49263: LD_VAR 0 4
49267: PUSH
49268: LD_VAR 0 7
49272: ARRAY
49273: PPUSH
49274: LD_VAR 0 14
49278: PUSH
49279: LD_INT 1
49281: ARRAY
49282: PPUSH
49283: CALL_OW 120
// attacking := true ;
49287: LD_ADDR_VAR 0 29
49291: PUSH
49292: LD_INT 1
49294: ST_TO_ADDR
// continue ;
49295: GO 47470
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
49297: LD_VAR 0 26
49301: PUSH
49302: LD_VAR 0 4
49306: PUSH
49307: LD_VAR 0 7
49311: ARRAY
49312: PPUSH
49313: CALL_OW 257
49317: PUSH
49318: LD_INT 1
49320: EQUAL
49321: AND
49322: PUSH
49323: LD_VAR 0 4
49327: PUSH
49328: LD_VAR 0 7
49332: ARRAY
49333: PPUSH
49334: CALL_OW 256
49338: PUSH
49339: LD_INT 800
49341: LESS
49342: AND
49343: PUSH
49344: LD_VAR 0 4
49348: PUSH
49349: LD_VAR 0 7
49353: ARRAY
49354: PPUSH
49355: CALL_OW 318
49359: NOT
49360: AND
49361: IFFALSE 49378
// ComCrawl ( group [ i ] ) ;
49363: LD_VAR 0 4
49367: PUSH
49368: LD_VAR 0 7
49372: ARRAY
49373: PPUSH
49374: CALL_OW 137
// if f_mines then
49378: LD_VAR 0 21
49382: IFFALSE 49625
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
49384: LD_VAR 0 14
49388: PUSH
49389: LD_INT 1
49391: ARRAY
49392: PPUSH
49393: CALL_OW 247
49397: PUSH
49398: LD_INT 3
49400: EQUAL
49401: PUSH
49402: LD_VAR 0 14
49406: PUSH
49407: LD_INT 1
49409: ARRAY
49410: PUSH
49411: LD_VAR 0 27
49415: IN
49416: NOT
49417: AND
49418: IFFALSE 49625
// begin x := GetX ( tmp [ 1 ] ) ;
49420: LD_ADDR_VAR 0 10
49424: PUSH
49425: LD_VAR 0 14
49429: PUSH
49430: LD_INT 1
49432: ARRAY
49433: PPUSH
49434: CALL_OW 250
49438: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
49439: LD_ADDR_VAR 0 11
49443: PUSH
49444: LD_VAR 0 14
49448: PUSH
49449: LD_INT 1
49451: ARRAY
49452: PPUSH
49453: CALL_OW 251
49457: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
49458: LD_ADDR_VAR 0 12
49462: PUSH
49463: LD_VAR 0 4
49467: PUSH
49468: LD_VAR 0 7
49472: ARRAY
49473: PPUSH
49474: CALL 45356 0 1
49478: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49479: LD_VAR 0 4
49483: PUSH
49484: LD_VAR 0 7
49488: ARRAY
49489: PPUSH
49490: LD_VAR 0 10
49494: PPUSH
49495: LD_VAR 0 11
49499: PPUSH
49500: LD_VAR 0 14
49504: PUSH
49505: LD_INT 1
49507: ARRAY
49508: PPUSH
49509: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49513: LD_VAR 0 4
49517: PUSH
49518: LD_VAR 0 7
49522: ARRAY
49523: PPUSH
49524: LD_VAR 0 10
49528: PPUSH
49529: LD_VAR 0 12
49533: PPUSH
49534: LD_INT 7
49536: PPUSH
49537: CALL_OW 272
49541: PPUSH
49542: LD_VAR 0 11
49546: PPUSH
49547: LD_VAR 0 12
49551: PPUSH
49552: LD_INT 7
49554: PPUSH
49555: CALL_OW 273
49559: PPUSH
49560: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49564: LD_VAR 0 4
49568: PUSH
49569: LD_VAR 0 7
49573: ARRAY
49574: PPUSH
49575: LD_INT 71
49577: PPUSH
49578: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49582: LD_ADDR_VAR 0 27
49586: PUSH
49587: LD_VAR 0 27
49591: PPUSH
49592: LD_VAR 0 27
49596: PUSH
49597: LD_INT 1
49599: PLUS
49600: PPUSH
49601: LD_VAR 0 14
49605: PUSH
49606: LD_INT 1
49608: ARRAY
49609: PPUSH
49610: CALL_OW 1
49614: ST_TO_ADDR
// attacking := true ;
49615: LD_ADDR_VAR 0 29
49619: PUSH
49620: LD_INT 1
49622: ST_TO_ADDR
// continue ;
49623: GO 47470
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49625: LD_VAR 0 4
49629: PUSH
49630: LD_VAR 0 7
49634: ARRAY
49635: PPUSH
49636: CALL_OW 257
49640: PUSH
49641: LD_INT 17
49643: EQUAL
49644: PUSH
49645: LD_VAR 0 4
49649: PUSH
49650: LD_VAR 0 7
49654: ARRAY
49655: PPUSH
49656: CALL_OW 110
49660: PUSH
49661: LD_INT 71
49663: EQUAL
49664: NOT
49665: AND
49666: IFFALSE 49812
// begin attacking := false ;
49668: LD_ADDR_VAR 0 29
49672: PUSH
49673: LD_INT 0
49675: ST_TO_ADDR
// k := 5 ;
49676: LD_ADDR_VAR 0 9
49680: PUSH
49681: LD_INT 5
49683: ST_TO_ADDR
// if tmp < k then
49684: LD_VAR 0 14
49688: PUSH
49689: LD_VAR 0 9
49693: LESS
49694: IFFALSE 49706
// k := tmp ;
49696: LD_ADDR_VAR 0 9
49700: PUSH
49701: LD_VAR 0 14
49705: ST_TO_ADDR
// for j = 1 to k do
49706: LD_ADDR_VAR 0 8
49710: PUSH
49711: DOUBLE
49712: LD_INT 1
49714: DEC
49715: ST_TO_ADDR
49716: LD_VAR 0 9
49720: PUSH
49721: FOR_TO
49722: IFFALSE 49810
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49724: LD_VAR 0 14
49728: PUSH
49729: LD_VAR 0 8
49733: ARRAY
49734: PUSH
49735: LD_VAR 0 14
49739: PPUSH
49740: LD_INT 58
49742: PUSH
49743: EMPTY
49744: LIST
49745: PPUSH
49746: CALL_OW 72
49750: IN
49751: NOT
49752: IFFALSE 49808
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49754: LD_VAR 0 4
49758: PUSH
49759: LD_VAR 0 7
49763: ARRAY
49764: PPUSH
49765: LD_VAR 0 14
49769: PUSH
49770: LD_VAR 0 8
49774: ARRAY
49775: PPUSH
49776: CALL_OW 115
// attacking := true ;
49780: LD_ADDR_VAR 0 29
49784: PUSH
49785: LD_INT 1
49787: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49788: LD_VAR 0 4
49792: PUSH
49793: LD_VAR 0 7
49797: ARRAY
49798: PPUSH
49799: LD_INT 71
49801: PPUSH
49802: CALL_OW 109
// continue ;
49806: GO 49721
// end ; end ;
49808: GO 49721
49810: POP
49811: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49812: LD_VAR 0 4
49816: PUSH
49817: LD_VAR 0 7
49821: ARRAY
49822: PPUSH
49823: CALL_OW 257
49827: PUSH
49828: LD_INT 8
49830: EQUAL
49831: PUSH
49832: LD_VAR 0 4
49836: PUSH
49837: LD_VAR 0 7
49841: ARRAY
49842: PPUSH
49843: CALL_OW 264
49847: PUSH
49848: LD_INT 28
49850: PUSH
49851: LD_INT 45
49853: PUSH
49854: LD_INT 7
49856: PUSH
49857: LD_INT 47
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: IN
49866: OR
49867: IFFALSE 50123
// begin attacking := false ;
49869: LD_ADDR_VAR 0 29
49873: PUSH
49874: LD_INT 0
49876: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49877: LD_VAR 0 14
49881: PUSH
49882: LD_INT 1
49884: ARRAY
49885: PPUSH
49886: CALL_OW 266
49890: PUSH
49891: LD_INT 32
49893: PUSH
49894: LD_INT 31
49896: PUSH
49897: LD_INT 33
49899: PUSH
49900: LD_INT 4
49902: PUSH
49903: LD_INT 5
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: IN
49913: IFFALSE 50099
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49915: LD_ADDR_VAR 0 9
49919: PUSH
49920: LD_VAR 0 14
49924: PUSH
49925: LD_INT 1
49927: ARRAY
49928: PPUSH
49929: CALL_OW 266
49933: PPUSH
49934: LD_VAR 0 14
49938: PUSH
49939: LD_INT 1
49941: ARRAY
49942: PPUSH
49943: CALL_OW 250
49947: PPUSH
49948: LD_VAR 0 14
49952: PUSH
49953: LD_INT 1
49955: ARRAY
49956: PPUSH
49957: CALL_OW 251
49961: PPUSH
49962: LD_VAR 0 14
49966: PUSH
49967: LD_INT 1
49969: ARRAY
49970: PPUSH
49971: CALL_OW 254
49975: PPUSH
49976: LD_VAR 0 14
49980: PUSH
49981: LD_INT 1
49983: ARRAY
49984: PPUSH
49985: CALL_OW 248
49989: PPUSH
49990: LD_INT 0
49992: PPUSH
49993: CALL 26726 0 6
49997: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49998: LD_ADDR_VAR 0 8
50002: PUSH
50003: LD_VAR 0 4
50007: PUSH
50008: LD_VAR 0 7
50012: ARRAY
50013: PPUSH
50014: LD_VAR 0 9
50018: PPUSH
50019: CALL 45396 0 2
50023: ST_TO_ADDR
// if j then
50024: LD_VAR 0 8
50028: IFFALSE 50097
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50030: LD_VAR 0 8
50034: PUSH
50035: LD_INT 1
50037: ARRAY
50038: PPUSH
50039: LD_VAR 0 8
50043: PUSH
50044: LD_INT 2
50046: ARRAY
50047: PPUSH
50048: CALL_OW 488
50052: IFFALSE 50097
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
50054: LD_VAR 0 4
50058: PUSH
50059: LD_VAR 0 7
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 8
50069: PUSH
50070: LD_INT 1
50072: ARRAY
50073: PPUSH
50074: LD_VAR 0 8
50078: PUSH
50079: LD_INT 2
50081: ARRAY
50082: PPUSH
50083: CALL_OW 116
// attacking := true ;
50087: LD_ADDR_VAR 0 29
50091: PUSH
50092: LD_INT 1
50094: ST_TO_ADDR
// continue ;
50095: GO 47470
// end ; end else
50097: GO 50123
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50099: LD_VAR 0 4
50103: PUSH
50104: LD_VAR 0 7
50108: ARRAY
50109: PPUSH
50110: LD_VAR 0 14
50114: PUSH
50115: LD_INT 1
50117: ARRAY
50118: PPUSH
50119: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
50123: LD_VAR 0 4
50127: PUSH
50128: LD_VAR 0 7
50132: ARRAY
50133: PPUSH
50134: CALL_OW 265
50138: PUSH
50139: LD_INT 11
50141: EQUAL
50142: IFFALSE 50420
// begin k := 10 ;
50144: LD_ADDR_VAR 0 9
50148: PUSH
50149: LD_INT 10
50151: ST_TO_ADDR
// x := 0 ;
50152: LD_ADDR_VAR 0 10
50156: PUSH
50157: LD_INT 0
50159: ST_TO_ADDR
// if tmp < k then
50160: LD_VAR 0 14
50164: PUSH
50165: LD_VAR 0 9
50169: LESS
50170: IFFALSE 50182
// k := tmp ;
50172: LD_ADDR_VAR 0 9
50176: PUSH
50177: LD_VAR 0 14
50181: ST_TO_ADDR
// for j = k downto 1 do
50182: LD_ADDR_VAR 0 8
50186: PUSH
50187: DOUBLE
50188: LD_VAR 0 9
50192: INC
50193: ST_TO_ADDR
50194: LD_INT 1
50196: PUSH
50197: FOR_DOWNTO
50198: IFFALSE 50273
// begin if GetType ( tmp [ j ] ) = unit_human then
50200: LD_VAR 0 14
50204: PUSH
50205: LD_VAR 0 8
50209: ARRAY
50210: PPUSH
50211: CALL_OW 247
50215: PUSH
50216: LD_INT 1
50218: EQUAL
50219: IFFALSE 50271
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
50221: LD_VAR 0 4
50225: PUSH
50226: LD_VAR 0 7
50230: ARRAY
50231: PPUSH
50232: LD_VAR 0 14
50236: PUSH
50237: LD_VAR 0 8
50241: ARRAY
50242: PPUSH
50243: CALL 45667 0 2
// x := tmp [ j ] ;
50247: LD_ADDR_VAR 0 10
50251: PUSH
50252: LD_VAR 0 14
50256: PUSH
50257: LD_VAR 0 8
50261: ARRAY
50262: ST_TO_ADDR
// attacking := true ;
50263: LD_ADDR_VAR 0 29
50267: PUSH
50268: LD_INT 1
50270: ST_TO_ADDR
// end ; end ;
50271: GO 50197
50273: POP
50274: POP
// if not x then
50275: LD_VAR 0 10
50279: NOT
50280: IFFALSE 50420
// begin attacking := true ;
50282: LD_ADDR_VAR 0 29
50286: PUSH
50287: LD_INT 1
50289: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
50290: LD_VAR 0 4
50294: PUSH
50295: LD_VAR 0 7
50299: ARRAY
50300: PPUSH
50301: CALL_OW 250
50305: PPUSH
50306: LD_VAR 0 4
50310: PUSH
50311: LD_VAR 0 7
50315: ARRAY
50316: PPUSH
50317: CALL_OW 251
50321: PPUSH
50322: CALL_OW 546
50326: PUSH
50327: LD_INT 2
50329: ARRAY
50330: PUSH
50331: LD_VAR 0 14
50335: PUSH
50336: LD_INT 1
50338: ARRAY
50339: PPUSH
50340: CALL_OW 250
50344: PPUSH
50345: LD_VAR 0 14
50349: PUSH
50350: LD_INT 1
50352: ARRAY
50353: PPUSH
50354: CALL_OW 251
50358: PPUSH
50359: CALL_OW 546
50363: PUSH
50364: LD_INT 2
50366: ARRAY
50367: EQUAL
50368: IFFALSE 50396
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
50370: LD_VAR 0 4
50374: PUSH
50375: LD_VAR 0 7
50379: ARRAY
50380: PPUSH
50381: LD_VAR 0 14
50385: PUSH
50386: LD_INT 1
50388: ARRAY
50389: PPUSH
50390: CALL 45667 0 2
50394: GO 50420
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50396: LD_VAR 0 4
50400: PUSH
50401: LD_VAR 0 7
50405: ARRAY
50406: PPUSH
50407: LD_VAR 0 14
50411: PUSH
50412: LD_INT 1
50414: ARRAY
50415: PPUSH
50416: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
50420: LD_VAR 0 4
50424: PUSH
50425: LD_VAR 0 7
50429: ARRAY
50430: PPUSH
50431: CALL_OW 264
50435: PUSH
50436: LD_INT 29
50438: EQUAL
50439: IFFALSE 50805
// begin if WantsToAttack ( group [ i ] ) in bombed then
50441: LD_VAR 0 4
50445: PUSH
50446: LD_VAR 0 7
50450: ARRAY
50451: PPUSH
50452: CALL_OW 319
50456: PUSH
50457: LD_VAR 0 28
50461: IN
50462: IFFALSE 50466
// continue ;
50464: GO 47470
// k := 8 ;
50466: LD_ADDR_VAR 0 9
50470: PUSH
50471: LD_INT 8
50473: ST_TO_ADDR
// x := 0 ;
50474: LD_ADDR_VAR 0 10
50478: PUSH
50479: LD_INT 0
50481: ST_TO_ADDR
// if tmp < k then
50482: LD_VAR 0 14
50486: PUSH
50487: LD_VAR 0 9
50491: LESS
50492: IFFALSE 50504
// k := tmp ;
50494: LD_ADDR_VAR 0 9
50498: PUSH
50499: LD_VAR 0 14
50503: ST_TO_ADDR
// for j = 1 to k do
50504: LD_ADDR_VAR 0 8
50508: PUSH
50509: DOUBLE
50510: LD_INT 1
50512: DEC
50513: ST_TO_ADDR
50514: LD_VAR 0 9
50518: PUSH
50519: FOR_TO
50520: IFFALSE 50652
// begin if GetType ( tmp [ j ] ) = unit_building then
50522: LD_VAR 0 14
50526: PUSH
50527: LD_VAR 0 8
50531: ARRAY
50532: PPUSH
50533: CALL_OW 247
50537: PUSH
50538: LD_INT 3
50540: EQUAL
50541: IFFALSE 50650
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50543: LD_VAR 0 14
50547: PUSH
50548: LD_VAR 0 8
50552: ARRAY
50553: PUSH
50554: LD_VAR 0 28
50558: IN
50559: NOT
50560: PUSH
50561: LD_VAR 0 14
50565: PUSH
50566: LD_VAR 0 8
50570: ARRAY
50571: PPUSH
50572: CALL_OW 313
50576: AND
50577: IFFALSE 50650
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50579: LD_VAR 0 4
50583: PUSH
50584: LD_VAR 0 7
50588: ARRAY
50589: PPUSH
50590: LD_VAR 0 14
50594: PUSH
50595: LD_VAR 0 8
50599: ARRAY
50600: PPUSH
50601: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50605: LD_ADDR_VAR 0 28
50609: PUSH
50610: LD_VAR 0 28
50614: PPUSH
50615: LD_VAR 0 28
50619: PUSH
50620: LD_INT 1
50622: PLUS
50623: PPUSH
50624: LD_VAR 0 14
50628: PUSH
50629: LD_VAR 0 8
50633: ARRAY
50634: PPUSH
50635: CALL_OW 1
50639: ST_TO_ADDR
// attacking := true ;
50640: LD_ADDR_VAR 0 29
50644: PUSH
50645: LD_INT 1
50647: ST_TO_ADDR
// break ;
50648: GO 50652
// end ; end ;
50650: GO 50519
50652: POP
50653: POP
// if not attacking and f_attack_depot then
50654: LD_VAR 0 29
50658: NOT
50659: PUSH
50660: LD_VAR 0 25
50664: AND
50665: IFFALSE 50760
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50667: LD_ADDR_VAR 0 13
50671: PUSH
50672: LD_VAR 0 14
50676: PPUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 30
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 30
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: PPUSH
50705: CALL_OW 72
50709: ST_TO_ADDR
// if z then
50710: LD_VAR 0 13
50714: IFFALSE 50760
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50716: LD_VAR 0 4
50720: PUSH
50721: LD_VAR 0 7
50725: ARRAY
50726: PPUSH
50727: LD_VAR 0 13
50731: PPUSH
50732: LD_VAR 0 4
50736: PUSH
50737: LD_VAR 0 7
50741: ARRAY
50742: PPUSH
50743: CALL_OW 74
50747: PPUSH
50748: CALL_OW 115
// attacking := true ;
50752: LD_ADDR_VAR 0 29
50756: PUSH
50757: LD_INT 1
50759: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50760: LD_VAR 0 4
50764: PUSH
50765: LD_VAR 0 7
50769: ARRAY
50770: PPUSH
50771: CALL_OW 256
50775: PUSH
50776: LD_INT 500
50778: LESS
50779: IFFALSE 50805
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50781: LD_VAR 0 4
50785: PUSH
50786: LD_VAR 0 7
50790: ARRAY
50791: PPUSH
50792: LD_VAR 0 14
50796: PUSH
50797: LD_INT 1
50799: ARRAY
50800: PPUSH
50801: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
50805: LD_VAR 0 4
50809: PUSH
50810: LD_VAR 0 7
50814: ARRAY
50815: PPUSH
50816: CALL_OW 264
50820: PUSH
50821: LD_INT 49
50823: EQUAL
50824: IFFALSE 50945
// begin if not HasTask ( group [ i ] ) then
50826: LD_VAR 0 4
50830: PUSH
50831: LD_VAR 0 7
50835: ARRAY
50836: PPUSH
50837: CALL_OW 314
50841: NOT
50842: IFFALSE 50945
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: LD_INT 81
50851: PUSH
50852: LD_VAR 0 4
50856: PUSH
50857: LD_VAR 0 7
50861: ARRAY
50862: PPUSH
50863: CALL_OW 255
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PPUSH
50872: CALL_OW 69
50876: PPUSH
50877: LD_VAR 0 4
50881: PUSH
50882: LD_VAR 0 7
50886: ARRAY
50887: PPUSH
50888: CALL_OW 74
50892: ST_TO_ADDR
// if k then
50893: LD_VAR 0 9
50897: IFFALSE 50945
// if GetDistUnits ( group [ i ] , k ) > 10 then
50899: LD_VAR 0 4
50903: PUSH
50904: LD_VAR 0 7
50908: ARRAY
50909: PPUSH
50910: LD_VAR 0 9
50914: PPUSH
50915: CALL_OW 296
50919: PUSH
50920: LD_INT 10
50922: GREATER
50923: IFFALSE 50945
// ComMoveUnit ( group [ i ] , k ) ;
50925: LD_VAR 0 4
50929: PUSH
50930: LD_VAR 0 7
50934: ARRAY
50935: PPUSH
50936: LD_VAR 0 9
50940: PPUSH
50941: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50945: LD_VAR 0 4
50949: PUSH
50950: LD_VAR 0 7
50954: ARRAY
50955: PPUSH
50956: CALL_OW 256
50960: PUSH
50961: LD_INT 250
50963: LESS
50964: PUSH
50965: LD_VAR 0 4
50969: PUSH
50970: LD_VAR 0 7
50974: ARRAY
50975: PUSH
50976: LD_INT 21
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 23
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PPUSH
51000: CALL_OW 69
51004: IN
51005: AND
51006: IFFALSE 51131
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
51008: LD_ADDR_VAR 0 9
51012: PUSH
51013: LD_OWVAR 3
51017: PUSH
51018: LD_VAR 0 4
51022: PUSH
51023: LD_VAR 0 7
51027: ARRAY
51028: DIFF
51029: PPUSH
51030: LD_VAR 0 4
51034: PUSH
51035: LD_VAR 0 7
51039: ARRAY
51040: PPUSH
51041: CALL_OW 74
51045: ST_TO_ADDR
// if not k then
51046: LD_VAR 0 9
51050: NOT
51051: IFFALSE 51055
// continue ;
51053: GO 47470
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
51055: LD_VAR 0 9
51059: PUSH
51060: LD_INT 81
51062: PUSH
51063: LD_VAR 0 4
51067: PUSH
51068: LD_VAR 0 7
51072: ARRAY
51073: PPUSH
51074: CALL_OW 255
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PPUSH
51083: CALL_OW 69
51087: IN
51088: PUSH
51089: LD_VAR 0 9
51093: PPUSH
51094: LD_VAR 0 4
51098: PUSH
51099: LD_VAR 0 7
51103: ARRAY
51104: PPUSH
51105: CALL_OW 296
51109: PUSH
51110: LD_INT 5
51112: LESS
51113: AND
51114: IFFALSE 51131
// ComAutodestruct ( group [ i ] ) ;
51116: LD_VAR 0 4
51120: PUSH
51121: LD_VAR 0 7
51125: ARRAY
51126: PPUSH
51127: CALL 45565 0 1
// end ; if f_attack_depot then
51131: LD_VAR 0 25
51135: IFFALSE 51247
// begin k := 6 ;
51137: LD_ADDR_VAR 0 9
51141: PUSH
51142: LD_INT 6
51144: ST_TO_ADDR
// if tmp < k then
51145: LD_VAR 0 14
51149: PUSH
51150: LD_VAR 0 9
51154: LESS
51155: IFFALSE 51167
// k := tmp ;
51157: LD_ADDR_VAR 0 9
51161: PUSH
51162: LD_VAR 0 14
51166: ST_TO_ADDR
// for j = 1 to k do
51167: LD_ADDR_VAR 0 8
51171: PUSH
51172: DOUBLE
51173: LD_INT 1
51175: DEC
51176: ST_TO_ADDR
51177: LD_VAR 0 9
51181: PUSH
51182: FOR_TO
51183: IFFALSE 51245
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
51185: LD_VAR 0 8
51189: PPUSH
51190: CALL_OW 266
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: IN
51205: IFFALSE 51243
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
51207: LD_VAR 0 4
51211: PUSH
51212: LD_VAR 0 7
51216: ARRAY
51217: PPUSH
51218: LD_VAR 0 14
51222: PUSH
51223: LD_VAR 0 8
51227: ARRAY
51228: PPUSH
51229: CALL_OW 115
// attacking := true ;
51233: LD_ADDR_VAR 0 29
51237: PUSH
51238: LD_INT 1
51240: ST_TO_ADDR
// break ;
51241: GO 51245
// end ;
51243: GO 51182
51245: POP
51246: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
51247: LD_VAR 0 4
51251: PUSH
51252: LD_VAR 0 7
51256: ARRAY
51257: PPUSH
51258: CALL_OW 302
51262: PUSH
51263: LD_VAR 0 29
51267: NOT
51268: AND
51269: IFFALSE 51591
// begin if GetTag ( group [ i ] ) = 71 then
51271: LD_VAR 0 4
51275: PUSH
51276: LD_VAR 0 7
51280: ARRAY
51281: PPUSH
51282: CALL_OW 110
51286: PUSH
51287: LD_INT 71
51289: EQUAL
51290: IFFALSE 51331
// begin if HasTask ( group [ i ] ) then
51292: LD_VAR 0 4
51296: PUSH
51297: LD_VAR 0 7
51301: ARRAY
51302: PPUSH
51303: CALL_OW 314
51307: IFFALSE 51313
// continue else
51309: GO 47470
51311: GO 51331
// SetTag ( group [ i ] , 0 ) ;
51313: LD_VAR 0 4
51317: PUSH
51318: LD_VAR 0 7
51322: ARRAY
51323: PPUSH
51324: LD_INT 0
51326: PPUSH
51327: CALL_OW 109
// end ; k := 8 ;
51331: LD_ADDR_VAR 0 9
51335: PUSH
51336: LD_INT 8
51338: ST_TO_ADDR
// x := 0 ;
51339: LD_ADDR_VAR 0 10
51343: PUSH
51344: LD_INT 0
51346: ST_TO_ADDR
// if tmp < k then
51347: LD_VAR 0 14
51351: PUSH
51352: LD_VAR 0 9
51356: LESS
51357: IFFALSE 51369
// k := tmp ;
51359: LD_ADDR_VAR 0 9
51363: PUSH
51364: LD_VAR 0 14
51368: ST_TO_ADDR
// for j = 1 to k do
51369: LD_ADDR_VAR 0 8
51373: PUSH
51374: DOUBLE
51375: LD_INT 1
51377: DEC
51378: ST_TO_ADDR
51379: LD_VAR 0 9
51383: PUSH
51384: FOR_TO
51385: IFFALSE 51483
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
51387: LD_VAR 0 14
51391: PUSH
51392: LD_VAR 0 8
51396: ARRAY
51397: PPUSH
51398: CALL_OW 247
51402: PUSH
51403: LD_INT 1
51405: EQUAL
51406: PUSH
51407: LD_VAR 0 14
51411: PUSH
51412: LD_VAR 0 8
51416: ARRAY
51417: PPUSH
51418: CALL_OW 256
51422: PUSH
51423: LD_INT 250
51425: LESS
51426: PUSH
51427: LD_VAR 0 20
51431: AND
51432: PUSH
51433: LD_VAR 0 20
51437: NOT
51438: PUSH
51439: LD_VAR 0 14
51443: PUSH
51444: LD_VAR 0 8
51448: ARRAY
51449: PPUSH
51450: CALL_OW 256
51454: PUSH
51455: LD_INT 250
51457: GREATEREQUAL
51458: AND
51459: OR
51460: AND
51461: IFFALSE 51481
// begin x := tmp [ j ] ;
51463: LD_ADDR_VAR 0 10
51467: PUSH
51468: LD_VAR 0 14
51472: PUSH
51473: LD_VAR 0 8
51477: ARRAY
51478: ST_TO_ADDR
// break ;
51479: GO 51483
// end ;
51481: GO 51384
51483: POP
51484: POP
// if x then
51485: LD_VAR 0 10
51489: IFFALSE 51513
// ComAttackUnit ( group [ i ] , x ) else
51491: LD_VAR 0 4
51495: PUSH
51496: LD_VAR 0 7
51500: ARRAY
51501: PPUSH
51502: LD_VAR 0 10
51506: PPUSH
51507: CALL_OW 115
51511: GO 51537
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
51513: LD_VAR 0 4
51517: PUSH
51518: LD_VAR 0 7
51522: ARRAY
51523: PPUSH
51524: LD_VAR 0 14
51528: PUSH
51529: LD_INT 1
51531: ARRAY
51532: PPUSH
51533: CALL_OW 115
// if not HasTask ( group [ i ] ) then
51537: LD_VAR 0 4
51541: PUSH
51542: LD_VAR 0 7
51546: ARRAY
51547: PPUSH
51548: CALL_OW 314
51552: NOT
51553: IFFALSE 51591
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
51555: LD_VAR 0 4
51559: PUSH
51560: LD_VAR 0 7
51564: ARRAY
51565: PPUSH
51566: LD_VAR 0 14
51570: PPUSH
51571: LD_VAR 0 4
51575: PUSH
51576: LD_VAR 0 7
51580: ARRAY
51581: PPUSH
51582: CALL_OW 74
51586: PPUSH
51587: CALL_OW 115
// end ; end ; end ;
51591: GO 47470
51593: POP
51594: POP
// wait ( 0 0$2 ) ;
51595: LD_INT 70
51597: PPUSH
51598: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
51602: LD_VAR 0 4
51606: NOT
51607: PUSH
51608: LD_VAR 0 4
51612: PUSH
51613: EMPTY
51614: EQUAL
51615: OR
51616: PUSH
51617: LD_INT 81
51619: PUSH
51620: LD_VAR 0 35
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PPUSH
51629: CALL_OW 69
51633: NOT
51634: OR
51635: IFFALSE 47455
// end ;
51637: LD_VAR 0 2
51641: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51642: LD_INT 0
51644: PPUSH
51645: PPUSH
51646: PPUSH
51647: PPUSH
// if not base_units then
51648: LD_VAR 0 1
51652: NOT
51653: IFFALSE 51657
// exit ;
51655: GO 51744
// result := false ;
51657: LD_ADDR_VAR 0 2
51661: PUSH
51662: LD_INT 0
51664: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51665: LD_ADDR_VAR 0 5
51669: PUSH
51670: LD_VAR 0 1
51674: PPUSH
51675: LD_INT 21
51677: PUSH
51678: LD_INT 3
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PPUSH
51685: CALL_OW 72
51689: ST_TO_ADDR
// if not tmp then
51690: LD_VAR 0 5
51694: NOT
51695: IFFALSE 51699
// exit ;
51697: GO 51744
// for i in tmp do
51699: LD_ADDR_VAR 0 3
51703: PUSH
51704: LD_VAR 0 5
51708: PUSH
51709: FOR_IN
51710: IFFALSE 51742
// begin result := EnemyInRange ( i , 22 ) ;
51712: LD_ADDR_VAR 0 2
51716: PUSH
51717: LD_VAR 0 3
51721: PPUSH
51722: LD_INT 22
51724: PPUSH
51725: CALL 45271 0 2
51729: ST_TO_ADDR
// if result then
51730: LD_VAR 0 2
51734: IFFALSE 51740
// exit ;
51736: POP
51737: POP
51738: GO 51744
// end ;
51740: GO 51709
51742: POP
51743: POP
// end ;
51744: LD_VAR 0 2
51748: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51749: LD_INT 0
51751: PPUSH
51752: PPUSH
// if not units then
51753: LD_VAR 0 1
51757: NOT
51758: IFFALSE 51762
// exit ;
51760: GO 51832
// result := [ ] ;
51762: LD_ADDR_VAR 0 3
51766: PUSH
51767: EMPTY
51768: ST_TO_ADDR
// for i in units do
51769: LD_ADDR_VAR 0 4
51773: PUSH
51774: LD_VAR 0 1
51778: PUSH
51779: FOR_IN
51780: IFFALSE 51830
// if GetTag ( i ) = tag then
51782: LD_VAR 0 4
51786: PPUSH
51787: CALL_OW 110
51791: PUSH
51792: LD_VAR 0 2
51796: EQUAL
51797: IFFALSE 51828
// result := Insert ( result , result + 1 , i ) ;
51799: LD_ADDR_VAR 0 3
51803: PUSH
51804: LD_VAR 0 3
51808: PPUSH
51809: LD_VAR 0 3
51813: PUSH
51814: LD_INT 1
51816: PLUS
51817: PPUSH
51818: LD_VAR 0 4
51822: PPUSH
51823: CALL_OW 2
51827: ST_TO_ADDR
51828: GO 51779
51830: POP
51831: POP
// end ;
51832: LD_VAR 0 3
51836: RET
// export function IsDriver ( un ) ; begin
51837: LD_INT 0
51839: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51840: LD_ADDR_VAR 0 2
51844: PUSH
51845: LD_VAR 0 1
51849: PUSH
51850: LD_INT 55
51852: PUSH
51853: EMPTY
51854: LIST
51855: PPUSH
51856: CALL_OW 69
51860: IN
51861: ST_TO_ADDR
// end ;
51862: LD_VAR 0 2
51866: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51867: LD_INT 0
51869: PPUSH
51870: PPUSH
// list := [ ] ;
51871: LD_ADDR_VAR 0 5
51875: PUSH
51876: EMPTY
51877: ST_TO_ADDR
// case d of 0 :
51878: LD_VAR 0 3
51882: PUSH
51883: LD_INT 0
51885: DOUBLE
51886: EQUAL
51887: IFTRUE 51891
51889: GO 52024
51891: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51892: LD_ADDR_VAR 0 5
51896: PUSH
51897: LD_VAR 0 1
51901: PUSH
51902: LD_INT 4
51904: MINUS
51905: PUSH
51906: LD_VAR 0 2
51910: PUSH
51911: LD_INT 4
51913: MINUS
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: PUSH
51923: LD_VAR 0 1
51927: PUSH
51928: LD_INT 3
51930: MINUS
51931: PUSH
51932: LD_VAR 0 2
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: PUSH
51945: LD_VAR 0 1
51949: PUSH
51950: LD_INT 4
51952: PLUS
51953: PUSH
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: PUSH
51967: LD_VAR 0 1
51971: PUSH
51972: LD_INT 3
51974: PLUS
51975: PUSH
51976: LD_VAR 0 2
51980: PUSH
51981: LD_INT 3
51983: PLUS
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: PUSH
51993: LD_VAR 0 1
51997: PUSH
51998: LD_VAR 0 2
52002: PUSH
52003: LD_INT 4
52005: PLUS
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// end ; 1 :
52022: GO 52722
52024: LD_INT 1
52026: DOUBLE
52027: EQUAL
52028: IFTRUE 52032
52030: GO 52165
52032: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52033: LD_ADDR_VAR 0 5
52037: PUSH
52038: LD_VAR 0 1
52042: PUSH
52043: LD_VAR 0 2
52047: PUSH
52048: LD_INT 4
52050: MINUS
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: PUSH
52060: LD_VAR 0 1
52064: PUSH
52065: LD_INT 3
52067: MINUS
52068: PUSH
52069: LD_VAR 0 2
52073: PUSH
52074: LD_INT 3
52076: MINUS
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: PUSH
52086: LD_VAR 0 1
52090: PUSH
52091: LD_INT 4
52093: MINUS
52094: PUSH
52095: LD_VAR 0 2
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: PUSH
52108: LD_VAR 0 1
52112: PUSH
52113: LD_VAR 0 2
52117: PUSH
52118: LD_INT 3
52120: PLUS
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: PUSH
52130: LD_VAR 0 1
52134: PUSH
52135: LD_INT 4
52137: PLUS
52138: PUSH
52139: LD_VAR 0 2
52143: PUSH
52144: LD_INT 4
52146: PLUS
52147: PUSH
52148: LD_INT 5
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// end ; 2 :
52163: GO 52722
52165: LD_INT 2
52167: DOUBLE
52168: EQUAL
52169: IFTRUE 52173
52171: GO 52302
52173: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52174: LD_ADDR_VAR 0 5
52178: PUSH
52179: LD_VAR 0 1
52183: PUSH
52184: LD_VAR 0 2
52188: PUSH
52189: LD_INT 3
52191: MINUS
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: PUSH
52201: LD_VAR 0 1
52205: PUSH
52206: LD_INT 4
52208: PLUS
52209: PUSH
52210: LD_VAR 0 2
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: PUSH
52223: LD_VAR 0 1
52227: PUSH
52228: LD_VAR 0 2
52232: PUSH
52233: LD_INT 4
52235: PLUS
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: LIST
52244: PUSH
52245: LD_VAR 0 1
52249: PUSH
52250: LD_INT 3
52252: MINUS
52253: PUSH
52254: LD_VAR 0 2
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: LD_VAR 0 1
52271: PUSH
52272: LD_INT 4
52274: MINUS
52275: PUSH
52276: LD_VAR 0 2
52280: PUSH
52281: LD_INT 4
52283: MINUS
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: ST_TO_ADDR
// end ; 3 :
52300: GO 52722
52302: LD_INT 3
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52310
52308: GO 52443
52310: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52311: LD_ADDR_VAR 0 5
52315: PUSH
52316: LD_VAR 0 1
52320: PUSH
52321: LD_INT 3
52323: PLUS
52324: PUSH
52325: LD_VAR 0 2
52329: PUSH
52330: LD_INT 4
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: PUSH
52338: LD_VAR 0 1
52342: PUSH
52343: LD_INT 4
52345: PLUS
52346: PUSH
52347: LD_VAR 0 2
52351: PUSH
52352: LD_INT 4
52354: PLUS
52355: PUSH
52356: LD_INT 5
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: PUSH
52364: LD_VAR 0 1
52368: PUSH
52369: LD_INT 4
52371: MINUS
52372: PUSH
52373: LD_VAR 0 2
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: PUSH
52386: LD_VAR 0 1
52390: PUSH
52391: LD_VAR 0 2
52395: PUSH
52396: LD_INT 4
52398: MINUS
52399: PUSH
52400: LD_INT 3
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: PUSH
52408: LD_VAR 0 1
52412: PUSH
52413: LD_INT 3
52415: MINUS
52416: PUSH
52417: LD_VAR 0 2
52421: PUSH
52422: LD_INT 3
52424: MINUS
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// end ; 4 :
52441: GO 52722
52443: LD_INT 4
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52451
52449: GO 52584
52451: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52452: LD_ADDR_VAR 0 5
52456: PUSH
52457: LD_VAR 0 1
52461: PUSH
52462: LD_VAR 0 2
52466: PUSH
52467: LD_INT 4
52469: PLUS
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: PUSH
52479: LD_VAR 0 1
52483: PUSH
52484: LD_INT 3
52486: PLUS
52487: PUSH
52488: LD_VAR 0 2
52492: PUSH
52493: LD_INT 3
52495: PLUS
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: PUSH
52505: LD_VAR 0 1
52509: PUSH
52510: LD_INT 4
52512: PLUS
52513: PUSH
52514: LD_VAR 0 2
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: LIST
52526: PUSH
52527: LD_VAR 0 1
52531: PUSH
52532: LD_VAR 0 2
52536: PUSH
52537: LD_INT 3
52539: MINUS
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: PUSH
52549: LD_VAR 0 1
52553: PUSH
52554: LD_INT 4
52556: MINUS
52557: PUSH
52558: LD_VAR 0 2
52562: PUSH
52563: LD_INT 4
52565: MINUS
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// end ; 5 :
52582: GO 52722
52584: LD_INT 5
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52592
52590: GO 52721
52592: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52593: LD_ADDR_VAR 0 5
52597: PUSH
52598: LD_VAR 0 1
52602: PUSH
52603: LD_INT 4
52605: MINUS
52606: PUSH
52607: LD_VAR 0 2
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: PUSH
52620: LD_VAR 0 1
52624: PUSH
52625: LD_VAR 0 2
52629: PUSH
52630: LD_INT 4
52632: MINUS
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: PUSH
52642: LD_VAR 0 1
52646: PUSH
52647: LD_INT 4
52649: PLUS
52650: PUSH
52651: LD_VAR 0 2
52655: PUSH
52656: LD_INT 4
52658: PLUS
52659: PUSH
52660: LD_INT 5
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: PUSH
52668: LD_VAR 0 1
52672: PUSH
52673: LD_INT 3
52675: PLUS
52676: PUSH
52677: LD_VAR 0 2
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_VAR 0 2
52699: PUSH
52700: LD_INT 3
52702: PLUS
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: ST_TO_ADDR
// end ; end ;
52719: GO 52722
52721: POP
// result := list ;
52722: LD_ADDR_VAR 0 4
52726: PUSH
52727: LD_VAR 0 5
52731: ST_TO_ADDR
// end ;
52732: LD_VAR 0 4
52736: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52737: LD_INT 0
52739: PPUSH
52740: PPUSH
52741: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52742: LD_VAR 0 1
52746: NOT
52747: PUSH
52748: LD_VAR 0 2
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: LD_INT 4
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: IN
52771: NOT
52772: OR
52773: IFFALSE 52777
// exit ;
52775: GO 52869
// tmp := [ ] ;
52777: LD_ADDR_VAR 0 5
52781: PUSH
52782: EMPTY
52783: ST_TO_ADDR
// for i in units do
52784: LD_ADDR_VAR 0 4
52788: PUSH
52789: LD_VAR 0 1
52793: PUSH
52794: FOR_IN
52795: IFFALSE 52838
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52797: LD_ADDR_VAR 0 5
52801: PUSH
52802: LD_VAR 0 5
52806: PPUSH
52807: LD_VAR 0 5
52811: PUSH
52812: LD_INT 1
52814: PLUS
52815: PPUSH
52816: LD_VAR 0 4
52820: PPUSH
52821: LD_VAR 0 2
52825: PPUSH
52826: CALL_OW 259
52830: PPUSH
52831: CALL_OW 2
52835: ST_TO_ADDR
52836: GO 52794
52838: POP
52839: POP
// if not tmp then
52840: LD_VAR 0 5
52844: NOT
52845: IFFALSE 52849
// exit ;
52847: GO 52869
// result := SortListByListDesc ( units , tmp ) ;
52849: LD_ADDR_VAR 0 3
52853: PUSH
52854: LD_VAR 0 1
52858: PPUSH
52859: LD_VAR 0 5
52863: PPUSH
52864: CALL_OW 77
52868: ST_TO_ADDR
// end ;
52869: LD_VAR 0 3
52873: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52874: LD_INT 0
52876: PPUSH
52877: PPUSH
52878: PPUSH
// x := GetX ( building ) ;
52879: LD_ADDR_VAR 0 4
52883: PUSH
52884: LD_VAR 0 2
52888: PPUSH
52889: CALL_OW 250
52893: ST_TO_ADDR
// y := GetY ( building ) ;
52894: LD_ADDR_VAR 0 5
52898: PUSH
52899: LD_VAR 0 2
52903: PPUSH
52904: CALL_OW 251
52908: ST_TO_ADDR
// if GetTaskList ( unit ) then
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL_OW 437
52918: IFFALSE 53013
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52920: LD_STRING e
52922: PUSH
52923: LD_VAR 0 1
52927: PPUSH
52928: CALL_OW 437
52932: PUSH
52933: LD_INT 1
52935: ARRAY
52936: PUSH
52937: LD_INT 1
52939: ARRAY
52940: EQUAL
52941: PUSH
52942: LD_VAR 0 4
52946: PUSH
52947: LD_VAR 0 1
52951: PPUSH
52952: CALL_OW 437
52956: PUSH
52957: LD_INT 1
52959: ARRAY
52960: PUSH
52961: LD_INT 2
52963: ARRAY
52964: EQUAL
52965: AND
52966: PUSH
52967: LD_VAR 0 5
52971: PUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: CALL_OW 437
52981: PUSH
52982: LD_INT 1
52984: ARRAY
52985: PUSH
52986: LD_INT 3
52988: ARRAY
52989: EQUAL
52990: AND
52991: IFFALSE 53003
// result := true else
52993: LD_ADDR_VAR 0 3
52997: PUSH
52998: LD_INT 1
53000: ST_TO_ADDR
53001: GO 53011
// result := false ;
53003: LD_ADDR_VAR 0 3
53007: PUSH
53008: LD_INT 0
53010: ST_TO_ADDR
// end else
53011: GO 53021
// result := false ;
53013: LD_ADDR_VAR 0 3
53017: PUSH
53018: LD_INT 0
53020: ST_TO_ADDR
// end ;
53021: LD_VAR 0 3
53025: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53026: LD_INT 0
53028: PPUSH
53029: PPUSH
53030: PPUSH
53031: PPUSH
// if not unit or not area then
53032: LD_VAR 0 1
53036: NOT
53037: PUSH
53038: LD_VAR 0 2
53042: NOT
53043: OR
53044: IFFALSE 53048
// exit ;
53046: GO 53212
// tmp := AreaToList ( area , i ) ;
53048: LD_ADDR_VAR 0 6
53052: PUSH
53053: LD_VAR 0 2
53057: PPUSH
53058: LD_VAR 0 5
53062: PPUSH
53063: CALL_OW 517
53067: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53068: LD_ADDR_VAR 0 5
53072: PUSH
53073: DOUBLE
53074: LD_INT 1
53076: DEC
53077: ST_TO_ADDR
53078: LD_VAR 0 6
53082: PUSH
53083: LD_INT 1
53085: ARRAY
53086: PUSH
53087: FOR_TO
53088: IFFALSE 53210
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53090: LD_ADDR_VAR 0 7
53094: PUSH
53095: LD_VAR 0 6
53099: PUSH
53100: LD_INT 1
53102: ARRAY
53103: PUSH
53104: LD_VAR 0 5
53108: ARRAY
53109: PUSH
53110: LD_VAR 0 6
53114: PUSH
53115: LD_INT 2
53117: ARRAY
53118: PUSH
53119: LD_VAR 0 5
53123: ARRAY
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53129: LD_VAR 0 7
53133: PUSH
53134: LD_INT 1
53136: ARRAY
53137: PPUSH
53138: LD_VAR 0 7
53142: PUSH
53143: LD_INT 2
53145: ARRAY
53146: PPUSH
53147: CALL_OW 428
53151: PUSH
53152: LD_INT 0
53154: EQUAL
53155: IFFALSE 53208
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53157: LD_VAR 0 1
53161: PPUSH
53162: LD_VAR 0 7
53166: PUSH
53167: LD_INT 1
53169: ARRAY
53170: PPUSH
53171: LD_VAR 0 7
53175: PUSH
53176: LD_INT 2
53178: ARRAY
53179: PPUSH
53180: LD_VAR 0 3
53184: PPUSH
53185: CALL_OW 48
// result := IsPlaced ( unit ) ;
53189: LD_ADDR_VAR 0 4
53193: PUSH
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 305
53203: ST_TO_ADDR
// exit ;
53204: POP
53205: POP
53206: GO 53212
// end ; end ;
53208: GO 53087
53210: POP
53211: POP
// end ;
53212: LD_VAR 0 4
53216: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53217: LD_INT 0
53219: PPUSH
53220: PPUSH
53221: PPUSH
// if not side or side > 8 then
53222: LD_VAR 0 1
53226: NOT
53227: PUSH
53228: LD_VAR 0 1
53232: PUSH
53233: LD_INT 8
53235: GREATER
53236: OR
53237: IFFALSE 53241
// exit ;
53239: GO 53428
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53241: LD_ADDR_VAR 0 4
53245: PUSH
53246: LD_INT 22
53248: PUSH
53249: LD_VAR 0 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 21
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PPUSH
53272: CALL_OW 69
53276: ST_TO_ADDR
// if not tmp then
53277: LD_VAR 0 4
53281: NOT
53282: IFFALSE 53286
// exit ;
53284: GO 53428
// enable_addtolog := true ;
53286: LD_ADDR_OWVAR 81
53290: PUSH
53291: LD_INT 1
53293: ST_TO_ADDR
// AddToLog ( [ ) ;
53294: LD_STRING [
53296: PPUSH
53297: CALL_OW 561
// for i in tmp do
53301: LD_ADDR_VAR 0 3
53305: PUSH
53306: LD_VAR 0 4
53310: PUSH
53311: FOR_IN
53312: IFFALSE 53419
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53314: LD_STRING [
53316: PUSH
53317: LD_VAR 0 3
53321: PPUSH
53322: CALL_OW 266
53326: STR
53327: PUSH
53328: LD_STRING , 
53330: STR
53331: PUSH
53332: LD_VAR 0 3
53336: PPUSH
53337: CALL_OW 250
53341: STR
53342: PUSH
53343: LD_STRING , 
53345: STR
53346: PUSH
53347: LD_VAR 0 3
53351: PPUSH
53352: CALL_OW 251
53356: STR
53357: PUSH
53358: LD_STRING , 
53360: STR
53361: PUSH
53362: LD_VAR 0 3
53366: PPUSH
53367: CALL_OW 254
53371: STR
53372: PUSH
53373: LD_STRING , 
53375: STR
53376: PUSH
53377: LD_VAR 0 3
53381: PPUSH
53382: LD_INT 1
53384: PPUSH
53385: CALL_OW 268
53389: STR
53390: PUSH
53391: LD_STRING , 
53393: STR
53394: PUSH
53395: LD_VAR 0 3
53399: PPUSH
53400: LD_INT 2
53402: PPUSH
53403: CALL_OW 268
53407: STR
53408: PUSH
53409: LD_STRING ],
53411: STR
53412: PPUSH
53413: CALL_OW 561
// end ;
53417: GO 53311
53419: POP
53420: POP
// AddToLog ( ]; ) ;
53421: LD_STRING ];
53423: PPUSH
53424: CALL_OW 561
// end ;
53428: LD_VAR 0 2
53432: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53433: LD_INT 0
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
// if not area or not rate or not max then
53440: LD_VAR 0 1
53444: NOT
53445: PUSH
53446: LD_VAR 0 2
53450: NOT
53451: OR
53452: PUSH
53453: LD_VAR 0 4
53457: NOT
53458: OR
53459: IFFALSE 53463
// exit ;
53461: GO 53655
// while 1 do
53463: LD_INT 1
53465: IFFALSE 53655
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53467: LD_ADDR_VAR 0 9
53471: PUSH
53472: LD_VAR 0 1
53476: PPUSH
53477: LD_INT 1
53479: PPUSH
53480: CALL_OW 287
53484: PUSH
53485: LD_INT 10
53487: MUL
53488: ST_TO_ADDR
// r := rate / 10 ;
53489: LD_ADDR_VAR 0 7
53493: PUSH
53494: LD_VAR 0 2
53498: PUSH
53499: LD_INT 10
53501: DIVREAL
53502: ST_TO_ADDR
// time := 1 1$00 ;
53503: LD_ADDR_VAR 0 8
53507: PUSH
53508: LD_INT 2100
53510: ST_TO_ADDR
// if amount < min then
53511: LD_VAR 0 9
53515: PUSH
53516: LD_VAR 0 3
53520: LESS
53521: IFFALSE 53539
// r := r * 2 else
53523: LD_ADDR_VAR 0 7
53527: PUSH
53528: LD_VAR 0 7
53532: PUSH
53533: LD_INT 2
53535: MUL
53536: ST_TO_ADDR
53537: GO 53565
// if amount > max then
53539: LD_VAR 0 9
53543: PUSH
53544: LD_VAR 0 4
53548: GREATER
53549: IFFALSE 53565
// r := r / 2 ;
53551: LD_ADDR_VAR 0 7
53555: PUSH
53556: LD_VAR 0 7
53560: PUSH
53561: LD_INT 2
53563: DIVREAL
53564: ST_TO_ADDR
// time := time / r ;
53565: LD_ADDR_VAR 0 8
53569: PUSH
53570: LD_VAR 0 8
53574: PUSH
53575: LD_VAR 0 7
53579: DIVREAL
53580: ST_TO_ADDR
// if time < 0 then
53581: LD_VAR 0 8
53585: PUSH
53586: LD_INT 0
53588: LESS
53589: IFFALSE 53606
// time := time * - 1 ;
53591: LD_ADDR_VAR 0 8
53595: PUSH
53596: LD_VAR 0 8
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: MUL
53605: ST_TO_ADDR
// wait ( time ) ;
53606: LD_VAR 0 8
53610: PPUSH
53611: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53615: LD_INT 35
53617: PPUSH
53618: LD_INT 875
53620: PPUSH
53621: CALL_OW 12
53625: PPUSH
53626: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53630: LD_INT 1
53632: PPUSH
53633: LD_INT 5
53635: PPUSH
53636: CALL_OW 12
53640: PPUSH
53641: LD_VAR 0 1
53645: PPUSH
53646: LD_INT 1
53648: PPUSH
53649: CALL_OW 55
// end ;
53653: GO 53463
// end ;
53655: LD_VAR 0 5
53659: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53660: LD_INT 0
53662: PPUSH
53663: PPUSH
53664: PPUSH
53665: PPUSH
53666: PPUSH
53667: PPUSH
53668: PPUSH
53669: PPUSH
// if not turrets or not factories then
53670: LD_VAR 0 1
53674: NOT
53675: PUSH
53676: LD_VAR 0 2
53680: NOT
53681: OR
53682: IFFALSE 53686
// exit ;
53684: GO 53993
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53686: LD_ADDR_VAR 0 10
53690: PUSH
53691: LD_INT 5
53693: PUSH
53694: LD_INT 6
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 4
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 24
53728: PUSH
53729: LD_INT 25
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 23
53738: PUSH
53739: LD_INT 27
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 42
53752: PUSH
53753: LD_INT 43
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 44
53762: PUSH
53763: LD_INT 46
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 45
53772: PUSH
53773: LD_INT 47
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: LIST
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: ST_TO_ADDR
// result := [ ] ;
53790: LD_ADDR_VAR 0 3
53794: PUSH
53795: EMPTY
53796: ST_TO_ADDR
// for i in turrets do
53797: LD_ADDR_VAR 0 4
53801: PUSH
53802: LD_VAR 0 1
53806: PUSH
53807: FOR_IN
53808: IFFALSE 53991
// begin nat := GetNation ( i ) ;
53810: LD_ADDR_VAR 0 7
53814: PUSH
53815: LD_VAR 0 4
53819: PPUSH
53820: CALL_OW 248
53824: ST_TO_ADDR
// weapon := 0 ;
53825: LD_ADDR_VAR 0 8
53829: PUSH
53830: LD_INT 0
53832: ST_TO_ADDR
// if not nat then
53833: LD_VAR 0 7
53837: NOT
53838: IFFALSE 53842
// continue ;
53840: GO 53807
// for j in list [ nat ] do
53842: LD_ADDR_VAR 0 5
53846: PUSH
53847: LD_VAR 0 10
53851: PUSH
53852: LD_VAR 0 7
53856: ARRAY
53857: PUSH
53858: FOR_IN
53859: IFFALSE 53900
// if GetBWeapon ( i ) = j [ 1 ] then
53861: LD_VAR 0 4
53865: PPUSH
53866: CALL_OW 269
53870: PUSH
53871: LD_VAR 0 5
53875: PUSH
53876: LD_INT 1
53878: ARRAY
53879: EQUAL
53880: IFFALSE 53898
// begin weapon := j [ 2 ] ;
53882: LD_ADDR_VAR 0 8
53886: PUSH
53887: LD_VAR 0 5
53891: PUSH
53892: LD_INT 2
53894: ARRAY
53895: ST_TO_ADDR
// break ;
53896: GO 53900
// end ;
53898: GO 53858
53900: POP
53901: POP
// if not weapon then
53902: LD_VAR 0 8
53906: NOT
53907: IFFALSE 53911
// continue ;
53909: GO 53807
// for k in factories do
53911: LD_ADDR_VAR 0 6
53915: PUSH
53916: LD_VAR 0 2
53920: PUSH
53921: FOR_IN
53922: IFFALSE 53987
// begin weapons := AvailableWeaponList ( k ) ;
53924: LD_ADDR_VAR 0 9
53928: PUSH
53929: LD_VAR 0 6
53933: PPUSH
53934: CALL_OW 478
53938: ST_TO_ADDR
// if not weapons then
53939: LD_VAR 0 9
53943: NOT
53944: IFFALSE 53948
// continue ;
53946: GO 53921
// if weapon in weapons then
53948: LD_VAR 0 8
53952: PUSH
53953: LD_VAR 0 9
53957: IN
53958: IFFALSE 53985
// begin result := [ i , weapon ] ;
53960: LD_ADDR_VAR 0 3
53964: PUSH
53965: LD_VAR 0 4
53969: PUSH
53970: LD_VAR 0 8
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: ST_TO_ADDR
// exit ;
53979: POP
53980: POP
53981: POP
53982: POP
53983: GO 53993
// end ; end ;
53985: GO 53921
53987: POP
53988: POP
// end ;
53989: GO 53807
53991: POP
53992: POP
// end ;
53993: LD_VAR 0 3
53997: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53998: LD_INT 0
54000: PPUSH
// if not side or side > 8 then
54001: LD_VAR 0 3
54005: NOT
54006: PUSH
54007: LD_VAR 0 3
54011: PUSH
54012: LD_INT 8
54014: GREATER
54015: OR
54016: IFFALSE 54020
// exit ;
54018: GO 54079
// if not range then
54020: LD_VAR 0 4
54024: NOT
54025: IFFALSE 54036
// range := - 12 ;
54027: LD_ADDR_VAR 0 4
54031: PUSH
54032: LD_INT 12
54034: NEG
54035: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54036: LD_VAR 0 1
54040: PPUSH
54041: LD_VAR 0 2
54045: PPUSH
54046: LD_VAR 0 3
54050: PPUSH
54051: LD_VAR 0 4
54055: PPUSH
54056: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 2
54069: PPUSH
54070: LD_VAR 0 3
54074: PPUSH
54075: CALL_OW 331
// end ;
54079: LD_VAR 0 5
54083: RET
// export function Video ( mode ) ; begin
54084: LD_INT 0
54086: PPUSH
// ingame_video = mode ;
54087: LD_ADDR_OWVAR 52
54091: PUSH
54092: LD_VAR 0 1
54096: ST_TO_ADDR
// interface_hidden = mode ;
54097: LD_ADDR_OWVAR 54
54101: PUSH
54102: LD_VAR 0 1
54106: ST_TO_ADDR
// end ;
54107: LD_VAR 0 2
54111: RET
// export function Join ( array , element ) ; begin
54112: LD_INT 0
54114: PPUSH
// result := array ^ element ;
54115: LD_ADDR_VAR 0 3
54119: PUSH
54120: LD_VAR 0 1
54124: PUSH
54125: LD_VAR 0 2
54129: ADD
54130: ST_TO_ADDR
// end ;
54131: LD_VAR 0 3
54135: RET
// export function JoinUnion ( array , element ) ; begin
54136: LD_INT 0
54138: PPUSH
// result := array union element ;
54139: LD_ADDR_VAR 0 3
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: LD_VAR 0 2
54153: UNION
54154: ST_TO_ADDR
// end ;
54155: LD_VAR 0 3
54159: RET
// export function GetBehemoths ( side ) ; begin
54160: LD_INT 0
54162: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54163: LD_ADDR_VAR 0 2
54167: PUSH
54168: LD_INT 22
54170: PUSH
54171: LD_VAR 0 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 31
54182: PUSH
54183: LD_INT 25
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PPUSH
54194: CALL_OW 69
54198: ST_TO_ADDR
// end ;
54199: LD_VAR 0 2
54203: RET
// export function Shuffle ( array ) ; var i , index ; begin
54204: LD_INT 0
54206: PPUSH
54207: PPUSH
54208: PPUSH
// result := [ ] ;
54209: LD_ADDR_VAR 0 2
54213: PUSH
54214: EMPTY
54215: ST_TO_ADDR
// if not array then
54216: LD_VAR 0 1
54220: NOT
54221: IFFALSE 54225
// exit ;
54223: GO 54324
// Randomize ;
54225: CALL_OW 10
// for i = array downto 1 do
54229: LD_ADDR_VAR 0 3
54233: PUSH
54234: DOUBLE
54235: LD_VAR 0 1
54239: INC
54240: ST_TO_ADDR
54241: LD_INT 1
54243: PUSH
54244: FOR_DOWNTO
54245: IFFALSE 54322
// begin index := rand ( 1 , array ) ;
54247: LD_ADDR_VAR 0 4
54251: PUSH
54252: LD_INT 1
54254: PPUSH
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 12
54264: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54265: LD_ADDR_VAR 0 2
54269: PUSH
54270: LD_VAR 0 2
54274: PPUSH
54275: LD_VAR 0 2
54279: PUSH
54280: LD_INT 1
54282: PLUS
54283: PPUSH
54284: LD_VAR 0 1
54288: PUSH
54289: LD_VAR 0 4
54293: ARRAY
54294: PPUSH
54295: CALL_OW 2
54299: ST_TO_ADDR
// array := Delete ( array , index ) ;
54300: LD_ADDR_VAR 0 1
54304: PUSH
54305: LD_VAR 0 1
54309: PPUSH
54310: LD_VAR 0 4
54314: PPUSH
54315: CALL_OW 3
54319: ST_TO_ADDR
// end ;
54320: GO 54244
54322: POP
54323: POP
// end ;
54324: LD_VAR 0 2
54328: RET
// export function GetBaseMaterials ( base ) ; begin
54329: LD_INT 0
54331: PPUSH
// result := [ 0 , 0 , 0 ] ;
54332: LD_ADDR_VAR 0 2
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// if not base then
54351: LD_VAR 0 1
54355: NOT
54356: IFFALSE 54360
// exit ;
54358: GO 54409
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54360: LD_ADDR_VAR 0 2
54364: PUSH
54365: LD_VAR 0 1
54369: PPUSH
54370: LD_INT 1
54372: PPUSH
54373: CALL_OW 275
54377: PUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: LD_INT 2
54385: PPUSH
54386: CALL_OW 275
54390: PUSH
54391: LD_VAR 0 1
54395: PPUSH
54396: LD_INT 3
54398: PPUSH
54399: CALL_OW 275
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// end ; end_of_file
54409: LD_VAR 0 2
54413: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
54414: GO 54416
54416: DISABLE
// begin ru_radar := 98 ;
54417: LD_ADDR_EXP 45
54421: PUSH
54422: LD_INT 98
54424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
54425: LD_ADDR_EXP 46
54429: PUSH
54430: LD_INT 89
54432: ST_TO_ADDR
// us_hack := 99 ;
54433: LD_ADDR_EXP 47
54437: PUSH
54438: LD_INT 99
54440: ST_TO_ADDR
// us_artillery := 97 ;
54441: LD_ADDR_EXP 48
54445: PUSH
54446: LD_INT 97
54448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
54449: LD_ADDR_EXP 49
54453: PUSH
54454: LD_INT 91
54456: ST_TO_ADDR
// end ; end_of_file
54457: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
54458: LD_INT 0
54460: PPUSH
54461: PPUSH
// skirmish := false ;
54462: LD_ADDR_EXP 50
54466: PUSH
54467: LD_INT 0
54469: ST_TO_ADDR
// debug_mc := false ;
54470: LD_ADDR_EXP 51
54474: PUSH
54475: LD_INT 0
54477: ST_TO_ADDR
// mc_bases := [ ] ;
54478: LD_ADDR_EXP 52
54482: PUSH
54483: EMPTY
54484: ST_TO_ADDR
// mc_sides := [ ] ;
54485: LD_ADDR_EXP 78
54489: PUSH
54490: EMPTY
54491: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
54492: LD_ADDR_EXP 53
54496: PUSH
54497: EMPTY
54498: ST_TO_ADDR
// mc_building_repairs := [ ] ;
54499: LD_ADDR_EXP 54
54503: PUSH
54504: EMPTY
54505: ST_TO_ADDR
// mc_need_heal := [ ] ;
54506: LD_ADDR_EXP 55
54510: PUSH
54511: EMPTY
54512: ST_TO_ADDR
// mc_healers := [ ] ;
54513: LD_ADDR_EXP 56
54517: PUSH
54518: EMPTY
54519: ST_TO_ADDR
// mc_build_list := [ ] ;
54520: LD_ADDR_EXP 57
54524: PUSH
54525: EMPTY
54526: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
54527: LD_ADDR_EXP 84
54531: PUSH
54532: EMPTY
54533: ST_TO_ADDR
// mc_builders := [ ] ;
54534: LD_ADDR_EXP 58
54538: PUSH
54539: EMPTY
54540: ST_TO_ADDR
// mc_construct_list := [ ] ;
54541: LD_ADDR_EXP 59
54545: PUSH
54546: EMPTY
54547: ST_TO_ADDR
// mc_turret_list := [ ] ;
54548: LD_ADDR_EXP 60
54552: PUSH
54553: EMPTY
54554: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
54555: LD_ADDR_EXP 61
54559: PUSH
54560: EMPTY
54561: ST_TO_ADDR
// mc_miners := [ ] ;
54562: LD_ADDR_EXP 66
54566: PUSH
54567: EMPTY
54568: ST_TO_ADDR
// mc_mines := [ ] ;
54569: LD_ADDR_EXP 65
54573: PUSH
54574: EMPTY
54575: ST_TO_ADDR
// mc_minefields := [ ] ;
54576: LD_ADDR_EXP 67
54580: PUSH
54581: EMPTY
54582: ST_TO_ADDR
// mc_crates := [ ] ;
54583: LD_ADDR_EXP 68
54587: PUSH
54588: EMPTY
54589: ST_TO_ADDR
// mc_crates_collector := [ ] ;
54590: LD_ADDR_EXP 69
54594: PUSH
54595: EMPTY
54596: ST_TO_ADDR
// mc_crates_area := [ ] ;
54597: LD_ADDR_EXP 70
54601: PUSH
54602: EMPTY
54603: ST_TO_ADDR
// mc_vehicles := [ ] ;
54604: LD_ADDR_EXP 71
54608: PUSH
54609: EMPTY
54610: ST_TO_ADDR
// mc_attack := [ ] ;
54611: LD_ADDR_EXP 72
54615: PUSH
54616: EMPTY
54617: ST_TO_ADDR
// mc_produce := [ ] ;
54618: LD_ADDR_EXP 73
54622: PUSH
54623: EMPTY
54624: ST_TO_ADDR
// mc_defender := [ ] ;
54625: LD_ADDR_EXP 74
54629: PUSH
54630: EMPTY
54631: ST_TO_ADDR
// mc_parking := [ ] ;
54632: LD_ADDR_EXP 76
54636: PUSH
54637: EMPTY
54638: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
54639: LD_ADDR_EXP 62
54643: PUSH
54644: EMPTY
54645: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
54646: LD_ADDR_EXP 64
54650: PUSH
54651: EMPTY
54652: ST_TO_ADDR
// mc_scan := [ ] ;
54653: LD_ADDR_EXP 75
54657: PUSH
54658: EMPTY
54659: ST_TO_ADDR
// mc_scan_area := [ ] ;
54660: LD_ADDR_EXP 77
54664: PUSH
54665: EMPTY
54666: ST_TO_ADDR
// mc_tech := [ ] ;
54667: LD_ADDR_EXP 79
54671: PUSH
54672: EMPTY
54673: ST_TO_ADDR
// mc_class := [ ] ;
54674: LD_ADDR_EXP 93
54678: PUSH
54679: EMPTY
54680: ST_TO_ADDR
// mc_class_case_use := [ ] ;
54681: LD_ADDR_EXP 94
54685: PUSH
54686: EMPTY
54687: ST_TO_ADDR
// end ;
54688: LD_VAR 0 1
54692: RET
// export function MC_Kill ( base ) ; begin
54693: LD_INT 0
54695: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
54696: LD_ADDR_EXP 52
54700: PUSH
54701: LD_EXP 52
54705: PPUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: EMPTY
54712: PPUSH
54713: CALL_OW 1
54717: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54718: LD_ADDR_EXP 53
54722: PUSH
54723: LD_EXP 53
54727: PPUSH
54728: LD_VAR 0 1
54732: PPUSH
54733: EMPTY
54734: PPUSH
54735: CALL_OW 1
54739: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54740: LD_ADDR_EXP 54
54744: PUSH
54745: LD_EXP 54
54749: PPUSH
54750: LD_VAR 0 1
54754: PPUSH
54755: EMPTY
54756: PPUSH
54757: CALL_OW 1
54761: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54762: LD_ADDR_EXP 55
54766: PUSH
54767: LD_EXP 55
54771: PPUSH
54772: LD_VAR 0 1
54776: PPUSH
54777: EMPTY
54778: PPUSH
54779: CALL_OW 1
54783: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54784: LD_ADDR_EXP 56
54788: PUSH
54789: LD_EXP 56
54793: PPUSH
54794: LD_VAR 0 1
54798: PPUSH
54799: EMPTY
54800: PPUSH
54801: CALL_OW 1
54805: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54806: LD_ADDR_EXP 57
54810: PUSH
54811: LD_EXP 57
54815: PPUSH
54816: LD_VAR 0 1
54820: PPUSH
54821: EMPTY
54822: PPUSH
54823: CALL_OW 1
54827: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54828: LD_ADDR_EXP 58
54832: PUSH
54833: LD_EXP 58
54837: PPUSH
54838: LD_VAR 0 1
54842: PPUSH
54843: EMPTY
54844: PPUSH
54845: CALL_OW 1
54849: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54850: LD_ADDR_EXP 59
54854: PUSH
54855: LD_EXP 59
54859: PPUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: EMPTY
54866: PPUSH
54867: CALL_OW 1
54871: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54872: LD_ADDR_EXP 60
54876: PUSH
54877: LD_EXP 60
54881: PPUSH
54882: LD_VAR 0 1
54886: PPUSH
54887: EMPTY
54888: PPUSH
54889: CALL_OW 1
54893: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54894: LD_ADDR_EXP 61
54898: PUSH
54899: LD_EXP 61
54903: PPUSH
54904: LD_VAR 0 1
54908: PPUSH
54909: EMPTY
54910: PPUSH
54911: CALL_OW 1
54915: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54916: LD_ADDR_EXP 62
54920: PUSH
54921: LD_EXP 62
54925: PPUSH
54926: LD_VAR 0 1
54930: PPUSH
54931: EMPTY
54932: PPUSH
54933: CALL_OW 1
54937: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54938: LD_ADDR_EXP 63
54942: PUSH
54943: LD_EXP 63
54947: PPUSH
54948: LD_VAR 0 1
54952: PPUSH
54953: LD_INT 0
54955: PPUSH
54956: CALL_OW 1
54960: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54961: LD_ADDR_EXP 64
54965: PUSH
54966: LD_EXP 64
54970: PPUSH
54971: LD_VAR 0 1
54975: PPUSH
54976: EMPTY
54977: PPUSH
54978: CALL_OW 1
54982: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54983: LD_ADDR_EXP 65
54987: PUSH
54988: LD_EXP 65
54992: PPUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: EMPTY
54999: PPUSH
55000: CALL_OW 1
55004: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55005: LD_ADDR_EXP 66
55009: PUSH
55010: LD_EXP 66
55014: PPUSH
55015: LD_VAR 0 1
55019: PPUSH
55020: EMPTY
55021: PPUSH
55022: CALL_OW 1
55026: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55027: LD_ADDR_EXP 67
55031: PUSH
55032: LD_EXP 67
55036: PPUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: EMPTY
55043: PPUSH
55044: CALL_OW 1
55048: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55049: LD_ADDR_EXP 68
55053: PUSH
55054: LD_EXP 68
55058: PPUSH
55059: LD_VAR 0 1
55063: PPUSH
55064: EMPTY
55065: PPUSH
55066: CALL_OW 1
55070: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55071: LD_ADDR_EXP 69
55075: PUSH
55076: LD_EXP 69
55080: PPUSH
55081: LD_VAR 0 1
55085: PPUSH
55086: EMPTY
55087: PPUSH
55088: CALL_OW 1
55092: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
55093: LD_ADDR_EXP 70
55097: PUSH
55098: LD_EXP 70
55102: PPUSH
55103: LD_VAR 0 1
55107: PPUSH
55108: EMPTY
55109: PPUSH
55110: CALL_OW 1
55114: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
55115: LD_ADDR_EXP 71
55119: PUSH
55120: LD_EXP 71
55124: PPUSH
55125: LD_VAR 0 1
55129: PPUSH
55130: EMPTY
55131: PPUSH
55132: CALL_OW 1
55136: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
55137: LD_ADDR_EXP 72
55141: PUSH
55142: LD_EXP 72
55146: PPUSH
55147: LD_VAR 0 1
55151: PPUSH
55152: EMPTY
55153: PPUSH
55154: CALL_OW 1
55158: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
55159: LD_ADDR_EXP 73
55163: PUSH
55164: LD_EXP 73
55168: PPUSH
55169: LD_VAR 0 1
55173: PPUSH
55174: EMPTY
55175: PPUSH
55176: CALL_OW 1
55180: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55181: LD_ADDR_EXP 74
55185: PUSH
55186: LD_EXP 74
55190: PPUSH
55191: LD_VAR 0 1
55195: PPUSH
55196: EMPTY
55197: PPUSH
55198: CALL_OW 1
55202: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55203: LD_ADDR_EXP 75
55207: PUSH
55208: LD_EXP 75
55212: PPUSH
55213: LD_VAR 0 1
55217: PPUSH
55218: EMPTY
55219: PPUSH
55220: CALL_OW 1
55224: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55225: LD_ADDR_EXP 76
55229: PUSH
55230: LD_EXP 76
55234: PPUSH
55235: LD_VAR 0 1
55239: PPUSH
55240: EMPTY
55241: PPUSH
55242: CALL_OW 1
55246: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55247: LD_ADDR_EXP 77
55251: PUSH
55252: LD_EXP 77
55256: PPUSH
55257: LD_VAR 0 1
55261: PPUSH
55262: EMPTY
55263: PPUSH
55264: CALL_OW 1
55268: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55269: LD_ADDR_EXP 79
55273: PUSH
55274: LD_EXP 79
55278: PPUSH
55279: LD_VAR 0 1
55283: PPUSH
55284: EMPTY
55285: PPUSH
55286: CALL_OW 1
55290: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55291: LD_ADDR_EXP 81
55295: PUSH
55296: LD_EXP 81
55300: PPUSH
55301: LD_VAR 0 1
55305: PPUSH
55306: EMPTY
55307: PPUSH
55308: CALL_OW 1
55312: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55313: LD_ADDR_EXP 82
55317: PUSH
55318: LD_EXP 82
55322: PPUSH
55323: LD_VAR 0 1
55327: PPUSH
55328: EMPTY
55329: PPUSH
55330: CALL_OW 1
55334: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55335: LD_ADDR_EXP 83
55339: PUSH
55340: LD_EXP 83
55344: PPUSH
55345: LD_VAR 0 1
55349: PPUSH
55350: EMPTY
55351: PPUSH
55352: CALL_OW 1
55356: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55357: LD_ADDR_EXP 84
55361: PUSH
55362: LD_EXP 84
55366: PPUSH
55367: LD_VAR 0 1
55371: PPUSH
55372: EMPTY
55373: PPUSH
55374: CALL_OW 1
55378: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55379: LD_ADDR_EXP 85
55383: PUSH
55384: LD_EXP 85
55388: PPUSH
55389: LD_VAR 0 1
55393: PPUSH
55394: EMPTY
55395: PPUSH
55396: CALL_OW 1
55400: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55401: LD_ADDR_EXP 86
55405: PUSH
55406: LD_EXP 86
55410: PPUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: EMPTY
55417: PPUSH
55418: CALL_OW 1
55422: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55423: LD_ADDR_EXP 87
55427: PUSH
55428: LD_EXP 87
55432: PPUSH
55433: LD_VAR 0 1
55437: PPUSH
55438: EMPTY
55439: PPUSH
55440: CALL_OW 1
55444: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55445: LD_ADDR_EXP 88
55449: PUSH
55450: LD_EXP 88
55454: PPUSH
55455: LD_VAR 0 1
55459: PPUSH
55460: EMPTY
55461: PPUSH
55462: CALL_OW 1
55466: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55467: LD_ADDR_EXP 89
55471: PUSH
55472: LD_EXP 89
55476: PPUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: EMPTY
55483: PPUSH
55484: CALL_OW 1
55488: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55489: LD_ADDR_EXP 90
55493: PUSH
55494: LD_EXP 90
55498: PPUSH
55499: LD_VAR 0 1
55503: PPUSH
55504: EMPTY
55505: PPUSH
55506: CALL_OW 1
55510: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55511: LD_ADDR_EXP 91
55515: PUSH
55516: LD_EXP 91
55520: PPUSH
55521: LD_VAR 0 1
55525: PPUSH
55526: EMPTY
55527: PPUSH
55528: CALL_OW 1
55532: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55533: LD_ADDR_EXP 92
55537: PUSH
55538: LD_EXP 92
55542: PPUSH
55543: LD_VAR 0 1
55547: PPUSH
55548: EMPTY
55549: PPUSH
55550: CALL_OW 1
55554: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55555: LD_ADDR_EXP 93
55559: PUSH
55560: LD_EXP 93
55564: PPUSH
55565: LD_VAR 0 1
55569: PPUSH
55570: EMPTY
55571: PPUSH
55572: CALL_OW 1
55576: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55577: LD_ADDR_EXP 94
55581: PUSH
55582: LD_EXP 94
55586: PPUSH
55587: LD_VAR 0 1
55591: PPUSH
55592: LD_INT 0
55594: PPUSH
55595: CALL_OW 1
55599: ST_TO_ADDR
// end ;
55600: LD_VAR 0 2
55604: RET
// export function MC_Add ( side , units ) ; var base ; begin
55605: LD_INT 0
55607: PPUSH
55608: PPUSH
// base := mc_bases + 1 ;
55609: LD_ADDR_VAR 0 4
55613: PUSH
55614: LD_EXP 52
55618: PUSH
55619: LD_INT 1
55621: PLUS
55622: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
55623: LD_ADDR_EXP 78
55627: PUSH
55628: LD_EXP 78
55632: PPUSH
55633: LD_VAR 0 4
55637: PPUSH
55638: LD_VAR 0 1
55642: PPUSH
55643: CALL_OW 1
55647: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
55648: LD_ADDR_EXP 52
55652: PUSH
55653: LD_EXP 52
55657: PPUSH
55658: LD_VAR 0 4
55662: PPUSH
55663: LD_VAR 0 2
55667: PPUSH
55668: CALL_OW 1
55672: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55673: LD_ADDR_EXP 53
55677: PUSH
55678: LD_EXP 53
55682: PPUSH
55683: LD_VAR 0 4
55687: PPUSH
55688: EMPTY
55689: PPUSH
55690: CALL_OW 1
55694: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55695: LD_ADDR_EXP 54
55699: PUSH
55700: LD_EXP 54
55704: PPUSH
55705: LD_VAR 0 4
55709: PPUSH
55710: EMPTY
55711: PPUSH
55712: CALL_OW 1
55716: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55717: LD_ADDR_EXP 55
55721: PUSH
55722: LD_EXP 55
55726: PPUSH
55727: LD_VAR 0 4
55731: PPUSH
55732: EMPTY
55733: PPUSH
55734: CALL_OW 1
55738: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55739: LD_ADDR_EXP 56
55743: PUSH
55744: LD_EXP 56
55748: PPUSH
55749: LD_VAR 0 4
55753: PPUSH
55754: EMPTY
55755: PPUSH
55756: CALL_OW 1
55760: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55761: LD_ADDR_EXP 57
55765: PUSH
55766: LD_EXP 57
55770: PPUSH
55771: LD_VAR 0 4
55775: PPUSH
55776: EMPTY
55777: PPUSH
55778: CALL_OW 1
55782: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
55783: LD_ADDR_EXP 58
55787: PUSH
55788: LD_EXP 58
55792: PPUSH
55793: LD_VAR 0 4
55797: PPUSH
55798: EMPTY
55799: PPUSH
55800: CALL_OW 1
55804: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
55805: LD_ADDR_EXP 59
55809: PUSH
55810: LD_EXP 59
55814: PPUSH
55815: LD_VAR 0 4
55819: PPUSH
55820: EMPTY
55821: PPUSH
55822: CALL_OW 1
55826: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
55827: LD_ADDR_EXP 60
55831: PUSH
55832: LD_EXP 60
55836: PPUSH
55837: LD_VAR 0 4
55841: PPUSH
55842: EMPTY
55843: PPUSH
55844: CALL_OW 1
55848: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
55849: LD_ADDR_EXP 61
55853: PUSH
55854: LD_EXP 61
55858: PPUSH
55859: LD_VAR 0 4
55863: PPUSH
55864: EMPTY
55865: PPUSH
55866: CALL_OW 1
55870: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
55871: LD_ADDR_EXP 62
55875: PUSH
55876: LD_EXP 62
55880: PPUSH
55881: LD_VAR 0 4
55885: PPUSH
55886: EMPTY
55887: PPUSH
55888: CALL_OW 1
55892: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
55893: LD_ADDR_EXP 63
55897: PUSH
55898: LD_EXP 63
55902: PPUSH
55903: LD_VAR 0 4
55907: PPUSH
55908: LD_INT 0
55910: PPUSH
55911: CALL_OW 1
55915: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
55916: LD_ADDR_EXP 64
55920: PUSH
55921: LD_EXP 64
55925: PPUSH
55926: LD_VAR 0 4
55930: PPUSH
55931: EMPTY
55932: PPUSH
55933: CALL_OW 1
55937: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
55938: LD_ADDR_EXP 65
55942: PUSH
55943: LD_EXP 65
55947: PPUSH
55948: LD_VAR 0 4
55952: PPUSH
55953: EMPTY
55954: PPUSH
55955: CALL_OW 1
55959: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55960: LD_ADDR_EXP 66
55964: PUSH
55965: LD_EXP 66
55969: PPUSH
55970: LD_VAR 0 4
55974: PPUSH
55975: EMPTY
55976: PPUSH
55977: CALL_OW 1
55981: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55982: LD_ADDR_EXP 67
55986: PUSH
55987: LD_EXP 67
55991: PPUSH
55992: LD_VAR 0 4
55996: PPUSH
55997: EMPTY
55998: PPUSH
55999: CALL_OW 1
56003: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56004: LD_ADDR_EXP 68
56008: PUSH
56009: LD_EXP 68
56013: PPUSH
56014: LD_VAR 0 4
56018: PPUSH
56019: EMPTY
56020: PPUSH
56021: CALL_OW 1
56025: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56026: LD_ADDR_EXP 69
56030: PUSH
56031: LD_EXP 69
56035: PPUSH
56036: LD_VAR 0 4
56040: PPUSH
56041: EMPTY
56042: PPUSH
56043: CALL_OW 1
56047: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56048: LD_ADDR_EXP 70
56052: PUSH
56053: LD_EXP 70
56057: PPUSH
56058: LD_VAR 0 4
56062: PPUSH
56063: EMPTY
56064: PPUSH
56065: CALL_OW 1
56069: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56070: LD_ADDR_EXP 71
56074: PUSH
56075: LD_EXP 71
56079: PPUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: EMPTY
56086: PPUSH
56087: CALL_OW 1
56091: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56092: LD_ADDR_EXP 72
56096: PUSH
56097: LD_EXP 72
56101: PPUSH
56102: LD_VAR 0 4
56106: PPUSH
56107: EMPTY
56108: PPUSH
56109: CALL_OW 1
56113: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56114: LD_ADDR_EXP 73
56118: PUSH
56119: LD_EXP 73
56123: PPUSH
56124: LD_VAR 0 4
56128: PPUSH
56129: EMPTY
56130: PPUSH
56131: CALL_OW 1
56135: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56136: LD_ADDR_EXP 74
56140: PUSH
56141: LD_EXP 74
56145: PPUSH
56146: LD_VAR 0 4
56150: PPUSH
56151: EMPTY
56152: PPUSH
56153: CALL_OW 1
56157: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56158: LD_ADDR_EXP 75
56162: PUSH
56163: LD_EXP 75
56167: PPUSH
56168: LD_VAR 0 4
56172: PPUSH
56173: EMPTY
56174: PPUSH
56175: CALL_OW 1
56179: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56180: LD_ADDR_EXP 76
56184: PUSH
56185: LD_EXP 76
56189: PPUSH
56190: LD_VAR 0 4
56194: PPUSH
56195: EMPTY
56196: PPUSH
56197: CALL_OW 1
56201: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56202: LD_ADDR_EXP 77
56206: PUSH
56207: LD_EXP 77
56211: PPUSH
56212: LD_VAR 0 4
56216: PPUSH
56217: EMPTY
56218: PPUSH
56219: CALL_OW 1
56223: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56224: LD_ADDR_EXP 79
56228: PUSH
56229: LD_EXP 79
56233: PPUSH
56234: LD_VAR 0 4
56238: PPUSH
56239: EMPTY
56240: PPUSH
56241: CALL_OW 1
56245: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56246: LD_ADDR_EXP 81
56250: PUSH
56251: LD_EXP 81
56255: PPUSH
56256: LD_VAR 0 4
56260: PPUSH
56261: EMPTY
56262: PPUSH
56263: CALL_OW 1
56267: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56268: LD_ADDR_EXP 82
56272: PUSH
56273: LD_EXP 82
56277: PPUSH
56278: LD_VAR 0 4
56282: PPUSH
56283: EMPTY
56284: PPUSH
56285: CALL_OW 1
56289: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56290: LD_ADDR_EXP 83
56294: PUSH
56295: LD_EXP 83
56299: PPUSH
56300: LD_VAR 0 4
56304: PPUSH
56305: EMPTY
56306: PPUSH
56307: CALL_OW 1
56311: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56312: LD_ADDR_EXP 84
56316: PUSH
56317: LD_EXP 84
56321: PPUSH
56322: LD_VAR 0 4
56326: PPUSH
56327: EMPTY
56328: PPUSH
56329: CALL_OW 1
56333: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56334: LD_ADDR_EXP 85
56338: PUSH
56339: LD_EXP 85
56343: PPUSH
56344: LD_VAR 0 4
56348: PPUSH
56349: EMPTY
56350: PPUSH
56351: CALL_OW 1
56355: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56356: LD_ADDR_EXP 86
56360: PUSH
56361: LD_EXP 86
56365: PPUSH
56366: LD_VAR 0 4
56370: PPUSH
56371: EMPTY
56372: PPUSH
56373: CALL_OW 1
56377: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56378: LD_ADDR_EXP 87
56382: PUSH
56383: LD_EXP 87
56387: PPUSH
56388: LD_VAR 0 4
56392: PPUSH
56393: EMPTY
56394: PPUSH
56395: CALL_OW 1
56399: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56400: LD_ADDR_EXP 88
56404: PUSH
56405: LD_EXP 88
56409: PPUSH
56410: LD_VAR 0 4
56414: PPUSH
56415: EMPTY
56416: PPUSH
56417: CALL_OW 1
56421: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56422: LD_ADDR_EXP 89
56426: PUSH
56427: LD_EXP 89
56431: PPUSH
56432: LD_VAR 0 4
56436: PPUSH
56437: EMPTY
56438: PPUSH
56439: CALL_OW 1
56443: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56444: LD_ADDR_EXP 90
56448: PUSH
56449: LD_EXP 90
56453: PPUSH
56454: LD_VAR 0 4
56458: PPUSH
56459: EMPTY
56460: PPUSH
56461: CALL_OW 1
56465: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56466: LD_ADDR_EXP 91
56470: PUSH
56471: LD_EXP 91
56475: PPUSH
56476: LD_VAR 0 4
56480: PPUSH
56481: EMPTY
56482: PPUSH
56483: CALL_OW 1
56487: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56488: LD_ADDR_EXP 92
56492: PUSH
56493: LD_EXP 92
56497: PPUSH
56498: LD_VAR 0 4
56502: PPUSH
56503: EMPTY
56504: PPUSH
56505: CALL_OW 1
56509: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56510: LD_ADDR_EXP 93
56514: PUSH
56515: LD_EXP 93
56519: PPUSH
56520: LD_VAR 0 4
56524: PPUSH
56525: EMPTY
56526: PPUSH
56527: CALL_OW 1
56531: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56532: LD_ADDR_EXP 94
56536: PUSH
56537: LD_EXP 94
56541: PPUSH
56542: LD_VAR 0 4
56546: PPUSH
56547: LD_INT 0
56549: PPUSH
56550: CALL_OW 1
56554: ST_TO_ADDR
// result := base ;
56555: LD_ADDR_VAR 0 3
56559: PUSH
56560: LD_VAR 0 4
56564: ST_TO_ADDR
// end ;
56565: LD_VAR 0 3
56569: RET
// export function MC_Start ( ) ; var i ; begin
56570: LD_INT 0
56572: PPUSH
56573: PPUSH
// for i = 1 to mc_bases do
56574: LD_ADDR_VAR 0 2
56578: PUSH
56579: DOUBLE
56580: LD_INT 1
56582: DEC
56583: ST_TO_ADDR
56584: LD_EXP 52
56588: PUSH
56589: FOR_TO
56590: IFFALSE 57667
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
56592: LD_ADDR_EXP 52
56596: PUSH
56597: LD_EXP 52
56601: PPUSH
56602: LD_VAR 0 2
56606: PPUSH
56607: LD_EXP 52
56611: PUSH
56612: LD_VAR 0 2
56616: ARRAY
56617: PUSH
56618: LD_INT 0
56620: DIFF
56621: PPUSH
56622: CALL_OW 1
56626: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
56627: LD_ADDR_EXP 53
56631: PUSH
56632: LD_EXP 53
56636: PPUSH
56637: LD_VAR 0 2
56641: PPUSH
56642: EMPTY
56643: PPUSH
56644: CALL_OW 1
56648: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56649: LD_ADDR_EXP 54
56653: PUSH
56654: LD_EXP 54
56658: PPUSH
56659: LD_VAR 0 2
56663: PPUSH
56664: EMPTY
56665: PPUSH
56666: CALL_OW 1
56670: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
56671: LD_ADDR_EXP 55
56675: PUSH
56676: LD_EXP 55
56680: PPUSH
56681: LD_VAR 0 2
56685: PPUSH
56686: EMPTY
56687: PPUSH
56688: CALL_OW 1
56692: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
56693: LD_ADDR_EXP 56
56697: PUSH
56698: LD_EXP 56
56702: PPUSH
56703: LD_VAR 0 2
56707: PPUSH
56708: EMPTY
56709: PUSH
56710: EMPTY
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PPUSH
56716: CALL_OW 1
56720: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
56721: LD_ADDR_EXP 57
56725: PUSH
56726: LD_EXP 57
56730: PPUSH
56731: LD_VAR 0 2
56735: PPUSH
56736: EMPTY
56737: PPUSH
56738: CALL_OW 1
56742: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
56743: LD_ADDR_EXP 84
56747: PUSH
56748: LD_EXP 84
56752: PPUSH
56753: LD_VAR 0 2
56757: PPUSH
56758: EMPTY
56759: PPUSH
56760: CALL_OW 1
56764: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
56765: LD_ADDR_EXP 58
56769: PUSH
56770: LD_EXP 58
56774: PPUSH
56775: LD_VAR 0 2
56779: PPUSH
56780: EMPTY
56781: PPUSH
56782: CALL_OW 1
56786: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
56787: LD_ADDR_EXP 59
56791: PUSH
56792: LD_EXP 59
56796: PPUSH
56797: LD_VAR 0 2
56801: PPUSH
56802: EMPTY
56803: PPUSH
56804: CALL_OW 1
56808: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
56809: LD_ADDR_EXP 60
56813: PUSH
56814: LD_EXP 60
56818: PPUSH
56819: LD_VAR 0 2
56823: PPUSH
56824: LD_EXP 52
56828: PUSH
56829: LD_VAR 0 2
56833: ARRAY
56834: PPUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 30
56840: PUSH
56841: LD_INT 32
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 30
56850: PUSH
56851: LD_INT 33
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: PPUSH
56863: CALL_OW 72
56867: PPUSH
56868: CALL_OW 1
56872: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
56873: LD_ADDR_EXP 61
56877: PUSH
56878: LD_EXP 61
56882: PPUSH
56883: LD_VAR 0 2
56887: PPUSH
56888: LD_EXP 52
56892: PUSH
56893: LD_VAR 0 2
56897: ARRAY
56898: PPUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 30
56904: PUSH
56905: LD_INT 32
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 30
56914: PUSH
56915: LD_INT 31
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 58
56929: PUSH
56930: EMPTY
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PPUSH
56937: CALL_OW 72
56941: PPUSH
56942: CALL_OW 1
56946: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
56947: LD_ADDR_EXP 62
56951: PUSH
56952: LD_EXP 62
56956: PPUSH
56957: LD_VAR 0 2
56961: PPUSH
56962: EMPTY
56963: PPUSH
56964: CALL_OW 1
56968: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
56969: LD_ADDR_EXP 66
56973: PUSH
56974: LD_EXP 66
56978: PPUSH
56979: LD_VAR 0 2
56983: PPUSH
56984: EMPTY
56985: PPUSH
56986: CALL_OW 1
56990: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
56991: LD_ADDR_EXP 65
56995: PUSH
56996: LD_EXP 65
57000: PPUSH
57001: LD_VAR 0 2
57005: PPUSH
57006: EMPTY
57007: PPUSH
57008: CALL_OW 1
57012: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
57013: LD_ADDR_EXP 67
57017: PUSH
57018: LD_EXP 67
57022: PPUSH
57023: LD_VAR 0 2
57027: PPUSH
57028: EMPTY
57029: PPUSH
57030: CALL_OW 1
57034: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
57035: LD_ADDR_EXP 68
57039: PUSH
57040: LD_EXP 68
57044: PPUSH
57045: LD_VAR 0 2
57049: PPUSH
57050: EMPTY
57051: PPUSH
57052: CALL_OW 1
57056: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
57057: LD_ADDR_EXP 69
57061: PUSH
57062: LD_EXP 69
57066: PPUSH
57067: LD_VAR 0 2
57071: PPUSH
57072: EMPTY
57073: PPUSH
57074: CALL_OW 1
57078: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
57079: LD_ADDR_EXP 70
57083: PUSH
57084: LD_EXP 70
57088: PPUSH
57089: LD_VAR 0 2
57093: PPUSH
57094: EMPTY
57095: PPUSH
57096: CALL_OW 1
57100: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
57101: LD_ADDR_EXP 71
57105: PUSH
57106: LD_EXP 71
57110: PPUSH
57111: LD_VAR 0 2
57115: PPUSH
57116: EMPTY
57117: PPUSH
57118: CALL_OW 1
57122: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
57123: LD_ADDR_EXP 72
57127: PUSH
57128: LD_EXP 72
57132: PPUSH
57133: LD_VAR 0 2
57137: PPUSH
57138: EMPTY
57139: PPUSH
57140: CALL_OW 1
57144: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
57145: LD_ADDR_EXP 73
57149: PUSH
57150: LD_EXP 73
57154: PPUSH
57155: LD_VAR 0 2
57159: PPUSH
57160: EMPTY
57161: PPUSH
57162: CALL_OW 1
57166: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
57167: LD_ADDR_EXP 74
57171: PUSH
57172: LD_EXP 74
57176: PPUSH
57177: LD_VAR 0 2
57181: PPUSH
57182: EMPTY
57183: PPUSH
57184: CALL_OW 1
57188: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
57189: LD_ADDR_EXP 63
57193: PUSH
57194: LD_EXP 63
57198: PPUSH
57199: LD_VAR 0 2
57203: PPUSH
57204: LD_INT 0
57206: PPUSH
57207: CALL_OW 1
57211: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
57212: LD_ADDR_EXP 76
57216: PUSH
57217: LD_EXP 76
57221: PPUSH
57222: LD_VAR 0 2
57226: PPUSH
57227: LD_INT 0
57229: PPUSH
57230: CALL_OW 1
57234: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
57235: LD_ADDR_EXP 64
57239: PUSH
57240: LD_EXP 64
57244: PPUSH
57245: LD_VAR 0 2
57249: PPUSH
57250: EMPTY
57251: PPUSH
57252: CALL_OW 1
57256: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
57257: LD_ADDR_EXP 75
57261: PUSH
57262: LD_EXP 75
57266: PPUSH
57267: LD_VAR 0 2
57271: PPUSH
57272: LD_INT 0
57274: PPUSH
57275: CALL_OW 1
57279: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
57280: LD_ADDR_EXP 77
57284: PUSH
57285: LD_EXP 77
57289: PPUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: EMPTY
57296: PPUSH
57297: CALL_OW 1
57301: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
57302: LD_ADDR_EXP 80
57306: PUSH
57307: LD_EXP 80
57311: PPUSH
57312: LD_VAR 0 2
57316: PPUSH
57317: LD_INT 0
57319: PPUSH
57320: CALL_OW 1
57324: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
57325: LD_ADDR_EXP 81
57329: PUSH
57330: LD_EXP 81
57334: PPUSH
57335: LD_VAR 0 2
57339: PPUSH
57340: EMPTY
57341: PPUSH
57342: CALL_OW 1
57346: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57347: LD_ADDR_EXP 82
57351: PUSH
57352: LD_EXP 82
57356: PPUSH
57357: LD_VAR 0 2
57361: PPUSH
57362: EMPTY
57363: PPUSH
57364: CALL_OW 1
57368: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57369: LD_ADDR_EXP 83
57373: PUSH
57374: LD_EXP 83
57378: PPUSH
57379: LD_VAR 0 2
57383: PPUSH
57384: EMPTY
57385: PPUSH
57386: CALL_OW 1
57390: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
57391: LD_ADDR_EXP 85
57395: PUSH
57396: LD_EXP 85
57400: PPUSH
57401: LD_VAR 0 2
57405: PPUSH
57406: LD_EXP 52
57410: PUSH
57411: LD_VAR 0 2
57415: ARRAY
57416: PPUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 30
57422: PUSH
57423: LD_INT 6
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 30
57432: PUSH
57433: LD_INT 7
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 30
57442: PUSH
57443: LD_INT 8
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: PPUSH
57456: CALL_OW 72
57460: PPUSH
57461: CALL_OW 1
57465: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
57466: LD_ADDR_EXP 86
57470: PUSH
57471: LD_EXP 86
57475: PPUSH
57476: LD_VAR 0 2
57480: PPUSH
57481: EMPTY
57482: PPUSH
57483: CALL_OW 1
57487: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
57488: LD_ADDR_EXP 87
57492: PUSH
57493: LD_EXP 87
57497: PPUSH
57498: LD_VAR 0 2
57502: PPUSH
57503: EMPTY
57504: PPUSH
57505: CALL_OW 1
57509: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
57510: LD_ADDR_EXP 88
57514: PUSH
57515: LD_EXP 88
57519: PPUSH
57520: LD_VAR 0 2
57524: PPUSH
57525: EMPTY
57526: PPUSH
57527: CALL_OW 1
57531: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
57532: LD_ADDR_EXP 89
57536: PUSH
57537: LD_EXP 89
57541: PPUSH
57542: LD_VAR 0 2
57546: PPUSH
57547: EMPTY
57548: PPUSH
57549: CALL_OW 1
57553: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
57554: LD_ADDR_EXP 90
57558: PUSH
57559: LD_EXP 90
57563: PPUSH
57564: LD_VAR 0 2
57568: PPUSH
57569: EMPTY
57570: PPUSH
57571: CALL_OW 1
57575: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
57576: LD_ADDR_EXP 91
57580: PUSH
57581: LD_EXP 91
57585: PPUSH
57586: LD_VAR 0 2
57590: PPUSH
57591: EMPTY
57592: PPUSH
57593: CALL_OW 1
57597: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
57598: LD_ADDR_EXP 92
57602: PUSH
57603: LD_EXP 92
57607: PPUSH
57608: LD_VAR 0 2
57612: PPUSH
57613: EMPTY
57614: PPUSH
57615: CALL_OW 1
57619: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
57620: LD_ADDR_EXP 93
57624: PUSH
57625: LD_EXP 93
57629: PPUSH
57630: LD_VAR 0 2
57634: PPUSH
57635: EMPTY
57636: PPUSH
57637: CALL_OW 1
57641: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
57642: LD_ADDR_EXP 94
57646: PUSH
57647: LD_EXP 94
57651: PPUSH
57652: LD_VAR 0 2
57656: PPUSH
57657: LD_INT 0
57659: PPUSH
57660: CALL_OW 1
57664: ST_TO_ADDR
// end ;
57665: GO 56589
57667: POP
57668: POP
// MC_InitSides ( ) ;
57669: CALL 57955 0 0
// MC_InitResearch ( ) ;
57673: CALL 57694 0 0
// CustomInitMacro ( ) ;
57677: CALL 5367 0 0
// skirmish := true ;
57681: LD_ADDR_EXP 50
57685: PUSH
57686: LD_INT 1
57688: ST_TO_ADDR
// end ;
57689: LD_VAR 0 1
57693: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
57694: LD_INT 0
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
// if not mc_bases then
57702: LD_EXP 52
57706: NOT
57707: IFFALSE 57711
// exit ;
57709: GO 57950
// for i = 1 to 8 do
57711: LD_ADDR_VAR 0 2
57715: PUSH
57716: DOUBLE
57717: LD_INT 1
57719: DEC
57720: ST_TO_ADDR
57721: LD_INT 8
57723: PUSH
57724: FOR_TO
57725: IFFALSE 57751
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
57727: LD_ADDR_EXP 79
57731: PUSH
57732: LD_EXP 79
57736: PPUSH
57737: LD_VAR 0 2
57741: PPUSH
57742: EMPTY
57743: PPUSH
57744: CALL_OW 1
57748: ST_TO_ADDR
57749: GO 57724
57751: POP
57752: POP
// tmp := [ ] ;
57753: LD_ADDR_VAR 0 5
57757: PUSH
57758: EMPTY
57759: ST_TO_ADDR
// for i = 1 to mc_sides do
57760: LD_ADDR_VAR 0 2
57764: PUSH
57765: DOUBLE
57766: LD_INT 1
57768: DEC
57769: ST_TO_ADDR
57770: LD_EXP 78
57774: PUSH
57775: FOR_TO
57776: IFFALSE 57834
// if not mc_sides [ i ] in tmp then
57778: LD_EXP 78
57782: PUSH
57783: LD_VAR 0 2
57787: ARRAY
57788: PUSH
57789: LD_VAR 0 5
57793: IN
57794: NOT
57795: IFFALSE 57832
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
57797: LD_ADDR_VAR 0 5
57801: PUSH
57802: LD_VAR 0 5
57806: PPUSH
57807: LD_VAR 0 5
57811: PUSH
57812: LD_INT 1
57814: PLUS
57815: PPUSH
57816: LD_EXP 78
57820: PUSH
57821: LD_VAR 0 2
57825: ARRAY
57826: PPUSH
57827: CALL_OW 2
57831: ST_TO_ADDR
57832: GO 57775
57834: POP
57835: POP
// if not tmp then
57836: LD_VAR 0 5
57840: NOT
57841: IFFALSE 57845
// exit ;
57843: GO 57950
// for j in tmp do
57845: LD_ADDR_VAR 0 3
57849: PUSH
57850: LD_VAR 0 5
57854: PUSH
57855: FOR_IN
57856: IFFALSE 57948
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
57858: LD_ADDR_VAR 0 6
57862: PUSH
57863: LD_INT 22
57865: PUSH
57866: LD_VAR 0 3
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PPUSH
57875: CALL_OW 69
57879: ST_TO_ADDR
// if not un then
57880: LD_VAR 0 6
57884: NOT
57885: IFFALSE 57889
// continue ;
57887: GO 57855
// nation := GetNation ( un [ 1 ] ) ;
57889: LD_ADDR_VAR 0 4
57893: PUSH
57894: LD_VAR 0 6
57898: PUSH
57899: LD_INT 1
57901: ARRAY
57902: PPUSH
57903: CALL_OW 248
57907: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
57908: LD_ADDR_EXP 79
57912: PUSH
57913: LD_EXP 79
57917: PPUSH
57918: LD_VAR 0 3
57922: PPUSH
57923: LD_VAR 0 3
57927: PPUSH
57928: LD_VAR 0 4
57932: PPUSH
57933: LD_INT 1
57935: PPUSH
57936: CALL 11245 0 3
57940: PPUSH
57941: CALL_OW 1
57945: ST_TO_ADDR
// end ;
57946: GO 57855
57948: POP
57949: POP
// end ;
57950: LD_VAR 0 1
57954: RET
// export function MC_InitSides ( ) ; var i ; begin
57955: LD_INT 0
57957: PPUSH
57958: PPUSH
// if not mc_bases then
57959: LD_EXP 52
57963: NOT
57964: IFFALSE 57968
// exit ;
57966: GO 58042
// for i = 1 to mc_bases do
57968: LD_ADDR_VAR 0 2
57972: PUSH
57973: DOUBLE
57974: LD_INT 1
57976: DEC
57977: ST_TO_ADDR
57978: LD_EXP 52
57982: PUSH
57983: FOR_TO
57984: IFFALSE 58040
// if mc_bases [ i ] then
57986: LD_EXP 52
57990: PUSH
57991: LD_VAR 0 2
57995: ARRAY
57996: IFFALSE 58038
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57998: LD_ADDR_EXP 78
58002: PUSH
58003: LD_EXP 78
58007: PPUSH
58008: LD_VAR 0 2
58012: PPUSH
58013: LD_EXP 52
58017: PUSH
58018: LD_VAR 0 2
58022: ARRAY
58023: PUSH
58024: LD_INT 1
58026: ARRAY
58027: PPUSH
58028: CALL_OW 255
58032: PPUSH
58033: CALL_OW 1
58037: ST_TO_ADDR
58038: GO 57983
58040: POP
58041: POP
// end ;
58042: LD_VAR 0 1
58046: RET
// every 0 0$01 trigger skirmish do
58047: LD_EXP 50
58051: IFFALSE 58205
58053: GO 58055
58055: DISABLE
// begin enable ;
58056: ENABLE
// MC_CheckBuildings ( ) ;
58057: CALL 62703 0 0
// MC_CheckPeopleLife ( ) ;
58061: CALL 62828 0 0
// RaiseSailEvent ( 100 ) ;
58065: LD_INT 100
58067: PPUSH
58068: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
58072: LD_INT 103
58074: PPUSH
58075: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
58079: LD_INT 104
58081: PPUSH
58082: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
58086: LD_INT 105
58088: PPUSH
58089: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
58093: LD_INT 106
58095: PPUSH
58096: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
58100: LD_INT 107
58102: PPUSH
58103: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
58107: LD_INT 108
58109: PPUSH
58110: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
58114: LD_INT 109
58116: PPUSH
58117: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
58121: LD_INT 110
58123: PPUSH
58124: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
58128: LD_INT 111
58130: PPUSH
58131: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
58135: LD_INT 112
58137: PPUSH
58138: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
58142: LD_INT 113
58144: PPUSH
58145: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
58149: LD_INT 120
58151: PPUSH
58152: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
58156: LD_INT 121
58158: PPUSH
58159: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
58163: LD_INT 122
58165: PPUSH
58166: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
58170: LD_INT 123
58172: PPUSH
58173: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
58177: LD_INT 124
58179: PPUSH
58180: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
58184: LD_INT 125
58186: PPUSH
58187: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
58191: LD_INT 126
58193: PPUSH
58194: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
58198: LD_INT 200
58200: PPUSH
58201: CALL_OW 427
// end ;
58205: END
// on SailEvent ( event ) do begin if event < 100 then
58206: LD_VAR 0 1
58210: PUSH
58211: LD_INT 100
58213: LESS
58214: IFFALSE 58225
// CustomEvent ( event ) ;
58216: LD_VAR 0 1
58220: PPUSH
58221: CALL 5359 0 1
// if event = 100 then
58225: LD_VAR 0 1
58229: PUSH
58230: LD_INT 100
58232: EQUAL
58233: IFFALSE 58239
// MC_ClassManager ( ) ;
58235: CALL 58631 0 0
// if event = 101 then
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 101
58246: EQUAL
58247: IFFALSE 58253
// MC_RepairBuildings ( ) ;
58249: CALL 63424 0 0
// if event = 102 then
58253: LD_VAR 0 1
58257: PUSH
58258: LD_INT 102
58260: EQUAL
58261: IFFALSE 58267
// MC_Heal ( ) ;
58263: CALL 64288 0 0
// if event = 103 then
58267: LD_VAR 0 1
58271: PUSH
58272: LD_INT 103
58274: EQUAL
58275: IFFALSE 58281
// MC_Build ( ) ;
58277: CALL 64710 0 0
// if event = 104 then
58281: LD_VAR 0 1
58285: PUSH
58286: LD_INT 104
58288: EQUAL
58289: IFFALSE 58295
// MC_TurretWeapon ( ) ;
58291: CALL 66323 0 0
// if event = 105 then
58295: LD_VAR 0 1
58299: PUSH
58300: LD_INT 105
58302: EQUAL
58303: IFFALSE 58309
// MC_BuildUpgrade ( ) ;
58305: CALL 65874 0 0
// if event = 106 then
58309: LD_VAR 0 1
58313: PUSH
58314: LD_INT 106
58316: EQUAL
58317: IFFALSE 58323
// MC_PlantMines ( ) ;
58319: CALL 66753 0 0
// if event = 107 then
58323: LD_VAR 0 1
58327: PUSH
58328: LD_INT 107
58330: EQUAL
58331: IFFALSE 58337
// MC_CollectCrates ( ) ;
58333: CALL 67551 0 0
// if event = 108 then
58337: LD_VAR 0 1
58341: PUSH
58342: LD_INT 108
58344: EQUAL
58345: IFFALSE 58351
// MC_LinkRemoteControl ( ) ;
58347: CALL 69327 0 0
// if event = 109 then
58351: LD_VAR 0 1
58355: PUSH
58356: LD_INT 109
58358: EQUAL
58359: IFFALSE 58365
// MC_ProduceVehicle ( ) ;
58361: CALL 69508 0 0
// if event = 110 then
58365: LD_VAR 0 1
58369: PUSH
58370: LD_INT 110
58372: EQUAL
58373: IFFALSE 58379
// MC_SendAttack ( ) ;
58375: CALL 69974 0 0
// if event = 111 then
58379: LD_VAR 0 1
58383: PUSH
58384: LD_INT 111
58386: EQUAL
58387: IFFALSE 58393
// MC_Defend ( ) ;
58389: CALL 70082 0 0
// if event = 112 then
58393: LD_VAR 0 1
58397: PUSH
58398: LD_INT 112
58400: EQUAL
58401: IFFALSE 58407
// MC_Research ( ) ;
58403: CALL 70687 0 0
// if event = 113 then
58407: LD_VAR 0 1
58411: PUSH
58412: LD_INT 113
58414: EQUAL
58415: IFFALSE 58421
// MC_MinesTrigger ( ) ;
58417: CALL 71801 0 0
// if event = 120 then
58421: LD_VAR 0 1
58425: PUSH
58426: LD_INT 120
58428: EQUAL
58429: IFFALSE 58435
// MC_RepairVehicle ( ) ;
58431: CALL 71900 0 0
// if event = 121 then
58435: LD_VAR 0 1
58439: PUSH
58440: LD_INT 121
58442: EQUAL
58443: IFFALSE 58449
// MC_TameApe ( ) ;
58445: CALL 72630 0 0
// if event = 122 then
58449: LD_VAR 0 1
58453: PUSH
58454: LD_INT 122
58456: EQUAL
58457: IFFALSE 58463
// MC_ChangeApeClass ( ) ;
58459: CALL 73459 0 0
// if event = 123 then
58463: LD_VAR 0 1
58467: PUSH
58468: LD_INT 123
58470: EQUAL
58471: IFFALSE 58477
// MC_Bazooka ( ) ;
58473: CALL 74109 0 0
// if event = 124 then
58477: LD_VAR 0 1
58481: PUSH
58482: LD_INT 124
58484: EQUAL
58485: IFFALSE 58491
// MC_TeleportExit ( ) ;
58487: CALL 74307 0 0
// if event = 125 then
58491: LD_VAR 0 1
58495: PUSH
58496: LD_INT 125
58498: EQUAL
58499: IFFALSE 58505
// MC_Deposits ( ) ;
58501: CALL 74954 0 0
// if event = 126 then
58505: LD_VAR 0 1
58509: PUSH
58510: LD_INT 126
58512: EQUAL
58513: IFFALSE 58519
// MC_RemoteDriver ( ) ;
58515: CALL 75579 0 0
// if event = 200 then
58519: LD_VAR 0 1
58523: PUSH
58524: LD_INT 200
58526: EQUAL
58527: IFFALSE 58533
// MC_Idle ( ) ;
58529: CALL 77528 0 0
// end ;
58533: PPOPN 1
58535: END
// export function MC_Reset ( base , tag ) ; var i ; begin
58536: LD_INT 0
58538: PPUSH
58539: PPUSH
// if not mc_bases [ base ] or not tag then
58540: LD_EXP 52
58544: PUSH
58545: LD_VAR 0 1
58549: ARRAY
58550: NOT
58551: PUSH
58552: LD_VAR 0 2
58556: NOT
58557: OR
58558: IFFALSE 58562
// exit ;
58560: GO 58626
// for i in mc_bases [ base ] union mc_ape [ base ] do
58562: LD_ADDR_VAR 0 4
58566: PUSH
58567: LD_EXP 52
58571: PUSH
58572: LD_VAR 0 1
58576: ARRAY
58577: PUSH
58578: LD_EXP 81
58582: PUSH
58583: LD_VAR 0 1
58587: ARRAY
58588: UNION
58589: PUSH
58590: FOR_IN
58591: IFFALSE 58624
// if GetTag ( i ) = tag then
58593: LD_VAR 0 4
58597: PPUSH
58598: CALL_OW 110
58602: PUSH
58603: LD_VAR 0 2
58607: EQUAL
58608: IFFALSE 58622
// SetTag ( i , 0 ) ;
58610: LD_VAR 0 4
58614: PPUSH
58615: LD_INT 0
58617: PPUSH
58618: CALL_OW 109
58622: GO 58590
58624: POP
58625: POP
// end ;
58626: LD_VAR 0 3
58630: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
58631: LD_INT 0
58633: PPUSH
58634: PPUSH
58635: PPUSH
58636: PPUSH
58637: PPUSH
58638: PPUSH
58639: PPUSH
58640: PPUSH
// if not mc_bases then
58641: LD_EXP 52
58645: NOT
58646: IFFALSE 58650
// exit ;
58648: GO 59108
// for i = 1 to mc_bases do
58650: LD_ADDR_VAR 0 2
58654: PUSH
58655: DOUBLE
58656: LD_INT 1
58658: DEC
58659: ST_TO_ADDR
58660: LD_EXP 52
58664: PUSH
58665: FOR_TO
58666: IFFALSE 59106
// begin tmp := MC_ClassCheckReq ( i ) ;
58668: LD_ADDR_VAR 0 4
58672: PUSH
58673: LD_VAR 0 2
58677: PPUSH
58678: CALL 59113 0 1
58682: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
58683: LD_ADDR_EXP 93
58687: PUSH
58688: LD_EXP 93
58692: PPUSH
58693: LD_VAR 0 2
58697: PPUSH
58698: LD_VAR 0 4
58702: PPUSH
58703: CALL_OW 1
58707: ST_TO_ADDR
// if not tmp then
58708: LD_VAR 0 4
58712: NOT
58713: IFFALSE 58717
// continue ;
58715: GO 58665
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
58717: LD_ADDR_VAR 0 6
58721: PUSH
58722: LD_EXP 52
58726: PUSH
58727: LD_VAR 0 2
58731: ARRAY
58732: PPUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 30
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 30
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: PPUSH
58761: CALL_OW 72
58765: PUSH
58766: LD_EXP 52
58770: PUSH
58771: LD_VAR 0 2
58775: ARRAY
58776: PPUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 30
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 30
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: PPUSH
58805: CALL_OW 72
58809: PUSH
58810: LD_EXP 52
58814: PUSH
58815: LD_VAR 0 2
58819: ARRAY
58820: PPUSH
58821: LD_INT 30
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PPUSH
58831: CALL_OW 72
58835: PUSH
58836: LD_EXP 52
58840: PUSH
58841: LD_VAR 0 2
58845: ARRAY
58846: PPUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 30
58852: PUSH
58853: LD_INT 6
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 30
58862: PUSH
58863: LD_INT 7
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 30
58872: PUSH
58873: LD_INT 8
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: PPUSH
58886: CALL_OW 72
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: ST_TO_ADDR
// for j = 1 to 4 do
58897: LD_ADDR_VAR 0 3
58901: PUSH
58902: DOUBLE
58903: LD_INT 1
58905: DEC
58906: ST_TO_ADDR
58907: LD_INT 4
58909: PUSH
58910: FOR_TO
58911: IFFALSE 59102
// begin if not tmp [ j ] then
58913: LD_VAR 0 4
58917: PUSH
58918: LD_VAR 0 3
58922: ARRAY
58923: NOT
58924: IFFALSE 58928
// continue ;
58926: GO 58910
// for p in tmp [ j ] do
58928: LD_ADDR_VAR 0 5
58932: PUSH
58933: LD_VAR 0 4
58937: PUSH
58938: LD_VAR 0 3
58942: ARRAY
58943: PUSH
58944: FOR_IN
58945: IFFALSE 59098
// begin if not b [ j ] then
58947: LD_VAR 0 6
58951: PUSH
58952: LD_VAR 0 3
58956: ARRAY
58957: NOT
58958: IFFALSE 58962
// break ;
58960: GO 59098
// e := 0 ;
58962: LD_ADDR_VAR 0 7
58966: PUSH
58967: LD_INT 0
58969: ST_TO_ADDR
// for k in b [ j ] do
58970: LD_ADDR_VAR 0 8
58974: PUSH
58975: LD_VAR 0 6
58979: PUSH
58980: LD_VAR 0 3
58984: ARRAY
58985: PUSH
58986: FOR_IN
58987: IFFALSE 59014
// if IsNotFull ( k ) then
58989: LD_VAR 0 8
58993: PPUSH
58994: CALL 15745 0 1
58998: IFFALSE 59012
// begin e := k ;
59000: LD_ADDR_VAR 0 7
59004: PUSH
59005: LD_VAR 0 8
59009: ST_TO_ADDR
// break ;
59010: GO 59014
// end ;
59012: GO 58986
59014: POP
59015: POP
// if e and not UnitGoingToBuilding ( p , e ) then
59016: LD_VAR 0 7
59020: PUSH
59021: LD_VAR 0 5
59025: PPUSH
59026: LD_VAR 0 7
59030: PPUSH
59031: CALL 52874 0 2
59035: NOT
59036: AND
59037: IFFALSE 59096
// begin if IsInUnit ( p ) then
59039: LD_VAR 0 5
59043: PPUSH
59044: CALL_OW 310
59048: IFFALSE 59059
// ComExitBuilding ( p ) ;
59050: LD_VAR 0 5
59054: PPUSH
59055: CALL_OW 122
// ComEnterUnit ( p , e ) ;
59059: LD_VAR 0 5
59063: PPUSH
59064: LD_VAR 0 7
59068: PPUSH
59069: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
59073: LD_VAR 0 5
59077: PPUSH
59078: LD_VAR 0 3
59082: PPUSH
59083: CALL_OW 183
// AddComExitBuilding ( p ) ;
59087: LD_VAR 0 5
59091: PPUSH
59092: CALL_OW 182
// end ; end ;
59096: GO 58944
59098: POP
59099: POP
// end ;
59100: GO 58910
59102: POP
59103: POP
// end ;
59104: GO 58665
59106: POP
59107: POP
// end ;
59108: LD_VAR 0 1
59112: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
59113: LD_INT 0
59115: PPUSH
59116: PPUSH
59117: PPUSH
59118: PPUSH
59119: PPUSH
59120: PPUSH
59121: PPUSH
59122: PPUSH
59123: PPUSH
59124: PPUSH
59125: PPUSH
59126: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
59127: LD_VAR 0 1
59131: NOT
59132: PUSH
59133: LD_EXP 52
59137: PUSH
59138: LD_VAR 0 1
59142: ARRAY
59143: NOT
59144: OR
59145: PUSH
59146: LD_EXP 52
59150: PUSH
59151: LD_VAR 0 1
59155: ARRAY
59156: PPUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 30
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 30
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: PPUSH
59185: CALL_OW 72
59189: NOT
59190: OR
59191: IFFALSE 59195
// exit ;
59193: GO 62698
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59195: LD_ADDR_VAR 0 4
59199: PUSH
59200: LD_EXP 52
59204: PUSH
59205: LD_VAR 0 1
59209: ARRAY
59210: PPUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 25
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 25
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 25
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 25
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 25
59256: PUSH
59257: LD_INT 5
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 25
59266: PUSH
59267: LD_INT 8
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 25
59276: PUSH
59277: LD_INT 9
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: PPUSH
59294: CALL_OW 72
59298: ST_TO_ADDR
// if not tmp then
59299: LD_VAR 0 4
59303: NOT
59304: IFFALSE 59308
// exit ;
59306: GO 62698
// for i in tmp do
59308: LD_ADDR_VAR 0 3
59312: PUSH
59313: LD_VAR 0 4
59317: PUSH
59318: FOR_IN
59319: IFFALSE 59350
// if GetTag ( i ) then
59321: LD_VAR 0 3
59325: PPUSH
59326: CALL_OW 110
59330: IFFALSE 59348
// tmp := tmp diff i ;
59332: LD_ADDR_VAR 0 4
59336: PUSH
59337: LD_VAR 0 4
59341: PUSH
59342: LD_VAR 0 3
59346: DIFF
59347: ST_TO_ADDR
59348: GO 59318
59350: POP
59351: POP
// if not tmp then
59352: LD_VAR 0 4
59356: NOT
59357: IFFALSE 59361
// exit ;
59359: GO 62698
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59361: LD_ADDR_VAR 0 5
59365: PUSH
59366: LD_EXP 52
59370: PUSH
59371: LD_VAR 0 1
59375: ARRAY
59376: PPUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 25
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 25
59392: PUSH
59393: LD_INT 5
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 25
59402: PUSH
59403: LD_INT 8
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 25
59412: PUSH
59413: LD_INT 9
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: PPUSH
59427: CALL_OW 72
59431: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
59432: LD_ADDR_VAR 0 6
59436: PUSH
59437: LD_EXP 52
59441: PUSH
59442: LD_VAR 0 1
59446: ARRAY
59447: PPUSH
59448: LD_INT 25
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PPUSH
59458: CALL_OW 72
59462: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
59463: LD_ADDR_VAR 0 7
59467: PUSH
59468: LD_EXP 52
59472: PUSH
59473: LD_VAR 0 1
59477: ARRAY
59478: PPUSH
59479: LD_INT 25
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PPUSH
59489: CALL_OW 72
59493: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
59494: LD_ADDR_VAR 0 8
59498: PUSH
59499: LD_EXP 52
59503: PUSH
59504: LD_VAR 0 1
59508: ARRAY
59509: PPUSH
59510: LD_INT 25
59512: PUSH
59513: LD_INT 4
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 24
59522: PUSH
59523: LD_INT 251
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PPUSH
59534: CALL_OW 72
59538: ST_TO_ADDR
// if mc_scan [ base ] then
59539: LD_EXP 75
59543: PUSH
59544: LD_VAR 0 1
59548: ARRAY
59549: IFFALSE 60010
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
59551: LD_ADDR_EXP 94
59555: PUSH
59556: LD_EXP 94
59560: PPUSH
59561: LD_VAR 0 1
59565: PPUSH
59566: LD_INT 4
59568: PPUSH
59569: CALL_OW 1
59573: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59574: LD_ADDR_VAR 0 12
59578: PUSH
59579: LD_EXP 52
59583: PUSH
59584: LD_VAR 0 1
59588: ARRAY
59589: PPUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 30
59595: PUSH
59596: LD_INT 4
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 30
59605: PUSH
59606: LD_INT 5
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: PPUSH
59618: CALL_OW 72
59622: ST_TO_ADDR
// if not b then
59623: LD_VAR 0 12
59627: NOT
59628: IFFALSE 59632
// exit ;
59630: GO 62698
// p := [ ] ;
59632: LD_ADDR_VAR 0 11
59636: PUSH
59637: EMPTY
59638: ST_TO_ADDR
// if sci >= 2 then
59639: LD_VAR 0 8
59643: PUSH
59644: LD_INT 2
59646: GREATEREQUAL
59647: IFFALSE 59678
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
59649: LD_ADDR_VAR 0 8
59653: PUSH
59654: LD_VAR 0 8
59658: PUSH
59659: LD_INT 1
59661: ARRAY
59662: PUSH
59663: LD_VAR 0 8
59667: PUSH
59668: LD_INT 2
59670: ARRAY
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: ST_TO_ADDR
59676: GO 59739
// if sci = 1 then
59678: LD_VAR 0 8
59682: PUSH
59683: LD_INT 1
59685: EQUAL
59686: IFFALSE 59707
// sci := [ sci [ 1 ] ] else
59688: LD_ADDR_VAR 0 8
59692: PUSH
59693: LD_VAR 0 8
59697: PUSH
59698: LD_INT 1
59700: ARRAY
59701: PUSH
59702: EMPTY
59703: LIST
59704: ST_TO_ADDR
59705: GO 59739
// if sci = 0 then
59707: LD_VAR 0 8
59711: PUSH
59712: LD_INT 0
59714: EQUAL
59715: IFFALSE 59739
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
59717: LD_ADDR_VAR 0 11
59721: PUSH
59722: LD_VAR 0 4
59726: PPUSH
59727: LD_INT 4
59729: PPUSH
59730: CALL 52737 0 2
59734: PUSH
59735: LD_INT 1
59737: ARRAY
59738: ST_TO_ADDR
// if eng > 4 then
59739: LD_VAR 0 6
59743: PUSH
59744: LD_INT 4
59746: GREATER
59747: IFFALSE 59793
// for i = eng downto 4 do
59749: LD_ADDR_VAR 0 3
59753: PUSH
59754: DOUBLE
59755: LD_VAR 0 6
59759: INC
59760: ST_TO_ADDR
59761: LD_INT 4
59763: PUSH
59764: FOR_DOWNTO
59765: IFFALSE 59791
// eng := eng diff eng [ i ] ;
59767: LD_ADDR_VAR 0 6
59771: PUSH
59772: LD_VAR 0 6
59776: PUSH
59777: LD_VAR 0 6
59781: PUSH
59782: LD_VAR 0 3
59786: ARRAY
59787: DIFF
59788: ST_TO_ADDR
59789: GO 59764
59791: POP
59792: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
59793: LD_ADDR_VAR 0 4
59797: PUSH
59798: LD_VAR 0 4
59802: PUSH
59803: LD_VAR 0 5
59807: PUSH
59808: LD_VAR 0 6
59812: UNION
59813: PUSH
59814: LD_VAR 0 7
59818: UNION
59819: PUSH
59820: LD_VAR 0 8
59824: UNION
59825: DIFF
59826: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
59827: LD_ADDR_VAR 0 13
59831: PUSH
59832: LD_EXP 52
59836: PUSH
59837: LD_VAR 0 1
59841: ARRAY
59842: PPUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 30
59848: PUSH
59849: LD_INT 32
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 30
59858: PUSH
59859: LD_INT 31
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: PPUSH
59871: CALL_OW 72
59875: PUSH
59876: LD_EXP 52
59880: PUSH
59881: LD_VAR 0 1
59885: ARRAY
59886: PPUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 30
59892: PUSH
59893: LD_INT 4
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 30
59902: PUSH
59903: LD_INT 5
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: PPUSH
59915: CALL_OW 72
59919: PUSH
59920: LD_INT 6
59922: MUL
59923: PLUS
59924: ST_TO_ADDR
// if bcount < tmp then
59925: LD_VAR 0 13
59929: PUSH
59930: LD_VAR 0 4
59934: LESS
59935: IFFALSE 59981
// for i = tmp downto bcount do
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: DOUBLE
59943: LD_VAR 0 4
59947: INC
59948: ST_TO_ADDR
59949: LD_VAR 0 13
59953: PUSH
59954: FOR_DOWNTO
59955: IFFALSE 59979
// tmp := Delete ( tmp , tmp ) ;
59957: LD_ADDR_VAR 0 4
59961: PUSH
59962: LD_VAR 0 4
59966: PPUSH
59967: LD_VAR 0 4
59971: PPUSH
59972: CALL_OW 3
59976: ST_TO_ADDR
59977: GO 59954
59979: POP
59980: POP
// result := [ tmp , 0 , 0 , p ] ;
59981: LD_ADDR_VAR 0 2
59985: PUSH
59986: LD_VAR 0 4
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_VAR 0 11
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// exit ;
60008: GO 62698
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60010: LD_EXP 52
60014: PUSH
60015: LD_VAR 0 1
60019: ARRAY
60020: PPUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 30
60026: PUSH
60027: LD_INT 6
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 30
60036: PUSH
60037: LD_INT 7
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 30
60046: PUSH
60047: LD_INT 8
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: PPUSH
60060: CALL_OW 72
60064: NOT
60065: PUSH
60066: LD_EXP 52
60070: PUSH
60071: LD_VAR 0 1
60075: ARRAY
60076: PPUSH
60077: LD_INT 30
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PPUSH
60087: CALL_OW 72
60091: NOT
60092: AND
60093: IFFALSE 60165
// begin if eng = tmp then
60095: LD_VAR 0 6
60099: PUSH
60100: LD_VAR 0 4
60104: EQUAL
60105: IFFALSE 60109
// exit ;
60107: GO 62698
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
60109: LD_ADDR_EXP 94
60113: PUSH
60114: LD_EXP 94
60118: PPUSH
60119: LD_VAR 0 1
60123: PPUSH
60124: LD_INT 1
60126: PPUSH
60127: CALL_OW 1
60131: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
60132: LD_ADDR_VAR 0 2
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: LD_VAR 0 4
60144: PUSH
60145: LD_VAR 0 6
60149: DIFF
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: ST_TO_ADDR
// exit ;
60163: GO 62698
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60165: LD_EXP 79
60169: PUSH
60170: LD_EXP 78
60174: PUSH
60175: LD_VAR 0 1
60179: ARRAY
60180: ARRAY
60181: PUSH
60182: LD_EXP 52
60186: PUSH
60187: LD_VAR 0 1
60191: ARRAY
60192: PPUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 30
60198: PUSH
60199: LD_INT 6
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 30
60208: PUSH
60209: LD_INT 7
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 30
60218: PUSH
60219: LD_INT 8
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: PPUSH
60232: CALL_OW 72
60236: AND
60237: PUSH
60238: LD_EXP 52
60242: PUSH
60243: LD_VAR 0 1
60247: ARRAY
60248: PPUSH
60249: LD_INT 30
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PPUSH
60259: CALL_OW 72
60263: NOT
60264: AND
60265: IFFALSE 60479
// begin if sci >= 6 then
60267: LD_VAR 0 8
60271: PUSH
60272: LD_INT 6
60274: GREATEREQUAL
60275: IFFALSE 60279
// exit ;
60277: GO 62698
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
60279: LD_ADDR_EXP 94
60283: PUSH
60284: LD_EXP 94
60288: PPUSH
60289: LD_VAR 0 1
60293: PPUSH
60294: LD_INT 2
60296: PPUSH
60297: CALL_OW 1
60301: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
60302: LD_ADDR_VAR 0 9
60306: PUSH
60307: LD_VAR 0 4
60311: PUSH
60312: LD_VAR 0 8
60316: DIFF
60317: PPUSH
60318: LD_INT 4
60320: PPUSH
60321: CALL 52737 0 2
60325: ST_TO_ADDR
// p := [ ] ;
60326: LD_ADDR_VAR 0 11
60330: PUSH
60331: EMPTY
60332: ST_TO_ADDR
// if sci < 6 and sort > 6 then
60333: LD_VAR 0 8
60337: PUSH
60338: LD_INT 6
60340: LESS
60341: PUSH
60342: LD_VAR 0 9
60346: PUSH
60347: LD_INT 6
60349: GREATER
60350: AND
60351: IFFALSE 60432
// begin for i = 1 to 6 - sci do
60353: LD_ADDR_VAR 0 3
60357: PUSH
60358: DOUBLE
60359: LD_INT 1
60361: DEC
60362: ST_TO_ADDR
60363: LD_INT 6
60365: PUSH
60366: LD_VAR 0 8
60370: MINUS
60371: PUSH
60372: FOR_TO
60373: IFFALSE 60428
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
60375: LD_ADDR_VAR 0 11
60379: PUSH
60380: LD_VAR 0 11
60384: PPUSH
60385: LD_VAR 0 11
60389: PUSH
60390: LD_INT 1
60392: PLUS
60393: PPUSH
60394: LD_VAR 0 9
60398: PUSH
60399: LD_INT 1
60401: ARRAY
60402: PPUSH
60403: CALL_OW 2
60407: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
60408: LD_ADDR_VAR 0 9
60412: PUSH
60413: LD_VAR 0 9
60417: PPUSH
60418: LD_INT 1
60420: PPUSH
60421: CALL_OW 3
60425: ST_TO_ADDR
// end ;
60426: GO 60372
60428: POP
60429: POP
// end else
60430: GO 60452
// if sort then
60432: LD_VAR 0 9
60436: IFFALSE 60452
// p := sort [ 1 ] ;
60438: LD_ADDR_VAR 0 11
60442: PUSH
60443: LD_VAR 0 9
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
60452: LD_ADDR_VAR 0 2
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_VAR 0 11
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: ST_TO_ADDR
// exit ;
60477: GO 62698
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60479: LD_EXP 79
60483: PUSH
60484: LD_EXP 78
60488: PUSH
60489: LD_VAR 0 1
60493: ARRAY
60494: ARRAY
60495: PUSH
60496: LD_EXP 52
60500: PUSH
60501: LD_VAR 0 1
60505: ARRAY
60506: PPUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 30
60512: PUSH
60513: LD_INT 6
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 30
60522: PUSH
60523: LD_INT 7
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 30
60532: PUSH
60533: LD_INT 8
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: PPUSH
60546: CALL_OW 72
60550: AND
60551: PUSH
60552: LD_EXP 52
60556: PUSH
60557: LD_VAR 0 1
60561: ARRAY
60562: PPUSH
60563: LD_INT 30
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PPUSH
60573: CALL_OW 72
60577: AND
60578: IFFALSE 61312
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
60580: LD_ADDR_EXP 94
60584: PUSH
60585: LD_EXP 94
60589: PPUSH
60590: LD_VAR 0 1
60594: PPUSH
60595: LD_INT 3
60597: PPUSH
60598: CALL_OW 1
60602: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60603: LD_ADDR_VAR 0 2
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// if not eng then
60626: LD_VAR 0 6
60630: NOT
60631: IFFALSE 60694
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
60633: LD_ADDR_VAR 0 11
60637: PUSH
60638: LD_VAR 0 4
60642: PPUSH
60643: LD_INT 2
60645: PPUSH
60646: CALL 52737 0 2
60650: PUSH
60651: LD_INT 1
60653: ARRAY
60654: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
60655: LD_ADDR_VAR 0 2
60659: PUSH
60660: LD_VAR 0 2
60664: PPUSH
60665: LD_INT 2
60667: PPUSH
60668: LD_VAR 0 11
60672: PPUSH
60673: CALL_OW 1
60677: ST_TO_ADDR
// tmp := tmp diff p ;
60678: LD_ADDR_VAR 0 4
60682: PUSH
60683: LD_VAR 0 4
60687: PUSH
60688: LD_VAR 0 11
60692: DIFF
60693: ST_TO_ADDR
// end ; if tmp and sci < 6 then
60694: LD_VAR 0 4
60698: PUSH
60699: LD_VAR 0 8
60703: PUSH
60704: LD_INT 6
60706: LESS
60707: AND
60708: IFFALSE 60896
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
60710: LD_ADDR_VAR 0 9
60714: PUSH
60715: LD_VAR 0 4
60719: PUSH
60720: LD_VAR 0 8
60724: PUSH
60725: LD_VAR 0 7
60729: UNION
60730: DIFF
60731: PPUSH
60732: LD_INT 4
60734: PPUSH
60735: CALL 52737 0 2
60739: ST_TO_ADDR
// p := [ ] ;
60740: LD_ADDR_VAR 0 11
60744: PUSH
60745: EMPTY
60746: ST_TO_ADDR
// if sort then
60747: LD_VAR 0 9
60751: IFFALSE 60867
// for i = 1 to 6 - sci do
60753: LD_ADDR_VAR 0 3
60757: PUSH
60758: DOUBLE
60759: LD_INT 1
60761: DEC
60762: ST_TO_ADDR
60763: LD_INT 6
60765: PUSH
60766: LD_VAR 0 8
60770: MINUS
60771: PUSH
60772: FOR_TO
60773: IFFALSE 60865
// begin if i = sort then
60775: LD_VAR 0 3
60779: PUSH
60780: LD_VAR 0 9
60784: EQUAL
60785: IFFALSE 60789
// break ;
60787: GO 60865
// if GetClass ( i ) = 4 then
60789: LD_VAR 0 3
60793: PPUSH
60794: CALL_OW 257
60798: PUSH
60799: LD_INT 4
60801: EQUAL
60802: IFFALSE 60806
// continue ;
60804: GO 60772
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60806: LD_ADDR_VAR 0 11
60810: PUSH
60811: LD_VAR 0 11
60815: PPUSH
60816: LD_VAR 0 11
60820: PUSH
60821: LD_INT 1
60823: PLUS
60824: PPUSH
60825: LD_VAR 0 9
60829: PUSH
60830: LD_VAR 0 3
60834: ARRAY
60835: PPUSH
60836: CALL_OW 2
60840: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60841: LD_ADDR_VAR 0 4
60845: PUSH
60846: LD_VAR 0 4
60850: PUSH
60851: LD_VAR 0 9
60855: PUSH
60856: LD_VAR 0 3
60860: ARRAY
60861: DIFF
60862: ST_TO_ADDR
// end ;
60863: GO 60772
60865: POP
60866: POP
// if p then
60867: LD_VAR 0 11
60871: IFFALSE 60896
// result := Replace ( result , 4 , p ) ;
60873: LD_ADDR_VAR 0 2
60877: PUSH
60878: LD_VAR 0 2
60882: PPUSH
60883: LD_INT 4
60885: PPUSH
60886: LD_VAR 0 11
60890: PPUSH
60891: CALL_OW 1
60895: ST_TO_ADDR
// end ; if tmp and mech < 6 then
60896: LD_VAR 0 4
60900: PUSH
60901: LD_VAR 0 7
60905: PUSH
60906: LD_INT 6
60908: LESS
60909: AND
60910: IFFALSE 61098
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60912: LD_ADDR_VAR 0 9
60916: PUSH
60917: LD_VAR 0 4
60921: PUSH
60922: LD_VAR 0 8
60926: PUSH
60927: LD_VAR 0 7
60931: UNION
60932: DIFF
60933: PPUSH
60934: LD_INT 3
60936: PPUSH
60937: CALL 52737 0 2
60941: ST_TO_ADDR
// p := [ ] ;
60942: LD_ADDR_VAR 0 11
60946: PUSH
60947: EMPTY
60948: ST_TO_ADDR
// if sort then
60949: LD_VAR 0 9
60953: IFFALSE 61069
// for i = 1 to 6 - mech do
60955: LD_ADDR_VAR 0 3
60959: PUSH
60960: DOUBLE
60961: LD_INT 1
60963: DEC
60964: ST_TO_ADDR
60965: LD_INT 6
60967: PUSH
60968: LD_VAR 0 7
60972: MINUS
60973: PUSH
60974: FOR_TO
60975: IFFALSE 61067
// begin if i = sort then
60977: LD_VAR 0 3
60981: PUSH
60982: LD_VAR 0 9
60986: EQUAL
60987: IFFALSE 60991
// break ;
60989: GO 61067
// if GetClass ( i ) = 3 then
60991: LD_VAR 0 3
60995: PPUSH
60996: CALL_OW 257
61000: PUSH
61001: LD_INT 3
61003: EQUAL
61004: IFFALSE 61008
// continue ;
61006: GO 60974
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61008: LD_ADDR_VAR 0 11
61012: PUSH
61013: LD_VAR 0 11
61017: PPUSH
61018: LD_VAR 0 11
61022: PUSH
61023: LD_INT 1
61025: PLUS
61026: PPUSH
61027: LD_VAR 0 9
61031: PUSH
61032: LD_VAR 0 3
61036: ARRAY
61037: PPUSH
61038: CALL_OW 2
61042: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61043: LD_ADDR_VAR 0 4
61047: PUSH
61048: LD_VAR 0 4
61052: PUSH
61053: LD_VAR 0 9
61057: PUSH
61058: LD_VAR 0 3
61062: ARRAY
61063: DIFF
61064: ST_TO_ADDR
// end ;
61065: GO 60974
61067: POP
61068: POP
// if p then
61069: LD_VAR 0 11
61073: IFFALSE 61098
// result := Replace ( result , 3 , p ) ;
61075: LD_ADDR_VAR 0 2
61079: PUSH
61080: LD_VAR 0 2
61084: PPUSH
61085: LD_INT 3
61087: PPUSH
61088: LD_VAR 0 11
61092: PPUSH
61093: CALL_OW 1
61097: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
61098: LD_VAR 0 4
61102: PUSH
61103: LD_INT 6
61105: GREATER
61106: PUSH
61107: LD_VAR 0 6
61111: PUSH
61112: LD_INT 6
61114: LESS
61115: AND
61116: IFFALSE 61310
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61118: LD_ADDR_VAR 0 9
61122: PUSH
61123: LD_VAR 0 4
61127: PUSH
61128: LD_VAR 0 8
61132: PUSH
61133: LD_VAR 0 7
61137: UNION
61138: PUSH
61139: LD_VAR 0 6
61143: UNION
61144: DIFF
61145: PPUSH
61146: LD_INT 2
61148: PPUSH
61149: CALL 52737 0 2
61153: ST_TO_ADDR
// p := [ ] ;
61154: LD_ADDR_VAR 0 11
61158: PUSH
61159: EMPTY
61160: ST_TO_ADDR
// if sort then
61161: LD_VAR 0 9
61165: IFFALSE 61281
// for i = 1 to 6 - eng do
61167: LD_ADDR_VAR 0 3
61171: PUSH
61172: DOUBLE
61173: LD_INT 1
61175: DEC
61176: ST_TO_ADDR
61177: LD_INT 6
61179: PUSH
61180: LD_VAR 0 6
61184: MINUS
61185: PUSH
61186: FOR_TO
61187: IFFALSE 61279
// begin if i = sort then
61189: LD_VAR 0 3
61193: PUSH
61194: LD_VAR 0 9
61198: EQUAL
61199: IFFALSE 61203
// break ;
61201: GO 61279
// if GetClass ( i ) = 2 then
61203: LD_VAR 0 3
61207: PPUSH
61208: CALL_OW 257
61212: PUSH
61213: LD_INT 2
61215: EQUAL
61216: IFFALSE 61220
// continue ;
61218: GO 61186
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61220: LD_ADDR_VAR 0 11
61224: PUSH
61225: LD_VAR 0 11
61229: PPUSH
61230: LD_VAR 0 11
61234: PUSH
61235: LD_INT 1
61237: PLUS
61238: PPUSH
61239: LD_VAR 0 9
61243: PUSH
61244: LD_VAR 0 3
61248: ARRAY
61249: PPUSH
61250: CALL_OW 2
61254: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61255: LD_ADDR_VAR 0 4
61259: PUSH
61260: LD_VAR 0 4
61264: PUSH
61265: LD_VAR 0 9
61269: PUSH
61270: LD_VAR 0 3
61274: ARRAY
61275: DIFF
61276: ST_TO_ADDR
// end ;
61277: GO 61186
61279: POP
61280: POP
// if p then
61281: LD_VAR 0 11
61285: IFFALSE 61310
// result := Replace ( result , 2 , p ) ;
61287: LD_ADDR_VAR 0 2
61291: PUSH
61292: LD_VAR 0 2
61296: PPUSH
61297: LD_INT 2
61299: PPUSH
61300: LD_VAR 0 11
61304: PPUSH
61305: CALL_OW 1
61309: ST_TO_ADDR
// end ; exit ;
61310: GO 62698
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
61312: LD_EXP 79
61316: PUSH
61317: LD_EXP 78
61321: PUSH
61322: LD_VAR 0 1
61326: ARRAY
61327: ARRAY
61328: NOT
61329: PUSH
61330: LD_EXP 52
61334: PUSH
61335: LD_VAR 0 1
61339: ARRAY
61340: PPUSH
61341: LD_INT 30
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PPUSH
61351: CALL_OW 72
61355: AND
61356: PUSH
61357: LD_EXP 57
61361: PUSH
61362: LD_VAR 0 1
61366: ARRAY
61367: AND
61368: IFFALSE 61976
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
61370: LD_ADDR_EXP 94
61374: PUSH
61375: LD_EXP 94
61379: PPUSH
61380: LD_VAR 0 1
61384: PPUSH
61385: LD_INT 5
61387: PPUSH
61388: CALL_OW 1
61392: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61393: LD_ADDR_VAR 0 2
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: ST_TO_ADDR
// if sci > 1 then
61416: LD_VAR 0 8
61420: PUSH
61421: LD_INT 1
61423: GREATER
61424: IFFALSE 61452
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
61426: LD_ADDR_VAR 0 4
61430: PUSH
61431: LD_VAR 0 4
61435: PUSH
61436: LD_VAR 0 8
61440: PUSH
61441: LD_VAR 0 8
61445: PUSH
61446: LD_INT 1
61448: ARRAY
61449: DIFF
61450: DIFF
61451: ST_TO_ADDR
// if tmp and not sci then
61452: LD_VAR 0 4
61456: PUSH
61457: LD_VAR 0 8
61461: NOT
61462: AND
61463: IFFALSE 61532
// begin sort := SortBySkill ( tmp , 4 ) ;
61465: LD_ADDR_VAR 0 9
61469: PUSH
61470: LD_VAR 0 4
61474: PPUSH
61475: LD_INT 4
61477: PPUSH
61478: CALL 52737 0 2
61482: ST_TO_ADDR
// if sort then
61483: LD_VAR 0 9
61487: IFFALSE 61503
// p := sort [ 1 ] ;
61489: LD_ADDR_VAR 0 11
61493: PUSH
61494: LD_VAR 0 9
61498: PUSH
61499: LD_INT 1
61501: ARRAY
61502: ST_TO_ADDR
// if p then
61503: LD_VAR 0 11
61507: IFFALSE 61532
// result := Replace ( result , 4 , p ) ;
61509: LD_ADDR_VAR 0 2
61513: PUSH
61514: LD_VAR 0 2
61518: PPUSH
61519: LD_INT 4
61521: PPUSH
61522: LD_VAR 0 11
61526: PPUSH
61527: CALL_OW 1
61531: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61532: LD_ADDR_VAR 0 4
61536: PUSH
61537: LD_VAR 0 4
61541: PUSH
61542: LD_VAR 0 7
61546: DIFF
61547: ST_TO_ADDR
// if tmp and mech < 6 then
61548: LD_VAR 0 4
61552: PUSH
61553: LD_VAR 0 7
61557: PUSH
61558: LD_INT 6
61560: LESS
61561: AND
61562: IFFALSE 61750
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
61564: LD_ADDR_VAR 0 9
61568: PUSH
61569: LD_VAR 0 4
61573: PUSH
61574: LD_VAR 0 8
61578: PUSH
61579: LD_VAR 0 7
61583: UNION
61584: DIFF
61585: PPUSH
61586: LD_INT 3
61588: PPUSH
61589: CALL 52737 0 2
61593: ST_TO_ADDR
// p := [ ] ;
61594: LD_ADDR_VAR 0 11
61598: PUSH
61599: EMPTY
61600: ST_TO_ADDR
// if sort then
61601: LD_VAR 0 9
61605: IFFALSE 61721
// for i = 1 to 6 - mech do
61607: LD_ADDR_VAR 0 3
61611: PUSH
61612: DOUBLE
61613: LD_INT 1
61615: DEC
61616: ST_TO_ADDR
61617: LD_INT 6
61619: PUSH
61620: LD_VAR 0 7
61624: MINUS
61625: PUSH
61626: FOR_TO
61627: IFFALSE 61719
// begin if i = sort then
61629: LD_VAR 0 3
61633: PUSH
61634: LD_VAR 0 9
61638: EQUAL
61639: IFFALSE 61643
// break ;
61641: GO 61719
// if GetClass ( i ) = 3 then
61643: LD_VAR 0 3
61647: PPUSH
61648: CALL_OW 257
61652: PUSH
61653: LD_INT 3
61655: EQUAL
61656: IFFALSE 61660
// continue ;
61658: GO 61626
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61660: LD_ADDR_VAR 0 11
61664: PUSH
61665: LD_VAR 0 11
61669: PPUSH
61670: LD_VAR 0 11
61674: PUSH
61675: LD_INT 1
61677: PLUS
61678: PPUSH
61679: LD_VAR 0 9
61683: PUSH
61684: LD_VAR 0 3
61688: ARRAY
61689: PPUSH
61690: CALL_OW 2
61694: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61695: LD_ADDR_VAR 0 4
61699: PUSH
61700: LD_VAR 0 4
61704: PUSH
61705: LD_VAR 0 9
61709: PUSH
61710: LD_VAR 0 3
61714: ARRAY
61715: DIFF
61716: ST_TO_ADDR
// end ;
61717: GO 61626
61719: POP
61720: POP
// if p then
61721: LD_VAR 0 11
61725: IFFALSE 61750
// result := Replace ( result , 3 , p ) ;
61727: LD_ADDR_VAR 0 2
61731: PUSH
61732: LD_VAR 0 2
61736: PPUSH
61737: LD_INT 3
61739: PPUSH
61740: LD_VAR 0 11
61744: PPUSH
61745: CALL_OW 1
61749: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61750: LD_ADDR_VAR 0 4
61754: PUSH
61755: LD_VAR 0 4
61759: PUSH
61760: LD_VAR 0 6
61764: DIFF
61765: ST_TO_ADDR
// if tmp and eng < 6 then
61766: LD_VAR 0 4
61770: PUSH
61771: LD_VAR 0 6
61775: PUSH
61776: LD_INT 6
61778: LESS
61779: AND
61780: IFFALSE 61974
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61782: LD_ADDR_VAR 0 9
61786: PUSH
61787: LD_VAR 0 4
61791: PUSH
61792: LD_VAR 0 8
61796: PUSH
61797: LD_VAR 0 7
61801: UNION
61802: PUSH
61803: LD_VAR 0 6
61807: UNION
61808: DIFF
61809: PPUSH
61810: LD_INT 2
61812: PPUSH
61813: CALL 52737 0 2
61817: ST_TO_ADDR
// p := [ ] ;
61818: LD_ADDR_VAR 0 11
61822: PUSH
61823: EMPTY
61824: ST_TO_ADDR
// if sort then
61825: LD_VAR 0 9
61829: IFFALSE 61945
// for i = 1 to 6 - eng do
61831: LD_ADDR_VAR 0 3
61835: PUSH
61836: DOUBLE
61837: LD_INT 1
61839: DEC
61840: ST_TO_ADDR
61841: LD_INT 6
61843: PUSH
61844: LD_VAR 0 6
61848: MINUS
61849: PUSH
61850: FOR_TO
61851: IFFALSE 61943
// begin if i = sort then
61853: LD_VAR 0 3
61857: PUSH
61858: LD_VAR 0 9
61862: EQUAL
61863: IFFALSE 61867
// break ;
61865: GO 61943
// if GetClass ( i ) = 2 then
61867: LD_VAR 0 3
61871: PPUSH
61872: CALL_OW 257
61876: PUSH
61877: LD_INT 2
61879: EQUAL
61880: IFFALSE 61884
// continue ;
61882: GO 61850
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61884: LD_ADDR_VAR 0 11
61888: PUSH
61889: LD_VAR 0 11
61893: PPUSH
61894: LD_VAR 0 11
61898: PUSH
61899: LD_INT 1
61901: PLUS
61902: PPUSH
61903: LD_VAR 0 9
61907: PUSH
61908: LD_VAR 0 3
61912: ARRAY
61913: PPUSH
61914: CALL_OW 2
61918: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61919: LD_ADDR_VAR 0 4
61923: PUSH
61924: LD_VAR 0 4
61928: PUSH
61929: LD_VAR 0 9
61933: PUSH
61934: LD_VAR 0 3
61938: ARRAY
61939: DIFF
61940: ST_TO_ADDR
// end ;
61941: GO 61850
61943: POP
61944: POP
// if p then
61945: LD_VAR 0 11
61949: IFFALSE 61974
// result := Replace ( result , 2 , p ) ;
61951: LD_ADDR_VAR 0 2
61955: PUSH
61956: LD_VAR 0 2
61960: PPUSH
61961: LD_INT 2
61963: PPUSH
61964: LD_VAR 0 11
61968: PPUSH
61969: CALL_OW 1
61973: ST_TO_ADDR
// end ; exit ;
61974: GO 62698
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
61976: LD_EXP 79
61980: PUSH
61981: LD_EXP 78
61985: PUSH
61986: LD_VAR 0 1
61990: ARRAY
61991: ARRAY
61992: NOT
61993: PUSH
61994: LD_EXP 52
61998: PUSH
61999: LD_VAR 0 1
62003: ARRAY
62004: PPUSH
62005: LD_INT 30
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PPUSH
62015: CALL_OW 72
62019: AND
62020: PUSH
62021: LD_EXP 57
62025: PUSH
62026: LD_VAR 0 1
62030: ARRAY
62031: NOT
62032: AND
62033: IFFALSE 62698
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
62035: LD_ADDR_EXP 94
62039: PUSH
62040: LD_EXP 94
62044: PPUSH
62045: LD_VAR 0 1
62049: PPUSH
62050: LD_INT 6
62052: PPUSH
62053: CALL_OW 1
62057: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62058: LD_ADDR_VAR 0 2
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: ST_TO_ADDR
// if sci >= 1 then
62081: LD_VAR 0 8
62085: PUSH
62086: LD_INT 1
62088: GREATEREQUAL
62089: IFFALSE 62111
// tmp := tmp diff sci [ 1 ] ;
62091: LD_ADDR_VAR 0 4
62095: PUSH
62096: LD_VAR 0 4
62100: PUSH
62101: LD_VAR 0 8
62105: PUSH
62106: LD_INT 1
62108: ARRAY
62109: DIFF
62110: ST_TO_ADDR
// if tmp and not sci then
62111: LD_VAR 0 4
62115: PUSH
62116: LD_VAR 0 8
62120: NOT
62121: AND
62122: IFFALSE 62191
// begin sort := SortBySkill ( tmp , 4 ) ;
62124: LD_ADDR_VAR 0 9
62128: PUSH
62129: LD_VAR 0 4
62133: PPUSH
62134: LD_INT 4
62136: PPUSH
62137: CALL 52737 0 2
62141: ST_TO_ADDR
// if sort then
62142: LD_VAR 0 9
62146: IFFALSE 62162
// p := sort [ 1 ] ;
62148: LD_ADDR_VAR 0 11
62152: PUSH
62153: LD_VAR 0 9
62157: PUSH
62158: LD_INT 1
62160: ARRAY
62161: ST_TO_ADDR
// if p then
62162: LD_VAR 0 11
62166: IFFALSE 62191
// result := Replace ( result , 4 , p ) ;
62168: LD_ADDR_VAR 0 2
62172: PUSH
62173: LD_VAR 0 2
62177: PPUSH
62178: LD_INT 4
62180: PPUSH
62181: LD_VAR 0 11
62185: PPUSH
62186: CALL_OW 1
62190: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62191: LD_ADDR_VAR 0 4
62195: PUSH
62196: LD_VAR 0 4
62200: PUSH
62201: LD_VAR 0 7
62205: DIFF
62206: ST_TO_ADDR
// if tmp and mech < 6 then
62207: LD_VAR 0 4
62211: PUSH
62212: LD_VAR 0 7
62216: PUSH
62217: LD_INT 6
62219: LESS
62220: AND
62221: IFFALSE 62403
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
62223: LD_ADDR_VAR 0 9
62227: PUSH
62228: LD_VAR 0 4
62232: PUSH
62233: LD_VAR 0 7
62237: DIFF
62238: PPUSH
62239: LD_INT 3
62241: PPUSH
62242: CALL 52737 0 2
62246: ST_TO_ADDR
// p := [ ] ;
62247: LD_ADDR_VAR 0 11
62251: PUSH
62252: EMPTY
62253: ST_TO_ADDR
// if sort then
62254: LD_VAR 0 9
62258: IFFALSE 62374
// for i = 1 to 6 - mech do
62260: LD_ADDR_VAR 0 3
62264: PUSH
62265: DOUBLE
62266: LD_INT 1
62268: DEC
62269: ST_TO_ADDR
62270: LD_INT 6
62272: PUSH
62273: LD_VAR 0 7
62277: MINUS
62278: PUSH
62279: FOR_TO
62280: IFFALSE 62372
// begin if i = sort then
62282: LD_VAR 0 3
62286: PUSH
62287: LD_VAR 0 9
62291: EQUAL
62292: IFFALSE 62296
// break ;
62294: GO 62372
// if GetClass ( i ) = 3 then
62296: LD_VAR 0 3
62300: PPUSH
62301: CALL_OW 257
62305: PUSH
62306: LD_INT 3
62308: EQUAL
62309: IFFALSE 62313
// continue ;
62311: GO 62279
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62313: LD_ADDR_VAR 0 11
62317: PUSH
62318: LD_VAR 0 11
62322: PPUSH
62323: LD_VAR 0 11
62327: PUSH
62328: LD_INT 1
62330: PLUS
62331: PPUSH
62332: LD_VAR 0 9
62336: PUSH
62337: LD_VAR 0 3
62341: ARRAY
62342: PPUSH
62343: CALL_OW 2
62347: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62348: LD_ADDR_VAR 0 4
62352: PUSH
62353: LD_VAR 0 4
62357: PUSH
62358: LD_VAR 0 9
62362: PUSH
62363: LD_VAR 0 3
62367: ARRAY
62368: DIFF
62369: ST_TO_ADDR
// end ;
62370: GO 62279
62372: POP
62373: POP
// if p then
62374: LD_VAR 0 11
62378: IFFALSE 62403
// result := Replace ( result , 3 , p ) ;
62380: LD_ADDR_VAR 0 2
62384: PUSH
62385: LD_VAR 0 2
62389: PPUSH
62390: LD_INT 3
62392: PPUSH
62393: LD_VAR 0 11
62397: PPUSH
62398: CALL_OW 1
62402: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
62403: LD_ADDR_VAR 0 4
62407: PUSH
62408: LD_VAR 0 4
62412: PUSH
62413: LD_VAR 0 6
62417: DIFF
62418: ST_TO_ADDR
// if tmp and eng < 4 then
62419: LD_VAR 0 4
62423: PUSH
62424: LD_VAR 0 6
62428: PUSH
62429: LD_INT 4
62431: LESS
62432: AND
62433: IFFALSE 62623
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
62435: LD_ADDR_VAR 0 9
62439: PUSH
62440: LD_VAR 0 4
62444: PUSH
62445: LD_VAR 0 7
62449: PUSH
62450: LD_VAR 0 6
62454: UNION
62455: DIFF
62456: PPUSH
62457: LD_INT 2
62459: PPUSH
62460: CALL 52737 0 2
62464: ST_TO_ADDR
// p := [ ] ;
62465: LD_ADDR_VAR 0 11
62469: PUSH
62470: EMPTY
62471: ST_TO_ADDR
// if sort then
62472: LD_VAR 0 9
62476: IFFALSE 62592
// for i = 1 to 4 - eng do
62478: LD_ADDR_VAR 0 3
62482: PUSH
62483: DOUBLE
62484: LD_INT 1
62486: DEC
62487: ST_TO_ADDR
62488: LD_INT 4
62490: PUSH
62491: LD_VAR 0 6
62495: MINUS
62496: PUSH
62497: FOR_TO
62498: IFFALSE 62590
// begin if i = sort then
62500: LD_VAR 0 3
62504: PUSH
62505: LD_VAR 0 9
62509: EQUAL
62510: IFFALSE 62514
// break ;
62512: GO 62590
// if GetClass ( i ) = 2 then
62514: LD_VAR 0 3
62518: PPUSH
62519: CALL_OW 257
62523: PUSH
62524: LD_INT 2
62526: EQUAL
62527: IFFALSE 62531
// continue ;
62529: GO 62497
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62531: LD_ADDR_VAR 0 11
62535: PUSH
62536: LD_VAR 0 11
62540: PPUSH
62541: LD_VAR 0 11
62545: PUSH
62546: LD_INT 1
62548: PLUS
62549: PPUSH
62550: LD_VAR 0 9
62554: PUSH
62555: LD_VAR 0 3
62559: ARRAY
62560: PPUSH
62561: CALL_OW 2
62565: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62566: LD_ADDR_VAR 0 4
62570: PUSH
62571: LD_VAR 0 4
62575: PUSH
62576: LD_VAR 0 9
62580: PUSH
62581: LD_VAR 0 3
62585: ARRAY
62586: DIFF
62587: ST_TO_ADDR
// end ;
62588: GO 62497
62590: POP
62591: POP
// if p then
62592: LD_VAR 0 11
62596: IFFALSE 62621
// result := Replace ( result , 2 , p ) ;
62598: LD_ADDR_VAR 0 2
62602: PUSH
62603: LD_VAR 0 2
62607: PPUSH
62608: LD_INT 2
62610: PPUSH
62611: LD_VAR 0 11
62615: PPUSH
62616: CALL_OW 1
62620: ST_TO_ADDR
// end else
62621: GO 62667
// for i = eng downto 5 do
62623: LD_ADDR_VAR 0 3
62627: PUSH
62628: DOUBLE
62629: LD_VAR 0 6
62633: INC
62634: ST_TO_ADDR
62635: LD_INT 5
62637: PUSH
62638: FOR_DOWNTO
62639: IFFALSE 62665
// tmp := tmp union eng [ i ] ;
62641: LD_ADDR_VAR 0 4
62645: PUSH
62646: LD_VAR 0 4
62650: PUSH
62651: LD_VAR 0 6
62655: PUSH
62656: LD_VAR 0 3
62660: ARRAY
62661: UNION
62662: ST_TO_ADDR
62663: GO 62638
62665: POP
62666: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
62667: LD_ADDR_VAR 0 2
62671: PUSH
62672: LD_VAR 0 2
62676: PPUSH
62677: LD_INT 1
62679: PPUSH
62680: LD_VAR 0 4
62684: PUSH
62685: LD_VAR 0 5
62689: DIFF
62690: PPUSH
62691: CALL_OW 1
62695: ST_TO_ADDR
// exit ;
62696: GO 62698
// end ; end ;
62698: LD_VAR 0 2
62702: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
62703: LD_INT 0
62705: PPUSH
62706: PPUSH
62707: PPUSH
// if not mc_bases then
62708: LD_EXP 52
62712: NOT
62713: IFFALSE 62717
// exit ;
62715: GO 62823
// for i = 1 to mc_bases do
62717: LD_ADDR_VAR 0 2
62721: PUSH
62722: DOUBLE
62723: LD_INT 1
62725: DEC
62726: ST_TO_ADDR
62727: LD_EXP 52
62731: PUSH
62732: FOR_TO
62733: IFFALSE 62814
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
62735: LD_ADDR_VAR 0 3
62739: PUSH
62740: LD_EXP 52
62744: PUSH
62745: LD_VAR 0 2
62749: ARRAY
62750: PPUSH
62751: LD_INT 21
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 3
62763: PUSH
62764: LD_INT 24
62766: PUSH
62767: LD_INT 1000
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PPUSH
62782: CALL_OW 72
62786: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
62787: LD_ADDR_EXP 53
62791: PUSH
62792: LD_EXP 53
62796: PPUSH
62797: LD_VAR 0 2
62801: PPUSH
62802: LD_VAR 0 3
62806: PPUSH
62807: CALL_OW 1
62811: ST_TO_ADDR
// end ;
62812: GO 62732
62814: POP
62815: POP
// RaiseSailEvent ( 101 ) ;
62816: LD_INT 101
62818: PPUSH
62819: CALL_OW 427
// end ;
62823: LD_VAR 0 1
62827: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
62828: LD_INT 0
62830: PPUSH
62831: PPUSH
62832: PPUSH
62833: PPUSH
62834: PPUSH
62835: PPUSH
62836: PPUSH
// if not mc_bases then
62837: LD_EXP 52
62841: NOT
62842: IFFALSE 62846
// exit ;
62844: GO 63419
// for i = 1 to mc_bases do
62846: LD_ADDR_VAR 0 2
62850: PUSH
62851: DOUBLE
62852: LD_INT 1
62854: DEC
62855: ST_TO_ADDR
62856: LD_EXP 52
62860: PUSH
62861: FOR_TO
62862: IFFALSE 63410
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
62864: LD_ADDR_VAR 0 5
62868: PUSH
62869: LD_EXP 52
62873: PUSH
62874: LD_VAR 0 2
62878: ARRAY
62879: PUSH
62880: LD_EXP 81
62884: PUSH
62885: LD_VAR 0 2
62889: ARRAY
62890: UNION
62891: PPUSH
62892: LD_INT 21
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: LD_INT 54
62910: PUSH
62911: EMPTY
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 3
62920: PUSH
62921: LD_INT 24
62923: PUSH
62924: LD_INT 800
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PPUSH
62944: CALL_OW 72
62948: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
62949: LD_ADDR_VAR 0 6
62953: PUSH
62954: LD_EXP 52
62958: PUSH
62959: LD_VAR 0 2
62963: ARRAY
62964: PPUSH
62965: LD_INT 21
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 3
62980: PUSH
62981: LD_INT 54
62983: PUSH
62984: EMPTY
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: PUSH
62994: LD_INT 24
62996: PUSH
62997: LD_INT 250
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: LIST
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PPUSH
63017: CALL_OW 72
63021: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
63022: LD_ADDR_VAR 0 7
63026: PUSH
63027: LD_VAR 0 5
63031: PUSH
63032: LD_VAR 0 6
63036: DIFF
63037: ST_TO_ADDR
// if not need_heal_1 then
63038: LD_VAR 0 6
63042: NOT
63043: IFFALSE 63076
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
63045: LD_ADDR_EXP 55
63049: PUSH
63050: LD_EXP 55
63054: PPUSH
63055: LD_VAR 0 2
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PPUSH
63067: EMPTY
63068: PPUSH
63069: CALL 18479 0 3
63073: ST_TO_ADDR
63074: GO 63146
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
63076: LD_ADDR_EXP 55
63080: PUSH
63081: LD_EXP 55
63085: PPUSH
63086: LD_VAR 0 2
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PPUSH
63098: LD_EXP 55
63102: PUSH
63103: LD_VAR 0 2
63107: ARRAY
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: PPUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 24
63118: PUSH
63119: LD_INT 1000
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PPUSH
63130: CALL_OW 72
63134: PUSH
63135: LD_VAR 0 6
63139: UNION
63140: PPUSH
63141: CALL 18479 0 3
63145: ST_TO_ADDR
// if not need_heal_2 then
63146: LD_VAR 0 7
63150: NOT
63151: IFFALSE 63184
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
63153: LD_ADDR_EXP 55
63157: PUSH
63158: LD_EXP 55
63162: PPUSH
63163: LD_VAR 0 2
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PPUSH
63175: EMPTY
63176: PPUSH
63177: CALL 18479 0 3
63181: ST_TO_ADDR
63182: GO 63216
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
63184: LD_ADDR_EXP 55
63188: PUSH
63189: LD_EXP 55
63193: PPUSH
63194: LD_VAR 0 2
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PPUSH
63206: LD_VAR 0 7
63210: PPUSH
63211: CALL 18479 0 3
63215: ST_TO_ADDR
// if need_heal_2 then
63216: LD_VAR 0 7
63220: IFFALSE 63392
// for j in need_heal_2 do
63222: LD_ADDR_VAR 0 3
63226: PUSH
63227: LD_VAR 0 7
63231: PUSH
63232: FOR_IN
63233: IFFALSE 63390
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
63235: LD_ADDR_VAR 0 5
63239: PUSH
63240: LD_EXP 52
63244: PUSH
63245: LD_VAR 0 2
63249: ARRAY
63250: PPUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 30
63256: PUSH
63257: LD_INT 6
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 30
63266: PUSH
63267: LD_INT 7
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 30
63276: PUSH
63277: LD_INT 8
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 30
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 30
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 25
63306: PUSH
63307: LD_INT 4
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: PPUSH
63323: CALL_OW 72
63327: ST_TO_ADDR
// if tmp then
63328: LD_VAR 0 5
63332: IFFALSE 63388
// begin k := NearestUnitToUnit ( tmp , j ) ;
63334: LD_ADDR_VAR 0 4
63338: PUSH
63339: LD_VAR 0 5
63343: PPUSH
63344: LD_VAR 0 3
63348: PPUSH
63349: CALL_OW 74
63353: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
63354: LD_VAR 0 3
63358: PPUSH
63359: LD_VAR 0 4
63363: PPUSH
63364: CALL_OW 296
63368: PUSH
63369: LD_INT 7
63371: GREATER
63372: IFFALSE 63388
// ComMoveUnit ( j , k ) ;
63374: LD_VAR 0 3
63378: PPUSH
63379: LD_VAR 0 4
63383: PPUSH
63384: CALL_OW 112
// end ; end ;
63388: GO 63232
63390: POP
63391: POP
// if not need_heal_1 and not need_heal_2 then
63392: LD_VAR 0 6
63396: NOT
63397: PUSH
63398: LD_VAR 0 7
63402: NOT
63403: AND
63404: IFFALSE 63408
// continue ;
63406: GO 62861
// end ;
63408: GO 62861
63410: POP
63411: POP
// RaiseSailEvent ( 102 ) ;
63412: LD_INT 102
63414: PPUSH
63415: CALL_OW 427
// end ;
63419: LD_VAR 0 1
63423: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
63424: LD_INT 0
63426: PPUSH
63427: PPUSH
63428: PPUSH
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
// if not mc_bases then
63434: LD_EXP 52
63438: NOT
63439: IFFALSE 63443
// exit ;
63441: GO 64283
// for i = 1 to mc_bases do
63443: LD_ADDR_VAR 0 2
63447: PUSH
63448: DOUBLE
63449: LD_INT 1
63451: DEC
63452: ST_TO_ADDR
63453: LD_EXP 52
63457: PUSH
63458: FOR_TO
63459: IFFALSE 64281
// begin if not mc_building_need_repair [ i ] then
63461: LD_EXP 53
63465: PUSH
63466: LD_VAR 0 2
63470: ARRAY
63471: NOT
63472: IFFALSE 63646
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
63474: LD_ADDR_VAR 0 6
63478: PUSH
63479: LD_EXP 71
63483: PUSH
63484: LD_VAR 0 2
63488: ARRAY
63489: PPUSH
63490: LD_INT 3
63492: PUSH
63493: LD_INT 24
63495: PUSH
63496: LD_INT 1000
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: LD_INT 34
63512: PUSH
63513: LD_INT 13
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 34
63522: PUSH
63523: LD_INT 52
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PPUSH
63539: CALL_OW 72
63543: ST_TO_ADDR
// if cranes then
63544: LD_VAR 0 6
63548: IFFALSE 63610
// for j in cranes do
63550: LD_ADDR_VAR 0 3
63554: PUSH
63555: LD_VAR 0 6
63559: PUSH
63560: FOR_IN
63561: IFFALSE 63608
// if not IsInArea ( j , mc_parking [ i ] ) then
63563: LD_VAR 0 3
63567: PPUSH
63568: LD_EXP 76
63572: PUSH
63573: LD_VAR 0 2
63577: ARRAY
63578: PPUSH
63579: CALL_OW 308
63583: NOT
63584: IFFALSE 63606
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63586: LD_VAR 0 3
63590: PPUSH
63591: LD_EXP 76
63595: PUSH
63596: LD_VAR 0 2
63600: ARRAY
63601: PPUSH
63602: CALL_OW 113
63606: GO 63560
63608: POP
63609: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
63610: LD_ADDR_EXP 54
63614: PUSH
63615: LD_EXP 54
63619: PPUSH
63620: LD_VAR 0 2
63624: PPUSH
63625: EMPTY
63626: PPUSH
63627: CALL_OW 1
63631: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
63632: LD_VAR 0 2
63636: PPUSH
63637: LD_INT 101
63639: PPUSH
63640: CALL 58536 0 2
// continue ;
63644: GO 63458
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
63646: LD_ADDR_EXP 58
63650: PUSH
63651: LD_EXP 58
63655: PPUSH
63656: LD_VAR 0 2
63660: PPUSH
63661: EMPTY
63662: PPUSH
63663: CALL_OW 1
63667: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63668: LD_VAR 0 2
63672: PPUSH
63673: LD_INT 103
63675: PPUSH
63676: CALL 58536 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
63680: LD_ADDR_VAR 0 5
63684: PUSH
63685: LD_EXP 52
63689: PUSH
63690: LD_VAR 0 2
63694: ARRAY
63695: PUSH
63696: LD_EXP 81
63700: PUSH
63701: LD_VAR 0 2
63705: ARRAY
63706: UNION
63707: PPUSH
63708: LD_INT 2
63710: PUSH
63711: LD_INT 25
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 25
63723: PUSH
63724: LD_INT 16
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: PPUSH
63739: CALL_OW 72
63743: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
63744: LD_ADDR_VAR 0 6
63748: PUSH
63749: LD_EXP 71
63753: PUSH
63754: LD_VAR 0 2
63758: ARRAY
63759: PPUSH
63760: LD_INT 2
63762: PUSH
63763: LD_INT 34
63765: PUSH
63766: LD_INT 13
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 34
63775: PUSH
63776: LD_INT 52
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: PPUSH
63788: CALL_OW 72
63792: ST_TO_ADDR
// if cranes then
63793: LD_VAR 0 6
63797: IFFALSE 63933
// begin for j in cranes do
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: LD_VAR 0 6
63808: PUSH
63809: FOR_IN
63810: IFFALSE 63931
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
63812: LD_VAR 0 3
63816: PPUSH
63817: CALL_OW 256
63821: PUSH
63822: LD_INT 500
63824: GREATEREQUAL
63825: PUSH
63826: LD_VAR 0 3
63830: PPUSH
63831: CALL_OW 314
63835: NOT
63836: AND
63837: IFFALSE 63871
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
63839: LD_VAR 0 3
63843: PPUSH
63844: LD_EXP 53
63848: PUSH
63849: LD_VAR 0 2
63853: ARRAY
63854: PPUSH
63855: LD_VAR 0 3
63859: PPUSH
63860: CALL_OW 74
63864: PPUSH
63865: CALL_OW 130
63869: GO 63929
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
63871: LD_VAR 0 3
63875: PPUSH
63876: CALL_OW 256
63880: PUSH
63881: LD_INT 500
63883: LESS
63884: PUSH
63885: LD_VAR 0 3
63889: PPUSH
63890: LD_EXP 76
63894: PUSH
63895: LD_VAR 0 2
63899: ARRAY
63900: PPUSH
63901: CALL_OW 308
63905: NOT
63906: AND
63907: IFFALSE 63929
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63909: LD_VAR 0 3
63913: PPUSH
63914: LD_EXP 76
63918: PUSH
63919: LD_VAR 0 2
63923: ARRAY
63924: PPUSH
63925: CALL_OW 113
63929: GO 63809
63931: POP
63932: POP
// end ; if not tmp then
63933: LD_VAR 0 5
63937: NOT
63938: IFFALSE 63942
// continue ;
63940: GO 63458
// for j in tmp do
63942: LD_ADDR_VAR 0 3
63946: PUSH
63947: LD_VAR 0 5
63951: PUSH
63952: FOR_IN
63953: IFFALSE 64277
// begin if mc_need_heal [ i ] then
63955: LD_EXP 55
63959: PUSH
63960: LD_VAR 0 2
63964: ARRAY
63965: IFFALSE 64013
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
63967: LD_VAR 0 3
63971: PUSH
63972: LD_EXP 55
63976: PUSH
63977: LD_VAR 0 2
63981: ARRAY
63982: PUSH
63983: LD_INT 1
63985: ARRAY
63986: IN
63987: PUSH
63988: LD_VAR 0 3
63992: PUSH
63993: LD_EXP 55
63997: PUSH
63998: LD_VAR 0 2
64002: ARRAY
64003: PUSH
64004: LD_INT 2
64006: ARRAY
64007: IN
64008: OR
64009: IFFALSE 64013
// continue ;
64011: GO 63952
// if IsInUnit ( j ) then
64013: LD_VAR 0 3
64017: PPUSH
64018: CALL_OW 310
64022: IFFALSE 64033
// ComExitBuilding ( j ) ;
64024: LD_VAR 0 3
64028: PPUSH
64029: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
64033: LD_VAR 0 3
64037: PUSH
64038: LD_EXP 54
64042: PUSH
64043: LD_VAR 0 2
64047: ARRAY
64048: IN
64049: NOT
64050: IFFALSE 64108
// begin SetTag ( j , 101 ) ;
64052: LD_VAR 0 3
64056: PPUSH
64057: LD_INT 101
64059: PPUSH
64060: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
64064: LD_ADDR_EXP 54
64068: PUSH
64069: LD_EXP 54
64073: PPUSH
64074: LD_VAR 0 2
64078: PUSH
64079: LD_EXP 54
64083: PUSH
64084: LD_VAR 0 2
64088: ARRAY
64089: PUSH
64090: LD_INT 1
64092: PLUS
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PPUSH
64098: LD_VAR 0 3
64102: PPUSH
64103: CALL 18479 0 3
64107: ST_TO_ADDR
// end ; wait ( 1 ) ;
64108: LD_INT 1
64110: PPUSH
64111: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
64115: LD_ADDR_VAR 0 7
64119: PUSH
64120: LD_EXP 53
64124: PUSH
64125: LD_VAR 0 2
64129: ARRAY
64130: ST_TO_ADDR
// if mc_scan [ i ] then
64131: LD_EXP 75
64135: PUSH
64136: LD_VAR 0 2
64140: ARRAY
64141: IFFALSE 64210
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
64143: LD_ADDR_VAR 0 7
64147: PUSH
64148: LD_EXP 53
64152: PUSH
64153: LD_VAR 0 2
64157: ARRAY
64158: PPUSH
64159: LD_INT 3
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 30
64167: PUSH
64168: LD_INT 32
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 30
64177: PUSH
64178: LD_INT 33
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 30
64187: PUSH
64188: LD_INT 31
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PPUSH
64205: CALL_OW 72
64209: ST_TO_ADDR
// if not to_repair_tmp then
64210: LD_VAR 0 7
64214: NOT
64215: IFFALSE 64219
// continue ;
64217: GO 63952
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
64219: LD_ADDR_VAR 0 8
64223: PUSH
64224: LD_VAR 0 7
64228: PPUSH
64229: LD_VAR 0 3
64233: PPUSH
64234: CALL_OW 74
64238: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
64239: LD_VAR 0 8
64243: PPUSH
64244: LD_INT 14
64246: PPUSH
64247: CALL 21072 0 2
64251: PUSH
64252: LD_INT 4
64254: ARRAY
64255: PUSH
64256: LD_INT 5
64258: LESS
64259: IFFALSE 64275
// ComRepairBuilding ( j , to_repair ) ;
64261: LD_VAR 0 3
64265: PPUSH
64266: LD_VAR 0 8
64270: PPUSH
64271: CALL_OW 130
// end ;
64275: GO 63952
64277: POP
64278: POP
// end ;
64279: GO 63458
64281: POP
64282: POP
// end ;
64283: LD_VAR 0 1
64287: RET
// export function MC_Heal ; var i , j , tmp ; begin
64288: LD_INT 0
64290: PPUSH
64291: PPUSH
64292: PPUSH
64293: PPUSH
// if not mc_bases then
64294: LD_EXP 52
64298: NOT
64299: IFFALSE 64303
// exit ;
64301: GO 64705
// for i = 1 to mc_bases do
64303: LD_ADDR_VAR 0 2
64307: PUSH
64308: DOUBLE
64309: LD_INT 1
64311: DEC
64312: ST_TO_ADDR
64313: LD_EXP 52
64317: PUSH
64318: FOR_TO
64319: IFFALSE 64703
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
64321: LD_EXP 55
64325: PUSH
64326: LD_VAR 0 2
64330: ARRAY
64331: PUSH
64332: LD_INT 1
64334: ARRAY
64335: NOT
64336: PUSH
64337: LD_EXP 55
64341: PUSH
64342: LD_VAR 0 2
64346: ARRAY
64347: PUSH
64348: LD_INT 2
64350: ARRAY
64351: NOT
64352: AND
64353: IFFALSE 64391
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
64355: LD_ADDR_EXP 56
64359: PUSH
64360: LD_EXP 56
64364: PPUSH
64365: LD_VAR 0 2
64369: PPUSH
64370: EMPTY
64371: PPUSH
64372: CALL_OW 1
64376: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
64377: LD_VAR 0 2
64381: PPUSH
64382: LD_INT 102
64384: PPUSH
64385: CALL 58536 0 2
// continue ;
64389: GO 64318
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
64391: LD_ADDR_VAR 0 4
64395: PUSH
64396: LD_EXP 52
64400: PUSH
64401: LD_VAR 0 2
64405: ARRAY
64406: PPUSH
64407: LD_INT 25
64409: PUSH
64410: LD_INT 4
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PPUSH
64417: CALL_OW 72
64421: ST_TO_ADDR
// if not tmp then
64422: LD_VAR 0 4
64426: NOT
64427: IFFALSE 64431
// continue ;
64429: GO 64318
// if mc_taming [ i ] then
64431: LD_EXP 83
64435: PUSH
64436: LD_VAR 0 2
64440: ARRAY
64441: IFFALSE 64465
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64443: LD_ADDR_EXP 83
64447: PUSH
64448: LD_EXP 83
64452: PPUSH
64453: LD_VAR 0 2
64457: PPUSH
64458: EMPTY
64459: PPUSH
64460: CALL_OW 1
64464: ST_TO_ADDR
// for j in tmp do
64465: LD_ADDR_VAR 0 3
64469: PUSH
64470: LD_VAR 0 4
64474: PUSH
64475: FOR_IN
64476: IFFALSE 64699
// begin if IsInUnit ( j ) then
64478: LD_VAR 0 3
64482: PPUSH
64483: CALL_OW 310
64487: IFFALSE 64498
// ComExitBuilding ( j ) ;
64489: LD_VAR 0 3
64493: PPUSH
64494: CALL_OW 122
// if not j in mc_healers [ i ] then
64498: LD_VAR 0 3
64502: PUSH
64503: LD_EXP 56
64507: PUSH
64508: LD_VAR 0 2
64512: ARRAY
64513: IN
64514: NOT
64515: IFFALSE 64561
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
64517: LD_ADDR_EXP 56
64521: PUSH
64522: LD_EXP 56
64526: PPUSH
64527: LD_VAR 0 2
64531: PUSH
64532: LD_EXP 56
64536: PUSH
64537: LD_VAR 0 2
64541: ARRAY
64542: PUSH
64543: LD_INT 1
64545: PLUS
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PPUSH
64551: LD_VAR 0 3
64555: PPUSH
64556: CALL 18479 0 3
64560: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
64561: LD_VAR 0 3
64565: PPUSH
64566: CALL_OW 110
64570: PUSH
64571: LD_INT 102
64573: NONEQUAL
64574: IFFALSE 64588
// SetTag ( j , 102 ) ;
64576: LD_VAR 0 3
64580: PPUSH
64581: LD_INT 102
64583: PPUSH
64584: CALL_OW 109
// Wait ( 3 ) ;
64588: LD_INT 3
64590: PPUSH
64591: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
64595: LD_EXP 55
64599: PUSH
64600: LD_VAR 0 2
64604: ARRAY
64605: PUSH
64606: LD_INT 1
64608: ARRAY
64609: IFFALSE 64641
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
64611: LD_VAR 0 3
64615: PPUSH
64616: LD_EXP 55
64620: PUSH
64621: LD_VAR 0 2
64625: ARRAY
64626: PUSH
64627: LD_INT 1
64629: ARRAY
64630: PUSH
64631: LD_INT 1
64633: ARRAY
64634: PPUSH
64635: CALL_OW 128
64639: GO 64697
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
64641: LD_VAR 0 3
64645: PPUSH
64646: CALL_OW 314
64650: NOT
64651: PUSH
64652: LD_EXP 55
64656: PUSH
64657: LD_VAR 0 2
64661: ARRAY
64662: PUSH
64663: LD_INT 2
64665: ARRAY
64666: AND
64667: IFFALSE 64697
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
64669: LD_VAR 0 3
64673: PPUSH
64674: LD_EXP 55
64678: PUSH
64679: LD_VAR 0 2
64683: ARRAY
64684: PUSH
64685: LD_INT 2
64687: ARRAY
64688: PUSH
64689: LD_INT 1
64691: ARRAY
64692: PPUSH
64693: CALL_OW 128
// end ;
64697: GO 64475
64699: POP
64700: POP
// end ;
64701: GO 64318
64703: POP
64704: POP
// end ;
64705: LD_VAR 0 1
64709: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
64710: LD_INT 0
64712: PPUSH
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
// if not mc_bases then
64717: LD_EXP 52
64721: NOT
64722: IFFALSE 64726
// exit ;
64724: GO 65869
// for i = 1 to mc_bases do
64726: LD_ADDR_VAR 0 2
64730: PUSH
64731: DOUBLE
64732: LD_INT 1
64734: DEC
64735: ST_TO_ADDR
64736: LD_EXP 52
64740: PUSH
64741: FOR_TO
64742: IFFALSE 65867
// begin if mc_scan [ i ] then
64744: LD_EXP 75
64748: PUSH
64749: LD_VAR 0 2
64753: ARRAY
64754: IFFALSE 64758
// continue ;
64756: GO 64741
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
64758: LD_EXP 57
64762: PUSH
64763: LD_VAR 0 2
64767: ARRAY
64768: NOT
64769: PUSH
64770: LD_EXP 59
64774: PUSH
64775: LD_VAR 0 2
64779: ARRAY
64780: NOT
64781: AND
64782: PUSH
64783: LD_EXP 58
64787: PUSH
64788: LD_VAR 0 2
64792: ARRAY
64793: AND
64794: IFFALSE 64832
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
64796: LD_ADDR_EXP 58
64800: PUSH
64801: LD_EXP 58
64805: PPUSH
64806: LD_VAR 0 2
64810: PPUSH
64811: EMPTY
64812: PPUSH
64813: CALL_OW 1
64817: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64818: LD_VAR 0 2
64822: PPUSH
64823: LD_INT 103
64825: PPUSH
64826: CALL 58536 0 2
// continue ;
64830: GO 64741
// end ; if mc_construct_list [ i ] then
64832: LD_EXP 59
64836: PUSH
64837: LD_VAR 0 2
64841: ARRAY
64842: IFFALSE 65062
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64844: LD_ADDR_VAR 0 4
64848: PUSH
64849: LD_EXP 52
64853: PUSH
64854: LD_VAR 0 2
64858: ARRAY
64859: PPUSH
64860: LD_INT 25
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PPUSH
64870: CALL_OW 72
64874: PUSH
64875: LD_EXP 54
64879: PUSH
64880: LD_VAR 0 2
64884: ARRAY
64885: DIFF
64886: ST_TO_ADDR
// if not tmp then
64887: LD_VAR 0 4
64891: NOT
64892: IFFALSE 64896
// continue ;
64894: GO 64741
// for j in tmp do
64896: LD_ADDR_VAR 0 3
64900: PUSH
64901: LD_VAR 0 4
64905: PUSH
64906: FOR_IN
64907: IFFALSE 65058
// begin if not mc_builders [ i ] then
64909: LD_EXP 58
64913: PUSH
64914: LD_VAR 0 2
64918: ARRAY
64919: NOT
64920: IFFALSE 64978
// begin SetTag ( j , 103 ) ;
64922: LD_VAR 0 3
64926: PPUSH
64927: LD_INT 103
64929: PPUSH
64930: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64934: LD_ADDR_EXP 58
64938: PUSH
64939: LD_EXP 58
64943: PPUSH
64944: LD_VAR 0 2
64948: PUSH
64949: LD_EXP 58
64953: PUSH
64954: LD_VAR 0 2
64958: ARRAY
64959: PUSH
64960: LD_INT 1
64962: PLUS
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PPUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: CALL 18479 0 3
64977: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64978: LD_VAR 0 3
64982: PPUSH
64983: CALL_OW 310
64987: IFFALSE 64998
// ComExitBuilding ( j ) ;
64989: LD_VAR 0 3
64993: PPUSH
64994: CALL_OW 122
// wait ( 3 ) ;
64998: LD_INT 3
65000: PPUSH
65001: CALL_OW 67
// if not mc_construct_list [ i ] then
65005: LD_EXP 59
65009: PUSH
65010: LD_VAR 0 2
65014: ARRAY
65015: NOT
65016: IFFALSE 65020
// break ;
65018: GO 65058
// if not HasTask ( j ) then
65020: LD_VAR 0 3
65024: PPUSH
65025: CALL_OW 314
65029: NOT
65030: IFFALSE 65056
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
65032: LD_VAR 0 3
65036: PPUSH
65037: LD_EXP 59
65041: PUSH
65042: LD_VAR 0 2
65046: ARRAY
65047: PUSH
65048: LD_INT 1
65050: ARRAY
65051: PPUSH
65052: CALL 21330 0 2
// end ;
65056: GO 64906
65058: POP
65059: POP
// end else
65060: GO 65865
// if mc_build_list [ i ] then
65062: LD_EXP 57
65066: PUSH
65067: LD_VAR 0 2
65071: ARRAY
65072: IFFALSE 65865
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65074: LD_ADDR_VAR 0 5
65078: PUSH
65079: LD_EXP 52
65083: PUSH
65084: LD_VAR 0 2
65088: ARRAY
65089: PPUSH
65090: LD_INT 2
65092: PUSH
65093: LD_INT 30
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 30
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: PPUSH
65118: CALL_OW 72
65122: ST_TO_ADDR
// if depot then
65123: LD_VAR 0 5
65127: IFFALSE 65145
// depot := depot [ 1 ] else
65129: LD_ADDR_VAR 0 5
65133: PUSH
65134: LD_VAR 0 5
65138: PUSH
65139: LD_INT 1
65141: ARRAY
65142: ST_TO_ADDR
65143: GO 65153
// depot := 0 ;
65145: LD_ADDR_VAR 0 5
65149: PUSH
65150: LD_INT 0
65152: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
65153: LD_EXP 57
65157: PUSH
65158: LD_VAR 0 2
65162: ARRAY
65163: PUSH
65164: LD_INT 1
65166: ARRAY
65167: PUSH
65168: LD_INT 1
65170: ARRAY
65171: PPUSH
65172: CALL 21160 0 1
65176: PUSH
65177: LD_EXP 52
65181: PUSH
65182: LD_VAR 0 2
65186: ARRAY
65187: PPUSH
65188: LD_INT 2
65190: PUSH
65191: LD_INT 30
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 30
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: PPUSH
65216: CALL_OW 72
65220: NOT
65221: AND
65222: IFFALSE 65327
// begin for j = 1 to mc_build_list [ i ] do
65224: LD_ADDR_VAR 0 3
65228: PUSH
65229: DOUBLE
65230: LD_INT 1
65232: DEC
65233: ST_TO_ADDR
65234: LD_EXP 57
65238: PUSH
65239: LD_VAR 0 2
65243: ARRAY
65244: PUSH
65245: FOR_TO
65246: IFFALSE 65325
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
65248: LD_EXP 57
65252: PUSH
65253: LD_VAR 0 2
65257: ARRAY
65258: PUSH
65259: LD_VAR 0 3
65263: ARRAY
65264: PUSH
65265: LD_INT 1
65267: ARRAY
65268: PUSH
65269: LD_INT 2
65271: EQUAL
65272: IFFALSE 65323
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
65274: LD_ADDR_EXP 57
65278: PUSH
65279: LD_EXP 57
65283: PPUSH
65284: LD_VAR 0 2
65288: PPUSH
65289: LD_EXP 57
65293: PUSH
65294: LD_VAR 0 2
65298: ARRAY
65299: PPUSH
65300: LD_VAR 0 3
65304: PPUSH
65305: LD_INT 1
65307: PPUSH
65308: LD_INT 0
65310: PPUSH
65311: CALL 17897 0 4
65315: PPUSH
65316: CALL_OW 1
65320: ST_TO_ADDR
// break ;
65321: GO 65325
// end ;
65323: GO 65245
65325: POP
65326: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
65327: LD_EXP 57
65331: PUSH
65332: LD_VAR 0 2
65336: ARRAY
65337: PUSH
65338: LD_INT 1
65340: ARRAY
65341: PUSH
65342: LD_INT 1
65344: ARRAY
65345: PUSH
65346: LD_INT 0
65348: EQUAL
65349: PUSH
65350: LD_VAR 0 5
65354: PUSH
65355: LD_VAR 0 5
65359: PPUSH
65360: LD_EXP 57
65364: PUSH
65365: LD_VAR 0 2
65369: ARRAY
65370: PUSH
65371: LD_INT 1
65373: ARRAY
65374: PUSH
65375: LD_INT 1
65377: ARRAY
65378: PPUSH
65379: LD_EXP 57
65383: PUSH
65384: LD_VAR 0 2
65388: ARRAY
65389: PUSH
65390: LD_INT 1
65392: ARRAY
65393: PUSH
65394: LD_INT 2
65396: ARRAY
65397: PPUSH
65398: LD_EXP 57
65402: PUSH
65403: LD_VAR 0 2
65407: ARRAY
65408: PUSH
65409: LD_INT 1
65411: ARRAY
65412: PUSH
65413: LD_INT 3
65415: ARRAY
65416: PPUSH
65417: LD_EXP 57
65421: PUSH
65422: LD_VAR 0 2
65426: ARRAY
65427: PUSH
65428: LD_INT 1
65430: ARRAY
65431: PUSH
65432: LD_INT 4
65434: ARRAY
65435: PPUSH
65436: CALL 25894 0 5
65440: AND
65441: OR
65442: IFFALSE 65723
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65444: LD_ADDR_VAR 0 4
65448: PUSH
65449: LD_EXP 52
65453: PUSH
65454: LD_VAR 0 2
65458: ARRAY
65459: PPUSH
65460: LD_INT 25
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PPUSH
65470: CALL_OW 72
65474: PUSH
65475: LD_EXP 54
65479: PUSH
65480: LD_VAR 0 2
65484: ARRAY
65485: DIFF
65486: ST_TO_ADDR
// if not tmp then
65487: LD_VAR 0 4
65491: NOT
65492: IFFALSE 65496
// continue ;
65494: GO 64741
// for j in tmp do
65496: LD_ADDR_VAR 0 3
65500: PUSH
65501: LD_VAR 0 4
65505: PUSH
65506: FOR_IN
65507: IFFALSE 65719
// begin if not mc_builders [ i ] then
65509: LD_EXP 58
65513: PUSH
65514: LD_VAR 0 2
65518: ARRAY
65519: NOT
65520: IFFALSE 65578
// begin SetTag ( j , 103 ) ;
65522: LD_VAR 0 3
65526: PPUSH
65527: LD_INT 103
65529: PPUSH
65530: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65534: LD_ADDR_EXP 58
65538: PUSH
65539: LD_EXP 58
65543: PPUSH
65544: LD_VAR 0 2
65548: PUSH
65549: LD_EXP 58
65553: PUSH
65554: LD_VAR 0 2
65558: ARRAY
65559: PUSH
65560: LD_INT 1
65562: PLUS
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PPUSH
65568: LD_VAR 0 3
65572: PPUSH
65573: CALL 18479 0 3
65577: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65578: LD_VAR 0 3
65582: PPUSH
65583: CALL_OW 310
65587: IFFALSE 65598
// ComExitBuilding ( j ) ;
65589: LD_VAR 0 3
65593: PPUSH
65594: CALL_OW 122
// wait ( 3 ) ;
65598: LD_INT 3
65600: PPUSH
65601: CALL_OW 67
// if not mc_build_list [ i ] then
65605: LD_EXP 57
65609: PUSH
65610: LD_VAR 0 2
65614: ARRAY
65615: NOT
65616: IFFALSE 65620
// break ;
65618: GO 65719
// if not HasTask ( j ) then
65620: LD_VAR 0 3
65624: PPUSH
65625: CALL_OW 314
65629: NOT
65630: IFFALSE 65717
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65632: LD_VAR 0 3
65636: PPUSH
65637: LD_EXP 57
65641: PUSH
65642: LD_VAR 0 2
65646: ARRAY
65647: PUSH
65648: LD_INT 1
65650: ARRAY
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PPUSH
65656: LD_EXP 57
65660: PUSH
65661: LD_VAR 0 2
65665: ARRAY
65666: PUSH
65667: LD_INT 1
65669: ARRAY
65670: PUSH
65671: LD_INT 2
65673: ARRAY
65674: PPUSH
65675: LD_EXP 57
65679: PUSH
65680: LD_VAR 0 2
65684: ARRAY
65685: PUSH
65686: LD_INT 1
65688: ARRAY
65689: PUSH
65690: LD_INT 3
65692: ARRAY
65693: PPUSH
65694: LD_EXP 57
65698: PUSH
65699: LD_VAR 0 2
65703: ARRAY
65704: PUSH
65705: LD_INT 1
65707: ARRAY
65708: PUSH
65709: LD_INT 4
65711: ARRAY
65712: PPUSH
65713: CALL_OW 145
// end ;
65717: GO 65506
65719: POP
65720: POP
// end else
65721: GO 65865
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
65723: LD_EXP 52
65727: PUSH
65728: LD_VAR 0 2
65732: ARRAY
65733: PPUSH
65734: LD_EXP 57
65738: PUSH
65739: LD_VAR 0 2
65743: ARRAY
65744: PUSH
65745: LD_INT 1
65747: ARRAY
65748: PUSH
65749: LD_INT 1
65751: ARRAY
65752: PPUSH
65753: LD_EXP 57
65757: PUSH
65758: LD_VAR 0 2
65762: ARRAY
65763: PUSH
65764: LD_INT 1
65766: ARRAY
65767: PUSH
65768: LD_INT 2
65770: ARRAY
65771: PPUSH
65772: LD_EXP 57
65776: PUSH
65777: LD_VAR 0 2
65781: ARRAY
65782: PUSH
65783: LD_INT 1
65785: ARRAY
65786: PUSH
65787: LD_INT 3
65789: ARRAY
65790: PPUSH
65791: LD_EXP 57
65795: PUSH
65796: LD_VAR 0 2
65800: ARRAY
65801: PUSH
65802: LD_INT 1
65804: ARRAY
65805: PUSH
65806: LD_INT 4
65808: ARRAY
65809: PPUSH
65810: CALL 25230 0 5
65814: NOT
65815: IFFALSE 65865
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65817: LD_ADDR_EXP 57
65821: PUSH
65822: LD_EXP 57
65826: PPUSH
65827: LD_VAR 0 2
65831: PPUSH
65832: LD_EXP 57
65836: PUSH
65837: LD_VAR 0 2
65841: ARRAY
65842: PPUSH
65843: LD_INT 1
65845: PPUSH
65846: LD_INT 1
65848: NEG
65849: PPUSH
65850: LD_INT 0
65852: PPUSH
65853: CALL 17897 0 4
65857: PPUSH
65858: CALL_OW 1
65862: ST_TO_ADDR
// continue ;
65863: GO 64741
// end ; end ; end ;
65865: GO 64741
65867: POP
65868: POP
// end ;
65869: LD_VAR 0 1
65873: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65874: LD_INT 0
65876: PPUSH
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
// if not mc_bases then
65882: LD_EXP 52
65886: NOT
65887: IFFALSE 65891
// exit ;
65889: GO 66318
// for i = 1 to mc_bases do
65891: LD_ADDR_VAR 0 2
65895: PUSH
65896: DOUBLE
65897: LD_INT 1
65899: DEC
65900: ST_TO_ADDR
65901: LD_EXP 52
65905: PUSH
65906: FOR_TO
65907: IFFALSE 66316
// begin tmp := mc_build_upgrade [ i ] ;
65909: LD_ADDR_VAR 0 4
65913: PUSH
65914: LD_EXP 84
65918: PUSH
65919: LD_VAR 0 2
65923: ARRAY
65924: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
65925: LD_ADDR_VAR 0 6
65929: PUSH
65930: LD_EXP 85
65934: PUSH
65935: LD_VAR 0 2
65939: ARRAY
65940: PPUSH
65941: LD_INT 2
65943: PUSH
65944: LD_INT 30
65946: PUSH
65947: LD_INT 6
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 30
65956: PUSH
65957: LD_INT 7
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: PPUSH
65969: CALL_OW 72
65973: ST_TO_ADDR
// if not tmp and not lab then
65974: LD_VAR 0 4
65978: NOT
65979: PUSH
65980: LD_VAR 0 6
65984: NOT
65985: AND
65986: IFFALSE 65990
// continue ;
65988: GO 65906
// if tmp then
65990: LD_VAR 0 4
65994: IFFALSE 66114
// for j in tmp do
65996: LD_ADDR_VAR 0 3
66000: PUSH
66001: LD_VAR 0 4
66005: PUSH
66006: FOR_IN
66007: IFFALSE 66112
// begin if UpgradeCost ( j ) then
66009: LD_VAR 0 3
66013: PPUSH
66014: CALL 24890 0 1
66018: IFFALSE 66110
// begin ComUpgrade ( j ) ;
66020: LD_VAR 0 3
66024: PPUSH
66025: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
66029: LD_ADDR_EXP 84
66033: PUSH
66034: LD_EXP 84
66038: PPUSH
66039: LD_VAR 0 2
66043: PPUSH
66044: LD_EXP 84
66048: PUSH
66049: LD_VAR 0 2
66053: ARRAY
66054: PUSH
66055: LD_VAR 0 3
66059: DIFF
66060: PPUSH
66061: CALL_OW 1
66065: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66066: LD_ADDR_EXP 59
66070: PUSH
66071: LD_EXP 59
66075: PPUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_EXP 59
66085: PUSH
66086: LD_VAR 0 2
66090: ARRAY
66091: PUSH
66092: LD_INT 1
66094: PLUS
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PPUSH
66100: LD_VAR 0 3
66104: PPUSH
66105: CALL 18479 0 3
66109: ST_TO_ADDR
// end ; end ;
66110: GO 66006
66112: POP
66113: POP
// if not lab or not mc_lab_upgrade [ i ] then
66114: LD_VAR 0 6
66118: NOT
66119: PUSH
66120: LD_EXP 86
66124: PUSH
66125: LD_VAR 0 2
66129: ARRAY
66130: NOT
66131: OR
66132: IFFALSE 66136
// continue ;
66134: GO 65906
// for j in lab do
66136: LD_ADDR_VAR 0 3
66140: PUSH
66141: LD_VAR 0 6
66145: PUSH
66146: FOR_IN
66147: IFFALSE 66312
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
66149: LD_VAR 0 3
66153: PPUSH
66154: CALL_OW 266
66158: PUSH
66159: LD_INT 6
66161: PUSH
66162: LD_INT 7
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: IN
66169: PUSH
66170: LD_VAR 0 3
66174: PPUSH
66175: CALL_OW 461
66179: PUSH
66180: LD_INT 1
66182: NONEQUAL
66183: AND
66184: IFFALSE 66310
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
66186: LD_VAR 0 3
66190: PPUSH
66191: LD_EXP 86
66195: PUSH
66196: LD_VAR 0 2
66200: ARRAY
66201: PUSH
66202: LD_INT 1
66204: ARRAY
66205: PPUSH
66206: CALL 25095 0 2
66210: IFFALSE 66310
// begin ComCancel ( j ) ;
66212: LD_VAR 0 3
66216: PPUSH
66217: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
66221: LD_VAR 0 3
66225: PPUSH
66226: LD_EXP 86
66230: PUSH
66231: LD_VAR 0 2
66235: ARRAY
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PPUSH
66241: CALL_OW 207
// if not j in mc_construct_list [ i ] then
66245: LD_VAR 0 3
66249: PUSH
66250: LD_EXP 59
66254: PUSH
66255: LD_VAR 0 2
66259: ARRAY
66260: IN
66261: NOT
66262: IFFALSE 66308
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
66264: LD_ADDR_EXP 59
66268: PUSH
66269: LD_EXP 59
66273: PPUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_EXP 59
66283: PUSH
66284: LD_VAR 0 2
66288: ARRAY
66289: PUSH
66290: LD_INT 1
66292: PLUS
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PPUSH
66298: LD_VAR 0 3
66302: PPUSH
66303: CALL 18479 0 3
66307: ST_TO_ADDR
// break ;
66308: GO 66312
// end ; end ; end ;
66310: GO 66146
66312: POP
66313: POP
// end ;
66314: GO 65906
66316: POP
66317: POP
// end ;
66318: LD_VAR 0 1
66322: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
66323: LD_INT 0
66325: PPUSH
66326: PPUSH
66327: PPUSH
66328: PPUSH
66329: PPUSH
66330: PPUSH
66331: PPUSH
66332: PPUSH
66333: PPUSH
// if not mc_bases then
66334: LD_EXP 52
66338: NOT
66339: IFFALSE 66343
// exit ;
66341: GO 66748
// for i = 1 to mc_bases do
66343: LD_ADDR_VAR 0 2
66347: PUSH
66348: DOUBLE
66349: LD_INT 1
66351: DEC
66352: ST_TO_ADDR
66353: LD_EXP 52
66357: PUSH
66358: FOR_TO
66359: IFFALSE 66746
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
66361: LD_EXP 60
66365: PUSH
66366: LD_VAR 0 2
66370: ARRAY
66371: NOT
66372: PUSH
66373: LD_EXP 52
66377: PUSH
66378: LD_VAR 0 2
66382: ARRAY
66383: PPUSH
66384: LD_INT 30
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PPUSH
66394: CALL_OW 72
66398: NOT
66399: OR
66400: IFFALSE 66404
// continue ;
66402: GO 66358
// busy := false ;
66404: LD_ADDR_VAR 0 8
66408: PUSH
66409: LD_INT 0
66411: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66412: LD_ADDR_VAR 0 4
66416: PUSH
66417: LD_EXP 52
66421: PUSH
66422: LD_VAR 0 2
66426: ARRAY
66427: PPUSH
66428: LD_INT 30
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PPUSH
66438: CALL_OW 72
66442: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
66443: LD_ADDR_VAR 0 6
66447: PUSH
66448: LD_EXP 60
66452: PUSH
66453: LD_VAR 0 2
66457: ARRAY
66458: PPUSH
66459: LD_INT 2
66461: PUSH
66462: LD_INT 30
66464: PUSH
66465: LD_INT 32
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 30
66474: PUSH
66475: LD_INT 33
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: PPUSH
66487: CALL_OW 72
66491: ST_TO_ADDR
// if not t then
66492: LD_VAR 0 6
66496: NOT
66497: IFFALSE 66501
// continue ;
66499: GO 66358
// for j in tmp do
66501: LD_ADDR_VAR 0 3
66505: PUSH
66506: LD_VAR 0 4
66510: PUSH
66511: FOR_IN
66512: IFFALSE 66542
// if not BuildingStatus ( j ) = bs_idle then
66514: LD_VAR 0 3
66518: PPUSH
66519: CALL_OW 461
66523: PUSH
66524: LD_INT 2
66526: EQUAL
66527: NOT
66528: IFFALSE 66540
// begin busy := true ;
66530: LD_ADDR_VAR 0 8
66534: PUSH
66535: LD_INT 1
66537: ST_TO_ADDR
// break ;
66538: GO 66542
// end ;
66540: GO 66511
66542: POP
66543: POP
// if busy then
66544: LD_VAR 0 8
66548: IFFALSE 66552
// continue ;
66550: GO 66358
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
66552: LD_ADDR_VAR 0 7
66556: PUSH
66557: LD_VAR 0 6
66561: PPUSH
66562: LD_INT 35
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PPUSH
66572: CALL_OW 72
66576: ST_TO_ADDR
// if tw then
66577: LD_VAR 0 7
66581: IFFALSE 66658
// begin tw := tw [ 1 ] ;
66583: LD_ADDR_VAR 0 7
66587: PUSH
66588: LD_VAR 0 7
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
66597: LD_ADDR_VAR 0 9
66601: PUSH
66602: LD_VAR 0 7
66606: PPUSH
66607: LD_EXP 77
66611: PUSH
66612: LD_VAR 0 2
66616: ARRAY
66617: PPUSH
66618: CALL 23449 0 2
66622: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
66623: LD_EXP 91
66627: PUSH
66628: LD_VAR 0 2
66632: ARRAY
66633: IFFALSE 66656
// if not weapon in mc_allowed_tower_weapons [ i ] then
66635: LD_VAR 0 9
66639: PUSH
66640: LD_EXP 91
66644: PUSH
66645: LD_VAR 0 2
66649: ARRAY
66650: IN
66651: NOT
66652: IFFALSE 66656
// continue ;
66654: GO 66358
// end else
66656: GO 66721
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
66658: LD_ADDR_VAR 0 5
66662: PUSH
66663: LD_EXP 60
66667: PUSH
66668: LD_VAR 0 2
66672: ARRAY
66673: PPUSH
66674: LD_VAR 0 4
66678: PPUSH
66679: CALL 53660 0 2
66683: ST_TO_ADDR
// if not tmp2 then
66684: LD_VAR 0 5
66688: NOT
66689: IFFALSE 66693
// continue ;
66691: GO 66358
// tw := tmp2 [ 1 ] ;
66693: LD_ADDR_VAR 0 7
66697: PUSH
66698: LD_VAR 0 5
66702: PUSH
66703: LD_INT 1
66705: ARRAY
66706: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
66707: LD_ADDR_VAR 0 9
66711: PUSH
66712: LD_VAR 0 5
66716: PUSH
66717: LD_INT 2
66719: ARRAY
66720: ST_TO_ADDR
// end ; if not weapon then
66721: LD_VAR 0 9
66725: NOT
66726: IFFALSE 66730
// continue ;
66728: GO 66358
// ComPlaceWeapon ( tw , weapon ) ;
66730: LD_VAR 0 7
66734: PPUSH
66735: LD_VAR 0 9
66739: PPUSH
66740: CALL_OW 148
// end ;
66744: GO 66358
66746: POP
66747: POP
// end ;
66748: LD_VAR 0 1
66752: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66753: LD_INT 0
66755: PPUSH
66756: PPUSH
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
// if not mc_bases then
66761: LD_EXP 52
66765: NOT
66766: IFFALSE 66770
// exit ;
66768: GO 67546
// for i = 1 to mc_bases do
66770: LD_ADDR_VAR 0 2
66774: PUSH
66775: DOUBLE
66776: LD_INT 1
66778: DEC
66779: ST_TO_ADDR
66780: LD_EXP 52
66784: PUSH
66785: FOR_TO
66786: IFFALSE 67544
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
66788: LD_EXP 65
66792: PUSH
66793: LD_VAR 0 2
66797: ARRAY
66798: NOT
66799: PUSH
66800: LD_EXP 65
66804: PUSH
66805: LD_VAR 0 2
66809: ARRAY
66810: PUSH
66811: LD_EXP 66
66815: PUSH
66816: LD_VAR 0 2
66820: ARRAY
66821: EQUAL
66822: OR
66823: PUSH
66824: LD_EXP 75
66828: PUSH
66829: LD_VAR 0 2
66833: ARRAY
66834: OR
66835: IFFALSE 66839
// continue ;
66837: GO 66785
// if mc_miners [ i ] then
66839: LD_EXP 66
66843: PUSH
66844: LD_VAR 0 2
66848: ARRAY
66849: IFFALSE 67231
// begin for j = mc_miners [ i ] downto 1 do
66851: LD_ADDR_VAR 0 3
66855: PUSH
66856: DOUBLE
66857: LD_EXP 66
66861: PUSH
66862: LD_VAR 0 2
66866: ARRAY
66867: INC
66868: ST_TO_ADDR
66869: LD_INT 1
66871: PUSH
66872: FOR_DOWNTO
66873: IFFALSE 67229
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
66875: LD_EXP 66
66879: PUSH
66880: LD_VAR 0 2
66884: ARRAY
66885: PUSH
66886: LD_VAR 0 3
66890: ARRAY
66891: PPUSH
66892: CALL_OW 301
66896: PUSH
66897: LD_EXP 66
66901: PUSH
66902: LD_VAR 0 2
66906: ARRAY
66907: PUSH
66908: LD_VAR 0 3
66912: ARRAY
66913: PPUSH
66914: CALL_OW 257
66918: PUSH
66919: LD_INT 1
66921: NONEQUAL
66922: OR
66923: IFFALSE 66986
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66925: LD_ADDR_VAR 0 5
66929: PUSH
66930: LD_EXP 66
66934: PUSH
66935: LD_VAR 0 2
66939: ARRAY
66940: PUSH
66941: LD_EXP 66
66945: PUSH
66946: LD_VAR 0 2
66950: ARRAY
66951: PUSH
66952: LD_VAR 0 3
66956: ARRAY
66957: DIFF
66958: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66959: LD_ADDR_EXP 66
66963: PUSH
66964: LD_EXP 66
66968: PPUSH
66969: LD_VAR 0 2
66973: PPUSH
66974: LD_VAR 0 5
66978: PPUSH
66979: CALL_OW 1
66983: ST_TO_ADDR
// continue ;
66984: GO 66872
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
66986: LD_EXP 66
66990: PUSH
66991: LD_VAR 0 2
66995: ARRAY
66996: PUSH
66997: LD_VAR 0 3
67001: ARRAY
67002: PPUSH
67003: CALL_OW 257
67007: PUSH
67008: LD_INT 1
67010: EQUAL
67011: PUSH
67012: LD_EXP 66
67016: PUSH
67017: LD_VAR 0 2
67021: ARRAY
67022: PUSH
67023: LD_VAR 0 3
67027: ARRAY
67028: PPUSH
67029: CALL_OW 459
67033: NOT
67034: AND
67035: PUSH
67036: LD_EXP 66
67040: PUSH
67041: LD_VAR 0 2
67045: ARRAY
67046: PUSH
67047: LD_VAR 0 3
67051: ARRAY
67052: PPUSH
67053: CALL_OW 314
67057: NOT
67058: AND
67059: IFFALSE 67227
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
67061: LD_EXP 66
67065: PUSH
67066: LD_VAR 0 2
67070: ARRAY
67071: PUSH
67072: LD_VAR 0 3
67076: ARRAY
67077: PPUSH
67078: CALL_OW 310
67082: IFFALSE 67105
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
67084: LD_EXP 66
67088: PUSH
67089: LD_VAR 0 2
67093: ARRAY
67094: PUSH
67095: LD_VAR 0 3
67099: ARRAY
67100: PPUSH
67101: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
67105: LD_EXP 66
67109: PUSH
67110: LD_VAR 0 2
67114: ARRAY
67115: PUSH
67116: LD_VAR 0 3
67120: ARRAY
67121: PPUSH
67122: CALL_OW 314
67126: NOT
67127: IFFALSE 67227
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
67129: LD_EXP 66
67133: PUSH
67134: LD_VAR 0 2
67138: ARRAY
67139: PUSH
67140: LD_VAR 0 3
67144: ARRAY
67145: PPUSH
67146: LD_EXP 65
67150: PUSH
67151: LD_VAR 0 2
67155: ARRAY
67156: PUSH
67157: LD_VAR 0 3
67161: PUSH
67162: LD_EXP 65
67166: PUSH
67167: LD_VAR 0 2
67171: ARRAY
67172: MOD
67173: PUSH
67174: LD_INT 1
67176: PLUS
67177: ARRAY
67178: PUSH
67179: LD_INT 1
67181: ARRAY
67182: PPUSH
67183: LD_EXP 65
67187: PUSH
67188: LD_VAR 0 2
67192: ARRAY
67193: PUSH
67194: LD_VAR 0 3
67198: PUSH
67199: LD_EXP 65
67203: PUSH
67204: LD_VAR 0 2
67208: ARRAY
67209: MOD
67210: PUSH
67211: LD_INT 1
67213: PLUS
67214: ARRAY
67215: PUSH
67216: LD_INT 2
67218: ARRAY
67219: PPUSH
67220: LD_INT 0
67222: PPUSH
67223: CALL_OW 193
// end ; end ;
67227: GO 66872
67229: POP
67230: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67231: LD_ADDR_VAR 0 5
67235: PUSH
67236: LD_EXP 52
67240: PUSH
67241: LD_VAR 0 2
67245: ARRAY
67246: PPUSH
67247: LD_INT 2
67249: PUSH
67250: LD_INT 30
67252: PUSH
67253: LD_INT 4
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 30
67262: PUSH
67263: LD_INT 5
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 30
67272: PUSH
67273: LD_INT 32
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: PPUSH
67286: CALL_OW 72
67290: ST_TO_ADDR
// if not tmp then
67291: LD_VAR 0 5
67295: NOT
67296: IFFALSE 67300
// continue ;
67298: GO 66785
// list := [ ] ;
67300: LD_ADDR_VAR 0 6
67304: PUSH
67305: EMPTY
67306: ST_TO_ADDR
// for j in tmp do
67307: LD_ADDR_VAR 0 3
67311: PUSH
67312: LD_VAR 0 5
67316: PUSH
67317: FOR_IN
67318: IFFALSE 67387
// begin for k in UnitsInside ( j ) do
67320: LD_ADDR_VAR 0 4
67324: PUSH
67325: LD_VAR 0 3
67329: PPUSH
67330: CALL_OW 313
67334: PUSH
67335: FOR_IN
67336: IFFALSE 67383
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67338: LD_VAR 0 4
67342: PPUSH
67343: CALL_OW 257
67347: PUSH
67348: LD_INT 1
67350: EQUAL
67351: PUSH
67352: LD_VAR 0 4
67356: PPUSH
67357: CALL_OW 459
67361: NOT
67362: AND
67363: IFFALSE 67381
// list := list ^ k ;
67365: LD_ADDR_VAR 0 6
67369: PUSH
67370: LD_VAR 0 6
67374: PUSH
67375: LD_VAR 0 4
67379: ADD
67380: ST_TO_ADDR
67381: GO 67335
67383: POP
67384: POP
// end ;
67385: GO 67317
67387: POP
67388: POP
// list := list diff mc_miners [ i ] ;
67389: LD_ADDR_VAR 0 6
67393: PUSH
67394: LD_VAR 0 6
67398: PUSH
67399: LD_EXP 66
67403: PUSH
67404: LD_VAR 0 2
67408: ARRAY
67409: DIFF
67410: ST_TO_ADDR
// if not list then
67411: LD_VAR 0 6
67415: NOT
67416: IFFALSE 67420
// continue ;
67418: GO 66785
// k := mc_mines [ i ] - mc_miners [ i ] ;
67420: LD_ADDR_VAR 0 4
67424: PUSH
67425: LD_EXP 65
67429: PUSH
67430: LD_VAR 0 2
67434: ARRAY
67435: PUSH
67436: LD_EXP 66
67440: PUSH
67441: LD_VAR 0 2
67445: ARRAY
67446: MINUS
67447: ST_TO_ADDR
// if k > list then
67448: LD_VAR 0 4
67452: PUSH
67453: LD_VAR 0 6
67457: GREATER
67458: IFFALSE 67470
// k := list ;
67460: LD_ADDR_VAR 0 4
67464: PUSH
67465: LD_VAR 0 6
67469: ST_TO_ADDR
// for j = 1 to k do
67470: LD_ADDR_VAR 0 3
67474: PUSH
67475: DOUBLE
67476: LD_INT 1
67478: DEC
67479: ST_TO_ADDR
67480: LD_VAR 0 4
67484: PUSH
67485: FOR_TO
67486: IFFALSE 67540
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67488: LD_ADDR_EXP 66
67492: PUSH
67493: LD_EXP 66
67497: PPUSH
67498: LD_VAR 0 2
67502: PUSH
67503: LD_EXP 66
67507: PUSH
67508: LD_VAR 0 2
67512: ARRAY
67513: PUSH
67514: LD_INT 1
67516: PLUS
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PPUSH
67522: LD_VAR 0 6
67526: PUSH
67527: LD_VAR 0 3
67531: ARRAY
67532: PPUSH
67533: CALL 18479 0 3
67537: ST_TO_ADDR
67538: GO 67485
67540: POP
67541: POP
// end ;
67542: GO 66785
67544: POP
67545: POP
// end ;
67546: LD_VAR 0 1
67550: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
67551: LD_INT 0
67553: PPUSH
67554: PPUSH
67555: PPUSH
67556: PPUSH
67557: PPUSH
67558: PPUSH
67559: PPUSH
67560: PPUSH
67561: PPUSH
67562: PPUSH
// if not mc_bases then
67563: LD_EXP 52
67567: NOT
67568: IFFALSE 67572
// exit ;
67570: GO 69322
// for i = 1 to mc_bases do
67572: LD_ADDR_VAR 0 2
67576: PUSH
67577: DOUBLE
67578: LD_INT 1
67580: DEC
67581: ST_TO_ADDR
67582: LD_EXP 52
67586: PUSH
67587: FOR_TO
67588: IFFALSE 69320
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67590: LD_EXP 52
67594: PUSH
67595: LD_VAR 0 2
67599: ARRAY
67600: NOT
67601: PUSH
67602: LD_EXP 59
67606: PUSH
67607: LD_VAR 0 2
67611: ARRAY
67612: OR
67613: IFFALSE 67617
// continue ;
67615: GO 67587
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67617: LD_EXP 68
67621: PUSH
67622: LD_VAR 0 2
67626: ARRAY
67627: NOT
67628: PUSH
67629: LD_EXP 69
67633: PUSH
67634: LD_VAR 0 2
67638: ARRAY
67639: AND
67640: IFFALSE 67678
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67642: LD_ADDR_EXP 69
67646: PUSH
67647: LD_EXP 69
67651: PPUSH
67652: LD_VAR 0 2
67656: PPUSH
67657: EMPTY
67658: PPUSH
67659: CALL_OW 1
67663: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67664: LD_VAR 0 2
67668: PPUSH
67669: LD_INT 107
67671: PPUSH
67672: CALL 58536 0 2
// continue ;
67676: GO 67587
// end ; target := [ ] ;
67678: LD_ADDR_VAR 0 6
67682: PUSH
67683: EMPTY
67684: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67685: LD_ADDR_VAR 0 3
67689: PUSH
67690: DOUBLE
67691: LD_EXP 68
67695: PUSH
67696: LD_VAR 0 2
67700: ARRAY
67701: INC
67702: ST_TO_ADDR
67703: LD_INT 1
67705: PUSH
67706: FOR_DOWNTO
67707: IFFALSE 67967
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67709: LD_EXP 68
67713: PUSH
67714: LD_VAR 0 2
67718: ARRAY
67719: PUSH
67720: LD_VAR 0 3
67724: ARRAY
67725: PUSH
67726: LD_INT 2
67728: ARRAY
67729: PPUSH
67730: LD_EXP 68
67734: PUSH
67735: LD_VAR 0 2
67739: ARRAY
67740: PUSH
67741: LD_VAR 0 3
67745: ARRAY
67746: PUSH
67747: LD_INT 3
67749: ARRAY
67750: PPUSH
67751: CALL_OW 488
67755: PUSH
67756: LD_EXP 68
67760: PUSH
67761: LD_VAR 0 2
67765: ARRAY
67766: PUSH
67767: LD_VAR 0 3
67771: ARRAY
67772: PUSH
67773: LD_INT 2
67775: ARRAY
67776: PPUSH
67777: LD_EXP 68
67781: PUSH
67782: LD_VAR 0 2
67786: ARRAY
67787: PUSH
67788: LD_VAR 0 3
67792: ARRAY
67793: PUSH
67794: LD_INT 3
67796: ARRAY
67797: PPUSH
67798: CALL_OW 284
67802: PUSH
67803: LD_INT 0
67805: EQUAL
67806: AND
67807: IFFALSE 67862
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
67809: LD_ADDR_VAR 0 5
67813: PUSH
67814: LD_EXP 68
67818: PUSH
67819: LD_VAR 0 2
67823: ARRAY
67824: PPUSH
67825: LD_VAR 0 3
67829: PPUSH
67830: CALL_OW 3
67834: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
67835: LD_ADDR_EXP 68
67839: PUSH
67840: LD_EXP 68
67844: PPUSH
67845: LD_VAR 0 2
67849: PPUSH
67850: LD_VAR 0 5
67854: PPUSH
67855: CALL_OW 1
67859: ST_TO_ADDR
// continue ;
67860: GO 67706
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
67862: LD_EXP 52
67866: PUSH
67867: LD_VAR 0 2
67871: ARRAY
67872: PUSH
67873: LD_INT 1
67875: ARRAY
67876: PPUSH
67877: CALL_OW 255
67881: PPUSH
67882: LD_EXP 68
67886: PUSH
67887: LD_VAR 0 2
67891: ARRAY
67892: PUSH
67893: LD_VAR 0 3
67897: ARRAY
67898: PUSH
67899: LD_INT 2
67901: ARRAY
67902: PPUSH
67903: LD_EXP 68
67907: PUSH
67908: LD_VAR 0 2
67912: ARRAY
67913: PUSH
67914: LD_VAR 0 3
67918: ARRAY
67919: PUSH
67920: LD_INT 3
67922: ARRAY
67923: PPUSH
67924: LD_INT 30
67926: PPUSH
67927: CALL 19375 0 4
67931: PUSH
67932: LD_INT 4
67934: ARRAY
67935: PUSH
67936: LD_INT 0
67938: EQUAL
67939: IFFALSE 67965
// begin target := mc_crates [ i ] [ j ] ;
67941: LD_ADDR_VAR 0 6
67945: PUSH
67946: LD_EXP 68
67950: PUSH
67951: LD_VAR 0 2
67955: ARRAY
67956: PUSH
67957: LD_VAR 0 3
67961: ARRAY
67962: ST_TO_ADDR
// break ;
67963: GO 67967
// end ; end ;
67965: GO 67706
67967: POP
67968: POP
// if not target then
67969: LD_VAR 0 6
67973: NOT
67974: IFFALSE 67978
// continue ;
67976: GO 67587
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
67978: LD_ADDR_VAR 0 7
67982: PUSH
67983: LD_EXP 71
67987: PUSH
67988: LD_VAR 0 2
67992: ARRAY
67993: PPUSH
67994: LD_INT 2
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: LD_INT 58
68002: PUSH
68003: EMPTY
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 61
68012: PUSH
68013: EMPTY
68014: LIST
68015: PUSH
68016: LD_INT 33
68018: PUSH
68019: LD_INT 5
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 33
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 2
68045: PUSH
68046: LD_INT 34
68048: PUSH
68049: LD_INT 32
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 34
68058: PUSH
68059: LD_INT 51
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 34
68068: PUSH
68069: LD_INT 12
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PPUSH
68086: CALL_OW 72
68090: ST_TO_ADDR
// if not cargo then
68091: LD_VAR 0 7
68095: NOT
68096: IFFALSE 68739
// begin if mc_crates_collector [ i ] < 5 then
68098: LD_EXP 69
68102: PUSH
68103: LD_VAR 0 2
68107: ARRAY
68108: PUSH
68109: LD_INT 5
68111: LESS
68112: IFFALSE 68478
// begin if mc_ape [ i ] then
68114: LD_EXP 81
68118: PUSH
68119: LD_VAR 0 2
68123: ARRAY
68124: IFFALSE 68171
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
68126: LD_ADDR_VAR 0 5
68130: PUSH
68131: LD_EXP 81
68135: PUSH
68136: LD_VAR 0 2
68140: ARRAY
68141: PPUSH
68142: LD_INT 25
68144: PUSH
68145: LD_INT 16
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 24
68154: PUSH
68155: LD_INT 750
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PPUSH
68166: CALL_OW 72
68170: ST_TO_ADDR
// if not tmp then
68171: LD_VAR 0 5
68175: NOT
68176: IFFALSE 68223
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
68178: LD_ADDR_VAR 0 5
68182: PUSH
68183: LD_EXP 52
68187: PUSH
68188: LD_VAR 0 2
68192: ARRAY
68193: PPUSH
68194: LD_INT 25
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 24
68206: PUSH
68207: LD_INT 750
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PPUSH
68218: CALL_OW 72
68222: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
68223: LD_EXP 81
68227: PUSH
68228: LD_VAR 0 2
68232: ARRAY
68233: PUSH
68234: LD_EXP 52
68238: PUSH
68239: LD_VAR 0 2
68243: ARRAY
68244: PPUSH
68245: LD_INT 25
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 24
68257: PUSH
68258: LD_INT 750
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PPUSH
68269: CALL_OW 72
68273: AND
68274: PUSH
68275: LD_VAR 0 5
68279: PUSH
68280: LD_INT 5
68282: LESS
68283: AND
68284: IFFALSE 68366
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_EXP 52
68295: PUSH
68296: LD_VAR 0 2
68300: ARRAY
68301: PPUSH
68302: LD_INT 25
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 24
68314: PUSH
68315: LD_INT 750
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PPUSH
68326: CALL_OW 72
68330: PUSH
68331: FOR_IN
68332: IFFALSE 68364
// begin tmp := tmp union j ;
68334: LD_ADDR_VAR 0 5
68338: PUSH
68339: LD_VAR 0 5
68343: PUSH
68344: LD_VAR 0 3
68348: UNION
68349: ST_TO_ADDR
// if tmp >= 5 then
68350: LD_VAR 0 5
68354: PUSH
68355: LD_INT 5
68357: GREATEREQUAL
68358: IFFALSE 68362
// break ;
68360: GO 68364
// end ;
68362: GO 68331
68364: POP
68365: POP
// end ; if not tmp then
68366: LD_VAR 0 5
68370: NOT
68371: IFFALSE 68375
// continue ;
68373: GO 67587
// for j in tmp do
68375: LD_ADDR_VAR 0 3
68379: PUSH
68380: LD_VAR 0 5
68384: PUSH
68385: FOR_IN
68386: IFFALSE 68476
// if not GetTag ( j ) then
68388: LD_VAR 0 3
68392: PPUSH
68393: CALL_OW 110
68397: NOT
68398: IFFALSE 68474
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68400: LD_ADDR_EXP 69
68404: PUSH
68405: LD_EXP 69
68409: PPUSH
68410: LD_VAR 0 2
68414: PUSH
68415: LD_EXP 69
68419: PUSH
68420: LD_VAR 0 2
68424: ARRAY
68425: PUSH
68426: LD_INT 1
68428: PLUS
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PPUSH
68434: LD_VAR 0 3
68438: PPUSH
68439: CALL 18479 0 3
68443: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68444: LD_VAR 0 3
68448: PPUSH
68449: LD_INT 107
68451: PPUSH
68452: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68456: LD_EXP 69
68460: PUSH
68461: LD_VAR 0 2
68465: ARRAY
68466: PUSH
68467: LD_INT 5
68469: GREATEREQUAL
68470: IFFALSE 68474
// break ;
68472: GO 68476
// end ;
68474: GO 68385
68476: POP
68477: POP
// end ; if mc_crates_collector [ i ] and target then
68478: LD_EXP 69
68482: PUSH
68483: LD_VAR 0 2
68487: ARRAY
68488: PUSH
68489: LD_VAR 0 6
68493: AND
68494: IFFALSE 68737
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68496: LD_EXP 69
68500: PUSH
68501: LD_VAR 0 2
68505: ARRAY
68506: PUSH
68507: LD_VAR 0 6
68511: PUSH
68512: LD_INT 1
68514: ARRAY
68515: LESS
68516: IFFALSE 68536
// tmp := mc_crates_collector [ i ] else
68518: LD_ADDR_VAR 0 5
68522: PUSH
68523: LD_EXP 69
68527: PUSH
68528: LD_VAR 0 2
68532: ARRAY
68533: ST_TO_ADDR
68534: GO 68550
// tmp := target [ 1 ] ;
68536: LD_ADDR_VAR 0 5
68540: PUSH
68541: LD_VAR 0 6
68545: PUSH
68546: LD_INT 1
68548: ARRAY
68549: ST_TO_ADDR
// k := 0 ;
68550: LD_ADDR_VAR 0 4
68554: PUSH
68555: LD_INT 0
68557: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
68558: LD_ADDR_VAR 0 3
68562: PUSH
68563: LD_EXP 69
68567: PUSH
68568: LD_VAR 0 2
68572: ARRAY
68573: PUSH
68574: FOR_IN
68575: IFFALSE 68735
// begin k := k + 1 ;
68577: LD_ADDR_VAR 0 4
68581: PUSH
68582: LD_VAR 0 4
68586: PUSH
68587: LD_INT 1
68589: PLUS
68590: ST_TO_ADDR
// if k > tmp then
68591: LD_VAR 0 4
68595: PUSH
68596: LD_VAR 0 5
68600: GREATER
68601: IFFALSE 68605
// break ;
68603: GO 68735
// if not GetClass ( j ) in [ 2 , 16 ] then
68605: LD_VAR 0 3
68609: PPUSH
68610: CALL_OW 257
68614: PUSH
68615: LD_INT 2
68617: PUSH
68618: LD_INT 16
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: IN
68625: NOT
68626: IFFALSE 68679
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
68628: LD_ADDR_EXP 69
68632: PUSH
68633: LD_EXP 69
68637: PPUSH
68638: LD_VAR 0 2
68642: PPUSH
68643: LD_EXP 69
68647: PUSH
68648: LD_VAR 0 2
68652: ARRAY
68653: PUSH
68654: LD_VAR 0 3
68658: DIFF
68659: PPUSH
68660: CALL_OW 1
68664: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68665: LD_VAR 0 3
68669: PPUSH
68670: LD_INT 0
68672: PPUSH
68673: CALL_OW 109
// continue ;
68677: GO 68574
// end ; if IsInUnit ( j ) then
68679: LD_VAR 0 3
68683: PPUSH
68684: CALL_OW 310
68688: IFFALSE 68699
// ComExitBuilding ( j ) ;
68690: LD_VAR 0 3
68694: PPUSH
68695: CALL_OW 122
// wait ( 3 ) ;
68699: LD_INT 3
68701: PPUSH
68702: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68706: LD_VAR 0 3
68710: PPUSH
68711: LD_VAR 0 6
68715: PUSH
68716: LD_INT 2
68718: ARRAY
68719: PPUSH
68720: LD_VAR 0 6
68724: PUSH
68725: LD_INT 3
68727: ARRAY
68728: PPUSH
68729: CALL_OW 117
// end ;
68733: GO 68574
68735: POP
68736: POP
// end ; end else
68737: GO 69318
// begin for j in cargo do
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: LD_VAR 0 7
68748: PUSH
68749: FOR_IN
68750: IFFALSE 69316
// begin if GetTag ( j ) <> 0 then
68752: LD_VAR 0 3
68756: PPUSH
68757: CALL_OW 110
68761: PUSH
68762: LD_INT 0
68764: NONEQUAL
68765: IFFALSE 68769
// continue ;
68767: GO 68749
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
68769: LD_VAR 0 3
68773: PPUSH
68774: CALL_OW 256
68778: PUSH
68779: LD_INT 1000
68781: LESS
68782: PUSH
68783: LD_VAR 0 3
68787: PPUSH
68788: LD_EXP 76
68792: PUSH
68793: LD_VAR 0 2
68797: ARRAY
68798: PPUSH
68799: CALL_OW 308
68803: NOT
68804: AND
68805: IFFALSE 68827
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68807: LD_VAR 0 3
68811: PPUSH
68812: LD_EXP 76
68816: PUSH
68817: LD_VAR 0 2
68821: ARRAY
68822: PPUSH
68823: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
68827: LD_VAR 0 3
68831: PPUSH
68832: CALL_OW 256
68836: PUSH
68837: LD_INT 1000
68839: LESS
68840: PUSH
68841: LD_VAR 0 3
68845: PPUSH
68846: LD_EXP 76
68850: PUSH
68851: LD_VAR 0 2
68855: ARRAY
68856: PPUSH
68857: CALL_OW 308
68861: AND
68862: IFFALSE 68866
// continue ;
68864: GO 68749
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68866: LD_VAR 0 3
68870: PPUSH
68871: CALL_OW 262
68875: PUSH
68876: LD_INT 2
68878: EQUAL
68879: PUSH
68880: LD_VAR 0 3
68884: PPUSH
68885: CALL_OW 261
68889: PUSH
68890: LD_INT 15
68892: LESS
68893: AND
68894: IFFALSE 68898
// continue ;
68896: GO 68749
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68898: LD_VAR 0 3
68902: PPUSH
68903: CALL_OW 262
68907: PUSH
68908: LD_INT 1
68910: EQUAL
68911: PUSH
68912: LD_VAR 0 3
68916: PPUSH
68917: CALL_OW 261
68921: PUSH
68922: LD_INT 10
68924: LESS
68925: AND
68926: IFFALSE 69255
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68928: LD_ADDR_VAR 0 8
68932: PUSH
68933: LD_EXP 52
68937: PUSH
68938: LD_VAR 0 2
68942: ARRAY
68943: PPUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 30
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 30
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: PPUSH
68972: CALL_OW 72
68976: ST_TO_ADDR
// if not depot then
68977: LD_VAR 0 8
68981: NOT
68982: IFFALSE 68986
// continue ;
68984: GO 68749
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68986: LD_VAR 0 3
68990: PPUSH
68991: LD_VAR 0 8
68995: PPUSH
68996: LD_VAR 0 3
69000: PPUSH
69001: CALL_OW 74
69005: PPUSH
69006: CALL_OW 296
69010: PUSH
69011: LD_INT 6
69013: LESS
69014: IFFALSE 69030
// SetFuel ( j , 100 ) else
69016: LD_VAR 0 3
69020: PPUSH
69021: LD_INT 100
69023: PPUSH
69024: CALL_OW 240
69028: GO 69255
// if GetFuel ( j ) = 0 then
69030: LD_VAR 0 3
69034: PPUSH
69035: CALL_OW 261
69039: PUSH
69040: LD_INT 0
69042: EQUAL
69043: IFFALSE 69255
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
69045: LD_ADDR_EXP 71
69049: PUSH
69050: LD_EXP 71
69054: PPUSH
69055: LD_VAR 0 2
69059: PPUSH
69060: LD_EXP 71
69064: PUSH
69065: LD_VAR 0 2
69069: ARRAY
69070: PUSH
69071: LD_VAR 0 3
69075: DIFF
69076: PPUSH
69077: CALL_OW 1
69081: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
69082: LD_VAR 0 3
69086: PPUSH
69087: CALL_OW 263
69091: PUSH
69092: LD_INT 1
69094: EQUAL
69095: IFFALSE 69111
// ComExitVehicle ( IsInUnit ( j ) ) ;
69097: LD_VAR 0 3
69101: PPUSH
69102: CALL_OW 310
69106: PPUSH
69107: CALL_OW 121
// if GetControl ( j ) = control_remote then
69111: LD_VAR 0 3
69115: PPUSH
69116: CALL_OW 263
69120: PUSH
69121: LD_INT 2
69123: EQUAL
69124: IFFALSE 69135
// ComUnlink ( j ) ;
69126: LD_VAR 0 3
69130: PPUSH
69131: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
69135: LD_ADDR_VAR 0 9
69139: PUSH
69140: LD_VAR 0 2
69144: PPUSH
69145: LD_INT 3
69147: PPUSH
69148: CALL 78608 0 2
69152: ST_TO_ADDR
// if fac then
69153: LD_VAR 0 9
69157: IFFALSE 69253
// begin for k in fac do
69159: LD_ADDR_VAR 0 4
69163: PUSH
69164: LD_VAR 0 9
69168: PUSH
69169: FOR_IN
69170: IFFALSE 69251
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
69172: LD_ADDR_VAR 0 10
69176: PUSH
69177: LD_VAR 0 9
69181: PPUSH
69182: LD_VAR 0 3
69186: PPUSH
69187: CALL_OW 265
69191: PPUSH
69192: LD_VAR 0 3
69196: PPUSH
69197: CALL_OW 262
69201: PPUSH
69202: LD_VAR 0 3
69206: PPUSH
69207: CALL_OW 263
69211: PPUSH
69212: LD_VAR 0 3
69216: PPUSH
69217: CALL_OW 264
69221: PPUSH
69222: CALL 16011 0 5
69226: ST_TO_ADDR
// if components then
69227: LD_VAR 0 10
69231: IFFALSE 69249
// begin MC_InsertProduceList ( i , components ) ;
69233: LD_VAR 0 2
69237: PPUSH
69238: LD_VAR 0 10
69242: PPUSH
69243: CALL 78153 0 2
// break ;
69247: GO 69251
// end ; end ;
69249: GO 69169
69251: POP
69252: POP
// end ; continue ;
69253: GO 68749
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69255: LD_VAR 0 3
69259: PPUSH
69260: LD_INT 1
69262: PPUSH
69263: CALL_OW 289
69267: PUSH
69268: LD_INT 100
69270: LESS
69271: PUSH
69272: LD_VAR 0 3
69276: PPUSH
69277: CALL_OW 314
69281: NOT
69282: AND
69283: IFFALSE 69312
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69285: LD_VAR 0 3
69289: PPUSH
69290: LD_VAR 0 6
69294: PUSH
69295: LD_INT 2
69297: ARRAY
69298: PPUSH
69299: LD_VAR 0 6
69303: PUSH
69304: LD_INT 3
69306: ARRAY
69307: PPUSH
69308: CALL_OW 117
// break ;
69312: GO 69316
// end ;
69314: GO 68749
69316: POP
69317: POP
// end ; end ;
69318: GO 67587
69320: POP
69321: POP
// end ;
69322: LD_VAR 0 1
69326: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69327: LD_INT 0
69329: PPUSH
69330: PPUSH
69331: PPUSH
69332: PPUSH
// if not mc_bases then
69333: LD_EXP 52
69337: NOT
69338: IFFALSE 69342
// exit ;
69340: GO 69503
// for i = 1 to mc_bases do
69342: LD_ADDR_VAR 0 2
69346: PUSH
69347: DOUBLE
69348: LD_INT 1
69350: DEC
69351: ST_TO_ADDR
69352: LD_EXP 52
69356: PUSH
69357: FOR_TO
69358: IFFALSE 69501
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
69360: LD_ADDR_VAR 0 4
69364: PUSH
69365: LD_EXP 71
69369: PUSH
69370: LD_VAR 0 2
69374: ARRAY
69375: PUSH
69376: LD_EXP 74
69380: PUSH
69381: LD_VAR 0 2
69385: ARRAY
69386: UNION
69387: PPUSH
69388: LD_INT 33
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PPUSH
69398: CALL_OW 72
69402: ST_TO_ADDR
// if tmp then
69403: LD_VAR 0 4
69407: IFFALSE 69499
// for j in tmp do
69409: LD_ADDR_VAR 0 3
69413: PUSH
69414: LD_VAR 0 4
69418: PUSH
69419: FOR_IN
69420: IFFALSE 69497
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69422: LD_VAR 0 3
69426: PPUSH
69427: CALL_OW 312
69431: NOT
69432: PUSH
69433: LD_VAR 0 3
69437: PPUSH
69438: CALL_OW 256
69442: PUSH
69443: LD_INT 250
69445: GREATEREQUAL
69446: AND
69447: IFFALSE 69460
// Connect ( j ) else
69449: LD_VAR 0 3
69453: PPUSH
69454: CALL 21412 0 1
69458: GO 69495
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69460: LD_VAR 0 3
69464: PPUSH
69465: CALL_OW 256
69469: PUSH
69470: LD_INT 250
69472: LESS
69473: PUSH
69474: LD_VAR 0 3
69478: PPUSH
69479: CALL_OW 312
69483: AND
69484: IFFALSE 69495
// ComUnlink ( j ) ;
69486: LD_VAR 0 3
69490: PPUSH
69491: CALL_OW 136
69495: GO 69419
69497: POP
69498: POP
// end ;
69499: GO 69357
69501: POP
69502: POP
// end ;
69503: LD_VAR 0 1
69507: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69508: LD_INT 0
69510: PPUSH
69511: PPUSH
69512: PPUSH
69513: PPUSH
69514: PPUSH
// if not mc_bases then
69515: LD_EXP 52
69519: NOT
69520: IFFALSE 69524
// exit ;
69522: GO 69969
// for i = 1 to mc_bases do
69524: LD_ADDR_VAR 0 2
69528: PUSH
69529: DOUBLE
69530: LD_INT 1
69532: DEC
69533: ST_TO_ADDR
69534: LD_EXP 52
69538: PUSH
69539: FOR_TO
69540: IFFALSE 69967
// begin if not mc_produce [ i ] then
69542: LD_EXP 73
69546: PUSH
69547: LD_VAR 0 2
69551: ARRAY
69552: NOT
69553: IFFALSE 69557
// continue ;
69555: GO 69539
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69557: LD_ADDR_VAR 0 5
69561: PUSH
69562: LD_EXP 52
69566: PUSH
69567: LD_VAR 0 2
69571: ARRAY
69572: PPUSH
69573: LD_INT 30
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PPUSH
69583: CALL_OW 72
69587: ST_TO_ADDR
// if not fac then
69588: LD_VAR 0 5
69592: NOT
69593: IFFALSE 69597
// continue ;
69595: GO 69539
// for j in fac do
69597: LD_ADDR_VAR 0 3
69601: PUSH
69602: LD_VAR 0 5
69606: PUSH
69607: FOR_IN
69608: IFFALSE 69963
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
69610: LD_VAR 0 3
69614: PPUSH
69615: CALL_OW 461
69619: PUSH
69620: LD_INT 2
69622: NONEQUAL
69623: PUSH
69624: LD_VAR 0 3
69628: PPUSH
69629: LD_INT 15
69631: PPUSH
69632: CALL 21072 0 2
69636: PUSH
69637: LD_INT 4
69639: ARRAY
69640: OR
69641: IFFALSE 69645
// continue ;
69643: GO 69607
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69645: LD_VAR 0 3
69649: PPUSH
69650: LD_EXP 73
69654: PUSH
69655: LD_VAR 0 2
69659: ARRAY
69660: PUSH
69661: LD_INT 1
69663: ARRAY
69664: PUSH
69665: LD_INT 1
69667: ARRAY
69668: PPUSH
69669: LD_EXP 73
69673: PUSH
69674: LD_VAR 0 2
69678: ARRAY
69679: PUSH
69680: LD_INT 1
69682: ARRAY
69683: PUSH
69684: LD_INT 2
69686: ARRAY
69687: PPUSH
69688: LD_EXP 73
69692: PUSH
69693: LD_VAR 0 2
69697: ARRAY
69698: PUSH
69699: LD_INT 1
69701: ARRAY
69702: PUSH
69703: LD_INT 3
69705: ARRAY
69706: PPUSH
69707: LD_EXP 73
69711: PUSH
69712: LD_VAR 0 2
69716: ARRAY
69717: PUSH
69718: LD_INT 1
69720: ARRAY
69721: PUSH
69722: LD_INT 4
69724: ARRAY
69725: PPUSH
69726: CALL_OW 448
69730: PUSH
69731: LD_VAR 0 3
69735: PPUSH
69736: LD_EXP 73
69740: PUSH
69741: LD_VAR 0 2
69745: ARRAY
69746: PUSH
69747: LD_INT 1
69749: ARRAY
69750: PUSH
69751: LD_INT 1
69753: ARRAY
69754: PUSH
69755: LD_EXP 73
69759: PUSH
69760: LD_VAR 0 2
69764: ARRAY
69765: PUSH
69766: LD_INT 1
69768: ARRAY
69769: PUSH
69770: LD_INT 2
69772: ARRAY
69773: PUSH
69774: LD_EXP 73
69778: PUSH
69779: LD_VAR 0 2
69783: ARRAY
69784: PUSH
69785: LD_INT 1
69787: ARRAY
69788: PUSH
69789: LD_INT 3
69791: ARRAY
69792: PUSH
69793: LD_EXP 73
69797: PUSH
69798: LD_VAR 0 2
69802: ARRAY
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PUSH
69808: LD_INT 4
69810: ARRAY
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: PPUSH
69818: CALL 24743 0 2
69822: AND
69823: IFFALSE 69961
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69825: LD_VAR 0 3
69829: PPUSH
69830: LD_EXP 73
69834: PUSH
69835: LD_VAR 0 2
69839: ARRAY
69840: PUSH
69841: LD_INT 1
69843: ARRAY
69844: PUSH
69845: LD_INT 1
69847: ARRAY
69848: PPUSH
69849: LD_EXP 73
69853: PUSH
69854: LD_VAR 0 2
69858: ARRAY
69859: PUSH
69860: LD_INT 1
69862: ARRAY
69863: PUSH
69864: LD_INT 2
69866: ARRAY
69867: PPUSH
69868: LD_EXP 73
69872: PUSH
69873: LD_VAR 0 2
69877: ARRAY
69878: PUSH
69879: LD_INT 1
69881: ARRAY
69882: PUSH
69883: LD_INT 3
69885: ARRAY
69886: PPUSH
69887: LD_EXP 73
69891: PUSH
69892: LD_VAR 0 2
69896: ARRAY
69897: PUSH
69898: LD_INT 1
69900: ARRAY
69901: PUSH
69902: LD_INT 4
69904: ARRAY
69905: PPUSH
69906: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69910: LD_ADDR_VAR 0 4
69914: PUSH
69915: LD_EXP 73
69919: PUSH
69920: LD_VAR 0 2
69924: ARRAY
69925: PPUSH
69926: LD_INT 1
69928: PPUSH
69929: CALL_OW 3
69933: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69934: LD_ADDR_EXP 73
69938: PUSH
69939: LD_EXP 73
69943: PPUSH
69944: LD_VAR 0 2
69948: PPUSH
69949: LD_VAR 0 4
69953: PPUSH
69954: CALL_OW 1
69958: ST_TO_ADDR
// break ;
69959: GO 69963
// end ; end ;
69961: GO 69607
69963: POP
69964: POP
// end ;
69965: GO 69539
69967: POP
69968: POP
// end ;
69969: LD_VAR 0 1
69973: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69974: LD_INT 0
69976: PPUSH
69977: PPUSH
69978: PPUSH
// if not mc_bases then
69979: LD_EXP 52
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70077
// for i = 1 to mc_bases do
69988: LD_ADDR_VAR 0 2
69992: PUSH
69993: DOUBLE
69994: LD_INT 1
69996: DEC
69997: ST_TO_ADDR
69998: LD_EXP 52
70002: PUSH
70003: FOR_TO
70004: IFFALSE 70075
// begin if mc_attack [ i ] then
70006: LD_EXP 72
70010: PUSH
70011: LD_VAR 0 2
70015: ARRAY
70016: IFFALSE 70073
// begin tmp := mc_attack [ i ] [ 1 ] ;
70018: LD_ADDR_VAR 0 3
70022: PUSH
70023: LD_EXP 72
70027: PUSH
70028: LD_VAR 0 2
70032: ARRAY
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
70038: LD_ADDR_EXP 72
70042: PUSH
70043: LD_EXP 72
70047: PPUSH
70048: LD_VAR 0 2
70052: PPUSH
70053: EMPTY
70054: PPUSH
70055: CALL_OW 1
70059: ST_TO_ADDR
// Attack ( tmp ) ;
70060: LD_VAR 0 3
70064: PPUSH
70065: CALL 46933 0 1
// exit ;
70069: POP
70070: POP
70071: GO 70077
// end ; end ;
70073: GO 70003
70075: POP
70076: POP
// end ;
70077: LD_VAR 0 1
70081: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
70082: LD_INT 0
70084: PPUSH
70085: PPUSH
70086: PPUSH
70087: PPUSH
70088: PPUSH
70089: PPUSH
70090: PPUSH
// if not mc_bases then
70091: LD_EXP 52
70095: NOT
70096: IFFALSE 70100
// exit ;
70098: GO 70682
// for i = 1 to mc_bases do
70100: LD_ADDR_VAR 0 2
70104: PUSH
70105: DOUBLE
70106: LD_INT 1
70108: DEC
70109: ST_TO_ADDR
70110: LD_EXP 52
70114: PUSH
70115: FOR_TO
70116: IFFALSE 70680
// begin if not mc_bases [ i ] then
70118: LD_EXP 52
70122: PUSH
70123: LD_VAR 0 2
70127: ARRAY
70128: NOT
70129: IFFALSE 70133
// continue ;
70131: GO 70115
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
70133: LD_ADDR_VAR 0 7
70137: PUSH
70138: LD_EXP 52
70142: PUSH
70143: LD_VAR 0 2
70147: ARRAY
70148: PUSH
70149: LD_INT 1
70151: ARRAY
70152: PPUSH
70153: CALL 15315 0 1
70157: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
70158: LD_ADDR_EXP 75
70162: PUSH
70163: LD_EXP 75
70167: PPUSH
70168: LD_VAR 0 2
70172: PPUSH
70173: LD_EXP 52
70177: PUSH
70178: LD_VAR 0 2
70182: ARRAY
70183: PUSH
70184: LD_INT 1
70186: ARRAY
70187: PPUSH
70188: CALL_OW 255
70192: PPUSH
70193: LD_EXP 77
70197: PUSH
70198: LD_VAR 0 2
70202: ARRAY
70203: PPUSH
70204: CALL 12869 0 2
70208: PPUSH
70209: CALL_OW 1
70213: ST_TO_ADDR
// if not mc_scan [ i ] then
70214: LD_EXP 75
70218: PUSH
70219: LD_VAR 0 2
70223: ARRAY
70224: NOT
70225: IFFALSE 70380
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70227: LD_ADDR_VAR 0 4
70231: PUSH
70232: LD_EXP 52
70236: PUSH
70237: LD_VAR 0 2
70241: ARRAY
70242: PPUSH
70243: LD_INT 2
70245: PUSH
70246: LD_INT 25
70248: PUSH
70249: LD_INT 5
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 25
70258: PUSH
70259: LD_INT 8
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 25
70268: PUSH
70269: LD_INT 9
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: PPUSH
70282: CALL_OW 72
70286: ST_TO_ADDR
// if not tmp then
70287: LD_VAR 0 4
70291: NOT
70292: IFFALSE 70296
// continue ;
70294: GO 70115
// for j in tmp do
70296: LD_ADDR_VAR 0 3
70300: PUSH
70301: LD_VAR 0 4
70305: PUSH
70306: FOR_IN
70307: IFFALSE 70378
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70309: LD_VAR 0 3
70313: PPUSH
70314: CALL_OW 310
70318: PPUSH
70319: CALL_OW 266
70323: PUSH
70324: LD_INT 5
70326: EQUAL
70327: PUSH
70328: LD_VAR 0 3
70332: PPUSH
70333: CALL_OW 257
70337: PUSH
70338: LD_INT 1
70340: EQUAL
70341: AND
70342: PUSH
70343: LD_VAR 0 3
70347: PPUSH
70348: CALL_OW 459
70352: NOT
70353: AND
70354: PUSH
70355: LD_VAR 0 7
70359: AND
70360: IFFALSE 70376
// ComChangeProfession ( j , class ) ;
70362: LD_VAR 0 3
70366: PPUSH
70367: LD_VAR 0 7
70371: PPUSH
70372: CALL_OW 123
70376: GO 70306
70378: POP
70379: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
70380: LD_EXP 75
70384: PUSH
70385: LD_VAR 0 2
70389: ARRAY
70390: PUSH
70391: LD_EXP 74
70395: PUSH
70396: LD_VAR 0 2
70400: ARRAY
70401: NOT
70402: AND
70403: PUSH
70404: LD_EXP 52
70408: PUSH
70409: LD_VAR 0 2
70413: ARRAY
70414: PPUSH
70415: LD_INT 30
70417: PUSH
70418: LD_INT 32
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PPUSH
70425: CALL_OW 72
70429: NOT
70430: AND
70431: PUSH
70432: LD_EXP 52
70436: PUSH
70437: LD_VAR 0 2
70441: ARRAY
70442: PPUSH
70443: LD_INT 2
70445: PUSH
70446: LD_INT 30
70448: PUSH
70449: LD_INT 4
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 30
70458: PUSH
70459: LD_INT 5
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: PPUSH
70471: CALL_OW 72
70475: NOT
70476: AND
70477: IFFALSE 70609
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70479: LD_ADDR_VAR 0 4
70483: PUSH
70484: LD_EXP 52
70488: PUSH
70489: LD_VAR 0 2
70493: ARRAY
70494: PPUSH
70495: LD_INT 2
70497: PUSH
70498: LD_INT 25
70500: PUSH
70501: LD_INT 1
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 25
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 25
70520: PUSH
70521: LD_INT 8
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 25
70530: PUSH
70531: LD_INT 9
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: PPUSH
70545: CALL_OW 72
70549: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
70550: LD_ADDR_VAR 0 4
70554: PUSH
70555: LD_VAR 0 4
70559: PUSH
70560: LD_VAR 0 4
70564: PPUSH
70565: LD_INT 18
70567: PPUSH
70568: CALL 51749 0 2
70572: DIFF
70573: ST_TO_ADDR
// if tmp then
70574: LD_VAR 0 4
70578: IFFALSE 70609
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
70580: LD_VAR 0 2
70584: PPUSH
70585: LD_VAR 0 4
70589: PPUSH
70590: LD_EXP 77
70594: PUSH
70595: LD_VAR 0 2
70599: ARRAY
70600: PPUSH
70601: CALL 12904 0 3
// exit ;
70605: POP
70606: POP
70607: GO 70682
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
70609: LD_EXP 75
70613: PUSH
70614: LD_VAR 0 2
70618: ARRAY
70619: PUSH
70620: LD_EXP 74
70624: PUSH
70625: LD_VAR 0 2
70629: ARRAY
70630: AND
70631: IFFALSE 70678
// begin tmp := mc_defender [ i ] ;
70633: LD_ADDR_VAR 0 4
70637: PUSH
70638: LD_EXP 74
70642: PUSH
70643: LD_VAR 0 2
70647: ARRAY
70648: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70649: LD_VAR 0 2
70653: PPUSH
70654: LD_VAR 0 4
70658: PPUSH
70659: LD_EXP 75
70663: PUSH
70664: LD_VAR 0 2
70668: ARRAY
70669: PPUSH
70670: CALL 13465 0 3
// exit ;
70674: POP
70675: POP
70676: GO 70682
// end ; end ;
70678: GO 70115
70680: POP
70681: POP
// end ;
70682: LD_VAR 0 1
70686: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
70687: LD_INT 0
70689: PPUSH
70690: PPUSH
70691: PPUSH
70692: PPUSH
70693: PPUSH
70694: PPUSH
70695: PPUSH
70696: PPUSH
70697: PPUSH
70698: PPUSH
70699: PPUSH
// if not mc_bases then
70700: LD_EXP 52
70704: NOT
70705: IFFALSE 70709
// exit ;
70707: GO 71796
// for i = 1 to mc_bases do
70709: LD_ADDR_VAR 0 2
70713: PUSH
70714: DOUBLE
70715: LD_INT 1
70717: DEC
70718: ST_TO_ADDR
70719: LD_EXP 52
70723: PUSH
70724: FOR_TO
70725: IFFALSE 71794
// begin tmp := mc_lab [ i ] ;
70727: LD_ADDR_VAR 0 6
70731: PUSH
70732: LD_EXP 85
70736: PUSH
70737: LD_VAR 0 2
70741: ARRAY
70742: ST_TO_ADDR
// if not tmp then
70743: LD_VAR 0 6
70747: NOT
70748: IFFALSE 70752
// continue ;
70750: GO 70724
// idle_lab := 0 ;
70752: LD_ADDR_VAR 0 11
70756: PUSH
70757: LD_INT 0
70759: ST_TO_ADDR
// for j in tmp do
70760: LD_ADDR_VAR 0 3
70764: PUSH
70765: LD_VAR 0 6
70769: PUSH
70770: FOR_IN
70771: IFFALSE 71790
// begin researching := false ;
70773: LD_ADDR_VAR 0 10
70777: PUSH
70778: LD_INT 0
70780: ST_TO_ADDR
// side := GetSide ( j ) ;
70781: LD_ADDR_VAR 0 4
70785: PUSH
70786: LD_VAR 0 3
70790: PPUSH
70791: CALL_OW 255
70795: ST_TO_ADDR
// if not mc_tech [ side ] then
70796: LD_EXP 79
70800: PUSH
70801: LD_VAR 0 4
70805: ARRAY
70806: NOT
70807: IFFALSE 70811
// continue ;
70809: GO 70770
// if BuildingStatus ( j ) = bs_idle then
70811: LD_VAR 0 3
70815: PPUSH
70816: CALL_OW 461
70820: PUSH
70821: LD_INT 2
70823: EQUAL
70824: IFFALSE 71012
// begin if idle_lab and UnitsInside ( j ) < 6 then
70826: LD_VAR 0 11
70830: PUSH
70831: LD_VAR 0 3
70835: PPUSH
70836: CALL_OW 313
70840: PUSH
70841: LD_INT 6
70843: LESS
70844: AND
70845: IFFALSE 70916
// begin tmp2 := UnitsInside ( idle_lab ) ;
70847: LD_ADDR_VAR 0 9
70851: PUSH
70852: LD_VAR 0 11
70856: PPUSH
70857: CALL_OW 313
70861: ST_TO_ADDR
// if tmp2 then
70862: LD_VAR 0 9
70866: IFFALSE 70908
// for x in tmp2 do
70868: LD_ADDR_VAR 0 7
70872: PUSH
70873: LD_VAR 0 9
70877: PUSH
70878: FOR_IN
70879: IFFALSE 70906
// begin ComExitBuilding ( x ) ;
70881: LD_VAR 0 7
70885: PPUSH
70886: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70890: LD_VAR 0 7
70894: PPUSH
70895: LD_VAR 0 3
70899: PPUSH
70900: CALL_OW 180
// end ;
70904: GO 70878
70906: POP
70907: POP
// idle_lab := 0 ;
70908: LD_ADDR_VAR 0 11
70912: PUSH
70913: LD_INT 0
70915: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
70916: LD_ADDR_VAR 0 5
70920: PUSH
70921: LD_EXP 79
70925: PUSH
70926: LD_VAR 0 4
70930: ARRAY
70931: PUSH
70932: FOR_IN
70933: IFFALSE 70993
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70935: LD_VAR 0 3
70939: PPUSH
70940: LD_VAR 0 5
70944: PPUSH
70945: CALL_OW 430
70949: PUSH
70950: LD_VAR 0 4
70954: PPUSH
70955: LD_VAR 0 5
70959: PPUSH
70960: CALL 11974 0 2
70964: AND
70965: IFFALSE 70991
// begin researching := true ;
70967: LD_ADDR_VAR 0 10
70971: PUSH
70972: LD_INT 1
70974: ST_TO_ADDR
// ComResearch ( j , t ) ;
70975: LD_VAR 0 3
70979: PPUSH
70980: LD_VAR 0 5
70984: PPUSH
70985: CALL_OW 124
// break ;
70989: GO 70993
// end ;
70991: GO 70932
70993: POP
70994: POP
// if not researching then
70995: LD_VAR 0 10
70999: NOT
71000: IFFALSE 71012
// idle_lab := j ;
71002: LD_ADDR_VAR 0 11
71006: PUSH
71007: LD_VAR 0 3
71011: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
71012: LD_VAR 0 3
71016: PPUSH
71017: CALL_OW 461
71021: PUSH
71022: LD_INT 10
71024: EQUAL
71025: IFFALSE 71613
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
71027: LD_EXP 81
71031: PUSH
71032: LD_VAR 0 2
71036: ARRAY
71037: NOT
71038: PUSH
71039: LD_EXP 82
71043: PUSH
71044: LD_VAR 0 2
71048: ARRAY
71049: NOT
71050: AND
71051: PUSH
71052: LD_EXP 79
71056: PUSH
71057: LD_VAR 0 4
71061: ARRAY
71062: PUSH
71063: LD_INT 1
71065: GREATER
71066: AND
71067: IFFALSE 71198
// begin ComCancel ( j ) ;
71069: LD_VAR 0 3
71073: PPUSH
71074: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
71078: LD_ADDR_EXP 79
71082: PUSH
71083: LD_EXP 79
71087: PPUSH
71088: LD_VAR 0 4
71092: PPUSH
71093: LD_EXP 79
71097: PUSH
71098: LD_VAR 0 4
71102: ARRAY
71103: PPUSH
71104: LD_EXP 79
71108: PUSH
71109: LD_VAR 0 4
71113: ARRAY
71114: PUSH
71115: LD_INT 1
71117: MINUS
71118: PPUSH
71119: LD_EXP 79
71123: PUSH
71124: LD_VAR 0 4
71128: ARRAY
71129: PPUSH
71130: LD_INT 0
71132: PPUSH
71133: CALL 17897 0 4
71137: PPUSH
71138: CALL_OW 1
71142: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
71143: LD_ADDR_EXP 79
71147: PUSH
71148: LD_EXP 79
71152: PPUSH
71153: LD_VAR 0 4
71157: PPUSH
71158: LD_EXP 79
71162: PUSH
71163: LD_VAR 0 4
71167: ARRAY
71168: PPUSH
71169: LD_EXP 79
71173: PUSH
71174: LD_VAR 0 4
71178: ARRAY
71179: PPUSH
71180: LD_INT 1
71182: PPUSH
71183: LD_INT 0
71185: PPUSH
71186: CALL 17897 0 4
71190: PPUSH
71191: CALL_OW 1
71195: ST_TO_ADDR
// continue ;
71196: GO 70770
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
71198: LD_EXP 81
71202: PUSH
71203: LD_VAR 0 2
71207: ARRAY
71208: PUSH
71209: LD_EXP 82
71213: PUSH
71214: LD_VAR 0 2
71218: ARRAY
71219: NOT
71220: AND
71221: IFFALSE 71348
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
71223: LD_ADDR_EXP 82
71227: PUSH
71228: LD_EXP 82
71232: PPUSH
71233: LD_VAR 0 2
71237: PUSH
71238: LD_EXP 82
71242: PUSH
71243: LD_VAR 0 2
71247: ARRAY
71248: PUSH
71249: LD_INT 1
71251: PLUS
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PPUSH
71257: LD_EXP 81
71261: PUSH
71262: LD_VAR 0 2
71266: ARRAY
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: PPUSH
71272: CALL 18479 0 3
71276: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
71277: LD_EXP 81
71281: PUSH
71282: LD_VAR 0 2
71286: ARRAY
71287: PUSH
71288: LD_INT 1
71290: ARRAY
71291: PPUSH
71292: LD_INT 112
71294: PPUSH
71295: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
71299: LD_ADDR_VAR 0 9
71303: PUSH
71304: LD_EXP 81
71308: PUSH
71309: LD_VAR 0 2
71313: ARRAY
71314: PPUSH
71315: LD_INT 1
71317: PPUSH
71318: CALL_OW 3
71322: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
71323: LD_ADDR_EXP 81
71327: PUSH
71328: LD_EXP 81
71332: PPUSH
71333: LD_VAR 0 2
71337: PPUSH
71338: LD_VAR 0 9
71342: PPUSH
71343: CALL_OW 1
71347: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
71348: LD_EXP 81
71352: PUSH
71353: LD_VAR 0 2
71357: ARRAY
71358: PUSH
71359: LD_EXP 82
71363: PUSH
71364: LD_VAR 0 2
71368: ARRAY
71369: AND
71370: PUSH
71371: LD_EXP 82
71375: PUSH
71376: LD_VAR 0 2
71380: ARRAY
71381: PUSH
71382: LD_INT 1
71384: ARRAY
71385: PPUSH
71386: CALL_OW 310
71390: NOT
71391: AND
71392: PUSH
71393: LD_VAR 0 3
71397: PPUSH
71398: CALL_OW 313
71402: PUSH
71403: LD_INT 6
71405: EQUAL
71406: AND
71407: IFFALSE 71463
// begin tmp2 := UnitsInside ( j ) ;
71409: LD_ADDR_VAR 0 9
71413: PUSH
71414: LD_VAR 0 3
71418: PPUSH
71419: CALL_OW 313
71423: ST_TO_ADDR
// if tmp2 = 6 then
71424: LD_VAR 0 9
71428: PUSH
71429: LD_INT 6
71431: EQUAL
71432: IFFALSE 71463
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71434: LD_VAR 0 9
71438: PUSH
71439: LD_INT 1
71441: ARRAY
71442: PPUSH
71443: LD_INT 112
71445: PPUSH
71446: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71450: LD_VAR 0 9
71454: PUSH
71455: LD_INT 1
71457: ARRAY
71458: PPUSH
71459: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71463: LD_EXP 82
71467: PUSH
71468: LD_VAR 0 2
71472: ARRAY
71473: PUSH
71474: LD_EXP 82
71478: PUSH
71479: LD_VAR 0 2
71483: ARRAY
71484: PUSH
71485: LD_INT 1
71487: ARRAY
71488: PPUSH
71489: CALL_OW 314
71493: NOT
71494: AND
71495: PUSH
71496: LD_EXP 82
71500: PUSH
71501: LD_VAR 0 2
71505: ARRAY
71506: PUSH
71507: LD_INT 1
71509: ARRAY
71510: PPUSH
71511: CALL_OW 310
71515: NOT
71516: AND
71517: IFFALSE 71543
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71519: LD_EXP 82
71523: PUSH
71524: LD_VAR 0 2
71528: ARRAY
71529: PUSH
71530: LD_INT 1
71532: ARRAY
71533: PPUSH
71534: LD_VAR 0 3
71538: PPUSH
71539: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71543: LD_EXP 82
71547: PUSH
71548: LD_VAR 0 2
71552: ARRAY
71553: PUSH
71554: LD_INT 1
71556: ARRAY
71557: PPUSH
71558: CALL_OW 310
71562: PUSH
71563: LD_EXP 82
71567: PUSH
71568: LD_VAR 0 2
71572: ARRAY
71573: PUSH
71574: LD_INT 1
71576: ARRAY
71577: PPUSH
71578: CALL_OW 310
71582: PPUSH
71583: CALL_OW 461
71587: PUSH
71588: LD_INT 3
71590: NONEQUAL
71591: AND
71592: IFFALSE 71613
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71594: LD_EXP 82
71598: PUSH
71599: LD_VAR 0 2
71603: ARRAY
71604: PUSH
71605: LD_INT 1
71607: ARRAY
71608: PPUSH
71609: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71613: LD_VAR 0 3
71617: PPUSH
71618: CALL_OW 461
71622: PUSH
71623: LD_INT 6
71625: EQUAL
71626: PUSH
71627: LD_VAR 0 6
71631: PUSH
71632: LD_INT 1
71634: GREATER
71635: AND
71636: IFFALSE 71788
// begin sci := [ ] ;
71638: LD_ADDR_VAR 0 8
71642: PUSH
71643: EMPTY
71644: ST_TO_ADDR
// for x in ( tmp diff j ) do
71645: LD_ADDR_VAR 0 7
71649: PUSH
71650: LD_VAR 0 6
71654: PUSH
71655: LD_VAR 0 3
71659: DIFF
71660: PUSH
71661: FOR_IN
71662: IFFALSE 71714
// begin if sci = 6 then
71664: LD_VAR 0 8
71668: PUSH
71669: LD_INT 6
71671: EQUAL
71672: IFFALSE 71676
// break ;
71674: GO 71714
// if BuildingStatus ( x ) = bs_idle then
71676: LD_VAR 0 7
71680: PPUSH
71681: CALL_OW 461
71685: PUSH
71686: LD_INT 2
71688: EQUAL
71689: IFFALSE 71712
// sci := sci ^ UnitsInside ( x ) ;
71691: LD_ADDR_VAR 0 8
71695: PUSH
71696: LD_VAR 0 8
71700: PUSH
71701: LD_VAR 0 7
71705: PPUSH
71706: CALL_OW 313
71710: ADD
71711: ST_TO_ADDR
// end ;
71712: GO 71661
71714: POP
71715: POP
// if not sci then
71716: LD_VAR 0 8
71720: NOT
71721: IFFALSE 71725
// continue ;
71723: GO 70770
// for x in sci do
71725: LD_ADDR_VAR 0 7
71729: PUSH
71730: LD_VAR 0 8
71734: PUSH
71735: FOR_IN
71736: IFFALSE 71786
// if IsInUnit ( x ) and not HasTask ( x ) then
71738: LD_VAR 0 7
71742: PPUSH
71743: CALL_OW 310
71747: PUSH
71748: LD_VAR 0 7
71752: PPUSH
71753: CALL_OW 314
71757: NOT
71758: AND
71759: IFFALSE 71784
// begin ComExitBuilding ( x ) ;
71761: LD_VAR 0 7
71765: PPUSH
71766: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71770: LD_VAR 0 7
71774: PPUSH
71775: LD_VAR 0 3
71779: PPUSH
71780: CALL_OW 180
// end ;
71784: GO 71735
71786: POP
71787: POP
// end ; end ;
71788: GO 70770
71790: POP
71791: POP
// end ;
71792: GO 70724
71794: POP
71795: POP
// end ;
71796: LD_VAR 0 1
71800: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
71801: LD_INT 0
71803: PPUSH
71804: PPUSH
// if not mc_bases then
71805: LD_EXP 52
71809: NOT
71810: IFFALSE 71814
// exit ;
71812: GO 71895
// for i = 1 to mc_bases do
71814: LD_ADDR_VAR 0 2
71818: PUSH
71819: DOUBLE
71820: LD_INT 1
71822: DEC
71823: ST_TO_ADDR
71824: LD_EXP 52
71828: PUSH
71829: FOR_TO
71830: IFFALSE 71893
// if mc_mines [ i ] and mc_miners [ i ] then
71832: LD_EXP 65
71836: PUSH
71837: LD_VAR 0 2
71841: ARRAY
71842: PUSH
71843: LD_EXP 66
71847: PUSH
71848: LD_VAR 0 2
71852: ARRAY
71853: AND
71854: IFFALSE 71891
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
71856: LD_EXP 66
71860: PUSH
71861: LD_VAR 0 2
71865: ARRAY
71866: PUSH
71867: LD_INT 1
71869: ARRAY
71870: PPUSH
71871: CALL_OW 255
71875: PPUSH
71876: LD_EXP 65
71880: PUSH
71881: LD_VAR 0 2
71885: ARRAY
71886: PPUSH
71887: CALL 15468 0 2
71891: GO 71829
71893: POP
71894: POP
// end ;
71895: LD_VAR 0 1
71899: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71900: LD_INT 0
71902: PPUSH
71903: PPUSH
71904: PPUSH
71905: PPUSH
71906: PPUSH
71907: PPUSH
71908: PPUSH
71909: PPUSH
// if not mc_bases or not mc_parking then
71910: LD_EXP 52
71914: NOT
71915: PUSH
71916: LD_EXP 76
71920: NOT
71921: OR
71922: IFFALSE 71926
// exit ;
71924: GO 72625
// for i = 1 to mc_bases do
71926: LD_ADDR_VAR 0 2
71930: PUSH
71931: DOUBLE
71932: LD_INT 1
71934: DEC
71935: ST_TO_ADDR
71936: LD_EXP 52
71940: PUSH
71941: FOR_TO
71942: IFFALSE 72623
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71944: LD_EXP 52
71948: PUSH
71949: LD_VAR 0 2
71953: ARRAY
71954: NOT
71955: PUSH
71956: LD_EXP 76
71960: PUSH
71961: LD_VAR 0 2
71965: ARRAY
71966: NOT
71967: OR
71968: IFFALSE 71972
// continue ;
71970: GO 71941
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71972: LD_ADDR_VAR 0 5
71976: PUSH
71977: LD_EXP 52
71981: PUSH
71982: LD_VAR 0 2
71986: ARRAY
71987: PUSH
71988: LD_INT 1
71990: ARRAY
71991: PPUSH
71992: CALL_OW 255
71996: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71997: LD_ADDR_VAR 0 6
72001: PUSH
72002: LD_EXP 52
72006: PUSH
72007: LD_VAR 0 2
72011: ARRAY
72012: PPUSH
72013: LD_INT 30
72015: PUSH
72016: LD_INT 3
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PPUSH
72023: CALL_OW 72
72027: ST_TO_ADDR
// if not fac then
72028: LD_VAR 0 6
72032: NOT
72033: IFFALSE 72084
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72035: LD_ADDR_VAR 0 6
72039: PUSH
72040: LD_EXP 52
72044: PUSH
72045: LD_VAR 0 2
72049: ARRAY
72050: PPUSH
72051: LD_INT 2
72053: PUSH
72054: LD_INT 30
72056: PUSH
72057: LD_INT 0
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 30
72066: PUSH
72067: LD_INT 1
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: LIST
72078: PPUSH
72079: CALL_OW 72
72083: ST_TO_ADDR
// if not fac then
72084: LD_VAR 0 6
72088: NOT
72089: IFFALSE 72093
// continue ;
72091: GO 71941
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
72093: LD_ADDR_VAR 0 7
72097: PUSH
72098: LD_EXP 76
72102: PUSH
72103: LD_VAR 0 2
72107: ARRAY
72108: PPUSH
72109: LD_INT 22
72111: PUSH
72112: LD_VAR 0 5
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 21
72123: PUSH
72124: LD_INT 2
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 3
72133: PUSH
72134: LD_INT 24
72136: PUSH
72137: LD_INT 1000
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PPUSH
72153: CALL_OW 70
72157: ST_TO_ADDR
// for j in fac do
72158: LD_ADDR_VAR 0 3
72162: PUSH
72163: LD_VAR 0 6
72167: PUSH
72168: FOR_IN
72169: IFFALSE 72250
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
72171: LD_ADDR_VAR 0 7
72175: PUSH
72176: LD_VAR 0 7
72180: PUSH
72181: LD_INT 22
72183: PUSH
72184: LD_VAR 0 5
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 91
72195: PUSH
72196: LD_VAR 0 3
72200: PUSH
72201: LD_INT 15
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 21
72211: PUSH
72212: LD_INT 2
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 3
72221: PUSH
72222: LD_INT 24
72224: PUSH
72225: LD_INT 1000
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: PPUSH
72242: CALL_OW 69
72246: UNION
72247: ST_TO_ADDR
72248: GO 72168
72250: POP
72251: POP
// if not vehs then
72252: LD_VAR 0 7
72256: NOT
72257: IFFALSE 72283
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72259: LD_ADDR_EXP 64
72263: PUSH
72264: LD_EXP 64
72268: PPUSH
72269: LD_VAR 0 2
72273: PPUSH
72274: EMPTY
72275: PPUSH
72276: CALL_OW 1
72280: ST_TO_ADDR
// continue ;
72281: GO 71941
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72283: LD_ADDR_VAR 0 8
72287: PUSH
72288: LD_EXP 52
72292: PUSH
72293: LD_VAR 0 2
72297: ARRAY
72298: PPUSH
72299: LD_INT 30
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PPUSH
72309: CALL_OW 72
72313: ST_TO_ADDR
// if tmp then
72314: LD_VAR 0 8
72318: IFFALSE 72421
// begin for j in tmp do
72320: LD_ADDR_VAR 0 3
72324: PUSH
72325: LD_VAR 0 8
72329: PUSH
72330: FOR_IN
72331: IFFALSE 72419
// for k in UnitsInside ( j ) do
72333: LD_ADDR_VAR 0 4
72337: PUSH
72338: LD_VAR 0 3
72342: PPUSH
72343: CALL_OW 313
72347: PUSH
72348: FOR_IN
72349: IFFALSE 72415
// if k then
72351: LD_VAR 0 4
72355: IFFALSE 72413
// if not k in mc_repair_vehicle [ i ] then
72357: LD_VAR 0 4
72361: PUSH
72362: LD_EXP 64
72366: PUSH
72367: LD_VAR 0 2
72371: ARRAY
72372: IN
72373: NOT
72374: IFFALSE 72413
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
72376: LD_ADDR_EXP 64
72380: PUSH
72381: LD_EXP 64
72385: PPUSH
72386: LD_VAR 0 2
72390: PPUSH
72391: LD_EXP 64
72395: PUSH
72396: LD_VAR 0 2
72400: ARRAY
72401: PUSH
72402: LD_VAR 0 4
72406: UNION
72407: PPUSH
72408: CALL_OW 1
72412: ST_TO_ADDR
72413: GO 72348
72415: POP
72416: POP
72417: GO 72330
72419: POP
72420: POP
// end ; if not mc_repair_vehicle [ i ] then
72421: LD_EXP 64
72425: PUSH
72426: LD_VAR 0 2
72430: ARRAY
72431: NOT
72432: IFFALSE 72436
// continue ;
72434: GO 71941
// for j in mc_repair_vehicle [ i ] do
72436: LD_ADDR_VAR 0 3
72440: PUSH
72441: LD_EXP 64
72445: PUSH
72446: LD_VAR 0 2
72450: ARRAY
72451: PUSH
72452: FOR_IN
72453: IFFALSE 72619
// begin if GetClass ( j ) <> 3 then
72455: LD_VAR 0 3
72459: PPUSH
72460: CALL_OW 257
72464: PUSH
72465: LD_INT 3
72467: NONEQUAL
72468: IFFALSE 72509
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
72470: LD_ADDR_EXP 64
72474: PUSH
72475: LD_EXP 64
72479: PPUSH
72480: LD_VAR 0 2
72484: PPUSH
72485: LD_EXP 64
72489: PUSH
72490: LD_VAR 0 2
72494: ARRAY
72495: PUSH
72496: LD_VAR 0 3
72500: DIFF
72501: PPUSH
72502: CALL_OW 1
72506: ST_TO_ADDR
// continue ;
72507: GO 72452
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72509: LD_VAR 0 3
72513: PPUSH
72514: CALL_OW 311
72518: NOT
72519: PUSH
72520: LD_VAR 0 3
72524: PUSH
72525: LD_EXP 55
72529: PUSH
72530: LD_VAR 0 2
72534: ARRAY
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: IN
72540: NOT
72541: AND
72542: PUSH
72543: LD_VAR 0 3
72547: PUSH
72548: LD_EXP 55
72552: PUSH
72553: LD_VAR 0 2
72557: ARRAY
72558: PUSH
72559: LD_INT 2
72561: ARRAY
72562: IN
72563: NOT
72564: AND
72565: IFFALSE 72617
// begin if IsInUnit ( j ) then
72567: LD_VAR 0 3
72571: PPUSH
72572: CALL_OW 310
72576: IFFALSE 72587
// ComExitBuilding ( j ) ;
72578: LD_VAR 0 3
72582: PPUSH
72583: CALL_OW 122
// if not HasTask ( j ) then
72587: LD_VAR 0 3
72591: PPUSH
72592: CALL_OW 314
72596: NOT
72597: IFFALSE 72617
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72599: LD_VAR 0 3
72603: PPUSH
72604: LD_VAR 0 7
72608: PUSH
72609: LD_INT 1
72611: ARRAY
72612: PPUSH
72613: CALL_OW 189
// end ; end ;
72617: GO 72452
72619: POP
72620: POP
// end ;
72621: GO 71941
72623: POP
72624: POP
// end ;
72625: LD_VAR 0 1
72629: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72630: LD_INT 0
72632: PPUSH
72633: PPUSH
72634: PPUSH
72635: PPUSH
72636: PPUSH
72637: PPUSH
72638: PPUSH
72639: PPUSH
72640: PPUSH
72641: PPUSH
72642: PPUSH
// if not mc_bases then
72643: LD_EXP 52
72647: NOT
72648: IFFALSE 72652
// exit ;
72650: GO 73454
// for i = 1 to mc_bases do
72652: LD_ADDR_VAR 0 2
72656: PUSH
72657: DOUBLE
72658: LD_INT 1
72660: DEC
72661: ST_TO_ADDR
72662: LD_EXP 52
72666: PUSH
72667: FOR_TO
72668: IFFALSE 73452
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72670: LD_EXP 80
72674: PUSH
72675: LD_VAR 0 2
72679: ARRAY
72680: NOT
72681: PUSH
72682: LD_EXP 55
72686: PUSH
72687: LD_VAR 0 2
72691: ARRAY
72692: PUSH
72693: LD_INT 1
72695: ARRAY
72696: OR
72697: PUSH
72698: LD_EXP 55
72702: PUSH
72703: LD_VAR 0 2
72707: ARRAY
72708: PUSH
72709: LD_INT 2
72711: ARRAY
72712: OR
72713: PUSH
72714: LD_EXP 78
72718: PUSH
72719: LD_VAR 0 2
72723: ARRAY
72724: PPUSH
72725: LD_INT 1
72727: PPUSH
72728: CALL_OW 325
72732: NOT
72733: OR
72734: PUSH
72735: LD_EXP 75
72739: PUSH
72740: LD_VAR 0 2
72744: ARRAY
72745: OR
72746: IFFALSE 72750
// continue ;
72748: GO 72667
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72750: LD_ADDR_VAR 0 8
72754: PUSH
72755: LD_EXP 52
72759: PUSH
72760: LD_VAR 0 2
72764: ARRAY
72765: PPUSH
72766: LD_INT 25
72768: PUSH
72769: LD_INT 4
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 50
72778: PUSH
72779: EMPTY
72780: LIST
72781: PUSH
72782: LD_INT 3
72784: PUSH
72785: LD_INT 60
72787: PUSH
72788: EMPTY
72789: LIST
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: LIST
72799: PPUSH
72800: CALL_OW 72
72804: PUSH
72805: LD_EXP 56
72809: PUSH
72810: LD_VAR 0 2
72814: ARRAY
72815: DIFF
72816: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72817: LD_ADDR_VAR 0 9
72821: PUSH
72822: LD_EXP 52
72826: PUSH
72827: LD_VAR 0 2
72831: ARRAY
72832: PPUSH
72833: LD_INT 2
72835: PUSH
72836: LD_INT 30
72838: PUSH
72839: LD_INT 0
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 30
72848: PUSH
72849: LD_INT 1
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: LIST
72860: PPUSH
72861: CALL_OW 72
72865: ST_TO_ADDR
// if not tmp or not dep then
72866: LD_VAR 0 8
72870: NOT
72871: PUSH
72872: LD_VAR 0 9
72876: NOT
72877: OR
72878: IFFALSE 72882
// continue ;
72880: GO 72667
// side := GetSide ( tmp [ 1 ] ) ;
72882: LD_ADDR_VAR 0 11
72886: PUSH
72887: LD_VAR 0 8
72891: PUSH
72892: LD_INT 1
72894: ARRAY
72895: PPUSH
72896: CALL_OW 255
72900: ST_TO_ADDR
// dep := dep [ 1 ] ;
72901: LD_ADDR_VAR 0 9
72905: PUSH
72906: LD_VAR 0 9
72910: PUSH
72911: LD_INT 1
72913: ARRAY
72914: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72915: LD_ADDR_VAR 0 7
72919: PUSH
72920: LD_EXP 80
72924: PUSH
72925: LD_VAR 0 2
72929: ARRAY
72930: PPUSH
72931: LD_INT 22
72933: PUSH
72934: LD_INT 0
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 25
72943: PUSH
72944: LD_INT 12
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PPUSH
72955: CALL_OW 70
72959: PUSH
72960: LD_INT 22
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 25
72972: PUSH
72973: LD_INT 12
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 91
72982: PUSH
72983: LD_VAR 0 9
72987: PUSH
72988: LD_INT 20
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: LIST
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: LIST
73000: PPUSH
73001: CALL_OW 69
73005: UNION
73006: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
73007: LD_ADDR_VAR 0 10
73011: PUSH
73012: LD_EXP 80
73016: PUSH
73017: LD_VAR 0 2
73021: ARRAY
73022: PPUSH
73023: LD_INT 81
73025: PUSH
73026: LD_VAR 0 11
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PPUSH
73035: CALL_OW 70
73039: ST_TO_ADDR
// if not apes or danger_at_area then
73040: LD_VAR 0 7
73044: NOT
73045: PUSH
73046: LD_VAR 0 10
73050: OR
73051: IFFALSE 73101
// begin if mc_taming [ i ] then
73053: LD_EXP 83
73057: PUSH
73058: LD_VAR 0 2
73062: ARRAY
73063: IFFALSE 73099
// begin MC_Reset ( i , 121 ) ;
73065: LD_VAR 0 2
73069: PPUSH
73070: LD_INT 121
73072: PPUSH
73073: CALL 58536 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
73077: LD_ADDR_EXP 83
73081: PUSH
73082: LD_EXP 83
73086: PPUSH
73087: LD_VAR 0 2
73091: PPUSH
73092: EMPTY
73093: PPUSH
73094: CALL_OW 1
73098: ST_TO_ADDR
// end ; continue ;
73099: GO 72667
// end ; for j in tmp do
73101: LD_ADDR_VAR 0 3
73105: PUSH
73106: LD_VAR 0 8
73110: PUSH
73111: FOR_IN
73112: IFFALSE 73448
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
73114: LD_VAR 0 3
73118: PUSH
73119: LD_EXP 83
73123: PUSH
73124: LD_VAR 0 2
73128: ARRAY
73129: IN
73130: NOT
73131: PUSH
73132: LD_EXP 83
73136: PUSH
73137: LD_VAR 0 2
73141: ARRAY
73142: PUSH
73143: LD_INT 3
73145: LESS
73146: AND
73147: IFFALSE 73205
// begin SetTag ( j , 121 ) ;
73149: LD_VAR 0 3
73153: PPUSH
73154: LD_INT 121
73156: PPUSH
73157: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
73161: LD_ADDR_EXP 83
73165: PUSH
73166: LD_EXP 83
73170: PPUSH
73171: LD_VAR 0 2
73175: PUSH
73176: LD_EXP 83
73180: PUSH
73181: LD_VAR 0 2
73185: ARRAY
73186: PUSH
73187: LD_INT 1
73189: PLUS
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PPUSH
73195: LD_VAR 0 3
73199: PPUSH
73200: CALL 18479 0 3
73204: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
73205: LD_VAR 0 3
73209: PUSH
73210: LD_EXP 83
73214: PUSH
73215: LD_VAR 0 2
73219: ARRAY
73220: IN
73221: IFFALSE 73446
// begin if GetClass ( j ) <> 4 then
73223: LD_VAR 0 3
73227: PPUSH
73228: CALL_OW 257
73232: PUSH
73233: LD_INT 4
73235: NONEQUAL
73236: IFFALSE 73289
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
73238: LD_ADDR_EXP 83
73242: PUSH
73243: LD_EXP 83
73247: PPUSH
73248: LD_VAR 0 2
73252: PPUSH
73253: LD_EXP 83
73257: PUSH
73258: LD_VAR 0 2
73262: ARRAY
73263: PUSH
73264: LD_VAR 0 3
73268: DIFF
73269: PPUSH
73270: CALL_OW 1
73274: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73275: LD_VAR 0 3
73279: PPUSH
73280: LD_INT 0
73282: PPUSH
73283: CALL_OW 109
// continue ;
73287: GO 73111
// end ; if IsInUnit ( j ) then
73289: LD_VAR 0 3
73293: PPUSH
73294: CALL_OW 310
73298: IFFALSE 73309
// ComExitBuilding ( j ) ;
73300: LD_VAR 0 3
73304: PPUSH
73305: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
73309: LD_ADDR_VAR 0 6
73313: PUSH
73314: LD_VAR 0 7
73318: PPUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: CALL_OW 74
73328: ST_TO_ADDR
// if not ape then
73329: LD_VAR 0 6
73333: NOT
73334: IFFALSE 73338
// break ;
73336: GO 73448
// x := GetX ( ape ) ;
73338: LD_ADDR_VAR 0 4
73342: PUSH
73343: LD_VAR 0 6
73347: PPUSH
73348: CALL_OW 250
73352: ST_TO_ADDR
// y := GetY ( ape ) ;
73353: LD_ADDR_VAR 0 5
73357: PUSH
73358: LD_VAR 0 6
73362: PPUSH
73363: CALL_OW 251
73367: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73368: LD_VAR 0 4
73372: PPUSH
73373: LD_VAR 0 5
73377: PPUSH
73378: CALL_OW 488
73382: NOT
73383: PUSH
73384: LD_VAR 0 11
73388: PPUSH
73389: LD_VAR 0 4
73393: PPUSH
73394: LD_VAR 0 5
73398: PPUSH
73399: LD_INT 20
73401: PPUSH
73402: CALL 19375 0 4
73406: PUSH
73407: LD_INT 4
73409: ARRAY
73410: OR
73411: IFFALSE 73415
// break ;
73413: GO 73448
// if not HasTask ( j ) then
73415: LD_VAR 0 3
73419: PPUSH
73420: CALL_OW 314
73424: NOT
73425: IFFALSE 73446
// ComTameXY ( j , x , y ) ;
73427: LD_VAR 0 3
73431: PPUSH
73432: LD_VAR 0 4
73436: PPUSH
73437: LD_VAR 0 5
73441: PPUSH
73442: CALL_OW 131
// end ; end ;
73446: GO 73111
73448: POP
73449: POP
// end ;
73450: GO 72667
73452: POP
73453: POP
// end ;
73454: LD_VAR 0 1
73458: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
73459: LD_INT 0
73461: PPUSH
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
// if not mc_bases then
73469: LD_EXP 52
73473: NOT
73474: IFFALSE 73478
// exit ;
73476: GO 74104
// for i = 1 to mc_bases do
73478: LD_ADDR_VAR 0 2
73482: PUSH
73483: DOUBLE
73484: LD_INT 1
73486: DEC
73487: ST_TO_ADDR
73488: LD_EXP 52
73492: PUSH
73493: FOR_TO
73494: IFFALSE 74102
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
73496: LD_EXP 81
73500: PUSH
73501: LD_VAR 0 2
73505: ARRAY
73506: NOT
73507: PUSH
73508: LD_EXP 81
73512: PUSH
73513: LD_VAR 0 2
73517: ARRAY
73518: PPUSH
73519: LD_INT 25
73521: PUSH
73522: LD_INT 12
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PPUSH
73529: CALL_OW 72
73533: NOT
73534: OR
73535: IFFALSE 73539
// continue ;
73537: GO 73493
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73539: LD_ADDR_VAR 0 5
73543: PUSH
73544: LD_EXP 81
73548: PUSH
73549: LD_VAR 0 2
73553: ARRAY
73554: PUSH
73555: LD_INT 1
73557: ARRAY
73558: PPUSH
73559: CALL_OW 255
73563: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73564: LD_VAR 0 5
73568: PPUSH
73569: LD_INT 2
73571: PPUSH
73572: CALL_OW 325
73576: IFFALSE 73829
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73578: LD_ADDR_VAR 0 4
73582: PUSH
73583: LD_EXP 81
73587: PUSH
73588: LD_VAR 0 2
73592: ARRAY
73593: PPUSH
73594: LD_INT 25
73596: PUSH
73597: LD_INT 16
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PPUSH
73604: CALL_OW 72
73608: ST_TO_ADDR
// if tmp < 6 then
73609: LD_VAR 0 4
73613: PUSH
73614: LD_INT 6
73616: LESS
73617: IFFALSE 73829
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73619: LD_ADDR_VAR 0 6
73623: PUSH
73624: LD_EXP 52
73628: PUSH
73629: LD_VAR 0 2
73633: ARRAY
73634: PPUSH
73635: LD_INT 2
73637: PUSH
73638: LD_INT 30
73640: PUSH
73641: LD_INT 0
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 30
73650: PUSH
73651: LD_INT 1
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: LIST
73662: PPUSH
73663: CALL_OW 72
73667: ST_TO_ADDR
// if depot then
73668: LD_VAR 0 6
73672: IFFALSE 73829
// begin selected := 0 ;
73674: LD_ADDR_VAR 0 7
73678: PUSH
73679: LD_INT 0
73681: ST_TO_ADDR
// for j in depot do
73682: LD_ADDR_VAR 0 3
73686: PUSH
73687: LD_VAR 0 6
73691: PUSH
73692: FOR_IN
73693: IFFALSE 73724
// begin if UnitsInside ( j ) < 6 then
73695: LD_VAR 0 3
73699: PPUSH
73700: CALL_OW 313
73704: PUSH
73705: LD_INT 6
73707: LESS
73708: IFFALSE 73722
// begin selected := j ;
73710: LD_ADDR_VAR 0 7
73714: PUSH
73715: LD_VAR 0 3
73719: ST_TO_ADDR
// break ;
73720: GO 73724
// end ; end ;
73722: GO 73692
73724: POP
73725: POP
// if selected then
73726: LD_VAR 0 7
73730: IFFALSE 73829
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73732: LD_ADDR_VAR 0 3
73736: PUSH
73737: LD_EXP 81
73741: PUSH
73742: LD_VAR 0 2
73746: ARRAY
73747: PPUSH
73748: LD_INT 25
73750: PUSH
73751: LD_INT 12
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PPUSH
73758: CALL_OW 72
73762: PUSH
73763: FOR_IN
73764: IFFALSE 73827
// if not HasTask ( j ) then
73766: LD_VAR 0 3
73770: PPUSH
73771: CALL_OW 314
73775: NOT
73776: IFFALSE 73825
// begin if not IsInUnit ( j ) then
73778: LD_VAR 0 3
73782: PPUSH
73783: CALL_OW 310
73787: NOT
73788: IFFALSE 73804
// ComEnterUnit ( j , selected ) ;
73790: LD_VAR 0 3
73794: PPUSH
73795: LD_VAR 0 7
73799: PPUSH
73800: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73804: LD_VAR 0 3
73808: PPUSH
73809: LD_INT 16
73811: PPUSH
73812: CALL_OW 183
// AddComExitBuilding ( j ) ;
73816: LD_VAR 0 3
73820: PPUSH
73821: CALL_OW 182
// end ;
73825: GO 73763
73827: POP
73828: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73829: LD_VAR 0 5
73833: PPUSH
73834: LD_INT 11
73836: PPUSH
73837: CALL_OW 325
73841: IFFALSE 74100
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73843: LD_ADDR_VAR 0 4
73847: PUSH
73848: LD_EXP 81
73852: PUSH
73853: LD_VAR 0 2
73857: ARRAY
73858: PPUSH
73859: LD_INT 25
73861: PUSH
73862: LD_INT 16
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PPUSH
73869: CALL_OW 72
73873: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73874: LD_VAR 0 4
73878: PUSH
73879: LD_INT 6
73881: GREATEREQUAL
73882: PUSH
73883: LD_VAR 0 5
73887: PPUSH
73888: LD_INT 2
73890: PPUSH
73891: CALL_OW 325
73895: NOT
73896: OR
73897: IFFALSE 74100
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73899: LD_ADDR_VAR 0 8
73903: PUSH
73904: LD_EXP 52
73908: PUSH
73909: LD_VAR 0 2
73913: ARRAY
73914: PPUSH
73915: LD_INT 2
73917: PUSH
73918: LD_INT 30
73920: PUSH
73921: LD_INT 4
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 30
73930: PUSH
73931: LD_INT 5
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: LIST
73942: PPUSH
73943: CALL_OW 72
73947: ST_TO_ADDR
// if barracks then
73948: LD_VAR 0 8
73952: IFFALSE 74100
// begin selected := 0 ;
73954: LD_ADDR_VAR 0 7
73958: PUSH
73959: LD_INT 0
73961: ST_TO_ADDR
// for j in barracks do
73962: LD_ADDR_VAR 0 3
73966: PUSH
73967: LD_VAR 0 8
73971: PUSH
73972: FOR_IN
73973: IFFALSE 74004
// begin if UnitsInside ( j ) < 6 then
73975: LD_VAR 0 3
73979: PPUSH
73980: CALL_OW 313
73984: PUSH
73985: LD_INT 6
73987: LESS
73988: IFFALSE 74002
// begin selected := j ;
73990: LD_ADDR_VAR 0 7
73994: PUSH
73995: LD_VAR 0 3
73999: ST_TO_ADDR
// break ;
74000: GO 74004
// end ; end ;
74002: GO 73972
74004: POP
74005: POP
// if selected then
74006: LD_VAR 0 7
74010: IFFALSE 74100
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
74012: LD_ADDR_VAR 0 3
74016: PUSH
74017: LD_EXP 81
74021: PUSH
74022: LD_VAR 0 2
74026: ARRAY
74027: PPUSH
74028: LD_INT 25
74030: PUSH
74031: LD_INT 12
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PPUSH
74038: CALL_OW 72
74042: PUSH
74043: FOR_IN
74044: IFFALSE 74098
// if not IsInUnit ( j ) and not HasTask ( j ) then
74046: LD_VAR 0 3
74050: PPUSH
74051: CALL_OW 310
74055: NOT
74056: PUSH
74057: LD_VAR 0 3
74061: PPUSH
74062: CALL_OW 314
74066: NOT
74067: AND
74068: IFFALSE 74096
// begin ComEnterUnit ( j , selected ) ;
74070: LD_VAR 0 3
74074: PPUSH
74075: LD_VAR 0 7
74079: PPUSH
74080: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
74084: LD_VAR 0 3
74088: PPUSH
74089: LD_INT 15
74091: PPUSH
74092: CALL_OW 183
// end ;
74096: GO 74043
74098: POP
74099: POP
// end ; end ; end ; end ; end ;
74100: GO 73493
74102: POP
74103: POP
// end ;
74104: LD_VAR 0 1
74108: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
74109: LD_INT 0
74111: PPUSH
74112: PPUSH
74113: PPUSH
74114: PPUSH
// if not mc_bases then
74115: LD_EXP 52
74119: NOT
74120: IFFALSE 74124
// exit ;
74122: GO 74302
// for i = 1 to mc_bases do
74124: LD_ADDR_VAR 0 2
74128: PUSH
74129: DOUBLE
74130: LD_INT 1
74132: DEC
74133: ST_TO_ADDR
74134: LD_EXP 52
74138: PUSH
74139: FOR_TO
74140: IFFALSE 74300
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
74142: LD_ADDR_VAR 0 4
74146: PUSH
74147: LD_EXP 52
74151: PUSH
74152: LD_VAR 0 2
74156: ARRAY
74157: PPUSH
74158: LD_INT 25
74160: PUSH
74161: LD_INT 9
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PPUSH
74168: CALL_OW 72
74172: ST_TO_ADDR
// if not tmp then
74173: LD_VAR 0 4
74177: NOT
74178: IFFALSE 74182
// continue ;
74180: GO 74139
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
74182: LD_EXP 78
74186: PUSH
74187: LD_VAR 0 2
74191: ARRAY
74192: PPUSH
74193: LD_INT 29
74195: PPUSH
74196: CALL_OW 325
74200: NOT
74201: PUSH
74202: LD_EXP 78
74206: PUSH
74207: LD_VAR 0 2
74211: ARRAY
74212: PPUSH
74213: LD_INT 28
74215: PPUSH
74216: CALL_OW 325
74220: NOT
74221: AND
74222: IFFALSE 74226
// continue ;
74224: GO 74139
// for j in tmp do
74226: LD_ADDR_VAR 0 3
74230: PUSH
74231: LD_VAR 0 4
74235: PUSH
74236: FOR_IN
74237: IFFALSE 74296
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74239: LD_VAR 0 3
74243: PUSH
74244: LD_EXP 55
74248: PUSH
74249: LD_VAR 0 2
74253: ARRAY
74254: PUSH
74255: LD_INT 1
74257: ARRAY
74258: IN
74259: NOT
74260: PUSH
74261: LD_VAR 0 3
74265: PUSH
74266: LD_EXP 55
74270: PUSH
74271: LD_VAR 0 2
74275: ARRAY
74276: PUSH
74277: LD_INT 2
74279: ARRAY
74280: IN
74281: NOT
74282: AND
74283: IFFALSE 74294
// ComSpaceTimeShoot ( j ) ;
74285: LD_VAR 0 3
74289: PPUSH
74290: CALL 12065 0 1
74294: GO 74236
74296: POP
74297: POP
// end ;
74298: GO 74139
74300: POP
74301: POP
// end ;
74302: LD_VAR 0 1
74306: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
74307: LD_INT 0
74309: PPUSH
74310: PPUSH
74311: PPUSH
74312: PPUSH
74313: PPUSH
74314: PPUSH
74315: PPUSH
74316: PPUSH
74317: PPUSH
// if not mc_bases then
74318: LD_EXP 52
74322: NOT
74323: IFFALSE 74327
// exit ;
74325: GO 74949
// for i = 1 to mc_bases do
74327: LD_ADDR_VAR 0 2
74331: PUSH
74332: DOUBLE
74333: LD_INT 1
74335: DEC
74336: ST_TO_ADDR
74337: LD_EXP 52
74341: PUSH
74342: FOR_TO
74343: IFFALSE 74947
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
74345: LD_EXP 87
74349: PUSH
74350: LD_VAR 0 2
74354: ARRAY
74355: NOT
74356: PUSH
74357: LD_INT 38
74359: PPUSH
74360: LD_EXP 78
74364: PUSH
74365: LD_VAR 0 2
74369: ARRAY
74370: PPUSH
74371: CALL_OW 321
74375: PUSH
74376: LD_INT 2
74378: NONEQUAL
74379: OR
74380: IFFALSE 74384
// continue ;
74382: GO 74342
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
74384: LD_ADDR_VAR 0 8
74388: PUSH
74389: LD_EXP 52
74393: PUSH
74394: LD_VAR 0 2
74398: ARRAY
74399: PPUSH
74400: LD_INT 30
74402: PUSH
74403: LD_INT 34
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: PPUSH
74410: CALL_OW 72
74414: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
74415: LD_ADDR_VAR 0 9
74419: PUSH
74420: LD_EXP 52
74424: PUSH
74425: LD_VAR 0 2
74429: ARRAY
74430: PPUSH
74431: LD_INT 25
74433: PUSH
74434: LD_INT 4
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: PPUSH
74441: CALL_OW 72
74445: PPUSH
74446: LD_INT 0
74448: PPUSH
74449: CALL 51749 0 2
74453: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
74454: LD_VAR 0 9
74458: NOT
74459: PUSH
74460: LD_VAR 0 8
74464: NOT
74465: OR
74466: PUSH
74467: LD_EXP 52
74471: PUSH
74472: LD_VAR 0 2
74476: ARRAY
74477: PPUSH
74478: LD_INT 124
74480: PPUSH
74481: CALL 51749 0 2
74485: OR
74486: IFFALSE 74490
// continue ;
74488: GO 74342
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
74490: LD_EXP 88
74494: PUSH
74495: LD_VAR 0 2
74499: ARRAY
74500: PUSH
74501: LD_EXP 87
74505: PUSH
74506: LD_VAR 0 2
74510: ARRAY
74511: LESS
74512: PUSH
74513: LD_EXP 88
74517: PUSH
74518: LD_VAR 0 2
74522: ARRAY
74523: PUSH
74524: LD_VAR 0 8
74528: LESS
74529: AND
74530: IFFALSE 74945
// begin tmp := sci [ 1 ] ;
74532: LD_ADDR_VAR 0 7
74536: PUSH
74537: LD_VAR 0 9
74541: PUSH
74542: LD_INT 1
74544: ARRAY
74545: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
74546: LD_VAR 0 7
74550: PPUSH
74551: LD_INT 124
74553: PPUSH
74554: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
74558: LD_ADDR_VAR 0 3
74562: PUSH
74563: DOUBLE
74564: LD_EXP 87
74568: PUSH
74569: LD_VAR 0 2
74573: ARRAY
74574: INC
74575: ST_TO_ADDR
74576: LD_EXP 87
74580: PUSH
74581: LD_VAR 0 2
74585: ARRAY
74586: PUSH
74587: FOR_DOWNTO
74588: IFFALSE 74931
// begin if IsInUnit ( tmp ) then
74590: LD_VAR 0 7
74594: PPUSH
74595: CALL_OW 310
74599: IFFALSE 74610
// ComExitBuilding ( tmp ) ;
74601: LD_VAR 0 7
74605: PPUSH
74606: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
74610: LD_INT 35
74612: PPUSH
74613: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
74617: LD_VAR 0 7
74621: PPUSH
74622: CALL_OW 310
74626: NOT
74627: PUSH
74628: LD_VAR 0 7
74632: PPUSH
74633: CALL_OW 314
74637: NOT
74638: AND
74639: IFFALSE 74610
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
74641: LD_ADDR_VAR 0 6
74645: PUSH
74646: LD_VAR 0 7
74650: PPUSH
74651: CALL_OW 250
74655: PUSH
74656: LD_VAR 0 7
74660: PPUSH
74661: CALL_OW 251
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74670: LD_INT 35
74672: PPUSH
74673: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
74677: LD_ADDR_VAR 0 4
74681: PUSH
74682: LD_EXP 87
74686: PUSH
74687: LD_VAR 0 2
74691: ARRAY
74692: PUSH
74693: LD_VAR 0 3
74697: ARRAY
74698: PUSH
74699: LD_INT 1
74701: ARRAY
74702: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
74703: LD_ADDR_VAR 0 5
74707: PUSH
74708: LD_EXP 87
74712: PUSH
74713: LD_VAR 0 2
74717: ARRAY
74718: PUSH
74719: LD_VAR 0 3
74723: ARRAY
74724: PUSH
74725: LD_INT 2
74727: ARRAY
74728: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
74729: LD_VAR 0 7
74733: PPUSH
74734: LD_INT 10
74736: PPUSH
74737: CALL 21072 0 2
74741: PUSH
74742: LD_INT 4
74744: ARRAY
74745: IFFALSE 74783
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
74747: LD_VAR 0 7
74751: PPUSH
74752: LD_VAR 0 6
74756: PUSH
74757: LD_INT 1
74759: ARRAY
74760: PPUSH
74761: LD_VAR 0 6
74765: PUSH
74766: LD_INT 2
74768: ARRAY
74769: PPUSH
74770: CALL_OW 111
// wait ( 0 0$10 ) ;
74774: LD_INT 350
74776: PPUSH
74777: CALL_OW 67
// end else
74781: GO 74809
// begin ComMoveXY ( tmp , x , y ) ;
74783: LD_VAR 0 7
74787: PPUSH
74788: LD_VAR 0 4
74792: PPUSH
74793: LD_VAR 0 5
74797: PPUSH
74798: CALL_OW 111
// wait ( 0 0$3 ) ;
74802: LD_INT 105
74804: PPUSH
74805: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
74809: LD_VAR 0 7
74813: PPUSH
74814: LD_VAR 0 4
74818: PPUSH
74819: LD_VAR 0 5
74823: PPUSH
74824: CALL_OW 307
74828: IFFALSE 74670
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
74830: LD_VAR 0 7
74834: PPUSH
74835: LD_VAR 0 4
74839: PPUSH
74840: LD_VAR 0 5
74844: PPUSH
74845: LD_VAR 0 8
74849: PUSH
74850: LD_VAR 0 3
74854: ARRAY
74855: PPUSH
74856: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
74860: LD_INT 35
74862: PPUSH
74863: CALL_OW 67
// until not HasTask ( tmp ) ;
74867: LD_VAR 0 7
74871: PPUSH
74872: CALL_OW 314
74876: NOT
74877: IFFALSE 74860
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
74879: LD_ADDR_EXP 88
74883: PUSH
74884: LD_EXP 88
74888: PPUSH
74889: LD_VAR 0 2
74893: PUSH
74894: LD_EXP 88
74898: PUSH
74899: LD_VAR 0 2
74903: ARRAY
74904: PUSH
74905: LD_INT 1
74907: PLUS
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PPUSH
74913: LD_VAR 0 8
74917: PUSH
74918: LD_VAR 0 3
74922: ARRAY
74923: PPUSH
74924: CALL 18479 0 3
74928: ST_TO_ADDR
// end ;
74929: GO 74587
74931: POP
74932: POP
// MC_Reset ( i , 124 ) ;
74933: LD_VAR 0 2
74937: PPUSH
74938: LD_INT 124
74940: PPUSH
74941: CALL 58536 0 2
// end ; end ;
74945: GO 74342
74947: POP
74948: POP
// end ;
74949: LD_VAR 0 1
74953: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74954: LD_INT 0
74956: PPUSH
74957: PPUSH
74958: PPUSH
// if not mc_bases then
74959: LD_EXP 52
74963: NOT
74964: IFFALSE 74968
// exit ;
74966: GO 75574
// for i = 1 to mc_bases do
74968: LD_ADDR_VAR 0 2
74972: PUSH
74973: DOUBLE
74974: LD_INT 1
74976: DEC
74977: ST_TO_ADDR
74978: LD_EXP 52
74982: PUSH
74983: FOR_TO
74984: IFFALSE 75572
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74986: LD_ADDR_VAR 0 3
74990: PUSH
74991: LD_EXP 52
74995: PUSH
74996: LD_VAR 0 2
75000: ARRAY
75001: PPUSH
75002: LD_INT 25
75004: PUSH
75005: LD_INT 4
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PPUSH
75012: CALL_OW 72
75016: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
75017: LD_VAR 0 3
75021: NOT
75022: PUSH
75023: LD_EXP 89
75027: PUSH
75028: LD_VAR 0 2
75032: ARRAY
75033: NOT
75034: OR
75035: PUSH
75036: LD_EXP 52
75040: PUSH
75041: LD_VAR 0 2
75045: ARRAY
75046: PPUSH
75047: LD_INT 2
75049: PUSH
75050: LD_INT 30
75052: PUSH
75053: LD_INT 0
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 30
75062: PUSH
75063: LD_INT 1
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: LIST
75074: PPUSH
75075: CALL_OW 72
75079: NOT
75080: OR
75081: IFFALSE 75131
// begin if mc_deposits_finder [ i ] then
75083: LD_EXP 90
75087: PUSH
75088: LD_VAR 0 2
75092: ARRAY
75093: IFFALSE 75129
// begin MC_Reset ( i , 125 ) ;
75095: LD_VAR 0 2
75099: PPUSH
75100: LD_INT 125
75102: PPUSH
75103: CALL 58536 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75107: LD_ADDR_EXP 90
75111: PUSH
75112: LD_EXP 90
75116: PPUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: EMPTY
75123: PPUSH
75124: CALL_OW 1
75128: ST_TO_ADDR
// end ; continue ;
75129: GO 74983
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
75131: LD_EXP 89
75135: PUSH
75136: LD_VAR 0 2
75140: ARRAY
75141: PUSH
75142: LD_INT 1
75144: ARRAY
75145: PUSH
75146: LD_INT 3
75148: ARRAY
75149: PUSH
75150: LD_INT 1
75152: EQUAL
75153: PUSH
75154: LD_INT 20
75156: PPUSH
75157: LD_EXP 78
75161: PUSH
75162: LD_VAR 0 2
75166: ARRAY
75167: PPUSH
75168: CALL_OW 321
75172: PUSH
75173: LD_INT 2
75175: NONEQUAL
75176: AND
75177: IFFALSE 75227
// begin if mc_deposits_finder [ i ] then
75179: LD_EXP 90
75183: PUSH
75184: LD_VAR 0 2
75188: ARRAY
75189: IFFALSE 75225
// begin MC_Reset ( i , 125 ) ;
75191: LD_VAR 0 2
75195: PPUSH
75196: LD_INT 125
75198: PPUSH
75199: CALL 58536 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75203: LD_ADDR_EXP 90
75207: PUSH
75208: LD_EXP 90
75212: PPUSH
75213: LD_VAR 0 2
75217: PPUSH
75218: EMPTY
75219: PPUSH
75220: CALL_OW 1
75224: ST_TO_ADDR
// end ; continue ;
75225: GO 74983
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
75227: LD_EXP 89
75231: PUSH
75232: LD_VAR 0 2
75236: ARRAY
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PUSH
75242: LD_INT 1
75244: ARRAY
75245: PPUSH
75246: LD_EXP 89
75250: PUSH
75251: LD_VAR 0 2
75255: ARRAY
75256: PUSH
75257: LD_INT 1
75259: ARRAY
75260: PUSH
75261: LD_INT 2
75263: ARRAY
75264: PPUSH
75265: LD_EXP 78
75269: PUSH
75270: LD_VAR 0 2
75274: ARRAY
75275: PPUSH
75276: CALL_OW 440
75280: IFFALSE 75323
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
75282: LD_ADDR_EXP 89
75286: PUSH
75287: LD_EXP 89
75291: PPUSH
75292: LD_VAR 0 2
75296: PPUSH
75297: LD_EXP 89
75301: PUSH
75302: LD_VAR 0 2
75306: ARRAY
75307: PPUSH
75308: LD_INT 1
75310: PPUSH
75311: CALL_OW 3
75315: PPUSH
75316: CALL_OW 1
75320: ST_TO_ADDR
75321: GO 75570
// begin if not mc_deposits_finder [ i ] then
75323: LD_EXP 90
75327: PUSH
75328: LD_VAR 0 2
75332: ARRAY
75333: NOT
75334: IFFALSE 75386
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
75336: LD_ADDR_EXP 90
75340: PUSH
75341: LD_EXP 90
75345: PPUSH
75346: LD_VAR 0 2
75350: PPUSH
75351: LD_VAR 0 3
75355: PUSH
75356: LD_INT 1
75358: ARRAY
75359: PUSH
75360: EMPTY
75361: LIST
75362: PPUSH
75363: CALL_OW 1
75367: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
75368: LD_VAR 0 3
75372: PUSH
75373: LD_INT 1
75375: ARRAY
75376: PPUSH
75377: LD_INT 125
75379: PPUSH
75380: CALL_OW 109
// end else
75384: GO 75570
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
75386: LD_EXP 90
75390: PUSH
75391: LD_VAR 0 2
75395: ARRAY
75396: PUSH
75397: LD_INT 1
75399: ARRAY
75400: PPUSH
75401: CALL_OW 310
75405: IFFALSE 75428
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
75407: LD_EXP 90
75411: PUSH
75412: LD_VAR 0 2
75416: ARRAY
75417: PUSH
75418: LD_INT 1
75420: ARRAY
75421: PPUSH
75422: CALL_OW 122
75426: GO 75570
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
75428: LD_EXP 90
75432: PUSH
75433: LD_VAR 0 2
75437: ARRAY
75438: PUSH
75439: LD_INT 1
75441: ARRAY
75442: PPUSH
75443: CALL_OW 314
75447: NOT
75448: PUSH
75449: LD_EXP 90
75453: PUSH
75454: LD_VAR 0 2
75458: ARRAY
75459: PUSH
75460: LD_INT 1
75462: ARRAY
75463: PPUSH
75464: LD_EXP 89
75468: PUSH
75469: LD_VAR 0 2
75473: ARRAY
75474: PUSH
75475: LD_INT 1
75477: ARRAY
75478: PUSH
75479: LD_INT 1
75481: ARRAY
75482: PPUSH
75483: LD_EXP 89
75487: PUSH
75488: LD_VAR 0 2
75492: ARRAY
75493: PUSH
75494: LD_INT 1
75496: ARRAY
75497: PUSH
75498: LD_INT 2
75500: ARRAY
75501: PPUSH
75502: CALL_OW 297
75506: PUSH
75507: LD_INT 6
75509: GREATER
75510: AND
75511: IFFALSE 75570
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
75513: LD_EXP 90
75517: PUSH
75518: LD_VAR 0 2
75522: ARRAY
75523: PUSH
75524: LD_INT 1
75526: ARRAY
75527: PPUSH
75528: LD_EXP 89
75532: PUSH
75533: LD_VAR 0 2
75537: ARRAY
75538: PUSH
75539: LD_INT 1
75541: ARRAY
75542: PUSH
75543: LD_INT 1
75545: ARRAY
75546: PPUSH
75547: LD_EXP 89
75551: PUSH
75552: LD_VAR 0 2
75556: ARRAY
75557: PUSH
75558: LD_INT 1
75560: ARRAY
75561: PUSH
75562: LD_INT 2
75564: ARRAY
75565: PPUSH
75566: CALL_OW 111
// end ; end ; end ;
75570: GO 74983
75572: POP
75573: POP
// end ;
75574: LD_VAR 0 1
75578: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
75579: LD_INT 0
75581: PPUSH
75582: PPUSH
75583: PPUSH
75584: PPUSH
75585: PPUSH
75586: PPUSH
75587: PPUSH
75588: PPUSH
75589: PPUSH
75590: PPUSH
75591: PPUSH
// if not mc_bases then
75592: LD_EXP 52
75596: NOT
75597: IFFALSE 75601
// exit ;
75599: GO 76541
// for i = 1 to mc_bases do
75601: LD_ADDR_VAR 0 2
75605: PUSH
75606: DOUBLE
75607: LD_INT 1
75609: DEC
75610: ST_TO_ADDR
75611: LD_EXP 52
75615: PUSH
75616: FOR_TO
75617: IFFALSE 76539
// begin if not mc_bases [ i ] or mc_scan [ i ] then
75619: LD_EXP 52
75623: PUSH
75624: LD_VAR 0 2
75628: ARRAY
75629: NOT
75630: PUSH
75631: LD_EXP 75
75635: PUSH
75636: LD_VAR 0 2
75640: ARRAY
75641: OR
75642: IFFALSE 75646
// continue ;
75644: GO 75616
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75646: LD_ADDR_VAR 0 7
75650: PUSH
75651: LD_EXP 52
75655: PUSH
75656: LD_VAR 0 2
75660: ARRAY
75661: PUSH
75662: LD_INT 1
75664: ARRAY
75665: PPUSH
75666: CALL_OW 248
75670: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
75671: LD_VAR 0 7
75675: PUSH
75676: LD_INT 3
75678: EQUAL
75679: PUSH
75680: LD_EXP 71
75684: PUSH
75685: LD_VAR 0 2
75689: ARRAY
75690: PUSH
75691: LD_EXP 74
75695: PUSH
75696: LD_VAR 0 2
75700: ARRAY
75701: UNION
75702: PPUSH
75703: LD_INT 33
75705: PUSH
75706: LD_INT 2
75708: PUSH
75709: EMPTY
75710: LIST
75711: LIST
75712: PPUSH
75713: CALL_OW 72
75717: NOT
75718: OR
75719: IFFALSE 75723
// continue ;
75721: GO 75616
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75723: LD_ADDR_VAR 0 9
75727: PUSH
75728: LD_EXP 52
75732: PUSH
75733: LD_VAR 0 2
75737: ARRAY
75738: PPUSH
75739: LD_INT 30
75741: PUSH
75742: LD_INT 36
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PPUSH
75749: CALL_OW 72
75753: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
75754: LD_ADDR_VAR 0 10
75758: PUSH
75759: LD_EXP 71
75763: PUSH
75764: LD_VAR 0 2
75768: ARRAY
75769: PPUSH
75770: LD_INT 34
75772: PUSH
75773: LD_INT 31
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PPUSH
75780: CALL_OW 72
75784: ST_TO_ADDR
// if not cts and not mcts then
75785: LD_VAR 0 9
75789: NOT
75790: PUSH
75791: LD_VAR 0 10
75795: NOT
75796: AND
75797: IFFALSE 75801
// continue ;
75799: GO 75616
// x := cts ;
75801: LD_ADDR_VAR 0 11
75805: PUSH
75806: LD_VAR 0 9
75810: ST_TO_ADDR
// if not x then
75811: LD_VAR 0 11
75815: NOT
75816: IFFALSE 75828
// x := mcts ;
75818: LD_ADDR_VAR 0 11
75822: PUSH
75823: LD_VAR 0 10
75827: ST_TO_ADDR
// if not x then
75828: LD_VAR 0 11
75832: NOT
75833: IFFALSE 75837
// continue ;
75835: GO 75616
// if mc_remote_driver [ i ] then
75837: LD_EXP 92
75841: PUSH
75842: LD_VAR 0 2
75846: ARRAY
75847: IFFALSE 76234
// for j in mc_remote_driver [ i ] do
75849: LD_ADDR_VAR 0 3
75853: PUSH
75854: LD_EXP 92
75858: PUSH
75859: LD_VAR 0 2
75863: ARRAY
75864: PUSH
75865: FOR_IN
75866: IFFALSE 76232
// begin if GetClass ( j ) <> 3 then
75868: LD_VAR 0 3
75872: PPUSH
75873: CALL_OW 257
75877: PUSH
75878: LD_INT 3
75880: NONEQUAL
75881: IFFALSE 75934
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
75883: LD_ADDR_EXP 92
75887: PUSH
75888: LD_EXP 92
75892: PPUSH
75893: LD_VAR 0 2
75897: PPUSH
75898: LD_EXP 92
75902: PUSH
75903: LD_VAR 0 2
75907: ARRAY
75908: PUSH
75909: LD_VAR 0 3
75913: DIFF
75914: PPUSH
75915: CALL_OW 1
75919: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75920: LD_VAR 0 3
75924: PPUSH
75925: LD_INT 0
75927: PPUSH
75928: CALL_OW 109
// continue ;
75932: GO 75865
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
75934: LD_EXP 71
75938: PUSH
75939: LD_VAR 0 2
75943: ARRAY
75944: PPUSH
75945: LD_INT 34
75947: PUSH
75948: LD_INT 31
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 58
75957: PUSH
75958: EMPTY
75959: LIST
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PPUSH
75965: CALL_OW 72
75969: PUSH
75970: LD_VAR 0 3
75974: PPUSH
75975: CALL 51837 0 1
75979: NOT
75980: AND
75981: IFFALSE 76052
// begin if IsInUnit ( j ) then
75983: LD_VAR 0 3
75987: PPUSH
75988: CALL_OW 310
75992: IFFALSE 76003
// ComExitBuilding ( j ) ;
75994: LD_VAR 0 3
75998: PPUSH
75999: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
76003: LD_VAR 0 3
76007: PPUSH
76008: LD_EXP 71
76012: PUSH
76013: LD_VAR 0 2
76017: ARRAY
76018: PPUSH
76019: LD_INT 34
76021: PUSH
76022: LD_INT 31
76024: PUSH
76025: EMPTY
76026: LIST
76027: LIST
76028: PUSH
76029: LD_INT 58
76031: PUSH
76032: EMPTY
76033: LIST
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PPUSH
76039: CALL_OW 72
76043: PUSH
76044: LD_INT 1
76046: ARRAY
76047: PPUSH
76048: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
76052: LD_VAR 0 3
76056: PPUSH
76057: CALL_OW 310
76061: NOT
76062: PUSH
76063: LD_VAR 0 3
76067: PPUSH
76068: CALL_OW 310
76072: PPUSH
76073: CALL_OW 266
76077: PUSH
76078: LD_INT 36
76080: NONEQUAL
76081: PUSH
76082: LD_VAR 0 3
76086: PPUSH
76087: CALL 51837 0 1
76091: NOT
76092: AND
76093: OR
76094: IFFALSE 76230
// begin if IsInUnit ( j ) then
76096: LD_VAR 0 3
76100: PPUSH
76101: CALL_OW 310
76105: IFFALSE 76116
// ComExitBuilding ( j ) ;
76107: LD_VAR 0 3
76111: PPUSH
76112: CALL_OW 122
// ct := 0 ;
76116: LD_ADDR_VAR 0 8
76120: PUSH
76121: LD_INT 0
76123: ST_TO_ADDR
// for k in x do
76124: LD_ADDR_VAR 0 4
76128: PUSH
76129: LD_VAR 0 11
76133: PUSH
76134: FOR_IN
76135: IFFALSE 76208
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
76137: LD_VAR 0 4
76141: PPUSH
76142: CALL_OW 264
76146: PUSH
76147: LD_INT 31
76149: EQUAL
76150: PUSH
76151: LD_VAR 0 4
76155: PPUSH
76156: CALL_OW 311
76160: NOT
76161: AND
76162: PUSH
76163: LD_VAR 0 4
76167: PPUSH
76168: CALL_OW 266
76172: PUSH
76173: LD_INT 36
76175: EQUAL
76176: PUSH
76177: LD_VAR 0 4
76181: PPUSH
76182: CALL_OW 313
76186: PUSH
76187: LD_INT 3
76189: LESS
76190: AND
76191: OR
76192: IFFALSE 76206
// begin ct := k ;
76194: LD_ADDR_VAR 0 8
76198: PUSH
76199: LD_VAR 0 4
76203: ST_TO_ADDR
// break ;
76204: GO 76208
// end ;
76206: GO 76134
76208: POP
76209: POP
// if ct then
76210: LD_VAR 0 8
76214: IFFALSE 76230
// ComEnterUnit ( j , ct ) ;
76216: LD_VAR 0 3
76220: PPUSH
76221: LD_VAR 0 8
76225: PPUSH
76226: CALL_OW 120
// end ; end ;
76230: GO 75865
76232: POP
76233: POP
// places := 0 ;
76234: LD_ADDR_VAR 0 5
76238: PUSH
76239: LD_INT 0
76241: ST_TO_ADDR
// for j = 1 to x do
76242: LD_ADDR_VAR 0 3
76246: PUSH
76247: DOUBLE
76248: LD_INT 1
76250: DEC
76251: ST_TO_ADDR
76252: LD_VAR 0 11
76256: PUSH
76257: FOR_TO
76258: IFFALSE 76334
// if GetWeapon ( x [ j ] ) = ar_control_tower then
76260: LD_VAR 0 11
76264: PUSH
76265: LD_VAR 0 3
76269: ARRAY
76270: PPUSH
76271: CALL_OW 264
76275: PUSH
76276: LD_INT 31
76278: EQUAL
76279: IFFALSE 76297
// places := places + 1 else
76281: LD_ADDR_VAR 0 5
76285: PUSH
76286: LD_VAR 0 5
76290: PUSH
76291: LD_INT 1
76293: PLUS
76294: ST_TO_ADDR
76295: GO 76332
// if GetBType ( x [ j ] ) = b_control_tower then
76297: LD_VAR 0 11
76301: PUSH
76302: LD_VAR 0 3
76306: ARRAY
76307: PPUSH
76308: CALL_OW 266
76312: PUSH
76313: LD_INT 36
76315: EQUAL
76316: IFFALSE 76332
// places := places + 3 ;
76318: LD_ADDR_VAR 0 5
76322: PUSH
76323: LD_VAR 0 5
76327: PUSH
76328: LD_INT 3
76330: PLUS
76331: ST_TO_ADDR
76332: GO 76257
76334: POP
76335: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
76336: LD_VAR 0 5
76340: PUSH
76341: LD_INT 0
76343: EQUAL
76344: PUSH
76345: LD_VAR 0 5
76349: PUSH
76350: LD_EXP 92
76354: PUSH
76355: LD_VAR 0 2
76359: ARRAY
76360: LESSEQUAL
76361: OR
76362: IFFALSE 76366
// continue ;
76364: GO 75616
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
76366: LD_ADDR_VAR 0 6
76370: PUSH
76371: LD_EXP 52
76375: PUSH
76376: LD_VAR 0 2
76380: ARRAY
76381: PPUSH
76382: LD_INT 25
76384: PUSH
76385: LD_INT 3
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PPUSH
76392: CALL_OW 72
76396: PUSH
76397: LD_EXP 92
76401: PUSH
76402: LD_VAR 0 2
76406: ARRAY
76407: DIFF
76408: PPUSH
76409: LD_INT 3
76411: PPUSH
76412: CALL 52737 0 2
76416: ST_TO_ADDR
// for j in tmp do
76417: LD_ADDR_VAR 0 3
76421: PUSH
76422: LD_VAR 0 6
76426: PUSH
76427: FOR_IN
76428: IFFALSE 76463
// if GetTag ( j ) > 0 then
76430: LD_VAR 0 3
76434: PPUSH
76435: CALL_OW 110
76439: PUSH
76440: LD_INT 0
76442: GREATER
76443: IFFALSE 76461
// tmp := tmp diff j ;
76445: LD_ADDR_VAR 0 6
76449: PUSH
76450: LD_VAR 0 6
76454: PUSH
76455: LD_VAR 0 3
76459: DIFF
76460: ST_TO_ADDR
76461: GO 76427
76463: POP
76464: POP
// if not tmp then
76465: LD_VAR 0 6
76469: NOT
76470: IFFALSE 76474
// continue ;
76472: GO 75616
// if places then
76474: LD_VAR 0 5
76478: IFFALSE 76537
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
76480: LD_ADDR_EXP 92
76484: PUSH
76485: LD_EXP 92
76489: PPUSH
76490: LD_VAR 0 2
76494: PPUSH
76495: LD_EXP 92
76499: PUSH
76500: LD_VAR 0 2
76504: ARRAY
76505: PUSH
76506: LD_VAR 0 6
76510: PUSH
76511: LD_INT 1
76513: ARRAY
76514: UNION
76515: PPUSH
76516: CALL_OW 1
76520: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
76521: LD_VAR 0 6
76525: PUSH
76526: LD_INT 1
76528: ARRAY
76529: PPUSH
76530: LD_INT 126
76532: PPUSH
76533: CALL_OW 109
// end ; end ;
76537: GO 75616
76539: POP
76540: POP
// end ;
76541: LD_VAR 0 1
76545: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
76546: LD_INT 0
76548: PPUSH
76549: PPUSH
76550: PPUSH
76551: PPUSH
76552: PPUSH
76553: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
76554: LD_VAR 0 1
76558: NOT
76559: PUSH
76560: LD_VAR 0 2
76564: NOT
76565: OR
76566: PUSH
76567: LD_VAR 0 3
76571: NOT
76572: OR
76573: PUSH
76574: LD_VAR 0 4
76578: PUSH
76579: LD_INT 1
76581: PUSH
76582: LD_INT 2
76584: PUSH
76585: LD_INT 3
76587: PUSH
76588: LD_INT 4
76590: PUSH
76591: LD_INT 5
76593: PUSH
76594: LD_INT 8
76596: PUSH
76597: LD_INT 9
76599: PUSH
76600: LD_INT 15
76602: PUSH
76603: LD_INT 16
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: IN
76617: NOT
76618: OR
76619: IFFALSE 76623
// exit ;
76621: GO 77523
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
76623: LD_ADDR_VAR 0 2
76627: PUSH
76628: LD_VAR 0 2
76632: PPUSH
76633: LD_INT 21
76635: PUSH
76636: LD_INT 3
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 24
76645: PUSH
76646: LD_INT 250
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PPUSH
76657: CALL_OW 72
76661: ST_TO_ADDR
// case class of 1 , 15 :
76662: LD_VAR 0 4
76666: PUSH
76667: LD_INT 1
76669: DOUBLE
76670: EQUAL
76671: IFTRUE 76681
76673: LD_INT 15
76675: DOUBLE
76676: EQUAL
76677: IFTRUE 76681
76679: GO 76766
76681: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
76682: LD_ADDR_VAR 0 8
76686: PUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: LD_INT 2
76694: PUSH
76695: LD_INT 30
76697: PUSH
76698: LD_INT 32
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: PUSH
76705: LD_INT 30
76707: PUSH
76708: LD_INT 31
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: LIST
76719: PPUSH
76720: CALL_OW 72
76724: PUSH
76725: LD_VAR 0 2
76729: PPUSH
76730: LD_INT 2
76732: PUSH
76733: LD_INT 30
76735: PUSH
76736: LD_INT 4
76738: PUSH
76739: EMPTY
76740: LIST
76741: LIST
76742: PUSH
76743: LD_INT 30
76745: PUSH
76746: LD_INT 5
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: LIST
76757: PPUSH
76758: CALL_OW 72
76762: ADD
76763: ST_TO_ADDR
76764: GO 77012
76766: LD_INT 2
76768: DOUBLE
76769: EQUAL
76770: IFTRUE 76780
76772: LD_INT 16
76774: DOUBLE
76775: EQUAL
76776: IFTRUE 76780
76778: GO 76826
76780: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76781: LD_ADDR_VAR 0 8
76785: PUSH
76786: LD_VAR 0 2
76790: PPUSH
76791: LD_INT 2
76793: PUSH
76794: LD_INT 30
76796: PUSH
76797: LD_INT 0
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: LD_INT 30
76806: PUSH
76807: LD_INT 1
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: LIST
76818: PPUSH
76819: CALL_OW 72
76823: ST_TO_ADDR
76824: GO 77012
76826: LD_INT 3
76828: DOUBLE
76829: EQUAL
76830: IFTRUE 76834
76832: GO 76880
76834: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76835: LD_ADDR_VAR 0 8
76839: PUSH
76840: LD_VAR 0 2
76844: PPUSH
76845: LD_INT 2
76847: PUSH
76848: LD_INT 30
76850: PUSH
76851: LD_INT 2
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: LD_INT 30
76860: PUSH
76861: LD_INT 3
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: LIST
76872: PPUSH
76873: CALL_OW 72
76877: ST_TO_ADDR
76878: GO 77012
76880: LD_INT 4
76882: DOUBLE
76883: EQUAL
76884: IFTRUE 76888
76886: GO 76945
76888: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76889: LD_ADDR_VAR 0 8
76893: PUSH
76894: LD_VAR 0 2
76898: PPUSH
76899: LD_INT 2
76901: PUSH
76902: LD_INT 30
76904: PUSH
76905: LD_INT 6
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: LD_INT 30
76914: PUSH
76915: LD_INT 7
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: LD_INT 30
76924: PUSH
76925: LD_INT 8
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: PPUSH
76938: CALL_OW 72
76942: ST_TO_ADDR
76943: GO 77012
76945: LD_INT 5
76947: DOUBLE
76948: EQUAL
76949: IFTRUE 76965
76951: LD_INT 8
76953: DOUBLE
76954: EQUAL
76955: IFTRUE 76965
76957: LD_INT 9
76959: DOUBLE
76960: EQUAL
76961: IFTRUE 76965
76963: GO 77011
76965: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76966: LD_ADDR_VAR 0 8
76970: PUSH
76971: LD_VAR 0 2
76975: PPUSH
76976: LD_INT 2
76978: PUSH
76979: LD_INT 30
76981: PUSH
76982: LD_INT 4
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 30
76991: PUSH
76992: LD_INT 5
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: LIST
77003: PPUSH
77004: CALL_OW 72
77008: ST_TO_ADDR
77009: GO 77012
77011: POP
// if not tmp then
77012: LD_VAR 0 8
77016: NOT
77017: IFFALSE 77021
// exit ;
77019: GO 77523
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
77021: LD_VAR 0 4
77025: PUSH
77026: LD_INT 1
77028: PUSH
77029: LD_INT 15
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: IN
77036: PUSH
77037: LD_EXP 61
77041: PUSH
77042: LD_VAR 0 1
77046: ARRAY
77047: AND
77048: IFFALSE 77204
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
77050: LD_ADDR_VAR 0 9
77054: PUSH
77055: LD_EXP 61
77059: PUSH
77060: LD_VAR 0 1
77064: ARRAY
77065: PUSH
77066: LD_INT 1
77068: ARRAY
77069: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
77070: LD_VAR 0 9
77074: PUSH
77075: LD_EXP 62
77079: PUSH
77080: LD_VAR 0 1
77084: ARRAY
77085: IN
77086: NOT
77087: IFFALSE 77202
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
77089: LD_ADDR_EXP 62
77093: PUSH
77094: LD_EXP 62
77098: PPUSH
77099: LD_VAR 0 1
77103: PUSH
77104: LD_EXP 62
77108: PUSH
77109: LD_VAR 0 1
77113: ARRAY
77114: PUSH
77115: LD_INT 1
77117: PLUS
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: PPUSH
77123: LD_VAR 0 9
77127: PPUSH
77128: CALL 18479 0 3
77132: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
77133: LD_ADDR_EXP 61
77137: PUSH
77138: LD_EXP 61
77142: PPUSH
77143: LD_VAR 0 1
77147: PPUSH
77148: LD_EXP 61
77152: PUSH
77153: LD_VAR 0 1
77157: ARRAY
77158: PUSH
77159: LD_VAR 0 9
77163: DIFF
77164: PPUSH
77165: CALL_OW 1
77169: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
77170: LD_VAR 0 3
77174: PPUSH
77175: LD_EXP 62
77179: PUSH
77180: LD_VAR 0 1
77184: ARRAY
77185: PUSH
77186: LD_EXP 62
77190: PUSH
77191: LD_VAR 0 1
77195: ARRAY
77196: ARRAY
77197: PPUSH
77198: CALL_OW 120
// end ; exit ;
77202: GO 77523
// end ; if tmp > 1 then
77204: LD_VAR 0 8
77208: PUSH
77209: LD_INT 1
77211: GREATER
77212: IFFALSE 77316
// for i = 2 to tmp do
77214: LD_ADDR_VAR 0 6
77218: PUSH
77219: DOUBLE
77220: LD_INT 2
77222: DEC
77223: ST_TO_ADDR
77224: LD_VAR 0 8
77228: PUSH
77229: FOR_TO
77230: IFFALSE 77314
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
77232: LD_VAR 0 8
77236: PUSH
77237: LD_VAR 0 6
77241: ARRAY
77242: PPUSH
77243: CALL_OW 461
77247: PUSH
77248: LD_INT 6
77250: EQUAL
77251: IFFALSE 77312
// begin x := tmp [ i ] ;
77253: LD_ADDR_VAR 0 9
77257: PUSH
77258: LD_VAR 0 8
77262: PUSH
77263: LD_VAR 0 6
77267: ARRAY
77268: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
77269: LD_ADDR_VAR 0 8
77273: PUSH
77274: LD_VAR 0 8
77278: PPUSH
77279: LD_VAR 0 6
77283: PPUSH
77284: CALL_OW 3
77288: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
77289: LD_ADDR_VAR 0 8
77293: PUSH
77294: LD_VAR 0 8
77298: PPUSH
77299: LD_INT 1
77301: PPUSH
77302: LD_VAR 0 9
77306: PPUSH
77307: CALL_OW 2
77311: ST_TO_ADDR
// end ;
77312: GO 77229
77314: POP
77315: POP
// for i in tmp do
77316: LD_ADDR_VAR 0 6
77320: PUSH
77321: LD_VAR 0 8
77325: PUSH
77326: FOR_IN
77327: IFFALSE 77396
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
77329: LD_VAR 0 6
77333: PPUSH
77334: CALL_OW 313
77338: PUSH
77339: LD_INT 6
77341: LESS
77342: PUSH
77343: LD_VAR 0 6
77347: PPUSH
77348: CALL_OW 266
77352: PUSH
77353: LD_INT 31
77355: PUSH
77356: LD_INT 32
77358: PUSH
77359: EMPTY
77360: LIST
77361: LIST
77362: IN
77363: NOT
77364: AND
77365: PUSH
77366: LD_VAR 0 6
77370: PPUSH
77371: CALL_OW 313
77375: PUSH
77376: LD_INT 0
77378: EQUAL
77379: OR
77380: IFFALSE 77394
// begin j := i ;
77382: LD_ADDR_VAR 0 7
77386: PUSH
77387: LD_VAR 0 6
77391: ST_TO_ADDR
// break ;
77392: GO 77396
// end ; end ;
77394: GO 77326
77396: POP
77397: POP
// if j then
77398: LD_VAR 0 7
77402: IFFALSE 77420
// ComEnterUnit ( unit , j ) else
77404: LD_VAR 0 3
77408: PPUSH
77409: LD_VAR 0 7
77413: PPUSH
77414: CALL_OW 120
77418: GO 77523
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77420: LD_ADDR_VAR 0 10
77424: PUSH
77425: LD_VAR 0 2
77429: PPUSH
77430: LD_INT 2
77432: PUSH
77433: LD_INT 30
77435: PUSH
77436: LD_INT 0
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: PUSH
77443: LD_INT 30
77445: PUSH
77446: LD_INT 1
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: EMPTY
77454: LIST
77455: LIST
77456: LIST
77457: PPUSH
77458: CALL_OW 72
77462: ST_TO_ADDR
// if depot then
77463: LD_VAR 0 10
77467: IFFALSE 77523
// begin depot := NearestUnitToUnit ( depot , unit ) ;
77469: LD_ADDR_VAR 0 10
77473: PUSH
77474: LD_VAR 0 10
77478: PPUSH
77479: LD_VAR 0 3
77483: PPUSH
77484: CALL_OW 74
77488: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
77489: LD_VAR 0 3
77493: PPUSH
77494: LD_VAR 0 10
77498: PPUSH
77499: CALL_OW 296
77503: PUSH
77504: LD_INT 10
77506: GREATER
77507: IFFALSE 77523
// ComStandNearbyBuilding ( unit , depot ) ;
77509: LD_VAR 0 3
77513: PPUSH
77514: LD_VAR 0 10
77518: PPUSH
77519: CALL 12682 0 2
// end ; end ; end ;
77523: LD_VAR 0 5
77527: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
77528: LD_INT 0
77530: PPUSH
77531: PPUSH
77532: PPUSH
77533: PPUSH
// if not mc_bases then
77534: LD_EXP 52
77538: NOT
77539: IFFALSE 77543
// exit ;
77541: GO 77782
// for i = 1 to mc_bases do
77543: LD_ADDR_VAR 0 2
77547: PUSH
77548: DOUBLE
77549: LD_INT 1
77551: DEC
77552: ST_TO_ADDR
77553: LD_EXP 52
77557: PUSH
77558: FOR_TO
77559: IFFALSE 77780
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
77561: LD_ADDR_VAR 0 4
77565: PUSH
77566: LD_EXP 52
77570: PUSH
77571: LD_VAR 0 2
77575: ARRAY
77576: PPUSH
77577: LD_INT 21
77579: PUSH
77580: LD_INT 1
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: PPUSH
77587: CALL_OW 72
77591: PUSH
77592: LD_EXP 81
77596: PUSH
77597: LD_VAR 0 2
77601: ARRAY
77602: UNION
77603: ST_TO_ADDR
// if not tmp then
77604: LD_VAR 0 4
77608: NOT
77609: IFFALSE 77613
// continue ;
77611: GO 77558
// for j in tmp do
77613: LD_ADDR_VAR 0 3
77617: PUSH
77618: LD_VAR 0 4
77622: PUSH
77623: FOR_IN
77624: IFFALSE 77776
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
77626: LD_VAR 0 3
77630: PPUSH
77631: CALL_OW 110
77635: NOT
77636: PUSH
77637: LD_VAR 0 3
77641: PPUSH
77642: CALL_OW 314
77646: NOT
77647: AND
77648: PUSH
77649: LD_VAR 0 3
77653: PPUSH
77654: CALL_OW 311
77658: NOT
77659: AND
77660: PUSH
77661: LD_VAR 0 3
77665: PPUSH
77666: CALL_OW 310
77670: NOT
77671: AND
77672: PUSH
77673: LD_VAR 0 3
77677: PUSH
77678: LD_EXP 55
77682: PUSH
77683: LD_VAR 0 2
77687: ARRAY
77688: PUSH
77689: LD_INT 1
77691: ARRAY
77692: IN
77693: NOT
77694: AND
77695: PUSH
77696: LD_VAR 0 3
77700: PUSH
77701: LD_EXP 55
77705: PUSH
77706: LD_VAR 0 2
77710: ARRAY
77711: PUSH
77712: LD_INT 2
77714: ARRAY
77715: IN
77716: NOT
77717: AND
77718: PUSH
77719: LD_VAR 0 3
77723: PUSH
77724: LD_EXP 64
77728: PUSH
77729: LD_VAR 0 2
77733: ARRAY
77734: IN
77735: NOT
77736: AND
77737: IFFALSE 77774
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77739: LD_VAR 0 2
77743: PPUSH
77744: LD_EXP 52
77748: PUSH
77749: LD_VAR 0 2
77753: ARRAY
77754: PPUSH
77755: LD_VAR 0 3
77759: PPUSH
77760: LD_VAR 0 3
77764: PPUSH
77765: CALL_OW 257
77769: PPUSH
77770: CALL 76546 0 4
// end ;
77774: GO 77623
77776: POP
77777: POP
// end ;
77778: GO 77558
77780: POP
77781: POP
// end ;
77782: LD_VAR 0 1
77786: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77787: LD_INT 0
77789: PPUSH
77790: PPUSH
77791: PPUSH
77792: PPUSH
77793: PPUSH
77794: PPUSH
// if not mc_bases [ base ] then
77795: LD_EXP 52
77799: PUSH
77800: LD_VAR 0 1
77804: ARRAY
77805: NOT
77806: IFFALSE 77810
// exit ;
77808: GO 77992
// tmp := [ ] ;
77810: LD_ADDR_VAR 0 6
77814: PUSH
77815: EMPTY
77816: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77817: LD_ADDR_VAR 0 7
77821: PUSH
77822: LD_VAR 0 3
77826: PPUSH
77827: LD_INT 0
77829: PPUSH
77830: CALL_OW 517
77834: ST_TO_ADDR
// if not list then
77835: LD_VAR 0 7
77839: NOT
77840: IFFALSE 77844
// exit ;
77842: GO 77992
// for i = 1 to amount do
77844: LD_ADDR_VAR 0 5
77848: PUSH
77849: DOUBLE
77850: LD_INT 1
77852: DEC
77853: ST_TO_ADDR
77854: LD_VAR 0 2
77858: PUSH
77859: FOR_TO
77860: IFFALSE 77940
// begin x := rand ( 1 , list [ 1 ] ) ;
77862: LD_ADDR_VAR 0 8
77866: PUSH
77867: LD_INT 1
77869: PPUSH
77870: LD_VAR 0 7
77874: PUSH
77875: LD_INT 1
77877: ARRAY
77878: PPUSH
77879: CALL_OW 12
77883: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77884: LD_ADDR_VAR 0 6
77888: PUSH
77889: LD_VAR 0 6
77893: PPUSH
77894: LD_VAR 0 5
77898: PPUSH
77899: LD_VAR 0 7
77903: PUSH
77904: LD_INT 1
77906: ARRAY
77907: PUSH
77908: LD_VAR 0 8
77912: ARRAY
77913: PUSH
77914: LD_VAR 0 7
77918: PUSH
77919: LD_INT 2
77921: ARRAY
77922: PUSH
77923: LD_VAR 0 8
77927: ARRAY
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: PPUSH
77933: CALL_OW 1
77937: ST_TO_ADDR
// end ;
77938: GO 77859
77940: POP
77941: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77942: LD_ADDR_EXP 65
77946: PUSH
77947: LD_EXP 65
77951: PPUSH
77952: LD_VAR 0 1
77956: PPUSH
77957: LD_VAR 0 6
77961: PPUSH
77962: CALL_OW 1
77966: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77967: LD_ADDR_EXP 67
77971: PUSH
77972: LD_EXP 67
77976: PPUSH
77977: LD_VAR 0 1
77981: PPUSH
77982: LD_VAR 0 3
77986: PPUSH
77987: CALL_OW 1
77991: ST_TO_ADDR
// end ;
77992: LD_VAR 0 4
77996: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77997: LD_INT 0
77999: PPUSH
// if not mc_bases [ base ] then
78000: LD_EXP 52
78004: PUSH
78005: LD_VAR 0 1
78009: ARRAY
78010: NOT
78011: IFFALSE 78015
// exit ;
78013: GO 78040
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
78015: LD_ADDR_EXP 57
78019: PUSH
78020: LD_EXP 57
78024: PPUSH
78025: LD_VAR 0 1
78029: PPUSH
78030: LD_VAR 0 2
78034: PPUSH
78035: CALL_OW 1
78039: ST_TO_ADDR
// end ;
78040: LD_VAR 0 3
78044: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
78045: LD_INT 0
78047: PPUSH
// if not mc_bases [ base ] then
78048: LD_EXP 52
78052: PUSH
78053: LD_VAR 0 1
78057: ARRAY
78058: NOT
78059: IFFALSE 78063
// exit ;
78061: GO 78100
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
78063: LD_ADDR_EXP 57
78067: PUSH
78068: LD_EXP 57
78072: PPUSH
78073: LD_VAR 0 1
78077: PPUSH
78078: LD_EXP 57
78082: PUSH
78083: LD_VAR 0 1
78087: ARRAY
78088: PUSH
78089: LD_VAR 0 2
78093: UNION
78094: PPUSH
78095: CALL_OW 1
78099: ST_TO_ADDR
// end ;
78100: LD_VAR 0 3
78104: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
78105: LD_INT 0
78107: PPUSH
// if not mc_bases [ base ] then
78108: LD_EXP 52
78112: PUSH
78113: LD_VAR 0 1
78117: ARRAY
78118: NOT
78119: IFFALSE 78123
// exit ;
78121: GO 78148
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
78123: LD_ADDR_EXP 73
78127: PUSH
78128: LD_EXP 73
78132: PPUSH
78133: LD_VAR 0 1
78137: PPUSH
78138: LD_VAR 0 2
78142: PPUSH
78143: CALL_OW 1
78147: ST_TO_ADDR
// end ;
78148: LD_VAR 0 3
78152: RET
// export function MC_InsertProduceList ( base , components ) ; begin
78153: LD_INT 0
78155: PPUSH
// if not mc_bases [ base ] then
78156: LD_EXP 52
78160: PUSH
78161: LD_VAR 0 1
78165: ARRAY
78166: NOT
78167: IFFALSE 78171
// exit ;
78169: GO 78208
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
78171: LD_ADDR_EXP 73
78175: PUSH
78176: LD_EXP 73
78180: PPUSH
78181: LD_VAR 0 1
78185: PPUSH
78186: LD_EXP 73
78190: PUSH
78191: LD_VAR 0 1
78195: ARRAY
78196: PUSH
78197: LD_VAR 0 2
78201: ADD
78202: PPUSH
78203: CALL_OW 1
78207: ST_TO_ADDR
// end ;
78208: LD_VAR 0 3
78212: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
78213: LD_INT 0
78215: PPUSH
// if not mc_bases [ base ] then
78216: LD_EXP 52
78220: PUSH
78221: LD_VAR 0 1
78225: ARRAY
78226: NOT
78227: IFFALSE 78231
// exit ;
78229: GO 78285
// mc_defender := Replace ( mc_defender , base , deflist ) ;
78231: LD_ADDR_EXP 74
78235: PUSH
78236: LD_EXP 74
78240: PPUSH
78241: LD_VAR 0 1
78245: PPUSH
78246: LD_VAR 0 2
78250: PPUSH
78251: CALL_OW 1
78255: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
78256: LD_ADDR_EXP 63
78260: PUSH
78261: LD_EXP 63
78265: PPUSH
78266: LD_VAR 0 1
78270: PPUSH
78271: LD_VAR 0 2
78275: PUSH
78276: LD_INT 0
78278: PLUS
78279: PPUSH
78280: CALL_OW 1
78284: ST_TO_ADDR
// end ;
78285: LD_VAR 0 3
78289: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
78290: LD_INT 0
78292: PPUSH
// if not mc_bases [ base ] then
78293: LD_EXP 52
78297: PUSH
78298: LD_VAR 0 1
78302: ARRAY
78303: NOT
78304: IFFALSE 78308
// exit ;
78306: GO 78333
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
78308: LD_ADDR_EXP 63
78312: PUSH
78313: LD_EXP 63
78317: PPUSH
78318: LD_VAR 0 1
78322: PPUSH
78323: LD_VAR 0 2
78327: PPUSH
78328: CALL_OW 1
78332: ST_TO_ADDR
// end ;
78333: LD_VAR 0 3
78337: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
78338: LD_INT 0
78340: PPUSH
78341: PPUSH
78342: PPUSH
78343: PPUSH
// if not mc_bases [ base ] then
78344: LD_EXP 52
78348: PUSH
78349: LD_VAR 0 1
78353: ARRAY
78354: NOT
78355: IFFALSE 78359
// exit ;
78357: GO 78424
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
78359: LD_ADDR_EXP 72
78363: PUSH
78364: LD_EXP 72
78368: PPUSH
78369: LD_VAR 0 1
78373: PUSH
78374: LD_EXP 72
78378: PUSH
78379: LD_VAR 0 1
78383: ARRAY
78384: PUSH
78385: LD_INT 1
78387: PLUS
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PPUSH
78393: LD_VAR 0 1
78397: PUSH
78398: LD_VAR 0 2
78402: PUSH
78403: LD_VAR 0 3
78407: PUSH
78408: LD_VAR 0 4
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: PPUSH
78419: CALL 18479 0 3
78423: ST_TO_ADDR
// end ;
78424: LD_VAR 0 5
78428: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
78429: LD_INT 0
78431: PPUSH
// if not mc_bases [ base ] then
78432: LD_EXP 52
78436: PUSH
78437: LD_VAR 0 1
78441: ARRAY
78442: NOT
78443: IFFALSE 78447
// exit ;
78445: GO 78472
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
78447: LD_ADDR_EXP 89
78451: PUSH
78452: LD_EXP 89
78456: PPUSH
78457: LD_VAR 0 1
78461: PPUSH
78462: LD_VAR 0 2
78466: PPUSH
78467: CALL_OW 1
78471: ST_TO_ADDR
// end ;
78472: LD_VAR 0 3
78476: RET
// export function MC_GetMinesField ( base ) ; begin
78477: LD_INT 0
78479: PPUSH
// result := mc_mines [ base ] ;
78480: LD_ADDR_VAR 0 2
78484: PUSH
78485: LD_EXP 65
78489: PUSH
78490: LD_VAR 0 1
78494: ARRAY
78495: ST_TO_ADDR
// end ;
78496: LD_VAR 0 2
78500: RET
// export function MC_GetProduceList ( base ) ; begin
78501: LD_INT 0
78503: PPUSH
// result := mc_produce [ base ] ;
78504: LD_ADDR_VAR 0 2
78508: PUSH
78509: LD_EXP 73
78513: PUSH
78514: LD_VAR 0 1
78518: ARRAY
78519: ST_TO_ADDR
// end ;
78520: LD_VAR 0 2
78524: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
78525: LD_INT 0
78527: PPUSH
78528: PPUSH
// if not mc_bases then
78529: LD_EXP 52
78533: NOT
78534: IFFALSE 78538
// exit ;
78536: GO 78603
// if mc_bases [ base ] then
78538: LD_EXP 52
78542: PUSH
78543: LD_VAR 0 1
78547: ARRAY
78548: IFFALSE 78603
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78550: LD_ADDR_VAR 0 3
78554: PUSH
78555: LD_EXP 52
78559: PUSH
78560: LD_VAR 0 1
78564: ARRAY
78565: PPUSH
78566: LD_INT 30
78568: PUSH
78569: LD_VAR 0 2
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PPUSH
78578: CALL_OW 72
78582: ST_TO_ADDR
// if result then
78583: LD_VAR 0 3
78587: IFFALSE 78603
// result := result [ 1 ] ;
78589: LD_ADDR_VAR 0 3
78593: PUSH
78594: LD_VAR 0 3
78598: PUSH
78599: LD_INT 1
78601: ARRAY
78602: ST_TO_ADDR
// end ; end ;
78603: LD_VAR 0 3
78607: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
78608: LD_INT 0
78610: PPUSH
78611: PPUSH
// if not mc_bases then
78612: LD_EXP 52
78616: NOT
78617: IFFALSE 78621
// exit ;
78619: GO 78666
// if mc_bases [ base ] then
78621: LD_EXP 52
78625: PUSH
78626: LD_VAR 0 1
78630: ARRAY
78631: IFFALSE 78666
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78633: LD_ADDR_VAR 0 3
78637: PUSH
78638: LD_EXP 52
78642: PUSH
78643: LD_VAR 0 1
78647: ARRAY
78648: PPUSH
78649: LD_INT 30
78651: PUSH
78652: LD_VAR 0 2
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PPUSH
78661: CALL_OW 72
78665: ST_TO_ADDR
// end ;
78666: LD_VAR 0 3
78670: RET
// export function MC_SetTame ( base , area ) ; begin
78671: LD_INT 0
78673: PPUSH
// if not mc_bases or not base then
78674: LD_EXP 52
78678: NOT
78679: PUSH
78680: LD_VAR 0 1
78684: NOT
78685: OR
78686: IFFALSE 78690
// exit ;
78688: GO 78715
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
78690: LD_ADDR_EXP 80
78694: PUSH
78695: LD_EXP 80
78699: PPUSH
78700: LD_VAR 0 1
78704: PPUSH
78705: LD_VAR 0 2
78709: PPUSH
78710: CALL_OW 1
78714: ST_TO_ADDR
// end ;
78715: LD_VAR 0 3
78719: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
78720: LD_INT 0
78722: PPUSH
78723: PPUSH
// if not mc_bases or not base then
78724: LD_EXP 52
78728: NOT
78729: PUSH
78730: LD_VAR 0 1
78734: NOT
78735: OR
78736: IFFALSE 78740
// exit ;
78738: GO 78842
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78740: LD_ADDR_VAR 0 4
78744: PUSH
78745: LD_EXP 52
78749: PUSH
78750: LD_VAR 0 1
78754: ARRAY
78755: PPUSH
78756: LD_INT 30
78758: PUSH
78759: LD_VAR 0 2
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: PPUSH
78768: CALL_OW 72
78772: ST_TO_ADDR
// if not tmp then
78773: LD_VAR 0 4
78777: NOT
78778: IFFALSE 78782
// exit ;
78780: GO 78842
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78782: LD_ADDR_EXP 84
78786: PUSH
78787: LD_EXP 84
78791: PPUSH
78792: LD_VAR 0 1
78796: PPUSH
78797: LD_EXP 84
78801: PUSH
78802: LD_VAR 0 1
78806: ARRAY
78807: PPUSH
78808: LD_EXP 84
78812: PUSH
78813: LD_VAR 0 1
78817: ARRAY
78818: PUSH
78819: LD_INT 1
78821: PLUS
78822: PPUSH
78823: LD_VAR 0 4
78827: PUSH
78828: LD_INT 1
78830: ARRAY
78831: PPUSH
78832: CALL_OW 2
78836: PPUSH
78837: CALL_OW 1
78841: ST_TO_ADDR
// end ;
78842: LD_VAR 0 3
78846: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78847: LD_INT 0
78849: PPUSH
78850: PPUSH
// if not mc_bases or not base or not kinds then
78851: LD_EXP 52
78855: NOT
78856: PUSH
78857: LD_VAR 0 1
78861: NOT
78862: OR
78863: PUSH
78864: LD_VAR 0 2
78868: NOT
78869: OR
78870: IFFALSE 78874
// exit ;
78872: GO 78935
// for i in kinds do
78874: LD_ADDR_VAR 0 4
78878: PUSH
78879: LD_VAR 0 2
78883: PUSH
78884: FOR_IN
78885: IFFALSE 78933
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78887: LD_ADDR_EXP 86
78891: PUSH
78892: LD_EXP 86
78896: PPUSH
78897: LD_VAR 0 1
78901: PUSH
78902: LD_EXP 86
78906: PUSH
78907: LD_VAR 0 1
78911: ARRAY
78912: PUSH
78913: LD_INT 1
78915: PLUS
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PPUSH
78921: LD_VAR 0 4
78925: PPUSH
78926: CALL 18479 0 3
78930: ST_TO_ADDR
78931: GO 78884
78933: POP
78934: POP
// end ;
78935: LD_VAR 0 3
78939: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78940: LD_INT 0
78942: PPUSH
// if not mc_bases or not base or not areas then
78943: LD_EXP 52
78947: NOT
78948: PUSH
78949: LD_VAR 0 1
78953: NOT
78954: OR
78955: PUSH
78956: LD_VAR 0 2
78960: NOT
78961: OR
78962: IFFALSE 78966
// exit ;
78964: GO 78991
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78966: LD_ADDR_EXP 70
78970: PUSH
78971: LD_EXP 70
78975: PPUSH
78976: LD_VAR 0 1
78980: PPUSH
78981: LD_VAR 0 2
78985: PPUSH
78986: CALL_OW 1
78990: ST_TO_ADDR
// end ;
78991: LD_VAR 0 3
78995: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
78996: LD_INT 0
78998: PPUSH
// if not mc_bases or not base or not teleports_exit then
78999: LD_EXP 52
79003: NOT
79004: PUSH
79005: LD_VAR 0 1
79009: NOT
79010: OR
79011: PUSH
79012: LD_VAR 0 2
79016: NOT
79017: OR
79018: IFFALSE 79022
// exit ;
79020: GO 79047
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
79022: LD_ADDR_EXP 87
79026: PUSH
79027: LD_EXP 87
79031: PPUSH
79032: LD_VAR 0 1
79036: PPUSH
79037: LD_VAR 0 2
79041: PPUSH
79042: CALL_OW 1
79046: ST_TO_ADDR
// end ;
79047: LD_VAR 0 3
79051: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
79052: LD_INT 0
79054: PPUSH
79055: PPUSH
79056: PPUSH
// if not mc_bases or not base or not ext_list then
79057: LD_EXP 52
79061: NOT
79062: PUSH
79063: LD_VAR 0 1
79067: NOT
79068: OR
79069: PUSH
79070: LD_VAR 0 5
79074: NOT
79075: OR
79076: IFFALSE 79080
// exit ;
79078: GO 79253
// tmp := GetFacExtXYD ( x , y , d ) ;
79080: LD_ADDR_VAR 0 8
79084: PUSH
79085: LD_VAR 0 2
79089: PPUSH
79090: LD_VAR 0 3
79094: PPUSH
79095: LD_VAR 0 4
79099: PPUSH
79100: CALL 51867 0 3
79104: ST_TO_ADDR
// if not tmp then
79105: LD_VAR 0 8
79109: NOT
79110: IFFALSE 79114
// exit ;
79112: GO 79253
// for i in tmp do
79114: LD_ADDR_VAR 0 7
79118: PUSH
79119: LD_VAR 0 8
79123: PUSH
79124: FOR_IN
79125: IFFALSE 79251
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
79127: LD_ADDR_EXP 57
79131: PUSH
79132: LD_EXP 57
79136: PPUSH
79137: LD_VAR 0 1
79141: PPUSH
79142: LD_EXP 57
79146: PUSH
79147: LD_VAR 0 1
79151: ARRAY
79152: PPUSH
79153: LD_EXP 57
79157: PUSH
79158: LD_VAR 0 1
79162: ARRAY
79163: PUSH
79164: LD_INT 1
79166: PLUS
79167: PPUSH
79168: LD_VAR 0 5
79172: PUSH
79173: LD_INT 1
79175: ARRAY
79176: PUSH
79177: LD_VAR 0 7
79181: PUSH
79182: LD_INT 1
79184: ARRAY
79185: PUSH
79186: LD_VAR 0 7
79190: PUSH
79191: LD_INT 2
79193: ARRAY
79194: PUSH
79195: LD_VAR 0 7
79199: PUSH
79200: LD_INT 3
79202: ARRAY
79203: PUSH
79204: EMPTY
79205: LIST
79206: LIST
79207: LIST
79208: LIST
79209: PPUSH
79210: CALL_OW 2
79214: PPUSH
79215: CALL_OW 1
79219: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
79220: LD_ADDR_VAR 0 5
79224: PUSH
79225: LD_VAR 0 5
79229: PPUSH
79230: LD_INT 1
79232: PPUSH
79233: CALL_OW 3
79237: ST_TO_ADDR
// if not ext_list then
79238: LD_VAR 0 5
79242: NOT
79243: IFFALSE 79249
// exit ;
79245: POP
79246: POP
79247: GO 79253
// end ;
79249: GO 79124
79251: POP
79252: POP
// end ;
79253: LD_VAR 0 6
79257: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
79258: LD_INT 0
79260: PPUSH
// if not mc_bases or not base or not weapon_list then
79261: LD_EXP 52
79265: NOT
79266: PUSH
79267: LD_VAR 0 1
79271: NOT
79272: OR
79273: PUSH
79274: LD_VAR 0 2
79278: NOT
79279: OR
79280: IFFALSE 79284
// exit ;
79282: GO 79309
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
79284: LD_ADDR_EXP 91
79288: PUSH
79289: LD_EXP 91
79293: PPUSH
79294: LD_VAR 0 1
79298: PPUSH
79299: LD_VAR 0 2
79303: PPUSH
79304: CALL_OW 1
79308: ST_TO_ADDR
// end ;
79309: LD_VAR 0 3
79313: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
79314: LD_INT 0
79316: PPUSH
// if not mc_bases or not base or not tech_list then
79317: LD_EXP 52
79321: NOT
79322: PUSH
79323: LD_VAR 0 1
79327: NOT
79328: OR
79329: PUSH
79330: LD_VAR 0 2
79334: NOT
79335: OR
79336: IFFALSE 79340
// exit ;
79338: GO 79365
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
79340: LD_ADDR_EXP 79
79344: PUSH
79345: LD_EXP 79
79349: PPUSH
79350: LD_VAR 0 1
79354: PPUSH
79355: LD_VAR 0 2
79359: PPUSH
79360: CALL_OW 1
79364: ST_TO_ADDR
// end ;
79365: LD_VAR 0 3
79369: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
79370: LD_INT 0
79372: PPUSH
// if not mc_bases or not parking_area or not base then
79373: LD_EXP 52
79377: NOT
79378: PUSH
79379: LD_VAR 0 2
79383: NOT
79384: OR
79385: PUSH
79386: LD_VAR 0 1
79390: NOT
79391: OR
79392: IFFALSE 79396
// exit ;
79394: GO 79421
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
79396: LD_ADDR_EXP 76
79400: PUSH
79401: LD_EXP 76
79405: PPUSH
79406: LD_VAR 0 1
79410: PPUSH
79411: LD_VAR 0 2
79415: PPUSH
79416: CALL_OW 1
79420: ST_TO_ADDR
// end ;
79421: LD_VAR 0 3
79425: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
79426: LD_INT 0
79428: PPUSH
// if not mc_bases or not base or not scan_area then
79429: LD_EXP 52
79433: NOT
79434: PUSH
79435: LD_VAR 0 1
79439: NOT
79440: OR
79441: PUSH
79442: LD_VAR 0 2
79446: NOT
79447: OR
79448: IFFALSE 79452
// exit ;
79450: GO 79477
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
79452: LD_ADDR_EXP 77
79456: PUSH
79457: LD_EXP 77
79461: PPUSH
79462: LD_VAR 0 1
79466: PPUSH
79467: LD_VAR 0 2
79471: PPUSH
79472: CALL_OW 1
79476: ST_TO_ADDR
// end ;
79477: LD_VAR 0 3
79481: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
79482: LD_INT 0
79484: PPUSH
79485: PPUSH
// if not mc_bases or not base then
79486: LD_EXP 52
79490: NOT
79491: PUSH
79492: LD_VAR 0 1
79496: NOT
79497: OR
79498: IFFALSE 79502
// exit ;
79500: GO 79566
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
79502: LD_ADDR_VAR 0 3
79506: PUSH
79507: LD_INT 1
79509: PUSH
79510: LD_INT 2
79512: PUSH
79513: LD_INT 3
79515: PUSH
79516: LD_INT 4
79518: PUSH
79519: LD_INT 11
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: LIST
79526: LIST
79527: LIST
79528: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
79529: LD_ADDR_EXP 79
79533: PUSH
79534: LD_EXP 79
79538: PPUSH
79539: LD_VAR 0 1
79543: PPUSH
79544: LD_EXP 79
79548: PUSH
79549: LD_VAR 0 1
79553: ARRAY
79554: PUSH
79555: LD_VAR 0 3
79559: DIFF
79560: PPUSH
79561: CALL_OW 1
79565: ST_TO_ADDR
// end ;
79566: LD_VAR 0 2
79570: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
79571: LD_INT 0
79573: PPUSH
// result := mc_vehicles [ base ] ;
79574: LD_ADDR_VAR 0 3
79578: PUSH
79579: LD_EXP 71
79583: PUSH
79584: LD_VAR 0 1
79588: ARRAY
79589: ST_TO_ADDR
// if onlyCombat then
79590: LD_VAR 0 2
79594: IFFALSE 79759
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
79596: LD_ADDR_VAR 0 3
79600: PUSH
79601: LD_VAR 0 3
79605: PUSH
79606: LD_VAR 0 3
79610: PPUSH
79611: LD_INT 2
79613: PUSH
79614: LD_INT 34
79616: PUSH
79617: LD_INT 12
79619: PUSH
79620: EMPTY
79621: LIST
79622: LIST
79623: PUSH
79624: LD_INT 34
79626: PUSH
79627: LD_INT 51
79629: PUSH
79630: EMPTY
79631: LIST
79632: LIST
79633: PUSH
79634: LD_INT 34
79636: PUSH
79637: LD_EXP 46
79641: PUSH
79642: EMPTY
79643: LIST
79644: LIST
79645: PUSH
79646: LD_INT 34
79648: PUSH
79649: LD_INT 32
79651: PUSH
79652: EMPTY
79653: LIST
79654: LIST
79655: PUSH
79656: LD_INT 34
79658: PUSH
79659: LD_INT 13
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: LD_INT 34
79668: PUSH
79669: LD_INT 52
79671: PUSH
79672: EMPTY
79673: LIST
79674: LIST
79675: PUSH
79676: LD_INT 34
79678: PUSH
79679: LD_INT 14
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: PUSH
79686: LD_INT 34
79688: PUSH
79689: LD_INT 53
79691: PUSH
79692: EMPTY
79693: LIST
79694: LIST
79695: PUSH
79696: LD_INT 34
79698: PUSH
79699: LD_EXP 45
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: PUSH
79708: LD_INT 34
79710: PUSH
79711: LD_INT 31
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: PUSH
79718: LD_INT 34
79720: PUSH
79721: LD_INT 48
79723: PUSH
79724: EMPTY
79725: LIST
79726: LIST
79727: PUSH
79728: LD_INT 34
79730: PUSH
79731: LD_INT 8
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: LIST
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: LIST
79747: LIST
79748: LIST
79749: LIST
79750: LIST
79751: LIST
79752: PPUSH
79753: CALL_OW 72
79757: DIFF
79758: ST_TO_ADDR
// end ; end_of_file
79759: LD_VAR 0 3
79763: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
79764: LD_INT 0
79766: PPUSH
79767: PPUSH
79768: PPUSH
// if not mc_bases or not skirmish then
79769: LD_EXP 52
79773: NOT
79774: PUSH
79775: LD_EXP 50
79779: NOT
79780: OR
79781: IFFALSE 79785
// exit ;
79783: GO 79950
// for i = 1 to mc_bases do
79785: LD_ADDR_VAR 0 4
79789: PUSH
79790: DOUBLE
79791: LD_INT 1
79793: DEC
79794: ST_TO_ADDR
79795: LD_EXP 52
79799: PUSH
79800: FOR_TO
79801: IFFALSE 79948
// begin if sci in mc_bases [ i ] then
79803: LD_VAR 0 2
79807: PUSH
79808: LD_EXP 52
79812: PUSH
79813: LD_VAR 0 4
79817: ARRAY
79818: IN
79819: IFFALSE 79946
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79821: LD_ADDR_EXP 81
79825: PUSH
79826: LD_EXP 81
79830: PPUSH
79831: LD_VAR 0 4
79835: PUSH
79836: LD_EXP 81
79840: PUSH
79841: LD_VAR 0 4
79845: ARRAY
79846: PUSH
79847: LD_INT 1
79849: PLUS
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PPUSH
79855: LD_VAR 0 1
79859: PPUSH
79860: CALL 18479 0 3
79864: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79865: LD_ADDR_VAR 0 5
79869: PUSH
79870: LD_EXP 52
79874: PUSH
79875: LD_VAR 0 4
79879: ARRAY
79880: PPUSH
79881: LD_INT 2
79883: PUSH
79884: LD_INT 30
79886: PUSH
79887: LD_INT 0
79889: PUSH
79890: EMPTY
79891: LIST
79892: LIST
79893: PUSH
79894: LD_INT 30
79896: PUSH
79897: LD_INT 1
79899: PUSH
79900: EMPTY
79901: LIST
79902: LIST
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: LIST
79908: PPUSH
79909: CALL_OW 72
79913: PPUSH
79914: LD_VAR 0 1
79918: PPUSH
79919: CALL_OW 74
79923: ST_TO_ADDR
// if tmp then
79924: LD_VAR 0 5
79928: IFFALSE 79944
// ComStandNearbyBuilding ( ape , tmp ) ;
79930: LD_VAR 0 1
79934: PPUSH
79935: LD_VAR 0 5
79939: PPUSH
79940: CALL 12682 0 2
// break ;
79944: GO 79948
// end ; end ;
79946: GO 79800
79948: POP
79949: POP
// end ;
79950: LD_VAR 0 3
79954: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79955: LD_INT 0
79957: PPUSH
79958: PPUSH
79959: PPUSH
// if not mc_bases or not skirmish then
79960: LD_EXP 52
79964: NOT
79965: PUSH
79966: LD_EXP 50
79970: NOT
79971: OR
79972: IFFALSE 79976
// exit ;
79974: GO 80065
// for i = 1 to mc_bases do
79976: LD_ADDR_VAR 0 4
79980: PUSH
79981: DOUBLE
79982: LD_INT 1
79984: DEC
79985: ST_TO_ADDR
79986: LD_EXP 52
79990: PUSH
79991: FOR_TO
79992: IFFALSE 80063
// begin if building in mc_busy_turret_list [ i ] then
79994: LD_VAR 0 1
79998: PUSH
79999: LD_EXP 62
80003: PUSH
80004: LD_VAR 0 4
80008: ARRAY
80009: IN
80010: IFFALSE 80061
// begin tmp := mc_busy_turret_list [ i ] diff building ;
80012: LD_ADDR_VAR 0 5
80016: PUSH
80017: LD_EXP 62
80021: PUSH
80022: LD_VAR 0 4
80026: ARRAY
80027: PUSH
80028: LD_VAR 0 1
80032: DIFF
80033: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
80034: LD_ADDR_EXP 62
80038: PUSH
80039: LD_EXP 62
80043: PPUSH
80044: LD_VAR 0 4
80048: PPUSH
80049: LD_VAR 0 5
80053: PPUSH
80054: CALL_OW 1
80058: ST_TO_ADDR
// break ;
80059: GO 80063
// end ; end ;
80061: GO 79991
80063: POP
80064: POP
// end ;
80065: LD_VAR 0 3
80069: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
80070: LD_INT 0
80072: PPUSH
80073: PPUSH
80074: PPUSH
// if not mc_bases or not skirmish then
80075: LD_EXP 52
80079: NOT
80080: PUSH
80081: LD_EXP 50
80085: NOT
80086: OR
80087: IFFALSE 80091
// exit ;
80089: GO 80290
// for i = 1 to mc_bases do
80091: LD_ADDR_VAR 0 5
80095: PUSH
80096: DOUBLE
80097: LD_INT 1
80099: DEC
80100: ST_TO_ADDR
80101: LD_EXP 52
80105: PUSH
80106: FOR_TO
80107: IFFALSE 80288
// if building in mc_bases [ i ] then
80109: LD_VAR 0 1
80113: PUSH
80114: LD_EXP 52
80118: PUSH
80119: LD_VAR 0 5
80123: ARRAY
80124: IN
80125: IFFALSE 80286
// begin tmp := mc_bases [ i ] diff building ;
80127: LD_ADDR_VAR 0 6
80131: PUSH
80132: LD_EXP 52
80136: PUSH
80137: LD_VAR 0 5
80141: ARRAY
80142: PUSH
80143: LD_VAR 0 1
80147: DIFF
80148: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
80149: LD_ADDR_EXP 52
80153: PUSH
80154: LD_EXP 52
80158: PPUSH
80159: LD_VAR 0 5
80163: PPUSH
80164: LD_VAR 0 6
80168: PPUSH
80169: CALL_OW 1
80173: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
80174: LD_VAR 0 1
80178: PUSH
80179: LD_EXP 60
80183: PUSH
80184: LD_VAR 0 5
80188: ARRAY
80189: IN
80190: IFFALSE 80229
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
80192: LD_ADDR_EXP 60
80196: PUSH
80197: LD_EXP 60
80201: PPUSH
80202: LD_VAR 0 5
80206: PPUSH
80207: LD_EXP 60
80211: PUSH
80212: LD_VAR 0 5
80216: ARRAY
80217: PUSH
80218: LD_VAR 0 1
80222: DIFF
80223: PPUSH
80224: CALL_OW 1
80228: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
80229: LD_VAR 0 1
80233: PUSH
80234: LD_EXP 61
80238: PUSH
80239: LD_VAR 0 5
80243: ARRAY
80244: IN
80245: IFFALSE 80284
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
80247: LD_ADDR_EXP 61
80251: PUSH
80252: LD_EXP 61
80256: PPUSH
80257: LD_VAR 0 5
80261: PPUSH
80262: LD_EXP 61
80266: PUSH
80267: LD_VAR 0 5
80271: ARRAY
80272: PUSH
80273: LD_VAR 0 1
80277: DIFF
80278: PPUSH
80279: CALL_OW 1
80283: ST_TO_ADDR
// break ;
80284: GO 80288
// end ;
80286: GO 80106
80288: POP
80289: POP
// end ;
80290: LD_VAR 0 4
80294: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
80295: LD_INT 0
80297: PPUSH
80298: PPUSH
80299: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
80300: LD_EXP 52
80304: NOT
80305: PUSH
80306: LD_EXP 50
80310: NOT
80311: OR
80312: PUSH
80313: LD_VAR 0 3
80317: PUSH
80318: LD_EXP 78
80322: IN
80323: NOT
80324: OR
80325: IFFALSE 80329
// exit ;
80327: GO 80452
// for i = 1 to mc_vehicles do
80329: LD_ADDR_VAR 0 6
80333: PUSH
80334: DOUBLE
80335: LD_INT 1
80337: DEC
80338: ST_TO_ADDR
80339: LD_EXP 71
80343: PUSH
80344: FOR_TO
80345: IFFALSE 80450
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
80347: LD_VAR 0 2
80351: PUSH
80352: LD_EXP 71
80356: PUSH
80357: LD_VAR 0 6
80361: ARRAY
80362: IN
80363: PUSH
80364: LD_VAR 0 1
80368: PUSH
80369: LD_EXP 71
80373: PUSH
80374: LD_VAR 0 6
80378: ARRAY
80379: IN
80380: OR
80381: IFFALSE 80448
// begin tmp := mc_vehicles [ i ] diff old ;
80383: LD_ADDR_VAR 0 7
80387: PUSH
80388: LD_EXP 71
80392: PUSH
80393: LD_VAR 0 6
80397: ARRAY
80398: PUSH
80399: LD_VAR 0 2
80403: DIFF
80404: ST_TO_ADDR
// tmp := tmp diff new ;
80405: LD_ADDR_VAR 0 7
80409: PUSH
80410: LD_VAR 0 7
80414: PUSH
80415: LD_VAR 0 1
80419: DIFF
80420: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
80421: LD_ADDR_EXP 71
80425: PUSH
80426: LD_EXP 71
80430: PPUSH
80431: LD_VAR 0 6
80435: PPUSH
80436: LD_VAR 0 7
80440: PPUSH
80441: CALL_OW 1
80445: ST_TO_ADDR
// break ;
80446: GO 80450
// end ;
80448: GO 80344
80450: POP
80451: POP
// end ;
80452: LD_VAR 0 5
80456: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
80457: LD_INT 0
80459: PPUSH
80460: PPUSH
80461: PPUSH
80462: PPUSH
// if not mc_bases or not skirmish then
80463: LD_EXP 52
80467: NOT
80468: PUSH
80469: LD_EXP 50
80473: NOT
80474: OR
80475: IFFALSE 80479
// exit ;
80477: GO 80856
// side := GetSide ( vehicle ) ;
80479: LD_ADDR_VAR 0 5
80483: PUSH
80484: LD_VAR 0 1
80488: PPUSH
80489: CALL_OW 255
80493: ST_TO_ADDR
// for i = 1 to mc_bases do
80494: LD_ADDR_VAR 0 4
80498: PUSH
80499: DOUBLE
80500: LD_INT 1
80502: DEC
80503: ST_TO_ADDR
80504: LD_EXP 52
80508: PUSH
80509: FOR_TO
80510: IFFALSE 80854
// begin if factory in mc_bases [ i ] then
80512: LD_VAR 0 2
80516: PUSH
80517: LD_EXP 52
80521: PUSH
80522: LD_VAR 0 4
80526: ARRAY
80527: IN
80528: IFFALSE 80852
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
80530: LD_EXP 74
80534: PUSH
80535: LD_VAR 0 4
80539: ARRAY
80540: PUSH
80541: LD_EXP 63
80545: PUSH
80546: LD_VAR 0 4
80550: ARRAY
80551: LESS
80552: PUSH
80553: LD_VAR 0 1
80557: PPUSH
80558: CALL_OW 264
80562: PUSH
80563: LD_INT 31
80565: PUSH
80566: LD_INT 32
80568: PUSH
80569: LD_INT 51
80571: PUSH
80572: LD_EXP 46
80576: PUSH
80577: LD_INT 12
80579: PUSH
80580: LD_INT 30
80582: PUSH
80583: LD_EXP 45
80587: PUSH
80588: LD_INT 11
80590: PUSH
80591: LD_INT 53
80593: PUSH
80594: LD_INT 14
80596: PUSH
80597: LD_EXP 49
80601: PUSH
80602: LD_INT 29
80604: PUSH
80605: LD_EXP 47
80609: PUSH
80610: LD_INT 13
80612: PUSH
80613: LD_INT 52
80615: PUSH
80616: LD_INT 48
80618: PUSH
80619: LD_INT 8
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: LIST
80633: LIST
80634: LIST
80635: LIST
80636: LIST
80637: LIST
80638: LIST
80639: LIST
80640: IN
80641: NOT
80642: AND
80643: IFFALSE 80691
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
80645: LD_ADDR_EXP 74
80649: PUSH
80650: LD_EXP 74
80654: PPUSH
80655: LD_VAR 0 4
80659: PUSH
80660: LD_EXP 74
80664: PUSH
80665: LD_VAR 0 4
80669: ARRAY
80670: PUSH
80671: LD_INT 1
80673: PLUS
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PPUSH
80679: LD_VAR 0 1
80683: PPUSH
80684: CALL 18479 0 3
80688: ST_TO_ADDR
80689: GO 80735
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
80691: LD_ADDR_EXP 71
80695: PUSH
80696: LD_EXP 71
80700: PPUSH
80701: LD_VAR 0 4
80705: PUSH
80706: LD_EXP 71
80710: PUSH
80711: LD_VAR 0 4
80715: ARRAY
80716: PUSH
80717: LD_INT 1
80719: PLUS
80720: PUSH
80721: EMPTY
80722: LIST
80723: LIST
80724: PPUSH
80725: LD_VAR 0 1
80729: PPUSH
80730: CALL 18479 0 3
80734: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
80735: LD_VAR 0 1
80739: PPUSH
80740: CALL_OW 263
80744: PUSH
80745: LD_INT 2
80747: EQUAL
80748: IFFALSE 80768
// begin repeat wait ( 0 0$1 ) ;
80750: LD_INT 35
80752: PPUSH
80753: CALL_OW 67
// until IsControledBy ( vehicle ) ;
80757: LD_VAR 0 1
80761: PPUSH
80762: CALL_OW 312
80766: IFFALSE 80750
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
80768: LD_VAR 0 1
80772: PPUSH
80773: LD_EXP 76
80777: PUSH
80778: LD_VAR 0 4
80782: ARRAY
80783: PPUSH
80784: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
80788: LD_VAR 0 1
80792: PPUSH
80793: CALL_OW 263
80797: PUSH
80798: LD_INT 1
80800: NONEQUAL
80801: IFFALSE 80805
// break ;
80803: GO 80854
// repeat wait ( 0 0$1 ) ;
80805: LD_INT 35
80807: PPUSH
80808: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
80812: LD_VAR 0 1
80816: PPUSH
80817: LD_EXP 76
80821: PUSH
80822: LD_VAR 0 4
80826: ARRAY
80827: PPUSH
80828: CALL_OW 308
80832: IFFALSE 80805
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
80834: LD_VAR 0 1
80838: PPUSH
80839: CALL_OW 311
80843: PPUSH
80844: CALL_OW 121
// exit ;
80848: POP
80849: POP
80850: GO 80856
// end ; end ;
80852: GO 80509
80854: POP
80855: POP
// end ;
80856: LD_VAR 0 3
80860: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
80861: LD_INT 0
80863: PPUSH
80864: PPUSH
80865: PPUSH
80866: PPUSH
// if not mc_bases or not skirmish then
80867: LD_EXP 52
80871: NOT
80872: PUSH
80873: LD_EXP 50
80877: NOT
80878: OR
80879: IFFALSE 80883
// exit ;
80881: GO 81236
// repeat wait ( 0 0$1 ) ;
80883: LD_INT 35
80885: PPUSH
80886: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
80890: LD_VAR 0 2
80894: PPUSH
80895: LD_VAR 0 3
80899: PPUSH
80900: CALL_OW 284
80904: IFFALSE 80883
// if GetResourceTypeXY ( x , y ) = mat_artefact then
80906: LD_VAR 0 2
80910: PPUSH
80911: LD_VAR 0 3
80915: PPUSH
80916: CALL_OW 283
80920: PUSH
80921: LD_INT 4
80923: EQUAL
80924: IFFALSE 80928
// exit ;
80926: GO 81236
// for i = 1 to mc_bases do
80928: LD_ADDR_VAR 0 7
80932: PUSH
80933: DOUBLE
80934: LD_INT 1
80936: DEC
80937: ST_TO_ADDR
80938: LD_EXP 52
80942: PUSH
80943: FOR_TO
80944: IFFALSE 81234
// begin if mc_crates_area [ i ] then
80946: LD_EXP 70
80950: PUSH
80951: LD_VAR 0 7
80955: ARRAY
80956: IFFALSE 81067
// for j in mc_crates_area [ i ] do
80958: LD_ADDR_VAR 0 8
80962: PUSH
80963: LD_EXP 70
80967: PUSH
80968: LD_VAR 0 7
80972: ARRAY
80973: PUSH
80974: FOR_IN
80975: IFFALSE 81065
// if InArea ( x , y , j ) then
80977: LD_VAR 0 2
80981: PPUSH
80982: LD_VAR 0 3
80986: PPUSH
80987: LD_VAR 0 8
80991: PPUSH
80992: CALL_OW 309
80996: IFFALSE 81063
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80998: LD_ADDR_EXP 68
81002: PUSH
81003: LD_EXP 68
81007: PPUSH
81008: LD_VAR 0 7
81012: PUSH
81013: LD_EXP 68
81017: PUSH
81018: LD_VAR 0 7
81022: ARRAY
81023: PUSH
81024: LD_INT 1
81026: PLUS
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PPUSH
81032: LD_VAR 0 4
81036: PUSH
81037: LD_VAR 0 2
81041: PUSH
81042: LD_VAR 0 3
81046: PUSH
81047: EMPTY
81048: LIST
81049: LIST
81050: LIST
81051: PPUSH
81052: CALL 18479 0 3
81056: ST_TO_ADDR
// exit ;
81057: POP
81058: POP
81059: POP
81060: POP
81061: GO 81236
// end ;
81063: GO 80974
81065: POP
81066: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81067: LD_ADDR_VAR 0 9
81071: PUSH
81072: LD_EXP 52
81076: PUSH
81077: LD_VAR 0 7
81081: ARRAY
81082: PPUSH
81083: LD_INT 2
81085: PUSH
81086: LD_INT 30
81088: PUSH
81089: LD_INT 0
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: PUSH
81096: LD_INT 30
81098: PUSH
81099: LD_INT 1
81101: PUSH
81102: EMPTY
81103: LIST
81104: LIST
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: LIST
81110: PPUSH
81111: CALL_OW 72
81115: ST_TO_ADDR
// if not depot then
81116: LD_VAR 0 9
81120: NOT
81121: IFFALSE 81125
// continue ;
81123: GO 80943
// for j in depot do
81125: LD_ADDR_VAR 0 8
81129: PUSH
81130: LD_VAR 0 9
81134: PUSH
81135: FOR_IN
81136: IFFALSE 81230
// if GetDistUnitXY ( j , x , y ) < 30 then
81138: LD_VAR 0 8
81142: PPUSH
81143: LD_VAR 0 2
81147: PPUSH
81148: LD_VAR 0 3
81152: PPUSH
81153: CALL_OW 297
81157: PUSH
81158: LD_INT 30
81160: LESS
81161: IFFALSE 81228
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
81163: LD_ADDR_EXP 68
81167: PUSH
81168: LD_EXP 68
81172: PPUSH
81173: LD_VAR 0 7
81177: PUSH
81178: LD_EXP 68
81182: PUSH
81183: LD_VAR 0 7
81187: ARRAY
81188: PUSH
81189: LD_INT 1
81191: PLUS
81192: PUSH
81193: EMPTY
81194: LIST
81195: LIST
81196: PPUSH
81197: LD_VAR 0 4
81201: PUSH
81202: LD_VAR 0 2
81206: PUSH
81207: LD_VAR 0 3
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: LIST
81216: PPUSH
81217: CALL 18479 0 3
81221: ST_TO_ADDR
// exit ;
81222: POP
81223: POP
81224: POP
81225: POP
81226: GO 81236
// end ;
81228: GO 81135
81230: POP
81231: POP
// end ;
81232: GO 80943
81234: POP
81235: POP
// end ;
81236: LD_VAR 0 6
81240: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
81241: LD_INT 0
81243: PPUSH
81244: PPUSH
81245: PPUSH
81246: PPUSH
// if not mc_bases or not skirmish then
81247: LD_EXP 52
81251: NOT
81252: PUSH
81253: LD_EXP 50
81257: NOT
81258: OR
81259: IFFALSE 81263
// exit ;
81261: GO 81540
// side := GetSide ( lab ) ;
81263: LD_ADDR_VAR 0 4
81267: PUSH
81268: LD_VAR 0 2
81272: PPUSH
81273: CALL_OW 255
81277: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
81278: LD_VAR 0 4
81282: PUSH
81283: LD_EXP 78
81287: IN
81288: NOT
81289: PUSH
81290: LD_EXP 79
81294: NOT
81295: OR
81296: PUSH
81297: LD_EXP 52
81301: NOT
81302: OR
81303: IFFALSE 81307
// exit ;
81305: GO 81540
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
81307: LD_ADDR_EXP 79
81311: PUSH
81312: LD_EXP 79
81316: PPUSH
81317: LD_VAR 0 4
81321: PPUSH
81322: LD_EXP 79
81326: PUSH
81327: LD_VAR 0 4
81331: ARRAY
81332: PUSH
81333: LD_VAR 0 1
81337: DIFF
81338: PPUSH
81339: CALL_OW 1
81343: ST_TO_ADDR
// for i = 1 to mc_bases do
81344: LD_ADDR_VAR 0 5
81348: PUSH
81349: DOUBLE
81350: LD_INT 1
81352: DEC
81353: ST_TO_ADDR
81354: LD_EXP 52
81358: PUSH
81359: FOR_TO
81360: IFFALSE 81538
// begin if lab in mc_bases [ i ] then
81362: LD_VAR 0 2
81366: PUSH
81367: LD_EXP 52
81371: PUSH
81372: LD_VAR 0 5
81376: ARRAY
81377: IN
81378: IFFALSE 81536
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
81380: LD_VAR 0 1
81384: PUSH
81385: LD_INT 11
81387: PUSH
81388: LD_INT 4
81390: PUSH
81391: LD_INT 3
81393: PUSH
81394: LD_INT 2
81396: PUSH
81397: EMPTY
81398: LIST
81399: LIST
81400: LIST
81401: LIST
81402: IN
81403: PUSH
81404: LD_EXP 82
81408: PUSH
81409: LD_VAR 0 5
81413: ARRAY
81414: AND
81415: IFFALSE 81536
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
81417: LD_ADDR_VAR 0 6
81421: PUSH
81422: LD_EXP 82
81426: PUSH
81427: LD_VAR 0 5
81431: ARRAY
81432: PUSH
81433: LD_INT 1
81435: ARRAY
81436: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81437: LD_ADDR_EXP 82
81441: PUSH
81442: LD_EXP 82
81446: PPUSH
81447: LD_VAR 0 5
81451: PPUSH
81452: EMPTY
81453: PPUSH
81454: CALL_OW 1
81458: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
81459: LD_VAR 0 6
81463: PPUSH
81464: LD_INT 0
81466: PPUSH
81467: CALL_OW 109
// ComExitBuilding ( tmp ) ;
81471: LD_VAR 0 6
81475: PPUSH
81476: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
81480: LD_ADDR_EXP 81
81484: PUSH
81485: LD_EXP 81
81489: PPUSH
81490: LD_VAR 0 5
81494: PPUSH
81495: LD_EXP 81
81499: PUSH
81500: LD_VAR 0 5
81504: ARRAY
81505: PPUSH
81506: LD_INT 1
81508: PPUSH
81509: LD_VAR 0 6
81513: PPUSH
81514: CALL_OW 2
81518: PPUSH
81519: CALL_OW 1
81523: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
81524: LD_VAR 0 5
81528: PPUSH
81529: LD_INT 112
81531: PPUSH
81532: CALL 58536 0 2
// end ; end ; end ;
81536: GO 81359
81538: POP
81539: POP
// end ;
81540: LD_VAR 0 3
81544: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
81545: LD_INT 0
81547: PPUSH
81548: PPUSH
81549: PPUSH
81550: PPUSH
81551: PPUSH
81552: PPUSH
81553: PPUSH
81554: PPUSH
// if not mc_bases or not skirmish then
81555: LD_EXP 52
81559: NOT
81560: PUSH
81561: LD_EXP 50
81565: NOT
81566: OR
81567: IFFALSE 81571
// exit ;
81569: GO 82942
// for i = 1 to mc_bases do
81571: LD_ADDR_VAR 0 3
81575: PUSH
81576: DOUBLE
81577: LD_INT 1
81579: DEC
81580: ST_TO_ADDR
81581: LD_EXP 52
81585: PUSH
81586: FOR_TO
81587: IFFALSE 82940
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
81589: LD_VAR 0 1
81593: PUSH
81594: LD_EXP 52
81598: PUSH
81599: LD_VAR 0 3
81603: ARRAY
81604: IN
81605: PUSH
81606: LD_VAR 0 1
81610: PUSH
81611: LD_EXP 59
81615: PUSH
81616: LD_VAR 0 3
81620: ARRAY
81621: IN
81622: OR
81623: PUSH
81624: LD_VAR 0 1
81628: PUSH
81629: LD_EXP 74
81633: PUSH
81634: LD_VAR 0 3
81638: ARRAY
81639: IN
81640: OR
81641: PUSH
81642: LD_VAR 0 1
81646: PUSH
81647: LD_EXP 71
81651: PUSH
81652: LD_VAR 0 3
81656: ARRAY
81657: IN
81658: OR
81659: PUSH
81660: LD_VAR 0 1
81664: PUSH
81665: LD_EXP 81
81669: PUSH
81670: LD_VAR 0 3
81674: ARRAY
81675: IN
81676: OR
81677: PUSH
81678: LD_VAR 0 1
81682: PUSH
81683: LD_EXP 82
81687: PUSH
81688: LD_VAR 0 3
81692: ARRAY
81693: IN
81694: OR
81695: IFFALSE 82938
// begin if un in mc_ape [ i ] then
81697: LD_VAR 0 1
81701: PUSH
81702: LD_EXP 81
81706: PUSH
81707: LD_VAR 0 3
81711: ARRAY
81712: IN
81713: IFFALSE 81752
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
81715: LD_ADDR_EXP 81
81719: PUSH
81720: LD_EXP 81
81724: PPUSH
81725: LD_VAR 0 3
81729: PPUSH
81730: LD_EXP 81
81734: PUSH
81735: LD_VAR 0 3
81739: ARRAY
81740: PUSH
81741: LD_VAR 0 1
81745: DIFF
81746: PPUSH
81747: CALL_OW 1
81751: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
81752: LD_VAR 0 1
81756: PUSH
81757: LD_EXP 82
81761: PUSH
81762: LD_VAR 0 3
81766: ARRAY
81767: IN
81768: IFFALSE 81792
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81770: LD_ADDR_EXP 82
81774: PUSH
81775: LD_EXP 82
81779: PPUSH
81780: LD_VAR 0 3
81784: PPUSH
81785: EMPTY
81786: PPUSH
81787: CALL_OW 1
81791: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
81792: LD_VAR 0 1
81796: PPUSH
81797: CALL_OW 247
81801: PUSH
81802: LD_INT 2
81804: EQUAL
81805: PUSH
81806: LD_VAR 0 1
81810: PPUSH
81811: CALL_OW 110
81815: PUSH
81816: LD_INT 20
81818: EQUAL
81819: PUSH
81820: LD_VAR 0 1
81824: PUSH
81825: LD_EXP 74
81829: PUSH
81830: LD_VAR 0 3
81834: ARRAY
81835: IN
81836: OR
81837: PUSH
81838: LD_VAR 0 1
81842: PPUSH
81843: CALL_OW 264
81847: PUSH
81848: LD_INT 12
81850: PUSH
81851: LD_INT 51
81853: PUSH
81854: LD_EXP 46
81858: PUSH
81859: LD_INT 32
81861: PUSH
81862: LD_INT 13
81864: PUSH
81865: LD_INT 52
81867: PUSH
81868: LD_INT 31
81870: PUSH
81871: EMPTY
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: LIST
81879: IN
81880: OR
81881: AND
81882: IFFALSE 82190
// begin if un in mc_defender [ i ] then
81884: LD_VAR 0 1
81888: PUSH
81889: LD_EXP 74
81893: PUSH
81894: LD_VAR 0 3
81898: ARRAY
81899: IN
81900: IFFALSE 81939
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81902: LD_ADDR_EXP 74
81906: PUSH
81907: LD_EXP 74
81911: PPUSH
81912: LD_VAR 0 3
81916: PPUSH
81917: LD_EXP 74
81921: PUSH
81922: LD_VAR 0 3
81926: ARRAY
81927: PUSH
81928: LD_VAR 0 1
81932: DIFF
81933: PPUSH
81934: CALL_OW 1
81938: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
81939: LD_ADDR_VAR 0 8
81943: PUSH
81944: LD_VAR 0 3
81948: PPUSH
81949: LD_INT 3
81951: PPUSH
81952: CALL 78608 0 2
81956: ST_TO_ADDR
// if fac then
81957: LD_VAR 0 8
81961: IFFALSE 82190
// begin for j in fac do
81963: LD_ADDR_VAR 0 4
81967: PUSH
81968: LD_VAR 0 8
81972: PUSH
81973: FOR_IN
81974: IFFALSE 82188
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
81976: LD_ADDR_VAR 0 9
81980: PUSH
81981: LD_VAR 0 8
81985: PPUSH
81986: LD_VAR 0 1
81990: PPUSH
81991: CALL_OW 265
81995: PPUSH
81996: LD_VAR 0 1
82000: PPUSH
82001: CALL_OW 262
82005: PPUSH
82006: LD_VAR 0 1
82010: PPUSH
82011: CALL_OW 263
82015: PPUSH
82016: LD_VAR 0 1
82020: PPUSH
82021: CALL_OW 264
82025: PPUSH
82026: CALL 16011 0 5
82030: ST_TO_ADDR
// if components then
82031: LD_VAR 0 9
82035: IFFALSE 82186
// begin if GetWeapon ( un ) = ar_control_tower then
82037: LD_VAR 0 1
82041: PPUSH
82042: CALL_OW 264
82046: PUSH
82047: LD_INT 31
82049: EQUAL
82050: IFFALSE 82167
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
82052: LD_VAR 0 1
82056: PPUSH
82057: CALL_OW 311
82061: PPUSH
82062: LD_INT 0
82064: PPUSH
82065: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
82069: LD_ADDR_EXP 92
82073: PUSH
82074: LD_EXP 92
82078: PPUSH
82079: LD_VAR 0 3
82083: PPUSH
82084: LD_EXP 92
82088: PUSH
82089: LD_VAR 0 3
82093: ARRAY
82094: PUSH
82095: LD_VAR 0 1
82099: PPUSH
82100: CALL_OW 311
82104: DIFF
82105: PPUSH
82106: CALL_OW 1
82110: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
82111: LD_ADDR_VAR 0 7
82115: PUSH
82116: LD_EXP 73
82120: PUSH
82121: LD_VAR 0 3
82125: ARRAY
82126: PPUSH
82127: LD_INT 1
82129: PPUSH
82130: LD_VAR 0 9
82134: PPUSH
82135: CALL_OW 2
82139: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
82140: LD_ADDR_EXP 73
82144: PUSH
82145: LD_EXP 73
82149: PPUSH
82150: LD_VAR 0 3
82154: PPUSH
82155: LD_VAR 0 7
82159: PPUSH
82160: CALL_OW 1
82164: ST_TO_ADDR
// end else
82165: GO 82184
// MC_InsertProduceList ( i , [ components ] ) ;
82167: LD_VAR 0 3
82171: PPUSH
82172: LD_VAR 0 9
82176: PUSH
82177: EMPTY
82178: LIST
82179: PPUSH
82180: CALL 78153 0 2
// break ;
82184: GO 82188
// end ; end ;
82186: GO 81973
82188: POP
82189: POP
// end ; end ; if GetType ( un ) = unit_building then
82190: LD_VAR 0 1
82194: PPUSH
82195: CALL_OW 247
82199: PUSH
82200: LD_INT 3
82202: EQUAL
82203: IFFALSE 82606
// begin btype := GetBType ( un ) ;
82205: LD_ADDR_VAR 0 5
82209: PUSH
82210: LD_VAR 0 1
82214: PPUSH
82215: CALL_OW 266
82219: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
82220: LD_VAR 0 5
82224: PUSH
82225: LD_INT 29
82227: PUSH
82228: LD_INT 30
82230: PUSH
82231: EMPTY
82232: LIST
82233: LIST
82234: IN
82235: IFFALSE 82308
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
82237: LD_VAR 0 1
82241: PPUSH
82242: CALL_OW 250
82246: PPUSH
82247: LD_VAR 0 1
82251: PPUSH
82252: CALL_OW 251
82256: PPUSH
82257: LD_VAR 0 1
82261: PPUSH
82262: CALL_OW 255
82266: PPUSH
82267: CALL_OW 440
82271: NOT
82272: IFFALSE 82308
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
82274: LD_VAR 0 1
82278: PPUSH
82279: CALL_OW 250
82283: PPUSH
82284: LD_VAR 0 1
82288: PPUSH
82289: CALL_OW 251
82293: PPUSH
82294: LD_VAR 0 1
82298: PPUSH
82299: CALL_OW 255
82303: PPUSH
82304: CALL_OW 441
// end ; if btype = b_warehouse then
82308: LD_VAR 0 5
82312: PUSH
82313: LD_INT 1
82315: EQUAL
82316: IFFALSE 82334
// begin btype := b_depot ;
82318: LD_ADDR_VAR 0 5
82322: PUSH
82323: LD_INT 0
82325: ST_TO_ADDR
// pos := 1 ;
82326: LD_ADDR_VAR 0 6
82330: PUSH
82331: LD_INT 1
82333: ST_TO_ADDR
// end ; if btype = b_factory then
82334: LD_VAR 0 5
82338: PUSH
82339: LD_INT 3
82341: EQUAL
82342: IFFALSE 82360
// begin btype := b_workshop ;
82344: LD_ADDR_VAR 0 5
82348: PUSH
82349: LD_INT 2
82351: ST_TO_ADDR
// pos := 1 ;
82352: LD_ADDR_VAR 0 6
82356: PUSH
82357: LD_INT 1
82359: ST_TO_ADDR
// end ; if btype = b_barracks then
82360: LD_VAR 0 5
82364: PUSH
82365: LD_INT 5
82367: EQUAL
82368: IFFALSE 82378
// btype := b_armoury ;
82370: LD_ADDR_VAR 0 5
82374: PUSH
82375: LD_INT 4
82377: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
82378: LD_VAR 0 5
82382: PUSH
82383: LD_INT 7
82385: PUSH
82386: LD_INT 8
82388: PUSH
82389: EMPTY
82390: LIST
82391: LIST
82392: IN
82393: IFFALSE 82403
// btype := b_lab ;
82395: LD_ADDR_VAR 0 5
82399: PUSH
82400: LD_INT 6
82402: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
82403: LD_ADDR_EXP 57
82407: PUSH
82408: LD_EXP 57
82412: PPUSH
82413: LD_VAR 0 3
82417: PUSH
82418: LD_EXP 57
82422: PUSH
82423: LD_VAR 0 3
82427: ARRAY
82428: PUSH
82429: LD_INT 1
82431: PLUS
82432: PUSH
82433: EMPTY
82434: LIST
82435: LIST
82436: PPUSH
82437: LD_VAR 0 5
82441: PUSH
82442: LD_VAR 0 1
82446: PPUSH
82447: CALL_OW 250
82451: PUSH
82452: LD_VAR 0 1
82456: PPUSH
82457: CALL_OW 251
82461: PUSH
82462: LD_VAR 0 1
82466: PPUSH
82467: CALL_OW 254
82471: PUSH
82472: EMPTY
82473: LIST
82474: LIST
82475: LIST
82476: LIST
82477: PPUSH
82478: CALL 18479 0 3
82482: ST_TO_ADDR
// if pos = 1 then
82483: LD_VAR 0 6
82487: PUSH
82488: LD_INT 1
82490: EQUAL
82491: IFFALSE 82606
// begin tmp := mc_build_list [ i ] ;
82493: LD_ADDR_VAR 0 7
82497: PUSH
82498: LD_EXP 57
82502: PUSH
82503: LD_VAR 0 3
82507: ARRAY
82508: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82509: LD_VAR 0 7
82513: PPUSH
82514: LD_INT 2
82516: PUSH
82517: LD_INT 30
82519: PUSH
82520: LD_INT 0
82522: PUSH
82523: EMPTY
82524: LIST
82525: LIST
82526: PUSH
82527: LD_INT 30
82529: PUSH
82530: LD_INT 1
82532: PUSH
82533: EMPTY
82534: LIST
82535: LIST
82536: PUSH
82537: EMPTY
82538: LIST
82539: LIST
82540: LIST
82541: PPUSH
82542: CALL_OW 72
82546: IFFALSE 82556
// pos := 2 ;
82548: LD_ADDR_VAR 0 6
82552: PUSH
82553: LD_INT 2
82555: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
82556: LD_ADDR_VAR 0 7
82560: PUSH
82561: LD_VAR 0 7
82565: PPUSH
82566: LD_VAR 0 6
82570: PPUSH
82571: LD_VAR 0 7
82575: PPUSH
82576: CALL 18805 0 3
82580: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
82581: LD_ADDR_EXP 57
82585: PUSH
82586: LD_EXP 57
82590: PPUSH
82591: LD_VAR 0 3
82595: PPUSH
82596: LD_VAR 0 7
82600: PPUSH
82601: CALL_OW 1
82605: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
82606: LD_VAR 0 1
82610: PUSH
82611: LD_EXP 52
82615: PUSH
82616: LD_VAR 0 3
82620: ARRAY
82621: IN
82622: IFFALSE 82661
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
82624: LD_ADDR_EXP 52
82628: PUSH
82629: LD_EXP 52
82633: PPUSH
82634: LD_VAR 0 3
82638: PPUSH
82639: LD_EXP 52
82643: PUSH
82644: LD_VAR 0 3
82648: ARRAY
82649: PUSH
82650: LD_VAR 0 1
82654: DIFF
82655: PPUSH
82656: CALL_OW 1
82660: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
82661: LD_VAR 0 1
82665: PUSH
82666: LD_EXP 59
82670: PUSH
82671: LD_VAR 0 3
82675: ARRAY
82676: IN
82677: IFFALSE 82716
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
82679: LD_ADDR_EXP 59
82683: PUSH
82684: LD_EXP 59
82688: PPUSH
82689: LD_VAR 0 3
82693: PPUSH
82694: LD_EXP 59
82698: PUSH
82699: LD_VAR 0 3
82703: ARRAY
82704: PUSH
82705: LD_VAR 0 1
82709: DIFF
82710: PPUSH
82711: CALL_OW 1
82715: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
82716: LD_VAR 0 1
82720: PUSH
82721: LD_EXP 71
82725: PUSH
82726: LD_VAR 0 3
82730: ARRAY
82731: IN
82732: IFFALSE 82771
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
82734: LD_ADDR_EXP 71
82738: PUSH
82739: LD_EXP 71
82743: PPUSH
82744: LD_VAR 0 3
82748: PPUSH
82749: LD_EXP 71
82753: PUSH
82754: LD_VAR 0 3
82758: ARRAY
82759: PUSH
82760: LD_VAR 0 1
82764: DIFF
82765: PPUSH
82766: CALL_OW 1
82770: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
82771: LD_VAR 0 1
82775: PUSH
82776: LD_EXP 74
82780: PUSH
82781: LD_VAR 0 3
82785: ARRAY
82786: IN
82787: IFFALSE 82826
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
82789: LD_ADDR_EXP 74
82793: PUSH
82794: LD_EXP 74
82798: PPUSH
82799: LD_VAR 0 3
82803: PPUSH
82804: LD_EXP 74
82808: PUSH
82809: LD_VAR 0 3
82813: ARRAY
82814: PUSH
82815: LD_VAR 0 1
82819: DIFF
82820: PPUSH
82821: CALL_OW 1
82825: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
82826: LD_VAR 0 1
82830: PUSH
82831: LD_EXP 61
82835: PUSH
82836: LD_VAR 0 3
82840: ARRAY
82841: IN
82842: IFFALSE 82881
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
82844: LD_ADDR_EXP 61
82848: PUSH
82849: LD_EXP 61
82853: PPUSH
82854: LD_VAR 0 3
82858: PPUSH
82859: LD_EXP 61
82863: PUSH
82864: LD_VAR 0 3
82868: ARRAY
82869: PUSH
82870: LD_VAR 0 1
82874: DIFF
82875: PPUSH
82876: CALL_OW 1
82880: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
82881: LD_VAR 0 1
82885: PUSH
82886: LD_EXP 60
82890: PUSH
82891: LD_VAR 0 3
82895: ARRAY
82896: IN
82897: IFFALSE 82936
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
82899: LD_ADDR_EXP 60
82903: PUSH
82904: LD_EXP 60
82908: PPUSH
82909: LD_VAR 0 3
82913: PPUSH
82914: LD_EXP 60
82918: PUSH
82919: LD_VAR 0 3
82923: ARRAY
82924: PUSH
82925: LD_VAR 0 1
82929: DIFF
82930: PPUSH
82931: CALL_OW 1
82935: ST_TO_ADDR
// end ; break ;
82936: GO 82940
// end ;
82938: GO 81586
82940: POP
82941: POP
// end ;
82942: LD_VAR 0 2
82946: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
82947: LD_INT 0
82949: PPUSH
82950: PPUSH
82951: PPUSH
// if not mc_bases or not skirmish then
82952: LD_EXP 52
82956: NOT
82957: PUSH
82958: LD_EXP 50
82962: NOT
82963: OR
82964: IFFALSE 82968
// exit ;
82966: GO 83183
// for i = 1 to mc_bases do
82968: LD_ADDR_VAR 0 3
82972: PUSH
82973: DOUBLE
82974: LD_INT 1
82976: DEC
82977: ST_TO_ADDR
82978: LD_EXP 52
82982: PUSH
82983: FOR_TO
82984: IFFALSE 83181
// begin if building in mc_construct_list [ i ] then
82986: LD_VAR 0 1
82990: PUSH
82991: LD_EXP 59
82995: PUSH
82996: LD_VAR 0 3
83000: ARRAY
83001: IN
83002: IFFALSE 83179
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
83004: LD_ADDR_EXP 59
83008: PUSH
83009: LD_EXP 59
83013: PPUSH
83014: LD_VAR 0 3
83018: PPUSH
83019: LD_EXP 59
83023: PUSH
83024: LD_VAR 0 3
83028: ARRAY
83029: PUSH
83030: LD_VAR 0 1
83034: DIFF
83035: PPUSH
83036: CALL_OW 1
83040: ST_TO_ADDR
// if building in mc_lab [ i ] then
83041: LD_VAR 0 1
83045: PUSH
83046: LD_EXP 85
83050: PUSH
83051: LD_VAR 0 3
83055: ARRAY
83056: IN
83057: IFFALSE 83112
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
83059: LD_ADDR_EXP 86
83063: PUSH
83064: LD_EXP 86
83068: PPUSH
83069: LD_VAR 0 3
83073: PPUSH
83074: LD_EXP 86
83078: PUSH
83079: LD_VAR 0 3
83083: ARRAY
83084: PPUSH
83085: LD_INT 1
83087: PPUSH
83088: LD_EXP 86
83092: PUSH
83093: LD_VAR 0 3
83097: ARRAY
83098: PPUSH
83099: LD_INT 0
83101: PPUSH
83102: CALL 17897 0 4
83106: PPUSH
83107: CALL_OW 1
83111: ST_TO_ADDR
// if not building in mc_bases [ i ] then
83112: LD_VAR 0 1
83116: PUSH
83117: LD_EXP 52
83121: PUSH
83122: LD_VAR 0 3
83126: ARRAY
83127: IN
83128: NOT
83129: IFFALSE 83175
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
83131: LD_ADDR_EXP 52
83135: PUSH
83136: LD_EXP 52
83140: PPUSH
83141: LD_VAR 0 3
83145: PUSH
83146: LD_EXP 52
83150: PUSH
83151: LD_VAR 0 3
83155: ARRAY
83156: PUSH
83157: LD_INT 1
83159: PLUS
83160: PUSH
83161: EMPTY
83162: LIST
83163: LIST
83164: PPUSH
83165: LD_VAR 0 1
83169: PPUSH
83170: CALL 18479 0 3
83174: ST_TO_ADDR
// exit ;
83175: POP
83176: POP
83177: GO 83183
// end ; end ;
83179: GO 82983
83181: POP
83182: POP
// end ;
83183: LD_VAR 0 2
83187: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
83188: LD_INT 0
83190: PPUSH
83191: PPUSH
83192: PPUSH
83193: PPUSH
83194: PPUSH
83195: PPUSH
83196: PPUSH
// if not mc_bases or not skirmish then
83197: LD_EXP 52
83201: NOT
83202: PUSH
83203: LD_EXP 50
83207: NOT
83208: OR
83209: IFFALSE 83213
// exit ;
83211: GO 83874
// for i = 1 to mc_bases do
83213: LD_ADDR_VAR 0 3
83217: PUSH
83218: DOUBLE
83219: LD_INT 1
83221: DEC
83222: ST_TO_ADDR
83223: LD_EXP 52
83227: PUSH
83228: FOR_TO
83229: IFFALSE 83872
// begin if building in mc_construct_list [ i ] then
83231: LD_VAR 0 1
83235: PUSH
83236: LD_EXP 59
83240: PUSH
83241: LD_VAR 0 3
83245: ARRAY
83246: IN
83247: IFFALSE 83870
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
83249: LD_ADDR_EXP 59
83253: PUSH
83254: LD_EXP 59
83258: PPUSH
83259: LD_VAR 0 3
83263: PPUSH
83264: LD_EXP 59
83268: PUSH
83269: LD_VAR 0 3
83273: ARRAY
83274: PUSH
83275: LD_VAR 0 1
83279: DIFF
83280: PPUSH
83281: CALL_OW 1
83285: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
83286: LD_ADDR_EXP 52
83290: PUSH
83291: LD_EXP 52
83295: PPUSH
83296: LD_VAR 0 3
83300: PUSH
83301: LD_EXP 52
83305: PUSH
83306: LD_VAR 0 3
83310: ARRAY
83311: PUSH
83312: LD_INT 1
83314: PLUS
83315: PUSH
83316: EMPTY
83317: LIST
83318: LIST
83319: PPUSH
83320: LD_VAR 0 1
83324: PPUSH
83325: CALL 18479 0 3
83329: ST_TO_ADDR
// btype := GetBType ( building ) ;
83330: LD_ADDR_VAR 0 5
83334: PUSH
83335: LD_VAR 0 1
83339: PPUSH
83340: CALL_OW 266
83344: ST_TO_ADDR
// side := GetSide ( building ) ;
83345: LD_ADDR_VAR 0 8
83349: PUSH
83350: LD_VAR 0 1
83354: PPUSH
83355: CALL_OW 255
83359: ST_TO_ADDR
// if btype = b_lab then
83360: LD_VAR 0 5
83364: PUSH
83365: LD_INT 6
83367: EQUAL
83368: IFFALSE 83418
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
83370: LD_ADDR_EXP 85
83374: PUSH
83375: LD_EXP 85
83379: PPUSH
83380: LD_VAR 0 3
83384: PUSH
83385: LD_EXP 85
83389: PUSH
83390: LD_VAR 0 3
83394: ARRAY
83395: PUSH
83396: LD_INT 1
83398: PLUS
83399: PUSH
83400: EMPTY
83401: LIST
83402: LIST
83403: PPUSH
83404: LD_VAR 0 1
83408: PPUSH
83409: CALL 18479 0 3
83413: ST_TO_ADDR
// exit ;
83414: POP
83415: POP
83416: GO 83874
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
83418: LD_VAR 0 5
83422: PUSH
83423: LD_INT 0
83425: PUSH
83426: LD_INT 2
83428: PUSH
83429: LD_INT 4
83431: PUSH
83432: EMPTY
83433: LIST
83434: LIST
83435: LIST
83436: IN
83437: IFFALSE 83561
// begin if btype = b_armoury then
83439: LD_VAR 0 5
83443: PUSH
83444: LD_INT 4
83446: EQUAL
83447: IFFALSE 83457
// btype := b_barracks ;
83449: LD_ADDR_VAR 0 5
83453: PUSH
83454: LD_INT 5
83456: ST_TO_ADDR
// if btype = b_depot then
83457: LD_VAR 0 5
83461: PUSH
83462: LD_INT 0
83464: EQUAL
83465: IFFALSE 83475
// btype := b_warehouse ;
83467: LD_ADDR_VAR 0 5
83471: PUSH
83472: LD_INT 1
83474: ST_TO_ADDR
// if btype = b_workshop then
83475: LD_VAR 0 5
83479: PUSH
83480: LD_INT 2
83482: EQUAL
83483: IFFALSE 83493
// btype := b_factory ;
83485: LD_ADDR_VAR 0 5
83489: PUSH
83490: LD_INT 3
83492: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
83493: LD_VAR 0 5
83497: PPUSH
83498: LD_VAR 0 8
83502: PPUSH
83503: CALL_OW 323
83507: PUSH
83508: LD_INT 1
83510: EQUAL
83511: IFFALSE 83557
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
83513: LD_ADDR_EXP 84
83517: PUSH
83518: LD_EXP 84
83522: PPUSH
83523: LD_VAR 0 3
83527: PUSH
83528: LD_EXP 84
83532: PUSH
83533: LD_VAR 0 3
83537: ARRAY
83538: PUSH
83539: LD_INT 1
83541: PLUS
83542: PUSH
83543: EMPTY
83544: LIST
83545: LIST
83546: PPUSH
83547: LD_VAR 0 1
83551: PPUSH
83552: CALL 18479 0 3
83556: ST_TO_ADDR
// exit ;
83557: POP
83558: POP
83559: GO 83874
// end ; if btype in [ b_bunker , b_turret ] then
83561: LD_VAR 0 5
83565: PUSH
83566: LD_INT 32
83568: PUSH
83569: LD_INT 33
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: IN
83576: IFFALSE 83866
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
83578: LD_ADDR_EXP 60
83582: PUSH
83583: LD_EXP 60
83587: PPUSH
83588: LD_VAR 0 3
83592: PUSH
83593: LD_EXP 60
83597: PUSH
83598: LD_VAR 0 3
83602: ARRAY
83603: PUSH
83604: LD_INT 1
83606: PLUS
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PPUSH
83612: LD_VAR 0 1
83616: PPUSH
83617: CALL 18479 0 3
83621: ST_TO_ADDR
// if btype = b_bunker then
83622: LD_VAR 0 5
83626: PUSH
83627: LD_INT 32
83629: EQUAL
83630: IFFALSE 83866
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83632: LD_ADDR_EXP 61
83636: PUSH
83637: LD_EXP 61
83641: PPUSH
83642: LD_VAR 0 3
83646: PUSH
83647: LD_EXP 61
83651: PUSH
83652: LD_VAR 0 3
83656: ARRAY
83657: PUSH
83658: LD_INT 1
83660: PLUS
83661: PUSH
83662: EMPTY
83663: LIST
83664: LIST
83665: PPUSH
83666: LD_VAR 0 1
83670: PPUSH
83671: CALL 18479 0 3
83675: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
83676: LD_ADDR_VAR 0 6
83680: PUSH
83681: LD_EXP 52
83685: PUSH
83686: LD_VAR 0 3
83690: ARRAY
83691: PPUSH
83692: LD_INT 25
83694: PUSH
83695: LD_INT 1
83697: PUSH
83698: EMPTY
83699: LIST
83700: LIST
83701: PUSH
83702: LD_INT 3
83704: PUSH
83705: LD_INT 54
83707: PUSH
83708: EMPTY
83709: LIST
83710: PUSH
83711: EMPTY
83712: LIST
83713: LIST
83714: PUSH
83715: EMPTY
83716: LIST
83717: LIST
83718: PPUSH
83719: CALL_OW 72
83723: ST_TO_ADDR
// if tmp then
83724: LD_VAR 0 6
83728: IFFALSE 83734
// exit ;
83730: POP
83731: POP
83732: GO 83874
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
83734: LD_ADDR_VAR 0 6
83738: PUSH
83739: LD_EXP 52
83743: PUSH
83744: LD_VAR 0 3
83748: ARRAY
83749: PPUSH
83750: LD_INT 2
83752: PUSH
83753: LD_INT 30
83755: PUSH
83756: LD_INT 4
83758: PUSH
83759: EMPTY
83760: LIST
83761: LIST
83762: PUSH
83763: LD_INT 30
83765: PUSH
83766: LD_INT 5
83768: PUSH
83769: EMPTY
83770: LIST
83771: LIST
83772: PUSH
83773: EMPTY
83774: LIST
83775: LIST
83776: LIST
83777: PPUSH
83778: CALL_OW 72
83782: ST_TO_ADDR
// if not tmp then
83783: LD_VAR 0 6
83787: NOT
83788: IFFALSE 83794
// exit ;
83790: POP
83791: POP
83792: GO 83874
// for j in tmp do
83794: LD_ADDR_VAR 0 4
83798: PUSH
83799: LD_VAR 0 6
83803: PUSH
83804: FOR_IN
83805: IFFALSE 83864
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
83807: LD_ADDR_VAR 0 7
83811: PUSH
83812: LD_VAR 0 4
83816: PPUSH
83817: CALL_OW 313
83821: PPUSH
83822: LD_INT 25
83824: PUSH
83825: LD_INT 1
83827: PUSH
83828: EMPTY
83829: LIST
83830: LIST
83831: PPUSH
83832: CALL_OW 72
83836: ST_TO_ADDR
// if units then
83837: LD_VAR 0 7
83841: IFFALSE 83862
// begin ComExitBuilding ( units [ 1 ] ) ;
83843: LD_VAR 0 7
83847: PUSH
83848: LD_INT 1
83850: ARRAY
83851: PPUSH
83852: CALL_OW 122
// exit ;
83856: POP
83857: POP
83858: POP
83859: POP
83860: GO 83874
// end ; end ;
83862: GO 83804
83864: POP
83865: POP
// end ; end ; exit ;
83866: POP
83867: POP
83868: GO 83874
// end ; end ;
83870: GO 83228
83872: POP
83873: POP
// end ;
83874: LD_VAR 0 2
83878: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
83879: LD_INT 0
83881: PPUSH
83882: PPUSH
83883: PPUSH
83884: PPUSH
83885: PPUSH
83886: PPUSH
83887: PPUSH
// if not mc_bases or not skirmish then
83888: LD_EXP 52
83892: NOT
83893: PUSH
83894: LD_EXP 50
83898: NOT
83899: OR
83900: IFFALSE 83904
// exit ;
83902: GO 84135
// btype := GetBType ( building ) ;
83904: LD_ADDR_VAR 0 6
83908: PUSH
83909: LD_VAR 0 1
83913: PPUSH
83914: CALL_OW 266
83918: ST_TO_ADDR
// x := GetX ( building ) ;
83919: LD_ADDR_VAR 0 7
83923: PUSH
83924: LD_VAR 0 1
83928: PPUSH
83929: CALL_OW 250
83933: ST_TO_ADDR
// y := GetY ( building ) ;
83934: LD_ADDR_VAR 0 8
83938: PUSH
83939: LD_VAR 0 1
83943: PPUSH
83944: CALL_OW 251
83948: ST_TO_ADDR
// d := GetDir ( building ) ;
83949: LD_ADDR_VAR 0 9
83953: PUSH
83954: LD_VAR 0 1
83958: PPUSH
83959: CALL_OW 254
83963: ST_TO_ADDR
// for i = 1 to mc_bases do
83964: LD_ADDR_VAR 0 4
83968: PUSH
83969: DOUBLE
83970: LD_INT 1
83972: DEC
83973: ST_TO_ADDR
83974: LD_EXP 52
83978: PUSH
83979: FOR_TO
83980: IFFALSE 84133
// begin if not mc_build_list [ i ] then
83982: LD_EXP 57
83986: PUSH
83987: LD_VAR 0 4
83991: ARRAY
83992: NOT
83993: IFFALSE 83997
// continue ;
83995: GO 83979
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
83997: LD_VAR 0 6
84001: PUSH
84002: LD_VAR 0 7
84006: PUSH
84007: LD_VAR 0 8
84011: PUSH
84012: LD_VAR 0 9
84016: PUSH
84017: EMPTY
84018: LIST
84019: LIST
84020: LIST
84021: LIST
84022: PPUSH
84023: LD_EXP 57
84027: PUSH
84028: LD_VAR 0 4
84032: ARRAY
84033: PUSH
84034: LD_INT 1
84036: ARRAY
84037: PPUSH
84038: CALL 24648 0 2
84042: IFFALSE 84131
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
84044: LD_ADDR_EXP 57
84048: PUSH
84049: LD_EXP 57
84053: PPUSH
84054: LD_VAR 0 4
84058: PPUSH
84059: LD_EXP 57
84063: PUSH
84064: LD_VAR 0 4
84068: ARRAY
84069: PPUSH
84070: LD_INT 1
84072: PPUSH
84073: CALL_OW 3
84077: PPUSH
84078: CALL_OW 1
84082: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
84083: LD_ADDR_EXP 59
84087: PUSH
84088: LD_EXP 59
84092: PPUSH
84093: LD_VAR 0 4
84097: PUSH
84098: LD_EXP 59
84102: PUSH
84103: LD_VAR 0 4
84107: ARRAY
84108: PUSH
84109: LD_INT 1
84111: PLUS
84112: PUSH
84113: EMPTY
84114: LIST
84115: LIST
84116: PPUSH
84117: LD_VAR 0 1
84121: PPUSH
84122: CALL 18479 0 3
84126: ST_TO_ADDR
// exit ;
84127: POP
84128: POP
84129: GO 84135
// end ; end ;
84131: GO 83979
84133: POP
84134: POP
// end ;
84135: LD_VAR 0 3
84139: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
84140: LD_INT 0
84142: PPUSH
84143: PPUSH
84144: PPUSH
// if not mc_bases or not skirmish then
84145: LD_EXP 52
84149: NOT
84150: PUSH
84151: LD_EXP 50
84155: NOT
84156: OR
84157: IFFALSE 84161
// exit ;
84159: GO 84351
// for i = 1 to mc_bases do
84161: LD_ADDR_VAR 0 4
84165: PUSH
84166: DOUBLE
84167: LD_INT 1
84169: DEC
84170: ST_TO_ADDR
84171: LD_EXP 52
84175: PUSH
84176: FOR_TO
84177: IFFALSE 84264
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
84179: LD_VAR 0 1
84183: PUSH
84184: LD_EXP 60
84188: PUSH
84189: LD_VAR 0 4
84193: ARRAY
84194: IN
84195: PUSH
84196: LD_VAR 0 1
84200: PUSH
84201: LD_EXP 61
84205: PUSH
84206: LD_VAR 0 4
84210: ARRAY
84211: IN
84212: NOT
84213: AND
84214: IFFALSE 84262
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84216: LD_ADDR_EXP 61
84220: PUSH
84221: LD_EXP 61
84225: PPUSH
84226: LD_VAR 0 4
84230: PUSH
84231: LD_EXP 61
84235: PUSH
84236: LD_VAR 0 4
84240: ARRAY
84241: PUSH
84242: LD_INT 1
84244: PLUS
84245: PUSH
84246: EMPTY
84247: LIST
84248: LIST
84249: PPUSH
84250: LD_VAR 0 1
84254: PPUSH
84255: CALL 18479 0 3
84259: ST_TO_ADDR
// break ;
84260: GO 84264
// end ; end ;
84262: GO 84176
84264: POP
84265: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
84266: LD_VAR 0 1
84270: PPUSH
84271: CALL_OW 257
84275: PUSH
84276: LD_EXP 78
84280: IN
84281: PUSH
84282: LD_VAR 0 1
84286: PPUSH
84287: CALL_OW 266
84291: PUSH
84292: LD_INT 5
84294: EQUAL
84295: AND
84296: PUSH
84297: LD_VAR 0 2
84301: PPUSH
84302: CALL_OW 110
84306: PUSH
84307: LD_INT 18
84309: NONEQUAL
84310: AND
84311: IFFALSE 84351
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
84313: LD_VAR 0 2
84317: PPUSH
84318: CALL_OW 257
84322: PUSH
84323: LD_INT 5
84325: PUSH
84326: LD_INT 8
84328: PUSH
84329: LD_INT 9
84331: PUSH
84332: EMPTY
84333: LIST
84334: LIST
84335: LIST
84336: IN
84337: IFFALSE 84351
// SetClass ( unit , 1 ) ;
84339: LD_VAR 0 2
84343: PPUSH
84344: LD_INT 1
84346: PPUSH
84347: CALL_OW 336
// end ;
84351: LD_VAR 0 3
84355: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
84356: LD_INT 0
84358: PPUSH
84359: PPUSH
// if not mc_bases or not skirmish then
84360: LD_EXP 52
84364: NOT
84365: PUSH
84366: LD_EXP 50
84370: NOT
84371: OR
84372: IFFALSE 84376
// exit ;
84374: GO 84492
// if GetLives ( abandoned_vehicle ) > 250 then
84376: LD_VAR 0 2
84380: PPUSH
84381: CALL_OW 256
84385: PUSH
84386: LD_INT 250
84388: GREATER
84389: IFFALSE 84393
// exit ;
84391: GO 84492
// for i = 1 to mc_bases do
84393: LD_ADDR_VAR 0 6
84397: PUSH
84398: DOUBLE
84399: LD_INT 1
84401: DEC
84402: ST_TO_ADDR
84403: LD_EXP 52
84407: PUSH
84408: FOR_TO
84409: IFFALSE 84490
// begin if driver in mc_bases [ i ] then
84411: LD_VAR 0 1
84415: PUSH
84416: LD_EXP 52
84420: PUSH
84421: LD_VAR 0 6
84425: ARRAY
84426: IN
84427: IFFALSE 84488
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
84429: LD_VAR 0 1
84433: PPUSH
84434: LD_EXP 52
84438: PUSH
84439: LD_VAR 0 6
84443: ARRAY
84444: PPUSH
84445: LD_INT 2
84447: PUSH
84448: LD_INT 30
84450: PUSH
84451: LD_INT 0
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PUSH
84458: LD_INT 30
84460: PUSH
84461: LD_INT 1
84463: PUSH
84464: EMPTY
84465: LIST
84466: LIST
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: LIST
84472: PPUSH
84473: CALL_OW 72
84477: PUSH
84478: LD_INT 1
84480: ARRAY
84481: PPUSH
84482: CALL_OW 112
// break ;
84486: GO 84490
// end ; end ;
84488: GO 84408
84490: POP
84491: POP
// end ; end_of_file end_of_file
84492: LD_VAR 0 5
84496: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
84497: GO 84499
84499: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
84500: LD_STRING initStreamRollete();
84502: PPUSH
84503: CALL_OW 559
// InitStreamMode ;
84507: CALL 84516 0 0
// DefineStreamItems ( ) ;
84511: CALL 84956 0 0
// end ;
84515: END
// function InitStreamMode ; begin
84516: LD_INT 0
84518: PPUSH
// streamModeActive := false ;
84519: LD_ADDR_EXP 95
84523: PUSH
84524: LD_INT 0
84526: ST_TO_ADDR
// normalCounter := 36 ;
84527: LD_ADDR_EXP 96
84531: PUSH
84532: LD_INT 36
84534: ST_TO_ADDR
// hardcoreCounter := 16 ;
84535: LD_ADDR_EXP 97
84539: PUSH
84540: LD_INT 16
84542: ST_TO_ADDR
// sRocket := false ;
84543: LD_ADDR_EXP 100
84547: PUSH
84548: LD_INT 0
84550: ST_TO_ADDR
// sSpeed := false ;
84551: LD_ADDR_EXP 99
84555: PUSH
84556: LD_INT 0
84558: ST_TO_ADDR
// sEngine := false ;
84559: LD_ADDR_EXP 101
84563: PUSH
84564: LD_INT 0
84566: ST_TO_ADDR
// sSpec := false ;
84567: LD_ADDR_EXP 98
84571: PUSH
84572: LD_INT 0
84574: ST_TO_ADDR
// sLevel := false ;
84575: LD_ADDR_EXP 102
84579: PUSH
84580: LD_INT 0
84582: ST_TO_ADDR
// sArmoury := false ;
84583: LD_ADDR_EXP 103
84587: PUSH
84588: LD_INT 0
84590: ST_TO_ADDR
// sRadar := false ;
84591: LD_ADDR_EXP 104
84595: PUSH
84596: LD_INT 0
84598: ST_TO_ADDR
// sBunker := false ;
84599: LD_ADDR_EXP 105
84603: PUSH
84604: LD_INT 0
84606: ST_TO_ADDR
// sHack := false ;
84607: LD_ADDR_EXP 106
84611: PUSH
84612: LD_INT 0
84614: ST_TO_ADDR
// sFire := false ;
84615: LD_ADDR_EXP 107
84619: PUSH
84620: LD_INT 0
84622: ST_TO_ADDR
// sRefresh := false ;
84623: LD_ADDR_EXP 108
84627: PUSH
84628: LD_INT 0
84630: ST_TO_ADDR
// sExp := false ;
84631: LD_ADDR_EXP 109
84635: PUSH
84636: LD_INT 0
84638: ST_TO_ADDR
// sDepot := false ;
84639: LD_ADDR_EXP 110
84643: PUSH
84644: LD_INT 0
84646: ST_TO_ADDR
// sFlag := false ;
84647: LD_ADDR_EXP 111
84651: PUSH
84652: LD_INT 0
84654: ST_TO_ADDR
// sKamikadze := false ;
84655: LD_ADDR_EXP 119
84659: PUSH
84660: LD_INT 0
84662: ST_TO_ADDR
// sTroll := false ;
84663: LD_ADDR_EXP 120
84667: PUSH
84668: LD_INT 0
84670: ST_TO_ADDR
// sSlow := false ;
84671: LD_ADDR_EXP 121
84675: PUSH
84676: LD_INT 0
84678: ST_TO_ADDR
// sLack := false ;
84679: LD_ADDR_EXP 122
84683: PUSH
84684: LD_INT 0
84686: ST_TO_ADDR
// sTank := false ;
84687: LD_ADDR_EXP 124
84691: PUSH
84692: LD_INT 0
84694: ST_TO_ADDR
// sRemote := false ;
84695: LD_ADDR_EXP 125
84699: PUSH
84700: LD_INT 0
84702: ST_TO_ADDR
// sPowell := false ;
84703: LD_ADDR_EXP 126
84707: PUSH
84708: LD_INT 0
84710: ST_TO_ADDR
// sTeleport := false ;
84711: LD_ADDR_EXP 129
84715: PUSH
84716: LD_INT 0
84718: ST_TO_ADDR
// sOilTower := false ;
84719: LD_ADDR_EXP 131
84723: PUSH
84724: LD_INT 0
84726: ST_TO_ADDR
// sShovel := false ;
84727: LD_ADDR_EXP 132
84731: PUSH
84732: LD_INT 0
84734: ST_TO_ADDR
// sSheik := false ;
84735: LD_ADDR_EXP 133
84739: PUSH
84740: LD_INT 0
84742: ST_TO_ADDR
// sEarthquake := false ;
84743: LD_ADDR_EXP 135
84747: PUSH
84748: LD_INT 0
84750: ST_TO_ADDR
// sAI := false ;
84751: LD_ADDR_EXP 136
84755: PUSH
84756: LD_INT 0
84758: ST_TO_ADDR
// sCargo := false ;
84759: LD_ADDR_EXP 139
84763: PUSH
84764: LD_INT 0
84766: ST_TO_ADDR
// sDLaser := false ;
84767: LD_ADDR_EXP 140
84771: PUSH
84772: LD_INT 0
84774: ST_TO_ADDR
// sExchange := false ;
84775: LD_ADDR_EXP 141
84779: PUSH
84780: LD_INT 0
84782: ST_TO_ADDR
// sFac := false ;
84783: LD_ADDR_EXP 142
84787: PUSH
84788: LD_INT 0
84790: ST_TO_ADDR
// sPower := false ;
84791: LD_ADDR_EXP 143
84795: PUSH
84796: LD_INT 0
84798: ST_TO_ADDR
// sRandom := false ;
84799: LD_ADDR_EXP 144
84803: PUSH
84804: LD_INT 0
84806: ST_TO_ADDR
// sShield := false ;
84807: LD_ADDR_EXP 145
84811: PUSH
84812: LD_INT 0
84814: ST_TO_ADDR
// sTime := false ;
84815: LD_ADDR_EXP 146
84819: PUSH
84820: LD_INT 0
84822: ST_TO_ADDR
// sTools := false ;
84823: LD_ADDR_EXP 147
84827: PUSH
84828: LD_INT 0
84830: ST_TO_ADDR
// sSold := false ;
84831: LD_ADDR_EXP 112
84835: PUSH
84836: LD_INT 0
84838: ST_TO_ADDR
// sDiff := false ;
84839: LD_ADDR_EXP 113
84843: PUSH
84844: LD_INT 0
84846: ST_TO_ADDR
// sFog := false ;
84847: LD_ADDR_EXP 116
84851: PUSH
84852: LD_INT 0
84854: ST_TO_ADDR
// sReset := false ;
84855: LD_ADDR_EXP 117
84859: PUSH
84860: LD_INT 0
84862: ST_TO_ADDR
// sSun := false ;
84863: LD_ADDR_EXP 118
84867: PUSH
84868: LD_INT 0
84870: ST_TO_ADDR
// sTiger := false ;
84871: LD_ADDR_EXP 114
84875: PUSH
84876: LD_INT 0
84878: ST_TO_ADDR
// sBomb := false ;
84879: LD_ADDR_EXP 115
84883: PUSH
84884: LD_INT 0
84886: ST_TO_ADDR
// sWound := false ;
84887: LD_ADDR_EXP 123
84891: PUSH
84892: LD_INT 0
84894: ST_TO_ADDR
// sBetray := false ;
84895: LD_ADDR_EXP 127
84899: PUSH
84900: LD_INT 0
84902: ST_TO_ADDR
// sContamin := false ;
84903: LD_ADDR_EXP 128
84907: PUSH
84908: LD_INT 0
84910: ST_TO_ADDR
// sOil := false ;
84911: LD_ADDR_EXP 130
84915: PUSH
84916: LD_INT 0
84918: ST_TO_ADDR
// sStu := false ;
84919: LD_ADDR_EXP 134
84923: PUSH
84924: LD_INT 0
84926: ST_TO_ADDR
// sBazooka := false ;
84927: LD_ADDR_EXP 137
84931: PUSH
84932: LD_INT 0
84934: ST_TO_ADDR
// sMortar := false ;
84935: LD_ADDR_EXP 138
84939: PUSH
84940: LD_INT 0
84942: ST_TO_ADDR
// sRanger := false ;
84943: LD_ADDR_EXP 148
84947: PUSH
84948: LD_INT 0
84950: ST_TO_ADDR
// end ;
84951: LD_VAR 0 1
84955: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
84956: LD_INT 0
84958: PPUSH
84959: PPUSH
84960: PPUSH
84961: PPUSH
84962: PPUSH
// result := [ ] ;
84963: LD_ADDR_VAR 0 1
84967: PUSH
84968: EMPTY
84969: ST_TO_ADDR
// if campaign_id = 1 then
84970: LD_OWVAR 69
84974: PUSH
84975: LD_INT 1
84977: EQUAL
84978: IFFALSE 87916
// begin case mission_number of 1 :
84980: LD_OWVAR 70
84984: PUSH
84985: LD_INT 1
84987: DOUBLE
84988: EQUAL
84989: IFTRUE 84993
84991: GO 85057
84993: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
84994: LD_ADDR_VAR 0 1
84998: PUSH
84999: LD_INT 2
85001: PUSH
85002: LD_INT 4
85004: PUSH
85005: LD_INT 11
85007: PUSH
85008: LD_INT 12
85010: PUSH
85011: LD_INT 15
85013: PUSH
85014: LD_INT 16
85016: PUSH
85017: LD_INT 22
85019: PUSH
85020: LD_INT 23
85022: PUSH
85023: LD_INT 26
85025: PUSH
85026: EMPTY
85027: LIST
85028: LIST
85029: LIST
85030: LIST
85031: LIST
85032: LIST
85033: LIST
85034: LIST
85035: LIST
85036: PUSH
85037: LD_INT 101
85039: PUSH
85040: LD_INT 102
85042: PUSH
85043: LD_INT 106
85045: PUSH
85046: EMPTY
85047: LIST
85048: LIST
85049: LIST
85050: PUSH
85051: EMPTY
85052: LIST
85053: LIST
85054: ST_TO_ADDR
85055: GO 87914
85057: LD_INT 2
85059: DOUBLE
85060: EQUAL
85061: IFTRUE 85065
85063: GO 85137
85065: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
85066: LD_ADDR_VAR 0 1
85070: PUSH
85071: LD_INT 2
85073: PUSH
85074: LD_INT 4
85076: PUSH
85077: LD_INT 11
85079: PUSH
85080: LD_INT 12
85082: PUSH
85083: LD_INT 15
85085: PUSH
85086: LD_INT 16
85088: PUSH
85089: LD_INT 22
85091: PUSH
85092: LD_INT 23
85094: PUSH
85095: LD_INT 26
85097: PUSH
85098: EMPTY
85099: LIST
85100: LIST
85101: LIST
85102: LIST
85103: LIST
85104: LIST
85105: LIST
85106: LIST
85107: LIST
85108: PUSH
85109: LD_INT 101
85111: PUSH
85112: LD_INT 102
85114: PUSH
85115: LD_INT 105
85117: PUSH
85118: LD_INT 106
85120: PUSH
85121: LD_INT 108
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: LIST
85128: LIST
85129: LIST
85130: PUSH
85131: EMPTY
85132: LIST
85133: LIST
85134: ST_TO_ADDR
85135: GO 87914
85137: LD_INT 3
85139: DOUBLE
85140: EQUAL
85141: IFTRUE 85145
85143: GO 85221
85145: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
85146: LD_ADDR_VAR 0 1
85150: PUSH
85151: LD_INT 2
85153: PUSH
85154: LD_INT 4
85156: PUSH
85157: LD_INT 5
85159: PUSH
85160: LD_INT 11
85162: PUSH
85163: LD_INT 12
85165: PUSH
85166: LD_INT 15
85168: PUSH
85169: LD_INT 16
85171: PUSH
85172: LD_INT 22
85174: PUSH
85175: LD_INT 26
85177: PUSH
85178: LD_INT 36
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: LIST
85185: LIST
85186: LIST
85187: LIST
85188: LIST
85189: LIST
85190: LIST
85191: LIST
85192: PUSH
85193: LD_INT 101
85195: PUSH
85196: LD_INT 102
85198: PUSH
85199: LD_INT 105
85201: PUSH
85202: LD_INT 106
85204: PUSH
85205: LD_INT 108
85207: PUSH
85208: EMPTY
85209: LIST
85210: LIST
85211: LIST
85212: LIST
85213: LIST
85214: PUSH
85215: EMPTY
85216: LIST
85217: LIST
85218: ST_TO_ADDR
85219: GO 87914
85221: LD_INT 4
85223: DOUBLE
85224: EQUAL
85225: IFTRUE 85229
85227: GO 85313
85229: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
85230: LD_ADDR_VAR 0 1
85234: PUSH
85235: LD_INT 2
85237: PUSH
85238: LD_INT 4
85240: PUSH
85241: LD_INT 5
85243: PUSH
85244: LD_INT 8
85246: PUSH
85247: LD_INT 11
85249: PUSH
85250: LD_INT 12
85252: PUSH
85253: LD_INT 15
85255: PUSH
85256: LD_INT 16
85258: PUSH
85259: LD_INT 22
85261: PUSH
85262: LD_INT 23
85264: PUSH
85265: LD_INT 26
85267: PUSH
85268: LD_INT 36
85270: PUSH
85271: EMPTY
85272: LIST
85273: LIST
85274: LIST
85275: LIST
85276: LIST
85277: LIST
85278: LIST
85279: LIST
85280: LIST
85281: LIST
85282: LIST
85283: LIST
85284: PUSH
85285: LD_INT 101
85287: PUSH
85288: LD_INT 102
85290: PUSH
85291: LD_INT 105
85293: PUSH
85294: LD_INT 106
85296: PUSH
85297: LD_INT 108
85299: PUSH
85300: EMPTY
85301: LIST
85302: LIST
85303: LIST
85304: LIST
85305: LIST
85306: PUSH
85307: EMPTY
85308: LIST
85309: LIST
85310: ST_TO_ADDR
85311: GO 87914
85313: LD_INT 5
85315: DOUBLE
85316: EQUAL
85317: IFTRUE 85321
85319: GO 85421
85321: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
85322: LD_ADDR_VAR 0 1
85326: PUSH
85327: LD_INT 2
85329: PUSH
85330: LD_INT 4
85332: PUSH
85333: LD_INT 5
85335: PUSH
85336: LD_INT 6
85338: PUSH
85339: LD_INT 8
85341: PUSH
85342: LD_INT 11
85344: PUSH
85345: LD_INT 12
85347: PUSH
85348: LD_INT 15
85350: PUSH
85351: LD_INT 16
85353: PUSH
85354: LD_INT 22
85356: PUSH
85357: LD_INT 23
85359: PUSH
85360: LD_INT 25
85362: PUSH
85363: LD_INT 26
85365: PUSH
85366: LD_INT 36
85368: PUSH
85369: EMPTY
85370: LIST
85371: LIST
85372: LIST
85373: LIST
85374: LIST
85375: LIST
85376: LIST
85377: LIST
85378: LIST
85379: LIST
85380: LIST
85381: LIST
85382: LIST
85383: LIST
85384: PUSH
85385: LD_INT 101
85387: PUSH
85388: LD_INT 102
85390: PUSH
85391: LD_INT 105
85393: PUSH
85394: LD_INT 106
85396: PUSH
85397: LD_INT 108
85399: PUSH
85400: LD_INT 109
85402: PUSH
85403: LD_INT 112
85405: PUSH
85406: EMPTY
85407: LIST
85408: LIST
85409: LIST
85410: LIST
85411: LIST
85412: LIST
85413: LIST
85414: PUSH
85415: EMPTY
85416: LIST
85417: LIST
85418: ST_TO_ADDR
85419: GO 87914
85421: LD_INT 6
85423: DOUBLE
85424: EQUAL
85425: IFTRUE 85429
85427: GO 85549
85429: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
85430: LD_ADDR_VAR 0 1
85434: PUSH
85435: LD_INT 2
85437: PUSH
85438: LD_INT 4
85440: PUSH
85441: LD_INT 5
85443: PUSH
85444: LD_INT 6
85446: PUSH
85447: LD_INT 8
85449: PUSH
85450: LD_INT 11
85452: PUSH
85453: LD_INT 12
85455: PUSH
85456: LD_INT 15
85458: PUSH
85459: LD_INT 16
85461: PUSH
85462: LD_INT 20
85464: PUSH
85465: LD_INT 21
85467: PUSH
85468: LD_INT 22
85470: PUSH
85471: LD_INT 23
85473: PUSH
85474: LD_INT 25
85476: PUSH
85477: LD_INT 26
85479: PUSH
85480: LD_INT 30
85482: PUSH
85483: LD_INT 31
85485: PUSH
85486: LD_INT 32
85488: PUSH
85489: LD_INT 36
85491: PUSH
85492: EMPTY
85493: LIST
85494: LIST
85495: LIST
85496: LIST
85497: LIST
85498: LIST
85499: LIST
85500: LIST
85501: LIST
85502: LIST
85503: LIST
85504: LIST
85505: LIST
85506: LIST
85507: LIST
85508: LIST
85509: LIST
85510: LIST
85511: LIST
85512: PUSH
85513: LD_INT 101
85515: PUSH
85516: LD_INT 102
85518: PUSH
85519: LD_INT 105
85521: PUSH
85522: LD_INT 106
85524: PUSH
85525: LD_INT 108
85527: PUSH
85528: LD_INT 109
85530: PUSH
85531: LD_INT 112
85533: PUSH
85534: EMPTY
85535: LIST
85536: LIST
85537: LIST
85538: LIST
85539: LIST
85540: LIST
85541: LIST
85542: PUSH
85543: EMPTY
85544: LIST
85545: LIST
85546: ST_TO_ADDR
85547: GO 87914
85549: LD_INT 7
85551: DOUBLE
85552: EQUAL
85553: IFTRUE 85557
85555: GO 85657
85557: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
85558: LD_ADDR_VAR 0 1
85562: PUSH
85563: LD_INT 2
85565: PUSH
85566: LD_INT 4
85568: PUSH
85569: LD_INT 5
85571: PUSH
85572: LD_INT 7
85574: PUSH
85575: LD_INT 11
85577: PUSH
85578: LD_INT 12
85580: PUSH
85581: LD_INT 15
85583: PUSH
85584: LD_INT 16
85586: PUSH
85587: LD_INT 20
85589: PUSH
85590: LD_INT 21
85592: PUSH
85593: LD_INT 22
85595: PUSH
85596: LD_INT 23
85598: PUSH
85599: LD_INT 25
85601: PUSH
85602: LD_INT 26
85604: PUSH
85605: EMPTY
85606: LIST
85607: LIST
85608: LIST
85609: LIST
85610: LIST
85611: LIST
85612: LIST
85613: LIST
85614: LIST
85615: LIST
85616: LIST
85617: LIST
85618: LIST
85619: LIST
85620: PUSH
85621: LD_INT 101
85623: PUSH
85624: LD_INT 102
85626: PUSH
85627: LD_INT 103
85629: PUSH
85630: LD_INT 105
85632: PUSH
85633: LD_INT 106
85635: PUSH
85636: LD_INT 108
85638: PUSH
85639: LD_INT 112
85641: PUSH
85642: EMPTY
85643: LIST
85644: LIST
85645: LIST
85646: LIST
85647: LIST
85648: LIST
85649: LIST
85650: PUSH
85651: EMPTY
85652: LIST
85653: LIST
85654: ST_TO_ADDR
85655: GO 87914
85657: LD_INT 8
85659: DOUBLE
85660: EQUAL
85661: IFTRUE 85665
85663: GO 85793
85665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
85666: LD_ADDR_VAR 0 1
85670: PUSH
85671: LD_INT 2
85673: PUSH
85674: LD_INT 4
85676: PUSH
85677: LD_INT 5
85679: PUSH
85680: LD_INT 6
85682: PUSH
85683: LD_INT 7
85685: PUSH
85686: LD_INT 8
85688: PUSH
85689: LD_INT 11
85691: PUSH
85692: LD_INT 12
85694: PUSH
85695: LD_INT 15
85697: PUSH
85698: LD_INT 16
85700: PUSH
85701: LD_INT 20
85703: PUSH
85704: LD_INT 21
85706: PUSH
85707: LD_INT 22
85709: PUSH
85710: LD_INT 23
85712: PUSH
85713: LD_INT 25
85715: PUSH
85716: LD_INT 26
85718: PUSH
85719: LD_INT 30
85721: PUSH
85722: LD_INT 31
85724: PUSH
85725: LD_INT 32
85727: PUSH
85728: LD_INT 36
85730: PUSH
85731: EMPTY
85732: LIST
85733: LIST
85734: LIST
85735: LIST
85736: LIST
85737: LIST
85738: LIST
85739: LIST
85740: LIST
85741: LIST
85742: LIST
85743: LIST
85744: LIST
85745: LIST
85746: LIST
85747: LIST
85748: LIST
85749: LIST
85750: LIST
85751: LIST
85752: PUSH
85753: LD_INT 101
85755: PUSH
85756: LD_INT 102
85758: PUSH
85759: LD_INT 103
85761: PUSH
85762: LD_INT 105
85764: PUSH
85765: LD_INT 106
85767: PUSH
85768: LD_INT 108
85770: PUSH
85771: LD_INT 109
85773: PUSH
85774: LD_INT 112
85776: PUSH
85777: EMPTY
85778: LIST
85779: LIST
85780: LIST
85781: LIST
85782: LIST
85783: LIST
85784: LIST
85785: LIST
85786: PUSH
85787: EMPTY
85788: LIST
85789: LIST
85790: ST_TO_ADDR
85791: GO 87914
85793: LD_INT 9
85795: DOUBLE
85796: EQUAL
85797: IFTRUE 85801
85799: GO 85937
85801: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
85802: LD_ADDR_VAR 0 1
85806: PUSH
85807: LD_INT 2
85809: PUSH
85810: LD_INT 4
85812: PUSH
85813: LD_INT 5
85815: PUSH
85816: LD_INT 6
85818: PUSH
85819: LD_INT 7
85821: PUSH
85822: LD_INT 8
85824: PUSH
85825: LD_INT 11
85827: PUSH
85828: LD_INT 12
85830: PUSH
85831: LD_INT 15
85833: PUSH
85834: LD_INT 16
85836: PUSH
85837: LD_INT 20
85839: PUSH
85840: LD_INT 21
85842: PUSH
85843: LD_INT 22
85845: PUSH
85846: LD_INT 23
85848: PUSH
85849: LD_INT 25
85851: PUSH
85852: LD_INT 26
85854: PUSH
85855: LD_INT 28
85857: PUSH
85858: LD_INT 30
85860: PUSH
85861: LD_INT 31
85863: PUSH
85864: LD_INT 32
85866: PUSH
85867: LD_INT 36
85869: PUSH
85870: EMPTY
85871: LIST
85872: LIST
85873: LIST
85874: LIST
85875: LIST
85876: LIST
85877: LIST
85878: LIST
85879: LIST
85880: LIST
85881: LIST
85882: LIST
85883: LIST
85884: LIST
85885: LIST
85886: LIST
85887: LIST
85888: LIST
85889: LIST
85890: LIST
85891: LIST
85892: PUSH
85893: LD_INT 101
85895: PUSH
85896: LD_INT 102
85898: PUSH
85899: LD_INT 103
85901: PUSH
85902: LD_INT 105
85904: PUSH
85905: LD_INT 106
85907: PUSH
85908: LD_INT 108
85910: PUSH
85911: LD_INT 109
85913: PUSH
85914: LD_INT 112
85916: PUSH
85917: LD_INT 114
85919: PUSH
85920: EMPTY
85921: LIST
85922: LIST
85923: LIST
85924: LIST
85925: LIST
85926: LIST
85927: LIST
85928: LIST
85929: LIST
85930: PUSH
85931: EMPTY
85932: LIST
85933: LIST
85934: ST_TO_ADDR
85935: GO 87914
85937: LD_INT 10
85939: DOUBLE
85940: EQUAL
85941: IFTRUE 85945
85943: GO 86129
85945: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
85946: LD_ADDR_VAR 0 1
85950: PUSH
85951: LD_INT 2
85953: PUSH
85954: LD_INT 4
85956: PUSH
85957: LD_INT 5
85959: PUSH
85960: LD_INT 6
85962: PUSH
85963: LD_INT 7
85965: PUSH
85966: LD_INT 8
85968: PUSH
85969: LD_INT 9
85971: PUSH
85972: LD_INT 10
85974: PUSH
85975: LD_INT 11
85977: PUSH
85978: LD_INT 12
85980: PUSH
85981: LD_INT 13
85983: PUSH
85984: LD_INT 14
85986: PUSH
85987: LD_INT 15
85989: PUSH
85990: LD_INT 16
85992: PUSH
85993: LD_INT 17
85995: PUSH
85996: LD_INT 18
85998: PUSH
85999: LD_INT 19
86001: PUSH
86002: LD_INT 20
86004: PUSH
86005: LD_INT 21
86007: PUSH
86008: LD_INT 22
86010: PUSH
86011: LD_INT 23
86013: PUSH
86014: LD_INT 24
86016: PUSH
86017: LD_INT 25
86019: PUSH
86020: LD_INT 26
86022: PUSH
86023: LD_INT 28
86025: PUSH
86026: LD_INT 30
86028: PUSH
86029: LD_INT 31
86031: PUSH
86032: LD_INT 32
86034: PUSH
86035: LD_INT 36
86037: PUSH
86038: EMPTY
86039: LIST
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: LIST
86045: LIST
86046: LIST
86047: LIST
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: LIST
86053: LIST
86054: LIST
86055: LIST
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: LIST
86061: LIST
86062: LIST
86063: LIST
86064: LIST
86065: LIST
86066: LIST
86067: LIST
86068: PUSH
86069: LD_INT 101
86071: PUSH
86072: LD_INT 102
86074: PUSH
86075: LD_INT 103
86077: PUSH
86078: LD_INT 104
86080: PUSH
86081: LD_INT 105
86083: PUSH
86084: LD_INT 106
86086: PUSH
86087: LD_INT 107
86089: PUSH
86090: LD_INT 108
86092: PUSH
86093: LD_INT 109
86095: PUSH
86096: LD_INT 110
86098: PUSH
86099: LD_INT 111
86101: PUSH
86102: LD_INT 112
86104: PUSH
86105: LD_INT 114
86107: PUSH
86108: EMPTY
86109: LIST
86110: LIST
86111: LIST
86112: LIST
86113: LIST
86114: LIST
86115: LIST
86116: LIST
86117: LIST
86118: LIST
86119: LIST
86120: LIST
86121: LIST
86122: PUSH
86123: EMPTY
86124: LIST
86125: LIST
86126: ST_TO_ADDR
86127: GO 87914
86129: LD_INT 11
86131: DOUBLE
86132: EQUAL
86133: IFTRUE 86137
86135: GO 86329
86137: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
86138: LD_ADDR_VAR 0 1
86142: PUSH
86143: LD_INT 2
86145: PUSH
86146: LD_INT 3
86148: PUSH
86149: LD_INT 4
86151: PUSH
86152: LD_INT 5
86154: PUSH
86155: LD_INT 6
86157: PUSH
86158: LD_INT 7
86160: PUSH
86161: LD_INT 8
86163: PUSH
86164: LD_INT 9
86166: PUSH
86167: LD_INT 10
86169: PUSH
86170: LD_INT 11
86172: PUSH
86173: LD_INT 12
86175: PUSH
86176: LD_INT 13
86178: PUSH
86179: LD_INT 14
86181: PUSH
86182: LD_INT 15
86184: PUSH
86185: LD_INT 16
86187: PUSH
86188: LD_INT 17
86190: PUSH
86191: LD_INT 18
86193: PUSH
86194: LD_INT 19
86196: PUSH
86197: LD_INT 20
86199: PUSH
86200: LD_INT 21
86202: PUSH
86203: LD_INT 22
86205: PUSH
86206: LD_INT 23
86208: PUSH
86209: LD_INT 24
86211: PUSH
86212: LD_INT 25
86214: PUSH
86215: LD_INT 26
86217: PUSH
86218: LD_INT 28
86220: PUSH
86221: LD_INT 30
86223: PUSH
86224: LD_INT 31
86226: PUSH
86227: LD_INT 32
86229: PUSH
86230: LD_INT 34
86232: PUSH
86233: LD_INT 36
86235: PUSH
86236: EMPTY
86237: LIST
86238: LIST
86239: LIST
86240: LIST
86241: LIST
86242: LIST
86243: LIST
86244: LIST
86245: LIST
86246: LIST
86247: LIST
86248: LIST
86249: LIST
86250: LIST
86251: LIST
86252: LIST
86253: LIST
86254: LIST
86255: LIST
86256: LIST
86257: LIST
86258: LIST
86259: LIST
86260: LIST
86261: LIST
86262: LIST
86263: LIST
86264: LIST
86265: LIST
86266: LIST
86267: LIST
86268: PUSH
86269: LD_INT 101
86271: PUSH
86272: LD_INT 102
86274: PUSH
86275: LD_INT 103
86277: PUSH
86278: LD_INT 104
86280: PUSH
86281: LD_INT 105
86283: PUSH
86284: LD_INT 106
86286: PUSH
86287: LD_INT 107
86289: PUSH
86290: LD_INT 108
86292: PUSH
86293: LD_INT 109
86295: PUSH
86296: LD_INT 110
86298: PUSH
86299: LD_INT 111
86301: PUSH
86302: LD_INT 112
86304: PUSH
86305: LD_INT 114
86307: PUSH
86308: EMPTY
86309: LIST
86310: LIST
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: LIST
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: LIST
86321: LIST
86322: PUSH
86323: EMPTY
86324: LIST
86325: LIST
86326: ST_TO_ADDR
86327: GO 87914
86329: LD_INT 12
86331: DOUBLE
86332: EQUAL
86333: IFTRUE 86337
86335: GO 86545
86337: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
86338: LD_ADDR_VAR 0 1
86342: PUSH
86343: LD_INT 1
86345: PUSH
86346: LD_INT 2
86348: PUSH
86349: LD_INT 3
86351: PUSH
86352: LD_INT 4
86354: PUSH
86355: LD_INT 5
86357: PUSH
86358: LD_INT 6
86360: PUSH
86361: LD_INT 7
86363: PUSH
86364: LD_INT 8
86366: PUSH
86367: LD_INT 9
86369: PUSH
86370: LD_INT 10
86372: PUSH
86373: LD_INT 11
86375: PUSH
86376: LD_INT 12
86378: PUSH
86379: LD_INT 13
86381: PUSH
86382: LD_INT 14
86384: PUSH
86385: LD_INT 15
86387: PUSH
86388: LD_INT 16
86390: PUSH
86391: LD_INT 17
86393: PUSH
86394: LD_INT 18
86396: PUSH
86397: LD_INT 19
86399: PUSH
86400: LD_INT 20
86402: PUSH
86403: LD_INT 21
86405: PUSH
86406: LD_INT 22
86408: PUSH
86409: LD_INT 23
86411: PUSH
86412: LD_INT 24
86414: PUSH
86415: LD_INT 25
86417: PUSH
86418: LD_INT 26
86420: PUSH
86421: LD_INT 27
86423: PUSH
86424: LD_INT 28
86426: PUSH
86427: LD_INT 30
86429: PUSH
86430: LD_INT 31
86432: PUSH
86433: LD_INT 32
86435: PUSH
86436: LD_INT 33
86438: PUSH
86439: LD_INT 34
86441: PUSH
86442: LD_INT 36
86444: PUSH
86445: EMPTY
86446: LIST
86447: LIST
86448: LIST
86449: LIST
86450: LIST
86451: LIST
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: LIST
86458: LIST
86459: LIST
86460: LIST
86461: LIST
86462: LIST
86463: LIST
86464: LIST
86465: LIST
86466: LIST
86467: LIST
86468: LIST
86469: LIST
86470: LIST
86471: LIST
86472: LIST
86473: LIST
86474: LIST
86475: LIST
86476: LIST
86477: LIST
86478: LIST
86479: LIST
86480: PUSH
86481: LD_INT 101
86483: PUSH
86484: LD_INT 102
86486: PUSH
86487: LD_INT 103
86489: PUSH
86490: LD_INT 104
86492: PUSH
86493: LD_INT 105
86495: PUSH
86496: LD_INT 106
86498: PUSH
86499: LD_INT 107
86501: PUSH
86502: LD_INT 108
86504: PUSH
86505: LD_INT 109
86507: PUSH
86508: LD_INT 110
86510: PUSH
86511: LD_INT 111
86513: PUSH
86514: LD_INT 112
86516: PUSH
86517: LD_INT 113
86519: PUSH
86520: LD_INT 114
86522: PUSH
86523: EMPTY
86524: LIST
86525: LIST
86526: LIST
86527: LIST
86528: LIST
86529: LIST
86530: LIST
86531: LIST
86532: LIST
86533: LIST
86534: LIST
86535: LIST
86536: LIST
86537: LIST
86538: PUSH
86539: EMPTY
86540: LIST
86541: LIST
86542: ST_TO_ADDR
86543: GO 87914
86545: LD_INT 13
86547: DOUBLE
86548: EQUAL
86549: IFTRUE 86553
86551: GO 86749
86553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
86554: LD_ADDR_VAR 0 1
86558: PUSH
86559: LD_INT 1
86561: PUSH
86562: LD_INT 2
86564: PUSH
86565: LD_INT 3
86567: PUSH
86568: LD_INT 4
86570: PUSH
86571: LD_INT 5
86573: PUSH
86574: LD_INT 8
86576: PUSH
86577: LD_INT 9
86579: PUSH
86580: LD_INT 10
86582: PUSH
86583: LD_INT 11
86585: PUSH
86586: LD_INT 12
86588: PUSH
86589: LD_INT 14
86591: PUSH
86592: LD_INT 15
86594: PUSH
86595: LD_INT 16
86597: PUSH
86598: LD_INT 17
86600: PUSH
86601: LD_INT 18
86603: PUSH
86604: LD_INT 19
86606: PUSH
86607: LD_INT 20
86609: PUSH
86610: LD_INT 21
86612: PUSH
86613: LD_INT 22
86615: PUSH
86616: LD_INT 23
86618: PUSH
86619: LD_INT 24
86621: PUSH
86622: LD_INT 25
86624: PUSH
86625: LD_INT 26
86627: PUSH
86628: LD_INT 27
86630: PUSH
86631: LD_INT 28
86633: PUSH
86634: LD_INT 30
86636: PUSH
86637: LD_INT 31
86639: PUSH
86640: LD_INT 32
86642: PUSH
86643: LD_INT 33
86645: PUSH
86646: LD_INT 34
86648: PUSH
86649: LD_INT 36
86651: PUSH
86652: EMPTY
86653: LIST
86654: LIST
86655: LIST
86656: LIST
86657: LIST
86658: LIST
86659: LIST
86660: LIST
86661: LIST
86662: LIST
86663: LIST
86664: LIST
86665: LIST
86666: LIST
86667: LIST
86668: LIST
86669: LIST
86670: LIST
86671: LIST
86672: LIST
86673: LIST
86674: LIST
86675: LIST
86676: LIST
86677: LIST
86678: LIST
86679: LIST
86680: LIST
86681: LIST
86682: LIST
86683: LIST
86684: PUSH
86685: LD_INT 101
86687: PUSH
86688: LD_INT 102
86690: PUSH
86691: LD_INT 103
86693: PUSH
86694: LD_INT 104
86696: PUSH
86697: LD_INT 105
86699: PUSH
86700: LD_INT 106
86702: PUSH
86703: LD_INT 107
86705: PUSH
86706: LD_INT 108
86708: PUSH
86709: LD_INT 109
86711: PUSH
86712: LD_INT 110
86714: PUSH
86715: LD_INT 111
86717: PUSH
86718: LD_INT 112
86720: PUSH
86721: LD_INT 113
86723: PUSH
86724: LD_INT 114
86726: PUSH
86727: EMPTY
86728: LIST
86729: LIST
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: LIST
86739: LIST
86740: LIST
86741: LIST
86742: PUSH
86743: EMPTY
86744: LIST
86745: LIST
86746: ST_TO_ADDR
86747: GO 87914
86749: LD_INT 14
86751: DOUBLE
86752: EQUAL
86753: IFTRUE 86757
86755: GO 86969
86757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
86758: LD_ADDR_VAR 0 1
86762: PUSH
86763: LD_INT 1
86765: PUSH
86766: LD_INT 2
86768: PUSH
86769: LD_INT 3
86771: PUSH
86772: LD_INT 4
86774: PUSH
86775: LD_INT 5
86777: PUSH
86778: LD_INT 6
86780: PUSH
86781: LD_INT 7
86783: PUSH
86784: LD_INT 8
86786: PUSH
86787: LD_INT 9
86789: PUSH
86790: LD_INT 10
86792: PUSH
86793: LD_INT 11
86795: PUSH
86796: LD_INT 12
86798: PUSH
86799: LD_INT 13
86801: PUSH
86802: LD_INT 14
86804: PUSH
86805: LD_INT 15
86807: PUSH
86808: LD_INT 16
86810: PUSH
86811: LD_INT 17
86813: PUSH
86814: LD_INT 18
86816: PUSH
86817: LD_INT 19
86819: PUSH
86820: LD_INT 20
86822: PUSH
86823: LD_INT 21
86825: PUSH
86826: LD_INT 22
86828: PUSH
86829: LD_INT 23
86831: PUSH
86832: LD_INT 24
86834: PUSH
86835: LD_INT 25
86837: PUSH
86838: LD_INT 26
86840: PUSH
86841: LD_INT 27
86843: PUSH
86844: LD_INT 28
86846: PUSH
86847: LD_INT 29
86849: PUSH
86850: LD_INT 30
86852: PUSH
86853: LD_INT 31
86855: PUSH
86856: LD_INT 32
86858: PUSH
86859: LD_INT 33
86861: PUSH
86862: LD_INT 34
86864: PUSH
86865: LD_INT 36
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: LIST
86872: LIST
86873: LIST
86874: LIST
86875: LIST
86876: LIST
86877: LIST
86878: LIST
86879: LIST
86880: LIST
86881: LIST
86882: LIST
86883: LIST
86884: LIST
86885: LIST
86886: LIST
86887: LIST
86888: LIST
86889: LIST
86890: LIST
86891: LIST
86892: LIST
86893: LIST
86894: LIST
86895: LIST
86896: LIST
86897: LIST
86898: LIST
86899: LIST
86900: LIST
86901: LIST
86902: LIST
86903: LIST
86904: PUSH
86905: LD_INT 101
86907: PUSH
86908: LD_INT 102
86910: PUSH
86911: LD_INT 103
86913: PUSH
86914: LD_INT 104
86916: PUSH
86917: LD_INT 105
86919: PUSH
86920: LD_INT 106
86922: PUSH
86923: LD_INT 107
86925: PUSH
86926: LD_INT 108
86928: PUSH
86929: LD_INT 109
86931: PUSH
86932: LD_INT 110
86934: PUSH
86935: LD_INT 111
86937: PUSH
86938: LD_INT 112
86940: PUSH
86941: LD_INT 113
86943: PUSH
86944: LD_INT 114
86946: PUSH
86947: EMPTY
86948: LIST
86949: LIST
86950: LIST
86951: LIST
86952: LIST
86953: LIST
86954: LIST
86955: LIST
86956: LIST
86957: LIST
86958: LIST
86959: LIST
86960: LIST
86961: LIST
86962: PUSH
86963: EMPTY
86964: LIST
86965: LIST
86966: ST_TO_ADDR
86967: GO 87914
86969: LD_INT 15
86971: DOUBLE
86972: EQUAL
86973: IFTRUE 86977
86975: GO 87189
86977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
86978: LD_ADDR_VAR 0 1
86982: PUSH
86983: LD_INT 1
86985: PUSH
86986: LD_INT 2
86988: PUSH
86989: LD_INT 3
86991: PUSH
86992: LD_INT 4
86994: PUSH
86995: LD_INT 5
86997: PUSH
86998: LD_INT 6
87000: PUSH
87001: LD_INT 7
87003: PUSH
87004: LD_INT 8
87006: PUSH
87007: LD_INT 9
87009: PUSH
87010: LD_INT 10
87012: PUSH
87013: LD_INT 11
87015: PUSH
87016: LD_INT 12
87018: PUSH
87019: LD_INT 13
87021: PUSH
87022: LD_INT 14
87024: PUSH
87025: LD_INT 15
87027: PUSH
87028: LD_INT 16
87030: PUSH
87031: LD_INT 17
87033: PUSH
87034: LD_INT 18
87036: PUSH
87037: LD_INT 19
87039: PUSH
87040: LD_INT 20
87042: PUSH
87043: LD_INT 21
87045: PUSH
87046: LD_INT 22
87048: PUSH
87049: LD_INT 23
87051: PUSH
87052: LD_INT 24
87054: PUSH
87055: LD_INT 25
87057: PUSH
87058: LD_INT 26
87060: PUSH
87061: LD_INT 27
87063: PUSH
87064: LD_INT 28
87066: PUSH
87067: LD_INT 29
87069: PUSH
87070: LD_INT 30
87072: PUSH
87073: LD_INT 31
87075: PUSH
87076: LD_INT 32
87078: PUSH
87079: LD_INT 33
87081: PUSH
87082: LD_INT 34
87084: PUSH
87085: LD_INT 36
87087: PUSH
87088: EMPTY
87089: LIST
87090: LIST
87091: LIST
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: LIST
87097: LIST
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: LIST
87103: LIST
87104: LIST
87105: LIST
87106: LIST
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: LIST
87116: LIST
87117: LIST
87118: LIST
87119: LIST
87120: LIST
87121: LIST
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 101
87127: PUSH
87128: LD_INT 102
87130: PUSH
87131: LD_INT 103
87133: PUSH
87134: LD_INT 104
87136: PUSH
87137: LD_INT 105
87139: PUSH
87140: LD_INT 106
87142: PUSH
87143: LD_INT 107
87145: PUSH
87146: LD_INT 108
87148: PUSH
87149: LD_INT 109
87151: PUSH
87152: LD_INT 110
87154: PUSH
87155: LD_INT 111
87157: PUSH
87158: LD_INT 112
87160: PUSH
87161: LD_INT 113
87163: PUSH
87164: LD_INT 114
87166: PUSH
87167: EMPTY
87168: LIST
87169: LIST
87170: LIST
87171: LIST
87172: LIST
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: LIST
87179: LIST
87180: LIST
87181: LIST
87182: PUSH
87183: EMPTY
87184: LIST
87185: LIST
87186: ST_TO_ADDR
87187: GO 87914
87189: LD_INT 16
87191: DOUBLE
87192: EQUAL
87193: IFTRUE 87197
87195: GO 87321
87197: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
87198: LD_ADDR_VAR 0 1
87202: PUSH
87203: LD_INT 2
87205: PUSH
87206: LD_INT 4
87208: PUSH
87209: LD_INT 5
87211: PUSH
87212: LD_INT 7
87214: PUSH
87215: LD_INT 11
87217: PUSH
87218: LD_INT 12
87220: PUSH
87221: LD_INT 15
87223: PUSH
87224: LD_INT 16
87226: PUSH
87227: LD_INT 20
87229: PUSH
87230: LD_INT 21
87232: PUSH
87233: LD_INT 22
87235: PUSH
87236: LD_INT 23
87238: PUSH
87239: LD_INT 25
87241: PUSH
87242: LD_INT 26
87244: PUSH
87245: LD_INT 30
87247: PUSH
87248: LD_INT 31
87250: PUSH
87251: LD_INT 32
87253: PUSH
87254: LD_INT 33
87256: PUSH
87257: LD_INT 34
87259: PUSH
87260: EMPTY
87261: LIST
87262: LIST
87263: LIST
87264: LIST
87265: LIST
87266: LIST
87267: LIST
87268: LIST
87269: LIST
87270: LIST
87271: LIST
87272: LIST
87273: LIST
87274: LIST
87275: LIST
87276: LIST
87277: LIST
87278: LIST
87279: LIST
87280: PUSH
87281: LD_INT 101
87283: PUSH
87284: LD_INT 102
87286: PUSH
87287: LD_INT 103
87289: PUSH
87290: LD_INT 106
87292: PUSH
87293: LD_INT 108
87295: PUSH
87296: LD_INT 112
87298: PUSH
87299: LD_INT 113
87301: PUSH
87302: LD_INT 114
87304: PUSH
87305: EMPTY
87306: LIST
87307: LIST
87308: LIST
87309: LIST
87310: LIST
87311: LIST
87312: LIST
87313: LIST
87314: PUSH
87315: EMPTY
87316: LIST
87317: LIST
87318: ST_TO_ADDR
87319: GO 87914
87321: LD_INT 17
87323: DOUBLE
87324: EQUAL
87325: IFTRUE 87329
87327: GO 87541
87329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
87330: LD_ADDR_VAR 0 1
87334: PUSH
87335: LD_INT 1
87337: PUSH
87338: LD_INT 2
87340: PUSH
87341: LD_INT 3
87343: PUSH
87344: LD_INT 4
87346: PUSH
87347: LD_INT 5
87349: PUSH
87350: LD_INT 6
87352: PUSH
87353: LD_INT 7
87355: PUSH
87356: LD_INT 8
87358: PUSH
87359: LD_INT 9
87361: PUSH
87362: LD_INT 10
87364: PUSH
87365: LD_INT 11
87367: PUSH
87368: LD_INT 12
87370: PUSH
87371: LD_INT 13
87373: PUSH
87374: LD_INT 14
87376: PUSH
87377: LD_INT 15
87379: PUSH
87380: LD_INT 16
87382: PUSH
87383: LD_INT 17
87385: PUSH
87386: LD_INT 18
87388: PUSH
87389: LD_INT 19
87391: PUSH
87392: LD_INT 20
87394: PUSH
87395: LD_INT 21
87397: PUSH
87398: LD_INT 22
87400: PUSH
87401: LD_INT 23
87403: PUSH
87404: LD_INT 24
87406: PUSH
87407: LD_INT 25
87409: PUSH
87410: LD_INT 26
87412: PUSH
87413: LD_INT 27
87415: PUSH
87416: LD_INT 28
87418: PUSH
87419: LD_INT 29
87421: PUSH
87422: LD_INT 30
87424: PUSH
87425: LD_INT 31
87427: PUSH
87428: LD_INT 32
87430: PUSH
87431: LD_INT 33
87433: PUSH
87434: LD_INT 34
87436: PUSH
87437: LD_INT 36
87439: PUSH
87440: EMPTY
87441: LIST
87442: LIST
87443: LIST
87444: LIST
87445: LIST
87446: LIST
87447: LIST
87448: LIST
87449: LIST
87450: LIST
87451: LIST
87452: LIST
87453: LIST
87454: LIST
87455: LIST
87456: LIST
87457: LIST
87458: LIST
87459: LIST
87460: LIST
87461: LIST
87462: LIST
87463: LIST
87464: LIST
87465: LIST
87466: LIST
87467: LIST
87468: LIST
87469: LIST
87470: LIST
87471: LIST
87472: LIST
87473: LIST
87474: LIST
87475: LIST
87476: PUSH
87477: LD_INT 101
87479: PUSH
87480: LD_INT 102
87482: PUSH
87483: LD_INT 103
87485: PUSH
87486: LD_INT 104
87488: PUSH
87489: LD_INT 105
87491: PUSH
87492: LD_INT 106
87494: PUSH
87495: LD_INT 107
87497: PUSH
87498: LD_INT 108
87500: PUSH
87501: LD_INT 109
87503: PUSH
87504: LD_INT 110
87506: PUSH
87507: LD_INT 111
87509: PUSH
87510: LD_INT 112
87512: PUSH
87513: LD_INT 113
87515: PUSH
87516: LD_INT 114
87518: PUSH
87519: EMPTY
87520: LIST
87521: LIST
87522: LIST
87523: LIST
87524: LIST
87525: LIST
87526: LIST
87527: LIST
87528: LIST
87529: LIST
87530: LIST
87531: LIST
87532: LIST
87533: LIST
87534: PUSH
87535: EMPTY
87536: LIST
87537: LIST
87538: ST_TO_ADDR
87539: GO 87914
87541: LD_INT 18
87543: DOUBLE
87544: EQUAL
87545: IFTRUE 87549
87547: GO 87685
87549: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
87550: LD_ADDR_VAR 0 1
87554: PUSH
87555: LD_INT 2
87557: PUSH
87558: LD_INT 4
87560: PUSH
87561: LD_INT 5
87563: PUSH
87564: LD_INT 7
87566: PUSH
87567: LD_INT 11
87569: PUSH
87570: LD_INT 12
87572: PUSH
87573: LD_INT 15
87575: PUSH
87576: LD_INT 16
87578: PUSH
87579: LD_INT 20
87581: PUSH
87582: LD_INT 21
87584: PUSH
87585: LD_INT 22
87587: PUSH
87588: LD_INT 23
87590: PUSH
87591: LD_INT 25
87593: PUSH
87594: LD_INT 26
87596: PUSH
87597: LD_INT 30
87599: PUSH
87600: LD_INT 31
87602: PUSH
87603: LD_INT 32
87605: PUSH
87606: LD_INT 33
87608: PUSH
87609: LD_INT 34
87611: PUSH
87612: LD_INT 35
87614: PUSH
87615: LD_INT 36
87617: PUSH
87618: EMPTY
87619: LIST
87620: LIST
87621: LIST
87622: LIST
87623: LIST
87624: LIST
87625: LIST
87626: LIST
87627: LIST
87628: LIST
87629: LIST
87630: LIST
87631: LIST
87632: LIST
87633: LIST
87634: LIST
87635: LIST
87636: LIST
87637: LIST
87638: LIST
87639: LIST
87640: PUSH
87641: LD_INT 101
87643: PUSH
87644: LD_INT 102
87646: PUSH
87647: LD_INT 103
87649: PUSH
87650: LD_INT 106
87652: PUSH
87653: LD_INT 108
87655: PUSH
87656: LD_INT 112
87658: PUSH
87659: LD_INT 113
87661: PUSH
87662: LD_INT 114
87664: PUSH
87665: LD_INT 115
87667: PUSH
87668: EMPTY
87669: LIST
87670: LIST
87671: LIST
87672: LIST
87673: LIST
87674: LIST
87675: LIST
87676: LIST
87677: LIST
87678: PUSH
87679: EMPTY
87680: LIST
87681: LIST
87682: ST_TO_ADDR
87683: GO 87914
87685: LD_INT 19
87687: DOUBLE
87688: EQUAL
87689: IFTRUE 87693
87691: GO 87913
87693: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
87694: LD_ADDR_VAR 0 1
87698: PUSH
87699: LD_INT 1
87701: PUSH
87702: LD_INT 2
87704: PUSH
87705: LD_INT 3
87707: PUSH
87708: LD_INT 4
87710: PUSH
87711: LD_INT 5
87713: PUSH
87714: LD_INT 6
87716: PUSH
87717: LD_INT 7
87719: PUSH
87720: LD_INT 8
87722: PUSH
87723: LD_INT 9
87725: PUSH
87726: LD_INT 10
87728: PUSH
87729: LD_INT 11
87731: PUSH
87732: LD_INT 12
87734: PUSH
87735: LD_INT 13
87737: PUSH
87738: LD_INT 14
87740: PUSH
87741: LD_INT 15
87743: PUSH
87744: LD_INT 16
87746: PUSH
87747: LD_INT 17
87749: PUSH
87750: LD_INT 18
87752: PUSH
87753: LD_INT 19
87755: PUSH
87756: LD_INT 20
87758: PUSH
87759: LD_INT 21
87761: PUSH
87762: LD_INT 22
87764: PUSH
87765: LD_INT 23
87767: PUSH
87768: LD_INT 24
87770: PUSH
87771: LD_INT 25
87773: PUSH
87774: LD_INT 26
87776: PUSH
87777: LD_INT 27
87779: PUSH
87780: LD_INT 28
87782: PUSH
87783: LD_INT 29
87785: PUSH
87786: LD_INT 30
87788: PUSH
87789: LD_INT 31
87791: PUSH
87792: LD_INT 32
87794: PUSH
87795: LD_INT 33
87797: PUSH
87798: LD_INT 34
87800: PUSH
87801: LD_INT 35
87803: PUSH
87804: LD_INT 36
87806: PUSH
87807: EMPTY
87808: LIST
87809: LIST
87810: LIST
87811: LIST
87812: LIST
87813: LIST
87814: LIST
87815: LIST
87816: LIST
87817: LIST
87818: LIST
87819: LIST
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: LIST
87826: LIST
87827: LIST
87828: LIST
87829: LIST
87830: LIST
87831: LIST
87832: LIST
87833: LIST
87834: LIST
87835: LIST
87836: LIST
87837: LIST
87838: LIST
87839: LIST
87840: LIST
87841: LIST
87842: LIST
87843: LIST
87844: PUSH
87845: LD_INT 101
87847: PUSH
87848: LD_INT 102
87850: PUSH
87851: LD_INT 103
87853: PUSH
87854: LD_INT 104
87856: PUSH
87857: LD_INT 105
87859: PUSH
87860: LD_INT 106
87862: PUSH
87863: LD_INT 107
87865: PUSH
87866: LD_INT 108
87868: PUSH
87869: LD_INT 109
87871: PUSH
87872: LD_INT 110
87874: PUSH
87875: LD_INT 111
87877: PUSH
87878: LD_INT 112
87880: PUSH
87881: LD_INT 113
87883: PUSH
87884: LD_INT 114
87886: PUSH
87887: LD_INT 115
87889: PUSH
87890: EMPTY
87891: LIST
87892: LIST
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: LIST
87898: LIST
87899: LIST
87900: LIST
87901: LIST
87902: LIST
87903: LIST
87904: LIST
87905: LIST
87906: PUSH
87907: EMPTY
87908: LIST
87909: LIST
87910: ST_TO_ADDR
87911: GO 87914
87913: POP
// end else
87914: GO 87951
// if campaign_id = 5 then
87916: LD_OWVAR 69
87920: PUSH
87921: LD_INT 5
87923: EQUAL
87924: IFFALSE 87951
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
87926: LD_ADDR_VAR 0 1
87930: PUSH
87931: LD_INT 1
87933: PUSH
87934: LD_INT 2
87936: PUSH
87937: EMPTY
87938: LIST
87939: LIST
87940: PUSH
87941: LD_INT 100
87943: PUSH
87944: EMPTY
87945: LIST
87946: PUSH
87947: EMPTY
87948: LIST
87949: LIST
87950: ST_TO_ADDR
// end ; if result then
87951: LD_VAR 0 1
87955: IFFALSE 88244
// begin normal :=  ;
87957: LD_ADDR_VAR 0 3
87961: PUSH
87962: LD_STRING 
87964: ST_TO_ADDR
// hardcore :=  ;
87965: LD_ADDR_VAR 0 4
87969: PUSH
87970: LD_STRING 
87972: ST_TO_ADDR
// for i = 1 to normalCounter do
87973: LD_ADDR_VAR 0 5
87977: PUSH
87978: DOUBLE
87979: LD_INT 1
87981: DEC
87982: ST_TO_ADDR
87983: LD_EXP 96
87987: PUSH
87988: FOR_TO
87989: IFFALSE 88090
// begin tmp := 0 ;
87991: LD_ADDR_VAR 0 2
87995: PUSH
87996: LD_STRING 0
87998: ST_TO_ADDR
// if result [ 1 ] then
87999: LD_VAR 0 1
88003: PUSH
88004: LD_INT 1
88006: ARRAY
88007: IFFALSE 88072
// if result [ 1 ] [ 1 ] = i then
88009: LD_VAR 0 1
88013: PUSH
88014: LD_INT 1
88016: ARRAY
88017: PUSH
88018: LD_INT 1
88020: ARRAY
88021: PUSH
88022: LD_VAR 0 5
88026: EQUAL
88027: IFFALSE 88072
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
88029: LD_ADDR_VAR 0 1
88033: PUSH
88034: LD_VAR 0 1
88038: PPUSH
88039: LD_INT 1
88041: PPUSH
88042: LD_VAR 0 1
88046: PUSH
88047: LD_INT 1
88049: ARRAY
88050: PPUSH
88051: LD_INT 1
88053: PPUSH
88054: CALL_OW 3
88058: PPUSH
88059: CALL_OW 1
88063: ST_TO_ADDR
// tmp := 1 ;
88064: LD_ADDR_VAR 0 2
88068: PUSH
88069: LD_STRING 1
88071: ST_TO_ADDR
// end ; normal := normal & tmp ;
88072: LD_ADDR_VAR 0 3
88076: PUSH
88077: LD_VAR 0 3
88081: PUSH
88082: LD_VAR 0 2
88086: STR
88087: ST_TO_ADDR
// end ;
88088: GO 87988
88090: POP
88091: POP
// for i = 1 to hardcoreCounter do
88092: LD_ADDR_VAR 0 5
88096: PUSH
88097: DOUBLE
88098: LD_INT 1
88100: DEC
88101: ST_TO_ADDR
88102: LD_EXP 97
88106: PUSH
88107: FOR_TO
88108: IFFALSE 88213
// begin tmp := 0 ;
88110: LD_ADDR_VAR 0 2
88114: PUSH
88115: LD_STRING 0
88117: ST_TO_ADDR
// if result [ 2 ] then
88118: LD_VAR 0 1
88122: PUSH
88123: LD_INT 2
88125: ARRAY
88126: IFFALSE 88195
// if result [ 2 ] [ 1 ] = 100 + i then
88128: LD_VAR 0 1
88132: PUSH
88133: LD_INT 2
88135: ARRAY
88136: PUSH
88137: LD_INT 1
88139: ARRAY
88140: PUSH
88141: LD_INT 100
88143: PUSH
88144: LD_VAR 0 5
88148: PLUS
88149: EQUAL
88150: IFFALSE 88195
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
88152: LD_ADDR_VAR 0 1
88156: PUSH
88157: LD_VAR 0 1
88161: PPUSH
88162: LD_INT 2
88164: PPUSH
88165: LD_VAR 0 1
88169: PUSH
88170: LD_INT 2
88172: ARRAY
88173: PPUSH
88174: LD_INT 1
88176: PPUSH
88177: CALL_OW 3
88181: PPUSH
88182: CALL_OW 1
88186: ST_TO_ADDR
// tmp := 1 ;
88187: LD_ADDR_VAR 0 2
88191: PUSH
88192: LD_STRING 1
88194: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
88195: LD_ADDR_VAR 0 4
88199: PUSH
88200: LD_VAR 0 4
88204: PUSH
88205: LD_VAR 0 2
88209: STR
88210: ST_TO_ADDR
// end ;
88211: GO 88107
88213: POP
88214: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
88215: LD_STRING getStreamItemsFromMission("
88217: PUSH
88218: LD_VAR 0 3
88222: STR
88223: PUSH
88224: LD_STRING ","
88226: STR
88227: PUSH
88228: LD_VAR 0 4
88232: STR
88233: PUSH
88234: LD_STRING ")
88236: STR
88237: PPUSH
88238: CALL_OW 559
// end else
88242: GO 88251
// ToLua ( getStreamItemsFromMission("","") ) ;
88244: LD_STRING getStreamItemsFromMission("","")
88246: PPUSH
88247: CALL_OW 559
// end ;
88251: LD_VAR 0 1
88255: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
88256: LD_VAR 0 2
88260: PUSH
88261: LD_INT 100
88263: EQUAL
88264: IFFALSE 89213
// begin if not StreamModeActive then
88266: LD_EXP 95
88270: NOT
88271: IFFALSE 88281
// StreamModeActive := true ;
88273: LD_ADDR_EXP 95
88277: PUSH
88278: LD_INT 1
88280: ST_TO_ADDR
// if p3 = 0 then
88281: LD_VAR 0 3
88285: PUSH
88286: LD_INT 0
88288: EQUAL
88289: IFFALSE 88295
// InitStreamMode ;
88291: CALL 84516 0 0
// if p3 = 1 then
88295: LD_VAR 0 3
88299: PUSH
88300: LD_INT 1
88302: EQUAL
88303: IFFALSE 88313
// sRocket := true ;
88305: LD_ADDR_EXP 100
88309: PUSH
88310: LD_INT 1
88312: ST_TO_ADDR
// if p3 = 2 then
88313: LD_VAR 0 3
88317: PUSH
88318: LD_INT 2
88320: EQUAL
88321: IFFALSE 88331
// sSpeed := true ;
88323: LD_ADDR_EXP 99
88327: PUSH
88328: LD_INT 1
88330: ST_TO_ADDR
// if p3 = 3 then
88331: LD_VAR 0 3
88335: PUSH
88336: LD_INT 3
88338: EQUAL
88339: IFFALSE 88349
// sEngine := true ;
88341: LD_ADDR_EXP 101
88345: PUSH
88346: LD_INT 1
88348: ST_TO_ADDR
// if p3 = 4 then
88349: LD_VAR 0 3
88353: PUSH
88354: LD_INT 4
88356: EQUAL
88357: IFFALSE 88367
// sSpec := true ;
88359: LD_ADDR_EXP 98
88363: PUSH
88364: LD_INT 1
88366: ST_TO_ADDR
// if p3 = 5 then
88367: LD_VAR 0 3
88371: PUSH
88372: LD_INT 5
88374: EQUAL
88375: IFFALSE 88385
// sLevel := true ;
88377: LD_ADDR_EXP 102
88381: PUSH
88382: LD_INT 1
88384: ST_TO_ADDR
// if p3 = 6 then
88385: LD_VAR 0 3
88389: PUSH
88390: LD_INT 6
88392: EQUAL
88393: IFFALSE 88403
// sArmoury := true ;
88395: LD_ADDR_EXP 103
88399: PUSH
88400: LD_INT 1
88402: ST_TO_ADDR
// if p3 = 7 then
88403: LD_VAR 0 3
88407: PUSH
88408: LD_INT 7
88410: EQUAL
88411: IFFALSE 88421
// sRadar := true ;
88413: LD_ADDR_EXP 104
88417: PUSH
88418: LD_INT 1
88420: ST_TO_ADDR
// if p3 = 8 then
88421: LD_VAR 0 3
88425: PUSH
88426: LD_INT 8
88428: EQUAL
88429: IFFALSE 88439
// sBunker := true ;
88431: LD_ADDR_EXP 105
88435: PUSH
88436: LD_INT 1
88438: ST_TO_ADDR
// if p3 = 9 then
88439: LD_VAR 0 3
88443: PUSH
88444: LD_INT 9
88446: EQUAL
88447: IFFALSE 88457
// sHack := true ;
88449: LD_ADDR_EXP 106
88453: PUSH
88454: LD_INT 1
88456: ST_TO_ADDR
// if p3 = 10 then
88457: LD_VAR 0 3
88461: PUSH
88462: LD_INT 10
88464: EQUAL
88465: IFFALSE 88475
// sFire := true ;
88467: LD_ADDR_EXP 107
88471: PUSH
88472: LD_INT 1
88474: ST_TO_ADDR
// if p3 = 11 then
88475: LD_VAR 0 3
88479: PUSH
88480: LD_INT 11
88482: EQUAL
88483: IFFALSE 88493
// sRefresh := true ;
88485: LD_ADDR_EXP 108
88489: PUSH
88490: LD_INT 1
88492: ST_TO_ADDR
// if p3 = 12 then
88493: LD_VAR 0 3
88497: PUSH
88498: LD_INT 12
88500: EQUAL
88501: IFFALSE 88511
// sExp := true ;
88503: LD_ADDR_EXP 109
88507: PUSH
88508: LD_INT 1
88510: ST_TO_ADDR
// if p3 = 13 then
88511: LD_VAR 0 3
88515: PUSH
88516: LD_INT 13
88518: EQUAL
88519: IFFALSE 88529
// sDepot := true ;
88521: LD_ADDR_EXP 110
88525: PUSH
88526: LD_INT 1
88528: ST_TO_ADDR
// if p3 = 14 then
88529: LD_VAR 0 3
88533: PUSH
88534: LD_INT 14
88536: EQUAL
88537: IFFALSE 88547
// sFlag := true ;
88539: LD_ADDR_EXP 111
88543: PUSH
88544: LD_INT 1
88546: ST_TO_ADDR
// if p3 = 15 then
88547: LD_VAR 0 3
88551: PUSH
88552: LD_INT 15
88554: EQUAL
88555: IFFALSE 88565
// sKamikadze := true ;
88557: LD_ADDR_EXP 119
88561: PUSH
88562: LD_INT 1
88564: ST_TO_ADDR
// if p3 = 16 then
88565: LD_VAR 0 3
88569: PUSH
88570: LD_INT 16
88572: EQUAL
88573: IFFALSE 88583
// sTroll := true ;
88575: LD_ADDR_EXP 120
88579: PUSH
88580: LD_INT 1
88582: ST_TO_ADDR
// if p3 = 17 then
88583: LD_VAR 0 3
88587: PUSH
88588: LD_INT 17
88590: EQUAL
88591: IFFALSE 88601
// sSlow := true ;
88593: LD_ADDR_EXP 121
88597: PUSH
88598: LD_INT 1
88600: ST_TO_ADDR
// if p3 = 18 then
88601: LD_VAR 0 3
88605: PUSH
88606: LD_INT 18
88608: EQUAL
88609: IFFALSE 88619
// sLack := true ;
88611: LD_ADDR_EXP 122
88615: PUSH
88616: LD_INT 1
88618: ST_TO_ADDR
// if p3 = 19 then
88619: LD_VAR 0 3
88623: PUSH
88624: LD_INT 19
88626: EQUAL
88627: IFFALSE 88637
// sTank := true ;
88629: LD_ADDR_EXP 124
88633: PUSH
88634: LD_INT 1
88636: ST_TO_ADDR
// if p3 = 20 then
88637: LD_VAR 0 3
88641: PUSH
88642: LD_INT 20
88644: EQUAL
88645: IFFALSE 88655
// sRemote := true ;
88647: LD_ADDR_EXP 125
88651: PUSH
88652: LD_INT 1
88654: ST_TO_ADDR
// if p3 = 21 then
88655: LD_VAR 0 3
88659: PUSH
88660: LD_INT 21
88662: EQUAL
88663: IFFALSE 88673
// sPowell := true ;
88665: LD_ADDR_EXP 126
88669: PUSH
88670: LD_INT 1
88672: ST_TO_ADDR
// if p3 = 22 then
88673: LD_VAR 0 3
88677: PUSH
88678: LD_INT 22
88680: EQUAL
88681: IFFALSE 88691
// sTeleport := true ;
88683: LD_ADDR_EXP 129
88687: PUSH
88688: LD_INT 1
88690: ST_TO_ADDR
// if p3 = 23 then
88691: LD_VAR 0 3
88695: PUSH
88696: LD_INT 23
88698: EQUAL
88699: IFFALSE 88709
// sOilTower := true ;
88701: LD_ADDR_EXP 131
88705: PUSH
88706: LD_INT 1
88708: ST_TO_ADDR
// if p3 = 24 then
88709: LD_VAR 0 3
88713: PUSH
88714: LD_INT 24
88716: EQUAL
88717: IFFALSE 88727
// sShovel := true ;
88719: LD_ADDR_EXP 132
88723: PUSH
88724: LD_INT 1
88726: ST_TO_ADDR
// if p3 = 25 then
88727: LD_VAR 0 3
88731: PUSH
88732: LD_INT 25
88734: EQUAL
88735: IFFALSE 88745
// sSheik := true ;
88737: LD_ADDR_EXP 133
88741: PUSH
88742: LD_INT 1
88744: ST_TO_ADDR
// if p3 = 26 then
88745: LD_VAR 0 3
88749: PUSH
88750: LD_INT 26
88752: EQUAL
88753: IFFALSE 88763
// sEarthquake := true ;
88755: LD_ADDR_EXP 135
88759: PUSH
88760: LD_INT 1
88762: ST_TO_ADDR
// if p3 = 27 then
88763: LD_VAR 0 3
88767: PUSH
88768: LD_INT 27
88770: EQUAL
88771: IFFALSE 88781
// sAI := true ;
88773: LD_ADDR_EXP 136
88777: PUSH
88778: LD_INT 1
88780: ST_TO_ADDR
// if p3 = 28 then
88781: LD_VAR 0 3
88785: PUSH
88786: LD_INT 28
88788: EQUAL
88789: IFFALSE 88799
// sCargo := true ;
88791: LD_ADDR_EXP 139
88795: PUSH
88796: LD_INT 1
88798: ST_TO_ADDR
// if p3 = 29 then
88799: LD_VAR 0 3
88803: PUSH
88804: LD_INT 29
88806: EQUAL
88807: IFFALSE 88817
// sDLaser := true ;
88809: LD_ADDR_EXP 140
88813: PUSH
88814: LD_INT 1
88816: ST_TO_ADDR
// if p3 = 30 then
88817: LD_VAR 0 3
88821: PUSH
88822: LD_INT 30
88824: EQUAL
88825: IFFALSE 88835
// sExchange := true ;
88827: LD_ADDR_EXP 141
88831: PUSH
88832: LD_INT 1
88834: ST_TO_ADDR
// if p3 = 31 then
88835: LD_VAR 0 3
88839: PUSH
88840: LD_INT 31
88842: EQUAL
88843: IFFALSE 88853
// sFac := true ;
88845: LD_ADDR_EXP 142
88849: PUSH
88850: LD_INT 1
88852: ST_TO_ADDR
// if p3 = 32 then
88853: LD_VAR 0 3
88857: PUSH
88858: LD_INT 32
88860: EQUAL
88861: IFFALSE 88871
// sPower := true ;
88863: LD_ADDR_EXP 143
88867: PUSH
88868: LD_INT 1
88870: ST_TO_ADDR
// if p3 = 33 then
88871: LD_VAR 0 3
88875: PUSH
88876: LD_INT 33
88878: EQUAL
88879: IFFALSE 88889
// sRandom := true ;
88881: LD_ADDR_EXP 144
88885: PUSH
88886: LD_INT 1
88888: ST_TO_ADDR
// if p3 = 34 then
88889: LD_VAR 0 3
88893: PUSH
88894: LD_INT 34
88896: EQUAL
88897: IFFALSE 88907
// sShield := true ;
88899: LD_ADDR_EXP 145
88903: PUSH
88904: LD_INT 1
88906: ST_TO_ADDR
// if p3 = 35 then
88907: LD_VAR 0 3
88911: PUSH
88912: LD_INT 35
88914: EQUAL
88915: IFFALSE 88925
// sTime := true ;
88917: LD_ADDR_EXP 146
88921: PUSH
88922: LD_INT 1
88924: ST_TO_ADDR
// if p3 = 36 then
88925: LD_VAR 0 3
88929: PUSH
88930: LD_INT 36
88932: EQUAL
88933: IFFALSE 88943
// sTools := true ;
88935: LD_ADDR_EXP 147
88939: PUSH
88940: LD_INT 1
88942: ST_TO_ADDR
// if p3 = 101 then
88943: LD_VAR 0 3
88947: PUSH
88948: LD_INT 101
88950: EQUAL
88951: IFFALSE 88961
// sSold := true ;
88953: LD_ADDR_EXP 112
88957: PUSH
88958: LD_INT 1
88960: ST_TO_ADDR
// if p3 = 102 then
88961: LD_VAR 0 3
88965: PUSH
88966: LD_INT 102
88968: EQUAL
88969: IFFALSE 88979
// sDiff := true ;
88971: LD_ADDR_EXP 113
88975: PUSH
88976: LD_INT 1
88978: ST_TO_ADDR
// if p3 = 103 then
88979: LD_VAR 0 3
88983: PUSH
88984: LD_INT 103
88986: EQUAL
88987: IFFALSE 88997
// sFog := true ;
88989: LD_ADDR_EXP 116
88993: PUSH
88994: LD_INT 1
88996: ST_TO_ADDR
// if p3 = 104 then
88997: LD_VAR 0 3
89001: PUSH
89002: LD_INT 104
89004: EQUAL
89005: IFFALSE 89015
// sReset := true ;
89007: LD_ADDR_EXP 117
89011: PUSH
89012: LD_INT 1
89014: ST_TO_ADDR
// if p3 = 105 then
89015: LD_VAR 0 3
89019: PUSH
89020: LD_INT 105
89022: EQUAL
89023: IFFALSE 89033
// sSun := true ;
89025: LD_ADDR_EXP 118
89029: PUSH
89030: LD_INT 1
89032: ST_TO_ADDR
// if p3 = 106 then
89033: LD_VAR 0 3
89037: PUSH
89038: LD_INT 106
89040: EQUAL
89041: IFFALSE 89051
// sTiger := true ;
89043: LD_ADDR_EXP 114
89047: PUSH
89048: LD_INT 1
89050: ST_TO_ADDR
// if p3 = 107 then
89051: LD_VAR 0 3
89055: PUSH
89056: LD_INT 107
89058: EQUAL
89059: IFFALSE 89069
// sBomb := true ;
89061: LD_ADDR_EXP 115
89065: PUSH
89066: LD_INT 1
89068: ST_TO_ADDR
// if p3 = 108 then
89069: LD_VAR 0 3
89073: PUSH
89074: LD_INT 108
89076: EQUAL
89077: IFFALSE 89087
// sWound := true ;
89079: LD_ADDR_EXP 123
89083: PUSH
89084: LD_INT 1
89086: ST_TO_ADDR
// if p3 = 109 then
89087: LD_VAR 0 3
89091: PUSH
89092: LD_INT 109
89094: EQUAL
89095: IFFALSE 89105
// sBetray := true ;
89097: LD_ADDR_EXP 127
89101: PUSH
89102: LD_INT 1
89104: ST_TO_ADDR
// if p3 = 110 then
89105: LD_VAR 0 3
89109: PUSH
89110: LD_INT 110
89112: EQUAL
89113: IFFALSE 89123
// sContamin := true ;
89115: LD_ADDR_EXP 128
89119: PUSH
89120: LD_INT 1
89122: ST_TO_ADDR
// if p3 = 111 then
89123: LD_VAR 0 3
89127: PUSH
89128: LD_INT 111
89130: EQUAL
89131: IFFALSE 89141
// sOil := true ;
89133: LD_ADDR_EXP 130
89137: PUSH
89138: LD_INT 1
89140: ST_TO_ADDR
// if p3 = 112 then
89141: LD_VAR 0 3
89145: PUSH
89146: LD_INT 112
89148: EQUAL
89149: IFFALSE 89159
// sStu := true ;
89151: LD_ADDR_EXP 134
89155: PUSH
89156: LD_INT 1
89158: ST_TO_ADDR
// if p3 = 113 then
89159: LD_VAR 0 3
89163: PUSH
89164: LD_INT 113
89166: EQUAL
89167: IFFALSE 89177
// sBazooka := true ;
89169: LD_ADDR_EXP 137
89173: PUSH
89174: LD_INT 1
89176: ST_TO_ADDR
// if p3 = 114 then
89177: LD_VAR 0 3
89181: PUSH
89182: LD_INT 114
89184: EQUAL
89185: IFFALSE 89195
// sMortar := true ;
89187: LD_ADDR_EXP 138
89191: PUSH
89192: LD_INT 1
89194: ST_TO_ADDR
// if p3 = 115 then
89195: LD_VAR 0 3
89199: PUSH
89200: LD_INT 115
89202: EQUAL
89203: IFFALSE 89213
// sRanger := true ;
89205: LD_ADDR_EXP 148
89209: PUSH
89210: LD_INT 1
89212: ST_TO_ADDR
// end ; end ;
89213: PPOPN 6
89215: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
89216: LD_EXP 95
89220: PUSH
89221: LD_EXP 100
89225: AND
89226: IFFALSE 89350
89228: GO 89230
89230: DISABLE
89231: LD_INT 0
89233: PPUSH
89234: PPUSH
// begin enable ;
89235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
89236: LD_ADDR_VAR 0 2
89240: PUSH
89241: LD_INT 22
89243: PUSH
89244: LD_OWVAR 2
89248: PUSH
89249: EMPTY
89250: LIST
89251: LIST
89252: PUSH
89253: LD_INT 2
89255: PUSH
89256: LD_INT 34
89258: PUSH
89259: LD_INT 7
89261: PUSH
89262: EMPTY
89263: LIST
89264: LIST
89265: PUSH
89266: LD_INT 34
89268: PUSH
89269: LD_INT 45
89271: PUSH
89272: EMPTY
89273: LIST
89274: LIST
89275: PUSH
89276: LD_INT 34
89278: PUSH
89279: LD_INT 28
89281: PUSH
89282: EMPTY
89283: LIST
89284: LIST
89285: PUSH
89286: LD_INT 34
89288: PUSH
89289: LD_INT 47
89291: PUSH
89292: EMPTY
89293: LIST
89294: LIST
89295: PUSH
89296: EMPTY
89297: LIST
89298: LIST
89299: LIST
89300: LIST
89301: LIST
89302: PUSH
89303: EMPTY
89304: LIST
89305: LIST
89306: PPUSH
89307: CALL_OW 69
89311: ST_TO_ADDR
// if not tmp then
89312: LD_VAR 0 2
89316: NOT
89317: IFFALSE 89321
// exit ;
89319: GO 89350
// for i in tmp do
89321: LD_ADDR_VAR 0 1
89325: PUSH
89326: LD_VAR 0 2
89330: PUSH
89331: FOR_IN
89332: IFFALSE 89348
// begin SetLives ( i , 0 ) ;
89334: LD_VAR 0 1
89338: PPUSH
89339: LD_INT 0
89341: PPUSH
89342: CALL_OW 234
// end ;
89346: GO 89331
89348: POP
89349: POP
// end ;
89350: PPOPN 2
89352: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
89353: LD_EXP 95
89357: PUSH
89358: LD_EXP 101
89362: AND
89363: IFFALSE 89447
89365: GO 89367
89367: DISABLE
89368: LD_INT 0
89370: PPUSH
89371: PPUSH
// begin enable ;
89372: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
89373: LD_ADDR_VAR 0 2
89377: PUSH
89378: LD_INT 22
89380: PUSH
89381: LD_OWVAR 2
89385: PUSH
89386: EMPTY
89387: LIST
89388: LIST
89389: PUSH
89390: LD_INT 32
89392: PUSH
89393: LD_INT 3
89395: PUSH
89396: EMPTY
89397: LIST
89398: LIST
89399: PUSH
89400: EMPTY
89401: LIST
89402: LIST
89403: PPUSH
89404: CALL_OW 69
89408: ST_TO_ADDR
// if not tmp then
89409: LD_VAR 0 2
89413: NOT
89414: IFFALSE 89418
// exit ;
89416: GO 89447
// for i in tmp do
89418: LD_ADDR_VAR 0 1
89422: PUSH
89423: LD_VAR 0 2
89427: PUSH
89428: FOR_IN
89429: IFFALSE 89445
// begin SetLives ( i , 0 ) ;
89431: LD_VAR 0 1
89435: PPUSH
89436: LD_INT 0
89438: PPUSH
89439: CALL_OW 234
// end ;
89443: GO 89428
89445: POP
89446: POP
// end ;
89447: PPOPN 2
89449: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
89450: LD_EXP 95
89454: PUSH
89455: LD_EXP 98
89459: AND
89460: IFFALSE 89553
89462: GO 89464
89464: DISABLE
89465: LD_INT 0
89467: PPUSH
// begin enable ;
89468: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
89469: LD_ADDR_VAR 0 1
89473: PUSH
89474: LD_INT 22
89476: PUSH
89477: LD_OWVAR 2
89481: PUSH
89482: EMPTY
89483: LIST
89484: LIST
89485: PUSH
89486: LD_INT 2
89488: PUSH
89489: LD_INT 25
89491: PUSH
89492: LD_INT 5
89494: PUSH
89495: EMPTY
89496: LIST
89497: LIST
89498: PUSH
89499: LD_INT 25
89501: PUSH
89502: LD_INT 9
89504: PUSH
89505: EMPTY
89506: LIST
89507: LIST
89508: PUSH
89509: LD_INT 25
89511: PUSH
89512: LD_INT 8
89514: PUSH
89515: EMPTY
89516: LIST
89517: LIST
89518: PUSH
89519: EMPTY
89520: LIST
89521: LIST
89522: LIST
89523: LIST
89524: PUSH
89525: EMPTY
89526: LIST
89527: LIST
89528: PPUSH
89529: CALL_OW 69
89533: PUSH
89534: FOR_IN
89535: IFFALSE 89551
// begin SetClass ( i , 1 ) ;
89537: LD_VAR 0 1
89541: PPUSH
89542: LD_INT 1
89544: PPUSH
89545: CALL_OW 336
// end ;
89549: GO 89534
89551: POP
89552: POP
// end ;
89553: PPOPN 1
89555: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
89556: LD_EXP 95
89560: PUSH
89561: LD_EXP 99
89565: AND
89566: PUSH
89567: LD_OWVAR 65
89571: PUSH
89572: LD_INT 7
89574: LESS
89575: AND
89576: IFFALSE 89590
89578: GO 89580
89580: DISABLE
// begin enable ;
89581: ENABLE
// game_speed := 7 ;
89582: LD_ADDR_OWVAR 65
89586: PUSH
89587: LD_INT 7
89589: ST_TO_ADDR
// end ;
89590: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
89591: LD_EXP 95
89595: PUSH
89596: LD_EXP 102
89600: AND
89601: IFFALSE 89803
89603: GO 89605
89605: DISABLE
89606: LD_INT 0
89608: PPUSH
89609: PPUSH
89610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
89611: LD_ADDR_VAR 0 3
89615: PUSH
89616: LD_INT 81
89618: PUSH
89619: LD_OWVAR 2
89623: PUSH
89624: EMPTY
89625: LIST
89626: LIST
89627: PUSH
89628: LD_INT 21
89630: PUSH
89631: LD_INT 1
89633: PUSH
89634: EMPTY
89635: LIST
89636: LIST
89637: PUSH
89638: EMPTY
89639: LIST
89640: LIST
89641: PPUSH
89642: CALL_OW 69
89646: ST_TO_ADDR
// if not tmp then
89647: LD_VAR 0 3
89651: NOT
89652: IFFALSE 89656
// exit ;
89654: GO 89803
// if tmp > 5 then
89656: LD_VAR 0 3
89660: PUSH
89661: LD_INT 5
89663: GREATER
89664: IFFALSE 89676
// k := 5 else
89666: LD_ADDR_VAR 0 2
89670: PUSH
89671: LD_INT 5
89673: ST_TO_ADDR
89674: GO 89686
// k := tmp ;
89676: LD_ADDR_VAR 0 2
89680: PUSH
89681: LD_VAR 0 3
89685: ST_TO_ADDR
// for i := 1 to k do
89686: LD_ADDR_VAR 0 1
89690: PUSH
89691: DOUBLE
89692: LD_INT 1
89694: DEC
89695: ST_TO_ADDR
89696: LD_VAR 0 2
89700: PUSH
89701: FOR_TO
89702: IFFALSE 89801
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
89704: LD_VAR 0 3
89708: PUSH
89709: LD_VAR 0 1
89713: ARRAY
89714: PPUSH
89715: LD_VAR 0 1
89719: PUSH
89720: LD_INT 4
89722: MOD
89723: PUSH
89724: LD_INT 1
89726: PLUS
89727: PPUSH
89728: CALL_OW 259
89732: PUSH
89733: LD_INT 10
89735: LESS
89736: IFFALSE 89799
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
89738: LD_VAR 0 3
89742: PUSH
89743: LD_VAR 0 1
89747: ARRAY
89748: PPUSH
89749: LD_VAR 0 1
89753: PUSH
89754: LD_INT 4
89756: MOD
89757: PUSH
89758: LD_INT 1
89760: PLUS
89761: PPUSH
89762: LD_VAR 0 3
89766: PUSH
89767: LD_VAR 0 1
89771: ARRAY
89772: PPUSH
89773: LD_VAR 0 1
89777: PUSH
89778: LD_INT 4
89780: MOD
89781: PUSH
89782: LD_INT 1
89784: PLUS
89785: PPUSH
89786: CALL_OW 259
89790: PUSH
89791: LD_INT 1
89793: PLUS
89794: PPUSH
89795: CALL_OW 237
89799: GO 89701
89801: POP
89802: POP
// end ;
89803: PPOPN 3
89805: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
89806: LD_EXP 95
89810: PUSH
89811: LD_EXP 103
89815: AND
89816: IFFALSE 89836
89818: GO 89820
89820: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
89821: LD_INT 4
89823: PPUSH
89824: LD_OWVAR 2
89828: PPUSH
89829: LD_INT 0
89831: PPUSH
89832: CALL_OW 324
89836: END
// every 0 0$1 trigger StreamModeActive and sShovel do
89837: LD_EXP 95
89841: PUSH
89842: LD_EXP 132
89846: AND
89847: IFFALSE 89867
89849: GO 89851
89851: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
89852: LD_INT 19
89854: PPUSH
89855: LD_OWVAR 2
89859: PPUSH
89860: LD_INT 0
89862: PPUSH
89863: CALL_OW 324
89867: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
89868: LD_EXP 95
89872: PUSH
89873: LD_EXP 104
89877: AND
89878: IFFALSE 89980
89880: GO 89882
89882: DISABLE
89883: LD_INT 0
89885: PPUSH
89886: PPUSH
// begin enable ;
89887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
89888: LD_ADDR_VAR 0 2
89892: PUSH
89893: LD_INT 22
89895: PUSH
89896: LD_OWVAR 2
89900: PUSH
89901: EMPTY
89902: LIST
89903: LIST
89904: PUSH
89905: LD_INT 2
89907: PUSH
89908: LD_INT 34
89910: PUSH
89911: LD_INT 11
89913: PUSH
89914: EMPTY
89915: LIST
89916: LIST
89917: PUSH
89918: LD_INT 34
89920: PUSH
89921: LD_INT 30
89923: PUSH
89924: EMPTY
89925: LIST
89926: LIST
89927: PUSH
89928: EMPTY
89929: LIST
89930: LIST
89931: LIST
89932: PUSH
89933: EMPTY
89934: LIST
89935: LIST
89936: PPUSH
89937: CALL_OW 69
89941: ST_TO_ADDR
// if not tmp then
89942: LD_VAR 0 2
89946: NOT
89947: IFFALSE 89951
// exit ;
89949: GO 89980
// for i in tmp do
89951: LD_ADDR_VAR 0 1
89955: PUSH
89956: LD_VAR 0 2
89960: PUSH
89961: FOR_IN
89962: IFFALSE 89978
// begin SetLives ( i , 0 ) ;
89964: LD_VAR 0 1
89968: PPUSH
89969: LD_INT 0
89971: PPUSH
89972: CALL_OW 234
// end ;
89976: GO 89961
89978: POP
89979: POP
// end ;
89980: PPOPN 2
89982: END
// every 0 0$1 trigger StreamModeActive and sBunker do
89983: LD_EXP 95
89987: PUSH
89988: LD_EXP 105
89992: AND
89993: IFFALSE 90013
89995: GO 89997
89997: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
89998: LD_INT 32
90000: PPUSH
90001: LD_OWVAR 2
90005: PPUSH
90006: LD_INT 0
90008: PPUSH
90009: CALL_OW 324
90013: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
90014: LD_EXP 95
90018: PUSH
90019: LD_EXP 106
90023: AND
90024: IFFALSE 90205
90026: GO 90028
90028: DISABLE
90029: LD_INT 0
90031: PPUSH
90032: PPUSH
90033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
90034: LD_ADDR_VAR 0 2
90038: PUSH
90039: LD_INT 22
90041: PUSH
90042: LD_OWVAR 2
90046: PUSH
90047: EMPTY
90048: LIST
90049: LIST
90050: PUSH
90051: LD_INT 33
90053: PUSH
90054: LD_INT 3
90056: PUSH
90057: EMPTY
90058: LIST
90059: LIST
90060: PUSH
90061: EMPTY
90062: LIST
90063: LIST
90064: PPUSH
90065: CALL_OW 69
90069: ST_TO_ADDR
// if not tmp then
90070: LD_VAR 0 2
90074: NOT
90075: IFFALSE 90079
// exit ;
90077: GO 90205
// side := 0 ;
90079: LD_ADDR_VAR 0 3
90083: PUSH
90084: LD_INT 0
90086: ST_TO_ADDR
// for i := 1 to 8 do
90087: LD_ADDR_VAR 0 1
90091: PUSH
90092: DOUBLE
90093: LD_INT 1
90095: DEC
90096: ST_TO_ADDR
90097: LD_INT 8
90099: PUSH
90100: FOR_TO
90101: IFFALSE 90149
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
90103: LD_OWVAR 2
90107: PUSH
90108: LD_VAR 0 1
90112: NONEQUAL
90113: PUSH
90114: LD_OWVAR 2
90118: PPUSH
90119: LD_VAR 0 1
90123: PPUSH
90124: CALL_OW 81
90128: PUSH
90129: LD_INT 2
90131: EQUAL
90132: AND
90133: IFFALSE 90147
// begin side := i ;
90135: LD_ADDR_VAR 0 3
90139: PUSH
90140: LD_VAR 0 1
90144: ST_TO_ADDR
// break ;
90145: GO 90149
// end ;
90147: GO 90100
90149: POP
90150: POP
// if not side then
90151: LD_VAR 0 3
90155: NOT
90156: IFFALSE 90160
// exit ;
90158: GO 90205
// for i := 1 to tmp do
90160: LD_ADDR_VAR 0 1
90164: PUSH
90165: DOUBLE
90166: LD_INT 1
90168: DEC
90169: ST_TO_ADDR
90170: LD_VAR 0 2
90174: PUSH
90175: FOR_TO
90176: IFFALSE 90203
// if Prob ( 60 ) then
90178: LD_INT 60
90180: PPUSH
90181: CALL_OW 13
90185: IFFALSE 90201
// SetSide ( i , side ) ;
90187: LD_VAR 0 1
90191: PPUSH
90192: LD_VAR 0 3
90196: PPUSH
90197: CALL_OW 235
90201: GO 90175
90203: POP
90204: POP
// end ;
90205: PPOPN 3
90207: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
90208: LD_EXP 95
90212: PUSH
90213: LD_EXP 108
90217: AND
90218: IFFALSE 90337
90220: GO 90222
90222: DISABLE
90223: LD_INT 0
90225: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
90226: LD_ADDR_VAR 0 1
90230: PUSH
90231: LD_INT 22
90233: PUSH
90234: LD_OWVAR 2
90238: PUSH
90239: EMPTY
90240: LIST
90241: LIST
90242: PUSH
90243: LD_INT 21
90245: PUSH
90246: LD_INT 1
90248: PUSH
90249: EMPTY
90250: LIST
90251: LIST
90252: PUSH
90253: LD_INT 3
90255: PUSH
90256: LD_INT 23
90258: PUSH
90259: LD_INT 0
90261: PUSH
90262: EMPTY
90263: LIST
90264: LIST
90265: PUSH
90266: EMPTY
90267: LIST
90268: LIST
90269: PUSH
90270: EMPTY
90271: LIST
90272: LIST
90273: LIST
90274: PPUSH
90275: CALL_OW 69
90279: PUSH
90280: FOR_IN
90281: IFFALSE 90335
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
90283: LD_VAR 0 1
90287: PPUSH
90288: CALL_OW 257
90292: PUSH
90293: LD_INT 1
90295: PUSH
90296: LD_INT 2
90298: PUSH
90299: LD_INT 3
90301: PUSH
90302: LD_INT 4
90304: PUSH
90305: EMPTY
90306: LIST
90307: LIST
90308: LIST
90309: LIST
90310: IN
90311: IFFALSE 90333
// SetClass ( un , rand ( 1 , 4 ) ) ;
90313: LD_VAR 0 1
90317: PPUSH
90318: LD_INT 1
90320: PPUSH
90321: LD_INT 4
90323: PPUSH
90324: CALL_OW 12
90328: PPUSH
90329: CALL_OW 336
90333: GO 90280
90335: POP
90336: POP
// end ;
90337: PPOPN 1
90339: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
90340: LD_EXP 95
90344: PUSH
90345: LD_EXP 107
90349: AND
90350: IFFALSE 90429
90352: GO 90354
90354: DISABLE
90355: LD_INT 0
90357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
90358: LD_ADDR_VAR 0 1
90362: PUSH
90363: LD_INT 22
90365: PUSH
90366: LD_OWVAR 2
90370: PUSH
90371: EMPTY
90372: LIST
90373: LIST
90374: PUSH
90375: LD_INT 21
90377: PUSH
90378: LD_INT 3
90380: PUSH
90381: EMPTY
90382: LIST
90383: LIST
90384: PUSH
90385: EMPTY
90386: LIST
90387: LIST
90388: PPUSH
90389: CALL_OW 69
90393: ST_TO_ADDR
// if not tmp then
90394: LD_VAR 0 1
90398: NOT
90399: IFFALSE 90403
// exit ;
90401: GO 90429
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
90403: LD_VAR 0 1
90407: PUSH
90408: LD_INT 1
90410: PPUSH
90411: LD_VAR 0 1
90415: PPUSH
90416: CALL_OW 12
90420: ARRAY
90421: PPUSH
90422: LD_INT 100
90424: PPUSH
90425: CALL_OW 234
// end ;
90429: PPOPN 1
90431: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
90432: LD_EXP 95
90436: PUSH
90437: LD_EXP 109
90441: AND
90442: IFFALSE 90540
90444: GO 90446
90446: DISABLE
90447: LD_INT 0
90449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
90450: LD_ADDR_VAR 0 1
90454: PUSH
90455: LD_INT 22
90457: PUSH
90458: LD_OWVAR 2
90462: PUSH
90463: EMPTY
90464: LIST
90465: LIST
90466: PUSH
90467: LD_INT 21
90469: PUSH
90470: LD_INT 1
90472: PUSH
90473: EMPTY
90474: LIST
90475: LIST
90476: PUSH
90477: EMPTY
90478: LIST
90479: LIST
90480: PPUSH
90481: CALL_OW 69
90485: ST_TO_ADDR
// if not tmp then
90486: LD_VAR 0 1
90490: NOT
90491: IFFALSE 90495
// exit ;
90493: GO 90540
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
90495: LD_VAR 0 1
90499: PUSH
90500: LD_INT 1
90502: PPUSH
90503: LD_VAR 0 1
90507: PPUSH
90508: CALL_OW 12
90512: ARRAY
90513: PPUSH
90514: LD_INT 1
90516: PPUSH
90517: LD_INT 4
90519: PPUSH
90520: CALL_OW 12
90524: PPUSH
90525: LD_INT 3000
90527: PPUSH
90528: LD_INT 9000
90530: PPUSH
90531: CALL_OW 12
90535: PPUSH
90536: CALL_OW 492
// end ;
90540: PPOPN 1
90542: END
// every 0 0$1 trigger StreamModeActive and sDepot do
90543: LD_EXP 95
90547: PUSH
90548: LD_EXP 110
90552: AND
90553: IFFALSE 90573
90555: GO 90557
90557: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
90558: LD_INT 1
90560: PPUSH
90561: LD_OWVAR 2
90565: PPUSH
90566: LD_INT 0
90568: PPUSH
90569: CALL_OW 324
90573: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
90574: LD_EXP 95
90578: PUSH
90579: LD_EXP 111
90583: AND
90584: IFFALSE 90667
90586: GO 90588
90588: DISABLE
90589: LD_INT 0
90591: PPUSH
90592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
90593: LD_ADDR_VAR 0 2
90597: PUSH
90598: LD_INT 22
90600: PUSH
90601: LD_OWVAR 2
90605: PUSH
90606: EMPTY
90607: LIST
90608: LIST
90609: PUSH
90610: LD_INT 21
90612: PUSH
90613: LD_INT 3
90615: PUSH
90616: EMPTY
90617: LIST
90618: LIST
90619: PUSH
90620: EMPTY
90621: LIST
90622: LIST
90623: PPUSH
90624: CALL_OW 69
90628: ST_TO_ADDR
// if not tmp then
90629: LD_VAR 0 2
90633: NOT
90634: IFFALSE 90638
// exit ;
90636: GO 90667
// for i in tmp do
90638: LD_ADDR_VAR 0 1
90642: PUSH
90643: LD_VAR 0 2
90647: PUSH
90648: FOR_IN
90649: IFFALSE 90665
// SetBLevel ( i , 10 ) ;
90651: LD_VAR 0 1
90655: PPUSH
90656: LD_INT 10
90658: PPUSH
90659: CALL_OW 241
90663: GO 90648
90665: POP
90666: POP
// end ;
90667: PPOPN 2
90669: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
90670: LD_EXP 95
90674: PUSH
90675: LD_EXP 112
90679: AND
90680: IFFALSE 90791
90682: GO 90684
90684: DISABLE
90685: LD_INT 0
90687: PPUSH
90688: PPUSH
90689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90690: LD_ADDR_VAR 0 3
90694: PUSH
90695: LD_INT 22
90697: PUSH
90698: LD_OWVAR 2
90702: PUSH
90703: EMPTY
90704: LIST
90705: LIST
90706: PUSH
90707: LD_INT 25
90709: PUSH
90710: LD_INT 1
90712: PUSH
90713: EMPTY
90714: LIST
90715: LIST
90716: PUSH
90717: EMPTY
90718: LIST
90719: LIST
90720: PPUSH
90721: CALL_OW 69
90725: ST_TO_ADDR
// if not tmp then
90726: LD_VAR 0 3
90730: NOT
90731: IFFALSE 90735
// exit ;
90733: GO 90791
// un := tmp [ rand ( 1 , tmp ) ] ;
90735: LD_ADDR_VAR 0 2
90739: PUSH
90740: LD_VAR 0 3
90744: PUSH
90745: LD_INT 1
90747: PPUSH
90748: LD_VAR 0 3
90752: PPUSH
90753: CALL_OW 12
90757: ARRAY
90758: ST_TO_ADDR
// if Crawls ( un ) then
90759: LD_VAR 0 2
90763: PPUSH
90764: CALL_OW 318
90768: IFFALSE 90779
// ComWalk ( un ) ;
90770: LD_VAR 0 2
90774: PPUSH
90775: CALL_OW 138
// SetClass ( un , class_sniper ) ;
90779: LD_VAR 0 2
90783: PPUSH
90784: LD_INT 5
90786: PPUSH
90787: CALL_OW 336
// end ;
90791: PPOPN 3
90793: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
90794: LD_EXP 95
90798: PUSH
90799: LD_EXP 113
90803: AND
90804: PUSH
90805: LD_OWVAR 67
90809: PUSH
90810: LD_INT 3
90812: LESS
90813: AND
90814: IFFALSE 90833
90816: GO 90818
90818: DISABLE
// Difficulty := Difficulty + 1 ;
90819: LD_ADDR_OWVAR 67
90823: PUSH
90824: LD_OWVAR 67
90828: PUSH
90829: LD_INT 1
90831: PLUS
90832: ST_TO_ADDR
90833: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
90834: LD_EXP 95
90838: PUSH
90839: LD_EXP 114
90843: AND
90844: IFFALSE 90947
90846: GO 90848
90848: DISABLE
90849: LD_INT 0
90851: PPUSH
// begin for i := 1 to 5 do
90852: LD_ADDR_VAR 0 1
90856: PUSH
90857: DOUBLE
90858: LD_INT 1
90860: DEC
90861: ST_TO_ADDR
90862: LD_INT 5
90864: PUSH
90865: FOR_TO
90866: IFFALSE 90945
// begin uc_nation := nation_nature ;
90868: LD_ADDR_OWVAR 21
90872: PUSH
90873: LD_INT 0
90875: ST_TO_ADDR
// uc_side := 0 ;
90876: LD_ADDR_OWVAR 20
90880: PUSH
90881: LD_INT 0
90883: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90884: LD_ADDR_OWVAR 29
90888: PUSH
90889: LD_INT 12
90891: PUSH
90892: LD_INT 12
90894: PUSH
90895: EMPTY
90896: LIST
90897: LIST
90898: ST_TO_ADDR
// hc_agressivity := 20 ;
90899: LD_ADDR_OWVAR 35
90903: PUSH
90904: LD_INT 20
90906: ST_TO_ADDR
// hc_class := class_tiger ;
90907: LD_ADDR_OWVAR 28
90911: PUSH
90912: LD_INT 14
90914: ST_TO_ADDR
// hc_gallery :=  ;
90915: LD_ADDR_OWVAR 33
90919: PUSH
90920: LD_STRING 
90922: ST_TO_ADDR
// hc_name :=  ;
90923: LD_ADDR_OWVAR 26
90927: PUSH
90928: LD_STRING 
90930: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
90931: CALL_OW 44
90935: PPUSH
90936: LD_INT 0
90938: PPUSH
90939: CALL_OW 51
// end ;
90943: GO 90865
90945: POP
90946: POP
// end ;
90947: PPOPN 1
90949: END
// every 0 0$1 trigger StreamModeActive and sBomb do
90950: LD_EXP 95
90954: PUSH
90955: LD_EXP 115
90959: AND
90960: IFFALSE 90969
90962: GO 90964
90964: DISABLE
// StreamSibBomb ;
90965: CALL 90970 0 0
90969: END
// export function StreamSibBomb ; var i , x , y ; begin
90970: LD_INT 0
90972: PPUSH
90973: PPUSH
90974: PPUSH
90975: PPUSH
// result := false ;
90976: LD_ADDR_VAR 0 1
90980: PUSH
90981: LD_INT 0
90983: ST_TO_ADDR
// for i := 1 to 16 do
90984: LD_ADDR_VAR 0 2
90988: PUSH
90989: DOUBLE
90990: LD_INT 1
90992: DEC
90993: ST_TO_ADDR
90994: LD_INT 16
90996: PUSH
90997: FOR_TO
90998: IFFALSE 91197
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
91000: LD_ADDR_VAR 0 3
91004: PUSH
91005: LD_INT 10
91007: PUSH
91008: LD_INT 20
91010: PUSH
91011: LD_INT 30
91013: PUSH
91014: LD_INT 40
91016: PUSH
91017: LD_INT 50
91019: PUSH
91020: LD_INT 60
91022: PUSH
91023: LD_INT 70
91025: PUSH
91026: LD_INT 80
91028: PUSH
91029: LD_INT 90
91031: PUSH
91032: LD_INT 100
91034: PUSH
91035: LD_INT 110
91037: PUSH
91038: LD_INT 120
91040: PUSH
91041: LD_INT 130
91043: PUSH
91044: LD_INT 140
91046: PUSH
91047: LD_INT 150
91049: PUSH
91050: EMPTY
91051: LIST
91052: LIST
91053: LIST
91054: LIST
91055: LIST
91056: LIST
91057: LIST
91058: LIST
91059: LIST
91060: LIST
91061: LIST
91062: LIST
91063: LIST
91064: LIST
91065: LIST
91066: PUSH
91067: LD_INT 1
91069: PPUSH
91070: LD_INT 15
91072: PPUSH
91073: CALL_OW 12
91077: ARRAY
91078: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
91079: LD_ADDR_VAR 0 4
91083: PUSH
91084: LD_INT 10
91086: PUSH
91087: LD_INT 20
91089: PUSH
91090: LD_INT 30
91092: PUSH
91093: LD_INT 40
91095: PUSH
91096: LD_INT 50
91098: PUSH
91099: LD_INT 60
91101: PUSH
91102: LD_INT 70
91104: PUSH
91105: LD_INT 80
91107: PUSH
91108: LD_INT 90
91110: PUSH
91111: LD_INT 100
91113: PUSH
91114: LD_INT 110
91116: PUSH
91117: LD_INT 120
91119: PUSH
91120: LD_INT 130
91122: PUSH
91123: LD_INT 140
91125: PUSH
91126: LD_INT 150
91128: PUSH
91129: EMPTY
91130: LIST
91131: LIST
91132: LIST
91133: LIST
91134: LIST
91135: LIST
91136: LIST
91137: LIST
91138: LIST
91139: LIST
91140: LIST
91141: LIST
91142: LIST
91143: LIST
91144: LIST
91145: PUSH
91146: LD_INT 1
91148: PPUSH
91149: LD_INT 15
91151: PPUSH
91152: CALL_OW 12
91156: ARRAY
91157: ST_TO_ADDR
// if ValidHex ( x , y ) then
91158: LD_VAR 0 3
91162: PPUSH
91163: LD_VAR 0 4
91167: PPUSH
91168: CALL_OW 488
91172: IFFALSE 91195
// begin result := [ x , y ] ;
91174: LD_ADDR_VAR 0 1
91178: PUSH
91179: LD_VAR 0 3
91183: PUSH
91184: LD_VAR 0 4
91188: PUSH
91189: EMPTY
91190: LIST
91191: LIST
91192: ST_TO_ADDR
// break ;
91193: GO 91197
// end ; end ;
91195: GO 90997
91197: POP
91198: POP
// if result then
91199: LD_VAR 0 1
91203: IFFALSE 91263
// begin ToLua ( playSibBomb() ) ;
91205: LD_STRING playSibBomb()
91207: PPUSH
91208: CALL_OW 559
// wait ( 0 0$14 ) ;
91212: LD_INT 490
91214: PPUSH
91215: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
91219: LD_VAR 0 1
91223: PUSH
91224: LD_INT 1
91226: ARRAY
91227: PPUSH
91228: LD_VAR 0 1
91232: PUSH
91233: LD_INT 2
91235: ARRAY
91236: PPUSH
91237: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
91241: LD_VAR 0 1
91245: PUSH
91246: LD_INT 1
91248: ARRAY
91249: PPUSH
91250: LD_VAR 0 1
91254: PUSH
91255: LD_INT 2
91257: ARRAY
91258: PPUSH
91259: CALL_OW 429
// end ; end ;
91263: LD_VAR 0 1
91267: RET
// every 0 0$1 trigger StreamModeActive and sReset do
91268: LD_EXP 95
91272: PUSH
91273: LD_EXP 117
91277: AND
91278: IFFALSE 91290
91280: GO 91282
91282: DISABLE
// YouLost (  ) ;
91283: LD_STRING 
91285: PPUSH
91286: CALL_OW 104
91290: END
// every 0 0$1 trigger StreamModeActive and sFog do
91291: LD_EXP 95
91295: PUSH
91296: LD_EXP 116
91300: AND
91301: IFFALSE 91315
91303: GO 91305
91305: DISABLE
// FogOff ( your_side ) ;
91306: LD_OWVAR 2
91310: PPUSH
91311: CALL_OW 344
91315: END
// every 0 0$1 trigger StreamModeActive and sSun do
91316: LD_EXP 95
91320: PUSH
91321: LD_EXP 118
91325: AND
91326: IFFALSE 91354
91328: GO 91330
91330: DISABLE
// begin solar_recharge_percent := 0 ;
91331: LD_ADDR_OWVAR 79
91335: PUSH
91336: LD_INT 0
91338: ST_TO_ADDR
// wait ( 5 5$00 ) ;
91339: LD_INT 10500
91341: PPUSH
91342: CALL_OW 67
// solar_recharge_percent := 100 ;
91346: LD_ADDR_OWVAR 79
91350: PUSH
91351: LD_INT 100
91353: ST_TO_ADDR
// end ;
91354: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
91355: LD_EXP 95
91359: PUSH
91360: LD_EXP 119
91364: AND
91365: IFFALSE 91604
91367: GO 91369
91369: DISABLE
91370: LD_INT 0
91372: PPUSH
91373: PPUSH
91374: PPUSH
// begin tmp := [ ] ;
91375: LD_ADDR_VAR 0 3
91379: PUSH
91380: EMPTY
91381: ST_TO_ADDR
// for i := 1 to 6 do
91382: LD_ADDR_VAR 0 1
91386: PUSH
91387: DOUBLE
91388: LD_INT 1
91390: DEC
91391: ST_TO_ADDR
91392: LD_INT 6
91394: PUSH
91395: FOR_TO
91396: IFFALSE 91501
// begin uc_nation := nation_nature ;
91398: LD_ADDR_OWVAR 21
91402: PUSH
91403: LD_INT 0
91405: ST_TO_ADDR
// uc_side := 0 ;
91406: LD_ADDR_OWVAR 20
91410: PUSH
91411: LD_INT 0
91413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
91414: LD_ADDR_OWVAR 29
91418: PUSH
91419: LD_INT 12
91421: PUSH
91422: LD_INT 12
91424: PUSH
91425: EMPTY
91426: LIST
91427: LIST
91428: ST_TO_ADDR
// hc_agressivity := 20 ;
91429: LD_ADDR_OWVAR 35
91433: PUSH
91434: LD_INT 20
91436: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
91437: LD_ADDR_OWVAR 28
91441: PUSH
91442: LD_INT 17
91444: ST_TO_ADDR
// hc_gallery :=  ;
91445: LD_ADDR_OWVAR 33
91449: PUSH
91450: LD_STRING 
91452: ST_TO_ADDR
// hc_name :=  ;
91453: LD_ADDR_OWVAR 26
91457: PUSH
91458: LD_STRING 
91460: ST_TO_ADDR
// un := CreateHuman ;
91461: LD_ADDR_VAR 0 2
91465: PUSH
91466: CALL_OW 44
91470: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
91471: LD_VAR 0 2
91475: PPUSH
91476: LD_INT 1
91478: PPUSH
91479: CALL_OW 51
// tmp := tmp ^ un ;
91483: LD_ADDR_VAR 0 3
91487: PUSH
91488: LD_VAR 0 3
91492: PUSH
91493: LD_VAR 0 2
91497: ADD
91498: ST_TO_ADDR
// end ;
91499: GO 91395
91501: POP
91502: POP
// repeat wait ( 0 0$1 ) ;
91503: LD_INT 35
91505: PPUSH
91506: CALL_OW 67
// for un in tmp do
91510: LD_ADDR_VAR 0 2
91514: PUSH
91515: LD_VAR 0 3
91519: PUSH
91520: FOR_IN
91521: IFFALSE 91595
// begin if IsDead ( un ) then
91523: LD_VAR 0 2
91527: PPUSH
91528: CALL_OW 301
91532: IFFALSE 91552
// begin tmp := tmp diff un ;
91534: LD_ADDR_VAR 0 3
91538: PUSH
91539: LD_VAR 0 3
91543: PUSH
91544: LD_VAR 0 2
91548: DIFF
91549: ST_TO_ADDR
// continue ;
91550: GO 91520
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
91552: LD_VAR 0 2
91556: PPUSH
91557: LD_INT 3
91559: PUSH
91560: LD_INT 22
91562: PUSH
91563: LD_INT 0
91565: PUSH
91566: EMPTY
91567: LIST
91568: LIST
91569: PUSH
91570: EMPTY
91571: LIST
91572: LIST
91573: PPUSH
91574: CALL_OW 69
91578: PPUSH
91579: LD_VAR 0 2
91583: PPUSH
91584: CALL_OW 74
91588: PPUSH
91589: CALL_OW 115
// end ;
91593: GO 91520
91595: POP
91596: POP
// until not tmp ;
91597: LD_VAR 0 3
91601: NOT
91602: IFFALSE 91503
// end ;
91604: PPOPN 3
91606: END
// every 0 0$1 trigger StreamModeActive and sTroll do
91607: LD_EXP 95
91611: PUSH
91612: LD_EXP 120
91616: AND
91617: IFFALSE 91671
91619: GO 91621
91621: DISABLE
// begin ToLua ( displayTroll(); ) ;
91622: LD_STRING displayTroll();
91624: PPUSH
91625: CALL_OW 559
// wait ( 3 3$00 ) ;
91629: LD_INT 6300
91631: PPUSH
91632: CALL_OW 67
// ToLua ( hideTroll(); ) ;
91636: LD_STRING hideTroll();
91638: PPUSH
91639: CALL_OW 559
// wait ( 1 1$00 ) ;
91643: LD_INT 2100
91645: PPUSH
91646: CALL_OW 67
// ToLua ( displayTroll(); ) ;
91650: LD_STRING displayTroll();
91652: PPUSH
91653: CALL_OW 559
// wait ( 1 1$00 ) ;
91657: LD_INT 2100
91659: PPUSH
91660: CALL_OW 67
// ToLua ( hideTroll(); ) ;
91664: LD_STRING hideTroll();
91666: PPUSH
91667: CALL_OW 559
// end ;
91671: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
91672: LD_EXP 95
91676: PUSH
91677: LD_EXP 121
91681: AND
91682: IFFALSE 91745
91684: GO 91686
91686: DISABLE
91687: LD_INT 0
91689: PPUSH
// begin p := 0 ;
91690: LD_ADDR_VAR 0 1
91694: PUSH
91695: LD_INT 0
91697: ST_TO_ADDR
// repeat game_speed := 1 ;
91698: LD_ADDR_OWVAR 65
91702: PUSH
91703: LD_INT 1
91705: ST_TO_ADDR
// wait ( 0 0$1 ) ;
91706: LD_INT 35
91708: PPUSH
91709: CALL_OW 67
// p := p + 1 ;
91713: LD_ADDR_VAR 0 1
91717: PUSH
91718: LD_VAR 0 1
91722: PUSH
91723: LD_INT 1
91725: PLUS
91726: ST_TO_ADDR
// until p >= 60 ;
91727: LD_VAR 0 1
91731: PUSH
91732: LD_INT 60
91734: GREATEREQUAL
91735: IFFALSE 91698
// game_speed := 4 ;
91737: LD_ADDR_OWVAR 65
91741: PUSH
91742: LD_INT 4
91744: ST_TO_ADDR
// end ;
91745: PPOPN 1
91747: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
91748: LD_EXP 95
91752: PUSH
91753: LD_EXP 122
91757: AND
91758: IFFALSE 91904
91760: GO 91762
91762: DISABLE
91763: LD_INT 0
91765: PPUSH
91766: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
91767: LD_ADDR_VAR 0 1
91771: PUSH
91772: LD_INT 22
91774: PUSH
91775: LD_OWVAR 2
91779: PUSH
91780: EMPTY
91781: LIST
91782: LIST
91783: PUSH
91784: LD_INT 2
91786: PUSH
91787: LD_INT 30
91789: PUSH
91790: LD_INT 0
91792: PUSH
91793: EMPTY
91794: LIST
91795: LIST
91796: PUSH
91797: LD_INT 30
91799: PUSH
91800: LD_INT 1
91802: PUSH
91803: EMPTY
91804: LIST
91805: LIST
91806: PUSH
91807: EMPTY
91808: LIST
91809: LIST
91810: LIST
91811: PUSH
91812: EMPTY
91813: LIST
91814: LIST
91815: PPUSH
91816: CALL_OW 69
91820: ST_TO_ADDR
// if not depot then
91821: LD_VAR 0 1
91825: NOT
91826: IFFALSE 91830
// exit ;
91828: GO 91904
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
91830: LD_ADDR_VAR 0 2
91834: PUSH
91835: LD_VAR 0 1
91839: PUSH
91840: LD_INT 1
91842: PPUSH
91843: LD_VAR 0 1
91847: PPUSH
91848: CALL_OW 12
91852: ARRAY
91853: PPUSH
91854: CALL_OW 274
91858: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
91859: LD_VAR 0 2
91863: PPUSH
91864: LD_INT 1
91866: PPUSH
91867: LD_INT 0
91869: PPUSH
91870: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
91874: LD_VAR 0 2
91878: PPUSH
91879: LD_INT 2
91881: PPUSH
91882: LD_INT 0
91884: PPUSH
91885: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
91889: LD_VAR 0 2
91893: PPUSH
91894: LD_INT 3
91896: PPUSH
91897: LD_INT 0
91899: PPUSH
91900: CALL_OW 277
// end ;
91904: PPOPN 2
91906: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
91907: LD_EXP 95
91911: PUSH
91912: LD_EXP 123
91916: AND
91917: IFFALSE 92014
91919: GO 91921
91921: DISABLE
91922: LD_INT 0
91924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
91925: LD_ADDR_VAR 0 1
91929: PUSH
91930: LD_INT 22
91932: PUSH
91933: LD_OWVAR 2
91937: PUSH
91938: EMPTY
91939: LIST
91940: LIST
91941: PUSH
91942: LD_INT 21
91944: PUSH
91945: LD_INT 1
91947: PUSH
91948: EMPTY
91949: LIST
91950: LIST
91951: PUSH
91952: LD_INT 3
91954: PUSH
91955: LD_INT 23
91957: PUSH
91958: LD_INT 0
91960: PUSH
91961: EMPTY
91962: LIST
91963: LIST
91964: PUSH
91965: EMPTY
91966: LIST
91967: LIST
91968: PUSH
91969: EMPTY
91970: LIST
91971: LIST
91972: LIST
91973: PPUSH
91974: CALL_OW 69
91978: ST_TO_ADDR
// if not tmp then
91979: LD_VAR 0 1
91983: NOT
91984: IFFALSE 91988
// exit ;
91986: GO 92014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
91988: LD_VAR 0 1
91992: PUSH
91993: LD_INT 1
91995: PPUSH
91996: LD_VAR 0 1
92000: PPUSH
92001: CALL_OW 12
92005: ARRAY
92006: PPUSH
92007: LD_INT 200
92009: PPUSH
92010: CALL_OW 234
// end ;
92014: PPOPN 1
92016: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
92017: LD_EXP 95
92021: PUSH
92022: LD_EXP 124
92026: AND
92027: IFFALSE 92106
92029: GO 92031
92031: DISABLE
92032: LD_INT 0
92034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
92035: LD_ADDR_VAR 0 1
92039: PUSH
92040: LD_INT 22
92042: PUSH
92043: LD_OWVAR 2
92047: PUSH
92048: EMPTY
92049: LIST
92050: LIST
92051: PUSH
92052: LD_INT 21
92054: PUSH
92055: LD_INT 2
92057: PUSH
92058: EMPTY
92059: LIST
92060: LIST
92061: PUSH
92062: EMPTY
92063: LIST
92064: LIST
92065: PPUSH
92066: CALL_OW 69
92070: ST_TO_ADDR
// if not tmp then
92071: LD_VAR 0 1
92075: NOT
92076: IFFALSE 92080
// exit ;
92078: GO 92106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
92080: LD_VAR 0 1
92084: PUSH
92085: LD_INT 1
92087: PPUSH
92088: LD_VAR 0 1
92092: PPUSH
92093: CALL_OW 12
92097: ARRAY
92098: PPUSH
92099: LD_INT 60
92101: PPUSH
92102: CALL_OW 234
// end ;
92106: PPOPN 1
92108: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
92109: LD_EXP 95
92113: PUSH
92114: LD_EXP 125
92118: AND
92119: IFFALSE 92218
92121: GO 92123
92123: DISABLE
92124: LD_INT 0
92126: PPUSH
92127: PPUSH
// begin enable ;
92128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
92129: LD_ADDR_VAR 0 1
92133: PUSH
92134: LD_INT 22
92136: PUSH
92137: LD_OWVAR 2
92141: PUSH
92142: EMPTY
92143: LIST
92144: LIST
92145: PUSH
92146: LD_INT 61
92148: PUSH
92149: EMPTY
92150: LIST
92151: PUSH
92152: LD_INT 33
92154: PUSH
92155: LD_INT 2
92157: PUSH
92158: EMPTY
92159: LIST
92160: LIST
92161: PUSH
92162: EMPTY
92163: LIST
92164: LIST
92165: LIST
92166: PPUSH
92167: CALL_OW 69
92171: ST_TO_ADDR
// if not tmp then
92172: LD_VAR 0 1
92176: NOT
92177: IFFALSE 92181
// exit ;
92179: GO 92218
// for i in tmp do
92181: LD_ADDR_VAR 0 2
92185: PUSH
92186: LD_VAR 0 1
92190: PUSH
92191: FOR_IN
92192: IFFALSE 92216
// if IsControledBy ( i ) then
92194: LD_VAR 0 2
92198: PPUSH
92199: CALL_OW 312
92203: IFFALSE 92214
// ComUnlink ( i ) ;
92205: LD_VAR 0 2
92209: PPUSH
92210: CALL_OW 136
92214: GO 92191
92216: POP
92217: POP
// end ;
92218: PPOPN 2
92220: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
92221: LD_EXP 95
92225: PUSH
92226: LD_EXP 126
92230: AND
92231: IFFALSE 92371
92233: GO 92235
92235: DISABLE
92236: LD_INT 0
92238: PPUSH
92239: PPUSH
// begin ToLua ( displayPowell(); ) ;
92240: LD_STRING displayPowell();
92242: PPUSH
92243: CALL_OW 559
// uc_side := 0 ;
92247: LD_ADDR_OWVAR 20
92251: PUSH
92252: LD_INT 0
92254: ST_TO_ADDR
// uc_nation := 2 ;
92255: LD_ADDR_OWVAR 21
92259: PUSH
92260: LD_INT 2
92262: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
92263: LD_ADDR_OWVAR 37
92267: PUSH
92268: LD_INT 14
92270: ST_TO_ADDR
// vc_engine := engine_siberite ;
92271: LD_ADDR_OWVAR 39
92275: PUSH
92276: LD_INT 3
92278: ST_TO_ADDR
// vc_control := control_apeman ;
92279: LD_ADDR_OWVAR 38
92283: PUSH
92284: LD_INT 5
92286: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
92287: LD_ADDR_OWVAR 40
92291: PUSH
92292: LD_INT 29
92294: ST_TO_ADDR
// un := CreateVehicle ;
92295: LD_ADDR_VAR 0 2
92299: PUSH
92300: CALL_OW 45
92304: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
92305: LD_VAR 0 2
92309: PPUSH
92310: LD_INT 1
92312: PPUSH
92313: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
92317: LD_INT 35
92319: PPUSH
92320: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
92324: LD_VAR 0 2
92328: PPUSH
92329: LD_INT 22
92331: PUSH
92332: LD_OWVAR 2
92336: PUSH
92337: EMPTY
92338: LIST
92339: LIST
92340: PPUSH
92341: CALL_OW 69
92345: PPUSH
92346: LD_VAR 0 2
92350: PPUSH
92351: CALL_OW 74
92355: PPUSH
92356: CALL_OW 115
// until IsDead ( un ) ;
92360: LD_VAR 0 2
92364: PPUSH
92365: CALL_OW 301
92369: IFFALSE 92317
// end ;
92371: PPOPN 2
92373: END
// every 0 0$1 trigger StreamModeActive and sStu do
92374: LD_EXP 95
92378: PUSH
92379: LD_EXP 134
92383: AND
92384: IFFALSE 92400
92386: GO 92388
92388: DISABLE
// begin ToLua ( displayStucuk(); ) ;
92389: LD_STRING displayStucuk();
92391: PPUSH
92392: CALL_OW 559
// ResetFog ;
92396: CALL_OW 335
// end ;
92400: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
92401: LD_EXP 95
92405: PUSH
92406: LD_EXP 127
92410: AND
92411: IFFALSE 92552
92413: GO 92415
92415: DISABLE
92416: LD_INT 0
92418: PPUSH
92419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
92420: LD_ADDR_VAR 0 2
92424: PUSH
92425: LD_INT 22
92427: PUSH
92428: LD_OWVAR 2
92432: PUSH
92433: EMPTY
92434: LIST
92435: LIST
92436: PUSH
92437: LD_INT 21
92439: PUSH
92440: LD_INT 1
92442: PUSH
92443: EMPTY
92444: LIST
92445: LIST
92446: PUSH
92447: EMPTY
92448: LIST
92449: LIST
92450: PPUSH
92451: CALL_OW 69
92455: ST_TO_ADDR
// if not tmp then
92456: LD_VAR 0 2
92460: NOT
92461: IFFALSE 92465
// exit ;
92463: GO 92552
// un := tmp [ rand ( 1 , tmp ) ] ;
92465: LD_ADDR_VAR 0 1
92469: PUSH
92470: LD_VAR 0 2
92474: PUSH
92475: LD_INT 1
92477: PPUSH
92478: LD_VAR 0 2
92482: PPUSH
92483: CALL_OW 12
92487: ARRAY
92488: ST_TO_ADDR
// SetSide ( un , 0 ) ;
92489: LD_VAR 0 1
92493: PPUSH
92494: LD_INT 0
92496: PPUSH
92497: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
92501: LD_VAR 0 1
92505: PPUSH
92506: LD_OWVAR 3
92510: PUSH
92511: LD_VAR 0 1
92515: DIFF
92516: PPUSH
92517: LD_VAR 0 1
92521: PPUSH
92522: CALL_OW 74
92526: PPUSH
92527: CALL_OW 115
// wait ( 0 0$20 ) ;
92531: LD_INT 700
92533: PPUSH
92534: CALL_OW 67
// SetSide ( un , your_side ) ;
92538: LD_VAR 0 1
92542: PPUSH
92543: LD_OWVAR 2
92547: PPUSH
92548: CALL_OW 235
// end ;
92552: PPOPN 2
92554: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
92555: LD_EXP 95
92559: PUSH
92560: LD_EXP 128
92564: AND
92565: IFFALSE 92671
92567: GO 92569
92569: DISABLE
92570: LD_INT 0
92572: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
92573: LD_ADDR_VAR 0 1
92577: PUSH
92578: LD_INT 22
92580: PUSH
92581: LD_OWVAR 2
92585: PUSH
92586: EMPTY
92587: LIST
92588: LIST
92589: PUSH
92590: LD_INT 2
92592: PUSH
92593: LD_INT 30
92595: PUSH
92596: LD_INT 0
92598: PUSH
92599: EMPTY
92600: LIST
92601: LIST
92602: PUSH
92603: LD_INT 30
92605: PUSH
92606: LD_INT 1
92608: PUSH
92609: EMPTY
92610: LIST
92611: LIST
92612: PUSH
92613: EMPTY
92614: LIST
92615: LIST
92616: LIST
92617: PUSH
92618: EMPTY
92619: LIST
92620: LIST
92621: PPUSH
92622: CALL_OW 69
92626: ST_TO_ADDR
// if not depot then
92627: LD_VAR 0 1
92631: NOT
92632: IFFALSE 92636
// exit ;
92634: GO 92671
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
92636: LD_VAR 0 1
92640: PUSH
92641: LD_INT 1
92643: ARRAY
92644: PPUSH
92645: CALL_OW 250
92649: PPUSH
92650: LD_VAR 0 1
92654: PUSH
92655: LD_INT 1
92657: ARRAY
92658: PPUSH
92659: CALL_OW 251
92663: PPUSH
92664: LD_INT 70
92666: PPUSH
92667: CALL_OW 495
// end ;
92671: PPOPN 1
92673: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
92674: LD_EXP 95
92678: PUSH
92679: LD_EXP 129
92683: AND
92684: IFFALSE 92895
92686: GO 92688
92688: DISABLE
92689: LD_INT 0
92691: PPUSH
92692: PPUSH
92693: PPUSH
92694: PPUSH
92695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
92696: LD_ADDR_VAR 0 5
92700: PUSH
92701: LD_INT 22
92703: PUSH
92704: LD_OWVAR 2
92708: PUSH
92709: EMPTY
92710: LIST
92711: LIST
92712: PUSH
92713: LD_INT 21
92715: PUSH
92716: LD_INT 1
92718: PUSH
92719: EMPTY
92720: LIST
92721: LIST
92722: PUSH
92723: EMPTY
92724: LIST
92725: LIST
92726: PPUSH
92727: CALL_OW 69
92731: ST_TO_ADDR
// if not tmp then
92732: LD_VAR 0 5
92736: NOT
92737: IFFALSE 92741
// exit ;
92739: GO 92895
// for i in tmp do
92741: LD_ADDR_VAR 0 1
92745: PUSH
92746: LD_VAR 0 5
92750: PUSH
92751: FOR_IN
92752: IFFALSE 92893
// begin d := rand ( 0 , 5 ) ;
92754: LD_ADDR_VAR 0 4
92758: PUSH
92759: LD_INT 0
92761: PPUSH
92762: LD_INT 5
92764: PPUSH
92765: CALL_OW 12
92769: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
92770: LD_ADDR_VAR 0 2
92774: PUSH
92775: LD_VAR 0 1
92779: PPUSH
92780: CALL_OW 250
92784: PPUSH
92785: LD_VAR 0 4
92789: PPUSH
92790: LD_INT 3
92792: PPUSH
92793: LD_INT 12
92795: PPUSH
92796: CALL_OW 12
92800: PPUSH
92801: CALL_OW 272
92805: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
92806: LD_ADDR_VAR 0 3
92810: PUSH
92811: LD_VAR 0 1
92815: PPUSH
92816: CALL_OW 251
92820: PPUSH
92821: LD_VAR 0 4
92825: PPUSH
92826: LD_INT 3
92828: PPUSH
92829: LD_INT 12
92831: PPUSH
92832: CALL_OW 12
92836: PPUSH
92837: CALL_OW 273
92841: ST_TO_ADDR
// if ValidHex ( x , y ) then
92842: LD_VAR 0 2
92846: PPUSH
92847: LD_VAR 0 3
92851: PPUSH
92852: CALL_OW 488
92856: IFFALSE 92891
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
92858: LD_VAR 0 1
92862: PPUSH
92863: LD_VAR 0 2
92867: PPUSH
92868: LD_VAR 0 3
92872: PPUSH
92873: LD_INT 3
92875: PPUSH
92876: LD_INT 6
92878: PPUSH
92879: CALL_OW 12
92883: PPUSH
92884: LD_INT 1
92886: PPUSH
92887: CALL_OW 483
// end ;
92891: GO 92751
92893: POP
92894: POP
// end ;
92895: PPOPN 5
92897: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
92898: LD_EXP 95
92902: PUSH
92903: LD_EXP 130
92907: AND
92908: IFFALSE 93002
92910: GO 92912
92912: DISABLE
92913: LD_INT 0
92915: PPUSH
92916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
92917: LD_ADDR_VAR 0 2
92921: PUSH
92922: LD_INT 22
92924: PUSH
92925: LD_OWVAR 2
92929: PUSH
92930: EMPTY
92931: LIST
92932: LIST
92933: PUSH
92934: LD_INT 32
92936: PUSH
92937: LD_INT 1
92939: PUSH
92940: EMPTY
92941: LIST
92942: LIST
92943: PUSH
92944: LD_INT 21
92946: PUSH
92947: LD_INT 2
92949: PUSH
92950: EMPTY
92951: LIST
92952: LIST
92953: PUSH
92954: EMPTY
92955: LIST
92956: LIST
92957: LIST
92958: PPUSH
92959: CALL_OW 69
92963: ST_TO_ADDR
// if not tmp then
92964: LD_VAR 0 2
92968: NOT
92969: IFFALSE 92973
// exit ;
92971: GO 93002
// for i in tmp do
92973: LD_ADDR_VAR 0 1
92977: PUSH
92978: LD_VAR 0 2
92982: PUSH
92983: FOR_IN
92984: IFFALSE 93000
// SetFuel ( i , 0 ) ;
92986: LD_VAR 0 1
92990: PPUSH
92991: LD_INT 0
92993: PPUSH
92994: CALL_OW 240
92998: GO 92983
93000: POP
93001: POP
// end ;
93002: PPOPN 2
93004: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
93005: LD_EXP 95
93009: PUSH
93010: LD_EXP 131
93014: AND
93015: IFFALSE 93081
93017: GO 93019
93019: DISABLE
93020: LD_INT 0
93022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
93023: LD_ADDR_VAR 0 1
93027: PUSH
93028: LD_INT 22
93030: PUSH
93031: LD_OWVAR 2
93035: PUSH
93036: EMPTY
93037: LIST
93038: LIST
93039: PUSH
93040: LD_INT 30
93042: PUSH
93043: LD_INT 29
93045: PUSH
93046: EMPTY
93047: LIST
93048: LIST
93049: PUSH
93050: EMPTY
93051: LIST
93052: LIST
93053: PPUSH
93054: CALL_OW 69
93058: ST_TO_ADDR
// if not tmp then
93059: LD_VAR 0 1
93063: NOT
93064: IFFALSE 93068
// exit ;
93066: GO 93081
// DestroyUnit ( tmp [ 1 ] ) ;
93068: LD_VAR 0 1
93072: PUSH
93073: LD_INT 1
93075: ARRAY
93076: PPUSH
93077: CALL_OW 65
// end ;
93081: PPOPN 1
93083: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
93084: LD_EXP 95
93088: PUSH
93089: LD_EXP 133
93093: AND
93094: IFFALSE 93223
93096: GO 93098
93098: DISABLE
93099: LD_INT 0
93101: PPUSH
// begin uc_side := 0 ;
93102: LD_ADDR_OWVAR 20
93106: PUSH
93107: LD_INT 0
93109: ST_TO_ADDR
// uc_nation := nation_arabian ;
93110: LD_ADDR_OWVAR 21
93114: PUSH
93115: LD_INT 2
93117: ST_TO_ADDR
// hc_gallery :=  ;
93118: LD_ADDR_OWVAR 33
93122: PUSH
93123: LD_STRING 
93125: ST_TO_ADDR
// hc_name :=  ;
93126: LD_ADDR_OWVAR 26
93130: PUSH
93131: LD_STRING 
93133: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
93134: LD_INT 1
93136: PPUSH
93137: LD_INT 11
93139: PPUSH
93140: LD_INT 10
93142: PPUSH
93143: CALL_OW 380
// un := CreateHuman ;
93147: LD_ADDR_VAR 0 1
93151: PUSH
93152: CALL_OW 44
93156: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93157: LD_VAR 0 1
93161: PPUSH
93162: LD_INT 1
93164: PPUSH
93165: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
93169: LD_INT 35
93171: PPUSH
93172: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
93176: LD_VAR 0 1
93180: PPUSH
93181: LD_INT 22
93183: PUSH
93184: LD_OWVAR 2
93188: PUSH
93189: EMPTY
93190: LIST
93191: LIST
93192: PPUSH
93193: CALL_OW 69
93197: PPUSH
93198: LD_VAR 0 1
93202: PPUSH
93203: CALL_OW 74
93207: PPUSH
93208: CALL_OW 115
// until IsDead ( un ) ;
93212: LD_VAR 0 1
93216: PPUSH
93217: CALL_OW 301
93221: IFFALSE 93169
// end ;
93223: PPOPN 1
93225: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
93226: LD_EXP 95
93230: PUSH
93231: LD_EXP 135
93235: AND
93236: IFFALSE 93248
93238: GO 93240
93240: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
93241: LD_STRING earthquake(getX(game), 0, 32)
93243: PPUSH
93244: CALL_OW 559
93248: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
93249: LD_EXP 95
93253: PUSH
93254: LD_EXP 136
93258: AND
93259: IFFALSE 93350
93261: GO 93263
93263: DISABLE
93264: LD_INT 0
93266: PPUSH
// begin enable ;
93267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
93268: LD_ADDR_VAR 0 1
93272: PUSH
93273: LD_INT 22
93275: PUSH
93276: LD_OWVAR 2
93280: PUSH
93281: EMPTY
93282: LIST
93283: LIST
93284: PUSH
93285: LD_INT 21
93287: PUSH
93288: LD_INT 2
93290: PUSH
93291: EMPTY
93292: LIST
93293: LIST
93294: PUSH
93295: LD_INT 33
93297: PUSH
93298: LD_INT 3
93300: PUSH
93301: EMPTY
93302: LIST
93303: LIST
93304: PUSH
93305: EMPTY
93306: LIST
93307: LIST
93308: LIST
93309: PPUSH
93310: CALL_OW 69
93314: ST_TO_ADDR
// if not tmp then
93315: LD_VAR 0 1
93319: NOT
93320: IFFALSE 93324
// exit ;
93322: GO 93350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
93324: LD_VAR 0 1
93328: PUSH
93329: LD_INT 1
93331: PPUSH
93332: LD_VAR 0 1
93336: PPUSH
93337: CALL_OW 12
93341: ARRAY
93342: PPUSH
93343: LD_INT 1
93345: PPUSH
93346: CALL_OW 234
// end ;
93350: PPOPN 1
93352: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
93353: LD_EXP 95
93357: PUSH
93358: LD_EXP 137
93362: AND
93363: IFFALSE 93504
93365: GO 93367
93367: DISABLE
93368: LD_INT 0
93370: PPUSH
93371: PPUSH
93372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93373: LD_ADDR_VAR 0 3
93377: PUSH
93378: LD_INT 22
93380: PUSH
93381: LD_OWVAR 2
93385: PUSH
93386: EMPTY
93387: LIST
93388: LIST
93389: PUSH
93390: LD_INT 25
93392: PUSH
93393: LD_INT 1
93395: PUSH
93396: EMPTY
93397: LIST
93398: LIST
93399: PUSH
93400: EMPTY
93401: LIST
93402: LIST
93403: PPUSH
93404: CALL_OW 69
93408: ST_TO_ADDR
// if not tmp then
93409: LD_VAR 0 3
93413: NOT
93414: IFFALSE 93418
// exit ;
93416: GO 93504
// un := tmp [ rand ( 1 , tmp ) ] ;
93418: LD_ADDR_VAR 0 2
93422: PUSH
93423: LD_VAR 0 3
93427: PUSH
93428: LD_INT 1
93430: PPUSH
93431: LD_VAR 0 3
93435: PPUSH
93436: CALL_OW 12
93440: ARRAY
93441: ST_TO_ADDR
// if Crawls ( un ) then
93442: LD_VAR 0 2
93446: PPUSH
93447: CALL_OW 318
93451: IFFALSE 93462
// ComWalk ( un ) ;
93453: LD_VAR 0 2
93457: PPUSH
93458: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
93462: LD_VAR 0 2
93466: PPUSH
93467: LD_INT 9
93469: PPUSH
93470: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
93474: LD_INT 28
93476: PPUSH
93477: LD_OWVAR 2
93481: PPUSH
93482: LD_INT 2
93484: PPUSH
93485: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
93489: LD_INT 29
93491: PPUSH
93492: LD_OWVAR 2
93496: PPUSH
93497: LD_INT 2
93499: PPUSH
93500: CALL_OW 322
// end ;
93504: PPOPN 3
93506: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
93507: LD_EXP 95
93511: PUSH
93512: LD_EXP 138
93516: AND
93517: IFFALSE 93628
93519: GO 93521
93521: DISABLE
93522: LD_INT 0
93524: PPUSH
93525: PPUSH
93526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93527: LD_ADDR_VAR 0 3
93531: PUSH
93532: LD_INT 22
93534: PUSH
93535: LD_OWVAR 2
93539: PUSH
93540: EMPTY
93541: LIST
93542: LIST
93543: PUSH
93544: LD_INT 25
93546: PUSH
93547: LD_INT 1
93549: PUSH
93550: EMPTY
93551: LIST
93552: LIST
93553: PUSH
93554: EMPTY
93555: LIST
93556: LIST
93557: PPUSH
93558: CALL_OW 69
93562: ST_TO_ADDR
// if not tmp then
93563: LD_VAR 0 3
93567: NOT
93568: IFFALSE 93572
// exit ;
93570: GO 93628
// un := tmp [ rand ( 1 , tmp ) ] ;
93572: LD_ADDR_VAR 0 2
93576: PUSH
93577: LD_VAR 0 3
93581: PUSH
93582: LD_INT 1
93584: PPUSH
93585: LD_VAR 0 3
93589: PPUSH
93590: CALL_OW 12
93594: ARRAY
93595: ST_TO_ADDR
// if Crawls ( un ) then
93596: LD_VAR 0 2
93600: PPUSH
93601: CALL_OW 318
93605: IFFALSE 93616
// ComWalk ( un ) ;
93607: LD_VAR 0 2
93611: PPUSH
93612: CALL_OW 138
// SetClass ( un , class_mortar ) ;
93616: LD_VAR 0 2
93620: PPUSH
93621: LD_INT 8
93623: PPUSH
93624: CALL_OW 336
// end ;
93628: PPOPN 3
93630: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
93631: LD_EXP 95
93635: PUSH
93636: LD_EXP 139
93640: AND
93641: IFFALSE 93785
93643: GO 93645
93645: DISABLE
93646: LD_INT 0
93648: PPUSH
93649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
93650: LD_ADDR_VAR 0 2
93654: PUSH
93655: LD_INT 22
93657: PUSH
93658: LD_OWVAR 2
93662: PUSH
93663: EMPTY
93664: LIST
93665: LIST
93666: PUSH
93667: LD_INT 21
93669: PUSH
93670: LD_INT 2
93672: PUSH
93673: EMPTY
93674: LIST
93675: LIST
93676: PUSH
93677: LD_INT 2
93679: PUSH
93680: LD_INT 34
93682: PUSH
93683: LD_INT 12
93685: PUSH
93686: EMPTY
93687: LIST
93688: LIST
93689: PUSH
93690: LD_INT 34
93692: PUSH
93693: LD_INT 51
93695: PUSH
93696: EMPTY
93697: LIST
93698: LIST
93699: PUSH
93700: LD_INT 34
93702: PUSH
93703: LD_INT 32
93705: PUSH
93706: EMPTY
93707: LIST
93708: LIST
93709: PUSH
93710: EMPTY
93711: LIST
93712: LIST
93713: LIST
93714: LIST
93715: PUSH
93716: EMPTY
93717: LIST
93718: LIST
93719: LIST
93720: PPUSH
93721: CALL_OW 69
93725: ST_TO_ADDR
// if not tmp then
93726: LD_VAR 0 2
93730: NOT
93731: IFFALSE 93735
// exit ;
93733: GO 93785
// for i in tmp do
93735: LD_ADDR_VAR 0 1
93739: PUSH
93740: LD_VAR 0 2
93744: PUSH
93745: FOR_IN
93746: IFFALSE 93783
// if GetCargo ( i , mat_artifact ) = 0 then
93748: LD_VAR 0 1
93752: PPUSH
93753: LD_INT 4
93755: PPUSH
93756: CALL_OW 289
93760: PUSH
93761: LD_INT 0
93763: EQUAL
93764: IFFALSE 93781
// SetCargo ( i , mat_siberit , 100 ) ;
93766: LD_VAR 0 1
93770: PPUSH
93771: LD_INT 3
93773: PPUSH
93774: LD_INT 100
93776: PPUSH
93777: CALL_OW 290
93781: GO 93745
93783: POP
93784: POP
// end ;
93785: PPOPN 2
93787: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
93788: LD_EXP 95
93792: PUSH
93793: LD_EXP 140
93797: AND
93798: IFFALSE 93951
93800: GO 93802
93802: DISABLE
93803: LD_INT 0
93805: PPUSH
93806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
93807: LD_ADDR_VAR 0 2
93811: PUSH
93812: LD_INT 22
93814: PUSH
93815: LD_OWVAR 2
93819: PUSH
93820: EMPTY
93821: LIST
93822: LIST
93823: PPUSH
93824: CALL_OW 69
93828: ST_TO_ADDR
// if not tmp then
93829: LD_VAR 0 2
93833: NOT
93834: IFFALSE 93838
// exit ;
93836: GO 93951
// for i := 1 to 2 do
93838: LD_ADDR_VAR 0 1
93842: PUSH
93843: DOUBLE
93844: LD_INT 1
93846: DEC
93847: ST_TO_ADDR
93848: LD_INT 2
93850: PUSH
93851: FOR_TO
93852: IFFALSE 93949
// begin uc_side := your_side ;
93854: LD_ADDR_OWVAR 20
93858: PUSH
93859: LD_OWVAR 2
93863: ST_TO_ADDR
// uc_nation := nation_american ;
93864: LD_ADDR_OWVAR 21
93868: PUSH
93869: LD_INT 1
93871: ST_TO_ADDR
// vc_chassis := us_morphling ;
93872: LD_ADDR_OWVAR 37
93876: PUSH
93877: LD_INT 5
93879: ST_TO_ADDR
// vc_engine := engine_siberite ;
93880: LD_ADDR_OWVAR 39
93884: PUSH
93885: LD_INT 3
93887: ST_TO_ADDR
// vc_control := control_computer ;
93888: LD_ADDR_OWVAR 38
93892: PUSH
93893: LD_INT 3
93895: ST_TO_ADDR
// vc_weapon := us_double_laser ;
93896: LD_ADDR_OWVAR 40
93900: PUSH
93901: LD_INT 10
93903: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
93904: CALL_OW 45
93908: PPUSH
93909: LD_VAR 0 2
93913: PUSH
93914: LD_INT 1
93916: ARRAY
93917: PPUSH
93918: CALL_OW 250
93922: PPUSH
93923: LD_VAR 0 2
93927: PUSH
93928: LD_INT 1
93930: ARRAY
93931: PPUSH
93932: CALL_OW 251
93936: PPUSH
93937: LD_INT 12
93939: PPUSH
93940: LD_INT 1
93942: PPUSH
93943: CALL_OW 50
// end ;
93947: GO 93851
93949: POP
93950: POP
// end ;
93951: PPOPN 2
93953: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
93954: LD_EXP 95
93958: PUSH
93959: LD_EXP 141
93963: AND
93964: IFFALSE 94186
93966: GO 93968
93968: DISABLE
93969: LD_INT 0
93971: PPUSH
93972: PPUSH
93973: PPUSH
93974: PPUSH
93975: PPUSH
93976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93977: LD_ADDR_VAR 0 6
93981: PUSH
93982: LD_INT 22
93984: PUSH
93985: LD_OWVAR 2
93989: PUSH
93990: EMPTY
93991: LIST
93992: LIST
93993: PUSH
93994: LD_INT 21
93996: PUSH
93997: LD_INT 1
93999: PUSH
94000: EMPTY
94001: LIST
94002: LIST
94003: PUSH
94004: LD_INT 3
94006: PUSH
94007: LD_INT 23
94009: PUSH
94010: LD_INT 0
94012: PUSH
94013: EMPTY
94014: LIST
94015: LIST
94016: PUSH
94017: EMPTY
94018: LIST
94019: LIST
94020: PUSH
94021: EMPTY
94022: LIST
94023: LIST
94024: LIST
94025: PPUSH
94026: CALL_OW 69
94030: ST_TO_ADDR
// if not tmp then
94031: LD_VAR 0 6
94035: NOT
94036: IFFALSE 94040
// exit ;
94038: GO 94186
// s1 := rand ( 1 , 4 ) ;
94040: LD_ADDR_VAR 0 2
94044: PUSH
94045: LD_INT 1
94047: PPUSH
94048: LD_INT 4
94050: PPUSH
94051: CALL_OW 12
94055: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
94056: LD_ADDR_VAR 0 4
94060: PUSH
94061: LD_VAR 0 6
94065: PUSH
94066: LD_INT 1
94068: ARRAY
94069: PPUSH
94070: LD_VAR 0 2
94074: PPUSH
94075: CALL_OW 259
94079: ST_TO_ADDR
// if s1 = 1 then
94080: LD_VAR 0 2
94084: PUSH
94085: LD_INT 1
94087: EQUAL
94088: IFFALSE 94108
// s2 := rand ( 2 , 4 ) else
94090: LD_ADDR_VAR 0 3
94094: PUSH
94095: LD_INT 2
94097: PPUSH
94098: LD_INT 4
94100: PPUSH
94101: CALL_OW 12
94105: ST_TO_ADDR
94106: GO 94116
// s2 := 1 ;
94108: LD_ADDR_VAR 0 3
94112: PUSH
94113: LD_INT 1
94115: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
94116: LD_ADDR_VAR 0 5
94120: PUSH
94121: LD_VAR 0 6
94125: PUSH
94126: LD_INT 1
94128: ARRAY
94129: PPUSH
94130: LD_VAR 0 3
94134: PPUSH
94135: CALL_OW 259
94139: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
94140: LD_VAR 0 6
94144: PUSH
94145: LD_INT 1
94147: ARRAY
94148: PPUSH
94149: LD_VAR 0 2
94153: PPUSH
94154: LD_VAR 0 5
94158: PPUSH
94159: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
94163: LD_VAR 0 6
94167: PUSH
94168: LD_INT 1
94170: ARRAY
94171: PPUSH
94172: LD_VAR 0 3
94176: PPUSH
94177: LD_VAR 0 4
94181: PPUSH
94182: CALL_OW 237
// end ;
94186: PPOPN 6
94188: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
94189: LD_EXP 95
94193: PUSH
94194: LD_EXP 142
94198: AND
94199: IFFALSE 94278
94201: GO 94203
94203: DISABLE
94204: LD_INT 0
94206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
94207: LD_ADDR_VAR 0 1
94211: PUSH
94212: LD_INT 22
94214: PUSH
94215: LD_OWVAR 2
94219: PUSH
94220: EMPTY
94221: LIST
94222: LIST
94223: PUSH
94224: LD_INT 30
94226: PUSH
94227: LD_INT 3
94229: PUSH
94230: EMPTY
94231: LIST
94232: LIST
94233: PUSH
94234: EMPTY
94235: LIST
94236: LIST
94237: PPUSH
94238: CALL_OW 69
94242: ST_TO_ADDR
// if not tmp then
94243: LD_VAR 0 1
94247: NOT
94248: IFFALSE 94252
// exit ;
94250: GO 94278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
94252: LD_VAR 0 1
94256: PUSH
94257: LD_INT 1
94259: PPUSH
94260: LD_VAR 0 1
94264: PPUSH
94265: CALL_OW 12
94269: ARRAY
94270: PPUSH
94271: LD_INT 1
94273: PPUSH
94274: CALL_OW 234
// end ;
94278: PPOPN 1
94280: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
94281: LD_EXP 95
94285: PUSH
94286: LD_EXP 143
94290: AND
94291: IFFALSE 94403
94293: GO 94295
94295: DISABLE
94296: LD_INT 0
94298: PPUSH
94299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
94300: LD_ADDR_VAR 0 2
94304: PUSH
94305: LD_INT 22
94307: PUSH
94308: LD_OWVAR 2
94312: PUSH
94313: EMPTY
94314: LIST
94315: LIST
94316: PUSH
94317: LD_INT 2
94319: PUSH
94320: LD_INT 30
94322: PUSH
94323: LD_INT 27
94325: PUSH
94326: EMPTY
94327: LIST
94328: LIST
94329: PUSH
94330: LD_INT 30
94332: PUSH
94333: LD_INT 26
94335: PUSH
94336: EMPTY
94337: LIST
94338: LIST
94339: PUSH
94340: LD_INT 30
94342: PUSH
94343: LD_INT 28
94345: PUSH
94346: EMPTY
94347: LIST
94348: LIST
94349: PUSH
94350: EMPTY
94351: LIST
94352: LIST
94353: LIST
94354: LIST
94355: PUSH
94356: EMPTY
94357: LIST
94358: LIST
94359: PPUSH
94360: CALL_OW 69
94364: ST_TO_ADDR
// if not tmp then
94365: LD_VAR 0 2
94369: NOT
94370: IFFALSE 94374
// exit ;
94372: GO 94403
// for i in tmp do
94374: LD_ADDR_VAR 0 1
94378: PUSH
94379: LD_VAR 0 2
94383: PUSH
94384: FOR_IN
94385: IFFALSE 94401
// SetLives ( i , 1 ) ;
94387: LD_VAR 0 1
94391: PPUSH
94392: LD_INT 1
94394: PPUSH
94395: CALL_OW 234
94399: GO 94384
94401: POP
94402: POP
// end ;
94403: PPOPN 2
94405: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
94406: LD_EXP 95
94410: PUSH
94411: LD_EXP 144
94415: AND
94416: IFFALSE 94690
94418: GO 94420
94420: DISABLE
94421: LD_INT 0
94423: PPUSH
94424: PPUSH
94425: PPUSH
// begin i := rand ( 1 , 7 ) ;
94426: LD_ADDR_VAR 0 1
94430: PUSH
94431: LD_INT 1
94433: PPUSH
94434: LD_INT 7
94436: PPUSH
94437: CALL_OW 12
94441: ST_TO_ADDR
// case i of 1 :
94442: LD_VAR 0 1
94446: PUSH
94447: LD_INT 1
94449: DOUBLE
94450: EQUAL
94451: IFTRUE 94455
94453: GO 94465
94455: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
94456: LD_STRING earthquake(getX(game), 0, 32)
94458: PPUSH
94459: CALL_OW 559
94463: GO 94690
94465: LD_INT 2
94467: DOUBLE
94468: EQUAL
94469: IFTRUE 94473
94471: GO 94487
94473: POP
// begin ToLua ( displayStucuk(); ) ;
94474: LD_STRING displayStucuk();
94476: PPUSH
94477: CALL_OW 559
// ResetFog ;
94481: CALL_OW 335
// end ; 3 :
94485: GO 94690
94487: LD_INT 3
94489: DOUBLE
94490: EQUAL
94491: IFTRUE 94495
94493: GO 94599
94495: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94496: LD_ADDR_VAR 0 2
94500: PUSH
94501: LD_INT 22
94503: PUSH
94504: LD_OWVAR 2
94508: PUSH
94509: EMPTY
94510: LIST
94511: LIST
94512: PUSH
94513: LD_INT 25
94515: PUSH
94516: LD_INT 1
94518: PUSH
94519: EMPTY
94520: LIST
94521: LIST
94522: PUSH
94523: EMPTY
94524: LIST
94525: LIST
94526: PPUSH
94527: CALL_OW 69
94531: ST_TO_ADDR
// if not tmp then
94532: LD_VAR 0 2
94536: NOT
94537: IFFALSE 94541
// exit ;
94539: GO 94690
// un := tmp [ rand ( 1 , tmp ) ] ;
94541: LD_ADDR_VAR 0 3
94545: PUSH
94546: LD_VAR 0 2
94550: PUSH
94551: LD_INT 1
94553: PPUSH
94554: LD_VAR 0 2
94558: PPUSH
94559: CALL_OW 12
94563: ARRAY
94564: ST_TO_ADDR
// if Crawls ( un ) then
94565: LD_VAR 0 3
94569: PPUSH
94570: CALL_OW 318
94574: IFFALSE 94585
// ComWalk ( un ) ;
94576: LD_VAR 0 3
94580: PPUSH
94581: CALL_OW 138
// SetClass ( un , class_mortar ) ;
94585: LD_VAR 0 3
94589: PPUSH
94590: LD_INT 8
94592: PPUSH
94593: CALL_OW 336
// end ; 4 :
94597: GO 94690
94599: LD_INT 4
94601: DOUBLE
94602: EQUAL
94603: IFTRUE 94607
94605: GO 94668
94607: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94608: LD_ADDR_VAR 0 2
94612: PUSH
94613: LD_INT 22
94615: PUSH
94616: LD_OWVAR 2
94620: PUSH
94621: EMPTY
94622: LIST
94623: LIST
94624: PUSH
94625: LD_INT 30
94627: PUSH
94628: LD_INT 29
94630: PUSH
94631: EMPTY
94632: LIST
94633: LIST
94634: PUSH
94635: EMPTY
94636: LIST
94637: LIST
94638: PPUSH
94639: CALL_OW 69
94643: ST_TO_ADDR
// if not tmp then
94644: LD_VAR 0 2
94648: NOT
94649: IFFALSE 94653
// exit ;
94651: GO 94690
// DestroyUnit ( tmp [ 1 ] ) ;
94653: LD_VAR 0 2
94657: PUSH
94658: LD_INT 1
94660: ARRAY
94661: PPUSH
94662: CALL_OW 65
// end ; 5 .. 7 :
94666: GO 94690
94668: LD_INT 5
94670: DOUBLE
94671: GREATEREQUAL
94672: IFFALSE 94680
94674: LD_INT 7
94676: DOUBLE
94677: LESSEQUAL
94678: IFTRUE 94682
94680: GO 94689
94682: POP
// StreamSibBomb ; end ;
94683: CALL 90970 0 0
94687: GO 94690
94689: POP
// end ;
94690: PPOPN 3
94692: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
94693: LD_EXP 95
94697: PUSH
94698: LD_EXP 145
94702: AND
94703: IFFALSE 94859
94705: GO 94707
94707: DISABLE
94708: LD_INT 0
94710: PPUSH
94711: PPUSH
94712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
94713: LD_ADDR_VAR 0 2
94717: PUSH
94718: LD_INT 81
94720: PUSH
94721: LD_OWVAR 2
94725: PUSH
94726: EMPTY
94727: LIST
94728: LIST
94729: PUSH
94730: LD_INT 2
94732: PUSH
94733: LD_INT 21
94735: PUSH
94736: LD_INT 1
94738: PUSH
94739: EMPTY
94740: LIST
94741: LIST
94742: PUSH
94743: LD_INT 21
94745: PUSH
94746: LD_INT 2
94748: PUSH
94749: EMPTY
94750: LIST
94751: LIST
94752: PUSH
94753: EMPTY
94754: LIST
94755: LIST
94756: LIST
94757: PUSH
94758: EMPTY
94759: LIST
94760: LIST
94761: PPUSH
94762: CALL_OW 69
94766: ST_TO_ADDR
// if not tmp then
94767: LD_VAR 0 2
94771: NOT
94772: IFFALSE 94776
// exit ;
94774: GO 94859
// p := 0 ;
94776: LD_ADDR_VAR 0 3
94780: PUSH
94781: LD_INT 0
94783: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
94784: LD_INT 35
94786: PPUSH
94787: CALL_OW 67
// p := p + 1 ;
94791: LD_ADDR_VAR 0 3
94795: PUSH
94796: LD_VAR 0 3
94800: PUSH
94801: LD_INT 1
94803: PLUS
94804: ST_TO_ADDR
// for i in tmp do
94805: LD_ADDR_VAR 0 1
94809: PUSH
94810: LD_VAR 0 2
94814: PUSH
94815: FOR_IN
94816: IFFALSE 94847
// if GetLives ( i ) < 1000 then
94818: LD_VAR 0 1
94822: PPUSH
94823: CALL_OW 256
94827: PUSH
94828: LD_INT 1000
94830: LESS
94831: IFFALSE 94845
// SetLives ( i , 1000 ) ;
94833: LD_VAR 0 1
94837: PPUSH
94838: LD_INT 1000
94840: PPUSH
94841: CALL_OW 234
94845: GO 94815
94847: POP
94848: POP
// until p > 20 ;
94849: LD_VAR 0 3
94853: PUSH
94854: LD_INT 20
94856: GREATER
94857: IFFALSE 94784
// end ;
94859: PPOPN 3
94861: END
// every 0 0$1 trigger StreamModeActive and sTime do
94862: LD_EXP 95
94866: PUSH
94867: LD_EXP 146
94871: AND
94872: IFFALSE 94907
94874: GO 94876
94876: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
94877: LD_INT 28
94879: PPUSH
94880: LD_OWVAR 2
94884: PPUSH
94885: LD_INT 2
94887: PPUSH
94888: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
94892: LD_INT 30
94894: PPUSH
94895: LD_OWVAR 2
94899: PPUSH
94900: LD_INT 2
94902: PPUSH
94903: CALL_OW 322
// end ;
94907: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
94908: LD_EXP 95
94912: PUSH
94913: LD_EXP 147
94917: AND
94918: IFFALSE 95039
94920: GO 94922
94922: DISABLE
94923: LD_INT 0
94925: PPUSH
94926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
94927: LD_ADDR_VAR 0 2
94931: PUSH
94932: LD_INT 22
94934: PUSH
94935: LD_OWVAR 2
94939: PUSH
94940: EMPTY
94941: LIST
94942: LIST
94943: PUSH
94944: LD_INT 21
94946: PUSH
94947: LD_INT 1
94949: PUSH
94950: EMPTY
94951: LIST
94952: LIST
94953: PUSH
94954: LD_INT 3
94956: PUSH
94957: LD_INT 23
94959: PUSH
94960: LD_INT 0
94962: PUSH
94963: EMPTY
94964: LIST
94965: LIST
94966: PUSH
94967: EMPTY
94968: LIST
94969: LIST
94970: PUSH
94971: EMPTY
94972: LIST
94973: LIST
94974: LIST
94975: PPUSH
94976: CALL_OW 69
94980: ST_TO_ADDR
// if not tmp then
94981: LD_VAR 0 2
94985: NOT
94986: IFFALSE 94990
// exit ;
94988: GO 95039
// for i in tmp do
94990: LD_ADDR_VAR 0 1
94994: PUSH
94995: LD_VAR 0 2
94999: PUSH
95000: FOR_IN
95001: IFFALSE 95037
// begin if Crawls ( i ) then
95003: LD_VAR 0 1
95007: PPUSH
95008: CALL_OW 318
95012: IFFALSE 95023
// ComWalk ( i ) ;
95014: LD_VAR 0 1
95018: PPUSH
95019: CALL_OW 138
// SetClass ( i , 2 ) ;
95023: LD_VAR 0 1
95027: PPUSH
95028: LD_INT 2
95030: PPUSH
95031: CALL_OW 336
// end ;
95035: GO 95000
95037: POP
95038: POP
// end ;
95039: PPOPN 2
95041: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
95042: LD_EXP 95
95046: PUSH
95047: LD_EXP 148
95051: AND
95052: IFFALSE 95333
95054: GO 95056
95056: DISABLE
95057: LD_INT 0
95059: PPUSH
95060: PPUSH
95061: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
95062: LD_OWVAR 2
95066: PPUSH
95067: LD_INT 9
95069: PPUSH
95070: LD_INT 1
95072: PPUSH
95073: LD_INT 1
95075: PPUSH
95076: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
95080: LD_INT 9
95082: PPUSH
95083: LD_OWVAR 2
95087: PPUSH
95088: CALL_OW 343
// uc_side := 9 ;
95092: LD_ADDR_OWVAR 20
95096: PUSH
95097: LD_INT 9
95099: ST_TO_ADDR
// uc_nation := 2 ;
95100: LD_ADDR_OWVAR 21
95104: PUSH
95105: LD_INT 2
95107: ST_TO_ADDR
// hc_name := Dark Warrior ;
95108: LD_ADDR_OWVAR 26
95112: PUSH
95113: LD_STRING Dark Warrior
95115: ST_TO_ADDR
// hc_gallery :=  ;
95116: LD_ADDR_OWVAR 33
95120: PUSH
95121: LD_STRING 
95123: ST_TO_ADDR
// hc_noskilllimit := true ;
95124: LD_ADDR_OWVAR 76
95128: PUSH
95129: LD_INT 1
95131: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
95132: LD_ADDR_OWVAR 31
95136: PUSH
95137: LD_INT 30
95139: PUSH
95140: LD_INT 30
95142: PUSH
95143: LD_INT 30
95145: PUSH
95146: LD_INT 30
95148: PUSH
95149: EMPTY
95150: LIST
95151: LIST
95152: LIST
95153: LIST
95154: ST_TO_ADDR
// un := CreateHuman ;
95155: LD_ADDR_VAR 0 3
95159: PUSH
95160: CALL_OW 44
95164: ST_TO_ADDR
// hc_noskilllimit := false ;
95165: LD_ADDR_OWVAR 76
95169: PUSH
95170: LD_INT 0
95172: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
95173: LD_VAR 0 3
95177: PPUSH
95178: LD_INT 1
95180: PPUSH
95181: CALL_OW 51
// p := 0 ;
95185: LD_ADDR_VAR 0 2
95189: PUSH
95190: LD_INT 0
95192: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
95193: LD_INT 35
95195: PPUSH
95196: CALL_OW 67
// p := p + 1 ;
95200: LD_ADDR_VAR 0 2
95204: PUSH
95205: LD_VAR 0 2
95209: PUSH
95210: LD_INT 1
95212: PLUS
95213: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
95214: LD_VAR 0 3
95218: PPUSH
95219: CALL_OW 256
95223: PUSH
95224: LD_INT 1000
95226: LESS
95227: IFFALSE 95241
// SetLives ( un , 1000 ) ;
95229: LD_VAR 0 3
95233: PPUSH
95234: LD_INT 1000
95236: PPUSH
95237: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
95241: LD_VAR 0 3
95245: PPUSH
95246: LD_INT 81
95248: PUSH
95249: LD_OWVAR 2
95253: PUSH
95254: EMPTY
95255: LIST
95256: LIST
95257: PUSH
95258: LD_INT 91
95260: PUSH
95261: LD_VAR 0 3
95265: PUSH
95266: LD_INT 30
95268: PUSH
95269: EMPTY
95270: LIST
95271: LIST
95272: LIST
95273: PUSH
95274: EMPTY
95275: LIST
95276: LIST
95277: PPUSH
95278: CALL_OW 69
95282: PPUSH
95283: LD_VAR 0 3
95287: PPUSH
95288: CALL_OW 74
95292: PPUSH
95293: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
95297: LD_VAR 0 2
95301: PUSH
95302: LD_INT 60
95304: GREATER
95305: PUSH
95306: LD_VAR 0 3
95310: PPUSH
95311: CALL_OW 301
95315: OR
95316: IFFALSE 95193
// if un then
95318: LD_VAR 0 3
95322: IFFALSE 95333
// RemoveUnit ( un ) ;
95324: LD_VAR 0 3
95328: PPUSH
95329: CALL_OW 64
// end ; end_of_file
95333: PPOPN 3
95335: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
95336: LD_INT 0
95338: PPUSH
95339: PPUSH
95340: PPUSH
95341: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
95342: LD_VAR 0 1
95346: PPUSH
95347: CALL_OW 264
95351: PUSH
95352: LD_EXP 49
95356: EQUAL
95357: IFFALSE 95429
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
95359: LD_INT 68
95361: PPUSH
95362: LD_VAR 0 1
95366: PPUSH
95367: CALL_OW 255
95371: PPUSH
95372: CALL_OW 321
95376: PUSH
95377: LD_INT 2
95379: EQUAL
95380: IFFALSE 95392
// eff := 70 else
95382: LD_ADDR_VAR 0 4
95386: PUSH
95387: LD_INT 70
95389: ST_TO_ADDR
95390: GO 95400
// eff := 30 ;
95392: LD_ADDR_VAR 0 4
95396: PUSH
95397: LD_INT 30
95399: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
95400: LD_VAR 0 1
95404: PPUSH
95405: CALL_OW 250
95409: PPUSH
95410: LD_VAR 0 1
95414: PPUSH
95415: CALL_OW 251
95419: PPUSH
95420: LD_VAR 0 4
95424: PPUSH
95425: CALL_OW 495
// end ; end ;
95429: LD_VAR 0 2
95433: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
95434: LD_INT 0
95436: PPUSH
// end ;
95437: LD_VAR 0 4
95441: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
95442: LD_INT 0
95444: PPUSH
95445: PPUSH
95446: PPUSH
95447: PPUSH
95448: PPUSH
95449: PPUSH
// if cmd = 124 then
95450: LD_VAR 0 1
95454: PUSH
95455: LD_INT 124
95457: EQUAL
95458: IFFALSE 95664
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
95460: LD_ADDR_VAR 0 5
95464: PUSH
95465: LD_INT 2
95467: PUSH
95468: LD_INT 34
95470: PUSH
95471: LD_INT 53
95473: PUSH
95474: EMPTY
95475: LIST
95476: LIST
95477: PUSH
95478: LD_INT 34
95480: PUSH
95481: LD_INT 14
95483: PUSH
95484: EMPTY
95485: LIST
95486: LIST
95487: PUSH
95488: EMPTY
95489: LIST
95490: LIST
95491: LIST
95492: PPUSH
95493: CALL_OW 69
95497: ST_TO_ADDR
// if not tmp then
95498: LD_VAR 0 5
95502: NOT
95503: IFFALSE 95507
// exit ;
95505: GO 95664
// for i in tmp do
95507: LD_ADDR_VAR 0 3
95511: PUSH
95512: LD_VAR 0 5
95516: PUSH
95517: FOR_IN
95518: IFFALSE 95662
// begin taskList := GetTaskList ( i ) ;
95520: LD_ADDR_VAR 0 6
95524: PUSH
95525: LD_VAR 0 3
95529: PPUSH
95530: CALL_OW 437
95534: ST_TO_ADDR
// if not taskList then
95535: LD_VAR 0 6
95539: NOT
95540: IFFALSE 95544
// continue ;
95542: GO 95517
// for j = 1 to taskList do
95544: LD_ADDR_VAR 0 4
95548: PUSH
95549: DOUBLE
95550: LD_INT 1
95552: DEC
95553: ST_TO_ADDR
95554: LD_VAR 0 6
95558: PUSH
95559: FOR_TO
95560: IFFALSE 95658
// if taskList [ j ] [ 1 ] = | then
95562: LD_VAR 0 6
95566: PUSH
95567: LD_VAR 0 4
95571: ARRAY
95572: PUSH
95573: LD_INT 1
95575: ARRAY
95576: PUSH
95577: LD_STRING |
95579: EQUAL
95580: IFFALSE 95656
// begin _taskList := Delete ( taskList , 1 ) ;
95582: LD_ADDR_VAR 0 7
95586: PUSH
95587: LD_VAR 0 6
95591: PPUSH
95592: LD_INT 1
95594: PPUSH
95595: CALL_OW 3
95599: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
95600: LD_VAR 0 3
95604: PPUSH
95605: LD_VAR 0 7
95609: PPUSH
95610: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
95614: LD_VAR 0 3
95618: PPUSH
95619: LD_VAR 0 6
95623: PUSH
95624: LD_VAR 0 4
95628: ARRAY
95629: PUSH
95630: LD_INT 2
95632: ARRAY
95633: PPUSH
95634: LD_VAR 0 6
95638: PUSH
95639: LD_VAR 0 4
95643: ARRAY
95644: PUSH
95645: LD_INT 3
95647: ARRAY
95648: PPUSH
95649: LD_INT 8
95651: PPUSH
95652: CALL 95669 0 4
// end ;
95656: GO 95559
95658: POP
95659: POP
// end ;
95660: GO 95517
95662: POP
95663: POP
// end ; end ;
95664: LD_VAR 0 2
95668: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
95669: LD_INT 0
95671: PPUSH
95672: PPUSH
95673: PPUSH
95674: PPUSH
95675: PPUSH
95676: PPUSH
95677: PPUSH
95678: PPUSH
95679: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
95680: LD_VAR 0 1
95684: NOT
95685: PUSH
95686: LD_VAR 0 2
95690: PPUSH
95691: LD_VAR 0 3
95695: PPUSH
95696: CALL_OW 488
95700: NOT
95701: OR
95702: PUSH
95703: LD_VAR 0 4
95707: NOT
95708: OR
95709: IFFALSE 95713
// exit ;
95711: GO 96053
// list := [ ] ;
95713: LD_ADDR_VAR 0 13
95717: PUSH
95718: EMPTY
95719: ST_TO_ADDR
// if x - r < 0 then
95720: LD_VAR 0 2
95724: PUSH
95725: LD_VAR 0 4
95729: MINUS
95730: PUSH
95731: LD_INT 0
95733: LESS
95734: IFFALSE 95746
// min_x := 0 else
95736: LD_ADDR_VAR 0 7
95740: PUSH
95741: LD_INT 0
95743: ST_TO_ADDR
95744: GO 95762
// min_x := x - r ;
95746: LD_ADDR_VAR 0 7
95750: PUSH
95751: LD_VAR 0 2
95755: PUSH
95756: LD_VAR 0 4
95760: MINUS
95761: ST_TO_ADDR
// if y - r < 0 then
95762: LD_VAR 0 3
95766: PUSH
95767: LD_VAR 0 4
95771: MINUS
95772: PUSH
95773: LD_INT 0
95775: LESS
95776: IFFALSE 95788
// min_y := 0 else
95778: LD_ADDR_VAR 0 8
95782: PUSH
95783: LD_INT 0
95785: ST_TO_ADDR
95786: GO 95804
// min_y := y - r ;
95788: LD_ADDR_VAR 0 8
95792: PUSH
95793: LD_VAR 0 3
95797: PUSH
95798: LD_VAR 0 4
95802: MINUS
95803: ST_TO_ADDR
// max_x := x + r ;
95804: LD_ADDR_VAR 0 9
95808: PUSH
95809: LD_VAR 0 2
95813: PUSH
95814: LD_VAR 0 4
95818: PLUS
95819: ST_TO_ADDR
// max_y := y + r ;
95820: LD_ADDR_VAR 0 10
95824: PUSH
95825: LD_VAR 0 3
95829: PUSH
95830: LD_VAR 0 4
95834: PLUS
95835: ST_TO_ADDR
// for _x = min_x to max_x do
95836: LD_ADDR_VAR 0 11
95840: PUSH
95841: DOUBLE
95842: LD_VAR 0 7
95846: DEC
95847: ST_TO_ADDR
95848: LD_VAR 0 9
95852: PUSH
95853: FOR_TO
95854: IFFALSE 95971
// for _y = min_y to max_y do
95856: LD_ADDR_VAR 0 12
95860: PUSH
95861: DOUBLE
95862: LD_VAR 0 8
95866: DEC
95867: ST_TO_ADDR
95868: LD_VAR 0 10
95872: PUSH
95873: FOR_TO
95874: IFFALSE 95967
// begin if not ValidHex ( _x , _y ) then
95876: LD_VAR 0 11
95880: PPUSH
95881: LD_VAR 0 12
95885: PPUSH
95886: CALL_OW 488
95890: NOT
95891: IFFALSE 95895
// continue ;
95893: GO 95873
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
95895: LD_VAR 0 11
95899: PPUSH
95900: LD_VAR 0 12
95904: PPUSH
95905: CALL_OW 351
95909: PUSH
95910: LD_VAR 0 11
95914: PPUSH
95915: LD_VAR 0 12
95919: PPUSH
95920: CALL_OW 554
95924: AND
95925: IFFALSE 95965
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
95927: LD_ADDR_VAR 0 13
95931: PUSH
95932: LD_VAR 0 13
95936: PPUSH
95937: LD_VAR 0 13
95941: PUSH
95942: LD_INT 1
95944: PLUS
95945: PPUSH
95946: LD_VAR 0 11
95950: PUSH
95951: LD_VAR 0 12
95955: PUSH
95956: EMPTY
95957: LIST
95958: LIST
95959: PPUSH
95960: CALL_OW 2
95964: ST_TO_ADDR
// end ;
95965: GO 95873
95967: POP
95968: POP
95969: GO 95853
95971: POP
95972: POP
// if not list then
95973: LD_VAR 0 13
95977: NOT
95978: IFFALSE 95982
// exit ;
95980: GO 96053
// for i in list do
95982: LD_ADDR_VAR 0 6
95986: PUSH
95987: LD_VAR 0 13
95991: PUSH
95992: FOR_IN
95993: IFFALSE 96051
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
95995: LD_VAR 0 1
95999: PPUSH
96000: LD_STRING M
96002: PUSH
96003: LD_VAR 0 6
96007: PUSH
96008: LD_INT 1
96010: ARRAY
96011: PUSH
96012: LD_VAR 0 6
96016: PUSH
96017: LD_INT 2
96019: ARRAY
96020: PUSH
96021: LD_INT 0
96023: PUSH
96024: LD_INT 0
96026: PUSH
96027: LD_INT 0
96029: PUSH
96030: LD_INT 0
96032: PUSH
96033: EMPTY
96034: LIST
96035: LIST
96036: LIST
96037: LIST
96038: LIST
96039: LIST
96040: LIST
96041: PUSH
96042: EMPTY
96043: LIST
96044: PPUSH
96045: CALL_OW 447
96049: GO 95992
96051: POP
96052: POP
// end ;
96053: LD_VAR 0 5
96057: RET
