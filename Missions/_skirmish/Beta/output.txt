// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5536 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2699 0 0
// PrepareBeta ;
 105: CALL 3088 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_INT 40
 273: PPUSH
 274: LD_INT 37
 276: PPUSH
 277: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 281: LD_EXP 11
 285: PPUSH
 286: LD_EXP 9
 290: PPUSH
 291: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 295: LD_EXP 10
 299: PPUSH
 300: LD_INT 50
 302: PPUSH
 303: LD_INT 42
 305: PPUSH
 306: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 310: LD_INT 35
 312: PPUSH
 313: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 317: LD_EXP 9
 321: PPUSH
 322: LD_EXP 10
 326: PPUSH
 327: CALL_OW 296
 331: PUSH
 332: LD_INT 6
 334: LESS
 335: IFFALSE 310
// ComTurnUnit ( Brighton , Palmer ) ;
 337: LD_EXP 9
 341: PPUSH
 342: LD_EXP 10
 346: PPUSH
 347: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 351: LD_EXP 10
 355: PPUSH
 356: LD_EXP 9
 360: PPUSH
 361: CALL_OW 119
// Say ( Palmer , DPalmer-1 ) ;
 365: LD_EXP 10
 369: PPUSH
 370: LD_STRING DPalmer-1
 372: PPUSH
 373: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 377: LD_EXP 9
 381: PPUSH
 382: LD_STRING DBrighton-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 389: LD_EXP 10
 393: PPUSH
 394: LD_STRING DPalmer-2
 396: PPUSH
 397: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 401: LD_EXP 9
 405: PPUSH
 406: LD_STRING DBrighton-2
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-3
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-3
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-4
 444: PPUSH
 445: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 449: LD_EXP 10
 453: PPUSH
 454: LD_INT 6
 456: PPUSH
 457: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 461: LD_INT 35
 463: PPUSH
 464: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 468: LD_EXP 10
 472: PPUSH
 473: CALL_OW 310
 477: PUSH
 478: LD_INT 6
 480: EQUAL
 481: IFFALSE 461
// SayRadio ( Palmer , DPalmer-5 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_STRING DPalmer-5
 490: PPUSH
 491: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 495: LD_EXP 9
 499: PPUSH
 500: LD_INT 59
 502: PPUSH
 503: LD_INT 36
 505: PPUSH
 506: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 510: LD_EXP 11
 514: PPUSH
 515: LD_INT 60
 517: PPUSH
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 525: LD_EXP 10
 529: PPUSH
 530: LD_INT 60
 532: PPUSH
 533: LD_INT 34
 535: PPUSH
 536: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 540: LD_EXP 9
 544: PPUSH
 545: LD_INT 99
 547: PPUSH
 548: LD_INT 37
 550: PPUSH
 551: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 555: LD_EXP 11
 559: PPUSH
 560: LD_EXP 9
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 569: LD_EXP 10
 573: PPUSH
 574: LD_EXP 9
 578: PPUSH
 579: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 583: LD_INT 64
 585: PPUSH
 586: LD_INT 40
 588: PPUSH
 589: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 593: LD_EXP 12
 597: PPUSH
 598: LD_INT 13
 600: PPUSH
 601: CALL 12531 0 2
// wait ( 0 0$30 ) ;
 605: LD_INT 1050
 607: PPUSH
 608: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 612: LD_EXP 9
 616: PPUSH
 617: LD_STRING DBrighton-4
 619: PPUSH
 620: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 624: LD_EXP 9
 628: PPUSH
 629: LD_STRING DBrighton-5
 631: PPUSH
 632: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 636: LD_EXP 9
 640: PPUSH
 641: LD_EXP 11
 645: PPUSH
 646: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 650: LD_EXP 9
 654: PPUSH
 655: LD_STRING DBrighton-6
 657: PPUSH
 658: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 662: LD_EXP 11
 666: PPUSH
 667: LD_STRING DMegan-1
 669: PPUSH
 670: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 674: LD_EXP 9
 678: PPUSH
 679: LD_STRING DBrighton-7
 681: PPUSH
 682: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 686: LD_EXP 9
 690: PPUSH
 691: LD_INT 99
 693: PPUSH
 694: LD_INT 37
 696: PPUSH
 697: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 701: LD_EXP 9
 705: PPUSH
 706: LD_STRING DBrighton-8
 708: PPUSH
 709: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 713: LD_STRING C1
 715: PPUSH
 716: CALL_OW 337
// InGameOff ;
 720: CALL_OW 9
// SaveForQuickRestart ;
 724: CALL_OW 22
// MissionStart := true ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 1
 735: ST_TO_ADDR
// PrepareRUBase_v2 ;
 736: CALL 4811 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 740: LD_ADDR_EXP 64
 744: PUSH
 745: LD_EXP 64
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 22
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PPUSH
 768: CALL_OW 1
 772: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 773: LD_ADDR_EXP 64
 777: PUSH
 778: LD_EXP 64
 782: PPUSH
 783: LD_INT 2
 785: PPUSH
 786: LD_EXP 36
 790: PPUSH
 791: CALL_OW 1
 795: ST_TO_ADDR
// MC_Start ( ) ;
 796: CALL 52019 0 0
// music_nat := 1 ;
 800: LD_ADDR_OWVAR 71
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// end ;
 808: END
// every 1 trigger southAreaBlocker do var unit ;
 809: LD_EXP 2
 813: IFFALSE 974
 815: GO 817
 817: DISABLE
 818: LD_INT 0
 820: PPUSH
// begin enable ;
 821: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 822: LD_INT 16
 824: PPUSH
 825: LD_INT 22
 827: PUSH
 828: LD_INT 1
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 2
 837: PUSH
 838: LD_INT 21
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: LD_INT 21
 850: PUSH
 851: LD_INT 2
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 70
 871: PUSH
 872: LD_INT 0
 874: EQUAL
 875: IFFALSE 879
// exit ;
 877: GO 974
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 879: LD_ADDR_VAR 0 1
 883: PUSH
 884: LD_INT 16
 886: PPUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 21
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 70
 933: PUSH
 934: FOR_IN
 935: IFFALSE 972
// ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 250
 951: PPUSH
 952: LD_VAR 0 1
 956: PPUSH
 957: CALL_OW 251
 961: PUSH
 962: LD_INT 2
 964: MINUS
 965: PPUSH
 966: CALL_OW 111
 970: GO 934
 972: POP
 973: POP
// end ;
 974: PPOPN 1
 976: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
 977: LD_EXP 1
 981: IFFALSE 1614
 983: GO 985
 985: DISABLE
 986: LD_INT 0
 988: PPUSH
 989: PPUSH
// begin wait ( ruArrival ) ;
 990: LD_EXP 42
 994: PPUSH
 995: CALL_OW 67
// PrepareRUArmada ;
 999: CALL 3670 0 0
// wait ( 0 0$3 ) ;
1003: LD_INT 105
1005: PPUSH
1006: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 15
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 517
1025: ST_TO_ADDR
// for i = 1 to RUArmada do
1026: LD_ADDR_VAR 0 1
1030: PUSH
1031: DOUBLE
1032: LD_INT 1
1034: DEC
1035: ST_TO_ADDR
1036: LD_EXP 17
1040: PUSH
1041: FOR_TO
1042: IFFALSE 1091
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1044: LD_EXP 17
1048: PUSH
1049: LD_VAR 0 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: ARRAY
1063: PUSH
1064: LD_VAR 0 1
1068: ARRAY
1069: PPUSH
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 2
1077: ARRAY
1078: PUSH
1079: LD_VAR 0 1
1083: ARRAY
1084: PPUSH
1085: CALL_OW 111
1089: GO 1041
1091: POP
1092: POP
// ArmadaArrived := true ;
1093: LD_ADDR_EXP 3
1097: PUSH
1098: LD_INT 1
1100: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1101: LD_EXP 10
1105: PPUSH
1106: LD_STRING DPalmer-A1
1108: PPUSH
1109: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1113: LD_EXP 9
1117: PPUSH
1118: LD_STRING DBrighton-A1
1120: PPUSH
1121: CALL_OW 88
// wait ( 0 0$20 ) ;
1125: LD_INT 700
1127: PPUSH
1128: CALL_OW 67
// PrepareRUBase ;
1132: CALL 4395 0 0
// wait ( 1 1$20 ) ;
1136: LD_INT 2800
1138: PPUSH
1139: CALL_OW 67
// PrepareRUBulldozers ;
1143: CALL 4282 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1147: LD_EXP 18
1151: PUSH
1152: LD_INT 1
1154: ARRAY
1155: PPUSH
1156: LD_INT 9
1158: PPUSH
1159: CALL 12388 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1163: LD_EXP 18
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: PPUSH
1172: LD_INT 11
1174: PPUSH
1175: CALL 12388 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1179: LD_INT 1
1181: PPUSH
1182: LD_EXP 18
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1195: LD_INT 1
1197: PPUSH
1198: LD_EXP 18
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: CALL_OW 471
// wait ( 0 0$50 ) ;
1211: LD_INT 1750
1213: PPUSH
1214: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1218: LD_INT 1
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: CALL_OW 334
// InGameOn ;
1228: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1232: LD_INT 95
1234: PPUSH
1235: LD_INT 93
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 30
1243: NEG
1244: PPUSH
1245: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1249: LD_INT 10
1251: PPUSH
1252: LD_INT 22
1254: PUSH
1255: LD_INT 1
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 70
1266: PPUSH
1267: LD_INT 63
1269: PPUSH
1270: LD_INT 39
1272: PPUSH
1273: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1277: LD_INT 95
1279: PPUSH
1280: LD_INT 93
1282: PPUSH
1283: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1287: LD_INT 35
1289: PPUSH
1290: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1294: LD_EXP 18
1298: PUSH
1299: LD_INT 1
1301: ARRAY
1302: PPUSH
1303: CALL_OW 314
1307: NOT
1308: IFFALSE 1326
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1310: LD_EXP 18
1314: PUSH
1315: LD_INT 1
1317: ARRAY
1318: PPUSH
1319: LD_INT 9
1321: PPUSH
1322: CALL 12388 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1326: LD_EXP 18
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: CALL_OW 314
1339: NOT
1340: IFFALSE 1358
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 2
1349: ARRAY
1350: PPUSH
1351: LD_INT 11
1353: PPUSH
1354: CALL 12388 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1358: LD_INT 9
1360: PPUSH
1361: CALL_OW 353
1365: PUSH
1366: LD_INT 2
1368: LESS
1369: PUSH
1370: LD_INT 11
1372: PPUSH
1373: CALL_OW 353
1377: PUSH
1378: LD_INT 2
1380: LESS
1381: OR
1382: PUSH
1383: LD_EXP 18
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 301
1396: OR
1397: IFFALSE 1287
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1399: LD_EXP 18
1403: PPUSH
1404: LD_INT 50
1406: PUSH
1407: EMPTY
1408: LIST
1409: PPUSH
1410: CALL_OW 72
1414: IFFALSE 1467
// begin wait ( 0 0$10 ) ;
1416: LD_INT 350
1418: PPUSH
1419: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1423: LD_EXP 18
1427: PPUSH
1428: LD_INT 120
1430: PPUSH
1431: LD_INT 131
1433: PPUSH
1434: CALL_OW 111
// for i in Bulldozers do
1438: LD_ADDR_VAR 0 1
1442: PUSH
1443: LD_EXP 18
1447: PUSH
1448: FOR_IN
1449: IFFALSE 1465
// NormalAttack ( 1 , i ) ;
1451: LD_INT 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: CALL_OW 472
1463: GO 1448
1465: POP
1466: POP
// end ; wait ( 0 0$10 ) ;
1467: LD_INT 350
1469: PPUSH
1470: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1474: LD_INT 95
1476: PPUSH
1477: LD_INT 93
1479: PPUSH
1480: LD_INT 1
1482: PPUSH
1483: CALL_OW 331
// southAreaBlocker = false ;
1487: LD_ADDR_EXP 2
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// wait ( 0 0$3 ) ;
1495: LD_INT 105
1497: PPUSH
1498: CALL_OW 67
// InGameOff ;
1502: CALL_OW 9
// SayEffect ( DRuSol-A1 ) ;
1506: LD_STRING DRuSol-A1
1508: PPUSH
1509: CALL_OW 96
// AssaultStarted := true ;
1513: LD_ADDR_EXP 8
1517: PUSH
1518: LD_INT 1
1520: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1521: LD_INT 70
1523: PPUSH
1524: CALL_OW 67
// Say ( Yashin , DDeath-Yas-1 ) ;
1528: LD_EXP 13
1532: PPUSH
1533: LD_STRING DDeath-Yas-1
1535: PPUSH
1536: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
1540: LD_EXP 15
1544: PPUSH
1545: LD_STRING DDeath-Gay-2
1547: PPUSH
1548: CALL_OW 88
// wait ( 0 0$2 ) ;
1552: LD_INT 70
1554: PPUSH
1555: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1559: LD_EXP 14
1563: PPUSH
1564: LD_STRING DDeath-Pop-1
1566: PPUSH
1567: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1571: LD_EXP 15
1575: PPUSH
1576: LD_STRING DDeath-Gay-1
1578: PPUSH
1579: CALL_OW 88
// wait ( 0 0$5 ) ;
1583: LD_INT 175
1585: PPUSH
1586: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1590: LD_EXP 16
1594: PPUSH
1595: LD_STRING DDeath-Vse-1
1597: PPUSH
1598: CALL_OW 88
// Say ( Popov , DDeath-Pop-2 ) ;
1602: LD_EXP 14
1606: PPUSH
1607: LD_STRING DDeath-Pop-2
1609: PPUSH
1610: CALL_OW 88
// end ;
1614: PPOPN 2
1616: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1617: LD_EXP 8
1621: IFFALSE 2073
1623: GO 1625
1625: DISABLE
1626: LD_INT 0
1628: PPUSH
1629: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1630: LD_INT 6
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1640: LD_INT 6
1642: PPUSH
1643: LD_INT 3
1645: PPUSH
1646: CALL_OW 470
// repeat for i in RuArmada do
1650: LD_ADDR_VAR 0 1
1654: PUSH
1655: LD_EXP 17
1659: PUSH
1660: FOR_IN
1661: IFFALSE 1699
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1663: LD_VAR 0 1
1667: PPUSH
1668: LD_INT 22
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PPUSH
1678: CALL_OW 69
1682: PPUSH
1683: LD_VAR 0 1
1687: PPUSH
1688: CALL_OW 74
1692: PPUSH
1693: CALL_OW 115
1697: GO 1660
1699: POP
1700: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1701: LD_INT 35
1703: PPUSH
1704: CALL_OW 67
1708: LD_INT 1
1710: PUSH
1711: LD_INT 22
1713: PUSH
1714: LD_INT 6
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 21
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: PPUSH
1736: CALL_OW 69
1740: PUSH
1741: LD_INT 10
1743: LESS
1744: PUSH
1745: LD_EXP 13
1749: PPUSH
1750: CALL_OW 301
1754: AND
1755: PUSH
1756: LD_EXP 14
1760: PPUSH
1761: CALL_OW 301
1765: AND
1766: PUSH
1767: LD_EXP 15
1771: PPUSH
1772: CALL_OW 301
1776: AND
1777: PUSH
1778: LD_EXP 16
1782: PPUSH
1783: CALL_OW 301
1787: AND
1788: IFFALSE 1650
// AssaultStarted := false ;
1790: LD_ADDR_EXP 8
1794: PUSH
1795: LD_INT 0
1797: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1798: LD_INT 22
1800: PUSH
1801: LD_INT 6
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_INT 5
1815: PPUSH
1816: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1820: LD_ADDR_EXP 5
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_INT 6
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 26
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 21
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 24
1860: PUSH
1861: LD_INT 500
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 69
1879: ST_TO_ADDR
// if RuSpeaker then
1880: LD_EXP 5
1884: IFFALSE 1902
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1886: LD_EXP 5
1890: PUSH
1891: LD_INT 1
1893: ARRAY
1894: PPUSH
1895: LD_STRING DRuSol-A2
1897: PPUSH
1898: CALL_OW 88
// wait ( 0 0$30 ) ;
1902: LD_INT 1050
1904: PPUSH
1905: CALL_OW 67
// DialogueOn ;
1909: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1913: LD_EXP 9
1917: PPUSH
1918: LD_STRING DBrighton-B1
1920: PPUSH
1921: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1925: LD_EXP 10
1929: PPUSH
1930: LD_STRING DPalmer-B1
1932: PPUSH
1933: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1937: LD_EXP 9
1941: PPUSH
1942: LD_STRING DBrighton-B2
1944: PPUSH
1945: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1949: LD_EXP 19
1953: PPUSH
1954: LD_STRING DBurlak-B1
1956: PPUSH
1957: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1961: LD_EXP 9
1965: PPUSH
1966: LD_STRING DBrighton-B3
1968: PPUSH
1969: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1973: LD_EXP 10
1977: PPUSH
1978: LD_STRING DPalmer-B2
1980: PPUSH
1981: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1985: LD_EXP 9
1989: PPUSH
1990: LD_STRING DBrighton-B4
1992: PPUSH
1993: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1997: LD_EXP 9
2001: PPUSH
2002: LD_STRING DBrighton-B5
2004: PPUSH
2005: CALL_OW 88
// DialogueOff ;
2009: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2013: LD_STRING C2
2015: PPUSH
2016: CALL_OW 337
// FirstAssaultRepelled := true ;
2020: LD_ADDR_EXP 4
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2028: LD_EXP 18
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: PPUSH
2037: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2041: LD_EXP 18
2045: PUSH
2046: LD_INT 2
2048: ARRAY
2049: PPUSH
2050: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2054: LD_INT 22
2056: PUSH
2057: LD_INT 6
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: PPUSH
2069: CALL_OW 181
// end ;
2073: PPOPN 2
2075: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2076: LD_EXP 4
2080: IFFALSE 2245
2082: GO 2084
2084: DISABLE
2085: LD_INT 0
2087: PPUSH
2088: PPUSH
// begin enable ;
2089: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2090: LD_INT 5
2092: PPUSH
2093: LD_INT 22
2095: PUSH
2096: LD_INT 6
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: PPUSH
2106: CALL_OW 70
2110: PUSH
2111: LD_INT 0
2113: EQUAL
2114: IFFALSE 2118
// exit ;
2116: GO 2245
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2118: LD_ADDR_VAR 0 1
2122: PUSH
2123: LD_INT 5
2125: PPUSH
2126: LD_INT 22
2128: PUSH
2129: LD_INT 6
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 70
2143: PUSH
2144: FOR_IN
2145: IFFALSE 2243
// begin SetSide ( unit , 3 ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2159: LD_VAR 0 1
2163: PPUSH
2164: CALL_OW 247
2168: PUSH
2169: LD_INT 2
2171: EQUAL
2172: IFFALSE 2208
// for insideUnit in UnitsInside ( unit ) do
2174: LD_ADDR_VAR 0 2
2178: PUSH
2179: LD_VAR 0 1
2183: PPUSH
2184: CALL_OW 313
2188: PUSH
2189: FOR_IN
2190: IFFALSE 2206
// SetSide ( insideUnit , 3 ) ;
2192: LD_VAR 0 2
2196: PPUSH
2197: LD_INT 3
2199: PPUSH
2200: CALL_OW 235
2204: GO 2189
2206: POP
2207: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2208: LD_ADDR_EXP 64
2212: PUSH
2213: LD_EXP 64
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_INT 22
2223: PUSH
2224: LD_INT 3
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PPUSH
2231: CALL_OW 69
2235: PPUSH
2236: CALL_OW 1
2240: ST_TO_ADDR
// end ;
2241: GO 2144
2243: POP
2244: POP
// end ;
2245: PPOPN 2
2247: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2248: LD_EXP 4
2252: PUSH
2253: LD_EXP 41
2257: PUSH
2258: LD_INT 0
2260: GREATER
2261: AND
2262: IFFALSE 2282
2264: GO 2266
2266: DISABLE
// begin enable ;
2267: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2268: LD_ADDR_EXP 41
2272: PUSH
2273: LD_EXP 41
2277: PUSH
2278: LD_INT 35
2280: MINUS
2281: ST_TO_ADDR
// end ;
2282: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2283: LD_EXP 41
2287: PUSH
2288: LD_INT 0
2290: EQUAL
2291: IFFALSE 2397
2293: GO 2295
2295: DISABLE
// begin JMMReinforcement ;
2296: CALL 5139 0 0
// DialogueOn ;
2300: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2304: LD_EXP 37
2308: PPUSH
2309: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2313: LD_EXP 37
2317: PPUSH
2318: LD_STRING DJMM-F1
2320: PPUSH
2321: CALL_OW 88
// if RussiansDefeated then
2325: LD_EXP 44
2329: IFFALSE 2355
// begin AddMedal ( Russians , 1 ) ;
2331: LD_STRING Russians
2333: PPUSH
2334: LD_INT 1
2336: PPUSH
2337: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2341: LD_EXP 9
2345: PPUSH
2346: LD_STRING DBrighton-F1a
2348: PPUSH
2349: CALL_OW 88
// end else
2353: GO 2385
// begin AddMedal ( Russians , - 1 ) ;
2355: LD_STRING Russians
2357: PPUSH
2358: LD_INT 1
2360: NEG
2361: PPUSH
2362: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2366: LD_EXP 9
2370: PPUSH
2371: LD_STRING DBrighton-F1
2373: PPUSH
2374: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2378: LD_STRING C3
2380: PPUSH
2381: CALL_OW 337
// end ; DialogueOff ;
2385: CALL_OW 7
// JMM_Arrived := true ;
2389: LD_ADDR_EXP 6
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// end ;
2397: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2398: LD_EXP 6
2402: PUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_EXP 19
2410: PPUSH
2411: CALL_OW 292
2415: AND
2416: IFFALSE 2445
2418: GO 2420
2420: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2421: LD_EXP 19
2425: PPUSH
2426: LD_STRING DBurlak
2428: PPUSH
2429: CALL_OW 88
// Say ( JMM , DJMM ) ;
2433: LD_EXP 37
2437: PPUSH
2438: LD_STRING DJMM
2440: PPUSH
2441: CALL_OW 88
// end ;
2445: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2446: LD_INT 1
2448: PUSH
2449: LD_INT 22
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: LD_INT 34
2464: PUSH
2465: LD_INT 9
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 35
2474: PUSH
2475: LD_INT 9
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: PUSH
2497: LD_INT 1
2499: GREATER
2500: IFFALSE 2513
2502: GO 2504
2504: DISABLE
// LaserBuilt := true ;
2505: LD_ADDR_EXP 7
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
2513: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2514: LD_EXP 8
2518: PUSH
2519: LD_INT 6
2521: PPUSH
2522: LD_INT 1
2524: PUSH
2525: LD_INT 22
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 35
2537: PUSH
2538: LD_INT 9
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PPUSH
2553: CALL_OW 69
2557: PPUSH
2558: LD_EXP 16
2562: PPUSH
2563: CALL_OW 310
2567: PPUSH
2568: CALL_OW 74
2572: PPUSH
2573: CALL_OW 292
2577: AND
2578: IFFALSE 2607
2580: GO 2582
2582: DISABLE
// begin Say ( Sevi , DDeath-Vse-2 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING DDeath-Vse-2
2590: PPUSH
2591: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2595: LD_EXP 13
2599: PPUSH
2600: LD_STRING DDeath-Yas-2
2602: PPUSH
2603: CALL_OW 88
// end ;
2607: END
// every 0 0$1 trigger MissionStart and GetResourceArea ( CratesArea , mat_cans ) < 20 do
2608: LD_EXP 1
2612: PUSH
2613: LD_INT 12
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: CALL_OW 287
2623: PUSH
2624: LD_INT 20
2626: LESS
2627: AND
2628: IFFALSE 2670
2630: GO 2632
2632: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2633: LD_INT 1750
2635: PPUSH
2636: LD_INT 4900
2638: PPUSH
2639: CALL_OW 12
2643: PPUSH
2644: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2648: LD_INT 2
2650: PPUSH
2651: LD_INT 5
2653: PPUSH
2654: CALL_OW 12
2658: PPUSH
2659: LD_INT 12
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: CALL_OW 55
// enable ;
2669: ENABLE
// end ;
2670: END
// every 0 0$1 trigger MissionStart do
2671: LD_EXP 1
2675: IFFALSE 2698
2677: GO 2679
2679: DISABLE
// begin enable ;
2680: ENABLE
// display_Strings := [ #tick , tick ] ;
2681: LD_ADDR_OWVAR 47
2685: PUSH
2686: LD_STRING #tick
2688: PUSH
2689: LD_OWVAR 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// end ; end_of_file
2698: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2699: LD_INT 0
2701: PPUSH
// uc_side := 1 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// hc_class = class_soldier ;
2710: LD_ADDR_OWVAR 28
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// uc_nation := nation_american ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 1
2725: ST_TO_ADDR
// hc_sex = sex_male ;
2726: LD_ADDR_OWVAR 27
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// hc_importance = 110 ;
2734: LD_ADDR_OWVAR 32
2738: PUSH
2739: LD_INT 110
2741: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2742: LD_ADDR_OWVAR 30
2746: PUSH
2747: LD_INT 5
2749: PUSH
2750: LD_INT 4
2752: PUSH
2753: LD_INT 5
2755: PUSH
2756: LD_INT 3
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2765: LD_ADDR_OWVAR 31
2769: PUSH
2770: LD_INT 9
2772: PUSH
2773: LD_INT 6
2775: PUSH
2776: LD_INT 7
2778: PUSH
2779: LD_INT 6
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2788: LD_ADDR_OWVAR 29
2792: PUSH
2793: LD_INT 12
2795: PUSH
2796: LD_INT 10
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2803: LD_ADDR_OWVAR 26
2807: PUSH
2808: LD_STRING Gerard Brighton
2810: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2811: LD_ADDR_OWVAR 33
2815: PUSH
2816: LD_STRING Beta_Skirmish
2818: ST_TO_ADDR
// hc_face_number := 1 ;
2819: LD_ADDR_OWVAR 34
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// Brighton := CreateHuman ;
2827: LD_ADDR_EXP 9
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// uc_nation := nation_american ;
2837: LD_ADDR_OWVAR 21
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_importance = 80 ;
2845: LD_ADDR_OWVAR 32
2849: PUSH
2850: LD_INT 80
2852: ST_TO_ADDR
// hc_sex = sex_male ;
2853: LD_ADDR_OWVAR 27
2857: PUSH
2858: LD_INT 1
2860: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2861: LD_ADDR_OWVAR 30
2865: PUSH
2866: LD_INT 5
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: LD_INT 1
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2884: LD_ADDR_OWVAR 31
2888: PUSH
2889: LD_INT 7
2891: PUSH
2892: LD_INT 6
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 3
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2907: LD_ADDR_OWVAR 29
2911: PUSH
2912: LD_INT 10
2914: PUSH
2915: LD_INT 10
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: ST_TO_ADDR
// hc_name := Brian Palmer ;
2922: LD_ADDR_OWVAR 26
2926: PUSH
2927: LD_STRING Brian Palmer
2929: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2930: LD_ADDR_OWVAR 33
2934: PUSH
2935: LD_STRING Beta_Skirmish
2937: ST_TO_ADDR
// hc_face_number := 3 ;
2938: LD_ADDR_OWVAR 34
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Palmer := CreateHuman ;
2946: LD_ADDR_EXP 10
2950: PUSH
2951: CALL_OW 44
2955: ST_TO_ADDR
// hc_class = class_scientistic ;
2956: LD_ADDR_OWVAR 28
2960: PUSH
2961: LD_INT 4
2963: ST_TO_ADDR
// uc_nation := nation_american ;
2964: LD_ADDR_OWVAR 21
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// hc_importance = 70 ;
2972: LD_ADDR_OWVAR 32
2976: PUSH
2977: LD_INT 70
2979: ST_TO_ADDR
// hc_sex = sex_female ;
2980: LD_ADDR_OWVAR 27
2984: PUSH
2985: LD_INT 2
2987: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2988: LD_ADDR_OWVAR 30
2992: PUSH
2993: LD_INT 3
2995: PUSH
2996: LD_INT 2
2998: PUSH
2999: LD_INT 4
3001: PUSH
3002: LD_INT 6
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3011: LD_ADDR_OWVAR 31
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: LD_INT 2
3021: PUSH
3022: LD_INT 5
3024: PUSH
3025: LD_INT 8
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3034: LD_ADDR_OWVAR 29
3038: PUSH
3039: LD_INT 10
3041: PUSH
3042: LD_INT 10
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: ST_TO_ADDR
// hc_name := Megan Armitage ;
3049: LD_ADDR_OWVAR 26
3053: PUSH
3054: LD_STRING Megan Armitage
3056: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3057: LD_ADDR_OWVAR 33
3061: PUSH
3062: LD_STRING Beta_Skirmish
3064: ST_TO_ADDR
// hc_face_number := 4 ;
3065: LD_ADDR_OWVAR 34
3069: PUSH
3070: LD_INT 4
3072: ST_TO_ADDR
// Megan := CreateHuman ;
3073: LD_ADDR_EXP 11
3077: PUSH
3078: CALL_OW 44
3082: ST_TO_ADDR
// end ;
3083: LD_VAR 0 1
3087: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
// uc_side := 1 ;
3095: LD_ADDR_OWVAR 20
3099: PUSH
3100: LD_INT 1
3102: ST_TO_ADDR
// uc_nation := nation_american ;
3103: LD_ADDR_OWVAR 21
3107: PUSH
3108: LD_INT 1
3110: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_INT 22
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 32
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PPUSH
3140: CALL_OW 69
3144: PUSH
3145: FOR_IN
3146: IFFALSE 3201
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3148: LD_VAR 0 2
3152: PPUSH
3153: LD_INT 3
3155: PUSH
3156: LD_INT 3
3158: PUSH
3159: LD_INT 4
3161: PUSH
3162: LD_INT 5
3164: PUSH
3165: LD_INT 11
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 4
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: PUSH
3183: LD_INT 1
3185: PPUSH
3186: LD_INT 7
3188: PPUSH
3189: CALL_OW 12
3193: ARRAY
3194: PPUSH
3195: CALL_OW 431
3199: GO 3145
3201: POP
3202: POP
// hc_name :=  ;
3203: LD_ADDR_OWVAR 26
3207: PUSH
3208: LD_STRING 
3210: ST_TO_ADDR
// hc_gallery :=  ;
3211: LD_ADDR_OWVAR 33
3215: PUSH
3216: LD_STRING 
3218: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3219: LD_ADDR_VAR 0 2
3223: PUSH
3224: DOUBLE
3225: LD_INT 1
3227: DEC
3228: ST_TO_ADDR
3229: LD_INT 6
3231: PUSH
3232: LD_INT 5
3234: PUSH
3235: LD_INT 5
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_OWVAR 67
3247: ARRAY
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3308
// begin PrepareSoldier ( 1 , game_skill ) ;
3252: LD_INT 1
3254: PPUSH
3255: LD_EXP 39
3259: PPUSH
3260: CALL_OW 381
// un := CreateHuman ;
3264: LD_ADDR_VAR 0 4
3268: PUSH
3269: CALL_OW 44
3273: ST_TO_ADDR
// filter := filter ^ un ;
3274: LD_ADDR_VAR 0 3
3278: PUSH
3279: LD_VAR 0 3
3283: PUSH
3284: LD_VAR 0 4
3288: ADD
3289: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3290: LD_ADDR_VAR 0 5
3294: PUSH
3295: LD_VAR 0 5
3299: PUSH
3300: LD_VAR 0 4
3304: ADD
3305: ST_TO_ADDR
// end ;
3306: GO 3249
3308: POP
3309: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_INT 3
3322: PUSH
3323: LD_INT 2
3325: PUSH
3326: LD_INT 2
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_OWVAR 67
3338: ARRAY
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3395
// begin PrepareEngineer ( 0 , game_skill ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_EXP 39
3350: PPUSH
3351: CALL_OW 382
// un := CreateHuman ;
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: CALL_OW 44
3364: ST_TO_ADDR
// filter := filter ^ un ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_VAR 0 4
3379: ADD
3380: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 52
// end ;
3393: GO 3340
3395: POP
3396: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: DOUBLE
3403: LD_INT 1
3405: DEC
3406: ST_TO_ADDR
3407: LD_INT 4
3409: PUSH
3410: LD_INT 3
3412: PUSH
3413: LD_INT 3
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: LD_OWVAR 67
3425: ARRAY
3426: PUSH
3427: FOR_TO
3428: IFFALSE 3482
// begin PrepareMechanic ( 0 , game_skill ) ;
3430: LD_INT 0
3432: PPUSH
3433: LD_EXP 39
3437: PPUSH
3438: CALL_OW 383
// un := CreateHuman ;
3442: LD_ADDR_VAR 0 4
3446: PUSH
3447: CALL_OW 44
3451: ST_TO_ADDR
// filter := filter ^ un ;
3452: LD_ADDR_VAR 0 3
3456: PUSH
3457: LD_VAR 0 3
3461: PUSH
3462: LD_VAR 0 4
3466: ADD
3467: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3468: LD_VAR 0 4
3472: PPUSH
3473: LD_INT 8
3475: PPUSH
3476: CALL_OW 52
// end ;
3480: GO 3427
3482: POP
3483: POP
// for i = 1 to 2 do
3484: LD_ADDR_VAR 0 2
3488: PUSH
3489: DOUBLE
3490: LD_INT 1
3492: DEC
3493: ST_TO_ADDR
3494: LD_INT 2
3496: PUSH
3497: FOR_TO
3498: IFFALSE 3552
// begin PrepareScientist ( 0 , game_skill ) ;
3500: LD_INT 0
3502: PPUSH
3503: LD_EXP 39
3507: PPUSH
3508: CALL_OW 384
// un := CreateHuman ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: CALL_OW 44
3521: ST_TO_ADDR
// filter := filter ^ un ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: LD_VAR 0 3
3531: PUSH
3532: LD_VAR 0 4
3536: ADD
3537: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3538: LD_VAR 0 4
3542: PPUSH
3543: LD_INT 14
3545: PPUSH
3546: CALL_OW 52
// end ;
3550: GO 3497
3552: POP
3553: POP
// for i = 1 to soldiers do
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: DOUBLE
3560: LD_INT 1
3562: DEC
3563: ST_TO_ADDR
3564: LD_VAR 0 5
3568: PUSH
3569: FOR_TO
3570: IFFALSE 3595
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3572: LD_VAR 0 5
3576: PUSH
3577: LD_VAR 0 2
3581: ARRAY
3582: PPUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL_OW 49
3593: GO 3569
3595: POP
3596: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3597: LD_EXP 9
3601: PPUSH
3602: LD_INT 51
3604: PPUSH
3605: LD_INT 43
3607: PPUSH
3608: LD_INT 0
3610: PPUSH
3611: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3615: LD_EXP 10
3619: PPUSH
3620: LD_INT 55
3622: PPUSH
3623: LD_INT 58
3625: PPUSH
3626: LD_INT 0
3628: PPUSH
3629: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3633: LD_EXP 11
3637: PPUSH
3638: LD_INT 39
3640: PPUSH
3641: LD_INT 36
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL_OW 48
// BetaSquad := filter diff 0 ;
3651: LD_ADDR_EXP 12
3655: PUSH
3656: LD_VAR 0 3
3660: PUSH
3661: LD_INT 0
3663: DIFF
3664: ST_TO_ADDR
// end ;
3665: LD_VAR 0 1
3669: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3670: LD_INT 0
3672: PPUSH
3673: PPUSH
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
// uc_side := 6 ;
3678: LD_ADDR_OWVAR 20
3682: PUSH
3683: LD_INT 6
3685: ST_TO_ADDR
// uc_nation := nation_russian ;
3686: LD_ADDR_OWVAR 21
3690: PUSH
3691: LD_INT 3
3693: ST_TO_ADDR
// soldiers := [ ] ;
3694: LD_ADDR_VAR 0 4
3698: PUSH
3699: EMPTY
3700: ST_TO_ADDR
// vehs := [ ] ;
3701: LD_ADDR_VAR 0 6
3705: PUSH
3706: EMPTY
3707: ST_TO_ADDR
// RUArmada := [ ] ;
3708: LD_ADDR_EXP 17
3712: PUSH
3713: EMPTY
3714: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3715: LD_ADDR_EXP 13
3719: PUSH
3720: LD_STRING Yashin
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3728: LD_ADDR_EXP 14
3732: PUSH
3733: LD_STRING Popov
3735: PPUSH
3736: CALL_OW 25
3740: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3741: LD_ADDR_EXP 15
3745: PUSH
3746: LD_STRING Gaydar
3748: PPUSH
3749: CALL_OW 25
3753: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3754: LD_ADDR_EXP 16
3758: PUSH
3759: LD_STRING Vsevolod
3761: PPUSH
3762: CALL_OW 25
3766: ST_TO_ADDR
// for i = 1 to 16 do
3767: LD_ADDR_VAR 0 2
3771: PUSH
3772: DOUBLE
3773: LD_INT 1
3775: DEC
3776: ST_TO_ADDR
3777: LD_INT 16
3779: PUSH
3780: FOR_TO
3781: IFFALSE 3823
// begin PrepareSoldier ( 0 , game_eskill ) ;
3783: LD_INT 0
3785: PPUSH
3786: LD_EXP 40
3790: PPUSH
3791: CALL_OW 381
// un := CreateHuman ;
3795: LD_ADDR_VAR 0 5
3799: PUSH
3800: CALL_OW 44
3804: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_VAR 0 4
3814: PUSH
3815: LD_VAR 0 5
3819: ADD
3820: ST_TO_ADDR
// end ;
3821: GO 3780
3823: POP
3824: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3825: LD_ADDR_VAR 0 4
3829: PUSH
3830: LD_EXP 13
3834: PUSH
3835: LD_EXP 14
3839: ADD
3840: PUSH
3841: LD_EXP 15
3845: ADD
3846: PUSH
3847: LD_EXP 16
3851: ADD
3852: PUSH
3853: LD_VAR 0 4
3857: ADD
3858: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3859: LD_INT 24
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 1
3867: PPUSH
3868: LD_INT 46
3870: PPUSH
3871: LD_INT 100
3873: PPUSH
3874: CALL 18242 0 5
// for i = 1 to 8 do
3878: LD_ADDR_VAR 0 2
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 8
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3975
// begin vehicle := CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3904: LD_VAR 0 4
3908: PUSH
3909: LD_INT 1
3911: ARRAY
3912: PPUSH
3913: LD_VAR 0 3
3917: PPUSH
3918: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3922: LD_ADDR_VAR 0 4
3926: PUSH
3927: LD_VAR 0 4
3931: PUSH
3932: LD_VAR 0 4
3936: PUSH
3937: LD_INT 1
3939: ARRAY
3940: DIFF
3941: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3942: LD_VAR 0 3
3946: PPUSH
3947: LD_INT 5
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: CALL_OW 49
// vehs := vehs ^ vehicle ;
3957: LD_ADDR_VAR 0 6
3961: PUSH
3962: LD_VAR 0 6
3966: PUSH
3967: LD_VAR 0 3
3971: ADD
3972: ST_TO_ADDR
// end ;
3973: GO 3891
3975: POP
3976: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3977: LD_INT 24
3979: PPUSH
3980: LD_INT 3
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_INT 43
3988: PPUSH
3989: LD_INT 100
3991: PPUSH
3992: CALL 18242 0 5
// for i = 1 to 8 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 8
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4093
// begin vehicle := CreateVehicle ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 45
4021: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4022: LD_VAR 0 4
4026: PUSH
4027: LD_INT 1
4029: ARRAY
4030: PPUSH
4031: LD_VAR 0 3
4035: PPUSH
4036: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_VAR 0 4
4049: PUSH
4050: LD_VAR 0 4
4054: PUSH
4055: LD_INT 1
4057: ARRAY
4058: DIFF
4059: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4060: LD_VAR 0 3
4064: PPUSH
4065: LD_INT 5
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// vehs := vehs ^ vehicle ;
4075: LD_ADDR_VAR 0 6
4079: PUSH
4080: LD_VAR 0 6
4084: PUSH
4085: LD_VAR 0 3
4089: ADD
4090: ST_TO_ADDR
// end ;
4091: GO 4009
4093: POP
4094: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4095: LD_INT 22
4097: PPUSH
4098: LD_INT 3
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_INT 44
4106: PPUSH
4107: LD_INT 100
4109: PPUSH
4110: CALL 18242 0 5
// for i = 1 to 4 do
4114: LD_ADDR_VAR 0 2
4118: PUSH
4119: DOUBLE
4120: LD_INT 1
4122: DEC
4123: ST_TO_ADDR
4124: LD_INT 4
4126: PUSH
4127: FOR_TO
4128: IFFALSE 4211
// begin vehicle := CreateVehicle ;
4130: LD_ADDR_VAR 0 3
4134: PUSH
4135: CALL_OW 45
4139: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4140: LD_VAR 0 4
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: PPUSH
4149: LD_VAR 0 3
4153: PPUSH
4154: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4158: LD_ADDR_VAR 0 4
4162: PUSH
4163: LD_VAR 0 4
4167: PUSH
4168: LD_VAR 0 4
4172: PUSH
4173: LD_INT 1
4175: ARRAY
4176: DIFF
4177: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 5
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 49
// vehs := vehs ^ vehicle ;
4193: LD_ADDR_VAR 0 6
4197: PUSH
4198: LD_VAR 0 6
4202: PUSH
4203: LD_VAR 0 3
4207: ADD
4208: ST_TO_ADDR
// end ;
4209: GO 4127
4211: POP
4212: POP
// RUArmada := vehs ;
4213: LD_ADDR_EXP 17
4217: PUSH
4218: LD_VAR 0 6
4222: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4223: LD_EXP 13
4227: PPUSH
4228: CALL_OW 310
4232: PUSH
4233: LD_EXP 14
4237: PPUSH
4238: CALL_OW 310
4242: PUSH
4243: LD_EXP 15
4247: PPUSH
4248: CALL_OW 310
4252: PUSH
4253: LD_EXP 16
4257: PPUSH
4258: CALL_OW 310
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PPUSH
4269: LD_INT 6
4271: NEG
4272: PPUSH
4273: CALL_OW 242
// end ;
4277: LD_VAR 0 1
4281: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4282: LD_INT 0
4284: PPUSH
4285: PPUSH
4286: PPUSH
// uc_side := 6 ;
4287: LD_ADDR_OWVAR 20
4291: PUSH
4292: LD_INT 6
4294: ST_TO_ADDR
// uc_nation := nation_russian ;
4295: LD_ADDR_OWVAR 21
4299: PUSH
4300: LD_INT 3
4302: ST_TO_ADDR
// Bulldozers := [ ] ;
4303: LD_ADDR_EXP 18
4307: PUSH
4308: EMPTY
4309: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4310: LD_INT 24
4312: PPUSH
4313: LD_INT 3
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_INT 53
4321: PPUSH
4322: LD_INT 100
4324: PPUSH
4325: CALL 18242 0 5
// for i = 1 to 2 do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: DOUBLE
4335: LD_INT 1
4337: DEC
4338: ST_TO_ADDR
4339: LD_INT 2
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4388
// begin vehicle := CreateVehicle ;
4345: LD_ADDR_VAR 0 3
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: LD_INT 0
4365: PPUSH
4366: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4370: LD_ADDR_EXP 18
4374: PUSH
4375: LD_EXP 18
4379: PUSH
4380: LD_VAR 0 3
4384: ADD
4385: ST_TO_ADDR
// end ;
4386: GO 4342
4388: POP
4389: POP
// end ;
4390: LD_VAR 0 1
4394: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4395: LD_INT 0
4397: PPUSH
4398: PPUSH
4399: PPUSH
4400: PPUSH
// uc_side := 3 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 3
4408: ST_TO_ADDR
// uc_nation := nation_russian ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 3
4416: ST_TO_ADDR
// hc_name :=  ;
4417: LD_ADDR_OWVAR 26
4421: PUSH
4422: LD_STRING 
4424: ST_TO_ADDR
// hc_gallery :=  ;
4425: LD_ADDR_OWVAR 33
4429: PUSH
4430: LD_STRING 
4432: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4433: LD_ADDR_EXP 19
4437: PUSH
4438: LD_STRING Burlak
4440: PPUSH
4441: CALL_OW 25
4445: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4446: LD_ADDR_EXP 20
4450: PUSH
4451: LD_STRING Gleb
4453: PPUSH
4454: CALL_OW 25
4458: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4459: LD_ADDR_EXP 21
4463: PUSH
4464: LD_STRING Furmanov
4466: PPUSH
4467: CALL_OW 25
4471: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4472: LD_ADDR_EXP 22
4476: PUSH
4477: LD_STRING Titov
4479: PPUSH
4480: CALL_OW 25
4484: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4485: LD_ADDR_EXP 23
4489: PUSH
4490: LD_STRING Scholtze
4492: PPUSH
4493: CALL_OW 25
4497: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4498: LD_ADDR_EXP 24
4502: PUSH
4503: LD_STRING Dolgov
4505: PPUSH
4506: CALL_OW 25
4510: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4511: LD_ADDR_EXP 25
4515: PUSH
4516: LD_STRING Kapitsova
4518: PPUSH
4519: CALL_OW 25
4523: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4524: LD_ADDR_EXP 26
4528: PUSH
4529: LD_STRING Karamazov
4531: PPUSH
4532: CALL_OW 25
4536: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4537: LD_ADDR_EXP 27
4541: PUSH
4542: LD_STRING Kirlenkova
4544: PPUSH
4545: CALL_OW 25
4549: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4550: LD_ADDR_EXP 28
4554: PUSH
4555: LD_STRING Kovalyuk
4557: PPUSH
4558: CALL_OW 25
4562: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4563: LD_ADDR_EXP 29
4567: PUSH
4568: LD_STRING Kozlov
4570: PPUSH
4571: CALL_OW 25
4575: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4576: LD_ADDR_EXP 30
4580: PUSH
4581: LD_STRING Kuzmov
4583: PPUSH
4584: CALL_OW 25
4588: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4589: LD_ADDR_EXP 31
4593: PUSH
4594: LD_STRING Lipshchin
4596: PPUSH
4597: CALL_OW 25
4601: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4602: LD_ADDR_EXP 32
4606: PUSH
4607: LD_STRING Oblukov
4609: PPUSH
4610: CALL_OW 25
4614: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4615: LD_ADDR_EXP 33
4619: PUSH
4620: LD_STRING Xavier2
4622: PPUSH
4623: CALL_OW 25
4627: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4628: LD_ADDR_EXP 34
4632: PUSH
4633: LD_STRING Gnyevko
4635: PPUSH
4636: CALL_OW 25
4640: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4641: LD_ADDR_EXP 35
4645: PUSH
4646: LD_STRING Belkov
4648: PPUSH
4649: CALL_OW 25
4653: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4654: LD_ADDR_VAR 0 3
4658: PUSH
4659: LD_EXP 19
4663: PUSH
4664: LD_EXP 20
4668: PUSH
4669: LD_EXP 21
4673: PUSH
4674: LD_EXP 22
4678: PUSH
4679: LD_EXP 23
4683: PUSH
4684: LD_EXP 24
4688: PUSH
4689: LD_EXP 25
4693: PUSH
4694: LD_EXP 26
4698: PUSH
4699: LD_EXP 27
4703: PUSH
4704: LD_EXP 28
4708: PUSH
4709: LD_EXP 29
4713: PUSH
4714: LD_EXP 30
4718: PUSH
4719: LD_EXP 31
4723: PUSH
4724: LD_EXP 32
4728: PUSH
4729: LD_EXP 33
4733: PUSH
4734: LD_EXP 34
4738: PUSH
4739: LD_EXP 35
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: ST_TO_ADDR
// for i = 1 to filter do
4763: LD_ADDR_VAR 0 2
4767: PUSH
4768: DOUBLE
4769: LD_INT 1
4771: DEC
4772: ST_TO_ADDR
4773: LD_VAR 0 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4804
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4781: LD_VAR 0 3
4785: PUSH
4786: LD_VAR 0 2
4790: ARRAY
4791: PPUSH
4792: LD_INT 6
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 49
4802: GO 4778
4804: POP
4805: POP
// end ;
4806: LD_VAR 0 1
4810: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4811: LD_INT 0
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
// uc_side := 3 ;
4817: LD_ADDR_OWVAR 20
4821: PUSH
4822: LD_INT 3
4824: ST_TO_ADDR
// uc_nation := nation_russian ;
4825: LD_ADDR_OWVAR 21
4829: PUSH
4830: LD_INT 3
4832: ST_TO_ADDR
// hc_name :=  ;
4833: LD_ADDR_OWVAR 26
4837: PUSH
4838: LD_STRING 
4840: ST_TO_ADDR
// hc_gallery :=  ;
4841: LD_ADDR_OWVAR 33
4845: PUSH
4846: LD_STRING 
4848: ST_TO_ADDR
// for i = 1 to 8 do
4849: LD_ADDR_VAR 0 2
4853: PUSH
4854: DOUBLE
4855: LD_INT 1
4857: DEC
4858: ST_TO_ADDR
4859: LD_INT 8
4861: PUSH
4862: FOR_TO
4863: IFFALSE 4905
// begin PrepareSoldier ( 0 , game_eskill ) ;
4865: LD_INT 0
4867: PPUSH
4868: LD_EXP 40
4872: PPUSH
4873: CALL_OW 381
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 4
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// filter := filter ^ un ;
4887: LD_ADDR_VAR 0 3
4891: PUSH
4892: LD_VAR 0 3
4896: PUSH
4897: LD_VAR 0 4
4901: ADD
4902: ST_TO_ADDR
// end ;
4903: GO 4862
4905: POP
4906: POP
// for i = 1 to 4 do
4907: LD_ADDR_VAR 0 2
4911: PUSH
4912: DOUBLE
4913: LD_INT 1
4915: DEC
4916: ST_TO_ADDR
4917: LD_INT 4
4919: PUSH
4920: FOR_TO
4921: IFFALSE 4963
// begin PrepareEngineer ( 0 , game_eskill ) ;
4923: LD_INT 0
4925: PPUSH
4926: LD_EXP 40
4930: PPUSH
4931: CALL_OW 382
// un := CreateHuman ;
4935: LD_ADDR_VAR 0 4
4939: PUSH
4940: CALL_OW 44
4944: ST_TO_ADDR
// filter := filter ^ un ;
4945: LD_ADDR_VAR 0 3
4949: PUSH
4950: LD_VAR 0 3
4954: PUSH
4955: LD_VAR 0 4
4959: ADD
4960: ST_TO_ADDR
// end ;
4961: GO 4920
4963: POP
4964: POP
// for i = 1 to 6 do
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: DOUBLE
4971: LD_INT 1
4973: DEC
4974: ST_TO_ADDR
4975: LD_INT 6
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5021
// begin PrepareMechanic ( 0 , game_eskill ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_EXP 40
4988: PPUSH
4989: CALL_OW 383
// un := CreateHuman ;
4993: LD_ADDR_VAR 0 4
4997: PUSH
4998: CALL_OW 44
5002: ST_TO_ADDR
// filter := filter ^ un ;
5003: LD_ADDR_VAR 0 3
5007: PUSH
5008: LD_VAR 0 3
5012: PUSH
5013: LD_VAR 0 4
5017: ADD
5018: ST_TO_ADDR
// end ;
5019: GO 4978
5021: POP
5022: POP
// for i = 1 to 4 do
5023: LD_ADDR_VAR 0 2
5027: PUSH
5028: DOUBLE
5029: LD_INT 1
5031: DEC
5032: ST_TO_ADDR
5033: LD_INT 4
5035: PUSH
5036: FOR_TO
5037: IFFALSE 5079
// begin PrepareScientist ( 0 , game_eskill ) ;
5039: LD_INT 0
5041: PPUSH
5042: LD_EXP 40
5046: PPUSH
5047: CALL_OW 384
// un := CreateHuman ;
5051: LD_ADDR_VAR 0 4
5055: PUSH
5056: CALL_OW 44
5060: ST_TO_ADDR
// filter := filter ^ un ;
5061: LD_ADDR_VAR 0 3
5065: PUSH
5066: LD_VAR 0 3
5070: PUSH
5071: LD_VAR 0 4
5075: ADD
5076: ST_TO_ADDR
// end ;
5077: GO 5036
5079: POP
5080: POP
// for i = 1 to filter do
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_VAR 0 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5122
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5099: LD_VAR 0 3
5103: PUSH
5104: LD_VAR 0 2
5108: ARRAY
5109: PPUSH
5110: LD_INT 6
5112: PPUSH
5113: LD_INT 0
5115: PPUSH
5116: CALL_OW 49
5120: GO 5096
5122: POP
5123: POP
// RU_SecondPersonnel := filter ;
5124: LD_ADDR_EXP 36
5128: PUSH
5129: LD_VAR 0 3
5133: ST_TO_ADDR
// end ;
5134: LD_VAR 0 1
5138: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5139: LD_INT 0
5141: PPUSH
5142: PPUSH
5143: PPUSH
5144: PPUSH
5145: PPUSH
5146: PPUSH
5147: PPUSH
// uc_side := 1 ;
5148: LD_ADDR_OWVAR 20
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// uc_nation := nation_american ;
5156: LD_ADDR_OWVAR 21
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5164: LD_ADDR_EXP 37
5168: PUSH
5169: LD_STRING JMM
5171: PPUSH
5172: CALL_OW 25
5176: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5177: LD_EXP 37
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5189: LD_EXP 37
5193: PPUSH
5194: LD_INT 7
5196: PPUSH
5197: LD_INT 0
5199: PPUSH
5200: CALL_OW 49
// mechs := [ ] ;
5204: LD_ADDR_VAR 0 7
5208: PUSH
5209: EMPTY
5210: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: DOUBLE
5217: LD_INT 1
5219: DEC
5220: ST_TO_ADDR
5221: LD_INT 4
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: PUSH
5235: LD_OWVAR 67
5239: ARRAY
5240: PUSH
5241: FOR_TO
5242: IFFALSE 5303
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5244: LD_INT 0
5246: PPUSH
5247: LD_EXP 39
5251: PUSH
5252: LD_INT 1
5254: PLUS
5255: PPUSH
5256: CALL_OW 381
// un := CreateHuman ;
5260: LD_ADDR_VAR 0 4
5264: PUSH
5265: CALL_OW 44
5269: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_VAR 0 3
5279: PUSH
5280: LD_VAR 0 4
5284: ADD
5285: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5286: LD_VAR 0 4
5290: PPUSH
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 0
5296: PPUSH
5297: CALL_OW 49
// end ;
5301: GO 5241
5303: POP
5304: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: DOUBLE
5311: LD_INT 1
5313: DEC
5314: ST_TO_ADDR
5315: LD_INT 7
5317: PUSH
5318: LD_INT 6
5320: PUSH
5321: LD_INT 4
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_OWVAR 67
5333: ARRAY
5334: PUSH
5335: FOR_TO
5336: IFFALSE 5382
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5338: LD_INT 0
5340: PPUSH
5341: LD_EXP 39
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: CALL_OW 383
// un := CreateHuman ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// mechs := mechs ^ un ;
5364: LD_ADDR_VAR 0 7
5368: PUSH
5369: LD_VAR 0 7
5373: PUSH
5374: LD_VAR 0 4
5378: ADD
5379: ST_TO_ADDR
// end ;
5380: GO 5335
5382: POP
5383: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5384: LD_INT 3
5386: PPUSH
5387: LD_INT 3
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 5
5395: PPUSH
5396: LD_INT 100
5398: PPUSH
5399: CALL 18242 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: DOUBLE
5409: LD_INT 1
5411: DEC
5412: ST_TO_ADDR
5413: LD_INT 7
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: LD_INT 4
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PUSH
5427: LD_OWVAR 67
5431: ARRAY
5432: PUSH
5433: FOR_TO
5434: IFFALSE 5529
// begin vehicle := CreateVehicle ;
5436: LD_ADDR_VAR 0 6
5440: PUSH
5441: CALL_OW 45
5445: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5446: LD_VAR 0 7
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_VAR 0 6
5459: PPUSH
5460: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 7
5473: PUSH
5474: LD_VAR 0 7
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: DIFF
5483: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5484: LD_VAR 0 6
5488: PPUSH
5489: LD_INT 1
5491: PPUSH
5492: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5496: LD_VAR 0 6
5500: PPUSH
5501: LD_INT 7
5503: PPUSH
5504: LD_INT 0
5506: PPUSH
5507: CALL_OW 49
// vehs := vehs ^ vehicle ;
5511: LD_ADDR_VAR 0 5
5515: PUSH
5516: LD_VAR 0 5
5520: PUSH
5521: LD_VAR 0 6
5525: ADD
5526: ST_TO_ADDR
// end ;
5527: GO 5433
5529: POP
5530: POP
// end ; end_of_file
5531: LD_VAR 0 1
5535: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5536: LD_INT 0
5538: PPUSH
5539: PPUSH
5540: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5541: LD_ADDR_OWVAR 67
5545: PUSH
5546: LD_INT 0
5548: PPUSH
5549: CALL_OW 426
5553: ST_TO_ADDR
// game_diff := Difficulty ;
5554: LD_ADDR_EXP 38
5558: PUSH
5559: LD_OWVAR 67
5563: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5564: LD_ADDR_EXP 39
5568: PUSH
5569: LD_INT 7
5571: PUSH
5572: LD_INT 6
5574: PUSH
5575: LD_INT 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: PUSH
5583: LD_EXP 38
5587: ARRAY
5588: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5589: LD_ADDR_EXP 40
5593: PUSH
5594: LD_INT 6
5596: PUSH
5597: LD_INT 7
5599: PUSH
5600: LD_INT 8
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PUSH
5608: LD_EXP 38
5612: ARRAY
5613: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5614: LD_ADDR_EXP 42
5618: PUSH
5619: LD_INT 10500
5621: PUSH
5622: LD_INT 6300
5624: PUSH
5625: LD_INT 4200
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: PUSH
5633: LD_EXP 38
5637: ARRAY
5638: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5639: LD_ADDR_EXP 41
5643: PUSH
5644: LD_INT 73500
5646: PUSH
5647: LD_INT 94500
5649: PUSH
5650: LD_INT 115500
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_EXP 38
5662: ARRAY
5663: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: LD_INT 51
5671: PUSH
5672: EMPTY
5673: LIST
5674: PUSH
5675: LD_INT 51
5677: PUSH
5678: LD_INT 57
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 51
5687: PUSH
5688: LD_INT 52
5690: PUSH
5691: LD_INT 57
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5704: LD_ADDR_EXP 43
5708: PUSH
5709: LD_INT 300
5711: PUSH
5712: LD_INT 350
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 230
5721: PUSH
5722: LD_INT 200
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 150
5731: PUSH
5732: LD_INT 100
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: LD_EXP 38
5748: ARRAY
5749: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: DOUBLE
5756: LD_INT 1
5758: DEC
5759: ST_TO_ADDR
5760: LD_VAR 0 3
5764: PUSH
5765: LD_EXP 38
5769: ARRAY
5770: PUSH
5771: FOR_TO
5772: IFFALSE 5830
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5774: LD_VAR 0 3
5778: PUSH
5779: LD_EXP 38
5783: ARRAY
5784: PUSH
5785: LD_VAR 0 2
5789: ARRAY
5790: PPUSH
5791: LD_INT 3
5793: PPUSH
5794: LD_INT 2
5796: PPUSH
5797: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5801: LD_VAR 0 3
5805: PUSH
5806: LD_EXP 38
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PPUSH
5818: LD_INT 6
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 322
// end ;
5828: GO 5771
5830: POP
5831: POP
// end ; end_of_file
5832: LD_VAR 0 1
5836: RET
// export function CustomEvent ( event ) ; begin
5837: LD_INT 0
5839: PPUSH
// end ;
5840: LD_VAR 0 2
5844: RET
// export function CustomInitMacro ( ) ; begin
5845: LD_INT 0
5847: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5848: LD_INT 1
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL 74859 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5858: LD_INT 1
5860: PPUSH
5861: LD_INT 4
5863: PPUSH
5864: CALL 74803 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5868: LD_INT 1
5870: PPUSH
5871: LD_INT 136
5873: PUSH
5874: LD_INT 130
5876: PUSH
5877: LD_INT 0
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: LD_INT 123
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: PPUSH
5903: CALL 73862 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5907: LD_INT 1
5909: PPUSH
5910: LD_INT 43
5912: PUSH
5913: LD_INT 46
5915: PUSH
5916: LD_INT 45
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: PPUSH
5924: CALL 74691 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5928: LD_INT 1
5930: PPUSH
5931: LD_INT 3
5933: PPUSH
5934: CALL 74373 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5938: LD_INT 1
5940: PPUSH
5941: LD_INT 3
5943: PPUSH
5944: CALL 74104 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5948: LD_INT 1
5950: PPUSH
5951: LD_INT 8
5953: PPUSH
5954: CALL 73723 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5958: LD_INT 1
5960: PPUSH
5961: LD_INT 22
5963: PUSH
5964: LD_INT 1
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: LD_INT 43
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 22
5981: PUSH
5982: LD_INT 1
5984: PUSH
5985: LD_INT 3
5987: PUSH
5988: LD_INT 44
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: LD_INT 3
6005: PUSH
6006: LD_INT 45
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 24
6017: PUSH
6018: LD_INT 1
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: LD_INT 43
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 24
6035: PUSH
6036: LD_INT 1
6038: PUSH
6039: LD_INT 3
6041: PUSH
6042: LD_INT 43
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: LD_INT 24
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 3
6059: PUSH
6060: LD_INT 46
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: LD_INT 43
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 22
6089: PUSH
6090: LD_INT 1
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: LD_INT 44
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL 73538 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6119: LD_INT 1
6121: PPUSH
6122: LD_INT 0
6124: PUSH
6125: LD_INT 127
6127: PUSH
6128: LD_INT 125
6130: PUSH
6131: LD_INT 5
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 6
6142: PUSH
6143: LD_INT 124
6145: PUSH
6146: LD_INT 132
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 29
6160: PUSH
6161: LD_INT 136
6163: PUSH
6164: LD_INT 130
6166: PUSH
6167: LD_INT 1
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 4
6178: PUSH
6179: LD_INT 118
6181: PUSH
6182: LD_INT 114
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 29
6196: PUSH
6197: LD_INT 145
6199: PUSH
6200: LD_INT 123
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 26
6214: PUSH
6215: LD_INT 150
6217: PUSH
6218: LD_INT 135
6220: PUSH
6221: LD_INT 1
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 26
6232: PUSH
6233: LD_INT 140
6235: PUSH
6236: LD_INT 134
6238: PUSH
6239: LD_INT 2
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 26
6250: PUSH
6251: LD_INT 137
6253: PUSH
6254: LD_INT 121
6256: PUSH
6257: LD_INT 5
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 2
6268: PUSH
6269: LD_INT 155
6271: PUSH
6272: LD_INT 130
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: LD_INT 32
6286: PUSH
6287: LD_INT 155
6289: PUSH
6290: LD_INT 130
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 32
6304: PUSH
6305: LD_INT 130
6307: PUSH
6308: LD_INT 114
6310: PUSH
6311: LD_INT 3
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 32
6322: PUSH
6323: LD_INT 142
6325: PUSH
6326: LD_INT 115
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 32
6340: PUSH
6341: LD_INT 153
6343: PUSH
6344: LD_INT 120
6346: PUSH
6347: LD_INT 3
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL 73430 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6375: LD_INT 1
6377: PPUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 12
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PPUSH
6388: CALL 74280 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6392: LD_INT 1
6394: PPUSH
6395: LD_INT 155
6397: PPUSH
6398: LD_INT 130
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: LD_INT 24
6406: PUSH
6407: LD_INT 16
6409: PUSH
6410: LD_INT 17
6412: PUSH
6413: LD_INT 18
6415: PUSH
6416: LD_INT 21
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PPUSH
6426: CALL 74485 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6430: LD_INT 2
6432: PPUSH
6433: LD_INT 3
6435: PPUSH
6436: CALL 74859 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6440: LD_INT 2
6442: PPUSH
6443: LD_INT 4
6445: PPUSH
6446: CALL 74803 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6450: LD_INT 2
6452: PPUSH
6453: LD_INT 84
6455: PUSH
6456: LD_INT 125
6458: PUSH
6459: LD_INT 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: PPUSH
6470: CALL 73862 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6474: LD_INT 2
6476: PPUSH
6477: LD_INT 43
6479: PUSH
6480: LD_INT 46
6482: PUSH
6483: LD_INT 45
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL 74691 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6495: LD_INT 2
6497: PPUSH
6498: LD_INT 3
6500: PPUSH
6501: CALL 74373 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6505: LD_INT 2
6507: PPUSH
6508: LD_INT 3
6510: PPUSH
6511: CALL 74104 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6515: LD_INT 2
6517: PPUSH
6518: LD_INT 8
6520: PPUSH
6521: CALL 73723 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6525: LD_INT 2
6527: PPUSH
6528: LD_INT 22
6530: PUSH
6531: LD_INT 3
6533: PUSH
6534: LD_INT 3
6536: PUSH
6537: LD_INT 43
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 22
6548: PUSH
6549: LD_INT 3
6551: PUSH
6552: LD_INT 3
6554: PUSH
6555: LD_INT 44
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 45
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 24
6584: PUSH
6585: LD_INT 3
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 43
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 24
6602: PUSH
6603: LD_INT 3
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: LD_INT 43
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 24
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 3
6626: PUSH
6627: LD_INT 46
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 44
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PPUSH
6682: CALL 73538 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6686: LD_INT 2
6688: PPUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 96
6694: PUSH
6695: LD_INT 125
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 6
6709: PUSH
6710: LD_INT 74
6712: PUSH
6713: LD_INT 122
6715: PUSH
6716: LD_INT 1
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 84
6730: PUSH
6731: LD_INT 125
6733: PUSH
6734: LD_INT 1
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 28
6745: PUSH
6746: LD_INT 86
6748: PUSH
6749: LD_INT 128
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 28
6763: PUSH
6764: LD_INT 85
6766: PUSH
6767: LD_INT 130
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 28
6781: PUSH
6782: LD_INT 88
6784: PUSH
6785: LD_INT 132
6787: PUSH
6788: LD_INT 5
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 106
6802: PUSH
6803: LD_INT 130
6805: PUSH
6806: LD_INT 0
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: LD_INT 99
6820: PUSH
6821: LD_INT 114
6823: PUSH
6824: LD_INT 3
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 32
6835: PUSH
6836: LD_INT 72
6838: PUSH
6839: LD_INT 112
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 32
6853: PUSH
6854: LD_INT 78
6856: PUSH
6857: LD_INT 110
6859: PUSH
6860: LD_INT 3
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 32
6871: PUSH
6872: LD_INT 84
6874: PUSH
6875: LD_INT 110
6877: PUSH
6878: LD_INT 2
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 32
6889: PUSH
6890: LD_INT 105
6892: PUSH
6893: LD_INT 117
6895: PUSH
6896: LD_INT 3
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL 73430 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6923: LD_INT 2
6925: PPUSH
6926: LD_INT 14
6928: PUSH
6929: LD_INT 11
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL 74280 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6940: LD_INT 2
6942: PPUSH
6943: LD_INT 106
6945: PPUSH
6946: LD_INT 130
6948: PPUSH
6949: LD_INT 0
6951: PPUSH
6952: LD_INT 24
6954: PUSH
6955: LD_INT 16
6957: PUSH
6958: LD_INT 17
6960: PUSH
6961: LD_INT 18
6963: PUSH
6964: LD_INT 21
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL 74485 0 5
// end ;
6978: LD_VAR 0 1
6982: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6983: LD_INT 22
6985: PUSH
6986: LD_INT 3
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 3
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: IFFALSE 8154
7013: GO 7015
7015: DISABLE
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7024: LD_INT 6300
7026: PUSH
7027: LD_INT 4200
7029: PUSH
7030: LD_INT 2100
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_OWVAR 67
7042: ARRAY
7043: PPUSH
7044: CALL_OW 67
// base := 2 ;
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_INT 2
7055: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 69
7084: NOT
7085: IFFALSE 7089
// continue ;
7087: GO 7024
// case Rand ( 1 , 3 ) of 1 :
7089: LD_INT 1
7091: PPUSH
7092: LD_INT 3
7094: PPUSH
7095: CALL_OW 12
7099: PUSH
7100: LD_INT 1
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7284
7108: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7109: LD_ADDR_VAR 0 3
7113: PUSH
7114: LD_INT 22
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: LD_INT 43
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 24
7134: PUSH
7135: LD_INT 3
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: LD_INT 46
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 24
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: LD_INT 43
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 24
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 3
7176: PUSH
7177: LD_INT 46
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_INT 3
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: LD_INT 45
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: LD_INT 3
7212: PUSH
7213: LD_INT 43
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 24
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: LD_INT 46
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 45
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7268: LD_VAR 0 2
7272: PPUSH
7273: LD_VAR 0 3
7277: PPUSH
7278: CALL 73586 0 2
// end ; 2 :
7282: GO 7615
7284: LD_INT 2
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7430
7292: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7293: LD_ADDR_VAR 0 3
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 3
7303: PUSH
7304: LD_INT 3
7306: PUSH
7307: LD_INT 43
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 24
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 24
7336: PUSH
7337: LD_INT 3
7339: PUSH
7340: LD_INT 3
7342: PUSH
7343: LD_INT 43
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 24
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: LD_INT 46
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 3
7375: PUSH
7376: LD_INT 3
7378: PUSH
7379: LD_INT 45
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 22
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 3
7396: PUSH
7397: LD_INT 45
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7414: LD_VAR 0 2
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL 73586 0 2
// end ; 3 :
7428: GO 7615
7430: LD_INT 3
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7614
7438: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: LD_INT 22
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: LD_INT 3
7452: PUSH
7453: LD_INT 43
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 24
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 46
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 22
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: LD_INT 3
7488: PUSH
7489: LD_INT 43
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 24
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 3
7506: PUSH
7507: LD_INT 46
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 22
7518: PUSH
7519: LD_INT 3
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: LD_INT 45
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 22
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: LD_INT 3
7542: PUSH
7543: LD_INT 43
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 24
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 3
7560: PUSH
7561: LD_INT 46
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 3
7578: PUSH
7579: LD_INT 45
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7598: LD_VAR 0 2
7602: PPUSH
7603: LD_VAR 0 3
7607: PPUSH
7608: CALL 73586 0 2
// end ; end ;
7612: GO 7615
7614: POP
// repeat wait ( 0 0$1 ) ;
7615: LD_INT 35
7617: PPUSH
7618: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7622: LD_VAR 0 2
7626: PPUSH
7627: CALL 73934 0 1
7631: PUSH
7632: LD_INT 0
7634: EQUAL
7635: IFFALSE 7615
// wait ( 0 0$30 ) ;
7637: LD_INT 1050
7639: PPUSH
7640: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7644: LD_ADDR_VAR 0 5
7648: PUSH
7649: LD_INT 86
7651: PUSH
7652: LD_INT 77
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 63
7661: PUSH
7662: LD_INT 38
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7673: LD_ADDR_VAR 0 4
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: LD_INT 0
7686: PUSH
7687: LD_INT 1
7689: PUSH
7690: LD_INT 0
7692: PUSH
7693: LD_INT 0
7695: PUSH
7696: LD_INT 0
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: LD_INT 0
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7720: LD_ADDR_VAR 0 6
7724: PUSH
7725: LD_EXP 83
7729: PUSH
7730: LD_VAR 0 2
7734: ARRAY
7735: PUSH
7736: LD_EXP 86
7740: PUSH
7741: LD_VAR 0 2
7745: ARRAY
7746: DIFF
7747: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7748: LD_ADDR_EXP 83
7752: PUSH
7753: LD_EXP 83
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: LD_EXP 83
7767: PUSH
7768: LD_VAR 0 2
7772: ARRAY
7773: PUSH
7774: LD_VAR 0 6
7778: DIFF
7779: PPUSH
7780: CALL_OW 1
7784: ST_TO_ADDR
// if not attackers then
7785: LD_VAR 0 6
7789: NOT
7790: IFFALSE 7794
// continue ;
7792: GO 7024
// repeat wait ( 0 0$1 ) ;
7794: LD_INT 35
7796: PPUSH
7797: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7801: LD_VAR 0 6
7805: PPUSH
7806: LD_INT 60
7808: PUSH
7809: EMPTY
7810: LIST
7811: PPUSH
7812: CALL_OW 72
7816: NOT
7817: IFFALSE 7794
// repeat wait ( 0 0$1 ) ;
7819: LD_INT 35
7821: PPUSH
7822: CALL_OW 67
// for i in attackers do
7826: LD_ADDR_VAR 0 1
7830: PUSH
7831: LD_VAR 0 6
7835: PUSH
7836: FOR_IN
7837: IFFALSE 8121
// begin if IsDead ( i ) then
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 301
7848: IFFALSE 7866
// attackers := attackers diff i ;
7850: LD_ADDR_VAR 0 6
7854: PUSH
7855: LD_VAR 0 6
7859: PUSH
7860: LD_VAR 0 1
7864: DIFF
7865: ST_TO_ADDR
// if not HasTask ( i ) then
7866: LD_VAR 0 1
7870: PPUSH
7871: CALL_OW 314
7875: NOT
7876: IFFALSE 8119
// begin if not GetTag ( i ) then
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 110
7887: NOT
7888: IFFALSE 7980
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_VAR 0 5
7899: PUSH
7900: LD_INT 1
7902: ARRAY
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PPUSH
7908: LD_VAR 0 5
7912: PUSH
7913: LD_INT 1
7915: ARRAY
7916: PUSH
7917: LD_INT 2
7919: ARRAY
7920: PPUSH
7921: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 5
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PPUSH
7943: LD_VAR 0 5
7947: PUSH
7948: LD_INT 1
7950: ARRAY
7951: PUSH
7952: LD_INT 2
7954: ARRAY
7955: PPUSH
7956: CALL_OW 297
7960: PUSH
7961: LD_INT 8
7963: LESS
7964: IFFALSE 7978
// SetTag ( i , 1 ) ;
7966: LD_VAR 0 1
7970: PPUSH
7971: LD_INT 1
7973: PPUSH
7974: CALL_OW 109
// end else
7978: GO 8119
// if GetTag ( i ) = 1 then
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 110
7989: PUSH
7990: LD_INT 1
7992: EQUAL
7993: IFFALSE 8085
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_VAR 0 5
8004: PUSH
8005: LD_INT 2
8007: ARRAY
8008: PUSH
8009: LD_INT 1
8011: ARRAY
8012: PPUSH
8013: LD_VAR 0 5
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
8030: LD_VAR 0 1
8034: PPUSH
8035: LD_VAR 0 5
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PUSH
8044: LD_INT 1
8046: ARRAY
8047: PPUSH
8048: LD_VAR 0 5
8052: PUSH
8053: LD_INT 2
8055: ARRAY
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PPUSH
8061: CALL_OW 297
8065: PUSH
8066: LD_INT 8
8068: LESS
8069: IFFALSE 8083
// SetTag ( i , 2 ) ;
8071: LD_VAR 0 1
8075: PPUSH
8076: LD_INT 2
8078: PPUSH
8079: CALL_OW 109
// end else
8083: GO 8119
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_INT 81
8092: PUSH
8093: LD_INT 3
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 69
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 74
8114: PPUSH
8115: CALL_OW 115
// end ; end ;
8119: GO 7836
8121: POP
8122: POP
// until not attackers ;
8123: LD_VAR 0 6
8127: NOT
8128: IFFALSE 7819
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8130: LD_EXP 64
8134: PUSH
8135: LD_VAR 0 2
8139: ARRAY
8140: PPUSH
8141: LD_INT 50
8143: PUSH
8144: EMPTY
8145: LIST
8146: PPUSH
8147: CALL_OW 72
8151: NOT
8152: IFFALSE 7024
// end ;
8154: PPOPN 6
8156: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 3
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 69
8185: IFFALSE 9369
8187: GO 8189
8189: DISABLE
8190: LD_INT 0
8192: PPUSH
8193: PPUSH
8194: PPUSH
8195: PPUSH
8196: PPUSH
8197: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
8198: LD_INT 6300
8200: PUSH
8201: LD_INT 4200
8203: PUSH
8204: LD_INT 2100
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_OWVAR 67
8216: ARRAY
8217: PPUSH
8218: CALL_OW 67
// base := 1 ;
8222: LD_ADDR_VAR 0 2
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
8230: LD_INT 22
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 30
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: NOT
8259: IFFALSE 8263
// continue ;
8261: GO 8198
// case Rand ( 1 , 3 ) of 1 :
8263: LD_INT 1
8265: PPUSH
8266: LD_INT 3
8268: PPUSH
8269: CALL_OW 12
8273: PUSH
8274: LD_INT 1
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8458
8282: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8283: LD_ADDR_VAR 0 3
8287: PUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: LD_INT 3
8296: PUSH
8297: LD_INT 43
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: LD_INT 3
8314: PUSH
8315: LD_INT 46
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 24
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_INT 43
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 24
8344: PUSH
8345: LD_INT 1
8347: PUSH
8348: LD_INT 3
8350: PUSH
8351: LD_INT 46
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 22
8362: PUSH
8363: LD_INT 1
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: LD_INT 45
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: LD_INT 3
8386: PUSH
8387: LD_INT 43
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 24
8398: PUSH
8399: LD_INT 1
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: LD_INT 46
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 22
8416: PUSH
8417: LD_INT 1
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: LD_INT 45
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_VAR 0 3
8451: PPUSH
8452: CALL 73586 0 2
// end ; 2 :
8456: GO 8827
8458: LD_INT 2
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8642
8466: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_INT 24
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: LD_INT 3
8480: PUSH
8481: LD_INT 43
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 24
8492: PUSH
8493: LD_INT 1
8495: PUSH
8496: LD_INT 3
8498: PUSH
8499: LD_INT 46
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 24
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 3
8516: PUSH
8517: LD_INT 43
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 24
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 46
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 22
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 45
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 1
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: LD_INT 45
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 22
8582: PUSH
8583: LD_INT 1
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 45
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 22
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 45
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8626: LD_VAR 0 2
8630: PPUSH
8631: LD_VAR 0 3
8635: PPUSH
8636: CALL 73586 0 2
// end ; 3 :
8640: GO 8827
8642: LD_INT 3
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8826
8650: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8651: LD_ADDR_VAR 0 3
8655: PUSH
8656: LD_INT 22
8658: PUSH
8659: LD_INT 1
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 43
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 24
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: LD_INT 46
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 22
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: LD_INT 3
8700: PUSH
8701: LD_INT 43
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 24
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: LD_INT 3
8718: PUSH
8719: LD_INT 46
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 22
8730: PUSH
8731: LD_INT 1
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: LD_INT 45
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 22
8748: PUSH
8749: LD_INT 1
8751: PUSH
8752: LD_INT 3
8754: PUSH
8755: LD_INT 43
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 24
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: LD_INT 3
8772: PUSH
8773: LD_INT 46
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 1
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 45
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8810: LD_VAR 0 2
8814: PPUSH
8815: LD_VAR 0 3
8819: PPUSH
8820: CALL 73586 0 2
// end ; end ;
8824: GO 8827
8826: POP
// repeat wait ( 0 0$1 ) ;
8827: LD_INT 35
8829: PPUSH
8830: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8834: LD_VAR 0 2
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: CALL 75004 0 2
8846: PUSH
8847: LD_INT 8
8849: GREATEREQUAL
8850: IFFALSE 8827
// wait ( 0 0$30 ) ;
8852: LD_INT 1050
8854: PPUSH
8855: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8859: LD_ADDR_VAR 0 5
8863: PUSH
8864: LD_INT 144
8866: PUSH
8867: LD_INT 65
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 63
8876: PUSH
8877: LD_INT 38
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: LD_INT 0
8895: PUSH
8896: LD_INT 0
8898: PUSH
8899: LD_INT 0
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: LD_INT 0
8910: PUSH
8911: LD_INT 0
8913: PUSH
8914: LD_INT 0
8916: PUSH
8917: LD_INT 1
8919: PUSH
8920: LD_INT 0
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_EXP 83
8944: PUSH
8945: LD_VAR 0 2
8949: ARRAY
8950: PUSH
8951: LD_EXP 86
8955: PUSH
8956: LD_VAR 0 2
8960: ARRAY
8961: DIFF
8962: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8963: LD_ADDR_EXP 83
8967: PUSH
8968: LD_EXP 83
8972: PPUSH
8973: LD_VAR 0 2
8977: PPUSH
8978: LD_EXP 83
8982: PUSH
8983: LD_VAR 0 2
8987: ARRAY
8988: PUSH
8989: LD_VAR 0 6
8993: DIFF
8994: PPUSH
8995: CALL_OW 1
8999: ST_TO_ADDR
// if not attackers then
9000: LD_VAR 0 6
9004: NOT
9005: IFFALSE 9009
// continue ;
9007: GO 8198
// repeat wait ( 0 0$1 ) ;
9009: LD_INT 35
9011: PPUSH
9012: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
9016: LD_VAR 0 6
9020: PPUSH
9021: LD_INT 60
9023: PUSH
9024: EMPTY
9025: LIST
9026: PPUSH
9027: CALL_OW 72
9031: NOT
9032: IFFALSE 9009
// repeat wait ( 0 0$1 ) ;
9034: LD_INT 35
9036: PPUSH
9037: CALL_OW 67
// for i in attackers do
9041: LD_ADDR_VAR 0 1
9045: PUSH
9046: LD_VAR 0 6
9050: PUSH
9051: FOR_IN
9052: IFFALSE 9336
// begin if IsDead ( i ) then
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 301
9063: IFFALSE 9081
// attackers := attackers diff i ;
9065: LD_ADDR_VAR 0 6
9069: PUSH
9070: LD_VAR 0 6
9074: PUSH
9075: LD_VAR 0 1
9079: DIFF
9080: ST_TO_ADDR
// if not HasTask ( i ) then
9081: LD_VAR 0 1
9085: PPUSH
9086: CALL_OW 314
9090: NOT
9091: IFFALSE 9334
// begin if not GetTag ( i ) then
9093: LD_VAR 0 1
9097: PPUSH
9098: CALL_OW 110
9102: NOT
9103: IFFALSE 9195
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_VAR 0 5
9114: PUSH
9115: LD_INT 1
9117: ARRAY
9118: PUSH
9119: LD_INT 1
9121: ARRAY
9122: PPUSH
9123: LD_VAR 0 5
9127: PUSH
9128: LD_INT 1
9130: ARRAY
9131: PUSH
9132: LD_INT 2
9134: ARRAY
9135: PPUSH
9136: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
9140: LD_VAR 0 1
9144: PPUSH
9145: LD_VAR 0 5
9149: PUSH
9150: LD_INT 1
9152: ARRAY
9153: PUSH
9154: LD_INT 1
9156: ARRAY
9157: PPUSH
9158: LD_VAR 0 5
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PUSH
9167: LD_INT 2
9169: ARRAY
9170: PPUSH
9171: CALL_OW 297
9175: PUSH
9176: LD_INT 8
9178: LESS
9179: IFFALSE 9193
// SetTag ( i , 1 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 109
// end else
9193: GO 9334
// if GetTag ( i ) = 1 then
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 110
9204: PUSH
9205: LD_INT 1
9207: EQUAL
9208: IFFALSE 9300
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
9210: LD_VAR 0 1
9214: PPUSH
9215: LD_VAR 0 5
9219: PUSH
9220: LD_INT 2
9222: ARRAY
9223: PUSH
9224: LD_INT 1
9226: ARRAY
9227: PPUSH
9228: LD_VAR 0 5
9232: PUSH
9233: LD_INT 2
9235: ARRAY
9236: PUSH
9237: LD_INT 2
9239: ARRAY
9240: PPUSH
9241: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_VAR 0 5
9254: PUSH
9255: LD_INT 2
9257: ARRAY
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_VAR 0 5
9267: PUSH
9268: LD_INT 2
9270: ARRAY
9271: PUSH
9272: LD_INT 2
9274: ARRAY
9275: PPUSH
9276: CALL_OW 297
9280: PUSH
9281: LD_INT 8
9283: LESS
9284: IFFALSE 9298
// SetTag ( i , 2 ) ;
9286: LD_VAR 0 1
9290: PPUSH
9291: LD_INT 2
9293: PPUSH
9294: CALL_OW 109
// end else
9298: GO 9334
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: LD_INT 81
9307: PUSH
9308: LD_INT 3
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PPUSH
9315: CALL_OW 69
9319: PPUSH
9320: LD_VAR 0 1
9324: PPUSH
9325: CALL_OW 74
9329: PPUSH
9330: CALL_OW 115
// end ; end ;
9334: GO 9051
9336: POP
9337: POP
// until not attackers ;
9338: LD_VAR 0 6
9342: NOT
9343: IFFALSE 9034
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
9345: LD_EXP 64
9349: PUSH
9350: LD_VAR 0 2
9354: ARRAY
9355: PPUSH
9356: LD_INT 50
9358: PUSH
9359: EMPTY
9360: LIST
9361: PPUSH
9362: CALL_OW 72
9366: NOT
9367: IFFALSE 8198
// end ;
9369: PPOPN 6
9371: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9372: LD_EXP 4
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_INT 3
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 1
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 69
9405: PUSH
9406: LD_INT 0
9408: EQUAL
9409: AND
9410: IFFALSE 9423
9412: GO 9414
9414: DISABLE
// RussiansDefeated := true ;
9415: LD_ADDR_EXP 44
9419: PUSH
9420: LD_INT 1
9422: ST_TO_ADDR
9423: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
9424: LD_EXP 4
9428: PUSH
9429: LD_EXP 6
9433: NOT
9434: AND
9435: IFFALSE 10859
9437: GO 9439
9439: DISABLE
9440: LD_INT 0
9442: PPUSH
9443: PPUSH
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
9448: PPUSH
9449: PPUSH
9450: PPUSH
9451: PPUSH
9452: PPUSH
9453: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
9454: LD_INT 8400
9456: PPUSH
9457: LD_INT 9450
9459: PPUSH
9460: CALL_OW 12
9464: PUSH
9465: LD_INT 9450
9467: PPUSH
9468: LD_INT 7350
9470: PPUSH
9471: CALL_OW 12
9475: PUSH
9476: LD_INT 6300
9478: PPUSH
9479: LD_INT 4200
9481: PPUSH
9482: CALL_OW 12
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: PUSH
9492: LD_OWVAR 67
9496: ARRAY
9497: PPUSH
9498: CALL_OW 67
// filter := [ ] ;
9502: LD_ADDR_VAR 0 3
9506: PUSH
9507: EMPTY
9508: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9509: LD_ADDR_VAR 0 4
9513: PUSH
9514: LD_INT 2
9516: PPUSH
9517: LD_INT 3
9519: PPUSH
9520: CALL_OW 12
9524: PUSH
9525: LD_INT 3
9527: PPUSH
9528: LD_INT 4
9530: PPUSH
9531: CALL_OW 12
9535: PUSH
9536: LD_INT 3
9538: PPUSH
9539: LD_INT 5
9541: PPUSH
9542: CALL_OW 12
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: LD_OWVAR 67
9556: ARRAY
9557: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9558: LD_ADDR_VAR 0 5
9562: PUSH
9563: LD_INT 1
9565: PUSH
9566: LD_INT 1
9568: PPUSH
9569: LD_INT 2
9571: PPUSH
9572: CALL_OW 12
9576: PUSH
9577: LD_INT 2
9579: PPUSH
9580: LD_INT 3
9582: PPUSH
9583: CALL_OW 12
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: LD_OWVAR 67
9597: ARRAY
9598: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9599: LD_ADDR_VAR 0 6
9603: PUSH
9604: LD_INT 2
9606: PPUSH
9607: LD_INT 3
9609: PPUSH
9610: CALL_OW 12
9614: PUSH
9615: LD_INT 2
9617: PPUSH
9618: LD_INT 4
9620: PPUSH
9621: CALL_OW 12
9625: PUSH
9626: LD_INT 3
9628: PPUSH
9629: LD_INT 5
9631: PPUSH
9632: CALL_OW 12
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: PUSH
9642: LD_OWVAR 67
9646: ARRAY
9647: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9648: LD_ADDR_VAR 0 8
9652: PUSH
9653: LD_INT 1
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_OWVAR 67
9671: ARRAY
9672: ST_TO_ADDR
// uc_side := 3 ;
9673: LD_ADDR_OWVAR 20
9677: PUSH
9678: LD_INT 3
9680: ST_TO_ADDR
// uc_nation := nation_russian ;
9681: LD_ADDR_OWVAR 21
9685: PUSH
9686: LD_INT 3
9688: ST_TO_ADDR
// for i = 1 to soldiers do
9689: LD_ADDR_VAR 0 1
9693: PUSH
9694: DOUBLE
9695: LD_INT 1
9697: DEC
9698: ST_TO_ADDR
9699: LD_VAR 0 4
9703: PUSH
9704: FOR_TO
9705: IFFALSE 9747
// begin PrepareSoldier ( 0 , game_eskill ) ;
9707: LD_INT 0
9709: PPUSH
9710: LD_EXP 40
9714: PPUSH
9715: CALL_OW 381
// un := CreateHuman ;
9719: LD_ADDR_VAR 0 2
9723: PUSH
9724: CALL_OW 44
9728: ST_TO_ADDR
// filter := filter ^ un ;
9729: LD_ADDR_VAR 0 3
9733: PUSH
9734: LD_VAR 0 3
9738: PUSH
9739: LD_VAR 0 2
9743: ADD
9744: ST_TO_ADDR
// end ;
9745: GO 9704
9747: POP
9748: POP
// for i = 1 to bazookas do
9749: LD_ADDR_VAR 0 1
9753: PUSH
9754: DOUBLE
9755: LD_INT 1
9757: DEC
9758: ST_TO_ADDR
9759: LD_VAR 0 5
9763: PUSH
9764: FOR_TO
9765: IFFALSE 9815
// begin PrepareSoldier ( 0 , game_eskill ) ;
9767: LD_INT 0
9769: PPUSH
9770: LD_EXP 40
9774: PPUSH
9775: CALL_OW 381
// hc_class := class_bazooker ;
9779: LD_ADDR_OWVAR 28
9783: PUSH
9784: LD_INT 9
9786: ST_TO_ADDR
// un := CreateHuman ;
9787: LD_ADDR_VAR 0 2
9791: PUSH
9792: CALL_OW 44
9796: ST_TO_ADDR
// filter := filter ^ un ;
9797: LD_ADDR_VAR 0 3
9801: PUSH
9802: LD_VAR 0 3
9806: PUSH
9807: LD_VAR 0 2
9811: ADD
9812: ST_TO_ADDR
// end ;
9813: GO 9764
9815: POP
9816: POP
// for i = 1 to medics do
9817: LD_ADDR_VAR 0 1
9821: PUSH
9822: DOUBLE
9823: LD_INT 1
9825: DEC
9826: ST_TO_ADDR
9827: LD_VAR 0 8
9831: PUSH
9832: FOR_TO
9833: IFFALSE 9875
// begin PrepareScientist ( 0 , game_eskill ) ;
9835: LD_INT 0
9837: PPUSH
9838: LD_EXP 40
9842: PPUSH
9843: CALL_OW 384
// un := CreateHuman ;
9847: LD_ADDR_VAR 0 2
9851: PUSH
9852: CALL_OW 44
9856: ST_TO_ADDR
// filter := filter ^ un ;
9857: LD_ADDR_VAR 0 3
9861: PUSH
9862: LD_VAR 0 3
9866: PUSH
9867: LD_VAR 0 2
9871: ADD
9872: ST_TO_ADDR
// end ;
9873: GO 9832
9875: POP
9876: POP
// for i = 1 to vehs do
9877: LD_ADDR_VAR 0 1
9881: PUSH
9882: DOUBLE
9883: LD_INT 1
9885: DEC
9886: ST_TO_ADDR
9887: LD_VAR 0 6
9891: PUSH
9892: FOR_TO
9893: IFFALSE 10085
// begin case Rand ( 1 , 5 ) of 1 :
9895: LD_INT 1
9897: PPUSH
9898: LD_INT 5
9900: PPUSH
9901: CALL_OW 12
9905: PUSH
9906: LD_INT 1
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 9936
9914: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
9915: LD_INT 22
9917: PPUSH
9918: LD_INT 3
9920: PPUSH
9921: LD_INT 3
9923: PPUSH
9924: LD_INT 43
9926: PPUSH
9927: LD_INT 100
9929: PPUSH
9930: CALL 18242 0 5
9934: GO 10057
9936: LD_INT 2
9938: DOUBLE
9939: EQUAL
9940: IFTRUE 9944
9942: GO 9966
9944: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
9945: LD_INT 22
9947: PPUSH
9948: LD_INT 3
9950: PPUSH
9951: LD_INT 3
9953: PPUSH
9954: LD_INT 44
9956: PPUSH
9957: LD_INT 100
9959: PPUSH
9960: CALL 18242 0 5
9964: GO 10057
9966: LD_INT 3
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 9996
9974: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
9975: LD_INT 22
9977: PPUSH
9978: LD_INT 3
9980: PPUSH
9981: LD_INT 3
9983: PPUSH
9984: LD_INT 45
9986: PPUSH
9987: LD_INT 100
9989: PPUSH
9990: CALL 18242 0 5
9994: GO 10057
9996: LD_INT 4
9998: DOUBLE
9999: EQUAL
10000: IFTRUE 10004
10002: GO 10026
10004: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
10005: LD_INT 24
10007: PPUSH
10008: LD_INT 3
10010: PPUSH
10011: LD_INT 3
10013: PPUSH
10014: LD_INT 43
10016: PPUSH
10017: LD_INT 100
10019: PPUSH
10020: CALL 18242 0 5
10024: GO 10057
10026: LD_INT 5
10028: DOUBLE
10029: EQUAL
10030: IFTRUE 10034
10032: GO 10056
10034: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
10035: LD_INT 24
10037: PPUSH
10038: LD_INT 3
10040: PPUSH
10041: LD_INT 3
10043: PPUSH
10044: LD_INT 46
10046: PPUSH
10047: LD_INT 100
10049: PPUSH
10050: CALL 18242 0 5
10054: GO 10057
10056: POP
// vehicle := CreateVehicle ;
10057: LD_ADDR_VAR 0 7
10061: PUSH
10062: CALL_OW 45
10066: ST_TO_ADDR
// filter := filter ^ vehicle ;
10067: LD_ADDR_VAR 0 3
10071: PUSH
10072: LD_VAR 0 3
10076: PUSH
10077: LD_VAR 0 7
10081: ADD
10082: ST_TO_ADDR
// end ;
10083: GO 9892
10085: POP
10086: POP
// for i = 1 to filter do
10087: LD_ADDR_VAR 0 1
10091: PUSH
10092: DOUBLE
10093: LD_INT 1
10095: DEC
10096: ST_TO_ADDR
10097: LD_VAR 0 3
10101: PUSH
10102: FOR_TO
10103: IFFALSE 10128
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
10105: LD_VAR 0 3
10109: PUSH
10110: LD_VAR 0 1
10114: ARRAY
10115: PPUSH
10116: LD_INT 14
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
10126: GO 10102
10128: POP
10129: POP
// case Rand ( 1 , 3 ) of 1 :
10130: LD_INT 1
10132: PPUSH
10133: LD_INT 3
10135: PPUSH
10136: CALL_OW 12
10140: PUSH
10141: LD_INT 1
10143: DOUBLE
10144: EQUAL
10145: IFTRUE 10149
10147: GO 10203
10149: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
10150: LD_ADDR_VAR 0 11
10154: PUSH
10155: LD_INT 165
10157: PUSH
10158: LD_INT 114
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 104
10167: PUSH
10168: LD_INT 108
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 86
10177: PUSH
10178: LD_INT 77
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 63
10187: PUSH
10188: LD_INT 38
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: ST_TO_ADDR
10201: GO 10328
10203: LD_INT 2
10205: DOUBLE
10206: EQUAL
10207: IFTRUE 10211
10209: GO 10265
10211: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
10212: LD_ADDR_VAR 0 11
10216: PUSH
10217: LD_INT 165
10219: PUSH
10220: LD_INT 114
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 146
10229: PUSH
10230: LD_INT 71
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 112
10239: PUSH
10240: LD_INT 41
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 63
10249: PUSH
10250: LD_INT 38
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: ST_TO_ADDR
10263: GO 10328
10265: LD_INT 3
10267: DOUBLE
10268: EQUAL
10269: IFTRUE 10273
10271: GO 10327
10273: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
10274: LD_ADDR_VAR 0 11
10278: PUSH
10279: LD_INT 165
10281: PUSH
10282: LD_INT 114
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 63
10291: PUSH
10292: LD_INT 99
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 55
10301: PUSH
10302: LD_INT 77
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 63
10311: PUSH
10312: LD_INT 38
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: ST_TO_ADDR
10325: GO 10328
10327: POP
// attackers := filter ;
10328: LD_ADDR_VAR 0 10
10332: PUSH
10333: LD_VAR 0 3
10337: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10338: LD_INT 35
10340: PPUSH
10341: CALL_OW 67
// for i in attackers do
10345: LD_ADDR_VAR 0 1
10349: PUSH
10350: LD_VAR 0 10
10354: PUSH
10355: FOR_IN
10356: IFFALSE 10850
// begin if IsDead ( i ) then
10358: LD_VAR 0 1
10362: PPUSH
10363: CALL_OW 301
10367: IFFALSE 10385
// attackers := attackers diff i ;
10369: LD_ADDR_VAR 0 10
10373: PUSH
10374: LD_VAR 0 10
10378: PUSH
10379: LD_VAR 0 1
10383: DIFF
10384: ST_TO_ADDR
// if not HasTask ( i ) then
10385: LD_VAR 0 1
10389: PPUSH
10390: CALL_OW 314
10394: NOT
10395: IFFALSE 10848
// begin if not GetTag ( i ) then
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 110
10406: NOT
10407: IFFALSE 10499
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
10409: LD_VAR 0 1
10413: PPUSH
10414: LD_VAR 0 11
10418: PUSH
10419: LD_INT 1
10421: ARRAY
10422: PUSH
10423: LD_INT 1
10425: ARRAY
10426: PPUSH
10427: LD_VAR 0 11
10431: PUSH
10432: LD_INT 1
10434: ARRAY
10435: PUSH
10436: LD_INT 2
10438: ARRAY
10439: PPUSH
10440: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
10444: LD_VAR 0 1
10448: PPUSH
10449: LD_VAR 0 11
10453: PUSH
10454: LD_INT 1
10456: ARRAY
10457: PUSH
10458: LD_INT 1
10460: ARRAY
10461: PPUSH
10462: LD_VAR 0 11
10466: PUSH
10467: LD_INT 1
10469: ARRAY
10470: PUSH
10471: LD_INT 2
10473: ARRAY
10474: PPUSH
10475: CALL_OW 297
10479: PUSH
10480: LD_INT 8
10482: LESS
10483: IFFALSE 10497
// SetTag ( i , 1 ) ;
10485: LD_VAR 0 1
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 109
// end else
10497: GO 10848
// if GetTag ( i ) = 1 then
10499: LD_VAR 0 1
10503: PPUSH
10504: CALL_OW 110
10508: PUSH
10509: LD_INT 1
10511: EQUAL
10512: IFFALSE 10604
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_VAR 0 11
10523: PUSH
10524: LD_INT 2
10526: ARRAY
10527: PUSH
10528: LD_INT 1
10530: ARRAY
10531: PPUSH
10532: LD_VAR 0 11
10536: PUSH
10537: LD_INT 2
10539: ARRAY
10540: PUSH
10541: LD_INT 2
10543: ARRAY
10544: PPUSH
10545: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
10549: LD_VAR 0 1
10553: PPUSH
10554: LD_VAR 0 11
10558: PUSH
10559: LD_INT 2
10561: ARRAY
10562: PUSH
10563: LD_INT 1
10565: ARRAY
10566: PPUSH
10567: LD_VAR 0 11
10571: PUSH
10572: LD_INT 2
10574: ARRAY
10575: PUSH
10576: LD_INT 2
10578: ARRAY
10579: PPUSH
10580: CALL_OW 297
10584: PUSH
10585: LD_INT 8
10587: LESS
10588: IFFALSE 10602
// SetTag ( i , 2 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: CALL_OW 109
// end else
10602: GO 10848
// if GetTag ( i ) = 2 then
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 110
10613: PUSH
10614: LD_INT 2
10616: EQUAL
10617: IFFALSE 10709
// begin ComAgressiveMove ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) ;
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_VAR 0 11
10628: PUSH
10629: LD_INT 3
10631: ARRAY
10632: PUSH
10633: LD_INT 1
10635: ARRAY
10636: PPUSH
10637: LD_VAR 0 11
10641: PUSH
10642: LD_INT 3
10644: ARRAY
10645: PUSH
10646: LD_INT 2
10648: ARRAY
10649: PPUSH
10650: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) < 8 then
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 11
10663: PUSH
10664: LD_INT 3
10666: ARRAY
10667: PUSH
10668: LD_INT 1
10670: ARRAY
10671: PPUSH
10672: LD_VAR 0 11
10676: PUSH
10677: LD_INT 3
10679: ARRAY
10680: PUSH
10681: LD_INT 2
10683: ARRAY
10684: PPUSH
10685: CALL_OW 297
10689: PUSH
10690: LD_INT 8
10692: LESS
10693: IFFALSE 10707
// SetTag ( i , 3 ) ;
10695: LD_VAR 0 1
10699: PPUSH
10700: LD_INT 3
10702: PPUSH
10703: CALL_OW 109
// end else
10707: GO 10848
// if GetTag ( i ) = 3 then
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 110
10718: PUSH
10719: LD_INT 3
10721: EQUAL
10722: IFFALSE 10814
// begin ComAgressiveMove ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) ;
10724: LD_VAR 0 1
10728: PPUSH
10729: LD_VAR 0 11
10733: PUSH
10734: LD_INT 4
10736: ARRAY
10737: PUSH
10738: LD_INT 1
10740: ARRAY
10741: PPUSH
10742: LD_VAR 0 11
10746: PUSH
10747: LD_INT 4
10749: ARRAY
10750: PUSH
10751: LD_INT 2
10753: ARRAY
10754: PPUSH
10755: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) < 8 then
10759: LD_VAR 0 1
10763: PPUSH
10764: LD_VAR 0 11
10768: PUSH
10769: LD_INT 4
10771: ARRAY
10772: PUSH
10773: LD_INT 1
10775: ARRAY
10776: PPUSH
10777: LD_VAR 0 11
10781: PUSH
10782: LD_INT 4
10784: ARRAY
10785: PUSH
10786: LD_INT 2
10788: ARRAY
10789: PPUSH
10790: CALL_OW 297
10794: PUSH
10795: LD_INT 8
10797: LESS
10798: IFFALSE 10812
// SetTag ( i , 4 ) ;
10800: LD_VAR 0 1
10804: PPUSH
10805: LD_INT 4
10807: PPUSH
10808: CALL_OW 109
// end else
10812: GO 10848
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10814: LD_VAR 0 1
10818: PPUSH
10819: LD_INT 81
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PPUSH
10829: CALL_OW 69
10833: PPUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 74
10843: PPUSH
10844: CALL_OW 115
// end ; end ;
10848: GO 10355
10850: POP
10851: POP
// until not attackers ;
10852: LD_VAR 0 10
10856: NOT
10857: IFFALSE 10338
// end ;
10859: PPOPN 12
10861: END
// every 0 0$1 do var i , tmp ;
10862: GO 10864
10864: DISABLE
10865: LD_INT 0
10867: PPUSH
10868: PPUSH
// begin enable ;
10869: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
10870: LD_ADDR_VAR 0 2
10874: PUSH
10875: LD_INT 3
10877: PUSH
10878: LD_INT 22
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 32
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: ST_TO_ADDR
// if tmp then
10911: LD_VAR 0 2
10915: IFFALSE 10961
// for i in tmp do
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: LD_VAR 0 2
10926: PUSH
10927: FOR_IN
10928: IFFALSE 10959
// if GetFuel ( i ) < 3 then
10930: LD_VAR 0 1
10934: PPUSH
10935: CALL_OW 261
10939: PUSH
10940: LD_INT 3
10942: LESS
10943: IFFALSE 10957
// SetFuel ( i , 3 ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: LD_INT 3
10952: PPUSH
10953: CALL_OW 240
10957: GO 10927
10959: POP
10960: POP
// end ;
10961: PPOPN 2
10963: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do
10964: LD_INT 3
10966: PPUSH
10967: LD_INT 22
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PPUSH
10977: CALL_OW 70
10981: PUSH
10982: LD_EXP 41
10986: NOT
10987: AND
10988: PUSH
10989: LD_INT 10
10991: PPUSH
10992: LD_INT 22
10994: PUSH
10995: LD_INT 1
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PPUSH
11002: CALL_OW 70
11006: PUSH
11007: LD_EXP 4
11011: NOT
11012: AND
11013: OR
11014: IFFALSE 11023
11016: GO 11018
11018: DISABLE
// Antirush ;
11019: CALL 11024 0 0
11023: END
// export function Antirush ; var i , veh , tmp , num ; begin
11024: LD_INT 0
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
// tmp := [ ] ;
11031: LD_ADDR_VAR 0 4
11035: PUSH
11036: EMPTY
11037: ST_TO_ADDR
// if not FirstAssaultRepelled then
11038: LD_EXP 4
11042: NOT
11043: IFFALSE 11055
// num := 18 else
11045: LD_ADDR_VAR 0 5
11049: PUSH
11050: LD_INT 18
11052: ST_TO_ADDR
11053: GO 11063
// num := 12 ;
11055: LD_ADDR_VAR 0 5
11059: PUSH
11060: LD_INT 12
11062: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
11063: LD_ADDR_VAR 0 5
11067: PUSH
11068: LD_VAR 0 5
11072: PUSH
11073: LD_INT 4
11075: PUSH
11076: LD_INT 2
11078: PUSH
11079: LD_INT 0
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: LD_OWVAR 67
11091: ARRAY
11092: MINUS
11093: ST_TO_ADDR
// for i := 1 to num do
11094: LD_ADDR_VAR 0 2
11098: PUSH
11099: DOUBLE
11100: LD_INT 1
11102: DEC
11103: ST_TO_ADDR
11104: LD_VAR 0 5
11108: PUSH
11109: FOR_TO
11110: IFFALSE 11249
// begin uc_side := 3 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 3
11119: ST_TO_ADDR
// uc_nation := 3 ;
11120: LD_ADDR_OWVAR 21
11124: PUSH
11125: LD_INT 3
11127: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
11128: LD_INT 23
11130: PPUSH
11131: LD_INT 3
11133: PPUSH
11134: LD_INT 3
11136: PPUSH
11137: LD_INT 46
11139: PUSH
11140: LD_INT 43
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 1
11149: PPUSH
11150: LD_INT 2
11152: PPUSH
11153: CALL_OW 12
11157: ARRAY
11158: PPUSH
11159: LD_INT 100
11161: PPUSH
11162: CALL 18242 0 5
// veh := CreateVehicle ;
11166: LD_ADDR_VAR 0 3
11170: PUSH
11171: CALL_OW 45
11175: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 5
11183: PPUSH
11184: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 199
11195: PPUSH
11196: LD_INT 135
11198: PPUSH
11199: LD_INT 3
11201: PPUSH
11202: LD_INT 0
11204: PPUSH
11205: CALL_OW 50
// tmp := tmp ^ veh ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 4
11218: PUSH
11219: LD_VAR 0 3
11223: ADD
11224: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 173
11232: PPUSH
11233: LD_INT 118
11235: PPUSH
11236: CALL_OW 111
// wait ( 0 0$2 ) ;
11240: LD_INT 70
11242: PPUSH
11243: CALL_OW 67
// end ;
11247: GO 11109
11249: POP
11250: POP
// repeat wait ( 0 0$1 ) ;
11251: LD_INT 35
11253: PPUSH
11254: CALL_OW 67
// for i in tmp do
11258: LD_ADDR_VAR 0 2
11262: PUSH
11263: LD_VAR 0 4
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11336
// if IsDead ( i ) then
11271: LD_VAR 0 2
11275: PPUSH
11276: CALL_OW 301
11280: IFFALSE 11300
// tmp := tmp diff i else
11282: LD_ADDR_VAR 0 4
11286: PUSH
11287: LD_VAR 0 4
11291: PUSH
11292: LD_VAR 0 2
11296: DIFF
11297: ST_TO_ADDR
11298: GO 11334
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
11300: LD_VAR 0 2
11304: PPUSH
11305: LD_INT 22
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 69
11319: PPUSH
11320: LD_VAR 0 2
11324: PPUSH
11325: CALL_OW 74
11329: PPUSH
11330: CALL_OW 115
11334: GO 11268
11336: POP
11337: POP
// until not tmp ;
11338: LD_VAR 0 4
11342: NOT
11343: IFFALSE 11251
// end ; end_of_file
11345: LD_VAR 0 1
11349: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
11350: LD_VAR 0 1
11354: PUSH
11355: LD_EXP 9
11359: EQUAL
11360: IFFALSE 11376
// begin wait ( 0 0$1 ) ;
11362: LD_INT 35
11364: PPUSH
11365: CALL_OW 67
// YouLost ( Brighton ) ;
11369: LD_STRING Brighton
11371: PPUSH
11372: CALL_OW 104
// end ; if un = JMM then
11376: LD_VAR 0 1
11380: PUSH
11381: LD_EXP 37
11385: EQUAL
11386: IFFALSE 11402
// begin wait ( 0 0$1 ) ;
11388: LD_INT 35
11390: PPUSH
11391: CALL_OW 67
// YouLost ( JMM ) ;
11395: LD_STRING JMM
11397: PPUSH
11398: CALL_OW 104
// end ; if un = Megan then
11402: LD_VAR 0 1
11406: PUSH
11407: LD_EXP 11
11411: EQUAL
11412: IFFALSE 11426
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
11414: LD_EXP 9
11418: PPUSH
11419: LD_STRING DBrighton-MeganDeath
11421: PPUSH
11422: CALL_OW 88
// end ; if un = Palmer then
11426: LD_VAR 0 1
11430: PUSH
11431: LD_EXP 10
11435: EQUAL
11436: IFFALSE 11450
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
11438: LD_EXP 9
11442: PPUSH
11443: LD_STRING DBrighton-PalmerDeath
11445: PPUSH
11446: CALL_OW 88
// end ; if un = Burlak then
11450: LD_VAR 0 1
11454: PUSH
11455: LD_EXP 19
11459: EQUAL
11460: IFFALSE 11492
// begin if JMM_Arrived then
11462: LD_EXP 6
11466: IFFALSE 11480
// Say ( JMM , DJMM-BurlakDead ) ;
11468: LD_EXP 37
11472: PPUSH
11473: LD_STRING DJMM-BurlakDead
11475: PPUSH
11476: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
11480: LD_EXP 10
11484: PPUSH
11485: LD_STRING DSol-BurlakDead
11487: PPUSH
11488: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 1
11499: EQUAL
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: LD_INT 3
11508: EQUAL
11509: OR
11510: IFFALSE 11526
// begin wait ( 0 0$1 ) ;
11512: LD_INT 35
11514: PPUSH
11515: CALL_OW 67
// YouLost ( Depot ) ;
11519: LD_STRING Depot
11521: PPUSH
11522: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
11526: LD_VAR 0 1
11530: PPUSH
11531: CALL_OW 255
11535: PUSH
11536: LD_INT 1
11538: EQUAL
11539: PUSH
11540: LD_VAR 0 1
11544: PPUSH
11545: CALL_OW 247
11549: PUSH
11550: LD_INT 1
11552: EQUAL
11553: AND
11554: IFFALSE 11570
// Losses := Losses + 1 ;
11556: LD_ADDR_EXP 45
11560: PUSH
11561: LD_EXP 45
11565: PUSH
11566: LD_INT 1
11568: PLUS
11569: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
11570: LD_VAR 0 1
11574: PPUSH
11575: CALL 76978 0 1
// end ;
11579: PPOPN 1
11581: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
11582: LD_VAR 0 1
11586: PUSH
11587: LD_EXP 13
11591: EQUAL
11592: IFFALSE 11606
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
11594: LD_EXP 13
11598: PPUSH
11599: LD_STRING DDeath-Yas-3
11601: PPUSH
11602: CALL_OW 91
// if un = Popov then
11606: LD_VAR 0 1
11610: PUSH
11611: LD_EXP 14
11615: EQUAL
11616: IFFALSE 11630
// ForceSay ( Popov , DDeath-Pop-3 ) ;
11618: LD_EXP 14
11622: PPUSH
11623: LD_STRING DDeath-Pop-3
11625: PPUSH
11626: CALL_OW 91
// if un = Gaydar then
11630: LD_VAR 0 1
11634: PUSH
11635: LD_EXP 15
11639: EQUAL
11640: IFFALSE 11654
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
11642: LD_EXP 15
11646: PPUSH
11647: LD_STRING DDeath-Gay-3
11649: PPUSH
11650: CALL_OW 91
// if un = Sevi then
11654: LD_VAR 0 1
11658: PUSH
11659: LD_EXP 16
11663: EQUAL
11664: IFFALSE 11678
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
11666: LD_EXP 16
11670: PPUSH
11671: LD_STRING DDeath-Vse-3
11673: PPUSH
11674: CALL_OW 91
// end ;
11678: PPOPN 1
11680: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
11681: LD_VAR 0 1
11685: PUSH
11686: LD_INT 10
11688: EQUAL
11689: IFFALSE 11727
// begin Say ( Brighton , DBrighton-C1 ) ;
11691: LD_EXP 9
11695: PPUSH
11696: LD_STRING DBrighton-C1
11698: PPUSH
11699: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
11703: LD_EXP 11
11707: PPUSH
11708: LD_STRING DMegan-C1
11710: PPUSH
11711: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
11715: LD_EXP 9
11719: PPUSH
11720: LD_STRING DBrighton-C2
11722: PPUSH
11723: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: LD_VAR 0 2
11736: PPUSH
11737: CALL 76674 0 2
// end ;
11741: PPOPN 2
11743: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11744: LD_VAR 0 1
11748: PPUSH
11749: LD_VAR 0 2
11753: PPUSH
11754: CALL 79312 0 2
// end ;
11758: PPOPN 2
11760: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11761: LD_VAR 0 1
11765: PPUSH
11766: CALL 78380 0 1
// end ;
11770: PPOPN 1
11772: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 266
11782: PUSH
11783: LD_INT 0
11785: EQUAL
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: CALL_OW 255
11796: PUSH
11797: LD_INT 3
11799: EQUAL
11800: AND
11801: IFFALSE 11863
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
11803: LD_VAR 0 1
11807: PPUSH
11808: CALL_OW 274
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: LD_INT 10000
11818: PPUSH
11819: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: CALL_OW 274
11832: PPUSH
11833: LD_INT 2
11835: PPUSH
11836: LD_INT 250
11838: PPUSH
11839: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 274
11852: PPUSH
11853: LD_INT 3
11855: PPUSH
11856: LD_INT 100
11858: PPUSH
11859: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
11863: LD_VAR 0 1
11867: PPUSH
11868: CALL 78621 0 1
// end ;
11872: PPOPN 1
11874: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11875: LD_VAR 0 1
11879: PPUSH
11880: LD_VAR 0 2
11884: PPUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_VAR 0 4
11894: PPUSH
11895: LD_VAR 0 5
11899: PPUSH
11900: CALL 76294 0 5
// end ;
11904: PPOPN 5
11906: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: LD_VAR 0 2
11916: PPUSH
11917: CALL 75890 0 2
// end ;
11921: PPOPN 2
11923: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_VAR 0 2
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_VAR 0 4
11943: PPUSH
11944: CALL 75728 0 4
// end ;
11948: PPOPN 4
11950: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11951: LD_VAR 0 1
11955: PPUSH
11956: LD_VAR 0 2
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: CALL 75503 0 3
// end ;
11970: PPOPN 3
11972: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_VAR 0 2
11982: PPUSH
11983: CALL 75388 0 2
// end ;
11987: PPOPN 2
11989: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
11990: LD_VAR 0 1
11994: PPUSH
11995: LD_VAR 0 2
11999: PPUSH
12000: CALL 79573 0 2
// end ;
12004: PPOPN 2
12006: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 255
12016: PUSH
12017: LD_INT 6
12019: EQUAL
12020: IFFALSE 12150
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
12022: LD_VAR 0 1
12026: PUSH
12027: LD_EXP 13
12031: PUSH
12032: LD_EXP 16
12036: PUSH
12037: LD_EXP 15
12041: PUSH
12042: LD_EXP 14
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: IN
12053: IFFALSE 12057
// exit ;
12055: GO 12174
// if AssaultStarted then
12057: LD_EXP 8
12061: IFFALSE 12135
// case Rand ( 1 , 4 ) of 1 .. 3 :
12063: LD_INT 1
12065: PPUSH
12066: LD_INT 4
12068: PPUSH
12069: CALL_OW 12
12073: PUSH
12074: LD_INT 1
12076: DOUBLE
12077: GREATEREQUAL
12078: IFFALSE 12086
12080: LD_INT 3
12082: DOUBLE
12083: LESSEQUAL
12084: IFTRUE 12088
12086: GO 12106
12088: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_INT 67
12096: PPUSH
12097: LD_INT 37
12099: PPUSH
12100: CALL_OW 114
12104: GO 12133
12106: LD_INT 4
12108: DOUBLE
12109: EQUAL
12110: IFTRUE 12114
12112: GO 12132
12114: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
12115: LD_VAR 0 1
12119: PPUSH
12120: LD_INT 120
12122: PPUSH
12123: LD_INT 131
12125: PPUSH
12126: CALL_OW 111
12130: GO 12133
12132: POP
12133: GO 12150
// ComMoveXY ( driver , 120 , 131 ) ;
12135: LD_VAR 0 1
12139: PPUSH
12140: LD_INT 120
12142: PPUSH
12143: LD_INT 131
12145: PPUSH
12146: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12150: LD_VAR 0 1
12154: PPUSH
12155: LD_VAR 0 2
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_VAR 0 4
12169: PPUSH
12170: CALL 79789 0 4
// end ;
12174: PPOPN 4
12176: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_VAR 0 2
12186: PPUSH
12187: CALL 75197 0 2
// end ;
12191: PPOPN 2
12193: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL 91087 0 1
// end ; end_of_file
12203: PPOPN 1
12205: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
12206: LD_EXP 6
12210: PUSH
12211: LD_EXP 44
12215: AND
12216: IFFALSE 12387
12218: GO 12220
12220: DISABLE
// begin wait ( 0 0$2 ) ;
12221: LD_INT 70
12223: PPUSH
12224: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
12228: LD_EXP 9
12232: PPUSH
12233: LD_STRING DBrighton-G1
12235: PPUSH
12236: CALL_OW 88
// if Losses < 1 then
12240: LD_EXP 45
12244: PUSH
12245: LD_INT 1
12247: LESS
12248: IFFALSE 12262
// AddMedal ( Losses , 1 ) else
12250: LD_STRING Losses
12252: PPUSH
12253: LD_INT 1
12255: PPUSH
12256: CALL_OW 101
12260: GO 12295
// if Losses < 5 then
12262: LD_EXP 45
12266: PUSH
12267: LD_INT 5
12269: LESS
12270: IFFALSE 12284
// AddMedal ( Losses , 2 ) else
12272: LD_STRING Losses
12274: PPUSH
12275: LD_INT 2
12277: PPUSH
12278: CALL_OW 101
12282: GO 12295
// AddMedal ( Losses , - 1 ) ;
12284: LD_STRING Losses
12286: PPUSH
12287: LD_INT 1
12289: NEG
12290: PPUSH
12291: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12295: LD_EXP 7
12299: PUSH
12300: LD_INT 10
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 321
12310: PUSH
12311: LD_INT 2
12313: EQUAL
12314: AND
12315: IFFALSE 12329
// AddMedal ( Laser , 1 ) else
12317: LD_STRING Laser
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 101
12327: GO 12376
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12329: LD_EXP 7
12333: NOT
12334: PUSH
12335: LD_INT 10
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: CALL_OW 321
12345: PUSH
12346: LD_INT 2
12348: EQUAL
12349: AND
12350: IFFALSE 12365
// AddMedal ( Laser , - 1 ) else
12352: LD_STRING Laser
12354: PPUSH
12355: LD_INT 1
12357: NEG
12358: PPUSH
12359: CALL_OW 101
12363: GO 12376
// AddMedal ( Laser , - 2 ) ;
12365: LD_STRING Laser
12367: PPUSH
12368: LD_INT 2
12370: NEG
12371: PPUSH
12372: CALL_OW 101
// GiveMedals ( BaseMain ) ;
12376: LD_STRING BaseMain
12378: PPUSH
12379: CALL_OW 102
// YouWin ;
12383: CALL_OW 103
// end ; end_of_file
12387: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
// area = ListEnvironmentArea ( area ) ;
12392: LD_ADDR_VAR 0 2
12396: PUSH
12397: LD_VAR 0 2
12401: PPUSH
12402: CALL_OW 353
12406: ST_TO_ADDR
// if bulldozer > 0 then
12407: LD_VAR 0 1
12411: PUSH
12412: LD_INT 0
12414: GREATER
12415: IFFALSE 12526
// for i = area downto 1 do
12417: LD_ADDR_VAR 0 4
12421: PUSH
12422: DOUBLE
12423: LD_VAR 0 2
12427: INC
12428: ST_TO_ADDR
12429: LD_INT 1
12431: PUSH
12432: FOR_DOWNTO
12433: IFFALSE 12524
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
12435: LD_VAR 0 2
12439: PUSH
12440: LD_VAR 0 4
12444: ARRAY
12445: PUSH
12446: LD_INT 1
12448: ARRAY
12449: PPUSH
12450: LD_VAR 0 2
12454: PUSH
12455: LD_VAR 0 4
12459: ARRAY
12460: PUSH
12461: LD_INT 2
12463: ARRAY
12464: PPUSH
12465: CALL_OW 351
12469: IFFALSE 12522
// if not HasTask ( bulldozer ) then
12471: LD_VAR 0 1
12475: PPUSH
12476: CALL_OW 314
12480: NOT
12481: IFFALSE 12522
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
12483: LD_VAR 0 1
12487: PPUSH
12488: LD_VAR 0 2
12492: PUSH
12493: LD_VAR 0 4
12497: ARRAY
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_VAR 0 2
12507: PUSH
12508: LD_VAR 0 4
12512: ARRAY
12513: PUSH
12514: LD_INT 2
12516: ARRAY
12517: PPUSH
12518: CALL_OW 171
12522: GO 12432
12524: POP
12525: POP
// end ;
12526: LD_VAR 0 3
12530: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
12531: LD_INT 0
12533: PPUSH
12534: PPUSH
12535: PPUSH
12536: PPUSH
12537: PPUSH
12538: PPUSH
12539: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
12540: LD_ADDR_VAR 0 8
12544: PUSH
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: LD_INT 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 21
12562: PUSH
12563: LD_INT 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 25
12572: PUSH
12573: LD_INT 1
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 72
12589: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
12590: LD_ADDR_VAR 0 9
12594: PUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: LD_INT 22
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 21
12612: PUSH
12613: LD_INT 1
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 3
12622: PUSH
12623: LD_INT 25
12625: PUSH
12626: LD_INT 1
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 72
12646: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
12647: LD_ADDR_EXP 47
12651: PUSH
12652: LD_VAR 0 8
12656: PPUSH
12657: LD_VAR 0 9
12661: PPUSH
12662: CALL 13055 0 2
12666: ST_TO_ADDR
// offset = 0 ;
12667: LD_ADDR_VAR 0 7
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// for i := 1 to sold_team do
12675: LD_ADDR_VAR 0 4
12679: PUSH
12680: DOUBLE
12681: LD_INT 1
12683: DEC
12684: ST_TO_ADDR
12685: LD_VAR 0 8
12689: PUSH
12690: FOR_TO
12691: IFFALSE 12822
// begin if IsInUnit ( sold_team [ i ] ) then
12693: LD_VAR 0 8
12697: PUSH
12698: LD_VAR 0 4
12702: ARRAY
12703: PPUSH
12704: CALL_OW 310
12708: IFFALSE 12725
// ComExitBuilding ( sold_team [ i ] ) ;
12710: LD_VAR 0 8
12714: PUSH
12715: LD_VAR 0 4
12719: ARRAY
12720: PPUSH
12721: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
12725: LD_VAR 0 8
12729: PUSH
12730: LD_VAR 0 4
12734: ARRAY
12735: PPUSH
12736: LD_EXP 47
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PUSH
12745: LD_VAR 0 4
12749: PUSH
12750: LD_VAR 0 7
12754: PLUS
12755: ARRAY
12756: PPUSH
12757: LD_EXP 47
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: PUSH
12766: LD_VAR 0 4
12770: PUSH
12771: LD_INT 1
12773: PLUS
12774: PUSH
12775: LD_VAR 0 7
12779: PLUS
12780: ARRAY
12781: PPUSH
12782: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
12786: LD_VAR 0 8
12790: PUSH
12791: LD_VAR 0 4
12795: ARRAY
12796: PPUSH
12797: LD_EXP 9
12801: PPUSH
12802: CALL_OW 179
// offset = offset + 1 ;
12806: LD_ADDR_VAR 0 7
12810: PUSH
12811: LD_VAR 0 7
12815: PUSH
12816: LD_INT 1
12818: PLUS
12819: ST_TO_ADDR
// end ;
12820: GO 12690
12822: POP
12823: POP
// offset = 0 ;
12824: LD_ADDR_VAR 0 7
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// tmp = 1 ;
12832: LD_ADDR_VAR 0 6
12836: PUSH
12837: LD_INT 1
12839: ST_TO_ADDR
// for i := 2 to rows do
12840: LD_ADDR_VAR 0 4
12844: PUSH
12845: DOUBLE
12846: LD_INT 2
12848: DEC
12849: ST_TO_ADDR
12850: LD_EXP 47
12854: PUSH
12855: FOR_TO
12856: IFFALSE 13048
// begin for x := 1 to sold_team do
12858: LD_ADDR_VAR 0 5
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 8
12872: PUSH
12873: FOR_TO
12874: IFFALSE 13036
// begin if IsInUnit ( civil_team [ tmp ] ) then
12876: LD_VAR 0 9
12880: PUSH
12881: LD_VAR 0 6
12885: ARRAY
12886: PPUSH
12887: CALL_OW 310
12891: IFFALSE 12908
// ComExitBuilding ( civil_team [ tmp ] ) ;
12893: LD_VAR 0 9
12897: PUSH
12898: LD_VAR 0 6
12902: ARRAY
12903: PPUSH
12904: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
12908: LD_VAR 0 9
12912: PUSH
12913: LD_VAR 0 6
12917: ARRAY
12918: PPUSH
12919: LD_EXP 47
12923: PUSH
12924: LD_VAR 0 4
12928: ARRAY
12929: PUSH
12930: LD_VAR 0 5
12934: PUSH
12935: LD_VAR 0 7
12939: PLUS
12940: ARRAY
12941: PPUSH
12942: LD_EXP 47
12946: PUSH
12947: LD_VAR 0 4
12951: ARRAY
12952: PUSH
12953: LD_VAR 0 5
12957: PUSH
12958: LD_INT 1
12960: PLUS
12961: PUSH
12962: LD_VAR 0 7
12966: PLUS
12967: ARRAY
12968: PPUSH
12969: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
12973: LD_VAR 0 9
12977: PUSH
12978: LD_VAR 0 6
12982: ARRAY
12983: PPUSH
12984: LD_EXP 9
12988: PPUSH
12989: CALL_OW 179
// offset = offset + 1 ;
12993: LD_ADDR_VAR 0 7
12997: PUSH
12998: LD_VAR 0 7
13002: PUSH
13003: LD_INT 1
13005: PLUS
13006: ST_TO_ADDR
// if not ( tmp = civil_team ) then
13007: LD_VAR 0 6
13011: PUSH
13012: LD_VAR 0 9
13016: EQUAL
13017: NOT
13018: IFFALSE 13034
// tmp = tmp + 1 ;
13020: LD_ADDR_VAR 0 6
13024: PUSH
13025: LD_VAR 0 6
13029: PUSH
13030: LD_INT 1
13032: PLUS
13033: ST_TO_ADDR
// end ;
13034: GO 12873
13036: POP
13037: POP
// offset = 0 ;
13038: LD_ADDR_VAR 0 7
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// end ;
13046: GO 12855
13048: POP
13049: POP
// end ;
13050: LD_VAR 0 3
13054: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
13055: LD_INT 0
13057: PPUSH
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
13066: PPUSH
// start_pos = [ 65 , 34 ] ;
13067: LD_ADDR_VAR 0 6
13071: PUSH
13072: LD_INT 65
13074: PUSH
13075: LD_INT 34
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: ST_TO_ADDR
// row_size = 0 ;
13082: LD_ADDR_VAR 0 7
13086: PUSH
13087: LD_INT 0
13089: ST_TO_ADDR
// result_rows = [ ] ;
13090: LD_ADDR_VAR 0 9
13094: PUSH
13095: EMPTY
13096: ST_TO_ADDR
// new_row = [ ] ;
13097: LD_ADDR_VAR 0 8
13101: PUSH
13102: EMPTY
13103: ST_TO_ADDR
// for i := 1 to sold_team do
13104: LD_ADDR_VAR 0 4
13108: PUSH
13109: DOUBLE
13110: LD_INT 1
13112: DEC
13113: ST_TO_ADDR
13114: LD_VAR 0 1
13118: PUSH
13119: FOR_TO
13120: IFFALSE 13174
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
13122: LD_ADDR_VAR 0 8
13126: PUSH
13127: LD_VAR 0 8
13131: PUSH
13132: LD_VAR 0 6
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: ADD
13141: PUSH
13142: LD_VAR 0 6
13146: PUSH
13147: LD_INT 2
13149: ARRAY
13150: PUSH
13151: LD_VAR 0 4
13155: PLUS
13156: ADD
13157: ST_TO_ADDR
// row_size = row_size + 1 ;
13158: LD_ADDR_VAR 0 7
13162: PUSH
13163: LD_VAR 0 7
13167: PUSH
13168: LD_INT 1
13170: PLUS
13171: ST_TO_ADDR
// end ;
13172: GO 13119
13174: POP
13175: POP
// result_rows = result_rows ^ [ new_row ] ;
13176: LD_ADDR_VAR 0 9
13180: PUSH
13181: LD_VAR 0 9
13185: PUSH
13186: LD_VAR 0 8
13190: PUSH
13191: EMPTY
13192: LIST
13193: ADD
13194: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
13195: LD_ADDR_VAR 0 10
13199: PUSH
13200: LD_VAR 0 2
13204: PUSH
13205: LD_VAR 0 1
13209: DIV
13210: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
13211: LD_VAR 0 10
13215: PUSH
13216: LD_VAR 0 1
13220: MOD
13221: PUSH
13222: LD_INT 0
13224: GREATER
13225: IFFALSE 13241
// civil_rows = civil_rows + 1 ;
13227: LD_ADDR_VAR 0 10
13231: PUSH
13232: LD_VAR 0 10
13236: PUSH
13237: LD_INT 1
13239: PLUS
13240: ST_TO_ADDR
// offsetX = 2 ;
13241: LD_ADDR_VAR 0 11
13245: PUSH
13246: LD_INT 2
13248: ST_TO_ADDR
// offsetY = 1 ;
13249: LD_ADDR_VAR 0 12
13253: PUSH
13254: LD_INT 1
13256: ST_TO_ADDR
// for i := 1 to civil_rows do
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: DOUBLE
13263: LD_INT 1
13265: DEC
13266: ST_TO_ADDR
13267: LD_VAR 0 10
13271: PUSH
13272: FOR_TO
13273: IFFALSE 13401
// begin new_row = [ ] ;
13275: LD_ADDR_VAR 0 8
13279: PUSH
13280: EMPTY
13281: ST_TO_ADDR
// for x := 1 to row_size do
13282: LD_ADDR_VAR 0 5
13286: PUSH
13287: DOUBLE
13288: LD_INT 1
13290: DEC
13291: ST_TO_ADDR
13292: LD_VAR 0 7
13296: PUSH
13297: FOR_TO
13298: IFFALSE 13350
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
13300: LD_ADDR_VAR 0 8
13304: PUSH
13305: LD_VAR 0 8
13309: PUSH
13310: LD_VAR 0 6
13314: PUSH
13315: LD_INT 1
13317: ARRAY
13318: PUSH
13319: LD_VAR 0 11
13323: PLUS
13324: ADD
13325: PUSH
13326: LD_VAR 0 6
13330: PUSH
13331: LD_INT 2
13333: ARRAY
13334: PUSH
13335: LD_VAR 0 12
13339: PLUS
13340: PUSH
13341: LD_VAR 0 5
13345: PLUS
13346: ADD
13347: ST_TO_ADDR
// end ;
13348: GO 13297
13350: POP
13351: POP
// result_rows = result_rows ^ [ new_row ] ;
13352: LD_ADDR_VAR 0 9
13356: PUSH
13357: LD_VAR 0 9
13361: PUSH
13362: LD_VAR 0 8
13366: PUSH
13367: EMPTY
13368: LIST
13369: ADD
13370: ST_TO_ADDR
// offsetX = offsetX + 2 ;
13371: LD_ADDR_VAR 0 11
13375: PUSH
13376: LD_VAR 0 11
13380: PUSH
13381: LD_INT 2
13383: PLUS
13384: ST_TO_ADDR
// offsetY = offsetY + 1 ;
13385: LD_ADDR_VAR 0 12
13389: PUSH
13390: LD_VAR 0 12
13394: PUSH
13395: LD_INT 1
13397: PLUS
13398: ST_TO_ADDR
// end ;
13399: GO 13272
13401: POP
13402: POP
// result = result_rows ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_VAR 0 9
13412: ST_TO_ADDR
// end ; end_of_file
13413: LD_VAR 0 3
13417: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13418: LD_INT 0
13420: PPUSH
13421: PPUSH
// if exist_mode then
13422: LD_VAR 0 2
13426: IFFALSE 13451
// unit := CreateCharacter ( prefix & ident ) else
13428: LD_ADDR_VAR 0 5
13432: PUSH
13433: LD_VAR 0 3
13437: PUSH
13438: LD_VAR 0 1
13442: STR
13443: PPUSH
13444: CALL_OW 34
13448: ST_TO_ADDR
13449: GO 13466
// unit := NewCharacter ( ident ) ;
13451: LD_ADDR_VAR 0 5
13455: PUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 25
13465: ST_TO_ADDR
// result := unit ;
13466: LD_ADDR_VAR 0 4
13470: PUSH
13471: LD_VAR 0 5
13475: ST_TO_ADDR
// end ;
13476: LD_VAR 0 4
13480: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13481: LD_INT 0
13483: PPUSH
13484: PPUSH
// if not side or not nation then
13485: LD_VAR 0 1
13489: NOT
13490: PUSH
13491: LD_VAR 0 2
13495: NOT
13496: OR
13497: IFFALSE 13501
// exit ;
13499: GO 14265
// case nation of nation_american :
13501: LD_VAR 0 2
13505: PUSH
13506: LD_INT 1
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13728
13514: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: LD_INT 35
13522: PUSH
13523: LD_INT 45
13525: PUSH
13526: LD_INT 46
13528: PUSH
13529: LD_INT 47
13531: PUSH
13532: LD_INT 82
13534: PUSH
13535: LD_INT 83
13537: PUSH
13538: LD_INT 84
13540: PUSH
13541: LD_INT 85
13543: PUSH
13544: LD_INT 86
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: LD_INT 6
13555: PUSH
13556: LD_INT 15
13558: PUSH
13559: LD_INT 16
13561: PUSH
13562: LD_INT 7
13564: PUSH
13565: LD_INT 12
13567: PUSH
13568: LD_INT 13
13570: PUSH
13571: LD_INT 10
13573: PUSH
13574: LD_INT 14
13576: PUSH
13577: LD_INT 20
13579: PUSH
13580: LD_INT 21
13582: PUSH
13583: LD_INT 22
13585: PUSH
13586: LD_INT 25
13588: PUSH
13589: LD_INT 32
13591: PUSH
13592: LD_INT 27
13594: PUSH
13595: LD_INT 36
13597: PUSH
13598: LD_INT 69
13600: PUSH
13601: LD_INT 39
13603: PUSH
13604: LD_INT 34
13606: PUSH
13607: LD_INT 40
13609: PUSH
13610: LD_INT 48
13612: PUSH
13613: LD_INT 49
13615: PUSH
13616: LD_INT 50
13618: PUSH
13619: LD_INT 51
13621: PUSH
13622: LD_INT 52
13624: PUSH
13625: LD_INT 53
13627: PUSH
13628: LD_INT 54
13630: PUSH
13631: LD_INT 55
13633: PUSH
13634: LD_INT 56
13636: PUSH
13637: LD_INT 57
13639: PUSH
13640: LD_INT 58
13642: PUSH
13643: LD_INT 59
13645: PUSH
13646: LD_INT 60
13648: PUSH
13649: LD_INT 61
13651: PUSH
13652: LD_INT 62
13654: PUSH
13655: LD_INT 80
13657: PUSH
13658: LD_INT 82
13660: PUSH
13661: LD_INT 83
13663: PUSH
13664: LD_INT 84
13666: PUSH
13667: LD_INT 85
13669: PUSH
13670: LD_INT 86
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: ST_TO_ADDR
13726: GO 14189
13728: LD_INT 2
13730: DOUBLE
13731: EQUAL
13732: IFTRUE 13736
13734: GO 13958
13736: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
13737: LD_ADDR_VAR 0 4
13741: PUSH
13742: LD_INT 35
13744: PUSH
13745: LD_INT 45
13747: PUSH
13748: LD_INT 46
13750: PUSH
13751: LD_INT 47
13753: PUSH
13754: LD_INT 82
13756: PUSH
13757: LD_INT 83
13759: PUSH
13760: LD_INT 84
13762: PUSH
13763: LD_INT 85
13765: PUSH
13766: LD_INT 87
13768: PUSH
13769: LD_INT 70
13771: PUSH
13772: LD_INT 1
13774: PUSH
13775: LD_INT 11
13777: PUSH
13778: LD_INT 3
13780: PUSH
13781: LD_INT 4
13783: PUSH
13784: LD_INT 5
13786: PUSH
13787: LD_INT 6
13789: PUSH
13790: LD_INT 15
13792: PUSH
13793: LD_INT 18
13795: PUSH
13796: LD_INT 7
13798: PUSH
13799: LD_INT 17
13801: PUSH
13802: LD_INT 8
13804: PUSH
13805: LD_INT 20
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_INT 72
13816: PUSH
13817: LD_INT 26
13819: PUSH
13820: LD_INT 69
13822: PUSH
13823: LD_INT 39
13825: PUSH
13826: LD_INT 40
13828: PUSH
13829: LD_INT 41
13831: PUSH
13832: LD_INT 42
13834: PUSH
13835: LD_INT 43
13837: PUSH
13838: LD_INT 48
13840: PUSH
13841: LD_INT 49
13843: PUSH
13844: LD_INT 50
13846: PUSH
13847: LD_INT 51
13849: PUSH
13850: LD_INT 52
13852: PUSH
13853: LD_INT 53
13855: PUSH
13856: LD_INT 54
13858: PUSH
13859: LD_INT 55
13861: PUSH
13862: LD_INT 56
13864: PUSH
13865: LD_INT 60
13867: PUSH
13868: LD_INT 61
13870: PUSH
13871: LD_INT 62
13873: PUSH
13874: LD_INT 66
13876: PUSH
13877: LD_INT 67
13879: PUSH
13880: LD_INT 68
13882: PUSH
13883: LD_INT 81
13885: PUSH
13886: LD_INT 82
13888: PUSH
13889: LD_INT 83
13891: PUSH
13892: LD_INT 84
13894: PUSH
13895: LD_INT 85
13897: PUSH
13898: LD_INT 87
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 14189
13958: LD_INT 3
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14188
13966: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13967: LD_ADDR_VAR 0 4
13971: PUSH
13972: LD_INT 46
13974: PUSH
13975: LD_INT 47
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 82
13986: PUSH
13987: LD_INT 83
13989: PUSH
13990: LD_INT 84
13992: PUSH
13993: LD_INT 85
13995: PUSH
13996: LD_INT 86
13998: PUSH
13999: LD_INT 11
14001: PUSH
14002: LD_INT 9
14004: PUSH
14005: LD_INT 20
14007: PUSH
14008: LD_INT 19
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 24
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_INT 25
14022: PUSH
14023: LD_INT 28
14025: PUSH
14026: LD_INT 29
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 31
14034: PUSH
14035: LD_INT 37
14037: PUSH
14038: LD_INT 38
14040: PUSH
14041: LD_INT 32
14043: PUSH
14044: LD_INT 27
14046: PUSH
14047: LD_INT 33
14049: PUSH
14050: LD_INT 69
14052: PUSH
14053: LD_INT 39
14055: PUSH
14056: LD_INT 34
14058: PUSH
14059: LD_INT 40
14061: PUSH
14062: LD_INT 71
14064: PUSH
14065: LD_INT 23
14067: PUSH
14068: LD_INT 44
14070: PUSH
14071: LD_INT 48
14073: PUSH
14074: LD_INT 49
14076: PUSH
14077: LD_INT 50
14079: PUSH
14080: LD_INT 51
14082: PUSH
14083: LD_INT 52
14085: PUSH
14086: LD_INT 53
14088: PUSH
14089: LD_INT 54
14091: PUSH
14092: LD_INT 55
14094: PUSH
14095: LD_INT 56
14097: PUSH
14098: LD_INT 57
14100: PUSH
14101: LD_INT 58
14103: PUSH
14104: LD_INT 59
14106: PUSH
14107: LD_INT 63
14109: PUSH
14110: LD_INT 64
14112: PUSH
14113: LD_INT 65
14115: PUSH
14116: LD_INT 82
14118: PUSH
14119: LD_INT 83
14121: PUSH
14122: LD_INT 84
14124: PUSH
14125: LD_INT 85
14127: PUSH
14128: LD_INT 86
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: ST_TO_ADDR
14186: GO 14189
14188: POP
// if state > - 1 and state < 3 then
14189: LD_VAR 0 3
14193: PUSH
14194: LD_INT 1
14196: NEG
14197: GREATER
14198: PUSH
14199: LD_VAR 0 3
14203: PUSH
14204: LD_INT 3
14206: LESS
14207: AND
14208: IFFALSE 14265
// for i in result do
14210: LD_ADDR_VAR 0 5
14214: PUSH
14215: LD_VAR 0 4
14219: PUSH
14220: FOR_IN
14221: IFFALSE 14263
// if GetTech ( i , side ) <> state then
14223: LD_VAR 0 5
14227: PPUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 321
14237: PUSH
14238: LD_VAR 0 3
14242: NONEQUAL
14243: IFFALSE 14261
// result := result diff i ;
14245: LD_ADDR_VAR 0 4
14249: PUSH
14250: LD_VAR 0 4
14254: PUSH
14255: LD_VAR 0 5
14259: DIFF
14260: ST_TO_ADDR
14261: GO 14220
14263: POP
14264: POP
// end ;
14265: LD_VAR 0 4
14269: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14270: LD_INT 0
14272: PPUSH
14273: PPUSH
14274: PPUSH
// result := true ;
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_INT 1
14282: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14283: LD_ADDR_VAR 0 5
14287: PUSH
14288: LD_VAR 0 2
14292: PPUSH
14293: CALL_OW 480
14297: ST_TO_ADDR
// if not tmp then
14298: LD_VAR 0 5
14302: NOT
14303: IFFALSE 14307
// exit ;
14305: GO 14356
// for i in tmp do
14307: LD_ADDR_VAR 0 4
14311: PUSH
14312: LD_VAR 0 5
14316: PUSH
14317: FOR_IN
14318: IFFALSE 14354
// if GetTech ( i , side ) <> state_researched then
14320: LD_VAR 0 4
14324: PPUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 321
14334: PUSH
14335: LD_INT 2
14337: NONEQUAL
14338: IFFALSE 14352
// begin result := false ;
14340: LD_ADDR_VAR 0 3
14344: PUSH
14345: LD_INT 0
14347: ST_TO_ADDR
// exit ;
14348: POP
14349: POP
14350: GO 14356
// end ;
14352: GO 14317
14354: POP
14355: POP
// end ;
14356: LD_VAR 0 3
14360: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14361: LD_INT 0
14363: PPUSH
14364: PPUSH
14365: PPUSH
14366: PPUSH
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14376: LD_VAR 0 1
14380: NOT
14381: PUSH
14382: LD_VAR 0 1
14386: PPUSH
14387: CALL_OW 257
14391: PUSH
14392: LD_INT 9
14394: NONEQUAL
14395: OR
14396: IFFALSE 14400
// exit ;
14398: GO 14973
// side := GetSide ( unit ) ;
14400: LD_ADDR_VAR 0 9
14404: PUSH
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 255
14414: ST_TO_ADDR
// tech_space := tech_spacanom ;
14415: LD_ADDR_VAR 0 12
14419: PUSH
14420: LD_INT 29
14422: ST_TO_ADDR
// tech_time := tech_taurad ;
14423: LD_ADDR_VAR 0 13
14427: PUSH
14428: LD_INT 28
14430: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14431: LD_ADDR_VAR 0 11
14435: PUSH
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL_OW 310
14445: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14446: LD_VAR 0 11
14450: PPUSH
14451: CALL_OW 247
14455: PUSH
14456: LD_INT 2
14458: EQUAL
14459: IFFALSE 14463
// exit ;
14461: GO 14973
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14463: LD_ADDR_VAR 0 8
14467: PUSH
14468: LD_INT 81
14470: PUSH
14471: LD_VAR 0 9
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 3
14482: PUSH
14483: LD_INT 21
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PPUSH
14501: CALL_OW 69
14505: ST_TO_ADDR
// if not tmp then
14506: LD_VAR 0 8
14510: NOT
14511: IFFALSE 14515
// exit ;
14513: GO 14973
// if in_unit then
14515: LD_VAR 0 11
14519: IFFALSE 14543
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14521: LD_ADDR_VAR 0 10
14525: PUSH
14526: LD_VAR 0 8
14530: PPUSH
14531: LD_VAR 0 11
14535: PPUSH
14536: CALL_OW 74
14540: ST_TO_ADDR
14541: GO 14563
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14543: LD_ADDR_VAR 0 10
14547: PUSH
14548: LD_VAR 0 8
14552: PPUSH
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 74
14562: ST_TO_ADDR
// if not enemy then
14563: LD_VAR 0 10
14567: NOT
14568: IFFALSE 14572
// exit ;
14570: GO 14973
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14572: LD_VAR 0 11
14576: PUSH
14577: LD_VAR 0 11
14581: PPUSH
14582: LD_VAR 0 10
14586: PPUSH
14587: CALL_OW 296
14591: PUSH
14592: LD_INT 13
14594: GREATER
14595: AND
14596: PUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_VAR 0 10
14606: PPUSH
14607: CALL_OW 296
14611: PUSH
14612: LD_INT 12
14614: GREATER
14615: OR
14616: IFFALSE 14620
// exit ;
14618: GO 14973
// missile := [ 1 ] ;
14620: LD_ADDR_VAR 0 14
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14631: LD_VAR 0 9
14635: PPUSH
14636: LD_VAR 0 12
14640: PPUSH
14641: CALL_OW 325
14645: IFFALSE 14674
// missile := Insert ( missile , missile + 1 , 2 ) ;
14647: LD_ADDR_VAR 0 14
14651: PUSH
14652: LD_VAR 0 14
14656: PPUSH
14657: LD_VAR 0 14
14661: PUSH
14662: LD_INT 1
14664: PLUS
14665: PPUSH
14666: LD_INT 2
14668: PPUSH
14669: CALL_OW 2
14673: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14674: LD_VAR 0 9
14678: PPUSH
14679: LD_VAR 0 13
14683: PPUSH
14684: CALL_OW 325
14688: PUSH
14689: LD_VAR 0 10
14693: PPUSH
14694: CALL_OW 255
14698: PPUSH
14699: LD_VAR 0 13
14703: PPUSH
14704: CALL_OW 325
14708: NOT
14709: AND
14710: IFFALSE 14739
// missile := Insert ( missile , missile + 1 , 3 ) ;
14712: LD_ADDR_VAR 0 14
14716: PUSH
14717: LD_VAR 0 14
14721: PPUSH
14722: LD_VAR 0 14
14726: PUSH
14727: LD_INT 1
14729: PLUS
14730: PPUSH
14731: LD_INT 3
14733: PPUSH
14734: CALL_OW 2
14738: ST_TO_ADDR
// if missile < 2 then
14739: LD_VAR 0 14
14743: PUSH
14744: LD_INT 2
14746: LESS
14747: IFFALSE 14751
// exit ;
14749: GO 14973
// x := GetX ( enemy ) ;
14751: LD_ADDR_VAR 0 4
14755: PUSH
14756: LD_VAR 0 10
14760: PPUSH
14761: CALL_OW 250
14765: ST_TO_ADDR
// y := GetY ( enemy ) ;
14766: LD_ADDR_VAR 0 5
14770: PUSH
14771: LD_VAR 0 10
14775: PPUSH
14776: CALL_OW 251
14780: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14781: LD_ADDR_VAR 0 6
14785: PUSH
14786: LD_VAR 0 4
14790: PUSH
14791: LD_INT 1
14793: NEG
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: CALL_OW 12
14802: PLUS
14803: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14804: LD_ADDR_VAR 0 7
14808: PUSH
14809: LD_VAR 0 5
14813: PUSH
14814: LD_INT 1
14816: NEG
14817: PPUSH
14818: LD_INT 1
14820: PPUSH
14821: CALL_OW 12
14825: PLUS
14826: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14827: LD_VAR 0 6
14831: PPUSH
14832: LD_VAR 0 7
14836: PPUSH
14837: CALL_OW 488
14841: NOT
14842: IFFALSE 14864
// begin _x := x ;
14844: LD_ADDR_VAR 0 6
14848: PUSH
14849: LD_VAR 0 4
14853: ST_TO_ADDR
// _y := y ;
14854: LD_ADDR_VAR 0 7
14858: PUSH
14859: LD_VAR 0 5
14863: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14864: LD_ADDR_VAR 0 3
14868: PUSH
14869: LD_INT 1
14871: PPUSH
14872: LD_VAR 0 14
14876: PPUSH
14877: CALL_OW 12
14881: ST_TO_ADDR
// case i of 1 :
14882: LD_VAR 0 3
14886: PUSH
14887: LD_INT 1
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14912
14895: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14896: LD_VAR 0 1
14900: PPUSH
14901: LD_VAR 0 10
14905: PPUSH
14906: CALL_OW 115
14910: GO 14973
14912: LD_INT 2
14914: DOUBLE
14915: EQUAL
14916: IFTRUE 14920
14918: GO 14942
14920: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14921: LD_VAR 0 1
14925: PPUSH
14926: LD_VAR 0 6
14930: PPUSH
14931: LD_VAR 0 7
14935: PPUSH
14936: CALL_OW 153
14940: GO 14973
14942: LD_INT 3
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 14972
14950: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14951: LD_VAR 0 1
14955: PPUSH
14956: LD_VAR 0 6
14960: PPUSH
14961: LD_VAR 0 7
14965: PPUSH
14966: CALL_OW 154
14970: GO 14973
14972: POP
// end ;
14973: LD_VAR 0 2
14977: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
14984: PPUSH
14985: PPUSH
// if not unit or not building then
14986: LD_VAR 0 1
14990: NOT
14991: PUSH
14992: LD_VAR 0 2
14996: NOT
14997: OR
14998: IFFALSE 15002
// exit ;
15000: GO 15160
// x := GetX ( building ) ;
15002: LD_ADDR_VAR 0 5
15006: PUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: CALL_OW 250
15016: ST_TO_ADDR
// y := GetY ( building ) ;
15017: LD_ADDR_VAR 0 6
15021: PUSH
15022: LD_VAR 0 2
15026: PPUSH
15027: CALL_OW 251
15031: ST_TO_ADDR
// for i = 0 to 5 do
15032: LD_ADDR_VAR 0 4
15036: PUSH
15037: DOUBLE
15038: LD_INT 0
15040: DEC
15041: ST_TO_ADDR
15042: LD_INT 5
15044: PUSH
15045: FOR_TO
15046: IFFALSE 15158
// begin _x := ShiftX ( x , i , 3 ) ;
15048: LD_ADDR_VAR 0 7
15052: PUSH
15053: LD_VAR 0 5
15057: PPUSH
15058: LD_VAR 0 4
15062: PPUSH
15063: LD_INT 3
15065: PPUSH
15066: CALL_OW 272
15070: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15071: LD_ADDR_VAR 0 8
15075: PUSH
15076: LD_VAR 0 6
15080: PPUSH
15081: LD_VAR 0 4
15085: PPUSH
15086: LD_INT 3
15088: PPUSH
15089: CALL_OW 273
15093: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15094: LD_VAR 0 7
15098: PPUSH
15099: LD_VAR 0 8
15103: PPUSH
15104: CALL_OW 488
15108: NOT
15109: IFFALSE 15113
// continue ;
15111: GO 15045
// if HexInfo ( _x , _y ) = 0 then
15113: LD_VAR 0 7
15117: PPUSH
15118: LD_VAR 0 8
15122: PPUSH
15123: CALL_OW 428
15127: PUSH
15128: LD_INT 0
15130: EQUAL
15131: IFFALSE 15156
// begin ComMoveXY ( unit , _x , _y ) ;
15133: LD_VAR 0 1
15137: PPUSH
15138: LD_VAR 0 7
15142: PPUSH
15143: LD_VAR 0 8
15147: PPUSH
15148: CALL_OW 111
// exit ;
15152: POP
15153: POP
15154: GO 15160
// end ; end ;
15156: GO 15045
15158: POP
15159: POP
// end ;
15160: LD_VAR 0 3
15164: RET
// export function ScanBase ( side , base_area ) ; begin
15165: LD_INT 0
15167: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15168: LD_ADDR_VAR 0 3
15172: PUSH
15173: LD_VAR 0 2
15177: PPUSH
15178: LD_INT 81
15180: PUSH
15181: LD_VAR 0 1
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PPUSH
15190: CALL_OW 70
15194: ST_TO_ADDR
// end ;
15195: LD_VAR 0 3
15199: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
// result := false ;
15206: LD_ADDR_VAR 0 2
15210: PUSH
15211: LD_INT 0
15213: ST_TO_ADDR
// side := GetSide ( unit ) ;
15214: LD_ADDR_VAR 0 3
15218: PUSH
15219: LD_VAR 0 1
15223: PPUSH
15224: CALL_OW 255
15228: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15229: LD_ADDR_VAR 0 4
15233: PUSH
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 248
15243: ST_TO_ADDR
// case nat of 1 :
15244: LD_VAR 0 4
15248: PUSH
15249: LD_INT 1
15251: DOUBLE
15252: EQUAL
15253: IFTRUE 15257
15255: GO 15268
15257: POP
// tech := tech_lassight ; 2 :
15258: LD_ADDR_VAR 0 5
15262: PUSH
15263: LD_INT 12
15265: ST_TO_ADDR
15266: GO 15307
15268: LD_INT 2
15270: DOUBLE
15271: EQUAL
15272: IFTRUE 15276
15274: GO 15287
15276: POP
// tech := tech_mortar ; 3 :
15277: LD_ADDR_VAR 0 5
15281: PUSH
15282: LD_INT 41
15284: ST_TO_ADDR
15285: GO 15307
15287: LD_INT 3
15289: DOUBLE
15290: EQUAL
15291: IFTRUE 15295
15293: GO 15306
15295: POP
// tech := tech_bazooka ; end ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 44
15303: ST_TO_ADDR
15304: GO 15307
15306: POP
// if Researched ( side , tech ) then
15307: LD_VAR 0 3
15311: PPUSH
15312: LD_VAR 0 5
15316: PPUSH
15317: CALL_OW 325
15321: IFFALSE 15348
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15323: LD_ADDR_VAR 0 2
15327: PUSH
15328: LD_INT 5
15330: PUSH
15331: LD_INT 8
15333: PUSH
15334: LD_INT 9
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: PUSH
15342: LD_VAR 0 4
15346: ARRAY
15347: ST_TO_ADDR
// end ;
15348: LD_VAR 0 2
15352: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15353: LD_INT 0
15355: PPUSH
15356: PPUSH
15357: PPUSH
// if not mines then
15358: LD_VAR 0 2
15362: NOT
15363: IFFALSE 15367
// exit ;
15365: GO 15511
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15367: LD_ADDR_VAR 0 5
15371: PUSH
15372: LD_INT 81
15374: PUSH
15375: LD_VAR 0 1
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: LD_INT 21
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 69
15409: ST_TO_ADDR
// for i in mines do
15410: LD_ADDR_VAR 0 4
15414: PUSH
15415: LD_VAR 0 2
15419: PUSH
15420: FOR_IN
15421: IFFALSE 15509
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15423: LD_VAR 0 4
15427: PUSH
15428: LD_INT 1
15430: ARRAY
15431: PPUSH
15432: LD_VAR 0 4
15436: PUSH
15437: LD_INT 2
15439: ARRAY
15440: PPUSH
15441: CALL_OW 458
15445: NOT
15446: IFFALSE 15450
// continue ;
15448: GO 15420
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15450: LD_VAR 0 4
15454: PUSH
15455: LD_INT 1
15457: ARRAY
15458: PPUSH
15459: LD_VAR 0 4
15463: PUSH
15464: LD_INT 2
15466: ARRAY
15467: PPUSH
15468: CALL_OW 428
15472: PUSH
15473: LD_VAR 0 5
15477: IN
15478: IFFALSE 15507
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15480: LD_VAR 0 4
15484: PUSH
15485: LD_INT 1
15487: ARRAY
15488: PPUSH
15489: LD_VAR 0 4
15493: PUSH
15494: LD_INT 2
15496: ARRAY
15497: PPUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 456
// end ;
15507: GO 15420
15509: POP
15510: POP
// end ;
15511: LD_VAR 0 3
15515: RET
// export function Count ( array ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// result := 0 ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_INT 0
15527: ST_TO_ADDR
// for i in array do
15528: LD_ADDR_VAR 0 3
15532: PUSH
15533: LD_VAR 0 1
15537: PUSH
15538: FOR_IN
15539: IFFALSE 15563
// if i then
15541: LD_VAR 0 3
15545: IFFALSE 15561
// result := result + 1 ;
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_VAR 0 2
15556: PUSH
15557: LD_INT 1
15559: PLUS
15560: ST_TO_ADDR
15561: GO 15538
15563: POP
15564: POP
// end ;
15565: LD_VAR 0 2
15569: RET
// export function IsEmpty ( building ) ; begin
15570: LD_INT 0
15572: PPUSH
// if not building then
15573: LD_VAR 0 1
15577: NOT
15578: IFFALSE 15582
// exit ;
15580: GO 15625
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_VAR 0 1
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_VAR 0 1
15599: PPUSH
15600: CALL_OW 255
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 58
15611: PUSH
15612: EMPTY
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 69
15623: IN
15624: ST_TO_ADDR
// end ;
15625: LD_VAR 0 2
15629: RET
// export function IsNotFull ( building ) ; begin
15630: LD_INT 0
15632: PPUSH
// if not building then
15633: LD_VAR 0 1
15637: NOT
15638: IFFALSE 15642
// exit ;
15640: GO 15661
// result := UnitsInside ( building ) < 6 ;
15642: LD_ADDR_VAR 0 2
15646: PUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 313
15656: PUSH
15657: LD_INT 6
15659: LESS
15660: ST_TO_ADDR
// end ;
15661: LD_VAR 0 2
15665: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15666: LD_INT 0
15668: PPUSH
15669: PPUSH
15670: PPUSH
15671: PPUSH
// tmp := [ ] ;
15672: LD_ADDR_VAR 0 3
15676: PUSH
15677: EMPTY
15678: ST_TO_ADDR
// list := [ ] ;
15679: LD_ADDR_VAR 0 5
15683: PUSH
15684: EMPTY
15685: ST_TO_ADDR
// for i = 16 to 25 do
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: DOUBLE
15692: LD_INT 16
15694: DEC
15695: ST_TO_ADDR
15696: LD_INT 25
15698: PUSH
15699: FOR_TO
15700: IFFALSE 15773
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15702: LD_ADDR_VAR 0 3
15706: PUSH
15707: LD_VAR 0 3
15711: PUSH
15712: LD_INT 22
15714: PUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 255
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 91
15731: PUSH
15732: LD_VAR 0 1
15736: PUSH
15737: LD_INT 6
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 30
15747: PUSH
15748: LD_VAR 0 4
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: PPUSH
15765: CALL_OW 69
15769: ADD
15770: ST_TO_ADDR
15771: GO 15699
15773: POP
15774: POP
// for i = 1 to tmp do
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: DOUBLE
15781: LD_INT 1
15783: DEC
15784: ST_TO_ADDR
15785: LD_VAR 0 3
15789: PUSH
15790: FOR_TO
15791: IFFALSE 15879
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15793: LD_ADDR_VAR 0 5
15797: PUSH
15798: LD_VAR 0 5
15802: PUSH
15803: LD_VAR 0 3
15807: PUSH
15808: LD_VAR 0 4
15812: ARRAY
15813: PPUSH
15814: CALL_OW 266
15818: PUSH
15819: LD_VAR 0 3
15823: PUSH
15824: LD_VAR 0 4
15828: ARRAY
15829: PPUSH
15830: CALL_OW 250
15834: PUSH
15835: LD_VAR 0 3
15839: PUSH
15840: LD_VAR 0 4
15844: ARRAY
15845: PPUSH
15846: CALL_OW 251
15850: PUSH
15851: LD_VAR 0 3
15855: PUSH
15856: LD_VAR 0 4
15860: ARRAY
15861: PPUSH
15862: CALL_OW 254
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: ADD
15876: ST_TO_ADDR
15877: GO 15790
15879: POP
15880: POP
// result := list ;
15881: LD_ADDR_VAR 0 2
15885: PUSH
15886: LD_VAR 0 5
15890: ST_TO_ADDR
// end ;
15891: LD_VAR 0 2
15895: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15896: LD_INT 0
15898: PPUSH
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
// if not factory then
15905: LD_VAR 0 1
15909: NOT
15910: IFFALSE 15914
// exit ;
15912: GO 16507
// if control = control_apeman then
15914: LD_VAR 0 4
15918: PUSH
15919: LD_INT 5
15921: EQUAL
15922: IFFALSE 16031
// begin tmp := UnitsInside ( factory ) ;
15924: LD_ADDR_VAR 0 8
15928: PUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: CALL_OW 313
15938: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15939: LD_VAR 0 8
15943: PPUSH
15944: LD_INT 25
15946: PUSH
15947: LD_INT 12
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 72
15958: NOT
15959: IFFALSE 15969
// control := control_manual ;
15961: LD_ADDR_VAR 0 4
15965: PUSH
15966: LD_INT 1
15968: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15969: LD_ADDR_VAR 0 8
15973: PUSH
15974: LD_VAR 0 1
15978: PPUSH
15979: CALL 15666 0 1
15983: ST_TO_ADDR
// if tmp then
15984: LD_VAR 0 8
15988: IFFALSE 16031
// begin for i in tmp do
15990: LD_ADDR_VAR 0 7
15994: PUSH
15995: LD_VAR 0 8
15999: PUSH
16000: FOR_IN
16001: IFFALSE 16029
// if i [ 1 ] = b_ext_radio then
16003: LD_VAR 0 7
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PUSH
16012: LD_INT 22
16014: EQUAL
16015: IFFALSE 16027
// begin control := control_remote ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_INT 2
16024: ST_TO_ADDR
// break ;
16025: GO 16029
// end ;
16027: GO 16000
16029: POP
16030: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16031: LD_VAR 0 1
16035: PPUSH
16036: LD_VAR 0 2
16040: PPUSH
16041: LD_VAR 0 3
16045: PPUSH
16046: LD_VAR 0 4
16050: PPUSH
16051: LD_VAR 0 5
16055: PPUSH
16056: CALL_OW 448
16060: IFFALSE 16095
// begin result := [ chassis , engine , control , weapon ] ;
16062: LD_ADDR_VAR 0 6
16066: PUSH
16067: LD_VAR 0 2
16071: PUSH
16072: LD_VAR 0 3
16076: PUSH
16077: LD_VAR 0 4
16081: PUSH
16082: LD_VAR 0 5
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: ST_TO_ADDR
// exit ;
16093: GO 16507
// end ; _chassis := AvailableChassisList ( factory ) ;
16095: LD_ADDR_VAR 0 9
16099: PUSH
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 475
16109: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16110: LD_ADDR_VAR 0 11
16114: PUSH
16115: LD_VAR 0 1
16119: PPUSH
16120: CALL_OW 476
16124: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16125: LD_ADDR_VAR 0 12
16129: PUSH
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 477
16139: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16140: LD_ADDR_VAR 0 10
16144: PUSH
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL_OW 478
16154: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16155: LD_VAR 0 9
16159: NOT
16160: PUSH
16161: LD_VAR 0 11
16165: NOT
16166: OR
16167: PUSH
16168: LD_VAR 0 12
16172: NOT
16173: OR
16174: PUSH
16175: LD_VAR 0 10
16179: NOT
16180: OR
16181: IFFALSE 16216
// begin result := [ chassis , engine , control , weapon ] ;
16183: LD_ADDR_VAR 0 6
16187: PUSH
16188: LD_VAR 0 2
16192: PUSH
16193: LD_VAR 0 3
16197: PUSH
16198: LD_VAR 0 4
16202: PUSH
16203: LD_VAR 0 5
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: ST_TO_ADDR
// exit ;
16214: GO 16507
// end ; if not chassis in _chassis then
16216: LD_VAR 0 2
16220: PUSH
16221: LD_VAR 0 9
16225: IN
16226: NOT
16227: IFFALSE 16253
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16229: LD_ADDR_VAR 0 2
16233: PUSH
16234: LD_VAR 0 9
16238: PUSH
16239: LD_INT 1
16241: PPUSH
16242: LD_VAR 0 9
16246: PPUSH
16247: CALL_OW 12
16251: ARRAY
16252: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16253: LD_VAR 0 2
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: CALL 16512 0 2
16267: NOT
16268: IFFALSE 16327
// repeat engine := _engine [ 1 ] ;
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_VAR 0 11
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16284: LD_ADDR_VAR 0 11
16288: PUSH
16289: LD_VAR 0 11
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 3
16301: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16302: LD_VAR 0 2
16306: PPUSH
16307: LD_VAR 0 3
16311: PPUSH
16312: CALL 16512 0 2
16316: PUSH
16317: LD_VAR 0 11
16321: PUSH
16322: EMPTY
16323: EQUAL
16324: OR
16325: IFFALSE 16270
// if not control in _control then
16327: LD_VAR 0 4
16331: PUSH
16332: LD_VAR 0 12
16336: IN
16337: NOT
16338: IFFALSE 16364
// control := _control [ rand ( 1 , _control ) ] ;
16340: LD_ADDR_VAR 0 4
16344: PUSH
16345: LD_VAR 0 12
16349: PUSH
16350: LD_INT 1
16352: PPUSH
16353: LD_VAR 0 12
16357: PPUSH
16358: CALL_OW 12
16362: ARRAY
16363: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16364: LD_VAR 0 2
16368: PPUSH
16369: LD_VAR 0 5
16373: PPUSH
16374: CALL 16732 0 2
16378: NOT
16379: IFFALSE 16438
// repeat weapon := _weapon [ 1 ] ;
16381: LD_ADDR_VAR 0 5
16385: PUSH
16386: LD_VAR 0 10
16390: PUSH
16391: LD_INT 1
16393: ARRAY
16394: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16395: LD_ADDR_VAR 0 10
16399: PUSH
16400: LD_VAR 0 10
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 3
16412: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_VAR 0 5
16422: PPUSH
16423: CALL 16732 0 2
16427: PUSH
16428: LD_VAR 0 10
16432: PUSH
16433: EMPTY
16434: EQUAL
16435: OR
16436: IFFALSE 16381
// result := [ ] ;
16438: LD_ADDR_VAR 0 6
16442: PUSH
16443: EMPTY
16444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16445: LD_VAR 0 1
16449: PPUSH
16450: LD_VAR 0 2
16454: PPUSH
16455: LD_VAR 0 3
16459: PPUSH
16460: LD_VAR 0 4
16464: PPUSH
16465: LD_VAR 0 5
16469: PPUSH
16470: CALL_OW 448
16474: IFFALSE 16507
// result := [ chassis , engine , control , weapon ] ;
16476: LD_ADDR_VAR 0 6
16480: PUSH
16481: LD_VAR 0 2
16485: PUSH
16486: LD_VAR 0 3
16490: PUSH
16491: LD_VAR 0 4
16495: PUSH
16496: LD_VAR 0 5
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: ST_TO_ADDR
// end ;
16507: LD_VAR 0 6
16511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16512: LD_INT 0
16514: PPUSH
// if not chassis or not engine then
16515: LD_VAR 0 1
16519: NOT
16520: PUSH
16521: LD_VAR 0 2
16525: NOT
16526: OR
16527: IFFALSE 16531
// exit ;
16529: GO 16727
// case engine of engine_solar :
16531: LD_VAR 0 2
16535: PUSH
16536: LD_INT 2
16538: DOUBLE
16539: EQUAL
16540: IFTRUE 16544
16542: GO 16582
16544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16545: LD_ADDR_VAR 0 3
16549: PUSH
16550: LD_INT 11
16552: PUSH
16553: LD_INT 12
16555: PUSH
16556: LD_INT 13
16558: PUSH
16559: LD_INT 14
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: LD_INT 2
16567: PUSH
16568: LD_INT 3
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: ST_TO_ADDR
16580: GO 16711
16582: LD_INT 1
16584: DOUBLE
16585: EQUAL
16586: IFTRUE 16590
16588: GO 16652
16590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_INT 11
16598: PUSH
16599: LD_INT 12
16601: PUSH
16602: LD_INT 13
16604: PUSH
16605: LD_INT 14
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 4
16619: PUSH
16620: LD_INT 5
16622: PUSH
16623: LD_INT 21
16625: PUSH
16626: LD_INT 23
16628: PUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 24
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: ST_TO_ADDR
16650: GO 16711
16652: LD_INT 3
16654: DOUBLE
16655: EQUAL
16656: IFTRUE 16660
16658: GO 16710
16660: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16661: LD_ADDR_VAR 0 3
16665: PUSH
16666: LD_INT 13
16668: PUSH
16669: LD_INT 14
16671: PUSH
16672: LD_INT 2
16674: PUSH
16675: LD_INT 3
16677: PUSH
16678: LD_INT 4
16680: PUSH
16681: LD_INT 5
16683: PUSH
16684: LD_INT 21
16686: PUSH
16687: LD_INT 22
16689: PUSH
16690: LD_INT 23
16692: PUSH
16693: LD_INT 24
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: ST_TO_ADDR
16708: GO 16711
16710: POP
// result := ( chassis in result ) ;
16711: LD_ADDR_VAR 0 3
16715: PUSH
16716: LD_VAR 0 1
16720: PUSH
16721: LD_VAR 0 3
16725: IN
16726: ST_TO_ADDR
// end ;
16727: LD_VAR 0 3
16731: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16732: LD_INT 0
16734: PPUSH
// if not chassis or not weapon then
16735: LD_VAR 0 1
16739: NOT
16740: PUSH
16741: LD_VAR 0 2
16745: NOT
16746: OR
16747: IFFALSE 16751
// exit ;
16749: GO 17777
// case weapon of us_machine_gun :
16751: LD_VAR 0 2
16755: PUSH
16756: LD_INT 2
16758: DOUBLE
16759: EQUAL
16760: IFTRUE 16764
16762: GO 16794
16764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16765: LD_ADDR_VAR 0 3
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: LD_INT 2
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: LD_INT 4
16781: PUSH
16782: LD_INT 5
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: ST_TO_ADDR
16792: GO 17761
16794: LD_INT 3
16796: DOUBLE
16797: EQUAL
16798: IFTRUE 16802
16800: GO 16832
16802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16803: LD_ADDR_VAR 0 3
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 4
16819: PUSH
16820: LD_INT 5
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: ST_TO_ADDR
16830: GO 17761
16832: LD_INT 11
16834: DOUBLE
16835: EQUAL
16836: IFTRUE 16840
16838: GO 16870
16840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16841: LD_ADDR_VAR 0 3
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: LD_INT 3
16854: PUSH
16855: LD_INT 4
16857: PUSH
16858: LD_INT 5
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: ST_TO_ADDR
16868: GO 17761
16870: LD_INT 4
16872: DOUBLE
16873: EQUAL
16874: IFTRUE 16878
16876: GO 16904
16878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16879: LD_ADDR_VAR 0 3
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: LD_INT 4
16892: PUSH
16893: LD_INT 5
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: ST_TO_ADDR
16902: GO 17761
16904: LD_INT 5
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16938
16912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16913: LD_ADDR_VAR 0 3
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 5
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: ST_TO_ADDR
16936: GO 17761
16938: LD_INT 9
16940: DOUBLE
16941: EQUAL
16942: IFTRUE 16946
16944: GO 16972
16946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16947: LD_ADDR_VAR 0 3
16951: PUSH
16952: LD_INT 2
16954: PUSH
16955: LD_INT 3
16957: PUSH
16958: LD_INT 4
16960: PUSH
16961: LD_INT 5
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: ST_TO_ADDR
16970: GO 17761
16972: LD_INT 7
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 17006
16980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16981: LD_ADDR_VAR 0 3
16985: PUSH
16986: LD_INT 2
16988: PUSH
16989: LD_INT 3
16991: PUSH
16992: LD_INT 4
16994: PUSH
16995: LD_INT 5
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: ST_TO_ADDR
17004: GO 17761
17006: LD_INT 12
17008: DOUBLE
17009: EQUAL
17010: IFTRUE 17014
17012: GO 17040
17014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 3
17025: PUSH
17026: LD_INT 4
17028: PUSH
17029: LD_INT 5
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: ST_TO_ADDR
17038: GO 17761
17040: LD_INT 13
17042: DOUBLE
17043: EQUAL
17044: IFTRUE 17048
17046: GO 17074
17048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: LD_INT 3
17059: PUSH
17060: LD_INT 4
17062: PUSH
17063: LD_INT 5
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: ST_TO_ADDR
17072: GO 17761
17074: LD_INT 14
17076: DOUBLE
17077: EQUAL
17078: IFTRUE 17082
17080: GO 17100
17082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17083: LD_ADDR_VAR 0 3
17087: PUSH
17088: LD_INT 4
17090: PUSH
17091: LD_INT 5
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: ST_TO_ADDR
17098: GO 17761
17100: LD_INT 6
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17126
17108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 4
17116: PUSH
17117: LD_INT 5
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: ST_TO_ADDR
17124: GO 17761
17126: LD_INT 10
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17152
17134: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17135: LD_ADDR_VAR 0 3
17139: PUSH
17140: LD_INT 4
17142: PUSH
17143: LD_INT 5
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: ST_TO_ADDR
17150: GO 17761
17152: LD_INT 22
17154: DOUBLE
17155: EQUAL
17156: IFTRUE 17160
17158: GO 17186
17160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_INT 11
17168: PUSH
17169: LD_INT 12
17171: PUSH
17172: LD_INT 13
17174: PUSH
17175: LD_INT 14
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: ST_TO_ADDR
17184: GO 17761
17186: LD_INT 23
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17220
17194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17195: LD_ADDR_VAR 0 3
17199: PUSH
17200: LD_INT 11
17202: PUSH
17203: LD_INT 12
17205: PUSH
17206: LD_INT 13
17208: PUSH
17209: LD_INT 14
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 17761
17220: LD_INT 24
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17254
17228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 11
17236: PUSH
17237: LD_INT 12
17239: PUSH
17240: LD_INT 13
17242: PUSH
17243: LD_INT 14
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: ST_TO_ADDR
17252: GO 17761
17254: LD_INT 30
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17288
17262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_INT 11
17270: PUSH
17271: LD_INT 12
17273: PUSH
17274: LD_INT 13
17276: PUSH
17277: LD_INT 14
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: ST_TO_ADDR
17286: GO 17761
17288: LD_INT 25
17290: DOUBLE
17291: EQUAL
17292: IFTRUE 17296
17294: GO 17314
17296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_INT 13
17304: PUSH
17305: LD_INT 14
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: ST_TO_ADDR
17312: GO 17761
17314: LD_INT 27
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17340
17322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_INT 13
17330: PUSH
17331: LD_INT 14
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: ST_TO_ADDR
17338: GO 17761
17340: LD_INT 28
17342: DOUBLE
17343: EQUAL
17344: IFTRUE 17348
17346: GO 17366
17348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17349: LD_ADDR_VAR 0 3
17353: PUSH
17354: LD_INT 13
17356: PUSH
17357: LD_INT 14
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: ST_TO_ADDR
17364: GO 17761
17366: LD_INT 29
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17374
17372: GO 17392
17374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17375: LD_ADDR_VAR 0 3
17379: PUSH
17380: LD_INT 13
17382: PUSH
17383: LD_INT 14
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: ST_TO_ADDR
17390: GO 17761
17392: LD_INT 31
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17418
17400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17401: LD_ADDR_VAR 0 3
17405: PUSH
17406: LD_INT 13
17408: PUSH
17409: LD_INT 14
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: ST_TO_ADDR
17416: GO 17761
17418: LD_INT 26
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17444
17426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17427: LD_ADDR_VAR 0 3
17431: PUSH
17432: LD_INT 13
17434: PUSH
17435: LD_INT 14
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: ST_TO_ADDR
17442: GO 17761
17444: LD_INT 42
17446: DOUBLE
17447: EQUAL
17448: IFTRUE 17452
17450: GO 17478
17452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17453: LD_ADDR_VAR 0 3
17457: PUSH
17458: LD_INT 21
17460: PUSH
17461: LD_INT 22
17463: PUSH
17464: LD_INT 23
17466: PUSH
17467: LD_INT 24
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: ST_TO_ADDR
17476: GO 17761
17478: LD_INT 43
17480: DOUBLE
17481: EQUAL
17482: IFTRUE 17486
17484: GO 17512
17486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17487: LD_ADDR_VAR 0 3
17491: PUSH
17492: LD_INT 21
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_INT 23
17500: PUSH
17501: LD_INT 24
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: ST_TO_ADDR
17510: GO 17761
17512: LD_INT 44
17514: DOUBLE
17515: EQUAL
17516: IFTRUE 17520
17518: GO 17546
17520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17521: LD_ADDR_VAR 0 3
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 22
17531: PUSH
17532: LD_INT 23
17534: PUSH
17535: LD_INT 24
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: ST_TO_ADDR
17544: GO 17761
17546: LD_INT 45
17548: DOUBLE
17549: EQUAL
17550: IFTRUE 17554
17552: GO 17580
17554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17555: LD_ADDR_VAR 0 3
17559: PUSH
17560: LD_INT 21
17562: PUSH
17563: LD_INT 22
17565: PUSH
17566: LD_INT 23
17568: PUSH
17569: LD_INT 24
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: ST_TO_ADDR
17578: GO 17761
17580: LD_INT 49
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17588
17586: GO 17614
17588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17589: LD_ADDR_VAR 0 3
17593: PUSH
17594: LD_INT 21
17596: PUSH
17597: LD_INT 22
17599: PUSH
17600: LD_INT 23
17602: PUSH
17603: LD_INT 24
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: ST_TO_ADDR
17612: GO 17761
17614: LD_INT 51
17616: DOUBLE
17617: EQUAL
17618: IFTRUE 17622
17620: GO 17648
17622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17623: LD_ADDR_VAR 0 3
17627: PUSH
17628: LD_INT 21
17630: PUSH
17631: LD_INT 22
17633: PUSH
17634: LD_INT 23
17636: PUSH
17637: LD_INT 24
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: ST_TO_ADDR
17646: GO 17761
17648: LD_INT 52
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17682
17656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17657: LD_ADDR_VAR 0 3
17661: PUSH
17662: LD_INT 21
17664: PUSH
17665: LD_INT 22
17667: PUSH
17668: LD_INT 23
17670: PUSH
17671: LD_INT 24
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: ST_TO_ADDR
17680: GO 17761
17682: LD_INT 53
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17708
17690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17691: LD_ADDR_VAR 0 3
17695: PUSH
17696: LD_INT 23
17698: PUSH
17699: LD_INT 24
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
17706: GO 17761
17708: LD_INT 46
17710: DOUBLE
17711: EQUAL
17712: IFTRUE 17716
17714: GO 17734
17716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17717: LD_ADDR_VAR 0 3
17721: PUSH
17722: LD_INT 23
17724: PUSH
17725: LD_INT 24
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: ST_TO_ADDR
17732: GO 17761
17734: LD_INT 47
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17760
17742: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17743: LD_ADDR_VAR 0 3
17747: PUSH
17748: LD_INT 23
17750: PUSH
17751: LD_INT 24
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: ST_TO_ADDR
17758: GO 17761
17760: POP
// result := ( chassis in result ) ;
17761: LD_ADDR_VAR 0 3
17765: PUSH
17766: LD_VAR 0 1
17770: PUSH
17771: LD_VAR 0 3
17775: IN
17776: ST_TO_ADDR
// end ;
17777: LD_VAR 0 3
17781: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17782: LD_INT 0
17784: PPUSH
17785: PPUSH
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
17790: PPUSH
// result := array ;
17791: LD_ADDR_VAR 0 5
17795: PUSH
17796: LD_VAR 0 1
17800: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17801: LD_VAR 0 1
17805: NOT
17806: PUSH
17807: LD_VAR 0 2
17811: NOT
17812: OR
17813: PUSH
17814: LD_VAR 0 3
17818: NOT
17819: OR
17820: PUSH
17821: LD_VAR 0 2
17825: PUSH
17826: LD_VAR 0 1
17830: GREATER
17831: OR
17832: PUSH
17833: LD_VAR 0 3
17837: PUSH
17838: LD_VAR 0 1
17842: GREATER
17843: OR
17844: IFFALSE 17848
// exit ;
17846: GO 18144
// if direction then
17848: LD_VAR 0 4
17852: IFFALSE 17916
// begin d := 1 ;
17854: LD_ADDR_VAR 0 9
17858: PUSH
17859: LD_INT 1
17861: ST_TO_ADDR
// if i_from > i_to then
17862: LD_VAR 0 2
17866: PUSH
17867: LD_VAR 0 3
17871: GREATER
17872: IFFALSE 17898
// length := ( array - i_from ) + i_to else
17874: LD_ADDR_VAR 0 11
17878: PUSH
17879: LD_VAR 0 1
17883: PUSH
17884: LD_VAR 0 2
17888: MINUS
17889: PUSH
17890: LD_VAR 0 3
17894: PLUS
17895: ST_TO_ADDR
17896: GO 17914
// length := i_to - i_from ;
17898: LD_ADDR_VAR 0 11
17902: PUSH
17903: LD_VAR 0 3
17907: PUSH
17908: LD_VAR 0 2
17912: MINUS
17913: ST_TO_ADDR
// end else
17914: GO 17977
// begin d := - 1 ;
17916: LD_ADDR_VAR 0 9
17920: PUSH
17921: LD_INT 1
17923: NEG
17924: ST_TO_ADDR
// if i_from > i_to then
17925: LD_VAR 0 2
17929: PUSH
17930: LD_VAR 0 3
17934: GREATER
17935: IFFALSE 17955
// length := i_from - i_to else
17937: LD_ADDR_VAR 0 11
17941: PUSH
17942: LD_VAR 0 2
17946: PUSH
17947: LD_VAR 0 3
17951: MINUS
17952: ST_TO_ADDR
17953: GO 17977
// length := ( array - i_to ) + i_from ;
17955: LD_ADDR_VAR 0 11
17959: PUSH
17960: LD_VAR 0 1
17964: PUSH
17965: LD_VAR 0 3
17969: MINUS
17970: PUSH
17971: LD_VAR 0 2
17975: PLUS
17976: ST_TO_ADDR
// end ; if not length then
17977: LD_VAR 0 11
17981: NOT
17982: IFFALSE 17986
// exit ;
17984: GO 18144
// tmp := array ;
17986: LD_ADDR_VAR 0 10
17990: PUSH
17991: LD_VAR 0 1
17995: ST_TO_ADDR
// for i = 1 to length do
17996: LD_ADDR_VAR 0 6
18000: PUSH
18001: DOUBLE
18002: LD_INT 1
18004: DEC
18005: ST_TO_ADDR
18006: LD_VAR 0 11
18010: PUSH
18011: FOR_TO
18012: IFFALSE 18132
// begin for j = 1 to array do
18014: LD_ADDR_VAR 0 7
18018: PUSH
18019: DOUBLE
18020: LD_INT 1
18022: DEC
18023: ST_TO_ADDR
18024: LD_VAR 0 1
18028: PUSH
18029: FOR_TO
18030: IFFALSE 18118
// begin k := j + d ;
18032: LD_ADDR_VAR 0 8
18036: PUSH
18037: LD_VAR 0 7
18041: PUSH
18042: LD_VAR 0 9
18046: PLUS
18047: ST_TO_ADDR
// if k > array then
18048: LD_VAR 0 8
18052: PUSH
18053: LD_VAR 0 1
18057: GREATER
18058: IFFALSE 18068
// k := 1 ;
18060: LD_ADDR_VAR 0 8
18064: PUSH
18065: LD_INT 1
18067: ST_TO_ADDR
// if not k then
18068: LD_VAR 0 8
18072: NOT
18073: IFFALSE 18085
// k := array ;
18075: LD_ADDR_VAR 0 8
18079: PUSH
18080: LD_VAR 0 1
18084: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18085: LD_ADDR_VAR 0 10
18089: PUSH
18090: LD_VAR 0 10
18094: PPUSH
18095: LD_VAR 0 8
18099: PPUSH
18100: LD_VAR 0 1
18104: PUSH
18105: LD_VAR 0 7
18109: ARRAY
18110: PPUSH
18111: CALL_OW 1
18115: ST_TO_ADDR
// end ;
18116: GO 18029
18118: POP
18119: POP
// array := tmp ;
18120: LD_ADDR_VAR 0 1
18124: PUSH
18125: LD_VAR 0 10
18129: ST_TO_ADDR
// end ;
18130: GO 18011
18132: POP
18133: POP
// result := array ;
18134: LD_ADDR_VAR 0 5
18138: PUSH
18139: LD_VAR 0 1
18143: ST_TO_ADDR
// end ;
18144: LD_VAR 0 5
18148: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18149: LD_INT 0
18151: PPUSH
18152: PPUSH
// result := 0 ;
18153: LD_ADDR_VAR 0 3
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// if not array or not value in array then
18161: LD_VAR 0 1
18165: NOT
18166: PUSH
18167: LD_VAR 0 2
18171: PUSH
18172: LD_VAR 0 1
18176: IN
18177: NOT
18178: OR
18179: IFFALSE 18183
// exit ;
18181: GO 18237
// for i = 1 to array do
18183: LD_ADDR_VAR 0 4
18187: PUSH
18188: DOUBLE
18189: LD_INT 1
18191: DEC
18192: ST_TO_ADDR
18193: LD_VAR 0 1
18197: PUSH
18198: FOR_TO
18199: IFFALSE 18235
// if value = array [ i ] then
18201: LD_VAR 0 2
18205: PUSH
18206: LD_VAR 0 1
18210: PUSH
18211: LD_VAR 0 4
18215: ARRAY
18216: EQUAL
18217: IFFALSE 18233
// begin result := i ;
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_VAR 0 4
18228: ST_TO_ADDR
// exit ;
18229: POP
18230: POP
18231: GO 18237
// end ;
18233: GO 18198
18235: POP
18236: POP
// end ;
18237: LD_VAR 0 3
18241: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18242: LD_INT 0
18244: PPUSH
// vc_chassis := chassis ;
18245: LD_ADDR_OWVAR 37
18249: PUSH
18250: LD_VAR 0 1
18254: ST_TO_ADDR
// vc_engine := engine ;
18255: LD_ADDR_OWVAR 39
18259: PUSH
18260: LD_VAR 0 2
18264: ST_TO_ADDR
// vc_control := control ;
18265: LD_ADDR_OWVAR 38
18269: PUSH
18270: LD_VAR 0 3
18274: ST_TO_ADDR
// vc_weapon := weapon ;
18275: LD_ADDR_OWVAR 40
18279: PUSH
18280: LD_VAR 0 4
18284: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18285: LD_ADDR_OWVAR 41
18289: PUSH
18290: LD_VAR 0 5
18294: ST_TO_ADDR
// end ;
18295: LD_VAR 0 6
18299: RET
// export function WantPlant ( unit ) ; var task ; begin
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
// result := false ;
18304: LD_ADDR_VAR 0 2
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18312: LD_ADDR_VAR 0 3
18316: PUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 437
18326: ST_TO_ADDR
// if task then
18327: LD_VAR 0 3
18331: IFFALSE 18359
// if task [ 1 ] [ 1 ] = p then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 1
18340: ARRAY
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_STRING p
18348: EQUAL
18349: IFFALSE 18359
// result := true ;
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// end ;
18359: LD_VAR 0 2
18363: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18364: LD_INT 0
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
// if pos < 1 then
18370: LD_VAR 0 2
18374: PUSH
18375: LD_INT 1
18377: LESS
18378: IFFALSE 18382
// exit ;
18380: GO 18685
// if pos = 1 then
18382: LD_VAR 0 2
18386: PUSH
18387: LD_INT 1
18389: EQUAL
18390: IFFALSE 18423
// result := Replace ( arr , pos [ 1 ] , value ) else
18392: LD_ADDR_VAR 0 4
18396: PUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: LD_VAR 0 2
18406: PUSH
18407: LD_INT 1
18409: ARRAY
18410: PPUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: CALL_OW 1
18420: ST_TO_ADDR
18421: GO 18685
// begin tmp := arr ;
18423: LD_ADDR_VAR 0 6
18427: PUSH
18428: LD_VAR 0 1
18432: ST_TO_ADDR
// s_arr := [ tmp ] ;
18433: LD_ADDR_VAR 0 7
18437: PUSH
18438: LD_VAR 0 6
18442: PUSH
18443: EMPTY
18444: LIST
18445: ST_TO_ADDR
// for i = 1 to pos - 1 do
18446: LD_ADDR_VAR 0 5
18450: PUSH
18451: DOUBLE
18452: LD_INT 1
18454: DEC
18455: ST_TO_ADDR
18456: LD_VAR 0 2
18460: PUSH
18461: LD_INT 1
18463: MINUS
18464: PUSH
18465: FOR_TO
18466: IFFALSE 18511
// begin tmp := tmp [ pos [ i ] ] ;
18468: LD_ADDR_VAR 0 6
18472: PUSH
18473: LD_VAR 0 6
18477: PUSH
18478: LD_VAR 0 2
18482: PUSH
18483: LD_VAR 0 5
18487: ARRAY
18488: ARRAY
18489: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18490: LD_ADDR_VAR 0 7
18494: PUSH
18495: LD_VAR 0 7
18499: PUSH
18500: LD_VAR 0 6
18504: PUSH
18505: EMPTY
18506: LIST
18507: ADD
18508: ST_TO_ADDR
// end ;
18509: GO 18465
18511: POP
18512: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18513: LD_ADDR_VAR 0 6
18517: PUSH
18518: LD_VAR 0 6
18522: PPUSH
18523: LD_VAR 0 2
18527: PUSH
18528: LD_VAR 0 2
18532: ARRAY
18533: PPUSH
18534: LD_VAR 0 3
18538: PPUSH
18539: CALL_OW 1
18543: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18544: LD_ADDR_VAR 0 7
18548: PUSH
18549: LD_VAR 0 7
18553: PPUSH
18554: LD_VAR 0 7
18558: PPUSH
18559: LD_VAR 0 6
18563: PPUSH
18564: CALL_OW 1
18568: ST_TO_ADDR
// for i = s_arr downto 2 do
18569: LD_ADDR_VAR 0 5
18573: PUSH
18574: DOUBLE
18575: LD_VAR 0 7
18579: INC
18580: ST_TO_ADDR
18581: LD_INT 2
18583: PUSH
18584: FOR_DOWNTO
18585: IFFALSE 18669
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18587: LD_ADDR_VAR 0 6
18591: PUSH
18592: LD_VAR 0 7
18596: PUSH
18597: LD_VAR 0 5
18601: PUSH
18602: LD_INT 1
18604: MINUS
18605: ARRAY
18606: PPUSH
18607: LD_VAR 0 2
18611: PUSH
18612: LD_VAR 0 5
18616: PUSH
18617: LD_INT 1
18619: MINUS
18620: ARRAY
18621: PPUSH
18622: LD_VAR 0 7
18626: PUSH
18627: LD_VAR 0 5
18631: ARRAY
18632: PPUSH
18633: CALL_OW 1
18637: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18638: LD_ADDR_VAR 0 7
18642: PUSH
18643: LD_VAR 0 7
18647: PPUSH
18648: LD_VAR 0 5
18652: PUSH
18653: LD_INT 1
18655: MINUS
18656: PPUSH
18657: LD_VAR 0 6
18661: PPUSH
18662: CALL_OW 1
18666: ST_TO_ADDR
// end ;
18667: GO 18584
18669: POP
18670: POP
// result := s_arr [ 1 ] ;
18671: LD_ADDR_VAR 0 4
18675: PUSH
18676: LD_VAR 0 7
18680: PUSH
18681: LD_INT 1
18683: ARRAY
18684: ST_TO_ADDR
// end ; end ;
18685: LD_VAR 0 4
18689: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18690: LD_INT 0
18692: PPUSH
18693: PPUSH
// if not list then
18694: LD_VAR 0 1
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18794
// i := list [ pos1 ] ;
18703: LD_ADDR_VAR 0 5
18707: PUSH
18708: LD_VAR 0 1
18712: PUSH
18713: LD_VAR 0 2
18717: ARRAY
18718: ST_TO_ADDR
// if not i then
18719: LD_VAR 0 5
18723: NOT
18724: IFFALSE 18728
// exit ;
18726: GO 18794
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18728: LD_ADDR_VAR 0 1
18732: PUSH
18733: LD_VAR 0 1
18737: PPUSH
18738: LD_VAR 0 2
18742: PPUSH
18743: LD_VAR 0 1
18747: PUSH
18748: LD_VAR 0 3
18752: ARRAY
18753: PPUSH
18754: CALL_OW 1
18758: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18759: LD_ADDR_VAR 0 1
18763: PUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_VAR 0 5
18778: PPUSH
18779: CALL_OW 1
18783: ST_TO_ADDR
// result := list ;
18784: LD_ADDR_VAR 0 4
18788: PUSH
18789: LD_VAR 0 1
18793: ST_TO_ADDR
// end ;
18794: LD_VAR 0 4
18798: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18799: LD_INT 0
18801: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18802: LD_ADDR_VAR 0 5
18806: PUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 250
18816: PPUSH
18817: LD_VAR 0 1
18821: PPUSH
18822: CALL_OW 251
18826: PPUSH
18827: LD_VAR 0 2
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: LD_VAR 0 4
18841: PPUSH
18842: CALL 18852 0 5
18846: ST_TO_ADDR
// end ;
18847: LD_VAR 0 5
18851: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18852: LD_INT 0
18854: PPUSH
18855: PPUSH
18856: PPUSH
18857: PPUSH
// if not list then
18858: LD_VAR 0 3
18862: NOT
18863: IFFALSE 18867
// exit ;
18865: GO 19255
// result := [ ] ;
18867: LD_ADDR_VAR 0 6
18871: PUSH
18872: EMPTY
18873: ST_TO_ADDR
// for i in list do
18874: LD_ADDR_VAR 0 7
18878: PUSH
18879: LD_VAR 0 3
18883: PUSH
18884: FOR_IN
18885: IFFALSE 19087
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18887: LD_ADDR_VAR 0 9
18891: PUSH
18892: LD_VAR 0 7
18896: PPUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: LD_VAR 0 2
18906: PPUSH
18907: CALL_OW 297
18911: ST_TO_ADDR
// if not result then
18912: LD_VAR 0 6
18916: NOT
18917: IFFALSE 18943
// result := [ [ i , tmp ] ] else
18919: LD_ADDR_VAR 0 6
18923: PUSH
18924: LD_VAR 0 7
18928: PUSH
18929: LD_VAR 0 9
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: EMPTY
18939: LIST
18940: ST_TO_ADDR
18941: GO 19085
// begin if result [ result ] [ 2 ] < tmp then
18943: LD_VAR 0 6
18947: PUSH
18948: LD_VAR 0 6
18952: ARRAY
18953: PUSH
18954: LD_INT 2
18956: ARRAY
18957: PUSH
18958: LD_VAR 0 9
18962: LESS
18963: IFFALSE 19005
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18965: LD_ADDR_VAR 0 6
18969: PUSH
18970: LD_VAR 0 6
18974: PPUSH
18975: LD_VAR 0 6
18979: PUSH
18980: LD_INT 1
18982: PLUS
18983: PPUSH
18984: LD_VAR 0 7
18988: PUSH
18989: LD_VAR 0 9
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 2
19002: ST_TO_ADDR
19003: GO 19085
// for j = 1 to result do
19005: LD_ADDR_VAR 0 8
19009: PUSH
19010: DOUBLE
19011: LD_INT 1
19013: DEC
19014: ST_TO_ADDR
19015: LD_VAR 0 6
19019: PUSH
19020: FOR_TO
19021: IFFALSE 19083
// begin if tmp < result [ j ] [ 2 ] then
19023: LD_VAR 0 9
19027: PUSH
19028: LD_VAR 0 6
19032: PUSH
19033: LD_VAR 0 8
19037: ARRAY
19038: PUSH
19039: LD_INT 2
19041: ARRAY
19042: LESS
19043: IFFALSE 19081
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19045: LD_ADDR_VAR 0 6
19049: PUSH
19050: LD_VAR 0 6
19054: PPUSH
19055: LD_VAR 0 8
19059: PPUSH
19060: LD_VAR 0 7
19064: PUSH
19065: LD_VAR 0 9
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 2
19078: ST_TO_ADDR
// break ;
19079: GO 19083
// end ; end ;
19081: GO 19020
19083: POP
19084: POP
// end ; end ;
19085: GO 18884
19087: POP
19088: POP
// if result and not asc then
19089: LD_VAR 0 6
19093: PUSH
19094: LD_VAR 0 4
19098: NOT
19099: AND
19100: IFFALSE 19175
// begin tmp := result ;
19102: LD_ADDR_VAR 0 9
19106: PUSH
19107: LD_VAR 0 6
19111: ST_TO_ADDR
// for i = tmp downto 1 do
19112: LD_ADDR_VAR 0 7
19116: PUSH
19117: DOUBLE
19118: LD_VAR 0 9
19122: INC
19123: ST_TO_ADDR
19124: LD_INT 1
19126: PUSH
19127: FOR_DOWNTO
19128: IFFALSE 19173
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19130: LD_ADDR_VAR 0 6
19134: PUSH
19135: LD_VAR 0 6
19139: PPUSH
19140: LD_VAR 0 9
19144: PUSH
19145: LD_VAR 0 7
19149: MINUS
19150: PUSH
19151: LD_INT 1
19153: PLUS
19154: PPUSH
19155: LD_VAR 0 9
19159: PUSH
19160: LD_VAR 0 7
19164: ARRAY
19165: PPUSH
19166: CALL_OW 1
19170: ST_TO_ADDR
19171: GO 19127
19173: POP
19174: POP
// end ; tmp := [ ] ;
19175: LD_ADDR_VAR 0 9
19179: PUSH
19180: EMPTY
19181: ST_TO_ADDR
// if mode then
19182: LD_VAR 0 5
19186: IFFALSE 19255
// begin for i = 1 to result do
19188: LD_ADDR_VAR 0 7
19192: PUSH
19193: DOUBLE
19194: LD_INT 1
19196: DEC
19197: ST_TO_ADDR
19198: LD_VAR 0 6
19202: PUSH
19203: FOR_TO
19204: IFFALSE 19243
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19206: LD_ADDR_VAR 0 9
19210: PUSH
19211: LD_VAR 0 9
19215: PPUSH
19216: LD_VAR 0 7
19220: PPUSH
19221: LD_VAR 0 6
19225: PUSH
19226: LD_VAR 0 7
19230: ARRAY
19231: PUSH
19232: LD_INT 1
19234: ARRAY
19235: PPUSH
19236: CALL_OW 1
19240: ST_TO_ADDR
19241: GO 19203
19243: POP
19244: POP
// result := tmp ;
19245: LD_ADDR_VAR 0 6
19249: PUSH
19250: LD_VAR 0 9
19254: ST_TO_ADDR
// end ; end ;
19255: LD_VAR 0 6
19259: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
19264: PPUSH
19265: PPUSH
19266: PPUSH
19267: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19268: LD_ADDR_VAR 0 5
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: ST_TO_ADDR
// if not x or not y then
19290: LD_VAR 0 2
19294: NOT
19295: PUSH
19296: LD_VAR 0 3
19300: NOT
19301: OR
19302: IFFALSE 19306
// exit ;
19304: GO 20952
// if not range then
19306: LD_VAR 0 4
19310: NOT
19311: IFFALSE 19321
// range := 10 ;
19313: LD_ADDR_VAR 0 4
19317: PUSH
19318: LD_INT 10
19320: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19321: LD_ADDR_VAR 0 8
19325: PUSH
19326: LD_INT 81
19328: PUSH
19329: LD_VAR 0 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 92
19340: PUSH
19341: LD_VAR 0 2
19345: PUSH
19346: LD_VAR 0 3
19350: PUSH
19351: LD_VAR 0 4
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 3
19364: PUSH
19365: LD_INT 21
19367: PUSH
19368: LD_INT 3
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: PPUSH
19384: CALL_OW 69
19388: ST_TO_ADDR
// if not tmp then
19389: LD_VAR 0 8
19393: NOT
19394: IFFALSE 19398
// exit ;
19396: GO 20952
// for i in tmp do
19398: LD_ADDR_VAR 0 6
19402: PUSH
19403: LD_VAR 0 8
19407: PUSH
19408: FOR_IN
19409: IFFALSE 20927
// begin points := [ 0 , 0 , 0 ] ;
19411: LD_ADDR_VAR 0 9
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: ST_TO_ADDR
// bpoints := 1 ;
19430: LD_ADDR_VAR 0 10
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19438: LD_VAR 0 6
19442: PPUSH
19443: CALL_OW 247
19447: PUSH
19448: LD_INT 1
19450: DOUBLE
19451: EQUAL
19452: IFTRUE 19456
19454: GO 20034
19456: POP
// begin if GetClass ( i ) = 1 then
19457: LD_VAR 0 6
19461: PPUSH
19462: CALL_OW 257
19466: PUSH
19467: LD_INT 1
19469: EQUAL
19470: IFFALSE 19491
// points := [ 10 , 5 , 3 ] ;
19472: LD_ADDR_VAR 0 9
19476: PUSH
19477: LD_INT 10
19479: PUSH
19480: LD_INT 5
19482: PUSH
19483: LD_INT 3
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19491: LD_VAR 0 6
19495: PPUSH
19496: CALL_OW 257
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: LD_INT 4
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: IN
19515: IFFALSE 19536
// points := [ 3 , 2 , 1 ] ;
19517: LD_ADDR_VAR 0 9
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19536: LD_VAR 0 6
19540: PPUSH
19541: CALL_OW 257
19545: PUSH
19546: LD_INT 5
19548: EQUAL
19549: IFFALSE 19570
// points := [ 130 , 5 , 2 ] ;
19551: LD_ADDR_VAR 0 9
19555: PUSH
19556: LD_INT 130
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19570: LD_VAR 0 6
19574: PPUSH
19575: CALL_OW 257
19579: PUSH
19580: LD_INT 8
19582: EQUAL
19583: IFFALSE 19604
// points := [ 35 , 35 , 30 ] ;
19585: LD_ADDR_VAR 0 9
19589: PUSH
19590: LD_INT 35
19592: PUSH
19593: LD_INT 35
19595: PUSH
19596: LD_INT 30
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: LIST
19603: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19604: LD_VAR 0 6
19608: PPUSH
19609: CALL_OW 257
19613: PUSH
19614: LD_INT 9
19616: EQUAL
19617: IFFALSE 19638
// points := [ 20 , 55 , 40 ] ;
19619: LD_ADDR_VAR 0 9
19623: PUSH
19624: LD_INT 20
19626: PUSH
19627: LD_INT 55
19629: PUSH
19630: LD_INT 40
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19638: LD_VAR 0 6
19642: PPUSH
19643: CALL_OW 257
19647: PUSH
19648: LD_INT 12
19650: PUSH
19651: LD_INT 16
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: IN
19658: IFFALSE 19679
// points := [ 5 , 3 , 2 ] ;
19660: LD_ADDR_VAR 0 9
19664: PUSH
19665: LD_INT 5
19667: PUSH
19668: LD_INT 3
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19679: LD_VAR 0 6
19683: PPUSH
19684: CALL_OW 257
19688: PUSH
19689: LD_INT 17
19691: EQUAL
19692: IFFALSE 19713
// points := [ 100 , 50 , 75 ] ;
19694: LD_ADDR_VAR 0 9
19698: PUSH
19699: LD_INT 100
19701: PUSH
19702: LD_INT 50
19704: PUSH
19705: LD_INT 75
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19713: LD_VAR 0 6
19717: PPUSH
19718: CALL_OW 257
19722: PUSH
19723: LD_INT 15
19725: EQUAL
19726: IFFALSE 19747
// points := [ 10 , 5 , 3 ] ;
19728: LD_ADDR_VAR 0 9
19732: PUSH
19733: LD_INT 10
19735: PUSH
19736: LD_INT 5
19738: PUSH
19739: LD_INT 3
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19747: LD_VAR 0 6
19751: PPUSH
19752: CALL_OW 257
19756: PUSH
19757: LD_INT 14
19759: EQUAL
19760: IFFALSE 19781
// points := [ 10 , 0 , 0 ] ;
19762: LD_ADDR_VAR 0 9
19766: PUSH
19767: LD_INT 10
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19781: LD_VAR 0 6
19785: PPUSH
19786: CALL_OW 257
19790: PUSH
19791: LD_INT 11
19793: EQUAL
19794: IFFALSE 19815
// points := [ 30 , 10 , 5 ] ;
19796: LD_ADDR_VAR 0 9
19800: PUSH
19801: LD_INT 30
19803: PUSH
19804: LD_INT 10
19806: PUSH
19807: LD_INT 5
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19815: LD_VAR 0 1
19819: PPUSH
19820: LD_INT 5
19822: PPUSH
19823: CALL_OW 321
19827: PUSH
19828: LD_INT 2
19830: EQUAL
19831: IFFALSE 19848
// bpoints := bpoints * 1.8 ;
19833: LD_ADDR_VAR 0 10
19837: PUSH
19838: LD_VAR 0 10
19842: PUSH
19843: LD_REAL  1.80000000000000E+0000
19846: MUL
19847: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19848: LD_VAR 0 6
19852: PPUSH
19853: CALL_OW 257
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: LD_INT 3
19866: PUSH
19867: LD_INT 4
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: IN
19876: PUSH
19877: LD_VAR 0 1
19881: PPUSH
19882: LD_INT 51
19884: PPUSH
19885: CALL_OW 321
19889: PUSH
19890: LD_INT 2
19892: EQUAL
19893: AND
19894: IFFALSE 19911
// bpoints := bpoints * 1.2 ;
19896: LD_ADDR_VAR 0 10
19900: PUSH
19901: LD_VAR 0 10
19905: PUSH
19906: LD_REAL  1.20000000000000E+0000
19909: MUL
19910: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19911: LD_VAR 0 6
19915: PPUSH
19916: CALL_OW 257
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: LD_INT 7
19926: PUSH
19927: LD_INT 9
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: IN
19935: PUSH
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_INT 52
19943: PPUSH
19944: CALL_OW 321
19948: PUSH
19949: LD_INT 2
19951: EQUAL
19952: AND
19953: IFFALSE 19970
// bpoints := bpoints * 1.5 ;
19955: LD_ADDR_VAR 0 10
19959: PUSH
19960: LD_VAR 0 10
19964: PUSH
19965: LD_REAL  1.50000000000000E+0000
19968: MUL
19969: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19970: LD_VAR 0 1
19974: PPUSH
19975: LD_INT 66
19977: PPUSH
19978: CALL_OW 321
19982: PUSH
19983: LD_INT 2
19985: EQUAL
19986: IFFALSE 20003
// bpoints := bpoints * 1.1 ;
19988: LD_ADDR_VAR 0 10
19992: PUSH
19993: LD_VAR 0 10
19997: PUSH
19998: LD_REAL  1.10000000000000E+0000
20001: MUL
20002: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20003: LD_ADDR_VAR 0 10
20007: PUSH
20008: LD_VAR 0 10
20012: PUSH
20013: LD_VAR 0 6
20017: PPUSH
20018: LD_INT 1
20020: PPUSH
20021: CALL_OW 259
20025: PUSH
20026: LD_REAL  1.15000000000000E+0000
20029: MUL
20030: MUL
20031: ST_TO_ADDR
// end ; unit_vehicle :
20032: GO 20856
20034: LD_INT 2
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20844
20042: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20043: LD_VAR 0 6
20047: PPUSH
20048: CALL_OW 264
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: LD_INT 42
20058: PUSH
20059: LD_INT 24
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: IN
20067: IFFALSE 20088
// points := [ 25 , 5 , 3 ] ;
20069: LD_ADDR_VAR 0 9
20073: PUSH
20074: LD_INT 25
20076: PUSH
20077: LD_INT 5
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20088: LD_VAR 0 6
20092: PPUSH
20093: CALL_OW 264
20097: PUSH
20098: LD_INT 4
20100: PUSH
20101: LD_INT 43
20103: PUSH
20104: LD_INT 25
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: IN
20112: IFFALSE 20133
// points := [ 40 , 15 , 5 ] ;
20114: LD_ADDR_VAR 0 9
20118: PUSH
20119: LD_INT 40
20121: PUSH
20122: LD_INT 15
20124: PUSH
20125: LD_INT 5
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20133: LD_VAR 0 6
20137: PPUSH
20138: CALL_OW 264
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 23
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: IN
20153: IFFALSE 20174
// points := [ 7 , 25 , 8 ] ;
20155: LD_ADDR_VAR 0 9
20159: PUSH
20160: LD_INT 7
20162: PUSH
20163: LD_INT 25
20165: PUSH
20166: LD_INT 8
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20174: LD_VAR 0 6
20178: PPUSH
20179: CALL_OW 264
20183: PUSH
20184: LD_INT 5
20186: PUSH
20187: LD_INT 27
20189: PUSH
20190: LD_INT 44
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: IN
20198: IFFALSE 20219
// points := [ 14 , 50 , 16 ] ;
20200: LD_ADDR_VAR 0 9
20204: PUSH
20205: LD_INT 14
20207: PUSH
20208: LD_INT 50
20210: PUSH
20211: LD_INT 16
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20219: LD_VAR 0 6
20223: PPUSH
20224: CALL_OW 264
20228: PUSH
20229: LD_INT 6
20231: PUSH
20232: LD_INT 46
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: IN
20239: IFFALSE 20260
// points := [ 32 , 120 , 70 ] ;
20241: LD_ADDR_VAR 0 9
20245: PUSH
20246: LD_INT 32
20248: PUSH
20249: LD_INT 120
20251: PUSH
20252: LD_INT 70
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20260: LD_VAR 0 6
20264: PPUSH
20265: CALL_OW 264
20269: PUSH
20270: LD_INT 7
20272: PUSH
20273: LD_INT 28
20275: PUSH
20276: LD_INT 45
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: IN
20284: IFFALSE 20305
// points := [ 35 , 20 , 45 ] ;
20286: LD_ADDR_VAR 0 9
20290: PUSH
20291: LD_INT 35
20293: PUSH
20294: LD_INT 20
20296: PUSH
20297: LD_INT 45
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20305: LD_VAR 0 6
20309: PPUSH
20310: CALL_OW 264
20314: PUSH
20315: LD_INT 47
20317: PUSH
20318: EMPTY
20319: LIST
20320: IN
20321: IFFALSE 20342
// points := [ 67 , 45 , 75 ] ;
20323: LD_ADDR_VAR 0 9
20327: PUSH
20328: LD_INT 67
20330: PUSH
20331: LD_INT 45
20333: PUSH
20334: LD_INT 75
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20342: LD_VAR 0 6
20346: PPUSH
20347: CALL_OW 264
20351: PUSH
20352: LD_INT 26
20354: PUSH
20355: EMPTY
20356: LIST
20357: IN
20358: IFFALSE 20379
// points := [ 120 , 30 , 80 ] ;
20360: LD_ADDR_VAR 0 9
20364: PUSH
20365: LD_INT 120
20367: PUSH
20368: LD_INT 30
20370: PUSH
20371: LD_INT 80
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20379: LD_VAR 0 6
20383: PPUSH
20384: CALL_OW 264
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: EMPTY
20393: LIST
20394: IN
20395: IFFALSE 20416
// points := [ 40 , 1 , 1 ] ;
20397: LD_ADDR_VAR 0 9
20401: PUSH
20402: LD_INT 40
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20416: LD_VAR 0 6
20420: PPUSH
20421: CALL_OW 264
20425: PUSH
20426: LD_INT 29
20428: PUSH
20429: EMPTY
20430: LIST
20431: IN
20432: IFFALSE 20453
// points := [ 70 , 200 , 400 ] ;
20434: LD_ADDR_VAR 0 9
20438: PUSH
20439: LD_INT 70
20441: PUSH
20442: LD_INT 200
20444: PUSH
20445: LD_INT 400
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20453: LD_VAR 0 6
20457: PPUSH
20458: CALL_OW 264
20462: PUSH
20463: LD_INT 14
20465: PUSH
20466: LD_INT 53
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: IN
20473: IFFALSE 20494
// points := [ 40 , 10 , 20 ] ;
20475: LD_ADDR_VAR 0 9
20479: PUSH
20480: LD_INT 40
20482: PUSH
20483: LD_INT 10
20485: PUSH
20486: LD_INT 20
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20494: LD_VAR 0 6
20498: PPUSH
20499: CALL_OW 264
20503: PUSH
20504: LD_INT 9
20506: PUSH
20507: EMPTY
20508: LIST
20509: IN
20510: IFFALSE 20531
// points := [ 5 , 70 , 20 ] ;
20512: LD_ADDR_VAR 0 9
20516: PUSH
20517: LD_INT 5
20519: PUSH
20520: LD_INT 70
20522: PUSH
20523: LD_INT 20
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20531: LD_VAR 0 6
20535: PPUSH
20536: CALL_OW 264
20540: PUSH
20541: LD_INT 10
20543: PUSH
20544: EMPTY
20545: LIST
20546: IN
20547: IFFALSE 20568
// points := [ 35 , 110 , 70 ] ;
20549: LD_ADDR_VAR 0 9
20553: PUSH
20554: LD_INT 35
20556: PUSH
20557: LD_INT 110
20559: PUSH
20560: LD_INT 70
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20568: LD_VAR 0 6
20572: PPUSH
20573: CALL_OW 265
20577: PUSH
20578: LD_INT 25
20580: EQUAL
20581: IFFALSE 20602
// points := [ 80 , 65 , 100 ] ;
20583: LD_ADDR_VAR 0 9
20587: PUSH
20588: LD_INT 80
20590: PUSH
20591: LD_INT 65
20593: PUSH
20594: LD_INT 100
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20602: LD_VAR 0 6
20606: PPUSH
20607: CALL_OW 263
20611: PUSH
20612: LD_INT 1
20614: EQUAL
20615: IFFALSE 20650
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20617: LD_ADDR_VAR 0 10
20621: PUSH
20622: LD_VAR 0 10
20626: PUSH
20627: LD_VAR 0 6
20631: PPUSH
20632: CALL_OW 311
20636: PPUSH
20637: LD_INT 3
20639: PPUSH
20640: CALL_OW 259
20644: PUSH
20645: LD_INT 4
20647: MUL
20648: MUL
20649: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20650: LD_VAR 0 6
20654: PPUSH
20655: CALL_OW 263
20659: PUSH
20660: LD_INT 2
20662: EQUAL
20663: IFFALSE 20714
// begin j := IsControledBy ( i ) ;
20665: LD_ADDR_VAR 0 7
20669: PUSH
20670: LD_VAR 0 6
20674: PPUSH
20675: CALL_OW 312
20679: ST_TO_ADDR
// if j then
20680: LD_VAR 0 7
20684: IFFALSE 20714
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20686: LD_ADDR_VAR 0 10
20690: PUSH
20691: LD_VAR 0 10
20695: PUSH
20696: LD_VAR 0 7
20700: PPUSH
20701: LD_INT 3
20703: PPUSH
20704: CALL_OW 259
20708: PUSH
20709: LD_INT 3
20711: MUL
20712: MUL
20713: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20714: LD_VAR 0 6
20718: PPUSH
20719: CALL_OW 264
20723: PUSH
20724: LD_INT 5
20726: PUSH
20727: LD_INT 6
20729: PUSH
20730: LD_INT 46
20732: PUSH
20733: LD_INT 44
20735: PUSH
20736: LD_INT 47
20738: PUSH
20739: LD_INT 45
20741: PUSH
20742: LD_INT 28
20744: PUSH
20745: LD_INT 7
20747: PUSH
20748: LD_INT 27
20750: PUSH
20751: LD_INT 29
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: IN
20766: PUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: LD_INT 52
20774: PPUSH
20775: CALL_OW 321
20779: PUSH
20780: LD_INT 2
20782: EQUAL
20783: AND
20784: IFFALSE 20801
// bpoints := bpoints * 1.2 ;
20786: LD_ADDR_VAR 0 10
20790: PUSH
20791: LD_VAR 0 10
20795: PUSH
20796: LD_REAL  1.20000000000000E+0000
20799: MUL
20800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20801: LD_VAR 0 6
20805: PPUSH
20806: CALL_OW 264
20810: PUSH
20811: LD_INT 6
20813: PUSH
20814: LD_INT 46
20816: PUSH
20817: LD_INT 47
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: IN
20825: IFFALSE 20842
// bpoints := bpoints * 1.2 ;
20827: LD_ADDR_VAR 0 10
20831: PUSH
20832: LD_VAR 0 10
20836: PUSH
20837: LD_REAL  1.20000000000000E+0000
20840: MUL
20841: ST_TO_ADDR
// end ; unit_building :
20842: GO 20856
20844: LD_INT 3
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20855
20852: POP
// ; end ;
20853: GO 20856
20855: POP
// for j = 1 to 3 do
20856: LD_ADDR_VAR 0 7
20860: PUSH
20861: DOUBLE
20862: LD_INT 1
20864: DEC
20865: ST_TO_ADDR
20866: LD_INT 3
20868: PUSH
20869: FOR_TO
20870: IFFALSE 20923
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20872: LD_ADDR_VAR 0 5
20876: PUSH
20877: LD_VAR 0 5
20881: PPUSH
20882: LD_VAR 0 7
20886: PPUSH
20887: LD_VAR 0 5
20891: PUSH
20892: LD_VAR 0 7
20896: ARRAY
20897: PUSH
20898: LD_VAR 0 9
20902: PUSH
20903: LD_VAR 0 7
20907: ARRAY
20908: PUSH
20909: LD_VAR 0 10
20913: MUL
20914: PLUS
20915: PPUSH
20916: CALL_OW 1
20920: ST_TO_ADDR
20921: GO 20869
20923: POP
20924: POP
// end ;
20925: GO 19408
20927: POP
20928: POP
// result := Replace ( result , 4 , tmp ) ;
20929: LD_ADDR_VAR 0 5
20933: PUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: LD_INT 4
20941: PPUSH
20942: LD_VAR 0 8
20946: PPUSH
20947: CALL_OW 1
20951: ST_TO_ADDR
// end ;
20952: LD_VAR 0 5
20956: RET
// export function DangerAtRange ( unit , range ) ; begin
20957: LD_INT 0
20959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20960: LD_ADDR_VAR 0 3
20964: PUSH
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 255
20974: PPUSH
20975: LD_VAR 0 1
20979: PPUSH
20980: CALL_OW 250
20984: PPUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 251
20994: PPUSH
20995: LD_VAR 0 2
20999: PPUSH
21000: CALL 19260 0 4
21004: ST_TO_ADDR
// end ;
21005: LD_VAR 0 3
21009: RET
// export function DangerInArea ( side , area ) ; begin
21010: LD_INT 0
21012: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21013: LD_ADDR_VAR 0 3
21017: PUSH
21018: LD_VAR 0 2
21022: PPUSH
21023: LD_INT 81
21025: PUSH
21026: LD_VAR 0 1
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PPUSH
21035: CALL_OW 70
21039: ST_TO_ADDR
// end ;
21040: LD_VAR 0 3
21044: RET
// export function IsExtension ( b ) ; begin
21045: LD_INT 0
21047: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21048: LD_ADDR_VAR 0 2
21052: PUSH
21053: LD_VAR 0 1
21057: PUSH
21058: LD_INT 23
21060: PUSH
21061: LD_INT 20
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_INT 17
21069: PUSH
21070: LD_INT 24
21072: PUSH
21073: LD_INT 21
21075: PUSH
21076: LD_INT 19
21078: PUSH
21079: LD_INT 16
21081: PUSH
21082: LD_INT 25
21084: PUSH
21085: LD_INT 18
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: IN
21100: ST_TO_ADDR
// end ;
21101: LD_VAR 0 2
21105: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21106: LD_INT 0
21108: PPUSH
21109: PPUSH
21110: PPUSH
// result := [ ] ;
21111: LD_ADDR_VAR 0 3
21115: PUSH
21116: EMPTY
21117: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21118: LD_ADDR_VAR 0 4
21122: PUSH
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 3
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 70
21142: ST_TO_ADDR
// if not tmp then
21143: LD_VAR 0 4
21147: NOT
21148: IFFALSE 21152
// exit ;
21150: GO 21210
// for i in tmp do
21152: LD_ADDR_VAR 0 5
21156: PUSH
21157: LD_VAR 0 4
21161: PUSH
21162: FOR_IN
21163: IFFALSE 21198
// if GetBase ( i ) <> base then
21165: LD_VAR 0 5
21169: PPUSH
21170: CALL_OW 274
21174: PUSH
21175: LD_VAR 0 1
21179: NONEQUAL
21180: IFFALSE 21196
// ComLinkToBase ( base , i ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: LD_VAR 0 5
21191: PPUSH
21192: CALL_OW 169
21196: GO 21162
21198: POP
21199: POP
// result := tmp ;
21200: LD_ADDR_VAR 0 3
21204: PUSH
21205: LD_VAR 0 4
21209: ST_TO_ADDR
// end ;
21210: LD_VAR 0 3
21214: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21215: LD_INT 0
21217: PPUSH
21218: PPUSH
// if BuildingStatus ( b ) = bs_build then
21219: LD_VAR 0 2
21223: PPUSH
21224: CALL_OW 461
21228: PUSH
21229: LD_INT 1
21231: EQUAL
21232: IFFALSE 21292
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21234: LD_VAR 0 1
21238: PPUSH
21239: LD_STRING h
21241: PUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 250
21251: PUSH
21252: LD_VAR 0 2
21256: PPUSH
21257: CALL_OW 251
21261: PUSH
21262: LD_VAR 0 2
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: PPUSH
21288: CALL_OW 446
// end ;
21292: LD_VAR 0 3
21296: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21297: LD_INT 0
21299: PPUSH
21300: PPUSH
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21305: LD_VAR 0 1
21309: NOT
21310: PUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 263
21320: PUSH
21321: LD_INT 2
21323: EQUAL
21324: NOT
21325: OR
21326: IFFALSE 21330
// exit ;
21328: GO 21646
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21330: LD_ADDR_VAR 0 6
21334: PUSH
21335: LD_INT 22
21337: PUSH
21338: LD_VAR 0 1
21342: PPUSH
21343: CALL_OW 255
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: LD_INT 30
21357: PUSH
21358: LD_INT 36
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 34
21367: PUSH
21368: LD_INT 31
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PPUSH
21384: CALL_OW 69
21388: ST_TO_ADDR
// if not tmp then
21389: LD_VAR 0 6
21393: NOT
21394: IFFALSE 21398
// exit ;
21396: GO 21646
// result := [ ] ;
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: EMPTY
21404: ST_TO_ADDR
// for i in tmp do
21405: LD_ADDR_VAR 0 3
21409: PUSH
21410: LD_VAR 0 6
21414: PUSH
21415: FOR_IN
21416: IFFALSE 21487
// begin t := UnitsInside ( i ) ;
21418: LD_ADDR_VAR 0 4
21422: PUSH
21423: LD_VAR 0 3
21427: PPUSH
21428: CALL_OW 313
21432: ST_TO_ADDR
// if t then
21433: LD_VAR 0 4
21437: IFFALSE 21485
// for j in t do
21439: LD_ADDR_VAR 0 7
21443: PUSH
21444: LD_VAR 0 4
21448: PUSH
21449: FOR_IN
21450: IFFALSE 21483
// result := Insert ( result , result + 1 , j ) ;
21452: LD_ADDR_VAR 0 2
21456: PUSH
21457: LD_VAR 0 2
21461: PPUSH
21462: LD_VAR 0 2
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: PPUSH
21471: LD_VAR 0 7
21475: PPUSH
21476: CALL_OW 2
21480: ST_TO_ADDR
21481: GO 21449
21483: POP
21484: POP
// end ;
21485: GO 21415
21487: POP
21488: POP
// if not result then
21489: LD_VAR 0 2
21493: NOT
21494: IFFALSE 21498
// exit ;
21496: GO 21646
// mech := result [ 1 ] ;
21498: LD_ADDR_VAR 0 5
21502: PUSH
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 1
21510: ARRAY
21511: ST_TO_ADDR
// if result > 1 then
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 1
21519: GREATER
21520: IFFALSE 21632
// for i = 2 to result do
21522: LD_ADDR_VAR 0 3
21526: PUSH
21527: DOUBLE
21528: LD_INT 2
21530: DEC
21531: ST_TO_ADDR
21532: LD_VAR 0 2
21536: PUSH
21537: FOR_TO
21538: IFFALSE 21630
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21540: LD_ADDR_VAR 0 4
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: LD_VAR 0 3
21554: ARRAY
21555: PPUSH
21556: LD_INT 3
21558: PPUSH
21559: CALL_OW 259
21563: PUSH
21564: LD_VAR 0 2
21568: PUSH
21569: LD_VAR 0 3
21573: ARRAY
21574: PPUSH
21575: CALL_OW 432
21579: MINUS
21580: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21581: LD_VAR 0 4
21585: PUSH
21586: LD_VAR 0 5
21590: PPUSH
21591: LD_INT 3
21593: PPUSH
21594: CALL_OW 259
21598: PUSH
21599: LD_VAR 0 5
21603: PPUSH
21604: CALL_OW 432
21608: MINUS
21609: GREATEREQUAL
21610: IFFALSE 21628
// mech := result [ i ] ;
21612: LD_ADDR_VAR 0 5
21616: PUSH
21617: LD_VAR 0 2
21621: PUSH
21622: LD_VAR 0 3
21626: ARRAY
21627: ST_TO_ADDR
// end ;
21628: GO 21537
21630: POP
21631: POP
// ComLinkTo ( vehicle , mech ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: LD_VAR 0 5
21641: PPUSH
21642: CALL_OW 135
// end ;
21646: LD_VAR 0 2
21650: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
21658: PPUSH
21659: PPUSH
21660: PPUSH
21661: PPUSH
21662: PPUSH
21663: PPUSH
21664: PPUSH
21665: PPUSH
// result := [ ] ;
21666: LD_ADDR_VAR 0 7
21670: PUSH
21671: EMPTY
21672: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21673: LD_VAR 0 1
21677: PPUSH
21678: CALL_OW 266
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: IN
21693: NOT
21694: IFFALSE 21698
// exit ;
21696: GO 23329
// if name then
21698: LD_VAR 0 3
21702: IFFALSE 21718
// SetBName ( base_dep , name ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_VAR 0 3
21713: PPUSH
21714: CALL_OW 500
// base := GetBase ( base_dep ) ;
21718: LD_ADDR_VAR 0 15
21722: PUSH
21723: LD_VAR 0 1
21727: PPUSH
21728: CALL_OW 274
21732: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21733: LD_ADDR_VAR 0 16
21737: PUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 255
21747: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21748: LD_ADDR_VAR 0 17
21752: PUSH
21753: LD_VAR 0 1
21757: PPUSH
21758: CALL_OW 248
21762: ST_TO_ADDR
// if sources then
21763: LD_VAR 0 5
21767: IFFALSE 21814
// for i = 1 to 3 do
21769: LD_ADDR_VAR 0 8
21773: PUSH
21774: DOUBLE
21775: LD_INT 1
21777: DEC
21778: ST_TO_ADDR
21779: LD_INT 3
21781: PUSH
21782: FOR_TO
21783: IFFALSE 21812
// AddResourceType ( base , i , sources [ i ] ) ;
21785: LD_VAR 0 15
21789: PPUSH
21790: LD_VAR 0 8
21794: PPUSH
21795: LD_VAR 0 5
21799: PUSH
21800: LD_VAR 0 8
21804: ARRAY
21805: PPUSH
21806: CALL_OW 276
21810: GO 21782
21812: POP
21813: POP
// buildings := GetBaseBuildings ( base , area ) ;
21814: LD_ADDR_VAR 0 18
21818: PUSH
21819: LD_VAR 0 15
21823: PPUSH
21824: LD_VAR 0 2
21828: PPUSH
21829: CALL 21106 0 2
21833: ST_TO_ADDR
// InitHc ;
21834: CALL_OW 19
// InitUc ;
21838: CALL_OW 18
// uc_side := side ;
21842: LD_ADDR_OWVAR 20
21846: PUSH
21847: LD_VAR 0 16
21851: ST_TO_ADDR
// uc_nation := nation ;
21852: LD_ADDR_OWVAR 21
21856: PUSH
21857: LD_VAR 0 17
21861: ST_TO_ADDR
// if buildings then
21862: LD_VAR 0 18
21866: IFFALSE 23188
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21868: LD_ADDR_VAR 0 19
21872: PUSH
21873: LD_VAR 0 18
21877: PPUSH
21878: LD_INT 2
21880: PUSH
21881: LD_INT 30
21883: PUSH
21884: LD_INT 29
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 30
21893: PUSH
21894: LD_INT 30
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 72
21910: ST_TO_ADDR
// if tmp then
21911: LD_VAR 0 19
21915: IFFALSE 21963
// for i in tmp do
21917: LD_ADDR_VAR 0 8
21921: PUSH
21922: LD_VAR 0 19
21926: PUSH
21927: FOR_IN
21928: IFFALSE 21961
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21930: LD_VAR 0 8
21934: PPUSH
21935: CALL_OW 250
21939: PPUSH
21940: LD_VAR 0 8
21944: PPUSH
21945: CALL_OW 251
21949: PPUSH
21950: LD_VAR 0 16
21954: PPUSH
21955: CALL_OW 441
21959: GO 21927
21961: POP
21962: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21963: LD_VAR 0 18
21967: PPUSH
21968: LD_INT 2
21970: PUSH
21971: LD_INT 30
21973: PUSH
21974: LD_INT 32
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 30
21983: PUSH
21984: LD_INT 33
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: PPUSH
21996: CALL_OW 72
22000: IFFALSE 22088
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22002: LD_ADDR_VAR 0 8
22006: PUSH
22007: LD_VAR 0 18
22011: PPUSH
22012: LD_INT 2
22014: PUSH
22015: LD_INT 30
22017: PUSH
22018: LD_INT 32
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 30
22027: PUSH
22028: LD_INT 33
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 72
22044: PUSH
22045: FOR_IN
22046: IFFALSE 22086
// begin if not GetBWeapon ( i ) then
22048: LD_VAR 0 8
22052: PPUSH
22053: CALL_OW 269
22057: NOT
22058: IFFALSE 22084
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22060: LD_VAR 0 8
22064: PPUSH
22065: LD_VAR 0 8
22069: PPUSH
22070: LD_VAR 0 2
22074: PPUSH
22075: CALL 23334 0 2
22079: PPUSH
22080: CALL_OW 431
// end ;
22084: GO 22045
22086: POP
22087: POP
// end ; for i = 1 to personel do
22088: LD_ADDR_VAR 0 8
22092: PUSH
22093: DOUBLE
22094: LD_INT 1
22096: DEC
22097: ST_TO_ADDR
22098: LD_VAR 0 6
22102: PUSH
22103: FOR_TO
22104: IFFALSE 23168
// begin if i > 4 then
22106: LD_VAR 0 8
22110: PUSH
22111: LD_INT 4
22113: GREATER
22114: IFFALSE 22118
// break ;
22116: GO 23168
// case i of 1 :
22118: LD_VAR 0 8
22122: PUSH
22123: LD_INT 1
22125: DOUBLE
22126: EQUAL
22127: IFTRUE 22131
22129: GO 22211
22131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22132: LD_ADDR_VAR 0 12
22136: PUSH
22137: LD_VAR 0 18
22141: PPUSH
22142: LD_INT 22
22144: PUSH
22145: LD_VAR 0 16
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 58
22156: PUSH
22157: EMPTY
22158: LIST
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: LD_INT 30
22165: PUSH
22166: LD_INT 32
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 30
22175: PUSH
22176: LD_INT 4
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 30
22185: PUSH
22186: LD_INT 5
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 72
22208: ST_TO_ADDR
22209: GO 22433
22211: LD_INT 2
22213: DOUBLE
22214: EQUAL
22215: IFTRUE 22219
22217: GO 22281
22219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22220: LD_ADDR_VAR 0 12
22224: PUSH
22225: LD_VAR 0 18
22229: PPUSH
22230: LD_INT 22
22232: PUSH
22233: LD_VAR 0 16
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: LD_INT 30
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 30
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PPUSH
22274: CALL_OW 72
22278: ST_TO_ADDR
22279: GO 22433
22281: LD_INT 3
22283: DOUBLE
22284: EQUAL
22285: IFTRUE 22289
22287: GO 22351
22289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22290: LD_ADDR_VAR 0 12
22294: PUSH
22295: LD_VAR 0 18
22299: PPUSH
22300: LD_INT 22
22302: PUSH
22303: LD_VAR 0 16
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 30
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 30
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 72
22348: ST_TO_ADDR
22349: GO 22433
22351: LD_INT 4
22353: DOUBLE
22354: EQUAL
22355: IFTRUE 22359
22357: GO 22432
22359: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22360: LD_ADDR_VAR 0 12
22364: PUSH
22365: LD_VAR 0 18
22369: PPUSH
22370: LD_INT 22
22372: PUSH
22373: LD_VAR 0 16
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 30
22387: PUSH
22388: LD_INT 6
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 30
22397: PUSH
22398: LD_INT 7
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 30
22407: PUSH
22408: LD_INT 8
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PPUSH
22425: CALL_OW 72
22429: ST_TO_ADDR
22430: GO 22433
22432: POP
// if i = 1 then
22433: LD_VAR 0 8
22437: PUSH
22438: LD_INT 1
22440: EQUAL
22441: IFFALSE 22552
// begin tmp := [ ] ;
22443: LD_ADDR_VAR 0 19
22447: PUSH
22448: EMPTY
22449: ST_TO_ADDR
// for j in f do
22450: LD_ADDR_VAR 0 9
22454: PUSH
22455: LD_VAR 0 12
22459: PUSH
22460: FOR_IN
22461: IFFALSE 22534
// if GetBType ( j ) = b_bunker then
22463: LD_VAR 0 9
22467: PPUSH
22468: CALL_OW 266
22472: PUSH
22473: LD_INT 32
22475: EQUAL
22476: IFFALSE 22503
// tmp := Insert ( tmp , 1 , j ) else
22478: LD_ADDR_VAR 0 19
22482: PUSH
22483: LD_VAR 0 19
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: LD_VAR 0 9
22495: PPUSH
22496: CALL_OW 2
22500: ST_TO_ADDR
22501: GO 22532
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22503: LD_ADDR_VAR 0 19
22507: PUSH
22508: LD_VAR 0 19
22512: PPUSH
22513: LD_VAR 0 19
22517: PUSH
22518: LD_INT 1
22520: PLUS
22521: PPUSH
22522: LD_VAR 0 9
22526: PPUSH
22527: CALL_OW 2
22531: ST_TO_ADDR
22532: GO 22460
22534: POP
22535: POP
// if tmp then
22536: LD_VAR 0 19
22540: IFFALSE 22552
// f := tmp ;
22542: LD_ADDR_VAR 0 12
22546: PUSH
22547: LD_VAR 0 19
22551: ST_TO_ADDR
// end ; x := personel [ i ] ;
22552: LD_ADDR_VAR 0 13
22556: PUSH
22557: LD_VAR 0 6
22561: PUSH
22562: LD_VAR 0 8
22566: ARRAY
22567: ST_TO_ADDR
// if x = - 1 then
22568: LD_VAR 0 13
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: EQUAL
22577: IFFALSE 22786
// begin for j in f do
22579: LD_ADDR_VAR 0 9
22583: PUSH
22584: LD_VAR 0 12
22588: PUSH
22589: FOR_IN
22590: IFFALSE 22782
// repeat InitHc ;
22592: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22596: LD_VAR 0 9
22600: PPUSH
22601: CALL_OW 266
22605: PUSH
22606: LD_INT 5
22608: EQUAL
22609: IFFALSE 22679
// begin if UnitsInside ( j ) < 3 then
22611: LD_VAR 0 9
22615: PPUSH
22616: CALL_OW 313
22620: PUSH
22621: LD_INT 3
22623: LESS
22624: IFFALSE 22660
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22626: LD_INT 0
22628: PPUSH
22629: LD_INT 5
22631: PUSH
22632: LD_INT 8
22634: PUSH
22635: LD_INT 9
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: PUSH
22643: LD_VAR 0 17
22647: ARRAY
22648: PPUSH
22649: LD_VAR 0 4
22653: PPUSH
22654: CALL_OW 380
22658: GO 22677
// PrepareHuman ( false , i , skill ) ;
22660: LD_INT 0
22662: PPUSH
22663: LD_VAR 0 8
22667: PPUSH
22668: LD_VAR 0 4
22672: PPUSH
22673: CALL_OW 380
// end else
22677: GO 22696
// PrepareHuman ( false , i , skill ) ;
22679: LD_INT 0
22681: PPUSH
22682: LD_VAR 0 8
22686: PPUSH
22687: LD_VAR 0 4
22691: PPUSH
22692: CALL_OW 380
// un := CreateHuman ;
22696: LD_ADDR_VAR 0 14
22700: PUSH
22701: CALL_OW 44
22705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22706: LD_ADDR_VAR 0 7
22710: PUSH
22711: LD_VAR 0 7
22715: PPUSH
22716: LD_INT 1
22718: PPUSH
22719: LD_VAR 0 14
22723: PPUSH
22724: CALL_OW 2
22728: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22729: LD_VAR 0 14
22733: PPUSH
22734: LD_VAR 0 9
22738: PPUSH
22739: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22743: LD_VAR 0 9
22747: PPUSH
22748: CALL_OW 313
22752: PUSH
22753: LD_INT 6
22755: EQUAL
22756: PUSH
22757: LD_VAR 0 9
22761: PPUSH
22762: CALL_OW 266
22766: PUSH
22767: LD_INT 32
22769: PUSH
22770: LD_INT 31
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: IN
22777: OR
22778: IFFALSE 22592
22780: GO 22589
22782: POP
22783: POP
// end else
22784: GO 23166
// for j = 1 to x do
22786: LD_ADDR_VAR 0 9
22790: PUSH
22791: DOUBLE
22792: LD_INT 1
22794: DEC
22795: ST_TO_ADDR
22796: LD_VAR 0 13
22800: PUSH
22801: FOR_TO
22802: IFFALSE 23164
// begin InitHc ;
22804: CALL_OW 19
// if not f then
22808: LD_VAR 0 12
22812: NOT
22813: IFFALSE 22902
// begin PrepareHuman ( false , i , skill ) ;
22815: LD_INT 0
22817: PPUSH
22818: LD_VAR 0 8
22822: PPUSH
22823: LD_VAR 0 4
22827: PPUSH
22828: CALL_OW 380
// un := CreateHuman ;
22832: LD_ADDR_VAR 0 14
22836: PUSH
22837: CALL_OW 44
22841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22842: LD_ADDR_VAR 0 7
22846: PUSH
22847: LD_VAR 0 7
22851: PPUSH
22852: LD_INT 1
22854: PPUSH
22855: LD_VAR 0 14
22859: PPUSH
22860: CALL_OW 2
22864: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22865: LD_VAR 0 14
22869: PPUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 250
22879: PPUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 251
22889: PPUSH
22890: LD_INT 10
22892: PPUSH
22893: LD_INT 0
22895: PPUSH
22896: CALL_OW 50
// continue ;
22900: GO 22801
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22902: LD_VAR 0 12
22906: PUSH
22907: LD_INT 1
22909: ARRAY
22910: PPUSH
22911: CALL_OW 313
22915: PUSH
22916: LD_VAR 0 12
22920: PUSH
22921: LD_INT 1
22923: ARRAY
22924: PPUSH
22925: CALL_OW 266
22929: PUSH
22930: LD_INT 32
22932: PUSH
22933: LD_INT 31
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: IN
22940: AND
22941: PUSH
22942: LD_VAR 0 12
22946: PUSH
22947: LD_INT 1
22949: ARRAY
22950: PPUSH
22951: CALL_OW 313
22955: PUSH
22956: LD_INT 6
22958: EQUAL
22959: OR
22960: IFFALSE 22980
// f := Delete ( f , 1 ) ;
22962: LD_ADDR_VAR 0 12
22966: PUSH
22967: LD_VAR 0 12
22971: PPUSH
22972: LD_INT 1
22974: PPUSH
22975: CALL_OW 3
22979: ST_TO_ADDR
// if not f then
22980: LD_VAR 0 12
22984: NOT
22985: IFFALSE 23003
// begin x := x + 2 ;
22987: LD_ADDR_VAR 0 13
22991: PUSH
22992: LD_VAR 0 13
22996: PUSH
22997: LD_INT 2
22999: PLUS
23000: ST_TO_ADDR
// continue ;
23001: GO 22801
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23003: LD_VAR 0 12
23007: PUSH
23008: LD_INT 1
23010: ARRAY
23011: PPUSH
23012: CALL_OW 266
23016: PUSH
23017: LD_INT 5
23019: EQUAL
23020: IFFALSE 23094
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23022: LD_VAR 0 12
23026: PUSH
23027: LD_INT 1
23029: ARRAY
23030: PPUSH
23031: CALL_OW 313
23035: PUSH
23036: LD_INT 3
23038: LESS
23039: IFFALSE 23075
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23041: LD_INT 0
23043: PPUSH
23044: LD_INT 5
23046: PUSH
23047: LD_INT 8
23049: PUSH
23050: LD_INT 9
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: PUSH
23058: LD_VAR 0 17
23062: ARRAY
23063: PPUSH
23064: LD_VAR 0 4
23068: PPUSH
23069: CALL_OW 380
23073: GO 23092
// PrepareHuman ( false , i , skill ) ;
23075: LD_INT 0
23077: PPUSH
23078: LD_VAR 0 8
23082: PPUSH
23083: LD_VAR 0 4
23087: PPUSH
23088: CALL_OW 380
// end else
23092: GO 23111
// PrepareHuman ( false , i , skill ) ;
23094: LD_INT 0
23096: PPUSH
23097: LD_VAR 0 8
23101: PPUSH
23102: LD_VAR 0 4
23106: PPUSH
23107: CALL_OW 380
// un := CreateHuman ;
23111: LD_ADDR_VAR 0 14
23115: PUSH
23116: CALL_OW 44
23120: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23121: LD_ADDR_VAR 0 7
23125: PUSH
23126: LD_VAR 0 7
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: LD_VAR 0 14
23138: PPUSH
23139: CALL_OW 2
23143: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23144: LD_VAR 0 14
23148: PPUSH
23149: LD_VAR 0 12
23153: PUSH
23154: LD_INT 1
23156: ARRAY
23157: PPUSH
23158: CALL_OW 52
// end ;
23162: GO 22801
23164: POP
23165: POP
// end ;
23166: GO 22103
23168: POP
23169: POP
// result := result ^ buildings ;
23170: LD_ADDR_VAR 0 7
23174: PUSH
23175: LD_VAR 0 7
23179: PUSH
23180: LD_VAR 0 18
23184: ADD
23185: ST_TO_ADDR
// end else
23186: GO 23329
// begin for i = 1 to personel do
23188: LD_ADDR_VAR 0 8
23192: PUSH
23193: DOUBLE
23194: LD_INT 1
23196: DEC
23197: ST_TO_ADDR
23198: LD_VAR 0 6
23202: PUSH
23203: FOR_TO
23204: IFFALSE 23327
// begin if i > 4 then
23206: LD_VAR 0 8
23210: PUSH
23211: LD_INT 4
23213: GREATER
23214: IFFALSE 23218
// break ;
23216: GO 23327
// x := personel [ i ] ;
23218: LD_ADDR_VAR 0 13
23222: PUSH
23223: LD_VAR 0 6
23227: PUSH
23228: LD_VAR 0 8
23232: ARRAY
23233: ST_TO_ADDR
// if x = - 1 then
23234: LD_VAR 0 13
23238: PUSH
23239: LD_INT 1
23241: NEG
23242: EQUAL
23243: IFFALSE 23247
// continue ;
23245: GO 23203
// PrepareHuman ( false , i , skill ) ;
23247: LD_INT 0
23249: PPUSH
23250: LD_VAR 0 8
23254: PPUSH
23255: LD_VAR 0 4
23259: PPUSH
23260: CALL_OW 380
// un := CreateHuman ;
23264: LD_ADDR_VAR 0 14
23268: PUSH
23269: CALL_OW 44
23273: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23274: LD_VAR 0 14
23278: PPUSH
23279: LD_VAR 0 1
23283: PPUSH
23284: CALL_OW 250
23288: PPUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: CALL_OW 251
23298: PPUSH
23299: LD_INT 10
23301: PPUSH
23302: LD_INT 0
23304: PPUSH
23305: CALL_OW 50
// result := result ^ un ;
23309: LD_ADDR_VAR 0 7
23313: PUSH
23314: LD_VAR 0 7
23318: PUSH
23319: LD_VAR 0 14
23323: ADD
23324: ST_TO_ADDR
// end ;
23325: GO 23203
23327: POP
23328: POP
// end ; end ;
23329: LD_VAR 0 7
23333: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
// result := false ;
23352: LD_ADDR_VAR 0 3
23356: PUSH
23357: LD_INT 0
23359: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23360: LD_VAR 0 1
23364: NOT
23365: PUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 266
23375: PUSH
23376: LD_INT 32
23378: PUSH
23379: LD_INT 33
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: IN
23386: NOT
23387: OR
23388: IFFALSE 23392
// exit ;
23390: GO 24528
// nat := GetNation ( tower ) ;
23392: LD_ADDR_VAR 0 12
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 248
23406: ST_TO_ADDR
// side := GetSide ( tower ) ;
23407: LD_ADDR_VAR 0 16
23411: PUSH
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 255
23421: ST_TO_ADDR
// x := GetX ( tower ) ;
23422: LD_ADDR_VAR 0 10
23426: PUSH
23427: LD_VAR 0 1
23431: PPUSH
23432: CALL_OW 250
23436: ST_TO_ADDR
// y := GetY ( tower ) ;
23437: LD_ADDR_VAR 0 11
23441: PUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: CALL_OW 251
23451: ST_TO_ADDR
// if not x or not y then
23452: LD_VAR 0 10
23456: NOT
23457: PUSH
23458: LD_VAR 0 11
23462: NOT
23463: OR
23464: IFFALSE 23468
// exit ;
23466: GO 24528
// weapon := 0 ;
23468: LD_ADDR_VAR 0 18
23472: PUSH
23473: LD_INT 0
23475: ST_TO_ADDR
// fac_list := [ ] ;
23476: LD_ADDR_VAR 0 17
23480: PUSH
23481: EMPTY
23482: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23483: LD_ADDR_VAR 0 6
23487: PUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL_OW 274
23497: PPUSH
23498: LD_VAR 0 2
23502: PPUSH
23503: CALL 21106 0 2
23507: PPUSH
23508: LD_INT 30
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 72
23522: ST_TO_ADDR
// if not factories then
23523: LD_VAR 0 6
23527: NOT
23528: IFFALSE 23532
// exit ;
23530: GO 24528
// for i in factories do
23532: LD_ADDR_VAR 0 8
23536: PUSH
23537: LD_VAR 0 6
23541: PUSH
23542: FOR_IN
23543: IFFALSE 23568
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23545: LD_ADDR_VAR 0 17
23549: PUSH
23550: LD_VAR 0 17
23554: PUSH
23555: LD_VAR 0 8
23559: PPUSH
23560: CALL_OW 478
23564: UNION
23565: ST_TO_ADDR
23566: GO 23542
23568: POP
23569: POP
// if not fac_list then
23570: LD_VAR 0 17
23574: NOT
23575: IFFALSE 23579
// exit ;
23577: GO 24528
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23579: LD_ADDR_VAR 0 5
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: LD_INT 9
23592: PUSH
23593: LD_INT 10
23595: PUSH
23596: LD_INT 6
23598: PUSH
23599: LD_INT 7
23601: PUSH
23602: LD_INT 11
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 27
23616: PUSH
23617: LD_INT 28
23619: PUSH
23620: LD_INT 26
23622: PUSH
23623: LD_INT 30
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 43
23634: PUSH
23635: LD_INT 44
23637: PUSH
23638: LD_INT 46
23640: PUSH
23641: LD_INT 45
23643: PUSH
23644: LD_INT 47
23646: PUSH
23647: LD_INT 49
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: LD_VAR 0 12
23667: ARRAY
23668: ST_TO_ADDR
// for i in list do
23669: LD_ADDR_VAR 0 8
23673: PUSH
23674: LD_VAR 0 5
23678: PUSH
23679: FOR_IN
23680: IFFALSE 23713
// if not i in fac_list then
23682: LD_VAR 0 8
23686: PUSH
23687: LD_VAR 0 17
23691: IN
23692: NOT
23693: IFFALSE 23711
// list := list diff i ;
23695: LD_ADDR_VAR 0 5
23699: PUSH
23700: LD_VAR 0 5
23704: PUSH
23705: LD_VAR 0 8
23709: DIFF
23710: ST_TO_ADDR
23711: GO 23679
23713: POP
23714: POP
// if not list then
23715: LD_VAR 0 5
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 24528
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23724: LD_VAR 0 12
23728: PUSH
23729: LD_INT 3
23731: EQUAL
23732: PUSH
23733: LD_INT 49
23735: PUSH
23736: LD_VAR 0 5
23740: IN
23741: AND
23742: PUSH
23743: LD_INT 31
23745: PPUSH
23746: LD_VAR 0 16
23750: PPUSH
23751: CALL_OW 321
23755: PUSH
23756: LD_INT 2
23758: EQUAL
23759: AND
23760: IFFALSE 23820
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23762: LD_INT 22
23764: PUSH
23765: LD_VAR 0 16
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 35
23776: PUSH
23777: LD_INT 49
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 91
23786: PUSH
23787: LD_VAR 0 1
23791: PUSH
23792: LD_INT 10
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: PPUSH
23805: CALL_OW 69
23809: NOT
23810: IFFALSE 23820
// weapon := ru_time_lapser ;
23812: LD_ADDR_VAR 0 18
23816: PUSH
23817: LD_INT 49
23819: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23820: LD_VAR 0 12
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: IN
23835: PUSH
23836: LD_INT 11
23838: PUSH
23839: LD_VAR 0 5
23843: IN
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_VAR 0 5
23852: IN
23853: OR
23854: AND
23855: PUSH
23856: LD_INT 6
23858: PPUSH
23859: LD_VAR 0 16
23863: PPUSH
23864: CALL_OW 321
23868: PUSH
23869: LD_INT 2
23871: EQUAL
23872: AND
23873: IFFALSE 24038
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23875: LD_INT 22
23877: PUSH
23878: LD_VAR 0 16
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: LD_INT 35
23892: PUSH
23893: LD_INT 11
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 35
23902: PUSH
23903: LD_INT 30
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 91
23917: PUSH
23918: LD_VAR 0 1
23922: PUSH
23923: LD_INT 18
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: PPUSH
23936: CALL_OW 69
23940: NOT
23941: PUSH
23942: LD_INT 22
23944: PUSH
23945: LD_VAR 0 16
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 32
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 30
23969: PUSH
23970: LD_INT 33
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 91
23984: PUSH
23985: LD_VAR 0 1
23989: PUSH
23990: LD_INT 12
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: PPUSH
24006: CALL_OW 69
24010: PUSH
24011: LD_INT 2
24013: GREATER
24014: AND
24015: IFFALSE 24038
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24017: LD_ADDR_VAR 0 18
24021: PUSH
24022: LD_INT 11
24024: PUSH
24025: LD_INT 30
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_VAR 0 12
24036: ARRAY
24037: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24038: LD_VAR 0 18
24042: NOT
24043: PUSH
24044: LD_INT 40
24046: PPUSH
24047: LD_VAR 0 16
24051: PPUSH
24052: CALL_OW 321
24056: PUSH
24057: LD_INT 2
24059: EQUAL
24060: AND
24061: PUSH
24062: LD_INT 7
24064: PUSH
24065: LD_VAR 0 5
24069: IN
24070: PUSH
24071: LD_INT 28
24073: PUSH
24074: LD_VAR 0 5
24078: IN
24079: OR
24080: PUSH
24081: LD_INT 45
24083: PUSH
24084: LD_VAR 0 5
24088: IN
24089: OR
24090: AND
24091: IFFALSE 24345
// begin hex := GetHexInfo ( x , y ) ;
24093: LD_ADDR_VAR 0 4
24097: PUSH
24098: LD_VAR 0 10
24102: PPUSH
24103: LD_VAR 0 11
24107: PPUSH
24108: CALL_OW 546
24112: ST_TO_ADDR
// if hex [ 1 ] then
24113: LD_VAR 0 4
24117: PUSH
24118: LD_INT 1
24120: ARRAY
24121: IFFALSE 24125
// exit ;
24123: GO 24528
// height := hex [ 2 ] ;
24125: LD_ADDR_VAR 0 15
24129: PUSH
24130: LD_VAR 0 4
24134: PUSH
24135: LD_INT 2
24137: ARRAY
24138: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24139: LD_ADDR_VAR 0 14
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: LD_INT 5
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: ST_TO_ADDR
// for i in tmp do
24162: LD_ADDR_VAR 0 8
24166: PUSH
24167: LD_VAR 0 14
24171: PUSH
24172: FOR_IN
24173: IFFALSE 24343
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24175: LD_ADDR_VAR 0 9
24179: PUSH
24180: LD_VAR 0 10
24184: PPUSH
24185: LD_VAR 0 8
24189: PPUSH
24190: LD_INT 5
24192: PPUSH
24193: CALL_OW 272
24197: PUSH
24198: LD_VAR 0 11
24202: PPUSH
24203: LD_VAR 0 8
24207: PPUSH
24208: LD_INT 5
24210: PPUSH
24211: CALL_OW 273
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24220: LD_VAR 0 9
24224: PUSH
24225: LD_INT 1
24227: ARRAY
24228: PPUSH
24229: LD_VAR 0 9
24233: PUSH
24234: LD_INT 2
24236: ARRAY
24237: PPUSH
24238: CALL_OW 488
24242: IFFALSE 24341
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_VAR 0 9
24253: PUSH
24254: LD_INT 1
24256: ARRAY
24257: PPUSH
24258: LD_VAR 0 9
24262: PUSH
24263: LD_INT 2
24265: ARRAY
24266: PPUSH
24267: CALL_OW 546
24271: ST_TO_ADDR
// if hex [ 1 ] then
24272: LD_VAR 0 4
24276: PUSH
24277: LD_INT 1
24279: ARRAY
24280: IFFALSE 24284
// continue ;
24282: GO 24172
// h := hex [ 2 ] ;
24284: LD_ADDR_VAR 0 13
24288: PUSH
24289: LD_VAR 0 4
24293: PUSH
24294: LD_INT 2
24296: ARRAY
24297: ST_TO_ADDR
// if h + 7 < height then
24298: LD_VAR 0 13
24302: PUSH
24303: LD_INT 7
24305: PLUS
24306: PUSH
24307: LD_VAR 0 15
24311: LESS
24312: IFFALSE 24341
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24314: LD_ADDR_VAR 0 18
24318: PUSH
24319: LD_INT 7
24321: PUSH
24322: LD_INT 28
24324: PUSH
24325: LD_INT 45
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: LD_VAR 0 12
24337: ARRAY
24338: ST_TO_ADDR
// break ;
24339: GO 24343
// end ; end ; end ;
24341: GO 24172
24343: POP
24344: POP
// end ; if not weapon then
24345: LD_VAR 0 18
24349: NOT
24350: IFFALSE 24410
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24352: LD_ADDR_VAR 0 5
24356: PUSH
24357: LD_VAR 0 5
24361: PUSH
24362: LD_INT 11
24364: PUSH
24365: LD_INT 30
24367: PUSH
24368: LD_INT 49
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: DIFF
24376: ST_TO_ADDR
// if not list then
24377: LD_VAR 0 5
24381: NOT
24382: IFFALSE 24386
// exit ;
24384: GO 24528
// weapon := list [ rand ( 1 , list ) ] ;
24386: LD_ADDR_VAR 0 18
24390: PUSH
24391: LD_VAR 0 5
24395: PUSH
24396: LD_INT 1
24398: PPUSH
24399: LD_VAR 0 5
24403: PPUSH
24404: CALL_OW 12
24408: ARRAY
24409: ST_TO_ADDR
// end ; if weapon then
24410: LD_VAR 0 18
24414: IFFALSE 24528
// begin tmp := CostOfWeapon ( weapon ) ;
24416: LD_ADDR_VAR 0 14
24420: PUSH
24421: LD_VAR 0 18
24425: PPUSH
24426: CALL_OW 451
24430: ST_TO_ADDR
// j := GetBase ( tower ) ;
24431: LD_ADDR_VAR 0 9
24435: PUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 274
24445: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24446: LD_VAR 0 9
24450: PPUSH
24451: LD_INT 1
24453: PPUSH
24454: CALL_OW 275
24458: PUSH
24459: LD_VAR 0 14
24463: PUSH
24464: LD_INT 1
24466: ARRAY
24467: GREATEREQUAL
24468: PUSH
24469: LD_VAR 0 9
24473: PPUSH
24474: LD_INT 2
24476: PPUSH
24477: CALL_OW 275
24481: PUSH
24482: LD_VAR 0 14
24486: PUSH
24487: LD_INT 2
24489: ARRAY
24490: GREATEREQUAL
24491: AND
24492: PUSH
24493: LD_VAR 0 9
24497: PPUSH
24498: LD_INT 3
24500: PPUSH
24501: CALL_OW 275
24505: PUSH
24506: LD_VAR 0 14
24510: PUSH
24511: LD_INT 3
24513: ARRAY
24514: GREATEREQUAL
24515: AND
24516: IFFALSE 24528
// result := weapon ;
24518: LD_ADDR_VAR 0 3
24522: PUSH
24523: LD_VAR 0 18
24527: ST_TO_ADDR
// end ; end ;
24528: LD_VAR 0 3
24532: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24533: LD_INT 0
24535: PPUSH
24536: PPUSH
// result := true ;
24537: LD_ADDR_VAR 0 3
24541: PUSH
24542: LD_INT 1
24544: ST_TO_ADDR
// if array1 = array2 then
24545: LD_VAR 0 1
24549: PUSH
24550: LD_VAR 0 2
24554: EQUAL
24555: IFFALSE 24615
// begin for i = 1 to array1 do
24557: LD_ADDR_VAR 0 4
24561: PUSH
24562: DOUBLE
24563: LD_INT 1
24565: DEC
24566: ST_TO_ADDR
24567: LD_VAR 0 1
24571: PUSH
24572: FOR_TO
24573: IFFALSE 24611
// if array1 [ i ] <> array2 [ i ] then
24575: LD_VAR 0 1
24579: PUSH
24580: LD_VAR 0 4
24584: ARRAY
24585: PUSH
24586: LD_VAR 0 2
24590: PUSH
24591: LD_VAR 0 4
24595: ARRAY
24596: NONEQUAL
24597: IFFALSE 24609
// begin result := false ;
24599: LD_ADDR_VAR 0 3
24603: PUSH
24604: LD_INT 0
24606: ST_TO_ADDR
// break ;
24607: GO 24611
// end ;
24609: GO 24572
24611: POP
24612: POP
// end else
24613: GO 24623
// result := false ;
24615: LD_ADDR_VAR 0 3
24619: PUSH
24620: LD_INT 0
24622: ST_TO_ADDR
// end ;
24623: LD_VAR 0 3
24627: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24628: LD_INT 0
24630: PPUSH
24631: PPUSH
24632: PPUSH
// pom := GetBase ( fac ) ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_VAR 0 1
24642: PPUSH
24643: CALL_OW 274
24647: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24648: LD_ADDR_VAR 0 4
24652: PUSH
24653: LD_VAR 0 2
24657: PUSH
24658: LD_INT 1
24660: ARRAY
24661: PPUSH
24662: LD_VAR 0 2
24666: PUSH
24667: LD_INT 2
24669: ARRAY
24670: PPUSH
24671: LD_VAR 0 2
24675: PUSH
24676: LD_INT 3
24678: ARRAY
24679: PPUSH
24680: LD_VAR 0 2
24684: PUSH
24685: LD_INT 4
24687: ARRAY
24688: PPUSH
24689: CALL_OW 449
24693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24694: LD_ADDR_VAR 0 3
24698: PUSH
24699: LD_VAR 0 5
24703: PPUSH
24704: LD_INT 1
24706: PPUSH
24707: CALL_OW 275
24711: PUSH
24712: LD_VAR 0 4
24716: PUSH
24717: LD_INT 1
24719: ARRAY
24720: GREATEREQUAL
24721: PUSH
24722: LD_VAR 0 5
24726: PPUSH
24727: LD_INT 2
24729: PPUSH
24730: CALL_OW 275
24734: PUSH
24735: LD_VAR 0 4
24739: PUSH
24740: LD_INT 2
24742: ARRAY
24743: GREATEREQUAL
24744: AND
24745: PUSH
24746: LD_VAR 0 5
24750: PPUSH
24751: LD_INT 3
24753: PPUSH
24754: CALL_OW 275
24758: PUSH
24759: LD_VAR 0 4
24763: PUSH
24764: LD_INT 3
24766: ARRAY
24767: GREATEREQUAL
24768: AND
24769: ST_TO_ADDR
// end ;
24770: LD_VAR 0 3
24774: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24775: LD_INT 0
24777: PPUSH
24778: PPUSH
24779: PPUSH
24780: PPUSH
// pom := GetBase ( building ) ;
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_VAR 0 1
24790: PPUSH
24791: CALL_OW 274
24795: ST_TO_ADDR
// if not pom then
24796: LD_VAR 0 3
24800: NOT
24801: IFFALSE 24805
// exit ;
24803: GO 24975
// btype := GetBType ( building ) ;
24805: LD_ADDR_VAR 0 5
24809: PUSH
24810: LD_VAR 0 1
24814: PPUSH
24815: CALL_OW 266
24819: ST_TO_ADDR
// if btype = b_armoury then
24820: LD_VAR 0 5
24824: PUSH
24825: LD_INT 4
24827: EQUAL
24828: IFFALSE 24838
// btype := b_barracks ;
24830: LD_ADDR_VAR 0 5
24834: PUSH
24835: LD_INT 5
24837: ST_TO_ADDR
// if btype = b_depot then
24838: LD_VAR 0 5
24842: PUSH
24843: LD_INT 0
24845: EQUAL
24846: IFFALSE 24856
// btype := b_warehouse ;
24848: LD_ADDR_VAR 0 5
24852: PUSH
24853: LD_INT 1
24855: ST_TO_ADDR
// if btype = b_workshop then
24856: LD_VAR 0 5
24860: PUSH
24861: LD_INT 2
24863: EQUAL
24864: IFFALSE 24874
// btype := b_factory ;
24866: LD_ADDR_VAR 0 5
24870: PUSH
24871: LD_INT 3
24873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24874: LD_ADDR_VAR 0 4
24878: PUSH
24879: LD_VAR 0 5
24883: PPUSH
24884: LD_VAR 0 1
24888: PPUSH
24889: CALL_OW 248
24893: PPUSH
24894: CALL_OW 450
24898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24899: LD_ADDR_VAR 0 2
24903: PUSH
24904: LD_VAR 0 3
24908: PPUSH
24909: LD_INT 1
24911: PPUSH
24912: CALL_OW 275
24916: PUSH
24917: LD_VAR 0 4
24921: PUSH
24922: LD_INT 1
24924: ARRAY
24925: GREATEREQUAL
24926: PUSH
24927: LD_VAR 0 3
24931: PPUSH
24932: LD_INT 2
24934: PPUSH
24935: CALL_OW 275
24939: PUSH
24940: LD_VAR 0 4
24944: PUSH
24945: LD_INT 2
24947: ARRAY
24948: GREATEREQUAL
24949: AND
24950: PUSH
24951: LD_VAR 0 3
24955: PPUSH
24956: LD_INT 3
24958: PPUSH
24959: CALL_OW 275
24963: PUSH
24964: LD_VAR 0 4
24968: PUSH
24969: LD_INT 3
24971: ARRAY
24972: GREATEREQUAL
24973: AND
24974: ST_TO_ADDR
// end ;
24975: LD_VAR 0 2
24979: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24980: LD_INT 0
24982: PPUSH
24983: PPUSH
24984: PPUSH
// pom := GetBase ( building ) ;
24985: LD_ADDR_VAR 0 4
24989: PUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 274
24999: ST_TO_ADDR
// if not pom then
25000: LD_VAR 0 4
25004: NOT
25005: IFFALSE 25009
// exit ;
25007: GO 25110
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25009: LD_ADDR_VAR 0 5
25013: PUSH
25014: LD_VAR 0 2
25018: PPUSH
25019: LD_VAR 0 1
25023: PPUSH
25024: CALL_OW 248
25028: PPUSH
25029: CALL_OW 450
25033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: LD_VAR 0 4
25043: PPUSH
25044: LD_INT 1
25046: PPUSH
25047: CALL_OW 275
25051: PUSH
25052: LD_VAR 0 5
25056: PUSH
25057: LD_INT 1
25059: ARRAY
25060: GREATEREQUAL
25061: PUSH
25062: LD_VAR 0 4
25066: PPUSH
25067: LD_INT 2
25069: PPUSH
25070: CALL_OW 275
25074: PUSH
25075: LD_VAR 0 5
25079: PUSH
25080: LD_INT 2
25082: ARRAY
25083: GREATEREQUAL
25084: AND
25085: PUSH
25086: LD_VAR 0 4
25090: PPUSH
25091: LD_INT 3
25093: PPUSH
25094: CALL_OW 275
25098: PUSH
25099: LD_VAR 0 5
25103: PUSH
25104: LD_INT 3
25106: ARRAY
25107: GREATEREQUAL
25108: AND
25109: ST_TO_ADDR
// end ;
25110: LD_VAR 0 3
25114: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25115: LD_INT 0
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
25121: PPUSH
25122: PPUSH
25123: PPUSH
25124: PPUSH
25125: PPUSH
25126: PPUSH
// result := false ;
25127: LD_ADDR_VAR 0 6
25131: PUSH
25132: LD_INT 0
25134: ST_TO_ADDR
// if not base or not btype or not x or not y then
25135: LD_VAR 0 1
25139: NOT
25140: PUSH
25141: LD_VAR 0 2
25145: NOT
25146: OR
25147: PUSH
25148: LD_VAR 0 3
25152: NOT
25153: OR
25154: PUSH
25155: LD_VAR 0 4
25159: NOT
25160: OR
25161: IFFALSE 25165
// exit ;
25163: GO 25774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25165: LD_ADDR_VAR 0 12
25169: PUSH
25170: LD_VAR 0 2
25174: PPUSH
25175: LD_VAR 0 3
25179: PPUSH
25180: LD_VAR 0 4
25184: PPUSH
25185: LD_VAR 0 5
25189: PPUSH
25190: LD_VAR 0 1
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PPUSH
25199: CALL_OW 248
25203: PPUSH
25204: LD_INT 0
25206: PPUSH
25207: CALL 26611 0 6
25211: ST_TO_ADDR
// if not hexes then
25212: LD_VAR 0 12
25216: NOT
25217: IFFALSE 25221
// exit ;
25219: GO 25774
// for i = 1 to hexes do
25221: LD_ADDR_VAR 0 7
25225: PUSH
25226: DOUBLE
25227: LD_INT 1
25229: DEC
25230: ST_TO_ADDR
25231: LD_VAR 0 12
25235: PUSH
25236: FOR_TO
25237: IFFALSE 25772
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25239: LD_ADDR_VAR 0 11
25243: PUSH
25244: LD_VAR 0 12
25248: PUSH
25249: LD_VAR 0 7
25253: ARRAY
25254: PUSH
25255: LD_INT 1
25257: ARRAY
25258: PPUSH
25259: LD_VAR 0 12
25263: PUSH
25264: LD_VAR 0 7
25268: ARRAY
25269: PUSH
25270: LD_INT 2
25272: ARRAY
25273: PPUSH
25274: CALL_OW 428
25278: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25279: LD_VAR 0 12
25283: PUSH
25284: LD_VAR 0 7
25288: ARRAY
25289: PUSH
25290: LD_INT 1
25292: ARRAY
25293: PPUSH
25294: LD_VAR 0 12
25298: PUSH
25299: LD_VAR 0 7
25303: ARRAY
25304: PUSH
25305: LD_INT 2
25307: ARRAY
25308: PPUSH
25309: CALL_OW 351
25313: PUSH
25314: LD_VAR 0 12
25318: PUSH
25319: LD_VAR 0 7
25323: ARRAY
25324: PUSH
25325: LD_INT 1
25327: ARRAY
25328: PPUSH
25329: LD_VAR 0 12
25333: PUSH
25334: LD_VAR 0 7
25338: ARRAY
25339: PUSH
25340: LD_INT 2
25342: ARRAY
25343: PPUSH
25344: CALL_OW 488
25348: NOT
25349: OR
25350: PUSH
25351: LD_VAR 0 11
25355: PPUSH
25356: CALL_OW 247
25360: PUSH
25361: LD_INT 3
25363: EQUAL
25364: OR
25365: IFFALSE 25371
// exit ;
25367: POP
25368: POP
25369: GO 25774
// if not tmp or not tmp in base then
25371: LD_VAR 0 11
25375: NOT
25376: PUSH
25377: LD_VAR 0 11
25381: PUSH
25382: LD_VAR 0 1
25386: IN
25387: NOT
25388: OR
25389: IFFALSE 25393
// continue ;
25391: GO 25236
// result := true ;
25393: LD_ADDR_VAR 0 6
25397: PUSH
25398: LD_INT 1
25400: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25401: LD_ADDR_VAR 0 15
25405: PUSH
25406: LD_VAR 0 1
25410: PPUSH
25411: LD_INT 22
25413: PUSH
25414: LD_VAR 0 11
25418: PPUSH
25419: CALL_OW 255
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: LD_INT 30
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 30
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 72
25464: ST_TO_ADDR
// if dep then
25465: LD_VAR 0 15
25469: IFFALSE 25605
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25471: LD_ADDR_VAR 0 14
25475: PUSH
25476: LD_VAR 0 15
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: PPUSH
25485: CALL_OW 250
25489: PPUSH
25490: LD_VAR 0 15
25494: PUSH
25495: LD_INT 1
25497: ARRAY
25498: PPUSH
25499: CALL_OW 254
25503: PPUSH
25504: LD_INT 5
25506: PPUSH
25507: CALL_OW 272
25511: PUSH
25512: LD_VAR 0 15
25516: PUSH
25517: LD_INT 1
25519: ARRAY
25520: PPUSH
25521: CALL_OW 251
25525: PPUSH
25526: LD_VAR 0 15
25530: PUSH
25531: LD_INT 1
25533: ARRAY
25534: PPUSH
25535: CALL_OW 254
25539: PPUSH
25540: LD_INT 5
25542: PPUSH
25543: CALL_OW 273
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25552: LD_VAR 0 14
25556: PUSH
25557: LD_INT 1
25559: ARRAY
25560: PPUSH
25561: LD_VAR 0 14
25565: PUSH
25566: LD_INT 2
25568: ARRAY
25569: PPUSH
25570: CALL_OW 488
25574: IFFALSE 25605
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25576: LD_VAR 0 11
25580: PPUSH
25581: LD_VAR 0 14
25585: PUSH
25586: LD_INT 1
25588: ARRAY
25589: PPUSH
25590: LD_VAR 0 14
25594: PUSH
25595: LD_INT 2
25597: ARRAY
25598: PPUSH
25599: CALL_OW 111
// continue ;
25603: GO 25236
// end ; end ; r := GetDir ( tmp ) ;
25605: LD_ADDR_VAR 0 13
25609: PUSH
25610: LD_VAR 0 11
25614: PPUSH
25615: CALL_OW 254
25619: ST_TO_ADDR
// if r = 5 then
25620: LD_VAR 0 13
25624: PUSH
25625: LD_INT 5
25627: EQUAL
25628: IFFALSE 25638
// r := 0 ;
25630: LD_ADDR_VAR 0 13
25634: PUSH
25635: LD_INT 0
25637: ST_TO_ADDR
// for j = r to 5 do
25638: LD_ADDR_VAR 0 8
25642: PUSH
25643: DOUBLE
25644: LD_VAR 0 13
25648: DEC
25649: ST_TO_ADDR
25650: LD_INT 5
25652: PUSH
25653: FOR_TO
25654: IFFALSE 25768
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25656: LD_ADDR_VAR 0 9
25660: PUSH
25661: LD_VAR 0 11
25665: PPUSH
25666: CALL_OW 250
25670: PPUSH
25671: LD_VAR 0 8
25675: PPUSH
25676: LD_INT 2
25678: PPUSH
25679: CALL_OW 272
25683: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25684: LD_ADDR_VAR 0 10
25688: PUSH
25689: LD_VAR 0 11
25693: PPUSH
25694: CALL_OW 251
25698: PPUSH
25699: LD_VAR 0 8
25703: PPUSH
25704: LD_INT 2
25706: PPUSH
25707: CALL_OW 273
25711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25712: LD_VAR 0 9
25716: PPUSH
25717: LD_VAR 0 10
25721: PPUSH
25722: CALL_OW 488
25726: PUSH
25727: LD_VAR 0 9
25731: PPUSH
25732: LD_VAR 0 10
25736: PPUSH
25737: CALL_OW 428
25741: NOT
25742: AND
25743: IFFALSE 25766
// begin ComMoveXY ( tmp , _x , _y ) ;
25745: LD_VAR 0 11
25749: PPUSH
25750: LD_VAR 0 9
25754: PPUSH
25755: LD_VAR 0 10
25759: PPUSH
25760: CALL_OW 111
// break ;
25764: GO 25768
// end ; end ;
25766: GO 25653
25768: POP
25769: POP
// end ;
25770: GO 25236
25772: POP
25773: POP
// end ;
25774: LD_VAR 0 6
25778: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25779: LD_INT 0
25781: PPUSH
25782: PPUSH
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
25787: PPUSH
25788: PPUSH
25789: PPUSH
25790: PPUSH
// result := false ;
25791: LD_ADDR_VAR 0 6
25795: PUSH
25796: LD_INT 0
25798: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25799: LD_VAR 0 1
25803: NOT
25804: PUSH
25805: LD_VAR 0 1
25809: PPUSH
25810: CALL_OW 266
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: IN
25825: NOT
25826: OR
25827: PUSH
25828: LD_VAR 0 2
25832: NOT
25833: OR
25834: PUSH
25835: LD_VAR 0 5
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: LD_INT 4
25854: PUSH
25855: LD_INT 5
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: IN
25866: NOT
25867: OR
25868: PUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: LD_VAR 0 4
25878: PPUSH
25879: CALL_OW 488
25883: NOT
25884: OR
25885: IFFALSE 25889
// exit ;
25887: GO 26606
// pom := GetBase ( depot ) ;
25889: LD_ADDR_VAR 0 10
25893: PUSH
25894: LD_VAR 0 1
25898: PPUSH
25899: CALL_OW 274
25903: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25904: LD_ADDR_VAR 0 11
25908: PUSH
25909: LD_VAR 0 2
25913: PPUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 248
25923: PPUSH
25924: CALL_OW 450
25928: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25929: LD_VAR 0 10
25933: PPUSH
25934: LD_INT 1
25936: PPUSH
25937: CALL_OW 275
25941: PUSH
25942: LD_VAR 0 11
25946: PUSH
25947: LD_INT 1
25949: ARRAY
25950: GREATEREQUAL
25951: PUSH
25952: LD_VAR 0 10
25956: PPUSH
25957: LD_INT 2
25959: PPUSH
25960: CALL_OW 275
25964: PUSH
25965: LD_VAR 0 11
25969: PUSH
25970: LD_INT 2
25972: ARRAY
25973: GREATEREQUAL
25974: AND
25975: PUSH
25976: LD_VAR 0 10
25980: PPUSH
25981: LD_INT 3
25983: PPUSH
25984: CALL_OW 275
25988: PUSH
25989: LD_VAR 0 11
25993: PUSH
25994: LD_INT 3
25996: ARRAY
25997: GREATEREQUAL
25998: AND
25999: NOT
26000: IFFALSE 26004
// exit ;
26002: GO 26606
// if GetBType ( depot ) = b_depot then
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 266
26013: PUSH
26014: LD_INT 0
26016: EQUAL
26017: IFFALSE 26029
// dist := 28 else
26019: LD_ADDR_VAR 0 14
26023: PUSH
26024: LD_INT 28
26026: ST_TO_ADDR
26027: GO 26037
// dist := 36 ;
26029: LD_ADDR_VAR 0 14
26033: PUSH
26034: LD_INT 36
26036: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26037: LD_VAR 0 1
26041: PPUSH
26042: LD_VAR 0 3
26046: PPUSH
26047: LD_VAR 0 4
26051: PPUSH
26052: CALL_OW 297
26056: PUSH
26057: LD_VAR 0 14
26061: GREATER
26062: IFFALSE 26066
// exit ;
26064: GO 26606
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26066: LD_ADDR_VAR 0 12
26070: PUSH
26071: LD_VAR 0 2
26075: PPUSH
26076: LD_VAR 0 3
26080: PPUSH
26081: LD_VAR 0 4
26085: PPUSH
26086: LD_VAR 0 5
26090: PPUSH
26091: LD_VAR 0 1
26095: PPUSH
26096: CALL_OW 248
26100: PPUSH
26101: LD_INT 0
26103: PPUSH
26104: CALL 26611 0 6
26108: ST_TO_ADDR
// if not hexes then
26109: LD_VAR 0 12
26113: NOT
26114: IFFALSE 26118
// exit ;
26116: GO 26606
// hex := GetHexInfo ( x , y ) ;
26118: LD_ADDR_VAR 0 15
26122: PUSH
26123: LD_VAR 0 3
26127: PPUSH
26128: LD_VAR 0 4
26132: PPUSH
26133: CALL_OW 546
26137: ST_TO_ADDR
// if hex [ 1 ] then
26138: LD_VAR 0 15
26142: PUSH
26143: LD_INT 1
26145: ARRAY
26146: IFFALSE 26150
// exit ;
26148: GO 26606
// height := hex [ 2 ] ;
26150: LD_ADDR_VAR 0 13
26154: PUSH
26155: LD_VAR 0 15
26159: PUSH
26160: LD_INT 2
26162: ARRAY
26163: ST_TO_ADDR
// for i = 1 to hexes do
26164: LD_ADDR_VAR 0 7
26168: PUSH
26169: DOUBLE
26170: LD_INT 1
26172: DEC
26173: ST_TO_ADDR
26174: LD_VAR 0 12
26178: PUSH
26179: FOR_TO
26180: IFFALSE 26510
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26182: LD_VAR 0 12
26186: PUSH
26187: LD_VAR 0 7
26191: ARRAY
26192: PUSH
26193: LD_INT 1
26195: ARRAY
26196: PPUSH
26197: LD_VAR 0 12
26201: PUSH
26202: LD_VAR 0 7
26206: ARRAY
26207: PUSH
26208: LD_INT 2
26210: ARRAY
26211: PPUSH
26212: CALL_OW 488
26216: NOT
26217: PUSH
26218: LD_VAR 0 12
26222: PUSH
26223: LD_VAR 0 7
26227: ARRAY
26228: PUSH
26229: LD_INT 1
26231: ARRAY
26232: PPUSH
26233: LD_VAR 0 12
26237: PUSH
26238: LD_VAR 0 7
26242: ARRAY
26243: PUSH
26244: LD_INT 2
26246: ARRAY
26247: PPUSH
26248: CALL_OW 428
26252: PUSH
26253: LD_INT 0
26255: GREATER
26256: OR
26257: PUSH
26258: LD_VAR 0 12
26262: PUSH
26263: LD_VAR 0 7
26267: ARRAY
26268: PUSH
26269: LD_INT 1
26271: ARRAY
26272: PPUSH
26273: LD_VAR 0 12
26277: PUSH
26278: LD_VAR 0 7
26282: ARRAY
26283: PUSH
26284: LD_INT 2
26286: ARRAY
26287: PPUSH
26288: CALL_OW 351
26292: OR
26293: IFFALSE 26299
// exit ;
26295: POP
26296: POP
26297: GO 26606
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26299: LD_ADDR_VAR 0 8
26303: PUSH
26304: LD_VAR 0 12
26308: PUSH
26309: LD_VAR 0 7
26313: ARRAY
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: PPUSH
26319: LD_VAR 0 12
26323: PUSH
26324: LD_VAR 0 7
26328: ARRAY
26329: PUSH
26330: LD_INT 2
26332: ARRAY
26333: PPUSH
26334: CALL_OW 546
26338: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26339: LD_VAR 0 8
26343: PUSH
26344: LD_INT 1
26346: ARRAY
26347: PUSH
26348: LD_VAR 0 8
26352: PUSH
26353: LD_INT 2
26355: ARRAY
26356: PUSH
26357: LD_VAR 0 13
26361: PUSH
26362: LD_INT 2
26364: PLUS
26365: GREATER
26366: OR
26367: PUSH
26368: LD_VAR 0 8
26372: PUSH
26373: LD_INT 2
26375: ARRAY
26376: PUSH
26377: LD_VAR 0 13
26381: PUSH
26382: LD_INT 2
26384: MINUS
26385: LESS
26386: OR
26387: PUSH
26388: LD_VAR 0 8
26392: PUSH
26393: LD_INT 3
26395: ARRAY
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: LD_INT 8
26402: PUSH
26403: LD_INT 9
26405: PUSH
26406: LD_INT 10
26408: PUSH
26409: LD_INT 11
26411: PUSH
26412: LD_INT 12
26414: PUSH
26415: LD_INT 13
26417: PUSH
26418: LD_INT 16
26420: PUSH
26421: LD_INT 17
26423: PUSH
26424: LD_INT 18
26426: PUSH
26427: LD_INT 19
26429: PUSH
26430: LD_INT 20
26432: PUSH
26433: LD_INT 21
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: IN
26451: NOT
26452: OR
26453: PUSH
26454: LD_VAR 0 8
26458: PUSH
26459: LD_INT 5
26461: ARRAY
26462: NOT
26463: OR
26464: PUSH
26465: LD_VAR 0 8
26469: PUSH
26470: LD_INT 6
26472: ARRAY
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 7
26482: PUSH
26483: LD_INT 9
26485: PUSH
26486: LD_INT 10
26488: PUSH
26489: LD_INT 11
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: IN
26500: NOT
26501: OR
26502: IFFALSE 26508
// exit ;
26504: POP
26505: POP
26506: GO 26606
// end ;
26508: GO 26179
26510: POP
26511: POP
// side := GetSide ( depot ) ;
26512: LD_ADDR_VAR 0 9
26516: PUSH
26517: LD_VAR 0 1
26521: PPUSH
26522: CALL_OW 255
26526: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26527: LD_VAR 0 9
26531: PPUSH
26532: LD_VAR 0 3
26536: PPUSH
26537: LD_VAR 0 4
26541: PPUSH
26542: LD_INT 20
26544: PPUSH
26545: CALL 19260 0 4
26549: PUSH
26550: LD_INT 4
26552: ARRAY
26553: IFFALSE 26557
// exit ;
26555: GO 26606
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26557: LD_VAR 0 2
26561: PUSH
26562: LD_INT 29
26564: PUSH
26565: LD_INT 30
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: IN
26572: PUSH
26573: LD_VAR 0 3
26577: PPUSH
26578: LD_VAR 0 4
26582: PPUSH
26583: LD_VAR 0 9
26587: PPUSH
26588: CALL_OW 440
26592: NOT
26593: AND
26594: IFFALSE 26598
// exit ;
26596: GO 26606
// result := true ;
26598: LD_ADDR_VAR 0 6
26602: PUSH
26603: LD_INT 1
26605: ST_TO_ADDR
// end ;
26606: LD_VAR 0 6
26610: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26611: LD_INT 0
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
26626: PPUSH
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
26631: PPUSH
26632: PPUSH
26633: PPUSH
26634: PPUSH
26635: PPUSH
26636: PPUSH
26637: PPUSH
26638: PPUSH
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
26654: PPUSH
26655: PPUSH
26656: PPUSH
26657: PPUSH
26658: PPUSH
26659: PPUSH
26660: PPUSH
26661: PPUSH
26662: PPUSH
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
// result = [ ] ;
26671: LD_ADDR_VAR 0 7
26675: PUSH
26676: EMPTY
26677: ST_TO_ADDR
// temp_list = [ ] ;
26678: LD_ADDR_VAR 0 9
26682: PUSH
26683: EMPTY
26684: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26685: LD_VAR 0 4
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: LD_INT 4
26704: PUSH
26705: LD_INT 5
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: IN
26716: NOT
26717: PUSH
26718: LD_VAR 0 1
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: IN
26733: PUSH
26734: LD_VAR 0 5
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: LD_INT 3
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: IN
26753: NOT
26754: AND
26755: OR
26756: IFFALSE 26760
// exit ;
26758: GO 45151
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26760: LD_VAR 0 1
26764: PUSH
26765: LD_INT 6
26767: PUSH
26768: LD_INT 7
26770: PUSH
26771: LD_INT 8
26773: PUSH
26774: LD_INT 13
26776: PUSH
26777: LD_INT 12
26779: PUSH
26780: LD_INT 15
26782: PUSH
26783: LD_INT 11
26785: PUSH
26786: LD_INT 14
26788: PUSH
26789: LD_INT 10
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: IN
26803: IFFALSE 26813
// btype = b_lab ;
26805: LD_ADDR_VAR 0 1
26809: PUSH
26810: LD_INT 6
26812: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26813: LD_VAR 0 6
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: IN
26832: NOT
26833: PUSH
26834: LD_VAR 0 1
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 6
26853: PUSH
26854: LD_INT 36
26856: PUSH
26857: LD_INT 4
26859: PUSH
26860: LD_INT 5
26862: PUSH
26863: LD_INT 31
26865: PUSH
26866: LD_INT 32
26868: PUSH
26869: LD_INT 33
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: IN
26885: NOT
26886: PUSH
26887: LD_VAR 0 6
26891: PUSH
26892: LD_INT 1
26894: EQUAL
26895: AND
26896: OR
26897: PUSH
26898: LD_VAR 0 1
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 3
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: IN
26913: NOT
26914: PUSH
26915: LD_VAR 0 6
26919: PUSH
26920: LD_INT 2
26922: EQUAL
26923: AND
26924: OR
26925: IFFALSE 26935
// mode = 0 ;
26927: LD_ADDR_VAR 0 6
26931: PUSH
26932: LD_INT 0
26934: ST_TO_ADDR
// case mode of 0 :
26935: LD_VAR 0 6
26939: PUSH
26940: LD_INT 0
26942: DOUBLE
26943: EQUAL
26944: IFTRUE 26948
26946: GO 38401
26948: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26949: LD_ADDR_VAR 0 11
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 2
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 2
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 3
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27142: LD_ADDR_VAR 0 12
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: NEG
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 3
27299: NEG
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 3
27310: NEG
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27338: LD_ADDR_VAR 0 13
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: LD_INT 3
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 3
27497: NEG
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 3
27509: NEG
27510: PUSH
27511: LD_INT 3
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27537: LD_ADDR_VAR 0 14
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 2
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 3
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27733: LD_ADDR_VAR 0 15
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: NEG
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27926: LD_ADDR_VAR 0 16
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 2
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 2
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 3
28083: PUSH
28084: LD_INT 3
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: LD_INT 3
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28119: LD_ADDR_VAR 0 17
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 2
28318: NEG
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28349: LD_ADDR_VAR 0 18
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 2
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28579: LD_ADDR_VAR 0 19
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: NEG
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28809: LD_ADDR_VAR 0 20
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 2
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 0
28902: PUSH
28903: LD_INT 2
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: LD_INT 2
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 2
28996: NEG
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: NEG
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29039: LD_ADDR_VAR 0 21
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 2
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: NEG
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29269: LD_ADDR_VAR 0 22
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 2
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: NEG
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 2
29456: NEG
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29499: LD_ADDR_VAR 0 23
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 2
29698: NEG
29699: PUSH
29700: LD_INT 2
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 2
29710: NEG
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29779: LD_ADDR_VAR 0 24
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: LD_INT 2
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: LD_INT 2
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 2
29955: NEG
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 3
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 3
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30055: LD_ADDR_VAR 0 25
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 2
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: LD_INT 2
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: LD_INT 3
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30329: LD_ADDR_VAR 0 26
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 2
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 3
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30605: LD_ADDR_VAR 0 27
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 0
30698: PUSH
30699: LD_INT 2
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 2
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: NEG
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30885: LD_ADDR_VAR 0 28
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 2
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: NEG
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: LD_INT 2
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31167: LD_ADDR_VAR 0 29
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: LD_INT 0
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: LD_INT 3
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 2
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 3
31411: NEG
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31446: LD_ADDR_VAR 0 30
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 2
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 2
31612: NEG
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: NEG
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 3
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 3
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31724: LD_ADDR_VAR 0 31
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 2
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 2
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 3
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 3
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 3
31967: NEG
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32002: LD_ADDR_VAR 0 32
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 3
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: NEG
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32280: LD_ADDR_VAR 0 33
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 2
32446: NEG
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 2
32458: NEG
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32559: LD_ADDR_VAR 0 34
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: LD_INT 3
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 3
32804: NEG
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32839: LD_ADDR_VAR 0 35
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32951: LD_ADDR_VAR 0 36
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33063: LD_ADDR_VAR 0 37
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33175: LD_ADDR_VAR 0 38
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33287: LD_ADDR_VAR 0 39
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33399: LD_ADDR_VAR 0 40
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33511: LD_ADDR_VAR 0 41
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: LD_INT 3
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 3
33796: NEG
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: LD_INT 3
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33861: LD_ADDR_VAR 0 42
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 2
34027: NEG
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 3
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 3
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 3
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 3
34158: NEG
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: NEG
34171: PUSH
34172: LD_INT 3
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34211: LD_ADDR_VAR 0 43
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: NEG
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 2
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: NEG
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 3
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: NEG
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34559: LD_ADDR_VAR 0 44
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 3
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 2
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 3
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 3
34844: NEG
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 3
34856: NEG
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 3
34868: NEG
34869: PUSH
34870: LD_INT 3
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34909: LD_ADDR_VAR 0 45
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 2
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 2
35099: NEG
35100: PUSH
35101: LD_INT 3
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 3
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 3
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 3
35155: PUSH
35156: LD_INT 3
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 3
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 3
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 3
35206: NEG
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: LD_INT 3
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35259: LD_ADDR_VAR 0 46
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 2
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 3
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 3
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 3
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 3
35555: NEG
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 3
35566: NEG
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35607: LD_ADDR_VAR 0 47
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 2
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35758: LD_ADDR_VAR 0 48
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35905: LD_ADDR_VAR 0 49
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36049: LD_ADDR_VAR 0 50
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36193: LD_ADDR_VAR 0 51
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36340: LD_ADDR_VAR 0 52
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 2
36455: NEG
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: NEG
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36491: LD_ADDR_VAR 0 53
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: LD_INT 2
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36721: LD_ADDR_VAR 0 54
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: LD_INT 2
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36951: LD_ADDR_VAR 0 55
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 2
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37181: LD_ADDR_VAR 0 56
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 2
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: NEG
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 2
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37411: LD_ADDR_VAR 0 57
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: NEG
37611: PUSH
37612: LD_INT 2
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37641: LD_ADDR_VAR 0 58
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37871: LD_ADDR_VAR 0 59
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37959: LD_ADDR_VAR 0 60
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38047: LD_ADDR_VAR 0 61
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38135: LD_ADDR_VAR 0 62
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38223: LD_ADDR_VAR 0 63
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 1
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38311: LD_ADDR_VAR 0 64
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: ST_TO_ADDR
// end ; 1 :
38399: GO 44296
38401: LD_INT 1
38403: DOUBLE
38404: EQUAL
38405: IFTRUE 38409
38407: GO 41032
38409: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38410: LD_ADDR_VAR 0 11
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: LD_INT 3
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 3
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38454: LD_ADDR_VAR 0 12
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38495: LD_ADDR_VAR 0 13
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38535: LD_ADDR_VAR 0 14
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38576: LD_ADDR_VAR 0 15
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 3
38594: NEG
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38620: LD_ADDR_VAR 0 16
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 3
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: NEG
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: NEG
38652: PUSH
38653: LD_INT 3
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38666: LD_ADDR_VAR 0 17
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 3
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 3
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38710: LD_ADDR_VAR 0 18
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38751: LD_ADDR_VAR 0 19
38755: PUSH
38756: LD_INT 3
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38791: LD_ADDR_VAR 0 20
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38832: LD_ADDR_VAR 0 21
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38876: LD_ADDR_VAR 0 22
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: LD_INT 3
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 3
38895: NEG
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: NEG
38908: PUSH
38909: LD_INT 3
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38922: LD_ADDR_VAR 0 23
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 4
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 3
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38966: LD_ADDR_VAR 0 24
38970: PUSH
38971: LD_INT 3
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 4
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39007: LD_ADDR_VAR 0 25
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: LD_INT 3
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: LD_INT 4
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39047: LD_ADDR_VAR 0 26
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 4
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39088: LD_ADDR_VAR 0 27
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 4
39117: NEG
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39132: LD_ADDR_VAR 0 28
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 3
39151: NEG
39152: PUSH
39153: LD_INT 4
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 4
39163: NEG
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39178: LD_ADDR_VAR 0 29
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 3
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 3
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 4
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 4
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 3
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 5
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 5
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 4
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 6
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 6
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 5
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39333: LD_ADDR_VAR 0 30
39337: PUSH
39338: LD_INT 2
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 3
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 3
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 4
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 4
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 4
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 5
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 5
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 6
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 6
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39476: LD_ADDR_VAR 0 31
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: LD_INT 3
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: LD_INT 3
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 4
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 4
39523: PUSH
39524: LD_INT 4
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: LD_INT 4
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 5
39543: PUSH
39544: LD_INT 4
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 5
39553: PUSH
39554: LD_INT 5
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 4
39563: PUSH
39564: LD_INT 5
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 6
39573: PUSH
39574: LD_INT 5
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 6
39583: PUSH
39584: LD_INT 6
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: LD_INT 6
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39615: LD_ADDR_VAR 0 32
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 4
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 4
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: LD_INT 5
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 5
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: LD_INT 4
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 6
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 6
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 5
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39758: LD_ADDR_VAR 0 33
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: NEG
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 3
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 3
39799: NEG
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 4
39810: NEG
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 4
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 4
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 5
39844: NEG
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 5
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 5
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 6
39878: NEG
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 6
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39913: LD_ADDR_VAR 0 34
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: LD_INT 3
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: LD_INT 3
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 3
39956: NEG
39957: PUSH
39958: LD_INT 4
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 4
39968: NEG
39969: PUSH
39970: LD_INT 3
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 4
39980: NEG
39981: PUSH
39982: LD_INT 4
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 4
39992: NEG
39993: PUSH
39994: LD_INT 5
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 5
40004: NEG
40005: PUSH
40006: LD_INT 4
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 5
40016: NEG
40017: PUSH
40018: LD_INT 5
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 5
40028: NEG
40029: PUSH
40030: LD_INT 6
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 6
40040: NEG
40041: PUSH
40042: LD_INT 5
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 6
40052: NEG
40053: PUSH
40054: LD_INT 6
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40076: LD_ADDR_VAR 0 41
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40120: LD_ADDR_VAR 0 42
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40161: LD_ADDR_VAR 0 43
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 3
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40201: LD_ADDR_VAR 0 44
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40242: LD_ADDR_VAR 0 45
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 3
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40286: LD_ADDR_VAR 0 46
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 3
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40332: LD_ADDR_VAR 0 47
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 3
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40365: LD_ADDR_VAR 0 48
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40396: LD_ADDR_VAR 0 49
40400: PUSH
40401: LD_INT 3
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 3
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40425: LD_ADDR_VAR 0 50
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 3
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40454: LD_ADDR_VAR 0 51
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40485: LD_ADDR_VAR 0 52
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40518: LD_ADDR_VAR 0 53
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40562: LD_ADDR_VAR 0 54
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40603: LD_ADDR_VAR 0 55
40607: PUSH
40608: LD_INT 3
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 3
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40643: LD_ADDR_VAR 0 56
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40684: LD_ADDR_VAR 0 57
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: NEG
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40728: LD_ADDR_VAR 0 58
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 3
40747: NEG
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40774: LD_ADDR_VAR 0 59
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40818: LD_ADDR_VAR 0 60
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40859: LD_ADDR_VAR 0 61
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40899: LD_ADDR_VAR 0 62
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40940: LD_ADDR_VAR 0 63
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: NEG
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40984: LD_ADDR_VAR 0 64
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// end ; 2 :
41030: GO 44296
41032: LD_INT 2
41034: DOUBLE
41035: EQUAL
41036: IFTRUE 41040
41038: GO 44295
41040: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41041: LD_ADDR_VAR 0 29
41045: PUSH
41046: LD_INT 4
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 4
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 5
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 4
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 3
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 5
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 3
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 4
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 4
41171: PUSH
41172: LD_INT 4
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 4
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 3
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 4
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 4
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 4
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 4
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 5
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 5
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 4
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 5
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 3
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 3
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 3
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 4
41380: NEG
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 4
41391: NEG
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 4
41403: NEG
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 4
41426: NEG
41427: PUSH
41428: LD_INT 4
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 4
41438: NEG
41439: PUSH
41440: LD_INT 5
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: LD_INT 4
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 3
41462: NEG
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 4
41474: NEG
41475: PUSH
41476: LD_INT 3
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 5
41486: NEG
41487: PUSH
41488: LD_INT 4
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 5
41498: NEG
41499: PUSH
41500: LD_INT 5
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: LD_INT 5
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 5
41522: NEG
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41579: LD_ADDR_VAR 0 30
41583: PUSH
41584: LD_INT 4
41586: PUSH
41587: LD_INT 4
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 4
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 5
41606: PUSH
41607: LD_INT 4
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 5
41616: PUSH
41617: LD_INT 5
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 4
41626: PUSH
41627: LD_INT 5
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: LD_INT 4
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 3
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 5
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 3
41666: PUSH
41667: LD_INT 5
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 3
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 4
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 4
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 3
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 4
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 4
41769: NEG
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 4
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 4
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 5
41825: NEG
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 5
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 5
41848: NEG
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 3
41860: NEG
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: LD_INT 4
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: LD_INT 3
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 3
41919: NEG
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 4
41931: NEG
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 4
41943: NEG
41944: PUSH
41945: LD_INT 4
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 4
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 4
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 4
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 5
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 4
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 3
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 3
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 4
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 5
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 3
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: LD_INT 5
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42126: LD_ADDR_VAR 0 31
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 4
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 4
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 5
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 4
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 3
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 5
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: NEG
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 3
42237: NEG
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 3
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 4
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 4
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 4
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 4
42328: NEG
42329: PUSH
42330: LD_INT 4
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 4
42340: NEG
42341: PUSH
42342: LD_INT 5
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 4
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 3
42364: NEG
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 4
42376: NEG
42377: PUSH
42378: LD_INT 3
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 5
42388: NEG
42389: PUSH
42390: LD_INT 4
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 5
42400: NEG
42401: PUSH
42402: LD_INT 5
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 5
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 5
42424: NEG
42425: PUSH
42426: LD_INT 3
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 3
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 4
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 3
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 3
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 4
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 4
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 4
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 4
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 5
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 3
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 5
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42676: LD_ADDR_VAR 0 32
42680: PUSH
42681: LD_INT 4
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 4
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 3
42706: NEG
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 3
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 4
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 5
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 5
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 5
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 3
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 3
42785: NEG
42786: PUSH
42787: LD_INT 3
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 3
42797: NEG
42798: PUSH
42799: LD_INT 4
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 4
42845: NEG
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 4
42857: NEG
42858: PUSH
42859: LD_INT 4
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 4
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 4
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 4
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 5
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 4
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 3
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 4
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 5
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: LD_INT 5
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 4
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 4
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 4
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 4
43088: PUSH
43089: LD_INT 4
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 4
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 5
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 5
43118: PUSH
43119: LD_INT 5
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 4
43128: PUSH
43129: LD_INT 5
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 4
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 5
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 5
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43223: LD_ADDR_VAR 0 33
43227: PUSH
43228: LD_INT 4
43230: NEG
43231: PUSH
43232: LD_INT 4
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 4
43242: NEG
43243: PUSH
43244: LD_INT 5
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: LD_INT 4
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: NEG
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 4
43278: NEG
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 5
43290: NEG
43291: PUSH
43292: LD_INT 4
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 5
43302: NEG
43303: PUSH
43304: LD_INT 5
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: LD_INT 5
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 5
43326: NEG
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 4
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 3
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 4
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 4
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 4
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 5
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 5
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 4
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 2
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 5
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 4
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 4
43563: PUSH
43564: LD_INT 4
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: PUSH
43574: LD_INT 4
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 4
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 4
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 4
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 4
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 5
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 5
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 4
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 5
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 3
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43761: LD_ADDR_VAR 0 34
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 4
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 5
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 4
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 3
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 3
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 4
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 5
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 3
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: LD_INT 5
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 4
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 4
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 4
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 4
43963: PUSH
43964: LD_INT 4
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 4
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 5
43983: PUSH
43984: LD_INT 4
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 5
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: LD_INT 5
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: LD_INT 4
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 3
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 5
44033: PUSH
44034: LD_INT 3
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 5
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 4
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 4
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 3
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 4
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 4
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 4
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 4
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 5
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 5
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 5
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
// end ; end ;
44293: GO 44296
44295: POP
// case btype of b_depot , b_warehouse :
44296: LD_VAR 0 1
44300: PUSH
44301: LD_INT 0
44303: DOUBLE
44304: EQUAL
44305: IFTRUE 44315
44307: LD_INT 1
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44516
44315: POP
// case nation of nation_american :
44316: LD_VAR 0 5
44320: PUSH
44321: LD_INT 1
44323: DOUBLE
44324: EQUAL
44325: IFTRUE 44329
44327: GO 44385
44329: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44330: LD_ADDR_VAR 0 9
44334: PUSH
44335: LD_VAR 0 11
44339: PUSH
44340: LD_VAR 0 12
44344: PUSH
44345: LD_VAR 0 13
44349: PUSH
44350: LD_VAR 0 14
44354: PUSH
44355: LD_VAR 0 15
44359: PUSH
44360: LD_VAR 0 16
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: PUSH
44373: LD_VAR 0 4
44377: PUSH
44378: LD_INT 1
44380: PLUS
44381: ARRAY
44382: ST_TO_ADDR
44383: GO 44514
44385: LD_INT 2
44387: DOUBLE
44388: EQUAL
44389: IFTRUE 44393
44391: GO 44449
44393: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44394: LD_ADDR_VAR 0 9
44398: PUSH
44399: LD_VAR 0 17
44403: PUSH
44404: LD_VAR 0 18
44408: PUSH
44409: LD_VAR 0 19
44413: PUSH
44414: LD_VAR 0 20
44418: PUSH
44419: LD_VAR 0 21
44423: PUSH
44424: LD_VAR 0 22
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: PUSH
44437: LD_VAR 0 4
44441: PUSH
44442: LD_INT 1
44444: PLUS
44445: ARRAY
44446: ST_TO_ADDR
44447: GO 44514
44449: LD_INT 3
44451: DOUBLE
44452: EQUAL
44453: IFTRUE 44457
44455: GO 44513
44457: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44458: LD_ADDR_VAR 0 9
44462: PUSH
44463: LD_VAR 0 23
44467: PUSH
44468: LD_VAR 0 24
44472: PUSH
44473: LD_VAR 0 25
44477: PUSH
44478: LD_VAR 0 26
44482: PUSH
44483: LD_VAR 0 27
44487: PUSH
44488: LD_VAR 0 28
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: PUSH
44501: LD_VAR 0 4
44505: PUSH
44506: LD_INT 1
44508: PLUS
44509: ARRAY
44510: ST_TO_ADDR
44511: GO 44514
44513: POP
44514: GO 45069
44516: LD_INT 2
44518: DOUBLE
44519: EQUAL
44520: IFTRUE 44530
44522: LD_INT 3
44524: DOUBLE
44525: EQUAL
44526: IFTRUE 44530
44528: GO 44586
44530: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44531: LD_ADDR_VAR 0 9
44535: PUSH
44536: LD_VAR 0 29
44540: PUSH
44541: LD_VAR 0 30
44545: PUSH
44546: LD_VAR 0 31
44550: PUSH
44551: LD_VAR 0 32
44555: PUSH
44556: LD_VAR 0 33
44560: PUSH
44561: LD_VAR 0 34
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: PUSH
44574: LD_VAR 0 4
44578: PUSH
44579: LD_INT 1
44581: PLUS
44582: ARRAY
44583: ST_TO_ADDR
44584: GO 45069
44586: LD_INT 16
44588: DOUBLE
44589: EQUAL
44590: IFTRUE 44648
44592: LD_INT 17
44594: DOUBLE
44595: EQUAL
44596: IFTRUE 44648
44598: LD_INT 18
44600: DOUBLE
44601: EQUAL
44602: IFTRUE 44648
44604: LD_INT 19
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44648
44610: LD_INT 22
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44648
44616: LD_INT 20
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44648
44622: LD_INT 21
44624: DOUBLE
44625: EQUAL
44626: IFTRUE 44648
44628: LD_INT 23
44630: DOUBLE
44631: EQUAL
44632: IFTRUE 44648
44634: LD_INT 24
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44648
44640: LD_INT 25
44642: DOUBLE
44643: EQUAL
44644: IFTRUE 44648
44646: GO 44704
44648: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44649: LD_ADDR_VAR 0 9
44653: PUSH
44654: LD_VAR 0 35
44658: PUSH
44659: LD_VAR 0 36
44663: PUSH
44664: LD_VAR 0 37
44668: PUSH
44669: LD_VAR 0 38
44673: PUSH
44674: LD_VAR 0 39
44678: PUSH
44679: LD_VAR 0 40
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: LD_VAR 0 4
44696: PUSH
44697: LD_INT 1
44699: PLUS
44700: ARRAY
44701: ST_TO_ADDR
44702: GO 45069
44704: LD_INT 6
44706: DOUBLE
44707: EQUAL
44708: IFTRUE 44760
44710: LD_INT 7
44712: DOUBLE
44713: EQUAL
44714: IFTRUE 44760
44716: LD_INT 8
44718: DOUBLE
44719: EQUAL
44720: IFTRUE 44760
44722: LD_INT 13
44724: DOUBLE
44725: EQUAL
44726: IFTRUE 44760
44728: LD_INT 12
44730: DOUBLE
44731: EQUAL
44732: IFTRUE 44760
44734: LD_INT 15
44736: DOUBLE
44737: EQUAL
44738: IFTRUE 44760
44740: LD_INT 11
44742: DOUBLE
44743: EQUAL
44744: IFTRUE 44760
44746: LD_INT 14
44748: DOUBLE
44749: EQUAL
44750: IFTRUE 44760
44752: LD_INT 10
44754: DOUBLE
44755: EQUAL
44756: IFTRUE 44760
44758: GO 44816
44760: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44761: LD_ADDR_VAR 0 9
44765: PUSH
44766: LD_VAR 0 41
44770: PUSH
44771: LD_VAR 0 42
44775: PUSH
44776: LD_VAR 0 43
44780: PUSH
44781: LD_VAR 0 44
44785: PUSH
44786: LD_VAR 0 45
44790: PUSH
44791: LD_VAR 0 46
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: PUSH
44804: LD_VAR 0 4
44808: PUSH
44809: LD_INT 1
44811: PLUS
44812: ARRAY
44813: ST_TO_ADDR
44814: GO 45069
44816: LD_INT 36
44818: DOUBLE
44819: EQUAL
44820: IFTRUE 44824
44822: GO 44880
44824: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44825: LD_ADDR_VAR 0 9
44829: PUSH
44830: LD_VAR 0 47
44834: PUSH
44835: LD_VAR 0 48
44839: PUSH
44840: LD_VAR 0 49
44844: PUSH
44845: LD_VAR 0 50
44849: PUSH
44850: LD_VAR 0 51
44854: PUSH
44855: LD_VAR 0 52
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: PUSH
44868: LD_VAR 0 4
44872: PUSH
44873: LD_INT 1
44875: PLUS
44876: ARRAY
44877: ST_TO_ADDR
44878: GO 45069
44880: LD_INT 4
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44906
44886: LD_INT 5
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44906
44892: LD_INT 34
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44906
44898: LD_INT 37
44900: DOUBLE
44901: EQUAL
44902: IFTRUE 44906
44904: GO 44962
44906: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44907: LD_ADDR_VAR 0 9
44911: PUSH
44912: LD_VAR 0 53
44916: PUSH
44917: LD_VAR 0 54
44921: PUSH
44922: LD_VAR 0 55
44926: PUSH
44927: LD_VAR 0 56
44931: PUSH
44932: LD_VAR 0 57
44936: PUSH
44937: LD_VAR 0 58
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: PUSH
44950: LD_VAR 0 4
44954: PUSH
44955: LD_INT 1
44957: PLUS
44958: ARRAY
44959: ST_TO_ADDR
44960: GO 45069
44962: LD_INT 31
44964: DOUBLE
44965: EQUAL
44966: IFTRUE 45012
44968: LD_INT 32
44970: DOUBLE
44971: EQUAL
44972: IFTRUE 45012
44974: LD_INT 33
44976: DOUBLE
44977: EQUAL
44978: IFTRUE 45012
44980: LD_INT 27
44982: DOUBLE
44983: EQUAL
44984: IFTRUE 45012
44986: LD_INT 26
44988: DOUBLE
44989: EQUAL
44990: IFTRUE 45012
44992: LD_INT 28
44994: DOUBLE
44995: EQUAL
44996: IFTRUE 45012
44998: LD_INT 29
45000: DOUBLE
45001: EQUAL
45002: IFTRUE 45012
45004: LD_INT 30
45006: DOUBLE
45007: EQUAL
45008: IFTRUE 45012
45010: GO 45068
45012: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45013: LD_ADDR_VAR 0 9
45017: PUSH
45018: LD_VAR 0 59
45022: PUSH
45023: LD_VAR 0 60
45027: PUSH
45028: LD_VAR 0 61
45032: PUSH
45033: LD_VAR 0 62
45037: PUSH
45038: LD_VAR 0 63
45042: PUSH
45043: LD_VAR 0 64
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: PUSH
45056: LD_VAR 0 4
45060: PUSH
45061: LD_INT 1
45063: PLUS
45064: ARRAY
45065: ST_TO_ADDR
45066: GO 45069
45068: POP
// temp_list2 = [ ] ;
45069: LD_ADDR_VAR 0 10
45073: PUSH
45074: EMPTY
45075: ST_TO_ADDR
// for i in temp_list do
45076: LD_ADDR_VAR 0 8
45080: PUSH
45081: LD_VAR 0 9
45085: PUSH
45086: FOR_IN
45087: IFFALSE 45139
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45089: LD_ADDR_VAR 0 10
45093: PUSH
45094: LD_VAR 0 10
45098: PUSH
45099: LD_VAR 0 8
45103: PUSH
45104: LD_INT 1
45106: ARRAY
45107: PUSH
45108: LD_VAR 0 2
45112: PLUS
45113: PUSH
45114: LD_VAR 0 8
45118: PUSH
45119: LD_INT 2
45121: ARRAY
45122: PUSH
45123: LD_VAR 0 3
45127: PLUS
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: ADD
45136: ST_TO_ADDR
45137: GO 45086
45139: POP
45140: POP
// result = temp_list2 ;
45141: LD_ADDR_VAR 0 7
45145: PUSH
45146: LD_VAR 0 10
45150: ST_TO_ADDR
// end ;
45151: LD_VAR 0 7
45155: RET
// export function EnemyInRange ( unit , dist ) ; begin
45156: LD_INT 0
45158: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 255
45173: PPUSH
45174: LD_VAR 0 1
45178: PPUSH
45179: CALL_OW 250
45183: PPUSH
45184: LD_VAR 0 1
45188: PPUSH
45189: CALL_OW 251
45193: PPUSH
45194: LD_VAR 0 2
45198: PPUSH
45199: CALL 19260 0 4
45203: PUSH
45204: LD_INT 4
45206: ARRAY
45207: ST_TO_ADDR
// end ;
45208: LD_VAR 0 3
45212: RET
// export function PlayerSeeMe ( unit ) ; begin
45213: LD_INT 0
45215: PPUSH
// result := See ( your_side , unit ) ;
45216: LD_ADDR_VAR 0 2
45220: PUSH
45221: LD_OWVAR 2
45225: PPUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: CALL_OW 292
45235: ST_TO_ADDR
// end ;
45236: LD_VAR 0 2
45240: RET
// export function ReverseDir ( unit ) ; begin
45241: LD_INT 0
45243: PPUSH
// if not unit then
45244: LD_VAR 0 1
45248: NOT
45249: IFFALSE 45253
// exit ;
45251: GO 45276
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45253: LD_ADDR_VAR 0 2
45257: PUSH
45258: LD_VAR 0 1
45262: PPUSH
45263: CALL_OW 254
45267: PUSH
45268: LD_INT 3
45270: PLUS
45271: PUSH
45272: LD_INT 6
45274: MOD
45275: ST_TO_ADDR
// end ;
45276: LD_VAR 0 2
45280: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45281: LD_INT 0
45283: PPUSH
45284: PPUSH
45285: PPUSH
45286: PPUSH
45287: PPUSH
// if not hexes then
45288: LD_VAR 0 2
45292: NOT
45293: IFFALSE 45297
// exit ;
45295: GO 45445
// dist := 9999 ;
45297: LD_ADDR_VAR 0 5
45301: PUSH
45302: LD_INT 9999
45304: ST_TO_ADDR
// for i = 1 to hexes do
45305: LD_ADDR_VAR 0 4
45309: PUSH
45310: DOUBLE
45311: LD_INT 1
45313: DEC
45314: ST_TO_ADDR
45315: LD_VAR 0 2
45319: PUSH
45320: FOR_TO
45321: IFFALSE 45433
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45323: LD_VAR 0 1
45327: PPUSH
45328: LD_VAR 0 2
45332: PUSH
45333: LD_VAR 0 4
45337: ARRAY
45338: PUSH
45339: LD_INT 1
45341: ARRAY
45342: PPUSH
45343: LD_VAR 0 2
45347: PUSH
45348: LD_VAR 0 4
45352: ARRAY
45353: PUSH
45354: LD_INT 2
45356: ARRAY
45357: PPUSH
45358: CALL_OW 297
45362: PUSH
45363: LD_VAR 0 5
45367: LESS
45368: IFFALSE 45431
// begin hex := hexes [ i ] ;
45370: LD_ADDR_VAR 0 7
45374: PUSH
45375: LD_VAR 0 2
45379: PUSH
45380: LD_VAR 0 4
45384: ARRAY
45385: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45386: LD_ADDR_VAR 0 5
45390: PUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: LD_VAR 0 2
45400: PUSH
45401: LD_VAR 0 4
45405: ARRAY
45406: PUSH
45407: LD_INT 1
45409: ARRAY
45410: PPUSH
45411: LD_VAR 0 2
45415: PUSH
45416: LD_VAR 0 4
45420: ARRAY
45421: PUSH
45422: LD_INT 2
45424: ARRAY
45425: PPUSH
45426: CALL_OW 297
45430: ST_TO_ADDR
// end ; end ;
45431: GO 45320
45433: POP
45434: POP
// result := hex ;
45435: LD_ADDR_VAR 0 3
45439: PUSH
45440: LD_VAR 0 7
45444: ST_TO_ADDR
// end ;
45445: LD_VAR 0 3
45449: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45450: LD_INT 0
45452: PPUSH
45453: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45454: LD_VAR 0 1
45458: NOT
45459: PUSH
45460: LD_VAR 0 1
45464: PUSH
45465: LD_INT 21
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 23
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PPUSH
45489: CALL_OW 69
45493: IN
45494: NOT
45495: OR
45496: IFFALSE 45500
// exit ;
45498: GO 45547
// for i = 1 to 3 do
45500: LD_ADDR_VAR 0 3
45504: PUSH
45505: DOUBLE
45506: LD_INT 1
45508: DEC
45509: ST_TO_ADDR
45510: LD_INT 3
45512: PUSH
45513: FOR_TO
45514: IFFALSE 45545
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 250
45525: PPUSH
45526: LD_VAR 0 1
45530: PPUSH
45531: CALL_OW 251
45535: PPUSH
45536: LD_INT 1
45538: PPUSH
45539: CALL_OW 453
45543: GO 45513
45545: POP
45546: POP
// end ;
45547: LD_VAR 0 2
45551: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45552: LD_INT 0
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45560: LD_VAR 0 1
45564: NOT
45565: PUSH
45566: LD_VAR 0 2
45570: NOT
45571: OR
45572: PUSH
45573: LD_VAR 0 1
45577: PPUSH
45578: CALL_OW 314
45582: OR
45583: IFFALSE 45587
// exit ;
45585: GO 46028
// x := GetX ( enemy_unit ) ;
45587: LD_ADDR_VAR 0 7
45591: PUSH
45592: LD_VAR 0 2
45596: PPUSH
45597: CALL_OW 250
45601: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45602: LD_ADDR_VAR 0 8
45606: PUSH
45607: LD_VAR 0 2
45611: PPUSH
45612: CALL_OW 251
45616: ST_TO_ADDR
// if not x or not y then
45617: LD_VAR 0 7
45621: NOT
45622: PUSH
45623: LD_VAR 0 8
45627: NOT
45628: OR
45629: IFFALSE 45633
// exit ;
45631: GO 46028
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45633: LD_ADDR_VAR 0 6
45637: PUSH
45638: LD_VAR 0 7
45642: PPUSH
45643: LD_INT 0
45645: PPUSH
45646: LD_INT 4
45648: PPUSH
45649: CALL_OW 272
45653: PUSH
45654: LD_VAR 0 8
45658: PPUSH
45659: LD_INT 0
45661: PPUSH
45662: LD_INT 4
45664: PPUSH
45665: CALL_OW 273
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_VAR 0 7
45678: PPUSH
45679: LD_INT 1
45681: PPUSH
45682: LD_INT 4
45684: PPUSH
45685: CALL_OW 272
45689: PUSH
45690: LD_VAR 0 8
45694: PPUSH
45695: LD_INT 1
45697: PPUSH
45698: LD_INT 4
45700: PPUSH
45701: CALL_OW 273
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_VAR 0 7
45714: PPUSH
45715: LD_INT 2
45717: PPUSH
45718: LD_INT 4
45720: PPUSH
45721: CALL_OW 272
45725: PUSH
45726: LD_VAR 0 8
45730: PPUSH
45731: LD_INT 2
45733: PPUSH
45734: LD_INT 4
45736: PPUSH
45737: CALL_OW 273
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_VAR 0 7
45750: PPUSH
45751: LD_INT 3
45753: PPUSH
45754: LD_INT 4
45756: PPUSH
45757: CALL_OW 272
45761: PUSH
45762: LD_VAR 0 8
45766: PPUSH
45767: LD_INT 3
45769: PPUSH
45770: LD_INT 4
45772: PPUSH
45773: CALL_OW 273
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_VAR 0 7
45786: PPUSH
45787: LD_INT 4
45789: PPUSH
45790: LD_INT 4
45792: PPUSH
45793: CALL_OW 272
45797: PUSH
45798: LD_VAR 0 8
45802: PPUSH
45803: LD_INT 4
45805: PPUSH
45806: LD_INT 4
45808: PPUSH
45809: CALL_OW 273
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_VAR 0 7
45822: PPUSH
45823: LD_INT 5
45825: PPUSH
45826: LD_INT 4
45828: PPUSH
45829: CALL_OW 272
45833: PUSH
45834: LD_VAR 0 8
45838: PPUSH
45839: LD_INT 5
45841: PPUSH
45842: LD_INT 4
45844: PPUSH
45845: CALL_OW 273
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// for i = tmp downto 1 do
45862: LD_ADDR_VAR 0 4
45866: PUSH
45867: DOUBLE
45868: LD_VAR 0 6
45872: INC
45873: ST_TO_ADDR
45874: LD_INT 1
45876: PUSH
45877: FOR_DOWNTO
45878: IFFALSE 45979
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45880: LD_VAR 0 6
45884: PUSH
45885: LD_VAR 0 4
45889: ARRAY
45890: PUSH
45891: LD_INT 1
45893: ARRAY
45894: PPUSH
45895: LD_VAR 0 6
45899: PUSH
45900: LD_VAR 0 4
45904: ARRAY
45905: PUSH
45906: LD_INT 2
45908: ARRAY
45909: PPUSH
45910: CALL_OW 488
45914: NOT
45915: PUSH
45916: LD_VAR 0 6
45920: PUSH
45921: LD_VAR 0 4
45925: ARRAY
45926: PUSH
45927: LD_INT 1
45929: ARRAY
45930: PPUSH
45931: LD_VAR 0 6
45935: PUSH
45936: LD_VAR 0 4
45940: ARRAY
45941: PUSH
45942: LD_INT 2
45944: ARRAY
45945: PPUSH
45946: CALL_OW 428
45950: PUSH
45951: LD_INT 0
45953: NONEQUAL
45954: OR
45955: IFFALSE 45977
// tmp := Delete ( tmp , i ) ;
45957: LD_ADDR_VAR 0 6
45961: PUSH
45962: LD_VAR 0 6
45966: PPUSH
45967: LD_VAR 0 4
45971: PPUSH
45972: CALL_OW 3
45976: ST_TO_ADDR
45977: GO 45877
45979: POP
45980: POP
// j := GetClosestHex ( unit , tmp ) ;
45981: LD_ADDR_VAR 0 5
45985: PUSH
45986: LD_VAR 0 1
45990: PPUSH
45991: LD_VAR 0 6
45995: PPUSH
45996: CALL 45281 0 2
46000: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46001: LD_VAR 0 1
46005: PPUSH
46006: LD_VAR 0 5
46010: PUSH
46011: LD_INT 1
46013: ARRAY
46014: PPUSH
46015: LD_VAR 0 5
46019: PUSH
46020: LD_INT 2
46022: ARRAY
46023: PPUSH
46024: CALL_OW 111
// end ;
46028: LD_VAR 0 3
46032: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46033: LD_INT 0
46035: PPUSH
46036: PPUSH
46037: PPUSH
// uc_side = 0 ;
46038: LD_ADDR_OWVAR 20
46042: PUSH
46043: LD_INT 0
46045: ST_TO_ADDR
// uc_nation = 0 ;
46046: LD_ADDR_OWVAR 21
46050: PUSH
46051: LD_INT 0
46053: ST_TO_ADDR
// InitHc ;
46054: CALL_OW 19
// InitVc ;
46058: CALL_OW 20
// if mastodonts then
46062: LD_VAR 0 6
46066: IFFALSE 46133
// for i = 1 to mastodonts do
46068: LD_ADDR_VAR 0 11
46072: PUSH
46073: DOUBLE
46074: LD_INT 1
46076: DEC
46077: ST_TO_ADDR
46078: LD_VAR 0 6
46082: PUSH
46083: FOR_TO
46084: IFFALSE 46131
// begin vc_chassis := 31 ;
46086: LD_ADDR_OWVAR 37
46090: PUSH
46091: LD_INT 31
46093: ST_TO_ADDR
// vc_control := control_rider ;
46094: LD_ADDR_OWVAR 38
46098: PUSH
46099: LD_INT 4
46101: ST_TO_ADDR
// animal := CreateVehicle ;
46102: LD_ADDR_VAR 0 12
46106: PUSH
46107: CALL_OW 45
46111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46112: LD_VAR 0 12
46116: PPUSH
46117: LD_VAR 0 8
46121: PPUSH
46122: LD_INT 0
46124: PPUSH
46125: CALL 48202 0 3
// end ;
46129: GO 46083
46131: POP
46132: POP
// if horses then
46133: LD_VAR 0 5
46137: IFFALSE 46204
// for i = 1 to horses do
46139: LD_ADDR_VAR 0 11
46143: PUSH
46144: DOUBLE
46145: LD_INT 1
46147: DEC
46148: ST_TO_ADDR
46149: LD_VAR 0 5
46153: PUSH
46154: FOR_TO
46155: IFFALSE 46202
// begin hc_class := 21 ;
46157: LD_ADDR_OWVAR 28
46161: PUSH
46162: LD_INT 21
46164: ST_TO_ADDR
// hc_gallery :=  ;
46165: LD_ADDR_OWVAR 33
46169: PUSH
46170: LD_STRING 
46172: ST_TO_ADDR
// animal := CreateHuman ;
46173: LD_ADDR_VAR 0 12
46177: PUSH
46178: CALL_OW 44
46182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46183: LD_VAR 0 12
46187: PPUSH
46188: LD_VAR 0 8
46192: PPUSH
46193: LD_INT 0
46195: PPUSH
46196: CALL 48202 0 3
// end ;
46200: GO 46154
46202: POP
46203: POP
// if birds then
46204: LD_VAR 0 1
46208: IFFALSE 46275
// for i = 1 to birds do
46210: LD_ADDR_VAR 0 11
46214: PUSH
46215: DOUBLE
46216: LD_INT 1
46218: DEC
46219: ST_TO_ADDR
46220: LD_VAR 0 1
46224: PUSH
46225: FOR_TO
46226: IFFALSE 46273
// begin hc_class = 18 ;
46228: LD_ADDR_OWVAR 28
46232: PUSH
46233: LD_INT 18
46235: ST_TO_ADDR
// hc_gallery =  ;
46236: LD_ADDR_OWVAR 33
46240: PUSH
46241: LD_STRING 
46243: ST_TO_ADDR
// animal := CreateHuman ;
46244: LD_ADDR_VAR 0 12
46248: PUSH
46249: CALL_OW 44
46253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46254: LD_VAR 0 12
46258: PPUSH
46259: LD_VAR 0 8
46263: PPUSH
46264: LD_INT 0
46266: PPUSH
46267: CALL 48202 0 3
// end ;
46271: GO 46225
46273: POP
46274: POP
// if tigers then
46275: LD_VAR 0 2
46279: IFFALSE 46363
// for i = 1 to tigers do
46281: LD_ADDR_VAR 0 11
46285: PUSH
46286: DOUBLE
46287: LD_INT 1
46289: DEC
46290: ST_TO_ADDR
46291: LD_VAR 0 2
46295: PUSH
46296: FOR_TO
46297: IFFALSE 46361
// begin hc_class = class_tiger ;
46299: LD_ADDR_OWVAR 28
46303: PUSH
46304: LD_INT 14
46306: ST_TO_ADDR
// hc_gallery =  ;
46307: LD_ADDR_OWVAR 33
46311: PUSH
46312: LD_STRING 
46314: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46315: LD_ADDR_OWVAR 35
46319: PUSH
46320: LD_INT 7
46322: NEG
46323: PPUSH
46324: LD_INT 7
46326: PPUSH
46327: CALL_OW 12
46331: ST_TO_ADDR
// animal := CreateHuman ;
46332: LD_ADDR_VAR 0 12
46336: PUSH
46337: CALL_OW 44
46341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46342: LD_VAR 0 12
46346: PPUSH
46347: LD_VAR 0 8
46351: PPUSH
46352: LD_INT 0
46354: PPUSH
46355: CALL 48202 0 3
// end ;
46359: GO 46296
46361: POP
46362: POP
// if apemans then
46363: LD_VAR 0 3
46367: IFFALSE 46490
// for i = 1 to apemans do
46369: LD_ADDR_VAR 0 11
46373: PUSH
46374: DOUBLE
46375: LD_INT 1
46377: DEC
46378: ST_TO_ADDR
46379: LD_VAR 0 3
46383: PUSH
46384: FOR_TO
46385: IFFALSE 46488
// begin hc_class = class_apeman ;
46387: LD_ADDR_OWVAR 28
46391: PUSH
46392: LD_INT 12
46394: ST_TO_ADDR
// hc_gallery =  ;
46395: LD_ADDR_OWVAR 33
46399: PUSH
46400: LD_STRING 
46402: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46403: LD_ADDR_OWVAR 35
46407: PUSH
46408: LD_INT 5
46410: NEG
46411: PPUSH
46412: LD_INT 5
46414: PPUSH
46415: CALL_OW 12
46419: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46420: LD_ADDR_OWVAR 31
46424: PUSH
46425: LD_INT 1
46427: PPUSH
46428: LD_INT 3
46430: PPUSH
46431: CALL_OW 12
46435: PUSH
46436: LD_INT 1
46438: PPUSH
46439: LD_INT 3
46441: PPUSH
46442: CALL_OW 12
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// animal := CreateHuman ;
46459: LD_ADDR_VAR 0 12
46463: PUSH
46464: CALL_OW 44
46468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46469: LD_VAR 0 12
46473: PPUSH
46474: LD_VAR 0 8
46478: PPUSH
46479: LD_INT 0
46481: PPUSH
46482: CALL 48202 0 3
// end ;
46486: GO 46384
46488: POP
46489: POP
// if enchidnas then
46490: LD_VAR 0 4
46494: IFFALSE 46561
// for i = 1 to enchidnas do
46496: LD_ADDR_VAR 0 11
46500: PUSH
46501: DOUBLE
46502: LD_INT 1
46504: DEC
46505: ST_TO_ADDR
46506: LD_VAR 0 4
46510: PUSH
46511: FOR_TO
46512: IFFALSE 46559
// begin hc_class = 13 ;
46514: LD_ADDR_OWVAR 28
46518: PUSH
46519: LD_INT 13
46521: ST_TO_ADDR
// hc_gallery =  ;
46522: LD_ADDR_OWVAR 33
46526: PUSH
46527: LD_STRING 
46529: ST_TO_ADDR
// animal := CreateHuman ;
46530: LD_ADDR_VAR 0 12
46534: PUSH
46535: CALL_OW 44
46539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46540: LD_VAR 0 12
46544: PPUSH
46545: LD_VAR 0 8
46549: PPUSH
46550: LD_INT 0
46552: PPUSH
46553: CALL 48202 0 3
// end ;
46557: GO 46511
46559: POP
46560: POP
// if fishes then
46561: LD_VAR 0 7
46565: IFFALSE 46632
// for i = 1 to fishes do
46567: LD_ADDR_VAR 0 11
46571: PUSH
46572: DOUBLE
46573: LD_INT 1
46575: DEC
46576: ST_TO_ADDR
46577: LD_VAR 0 7
46581: PUSH
46582: FOR_TO
46583: IFFALSE 46630
// begin hc_class = 20 ;
46585: LD_ADDR_OWVAR 28
46589: PUSH
46590: LD_INT 20
46592: ST_TO_ADDR
// hc_gallery =  ;
46593: LD_ADDR_OWVAR 33
46597: PUSH
46598: LD_STRING 
46600: ST_TO_ADDR
// animal := CreateHuman ;
46601: LD_ADDR_VAR 0 12
46605: PUSH
46606: CALL_OW 44
46610: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46611: LD_VAR 0 12
46615: PPUSH
46616: LD_VAR 0 9
46620: PPUSH
46621: LD_INT 0
46623: PPUSH
46624: CALL 48202 0 3
// end ;
46628: GO 46582
46630: POP
46631: POP
// end ;
46632: LD_VAR 0 10
46636: RET
// export function WantHeal ( sci , unit ) ; begin
46637: LD_INT 0
46639: PPUSH
// if GetTaskList ( sci ) > 0 then
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 437
46649: PUSH
46650: LD_INT 0
46652: GREATER
46653: IFFALSE 46723
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46655: LD_VAR 0 1
46659: PPUSH
46660: CALL_OW 437
46664: PUSH
46665: LD_INT 1
46667: ARRAY
46668: PUSH
46669: LD_INT 1
46671: ARRAY
46672: PUSH
46673: LD_STRING l
46675: EQUAL
46676: PUSH
46677: LD_VAR 0 1
46681: PPUSH
46682: CALL_OW 437
46686: PUSH
46687: LD_INT 1
46689: ARRAY
46690: PUSH
46691: LD_INT 4
46693: ARRAY
46694: PUSH
46695: LD_VAR 0 2
46699: EQUAL
46700: AND
46701: IFFALSE 46713
// result := true else
46703: LD_ADDR_VAR 0 3
46707: PUSH
46708: LD_INT 1
46710: ST_TO_ADDR
46711: GO 46721
// result := false ;
46713: LD_ADDR_VAR 0 3
46717: PUSH
46718: LD_INT 0
46720: ST_TO_ADDR
// end else
46721: GO 46731
// result := false ;
46723: LD_ADDR_VAR 0 3
46727: PUSH
46728: LD_INT 0
46730: ST_TO_ADDR
// end ;
46731: LD_VAR 0 3
46735: RET
// export function HealTarget ( sci ) ; begin
46736: LD_INT 0
46738: PPUSH
// if not sci then
46739: LD_VAR 0 1
46743: NOT
46744: IFFALSE 46748
// exit ;
46746: GO 46813
// result := 0 ;
46748: LD_ADDR_VAR 0 2
46752: PUSH
46753: LD_INT 0
46755: ST_TO_ADDR
// if GetTaskList ( sci ) then
46756: LD_VAR 0 1
46760: PPUSH
46761: CALL_OW 437
46765: IFFALSE 46813
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46767: LD_VAR 0 1
46771: PPUSH
46772: CALL_OW 437
46776: PUSH
46777: LD_INT 1
46779: ARRAY
46780: PUSH
46781: LD_INT 1
46783: ARRAY
46784: PUSH
46785: LD_STRING l
46787: EQUAL
46788: IFFALSE 46813
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46790: LD_ADDR_VAR 0 2
46794: PUSH
46795: LD_VAR 0 1
46799: PPUSH
46800: CALL_OW 437
46804: PUSH
46805: LD_INT 1
46807: ARRAY
46808: PUSH
46809: LD_INT 4
46811: ARRAY
46812: ST_TO_ADDR
// end ;
46813: LD_VAR 0 2
46817: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46818: LD_INT 0
46820: PPUSH
46821: PPUSH
46822: PPUSH
46823: PPUSH
// if not base_units then
46824: LD_VAR 0 1
46828: NOT
46829: IFFALSE 46833
// exit ;
46831: GO 46920
// result := false ;
46833: LD_ADDR_VAR 0 2
46837: PUSH
46838: LD_INT 0
46840: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46841: LD_ADDR_VAR 0 5
46845: PUSH
46846: LD_VAR 0 1
46850: PPUSH
46851: LD_INT 21
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PPUSH
46861: CALL_OW 72
46865: ST_TO_ADDR
// if not tmp then
46866: LD_VAR 0 5
46870: NOT
46871: IFFALSE 46875
// exit ;
46873: GO 46920
// for i in tmp do
46875: LD_ADDR_VAR 0 3
46879: PUSH
46880: LD_VAR 0 5
46884: PUSH
46885: FOR_IN
46886: IFFALSE 46918
// begin result := EnemyInRange ( i , 22 ) ;
46888: LD_ADDR_VAR 0 2
46892: PUSH
46893: LD_VAR 0 3
46897: PPUSH
46898: LD_INT 22
46900: PPUSH
46901: CALL 45156 0 2
46905: ST_TO_ADDR
// if result then
46906: LD_VAR 0 2
46910: IFFALSE 46916
// exit ;
46912: POP
46913: POP
46914: GO 46920
// end ;
46916: GO 46885
46918: POP
46919: POP
// end ;
46920: LD_VAR 0 2
46924: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
46925: LD_INT 0
46927: PPUSH
46928: PPUSH
// if not units then
46929: LD_VAR 0 1
46933: NOT
46934: IFFALSE 46938
// exit ;
46936: GO 47008
// result := [ ] ;
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: EMPTY
46944: ST_TO_ADDR
// for i in units do
46945: LD_ADDR_VAR 0 4
46949: PUSH
46950: LD_VAR 0 1
46954: PUSH
46955: FOR_IN
46956: IFFALSE 47006
// if GetTag ( i ) = tag then
46958: LD_VAR 0 4
46962: PPUSH
46963: CALL_OW 110
46967: PUSH
46968: LD_VAR 0 2
46972: EQUAL
46973: IFFALSE 47004
// result := Insert ( result , result + 1 , i ) ;
46975: LD_ADDR_VAR 0 3
46979: PUSH
46980: LD_VAR 0 3
46984: PPUSH
46985: LD_VAR 0 3
46989: PUSH
46990: LD_INT 1
46992: PLUS
46993: PPUSH
46994: LD_VAR 0 4
46998: PPUSH
46999: CALL_OW 2
47003: ST_TO_ADDR
47004: GO 46955
47006: POP
47007: POP
// end ;
47008: LD_VAR 0 3
47012: RET
// export function IsDriver ( un ) ; begin
47013: LD_INT 0
47015: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47016: LD_ADDR_VAR 0 2
47020: PUSH
47021: LD_VAR 0 1
47025: PUSH
47026: LD_INT 55
47028: PUSH
47029: EMPTY
47030: LIST
47031: PPUSH
47032: CALL_OW 69
47036: IN
47037: ST_TO_ADDR
// end ;
47038: LD_VAR 0 2
47042: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47043: LD_INT 0
47045: PPUSH
47046: PPUSH
// list := [ ] ;
47047: LD_ADDR_VAR 0 5
47051: PUSH
47052: EMPTY
47053: ST_TO_ADDR
// case d of 0 :
47054: LD_VAR 0 3
47058: PUSH
47059: LD_INT 0
47061: DOUBLE
47062: EQUAL
47063: IFTRUE 47067
47065: GO 47200
47067: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47068: LD_ADDR_VAR 0 5
47072: PUSH
47073: LD_VAR 0 1
47077: PUSH
47078: LD_INT 4
47080: MINUS
47081: PUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 4
47089: MINUS
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: LIST
47098: PUSH
47099: LD_VAR 0 1
47103: PUSH
47104: LD_INT 3
47106: MINUS
47107: PUSH
47108: LD_VAR 0 2
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: PUSH
47121: LD_VAR 0 1
47125: PUSH
47126: LD_INT 4
47128: PLUS
47129: PUSH
47130: LD_VAR 0 2
47134: PUSH
47135: LD_INT 4
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: PUSH
47143: LD_VAR 0 1
47147: PUSH
47148: LD_INT 3
47150: PLUS
47151: PUSH
47152: LD_VAR 0 2
47156: PUSH
47157: LD_INT 3
47159: PLUS
47160: PUSH
47161: LD_INT 5
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: LD_VAR 0 1
47173: PUSH
47174: LD_VAR 0 2
47178: PUSH
47179: LD_INT 4
47181: PLUS
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// end ; 1 :
47198: GO 47898
47200: LD_INT 1
47202: DOUBLE
47203: EQUAL
47204: IFTRUE 47208
47206: GO 47341
47208: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47209: LD_ADDR_VAR 0 5
47213: PUSH
47214: LD_VAR 0 1
47218: PUSH
47219: LD_VAR 0 2
47223: PUSH
47224: LD_INT 4
47226: MINUS
47227: PUSH
47228: LD_INT 3
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: PUSH
47236: LD_VAR 0 1
47240: PUSH
47241: LD_INT 3
47243: MINUS
47244: PUSH
47245: LD_VAR 0 2
47249: PUSH
47250: LD_INT 3
47252: MINUS
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: PUSH
47262: LD_VAR 0 1
47266: PUSH
47267: LD_INT 4
47269: MINUS
47270: PUSH
47271: LD_VAR 0 2
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: LD_VAR 0 2
47293: PUSH
47294: LD_INT 3
47296: PLUS
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_VAR 0 1
47310: PUSH
47311: LD_INT 4
47313: PLUS
47314: PUSH
47315: LD_VAR 0 2
47319: PUSH
47320: LD_INT 4
47322: PLUS
47323: PUSH
47324: LD_INT 5
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// end ; 2 :
47339: GO 47898
47341: LD_INT 2
47343: DOUBLE
47344: EQUAL
47345: IFTRUE 47349
47347: GO 47478
47349: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47350: LD_ADDR_VAR 0 5
47354: PUSH
47355: LD_VAR 0 1
47359: PUSH
47360: LD_VAR 0 2
47364: PUSH
47365: LD_INT 3
47367: MINUS
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: PUSH
47377: LD_VAR 0 1
47381: PUSH
47382: LD_INT 4
47384: PLUS
47385: PUSH
47386: LD_VAR 0 2
47390: PUSH
47391: LD_INT 4
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: PUSH
47399: LD_VAR 0 1
47403: PUSH
47404: LD_VAR 0 2
47408: PUSH
47409: LD_INT 4
47411: PLUS
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: PUSH
47421: LD_VAR 0 1
47425: PUSH
47426: LD_INT 3
47428: MINUS
47429: PUSH
47430: LD_VAR 0 2
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: PUSH
47443: LD_VAR 0 1
47447: PUSH
47448: LD_INT 4
47450: MINUS
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_INT 4
47459: MINUS
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// end ; 3 :
47476: GO 47898
47478: LD_INT 3
47480: DOUBLE
47481: EQUAL
47482: IFTRUE 47486
47484: GO 47619
47486: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47487: LD_ADDR_VAR 0 5
47491: PUSH
47492: LD_VAR 0 1
47496: PUSH
47497: LD_INT 3
47499: PLUS
47500: PUSH
47501: LD_VAR 0 2
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: PUSH
47514: LD_VAR 0 1
47518: PUSH
47519: LD_INT 4
47521: PLUS
47522: PUSH
47523: LD_VAR 0 2
47527: PUSH
47528: LD_INT 4
47530: PLUS
47531: PUSH
47532: LD_INT 5
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: LIST
47539: PUSH
47540: LD_VAR 0 1
47544: PUSH
47545: LD_INT 4
47547: MINUS
47548: PUSH
47549: LD_VAR 0 2
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: PUSH
47562: LD_VAR 0 1
47566: PUSH
47567: LD_VAR 0 2
47571: PUSH
47572: LD_INT 4
47574: MINUS
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: PUSH
47584: LD_VAR 0 1
47588: PUSH
47589: LD_INT 3
47591: MINUS
47592: PUSH
47593: LD_VAR 0 2
47597: PUSH
47598: LD_INT 3
47600: MINUS
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// end ; 4 :
47617: GO 47898
47619: LD_INT 4
47621: DOUBLE
47622: EQUAL
47623: IFTRUE 47627
47625: GO 47760
47627: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47628: LD_ADDR_VAR 0 5
47632: PUSH
47633: LD_VAR 0 1
47637: PUSH
47638: LD_VAR 0 2
47642: PUSH
47643: LD_INT 4
47645: PLUS
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: PUSH
47655: LD_VAR 0 1
47659: PUSH
47660: LD_INT 3
47662: PLUS
47663: PUSH
47664: LD_VAR 0 2
47668: PUSH
47669: LD_INT 3
47671: PLUS
47672: PUSH
47673: LD_INT 5
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: PUSH
47681: LD_VAR 0 1
47685: PUSH
47686: LD_INT 4
47688: PLUS
47689: PUSH
47690: LD_VAR 0 2
47694: PUSH
47695: LD_INT 4
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: LD_VAR 0 1
47707: PUSH
47708: LD_VAR 0 2
47712: PUSH
47713: LD_INT 3
47715: MINUS
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: PUSH
47725: LD_VAR 0 1
47729: PUSH
47730: LD_INT 4
47732: MINUS
47733: PUSH
47734: LD_VAR 0 2
47738: PUSH
47739: LD_INT 4
47741: MINUS
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: ST_TO_ADDR
// end ; 5 :
47758: GO 47898
47760: LD_INT 5
47762: DOUBLE
47763: EQUAL
47764: IFTRUE 47768
47766: GO 47897
47768: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47769: LD_ADDR_VAR 0 5
47773: PUSH
47774: LD_VAR 0 1
47778: PUSH
47779: LD_INT 4
47781: MINUS
47782: PUSH
47783: LD_VAR 0 2
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: PUSH
47796: LD_VAR 0 1
47800: PUSH
47801: LD_VAR 0 2
47805: PUSH
47806: LD_INT 4
47808: MINUS
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: PUSH
47818: LD_VAR 0 1
47822: PUSH
47823: LD_INT 4
47825: PLUS
47826: PUSH
47827: LD_VAR 0 2
47831: PUSH
47832: LD_INT 4
47834: PLUS
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: PUSH
47844: LD_VAR 0 1
47848: PUSH
47849: LD_INT 3
47851: PLUS
47852: PUSH
47853: LD_VAR 0 2
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: LD_VAR 0 1
47870: PUSH
47871: LD_VAR 0 2
47875: PUSH
47876: LD_INT 3
47878: PLUS
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// end ; end ;
47895: GO 47898
47897: POP
// result := list ;
47898: LD_ADDR_VAR 0 4
47902: PUSH
47903: LD_VAR 0 5
47907: ST_TO_ADDR
// end ;
47908: LD_VAR 0 4
47912: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47913: LD_INT 0
47915: PPUSH
47916: PPUSH
47917: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47918: LD_VAR 0 1
47922: NOT
47923: PUSH
47924: LD_VAR 0 2
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: LD_INT 4
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: IN
47947: NOT
47948: OR
47949: IFFALSE 47953
// exit ;
47951: GO 48045
// tmp := [ ] ;
47953: LD_ADDR_VAR 0 5
47957: PUSH
47958: EMPTY
47959: ST_TO_ADDR
// for i in units do
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: LD_VAR 0 1
47969: PUSH
47970: FOR_IN
47971: IFFALSE 48014
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
47973: LD_ADDR_VAR 0 5
47977: PUSH
47978: LD_VAR 0 5
47982: PPUSH
47983: LD_VAR 0 5
47987: PUSH
47988: LD_INT 1
47990: PLUS
47991: PPUSH
47992: LD_VAR 0 4
47996: PPUSH
47997: LD_VAR 0 2
48001: PPUSH
48002: CALL_OW 259
48006: PPUSH
48007: CALL_OW 2
48011: ST_TO_ADDR
48012: GO 47970
48014: POP
48015: POP
// if not tmp then
48016: LD_VAR 0 5
48020: NOT
48021: IFFALSE 48025
// exit ;
48023: GO 48045
// result := SortListByListDesc ( units , tmp ) ;
48025: LD_ADDR_VAR 0 3
48029: PUSH
48030: LD_VAR 0 1
48034: PPUSH
48035: LD_VAR 0 5
48039: PPUSH
48040: CALL_OW 77
48044: ST_TO_ADDR
// end ;
48045: LD_VAR 0 3
48049: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48050: LD_INT 0
48052: PPUSH
48053: PPUSH
48054: PPUSH
// x := GetX ( building ) ;
48055: LD_ADDR_VAR 0 4
48059: PUSH
48060: LD_VAR 0 2
48064: PPUSH
48065: CALL_OW 250
48069: ST_TO_ADDR
// y := GetY ( building ) ;
48070: LD_ADDR_VAR 0 5
48074: PUSH
48075: LD_VAR 0 2
48079: PPUSH
48080: CALL_OW 251
48084: ST_TO_ADDR
// if GetTaskList ( unit ) then
48085: LD_VAR 0 1
48089: PPUSH
48090: CALL_OW 437
48094: IFFALSE 48189
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48096: LD_STRING e
48098: PUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: CALL_OW 437
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: PUSH
48113: LD_INT 1
48115: ARRAY
48116: EQUAL
48117: PUSH
48118: LD_VAR 0 4
48122: PUSH
48123: LD_VAR 0 1
48127: PPUSH
48128: CALL_OW 437
48132: PUSH
48133: LD_INT 1
48135: ARRAY
48136: PUSH
48137: LD_INT 2
48139: ARRAY
48140: EQUAL
48141: AND
48142: PUSH
48143: LD_VAR 0 5
48147: PUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: CALL_OW 437
48157: PUSH
48158: LD_INT 1
48160: ARRAY
48161: PUSH
48162: LD_INT 3
48164: ARRAY
48165: EQUAL
48166: AND
48167: IFFALSE 48179
// result := true else
48169: LD_ADDR_VAR 0 3
48173: PUSH
48174: LD_INT 1
48176: ST_TO_ADDR
48177: GO 48187
// result := false ;
48179: LD_ADDR_VAR 0 3
48183: PUSH
48184: LD_INT 0
48186: ST_TO_ADDR
// end else
48187: GO 48197
// result := false ;
48189: LD_ADDR_VAR 0 3
48193: PUSH
48194: LD_INT 0
48196: ST_TO_ADDR
// end ;
48197: LD_VAR 0 3
48201: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48202: LD_INT 0
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
// if not unit or not area then
48208: LD_VAR 0 1
48212: NOT
48213: PUSH
48214: LD_VAR 0 2
48218: NOT
48219: OR
48220: IFFALSE 48224
// exit ;
48222: GO 48388
// tmp := AreaToList ( area , i ) ;
48224: LD_ADDR_VAR 0 6
48228: PUSH
48229: LD_VAR 0 2
48233: PPUSH
48234: LD_VAR 0 5
48238: PPUSH
48239: CALL_OW 517
48243: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48244: LD_ADDR_VAR 0 5
48248: PUSH
48249: DOUBLE
48250: LD_INT 1
48252: DEC
48253: ST_TO_ADDR
48254: LD_VAR 0 6
48258: PUSH
48259: LD_INT 1
48261: ARRAY
48262: PUSH
48263: FOR_TO
48264: IFFALSE 48386
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48266: LD_ADDR_VAR 0 7
48270: PUSH
48271: LD_VAR 0 6
48275: PUSH
48276: LD_INT 1
48278: ARRAY
48279: PUSH
48280: LD_VAR 0 5
48284: ARRAY
48285: PUSH
48286: LD_VAR 0 6
48290: PUSH
48291: LD_INT 2
48293: ARRAY
48294: PUSH
48295: LD_VAR 0 5
48299: ARRAY
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48305: LD_VAR 0 7
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: PPUSH
48314: LD_VAR 0 7
48318: PUSH
48319: LD_INT 2
48321: ARRAY
48322: PPUSH
48323: CALL_OW 428
48327: PUSH
48328: LD_INT 0
48330: EQUAL
48331: IFFALSE 48384
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48333: LD_VAR 0 1
48337: PPUSH
48338: LD_VAR 0 7
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: PPUSH
48347: LD_VAR 0 7
48351: PUSH
48352: LD_INT 2
48354: ARRAY
48355: PPUSH
48356: LD_VAR 0 3
48360: PPUSH
48361: CALL_OW 48
// result := IsPlaced ( unit ) ;
48365: LD_ADDR_VAR 0 4
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 305
48379: ST_TO_ADDR
// exit ;
48380: POP
48381: POP
48382: GO 48388
// end ; end ;
48384: GO 48263
48386: POP
48387: POP
// end ;
48388: LD_VAR 0 4
48392: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48393: LD_INT 0
48395: PPUSH
48396: PPUSH
48397: PPUSH
// if not side or side > 8 then
48398: LD_VAR 0 1
48402: NOT
48403: PUSH
48404: LD_VAR 0 1
48408: PUSH
48409: LD_INT 8
48411: GREATER
48412: OR
48413: IFFALSE 48417
// exit ;
48415: GO 48604
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48417: LD_ADDR_VAR 0 4
48421: PUSH
48422: LD_INT 22
48424: PUSH
48425: LD_VAR 0 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 21
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PPUSH
48448: CALL_OW 69
48452: ST_TO_ADDR
// if not tmp then
48453: LD_VAR 0 4
48457: NOT
48458: IFFALSE 48462
// exit ;
48460: GO 48604
// enable_addtolog := true ;
48462: LD_ADDR_OWVAR 81
48466: PUSH
48467: LD_INT 1
48469: ST_TO_ADDR
// AddToLog ( [ ) ;
48470: LD_STRING [
48472: PPUSH
48473: CALL_OW 561
// for i in tmp do
48477: LD_ADDR_VAR 0 3
48481: PUSH
48482: LD_VAR 0 4
48486: PUSH
48487: FOR_IN
48488: IFFALSE 48595
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48490: LD_STRING [
48492: PUSH
48493: LD_VAR 0 3
48497: PPUSH
48498: CALL_OW 266
48502: STR
48503: PUSH
48504: LD_STRING , 
48506: STR
48507: PUSH
48508: LD_VAR 0 3
48512: PPUSH
48513: CALL_OW 250
48517: STR
48518: PUSH
48519: LD_STRING , 
48521: STR
48522: PUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: CALL_OW 251
48532: STR
48533: PUSH
48534: LD_STRING , 
48536: STR
48537: PUSH
48538: LD_VAR 0 3
48542: PPUSH
48543: CALL_OW 254
48547: STR
48548: PUSH
48549: LD_STRING , 
48551: STR
48552: PUSH
48553: LD_VAR 0 3
48557: PPUSH
48558: LD_INT 1
48560: PPUSH
48561: CALL_OW 268
48565: STR
48566: PUSH
48567: LD_STRING , 
48569: STR
48570: PUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: LD_INT 2
48578: PPUSH
48579: CALL_OW 268
48583: STR
48584: PUSH
48585: LD_STRING ],
48587: STR
48588: PPUSH
48589: CALL_OW 561
// end ;
48593: GO 48487
48595: POP
48596: POP
// AddToLog ( ]; ) ;
48597: LD_STRING ];
48599: PPUSH
48600: CALL_OW 561
// end ;
48604: LD_VAR 0 2
48608: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48609: LD_INT 0
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
// if not area or not rate or not max then
48616: LD_VAR 0 1
48620: NOT
48621: PUSH
48622: LD_VAR 0 2
48626: NOT
48627: OR
48628: PUSH
48629: LD_VAR 0 4
48633: NOT
48634: OR
48635: IFFALSE 48639
// exit ;
48637: GO 48831
// while 1 do
48639: LD_INT 1
48641: IFFALSE 48831
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48643: LD_ADDR_VAR 0 9
48647: PUSH
48648: LD_VAR 0 1
48652: PPUSH
48653: LD_INT 1
48655: PPUSH
48656: CALL_OW 287
48660: PUSH
48661: LD_INT 10
48663: MUL
48664: ST_TO_ADDR
// r := rate / 10 ;
48665: LD_ADDR_VAR 0 7
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_INT 10
48677: DIVREAL
48678: ST_TO_ADDR
// time := 1 1$00 ;
48679: LD_ADDR_VAR 0 8
48683: PUSH
48684: LD_INT 2100
48686: ST_TO_ADDR
// if amount < min then
48687: LD_VAR 0 9
48691: PUSH
48692: LD_VAR 0 3
48696: LESS
48697: IFFALSE 48715
// r := r * 2 else
48699: LD_ADDR_VAR 0 7
48703: PUSH
48704: LD_VAR 0 7
48708: PUSH
48709: LD_INT 2
48711: MUL
48712: ST_TO_ADDR
48713: GO 48741
// if amount > max then
48715: LD_VAR 0 9
48719: PUSH
48720: LD_VAR 0 4
48724: GREATER
48725: IFFALSE 48741
// r := r / 2 ;
48727: LD_ADDR_VAR 0 7
48731: PUSH
48732: LD_VAR 0 7
48736: PUSH
48737: LD_INT 2
48739: DIVREAL
48740: ST_TO_ADDR
// time := time / r ;
48741: LD_ADDR_VAR 0 8
48745: PUSH
48746: LD_VAR 0 8
48750: PUSH
48751: LD_VAR 0 7
48755: DIVREAL
48756: ST_TO_ADDR
// if time < 0 then
48757: LD_VAR 0 8
48761: PUSH
48762: LD_INT 0
48764: LESS
48765: IFFALSE 48782
// time := time * - 1 ;
48767: LD_ADDR_VAR 0 8
48771: PUSH
48772: LD_VAR 0 8
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: MUL
48781: ST_TO_ADDR
// wait ( time ) ;
48782: LD_VAR 0 8
48786: PPUSH
48787: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
48791: LD_INT 35
48793: PPUSH
48794: LD_INT 875
48796: PPUSH
48797: CALL_OW 12
48801: PPUSH
48802: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48806: LD_INT 1
48808: PPUSH
48809: LD_INT 5
48811: PPUSH
48812: CALL_OW 12
48816: PPUSH
48817: LD_VAR 0 1
48821: PPUSH
48822: LD_INT 1
48824: PPUSH
48825: CALL_OW 55
// end ;
48829: GO 48639
// end ;
48831: LD_VAR 0 5
48835: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48836: LD_INT 0
48838: PPUSH
48839: PPUSH
48840: PPUSH
48841: PPUSH
48842: PPUSH
48843: PPUSH
48844: PPUSH
48845: PPUSH
// if not turrets or not factories then
48846: LD_VAR 0 1
48850: NOT
48851: PUSH
48852: LD_VAR 0 2
48856: NOT
48857: OR
48858: IFFALSE 48862
// exit ;
48860: GO 49169
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48862: LD_ADDR_VAR 0 10
48866: PUSH
48867: LD_INT 5
48869: PUSH
48870: LD_INT 6
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 4
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 5
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 24
48904: PUSH
48905: LD_INT 25
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 23
48914: PUSH
48915: LD_INT 27
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 42
48928: PUSH
48929: LD_INT 43
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 44
48938: PUSH
48939: LD_INT 46
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 45
48948: PUSH
48949: LD_INT 47
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: ST_TO_ADDR
// result := [ ] ;
48966: LD_ADDR_VAR 0 3
48970: PUSH
48971: EMPTY
48972: ST_TO_ADDR
// for i in turrets do
48973: LD_ADDR_VAR 0 4
48977: PUSH
48978: LD_VAR 0 1
48982: PUSH
48983: FOR_IN
48984: IFFALSE 49167
// begin nat := GetNation ( i ) ;
48986: LD_ADDR_VAR 0 7
48990: PUSH
48991: LD_VAR 0 4
48995: PPUSH
48996: CALL_OW 248
49000: ST_TO_ADDR
// weapon := 0 ;
49001: LD_ADDR_VAR 0 8
49005: PUSH
49006: LD_INT 0
49008: ST_TO_ADDR
// if not nat then
49009: LD_VAR 0 7
49013: NOT
49014: IFFALSE 49018
// continue ;
49016: GO 48983
// for j in list [ nat ] do
49018: LD_ADDR_VAR 0 5
49022: PUSH
49023: LD_VAR 0 10
49027: PUSH
49028: LD_VAR 0 7
49032: ARRAY
49033: PUSH
49034: FOR_IN
49035: IFFALSE 49076
// if GetBWeapon ( i ) = j [ 1 ] then
49037: LD_VAR 0 4
49041: PPUSH
49042: CALL_OW 269
49046: PUSH
49047: LD_VAR 0 5
49051: PUSH
49052: LD_INT 1
49054: ARRAY
49055: EQUAL
49056: IFFALSE 49074
// begin weapon := j [ 2 ] ;
49058: LD_ADDR_VAR 0 8
49062: PUSH
49063: LD_VAR 0 5
49067: PUSH
49068: LD_INT 2
49070: ARRAY
49071: ST_TO_ADDR
// break ;
49072: GO 49076
// end ;
49074: GO 49034
49076: POP
49077: POP
// if not weapon then
49078: LD_VAR 0 8
49082: NOT
49083: IFFALSE 49087
// continue ;
49085: GO 48983
// for k in factories do
49087: LD_ADDR_VAR 0 6
49091: PUSH
49092: LD_VAR 0 2
49096: PUSH
49097: FOR_IN
49098: IFFALSE 49163
// begin weapons := AvailableWeaponList ( k ) ;
49100: LD_ADDR_VAR 0 9
49104: PUSH
49105: LD_VAR 0 6
49109: PPUSH
49110: CALL_OW 478
49114: ST_TO_ADDR
// if not weapons then
49115: LD_VAR 0 9
49119: NOT
49120: IFFALSE 49124
// continue ;
49122: GO 49097
// if weapon in weapons then
49124: LD_VAR 0 8
49128: PUSH
49129: LD_VAR 0 9
49133: IN
49134: IFFALSE 49161
// begin result := [ i , weapon ] ;
49136: LD_ADDR_VAR 0 3
49140: PUSH
49141: LD_VAR 0 4
49145: PUSH
49146: LD_VAR 0 8
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: ST_TO_ADDR
// exit ;
49155: POP
49156: POP
49157: POP
49158: POP
49159: GO 49169
// end ; end ;
49161: GO 49097
49163: POP
49164: POP
// end ;
49165: GO 48983
49167: POP
49168: POP
// end ;
49169: LD_VAR 0 3
49173: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49174: LD_INT 0
49176: PPUSH
// if not side or side > 8 then
49177: LD_VAR 0 3
49181: NOT
49182: PUSH
49183: LD_VAR 0 3
49187: PUSH
49188: LD_INT 8
49190: GREATER
49191: OR
49192: IFFALSE 49196
// exit ;
49194: GO 49255
// if not range then
49196: LD_VAR 0 4
49200: NOT
49201: IFFALSE 49212
// range := - 12 ;
49203: LD_ADDR_VAR 0 4
49207: PUSH
49208: LD_INT 12
49210: NEG
49211: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49212: LD_VAR 0 1
49216: PPUSH
49217: LD_VAR 0 2
49221: PPUSH
49222: LD_VAR 0 3
49226: PPUSH
49227: LD_VAR 0 4
49231: PPUSH
49232: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49236: LD_VAR 0 1
49240: PPUSH
49241: LD_VAR 0 2
49245: PPUSH
49246: LD_VAR 0 3
49250: PPUSH
49251: CALL_OW 331
// end ;
49255: LD_VAR 0 5
49259: RET
// export function Video ( mode ) ; begin
49260: LD_INT 0
49262: PPUSH
// ingame_video = mode ;
49263: LD_ADDR_OWVAR 52
49267: PUSH
49268: LD_VAR 0 1
49272: ST_TO_ADDR
// interface_hidden = mode ;
49273: LD_ADDR_OWVAR 54
49277: PUSH
49278: LD_VAR 0 1
49282: ST_TO_ADDR
// end ;
49283: LD_VAR 0 2
49287: RET
// export function Join ( array , element ) ; begin
49288: LD_INT 0
49290: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49291: LD_ADDR_VAR 0 3
49295: PUSH
49296: LD_VAR 0 1
49300: PPUSH
49301: LD_VAR 0 1
49305: PUSH
49306: LD_INT 1
49308: PLUS
49309: PPUSH
49310: LD_VAR 0 2
49314: PPUSH
49315: CALL_OW 1
49319: ST_TO_ADDR
// end ;
49320: LD_VAR 0 3
49324: RET
// export function JoinUnion ( array , element ) ; begin
49325: LD_INT 0
49327: PPUSH
// result := array union element ;
49328: LD_ADDR_VAR 0 3
49332: PUSH
49333: LD_VAR 0 1
49337: PUSH
49338: LD_VAR 0 2
49342: UNION
49343: ST_TO_ADDR
// end ;
49344: LD_VAR 0 3
49348: RET
// export function GetBehemoths ( side ) ; begin
49349: LD_INT 0
49351: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49352: LD_ADDR_VAR 0 2
49356: PUSH
49357: LD_INT 22
49359: PUSH
49360: LD_VAR 0 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 31
49371: PUSH
49372: LD_INT 25
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PPUSH
49383: CALL_OW 69
49387: ST_TO_ADDR
// end ;
49388: LD_VAR 0 2
49392: RET
// export function Shuffle ( array ) ; var i , index ; begin
49393: LD_INT 0
49395: PPUSH
49396: PPUSH
49397: PPUSH
// result := [ ] ;
49398: LD_ADDR_VAR 0 2
49402: PUSH
49403: EMPTY
49404: ST_TO_ADDR
// if not array then
49405: LD_VAR 0 1
49409: NOT
49410: IFFALSE 49414
// exit ;
49412: GO 49513
// Randomize ;
49414: CALL_OW 10
// for i = array downto 1 do
49418: LD_ADDR_VAR 0 3
49422: PUSH
49423: DOUBLE
49424: LD_VAR 0 1
49428: INC
49429: ST_TO_ADDR
49430: LD_INT 1
49432: PUSH
49433: FOR_DOWNTO
49434: IFFALSE 49511
// begin index := rand ( 1 , array ) ;
49436: LD_ADDR_VAR 0 4
49440: PUSH
49441: LD_INT 1
49443: PPUSH
49444: LD_VAR 0 1
49448: PPUSH
49449: CALL_OW 12
49453: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49454: LD_ADDR_VAR 0 2
49458: PUSH
49459: LD_VAR 0 2
49463: PPUSH
49464: LD_VAR 0 2
49468: PUSH
49469: LD_INT 1
49471: PLUS
49472: PPUSH
49473: LD_VAR 0 1
49477: PUSH
49478: LD_VAR 0 4
49482: ARRAY
49483: PPUSH
49484: CALL_OW 2
49488: ST_TO_ADDR
// array := Delete ( array , index ) ;
49489: LD_ADDR_VAR 0 1
49493: PUSH
49494: LD_VAR 0 1
49498: PPUSH
49499: LD_VAR 0 4
49503: PPUSH
49504: CALL_OW 3
49508: ST_TO_ADDR
// end ;
49509: GO 49433
49511: POP
49512: POP
// end ;
49513: LD_VAR 0 2
49517: RET
// export function GetBaseMaterials ( base ) ; begin
49518: LD_INT 0
49520: PPUSH
// result := [ 0 , 0 , 0 ] ;
49521: LD_ADDR_VAR 0 2
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// if not base then
49540: LD_VAR 0 1
49544: NOT
49545: IFFALSE 49549
// exit ;
49547: GO 49598
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49549: LD_ADDR_VAR 0 2
49553: PUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: LD_INT 1
49561: PPUSH
49562: CALL_OW 275
49566: PUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: LD_INT 2
49574: PPUSH
49575: CALL_OW 275
49579: PUSH
49580: LD_VAR 0 1
49584: PPUSH
49585: LD_INT 3
49587: PPUSH
49588: CALL_OW 275
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// end ;
49598: LD_VAR 0 2
49602: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49603: LD_INT 0
49605: PPUSH
49606: PPUSH
// result := array ;
49607: LD_ADDR_VAR 0 3
49611: PUSH
49612: LD_VAR 0 1
49616: ST_TO_ADDR
// if size > 0 then
49617: LD_VAR 0 2
49621: PUSH
49622: LD_INT 0
49624: GREATER
49625: IFFALSE 49671
// for i := array downto size do
49627: LD_ADDR_VAR 0 4
49631: PUSH
49632: DOUBLE
49633: LD_VAR 0 1
49637: INC
49638: ST_TO_ADDR
49639: LD_VAR 0 2
49643: PUSH
49644: FOR_DOWNTO
49645: IFFALSE 49669
// result := Delete ( result , result ) ;
49647: LD_ADDR_VAR 0 3
49651: PUSH
49652: LD_VAR 0 3
49656: PPUSH
49657: LD_VAR 0 3
49661: PPUSH
49662: CALL_OW 3
49666: ST_TO_ADDR
49667: GO 49644
49669: POP
49670: POP
// end ;
49671: LD_VAR 0 3
49675: RET
// export function ComExit ( unit ) ; var tmp ; begin
49676: LD_INT 0
49678: PPUSH
49679: PPUSH
// if not IsInUnit ( unit ) then
49680: LD_VAR 0 1
49684: PPUSH
49685: CALL_OW 310
49689: NOT
49690: IFFALSE 49694
// exit ;
49692: GO 49754
// tmp := IsInUnit ( unit ) ;
49694: LD_ADDR_VAR 0 3
49698: PUSH
49699: LD_VAR 0 1
49703: PPUSH
49704: CALL_OW 310
49708: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49709: LD_VAR 0 3
49713: PPUSH
49714: CALL_OW 247
49718: PUSH
49719: LD_INT 2
49721: EQUAL
49722: IFFALSE 49735
// ComExitVehicle ( unit ) else
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 121
49733: GO 49744
// ComExitBuilding ( unit ) ;
49735: LD_VAR 0 1
49739: PPUSH
49740: CALL_OW 122
// result := tmp ;
49744: LD_ADDR_VAR 0 2
49748: PUSH
49749: LD_VAR 0 3
49753: ST_TO_ADDR
// end ;
49754: LD_VAR 0 2
49758: RET
// export function ResetHc ; begin
49759: LD_INT 0
49761: PPUSH
// InitHc ;
49762: CALL_OW 19
// hc_importance := 0 ;
49766: LD_ADDR_OWVAR 32
49770: PUSH
49771: LD_INT 0
49773: ST_TO_ADDR
// end ; end_of_file
49774: LD_VAR 0 1
49778: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
49779: LD_INT 0
49781: PPUSH
// ru_radar := 98 ;
49782: LD_ADDR_EXP 48
49786: PUSH
49787: LD_INT 98
49789: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49790: LD_ADDR_EXP 49
49794: PUSH
49795: LD_INT 89
49797: ST_TO_ADDR
// us_hack := 99 ;
49798: LD_ADDR_EXP 50
49802: PUSH
49803: LD_INT 99
49805: ST_TO_ADDR
// us_artillery := 97 ;
49806: LD_ADDR_EXP 51
49810: PUSH
49811: LD_INT 97
49813: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49814: LD_ADDR_EXP 52
49818: PUSH
49819: LD_INT 91
49821: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
49822: LD_ADDR_EXP 53
49826: PUSH
49827: LD_INT 92
49829: ST_TO_ADDR
// tech_Artillery := 80 ;
49830: LD_ADDR_EXP 54
49834: PUSH
49835: LD_INT 80
49837: ST_TO_ADDR
// tech_RadMat := 81 ;
49838: LD_ADDR_EXP 55
49842: PUSH
49843: LD_INT 81
49845: ST_TO_ADDR
// tech_BasicTools := 82 ;
49846: LD_ADDR_EXP 56
49850: PUSH
49851: LD_INT 82
49853: ST_TO_ADDR
// tech_Cargo := 83 ;
49854: LD_ADDR_EXP 57
49858: PUSH
49859: LD_INT 83
49861: ST_TO_ADDR
// tech_Track := 84 ;
49862: LD_ADDR_EXP 58
49866: PUSH
49867: LD_INT 84
49869: ST_TO_ADDR
// tech_Crane := 85 ;
49870: LD_ADDR_EXP 59
49874: PUSH
49875: LD_INT 85
49877: ST_TO_ADDR
// tech_Bulldozer := 86 ;
49878: LD_ADDR_EXP 60
49882: PUSH
49883: LD_INT 86
49885: ST_TO_ADDR
// tech_Hovercraft := 87 ;
49886: LD_ADDR_EXP 61
49890: PUSH
49891: LD_INT 87
49893: ST_TO_ADDR
// end ;
49894: LD_VAR 0 1
49898: RET
// every 1 do
49899: GO 49901
49901: DISABLE
// InitGlobalVariables ; end_of_file
49902: CALL 49779 0 0
49906: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
49907: LD_INT 0
49909: PPUSH
49910: PPUSH
// skirmish := false ;
49911: LD_ADDR_EXP 62
49915: PUSH
49916: LD_INT 0
49918: ST_TO_ADDR
// debug_mc := false ;
49919: LD_ADDR_EXP 63
49923: PUSH
49924: LD_INT 0
49926: ST_TO_ADDR
// mc_bases := [ ] ;
49927: LD_ADDR_EXP 64
49931: PUSH
49932: EMPTY
49933: ST_TO_ADDR
// mc_sides := [ ] ;
49934: LD_ADDR_EXP 90
49938: PUSH
49939: EMPTY
49940: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49941: LD_ADDR_EXP 65
49945: PUSH
49946: EMPTY
49947: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49948: LD_ADDR_EXP 66
49952: PUSH
49953: EMPTY
49954: ST_TO_ADDR
// mc_need_heal := [ ] ;
49955: LD_ADDR_EXP 67
49959: PUSH
49960: EMPTY
49961: ST_TO_ADDR
// mc_healers := [ ] ;
49962: LD_ADDR_EXP 68
49966: PUSH
49967: EMPTY
49968: ST_TO_ADDR
// mc_build_list := [ ] ;
49969: LD_ADDR_EXP 69
49973: PUSH
49974: EMPTY
49975: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49976: LD_ADDR_EXP 96
49980: PUSH
49981: EMPTY
49982: ST_TO_ADDR
// mc_builders := [ ] ;
49983: LD_ADDR_EXP 70
49987: PUSH
49988: EMPTY
49989: ST_TO_ADDR
// mc_construct_list := [ ] ;
49990: LD_ADDR_EXP 71
49994: PUSH
49995: EMPTY
49996: ST_TO_ADDR
// mc_turret_list := [ ] ;
49997: LD_ADDR_EXP 72
50001: PUSH
50002: EMPTY
50003: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
50004: LD_ADDR_EXP 73
50008: PUSH
50009: EMPTY
50010: ST_TO_ADDR
// mc_miners := [ ] ;
50011: LD_ADDR_EXP 78
50015: PUSH
50016: EMPTY
50017: ST_TO_ADDR
// mc_mines := [ ] ;
50018: LD_ADDR_EXP 77
50022: PUSH
50023: EMPTY
50024: ST_TO_ADDR
// mc_minefields := [ ] ;
50025: LD_ADDR_EXP 79
50029: PUSH
50030: EMPTY
50031: ST_TO_ADDR
// mc_crates := [ ] ;
50032: LD_ADDR_EXP 80
50036: PUSH
50037: EMPTY
50038: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50039: LD_ADDR_EXP 81
50043: PUSH
50044: EMPTY
50045: ST_TO_ADDR
// mc_crates_area := [ ] ;
50046: LD_ADDR_EXP 82
50050: PUSH
50051: EMPTY
50052: ST_TO_ADDR
// mc_vehicles := [ ] ;
50053: LD_ADDR_EXP 83
50057: PUSH
50058: EMPTY
50059: ST_TO_ADDR
// mc_attack := [ ] ;
50060: LD_ADDR_EXP 84
50064: PUSH
50065: EMPTY
50066: ST_TO_ADDR
// mc_produce := [ ] ;
50067: LD_ADDR_EXP 85
50071: PUSH
50072: EMPTY
50073: ST_TO_ADDR
// mc_defender := [ ] ;
50074: LD_ADDR_EXP 86
50078: PUSH
50079: EMPTY
50080: ST_TO_ADDR
// mc_parking := [ ] ;
50081: LD_ADDR_EXP 88
50085: PUSH
50086: EMPTY
50087: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50088: LD_ADDR_EXP 74
50092: PUSH
50093: EMPTY
50094: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50095: LD_ADDR_EXP 76
50099: PUSH
50100: EMPTY
50101: ST_TO_ADDR
// mc_scan := [ ] ;
50102: LD_ADDR_EXP 87
50106: PUSH
50107: EMPTY
50108: ST_TO_ADDR
// mc_scan_area := [ ] ;
50109: LD_ADDR_EXP 89
50113: PUSH
50114: EMPTY
50115: ST_TO_ADDR
// mc_tech := [ ] ;
50116: LD_ADDR_EXP 91
50120: PUSH
50121: EMPTY
50122: ST_TO_ADDR
// mc_class := [ ] ;
50123: LD_ADDR_EXP 105
50127: PUSH
50128: EMPTY
50129: ST_TO_ADDR
// mc_class_case_use := [ ] ;
50130: LD_ADDR_EXP 106
50134: PUSH
50135: EMPTY
50136: ST_TO_ADDR
// end ;
50137: LD_VAR 0 1
50141: RET
// export function MC_Kill ( base ) ; begin
50142: LD_INT 0
50144: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
50145: LD_ADDR_EXP 64
50149: PUSH
50150: LD_EXP 64
50154: PPUSH
50155: LD_VAR 0 1
50159: PPUSH
50160: EMPTY
50161: PPUSH
50162: CALL_OW 1
50166: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50167: LD_ADDR_EXP 65
50171: PUSH
50172: LD_EXP 65
50176: PPUSH
50177: LD_VAR 0 1
50181: PPUSH
50182: EMPTY
50183: PPUSH
50184: CALL_OW 1
50188: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50189: LD_ADDR_EXP 66
50193: PUSH
50194: LD_EXP 66
50198: PPUSH
50199: LD_VAR 0 1
50203: PPUSH
50204: EMPTY
50205: PPUSH
50206: CALL_OW 1
50210: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50211: LD_ADDR_EXP 67
50215: PUSH
50216: LD_EXP 67
50220: PPUSH
50221: LD_VAR 0 1
50225: PPUSH
50226: EMPTY
50227: PPUSH
50228: CALL_OW 1
50232: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50233: LD_ADDR_EXP 68
50237: PUSH
50238: LD_EXP 68
50242: PPUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: EMPTY
50249: PPUSH
50250: CALL_OW 1
50254: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50255: LD_ADDR_EXP 69
50259: PUSH
50260: LD_EXP 69
50264: PPUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: EMPTY
50271: PPUSH
50272: CALL_OW 1
50276: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50277: LD_ADDR_EXP 70
50281: PUSH
50282: LD_EXP 70
50286: PPUSH
50287: LD_VAR 0 1
50291: PPUSH
50292: EMPTY
50293: PPUSH
50294: CALL_OW 1
50298: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50299: LD_ADDR_EXP 71
50303: PUSH
50304: LD_EXP 71
50308: PPUSH
50309: LD_VAR 0 1
50313: PPUSH
50314: EMPTY
50315: PPUSH
50316: CALL_OW 1
50320: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50321: LD_ADDR_EXP 72
50325: PUSH
50326: LD_EXP 72
50330: PPUSH
50331: LD_VAR 0 1
50335: PPUSH
50336: EMPTY
50337: PPUSH
50338: CALL_OW 1
50342: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50343: LD_ADDR_EXP 73
50347: PUSH
50348: LD_EXP 73
50352: PPUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: EMPTY
50359: PPUSH
50360: CALL_OW 1
50364: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50365: LD_ADDR_EXP 74
50369: PUSH
50370: LD_EXP 74
50374: PPUSH
50375: LD_VAR 0 1
50379: PPUSH
50380: EMPTY
50381: PPUSH
50382: CALL_OW 1
50386: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50387: LD_ADDR_EXP 75
50391: PUSH
50392: LD_EXP 75
50396: PPUSH
50397: LD_VAR 0 1
50401: PPUSH
50402: LD_INT 0
50404: PPUSH
50405: CALL_OW 1
50409: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50410: LD_ADDR_EXP 76
50414: PUSH
50415: LD_EXP 76
50419: PPUSH
50420: LD_VAR 0 1
50424: PPUSH
50425: EMPTY
50426: PPUSH
50427: CALL_OW 1
50431: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50432: LD_ADDR_EXP 77
50436: PUSH
50437: LD_EXP 77
50441: PPUSH
50442: LD_VAR 0 1
50446: PPUSH
50447: EMPTY
50448: PPUSH
50449: CALL_OW 1
50453: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50454: LD_ADDR_EXP 78
50458: PUSH
50459: LD_EXP 78
50463: PPUSH
50464: LD_VAR 0 1
50468: PPUSH
50469: EMPTY
50470: PPUSH
50471: CALL_OW 1
50475: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50476: LD_ADDR_EXP 79
50480: PUSH
50481: LD_EXP 79
50485: PPUSH
50486: LD_VAR 0 1
50490: PPUSH
50491: EMPTY
50492: PPUSH
50493: CALL_OW 1
50497: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50498: LD_ADDR_EXP 80
50502: PUSH
50503: LD_EXP 80
50507: PPUSH
50508: LD_VAR 0 1
50512: PPUSH
50513: EMPTY
50514: PPUSH
50515: CALL_OW 1
50519: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50520: LD_ADDR_EXP 81
50524: PUSH
50525: LD_EXP 81
50529: PPUSH
50530: LD_VAR 0 1
50534: PPUSH
50535: EMPTY
50536: PPUSH
50537: CALL_OW 1
50541: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50542: LD_ADDR_EXP 82
50546: PUSH
50547: LD_EXP 82
50551: PPUSH
50552: LD_VAR 0 1
50556: PPUSH
50557: EMPTY
50558: PPUSH
50559: CALL_OW 1
50563: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50564: LD_ADDR_EXP 83
50568: PUSH
50569: LD_EXP 83
50573: PPUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: EMPTY
50580: PPUSH
50581: CALL_OW 1
50585: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50586: LD_ADDR_EXP 84
50590: PUSH
50591: LD_EXP 84
50595: PPUSH
50596: LD_VAR 0 1
50600: PPUSH
50601: EMPTY
50602: PPUSH
50603: CALL_OW 1
50607: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50608: LD_ADDR_EXP 85
50612: PUSH
50613: LD_EXP 85
50617: PPUSH
50618: LD_VAR 0 1
50622: PPUSH
50623: EMPTY
50624: PPUSH
50625: CALL_OW 1
50629: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50630: LD_ADDR_EXP 86
50634: PUSH
50635: LD_EXP 86
50639: PPUSH
50640: LD_VAR 0 1
50644: PPUSH
50645: EMPTY
50646: PPUSH
50647: CALL_OW 1
50651: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50652: LD_ADDR_EXP 87
50656: PUSH
50657: LD_EXP 87
50661: PPUSH
50662: LD_VAR 0 1
50666: PPUSH
50667: EMPTY
50668: PPUSH
50669: CALL_OW 1
50673: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50674: LD_ADDR_EXP 88
50678: PUSH
50679: LD_EXP 88
50683: PPUSH
50684: LD_VAR 0 1
50688: PPUSH
50689: EMPTY
50690: PPUSH
50691: CALL_OW 1
50695: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50696: LD_ADDR_EXP 89
50700: PUSH
50701: LD_EXP 89
50705: PPUSH
50706: LD_VAR 0 1
50710: PPUSH
50711: EMPTY
50712: PPUSH
50713: CALL_OW 1
50717: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50718: LD_ADDR_EXP 91
50722: PUSH
50723: LD_EXP 91
50727: PPUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: EMPTY
50734: PPUSH
50735: CALL_OW 1
50739: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50740: LD_ADDR_EXP 93
50744: PUSH
50745: LD_EXP 93
50749: PPUSH
50750: LD_VAR 0 1
50754: PPUSH
50755: EMPTY
50756: PPUSH
50757: CALL_OW 1
50761: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50762: LD_ADDR_EXP 94
50766: PUSH
50767: LD_EXP 94
50771: PPUSH
50772: LD_VAR 0 1
50776: PPUSH
50777: EMPTY
50778: PPUSH
50779: CALL_OW 1
50783: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50784: LD_ADDR_EXP 95
50788: PUSH
50789: LD_EXP 95
50793: PPUSH
50794: LD_VAR 0 1
50798: PPUSH
50799: EMPTY
50800: PPUSH
50801: CALL_OW 1
50805: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50806: LD_ADDR_EXP 96
50810: PUSH
50811: LD_EXP 96
50815: PPUSH
50816: LD_VAR 0 1
50820: PPUSH
50821: EMPTY
50822: PPUSH
50823: CALL_OW 1
50827: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50828: LD_ADDR_EXP 97
50832: PUSH
50833: LD_EXP 97
50837: PPUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: EMPTY
50844: PPUSH
50845: CALL_OW 1
50849: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
50850: LD_ADDR_EXP 98
50854: PUSH
50855: LD_EXP 98
50859: PPUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: EMPTY
50866: PPUSH
50867: CALL_OW 1
50871: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
50872: LD_ADDR_EXP 99
50876: PUSH
50877: LD_EXP 99
50881: PPUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: EMPTY
50888: PPUSH
50889: CALL_OW 1
50893: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
50894: LD_ADDR_EXP 100
50898: PUSH
50899: LD_EXP 100
50903: PPUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: EMPTY
50910: PPUSH
50911: CALL_OW 1
50915: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
50916: LD_ADDR_EXP 101
50920: PUSH
50921: LD_EXP 101
50925: PPUSH
50926: LD_VAR 0 1
50930: PPUSH
50931: EMPTY
50932: PPUSH
50933: CALL_OW 1
50937: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
50938: LD_ADDR_EXP 102
50942: PUSH
50943: LD_EXP 102
50947: PPUSH
50948: LD_VAR 0 1
50952: PPUSH
50953: EMPTY
50954: PPUSH
50955: CALL_OW 1
50959: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50960: LD_ADDR_EXP 103
50964: PUSH
50965: LD_EXP 103
50969: PPUSH
50970: LD_VAR 0 1
50974: PPUSH
50975: EMPTY
50976: PPUSH
50977: CALL_OW 1
50981: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
50982: LD_ADDR_EXP 104
50986: PUSH
50987: LD_EXP 104
50991: PPUSH
50992: LD_VAR 0 1
50996: PPUSH
50997: EMPTY
50998: PPUSH
50999: CALL_OW 1
51003: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51004: LD_ADDR_EXP 105
51008: PUSH
51009: LD_EXP 105
51013: PPUSH
51014: LD_VAR 0 1
51018: PPUSH
51019: EMPTY
51020: PPUSH
51021: CALL_OW 1
51025: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51026: LD_ADDR_EXP 106
51030: PUSH
51031: LD_EXP 106
51035: PPUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: LD_INT 0
51043: PPUSH
51044: CALL_OW 1
51048: ST_TO_ADDR
// end ;
51049: LD_VAR 0 2
51053: RET
// export function MC_Add ( side , units ) ; var base ; begin
51054: LD_INT 0
51056: PPUSH
51057: PPUSH
// base := mc_bases + 1 ;
51058: LD_ADDR_VAR 0 4
51062: PUSH
51063: LD_EXP 64
51067: PUSH
51068: LD_INT 1
51070: PLUS
51071: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
51072: LD_ADDR_EXP 90
51076: PUSH
51077: LD_EXP 90
51081: PPUSH
51082: LD_VAR 0 4
51086: PPUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 1
51096: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
51097: LD_ADDR_EXP 64
51101: PUSH
51102: LD_EXP 64
51106: PPUSH
51107: LD_VAR 0 4
51111: PPUSH
51112: LD_VAR 0 2
51116: PPUSH
51117: CALL_OW 1
51121: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
51122: LD_ADDR_EXP 65
51126: PUSH
51127: LD_EXP 65
51131: PPUSH
51132: LD_VAR 0 4
51136: PPUSH
51137: EMPTY
51138: PPUSH
51139: CALL_OW 1
51143: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
51144: LD_ADDR_EXP 66
51148: PUSH
51149: LD_EXP 66
51153: PPUSH
51154: LD_VAR 0 4
51158: PPUSH
51159: EMPTY
51160: PPUSH
51161: CALL_OW 1
51165: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
51166: LD_ADDR_EXP 67
51170: PUSH
51171: LD_EXP 67
51175: PPUSH
51176: LD_VAR 0 4
51180: PPUSH
51181: EMPTY
51182: PPUSH
51183: CALL_OW 1
51187: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
51188: LD_ADDR_EXP 68
51192: PUSH
51193: LD_EXP 68
51197: PPUSH
51198: LD_VAR 0 4
51202: PPUSH
51203: EMPTY
51204: PPUSH
51205: CALL_OW 1
51209: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
51210: LD_ADDR_EXP 69
51214: PUSH
51215: LD_EXP 69
51219: PPUSH
51220: LD_VAR 0 4
51224: PPUSH
51225: EMPTY
51226: PPUSH
51227: CALL_OW 1
51231: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
51232: LD_ADDR_EXP 70
51236: PUSH
51237: LD_EXP 70
51241: PPUSH
51242: LD_VAR 0 4
51246: PPUSH
51247: EMPTY
51248: PPUSH
51249: CALL_OW 1
51253: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
51254: LD_ADDR_EXP 71
51258: PUSH
51259: LD_EXP 71
51263: PPUSH
51264: LD_VAR 0 4
51268: PPUSH
51269: EMPTY
51270: PPUSH
51271: CALL_OW 1
51275: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
51276: LD_ADDR_EXP 72
51280: PUSH
51281: LD_EXP 72
51285: PPUSH
51286: LD_VAR 0 4
51290: PPUSH
51291: EMPTY
51292: PPUSH
51293: CALL_OW 1
51297: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
51298: LD_ADDR_EXP 73
51302: PUSH
51303: LD_EXP 73
51307: PPUSH
51308: LD_VAR 0 4
51312: PPUSH
51313: EMPTY
51314: PPUSH
51315: CALL_OW 1
51319: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
51320: LD_ADDR_EXP 74
51324: PUSH
51325: LD_EXP 74
51329: PPUSH
51330: LD_VAR 0 4
51334: PPUSH
51335: EMPTY
51336: PPUSH
51337: CALL_OW 1
51341: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
51342: LD_ADDR_EXP 75
51346: PUSH
51347: LD_EXP 75
51351: PPUSH
51352: LD_VAR 0 4
51356: PPUSH
51357: LD_INT 0
51359: PPUSH
51360: CALL_OW 1
51364: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
51365: LD_ADDR_EXP 76
51369: PUSH
51370: LD_EXP 76
51374: PPUSH
51375: LD_VAR 0 4
51379: PPUSH
51380: EMPTY
51381: PPUSH
51382: CALL_OW 1
51386: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
51387: LD_ADDR_EXP 77
51391: PUSH
51392: LD_EXP 77
51396: PPUSH
51397: LD_VAR 0 4
51401: PPUSH
51402: EMPTY
51403: PPUSH
51404: CALL_OW 1
51408: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
51409: LD_ADDR_EXP 78
51413: PUSH
51414: LD_EXP 78
51418: PPUSH
51419: LD_VAR 0 4
51423: PPUSH
51424: EMPTY
51425: PPUSH
51426: CALL_OW 1
51430: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
51431: LD_ADDR_EXP 79
51435: PUSH
51436: LD_EXP 79
51440: PPUSH
51441: LD_VAR 0 4
51445: PPUSH
51446: EMPTY
51447: PPUSH
51448: CALL_OW 1
51452: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
51453: LD_ADDR_EXP 80
51457: PUSH
51458: LD_EXP 80
51462: PPUSH
51463: LD_VAR 0 4
51467: PPUSH
51468: EMPTY
51469: PPUSH
51470: CALL_OW 1
51474: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
51475: LD_ADDR_EXP 81
51479: PUSH
51480: LD_EXP 81
51484: PPUSH
51485: LD_VAR 0 4
51489: PPUSH
51490: EMPTY
51491: PPUSH
51492: CALL_OW 1
51496: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
51497: LD_ADDR_EXP 82
51501: PUSH
51502: LD_EXP 82
51506: PPUSH
51507: LD_VAR 0 4
51511: PPUSH
51512: EMPTY
51513: PPUSH
51514: CALL_OW 1
51518: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
51519: LD_ADDR_EXP 83
51523: PUSH
51524: LD_EXP 83
51528: PPUSH
51529: LD_VAR 0 4
51533: PPUSH
51534: EMPTY
51535: PPUSH
51536: CALL_OW 1
51540: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
51541: LD_ADDR_EXP 84
51545: PUSH
51546: LD_EXP 84
51550: PPUSH
51551: LD_VAR 0 4
51555: PPUSH
51556: EMPTY
51557: PPUSH
51558: CALL_OW 1
51562: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
51563: LD_ADDR_EXP 85
51567: PUSH
51568: LD_EXP 85
51572: PPUSH
51573: LD_VAR 0 4
51577: PPUSH
51578: EMPTY
51579: PPUSH
51580: CALL_OW 1
51584: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
51585: LD_ADDR_EXP 86
51589: PUSH
51590: LD_EXP 86
51594: PPUSH
51595: LD_VAR 0 4
51599: PPUSH
51600: EMPTY
51601: PPUSH
51602: CALL_OW 1
51606: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
51607: LD_ADDR_EXP 87
51611: PUSH
51612: LD_EXP 87
51616: PPUSH
51617: LD_VAR 0 4
51621: PPUSH
51622: EMPTY
51623: PPUSH
51624: CALL_OW 1
51628: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
51629: LD_ADDR_EXP 88
51633: PUSH
51634: LD_EXP 88
51638: PPUSH
51639: LD_VAR 0 4
51643: PPUSH
51644: EMPTY
51645: PPUSH
51646: CALL_OW 1
51650: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
51651: LD_ADDR_EXP 89
51655: PUSH
51656: LD_EXP 89
51660: PPUSH
51661: LD_VAR 0 4
51665: PPUSH
51666: EMPTY
51667: PPUSH
51668: CALL_OW 1
51672: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
51673: LD_ADDR_EXP 91
51677: PUSH
51678: LD_EXP 91
51682: PPUSH
51683: LD_VAR 0 4
51687: PPUSH
51688: EMPTY
51689: PPUSH
51690: CALL_OW 1
51694: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
51695: LD_ADDR_EXP 93
51699: PUSH
51700: LD_EXP 93
51704: PPUSH
51705: LD_VAR 0 4
51709: PPUSH
51710: EMPTY
51711: PPUSH
51712: CALL_OW 1
51716: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
51717: LD_ADDR_EXP 94
51721: PUSH
51722: LD_EXP 94
51726: PPUSH
51727: LD_VAR 0 4
51731: PPUSH
51732: EMPTY
51733: PPUSH
51734: CALL_OW 1
51738: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
51739: LD_ADDR_EXP 95
51743: PUSH
51744: LD_EXP 95
51748: PPUSH
51749: LD_VAR 0 4
51753: PPUSH
51754: EMPTY
51755: PPUSH
51756: CALL_OW 1
51760: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
51761: LD_ADDR_EXP 96
51765: PUSH
51766: LD_EXP 96
51770: PPUSH
51771: LD_VAR 0 4
51775: PPUSH
51776: EMPTY
51777: PPUSH
51778: CALL_OW 1
51782: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
51783: LD_ADDR_EXP 97
51787: PUSH
51788: LD_EXP 97
51792: PPUSH
51793: LD_VAR 0 4
51797: PPUSH
51798: EMPTY
51799: PPUSH
51800: CALL_OW 1
51804: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
51805: LD_ADDR_EXP 98
51809: PUSH
51810: LD_EXP 98
51814: PPUSH
51815: LD_VAR 0 4
51819: PPUSH
51820: EMPTY
51821: PPUSH
51822: CALL_OW 1
51826: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
51827: LD_ADDR_EXP 99
51831: PUSH
51832: LD_EXP 99
51836: PPUSH
51837: LD_VAR 0 4
51841: PPUSH
51842: EMPTY
51843: PPUSH
51844: CALL_OW 1
51848: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
51849: LD_ADDR_EXP 100
51853: PUSH
51854: LD_EXP 100
51858: PPUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: EMPTY
51865: PPUSH
51866: CALL_OW 1
51870: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
51871: LD_ADDR_EXP 101
51875: PUSH
51876: LD_EXP 101
51880: PPUSH
51881: LD_VAR 0 4
51885: PPUSH
51886: EMPTY
51887: PPUSH
51888: CALL_OW 1
51892: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
51893: LD_ADDR_EXP 102
51897: PUSH
51898: LD_EXP 102
51902: PPUSH
51903: LD_VAR 0 4
51907: PPUSH
51908: EMPTY
51909: PPUSH
51910: CALL_OW 1
51914: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
51915: LD_ADDR_EXP 103
51919: PUSH
51920: LD_EXP 103
51924: PPUSH
51925: LD_VAR 0 4
51929: PPUSH
51930: EMPTY
51931: PPUSH
51932: CALL_OW 1
51936: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51937: LD_ADDR_EXP 104
51941: PUSH
51942: LD_EXP 104
51946: PPUSH
51947: LD_VAR 0 4
51951: PPUSH
51952: EMPTY
51953: PPUSH
51954: CALL_OW 1
51958: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51959: LD_ADDR_EXP 105
51963: PUSH
51964: LD_EXP 105
51968: PPUSH
51969: LD_VAR 0 4
51973: PPUSH
51974: EMPTY
51975: PPUSH
51976: CALL_OW 1
51980: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51981: LD_ADDR_EXP 106
51985: PUSH
51986: LD_EXP 106
51990: PPUSH
51991: LD_VAR 0 4
51995: PPUSH
51996: LD_INT 0
51998: PPUSH
51999: CALL_OW 1
52003: ST_TO_ADDR
// result := base ;
52004: LD_ADDR_VAR 0 3
52008: PUSH
52009: LD_VAR 0 4
52013: ST_TO_ADDR
// end ;
52014: LD_VAR 0 3
52018: RET
// export function MC_Start ( ) ; var i ; begin
52019: LD_INT 0
52021: PPUSH
52022: PPUSH
// for i = 1 to mc_bases do
52023: LD_ADDR_VAR 0 2
52027: PUSH
52028: DOUBLE
52029: LD_INT 1
52031: DEC
52032: ST_TO_ADDR
52033: LD_EXP 64
52037: PUSH
52038: FOR_TO
52039: IFFALSE 53116
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
52041: LD_ADDR_EXP 64
52045: PUSH
52046: LD_EXP 64
52050: PPUSH
52051: LD_VAR 0 2
52055: PPUSH
52056: LD_EXP 64
52060: PUSH
52061: LD_VAR 0 2
52065: ARRAY
52066: PUSH
52067: LD_INT 0
52069: DIFF
52070: PPUSH
52071: CALL_OW 1
52075: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
52076: LD_ADDR_EXP 65
52080: PUSH
52081: LD_EXP 65
52085: PPUSH
52086: LD_VAR 0 2
52090: PPUSH
52091: EMPTY
52092: PPUSH
52093: CALL_OW 1
52097: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52098: LD_ADDR_EXP 66
52102: PUSH
52103: LD_EXP 66
52107: PPUSH
52108: LD_VAR 0 2
52112: PPUSH
52113: EMPTY
52114: PPUSH
52115: CALL_OW 1
52119: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
52120: LD_ADDR_EXP 67
52124: PUSH
52125: LD_EXP 67
52129: PPUSH
52130: LD_VAR 0 2
52134: PPUSH
52135: EMPTY
52136: PPUSH
52137: CALL_OW 1
52141: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
52142: LD_ADDR_EXP 68
52146: PUSH
52147: LD_EXP 68
52151: PPUSH
52152: LD_VAR 0 2
52156: PPUSH
52157: EMPTY
52158: PUSH
52159: EMPTY
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PPUSH
52165: CALL_OW 1
52169: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
52170: LD_ADDR_EXP 69
52174: PUSH
52175: LD_EXP 69
52179: PPUSH
52180: LD_VAR 0 2
52184: PPUSH
52185: EMPTY
52186: PPUSH
52187: CALL_OW 1
52191: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
52192: LD_ADDR_EXP 96
52196: PUSH
52197: LD_EXP 96
52201: PPUSH
52202: LD_VAR 0 2
52206: PPUSH
52207: EMPTY
52208: PPUSH
52209: CALL_OW 1
52213: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
52214: LD_ADDR_EXP 70
52218: PUSH
52219: LD_EXP 70
52223: PPUSH
52224: LD_VAR 0 2
52228: PPUSH
52229: EMPTY
52230: PPUSH
52231: CALL_OW 1
52235: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
52236: LD_ADDR_EXP 71
52240: PUSH
52241: LD_EXP 71
52245: PPUSH
52246: LD_VAR 0 2
52250: PPUSH
52251: EMPTY
52252: PPUSH
52253: CALL_OW 1
52257: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
52258: LD_ADDR_EXP 72
52262: PUSH
52263: LD_EXP 72
52267: PPUSH
52268: LD_VAR 0 2
52272: PPUSH
52273: LD_EXP 64
52277: PUSH
52278: LD_VAR 0 2
52282: ARRAY
52283: PPUSH
52284: LD_INT 2
52286: PUSH
52287: LD_INT 30
52289: PUSH
52290: LD_INT 32
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 30
52299: PUSH
52300: LD_INT 33
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: LIST
52311: PPUSH
52312: CALL_OW 72
52316: PPUSH
52317: CALL_OW 1
52321: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
52322: LD_ADDR_EXP 73
52326: PUSH
52327: LD_EXP 73
52331: PPUSH
52332: LD_VAR 0 2
52336: PPUSH
52337: LD_EXP 64
52341: PUSH
52342: LD_VAR 0 2
52346: ARRAY
52347: PPUSH
52348: LD_INT 2
52350: PUSH
52351: LD_INT 30
52353: PUSH
52354: LD_INT 32
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 30
52363: PUSH
52364: LD_INT 31
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 58
52378: PUSH
52379: EMPTY
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PPUSH
52386: CALL_OW 72
52390: PPUSH
52391: CALL_OW 1
52395: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
52396: LD_ADDR_EXP 74
52400: PUSH
52401: LD_EXP 74
52405: PPUSH
52406: LD_VAR 0 2
52410: PPUSH
52411: EMPTY
52412: PPUSH
52413: CALL_OW 1
52417: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
52418: LD_ADDR_EXP 78
52422: PUSH
52423: LD_EXP 78
52427: PPUSH
52428: LD_VAR 0 2
52432: PPUSH
52433: EMPTY
52434: PPUSH
52435: CALL_OW 1
52439: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
52440: LD_ADDR_EXP 77
52444: PUSH
52445: LD_EXP 77
52449: PPUSH
52450: LD_VAR 0 2
52454: PPUSH
52455: EMPTY
52456: PPUSH
52457: CALL_OW 1
52461: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
52462: LD_ADDR_EXP 79
52466: PUSH
52467: LD_EXP 79
52471: PPUSH
52472: LD_VAR 0 2
52476: PPUSH
52477: EMPTY
52478: PPUSH
52479: CALL_OW 1
52483: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
52484: LD_ADDR_EXP 80
52488: PUSH
52489: LD_EXP 80
52493: PPUSH
52494: LD_VAR 0 2
52498: PPUSH
52499: EMPTY
52500: PPUSH
52501: CALL_OW 1
52505: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52506: LD_ADDR_EXP 81
52510: PUSH
52511: LD_EXP 81
52515: PPUSH
52516: LD_VAR 0 2
52520: PPUSH
52521: EMPTY
52522: PPUSH
52523: CALL_OW 1
52527: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
52528: LD_ADDR_EXP 82
52532: PUSH
52533: LD_EXP 82
52537: PPUSH
52538: LD_VAR 0 2
52542: PPUSH
52543: EMPTY
52544: PPUSH
52545: CALL_OW 1
52549: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
52550: LD_ADDR_EXP 83
52554: PUSH
52555: LD_EXP 83
52559: PPUSH
52560: LD_VAR 0 2
52564: PPUSH
52565: EMPTY
52566: PPUSH
52567: CALL_OW 1
52571: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52572: LD_ADDR_EXP 84
52576: PUSH
52577: LD_EXP 84
52581: PPUSH
52582: LD_VAR 0 2
52586: PPUSH
52587: EMPTY
52588: PPUSH
52589: CALL_OW 1
52593: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
52594: LD_ADDR_EXP 85
52598: PUSH
52599: LD_EXP 85
52603: PPUSH
52604: LD_VAR 0 2
52608: PPUSH
52609: EMPTY
52610: PPUSH
52611: CALL_OW 1
52615: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52616: LD_ADDR_EXP 86
52620: PUSH
52621: LD_EXP 86
52625: PPUSH
52626: LD_VAR 0 2
52630: PPUSH
52631: EMPTY
52632: PPUSH
52633: CALL_OW 1
52637: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
52638: LD_ADDR_EXP 75
52642: PUSH
52643: LD_EXP 75
52647: PPUSH
52648: LD_VAR 0 2
52652: PPUSH
52653: LD_INT 0
52655: PPUSH
52656: CALL_OW 1
52660: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
52661: LD_ADDR_EXP 88
52665: PUSH
52666: LD_EXP 88
52670: PPUSH
52671: LD_VAR 0 2
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: CALL_OW 1
52683: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52684: LD_ADDR_EXP 76
52688: PUSH
52689: LD_EXP 76
52693: PPUSH
52694: LD_VAR 0 2
52698: PPUSH
52699: EMPTY
52700: PPUSH
52701: CALL_OW 1
52705: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
52706: LD_ADDR_EXP 87
52710: PUSH
52711: LD_EXP 87
52715: PPUSH
52716: LD_VAR 0 2
52720: PPUSH
52721: LD_INT 0
52723: PPUSH
52724: CALL_OW 1
52728: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
52729: LD_ADDR_EXP 89
52733: PUSH
52734: LD_EXP 89
52738: PPUSH
52739: LD_VAR 0 2
52743: PPUSH
52744: EMPTY
52745: PPUSH
52746: CALL_OW 1
52750: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
52751: LD_ADDR_EXP 92
52755: PUSH
52756: LD_EXP 92
52760: PPUSH
52761: LD_VAR 0 2
52765: PPUSH
52766: LD_INT 0
52768: PPUSH
52769: CALL_OW 1
52773: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
52774: LD_ADDR_EXP 93
52778: PUSH
52779: LD_EXP 93
52783: PPUSH
52784: LD_VAR 0 2
52788: PPUSH
52789: EMPTY
52790: PPUSH
52791: CALL_OW 1
52795: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
52796: LD_ADDR_EXP 94
52800: PUSH
52801: LD_EXP 94
52805: PPUSH
52806: LD_VAR 0 2
52810: PPUSH
52811: EMPTY
52812: PPUSH
52813: CALL_OW 1
52817: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52818: LD_ADDR_EXP 95
52822: PUSH
52823: LD_EXP 95
52827: PPUSH
52828: LD_VAR 0 2
52832: PPUSH
52833: EMPTY
52834: PPUSH
52835: CALL_OW 1
52839: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
52840: LD_ADDR_EXP 97
52844: PUSH
52845: LD_EXP 97
52849: PPUSH
52850: LD_VAR 0 2
52854: PPUSH
52855: LD_EXP 64
52859: PUSH
52860: LD_VAR 0 2
52864: ARRAY
52865: PPUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 30
52871: PUSH
52872: LD_INT 6
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 30
52881: PUSH
52882: LD_INT 7
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 30
52891: PUSH
52892: LD_INT 8
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: PPUSH
52905: CALL_OW 72
52909: PPUSH
52910: CALL_OW 1
52914: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
52915: LD_ADDR_EXP 98
52919: PUSH
52920: LD_EXP 98
52924: PPUSH
52925: LD_VAR 0 2
52929: PPUSH
52930: EMPTY
52931: PPUSH
52932: CALL_OW 1
52936: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
52937: LD_ADDR_EXP 99
52941: PUSH
52942: LD_EXP 99
52946: PPUSH
52947: LD_VAR 0 2
52951: PPUSH
52952: EMPTY
52953: PPUSH
52954: CALL_OW 1
52958: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
52959: LD_ADDR_EXP 100
52963: PUSH
52964: LD_EXP 100
52968: PPUSH
52969: LD_VAR 0 2
52973: PPUSH
52974: EMPTY
52975: PPUSH
52976: CALL_OW 1
52980: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
52981: LD_ADDR_EXP 101
52985: PUSH
52986: LD_EXP 101
52990: PPUSH
52991: LD_VAR 0 2
52995: PPUSH
52996: EMPTY
52997: PPUSH
52998: CALL_OW 1
53002: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53003: LD_ADDR_EXP 102
53007: PUSH
53008: LD_EXP 102
53012: PPUSH
53013: LD_VAR 0 2
53017: PPUSH
53018: EMPTY
53019: PPUSH
53020: CALL_OW 1
53024: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
53025: LD_ADDR_EXP 103
53029: PUSH
53030: LD_EXP 103
53034: PPUSH
53035: LD_VAR 0 2
53039: PPUSH
53040: EMPTY
53041: PPUSH
53042: CALL_OW 1
53046: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
53047: LD_ADDR_EXP 104
53051: PUSH
53052: LD_EXP 104
53056: PPUSH
53057: LD_VAR 0 2
53061: PPUSH
53062: EMPTY
53063: PPUSH
53064: CALL_OW 1
53068: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
53069: LD_ADDR_EXP 105
53073: PUSH
53074: LD_EXP 105
53078: PPUSH
53079: LD_VAR 0 2
53083: PPUSH
53084: EMPTY
53085: PPUSH
53086: CALL_OW 1
53090: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
53091: LD_ADDR_EXP 106
53095: PUSH
53096: LD_EXP 106
53100: PPUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: LD_INT 0
53108: PPUSH
53109: CALL_OW 1
53113: ST_TO_ADDR
// end ;
53114: GO 52038
53116: POP
53117: POP
// MC_InitSides ( ) ;
53118: CALL 53404 0 0
// MC_InitResearch ( ) ;
53122: CALL 53143 0 0
// CustomInitMacro ( ) ;
53126: CALL 5845 0 0
// skirmish := true ;
53130: LD_ADDR_EXP 62
53134: PUSH
53135: LD_INT 1
53137: ST_TO_ADDR
// end ;
53138: LD_VAR 0 1
53142: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
53143: LD_INT 0
53145: PPUSH
53146: PPUSH
53147: PPUSH
53148: PPUSH
53149: PPUSH
53150: PPUSH
// if not mc_bases then
53151: LD_EXP 64
53155: NOT
53156: IFFALSE 53160
// exit ;
53158: GO 53399
// for i = 1 to 8 do
53160: LD_ADDR_VAR 0 2
53164: PUSH
53165: DOUBLE
53166: LD_INT 1
53168: DEC
53169: ST_TO_ADDR
53170: LD_INT 8
53172: PUSH
53173: FOR_TO
53174: IFFALSE 53200
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
53176: LD_ADDR_EXP 91
53180: PUSH
53181: LD_EXP 91
53185: PPUSH
53186: LD_VAR 0 2
53190: PPUSH
53191: EMPTY
53192: PPUSH
53193: CALL_OW 1
53197: ST_TO_ADDR
53198: GO 53173
53200: POP
53201: POP
// tmp := [ ] ;
53202: LD_ADDR_VAR 0 5
53206: PUSH
53207: EMPTY
53208: ST_TO_ADDR
// for i = 1 to mc_sides do
53209: LD_ADDR_VAR 0 2
53213: PUSH
53214: DOUBLE
53215: LD_INT 1
53217: DEC
53218: ST_TO_ADDR
53219: LD_EXP 90
53223: PUSH
53224: FOR_TO
53225: IFFALSE 53283
// if not mc_sides [ i ] in tmp then
53227: LD_EXP 90
53231: PUSH
53232: LD_VAR 0 2
53236: ARRAY
53237: PUSH
53238: LD_VAR 0 5
53242: IN
53243: NOT
53244: IFFALSE 53281
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
53246: LD_ADDR_VAR 0 5
53250: PUSH
53251: LD_VAR 0 5
53255: PPUSH
53256: LD_VAR 0 5
53260: PUSH
53261: LD_INT 1
53263: PLUS
53264: PPUSH
53265: LD_EXP 90
53269: PUSH
53270: LD_VAR 0 2
53274: ARRAY
53275: PPUSH
53276: CALL_OW 2
53280: ST_TO_ADDR
53281: GO 53224
53283: POP
53284: POP
// if not tmp then
53285: LD_VAR 0 5
53289: NOT
53290: IFFALSE 53294
// exit ;
53292: GO 53399
// for j in tmp do
53294: LD_ADDR_VAR 0 3
53298: PUSH
53299: LD_VAR 0 5
53303: PUSH
53304: FOR_IN
53305: IFFALSE 53397
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
53307: LD_ADDR_VAR 0 6
53311: PUSH
53312: LD_INT 22
53314: PUSH
53315: LD_VAR 0 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PPUSH
53324: CALL_OW 69
53328: ST_TO_ADDR
// if not un then
53329: LD_VAR 0 6
53333: NOT
53334: IFFALSE 53338
// continue ;
53336: GO 53304
// nation := GetNation ( un [ 1 ] ) ;
53338: LD_ADDR_VAR 0 4
53342: PUSH
53343: LD_VAR 0 6
53347: PUSH
53348: LD_INT 1
53350: ARRAY
53351: PPUSH
53352: CALL_OW 248
53356: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
53357: LD_ADDR_EXP 91
53361: PUSH
53362: LD_EXP 91
53366: PPUSH
53367: LD_VAR 0 3
53371: PPUSH
53372: LD_VAR 0 3
53376: PPUSH
53377: LD_VAR 0 4
53381: PPUSH
53382: LD_INT 1
53384: PPUSH
53385: CALL 13481 0 3
53389: PPUSH
53390: CALL_OW 1
53394: ST_TO_ADDR
// end ;
53395: GO 53304
53397: POP
53398: POP
// end ;
53399: LD_VAR 0 1
53403: RET
// export function MC_InitSides ( ) ; var i ; begin
53404: LD_INT 0
53406: PPUSH
53407: PPUSH
// if not mc_bases then
53408: LD_EXP 64
53412: NOT
53413: IFFALSE 53417
// exit ;
53415: GO 53491
// for i = 1 to mc_bases do
53417: LD_ADDR_VAR 0 2
53421: PUSH
53422: DOUBLE
53423: LD_INT 1
53425: DEC
53426: ST_TO_ADDR
53427: LD_EXP 64
53431: PUSH
53432: FOR_TO
53433: IFFALSE 53489
// if mc_bases [ i ] then
53435: LD_EXP 64
53439: PUSH
53440: LD_VAR 0 2
53444: ARRAY
53445: IFFALSE 53487
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
53447: LD_ADDR_EXP 90
53451: PUSH
53452: LD_EXP 90
53456: PPUSH
53457: LD_VAR 0 2
53461: PPUSH
53462: LD_EXP 64
53466: PUSH
53467: LD_VAR 0 2
53471: ARRAY
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PPUSH
53477: CALL_OW 255
53481: PPUSH
53482: CALL_OW 1
53486: ST_TO_ADDR
53487: GO 53432
53489: POP
53490: POP
// end ;
53491: LD_VAR 0 1
53495: RET
// every 0 0$01 trigger skirmish do
53496: LD_EXP 62
53500: IFFALSE 53654
53502: GO 53504
53504: DISABLE
// begin enable ;
53505: ENABLE
// MC_CheckBuildings ( ) ;
53506: CALL 58152 0 0
// MC_CheckPeopleLife ( ) ;
53510: CALL 58277 0 0
// RaiseSailEvent ( 100 ) ;
53514: LD_INT 100
53516: PPUSH
53517: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
53521: LD_INT 103
53523: PPUSH
53524: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
53528: LD_INT 104
53530: PPUSH
53531: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
53535: LD_INT 105
53537: PPUSH
53538: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
53542: LD_INT 106
53544: PPUSH
53545: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
53549: LD_INT 107
53551: PPUSH
53552: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
53556: LD_INT 108
53558: PPUSH
53559: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
53563: LD_INT 109
53565: PPUSH
53566: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
53570: LD_INT 110
53572: PPUSH
53573: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
53577: LD_INT 111
53579: PPUSH
53580: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
53584: LD_INT 112
53586: PPUSH
53587: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
53591: LD_INT 113
53593: PPUSH
53594: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
53598: LD_INT 120
53600: PPUSH
53601: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
53605: LD_INT 121
53607: PPUSH
53608: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
53612: LD_INT 122
53614: PPUSH
53615: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
53619: LD_INT 123
53621: PPUSH
53622: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
53626: LD_INT 124
53628: PPUSH
53629: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
53633: LD_INT 125
53635: PPUSH
53636: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
53640: LD_INT 126
53642: PPUSH
53643: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
53647: LD_INT 200
53649: PPUSH
53650: CALL_OW 427
// end ;
53654: END
// on SailEvent ( event ) do begin if event < 100 then
53655: LD_VAR 0 1
53659: PUSH
53660: LD_INT 100
53662: LESS
53663: IFFALSE 53674
// CustomEvent ( event ) ;
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL 5837 0 1
// if event = 100 then
53674: LD_VAR 0 1
53678: PUSH
53679: LD_INT 100
53681: EQUAL
53682: IFFALSE 53688
// MC_ClassManager ( ) ;
53684: CALL 54080 0 0
// if event = 101 then
53688: LD_VAR 0 1
53692: PUSH
53693: LD_INT 101
53695: EQUAL
53696: IFFALSE 53702
// MC_RepairBuildings ( ) ;
53698: CALL 58862 0 0
// if event = 102 then
53702: LD_VAR 0 1
53706: PUSH
53707: LD_INT 102
53709: EQUAL
53710: IFFALSE 53716
// MC_Heal ( ) ;
53712: CALL 59721 0 0
// if event = 103 then
53716: LD_VAR 0 1
53720: PUSH
53721: LD_INT 103
53723: EQUAL
53724: IFFALSE 53730
// MC_Build ( ) ;
53726: CALL 60143 0 0
// if event = 104 then
53730: LD_VAR 0 1
53734: PUSH
53735: LD_INT 104
53737: EQUAL
53738: IFFALSE 53744
// MC_TurretWeapon ( ) ;
53740: CALL 61756 0 0
// if event = 105 then
53744: LD_VAR 0 1
53748: PUSH
53749: LD_INT 105
53751: EQUAL
53752: IFFALSE 53758
// MC_BuildUpgrade ( ) ;
53754: CALL 61307 0 0
// if event = 106 then
53758: LD_VAR 0 1
53762: PUSH
53763: LD_INT 106
53765: EQUAL
53766: IFFALSE 53772
// MC_PlantMines ( ) ;
53768: CALL 62186 0 0
// if event = 107 then
53772: LD_VAR 0 1
53776: PUSH
53777: LD_INT 107
53779: EQUAL
53780: IFFALSE 53786
// MC_CollectCrates ( ) ;
53782: CALL 62984 0 0
// if event = 108 then
53786: LD_VAR 0 1
53790: PUSH
53791: LD_INT 108
53793: EQUAL
53794: IFFALSE 53800
// MC_LinkRemoteControl ( ) ;
53796: CALL 64760 0 0
// if event = 109 then
53800: LD_VAR 0 1
53804: PUSH
53805: LD_INT 109
53807: EQUAL
53808: IFFALSE 53814
// MC_ProduceVehicle ( ) ;
53810: CALL 64941 0 0
// if event = 110 then
53814: LD_VAR 0 1
53818: PUSH
53819: LD_INT 110
53821: EQUAL
53822: IFFALSE 53828
// MC_SendAttack ( ) ;
53824: CALL 65407 0 0
// if event = 111 then
53828: LD_VAR 0 1
53832: PUSH
53833: LD_INT 111
53835: EQUAL
53836: IFFALSE 53842
// MC_Defend ( ) ;
53838: CALL 65515 0 0
// if event = 112 then
53842: LD_VAR 0 1
53846: PUSH
53847: LD_INT 112
53849: EQUAL
53850: IFFALSE 53856
// MC_Research ( ) ;
53852: CALL 66120 0 0
// if event = 113 then
53856: LD_VAR 0 1
53860: PUSH
53861: LD_INT 113
53863: EQUAL
53864: IFFALSE 53870
// MC_MinesTrigger ( ) ;
53866: CALL 67234 0 0
// if event = 120 then
53870: LD_VAR 0 1
53874: PUSH
53875: LD_INT 120
53877: EQUAL
53878: IFFALSE 53884
// MC_RepairVehicle ( ) ;
53880: CALL 67333 0 0
// if event = 121 then
53884: LD_VAR 0 1
53888: PUSH
53889: LD_INT 121
53891: EQUAL
53892: IFFALSE 53898
// MC_TameApe ( ) ;
53894: CALL 68063 0 0
// if event = 122 then
53898: LD_VAR 0 1
53902: PUSH
53903: LD_INT 122
53905: EQUAL
53906: IFFALSE 53912
// MC_ChangeApeClass ( ) ;
53908: CALL 68892 0 0
// if event = 123 then
53912: LD_VAR 0 1
53916: PUSH
53917: LD_INT 123
53919: EQUAL
53920: IFFALSE 53926
// MC_Bazooka ( ) ;
53922: CALL 69542 0 0
// if event = 124 then
53926: LD_VAR 0 1
53930: PUSH
53931: LD_INT 124
53933: EQUAL
53934: IFFALSE 53940
// MC_TeleportExit ( ) ;
53936: CALL 69740 0 0
// if event = 125 then
53940: LD_VAR 0 1
53944: PUSH
53945: LD_INT 125
53947: EQUAL
53948: IFFALSE 53954
// MC_Deposits ( ) ;
53950: CALL 70387 0 0
// if event = 126 then
53954: LD_VAR 0 1
53958: PUSH
53959: LD_INT 126
53961: EQUAL
53962: IFFALSE 53968
// MC_RemoteDriver ( ) ;
53964: CALL 71012 0 0
// if event = 200 then
53968: LD_VAR 0 1
53972: PUSH
53973: LD_INT 200
53975: EQUAL
53976: IFFALSE 53982
// MC_Idle ( ) ;
53978: CALL 72961 0 0
// end ;
53982: PPOPN 1
53984: END
// export function MC_Reset ( base , tag ) ; var i ; begin
53985: LD_INT 0
53987: PPUSH
53988: PPUSH
// if not mc_bases [ base ] or not tag then
53989: LD_EXP 64
53993: PUSH
53994: LD_VAR 0 1
53998: ARRAY
53999: NOT
54000: PUSH
54001: LD_VAR 0 2
54005: NOT
54006: OR
54007: IFFALSE 54011
// exit ;
54009: GO 54075
// for i in mc_bases [ base ] union mc_ape [ base ] do
54011: LD_ADDR_VAR 0 4
54015: PUSH
54016: LD_EXP 64
54020: PUSH
54021: LD_VAR 0 1
54025: ARRAY
54026: PUSH
54027: LD_EXP 93
54031: PUSH
54032: LD_VAR 0 1
54036: ARRAY
54037: UNION
54038: PUSH
54039: FOR_IN
54040: IFFALSE 54073
// if GetTag ( i ) = tag then
54042: LD_VAR 0 4
54046: PPUSH
54047: CALL_OW 110
54051: PUSH
54052: LD_VAR 0 2
54056: EQUAL
54057: IFFALSE 54071
// SetTag ( i , 0 ) ;
54059: LD_VAR 0 4
54063: PPUSH
54064: LD_INT 0
54066: PPUSH
54067: CALL_OW 109
54071: GO 54039
54073: POP
54074: POP
// end ;
54075: LD_VAR 0 3
54079: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
54080: LD_INT 0
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
// if not mc_bases then
54090: LD_EXP 64
54094: NOT
54095: IFFALSE 54099
// exit ;
54097: GO 54557
// for i = 1 to mc_bases do
54099: LD_ADDR_VAR 0 2
54103: PUSH
54104: DOUBLE
54105: LD_INT 1
54107: DEC
54108: ST_TO_ADDR
54109: LD_EXP 64
54113: PUSH
54114: FOR_TO
54115: IFFALSE 54555
// begin tmp := MC_ClassCheckReq ( i ) ;
54117: LD_ADDR_VAR 0 4
54121: PUSH
54122: LD_VAR 0 2
54126: PPUSH
54127: CALL 54562 0 1
54131: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
54132: LD_ADDR_EXP 105
54136: PUSH
54137: LD_EXP 105
54141: PPUSH
54142: LD_VAR 0 2
54146: PPUSH
54147: LD_VAR 0 4
54151: PPUSH
54152: CALL_OW 1
54156: ST_TO_ADDR
// if not tmp then
54157: LD_VAR 0 4
54161: NOT
54162: IFFALSE 54166
// continue ;
54164: GO 54114
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
54166: LD_ADDR_VAR 0 6
54170: PUSH
54171: LD_EXP 64
54175: PUSH
54176: LD_VAR 0 2
54180: ARRAY
54181: PPUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 30
54187: PUSH
54188: LD_INT 4
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 30
54197: PUSH
54198: LD_INT 5
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: PPUSH
54210: CALL_OW 72
54214: PUSH
54215: LD_EXP 64
54219: PUSH
54220: LD_VAR 0 2
54224: ARRAY
54225: PPUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 30
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 30
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: PPUSH
54254: CALL_OW 72
54258: PUSH
54259: LD_EXP 64
54263: PUSH
54264: LD_VAR 0 2
54268: ARRAY
54269: PPUSH
54270: LD_INT 30
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PPUSH
54280: CALL_OW 72
54284: PUSH
54285: LD_EXP 64
54289: PUSH
54290: LD_VAR 0 2
54294: ARRAY
54295: PPUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 30
54301: PUSH
54302: LD_INT 6
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 30
54311: PUSH
54312: LD_INT 7
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 30
54321: PUSH
54322: LD_INT 8
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: PPUSH
54335: CALL_OW 72
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: ST_TO_ADDR
// for j = 1 to 4 do
54346: LD_ADDR_VAR 0 3
54350: PUSH
54351: DOUBLE
54352: LD_INT 1
54354: DEC
54355: ST_TO_ADDR
54356: LD_INT 4
54358: PUSH
54359: FOR_TO
54360: IFFALSE 54551
// begin if not tmp [ j ] then
54362: LD_VAR 0 4
54366: PUSH
54367: LD_VAR 0 3
54371: ARRAY
54372: NOT
54373: IFFALSE 54377
// continue ;
54375: GO 54359
// for p in tmp [ j ] do
54377: LD_ADDR_VAR 0 5
54381: PUSH
54382: LD_VAR 0 4
54386: PUSH
54387: LD_VAR 0 3
54391: ARRAY
54392: PUSH
54393: FOR_IN
54394: IFFALSE 54547
// begin if not b [ j ] then
54396: LD_VAR 0 6
54400: PUSH
54401: LD_VAR 0 3
54405: ARRAY
54406: NOT
54407: IFFALSE 54411
// break ;
54409: GO 54547
// e := 0 ;
54411: LD_ADDR_VAR 0 7
54415: PUSH
54416: LD_INT 0
54418: ST_TO_ADDR
// for k in b [ j ] do
54419: LD_ADDR_VAR 0 8
54423: PUSH
54424: LD_VAR 0 6
54428: PUSH
54429: LD_VAR 0 3
54433: ARRAY
54434: PUSH
54435: FOR_IN
54436: IFFALSE 54463
// if IsNotFull ( k ) then
54438: LD_VAR 0 8
54442: PPUSH
54443: CALL 15630 0 1
54447: IFFALSE 54461
// begin e := k ;
54449: LD_ADDR_VAR 0 7
54453: PUSH
54454: LD_VAR 0 8
54458: ST_TO_ADDR
// break ;
54459: GO 54463
// end ;
54461: GO 54435
54463: POP
54464: POP
// if e and not UnitGoingToBuilding ( p , e ) then
54465: LD_VAR 0 7
54469: PUSH
54470: LD_VAR 0 5
54474: PPUSH
54475: LD_VAR 0 7
54479: PPUSH
54480: CALL 48050 0 2
54484: NOT
54485: AND
54486: IFFALSE 54545
// begin if IsInUnit ( p ) then
54488: LD_VAR 0 5
54492: PPUSH
54493: CALL_OW 310
54497: IFFALSE 54508
// ComExitBuilding ( p ) ;
54499: LD_VAR 0 5
54503: PPUSH
54504: CALL_OW 122
// ComEnterUnit ( p , e ) ;
54508: LD_VAR 0 5
54512: PPUSH
54513: LD_VAR 0 7
54517: PPUSH
54518: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
54522: LD_VAR 0 5
54526: PPUSH
54527: LD_VAR 0 3
54531: PPUSH
54532: CALL_OW 183
// AddComExitBuilding ( p ) ;
54536: LD_VAR 0 5
54540: PPUSH
54541: CALL_OW 182
// end ; end ;
54545: GO 54393
54547: POP
54548: POP
// end ;
54549: GO 54359
54551: POP
54552: POP
// end ;
54553: GO 54114
54555: POP
54556: POP
// end ;
54557: LD_VAR 0 1
54561: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
54562: LD_INT 0
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54576: LD_VAR 0 1
54580: NOT
54581: PUSH
54582: LD_EXP 64
54586: PUSH
54587: LD_VAR 0 1
54591: ARRAY
54592: NOT
54593: OR
54594: PUSH
54595: LD_EXP 64
54599: PUSH
54600: LD_VAR 0 1
54604: ARRAY
54605: PPUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 30
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 30
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: PPUSH
54634: CALL_OW 72
54638: NOT
54639: OR
54640: IFFALSE 54644
// exit ;
54642: GO 58147
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54644: LD_ADDR_VAR 0 4
54648: PUSH
54649: LD_EXP 64
54653: PUSH
54654: LD_VAR 0 1
54658: ARRAY
54659: PPUSH
54660: LD_INT 2
54662: PUSH
54663: LD_INT 25
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 25
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 25
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 25
54695: PUSH
54696: LD_INT 4
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 25
54705: PUSH
54706: LD_INT 5
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 25
54715: PUSH
54716: LD_INT 8
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 25
54725: PUSH
54726: LD_INT 9
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: PPUSH
54743: CALL_OW 72
54747: ST_TO_ADDR
// if not tmp then
54748: LD_VAR 0 4
54752: NOT
54753: IFFALSE 54757
// exit ;
54755: GO 58147
// for i in tmp do
54757: LD_ADDR_VAR 0 3
54761: PUSH
54762: LD_VAR 0 4
54766: PUSH
54767: FOR_IN
54768: IFFALSE 54799
// if GetTag ( i ) then
54770: LD_VAR 0 3
54774: PPUSH
54775: CALL_OW 110
54779: IFFALSE 54797
// tmp := tmp diff i ;
54781: LD_ADDR_VAR 0 4
54785: PUSH
54786: LD_VAR 0 4
54790: PUSH
54791: LD_VAR 0 3
54795: DIFF
54796: ST_TO_ADDR
54797: GO 54767
54799: POP
54800: POP
// if not tmp then
54801: LD_VAR 0 4
54805: NOT
54806: IFFALSE 54810
// exit ;
54808: GO 58147
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54810: LD_ADDR_VAR 0 5
54814: PUSH
54815: LD_EXP 64
54819: PUSH
54820: LD_VAR 0 1
54824: ARRAY
54825: PPUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 25
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 25
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 25
54851: PUSH
54852: LD_INT 8
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 25
54861: PUSH
54862: LD_INT 9
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: PPUSH
54876: CALL_OW 72
54880: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
54881: LD_ADDR_VAR 0 6
54885: PUSH
54886: LD_EXP 64
54890: PUSH
54891: LD_VAR 0 1
54895: ARRAY
54896: PPUSH
54897: LD_INT 25
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PPUSH
54907: CALL_OW 72
54911: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
54912: LD_ADDR_VAR 0 7
54916: PUSH
54917: LD_EXP 64
54921: PUSH
54922: LD_VAR 0 1
54926: ARRAY
54927: PPUSH
54928: LD_INT 25
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PPUSH
54938: CALL_OW 72
54942: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
54943: LD_ADDR_VAR 0 8
54947: PUSH
54948: LD_EXP 64
54952: PUSH
54953: LD_VAR 0 1
54957: ARRAY
54958: PPUSH
54959: LD_INT 25
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 24
54971: PUSH
54972: LD_INT 251
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PPUSH
54983: CALL_OW 72
54987: ST_TO_ADDR
// if mc_scan [ base ] then
54988: LD_EXP 87
54992: PUSH
54993: LD_VAR 0 1
54997: ARRAY
54998: IFFALSE 55459
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
55000: LD_ADDR_EXP 106
55004: PUSH
55005: LD_EXP 106
55009: PPUSH
55010: LD_VAR 0 1
55014: PPUSH
55015: LD_INT 4
55017: PPUSH
55018: CALL_OW 1
55022: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
55023: LD_ADDR_VAR 0 12
55027: PUSH
55028: LD_EXP 64
55032: PUSH
55033: LD_VAR 0 1
55037: ARRAY
55038: PPUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 30
55044: PUSH
55045: LD_INT 4
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 30
55054: PUSH
55055: LD_INT 5
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: LIST
55066: PPUSH
55067: CALL_OW 72
55071: ST_TO_ADDR
// if not b then
55072: LD_VAR 0 12
55076: NOT
55077: IFFALSE 55081
// exit ;
55079: GO 58147
// p := [ ] ;
55081: LD_ADDR_VAR 0 11
55085: PUSH
55086: EMPTY
55087: ST_TO_ADDR
// if sci >= 2 then
55088: LD_VAR 0 8
55092: PUSH
55093: LD_INT 2
55095: GREATEREQUAL
55096: IFFALSE 55127
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
55098: LD_ADDR_VAR 0 8
55102: PUSH
55103: LD_VAR 0 8
55107: PUSH
55108: LD_INT 1
55110: ARRAY
55111: PUSH
55112: LD_VAR 0 8
55116: PUSH
55117: LD_INT 2
55119: ARRAY
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: ST_TO_ADDR
55125: GO 55188
// if sci = 1 then
55127: LD_VAR 0 8
55131: PUSH
55132: LD_INT 1
55134: EQUAL
55135: IFFALSE 55156
// sci := [ sci [ 1 ] ] else
55137: LD_ADDR_VAR 0 8
55141: PUSH
55142: LD_VAR 0 8
55146: PUSH
55147: LD_INT 1
55149: ARRAY
55150: PUSH
55151: EMPTY
55152: LIST
55153: ST_TO_ADDR
55154: GO 55188
// if sci = 0 then
55156: LD_VAR 0 8
55160: PUSH
55161: LD_INT 0
55163: EQUAL
55164: IFFALSE 55188
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
55166: LD_ADDR_VAR 0 11
55170: PUSH
55171: LD_VAR 0 4
55175: PPUSH
55176: LD_INT 4
55178: PPUSH
55179: CALL 47913 0 2
55183: PUSH
55184: LD_INT 1
55186: ARRAY
55187: ST_TO_ADDR
// if eng > 4 then
55188: LD_VAR 0 6
55192: PUSH
55193: LD_INT 4
55195: GREATER
55196: IFFALSE 55242
// for i = eng downto 4 do
55198: LD_ADDR_VAR 0 3
55202: PUSH
55203: DOUBLE
55204: LD_VAR 0 6
55208: INC
55209: ST_TO_ADDR
55210: LD_INT 4
55212: PUSH
55213: FOR_DOWNTO
55214: IFFALSE 55240
// eng := eng diff eng [ i ] ;
55216: LD_ADDR_VAR 0 6
55220: PUSH
55221: LD_VAR 0 6
55225: PUSH
55226: LD_VAR 0 6
55230: PUSH
55231: LD_VAR 0 3
55235: ARRAY
55236: DIFF
55237: ST_TO_ADDR
55238: GO 55213
55240: POP
55241: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
55242: LD_ADDR_VAR 0 4
55246: PUSH
55247: LD_VAR 0 4
55251: PUSH
55252: LD_VAR 0 5
55256: PUSH
55257: LD_VAR 0 6
55261: UNION
55262: PUSH
55263: LD_VAR 0 7
55267: UNION
55268: PUSH
55269: LD_VAR 0 8
55273: UNION
55274: DIFF
55275: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
55276: LD_ADDR_VAR 0 13
55280: PUSH
55281: LD_EXP 64
55285: PUSH
55286: LD_VAR 0 1
55290: ARRAY
55291: PPUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 30
55297: PUSH
55298: LD_INT 32
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 30
55307: PUSH
55308: LD_INT 31
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: PPUSH
55320: CALL_OW 72
55324: PUSH
55325: LD_EXP 64
55329: PUSH
55330: LD_VAR 0 1
55334: ARRAY
55335: PPUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 30
55341: PUSH
55342: LD_INT 4
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 30
55351: PUSH
55352: LD_INT 5
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: PPUSH
55364: CALL_OW 72
55368: PUSH
55369: LD_INT 6
55371: MUL
55372: PLUS
55373: ST_TO_ADDR
// if bcount < tmp then
55374: LD_VAR 0 13
55378: PUSH
55379: LD_VAR 0 4
55383: LESS
55384: IFFALSE 55430
// for i = tmp downto bcount do
55386: LD_ADDR_VAR 0 3
55390: PUSH
55391: DOUBLE
55392: LD_VAR 0 4
55396: INC
55397: ST_TO_ADDR
55398: LD_VAR 0 13
55402: PUSH
55403: FOR_DOWNTO
55404: IFFALSE 55428
// tmp := Delete ( tmp , tmp ) ;
55406: LD_ADDR_VAR 0 4
55410: PUSH
55411: LD_VAR 0 4
55415: PPUSH
55416: LD_VAR 0 4
55420: PPUSH
55421: CALL_OW 3
55425: ST_TO_ADDR
55426: GO 55403
55428: POP
55429: POP
// result := [ tmp , 0 , 0 , p ] ;
55430: LD_ADDR_VAR 0 2
55434: PUSH
55435: LD_VAR 0 4
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_VAR 0 11
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// exit ;
55457: GO 58147
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55459: LD_EXP 64
55463: PUSH
55464: LD_VAR 0 1
55468: ARRAY
55469: PPUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 30
55475: PUSH
55476: LD_INT 6
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 30
55485: PUSH
55486: LD_INT 7
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 30
55495: PUSH
55496: LD_INT 8
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: PPUSH
55509: CALL_OW 72
55513: NOT
55514: PUSH
55515: LD_EXP 64
55519: PUSH
55520: LD_VAR 0 1
55524: ARRAY
55525: PPUSH
55526: LD_INT 30
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PPUSH
55536: CALL_OW 72
55540: NOT
55541: AND
55542: IFFALSE 55614
// begin if eng = tmp then
55544: LD_VAR 0 6
55548: PUSH
55549: LD_VAR 0 4
55553: EQUAL
55554: IFFALSE 55558
// exit ;
55556: GO 58147
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
55558: LD_ADDR_EXP 106
55562: PUSH
55563: LD_EXP 106
55567: PPUSH
55568: LD_VAR 0 1
55572: PPUSH
55573: LD_INT 1
55575: PPUSH
55576: CALL_OW 1
55580: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
55581: LD_ADDR_VAR 0 2
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_VAR 0 4
55593: PUSH
55594: LD_VAR 0 6
55598: DIFF
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// exit ;
55612: GO 58147
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55614: LD_EXP 91
55618: PUSH
55619: LD_EXP 90
55623: PUSH
55624: LD_VAR 0 1
55628: ARRAY
55629: ARRAY
55630: PUSH
55631: LD_EXP 64
55635: PUSH
55636: LD_VAR 0 1
55640: ARRAY
55641: PPUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 30
55647: PUSH
55648: LD_INT 6
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 30
55657: PUSH
55658: LD_INT 7
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 30
55667: PUSH
55668: LD_INT 8
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: PPUSH
55681: CALL_OW 72
55685: AND
55686: PUSH
55687: LD_EXP 64
55691: PUSH
55692: LD_VAR 0 1
55696: ARRAY
55697: PPUSH
55698: LD_INT 30
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PPUSH
55708: CALL_OW 72
55712: NOT
55713: AND
55714: IFFALSE 55928
// begin if sci >= 6 then
55716: LD_VAR 0 8
55720: PUSH
55721: LD_INT 6
55723: GREATEREQUAL
55724: IFFALSE 55728
// exit ;
55726: GO 58147
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
55728: LD_ADDR_EXP 106
55732: PUSH
55733: LD_EXP 106
55737: PPUSH
55738: LD_VAR 0 1
55742: PPUSH
55743: LD_INT 2
55745: PPUSH
55746: CALL_OW 1
55750: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
55751: LD_ADDR_VAR 0 9
55755: PUSH
55756: LD_VAR 0 4
55760: PUSH
55761: LD_VAR 0 8
55765: DIFF
55766: PPUSH
55767: LD_INT 4
55769: PPUSH
55770: CALL 47913 0 2
55774: ST_TO_ADDR
// p := [ ] ;
55775: LD_ADDR_VAR 0 11
55779: PUSH
55780: EMPTY
55781: ST_TO_ADDR
// if sci < 6 and sort > 6 then
55782: LD_VAR 0 8
55786: PUSH
55787: LD_INT 6
55789: LESS
55790: PUSH
55791: LD_VAR 0 9
55795: PUSH
55796: LD_INT 6
55798: GREATER
55799: AND
55800: IFFALSE 55881
// begin for i = 1 to 6 - sci do
55802: LD_ADDR_VAR 0 3
55806: PUSH
55807: DOUBLE
55808: LD_INT 1
55810: DEC
55811: ST_TO_ADDR
55812: LD_INT 6
55814: PUSH
55815: LD_VAR 0 8
55819: MINUS
55820: PUSH
55821: FOR_TO
55822: IFFALSE 55877
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
55824: LD_ADDR_VAR 0 11
55828: PUSH
55829: LD_VAR 0 11
55833: PPUSH
55834: LD_VAR 0 11
55838: PUSH
55839: LD_INT 1
55841: PLUS
55842: PPUSH
55843: LD_VAR 0 9
55847: PUSH
55848: LD_INT 1
55850: ARRAY
55851: PPUSH
55852: CALL_OW 2
55856: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
55857: LD_ADDR_VAR 0 9
55861: PUSH
55862: LD_VAR 0 9
55866: PPUSH
55867: LD_INT 1
55869: PPUSH
55870: CALL_OW 3
55874: ST_TO_ADDR
// end ;
55875: GO 55821
55877: POP
55878: POP
// end else
55879: GO 55901
// if sort then
55881: LD_VAR 0 9
55885: IFFALSE 55901
// p := sort [ 1 ] ;
55887: LD_ADDR_VAR 0 11
55891: PUSH
55892: LD_VAR 0 9
55896: PUSH
55897: LD_INT 1
55899: ARRAY
55900: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
55901: LD_ADDR_VAR 0 2
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_VAR 0 11
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// exit ;
55926: GO 58147
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55928: LD_EXP 91
55932: PUSH
55933: LD_EXP 90
55937: PUSH
55938: LD_VAR 0 1
55942: ARRAY
55943: ARRAY
55944: PUSH
55945: LD_EXP 64
55949: PUSH
55950: LD_VAR 0 1
55954: ARRAY
55955: PPUSH
55956: LD_INT 2
55958: PUSH
55959: LD_INT 30
55961: PUSH
55962: LD_INT 6
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 30
55971: PUSH
55972: LD_INT 7
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 30
55981: PUSH
55982: LD_INT 8
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: PPUSH
55995: CALL_OW 72
55999: AND
56000: PUSH
56001: LD_EXP 64
56005: PUSH
56006: LD_VAR 0 1
56010: ARRAY
56011: PPUSH
56012: LD_INT 30
56014: PUSH
56015: LD_INT 3
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PPUSH
56022: CALL_OW 72
56026: AND
56027: IFFALSE 56761
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
56029: LD_ADDR_EXP 106
56033: PUSH
56034: LD_EXP 106
56038: PPUSH
56039: LD_VAR 0 1
56043: PPUSH
56044: LD_INT 3
56046: PPUSH
56047: CALL_OW 1
56051: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56052: LD_ADDR_VAR 0 2
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// if not eng then
56075: LD_VAR 0 6
56079: NOT
56080: IFFALSE 56143
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
56082: LD_ADDR_VAR 0 11
56086: PUSH
56087: LD_VAR 0 4
56091: PPUSH
56092: LD_INT 2
56094: PPUSH
56095: CALL 47913 0 2
56099: PUSH
56100: LD_INT 1
56102: ARRAY
56103: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
56104: LD_ADDR_VAR 0 2
56108: PUSH
56109: LD_VAR 0 2
56113: PPUSH
56114: LD_INT 2
56116: PPUSH
56117: LD_VAR 0 11
56121: PPUSH
56122: CALL_OW 1
56126: ST_TO_ADDR
// tmp := tmp diff p ;
56127: LD_ADDR_VAR 0 4
56131: PUSH
56132: LD_VAR 0 4
56136: PUSH
56137: LD_VAR 0 11
56141: DIFF
56142: ST_TO_ADDR
// end ; if tmp and sci < 6 then
56143: LD_VAR 0 4
56147: PUSH
56148: LD_VAR 0 8
56152: PUSH
56153: LD_INT 6
56155: LESS
56156: AND
56157: IFFALSE 56345
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
56159: LD_ADDR_VAR 0 9
56163: PUSH
56164: LD_VAR 0 4
56168: PUSH
56169: LD_VAR 0 8
56173: PUSH
56174: LD_VAR 0 7
56178: UNION
56179: DIFF
56180: PPUSH
56181: LD_INT 4
56183: PPUSH
56184: CALL 47913 0 2
56188: ST_TO_ADDR
// p := [ ] ;
56189: LD_ADDR_VAR 0 11
56193: PUSH
56194: EMPTY
56195: ST_TO_ADDR
// if sort then
56196: LD_VAR 0 9
56200: IFFALSE 56316
// for i = 1 to 6 - sci do
56202: LD_ADDR_VAR 0 3
56206: PUSH
56207: DOUBLE
56208: LD_INT 1
56210: DEC
56211: ST_TO_ADDR
56212: LD_INT 6
56214: PUSH
56215: LD_VAR 0 8
56219: MINUS
56220: PUSH
56221: FOR_TO
56222: IFFALSE 56314
// begin if i = sort then
56224: LD_VAR 0 3
56228: PUSH
56229: LD_VAR 0 9
56233: EQUAL
56234: IFFALSE 56238
// break ;
56236: GO 56314
// if GetClass ( i ) = 4 then
56238: LD_VAR 0 3
56242: PPUSH
56243: CALL_OW 257
56247: PUSH
56248: LD_INT 4
56250: EQUAL
56251: IFFALSE 56255
// continue ;
56253: GO 56221
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56255: LD_ADDR_VAR 0 11
56259: PUSH
56260: LD_VAR 0 11
56264: PPUSH
56265: LD_VAR 0 11
56269: PUSH
56270: LD_INT 1
56272: PLUS
56273: PPUSH
56274: LD_VAR 0 9
56278: PUSH
56279: LD_VAR 0 3
56283: ARRAY
56284: PPUSH
56285: CALL_OW 2
56289: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56290: LD_ADDR_VAR 0 4
56294: PUSH
56295: LD_VAR 0 4
56299: PUSH
56300: LD_VAR 0 9
56304: PUSH
56305: LD_VAR 0 3
56309: ARRAY
56310: DIFF
56311: ST_TO_ADDR
// end ;
56312: GO 56221
56314: POP
56315: POP
// if p then
56316: LD_VAR 0 11
56320: IFFALSE 56345
// result := Replace ( result , 4 , p ) ;
56322: LD_ADDR_VAR 0 2
56326: PUSH
56327: LD_VAR 0 2
56331: PPUSH
56332: LD_INT 4
56334: PPUSH
56335: LD_VAR 0 11
56339: PPUSH
56340: CALL_OW 1
56344: ST_TO_ADDR
// end ; if tmp and mech < 6 then
56345: LD_VAR 0 4
56349: PUSH
56350: LD_VAR 0 7
56354: PUSH
56355: LD_INT 6
56357: LESS
56358: AND
56359: IFFALSE 56547
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56361: LD_ADDR_VAR 0 9
56365: PUSH
56366: LD_VAR 0 4
56370: PUSH
56371: LD_VAR 0 8
56375: PUSH
56376: LD_VAR 0 7
56380: UNION
56381: DIFF
56382: PPUSH
56383: LD_INT 3
56385: PPUSH
56386: CALL 47913 0 2
56390: ST_TO_ADDR
// p := [ ] ;
56391: LD_ADDR_VAR 0 11
56395: PUSH
56396: EMPTY
56397: ST_TO_ADDR
// if sort then
56398: LD_VAR 0 9
56402: IFFALSE 56518
// for i = 1 to 6 - mech do
56404: LD_ADDR_VAR 0 3
56408: PUSH
56409: DOUBLE
56410: LD_INT 1
56412: DEC
56413: ST_TO_ADDR
56414: LD_INT 6
56416: PUSH
56417: LD_VAR 0 7
56421: MINUS
56422: PUSH
56423: FOR_TO
56424: IFFALSE 56516
// begin if i = sort then
56426: LD_VAR 0 3
56430: PUSH
56431: LD_VAR 0 9
56435: EQUAL
56436: IFFALSE 56440
// break ;
56438: GO 56516
// if GetClass ( i ) = 3 then
56440: LD_VAR 0 3
56444: PPUSH
56445: CALL_OW 257
56449: PUSH
56450: LD_INT 3
56452: EQUAL
56453: IFFALSE 56457
// continue ;
56455: GO 56423
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56457: LD_ADDR_VAR 0 11
56461: PUSH
56462: LD_VAR 0 11
56466: PPUSH
56467: LD_VAR 0 11
56471: PUSH
56472: LD_INT 1
56474: PLUS
56475: PPUSH
56476: LD_VAR 0 9
56480: PUSH
56481: LD_VAR 0 3
56485: ARRAY
56486: PPUSH
56487: CALL_OW 2
56491: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56492: LD_ADDR_VAR 0 4
56496: PUSH
56497: LD_VAR 0 4
56501: PUSH
56502: LD_VAR 0 9
56506: PUSH
56507: LD_VAR 0 3
56511: ARRAY
56512: DIFF
56513: ST_TO_ADDR
// end ;
56514: GO 56423
56516: POP
56517: POP
// if p then
56518: LD_VAR 0 11
56522: IFFALSE 56547
// result := Replace ( result , 3 , p ) ;
56524: LD_ADDR_VAR 0 2
56528: PUSH
56529: LD_VAR 0 2
56533: PPUSH
56534: LD_INT 3
56536: PPUSH
56537: LD_VAR 0 11
56541: PPUSH
56542: CALL_OW 1
56546: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
56547: LD_VAR 0 4
56551: PUSH
56552: LD_INT 6
56554: GREATER
56555: PUSH
56556: LD_VAR 0 6
56560: PUSH
56561: LD_INT 6
56563: LESS
56564: AND
56565: IFFALSE 56759
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56567: LD_ADDR_VAR 0 9
56571: PUSH
56572: LD_VAR 0 4
56576: PUSH
56577: LD_VAR 0 8
56581: PUSH
56582: LD_VAR 0 7
56586: UNION
56587: PUSH
56588: LD_VAR 0 6
56592: UNION
56593: DIFF
56594: PPUSH
56595: LD_INT 2
56597: PPUSH
56598: CALL 47913 0 2
56602: ST_TO_ADDR
// p := [ ] ;
56603: LD_ADDR_VAR 0 11
56607: PUSH
56608: EMPTY
56609: ST_TO_ADDR
// if sort then
56610: LD_VAR 0 9
56614: IFFALSE 56730
// for i = 1 to 6 - eng do
56616: LD_ADDR_VAR 0 3
56620: PUSH
56621: DOUBLE
56622: LD_INT 1
56624: DEC
56625: ST_TO_ADDR
56626: LD_INT 6
56628: PUSH
56629: LD_VAR 0 6
56633: MINUS
56634: PUSH
56635: FOR_TO
56636: IFFALSE 56728
// begin if i = sort then
56638: LD_VAR 0 3
56642: PUSH
56643: LD_VAR 0 9
56647: EQUAL
56648: IFFALSE 56652
// break ;
56650: GO 56728
// if GetClass ( i ) = 2 then
56652: LD_VAR 0 3
56656: PPUSH
56657: CALL_OW 257
56661: PUSH
56662: LD_INT 2
56664: EQUAL
56665: IFFALSE 56669
// continue ;
56667: GO 56635
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56669: LD_ADDR_VAR 0 11
56673: PUSH
56674: LD_VAR 0 11
56678: PPUSH
56679: LD_VAR 0 11
56683: PUSH
56684: LD_INT 1
56686: PLUS
56687: PPUSH
56688: LD_VAR 0 9
56692: PUSH
56693: LD_VAR 0 3
56697: ARRAY
56698: PPUSH
56699: CALL_OW 2
56703: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56704: LD_ADDR_VAR 0 4
56708: PUSH
56709: LD_VAR 0 4
56713: PUSH
56714: LD_VAR 0 9
56718: PUSH
56719: LD_VAR 0 3
56723: ARRAY
56724: DIFF
56725: ST_TO_ADDR
// end ;
56726: GO 56635
56728: POP
56729: POP
// if p then
56730: LD_VAR 0 11
56734: IFFALSE 56759
// result := Replace ( result , 2 , p ) ;
56736: LD_ADDR_VAR 0 2
56740: PUSH
56741: LD_VAR 0 2
56745: PPUSH
56746: LD_INT 2
56748: PPUSH
56749: LD_VAR 0 11
56753: PPUSH
56754: CALL_OW 1
56758: ST_TO_ADDR
// end ; exit ;
56759: GO 58147
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
56761: LD_EXP 91
56765: PUSH
56766: LD_EXP 90
56770: PUSH
56771: LD_VAR 0 1
56775: ARRAY
56776: ARRAY
56777: NOT
56778: PUSH
56779: LD_EXP 64
56783: PUSH
56784: LD_VAR 0 1
56788: ARRAY
56789: PPUSH
56790: LD_INT 30
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PPUSH
56800: CALL_OW 72
56804: AND
56805: PUSH
56806: LD_EXP 69
56810: PUSH
56811: LD_VAR 0 1
56815: ARRAY
56816: AND
56817: IFFALSE 57425
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
56819: LD_ADDR_EXP 106
56823: PUSH
56824: LD_EXP 106
56828: PPUSH
56829: LD_VAR 0 1
56833: PPUSH
56834: LD_INT 5
56836: PPUSH
56837: CALL_OW 1
56841: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: ST_TO_ADDR
// if sci > 1 then
56865: LD_VAR 0 8
56869: PUSH
56870: LD_INT 1
56872: GREATER
56873: IFFALSE 56901
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
56875: LD_ADDR_VAR 0 4
56879: PUSH
56880: LD_VAR 0 4
56884: PUSH
56885: LD_VAR 0 8
56889: PUSH
56890: LD_VAR 0 8
56894: PUSH
56895: LD_INT 1
56897: ARRAY
56898: DIFF
56899: DIFF
56900: ST_TO_ADDR
// if tmp and not sci then
56901: LD_VAR 0 4
56905: PUSH
56906: LD_VAR 0 8
56910: NOT
56911: AND
56912: IFFALSE 56981
// begin sort := SortBySkill ( tmp , 4 ) ;
56914: LD_ADDR_VAR 0 9
56918: PUSH
56919: LD_VAR 0 4
56923: PPUSH
56924: LD_INT 4
56926: PPUSH
56927: CALL 47913 0 2
56931: ST_TO_ADDR
// if sort then
56932: LD_VAR 0 9
56936: IFFALSE 56952
// p := sort [ 1 ] ;
56938: LD_ADDR_VAR 0 11
56942: PUSH
56943: LD_VAR 0 9
56947: PUSH
56948: LD_INT 1
56950: ARRAY
56951: ST_TO_ADDR
// if p then
56952: LD_VAR 0 11
56956: IFFALSE 56981
// result := Replace ( result , 4 , p ) ;
56958: LD_ADDR_VAR 0 2
56962: PUSH
56963: LD_VAR 0 2
56967: PPUSH
56968: LD_INT 4
56970: PPUSH
56971: LD_VAR 0 11
56975: PPUSH
56976: CALL_OW 1
56980: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
56981: LD_ADDR_VAR 0 4
56985: PUSH
56986: LD_VAR 0 4
56990: PUSH
56991: LD_VAR 0 7
56995: DIFF
56996: ST_TO_ADDR
// if tmp and mech < 6 then
56997: LD_VAR 0 4
57001: PUSH
57002: LD_VAR 0 7
57006: PUSH
57007: LD_INT 6
57009: LESS
57010: AND
57011: IFFALSE 57199
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
57013: LD_ADDR_VAR 0 9
57017: PUSH
57018: LD_VAR 0 4
57022: PUSH
57023: LD_VAR 0 8
57027: PUSH
57028: LD_VAR 0 7
57032: UNION
57033: DIFF
57034: PPUSH
57035: LD_INT 3
57037: PPUSH
57038: CALL 47913 0 2
57042: ST_TO_ADDR
// p := [ ] ;
57043: LD_ADDR_VAR 0 11
57047: PUSH
57048: EMPTY
57049: ST_TO_ADDR
// if sort then
57050: LD_VAR 0 9
57054: IFFALSE 57170
// for i = 1 to 6 - mech do
57056: LD_ADDR_VAR 0 3
57060: PUSH
57061: DOUBLE
57062: LD_INT 1
57064: DEC
57065: ST_TO_ADDR
57066: LD_INT 6
57068: PUSH
57069: LD_VAR 0 7
57073: MINUS
57074: PUSH
57075: FOR_TO
57076: IFFALSE 57168
// begin if i = sort then
57078: LD_VAR 0 3
57082: PUSH
57083: LD_VAR 0 9
57087: EQUAL
57088: IFFALSE 57092
// break ;
57090: GO 57168
// if GetClass ( i ) = 3 then
57092: LD_VAR 0 3
57096: PPUSH
57097: CALL_OW 257
57101: PUSH
57102: LD_INT 3
57104: EQUAL
57105: IFFALSE 57109
// continue ;
57107: GO 57075
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57109: LD_ADDR_VAR 0 11
57113: PUSH
57114: LD_VAR 0 11
57118: PPUSH
57119: LD_VAR 0 11
57123: PUSH
57124: LD_INT 1
57126: PLUS
57127: PPUSH
57128: LD_VAR 0 9
57132: PUSH
57133: LD_VAR 0 3
57137: ARRAY
57138: PPUSH
57139: CALL_OW 2
57143: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57144: LD_ADDR_VAR 0 4
57148: PUSH
57149: LD_VAR 0 4
57153: PUSH
57154: LD_VAR 0 9
57158: PUSH
57159: LD_VAR 0 3
57163: ARRAY
57164: DIFF
57165: ST_TO_ADDR
// end ;
57166: GO 57075
57168: POP
57169: POP
// if p then
57170: LD_VAR 0 11
57174: IFFALSE 57199
// result := Replace ( result , 3 , p ) ;
57176: LD_ADDR_VAR 0 2
57180: PUSH
57181: LD_VAR 0 2
57185: PPUSH
57186: LD_INT 3
57188: PPUSH
57189: LD_VAR 0 11
57193: PPUSH
57194: CALL_OW 1
57198: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57199: LD_ADDR_VAR 0 4
57203: PUSH
57204: LD_VAR 0 4
57208: PUSH
57209: LD_VAR 0 6
57213: DIFF
57214: ST_TO_ADDR
// if tmp and eng < 6 then
57215: LD_VAR 0 4
57219: PUSH
57220: LD_VAR 0 6
57224: PUSH
57225: LD_INT 6
57227: LESS
57228: AND
57229: IFFALSE 57423
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
57231: LD_ADDR_VAR 0 9
57235: PUSH
57236: LD_VAR 0 4
57240: PUSH
57241: LD_VAR 0 8
57245: PUSH
57246: LD_VAR 0 7
57250: UNION
57251: PUSH
57252: LD_VAR 0 6
57256: UNION
57257: DIFF
57258: PPUSH
57259: LD_INT 2
57261: PPUSH
57262: CALL 47913 0 2
57266: ST_TO_ADDR
// p := [ ] ;
57267: LD_ADDR_VAR 0 11
57271: PUSH
57272: EMPTY
57273: ST_TO_ADDR
// if sort then
57274: LD_VAR 0 9
57278: IFFALSE 57394
// for i = 1 to 6 - eng do
57280: LD_ADDR_VAR 0 3
57284: PUSH
57285: DOUBLE
57286: LD_INT 1
57288: DEC
57289: ST_TO_ADDR
57290: LD_INT 6
57292: PUSH
57293: LD_VAR 0 6
57297: MINUS
57298: PUSH
57299: FOR_TO
57300: IFFALSE 57392
// begin if i = sort then
57302: LD_VAR 0 3
57306: PUSH
57307: LD_VAR 0 9
57311: EQUAL
57312: IFFALSE 57316
// break ;
57314: GO 57392
// if GetClass ( i ) = 2 then
57316: LD_VAR 0 3
57320: PPUSH
57321: CALL_OW 257
57325: PUSH
57326: LD_INT 2
57328: EQUAL
57329: IFFALSE 57333
// continue ;
57331: GO 57299
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57333: LD_ADDR_VAR 0 11
57337: PUSH
57338: LD_VAR 0 11
57342: PPUSH
57343: LD_VAR 0 11
57347: PUSH
57348: LD_INT 1
57350: PLUS
57351: PPUSH
57352: LD_VAR 0 9
57356: PUSH
57357: LD_VAR 0 3
57361: ARRAY
57362: PPUSH
57363: CALL_OW 2
57367: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57368: LD_ADDR_VAR 0 4
57372: PUSH
57373: LD_VAR 0 4
57377: PUSH
57378: LD_VAR 0 9
57382: PUSH
57383: LD_VAR 0 3
57387: ARRAY
57388: DIFF
57389: ST_TO_ADDR
// end ;
57390: GO 57299
57392: POP
57393: POP
// if p then
57394: LD_VAR 0 11
57398: IFFALSE 57423
// result := Replace ( result , 2 , p ) ;
57400: LD_ADDR_VAR 0 2
57404: PUSH
57405: LD_VAR 0 2
57409: PPUSH
57410: LD_INT 2
57412: PPUSH
57413: LD_VAR 0 11
57417: PPUSH
57418: CALL_OW 1
57422: ST_TO_ADDR
// end ; exit ;
57423: GO 58147
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
57425: LD_EXP 91
57429: PUSH
57430: LD_EXP 90
57434: PUSH
57435: LD_VAR 0 1
57439: ARRAY
57440: ARRAY
57441: NOT
57442: PUSH
57443: LD_EXP 64
57447: PUSH
57448: LD_VAR 0 1
57452: ARRAY
57453: PPUSH
57454: LD_INT 30
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PPUSH
57464: CALL_OW 72
57468: AND
57469: PUSH
57470: LD_EXP 69
57474: PUSH
57475: LD_VAR 0 1
57479: ARRAY
57480: NOT
57481: AND
57482: IFFALSE 58147
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
57484: LD_ADDR_EXP 106
57488: PUSH
57489: LD_EXP 106
57493: PPUSH
57494: LD_VAR 0 1
57498: PPUSH
57499: LD_INT 6
57501: PPUSH
57502: CALL_OW 1
57506: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
57507: LD_ADDR_VAR 0 2
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// if sci >= 1 then
57530: LD_VAR 0 8
57534: PUSH
57535: LD_INT 1
57537: GREATEREQUAL
57538: IFFALSE 57560
// tmp := tmp diff sci [ 1 ] ;
57540: LD_ADDR_VAR 0 4
57544: PUSH
57545: LD_VAR 0 4
57549: PUSH
57550: LD_VAR 0 8
57554: PUSH
57555: LD_INT 1
57557: ARRAY
57558: DIFF
57559: ST_TO_ADDR
// if tmp and not sci then
57560: LD_VAR 0 4
57564: PUSH
57565: LD_VAR 0 8
57569: NOT
57570: AND
57571: IFFALSE 57640
// begin sort := SortBySkill ( tmp , 4 ) ;
57573: LD_ADDR_VAR 0 9
57577: PUSH
57578: LD_VAR 0 4
57582: PPUSH
57583: LD_INT 4
57585: PPUSH
57586: CALL 47913 0 2
57590: ST_TO_ADDR
// if sort then
57591: LD_VAR 0 9
57595: IFFALSE 57611
// p := sort [ 1 ] ;
57597: LD_ADDR_VAR 0 11
57601: PUSH
57602: LD_VAR 0 9
57606: PUSH
57607: LD_INT 1
57609: ARRAY
57610: ST_TO_ADDR
// if p then
57611: LD_VAR 0 11
57615: IFFALSE 57640
// result := Replace ( result , 4 , p ) ;
57617: LD_ADDR_VAR 0 2
57621: PUSH
57622: LD_VAR 0 2
57626: PPUSH
57627: LD_INT 4
57629: PPUSH
57630: LD_VAR 0 11
57634: PPUSH
57635: CALL_OW 1
57639: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57640: LD_ADDR_VAR 0 4
57644: PUSH
57645: LD_VAR 0 4
57649: PUSH
57650: LD_VAR 0 7
57654: DIFF
57655: ST_TO_ADDR
// if tmp and mech < 6 then
57656: LD_VAR 0 4
57660: PUSH
57661: LD_VAR 0 7
57665: PUSH
57666: LD_INT 6
57668: LESS
57669: AND
57670: IFFALSE 57852
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
57672: LD_ADDR_VAR 0 9
57676: PUSH
57677: LD_VAR 0 4
57681: PUSH
57682: LD_VAR 0 7
57686: DIFF
57687: PPUSH
57688: LD_INT 3
57690: PPUSH
57691: CALL 47913 0 2
57695: ST_TO_ADDR
// p := [ ] ;
57696: LD_ADDR_VAR 0 11
57700: PUSH
57701: EMPTY
57702: ST_TO_ADDR
// if sort then
57703: LD_VAR 0 9
57707: IFFALSE 57823
// for i = 1 to 6 - mech do
57709: LD_ADDR_VAR 0 3
57713: PUSH
57714: DOUBLE
57715: LD_INT 1
57717: DEC
57718: ST_TO_ADDR
57719: LD_INT 6
57721: PUSH
57722: LD_VAR 0 7
57726: MINUS
57727: PUSH
57728: FOR_TO
57729: IFFALSE 57821
// begin if i = sort then
57731: LD_VAR 0 3
57735: PUSH
57736: LD_VAR 0 9
57740: EQUAL
57741: IFFALSE 57745
// break ;
57743: GO 57821
// if GetClass ( i ) = 3 then
57745: LD_VAR 0 3
57749: PPUSH
57750: CALL_OW 257
57754: PUSH
57755: LD_INT 3
57757: EQUAL
57758: IFFALSE 57762
// continue ;
57760: GO 57728
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57762: LD_ADDR_VAR 0 11
57766: PUSH
57767: LD_VAR 0 11
57771: PPUSH
57772: LD_VAR 0 11
57776: PUSH
57777: LD_INT 1
57779: PLUS
57780: PPUSH
57781: LD_VAR 0 9
57785: PUSH
57786: LD_VAR 0 3
57790: ARRAY
57791: PPUSH
57792: CALL_OW 2
57796: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57797: LD_ADDR_VAR 0 4
57801: PUSH
57802: LD_VAR 0 4
57806: PUSH
57807: LD_VAR 0 9
57811: PUSH
57812: LD_VAR 0 3
57816: ARRAY
57817: DIFF
57818: ST_TO_ADDR
// end ;
57819: GO 57728
57821: POP
57822: POP
// if p then
57823: LD_VAR 0 11
57827: IFFALSE 57852
// result := Replace ( result , 3 , p ) ;
57829: LD_ADDR_VAR 0 2
57833: PUSH
57834: LD_VAR 0 2
57838: PPUSH
57839: LD_INT 3
57841: PPUSH
57842: LD_VAR 0 11
57846: PPUSH
57847: CALL_OW 1
57851: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: LD_VAR 0 4
57861: PUSH
57862: LD_VAR 0 6
57866: DIFF
57867: ST_TO_ADDR
// if tmp and eng < 4 then
57868: LD_VAR 0 4
57872: PUSH
57873: LD_VAR 0 6
57877: PUSH
57878: LD_INT 4
57880: LESS
57881: AND
57882: IFFALSE 58072
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
57884: LD_ADDR_VAR 0 9
57888: PUSH
57889: LD_VAR 0 4
57893: PUSH
57894: LD_VAR 0 7
57898: PUSH
57899: LD_VAR 0 6
57903: UNION
57904: DIFF
57905: PPUSH
57906: LD_INT 2
57908: PPUSH
57909: CALL 47913 0 2
57913: ST_TO_ADDR
// p := [ ] ;
57914: LD_ADDR_VAR 0 11
57918: PUSH
57919: EMPTY
57920: ST_TO_ADDR
// if sort then
57921: LD_VAR 0 9
57925: IFFALSE 58041
// for i = 1 to 4 - eng do
57927: LD_ADDR_VAR 0 3
57931: PUSH
57932: DOUBLE
57933: LD_INT 1
57935: DEC
57936: ST_TO_ADDR
57937: LD_INT 4
57939: PUSH
57940: LD_VAR 0 6
57944: MINUS
57945: PUSH
57946: FOR_TO
57947: IFFALSE 58039
// begin if i = sort then
57949: LD_VAR 0 3
57953: PUSH
57954: LD_VAR 0 9
57958: EQUAL
57959: IFFALSE 57963
// break ;
57961: GO 58039
// if GetClass ( i ) = 2 then
57963: LD_VAR 0 3
57967: PPUSH
57968: CALL_OW 257
57972: PUSH
57973: LD_INT 2
57975: EQUAL
57976: IFFALSE 57980
// continue ;
57978: GO 57946
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57980: LD_ADDR_VAR 0 11
57984: PUSH
57985: LD_VAR 0 11
57989: PPUSH
57990: LD_VAR 0 11
57994: PUSH
57995: LD_INT 1
57997: PLUS
57998: PPUSH
57999: LD_VAR 0 9
58003: PUSH
58004: LD_VAR 0 3
58008: ARRAY
58009: PPUSH
58010: CALL_OW 2
58014: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
58015: LD_ADDR_VAR 0 4
58019: PUSH
58020: LD_VAR 0 4
58024: PUSH
58025: LD_VAR 0 9
58029: PUSH
58030: LD_VAR 0 3
58034: ARRAY
58035: DIFF
58036: ST_TO_ADDR
// end ;
58037: GO 57946
58039: POP
58040: POP
// if p then
58041: LD_VAR 0 11
58045: IFFALSE 58070
// result := Replace ( result , 2 , p ) ;
58047: LD_ADDR_VAR 0 2
58051: PUSH
58052: LD_VAR 0 2
58056: PPUSH
58057: LD_INT 2
58059: PPUSH
58060: LD_VAR 0 11
58064: PPUSH
58065: CALL_OW 1
58069: ST_TO_ADDR
// end else
58070: GO 58116
// for i = eng downto 5 do
58072: LD_ADDR_VAR 0 3
58076: PUSH
58077: DOUBLE
58078: LD_VAR 0 6
58082: INC
58083: ST_TO_ADDR
58084: LD_INT 5
58086: PUSH
58087: FOR_DOWNTO
58088: IFFALSE 58114
// tmp := tmp union eng [ i ] ;
58090: LD_ADDR_VAR 0 4
58094: PUSH
58095: LD_VAR 0 4
58099: PUSH
58100: LD_VAR 0 6
58104: PUSH
58105: LD_VAR 0 3
58109: ARRAY
58110: UNION
58111: ST_TO_ADDR
58112: GO 58087
58114: POP
58115: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
58116: LD_ADDR_VAR 0 2
58120: PUSH
58121: LD_VAR 0 2
58125: PPUSH
58126: LD_INT 1
58128: PPUSH
58129: LD_VAR 0 4
58133: PUSH
58134: LD_VAR 0 5
58138: DIFF
58139: PPUSH
58140: CALL_OW 1
58144: ST_TO_ADDR
// exit ;
58145: GO 58147
// end ; end ;
58147: LD_VAR 0 2
58151: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
58152: LD_INT 0
58154: PPUSH
58155: PPUSH
58156: PPUSH
// if not mc_bases then
58157: LD_EXP 64
58161: NOT
58162: IFFALSE 58166
// exit ;
58164: GO 58272
// for i = 1 to mc_bases do
58166: LD_ADDR_VAR 0 2
58170: PUSH
58171: DOUBLE
58172: LD_INT 1
58174: DEC
58175: ST_TO_ADDR
58176: LD_EXP 64
58180: PUSH
58181: FOR_TO
58182: IFFALSE 58263
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58184: LD_ADDR_VAR 0 3
58188: PUSH
58189: LD_EXP 64
58193: PUSH
58194: LD_VAR 0 2
58198: ARRAY
58199: PPUSH
58200: LD_INT 21
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: LD_INT 24
58215: PUSH
58216: LD_INT 1000
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PPUSH
58231: CALL_OW 72
58235: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
58236: LD_ADDR_EXP 65
58240: PUSH
58241: LD_EXP 65
58245: PPUSH
58246: LD_VAR 0 2
58250: PPUSH
58251: LD_VAR 0 3
58255: PPUSH
58256: CALL_OW 1
58260: ST_TO_ADDR
// end ;
58261: GO 58181
58263: POP
58264: POP
// RaiseSailEvent ( 101 ) ;
58265: LD_INT 101
58267: PPUSH
58268: CALL_OW 427
// end ;
58272: LD_VAR 0 1
58276: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
58277: LD_INT 0
58279: PPUSH
58280: PPUSH
58281: PPUSH
58282: PPUSH
58283: PPUSH
58284: PPUSH
58285: PPUSH
// if not mc_bases then
58286: LD_EXP 64
58290: NOT
58291: IFFALSE 58295
// exit ;
58293: GO 58857
// for i = 1 to mc_bases do
58295: LD_ADDR_VAR 0 2
58299: PUSH
58300: DOUBLE
58301: LD_INT 1
58303: DEC
58304: ST_TO_ADDR
58305: LD_EXP 64
58309: PUSH
58310: FOR_TO
58311: IFFALSE 58848
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
58313: LD_ADDR_VAR 0 5
58317: PUSH
58318: LD_EXP 64
58322: PUSH
58323: LD_VAR 0 2
58327: ARRAY
58328: PUSH
58329: LD_EXP 93
58333: PUSH
58334: LD_VAR 0 2
58338: ARRAY
58339: UNION
58340: PPUSH
58341: LD_INT 21
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: LD_INT 54
58359: PUSH
58360: EMPTY
58361: LIST
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 24
58372: PUSH
58373: LD_INT 800
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PPUSH
58393: CALL_OW 72
58397: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
58398: LD_ADDR_VAR 0 6
58402: PUSH
58403: LD_EXP 64
58407: PUSH
58408: LD_VAR 0 2
58412: ARRAY
58413: PPUSH
58414: LD_INT 21
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: LD_INT 54
58432: PUSH
58433: EMPTY
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 24
58445: PUSH
58446: LD_INT 250
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PPUSH
58466: CALL_OW 72
58470: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
58471: LD_ADDR_VAR 0 7
58475: PUSH
58476: LD_VAR 0 5
58480: PUSH
58481: LD_VAR 0 6
58485: DIFF
58486: ST_TO_ADDR
// if not need_heal_1 then
58487: LD_VAR 0 6
58491: NOT
58492: IFFALSE 58525
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
58494: LD_ADDR_EXP 67
58498: PUSH
58499: LD_EXP 67
58503: PPUSH
58504: LD_VAR 0 2
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PPUSH
58516: EMPTY
58517: PPUSH
58518: CALL 18364 0 3
58522: ST_TO_ADDR
58523: GO 58595
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
58525: LD_ADDR_EXP 67
58529: PUSH
58530: LD_EXP 67
58534: PPUSH
58535: LD_VAR 0 2
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PPUSH
58547: LD_EXP 67
58551: PUSH
58552: LD_VAR 0 2
58556: ARRAY
58557: PUSH
58558: LD_INT 1
58560: ARRAY
58561: PPUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 24
58567: PUSH
58568: LD_INT 1000
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PPUSH
58579: CALL_OW 72
58583: PUSH
58584: LD_VAR 0 6
58588: UNION
58589: PPUSH
58590: CALL 18364 0 3
58594: ST_TO_ADDR
// if not need_heal_2 then
58595: LD_VAR 0 7
58599: NOT
58600: IFFALSE 58633
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
58602: LD_ADDR_EXP 67
58606: PUSH
58607: LD_EXP 67
58611: PPUSH
58612: LD_VAR 0 2
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PPUSH
58624: EMPTY
58625: PPUSH
58626: CALL 18364 0 3
58630: ST_TO_ADDR
58631: GO 58665
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
58633: LD_ADDR_EXP 67
58637: PUSH
58638: LD_EXP 67
58642: PPUSH
58643: LD_VAR 0 2
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PPUSH
58655: LD_VAR 0 7
58659: PPUSH
58660: CALL 18364 0 3
58664: ST_TO_ADDR
// if need_heal_2 then
58665: LD_VAR 0 7
58669: IFFALSE 58830
// for j in need_heal_2 do
58671: LD_ADDR_VAR 0 3
58675: PUSH
58676: LD_VAR 0 7
58680: PUSH
58681: FOR_IN
58682: IFFALSE 58828
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58684: LD_ADDR_VAR 0 5
58688: PUSH
58689: LD_EXP 64
58693: PUSH
58694: LD_VAR 0 2
58698: ARRAY
58699: PPUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 30
58705: PUSH
58706: LD_INT 6
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 30
58715: PUSH
58716: LD_INT 7
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 30
58725: PUSH
58726: LD_INT 8
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 30
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 30
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: PPUSH
58761: CALL_OW 72
58765: ST_TO_ADDR
// if tmp then
58766: LD_VAR 0 5
58770: IFFALSE 58826
// begin k := NearestUnitToUnit ( tmp , j ) ;
58772: LD_ADDR_VAR 0 4
58776: PUSH
58777: LD_VAR 0 5
58781: PPUSH
58782: LD_VAR 0 3
58786: PPUSH
58787: CALL_OW 74
58791: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
58792: LD_VAR 0 3
58796: PPUSH
58797: LD_VAR 0 4
58801: PPUSH
58802: CALL_OW 296
58806: PUSH
58807: LD_INT 5
58809: GREATER
58810: IFFALSE 58826
// ComMoveUnit ( j , k ) ;
58812: LD_VAR 0 3
58816: PPUSH
58817: LD_VAR 0 4
58821: PPUSH
58822: CALL_OW 112
// end ; end ;
58826: GO 58681
58828: POP
58829: POP
// if not need_heal_1 and not need_heal_2 then
58830: LD_VAR 0 6
58834: NOT
58835: PUSH
58836: LD_VAR 0 7
58840: NOT
58841: AND
58842: IFFALSE 58846
// continue ;
58844: GO 58310
// end ;
58846: GO 58310
58848: POP
58849: POP
// RaiseSailEvent ( 102 ) ;
58850: LD_INT 102
58852: PPUSH
58853: CALL_OW 427
// end ;
58857: LD_VAR 0 1
58861: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
58862: LD_INT 0
58864: PPUSH
58865: PPUSH
58866: PPUSH
58867: PPUSH
58868: PPUSH
58869: PPUSH
58870: PPUSH
58871: PPUSH
// if not mc_bases then
58872: LD_EXP 64
58876: NOT
58877: IFFALSE 58881
// exit ;
58879: GO 59716
// for i = 1 to mc_bases do
58881: LD_ADDR_VAR 0 2
58885: PUSH
58886: DOUBLE
58887: LD_INT 1
58889: DEC
58890: ST_TO_ADDR
58891: LD_EXP 64
58895: PUSH
58896: FOR_TO
58897: IFFALSE 59714
// begin if not mc_building_need_repair [ i ] then
58899: LD_EXP 65
58903: PUSH
58904: LD_VAR 0 2
58908: ARRAY
58909: NOT
58910: IFFALSE 59084
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
58912: LD_ADDR_VAR 0 6
58916: PUSH
58917: LD_EXP 83
58921: PUSH
58922: LD_VAR 0 2
58926: ARRAY
58927: PPUSH
58928: LD_INT 3
58930: PUSH
58931: LD_INT 24
58933: PUSH
58934: LD_INT 1000
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 34
58950: PUSH
58951: LD_INT 13
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 34
58960: PUSH
58961: LD_INT 52
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PPUSH
58977: CALL_OW 72
58981: ST_TO_ADDR
// if cranes then
58982: LD_VAR 0 6
58986: IFFALSE 59048
// for j in cranes do
58988: LD_ADDR_VAR 0 3
58992: PUSH
58993: LD_VAR 0 6
58997: PUSH
58998: FOR_IN
58999: IFFALSE 59046
// if not IsInArea ( j , mc_parking [ i ] ) then
59001: LD_VAR 0 3
59005: PPUSH
59006: LD_EXP 88
59010: PUSH
59011: LD_VAR 0 2
59015: ARRAY
59016: PPUSH
59017: CALL_OW 308
59021: NOT
59022: IFFALSE 59044
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59024: LD_VAR 0 3
59028: PPUSH
59029: LD_EXP 88
59033: PUSH
59034: LD_VAR 0 2
59038: ARRAY
59039: PPUSH
59040: CALL_OW 113
59044: GO 58998
59046: POP
59047: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
59048: LD_ADDR_EXP 66
59052: PUSH
59053: LD_EXP 66
59057: PPUSH
59058: LD_VAR 0 2
59062: PPUSH
59063: EMPTY
59064: PPUSH
59065: CALL_OW 1
59069: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
59070: LD_VAR 0 2
59074: PPUSH
59075: LD_INT 101
59077: PPUSH
59078: CALL 53985 0 2
// continue ;
59082: GO 58896
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
59084: LD_ADDR_EXP 70
59088: PUSH
59089: LD_EXP 70
59093: PPUSH
59094: LD_VAR 0 2
59098: PPUSH
59099: EMPTY
59100: PPUSH
59101: CALL_OW 1
59105: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59106: LD_VAR 0 2
59110: PPUSH
59111: LD_INT 103
59113: PPUSH
59114: CALL 53985 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
59118: LD_ADDR_VAR 0 5
59122: PUSH
59123: LD_EXP 64
59127: PUSH
59128: LD_VAR 0 2
59132: ARRAY
59133: PUSH
59134: LD_EXP 93
59138: PUSH
59139: LD_VAR 0 2
59143: ARRAY
59144: UNION
59145: PPUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 25
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 25
59161: PUSH
59162: LD_INT 16
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: PPUSH
59177: CALL_OW 72
59181: PUSH
59182: LD_EXP 67
59186: PUSH
59187: LD_VAR 0 2
59191: ARRAY
59192: PUSH
59193: LD_INT 1
59195: ARRAY
59196: PUSH
59197: LD_EXP 67
59201: PUSH
59202: LD_VAR 0 2
59206: ARRAY
59207: PUSH
59208: LD_INT 2
59210: ARRAY
59211: UNION
59212: DIFF
59213: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
59214: LD_ADDR_VAR 0 6
59218: PUSH
59219: LD_EXP 83
59223: PUSH
59224: LD_VAR 0 2
59228: ARRAY
59229: PPUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 34
59235: PUSH
59236: LD_INT 13
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 34
59245: PUSH
59246: LD_INT 52
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: PPUSH
59258: CALL_OW 72
59262: ST_TO_ADDR
// if cranes then
59263: LD_VAR 0 6
59267: IFFALSE 59403
// begin for j in cranes do
59269: LD_ADDR_VAR 0 3
59273: PUSH
59274: LD_VAR 0 6
59278: PUSH
59279: FOR_IN
59280: IFFALSE 59401
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
59282: LD_VAR 0 3
59286: PPUSH
59287: CALL_OW 256
59291: PUSH
59292: LD_INT 500
59294: GREATEREQUAL
59295: PUSH
59296: LD_VAR 0 3
59300: PPUSH
59301: CALL_OW 314
59305: NOT
59306: AND
59307: IFFALSE 59341
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
59309: LD_VAR 0 3
59313: PPUSH
59314: LD_EXP 65
59318: PUSH
59319: LD_VAR 0 2
59323: ARRAY
59324: PPUSH
59325: LD_VAR 0 3
59329: PPUSH
59330: CALL_OW 74
59334: PPUSH
59335: CALL_OW 130
59339: GO 59399
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
59341: LD_VAR 0 3
59345: PPUSH
59346: CALL_OW 256
59350: PUSH
59351: LD_INT 500
59353: LESS
59354: PUSH
59355: LD_VAR 0 3
59359: PPUSH
59360: LD_EXP 88
59364: PUSH
59365: LD_VAR 0 2
59369: ARRAY
59370: PPUSH
59371: CALL_OW 308
59375: NOT
59376: AND
59377: IFFALSE 59399
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59379: LD_VAR 0 3
59383: PPUSH
59384: LD_EXP 88
59388: PUSH
59389: LD_VAR 0 2
59393: ARRAY
59394: PPUSH
59395: CALL_OW 113
59399: GO 59279
59401: POP
59402: POP
// end ; if tmp > 3 then
59403: LD_VAR 0 5
59407: PUSH
59408: LD_INT 3
59410: GREATER
59411: IFFALSE 59431
// tmp := ShrinkArray ( tmp , 4 ) ;
59413: LD_ADDR_VAR 0 5
59417: PUSH
59418: LD_VAR 0 5
59422: PPUSH
59423: LD_INT 4
59425: PPUSH
59426: CALL 49603 0 2
59430: ST_TO_ADDR
// if not tmp then
59431: LD_VAR 0 5
59435: NOT
59436: IFFALSE 59440
// continue ;
59438: GO 58896
// for j in tmp do
59440: LD_ADDR_VAR 0 3
59444: PUSH
59445: LD_VAR 0 5
59449: PUSH
59450: FOR_IN
59451: IFFALSE 59710
// begin if IsInUnit ( j ) then
59453: LD_VAR 0 3
59457: PPUSH
59458: CALL_OW 310
59462: IFFALSE 59473
// ComExitBuilding ( j ) ;
59464: LD_VAR 0 3
59468: PPUSH
59469: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
59473: LD_VAR 0 3
59477: PUSH
59478: LD_EXP 66
59482: PUSH
59483: LD_VAR 0 2
59487: ARRAY
59488: IN
59489: NOT
59490: IFFALSE 59548
// begin SetTag ( j , 101 ) ;
59492: LD_VAR 0 3
59496: PPUSH
59497: LD_INT 101
59499: PPUSH
59500: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
59504: LD_ADDR_EXP 66
59508: PUSH
59509: LD_EXP 66
59513: PPUSH
59514: LD_VAR 0 2
59518: PUSH
59519: LD_EXP 66
59523: PUSH
59524: LD_VAR 0 2
59528: ARRAY
59529: PUSH
59530: LD_INT 1
59532: PLUS
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PPUSH
59538: LD_VAR 0 3
59542: PPUSH
59543: CALL 18364 0 3
59547: ST_TO_ADDR
// end ; wait ( 1 ) ;
59548: LD_INT 1
59550: PPUSH
59551: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
59555: LD_ADDR_VAR 0 7
59559: PUSH
59560: LD_EXP 65
59564: PUSH
59565: LD_VAR 0 2
59569: ARRAY
59570: ST_TO_ADDR
// if mc_scan [ i ] then
59571: LD_EXP 87
59575: PUSH
59576: LD_VAR 0 2
59580: ARRAY
59581: IFFALSE 59643
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
59583: LD_ADDR_VAR 0 7
59587: PUSH
59588: LD_EXP 65
59592: PUSH
59593: LD_VAR 0 2
59597: ARRAY
59598: PPUSH
59599: LD_INT 3
59601: PUSH
59602: LD_INT 30
59604: PUSH
59605: LD_INT 32
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 30
59614: PUSH
59615: LD_INT 33
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 30
59624: PUSH
59625: LD_INT 31
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: PPUSH
59638: CALL_OW 72
59642: ST_TO_ADDR
// if not to_repair_tmp then
59643: LD_VAR 0 7
59647: NOT
59648: IFFALSE 59652
// continue ;
59650: GO 59450
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
59652: LD_ADDR_VAR 0 8
59656: PUSH
59657: LD_VAR 0 7
59661: PPUSH
59662: LD_VAR 0 3
59666: PPUSH
59667: CALL_OW 74
59671: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
59672: LD_VAR 0 8
59676: PPUSH
59677: LD_INT 16
59679: PPUSH
59680: CALL 20957 0 2
59684: PUSH
59685: LD_INT 4
59687: ARRAY
59688: PUSH
59689: LD_INT 5
59691: LESS
59692: IFFALSE 59708
// ComRepairBuilding ( j , to_repair ) ;
59694: LD_VAR 0 3
59698: PPUSH
59699: LD_VAR 0 8
59703: PPUSH
59704: CALL_OW 130
// end ;
59708: GO 59450
59710: POP
59711: POP
// end ;
59712: GO 58896
59714: POP
59715: POP
// end ;
59716: LD_VAR 0 1
59720: RET
// export function MC_Heal ; var i , j , tmp ; begin
59721: LD_INT 0
59723: PPUSH
59724: PPUSH
59725: PPUSH
59726: PPUSH
// if not mc_bases then
59727: LD_EXP 64
59731: NOT
59732: IFFALSE 59736
// exit ;
59734: GO 60138
// for i = 1 to mc_bases do
59736: LD_ADDR_VAR 0 2
59740: PUSH
59741: DOUBLE
59742: LD_INT 1
59744: DEC
59745: ST_TO_ADDR
59746: LD_EXP 64
59750: PUSH
59751: FOR_TO
59752: IFFALSE 60136
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
59754: LD_EXP 67
59758: PUSH
59759: LD_VAR 0 2
59763: ARRAY
59764: PUSH
59765: LD_INT 1
59767: ARRAY
59768: NOT
59769: PUSH
59770: LD_EXP 67
59774: PUSH
59775: LD_VAR 0 2
59779: ARRAY
59780: PUSH
59781: LD_INT 2
59783: ARRAY
59784: NOT
59785: AND
59786: IFFALSE 59824
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
59788: LD_ADDR_EXP 68
59792: PUSH
59793: LD_EXP 68
59797: PPUSH
59798: LD_VAR 0 2
59802: PPUSH
59803: EMPTY
59804: PPUSH
59805: CALL_OW 1
59809: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
59810: LD_VAR 0 2
59814: PPUSH
59815: LD_INT 102
59817: PPUSH
59818: CALL 53985 0 2
// continue ;
59822: GO 59751
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59824: LD_ADDR_VAR 0 4
59828: PUSH
59829: LD_EXP 64
59833: PUSH
59834: LD_VAR 0 2
59838: ARRAY
59839: PPUSH
59840: LD_INT 25
59842: PUSH
59843: LD_INT 4
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PPUSH
59850: CALL_OW 72
59854: ST_TO_ADDR
// if not tmp then
59855: LD_VAR 0 4
59859: NOT
59860: IFFALSE 59864
// continue ;
59862: GO 59751
// if mc_taming [ i ] then
59864: LD_EXP 95
59868: PUSH
59869: LD_VAR 0 2
59873: ARRAY
59874: IFFALSE 59898
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59876: LD_ADDR_EXP 95
59880: PUSH
59881: LD_EXP 95
59885: PPUSH
59886: LD_VAR 0 2
59890: PPUSH
59891: EMPTY
59892: PPUSH
59893: CALL_OW 1
59897: ST_TO_ADDR
// for j in tmp do
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: LD_VAR 0 4
59907: PUSH
59908: FOR_IN
59909: IFFALSE 60132
// begin if IsInUnit ( j ) then
59911: LD_VAR 0 3
59915: PPUSH
59916: CALL_OW 310
59920: IFFALSE 59931
// ComExitBuilding ( j ) ;
59922: LD_VAR 0 3
59926: PPUSH
59927: CALL_OW 122
// if not j in mc_healers [ i ] then
59931: LD_VAR 0 3
59935: PUSH
59936: LD_EXP 68
59940: PUSH
59941: LD_VAR 0 2
59945: ARRAY
59946: IN
59947: NOT
59948: IFFALSE 59994
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
59950: LD_ADDR_EXP 68
59954: PUSH
59955: LD_EXP 68
59959: PPUSH
59960: LD_VAR 0 2
59964: PUSH
59965: LD_EXP 68
59969: PUSH
59970: LD_VAR 0 2
59974: ARRAY
59975: PUSH
59976: LD_INT 1
59978: PLUS
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PPUSH
59984: LD_VAR 0 3
59988: PPUSH
59989: CALL 18364 0 3
59993: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
59994: LD_VAR 0 3
59998: PPUSH
59999: CALL_OW 110
60003: PUSH
60004: LD_INT 102
60006: NONEQUAL
60007: IFFALSE 60021
// SetTag ( j , 102 ) ;
60009: LD_VAR 0 3
60013: PPUSH
60014: LD_INT 102
60016: PPUSH
60017: CALL_OW 109
// Wait ( 3 ) ;
60021: LD_INT 3
60023: PPUSH
60024: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
60028: LD_EXP 67
60032: PUSH
60033: LD_VAR 0 2
60037: ARRAY
60038: PUSH
60039: LD_INT 1
60041: ARRAY
60042: IFFALSE 60074
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
60044: LD_VAR 0 3
60048: PPUSH
60049: LD_EXP 67
60053: PUSH
60054: LD_VAR 0 2
60058: ARRAY
60059: PUSH
60060: LD_INT 1
60062: ARRAY
60063: PUSH
60064: LD_INT 1
60066: ARRAY
60067: PPUSH
60068: CALL_OW 128
60072: GO 60130
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
60074: LD_VAR 0 3
60078: PPUSH
60079: CALL_OW 314
60083: NOT
60084: PUSH
60085: LD_EXP 67
60089: PUSH
60090: LD_VAR 0 2
60094: ARRAY
60095: PUSH
60096: LD_INT 2
60098: ARRAY
60099: AND
60100: IFFALSE 60130
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
60102: LD_VAR 0 3
60106: PPUSH
60107: LD_EXP 67
60111: PUSH
60112: LD_VAR 0 2
60116: ARRAY
60117: PUSH
60118: LD_INT 2
60120: ARRAY
60121: PUSH
60122: LD_INT 1
60124: ARRAY
60125: PPUSH
60126: CALL_OW 128
// end ;
60130: GO 59908
60132: POP
60133: POP
// end ;
60134: GO 59751
60136: POP
60137: POP
// end ;
60138: LD_VAR 0 1
60142: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
60143: LD_INT 0
60145: PPUSH
60146: PPUSH
60147: PPUSH
60148: PPUSH
60149: PPUSH
// if not mc_bases then
60150: LD_EXP 64
60154: NOT
60155: IFFALSE 60159
// exit ;
60157: GO 61302
// for i = 1 to mc_bases do
60159: LD_ADDR_VAR 0 2
60163: PUSH
60164: DOUBLE
60165: LD_INT 1
60167: DEC
60168: ST_TO_ADDR
60169: LD_EXP 64
60173: PUSH
60174: FOR_TO
60175: IFFALSE 61300
// begin if mc_scan [ i ] then
60177: LD_EXP 87
60181: PUSH
60182: LD_VAR 0 2
60186: ARRAY
60187: IFFALSE 60191
// continue ;
60189: GO 60174
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
60191: LD_EXP 69
60195: PUSH
60196: LD_VAR 0 2
60200: ARRAY
60201: NOT
60202: PUSH
60203: LD_EXP 71
60207: PUSH
60208: LD_VAR 0 2
60212: ARRAY
60213: NOT
60214: AND
60215: PUSH
60216: LD_EXP 70
60220: PUSH
60221: LD_VAR 0 2
60225: ARRAY
60226: AND
60227: IFFALSE 60265
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
60229: LD_ADDR_EXP 70
60233: PUSH
60234: LD_EXP 70
60238: PPUSH
60239: LD_VAR 0 2
60243: PPUSH
60244: EMPTY
60245: PPUSH
60246: CALL_OW 1
60250: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
60251: LD_VAR 0 2
60255: PPUSH
60256: LD_INT 103
60258: PPUSH
60259: CALL 53985 0 2
// continue ;
60263: GO 60174
// end ; if mc_construct_list [ i ] then
60265: LD_EXP 71
60269: PUSH
60270: LD_VAR 0 2
60274: ARRAY
60275: IFFALSE 60495
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60277: LD_ADDR_VAR 0 4
60281: PUSH
60282: LD_EXP 64
60286: PUSH
60287: LD_VAR 0 2
60291: ARRAY
60292: PPUSH
60293: LD_INT 25
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PPUSH
60303: CALL_OW 72
60307: PUSH
60308: LD_EXP 66
60312: PUSH
60313: LD_VAR 0 2
60317: ARRAY
60318: DIFF
60319: ST_TO_ADDR
// if not tmp then
60320: LD_VAR 0 4
60324: NOT
60325: IFFALSE 60329
// continue ;
60327: GO 60174
// for j in tmp do
60329: LD_ADDR_VAR 0 3
60333: PUSH
60334: LD_VAR 0 4
60338: PUSH
60339: FOR_IN
60340: IFFALSE 60491
// begin if not mc_builders [ i ] then
60342: LD_EXP 70
60346: PUSH
60347: LD_VAR 0 2
60351: ARRAY
60352: NOT
60353: IFFALSE 60411
// begin SetTag ( j , 103 ) ;
60355: LD_VAR 0 3
60359: PPUSH
60360: LD_INT 103
60362: PPUSH
60363: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60367: LD_ADDR_EXP 70
60371: PUSH
60372: LD_EXP 70
60376: PPUSH
60377: LD_VAR 0 2
60381: PUSH
60382: LD_EXP 70
60386: PUSH
60387: LD_VAR 0 2
60391: ARRAY
60392: PUSH
60393: LD_INT 1
60395: PLUS
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PPUSH
60401: LD_VAR 0 3
60405: PPUSH
60406: CALL 18364 0 3
60410: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60411: LD_VAR 0 3
60415: PPUSH
60416: CALL_OW 310
60420: IFFALSE 60431
// ComExitBuilding ( j ) ;
60422: LD_VAR 0 3
60426: PPUSH
60427: CALL_OW 122
// wait ( 3 ) ;
60431: LD_INT 3
60433: PPUSH
60434: CALL_OW 67
// if not mc_construct_list [ i ] then
60438: LD_EXP 71
60442: PUSH
60443: LD_VAR 0 2
60447: ARRAY
60448: NOT
60449: IFFALSE 60453
// break ;
60451: GO 60491
// if not HasTask ( j ) then
60453: LD_VAR 0 3
60457: PPUSH
60458: CALL_OW 314
60462: NOT
60463: IFFALSE 60489
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
60465: LD_VAR 0 3
60469: PPUSH
60470: LD_EXP 71
60474: PUSH
60475: LD_VAR 0 2
60479: ARRAY
60480: PUSH
60481: LD_INT 1
60483: ARRAY
60484: PPUSH
60485: CALL 21215 0 2
// end ;
60489: GO 60339
60491: POP
60492: POP
// end else
60493: GO 61298
// if mc_build_list [ i ] then
60495: LD_EXP 69
60499: PUSH
60500: LD_VAR 0 2
60504: ARRAY
60505: IFFALSE 61298
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60507: LD_ADDR_VAR 0 5
60511: PUSH
60512: LD_EXP 64
60516: PUSH
60517: LD_VAR 0 2
60521: ARRAY
60522: PPUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 30
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 30
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: PPUSH
60551: CALL_OW 72
60555: ST_TO_ADDR
// if depot then
60556: LD_VAR 0 5
60560: IFFALSE 60578
// depot := depot [ 1 ] else
60562: LD_ADDR_VAR 0 5
60566: PUSH
60567: LD_VAR 0 5
60571: PUSH
60572: LD_INT 1
60574: ARRAY
60575: ST_TO_ADDR
60576: GO 60586
// depot := 0 ;
60578: LD_ADDR_VAR 0 5
60582: PUSH
60583: LD_INT 0
60585: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
60586: LD_EXP 69
60590: PUSH
60591: LD_VAR 0 2
60595: ARRAY
60596: PUSH
60597: LD_INT 1
60599: ARRAY
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: PPUSH
60605: CALL 21045 0 1
60609: PUSH
60610: LD_EXP 64
60614: PUSH
60615: LD_VAR 0 2
60619: ARRAY
60620: PPUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 30
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 30
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: PPUSH
60649: CALL_OW 72
60653: NOT
60654: AND
60655: IFFALSE 60760
// begin for j = 1 to mc_build_list [ i ] do
60657: LD_ADDR_VAR 0 3
60661: PUSH
60662: DOUBLE
60663: LD_INT 1
60665: DEC
60666: ST_TO_ADDR
60667: LD_EXP 69
60671: PUSH
60672: LD_VAR 0 2
60676: ARRAY
60677: PUSH
60678: FOR_TO
60679: IFFALSE 60758
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
60681: LD_EXP 69
60685: PUSH
60686: LD_VAR 0 2
60690: ARRAY
60691: PUSH
60692: LD_VAR 0 3
60696: ARRAY
60697: PUSH
60698: LD_INT 1
60700: ARRAY
60701: PUSH
60702: LD_INT 2
60704: EQUAL
60705: IFFALSE 60756
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
60707: LD_ADDR_EXP 69
60711: PUSH
60712: LD_EXP 69
60716: PPUSH
60717: LD_VAR 0 2
60721: PPUSH
60722: LD_EXP 69
60726: PUSH
60727: LD_VAR 0 2
60731: ARRAY
60732: PPUSH
60733: LD_VAR 0 3
60737: PPUSH
60738: LD_INT 1
60740: PPUSH
60741: LD_INT 0
60743: PPUSH
60744: CALL 17782 0 4
60748: PPUSH
60749: CALL_OW 1
60753: ST_TO_ADDR
// break ;
60754: GO 60758
// end ;
60756: GO 60678
60758: POP
60759: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
60760: LD_EXP 69
60764: PUSH
60765: LD_VAR 0 2
60769: ARRAY
60770: PUSH
60771: LD_INT 1
60773: ARRAY
60774: PUSH
60775: LD_INT 1
60777: ARRAY
60778: PUSH
60779: LD_INT 0
60781: EQUAL
60782: PUSH
60783: LD_VAR 0 5
60787: PUSH
60788: LD_VAR 0 5
60792: PPUSH
60793: LD_EXP 69
60797: PUSH
60798: LD_VAR 0 2
60802: ARRAY
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PUSH
60808: LD_INT 1
60810: ARRAY
60811: PPUSH
60812: LD_EXP 69
60816: PUSH
60817: LD_VAR 0 2
60821: ARRAY
60822: PUSH
60823: LD_INT 1
60825: ARRAY
60826: PUSH
60827: LD_INT 2
60829: ARRAY
60830: PPUSH
60831: LD_EXP 69
60835: PUSH
60836: LD_VAR 0 2
60840: ARRAY
60841: PUSH
60842: LD_INT 1
60844: ARRAY
60845: PUSH
60846: LD_INT 3
60848: ARRAY
60849: PPUSH
60850: LD_EXP 69
60854: PUSH
60855: LD_VAR 0 2
60859: ARRAY
60860: PUSH
60861: LD_INT 1
60863: ARRAY
60864: PUSH
60865: LD_INT 4
60867: ARRAY
60868: PPUSH
60869: CALL 25779 0 5
60873: AND
60874: OR
60875: IFFALSE 61156
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60877: LD_ADDR_VAR 0 4
60881: PUSH
60882: LD_EXP 64
60886: PUSH
60887: LD_VAR 0 2
60891: ARRAY
60892: PPUSH
60893: LD_INT 25
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PPUSH
60903: CALL_OW 72
60907: PUSH
60908: LD_EXP 66
60912: PUSH
60913: LD_VAR 0 2
60917: ARRAY
60918: DIFF
60919: ST_TO_ADDR
// if not tmp then
60920: LD_VAR 0 4
60924: NOT
60925: IFFALSE 60929
// continue ;
60927: GO 60174
// for j in tmp do
60929: LD_ADDR_VAR 0 3
60933: PUSH
60934: LD_VAR 0 4
60938: PUSH
60939: FOR_IN
60940: IFFALSE 61152
// begin if not mc_builders [ i ] then
60942: LD_EXP 70
60946: PUSH
60947: LD_VAR 0 2
60951: ARRAY
60952: NOT
60953: IFFALSE 61011
// begin SetTag ( j , 103 ) ;
60955: LD_VAR 0 3
60959: PPUSH
60960: LD_INT 103
60962: PPUSH
60963: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60967: LD_ADDR_EXP 70
60971: PUSH
60972: LD_EXP 70
60976: PPUSH
60977: LD_VAR 0 2
60981: PUSH
60982: LD_EXP 70
60986: PUSH
60987: LD_VAR 0 2
60991: ARRAY
60992: PUSH
60993: LD_INT 1
60995: PLUS
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PPUSH
61001: LD_VAR 0 3
61005: PPUSH
61006: CALL 18364 0 3
61010: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
61011: LD_VAR 0 3
61015: PPUSH
61016: CALL_OW 310
61020: IFFALSE 61031
// ComExitBuilding ( j ) ;
61022: LD_VAR 0 3
61026: PPUSH
61027: CALL_OW 122
// wait ( 3 ) ;
61031: LD_INT 3
61033: PPUSH
61034: CALL_OW 67
// if not mc_build_list [ i ] then
61038: LD_EXP 69
61042: PUSH
61043: LD_VAR 0 2
61047: ARRAY
61048: NOT
61049: IFFALSE 61053
// break ;
61051: GO 61152
// if not HasTask ( j ) then
61053: LD_VAR 0 3
61057: PPUSH
61058: CALL_OW 314
61062: NOT
61063: IFFALSE 61150
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
61065: LD_VAR 0 3
61069: PPUSH
61070: LD_EXP 69
61074: PUSH
61075: LD_VAR 0 2
61079: ARRAY
61080: PUSH
61081: LD_INT 1
61083: ARRAY
61084: PUSH
61085: LD_INT 1
61087: ARRAY
61088: PPUSH
61089: LD_EXP 69
61093: PUSH
61094: LD_VAR 0 2
61098: ARRAY
61099: PUSH
61100: LD_INT 1
61102: ARRAY
61103: PUSH
61104: LD_INT 2
61106: ARRAY
61107: PPUSH
61108: LD_EXP 69
61112: PUSH
61113: LD_VAR 0 2
61117: ARRAY
61118: PUSH
61119: LD_INT 1
61121: ARRAY
61122: PUSH
61123: LD_INT 3
61125: ARRAY
61126: PPUSH
61127: LD_EXP 69
61131: PUSH
61132: LD_VAR 0 2
61136: ARRAY
61137: PUSH
61138: LD_INT 1
61140: ARRAY
61141: PUSH
61142: LD_INT 4
61144: ARRAY
61145: PPUSH
61146: CALL_OW 145
// end ;
61150: GO 60939
61152: POP
61153: POP
// end else
61154: GO 61298
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
61156: LD_EXP 64
61160: PUSH
61161: LD_VAR 0 2
61165: ARRAY
61166: PPUSH
61167: LD_EXP 69
61171: PUSH
61172: LD_VAR 0 2
61176: ARRAY
61177: PUSH
61178: LD_INT 1
61180: ARRAY
61181: PUSH
61182: LD_INT 1
61184: ARRAY
61185: PPUSH
61186: LD_EXP 69
61190: PUSH
61191: LD_VAR 0 2
61195: ARRAY
61196: PUSH
61197: LD_INT 1
61199: ARRAY
61200: PUSH
61201: LD_INT 2
61203: ARRAY
61204: PPUSH
61205: LD_EXP 69
61209: PUSH
61210: LD_VAR 0 2
61214: ARRAY
61215: PUSH
61216: LD_INT 1
61218: ARRAY
61219: PUSH
61220: LD_INT 3
61222: ARRAY
61223: PPUSH
61224: LD_EXP 69
61228: PUSH
61229: LD_VAR 0 2
61233: ARRAY
61234: PUSH
61235: LD_INT 1
61237: ARRAY
61238: PUSH
61239: LD_INT 4
61241: ARRAY
61242: PPUSH
61243: CALL 25115 0 5
61247: NOT
61248: IFFALSE 61298
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
61250: LD_ADDR_EXP 69
61254: PUSH
61255: LD_EXP 69
61259: PPUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: LD_EXP 69
61269: PUSH
61270: LD_VAR 0 2
61274: ARRAY
61275: PPUSH
61276: LD_INT 1
61278: PPUSH
61279: LD_INT 1
61281: NEG
61282: PPUSH
61283: LD_INT 0
61285: PPUSH
61286: CALL 17782 0 4
61290: PPUSH
61291: CALL_OW 1
61295: ST_TO_ADDR
// continue ;
61296: GO 60174
// end ; end ; end ;
61298: GO 60174
61300: POP
61301: POP
// end ;
61302: LD_VAR 0 1
61306: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
61307: LD_INT 0
61309: PPUSH
61310: PPUSH
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
// if not mc_bases then
61315: LD_EXP 64
61319: NOT
61320: IFFALSE 61324
// exit ;
61322: GO 61751
// for i = 1 to mc_bases do
61324: LD_ADDR_VAR 0 2
61328: PUSH
61329: DOUBLE
61330: LD_INT 1
61332: DEC
61333: ST_TO_ADDR
61334: LD_EXP 64
61338: PUSH
61339: FOR_TO
61340: IFFALSE 61749
// begin tmp := mc_build_upgrade [ i ] ;
61342: LD_ADDR_VAR 0 4
61346: PUSH
61347: LD_EXP 96
61351: PUSH
61352: LD_VAR 0 2
61356: ARRAY
61357: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
61358: LD_ADDR_VAR 0 6
61362: PUSH
61363: LD_EXP 97
61367: PUSH
61368: LD_VAR 0 2
61372: ARRAY
61373: PPUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 30
61379: PUSH
61380: LD_INT 6
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 30
61389: PUSH
61390: LD_INT 7
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: PPUSH
61402: CALL_OW 72
61406: ST_TO_ADDR
// if not tmp and not lab then
61407: LD_VAR 0 4
61411: NOT
61412: PUSH
61413: LD_VAR 0 6
61417: NOT
61418: AND
61419: IFFALSE 61423
// continue ;
61421: GO 61339
// if tmp then
61423: LD_VAR 0 4
61427: IFFALSE 61547
// for j in tmp do
61429: LD_ADDR_VAR 0 3
61433: PUSH
61434: LD_VAR 0 4
61438: PUSH
61439: FOR_IN
61440: IFFALSE 61545
// begin if UpgradeCost ( j ) then
61442: LD_VAR 0 3
61446: PPUSH
61447: CALL 24775 0 1
61451: IFFALSE 61543
// begin ComUpgrade ( j ) ;
61453: LD_VAR 0 3
61457: PPUSH
61458: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
61462: LD_ADDR_EXP 96
61466: PUSH
61467: LD_EXP 96
61471: PPUSH
61472: LD_VAR 0 2
61476: PPUSH
61477: LD_EXP 96
61481: PUSH
61482: LD_VAR 0 2
61486: ARRAY
61487: PUSH
61488: LD_VAR 0 3
61492: DIFF
61493: PPUSH
61494: CALL_OW 1
61498: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61499: LD_ADDR_EXP 71
61503: PUSH
61504: LD_EXP 71
61508: PPUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_EXP 71
61518: PUSH
61519: LD_VAR 0 2
61523: ARRAY
61524: PUSH
61525: LD_INT 1
61527: PLUS
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PPUSH
61533: LD_VAR 0 3
61537: PPUSH
61538: CALL 18364 0 3
61542: ST_TO_ADDR
// end ; end ;
61543: GO 61439
61545: POP
61546: POP
// if not lab or not mc_lab_upgrade [ i ] then
61547: LD_VAR 0 6
61551: NOT
61552: PUSH
61553: LD_EXP 98
61557: PUSH
61558: LD_VAR 0 2
61562: ARRAY
61563: NOT
61564: OR
61565: IFFALSE 61569
// continue ;
61567: GO 61339
// for j in lab do
61569: LD_ADDR_VAR 0 3
61573: PUSH
61574: LD_VAR 0 6
61578: PUSH
61579: FOR_IN
61580: IFFALSE 61745
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
61582: LD_VAR 0 3
61586: PPUSH
61587: CALL_OW 266
61591: PUSH
61592: LD_INT 6
61594: PUSH
61595: LD_INT 7
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: IN
61602: PUSH
61603: LD_VAR 0 3
61607: PPUSH
61608: CALL_OW 461
61612: PUSH
61613: LD_INT 1
61615: NONEQUAL
61616: AND
61617: IFFALSE 61743
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
61619: LD_VAR 0 3
61623: PPUSH
61624: LD_EXP 98
61628: PUSH
61629: LD_VAR 0 2
61633: ARRAY
61634: PUSH
61635: LD_INT 1
61637: ARRAY
61638: PPUSH
61639: CALL 24980 0 2
61643: IFFALSE 61743
// begin ComCancel ( j ) ;
61645: LD_VAR 0 3
61649: PPUSH
61650: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
61654: LD_VAR 0 3
61658: PPUSH
61659: LD_EXP 98
61663: PUSH
61664: LD_VAR 0 2
61668: ARRAY
61669: PUSH
61670: LD_INT 1
61672: ARRAY
61673: PPUSH
61674: CALL_OW 207
// if not j in mc_construct_list [ i ] then
61678: LD_VAR 0 3
61682: PUSH
61683: LD_EXP 71
61687: PUSH
61688: LD_VAR 0 2
61692: ARRAY
61693: IN
61694: NOT
61695: IFFALSE 61741
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61697: LD_ADDR_EXP 71
61701: PUSH
61702: LD_EXP 71
61706: PPUSH
61707: LD_VAR 0 2
61711: PUSH
61712: LD_EXP 71
61716: PUSH
61717: LD_VAR 0 2
61721: ARRAY
61722: PUSH
61723: LD_INT 1
61725: PLUS
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PPUSH
61731: LD_VAR 0 3
61735: PPUSH
61736: CALL 18364 0 3
61740: ST_TO_ADDR
// break ;
61741: GO 61745
// end ; end ; end ;
61743: GO 61579
61745: POP
61746: POP
// end ;
61747: GO 61339
61749: POP
61750: POP
// end ;
61751: LD_VAR 0 1
61755: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
61760: PPUSH
61761: PPUSH
61762: PPUSH
61763: PPUSH
61764: PPUSH
61765: PPUSH
61766: PPUSH
// if not mc_bases then
61767: LD_EXP 64
61771: NOT
61772: IFFALSE 61776
// exit ;
61774: GO 62181
// for i = 1 to mc_bases do
61776: LD_ADDR_VAR 0 2
61780: PUSH
61781: DOUBLE
61782: LD_INT 1
61784: DEC
61785: ST_TO_ADDR
61786: LD_EXP 64
61790: PUSH
61791: FOR_TO
61792: IFFALSE 62179
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
61794: LD_EXP 72
61798: PUSH
61799: LD_VAR 0 2
61803: ARRAY
61804: NOT
61805: PUSH
61806: LD_EXP 64
61810: PUSH
61811: LD_VAR 0 2
61815: ARRAY
61816: PPUSH
61817: LD_INT 30
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PPUSH
61827: CALL_OW 72
61831: NOT
61832: OR
61833: IFFALSE 61837
// continue ;
61835: GO 61791
// busy := false ;
61837: LD_ADDR_VAR 0 8
61841: PUSH
61842: LD_INT 0
61844: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61845: LD_ADDR_VAR 0 4
61849: PUSH
61850: LD_EXP 64
61854: PUSH
61855: LD_VAR 0 2
61859: ARRAY
61860: PPUSH
61861: LD_INT 30
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PPUSH
61871: CALL_OW 72
61875: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
61876: LD_ADDR_VAR 0 6
61880: PUSH
61881: LD_EXP 72
61885: PUSH
61886: LD_VAR 0 2
61890: ARRAY
61891: PPUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 30
61897: PUSH
61898: LD_INT 32
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 30
61907: PUSH
61908: LD_INT 33
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: PPUSH
61920: CALL_OW 72
61924: ST_TO_ADDR
// if not t then
61925: LD_VAR 0 6
61929: NOT
61930: IFFALSE 61934
// continue ;
61932: GO 61791
// for j in tmp do
61934: LD_ADDR_VAR 0 3
61938: PUSH
61939: LD_VAR 0 4
61943: PUSH
61944: FOR_IN
61945: IFFALSE 61975
// if not BuildingStatus ( j ) = bs_idle then
61947: LD_VAR 0 3
61951: PPUSH
61952: CALL_OW 461
61956: PUSH
61957: LD_INT 2
61959: EQUAL
61960: NOT
61961: IFFALSE 61973
// begin busy := true ;
61963: LD_ADDR_VAR 0 8
61967: PUSH
61968: LD_INT 1
61970: ST_TO_ADDR
// break ;
61971: GO 61975
// end ;
61973: GO 61944
61975: POP
61976: POP
// if busy then
61977: LD_VAR 0 8
61981: IFFALSE 61985
// continue ;
61983: GO 61791
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
61985: LD_ADDR_VAR 0 7
61989: PUSH
61990: LD_VAR 0 6
61994: PPUSH
61995: LD_INT 35
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PPUSH
62005: CALL_OW 72
62009: ST_TO_ADDR
// if tw then
62010: LD_VAR 0 7
62014: IFFALSE 62091
// begin tw := tw [ 1 ] ;
62016: LD_ADDR_VAR 0 7
62020: PUSH
62021: LD_VAR 0 7
62025: PUSH
62026: LD_INT 1
62028: ARRAY
62029: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
62030: LD_ADDR_VAR 0 9
62034: PUSH
62035: LD_VAR 0 7
62039: PPUSH
62040: LD_EXP 89
62044: PUSH
62045: LD_VAR 0 2
62049: ARRAY
62050: PPUSH
62051: CALL 23334 0 2
62055: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
62056: LD_EXP 103
62060: PUSH
62061: LD_VAR 0 2
62065: ARRAY
62066: IFFALSE 62089
// if not weapon in mc_allowed_tower_weapons [ i ] then
62068: LD_VAR 0 9
62072: PUSH
62073: LD_EXP 103
62077: PUSH
62078: LD_VAR 0 2
62082: ARRAY
62083: IN
62084: NOT
62085: IFFALSE 62089
// continue ;
62087: GO 61791
// end else
62089: GO 62154
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
62091: LD_ADDR_VAR 0 5
62095: PUSH
62096: LD_EXP 72
62100: PUSH
62101: LD_VAR 0 2
62105: ARRAY
62106: PPUSH
62107: LD_VAR 0 4
62111: PPUSH
62112: CALL 48836 0 2
62116: ST_TO_ADDR
// if not tmp2 then
62117: LD_VAR 0 5
62121: NOT
62122: IFFALSE 62126
// continue ;
62124: GO 61791
// tw := tmp2 [ 1 ] ;
62126: LD_ADDR_VAR 0 7
62130: PUSH
62131: LD_VAR 0 5
62135: PUSH
62136: LD_INT 1
62138: ARRAY
62139: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
62140: LD_ADDR_VAR 0 9
62144: PUSH
62145: LD_VAR 0 5
62149: PUSH
62150: LD_INT 2
62152: ARRAY
62153: ST_TO_ADDR
// end ; if not weapon then
62154: LD_VAR 0 9
62158: NOT
62159: IFFALSE 62163
// continue ;
62161: GO 61791
// ComPlaceWeapon ( tw , weapon ) ;
62163: LD_VAR 0 7
62167: PPUSH
62168: LD_VAR 0 9
62172: PPUSH
62173: CALL_OW 148
// end ;
62177: GO 61791
62179: POP
62180: POP
// end ;
62181: LD_VAR 0 1
62185: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
62186: LD_INT 0
62188: PPUSH
62189: PPUSH
62190: PPUSH
62191: PPUSH
62192: PPUSH
62193: PPUSH
// if not mc_bases then
62194: LD_EXP 64
62198: NOT
62199: IFFALSE 62203
// exit ;
62201: GO 62979
// for i = 1 to mc_bases do
62203: LD_ADDR_VAR 0 2
62207: PUSH
62208: DOUBLE
62209: LD_INT 1
62211: DEC
62212: ST_TO_ADDR
62213: LD_EXP 64
62217: PUSH
62218: FOR_TO
62219: IFFALSE 62977
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
62221: LD_EXP 77
62225: PUSH
62226: LD_VAR 0 2
62230: ARRAY
62231: NOT
62232: PUSH
62233: LD_EXP 77
62237: PUSH
62238: LD_VAR 0 2
62242: ARRAY
62243: PUSH
62244: LD_EXP 78
62248: PUSH
62249: LD_VAR 0 2
62253: ARRAY
62254: EQUAL
62255: OR
62256: PUSH
62257: LD_EXP 87
62261: PUSH
62262: LD_VAR 0 2
62266: ARRAY
62267: OR
62268: IFFALSE 62272
// continue ;
62270: GO 62218
// if mc_miners [ i ] then
62272: LD_EXP 78
62276: PUSH
62277: LD_VAR 0 2
62281: ARRAY
62282: IFFALSE 62664
// begin for j = mc_miners [ i ] downto 1 do
62284: LD_ADDR_VAR 0 3
62288: PUSH
62289: DOUBLE
62290: LD_EXP 78
62294: PUSH
62295: LD_VAR 0 2
62299: ARRAY
62300: INC
62301: ST_TO_ADDR
62302: LD_INT 1
62304: PUSH
62305: FOR_DOWNTO
62306: IFFALSE 62662
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
62308: LD_EXP 78
62312: PUSH
62313: LD_VAR 0 2
62317: ARRAY
62318: PUSH
62319: LD_VAR 0 3
62323: ARRAY
62324: PPUSH
62325: CALL_OW 301
62329: PUSH
62330: LD_EXP 78
62334: PUSH
62335: LD_VAR 0 2
62339: ARRAY
62340: PUSH
62341: LD_VAR 0 3
62345: ARRAY
62346: PPUSH
62347: CALL_OW 257
62351: PUSH
62352: LD_INT 1
62354: NONEQUAL
62355: OR
62356: IFFALSE 62419
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
62358: LD_ADDR_VAR 0 5
62362: PUSH
62363: LD_EXP 78
62367: PUSH
62368: LD_VAR 0 2
62372: ARRAY
62373: PUSH
62374: LD_EXP 78
62378: PUSH
62379: LD_VAR 0 2
62383: ARRAY
62384: PUSH
62385: LD_VAR 0 3
62389: ARRAY
62390: DIFF
62391: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
62392: LD_ADDR_EXP 78
62396: PUSH
62397: LD_EXP 78
62401: PPUSH
62402: LD_VAR 0 2
62406: PPUSH
62407: LD_VAR 0 5
62411: PPUSH
62412: CALL_OW 1
62416: ST_TO_ADDR
// continue ;
62417: GO 62305
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
62419: LD_EXP 78
62423: PUSH
62424: LD_VAR 0 2
62428: ARRAY
62429: PUSH
62430: LD_VAR 0 3
62434: ARRAY
62435: PPUSH
62436: CALL_OW 257
62440: PUSH
62441: LD_INT 1
62443: EQUAL
62444: PUSH
62445: LD_EXP 78
62449: PUSH
62450: LD_VAR 0 2
62454: ARRAY
62455: PUSH
62456: LD_VAR 0 3
62460: ARRAY
62461: PPUSH
62462: CALL_OW 459
62466: NOT
62467: AND
62468: PUSH
62469: LD_EXP 78
62473: PUSH
62474: LD_VAR 0 2
62478: ARRAY
62479: PUSH
62480: LD_VAR 0 3
62484: ARRAY
62485: PPUSH
62486: CALL_OW 314
62490: NOT
62491: AND
62492: IFFALSE 62660
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
62494: LD_EXP 78
62498: PUSH
62499: LD_VAR 0 2
62503: ARRAY
62504: PUSH
62505: LD_VAR 0 3
62509: ARRAY
62510: PPUSH
62511: CALL_OW 310
62515: IFFALSE 62538
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
62517: LD_EXP 78
62521: PUSH
62522: LD_VAR 0 2
62526: ARRAY
62527: PUSH
62528: LD_VAR 0 3
62532: ARRAY
62533: PPUSH
62534: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
62538: LD_EXP 78
62542: PUSH
62543: LD_VAR 0 2
62547: ARRAY
62548: PUSH
62549: LD_VAR 0 3
62553: ARRAY
62554: PPUSH
62555: CALL_OW 314
62559: NOT
62560: IFFALSE 62660
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
62562: LD_EXP 78
62566: PUSH
62567: LD_VAR 0 2
62571: ARRAY
62572: PUSH
62573: LD_VAR 0 3
62577: ARRAY
62578: PPUSH
62579: LD_EXP 77
62583: PUSH
62584: LD_VAR 0 2
62588: ARRAY
62589: PUSH
62590: LD_VAR 0 3
62594: PUSH
62595: LD_EXP 77
62599: PUSH
62600: LD_VAR 0 2
62604: ARRAY
62605: MOD
62606: PUSH
62607: LD_INT 1
62609: PLUS
62610: ARRAY
62611: PUSH
62612: LD_INT 1
62614: ARRAY
62615: PPUSH
62616: LD_EXP 77
62620: PUSH
62621: LD_VAR 0 2
62625: ARRAY
62626: PUSH
62627: LD_VAR 0 3
62631: PUSH
62632: LD_EXP 77
62636: PUSH
62637: LD_VAR 0 2
62641: ARRAY
62642: MOD
62643: PUSH
62644: LD_INT 1
62646: PLUS
62647: ARRAY
62648: PUSH
62649: LD_INT 2
62651: ARRAY
62652: PPUSH
62653: LD_INT 0
62655: PPUSH
62656: CALL_OW 193
// end ; end ;
62660: GO 62305
62662: POP
62663: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
62664: LD_ADDR_VAR 0 5
62668: PUSH
62669: LD_EXP 64
62673: PUSH
62674: LD_VAR 0 2
62678: ARRAY
62679: PPUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 30
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 30
62695: PUSH
62696: LD_INT 5
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 30
62705: PUSH
62706: LD_INT 32
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: PPUSH
62719: CALL_OW 72
62723: ST_TO_ADDR
// if not tmp then
62724: LD_VAR 0 5
62728: NOT
62729: IFFALSE 62733
// continue ;
62731: GO 62218
// list := [ ] ;
62733: LD_ADDR_VAR 0 6
62737: PUSH
62738: EMPTY
62739: ST_TO_ADDR
// for j in tmp do
62740: LD_ADDR_VAR 0 3
62744: PUSH
62745: LD_VAR 0 5
62749: PUSH
62750: FOR_IN
62751: IFFALSE 62820
// begin for k in UnitsInside ( j ) do
62753: LD_ADDR_VAR 0 4
62757: PUSH
62758: LD_VAR 0 3
62762: PPUSH
62763: CALL_OW 313
62767: PUSH
62768: FOR_IN
62769: IFFALSE 62816
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
62771: LD_VAR 0 4
62775: PPUSH
62776: CALL_OW 257
62780: PUSH
62781: LD_INT 1
62783: EQUAL
62784: PUSH
62785: LD_VAR 0 4
62789: PPUSH
62790: CALL_OW 459
62794: NOT
62795: AND
62796: IFFALSE 62814
// list := list ^ k ;
62798: LD_ADDR_VAR 0 6
62802: PUSH
62803: LD_VAR 0 6
62807: PUSH
62808: LD_VAR 0 4
62812: ADD
62813: ST_TO_ADDR
62814: GO 62768
62816: POP
62817: POP
// end ;
62818: GO 62750
62820: POP
62821: POP
// list := list diff mc_miners [ i ] ;
62822: LD_ADDR_VAR 0 6
62826: PUSH
62827: LD_VAR 0 6
62831: PUSH
62832: LD_EXP 78
62836: PUSH
62837: LD_VAR 0 2
62841: ARRAY
62842: DIFF
62843: ST_TO_ADDR
// if not list then
62844: LD_VAR 0 6
62848: NOT
62849: IFFALSE 62853
// continue ;
62851: GO 62218
// k := mc_mines [ i ] - mc_miners [ i ] ;
62853: LD_ADDR_VAR 0 4
62857: PUSH
62858: LD_EXP 77
62862: PUSH
62863: LD_VAR 0 2
62867: ARRAY
62868: PUSH
62869: LD_EXP 78
62873: PUSH
62874: LD_VAR 0 2
62878: ARRAY
62879: MINUS
62880: ST_TO_ADDR
// if k > list then
62881: LD_VAR 0 4
62885: PUSH
62886: LD_VAR 0 6
62890: GREATER
62891: IFFALSE 62903
// k := list ;
62893: LD_ADDR_VAR 0 4
62897: PUSH
62898: LD_VAR 0 6
62902: ST_TO_ADDR
// for j = 1 to k do
62903: LD_ADDR_VAR 0 3
62907: PUSH
62908: DOUBLE
62909: LD_INT 1
62911: DEC
62912: ST_TO_ADDR
62913: LD_VAR 0 4
62917: PUSH
62918: FOR_TO
62919: IFFALSE 62973
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
62921: LD_ADDR_EXP 78
62925: PUSH
62926: LD_EXP 78
62930: PPUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_EXP 78
62940: PUSH
62941: LD_VAR 0 2
62945: ARRAY
62946: PUSH
62947: LD_INT 1
62949: PLUS
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PPUSH
62955: LD_VAR 0 6
62959: PUSH
62960: LD_VAR 0 3
62964: ARRAY
62965: PPUSH
62966: CALL 18364 0 3
62970: ST_TO_ADDR
62971: GO 62918
62973: POP
62974: POP
// end ;
62975: GO 62218
62977: POP
62978: POP
// end ;
62979: LD_VAR 0 1
62983: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
62984: LD_INT 0
62986: PPUSH
62987: PPUSH
62988: PPUSH
62989: PPUSH
62990: PPUSH
62991: PPUSH
62992: PPUSH
62993: PPUSH
62994: PPUSH
62995: PPUSH
// if not mc_bases then
62996: LD_EXP 64
63000: NOT
63001: IFFALSE 63005
// exit ;
63003: GO 64755
// for i = 1 to mc_bases do
63005: LD_ADDR_VAR 0 2
63009: PUSH
63010: DOUBLE
63011: LD_INT 1
63013: DEC
63014: ST_TO_ADDR
63015: LD_EXP 64
63019: PUSH
63020: FOR_TO
63021: IFFALSE 64753
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
63023: LD_EXP 64
63027: PUSH
63028: LD_VAR 0 2
63032: ARRAY
63033: NOT
63034: PUSH
63035: LD_EXP 71
63039: PUSH
63040: LD_VAR 0 2
63044: ARRAY
63045: OR
63046: IFFALSE 63050
// continue ;
63048: GO 63020
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
63050: LD_EXP 80
63054: PUSH
63055: LD_VAR 0 2
63059: ARRAY
63060: NOT
63061: PUSH
63062: LD_EXP 81
63066: PUSH
63067: LD_VAR 0 2
63071: ARRAY
63072: AND
63073: IFFALSE 63111
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63075: LD_ADDR_EXP 81
63079: PUSH
63080: LD_EXP 81
63084: PPUSH
63085: LD_VAR 0 2
63089: PPUSH
63090: EMPTY
63091: PPUSH
63092: CALL_OW 1
63096: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
63097: LD_VAR 0 2
63101: PPUSH
63102: LD_INT 107
63104: PPUSH
63105: CALL 53985 0 2
// continue ;
63109: GO 63020
// end ; target := [ ] ;
63111: LD_ADDR_VAR 0 6
63115: PUSH
63116: EMPTY
63117: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
63118: LD_ADDR_VAR 0 3
63122: PUSH
63123: DOUBLE
63124: LD_EXP 80
63128: PUSH
63129: LD_VAR 0 2
63133: ARRAY
63134: INC
63135: ST_TO_ADDR
63136: LD_INT 1
63138: PUSH
63139: FOR_DOWNTO
63140: IFFALSE 63400
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
63142: LD_EXP 80
63146: PUSH
63147: LD_VAR 0 2
63151: ARRAY
63152: PUSH
63153: LD_VAR 0 3
63157: ARRAY
63158: PUSH
63159: LD_INT 2
63161: ARRAY
63162: PPUSH
63163: LD_EXP 80
63167: PUSH
63168: LD_VAR 0 2
63172: ARRAY
63173: PUSH
63174: LD_VAR 0 3
63178: ARRAY
63179: PUSH
63180: LD_INT 3
63182: ARRAY
63183: PPUSH
63184: CALL_OW 488
63188: PUSH
63189: LD_EXP 80
63193: PUSH
63194: LD_VAR 0 2
63198: ARRAY
63199: PUSH
63200: LD_VAR 0 3
63204: ARRAY
63205: PUSH
63206: LD_INT 2
63208: ARRAY
63209: PPUSH
63210: LD_EXP 80
63214: PUSH
63215: LD_VAR 0 2
63219: ARRAY
63220: PUSH
63221: LD_VAR 0 3
63225: ARRAY
63226: PUSH
63227: LD_INT 3
63229: ARRAY
63230: PPUSH
63231: CALL_OW 284
63235: PUSH
63236: LD_INT 0
63238: EQUAL
63239: AND
63240: IFFALSE 63295
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
63242: LD_ADDR_VAR 0 5
63246: PUSH
63247: LD_EXP 80
63251: PUSH
63252: LD_VAR 0 2
63256: ARRAY
63257: PPUSH
63258: LD_VAR 0 3
63262: PPUSH
63263: CALL_OW 3
63267: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
63268: LD_ADDR_EXP 80
63272: PUSH
63273: LD_EXP 80
63277: PPUSH
63278: LD_VAR 0 2
63282: PPUSH
63283: LD_VAR 0 5
63287: PPUSH
63288: CALL_OW 1
63292: ST_TO_ADDR
// continue ;
63293: GO 63139
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
63295: LD_EXP 64
63299: PUSH
63300: LD_VAR 0 2
63304: ARRAY
63305: PUSH
63306: LD_INT 1
63308: ARRAY
63309: PPUSH
63310: CALL_OW 255
63314: PPUSH
63315: LD_EXP 80
63319: PUSH
63320: LD_VAR 0 2
63324: ARRAY
63325: PUSH
63326: LD_VAR 0 3
63330: ARRAY
63331: PUSH
63332: LD_INT 2
63334: ARRAY
63335: PPUSH
63336: LD_EXP 80
63340: PUSH
63341: LD_VAR 0 2
63345: ARRAY
63346: PUSH
63347: LD_VAR 0 3
63351: ARRAY
63352: PUSH
63353: LD_INT 3
63355: ARRAY
63356: PPUSH
63357: LD_INT 30
63359: PPUSH
63360: CALL 19260 0 4
63364: PUSH
63365: LD_INT 4
63367: ARRAY
63368: PUSH
63369: LD_INT 0
63371: EQUAL
63372: IFFALSE 63398
// begin target := mc_crates [ i ] [ j ] ;
63374: LD_ADDR_VAR 0 6
63378: PUSH
63379: LD_EXP 80
63383: PUSH
63384: LD_VAR 0 2
63388: ARRAY
63389: PUSH
63390: LD_VAR 0 3
63394: ARRAY
63395: ST_TO_ADDR
// break ;
63396: GO 63400
// end ; end ;
63398: GO 63139
63400: POP
63401: POP
// if not target then
63402: LD_VAR 0 6
63406: NOT
63407: IFFALSE 63411
// continue ;
63409: GO 63020
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
63411: LD_ADDR_VAR 0 7
63415: PUSH
63416: LD_EXP 83
63420: PUSH
63421: LD_VAR 0 2
63425: ARRAY
63426: PPUSH
63427: LD_INT 2
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: LD_INT 58
63435: PUSH
63436: EMPTY
63437: LIST
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 61
63445: PUSH
63446: EMPTY
63447: LIST
63448: PUSH
63449: LD_INT 33
63451: PUSH
63452: LD_INT 5
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 33
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 34
63481: PUSH
63482: LD_INT 32
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 34
63491: PUSH
63492: LD_INT 51
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 34
63501: PUSH
63502: LD_INT 12
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PPUSH
63519: CALL_OW 72
63523: ST_TO_ADDR
// if not cargo then
63524: LD_VAR 0 7
63528: NOT
63529: IFFALSE 64172
// begin if mc_crates_collector [ i ] < 5 then
63531: LD_EXP 81
63535: PUSH
63536: LD_VAR 0 2
63540: ARRAY
63541: PUSH
63542: LD_INT 5
63544: LESS
63545: IFFALSE 63911
// begin if mc_ape [ i ] then
63547: LD_EXP 93
63551: PUSH
63552: LD_VAR 0 2
63556: ARRAY
63557: IFFALSE 63604
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
63559: LD_ADDR_VAR 0 5
63563: PUSH
63564: LD_EXP 93
63568: PUSH
63569: LD_VAR 0 2
63573: ARRAY
63574: PPUSH
63575: LD_INT 25
63577: PUSH
63578: LD_INT 16
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 24
63587: PUSH
63588: LD_INT 750
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PPUSH
63599: CALL_OW 72
63603: ST_TO_ADDR
// if not tmp then
63604: LD_VAR 0 5
63608: NOT
63609: IFFALSE 63656
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
63611: LD_ADDR_VAR 0 5
63615: PUSH
63616: LD_EXP 64
63620: PUSH
63621: LD_VAR 0 2
63625: ARRAY
63626: PPUSH
63627: LD_INT 25
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 24
63639: PUSH
63640: LD_INT 750
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PPUSH
63651: CALL_OW 72
63655: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
63656: LD_EXP 93
63660: PUSH
63661: LD_VAR 0 2
63665: ARRAY
63666: PUSH
63667: LD_EXP 64
63671: PUSH
63672: LD_VAR 0 2
63676: ARRAY
63677: PPUSH
63678: LD_INT 25
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 24
63690: PUSH
63691: LD_INT 750
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PPUSH
63702: CALL_OW 72
63706: AND
63707: PUSH
63708: LD_VAR 0 5
63712: PUSH
63713: LD_INT 5
63715: LESS
63716: AND
63717: IFFALSE 63799
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
63719: LD_ADDR_VAR 0 3
63723: PUSH
63724: LD_EXP 64
63728: PUSH
63729: LD_VAR 0 2
63733: ARRAY
63734: PPUSH
63735: LD_INT 25
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 24
63747: PUSH
63748: LD_INT 750
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PPUSH
63759: CALL_OW 72
63763: PUSH
63764: FOR_IN
63765: IFFALSE 63797
// begin tmp := tmp union j ;
63767: LD_ADDR_VAR 0 5
63771: PUSH
63772: LD_VAR 0 5
63776: PUSH
63777: LD_VAR 0 3
63781: UNION
63782: ST_TO_ADDR
// if tmp >= 5 then
63783: LD_VAR 0 5
63787: PUSH
63788: LD_INT 5
63790: GREATEREQUAL
63791: IFFALSE 63795
// break ;
63793: GO 63797
// end ;
63795: GO 63764
63797: POP
63798: POP
// end ; if not tmp then
63799: LD_VAR 0 5
63803: NOT
63804: IFFALSE 63808
// continue ;
63806: GO 63020
// for j in tmp do
63808: LD_ADDR_VAR 0 3
63812: PUSH
63813: LD_VAR 0 5
63817: PUSH
63818: FOR_IN
63819: IFFALSE 63909
// if not GetTag ( j ) then
63821: LD_VAR 0 3
63825: PPUSH
63826: CALL_OW 110
63830: NOT
63831: IFFALSE 63907
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
63833: LD_ADDR_EXP 81
63837: PUSH
63838: LD_EXP 81
63842: PPUSH
63843: LD_VAR 0 2
63847: PUSH
63848: LD_EXP 81
63852: PUSH
63853: LD_VAR 0 2
63857: ARRAY
63858: PUSH
63859: LD_INT 1
63861: PLUS
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PPUSH
63867: LD_VAR 0 3
63871: PPUSH
63872: CALL 18364 0 3
63876: ST_TO_ADDR
// SetTag ( j , 107 ) ;
63877: LD_VAR 0 3
63881: PPUSH
63882: LD_INT 107
63884: PPUSH
63885: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
63889: LD_EXP 81
63893: PUSH
63894: LD_VAR 0 2
63898: ARRAY
63899: PUSH
63900: LD_INT 5
63902: GREATEREQUAL
63903: IFFALSE 63907
// break ;
63905: GO 63909
// end ;
63907: GO 63818
63909: POP
63910: POP
// end ; if mc_crates_collector [ i ] and target then
63911: LD_EXP 81
63915: PUSH
63916: LD_VAR 0 2
63920: ARRAY
63921: PUSH
63922: LD_VAR 0 6
63926: AND
63927: IFFALSE 64170
// begin if mc_crates_collector [ i ] < target [ 1 ] then
63929: LD_EXP 81
63933: PUSH
63934: LD_VAR 0 2
63938: ARRAY
63939: PUSH
63940: LD_VAR 0 6
63944: PUSH
63945: LD_INT 1
63947: ARRAY
63948: LESS
63949: IFFALSE 63969
// tmp := mc_crates_collector [ i ] else
63951: LD_ADDR_VAR 0 5
63955: PUSH
63956: LD_EXP 81
63960: PUSH
63961: LD_VAR 0 2
63965: ARRAY
63966: ST_TO_ADDR
63967: GO 63983
// tmp := target [ 1 ] ;
63969: LD_ADDR_VAR 0 5
63973: PUSH
63974: LD_VAR 0 6
63978: PUSH
63979: LD_INT 1
63981: ARRAY
63982: ST_TO_ADDR
// k := 0 ;
63983: LD_ADDR_VAR 0 4
63987: PUSH
63988: LD_INT 0
63990: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
63991: LD_ADDR_VAR 0 3
63995: PUSH
63996: LD_EXP 81
64000: PUSH
64001: LD_VAR 0 2
64005: ARRAY
64006: PUSH
64007: FOR_IN
64008: IFFALSE 64168
// begin k := k + 1 ;
64010: LD_ADDR_VAR 0 4
64014: PUSH
64015: LD_VAR 0 4
64019: PUSH
64020: LD_INT 1
64022: PLUS
64023: ST_TO_ADDR
// if k > tmp then
64024: LD_VAR 0 4
64028: PUSH
64029: LD_VAR 0 5
64033: GREATER
64034: IFFALSE 64038
// break ;
64036: GO 64168
// if not GetClass ( j ) in [ 2 , 16 ] then
64038: LD_VAR 0 3
64042: PPUSH
64043: CALL_OW 257
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 16
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: IN
64058: NOT
64059: IFFALSE 64112
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
64061: LD_ADDR_EXP 81
64065: PUSH
64066: LD_EXP 81
64070: PPUSH
64071: LD_VAR 0 2
64075: PPUSH
64076: LD_EXP 81
64080: PUSH
64081: LD_VAR 0 2
64085: ARRAY
64086: PUSH
64087: LD_VAR 0 3
64091: DIFF
64092: PPUSH
64093: CALL_OW 1
64097: ST_TO_ADDR
// SetTag ( j , 0 ) ;
64098: LD_VAR 0 3
64102: PPUSH
64103: LD_INT 0
64105: PPUSH
64106: CALL_OW 109
// continue ;
64110: GO 64007
// end ; if IsInUnit ( j ) then
64112: LD_VAR 0 3
64116: PPUSH
64117: CALL_OW 310
64121: IFFALSE 64132
// ComExitBuilding ( j ) ;
64123: LD_VAR 0 3
64127: PPUSH
64128: CALL_OW 122
// wait ( 3 ) ;
64132: LD_INT 3
64134: PPUSH
64135: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64139: LD_VAR 0 3
64143: PPUSH
64144: LD_VAR 0 6
64148: PUSH
64149: LD_INT 2
64151: ARRAY
64152: PPUSH
64153: LD_VAR 0 6
64157: PUSH
64158: LD_INT 3
64160: ARRAY
64161: PPUSH
64162: CALL_OW 117
// end ;
64166: GO 64007
64168: POP
64169: POP
// end ; end else
64170: GO 64751
// begin for j in cargo do
64172: LD_ADDR_VAR 0 3
64176: PUSH
64177: LD_VAR 0 7
64181: PUSH
64182: FOR_IN
64183: IFFALSE 64749
// begin if GetTag ( j ) <> 0 then
64185: LD_VAR 0 3
64189: PPUSH
64190: CALL_OW 110
64194: PUSH
64195: LD_INT 0
64197: NONEQUAL
64198: IFFALSE 64202
// continue ;
64200: GO 64182
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
64202: LD_VAR 0 3
64206: PPUSH
64207: CALL_OW 256
64211: PUSH
64212: LD_INT 1000
64214: LESS
64215: PUSH
64216: LD_VAR 0 3
64220: PPUSH
64221: LD_EXP 88
64225: PUSH
64226: LD_VAR 0 2
64230: ARRAY
64231: PPUSH
64232: CALL_OW 308
64236: NOT
64237: AND
64238: IFFALSE 64260
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64240: LD_VAR 0 3
64244: PPUSH
64245: LD_EXP 88
64249: PUSH
64250: LD_VAR 0 2
64254: ARRAY
64255: PPUSH
64256: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
64260: LD_VAR 0 3
64264: PPUSH
64265: CALL_OW 256
64269: PUSH
64270: LD_INT 1000
64272: LESS
64273: PUSH
64274: LD_VAR 0 3
64278: PPUSH
64279: LD_EXP 88
64283: PUSH
64284: LD_VAR 0 2
64288: ARRAY
64289: PPUSH
64290: CALL_OW 308
64294: AND
64295: IFFALSE 64299
// continue ;
64297: GO 64182
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
64299: LD_VAR 0 3
64303: PPUSH
64304: CALL_OW 262
64308: PUSH
64309: LD_INT 2
64311: EQUAL
64312: PUSH
64313: LD_VAR 0 3
64317: PPUSH
64318: CALL_OW 261
64322: PUSH
64323: LD_INT 15
64325: LESS
64326: AND
64327: IFFALSE 64331
// continue ;
64329: GO 64182
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
64331: LD_VAR 0 3
64335: PPUSH
64336: CALL_OW 262
64340: PUSH
64341: LD_INT 1
64343: EQUAL
64344: PUSH
64345: LD_VAR 0 3
64349: PPUSH
64350: CALL_OW 261
64354: PUSH
64355: LD_INT 10
64357: LESS
64358: AND
64359: IFFALSE 64688
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64361: LD_ADDR_VAR 0 8
64365: PUSH
64366: LD_EXP 64
64370: PUSH
64371: LD_VAR 0 2
64375: ARRAY
64376: PPUSH
64377: LD_INT 2
64379: PUSH
64380: LD_INT 30
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 30
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: PPUSH
64405: CALL_OW 72
64409: ST_TO_ADDR
// if not depot then
64410: LD_VAR 0 8
64414: NOT
64415: IFFALSE 64419
// continue ;
64417: GO 64182
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
64419: LD_VAR 0 3
64423: PPUSH
64424: LD_VAR 0 8
64428: PPUSH
64429: LD_VAR 0 3
64433: PPUSH
64434: CALL_OW 74
64438: PPUSH
64439: CALL_OW 296
64443: PUSH
64444: LD_INT 6
64446: LESS
64447: IFFALSE 64463
// SetFuel ( j , 100 ) else
64449: LD_VAR 0 3
64453: PPUSH
64454: LD_INT 100
64456: PPUSH
64457: CALL_OW 240
64461: GO 64688
// if GetFuel ( j ) = 0 then
64463: LD_VAR 0 3
64467: PPUSH
64468: CALL_OW 261
64472: PUSH
64473: LD_INT 0
64475: EQUAL
64476: IFFALSE 64688
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
64478: LD_ADDR_EXP 83
64482: PUSH
64483: LD_EXP 83
64487: PPUSH
64488: LD_VAR 0 2
64492: PPUSH
64493: LD_EXP 83
64497: PUSH
64498: LD_VAR 0 2
64502: ARRAY
64503: PUSH
64504: LD_VAR 0 3
64508: DIFF
64509: PPUSH
64510: CALL_OW 1
64514: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
64515: LD_VAR 0 3
64519: PPUSH
64520: CALL_OW 263
64524: PUSH
64525: LD_INT 1
64527: EQUAL
64528: IFFALSE 64544
// ComExitVehicle ( IsInUnit ( j ) ) ;
64530: LD_VAR 0 3
64534: PPUSH
64535: CALL_OW 310
64539: PPUSH
64540: CALL_OW 121
// if GetControl ( j ) = control_remote then
64544: LD_VAR 0 3
64548: PPUSH
64549: CALL_OW 263
64553: PUSH
64554: LD_INT 2
64556: EQUAL
64557: IFFALSE 64568
// ComUnlink ( j ) ;
64559: LD_VAR 0 3
64563: PPUSH
64564: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
64568: LD_ADDR_VAR 0 9
64572: PUSH
64573: LD_VAR 0 2
64577: PPUSH
64578: LD_INT 3
64580: PPUSH
64581: CALL 74041 0 2
64585: ST_TO_ADDR
// if fac then
64586: LD_VAR 0 9
64590: IFFALSE 64686
// begin for k in fac do
64592: LD_ADDR_VAR 0 4
64596: PUSH
64597: LD_VAR 0 9
64601: PUSH
64602: FOR_IN
64603: IFFALSE 64684
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
64605: LD_ADDR_VAR 0 10
64609: PUSH
64610: LD_VAR 0 9
64614: PPUSH
64615: LD_VAR 0 3
64619: PPUSH
64620: CALL_OW 265
64624: PPUSH
64625: LD_VAR 0 3
64629: PPUSH
64630: CALL_OW 262
64634: PPUSH
64635: LD_VAR 0 3
64639: PPUSH
64640: CALL_OW 263
64644: PPUSH
64645: LD_VAR 0 3
64649: PPUSH
64650: CALL_OW 264
64654: PPUSH
64655: CALL 15896 0 5
64659: ST_TO_ADDR
// if components then
64660: LD_VAR 0 10
64664: IFFALSE 64682
// begin MC_InsertProduceList ( i , components ) ;
64666: LD_VAR 0 2
64670: PPUSH
64671: LD_VAR 0 10
64675: PPUSH
64676: CALL 73586 0 2
// break ;
64680: GO 64684
// end ; end ;
64682: GO 64602
64684: POP
64685: POP
// end ; continue ;
64686: GO 64182
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
64688: LD_VAR 0 3
64692: PPUSH
64693: LD_INT 1
64695: PPUSH
64696: CALL_OW 289
64700: PUSH
64701: LD_INT 100
64703: LESS
64704: PUSH
64705: LD_VAR 0 3
64709: PPUSH
64710: CALL_OW 314
64714: NOT
64715: AND
64716: IFFALSE 64745
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64718: LD_VAR 0 3
64722: PPUSH
64723: LD_VAR 0 6
64727: PUSH
64728: LD_INT 2
64730: ARRAY
64731: PPUSH
64732: LD_VAR 0 6
64736: PUSH
64737: LD_INT 3
64739: ARRAY
64740: PPUSH
64741: CALL_OW 117
// break ;
64745: GO 64749
// end ;
64747: GO 64182
64749: POP
64750: POP
// end ; end ;
64751: GO 63020
64753: POP
64754: POP
// end ;
64755: LD_VAR 0 1
64759: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
64764: PPUSH
64765: PPUSH
// if not mc_bases then
64766: LD_EXP 64
64770: NOT
64771: IFFALSE 64775
// exit ;
64773: GO 64936
// for i = 1 to mc_bases do
64775: LD_ADDR_VAR 0 2
64779: PUSH
64780: DOUBLE
64781: LD_INT 1
64783: DEC
64784: ST_TO_ADDR
64785: LD_EXP 64
64789: PUSH
64790: FOR_TO
64791: IFFALSE 64934
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
64793: LD_ADDR_VAR 0 4
64797: PUSH
64798: LD_EXP 83
64802: PUSH
64803: LD_VAR 0 2
64807: ARRAY
64808: PUSH
64809: LD_EXP 86
64813: PUSH
64814: LD_VAR 0 2
64818: ARRAY
64819: UNION
64820: PPUSH
64821: LD_INT 33
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PPUSH
64831: CALL_OW 72
64835: ST_TO_ADDR
// if tmp then
64836: LD_VAR 0 4
64840: IFFALSE 64932
// for j in tmp do
64842: LD_ADDR_VAR 0 3
64846: PUSH
64847: LD_VAR 0 4
64851: PUSH
64852: FOR_IN
64853: IFFALSE 64930
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
64855: LD_VAR 0 3
64859: PPUSH
64860: CALL_OW 312
64864: NOT
64865: PUSH
64866: LD_VAR 0 3
64870: PPUSH
64871: CALL_OW 256
64875: PUSH
64876: LD_INT 250
64878: GREATEREQUAL
64879: AND
64880: IFFALSE 64893
// Connect ( j ) else
64882: LD_VAR 0 3
64886: PPUSH
64887: CALL 21297 0 1
64891: GO 64928
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
64893: LD_VAR 0 3
64897: PPUSH
64898: CALL_OW 256
64902: PUSH
64903: LD_INT 250
64905: LESS
64906: PUSH
64907: LD_VAR 0 3
64911: PPUSH
64912: CALL_OW 312
64916: AND
64917: IFFALSE 64928
// ComUnlink ( j ) ;
64919: LD_VAR 0 3
64923: PPUSH
64924: CALL_OW 136
64928: GO 64852
64930: POP
64931: POP
// end ;
64932: GO 64790
64934: POP
64935: POP
// end ;
64936: LD_VAR 0 1
64940: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
64941: LD_INT 0
64943: PPUSH
64944: PPUSH
64945: PPUSH
64946: PPUSH
64947: PPUSH
// if not mc_bases then
64948: LD_EXP 64
64952: NOT
64953: IFFALSE 64957
// exit ;
64955: GO 65402
// for i = 1 to mc_bases do
64957: LD_ADDR_VAR 0 2
64961: PUSH
64962: DOUBLE
64963: LD_INT 1
64965: DEC
64966: ST_TO_ADDR
64967: LD_EXP 64
64971: PUSH
64972: FOR_TO
64973: IFFALSE 65400
// begin if not mc_produce [ i ] then
64975: LD_EXP 85
64979: PUSH
64980: LD_VAR 0 2
64984: ARRAY
64985: NOT
64986: IFFALSE 64990
// continue ;
64988: GO 64972
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64990: LD_ADDR_VAR 0 5
64994: PUSH
64995: LD_EXP 64
64999: PUSH
65000: LD_VAR 0 2
65004: ARRAY
65005: PPUSH
65006: LD_INT 30
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PPUSH
65016: CALL_OW 72
65020: ST_TO_ADDR
// if not fac then
65021: LD_VAR 0 5
65025: NOT
65026: IFFALSE 65030
// continue ;
65028: GO 64972
// for j in fac do
65030: LD_ADDR_VAR 0 3
65034: PUSH
65035: LD_VAR 0 5
65039: PUSH
65040: FOR_IN
65041: IFFALSE 65396
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
65043: LD_VAR 0 3
65047: PPUSH
65048: CALL_OW 461
65052: PUSH
65053: LD_INT 2
65055: NONEQUAL
65056: PUSH
65057: LD_VAR 0 3
65061: PPUSH
65062: LD_INT 15
65064: PPUSH
65065: CALL 20957 0 2
65069: PUSH
65070: LD_INT 4
65072: ARRAY
65073: OR
65074: IFFALSE 65078
// continue ;
65076: GO 65040
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
65078: LD_VAR 0 3
65082: PPUSH
65083: LD_EXP 85
65087: PUSH
65088: LD_VAR 0 2
65092: ARRAY
65093: PUSH
65094: LD_INT 1
65096: ARRAY
65097: PUSH
65098: LD_INT 1
65100: ARRAY
65101: PPUSH
65102: LD_EXP 85
65106: PUSH
65107: LD_VAR 0 2
65111: ARRAY
65112: PUSH
65113: LD_INT 1
65115: ARRAY
65116: PUSH
65117: LD_INT 2
65119: ARRAY
65120: PPUSH
65121: LD_EXP 85
65125: PUSH
65126: LD_VAR 0 2
65130: ARRAY
65131: PUSH
65132: LD_INT 1
65134: ARRAY
65135: PUSH
65136: LD_INT 3
65138: ARRAY
65139: PPUSH
65140: LD_EXP 85
65144: PUSH
65145: LD_VAR 0 2
65149: ARRAY
65150: PUSH
65151: LD_INT 1
65153: ARRAY
65154: PUSH
65155: LD_INT 4
65157: ARRAY
65158: PPUSH
65159: CALL_OW 448
65163: PUSH
65164: LD_VAR 0 3
65168: PPUSH
65169: LD_EXP 85
65173: PUSH
65174: LD_VAR 0 2
65178: ARRAY
65179: PUSH
65180: LD_INT 1
65182: ARRAY
65183: PUSH
65184: LD_INT 1
65186: ARRAY
65187: PUSH
65188: LD_EXP 85
65192: PUSH
65193: LD_VAR 0 2
65197: ARRAY
65198: PUSH
65199: LD_INT 1
65201: ARRAY
65202: PUSH
65203: LD_INT 2
65205: ARRAY
65206: PUSH
65207: LD_EXP 85
65211: PUSH
65212: LD_VAR 0 2
65216: ARRAY
65217: PUSH
65218: LD_INT 1
65220: ARRAY
65221: PUSH
65222: LD_INT 3
65224: ARRAY
65225: PUSH
65226: LD_EXP 85
65230: PUSH
65231: LD_VAR 0 2
65235: ARRAY
65236: PUSH
65237: LD_INT 1
65239: ARRAY
65240: PUSH
65241: LD_INT 4
65243: ARRAY
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: PPUSH
65251: CALL 24628 0 2
65255: AND
65256: IFFALSE 65394
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
65258: LD_VAR 0 3
65262: PPUSH
65263: LD_EXP 85
65267: PUSH
65268: LD_VAR 0 2
65272: ARRAY
65273: PUSH
65274: LD_INT 1
65276: ARRAY
65277: PUSH
65278: LD_INT 1
65280: ARRAY
65281: PPUSH
65282: LD_EXP 85
65286: PUSH
65287: LD_VAR 0 2
65291: ARRAY
65292: PUSH
65293: LD_INT 1
65295: ARRAY
65296: PUSH
65297: LD_INT 2
65299: ARRAY
65300: PPUSH
65301: LD_EXP 85
65305: PUSH
65306: LD_VAR 0 2
65310: ARRAY
65311: PUSH
65312: LD_INT 1
65314: ARRAY
65315: PUSH
65316: LD_INT 3
65318: ARRAY
65319: PPUSH
65320: LD_EXP 85
65324: PUSH
65325: LD_VAR 0 2
65329: ARRAY
65330: PUSH
65331: LD_INT 1
65333: ARRAY
65334: PUSH
65335: LD_INT 4
65337: ARRAY
65338: PPUSH
65339: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
65343: LD_ADDR_VAR 0 4
65347: PUSH
65348: LD_EXP 85
65352: PUSH
65353: LD_VAR 0 2
65357: ARRAY
65358: PPUSH
65359: LD_INT 1
65361: PPUSH
65362: CALL_OW 3
65366: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
65367: LD_ADDR_EXP 85
65371: PUSH
65372: LD_EXP 85
65376: PPUSH
65377: LD_VAR 0 2
65381: PPUSH
65382: LD_VAR 0 4
65386: PPUSH
65387: CALL_OW 1
65391: ST_TO_ADDR
// break ;
65392: GO 65396
// end ; end ;
65394: GO 65040
65396: POP
65397: POP
// end ;
65398: GO 64972
65400: POP
65401: POP
// end ;
65402: LD_VAR 0 1
65406: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
65407: LD_INT 0
65409: PPUSH
65410: PPUSH
65411: PPUSH
// if not mc_bases then
65412: LD_EXP 64
65416: NOT
65417: IFFALSE 65421
// exit ;
65419: GO 65510
// for i = 1 to mc_bases do
65421: LD_ADDR_VAR 0 2
65425: PUSH
65426: DOUBLE
65427: LD_INT 1
65429: DEC
65430: ST_TO_ADDR
65431: LD_EXP 64
65435: PUSH
65436: FOR_TO
65437: IFFALSE 65508
// begin if mc_attack [ i ] then
65439: LD_EXP 84
65443: PUSH
65444: LD_VAR 0 2
65448: ARRAY
65449: IFFALSE 65506
// begin tmp := mc_attack [ i ] [ 1 ] ;
65451: LD_ADDR_VAR 0 3
65455: PUSH
65456: LD_EXP 84
65460: PUSH
65461: LD_VAR 0 2
65465: ARRAY
65466: PUSH
65467: LD_INT 1
65469: ARRAY
65470: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65471: LD_ADDR_EXP 84
65475: PUSH
65476: LD_EXP 84
65480: PPUSH
65481: LD_VAR 0 2
65485: PPUSH
65486: EMPTY
65487: PPUSH
65488: CALL_OW 1
65492: ST_TO_ADDR
// Attack ( tmp ) ;
65493: LD_VAR 0 3
65497: PPUSH
65498: CALL 92653 0 1
// exit ;
65502: POP
65503: POP
65504: GO 65510
// end ; end ;
65506: GO 65436
65508: POP
65509: POP
// end ;
65510: LD_VAR 0 1
65514: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
65515: LD_INT 0
65517: PPUSH
65518: PPUSH
65519: PPUSH
65520: PPUSH
65521: PPUSH
65522: PPUSH
65523: PPUSH
// if not mc_bases then
65524: LD_EXP 64
65528: NOT
65529: IFFALSE 65533
// exit ;
65531: GO 66115
// for i = 1 to mc_bases do
65533: LD_ADDR_VAR 0 2
65537: PUSH
65538: DOUBLE
65539: LD_INT 1
65541: DEC
65542: ST_TO_ADDR
65543: LD_EXP 64
65547: PUSH
65548: FOR_TO
65549: IFFALSE 66113
// begin if not mc_bases [ i ] then
65551: LD_EXP 64
65555: PUSH
65556: LD_VAR 0 2
65560: ARRAY
65561: NOT
65562: IFFALSE 65566
// continue ;
65564: GO 65548
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
65566: LD_ADDR_VAR 0 7
65570: PUSH
65571: LD_EXP 64
65575: PUSH
65576: LD_VAR 0 2
65580: ARRAY
65581: PUSH
65582: LD_INT 1
65584: ARRAY
65585: PPUSH
65586: CALL 15200 0 1
65590: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
65591: LD_ADDR_EXP 87
65595: PUSH
65596: LD_EXP 87
65600: PPUSH
65601: LD_VAR 0 2
65605: PPUSH
65606: LD_EXP 64
65610: PUSH
65611: LD_VAR 0 2
65615: ARRAY
65616: PUSH
65617: LD_INT 1
65619: ARRAY
65620: PPUSH
65621: CALL_OW 255
65625: PPUSH
65626: LD_EXP 89
65630: PUSH
65631: LD_VAR 0 2
65635: ARRAY
65636: PPUSH
65637: CALL 15165 0 2
65641: PPUSH
65642: CALL_OW 1
65646: ST_TO_ADDR
// if not mc_scan [ i ] then
65647: LD_EXP 87
65651: PUSH
65652: LD_VAR 0 2
65656: ARRAY
65657: NOT
65658: IFFALSE 65813
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65660: LD_ADDR_VAR 0 4
65664: PUSH
65665: LD_EXP 64
65669: PUSH
65670: LD_VAR 0 2
65674: ARRAY
65675: PPUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 25
65681: PUSH
65682: LD_INT 5
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 25
65691: PUSH
65692: LD_INT 8
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 25
65701: PUSH
65702: LD_INT 9
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: PPUSH
65715: CALL_OW 72
65719: ST_TO_ADDR
// if not tmp then
65720: LD_VAR 0 4
65724: NOT
65725: IFFALSE 65729
// continue ;
65727: GO 65548
// for j in tmp do
65729: LD_ADDR_VAR 0 3
65733: PUSH
65734: LD_VAR 0 4
65738: PUSH
65739: FOR_IN
65740: IFFALSE 65811
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
65742: LD_VAR 0 3
65746: PPUSH
65747: CALL_OW 310
65751: PPUSH
65752: CALL_OW 266
65756: PUSH
65757: LD_INT 5
65759: EQUAL
65760: PUSH
65761: LD_VAR 0 3
65765: PPUSH
65766: CALL_OW 257
65770: PUSH
65771: LD_INT 1
65773: EQUAL
65774: AND
65775: PUSH
65776: LD_VAR 0 3
65780: PPUSH
65781: CALL_OW 459
65785: NOT
65786: AND
65787: PUSH
65788: LD_VAR 0 7
65792: AND
65793: IFFALSE 65809
// ComChangeProfession ( j , class ) ;
65795: LD_VAR 0 3
65799: PPUSH
65800: LD_VAR 0 7
65804: PPUSH
65805: CALL_OW 123
65809: GO 65739
65811: POP
65812: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
65813: LD_EXP 87
65817: PUSH
65818: LD_VAR 0 2
65822: ARRAY
65823: PUSH
65824: LD_EXP 86
65828: PUSH
65829: LD_VAR 0 2
65833: ARRAY
65834: NOT
65835: AND
65836: PUSH
65837: LD_EXP 64
65841: PUSH
65842: LD_VAR 0 2
65846: ARRAY
65847: PPUSH
65848: LD_INT 30
65850: PUSH
65851: LD_INT 32
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PPUSH
65858: CALL_OW 72
65862: NOT
65863: AND
65864: PUSH
65865: LD_EXP 64
65869: PUSH
65870: LD_VAR 0 2
65874: ARRAY
65875: PPUSH
65876: LD_INT 2
65878: PUSH
65879: LD_INT 30
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 30
65891: PUSH
65892: LD_INT 5
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: LIST
65903: PPUSH
65904: CALL_OW 72
65908: NOT
65909: AND
65910: IFFALSE 66042
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65912: LD_ADDR_VAR 0 4
65916: PUSH
65917: LD_EXP 64
65921: PUSH
65922: LD_VAR 0 2
65926: ARRAY
65927: PPUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 25
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 25
65943: PUSH
65944: LD_INT 5
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 25
65953: PUSH
65954: LD_INT 8
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 25
65963: PUSH
65964: LD_INT 9
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: PPUSH
65978: CALL_OW 72
65982: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
65983: LD_ADDR_VAR 0 4
65987: PUSH
65988: LD_VAR 0 4
65992: PUSH
65993: LD_VAR 0 4
65997: PPUSH
65998: LD_INT 18
66000: PPUSH
66001: CALL 46925 0 2
66005: DIFF
66006: ST_TO_ADDR
// if tmp then
66007: LD_VAR 0 4
66011: IFFALSE 66042
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
66013: LD_VAR 0 2
66017: PPUSH
66018: LD_VAR 0 4
66022: PPUSH
66023: LD_EXP 89
66027: PUSH
66028: LD_VAR 0 2
66032: ARRAY
66033: PPUSH
66034: CALL 97362 0 3
// exit ;
66038: POP
66039: POP
66040: GO 66115
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
66042: LD_EXP 87
66046: PUSH
66047: LD_VAR 0 2
66051: ARRAY
66052: PUSH
66053: LD_EXP 86
66057: PUSH
66058: LD_VAR 0 2
66062: ARRAY
66063: AND
66064: IFFALSE 66111
// begin tmp := mc_defender [ i ] ;
66066: LD_ADDR_VAR 0 4
66070: PUSH
66071: LD_EXP 86
66075: PUSH
66076: LD_VAR 0 2
66080: ARRAY
66081: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
66082: LD_VAR 0 2
66086: PPUSH
66087: LD_VAR 0 4
66091: PPUSH
66092: LD_EXP 87
66096: PUSH
66097: LD_VAR 0 2
66101: ARRAY
66102: PPUSH
66103: CALL 97923 0 3
// exit ;
66107: POP
66108: POP
66109: GO 66115
// end ; end ;
66111: GO 65548
66113: POP
66114: POP
// end ;
66115: LD_VAR 0 1
66119: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
66120: LD_INT 0
66122: PPUSH
66123: PPUSH
66124: PPUSH
66125: PPUSH
66126: PPUSH
66127: PPUSH
66128: PPUSH
66129: PPUSH
66130: PPUSH
66131: PPUSH
66132: PPUSH
// if not mc_bases then
66133: LD_EXP 64
66137: NOT
66138: IFFALSE 66142
// exit ;
66140: GO 67229
// for i = 1 to mc_bases do
66142: LD_ADDR_VAR 0 2
66146: PUSH
66147: DOUBLE
66148: LD_INT 1
66150: DEC
66151: ST_TO_ADDR
66152: LD_EXP 64
66156: PUSH
66157: FOR_TO
66158: IFFALSE 67227
// begin tmp := mc_lab [ i ] ;
66160: LD_ADDR_VAR 0 6
66164: PUSH
66165: LD_EXP 97
66169: PUSH
66170: LD_VAR 0 2
66174: ARRAY
66175: ST_TO_ADDR
// if not tmp then
66176: LD_VAR 0 6
66180: NOT
66181: IFFALSE 66185
// continue ;
66183: GO 66157
// idle_lab := 0 ;
66185: LD_ADDR_VAR 0 11
66189: PUSH
66190: LD_INT 0
66192: ST_TO_ADDR
// for j in tmp do
66193: LD_ADDR_VAR 0 3
66197: PUSH
66198: LD_VAR 0 6
66202: PUSH
66203: FOR_IN
66204: IFFALSE 67223
// begin researching := false ;
66206: LD_ADDR_VAR 0 10
66210: PUSH
66211: LD_INT 0
66213: ST_TO_ADDR
// side := GetSide ( j ) ;
66214: LD_ADDR_VAR 0 4
66218: PUSH
66219: LD_VAR 0 3
66223: PPUSH
66224: CALL_OW 255
66228: ST_TO_ADDR
// if not mc_tech [ side ] then
66229: LD_EXP 91
66233: PUSH
66234: LD_VAR 0 4
66238: ARRAY
66239: NOT
66240: IFFALSE 66244
// continue ;
66242: GO 66203
// if BuildingStatus ( j ) = bs_idle then
66244: LD_VAR 0 3
66248: PPUSH
66249: CALL_OW 461
66253: PUSH
66254: LD_INT 2
66256: EQUAL
66257: IFFALSE 66445
// begin if idle_lab and UnitsInside ( j ) < 6 then
66259: LD_VAR 0 11
66263: PUSH
66264: LD_VAR 0 3
66268: PPUSH
66269: CALL_OW 313
66273: PUSH
66274: LD_INT 6
66276: LESS
66277: AND
66278: IFFALSE 66349
// begin tmp2 := UnitsInside ( idle_lab ) ;
66280: LD_ADDR_VAR 0 9
66284: PUSH
66285: LD_VAR 0 11
66289: PPUSH
66290: CALL_OW 313
66294: ST_TO_ADDR
// if tmp2 then
66295: LD_VAR 0 9
66299: IFFALSE 66341
// for x in tmp2 do
66301: LD_ADDR_VAR 0 7
66305: PUSH
66306: LD_VAR 0 9
66310: PUSH
66311: FOR_IN
66312: IFFALSE 66339
// begin ComExitBuilding ( x ) ;
66314: LD_VAR 0 7
66318: PPUSH
66319: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66323: LD_VAR 0 7
66327: PPUSH
66328: LD_VAR 0 3
66332: PPUSH
66333: CALL_OW 180
// end ;
66337: GO 66311
66339: POP
66340: POP
// idle_lab := 0 ;
66341: LD_ADDR_VAR 0 11
66345: PUSH
66346: LD_INT 0
66348: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
66349: LD_ADDR_VAR 0 5
66353: PUSH
66354: LD_EXP 91
66358: PUSH
66359: LD_VAR 0 4
66363: ARRAY
66364: PUSH
66365: FOR_IN
66366: IFFALSE 66426
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
66368: LD_VAR 0 3
66372: PPUSH
66373: LD_VAR 0 5
66377: PPUSH
66378: CALL_OW 430
66382: PUSH
66383: LD_VAR 0 4
66387: PPUSH
66388: LD_VAR 0 5
66392: PPUSH
66393: CALL 14270 0 2
66397: AND
66398: IFFALSE 66424
// begin researching := true ;
66400: LD_ADDR_VAR 0 10
66404: PUSH
66405: LD_INT 1
66407: ST_TO_ADDR
// ComResearch ( j , t ) ;
66408: LD_VAR 0 3
66412: PPUSH
66413: LD_VAR 0 5
66417: PPUSH
66418: CALL_OW 124
// break ;
66422: GO 66426
// end ;
66424: GO 66365
66426: POP
66427: POP
// if not researching then
66428: LD_VAR 0 10
66432: NOT
66433: IFFALSE 66445
// idle_lab := j ;
66435: LD_ADDR_VAR 0 11
66439: PUSH
66440: LD_VAR 0 3
66444: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
66445: LD_VAR 0 3
66449: PPUSH
66450: CALL_OW 461
66454: PUSH
66455: LD_INT 10
66457: EQUAL
66458: IFFALSE 67046
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
66460: LD_EXP 93
66464: PUSH
66465: LD_VAR 0 2
66469: ARRAY
66470: NOT
66471: PUSH
66472: LD_EXP 94
66476: PUSH
66477: LD_VAR 0 2
66481: ARRAY
66482: NOT
66483: AND
66484: PUSH
66485: LD_EXP 91
66489: PUSH
66490: LD_VAR 0 4
66494: ARRAY
66495: PUSH
66496: LD_INT 1
66498: GREATER
66499: AND
66500: IFFALSE 66631
// begin ComCancel ( j ) ;
66502: LD_VAR 0 3
66506: PPUSH
66507: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
66511: LD_ADDR_EXP 91
66515: PUSH
66516: LD_EXP 91
66520: PPUSH
66521: LD_VAR 0 4
66525: PPUSH
66526: LD_EXP 91
66530: PUSH
66531: LD_VAR 0 4
66535: ARRAY
66536: PPUSH
66537: LD_EXP 91
66541: PUSH
66542: LD_VAR 0 4
66546: ARRAY
66547: PUSH
66548: LD_INT 1
66550: MINUS
66551: PPUSH
66552: LD_EXP 91
66556: PUSH
66557: LD_VAR 0 4
66561: ARRAY
66562: PPUSH
66563: LD_INT 0
66565: PPUSH
66566: CALL 17782 0 4
66570: PPUSH
66571: CALL_OW 1
66575: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
66576: LD_ADDR_EXP 91
66580: PUSH
66581: LD_EXP 91
66585: PPUSH
66586: LD_VAR 0 4
66590: PPUSH
66591: LD_EXP 91
66595: PUSH
66596: LD_VAR 0 4
66600: ARRAY
66601: PPUSH
66602: LD_EXP 91
66606: PUSH
66607: LD_VAR 0 4
66611: ARRAY
66612: PPUSH
66613: LD_INT 1
66615: PPUSH
66616: LD_INT 0
66618: PPUSH
66619: CALL 17782 0 4
66623: PPUSH
66624: CALL_OW 1
66628: ST_TO_ADDR
// continue ;
66629: GO 66203
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
66631: LD_EXP 93
66635: PUSH
66636: LD_VAR 0 2
66640: ARRAY
66641: PUSH
66642: LD_EXP 94
66646: PUSH
66647: LD_VAR 0 2
66651: ARRAY
66652: NOT
66653: AND
66654: IFFALSE 66781
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
66656: LD_ADDR_EXP 94
66660: PUSH
66661: LD_EXP 94
66665: PPUSH
66666: LD_VAR 0 2
66670: PUSH
66671: LD_EXP 94
66675: PUSH
66676: LD_VAR 0 2
66680: ARRAY
66681: PUSH
66682: LD_INT 1
66684: PLUS
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PPUSH
66690: LD_EXP 93
66694: PUSH
66695: LD_VAR 0 2
66699: ARRAY
66700: PUSH
66701: LD_INT 1
66703: ARRAY
66704: PPUSH
66705: CALL 18364 0 3
66709: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
66710: LD_EXP 93
66714: PUSH
66715: LD_VAR 0 2
66719: ARRAY
66720: PUSH
66721: LD_INT 1
66723: ARRAY
66724: PPUSH
66725: LD_INT 112
66727: PPUSH
66728: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
66732: LD_ADDR_VAR 0 9
66736: PUSH
66737: LD_EXP 93
66741: PUSH
66742: LD_VAR 0 2
66746: ARRAY
66747: PPUSH
66748: LD_INT 1
66750: PPUSH
66751: CALL_OW 3
66755: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
66756: LD_ADDR_EXP 93
66760: PUSH
66761: LD_EXP 93
66765: PPUSH
66766: LD_VAR 0 2
66770: PPUSH
66771: LD_VAR 0 9
66775: PPUSH
66776: CALL_OW 1
66780: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
66781: LD_EXP 93
66785: PUSH
66786: LD_VAR 0 2
66790: ARRAY
66791: PUSH
66792: LD_EXP 94
66796: PUSH
66797: LD_VAR 0 2
66801: ARRAY
66802: AND
66803: PUSH
66804: LD_EXP 94
66808: PUSH
66809: LD_VAR 0 2
66813: ARRAY
66814: PUSH
66815: LD_INT 1
66817: ARRAY
66818: PPUSH
66819: CALL_OW 310
66823: NOT
66824: AND
66825: PUSH
66826: LD_VAR 0 3
66830: PPUSH
66831: CALL_OW 313
66835: PUSH
66836: LD_INT 6
66838: EQUAL
66839: AND
66840: IFFALSE 66896
// begin tmp2 := UnitsInside ( j ) ;
66842: LD_ADDR_VAR 0 9
66846: PUSH
66847: LD_VAR 0 3
66851: PPUSH
66852: CALL_OW 313
66856: ST_TO_ADDR
// if tmp2 = 6 then
66857: LD_VAR 0 9
66861: PUSH
66862: LD_INT 6
66864: EQUAL
66865: IFFALSE 66896
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
66867: LD_VAR 0 9
66871: PUSH
66872: LD_INT 1
66874: ARRAY
66875: PPUSH
66876: LD_INT 112
66878: PPUSH
66879: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
66883: LD_VAR 0 9
66887: PUSH
66888: LD_INT 1
66890: ARRAY
66891: PPUSH
66892: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
66896: LD_EXP 94
66900: PUSH
66901: LD_VAR 0 2
66905: ARRAY
66906: PUSH
66907: LD_EXP 94
66911: PUSH
66912: LD_VAR 0 2
66916: ARRAY
66917: PUSH
66918: LD_INT 1
66920: ARRAY
66921: PPUSH
66922: CALL_OW 314
66926: NOT
66927: AND
66928: PUSH
66929: LD_EXP 94
66933: PUSH
66934: LD_VAR 0 2
66938: ARRAY
66939: PUSH
66940: LD_INT 1
66942: ARRAY
66943: PPUSH
66944: CALL_OW 310
66948: NOT
66949: AND
66950: IFFALSE 66976
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
66952: LD_EXP 94
66956: PUSH
66957: LD_VAR 0 2
66961: ARRAY
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: PPUSH
66967: LD_VAR 0 3
66971: PPUSH
66972: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
66976: LD_EXP 94
66980: PUSH
66981: LD_VAR 0 2
66985: ARRAY
66986: PUSH
66987: LD_INT 1
66989: ARRAY
66990: PPUSH
66991: CALL_OW 310
66995: PUSH
66996: LD_EXP 94
67000: PUSH
67001: LD_VAR 0 2
67005: ARRAY
67006: PUSH
67007: LD_INT 1
67009: ARRAY
67010: PPUSH
67011: CALL_OW 310
67015: PPUSH
67016: CALL_OW 461
67020: PUSH
67021: LD_INT 3
67023: NONEQUAL
67024: AND
67025: IFFALSE 67046
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
67027: LD_EXP 94
67031: PUSH
67032: LD_VAR 0 2
67036: ARRAY
67037: PUSH
67038: LD_INT 1
67040: ARRAY
67041: PPUSH
67042: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
67046: LD_VAR 0 3
67050: PPUSH
67051: CALL_OW 461
67055: PUSH
67056: LD_INT 6
67058: EQUAL
67059: PUSH
67060: LD_VAR 0 6
67064: PUSH
67065: LD_INT 1
67067: GREATER
67068: AND
67069: IFFALSE 67221
// begin sci := [ ] ;
67071: LD_ADDR_VAR 0 8
67075: PUSH
67076: EMPTY
67077: ST_TO_ADDR
// for x in ( tmp diff j ) do
67078: LD_ADDR_VAR 0 7
67082: PUSH
67083: LD_VAR 0 6
67087: PUSH
67088: LD_VAR 0 3
67092: DIFF
67093: PUSH
67094: FOR_IN
67095: IFFALSE 67147
// begin if sci = 6 then
67097: LD_VAR 0 8
67101: PUSH
67102: LD_INT 6
67104: EQUAL
67105: IFFALSE 67109
// break ;
67107: GO 67147
// if BuildingStatus ( x ) = bs_idle then
67109: LD_VAR 0 7
67113: PPUSH
67114: CALL_OW 461
67118: PUSH
67119: LD_INT 2
67121: EQUAL
67122: IFFALSE 67145
// sci := sci ^ UnitsInside ( x ) ;
67124: LD_ADDR_VAR 0 8
67128: PUSH
67129: LD_VAR 0 8
67133: PUSH
67134: LD_VAR 0 7
67138: PPUSH
67139: CALL_OW 313
67143: ADD
67144: ST_TO_ADDR
// end ;
67145: GO 67094
67147: POP
67148: POP
// if not sci then
67149: LD_VAR 0 8
67153: NOT
67154: IFFALSE 67158
// continue ;
67156: GO 66203
// for x in sci do
67158: LD_ADDR_VAR 0 7
67162: PUSH
67163: LD_VAR 0 8
67167: PUSH
67168: FOR_IN
67169: IFFALSE 67219
// if IsInUnit ( x ) and not HasTask ( x ) then
67171: LD_VAR 0 7
67175: PPUSH
67176: CALL_OW 310
67180: PUSH
67181: LD_VAR 0 7
67185: PPUSH
67186: CALL_OW 314
67190: NOT
67191: AND
67192: IFFALSE 67217
// begin ComExitBuilding ( x ) ;
67194: LD_VAR 0 7
67198: PPUSH
67199: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
67203: LD_VAR 0 7
67207: PPUSH
67208: LD_VAR 0 3
67212: PPUSH
67213: CALL_OW 180
// end ;
67217: GO 67168
67219: POP
67220: POP
// end ; end ;
67221: GO 66203
67223: POP
67224: POP
// end ;
67225: GO 66157
67227: POP
67228: POP
// end ;
67229: LD_VAR 0 1
67233: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
67234: LD_INT 0
67236: PPUSH
67237: PPUSH
// if not mc_bases then
67238: LD_EXP 64
67242: NOT
67243: IFFALSE 67247
// exit ;
67245: GO 67328
// for i = 1 to mc_bases do
67247: LD_ADDR_VAR 0 2
67251: PUSH
67252: DOUBLE
67253: LD_INT 1
67255: DEC
67256: ST_TO_ADDR
67257: LD_EXP 64
67261: PUSH
67262: FOR_TO
67263: IFFALSE 67326
// if mc_mines [ i ] and mc_miners [ i ] then
67265: LD_EXP 77
67269: PUSH
67270: LD_VAR 0 2
67274: ARRAY
67275: PUSH
67276: LD_EXP 78
67280: PUSH
67281: LD_VAR 0 2
67285: ARRAY
67286: AND
67287: IFFALSE 67324
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
67289: LD_EXP 78
67293: PUSH
67294: LD_VAR 0 2
67298: ARRAY
67299: PUSH
67300: LD_INT 1
67302: ARRAY
67303: PPUSH
67304: CALL_OW 255
67308: PPUSH
67309: LD_EXP 77
67313: PUSH
67314: LD_VAR 0 2
67318: ARRAY
67319: PPUSH
67320: CALL 15353 0 2
67324: GO 67262
67326: POP
67327: POP
// end ;
67328: LD_VAR 0 1
67332: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
67333: LD_INT 0
67335: PPUSH
67336: PPUSH
67337: PPUSH
67338: PPUSH
67339: PPUSH
67340: PPUSH
67341: PPUSH
67342: PPUSH
// if not mc_bases or not mc_parking then
67343: LD_EXP 64
67347: NOT
67348: PUSH
67349: LD_EXP 88
67353: NOT
67354: OR
67355: IFFALSE 67359
// exit ;
67357: GO 68058
// for i = 1 to mc_bases do
67359: LD_ADDR_VAR 0 2
67363: PUSH
67364: DOUBLE
67365: LD_INT 1
67367: DEC
67368: ST_TO_ADDR
67369: LD_EXP 64
67373: PUSH
67374: FOR_TO
67375: IFFALSE 68056
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
67377: LD_EXP 64
67381: PUSH
67382: LD_VAR 0 2
67386: ARRAY
67387: NOT
67388: PUSH
67389: LD_EXP 88
67393: PUSH
67394: LD_VAR 0 2
67398: ARRAY
67399: NOT
67400: OR
67401: IFFALSE 67405
// continue ;
67403: GO 67374
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
67405: LD_ADDR_VAR 0 5
67409: PUSH
67410: LD_EXP 64
67414: PUSH
67415: LD_VAR 0 2
67419: ARRAY
67420: PUSH
67421: LD_INT 1
67423: ARRAY
67424: PPUSH
67425: CALL_OW 255
67429: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67430: LD_ADDR_VAR 0 6
67434: PUSH
67435: LD_EXP 64
67439: PUSH
67440: LD_VAR 0 2
67444: ARRAY
67445: PPUSH
67446: LD_INT 30
67448: PUSH
67449: LD_INT 3
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PPUSH
67456: CALL_OW 72
67460: ST_TO_ADDR
// if not fac then
67461: LD_VAR 0 6
67465: NOT
67466: IFFALSE 67517
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67468: LD_ADDR_VAR 0 6
67472: PUSH
67473: LD_EXP 64
67477: PUSH
67478: LD_VAR 0 2
67482: ARRAY
67483: PPUSH
67484: LD_INT 2
67486: PUSH
67487: LD_INT 30
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 30
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: PPUSH
67512: CALL_OW 72
67516: ST_TO_ADDR
// if not fac then
67517: LD_VAR 0 6
67521: NOT
67522: IFFALSE 67526
// continue ;
67524: GO 67374
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67526: LD_ADDR_VAR 0 7
67530: PUSH
67531: LD_EXP 88
67535: PUSH
67536: LD_VAR 0 2
67540: ARRAY
67541: PPUSH
67542: LD_INT 22
67544: PUSH
67545: LD_VAR 0 5
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 21
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: LD_INT 24
67569: PUSH
67570: LD_INT 1000
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: PPUSH
67586: CALL_OW 70
67590: ST_TO_ADDR
// for j in fac do
67591: LD_ADDR_VAR 0 3
67595: PUSH
67596: LD_VAR 0 6
67600: PUSH
67601: FOR_IN
67602: IFFALSE 67683
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67604: LD_ADDR_VAR 0 7
67608: PUSH
67609: LD_VAR 0 7
67613: PUSH
67614: LD_INT 22
67616: PUSH
67617: LD_VAR 0 5
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 91
67628: PUSH
67629: LD_VAR 0 3
67633: PUSH
67634: LD_INT 15
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 21
67644: PUSH
67645: LD_INT 2
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 3
67654: PUSH
67655: LD_INT 24
67657: PUSH
67658: LD_INT 1000
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: PPUSH
67675: CALL_OW 69
67679: UNION
67680: ST_TO_ADDR
67681: GO 67601
67683: POP
67684: POP
// if not vehs then
67685: LD_VAR 0 7
67689: NOT
67690: IFFALSE 67716
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
67692: LD_ADDR_EXP 76
67696: PUSH
67697: LD_EXP 76
67701: PPUSH
67702: LD_VAR 0 2
67706: PPUSH
67707: EMPTY
67708: PPUSH
67709: CALL_OW 1
67713: ST_TO_ADDR
// continue ;
67714: GO 67374
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67716: LD_ADDR_VAR 0 8
67720: PUSH
67721: LD_EXP 64
67725: PUSH
67726: LD_VAR 0 2
67730: ARRAY
67731: PPUSH
67732: LD_INT 30
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PPUSH
67742: CALL_OW 72
67746: ST_TO_ADDR
// if tmp then
67747: LD_VAR 0 8
67751: IFFALSE 67854
// begin for j in tmp do
67753: LD_ADDR_VAR 0 3
67757: PUSH
67758: LD_VAR 0 8
67762: PUSH
67763: FOR_IN
67764: IFFALSE 67852
// for k in UnitsInside ( j ) do
67766: LD_ADDR_VAR 0 4
67770: PUSH
67771: LD_VAR 0 3
67775: PPUSH
67776: CALL_OW 313
67780: PUSH
67781: FOR_IN
67782: IFFALSE 67848
// if k then
67784: LD_VAR 0 4
67788: IFFALSE 67846
// if not k in mc_repair_vehicle [ i ] then
67790: LD_VAR 0 4
67794: PUSH
67795: LD_EXP 76
67799: PUSH
67800: LD_VAR 0 2
67804: ARRAY
67805: IN
67806: NOT
67807: IFFALSE 67846
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
67809: LD_ADDR_EXP 76
67813: PUSH
67814: LD_EXP 76
67818: PPUSH
67819: LD_VAR 0 2
67823: PPUSH
67824: LD_EXP 76
67828: PUSH
67829: LD_VAR 0 2
67833: ARRAY
67834: PUSH
67835: LD_VAR 0 4
67839: UNION
67840: PPUSH
67841: CALL_OW 1
67845: ST_TO_ADDR
67846: GO 67781
67848: POP
67849: POP
67850: GO 67763
67852: POP
67853: POP
// end ; if not mc_repair_vehicle [ i ] then
67854: LD_EXP 76
67858: PUSH
67859: LD_VAR 0 2
67863: ARRAY
67864: NOT
67865: IFFALSE 67869
// continue ;
67867: GO 67374
// for j in mc_repair_vehicle [ i ] do
67869: LD_ADDR_VAR 0 3
67873: PUSH
67874: LD_EXP 76
67878: PUSH
67879: LD_VAR 0 2
67883: ARRAY
67884: PUSH
67885: FOR_IN
67886: IFFALSE 68052
// begin if GetClass ( j ) <> 3 then
67888: LD_VAR 0 3
67892: PPUSH
67893: CALL_OW 257
67897: PUSH
67898: LD_INT 3
67900: NONEQUAL
67901: IFFALSE 67942
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
67903: LD_ADDR_EXP 76
67907: PUSH
67908: LD_EXP 76
67912: PPUSH
67913: LD_VAR 0 2
67917: PPUSH
67918: LD_EXP 76
67922: PUSH
67923: LD_VAR 0 2
67927: ARRAY
67928: PUSH
67929: LD_VAR 0 3
67933: DIFF
67934: PPUSH
67935: CALL_OW 1
67939: ST_TO_ADDR
// continue ;
67940: GO 67885
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
67942: LD_VAR 0 3
67946: PPUSH
67947: CALL_OW 311
67951: NOT
67952: PUSH
67953: LD_VAR 0 3
67957: PUSH
67958: LD_EXP 67
67962: PUSH
67963: LD_VAR 0 2
67967: ARRAY
67968: PUSH
67969: LD_INT 1
67971: ARRAY
67972: IN
67973: NOT
67974: AND
67975: PUSH
67976: LD_VAR 0 3
67980: PUSH
67981: LD_EXP 67
67985: PUSH
67986: LD_VAR 0 2
67990: ARRAY
67991: PUSH
67992: LD_INT 2
67994: ARRAY
67995: IN
67996: NOT
67997: AND
67998: IFFALSE 68050
// begin if IsInUnit ( j ) then
68000: LD_VAR 0 3
68004: PPUSH
68005: CALL_OW 310
68009: IFFALSE 68020
// ComExitBuilding ( j ) ;
68011: LD_VAR 0 3
68015: PPUSH
68016: CALL_OW 122
// if not HasTask ( j ) then
68020: LD_VAR 0 3
68024: PPUSH
68025: CALL_OW 314
68029: NOT
68030: IFFALSE 68050
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
68032: LD_VAR 0 3
68036: PPUSH
68037: LD_VAR 0 7
68041: PUSH
68042: LD_INT 1
68044: ARRAY
68045: PPUSH
68046: CALL_OW 189
// end ; end ;
68050: GO 67885
68052: POP
68053: POP
// end ;
68054: GO 67374
68056: POP
68057: POP
// end ;
68058: LD_VAR 0 1
68062: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
68063: LD_INT 0
68065: PPUSH
68066: PPUSH
68067: PPUSH
68068: PPUSH
68069: PPUSH
68070: PPUSH
68071: PPUSH
68072: PPUSH
68073: PPUSH
68074: PPUSH
68075: PPUSH
// if not mc_bases then
68076: LD_EXP 64
68080: NOT
68081: IFFALSE 68085
// exit ;
68083: GO 68887
// for i = 1 to mc_bases do
68085: LD_ADDR_VAR 0 2
68089: PUSH
68090: DOUBLE
68091: LD_INT 1
68093: DEC
68094: ST_TO_ADDR
68095: LD_EXP 64
68099: PUSH
68100: FOR_TO
68101: IFFALSE 68885
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
68103: LD_EXP 92
68107: PUSH
68108: LD_VAR 0 2
68112: ARRAY
68113: NOT
68114: PUSH
68115: LD_EXP 67
68119: PUSH
68120: LD_VAR 0 2
68124: ARRAY
68125: PUSH
68126: LD_INT 1
68128: ARRAY
68129: OR
68130: PUSH
68131: LD_EXP 67
68135: PUSH
68136: LD_VAR 0 2
68140: ARRAY
68141: PUSH
68142: LD_INT 2
68144: ARRAY
68145: OR
68146: PUSH
68147: LD_EXP 90
68151: PUSH
68152: LD_VAR 0 2
68156: ARRAY
68157: PPUSH
68158: LD_INT 1
68160: PPUSH
68161: CALL_OW 325
68165: NOT
68166: OR
68167: PUSH
68168: LD_EXP 87
68172: PUSH
68173: LD_VAR 0 2
68177: ARRAY
68178: OR
68179: IFFALSE 68183
// continue ;
68181: GO 68100
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
68183: LD_ADDR_VAR 0 8
68187: PUSH
68188: LD_EXP 64
68192: PUSH
68193: LD_VAR 0 2
68197: ARRAY
68198: PPUSH
68199: LD_INT 25
68201: PUSH
68202: LD_INT 4
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 50
68211: PUSH
68212: EMPTY
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: LD_INT 60
68220: PUSH
68221: EMPTY
68222: LIST
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: LIST
68232: PPUSH
68233: CALL_OW 72
68237: PUSH
68238: LD_EXP 68
68242: PUSH
68243: LD_VAR 0 2
68247: ARRAY
68248: DIFF
68249: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68250: LD_ADDR_VAR 0 9
68254: PUSH
68255: LD_EXP 64
68259: PUSH
68260: LD_VAR 0 2
68264: ARRAY
68265: PPUSH
68266: LD_INT 2
68268: PUSH
68269: LD_INT 30
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 30
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: PPUSH
68294: CALL_OW 72
68298: ST_TO_ADDR
// if not tmp or not dep then
68299: LD_VAR 0 8
68303: NOT
68304: PUSH
68305: LD_VAR 0 9
68309: NOT
68310: OR
68311: IFFALSE 68315
// continue ;
68313: GO 68100
// side := GetSide ( tmp [ 1 ] ) ;
68315: LD_ADDR_VAR 0 11
68319: PUSH
68320: LD_VAR 0 8
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PPUSH
68329: CALL_OW 255
68333: ST_TO_ADDR
// dep := dep [ 1 ] ;
68334: LD_ADDR_VAR 0 9
68338: PUSH
68339: LD_VAR 0 9
68343: PUSH
68344: LD_INT 1
68346: ARRAY
68347: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
68348: LD_ADDR_VAR 0 7
68352: PUSH
68353: LD_EXP 92
68357: PUSH
68358: LD_VAR 0 2
68362: ARRAY
68363: PPUSH
68364: LD_INT 22
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 25
68376: PUSH
68377: LD_INT 12
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PPUSH
68388: CALL_OW 70
68392: PUSH
68393: LD_INT 22
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 25
68405: PUSH
68406: LD_INT 12
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 91
68415: PUSH
68416: LD_VAR 0 9
68420: PUSH
68421: LD_INT 20
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: PPUSH
68434: CALL_OW 69
68438: UNION
68439: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
68440: LD_ADDR_VAR 0 10
68444: PUSH
68445: LD_EXP 92
68449: PUSH
68450: LD_VAR 0 2
68454: ARRAY
68455: PPUSH
68456: LD_INT 81
68458: PUSH
68459: LD_VAR 0 11
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PPUSH
68468: CALL_OW 70
68472: ST_TO_ADDR
// if not apes or danger_at_area then
68473: LD_VAR 0 7
68477: NOT
68478: PUSH
68479: LD_VAR 0 10
68483: OR
68484: IFFALSE 68534
// begin if mc_taming [ i ] then
68486: LD_EXP 95
68490: PUSH
68491: LD_VAR 0 2
68495: ARRAY
68496: IFFALSE 68532
// begin MC_Reset ( i , 121 ) ;
68498: LD_VAR 0 2
68502: PPUSH
68503: LD_INT 121
68505: PPUSH
68506: CALL 53985 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68510: LD_ADDR_EXP 95
68514: PUSH
68515: LD_EXP 95
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: EMPTY
68526: PPUSH
68527: CALL_OW 1
68531: ST_TO_ADDR
// end ; continue ;
68532: GO 68100
// end ; for j in tmp do
68534: LD_ADDR_VAR 0 3
68538: PUSH
68539: LD_VAR 0 8
68543: PUSH
68544: FOR_IN
68545: IFFALSE 68881
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
68547: LD_VAR 0 3
68551: PUSH
68552: LD_EXP 95
68556: PUSH
68557: LD_VAR 0 2
68561: ARRAY
68562: IN
68563: NOT
68564: PUSH
68565: LD_EXP 95
68569: PUSH
68570: LD_VAR 0 2
68574: ARRAY
68575: PUSH
68576: LD_INT 3
68578: LESS
68579: AND
68580: IFFALSE 68638
// begin SetTag ( j , 121 ) ;
68582: LD_VAR 0 3
68586: PPUSH
68587: LD_INT 121
68589: PPUSH
68590: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
68594: LD_ADDR_EXP 95
68598: PUSH
68599: LD_EXP 95
68603: PPUSH
68604: LD_VAR 0 2
68608: PUSH
68609: LD_EXP 95
68613: PUSH
68614: LD_VAR 0 2
68618: ARRAY
68619: PUSH
68620: LD_INT 1
68622: PLUS
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PPUSH
68628: LD_VAR 0 3
68632: PPUSH
68633: CALL 18364 0 3
68637: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
68638: LD_VAR 0 3
68642: PUSH
68643: LD_EXP 95
68647: PUSH
68648: LD_VAR 0 2
68652: ARRAY
68653: IN
68654: IFFALSE 68879
// begin if GetClass ( j ) <> 4 then
68656: LD_VAR 0 3
68660: PPUSH
68661: CALL_OW 257
68665: PUSH
68666: LD_INT 4
68668: NONEQUAL
68669: IFFALSE 68722
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
68671: LD_ADDR_EXP 95
68675: PUSH
68676: LD_EXP 95
68680: PPUSH
68681: LD_VAR 0 2
68685: PPUSH
68686: LD_EXP 95
68690: PUSH
68691: LD_VAR 0 2
68695: ARRAY
68696: PUSH
68697: LD_VAR 0 3
68701: DIFF
68702: PPUSH
68703: CALL_OW 1
68707: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68708: LD_VAR 0 3
68712: PPUSH
68713: LD_INT 0
68715: PPUSH
68716: CALL_OW 109
// continue ;
68720: GO 68544
// end ; if IsInUnit ( j ) then
68722: LD_VAR 0 3
68726: PPUSH
68727: CALL_OW 310
68731: IFFALSE 68742
// ComExitBuilding ( j ) ;
68733: LD_VAR 0 3
68737: PPUSH
68738: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
68742: LD_ADDR_VAR 0 6
68746: PUSH
68747: LD_VAR 0 7
68751: PPUSH
68752: LD_VAR 0 3
68756: PPUSH
68757: CALL_OW 74
68761: ST_TO_ADDR
// if not ape then
68762: LD_VAR 0 6
68766: NOT
68767: IFFALSE 68771
// break ;
68769: GO 68881
// x := GetX ( ape ) ;
68771: LD_ADDR_VAR 0 4
68775: PUSH
68776: LD_VAR 0 6
68780: PPUSH
68781: CALL_OW 250
68785: ST_TO_ADDR
// y := GetY ( ape ) ;
68786: LD_ADDR_VAR 0 5
68790: PUSH
68791: LD_VAR 0 6
68795: PPUSH
68796: CALL_OW 251
68800: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68801: LD_VAR 0 4
68805: PPUSH
68806: LD_VAR 0 5
68810: PPUSH
68811: CALL_OW 488
68815: NOT
68816: PUSH
68817: LD_VAR 0 11
68821: PPUSH
68822: LD_VAR 0 4
68826: PPUSH
68827: LD_VAR 0 5
68831: PPUSH
68832: LD_INT 20
68834: PPUSH
68835: CALL 19260 0 4
68839: PUSH
68840: LD_INT 4
68842: ARRAY
68843: OR
68844: IFFALSE 68848
// break ;
68846: GO 68881
// if not HasTask ( j ) then
68848: LD_VAR 0 3
68852: PPUSH
68853: CALL_OW 314
68857: NOT
68858: IFFALSE 68879
// ComTameXY ( j , x , y ) ;
68860: LD_VAR 0 3
68864: PPUSH
68865: LD_VAR 0 4
68869: PPUSH
68870: LD_VAR 0 5
68874: PPUSH
68875: CALL_OW 131
// end ; end ;
68879: GO 68544
68881: POP
68882: POP
// end ;
68883: GO 68100
68885: POP
68886: POP
// end ;
68887: LD_VAR 0 1
68891: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
68892: LD_INT 0
68894: PPUSH
68895: PPUSH
68896: PPUSH
68897: PPUSH
68898: PPUSH
68899: PPUSH
68900: PPUSH
68901: PPUSH
// if not mc_bases then
68902: LD_EXP 64
68906: NOT
68907: IFFALSE 68911
// exit ;
68909: GO 69537
// for i = 1 to mc_bases do
68911: LD_ADDR_VAR 0 2
68915: PUSH
68916: DOUBLE
68917: LD_INT 1
68919: DEC
68920: ST_TO_ADDR
68921: LD_EXP 64
68925: PUSH
68926: FOR_TO
68927: IFFALSE 69535
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
68929: LD_EXP 93
68933: PUSH
68934: LD_VAR 0 2
68938: ARRAY
68939: NOT
68940: PUSH
68941: LD_EXP 93
68945: PUSH
68946: LD_VAR 0 2
68950: ARRAY
68951: PPUSH
68952: LD_INT 25
68954: PUSH
68955: LD_INT 12
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PPUSH
68962: CALL_OW 72
68966: NOT
68967: OR
68968: IFFALSE 68972
// continue ;
68970: GO 68926
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
68972: LD_ADDR_VAR 0 5
68976: PUSH
68977: LD_EXP 93
68981: PUSH
68982: LD_VAR 0 2
68986: ARRAY
68987: PUSH
68988: LD_INT 1
68990: ARRAY
68991: PPUSH
68992: CALL_OW 255
68996: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
68997: LD_VAR 0 5
69001: PPUSH
69002: LD_INT 2
69004: PPUSH
69005: CALL_OW 325
69009: IFFALSE 69262
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69011: LD_ADDR_VAR 0 4
69015: PUSH
69016: LD_EXP 93
69020: PUSH
69021: LD_VAR 0 2
69025: ARRAY
69026: PPUSH
69027: LD_INT 25
69029: PUSH
69030: LD_INT 16
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PPUSH
69037: CALL_OW 72
69041: ST_TO_ADDR
// if tmp < 6 then
69042: LD_VAR 0 4
69046: PUSH
69047: LD_INT 6
69049: LESS
69050: IFFALSE 69262
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69052: LD_ADDR_VAR 0 6
69056: PUSH
69057: LD_EXP 64
69061: PUSH
69062: LD_VAR 0 2
69066: ARRAY
69067: PPUSH
69068: LD_INT 2
69070: PUSH
69071: LD_INT 30
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 30
69083: PUSH
69084: LD_INT 1
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: LIST
69095: PPUSH
69096: CALL_OW 72
69100: ST_TO_ADDR
// if depot then
69101: LD_VAR 0 6
69105: IFFALSE 69262
// begin selected := 0 ;
69107: LD_ADDR_VAR 0 7
69111: PUSH
69112: LD_INT 0
69114: ST_TO_ADDR
// for j in depot do
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_VAR 0 6
69124: PUSH
69125: FOR_IN
69126: IFFALSE 69157
// begin if UnitsInside ( j ) < 6 then
69128: LD_VAR 0 3
69132: PPUSH
69133: CALL_OW 313
69137: PUSH
69138: LD_INT 6
69140: LESS
69141: IFFALSE 69155
// begin selected := j ;
69143: LD_ADDR_VAR 0 7
69147: PUSH
69148: LD_VAR 0 3
69152: ST_TO_ADDR
// break ;
69153: GO 69157
// end ; end ;
69155: GO 69125
69157: POP
69158: POP
// if selected then
69159: LD_VAR 0 7
69163: IFFALSE 69262
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69165: LD_ADDR_VAR 0 3
69169: PUSH
69170: LD_EXP 93
69174: PUSH
69175: LD_VAR 0 2
69179: ARRAY
69180: PPUSH
69181: LD_INT 25
69183: PUSH
69184: LD_INT 12
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PPUSH
69191: CALL_OW 72
69195: PUSH
69196: FOR_IN
69197: IFFALSE 69260
// if not HasTask ( j ) then
69199: LD_VAR 0 3
69203: PPUSH
69204: CALL_OW 314
69208: NOT
69209: IFFALSE 69258
// begin if not IsInUnit ( j ) then
69211: LD_VAR 0 3
69215: PPUSH
69216: CALL_OW 310
69220: NOT
69221: IFFALSE 69237
// ComEnterUnit ( j , selected ) ;
69223: LD_VAR 0 3
69227: PPUSH
69228: LD_VAR 0 7
69232: PPUSH
69233: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
69237: LD_VAR 0 3
69241: PPUSH
69242: LD_INT 16
69244: PPUSH
69245: CALL_OW 183
// AddComExitBuilding ( j ) ;
69249: LD_VAR 0 3
69253: PPUSH
69254: CALL_OW 182
// end ;
69258: GO 69196
69260: POP
69261: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
69262: LD_VAR 0 5
69266: PPUSH
69267: LD_INT 11
69269: PPUSH
69270: CALL_OW 325
69274: IFFALSE 69533
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69276: LD_ADDR_VAR 0 4
69280: PUSH
69281: LD_EXP 93
69285: PUSH
69286: LD_VAR 0 2
69290: ARRAY
69291: PPUSH
69292: LD_INT 25
69294: PUSH
69295: LD_INT 16
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PPUSH
69302: CALL_OW 72
69306: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
69307: LD_VAR 0 4
69311: PUSH
69312: LD_INT 6
69314: GREATEREQUAL
69315: PUSH
69316: LD_VAR 0 5
69320: PPUSH
69321: LD_INT 2
69323: PPUSH
69324: CALL_OW 325
69328: NOT
69329: OR
69330: IFFALSE 69533
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
69332: LD_ADDR_VAR 0 8
69336: PUSH
69337: LD_EXP 64
69341: PUSH
69342: LD_VAR 0 2
69346: ARRAY
69347: PPUSH
69348: LD_INT 2
69350: PUSH
69351: LD_INT 30
69353: PUSH
69354: LD_INT 4
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 30
69363: PUSH
69364: LD_INT 5
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: PPUSH
69376: CALL_OW 72
69380: ST_TO_ADDR
// if barracks then
69381: LD_VAR 0 8
69385: IFFALSE 69533
// begin selected := 0 ;
69387: LD_ADDR_VAR 0 7
69391: PUSH
69392: LD_INT 0
69394: ST_TO_ADDR
// for j in barracks do
69395: LD_ADDR_VAR 0 3
69399: PUSH
69400: LD_VAR 0 8
69404: PUSH
69405: FOR_IN
69406: IFFALSE 69437
// begin if UnitsInside ( j ) < 6 then
69408: LD_VAR 0 3
69412: PPUSH
69413: CALL_OW 313
69417: PUSH
69418: LD_INT 6
69420: LESS
69421: IFFALSE 69435
// begin selected := j ;
69423: LD_ADDR_VAR 0 7
69427: PUSH
69428: LD_VAR 0 3
69432: ST_TO_ADDR
// break ;
69433: GO 69437
// end ; end ;
69435: GO 69405
69437: POP
69438: POP
// if selected then
69439: LD_VAR 0 7
69443: IFFALSE 69533
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69445: LD_ADDR_VAR 0 3
69449: PUSH
69450: LD_EXP 93
69454: PUSH
69455: LD_VAR 0 2
69459: ARRAY
69460: PPUSH
69461: LD_INT 25
69463: PUSH
69464: LD_INT 12
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PPUSH
69471: CALL_OW 72
69475: PUSH
69476: FOR_IN
69477: IFFALSE 69531
// if not IsInUnit ( j ) and not HasTask ( j ) then
69479: LD_VAR 0 3
69483: PPUSH
69484: CALL_OW 310
69488: NOT
69489: PUSH
69490: LD_VAR 0 3
69494: PPUSH
69495: CALL_OW 314
69499: NOT
69500: AND
69501: IFFALSE 69529
// begin ComEnterUnit ( j , selected ) ;
69503: LD_VAR 0 3
69507: PPUSH
69508: LD_VAR 0 7
69512: PPUSH
69513: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
69517: LD_VAR 0 3
69521: PPUSH
69522: LD_INT 15
69524: PPUSH
69525: CALL_OW 183
// end ;
69529: GO 69476
69531: POP
69532: POP
// end ; end ; end ; end ; end ;
69533: GO 68926
69535: POP
69536: POP
// end ;
69537: LD_VAR 0 1
69541: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
69542: LD_INT 0
69544: PPUSH
69545: PPUSH
69546: PPUSH
69547: PPUSH
// if not mc_bases then
69548: LD_EXP 64
69552: NOT
69553: IFFALSE 69557
// exit ;
69555: GO 69735
// for i = 1 to mc_bases do
69557: LD_ADDR_VAR 0 2
69561: PUSH
69562: DOUBLE
69563: LD_INT 1
69565: DEC
69566: ST_TO_ADDR
69567: LD_EXP 64
69571: PUSH
69572: FOR_TO
69573: IFFALSE 69733
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
69575: LD_ADDR_VAR 0 4
69579: PUSH
69580: LD_EXP 64
69584: PUSH
69585: LD_VAR 0 2
69589: ARRAY
69590: PPUSH
69591: LD_INT 25
69593: PUSH
69594: LD_INT 9
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PPUSH
69601: CALL_OW 72
69605: ST_TO_ADDR
// if not tmp then
69606: LD_VAR 0 4
69610: NOT
69611: IFFALSE 69615
// continue ;
69613: GO 69572
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
69615: LD_EXP 90
69619: PUSH
69620: LD_VAR 0 2
69624: ARRAY
69625: PPUSH
69626: LD_INT 29
69628: PPUSH
69629: CALL_OW 325
69633: NOT
69634: PUSH
69635: LD_EXP 90
69639: PUSH
69640: LD_VAR 0 2
69644: ARRAY
69645: PPUSH
69646: LD_INT 28
69648: PPUSH
69649: CALL_OW 325
69653: NOT
69654: AND
69655: IFFALSE 69659
// continue ;
69657: GO 69572
// for j in tmp do
69659: LD_ADDR_VAR 0 3
69663: PUSH
69664: LD_VAR 0 4
69668: PUSH
69669: FOR_IN
69670: IFFALSE 69729
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69672: LD_VAR 0 3
69676: PUSH
69677: LD_EXP 67
69681: PUSH
69682: LD_VAR 0 2
69686: ARRAY
69687: PUSH
69688: LD_INT 1
69690: ARRAY
69691: IN
69692: NOT
69693: PUSH
69694: LD_VAR 0 3
69698: PUSH
69699: LD_EXP 67
69703: PUSH
69704: LD_VAR 0 2
69708: ARRAY
69709: PUSH
69710: LD_INT 2
69712: ARRAY
69713: IN
69714: NOT
69715: AND
69716: IFFALSE 69727
// ComSpaceTimeShoot ( j ) ;
69718: LD_VAR 0 3
69722: PPUSH
69723: CALL 14361 0 1
69727: GO 69669
69729: POP
69730: POP
// end ;
69731: GO 69572
69733: POP
69734: POP
// end ;
69735: LD_VAR 0 1
69739: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
69740: LD_INT 0
69742: PPUSH
69743: PPUSH
69744: PPUSH
69745: PPUSH
69746: PPUSH
69747: PPUSH
69748: PPUSH
69749: PPUSH
69750: PPUSH
// if not mc_bases then
69751: LD_EXP 64
69755: NOT
69756: IFFALSE 69760
// exit ;
69758: GO 70382
// for i = 1 to mc_bases do
69760: LD_ADDR_VAR 0 2
69764: PUSH
69765: DOUBLE
69766: LD_INT 1
69768: DEC
69769: ST_TO_ADDR
69770: LD_EXP 64
69774: PUSH
69775: FOR_TO
69776: IFFALSE 70380
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
69778: LD_EXP 99
69782: PUSH
69783: LD_VAR 0 2
69787: ARRAY
69788: NOT
69789: PUSH
69790: LD_INT 38
69792: PPUSH
69793: LD_EXP 90
69797: PUSH
69798: LD_VAR 0 2
69802: ARRAY
69803: PPUSH
69804: CALL_OW 321
69808: PUSH
69809: LD_INT 2
69811: NONEQUAL
69812: OR
69813: IFFALSE 69817
// continue ;
69815: GO 69775
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
69817: LD_ADDR_VAR 0 8
69821: PUSH
69822: LD_EXP 64
69826: PUSH
69827: LD_VAR 0 2
69831: ARRAY
69832: PPUSH
69833: LD_INT 30
69835: PUSH
69836: LD_INT 34
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PPUSH
69843: CALL_OW 72
69847: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
69848: LD_ADDR_VAR 0 9
69852: PUSH
69853: LD_EXP 64
69857: PUSH
69858: LD_VAR 0 2
69862: ARRAY
69863: PPUSH
69864: LD_INT 25
69866: PUSH
69867: LD_INT 4
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PPUSH
69874: CALL_OW 72
69878: PPUSH
69879: LD_INT 0
69881: PPUSH
69882: CALL 46925 0 2
69886: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
69887: LD_VAR 0 9
69891: NOT
69892: PUSH
69893: LD_VAR 0 8
69897: NOT
69898: OR
69899: PUSH
69900: LD_EXP 64
69904: PUSH
69905: LD_VAR 0 2
69909: ARRAY
69910: PPUSH
69911: LD_INT 124
69913: PPUSH
69914: CALL 46925 0 2
69918: OR
69919: IFFALSE 69923
// continue ;
69921: GO 69775
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
69923: LD_EXP 100
69927: PUSH
69928: LD_VAR 0 2
69932: ARRAY
69933: PUSH
69934: LD_EXP 99
69938: PUSH
69939: LD_VAR 0 2
69943: ARRAY
69944: LESS
69945: PUSH
69946: LD_EXP 100
69950: PUSH
69951: LD_VAR 0 2
69955: ARRAY
69956: PUSH
69957: LD_VAR 0 8
69961: LESS
69962: AND
69963: IFFALSE 70378
// begin tmp := sci [ 1 ] ;
69965: LD_ADDR_VAR 0 7
69969: PUSH
69970: LD_VAR 0 9
69974: PUSH
69975: LD_INT 1
69977: ARRAY
69978: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
69979: LD_VAR 0 7
69983: PPUSH
69984: LD_INT 124
69986: PPUSH
69987: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
69991: LD_ADDR_VAR 0 3
69995: PUSH
69996: DOUBLE
69997: LD_EXP 99
70001: PUSH
70002: LD_VAR 0 2
70006: ARRAY
70007: INC
70008: ST_TO_ADDR
70009: LD_EXP 99
70013: PUSH
70014: LD_VAR 0 2
70018: ARRAY
70019: PUSH
70020: FOR_DOWNTO
70021: IFFALSE 70364
// begin if IsInUnit ( tmp ) then
70023: LD_VAR 0 7
70027: PPUSH
70028: CALL_OW 310
70032: IFFALSE 70043
// ComExitBuilding ( tmp ) ;
70034: LD_VAR 0 7
70038: PPUSH
70039: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
70043: LD_INT 35
70045: PPUSH
70046: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
70050: LD_VAR 0 7
70054: PPUSH
70055: CALL_OW 310
70059: NOT
70060: PUSH
70061: LD_VAR 0 7
70065: PPUSH
70066: CALL_OW 314
70070: NOT
70071: AND
70072: IFFALSE 70043
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
70074: LD_ADDR_VAR 0 6
70078: PUSH
70079: LD_VAR 0 7
70083: PPUSH
70084: CALL_OW 250
70088: PUSH
70089: LD_VAR 0 7
70093: PPUSH
70094: CALL_OW 251
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70103: LD_INT 35
70105: PPUSH
70106: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
70110: LD_ADDR_VAR 0 4
70114: PUSH
70115: LD_EXP 99
70119: PUSH
70120: LD_VAR 0 2
70124: ARRAY
70125: PUSH
70126: LD_VAR 0 3
70130: ARRAY
70131: PUSH
70132: LD_INT 1
70134: ARRAY
70135: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
70136: LD_ADDR_VAR 0 5
70140: PUSH
70141: LD_EXP 99
70145: PUSH
70146: LD_VAR 0 2
70150: ARRAY
70151: PUSH
70152: LD_VAR 0 3
70156: ARRAY
70157: PUSH
70158: LD_INT 2
70160: ARRAY
70161: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
70162: LD_VAR 0 7
70166: PPUSH
70167: LD_INT 10
70169: PPUSH
70170: CALL 20957 0 2
70174: PUSH
70175: LD_INT 4
70177: ARRAY
70178: IFFALSE 70216
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
70180: LD_VAR 0 7
70184: PPUSH
70185: LD_VAR 0 6
70189: PUSH
70190: LD_INT 1
70192: ARRAY
70193: PPUSH
70194: LD_VAR 0 6
70198: PUSH
70199: LD_INT 2
70201: ARRAY
70202: PPUSH
70203: CALL_OW 111
// wait ( 0 0$10 ) ;
70207: LD_INT 350
70209: PPUSH
70210: CALL_OW 67
// end else
70214: GO 70242
// begin ComMoveXY ( tmp , x , y ) ;
70216: LD_VAR 0 7
70220: PPUSH
70221: LD_VAR 0 4
70225: PPUSH
70226: LD_VAR 0 5
70230: PPUSH
70231: CALL_OW 111
// wait ( 0 0$3 ) ;
70235: LD_INT 105
70237: PPUSH
70238: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
70242: LD_VAR 0 7
70246: PPUSH
70247: LD_VAR 0 4
70251: PPUSH
70252: LD_VAR 0 5
70256: PPUSH
70257: CALL_OW 307
70261: IFFALSE 70103
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
70263: LD_VAR 0 7
70267: PPUSH
70268: LD_VAR 0 4
70272: PPUSH
70273: LD_VAR 0 5
70277: PPUSH
70278: LD_VAR 0 8
70282: PUSH
70283: LD_VAR 0 3
70287: ARRAY
70288: PPUSH
70289: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
70293: LD_INT 35
70295: PPUSH
70296: CALL_OW 67
// until not HasTask ( tmp ) ;
70300: LD_VAR 0 7
70304: PPUSH
70305: CALL_OW 314
70309: NOT
70310: IFFALSE 70293
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
70312: LD_ADDR_EXP 100
70316: PUSH
70317: LD_EXP 100
70321: PPUSH
70322: LD_VAR 0 2
70326: PUSH
70327: LD_EXP 100
70331: PUSH
70332: LD_VAR 0 2
70336: ARRAY
70337: PUSH
70338: LD_INT 1
70340: PLUS
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PPUSH
70346: LD_VAR 0 8
70350: PUSH
70351: LD_VAR 0 3
70355: ARRAY
70356: PPUSH
70357: CALL 18364 0 3
70361: ST_TO_ADDR
// end ;
70362: GO 70020
70364: POP
70365: POP
// MC_Reset ( i , 124 ) ;
70366: LD_VAR 0 2
70370: PPUSH
70371: LD_INT 124
70373: PPUSH
70374: CALL 53985 0 2
// end ; end ;
70378: GO 69775
70380: POP
70381: POP
// end ;
70382: LD_VAR 0 1
70386: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70387: LD_INT 0
70389: PPUSH
70390: PPUSH
70391: PPUSH
// if not mc_bases then
70392: LD_EXP 64
70396: NOT
70397: IFFALSE 70401
// exit ;
70399: GO 71007
// for i = 1 to mc_bases do
70401: LD_ADDR_VAR 0 2
70405: PUSH
70406: DOUBLE
70407: LD_INT 1
70409: DEC
70410: ST_TO_ADDR
70411: LD_EXP 64
70415: PUSH
70416: FOR_TO
70417: IFFALSE 71005
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70419: LD_ADDR_VAR 0 3
70423: PUSH
70424: LD_EXP 64
70428: PUSH
70429: LD_VAR 0 2
70433: ARRAY
70434: PPUSH
70435: LD_INT 25
70437: PUSH
70438: LD_INT 4
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PPUSH
70445: CALL_OW 72
70449: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
70450: LD_VAR 0 3
70454: NOT
70455: PUSH
70456: LD_EXP 101
70460: PUSH
70461: LD_VAR 0 2
70465: ARRAY
70466: NOT
70467: OR
70468: PUSH
70469: LD_EXP 64
70473: PUSH
70474: LD_VAR 0 2
70478: ARRAY
70479: PPUSH
70480: LD_INT 2
70482: PUSH
70483: LD_INT 30
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 30
70495: PUSH
70496: LD_INT 1
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: PPUSH
70508: CALL_OW 72
70512: NOT
70513: OR
70514: IFFALSE 70564
// begin if mc_deposits_finder [ i ] then
70516: LD_EXP 102
70520: PUSH
70521: LD_VAR 0 2
70525: ARRAY
70526: IFFALSE 70562
// begin MC_Reset ( i , 125 ) ;
70528: LD_VAR 0 2
70532: PPUSH
70533: LD_INT 125
70535: PPUSH
70536: CALL 53985 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70540: LD_ADDR_EXP 102
70544: PUSH
70545: LD_EXP 102
70549: PPUSH
70550: LD_VAR 0 2
70554: PPUSH
70555: EMPTY
70556: PPUSH
70557: CALL_OW 1
70561: ST_TO_ADDR
// end ; continue ;
70562: GO 70416
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
70564: LD_EXP 101
70568: PUSH
70569: LD_VAR 0 2
70573: ARRAY
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PUSH
70579: LD_INT 3
70581: ARRAY
70582: PUSH
70583: LD_INT 1
70585: EQUAL
70586: PUSH
70587: LD_INT 20
70589: PPUSH
70590: LD_EXP 90
70594: PUSH
70595: LD_VAR 0 2
70599: ARRAY
70600: PPUSH
70601: CALL_OW 321
70605: PUSH
70606: LD_INT 2
70608: NONEQUAL
70609: AND
70610: IFFALSE 70660
// begin if mc_deposits_finder [ i ] then
70612: LD_EXP 102
70616: PUSH
70617: LD_VAR 0 2
70621: ARRAY
70622: IFFALSE 70658
// begin MC_Reset ( i , 125 ) ;
70624: LD_VAR 0 2
70628: PPUSH
70629: LD_INT 125
70631: PPUSH
70632: CALL 53985 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70636: LD_ADDR_EXP 102
70640: PUSH
70641: LD_EXP 102
70645: PPUSH
70646: LD_VAR 0 2
70650: PPUSH
70651: EMPTY
70652: PPUSH
70653: CALL_OW 1
70657: ST_TO_ADDR
// end ; continue ;
70658: GO 70416
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
70660: LD_EXP 101
70664: PUSH
70665: LD_VAR 0 2
70669: ARRAY
70670: PUSH
70671: LD_INT 1
70673: ARRAY
70674: PUSH
70675: LD_INT 1
70677: ARRAY
70678: PPUSH
70679: LD_EXP 101
70683: PUSH
70684: LD_VAR 0 2
70688: ARRAY
70689: PUSH
70690: LD_INT 1
70692: ARRAY
70693: PUSH
70694: LD_INT 2
70696: ARRAY
70697: PPUSH
70698: LD_EXP 90
70702: PUSH
70703: LD_VAR 0 2
70707: ARRAY
70708: PPUSH
70709: CALL_OW 440
70713: IFFALSE 70756
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
70715: LD_ADDR_EXP 101
70719: PUSH
70720: LD_EXP 101
70724: PPUSH
70725: LD_VAR 0 2
70729: PPUSH
70730: LD_EXP 101
70734: PUSH
70735: LD_VAR 0 2
70739: ARRAY
70740: PPUSH
70741: LD_INT 1
70743: PPUSH
70744: CALL_OW 3
70748: PPUSH
70749: CALL_OW 1
70753: ST_TO_ADDR
70754: GO 71003
// begin if not mc_deposits_finder [ i ] then
70756: LD_EXP 102
70760: PUSH
70761: LD_VAR 0 2
70765: ARRAY
70766: NOT
70767: IFFALSE 70819
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
70769: LD_ADDR_EXP 102
70773: PUSH
70774: LD_EXP 102
70778: PPUSH
70779: LD_VAR 0 2
70783: PPUSH
70784: LD_VAR 0 3
70788: PUSH
70789: LD_INT 1
70791: ARRAY
70792: PUSH
70793: EMPTY
70794: LIST
70795: PPUSH
70796: CALL_OW 1
70800: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
70801: LD_VAR 0 3
70805: PUSH
70806: LD_INT 1
70808: ARRAY
70809: PPUSH
70810: LD_INT 125
70812: PPUSH
70813: CALL_OW 109
// end else
70817: GO 71003
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
70819: LD_EXP 102
70823: PUSH
70824: LD_VAR 0 2
70828: ARRAY
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: PPUSH
70834: CALL_OW 310
70838: IFFALSE 70861
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
70840: LD_EXP 102
70844: PUSH
70845: LD_VAR 0 2
70849: ARRAY
70850: PUSH
70851: LD_INT 1
70853: ARRAY
70854: PPUSH
70855: CALL_OW 122
70859: GO 71003
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
70861: LD_EXP 102
70865: PUSH
70866: LD_VAR 0 2
70870: ARRAY
70871: PUSH
70872: LD_INT 1
70874: ARRAY
70875: PPUSH
70876: CALL_OW 314
70880: NOT
70881: PUSH
70882: LD_EXP 102
70886: PUSH
70887: LD_VAR 0 2
70891: ARRAY
70892: PUSH
70893: LD_INT 1
70895: ARRAY
70896: PPUSH
70897: LD_EXP 101
70901: PUSH
70902: LD_VAR 0 2
70906: ARRAY
70907: PUSH
70908: LD_INT 1
70910: ARRAY
70911: PUSH
70912: LD_INT 1
70914: ARRAY
70915: PPUSH
70916: LD_EXP 101
70920: PUSH
70921: LD_VAR 0 2
70925: ARRAY
70926: PUSH
70927: LD_INT 1
70929: ARRAY
70930: PUSH
70931: LD_INT 2
70933: ARRAY
70934: PPUSH
70935: CALL_OW 297
70939: PUSH
70940: LD_INT 6
70942: GREATER
70943: AND
70944: IFFALSE 71003
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
70946: LD_EXP 102
70950: PUSH
70951: LD_VAR 0 2
70955: ARRAY
70956: PUSH
70957: LD_INT 1
70959: ARRAY
70960: PPUSH
70961: LD_EXP 101
70965: PUSH
70966: LD_VAR 0 2
70970: ARRAY
70971: PUSH
70972: LD_INT 1
70974: ARRAY
70975: PUSH
70976: LD_INT 1
70978: ARRAY
70979: PPUSH
70980: LD_EXP 101
70984: PUSH
70985: LD_VAR 0 2
70989: ARRAY
70990: PUSH
70991: LD_INT 1
70993: ARRAY
70994: PUSH
70995: LD_INT 2
70997: ARRAY
70998: PPUSH
70999: CALL_OW 111
// end ; end ; end ;
71003: GO 70416
71005: POP
71006: POP
// end ;
71007: LD_VAR 0 1
71011: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
71012: LD_INT 0
71014: PPUSH
71015: PPUSH
71016: PPUSH
71017: PPUSH
71018: PPUSH
71019: PPUSH
71020: PPUSH
71021: PPUSH
71022: PPUSH
71023: PPUSH
71024: PPUSH
// if not mc_bases then
71025: LD_EXP 64
71029: NOT
71030: IFFALSE 71034
// exit ;
71032: GO 71974
// for i = 1 to mc_bases do
71034: LD_ADDR_VAR 0 2
71038: PUSH
71039: DOUBLE
71040: LD_INT 1
71042: DEC
71043: ST_TO_ADDR
71044: LD_EXP 64
71048: PUSH
71049: FOR_TO
71050: IFFALSE 71972
// begin if not mc_bases [ i ] or mc_scan [ i ] then
71052: LD_EXP 64
71056: PUSH
71057: LD_VAR 0 2
71061: ARRAY
71062: NOT
71063: PUSH
71064: LD_EXP 87
71068: PUSH
71069: LD_VAR 0 2
71073: ARRAY
71074: OR
71075: IFFALSE 71079
// continue ;
71077: GO 71049
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71079: LD_ADDR_VAR 0 7
71083: PUSH
71084: LD_EXP 64
71088: PUSH
71089: LD_VAR 0 2
71093: ARRAY
71094: PUSH
71095: LD_INT 1
71097: ARRAY
71098: PPUSH
71099: CALL_OW 248
71103: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
71104: LD_VAR 0 7
71108: PUSH
71109: LD_INT 3
71111: EQUAL
71112: PUSH
71113: LD_EXP 83
71117: PUSH
71118: LD_VAR 0 2
71122: ARRAY
71123: PUSH
71124: LD_EXP 86
71128: PUSH
71129: LD_VAR 0 2
71133: ARRAY
71134: UNION
71135: PPUSH
71136: LD_INT 33
71138: PUSH
71139: LD_INT 2
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PPUSH
71146: CALL_OW 72
71150: NOT
71151: OR
71152: IFFALSE 71156
// continue ;
71154: GO 71049
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71156: LD_ADDR_VAR 0 9
71160: PUSH
71161: LD_EXP 64
71165: PUSH
71166: LD_VAR 0 2
71170: ARRAY
71171: PPUSH
71172: LD_INT 30
71174: PUSH
71175: LD_INT 36
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PPUSH
71182: CALL_OW 72
71186: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
71187: LD_ADDR_VAR 0 10
71191: PUSH
71192: LD_EXP 83
71196: PUSH
71197: LD_VAR 0 2
71201: ARRAY
71202: PPUSH
71203: LD_INT 34
71205: PUSH
71206: LD_INT 31
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PPUSH
71213: CALL_OW 72
71217: ST_TO_ADDR
// if not cts and not mcts then
71218: LD_VAR 0 9
71222: NOT
71223: PUSH
71224: LD_VAR 0 10
71228: NOT
71229: AND
71230: IFFALSE 71234
// continue ;
71232: GO 71049
// x := cts ;
71234: LD_ADDR_VAR 0 11
71238: PUSH
71239: LD_VAR 0 9
71243: ST_TO_ADDR
// if not x then
71244: LD_VAR 0 11
71248: NOT
71249: IFFALSE 71261
// x := mcts ;
71251: LD_ADDR_VAR 0 11
71255: PUSH
71256: LD_VAR 0 10
71260: ST_TO_ADDR
// if not x then
71261: LD_VAR 0 11
71265: NOT
71266: IFFALSE 71270
// continue ;
71268: GO 71049
// if mc_remote_driver [ i ] then
71270: LD_EXP 104
71274: PUSH
71275: LD_VAR 0 2
71279: ARRAY
71280: IFFALSE 71667
// for j in mc_remote_driver [ i ] do
71282: LD_ADDR_VAR 0 3
71286: PUSH
71287: LD_EXP 104
71291: PUSH
71292: LD_VAR 0 2
71296: ARRAY
71297: PUSH
71298: FOR_IN
71299: IFFALSE 71665
// begin if GetClass ( j ) <> 3 then
71301: LD_VAR 0 3
71305: PPUSH
71306: CALL_OW 257
71310: PUSH
71311: LD_INT 3
71313: NONEQUAL
71314: IFFALSE 71367
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
71316: LD_ADDR_EXP 104
71320: PUSH
71321: LD_EXP 104
71325: PPUSH
71326: LD_VAR 0 2
71330: PPUSH
71331: LD_EXP 104
71335: PUSH
71336: LD_VAR 0 2
71340: ARRAY
71341: PUSH
71342: LD_VAR 0 3
71346: DIFF
71347: PPUSH
71348: CALL_OW 1
71352: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71353: LD_VAR 0 3
71357: PPUSH
71358: LD_INT 0
71360: PPUSH
71361: CALL_OW 109
// continue ;
71365: GO 71298
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
71367: LD_EXP 83
71371: PUSH
71372: LD_VAR 0 2
71376: ARRAY
71377: PPUSH
71378: LD_INT 34
71380: PUSH
71381: LD_INT 31
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 58
71390: PUSH
71391: EMPTY
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PPUSH
71398: CALL_OW 72
71402: PUSH
71403: LD_VAR 0 3
71407: PPUSH
71408: CALL 47013 0 1
71412: NOT
71413: AND
71414: IFFALSE 71485
// begin if IsInUnit ( j ) then
71416: LD_VAR 0 3
71420: PPUSH
71421: CALL_OW 310
71425: IFFALSE 71436
// ComExitBuilding ( j ) ;
71427: LD_VAR 0 3
71431: PPUSH
71432: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
71436: LD_VAR 0 3
71440: PPUSH
71441: LD_EXP 83
71445: PUSH
71446: LD_VAR 0 2
71450: ARRAY
71451: PPUSH
71452: LD_INT 34
71454: PUSH
71455: LD_INT 31
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 58
71464: PUSH
71465: EMPTY
71466: LIST
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PPUSH
71472: CALL_OW 72
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: PPUSH
71481: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
71485: LD_VAR 0 3
71489: PPUSH
71490: CALL_OW 310
71494: NOT
71495: PUSH
71496: LD_VAR 0 3
71500: PPUSH
71501: CALL_OW 310
71505: PPUSH
71506: CALL_OW 266
71510: PUSH
71511: LD_INT 36
71513: NONEQUAL
71514: PUSH
71515: LD_VAR 0 3
71519: PPUSH
71520: CALL 47013 0 1
71524: NOT
71525: AND
71526: OR
71527: IFFALSE 71663
// begin if IsInUnit ( j ) then
71529: LD_VAR 0 3
71533: PPUSH
71534: CALL_OW 310
71538: IFFALSE 71549
// ComExitBuilding ( j ) ;
71540: LD_VAR 0 3
71544: PPUSH
71545: CALL_OW 122
// ct := 0 ;
71549: LD_ADDR_VAR 0 8
71553: PUSH
71554: LD_INT 0
71556: ST_TO_ADDR
// for k in x do
71557: LD_ADDR_VAR 0 4
71561: PUSH
71562: LD_VAR 0 11
71566: PUSH
71567: FOR_IN
71568: IFFALSE 71641
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
71570: LD_VAR 0 4
71574: PPUSH
71575: CALL_OW 264
71579: PUSH
71580: LD_INT 31
71582: EQUAL
71583: PUSH
71584: LD_VAR 0 4
71588: PPUSH
71589: CALL_OW 311
71593: NOT
71594: AND
71595: PUSH
71596: LD_VAR 0 4
71600: PPUSH
71601: CALL_OW 266
71605: PUSH
71606: LD_INT 36
71608: EQUAL
71609: PUSH
71610: LD_VAR 0 4
71614: PPUSH
71615: CALL_OW 313
71619: PUSH
71620: LD_INT 3
71622: LESS
71623: AND
71624: OR
71625: IFFALSE 71639
// begin ct := k ;
71627: LD_ADDR_VAR 0 8
71631: PUSH
71632: LD_VAR 0 4
71636: ST_TO_ADDR
// break ;
71637: GO 71641
// end ;
71639: GO 71567
71641: POP
71642: POP
// if ct then
71643: LD_VAR 0 8
71647: IFFALSE 71663
// ComEnterUnit ( j , ct ) ;
71649: LD_VAR 0 3
71653: PPUSH
71654: LD_VAR 0 8
71658: PPUSH
71659: CALL_OW 120
// end ; end ;
71663: GO 71298
71665: POP
71666: POP
// places := 0 ;
71667: LD_ADDR_VAR 0 5
71671: PUSH
71672: LD_INT 0
71674: ST_TO_ADDR
// for j = 1 to x do
71675: LD_ADDR_VAR 0 3
71679: PUSH
71680: DOUBLE
71681: LD_INT 1
71683: DEC
71684: ST_TO_ADDR
71685: LD_VAR 0 11
71689: PUSH
71690: FOR_TO
71691: IFFALSE 71767
// if GetWeapon ( x [ j ] ) = ar_control_tower then
71693: LD_VAR 0 11
71697: PUSH
71698: LD_VAR 0 3
71702: ARRAY
71703: PPUSH
71704: CALL_OW 264
71708: PUSH
71709: LD_INT 31
71711: EQUAL
71712: IFFALSE 71730
// places := places + 1 else
71714: LD_ADDR_VAR 0 5
71718: PUSH
71719: LD_VAR 0 5
71723: PUSH
71724: LD_INT 1
71726: PLUS
71727: ST_TO_ADDR
71728: GO 71765
// if GetBType ( x [ j ] ) = b_control_tower then
71730: LD_VAR 0 11
71734: PUSH
71735: LD_VAR 0 3
71739: ARRAY
71740: PPUSH
71741: CALL_OW 266
71745: PUSH
71746: LD_INT 36
71748: EQUAL
71749: IFFALSE 71765
// places := places + 3 ;
71751: LD_ADDR_VAR 0 5
71755: PUSH
71756: LD_VAR 0 5
71760: PUSH
71761: LD_INT 3
71763: PLUS
71764: ST_TO_ADDR
71765: GO 71690
71767: POP
71768: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
71769: LD_VAR 0 5
71773: PUSH
71774: LD_INT 0
71776: EQUAL
71777: PUSH
71778: LD_VAR 0 5
71782: PUSH
71783: LD_EXP 104
71787: PUSH
71788: LD_VAR 0 2
71792: ARRAY
71793: LESSEQUAL
71794: OR
71795: IFFALSE 71799
// continue ;
71797: GO 71049
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
71799: LD_ADDR_VAR 0 6
71803: PUSH
71804: LD_EXP 64
71808: PUSH
71809: LD_VAR 0 2
71813: ARRAY
71814: PPUSH
71815: LD_INT 25
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PPUSH
71825: CALL_OW 72
71829: PUSH
71830: LD_EXP 104
71834: PUSH
71835: LD_VAR 0 2
71839: ARRAY
71840: DIFF
71841: PPUSH
71842: LD_INT 3
71844: PPUSH
71845: CALL 47913 0 2
71849: ST_TO_ADDR
// for j in tmp do
71850: LD_ADDR_VAR 0 3
71854: PUSH
71855: LD_VAR 0 6
71859: PUSH
71860: FOR_IN
71861: IFFALSE 71896
// if GetTag ( j ) > 0 then
71863: LD_VAR 0 3
71867: PPUSH
71868: CALL_OW 110
71872: PUSH
71873: LD_INT 0
71875: GREATER
71876: IFFALSE 71894
// tmp := tmp diff j ;
71878: LD_ADDR_VAR 0 6
71882: PUSH
71883: LD_VAR 0 6
71887: PUSH
71888: LD_VAR 0 3
71892: DIFF
71893: ST_TO_ADDR
71894: GO 71860
71896: POP
71897: POP
// if not tmp then
71898: LD_VAR 0 6
71902: NOT
71903: IFFALSE 71907
// continue ;
71905: GO 71049
// if places then
71907: LD_VAR 0 5
71911: IFFALSE 71970
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
71913: LD_ADDR_EXP 104
71917: PUSH
71918: LD_EXP 104
71922: PPUSH
71923: LD_VAR 0 2
71927: PPUSH
71928: LD_EXP 104
71932: PUSH
71933: LD_VAR 0 2
71937: ARRAY
71938: PUSH
71939: LD_VAR 0 6
71943: PUSH
71944: LD_INT 1
71946: ARRAY
71947: UNION
71948: PPUSH
71949: CALL_OW 1
71953: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
71954: LD_VAR 0 6
71958: PUSH
71959: LD_INT 1
71961: ARRAY
71962: PPUSH
71963: LD_INT 126
71965: PPUSH
71966: CALL_OW 109
// end ; end ;
71970: GO 71049
71972: POP
71973: POP
// end ;
71974: LD_VAR 0 1
71978: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
71979: LD_INT 0
71981: PPUSH
71982: PPUSH
71983: PPUSH
71984: PPUSH
71985: PPUSH
71986: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
71987: LD_VAR 0 1
71991: NOT
71992: PUSH
71993: LD_VAR 0 2
71997: NOT
71998: OR
71999: PUSH
72000: LD_VAR 0 3
72004: NOT
72005: OR
72006: PUSH
72007: LD_VAR 0 4
72011: PUSH
72012: LD_INT 1
72014: PUSH
72015: LD_INT 2
72017: PUSH
72018: LD_INT 3
72020: PUSH
72021: LD_INT 4
72023: PUSH
72024: LD_INT 5
72026: PUSH
72027: LD_INT 8
72029: PUSH
72030: LD_INT 9
72032: PUSH
72033: LD_INT 15
72035: PUSH
72036: LD_INT 16
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: IN
72050: NOT
72051: OR
72052: IFFALSE 72056
// exit ;
72054: GO 72956
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72056: LD_ADDR_VAR 0 2
72060: PUSH
72061: LD_VAR 0 2
72065: PPUSH
72066: LD_INT 21
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 24
72078: PUSH
72079: LD_INT 250
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PPUSH
72090: CALL_OW 72
72094: ST_TO_ADDR
// case class of 1 , 15 :
72095: LD_VAR 0 4
72099: PUSH
72100: LD_INT 1
72102: DOUBLE
72103: EQUAL
72104: IFTRUE 72114
72106: LD_INT 15
72108: DOUBLE
72109: EQUAL
72110: IFTRUE 72114
72112: GO 72199
72114: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72115: LD_ADDR_VAR 0 8
72119: PUSH
72120: LD_VAR 0 2
72124: PPUSH
72125: LD_INT 2
72127: PUSH
72128: LD_INT 30
72130: PUSH
72131: LD_INT 32
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 30
72140: PUSH
72141: LD_INT 31
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PPUSH
72153: CALL_OW 72
72157: PUSH
72158: LD_VAR 0 2
72162: PPUSH
72163: LD_INT 2
72165: PUSH
72166: LD_INT 30
72168: PUSH
72169: LD_INT 4
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 30
72178: PUSH
72179: LD_INT 5
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: LIST
72190: PPUSH
72191: CALL_OW 72
72195: ADD
72196: ST_TO_ADDR
72197: GO 72445
72199: LD_INT 2
72201: DOUBLE
72202: EQUAL
72203: IFTRUE 72213
72205: LD_INT 16
72207: DOUBLE
72208: EQUAL
72209: IFTRUE 72213
72211: GO 72259
72213: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72214: LD_ADDR_VAR 0 8
72218: PUSH
72219: LD_VAR 0 2
72223: PPUSH
72224: LD_INT 2
72226: PUSH
72227: LD_INT 30
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 30
72239: PUSH
72240: LD_INT 1
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: PPUSH
72252: CALL_OW 72
72256: ST_TO_ADDR
72257: GO 72445
72259: LD_INT 3
72261: DOUBLE
72262: EQUAL
72263: IFTRUE 72267
72265: GO 72313
72267: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72268: LD_ADDR_VAR 0 8
72272: PUSH
72273: LD_VAR 0 2
72277: PPUSH
72278: LD_INT 2
72280: PUSH
72281: LD_INT 30
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 30
72293: PUSH
72294: LD_INT 3
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: LIST
72305: PPUSH
72306: CALL_OW 72
72310: ST_TO_ADDR
72311: GO 72445
72313: LD_INT 4
72315: DOUBLE
72316: EQUAL
72317: IFTRUE 72321
72319: GO 72378
72321: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72322: LD_ADDR_VAR 0 8
72326: PUSH
72327: LD_VAR 0 2
72331: PPUSH
72332: LD_INT 2
72334: PUSH
72335: LD_INT 30
72337: PUSH
72338: LD_INT 6
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 30
72347: PUSH
72348: LD_INT 7
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 30
72357: PUSH
72358: LD_INT 8
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: PPUSH
72371: CALL_OW 72
72375: ST_TO_ADDR
72376: GO 72445
72378: LD_INT 5
72380: DOUBLE
72381: EQUAL
72382: IFTRUE 72398
72384: LD_INT 8
72386: DOUBLE
72387: EQUAL
72388: IFTRUE 72398
72390: LD_INT 9
72392: DOUBLE
72393: EQUAL
72394: IFTRUE 72398
72396: GO 72444
72398: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72399: LD_ADDR_VAR 0 8
72403: PUSH
72404: LD_VAR 0 2
72408: PPUSH
72409: LD_INT 2
72411: PUSH
72412: LD_INT 30
72414: PUSH
72415: LD_INT 4
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 30
72424: PUSH
72425: LD_INT 5
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: LIST
72436: PPUSH
72437: CALL_OW 72
72441: ST_TO_ADDR
72442: GO 72445
72444: POP
// if not tmp then
72445: LD_VAR 0 8
72449: NOT
72450: IFFALSE 72454
// exit ;
72452: GO 72956
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72454: LD_VAR 0 4
72458: PUSH
72459: LD_INT 1
72461: PUSH
72462: LD_INT 15
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: IN
72469: PUSH
72470: LD_EXP 73
72474: PUSH
72475: LD_VAR 0 1
72479: ARRAY
72480: AND
72481: IFFALSE 72637
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72483: LD_ADDR_VAR 0 9
72487: PUSH
72488: LD_EXP 73
72492: PUSH
72493: LD_VAR 0 1
72497: ARRAY
72498: PUSH
72499: LD_INT 1
72501: ARRAY
72502: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72503: LD_VAR 0 9
72507: PUSH
72508: LD_EXP 74
72512: PUSH
72513: LD_VAR 0 1
72517: ARRAY
72518: IN
72519: NOT
72520: IFFALSE 72635
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72522: LD_ADDR_EXP 74
72526: PUSH
72527: LD_EXP 74
72531: PPUSH
72532: LD_VAR 0 1
72536: PUSH
72537: LD_EXP 74
72541: PUSH
72542: LD_VAR 0 1
72546: ARRAY
72547: PUSH
72548: LD_INT 1
72550: PLUS
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PPUSH
72556: LD_VAR 0 9
72560: PPUSH
72561: CALL 18364 0 3
72565: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72566: LD_ADDR_EXP 73
72570: PUSH
72571: LD_EXP 73
72575: PPUSH
72576: LD_VAR 0 1
72580: PPUSH
72581: LD_EXP 73
72585: PUSH
72586: LD_VAR 0 1
72590: ARRAY
72591: PUSH
72592: LD_VAR 0 9
72596: DIFF
72597: PPUSH
72598: CALL_OW 1
72602: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72603: LD_VAR 0 3
72607: PPUSH
72608: LD_EXP 74
72612: PUSH
72613: LD_VAR 0 1
72617: ARRAY
72618: PUSH
72619: LD_EXP 74
72623: PUSH
72624: LD_VAR 0 1
72628: ARRAY
72629: ARRAY
72630: PPUSH
72631: CALL_OW 120
// end ; exit ;
72635: GO 72956
// end ; if tmp > 1 then
72637: LD_VAR 0 8
72641: PUSH
72642: LD_INT 1
72644: GREATER
72645: IFFALSE 72749
// for i = 2 to tmp do
72647: LD_ADDR_VAR 0 6
72651: PUSH
72652: DOUBLE
72653: LD_INT 2
72655: DEC
72656: ST_TO_ADDR
72657: LD_VAR 0 8
72661: PUSH
72662: FOR_TO
72663: IFFALSE 72747
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72665: LD_VAR 0 8
72669: PUSH
72670: LD_VAR 0 6
72674: ARRAY
72675: PPUSH
72676: CALL_OW 461
72680: PUSH
72681: LD_INT 6
72683: EQUAL
72684: IFFALSE 72745
// begin x := tmp [ i ] ;
72686: LD_ADDR_VAR 0 9
72690: PUSH
72691: LD_VAR 0 8
72695: PUSH
72696: LD_VAR 0 6
72700: ARRAY
72701: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72702: LD_ADDR_VAR 0 8
72706: PUSH
72707: LD_VAR 0 8
72711: PPUSH
72712: LD_VAR 0 6
72716: PPUSH
72717: CALL_OW 3
72721: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72722: LD_ADDR_VAR 0 8
72726: PUSH
72727: LD_VAR 0 8
72731: PPUSH
72732: LD_INT 1
72734: PPUSH
72735: LD_VAR 0 9
72739: PPUSH
72740: CALL_OW 2
72744: ST_TO_ADDR
// end ;
72745: GO 72662
72747: POP
72748: POP
// for i in tmp do
72749: LD_ADDR_VAR 0 6
72753: PUSH
72754: LD_VAR 0 8
72758: PUSH
72759: FOR_IN
72760: IFFALSE 72829
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72762: LD_VAR 0 6
72766: PPUSH
72767: CALL_OW 313
72771: PUSH
72772: LD_INT 6
72774: LESS
72775: PUSH
72776: LD_VAR 0 6
72780: PPUSH
72781: CALL_OW 266
72785: PUSH
72786: LD_INT 31
72788: PUSH
72789: LD_INT 32
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: IN
72796: NOT
72797: AND
72798: PUSH
72799: LD_VAR 0 6
72803: PPUSH
72804: CALL_OW 313
72808: PUSH
72809: LD_INT 0
72811: EQUAL
72812: OR
72813: IFFALSE 72827
// begin j := i ;
72815: LD_ADDR_VAR 0 7
72819: PUSH
72820: LD_VAR 0 6
72824: ST_TO_ADDR
// break ;
72825: GO 72829
// end ; end ;
72827: GO 72759
72829: POP
72830: POP
// if j then
72831: LD_VAR 0 7
72835: IFFALSE 72853
// ComEnterUnit ( unit , j ) else
72837: LD_VAR 0 3
72841: PPUSH
72842: LD_VAR 0 7
72846: PPUSH
72847: CALL_OW 120
72851: GO 72956
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72853: LD_ADDR_VAR 0 10
72857: PUSH
72858: LD_VAR 0 2
72862: PPUSH
72863: LD_INT 2
72865: PUSH
72866: LD_INT 30
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 30
72878: PUSH
72879: LD_INT 1
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: PPUSH
72891: CALL_OW 72
72895: ST_TO_ADDR
// if depot then
72896: LD_VAR 0 10
72900: IFFALSE 72956
// begin depot := NearestUnitToUnit ( depot , unit ) ;
72902: LD_ADDR_VAR 0 10
72906: PUSH
72907: LD_VAR 0 10
72911: PPUSH
72912: LD_VAR 0 3
72916: PPUSH
72917: CALL_OW 74
72921: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
72922: LD_VAR 0 3
72926: PPUSH
72927: LD_VAR 0 10
72931: PPUSH
72932: CALL_OW 296
72936: PUSH
72937: LD_INT 10
72939: GREATER
72940: IFFALSE 72956
// ComStandNearbyBuilding ( unit , depot ) ;
72942: LD_VAR 0 3
72946: PPUSH
72947: LD_VAR 0 10
72951: PPUSH
72952: CALL 14978 0 2
// end ; end ; end ;
72956: LD_VAR 0 5
72960: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
72961: LD_INT 0
72963: PPUSH
72964: PPUSH
72965: PPUSH
72966: PPUSH
// if not mc_bases then
72967: LD_EXP 64
72971: NOT
72972: IFFALSE 72976
// exit ;
72974: GO 73215
// for i = 1 to mc_bases do
72976: LD_ADDR_VAR 0 2
72980: PUSH
72981: DOUBLE
72982: LD_INT 1
72984: DEC
72985: ST_TO_ADDR
72986: LD_EXP 64
72990: PUSH
72991: FOR_TO
72992: IFFALSE 73213
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
72994: LD_ADDR_VAR 0 4
72998: PUSH
72999: LD_EXP 64
73003: PUSH
73004: LD_VAR 0 2
73008: ARRAY
73009: PPUSH
73010: LD_INT 21
73012: PUSH
73013: LD_INT 1
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: PPUSH
73020: CALL_OW 72
73024: PUSH
73025: LD_EXP 93
73029: PUSH
73030: LD_VAR 0 2
73034: ARRAY
73035: UNION
73036: ST_TO_ADDR
// if not tmp then
73037: LD_VAR 0 4
73041: NOT
73042: IFFALSE 73046
// continue ;
73044: GO 72991
// for j in tmp do
73046: LD_ADDR_VAR 0 3
73050: PUSH
73051: LD_VAR 0 4
73055: PUSH
73056: FOR_IN
73057: IFFALSE 73209
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73059: LD_VAR 0 3
73063: PPUSH
73064: CALL_OW 110
73068: NOT
73069: PUSH
73070: LD_VAR 0 3
73074: PPUSH
73075: CALL_OW 314
73079: NOT
73080: AND
73081: PUSH
73082: LD_VAR 0 3
73086: PPUSH
73087: CALL_OW 311
73091: NOT
73092: AND
73093: PUSH
73094: LD_VAR 0 3
73098: PPUSH
73099: CALL_OW 310
73103: NOT
73104: AND
73105: PUSH
73106: LD_VAR 0 3
73110: PUSH
73111: LD_EXP 67
73115: PUSH
73116: LD_VAR 0 2
73120: ARRAY
73121: PUSH
73122: LD_INT 1
73124: ARRAY
73125: IN
73126: NOT
73127: AND
73128: PUSH
73129: LD_VAR 0 3
73133: PUSH
73134: LD_EXP 67
73138: PUSH
73139: LD_VAR 0 2
73143: ARRAY
73144: PUSH
73145: LD_INT 2
73147: ARRAY
73148: IN
73149: NOT
73150: AND
73151: PUSH
73152: LD_VAR 0 3
73156: PUSH
73157: LD_EXP 76
73161: PUSH
73162: LD_VAR 0 2
73166: ARRAY
73167: IN
73168: NOT
73169: AND
73170: IFFALSE 73207
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73172: LD_VAR 0 2
73176: PPUSH
73177: LD_EXP 64
73181: PUSH
73182: LD_VAR 0 2
73186: ARRAY
73187: PPUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: LD_VAR 0 3
73197: PPUSH
73198: CALL_OW 257
73202: PPUSH
73203: CALL 71979 0 4
// end ;
73207: GO 73056
73209: POP
73210: POP
// end ;
73211: GO 72991
73213: POP
73214: POP
// end ;
73215: LD_VAR 0 1
73219: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73220: LD_INT 0
73222: PPUSH
73223: PPUSH
73224: PPUSH
73225: PPUSH
73226: PPUSH
73227: PPUSH
// if not mc_bases [ base ] then
73228: LD_EXP 64
73232: PUSH
73233: LD_VAR 0 1
73237: ARRAY
73238: NOT
73239: IFFALSE 73243
// exit ;
73241: GO 73425
// tmp := [ ] ;
73243: LD_ADDR_VAR 0 6
73247: PUSH
73248: EMPTY
73249: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73250: LD_ADDR_VAR 0 7
73254: PUSH
73255: LD_VAR 0 3
73259: PPUSH
73260: LD_INT 0
73262: PPUSH
73263: CALL_OW 517
73267: ST_TO_ADDR
// if not list then
73268: LD_VAR 0 7
73272: NOT
73273: IFFALSE 73277
// exit ;
73275: GO 73425
// for i = 1 to amount do
73277: LD_ADDR_VAR 0 5
73281: PUSH
73282: DOUBLE
73283: LD_INT 1
73285: DEC
73286: ST_TO_ADDR
73287: LD_VAR 0 2
73291: PUSH
73292: FOR_TO
73293: IFFALSE 73373
// begin x := rand ( 1 , list [ 1 ] ) ;
73295: LD_ADDR_VAR 0 8
73299: PUSH
73300: LD_INT 1
73302: PPUSH
73303: LD_VAR 0 7
73307: PUSH
73308: LD_INT 1
73310: ARRAY
73311: PPUSH
73312: CALL_OW 12
73316: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73317: LD_ADDR_VAR 0 6
73321: PUSH
73322: LD_VAR 0 6
73326: PPUSH
73327: LD_VAR 0 5
73331: PPUSH
73332: LD_VAR 0 7
73336: PUSH
73337: LD_INT 1
73339: ARRAY
73340: PUSH
73341: LD_VAR 0 8
73345: ARRAY
73346: PUSH
73347: LD_VAR 0 7
73351: PUSH
73352: LD_INT 2
73354: ARRAY
73355: PUSH
73356: LD_VAR 0 8
73360: ARRAY
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PPUSH
73366: CALL_OW 1
73370: ST_TO_ADDR
// end ;
73371: GO 73292
73373: POP
73374: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73375: LD_ADDR_EXP 77
73379: PUSH
73380: LD_EXP 77
73384: PPUSH
73385: LD_VAR 0 1
73389: PPUSH
73390: LD_VAR 0 6
73394: PPUSH
73395: CALL_OW 1
73399: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73400: LD_ADDR_EXP 79
73404: PUSH
73405: LD_EXP 79
73409: PPUSH
73410: LD_VAR 0 1
73414: PPUSH
73415: LD_VAR 0 3
73419: PPUSH
73420: CALL_OW 1
73424: ST_TO_ADDR
// end ;
73425: LD_VAR 0 4
73429: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73430: LD_INT 0
73432: PPUSH
// if not mc_bases [ base ] then
73433: LD_EXP 64
73437: PUSH
73438: LD_VAR 0 1
73442: ARRAY
73443: NOT
73444: IFFALSE 73448
// exit ;
73446: GO 73473
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73448: LD_ADDR_EXP 69
73452: PUSH
73453: LD_EXP 69
73457: PPUSH
73458: LD_VAR 0 1
73462: PPUSH
73463: LD_VAR 0 2
73467: PPUSH
73468: CALL_OW 1
73472: ST_TO_ADDR
// end ;
73473: LD_VAR 0 3
73477: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73478: LD_INT 0
73480: PPUSH
// if not mc_bases [ base ] then
73481: LD_EXP 64
73485: PUSH
73486: LD_VAR 0 1
73490: ARRAY
73491: NOT
73492: IFFALSE 73496
// exit ;
73494: GO 73533
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
73496: LD_ADDR_EXP 69
73500: PUSH
73501: LD_EXP 69
73505: PPUSH
73506: LD_VAR 0 1
73510: PPUSH
73511: LD_EXP 69
73515: PUSH
73516: LD_VAR 0 1
73520: ARRAY
73521: PUSH
73522: LD_VAR 0 2
73526: UNION
73527: PPUSH
73528: CALL_OW 1
73532: ST_TO_ADDR
// end ;
73533: LD_VAR 0 3
73537: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73538: LD_INT 0
73540: PPUSH
// if not mc_bases [ base ] then
73541: LD_EXP 64
73545: PUSH
73546: LD_VAR 0 1
73550: ARRAY
73551: NOT
73552: IFFALSE 73556
// exit ;
73554: GO 73581
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73556: LD_ADDR_EXP 85
73560: PUSH
73561: LD_EXP 85
73565: PPUSH
73566: LD_VAR 0 1
73570: PPUSH
73571: LD_VAR 0 2
73575: PPUSH
73576: CALL_OW 1
73580: ST_TO_ADDR
// end ;
73581: LD_VAR 0 3
73585: RET
// export function MC_InsertProduceList ( base , components ) ; begin
73586: LD_INT 0
73588: PPUSH
// if not mc_bases [ base ] then
73589: LD_EXP 64
73593: PUSH
73594: LD_VAR 0 1
73598: ARRAY
73599: NOT
73600: IFFALSE 73604
// exit ;
73602: GO 73641
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
73604: LD_ADDR_EXP 85
73608: PUSH
73609: LD_EXP 85
73613: PPUSH
73614: LD_VAR 0 1
73618: PPUSH
73619: LD_EXP 85
73623: PUSH
73624: LD_VAR 0 1
73628: ARRAY
73629: PUSH
73630: LD_VAR 0 2
73634: ADD
73635: PPUSH
73636: CALL_OW 1
73640: ST_TO_ADDR
// end ;
73641: LD_VAR 0 3
73645: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73646: LD_INT 0
73648: PPUSH
// if not mc_bases [ base ] then
73649: LD_EXP 64
73653: PUSH
73654: LD_VAR 0 1
73658: ARRAY
73659: NOT
73660: IFFALSE 73664
// exit ;
73662: GO 73718
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73664: LD_ADDR_EXP 86
73668: PUSH
73669: LD_EXP 86
73673: PPUSH
73674: LD_VAR 0 1
73678: PPUSH
73679: LD_VAR 0 2
73683: PPUSH
73684: CALL_OW 1
73688: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73689: LD_ADDR_EXP 75
73693: PUSH
73694: LD_EXP 75
73698: PPUSH
73699: LD_VAR 0 1
73703: PPUSH
73704: LD_VAR 0 2
73708: PUSH
73709: LD_INT 0
73711: PLUS
73712: PPUSH
73713: CALL_OW 1
73717: ST_TO_ADDR
// end ;
73718: LD_VAR 0 3
73722: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73723: LD_INT 0
73725: PPUSH
// if not mc_bases [ base ] then
73726: LD_EXP 64
73730: PUSH
73731: LD_VAR 0 1
73735: ARRAY
73736: NOT
73737: IFFALSE 73741
// exit ;
73739: GO 73766
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73741: LD_ADDR_EXP 75
73745: PUSH
73746: LD_EXP 75
73750: PPUSH
73751: LD_VAR 0 1
73755: PPUSH
73756: LD_VAR 0 2
73760: PPUSH
73761: CALL_OW 1
73765: ST_TO_ADDR
// end ;
73766: LD_VAR 0 3
73770: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73771: LD_INT 0
73773: PPUSH
73774: PPUSH
73775: PPUSH
73776: PPUSH
// if not mc_bases [ base ] then
73777: LD_EXP 64
73781: PUSH
73782: LD_VAR 0 1
73786: ARRAY
73787: NOT
73788: IFFALSE 73792
// exit ;
73790: GO 73857
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73792: LD_ADDR_EXP 84
73796: PUSH
73797: LD_EXP 84
73801: PPUSH
73802: LD_VAR 0 1
73806: PUSH
73807: LD_EXP 84
73811: PUSH
73812: LD_VAR 0 1
73816: ARRAY
73817: PUSH
73818: LD_INT 1
73820: PLUS
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PPUSH
73826: LD_VAR 0 1
73830: PUSH
73831: LD_VAR 0 2
73835: PUSH
73836: LD_VAR 0 3
73840: PUSH
73841: LD_VAR 0 4
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: PPUSH
73852: CALL 18364 0 3
73856: ST_TO_ADDR
// end ;
73857: LD_VAR 0 5
73861: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
73862: LD_INT 0
73864: PPUSH
// if not mc_bases [ base ] then
73865: LD_EXP 64
73869: PUSH
73870: LD_VAR 0 1
73874: ARRAY
73875: NOT
73876: IFFALSE 73880
// exit ;
73878: GO 73905
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
73880: LD_ADDR_EXP 101
73884: PUSH
73885: LD_EXP 101
73889: PPUSH
73890: LD_VAR 0 1
73894: PPUSH
73895: LD_VAR 0 2
73899: PPUSH
73900: CALL_OW 1
73904: ST_TO_ADDR
// end ;
73905: LD_VAR 0 3
73909: RET
// export function MC_GetMinesField ( base ) ; begin
73910: LD_INT 0
73912: PPUSH
// result := mc_mines [ base ] ;
73913: LD_ADDR_VAR 0 2
73917: PUSH
73918: LD_EXP 77
73922: PUSH
73923: LD_VAR 0 1
73927: ARRAY
73928: ST_TO_ADDR
// end ;
73929: LD_VAR 0 2
73933: RET
// export function MC_GetProduceList ( base ) ; begin
73934: LD_INT 0
73936: PPUSH
// result := mc_produce [ base ] ;
73937: LD_ADDR_VAR 0 2
73941: PUSH
73942: LD_EXP 85
73946: PUSH
73947: LD_VAR 0 1
73951: ARRAY
73952: ST_TO_ADDR
// end ;
73953: LD_VAR 0 2
73957: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
73958: LD_INT 0
73960: PPUSH
73961: PPUSH
// if not mc_bases then
73962: LD_EXP 64
73966: NOT
73967: IFFALSE 73971
// exit ;
73969: GO 74036
// if mc_bases [ base ] then
73971: LD_EXP 64
73975: PUSH
73976: LD_VAR 0 1
73980: ARRAY
73981: IFFALSE 74036
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
73983: LD_ADDR_VAR 0 3
73987: PUSH
73988: LD_EXP 64
73992: PUSH
73993: LD_VAR 0 1
73997: ARRAY
73998: PPUSH
73999: LD_INT 30
74001: PUSH
74002: LD_VAR 0 2
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PPUSH
74011: CALL_OW 72
74015: ST_TO_ADDR
// if result then
74016: LD_VAR 0 3
74020: IFFALSE 74036
// result := result [ 1 ] ;
74022: LD_ADDR_VAR 0 3
74026: PUSH
74027: LD_VAR 0 3
74031: PUSH
74032: LD_INT 1
74034: ARRAY
74035: ST_TO_ADDR
// end ; end ;
74036: LD_VAR 0 3
74040: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
74041: LD_INT 0
74043: PPUSH
74044: PPUSH
// if not mc_bases then
74045: LD_EXP 64
74049: NOT
74050: IFFALSE 74054
// exit ;
74052: GO 74099
// if mc_bases [ base ] then
74054: LD_EXP 64
74058: PUSH
74059: LD_VAR 0 1
74063: ARRAY
74064: IFFALSE 74099
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74066: LD_ADDR_VAR 0 3
74070: PUSH
74071: LD_EXP 64
74075: PUSH
74076: LD_VAR 0 1
74080: ARRAY
74081: PPUSH
74082: LD_INT 30
74084: PUSH
74085: LD_VAR 0 2
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PPUSH
74094: CALL_OW 72
74098: ST_TO_ADDR
// end ;
74099: LD_VAR 0 3
74103: RET
// export function MC_SetTame ( base , area ) ; begin
74104: LD_INT 0
74106: PPUSH
// if not mc_bases or not base then
74107: LD_EXP 64
74111: NOT
74112: PUSH
74113: LD_VAR 0 1
74117: NOT
74118: OR
74119: IFFALSE 74123
// exit ;
74121: GO 74148
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74123: LD_ADDR_EXP 92
74127: PUSH
74128: LD_EXP 92
74132: PPUSH
74133: LD_VAR 0 1
74137: PPUSH
74138: LD_VAR 0 2
74142: PPUSH
74143: CALL_OW 1
74147: ST_TO_ADDR
// end ;
74148: LD_VAR 0 3
74152: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74153: LD_INT 0
74155: PPUSH
74156: PPUSH
// if not mc_bases or not base then
74157: LD_EXP 64
74161: NOT
74162: PUSH
74163: LD_VAR 0 1
74167: NOT
74168: OR
74169: IFFALSE 74173
// exit ;
74171: GO 74275
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74173: LD_ADDR_VAR 0 4
74177: PUSH
74178: LD_EXP 64
74182: PUSH
74183: LD_VAR 0 1
74187: ARRAY
74188: PPUSH
74189: LD_INT 30
74191: PUSH
74192: LD_VAR 0 2
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PPUSH
74201: CALL_OW 72
74205: ST_TO_ADDR
// if not tmp then
74206: LD_VAR 0 4
74210: NOT
74211: IFFALSE 74215
// exit ;
74213: GO 74275
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74215: LD_ADDR_EXP 96
74219: PUSH
74220: LD_EXP 96
74224: PPUSH
74225: LD_VAR 0 1
74229: PPUSH
74230: LD_EXP 96
74234: PUSH
74235: LD_VAR 0 1
74239: ARRAY
74240: PPUSH
74241: LD_EXP 96
74245: PUSH
74246: LD_VAR 0 1
74250: ARRAY
74251: PUSH
74252: LD_INT 1
74254: PLUS
74255: PPUSH
74256: LD_VAR 0 4
74260: PUSH
74261: LD_INT 1
74263: ARRAY
74264: PPUSH
74265: CALL_OW 2
74269: PPUSH
74270: CALL_OW 1
74274: ST_TO_ADDR
// end ;
74275: LD_VAR 0 3
74279: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74280: LD_INT 0
74282: PPUSH
74283: PPUSH
// if not mc_bases or not base or not kinds then
74284: LD_EXP 64
74288: NOT
74289: PUSH
74290: LD_VAR 0 1
74294: NOT
74295: OR
74296: PUSH
74297: LD_VAR 0 2
74301: NOT
74302: OR
74303: IFFALSE 74307
// exit ;
74305: GO 74368
// for i in kinds do
74307: LD_ADDR_VAR 0 4
74311: PUSH
74312: LD_VAR 0 2
74316: PUSH
74317: FOR_IN
74318: IFFALSE 74366
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74320: LD_ADDR_EXP 98
74324: PUSH
74325: LD_EXP 98
74329: PPUSH
74330: LD_VAR 0 1
74334: PUSH
74335: LD_EXP 98
74339: PUSH
74340: LD_VAR 0 1
74344: ARRAY
74345: PUSH
74346: LD_INT 1
74348: PLUS
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PPUSH
74354: LD_VAR 0 4
74358: PPUSH
74359: CALL 18364 0 3
74363: ST_TO_ADDR
74364: GO 74317
74366: POP
74367: POP
// end ;
74368: LD_VAR 0 3
74372: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74373: LD_INT 0
74375: PPUSH
// if not mc_bases or not base or not areas then
74376: LD_EXP 64
74380: NOT
74381: PUSH
74382: LD_VAR 0 1
74386: NOT
74387: OR
74388: PUSH
74389: LD_VAR 0 2
74393: NOT
74394: OR
74395: IFFALSE 74399
// exit ;
74397: GO 74424
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74399: LD_ADDR_EXP 82
74403: PUSH
74404: LD_EXP 82
74408: PPUSH
74409: LD_VAR 0 1
74413: PPUSH
74414: LD_VAR 0 2
74418: PPUSH
74419: CALL_OW 1
74423: ST_TO_ADDR
// end ;
74424: LD_VAR 0 3
74428: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
74429: LD_INT 0
74431: PPUSH
// if not mc_bases or not base or not teleports_exit then
74432: LD_EXP 64
74436: NOT
74437: PUSH
74438: LD_VAR 0 1
74442: NOT
74443: OR
74444: PUSH
74445: LD_VAR 0 2
74449: NOT
74450: OR
74451: IFFALSE 74455
// exit ;
74453: GO 74480
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
74455: LD_ADDR_EXP 99
74459: PUSH
74460: LD_EXP 99
74464: PPUSH
74465: LD_VAR 0 1
74469: PPUSH
74470: LD_VAR 0 2
74474: PPUSH
74475: CALL_OW 1
74479: ST_TO_ADDR
// end ;
74480: LD_VAR 0 3
74484: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74485: LD_INT 0
74487: PPUSH
74488: PPUSH
74489: PPUSH
// if not mc_bases or not base or not ext_list then
74490: LD_EXP 64
74494: NOT
74495: PUSH
74496: LD_VAR 0 1
74500: NOT
74501: OR
74502: PUSH
74503: LD_VAR 0 5
74507: NOT
74508: OR
74509: IFFALSE 74513
// exit ;
74511: GO 74686
// tmp := GetFacExtXYD ( x , y , d ) ;
74513: LD_ADDR_VAR 0 8
74517: PUSH
74518: LD_VAR 0 2
74522: PPUSH
74523: LD_VAR 0 3
74527: PPUSH
74528: LD_VAR 0 4
74532: PPUSH
74533: CALL 47043 0 3
74537: ST_TO_ADDR
// if not tmp then
74538: LD_VAR 0 8
74542: NOT
74543: IFFALSE 74547
// exit ;
74545: GO 74686
// for i in tmp do
74547: LD_ADDR_VAR 0 7
74551: PUSH
74552: LD_VAR 0 8
74556: PUSH
74557: FOR_IN
74558: IFFALSE 74684
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74560: LD_ADDR_EXP 69
74564: PUSH
74565: LD_EXP 69
74569: PPUSH
74570: LD_VAR 0 1
74574: PPUSH
74575: LD_EXP 69
74579: PUSH
74580: LD_VAR 0 1
74584: ARRAY
74585: PPUSH
74586: LD_EXP 69
74590: PUSH
74591: LD_VAR 0 1
74595: ARRAY
74596: PUSH
74597: LD_INT 1
74599: PLUS
74600: PPUSH
74601: LD_VAR 0 5
74605: PUSH
74606: LD_INT 1
74608: ARRAY
74609: PUSH
74610: LD_VAR 0 7
74614: PUSH
74615: LD_INT 1
74617: ARRAY
74618: PUSH
74619: LD_VAR 0 7
74623: PUSH
74624: LD_INT 2
74626: ARRAY
74627: PUSH
74628: LD_VAR 0 7
74632: PUSH
74633: LD_INT 3
74635: ARRAY
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: PPUSH
74643: CALL_OW 2
74647: PPUSH
74648: CALL_OW 1
74652: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74653: LD_ADDR_VAR 0 5
74657: PUSH
74658: LD_VAR 0 5
74662: PPUSH
74663: LD_INT 1
74665: PPUSH
74666: CALL_OW 3
74670: ST_TO_ADDR
// if not ext_list then
74671: LD_VAR 0 5
74675: NOT
74676: IFFALSE 74682
// exit ;
74678: POP
74679: POP
74680: GO 74686
// end ;
74682: GO 74557
74684: POP
74685: POP
// end ;
74686: LD_VAR 0 6
74690: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74691: LD_INT 0
74693: PPUSH
// if not mc_bases or not base or not weapon_list then
74694: LD_EXP 64
74698: NOT
74699: PUSH
74700: LD_VAR 0 1
74704: NOT
74705: OR
74706: PUSH
74707: LD_VAR 0 2
74711: NOT
74712: OR
74713: IFFALSE 74717
// exit ;
74715: GO 74742
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74717: LD_ADDR_EXP 103
74721: PUSH
74722: LD_EXP 103
74726: PPUSH
74727: LD_VAR 0 1
74731: PPUSH
74732: LD_VAR 0 2
74736: PPUSH
74737: CALL_OW 1
74741: ST_TO_ADDR
// end ;
74742: LD_VAR 0 3
74746: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74747: LD_INT 0
74749: PPUSH
// if not mc_bases or not base or not tech_list then
74750: LD_EXP 64
74754: NOT
74755: PUSH
74756: LD_VAR 0 1
74760: NOT
74761: OR
74762: PUSH
74763: LD_VAR 0 2
74767: NOT
74768: OR
74769: IFFALSE 74773
// exit ;
74771: GO 74798
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74773: LD_ADDR_EXP 91
74777: PUSH
74778: LD_EXP 91
74782: PPUSH
74783: LD_VAR 0 1
74787: PPUSH
74788: LD_VAR 0 2
74792: PPUSH
74793: CALL_OW 1
74797: ST_TO_ADDR
// end ;
74798: LD_VAR 0 3
74802: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74803: LD_INT 0
74805: PPUSH
// if not mc_bases or not parking_area or not base then
74806: LD_EXP 64
74810: NOT
74811: PUSH
74812: LD_VAR 0 2
74816: NOT
74817: OR
74818: PUSH
74819: LD_VAR 0 1
74823: NOT
74824: OR
74825: IFFALSE 74829
// exit ;
74827: GO 74854
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74829: LD_ADDR_EXP 88
74833: PUSH
74834: LD_EXP 88
74838: PPUSH
74839: LD_VAR 0 1
74843: PPUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 1
74853: ST_TO_ADDR
// end ;
74854: LD_VAR 0 3
74858: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
74859: LD_INT 0
74861: PPUSH
// if not mc_bases or not base or not scan_area then
74862: LD_EXP 64
74866: NOT
74867: PUSH
74868: LD_VAR 0 1
74872: NOT
74873: OR
74874: PUSH
74875: LD_VAR 0 2
74879: NOT
74880: OR
74881: IFFALSE 74885
// exit ;
74883: GO 74910
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
74885: LD_ADDR_EXP 89
74889: PUSH
74890: LD_EXP 89
74894: PPUSH
74895: LD_VAR 0 1
74899: PPUSH
74900: LD_VAR 0 2
74904: PPUSH
74905: CALL_OW 1
74909: ST_TO_ADDR
// end ;
74910: LD_VAR 0 3
74914: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
74915: LD_INT 0
74917: PPUSH
74918: PPUSH
// if not mc_bases or not base then
74919: LD_EXP 64
74923: NOT
74924: PUSH
74925: LD_VAR 0 1
74929: NOT
74930: OR
74931: IFFALSE 74935
// exit ;
74933: GO 74999
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
74935: LD_ADDR_VAR 0 3
74939: PUSH
74940: LD_INT 1
74942: PUSH
74943: LD_INT 2
74945: PUSH
74946: LD_INT 3
74948: PUSH
74949: LD_INT 4
74951: PUSH
74952: LD_INT 11
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
74962: LD_ADDR_EXP 91
74966: PUSH
74967: LD_EXP 91
74971: PPUSH
74972: LD_VAR 0 1
74976: PPUSH
74977: LD_EXP 91
74981: PUSH
74982: LD_VAR 0 1
74986: ARRAY
74987: PUSH
74988: LD_VAR 0 3
74992: DIFF
74993: PPUSH
74994: CALL_OW 1
74998: ST_TO_ADDR
// end ;
74999: LD_VAR 0 2
75003: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
75004: LD_INT 0
75006: PPUSH
// result := mc_vehicles [ base ] ;
75007: LD_ADDR_VAR 0 3
75011: PUSH
75012: LD_EXP 83
75016: PUSH
75017: LD_VAR 0 1
75021: ARRAY
75022: ST_TO_ADDR
// if onlyCombat then
75023: LD_VAR 0 2
75027: IFFALSE 75192
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
75029: LD_ADDR_VAR 0 3
75033: PUSH
75034: LD_VAR 0 3
75038: PUSH
75039: LD_VAR 0 3
75043: PPUSH
75044: LD_INT 2
75046: PUSH
75047: LD_INT 34
75049: PUSH
75050: LD_INT 12
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 34
75059: PUSH
75060: LD_INT 51
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 34
75069: PUSH
75070: LD_EXP 49
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 34
75081: PUSH
75082: LD_INT 32
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 34
75091: PUSH
75092: LD_INT 13
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 34
75101: PUSH
75102: LD_INT 52
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 34
75111: PUSH
75112: LD_INT 14
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 34
75121: PUSH
75122: LD_INT 53
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 34
75131: PUSH
75132: LD_EXP 48
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 34
75143: PUSH
75144: LD_INT 31
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 34
75153: PUSH
75154: LD_INT 48
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 34
75163: PUSH
75164: LD_INT 8
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: PPUSH
75186: CALL_OW 72
75190: DIFF
75191: ST_TO_ADDR
// end ; end_of_file
75192: LD_VAR 0 3
75196: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75197: LD_INT 0
75199: PPUSH
75200: PPUSH
75201: PPUSH
// if not mc_bases or not skirmish then
75202: LD_EXP 64
75206: NOT
75207: PUSH
75208: LD_EXP 62
75212: NOT
75213: OR
75214: IFFALSE 75218
// exit ;
75216: GO 75383
// for i = 1 to mc_bases do
75218: LD_ADDR_VAR 0 4
75222: PUSH
75223: DOUBLE
75224: LD_INT 1
75226: DEC
75227: ST_TO_ADDR
75228: LD_EXP 64
75232: PUSH
75233: FOR_TO
75234: IFFALSE 75381
// begin if sci in mc_bases [ i ] then
75236: LD_VAR 0 2
75240: PUSH
75241: LD_EXP 64
75245: PUSH
75246: LD_VAR 0 4
75250: ARRAY
75251: IN
75252: IFFALSE 75379
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75254: LD_ADDR_EXP 93
75258: PUSH
75259: LD_EXP 93
75263: PPUSH
75264: LD_VAR 0 4
75268: PUSH
75269: LD_EXP 93
75273: PUSH
75274: LD_VAR 0 4
75278: ARRAY
75279: PUSH
75280: LD_INT 1
75282: PLUS
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PPUSH
75288: LD_VAR 0 1
75292: PPUSH
75293: CALL 18364 0 3
75297: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75298: LD_ADDR_VAR 0 5
75302: PUSH
75303: LD_EXP 64
75307: PUSH
75308: LD_VAR 0 4
75312: ARRAY
75313: PPUSH
75314: LD_INT 2
75316: PUSH
75317: LD_INT 30
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 30
75329: PUSH
75330: LD_INT 1
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: LIST
75341: PPUSH
75342: CALL_OW 72
75346: PPUSH
75347: LD_VAR 0 1
75351: PPUSH
75352: CALL_OW 74
75356: ST_TO_ADDR
// if tmp then
75357: LD_VAR 0 5
75361: IFFALSE 75377
// ComStandNearbyBuilding ( ape , tmp ) ;
75363: LD_VAR 0 1
75367: PPUSH
75368: LD_VAR 0 5
75372: PPUSH
75373: CALL 14978 0 2
// break ;
75377: GO 75381
// end ; end ;
75379: GO 75233
75381: POP
75382: POP
// end ;
75383: LD_VAR 0 3
75387: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75388: LD_INT 0
75390: PPUSH
75391: PPUSH
75392: PPUSH
// if not mc_bases or not skirmish then
75393: LD_EXP 64
75397: NOT
75398: PUSH
75399: LD_EXP 62
75403: NOT
75404: OR
75405: IFFALSE 75409
// exit ;
75407: GO 75498
// for i = 1 to mc_bases do
75409: LD_ADDR_VAR 0 4
75413: PUSH
75414: DOUBLE
75415: LD_INT 1
75417: DEC
75418: ST_TO_ADDR
75419: LD_EXP 64
75423: PUSH
75424: FOR_TO
75425: IFFALSE 75496
// begin if building in mc_busy_turret_list [ i ] then
75427: LD_VAR 0 1
75431: PUSH
75432: LD_EXP 74
75436: PUSH
75437: LD_VAR 0 4
75441: ARRAY
75442: IN
75443: IFFALSE 75494
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75445: LD_ADDR_VAR 0 5
75449: PUSH
75450: LD_EXP 74
75454: PUSH
75455: LD_VAR 0 4
75459: ARRAY
75460: PUSH
75461: LD_VAR 0 1
75465: DIFF
75466: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75467: LD_ADDR_EXP 74
75471: PUSH
75472: LD_EXP 74
75476: PPUSH
75477: LD_VAR 0 4
75481: PPUSH
75482: LD_VAR 0 5
75486: PPUSH
75487: CALL_OW 1
75491: ST_TO_ADDR
// break ;
75492: GO 75496
// end ; end ;
75494: GO 75424
75496: POP
75497: POP
// end ;
75498: LD_VAR 0 3
75502: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75503: LD_INT 0
75505: PPUSH
75506: PPUSH
75507: PPUSH
// if not mc_bases or not skirmish then
75508: LD_EXP 64
75512: NOT
75513: PUSH
75514: LD_EXP 62
75518: NOT
75519: OR
75520: IFFALSE 75524
// exit ;
75522: GO 75723
// for i = 1 to mc_bases do
75524: LD_ADDR_VAR 0 5
75528: PUSH
75529: DOUBLE
75530: LD_INT 1
75532: DEC
75533: ST_TO_ADDR
75534: LD_EXP 64
75538: PUSH
75539: FOR_TO
75540: IFFALSE 75721
// if building in mc_bases [ i ] then
75542: LD_VAR 0 1
75546: PUSH
75547: LD_EXP 64
75551: PUSH
75552: LD_VAR 0 5
75556: ARRAY
75557: IN
75558: IFFALSE 75719
// begin tmp := mc_bases [ i ] diff building ;
75560: LD_ADDR_VAR 0 6
75564: PUSH
75565: LD_EXP 64
75569: PUSH
75570: LD_VAR 0 5
75574: ARRAY
75575: PUSH
75576: LD_VAR 0 1
75580: DIFF
75581: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75582: LD_ADDR_EXP 64
75586: PUSH
75587: LD_EXP 64
75591: PPUSH
75592: LD_VAR 0 5
75596: PPUSH
75597: LD_VAR 0 6
75601: PPUSH
75602: CALL_OW 1
75606: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75607: LD_VAR 0 1
75611: PUSH
75612: LD_EXP 72
75616: PUSH
75617: LD_VAR 0 5
75621: ARRAY
75622: IN
75623: IFFALSE 75662
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75625: LD_ADDR_EXP 72
75629: PUSH
75630: LD_EXP 72
75634: PPUSH
75635: LD_VAR 0 5
75639: PPUSH
75640: LD_EXP 72
75644: PUSH
75645: LD_VAR 0 5
75649: ARRAY
75650: PUSH
75651: LD_VAR 0 1
75655: DIFF
75656: PPUSH
75657: CALL_OW 1
75661: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75662: LD_VAR 0 1
75666: PUSH
75667: LD_EXP 73
75671: PUSH
75672: LD_VAR 0 5
75676: ARRAY
75677: IN
75678: IFFALSE 75717
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75680: LD_ADDR_EXP 73
75684: PUSH
75685: LD_EXP 73
75689: PPUSH
75690: LD_VAR 0 5
75694: PPUSH
75695: LD_EXP 73
75699: PUSH
75700: LD_VAR 0 5
75704: ARRAY
75705: PUSH
75706: LD_VAR 0 1
75710: DIFF
75711: PPUSH
75712: CALL_OW 1
75716: ST_TO_ADDR
// break ;
75717: GO 75721
// end ;
75719: GO 75539
75721: POP
75722: POP
// end ;
75723: LD_VAR 0 4
75727: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75728: LD_INT 0
75730: PPUSH
75731: PPUSH
75732: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
75733: LD_EXP 64
75737: NOT
75738: PUSH
75739: LD_EXP 62
75743: NOT
75744: OR
75745: PUSH
75746: LD_VAR 0 3
75750: PUSH
75751: LD_EXP 90
75755: IN
75756: NOT
75757: OR
75758: IFFALSE 75762
// exit ;
75760: GO 75885
// for i = 1 to mc_vehicles do
75762: LD_ADDR_VAR 0 6
75766: PUSH
75767: DOUBLE
75768: LD_INT 1
75770: DEC
75771: ST_TO_ADDR
75772: LD_EXP 83
75776: PUSH
75777: FOR_TO
75778: IFFALSE 75883
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75780: LD_VAR 0 2
75784: PUSH
75785: LD_EXP 83
75789: PUSH
75790: LD_VAR 0 6
75794: ARRAY
75795: IN
75796: PUSH
75797: LD_VAR 0 1
75801: PUSH
75802: LD_EXP 83
75806: PUSH
75807: LD_VAR 0 6
75811: ARRAY
75812: IN
75813: OR
75814: IFFALSE 75881
// begin tmp := mc_vehicles [ i ] diff old ;
75816: LD_ADDR_VAR 0 7
75820: PUSH
75821: LD_EXP 83
75825: PUSH
75826: LD_VAR 0 6
75830: ARRAY
75831: PUSH
75832: LD_VAR 0 2
75836: DIFF
75837: ST_TO_ADDR
// tmp := tmp diff new ;
75838: LD_ADDR_VAR 0 7
75842: PUSH
75843: LD_VAR 0 7
75847: PUSH
75848: LD_VAR 0 1
75852: DIFF
75853: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
75854: LD_ADDR_EXP 83
75858: PUSH
75859: LD_EXP 83
75863: PPUSH
75864: LD_VAR 0 6
75868: PPUSH
75869: LD_VAR 0 7
75873: PPUSH
75874: CALL_OW 1
75878: ST_TO_ADDR
// break ;
75879: GO 75883
// end ;
75881: GO 75777
75883: POP
75884: POP
// end ;
75885: LD_VAR 0 5
75889: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
75890: LD_INT 0
75892: PPUSH
75893: PPUSH
75894: PPUSH
75895: PPUSH
// if not mc_bases or not skirmish then
75896: LD_EXP 64
75900: NOT
75901: PUSH
75902: LD_EXP 62
75906: NOT
75907: OR
75908: IFFALSE 75912
// exit ;
75910: GO 76289
// side := GetSide ( vehicle ) ;
75912: LD_ADDR_VAR 0 5
75916: PUSH
75917: LD_VAR 0 1
75921: PPUSH
75922: CALL_OW 255
75926: ST_TO_ADDR
// for i = 1 to mc_bases do
75927: LD_ADDR_VAR 0 4
75931: PUSH
75932: DOUBLE
75933: LD_INT 1
75935: DEC
75936: ST_TO_ADDR
75937: LD_EXP 64
75941: PUSH
75942: FOR_TO
75943: IFFALSE 76287
// begin if factory in mc_bases [ i ] then
75945: LD_VAR 0 2
75949: PUSH
75950: LD_EXP 64
75954: PUSH
75955: LD_VAR 0 4
75959: ARRAY
75960: IN
75961: IFFALSE 76285
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
75963: LD_EXP 86
75967: PUSH
75968: LD_VAR 0 4
75972: ARRAY
75973: PUSH
75974: LD_EXP 75
75978: PUSH
75979: LD_VAR 0 4
75983: ARRAY
75984: LESS
75985: PUSH
75986: LD_VAR 0 1
75990: PPUSH
75991: CALL_OW 264
75995: PUSH
75996: LD_INT 31
75998: PUSH
75999: LD_INT 32
76001: PUSH
76002: LD_INT 51
76004: PUSH
76005: LD_EXP 49
76009: PUSH
76010: LD_INT 12
76012: PUSH
76013: LD_INT 30
76015: PUSH
76016: LD_EXP 48
76020: PUSH
76021: LD_INT 11
76023: PUSH
76024: LD_INT 53
76026: PUSH
76027: LD_INT 14
76029: PUSH
76030: LD_EXP 52
76034: PUSH
76035: LD_INT 29
76037: PUSH
76038: LD_EXP 50
76042: PUSH
76043: LD_INT 13
76045: PUSH
76046: LD_INT 52
76048: PUSH
76049: LD_INT 48
76051: PUSH
76052: LD_INT 8
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: IN
76074: NOT
76075: AND
76076: IFFALSE 76124
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
76078: LD_ADDR_EXP 86
76082: PUSH
76083: LD_EXP 86
76087: PPUSH
76088: LD_VAR 0 4
76092: PUSH
76093: LD_EXP 86
76097: PUSH
76098: LD_VAR 0 4
76102: ARRAY
76103: PUSH
76104: LD_INT 1
76106: PLUS
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: PPUSH
76112: LD_VAR 0 1
76116: PPUSH
76117: CALL 18364 0 3
76121: ST_TO_ADDR
76122: GO 76168
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
76124: LD_ADDR_EXP 83
76128: PUSH
76129: LD_EXP 83
76133: PPUSH
76134: LD_VAR 0 4
76138: PUSH
76139: LD_EXP 83
76143: PUSH
76144: LD_VAR 0 4
76148: ARRAY
76149: PUSH
76150: LD_INT 1
76152: PLUS
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PPUSH
76158: LD_VAR 0 1
76162: PPUSH
76163: CALL 18364 0 3
76167: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
76168: LD_VAR 0 1
76172: PPUSH
76173: CALL_OW 263
76177: PUSH
76178: LD_INT 2
76180: EQUAL
76181: IFFALSE 76201
// begin repeat wait ( 0 0$1 ) ;
76183: LD_INT 35
76185: PPUSH
76186: CALL_OW 67
// until IsControledBy ( vehicle ) ;
76190: LD_VAR 0 1
76194: PPUSH
76195: CALL_OW 312
76199: IFFALSE 76183
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
76201: LD_VAR 0 1
76205: PPUSH
76206: LD_EXP 88
76210: PUSH
76211: LD_VAR 0 4
76215: ARRAY
76216: PPUSH
76217: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
76221: LD_VAR 0 1
76225: PPUSH
76226: CALL_OW 263
76230: PUSH
76231: LD_INT 1
76233: NONEQUAL
76234: IFFALSE 76238
// break ;
76236: GO 76287
// repeat wait ( 0 0$1 ) ;
76238: LD_INT 35
76240: PPUSH
76241: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
76245: LD_VAR 0 1
76249: PPUSH
76250: LD_EXP 88
76254: PUSH
76255: LD_VAR 0 4
76259: ARRAY
76260: PPUSH
76261: CALL_OW 308
76265: IFFALSE 76238
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
76267: LD_VAR 0 1
76271: PPUSH
76272: CALL_OW 311
76276: PPUSH
76277: CALL_OW 121
// exit ;
76281: POP
76282: POP
76283: GO 76289
// end ; end ;
76285: GO 75942
76287: POP
76288: POP
// end ;
76289: LD_VAR 0 3
76293: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76294: LD_INT 0
76296: PPUSH
76297: PPUSH
76298: PPUSH
76299: PPUSH
// if not mc_bases or not skirmish then
76300: LD_EXP 64
76304: NOT
76305: PUSH
76306: LD_EXP 62
76310: NOT
76311: OR
76312: IFFALSE 76316
// exit ;
76314: GO 76669
// repeat wait ( 0 0$1 ) ;
76316: LD_INT 35
76318: PPUSH
76319: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76323: LD_VAR 0 2
76327: PPUSH
76328: LD_VAR 0 3
76332: PPUSH
76333: CALL_OW 284
76337: IFFALSE 76316
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76339: LD_VAR 0 2
76343: PPUSH
76344: LD_VAR 0 3
76348: PPUSH
76349: CALL_OW 283
76353: PUSH
76354: LD_INT 4
76356: EQUAL
76357: IFFALSE 76361
// exit ;
76359: GO 76669
// for i = 1 to mc_bases do
76361: LD_ADDR_VAR 0 7
76365: PUSH
76366: DOUBLE
76367: LD_INT 1
76369: DEC
76370: ST_TO_ADDR
76371: LD_EXP 64
76375: PUSH
76376: FOR_TO
76377: IFFALSE 76667
// begin if mc_crates_area [ i ] then
76379: LD_EXP 82
76383: PUSH
76384: LD_VAR 0 7
76388: ARRAY
76389: IFFALSE 76500
// for j in mc_crates_area [ i ] do
76391: LD_ADDR_VAR 0 8
76395: PUSH
76396: LD_EXP 82
76400: PUSH
76401: LD_VAR 0 7
76405: ARRAY
76406: PUSH
76407: FOR_IN
76408: IFFALSE 76498
// if InArea ( x , y , j ) then
76410: LD_VAR 0 2
76414: PPUSH
76415: LD_VAR 0 3
76419: PPUSH
76420: LD_VAR 0 8
76424: PPUSH
76425: CALL_OW 309
76429: IFFALSE 76496
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76431: LD_ADDR_EXP 80
76435: PUSH
76436: LD_EXP 80
76440: PPUSH
76441: LD_VAR 0 7
76445: PUSH
76446: LD_EXP 80
76450: PUSH
76451: LD_VAR 0 7
76455: ARRAY
76456: PUSH
76457: LD_INT 1
76459: PLUS
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: PPUSH
76465: LD_VAR 0 4
76469: PUSH
76470: LD_VAR 0 2
76474: PUSH
76475: LD_VAR 0 3
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: LIST
76484: PPUSH
76485: CALL 18364 0 3
76489: ST_TO_ADDR
// exit ;
76490: POP
76491: POP
76492: POP
76493: POP
76494: GO 76669
// end ;
76496: GO 76407
76498: POP
76499: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76500: LD_ADDR_VAR 0 9
76504: PUSH
76505: LD_EXP 64
76509: PUSH
76510: LD_VAR 0 7
76514: ARRAY
76515: PPUSH
76516: LD_INT 2
76518: PUSH
76519: LD_INT 30
76521: PUSH
76522: LD_INT 0
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 30
76531: PUSH
76532: LD_INT 1
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: PPUSH
76544: CALL_OW 72
76548: ST_TO_ADDR
// if not depot then
76549: LD_VAR 0 9
76553: NOT
76554: IFFALSE 76558
// continue ;
76556: GO 76376
// for j in depot do
76558: LD_ADDR_VAR 0 8
76562: PUSH
76563: LD_VAR 0 9
76567: PUSH
76568: FOR_IN
76569: IFFALSE 76663
// if GetDistUnitXY ( j , x , y ) < 30 then
76571: LD_VAR 0 8
76575: PPUSH
76576: LD_VAR 0 2
76580: PPUSH
76581: LD_VAR 0 3
76585: PPUSH
76586: CALL_OW 297
76590: PUSH
76591: LD_INT 30
76593: LESS
76594: IFFALSE 76661
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76596: LD_ADDR_EXP 80
76600: PUSH
76601: LD_EXP 80
76605: PPUSH
76606: LD_VAR 0 7
76610: PUSH
76611: LD_EXP 80
76615: PUSH
76616: LD_VAR 0 7
76620: ARRAY
76621: PUSH
76622: LD_INT 1
76624: PLUS
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PPUSH
76630: LD_VAR 0 4
76634: PUSH
76635: LD_VAR 0 2
76639: PUSH
76640: LD_VAR 0 3
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: LIST
76649: PPUSH
76650: CALL 18364 0 3
76654: ST_TO_ADDR
// exit ;
76655: POP
76656: POP
76657: POP
76658: POP
76659: GO 76669
// end ;
76661: GO 76568
76663: POP
76664: POP
// end ;
76665: GO 76376
76667: POP
76668: POP
// end ;
76669: LD_VAR 0 6
76673: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76674: LD_INT 0
76676: PPUSH
76677: PPUSH
76678: PPUSH
76679: PPUSH
// if not mc_bases or not skirmish then
76680: LD_EXP 64
76684: NOT
76685: PUSH
76686: LD_EXP 62
76690: NOT
76691: OR
76692: IFFALSE 76696
// exit ;
76694: GO 76973
// side := GetSide ( lab ) ;
76696: LD_ADDR_VAR 0 4
76700: PUSH
76701: LD_VAR 0 2
76705: PPUSH
76706: CALL_OW 255
76710: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76711: LD_VAR 0 4
76715: PUSH
76716: LD_EXP 90
76720: IN
76721: NOT
76722: PUSH
76723: LD_EXP 91
76727: NOT
76728: OR
76729: PUSH
76730: LD_EXP 64
76734: NOT
76735: OR
76736: IFFALSE 76740
// exit ;
76738: GO 76973
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76740: LD_ADDR_EXP 91
76744: PUSH
76745: LD_EXP 91
76749: PPUSH
76750: LD_VAR 0 4
76754: PPUSH
76755: LD_EXP 91
76759: PUSH
76760: LD_VAR 0 4
76764: ARRAY
76765: PUSH
76766: LD_VAR 0 1
76770: DIFF
76771: PPUSH
76772: CALL_OW 1
76776: ST_TO_ADDR
// for i = 1 to mc_bases do
76777: LD_ADDR_VAR 0 5
76781: PUSH
76782: DOUBLE
76783: LD_INT 1
76785: DEC
76786: ST_TO_ADDR
76787: LD_EXP 64
76791: PUSH
76792: FOR_TO
76793: IFFALSE 76971
// begin if lab in mc_bases [ i ] then
76795: LD_VAR 0 2
76799: PUSH
76800: LD_EXP 64
76804: PUSH
76805: LD_VAR 0 5
76809: ARRAY
76810: IN
76811: IFFALSE 76969
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76813: LD_VAR 0 1
76817: PUSH
76818: LD_INT 11
76820: PUSH
76821: LD_INT 4
76823: PUSH
76824: LD_INT 3
76826: PUSH
76827: LD_INT 2
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: IN
76836: PUSH
76837: LD_EXP 94
76841: PUSH
76842: LD_VAR 0 5
76846: ARRAY
76847: AND
76848: IFFALSE 76969
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
76850: LD_ADDR_VAR 0 6
76854: PUSH
76855: LD_EXP 94
76859: PUSH
76860: LD_VAR 0 5
76864: ARRAY
76865: PUSH
76866: LD_INT 1
76868: ARRAY
76869: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76870: LD_ADDR_EXP 94
76874: PUSH
76875: LD_EXP 94
76879: PPUSH
76880: LD_VAR 0 5
76884: PPUSH
76885: EMPTY
76886: PPUSH
76887: CALL_OW 1
76891: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
76892: LD_VAR 0 6
76896: PPUSH
76897: LD_INT 0
76899: PPUSH
76900: CALL_OW 109
// ComExitBuilding ( tmp ) ;
76904: LD_VAR 0 6
76908: PPUSH
76909: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
76913: LD_ADDR_EXP 93
76917: PUSH
76918: LD_EXP 93
76922: PPUSH
76923: LD_VAR 0 5
76927: PPUSH
76928: LD_EXP 93
76932: PUSH
76933: LD_VAR 0 5
76937: ARRAY
76938: PPUSH
76939: LD_INT 1
76941: PPUSH
76942: LD_VAR 0 6
76946: PPUSH
76947: CALL_OW 2
76951: PPUSH
76952: CALL_OW 1
76956: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76957: LD_VAR 0 5
76961: PPUSH
76962: LD_INT 112
76964: PPUSH
76965: CALL 53985 0 2
// end ; end ; end ;
76969: GO 76792
76971: POP
76972: POP
// end ;
76973: LD_VAR 0 3
76977: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
76978: LD_INT 0
76980: PPUSH
76981: PPUSH
76982: PPUSH
76983: PPUSH
76984: PPUSH
76985: PPUSH
76986: PPUSH
76987: PPUSH
// if not mc_bases or not skirmish then
76988: LD_EXP 64
76992: NOT
76993: PUSH
76994: LD_EXP 62
76998: NOT
76999: OR
77000: IFFALSE 77004
// exit ;
77002: GO 78375
// for i = 1 to mc_bases do
77004: LD_ADDR_VAR 0 3
77008: PUSH
77009: DOUBLE
77010: LD_INT 1
77012: DEC
77013: ST_TO_ADDR
77014: LD_EXP 64
77018: PUSH
77019: FOR_TO
77020: IFFALSE 78373
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
77022: LD_VAR 0 1
77026: PUSH
77027: LD_EXP 64
77031: PUSH
77032: LD_VAR 0 3
77036: ARRAY
77037: IN
77038: PUSH
77039: LD_VAR 0 1
77043: PUSH
77044: LD_EXP 71
77048: PUSH
77049: LD_VAR 0 3
77053: ARRAY
77054: IN
77055: OR
77056: PUSH
77057: LD_VAR 0 1
77061: PUSH
77062: LD_EXP 86
77066: PUSH
77067: LD_VAR 0 3
77071: ARRAY
77072: IN
77073: OR
77074: PUSH
77075: LD_VAR 0 1
77079: PUSH
77080: LD_EXP 83
77084: PUSH
77085: LD_VAR 0 3
77089: ARRAY
77090: IN
77091: OR
77092: PUSH
77093: LD_VAR 0 1
77097: PUSH
77098: LD_EXP 93
77102: PUSH
77103: LD_VAR 0 3
77107: ARRAY
77108: IN
77109: OR
77110: PUSH
77111: LD_VAR 0 1
77115: PUSH
77116: LD_EXP 94
77120: PUSH
77121: LD_VAR 0 3
77125: ARRAY
77126: IN
77127: OR
77128: IFFALSE 78371
// begin if un in mc_ape [ i ] then
77130: LD_VAR 0 1
77134: PUSH
77135: LD_EXP 93
77139: PUSH
77140: LD_VAR 0 3
77144: ARRAY
77145: IN
77146: IFFALSE 77185
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
77148: LD_ADDR_EXP 93
77152: PUSH
77153: LD_EXP 93
77157: PPUSH
77158: LD_VAR 0 3
77162: PPUSH
77163: LD_EXP 93
77167: PUSH
77168: LD_VAR 0 3
77172: ARRAY
77173: PUSH
77174: LD_VAR 0 1
77178: DIFF
77179: PPUSH
77180: CALL_OW 1
77184: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
77185: LD_VAR 0 1
77189: PUSH
77190: LD_EXP 94
77194: PUSH
77195: LD_VAR 0 3
77199: ARRAY
77200: IN
77201: IFFALSE 77225
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
77203: LD_ADDR_EXP 94
77207: PUSH
77208: LD_EXP 94
77212: PPUSH
77213: LD_VAR 0 3
77217: PPUSH
77218: EMPTY
77219: PPUSH
77220: CALL_OW 1
77224: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
77225: LD_VAR 0 1
77229: PPUSH
77230: CALL_OW 247
77234: PUSH
77235: LD_INT 2
77237: EQUAL
77238: PUSH
77239: LD_VAR 0 1
77243: PPUSH
77244: CALL_OW 110
77248: PUSH
77249: LD_INT 20
77251: EQUAL
77252: PUSH
77253: LD_VAR 0 1
77257: PUSH
77258: LD_EXP 86
77262: PUSH
77263: LD_VAR 0 3
77267: ARRAY
77268: IN
77269: OR
77270: PUSH
77271: LD_VAR 0 1
77275: PPUSH
77276: CALL_OW 264
77280: PUSH
77281: LD_INT 12
77283: PUSH
77284: LD_INT 51
77286: PUSH
77287: LD_EXP 49
77291: PUSH
77292: LD_INT 32
77294: PUSH
77295: LD_INT 13
77297: PUSH
77298: LD_INT 52
77300: PUSH
77301: LD_INT 31
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: IN
77313: OR
77314: AND
77315: IFFALSE 77623
// begin if un in mc_defender [ i ] then
77317: LD_VAR 0 1
77321: PUSH
77322: LD_EXP 86
77326: PUSH
77327: LD_VAR 0 3
77331: ARRAY
77332: IN
77333: IFFALSE 77372
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77335: LD_ADDR_EXP 86
77339: PUSH
77340: LD_EXP 86
77344: PPUSH
77345: LD_VAR 0 3
77349: PPUSH
77350: LD_EXP 86
77354: PUSH
77355: LD_VAR 0 3
77359: ARRAY
77360: PUSH
77361: LD_VAR 0 1
77365: DIFF
77366: PPUSH
77367: CALL_OW 1
77371: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
77372: LD_ADDR_VAR 0 8
77376: PUSH
77377: LD_VAR 0 3
77381: PPUSH
77382: LD_INT 3
77384: PPUSH
77385: CALL 74041 0 2
77389: ST_TO_ADDR
// if fac then
77390: LD_VAR 0 8
77394: IFFALSE 77623
// begin for j in fac do
77396: LD_ADDR_VAR 0 4
77400: PUSH
77401: LD_VAR 0 8
77405: PUSH
77406: FOR_IN
77407: IFFALSE 77621
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
77409: LD_ADDR_VAR 0 9
77413: PUSH
77414: LD_VAR 0 8
77418: PPUSH
77419: LD_VAR 0 1
77423: PPUSH
77424: CALL_OW 265
77428: PPUSH
77429: LD_VAR 0 1
77433: PPUSH
77434: CALL_OW 262
77438: PPUSH
77439: LD_VAR 0 1
77443: PPUSH
77444: CALL_OW 263
77448: PPUSH
77449: LD_VAR 0 1
77453: PPUSH
77454: CALL_OW 264
77458: PPUSH
77459: CALL 15896 0 5
77463: ST_TO_ADDR
// if components then
77464: LD_VAR 0 9
77468: IFFALSE 77619
// begin if GetWeapon ( un ) = ar_control_tower then
77470: LD_VAR 0 1
77474: PPUSH
77475: CALL_OW 264
77479: PUSH
77480: LD_INT 31
77482: EQUAL
77483: IFFALSE 77600
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
77485: LD_VAR 0 1
77489: PPUSH
77490: CALL_OW 311
77494: PPUSH
77495: LD_INT 0
77497: PPUSH
77498: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
77502: LD_ADDR_EXP 104
77506: PUSH
77507: LD_EXP 104
77511: PPUSH
77512: LD_VAR 0 3
77516: PPUSH
77517: LD_EXP 104
77521: PUSH
77522: LD_VAR 0 3
77526: ARRAY
77527: PUSH
77528: LD_VAR 0 1
77532: PPUSH
77533: CALL_OW 311
77537: DIFF
77538: PPUSH
77539: CALL_OW 1
77543: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
77544: LD_ADDR_VAR 0 7
77548: PUSH
77549: LD_EXP 85
77553: PUSH
77554: LD_VAR 0 3
77558: ARRAY
77559: PPUSH
77560: LD_INT 1
77562: PPUSH
77563: LD_VAR 0 9
77567: PPUSH
77568: CALL_OW 2
77572: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77573: LD_ADDR_EXP 85
77577: PUSH
77578: LD_EXP 85
77582: PPUSH
77583: LD_VAR 0 3
77587: PPUSH
77588: LD_VAR 0 7
77592: PPUSH
77593: CALL_OW 1
77597: ST_TO_ADDR
// end else
77598: GO 77617
// MC_InsertProduceList ( i , [ components ] ) ;
77600: LD_VAR 0 3
77604: PPUSH
77605: LD_VAR 0 9
77609: PUSH
77610: EMPTY
77611: LIST
77612: PPUSH
77613: CALL 73586 0 2
// break ;
77617: GO 77621
// end ; end ;
77619: GO 77406
77621: POP
77622: POP
// end ; end ; if GetType ( un ) = unit_building then
77623: LD_VAR 0 1
77627: PPUSH
77628: CALL_OW 247
77632: PUSH
77633: LD_INT 3
77635: EQUAL
77636: IFFALSE 78039
// begin btype := GetBType ( un ) ;
77638: LD_ADDR_VAR 0 5
77642: PUSH
77643: LD_VAR 0 1
77647: PPUSH
77648: CALL_OW 266
77652: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
77653: LD_VAR 0 5
77657: PUSH
77658: LD_INT 29
77660: PUSH
77661: LD_INT 30
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: IN
77668: IFFALSE 77741
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
77670: LD_VAR 0 1
77674: PPUSH
77675: CALL_OW 250
77679: PPUSH
77680: LD_VAR 0 1
77684: PPUSH
77685: CALL_OW 251
77689: PPUSH
77690: LD_VAR 0 1
77694: PPUSH
77695: CALL_OW 255
77699: PPUSH
77700: CALL_OW 440
77704: NOT
77705: IFFALSE 77741
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
77707: LD_VAR 0 1
77711: PPUSH
77712: CALL_OW 250
77716: PPUSH
77717: LD_VAR 0 1
77721: PPUSH
77722: CALL_OW 251
77726: PPUSH
77727: LD_VAR 0 1
77731: PPUSH
77732: CALL_OW 255
77736: PPUSH
77737: CALL_OW 441
// end ; if btype = b_warehouse then
77741: LD_VAR 0 5
77745: PUSH
77746: LD_INT 1
77748: EQUAL
77749: IFFALSE 77767
// begin btype := b_depot ;
77751: LD_ADDR_VAR 0 5
77755: PUSH
77756: LD_INT 0
77758: ST_TO_ADDR
// pos := 1 ;
77759: LD_ADDR_VAR 0 6
77763: PUSH
77764: LD_INT 1
77766: ST_TO_ADDR
// end ; if btype = b_factory then
77767: LD_VAR 0 5
77771: PUSH
77772: LD_INT 3
77774: EQUAL
77775: IFFALSE 77793
// begin btype := b_workshop ;
77777: LD_ADDR_VAR 0 5
77781: PUSH
77782: LD_INT 2
77784: ST_TO_ADDR
// pos := 1 ;
77785: LD_ADDR_VAR 0 6
77789: PUSH
77790: LD_INT 1
77792: ST_TO_ADDR
// end ; if btype = b_barracks then
77793: LD_VAR 0 5
77797: PUSH
77798: LD_INT 5
77800: EQUAL
77801: IFFALSE 77811
// btype := b_armoury ;
77803: LD_ADDR_VAR 0 5
77807: PUSH
77808: LD_INT 4
77810: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
77811: LD_VAR 0 5
77815: PUSH
77816: LD_INT 7
77818: PUSH
77819: LD_INT 8
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: IN
77826: IFFALSE 77836
// btype := b_lab ;
77828: LD_ADDR_VAR 0 5
77832: PUSH
77833: LD_INT 6
77835: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77836: LD_ADDR_EXP 69
77840: PUSH
77841: LD_EXP 69
77845: PPUSH
77846: LD_VAR 0 3
77850: PUSH
77851: LD_EXP 69
77855: PUSH
77856: LD_VAR 0 3
77860: ARRAY
77861: PUSH
77862: LD_INT 1
77864: PLUS
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PPUSH
77870: LD_VAR 0 5
77874: PUSH
77875: LD_VAR 0 1
77879: PPUSH
77880: CALL_OW 250
77884: PUSH
77885: LD_VAR 0 1
77889: PPUSH
77890: CALL_OW 251
77894: PUSH
77895: LD_VAR 0 1
77899: PPUSH
77900: CALL_OW 254
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: PPUSH
77911: CALL 18364 0 3
77915: ST_TO_ADDR
// if pos = 1 then
77916: LD_VAR 0 6
77920: PUSH
77921: LD_INT 1
77923: EQUAL
77924: IFFALSE 78039
// begin tmp := mc_build_list [ i ] ;
77926: LD_ADDR_VAR 0 7
77930: PUSH
77931: LD_EXP 69
77935: PUSH
77936: LD_VAR 0 3
77940: ARRAY
77941: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77942: LD_VAR 0 7
77946: PPUSH
77947: LD_INT 2
77949: PUSH
77950: LD_INT 30
77952: PUSH
77953: LD_INT 0
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: PUSH
77960: LD_INT 30
77962: PUSH
77963: LD_INT 1
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: PPUSH
77975: CALL_OW 72
77979: IFFALSE 77989
// pos := 2 ;
77981: LD_ADDR_VAR 0 6
77985: PUSH
77986: LD_INT 2
77988: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
77989: LD_ADDR_VAR 0 7
77993: PUSH
77994: LD_VAR 0 7
77998: PPUSH
77999: LD_VAR 0 6
78003: PPUSH
78004: LD_VAR 0 7
78008: PPUSH
78009: CALL 18690 0 3
78013: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
78014: LD_ADDR_EXP 69
78018: PUSH
78019: LD_EXP 69
78023: PPUSH
78024: LD_VAR 0 3
78028: PPUSH
78029: LD_VAR 0 7
78033: PPUSH
78034: CALL_OW 1
78038: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
78039: LD_VAR 0 1
78043: PUSH
78044: LD_EXP 64
78048: PUSH
78049: LD_VAR 0 3
78053: ARRAY
78054: IN
78055: IFFALSE 78094
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
78057: LD_ADDR_EXP 64
78061: PUSH
78062: LD_EXP 64
78066: PPUSH
78067: LD_VAR 0 3
78071: PPUSH
78072: LD_EXP 64
78076: PUSH
78077: LD_VAR 0 3
78081: ARRAY
78082: PUSH
78083: LD_VAR 0 1
78087: DIFF
78088: PPUSH
78089: CALL_OW 1
78093: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
78094: LD_VAR 0 1
78098: PUSH
78099: LD_EXP 71
78103: PUSH
78104: LD_VAR 0 3
78108: ARRAY
78109: IN
78110: IFFALSE 78149
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
78112: LD_ADDR_EXP 71
78116: PUSH
78117: LD_EXP 71
78121: PPUSH
78122: LD_VAR 0 3
78126: PPUSH
78127: LD_EXP 71
78131: PUSH
78132: LD_VAR 0 3
78136: ARRAY
78137: PUSH
78138: LD_VAR 0 1
78142: DIFF
78143: PPUSH
78144: CALL_OW 1
78148: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
78149: LD_VAR 0 1
78153: PUSH
78154: LD_EXP 83
78158: PUSH
78159: LD_VAR 0 3
78163: ARRAY
78164: IN
78165: IFFALSE 78204
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
78167: LD_ADDR_EXP 83
78171: PUSH
78172: LD_EXP 83
78176: PPUSH
78177: LD_VAR 0 3
78181: PPUSH
78182: LD_EXP 83
78186: PUSH
78187: LD_VAR 0 3
78191: ARRAY
78192: PUSH
78193: LD_VAR 0 1
78197: DIFF
78198: PPUSH
78199: CALL_OW 1
78203: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
78204: LD_VAR 0 1
78208: PUSH
78209: LD_EXP 86
78213: PUSH
78214: LD_VAR 0 3
78218: ARRAY
78219: IN
78220: IFFALSE 78259
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
78222: LD_ADDR_EXP 86
78226: PUSH
78227: LD_EXP 86
78231: PPUSH
78232: LD_VAR 0 3
78236: PPUSH
78237: LD_EXP 86
78241: PUSH
78242: LD_VAR 0 3
78246: ARRAY
78247: PUSH
78248: LD_VAR 0 1
78252: DIFF
78253: PPUSH
78254: CALL_OW 1
78258: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
78259: LD_VAR 0 1
78263: PUSH
78264: LD_EXP 73
78268: PUSH
78269: LD_VAR 0 3
78273: ARRAY
78274: IN
78275: IFFALSE 78314
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
78277: LD_ADDR_EXP 73
78281: PUSH
78282: LD_EXP 73
78286: PPUSH
78287: LD_VAR 0 3
78291: PPUSH
78292: LD_EXP 73
78296: PUSH
78297: LD_VAR 0 3
78301: ARRAY
78302: PUSH
78303: LD_VAR 0 1
78307: DIFF
78308: PPUSH
78309: CALL_OW 1
78313: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
78314: LD_VAR 0 1
78318: PUSH
78319: LD_EXP 72
78323: PUSH
78324: LD_VAR 0 3
78328: ARRAY
78329: IN
78330: IFFALSE 78369
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
78332: LD_ADDR_EXP 72
78336: PUSH
78337: LD_EXP 72
78341: PPUSH
78342: LD_VAR 0 3
78346: PPUSH
78347: LD_EXP 72
78351: PUSH
78352: LD_VAR 0 3
78356: ARRAY
78357: PUSH
78358: LD_VAR 0 1
78362: DIFF
78363: PPUSH
78364: CALL_OW 1
78368: ST_TO_ADDR
// end ; break ;
78369: GO 78373
// end ;
78371: GO 77019
78373: POP
78374: POP
// end ;
78375: LD_VAR 0 2
78379: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
78380: LD_INT 0
78382: PPUSH
78383: PPUSH
78384: PPUSH
// if not mc_bases or not skirmish then
78385: LD_EXP 64
78389: NOT
78390: PUSH
78391: LD_EXP 62
78395: NOT
78396: OR
78397: IFFALSE 78401
// exit ;
78399: GO 78616
// for i = 1 to mc_bases do
78401: LD_ADDR_VAR 0 3
78405: PUSH
78406: DOUBLE
78407: LD_INT 1
78409: DEC
78410: ST_TO_ADDR
78411: LD_EXP 64
78415: PUSH
78416: FOR_TO
78417: IFFALSE 78614
// begin if building in mc_construct_list [ i ] then
78419: LD_VAR 0 1
78423: PUSH
78424: LD_EXP 71
78428: PUSH
78429: LD_VAR 0 3
78433: ARRAY
78434: IN
78435: IFFALSE 78612
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78437: LD_ADDR_EXP 71
78441: PUSH
78442: LD_EXP 71
78446: PPUSH
78447: LD_VAR 0 3
78451: PPUSH
78452: LD_EXP 71
78456: PUSH
78457: LD_VAR 0 3
78461: ARRAY
78462: PUSH
78463: LD_VAR 0 1
78467: DIFF
78468: PPUSH
78469: CALL_OW 1
78473: ST_TO_ADDR
// if building in mc_lab [ i ] then
78474: LD_VAR 0 1
78478: PUSH
78479: LD_EXP 97
78483: PUSH
78484: LD_VAR 0 3
78488: ARRAY
78489: IN
78490: IFFALSE 78545
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
78492: LD_ADDR_EXP 98
78496: PUSH
78497: LD_EXP 98
78501: PPUSH
78502: LD_VAR 0 3
78506: PPUSH
78507: LD_EXP 98
78511: PUSH
78512: LD_VAR 0 3
78516: ARRAY
78517: PPUSH
78518: LD_INT 1
78520: PPUSH
78521: LD_EXP 98
78525: PUSH
78526: LD_VAR 0 3
78530: ARRAY
78531: PPUSH
78532: LD_INT 0
78534: PPUSH
78535: CALL 17782 0 4
78539: PPUSH
78540: CALL_OW 1
78544: ST_TO_ADDR
// if not building in mc_bases [ i ] then
78545: LD_VAR 0 1
78549: PUSH
78550: LD_EXP 64
78554: PUSH
78555: LD_VAR 0 3
78559: ARRAY
78560: IN
78561: NOT
78562: IFFALSE 78608
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78564: LD_ADDR_EXP 64
78568: PUSH
78569: LD_EXP 64
78573: PPUSH
78574: LD_VAR 0 3
78578: PUSH
78579: LD_EXP 64
78583: PUSH
78584: LD_VAR 0 3
78588: ARRAY
78589: PUSH
78590: LD_INT 1
78592: PLUS
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: PPUSH
78598: LD_VAR 0 1
78602: PPUSH
78603: CALL 18364 0 3
78607: ST_TO_ADDR
// exit ;
78608: POP
78609: POP
78610: GO 78616
// end ; end ;
78612: GO 78416
78614: POP
78615: POP
// end ;
78616: LD_VAR 0 2
78620: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
78621: LD_INT 0
78623: PPUSH
78624: PPUSH
78625: PPUSH
78626: PPUSH
78627: PPUSH
78628: PPUSH
78629: PPUSH
// if not mc_bases or not skirmish then
78630: LD_EXP 64
78634: NOT
78635: PUSH
78636: LD_EXP 62
78640: NOT
78641: OR
78642: IFFALSE 78646
// exit ;
78644: GO 79307
// for i = 1 to mc_bases do
78646: LD_ADDR_VAR 0 3
78650: PUSH
78651: DOUBLE
78652: LD_INT 1
78654: DEC
78655: ST_TO_ADDR
78656: LD_EXP 64
78660: PUSH
78661: FOR_TO
78662: IFFALSE 79305
// begin if building in mc_construct_list [ i ] then
78664: LD_VAR 0 1
78668: PUSH
78669: LD_EXP 71
78673: PUSH
78674: LD_VAR 0 3
78678: ARRAY
78679: IN
78680: IFFALSE 79303
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78682: LD_ADDR_EXP 71
78686: PUSH
78687: LD_EXP 71
78691: PPUSH
78692: LD_VAR 0 3
78696: PPUSH
78697: LD_EXP 71
78701: PUSH
78702: LD_VAR 0 3
78706: ARRAY
78707: PUSH
78708: LD_VAR 0 1
78712: DIFF
78713: PPUSH
78714: CALL_OW 1
78718: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78719: LD_ADDR_EXP 64
78723: PUSH
78724: LD_EXP 64
78728: PPUSH
78729: LD_VAR 0 3
78733: PUSH
78734: LD_EXP 64
78738: PUSH
78739: LD_VAR 0 3
78743: ARRAY
78744: PUSH
78745: LD_INT 1
78747: PLUS
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: PPUSH
78753: LD_VAR 0 1
78757: PPUSH
78758: CALL 18364 0 3
78762: ST_TO_ADDR
// btype := GetBType ( building ) ;
78763: LD_ADDR_VAR 0 5
78767: PUSH
78768: LD_VAR 0 1
78772: PPUSH
78773: CALL_OW 266
78777: ST_TO_ADDR
// side := GetSide ( building ) ;
78778: LD_ADDR_VAR 0 8
78782: PUSH
78783: LD_VAR 0 1
78787: PPUSH
78788: CALL_OW 255
78792: ST_TO_ADDR
// if btype = b_lab then
78793: LD_VAR 0 5
78797: PUSH
78798: LD_INT 6
78800: EQUAL
78801: IFFALSE 78851
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78803: LD_ADDR_EXP 97
78807: PUSH
78808: LD_EXP 97
78812: PPUSH
78813: LD_VAR 0 3
78817: PUSH
78818: LD_EXP 97
78822: PUSH
78823: LD_VAR 0 3
78827: ARRAY
78828: PUSH
78829: LD_INT 1
78831: PLUS
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PPUSH
78837: LD_VAR 0 1
78841: PPUSH
78842: CALL 18364 0 3
78846: ST_TO_ADDR
// exit ;
78847: POP
78848: POP
78849: GO 79307
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
78851: LD_VAR 0 5
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: LD_INT 2
78861: PUSH
78862: LD_INT 4
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: LIST
78869: IN
78870: IFFALSE 78994
// begin if btype = b_armoury then
78872: LD_VAR 0 5
78876: PUSH
78877: LD_INT 4
78879: EQUAL
78880: IFFALSE 78890
// btype := b_barracks ;
78882: LD_ADDR_VAR 0 5
78886: PUSH
78887: LD_INT 5
78889: ST_TO_ADDR
// if btype = b_depot then
78890: LD_VAR 0 5
78894: PUSH
78895: LD_INT 0
78897: EQUAL
78898: IFFALSE 78908
// btype := b_warehouse ;
78900: LD_ADDR_VAR 0 5
78904: PUSH
78905: LD_INT 1
78907: ST_TO_ADDR
// if btype = b_workshop then
78908: LD_VAR 0 5
78912: PUSH
78913: LD_INT 2
78915: EQUAL
78916: IFFALSE 78926
// btype := b_factory ;
78918: LD_ADDR_VAR 0 5
78922: PUSH
78923: LD_INT 3
78925: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
78926: LD_VAR 0 5
78930: PPUSH
78931: LD_VAR 0 8
78935: PPUSH
78936: CALL_OW 323
78940: PUSH
78941: LD_INT 1
78943: EQUAL
78944: IFFALSE 78990
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78946: LD_ADDR_EXP 96
78950: PUSH
78951: LD_EXP 96
78955: PPUSH
78956: LD_VAR 0 3
78960: PUSH
78961: LD_EXP 96
78965: PUSH
78966: LD_VAR 0 3
78970: ARRAY
78971: PUSH
78972: LD_INT 1
78974: PLUS
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PPUSH
78980: LD_VAR 0 1
78984: PPUSH
78985: CALL 18364 0 3
78989: ST_TO_ADDR
// exit ;
78990: POP
78991: POP
78992: GO 79307
// end ; if btype in [ b_bunker , b_turret ] then
78994: LD_VAR 0 5
78998: PUSH
78999: LD_INT 32
79001: PUSH
79002: LD_INT 33
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: IN
79009: IFFALSE 79299
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
79011: LD_ADDR_EXP 72
79015: PUSH
79016: LD_EXP 72
79020: PPUSH
79021: LD_VAR 0 3
79025: PUSH
79026: LD_EXP 72
79030: PUSH
79031: LD_VAR 0 3
79035: ARRAY
79036: PUSH
79037: LD_INT 1
79039: PLUS
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: PPUSH
79045: LD_VAR 0 1
79049: PPUSH
79050: CALL 18364 0 3
79054: ST_TO_ADDR
// if btype = b_bunker then
79055: LD_VAR 0 5
79059: PUSH
79060: LD_INT 32
79062: EQUAL
79063: IFFALSE 79299
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79065: LD_ADDR_EXP 73
79069: PUSH
79070: LD_EXP 73
79074: PPUSH
79075: LD_VAR 0 3
79079: PUSH
79080: LD_EXP 73
79084: PUSH
79085: LD_VAR 0 3
79089: ARRAY
79090: PUSH
79091: LD_INT 1
79093: PLUS
79094: PUSH
79095: EMPTY
79096: LIST
79097: LIST
79098: PPUSH
79099: LD_VAR 0 1
79103: PPUSH
79104: CALL 18364 0 3
79108: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
79109: LD_ADDR_VAR 0 6
79113: PUSH
79114: LD_EXP 64
79118: PUSH
79119: LD_VAR 0 3
79123: ARRAY
79124: PPUSH
79125: LD_INT 25
79127: PUSH
79128: LD_INT 1
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PUSH
79135: LD_INT 3
79137: PUSH
79138: LD_INT 54
79140: PUSH
79141: EMPTY
79142: LIST
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PPUSH
79152: CALL_OW 72
79156: ST_TO_ADDR
// if tmp then
79157: LD_VAR 0 6
79161: IFFALSE 79167
// exit ;
79163: POP
79164: POP
79165: GO 79307
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
79167: LD_ADDR_VAR 0 6
79171: PUSH
79172: LD_EXP 64
79176: PUSH
79177: LD_VAR 0 3
79181: ARRAY
79182: PPUSH
79183: LD_INT 2
79185: PUSH
79186: LD_INT 30
79188: PUSH
79189: LD_INT 4
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 30
79198: PUSH
79199: LD_INT 5
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: LIST
79210: PPUSH
79211: CALL_OW 72
79215: ST_TO_ADDR
// if not tmp then
79216: LD_VAR 0 6
79220: NOT
79221: IFFALSE 79227
// exit ;
79223: POP
79224: POP
79225: GO 79307
// for j in tmp do
79227: LD_ADDR_VAR 0 4
79231: PUSH
79232: LD_VAR 0 6
79236: PUSH
79237: FOR_IN
79238: IFFALSE 79297
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
79240: LD_ADDR_VAR 0 7
79244: PUSH
79245: LD_VAR 0 4
79249: PPUSH
79250: CALL_OW 313
79254: PPUSH
79255: LD_INT 25
79257: PUSH
79258: LD_INT 1
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: PPUSH
79265: CALL_OW 72
79269: ST_TO_ADDR
// if units then
79270: LD_VAR 0 7
79274: IFFALSE 79295
// begin ComExitBuilding ( units [ 1 ] ) ;
79276: LD_VAR 0 7
79280: PUSH
79281: LD_INT 1
79283: ARRAY
79284: PPUSH
79285: CALL_OW 122
// exit ;
79289: POP
79290: POP
79291: POP
79292: POP
79293: GO 79307
// end ; end ;
79295: GO 79237
79297: POP
79298: POP
// end ; end ; exit ;
79299: POP
79300: POP
79301: GO 79307
// end ; end ;
79303: GO 78661
79305: POP
79306: POP
// end ;
79307: LD_VAR 0 2
79311: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
79312: LD_INT 0
79314: PPUSH
79315: PPUSH
79316: PPUSH
79317: PPUSH
79318: PPUSH
79319: PPUSH
79320: PPUSH
// if not mc_bases or not skirmish then
79321: LD_EXP 64
79325: NOT
79326: PUSH
79327: LD_EXP 62
79331: NOT
79332: OR
79333: IFFALSE 79337
// exit ;
79335: GO 79568
// btype := GetBType ( building ) ;
79337: LD_ADDR_VAR 0 6
79341: PUSH
79342: LD_VAR 0 1
79346: PPUSH
79347: CALL_OW 266
79351: ST_TO_ADDR
// x := GetX ( building ) ;
79352: LD_ADDR_VAR 0 7
79356: PUSH
79357: LD_VAR 0 1
79361: PPUSH
79362: CALL_OW 250
79366: ST_TO_ADDR
// y := GetY ( building ) ;
79367: LD_ADDR_VAR 0 8
79371: PUSH
79372: LD_VAR 0 1
79376: PPUSH
79377: CALL_OW 251
79381: ST_TO_ADDR
// d := GetDir ( building ) ;
79382: LD_ADDR_VAR 0 9
79386: PUSH
79387: LD_VAR 0 1
79391: PPUSH
79392: CALL_OW 254
79396: ST_TO_ADDR
// for i = 1 to mc_bases do
79397: LD_ADDR_VAR 0 4
79401: PUSH
79402: DOUBLE
79403: LD_INT 1
79405: DEC
79406: ST_TO_ADDR
79407: LD_EXP 64
79411: PUSH
79412: FOR_TO
79413: IFFALSE 79566
// begin if not mc_build_list [ i ] then
79415: LD_EXP 69
79419: PUSH
79420: LD_VAR 0 4
79424: ARRAY
79425: NOT
79426: IFFALSE 79430
// continue ;
79428: GO 79412
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
79430: LD_VAR 0 6
79434: PUSH
79435: LD_VAR 0 7
79439: PUSH
79440: LD_VAR 0 8
79444: PUSH
79445: LD_VAR 0 9
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: LIST
79454: LIST
79455: PPUSH
79456: LD_EXP 69
79460: PUSH
79461: LD_VAR 0 4
79465: ARRAY
79466: PUSH
79467: LD_INT 1
79469: ARRAY
79470: PPUSH
79471: CALL 24533 0 2
79475: IFFALSE 79564
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
79477: LD_ADDR_EXP 69
79481: PUSH
79482: LD_EXP 69
79486: PPUSH
79487: LD_VAR 0 4
79491: PPUSH
79492: LD_EXP 69
79496: PUSH
79497: LD_VAR 0 4
79501: ARRAY
79502: PPUSH
79503: LD_INT 1
79505: PPUSH
79506: CALL_OW 3
79510: PPUSH
79511: CALL_OW 1
79515: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
79516: LD_ADDR_EXP 71
79520: PUSH
79521: LD_EXP 71
79525: PPUSH
79526: LD_VAR 0 4
79530: PUSH
79531: LD_EXP 71
79535: PUSH
79536: LD_VAR 0 4
79540: ARRAY
79541: PUSH
79542: LD_INT 1
79544: PLUS
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: PPUSH
79550: LD_VAR 0 1
79554: PPUSH
79555: CALL 18364 0 3
79559: ST_TO_ADDR
// exit ;
79560: POP
79561: POP
79562: GO 79568
// end ; end ;
79564: GO 79412
79566: POP
79567: POP
// end ;
79568: LD_VAR 0 3
79572: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
79573: LD_INT 0
79575: PPUSH
79576: PPUSH
79577: PPUSH
// if not mc_bases or not skirmish then
79578: LD_EXP 64
79582: NOT
79583: PUSH
79584: LD_EXP 62
79588: NOT
79589: OR
79590: IFFALSE 79594
// exit ;
79592: GO 79784
// for i = 1 to mc_bases do
79594: LD_ADDR_VAR 0 4
79598: PUSH
79599: DOUBLE
79600: LD_INT 1
79602: DEC
79603: ST_TO_ADDR
79604: LD_EXP 64
79608: PUSH
79609: FOR_TO
79610: IFFALSE 79697
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
79612: LD_VAR 0 1
79616: PUSH
79617: LD_EXP 72
79621: PUSH
79622: LD_VAR 0 4
79626: ARRAY
79627: IN
79628: PUSH
79629: LD_VAR 0 1
79633: PUSH
79634: LD_EXP 73
79638: PUSH
79639: LD_VAR 0 4
79643: ARRAY
79644: IN
79645: NOT
79646: AND
79647: IFFALSE 79695
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79649: LD_ADDR_EXP 73
79653: PUSH
79654: LD_EXP 73
79658: PPUSH
79659: LD_VAR 0 4
79663: PUSH
79664: LD_EXP 73
79668: PUSH
79669: LD_VAR 0 4
79673: ARRAY
79674: PUSH
79675: LD_INT 1
79677: PLUS
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PPUSH
79683: LD_VAR 0 1
79687: PPUSH
79688: CALL 18364 0 3
79692: ST_TO_ADDR
// break ;
79693: GO 79697
// end ; end ;
79695: GO 79609
79697: POP
79698: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
79699: LD_VAR 0 1
79703: PPUSH
79704: CALL_OW 257
79708: PUSH
79709: LD_EXP 90
79713: IN
79714: PUSH
79715: LD_VAR 0 1
79719: PPUSH
79720: CALL_OW 266
79724: PUSH
79725: LD_INT 5
79727: EQUAL
79728: AND
79729: PUSH
79730: LD_VAR 0 2
79734: PPUSH
79735: CALL_OW 110
79739: PUSH
79740: LD_INT 18
79742: NONEQUAL
79743: AND
79744: IFFALSE 79784
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
79746: LD_VAR 0 2
79750: PPUSH
79751: CALL_OW 257
79755: PUSH
79756: LD_INT 5
79758: PUSH
79759: LD_INT 8
79761: PUSH
79762: LD_INT 9
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: LIST
79769: IN
79770: IFFALSE 79784
// SetClass ( unit , 1 ) ;
79772: LD_VAR 0 2
79776: PPUSH
79777: LD_INT 1
79779: PPUSH
79780: CALL_OW 336
// end ;
79784: LD_VAR 0 3
79788: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79789: LD_INT 0
79791: PPUSH
79792: PPUSH
// if not mc_bases or not skirmish then
79793: LD_EXP 64
79797: NOT
79798: PUSH
79799: LD_EXP 62
79803: NOT
79804: OR
79805: IFFALSE 79809
// exit ;
79807: GO 79925
// if GetLives ( abandoned_vehicle ) > 250 then
79809: LD_VAR 0 2
79813: PPUSH
79814: CALL_OW 256
79818: PUSH
79819: LD_INT 250
79821: GREATER
79822: IFFALSE 79826
// exit ;
79824: GO 79925
// for i = 1 to mc_bases do
79826: LD_ADDR_VAR 0 6
79830: PUSH
79831: DOUBLE
79832: LD_INT 1
79834: DEC
79835: ST_TO_ADDR
79836: LD_EXP 64
79840: PUSH
79841: FOR_TO
79842: IFFALSE 79923
// begin if driver in mc_bases [ i ] then
79844: LD_VAR 0 1
79848: PUSH
79849: LD_EXP 64
79853: PUSH
79854: LD_VAR 0 6
79858: ARRAY
79859: IN
79860: IFFALSE 79921
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
79862: LD_VAR 0 1
79866: PPUSH
79867: LD_EXP 64
79871: PUSH
79872: LD_VAR 0 6
79876: ARRAY
79877: PPUSH
79878: LD_INT 2
79880: PUSH
79881: LD_INT 30
79883: PUSH
79884: LD_INT 0
79886: PUSH
79887: EMPTY
79888: LIST
79889: LIST
79890: PUSH
79891: LD_INT 30
79893: PUSH
79894: LD_INT 1
79896: PUSH
79897: EMPTY
79898: LIST
79899: LIST
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: LIST
79905: PPUSH
79906: CALL_OW 72
79910: PUSH
79911: LD_INT 1
79913: ARRAY
79914: PPUSH
79915: CALL_OW 112
// break ;
79919: GO 79923
// end ; end ;
79921: GO 79841
79923: POP
79924: POP
// end ; end_of_file end_of_file
79925: LD_VAR 0 5
79929: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
79930: GO 79932
79932: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
79933: LD_STRING initStreamRollete();
79935: PPUSH
79936: CALL_OW 559
// InitStreamMode ;
79940: CALL 79949 0 0
// DefineStreamItems ( ) ;
79944: CALL 80389 0 0
// end ;
79948: END
// function InitStreamMode ; begin
79949: LD_INT 0
79951: PPUSH
// streamModeActive := false ;
79952: LD_ADDR_EXP 107
79956: PUSH
79957: LD_INT 0
79959: ST_TO_ADDR
// normalCounter := 36 ;
79960: LD_ADDR_EXP 108
79964: PUSH
79965: LD_INT 36
79967: ST_TO_ADDR
// hardcoreCounter := 16 ;
79968: LD_ADDR_EXP 109
79972: PUSH
79973: LD_INT 16
79975: ST_TO_ADDR
// sRocket := false ;
79976: LD_ADDR_EXP 112
79980: PUSH
79981: LD_INT 0
79983: ST_TO_ADDR
// sSpeed := false ;
79984: LD_ADDR_EXP 111
79988: PUSH
79989: LD_INT 0
79991: ST_TO_ADDR
// sEngine := false ;
79992: LD_ADDR_EXP 113
79996: PUSH
79997: LD_INT 0
79999: ST_TO_ADDR
// sSpec := false ;
80000: LD_ADDR_EXP 110
80004: PUSH
80005: LD_INT 0
80007: ST_TO_ADDR
// sLevel := false ;
80008: LD_ADDR_EXP 114
80012: PUSH
80013: LD_INT 0
80015: ST_TO_ADDR
// sArmoury := false ;
80016: LD_ADDR_EXP 115
80020: PUSH
80021: LD_INT 0
80023: ST_TO_ADDR
// sRadar := false ;
80024: LD_ADDR_EXP 116
80028: PUSH
80029: LD_INT 0
80031: ST_TO_ADDR
// sBunker := false ;
80032: LD_ADDR_EXP 117
80036: PUSH
80037: LD_INT 0
80039: ST_TO_ADDR
// sHack := false ;
80040: LD_ADDR_EXP 118
80044: PUSH
80045: LD_INT 0
80047: ST_TO_ADDR
// sFire := false ;
80048: LD_ADDR_EXP 119
80052: PUSH
80053: LD_INT 0
80055: ST_TO_ADDR
// sRefresh := false ;
80056: LD_ADDR_EXP 120
80060: PUSH
80061: LD_INT 0
80063: ST_TO_ADDR
// sExp := false ;
80064: LD_ADDR_EXP 121
80068: PUSH
80069: LD_INT 0
80071: ST_TO_ADDR
// sDepot := false ;
80072: LD_ADDR_EXP 122
80076: PUSH
80077: LD_INT 0
80079: ST_TO_ADDR
// sFlag := false ;
80080: LD_ADDR_EXP 123
80084: PUSH
80085: LD_INT 0
80087: ST_TO_ADDR
// sKamikadze := false ;
80088: LD_ADDR_EXP 131
80092: PUSH
80093: LD_INT 0
80095: ST_TO_ADDR
// sTroll := false ;
80096: LD_ADDR_EXP 132
80100: PUSH
80101: LD_INT 0
80103: ST_TO_ADDR
// sSlow := false ;
80104: LD_ADDR_EXP 133
80108: PUSH
80109: LD_INT 0
80111: ST_TO_ADDR
// sLack := false ;
80112: LD_ADDR_EXP 134
80116: PUSH
80117: LD_INT 0
80119: ST_TO_ADDR
// sTank := false ;
80120: LD_ADDR_EXP 136
80124: PUSH
80125: LD_INT 0
80127: ST_TO_ADDR
// sRemote := false ;
80128: LD_ADDR_EXP 137
80132: PUSH
80133: LD_INT 0
80135: ST_TO_ADDR
// sPowell := false ;
80136: LD_ADDR_EXP 138
80140: PUSH
80141: LD_INT 0
80143: ST_TO_ADDR
// sTeleport := false ;
80144: LD_ADDR_EXP 141
80148: PUSH
80149: LD_INT 0
80151: ST_TO_ADDR
// sOilTower := false ;
80152: LD_ADDR_EXP 143
80156: PUSH
80157: LD_INT 0
80159: ST_TO_ADDR
// sShovel := false ;
80160: LD_ADDR_EXP 144
80164: PUSH
80165: LD_INT 0
80167: ST_TO_ADDR
// sSheik := false ;
80168: LD_ADDR_EXP 145
80172: PUSH
80173: LD_INT 0
80175: ST_TO_ADDR
// sEarthquake := false ;
80176: LD_ADDR_EXP 147
80180: PUSH
80181: LD_INT 0
80183: ST_TO_ADDR
// sAI := false ;
80184: LD_ADDR_EXP 148
80188: PUSH
80189: LD_INT 0
80191: ST_TO_ADDR
// sCargo := false ;
80192: LD_ADDR_EXP 151
80196: PUSH
80197: LD_INT 0
80199: ST_TO_ADDR
// sDLaser := false ;
80200: LD_ADDR_EXP 152
80204: PUSH
80205: LD_INT 0
80207: ST_TO_ADDR
// sExchange := false ;
80208: LD_ADDR_EXP 153
80212: PUSH
80213: LD_INT 0
80215: ST_TO_ADDR
// sFac := false ;
80216: LD_ADDR_EXP 154
80220: PUSH
80221: LD_INT 0
80223: ST_TO_ADDR
// sPower := false ;
80224: LD_ADDR_EXP 155
80228: PUSH
80229: LD_INT 0
80231: ST_TO_ADDR
// sRandom := false ;
80232: LD_ADDR_EXP 156
80236: PUSH
80237: LD_INT 0
80239: ST_TO_ADDR
// sShield := false ;
80240: LD_ADDR_EXP 157
80244: PUSH
80245: LD_INT 0
80247: ST_TO_ADDR
// sTime := false ;
80248: LD_ADDR_EXP 158
80252: PUSH
80253: LD_INT 0
80255: ST_TO_ADDR
// sTools := false ;
80256: LD_ADDR_EXP 159
80260: PUSH
80261: LD_INT 0
80263: ST_TO_ADDR
// sSold := false ;
80264: LD_ADDR_EXP 124
80268: PUSH
80269: LD_INT 0
80271: ST_TO_ADDR
// sDiff := false ;
80272: LD_ADDR_EXP 125
80276: PUSH
80277: LD_INT 0
80279: ST_TO_ADDR
// sFog := false ;
80280: LD_ADDR_EXP 128
80284: PUSH
80285: LD_INT 0
80287: ST_TO_ADDR
// sReset := false ;
80288: LD_ADDR_EXP 129
80292: PUSH
80293: LD_INT 0
80295: ST_TO_ADDR
// sSun := false ;
80296: LD_ADDR_EXP 130
80300: PUSH
80301: LD_INT 0
80303: ST_TO_ADDR
// sTiger := false ;
80304: LD_ADDR_EXP 126
80308: PUSH
80309: LD_INT 0
80311: ST_TO_ADDR
// sBomb := false ;
80312: LD_ADDR_EXP 127
80316: PUSH
80317: LD_INT 0
80319: ST_TO_ADDR
// sWound := false ;
80320: LD_ADDR_EXP 135
80324: PUSH
80325: LD_INT 0
80327: ST_TO_ADDR
// sBetray := false ;
80328: LD_ADDR_EXP 139
80332: PUSH
80333: LD_INT 0
80335: ST_TO_ADDR
// sContamin := false ;
80336: LD_ADDR_EXP 140
80340: PUSH
80341: LD_INT 0
80343: ST_TO_ADDR
// sOil := false ;
80344: LD_ADDR_EXP 142
80348: PUSH
80349: LD_INT 0
80351: ST_TO_ADDR
// sStu := false ;
80352: LD_ADDR_EXP 146
80356: PUSH
80357: LD_INT 0
80359: ST_TO_ADDR
// sBazooka := false ;
80360: LD_ADDR_EXP 149
80364: PUSH
80365: LD_INT 0
80367: ST_TO_ADDR
// sMortar := false ;
80368: LD_ADDR_EXP 150
80372: PUSH
80373: LD_INT 0
80375: ST_TO_ADDR
// sRanger := false ;
80376: LD_ADDR_EXP 160
80380: PUSH
80381: LD_INT 0
80383: ST_TO_ADDR
// end ;
80384: LD_VAR 0 1
80388: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
80389: LD_INT 0
80391: PPUSH
80392: PPUSH
80393: PPUSH
80394: PPUSH
80395: PPUSH
// result := [ ] ;
80396: LD_ADDR_VAR 0 1
80400: PUSH
80401: EMPTY
80402: ST_TO_ADDR
// if campaign_id = 1 then
80403: LD_OWVAR 69
80407: PUSH
80408: LD_INT 1
80410: EQUAL
80411: IFFALSE 83349
// begin case mission_number of 1 :
80413: LD_OWVAR 70
80417: PUSH
80418: LD_INT 1
80420: DOUBLE
80421: EQUAL
80422: IFTRUE 80426
80424: GO 80490
80426: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
80427: LD_ADDR_VAR 0 1
80431: PUSH
80432: LD_INT 2
80434: PUSH
80435: LD_INT 4
80437: PUSH
80438: LD_INT 11
80440: PUSH
80441: LD_INT 12
80443: PUSH
80444: LD_INT 15
80446: PUSH
80447: LD_INT 16
80449: PUSH
80450: LD_INT 22
80452: PUSH
80453: LD_INT 23
80455: PUSH
80456: LD_INT 26
80458: PUSH
80459: EMPTY
80460: LIST
80461: LIST
80462: LIST
80463: LIST
80464: LIST
80465: LIST
80466: LIST
80467: LIST
80468: LIST
80469: PUSH
80470: LD_INT 101
80472: PUSH
80473: LD_INT 102
80475: PUSH
80476: LD_INT 106
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: LIST
80483: PUSH
80484: EMPTY
80485: LIST
80486: LIST
80487: ST_TO_ADDR
80488: GO 83347
80490: LD_INT 2
80492: DOUBLE
80493: EQUAL
80494: IFTRUE 80498
80496: GO 80570
80498: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
80499: LD_ADDR_VAR 0 1
80503: PUSH
80504: LD_INT 2
80506: PUSH
80507: LD_INT 4
80509: PUSH
80510: LD_INT 11
80512: PUSH
80513: LD_INT 12
80515: PUSH
80516: LD_INT 15
80518: PUSH
80519: LD_INT 16
80521: PUSH
80522: LD_INT 22
80524: PUSH
80525: LD_INT 23
80527: PUSH
80528: LD_INT 26
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: LIST
80535: LIST
80536: LIST
80537: LIST
80538: LIST
80539: LIST
80540: LIST
80541: PUSH
80542: LD_INT 101
80544: PUSH
80545: LD_INT 102
80547: PUSH
80548: LD_INT 105
80550: PUSH
80551: LD_INT 106
80553: PUSH
80554: LD_INT 108
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: LIST
80561: LIST
80562: LIST
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: ST_TO_ADDR
80568: GO 83347
80570: LD_INT 3
80572: DOUBLE
80573: EQUAL
80574: IFTRUE 80578
80576: GO 80654
80578: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
80579: LD_ADDR_VAR 0 1
80583: PUSH
80584: LD_INT 2
80586: PUSH
80587: LD_INT 4
80589: PUSH
80590: LD_INT 5
80592: PUSH
80593: LD_INT 11
80595: PUSH
80596: LD_INT 12
80598: PUSH
80599: LD_INT 15
80601: PUSH
80602: LD_INT 16
80604: PUSH
80605: LD_INT 22
80607: PUSH
80608: LD_INT 26
80610: PUSH
80611: LD_INT 36
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: LIST
80623: LIST
80624: LIST
80625: PUSH
80626: LD_INT 101
80628: PUSH
80629: LD_INT 102
80631: PUSH
80632: LD_INT 105
80634: PUSH
80635: LD_INT 106
80637: PUSH
80638: LD_INT 108
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: LIST
80645: LIST
80646: LIST
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: ST_TO_ADDR
80652: GO 83347
80654: LD_INT 4
80656: DOUBLE
80657: EQUAL
80658: IFTRUE 80662
80660: GO 80746
80662: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
80663: LD_ADDR_VAR 0 1
80667: PUSH
80668: LD_INT 2
80670: PUSH
80671: LD_INT 4
80673: PUSH
80674: LD_INT 5
80676: PUSH
80677: LD_INT 8
80679: PUSH
80680: LD_INT 11
80682: PUSH
80683: LD_INT 12
80685: PUSH
80686: LD_INT 15
80688: PUSH
80689: LD_INT 16
80691: PUSH
80692: LD_INT 22
80694: PUSH
80695: LD_INT 23
80697: PUSH
80698: LD_INT 26
80700: PUSH
80701: LD_INT 36
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: LIST
80708: LIST
80709: LIST
80710: LIST
80711: LIST
80712: LIST
80713: LIST
80714: LIST
80715: LIST
80716: LIST
80717: PUSH
80718: LD_INT 101
80720: PUSH
80721: LD_INT 102
80723: PUSH
80724: LD_INT 105
80726: PUSH
80727: LD_INT 106
80729: PUSH
80730: LD_INT 108
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: ST_TO_ADDR
80744: GO 83347
80746: LD_INT 5
80748: DOUBLE
80749: EQUAL
80750: IFTRUE 80754
80752: GO 80854
80754: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
80755: LD_ADDR_VAR 0 1
80759: PUSH
80760: LD_INT 2
80762: PUSH
80763: LD_INT 4
80765: PUSH
80766: LD_INT 5
80768: PUSH
80769: LD_INT 6
80771: PUSH
80772: LD_INT 8
80774: PUSH
80775: LD_INT 11
80777: PUSH
80778: LD_INT 12
80780: PUSH
80781: LD_INT 15
80783: PUSH
80784: LD_INT 16
80786: PUSH
80787: LD_INT 22
80789: PUSH
80790: LD_INT 23
80792: PUSH
80793: LD_INT 25
80795: PUSH
80796: LD_INT 26
80798: PUSH
80799: LD_INT 36
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: LIST
80812: LIST
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: PUSH
80818: LD_INT 101
80820: PUSH
80821: LD_INT 102
80823: PUSH
80824: LD_INT 105
80826: PUSH
80827: LD_INT 106
80829: PUSH
80830: LD_INT 108
80832: PUSH
80833: LD_INT 109
80835: PUSH
80836: LD_INT 112
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: LIST
80843: LIST
80844: LIST
80845: LIST
80846: LIST
80847: PUSH
80848: EMPTY
80849: LIST
80850: LIST
80851: ST_TO_ADDR
80852: GO 83347
80854: LD_INT 6
80856: DOUBLE
80857: EQUAL
80858: IFTRUE 80862
80860: GO 80982
80862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
80863: LD_ADDR_VAR 0 1
80867: PUSH
80868: LD_INT 2
80870: PUSH
80871: LD_INT 4
80873: PUSH
80874: LD_INT 5
80876: PUSH
80877: LD_INT 6
80879: PUSH
80880: LD_INT 8
80882: PUSH
80883: LD_INT 11
80885: PUSH
80886: LD_INT 12
80888: PUSH
80889: LD_INT 15
80891: PUSH
80892: LD_INT 16
80894: PUSH
80895: LD_INT 20
80897: PUSH
80898: LD_INT 21
80900: PUSH
80901: LD_INT 22
80903: PUSH
80904: LD_INT 23
80906: PUSH
80907: LD_INT 25
80909: PUSH
80910: LD_INT 26
80912: PUSH
80913: LD_INT 30
80915: PUSH
80916: LD_INT 31
80918: PUSH
80919: LD_INT 32
80921: PUSH
80922: LD_INT 36
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: LIST
80932: LIST
80933: LIST
80934: LIST
80935: LIST
80936: LIST
80937: LIST
80938: LIST
80939: LIST
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: LIST
80945: PUSH
80946: LD_INT 101
80948: PUSH
80949: LD_INT 102
80951: PUSH
80952: LD_INT 105
80954: PUSH
80955: LD_INT 106
80957: PUSH
80958: LD_INT 108
80960: PUSH
80961: LD_INT 109
80963: PUSH
80964: LD_INT 112
80966: PUSH
80967: EMPTY
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: ST_TO_ADDR
80980: GO 83347
80982: LD_INT 7
80984: DOUBLE
80985: EQUAL
80986: IFTRUE 80990
80988: GO 81090
80990: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
80991: LD_ADDR_VAR 0 1
80995: PUSH
80996: LD_INT 2
80998: PUSH
80999: LD_INT 4
81001: PUSH
81002: LD_INT 5
81004: PUSH
81005: LD_INT 7
81007: PUSH
81008: LD_INT 11
81010: PUSH
81011: LD_INT 12
81013: PUSH
81014: LD_INT 15
81016: PUSH
81017: LD_INT 16
81019: PUSH
81020: LD_INT 20
81022: PUSH
81023: LD_INT 21
81025: PUSH
81026: LD_INT 22
81028: PUSH
81029: LD_INT 23
81031: PUSH
81032: LD_INT 25
81034: PUSH
81035: LD_INT 26
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: LIST
81048: LIST
81049: LIST
81050: LIST
81051: LIST
81052: LIST
81053: PUSH
81054: LD_INT 101
81056: PUSH
81057: LD_INT 102
81059: PUSH
81060: LD_INT 103
81062: PUSH
81063: LD_INT 105
81065: PUSH
81066: LD_INT 106
81068: PUSH
81069: LD_INT 108
81071: PUSH
81072: LD_INT 112
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: LIST
81079: LIST
81080: LIST
81081: LIST
81082: LIST
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: ST_TO_ADDR
81088: GO 83347
81090: LD_INT 8
81092: DOUBLE
81093: EQUAL
81094: IFTRUE 81098
81096: GO 81226
81098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
81099: LD_ADDR_VAR 0 1
81103: PUSH
81104: LD_INT 2
81106: PUSH
81107: LD_INT 4
81109: PUSH
81110: LD_INT 5
81112: PUSH
81113: LD_INT 6
81115: PUSH
81116: LD_INT 7
81118: PUSH
81119: LD_INT 8
81121: PUSH
81122: LD_INT 11
81124: PUSH
81125: LD_INT 12
81127: PUSH
81128: LD_INT 15
81130: PUSH
81131: LD_INT 16
81133: PUSH
81134: LD_INT 20
81136: PUSH
81137: LD_INT 21
81139: PUSH
81140: LD_INT 22
81142: PUSH
81143: LD_INT 23
81145: PUSH
81146: LD_INT 25
81148: PUSH
81149: LD_INT 26
81151: PUSH
81152: LD_INT 30
81154: PUSH
81155: LD_INT 31
81157: PUSH
81158: LD_INT 32
81160: PUSH
81161: LD_INT 36
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: LIST
81174: LIST
81175: LIST
81176: LIST
81177: LIST
81178: LIST
81179: LIST
81180: LIST
81181: LIST
81182: LIST
81183: LIST
81184: LIST
81185: PUSH
81186: LD_INT 101
81188: PUSH
81189: LD_INT 102
81191: PUSH
81192: LD_INT 103
81194: PUSH
81195: LD_INT 105
81197: PUSH
81198: LD_INT 106
81200: PUSH
81201: LD_INT 108
81203: PUSH
81204: LD_INT 109
81206: PUSH
81207: LD_INT 112
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: LIST
81214: LIST
81215: LIST
81216: LIST
81217: LIST
81218: LIST
81219: PUSH
81220: EMPTY
81221: LIST
81222: LIST
81223: ST_TO_ADDR
81224: GO 83347
81226: LD_INT 9
81228: DOUBLE
81229: EQUAL
81230: IFTRUE 81234
81232: GO 81370
81234: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
81235: LD_ADDR_VAR 0 1
81239: PUSH
81240: LD_INT 2
81242: PUSH
81243: LD_INT 4
81245: PUSH
81246: LD_INT 5
81248: PUSH
81249: LD_INT 6
81251: PUSH
81252: LD_INT 7
81254: PUSH
81255: LD_INT 8
81257: PUSH
81258: LD_INT 11
81260: PUSH
81261: LD_INT 12
81263: PUSH
81264: LD_INT 15
81266: PUSH
81267: LD_INT 16
81269: PUSH
81270: LD_INT 20
81272: PUSH
81273: LD_INT 21
81275: PUSH
81276: LD_INT 22
81278: PUSH
81279: LD_INT 23
81281: PUSH
81282: LD_INT 25
81284: PUSH
81285: LD_INT 26
81287: PUSH
81288: LD_INT 28
81290: PUSH
81291: LD_INT 30
81293: PUSH
81294: LD_INT 31
81296: PUSH
81297: LD_INT 32
81299: PUSH
81300: LD_INT 36
81302: PUSH
81303: EMPTY
81304: LIST
81305: LIST
81306: LIST
81307: LIST
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: LIST
81313: LIST
81314: LIST
81315: LIST
81316: LIST
81317: LIST
81318: LIST
81319: LIST
81320: LIST
81321: LIST
81322: LIST
81323: LIST
81324: LIST
81325: PUSH
81326: LD_INT 101
81328: PUSH
81329: LD_INT 102
81331: PUSH
81332: LD_INT 103
81334: PUSH
81335: LD_INT 105
81337: PUSH
81338: LD_INT 106
81340: PUSH
81341: LD_INT 108
81343: PUSH
81344: LD_INT 109
81346: PUSH
81347: LD_INT 112
81349: PUSH
81350: LD_INT 114
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: LIST
81357: LIST
81358: LIST
81359: LIST
81360: LIST
81361: LIST
81362: LIST
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: ST_TO_ADDR
81368: GO 83347
81370: LD_INT 10
81372: DOUBLE
81373: EQUAL
81374: IFTRUE 81378
81376: GO 81562
81378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
81379: LD_ADDR_VAR 0 1
81383: PUSH
81384: LD_INT 2
81386: PUSH
81387: LD_INT 4
81389: PUSH
81390: LD_INT 5
81392: PUSH
81393: LD_INT 6
81395: PUSH
81396: LD_INT 7
81398: PUSH
81399: LD_INT 8
81401: PUSH
81402: LD_INT 9
81404: PUSH
81405: LD_INT 10
81407: PUSH
81408: LD_INT 11
81410: PUSH
81411: LD_INT 12
81413: PUSH
81414: LD_INT 13
81416: PUSH
81417: LD_INT 14
81419: PUSH
81420: LD_INT 15
81422: PUSH
81423: LD_INT 16
81425: PUSH
81426: LD_INT 17
81428: PUSH
81429: LD_INT 18
81431: PUSH
81432: LD_INT 19
81434: PUSH
81435: LD_INT 20
81437: PUSH
81438: LD_INT 21
81440: PUSH
81441: LD_INT 22
81443: PUSH
81444: LD_INT 23
81446: PUSH
81447: LD_INT 24
81449: PUSH
81450: LD_INT 25
81452: PUSH
81453: LD_INT 26
81455: PUSH
81456: LD_INT 28
81458: PUSH
81459: LD_INT 30
81461: PUSH
81462: LD_INT 31
81464: PUSH
81465: LD_INT 32
81467: PUSH
81468: LD_INT 36
81470: PUSH
81471: EMPTY
81472: LIST
81473: LIST
81474: LIST
81475: LIST
81476: LIST
81477: LIST
81478: LIST
81479: LIST
81480: LIST
81481: LIST
81482: LIST
81483: LIST
81484: LIST
81485: LIST
81486: LIST
81487: LIST
81488: LIST
81489: LIST
81490: LIST
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: LIST
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: PUSH
81502: LD_INT 101
81504: PUSH
81505: LD_INT 102
81507: PUSH
81508: LD_INT 103
81510: PUSH
81511: LD_INT 104
81513: PUSH
81514: LD_INT 105
81516: PUSH
81517: LD_INT 106
81519: PUSH
81520: LD_INT 107
81522: PUSH
81523: LD_INT 108
81525: PUSH
81526: LD_INT 109
81528: PUSH
81529: LD_INT 110
81531: PUSH
81532: LD_INT 111
81534: PUSH
81535: LD_INT 112
81537: PUSH
81538: LD_INT 114
81540: PUSH
81541: EMPTY
81542: LIST
81543: LIST
81544: LIST
81545: LIST
81546: LIST
81547: LIST
81548: LIST
81549: LIST
81550: LIST
81551: LIST
81552: LIST
81553: LIST
81554: LIST
81555: PUSH
81556: EMPTY
81557: LIST
81558: LIST
81559: ST_TO_ADDR
81560: GO 83347
81562: LD_INT 11
81564: DOUBLE
81565: EQUAL
81566: IFTRUE 81570
81568: GO 81762
81570: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
81571: LD_ADDR_VAR 0 1
81575: PUSH
81576: LD_INT 2
81578: PUSH
81579: LD_INT 3
81581: PUSH
81582: LD_INT 4
81584: PUSH
81585: LD_INT 5
81587: PUSH
81588: LD_INT 6
81590: PUSH
81591: LD_INT 7
81593: PUSH
81594: LD_INT 8
81596: PUSH
81597: LD_INT 9
81599: PUSH
81600: LD_INT 10
81602: PUSH
81603: LD_INT 11
81605: PUSH
81606: LD_INT 12
81608: PUSH
81609: LD_INT 13
81611: PUSH
81612: LD_INT 14
81614: PUSH
81615: LD_INT 15
81617: PUSH
81618: LD_INT 16
81620: PUSH
81621: LD_INT 17
81623: PUSH
81624: LD_INT 18
81626: PUSH
81627: LD_INT 19
81629: PUSH
81630: LD_INT 20
81632: PUSH
81633: LD_INT 21
81635: PUSH
81636: LD_INT 22
81638: PUSH
81639: LD_INT 23
81641: PUSH
81642: LD_INT 24
81644: PUSH
81645: LD_INT 25
81647: PUSH
81648: LD_INT 26
81650: PUSH
81651: LD_INT 28
81653: PUSH
81654: LD_INT 30
81656: PUSH
81657: LD_INT 31
81659: PUSH
81660: LD_INT 32
81662: PUSH
81663: LD_INT 34
81665: PUSH
81666: LD_INT 36
81668: PUSH
81669: EMPTY
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: LIST
81675: LIST
81676: LIST
81677: LIST
81678: LIST
81679: LIST
81680: LIST
81681: LIST
81682: LIST
81683: LIST
81684: LIST
81685: LIST
81686: LIST
81687: LIST
81688: LIST
81689: LIST
81690: LIST
81691: LIST
81692: LIST
81693: LIST
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: PUSH
81702: LD_INT 101
81704: PUSH
81705: LD_INT 102
81707: PUSH
81708: LD_INT 103
81710: PUSH
81711: LD_INT 104
81713: PUSH
81714: LD_INT 105
81716: PUSH
81717: LD_INT 106
81719: PUSH
81720: LD_INT 107
81722: PUSH
81723: LD_INT 108
81725: PUSH
81726: LD_INT 109
81728: PUSH
81729: LD_INT 110
81731: PUSH
81732: LD_INT 111
81734: PUSH
81735: LD_INT 112
81737: PUSH
81738: LD_INT 114
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: LIST
81745: LIST
81746: LIST
81747: LIST
81748: LIST
81749: LIST
81750: LIST
81751: LIST
81752: LIST
81753: LIST
81754: LIST
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: ST_TO_ADDR
81760: GO 83347
81762: LD_INT 12
81764: DOUBLE
81765: EQUAL
81766: IFTRUE 81770
81768: GO 81978
81770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
81771: LD_ADDR_VAR 0 1
81775: PUSH
81776: LD_INT 1
81778: PUSH
81779: LD_INT 2
81781: PUSH
81782: LD_INT 3
81784: PUSH
81785: LD_INT 4
81787: PUSH
81788: LD_INT 5
81790: PUSH
81791: LD_INT 6
81793: PUSH
81794: LD_INT 7
81796: PUSH
81797: LD_INT 8
81799: PUSH
81800: LD_INT 9
81802: PUSH
81803: LD_INT 10
81805: PUSH
81806: LD_INT 11
81808: PUSH
81809: LD_INT 12
81811: PUSH
81812: LD_INT 13
81814: PUSH
81815: LD_INT 14
81817: PUSH
81818: LD_INT 15
81820: PUSH
81821: LD_INT 16
81823: PUSH
81824: LD_INT 17
81826: PUSH
81827: LD_INT 18
81829: PUSH
81830: LD_INT 19
81832: PUSH
81833: LD_INT 20
81835: PUSH
81836: LD_INT 21
81838: PUSH
81839: LD_INT 22
81841: PUSH
81842: LD_INT 23
81844: PUSH
81845: LD_INT 24
81847: PUSH
81848: LD_INT 25
81850: PUSH
81851: LD_INT 26
81853: PUSH
81854: LD_INT 27
81856: PUSH
81857: LD_INT 28
81859: PUSH
81860: LD_INT 30
81862: PUSH
81863: LD_INT 31
81865: PUSH
81866: LD_INT 32
81868: PUSH
81869: LD_INT 33
81871: PUSH
81872: LD_INT 34
81874: PUSH
81875: LD_INT 36
81877: PUSH
81878: EMPTY
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: LIST
81891: LIST
81892: LIST
81893: LIST
81894: LIST
81895: LIST
81896: LIST
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: LIST
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 101
81916: PUSH
81917: LD_INT 102
81919: PUSH
81920: LD_INT 103
81922: PUSH
81923: LD_INT 104
81925: PUSH
81926: LD_INT 105
81928: PUSH
81929: LD_INT 106
81931: PUSH
81932: LD_INT 107
81934: PUSH
81935: LD_INT 108
81937: PUSH
81938: LD_INT 109
81940: PUSH
81941: LD_INT 110
81943: PUSH
81944: LD_INT 111
81946: PUSH
81947: LD_INT 112
81949: PUSH
81950: LD_INT 113
81952: PUSH
81953: LD_INT 114
81955: PUSH
81956: EMPTY
81957: LIST
81958: LIST
81959: LIST
81960: LIST
81961: LIST
81962: LIST
81963: LIST
81964: LIST
81965: LIST
81966: LIST
81967: LIST
81968: LIST
81969: LIST
81970: LIST
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: ST_TO_ADDR
81976: GO 83347
81978: LD_INT 13
81980: DOUBLE
81981: EQUAL
81982: IFTRUE 81986
81984: GO 82182
81986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
81987: LD_ADDR_VAR 0 1
81991: PUSH
81992: LD_INT 1
81994: PUSH
81995: LD_INT 2
81997: PUSH
81998: LD_INT 3
82000: PUSH
82001: LD_INT 4
82003: PUSH
82004: LD_INT 5
82006: PUSH
82007: LD_INT 8
82009: PUSH
82010: LD_INT 9
82012: PUSH
82013: LD_INT 10
82015: PUSH
82016: LD_INT 11
82018: PUSH
82019: LD_INT 12
82021: PUSH
82022: LD_INT 14
82024: PUSH
82025: LD_INT 15
82027: PUSH
82028: LD_INT 16
82030: PUSH
82031: LD_INT 17
82033: PUSH
82034: LD_INT 18
82036: PUSH
82037: LD_INT 19
82039: PUSH
82040: LD_INT 20
82042: PUSH
82043: LD_INT 21
82045: PUSH
82046: LD_INT 22
82048: PUSH
82049: LD_INT 23
82051: PUSH
82052: LD_INT 24
82054: PUSH
82055: LD_INT 25
82057: PUSH
82058: LD_INT 26
82060: PUSH
82061: LD_INT 27
82063: PUSH
82064: LD_INT 28
82066: PUSH
82067: LD_INT 30
82069: PUSH
82070: LD_INT 31
82072: PUSH
82073: LD_INT 32
82075: PUSH
82076: LD_INT 33
82078: PUSH
82079: LD_INT 34
82081: PUSH
82082: LD_INT 36
82084: PUSH
82085: EMPTY
82086: LIST
82087: LIST
82088: LIST
82089: LIST
82090: LIST
82091: LIST
82092: LIST
82093: LIST
82094: LIST
82095: LIST
82096: LIST
82097: LIST
82098: LIST
82099: LIST
82100: LIST
82101: LIST
82102: LIST
82103: LIST
82104: LIST
82105: LIST
82106: LIST
82107: LIST
82108: LIST
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: PUSH
82118: LD_INT 101
82120: PUSH
82121: LD_INT 102
82123: PUSH
82124: LD_INT 103
82126: PUSH
82127: LD_INT 104
82129: PUSH
82130: LD_INT 105
82132: PUSH
82133: LD_INT 106
82135: PUSH
82136: LD_INT 107
82138: PUSH
82139: LD_INT 108
82141: PUSH
82142: LD_INT 109
82144: PUSH
82145: LD_INT 110
82147: PUSH
82148: LD_INT 111
82150: PUSH
82151: LD_INT 112
82153: PUSH
82154: LD_INT 113
82156: PUSH
82157: LD_INT 114
82159: PUSH
82160: EMPTY
82161: LIST
82162: LIST
82163: LIST
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: LIST
82169: LIST
82170: LIST
82171: LIST
82172: LIST
82173: LIST
82174: LIST
82175: PUSH
82176: EMPTY
82177: LIST
82178: LIST
82179: ST_TO_ADDR
82180: GO 83347
82182: LD_INT 14
82184: DOUBLE
82185: EQUAL
82186: IFTRUE 82190
82188: GO 82402
82190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
82191: LD_ADDR_VAR 0 1
82195: PUSH
82196: LD_INT 1
82198: PUSH
82199: LD_INT 2
82201: PUSH
82202: LD_INT 3
82204: PUSH
82205: LD_INT 4
82207: PUSH
82208: LD_INT 5
82210: PUSH
82211: LD_INT 6
82213: PUSH
82214: LD_INT 7
82216: PUSH
82217: LD_INT 8
82219: PUSH
82220: LD_INT 9
82222: PUSH
82223: LD_INT 10
82225: PUSH
82226: LD_INT 11
82228: PUSH
82229: LD_INT 12
82231: PUSH
82232: LD_INT 13
82234: PUSH
82235: LD_INT 14
82237: PUSH
82238: LD_INT 15
82240: PUSH
82241: LD_INT 16
82243: PUSH
82244: LD_INT 17
82246: PUSH
82247: LD_INT 18
82249: PUSH
82250: LD_INT 19
82252: PUSH
82253: LD_INT 20
82255: PUSH
82256: LD_INT 21
82258: PUSH
82259: LD_INT 22
82261: PUSH
82262: LD_INT 23
82264: PUSH
82265: LD_INT 24
82267: PUSH
82268: LD_INT 25
82270: PUSH
82271: LD_INT 26
82273: PUSH
82274: LD_INT 27
82276: PUSH
82277: LD_INT 28
82279: PUSH
82280: LD_INT 29
82282: PUSH
82283: LD_INT 30
82285: PUSH
82286: LD_INT 31
82288: PUSH
82289: LD_INT 32
82291: PUSH
82292: LD_INT 33
82294: PUSH
82295: LD_INT 34
82297: PUSH
82298: LD_INT 36
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: LIST
82305: LIST
82306: LIST
82307: LIST
82308: LIST
82309: LIST
82310: LIST
82311: LIST
82312: LIST
82313: LIST
82314: LIST
82315: LIST
82316: LIST
82317: LIST
82318: LIST
82319: LIST
82320: LIST
82321: LIST
82322: LIST
82323: LIST
82324: LIST
82325: LIST
82326: LIST
82327: LIST
82328: LIST
82329: LIST
82330: LIST
82331: LIST
82332: LIST
82333: LIST
82334: LIST
82335: LIST
82336: LIST
82337: PUSH
82338: LD_INT 101
82340: PUSH
82341: LD_INT 102
82343: PUSH
82344: LD_INT 103
82346: PUSH
82347: LD_INT 104
82349: PUSH
82350: LD_INT 105
82352: PUSH
82353: LD_INT 106
82355: PUSH
82356: LD_INT 107
82358: PUSH
82359: LD_INT 108
82361: PUSH
82362: LD_INT 109
82364: PUSH
82365: LD_INT 110
82367: PUSH
82368: LD_INT 111
82370: PUSH
82371: LD_INT 112
82373: PUSH
82374: LD_INT 113
82376: PUSH
82377: LD_INT 114
82379: PUSH
82380: EMPTY
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: LIST
82390: LIST
82391: LIST
82392: LIST
82393: LIST
82394: LIST
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: ST_TO_ADDR
82400: GO 83347
82402: LD_INT 15
82404: DOUBLE
82405: EQUAL
82406: IFTRUE 82410
82408: GO 82622
82410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
82411: LD_ADDR_VAR 0 1
82415: PUSH
82416: LD_INT 1
82418: PUSH
82419: LD_INT 2
82421: PUSH
82422: LD_INT 3
82424: PUSH
82425: LD_INT 4
82427: PUSH
82428: LD_INT 5
82430: PUSH
82431: LD_INT 6
82433: PUSH
82434: LD_INT 7
82436: PUSH
82437: LD_INT 8
82439: PUSH
82440: LD_INT 9
82442: PUSH
82443: LD_INT 10
82445: PUSH
82446: LD_INT 11
82448: PUSH
82449: LD_INT 12
82451: PUSH
82452: LD_INT 13
82454: PUSH
82455: LD_INT 14
82457: PUSH
82458: LD_INT 15
82460: PUSH
82461: LD_INT 16
82463: PUSH
82464: LD_INT 17
82466: PUSH
82467: LD_INT 18
82469: PUSH
82470: LD_INT 19
82472: PUSH
82473: LD_INT 20
82475: PUSH
82476: LD_INT 21
82478: PUSH
82479: LD_INT 22
82481: PUSH
82482: LD_INT 23
82484: PUSH
82485: LD_INT 24
82487: PUSH
82488: LD_INT 25
82490: PUSH
82491: LD_INT 26
82493: PUSH
82494: LD_INT 27
82496: PUSH
82497: LD_INT 28
82499: PUSH
82500: LD_INT 29
82502: PUSH
82503: LD_INT 30
82505: PUSH
82506: LD_INT 31
82508: PUSH
82509: LD_INT 32
82511: PUSH
82512: LD_INT 33
82514: PUSH
82515: LD_INT 34
82517: PUSH
82518: LD_INT 36
82520: PUSH
82521: EMPTY
82522: LIST
82523: LIST
82524: LIST
82525: LIST
82526: LIST
82527: LIST
82528: LIST
82529: LIST
82530: LIST
82531: LIST
82532: LIST
82533: LIST
82534: LIST
82535: LIST
82536: LIST
82537: LIST
82538: LIST
82539: LIST
82540: LIST
82541: LIST
82542: LIST
82543: LIST
82544: LIST
82545: LIST
82546: LIST
82547: LIST
82548: LIST
82549: LIST
82550: LIST
82551: LIST
82552: LIST
82553: LIST
82554: LIST
82555: LIST
82556: LIST
82557: PUSH
82558: LD_INT 101
82560: PUSH
82561: LD_INT 102
82563: PUSH
82564: LD_INT 103
82566: PUSH
82567: LD_INT 104
82569: PUSH
82570: LD_INT 105
82572: PUSH
82573: LD_INT 106
82575: PUSH
82576: LD_INT 107
82578: PUSH
82579: LD_INT 108
82581: PUSH
82582: LD_INT 109
82584: PUSH
82585: LD_INT 110
82587: PUSH
82588: LD_INT 111
82590: PUSH
82591: LD_INT 112
82593: PUSH
82594: LD_INT 113
82596: PUSH
82597: LD_INT 114
82599: PUSH
82600: EMPTY
82601: LIST
82602: LIST
82603: LIST
82604: LIST
82605: LIST
82606: LIST
82607: LIST
82608: LIST
82609: LIST
82610: LIST
82611: LIST
82612: LIST
82613: LIST
82614: LIST
82615: PUSH
82616: EMPTY
82617: LIST
82618: LIST
82619: ST_TO_ADDR
82620: GO 83347
82622: LD_INT 16
82624: DOUBLE
82625: EQUAL
82626: IFTRUE 82630
82628: GO 82754
82630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
82631: LD_ADDR_VAR 0 1
82635: PUSH
82636: LD_INT 2
82638: PUSH
82639: LD_INT 4
82641: PUSH
82642: LD_INT 5
82644: PUSH
82645: LD_INT 7
82647: PUSH
82648: LD_INT 11
82650: PUSH
82651: LD_INT 12
82653: PUSH
82654: LD_INT 15
82656: PUSH
82657: LD_INT 16
82659: PUSH
82660: LD_INT 20
82662: PUSH
82663: LD_INT 21
82665: PUSH
82666: LD_INT 22
82668: PUSH
82669: LD_INT 23
82671: PUSH
82672: LD_INT 25
82674: PUSH
82675: LD_INT 26
82677: PUSH
82678: LD_INT 30
82680: PUSH
82681: LD_INT 31
82683: PUSH
82684: LD_INT 32
82686: PUSH
82687: LD_INT 33
82689: PUSH
82690: LD_INT 34
82692: PUSH
82693: EMPTY
82694: LIST
82695: LIST
82696: LIST
82697: LIST
82698: LIST
82699: LIST
82700: LIST
82701: LIST
82702: LIST
82703: LIST
82704: LIST
82705: LIST
82706: LIST
82707: LIST
82708: LIST
82709: LIST
82710: LIST
82711: LIST
82712: LIST
82713: PUSH
82714: LD_INT 101
82716: PUSH
82717: LD_INT 102
82719: PUSH
82720: LD_INT 103
82722: PUSH
82723: LD_INT 106
82725: PUSH
82726: LD_INT 108
82728: PUSH
82729: LD_INT 112
82731: PUSH
82732: LD_INT 113
82734: PUSH
82735: LD_INT 114
82737: PUSH
82738: EMPTY
82739: LIST
82740: LIST
82741: LIST
82742: LIST
82743: LIST
82744: LIST
82745: LIST
82746: LIST
82747: PUSH
82748: EMPTY
82749: LIST
82750: LIST
82751: ST_TO_ADDR
82752: GO 83347
82754: LD_INT 17
82756: DOUBLE
82757: EQUAL
82758: IFTRUE 82762
82760: GO 82974
82762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
82763: LD_ADDR_VAR 0 1
82767: PUSH
82768: LD_INT 1
82770: PUSH
82771: LD_INT 2
82773: PUSH
82774: LD_INT 3
82776: PUSH
82777: LD_INT 4
82779: PUSH
82780: LD_INT 5
82782: PUSH
82783: LD_INT 6
82785: PUSH
82786: LD_INT 7
82788: PUSH
82789: LD_INT 8
82791: PUSH
82792: LD_INT 9
82794: PUSH
82795: LD_INT 10
82797: PUSH
82798: LD_INT 11
82800: PUSH
82801: LD_INT 12
82803: PUSH
82804: LD_INT 13
82806: PUSH
82807: LD_INT 14
82809: PUSH
82810: LD_INT 15
82812: PUSH
82813: LD_INT 16
82815: PUSH
82816: LD_INT 17
82818: PUSH
82819: LD_INT 18
82821: PUSH
82822: LD_INT 19
82824: PUSH
82825: LD_INT 20
82827: PUSH
82828: LD_INT 21
82830: PUSH
82831: LD_INT 22
82833: PUSH
82834: LD_INT 23
82836: PUSH
82837: LD_INT 24
82839: PUSH
82840: LD_INT 25
82842: PUSH
82843: LD_INT 26
82845: PUSH
82846: LD_INT 27
82848: PUSH
82849: LD_INT 28
82851: PUSH
82852: LD_INT 29
82854: PUSH
82855: LD_INT 30
82857: PUSH
82858: LD_INT 31
82860: PUSH
82861: LD_INT 32
82863: PUSH
82864: LD_INT 33
82866: PUSH
82867: LD_INT 34
82869: PUSH
82870: LD_INT 36
82872: PUSH
82873: EMPTY
82874: LIST
82875: LIST
82876: LIST
82877: LIST
82878: LIST
82879: LIST
82880: LIST
82881: LIST
82882: LIST
82883: LIST
82884: LIST
82885: LIST
82886: LIST
82887: LIST
82888: LIST
82889: LIST
82890: LIST
82891: LIST
82892: LIST
82893: LIST
82894: LIST
82895: LIST
82896: LIST
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: LIST
82902: LIST
82903: LIST
82904: LIST
82905: LIST
82906: LIST
82907: LIST
82908: LIST
82909: PUSH
82910: LD_INT 101
82912: PUSH
82913: LD_INT 102
82915: PUSH
82916: LD_INT 103
82918: PUSH
82919: LD_INT 104
82921: PUSH
82922: LD_INT 105
82924: PUSH
82925: LD_INT 106
82927: PUSH
82928: LD_INT 107
82930: PUSH
82931: LD_INT 108
82933: PUSH
82934: LD_INT 109
82936: PUSH
82937: LD_INT 110
82939: PUSH
82940: LD_INT 111
82942: PUSH
82943: LD_INT 112
82945: PUSH
82946: LD_INT 113
82948: PUSH
82949: LD_INT 114
82951: PUSH
82952: EMPTY
82953: LIST
82954: LIST
82955: LIST
82956: LIST
82957: LIST
82958: LIST
82959: LIST
82960: LIST
82961: LIST
82962: LIST
82963: LIST
82964: LIST
82965: LIST
82966: LIST
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: ST_TO_ADDR
82972: GO 83347
82974: LD_INT 18
82976: DOUBLE
82977: EQUAL
82978: IFTRUE 82982
82980: GO 83118
82982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
82983: LD_ADDR_VAR 0 1
82987: PUSH
82988: LD_INT 2
82990: PUSH
82991: LD_INT 4
82993: PUSH
82994: LD_INT 5
82996: PUSH
82997: LD_INT 7
82999: PUSH
83000: LD_INT 11
83002: PUSH
83003: LD_INT 12
83005: PUSH
83006: LD_INT 15
83008: PUSH
83009: LD_INT 16
83011: PUSH
83012: LD_INT 20
83014: PUSH
83015: LD_INT 21
83017: PUSH
83018: LD_INT 22
83020: PUSH
83021: LD_INT 23
83023: PUSH
83024: LD_INT 25
83026: PUSH
83027: LD_INT 26
83029: PUSH
83030: LD_INT 30
83032: PUSH
83033: LD_INT 31
83035: PUSH
83036: LD_INT 32
83038: PUSH
83039: LD_INT 33
83041: PUSH
83042: LD_INT 34
83044: PUSH
83045: LD_INT 35
83047: PUSH
83048: LD_INT 36
83050: PUSH
83051: EMPTY
83052: LIST
83053: LIST
83054: LIST
83055: LIST
83056: LIST
83057: LIST
83058: LIST
83059: LIST
83060: LIST
83061: LIST
83062: LIST
83063: LIST
83064: LIST
83065: LIST
83066: LIST
83067: LIST
83068: LIST
83069: LIST
83070: LIST
83071: LIST
83072: LIST
83073: PUSH
83074: LD_INT 101
83076: PUSH
83077: LD_INT 102
83079: PUSH
83080: LD_INT 103
83082: PUSH
83083: LD_INT 106
83085: PUSH
83086: LD_INT 108
83088: PUSH
83089: LD_INT 112
83091: PUSH
83092: LD_INT 113
83094: PUSH
83095: LD_INT 114
83097: PUSH
83098: LD_INT 115
83100: PUSH
83101: EMPTY
83102: LIST
83103: LIST
83104: LIST
83105: LIST
83106: LIST
83107: LIST
83108: LIST
83109: LIST
83110: LIST
83111: PUSH
83112: EMPTY
83113: LIST
83114: LIST
83115: ST_TO_ADDR
83116: GO 83347
83118: LD_INT 19
83120: DOUBLE
83121: EQUAL
83122: IFTRUE 83126
83124: GO 83346
83126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
83127: LD_ADDR_VAR 0 1
83131: PUSH
83132: LD_INT 1
83134: PUSH
83135: LD_INT 2
83137: PUSH
83138: LD_INT 3
83140: PUSH
83141: LD_INT 4
83143: PUSH
83144: LD_INT 5
83146: PUSH
83147: LD_INT 6
83149: PUSH
83150: LD_INT 7
83152: PUSH
83153: LD_INT 8
83155: PUSH
83156: LD_INT 9
83158: PUSH
83159: LD_INT 10
83161: PUSH
83162: LD_INT 11
83164: PUSH
83165: LD_INT 12
83167: PUSH
83168: LD_INT 13
83170: PUSH
83171: LD_INT 14
83173: PUSH
83174: LD_INT 15
83176: PUSH
83177: LD_INT 16
83179: PUSH
83180: LD_INT 17
83182: PUSH
83183: LD_INT 18
83185: PUSH
83186: LD_INT 19
83188: PUSH
83189: LD_INT 20
83191: PUSH
83192: LD_INT 21
83194: PUSH
83195: LD_INT 22
83197: PUSH
83198: LD_INT 23
83200: PUSH
83201: LD_INT 24
83203: PUSH
83204: LD_INT 25
83206: PUSH
83207: LD_INT 26
83209: PUSH
83210: LD_INT 27
83212: PUSH
83213: LD_INT 28
83215: PUSH
83216: LD_INT 29
83218: PUSH
83219: LD_INT 30
83221: PUSH
83222: LD_INT 31
83224: PUSH
83225: LD_INT 32
83227: PUSH
83228: LD_INT 33
83230: PUSH
83231: LD_INT 34
83233: PUSH
83234: LD_INT 35
83236: PUSH
83237: LD_INT 36
83239: PUSH
83240: EMPTY
83241: LIST
83242: LIST
83243: LIST
83244: LIST
83245: LIST
83246: LIST
83247: LIST
83248: LIST
83249: LIST
83250: LIST
83251: LIST
83252: LIST
83253: LIST
83254: LIST
83255: LIST
83256: LIST
83257: LIST
83258: LIST
83259: LIST
83260: LIST
83261: LIST
83262: LIST
83263: LIST
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: LIST
83271: LIST
83272: LIST
83273: LIST
83274: LIST
83275: LIST
83276: LIST
83277: PUSH
83278: LD_INT 101
83280: PUSH
83281: LD_INT 102
83283: PUSH
83284: LD_INT 103
83286: PUSH
83287: LD_INT 104
83289: PUSH
83290: LD_INT 105
83292: PUSH
83293: LD_INT 106
83295: PUSH
83296: LD_INT 107
83298: PUSH
83299: LD_INT 108
83301: PUSH
83302: LD_INT 109
83304: PUSH
83305: LD_INT 110
83307: PUSH
83308: LD_INT 111
83310: PUSH
83311: LD_INT 112
83313: PUSH
83314: LD_INT 113
83316: PUSH
83317: LD_INT 114
83319: PUSH
83320: LD_INT 115
83322: PUSH
83323: EMPTY
83324: LIST
83325: LIST
83326: LIST
83327: LIST
83328: LIST
83329: LIST
83330: LIST
83331: LIST
83332: LIST
83333: LIST
83334: LIST
83335: LIST
83336: LIST
83337: LIST
83338: LIST
83339: PUSH
83340: EMPTY
83341: LIST
83342: LIST
83343: ST_TO_ADDR
83344: GO 83347
83346: POP
// end else
83347: GO 83566
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
83349: LD_ADDR_VAR 0 1
83353: PUSH
83354: LD_INT 1
83356: PUSH
83357: LD_INT 2
83359: PUSH
83360: LD_INT 3
83362: PUSH
83363: LD_INT 4
83365: PUSH
83366: LD_INT 5
83368: PUSH
83369: LD_INT 6
83371: PUSH
83372: LD_INT 7
83374: PUSH
83375: LD_INT 8
83377: PUSH
83378: LD_INT 9
83380: PUSH
83381: LD_INT 10
83383: PUSH
83384: LD_INT 11
83386: PUSH
83387: LD_INT 12
83389: PUSH
83390: LD_INT 13
83392: PUSH
83393: LD_INT 14
83395: PUSH
83396: LD_INT 15
83398: PUSH
83399: LD_INT 16
83401: PUSH
83402: LD_INT 17
83404: PUSH
83405: LD_INT 18
83407: PUSH
83408: LD_INT 19
83410: PUSH
83411: LD_INT 20
83413: PUSH
83414: LD_INT 21
83416: PUSH
83417: LD_INT 22
83419: PUSH
83420: LD_INT 23
83422: PUSH
83423: LD_INT 24
83425: PUSH
83426: LD_INT 25
83428: PUSH
83429: LD_INT 26
83431: PUSH
83432: LD_INT 27
83434: PUSH
83435: LD_INT 28
83437: PUSH
83438: LD_INT 29
83440: PUSH
83441: LD_INT 30
83443: PUSH
83444: LD_INT 31
83446: PUSH
83447: LD_INT 32
83449: PUSH
83450: LD_INT 33
83452: PUSH
83453: LD_INT 34
83455: PUSH
83456: LD_INT 35
83458: PUSH
83459: LD_INT 36
83461: PUSH
83462: EMPTY
83463: LIST
83464: LIST
83465: LIST
83466: LIST
83467: LIST
83468: LIST
83469: LIST
83470: LIST
83471: LIST
83472: LIST
83473: LIST
83474: LIST
83475: LIST
83476: LIST
83477: LIST
83478: LIST
83479: LIST
83480: LIST
83481: LIST
83482: LIST
83483: LIST
83484: LIST
83485: LIST
83486: LIST
83487: LIST
83488: LIST
83489: LIST
83490: LIST
83491: LIST
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: LIST
83497: LIST
83498: LIST
83499: PUSH
83500: LD_INT 101
83502: PUSH
83503: LD_INT 102
83505: PUSH
83506: LD_INT 103
83508: PUSH
83509: LD_INT 104
83511: PUSH
83512: LD_INT 105
83514: PUSH
83515: LD_INT 106
83517: PUSH
83518: LD_INT 107
83520: PUSH
83521: LD_INT 108
83523: PUSH
83524: LD_INT 109
83526: PUSH
83527: LD_INT 110
83529: PUSH
83530: LD_INT 111
83532: PUSH
83533: LD_INT 112
83535: PUSH
83536: LD_INT 113
83538: PUSH
83539: LD_INT 114
83541: PUSH
83542: LD_INT 115
83544: PUSH
83545: EMPTY
83546: LIST
83547: LIST
83548: LIST
83549: LIST
83550: LIST
83551: LIST
83552: LIST
83553: LIST
83554: LIST
83555: LIST
83556: LIST
83557: LIST
83558: LIST
83559: LIST
83560: LIST
83561: PUSH
83562: EMPTY
83563: LIST
83564: LIST
83565: ST_TO_ADDR
// if result then
83566: LD_VAR 0 1
83570: IFFALSE 83859
// begin normal :=  ;
83572: LD_ADDR_VAR 0 3
83576: PUSH
83577: LD_STRING 
83579: ST_TO_ADDR
// hardcore :=  ;
83580: LD_ADDR_VAR 0 4
83584: PUSH
83585: LD_STRING 
83587: ST_TO_ADDR
// for i = 1 to normalCounter do
83588: LD_ADDR_VAR 0 5
83592: PUSH
83593: DOUBLE
83594: LD_INT 1
83596: DEC
83597: ST_TO_ADDR
83598: LD_EXP 108
83602: PUSH
83603: FOR_TO
83604: IFFALSE 83705
// begin tmp := 0 ;
83606: LD_ADDR_VAR 0 2
83610: PUSH
83611: LD_STRING 0
83613: ST_TO_ADDR
// if result [ 1 ] then
83614: LD_VAR 0 1
83618: PUSH
83619: LD_INT 1
83621: ARRAY
83622: IFFALSE 83687
// if result [ 1 ] [ 1 ] = i then
83624: LD_VAR 0 1
83628: PUSH
83629: LD_INT 1
83631: ARRAY
83632: PUSH
83633: LD_INT 1
83635: ARRAY
83636: PUSH
83637: LD_VAR 0 5
83641: EQUAL
83642: IFFALSE 83687
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
83644: LD_ADDR_VAR 0 1
83648: PUSH
83649: LD_VAR 0 1
83653: PPUSH
83654: LD_INT 1
83656: PPUSH
83657: LD_VAR 0 1
83661: PUSH
83662: LD_INT 1
83664: ARRAY
83665: PPUSH
83666: LD_INT 1
83668: PPUSH
83669: CALL_OW 3
83673: PPUSH
83674: CALL_OW 1
83678: ST_TO_ADDR
// tmp := 1 ;
83679: LD_ADDR_VAR 0 2
83683: PUSH
83684: LD_STRING 1
83686: ST_TO_ADDR
// end ; normal := normal & tmp ;
83687: LD_ADDR_VAR 0 3
83691: PUSH
83692: LD_VAR 0 3
83696: PUSH
83697: LD_VAR 0 2
83701: STR
83702: ST_TO_ADDR
// end ;
83703: GO 83603
83705: POP
83706: POP
// for i = 1 to hardcoreCounter do
83707: LD_ADDR_VAR 0 5
83711: PUSH
83712: DOUBLE
83713: LD_INT 1
83715: DEC
83716: ST_TO_ADDR
83717: LD_EXP 109
83721: PUSH
83722: FOR_TO
83723: IFFALSE 83828
// begin tmp := 0 ;
83725: LD_ADDR_VAR 0 2
83729: PUSH
83730: LD_STRING 0
83732: ST_TO_ADDR
// if result [ 2 ] then
83733: LD_VAR 0 1
83737: PUSH
83738: LD_INT 2
83740: ARRAY
83741: IFFALSE 83810
// if result [ 2 ] [ 1 ] = 100 + i then
83743: LD_VAR 0 1
83747: PUSH
83748: LD_INT 2
83750: ARRAY
83751: PUSH
83752: LD_INT 1
83754: ARRAY
83755: PUSH
83756: LD_INT 100
83758: PUSH
83759: LD_VAR 0 5
83763: PLUS
83764: EQUAL
83765: IFFALSE 83810
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
83767: LD_ADDR_VAR 0 1
83771: PUSH
83772: LD_VAR 0 1
83776: PPUSH
83777: LD_INT 2
83779: PPUSH
83780: LD_VAR 0 1
83784: PUSH
83785: LD_INT 2
83787: ARRAY
83788: PPUSH
83789: LD_INT 1
83791: PPUSH
83792: CALL_OW 3
83796: PPUSH
83797: CALL_OW 1
83801: ST_TO_ADDR
// tmp := 1 ;
83802: LD_ADDR_VAR 0 2
83806: PUSH
83807: LD_STRING 1
83809: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
83810: LD_ADDR_VAR 0 4
83814: PUSH
83815: LD_VAR 0 4
83819: PUSH
83820: LD_VAR 0 2
83824: STR
83825: ST_TO_ADDR
// end ;
83826: GO 83722
83828: POP
83829: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
83830: LD_STRING getStreamItemsFromMission("
83832: PUSH
83833: LD_VAR 0 3
83837: STR
83838: PUSH
83839: LD_STRING ","
83841: STR
83842: PUSH
83843: LD_VAR 0 4
83847: STR
83848: PUSH
83849: LD_STRING ")
83851: STR
83852: PPUSH
83853: CALL_OW 559
// end else
83857: GO 83866
// ToLua ( getStreamItemsFromMission("","") ) ;
83859: LD_STRING getStreamItemsFromMission("","")
83861: PPUSH
83862: CALL_OW 559
// end ;
83866: LD_VAR 0 1
83870: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
83871: LD_VAR 0 2
83875: PUSH
83876: LD_INT 100
83878: EQUAL
83879: IFFALSE 84828
// begin if not StreamModeActive then
83881: LD_EXP 107
83885: NOT
83886: IFFALSE 83896
// StreamModeActive := true ;
83888: LD_ADDR_EXP 107
83892: PUSH
83893: LD_INT 1
83895: ST_TO_ADDR
// if p3 = 0 then
83896: LD_VAR 0 3
83900: PUSH
83901: LD_INT 0
83903: EQUAL
83904: IFFALSE 83910
// InitStreamMode ;
83906: CALL 79949 0 0
// if p3 = 1 then
83910: LD_VAR 0 3
83914: PUSH
83915: LD_INT 1
83917: EQUAL
83918: IFFALSE 83928
// sRocket := true ;
83920: LD_ADDR_EXP 112
83924: PUSH
83925: LD_INT 1
83927: ST_TO_ADDR
// if p3 = 2 then
83928: LD_VAR 0 3
83932: PUSH
83933: LD_INT 2
83935: EQUAL
83936: IFFALSE 83946
// sSpeed := true ;
83938: LD_ADDR_EXP 111
83942: PUSH
83943: LD_INT 1
83945: ST_TO_ADDR
// if p3 = 3 then
83946: LD_VAR 0 3
83950: PUSH
83951: LD_INT 3
83953: EQUAL
83954: IFFALSE 83964
// sEngine := true ;
83956: LD_ADDR_EXP 113
83960: PUSH
83961: LD_INT 1
83963: ST_TO_ADDR
// if p3 = 4 then
83964: LD_VAR 0 3
83968: PUSH
83969: LD_INT 4
83971: EQUAL
83972: IFFALSE 83982
// sSpec := true ;
83974: LD_ADDR_EXP 110
83978: PUSH
83979: LD_INT 1
83981: ST_TO_ADDR
// if p3 = 5 then
83982: LD_VAR 0 3
83986: PUSH
83987: LD_INT 5
83989: EQUAL
83990: IFFALSE 84000
// sLevel := true ;
83992: LD_ADDR_EXP 114
83996: PUSH
83997: LD_INT 1
83999: ST_TO_ADDR
// if p3 = 6 then
84000: LD_VAR 0 3
84004: PUSH
84005: LD_INT 6
84007: EQUAL
84008: IFFALSE 84018
// sArmoury := true ;
84010: LD_ADDR_EXP 115
84014: PUSH
84015: LD_INT 1
84017: ST_TO_ADDR
// if p3 = 7 then
84018: LD_VAR 0 3
84022: PUSH
84023: LD_INT 7
84025: EQUAL
84026: IFFALSE 84036
// sRadar := true ;
84028: LD_ADDR_EXP 116
84032: PUSH
84033: LD_INT 1
84035: ST_TO_ADDR
// if p3 = 8 then
84036: LD_VAR 0 3
84040: PUSH
84041: LD_INT 8
84043: EQUAL
84044: IFFALSE 84054
// sBunker := true ;
84046: LD_ADDR_EXP 117
84050: PUSH
84051: LD_INT 1
84053: ST_TO_ADDR
// if p3 = 9 then
84054: LD_VAR 0 3
84058: PUSH
84059: LD_INT 9
84061: EQUAL
84062: IFFALSE 84072
// sHack := true ;
84064: LD_ADDR_EXP 118
84068: PUSH
84069: LD_INT 1
84071: ST_TO_ADDR
// if p3 = 10 then
84072: LD_VAR 0 3
84076: PUSH
84077: LD_INT 10
84079: EQUAL
84080: IFFALSE 84090
// sFire := true ;
84082: LD_ADDR_EXP 119
84086: PUSH
84087: LD_INT 1
84089: ST_TO_ADDR
// if p3 = 11 then
84090: LD_VAR 0 3
84094: PUSH
84095: LD_INT 11
84097: EQUAL
84098: IFFALSE 84108
// sRefresh := true ;
84100: LD_ADDR_EXP 120
84104: PUSH
84105: LD_INT 1
84107: ST_TO_ADDR
// if p3 = 12 then
84108: LD_VAR 0 3
84112: PUSH
84113: LD_INT 12
84115: EQUAL
84116: IFFALSE 84126
// sExp := true ;
84118: LD_ADDR_EXP 121
84122: PUSH
84123: LD_INT 1
84125: ST_TO_ADDR
// if p3 = 13 then
84126: LD_VAR 0 3
84130: PUSH
84131: LD_INT 13
84133: EQUAL
84134: IFFALSE 84144
// sDepot := true ;
84136: LD_ADDR_EXP 122
84140: PUSH
84141: LD_INT 1
84143: ST_TO_ADDR
// if p3 = 14 then
84144: LD_VAR 0 3
84148: PUSH
84149: LD_INT 14
84151: EQUAL
84152: IFFALSE 84162
// sFlag := true ;
84154: LD_ADDR_EXP 123
84158: PUSH
84159: LD_INT 1
84161: ST_TO_ADDR
// if p3 = 15 then
84162: LD_VAR 0 3
84166: PUSH
84167: LD_INT 15
84169: EQUAL
84170: IFFALSE 84180
// sKamikadze := true ;
84172: LD_ADDR_EXP 131
84176: PUSH
84177: LD_INT 1
84179: ST_TO_ADDR
// if p3 = 16 then
84180: LD_VAR 0 3
84184: PUSH
84185: LD_INT 16
84187: EQUAL
84188: IFFALSE 84198
// sTroll := true ;
84190: LD_ADDR_EXP 132
84194: PUSH
84195: LD_INT 1
84197: ST_TO_ADDR
// if p3 = 17 then
84198: LD_VAR 0 3
84202: PUSH
84203: LD_INT 17
84205: EQUAL
84206: IFFALSE 84216
// sSlow := true ;
84208: LD_ADDR_EXP 133
84212: PUSH
84213: LD_INT 1
84215: ST_TO_ADDR
// if p3 = 18 then
84216: LD_VAR 0 3
84220: PUSH
84221: LD_INT 18
84223: EQUAL
84224: IFFALSE 84234
// sLack := true ;
84226: LD_ADDR_EXP 134
84230: PUSH
84231: LD_INT 1
84233: ST_TO_ADDR
// if p3 = 19 then
84234: LD_VAR 0 3
84238: PUSH
84239: LD_INT 19
84241: EQUAL
84242: IFFALSE 84252
// sTank := true ;
84244: LD_ADDR_EXP 136
84248: PUSH
84249: LD_INT 1
84251: ST_TO_ADDR
// if p3 = 20 then
84252: LD_VAR 0 3
84256: PUSH
84257: LD_INT 20
84259: EQUAL
84260: IFFALSE 84270
// sRemote := true ;
84262: LD_ADDR_EXP 137
84266: PUSH
84267: LD_INT 1
84269: ST_TO_ADDR
// if p3 = 21 then
84270: LD_VAR 0 3
84274: PUSH
84275: LD_INT 21
84277: EQUAL
84278: IFFALSE 84288
// sPowell := true ;
84280: LD_ADDR_EXP 138
84284: PUSH
84285: LD_INT 1
84287: ST_TO_ADDR
// if p3 = 22 then
84288: LD_VAR 0 3
84292: PUSH
84293: LD_INT 22
84295: EQUAL
84296: IFFALSE 84306
// sTeleport := true ;
84298: LD_ADDR_EXP 141
84302: PUSH
84303: LD_INT 1
84305: ST_TO_ADDR
// if p3 = 23 then
84306: LD_VAR 0 3
84310: PUSH
84311: LD_INT 23
84313: EQUAL
84314: IFFALSE 84324
// sOilTower := true ;
84316: LD_ADDR_EXP 143
84320: PUSH
84321: LD_INT 1
84323: ST_TO_ADDR
// if p3 = 24 then
84324: LD_VAR 0 3
84328: PUSH
84329: LD_INT 24
84331: EQUAL
84332: IFFALSE 84342
// sShovel := true ;
84334: LD_ADDR_EXP 144
84338: PUSH
84339: LD_INT 1
84341: ST_TO_ADDR
// if p3 = 25 then
84342: LD_VAR 0 3
84346: PUSH
84347: LD_INT 25
84349: EQUAL
84350: IFFALSE 84360
// sSheik := true ;
84352: LD_ADDR_EXP 145
84356: PUSH
84357: LD_INT 1
84359: ST_TO_ADDR
// if p3 = 26 then
84360: LD_VAR 0 3
84364: PUSH
84365: LD_INT 26
84367: EQUAL
84368: IFFALSE 84378
// sEarthquake := true ;
84370: LD_ADDR_EXP 147
84374: PUSH
84375: LD_INT 1
84377: ST_TO_ADDR
// if p3 = 27 then
84378: LD_VAR 0 3
84382: PUSH
84383: LD_INT 27
84385: EQUAL
84386: IFFALSE 84396
// sAI := true ;
84388: LD_ADDR_EXP 148
84392: PUSH
84393: LD_INT 1
84395: ST_TO_ADDR
// if p3 = 28 then
84396: LD_VAR 0 3
84400: PUSH
84401: LD_INT 28
84403: EQUAL
84404: IFFALSE 84414
// sCargo := true ;
84406: LD_ADDR_EXP 151
84410: PUSH
84411: LD_INT 1
84413: ST_TO_ADDR
// if p3 = 29 then
84414: LD_VAR 0 3
84418: PUSH
84419: LD_INT 29
84421: EQUAL
84422: IFFALSE 84432
// sDLaser := true ;
84424: LD_ADDR_EXP 152
84428: PUSH
84429: LD_INT 1
84431: ST_TO_ADDR
// if p3 = 30 then
84432: LD_VAR 0 3
84436: PUSH
84437: LD_INT 30
84439: EQUAL
84440: IFFALSE 84450
// sExchange := true ;
84442: LD_ADDR_EXP 153
84446: PUSH
84447: LD_INT 1
84449: ST_TO_ADDR
// if p3 = 31 then
84450: LD_VAR 0 3
84454: PUSH
84455: LD_INT 31
84457: EQUAL
84458: IFFALSE 84468
// sFac := true ;
84460: LD_ADDR_EXP 154
84464: PUSH
84465: LD_INT 1
84467: ST_TO_ADDR
// if p3 = 32 then
84468: LD_VAR 0 3
84472: PUSH
84473: LD_INT 32
84475: EQUAL
84476: IFFALSE 84486
// sPower := true ;
84478: LD_ADDR_EXP 155
84482: PUSH
84483: LD_INT 1
84485: ST_TO_ADDR
// if p3 = 33 then
84486: LD_VAR 0 3
84490: PUSH
84491: LD_INT 33
84493: EQUAL
84494: IFFALSE 84504
// sRandom := true ;
84496: LD_ADDR_EXP 156
84500: PUSH
84501: LD_INT 1
84503: ST_TO_ADDR
// if p3 = 34 then
84504: LD_VAR 0 3
84508: PUSH
84509: LD_INT 34
84511: EQUAL
84512: IFFALSE 84522
// sShield := true ;
84514: LD_ADDR_EXP 157
84518: PUSH
84519: LD_INT 1
84521: ST_TO_ADDR
// if p3 = 35 then
84522: LD_VAR 0 3
84526: PUSH
84527: LD_INT 35
84529: EQUAL
84530: IFFALSE 84540
// sTime := true ;
84532: LD_ADDR_EXP 158
84536: PUSH
84537: LD_INT 1
84539: ST_TO_ADDR
// if p3 = 36 then
84540: LD_VAR 0 3
84544: PUSH
84545: LD_INT 36
84547: EQUAL
84548: IFFALSE 84558
// sTools := true ;
84550: LD_ADDR_EXP 159
84554: PUSH
84555: LD_INT 1
84557: ST_TO_ADDR
// if p3 = 101 then
84558: LD_VAR 0 3
84562: PUSH
84563: LD_INT 101
84565: EQUAL
84566: IFFALSE 84576
// sSold := true ;
84568: LD_ADDR_EXP 124
84572: PUSH
84573: LD_INT 1
84575: ST_TO_ADDR
// if p3 = 102 then
84576: LD_VAR 0 3
84580: PUSH
84581: LD_INT 102
84583: EQUAL
84584: IFFALSE 84594
// sDiff := true ;
84586: LD_ADDR_EXP 125
84590: PUSH
84591: LD_INT 1
84593: ST_TO_ADDR
// if p3 = 103 then
84594: LD_VAR 0 3
84598: PUSH
84599: LD_INT 103
84601: EQUAL
84602: IFFALSE 84612
// sFog := true ;
84604: LD_ADDR_EXP 128
84608: PUSH
84609: LD_INT 1
84611: ST_TO_ADDR
// if p3 = 104 then
84612: LD_VAR 0 3
84616: PUSH
84617: LD_INT 104
84619: EQUAL
84620: IFFALSE 84630
// sReset := true ;
84622: LD_ADDR_EXP 129
84626: PUSH
84627: LD_INT 1
84629: ST_TO_ADDR
// if p3 = 105 then
84630: LD_VAR 0 3
84634: PUSH
84635: LD_INT 105
84637: EQUAL
84638: IFFALSE 84648
// sSun := true ;
84640: LD_ADDR_EXP 130
84644: PUSH
84645: LD_INT 1
84647: ST_TO_ADDR
// if p3 = 106 then
84648: LD_VAR 0 3
84652: PUSH
84653: LD_INT 106
84655: EQUAL
84656: IFFALSE 84666
// sTiger := true ;
84658: LD_ADDR_EXP 126
84662: PUSH
84663: LD_INT 1
84665: ST_TO_ADDR
// if p3 = 107 then
84666: LD_VAR 0 3
84670: PUSH
84671: LD_INT 107
84673: EQUAL
84674: IFFALSE 84684
// sBomb := true ;
84676: LD_ADDR_EXP 127
84680: PUSH
84681: LD_INT 1
84683: ST_TO_ADDR
// if p3 = 108 then
84684: LD_VAR 0 3
84688: PUSH
84689: LD_INT 108
84691: EQUAL
84692: IFFALSE 84702
// sWound := true ;
84694: LD_ADDR_EXP 135
84698: PUSH
84699: LD_INT 1
84701: ST_TO_ADDR
// if p3 = 109 then
84702: LD_VAR 0 3
84706: PUSH
84707: LD_INT 109
84709: EQUAL
84710: IFFALSE 84720
// sBetray := true ;
84712: LD_ADDR_EXP 139
84716: PUSH
84717: LD_INT 1
84719: ST_TO_ADDR
// if p3 = 110 then
84720: LD_VAR 0 3
84724: PUSH
84725: LD_INT 110
84727: EQUAL
84728: IFFALSE 84738
// sContamin := true ;
84730: LD_ADDR_EXP 140
84734: PUSH
84735: LD_INT 1
84737: ST_TO_ADDR
// if p3 = 111 then
84738: LD_VAR 0 3
84742: PUSH
84743: LD_INT 111
84745: EQUAL
84746: IFFALSE 84756
// sOil := true ;
84748: LD_ADDR_EXP 142
84752: PUSH
84753: LD_INT 1
84755: ST_TO_ADDR
// if p3 = 112 then
84756: LD_VAR 0 3
84760: PUSH
84761: LD_INT 112
84763: EQUAL
84764: IFFALSE 84774
// sStu := true ;
84766: LD_ADDR_EXP 146
84770: PUSH
84771: LD_INT 1
84773: ST_TO_ADDR
// if p3 = 113 then
84774: LD_VAR 0 3
84778: PUSH
84779: LD_INT 113
84781: EQUAL
84782: IFFALSE 84792
// sBazooka := true ;
84784: LD_ADDR_EXP 149
84788: PUSH
84789: LD_INT 1
84791: ST_TO_ADDR
// if p3 = 114 then
84792: LD_VAR 0 3
84796: PUSH
84797: LD_INT 114
84799: EQUAL
84800: IFFALSE 84810
// sMortar := true ;
84802: LD_ADDR_EXP 150
84806: PUSH
84807: LD_INT 1
84809: ST_TO_ADDR
// if p3 = 115 then
84810: LD_VAR 0 3
84814: PUSH
84815: LD_INT 115
84817: EQUAL
84818: IFFALSE 84828
// sRanger := true ;
84820: LD_ADDR_EXP 160
84824: PUSH
84825: LD_INT 1
84827: ST_TO_ADDR
// end ; end ;
84828: PPOPN 6
84830: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
84831: LD_EXP 107
84835: PUSH
84836: LD_EXP 112
84840: AND
84841: IFFALSE 84965
84843: GO 84845
84845: DISABLE
84846: LD_INT 0
84848: PPUSH
84849: PPUSH
// begin enable ;
84850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
84851: LD_ADDR_VAR 0 2
84855: PUSH
84856: LD_INT 22
84858: PUSH
84859: LD_OWVAR 2
84863: PUSH
84864: EMPTY
84865: LIST
84866: LIST
84867: PUSH
84868: LD_INT 2
84870: PUSH
84871: LD_INT 34
84873: PUSH
84874: LD_INT 7
84876: PUSH
84877: EMPTY
84878: LIST
84879: LIST
84880: PUSH
84881: LD_INT 34
84883: PUSH
84884: LD_INT 45
84886: PUSH
84887: EMPTY
84888: LIST
84889: LIST
84890: PUSH
84891: LD_INT 34
84893: PUSH
84894: LD_INT 28
84896: PUSH
84897: EMPTY
84898: LIST
84899: LIST
84900: PUSH
84901: LD_INT 34
84903: PUSH
84904: LD_INT 47
84906: PUSH
84907: EMPTY
84908: LIST
84909: LIST
84910: PUSH
84911: EMPTY
84912: LIST
84913: LIST
84914: LIST
84915: LIST
84916: LIST
84917: PUSH
84918: EMPTY
84919: LIST
84920: LIST
84921: PPUSH
84922: CALL_OW 69
84926: ST_TO_ADDR
// if not tmp then
84927: LD_VAR 0 2
84931: NOT
84932: IFFALSE 84936
// exit ;
84934: GO 84965
// for i in tmp do
84936: LD_ADDR_VAR 0 1
84940: PUSH
84941: LD_VAR 0 2
84945: PUSH
84946: FOR_IN
84947: IFFALSE 84963
// begin SetLives ( i , 0 ) ;
84949: LD_VAR 0 1
84953: PPUSH
84954: LD_INT 0
84956: PPUSH
84957: CALL_OW 234
// end ;
84961: GO 84946
84963: POP
84964: POP
// end ;
84965: PPOPN 2
84967: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
84968: LD_EXP 107
84972: PUSH
84973: LD_EXP 113
84977: AND
84978: IFFALSE 85062
84980: GO 84982
84982: DISABLE
84983: LD_INT 0
84985: PPUSH
84986: PPUSH
// begin enable ;
84987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
84988: LD_ADDR_VAR 0 2
84992: PUSH
84993: LD_INT 22
84995: PUSH
84996: LD_OWVAR 2
85000: PUSH
85001: EMPTY
85002: LIST
85003: LIST
85004: PUSH
85005: LD_INT 32
85007: PUSH
85008: LD_INT 3
85010: PUSH
85011: EMPTY
85012: LIST
85013: LIST
85014: PUSH
85015: EMPTY
85016: LIST
85017: LIST
85018: PPUSH
85019: CALL_OW 69
85023: ST_TO_ADDR
// if not tmp then
85024: LD_VAR 0 2
85028: NOT
85029: IFFALSE 85033
// exit ;
85031: GO 85062
// for i in tmp do
85033: LD_ADDR_VAR 0 1
85037: PUSH
85038: LD_VAR 0 2
85042: PUSH
85043: FOR_IN
85044: IFFALSE 85060
// begin SetLives ( i , 0 ) ;
85046: LD_VAR 0 1
85050: PPUSH
85051: LD_INT 0
85053: PPUSH
85054: CALL_OW 234
// end ;
85058: GO 85043
85060: POP
85061: POP
// end ;
85062: PPOPN 2
85064: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
85065: LD_EXP 107
85069: PUSH
85070: LD_EXP 110
85074: AND
85075: IFFALSE 85168
85077: GO 85079
85079: DISABLE
85080: LD_INT 0
85082: PPUSH
// begin enable ;
85083: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
85084: LD_ADDR_VAR 0 1
85088: PUSH
85089: LD_INT 22
85091: PUSH
85092: LD_OWVAR 2
85096: PUSH
85097: EMPTY
85098: LIST
85099: LIST
85100: PUSH
85101: LD_INT 2
85103: PUSH
85104: LD_INT 25
85106: PUSH
85107: LD_INT 5
85109: PUSH
85110: EMPTY
85111: LIST
85112: LIST
85113: PUSH
85114: LD_INT 25
85116: PUSH
85117: LD_INT 9
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: PUSH
85124: LD_INT 25
85126: PUSH
85127: LD_INT 8
85129: PUSH
85130: EMPTY
85131: LIST
85132: LIST
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: LIST
85138: LIST
85139: PUSH
85140: EMPTY
85141: LIST
85142: LIST
85143: PPUSH
85144: CALL_OW 69
85148: PUSH
85149: FOR_IN
85150: IFFALSE 85166
// begin SetClass ( i , 1 ) ;
85152: LD_VAR 0 1
85156: PPUSH
85157: LD_INT 1
85159: PPUSH
85160: CALL_OW 336
// end ;
85164: GO 85149
85166: POP
85167: POP
// end ;
85168: PPOPN 1
85170: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
85171: LD_EXP 107
85175: PUSH
85176: LD_EXP 111
85180: AND
85181: PUSH
85182: LD_OWVAR 65
85186: PUSH
85187: LD_INT 7
85189: LESS
85190: AND
85191: IFFALSE 85205
85193: GO 85195
85195: DISABLE
// begin enable ;
85196: ENABLE
// game_speed := 7 ;
85197: LD_ADDR_OWVAR 65
85201: PUSH
85202: LD_INT 7
85204: ST_TO_ADDR
// end ;
85205: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
85206: LD_EXP 107
85210: PUSH
85211: LD_EXP 114
85215: AND
85216: IFFALSE 85418
85218: GO 85220
85220: DISABLE
85221: LD_INT 0
85223: PPUSH
85224: PPUSH
85225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85226: LD_ADDR_VAR 0 3
85230: PUSH
85231: LD_INT 81
85233: PUSH
85234: LD_OWVAR 2
85238: PUSH
85239: EMPTY
85240: LIST
85241: LIST
85242: PUSH
85243: LD_INT 21
85245: PUSH
85246: LD_INT 1
85248: PUSH
85249: EMPTY
85250: LIST
85251: LIST
85252: PUSH
85253: EMPTY
85254: LIST
85255: LIST
85256: PPUSH
85257: CALL_OW 69
85261: ST_TO_ADDR
// if not tmp then
85262: LD_VAR 0 3
85266: NOT
85267: IFFALSE 85271
// exit ;
85269: GO 85418
// if tmp > 5 then
85271: LD_VAR 0 3
85275: PUSH
85276: LD_INT 5
85278: GREATER
85279: IFFALSE 85291
// k := 5 else
85281: LD_ADDR_VAR 0 2
85285: PUSH
85286: LD_INT 5
85288: ST_TO_ADDR
85289: GO 85301
// k := tmp ;
85291: LD_ADDR_VAR 0 2
85295: PUSH
85296: LD_VAR 0 3
85300: ST_TO_ADDR
// for i := 1 to k do
85301: LD_ADDR_VAR 0 1
85305: PUSH
85306: DOUBLE
85307: LD_INT 1
85309: DEC
85310: ST_TO_ADDR
85311: LD_VAR 0 2
85315: PUSH
85316: FOR_TO
85317: IFFALSE 85416
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
85319: LD_VAR 0 3
85323: PUSH
85324: LD_VAR 0 1
85328: ARRAY
85329: PPUSH
85330: LD_VAR 0 1
85334: PUSH
85335: LD_INT 4
85337: MOD
85338: PUSH
85339: LD_INT 1
85341: PLUS
85342: PPUSH
85343: CALL_OW 259
85347: PUSH
85348: LD_INT 10
85350: LESS
85351: IFFALSE 85414
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
85353: LD_VAR 0 3
85357: PUSH
85358: LD_VAR 0 1
85362: ARRAY
85363: PPUSH
85364: LD_VAR 0 1
85368: PUSH
85369: LD_INT 4
85371: MOD
85372: PUSH
85373: LD_INT 1
85375: PLUS
85376: PPUSH
85377: LD_VAR 0 3
85381: PUSH
85382: LD_VAR 0 1
85386: ARRAY
85387: PPUSH
85388: LD_VAR 0 1
85392: PUSH
85393: LD_INT 4
85395: MOD
85396: PUSH
85397: LD_INT 1
85399: PLUS
85400: PPUSH
85401: CALL_OW 259
85405: PUSH
85406: LD_INT 1
85408: PLUS
85409: PPUSH
85410: CALL_OW 237
85414: GO 85316
85416: POP
85417: POP
// end ;
85418: PPOPN 3
85420: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
85421: LD_EXP 107
85425: PUSH
85426: LD_EXP 115
85430: AND
85431: IFFALSE 85451
85433: GO 85435
85435: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
85436: LD_INT 4
85438: PPUSH
85439: LD_OWVAR 2
85443: PPUSH
85444: LD_INT 0
85446: PPUSH
85447: CALL_OW 324
85451: END
// every 0 0$1 trigger StreamModeActive and sShovel do
85452: LD_EXP 107
85456: PUSH
85457: LD_EXP 144
85461: AND
85462: IFFALSE 85482
85464: GO 85466
85466: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
85467: LD_INT 19
85469: PPUSH
85470: LD_OWVAR 2
85474: PPUSH
85475: LD_INT 0
85477: PPUSH
85478: CALL_OW 324
85482: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
85483: LD_EXP 107
85487: PUSH
85488: LD_EXP 116
85492: AND
85493: IFFALSE 85595
85495: GO 85497
85497: DISABLE
85498: LD_INT 0
85500: PPUSH
85501: PPUSH
// begin enable ;
85502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
85503: LD_ADDR_VAR 0 2
85507: PUSH
85508: LD_INT 22
85510: PUSH
85511: LD_OWVAR 2
85515: PUSH
85516: EMPTY
85517: LIST
85518: LIST
85519: PUSH
85520: LD_INT 2
85522: PUSH
85523: LD_INT 34
85525: PUSH
85526: LD_INT 11
85528: PUSH
85529: EMPTY
85530: LIST
85531: LIST
85532: PUSH
85533: LD_INT 34
85535: PUSH
85536: LD_INT 30
85538: PUSH
85539: EMPTY
85540: LIST
85541: LIST
85542: PUSH
85543: EMPTY
85544: LIST
85545: LIST
85546: LIST
85547: PUSH
85548: EMPTY
85549: LIST
85550: LIST
85551: PPUSH
85552: CALL_OW 69
85556: ST_TO_ADDR
// if not tmp then
85557: LD_VAR 0 2
85561: NOT
85562: IFFALSE 85566
// exit ;
85564: GO 85595
// for i in tmp do
85566: LD_ADDR_VAR 0 1
85570: PUSH
85571: LD_VAR 0 2
85575: PUSH
85576: FOR_IN
85577: IFFALSE 85593
// begin SetLives ( i , 0 ) ;
85579: LD_VAR 0 1
85583: PPUSH
85584: LD_INT 0
85586: PPUSH
85587: CALL_OW 234
// end ;
85591: GO 85576
85593: POP
85594: POP
// end ;
85595: PPOPN 2
85597: END
// every 0 0$1 trigger StreamModeActive and sBunker do
85598: LD_EXP 107
85602: PUSH
85603: LD_EXP 117
85607: AND
85608: IFFALSE 85628
85610: GO 85612
85612: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
85613: LD_INT 32
85615: PPUSH
85616: LD_OWVAR 2
85620: PPUSH
85621: LD_INT 0
85623: PPUSH
85624: CALL_OW 324
85628: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
85629: LD_EXP 107
85633: PUSH
85634: LD_EXP 118
85638: AND
85639: IFFALSE 85820
85641: GO 85643
85643: DISABLE
85644: LD_INT 0
85646: PPUSH
85647: PPUSH
85648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
85649: LD_ADDR_VAR 0 2
85653: PUSH
85654: LD_INT 22
85656: PUSH
85657: LD_OWVAR 2
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 33
85668: PUSH
85669: LD_INT 3
85671: PUSH
85672: EMPTY
85673: LIST
85674: LIST
85675: PUSH
85676: EMPTY
85677: LIST
85678: LIST
85679: PPUSH
85680: CALL_OW 69
85684: ST_TO_ADDR
// if not tmp then
85685: LD_VAR 0 2
85689: NOT
85690: IFFALSE 85694
// exit ;
85692: GO 85820
// side := 0 ;
85694: LD_ADDR_VAR 0 3
85698: PUSH
85699: LD_INT 0
85701: ST_TO_ADDR
// for i := 1 to 8 do
85702: LD_ADDR_VAR 0 1
85706: PUSH
85707: DOUBLE
85708: LD_INT 1
85710: DEC
85711: ST_TO_ADDR
85712: LD_INT 8
85714: PUSH
85715: FOR_TO
85716: IFFALSE 85764
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
85718: LD_OWVAR 2
85722: PUSH
85723: LD_VAR 0 1
85727: NONEQUAL
85728: PUSH
85729: LD_OWVAR 2
85733: PPUSH
85734: LD_VAR 0 1
85738: PPUSH
85739: CALL_OW 81
85743: PUSH
85744: LD_INT 2
85746: EQUAL
85747: AND
85748: IFFALSE 85762
// begin side := i ;
85750: LD_ADDR_VAR 0 3
85754: PUSH
85755: LD_VAR 0 1
85759: ST_TO_ADDR
// break ;
85760: GO 85764
// end ;
85762: GO 85715
85764: POP
85765: POP
// if not side then
85766: LD_VAR 0 3
85770: NOT
85771: IFFALSE 85775
// exit ;
85773: GO 85820
// for i := 1 to tmp do
85775: LD_ADDR_VAR 0 1
85779: PUSH
85780: DOUBLE
85781: LD_INT 1
85783: DEC
85784: ST_TO_ADDR
85785: LD_VAR 0 2
85789: PUSH
85790: FOR_TO
85791: IFFALSE 85818
// if Prob ( 60 ) then
85793: LD_INT 60
85795: PPUSH
85796: CALL_OW 13
85800: IFFALSE 85816
// SetSide ( i , side ) ;
85802: LD_VAR 0 1
85806: PPUSH
85807: LD_VAR 0 3
85811: PPUSH
85812: CALL_OW 235
85816: GO 85790
85818: POP
85819: POP
// end ;
85820: PPOPN 3
85822: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
85823: LD_EXP 107
85827: PUSH
85828: LD_EXP 120
85832: AND
85833: IFFALSE 85952
85835: GO 85837
85837: DISABLE
85838: LD_INT 0
85840: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
85841: LD_ADDR_VAR 0 1
85845: PUSH
85846: LD_INT 22
85848: PUSH
85849: LD_OWVAR 2
85853: PUSH
85854: EMPTY
85855: LIST
85856: LIST
85857: PUSH
85858: LD_INT 21
85860: PUSH
85861: LD_INT 1
85863: PUSH
85864: EMPTY
85865: LIST
85866: LIST
85867: PUSH
85868: LD_INT 3
85870: PUSH
85871: LD_INT 23
85873: PUSH
85874: LD_INT 0
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: EMPTY
85882: LIST
85883: LIST
85884: PUSH
85885: EMPTY
85886: LIST
85887: LIST
85888: LIST
85889: PPUSH
85890: CALL_OW 69
85894: PUSH
85895: FOR_IN
85896: IFFALSE 85950
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
85898: LD_VAR 0 1
85902: PPUSH
85903: CALL_OW 257
85907: PUSH
85908: LD_INT 1
85910: PUSH
85911: LD_INT 2
85913: PUSH
85914: LD_INT 3
85916: PUSH
85917: LD_INT 4
85919: PUSH
85920: EMPTY
85921: LIST
85922: LIST
85923: LIST
85924: LIST
85925: IN
85926: IFFALSE 85948
// SetClass ( un , rand ( 1 , 4 ) ) ;
85928: LD_VAR 0 1
85932: PPUSH
85933: LD_INT 1
85935: PPUSH
85936: LD_INT 4
85938: PPUSH
85939: CALL_OW 12
85943: PPUSH
85944: CALL_OW 336
85948: GO 85895
85950: POP
85951: POP
// end ;
85952: PPOPN 1
85954: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
85955: LD_EXP 107
85959: PUSH
85960: LD_EXP 119
85964: AND
85965: IFFALSE 86044
85967: GO 85969
85969: DISABLE
85970: LD_INT 0
85972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
85973: LD_ADDR_VAR 0 1
85977: PUSH
85978: LD_INT 22
85980: PUSH
85981: LD_OWVAR 2
85985: PUSH
85986: EMPTY
85987: LIST
85988: LIST
85989: PUSH
85990: LD_INT 21
85992: PUSH
85993: LD_INT 3
85995: PUSH
85996: EMPTY
85997: LIST
85998: LIST
85999: PUSH
86000: EMPTY
86001: LIST
86002: LIST
86003: PPUSH
86004: CALL_OW 69
86008: ST_TO_ADDR
// if not tmp then
86009: LD_VAR 0 1
86013: NOT
86014: IFFALSE 86018
// exit ;
86016: GO 86044
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
86018: LD_VAR 0 1
86022: PUSH
86023: LD_INT 1
86025: PPUSH
86026: LD_VAR 0 1
86030: PPUSH
86031: CALL_OW 12
86035: ARRAY
86036: PPUSH
86037: LD_INT 100
86039: PPUSH
86040: CALL_OW 234
// end ;
86044: PPOPN 1
86046: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
86047: LD_EXP 107
86051: PUSH
86052: LD_EXP 121
86056: AND
86057: IFFALSE 86155
86059: GO 86061
86061: DISABLE
86062: LD_INT 0
86064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
86065: LD_ADDR_VAR 0 1
86069: PUSH
86070: LD_INT 22
86072: PUSH
86073: LD_OWVAR 2
86077: PUSH
86078: EMPTY
86079: LIST
86080: LIST
86081: PUSH
86082: LD_INT 21
86084: PUSH
86085: LD_INT 1
86087: PUSH
86088: EMPTY
86089: LIST
86090: LIST
86091: PUSH
86092: EMPTY
86093: LIST
86094: LIST
86095: PPUSH
86096: CALL_OW 69
86100: ST_TO_ADDR
// if not tmp then
86101: LD_VAR 0 1
86105: NOT
86106: IFFALSE 86110
// exit ;
86108: GO 86155
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
86110: LD_VAR 0 1
86114: PUSH
86115: LD_INT 1
86117: PPUSH
86118: LD_VAR 0 1
86122: PPUSH
86123: CALL_OW 12
86127: ARRAY
86128: PPUSH
86129: LD_INT 1
86131: PPUSH
86132: LD_INT 4
86134: PPUSH
86135: CALL_OW 12
86139: PPUSH
86140: LD_INT 3000
86142: PPUSH
86143: LD_INT 9000
86145: PPUSH
86146: CALL_OW 12
86150: PPUSH
86151: CALL_OW 492
// end ;
86155: PPOPN 1
86157: END
// every 0 0$1 trigger StreamModeActive and sDepot do
86158: LD_EXP 107
86162: PUSH
86163: LD_EXP 122
86167: AND
86168: IFFALSE 86188
86170: GO 86172
86172: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
86173: LD_INT 1
86175: PPUSH
86176: LD_OWVAR 2
86180: PPUSH
86181: LD_INT 0
86183: PPUSH
86184: CALL_OW 324
86188: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
86189: LD_EXP 107
86193: PUSH
86194: LD_EXP 123
86198: AND
86199: IFFALSE 86282
86201: GO 86203
86203: DISABLE
86204: LD_INT 0
86206: PPUSH
86207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86208: LD_ADDR_VAR 0 2
86212: PUSH
86213: LD_INT 22
86215: PUSH
86216: LD_OWVAR 2
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: PUSH
86225: LD_INT 21
86227: PUSH
86228: LD_INT 3
86230: PUSH
86231: EMPTY
86232: LIST
86233: LIST
86234: PUSH
86235: EMPTY
86236: LIST
86237: LIST
86238: PPUSH
86239: CALL_OW 69
86243: ST_TO_ADDR
// if not tmp then
86244: LD_VAR 0 2
86248: NOT
86249: IFFALSE 86253
// exit ;
86251: GO 86282
// for i in tmp do
86253: LD_ADDR_VAR 0 1
86257: PUSH
86258: LD_VAR 0 2
86262: PUSH
86263: FOR_IN
86264: IFFALSE 86280
// SetBLevel ( i , 10 ) ;
86266: LD_VAR 0 1
86270: PPUSH
86271: LD_INT 10
86273: PPUSH
86274: CALL_OW 241
86278: GO 86263
86280: POP
86281: POP
// end ;
86282: PPOPN 2
86284: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
86285: LD_EXP 107
86289: PUSH
86290: LD_EXP 124
86294: AND
86295: IFFALSE 86406
86297: GO 86299
86299: DISABLE
86300: LD_INT 0
86302: PPUSH
86303: PPUSH
86304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86305: LD_ADDR_VAR 0 3
86309: PUSH
86310: LD_INT 22
86312: PUSH
86313: LD_OWVAR 2
86317: PUSH
86318: EMPTY
86319: LIST
86320: LIST
86321: PUSH
86322: LD_INT 25
86324: PUSH
86325: LD_INT 1
86327: PUSH
86328: EMPTY
86329: LIST
86330: LIST
86331: PUSH
86332: EMPTY
86333: LIST
86334: LIST
86335: PPUSH
86336: CALL_OW 69
86340: ST_TO_ADDR
// if not tmp then
86341: LD_VAR 0 3
86345: NOT
86346: IFFALSE 86350
// exit ;
86348: GO 86406
// un := tmp [ rand ( 1 , tmp ) ] ;
86350: LD_ADDR_VAR 0 2
86354: PUSH
86355: LD_VAR 0 3
86359: PUSH
86360: LD_INT 1
86362: PPUSH
86363: LD_VAR 0 3
86367: PPUSH
86368: CALL_OW 12
86372: ARRAY
86373: ST_TO_ADDR
// if Crawls ( un ) then
86374: LD_VAR 0 2
86378: PPUSH
86379: CALL_OW 318
86383: IFFALSE 86394
// ComWalk ( un ) ;
86385: LD_VAR 0 2
86389: PPUSH
86390: CALL_OW 138
// SetClass ( un , class_sniper ) ;
86394: LD_VAR 0 2
86398: PPUSH
86399: LD_INT 5
86401: PPUSH
86402: CALL_OW 336
// end ;
86406: PPOPN 3
86408: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
86409: LD_EXP 107
86413: PUSH
86414: LD_EXP 125
86418: AND
86419: PUSH
86420: LD_OWVAR 67
86424: PUSH
86425: LD_INT 3
86427: LESS
86428: AND
86429: IFFALSE 86448
86431: GO 86433
86433: DISABLE
// Difficulty := Difficulty + 1 ;
86434: LD_ADDR_OWVAR 67
86438: PUSH
86439: LD_OWVAR 67
86443: PUSH
86444: LD_INT 1
86446: PLUS
86447: ST_TO_ADDR
86448: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
86449: LD_EXP 107
86453: PUSH
86454: LD_EXP 126
86458: AND
86459: IFFALSE 86562
86461: GO 86463
86463: DISABLE
86464: LD_INT 0
86466: PPUSH
// begin for i := 1 to 5 do
86467: LD_ADDR_VAR 0 1
86471: PUSH
86472: DOUBLE
86473: LD_INT 1
86475: DEC
86476: ST_TO_ADDR
86477: LD_INT 5
86479: PUSH
86480: FOR_TO
86481: IFFALSE 86560
// begin uc_nation := nation_nature ;
86483: LD_ADDR_OWVAR 21
86487: PUSH
86488: LD_INT 0
86490: ST_TO_ADDR
// uc_side := 0 ;
86491: LD_ADDR_OWVAR 20
86495: PUSH
86496: LD_INT 0
86498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86499: LD_ADDR_OWVAR 29
86503: PUSH
86504: LD_INT 12
86506: PUSH
86507: LD_INT 12
86509: PUSH
86510: EMPTY
86511: LIST
86512: LIST
86513: ST_TO_ADDR
// hc_agressivity := 20 ;
86514: LD_ADDR_OWVAR 35
86518: PUSH
86519: LD_INT 20
86521: ST_TO_ADDR
// hc_class := class_tiger ;
86522: LD_ADDR_OWVAR 28
86526: PUSH
86527: LD_INT 14
86529: ST_TO_ADDR
// hc_gallery :=  ;
86530: LD_ADDR_OWVAR 33
86534: PUSH
86535: LD_STRING 
86537: ST_TO_ADDR
// hc_name :=  ;
86538: LD_ADDR_OWVAR 26
86542: PUSH
86543: LD_STRING 
86545: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
86546: CALL_OW 44
86550: PPUSH
86551: LD_INT 0
86553: PPUSH
86554: CALL_OW 51
// end ;
86558: GO 86480
86560: POP
86561: POP
// end ;
86562: PPOPN 1
86564: END
// every 0 0$1 trigger StreamModeActive and sBomb do
86565: LD_EXP 107
86569: PUSH
86570: LD_EXP 127
86574: AND
86575: IFFALSE 86584
86577: GO 86579
86579: DISABLE
// StreamSibBomb ;
86580: CALL 86585 0 0
86584: END
// export function StreamSibBomb ; var i , x , y ; begin
86585: LD_INT 0
86587: PPUSH
86588: PPUSH
86589: PPUSH
86590: PPUSH
// result := false ;
86591: LD_ADDR_VAR 0 1
86595: PUSH
86596: LD_INT 0
86598: ST_TO_ADDR
// for i := 1 to 16 do
86599: LD_ADDR_VAR 0 2
86603: PUSH
86604: DOUBLE
86605: LD_INT 1
86607: DEC
86608: ST_TO_ADDR
86609: LD_INT 16
86611: PUSH
86612: FOR_TO
86613: IFFALSE 86812
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86615: LD_ADDR_VAR 0 3
86619: PUSH
86620: LD_INT 10
86622: PUSH
86623: LD_INT 20
86625: PUSH
86626: LD_INT 30
86628: PUSH
86629: LD_INT 40
86631: PUSH
86632: LD_INT 50
86634: PUSH
86635: LD_INT 60
86637: PUSH
86638: LD_INT 70
86640: PUSH
86641: LD_INT 80
86643: PUSH
86644: LD_INT 90
86646: PUSH
86647: LD_INT 100
86649: PUSH
86650: LD_INT 110
86652: PUSH
86653: LD_INT 120
86655: PUSH
86656: LD_INT 130
86658: PUSH
86659: LD_INT 140
86661: PUSH
86662: LD_INT 150
86664: PUSH
86665: EMPTY
86666: LIST
86667: LIST
86668: LIST
86669: LIST
86670: LIST
86671: LIST
86672: LIST
86673: LIST
86674: LIST
86675: LIST
86676: LIST
86677: LIST
86678: LIST
86679: LIST
86680: LIST
86681: PUSH
86682: LD_INT 1
86684: PPUSH
86685: LD_INT 15
86687: PPUSH
86688: CALL_OW 12
86692: ARRAY
86693: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86694: LD_ADDR_VAR 0 4
86698: PUSH
86699: LD_INT 10
86701: PUSH
86702: LD_INT 20
86704: PUSH
86705: LD_INT 30
86707: PUSH
86708: LD_INT 40
86710: PUSH
86711: LD_INT 50
86713: PUSH
86714: LD_INT 60
86716: PUSH
86717: LD_INT 70
86719: PUSH
86720: LD_INT 80
86722: PUSH
86723: LD_INT 90
86725: PUSH
86726: LD_INT 100
86728: PUSH
86729: LD_INT 110
86731: PUSH
86732: LD_INT 120
86734: PUSH
86735: LD_INT 130
86737: PUSH
86738: LD_INT 140
86740: PUSH
86741: LD_INT 150
86743: PUSH
86744: EMPTY
86745: LIST
86746: LIST
86747: LIST
86748: LIST
86749: LIST
86750: LIST
86751: LIST
86752: LIST
86753: LIST
86754: LIST
86755: LIST
86756: LIST
86757: LIST
86758: LIST
86759: LIST
86760: PUSH
86761: LD_INT 1
86763: PPUSH
86764: LD_INT 15
86766: PPUSH
86767: CALL_OW 12
86771: ARRAY
86772: ST_TO_ADDR
// if ValidHex ( x , y ) then
86773: LD_VAR 0 3
86777: PPUSH
86778: LD_VAR 0 4
86782: PPUSH
86783: CALL_OW 488
86787: IFFALSE 86810
// begin result := [ x , y ] ;
86789: LD_ADDR_VAR 0 1
86793: PUSH
86794: LD_VAR 0 3
86798: PUSH
86799: LD_VAR 0 4
86803: PUSH
86804: EMPTY
86805: LIST
86806: LIST
86807: ST_TO_ADDR
// break ;
86808: GO 86812
// end ; end ;
86810: GO 86612
86812: POP
86813: POP
// if result then
86814: LD_VAR 0 1
86818: IFFALSE 86878
// begin ToLua ( playSibBomb() ) ;
86820: LD_STRING playSibBomb()
86822: PPUSH
86823: CALL_OW 559
// wait ( 0 0$14 ) ;
86827: LD_INT 490
86829: PPUSH
86830: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
86834: LD_VAR 0 1
86838: PUSH
86839: LD_INT 1
86841: ARRAY
86842: PPUSH
86843: LD_VAR 0 1
86847: PUSH
86848: LD_INT 2
86850: ARRAY
86851: PPUSH
86852: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
86856: LD_VAR 0 1
86860: PUSH
86861: LD_INT 1
86863: ARRAY
86864: PPUSH
86865: LD_VAR 0 1
86869: PUSH
86870: LD_INT 2
86872: ARRAY
86873: PPUSH
86874: CALL_OW 429
// end ; end ;
86878: LD_VAR 0 1
86882: RET
// every 0 0$1 trigger StreamModeActive and sReset do
86883: LD_EXP 107
86887: PUSH
86888: LD_EXP 129
86892: AND
86893: IFFALSE 86905
86895: GO 86897
86897: DISABLE
// YouLost (  ) ;
86898: LD_STRING 
86900: PPUSH
86901: CALL_OW 104
86905: END
// every 0 0$1 trigger StreamModeActive and sFog do
86906: LD_EXP 107
86910: PUSH
86911: LD_EXP 128
86915: AND
86916: IFFALSE 86930
86918: GO 86920
86920: DISABLE
// FogOff ( your_side ) ;
86921: LD_OWVAR 2
86925: PPUSH
86926: CALL_OW 344
86930: END
// every 0 0$1 trigger StreamModeActive and sSun do
86931: LD_EXP 107
86935: PUSH
86936: LD_EXP 130
86940: AND
86941: IFFALSE 86969
86943: GO 86945
86945: DISABLE
// begin solar_recharge_percent := 0 ;
86946: LD_ADDR_OWVAR 79
86950: PUSH
86951: LD_INT 0
86953: ST_TO_ADDR
// wait ( 5 5$00 ) ;
86954: LD_INT 10500
86956: PPUSH
86957: CALL_OW 67
// solar_recharge_percent := 100 ;
86961: LD_ADDR_OWVAR 79
86965: PUSH
86966: LD_INT 100
86968: ST_TO_ADDR
// end ;
86969: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
86970: LD_EXP 107
86974: PUSH
86975: LD_EXP 131
86979: AND
86980: IFFALSE 87219
86982: GO 86984
86984: DISABLE
86985: LD_INT 0
86987: PPUSH
86988: PPUSH
86989: PPUSH
// begin tmp := [ ] ;
86990: LD_ADDR_VAR 0 3
86994: PUSH
86995: EMPTY
86996: ST_TO_ADDR
// for i := 1 to 6 do
86997: LD_ADDR_VAR 0 1
87001: PUSH
87002: DOUBLE
87003: LD_INT 1
87005: DEC
87006: ST_TO_ADDR
87007: LD_INT 6
87009: PUSH
87010: FOR_TO
87011: IFFALSE 87116
// begin uc_nation := nation_nature ;
87013: LD_ADDR_OWVAR 21
87017: PUSH
87018: LD_INT 0
87020: ST_TO_ADDR
// uc_side := 0 ;
87021: LD_ADDR_OWVAR 20
87025: PUSH
87026: LD_INT 0
87028: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
87029: LD_ADDR_OWVAR 29
87033: PUSH
87034: LD_INT 12
87036: PUSH
87037: LD_INT 12
87039: PUSH
87040: EMPTY
87041: LIST
87042: LIST
87043: ST_TO_ADDR
// hc_agressivity := 20 ;
87044: LD_ADDR_OWVAR 35
87048: PUSH
87049: LD_INT 20
87051: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
87052: LD_ADDR_OWVAR 28
87056: PUSH
87057: LD_INT 17
87059: ST_TO_ADDR
// hc_gallery :=  ;
87060: LD_ADDR_OWVAR 33
87064: PUSH
87065: LD_STRING 
87067: ST_TO_ADDR
// hc_name :=  ;
87068: LD_ADDR_OWVAR 26
87072: PUSH
87073: LD_STRING 
87075: ST_TO_ADDR
// un := CreateHuman ;
87076: LD_ADDR_VAR 0 2
87080: PUSH
87081: CALL_OW 44
87085: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
87086: LD_VAR 0 2
87090: PPUSH
87091: LD_INT 1
87093: PPUSH
87094: CALL_OW 51
// tmp := tmp ^ un ;
87098: LD_ADDR_VAR 0 3
87102: PUSH
87103: LD_VAR 0 3
87107: PUSH
87108: LD_VAR 0 2
87112: ADD
87113: ST_TO_ADDR
// end ;
87114: GO 87010
87116: POP
87117: POP
// repeat wait ( 0 0$1 ) ;
87118: LD_INT 35
87120: PPUSH
87121: CALL_OW 67
// for un in tmp do
87125: LD_ADDR_VAR 0 2
87129: PUSH
87130: LD_VAR 0 3
87134: PUSH
87135: FOR_IN
87136: IFFALSE 87210
// begin if IsDead ( un ) then
87138: LD_VAR 0 2
87142: PPUSH
87143: CALL_OW 301
87147: IFFALSE 87167
// begin tmp := tmp diff un ;
87149: LD_ADDR_VAR 0 3
87153: PUSH
87154: LD_VAR 0 3
87158: PUSH
87159: LD_VAR 0 2
87163: DIFF
87164: ST_TO_ADDR
// continue ;
87165: GO 87135
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
87167: LD_VAR 0 2
87171: PPUSH
87172: LD_INT 3
87174: PUSH
87175: LD_INT 22
87177: PUSH
87178: LD_INT 0
87180: PUSH
87181: EMPTY
87182: LIST
87183: LIST
87184: PUSH
87185: EMPTY
87186: LIST
87187: LIST
87188: PPUSH
87189: CALL_OW 69
87193: PPUSH
87194: LD_VAR 0 2
87198: PPUSH
87199: CALL_OW 74
87203: PPUSH
87204: CALL_OW 115
// end ;
87208: GO 87135
87210: POP
87211: POP
// until not tmp ;
87212: LD_VAR 0 3
87216: NOT
87217: IFFALSE 87118
// end ;
87219: PPOPN 3
87221: END
// every 0 0$1 trigger StreamModeActive and sTroll do
87222: LD_EXP 107
87226: PUSH
87227: LD_EXP 132
87231: AND
87232: IFFALSE 87286
87234: GO 87236
87236: DISABLE
// begin ToLua ( displayTroll(); ) ;
87237: LD_STRING displayTroll();
87239: PPUSH
87240: CALL_OW 559
// wait ( 3 3$00 ) ;
87244: LD_INT 6300
87246: PPUSH
87247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87251: LD_STRING hideTroll();
87253: PPUSH
87254: CALL_OW 559
// wait ( 1 1$00 ) ;
87258: LD_INT 2100
87260: PPUSH
87261: CALL_OW 67
// ToLua ( displayTroll(); ) ;
87265: LD_STRING displayTroll();
87267: PPUSH
87268: CALL_OW 559
// wait ( 1 1$00 ) ;
87272: LD_INT 2100
87274: PPUSH
87275: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87279: LD_STRING hideTroll();
87281: PPUSH
87282: CALL_OW 559
// end ;
87286: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
87287: LD_EXP 107
87291: PUSH
87292: LD_EXP 133
87296: AND
87297: IFFALSE 87360
87299: GO 87301
87301: DISABLE
87302: LD_INT 0
87304: PPUSH
// begin p := 0 ;
87305: LD_ADDR_VAR 0 1
87309: PUSH
87310: LD_INT 0
87312: ST_TO_ADDR
// repeat game_speed := 1 ;
87313: LD_ADDR_OWVAR 65
87317: PUSH
87318: LD_INT 1
87320: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87321: LD_INT 35
87323: PPUSH
87324: CALL_OW 67
// p := p + 1 ;
87328: LD_ADDR_VAR 0 1
87332: PUSH
87333: LD_VAR 0 1
87337: PUSH
87338: LD_INT 1
87340: PLUS
87341: ST_TO_ADDR
// until p >= 60 ;
87342: LD_VAR 0 1
87346: PUSH
87347: LD_INT 60
87349: GREATEREQUAL
87350: IFFALSE 87313
// game_speed := 4 ;
87352: LD_ADDR_OWVAR 65
87356: PUSH
87357: LD_INT 4
87359: ST_TO_ADDR
// end ;
87360: PPOPN 1
87362: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
87363: LD_EXP 107
87367: PUSH
87368: LD_EXP 134
87372: AND
87373: IFFALSE 87519
87375: GO 87377
87377: DISABLE
87378: LD_INT 0
87380: PPUSH
87381: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87382: LD_ADDR_VAR 0 1
87386: PUSH
87387: LD_INT 22
87389: PUSH
87390: LD_OWVAR 2
87394: PUSH
87395: EMPTY
87396: LIST
87397: LIST
87398: PUSH
87399: LD_INT 2
87401: PUSH
87402: LD_INT 30
87404: PUSH
87405: LD_INT 0
87407: PUSH
87408: EMPTY
87409: LIST
87410: LIST
87411: PUSH
87412: LD_INT 30
87414: PUSH
87415: LD_INT 1
87417: PUSH
87418: EMPTY
87419: LIST
87420: LIST
87421: PUSH
87422: EMPTY
87423: LIST
87424: LIST
87425: LIST
87426: PUSH
87427: EMPTY
87428: LIST
87429: LIST
87430: PPUSH
87431: CALL_OW 69
87435: ST_TO_ADDR
// if not depot then
87436: LD_VAR 0 1
87440: NOT
87441: IFFALSE 87445
// exit ;
87443: GO 87519
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
87445: LD_ADDR_VAR 0 2
87449: PUSH
87450: LD_VAR 0 1
87454: PUSH
87455: LD_INT 1
87457: PPUSH
87458: LD_VAR 0 1
87462: PPUSH
87463: CALL_OW 12
87467: ARRAY
87468: PPUSH
87469: CALL_OW 274
87473: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
87474: LD_VAR 0 2
87478: PPUSH
87479: LD_INT 1
87481: PPUSH
87482: LD_INT 0
87484: PPUSH
87485: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
87489: LD_VAR 0 2
87493: PPUSH
87494: LD_INT 2
87496: PPUSH
87497: LD_INT 0
87499: PPUSH
87500: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
87504: LD_VAR 0 2
87508: PPUSH
87509: LD_INT 3
87511: PPUSH
87512: LD_INT 0
87514: PPUSH
87515: CALL_OW 277
// end ;
87519: PPOPN 2
87521: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
87522: LD_EXP 107
87526: PUSH
87527: LD_EXP 135
87531: AND
87532: IFFALSE 87629
87534: GO 87536
87536: DISABLE
87537: LD_INT 0
87539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87540: LD_ADDR_VAR 0 1
87544: PUSH
87545: LD_INT 22
87547: PUSH
87548: LD_OWVAR 2
87552: PUSH
87553: EMPTY
87554: LIST
87555: LIST
87556: PUSH
87557: LD_INT 21
87559: PUSH
87560: LD_INT 1
87562: PUSH
87563: EMPTY
87564: LIST
87565: LIST
87566: PUSH
87567: LD_INT 3
87569: PUSH
87570: LD_INT 23
87572: PUSH
87573: LD_INT 0
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: EMPTY
87581: LIST
87582: LIST
87583: PUSH
87584: EMPTY
87585: LIST
87586: LIST
87587: LIST
87588: PPUSH
87589: CALL_OW 69
87593: ST_TO_ADDR
// if not tmp then
87594: LD_VAR 0 1
87598: NOT
87599: IFFALSE 87603
// exit ;
87601: GO 87629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
87603: LD_VAR 0 1
87607: PUSH
87608: LD_INT 1
87610: PPUSH
87611: LD_VAR 0 1
87615: PPUSH
87616: CALL_OW 12
87620: ARRAY
87621: PPUSH
87622: LD_INT 200
87624: PPUSH
87625: CALL_OW 234
// end ;
87629: PPOPN 1
87631: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
87632: LD_EXP 107
87636: PUSH
87637: LD_EXP 136
87641: AND
87642: IFFALSE 87721
87644: GO 87646
87646: DISABLE
87647: LD_INT 0
87649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
87650: LD_ADDR_VAR 0 1
87654: PUSH
87655: LD_INT 22
87657: PUSH
87658: LD_OWVAR 2
87662: PUSH
87663: EMPTY
87664: LIST
87665: LIST
87666: PUSH
87667: LD_INT 21
87669: PUSH
87670: LD_INT 2
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: PUSH
87677: EMPTY
87678: LIST
87679: LIST
87680: PPUSH
87681: CALL_OW 69
87685: ST_TO_ADDR
// if not tmp then
87686: LD_VAR 0 1
87690: NOT
87691: IFFALSE 87695
// exit ;
87693: GO 87721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
87695: LD_VAR 0 1
87699: PUSH
87700: LD_INT 1
87702: PPUSH
87703: LD_VAR 0 1
87707: PPUSH
87708: CALL_OW 12
87712: ARRAY
87713: PPUSH
87714: LD_INT 60
87716: PPUSH
87717: CALL_OW 234
// end ;
87721: PPOPN 1
87723: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
87724: LD_EXP 107
87728: PUSH
87729: LD_EXP 137
87733: AND
87734: IFFALSE 87833
87736: GO 87738
87738: DISABLE
87739: LD_INT 0
87741: PPUSH
87742: PPUSH
// begin enable ;
87743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
87744: LD_ADDR_VAR 0 1
87748: PUSH
87749: LD_INT 22
87751: PUSH
87752: LD_OWVAR 2
87756: PUSH
87757: EMPTY
87758: LIST
87759: LIST
87760: PUSH
87761: LD_INT 61
87763: PUSH
87764: EMPTY
87765: LIST
87766: PUSH
87767: LD_INT 33
87769: PUSH
87770: LD_INT 2
87772: PUSH
87773: EMPTY
87774: LIST
87775: LIST
87776: PUSH
87777: EMPTY
87778: LIST
87779: LIST
87780: LIST
87781: PPUSH
87782: CALL_OW 69
87786: ST_TO_ADDR
// if not tmp then
87787: LD_VAR 0 1
87791: NOT
87792: IFFALSE 87796
// exit ;
87794: GO 87833
// for i in tmp do
87796: LD_ADDR_VAR 0 2
87800: PUSH
87801: LD_VAR 0 1
87805: PUSH
87806: FOR_IN
87807: IFFALSE 87831
// if IsControledBy ( i ) then
87809: LD_VAR 0 2
87813: PPUSH
87814: CALL_OW 312
87818: IFFALSE 87829
// ComUnlink ( i ) ;
87820: LD_VAR 0 2
87824: PPUSH
87825: CALL_OW 136
87829: GO 87806
87831: POP
87832: POP
// end ;
87833: PPOPN 2
87835: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
87836: LD_EXP 107
87840: PUSH
87841: LD_EXP 138
87845: AND
87846: IFFALSE 87986
87848: GO 87850
87850: DISABLE
87851: LD_INT 0
87853: PPUSH
87854: PPUSH
// begin ToLua ( displayPowell(); ) ;
87855: LD_STRING displayPowell();
87857: PPUSH
87858: CALL_OW 559
// uc_side := 0 ;
87862: LD_ADDR_OWVAR 20
87866: PUSH
87867: LD_INT 0
87869: ST_TO_ADDR
// uc_nation := 2 ;
87870: LD_ADDR_OWVAR 21
87874: PUSH
87875: LD_INT 2
87877: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
87878: LD_ADDR_OWVAR 37
87882: PUSH
87883: LD_INT 14
87885: ST_TO_ADDR
// vc_engine := engine_siberite ;
87886: LD_ADDR_OWVAR 39
87890: PUSH
87891: LD_INT 3
87893: ST_TO_ADDR
// vc_control := control_apeman ;
87894: LD_ADDR_OWVAR 38
87898: PUSH
87899: LD_INT 5
87901: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
87902: LD_ADDR_OWVAR 40
87906: PUSH
87907: LD_INT 29
87909: ST_TO_ADDR
// un := CreateVehicle ;
87910: LD_ADDR_VAR 0 2
87914: PUSH
87915: CALL_OW 45
87919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
87920: LD_VAR 0 2
87924: PPUSH
87925: LD_INT 1
87927: PPUSH
87928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
87932: LD_INT 35
87934: PPUSH
87935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
87939: LD_VAR 0 2
87943: PPUSH
87944: LD_INT 22
87946: PUSH
87947: LD_OWVAR 2
87951: PUSH
87952: EMPTY
87953: LIST
87954: LIST
87955: PPUSH
87956: CALL_OW 69
87960: PPUSH
87961: LD_VAR 0 2
87965: PPUSH
87966: CALL_OW 74
87970: PPUSH
87971: CALL_OW 115
// until IsDead ( un ) ;
87975: LD_VAR 0 2
87979: PPUSH
87980: CALL_OW 301
87984: IFFALSE 87932
// end ;
87986: PPOPN 2
87988: END
// every 0 0$1 trigger StreamModeActive and sStu do
87989: LD_EXP 107
87993: PUSH
87994: LD_EXP 146
87998: AND
87999: IFFALSE 88015
88001: GO 88003
88003: DISABLE
// begin ToLua ( displayStucuk(); ) ;
88004: LD_STRING displayStucuk();
88006: PPUSH
88007: CALL_OW 559
// ResetFog ;
88011: CALL_OW 335
// end ;
88015: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
88016: LD_EXP 107
88020: PUSH
88021: LD_EXP 139
88025: AND
88026: IFFALSE 88167
88028: GO 88030
88030: DISABLE
88031: LD_INT 0
88033: PPUSH
88034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88035: LD_ADDR_VAR 0 2
88039: PUSH
88040: LD_INT 22
88042: PUSH
88043: LD_OWVAR 2
88047: PUSH
88048: EMPTY
88049: LIST
88050: LIST
88051: PUSH
88052: LD_INT 21
88054: PUSH
88055: LD_INT 1
88057: PUSH
88058: EMPTY
88059: LIST
88060: LIST
88061: PUSH
88062: EMPTY
88063: LIST
88064: LIST
88065: PPUSH
88066: CALL_OW 69
88070: ST_TO_ADDR
// if not tmp then
88071: LD_VAR 0 2
88075: NOT
88076: IFFALSE 88080
// exit ;
88078: GO 88167
// un := tmp [ rand ( 1 , tmp ) ] ;
88080: LD_ADDR_VAR 0 1
88084: PUSH
88085: LD_VAR 0 2
88089: PUSH
88090: LD_INT 1
88092: PPUSH
88093: LD_VAR 0 2
88097: PPUSH
88098: CALL_OW 12
88102: ARRAY
88103: ST_TO_ADDR
// SetSide ( un , 0 ) ;
88104: LD_VAR 0 1
88108: PPUSH
88109: LD_INT 0
88111: PPUSH
88112: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
88116: LD_VAR 0 1
88120: PPUSH
88121: LD_OWVAR 3
88125: PUSH
88126: LD_VAR 0 1
88130: DIFF
88131: PPUSH
88132: LD_VAR 0 1
88136: PPUSH
88137: CALL_OW 74
88141: PPUSH
88142: CALL_OW 115
// wait ( 0 0$20 ) ;
88146: LD_INT 700
88148: PPUSH
88149: CALL_OW 67
// SetSide ( un , your_side ) ;
88153: LD_VAR 0 1
88157: PPUSH
88158: LD_OWVAR 2
88162: PPUSH
88163: CALL_OW 235
// end ;
88167: PPOPN 2
88169: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
88170: LD_EXP 107
88174: PUSH
88175: LD_EXP 140
88179: AND
88180: IFFALSE 88286
88182: GO 88184
88184: DISABLE
88185: LD_INT 0
88187: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
88188: LD_ADDR_VAR 0 1
88192: PUSH
88193: LD_INT 22
88195: PUSH
88196: LD_OWVAR 2
88200: PUSH
88201: EMPTY
88202: LIST
88203: LIST
88204: PUSH
88205: LD_INT 2
88207: PUSH
88208: LD_INT 30
88210: PUSH
88211: LD_INT 0
88213: PUSH
88214: EMPTY
88215: LIST
88216: LIST
88217: PUSH
88218: LD_INT 30
88220: PUSH
88221: LD_INT 1
88223: PUSH
88224: EMPTY
88225: LIST
88226: LIST
88227: PUSH
88228: EMPTY
88229: LIST
88230: LIST
88231: LIST
88232: PUSH
88233: EMPTY
88234: LIST
88235: LIST
88236: PPUSH
88237: CALL_OW 69
88241: ST_TO_ADDR
// if not depot then
88242: LD_VAR 0 1
88246: NOT
88247: IFFALSE 88251
// exit ;
88249: GO 88286
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
88251: LD_VAR 0 1
88255: PUSH
88256: LD_INT 1
88258: ARRAY
88259: PPUSH
88260: CALL_OW 250
88264: PPUSH
88265: LD_VAR 0 1
88269: PUSH
88270: LD_INT 1
88272: ARRAY
88273: PPUSH
88274: CALL_OW 251
88278: PPUSH
88279: LD_INT 70
88281: PPUSH
88282: CALL_OW 495
// end ;
88286: PPOPN 1
88288: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
88289: LD_EXP 107
88293: PUSH
88294: LD_EXP 141
88298: AND
88299: IFFALSE 88510
88301: GO 88303
88303: DISABLE
88304: LD_INT 0
88306: PPUSH
88307: PPUSH
88308: PPUSH
88309: PPUSH
88310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88311: LD_ADDR_VAR 0 5
88315: PUSH
88316: LD_INT 22
88318: PUSH
88319: LD_OWVAR 2
88323: PUSH
88324: EMPTY
88325: LIST
88326: LIST
88327: PUSH
88328: LD_INT 21
88330: PUSH
88331: LD_INT 1
88333: PUSH
88334: EMPTY
88335: LIST
88336: LIST
88337: PUSH
88338: EMPTY
88339: LIST
88340: LIST
88341: PPUSH
88342: CALL_OW 69
88346: ST_TO_ADDR
// if not tmp then
88347: LD_VAR 0 5
88351: NOT
88352: IFFALSE 88356
// exit ;
88354: GO 88510
// for i in tmp do
88356: LD_ADDR_VAR 0 1
88360: PUSH
88361: LD_VAR 0 5
88365: PUSH
88366: FOR_IN
88367: IFFALSE 88508
// begin d := rand ( 0 , 5 ) ;
88369: LD_ADDR_VAR 0 4
88373: PUSH
88374: LD_INT 0
88376: PPUSH
88377: LD_INT 5
88379: PPUSH
88380: CALL_OW 12
88384: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
88385: LD_ADDR_VAR 0 2
88389: PUSH
88390: LD_VAR 0 1
88394: PPUSH
88395: CALL_OW 250
88399: PPUSH
88400: LD_VAR 0 4
88404: PPUSH
88405: LD_INT 3
88407: PPUSH
88408: LD_INT 12
88410: PPUSH
88411: CALL_OW 12
88415: PPUSH
88416: CALL_OW 272
88420: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
88421: LD_ADDR_VAR 0 3
88425: PUSH
88426: LD_VAR 0 1
88430: PPUSH
88431: CALL_OW 251
88435: PPUSH
88436: LD_VAR 0 4
88440: PPUSH
88441: LD_INT 3
88443: PPUSH
88444: LD_INT 12
88446: PPUSH
88447: CALL_OW 12
88451: PPUSH
88452: CALL_OW 273
88456: ST_TO_ADDR
// if ValidHex ( x , y ) then
88457: LD_VAR 0 2
88461: PPUSH
88462: LD_VAR 0 3
88466: PPUSH
88467: CALL_OW 488
88471: IFFALSE 88506
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
88473: LD_VAR 0 1
88477: PPUSH
88478: LD_VAR 0 2
88482: PPUSH
88483: LD_VAR 0 3
88487: PPUSH
88488: LD_INT 3
88490: PPUSH
88491: LD_INT 6
88493: PPUSH
88494: CALL_OW 12
88498: PPUSH
88499: LD_INT 1
88501: PPUSH
88502: CALL_OW 483
// end ;
88506: GO 88366
88508: POP
88509: POP
// end ;
88510: PPOPN 5
88512: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
88513: LD_EXP 107
88517: PUSH
88518: LD_EXP 142
88522: AND
88523: IFFALSE 88617
88525: GO 88527
88527: DISABLE
88528: LD_INT 0
88530: PPUSH
88531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
88532: LD_ADDR_VAR 0 2
88536: PUSH
88537: LD_INT 22
88539: PUSH
88540: LD_OWVAR 2
88544: PUSH
88545: EMPTY
88546: LIST
88547: LIST
88548: PUSH
88549: LD_INT 32
88551: PUSH
88552: LD_INT 1
88554: PUSH
88555: EMPTY
88556: LIST
88557: LIST
88558: PUSH
88559: LD_INT 21
88561: PUSH
88562: LD_INT 2
88564: PUSH
88565: EMPTY
88566: LIST
88567: LIST
88568: PUSH
88569: EMPTY
88570: LIST
88571: LIST
88572: LIST
88573: PPUSH
88574: CALL_OW 69
88578: ST_TO_ADDR
// if not tmp then
88579: LD_VAR 0 2
88583: NOT
88584: IFFALSE 88588
// exit ;
88586: GO 88617
// for i in tmp do
88588: LD_ADDR_VAR 0 1
88592: PUSH
88593: LD_VAR 0 2
88597: PUSH
88598: FOR_IN
88599: IFFALSE 88615
// SetFuel ( i , 0 ) ;
88601: LD_VAR 0 1
88605: PPUSH
88606: LD_INT 0
88608: PPUSH
88609: CALL_OW 240
88613: GO 88598
88615: POP
88616: POP
// end ;
88617: PPOPN 2
88619: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
88620: LD_EXP 107
88624: PUSH
88625: LD_EXP 143
88629: AND
88630: IFFALSE 88696
88632: GO 88634
88634: DISABLE
88635: LD_INT 0
88637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
88638: LD_ADDR_VAR 0 1
88642: PUSH
88643: LD_INT 22
88645: PUSH
88646: LD_OWVAR 2
88650: PUSH
88651: EMPTY
88652: LIST
88653: LIST
88654: PUSH
88655: LD_INT 30
88657: PUSH
88658: LD_INT 29
88660: PUSH
88661: EMPTY
88662: LIST
88663: LIST
88664: PUSH
88665: EMPTY
88666: LIST
88667: LIST
88668: PPUSH
88669: CALL_OW 69
88673: ST_TO_ADDR
// if not tmp then
88674: LD_VAR 0 1
88678: NOT
88679: IFFALSE 88683
// exit ;
88681: GO 88696
// DestroyUnit ( tmp [ 1 ] ) ;
88683: LD_VAR 0 1
88687: PUSH
88688: LD_INT 1
88690: ARRAY
88691: PPUSH
88692: CALL_OW 65
// end ;
88696: PPOPN 1
88698: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
88699: LD_EXP 107
88703: PUSH
88704: LD_EXP 145
88708: AND
88709: IFFALSE 88838
88711: GO 88713
88713: DISABLE
88714: LD_INT 0
88716: PPUSH
// begin uc_side := 0 ;
88717: LD_ADDR_OWVAR 20
88721: PUSH
88722: LD_INT 0
88724: ST_TO_ADDR
// uc_nation := nation_arabian ;
88725: LD_ADDR_OWVAR 21
88729: PUSH
88730: LD_INT 2
88732: ST_TO_ADDR
// hc_gallery :=  ;
88733: LD_ADDR_OWVAR 33
88737: PUSH
88738: LD_STRING 
88740: ST_TO_ADDR
// hc_name :=  ;
88741: LD_ADDR_OWVAR 26
88745: PUSH
88746: LD_STRING 
88748: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
88749: LD_INT 1
88751: PPUSH
88752: LD_INT 11
88754: PPUSH
88755: LD_INT 10
88757: PPUSH
88758: CALL_OW 380
// un := CreateHuman ;
88762: LD_ADDR_VAR 0 1
88766: PUSH
88767: CALL_OW 44
88771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88772: LD_VAR 0 1
88776: PPUSH
88777: LD_INT 1
88779: PPUSH
88780: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
88784: LD_INT 35
88786: PPUSH
88787: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
88791: LD_VAR 0 1
88795: PPUSH
88796: LD_INT 22
88798: PUSH
88799: LD_OWVAR 2
88803: PUSH
88804: EMPTY
88805: LIST
88806: LIST
88807: PPUSH
88808: CALL_OW 69
88812: PPUSH
88813: LD_VAR 0 1
88817: PPUSH
88818: CALL_OW 74
88822: PPUSH
88823: CALL_OW 115
// until IsDead ( un ) ;
88827: LD_VAR 0 1
88831: PPUSH
88832: CALL_OW 301
88836: IFFALSE 88784
// end ;
88838: PPOPN 1
88840: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
88841: LD_EXP 107
88845: PUSH
88846: LD_EXP 147
88850: AND
88851: IFFALSE 88863
88853: GO 88855
88855: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
88856: LD_STRING earthquake(getX(game), 0, 32)
88858: PPUSH
88859: CALL_OW 559
88863: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
88864: LD_EXP 107
88868: PUSH
88869: LD_EXP 148
88873: AND
88874: IFFALSE 88965
88876: GO 88878
88878: DISABLE
88879: LD_INT 0
88881: PPUSH
// begin enable ;
88882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
88883: LD_ADDR_VAR 0 1
88887: PUSH
88888: LD_INT 22
88890: PUSH
88891: LD_OWVAR 2
88895: PUSH
88896: EMPTY
88897: LIST
88898: LIST
88899: PUSH
88900: LD_INT 21
88902: PUSH
88903: LD_INT 2
88905: PUSH
88906: EMPTY
88907: LIST
88908: LIST
88909: PUSH
88910: LD_INT 33
88912: PUSH
88913: LD_INT 3
88915: PUSH
88916: EMPTY
88917: LIST
88918: LIST
88919: PUSH
88920: EMPTY
88921: LIST
88922: LIST
88923: LIST
88924: PPUSH
88925: CALL_OW 69
88929: ST_TO_ADDR
// if not tmp then
88930: LD_VAR 0 1
88934: NOT
88935: IFFALSE 88939
// exit ;
88937: GO 88965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
88939: LD_VAR 0 1
88943: PUSH
88944: LD_INT 1
88946: PPUSH
88947: LD_VAR 0 1
88951: PPUSH
88952: CALL_OW 12
88956: ARRAY
88957: PPUSH
88958: LD_INT 1
88960: PPUSH
88961: CALL_OW 234
// end ;
88965: PPOPN 1
88967: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
88968: LD_EXP 107
88972: PUSH
88973: LD_EXP 149
88977: AND
88978: IFFALSE 89119
88980: GO 88982
88982: DISABLE
88983: LD_INT 0
88985: PPUSH
88986: PPUSH
88987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
88988: LD_ADDR_VAR 0 3
88992: PUSH
88993: LD_INT 22
88995: PUSH
88996: LD_OWVAR 2
89000: PUSH
89001: EMPTY
89002: LIST
89003: LIST
89004: PUSH
89005: LD_INT 25
89007: PUSH
89008: LD_INT 1
89010: PUSH
89011: EMPTY
89012: LIST
89013: LIST
89014: PUSH
89015: EMPTY
89016: LIST
89017: LIST
89018: PPUSH
89019: CALL_OW 69
89023: ST_TO_ADDR
// if not tmp then
89024: LD_VAR 0 3
89028: NOT
89029: IFFALSE 89033
// exit ;
89031: GO 89119
// un := tmp [ rand ( 1 , tmp ) ] ;
89033: LD_ADDR_VAR 0 2
89037: PUSH
89038: LD_VAR 0 3
89042: PUSH
89043: LD_INT 1
89045: PPUSH
89046: LD_VAR 0 3
89050: PPUSH
89051: CALL_OW 12
89055: ARRAY
89056: ST_TO_ADDR
// if Crawls ( un ) then
89057: LD_VAR 0 2
89061: PPUSH
89062: CALL_OW 318
89066: IFFALSE 89077
// ComWalk ( un ) ;
89068: LD_VAR 0 2
89072: PPUSH
89073: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
89077: LD_VAR 0 2
89081: PPUSH
89082: LD_INT 9
89084: PPUSH
89085: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
89089: LD_INT 28
89091: PPUSH
89092: LD_OWVAR 2
89096: PPUSH
89097: LD_INT 2
89099: PPUSH
89100: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
89104: LD_INT 29
89106: PPUSH
89107: LD_OWVAR 2
89111: PPUSH
89112: LD_INT 2
89114: PPUSH
89115: CALL_OW 322
// end ;
89119: PPOPN 3
89121: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
89122: LD_EXP 107
89126: PUSH
89127: LD_EXP 150
89131: AND
89132: IFFALSE 89243
89134: GO 89136
89136: DISABLE
89137: LD_INT 0
89139: PPUSH
89140: PPUSH
89141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89142: LD_ADDR_VAR 0 3
89146: PUSH
89147: LD_INT 22
89149: PUSH
89150: LD_OWVAR 2
89154: PUSH
89155: EMPTY
89156: LIST
89157: LIST
89158: PUSH
89159: LD_INT 25
89161: PUSH
89162: LD_INT 1
89164: PUSH
89165: EMPTY
89166: LIST
89167: LIST
89168: PUSH
89169: EMPTY
89170: LIST
89171: LIST
89172: PPUSH
89173: CALL_OW 69
89177: ST_TO_ADDR
// if not tmp then
89178: LD_VAR 0 3
89182: NOT
89183: IFFALSE 89187
// exit ;
89185: GO 89243
// un := tmp [ rand ( 1 , tmp ) ] ;
89187: LD_ADDR_VAR 0 2
89191: PUSH
89192: LD_VAR 0 3
89196: PUSH
89197: LD_INT 1
89199: PPUSH
89200: LD_VAR 0 3
89204: PPUSH
89205: CALL_OW 12
89209: ARRAY
89210: ST_TO_ADDR
// if Crawls ( un ) then
89211: LD_VAR 0 2
89215: PPUSH
89216: CALL_OW 318
89220: IFFALSE 89231
// ComWalk ( un ) ;
89222: LD_VAR 0 2
89226: PPUSH
89227: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89231: LD_VAR 0 2
89235: PPUSH
89236: LD_INT 8
89238: PPUSH
89239: CALL_OW 336
// end ;
89243: PPOPN 3
89245: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
89246: LD_EXP 107
89250: PUSH
89251: LD_EXP 151
89255: AND
89256: IFFALSE 89400
89258: GO 89260
89260: DISABLE
89261: LD_INT 0
89263: PPUSH
89264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
89265: LD_ADDR_VAR 0 2
89269: PUSH
89270: LD_INT 22
89272: PUSH
89273: LD_OWVAR 2
89277: PUSH
89278: EMPTY
89279: LIST
89280: LIST
89281: PUSH
89282: LD_INT 21
89284: PUSH
89285: LD_INT 2
89287: PUSH
89288: EMPTY
89289: LIST
89290: LIST
89291: PUSH
89292: LD_INT 2
89294: PUSH
89295: LD_INT 34
89297: PUSH
89298: LD_INT 12
89300: PUSH
89301: EMPTY
89302: LIST
89303: LIST
89304: PUSH
89305: LD_INT 34
89307: PUSH
89308: LD_INT 51
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: PUSH
89315: LD_INT 34
89317: PUSH
89318: LD_INT 32
89320: PUSH
89321: EMPTY
89322: LIST
89323: LIST
89324: PUSH
89325: EMPTY
89326: LIST
89327: LIST
89328: LIST
89329: LIST
89330: PUSH
89331: EMPTY
89332: LIST
89333: LIST
89334: LIST
89335: PPUSH
89336: CALL_OW 69
89340: ST_TO_ADDR
// if not tmp then
89341: LD_VAR 0 2
89345: NOT
89346: IFFALSE 89350
// exit ;
89348: GO 89400
// for i in tmp do
89350: LD_ADDR_VAR 0 1
89354: PUSH
89355: LD_VAR 0 2
89359: PUSH
89360: FOR_IN
89361: IFFALSE 89398
// if GetCargo ( i , mat_artifact ) = 0 then
89363: LD_VAR 0 1
89367: PPUSH
89368: LD_INT 4
89370: PPUSH
89371: CALL_OW 289
89375: PUSH
89376: LD_INT 0
89378: EQUAL
89379: IFFALSE 89396
// SetCargo ( i , mat_siberit , 100 ) ;
89381: LD_VAR 0 1
89385: PPUSH
89386: LD_INT 3
89388: PPUSH
89389: LD_INT 100
89391: PPUSH
89392: CALL_OW 290
89396: GO 89360
89398: POP
89399: POP
// end ;
89400: PPOPN 2
89402: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
89403: LD_EXP 107
89407: PUSH
89408: LD_EXP 152
89412: AND
89413: IFFALSE 89596
89415: GO 89417
89417: DISABLE
89418: LD_INT 0
89420: PPUSH
89421: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
89422: LD_ADDR_VAR 0 2
89426: PUSH
89427: LD_INT 22
89429: PUSH
89430: LD_OWVAR 2
89434: PUSH
89435: EMPTY
89436: LIST
89437: LIST
89438: PPUSH
89439: CALL_OW 69
89443: ST_TO_ADDR
// if not tmp then
89444: LD_VAR 0 2
89448: NOT
89449: IFFALSE 89453
// exit ;
89451: GO 89596
// for i := 1 to 2 do
89453: LD_ADDR_VAR 0 1
89457: PUSH
89458: DOUBLE
89459: LD_INT 1
89461: DEC
89462: ST_TO_ADDR
89463: LD_INT 2
89465: PUSH
89466: FOR_TO
89467: IFFALSE 89594
// begin uc_side := your_side ;
89469: LD_ADDR_OWVAR 20
89473: PUSH
89474: LD_OWVAR 2
89478: ST_TO_ADDR
// uc_nation := nation_american ;
89479: LD_ADDR_OWVAR 21
89483: PUSH
89484: LD_INT 1
89486: ST_TO_ADDR
// vc_chassis := us_morphling ;
89487: LD_ADDR_OWVAR 37
89491: PUSH
89492: LD_INT 5
89494: ST_TO_ADDR
// vc_engine := engine_siberite ;
89495: LD_ADDR_OWVAR 39
89499: PUSH
89500: LD_INT 3
89502: ST_TO_ADDR
// vc_control := control_computer ;
89503: LD_ADDR_OWVAR 38
89507: PUSH
89508: LD_INT 3
89510: ST_TO_ADDR
// vc_weapon := us_double_laser ;
89511: LD_ADDR_OWVAR 40
89515: PUSH
89516: LD_INT 10
89518: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
89519: LD_VAR 0 2
89523: PUSH
89524: LD_INT 1
89526: ARRAY
89527: PPUSH
89528: CALL_OW 310
89532: NOT
89533: IFFALSE 89580
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
89535: CALL_OW 45
89539: PPUSH
89540: LD_VAR 0 2
89544: PUSH
89545: LD_INT 1
89547: ARRAY
89548: PPUSH
89549: CALL_OW 250
89553: PPUSH
89554: LD_VAR 0 2
89558: PUSH
89559: LD_INT 1
89561: ARRAY
89562: PPUSH
89563: CALL_OW 251
89567: PPUSH
89568: LD_INT 12
89570: PPUSH
89571: LD_INT 1
89573: PPUSH
89574: CALL_OW 50
89578: GO 89592
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
89580: CALL_OW 45
89584: PPUSH
89585: LD_INT 1
89587: PPUSH
89588: CALL_OW 51
// end ;
89592: GO 89466
89594: POP
89595: POP
// end ;
89596: PPOPN 2
89598: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
89599: LD_EXP 107
89603: PUSH
89604: LD_EXP 153
89608: AND
89609: IFFALSE 89831
89611: GO 89613
89613: DISABLE
89614: LD_INT 0
89616: PPUSH
89617: PPUSH
89618: PPUSH
89619: PPUSH
89620: PPUSH
89621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89622: LD_ADDR_VAR 0 6
89626: PUSH
89627: LD_INT 22
89629: PUSH
89630: LD_OWVAR 2
89634: PUSH
89635: EMPTY
89636: LIST
89637: LIST
89638: PUSH
89639: LD_INT 21
89641: PUSH
89642: LD_INT 1
89644: PUSH
89645: EMPTY
89646: LIST
89647: LIST
89648: PUSH
89649: LD_INT 3
89651: PUSH
89652: LD_INT 23
89654: PUSH
89655: LD_INT 0
89657: PUSH
89658: EMPTY
89659: LIST
89660: LIST
89661: PUSH
89662: EMPTY
89663: LIST
89664: LIST
89665: PUSH
89666: EMPTY
89667: LIST
89668: LIST
89669: LIST
89670: PPUSH
89671: CALL_OW 69
89675: ST_TO_ADDR
// if not tmp then
89676: LD_VAR 0 6
89680: NOT
89681: IFFALSE 89685
// exit ;
89683: GO 89831
// s1 := rand ( 1 , 4 ) ;
89685: LD_ADDR_VAR 0 2
89689: PUSH
89690: LD_INT 1
89692: PPUSH
89693: LD_INT 4
89695: PPUSH
89696: CALL_OW 12
89700: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
89701: LD_ADDR_VAR 0 4
89705: PUSH
89706: LD_VAR 0 6
89710: PUSH
89711: LD_INT 1
89713: ARRAY
89714: PPUSH
89715: LD_VAR 0 2
89719: PPUSH
89720: CALL_OW 259
89724: ST_TO_ADDR
// if s1 = 1 then
89725: LD_VAR 0 2
89729: PUSH
89730: LD_INT 1
89732: EQUAL
89733: IFFALSE 89753
// s2 := rand ( 2 , 4 ) else
89735: LD_ADDR_VAR 0 3
89739: PUSH
89740: LD_INT 2
89742: PPUSH
89743: LD_INT 4
89745: PPUSH
89746: CALL_OW 12
89750: ST_TO_ADDR
89751: GO 89761
// s2 := 1 ;
89753: LD_ADDR_VAR 0 3
89757: PUSH
89758: LD_INT 1
89760: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
89761: LD_ADDR_VAR 0 5
89765: PUSH
89766: LD_VAR 0 6
89770: PUSH
89771: LD_INT 1
89773: ARRAY
89774: PPUSH
89775: LD_VAR 0 3
89779: PPUSH
89780: CALL_OW 259
89784: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
89785: LD_VAR 0 6
89789: PUSH
89790: LD_INT 1
89792: ARRAY
89793: PPUSH
89794: LD_VAR 0 2
89798: PPUSH
89799: LD_VAR 0 5
89803: PPUSH
89804: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
89808: LD_VAR 0 6
89812: PUSH
89813: LD_INT 1
89815: ARRAY
89816: PPUSH
89817: LD_VAR 0 3
89821: PPUSH
89822: LD_VAR 0 4
89826: PPUSH
89827: CALL_OW 237
// end ;
89831: PPOPN 6
89833: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
89834: LD_EXP 107
89838: PUSH
89839: LD_EXP 154
89843: AND
89844: IFFALSE 89923
89846: GO 89848
89848: DISABLE
89849: LD_INT 0
89851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
89852: LD_ADDR_VAR 0 1
89856: PUSH
89857: LD_INT 22
89859: PUSH
89860: LD_OWVAR 2
89864: PUSH
89865: EMPTY
89866: LIST
89867: LIST
89868: PUSH
89869: LD_INT 30
89871: PUSH
89872: LD_INT 3
89874: PUSH
89875: EMPTY
89876: LIST
89877: LIST
89878: PUSH
89879: EMPTY
89880: LIST
89881: LIST
89882: PPUSH
89883: CALL_OW 69
89887: ST_TO_ADDR
// if not tmp then
89888: LD_VAR 0 1
89892: NOT
89893: IFFALSE 89897
// exit ;
89895: GO 89923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
89897: LD_VAR 0 1
89901: PUSH
89902: LD_INT 1
89904: PPUSH
89905: LD_VAR 0 1
89909: PPUSH
89910: CALL_OW 12
89914: ARRAY
89915: PPUSH
89916: LD_INT 1
89918: PPUSH
89919: CALL_OW 234
// end ;
89923: PPOPN 1
89925: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
89926: LD_EXP 107
89930: PUSH
89931: LD_EXP 155
89935: AND
89936: IFFALSE 90048
89938: GO 89940
89940: DISABLE
89941: LD_INT 0
89943: PPUSH
89944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
89945: LD_ADDR_VAR 0 2
89949: PUSH
89950: LD_INT 22
89952: PUSH
89953: LD_OWVAR 2
89957: PUSH
89958: EMPTY
89959: LIST
89960: LIST
89961: PUSH
89962: LD_INT 2
89964: PUSH
89965: LD_INT 30
89967: PUSH
89968: LD_INT 27
89970: PUSH
89971: EMPTY
89972: LIST
89973: LIST
89974: PUSH
89975: LD_INT 30
89977: PUSH
89978: LD_INT 26
89980: PUSH
89981: EMPTY
89982: LIST
89983: LIST
89984: PUSH
89985: LD_INT 30
89987: PUSH
89988: LD_INT 28
89990: PUSH
89991: EMPTY
89992: LIST
89993: LIST
89994: PUSH
89995: EMPTY
89996: LIST
89997: LIST
89998: LIST
89999: LIST
90000: PUSH
90001: EMPTY
90002: LIST
90003: LIST
90004: PPUSH
90005: CALL_OW 69
90009: ST_TO_ADDR
// if not tmp then
90010: LD_VAR 0 2
90014: NOT
90015: IFFALSE 90019
// exit ;
90017: GO 90048
// for i in tmp do
90019: LD_ADDR_VAR 0 1
90023: PUSH
90024: LD_VAR 0 2
90028: PUSH
90029: FOR_IN
90030: IFFALSE 90046
// SetLives ( i , 1 ) ;
90032: LD_VAR 0 1
90036: PPUSH
90037: LD_INT 1
90039: PPUSH
90040: CALL_OW 234
90044: GO 90029
90046: POP
90047: POP
// end ;
90048: PPOPN 2
90050: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
90051: LD_EXP 107
90055: PUSH
90056: LD_EXP 156
90060: AND
90061: IFFALSE 90335
90063: GO 90065
90065: DISABLE
90066: LD_INT 0
90068: PPUSH
90069: PPUSH
90070: PPUSH
// begin i := rand ( 1 , 7 ) ;
90071: LD_ADDR_VAR 0 1
90075: PUSH
90076: LD_INT 1
90078: PPUSH
90079: LD_INT 7
90081: PPUSH
90082: CALL_OW 12
90086: ST_TO_ADDR
// case i of 1 :
90087: LD_VAR 0 1
90091: PUSH
90092: LD_INT 1
90094: DOUBLE
90095: EQUAL
90096: IFTRUE 90100
90098: GO 90110
90100: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
90101: LD_STRING earthquake(getX(game), 0, 32)
90103: PPUSH
90104: CALL_OW 559
90108: GO 90335
90110: LD_INT 2
90112: DOUBLE
90113: EQUAL
90114: IFTRUE 90118
90116: GO 90132
90118: POP
// begin ToLua ( displayStucuk(); ) ;
90119: LD_STRING displayStucuk();
90121: PPUSH
90122: CALL_OW 559
// ResetFog ;
90126: CALL_OW 335
// end ; 3 :
90130: GO 90335
90132: LD_INT 3
90134: DOUBLE
90135: EQUAL
90136: IFTRUE 90140
90138: GO 90244
90140: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90141: LD_ADDR_VAR 0 2
90145: PUSH
90146: LD_INT 22
90148: PUSH
90149: LD_OWVAR 2
90153: PUSH
90154: EMPTY
90155: LIST
90156: LIST
90157: PUSH
90158: LD_INT 25
90160: PUSH
90161: LD_INT 1
90163: PUSH
90164: EMPTY
90165: LIST
90166: LIST
90167: PUSH
90168: EMPTY
90169: LIST
90170: LIST
90171: PPUSH
90172: CALL_OW 69
90176: ST_TO_ADDR
// if not tmp then
90177: LD_VAR 0 2
90181: NOT
90182: IFFALSE 90186
// exit ;
90184: GO 90335
// un := tmp [ rand ( 1 , tmp ) ] ;
90186: LD_ADDR_VAR 0 3
90190: PUSH
90191: LD_VAR 0 2
90195: PUSH
90196: LD_INT 1
90198: PPUSH
90199: LD_VAR 0 2
90203: PPUSH
90204: CALL_OW 12
90208: ARRAY
90209: ST_TO_ADDR
// if Crawls ( un ) then
90210: LD_VAR 0 3
90214: PPUSH
90215: CALL_OW 318
90219: IFFALSE 90230
// ComWalk ( un ) ;
90221: LD_VAR 0 3
90225: PPUSH
90226: CALL_OW 138
// SetClass ( un , class_mortar ) ;
90230: LD_VAR 0 3
90234: PPUSH
90235: LD_INT 8
90237: PPUSH
90238: CALL_OW 336
// end ; 4 :
90242: GO 90335
90244: LD_INT 4
90246: DOUBLE
90247: EQUAL
90248: IFTRUE 90252
90250: GO 90313
90252: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
90253: LD_ADDR_VAR 0 2
90257: PUSH
90258: LD_INT 22
90260: PUSH
90261: LD_OWVAR 2
90265: PUSH
90266: EMPTY
90267: LIST
90268: LIST
90269: PUSH
90270: LD_INT 30
90272: PUSH
90273: LD_INT 29
90275: PUSH
90276: EMPTY
90277: LIST
90278: LIST
90279: PUSH
90280: EMPTY
90281: LIST
90282: LIST
90283: PPUSH
90284: CALL_OW 69
90288: ST_TO_ADDR
// if not tmp then
90289: LD_VAR 0 2
90293: NOT
90294: IFFALSE 90298
// exit ;
90296: GO 90335
// DestroyUnit ( tmp [ 1 ] ) ;
90298: LD_VAR 0 2
90302: PUSH
90303: LD_INT 1
90305: ARRAY
90306: PPUSH
90307: CALL_OW 65
// end ; 5 .. 7 :
90311: GO 90335
90313: LD_INT 5
90315: DOUBLE
90316: GREATEREQUAL
90317: IFFALSE 90325
90319: LD_INT 7
90321: DOUBLE
90322: LESSEQUAL
90323: IFTRUE 90327
90325: GO 90334
90327: POP
// StreamSibBomb ; end ;
90328: CALL 86585 0 0
90332: GO 90335
90334: POP
// end ;
90335: PPOPN 3
90337: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
90338: LD_EXP 107
90342: PUSH
90343: LD_EXP 157
90347: AND
90348: IFFALSE 90504
90350: GO 90352
90352: DISABLE
90353: LD_INT 0
90355: PPUSH
90356: PPUSH
90357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
90358: LD_ADDR_VAR 0 2
90362: PUSH
90363: LD_INT 81
90365: PUSH
90366: LD_OWVAR 2
90370: PUSH
90371: EMPTY
90372: LIST
90373: LIST
90374: PUSH
90375: LD_INT 2
90377: PUSH
90378: LD_INT 21
90380: PUSH
90381: LD_INT 1
90383: PUSH
90384: EMPTY
90385: LIST
90386: LIST
90387: PUSH
90388: LD_INT 21
90390: PUSH
90391: LD_INT 2
90393: PUSH
90394: EMPTY
90395: LIST
90396: LIST
90397: PUSH
90398: EMPTY
90399: LIST
90400: LIST
90401: LIST
90402: PUSH
90403: EMPTY
90404: LIST
90405: LIST
90406: PPUSH
90407: CALL_OW 69
90411: ST_TO_ADDR
// if not tmp then
90412: LD_VAR 0 2
90416: NOT
90417: IFFALSE 90421
// exit ;
90419: GO 90504
// p := 0 ;
90421: LD_ADDR_VAR 0 3
90425: PUSH
90426: LD_INT 0
90428: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90429: LD_INT 35
90431: PPUSH
90432: CALL_OW 67
// p := p + 1 ;
90436: LD_ADDR_VAR 0 3
90440: PUSH
90441: LD_VAR 0 3
90445: PUSH
90446: LD_INT 1
90448: PLUS
90449: ST_TO_ADDR
// for i in tmp do
90450: LD_ADDR_VAR 0 1
90454: PUSH
90455: LD_VAR 0 2
90459: PUSH
90460: FOR_IN
90461: IFFALSE 90492
// if GetLives ( i ) < 1000 then
90463: LD_VAR 0 1
90467: PPUSH
90468: CALL_OW 256
90472: PUSH
90473: LD_INT 1000
90475: LESS
90476: IFFALSE 90490
// SetLives ( i , 1000 ) ;
90478: LD_VAR 0 1
90482: PPUSH
90483: LD_INT 1000
90485: PPUSH
90486: CALL_OW 234
90490: GO 90460
90492: POP
90493: POP
// until p > 20 ;
90494: LD_VAR 0 3
90498: PUSH
90499: LD_INT 20
90501: GREATER
90502: IFFALSE 90429
// end ;
90504: PPOPN 3
90506: END
// every 0 0$1 trigger StreamModeActive and sTime do
90507: LD_EXP 107
90511: PUSH
90512: LD_EXP 158
90516: AND
90517: IFFALSE 90552
90519: GO 90521
90521: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
90522: LD_INT 28
90524: PPUSH
90525: LD_OWVAR 2
90529: PPUSH
90530: LD_INT 2
90532: PPUSH
90533: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
90537: LD_INT 30
90539: PPUSH
90540: LD_OWVAR 2
90544: PPUSH
90545: LD_INT 2
90547: PPUSH
90548: CALL_OW 322
// end ;
90552: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
90553: LD_EXP 107
90557: PUSH
90558: LD_EXP 159
90562: AND
90563: IFFALSE 90684
90565: GO 90567
90567: DISABLE
90568: LD_INT 0
90570: PPUSH
90571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
90572: LD_ADDR_VAR 0 2
90576: PUSH
90577: LD_INT 22
90579: PUSH
90580: LD_OWVAR 2
90584: PUSH
90585: EMPTY
90586: LIST
90587: LIST
90588: PUSH
90589: LD_INT 21
90591: PUSH
90592: LD_INT 1
90594: PUSH
90595: EMPTY
90596: LIST
90597: LIST
90598: PUSH
90599: LD_INT 3
90601: PUSH
90602: LD_INT 23
90604: PUSH
90605: LD_INT 0
90607: PUSH
90608: EMPTY
90609: LIST
90610: LIST
90611: PUSH
90612: EMPTY
90613: LIST
90614: LIST
90615: PUSH
90616: EMPTY
90617: LIST
90618: LIST
90619: LIST
90620: PPUSH
90621: CALL_OW 69
90625: ST_TO_ADDR
// if not tmp then
90626: LD_VAR 0 2
90630: NOT
90631: IFFALSE 90635
// exit ;
90633: GO 90684
// for i in tmp do
90635: LD_ADDR_VAR 0 1
90639: PUSH
90640: LD_VAR 0 2
90644: PUSH
90645: FOR_IN
90646: IFFALSE 90682
// begin if Crawls ( i ) then
90648: LD_VAR 0 1
90652: PPUSH
90653: CALL_OW 318
90657: IFFALSE 90668
// ComWalk ( i ) ;
90659: LD_VAR 0 1
90663: PPUSH
90664: CALL_OW 138
// SetClass ( i , 2 ) ;
90668: LD_VAR 0 1
90672: PPUSH
90673: LD_INT 2
90675: PPUSH
90676: CALL_OW 336
// end ;
90680: GO 90645
90682: POP
90683: POP
// end ;
90684: PPOPN 2
90686: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
90687: LD_EXP 107
90691: PUSH
90692: LD_EXP 160
90696: AND
90697: IFFALSE 90978
90699: GO 90701
90701: DISABLE
90702: LD_INT 0
90704: PPUSH
90705: PPUSH
90706: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
90707: LD_OWVAR 2
90711: PPUSH
90712: LD_INT 9
90714: PPUSH
90715: LD_INT 1
90717: PPUSH
90718: LD_INT 1
90720: PPUSH
90721: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
90725: LD_INT 9
90727: PPUSH
90728: LD_OWVAR 2
90732: PPUSH
90733: CALL_OW 343
// uc_side := 9 ;
90737: LD_ADDR_OWVAR 20
90741: PUSH
90742: LD_INT 9
90744: ST_TO_ADDR
// uc_nation := 2 ;
90745: LD_ADDR_OWVAR 21
90749: PUSH
90750: LD_INT 2
90752: ST_TO_ADDR
// hc_name := Dark Warrior ;
90753: LD_ADDR_OWVAR 26
90757: PUSH
90758: LD_STRING Dark Warrior
90760: ST_TO_ADDR
// hc_gallery :=  ;
90761: LD_ADDR_OWVAR 33
90765: PUSH
90766: LD_STRING 
90768: ST_TO_ADDR
// hc_noskilllimit := true ;
90769: LD_ADDR_OWVAR 76
90773: PUSH
90774: LD_INT 1
90776: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
90777: LD_ADDR_OWVAR 31
90781: PUSH
90782: LD_INT 30
90784: PUSH
90785: LD_INT 30
90787: PUSH
90788: LD_INT 30
90790: PUSH
90791: LD_INT 30
90793: PUSH
90794: EMPTY
90795: LIST
90796: LIST
90797: LIST
90798: LIST
90799: ST_TO_ADDR
// un := CreateHuman ;
90800: LD_ADDR_VAR 0 3
90804: PUSH
90805: CALL_OW 44
90809: ST_TO_ADDR
// hc_noskilllimit := false ;
90810: LD_ADDR_OWVAR 76
90814: PUSH
90815: LD_INT 0
90817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
90818: LD_VAR 0 3
90822: PPUSH
90823: LD_INT 1
90825: PPUSH
90826: CALL_OW 51
// p := 0 ;
90830: LD_ADDR_VAR 0 2
90834: PUSH
90835: LD_INT 0
90837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90838: LD_INT 35
90840: PPUSH
90841: CALL_OW 67
// p := p + 1 ;
90845: LD_ADDR_VAR 0 2
90849: PUSH
90850: LD_VAR 0 2
90854: PUSH
90855: LD_INT 1
90857: PLUS
90858: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
90859: LD_VAR 0 3
90863: PPUSH
90864: CALL_OW 256
90868: PUSH
90869: LD_INT 1000
90871: LESS
90872: IFFALSE 90886
// SetLives ( un , 1000 ) ;
90874: LD_VAR 0 3
90878: PPUSH
90879: LD_INT 1000
90881: PPUSH
90882: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
90886: LD_VAR 0 3
90890: PPUSH
90891: LD_INT 81
90893: PUSH
90894: LD_OWVAR 2
90898: PUSH
90899: EMPTY
90900: LIST
90901: LIST
90902: PUSH
90903: LD_INT 91
90905: PUSH
90906: LD_VAR 0 3
90910: PUSH
90911: LD_INT 30
90913: PUSH
90914: EMPTY
90915: LIST
90916: LIST
90917: LIST
90918: PUSH
90919: EMPTY
90920: LIST
90921: LIST
90922: PPUSH
90923: CALL_OW 69
90927: PPUSH
90928: LD_VAR 0 3
90932: PPUSH
90933: CALL_OW 74
90937: PPUSH
90938: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
90942: LD_VAR 0 2
90946: PUSH
90947: LD_INT 60
90949: GREATER
90950: PUSH
90951: LD_VAR 0 3
90955: PPUSH
90956: CALL_OW 301
90960: OR
90961: IFFALSE 90838
// if un then
90963: LD_VAR 0 3
90967: IFFALSE 90978
// RemoveUnit ( un ) ;
90969: LD_VAR 0 3
90973: PPUSH
90974: CALL_OW 64
// end ; end_of_file
90978: PPOPN 3
90980: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
90981: LD_INT 0
90983: PPUSH
90984: PPUSH
90985: PPUSH
90986: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
90987: LD_VAR 0 1
90991: PPUSH
90992: CALL_OW 264
90996: PUSH
90997: LD_EXP 52
91001: EQUAL
91002: IFFALSE 91074
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91004: LD_INT 68
91006: PPUSH
91007: LD_VAR 0 1
91011: PPUSH
91012: CALL_OW 255
91016: PPUSH
91017: CALL_OW 321
91021: PUSH
91022: LD_INT 2
91024: EQUAL
91025: IFFALSE 91037
// eff := 70 else
91027: LD_ADDR_VAR 0 4
91031: PUSH
91032: LD_INT 70
91034: ST_TO_ADDR
91035: GO 91045
// eff := 30 ;
91037: LD_ADDR_VAR 0 4
91041: PUSH
91042: LD_INT 30
91044: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91045: LD_VAR 0 1
91049: PPUSH
91050: CALL_OW 250
91054: PPUSH
91055: LD_VAR 0 1
91059: PPUSH
91060: CALL_OW 251
91064: PPUSH
91065: LD_VAR 0 4
91069: PPUSH
91070: CALL_OW 495
// end ; end ;
91074: LD_VAR 0 2
91078: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
91079: LD_INT 0
91081: PPUSH
// end ;
91082: LD_VAR 0 4
91086: RET
// export function SOS_Command ( cmd ) ; begin
91087: LD_INT 0
91089: PPUSH
// end ;
91090: LD_VAR 0 2
91094: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
91095: LD_VAR 0 1
91099: PUSH
91100: LD_INT 254
91102: EQUAL
91103: PUSH
91104: LD_VAR 0 2
91108: PPUSH
91109: CALL_OW 264
91113: PUSH
91114: LD_EXP 50
91118: EQUAL
91119: AND
91120: PUSH
91121: LD_VAR 0 3
91125: PPUSH
91126: CALL_OW 263
91130: PUSH
91131: LD_INT 3
91133: EQUAL
91134: AND
91135: IFFALSE 91146
// DestroyUnit ( selectedUnit ) ;
91137: LD_VAR 0 3
91141: PPUSH
91142: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91146: LD_VAR 0 1
91150: PUSH
91151: LD_INT 255
91153: EQUAL
91154: PUSH
91155: LD_VAR 0 2
91159: PPUSH
91160: CALL_OW 264
91164: PUSH
91165: LD_INT 14
91167: PUSH
91168: LD_INT 53
91170: PUSH
91171: EMPTY
91172: LIST
91173: LIST
91174: IN
91175: AND
91176: PUSH
91177: LD_VAR 0 4
91181: PPUSH
91182: LD_VAR 0 5
91186: PPUSH
91187: CALL_OW 488
91191: AND
91192: IFFALSE 91216
// CutTreeXYR ( unit , x , y , 12 ) ;
91194: LD_VAR 0 2
91198: PPUSH
91199: LD_VAR 0 4
91203: PPUSH
91204: LD_VAR 0 5
91208: PPUSH
91209: LD_INT 12
91211: PPUSH
91212: CALL 91219 0 4
// end ;
91216: PPOPN 5
91218: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91219: LD_INT 0
91221: PPUSH
91222: PPUSH
91223: PPUSH
91224: PPUSH
91225: PPUSH
91226: PPUSH
91227: PPUSH
91228: PPUSH
91229: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
91230: LD_VAR 0 1
91234: NOT
91235: PUSH
91236: LD_VAR 0 2
91240: PPUSH
91241: LD_VAR 0 3
91245: PPUSH
91246: CALL_OW 488
91250: NOT
91251: OR
91252: PUSH
91253: LD_VAR 0 4
91257: NOT
91258: OR
91259: IFFALSE 91263
// exit ;
91261: GO 91603
// list := [ ] ;
91263: LD_ADDR_VAR 0 13
91267: PUSH
91268: EMPTY
91269: ST_TO_ADDR
// if x - r < 0 then
91270: LD_VAR 0 2
91274: PUSH
91275: LD_VAR 0 4
91279: MINUS
91280: PUSH
91281: LD_INT 0
91283: LESS
91284: IFFALSE 91296
// min_x := 0 else
91286: LD_ADDR_VAR 0 7
91290: PUSH
91291: LD_INT 0
91293: ST_TO_ADDR
91294: GO 91312
// min_x := x - r ;
91296: LD_ADDR_VAR 0 7
91300: PUSH
91301: LD_VAR 0 2
91305: PUSH
91306: LD_VAR 0 4
91310: MINUS
91311: ST_TO_ADDR
// if y - r < 0 then
91312: LD_VAR 0 3
91316: PUSH
91317: LD_VAR 0 4
91321: MINUS
91322: PUSH
91323: LD_INT 0
91325: LESS
91326: IFFALSE 91338
// min_y := 0 else
91328: LD_ADDR_VAR 0 8
91332: PUSH
91333: LD_INT 0
91335: ST_TO_ADDR
91336: GO 91354
// min_y := y - r ;
91338: LD_ADDR_VAR 0 8
91342: PUSH
91343: LD_VAR 0 3
91347: PUSH
91348: LD_VAR 0 4
91352: MINUS
91353: ST_TO_ADDR
// max_x := x + r ;
91354: LD_ADDR_VAR 0 9
91358: PUSH
91359: LD_VAR 0 2
91363: PUSH
91364: LD_VAR 0 4
91368: PLUS
91369: ST_TO_ADDR
// max_y := y + r ;
91370: LD_ADDR_VAR 0 10
91374: PUSH
91375: LD_VAR 0 3
91379: PUSH
91380: LD_VAR 0 4
91384: PLUS
91385: ST_TO_ADDR
// for _x = min_x to max_x do
91386: LD_ADDR_VAR 0 11
91390: PUSH
91391: DOUBLE
91392: LD_VAR 0 7
91396: DEC
91397: ST_TO_ADDR
91398: LD_VAR 0 9
91402: PUSH
91403: FOR_TO
91404: IFFALSE 91521
// for _y = min_y to max_y do
91406: LD_ADDR_VAR 0 12
91410: PUSH
91411: DOUBLE
91412: LD_VAR 0 8
91416: DEC
91417: ST_TO_ADDR
91418: LD_VAR 0 10
91422: PUSH
91423: FOR_TO
91424: IFFALSE 91517
// begin if not ValidHex ( _x , _y ) then
91426: LD_VAR 0 11
91430: PPUSH
91431: LD_VAR 0 12
91435: PPUSH
91436: CALL_OW 488
91440: NOT
91441: IFFALSE 91445
// continue ;
91443: GO 91423
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91445: LD_VAR 0 11
91449: PPUSH
91450: LD_VAR 0 12
91454: PPUSH
91455: CALL_OW 351
91459: PUSH
91460: LD_VAR 0 11
91464: PPUSH
91465: LD_VAR 0 12
91469: PPUSH
91470: CALL_OW 554
91474: AND
91475: IFFALSE 91515
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91477: LD_ADDR_VAR 0 13
91481: PUSH
91482: LD_VAR 0 13
91486: PPUSH
91487: LD_VAR 0 13
91491: PUSH
91492: LD_INT 1
91494: PLUS
91495: PPUSH
91496: LD_VAR 0 11
91500: PUSH
91501: LD_VAR 0 12
91505: PUSH
91506: EMPTY
91507: LIST
91508: LIST
91509: PPUSH
91510: CALL_OW 2
91514: ST_TO_ADDR
// end ;
91515: GO 91423
91517: POP
91518: POP
91519: GO 91403
91521: POP
91522: POP
// if not list then
91523: LD_VAR 0 13
91527: NOT
91528: IFFALSE 91532
// exit ;
91530: GO 91603
// for i in list do
91532: LD_ADDR_VAR 0 6
91536: PUSH
91537: LD_VAR 0 13
91541: PUSH
91542: FOR_IN
91543: IFFALSE 91601
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91545: LD_VAR 0 1
91549: PPUSH
91550: LD_STRING M
91552: PUSH
91553: LD_VAR 0 6
91557: PUSH
91558: LD_INT 1
91560: ARRAY
91561: PUSH
91562: LD_VAR 0 6
91566: PUSH
91567: LD_INT 2
91569: ARRAY
91570: PUSH
91571: LD_INT 0
91573: PUSH
91574: LD_INT 0
91576: PUSH
91577: LD_INT 0
91579: PUSH
91580: LD_INT 0
91582: PUSH
91583: EMPTY
91584: LIST
91585: LIST
91586: LIST
91587: LIST
91588: LIST
91589: LIST
91590: LIST
91591: PUSH
91592: EMPTY
91593: LIST
91594: PPUSH
91595: CALL_OW 447
91599: GO 91542
91601: POP
91602: POP
// end ;
91603: LD_VAR 0 5
91607: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
91608: LD_EXP 161
91612: NOT
91613: IFFALSE 91663
91615: GO 91617
91617: DISABLE
// begin initHack := true ;
91618: LD_ADDR_EXP 161
91622: PUSH
91623: LD_INT 1
91625: ST_TO_ADDR
// hackTanks := [ ] ;
91626: LD_ADDR_EXP 162
91630: PUSH
91631: EMPTY
91632: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
91633: LD_ADDR_EXP 163
91637: PUSH
91638: EMPTY
91639: ST_TO_ADDR
// hackLimit := 3 ;
91640: LD_ADDR_EXP 164
91644: PUSH
91645: LD_INT 3
91647: ST_TO_ADDR
// hackDist := 12 ;
91648: LD_ADDR_EXP 165
91652: PUSH
91653: LD_INT 12
91655: ST_TO_ADDR
// hackCounter := [ ] ;
91656: LD_ADDR_EXP 166
91660: PUSH
91661: EMPTY
91662: ST_TO_ADDR
// end ;
91663: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
91664: LD_EXP 161
91668: PUSH
91669: LD_INT 34
91671: PUSH
91672: LD_EXP 50
91676: PUSH
91677: EMPTY
91678: LIST
91679: LIST
91680: PPUSH
91681: CALL_OW 69
91685: AND
91686: IFFALSE 91941
91688: GO 91690
91690: DISABLE
91691: LD_INT 0
91693: PPUSH
91694: PPUSH
// begin enable ;
91695: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
91696: LD_ADDR_VAR 0 1
91700: PUSH
91701: LD_INT 34
91703: PUSH
91704: LD_EXP 50
91708: PUSH
91709: EMPTY
91710: LIST
91711: LIST
91712: PPUSH
91713: CALL_OW 69
91717: PUSH
91718: FOR_IN
91719: IFFALSE 91939
// begin if not i in hackTanks then
91721: LD_VAR 0 1
91725: PUSH
91726: LD_EXP 162
91730: IN
91731: NOT
91732: IFFALSE 91815
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
91734: LD_ADDR_EXP 162
91738: PUSH
91739: LD_EXP 162
91743: PPUSH
91744: LD_EXP 162
91748: PUSH
91749: LD_INT 1
91751: PLUS
91752: PPUSH
91753: LD_VAR 0 1
91757: PPUSH
91758: CALL_OW 1
91762: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
91763: LD_ADDR_EXP 163
91767: PUSH
91768: LD_EXP 163
91772: PPUSH
91773: LD_EXP 163
91777: PUSH
91778: LD_INT 1
91780: PLUS
91781: PPUSH
91782: EMPTY
91783: PPUSH
91784: CALL_OW 1
91788: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
91789: LD_ADDR_EXP 166
91793: PUSH
91794: LD_EXP 166
91798: PPUSH
91799: LD_EXP 166
91803: PUSH
91804: LD_INT 1
91806: PLUS
91807: PPUSH
91808: EMPTY
91809: PPUSH
91810: CALL_OW 1
91814: ST_TO_ADDR
// end ; if not IsOk ( i ) then
91815: LD_VAR 0 1
91819: PPUSH
91820: CALL_OW 302
91824: NOT
91825: IFFALSE 91838
// begin HackUnlinkAll ( i ) ;
91827: LD_VAR 0 1
91831: PPUSH
91832: CALL 91944 0 1
// continue ;
91836: GO 91718
// end ; HackCheckCapturedStatus ( i ) ;
91838: LD_VAR 0 1
91842: PPUSH
91843: CALL 92387 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
91847: LD_ADDR_VAR 0 2
91851: PUSH
91852: LD_INT 81
91854: PUSH
91855: LD_VAR 0 1
91859: PPUSH
91860: CALL_OW 255
91864: PUSH
91865: EMPTY
91866: LIST
91867: LIST
91868: PUSH
91869: LD_INT 33
91871: PUSH
91872: LD_INT 3
91874: PUSH
91875: EMPTY
91876: LIST
91877: LIST
91878: PUSH
91879: LD_INT 91
91881: PUSH
91882: LD_VAR 0 1
91886: PUSH
91887: LD_EXP 165
91891: PUSH
91892: EMPTY
91893: LIST
91894: LIST
91895: LIST
91896: PUSH
91897: LD_INT 50
91899: PUSH
91900: EMPTY
91901: LIST
91902: PUSH
91903: EMPTY
91904: LIST
91905: LIST
91906: LIST
91907: LIST
91908: PPUSH
91909: CALL_OW 69
91913: ST_TO_ADDR
// if not tmp then
91914: LD_VAR 0 2
91918: NOT
91919: IFFALSE 91923
// continue ;
91921: GO 91718
// HackLink ( i , tmp ) ;
91923: LD_VAR 0 1
91927: PPUSH
91928: LD_VAR 0 2
91932: PPUSH
91933: CALL 92080 0 2
// end ;
91937: GO 91718
91939: POP
91940: POP
// end ;
91941: PPOPN 2
91943: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
91944: LD_INT 0
91946: PPUSH
91947: PPUSH
91948: PPUSH
// if not hack in hackTanks then
91949: LD_VAR 0 1
91953: PUSH
91954: LD_EXP 162
91958: IN
91959: NOT
91960: IFFALSE 91964
// exit ;
91962: GO 92075
// index := GetElementIndex ( hackTanks , hack ) ;
91964: LD_ADDR_VAR 0 4
91968: PUSH
91969: LD_EXP 162
91973: PPUSH
91974: LD_VAR 0 1
91978: PPUSH
91979: CALL 18149 0 2
91983: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
91984: LD_EXP 163
91988: PUSH
91989: LD_VAR 0 4
91993: ARRAY
91994: IFFALSE 92075
// begin for i in hackTanksCaptured [ index ] do
91996: LD_ADDR_VAR 0 3
92000: PUSH
92001: LD_EXP 163
92005: PUSH
92006: LD_VAR 0 4
92010: ARRAY
92011: PUSH
92012: FOR_IN
92013: IFFALSE 92039
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92015: LD_VAR 0 3
92019: PUSH
92020: LD_INT 1
92022: ARRAY
92023: PPUSH
92024: LD_VAR 0 3
92028: PUSH
92029: LD_INT 2
92031: ARRAY
92032: PPUSH
92033: CALL_OW 235
92037: GO 92012
92039: POP
92040: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92041: LD_ADDR_EXP 163
92045: PUSH
92046: LD_EXP 163
92050: PPUSH
92051: LD_VAR 0 4
92055: PPUSH
92056: EMPTY
92057: PPUSH
92058: CALL_OW 1
92062: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92063: LD_VAR 0 1
92067: PPUSH
92068: LD_INT 0
92070: PPUSH
92071: CALL_OW 505
// end ; end ;
92075: LD_VAR 0 2
92079: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92080: LD_INT 0
92082: PPUSH
92083: PPUSH
92084: PPUSH
// if not hack in hackTanks or not vehicles then
92085: LD_VAR 0 1
92089: PUSH
92090: LD_EXP 162
92094: IN
92095: NOT
92096: PUSH
92097: LD_VAR 0 2
92101: NOT
92102: OR
92103: IFFALSE 92107
// exit ;
92105: GO 92382
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92107: LD_ADDR_VAR 0 2
92111: PUSH
92112: LD_VAR 0 1
92116: PPUSH
92117: LD_VAR 0 2
92121: PPUSH
92122: LD_INT 1
92124: PPUSH
92125: LD_INT 1
92127: PPUSH
92128: CALL 18799 0 4
92132: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92133: LD_ADDR_VAR 0 5
92137: PUSH
92138: LD_EXP 162
92142: PPUSH
92143: LD_VAR 0 1
92147: PPUSH
92148: CALL 18149 0 2
92152: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92153: LD_EXP 163
92157: PUSH
92158: LD_VAR 0 5
92162: ARRAY
92163: PUSH
92164: LD_EXP 164
92168: LESS
92169: IFFALSE 92358
// begin for i := 1 to vehicles do
92171: LD_ADDR_VAR 0 4
92175: PUSH
92176: DOUBLE
92177: LD_INT 1
92179: DEC
92180: ST_TO_ADDR
92181: LD_VAR 0 2
92185: PUSH
92186: FOR_TO
92187: IFFALSE 92356
// begin if hackTanksCaptured [ index ] = hackLimit then
92189: LD_EXP 163
92193: PUSH
92194: LD_VAR 0 5
92198: ARRAY
92199: PUSH
92200: LD_EXP 164
92204: EQUAL
92205: IFFALSE 92209
// break ;
92207: GO 92356
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92209: LD_ADDR_EXP 166
92213: PUSH
92214: LD_EXP 166
92218: PPUSH
92219: LD_VAR 0 5
92223: PPUSH
92224: LD_EXP 166
92228: PUSH
92229: LD_VAR 0 5
92233: ARRAY
92234: PUSH
92235: LD_INT 1
92237: PLUS
92238: PPUSH
92239: CALL_OW 1
92243: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92244: LD_ADDR_EXP 163
92248: PUSH
92249: LD_EXP 163
92253: PPUSH
92254: LD_VAR 0 5
92258: PUSH
92259: LD_EXP 163
92263: PUSH
92264: LD_VAR 0 5
92268: ARRAY
92269: PUSH
92270: LD_INT 1
92272: PLUS
92273: PUSH
92274: EMPTY
92275: LIST
92276: LIST
92277: PPUSH
92278: LD_VAR 0 2
92282: PUSH
92283: LD_VAR 0 4
92287: ARRAY
92288: PUSH
92289: LD_VAR 0 2
92293: PUSH
92294: LD_VAR 0 4
92298: ARRAY
92299: PPUSH
92300: CALL_OW 255
92304: PUSH
92305: EMPTY
92306: LIST
92307: LIST
92308: PPUSH
92309: CALL 18364 0 3
92313: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92314: LD_VAR 0 2
92318: PUSH
92319: LD_VAR 0 4
92323: ARRAY
92324: PPUSH
92325: LD_VAR 0 1
92329: PPUSH
92330: CALL_OW 255
92334: PPUSH
92335: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92339: LD_VAR 0 2
92343: PUSH
92344: LD_VAR 0 4
92348: ARRAY
92349: PPUSH
92350: CALL_OW 141
// end ;
92354: GO 92186
92356: POP
92357: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92358: LD_VAR 0 1
92362: PPUSH
92363: LD_EXP 163
92367: PUSH
92368: LD_VAR 0 5
92372: ARRAY
92373: PUSH
92374: LD_INT 0
92376: PLUS
92377: PPUSH
92378: CALL_OW 505
// end ;
92382: LD_VAR 0 3
92386: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92387: LD_INT 0
92389: PPUSH
92390: PPUSH
92391: PPUSH
92392: PPUSH
// if not hack in hackTanks then
92393: LD_VAR 0 1
92397: PUSH
92398: LD_EXP 162
92402: IN
92403: NOT
92404: IFFALSE 92408
// exit ;
92406: GO 92648
// index := GetElementIndex ( hackTanks , hack ) ;
92408: LD_ADDR_VAR 0 4
92412: PUSH
92413: LD_EXP 162
92417: PPUSH
92418: LD_VAR 0 1
92422: PPUSH
92423: CALL 18149 0 2
92427: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92428: LD_ADDR_VAR 0 3
92432: PUSH
92433: DOUBLE
92434: LD_EXP 163
92438: PUSH
92439: LD_VAR 0 4
92443: ARRAY
92444: INC
92445: ST_TO_ADDR
92446: LD_INT 1
92448: PUSH
92449: FOR_DOWNTO
92450: IFFALSE 92622
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92452: LD_ADDR_VAR 0 5
92456: PUSH
92457: LD_EXP 163
92461: PUSH
92462: LD_VAR 0 4
92466: ARRAY
92467: PUSH
92468: LD_VAR 0 3
92472: ARRAY
92473: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92474: LD_VAR 0 5
92478: PUSH
92479: LD_INT 1
92481: ARRAY
92482: PPUSH
92483: CALL_OW 302
92487: NOT
92488: PUSH
92489: LD_VAR 0 5
92493: PUSH
92494: LD_INT 1
92496: ARRAY
92497: PPUSH
92498: CALL_OW 255
92502: PUSH
92503: LD_VAR 0 1
92507: PPUSH
92508: CALL_OW 255
92512: NONEQUAL
92513: OR
92514: IFFALSE 92620
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92516: LD_VAR 0 5
92520: PUSH
92521: LD_INT 1
92523: ARRAY
92524: PPUSH
92525: CALL_OW 305
92529: PUSH
92530: LD_VAR 0 5
92534: PUSH
92535: LD_INT 1
92537: ARRAY
92538: PPUSH
92539: CALL_OW 255
92543: PUSH
92544: LD_VAR 0 1
92548: PPUSH
92549: CALL_OW 255
92553: EQUAL
92554: AND
92555: IFFALSE 92579
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92557: LD_VAR 0 5
92561: PUSH
92562: LD_INT 1
92564: ARRAY
92565: PPUSH
92566: LD_VAR 0 5
92570: PUSH
92571: LD_INT 2
92573: ARRAY
92574: PPUSH
92575: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92579: LD_ADDR_EXP 163
92583: PUSH
92584: LD_EXP 163
92588: PPUSH
92589: LD_VAR 0 4
92593: PPUSH
92594: LD_EXP 163
92598: PUSH
92599: LD_VAR 0 4
92603: ARRAY
92604: PPUSH
92605: LD_VAR 0 3
92609: PPUSH
92610: CALL_OW 3
92614: PPUSH
92615: CALL_OW 1
92619: ST_TO_ADDR
// end ; end ;
92620: GO 92449
92622: POP
92623: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92624: LD_VAR 0 1
92628: PPUSH
92629: LD_EXP 163
92633: PUSH
92634: LD_VAR 0 4
92638: ARRAY
92639: PUSH
92640: LD_INT 0
92642: PLUS
92643: PPUSH
92644: CALL_OW 505
// end ; end_of_file
92648: LD_VAR 0 2
92652: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
92653: LD_INT 0
92655: PPUSH
92656: PPUSH
92657: PPUSH
92658: PPUSH
92659: PPUSH
92660: PPUSH
92661: PPUSH
92662: PPUSH
92663: PPUSH
92664: PPUSH
92665: PPUSH
92666: PPUSH
92667: PPUSH
92668: PPUSH
92669: PPUSH
92670: PPUSH
92671: PPUSH
92672: PPUSH
92673: PPUSH
92674: PPUSH
92675: PPUSH
92676: PPUSH
92677: PPUSH
92678: PPUSH
92679: PPUSH
92680: PPUSH
92681: PPUSH
92682: PPUSH
92683: PPUSH
92684: PPUSH
92685: PPUSH
92686: PPUSH
92687: PPUSH
92688: PPUSH
// if not list then
92689: LD_VAR 0 1
92693: NOT
92694: IFFALSE 92698
// exit ;
92696: GO 97357
// base := list [ 1 ] ;
92698: LD_ADDR_VAR 0 3
92702: PUSH
92703: LD_VAR 0 1
92707: PUSH
92708: LD_INT 1
92710: ARRAY
92711: ST_TO_ADDR
// group := list [ 2 ] ;
92712: LD_ADDR_VAR 0 4
92716: PUSH
92717: LD_VAR 0 1
92721: PUSH
92722: LD_INT 2
92724: ARRAY
92725: ST_TO_ADDR
// path := list [ 3 ] ;
92726: LD_ADDR_VAR 0 5
92730: PUSH
92731: LD_VAR 0 1
92735: PUSH
92736: LD_INT 3
92738: ARRAY
92739: ST_TO_ADDR
// flags := list [ 4 ] ;
92740: LD_ADDR_VAR 0 6
92744: PUSH
92745: LD_VAR 0 1
92749: PUSH
92750: LD_INT 4
92752: ARRAY
92753: ST_TO_ADDR
// mined := [ ] ;
92754: LD_ADDR_VAR 0 27
92758: PUSH
92759: EMPTY
92760: ST_TO_ADDR
// bombed := [ ] ;
92761: LD_ADDR_VAR 0 28
92765: PUSH
92766: EMPTY
92767: ST_TO_ADDR
// healers := [ ] ;
92768: LD_ADDR_VAR 0 31
92772: PUSH
92773: EMPTY
92774: ST_TO_ADDR
// to_heal := [ ] ;
92775: LD_ADDR_VAR 0 30
92779: PUSH
92780: EMPTY
92781: ST_TO_ADDR
// repairs := [ ] ;
92782: LD_ADDR_VAR 0 33
92786: PUSH
92787: EMPTY
92788: ST_TO_ADDR
// to_repair := [ ] ;
92789: LD_ADDR_VAR 0 32
92793: PUSH
92794: EMPTY
92795: ST_TO_ADDR
// if not group or not path then
92796: LD_VAR 0 4
92800: NOT
92801: PUSH
92802: LD_VAR 0 5
92806: NOT
92807: OR
92808: IFFALSE 92812
// exit ;
92810: GO 97357
// side := GetSide ( group [ 1 ] ) ;
92812: LD_ADDR_VAR 0 35
92816: PUSH
92817: LD_VAR 0 4
92821: PUSH
92822: LD_INT 1
92824: ARRAY
92825: PPUSH
92826: CALL_OW 255
92830: ST_TO_ADDR
// if flags then
92831: LD_VAR 0 6
92835: IFFALSE 92979
// begin f_ignore_area := flags [ 1 ] ;
92837: LD_ADDR_VAR 0 17
92841: PUSH
92842: LD_VAR 0 6
92846: PUSH
92847: LD_INT 1
92849: ARRAY
92850: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
92851: LD_ADDR_VAR 0 18
92855: PUSH
92856: LD_VAR 0 6
92860: PUSH
92861: LD_INT 2
92863: ARRAY
92864: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
92865: LD_ADDR_VAR 0 19
92869: PUSH
92870: LD_VAR 0 6
92874: PUSH
92875: LD_INT 3
92877: ARRAY
92878: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
92879: LD_ADDR_VAR 0 20
92883: PUSH
92884: LD_VAR 0 6
92888: PUSH
92889: LD_INT 4
92891: ARRAY
92892: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
92893: LD_ADDR_VAR 0 21
92897: PUSH
92898: LD_VAR 0 6
92902: PUSH
92903: LD_INT 5
92905: ARRAY
92906: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
92907: LD_ADDR_VAR 0 22
92911: PUSH
92912: LD_VAR 0 6
92916: PUSH
92917: LD_INT 6
92919: ARRAY
92920: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
92921: LD_ADDR_VAR 0 23
92925: PUSH
92926: LD_VAR 0 6
92930: PUSH
92931: LD_INT 7
92933: ARRAY
92934: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
92935: LD_ADDR_VAR 0 24
92939: PUSH
92940: LD_VAR 0 6
92944: PUSH
92945: LD_INT 8
92947: ARRAY
92948: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
92949: LD_ADDR_VAR 0 25
92953: PUSH
92954: LD_VAR 0 6
92958: PUSH
92959: LD_INT 9
92961: ARRAY
92962: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
92963: LD_ADDR_VAR 0 26
92967: PUSH
92968: LD_VAR 0 6
92972: PUSH
92973: LD_INT 10
92975: ARRAY
92976: ST_TO_ADDR
// end else
92977: GO 93059
// begin f_ignore_area := false ;
92979: LD_ADDR_VAR 0 17
92983: PUSH
92984: LD_INT 0
92986: ST_TO_ADDR
// f_capture := false ;
92987: LD_ADDR_VAR 0 18
92991: PUSH
92992: LD_INT 0
92994: ST_TO_ADDR
// f_ignore_civ := false ;
92995: LD_ADDR_VAR 0 19
92999: PUSH
93000: LD_INT 0
93002: ST_TO_ADDR
// f_murder := false ;
93003: LD_ADDR_VAR 0 20
93007: PUSH
93008: LD_INT 0
93010: ST_TO_ADDR
// f_mines := false ;
93011: LD_ADDR_VAR 0 21
93015: PUSH
93016: LD_INT 0
93018: ST_TO_ADDR
// f_repair := false ;
93019: LD_ADDR_VAR 0 22
93023: PUSH
93024: LD_INT 0
93026: ST_TO_ADDR
// f_heal := false ;
93027: LD_ADDR_VAR 0 23
93031: PUSH
93032: LD_INT 0
93034: ST_TO_ADDR
// f_spacetime := false ;
93035: LD_ADDR_VAR 0 24
93039: PUSH
93040: LD_INT 0
93042: ST_TO_ADDR
// f_attack_depot := false ;
93043: LD_ADDR_VAR 0 25
93047: PUSH
93048: LD_INT 0
93050: ST_TO_ADDR
// f_crawl := false ;
93051: LD_ADDR_VAR 0 26
93055: PUSH
93056: LD_INT 0
93058: ST_TO_ADDR
// end ; if f_heal then
93059: LD_VAR 0 23
93063: IFFALSE 93090
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
93065: LD_ADDR_VAR 0 31
93069: PUSH
93070: LD_VAR 0 4
93074: PPUSH
93075: LD_INT 25
93077: PUSH
93078: LD_INT 4
93080: PUSH
93081: EMPTY
93082: LIST
93083: LIST
93084: PPUSH
93085: CALL_OW 72
93089: ST_TO_ADDR
// if f_repair then
93090: LD_VAR 0 22
93094: IFFALSE 93121
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
93096: LD_ADDR_VAR 0 33
93100: PUSH
93101: LD_VAR 0 4
93105: PPUSH
93106: LD_INT 25
93108: PUSH
93109: LD_INT 3
93111: PUSH
93112: EMPTY
93113: LIST
93114: LIST
93115: PPUSH
93116: CALL_OW 72
93120: ST_TO_ADDR
// units_path := [ ] ;
93121: LD_ADDR_VAR 0 16
93125: PUSH
93126: EMPTY
93127: ST_TO_ADDR
// for i = 1 to group do
93128: LD_ADDR_VAR 0 7
93132: PUSH
93133: DOUBLE
93134: LD_INT 1
93136: DEC
93137: ST_TO_ADDR
93138: LD_VAR 0 4
93142: PUSH
93143: FOR_TO
93144: IFFALSE 93173
// units_path := Replace ( units_path , i , path ) ;
93146: LD_ADDR_VAR 0 16
93150: PUSH
93151: LD_VAR 0 16
93155: PPUSH
93156: LD_VAR 0 7
93160: PPUSH
93161: LD_VAR 0 5
93165: PPUSH
93166: CALL_OW 1
93170: ST_TO_ADDR
93171: GO 93143
93173: POP
93174: POP
// repeat for i = group downto 1 do
93175: LD_ADDR_VAR 0 7
93179: PUSH
93180: DOUBLE
93181: LD_VAR 0 4
93185: INC
93186: ST_TO_ADDR
93187: LD_INT 1
93189: PUSH
93190: FOR_DOWNTO
93191: IFFALSE 97313
// begin wait ( 5 ) ;
93193: LD_INT 5
93195: PPUSH
93196: CALL_OW 67
// tmp := [ ] ;
93200: LD_ADDR_VAR 0 14
93204: PUSH
93205: EMPTY
93206: ST_TO_ADDR
// attacking := false ;
93207: LD_ADDR_VAR 0 29
93211: PUSH
93212: LD_INT 0
93214: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
93215: LD_VAR 0 4
93219: PUSH
93220: LD_VAR 0 7
93224: ARRAY
93225: PPUSH
93226: CALL_OW 301
93230: PUSH
93231: LD_VAR 0 4
93235: PUSH
93236: LD_VAR 0 7
93240: ARRAY
93241: NOT
93242: OR
93243: IFFALSE 93352
// begin if GetType ( group [ i ] ) = unit_human then
93245: LD_VAR 0 4
93249: PUSH
93250: LD_VAR 0 7
93254: ARRAY
93255: PPUSH
93256: CALL_OW 247
93260: PUSH
93261: LD_INT 1
93263: EQUAL
93264: IFFALSE 93310
// begin to_heal := to_heal diff group [ i ] ;
93266: LD_ADDR_VAR 0 30
93270: PUSH
93271: LD_VAR 0 30
93275: PUSH
93276: LD_VAR 0 4
93280: PUSH
93281: LD_VAR 0 7
93285: ARRAY
93286: DIFF
93287: ST_TO_ADDR
// healers := healers diff group [ i ] ;
93288: LD_ADDR_VAR 0 31
93292: PUSH
93293: LD_VAR 0 31
93297: PUSH
93298: LD_VAR 0 4
93302: PUSH
93303: LD_VAR 0 7
93307: ARRAY
93308: DIFF
93309: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
93310: LD_ADDR_VAR 0 4
93314: PUSH
93315: LD_VAR 0 4
93319: PPUSH
93320: LD_VAR 0 7
93324: PPUSH
93325: CALL_OW 3
93329: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
93330: LD_ADDR_VAR 0 16
93334: PUSH
93335: LD_VAR 0 16
93339: PPUSH
93340: LD_VAR 0 7
93344: PPUSH
93345: CALL_OW 3
93349: ST_TO_ADDR
// continue ;
93350: GO 93190
// end ; if f_repair then
93352: LD_VAR 0 22
93356: IFFALSE 93845
// begin if GetType ( group [ i ] ) = unit_vehicle then
93358: LD_VAR 0 4
93362: PUSH
93363: LD_VAR 0 7
93367: ARRAY
93368: PPUSH
93369: CALL_OW 247
93373: PUSH
93374: LD_INT 2
93376: EQUAL
93377: IFFALSE 93567
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
93379: LD_VAR 0 4
93383: PUSH
93384: LD_VAR 0 7
93388: ARRAY
93389: PPUSH
93390: CALL_OW 256
93394: PUSH
93395: LD_INT 700
93397: LESS
93398: PUSH
93399: LD_VAR 0 4
93403: PUSH
93404: LD_VAR 0 7
93408: ARRAY
93409: PUSH
93410: LD_VAR 0 32
93414: IN
93415: NOT
93416: AND
93417: IFFALSE 93441
// to_repair := to_repair union group [ i ] ;
93419: LD_ADDR_VAR 0 32
93423: PUSH
93424: LD_VAR 0 32
93428: PUSH
93429: LD_VAR 0 4
93433: PUSH
93434: LD_VAR 0 7
93438: ARRAY
93439: UNION
93440: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
93441: LD_VAR 0 4
93445: PUSH
93446: LD_VAR 0 7
93450: ARRAY
93451: PPUSH
93452: CALL_OW 256
93456: PUSH
93457: LD_INT 1000
93459: EQUAL
93460: PUSH
93461: LD_VAR 0 4
93465: PUSH
93466: LD_VAR 0 7
93470: ARRAY
93471: PUSH
93472: LD_VAR 0 32
93476: IN
93477: AND
93478: IFFALSE 93502
// to_repair := to_repair diff group [ i ] ;
93480: LD_ADDR_VAR 0 32
93484: PUSH
93485: LD_VAR 0 32
93489: PUSH
93490: LD_VAR 0 4
93494: PUSH
93495: LD_VAR 0 7
93499: ARRAY
93500: DIFF
93501: ST_TO_ADDR
// if group [ i ] in to_repair then
93502: LD_VAR 0 4
93506: PUSH
93507: LD_VAR 0 7
93511: ARRAY
93512: PUSH
93513: LD_VAR 0 32
93517: IN
93518: IFFALSE 93565
// begin if not IsInArea ( group [ i ] , f_repair ) then
93520: LD_VAR 0 4
93524: PUSH
93525: LD_VAR 0 7
93529: ARRAY
93530: PPUSH
93531: LD_VAR 0 22
93535: PPUSH
93536: CALL_OW 308
93540: NOT
93541: IFFALSE 93563
// ComMoveToArea ( group [ i ] , f_repair ) ;
93543: LD_VAR 0 4
93547: PUSH
93548: LD_VAR 0 7
93552: ARRAY
93553: PPUSH
93554: LD_VAR 0 22
93558: PPUSH
93559: CALL_OW 113
// continue ;
93563: GO 93190
// end ; end else
93565: GO 93845
// if group [ i ] in repairs then
93567: LD_VAR 0 4
93571: PUSH
93572: LD_VAR 0 7
93576: ARRAY
93577: PUSH
93578: LD_VAR 0 33
93582: IN
93583: IFFALSE 93845
// begin if IsInUnit ( group [ i ] ) then
93585: LD_VAR 0 4
93589: PUSH
93590: LD_VAR 0 7
93594: ARRAY
93595: PPUSH
93596: CALL_OW 310
93600: IFFALSE 93668
// begin z := IsInUnit ( group [ i ] ) ;
93602: LD_ADDR_VAR 0 13
93606: PUSH
93607: LD_VAR 0 4
93611: PUSH
93612: LD_VAR 0 7
93616: ARRAY
93617: PPUSH
93618: CALL_OW 310
93622: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
93623: LD_VAR 0 13
93627: PUSH
93628: LD_VAR 0 32
93632: IN
93633: PUSH
93634: LD_VAR 0 13
93638: PPUSH
93639: LD_VAR 0 22
93643: PPUSH
93644: CALL_OW 308
93648: AND
93649: IFFALSE 93666
// ComExitVehicle ( group [ i ] ) ;
93651: LD_VAR 0 4
93655: PUSH
93656: LD_VAR 0 7
93660: ARRAY
93661: PPUSH
93662: CALL_OW 121
// end else
93666: GO 93845
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
93668: LD_ADDR_VAR 0 13
93672: PUSH
93673: LD_VAR 0 4
93677: PPUSH
93678: LD_INT 95
93680: PUSH
93681: LD_VAR 0 22
93685: PUSH
93686: EMPTY
93687: LIST
93688: LIST
93689: PUSH
93690: LD_INT 58
93692: PUSH
93693: EMPTY
93694: LIST
93695: PUSH
93696: EMPTY
93697: LIST
93698: LIST
93699: PPUSH
93700: CALL_OW 72
93704: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
93705: LD_VAR 0 4
93709: PUSH
93710: LD_VAR 0 7
93714: ARRAY
93715: PPUSH
93716: CALL_OW 314
93720: NOT
93721: IFFALSE 93843
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
93723: LD_ADDR_VAR 0 10
93727: PUSH
93728: LD_VAR 0 13
93732: PPUSH
93733: LD_VAR 0 4
93737: PUSH
93738: LD_VAR 0 7
93742: ARRAY
93743: PPUSH
93744: CALL_OW 74
93748: ST_TO_ADDR
// if not x then
93749: LD_VAR 0 10
93753: NOT
93754: IFFALSE 93758
// continue ;
93756: GO 93190
// if GetLives ( x ) < 1000 then
93758: LD_VAR 0 10
93762: PPUSH
93763: CALL_OW 256
93767: PUSH
93768: LD_INT 1000
93770: LESS
93771: IFFALSE 93795
// ComRepairVehicle ( group [ i ] , x ) else
93773: LD_VAR 0 4
93777: PUSH
93778: LD_VAR 0 7
93782: ARRAY
93783: PPUSH
93784: LD_VAR 0 10
93788: PPUSH
93789: CALL_OW 129
93793: GO 93843
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
93795: LD_VAR 0 23
93799: PUSH
93800: LD_VAR 0 4
93804: PUSH
93805: LD_VAR 0 7
93809: ARRAY
93810: PPUSH
93811: CALL_OW 256
93815: PUSH
93816: LD_INT 1000
93818: LESS
93819: AND
93820: NOT
93821: IFFALSE 93843
// ComEnterUnit ( group [ i ] , x ) ;
93823: LD_VAR 0 4
93827: PUSH
93828: LD_VAR 0 7
93832: ARRAY
93833: PPUSH
93834: LD_VAR 0 10
93838: PPUSH
93839: CALL_OW 120
// end ; continue ;
93843: GO 93190
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
93845: LD_VAR 0 23
93849: PUSH
93850: LD_VAR 0 4
93854: PUSH
93855: LD_VAR 0 7
93859: ARRAY
93860: PPUSH
93861: CALL_OW 247
93865: PUSH
93866: LD_INT 1
93868: EQUAL
93869: AND
93870: IFFALSE 94348
// begin if group [ i ] in healers then
93872: LD_VAR 0 4
93876: PUSH
93877: LD_VAR 0 7
93881: ARRAY
93882: PUSH
93883: LD_VAR 0 31
93887: IN
93888: IFFALSE 94161
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
93890: LD_VAR 0 4
93894: PUSH
93895: LD_VAR 0 7
93899: ARRAY
93900: PPUSH
93901: LD_VAR 0 23
93905: PPUSH
93906: CALL_OW 308
93910: NOT
93911: PUSH
93912: LD_VAR 0 4
93916: PUSH
93917: LD_VAR 0 7
93921: ARRAY
93922: PPUSH
93923: CALL_OW 314
93927: NOT
93928: AND
93929: IFFALSE 93953
// ComMoveToArea ( group [ i ] , f_heal ) else
93931: LD_VAR 0 4
93935: PUSH
93936: LD_VAR 0 7
93940: ARRAY
93941: PPUSH
93942: LD_VAR 0 23
93946: PPUSH
93947: CALL_OW 113
93951: GO 94159
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
93953: LD_VAR 0 4
93957: PUSH
93958: LD_VAR 0 7
93962: ARRAY
93963: PPUSH
93964: CALL 46736 0 1
93968: PPUSH
93969: CALL_OW 256
93973: PUSH
93974: LD_INT 1000
93976: EQUAL
93977: IFFALSE 93996
// ComStop ( group [ i ] ) else
93979: LD_VAR 0 4
93983: PUSH
93984: LD_VAR 0 7
93988: ARRAY
93989: PPUSH
93990: CALL_OW 141
93994: GO 94159
// if not HasTask ( group [ i ] ) and to_heal then
93996: LD_VAR 0 4
94000: PUSH
94001: LD_VAR 0 7
94005: ARRAY
94006: PPUSH
94007: CALL_OW 314
94011: NOT
94012: PUSH
94013: LD_VAR 0 30
94017: AND
94018: IFFALSE 94159
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
94020: LD_ADDR_VAR 0 13
94024: PUSH
94025: LD_VAR 0 30
94029: PPUSH
94030: LD_INT 3
94032: PUSH
94033: LD_INT 54
94035: PUSH
94036: EMPTY
94037: LIST
94038: PUSH
94039: EMPTY
94040: LIST
94041: LIST
94042: PPUSH
94043: CALL_OW 72
94047: PPUSH
94048: LD_VAR 0 4
94052: PUSH
94053: LD_VAR 0 7
94057: ARRAY
94058: PPUSH
94059: CALL_OW 74
94063: ST_TO_ADDR
// if z then
94064: LD_VAR 0 13
94068: IFFALSE 94159
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
94070: LD_INT 91
94072: PUSH
94073: LD_VAR 0 13
94077: PUSH
94078: LD_INT 10
94080: PUSH
94081: EMPTY
94082: LIST
94083: LIST
94084: LIST
94085: PUSH
94086: LD_INT 81
94088: PUSH
94089: LD_VAR 0 13
94093: PPUSH
94094: CALL_OW 255
94098: PUSH
94099: EMPTY
94100: LIST
94101: LIST
94102: PUSH
94103: EMPTY
94104: LIST
94105: LIST
94106: PPUSH
94107: CALL_OW 69
94111: PUSH
94112: LD_INT 0
94114: EQUAL
94115: IFFALSE 94139
// ComHeal ( group [ i ] , z ) else
94117: LD_VAR 0 4
94121: PUSH
94122: LD_VAR 0 7
94126: ARRAY
94127: PPUSH
94128: LD_VAR 0 13
94132: PPUSH
94133: CALL_OW 128
94137: GO 94159
// ComMoveToArea ( group [ i ] , f_heal ) ;
94139: LD_VAR 0 4
94143: PUSH
94144: LD_VAR 0 7
94148: ARRAY
94149: PPUSH
94150: LD_VAR 0 23
94154: PPUSH
94155: CALL_OW 113
// end ; continue ;
94159: GO 93190
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
94161: LD_VAR 0 4
94165: PUSH
94166: LD_VAR 0 7
94170: ARRAY
94171: PPUSH
94172: CALL_OW 256
94176: PUSH
94177: LD_INT 700
94179: LESS
94180: PUSH
94181: LD_VAR 0 4
94185: PUSH
94186: LD_VAR 0 7
94190: ARRAY
94191: PUSH
94192: LD_VAR 0 30
94196: IN
94197: NOT
94198: AND
94199: IFFALSE 94223
// to_heal := to_heal union group [ i ] ;
94201: LD_ADDR_VAR 0 30
94205: PUSH
94206: LD_VAR 0 30
94210: PUSH
94211: LD_VAR 0 4
94215: PUSH
94216: LD_VAR 0 7
94220: ARRAY
94221: UNION
94222: ST_TO_ADDR
// if group [ i ] in to_heal then
94223: LD_VAR 0 4
94227: PUSH
94228: LD_VAR 0 7
94232: ARRAY
94233: PUSH
94234: LD_VAR 0 30
94238: IN
94239: IFFALSE 94348
// begin if GetLives ( group [ i ] ) = 1000 then
94241: LD_VAR 0 4
94245: PUSH
94246: LD_VAR 0 7
94250: ARRAY
94251: PPUSH
94252: CALL_OW 256
94256: PUSH
94257: LD_INT 1000
94259: EQUAL
94260: IFFALSE 94286
// to_heal := to_heal diff group [ i ] else
94262: LD_ADDR_VAR 0 30
94266: PUSH
94267: LD_VAR 0 30
94271: PUSH
94272: LD_VAR 0 4
94276: PUSH
94277: LD_VAR 0 7
94281: ARRAY
94282: DIFF
94283: ST_TO_ADDR
94284: GO 94348
// begin if not IsInArea ( group [ i ] , to_heal ) then
94286: LD_VAR 0 4
94290: PUSH
94291: LD_VAR 0 7
94295: ARRAY
94296: PPUSH
94297: LD_VAR 0 30
94301: PPUSH
94302: CALL_OW 308
94306: NOT
94307: IFFALSE 94331
// ComMoveToArea ( group [ i ] , f_heal ) else
94309: LD_VAR 0 4
94313: PUSH
94314: LD_VAR 0 7
94318: ARRAY
94319: PPUSH
94320: LD_VAR 0 23
94324: PPUSH
94325: CALL_OW 113
94329: GO 94346
// ComHold ( group [ i ] ) ;
94331: LD_VAR 0 4
94335: PUSH
94336: LD_VAR 0 7
94340: ARRAY
94341: PPUSH
94342: CALL_OW 140
// continue ;
94346: GO 93190
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
94348: LD_VAR 0 4
94352: PUSH
94353: LD_VAR 0 7
94357: ARRAY
94358: PPUSH
94359: LD_INT 10
94361: PPUSH
94362: CALL 45156 0 2
94366: NOT
94367: PUSH
94368: LD_VAR 0 16
94372: PUSH
94373: LD_VAR 0 7
94377: ARRAY
94378: PUSH
94379: EMPTY
94380: EQUAL
94381: NOT
94382: AND
94383: IFFALSE 94649
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
94385: LD_VAR 0 4
94389: PUSH
94390: LD_VAR 0 7
94394: ARRAY
94395: PPUSH
94396: CALL_OW 262
94400: PUSH
94401: LD_INT 1
94403: PUSH
94404: LD_INT 2
94406: PUSH
94407: EMPTY
94408: LIST
94409: LIST
94410: IN
94411: IFFALSE 94452
// if GetFuel ( group [ i ] ) < 10 then
94413: LD_VAR 0 4
94417: PUSH
94418: LD_VAR 0 7
94422: ARRAY
94423: PPUSH
94424: CALL_OW 261
94428: PUSH
94429: LD_INT 10
94431: LESS
94432: IFFALSE 94452
// SetFuel ( group [ i ] , 12 ) ;
94434: LD_VAR 0 4
94438: PUSH
94439: LD_VAR 0 7
94443: ARRAY
94444: PPUSH
94445: LD_INT 12
94447: PPUSH
94448: CALL_OW 240
// if units_path [ i ] then
94452: LD_VAR 0 16
94456: PUSH
94457: LD_VAR 0 7
94461: ARRAY
94462: IFFALSE 94647
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
94464: LD_VAR 0 4
94468: PUSH
94469: LD_VAR 0 7
94473: ARRAY
94474: PPUSH
94475: LD_VAR 0 16
94479: PUSH
94480: LD_VAR 0 7
94484: ARRAY
94485: PUSH
94486: LD_INT 1
94488: ARRAY
94489: PUSH
94490: LD_INT 1
94492: ARRAY
94493: PPUSH
94494: LD_VAR 0 16
94498: PUSH
94499: LD_VAR 0 7
94503: ARRAY
94504: PUSH
94505: LD_INT 1
94507: ARRAY
94508: PUSH
94509: LD_INT 2
94511: ARRAY
94512: PPUSH
94513: CALL_OW 297
94517: PUSH
94518: LD_INT 6
94520: GREATER
94521: IFFALSE 94596
// begin if not HasTask ( group [ i ] ) then
94523: LD_VAR 0 4
94527: PUSH
94528: LD_VAR 0 7
94532: ARRAY
94533: PPUSH
94534: CALL_OW 314
94538: NOT
94539: IFFALSE 94594
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
94541: LD_VAR 0 4
94545: PUSH
94546: LD_VAR 0 7
94550: ARRAY
94551: PPUSH
94552: LD_VAR 0 16
94556: PUSH
94557: LD_VAR 0 7
94561: ARRAY
94562: PUSH
94563: LD_INT 1
94565: ARRAY
94566: PUSH
94567: LD_INT 1
94569: ARRAY
94570: PPUSH
94571: LD_VAR 0 16
94575: PUSH
94576: LD_VAR 0 7
94580: ARRAY
94581: PUSH
94582: LD_INT 1
94584: ARRAY
94585: PUSH
94586: LD_INT 2
94588: ARRAY
94589: PPUSH
94590: CALL_OW 114
// end else
94594: GO 94647
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
94596: LD_ADDR_VAR 0 15
94600: PUSH
94601: LD_VAR 0 16
94605: PUSH
94606: LD_VAR 0 7
94610: ARRAY
94611: PPUSH
94612: LD_INT 1
94614: PPUSH
94615: CALL_OW 3
94619: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
94620: LD_ADDR_VAR 0 16
94624: PUSH
94625: LD_VAR 0 16
94629: PPUSH
94630: LD_VAR 0 7
94634: PPUSH
94635: LD_VAR 0 15
94639: PPUSH
94640: CALL_OW 1
94644: ST_TO_ADDR
// continue ;
94645: GO 93190
// end ; end ; end else
94647: GO 97311
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
94649: LD_ADDR_VAR 0 14
94653: PUSH
94654: LD_INT 81
94656: PUSH
94657: LD_VAR 0 4
94661: PUSH
94662: LD_VAR 0 7
94666: ARRAY
94667: PPUSH
94668: CALL_OW 255
94672: PUSH
94673: EMPTY
94674: LIST
94675: LIST
94676: PPUSH
94677: CALL_OW 69
94681: ST_TO_ADDR
// if not tmp then
94682: LD_VAR 0 14
94686: NOT
94687: IFFALSE 94691
// continue ;
94689: GO 93190
// if f_ignore_area then
94691: LD_VAR 0 17
94695: IFFALSE 94783
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
94697: LD_ADDR_VAR 0 15
94701: PUSH
94702: LD_VAR 0 14
94706: PPUSH
94707: LD_INT 3
94709: PUSH
94710: LD_INT 92
94712: PUSH
94713: LD_VAR 0 17
94717: PUSH
94718: LD_INT 1
94720: ARRAY
94721: PUSH
94722: LD_VAR 0 17
94726: PUSH
94727: LD_INT 2
94729: ARRAY
94730: PUSH
94731: LD_VAR 0 17
94735: PUSH
94736: LD_INT 3
94738: ARRAY
94739: PUSH
94740: EMPTY
94741: LIST
94742: LIST
94743: LIST
94744: LIST
94745: PUSH
94746: EMPTY
94747: LIST
94748: LIST
94749: PPUSH
94750: CALL_OW 72
94754: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
94755: LD_VAR 0 14
94759: PUSH
94760: LD_VAR 0 15
94764: DIFF
94765: IFFALSE 94783
// tmp := tmp diff tmp2 ;
94767: LD_ADDR_VAR 0 14
94771: PUSH
94772: LD_VAR 0 14
94776: PUSH
94777: LD_VAR 0 15
94781: DIFF
94782: ST_TO_ADDR
// end ; if not f_murder then
94783: LD_VAR 0 20
94787: NOT
94788: IFFALSE 94846
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
94790: LD_ADDR_VAR 0 15
94794: PUSH
94795: LD_VAR 0 14
94799: PPUSH
94800: LD_INT 3
94802: PUSH
94803: LD_INT 50
94805: PUSH
94806: EMPTY
94807: LIST
94808: PUSH
94809: EMPTY
94810: LIST
94811: LIST
94812: PPUSH
94813: CALL_OW 72
94817: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
94818: LD_VAR 0 14
94822: PUSH
94823: LD_VAR 0 15
94827: DIFF
94828: IFFALSE 94846
// tmp := tmp diff tmp2 ;
94830: LD_ADDR_VAR 0 14
94834: PUSH
94835: LD_VAR 0 14
94839: PUSH
94840: LD_VAR 0 15
94844: DIFF
94845: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
94846: LD_ADDR_VAR 0 14
94850: PUSH
94851: LD_VAR 0 4
94855: PUSH
94856: LD_VAR 0 7
94860: ARRAY
94861: PPUSH
94862: LD_VAR 0 14
94866: PPUSH
94867: LD_INT 1
94869: PPUSH
94870: LD_INT 1
94872: PPUSH
94873: CALL 18799 0 4
94877: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
94878: LD_VAR 0 4
94882: PUSH
94883: LD_VAR 0 7
94887: ARRAY
94888: PPUSH
94889: CALL_OW 257
94893: PUSH
94894: LD_INT 1
94896: EQUAL
94897: IFFALSE 95345
// begin if WantPlant ( group [ i ] ) then
94899: LD_VAR 0 4
94903: PUSH
94904: LD_VAR 0 7
94908: ARRAY
94909: PPUSH
94910: CALL 18300 0 1
94914: IFFALSE 94918
// continue ;
94916: GO 93190
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
94918: LD_VAR 0 18
94922: PUSH
94923: LD_VAR 0 4
94927: PUSH
94928: LD_VAR 0 7
94932: ARRAY
94933: PPUSH
94934: CALL_OW 310
94938: NOT
94939: AND
94940: PUSH
94941: LD_VAR 0 14
94945: PUSH
94946: LD_INT 1
94948: ARRAY
94949: PUSH
94950: LD_VAR 0 14
94954: PPUSH
94955: LD_INT 21
94957: PUSH
94958: LD_INT 2
94960: PUSH
94961: EMPTY
94962: LIST
94963: LIST
94964: PUSH
94965: LD_INT 58
94967: PUSH
94968: EMPTY
94969: LIST
94970: PUSH
94971: EMPTY
94972: LIST
94973: LIST
94974: PPUSH
94975: CALL_OW 72
94979: IN
94980: AND
94981: IFFALSE 95017
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
94983: LD_VAR 0 4
94987: PUSH
94988: LD_VAR 0 7
94992: ARRAY
94993: PPUSH
94994: LD_VAR 0 14
94998: PUSH
94999: LD_INT 1
95001: ARRAY
95002: PPUSH
95003: CALL_OW 120
// attacking := true ;
95007: LD_ADDR_VAR 0 29
95011: PUSH
95012: LD_INT 1
95014: ST_TO_ADDR
// continue ;
95015: GO 93190
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
95017: LD_VAR 0 26
95021: PUSH
95022: LD_VAR 0 4
95026: PUSH
95027: LD_VAR 0 7
95031: ARRAY
95032: PPUSH
95033: CALL_OW 257
95037: PUSH
95038: LD_INT 1
95040: EQUAL
95041: AND
95042: PUSH
95043: LD_VAR 0 4
95047: PUSH
95048: LD_VAR 0 7
95052: ARRAY
95053: PPUSH
95054: CALL_OW 256
95058: PUSH
95059: LD_INT 800
95061: LESS
95062: AND
95063: PUSH
95064: LD_VAR 0 4
95068: PUSH
95069: LD_VAR 0 7
95073: ARRAY
95074: PPUSH
95075: CALL_OW 318
95079: NOT
95080: AND
95081: IFFALSE 95098
// ComCrawl ( group [ i ] ) ;
95083: LD_VAR 0 4
95087: PUSH
95088: LD_VAR 0 7
95092: ARRAY
95093: PPUSH
95094: CALL_OW 137
// if f_mines then
95098: LD_VAR 0 21
95102: IFFALSE 95345
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
95104: LD_VAR 0 14
95108: PUSH
95109: LD_INT 1
95111: ARRAY
95112: PPUSH
95113: CALL_OW 247
95117: PUSH
95118: LD_INT 3
95120: EQUAL
95121: PUSH
95122: LD_VAR 0 14
95126: PUSH
95127: LD_INT 1
95129: ARRAY
95130: PUSH
95131: LD_VAR 0 27
95135: IN
95136: NOT
95137: AND
95138: IFFALSE 95345
// begin x := GetX ( tmp [ 1 ] ) ;
95140: LD_ADDR_VAR 0 10
95144: PUSH
95145: LD_VAR 0 14
95149: PUSH
95150: LD_INT 1
95152: ARRAY
95153: PPUSH
95154: CALL_OW 250
95158: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
95159: LD_ADDR_VAR 0 11
95163: PUSH
95164: LD_VAR 0 14
95168: PUSH
95169: LD_INT 1
95171: ARRAY
95172: PPUSH
95173: CALL_OW 251
95177: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
95178: LD_ADDR_VAR 0 12
95182: PUSH
95183: LD_VAR 0 4
95187: PUSH
95188: LD_VAR 0 7
95192: ARRAY
95193: PPUSH
95194: CALL 45241 0 1
95198: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
95199: LD_VAR 0 4
95203: PUSH
95204: LD_VAR 0 7
95208: ARRAY
95209: PPUSH
95210: LD_VAR 0 10
95214: PPUSH
95215: LD_VAR 0 11
95219: PPUSH
95220: LD_VAR 0 14
95224: PUSH
95225: LD_INT 1
95227: ARRAY
95228: PPUSH
95229: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
95233: LD_VAR 0 4
95237: PUSH
95238: LD_VAR 0 7
95242: ARRAY
95243: PPUSH
95244: LD_VAR 0 10
95248: PPUSH
95249: LD_VAR 0 12
95253: PPUSH
95254: LD_INT 7
95256: PPUSH
95257: CALL_OW 272
95261: PPUSH
95262: LD_VAR 0 11
95266: PPUSH
95267: LD_VAR 0 12
95271: PPUSH
95272: LD_INT 7
95274: PPUSH
95275: CALL_OW 273
95279: PPUSH
95280: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
95284: LD_VAR 0 4
95288: PUSH
95289: LD_VAR 0 7
95293: ARRAY
95294: PPUSH
95295: LD_INT 71
95297: PPUSH
95298: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
95302: LD_ADDR_VAR 0 27
95306: PUSH
95307: LD_VAR 0 27
95311: PPUSH
95312: LD_VAR 0 27
95316: PUSH
95317: LD_INT 1
95319: PLUS
95320: PPUSH
95321: LD_VAR 0 14
95325: PUSH
95326: LD_INT 1
95328: ARRAY
95329: PPUSH
95330: CALL_OW 1
95334: ST_TO_ADDR
// attacking := true ;
95335: LD_ADDR_VAR 0 29
95339: PUSH
95340: LD_INT 1
95342: ST_TO_ADDR
// continue ;
95343: GO 93190
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
95345: LD_VAR 0 4
95349: PUSH
95350: LD_VAR 0 7
95354: ARRAY
95355: PPUSH
95356: CALL_OW 257
95360: PUSH
95361: LD_INT 17
95363: EQUAL
95364: PUSH
95365: LD_VAR 0 4
95369: PUSH
95370: LD_VAR 0 7
95374: ARRAY
95375: PPUSH
95376: CALL_OW 110
95380: PUSH
95381: LD_INT 71
95383: EQUAL
95384: NOT
95385: AND
95386: IFFALSE 95532
// begin attacking := false ;
95388: LD_ADDR_VAR 0 29
95392: PUSH
95393: LD_INT 0
95395: ST_TO_ADDR
// k := 5 ;
95396: LD_ADDR_VAR 0 9
95400: PUSH
95401: LD_INT 5
95403: ST_TO_ADDR
// if tmp < k then
95404: LD_VAR 0 14
95408: PUSH
95409: LD_VAR 0 9
95413: LESS
95414: IFFALSE 95426
// k := tmp ;
95416: LD_ADDR_VAR 0 9
95420: PUSH
95421: LD_VAR 0 14
95425: ST_TO_ADDR
// for j = 1 to k do
95426: LD_ADDR_VAR 0 8
95430: PUSH
95431: DOUBLE
95432: LD_INT 1
95434: DEC
95435: ST_TO_ADDR
95436: LD_VAR 0 9
95440: PUSH
95441: FOR_TO
95442: IFFALSE 95530
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
95444: LD_VAR 0 14
95448: PUSH
95449: LD_VAR 0 8
95453: ARRAY
95454: PUSH
95455: LD_VAR 0 14
95459: PPUSH
95460: LD_INT 58
95462: PUSH
95463: EMPTY
95464: LIST
95465: PPUSH
95466: CALL_OW 72
95470: IN
95471: NOT
95472: IFFALSE 95528
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95474: LD_VAR 0 4
95478: PUSH
95479: LD_VAR 0 7
95483: ARRAY
95484: PPUSH
95485: LD_VAR 0 14
95489: PUSH
95490: LD_VAR 0 8
95494: ARRAY
95495: PPUSH
95496: CALL_OW 115
// attacking := true ;
95500: LD_ADDR_VAR 0 29
95504: PUSH
95505: LD_INT 1
95507: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
95508: LD_VAR 0 4
95512: PUSH
95513: LD_VAR 0 7
95517: ARRAY
95518: PPUSH
95519: LD_INT 71
95521: PPUSH
95522: CALL_OW 109
// continue ;
95526: GO 95441
// end ; end ;
95528: GO 95441
95530: POP
95531: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
95532: LD_VAR 0 4
95536: PUSH
95537: LD_VAR 0 7
95541: ARRAY
95542: PPUSH
95543: CALL_OW 257
95547: PUSH
95548: LD_INT 8
95550: EQUAL
95551: PUSH
95552: LD_VAR 0 4
95556: PUSH
95557: LD_VAR 0 7
95561: ARRAY
95562: PPUSH
95563: CALL_OW 264
95567: PUSH
95568: LD_INT 28
95570: PUSH
95571: LD_INT 45
95573: PUSH
95574: LD_INT 7
95576: PUSH
95577: LD_INT 47
95579: PUSH
95580: EMPTY
95581: LIST
95582: LIST
95583: LIST
95584: LIST
95585: IN
95586: OR
95587: IFFALSE 95843
// begin attacking := false ;
95589: LD_ADDR_VAR 0 29
95593: PUSH
95594: LD_INT 0
95596: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
95597: LD_VAR 0 14
95601: PUSH
95602: LD_INT 1
95604: ARRAY
95605: PPUSH
95606: CALL_OW 266
95610: PUSH
95611: LD_INT 32
95613: PUSH
95614: LD_INT 31
95616: PUSH
95617: LD_INT 33
95619: PUSH
95620: LD_INT 4
95622: PUSH
95623: LD_INT 5
95625: PUSH
95626: EMPTY
95627: LIST
95628: LIST
95629: LIST
95630: LIST
95631: LIST
95632: IN
95633: IFFALSE 95819
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
95635: LD_ADDR_VAR 0 9
95639: PUSH
95640: LD_VAR 0 14
95644: PUSH
95645: LD_INT 1
95647: ARRAY
95648: PPUSH
95649: CALL_OW 266
95653: PPUSH
95654: LD_VAR 0 14
95658: PUSH
95659: LD_INT 1
95661: ARRAY
95662: PPUSH
95663: CALL_OW 250
95667: PPUSH
95668: LD_VAR 0 14
95672: PUSH
95673: LD_INT 1
95675: ARRAY
95676: PPUSH
95677: CALL_OW 251
95681: PPUSH
95682: LD_VAR 0 14
95686: PUSH
95687: LD_INT 1
95689: ARRAY
95690: PPUSH
95691: CALL_OW 254
95695: PPUSH
95696: LD_VAR 0 14
95700: PUSH
95701: LD_INT 1
95703: ARRAY
95704: PPUSH
95705: CALL_OW 248
95709: PPUSH
95710: LD_INT 0
95712: PPUSH
95713: CALL 26611 0 6
95717: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
95718: LD_ADDR_VAR 0 8
95722: PUSH
95723: LD_VAR 0 4
95727: PUSH
95728: LD_VAR 0 7
95732: ARRAY
95733: PPUSH
95734: LD_VAR 0 9
95738: PPUSH
95739: CALL 45281 0 2
95743: ST_TO_ADDR
// if j then
95744: LD_VAR 0 8
95748: IFFALSE 95817
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
95750: LD_VAR 0 8
95754: PUSH
95755: LD_INT 1
95757: ARRAY
95758: PPUSH
95759: LD_VAR 0 8
95763: PUSH
95764: LD_INT 2
95766: ARRAY
95767: PPUSH
95768: CALL_OW 488
95772: IFFALSE 95817
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
95774: LD_VAR 0 4
95778: PUSH
95779: LD_VAR 0 7
95783: ARRAY
95784: PPUSH
95785: LD_VAR 0 8
95789: PUSH
95790: LD_INT 1
95792: ARRAY
95793: PPUSH
95794: LD_VAR 0 8
95798: PUSH
95799: LD_INT 2
95801: ARRAY
95802: PPUSH
95803: CALL_OW 116
// attacking := true ;
95807: LD_ADDR_VAR 0 29
95811: PUSH
95812: LD_INT 1
95814: ST_TO_ADDR
// continue ;
95815: GO 93190
// end ; end else
95817: GO 95843
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95819: LD_VAR 0 4
95823: PUSH
95824: LD_VAR 0 7
95828: ARRAY
95829: PPUSH
95830: LD_VAR 0 14
95834: PUSH
95835: LD_INT 1
95837: ARRAY
95838: PPUSH
95839: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
95843: LD_VAR 0 4
95847: PUSH
95848: LD_VAR 0 7
95852: ARRAY
95853: PPUSH
95854: CALL_OW 265
95858: PUSH
95859: LD_INT 11
95861: EQUAL
95862: IFFALSE 96140
// begin k := 10 ;
95864: LD_ADDR_VAR 0 9
95868: PUSH
95869: LD_INT 10
95871: ST_TO_ADDR
// x := 0 ;
95872: LD_ADDR_VAR 0 10
95876: PUSH
95877: LD_INT 0
95879: ST_TO_ADDR
// if tmp < k then
95880: LD_VAR 0 14
95884: PUSH
95885: LD_VAR 0 9
95889: LESS
95890: IFFALSE 95902
// k := tmp ;
95892: LD_ADDR_VAR 0 9
95896: PUSH
95897: LD_VAR 0 14
95901: ST_TO_ADDR
// for j = k downto 1 do
95902: LD_ADDR_VAR 0 8
95906: PUSH
95907: DOUBLE
95908: LD_VAR 0 9
95912: INC
95913: ST_TO_ADDR
95914: LD_INT 1
95916: PUSH
95917: FOR_DOWNTO
95918: IFFALSE 95993
// begin if GetType ( tmp [ j ] ) = unit_human then
95920: LD_VAR 0 14
95924: PUSH
95925: LD_VAR 0 8
95929: ARRAY
95930: PPUSH
95931: CALL_OW 247
95935: PUSH
95936: LD_INT 1
95938: EQUAL
95939: IFFALSE 95991
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
95941: LD_VAR 0 4
95945: PUSH
95946: LD_VAR 0 7
95950: ARRAY
95951: PPUSH
95952: LD_VAR 0 14
95956: PUSH
95957: LD_VAR 0 8
95961: ARRAY
95962: PPUSH
95963: CALL 45552 0 2
// x := tmp [ j ] ;
95967: LD_ADDR_VAR 0 10
95971: PUSH
95972: LD_VAR 0 14
95976: PUSH
95977: LD_VAR 0 8
95981: ARRAY
95982: ST_TO_ADDR
// attacking := true ;
95983: LD_ADDR_VAR 0 29
95987: PUSH
95988: LD_INT 1
95990: ST_TO_ADDR
// end ; end ;
95991: GO 95917
95993: POP
95994: POP
// if not x then
95995: LD_VAR 0 10
95999: NOT
96000: IFFALSE 96140
// begin attacking := true ;
96002: LD_ADDR_VAR 0 29
96006: PUSH
96007: LD_INT 1
96009: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
96010: LD_VAR 0 4
96014: PUSH
96015: LD_VAR 0 7
96019: ARRAY
96020: PPUSH
96021: CALL_OW 250
96025: PPUSH
96026: LD_VAR 0 4
96030: PUSH
96031: LD_VAR 0 7
96035: ARRAY
96036: PPUSH
96037: CALL_OW 251
96041: PPUSH
96042: CALL_OW 546
96046: PUSH
96047: LD_INT 2
96049: ARRAY
96050: PUSH
96051: LD_VAR 0 14
96055: PUSH
96056: LD_INT 1
96058: ARRAY
96059: PPUSH
96060: CALL_OW 250
96064: PPUSH
96065: LD_VAR 0 14
96069: PUSH
96070: LD_INT 1
96072: ARRAY
96073: PPUSH
96074: CALL_OW 251
96078: PPUSH
96079: CALL_OW 546
96083: PUSH
96084: LD_INT 2
96086: ARRAY
96087: EQUAL
96088: IFFALSE 96116
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
96090: LD_VAR 0 4
96094: PUSH
96095: LD_VAR 0 7
96099: ARRAY
96100: PPUSH
96101: LD_VAR 0 14
96105: PUSH
96106: LD_INT 1
96108: ARRAY
96109: PPUSH
96110: CALL 45552 0 2
96114: GO 96140
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96116: LD_VAR 0 4
96120: PUSH
96121: LD_VAR 0 7
96125: ARRAY
96126: PPUSH
96127: LD_VAR 0 14
96131: PUSH
96132: LD_INT 1
96134: ARRAY
96135: PPUSH
96136: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
96140: LD_VAR 0 4
96144: PUSH
96145: LD_VAR 0 7
96149: ARRAY
96150: PPUSH
96151: CALL_OW 264
96155: PUSH
96156: LD_INT 29
96158: EQUAL
96159: IFFALSE 96525
// begin if WantsToAttack ( group [ i ] ) in bombed then
96161: LD_VAR 0 4
96165: PUSH
96166: LD_VAR 0 7
96170: ARRAY
96171: PPUSH
96172: CALL_OW 319
96176: PUSH
96177: LD_VAR 0 28
96181: IN
96182: IFFALSE 96186
// continue ;
96184: GO 93190
// k := 8 ;
96186: LD_ADDR_VAR 0 9
96190: PUSH
96191: LD_INT 8
96193: ST_TO_ADDR
// x := 0 ;
96194: LD_ADDR_VAR 0 10
96198: PUSH
96199: LD_INT 0
96201: ST_TO_ADDR
// if tmp < k then
96202: LD_VAR 0 14
96206: PUSH
96207: LD_VAR 0 9
96211: LESS
96212: IFFALSE 96224
// k := tmp ;
96214: LD_ADDR_VAR 0 9
96218: PUSH
96219: LD_VAR 0 14
96223: ST_TO_ADDR
// for j = 1 to k do
96224: LD_ADDR_VAR 0 8
96228: PUSH
96229: DOUBLE
96230: LD_INT 1
96232: DEC
96233: ST_TO_ADDR
96234: LD_VAR 0 9
96238: PUSH
96239: FOR_TO
96240: IFFALSE 96372
// begin if GetType ( tmp [ j ] ) = unit_building then
96242: LD_VAR 0 14
96246: PUSH
96247: LD_VAR 0 8
96251: ARRAY
96252: PPUSH
96253: CALL_OW 247
96257: PUSH
96258: LD_INT 3
96260: EQUAL
96261: IFFALSE 96370
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
96263: LD_VAR 0 14
96267: PUSH
96268: LD_VAR 0 8
96272: ARRAY
96273: PUSH
96274: LD_VAR 0 28
96278: IN
96279: NOT
96280: PUSH
96281: LD_VAR 0 14
96285: PUSH
96286: LD_VAR 0 8
96290: ARRAY
96291: PPUSH
96292: CALL_OW 313
96296: AND
96297: IFFALSE 96370
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
96299: LD_VAR 0 4
96303: PUSH
96304: LD_VAR 0 7
96308: ARRAY
96309: PPUSH
96310: LD_VAR 0 14
96314: PUSH
96315: LD_VAR 0 8
96319: ARRAY
96320: PPUSH
96321: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
96325: LD_ADDR_VAR 0 28
96329: PUSH
96330: LD_VAR 0 28
96334: PPUSH
96335: LD_VAR 0 28
96339: PUSH
96340: LD_INT 1
96342: PLUS
96343: PPUSH
96344: LD_VAR 0 14
96348: PUSH
96349: LD_VAR 0 8
96353: ARRAY
96354: PPUSH
96355: CALL_OW 1
96359: ST_TO_ADDR
// attacking := true ;
96360: LD_ADDR_VAR 0 29
96364: PUSH
96365: LD_INT 1
96367: ST_TO_ADDR
// break ;
96368: GO 96372
// end ; end ;
96370: GO 96239
96372: POP
96373: POP
// if not attacking and f_attack_depot then
96374: LD_VAR 0 29
96378: NOT
96379: PUSH
96380: LD_VAR 0 25
96384: AND
96385: IFFALSE 96480
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
96387: LD_ADDR_VAR 0 13
96391: PUSH
96392: LD_VAR 0 14
96396: PPUSH
96397: LD_INT 2
96399: PUSH
96400: LD_INT 30
96402: PUSH
96403: LD_INT 0
96405: PUSH
96406: EMPTY
96407: LIST
96408: LIST
96409: PUSH
96410: LD_INT 30
96412: PUSH
96413: LD_INT 1
96415: PUSH
96416: EMPTY
96417: LIST
96418: LIST
96419: PUSH
96420: EMPTY
96421: LIST
96422: LIST
96423: LIST
96424: PPUSH
96425: CALL_OW 72
96429: ST_TO_ADDR
// if z then
96430: LD_VAR 0 13
96434: IFFALSE 96480
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
96436: LD_VAR 0 4
96440: PUSH
96441: LD_VAR 0 7
96445: ARRAY
96446: PPUSH
96447: LD_VAR 0 13
96451: PPUSH
96452: LD_VAR 0 4
96456: PUSH
96457: LD_VAR 0 7
96461: ARRAY
96462: PPUSH
96463: CALL_OW 74
96467: PPUSH
96468: CALL_OW 115
// attacking := true ;
96472: LD_ADDR_VAR 0 29
96476: PUSH
96477: LD_INT 1
96479: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
96480: LD_VAR 0 4
96484: PUSH
96485: LD_VAR 0 7
96489: ARRAY
96490: PPUSH
96491: CALL_OW 256
96495: PUSH
96496: LD_INT 500
96498: LESS
96499: IFFALSE 96525
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96501: LD_VAR 0 4
96505: PUSH
96506: LD_VAR 0 7
96510: ARRAY
96511: PPUSH
96512: LD_VAR 0 14
96516: PUSH
96517: LD_INT 1
96519: ARRAY
96520: PPUSH
96521: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
96525: LD_VAR 0 4
96529: PUSH
96530: LD_VAR 0 7
96534: ARRAY
96535: PPUSH
96536: CALL_OW 264
96540: PUSH
96541: LD_INT 49
96543: EQUAL
96544: IFFALSE 96665
// begin if not HasTask ( group [ i ] ) then
96546: LD_VAR 0 4
96550: PUSH
96551: LD_VAR 0 7
96555: ARRAY
96556: PPUSH
96557: CALL_OW 314
96561: NOT
96562: IFFALSE 96665
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
96564: LD_ADDR_VAR 0 9
96568: PUSH
96569: LD_INT 81
96571: PUSH
96572: LD_VAR 0 4
96576: PUSH
96577: LD_VAR 0 7
96581: ARRAY
96582: PPUSH
96583: CALL_OW 255
96587: PUSH
96588: EMPTY
96589: LIST
96590: LIST
96591: PPUSH
96592: CALL_OW 69
96596: PPUSH
96597: LD_VAR 0 4
96601: PUSH
96602: LD_VAR 0 7
96606: ARRAY
96607: PPUSH
96608: CALL_OW 74
96612: ST_TO_ADDR
// if k then
96613: LD_VAR 0 9
96617: IFFALSE 96665
// if GetDistUnits ( group [ i ] , k ) > 10 then
96619: LD_VAR 0 4
96623: PUSH
96624: LD_VAR 0 7
96628: ARRAY
96629: PPUSH
96630: LD_VAR 0 9
96634: PPUSH
96635: CALL_OW 296
96639: PUSH
96640: LD_INT 10
96642: GREATER
96643: IFFALSE 96665
// ComMoveUnit ( group [ i ] , k ) ;
96645: LD_VAR 0 4
96649: PUSH
96650: LD_VAR 0 7
96654: ARRAY
96655: PPUSH
96656: LD_VAR 0 9
96660: PPUSH
96661: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
96665: LD_VAR 0 4
96669: PUSH
96670: LD_VAR 0 7
96674: ARRAY
96675: PPUSH
96676: CALL_OW 256
96680: PUSH
96681: LD_INT 250
96683: LESS
96684: PUSH
96685: LD_VAR 0 4
96689: PUSH
96690: LD_VAR 0 7
96694: ARRAY
96695: PUSH
96696: LD_INT 21
96698: PUSH
96699: LD_INT 2
96701: PUSH
96702: EMPTY
96703: LIST
96704: LIST
96705: PUSH
96706: LD_INT 23
96708: PUSH
96709: LD_INT 2
96711: PUSH
96712: EMPTY
96713: LIST
96714: LIST
96715: PUSH
96716: EMPTY
96717: LIST
96718: LIST
96719: PPUSH
96720: CALL_OW 69
96724: IN
96725: AND
96726: IFFALSE 96851
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
96728: LD_ADDR_VAR 0 9
96732: PUSH
96733: LD_OWVAR 3
96737: PUSH
96738: LD_VAR 0 4
96742: PUSH
96743: LD_VAR 0 7
96747: ARRAY
96748: DIFF
96749: PPUSH
96750: LD_VAR 0 4
96754: PUSH
96755: LD_VAR 0 7
96759: ARRAY
96760: PPUSH
96761: CALL_OW 74
96765: ST_TO_ADDR
// if not k then
96766: LD_VAR 0 9
96770: NOT
96771: IFFALSE 96775
// continue ;
96773: GO 93190
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
96775: LD_VAR 0 9
96779: PUSH
96780: LD_INT 81
96782: PUSH
96783: LD_VAR 0 4
96787: PUSH
96788: LD_VAR 0 7
96792: ARRAY
96793: PPUSH
96794: CALL_OW 255
96798: PUSH
96799: EMPTY
96800: LIST
96801: LIST
96802: PPUSH
96803: CALL_OW 69
96807: IN
96808: PUSH
96809: LD_VAR 0 9
96813: PPUSH
96814: LD_VAR 0 4
96818: PUSH
96819: LD_VAR 0 7
96823: ARRAY
96824: PPUSH
96825: CALL_OW 296
96829: PUSH
96830: LD_INT 5
96832: LESS
96833: AND
96834: IFFALSE 96851
// ComAutodestruct ( group [ i ] ) ;
96836: LD_VAR 0 4
96840: PUSH
96841: LD_VAR 0 7
96845: ARRAY
96846: PPUSH
96847: CALL 45450 0 1
// end ; if f_attack_depot then
96851: LD_VAR 0 25
96855: IFFALSE 96967
// begin k := 6 ;
96857: LD_ADDR_VAR 0 9
96861: PUSH
96862: LD_INT 6
96864: ST_TO_ADDR
// if tmp < k then
96865: LD_VAR 0 14
96869: PUSH
96870: LD_VAR 0 9
96874: LESS
96875: IFFALSE 96887
// k := tmp ;
96877: LD_ADDR_VAR 0 9
96881: PUSH
96882: LD_VAR 0 14
96886: ST_TO_ADDR
// for j = 1 to k do
96887: LD_ADDR_VAR 0 8
96891: PUSH
96892: DOUBLE
96893: LD_INT 1
96895: DEC
96896: ST_TO_ADDR
96897: LD_VAR 0 9
96901: PUSH
96902: FOR_TO
96903: IFFALSE 96965
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
96905: LD_VAR 0 8
96909: PPUSH
96910: CALL_OW 266
96914: PUSH
96915: LD_INT 0
96917: PUSH
96918: LD_INT 1
96920: PUSH
96921: EMPTY
96922: LIST
96923: LIST
96924: IN
96925: IFFALSE 96963
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
96927: LD_VAR 0 4
96931: PUSH
96932: LD_VAR 0 7
96936: ARRAY
96937: PPUSH
96938: LD_VAR 0 14
96942: PUSH
96943: LD_VAR 0 8
96947: ARRAY
96948: PPUSH
96949: CALL_OW 115
// attacking := true ;
96953: LD_ADDR_VAR 0 29
96957: PUSH
96958: LD_INT 1
96960: ST_TO_ADDR
// break ;
96961: GO 96965
// end ;
96963: GO 96902
96965: POP
96966: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
96967: LD_VAR 0 4
96971: PUSH
96972: LD_VAR 0 7
96976: ARRAY
96977: PPUSH
96978: CALL_OW 302
96982: PUSH
96983: LD_VAR 0 29
96987: NOT
96988: AND
96989: IFFALSE 97311
// begin if GetTag ( group [ i ] ) = 71 then
96991: LD_VAR 0 4
96995: PUSH
96996: LD_VAR 0 7
97000: ARRAY
97001: PPUSH
97002: CALL_OW 110
97006: PUSH
97007: LD_INT 71
97009: EQUAL
97010: IFFALSE 97051
// begin if HasTask ( group [ i ] ) then
97012: LD_VAR 0 4
97016: PUSH
97017: LD_VAR 0 7
97021: ARRAY
97022: PPUSH
97023: CALL_OW 314
97027: IFFALSE 97033
// continue else
97029: GO 93190
97031: GO 97051
// SetTag ( group [ i ] , 0 ) ;
97033: LD_VAR 0 4
97037: PUSH
97038: LD_VAR 0 7
97042: ARRAY
97043: PPUSH
97044: LD_INT 0
97046: PPUSH
97047: CALL_OW 109
// end ; k := 8 ;
97051: LD_ADDR_VAR 0 9
97055: PUSH
97056: LD_INT 8
97058: ST_TO_ADDR
// x := 0 ;
97059: LD_ADDR_VAR 0 10
97063: PUSH
97064: LD_INT 0
97066: ST_TO_ADDR
// if tmp < k then
97067: LD_VAR 0 14
97071: PUSH
97072: LD_VAR 0 9
97076: LESS
97077: IFFALSE 97089
// k := tmp ;
97079: LD_ADDR_VAR 0 9
97083: PUSH
97084: LD_VAR 0 14
97088: ST_TO_ADDR
// for j = 1 to k do
97089: LD_ADDR_VAR 0 8
97093: PUSH
97094: DOUBLE
97095: LD_INT 1
97097: DEC
97098: ST_TO_ADDR
97099: LD_VAR 0 9
97103: PUSH
97104: FOR_TO
97105: IFFALSE 97203
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
97107: LD_VAR 0 14
97111: PUSH
97112: LD_VAR 0 8
97116: ARRAY
97117: PPUSH
97118: CALL_OW 247
97122: PUSH
97123: LD_INT 1
97125: EQUAL
97126: PUSH
97127: LD_VAR 0 14
97131: PUSH
97132: LD_VAR 0 8
97136: ARRAY
97137: PPUSH
97138: CALL_OW 256
97142: PUSH
97143: LD_INT 250
97145: LESS
97146: PUSH
97147: LD_VAR 0 20
97151: AND
97152: PUSH
97153: LD_VAR 0 20
97157: NOT
97158: PUSH
97159: LD_VAR 0 14
97163: PUSH
97164: LD_VAR 0 8
97168: ARRAY
97169: PPUSH
97170: CALL_OW 256
97174: PUSH
97175: LD_INT 250
97177: GREATEREQUAL
97178: AND
97179: OR
97180: AND
97181: IFFALSE 97201
// begin x := tmp [ j ] ;
97183: LD_ADDR_VAR 0 10
97187: PUSH
97188: LD_VAR 0 14
97192: PUSH
97193: LD_VAR 0 8
97197: ARRAY
97198: ST_TO_ADDR
// break ;
97199: GO 97203
// end ;
97201: GO 97104
97203: POP
97204: POP
// if x then
97205: LD_VAR 0 10
97209: IFFALSE 97233
// ComAttackUnit ( group [ i ] , x ) else
97211: LD_VAR 0 4
97215: PUSH
97216: LD_VAR 0 7
97220: ARRAY
97221: PPUSH
97222: LD_VAR 0 10
97226: PPUSH
97227: CALL_OW 115
97231: GO 97257
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
97233: LD_VAR 0 4
97237: PUSH
97238: LD_VAR 0 7
97242: ARRAY
97243: PPUSH
97244: LD_VAR 0 14
97248: PUSH
97249: LD_INT 1
97251: ARRAY
97252: PPUSH
97253: CALL_OW 115
// if not HasTask ( group [ i ] ) then
97257: LD_VAR 0 4
97261: PUSH
97262: LD_VAR 0 7
97266: ARRAY
97267: PPUSH
97268: CALL_OW 314
97272: NOT
97273: IFFALSE 97311
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
97275: LD_VAR 0 4
97279: PUSH
97280: LD_VAR 0 7
97284: ARRAY
97285: PPUSH
97286: LD_VAR 0 14
97290: PPUSH
97291: LD_VAR 0 4
97295: PUSH
97296: LD_VAR 0 7
97300: ARRAY
97301: PPUSH
97302: CALL_OW 74
97306: PPUSH
97307: CALL_OW 115
// end ; end ; end ;
97311: GO 93190
97313: POP
97314: POP
// wait ( 0 0$2 ) ;
97315: LD_INT 70
97317: PPUSH
97318: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
97322: LD_VAR 0 4
97326: NOT
97327: PUSH
97328: LD_VAR 0 4
97332: PUSH
97333: EMPTY
97334: EQUAL
97335: OR
97336: PUSH
97337: LD_INT 81
97339: PUSH
97340: LD_VAR 0 35
97344: PUSH
97345: EMPTY
97346: LIST
97347: LIST
97348: PPUSH
97349: CALL_OW 69
97353: NOT
97354: OR
97355: IFFALSE 93175
// end ;
97357: LD_VAR 0 2
97361: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
97362: LD_INT 0
97364: PPUSH
97365: PPUSH
97366: PPUSH
97367: PPUSH
97368: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
97369: LD_VAR 0 1
97373: NOT
97374: PUSH
97375: LD_EXP 64
97379: PUSH
97380: LD_VAR 0 1
97384: ARRAY
97385: NOT
97386: OR
97387: PUSH
97388: LD_VAR 0 2
97392: NOT
97393: OR
97394: PUSH
97395: LD_VAR 0 3
97399: NOT
97400: OR
97401: IFFALSE 97405
// exit ;
97403: GO 97918
// side := mc_sides [ base ] ;
97405: LD_ADDR_VAR 0 6
97409: PUSH
97410: LD_EXP 90
97414: PUSH
97415: LD_VAR 0 1
97419: ARRAY
97420: ST_TO_ADDR
// if not side then
97421: LD_VAR 0 6
97425: NOT
97426: IFFALSE 97430
// exit ;
97428: GO 97918
// for i in solds do
97430: LD_ADDR_VAR 0 7
97434: PUSH
97435: LD_VAR 0 2
97439: PUSH
97440: FOR_IN
97441: IFFALSE 97502
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
97443: LD_VAR 0 7
97447: PPUSH
97448: CALL_OW 310
97452: PPUSH
97453: CALL_OW 266
97457: PUSH
97458: LD_INT 32
97460: PUSH
97461: LD_INT 31
97463: PUSH
97464: EMPTY
97465: LIST
97466: LIST
97467: IN
97468: IFFALSE 97488
// solds := solds diff i else
97470: LD_ADDR_VAR 0 2
97474: PUSH
97475: LD_VAR 0 2
97479: PUSH
97480: LD_VAR 0 7
97484: DIFF
97485: ST_TO_ADDR
97486: GO 97500
// SetTag ( i , 18 ) ;
97488: LD_VAR 0 7
97492: PPUSH
97493: LD_INT 18
97495: PPUSH
97496: CALL_OW 109
97500: GO 97440
97502: POP
97503: POP
// if not solds then
97504: LD_VAR 0 2
97508: NOT
97509: IFFALSE 97513
// exit ;
97511: GO 97918
// repeat wait ( 0 0$1 ) ;
97513: LD_INT 35
97515: PPUSH
97516: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
97520: LD_ADDR_VAR 0 5
97524: PUSH
97525: LD_VAR 0 6
97529: PPUSH
97530: LD_VAR 0 3
97534: PPUSH
97535: CALL 15165 0 2
97539: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97540: LD_EXP 64
97544: PUSH
97545: LD_VAR 0 1
97549: ARRAY
97550: NOT
97551: PUSH
97552: LD_EXP 64
97556: PUSH
97557: LD_VAR 0 1
97561: ARRAY
97562: PUSH
97563: EMPTY
97564: EQUAL
97565: OR
97566: IFFALSE 97603
// begin for i in solds do
97568: LD_ADDR_VAR 0 7
97572: PUSH
97573: LD_VAR 0 2
97577: PUSH
97578: FOR_IN
97579: IFFALSE 97592
// ComStop ( i ) ;
97581: LD_VAR 0 7
97585: PPUSH
97586: CALL_OW 141
97590: GO 97578
97592: POP
97593: POP
// solds := [ ] ;
97594: LD_ADDR_VAR 0 2
97598: PUSH
97599: EMPTY
97600: ST_TO_ADDR
// exit ;
97601: GO 97918
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
97603: LD_VAR 0 5
97607: NOT
97608: PUSH
97609: LD_VAR 0 5
97613: PUSH
97614: LD_INT 3
97616: GREATER
97617: OR
97618: PUSH
97619: LD_EXP 86
97623: PUSH
97624: LD_VAR 0 1
97628: ARRAY
97629: OR
97630: IFFALSE 97671
// begin for i in solds do
97632: LD_ADDR_VAR 0 7
97636: PUSH
97637: LD_VAR 0 2
97641: PUSH
97642: FOR_IN
97643: IFFALSE 97667
// if HasTask ( i ) then
97645: LD_VAR 0 7
97649: PPUSH
97650: CALL_OW 314
97654: IFFALSE 97665
// ComStop ( i ) ;
97656: LD_VAR 0 7
97660: PPUSH
97661: CALL_OW 141
97665: GO 97642
97667: POP
97668: POP
// break ;
97669: GO 97906
// end ; for i in solds do
97671: LD_ADDR_VAR 0 7
97675: PUSH
97676: LD_VAR 0 2
97680: PUSH
97681: FOR_IN
97682: IFFALSE 97898
// begin if IsInUnit ( i ) then
97684: LD_VAR 0 7
97688: PPUSH
97689: CALL_OW 310
97693: IFFALSE 97704
// ComExitBuilding ( i ) ;
97695: LD_VAR 0 7
97699: PPUSH
97700: CALL_OW 122
// if GetLives ( i ) > 333 then
97704: LD_VAR 0 7
97708: PPUSH
97709: CALL_OW 256
97713: PUSH
97714: LD_INT 333
97716: GREATER
97717: IFFALSE 97745
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
97719: LD_VAR 0 7
97723: PPUSH
97724: LD_VAR 0 5
97728: PPUSH
97729: LD_VAR 0 7
97733: PPUSH
97734: CALL_OW 74
97738: PPUSH
97739: CALL_OW 115
97743: GO 97896
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
97745: LD_ADDR_VAR 0 8
97749: PUSH
97750: LD_EXP 64
97754: PUSH
97755: LD_VAR 0 1
97759: ARRAY
97760: PPUSH
97761: LD_INT 2
97763: PUSH
97764: LD_INT 30
97766: PUSH
97767: LD_INT 0
97769: PUSH
97770: EMPTY
97771: LIST
97772: LIST
97773: PUSH
97774: LD_INT 30
97776: PUSH
97777: LD_INT 1
97779: PUSH
97780: EMPTY
97781: LIST
97782: LIST
97783: PUSH
97784: LD_INT 30
97786: PUSH
97787: LD_INT 6
97789: PUSH
97790: EMPTY
97791: LIST
97792: LIST
97793: PUSH
97794: EMPTY
97795: LIST
97796: LIST
97797: LIST
97798: LIST
97799: PPUSH
97800: CALL_OW 72
97804: PPUSH
97805: LD_VAR 0 7
97809: PPUSH
97810: CALL_OW 74
97814: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
97815: LD_VAR 0 7
97819: PPUSH
97820: LD_VAR 0 8
97824: PPUSH
97825: CALL_OW 250
97829: PPUSH
97830: LD_INT 3
97832: PPUSH
97833: LD_INT 5
97835: PPUSH
97836: CALL_OW 272
97840: PPUSH
97841: LD_VAR 0 8
97845: PPUSH
97846: CALL_OW 251
97850: PPUSH
97851: LD_INT 3
97853: PPUSH
97854: LD_INT 5
97856: PPUSH
97857: CALL_OW 273
97861: PPUSH
97862: CALL_OW 111
// SetTag ( i , 0 ) ;
97866: LD_VAR 0 7
97870: PPUSH
97871: LD_INT 0
97873: PPUSH
97874: CALL_OW 109
// solds := solds diff i ;
97878: LD_ADDR_VAR 0 2
97882: PUSH
97883: LD_VAR 0 2
97887: PUSH
97888: LD_VAR 0 7
97892: DIFF
97893: ST_TO_ADDR
// continue ;
97894: GO 97681
// end ; end ;
97896: GO 97681
97898: POP
97899: POP
// until solds ;
97900: LD_VAR 0 2
97904: IFFALSE 97513
// MC_Reset ( base , 18 ) ;
97906: LD_VAR 0 1
97910: PPUSH
97911: LD_INT 18
97913: PPUSH
97914: CALL 53985 0 2
// end ;
97918: LD_VAR 0 4
97922: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
97923: LD_INT 0
97925: PPUSH
97926: PPUSH
97927: PPUSH
97928: PPUSH
97929: PPUSH
97930: PPUSH
97931: PPUSH
97932: PPUSH
97933: PPUSH
97934: PPUSH
97935: PPUSH
97936: PPUSH
97937: PPUSH
97938: PPUSH
97939: PPUSH
97940: PPUSH
97941: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
97942: LD_ADDR_VAR 0 13
97946: PUSH
97947: LD_EXP 64
97951: PUSH
97952: LD_VAR 0 1
97956: ARRAY
97957: PPUSH
97958: LD_INT 25
97960: PUSH
97961: LD_INT 3
97963: PUSH
97964: EMPTY
97965: LIST
97966: LIST
97967: PPUSH
97968: CALL_OW 72
97972: ST_TO_ADDR
// if mc_remote_driver [ base ] then
97973: LD_EXP 104
97977: PUSH
97978: LD_VAR 0 1
97982: ARRAY
97983: IFFALSE 98007
// mechs := mechs diff mc_remote_driver [ base ] ;
97985: LD_ADDR_VAR 0 13
97989: PUSH
97990: LD_VAR 0 13
97994: PUSH
97995: LD_EXP 104
97999: PUSH
98000: LD_VAR 0 1
98004: ARRAY
98005: DIFF
98006: ST_TO_ADDR
// for i in mechs do
98007: LD_ADDR_VAR 0 5
98011: PUSH
98012: LD_VAR 0 13
98016: PUSH
98017: FOR_IN
98018: IFFALSE 98053
// if GetTag ( i ) > 0 then
98020: LD_VAR 0 5
98024: PPUSH
98025: CALL_OW 110
98029: PUSH
98030: LD_INT 0
98032: GREATER
98033: IFFALSE 98051
// mechs := mechs diff i ;
98035: LD_ADDR_VAR 0 13
98039: PUSH
98040: LD_VAR 0 13
98044: PUSH
98045: LD_VAR 0 5
98049: DIFF
98050: ST_TO_ADDR
98051: GO 98017
98053: POP
98054: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
98055: LD_ADDR_VAR 0 9
98059: PUSH
98060: LD_EXP 64
98064: PUSH
98065: LD_VAR 0 1
98069: ARRAY
98070: PPUSH
98071: LD_INT 2
98073: PUSH
98074: LD_INT 25
98076: PUSH
98077: LD_INT 1
98079: PUSH
98080: EMPTY
98081: LIST
98082: LIST
98083: PUSH
98084: LD_INT 25
98086: PUSH
98087: LD_INT 5
98089: PUSH
98090: EMPTY
98091: LIST
98092: LIST
98093: PUSH
98094: LD_INT 25
98096: PUSH
98097: LD_INT 8
98099: PUSH
98100: EMPTY
98101: LIST
98102: LIST
98103: PUSH
98104: LD_INT 25
98106: PUSH
98107: LD_INT 9
98109: PUSH
98110: EMPTY
98111: LIST
98112: LIST
98113: PUSH
98114: EMPTY
98115: LIST
98116: LIST
98117: LIST
98118: LIST
98119: LIST
98120: PPUSH
98121: CALL_OW 72
98125: ST_TO_ADDR
// if not defenders and not solds then
98126: LD_VAR 0 2
98130: NOT
98131: PUSH
98132: LD_VAR 0 9
98136: NOT
98137: AND
98138: IFFALSE 98142
// exit ;
98140: GO 99768
// depot_under_attack := false ;
98142: LD_ADDR_VAR 0 17
98146: PUSH
98147: LD_INT 0
98149: ST_TO_ADDR
// sold_defenders := [ ] ;
98150: LD_ADDR_VAR 0 18
98154: PUSH
98155: EMPTY
98156: ST_TO_ADDR
// if mechs then
98157: LD_VAR 0 13
98161: IFFALSE 98290
// for i in defenders do
98163: LD_ADDR_VAR 0 5
98167: PUSH
98168: LD_VAR 0 2
98172: PUSH
98173: FOR_IN
98174: IFFALSE 98288
// begin SetTag ( i , 20 ) ;
98176: LD_VAR 0 5
98180: PPUSH
98181: LD_INT 20
98183: PPUSH
98184: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
98188: LD_VAR 0 5
98192: PPUSH
98193: CALL_OW 263
98197: PUSH
98198: LD_INT 1
98200: EQUAL
98201: PUSH
98202: LD_VAR 0 5
98206: PPUSH
98207: CALL_OW 311
98211: NOT
98212: AND
98213: PUSH
98214: LD_VAR 0 13
98218: AND
98219: IFFALSE 98286
// begin un := mechs [ 1 ] ;
98221: LD_ADDR_VAR 0 11
98225: PUSH
98226: LD_VAR 0 13
98230: PUSH
98231: LD_INT 1
98233: ARRAY
98234: ST_TO_ADDR
// ComExitBuilding ( un ) ;
98235: LD_VAR 0 11
98239: PPUSH
98240: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
98244: LD_VAR 0 11
98248: PPUSH
98249: LD_VAR 0 5
98253: PPUSH
98254: CALL_OW 180
// SetTag ( un , 19 ) ;
98258: LD_VAR 0 11
98262: PPUSH
98263: LD_INT 19
98265: PPUSH
98266: CALL_OW 109
// mechs := mechs diff un ;
98270: LD_ADDR_VAR 0 13
98274: PUSH
98275: LD_VAR 0 13
98279: PUSH
98280: LD_VAR 0 11
98284: DIFF
98285: ST_TO_ADDR
// end ; end ;
98286: GO 98173
98288: POP
98289: POP
// if solds then
98290: LD_VAR 0 9
98294: IFFALSE 98353
// for i in solds do
98296: LD_ADDR_VAR 0 5
98300: PUSH
98301: LD_VAR 0 9
98305: PUSH
98306: FOR_IN
98307: IFFALSE 98351
// if not GetTag ( i ) then
98309: LD_VAR 0 5
98313: PPUSH
98314: CALL_OW 110
98318: NOT
98319: IFFALSE 98349
// begin defenders := defenders union i ;
98321: LD_ADDR_VAR 0 2
98325: PUSH
98326: LD_VAR 0 2
98330: PUSH
98331: LD_VAR 0 5
98335: UNION
98336: ST_TO_ADDR
// SetTag ( i , 18 ) ;
98337: LD_VAR 0 5
98341: PPUSH
98342: LD_INT 18
98344: PPUSH
98345: CALL_OW 109
// end ;
98349: GO 98306
98351: POP
98352: POP
// repeat wait ( 0 0$1 ) ;
98353: LD_INT 35
98355: PPUSH
98356: CALL_OW 67
// enemy := mc_scan [ base ] ;
98360: LD_ADDR_VAR 0 3
98364: PUSH
98365: LD_EXP 87
98369: PUSH
98370: LD_VAR 0 1
98374: ARRAY
98375: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
98376: LD_EXP 64
98380: PUSH
98381: LD_VAR 0 1
98385: ARRAY
98386: NOT
98387: PUSH
98388: LD_EXP 64
98392: PUSH
98393: LD_VAR 0 1
98397: ARRAY
98398: PUSH
98399: EMPTY
98400: EQUAL
98401: OR
98402: IFFALSE 98439
// begin for i in defenders do
98404: LD_ADDR_VAR 0 5
98408: PUSH
98409: LD_VAR 0 2
98413: PUSH
98414: FOR_IN
98415: IFFALSE 98428
// ComStop ( i ) ;
98417: LD_VAR 0 5
98421: PPUSH
98422: CALL_OW 141
98426: GO 98414
98428: POP
98429: POP
// defenders := [ ] ;
98430: LD_ADDR_VAR 0 2
98434: PUSH
98435: EMPTY
98436: ST_TO_ADDR
// exit ;
98437: GO 99768
// end ; for i in defenders do
98439: LD_ADDR_VAR 0 5
98443: PUSH
98444: LD_VAR 0 2
98448: PUSH
98449: FOR_IN
98450: IFFALSE 99268
// begin e := NearestUnitToUnit ( enemy , i ) ;
98452: LD_ADDR_VAR 0 14
98456: PUSH
98457: LD_VAR 0 3
98461: PPUSH
98462: LD_VAR 0 5
98466: PPUSH
98467: CALL_OW 74
98471: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
98472: LD_ADDR_VAR 0 8
98476: PUSH
98477: LD_EXP 64
98481: PUSH
98482: LD_VAR 0 1
98486: ARRAY
98487: PPUSH
98488: LD_INT 2
98490: PUSH
98491: LD_INT 30
98493: PUSH
98494: LD_INT 0
98496: PUSH
98497: EMPTY
98498: LIST
98499: LIST
98500: PUSH
98501: LD_INT 30
98503: PUSH
98504: LD_INT 1
98506: PUSH
98507: EMPTY
98508: LIST
98509: LIST
98510: PUSH
98511: EMPTY
98512: LIST
98513: LIST
98514: LIST
98515: PPUSH
98516: CALL_OW 72
98520: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
98521: LD_ADDR_VAR 0 17
98525: PUSH
98526: LD_VAR 0 8
98530: NOT
98531: PUSH
98532: LD_VAR 0 8
98536: PPUSH
98537: LD_INT 3
98539: PUSH
98540: LD_INT 24
98542: PUSH
98543: LD_INT 600
98545: PUSH
98546: EMPTY
98547: LIST
98548: LIST
98549: PUSH
98550: EMPTY
98551: LIST
98552: LIST
98553: PPUSH
98554: CALL_OW 72
98558: OR
98559: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
98560: LD_VAR 0 5
98564: PPUSH
98565: CALL_OW 247
98569: PUSH
98570: LD_INT 2
98572: DOUBLE
98573: EQUAL
98574: IFTRUE 98578
98576: GO 98974
98578: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
98579: LD_VAR 0 5
98583: PPUSH
98584: CALL_OW 256
98588: PUSH
98589: LD_INT 650
98591: GREATER
98592: PUSH
98593: LD_VAR 0 5
98597: PPUSH
98598: LD_VAR 0 14
98602: PPUSH
98603: CALL_OW 296
98607: PUSH
98608: LD_INT 40
98610: LESS
98611: PUSH
98612: LD_VAR 0 14
98616: PPUSH
98617: LD_EXP 89
98621: PUSH
98622: LD_VAR 0 1
98626: ARRAY
98627: PPUSH
98628: CALL_OW 308
98632: OR
98633: AND
98634: IFFALSE 98756
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
98636: LD_VAR 0 5
98640: PPUSH
98641: CALL_OW 262
98645: PUSH
98646: LD_INT 1
98648: EQUAL
98649: PUSH
98650: LD_VAR 0 5
98654: PPUSH
98655: CALL_OW 261
98659: PUSH
98660: LD_INT 30
98662: LESS
98663: AND
98664: PUSH
98665: LD_VAR 0 8
98669: AND
98670: IFFALSE 98740
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
98672: LD_VAR 0 5
98676: PPUSH
98677: LD_VAR 0 8
98681: PPUSH
98682: LD_VAR 0 5
98686: PPUSH
98687: CALL_OW 74
98691: PPUSH
98692: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
98696: LD_VAR 0 5
98700: PPUSH
98701: LD_VAR 0 8
98705: PPUSH
98706: LD_VAR 0 5
98710: PPUSH
98711: CALL_OW 74
98715: PPUSH
98716: CALL_OW 296
98720: PUSH
98721: LD_INT 6
98723: LESS
98724: IFFALSE 98738
// SetFuel ( i , 100 ) ;
98726: LD_VAR 0 5
98730: PPUSH
98731: LD_INT 100
98733: PPUSH
98734: CALL_OW 240
// end else
98738: GO 98754
// ComAttackUnit ( i , e ) ;
98740: LD_VAR 0 5
98744: PPUSH
98745: LD_VAR 0 14
98749: PPUSH
98750: CALL_OW 115
// end else
98754: GO 98857
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
98756: LD_VAR 0 14
98760: PPUSH
98761: LD_EXP 89
98765: PUSH
98766: LD_VAR 0 1
98770: ARRAY
98771: PPUSH
98772: CALL_OW 308
98776: NOT
98777: PUSH
98778: LD_VAR 0 5
98782: PPUSH
98783: LD_VAR 0 14
98787: PPUSH
98788: CALL_OW 296
98792: PUSH
98793: LD_INT 40
98795: GREATEREQUAL
98796: AND
98797: PUSH
98798: LD_VAR 0 5
98802: PPUSH
98803: CALL_OW 256
98807: PUSH
98808: LD_INT 650
98810: LESSEQUAL
98811: OR
98812: PUSH
98813: LD_VAR 0 5
98817: PPUSH
98818: LD_EXP 88
98822: PUSH
98823: LD_VAR 0 1
98827: ARRAY
98828: PPUSH
98829: CALL_OW 308
98833: NOT
98834: AND
98835: IFFALSE 98857
// ComMoveToArea ( i , mc_parking [ base ] ) ;
98837: LD_VAR 0 5
98841: PPUSH
98842: LD_EXP 88
98846: PUSH
98847: LD_VAR 0 1
98851: ARRAY
98852: PPUSH
98853: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
98857: LD_VAR 0 5
98861: PPUSH
98862: CALL_OW 256
98866: PUSH
98867: LD_INT 998
98869: LESS
98870: PUSH
98871: LD_VAR 0 5
98875: PPUSH
98876: CALL_OW 263
98880: PUSH
98881: LD_INT 1
98883: EQUAL
98884: AND
98885: PUSH
98886: LD_VAR 0 5
98890: PPUSH
98891: CALL_OW 311
98895: AND
98896: PUSH
98897: LD_VAR 0 5
98901: PPUSH
98902: LD_EXP 88
98906: PUSH
98907: LD_VAR 0 1
98911: ARRAY
98912: PPUSH
98913: CALL_OW 308
98917: AND
98918: IFFALSE 98972
// begin mech := IsDrivenBy ( i ) ;
98920: LD_ADDR_VAR 0 10
98924: PUSH
98925: LD_VAR 0 5
98929: PPUSH
98930: CALL_OW 311
98934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
98935: LD_VAR 0 10
98939: PPUSH
98940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
98944: LD_VAR 0 10
98948: PPUSH
98949: LD_VAR 0 5
98953: PPUSH
98954: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
98958: LD_VAR 0 10
98962: PPUSH
98963: LD_VAR 0 5
98967: PPUSH
98968: CALL_OW 180
// end ; end ; unit_human :
98972: GO 99239
98974: LD_INT 1
98976: DOUBLE
98977: EQUAL
98978: IFTRUE 98982
98980: GO 99238
98982: POP
// begin b := IsInUnit ( i ) ;
98983: LD_ADDR_VAR 0 19
98987: PUSH
98988: LD_VAR 0 5
98992: PPUSH
98993: CALL_OW 310
98997: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
98998: LD_ADDR_VAR 0 20
99002: PUSH
99003: LD_VAR 0 19
99007: NOT
99008: PUSH
99009: LD_VAR 0 19
99013: PPUSH
99014: CALL_OW 266
99018: PUSH
99019: LD_INT 32
99021: PUSH
99022: LD_INT 31
99024: PUSH
99025: EMPTY
99026: LIST
99027: LIST
99028: IN
99029: OR
99030: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
99031: LD_VAR 0 17
99035: PUSH
99036: LD_VAR 0 2
99040: PPUSH
99041: LD_INT 21
99043: PUSH
99044: LD_INT 2
99046: PUSH
99047: EMPTY
99048: LIST
99049: LIST
99050: PPUSH
99051: CALL_OW 72
99055: PUSH
99056: LD_INT 1
99058: LESSEQUAL
99059: OR
99060: PUSH
99061: LD_VAR 0 20
99065: AND
99066: PUSH
99067: LD_VAR 0 5
99071: PUSH
99072: LD_VAR 0 18
99076: IN
99077: NOT
99078: AND
99079: IFFALSE 99172
// begin if b then
99081: LD_VAR 0 19
99085: IFFALSE 99134
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
99087: LD_VAR 0 19
99091: PPUSH
99092: LD_VAR 0 3
99096: PPUSH
99097: LD_VAR 0 19
99101: PPUSH
99102: CALL_OW 74
99106: PPUSH
99107: CALL_OW 296
99111: PUSH
99112: LD_INT 10
99114: LESS
99115: PUSH
99116: LD_VAR 0 19
99120: PPUSH
99121: CALL_OW 461
99125: PUSH
99126: LD_INT 7
99128: NONEQUAL
99129: AND
99130: IFFALSE 99134
// continue ;
99132: GO 98449
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
99134: LD_ADDR_VAR 0 18
99138: PUSH
99139: LD_VAR 0 18
99143: PPUSH
99144: LD_VAR 0 18
99148: PUSH
99149: LD_INT 1
99151: PLUS
99152: PPUSH
99153: LD_VAR 0 5
99157: PPUSH
99158: CALL_OW 1
99162: ST_TO_ADDR
// ComExitBuilding ( i ) ;
99163: LD_VAR 0 5
99167: PPUSH
99168: CALL_OW 122
// end ; if sold_defenders then
99172: LD_VAR 0 18
99176: IFFALSE 99236
// if i in sold_defenders then
99178: LD_VAR 0 5
99182: PUSH
99183: LD_VAR 0 18
99187: IN
99188: IFFALSE 99236
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
99190: LD_VAR 0 5
99194: PPUSH
99195: CALL_OW 314
99199: NOT
99200: PUSH
99201: LD_VAR 0 5
99205: PPUSH
99206: LD_VAR 0 14
99210: PPUSH
99211: CALL_OW 296
99215: PUSH
99216: LD_INT 30
99218: LESS
99219: AND
99220: IFFALSE 99236
// ComAttackUnit ( i , e ) ;
99222: LD_VAR 0 5
99226: PPUSH
99227: LD_VAR 0 14
99231: PPUSH
99232: CALL_OW 115
// end ; end ; end ;
99236: GO 99239
99238: POP
// if IsDead ( i ) then
99239: LD_VAR 0 5
99243: PPUSH
99244: CALL_OW 301
99248: IFFALSE 99266
// defenders := defenders diff i ;
99250: LD_ADDR_VAR 0 2
99254: PUSH
99255: LD_VAR 0 2
99259: PUSH
99260: LD_VAR 0 5
99264: DIFF
99265: ST_TO_ADDR
// end ;
99266: GO 98449
99268: POP
99269: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
99270: LD_VAR 0 3
99274: NOT
99275: PUSH
99276: LD_VAR 0 2
99280: NOT
99281: OR
99282: PUSH
99283: LD_EXP 64
99287: PUSH
99288: LD_VAR 0 1
99292: ARRAY
99293: NOT
99294: OR
99295: IFFALSE 98353
// MC_Reset ( base , 18 ) ;
99297: LD_VAR 0 1
99301: PPUSH
99302: LD_INT 18
99304: PPUSH
99305: CALL 53985 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
99309: LD_ADDR_VAR 0 2
99313: PUSH
99314: LD_VAR 0 2
99318: PUSH
99319: LD_VAR 0 2
99323: PPUSH
99324: LD_INT 2
99326: PUSH
99327: LD_INT 25
99329: PUSH
99330: LD_INT 1
99332: PUSH
99333: EMPTY
99334: LIST
99335: LIST
99336: PUSH
99337: LD_INT 25
99339: PUSH
99340: LD_INT 5
99342: PUSH
99343: EMPTY
99344: LIST
99345: LIST
99346: PUSH
99347: LD_INT 25
99349: PUSH
99350: LD_INT 8
99352: PUSH
99353: EMPTY
99354: LIST
99355: LIST
99356: PUSH
99357: LD_INT 25
99359: PUSH
99360: LD_INT 9
99362: PUSH
99363: EMPTY
99364: LIST
99365: LIST
99366: PUSH
99367: EMPTY
99368: LIST
99369: LIST
99370: LIST
99371: LIST
99372: LIST
99373: PPUSH
99374: CALL_OW 72
99378: DIFF
99379: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
99380: LD_VAR 0 3
99384: NOT
99385: PUSH
99386: LD_VAR 0 2
99390: PPUSH
99391: LD_INT 21
99393: PUSH
99394: LD_INT 2
99396: PUSH
99397: EMPTY
99398: LIST
99399: LIST
99400: PPUSH
99401: CALL_OW 72
99405: AND
99406: IFFALSE 99744
// begin tmp := FilterByTag ( defenders , 19 ) ;
99408: LD_ADDR_VAR 0 12
99412: PUSH
99413: LD_VAR 0 2
99417: PPUSH
99418: LD_INT 19
99420: PPUSH
99421: CALL 46925 0 2
99425: ST_TO_ADDR
// if tmp then
99426: LD_VAR 0 12
99430: IFFALSE 99500
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
99432: LD_ADDR_VAR 0 12
99436: PUSH
99437: LD_VAR 0 12
99441: PPUSH
99442: LD_INT 25
99444: PUSH
99445: LD_INT 3
99447: PUSH
99448: EMPTY
99449: LIST
99450: LIST
99451: PPUSH
99452: CALL_OW 72
99456: ST_TO_ADDR
// if tmp then
99457: LD_VAR 0 12
99461: IFFALSE 99500
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
99463: LD_ADDR_EXP 76
99467: PUSH
99468: LD_EXP 76
99472: PPUSH
99473: LD_VAR 0 1
99477: PPUSH
99478: LD_EXP 76
99482: PUSH
99483: LD_VAR 0 1
99487: ARRAY
99488: PUSH
99489: LD_VAR 0 12
99493: UNION
99494: PPUSH
99495: CALL_OW 1
99499: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
99500: LD_VAR 0 1
99504: PPUSH
99505: LD_INT 19
99507: PPUSH
99508: CALL 53985 0 2
// repeat wait ( 0 0$1 ) ;
99512: LD_INT 35
99514: PPUSH
99515: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
99519: LD_EXP 64
99523: PUSH
99524: LD_VAR 0 1
99528: ARRAY
99529: NOT
99530: PUSH
99531: LD_EXP 64
99535: PUSH
99536: LD_VAR 0 1
99540: ARRAY
99541: PUSH
99542: EMPTY
99543: EQUAL
99544: OR
99545: IFFALSE 99582
// begin for i in defenders do
99547: LD_ADDR_VAR 0 5
99551: PUSH
99552: LD_VAR 0 2
99556: PUSH
99557: FOR_IN
99558: IFFALSE 99571
// ComStop ( i ) ;
99560: LD_VAR 0 5
99564: PPUSH
99565: CALL_OW 141
99569: GO 99557
99571: POP
99572: POP
// defenders := [ ] ;
99573: LD_ADDR_VAR 0 2
99577: PUSH
99578: EMPTY
99579: ST_TO_ADDR
// exit ;
99580: GO 99768
// end ; for i in defenders do
99582: LD_ADDR_VAR 0 5
99586: PUSH
99587: LD_VAR 0 2
99591: PUSH
99592: FOR_IN
99593: IFFALSE 99682
// begin if not IsInArea ( i , mc_parking [ base ] ) then
99595: LD_VAR 0 5
99599: PPUSH
99600: LD_EXP 88
99604: PUSH
99605: LD_VAR 0 1
99609: ARRAY
99610: PPUSH
99611: CALL_OW 308
99615: NOT
99616: IFFALSE 99640
// ComMoveToArea ( i , mc_parking [ base ] ) else
99618: LD_VAR 0 5
99622: PPUSH
99623: LD_EXP 88
99627: PUSH
99628: LD_VAR 0 1
99632: ARRAY
99633: PPUSH
99634: CALL_OW 113
99638: GO 99680
// if GetControl ( i ) = control_manual then
99640: LD_VAR 0 5
99644: PPUSH
99645: CALL_OW 263
99649: PUSH
99650: LD_INT 1
99652: EQUAL
99653: IFFALSE 99680
// if IsDrivenBy ( i ) then
99655: LD_VAR 0 5
99659: PPUSH
99660: CALL_OW 311
99664: IFFALSE 99680
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
99666: LD_VAR 0 5
99670: PPUSH
99671: CALL_OW 311
99675: PPUSH
99676: CALL_OW 121
// end ;
99680: GO 99592
99682: POP
99683: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
99684: LD_VAR 0 2
99688: PPUSH
99689: LD_INT 95
99691: PUSH
99692: LD_EXP 88
99696: PUSH
99697: LD_VAR 0 1
99701: ARRAY
99702: PUSH
99703: EMPTY
99704: LIST
99705: LIST
99706: PPUSH
99707: CALL_OW 72
99711: PUSH
99712: LD_VAR 0 2
99716: EQUAL
99717: PUSH
99718: LD_EXP 87
99722: PUSH
99723: LD_VAR 0 1
99727: ARRAY
99728: OR
99729: PUSH
99730: LD_EXP 64
99734: PUSH
99735: LD_VAR 0 1
99739: ARRAY
99740: NOT
99741: OR
99742: IFFALSE 99512
// end ; MC_Reset ( base , 19 ) ;
99744: LD_VAR 0 1
99748: PPUSH
99749: LD_INT 19
99751: PPUSH
99752: CALL 53985 0 2
// MC_Reset ( base , 20 ) ;
99756: LD_VAR 0 1
99760: PPUSH
99761: LD_INT 20
99763: PPUSH
99764: CALL 53985 0 2
// end ;
99768: LD_VAR 0 4
99772: RET
