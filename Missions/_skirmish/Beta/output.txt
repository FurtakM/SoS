// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5179 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2342 0 0
// PrepareBeta ;
  49: CALL 2731 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 10556 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3313 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4038 0 0
// PrepareRUBase_v2 ;
 877: CALL 4454 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 55424 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3925 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10413 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10413 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10413 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10413 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2048
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4782 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2017
// Say ( Brighton , DBrighton-F1a ) else
2003: LD_EXP 8
2007: PPUSH
2008: LD_STRING DBrighton-F1a
2010: PPUSH
2011: CALL_OW 88
2015: GO 2036
// begin Say ( Brighton , DBrighton-F1 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DBrighton-F1
2024: PPUSH
2025: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2029: LD_STRING C3
2031: PPUSH
2032: CALL_OW 337
// end ; DialogueOff ;
2036: CALL_OW 7
// JMM_Arrived := true ;
2040: LD_ADDR_EXP 5
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// end ;
2048: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2049: LD_EXP 5
2053: PUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_EXP 18
2061: PPUSH
2062: CALL_OW 292
2066: AND
2067: IFFALSE 2096
2069: GO 2071
2071: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2072: LD_EXP 18
2076: PPUSH
2077: LD_STRING DBurlak
2079: PPUSH
2080: CALL_OW 88
// Say ( JMM , DJMM ) ;
2084: LD_EXP 36
2088: PPUSH
2089: LD_STRING DJMM
2091: PPUSH
2092: CALL_OW 88
// end ;
2096: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2097: LD_INT 1
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: LD_INT 34
2115: PUSH
2116: LD_INT 9
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 35
2125: PUSH
2126: LD_INT 9
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: GREATER
2151: IFFALSE 2164
2153: GO 2155
2155: DISABLE
// begin LaserBuilt := true ;
2156: LD_ADDR_EXP 6
2160: PUSH
2161: LD_INT 1
2163: ST_TO_ADDR
// end ;
2164: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2165: LD_EXP 7
2169: PUSH
2170: LD_INT 6
2172: PPUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 35
2188: PUSH
2189: LD_INT 9
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 69
2208: PPUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 310
2218: PPUSH
2219: CALL_OW 74
2223: PPUSH
2224: CALL_OW 292
2228: AND
2229: IFFALSE 2265
2231: GO 2233
2233: DISABLE
// begin wait ( 0 0$5 ) ;
2234: LD_INT 175
2236: PPUSH
2237: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2241: LD_EXP 15
2245: PPUSH
2246: LD_STRING DDeath-Vse-2
2248: PPUSH
2249: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2253: LD_EXP 12
2257: PPUSH
2258: LD_STRING DDeath-Yas-2
2260: PPUSH
2261: CALL_OW 88
// end ;
2265: END
// every 0 0$1 trigger AssaultStarted do
2266: LD_EXP 7
2270: IFFALSE 2294
2272: GO 2274
2274: DISABLE
// begin wait ( 0 0$20 ) ;
2275: LD_INT 700
2277: PPUSH
2278: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2282: LD_EXP 13
2286: PPUSH
2287: LD_STRING DDeath-Pop-2
2289: PPUSH
2290: CALL_OW 88
// end ;
2294: END
// every 0 0$1 trigger MissionStart do
2295: LD_EXP 1
2299: IFFALSE 2341
2301: GO 2303
2303: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2304: LD_INT 1750
2306: PPUSH
2307: LD_INT 4900
2309: PPUSH
2310: CALL_OW 12
2314: PPUSH
2315: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2319: LD_INT 2
2321: PPUSH
2322: LD_INT 5
2324: PPUSH
2325: CALL_OW 12
2329: PPUSH
2330: LD_INT 12
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 55
// enable ;
2340: ENABLE
// end ; end_of_file
2341: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2342: LD_INT 0
2344: PPUSH
// uc_side := 1 ;
2345: LD_ADDR_OWVAR 20
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// hc_class = class_soldier ;
2353: LD_ADDR_OWVAR 28
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// uc_nation := nation_american ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// hc_sex = sex_male ;
2369: LD_ADDR_OWVAR 27
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// hc_importance = 110 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 110
2384: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2385: LD_ADDR_OWVAR 30
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 4
2395: PUSH
2396: LD_INT 5
2398: PUSH
2399: LD_INT 3
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2408: LD_ADDR_OWVAR 31
2412: PUSH
2413: LD_INT 9
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2431: LD_ADDR_OWVAR 29
2435: PUSH
2436: LD_INT 12
2438: PUSH
2439: LD_INT 10
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2446: LD_ADDR_OWVAR 26
2450: PUSH
2451: LD_STRING Gerard Brighton
2453: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2454: LD_ADDR_OWVAR 33
2458: PUSH
2459: LD_STRING Beta_Skirmish
2461: ST_TO_ADDR
// hc_face_number := 1 ;
2462: LD_ADDR_OWVAR 34
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// Brighton := CreateHuman ;
2470: LD_ADDR_EXP 8
2474: PUSH
2475: CALL_OW 44
2479: ST_TO_ADDR
// uc_nation := nation_american ;
2480: LD_ADDR_OWVAR 21
2484: PUSH
2485: LD_INT 1
2487: ST_TO_ADDR
// hc_importance = 80 ;
2488: LD_ADDR_OWVAR 32
2492: PUSH
2493: LD_INT 80
2495: ST_TO_ADDR
// hc_sex = sex_male ;
2496: LD_ADDR_OWVAR 27
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2504: LD_ADDR_OWVAR 30
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 5
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2527: LD_ADDR_OWVAR 31
2531: PUSH
2532: LD_INT 7
2534: PUSH
2535: LD_INT 6
2537: PUSH
2538: LD_INT 5
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2550: LD_ADDR_OWVAR 29
2554: PUSH
2555: LD_INT 10
2557: PUSH
2558: LD_INT 10
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: ST_TO_ADDR
// hc_name := Brian Palmer ;
2565: LD_ADDR_OWVAR 26
2569: PUSH
2570: LD_STRING Brian Palmer
2572: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2573: LD_ADDR_OWVAR 33
2577: PUSH
2578: LD_STRING Beta_Skirmish
2580: ST_TO_ADDR
// hc_face_number := 3 ;
2581: LD_ADDR_OWVAR 34
2585: PUSH
2586: LD_INT 3
2588: ST_TO_ADDR
// Palmer := CreateHuman ;
2589: LD_ADDR_EXP 9
2593: PUSH
2594: CALL_OW 44
2598: ST_TO_ADDR
// hc_class = class_scientistic ;
2599: LD_ADDR_OWVAR 28
2603: PUSH
2604: LD_INT 4
2606: ST_TO_ADDR
// uc_nation := nation_american ;
2607: LD_ADDR_OWVAR 21
2611: PUSH
2612: LD_INT 1
2614: ST_TO_ADDR
// hc_importance = 70 ;
2615: LD_ADDR_OWVAR 32
2619: PUSH
2620: LD_INT 70
2622: ST_TO_ADDR
// hc_sex = sex_female ;
2623: LD_ADDR_OWVAR 27
2627: PUSH
2628: LD_INT 2
2630: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2631: LD_ADDR_OWVAR 30
2635: PUSH
2636: LD_INT 3
2638: PUSH
2639: LD_INT 2
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2654: LD_ADDR_OWVAR 31
2658: PUSH
2659: LD_INT 4
2661: PUSH
2662: LD_INT 2
2664: PUSH
2665: LD_INT 5
2667: PUSH
2668: LD_INT 8
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2677: LD_ADDR_OWVAR 29
2681: PUSH
2682: LD_INT 10
2684: PUSH
2685: LD_INT 10
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: ST_TO_ADDR
// hc_name := Megan Armitage ;
2692: LD_ADDR_OWVAR 26
2696: PUSH
2697: LD_STRING Megan Armitage
2699: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2700: LD_ADDR_OWVAR 33
2704: PUSH
2705: LD_STRING Beta_Skirmish
2707: ST_TO_ADDR
// hc_face_number := 4 ;
2708: LD_ADDR_OWVAR 34
2712: PUSH
2713: LD_INT 4
2715: ST_TO_ADDR
// Megan := CreateHuman ;
2716: LD_ADDR_EXP 10
2720: PUSH
2721: CALL_OW 44
2725: ST_TO_ADDR
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
// uc_side := 1 ;
2738: LD_ADDR_OWVAR 20
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// uc_nation := nation_american ;
2746: LD_ADDR_OWVAR 21
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: LD_INT 22
2761: PUSH
2762: LD_INT 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 30
2771: PUSH
2772: LD_INT 32
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: FOR_IN
2789: IFFALSE 2844
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_INT 2
2798: PUSH
2799: LD_INT 3
2801: PUSH
2802: LD_INT 4
2804: PUSH
2805: LD_INT 5
2807: PUSH
2808: LD_INT 11
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 1
2828: PPUSH
2829: LD_INT 7
2831: PPUSH
2832: CALL_OW 12
2836: ARRAY
2837: PPUSH
2838: CALL_OW 431
2842: GO 2788
2844: POP
2845: POP
// hc_name :=  ;
2846: LD_ADDR_OWVAR 26
2850: PUSH
2851: LD_STRING 
2853: ST_TO_ADDR
// hc_gallery :=  ;
2854: LD_ADDR_OWVAR 33
2858: PUSH
2859: LD_STRING 
2861: ST_TO_ADDR
// for i = 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 7
2874: PUSH
2875: LD_INT 6
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_OWVAR 67
2890: ARRAY
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2951
// begin PrepareSoldier ( 1 , game_skill ) ;
2895: LD_INT 1
2897: PPUSH
2898: LD_EXP 38
2902: PPUSH
2903: CALL_OW 381
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 4
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// filter := filter ^ un ;
2917: LD_ADDR_VAR 0 3
2921: PUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_VAR 0 4
2931: ADD
2932: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2933: LD_ADDR_VAR 0 5
2937: PUSH
2938: LD_VAR 0 5
2942: PUSH
2943: LD_VAR 0 4
2947: ADD
2948: ST_TO_ADDR
// end ;
2949: GO 2892
2951: POP
2952: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2953: LD_ADDR_VAR 0 2
2957: PUSH
2958: DOUBLE
2959: LD_INT 1
2961: DEC
2962: ST_TO_ADDR
2963: LD_INT 3
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: PUSH
2977: LD_OWVAR 67
2981: ARRAY
2982: PUSH
2983: FOR_TO
2984: IFFALSE 3038
// begin PrepareEngineer ( 0 , game_skill ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_EXP 38
2993: PPUSH
2994: CALL_OW 382
// un := CreateHuman ;
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: CALL_OW 44
3007: ST_TO_ADDR
// filter := filter ^ un ;
3008: LD_ADDR_VAR 0 3
3012: PUSH
3013: LD_VAR 0 3
3017: PUSH
3018: LD_VAR 0 4
3022: ADD
3023: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3024: LD_VAR 0 4
3028: PPUSH
3029: LD_INT 3
3031: PPUSH
3032: CALL_OW 52
// end ;
3036: GO 2983
3038: POP
3039: POP
// for i = 1 to [ 4 , 4 , 3 ] [ Difficulty ] do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 4
3052: PUSH
3053: LD_INT 4
3055: PUSH
3056: LD_INT 3
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_OWVAR 67
3068: ARRAY
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3125
// begin PrepareMechanic ( 0 , game_skill ) ;
3073: LD_INT 0
3075: PPUSH
3076: LD_EXP 38
3080: PPUSH
3081: CALL_OW 383
// un := CreateHuman ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: CALL_OW 44
3094: ST_TO_ADDR
// filter := filter ^ un ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_VAR 0 3
3104: PUSH
3105: LD_VAR 0 4
3109: ADD
3110: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 8
3118: PPUSH
3119: CALL_OW 52
// end ;
3123: GO 3070
3125: POP
3126: POP
// for i = 1 to 3 do
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: DOUBLE
3133: LD_INT 1
3135: DEC
3136: ST_TO_ADDR
3137: LD_INT 3
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3195
// begin PrepareScientist ( 0 , game_skill ) ;
3143: LD_INT 0
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 384
// un := CreateHuman ;
3155: LD_ADDR_VAR 0 4
3159: PUSH
3160: CALL_OW 44
3164: ST_TO_ADDR
// filter := filter ^ un ;
3165: LD_ADDR_VAR 0 3
3169: PUSH
3170: LD_VAR 0 3
3174: PUSH
3175: LD_VAR 0 4
3179: ADD
3180: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3181: LD_VAR 0 4
3185: PPUSH
3186: LD_INT 14
3188: PPUSH
3189: CALL_OW 52
// end ;
3193: GO 3140
3195: POP
3196: POP
// for i = 1 to soldiers do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_VAR 0 5
3211: PUSH
3212: FOR_TO
3213: IFFALSE 3238
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3215: LD_VAR 0 5
3219: PUSH
3220: LD_VAR 0 2
3224: ARRAY
3225: PPUSH
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
3236: GO 3212
3238: POP
3239: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3240: LD_EXP 8
3244: PPUSH
3245: LD_INT 51
3247: PPUSH
3248: LD_INT 43
3250: PPUSH
3251: LD_INT 0
3253: PPUSH
3254: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3258: LD_EXP 9
3262: PPUSH
3263: LD_INT 55
3265: PPUSH
3266: LD_INT 58
3268: PPUSH
3269: LD_INT 0
3271: PPUSH
3272: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3276: LD_EXP 10
3280: PPUSH
3281: LD_INT 39
3283: PPUSH
3284: LD_INT 36
3286: PPUSH
3287: LD_INT 0
3289: PPUSH
3290: CALL_OW 48
// BetaSquad := filter diff 0 ;
3294: LD_ADDR_EXP 11
3298: PUSH
3299: LD_VAR 0 3
3303: PUSH
3304: LD_INT 0
3306: DIFF
3307: ST_TO_ADDR
// end ;
3308: LD_VAR 0 1
3312: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3313: LD_INT 0
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// uc_side := 6 ;
3321: LD_ADDR_OWVAR 20
3325: PUSH
3326: LD_INT 6
3328: ST_TO_ADDR
// uc_nation := nation_russian ;
3329: LD_ADDR_OWVAR 21
3333: PUSH
3334: LD_INT 3
3336: ST_TO_ADDR
// soldiers := [ ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: EMPTY
3343: ST_TO_ADDR
// vehs := [ ] ;
3344: LD_ADDR_VAR 0 6
3348: PUSH
3349: EMPTY
3350: ST_TO_ADDR
// RUArmada := [ ] ;
3351: LD_ADDR_EXP 16
3355: PUSH
3356: EMPTY
3357: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3358: LD_ADDR_EXP 12
3362: PUSH
3363: LD_STRING Yashin
3365: PPUSH
3366: CALL_OW 25
3370: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3371: LD_ADDR_EXP 13
3375: PUSH
3376: LD_STRING Popov
3378: PPUSH
3379: CALL_OW 25
3383: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3384: LD_ADDR_EXP 14
3388: PUSH
3389: LD_STRING Gaydar
3391: PPUSH
3392: CALL_OW 25
3396: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3397: LD_ADDR_EXP 15
3401: PUSH
3402: LD_STRING Vsevolod
3404: PPUSH
3405: CALL_OW 25
3409: ST_TO_ADDR
// for i = 1 to 16 do
3410: LD_ADDR_VAR 0 2
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 16
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3466
// begin PrepareSoldier ( 0 , game_eskill ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_EXP 39
3433: PPUSH
3434: CALL_OW 381
// un := CreateHuman ;
3438: LD_ADDR_VAR 0 5
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3448: LD_ADDR_VAR 0 4
3452: PUSH
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 5
3462: ADD
3463: ST_TO_ADDR
// end ;
3464: GO 3423
3466: POP
3467: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3468: LD_ADDR_VAR 0 4
3472: PUSH
3473: LD_EXP 12
3477: PUSH
3478: LD_EXP 13
3482: ADD
3483: PUSH
3484: LD_EXP 14
3488: ADD
3489: PUSH
3490: LD_EXP 15
3494: ADD
3495: PUSH
3496: LD_VAR 0 4
3500: ADD
3501: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3502: LD_INT 24
3504: PPUSH
3505: LD_INT 3
3507: PPUSH
3508: LD_INT 1
3510: PPUSH
3511: LD_INT 46
3513: PPUSH
3514: LD_INT 100
3516: PPUSH
3517: CALL 17306 0 5
// for i = 1 to 8 do
3521: LD_ADDR_VAR 0 2
3525: PUSH
3526: DOUBLE
3527: LD_INT 1
3529: DEC
3530: ST_TO_ADDR
3531: LD_INT 8
3533: PUSH
3534: FOR_TO
3535: IFFALSE 3618
// begin vehicle := CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3547: LD_VAR 0 4
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: PPUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: LD_VAR 0 4
3574: PUSH
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: DIFF
3584: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 5
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
// vehs := vehs ^ vehicle ;
3600: LD_ADDR_VAR 0 6
3604: PUSH
3605: LD_VAR 0 6
3609: PUSH
3610: LD_VAR 0 3
3614: ADD
3615: ST_TO_ADDR
// end ;
3616: GO 3534
3618: POP
3619: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3620: LD_INT 24
3622: PPUSH
3623: LD_INT 3
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 43
3631: PPUSH
3632: LD_INT 100
3634: PPUSH
3635: CALL 17306 0 5
// for i = 1 to 8 do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 8
3651: PUSH
3652: FOR_TO
3653: IFFALSE 3736
// begin vehicle := CreateVehicle ;
3655: LD_ADDR_VAR 0 3
3659: PUSH
3660: CALL_OW 45
3664: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3665: LD_VAR 0 4
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: PPUSH
3674: LD_VAR 0 3
3678: PPUSH
3679: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3683: LD_ADDR_VAR 0 4
3687: PUSH
3688: LD_VAR 0 4
3692: PUSH
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: DIFF
3702: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_INT 5
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL_OW 49
// vehs := vehs ^ vehicle ;
3718: LD_ADDR_VAR 0 6
3722: PUSH
3723: LD_VAR 0 6
3727: PUSH
3728: LD_VAR 0 3
3732: ADD
3733: ST_TO_ADDR
// end ;
3734: GO 3652
3736: POP
3737: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3738: LD_INT 22
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 44
3749: PPUSH
3750: LD_INT 100
3752: PPUSH
3753: CALL 17306 0 5
// for i = 1 to 4 do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_INT 4
3769: PUSH
3770: FOR_TO
3771: IFFALSE 3854
// begin vehicle := CreateVehicle ;
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: CALL_OW 45
3782: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3783: LD_VAR 0 4
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: PPUSH
3792: LD_VAR 0 3
3796: PPUSH
3797: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3801: LD_ADDR_VAR 0 4
3805: PUSH
3806: LD_VAR 0 4
3810: PUSH
3811: LD_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: DIFF
3820: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 5
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// vehs := vehs ^ vehicle ;
3836: LD_ADDR_VAR 0 6
3840: PUSH
3841: LD_VAR 0 6
3845: PUSH
3846: LD_VAR 0 3
3850: ADD
3851: ST_TO_ADDR
// end ;
3852: GO 3770
3854: POP
3855: POP
// RUArmada := vehs ;
3856: LD_ADDR_EXP 16
3860: PUSH
3861: LD_VAR 0 6
3865: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3866: LD_EXP 12
3870: PPUSH
3871: CALL_OW 310
3875: PUSH
3876: LD_EXP 13
3880: PPUSH
3881: CALL_OW 310
3885: PUSH
3886: LD_EXP 14
3890: PPUSH
3891: CALL_OW 310
3895: PUSH
3896: LD_EXP 15
3900: PPUSH
3901: CALL_OW 310
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_INT 6
3914: NEG
3915: PPUSH
3916: CALL_OW 242
// end ;
3920: LD_VAR 0 1
3924: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3925: LD_INT 0
3927: PPUSH
3928: PPUSH
3929: PPUSH
// uc_side := 6 ;
3930: LD_ADDR_OWVAR 20
3934: PUSH
3935: LD_INT 6
3937: ST_TO_ADDR
// uc_nation := nation_russian ;
3938: LD_ADDR_OWVAR 21
3942: PUSH
3943: LD_INT 3
3945: ST_TO_ADDR
// Bulldozers := [ ] ;
3946: LD_ADDR_EXP 17
3950: PUSH
3951: EMPTY
3952: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3953: LD_INT 24
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 53
3964: PPUSH
3965: LD_INT 100
3967: PPUSH
3968: CALL 17306 0 5
// for i = 1 to 2 do
3972: LD_ADDR_VAR 0 2
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_INT 2
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4031
// begin vehicle := CreateVehicle ;
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: CALL_OW 45
3997: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4013: LD_ADDR_EXP 17
4017: PUSH
4018: LD_EXP 17
4022: PUSH
4023: LD_VAR 0 3
4027: ADD
4028: ST_TO_ADDR
// end ;
4029: GO 3985
4031: POP
4032: POP
// end ;
4033: LD_VAR 0 1
4037: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4038: LD_INT 0
4040: PPUSH
4041: PPUSH
4042: PPUSH
4043: PPUSH
// uc_side := 3 ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_INT 3
4051: ST_TO_ADDR
// uc_nation := nation_russian ;
4052: LD_ADDR_OWVAR 21
4056: PUSH
4057: LD_INT 3
4059: ST_TO_ADDR
// hc_name :=  ;
4060: LD_ADDR_OWVAR 26
4064: PUSH
4065: LD_STRING 
4067: ST_TO_ADDR
// hc_gallery :=  ;
4068: LD_ADDR_OWVAR 33
4072: PUSH
4073: LD_STRING 
4075: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4076: LD_ADDR_EXP 18
4080: PUSH
4081: LD_STRING Burlak
4083: PPUSH
4084: CALL_OW 25
4088: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4089: LD_ADDR_EXP 19
4093: PUSH
4094: LD_STRING Gleb
4096: PPUSH
4097: CALL_OW 25
4101: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4102: LD_ADDR_EXP 20
4106: PUSH
4107: LD_STRING Furmanov
4109: PPUSH
4110: CALL_OW 25
4114: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4115: LD_ADDR_EXP 21
4119: PUSH
4120: LD_STRING Titov
4122: PPUSH
4123: CALL_OW 25
4127: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4128: LD_ADDR_EXP 22
4132: PUSH
4133: LD_STRING Scholtze
4135: PPUSH
4136: CALL_OW 25
4140: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4141: LD_ADDR_EXP 23
4145: PUSH
4146: LD_STRING Dolgov
4148: PPUSH
4149: CALL_OW 25
4153: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Kapitsova
4161: PPUSH
4162: CALL_OW 25
4166: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4167: LD_ADDR_EXP 25
4171: PUSH
4172: LD_STRING Karamazov
4174: PPUSH
4175: CALL_OW 25
4179: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4180: LD_ADDR_EXP 26
4184: PUSH
4185: LD_STRING Kirlenkova
4187: PPUSH
4188: CALL_OW 25
4192: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4193: LD_ADDR_EXP 27
4197: PUSH
4198: LD_STRING Kovalyuk
4200: PPUSH
4201: CALL_OW 25
4205: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4206: LD_ADDR_EXP 28
4210: PUSH
4211: LD_STRING Kozlov
4213: PPUSH
4214: CALL_OW 25
4218: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4219: LD_ADDR_EXP 29
4223: PUSH
4224: LD_STRING Kuzmov
4226: PPUSH
4227: CALL_OW 25
4231: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4232: LD_ADDR_EXP 30
4236: PUSH
4237: LD_STRING Lipshchin
4239: PPUSH
4240: CALL_OW 25
4244: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4245: LD_ADDR_EXP 31
4249: PUSH
4250: LD_STRING Oblukov
4252: PPUSH
4253: CALL_OW 25
4257: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4258: LD_ADDR_EXP 32
4262: PUSH
4263: LD_STRING Xavier2
4265: PPUSH
4266: CALL_OW 25
4270: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4271: LD_ADDR_EXP 33
4275: PUSH
4276: LD_STRING Gnyevko
4278: PPUSH
4279: CALL_OW 25
4283: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4284: LD_ADDR_EXP 34
4288: PUSH
4289: LD_STRING Belkov
4291: PPUSH
4292: CALL_OW 25
4296: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: LD_EXP 18
4306: PUSH
4307: LD_EXP 19
4311: PUSH
4312: LD_EXP 20
4316: PUSH
4317: LD_EXP 21
4321: PUSH
4322: LD_EXP 22
4326: PUSH
4327: LD_EXP 23
4331: PUSH
4332: LD_EXP 24
4336: PUSH
4337: LD_EXP 25
4341: PUSH
4342: LD_EXP 26
4346: PUSH
4347: LD_EXP 27
4351: PUSH
4352: LD_EXP 28
4356: PUSH
4357: LD_EXP 29
4361: PUSH
4362: LD_EXP 30
4366: PUSH
4367: LD_EXP 31
4371: PUSH
4372: LD_EXP 32
4376: PUSH
4377: LD_EXP 33
4381: PUSH
4382: LD_EXP 34
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: ST_TO_ADDR
// for i = 1 to filter do
4406: LD_ADDR_VAR 0 2
4410: PUSH
4411: DOUBLE
4412: LD_INT 1
4414: DEC
4415: ST_TO_ADDR
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4447
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4424: LD_VAR 0 3
4428: PUSH
4429: LD_VAR 0 2
4433: ARRAY
4434: PPUSH
4435: LD_INT 6
4437: PPUSH
4438: LD_INT 0
4440: PPUSH
4441: CALL_OW 49
4445: GO 4421
4447: POP
4448: POP
// end ;
4449: LD_VAR 0 1
4453: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
// uc_side := 3 ;
4460: LD_ADDR_OWVAR 20
4464: PUSH
4465: LD_INT 3
4467: ST_TO_ADDR
// uc_nation := nation_russian ;
4468: LD_ADDR_OWVAR 21
4472: PUSH
4473: LD_INT 3
4475: ST_TO_ADDR
// hc_name :=  ;
4476: LD_ADDR_OWVAR 26
4480: PUSH
4481: LD_STRING 
4483: ST_TO_ADDR
// hc_gallery :=  ;
4484: LD_ADDR_OWVAR 33
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// for i = 1 to 8 do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 8
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4548
// begin PrepareSoldier ( 0 , game_eskill ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_EXP 39
4515: PPUSH
4516: CALL_OW 381
// un := CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// filter := filter ^ un ;
4530: LD_ADDR_VAR 0 3
4534: PUSH
4535: LD_VAR 0 3
4539: PUSH
4540: LD_VAR 0 4
4544: ADD
4545: ST_TO_ADDR
// end ;
4546: GO 4505
4548: POP
4549: POP
// for i = 1 to 4 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 4
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4606
// begin PrepareEngineer ( 0 , game_eskill ) ;
4566: LD_INT 0
4568: PPUSH
4569: LD_EXP 39
4573: PPUSH
4574: CALL_OW 382
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// filter := filter ^ un ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 3
4597: PUSH
4598: LD_VAR 0 4
4602: ADD
4603: ST_TO_ADDR
// end ;
4604: GO 4563
4606: POP
4607: POP
// for i = 1 to 6 do
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: DOUBLE
4614: LD_INT 1
4616: DEC
4617: ST_TO_ADDR
4618: LD_INT 6
4620: PUSH
4621: FOR_TO
4622: IFFALSE 4664
// begin PrepareMechanic ( 0 , game_eskill ) ;
4624: LD_INT 0
4626: PPUSH
4627: LD_EXP 39
4631: PPUSH
4632: CALL_OW 383
// un := CreateHuman ;
4636: LD_ADDR_VAR 0 4
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// filter := filter ^ un ;
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_VAR 0 3
4655: PUSH
4656: LD_VAR 0 4
4660: ADD
4661: ST_TO_ADDR
// end ;
4662: GO 4621
4664: POP
4665: POP
// for i = 1 to 4 do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_INT 4
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4722
// begin PrepareScientist ( 0 , game_eskill ) ;
4682: LD_INT 0
4684: PPUSH
4685: LD_EXP 39
4689: PPUSH
4690: CALL_OW 384
// un := CreateHuman ;
4694: LD_ADDR_VAR 0 4
4698: PUSH
4699: CALL_OW 44
4703: ST_TO_ADDR
// filter := filter ^ un ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: LD_VAR 0 3
4713: PUSH
4714: LD_VAR 0 4
4718: ADD
4719: ST_TO_ADDR
// end ;
4720: GO 4679
4722: POP
4723: POP
// for i = 1 to filter do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_VAR 0 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4765
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4742: LD_VAR 0 3
4746: PUSH
4747: LD_VAR 0 2
4751: ARRAY
4752: PPUSH
4753: LD_INT 6
4755: PPUSH
4756: LD_INT 0
4758: PPUSH
4759: CALL_OW 49
4763: GO 4739
4765: POP
4766: POP
// RU_SecondPersonnel := filter ;
4767: LD_ADDR_EXP 35
4771: PUSH
4772: LD_VAR 0 3
4776: ST_TO_ADDR
// end ;
4777: LD_VAR 0 1
4781: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4782: LD_INT 0
4784: PPUSH
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
// uc_side := 1 ;
4791: LD_ADDR_OWVAR 20
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// uc_nation := nation_american ;
4799: LD_ADDR_OWVAR 21
4803: PUSH
4804: LD_INT 1
4806: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4807: LD_ADDR_EXP 36
4811: PUSH
4812: LD_STRING JMM
4814: PPUSH
4815: CALL_OW 25
4819: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4820: LD_EXP 36
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4832: LD_EXP 36
4836: PPUSH
4837: LD_INT 7
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 49
// mechs := [ ] ;
4847: LD_ADDR_VAR 0 7
4851: PUSH
4852: EMPTY
4853: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_INT 4
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 3
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PUSH
4878: LD_OWVAR 67
4882: ARRAY
4883: PUSH
4884: FOR_TO
4885: IFFALSE 4946
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4887: LD_INT 0
4889: PPUSH
4890: LD_EXP 38
4894: PUSH
4895: LD_INT 1
4897: PLUS
4898: PPUSH
4899: CALL_OW 381
// un := CreateHuman ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_VAR 0 4
4927: ADD
4928: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4929: LD_VAR 0 4
4933: PPUSH
4934: LD_INT 7
4936: PPUSH
4937: LD_INT 0
4939: PPUSH
4940: CALL_OW 49
// end ;
4944: GO 4884
4946: POP
4947: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 7
4960: PUSH
4961: LD_INT 6
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_OWVAR 67
4976: ARRAY
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5025
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_EXP 38
4988: PUSH
4989: LD_INT 1
4991: PLUS
4992: PPUSH
4993: CALL_OW 383
// un := CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// mechs := mechs ^ un ;
5007: LD_ADDR_VAR 0 7
5011: PUSH
5012: LD_VAR 0 7
5016: PUSH
5017: LD_VAR 0 4
5021: ADD
5022: ST_TO_ADDR
// end ;
5023: GO 4978
5025: POP
5026: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 3
5032: PPUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_INT 5
5038: PPUSH
5039: LD_INT 100
5041: PPUSH
5042: CALL 17306 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: DOUBLE
5052: LD_INT 1
5054: DEC
5055: ST_TO_ADDR
5056: LD_INT 7
5058: PUSH
5059: LD_INT 6
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: PUSH
5076: FOR_TO
5077: IFFALSE 5172
// begin vehicle := CreateVehicle ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: CALL_OW 45
5088: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5089: LD_VAR 0 7
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PPUSH
5098: LD_VAR 0 6
5102: PPUSH
5103: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5107: LD_ADDR_VAR 0 7
5111: PUSH
5112: LD_VAR 0 7
5116: PUSH
5117: LD_VAR 0 7
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: DIFF
5126: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5139: LD_VAR 0 6
5143: PPUSH
5144: LD_INT 7
5146: PPUSH
5147: LD_INT 0
5149: PPUSH
5150: CALL_OW 49
// vehs := vehs ^ vehicle ;
5154: LD_ADDR_VAR 0 5
5158: PUSH
5159: LD_VAR 0 5
5163: PUSH
5164: LD_VAR 0 6
5168: ADD
5169: ST_TO_ADDR
// end ;
5170: GO 5076
5172: POP
5173: POP
// end ; end_of_file
5174: LD_VAR 0 1
5178: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5179: LD_INT 0
5181: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5182: LD_ADDR_OWVAR 67
5186: PUSH
5187: LD_INT 0
5189: PPUSH
5190: CALL_OW 426
5194: ST_TO_ADDR
// game_diff := Difficulty ;
5195: LD_ADDR_EXP 37
5199: PUSH
5200: LD_OWVAR 67
5204: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5205: LD_ADDR_EXP 38
5209: PUSH
5210: LD_INT 7
5212: PUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_EXP 37
5228: ARRAY
5229: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5230: LD_ADDR_EXP 39
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: LD_EXP 37
5253: ARRAY
5254: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5255: LD_ADDR_EXP 41
5259: PUSH
5260: LD_INT 6300
5262: PUSH
5263: LD_INT 5250
5265: PUSH
5266: LD_INT 4200
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PUSH
5274: LD_EXP 37
5278: ARRAY
5279: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5280: LD_ADDR_EXP 40
5284: PUSH
5285: LD_INT 73500
5287: PUSH
5288: LD_INT 94500
5290: PUSH
5291: LD_INT 115500
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_EXP 37
5303: ARRAY
5304: ST_TO_ADDR
// end ; end_of_file
5305: LD_VAR 0 1
5309: RET
// export function CustomEvent ( event ) ; begin
5310: LD_INT 0
5312: PPUSH
// end ;
5313: LD_VAR 0 2
5317: RET
// export function CustomInitMacro ( ) ; begin
5318: LD_INT 0
5320: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 3
5326: PPUSH
5327: CALL 77743 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5331: LD_INT 1
5333: PPUSH
5334: LD_INT 4
5336: PPUSH
5337: CALL 77687 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5341: LD_INT 1
5343: PPUSH
5344: LD_INT 136
5346: PUSH
5347: LD_INT 130
5349: PUSH
5350: LD_INT 0
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 145
5360: PUSH
5361: LD_INT 123
5363: PUSH
5364: LD_INT 0
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL 76809 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 43
5385: PUSH
5386: LD_INT 46
5388: PUSH
5389: LD_INT 45
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL 77575 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 3
5406: PPUSH
5407: CALL 77257 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5411: LD_INT 1
5413: PPUSH
5414: LD_INT 3
5416: PPUSH
5417: CALL 76988 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5421: LD_INT 1
5423: PPUSH
5424: LD_INT 8
5426: PPUSH
5427: CALL 76670 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: LD_INT 43
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 1
5457: PUSH
5458: LD_INT 3
5460: PUSH
5461: LD_INT 44
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 22
5472: PUSH
5473: LD_INT 1
5475: PUSH
5476: LD_INT 3
5478: PUSH
5479: LD_INT 45
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 24
5490: PUSH
5491: LD_INT 1
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: LD_INT 43
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 43
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 24
5526: PUSH
5527: LD_INT 1
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: LD_INT 46
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 22
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 43
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 22
5562: PUSH
5563: LD_INT 1
5565: PUSH
5566: LD_INT 3
5568: PUSH
5569: LD_INT 44
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL 76485 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5592: LD_INT 1
5594: PPUSH
5595: LD_INT 0
5597: PUSH
5598: LD_INT 127
5600: PUSH
5601: LD_INT 125
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 6
5615: PUSH
5616: LD_INT 124
5618: PUSH
5619: LD_INT 132
5621: PUSH
5622: LD_INT 0
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 29
5633: PUSH
5634: LD_INT 136
5636: PUSH
5637: LD_INT 130
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: LD_INT 4
5651: PUSH
5652: LD_INT 118
5654: PUSH
5655: LD_INT 114
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 29
5669: PUSH
5670: LD_INT 145
5672: PUSH
5673: LD_INT 123
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 26
5687: PUSH
5688: LD_INT 150
5690: PUSH
5691: LD_INT 135
5693: PUSH
5694: LD_INT 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 26
5705: PUSH
5706: LD_INT 140
5708: PUSH
5709: LD_INT 134
5711: PUSH
5712: LD_INT 2
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 137
5726: PUSH
5727: LD_INT 121
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 155
5744: PUSH
5745: LD_INT 130
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: LD_INT 32
5759: PUSH
5760: LD_INT 155
5762: PUSH
5763: LD_INT 130
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 32
5777: PUSH
5778: LD_INT 130
5780: PUSH
5781: LD_INT 114
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 32
5795: PUSH
5796: LD_INT 142
5798: PUSH
5799: LD_INT 115
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 32
5813: PUSH
5814: LD_INT 153
5816: PUSH
5817: LD_INT 120
5819: PUSH
5820: LD_INT 3
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL 76377 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5848: LD_INT 1
5850: PPUSH
5851: LD_INT 10
5853: PUSH
5854: LD_INT 12
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PPUSH
5861: CALL 77164 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5865: LD_INT 1
5867: PPUSH
5868: LD_INT 155
5870: PPUSH
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 24
5879: PUSH
5880: LD_INT 16
5882: PUSH
5883: LD_INT 17
5885: PUSH
5886: LD_INT 18
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PPUSH
5899: CALL 77369 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5903: LD_INT 2
5905: PPUSH
5906: LD_INT 3
5908: PPUSH
5909: CALL 77743 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 4
5918: PPUSH
5919: CALL 77687 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 84
5928: PUSH
5929: LD_INT 125
5931: PUSH
5932: LD_INT 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: PPUSH
5943: CALL 76809 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5947: LD_INT 2
5949: PPUSH
5950: LD_INT 43
5952: PUSH
5953: LD_INT 46
5955: PUSH
5956: LD_INT 45
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: LIST
5963: PPUSH
5964: CALL 77575 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5968: LD_INT 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL 77257 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
5978: LD_INT 2
5980: PPUSH
5981: LD_INT 3
5983: PPUSH
5984: CALL 76988 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
5988: LD_INT 2
5990: PPUSH
5991: LD_INT 8
5993: PPUSH
5994: CALL 76670 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
5998: LD_INT 2
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 3
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 43
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 22
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: LD_INT 44
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 45
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 24
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: LD_INT 43
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 24
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 43
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 24
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 46
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_INT 3
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 43
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: LD_INT 44
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL 76485 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6159: LD_INT 2
6161: PPUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 96
6167: PUSH
6168: LD_INT 125
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 74
6185: PUSH
6186: LD_INT 122
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 30
6200: PUSH
6201: LD_INT 84
6203: PUSH
6204: LD_INT 125
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 28
6218: PUSH
6219: LD_INT 86
6221: PUSH
6222: LD_INT 128
6224: PUSH
6225: LD_INT 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 28
6236: PUSH
6237: LD_INT 85
6239: PUSH
6240: LD_INT 130
6242: PUSH
6243: LD_INT 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: PUSH
6252: LD_INT 28
6254: PUSH
6255: LD_INT 88
6257: PUSH
6258: LD_INT 132
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 106
6275: PUSH
6276: LD_INT 130
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 99
6293: PUSH
6294: LD_INT 114
6296: PUSH
6297: LD_INT 3
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 32
6308: PUSH
6309: LD_INT 72
6311: PUSH
6312: LD_INT 112
6314: PUSH
6315: LD_INT 2
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 32
6326: PUSH
6327: LD_INT 78
6329: PUSH
6330: LD_INT 110
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 32
6344: PUSH
6345: LD_INT 84
6347: PUSH
6348: LD_INT 110
6350: PUSH
6351: LD_INT 2
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 32
6362: PUSH
6363: LD_INT 105
6365: PUSH
6366: LD_INT 117
6368: PUSH
6369: LD_INT 3
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL 76377 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 14
6401: PUSH
6402: LD_INT 11
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL 77164 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6413: LD_INT 2
6415: PPUSH
6416: LD_INT 106
6418: PPUSH
6419: LD_INT 130
6421: PPUSH
6422: LD_INT 0
6424: PPUSH
6425: LD_INT 24
6427: PUSH
6428: LD_INT 16
6430: PUSH
6431: LD_INT 17
6433: PUSH
6434: LD_INT 18
6436: PUSH
6437: LD_INT 21
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL 77369 0 5
// end ;
6451: LD_VAR 0 1
6455: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6456: LD_INT 22
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: LD_INT 3
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 69
6484: IFFALSE 7340
6486: GO 6488
6488: DISABLE
6489: LD_INT 0
6491: PPUSH
6492: PPUSH
6493: PPUSH
6494: PPUSH
6495: PPUSH
6496: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6497: LD_INT 6300
6499: PUSH
6500: LD_INT 4200
6502: PUSH
6503: LD_INT 2100
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_OWVAR 67
6515: ARRAY
6516: PPUSH
6517: CALL_OW 67
// base := 2 ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_INT 2
6528: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: NOT
6558: IFFALSE 6562
// continue ;
6560: GO 6497
// case Rand ( 1 , 3 ) of 1 :
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 3
6567: PPUSH
6568: CALL_OW 12
6572: PUSH
6573: LD_INT 1
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6757
6581: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 43
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 24
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 46
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 24
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: LD_INT 43
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 46
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 22
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: LD_INT 45
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 43
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 24
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: LD_INT 46
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 45
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6741: LD_VAR 0 2
6745: PPUSH
6746: LD_VAR 0 3
6750: PPUSH
6751: CALL 76533 0 2
// end ; 2 :
6755: GO 7088
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6903
6765: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6766: LD_ADDR_VAR 0 3
6770: PUSH
6771: LD_INT 24
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 24
6791: PUSH
6792: LD_INT 3
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: LD_INT 46
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 24
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: LD_INT 43
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 24
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 46
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_INT 45
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 22
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 45
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_VAR 0 3
6896: PPUSH
6897: CALL 76533 0 2
// end ; 3 :
6901: GO 7088
6903: LD_INT 3
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7087
6911: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6912: LD_ADDR_VAR 0 3
6916: PUSH
6917: LD_INT 22
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 43
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 24
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 3
6943: PUSH
6944: LD_INT 46
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: LD_INT 43
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: LD_INT 46
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 22
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: LD_INT 45
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_INT 3
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: LD_INT 43
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 46
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 45
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7071: LD_VAR 0 2
7075: PPUSH
7076: LD_VAR 0 3
7080: PPUSH
7081: CALL 76533 0 2
// end ; end ;
7085: GO 7088
7087: POP
// repeat wait ( 0 0$1 ) ;
7088: LD_INT 35
7090: PPUSH
7091: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL 76881 0 1
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: IFFALSE 7088
// wait ( 0 0$30 ) ;
7110: LD_INT 1050
7112: PPUSH
7113: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_INT 86
7124: PUSH
7125: LD_INT 77
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 63
7134: PUSH
7135: LD_INT 38
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7146: LD_ADDR_VAR 0 4
7150: PUSH
7151: LD_INT 0
7153: PUSH
7154: LD_INT 0
7156: PUSH
7157: LD_INT 0
7159: PUSH
7160: LD_INT 1
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: LD_INT 0
7168: PUSH
7169: LD_INT 0
7171: PUSH
7172: LD_INT 0
7174: PUSH
7175: LD_INT 1
7177: PUSH
7178: LD_INT 0
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7193: LD_ADDR_VAR 0 6
7197: PUSH
7198: LD_EXP 71
7202: PUSH
7203: LD_VAR 0 2
7207: ARRAY
7208: PUSH
7209: LD_EXP 74
7213: PUSH
7214: LD_VAR 0 2
7218: ARRAY
7219: DIFF
7220: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7221: LD_ADDR_EXP 71
7225: PUSH
7226: LD_EXP 71
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: LD_EXP 71
7240: PUSH
7241: LD_VAR 0 2
7245: ARRAY
7246: PUSH
7247: LD_VAR 0 6
7251: DIFF
7252: PPUSH
7253: CALL_OW 1
7257: ST_TO_ADDR
// if not attackers then
7258: LD_VAR 0 6
7262: NOT
7263: IFFALSE 7267
// continue ;
7265: GO 6497
// repeat wait ( 0 0$1 ) ;
7267: LD_INT 35
7269: PPUSH
7270: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7274: LD_VAR 0 6
7278: PPUSH
7279: LD_INT 60
7281: PUSH
7282: EMPTY
7283: LIST
7284: PPUSH
7285: CALL_OW 72
7289: NOT
7290: IFFALSE 7267
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7292: LD_VAR 0 2
7296: PPUSH
7297: LD_VAR 0 6
7301: PPUSH
7302: LD_VAR 0 5
7306: PPUSH
7307: LD_VAR 0 4
7311: PPUSH
7312: CALL 76718 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7316: LD_EXP 52
7320: PUSH
7321: LD_VAR 0 2
7325: ARRAY
7326: PPUSH
7327: LD_INT 50
7329: PUSH
7330: EMPTY
7331: LIST
7332: PPUSH
7333: CALL_OW 72
7337: NOT
7338: IFFALSE 6497
// end ;
7340: PPOPN 6
7342: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7343: LD_INT 22
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 30
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: IFFALSE 8268
7373: GO 7375
7375: DISABLE
7376: LD_INT 0
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7384: LD_INT 6300
7386: PUSH
7387: LD_INT 4200
7389: PUSH
7390: LD_INT 2100
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: LD_OWVAR 67
7402: ARRAY
7403: PPUSH
7404: CALL_OW 67
// base := 1 ;
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7416: LD_INT 22
7418: PUSH
7419: LD_INT 3
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 30
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: NOT
7445: IFFALSE 7449
// continue ;
7447: GO 7384
// case Rand ( 1 , 3 ) of 1 :
7449: LD_INT 1
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: CALL_OW 12
7459: PUSH
7460: LD_INT 1
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7644
7468: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7469: LD_ADDR_VAR 0 3
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_INT 1
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 43
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 24
7494: PUSH
7495: LD_INT 1
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 46
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 1
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_INT 43
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 24
7530: PUSH
7531: LD_INT 1
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: LD_INT 46
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: LD_INT 45
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 43
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 24
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 46
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 45
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: CALL 76533 0 2
// end ; 2 :
7642: GO 8013
7644: LD_INT 2
7646: DOUBLE
7647: EQUAL
7648: IFTRUE 7652
7650: GO 7828
7652: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 24
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: LD_INT 43
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 24
7678: PUSH
7679: LD_INT 1
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: LD_INT 46
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 24
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: LD_INT 3
7702: PUSH
7703: LD_INT 43
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 24
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: LD_INT 3
7720: PUSH
7721: LD_INT 46
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: LD_INT 45
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: LD_INT 45
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 1
7771: PUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 45
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 22
7786: PUSH
7787: LD_INT 1
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: LD_INT 45
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7812: LD_VAR 0 2
7816: PPUSH
7817: LD_VAR 0 3
7821: PPUSH
7822: CALL 76533 0 2
// end ; 3 :
7826: GO 8013
7828: LD_INT 3
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 8012
7836: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 22
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: LD_INT 43
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 46
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: LD_INT 3
7886: PUSH
7887: LD_INT 43
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 24
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: LD_INT 46
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: LD_INT 3
7922: PUSH
7923: LD_INT 45
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: LD_INT 3
7940: PUSH
7941: LD_INT 43
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 24
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 46
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 45
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7996: LD_VAR 0 2
8000: PPUSH
8001: LD_VAR 0 3
8005: PPUSH
8006: CALL 76533 0 2
// end ; end ;
8010: GO 8013
8012: POP
// repeat wait ( 0 0$1 ) ;
8013: LD_INT 35
8015: PPUSH
8016: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 1
8027: PPUSH
8028: CALL 77888 0 2
8032: PUSH
8033: LD_INT 8
8035: GREATEREQUAL
8036: IFFALSE 8013
// wait ( 0 0$30 ) ;
8038: LD_INT 1050
8040: PPUSH
8041: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8045: LD_ADDR_VAR 0 5
8049: PUSH
8050: LD_INT 144
8052: PUSH
8053: LD_INT 65
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 63
8062: PUSH
8063: LD_INT 38
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8074: LD_ADDR_VAR 0 4
8078: PUSH
8079: LD_INT 0
8081: PUSH
8082: LD_INT 0
8084: PUSH
8085: LD_INT 0
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: LD_INT 0
8096: PUSH
8097: LD_INT 0
8099: PUSH
8100: LD_INT 0
8102: PUSH
8103: LD_INT 1
8105: PUSH
8106: LD_INT 0
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8121: LD_ADDR_VAR 0 6
8125: PUSH
8126: LD_EXP 71
8130: PUSH
8131: LD_VAR 0 2
8135: ARRAY
8136: PUSH
8137: LD_EXP 74
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: DIFF
8148: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8149: LD_ADDR_EXP 71
8153: PUSH
8154: LD_EXP 71
8158: PPUSH
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_EXP 71
8168: PUSH
8169: LD_VAR 0 2
8173: ARRAY
8174: PUSH
8175: LD_VAR 0 6
8179: DIFF
8180: PPUSH
8181: CALL_OW 1
8185: ST_TO_ADDR
// if not attackers then
8186: LD_VAR 0 6
8190: NOT
8191: IFFALSE 8195
// continue ;
8193: GO 7384
// repeat wait ( 0 0$1 ) ;
8195: LD_INT 35
8197: PPUSH
8198: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8202: LD_VAR 0 6
8206: PPUSH
8207: LD_INT 60
8209: PUSH
8210: EMPTY
8211: LIST
8212: PPUSH
8213: CALL_OW 72
8217: NOT
8218: IFFALSE 8195
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8220: LD_VAR 0 2
8224: PPUSH
8225: LD_VAR 0 6
8229: PPUSH
8230: LD_VAR 0 5
8234: PPUSH
8235: LD_VAR 0 4
8239: PPUSH
8240: CALL 76718 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8244: LD_EXP 52
8248: PUSH
8249: LD_VAR 0 2
8253: ARRAY
8254: PPUSH
8255: LD_INT 50
8257: PUSH
8258: EMPTY
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: NOT
8266: IFFALSE 7384
// end ;
8268: PPOPN 6
8270: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8271: LD_EXP 3
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_INT 3
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 21
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: PUSH
8305: LD_INT 0
8307: EQUAL
8308: AND
8309: IFFALSE 8322
8311: GO 8313
8313: DISABLE
// begin RussiansDefeated := true ;
8314: LD_ADDR_EXP 42
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// end ;
8322: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8323: LD_EXP 3
8327: PUSH
8328: LD_EXP 5
8332: NOT
8333: AND
8334: IFFALSE 9307
8336: GO 8338
8338: DISABLE
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8353: LD_INT 10500
8355: PPUSH
8356: LD_INT 13650
8358: PPUSH
8359: CALL_OW 12
8363: PUSH
8364: LD_INT 9450
8366: PPUSH
8367: LD_INT 11550
8369: PPUSH
8370: CALL_OW 12
8374: PUSH
8375: LD_INT 8400
8377: PPUSH
8378: LD_INT 10500
8380: PPUSH
8381: CALL_OW 12
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: LD_OWVAR 67
8395: ARRAY
8396: PPUSH
8397: CALL_OW 67
// filter := [ ] ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: EMPTY
8407: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8408: LD_ADDR_VAR 0 4
8412: PUSH
8413: LD_INT 2
8415: PPUSH
8416: LD_INT 3
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 3
8426: PPUSH
8427: LD_INT 4
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: LD_INT 3
8437: PPUSH
8438: LD_INT 5
8440: PPUSH
8441: CALL_OW 12
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: PUSH
8451: LD_OWVAR 67
8455: ARRAY
8456: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 5
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 2
8470: PPUSH
8471: CALL_OW 12
8475: PUSH
8476: LD_INT 2
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: CALL_OW 12
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: PUSH
8492: LD_OWVAR 67
8496: ARRAY
8497: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8498: LD_ADDR_VAR 0 6
8502: PUSH
8503: LD_INT 2
8505: PPUSH
8506: LD_INT 3
8508: PPUSH
8509: CALL_OW 12
8513: PUSH
8514: LD_INT 2
8516: PPUSH
8517: LD_INT 4
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 3
8527: PPUSH
8528: LD_INT 5
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 8
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 2
8557: PUSH
8558: LD_INT 2
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: LD_OWVAR 67
8570: ARRAY
8571: ST_TO_ADDR
// uc_side := 3 ;
8572: LD_ADDR_OWVAR 20
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// uc_nation := nation_russian ;
8580: LD_ADDR_OWVAR 21
8584: PUSH
8585: LD_INT 3
8587: ST_TO_ADDR
// for i = 1 to soldiers do
8588: LD_ADDR_VAR 0 1
8592: PUSH
8593: DOUBLE
8594: LD_INT 1
8596: DEC
8597: ST_TO_ADDR
8598: LD_VAR 0 4
8602: PUSH
8603: FOR_TO
8604: IFFALSE 8646
// begin PrepareSoldier ( 0 , game_eskill ) ;
8606: LD_INT 0
8608: PPUSH
8609: LD_EXP 39
8613: PPUSH
8614: CALL_OW 381
// un := CreateHuman ;
8618: LD_ADDR_VAR 0 2
8622: PUSH
8623: CALL_OW 44
8627: ST_TO_ADDR
// filter := filter ^ un ;
8628: LD_ADDR_VAR 0 3
8632: PUSH
8633: LD_VAR 0 3
8637: PUSH
8638: LD_VAR 0 2
8642: ADD
8643: ST_TO_ADDR
// end ;
8644: GO 8603
8646: POP
8647: POP
// for i = 1 to bazookas do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_VAR 0 5
8662: PUSH
8663: FOR_TO
8664: IFFALSE 8714
// begin PrepareSoldier ( 0 , game_eskill ) ;
8666: LD_INT 0
8668: PPUSH
8669: LD_EXP 39
8673: PPUSH
8674: CALL_OW 381
// hc_class := class_bazooker ;
8678: LD_ADDR_OWVAR 28
8682: PUSH
8683: LD_INT 9
8685: ST_TO_ADDR
// un := CreateHuman ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: CALL_OW 44
8695: ST_TO_ADDR
// filter := filter ^ un ;
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_VAR 0 3
8705: PUSH
8706: LD_VAR 0 2
8710: ADD
8711: ST_TO_ADDR
// end ;
8712: GO 8663
8714: POP
8715: POP
// for i = 1 to medics do
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: DOUBLE
8722: LD_INT 1
8724: DEC
8725: ST_TO_ADDR
8726: LD_VAR 0 8
8730: PUSH
8731: FOR_TO
8732: IFFALSE 8774
// begin PrepareScientist ( 0 , game_eskill ) ;
8734: LD_INT 0
8736: PPUSH
8737: LD_EXP 39
8741: PPUSH
8742: CALL_OW 384
// un := CreateHuman ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: CALL_OW 44
8755: ST_TO_ADDR
// filter := filter ^ un ;
8756: LD_ADDR_VAR 0 3
8760: PUSH
8761: LD_VAR 0 3
8765: PUSH
8766: LD_VAR 0 2
8770: ADD
8771: ST_TO_ADDR
// end ;
8772: GO 8731
8774: POP
8775: POP
// for i = 1 to vehs do
8776: LD_ADDR_VAR 0 1
8780: PUSH
8781: DOUBLE
8782: LD_INT 1
8784: DEC
8785: ST_TO_ADDR
8786: LD_VAR 0 6
8790: PUSH
8791: FOR_TO
8792: IFFALSE 8984
// begin case Rand ( 1 , 5 ) of 1 :
8794: LD_INT 1
8796: PPUSH
8797: LD_INT 5
8799: PPUSH
8800: CALL_OW 12
8804: PUSH
8805: LD_INT 1
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 8835
8813: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8814: LD_INT 22
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: LD_INT 3
8822: PPUSH
8823: LD_INT 43
8825: PPUSH
8826: LD_INT 100
8828: PPUSH
8829: CALL 17306 0 5
8833: GO 8956
8835: LD_INT 2
8837: DOUBLE
8838: EQUAL
8839: IFTRUE 8843
8841: GO 8865
8843: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8844: LD_INT 22
8846: PPUSH
8847: LD_INT 3
8849: PPUSH
8850: LD_INT 3
8852: PPUSH
8853: LD_INT 44
8855: PPUSH
8856: LD_INT 100
8858: PPUSH
8859: CALL 17306 0 5
8863: GO 8956
8865: LD_INT 3
8867: DOUBLE
8868: EQUAL
8869: IFTRUE 8873
8871: GO 8895
8873: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8874: LD_INT 22
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_INT 3
8882: PPUSH
8883: LD_INT 45
8885: PPUSH
8886: LD_INT 100
8888: PPUSH
8889: CALL 17306 0 5
8893: GO 8956
8895: LD_INT 4
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 8925
8903: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8904: LD_INT 24
8906: PPUSH
8907: LD_INT 3
8909: PPUSH
8910: LD_INT 3
8912: PPUSH
8913: LD_INT 43
8915: PPUSH
8916: LD_INT 100
8918: PPUSH
8919: CALL 17306 0 5
8923: GO 8956
8925: LD_INT 5
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8955
8933: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8934: LD_INT 24
8936: PPUSH
8937: LD_INT 3
8939: PPUSH
8940: LD_INT 3
8942: PPUSH
8943: LD_INT 46
8945: PPUSH
8946: LD_INT 100
8948: PPUSH
8949: CALL 17306 0 5
8953: GO 8956
8955: POP
// vehicle := CreateVehicle ;
8956: LD_ADDR_VAR 0 7
8960: PUSH
8961: CALL_OW 45
8965: ST_TO_ADDR
// filter := filter ^ vehicle ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 7
8980: ADD
8981: ST_TO_ADDR
// end ;
8982: GO 8791
8984: POP
8985: POP
// for i = 1 to filter do
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: DOUBLE
8992: LD_INT 1
8994: DEC
8995: ST_TO_ADDR
8996: LD_VAR 0 3
9000: PUSH
9001: FOR_TO
9002: IFFALSE 9027
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9004: LD_VAR 0 3
9008: PUSH
9009: LD_VAR 0 1
9013: ARRAY
9014: PPUSH
9015: LD_INT 14
9017: PPUSH
9018: LD_INT 0
9020: PPUSH
9021: CALL_OW 49
9025: GO 9001
9027: POP
9028: POP
// case Rand ( 1 , 3 ) of 1 :
9029: LD_INT 1
9031: PPUSH
9032: LD_INT 3
9034: PPUSH
9035: CALL_OW 12
9039: PUSH
9040: LD_INT 1
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9102
9048: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9049: LD_ADDR_VAR 0 11
9053: PUSH
9054: LD_INT 165
9056: PUSH
9057: LD_INT 114
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 104
9066: PUSH
9067: LD_INT 108
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 86
9076: PUSH
9077: LD_INT 77
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 63
9086: PUSH
9087: LD_INT 38
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: ST_TO_ADDR
9100: GO 9227
9102: LD_INT 2
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9110
9108: GO 9164
9110: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9111: LD_ADDR_VAR 0 11
9115: PUSH
9116: LD_INT 165
9118: PUSH
9119: LD_INT 114
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 146
9128: PUSH
9129: LD_INT 71
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 112
9138: PUSH
9139: LD_INT 41
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 63
9148: PUSH
9149: LD_INT 38
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: ST_TO_ADDR
9162: GO 9227
9164: LD_INT 3
9166: DOUBLE
9167: EQUAL
9168: IFTRUE 9172
9170: GO 9226
9172: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9173: LD_ADDR_VAR 0 11
9177: PUSH
9178: LD_INT 165
9180: PUSH
9181: LD_INT 114
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 63
9190: PUSH
9191: LD_INT 99
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 55
9200: PUSH
9201: LD_INT 77
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 63
9210: PUSH
9211: LD_INT 38
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: ST_TO_ADDR
9224: GO 9227
9226: POP
// attackers := filter ;
9227: LD_ADDR_VAR 0 10
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9237: LD_ADDR_VAR 0 12
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: LD_INT 0
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: LD_INT 0
9259: PUSH
9260: LD_INT 0
9262: PUSH
9263: LD_INT 0
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9284: LD_INT 1
9286: PPUSH
9287: LD_VAR 0 10
9291: PPUSH
9292: LD_VAR 0 11
9296: PPUSH
9297: LD_VAR 0 12
9301: PPUSH
9302: CALL 76718 0 4
// enable ;
9306: ENABLE
// end ;
9307: PPOPN 12
9309: END
// every 0 0$1 do var i , tmp ;
9310: GO 9312
9312: DISABLE
9313: LD_INT 0
9315: PPUSH
9316: PPUSH
// begin enable ;
9317: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 3
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// if tmp then
9359: LD_VAR 0 2
9363: IFFALSE 9409
// for i in tmp do
9365: LD_ADDR_VAR 0 1
9369: PUSH
9370: LD_VAR 0 2
9374: PUSH
9375: FOR_IN
9376: IFFALSE 9407
// if GetFuel ( i ) < 3 then
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 261
9387: PUSH
9388: LD_INT 3
9390: LESS
9391: IFFALSE 9405
// SetFuel ( i , 3 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 3
9400: PPUSH
9401: CALL_OW 240
9405: GO 9375
9407: POP
9408: POP
// end ; end_of_file
9409: PPOPN 2
9411: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9412: LD_VAR 0 1
9416: PUSH
9417: LD_EXP 8
9421: EQUAL
9422: IFFALSE 9438
// begin wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// YouLost ( Brighton ) ;
9431: LD_STRING Brighton
9433: PPUSH
9434: CALL_OW 104
// end ; if un = JMM then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_EXP 36
9447: EQUAL
9448: IFFALSE 9464
// begin wait ( 0 0$1 ) ;
9450: LD_INT 35
9452: PPUSH
9453: CALL_OW 67
// YouLost ( JMM ) ;
9457: LD_STRING JMM
9459: PPUSH
9460: CALL_OW 104
// end ; if un = Megan then
9464: LD_VAR 0 1
9468: PUSH
9469: LD_EXP 10
9473: EQUAL
9474: IFFALSE 9488
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9476: LD_EXP 8
9480: PPUSH
9481: LD_STRING DBrighton-MeganDeath
9483: PPUSH
9484: CALL_OW 88
// end ; if un = Palmer then
9488: LD_VAR 0 1
9492: PUSH
9493: LD_EXP 9
9497: EQUAL
9498: IFFALSE 9512
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9500: LD_EXP 8
9504: PPUSH
9505: LD_STRING DBrighton-PalmerDeath
9507: PPUSH
9508: CALL_OW 88
// end ; if un = Burlak then
9512: LD_VAR 0 1
9516: PUSH
9517: LD_EXP 18
9521: EQUAL
9522: IFFALSE 9554
// begin if JMM_Arrived then
9524: LD_EXP 5
9528: IFFALSE 9542
// Say ( JMM , DJMM-BurlakDead ) ;
9530: LD_EXP 36
9534: PPUSH
9535: LD_STRING DJMM-BurlakDead
9537: PPUSH
9538: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9542: LD_EXP 9
9546: PPUSH
9547: LD_STRING DSol-BurlakDead
9549: PPUSH
9550: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9554: LD_VAR 0 1
9558: PUSH
9559: LD_INT 1
9561: EQUAL
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: LD_INT 3
9570: EQUAL
9571: OR
9572: IFFALSE 9588
// begin wait ( 0 0$1 ) ;
9574: LD_INT 35
9576: PPUSH
9577: CALL_OW 67
// YouLost ( Depot ) ;
9581: LD_STRING Depot
9583: PPUSH
9584: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 255
9597: PUSH
9598: LD_INT 1
9600: EQUAL
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 247
9611: PUSH
9612: LD_INT 1
9614: EQUAL
9615: AND
9616: IFFALSE 9632
// Losses := Losses + 1 ;
9618: LD_ADDR_EXP 43
9622: PUSH
9623: LD_EXP 43
9627: PUSH
9628: LD_INT 1
9630: PLUS
9631: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL 79862 0 1
// end ;
9641: PPOPN 1
9643: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9644: LD_VAR 0 1
9648: PUSH
9649: LD_EXP 12
9653: EQUAL
9654: IFFALSE 9668
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9656: LD_EXP 12
9660: PPUSH
9661: LD_STRING DDeath-Yas-3
9663: PPUSH
9664: CALL_OW 91
// if un = Popov then
9668: LD_VAR 0 1
9672: PUSH
9673: LD_EXP 13
9677: EQUAL
9678: IFFALSE 9692
// ForceSay ( Popov , DDeath-Pop-3 ) ;
9680: LD_EXP 13
9684: PPUSH
9685: LD_STRING DDeath-Pop-3
9687: PPUSH
9688: CALL_OW 91
// if un = Gaydar then
9692: LD_VAR 0 1
9696: PUSH
9697: LD_EXP 14
9701: EQUAL
9702: IFFALSE 9716
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
9704: LD_EXP 14
9708: PPUSH
9709: LD_STRING DDeath-Gay-3
9711: PPUSH
9712: CALL_OW 91
// if un = Sevi then
9716: LD_VAR 0 1
9720: PUSH
9721: LD_EXP 15
9725: EQUAL
9726: IFFALSE 9740
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
9728: LD_EXP 15
9732: PPUSH
9733: LD_STRING DDeath-Vse-3
9735: PPUSH
9736: CALL_OW 91
// end ;
9740: PPOPN 1
9742: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 10
9750: EQUAL
9751: IFFALSE 9789
// begin Say ( Brighton , DBrighton-C1 ) ;
9753: LD_EXP 8
9757: PPUSH
9758: LD_STRING DBrighton-C1
9760: PPUSH
9761: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
9765: LD_EXP 10
9769: PPUSH
9770: LD_STRING DMegan-C1
9772: PPUSH
9773: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
9777: LD_EXP 8
9781: PPUSH
9782: LD_STRING DBrighton-C2
9784: PPUSH
9785: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_VAR 0 2
9798: PPUSH
9799: CALL 79558 0 2
// end ;
9803: PPOPN 2
9805: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_VAR 0 2
9815: PPUSH
9816: CALL 81917 0 2
// end ;
9820: PPOPN 2
9822: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL 80985 0 1
// end ;
9832: PPOPN 1
9834: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 266
9844: PUSH
9845: LD_INT 0
9847: EQUAL
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 255
9858: PUSH
9859: LD_INT 3
9861: EQUAL
9862: AND
9863: IFFALSE 9925
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 274
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_INT 10000
9880: PPUSH
9881: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
9885: LD_VAR 0 1
9889: PPUSH
9890: CALL_OW 274
9894: PPUSH
9895: LD_INT 2
9897: PPUSH
9898: LD_INT 250
9900: PPUSH
9901: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 274
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 100
9920: PPUSH
9921: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL 81226 0 1
// end ;
9934: PPOPN 1
9936: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9937: LD_VAR 0 1
9941: PPUSH
9942: LD_VAR 0 2
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 79178 0 5
// end ;
9966: PPOPN 5
9968: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: CALL 78774 0 2
// end ;
9983: PPOPN 2
9985: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9986: LD_VAR 0 1
9990: PPUSH
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 3
10000: PPUSH
10001: LD_VAR 0 4
10005: PPUSH
10006: CALL 78612 0 4
// end ;
10010: PPOPN 4
10012: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: CALL 78387 0 3
// end ;
10032: PPOPN 3
10034: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10035: LD_VAR 0 1
10039: PPUSH
10040: LD_VAR 0 2
10044: PPUSH
10045: CALL 78272 0 2
// end ;
10049: PPOPN 2
10051: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10052: LD_VAR 0 1
10056: PPUSH
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL 82178 0 2
// end ;
10066: PPOPN 2
10068: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 255
10078: PUSH
10079: LD_INT 6
10081: EQUAL
10082: IFFALSE 10177
// if AssaultStarted then
10084: LD_EXP 7
10088: IFFALSE 10162
// case Rand ( 1 , 4 ) of 1 .. 3 :
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 4
10095: PPUSH
10096: CALL_OW 12
10100: PUSH
10101: LD_INT 1
10103: DOUBLE
10104: GREATEREQUAL
10105: IFFALSE 10113
10107: LD_INT 3
10109: DOUBLE
10110: LESSEQUAL
10111: IFTRUE 10115
10113: GO 10133
10115: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10116: LD_VAR 0 1
10120: PPUSH
10121: LD_INT 67
10123: PPUSH
10124: LD_INT 37
10126: PPUSH
10127: CALL_OW 114
10131: GO 10160
10133: LD_INT 4
10135: DOUBLE
10136: EQUAL
10137: IFTRUE 10141
10139: GO 10159
10141: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10142: LD_VAR 0 1
10146: PPUSH
10147: LD_INT 120
10149: PPUSH
10150: LD_INT 131
10152: PPUSH
10153: CALL_OW 111
10157: GO 10160
10159: POP
10160: GO 10177
// ComMoveXY ( driver , 120 , 131 ) ;
10162: LD_VAR 0 1
10166: PPUSH
10167: LD_INT 120
10169: PPUSH
10170: LD_INT 131
10172: PPUSH
10173: CALL_OW 111
// MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10177: LD_VAR 0 1
10181: PPUSH
10182: LD_VAR 0 2
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_VAR 0 4
10196: PPUSH
10197: CALL 82394 0 4
// end ;
10201: PPOPN 4
10203: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10204: LD_VAR 0 1
10208: PPUSH
10209: LD_VAR 0 2
10213: PPUSH
10214: CALL 78081 0 2
// end ; end_of_file
10218: PPOPN 2
10220: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10221: LD_EXP 5
10225: PUSH
10226: LD_EXP 42
10230: AND
10231: IFFALSE 10412
10233: GO 10235
10235: DISABLE
// begin wait ( 0 0$2 ) ;
10236: LD_INT 70
10238: PPUSH
10239: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10243: LD_EXP 8
10247: PPUSH
10248: LD_STRING DBrighton-G1
10250: PPUSH
10251: CALL_OW 88
// if Losses < 1 then
10255: LD_EXP 43
10259: PUSH
10260: LD_INT 1
10262: LESS
10263: IFFALSE 10277
// AddMedal ( Losses , 1 ) else
10265: LD_STRING Losses
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 101
10275: GO 10310
// if Losses < 5 then
10277: LD_EXP 43
10281: PUSH
10282: LD_INT 5
10284: LESS
10285: IFFALSE 10299
// AddMedal ( Losses , 2 ) else
10287: LD_STRING Losses
10289: PPUSH
10290: LD_INT 2
10292: PPUSH
10293: CALL_OW 101
10297: GO 10310
// AddMedal ( Losses , - 1 ) ;
10299: LD_STRING Losses
10301: PPUSH
10302: LD_INT 1
10304: NEG
10305: PPUSH
10306: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10310: LD_EXP 6
10314: PUSH
10315: LD_INT 10
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 321
10325: PUSH
10326: LD_INT 2
10328: EQUAL
10329: AND
10330: IFFALSE 10344
// AddMedal ( Laser , 1 ) else
10332: LD_STRING Laser
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 101
10342: GO 10391
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10344: LD_EXP 6
10348: NOT
10349: PUSH
10350: LD_INT 10
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 321
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: AND
10365: IFFALSE 10380
// AddMedal ( Laser , - 1 ) else
10367: LD_STRING Laser
10369: PPUSH
10370: LD_INT 1
10372: NEG
10373: PPUSH
10374: CALL_OW 101
10378: GO 10391
// AddMedal ( Laser , - 2 ) ;
10380: LD_STRING Laser
10382: PPUSH
10383: LD_INT 2
10385: NEG
10386: PPUSH
10387: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
10391: LD_STRING med3
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10401: LD_STRING BaseMain
10403: PPUSH
10404: CALL_OW 102
// YouWin ;
10408: CALL_OW 103
// end ; end_of_file
10412: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// area = ListEnvironmentArea ( area ) ;
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_VAR 0 2
10426: PPUSH
10427: CALL_OW 353
10431: ST_TO_ADDR
// if bulldozer > 0 then
10432: LD_VAR 0 1
10436: PUSH
10437: LD_INT 0
10439: GREATER
10440: IFFALSE 10551
// for i = area downto 1 do
10442: LD_ADDR_VAR 0 4
10446: PUSH
10447: DOUBLE
10448: LD_VAR 0 2
10452: INC
10453: ST_TO_ADDR
10454: LD_INT 1
10456: PUSH
10457: FOR_DOWNTO
10458: IFFALSE 10549
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10460: LD_VAR 0 2
10464: PUSH
10465: LD_VAR 0 4
10469: ARRAY
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PPUSH
10475: LD_VAR 0 2
10479: PUSH
10480: LD_VAR 0 4
10484: ARRAY
10485: PUSH
10486: LD_INT 2
10488: ARRAY
10489: PPUSH
10490: CALL_OW 351
10494: IFFALSE 10547
// if not HasTask ( bulldozer ) then
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 314
10505: NOT
10506: IFFALSE 10547
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_VAR 0 2
10517: PUSH
10518: LD_VAR 0 4
10522: ARRAY
10523: PUSH
10524: LD_INT 1
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 2
10532: PUSH
10533: LD_VAR 0 4
10537: ARRAY
10538: PUSH
10539: LD_INT 2
10541: ARRAY
10542: PPUSH
10543: CALL_OW 171
10547: GO 10457
10549: POP
10550: POP
// end ;
10551: LD_VAR 0 3
10555: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10556: LD_INT 0
10558: PPUSH
10559: PPUSH
10560: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10561: LD_ADDR_VAR 0 5
10565: PUSH
10566: LD_VAR 0 2
10570: PPUSH
10571: LD_INT 0
10573: PPUSH
10574: CALL_OW 517
10578: ST_TO_ADDR
// for i = 1 to team do
10579: LD_ADDR_VAR 0 4
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_VAR 0 1
10593: PUSH
10594: FOR_TO
10595: IFFALSE 10696
// begin if IsInUnit ( team [ i ] ) then
10597: LD_VAR 0 1
10601: PUSH
10602: LD_VAR 0 4
10606: ARRAY
10607: PPUSH
10608: CALL_OW 310
10612: IFFALSE 10629
// ComExitBuilding ( team [ i ] ) ;
10614: LD_VAR 0 1
10618: PUSH
10619: LD_VAR 0 4
10623: ARRAY
10624: PPUSH
10625: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
10629: LD_VAR 0 1
10633: PUSH
10634: LD_VAR 0 4
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 5
10644: PUSH
10645: LD_INT 1
10647: ARRAY
10648: PUSH
10649: LD_VAR 0 4
10653: ARRAY
10654: PPUSH
10655: LD_VAR 0 5
10659: PUSH
10660: LD_INT 2
10662: ARRAY
10663: PUSH
10664: LD_VAR 0 4
10668: ARRAY
10669: PPUSH
10670: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 4
10683: ARRAY
10684: PPUSH
10685: LD_EXP 8
10689: PPUSH
10690: CALL_OW 179
// end ;
10694: GO 10594
10696: POP
10697: POP
// end ; end_of_file
10698: LD_VAR 0 3
10702: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
// if exist_mode then
10707: LD_VAR 0 2
10711: IFFALSE 10736
// unit := CreateCharacter ( prefix & ident ) else
10713: LD_ADDR_VAR 0 5
10717: PUSH
10718: LD_VAR 0 3
10722: PUSH
10723: LD_VAR 0 1
10727: STR
10728: PPUSH
10729: CALL_OW 34
10733: ST_TO_ADDR
10734: GO 10751
// unit := NewCharacter ( ident ) ;
10736: LD_ADDR_VAR 0 5
10740: PUSH
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 25
10750: ST_TO_ADDR
// result := unit ;
10751: LD_ADDR_VAR 0 4
10755: PUSH
10756: LD_VAR 0 5
10760: ST_TO_ADDR
// end ;
10761: LD_VAR 0 4
10765: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10766: LD_INT 0
10768: PPUSH
10769: PPUSH
// if not side or not nation then
10770: LD_VAR 0 1
10774: NOT
10775: PUSH
10776: LD_VAR 0 2
10780: NOT
10781: OR
10782: IFFALSE 10786
// exit ;
10784: GO 11422
// case nation of nation_american :
10786: LD_VAR 0 2
10790: PUSH
10791: LD_INT 1
10793: DOUBLE
10794: EQUAL
10795: IFTRUE 10799
10797: GO 10969
10799: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
10800: LD_ADDR_VAR 0 4
10804: PUSH
10805: LD_INT 35
10807: PUSH
10808: LD_INT 45
10810: PUSH
10811: LD_INT 46
10813: PUSH
10814: LD_INT 47
10816: PUSH
10817: LD_INT 1
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: LD_INT 6
10825: PUSH
10826: LD_INT 15
10828: PUSH
10829: LD_INT 16
10831: PUSH
10832: LD_INT 7
10834: PUSH
10835: LD_INT 12
10837: PUSH
10838: LD_INT 13
10840: PUSH
10841: LD_INT 10
10843: PUSH
10844: LD_INT 14
10846: PUSH
10847: LD_INT 20
10849: PUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 25
10858: PUSH
10859: LD_INT 32
10861: PUSH
10862: LD_INT 27
10864: PUSH
10865: LD_INT 36
10867: PUSH
10868: LD_INT 69
10870: PUSH
10871: LD_INT 39
10873: PUSH
10874: LD_INT 34
10876: PUSH
10877: LD_INT 40
10879: PUSH
10880: LD_INT 48
10882: PUSH
10883: LD_INT 49
10885: PUSH
10886: LD_INT 50
10888: PUSH
10889: LD_INT 51
10891: PUSH
10892: LD_INT 52
10894: PUSH
10895: LD_INT 53
10897: PUSH
10898: LD_INT 54
10900: PUSH
10901: LD_INT 55
10903: PUSH
10904: LD_INT 56
10906: PUSH
10907: LD_INT 57
10909: PUSH
10910: LD_INT 58
10912: PUSH
10913: LD_INT 59
10915: PUSH
10916: LD_INT 60
10918: PUSH
10919: LD_INT 61
10921: PUSH
10922: LD_INT 62
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: ST_TO_ADDR
10967: GO 11346
10969: LD_INT 2
10971: DOUBLE
10972: EQUAL
10973: IFTRUE 10977
10975: GO 11155
10977: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: LD_INT 35
10985: PUSH
10986: LD_INT 45
10988: PUSH
10989: LD_INT 46
10991: PUSH
10992: LD_INT 47
10994: PUSH
10995: LD_INT 70
10997: PUSH
10998: LD_INT 1
11000: PUSH
11001: LD_INT 11
11003: PUSH
11004: LD_INT 3
11006: PUSH
11007: LD_INT 4
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: LD_INT 6
11015: PUSH
11016: LD_INT 15
11018: PUSH
11019: LD_INT 18
11021: PUSH
11022: LD_INT 7
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 8
11030: PUSH
11031: LD_INT 20
11033: PUSH
11034: LD_INT 21
11036: PUSH
11037: LD_INT 22
11039: PUSH
11040: LD_INT 72
11042: PUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 69
11048: PUSH
11049: LD_INT 39
11051: PUSH
11052: LD_INT 40
11054: PUSH
11055: LD_INT 41
11057: PUSH
11058: LD_INT 42
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: LD_INT 48
11066: PUSH
11067: LD_INT 49
11069: PUSH
11070: LD_INT 50
11072: PUSH
11073: LD_INT 51
11075: PUSH
11076: LD_INT 52
11078: PUSH
11079: LD_INT 53
11081: PUSH
11082: LD_INT 54
11084: PUSH
11085: LD_INT 55
11087: PUSH
11088: LD_INT 56
11090: PUSH
11091: LD_INT 60
11093: PUSH
11094: LD_INT 61
11096: PUSH
11097: LD_INT 62
11099: PUSH
11100: LD_INT 66
11102: PUSH
11103: LD_INT 67
11105: PUSH
11106: LD_INT 68
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: ST_TO_ADDR
11153: GO 11346
11155: LD_INT 3
11157: DOUBLE
11158: EQUAL
11159: IFTRUE 11163
11161: GO 11345
11163: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11164: LD_ADDR_VAR 0 4
11168: PUSH
11169: LD_INT 46
11171: PUSH
11172: LD_INT 47
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: LD_INT 11
11183: PUSH
11184: LD_INT 9
11186: PUSH
11187: LD_INT 20
11189: PUSH
11190: LD_INT 19
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 24
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 25
11204: PUSH
11205: LD_INT 28
11207: PUSH
11208: LD_INT 29
11210: PUSH
11211: LD_INT 30
11213: PUSH
11214: LD_INT 31
11216: PUSH
11217: LD_INT 37
11219: PUSH
11220: LD_INT 38
11222: PUSH
11223: LD_INT 32
11225: PUSH
11226: LD_INT 27
11228: PUSH
11229: LD_INT 33
11231: PUSH
11232: LD_INT 69
11234: PUSH
11235: LD_INT 39
11237: PUSH
11238: LD_INT 34
11240: PUSH
11241: LD_INT 40
11243: PUSH
11244: LD_INT 71
11246: PUSH
11247: LD_INT 23
11249: PUSH
11250: LD_INT 44
11252: PUSH
11253: LD_INT 48
11255: PUSH
11256: LD_INT 49
11258: PUSH
11259: LD_INT 50
11261: PUSH
11262: LD_INT 51
11264: PUSH
11265: LD_INT 52
11267: PUSH
11268: LD_INT 53
11270: PUSH
11271: LD_INT 54
11273: PUSH
11274: LD_INT 55
11276: PUSH
11277: LD_INT 56
11279: PUSH
11280: LD_INT 57
11282: PUSH
11283: LD_INT 58
11285: PUSH
11286: LD_INT 59
11288: PUSH
11289: LD_INT 63
11291: PUSH
11292: LD_INT 64
11294: PUSH
11295: LD_INT 65
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: ST_TO_ADDR
11343: GO 11346
11345: POP
// if state > - 1 and state < 3 then
11346: LD_VAR 0 3
11350: PUSH
11351: LD_INT 1
11353: NEG
11354: GREATER
11355: PUSH
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 3
11363: LESS
11364: AND
11365: IFFALSE 11422
// for i in result do
11367: LD_ADDR_VAR 0 5
11371: PUSH
11372: LD_VAR 0 4
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11420
// if GetTech ( i , side ) <> state then
11380: LD_VAR 0 5
11384: PPUSH
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL_OW 321
11394: PUSH
11395: LD_VAR 0 3
11399: NONEQUAL
11400: IFFALSE 11418
// result := result diff i ;
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_VAR 0 4
11411: PUSH
11412: LD_VAR 0 5
11416: DIFF
11417: ST_TO_ADDR
11418: GO 11377
11420: POP
11421: POP
// end ;
11422: LD_VAR 0 4
11426: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// result := true ;
11432: LD_ADDR_VAR 0 3
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11440: LD_ADDR_VAR 0 5
11444: PUSH
11445: LD_VAR 0 2
11449: PPUSH
11450: CALL_OW 480
11454: ST_TO_ADDR
// if not tmp then
11455: LD_VAR 0 5
11459: NOT
11460: IFFALSE 11464
// exit ;
11462: GO 11513
// for i in tmp do
11464: LD_ADDR_VAR 0 4
11468: PUSH
11469: LD_VAR 0 5
11473: PUSH
11474: FOR_IN
11475: IFFALSE 11511
// if GetTech ( i , side ) <> state_researched then
11477: LD_VAR 0 4
11481: PPUSH
11482: LD_VAR 0 1
11486: PPUSH
11487: CALL_OW 321
11491: PUSH
11492: LD_INT 2
11494: NONEQUAL
11495: IFFALSE 11509
// begin result := false ;
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// exit ;
11505: POP
11506: POP
11507: GO 11513
// end ;
11509: GO 11474
11511: POP
11512: POP
// end ;
11513: LD_VAR 0 3
11517: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
11532: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11533: LD_VAR 0 1
11537: NOT
11538: PUSH
11539: LD_VAR 0 1
11543: PPUSH
11544: CALL_OW 257
11548: PUSH
11549: LD_INT 9
11551: NONEQUAL
11552: OR
11553: IFFALSE 11557
// exit ;
11555: GO 12130
// side := GetSide ( unit ) ;
11557: LD_ADDR_VAR 0 9
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 255
11571: ST_TO_ADDR
// tech_space := tech_spacanom ;
11572: LD_ADDR_VAR 0 12
11576: PUSH
11577: LD_INT 29
11579: ST_TO_ADDR
// tech_time := tech_taurad ;
11580: LD_ADDR_VAR 0 13
11584: PUSH
11585: LD_INT 28
11587: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11588: LD_ADDR_VAR 0 11
11592: PUSH
11593: LD_VAR 0 1
11597: PPUSH
11598: CALL_OW 310
11602: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11603: LD_VAR 0 11
11607: PPUSH
11608: CALL_OW 247
11612: PUSH
11613: LD_INT 2
11615: EQUAL
11616: IFFALSE 11620
// exit ;
11618: GO 12130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11620: LD_ADDR_VAR 0 8
11624: PUSH
11625: LD_INT 81
11627: PUSH
11628: LD_VAR 0 9
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 3
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 3
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: ST_TO_ADDR
// if not tmp then
11663: LD_VAR 0 8
11667: NOT
11668: IFFALSE 11672
// exit ;
11670: GO 12130
// if in_unit then
11672: LD_VAR 0 11
11676: IFFALSE 11700
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11678: LD_ADDR_VAR 0 10
11682: PUSH
11683: LD_VAR 0 8
11687: PPUSH
11688: LD_VAR 0 11
11692: PPUSH
11693: CALL_OW 74
11697: ST_TO_ADDR
11698: GO 11720
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11700: LD_ADDR_VAR 0 10
11704: PUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: LD_VAR 0 1
11714: PPUSH
11715: CALL_OW 74
11719: ST_TO_ADDR
// if not enemy then
11720: LD_VAR 0 10
11724: NOT
11725: IFFALSE 11729
// exit ;
11727: GO 12130
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11729: LD_VAR 0 11
11733: PUSH
11734: LD_VAR 0 11
11738: PPUSH
11739: LD_VAR 0 10
11743: PPUSH
11744: CALL_OW 296
11748: PUSH
11749: LD_INT 13
11751: GREATER
11752: AND
11753: PUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: LD_VAR 0 10
11763: PPUSH
11764: CALL_OW 296
11768: PUSH
11769: LD_INT 12
11771: GREATER
11772: OR
11773: IFFALSE 11777
// exit ;
11775: GO 12130
// missile := [ 1 ] ;
11777: LD_ADDR_VAR 0 14
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11788: LD_VAR 0 9
11792: PPUSH
11793: LD_VAR 0 12
11797: PPUSH
11798: CALL_OW 325
11802: IFFALSE 11831
// missile := Insert ( missile , missile + 1 , 2 ) ;
11804: LD_ADDR_VAR 0 14
11808: PUSH
11809: LD_VAR 0 14
11813: PPUSH
11814: LD_VAR 0 14
11818: PUSH
11819: LD_INT 1
11821: PLUS
11822: PPUSH
11823: LD_INT 2
11825: PPUSH
11826: CALL_OW 2
11830: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11831: LD_VAR 0 9
11835: PPUSH
11836: LD_VAR 0 13
11840: PPUSH
11841: CALL_OW 325
11845: PUSH
11846: LD_VAR 0 10
11850: PPUSH
11851: CALL_OW 255
11855: PPUSH
11856: LD_VAR 0 13
11860: PPUSH
11861: CALL_OW 325
11865: NOT
11866: AND
11867: IFFALSE 11896
// missile := Insert ( missile , missile + 1 , 3 ) ;
11869: LD_ADDR_VAR 0 14
11873: PUSH
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 14
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: PPUSH
11888: LD_INT 3
11890: PPUSH
11891: CALL_OW 2
11895: ST_TO_ADDR
// if missile < 2 then
11896: LD_VAR 0 14
11900: PUSH
11901: LD_INT 2
11903: LESS
11904: IFFALSE 11908
// exit ;
11906: GO 12130
// x := GetX ( enemy ) ;
11908: LD_ADDR_VAR 0 4
11912: PUSH
11913: LD_VAR 0 10
11917: PPUSH
11918: CALL_OW 250
11922: ST_TO_ADDR
// y := GetY ( enemy ) ;
11923: LD_ADDR_VAR 0 5
11927: PUSH
11928: LD_VAR 0 10
11932: PPUSH
11933: CALL_OW 251
11937: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11938: LD_ADDR_VAR 0 6
11942: PUSH
11943: LD_VAR 0 4
11947: PUSH
11948: LD_INT 1
11950: NEG
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 12
11959: PLUS
11960: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11961: LD_ADDR_VAR 0 7
11965: PUSH
11966: LD_VAR 0 5
11970: PUSH
11971: LD_INT 1
11973: NEG
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 12
11982: PLUS
11983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11984: LD_VAR 0 6
11988: PPUSH
11989: LD_VAR 0 7
11993: PPUSH
11994: CALL_OW 488
11998: NOT
11999: IFFALSE 12021
// begin _x := x ;
12001: LD_ADDR_VAR 0 6
12005: PUSH
12006: LD_VAR 0 4
12010: ST_TO_ADDR
// _y := y ;
12011: LD_ADDR_VAR 0 7
12015: PUSH
12016: LD_VAR 0 5
12020: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12021: LD_ADDR_VAR 0 3
12025: PUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_VAR 0 14
12033: PPUSH
12034: CALL_OW 12
12038: ST_TO_ADDR
// case i of 1 :
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: DOUBLE
12047: EQUAL
12048: IFTRUE 12052
12050: GO 12069
12052: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12053: LD_VAR 0 1
12057: PPUSH
12058: LD_VAR 0 10
12062: PPUSH
12063: CALL_OW 115
12067: GO 12130
12069: LD_INT 2
12071: DOUBLE
12072: EQUAL
12073: IFTRUE 12077
12075: GO 12099
12077: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_VAR 0 6
12087: PPUSH
12088: LD_VAR 0 7
12092: PPUSH
12093: CALL_OW 153
12097: GO 12130
12099: LD_INT 3
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12129
12107: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12108: LD_VAR 0 1
12112: PPUSH
12113: LD_VAR 0 6
12117: PPUSH
12118: LD_VAR 0 7
12122: PPUSH
12123: CALL_OW 154
12127: GO 12130
12129: POP
// end ;
12130: LD_VAR 0 2
12134: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12135: LD_INT 0
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
12142: PPUSH
// if not unit or not building then
12143: LD_VAR 0 1
12147: NOT
12148: PUSH
12149: LD_VAR 0 2
12153: NOT
12154: OR
12155: IFFALSE 12159
// exit ;
12157: GO 12317
// x := GetX ( building ) ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: LD_VAR 0 2
12168: PPUSH
12169: CALL_OW 250
12173: ST_TO_ADDR
// y := GetY ( building ) ;
12174: LD_ADDR_VAR 0 6
12178: PUSH
12179: LD_VAR 0 2
12183: PPUSH
12184: CALL_OW 251
12188: ST_TO_ADDR
// for i = 0 to 5 do
12189: LD_ADDR_VAR 0 4
12193: PUSH
12194: DOUBLE
12195: LD_INT 0
12197: DEC
12198: ST_TO_ADDR
12199: LD_INT 5
12201: PUSH
12202: FOR_TO
12203: IFFALSE 12315
// begin _x := ShiftX ( x , i , 3 ) ;
12205: LD_ADDR_VAR 0 7
12209: PUSH
12210: LD_VAR 0 5
12214: PPUSH
12215: LD_VAR 0 4
12219: PPUSH
12220: LD_INT 3
12222: PPUSH
12223: CALL_OW 272
12227: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12228: LD_ADDR_VAR 0 8
12232: PUSH
12233: LD_VAR 0 6
12237: PPUSH
12238: LD_VAR 0 4
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: CALL_OW 273
12250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12251: LD_VAR 0 7
12255: PPUSH
12256: LD_VAR 0 8
12260: PPUSH
12261: CALL_OW 488
12265: NOT
12266: IFFALSE 12270
// continue ;
12268: GO 12202
// if HexInfo ( _x , _y ) = 0 then
12270: LD_VAR 0 7
12274: PPUSH
12275: LD_VAR 0 8
12279: PPUSH
12280: CALL_OW 428
12284: PUSH
12285: LD_INT 0
12287: EQUAL
12288: IFFALSE 12313
// begin ComMoveXY ( unit , _x , _y ) ;
12290: LD_VAR 0 1
12294: PPUSH
12295: LD_VAR 0 7
12299: PPUSH
12300: LD_VAR 0 8
12304: PPUSH
12305: CALL_OW 111
// exit ;
12309: POP
12310: POP
12311: GO 12317
// end ; end ;
12313: GO 12202
12315: POP
12316: POP
// end ;
12317: LD_VAR 0 3
12321: RET
// export function ScanBase ( side , base_area ) ; begin
12322: LD_INT 0
12324: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12325: LD_ADDR_VAR 0 3
12329: PUSH
12330: LD_VAR 0 2
12334: PPUSH
12335: LD_INT 81
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 70
12351: ST_TO_ADDR
// end ;
12352: LD_VAR 0 3
12356: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12357: LD_INT 0
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12364: LD_VAR 0 1
12368: NOT
12369: PUSH
12370: LD_EXP 52
12374: PUSH
12375: LD_VAR 0 1
12379: ARRAY
12380: NOT
12381: OR
12382: PUSH
12383: LD_VAR 0 2
12387: NOT
12388: OR
12389: PUSH
12390: LD_VAR 0 3
12394: NOT
12395: OR
12396: IFFALSE 12400
// exit ;
12398: GO 12850
// side := mc_sides [ base ] ;
12400: LD_ADDR_VAR 0 6
12404: PUSH
12405: LD_EXP 78
12409: PUSH
12410: LD_VAR 0 1
12414: ARRAY
12415: ST_TO_ADDR
// if not side then
12416: LD_VAR 0 6
12420: NOT
12421: IFFALSE 12425
// exit ;
12423: GO 12850
// for i in solds do
12425: LD_ADDR_VAR 0 7
12429: PUSH
12430: LD_VAR 0 2
12434: PUSH
12435: FOR_IN
12436: IFFALSE 12497
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12438: LD_VAR 0 7
12442: PPUSH
12443: CALL_OW 310
12447: PPUSH
12448: CALL_OW 266
12452: PUSH
12453: LD_INT 32
12455: PUSH
12456: LD_INT 31
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: IN
12463: IFFALSE 12483
// solds := solds diff i else
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_VAR 0 2
12474: PUSH
12475: LD_VAR 0 7
12479: DIFF
12480: ST_TO_ADDR
12481: GO 12495
// SetTag ( i , 18 ) ;
12483: LD_VAR 0 7
12487: PPUSH
12488: LD_INT 18
12490: PPUSH
12491: CALL_OW 109
12495: GO 12435
12497: POP
12498: POP
// if not solds then
12499: LD_VAR 0 2
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12850
// repeat wait ( 0 0$1 ) ;
12508: LD_INT 35
12510: PPUSH
12511: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12515: LD_ADDR_VAR 0 5
12519: PUSH
12520: LD_VAR 0 6
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: CALL 12322 0 2
12534: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
12535: LD_VAR 0 5
12539: NOT
12540: PUSH
12541: LD_VAR 0 5
12545: PUSH
12546: LD_INT 3
12548: GREATER
12549: OR
12550: PUSH
12551: LD_EXP 74
12555: PUSH
12556: LD_VAR 0 1
12560: ARRAY
12561: OR
12562: IFFALSE 12603
// begin for i in solds do
12564: LD_ADDR_VAR 0 7
12568: PUSH
12569: LD_VAR 0 2
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12599
// if HasTask ( i ) then
12577: LD_VAR 0 7
12581: PPUSH
12582: CALL_OW 314
12586: IFFALSE 12597
// ComStop ( i ) ;
12588: LD_VAR 0 7
12592: PPUSH
12593: CALL_OW 141
12597: GO 12574
12599: POP
12600: POP
// break ;
12601: GO 12838
// end ; for i in solds do
12603: LD_ADDR_VAR 0 7
12607: PUSH
12608: LD_VAR 0 2
12612: PUSH
12613: FOR_IN
12614: IFFALSE 12830
// begin if IsInUnit ( i ) then
12616: LD_VAR 0 7
12620: PPUSH
12621: CALL_OW 310
12625: IFFALSE 12636
// ComExitBuilding ( i ) ;
12627: LD_VAR 0 7
12631: PPUSH
12632: CALL_OW 122
// if GetLives ( i ) > 333 then
12636: LD_VAR 0 7
12640: PPUSH
12641: CALL_OW 256
12645: PUSH
12646: LD_INT 333
12648: GREATER
12649: IFFALSE 12677
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12651: LD_VAR 0 7
12655: PPUSH
12656: LD_VAR 0 5
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 74
12670: PPUSH
12671: CALL_OW 115
12675: GO 12828
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
12677: LD_ADDR_VAR 0 8
12681: PUSH
12682: LD_EXP 52
12686: PUSH
12687: LD_VAR 0 1
12691: ARRAY
12692: PPUSH
12693: LD_INT 2
12695: PUSH
12696: LD_INT 30
12698: PUSH
12699: LD_INT 0
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 30
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 30
12718: PUSH
12719: LD_INT 6
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 72
12736: PPUSH
12737: LD_VAR 0 7
12741: PPUSH
12742: CALL_OW 74
12746: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
12747: LD_VAR 0 7
12751: PPUSH
12752: LD_VAR 0 8
12756: PPUSH
12757: CALL_OW 250
12761: PPUSH
12762: LD_INT 3
12764: PPUSH
12765: LD_INT 5
12767: PPUSH
12768: CALL_OW 272
12772: PPUSH
12773: LD_VAR 0 8
12777: PPUSH
12778: CALL_OW 251
12782: PPUSH
12783: LD_INT 3
12785: PPUSH
12786: LD_INT 5
12788: PPUSH
12789: CALL_OW 273
12793: PPUSH
12794: CALL_OW 111
// SetTag ( i , 0 ) ;
12798: LD_VAR 0 7
12802: PPUSH
12803: LD_INT 0
12805: PPUSH
12806: CALL_OW 109
// solds := solds diff i ;
12810: LD_ADDR_VAR 0 2
12814: PUSH
12815: LD_VAR 0 2
12819: PUSH
12820: LD_VAR 0 7
12824: DIFF
12825: ST_TO_ADDR
// continue ;
12826: GO 12613
// end ; end ;
12828: GO 12613
12830: POP
12831: POP
// until solds ;
12832: LD_VAR 0 2
12836: IFFALSE 12508
// MC_Reset ( base , 18 ) ;
12838: LD_VAR 0 1
12842: PPUSH
12843: LD_INT 18
12845: PPUSH
12846: CALL 57390 0 2
// end ;
12850: LD_VAR 0 4
12854: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
12855: LD_INT 0
12857: PPUSH
12858: PPUSH
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
12863: PPUSH
12864: PPUSH
12865: PPUSH
12866: PPUSH
12867: PPUSH
12868: PPUSH
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12873: LD_ADDR_VAR 0 12
12877: PUSH
12878: LD_EXP 52
12882: PUSH
12883: LD_VAR 0 1
12887: ARRAY
12888: PPUSH
12889: LD_INT 25
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12904: LD_ADDR_VAR 0 8
12908: PUSH
12909: LD_EXP 52
12913: PUSH
12914: LD_VAR 0 1
12918: ARRAY
12919: PPUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 8
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 25
12955: PUSH
12956: LD_INT 9
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 72
12974: ST_TO_ADDR
// if not defenders and not solds then
12975: LD_VAR 0 2
12979: NOT
12980: PUSH
12981: LD_VAR 0 8
12985: NOT
12986: AND
12987: IFFALSE 12991
// exit ;
12989: GO 14320
// depot_under_attack := false ;
12991: LD_ADDR_VAR 0 16
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sold_defenders := [ ] ;
12999: LD_ADDR_VAR 0 17
13003: PUSH
13004: EMPTY
13005: ST_TO_ADDR
// if mechs then
13006: LD_VAR 0 12
13010: IFFALSE 13139
// for i in defenders do
13012: LD_ADDR_VAR 0 5
13016: PUSH
13017: LD_VAR 0 2
13021: PUSH
13022: FOR_IN
13023: IFFALSE 13137
// begin SetTag ( i , 20 ) ;
13025: LD_VAR 0 5
13029: PPUSH
13030: LD_INT 20
13032: PPUSH
13033: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13037: LD_VAR 0 5
13041: PPUSH
13042: CALL_OW 263
13046: PUSH
13047: LD_INT 1
13049: EQUAL
13050: PUSH
13051: LD_VAR 0 5
13055: PPUSH
13056: CALL_OW 311
13060: NOT
13061: AND
13062: PUSH
13063: LD_VAR 0 12
13067: AND
13068: IFFALSE 13135
// begin un := mechs [ 1 ] ;
13070: LD_ADDR_VAR 0 10
13074: PUSH
13075: LD_VAR 0 12
13079: PUSH
13080: LD_INT 1
13082: ARRAY
13083: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13084: LD_VAR 0 10
13088: PPUSH
13089: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13093: LD_VAR 0 10
13097: PPUSH
13098: LD_VAR 0 5
13102: PPUSH
13103: CALL_OW 180
// SetTag ( un , 19 ) ;
13107: LD_VAR 0 10
13111: PPUSH
13112: LD_INT 19
13114: PPUSH
13115: CALL_OW 109
// mechs := mechs diff un ;
13119: LD_ADDR_VAR 0 12
13123: PUSH
13124: LD_VAR 0 12
13128: PUSH
13129: LD_VAR 0 10
13133: DIFF
13134: ST_TO_ADDR
// end ; end ;
13135: GO 13022
13137: POP
13138: POP
// if solds then
13139: LD_VAR 0 8
13143: IFFALSE 13202
// for i in solds do
13145: LD_ADDR_VAR 0 5
13149: PUSH
13150: LD_VAR 0 8
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13200
// if not GetTag ( i ) then
13158: LD_VAR 0 5
13162: PPUSH
13163: CALL_OW 110
13167: NOT
13168: IFFALSE 13198
// begin defenders := defenders union i ;
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 2
13179: PUSH
13180: LD_VAR 0 5
13184: UNION
13185: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13186: LD_VAR 0 5
13190: PPUSH
13191: LD_INT 18
13193: PPUSH
13194: CALL_OW 109
// end ;
13198: GO 13155
13200: POP
13201: POP
// repeat wait ( 0 0$1 ) ;
13202: LD_INT 35
13204: PPUSH
13205: CALL_OW 67
// enemy := mc_scan [ base ] ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_EXP 75
13218: PUSH
13219: LD_VAR 0 1
13223: ARRAY
13224: ST_TO_ADDR
// for i in defenders do
13225: LD_ADDR_VAR 0 5
13229: PUSH
13230: LD_VAR 0 2
13234: PUSH
13235: FOR_IN
13236: IFFALSE 13921
// begin e := NearestUnitToUnit ( enemy , i ) ;
13238: LD_ADDR_VAR 0 13
13242: PUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_VAR 0 5
13252: PPUSH
13253: CALL_OW 74
13257: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13258: LD_ADDR_VAR 0 16
13262: PUSH
13263: LD_EXP 52
13267: PUSH
13268: LD_VAR 0 1
13272: ARRAY
13273: PPUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 30
13279: PUSH
13280: LD_INT 0
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 72
13306: NOT
13307: PUSH
13308: LD_EXP 52
13312: PUSH
13313: LD_VAR 0 1
13317: ARRAY
13318: PPUSH
13319: LD_INT 2
13321: PUSH
13322: LD_INT 30
13324: PUSH
13325: LD_INT 0
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 30
13334: PUSH
13335: LD_INT 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 72
13351: PPUSH
13352: CALL_OW 256
13356: PUSH
13357: LD_INT 600
13359: LESS
13360: OR
13361: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13362: LD_VAR 0 5
13366: PPUSH
13367: CALL_OW 247
13371: PUSH
13372: LD_INT 2
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13627
13380: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
13381: LD_VAR 0 5
13385: PPUSH
13386: CALL_OW 256
13390: PUSH
13391: LD_INT 650
13393: GREATER
13394: PUSH
13395: LD_VAR 0 5
13399: PPUSH
13400: LD_VAR 0 13
13404: PPUSH
13405: CALL_OW 296
13409: PUSH
13410: LD_INT 40
13412: LESS
13413: AND
13414: IFFALSE 13432
// ComAttackUnit ( i , e ) else
13416: LD_VAR 0 5
13420: PPUSH
13421: LD_VAR 0 13
13425: PPUSH
13426: CALL_OW 115
13430: GO 13510
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
13432: LD_VAR 0 5
13436: PPUSH
13437: LD_VAR 0 13
13441: PPUSH
13442: CALL_OW 296
13446: PUSH
13447: LD_INT 30
13449: GREATEREQUAL
13450: PUSH
13451: LD_VAR 0 5
13455: PPUSH
13456: CALL_OW 256
13460: PUSH
13461: LD_INT 650
13463: LESSEQUAL
13464: OR
13465: PUSH
13466: LD_VAR 0 5
13470: PPUSH
13471: LD_EXP 76
13475: PUSH
13476: LD_VAR 0 1
13480: ARRAY
13481: PPUSH
13482: CALL_OW 308
13486: NOT
13487: AND
13488: IFFALSE 13510
// ComMoveToArea ( i , mc_parking [ base ] ) ;
13490: LD_VAR 0 5
13494: PPUSH
13495: LD_EXP 76
13499: PUSH
13500: LD_VAR 0 1
13504: ARRAY
13505: PPUSH
13506: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13510: LD_VAR 0 5
13514: PPUSH
13515: CALL_OW 256
13519: PUSH
13520: LD_INT 998
13522: LESS
13523: PUSH
13524: LD_VAR 0 5
13528: PPUSH
13529: CALL_OW 263
13533: PUSH
13534: LD_INT 1
13536: EQUAL
13537: AND
13538: PUSH
13539: LD_VAR 0 5
13543: PPUSH
13544: CALL_OW 311
13548: AND
13549: PUSH
13550: LD_VAR 0 5
13554: PPUSH
13555: LD_EXP 76
13559: PUSH
13560: LD_VAR 0 1
13564: ARRAY
13565: PPUSH
13566: CALL_OW 308
13570: AND
13571: IFFALSE 13625
// begin mech := IsDrivenBy ( i ) ;
13573: LD_ADDR_VAR 0 9
13577: PUSH
13578: LD_VAR 0 5
13582: PPUSH
13583: CALL_OW 311
13587: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13588: LD_VAR 0 9
13592: PPUSH
13593: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13597: LD_VAR 0 9
13601: PPUSH
13602: LD_VAR 0 5
13606: PPUSH
13607: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
13611: LD_VAR 0 9
13615: PPUSH
13616: LD_VAR 0 5
13620: PPUSH
13621: CALL_OW 180
// end ; end ; unit_human :
13625: GO 13892
13627: LD_INT 1
13629: DOUBLE
13630: EQUAL
13631: IFTRUE 13635
13633: GO 13891
13635: POP
// begin b := IsInUnit ( i ) ;
13636: LD_ADDR_VAR 0 18
13640: PUSH
13641: LD_VAR 0 5
13645: PPUSH
13646: CALL_OW 310
13650: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13651: LD_ADDR_VAR 0 19
13655: PUSH
13656: LD_VAR 0 18
13660: NOT
13661: PUSH
13662: LD_VAR 0 18
13666: PPUSH
13667: CALL_OW 266
13671: PUSH
13672: LD_INT 32
13674: PUSH
13675: LD_INT 31
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: IN
13682: OR
13683: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13684: LD_VAR 0 16
13688: PUSH
13689: LD_VAR 0 2
13693: PPUSH
13694: LD_INT 21
13696: PUSH
13697: LD_INT 2
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 72
13708: PUSH
13709: LD_INT 1
13711: LESSEQUAL
13712: OR
13713: PUSH
13714: LD_VAR 0 19
13718: AND
13719: PUSH
13720: LD_VAR 0 5
13724: PUSH
13725: LD_VAR 0 17
13729: IN
13730: NOT
13731: AND
13732: IFFALSE 13825
// begin if b then
13734: LD_VAR 0 18
13738: IFFALSE 13787
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
13740: LD_VAR 0 18
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_VAR 0 18
13754: PPUSH
13755: CALL_OW 74
13759: PPUSH
13760: CALL_OW 296
13764: PUSH
13765: LD_INT 10
13767: LESS
13768: PUSH
13769: LD_VAR 0 18
13773: PPUSH
13774: CALL_OW 461
13778: PUSH
13779: LD_INT 7
13781: NONEQUAL
13782: AND
13783: IFFALSE 13787
// continue ;
13785: GO 13235
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13787: LD_ADDR_VAR 0 17
13791: PUSH
13792: LD_VAR 0 17
13796: PPUSH
13797: LD_VAR 0 17
13801: PUSH
13802: LD_INT 1
13804: PLUS
13805: PPUSH
13806: LD_VAR 0 5
13810: PPUSH
13811: CALL_OW 1
13815: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13816: LD_VAR 0 5
13820: PPUSH
13821: CALL_OW 122
// end ; if sold_defenders then
13825: LD_VAR 0 17
13829: IFFALSE 13889
// if i in sold_defenders then
13831: LD_VAR 0 5
13835: PUSH
13836: LD_VAR 0 17
13840: IN
13841: IFFALSE 13889
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13843: LD_VAR 0 5
13847: PPUSH
13848: CALL_OW 314
13852: NOT
13853: PUSH
13854: LD_VAR 0 5
13858: PPUSH
13859: LD_VAR 0 13
13863: PPUSH
13864: CALL_OW 296
13868: PUSH
13869: LD_INT 30
13871: LESS
13872: AND
13873: IFFALSE 13889
// ComAttackUnit ( i , e ) ;
13875: LD_VAR 0 5
13879: PPUSH
13880: LD_VAR 0 13
13884: PPUSH
13885: CALL_OW 115
// end ; end ; end ;
13889: GO 13892
13891: POP
// if IsDead ( i ) then
13892: LD_VAR 0 5
13896: PPUSH
13897: CALL_OW 301
13901: IFFALSE 13919
// defenders := defenders diff i ;
13903: LD_ADDR_VAR 0 2
13907: PUSH
13908: LD_VAR 0 2
13912: PUSH
13913: LD_VAR 0 5
13917: DIFF
13918: ST_TO_ADDR
// end ;
13919: GO 13235
13921: POP
13922: POP
// until not enemy or not defenders ;
13923: LD_VAR 0 3
13927: NOT
13928: PUSH
13929: LD_VAR 0 2
13933: NOT
13934: OR
13935: IFFALSE 13202
// MC_Reset ( base , 18 ) ;
13937: LD_VAR 0 1
13941: PPUSH
13942: LD_INT 18
13944: PPUSH
13945: CALL 57390 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_VAR 0 2
13958: PUSH
13959: LD_VAR 0 2
13963: PPUSH
13964: LD_INT 2
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 1
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 25
13979: PUSH
13980: LD_INT 5
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 25
13989: PUSH
13990: LD_INT 8
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 25
13999: PUSH
14000: LD_INT 9
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 72
14018: DIFF
14019: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14020: LD_VAR 0 3
14024: NOT
14025: PUSH
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_INT 21
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 72
14045: AND
14046: IFFALSE 14308
// begin tmp := FilterByTag ( defenders , 19 ) ;
14048: LD_ADDR_VAR 0 11
14052: PUSH
14053: LD_VAR 0 2
14057: PPUSH
14058: LD_INT 19
14060: PPUSH
14061: CALL 50688 0 2
14065: ST_TO_ADDR
// if tmp then
14066: LD_VAR 0 11
14070: IFFALSE 14140
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14072: LD_ADDR_VAR 0 11
14076: PUSH
14077: LD_VAR 0 11
14081: PPUSH
14082: LD_INT 25
14084: PUSH
14085: LD_INT 3
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PPUSH
14092: CALL_OW 72
14096: ST_TO_ADDR
// if tmp then
14097: LD_VAR 0 11
14101: IFFALSE 14140
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14103: LD_ADDR_EXP 64
14107: PUSH
14108: LD_EXP 64
14112: PPUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_EXP 64
14122: PUSH
14123: LD_VAR 0 1
14127: ARRAY
14128: PUSH
14129: LD_VAR 0 11
14133: UNION
14134: PPUSH
14135: CALL_OW 1
14139: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_INT 19
14147: PPUSH
14148: CALL 57390 0 2
// repeat wait ( 0 0$1 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// for i in defenders do
14159: LD_ADDR_VAR 0 5
14163: PUSH
14164: LD_VAR 0 2
14168: PUSH
14169: FOR_IN
14170: IFFALSE 14259
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14172: LD_VAR 0 5
14176: PPUSH
14177: LD_EXP 76
14181: PUSH
14182: LD_VAR 0 1
14186: ARRAY
14187: PPUSH
14188: CALL_OW 308
14192: NOT
14193: IFFALSE 14217
// ComMoveToArea ( i , mc_parking [ base ] ) else
14195: LD_VAR 0 5
14199: PPUSH
14200: LD_EXP 76
14204: PUSH
14205: LD_VAR 0 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 113
14215: GO 14257
// if GetControl ( i ) = control_manual then
14217: LD_VAR 0 5
14221: PPUSH
14222: CALL_OW 263
14226: PUSH
14227: LD_INT 1
14229: EQUAL
14230: IFFALSE 14257
// if IsDrivenBy ( i ) then
14232: LD_VAR 0 5
14236: PPUSH
14237: CALL_OW 311
14241: IFFALSE 14257
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14243: LD_VAR 0 5
14247: PPUSH
14248: CALL_OW 311
14252: PPUSH
14253: CALL_OW 121
// end ;
14257: GO 14169
14259: POP
14260: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_INT 95
14268: PUSH
14269: LD_EXP 76
14273: PUSH
14274: LD_VAR 0 1
14278: ARRAY
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 72
14288: PUSH
14289: LD_VAR 0 2
14293: EQUAL
14294: PUSH
14295: LD_EXP 75
14299: PUSH
14300: LD_VAR 0 1
14304: ARRAY
14305: OR
14306: IFFALSE 14152
// end ; MC_Reset ( base , 20 ) ;
14308: LD_VAR 0 1
14312: PPUSH
14313: LD_INT 20
14315: PPUSH
14316: CALL 57390 0 2
// end ;
14320: LD_VAR 0 4
14324: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14325: LD_INT 0
14327: PPUSH
14328: PPUSH
14329: PPUSH
14330: PPUSH
// result := false ;
14331: LD_ADDR_VAR 0 2
14335: PUSH
14336: LD_INT 0
14338: ST_TO_ADDR
// side := GetSide ( unit ) ;
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 255
14353: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14354: LD_ADDR_VAR 0 4
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 248
14368: ST_TO_ADDR
// case nat of 1 :
14369: LD_VAR 0 4
14373: PUSH
14374: LD_INT 1
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14393
14382: POP
// tech := tech_lassight ; 2 :
14383: LD_ADDR_VAR 0 5
14387: PUSH
14388: LD_INT 12
14390: ST_TO_ADDR
14391: GO 14432
14393: LD_INT 2
14395: DOUBLE
14396: EQUAL
14397: IFTRUE 14401
14399: GO 14412
14401: POP
// tech := tech_mortar ; 3 :
14402: LD_ADDR_VAR 0 5
14406: PUSH
14407: LD_INT 41
14409: ST_TO_ADDR
14410: GO 14432
14412: LD_INT 3
14414: DOUBLE
14415: EQUAL
14416: IFTRUE 14420
14418: GO 14431
14420: POP
// tech := tech_bazooka ; end ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: LD_INT 44
14428: ST_TO_ADDR
14429: GO 14432
14431: POP
// if Researched ( side , tech ) then
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_VAR 0 5
14441: PPUSH
14442: CALL_OW 325
14446: IFFALSE 14473
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14448: LD_ADDR_VAR 0 2
14452: PUSH
14453: LD_INT 5
14455: PUSH
14456: LD_INT 8
14458: PUSH
14459: LD_INT 9
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: PUSH
14467: LD_VAR 0 4
14471: ARRAY
14472: ST_TO_ADDR
// end ;
14473: LD_VAR 0 2
14477: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14478: LD_INT 0
14480: PPUSH
14481: PPUSH
14482: PPUSH
// if not mines then
14483: LD_VAR 0 2
14487: NOT
14488: IFFALSE 14492
// exit ;
14490: GO 14636
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14492: LD_ADDR_VAR 0 5
14496: PUSH
14497: LD_INT 81
14499: PUSH
14500: LD_VAR 0 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: LD_INT 21
14514: PUSH
14515: LD_INT 3
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 69
14534: ST_TO_ADDR
// for i in mines do
14535: LD_ADDR_VAR 0 4
14539: PUSH
14540: LD_VAR 0 2
14544: PUSH
14545: FOR_IN
14546: IFFALSE 14634
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14548: LD_VAR 0 4
14552: PUSH
14553: LD_INT 1
14555: ARRAY
14556: PPUSH
14557: LD_VAR 0 4
14561: PUSH
14562: LD_INT 2
14564: ARRAY
14565: PPUSH
14566: CALL_OW 458
14570: NOT
14571: IFFALSE 14575
// continue ;
14573: GO 14545
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14575: LD_VAR 0 4
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 4
14588: PUSH
14589: LD_INT 2
14591: ARRAY
14592: PPUSH
14593: CALL_OW 428
14597: PUSH
14598: LD_VAR 0 5
14602: IN
14603: IFFALSE 14632
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14605: LD_VAR 0 4
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PPUSH
14614: LD_VAR 0 4
14618: PUSH
14619: LD_INT 2
14621: ARRAY
14622: PPUSH
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL_OW 456
// end ;
14632: GO 14545
14634: POP
14635: POP
// end ;
14636: LD_VAR 0 3
14640: RET
// export function Count ( array ) ; var i ; begin
14641: LD_INT 0
14643: PPUSH
14644: PPUSH
// result := 0 ;
14645: LD_ADDR_VAR 0 2
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// for i in array do
14653: LD_ADDR_VAR 0 3
14657: PUSH
14658: LD_VAR 0 1
14662: PUSH
14663: FOR_IN
14664: IFFALSE 14688
// if i then
14666: LD_VAR 0 3
14670: IFFALSE 14686
// result := result + 1 ;
14672: LD_ADDR_VAR 0 2
14676: PUSH
14677: LD_VAR 0 2
14681: PUSH
14682: LD_INT 1
14684: PLUS
14685: ST_TO_ADDR
14686: GO 14663
14688: POP
14689: POP
// end ;
14690: LD_VAR 0 2
14694: RET
// export function IsEmpty ( building ) ; begin
14695: LD_INT 0
14697: PPUSH
// if not building then
14698: LD_VAR 0 1
14702: NOT
14703: IFFALSE 14707
// exit ;
14705: GO 14750
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14707: LD_ADDR_VAR 0 2
14711: PUSH
14712: LD_VAR 0 1
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 255
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 58
14736: PUSH
14737: EMPTY
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 69
14748: IN
14749: ST_TO_ADDR
// end ;
14750: LD_VAR 0 2
14754: RET
// export function IsNotFull ( building ) ; begin
14755: LD_INT 0
14757: PPUSH
// if not building then
14758: LD_VAR 0 1
14762: NOT
14763: IFFALSE 14767
// exit ;
14765: GO 14786
// result := UnitsInside ( building ) < 6 ;
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 313
14781: PUSH
14782: LD_INT 6
14784: LESS
14785: ST_TO_ADDR
// end ;
14786: LD_VAR 0 2
14790: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
// tmp := [ ] ;
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: EMPTY
14803: ST_TO_ADDR
// list := [ ] ;
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: EMPTY
14810: ST_TO_ADDR
// for i = 16 to 25 do
14811: LD_ADDR_VAR 0 4
14815: PUSH
14816: DOUBLE
14817: LD_INT 16
14819: DEC
14820: ST_TO_ADDR
14821: LD_INT 25
14823: PUSH
14824: FOR_TO
14825: IFFALSE 14898
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14827: LD_ADDR_VAR 0 3
14831: PUSH
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 255
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 91
14856: PUSH
14857: LD_VAR 0 1
14861: PUSH
14862: LD_INT 6
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 30
14872: PUSH
14873: LD_VAR 0 4
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ADD
14895: ST_TO_ADDR
14896: GO 14824
14898: POP
14899: POP
// for i = 1 to tmp do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 3
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15004
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14918: LD_ADDR_VAR 0 5
14922: PUSH
14923: LD_VAR 0 5
14927: PUSH
14928: LD_VAR 0 3
14932: PUSH
14933: LD_VAR 0 4
14937: ARRAY
14938: PPUSH
14939: CALL_OW 266
14943: PUSH
14944: LD_VAR 0 3
14948: PUSH
14949: LD_VAR 0 4
14953: ARRAY
14954: PPUSH
14955: CALL_OW 250
14959: PUSH
14960: LD_VAR 0 3
14964: PUSH
14965: LD_VAR 0 4
14969: ARRAY
14970: PPUSH
14971: CALL_OW 251
14975: PUSH
14976: LD_VAR 0 3
14980: PUSH
14981: LD_VAR 0 4
14985: ARRAY
14986: PPUSH
14987: CALL_OW 254
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: ADD
15001: ST_TO_ADDR
15002: GO 14915
15004: POP
15005: POP
// result := list ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: LD_VAR 0 5
15015: ST_TO_ADDR
// end ;
15016: LD_VAR 0 2
15020: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
// if not factory then
15030: LD_VAR 0 1
15034: NOT
15035: IFFALSE 15039
// exit ;
15037: GO 15571
// if control = control_apeman then
15039: LD_VAR 0 4
15043: PUSH
15044: LD_INT 5
15046: EQUAL
15047: IFFALSE 15156
// begin tmp := UnitsInside ( factory ) ;
15049: LD_ADDR_VAR 0 8
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: CALL_OW 313
15063: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15064: LD_VAR 0 8
15068: PPUSH
15069: LD_INT 25
15071: PUSH
15072: LD_INT 12
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: NOT
15084: IFFALSE 15094
// control := control_manual ;
15086: LD_ADDR_VAR 0 4
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15094: LD_ADDR_VAR 0 8
15098: PUSH
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL 14791 0 1
15108: ST_TO_ADDR
// if tmp then
15109: LD_VAR 0 8
15113: IFFALSE 15156
// begin for i in tmp do
15115: LD_ADDR_VAR 0 7
15119: PUSH
15120: LD_VAR 0 8
15124: PUSH
15125: FOR_IN
15126: IFFALSE 15154
// if i [ 1 ] = b_ext_radio then
15128: LD_VAR 0 7
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PUSH
15137: LD_INT 22
15139: EQUAL
15140: IFFALSE 15152
// begin control := control_remote ;
15142: LD_ADDR_VAR 0 4
15146: PUSH
15147: LD_INT 2
15149: ST_TO_ADDR
// break ;
15150: GO 15154
// end ;
15152: GO 15125
15154: POP
15155: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_VAR 0 2
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: LD_VAR 0 5
15180: PPUSH
15181: CALL_OW 448
15185: IFFALSE 15220
// begin result := [ chassis , engine , control , weapon ] ;
15187: LD_ADDR_VAR 0 6
15191: PUSH
15192: LD_VAR 0 2
15196: PUSH
15197: LD_VAR 0 3
15201: PUSH
15202: LD_VAR 0 4
15206: PUSH
15207: LD_VAR 0 5
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// exit ;
15218: GO 15571
// end ; _chassis := AvailableChassisList ( factory ) ;
15220: LD_ADDR_VAR 0 9
15224: PUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 475
15234: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15235: LD_ADDR_VAR 0 11
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 476
15249: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15250: LD_ADDR_VAR 0 12
15254: PUSH
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 477
15264: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15265: LD_ADDR_VAR 0 10
15269: PUSH
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 478
15279: ST_TO_ADDR
// if not chassis in _chassis then
15280: LD_VAR 0 2
15284: PUSH
15285: LD_VAR 0 9
15289: IN
15290: NOT
15291: IFFALSE 15317
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15293: LD_ADDR_VAR 0 2
15297: PUSH
15298: LD_VAR 0 9
15302: PUSH
15303: LD_INT 1
15305: PPUSH
15306: LD_VAR 0 9
15310: PPUSH
15311: CALL_OW 12
15315: ARRAY
15316: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15317: LD_VAR 0 2
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL 15576 0 2
15331: NOT
15332: IFFALSE 15391
// repeat engine := _engine [ 1 ] ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_VAR 0 11
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15348: LD_ADDR_VAR 0 11
15352: PUSH
15353: LD_VAR 0 11
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 3
15365: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15366: LD_VAR 0 2
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: CALL 15576 0 2
15380: PUSH
15381: LD_VAR 0 11
15385: PUSH
15386: EMPTY
15387: EQUAL
15388: OR
15389: IFFALSE 15334
// if not control in _control then
15391: LD_VAR 0 4
15395: PUSH
15396: LD_VAR 0 12
15400: IN
15401: NOT
15402: IFFALSE 15428
// control := _control [ rand ( 1 , _control ) ] ;
15404: LD_ADDR_VAR 0 4
15408: PUSH
15409: LD_VAR 0 12
15413: PUSH
15414: LD_INT 1
15416: PPUSH
15417: LD_VAR 0 12
15421: PPUSH
15422: CALL_OW 12
15426: ARRAY
15427: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15428: LD_VAR 0 2
15432: PPUSH
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL 15796 0 2
15442: NOT
15443: IFFALSE 15502
// repeat weapon := _weapon [ 1 ] ;
15445: LD_ADDR_VAR 0 5
15449: PUSH
15450: LD_VAR 0 10
15454: PUSH
15455: LD_INT 1
15457: ARRAY
15458: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15459: LD_ADDR_VAR 0 10
15463: PUSH
15464: LD_VAR 0 10
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 3
15476: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15477: LD_VAR 0 2
15481: PPUSH
15482: LD_VAR 0 5
15486: PPUSH
15487: CALL 15796 0 2
15491: PUSH
15492: LD_VAR 0 10
15496: PUSH
15497: EMPTY
15498: EQUAL
15499: OR
15500: IFFALSE 15445
// result := [ ] ;
15502: LD_ADDR_VAR 0 6
15506: PUSH
15507: EMPTY
15508: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_VAR 0 4
15528: PPUSH
15529: LD_VAR 0 5
15533: PPUSH
15534: CALL_OW 448
15538: IFFALSE 15571
// result := [ chassis , engine , control , weapon ] ;
15540: LD_ADDR_VAR 0 6
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: LD_VAR 0 3
15554: PUSH
15555: LD_VAR 0 4
15559: PUSH
15560: LD_VAR 0 5
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: ST_TO_ADDR
// end ;
15571: LD_VAR 0 6
15575: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15576: LD_INT 0
15578: PPUSH
// if not chassis or not engine then
15579: LD_VAR 0 1
15583: NOT
15584: PUSH
15585: LD_VAR 0 2
15589: NOT
15590: OR
15591: IFFALSE 15595
// exit ;
15593: GO 15791
// case engine of engine_solar :
15595: LD_VAR 0 2
15599: PUSH
15600: LD_INT 2
15602: DOUBLE
15603: EQUAL
15604: IFTRUE 15608
15606: GO 15646
15608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15609: LD_ADDR_VAR 0 3
15613: PUSH
15614: LD_INT 11
15616: PUSH
15617: LD_INT 12
15619: PUSH
15620: LD_INT 13
15622: PUSH
15623: LD_INT 14
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: LD_INT 3
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: ST_TO_ADDR
15644: GO 15775
15646: LD_INT 1
15648: DOUBLE
15649: EQUAL
15650: IFTRUE 15654
15652: GO 15716
15654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_INT 11
15662: PUSH
15663: LD_INT 12
15665: PUSH
15666: LD_INT 13
15668: PUSH
15669: LD_INT 14
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: LD_INT 2
15677: PUSH
15678: LD_INT 3
15680: PUSH
15681: LD_INT 4
15683: PUSH
15684: LD_INT 5
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 23
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_INT 24
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: ST_TO_ADDR
15714: GO 15775
15716: LD_INT 3
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15774
15724: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_INT 13
15732: PUSH
15733: LD_INT 14
15735: PUSH
15736: LD_INT 2
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: LD_INT 5
15747: PUSH
15748: LD_INT 21
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_INT 23
15756: PUSH
15757: LD_INT 24
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: ST_TO_ADDR
15772: GO 15775
15774: POP
// result := ( chassis in result ) ;
15775: LD_ADDR_VAR 0 3
15779: PUSH
15780: LD_VAR 0 1
15784: PUSH
15785: LD_VAR 0 3
15789: IN
15790: ST_TO_ADDR
// end ;
15791: LD_VAR 0 3
15795: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15796: LD_INT 0
15798: PPUSH
// if not chassis or not weapon then
15799: LD_VAR 0 1
15803: NOT
15804: PUSH
15805: LD_VAR 0 2
15809: NOT
15810: OR
15811: IFFALSE 15815
// exit ;
15813: GO 16841
// case weapon of us_machine_gun :
15815: LD_VAR 0 2
15819: PUSH
15820: LD_INT 2
15822: DOUBLE
15823: EQUAL
15824: IFTRUE 15828
15826: GO 15858
15828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15829: LD_ADDR_VAR 0 3
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: LD_INT 2
15839: PUSH
15840: LD_INT 3
15842: PUSH
15843: LD_INT 4
15845: PUSH
15846: LD_INT 5
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
15856: GO 16825
15858: LD_INT 3
15860: DOUBLE
15861: EQUAL
15862: IFTRUE 15866
15864: GO 15896
15866: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15867: LD_ADDR_VAR 0 3
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 3
15880: PUSH
15881: LD_INT 4
15883: PUSH
15884: LD_INT 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: ST_TO_ADDR
15894: GO 16825
15896: LD_INT 11
15898: DOUBLE
15899: EQUAL
15900: IFTRUE 15904
15902: GO 15934
15904: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15905: LD_ADDR_VAR 0 3
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: ST_TO_ADDR
15932: GO 16825
15934: LD_INT 4
15936: DOUBLE
15937: EQUAL
15938: IFTRUE 15942
15940: GO 15968
15942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 3
15953: PUSH
15954: LD_INT 4
15956: PUSH
15957: LD_INT 5
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: ST_TO_ADDR
15966: GO 16825
15968: LD_INT 5
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 16002
15976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15977: LD_ADDR_VAR 0 3
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: LD_INT 3
15987: PUSH
15988: LD_INT 4
15990: PUSH
15991: LD_INT 5
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: ST_TO_ADDR
16000: GO 16825
16002: LD_INT 9
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16036
16010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16011: LD_ADDR_VAR 0 3
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: LD_INT 3
16021: PUSH
16022: LD_INT 4
16024: PUSH
16025: LD_INT 5
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: ST_TO_ADDR
16034: GO 16825
16036: LD_INT 7
16038: DOUBLE
16039: EQUAL
16040: IFTRUE 16044
16042: GO 16070
16044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16045: LD_ADDR_VAR 0 3
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: LD_INT 3
16055: PUSH
16056: LD_INT 4
16058: PUSH
16059: LD_INT 5
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: ST_TO_ADDR
16068: GO 16825
16070: LD_INT 12
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16104
16078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: LD_INT 2
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: LD_INT 4
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
16102: GO 16825
16104: LD_INT 13
16106: DOUBLE
16107: EQUAL
16108: IFTRUE 16112
16110: GO 16138
16112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: LD_INT 3
16123: PUSH
16124: LD_INT 4
16126: PUSH
16127: LD_INT 5
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: ST_TO_ADDR
16136: GO 16825
16138: LD_INT 14
16140: DOUBLE
16141: EQUAL
16142: IFTRUE 16146
16144: GO 16164
16146: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 4
16154: PUSH
16155: LD_INT 5
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: ST_TO_ADDR
16162: GO 16825
16164: LD_INT 6
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16190
16172: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 4
16180: PUSH
16181: LD_INT 5
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: ST_TO_ADDR
16188: GO 16825
16190: LD_INT 10
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16216
16198: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: LD_INT 5
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ST_TO_ADDR
16214: GO 16825
16216: LD_INT 22
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16250
16224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_INT 11
16232: PUSH
16233: LD_INT 12
16235: PUSH
16236: LD_INT 13
16238: PUSH
16239: LD_INT 14
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: ST_TO_ADDR
16248: GO 16825
16250: LD_INT 23
16252: DOUBLE
16253: EQUAL
16254: IFTRUE 16258
16256: GO 16284
16258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16259: LD_ADDR_VAR 0 3
16263: PUSH
16264: LD_INT 11
16266: PUSH
16267: LD_INT 12
16269: PUSH
16270: LD_INT 13
16272: PUSH
16273: LD_INT 14
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: ST_TO_ADDR
16282: GO 16825
16284: LD_INT 24
16286: DOUBLE
16287: EQUAL
16288: IFTRUE 16292
16290: GO 16318
16292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: LD_INT 11
16300: PUSH
16301: LD_INT 12
16303: PUSH
16304: LD_INT 13
16306: PUSH
16307: LD_INT 14
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: ST_TO_ADDR
16316: GO 16825
16318: LD_INT 30
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16352
16326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_INT 11
16334: PUSH
16335: LD_INT 12
16337: PUSH
16338: LD_INT 13
16340: PUSH
16341: LD_INT 14
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: ST_TO_ADDR
16350: GO 16825
16352: LD_INT 25
16354: DOUBLE
16355: EQUAL
16356: IFTRUE 16360
16358: GO 16378
16360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16361: LD_ADDR_VAR 0 3
16365: PUSH
16366: LD_INT 13
16368: PUSH
16369: LD_INT 14
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: ST_TO_ADDR
16376: GO 16825
16378: LD_INT 27
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16404
16386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_INT 13
16394: PUSH
16395: LD_INT 14
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: ST_TO_ADDR
16402: GO 16825
16404: LD_INT 28
16406: DOUBLE
16407: EQUAL
16408: IFTRUE 16412
16410: GO 16430
16412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 13
16420: PUSH
16421: LD_INT 14
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: ST_TO_ADDR
16428: GO 16825
16430: LD_INT 29
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16456
16438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16439: LD_ADDR_VAR 0 3
16443: PUSH
16444: LD_INT 13
16446: PUSH
16447: LD_INT 14
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: ST_TO_ADDR
16454: GO 16825
16456: LD_INT 31
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16482
16464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_INT 13
16472: PUSH
16473: LD_INT 14
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: ST_TO_ADDR
16480: GO 16825
16482: LD_INT 26
16484: DOUBLE
16485: EQUAL
16486: IFTRUE 16490
16488: GO 16508
16490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16491: LD_ADDR_VAR 0 3
16495: PUSH
16496: LD_INT 13
16498: PUSH
16499: LD_INT 14
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: ST_TO_ADDR
16506: GO 16825
16508: LD_INT 42
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16542
16516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16517: LD_ADDR_VAR 0 3
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_INT 23
16530: PUSH
16531: LD_INT 24
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: ST_TO_ADDR
16540: GO 16825
16542: LD_INT 43
16544: DOUBLE
16545: EQUAL
16546: IFTRUE 16550
16548: GO 16576
16550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16551: LD_ADDR_VAR 0 3
16555: PUSH
16556: LD_INT 21
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_INT 23
16564: PUSH
16565: LD_INT 24
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: ST_TO_ADDR
16574: GO 16825
16576: LD_INT 44
16578: DOUBLE
16579: EQUAL
16580: IFTRUE 16584
16582: GO 16610
16584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16585: LD_ADDR_VAR 0 3
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_INT 23
16598: PUSH
16599: LD_INT 24
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: ST_TO_ADDR
16608: GO 16825
16610: LD_INT 45
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16644
16618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: LD_INT 21
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: LD_INT 23
16632: PUSH
16633: LD_INT 24
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: ST_TO_ADDR
16642: GO 16825
16644: LD_INT 49
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16678
16652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16653: LD_ADDR_VAR 0 3
16657: PUSH
16658: LD_INT 21
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_INT 23
16666: PUSH
16667: LD_INT 24
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: ST_TO_ADDR
16676: GO 16825
16678: LD_INT 51
16680: DOUBLE
16681: EQUAL
16682: IFTRUE 16686
16684: GO 16712
16686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_INT 21
16694: PUSH
16695: LD_INT 22
16697: PUSH
16698: LD_INT 23
16700: PUSH
16701: LD_INT 24
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: ST_TO_ADDR
16710: GO 16825
16712: LD_INT 52
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16746
16720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: LD_INT 21
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 23
16734: PUSH
16735: LD_INT 24
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: ST_TO_ADDR
16744: GO 16825
16746: LD_INT 53
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16772
16754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_INT 23
16762: PUSH
16763: LD_INT 24
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: ST_TO_ADDR
16770: GO 16825
16772: LD_INT 46
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16798
16780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16781: LD_ADDR_VAR 0 3
16785: PUSH
16786: LD_INT 23
16788: PUSH
16789: LD_INT 24
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: ST_TO_ADDR
16796: GO 16825
16798: LD_INT 47
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16824
16806: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_INT 23
16814: PUSH
16815: LD_INT 24
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: ST_TO_ADDR
16822: GO 16825
16824: POP
// result := ( chassis in result ) ;
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_VAR 0 1
16834: PUSH
16835: LD_VAR 0 3
16839: IN
16840: ST_TO_ADDR
// end ;
16841: LD_VAR 0 3
16845: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16846: LD_INT 0
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
16852: PPUSH
16853: PPUSH
16854: PPUSH
// result := array ;
16855: LD_ADDR_VAR 0 5
16859: PUSH
16860: LD_VAR 0 1
16864: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16865: LD_VAR 0 1
16869: NOT
16870: PUSH
16871: LD_VAR 0 2
16875: NOT
16876: OR
16877: PUSH
16878: LD_VAR 0 3
16882: NOT
16883: OR
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: LD_VAR 0 1
16894: GREATER
16895: OR
16896: PUSH
16897: LD_VAR 0 3
16901: PUSH
16902: LD_VAR 0 1
16906: GREATER
16907: OR
16908: IFFALSE 16912
// exit ;
16910: GO 17208
// if direction then
16912: LD_VAR 0 4
16916: IFFALSE 16980
// begin d := 1 ;
16918: LD_ADDR_VAR 0 9
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if i_from > i_to then
16926: LD_VAR 0 2
16930: PUSH
16931: LD_VAR 0 3
16935: GREATER
16936: IFFALSE 16962
// length := ( array - i_from ) + i_to else
16938: LD_ADDR_VAR 0 11
16942: PUSH
16943: LD_VAR 0 1
16947: PUSH
16948: LD_VAR 0 2
16952: MINUS
16953: PUSH
16954: LD_VAR 0 3
16958: PLUS
16959: ST_TO_ADDR
16960: GO 16978
// length := i_to - i_from ;
16962: LD_ADDR_VAR 0 11
16966: PUSH
16967: LD_VAR 0 3
16971: PUSH
16972: LD_VAR 0 2
16976: MINUS
16977: ST_TO_ADDR
// end else
16978: GO 17041
// begin d := - 1 ;
16980: LD_ADDR_VAR 0 9
16984: PUSH
16985: LD_INT 1
16987: NEG
16988: ST_TO_ADDR
// if i_from > i_to then
16989: LD_VAR 0 2
16993: PUSH
16994: LD_VAR 0 3
16998: GREATER
16999: IFFALSE 17019
// length := i_from - i_to else
17001: LD_ADDR_VAR 0 11
17005: PUSH
17006: LD_VAR 0 2
17010: PUSH
17011: LD_VAR 0 3
17015: MINUS
17016: ST_TO_ADDR
17017: GO 17041
// length := ( array - i_to ) + i_from ;
17019: LD_ADDR_VAR 0 11
17023: PUSH
17024: LD_VAR 0 1
17028: PUSH
17029: LD_VAR 0 3
17033: MINUS
17034: PUSH
17035: LD_VAR 0 2
17039: PLUS
17040: ST_TO_ADDR
// end ; if not length then
17041: LD_VAR 0 11
17045: NOT
17046: IFFALSE 17050
// exit ;
17048: GO 17208
// tmp := array ;
17050: LD_ADDR_VAR 0 10
17054: PUSH
17055: LD_VAR 0 1
17059: ST_TO_ADDR
// for i = 1 to length do
17060: LD_ADDR_VAR 0 6
17064: PUSH
17065: DOUBLE
17066: LD_INT 1
17068: DEC
17069: ST_TO_ADDR
17070: LD_VAR 0 11
17074: PUSH
17075: FOR_TO
17076: IFFALSE 17196
// begin for j = 1 to array do
17078: LD_ADDR_VAR 0 7
17082: PUSH
17083: DOUBLE
17084: LD_INT 1
17086: DEC
17087: ST_TO_ADDR
17088: LD_VAR 0 1
17092: PUSH
17093: FOR_TO
17094: IFFALSE 17182
// begin k := j + d ;
17096: LD_ADDR_VAR 0 8
17100: PUSH
17101: LD_VAR 0 7
17105: PUSH
17106: LD_VAR 0 9
17110: PLUS
17111: ST_TO_ADDR
// if k > array then
17112: LD_VAR 0 8
17116: PUSH
17117: LD_VAR 0 1
17121: GREATER
17122: IFFALSE 17132
// k := 1 ;
17124: LD_ADDR_VAR 0 8
17128: PUSH
17129: LD_INT 1
17131: ST_TO_ADDR
// if not k then
17132: LD_VAR 0 8
17136: NOT
17137: IFFALSE 17149
// k := array ;
17139: LD_ADDR_VAR 0 8
17143: PUSH
17144: LD_VAR 0 1
17148: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17149: LD_ADDR_VAR 0 10
17153: PUSH
17154: LD_VAR 0 10
17158: PPUSH
17159: LD_VAR 0 8
17163: PPUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_VAR 0 7
17173: ARRAY
17174: PPUSH
17175: CALL_OW 1
17179: ST_TO_ADDR
// end ;
17180: GO 17093
17182: POP
17183: POP
// array := tmp ;
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_VAR 0 10
17193: ST_TO_ADDR
// end ;
17194: GO 17075
17196: POP
17197: POP
// result := array ;
17198: LD_ADDR_VAR 0 5
17202: PUSH
17203: LD_VAR 0 1
17207: ST_TO_ADDR
// end ;
17208: LD_VAR 0 5
17212: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17213: LD_INT 0
17215: PPUSH
17216: PPUSH
// result := 0 ;
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 0
17224: ST_TO_ADDR
// if not array or not value in array then
17225: LD_VAR 0 1
17229: NOT
17230: PUSH
17231: LD_VAR 0 2
17235: PUSH
17236: LD_VAR 0 1
17240: IN
17241: NOT
17242: OR
17243: IFFALSE 17247
// exit ;
17245: GO 17301
// for i = 1 to array do
17247: LD_ADDR_VAR 0 4
17251: PUSH
17252: DOUBLE
17253: LD_INT 1
17255: DEC
17256: ST_TO_ADDR
17257: LD_VAR 0 1
17261: PUSH
17262: FOR_TO
17263: IFFALSE 17299
// if value = array [ i ] then
17265: LD_VAR 0 2
17269: PUSH
17270: LD_VAR 0 1
17274: PUSH
17275: LD_VAR 0 4
17279: ARRAY
17280: EQUAL
17281: IFFALSE 17297
// begin result := i ;
17283: LD_ADDR_VAR 0 3
17287: PUSH
17288: LD_VAR 0 4
17292: ST_TO_ADDR
// exit ;
17293: POP
17294: POP
17295: GO 17301
// end ;
17297: GO 17262
17299: POP
17300: POP
// end ;
17301: LD_VAR 0 3
17305: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17306: LD_INT 0
17308: PPUSH
// vc_chassis := chassis ;
17309: LD_ADDR_OWVAR 37
17313: PUSH
17314: LD_VAR 0 1
17318: ST_TO_ADDR
// vc_engine := engine ;
17319: LD_ADDR_OWVAR 39
17323: PUSH
17324: LD_VAR 0 2
17328: ST_TO_ADDR
// vc_control := control ;
17329: LD_ADDR_OWVAR 38
17333: PUSH
17334: LD_VAR 0 3
17338: ST_TO_ADDR
// vc_weapon := weapon ;
17339: LD_ADDR_OWVAR 40
17343: PUSH
17344: LD_VAR 0 4
17348: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17349: LD_ADDR_OWVAR 41
17353: PUSH
17354: LD_VAR 0 5
17358: ST_TO_ADDR
// end ;
17359: LD_VAR 0 6
17363: RET
// export function WantPlant ( unit ) ; var task ; begin
17364: LD_INT 0
17366: PPUSH
17367: PPUSH
// result := false ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 437
17390: ST_TO_ADDR
// if task then
17391: LD_VAR 0 3
17395: IFFALSE 17423
// if task [ 1 ] [ 1 ] = p then
17397: LD_VAR 0 3
17401: PUSH
17402: LD_INT 1
17404: ARRAY
17405: PUSH
17406: LD_INT 1
17408: ARRAY
17409: PUSH
17410: LD_STRING p
17412: EQUAL
17413: IFFALSE 17423
// result := true ;
17415: LD_ADDR_VAR 0 2
17419: PUSH
17420: LD_INT 1
17422: ST_TO_ADDR
// end ;
17423: LD_VAR 0 2
17427: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
// if pos < 1 then
17434: LD_VAR 0 2
17438: PUSH
17439: LD_INT 1
17441: LESS
17442: IFFALSE 17446
// exit ;
17444: GO 17749
// if pos = 1 then
17446: LD_VAR 0 2
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: IFFALSE 17487
// result := Replace ( arr , pos [ 1 ] , value ) else
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: LD_VAR 0 2
17470: PUSH
17471: LD_INT 1
17473: ARRAY
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: CALL_OW 1
17484: ST_TO_ADDR
17485: GO 17749
// begin tmp := arr ;
17487: LD_ADDR_VAR 0 6
17491: PUSH
17492: LD_VAR 0 1
17496: ST_TO_ADDR
// s_arr := [ tmp ] ;
17497: LD_ADDR_VAR 0 7
17501: PUSH
17502: LD_VAR 0 6
17506: PUSH
17507: EMPTY
17508: LIST
17509: ST_TO_ADDR
// for i = 1 to pos - 1 do
17510: LD_ADDR_VAR 0 5
17514: PUSH
17515: DOUBLE
17516: LD_INT 1
17518: DEC
17519: ST_TO_ADDR
17520: LD_VAR 0 2
17524: PUSH
17525: LD_INT 1
17527: MINUS
17528: PUSH
17529: FOR_TO
17530: IFFALSE 17575
// begin tmp := tmp [ pos [ i ] ] ;
17532: LD_ADDR_VAR 0 6
17536: PUSH
17537: LD_VAR 0 6
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: LD_VAR 0 5
17551: ARRAY
17552: ARRAY
17553: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17554: LD_ADDR_VAR 0 7
17558: PUSH
17559: LD_VAR 0 7
17563: PUSH
17564: LD_VAR 0 6
17568: PUSH
17569: EMPTY
17570: LIST
17571: ADD
17572: ST_TO_ADDR
// end ;
17573: GO 17529
17575: POP
17576: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17577: LD_ADDR_VAR 0 6
17581: PUSH
17582: LD_VAR 0 6
17586: PPUSH
17587: LD_VAR 0 2
17591: PUSH
17592: LD_VAR 0 2
17596: ARRAY
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: CALL_OW 1
17607: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17608: LD_ADDR_VAR 0 7
17612: PUSH
17613: LD_VAR 0 7
17617: PPUSH
17618: LD_VAR 0 7
17622: PPUSH
17623: LD_VAR 0 6
17627: PPUSH
17628: CALL_OW 1
17632: ST_TO_ADDR
// for i = s_arr downto 2 do
17633: LD_ADDR_VAR 0 5
17637: PUSH
17638: DOUBLE
17639: LD_VAR 0 7
17643: INC
17644: ST_TO_ADDR
17645: LD_INT 2
17647: PUSH
17648: FOR_DOWNTO
17649: IFFALSE 17733
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17651: LD_ADDR_VAR 0 6
17655: PUSH
17656: LD_VAR 0 7
17660: PUSH
17661: LD_VAR 0 5
17665: PUSH
17666: LD_INT 1
17668: MINUS
17669: ARRAY
17670: PPUSH
17671: LD_VAR 0 2
17675: PUSH
17676: LD_VAR 0 5
17680: PUSH
17681: LD_INT 1
17683: MINUS
17684: ARRAY
17685: PPUSH
17686: LD_VAR 0 7
17690: PUSH
17691: LD_VAR 0 5
17695: ARRAY
17696: PPUSH
17697: CALL_OW 1
17701: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17702: LD_ADDR_VAR 0 7
17706: PUSH
17707: LD_VAR 0 7
17711: PPUSH
17712: LD_VAR 0 5
17716: PUSH
17717: LD_INT 1
17719: MINUS
17720: PPUSH
17721: LD_VAR 0 6
17725: PPUSH
17726: CALL_OW 1
17730: ST_TO_ADDR
// end ;
17731: GO 17648
17733: POP
17734: POP
// result := s_arr [ 1 ] ;
17735: LD_ADDR_VAR 0 4
17739: PUSH
17740: LD_VAR 0 7
17744: PUSH
17745: LD_INT 1
17747: ARRAY
17748: ST_TO_ADDR
// end ; end ;
17749: LD_VAR 0 4
17753: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17754: LD_INT 0
17756: PPUSH
17757: PPUSH
// if not list then
17758: LD_VAR 0 1
17762: NOT
17763: IFFALSE 17767
// exit ;
17765: GO 17858
// i := list [ pos1 ] ;
17767: LD_ADDR_VAR 0 5
17771: PUSH
17772: LD_VAR 0 1
17776: PUSH
17777: LD_VAR 0 2
17781: ARRAY
17782: ST_TO_ADDR
// if not i then
17783: LD_VAR 0 5
17787: NOT
17788: IFFALSE 17792
// exit ;
17790: GO 17858
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17792: LD_ADDR_VAR 0 1
17796: PUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: LD_VAR 0 1
17811: PUSH
17812: LD_VAR 0 3
17816: ARRAY
17817: PPUSH
17818: CALL_OW 1
17822: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17823: LD_ADDR_VAR 0 1
17827: PUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: LD_VAR 0 3
17837: PPUSH
17838: LD_VAR 0 5
17842: PPUSH
17843: CALL_OW 1
17847: ST_TO_ADDR
// result := list ;
17848: LD_ADDR_VAR 0 4
17852: PUSH
17853: LD_VAR 0 1
17857: ST_TO_ADDR
// end ;
17858: LD_VAR 0 4
17862: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17863: LD_INT 0
17865: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17866: LD_ADDR_VAR 0 5
17870: PUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 250
17880: PPUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 251
17890: PPUSH
17891: LD_VAR 0 2
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_VAR 0 4
17905: PPUSH
17906: CALL 17916 0 5
17910: ST_TO_ADDR
// end ;
17911: LD_VAR 0 5
17915: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17916: LD_INT 0
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
// if not list then
17922: LD_VAR 0 3
17926: NOT
17927: IFFALSE 17931
// exit ;
17929: GO 18319
// result := [ ] ;
17931: LD_ADDR_VAR 0 6
17935: PUSH
17936: EMPTY
17937: ST_TO_ADDR
// for i in list do
17938: LD_ADDR_VAR 0 7
17942: PUSH
17943: LD_VAR 0 3
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18151
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17951: LD_ADDR_VAR 0 9
17955: PUSH
17956: LD_VAR 0 7
17960: PPUSH
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_VAR 0 2
17970: PPUSH
17971: CALL_OW 297
17975: ST_TO_ADDR
// if not result then
17976: LD_VAR 0 6
17980: NOT
17981: IFFALSE 18007
// result := [ [ i , tmp ] ] else
17983: LD_ADDR_VAR 0 6
17987: PUSH
17988: LD_VAR 0 7
17992: PUSH
17993: LD_VAR 0 9
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: ST_TO_ADDR
18005: GO 18149
// begin if result [ result ] [ 2 ] < tmp then
18007: LD_VAR 0 6
18011: PUSH
18012: LD_VAR 0 6
18016: ARRAY
18017: PUSH
18018: LD_INT 2
18020: ARRAY
18021: PUSH
18022: LD_VAR 0 9
18026: LESS
18027: IFFALSE 18069
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18029: LD_ADDR_VAR 0 6
18033: PUSH
18034: LD_VAR 0 6
18038: PPUSH
18039: LD_VAR 0 6
18043: PUSH
18044: LD_INT 1
18046: PLUS
18047: PPUSH
18048: LD_VAR 0 7
18052: PUSH
18053: LD_VAR 0 9
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 2
18066: ST_TO_ADDR
18067: GO 18149
// for j = 1 to result do
18069: LD_ADDR_VAR 0 8
18073: PUSH
18074: DOUBLE
18075: LD_INT 1
18077: DEC
18078: ST_TO_ADDR
18079: LD_VAR 0 6
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18147
// begin if tmp < result [ j ] [ 2 ] then
18087: LD_VAR 0 9
18091: PUSH
18092: LD_VAR 0 6
18096: PUSH
18097: LD_VAR 0 8
18101: ARRAY
18102: PUSH
18103: LD_INT 2
18105: ARRAY
18106: LESS
18107: IFFALSE 18145
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18109: LD_ADDR_VAR 0 6
18113: PUSH
18114: LD_VAR 0 6
18118: PPUSH
18119: LD_VAR 0 8
18123: PPUSH
18124: LD_VAR 0 7
18128: PUSH
18129: LD_VAR 0 9
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 2
18142: ST_TO_ADDR
// break ;
18143: GO 18147
// end ; end ;
18145: GO 18084
18147: POP
18148: POP
// end ; end ;
18149: GO 17948
18151: POP
18152: POP
// if result and not asc then
18153: LD_VAR 0 6
18157: PUSH
18158: LD_VAR 0 4
18162: NOT
18163: AND
18164: IFFALSE 18239
// begin tmp := result ;
18166: LD_ADDR_VAR 0 9
18170: PUSH
18171: LD_VAR 0 6
18175: ST_TO_ADDR
// for i = tmp downto 1 do
18176: LD_ADDR_VAR 0 7
18180: PUSH
18181: DOUBLE
18182: LD_VAR 0 9
18186: INC
18187: ST_TO_ADDR
18188: LD_INT 1
18190: PUSH
18191: FOR_DOWNTO
18192: IFFALSE 18237
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18194: LD_ADDR_VAR 0 6
18198: PUSH
18199: LD_VAR 0 6
18203: PPUSH
18204: LD_VAR 0 9
18208: PUSH
18209: LD_VAR 0 7
18213: MINUS
18214: PUSH
18215: LD_INT 1
18217: PLUS
18218: PPUSH
18219: LD_VAR 0 9
18223: PUSH
18224: LD_VAR 0 7
18228: ARRAY
18229: PPUSH
18230: CALL_OW 1
18234: ST_TO_ADDR
18235: GO 18191
18237: POP
18238: POP
// end ; tmp := [ ] ;
18239: LD_ADDR_VAR 0 9
18243: PUSH
18244: EMPTY
18245: ST_TO_ADDR
// if mode then
18246: LD_VAR 0 5
18250: IFFALSE 18319
// begin for i = 1 to result do
18252: LD_ADDR_VAR 0 7
18256: PUSH
18257: DOUBLE
18258: LD_INT 1
18260: DEC
18261: ST_TO_ADDR
18262: LD_VAR 0 6
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18307
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18270: LD_ADDR_VAR 0 9
18274: PUSH
18275: LD_VAR 0 9
18279: PPUSH
18280: LD_VAR 0 7
18284: PPUSH
18285: LD_VAR 0 6
18289: PUSH
18290: LD_VAR 0 7
18294: ARRAY
18295: PUSH
18296: LD_INT 1
18298: ARRAY
18299: PPUSH
18300: CALL_OW 1
18304: ST_TO_ADDR
18305: GO 18267
18307: POP
18308: POP
// result := tmp ;
18309: LD_ADDR_VAR 0 6
18313: PUSH
18314: LD_VAR 0 9
18318: ST_TO_ADDR
// end ; end ;
18319: LD_VAR 0 6
18323: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18332: LD_ADDR_VAR 0 5
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: ST_TO_ADDR
// if not x or not y then
18354: LD_VAR 0 2
18358: NOT
18359: PUSH
18360: LD_VAR 0 3
18364: NOT
18365: OR
18366: IFFALSE 18370
// exit ;
18368: GO 20016
// if not range then
18370: LD_VAR 0 4
18374: NOT
18375: IFFALSE 18385
// range := 10 ;
18377: LD_ADDR_VAR 0 4
18381: PUSH
18382: LD_INT 10
18384: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18385: LD_ADDR_VAR 0 8
18389: PUSH
18390: LD_INT 81
18392: PUSH
18393: LD_VAR 0 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 92
18404: PUSH
18405: LD_VAR 0 2
18409: PUSH
18410: LD_VAR 0 3
18414: PUSH
18415: LD_VAR 0 4
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: LD_INT 21
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 69
18452: ST_TO_ADDR
// if not tmp then
18453: LD_VAR 0 8
18457: NOT
18458: IFFALSE 18462
// exit ;
18460: GO 20016
// for i in tmp do
18462: LD_ADDR_VAR 0 6
18466: PUSH
18467: LD_VAR 0 8
18471: PUSH
18472: FOR_IN
18473: IFFALSE 19991
// begin points := [ 0 , 0 , 0 ] ;
18475: LD_ADDR_VAR 0 9
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: ST_TO_ADDR
// bpoints := 1 ;
18494: LD_ADDR_VAR 0 10
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18502: LD_VAR 0 6
18506: PPUSH
18507: CALL_OW 247
18511: PUSH
18512: LD_INT 1
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 19098
18520: POP
// begin if GetClass ( i ) = 1 then
18521: LD_VAR 0 6
18525: PPUSH
18526: CALL_OW 257
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18555
// points := [ 10 , 5 , 3 ] ;
18536: LD_ADDR_VAR 0 9
18540: PUSH
18541: LD_INT 10
18543: PUSH
18544: LD_INT 5
18546: PUSH
18547: LD_INT 3
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18555: LD_VAR 0 6
18559: PPUSH
18560: CALL_OW 257
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: LD_INT 4
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: IN
18579: IFFALSE 18600
// points := [ 3 , 2 , 1 ] ;
18581: LD_ADDR_VAR 0 9
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18600: LD_VAR 0 6
18604: PPUSH
18605: CALL_OW 257
18609: PUSH
18610: LD_INT 5
18612: EQUAL
18613: IFFALSE 18634
// points := [ 130 , 5 , 2 ] ;
18615: LD_ADDR_VAR 0 9
18619: PUSH
18620: LD_INT 130
18622: PUSH
18623: LD_INT 5
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18634: LD_VAR 0 6
18638: PPUSH
18639: CALL_OW 257
18643: PUSH
18644: LD_INT 8
18646: EQUAL
18647: IFFALSE 18668
// points := [ 35 , 35 , 30 ] ;
18649: LD_ADDR_VAR 0 9
18653: PUSH
18654: LD_INT 35
18656: PUSH
18657: LD_INT 35
18659: PUSH
18660: LD_INT 30
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18668: LD_VAR 0 6
18672: PPUSH
18673: CALL_OW 257
18677: PUSH
18678: LD_INT 9
18680: EQUAL
18681: IFFALSE 18702
// points := [ 20 , 55 , 40 ] ;
18683: LD_ADDR_VAR 0 9
18687: PUSH
18688: LD_INT 20
18690: PUSH
18691: LD_INT 55
18693: PUSH
18694: LD_INT 40
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18702: LD_VAR 0 6
18706: PPUSH
18707: CALL_OW 257
18711: PUSH
18712: LD_INT 12
18714: PUSH
18715: LD_INT 16
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: IN
18722: IFFALSE 18743
// points := [ 5 , 3 , 2 ] ;
18724: LD_ADDR_VAR 0 9
18728: PUSH
18729: LD_INT 5
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18743: LD_VAR 0 6
18747: PPUSH
18748: CALL_OW 257
18752: PUSH
18753: LD_INT 17
18755: EQUAL
18756: IFFALSE 18777
// points := [ 100 , 50 , 75 ] ;
18758: LD_ADDR_VAR 0 9
18762: PUSH
18763: LD_INT 100
18765: PUSH
18766: LD_INT 50
18768: PUSH
18769: LD_INT 75
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18777: LD_VAR 0 6
18781: PPUSH
18782: CALL_OW 257
18786: PUSH
18787: LD_INT 15
18789: EQUAL
18790: IFFALSE 18811
// points := [ 10 , 5 , 3 ] ;
18792: LD_ADDR_VAR 0 9
18796: PUSH
18797: LD_INT 10
18799: PUSH
18800: LD_INT 5
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18811: LD_VAR 0 6
18815: PPUSH
18816: CALL_OW 257
18820: PUSH
18821: LD_INT 14
18823: EQUAL
18824: IFFALSE 18845
// points := [ 10 , 0 , 0 ] ;
18826: LD_ADDR_VAR 0 9
18830: PUSH
18831: LD_INT 10
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18845: LD_VAR 0 6
18849: PPUSH
18850: CALL_OW 257
18854: PUSH
18855: LD_INT 11
18857: EQUAL
18858: IFFALSE 18879
// points := [ 30 , 10 , 5 ] ;
18860: LD_ADDR_VAR 0 9
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 10
18870: PUSH
18871: LD_INT 5
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_INT 5
18886: PPUSH
18887: CALL_OW 321
18891: PUSH
18892: LD_INT 2
18894: EQUAL
18895: IFFALSE 18912
// bpoints := bpoints * 1.8 ;
18897: LD_ADDR_VAR 0 10
18901: PUSH
18902: LD_VAR 0 10
18906: PUSH
18907: LD_REAL  1.80000000000000E+0000
18910: MUL
18911: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18912: LD_VAR 0 6
18916: PPUSH
18917: CALL_OW 257
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 4
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: IN
18940: PUSH
18941: LD_VAR 0 1
18945: PPUSH
18946: LD_INT 51
18948: PPUSH
18949: CALL_OW 321
18953: PUSH
18954: LD_INT 2
18956: EQUAL
18957: AND
18958: IFFALSE 18975
// bpoints := bpoints * 1.2 ;
18960: LD_ADDR_VAR 0 10
18964: PUSH
18965: LD_VAR 0 10
18969: PUSH
18970: LD_REAL  1.20000000000000E+0000
18973: MUL
18974: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18975: LD_VAR 0 6
18979: PPUSH
18980: CALL_OW 257
18984: PUSH
18985: LD_INT 5
18987: PUSH
18988: LD_INT 7
18990: PUSH
18991: LD_INT 9
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: IN
18999: PUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: LD_INT 52
19007: PPUSH
19008: CALL_OW 321
19012: PUSH
19013: LD_INT 2
19015: EQUAL
19016: AND
19017: IFFALSE 19034
// bpoints := bpoints * 1.5 ;
19019: LD_ADDR_VAR 0 10
19023: PUSH
19024: LD_VAR 0 10
19028: PUSH
19029: LD_REAL  1.50000000000000E+0000
19032: MUL
19033: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19034: LD_VAR 0 1
19038: PPUSH
19039: LD_INT 66
19041: PPUSH
19042: CALL_OW 321
19046: PUSH
19047: LD_INT 2
19049: EQUAL
19050: IFFALSE 19067
// bpoints := bpoints * 1.1 ;
19052: LD_ADDR_VAR 0 10
19056: PUSH
19057: LD_VAR 0 10
19061: PUSH
19062: LD_REAL  1.10000000000000E+0000
19065: MUL
19066: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19067: LD_ADDR_VAR 0 10
19071: PUSH
19072: LD_VAR 0 10
19076: PUSH
19077: LD_VAR 0 6
19081: PPUSH
19082: LD_INT 1
19084: PPUSH
19085: CALL_OW 259
19089: PUSH
19090: LD_REAL  1.15000000000000E+0000
19093: MUL
19094: MUL
19095: ST_TO_ADDR
// end ; unit_vehicle :
19096: GO 19920
19098: LD_INT 2
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19908
19106: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19107: LD_VAR 0 6
19111: PPUSH
19112: CALL_OW 264
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 42
19122: PUSH
19123: LD_INT 24
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: IN
19131: IFFALSE 19152
// points := [ 25 , 5 , 3 ] ;
19133: LD_ADDR_VAR 0 9
19137: PUSH
19138: LD_INT 25
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19152: LD_VAR 0 6
19156: PPUSH
19157: CALL_OW 264
19161: PUSH
19162: LD_INT 4
19164: PUSH
19165: LD_INT 43
19167: PUSH
19168: LD_INT 25
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: IN
19176: IFFALSE 19197
// points := [ 40 , 15 , 5 ] ;
19178: LD_ADDR_VAR 0 9
19182: PUSH
19183: LD_INT 40
19185: PUSH
19186: LD_INT 15
19188: PUSH
19189: LD_INT 5
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19197: LD_VAR 0 6
19201: PPUSH
19202: CALL_OW 264
19206: PUSH
19207: LD_INT 3
19209: PUSH
19210: LD_INT 23
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: IN
19217: IFFALSE 19238
// points := [ 7 , 25 , 8 ] ;
19219: LD_ADDR_VAR 0 9
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 8
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19238: LD_VAR 0 6
19242: PPUSH
19243: CALL_OW 264
19247: PUSH
19248: LD_INT 5
19250: PUSH
19251: LD_INT 27
19253: PUSH
19254: LD_INT 44
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: IN
19262: IFFALSE 19283
// points := [ 14 , 50 , 16 ] ;
19264: LD_ADDR_VAR 0 9
19268: PUSH
19269: LD_INT 14
19271: PUSH
19272: LD_INT 50
19274: PUSH
19275: LD_INT 16
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19283: LD_VAR 0 6
19287: PPUSH
19288: CALL_OW 264
19292: PUSH
19293: LD_INT 6
19295: PUSH
19296: LD_INT 46
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: IN
19303: IFFALSE 19324
// points := [ 32 , 120 , 70 ] ;
19305: LD_ADDR_VAR 0 9
19309: PUSH
19310: LD_INT 32
19312: PUSH
19313: LD_INT 120
19315: PUSH
19316: LD_INT 70
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19324: LD_VAR 0 6
19328: PPUSH
19329: CALL_OW 264
19333: PUSH
19334: LD_INT 7
19336: PUSH
19337: LD_INT 28
19339: PUSH
19340: LD_INT 45
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: IN
19348: IFFALSE 19369
// points := [ 35 , 20 , 45 ] ;
19350: LD_ADDR_VAR 0 9
19354: PUSH
19355: LD_INT 35
19357: PUSH
19358: LD_INT 20
19360: PUSH
19361: LD_INT 45
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19369: LD_VAR 0 6
19373: PPUSH
19374: CALL_OW 264
19378: PUSH
19379: LD_INT 47
19381: PUSH
19382: EMPTY
19383: LIST
19384: IN
19385: IFFALSE 19406
// points := [ 67 , 45 , 75 ] ;
19387: LD_ADDR_VAR 0 9
19391: PUSH
19392: LD_INT 67
19394: PUSH
19395: LD_INT 45
19397: PUSH
19398: LD_INT 75
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19406: LD_VAR 0 6
19410: PPUSH
19411: CALL_OW 264
19415: PUSH
19416: LD_INT 26
19418: PUSH
19419: EMPTY
19420: LIST
19421: IN
19422: IFFALSE 19443
// points := [ 120 , 30 , 80 ] ;
19424: LD_ADDR_VAR 0 9
19428: PUSH
19429: LD_INT 120
19431: PUSH
19432: LD_INT 30
19434: PUSH
19435: LD_INT 80
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19443: LD_VAR 0 6
19447: PPUSH
19448: CALL_OW 264
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: EMPTY
19457: LIST
19458: IN
19459: IFFALSE 19480
// points := [ 40 , 1 , 1 ] ;
19461: LD_ADDR_VAR 0 9
19465: PUSH
19466: LD_INT 40
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19480: LD_VAR 0 6
19484: PPUSH
19485: CALL_OW 264
19489: PUSH
19490: LD_INT 29
19492: PUSH
19493: EMPTY
19494: LIST
19495: IN
19496: IFFALSE 19517
// points := [ 70 , 200 , 400 ] ;
19498: LD_ADDR_VAR 0 9
19502: PUSH
19503: LD_INT 70
19505: PUSH
19506: LD_INT 200
19508: PUSH
19509: LD_INT 400
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19517: LD_VAR 0 6
19521: PPUSH
19522: CALL_OW 264
19526: PUSH
19527: LD_INT 14
19529: PUSH
19530: LD_INT 53
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: IN
19537: IFFALSE 19558
// points := [ 40 , 10 , 20 ] ;
19539: LD_ADDR_VAR 0 9
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 10
19549: PUSH
19550: LD_INT 20
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19558: LD_VAR 0 6
19562: PPUSH
19563: CALL_OW 264
19567: PUSH
19568: LD_INT 9
19570: PUSH
19571: EMPTY
19572: LIST
19573: IN
19574: IFFALSE 19595
// points := [ 5 , 70 , 20 ] ;
19576: LD_ADDR_VAR 0 9
19580: PUSH
19581: LD_INT 5
19583: PUSH
19584: LD_INT 70
19586: PUSH
19587: LD_INT 20
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19595: LD_VAR 0 6
19599: PPUSH
19600: CALL_OW 264
19604: PUSH
19605: LD_INT 10
19607: PUSH
19608: EMPTY
19609: LIST
19610: IN
19611: IFFALSE 19632
// points := [ 35 , 110 , 70 ] ;
19613: LD_ADDR_VAR 0 9
19617: PUSH
19618: LD_INT 35
19620: PUSH
19621: LD_INT 110
19623: PUSH
19624: LD_INT 70
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19632: LD_VAR 0 6
19636: PPUSH
19637: CALL_OW 265
19641: PUSH
19642: LD_INT 25
19644: EQUAL
19645: IFFALSE 19666
// points := [ 80 , 65 , 100 ] ;
19647: LD_ADDR_VAR 0 9
19651: PUSH
19652: LD_INT 80
19654: PUSH
19655: LD_INT 65
19657: PUSH
19658: LD_INT 100
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19666: LD_VAR 0 6
19670: PPUSH
19671: CALL_OW 263
19675: PUSH
19676: LD_INT 1
19678: EQUAL
19679: IFFALSE 19714
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19681: LD_ADDR_VAR 0 10
19685: PUSH
19686: LD_VAR 0 10
19690: PUSH
19691: LD_VAR 0 6
19695: PPUSH
19696: CALL_OW 311
19700: PPUSH
19701: LD_INT 3
19703: PPUSH
19704: CALL_OW 259
19708: PUSH
19709: LD_INT 4
19711: MUL
19712: MUL
19713: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19714: LD_VAR 0 6
19718: PPUSH
19719: CALL_OW 263
19723: PUSH
19724: LD_INT 2
19726: EQUAL
19727: IFFALSE 19778
// begin j := IsControledBy ( i ) ;
19729: LD_ADDR_VAR 0 7
19733: PUSH
19734: LD_VAR 0 6
19738: PPUSH
19739: CALL_OW 312
19743: ST_TO_ADDR
// if j then
19744: LD_VAR 0 7
19748: IFFALSE 19778
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19750: LD_ADDR_VAR 0 10
19754: PUSH
19755: LD_VAR 0 10
19759: PUSH
19760: LD_VAR 0 7
19764: PPUSH
19765: LD_INT 3
19767: PPUSH
19768: CALL_OW 259
19772: PUSH
19773: LD_INT 3
19775: MUL
19776: MUL
19777: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19778: LD_VAR 0 6
19782: PPUSH
19783: CALL_OW 264
19787: PUSH
19788: LD_INT 5
19790: PUSH
19791: LD_INT 6
19793: PUSH
19794: LD_INT 46
19796: PUSH
19797: LD_INT 44
19799: PUSH
19800: LD_INT 47
19802: PUSH
19803: LD_INT 45
19805: PUSH
19806: LD_INT 28
19808: PUSH
19809: LD_INT 7
19811: PUSH
19812: LD_INT 27
19814: PUSH
19815: LD_INT 29
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: IN
19830: PUSH
19831: LD_VAR 0 1
19835: PPUSH
19836: LD_INT 52
19838: PPUSH
19839: CALL_OW 321
19843: PUSH
19844: LD_INT 2
19846: EQUAL
19847: AND
19848: IFFALSE 19865
// bpoints := bpoints * 1.2 ;
19850: LD_ADDR_VAR 0 10
19854: PUSH
19855: LD_VAR 0 10
19859: PUSH
19860: LD_REAL  1.20000000000000E+0000
19863: MUL
19864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19865: LD_VAR 0 6
19869: PPUSH
19870: CALL_OW 264
19874: PUSH
19875: LD_INT 6
19877: PUSH
19878: LD_INT 46
19880: PUSH
19881: LD_INT 47
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: IN
19889: IFFALSE 19906
// bpoints := bpoints * 1.2 ;
19891: LD_ADDR_VAR 0 10
19895: PUSH
19896: LD_VAR 0 10
19900: PUSH
19901: LD_REAL  1.20000000000000E+0000
19904: MUL
19905: ST_TO_ADDR
// end ; unit_building :
19906: GO 19920
19908: LD_INT 3
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 19919
19916: POP
// ; end ;
19917: GO 19920
19919: POP
// for j = 1 to 3 do
19920: LD_ADDR_VAR 0 7
19924: PUSH
19925: DOUBLE
19926: LD_INT 1
19928: DEC
19929: ST_TO_ADDR
19930: LD_INT 3
19932: PUSH
19933: FOR_TO
19934: IFFALSE 19987
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19936: LD_ADDR_VAR 0 5
19940: PUSH
19941: LD_VAR 0 5
19945: PPUSH
19946: LD_VAR 0 7
19950: PPUSH
19951: LD_VAR 0 5
19955: PUSH
19956: LD_VAR 0 7
19960: ARRAY
19961: PUSH
19962: LD_VAR 0 9
19966: PUSH
19967: LD_VAR 0 7
19971: ARRAY
19972: PUSH
19973: LD_VAR 0 10
19977: MUL
19978: PLUS
19979: PPUSH
19980: CALL_OW 1
19984: ST_TO_ADDR
19985: GO 19933
19987: POP
19988: POP
// end ;
19989: GO 18472
19991: POP
19992: POP
// result := Replace ( result , 4 , tmp ) ;
19993: LD_ADDR_VAR 0 5
19997: PUSH
19998: LD_VAR 0 5
20002: PPUSH
20003: LD_INT 4
20005: PPUSH
20006: LD_VAR 0 8
20010: PPUSH
20011: CALL_OW 1
20015: ST_TO_ADDR
// end ;
20016: LD_VAR 0 5
20020: RET
// export function DangerAtRange ( unit , range ) ; begin
20021: LD_INT 0
20023: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20024: LD_ADDR_VAR 0 3
20028: PUSH
20029: LD_VAR 0 1
20033: PPUSH
20034: CALL_OW 255
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 250
20048: PPUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 251
20058: PPUSH
20059: LD_VAR 0 2
20063: PPUSH
20064: CALL 18324 0 4
20068: ST_TO_ADDR
// end ;
20069: LD_VAR 0 3
20073: RET
// export function DangerInArea ( side , area ) ; begin
20074: LD_INT 0
20076: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20077: LD_ADDR_VAR 0 3
20081: PUSH
20082: LD_VAR 0 2
20086: PPUSH
20087: LD_INT 81
20089: PUSH
20090: LD_VAR 0 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PPUSH
20099: CALL_OW 70
20103: ST_TO_ADDR
// end ;
20104: LD_VAR 0 3
20108: RET
// export function IsExtension ( b ) ; begin
20109: LD_INT 0
20111: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 20
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_INT 17
20133: PUSH
20134: LD_INT 24
20136: PUSH
20137: LD_INT 21
20139: PUSH
20140: LD_INT 19
20142: PUSH
20143: LD_INT 16
20145: PUSH
20146: LD_INT 25
20148: PUSH
20149: LD_INT 18
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: IN
20164: ST_TO_ADDR
// end ;
20165: LD_VAR 0 2
20169: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20170: LD_INT 0
20172: PPUSH
20173: PPUSH
20174: PPUSH
// result := [ ] ;
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: EMPTY
20181: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20182: LD_ADDR_VAR 0 4
20186: PUSH
20187: LD_VAR 0 2
20191: PPUSH
20192: LD_INT 21
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 70
20206: ST_TO_ADDR
// if not tmp then
20207: LD_VAR 0 4
20211: NOT
20212: IFFALSE 20216
// exit ;
20214: GO 20274
// for i in tmp do
20216: LD_ADDR_VAR 0 5
20220: PUSH
20221: LD_VAR 0 4
20225: PUSH
20226: FOR_IN
20227: IFFALSE 20262
// if GetBase ( i ) <> base then
20229: LD_VAR 0 5
20233: PPUSH
20234: CALL_OW 274
20238: PUSH
20239: LD_VAR 0 1
20243: NONEQUAL
20244: IFFALSE 20260
// ComLinkToBase ( base , i ) ;
20246: LD_VAR 0 1
20250: PPUSH
20251: LD_VAR 0 5
20255: PPUSH
20256: CALL_OW 169
20260: GO 20226
20262: POP
20263: POP
// result := tmp ;
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: LD_VAR 0 4
20273: ST_TO_ADDR
// end ;
20274: LD_VAR 0 3
20278: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20279: LD_INT 0
20281: PPUSH
20282: PPUSH
// if BuildingStatus ( b ) = bs_build then
20283: LD_VAR 0 2
20287: PPUSH
20288: CALL_OW 461
20292: PUSH
20293: LD_INT 1
20295: EQUAL
20296: IFFALSE 20356
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20298: LD_VAR 0 1
20302: PPUSH
20303: LD_STRING h
20305: PUSH
20306: LD_VAR 0 2
20310: PPUSH
20311: CALL_OW 250
20315: PUSH
20316: LD_VAR 0 2
20320: PPUSH
20321: CALL_OW 251
20325: PUSH
20326: LD_VAR 0 2
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: PPUSH
20352: CALL_OW 446
// end ;
20356: LD_VAR 0 3
20360: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
20368: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20369: LD_VAR 0 1
20373: NOT
20374: PUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: CALL_OW 263
20384: PUSH
20385: LD_INT 2
20387: EQUAL
20388: NOT
20389: OR
20390: IFFALSE 20394
// exit ;
20392: GO 20710
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20394: LD_ADDR_VAR 0 6
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 255
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 36
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 34
20431: PUSH
20432: LD_INT 31
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 69
20452: ST_TO_ADDR
// if not tmp then
20453: LD_VAR 0 6
20457: NOT
20458: IFFALSE 20462
// exit ;
20460: GO 20710
// result := [ ] ;
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: EMPTY
20468: ST_TO_ADDR
// for i in tmp do
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_VAR 0 6
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20551
// begin t := UnitsInside ( i ) ;
20482: LD_ADDR_VAR 0 4
20486: PUSH
20487: LD_VAR 0 3
20491: PPUSH
20492: CALL_OW 313
20496: ST_TO_ADDR
// if t then
20497: LD_VAR 0 4
20501: IFFALSE 20549
// for j in t do
20503: LD_ADDR_VAR 0 7
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: FOR_IN
20514: IFFALSE 20547
// result := Insert ( result , result + 1 , j ) ;
20516: LD_ADDR_VAR 0 2
20520: PUSH
20521: LD_VAR 0 2
20525: PPUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 1
20533: PLUS
20534: PPUSH
20535: LD_VAR 0 7
20539: PPUSH
20540: CALL_OW 2
20544: ST_TO_ADDR
20545: GO 20513
20547: POP
20548: POP
// end ;
20549: GO 20479
20551: POP
20552: POP
// if not result then
20553: LD_VAR 0 2
20557: NOT
20558: IFFALSE 20562
// exit ;
20560: GO 20710
// mech := result [ 1 ] ;
20562: LD_ADDR_VAR 0 5
20566: PUSH
20567: LD_VAR 0 2
20571: PUSH
20572: LD_INT 1
20574: ARRAY
20575: ST_TO_ADDR
// if result > 1 then
20576: LD_VAR 0 2
20580: PUSH
20581: LD_INT 1
20583: GREATER
20584: IFFALSE 20696
// for i = 2 to result do
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: DOUBLE
20592: LD_INT 2
20594: DEC
20595: ST_TO_ADDR
20596: LD_VAR 0 2
20600: PUSH
20601: FOR_TO
20602: IFFALSE 20694
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20604: LD_ADDR_VAR 0 4
20608: PUSH
20609: LD_VAR 0 2
20613: PUSH
20614: LD_VAR 0 3
20618: ARRAY
20619: PPUSH
20620: LD_INT 3
20622: PPUSH
20623: CALL_OW 259
20627: PUSH
20628: LD_VAR 0 2
20632: PUSH
20633: LD_VAR 0 3
20637: ARRAY
20638: PPUSH
20639: CALL_OW 432
20643: MINUS
20644: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20645: LD_VAR 0 4
20649: PUSH
20650: LD_VAR 0 5
20654: PPUSH
20655: LD_INT 3
20657: PPUSH
20658: CALL_OW 259
20662: PUSH
20663: LD_VAR 0 5
20667: PPUSH
20668: CALL_OW 432
20672: MINUS
20673: GREATEREQUAL
20674: IFFALSE 20692
// mech := result [ i ] ;
20676: LD_ADDR_VAR 0 5
20680: PUSH
20681: LD_VAR 0 2
20685: PUSH
20686: LD_VAR 0 3
20690: ARRAY
20691: ST_TO_ADDR
// end ;
20692: GO 20601
20694: POP
20695: POP
// ComLinkTo ( vehicle , mech ) ;
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_VAR 0 5
20705: PPUSH
20706: CALL_OW 135
// end ;
20710: LD_VAR 0 2
20714: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20715: LD_INT 0
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
20721: PPUSH
20722: PPUSH
20723: PPUSH
20724: PPUSH
20725: PPUSH
20726: PPUSH
20727: PPUSH
20728: PPUSH
20729: PPUSH
// result := [ ] ;
20730: LD_ADDR_VAR 0 7
20734: PUSH
20735: EMPTY
20736: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 266
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: IN
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 22393
// if name then
20762: LD_VAR 0 3
20766: IFFALSE 20782
// SetBName ( base_dep , name ) ;
20768: LD_VAR 0 1
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL_OW 500
// base := GetBase ( base_dep ) ;
20782: LD_ADDR_VAR 0 15
20786: PUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 274
20796: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20797: LD_ADDR_VAR 0 16
20801: PUSH
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL_OW 255
20811: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20812: LD_ADDR_VAR 0 17
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 248
20826: ST_TO_ADDR
// if sources then
20827: LD_VAR 0 5
20831: IFFALSE 20878
// for i = 1 to 3 do
20833: LD_ADDR_VAR 0 8
20837: PUSH
20838: DOUBLE
20839: LD_INT 1
20841: DEC
20842: ST_TO_ADDR
20843: LD_INT 3
20845: PUSH
20846: FOR_TO
20847: IFFALSE 20876
// AddResourceType ( base , i , sources [ i ] ) ;
20849: LD_VAR 0 15
20853: PPUSH
20854: LD_VAR 0 8
20858: PPUSH
20859: LD_VAR 0 5
20863: PUSH
20864: LD_VAR 0 8
20868: ARRAY
20869: PPUSH
20870: CALL_OW 276
20874: GO 20846
20876: POP
20877: POP
// buildings := GetBaseBuildings ( base , area ) ;
20878: LD_ADDR_VAR 0 18
20882: PUSH
20883: LD_VAR 0 15
20887: PPUSH
20888: LD_VAR 0 2
20892: PPUSH
20893: CALL 20170 0 2
20897: ST_TO_ADDR
// InitHc ;
20898: CALL_OW 19
// InitUc ;
20902: CALL_OW 18
// uc_side := side ;
20906: LD_ADDR_OWVAR 20
20910: PUSH
20911: LD_VAR 0 16
20915: ST_TO_ADDR
// uc_nation := nation ;
20916: LD_ADDR_OWVAR 21
20920: PUSH
20921: LD_VAR 0 17
20925: ST_TO_ADDR
// if buildings then
20926: LD_VAR 0 18
20930: IFFALSE 22252
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20932: LD_ADDR_VAR 0 19
20936: PUSH
20937: LD_VAR 0 18
20941: PPUSH
20942: LD_INT 2
20944: PUSH
20945: LD_INT 30
20947: PUSH
20948: LD_INT 29
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 30
20957: PUSH
20958: LD_INT 30
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: PPUSH
20970: CALL_OW 72
20974: ST_TO_ADDR
// if tmp then
20975: LD_VAR 0 19
20979: IFFALSE 21027
// for i in tmp do
20981: LD_ADDR_VAR 0 8
20985: PUSH
20986: LD_VAR 0 19
20990: PUSH
20991: FOR_IN
20992: IFFALSE 21025
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20994: LD_VAR 0 8
20998: PPUSH
20999: CALL_OW 250
21003: PPUSH
21004: LD_VAR 0 8
21008: PPUSH
21009: CALL_OW 251
21013: PPUSH
21014: LD_VAR 0 16
21018: PPUSH
21019: CALL_OW 441
21023: GO 20991
21025: POP
21026: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21027: LD_VAR 0 18
21031: PPUSH
21032: LD_INT 2
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_INT 32
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: LD_INT 33
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 72
21064: IFFALSE 21152
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21066: LD_ADDR_VAR 0 8
21070: PUSH
21071: LD_VAR 0 18
21075: PPUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 30
21081: PUSH
21082: LD_INT 32
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 30
21091: PUSH
21092: LD_INT 33
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 72
21108: PUSH
21109: FOR_IN
21110: IFFALSE 21150
// begin if not GetBWeapon ( i ) then
21112: LD_VAR 0 8
21116: PPUSH
21117: CALL_OW 269
21121: NOT
21122: IFFALSE 21148
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21124: LD_VAR 0 8
21128: PPUSH
21129: LD_VAR 0 8
21133: PPUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL 22398 0 2
21143: PPUSH
21144: CALL_OW 431
// end ;
21148: GO 21109
21150: POP
21151: POP
// end ; for i = 1 to personel do
21152: LD_ADDR_VAR 0 8
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_VAR 0 6
21166: PUSH
21167: FOR_TO
21168: IFFALSE 22232
// begin if i > 4 then
21170: LD_VAR 0 8
21174: PUSH
21175: LD_INT 4
21177: GREATER
21178: IFFALSE 21182
// break ;
21180: GO 22232
// case i of 1 :
21182: LD_VAR 0 8
21186: PUSH
21187: LD_INT 1
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21275
21195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21196: LD_ADDR_VAR 0 12
21200: PUSH
21201: LD_VAR 0 18
21205: PPUSH
21206: LD_INT 22
21208: PUSH
21209: LD_VAR 0 16
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 58
21220: PUSH
21221: EMPTY
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: LD_INT 30
21229: PUSH
21230: LD_INT 32
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 30
21239: PUSH
21240: LD_INT 4
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 30
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 72
21272: ST_TO_ADDR
21273: GO 21497
21275: LD_INT 2
21277: DOUBLE
21278: EQUAL
21279: IFTRUE 21283
21281: GO 21345
21283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21284: LD_ADDR_VAR 0 12
21288: PUSH
21289: LD_VAR 0 18
21293: PPUSH
21294: LD_INT 22
21296: PUSH
21297: LD_VAR 0 16
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: LD_INT 30
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 72
21342: ST_TO_ADDR
21343: GO 21497
21345: LD_INT 3
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21415
21353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21354: LD_ADDR_VAR 0 12
21358: PUSH
21359: LD_VAR 0 18
21363: PPUSH
21364: LD_INT 22
21366: PUSH
21367: LD_VAR 0 16
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 30
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 30
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PPUSH
21408: CALL_OW 72
21412: ST_TO_ADDR
21413: GO 21497
21415: LD_INT 4
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21496
21423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21424: LD_ADDR_VAR 0 12
21428: PUSH
21429: LD_VAR 0 18
21433: PPUSH
21434: LD_INT 22
21436: PUSH
21437: LD_VAR 0 16
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 6
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 30
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: LD_INT 8
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PPUSH
21489: CALL_OW 72
21493: ST_TO_ADDR
21494: GO 21497
21496: POP
// if i = 1 then
21497: LD_VAR 0 8
21501: PUSH
21502: LD_INT 1
21504: EQUAL
21505: IFFALSE 21616
// begin tmp := [ ] ;
21507: LD_ADDR_VAR 0 19
21511: PUSH
21512: EMPTY
21513: ST_TO_ADDR
// for j in f do
21514: LD_ADDR_VAR 0 9
21518: PUSH
21519: LD_VAR 0 12
21523: PUSH
21524: FOR_IN
21525: IFFALSE 21598
// if GetBType ( j ) = b_bunker then
21527: LD_VAR 0 9
21531: PPUSH
21532: CALL_OW 266
21536: PUSH
21537: LD_INT 32
21539: EQUAL
21540: IFFALSE 21567
// tmp := Insert ( tmp , 1 , j ) else
21542: LD_ADDR_VAR 0 19
21546: PUSH
21547: LD_VAR 0 19
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: LD_VAR 0 9
21559: PPUSH
21560: CALL_OW 2
21564: ST_TO_ADDR
21565: GO 21596
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21567: LD_ADDR_VAR 0 19
21571: PUSH
21572: LD_VAR 0 19
21576: PPUSH
21577: LD_VAR 0 19
21581: PUSH
21582: LD_INT 1
21584: PLUS
21585: PPUSH
21586: LD_VAR 0 9
21590: PPUSH
21591: CALL_OW 2
21595: ST_TO_ADDR
21596: GO 21524
21598: POP
21599: POP
// if tmp then
21600: LD_VAR 0 19
21604: IFFALSE 21616
// f := tmp ;
21606: LD_ADDR_VAR 0 12
21610: PUSH
21611: LD_VAR 0 19
21615: ST_TO_ADDR
// end ; x := personel [ i ] ;
21616: LD_ADDR_VAR 0 13
21620: PUSH
21621: LD_VAR 0 6
21625: PUSH
21626: LD_VAR 0 8
21630: ARRAY
21631: ST_TO_ADDR
// if x = - 1 then
21632: LD_VAR 0 13
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: EQUAL
21641: IFFALSE 21850
// begin for j in f do
21643: LD_ADDR_VAR 0 9
21647: PUSH
21648: LD_VAR 0 12
21652: PUSH
21653: FOR_IN
21654: IFFALSE 21846
// repeat InitHc ;
21656: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21660: LD_VAR 0 9
21664: PPUSH
21665: CALL_OW 266
21669: PUSH
21670: LD_INT 5
21672: EQUAL
21673: IFFALSE 21743
// begin if UnitsInside ( j ) < 3 then
21675: LD_VAR 0 9
21679: PPUSH
21680: CALL_OW 313
21684: PUSH
21685: LD_INT 3
21687: LESS
21688: IFFALSE 21724
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21690: LD_INT 0
21692: PPUSH
21693: LD_INT 5
21695: PUSH
21696: LD_INT 8
21698: PUSH
21699: LD_INT 9
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: LD_VAR 0 17
21711: ARRAY
21712: PPUSH
21713: LD_VAR 0 4
21717: PPUSH
21718: CALL_OW 380
21722: GO 21741
// PrepareHuman ( false , i , skill ) ;
21724: LD_INT 0
21726: PPUSH
21727: LD_VAR 0 8
21731: PPUSH
21732: LD_VAR 0 4
21736: PPUSH
21737: CALL_OW 380
// end else
21741: GO 21760
// PrepareHuman ( false , i , skill ) ;
21743: LD_INT 0
21745: PPUSH
21746: LD_VAR 0 8
21750: PPUSH
21751: LD_VAR 0 4
21755: PPUSH
21756: CALL_OW 380
// un := CreateHuman ;
21760: LD_ADDR_VAR 0 14
21764: PUSH
21765: CALL_OW 44
21769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21770: LD_ADDR_VAR 0 7
21774: PUSH
21775: LD_VAR 0 7
21779: PPUSH
21780: LD_INT 1
21782: PPUSH
21783: LD_VAR 0 14
21787: PPUSH
21788: CALL_OW 2
21792: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21793: LD_VAR 0 14
21797: PPUSH
21798: LD_VAR 0 9
21802: PPUSH
21803: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21807: LD_VAR 0 9
21811: PPUSH
21812: CALL_OW 313
21816: PUSH
21817: LD_INT 6
21819: EQUAL
21820: PUSH
21821: LD_VAR 0 9
21825: PPUSH
21826: CALL_OW 266
21830: PUSH
21831: LD_INT 32
21833: PUSH
21834: LD_INT 31
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: IN
21841: OR
21842: IFFALSE 21656
21844: GO 21653
21846: POP
21847: POP
// end else
21848: GO 22230
// for j = 1 to x do
21850: LD_ADDR_VAR 0 9
21854: PUSH
21855: DOUBLE
21856: LD_INT 1
21858: DEC
21859: ST_TO_ADDR
21860: LD_VAR 0 13
21864: PUSH
21865: FOR_TO
21866: IFFALSE 22228
// begin InitHc ;
21868: CALL_OW 19
// if not f then
21872: LD_VAR 0 12
21876: NOT
21877: IFFALSE 21966
// begin PrepareHuman ( false , i , skill ) ;
21879: LD_INT 0
21881: PPUSH
21882: LD_VAR 0 8
21886: PPUSH
21887: LD_VAR 0 4
21891: PPUSH
21892: CALL_OW 380
// un := CreateHuman ;
21896: LD_ADDR_VAR 0 14
21900: PUSH
21901: CALL_OW 44
21905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21906: LD_ADDR_VAR 0 7
21910: PUSH
21911: LD_VAR 0 7
21915: PPUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_VAR 0 14
21923: PPUSH
21924: CALL_OW 2
21928: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21929: LD_VAR 0 14
21933: PPUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: CALL_OW 250
21943: PPUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 251
21953: PPUSH
21954: LD_INT 10
21956: PPUSH
21957: LD_INT 0
21959: PPUSH
21960: CALL_OW 50
// continue ;
21964: GO 21865
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21966: LD_VAR 0 12
21970: PUSH
21971: LD_INT 1
21973: ARRAY
21974: PPUSH
21975: CALL_OW 313
21979: PUSH
21980: LD_VAR 0 12
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PPUSH
21989: CALL_OW 266
21993: PUSH
21994: LD_INT 32
21996: PUSH
21997: LD_INT 31
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: IN
22004: AND
22005: PUSH
22006: LD_VAR 0 12
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PPUSH
22015: CALL_OW 313
22019: PUSH
22020: LD_INT 6
22022: EQUAL
22023: OR
22024: IFFALSE 22044
// f := Delete ( f , 1 ) ;
22026: LD_ADDR_VAR 0 12
22030: PUSH
22031: LD_VAR 0 12
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: CALL_OW 3
22043: ST_TO_ADDR
// if not f then
22044: LD_VAR 0 12
22048: NOT
22049: IFFALSE 22067
// begin x := x + 2 ;
22051: LD_ADDR_VAR 0 13
22055: PUSH
22056: LD_VAR 0 13
22060: PUSH
22061: LD_INT 2
22063: PLUS
22064: ST_TO_ADDR
// continue ;
22065: GO 21865
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22067: LD_VAR 0 12
22071: PUSH
22072: LD_INT 1
22074: ARRAY
22075: PPUSH
22076: CALL_OW 266
22080: PUSH
22081: LD_INT 5
22083: EQUAL
22084: IFFALSE 22158
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22086: LD_VAR 0 12
22090: PUSH
22091: LD_INT 1
22093: ARRAY
22094: PPUSH
22095: CALL_OW 313
22099: PUSH
22100: LD_INT 3
22102: LESS
22103: IFFALSE 22139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22105: LD_INT 0
22107: PPUSH
22108: LD_INT 5
22110: PUSH
22111: LD_INT 8
22113: PUSH
22114: LD_INT 9
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: LD_VAR 0 17
22126: ARRAY
22127: PPUSH
22128: LD_VAR 0 4
22132: PPUSH
22133: CALL_OW 380
22137: GO 22156
// PrepareHuman ( false , i , skill ) ;
22139: LD_INT 0
22141: PPUSH
22142: LD_VAR 0 8
22146: PPUSH
22147: LD_VAR 0 4
22151: PPUSH
22152: CALL_OW 380
// end else
22156: GO 22175
// PrepareHuman ( false , i , skill ) ;
22158: LD_INT 0
22160: PPUSH
22161: LD_VAR 0 8
22165: PPUSH
22166: LD_VAR 0 4
22170: PPUSH
22171: CALL_OW 380
// un := CreateHuman ;
22175: LD_ADDR_VAR 0 14
22179: PUSH
22180: CALL_OW 44
22184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22185: LD_ADDR_VAR 0 7
22189: PUSH
22190: LD_VAR 0 7
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: LD_VAR 0 14
22202: PPUSH
22203: CALL_OW 2
22207: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22208: LD_VAR 0 14
22212: PPUSH
22213: LD_VAR 0 12
22217: PUSH
22218: LD_INT 1
22220: ARRAY
22221: PPUSH
22222: CALL_OW 52
// end ;
22226: GO 21865
22228: POP
22229: POP
// end ;
22230: GO 21167
22232: POP
22233: POP
// result := result ^ buildings ;
22234: LD_ADDR_VAR 0 7
22238: PUSH
22239: LD_VAR 0 7
22243: PUSH
22244: LD_VAR 0 18
22248: ADD
22249: ST_TO_ADDR
// end else
22250: GO 22393
// begin for i = 1 to personel do
22252: LD_ADDR_VAR 0 8
22256: PUSH
22257: DOUBLE
22258: LD_INT 1
22260: DEC
22261: ST_TO_ADDR
22262: LD_VAR 0 6
22266: PUSH
22267: FOR_TO
22268: IFFALSE 22391
// begin if i > 4 then
22270: LD_VAR 0 8
22274: PUSH
22275: LD_INT 4
22277: GREATER
22278: IFFALSE 22282
// break ;
22280: GO 22391
// x := personel [ i ] ;
22282: LD_ADDR_VAR 0 13
22286: PUSH
22287: LD_VAR 0 6
22291: PUSH
22292: LD_VAR 0 8
22296: ARRAY
22297: ST_TO_ADDR
// if x = - 1 then
22298: LD_VAR 0 13
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: EQUAL
22307: IFFALSE 22311
// continue ;
22309: GO 22267
// PrepareHuman ( false , i , skill ) ;
22311: LD_INT 0
22313: PPUSH
22314: LD_VAR 0 8
22318: PPUSH
22319: LD_VAR 0 4
22323: PPUSH
22324: CALL_OW 380
// un := CreateHuman ;
22328: LD_ADDR_VAR 0 14
22332: PUSH
22333: CALL_OW 44
22337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22338: LD_VAR 0 14
22342: PPUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 250
22352: PPUSH
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 251
22362: PPUSH
22363: LD_INT 10
22365: PPUSH
22366: LD_INT 0
22368: PPUSH
22369: CALL_OW 50
// result := result ^ un ;
22373: LD_ADDR_VAR 0 7
22377: PUSH
22378: LD_VAR 0 7
22382: PUSH
22383: LD_VAR 0 14
22387: ADD
22388: ST_TO_ADDR
// end ;
22389: GO 22267
22391: POP
22392: POP
// end ; end ;
22393: LD_VAR 0 7
22397: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22398: LD_INT 0
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
22411: PPUSH
22412: PPUSH
22413: PPUSH
22414: PPUSH
22415: PPUSH
// result := false ;
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_INT 0
22423: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22424: LD_VAR 0 1
22428: NOT
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 266
22439: PUSH
22440: LD_INT 32
22442: PUSH
22443: LD_INT 33
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: IN
22450: NOT
22451: OR
22452: IFFALSE 22456
// exit ;
22454: GO 23592
// nat := GetNation ( tower ) ;
22456: LD_ADDR_VAR 0 12
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 248
22470: ST_TO_ADDR
// side := GetSide ( tower ) ;
22471: LD_ADDR_VAR 0 16
22475: PUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 255
22485: ST_TO_ADDR
// x := GetX ( tower ) ;
22486: LD_ADDR_VAR 0 10
22490: PUSH
22491: LD_VAR 0 1
22495: PPUSH
22496: CALL_OW 250
22500: ST_TO_ADDR
// y := GetY ( tower ) ;
22501: LD_ADDR_VAR 0 11
22505: PUSH
22506: LD_VAR 0 1
22510: PPUSH
22511: CALL_OW 251
22515: ST_TO_ADDR
// if not x or not y then
22516: LD_VAR 0 10
22520: NOT
22521: PUSH
22522: LD_VAR 0 11
22526: NOT
22527: OR
22528: IFFALSE 22532
// exit ;
22530: GO 23592
// weapon := 0 ;
22532: LD_ADDR_VAR 0 18
22536: PUSH
22537: LD_INT 0
22539: ST_TO_ADDR
// fac_list := [ ] ;
22540: LD_ADDR_VAR 0 17
22544: PUSH
22545: EMPTY
22546: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22547: LD_ADDR_VAR 0 6
22551: PUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 274
22561: PPUSH
22562: LD_VAR 0 2
22566: PPUSH
22567: CALL 20170 0 2
22571: PPUSH
22572: LD_INT 30
22574: PUSH
22575: LD_INT 3
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PPUSH
22582: CALL_OW 72
22586: ST_TO_ADDR
// if not factories then
22587: LD_VAR 0 6
22591: NOT
22592: IFFALSE 22596
// exit ;
22594: GO 23592
// for i in factories do
22596: LD_ADDR_VAR 0 8
22600: PUSH
22601: LD_VAR 0 6
22605: PUSH
22606: FOR_IN
22607: IFFALSE 22632
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22609: LD_ADDR_VAR 0 17
22613: PUSH
22614: LD_VAR 0 17
22618: PUSH
22619: LD_VAR 0 8
22623: PPUSH
22624: CALL_OW 478
22628: UNION
22629: ST_TO_ADDR
22630: GO 22606
22632: POP
22633: POP
// if not fac_list then
22634: LD_VAR 0 17
22638: NOT
22639: IFFALSE 22643
// exit ;
22641: GO 23592
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22643: LD_ADDR_VAR 0 5
22647: PUSH
22648: LD_INT 4
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 9
22656: PUSH
22657: LD_INT 10
22659: PUSH
22660: LD_INT 6
22662: PUSH
22663: LD_INT 7
22665: PUSH
22666: LD_INT 11
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 27
22680: PUSH
22681: LD_INT 28
22683: PUSH
22684: LD_INT 26
22686: PUSH
22687: LD_INT 30
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 43
22698: PUSH
22699: LD_INT 44
22701: PUSH
22702: LD_INT 46
22704: PUSH
22705: LD_INT 45
22707: PUSH
22708: LD_INT 47
22710: PUSH
22711: LD_INT 49
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_VAR 0 12
22731: ARRAY
22732: ST_TO_ADDR
// for i in list do
22733: LD_ADDR_VAR 0 8
22737: PUSH
22738: LD_VAR 0 5
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22777
// if not i in fac_list then
22746: LD_VAR 0 8
22750: PUSH
22751: LD_VAR 0 17
22755: IN
22756: NOT
22757: IFFALSE 22775
// list := list diff i ;
22759: LD_ADDR_VAR 0 5
22763: PUSH
22764: LD_VAR 0 5
22768: PUSH
22769: LD_VAR 0 8
22773: DIFF
22774: ST_TO_ADDR
22775: GO 22743
22777: POP
22778: POP
// if not list then
22779: LD_VAR 0 5
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 23592
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22788: LD_VAR 0 12
22792: PUSH
22793: LD_INT 3
22795: EQUAL
22796: PUSH
22797: LD_INT 49
22799: PUSH
22800: LD_VAR 0 5
22804: IN
22805: AND
22806: PUSH
22807: LD_INT 31
22809: PPUSH
22810: LD_VAR 0 16
22814: PPUSH
22815: CALL_OW 321
22819: PUSH
22820: LD_INT 2
22822: EQUAL
22823: AND
22824: IFFALSE 22884
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22826: LD_INT 22
22828: PUSH
22829: LD_VAR 0 16
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 35
22840: PUSH
22841: LD_INT 49
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 91
22850: PUSH
22851: LD_VAR 0 1
22855: PUSH
22856: LD_INT 10
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: PPUSH
22869: CALL_OW 69
22873: NOT
22874: IFFALSE 22884
// weapon := ru_time_lapser ;
22876: LD_ADDR_VAR 0 18
22880: PUSH
22881: LD_INT 49
22883: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22884: LD_VAR 0 12
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: IN
22899: PUSH
22900: LD_INT 11
22902: PUSH
22903: LD_VAR 0 5
22907: IN
22908: PUSH
22909: LD_INT 30
22911: PUSH
22912: LD_VAR 0 5
22916: IN
22917: OR
22918: AND
22919: PUSH
22920: LD_INT 6
22922: PPUSH
22923: LD_VAR 0 16
22927: PPUSH
22928: CALL_OW 321
22932: PUSH
22933: LD_INT 2
22935: EQUAL
22936: AND
22937: IFFALSE 23102
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22939: LD_INT 22
22941: PUSH
22942: LD_VAR 0 16
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 35
22956: PUSH
22957: LD_INT 11
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 35
22966: PUSH
22967: LD_INT 30
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 91
22981: PUSH
22982: LD_VAR 0 1
22986: PUSH
22987: LD_INT 18
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: PPUSH
23000: CALL_OW 69
23004: NOT
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_VAR 0 16
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: LD_INT 30
23023: PUSH
23024: LD_INT 32
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 33
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 91
23048: PUSH
23049: LD_VAR 0 1
23053: PUSH
23054: LD_INT 12
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: PPUSH
23070: CALL_OW 69
23074: PUSH
23075: LD_INT 2
23077: GREATER
23078: AND
23079: IFFALSE 23102
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23081: LD_ADDR_VAR 0 18
23085: PUSH
23086: LD_INT 11
23088: PUSH
23089: LD_INT 30
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_VAR 0 12
23100: ARRAY
23101: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23102: LD_VAR 0 18
23106: NOT
23107: PUSH
23108: LD_INT 40
23110: PPUSH
23111: LD_VAR 0 16
23115: PPUSH
23116: CALL_OW 321
23120: PUSH
23121: LD_INT 2
23123: EQUAL
23124: AND
23125: PUSH
23126: LD_INT 7
23128: PUSH
23129: LD_VAR 0 5
23133: IN
23134: PUSH
23135: LD_INT 28
23137: PUSH
23138: LD_VAR 0 5
23142: IN
23143: OR
23144: PUSH
23145: LD_INT 45
23147: PUSH
23148: LD_VAR 0 5
23152: IN
23153: OR
23154: AND
23155: IFFALSE 23409
// begin hex := GetHexInfo ( x , y ) ;
23157: LD_ADDR_VAR 0 4
23161: PUSH
23162: LD_VAR 0 10
23166: PPUSH
23167: LD_VAR 0 11
23171: PPUSH
23172: CALL_OW 546
23176: ST_TO_ADDR
// if hex [ 1 ] then
23177: LD_VAR 0 4
23181: PUSH
23182: LD_INT 1
23184: ARRAY
23185: IFFALSE 23189
// exit ;
23187: GO 23592
// height := hex [ 2 ] ;
23189: LD_ADDR_VAR 0 15
23193: PUSH
23194: LD_VAR 0 4
23198: PUSH
23199: LD_INT 2
23201: ARRAY
23202: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23203: LD_ADDR_VAR 0 14
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: LD_INT 2
23213: PUSH
23214: LD_INT 3
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: ST_TO_ADDR
// for i in tmp do
23226: LD_ADDR_VAR 0 8
23230: PUSH
23231: LD_VAR 0 14
23235: PUSH
23236: FOR_IN
23237: IFFALSE 23407
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23239: LD_ADDR_VAR 0 9
23243: PUSH
23244: LD_VAR 0 10
23248: PPUSH
23249: LD_VAR 0 8
23253: PPUSH
23254: LD_INT 5
23256: PPUSH
23257: CALL_OW 272
23261: PUSH
23262: LD_VAR 0 11
23266: PPUSH
23267: LD_VAR 0 8
23271: PPUSH
23272: LD_INT 5
23274: PPUSH
23275: CALL_OW 273
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23284: LD_VAR 0 9
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 9
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 488
23306: IFFALSE 23405
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23308: LD_ADDR_VAR 0 4
23312: PUSH
23313: LD_VAR 0 9
23317: PUSH
23318: LD_INT 1
23320: ARRAY
23321: PPUSH
23322: LD_VAR 0 9
23326: PUSH
23327: LD_INT 2
23329: ARRAY
23330: PPUSH
23331: CALL_OW 546
23335: ST_TO_ADDR
// if hex [ 1 ] then
23336: LD_VAR 0 4
23340: PUSH
23341: LD_INT 1
23343: ARRAY
23344: IFFALSE 23348
// continue ;
23346: GO 23236
// h := hex [ 2 ] ;
23348: LD_ADDR_VAR 0 13
23352: PUSH
23353: LD_VAR 0 4
23357: PUSH
23358: LD_INT 2
23360: ARRAY
23361: ST_TO_ADDR
// if h + 7 < height then
23362: LD_VAR 0 13
23366: PUSH
23367: LD_INT 7
23369: PLUS
23370: PUSH
23371: LD_VAR 0 15
23375: LESS
23376: IFFALSE 23405
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23378: LD_ADDR_VAR 0 18
23382: PUSH
23383: LD_INT 7
23385: PUSH
23386: LD_INT 28
23388: PUSH
23389: LD_INT 45
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: LD_VAR 0 12
23401: ARRAY
23402: ST_TO_ADDR
// break ;
23403: GO 23407
// end ; end ; end ;
23405: GO 23236
23407: POP
23408: POP
// end ; if not weapon then
23409: LD_VAR 0 18
23413: NOT
23414: IFFALSE 23474
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: LD_VAR 0 5
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 49
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: DIFF
23440: ST_TO_ADDR
// if not list then
23441: LD_VAR 0 5
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23592
// weapon := list [ rand ( 1 , list ) ] ;
23450: LD_ADDR_VAR 0 18
23454: PUSH
23455: LD_VAR 0 5
23459: PUSH
23460: LD_INT 1
23462: PPUSH
23463: LD_VAR 0 5
23467: PPUSH
23468: CALL_OW 12
23472: ARRAY
23473: ST_TO_ADDR
// end ; if weapon then
23474: LD_VAR 0 18
23478: IFFALSE 23592
// begin tmp := CostOfWeapon ( weapon ) ;
23480: LD_ADDR_VAR 0 14
23484: PUSH
23485: LD_VAR 0 18
23489: PPUSH
23490: CALL_OW 451
23494: ST_TO_ADDR
// j := GetBase ( tower ) ;
23495: LD_ADDR_VAR 0 9
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 274
23509: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23510: LD_VAR 0 9
23514: PPUSH
23515: LD_INT 1
23517: PPUSH
23518: CALL_OW 275
23522: PUSH
23523: LD_VAR 0 14
23527: PUSH
23528: LD_INT 1
23530: ARRAY
23531: GREATEREQUAL
23532: PUSH
23533: LD_VAR 0 9
23537: PPUSH
23538: LD_INT 2
23540: PPUSH
23541: CALL_OW 275
23545: PUSH
23546: LD_VAR 0 14
23550: PUSH
23551: LD_INT 2
23553: ARRAY
23554: GREATEREQUAL
23555: AND
23556: PUSH
23557: LD_VAR 0 9
23561: PPUSH
23562: LD_INT 3
23564: PPUSH
23565: CALL_OW 275
23569: PUSH
23570: LD_VAR 0 14
23574: PUSH
23575: LD_INT 3
23577: ARRAY
23578: GREATEREQUAL
23579: AND
23580: IFFALSE 23592
// result := weapon ;
23582: LD_ADDR_VAR 0 3
23586: PUSH
23587: LD_VAR 0 18
23591: ST_TO_ADDR
// end ; end ;
23592: LD_VAR 0 3
23596: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23597: LD_INT 0
23599: PPUSH
23600: PPUSH
// result := true ;
23601: LD_ADDR_VAR 0 3
23605: PUSH
23606: LD_INT 1
23608: ST_TO_ADDR
// if array1 = array2 then
23609: LD_VAR 0 1
23613: PUSH
23614: LD_VAR 0 2
23618: EQUAL
23619: IFFALSE 23679
// begin for i = 1 to array1 do
23621: LD_ADDR_VAR 0 4
23625: PUSH
23626: DOUBLE
23627: LD_INT 1
23629: DEC
23630: ST_TO_ADDR
23631: LD_VAR 0 1
23635: PUSH
23636: FOR_TO
23637: IFFALSE 23675
// if array1 [ i ] <> array2 [ i ] then
23639: LD_VAR 0 1
23643: PUSH
23644: LD_VAR 0 4
23648: ARRAY
23649: PUSH
23650: LD_VAR 0 2
23654: PUSH
23655: LD_VAR 0 4
23659: ARRAY
23660: NONEQUAL
23661: IFFALSE 23673
// begin result := false ;
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// break ;
23671: GO 23675
// end ;
23673: GO 23636
23675: POP
23676: POP
// end else
23677: GO 23687
// result := false ;
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// end ;
23687: LD_VAR 0 3
23691: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23692: LD_INT 0
23694: PPUSH
23695: PPUSH
23696: PPUSH
// pom := GetBase ( fac ) ;
23697: LD_ADDR_VAR 0 5
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 274
23711: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23712: LD_ADDR_VAR 0 4
23716: PUSH
23717: LD_VAR 0 2
23721: PUSH
23722: LD_INT 1
23724: ARRAY
23725: PPUSH
23726: LD_VAR 0 2
23730: PUSH
23731: LD_INT 2
23733: ARRAY
23734: PPUSH
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 3
23742: ARRAY
23743: PPUSH
23744: LD_VAR 0 2
23748: PUSH
23749: LD_INT 4
23751: ARRAY
23752: PPUSH
23753: CALL_OW 449
23757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23758: LD_ADDR_VAR 0 3
23762: PUSH
23763: LD_VAR 0 5
23767: PPUSH
23768: LD_INT 1
23770: PPUSH
23771: CALL_OW 275
23775: PUSH
23776: LD_VAR 0 4
23780: PUSH
23781: LD_INT 1
23783: ARRAY
23784: GREATEREQUAL
23785: PUSH
23786: LD_VAR 0 5
23790: PPUSH
23791: LD_INT 2
23793: PPUSH
23794: CALL_OW 275
23798: PUSH
23799: LD_VAR 0 4
23803: PUSH
23804: LD_INT 2
23806: ARRAY
23807: GREATEREQUAL
23808: AND
23809: PUSH
23810: LD_VAR 0 5
23814: PPUSH
23815: LD_INT 3
23817: PPUSH
23818: CALL_OW 275
23822: PUSH
23823: LD_VAR 0 4
23827: PUSH
23828: LD_INT 3
23830: ARRAY
23831: GREATEREQUAL
23832: AND
23833: ST_TO_ADDR
// end ;
23834: LD_VAR 0 3
23838: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23839: LD_INT 0
23841: PPUSH
23842: PPUSH
23843: PPUSH
23844: PPUSH
// pom := GetBase ( building ) ;
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 274
23859: ST_TO_ADDR
// if not pom then
23860: LD_VAR 0 3
23864: NOT
23865: IFFALSE 23869
// exit ;
23867: GO 24039
// btype := GetBType ( building ) ;
23869: LD_ADDR_VAR 0 5
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 266
23883: ST_TO_ADDR
// if btype = b_armoury then
23884: LD_VAR 0 5
23888: PUSH
23889: LD_INT 4
23891: EQUAL
23892: IFFALSE 23902
// btype := b_barracks ;
23894: LD_ADDR_VAR 0 5
23898: PUSH
23899: LD_INT 5
23901: ST_TO_ADDR
// if btype = b_depot then
23902: LD_VAR 0 5
23906: PUSH
23907: LD_INT 0
23909: EQUAL
23910: IFFALSE 23920
// btype := b_warehouse ;
23912: LD_ADDR_VAR 0 5
23916: PUSH
23917: LD_INT 1
23919: ST_TO_ADDR
// if btype = b_workshop then
23920: LD_VAR 0 5
23924: PUSH
23925: LD_INT 2
23927: EQUAL
23928: IFFALSE 23938
// btype := b_factory ;
23930: LD_ADDR_VAR 0 5
23934: PUSH
23935: LD_INT 3
23937: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23938: LD_ADDR_VAR 0 4
23942: PUSH
23943: LD_VAR 0 5
23947: PPUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 248
23957: PPUSH
23958: CALL_OW 450
23962: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23963: LD_ADDR_VAR 0 2
23967: PUSH
23968: LD_VAR 0 3
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 275
23980: PUSH
23981: LD_VAR 0 4
23985: PUSH
23986: LD_INT 1
23988: ARRAY
23989: GREATEREQUAL
23990: PUSH
23991: LD_VAR 0 3
23995: PPUSH
23996: LD_INT 2
23998: PPUSH
23999: CALL_OW 275
24003: PUSH
24004: LD_VAR 0 4
24008: PUSH
24009: LD_INT 2
24011: ARRAY
24012: GREATEREQUAL
24013: AND
24014: PUSH
24015: LD_VAR 0 3
24019: PPUSH
24020: LD_INT 3
24022: PPUSH
24023: CALL_OW 275
24027: PUSH
24028: LD_VAR 0 4
24032: PUSH
24033: LD_INT 3
24035: ARRAY
24036: GREATEREQUAL
24037: AND
24038: ST_TO_ADDR
// end ;
24039: LD_VAR 0 2
24043: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24044: LD_INT 0
24046: PPUSH
24047: PPUSH
24048: PPUSH
// pom := GetBase ( building ) ;
24049: LD_ADDR_VAR 0 4
24053: PUSH
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 274
24063: ST_TO_ADDR
// if not pom then
24064: LD_VAR 0 4
24068: NOT
24069: IFFALSE 24073
// exit ;
24071: GO 24174
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24073: LD_ADDR_VAR 0 5
24077: PUSH
24078: LD_VAR 0 2
24082: PPUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 248
24092: PPUSH
24093: CALL_OW 450
24097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: LD_VAR 0 4
24107: PPUSH
24108: LD_INT 1
24110: PPUSH
24111: CALL_OW 275
24115: PUSH
24116: LD_VAR 0 5
24120: PUSH
24121: LD_INT 1
24123: ARRAY
24124: GREATEREQUAL
24125: PUSH
24126: LD_VAR 0 4
24130: PPUSH
24131: LD_INT 2
24133: PPUSH
24134: CALL_OW 275
24138: PUSH
24139: LD_VAR 0 5
24143: PUSH
24144: LD_INT 2
24146: ARRAY
24147: GREATEREQUAL
24148: AND
24149: PUSH
24150: LD_VAR 0 4
24154: PPUSH
24155: LD_INT 3
24157: PPUSH
24158: CALL_OW 275
24162: PUSH
24163: LD_VAR 0 5
24167: PUSH
24168: LD_INT 3
24170: ARRAY
24171: GREATEREQUAL
24172: AND
24173: ST_TO_ADDR
// end ;
24174: LD_VAR 0 3
24178: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24179: LD_INT 0
24181: PPUSH
24182: PPUSH
24183: PPUSH
24184: PPUSH
24185: PPUSH
24186: PPUSH
24187: PPUSH
24188: PPUSH
24189: PPUSH
24190: PPUSH
// result := false ;
24191: LD_ADDR_VAR 0 6
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// if not base or not btype or not x or not y then
24199: LD_VAR 0 1
24203: NOT
24204: PUSH
24205: LD_VAR 0 2
24209: NOT
24210: OR
24211: PUSH
24212: LD_VAR 0 3
24216: NOT
24217: OR
24218: PUSH
24219: LD_VAR 0 4
24223: NOT
24224: OR
24225: IFFALSE 24229
// exit ;
24227: GO 24838
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24229: LD_ADDR_VAR 0 12
24233: PUSH
24234: LD_VAR 0 2
24238: PPUSH
24239: LD_VAR 0 3
24243: PPUSH
24244: LD_VAR 0 4
24248: PPUSH
24249: LD_VAR 0 5
24253: PPUSH
24254: LD_VAR 0 1
24258: PUSH
24259: LD_INT 1
24261: ARRAY
24262: PPUSH
24263: CALL_OW 248
24267: PPUSH
24268: LD_INT 0
24270: PPUSH
24271: CALL 25675 0 6
24275: ST_TO_ADDR
// if not hexes then
24276: LD_VAR 0 12
24280: NOT
24281: IFFALSE 24285
// exit ;
24283: GO 24838
// for i = 1 to hexes do
24285: LD_ADDR_VAR 0 7
24289: PUSH
24290: DOUBLE
24291: LD_INT 1
24293: DEC
24294: ST_TO_ADDR
24295: LD_VAR 0 12
24299: PUSH
24300: FOR_TO
24301: IFFALSE 24836
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24303: LD_ADDR_VAR 0 11
24307: PUSH
24308: LD_VAR 0 12
24312: PUSH
24313: LD_VAR 0 7
24317: ARRAY
24318: PUSH
24319: LD_INT 1
24321: ARRAY
24322: PPUSH
24323: LD_VAR 0 12
24327: PUSH
24328: LD_VAR 0 7
24332: ARRAY
24333: PUSH
24334: LD_INT 2
24336: ARRAY
24337: PPUSH
24338: CALL_OW 428
24342: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24343: LD_VAR 0 12
24347: PUSH
24348: LD_VAR 0 7
24352: ARRAY
24353: PUSH
24354: LD_INT 1
24356: ARRAY
24357: PPUSH
24358: LD_VAR 0 12
24362: PUSH
24363: LD_VAR 0 7
24367: ARRAY
24368: PUSH
24369: LD_INT 2
24371: ARRAY
24372: PPUSH
24373: CALL_OW 351
24377: PUSH
24378: LD_VAR 0 12
24382: PUSH
24383: LD_VAR 0 7
24387: ARRAY
24388: PUSH
24389: LD_INT 1
24391: ARRAY
24392: PPUSH
24393: LD_VAR 0 12
24397: PUSH
24398: LD_VAR 0 7
24402: ARRAY
24403: PUSH
24404: LD_INT 2
24406: ARRAY
24407: PPUSH
24408: CALL_OW 488
24412: NOT
24413: OR
24414: PUSH
24415: LD_VAR 0 11
24419: PPUSH
24420: CALL_OW 247
24424: PUSH
24425: LD_INT 3
24427: EQUAL
24428: OR
24429: IFFALSE 24435
// exit ;
24431: POP
24432: POP
24433: GO 24838
// if not tmp or not tmp in base then
24435: LD_VAR 0 11
24439: NOT
24440: PUSH
24441: LD_VAR 0 11
24445: PUSH
24446: LD_VAR 0 1
24450: IN
24451: NOT
24452: OR
24453: IFFALSE 24457
// continue ;
24455: GO 24300
// result := true ;
24457: LD_ADDR_VAR 0 6
24461: PUSH
24462: LD_INT 1
24464: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24465: LD_ADDR_VAR 0 15
24469: PUSH
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_INT 22
24477: PUSH
24478: LD_VAR 0 11
24482: PPUSH
24483: CALL_OW 255
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 30
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 30
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PPUSH
24524: CALL_OW 72
24528: ST_TO_ADDR
// if dep then
24529: LD_VAR 0 15
24533: IFFALSE 24669
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24535: LD_ADDR_VAR 0 14
24539: PUSH
24540: LD_VAR 0 15
24544: PUSH
24545: LD_INT 1
24547: ARRAY
24548: PPUSH
24549: CALL_OW 250
24553: PPUSH
24554: LD_VAR 0 15
24558: PUSH
24559: LD_INT 1
24561: ARRAY
24562: PPUSH
24563: CALL_OW 254
24567: PPUSH
24568: LD_INT 5
24570: PPUSH
24571: CALL_OW 272
24575: PUSH
24576: LD_VAR 0 15
24580: PUSH
24581: LD_INT 1
24583: ARRAY
24584: PPUSH
24585: CALL_OW 251
24589: PPUSH
24590: LD_VAR 0 15
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PPUSH
24599: CALL_OW 254
24603: PPUSH
24604: LD_INT 5
24606: PPUSH
24607: CALL_OW 273
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24616: LD_VAR 0 14
24620: PUSH
24621: LD_INT 1
24623: ARRAY
24624: PPUSH
24625: LD_VAR 0 14
24629: PUSH
24630: LD_INT 2
24632: ARRAY
24633: PPUSH
24634: CALL_OW 488
24638: IFFALSE 24669
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24640: LD_VAR 0 11
24644: PPUSH
24645: LD_VAR 0 14
24649: PUSH
24650: LD_INT 1
24652: ARRAY
24653: PPUSH
24654: LD_VAR 0 14
24658: PUSH
24659: LD_INT 2
24661: ARRAY
24662: PPUSH
24663: CALL_OW 111
// continue ;
24667: GO 24300
// end ; end ; r := GetDir ( tmp ) ;
24669: LD_ADDR_VAR 0 13
24673: PUSH
24674: LD_VAR 0 11
24678: PPUSH
24679: CALL_OW 254
24683: ST_TO_ADDR
// if r = 5 then
24684: LD_VAR 0 13
24688: PUSH
24689: LD_INT 5
24691: EQUAL
24692: IFFALSE 24702
// r := 0 ;
24694: LD_ADDR_VAR 0 13
24698: PUSH
24699: LD_INT 0
24701: ST_TO_ADDR
// for j = r to 5 do
24702: LD_ADDR_VAR 0 8
24706: PUSH
24707: DOUBLE
24708: LD_VAR 0 13
24712: DEC
24713: ST_TO_ADDR
24714: LD_INT 5
24716: PUSH
24717: FOR_TO
24718: IFFALSE 24832
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24720: LD_ADDR_VAR 0 9
24724: PUSH
24725: LD_VAR 0 11
24729: PPUSH
24730: CALL_OW 250
24734: PPUSH
24735: LD_VAR 0 8
24739: PPUSH
24740: LD_INT 2
24742: PPUSH
24743: CALL_OW 272
24747: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24748: LD_ADDR_VAR 0 10
24752: PUSH
24753: LD_VAR 0 11
24757: PPUSH
24758: CALL_OW 251
24762: PPUSH
24763: LD_VAR 0 8
24767: PPUSH
24768: LD_INT 2
24770: PPUSH
24771: CALL_OW 273
24775: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24776: LD_VAR 0 9
24780: PPUSH
24781: LD_VAR 0 10
24785: PPUSH
24786: CALL_OW 488
24790: PUSH
24791: LD_VAR 0 9
24795: PPUSH
24796: LD_VAR 0 10
24800: PPUSH
24801: CALL_OW 428
24805: NOT
24806: AND
24807: IFFALSE 24830
// begin ComMoveXY ( tmp , _x , _y ) ;
24809: LD_VAR 0 11
24813: PPUSH
24814: LD_VAR 0 9
24818: PPUSH
24819: LD_VAR 0 10
24823: PPUSH
24824: CALL_OW 111
// break ;
24828: GO 24832
// end ; end ;
24830: GO 24717
24832: POP
24833: POP
// end ;
24834: GO 24300
24836: POP
24837: POP
// end ;
24838: LD_VAR 0 6
24842: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24843: LD_INT 0
24845: PPUSH
24846: PPUSH
24847: PPUSH
24848: PPUSH
24849: PPUSH
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
// result := false ;
24855: LD_ADDR_VAR 0 6
24859: PUSH
24860: LD_INT 0
24862: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24863: LD_VAR 0 1
24867: NOT
24868: PUSH
24869: LD_VAR 0 1
24873: PPUSH
24874: CALL_OW 266
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: IN
24889: NOT
24890: OR
24891: PUSH
24892: LD_VAR 0 2
24896: NOT
24897: OR
24898: PUSH
24899: LD_VAR 0 5
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 4
24918: PUSH
24919: LD_INT 5
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: IN
24930: NOT
24931: OR
24932: PUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: LD_VAR 0 4
24942: PPUSH
24943: CALL_OW 488
24947: NOT
24948: OR
24949: IFFALSE 24953
// exit ;
24951: GO 25670
// pom := GetBase ( depot ) ;
24953: LD_ADDR_VAR 0 10
24957: PUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL_OW 274
24967: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24968: LD_ADDR_VAR 0 11
24972: PUSH
24973: LD_VAR 0 2
24977: PPUSH
24978: LD_VAR 0 1
24982: PPUSH
24983: CALL_OW 248
24987: PPUSH
24988: CALL_OW 450
24992: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24993: LD_VAR 0 10
24997: PPUSH
24998: LD_INT 1
25000: PPUSH
25001: CALL_OW 275
25005: PUSH
25006: LD_VAR 0 11
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: GREATEREQUAL
25015: PUSH
25016: LD_VAR 0 10
25020: PPUSH
25021: LD_INT 2
25023: PPUSH
25024: CALL_OW 275
25028: PUSH
25029: LD_VAR 0 11
25033: PUSH
25034: LD_INT 2
25036: ARRAY
25037: GREATEREQUAL
25038: AND
25039: PUSH
25040: LD_VAR 0 10
25044: PPUSH
25045: LD_INT 3
25047: PPUSH
25048: CALL_OW 275
25052: PUSH
25053: LD_VAR 0 11
25057: PUSH
25058: LD_INT 3
25060: ARRAY
25061: GREATEREQUAL
25062: AND
25063: NOT
25064: IFFALSE 25068
// exit ;
25066: GO 25670
// if GetBType ( depot ) = b_depot then
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 266
25077: PUSH
25078: LD_INT 0
25080: EQUAL
25081: IFFALSE 25093
// dist := 28 else
25083: LD_ADDR_VAR 0 14
25087: PUSH
25088: LD_INT 28
25090: ST_TO_ADDR
25091: GO 25101
// dist := 36 ;
25093: LD_ADDR_VAR 0 14
25097: PUSH
25098: LD_INT 36
25100: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25101: LD_VAR 0 1
25105: PPUSH
25106: LD_VAR 0 3
25110: PPUSH
25111: LD_VAR 0 4
25115: PPUSH
25116: CALL_OW 297
25120: PUSH
25121: LD_VAR 0 14
25125: GREATER
25126: IFFALSE 25130
// exit ;
25128: GO 25670
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25130: LD_ADDR_VAR 0 12
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: LD_VAR 0 4
25149: PPUSH
25150: LD_VAR 0 5
25154: PPUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 248
25164: PPUSH
25165: LD_INT 0
25167: PPUSH
25168: CALL 25675 0 6
25172: ST_TO_ADDR
// if not hexes then
25173: LD_VAR 0 12
25177: NOT
25178: IFFALSE 25182
// exit ;
25180: GO 25670
// hex := GetHexInfo ( x , y ) ;
25182: LD_ADDR_VAR 0 15
25186: PUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: LD_VAR 0 4
25196: PPUSH
25197: CALL_OW 546
25201: ST_TO_ADDR
// if hex [ 1 ] then
25202: LD_VAR 0 15
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: IFFALSE 25214
// exit ;
25212: GO 25670
// height := hex [ 2 ] ;
25214: LD_ADDR_VAR 0 13
25218: PUSH
25219: LD_VAR 0 15
25223: PUSH
25224: LD_INT 2
25226: ARRAY
25227: ST_TO_ADDR
// for i = 1 to hexes do
25228: LD_ADDR_VAR 0 7
25232: PUSH
25233: DOUBLE
25234: LD_INT 1
25236: DEC
25237: ST_TO_ADDR
25238: LD_VAR 0 12
25242: PUSH
25243: FOR_TO
25244: IFFALSE 25574
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25246: LD_VAR 0 12
25250: PUSH
25251: LD_VAR 0 7
25255: ARRAY
25256: PUSH
25257: LD_INT 1
25259: ARRAY
25260: PPUSH
25261: LD_VAR 0 12
25265: PUSH
25266: LD_VAR 0 7
25270: ARRAY
25271: PUSH
25272: LD_INT 2
25274: ARRAY
25275: PPUSH
25276: CALL_OW 488
25280: NOT
25281: PUSH
25282: LD_VAR 0 12
25286: PUSH
25287: LD_VAR 0 7
25291: ARRAY
25292: PUSH
25293: LD_INT 1
25295: ARRAY
25296: PPUSH
25297: LD_VAR 0 12
25301: PUSH
25302: LD_VAR 0 7
25306: ARRAY
25307: PUSH
25308: LD_INT 2
25310: ARRAY
25311: PPUSH
25312: CALL_OW 428
25316: PUSH
25317: LD_INT 0
25319: GREATER
25320: OR
25321: PUSH
25322: LD_VAR 0 12
25326: PUSH
25327: LD_VAR 0 7
25331: ARRAY
25332: PUSH
25333: LD_INT 1
25335: ARRAY
25336: PPUSH
25337: LD_VAR 0 12
25341: PUSH
25342: LD_VAR 0 7
25346: ARRAY
25347: PUSH
25348: LD_INT 2
25350: ARRAY
25351: PPUSH
25352: CALL_OW 351
25356: OR
25357: IFFALSE 25363
// exit ;
25359: POP
25360: POP
25361: GO 25670
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25363: LD_ADDR_VAR 0 8
25367: PUSH
25368: LD_VAR 0 12
25372: PUSH
25373: LD_VAR 0 7
25377: ARRAY
25378: PUSH
25379: LD_INT 1
25381: ARRAY
25382: PPUSH
25383: LD_VAR 0 12
25387: PUSH
25388: LD_VAR 0 7
25392: ARRAY
25393: PUSH
25394: LD_INT 2
25396: ARRAY
25397: PPUSH
25398: CALL_OW 546
25402: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25403: LD_VAR 0 8
25407: PUSH
25408: LD_INT 1
25410: ARRAY
25411: PUSH
25412: LD_VAR 0 8
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: PUSH
25421: LD_VAR 0 13
25425: PUSH
25426: LD_INT 2
25428: PLUS
25429: GREATER
25430: OR
25431: PUSH
25432: LD_VAR 0 8
25436: PUSH
25437: LD_INT 2
25439: ARRAY
25440: PUSH
25441: LD_VAR 0 13
25445: PUSH
25446: LD_INT 2
25448: MINUS
25449: LESS
25450: OR
25451: PUSH
25452: LD_VAR 0 8
25456: PUSH
25457: LD_INT 3
25459: ARRAY
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 8
25466: PUSH
25467: LD_INT 9
25469: PUSH
25470: LD_INT 10
25472: PUSH
25473: LD_INT 11
25475: PUSH
25476: LD_INT 12
25478: PUSH
25479: LD_INT 13
25481: PUSH
25482: LD_INT 16
25484: PUSH
25485: LD_INT 17
25487: PUSH
25488: LD_INT 18
25490: PUSH
25491: LD_INT 19
25493: PUSH
25494: LD_INT 20
25496: PUSH
25497: LD_INT 21
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: IN
25515: NOT
25516: OR
25517: PUSH
25518: LD_VAR 0 8
25522: PUSH
25523: LD_INT 5
25525: ARRAY
25526: NOT
25527: OR
25528: PUSH
25529: LD_VAR 0 8
25533: PUSH
25534: LD_INT 6
25536: ARRAY
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 7
25546: PUSH
25547: LD_INT 9
25549: PUSH
25550: LD_INT 10
25552: PUSH
25553: LD_INT 11
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: IN
25564: NOT
25565: OR
25566: IFFALSE 25572
// exit ;
25568: POP
25569: POP
25570: GO 25670
// end ;
25572: GO 25243
25574: POP
25575: POP
// side := GetSide ( depot ) ;
25576: LD_ADDR_VAR 0 9
25580: PUSH
25581: LD_VAR 0 1
25585: PPUSH
25586: CALL_OW 255
25590: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25591: LD_VAR 0 9
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: LD_VAR 0 4
25605: PPUSH
25606: LD_INT 20
25608: PPUSH
25609: CALL 18324 0 4
25613: PUSH
25614: LD_INT 4
25616: ARRAY
25617: IFFALSE 25621
// exit ;
25619: GO 25670
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25621: LD_VAR 0 2
25625: PUSH
25626: LD_INT 29
25628: PUSH
25629: LD_INT 30
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: IN
25636: PUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: LD_VAR 0 4
25646: PPUSH
25647: LD_VAR 0 9
25651: PPUSH
25652: CALL_OW 440
25656: NOT
25657: AND
25658: IFFALSE 25662
// exit ;
25660: GO 25670
// result := true ;
25662: LD_ADDR_VAR 0 6
25666: PUSH
25667: LD_INT 1
25669: ST_TO_ADDR
// end ;
25670: LD_VAR 0 6
25674: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25675: LD_INT 0
25677: PPUSH
25678: PPUSH
25679: PPUSH
25680: PPUSH
25681: PPUSH
25682: PPUSH
25683: PPUSH
25684: PPUSH
25685: PPUSH
25686: PPUSH
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
// result = [ ] ;
25735: LD_ADDR_VAR 0 7
25739: PUSH
25740: EMPTY
25741: ST_TO_ADDR
// temp_list = [ ] ;
25742: LD_ADDR_VAR 0 9
25746: PUSH
25747: EMPTY
25748: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25749: LD_VAR 0 4
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: LD_INT 4
25768: PUSH
25769: LD_INT 5
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: IN
25780: NOT
25781: PUSH
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: IN
25797: PUSH
25798: LD_VAR 0 5
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: IN
25817: NOT
25818: AND
25819: OR
25820: IFFALSE 25824
// exit ;
25822: GO 44215
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25824: LD_VAR 0 1
25828: PUSH
25829: LD_INT 6
25831: PUSH
25832: LD_INT 7
25834: PUSH
25835: LD_INT 8
25837: PUSH
25838: LD_INT 13
25840: PUSH
25841: LD_INT 12
25843: PUSH
25844: LD_INT 15
25846: PUSH
25847: LD_INT 11
25849: PUSH
25850: LD_INT 14
25852: PUSH
25853: LD_INT 10
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: IN
25867: IFFALSE 25877
// btype = b_lab ;
25869: LD_ADDR_VAR 0 1
25873: PUSH
25874: LD_INT 6
25876: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25877: LD_VAR 0 6
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: IN
25896: NOT
25897: PUSH
25898: LD_VAR 0 1
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 6
25917: PUSH
25918: LD_INT 36
25920: PUSH
25921: LD_INT 4
25923: PUSH
25924: LD_INT 5
25926: PUSH
25927: LD_INT 31
25929: PUSH
25930: LD_INT 32
25932: PUSH
25933: LD_INT 33
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: IN
25949: NOT
25950: PUSH
25951: LD_VAR 0 6
25955: PUSH
25956: LD_INT 1
25958: EQUAL
25959: AND
25960: OR
25961: PUSH
25962: LD_VAR 0 1
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 3
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: IN
25977: NOT
25978: PUSH
25979: LD_VAR 0 6
25983: PUSH
25984: LD_INT 2
25986: EQUAL
25987: AND
25988: OR
25989: IFFALSE 25999
// mode = 0 ;
25991: LD_ADDR_VAR 0 6
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// case mode of 0 :
25999: LD_VAR 0 6
26003: PUSH
26004: LD_INT 0
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 37465
26012: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26013: LD_ADDR_VAR 0 11
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26206: LD_ADDR_VAR 0 12
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: NEG
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: NEG
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26402: LD_ADDR_VAR 0 13
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 3
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: NEG
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: NEG
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26601: LD_ADDR_VAR 0 14
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 2
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: LD_INT 3
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 3
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26797: LD_ADDR_VAR 0 15
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 2
26920: NEG
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 2
26931: NEG
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 3
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 3
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26990: LD_ADDR_VAR 0 16
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 3
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 3
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27183: LD_ADDR_VAR 0 17
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: NEG
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27413: LD_ADDR_VAR 0 18
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 2
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 2
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: NEG
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27643: LD_ADDR_VAR 0 19
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: NEG
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: LD_INT 2
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27873: LD_ADDR_VAR 0 20
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 2
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: NEG
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28103: LD_ADDR_VAR 0 21
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28333: LD_ADDR_VAR 0 22
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: NEG
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28563: LD_ADDR_VAR 0 23
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: LD_INT 3
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 3
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28843: LD_ADDR_VAR 0 24
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 2
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 2
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 3
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29119: LD_ADDR_VAR 0 25
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29393: LD_ADDR_VAR 0 26
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 2
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 2
29569: NEG
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29669: LD_ADDR_VAR 0 27
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 3
29914: NEG
29915: PUSH
29916: LD_INT 2
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29949: LD_ADDR_VAR 0 28
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 3
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 3
30196: NEG
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30231: LD_ADDR_VAR 0 29
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 3
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30510: LD_ADDR_VAR 0 30
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 0
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 2
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 2
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 3
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 3
30753: NEG
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30788: LD_ADDR_VAR 0 31
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 2
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 3
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31066: LD_ADDR_VAR 0 32
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 3
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31344: LD_ADDR_VAR 0 33
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31623: LD_ADDR_VAR 0 34
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 3
31868: NEG
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31903: LD_ADDR_VAR 0 35
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32015: LD_ADDR_VAR 0 36
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32127: LD_ADDR_VAR 0 37
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32239: LD_ADDR_VAR 0 38
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32351: LD_ADDR_VAR 0 39
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32463: LD_ADDR_VAR 0 40
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32575: LD_ADDR_VAR 0 41
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 2
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 3
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32925: LD_ADDR_VAR 0 42
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 3
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: LD_INT 3
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: LD_INT 2
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33275: LD_ADDR_VAR 0 43
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 3
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 2
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 3
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 3
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 3
33571: NEG
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 3
33582: NEG
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33623: LD_ADDR_VAR 0 44
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: LD_INT 3
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33973: LD_ADDR_VAR 0 45
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 3
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: LD_INT 3
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: LD_INT 3
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34323: LD_ADDR_VAR 0 46
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 3
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 3
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: LD_INT 2
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: NEG
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 3
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34671: LD_ADDR_VAR 0 47
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34822: LD_ADDR_VAR 0 48
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34969: LD_ADDR_VAR 0 49
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35113: LD_ADDR_VAR 0 50
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35257: LD_ADDR_VAR 0 51
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35404: LD_ADDR_VAR 0 52
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35555: LD_ADDR_VAR 0 53
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 2
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 2
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35785: LD_ADDR_VAR 0 54
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 2
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36015: LD_ADDR_VAR 0 55
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: LD_INT 2
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36245: LD_ADDR_VAR 0 56
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36475: LD_ADDR_VAR 0 57
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36705: LD_ADDR_VAR 0 58
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 2
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 2
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36935: LD_ADDR_VAR 0 59
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37023: LD_ADDR_VAR 0 60
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37111: LD_ADDR_VAR 0 61
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37199: LD_ADDR_VAR 0 62
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37287: LD_ADDR_VAR 0 63
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37375: LD_ADDR_VAR 0 64
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// end ; 1 :
37463: GO 43360
37465: LD_INT 1
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 40096
37473: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37474: LD_ADDR_VAR 0 11
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 3
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37518: LD_ADDR_VAR 0 12
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 3
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 3
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37559: LD_ADDR_VAR 0 13
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37599: LD_ADDR_VAR 0 14
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 3
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37640: LD_ADDR_VAR 0 15
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 3
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37684: LD_ADDR_VAR 0 16
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 3
37715: NEG
37716: PUSH
37717: LD_INT 3
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37730: LD_ADDR_VAR 0 17
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 3
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 2
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37774: LD_ADDR_VAR 0 18
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37815: LD_ADDR_VAR 0 19
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 3
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37855: LD_ADDR_VAR 0 20
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37896: LD_ADDR_VAR 0 21
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 3
37914: NEG
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37940: LD_ADDR_VAR 0 22
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 3
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: NEG
37972: PUSH
37973: LD_INT 3
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37986: LD_ADDR_VAR 0 23
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 3
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 4
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38030: LD_ADDR_VAR 0 24
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 3
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 4
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38071: LD_ADDR_VAR 0 25
38075: PUSH
38076: LD_INT 3
38078: PUSH
38079: LD_INT 3
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: LD_INT 3
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38111: LD_ADDR_VAR 0 26
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 4
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38152: LD_ADDR_VAR 0 27
38156: PUSH
38157: LD_INT 3
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 4
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38196: LD_ADDR_VAR 0 28
38200: PUSH
38201: LD_INT 3
38203: NEG
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: LD_INT 4
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 4
38227: NEG
38228: PUSH
38229: LD_INT 3
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38242: LD_ADDR_VAR 0 29
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 3
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 4
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 4
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 3
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 5
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 5
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 4
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 6
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 6
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: LD_INT 5
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38397: LD_ADDR_VAR 0 30
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 4
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 4
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 4
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 5
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 5
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 5
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 6
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 6
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38540: LD_ADDR_VAR 0 31
38544: PUSH
38545: LD_INT 3
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 4
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 4
38587: PUSH
38588: LD_INT 4
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 4
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 5
38607: PUSH
38608: LD_INT 4
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 5
38617: PUSH
38618: LD_INT 5
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 4
38627: PUSH
38628: LD_INT 5
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 6
38637: PUSH
38638: LD_INT 5
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 6
38647: PUSH
38648: LD_INT 6
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 5
38657: PUSH
38658: LD_INT 6
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38679: LD_ADDR_VAR 0 32
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 4
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 3
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 5
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 5
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 4
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: LD_INT 6
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 6
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 5
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38822: LD_ADDR_VAR 0 33
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 3
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 3
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 4
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 4
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 5
38908: NEG
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 5
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 5
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 6
38942: NEG
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 6
38953: NEG
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38977: LD_ADDR_VAR 0 34
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 3
39008: NEG
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: LD_INT 4
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 4
39032: NEG
39033: PUSH
39034: LD_INT 3
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 4
39044: NEG
39045: PUSH
39046: LD_INT 4
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 4
39056: NEG
39057: PUSH
39058: LD_INT 5
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 5
39068: NEG
39069: PUSH
39070: LD_INT 4
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 5
39080: NEG
39081: PUSH
39082: LD_INT 5
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 5
39092: NEG
39093: PUSH
39094: LD_INT 6
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 6
39104: NEG
39105: PUSH
39106: LD_INT 5
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 6
39116: NEG
39117: PUSH
39118: LD_INT 6
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39140: LD_ADDR_VAR 0 41
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 3
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39184: LD_ADDR_VAR 0 42
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39225: LD_ADDR_VAR 0 43
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39265: LD_ADDR_VAR 0 44
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39306: LD_ADDR_VAR 0 45
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39350: LD_ADDR_VAR 0 46
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 3
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 3
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39396: LD_ADDR_VAR 0 47
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: LD_INT 3
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 3
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39429: LD_ADDR_VAR 0 48
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39460: LD_ADDR_VAR 0 49
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39489: LD_ADDR_VAR 0 50
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 3
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39518: LD_ADDR_VAR 0 51
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39549: LD_ADDR_VAR 0 52
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39582: LD_ADDR_VAR 0 53
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 3
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39626: LD_ADDR_VAR 0 54
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39667: LD_ADDR_VAR 0 55
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39707: LD_ADDR_VAR 0 56
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: LIST
39747: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39748: LD_ADDR_VAR 0 57
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 3
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39792: LD_ADDR_VAR 0 58
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: NEG
39824: PUSH
39825: LD_INT 3
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39838: LD_ADDR_VAR 0 59
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39882: LD_ADDR_VAR 0 60
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39923: LD_ADDR_VAR 0 61
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39963: LD_ADDR_VAR 0 62
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40004: LD_ADDR_VAR 0 63
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40048: LD_ADDR_VAR 0 64
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// end ; 2 :
40094: GO 43360
40096: LD_INT 2
40098: DOUBLE
40099: EQUAL
40100: IFTRUE 40104
40102: GO 43359
40104: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40105: LD_ADDR_VAR 0 29
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 4
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 5
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 4
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 3
40205: PUSH
40206: LD_INT 3
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 4
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 4
40235: PUSH
40236: LD_INT 4
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 3
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 4
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 4
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 4
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 4
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 4
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 5
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: NEG
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 3
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 4
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 4
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 4
40467: NEG
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 4
40490: NEG
40491: PUSH
40492: LD_INT 4
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 4
40502: NEG
40503: PUSH
40504: LD_INT 5
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: LD_INT 4
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: LD_INT 3
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: NEG
40539: PUSH
40540: LD_INT 3
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 5
40550: NEG
40551: PUSH
40552: LD_INT 4
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 5
40562: NEG
40563: PUSH
40564: LD_INT 5
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: LD_INT 5
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 5
40586: NEG
40587: PUSH
40588: LD_INT 3
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40643: LD_ADDR_VAR 0 30
40647: PUSH
40648: LD_INT 4
40650: PUSH
40651: LD_INT 4
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 4
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 5
40670: PUSH
40671: LD_INT 4
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 5
40680: PUSH
40681: LD_INT 5
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 4
40690: PUSH
40691: LD_INT 5
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: LD_INT 4
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 5
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: LD_INT 5
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 4
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 4
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 4
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 4
40833: NEG
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 4
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 4
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 5
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 5
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 5
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 3
40935: NEG
40936: PUSH
40937: LD_INT 3
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: LD_INT 4
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: LD_INT 3
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 3
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 4
40995: NEG
40996: PUSH
40997: LD_INT 3
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 4
41007: NEG
41008: PUSH
41009: LD_INT 4
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: LD_INT 4
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 4
41031: NEG
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 4
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 5
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 4
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 3
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 3
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 4
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 5
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 3
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 5
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41190: LD_ADDR_VAR 0 31
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 4
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 5
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 4
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 5
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 3
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 4
41346: NEG
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 4
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 4
41369: NEG
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 4
41392: NEG
41393: PUSH
41394: LD_INT 4
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 4
41404: NEG
41405: PUSH
41406: LD_INT 5
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 4
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 4
41440: NEG
41441: PUSH
41442: LD_INT 3
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 5
41452: NEG
41453: PUSH
41454: LD_INT 4
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 5
41464: NEG
41465: PUSH
41466: LD_INT 5
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: LD_INT 5
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 5
41488: NEG
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 4
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 3
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 4
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 4
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 5
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 5
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 4
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 3
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 3
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 5
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41740: LD_ADDR_VAR 0 32
41744: PUSH
41745: LD_INT 4
41747: NEG
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 4
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 3
41770: NEG
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 4
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 5
41803: NEG
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 5
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 5
41826: NEG
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 3
41849: NEG
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: LD_INT 4
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 3
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 4
41909: NEG
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: NEG
41922: PUSH
41923: LD_INT 4
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 4
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 4
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 5
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 4
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 4
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 5
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: LD_INT 3
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: LD_INT 5
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 4
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 4
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 4
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 4
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 5
42172: PUSH
42173: LD_INT 4
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 5
42182: PUSH
42183: LD_INT 5
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 4
42192: PUSH
42193: LD_INT 5
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 4
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: LD_INT 5
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42287: LD_ADDR_VAR 0 33
42291: PUSH
42292: LD_INT 4
42294: NEG
42295: PUSH
42296: LD_INT 4
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 4
42306: NEG
42307: PUSH
42308: LD_INT 5
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: LD_INT 4
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 4
42342: NEG
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 5
42354: NEG
42355: PUSH
42356: LD_INT 4
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 5
42366: NEG
42367: PUSH
42368: LD_INT 5
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: NEG
42379: PUSH
42380: LD_INT 5
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 5
42390: NEG
42391: PUSH
42392: LD_INT 3
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 4
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 3
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 3
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 4
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 4
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 4
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 4
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 3
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 4
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 4
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 4
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 5
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 4
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42825: LD_ADDR_VAR 0 34
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 4
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 5
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 4
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 3
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 4
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 5
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 5
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 4
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 4
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 4
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 4
43027: PUSH
43028: LD_INT 4
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 4
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 5
43047: PUSH
43048: LD_INT 4
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 5
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 4
43067: PUSH
43068: LD_INT 5
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 4
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: PUSH
43108: LD_INT 5
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 4
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 4
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 3
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 4
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 4
43210: NEG
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 4
43221: NEG
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 4
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 5
43266: NEG
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 5
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 5
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
// end ; end ;
43357: GO 43360
43359: POP
// case btype of b_depot , b_warehouse :
43360: LD_VAR 0 1
43364: PUSH
43365: LD_INT 0
43367: DOUBLE
43368: EQUAL
43369: IFTRUE 43379
43371: LD_INT 1
43373: DOUBLE
43374: EQUAL
43375: IFTRUE 43379
43377: GO 43580
43379: POP
// case nation of nation_american :
43380: LD_VAR 0 5
43384: PUSH
43385: LD_INT 1
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43449
43393: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: LD_VAR 0 11
43403: PUSH
43404: LD_VAR 0 12
43408: PUSH
43409: LD_VAR 0 13
43413: PUSH
43414: LD_VAR 0 14
43418: PUSH
43419: LD_VAR 0 15
43423: PUSH
43424: LD_VAR 0 16
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: PUSH
43437: LD_VAR 0 4
43441: PUSH
43442: LD_INT 1
43444: PLUS
43445: ARRAY
43446: ST_TO_ADDR
43447: GO 43578
43449: LD_INT 2
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43513
43457: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43458: LD_ADDR_VAR 0 9
43462: PUSH
43463: LD_VAR 0 17
43467: PUSH
43468: LD_VAR 0 18
43472: PUSH
43473: LD_VAR 0 19
43477: PUSH
43478: LD_VAR 0 20
43482: PUSH
43483: LD_VAR 0 21
43487: PUSH
43488: LD_VAR 0 22
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: PUSH
43501: LD_VAR 0 4
43505: PUSH
43506: LD_INT 1
43508: PLUS
43509: ARRAY
43510: ST_TO_ADDR
43511: GO 43578
43513: LD_INT 3
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43521
43519: GO 43577
43521: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43522: LD_ADDR_VAR 0 9
43526: PUSH
43527: LD_VAR 0 23
43531: PUSH
43532: LD_VAR 0 24
43536: PUSH
43537: LD_VAR 0 25
43541: PUSH
43542: LD_VAR 0 26
43546: PUSH
43547: LD_VAR 0 27
43551: PUSH
43552: LD_VAR 0 28
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: PUSH
43565: LD_VAR 0 4
43569: PUSH
43570: LD_INT 1
43572: PLUS
43573: ARRAY
43574: ST_TO_ADDR
43575: GO 43578
43577: POP
43578: GO 44133
43580: LD_INT 2
43582: DOUBLE
43583: EQUAL
43584: IFTRUE 43594
43586: LD_INT 3
43588: DOUBLE
43589: EQUAL
43590: IFTRUE 43594
43592: GO 43650
43594: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43595: LD_ADDR_VAR 0 9
43599: PUSH
43600: LD_VAR 0 29
43604: PUSH
43605: LD_VAR 0 30
43609: PUSH
43610: LD_VAR 0 31
43614: PUSH
43615: LD_VAR 0 32
43619: PUSH
43620: LD_VAR 0 33
43624: PUSH
43625: LD_VAR 0 34
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: PUSH
43638: LD_VAR 0 4
43642: PUSH
43643: LD_INT 1
43645: PLUS
43646: ARRAY
43647: ST_TO_ADDR
43648: GO 44133
43650: LD_INT 16
43652: DOUBLE
43653: EQUAL
43654: IFTRUE 43712
43656: LD_INT 17
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43712
43662: LD_INT 18
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43712
43668: LD_INT 19
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43712
43674: LD_INT 22
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43712
43680: LD_INT 20
43682: DOUBLE
43683: EQUAL
43684: IFTRUE 43712
43686: LD_INT 21
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43712
43692: LD_INT 23
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43712
43698: LD_INT 24
43700: DOUBLE
43701: EQUAL
43702: IFTRUE 43712
43704: LD_INT 25
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43712
43710: GO 43768
43712: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43713: LD_ADDR_VAR 0 9
43717: PUSH
43718: LD_VAR 0 35
43722: PUSH
43723: LD_VAR 0 36
43727: PUSH
43728: LD_VAR 0 37
43732: PUSH
43733: LD_VAR 0 38
43737: PUSH
43738: LD_VAR 0 39
43742: PUSH
43743: LD_VAR 0 40
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: PUSH
43756: LD_VAR 0 4
43760: PUSH
43761: LD_INT 1
43763: PLUS
43764: ARRAY
43765: ST_TO_ADDR
43766: GO 44133
43768: LD_INT 6
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43824
43774: LD_INT 7
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43824
43780: LD_INT 8
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43824
43786: LD_INT 13
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43824
43792: LD_INT 12
43794: DOUBLE
43795: EQUAL
43796: IFTRUE 43824
43798: LD_INT 15
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43824
43804: LD_INT 11
43806: DOUBLE
43807: EQUAL
43808: IFTRUE 43824
43810: LD_INT 14
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43824
43816: LD_INT 10
43818: DOUBLE
43819: EQUAL
43820: IFTRUE 43824
43822: GO 43880
43824: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43825: LD_ADDR_VAR 0 9
43829: PUSH
43830: LD_VAR 0 41
43834: PUSH
43835: LD_VAR 0 42
43839: PUSH
43840: LD_VAR 0 43
43844: PUSH
43845: LD_VAR 0 44
43849: PUSH
43850: LD_VAR 0 45
43854: PUSH
43855: LD_VAR 0 46
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: PUSH
43868: LD_VAR 0 4
43872: PUSH
43873: LD_INT 1
43875: PLUS
43876: ARRAY
43877: ST_TO_ADDR
43878: GO 44133
43880: LD_INT 36
43882: DOUBLE
43883: EQUAL
43884: IFTRUE 43888
43886: GO 43944
43888: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43889: LD_ADDR_VAR 0 9
43893: PUSH
43894: LD_VAR 0 47
43898: PUSH
43899: LD_VAR 0 48
43903: PUSH
43904: LD_VAR 0 49
43908: PUSH
43909: LD_VAR 0 50
43913: PUSH
43914: LD_VAR 0 51
43918: PUSH
43919: LD_VAR 0 52
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: PUSH
43932: LD_VAR 0 4
43936: PUSH
43937: LD_INT 1
43939: PLUS
43940: ARRAY
43941: ST_TO_ADDR
43942: GO 44133
43944: LD_INT 4
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43970
43950: LD_INT 5
43952: DOUBLE
43953: EQUAL
43954: IFTRUE 43970
43956: LD_INT 34
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43970
43962: LD_INT 37
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 44026
43970: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43971: LD_ADDR_VAR 0 9
43975: PUSH
43976: LD_VAR 0 53
43980: PUSH
43981: LD_VAR 0 54
43985: PUSH
43986: LD_VAR 0 55
43990: PUSH
43991: LD_VAR 0 56
43995: PUSH
43996: LD_VAR 0 57
44000: PUSH
44001: LD_VAR 0 58
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: PUSH
44014: LD_VAR 0 4
44018: PUSH
44019: LD_INT 1
44021: PLUS
44022: ARRAY
44023: ST_TO_ADDR
44024: GO 44133
44026: LD_INT 31
44028: DOUBLE
44029: EQUAL
44030: IFTRUE 44076
44032: LD_INT 32
44034: DOUBLE
44035: EQUAL
44036: IFTRUE 44076
44038: LD_INT 33
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44076
44044: LD_INT 27
44046: DOUBLE
44047: EQUAL
44048: IFTRUE 44076
44050: LD_INT 26
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44076
44056: LD_INT 28
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44076
44062: LD_INT 29
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44076
44068: LD_INT 30
44070: DOUBLE
44071: EQUAL
44072: IFTRUE 44076
44074: GO 44132
44076: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44077: LD_ADDR_VAR 0 9
44081: PUSH
44082: LD_VAR 0 59
44086: PUSH
44087: LD_VAR 0 60
44091: PUSH
44092: LD_VAR 0 61
44096: PUSH
44097: LD_VAR 0 62
44101: PUSH
44102: LD_VAR 0 63
44106: PUSH
44107: LD_VAR 0 64
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: PUSH
44120: LD_VAR 0 4
44124: PUSH
44125: LD_INT 1
44127: PLUS
44128: ARRAY
44129: ST_TO_ADDR
44130: GO 44133
44132: POP
// temp_list2 = [ ] ;
44133: LD_ADDR_VAR 0 10
44137: PUSH
44138: EMPTY
44139: ST_TO_ADDR
// for i in temp_list do
44140: LD_ADDR_VAR 0 8
44144: PUSH
44145: LD_VAR 0 9
44149: PUSH
44150: FOR_IN
44151: IFFALSE 44203
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44153: LD_ADDR_VAR 0 10
44157: PUSH
44158: LD_VAR 0 10
44162: PUSH
44163: LD_VAR 0 8
44167: PUSH
44168: LD_INT 1
44170: ARRAY
44171: PUSH
44172: LD_VAR 0 2
44176: PLUS
44177: PUSH
44178: LD_VAR 0 8
44182: PUSH
44183: LD_INT 2
44185: ARRAY
44186: PUSH
44187: LD_VAR 0 3
44191: PLUS
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: ADD
44200: ST_TO_ADDR
44201: GO 44150
44203: POP
44204: POP
// result = temp_list2 ;
44205: LD_ADDR_VAR 0 7
44209: PUSH
44210: LD_VAR 0 10
44214: ST_TO_ADDR
// end ;
44215: LD_VAR 0 7
44219: RET
// export function EnemyInRange ( unit , dist ) ; begin
44220: LD_INT 0
44222: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44223: LD_ADDR_VAR 0 3
44227: PUSH
44228: LD_VAR 0 1
44232: PPUSH
44233: CALL_OW 255
44237: PPUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: CALL_OW 250
44247: PPUSH
44248: LD_VAR 0 1
44252: PPUSH
44253: CALL_OW 251
44257: PPUSH
44258: LD_VAR 0 2
44262: PPUSH
44263: CALL 18324 0 4
44267: PUSH
44268: LD_INT 4
44270: ARRAY
44271: ST_TO_ADDR
// end ;
44272: LD_VAR 0 3
44276: RET
// export function PlayerSeeMe ( unit ) ; begin
44277: LD_INT 0
44279: PPUSH
// result := See ( your_side , unit ) ;
44280: LD_ADDR_VAR 0 2
44284: PUSH
44285: LD_OWVAR 2
44289: PPUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 292
44299: ST_TO_ADDR
// end ;
44300: LD_VAR 0 2
44304: RET
// export function ReverseDir ( unit ) ; begin
44305: LD_INT 0
44307: PPUSH
// if not unit then
44308: LD_VAR 0 1
44312: NOT
44313: IFFALSE 44317
// exit ;
44315: GO 44363
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44317: LD_ADDR_VAR 0 2
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: LD_INT 5
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: PUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 254
44357: PUSH
44358: LD_INT 1
44360: PLUS
44361: ARRAY
44362: ST_TO_ADDR
// end ;
44363: LD_VAR 0 2
44367: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44368: LD_INT 0
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
// if not hexes then
44375: LD_VAR 0 2
44379: NOT
44380: IFFALSE 44384
// exit ;
44382: GO 44532
// dist := 9999 ;
44384: LD_ADDR_VAR 0 5
44388: PUSH
44389: LD_INT 9999
44391: ST_TO_ADDR
// for i = 1 to hexes do
44392: LD_ADDR_VAR 0 4
44396: PUSH
44397: DOUBLE
44398: LD_INT 1
44400: DEC
44401: ST_TO_ADDR
44402: LD_VAR 0 2
44406: PUSH
44407: FOR_TO
44408: IFFALSE 44520
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44410: LD_VAR 0 1
44414: PPUSH
44415: LD_VAR 0 2
44419: PUSH
44420: LD_VAR 0 4
44424: ARRAY
44425: PUSH
44426: LD_INT 1
44428: ARRAY
44429: PPUSH
44430: LD_VAR 0 2
44434: PUSH
44435: LD_VAR 0 4
44439: ARRAY
44440: PUSH
44441: LD_INT 2
44443: ARRAY
44444: PPUSH
44445: CALL_OW 297
44449: PUSH
44450: LD_VAR 0 5
44454: LESS
44455: IFFALSE 44518
// begin hex := hexes [ i ] ;
44457: LD_ADDR_VAR 0 7
44461: PUSH
44462: LD_VAR 0 2
44466: PUSH
44467: LD_VAR 0 4
44471: ARRAY
44472: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44473: LD_ADDR_VAR 0 5
44477: PUSH
44478: LD_VAR 0 1
44482: PPUSH
44483: LD_VAR 0 2
44487: PUSH
44488: LD_VAR 0 4
44492: ARRAY
44493: PUSH
44494: LD_INT 1
44496: ARRAY
44497: PPUSH
44498: LD_VAR 0 2
44502: PUSH
44503: LD_VAR 0 4
44507: ARRAY
44508: PUSH
44509: LD_INT 2
44511: ARRAY
44512: PPUSH
44513: CALL_OW 297
44517: ST_TO_ADDR
// end ; end ;
44518: GO 44407
44520: POP
44521: POP
// result := hex ;
44522: LD_ADDR_VAR 0 3
44526: PUSH
44527: LD_VAR 0 7
44531: ST_TO_ADDR
// end ;
44532: LD_VAR 0 3
44536: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44537: LD_INT 0
44539: PPUSH
44540: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44541: LD_VAR 0 1
44545: NOT
44546: PUSH
44547: LD_VAR 0 1
44551: PUSH
44552: LD_INT 21
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 23
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PPUSH
44576: CALL_OW 69
44580: IN
44581: NOT
44582: OR
44583: IFFALSE 44587
// exit ;
44585: GO 44634
// for i = 1 to 3 do
44587: LD_ADDR_VAR 0 3
44591: PUSH
44592: DOUBLE
44593: LD_INT 1
44595: DEC
44596: ST_TO_ADDR
44597: LD_INT 3
44599: PUSH
44600: FOR_TO
44601: IFFALSE 44632
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44603: LD_VAR 0 1
44607: PPUSH
44608: CALL_OW 250
44612: PPUSH
44613: LD_VAR 0 1
44617: PPUSH
44618: CALL_OW 251
44622: PPUSH
44623: LD_INT 1
44625: PPUSH
44626: CALL_OW 453
44630: GO 44600
44632: POP
44633: POP
// end ;
44634: LD_VAR 0 2
44638: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44639: LD_INT 0
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44647: LD_VAR 0 1
44651: NOT
44652: PUSH
44653: LD_VAR 0 2
44657: NOT
44658: OR
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: CALL_OW 314
44669: OR
44670: IFFALSE 44674
// exit ;
44672: GO 45115
// x := GetX ( enemy_unit ) ;
44674: LD_ADDR_VAR 0 7
44678: PUSH
44679: LD_VAR 0 2
44683: PPUSH
44684: CALL_OW 250
44688: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44689: LD_ADDR_VAR 0 8
44693: PUSH
44694: LD_VAR 0 2
44698: PPUSH
44699: CALL_OW 251
44703: ST_TO_ADDR
// if not x or not y then
44704: LD_VAR 0 7
44708: NOT
44709: PUSH
44710: LD_VAR 0 8
44714: NOT
44715: OR
44716: IFFALSE 44720
// exit ;
44718: GO 45115
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44720: LD_ADDR_VAR 0 6
44724: PUSH
44725: LD_VAR 0 7
44729: PPUSH
44730: LD_INT 0
44732: PPUSH
44733: LD_INT 4
44735: PPUSH
44736: CALL_OW 272
44740: PUSH
44741: LD_VAR 0 8
44745: PPUSH
44746: LD_INT 0
44748: PPUSH
44749: LD_INT 4
44751: PPUSH
44752: CALL_OW 273
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_VAR 0 7
44765: PPUSH
44766: LD_INT 1
44768: PPUSH
44769: LD_INT 4
44771: PPUSH
44772: CALL_OW 272
44776: PUSH
44777: LD_VAR 0 8
44781: PPUSH
44782: LD_INT 1
44784: PPUSH
44785: LD_INT 4
44787: PPUSH
44788: CALL_OW 273
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_VAR 0 7
44801: PPUSH
44802: LD_INT 2
44804: PPUSH
44805: LD_INT 4
44807: PPUSH
44808: CALL_OW 272
44812: PUSH
44813: LD_VAR 0 8
44817: PPUSH
44818: LD_INT 2
44820: PPUSH
44821: LD_INT 4
44823: PPUSH
44824: CALL_OW 273
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_VAR 0 7
44837: PPUSH
44838: LD_INT 3
44840: PPUSH
44841: LD_INT 4
44843: PPUSH
44844: CALL_OW 272
44848: PUSH
44849: LD_VAR 0 8
44853: PPUSH
44854: LD_INT 3
44856: PPUSH
44857: LD_INT 4
44859: PPUSH
44860: CALL_OW 273
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_VAR 0 7
44873: PPUSH
44874: LD_INT 4
44876: PPUSH
44877: LD_INT 4
44879: PPUSH
44880: CALL_OW 272
44884: PUSH
44885: LD_VAR 0 8
44889: PPUSH
44890: LD_INT 4
44892: PPUSH
44893: LD_INT 4
44895: PPUSH
44896: CALL_OW 273
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_VAR 0 7
44909: PPUSH
44910: LD_INT 5
44912: PPUSH
44913: LD_INT 4
44915: PPUSH
44916: CALL_OW 272
44920: PUSH
44921: LD_VAR 0 8
44925: PPUSH
44926: LD_INT 5
44928: PPUSH
44929: LD_INT 4
44931: PPUSH
44932: CALL_OW 273
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// for i = tmp downto 1 do
44949: LD_ADDR_VAR 0 4
44953: PUSH
44954: DOUBLE
44955: LD_VAR 0 6
44959: INC
44960: ST_TO_ADDR
44961: LD_INT 1
44963: PUSH
44964: FOR_DOWNTO
44965: IFFALSE 45066
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44967: LD_VAR 0 6
44971: PUSH
44972: LD_VAR 0 4
44976: ARRAY
44977: PUSH
44978: LD_INT 1
44980: ARRAY
44981: PPUSH
44982: LD_VAR 0 6
44986: PUSH
44987: LD_VAR 0 4
44991: ARRAY
44992: PUSH
44993: LD_INT 2
44995: ARRAY
44996: PPUSH
44997: CALL_OW 488
45001: NOT
45002: PUSH
45003: LD_VAR 0 6
45007: PUSH
45008: LD_VAR 0 4
45012: ARRAY
45013: PUSH
45014: LD_INT 1
45016: ARRAY
45017: PPUSH
45018: LD_VAR 0 6
45022: PUSH
45023: LD_VAR 0 4
45027: ARRAY
45028: PUSH
45029: LD_INT 2
45031: ARRAY
45032: PPUSH
45033: CALL_OW 428
45037: PUSH
45038: LD_INT 0
45040: NONEQUAL
45041: OR
45042: IFFALSE 45064
// tmp := Delete ( tmp , i ) ;
45044: LD_ADDR_VAR 0 6
45048: PUSH
45049: LD_VAR 0 6
45053: PPUSH
45054: LD_VAR 0 4
45058: PPUSH
45059: CALL_OW 3
45063: ST_TO_ADDR
45064: GO 44964
45066: POP
45067: POP
// j := GetClosestHex ( unit , tmp ) ;
45068: LD_ADDR_VAR 0 5
45072: PUSH
45073: LD_VAR 0 1
45077: PPUSH
45078: LD_VAR 0 6
45082: PPUSH
45083: CALL 44368 0 2
45087: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45088: LD_VAR 0 1
45092: PPUSH
45093: LD_VAR 0 5
45097: PUSH
45098: LD_INT 1
45100: ARRAY
45101: PPUSH
45102: LD_VAR 0 5
45106: PUSH
45107: LD_INT 2
45109: ARRAY
45110: PPUSH
45111: CALL_OW 111
// end ;
45115: LD_VAR 0 3
45119: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45120: LD_INT 0
45122: PPUSH
45123: PPUSH
45124: PPUSH
// uc_side = 0 ;
45125: LD_ADDR_OWVAR 20
45129: PUSH
45130: LD_INT 0
45132: ST_TO_ADDR
// uc_nation = 0 ;
45133: LD_ADDR_OWVAR 21
45137: PUSH
45138: LD_INT 0
45140: ST_TO_ADDR
// InitHc ;
45141: CALL_OW 19
// InitVc ;
45145: CALL_OW 20
// if mastodonts then
45149: LD_VAR 0 6
45153: IFFALSE 45220
// for i = 1 to mastodonts do
45155: LD_ADDR_VAR 0 11
45159: PUSH
45160: DOUBLE
45161: LD_INT 1
45163: DEC
45164: ST_TO_ADDR
45165: LD_VAR 0 6
45169: PUSH
45170: FOR_TO
45171: IFFALSE 45218
// begin vc_chassis := 31 ;
45173: LD_ADDR_OWVAR 37
45177: PUSH
45178: LD_INT 31
45180: ST_TO_ADDR
// vc_control := control_rider ;
45181: LD_ADDR_OWVAR 38
45185: PUSH
45186: LD_INT 4
45188: ST_TO_ADDR
// animal := CreateVehicle ;
45189: LD_ADDR_VAR 0 12
45193: PUSH
45194: CALL_OW 45
45198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45199: LD_VAR 0 12
45203: PPUSH
45204: LD_VAR 0 8
45208: PPUSH
45209: LD_INT 0
45211: PPUSH
45212: CALL 51965 0 3
// end ;
45216: GO 45170
45218: POP
45219: POP
// if horses then
45220: LD_VAR 0 5
45224: IFFALSE 45291
// for i = 1 to horses do
45226: LD_ADDR_VAR 0 11
45230: PUSH
45231: DOUBLE
45232: LD_INT 1
45234: DEC
45235: ST_TO_ADDR
45236: LD_VAR 0 5
45240: PUSH
45241: FOR_TO
45242: IFFALSE 45289
// begin hc_class := 21 ;
45244: LD_ADDR_OWVAR 28
45248: PUSH
45249: LD_INT 21
45251: ST_TO_ADDR
// hc_gallery :=  ;
45252: LD_ADDR_OWVAR 33
45256: PUSH
45257: LD_STRING 
45259: ST_TO_ADDR
// animal := CreateHuman ;
45260: LD_ADDR_VAR 0 12
45264: PUSH
45265: CALL_OW 44
45269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45270: LD_VAR 0 12
45274: PPUSH
45275: LD_VAR 0 8
45279: PPUSH
45280: LD_INT 0
45282: PPUSH
45283: CALL 51965 0 3
// end ;
45287: GO 45241
45289: POP
45290: POP
// if birds then
45291: LD_VAR 0 1
45295: IFFALSE 45362
// for i = 1 to birds do
45297: LD_ADDR_VAR 0 11
45301: PUSH
45302: DOUBLE
45303: LD_INT 1
45305: DEC
45306: ST_TO_ADDR
45307: LD_VAR 0 1
45311: PUSH
45312: FOR_TO
45313: IFFALSE 45360
// begin hc_class = 18 ;
45315: LD_ADDR_OWVAR 28
45319: PUSH
45320: LD_INT 18
45322: ST_TO_ADDR
// hc_gallery =  ;
45323: LD_ADDR_OWVAR 33
45327: PUSH
45328: LD_STRING 
45330: ST_TO_ADDR
// animal := CreateHuman ;
45331: LD_ADDR_VAR 0 12
45335: PUSH
45336: CALL_OW 44
45340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45341: LD_VAR 0 12
45345: PPUSH
45346: LD_VAR 0 8
45350: PPUSH
45351: LD_INT 0
45353: PPUSH
45354: CALL 51965 0 3
// end ;
45358: GO 45312
45360: POP
45361: POP
// if tigers then
45362: LD_VAR 0 2
45366: IFFALSE 45450
// for i = 1 to tigers do
45368: LD_ADDR_VAR 0 11
45372: PUSH
45373: DOUBLE
45374: LD_INT 1
45376: DEC
45377: ST_TO_ADDR
45378: LD_VAR 0 2
45382: PUSH
45383: FOR_TO
45384: IFFALSE 45448
// begin hc_class = class_tiger ;
45386: LD_ADDR_OWVAR 28
45390: PUSH
45391: LD_INT 14
45393: ST_TO_ADDR
// hc_gallery =  ;
45394: LD_ADDR_OWVAR 33
45398: PUSH
45399: LD_STRING 
45401: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45402: LD_ADDR_OWVAR 35
45406: PUSH
45407: LD_INT 7
45409: NEG
45410: PPUSH
45411: LD_INT 7
45413: PPUSH
45414: CALL_OW 12
45418: ST_TO_ADDR
// animal := CreateHuman ;
45419: LD_ADDR_VAR 0 12
45423: PUSH
45424: CALL_OW 44
45428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45429: LD_VAR 0 12
45433: PPUSH
45434: LD_VAR 0 8
45438: PPUSH
45439: LD_INT 0
45441: PPUSH
45442: CALL 51965 0 3
// end ;
45446: GO 45383
45448: POP
45449: POP
// if apemans then
45450: LD_VAR 0 3
45454: IFFALSE 45577
// for i = 1 to apemans do
45456: LD_ADDR_VAR 0 11
45460: PUSH
45461: DOUBLE
45462: LD_INT 1
45464: DEC
45465: ST_TO_ADDR
45466: LD_VAR 0 3
45470: PUSH
45471: FOR_TO
45472: IFFALSE 45575
// begin hc_class = class_apeman ;
45474: LD_ADDR_OWVAR 28
45478: PUSH
45479: LD_INT 12
45481: ST_TO_ADDR
// hc_gallery =  ;
45482: LD_ADDR_OWVAR 33
45486: PUSH
45487: LD_STRING 
45489: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45490: LD_ADDR_OWVAR 35
45494: PUSH
45495: LD_INT 5
45497: NEG
45498: PPUSH
45499: LD_INT 5
45501: PPUSH
45502: CALL_OW 12
45506: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45507: LD_ADDR_OWVAR 31
45511: PUSH
45512: LD_INT 1
45514: PPUSH
45515: LD_INT 3
45517: PPUSH
45518: CALL_OW 12
45522: PUSH
45523: LD_INT 1
45525: PPUSH
45526: LD_INT 3
45528: PPUSH
45529: CALL_OW 12
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// animal := CreateHuman ;
45546: LD_ADDR_VAR 0 12
45550: PUSH
45551: CALL_OW 44
45555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45556: LD_VAR 0 12
45560: PPUSH
45561: LD_VAR 0 8
45565: PPUSH
45566: LD_INT 0
45568: PPUSH
45569: CALL 51965 0 3
// end ;
45573: GO 45471
45575: POP
45576: POP
// if enchidnas then
45577: LD_VAR 0 4
45581: IFFALSE 45648
// for i = 1 to enchidnas do
45583: LD_ADDR_VAR 0 11
45587: PUSH
45588: DOUBLE
45589: LD_INT 1
45591: DEC
45592: ST_TO_ADDR
45593: LD_VAR 0 4
45597: PUSH
45598: FOR_TO
45599: IFFALSE 45646
// begin hc_class = 13 ;
45601: LD_ADDR_OWVAR 28
45605: PUSH
45606: LD_INT 13
45608: ST_TO_ADDR
// hc_gallery =  ;
45609: LD_ADDR_OWVAR 33
45613: PUSH
45614: LD_STRING 
45616: ST_TO_ADDR
// animal := CreateHuman ;
45617: LD_ADDR_VAR 0 12
45621: PUSH
45622: CALL_OW 44
45626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45627: LD_VAR 0 12
45631: PPUSH
45632: LD_VAR 0 8
45636: PPUSH
45637: LD_INT 0
45639: PPUSH
45640: CALL 51965 0 3
// end ;
45644: GO 45598
45646: POP
45647: POP
// if fishes then
45648: LD_VAR 0 7
45652: IFFALSE 45719
// for i = 1 to fishes do
45654: LD_ADDR_VAR 0 11
45658: PUSH
45659: DOUBLE
45660: LD_INT 1
45662: DEC
45663: ST_TO_ADDR
45664: LD_VAR 0 7
45668: PUSH
45669: FOR_TO
45670: IFFALSE 45717
// begin hc_class = 20 ;
45672: LD_ADDR_OWVAR 28
45676: PUSH
45677: LD_INT 20
45679: ST_TO_ADDR
// hc_gallery =  ;
45680: LD_ADDR_OWVAR 33
45684: PUSH
45685: LD_STRING 
45687: ST_TO_ADDR
// animal := CreateHuman ;
45688: LD_ADDR_VAR 0 12
45692: PUSH
45693: CALL_OW 44
45697: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45698: LD_VAR 0 12
45702: PPUSH
45703: LD_VAR 0 9
45707: PPUSH
45708: LD_INT 0
45710: PPUSH
45711: CALL 51965 0 3
// end ;
45715: GO 45669
45717: POP
45718: POP
// end ;
45719: LD_VAR 0 10
45723: RET
// export function WantHeal ( sci , unit ) ; begin
45724: LD_INT 0
45726: PPUSH
// if GetTaskList ( sci ) > 0 then
45727: LD_VAR 0 1
45731: PPUSH
45732: CALL_OW 437
45736: PUSH
45737: LD_INT 0
45739: GREATER
45740: IFFALSE 45810
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45742: LD_VAR 0 1
45746: PPUSH
45747: CALL_OW 437
45751: PUSH
45752: LD_INT 1
45754: ARRAY
45755: PUSH
45756: LD_INT 1
45758: ARRAY
45759: PUSH
45760: LD_STRING l
45762: EQUAL
45763: PUSH
45764: LD_VAR 0 1
45768: PPUSH
45769: CALL_OW 437
45773: PUSH
45774: LD_INT 1
45776: ARRAY
45777: PUSH
45778: LD_INT 4
45780: ARRAY
45781: PUSH
45782: LD_VAR 0 2
45786: EQUAL
45787: AND
45788: IFFALSE 45800
// result := true else
45790: LD_ADDR_VAR 0 3
45794: PUSH
45795: LD_INT 1
45797: ST_TO_ADDR
45798: GO 45808
// result := false ;
45800: LD_ADDR_VAR 0 3
45804: PUSH
45805: LD_INT 0
45807: ST_TO_ADDR
// end else
45808: GO 45818
// result := false ;
45810: LD_ADDR_VAR 0 3
45814: PUSH
45815: LD_INT 0
45817: ST_TO_ADDR
// end ;
45818: LD_VAR 0 3
45822: RET
// export function HealTarget ( sci ) ; begin
45823: LD_INT 0
45825: PPUSH
// if not sci then
45826: LD_VAR 0 1
45830: NOT
45831: IFFALSE 45835
// exit ;
45833: GO 45900
// result := 0 ;
45835: LD_ADDR_VAR 0 2
45839: PUSH
45840: LD_INT 0
45842: ST_TO_ADDR
// if GetTaskList ( sci ) then
45843: LD_VAR 0 1
45847: PPUSH
45848: CALL_OW 437
45852: IFFALSE 45900
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45854: LD_VAR 0 1
45858: PPUSH
45859: CALL_OW 437
45863: PUSH
45864: LD_INT 1
45866: ARRAY
45867: PUSH
45868: LD_INT 1
45870: ARRAY
45871: PUSH
45872: LD_STRING l
45874: EQUAL
45875: IFFALSE 45900
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45877: LD_ADDR_VAR 0 2
45881: PUSH
45882: LD_VAR 0 1
45886: PPUSH
45887: CALL_OW 437
45891: PUSH
45892: LD_INT 1
45894: ARRAY
45895: PUSH
45896: LD_INT 4
45898: ARRAY
45899: ST_TO_ADDR
// end ;
45900: LD_VAR 0 2
45904: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45905: LD_INT 0
45907: PPUSH
45908: PPUSH
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
// if not list then
45941: LD_VAR 0 1
45945: NOT
45946: IFFALSE 45950
// exit ;
45948: GO 50576
// base := list [ 1 ] ;
45950: LD_ADDR_VAR 0 3
45954: PUSH
45955: LD_VAR 0 1
45959: PUSH
45960: LD_INT 1
45962: ARRAY
45963: ST_TO_ADDR
// group := list [ 2 ] ;
45964: LD_ADDR_VAR 0 4
45968: PUSH
45969: LD_VAR 0 1
45973: PUSH
45974: LD_INT 2
45976: ARRAY
45977: ST_TO_ADDR
// path := list [ 3 ] ;
45978: LD_ADDR_VAR 0 5
45982: PUSH
45983: LD_VAR 0 1
45987: PUSH
45988: LD_INT 3
45990: ARRAY
45991: ST_TO_ADDR
// flags := list [ 4 ] ;
45992: LD_ADDR_VAR 0 6
45996: PUSH
45997: LD_VAR 0 1
46001: PUSH
46002: LD_INT 4
46004: ARRAY
46005: ST_TO_ADDR
// mined := [ ] ;
46006: LD_ADDR_VAR 0 27
46010: PUSH
46011: EMPTY
46012: ST_TO_ADDR
// bombed := [ ] ;
46013: LD_ADDR_VAR 0 28
46017: PUSH
46018: EMPTY
46019: ST_TO_ADDR
// healers := [ ] ;
46020: LD_ADDR_VAR 0 31
46024: PUSH
46025: EMPTY
46026: ST_TO_ADDR
// to_heal := [ ] ;
46027: LD_ADDR_VAR 0 30
46031: PUSH
46032: EMPTY
46033: ST_TO_ADDR
// repairs := [ ] ;
46034: LD_ADDR_VAR 0 33
46038: PUSH
46039: EMPTY
46040: ST_TO_ADDR
// to_repair := [ ] ;
46041: LD_ADDR_VAR 0 32
46045: PUSH
46046: EMPTY
46047: ST_TO_ADDR
// if not group or not path then
46048: LD_VAR 0 4
46052: NOT
46053: PUSH
46054: LD_VAR 0 5
46058: NOT
46059: OR
46060: IFFALSE 46064
// exit ;
46062: GO 50576
// side := GetSide ( group [ 1 ] ) ;
46064: LD_ADDR_VAR 0 35
46068: PUSH
46069: LD_VAR 0 4
46073: PUSH
46074: LD_INT 1
46076: ARRAY
46077: PPUSH
46078: CALL_OW 255
46082: ST_TO_ADDR
// if flags then
46083: LD_VAR 0 6
46087: IFFALSE 46231
// begin f_ignore_area := flags [ 1 ] ;
46089: LD_ADDR_VAR 0 17
46093: PUSH
46094: LD_VAR 0 6
46098: PUSH
46099: LD_INT 1
46101: ARRAY
46102: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46103: LD_ADDR_VAR 0 18
46107: PUSH
46108: LD_VAR 0 6
46112: PUSH
46113: LD_INT 2
46115: ARRAY
46116: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46117: LD_ADDR_VAR 0 19
46121: PUSH
46122: LD_VAR 0 6
46126: PUSH
46127: LD_INT 3
46129: ARRAY
46130: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46131: LD_ADDR_VAR 0 20
46135: PUSH
46136: LD_VAR 0 6
46140: PUSH
46141: LD_INT 4
46143: ARRAY
46144: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46145: LD_ADDR_VAR 0 21
46149: PUSH
46150: LD_VAR 0 6
46154: PUSH
46155: LD_INT 5
46157: ARRAY
46158: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46159: LD_ADDR_VAR 0 22
46163: PUSH
46164: LD_VAR 0 6
46168: PUSH
46169: LD_INT 6
46171: ARRAY
46172: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46173: LD_ADDR_VAR 0 23
46177: PUSH
46178: LD_VAR 0 6
46182: PUSH
46183: LD_INT 7
46185: ARRAY
46186: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46187: LD_ADDR_VAR 0 24
46191: PUSH
46192: LD_VAR 0 6
46196: PUSH
46197: LD_INT 8
46199: ARRAY
46200: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46201: LD_ADDR_VAR 0 25
46205: PUSH
46206: LD_VAR 0 6
46210: PUSH
46211: LD_INT 9
46213: ARRAY
46214: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46215: LD_ADDR_VAR 0 26
46219: PUSH
46220: LD_VAR 0 6
46224: PUSH
46225: LD_INT 10
46227: ARRAY
46228: ST_TO_ADDR
// end else
46229: GO 46311
// begin f_ignore_area := false ;
46231: LD_ADDR_VAR 0 17
46235: PUSH
46236: LD_INT 0
46238: ST_TO_ADDR
// f_capture := false ;
46239: LD_ADDR_VAR 0 18
46243: PUSH
46244: LD_INT 0
46246: ST_TO_ADDR
// f_ignore_civ := false ;
46247: LD_ADDR_VAR 0 19
46251: PUSH
46252: LD_INT 0
46254: ST_TO_ADDR
// f_murder := false ;
46255: LD_ADDR_VAR 0 20
46259: PUSH
46260: LD_INT 0
46262: ST_TO_ADDR
// f_mines := false ;
46263: LD_ADDR_VAR 0 21
46267: PUSH
46268: LD_INT 0
46270: ST_TO_ADDR
// f_repair := false ;
46271: LD_ADDR_VAR 0 22
46275: PUSH
46276: LD_INT 0
46278: ST_TO_ADDR
// f_heal := false ;
46279: LD_ADDR_VAR 0 23
46283: PUSH
46284: LD_INT 0
46286: ST_TO_ADDR
// f_spacetime := false ;
46287: LD_ADDR_VAR 0 24
46291: PUSH
46292: LD_INT 0
46294: ST_TO_ADDR
// f_attack_depot := false ;
46295: LD_ADDR_VAR 0 25
46299: PUSH
46300: LD_INT 0
46302: ST_TO_ADDR
// f_crawl := false ;
46303: LD_ADDR_VAR 0 26
46307: PUSH
46308: LD_INT 0
46310: ST_TO_ADDR
// end ; if f_heal then
46311: LD_VAR 0 23
46315: IFFALSE 46342
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
46317: LD_ADDR_VAR 0 31
46321: PUSH
46322: LD_VAR 0 4
46326: PPUSH
46327: LD_INT 25
46329: PUSH
46330: LD_INT 4
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PPUSH
46337: CALL_OW 72
46341: ST_TO_ADDR
// if f_repair then
46342: LD_VAR 0 22
46346: IFFALSE 46373
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
46348: LD_ADDR_VAR 0 33
46352: PUSH
46353: LD_VAR 0 4
46357: PPUSH
46358: LD_INT 25
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PPUSH
46368: CALL_OW 72
46372: ST_TO_ADDR
// units_path := [ ] ;
46373: LD_ADDR_VAR 0 16
46377: PUSH
46378: EMPTY
46379: ST_TO_ADDR
// for i = 1 to group do
46380: LD_ADDR_VAR 0 7
46384: PUSH
46385: DOUBLE
46386: LD_INT 1
46388: DEC
46389: ST_TO_ADDR
46390: LD_VAR 0 4
46394: PUSH
46395: FOR_TO
46396: IFFALSE 46425
// units_path := Replace ( units_path , i , path ) ;
46398: LD_ADDR_VAR 0 16
46402: PUSH
46403: LD_VAR 0 16
46407: PPUSH
46408: LD_VAR 0 7
46412: PPUSH
46413: LD_VAR 0 5
46417: PPUSH
46418: CALL_OW 1
46422: ST_TO_ADDR
46423: GO 46395
46425: POP
46426: POP
// repeat for i = group downto 1 do
46427: LD_ADDR_VAR 0 7
46431: PUSH
46432: DOUBLE
46433: LD_VAR 0 4
46437: INC
46438: ST_TO_ADDR
46439: LD_INT 1
46441: PUSH
46442: FOR_DOWNTO
46443: IFFALSE 50539
// begin wait ( 5 ) ;
46445: LD_INT 5
46447: PPUSH
46448: CALL_OW 67
// tmp := [ ] ;
46452: LD_ADDR_VAR 0 14
46456: PUSH
46457: EMPTY
46458: ST_TO_ADDR
// attacking := false ;
46459: LD_ADDR_VAR 0 29
46463: PUSH
46464: LD_INT 0
46466: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46467: LD_VAR 0 4
46471: PUSH
46472: LD_VAR 0 7
46476: ARRAY
46477: PPUSH
46478: CALL_OW 301
46482: PUSH
46483: LD_VAR 0 4
46487: PUSH
46488: LD_VAR 0 7
46492: ARRAY
46493: NOT
46494: OR
46495: IFFALSE 46604
// begin if GetType ( group [ i ] ) = unit_human then
46497: LD_VAR 0 4
46501: PUSH
46502: LD_VAR 0 7
46506: ARRAY
46507: PPUSH
46508: CALL_OW 247
46512: PUSH
46513: LD_INT 1
46515: EQUAL
46516: IFFALSE 46562
// begin to_heal := to_heal diff group [ i ] ;
46518: LD_ADDR_VAR 0 30
46522: PUSH
46523: LD_VAR 0 30
46527: PUSH
46528: LD_VAR 0 4
46532: PUSH
46533: LD_VAR 0 7
46537: ARRAY
46538: DIFF
46539: ST_TO_ADDR
// healers := healers diff group [ i ] ;
46540: LD_ADDR_VAR 0 31
46544: PUSH
46545: LD_VAR 0 31
46549: PUSH
46550: LD_VAR 0 4
46554: PUSH
46555: LD_VAR 0 7
46559: ARRAY
46560: DIFF
46561: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
46562: LD_ADDR_VAR 0 4
46566: PUSH
46567: LD_VAR 0 4
46571: PPUSH
46572: LD_VAR 0 7
46576: PPUSH
46577: CALL_OW 3
46581: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46582: LD_ADDR_VAR 0 16
46586: PUSH
46587: LD_VAR 0 16
46591: PPUSH
46592: LD_VAR 0 7
46596: PPUSH
46597: CALL_OW 3
46601: ST_TO_ADDR
// continue ;
46602: GO 46442
// end ; if f_repair then
46604: LD_VAR 0 22
46608: IFFALSE 47097
// begin if GetType ( group [ i ] ) = unit_vehicle then
46610: LD_VAR 0 4
46614: PUSH
46615: LD_VAR 0 7
46619: ARRAY
46620: PPUSH
46621: CALL_OW 247
46625: PUSH
46626: LD_INT 2
46628: EQUAL
46629: IFFALSE 46819
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
46631: LD_VAR 0 4
46635: PUSH
46636: LD_VAR 0 7
46640: ARRAY
46641: PPUSH
46642: CALL_OW 256
46646: PUSH
46647: LD_INT 700
46649: LESS
46650: PUSH
46651: LD_VAR 0 4
46655: PUSH
46656: LD_VAR 0 7
46660: ARRAY
46661: PUSH
46662: LD_VAR 0 32
46666: IN
46667: NOT
46668: AND
46669: IFFALSE 46693
// to_repair := to_repair union group [ i ] ;
46671: LD_ADDR_VAR 0 32
46675: PUSH
46676: LD_VAR 0 32
46680: PUSH
46681: LD_VAR 0 4
46685: PUSH
46686: LD_VAR 0 7
46690: ARRAY
46691: UNION
46692: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
46693: LD_VAR 0 4
46697: PUSH
46698: LD_VAR 0 7
46702: ARRAY
46703: PPUSH
46704: CALL_OW 256
46708: PUSH
46709: LD_INT 1000
46711: EQUAL
46712: PUSH
46713: LD_VAR 0 4
46717: PUSH
46718: LD_VAR 0 7
46722: ARRAY
46723: PUSH
46724: LD_VAR 0 32
46728: IN
46729: AND
46730: IFFALSE 46754
// to_repair := to_repair diff group [ i ] ;
46732: LD_ADDR_VAR 0 32
46736: PUSH
46737: LD_VAR 0 32
46741: PUSH
46742: LD_VAR 0 4
46746: PUSH
46747: LD_VAR 0 7
46751: ARRAY
46752: DIFF
46753: ST_TO_ADDR
// if group [ i ] in to_repair then
46754: LD_VAR 0 4
46758: PUSH
46759: LD_VAR 0 7
46763: ARRAY
46764: PUSH
46765: LD_VAR 0 32
46769: IN
46770: IFFALSE 46817
// begin if not IsInArea ( group [ i ] , f_repair ) then
46772: LD_VAR 0 4
46776: PUSH
46777: LD_VAR 0 7
46781: ARRAY
46782: PPUSH
46783: LD_VAR 0 22
46787: PPUSH
46788: CALL_OW 308
46792: NOT
46793: IFFALSE 46815
// ComMoveToArea ( group [ i ] , f_repair ) ;
46795: LD_VAR 0 4
46799: PUSH
46800: LD_VAR 0 7
46804: ARRAY
46805: PPUSH
46806: LD_VAR 0 22
46810: PPUSH
46811: CALL_OW 113
// continue ;
46815: GO 46442
// end ; end else
46817: GO 47097
// if group [ i ] in repairs then
46819: LD_VAR 0 4
46823: PUSH
46824: LD_VAR 0 7
46828: ARRAY
46829: PUSH
46830: LD_VAR 0 33
46834: IN
46835: IFFALSE 47097
// begin if IsInUnit ( group [ i ] ) then
46837: LD_VAR 0 4
46841: PUSH
46842: LD_VAR 0 7
46846: ARRAY
46847: PPUSH
46848: CALL_OW 310
46852: IFFALSE 46920
// begin z := IsInUnit ( group [ i ] ) ;
46854: LD_ADDR_VAR 0 13
46858: PUSH
46859: LD_VAR 0 4
46863: PUSH
46864: LD_VAR 0 7
46868: ARRAY
46869: PPUSH
46870: CALL_OW 310
46874: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46875: LD_VAR 0 13
46879: PUSH
46880: LD_VAR 0 32
46884: IN
46885: PUSH
46886: LD_VAR 0 13
46890: PPUSH
46891: LD_VAR 0 22
46895: PPUSH
46896: CALL_OW 308
46900: AND
46901: IFFALSE 46918
// ComExitVehicle ( group [ i ] ) ;
46903: LD_VAR 0 4
46907: PUSH
46908: LD_VAR 0 7
46912: ARRAY
46913: PPUSH
46914: CALL_OW 121
// end else
46918: GO 47097
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46920: LD_ADDR_VAR 0 13
46924: PUSH
46925: LD_VAR 0 4
46929: PPUSH
46930: LD_INT 95
46932: PUSH
46933: LD_VAR 0 22
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 58
46944: PUSH
46945: EMPTY
46946: LIST
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PPUSH
46952: CALL_OW 72
46956: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46957: LD_VAR 0 4
46961: PUSH
46962: LD_VAR 0 7
46966: ARRAY
46967: PPUSH
46968: CALL_OW 314
46972: NOT
46973: IFFALSE 47095
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46975: LD_ADDR_VAR 0 10
46979: PUSH
46980: LD_VAR 0 13
46984: PPUSH
46985: LD_VAR 0 4
46989: PUSH
46990: LD_VAR 0 7
46994: ARRAY
46995: PPUSH
46996: CALL_OW 74
47000: ST_TO_ADDR
// if not x then
47001: LD_VAR 0 10
47005: NOT
47006: IFFALSE 47010
// continue ;
47008: GO 46442
// if GetLives ( x ) < 1000 then
47010: LD_VAR 0 10
47014: PPUSH
47015: CALL_OW 256
47019: PUSH
47020: LD_INT 1000
47022: LESS
47023: IFFALSE 47047
// ComRepairVehicle ( group [ i ] , x ) else
47025: LD_VAR 0 4
47029: PUSH
47030: LD_VAR 0 7
47034: ARRAY
47035: PPUSH
47036: LD_VAR 0 10
47040: PPUSH
47041: CALL_OW 129
47045: GO 47095
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47047: LD_VAR 0 23
47051: PUSH
47052: LD_VAR 0 4
47056: PUSH
47057: LD_VAR 0 7
47061: ARRAY
47062: PPUSH
47063: CALL_OW 256
47067: PUSH
47068: LD_INT 1000
47070: LESS
47071: AND
47072: NOT
47073: IFFALSE 47095
// ComEnterUnit ( group [ i ] , x ) ;
47075: LD_VAR 0 4
47079: PUSH
47080: LD_VAR 0 7
47084: ARRAY
47085: PPUSH
47086: LD_VAR 0 10
47090: PPUSH
47091: CALL_OW 120
// end ; continue ;
47095: GO 46442
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47097: LD_VAR 0 23
47101: PUSH
47102: LD_VAR 0 4
47106: PUSH
47107: LD_VAR 0 7
47111: ARRAY
47112: PPUSH
47113: CALL_OW 247
47117: PUSH
47118: LD_INT 1
47120: EQUAL
47121: AND
47122: IFFALSE 47600
// begin if group [ i ] in healers then
47124: LD_VAR 0 4
47128: PUSH
47129: LD_VAR 0 7
47133: ARRAY
47134: PUSH
47135: LD_VAR 0 31
47139: IN
47140: IFFALSE 47413
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47142: LD_VAR 0 4
47146: PUSH
47147: LD_VAR 0 7
47151: ARRAY
47152: PPUSH
47153: LD_VAR 0 23
47157: PPUSH
47158: CALL_OW 308
47162: NOT
47163: PUSH
47164: LD_VAR 0 4
47168: PUSH
47169: LD_VAR 0 7
47173: ARRAY
47174: PPUSH
47175: CALL_OW 314
47179: NOT
47180: AND
47181: IFFALSE 47205
// ComMoveToArea ( group [ i ] , f_heal ) else
47183: LD_VAR 0 4
47187: PUSH
47188: LD_VAR 0 7
47192: ARRAY
47193: PPUSH
47194: LD_VAR 0 23
47198: PPUSH
47199: CALL_OW 113
47203: GO 47411
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47205: LD_VAR 0 4
47209: PUSH
47210: LD_VAR 0 7
47214: ARRAY
47215: PPUSH
47216: CALL 45823 0 1
47220: PPUSH
47221: CALL_OW 256
47225: PUSH
47226: LD_INT 1000
47228: EQUAL
47229: IFFALSE 47248
// ComStop ( group [ i ] ) else
47231: LD_VAR 0 4
47235: PUSH
47236: LD_VAR 0 7
47240: ARRAY
47241: PPUSH
47242: CALL_OW 141
47246: GO 47411
// if not HasTask ( group [ i ] ) and to_heal then
47248: LD_VAR 0 4
47252: PUSH
47253: LD_VAR 0 7
47257: ARRAY
47258: PPUSH
47259: CALL_OW 314
47263: NOT
47264: PUSH
47265: LD_VAR 0 30
47269: AND
47270: IFFALSE 47411
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
47272: LD_ADDR_VAR 0 13
47276: PUSH
47277: LD_VAR 0 30
47281: PPUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 54
47287: PUSH
47288: EMPTY
47289: LIST
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PPUSH
47295: CALL_OW 72
47299: PPUSH
47300: LD_VAR 0 4
47304: PUSH
47305: LD_VAR 0 7
47309: ARRAY
47310: PPUSH
47311: CALL_OW 74
47315: ST_TO_ADDR
// if z then
47316: LD_VAR 0 13
47320: IFFALSE 47411
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
47322: LD_INT 91
47324: PUSH
47325: LD_VAR 0 13
47329: PUSH
47330: LD_INT 10
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 81
47340: PUSH
47341: LD_VAR 0 13
47345: PPUSH
47346: CALL_OW 255
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PPUSH
47359: CALL_OW 69
47363: PUSH
47364: LD_INT 0
47366: EQUAL
47367: IFFALSE 47391
// ComHeal ( group [ i ] , z ) else
47369: LD_VAR 0 4
47373: PUSH
47374: LD_VAR 0 7
47378: ARRAY
47379: PPUSH
47380: LD_VAR 0 13
47384: PPUSH
47385: CALL_OW 128
47389: GO 47411
// ComMoveToArea ( group [ i ] , f_heal ) ;
47391: LD_VAR 0 4
47395: PUSH
47396: LD_VAR 0 7
47400: ARRAY
47401: PPUSH
47402: LD_VAR 0 23
47406: PPUSH
47407: CALL_OW 113
// end ; continue ;
47411: GO 46442
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
47413: LD_VAR 0 4
47417: PUSH
47418: LD_VAR 0 7
47422: ARRAY
47423: PPUSH
47424: CALL_OW 256
47428: PUSH
47429: LD_INT 700
47431: LESS
47432: PUSH
47433: LD_VAR 0 4
47437: PUSH
47438: LD_VAR 0 7
47442: ARRAY
47443: PUSH
47444: LD_VAR 0 30
47448: IN
47449: NOT
47450: AND
47451: IFFALSE 47475
// to_heal := to_heal union group [ i ] ;
47453: LD_ADDR_VAR 0 30
47457: PUSH
47458: LD_VAR 0 30
47462: PUSH
47463: LD_VAR 0 4
47467: PUSH
47468: LD_VAR 0 7
47472: ARRAY
47473: UNION
47474: ST_TO_ADDR
// if group [ i ] in to_heal then
47475: LD_VAR 0 4
47479: PUSH
47480: LD_VAR 0 7
47484: ARRAY
47485: PUSH
47486: LD_VAR 0 30
47490: IN
47491: IFFALSE 47600
// begin if GetLives ( group [ i ] ) = 1000 then
47493: LD_VAR 0 4
47497: PUSH
47498: LD_VAR 0 7
47502: ARRAY
47503: PPUSH
47504: CALL_OW 256
47508: PUSH
47509: LD_INT 1000
47511: EQUAL
47512: IFFALSE 47538
// to_heal := to_heal diff group [ i ] else
47514: LD_ADDR_VAR 0 30
47518: PUSH
47519: LD_VAR 0 30
47523: PUSH
47524: LD_VAR 0 4
47528: PUSH
47529: LD_VAR 0 7
47533: ARRAY
47534: DIFF
47535: ST_TO_ADDR
47536: GO 47600
// begin if not IsInArea ( group [ i ] , to_heal ) then
47538: LD_VAR 0 4
47542: PUSH
47543: LD_VAR 0 7
47547: ARRAY
47548: PPUSH
47549: LD_VAR 0 30
47553: PPUSH
47554: CALL_OW 308
47558: NOT
47559: IFFALSE 47583
// ComMoveToArea ( group [ i ] , f_heal ) else
47561: LD_VAR 0 4
47565: PUSH
47566: LD_VAR 0 7
47570: ARRAY
47571: PPUSH
47572: LD_VAR 0 23
47576: PPUSH
47577: CALL_OW 113
47581: GO 47598
// ComHold ( group [ i ] ) ;
47583: LD_VAR 0 4
47587: PUSH
47588: LD_VAR 0 7
47592: ARRAY
47593: PPUSH
47594: CALL_OW 140
// continue ;
47598: GO 46442
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47600: LD_VAR 0 4
47604: PUSH
47605: LD_VAR 0 7
47609: ARRAY
47610: PPUSH
47611: LD_INT 10
47613: PPUSH
47614: CALL 44220 0 2
47618: NOT
47619: PUSH
47620: LD_VAR 0 16
47624: PUSH
47625: LD_VAR 0 7
47629: ARRAY
47630: PUSH
47631: EMPTY
47632: EQUAL
47633: NOT
47634: AND
47635: IFFALSE 47901
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47637: LD_VAR 0 4
47641: PUSH
47642: LD_VAR 0 7
47646: ARRAY
47647: PPUSH
47648: CALL_OW 262
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: IN
47663: IFFALSE 47704
// if GetFuel ( group [ i ] ) < 10 then
47665: LD_VAR 0 4
47669: PUSH
47670: LD_VAR 0 7
47674: ARRAY
47675: PPUSH
47676: CALL_OW 261
47680: PUSH
47681: LD_INT 10
47683: LESS
47684: IFFALSE 47704
// SetFuel ( group [ i ] , 12 ) ;
47686: LD_VAR 0 4
47690: PUSH
47691: LD_VAR 0 7
47695: ARRAY
47696: PPUSH
47697: LD_INT 12
47699: PPUSH
47700: CALL_OW 240
// if units_path [ i ] then
47704: LD_VAR 0 16
47708: PUSH
47709: LD_VAR 0 7
47713: ARRAY
47714: IFFALSE 47899
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47716: LD_VAR 0 4
47720: PUSH
47721: LD_VAR 0 7
47725: ARRAY
47726: PPUSH
47727: LD_VAR 0 16
47731: PUSH
47732: LD_VAR 0 7
47736: ARRAY
47737: PUSH
47738: LD_INT 1
47740: ARRAY
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: LD_VAR 0 16
47750: PUSH
47751: LD_VAR 0 7
47755: ARRAY
47756: PUSH
47757: LD_INT 1
47759: ARRAY
47760: PUSH
47761: LD_INT 2
47763: ARRAY
47764: PPUSH
47765: CALL_OW 297
47769: PUSH
47770: LD_INT 6
47772: GREATER
47773: IFFALSE 47848
// begin if not HasTask ( group [ i ] ) then
47775: LD_VAR 0 4
47779: PUSH
47780: LD_VAR 0 7
47784: ARRAY
47785: PPUSH
47786: CALL_OW 314
47790: NOT
47791: IFFALSE 47846
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47793: LD_VAR 0 4
47797: PUSH
47798: LD_VAR 0 7
47802: ARRAY
47803: PPUSH
47804: LD_VAR 0 16
47808: PUSH
47809: LD_VAR 0 7
47813: ARRAY
47814: PUSH
47815: LD_INT 1
47817: ARRAY
47818: PUSH
47819: LD_INT 1
47821: ARRAY
47822: PPUSH
47823: LD_VAR 0 16
47827: PUSH
47828: LD_VAR 0 7
47832: ARRAY
47833: PUSH
47834: LD_INT 1
47836: ARRAY
47837: PUSH
47838: LD_INT 2
47840: ARRAY
47841: PPUSH
47842: CALL_OW 114
// end else
47846: GO 47899
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47848: LD_ADDR_VAR 0 15
47852: PUSH
47853: LD_VAR 0 16
47857: PUSH
47858: LD_VAR 0 7
47862: ARRAY
47863: PPUSH
47864: LD_INT 1
47866: PPUSH
47867: CALL_OW 3
47871: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47872: LD_ADDR_VAR 0 16
47876: PUSH
47877: LD_VAR 0 16
47881: PPUSH
47882: LD_VAR 0 7
47886: PPUSH
47887: LD_VAR 0 15
47891: PPUSH
47892: CALL_OW 1
47896: ST_TO_ADDR
// continue ;
47897: GO 46442
// end ; end ; end else
47899: GO 50537
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47901: LD_ADDR_VAR 0 14
47905: PUSH
47906: LD_INT 81
47908: PUSH
47909: LD_VAR 0 4
47913: PUSH
47914: LD_VAR 0 7
47918: ARRAY
47919: PPUSH
47920: CALL_OW 255
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PPUSH
47929: CALL_OW 69
47933: ST_TO_ADDR
// if not tmp then
47934: LD_VAR 0 14
47938: NOT
47939: IFFALSE 47943
// continue ;
47941: GO 46442
// if f_ignore_area then
47943: LD_VAR 0 17
47947: IFFALSE 48035
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47949: LD_ADDR_VAR 0 15
47953: PUSH
47954: LD_VAR 0 14
47958: PPUSH
47959: LD_INT 3
47961: PUSH
47962: LD_INT 92
47964: PUSH
47965: LD_VAR 0 17
47969: PUSH
47970: LD_INT 1
47972: ARRAY
47973: PUSH
47974: LD_VAR 0 17
47978: PUSH
47979: LD_INT 2
47981: ARRAY
47982: PUSH
47983: LD_VAR 0 17
47987: PUSH
47988: LD_INT 3
47990: ARRAY
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PPUSH
48002: CALL_OW 72
48006: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48007: LD_VAR 0 14
48011: PUSH
48012: LD_VAR 0 15
48016: DIFF
48017: IFFALSE 48035
// tmp := tmp diff tmp2 ;
48019: LD_ADDR_VAR 0 14
48023: PUSH
48024: LD_VAR 0 14
48028: PUSH
48029: LD_VAR 0 15
48033: DIFF
48034: ST_TO_ADDR
// end ; if not f_murder then
48035: LD_VAR 0 20
48039: NOT
48040: IFFALSE 48098
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48042: LD_ADDR_VAR 0 15
48046: PUSH
48047: LD_VAR 0 14
48051: PPUSH
48052: LD_INT 3
48054: PUSH
48055: LD_INT 50
48057: PUSH
48058: EMPTY
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PPUSH
48065: CALL_OW 72
48069: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48070: LD_VAR 0 14
48074: PUSH
48075: LD_VAR 0 15
48079: DIFF
48080: IFFALSE 48098
// tmp := tmp diff tmp2 ;
48082: LD_ADDR_VAR 0 14
48086: PUSH
48087: LD_VAR 0 14
48091: PUSH
48092: LD_VAR 0 15
48096: DIFF
48097: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48098: LD_ADDR_VAR 0 14
48102: PUSH
48103: LD_VAR 0 4
48107: PUSH
48108: LD_VAR 0 7
48112: ARRAY
48113: PPUSH
48114: LD_VAR 0 14
48118: PPUSH
48119: LD_INT 1
48121: PPUSH
48122: LD_INT 1
48124: PPUSH
48125: CALL 17863 0 4
48129: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48130: LD_VAR 0 4
48134: PUSH
48135: LD_VAR 0 7
48139: ARRAY
48140: PPUSH
48141: CALL_OW 257
48145: PUSH
48146: LD_INT 1
48148: EQUAL
48149: IFFALSE 48597
// begin if WantPlant ( group [ i ] ) then
48151: LD_VAR 0 4
48155: PUSH
48156: LD_VAR 0 7
48160: ARRAY
48161: PPUSH
48162: CALL 17364 0 1
48166: IFFALSE 48170
// continue ;
48168: GO 46442
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48170: LD_VAR 0 18
48174: PUSH
48175: LD_VAR 0 4
48179: PUSH
48180: LD_VAR 0 7
48184: ARRAY
48185: PPUSH
48186: CALL_OW 310
48190: NOT
48191: AND
48192: PUSH
48193: LD_VAR 0 14
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PUSH
48202: LD_VAR 0 14
48206: PPUSH
48207: LD_INT 21
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 58
48219: PUSH
48220: EMPTY
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PPUSH
48227: CALL_OW 72
48231: IN
48232: AND
48233: IFFALSE 48269
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48235: LD_VAR 0 4
48239: PUSH
48240: LD_VAR 0 7
48244: ARRAY
48245: PPUSH
48246: LD_VAR 0 14
48250: PUSH
48251: LD_INT 1
48253: ARRAY
48254: PPUSH
48255: CALL_OW 120
// attacking := true ;
48259: LD_ADDR_VAR 0 29
48263: PUSH
48264: LD_INT 1
48266: ST_TO_ADDR
// continue ;
48267: GO 46442
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48269: LD_VAR 0 26
48273: PUSH
48274: LD_VAR 0 4
48278: PUSH
48279: LD_VAR 0 7
48283: ARRAY
48284: PPUSH
48285: CALL_OW 257
48289: PUSH
48290: LD_INT 1
48292: EQUAL
48293: AND
48294: PUSH
48295: LD_VAR 0 4
48299: PUSH
48300: LD_VAR 0 7
48304: ARRAY
48305: PPUSH
48306: CALL_OW 256
48310: PUSH
48311: LD_INT 800
48313: LESS
48314: AND
48315: PUSH
48316: LD_VAR 0 4
48320: PUSH
48321: LD_VAR 0 7
48325: ARRAY
48326: PPUSH
48327: CALL_OW 318
48331: NOT
48332: AND
48333: IFFALSE 48350
// ComCrawl ( group [ i ] ) ;
48335: LD_VAR 0 4
48339: PUSH
48340: LD_VAR 0 7
48344: ARRAY
48345: PPUSH
48346: CALL_OW 137
// if f_mines then
48350: LD_VAR 0 21
48354: IFFALSE 48597
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48356: LD_VAR 0 14
48360: PUSH
48361: LD_INT 1
48363: ARRAY
48364: PPUSH
48365: CALL_OW 247
48369: PUSH
48370: LD_INT 3
48372: EQUAL
48373: PUSH
48374: LD_VAR 0 14
48378: PUSH
48379: LD_INT 1
48381: ARRAY
48382: PUSH
48383: LD_VAR 0 27
48387: IN
48388: NOT
48389: AND
48390: IFFALSE 48597
// begin x := GetX ( tmp [ 1 ] ) ;
48392: LD_ADDR_VAR 0 10
48396: PUSH
48397: LD_VAR 0 14
48401: PUSH
48402: LD_INT 1
48404: ARRAY
48405: PPUSH
48406: CALL_OW 250
48410: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48411: LD_ADDR_VAR 0 11
48415: PUSH
48416: LD_VAR 0 14
48420: PUSH
48421: LD_INT 1
48423: ARRAY
48424: PPUSH
48425: CALL_OW 251
48429: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48430: LD_ADDR_VAR 0 12
48434: PUSH
48435: LD_VAR 0 4
48439: PUSH
48440: LD_VAR 0 7
48444: ARRAY
48445: PPUSH
48446: CALL 44305 0 1
48450: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48451: LD_VAR 0 4
48455: PUSH
48456: LD_VAR 0 7
48460: ARRAY
48461: PPUSH
48462: LD_VAR 0 10
48466: PPUSH
48467: LD_VAR 0 11
48471: PPUSH
48472: LD_VAR 0 14
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: PPUSH
48481: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
48485: LD_VAR 0 4
48489: PUSH
48490: LD_VAR 0 7
48494: ARRAY
48495: PPUSH
48496: LD_VAR 0 10
48500: PPUSH
48501: LD_VAR 0 12
48505: PPUSH
48506: LD_INT 7
48508: PPUSH
48509: CALL_OW 272
48513: PPUSH
48514: LD_VAR 0 11
48518: PPUSH
48519: LD_VAR 0 12
48523: PPUSH
48524: LD_INT 7
48526: PPUSH
48527: CALL_OW 273
48531: PPUSH
48532: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
48536: LD_VAR 0 4
48540: PUSH
48541: LD_VAR 0 7
48545: ARRAY
48546: PPUSH
48547: LD_INT 71
48549: PPUSH
48550: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48554: LD_ADDR_VAR 0 27
48558: PUSH
48559: LD_VAR 0 27
48563: PPUSH
48564: LD_VAR 0 27
48568: PUSH
48569: LD_INT 1
48571: PLUS
48572: PPUSH
48573: LD_VAR 0 14
48577: PUSH
48578: LD_INT 1
48580: ARRAY
48581: PPUSH
48582: CALL_OW 1
48586: ST_TO_ADDR
// attacking := true ;
48587: LD_ADDR_VAR 0 29
48591: PUSH
48592: LD_INT 1
48594: ST_TO_ADDR
// continue ;
48595: GO 46442
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48597: LD_VAR 0 4
48601: PUSH
48602: LD_VAR 0 7
48606: ARRAY
48607: PPUSH
48608: CALL_OW 257
48612: PUSH
48613: LD_INT 17
48615: EQUAL
48616: PUSH
48617: LD_VAR 0 4
48621: PUSH
48622: LD_VAR 0 7
48626: ARRAY
48627: PPUSH
48628: CALL_OW 110
48632: PUSH
48633: LD_INT 71
48635: EQUAL
48636: NOT
48637: AND
48638: IFFALSE 48784
// begin attacking := false ;
48640: LD_ADDR_VAR 0 29
48644: PUSH
48645: LD_INT 0
48647: ST_TO_ADDR
// k := 5 ;
48648: LD_ADDR_VAR 0 9
48652: PUSH
48653: LD_INT 5
48655: ST_TO_ADDR
// if tmp < k then
48656: LD_VAR 0 14
48660: PUSH
48661: LD_VAR 0 9
48665: LESS
48666: IFFALSE 48678
// k := tmp ;
48668: LD_ADDR_VAR 0 9
48672: PUSH
48673: LD_VAR 0 14
48677: ST_TO_ADDR
// for j = 1 to k do
48678: LD_ADDR_VAR 0 8
48682: PUSH
48683: DOUBLE
48684: LD_INT 1
48686: DEC
48687: ST_TO_ADDR
48688: LD_VAR 0 9
48692: PUSH
48693: FOR_TO
48694: IFFALSE 48782
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48696: LD_VAR 0 14
48700: PUSH
48701: LD_VAR 0 8
48705: ARRAY
48706: PUSH
48707: LD_VAR 0 14
48711: PPUSH
48712: LD_INT 58
48714: PUSH
48715: EMPTY
48716: LIST
48717: PPUSH
48718: CALL_OW 72
48722: IN
48723: NOT
48724: IFFALSE 48780
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48726: LD_VAR 0 4
48730: PUSH
48731: LD_VAR 0 7
48735: ARRAY
48736: PPUSH
48737: LD_VAR 0 14
48741: PUSH
48742: LD_VAR 0 8
48746: ARRAY
48747: PPUSH
48748: CALL_OW 115
// attacking := true ;
48752: LD_ADDR_VAR 0 29
48756: PUSH
48757: LD_INT 1
48759: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48760: LD_VAR 0 4
48764: PUSH
48765: LD_VAR 0 7
48769: ARRAY
48770: PPUSH
48771: LD_INT 71
48773: PPUSH
48774: CALL_OW 109
// continue ;
48778: GO 48693
// end ; end ;
48780: GO 48693
48782: POP
48783: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48784: LD_VAR 0 4
48788: PUSH
48789: LD_VAR 0 7
48793: ARRAY
48794: PPUSH
48795: CALL_OW 257
48799: PUSH
48800: LD_INT 8
48802: EQUAL
48803: PUSH
48804: LD_VAR 0 4
48808: PUSH
48809: LD_VAR 0 7
48813: ARRAY
48814: PPUSH
48815: CALL_OW 264
48819: PUSH
48820: LD_INT 28
48822: PUSH
48823: LD_INT 45
48825: PUSH
48826: LD_INT 7
48828: PUSH
48829: LD_INT 47
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: IN
48838: OR
48839: IFFALSE 49069
// begin attacking := false ;
48841: LD_ADDR_VAR 0 29
48845: PUSH
48846: LD_INT 0
48848: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48849: LD_VAR 0 14
48853: PUSH
48854: LD_INT 1
48856: ARRAY
48857: PPUSH
48858: CALL_OW 266
48862: PUSH
48863: LD_INT 32
48865: PUSH
48866: LD_INT 31
48868: PUSH
48869: LD_INT 33
48871: PUSH
48872: LD_INT 4
48874: PUSH
48875: LD_INT 5
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: IN
48885: IFFALSE 49069
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48887: LD_ADDR_VAR 0 9
48891: PUSH
48892: LD_VAR 0 14
48896: PUSH
48897: LD_INT 1
48899: ARRAY
48900: PPUSH
48901: CALL_OW 266
48905: PPUSH
48906: LD_VAR 0 14
48910: PUSH
48911: LD_INT 1
48913: ARRAY
48914: PPUSH
48915: CALL_OW 250
48919: PPUSH
48920: LD_VAR 0 14
48924: PUSH
48925: LD_INT 1
48927: ARRAY
48928: PPUSH
48929: CALL_OW 251
48933: PPUSH
48934: LD_VAR 0 14
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PPUSH
48943: CALL_OW 254
48947: PPUSH
48948: LD_VAR 0 14
48952: PUSH
48953: LD_INT 1
48955: ARRAY
48956: PPUSH
48957: CALL_OW 248
48961: PPUSH
48962: LD_INT 0
48964: PPUSH
48965: CALL 25675 0 6
48969: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48970: LD_ADDR_VAR 0 8
48974: PUSH
48975: LD_VAR 0 4
48979: PUSH
48980: LD_VAR 0 7
48984: ARRAY
48985: PPUSH
48986: LD_VAR 0 9
48990: PPUSH
48991: CALL 44368 0 2
48995: ST_TO_ADDR
// if j then
48996: LD_VAR 0 8
49000: IFFALSE 49069
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49002: LD_VAR 0 8
49006: PUSH
49007: LD_INT 1
49009: ARRAY
49010: PPUSH
49011: LD_VAR 0 8
49015: PUSH
49016: LD_INT 2
49018: ARRAY
49019: PPUSH
49020: CALL_OW 488
49024: IFFALSE 49069
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49026: LD_VAR 0 4
49030: PUSH
49031: LD_VAR 0 7
49035: ARRAY
49036: PPUSH
49037: LD_VAR 0 8
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PPUSH
49046: LD_VAR 0 8
49050: PUSH
49051: LD_INT 2
49053: ARRAY
49054: PPUSH
49055: CALL_OW 116
// attacking := true ;
49059: LD_ADDR_VAR 0 29
49063: PUSH
49064: LD_INT 1
49066: ST_TO_ADDR
// continue ;
49067: GO 46442
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49069: LD_VAR 0 4
49073: PUSH
49074: LD_VAR 0 7
49078: ARRAY
49079: PPUSH
49080: CALL_OW 265
49084: PUSH
49085: LD_INT 11
49087: EQUAL
49088: IFFALSE 49366
// begin k := 10 ;
49090: LD_ADDR_VAR 0 9
49094: PUSH
49095: LD_INT 10
49097: ST_TO_ADDR
// x := 0 ;
49098: LD_ADDR_VAR 0 10
49102: PUSH
49103: LD_INT 0
49105: ST_TO_ADDR
// if tmp < k then
49106: LD_VAR 0 14
49110: PUSH
49111: LD_VAR 0 9
49115: LESS
49116: IFFALSE 49128
// k := tmp ;
49118: LD_ADDR_VAR 0 9
49122: PUSH
49123: LD_VAR 0 14
49127: ST_TO_ADDR
// for j = k downto 1 do
49128: LD_ADDR_VAR 0 8
49132: PUSH
49133: DOUBLE
49134: LD_VAR 0 9
49138: INC
49139: ST_TO_ADDR
49140: LD_INT 1
49142: PUSH
49143: FOR_DOWNTO
49144: IFFALSE 49219
// begin if GetType ( tmp [ j ] ) = unit_human then
49146: LD_VAR 0 14
49150: PUSH
49151: LD_VAR 0 8
49155: ARRAY
49156: PPUSH
49157: CALL_OW 247
49161: PUSH
49162: LD_INT 1
49164: EQUAL
49165: IFFALSE 49217
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49167: LD_VAR 0 4
49171: PUSH
49172: LD_VAR 0 7
49176: ARRAY
49177: PPUSH
49178: LD_VAR 0 14
49182: PUSH
49183: LD_VAR 0 8
49187: ARRAY
49188: PPUSH
49189: CALL 44639 0 2
// x := tmp [ j ] ;
49193: LD_ADDR_VAR 0 10
49197: PUSH
49198: LD_VAR 0 14
49202: PUSH
49203: LD_VAR 0 8
49207: ARRAY
49208: ST_TO_ADDR
// attacking := true ;
49209: LD_ADDR_VAR 0 29
49213: PUSH
49214: LD_INT 1
49216: ST_TO_ADDR
// end ; end ;
49217: GO 49143
49219: POP
49220: POP
// if not x then
49221: LD_VAR 0 10
49225: NOT
49226: IFFALSE 49366
// begin attacking := true ;
49228: LD_ADDR_VAR 0 29
49232: PUSH
49233: LD_INT 1
49235: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49236: LD_VAR 0 4
49240: PUSH
49241: LD_VAR 0 7
49245: ARRAY
49246: PPUSH
49247: CALL_OW 250
49251: PPUSH
49252: LD_VAR 0 4
49256: PUSH
49257: LD_VAR 0 7
49261: ARRAY
49262: PPUSH
49263: CALL_OW 251
49267: PPUSH
49268: CALL_OW 546
49272: PUSH
49273: LD_INT 2
49275: ARRAY
49276: PUSH
49277: LD_VAR 0 14
49281: PUSH
49282: LD_INT 1
49284: ARRAY
49285: PPUSH
49286: CALL_OW 250
49290: PPUSH
49291: LD_VAR 0 14
49295: PUSH
49296: LD_INT 1
49298: ARRAY
49299: PPUSH
49300: CALL_OW 251
49304: PPUSH
49305: CALL_OW 546
49309: PUSH
49310: LD_INT 2
49312: ARRAY
49313: EQUAL
49314: IFFALSE 49342
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49316: LD_VAR 0 4
49320: PUSH
49321: LD_VAR 0 7
49325: ARRAY
49326: PPUSH
49327: LD_VAR 0 14
49331: PUSH
49332: LD_INT 1
49334: ARRAY
49335: PPUSH
49336: CALL 44639 0 2
49340: GO 49366
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49342: LD_VAR 0 4
49346: PUSH
49347: LD_VAR 0 7
49351: ARRAY
49352: PPUSH
49353: LD_VAR 0 14
49357: PUSH
49358: LD_INT 1
49360: ARRAY
49361: PPUSH
49362: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49366: LD_VAR 0 4
49370: PUSH
49371: LD_VAR 0 7
49375: ARRAY
49376: PPUSH
49377: CALL_OW 264
49381: PUSH
49382: LD_INT 29
49384: EQUAL
49385: IFFALSE 49751
// begin if WantsToAttack ( group [ i ] ) in bombed then
49387: LD_VAR 0 4
49391: PUSH
49392: LD_VAR 0 7
49396: ARRAY
49397: PPUSH
49398: CALL_OW 319
49402: PUSH
49403: LD_VAR 0 28
49407: IN
49408: IFFALSE 49412
// continue ;
49410: GO 46442
// k := 8 ;
49412: LD_ADDR_VAR 0 9
49416: PUSH
49417: LD_INT 8
49419: ST_TO_ADDR
// x := 0 ;
49420: LD_ADDR_VAR 0 10
49424: PUSH
49425: LD_INT 0
49427: ST_TO_ADDR
// if tmp < k then
49428: LD_VAR 0 14
49432: PUSH
49433: LD_VAR 0 9
49437: LESS
49438: IFFALSE 49450
// k := tmp ;
49440: LD_ADDR_VAR 0 9
49444: PUSH
49445: LD_VAR 0 14
49449: ST_TO_ADDR
// for j = 1 to k do
49450: LD_ADDR_VAR 0 8
49454: PUSH
49455: DOUBLE
49456: LD_INT 1
49458: DEC
49459: ST_TO_ADDR
49460: LD_VAR 0 9
49464: PUSH
49465: FOR_TO
49466: IFFALSE 49598
// begin if GetType ( tmp [ j ] ) = unit_building then
49468: LD_VAR 0 14
49472: PUSH
49473: LD_VAR 0 8
49477: ARRAY
49478: PPUSH
49479: CALL_OW 247
49483: PUSH
49484: LD_INT 3
49486: EQUAL
49487: IFFALSE 49596
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
49489: LD_VAR 0 14
49493: PUSH
49494: LD_VAR 0 8
49498: ARRAY
49499: PUSH
49500: LD_VAR 0 28
49504: IN
49505: NOT
49506: PUSH
49507: LD_VAR 0 14
49511: PUSH
49512: LD_VAR 0 8
49516: ARRAY
49517: PPUSH
49518: CALL_OW 313
49522: AND
49523: IFFALSE 49596
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49525: LD_VAR 0 4
49529: PUSH
49530: LD_VAR 0 7
49534: ARRAY
49535: PPUSH
49536: LD_VAR 0 14
49540: PUSH
49541: LD_VAR 0 8
49545: ARRAY
49546: PPUSH
49547: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49551: LD_ADDR_VAR 0 28
49555: PUSH
49556: LD_VAR 0 28
49560: PPUSH
49561: LD_VAR 0 28
49565: PUSH
49566: LD_INT 1
49568: PLUS
49569: PPUSH
49570: LD_VAR 0 14
49574: PUSH
49575: LD_VAR 0 8
49579: ARRAY
49580: PPUSH
49581: CALL_OW 1
49585: ST_TO_ADDR
// attacking := true ;
49586: LD_ADDR_VAR 0 29
49590: PUSH
49591: LD_INT 1
49593: ST_TO_ADDR
// break ;
49594: GO 49598
// end ; end ;
49596: GO 49465
49598: POP
49599: POP
// if not attacking and f_attack_depot then
49600: LD_VAR 0 29
49604: NOT
49605: PUSH
49606: LD_VAR 0 25
49610: AND
49611: IFFALSE 49706
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49613: LD_ADDR_VAR 0 13
49617: PUSH
49618: LD_VAR 0 14
49622: PPUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 30
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 30
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: PPUSH
49651: CALL_OW 72
49655: ST_TO_ADDR
// if z then
49656: LD_VAR 0 13
49660: IFFALSE 49706
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49662: LD_VAR 0 4
49666: PUSH
49667: LD_VAR 0 7
49671: ARRAY
49672: PPUSH
49673: LD_VAR 0 13
49677: PPUSH
49678: LD_VAR 0 4
49682: PUSH
49683: LD_VAR 0 7
49687: ARRAY
49688: PPUSH
49689: CALL_OW 74
49693: PPUSH
49694: CALL_OW 115
// attacking := true ;
49698: LD_ADDR_VAR 0 29
49702: PUSH
49703: LD_INT 1
49705: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49706: LD_VAR 0 4
49710: PUSH
49711: LD_VAR 0 7
49715: ARRAY
49716: PPUSH
49717: CALL_OW 256
49721: PUSH
49722: LD_INT 500
49724: LESS
49725: IFFALSE 49751
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49727: LD_VAR 0 4
49731: PUSH
49732: LD_VAR 0 7
49736: ARRAY
49737: PPUSH
49738: LD_VAR 0 14
49742: PUSH
49743: LD_INT 1
49745: ARRAY
49746: PPUSH
49747: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49751: LD_VAR 0 4
49755: PUSH
49756: LD_VAR 0 7
49760: ARRAY
49761: PPUSH
49762: CALL_OW 264
49766: PUSH
49767: LD_INT 49
49769: EQUAL
49770: IFFALSE 49891
// begin if not HasTask ( group [ i ] ) then
49772: LD_VAR 0 4
49776: PUSH
49777: LD_VAR 0 7
49781: ARRAY
49782: PPUSH
49783: CALL_OW 314
49787: NOT
49788: IFFALSE 49891
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49790: LD_ADDR_VAR 0 9
49794: PUSH
49795: LD_INT 81
49797: PUSH
49798: LD_VAR 0 4
49802: PUSH
49803: LD_VAR 0 7
49807: ARRAY
49808: PPUSH
49809: CALL_OW 255
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PPUSH
49818: CALL_OW 69
49822: PPUSH
49823: LD_VAR 0 4
49827: PUSH
49828: LD_VAR 0 7
49832: ARRAY
49833: PPUSH
49834: CALL_OW 74
49838: ST_TO_ADDR
// if k then
49839: LD_VAR 0 9
49843: IFFALSE 49891
// if GetDistUnits ( group [ i ] , k ) > 10 then
49845: LD_VAR 0 4
49849: PUSH
49850: LD_VAR 0 7
49854: ARRAY
49855: PPUSH
49856: LD_VAR 0 9
49860: PPUSH
49861: CALL_OW 296
49865: PUSH
49866: LD_INT 10
49868: GREATER
49869: IFFALSE 49891
// ComMoveUnit ( group [ i ] , k ) ;
49871: LD_VAR 0 4
49875: PUSH
49876: LD_VAR 0 7
49880: ARRAY
49881: PPUSH
49882: LD_VAR 0 9
49886: PPUSH
49887: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49891: LD_VAR 0 4
49895: PUSH
49896: LD_VAR 0 7
49900: ARRAY
49901: PPUSH
49902: CALL_OW 256
49906: PUSH
49907: LD_INT 250
49909: LESS
49910: PUSH
49911: LD_VAR 0 4
49915: PUSH
49916: LD_VAR 0 7
49920: ARRAY
49921: PUSH
49922: LD_INT 21
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 23
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PPUSH
49946: CALL_OW 69
49950: IN
49951: AND
49952: IFFALSE 50077
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49954: LD_ADDR_VAR 0 9
49958: PUSH
49959: LD_OWVAR 3
49963: PUSH
49964: LD_VAR 0 4
49968: PUSH
49969: LD_VAR 0 7
49973: ARRAY
49974: DIFF
49975: PPUSH
49976: LD_VAR 0 4
49980: PUSH
49981: LD_VAR 0 7
49985: ARRAY
49986: PPUSH
49987: CALL_OW 74
49991: ST_TO_ADDR
// if not k then
49992: LD_VAR 0 9
49996: NOT
49997: IFFALSE 50001
// continue ;
49999: GO 46442
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50001: LD_VAR 0 9
50005: PUSH
50006: LD_INT 81
50008: PUSH
50009: LD_VAR 0 4
50013: PUSH
50014: LD_VAR 0 7
50018: ARRAY
50019: PPUSH
50020: CALL_OW 255
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PPUSH
50029: CALL_OW 69
50033: IN
50034: PUSH
50035: LD_VAR 0 9
50039: PPUSH
50040: LD_VAR 0 4
50044: PUSH
50045: LD_VAR 0 7
50049: ARRAY
50050: PPUSH
50051: CALL_OW 296
50055: PUSH
50056: LD_INT 5
50058: LESS
50059: AND
50060: IFFALSE 50077
// ComAutodestruct ( group [ i ] ) ;
50062: LD_VAR 0 4
50066: PUSH
50067: LD_VAR 0 7
50071: ARRAY
50072: PPUSH
50073: CALL 44537 0 1
// end ; if f_attack_depot then
50077: LD_VAR 0 25
50081: IFFALSE 50193
// begin k := 6 ;
50083: LD_ADDR_VAR 0 9
50087: PUSH
50088: LD_INT 6
50090: ST_TO_ADDR
// if tmp < k then
50091: LD_VAR 0 14
50095: PUSH
50096: LD_VAR 0 9
50100: LESS
50101: IFFALSE 50113
// k := tmp ;
50103: LD_ADDR_VAR 0 9
50107: PUSH
50108: LD_VAR 0 14
50112: ST_TO_ADDR
// for j = 1 to k do
50113: LD_ADDR_VAR 0 8
50117: PUSH
50118: DOUBLE
50119: LD_INT 1
50121: DEC
50122: ST_TO_ADDR
50123: LD_VAR 0 9
50127: PUSH
50128: FOR_TO
50129: IFFALSE 50191
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50131: LD_VAR 0 8
50135: PPUSH
50136: CALL_OW 266
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: IN
50151: IFFALSE 50189
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50153: LD_VAR 0 4
50157: PUSH
50158: LD_VAR 0 7
50162: ARRAY
50163: PPUSH
50164: LD_VAR 0 14
50168: PUSH
50169: LD_VAR 0 8
50173: ARRAY
50174: PPUSH
50175: CALL_OW 115
// attacking := true ;
50179: LD_ADDR_VAR 0 29
50183: PUSH
50184: LD_INT 1
50186: ST_TO_ADDR
// break ;
50187: GO 50191
// end ;
50189: GO 50128
50191: POP
50192: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50193: LD_VAR 0 4
50197: PUSH
50198: LD_VAR 0 7
50202: ARRAY
50203: PPUSH
50204: CALL_OW 302
50208: PUSH
50209: LD_VAR 0 29
50213: NOT
50214: AND
50215: IFFALSE 50537
// begin if GetTag ( group [ i ] ) = 71 then
50217: LD_VAR 0 4
50221: PUSH
50222: LD_VAR 0 7
50226: ARRAY
50227: PPUSH
50228: CALL_OW 110
50232: PUSH
50233: LD_INT 71
50235: EQUAL
50236: IFFALSE 50277
// begin if HasTask ( group [ i ] ) then
50238: LD_VAR 0 4
50242: PUSH
50243: LD_VAR 0 7
50247: ARRAY
50248: PPUSH
50249: CALL_OW 314
50253: IFFALSE 50259
// continue else
50255: GO 46442
50257: GO 50277
// SetTag ( group [ i ] , 0 ) ;
50259: LD_VAR 0 4
50263: PUSH
50264: LD_VAR 0 7
50268: ARRAY
50269: PPUSH
50270: LD_INT 0
50272: PPUSH
50273: CALL_OW 109
// end ; k := 8 ;
50277: LD_ADDR_VAR 0 9
50281: PUSH
50282: LD_INT 8
50284: ST_TO_ADDR
// x := 0 ;
50285: LD_ADDR_VAR 0 10
50289: PUSH
50290: LD_INT 0
50292: ST_TO_ADDR
// if tmp < k then
50293: LD_VAR 0 14
50297: PUSH
50298: LD_VAR 0 9
50302: LESS
50303: IFFALSE 50315
// k := tmp ;
50305: LD_ADDR_VAR 0 9
50309: PUSH
50310: LD_VAR 0 14
50314: ST_TO_ADDR
// for j = 1 to k do
50315: LD_ADDR_VAR 0 8
50319: PUSH
50320: DOUBLE
50321: LD_INT 1
50323: DEC
50324: ST_TO_ADDR
50325: LD_VAR 0 9
50329: PUSH
50330: FOR_TO
50331: IFFALSE 50429
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50333: LD_VAR 0 14
50337: PUSH
50338: LD_VAR 0 8
50342: ARRAY
50343: PPUSH
50344: CALL_OW 247
50348: PUSH
50349: LD_INT 1
50351: EQUAL
50352: PUSH
50353: LD_VAR 0 14
50357: PUSH
50358: LD_VAR 0 8
50362: ARRAY
50363: PPUSH
50364: CALL_OW 256
50368: PUSH
50369: LD_INT 250
50371: LESS
50372: PUSH
50373: LD_VAR 0 20
50377: AND
50378: PUSH
50379: LD_VAR 0 20
50383: NOT
50384: PUSH
50385: LD_VAR 0 14
50389: PUSH
50390: LD_VAR 0 8
50394: ARRAY
50395: PPUSH
50396: CALL_OW 256
50400: PUSH
50401: LD_INT 250
50403: GREATEREQUAL
50404: AND
50405: OR
50406: AND
50407: IFFALSE 50427
// begin x := tmp [ j ] ;
50409: LD_ADDR_VAR 0 10
50413: PUSH
50414: LD_VAR 0 14
50418: PUSH
50419: LD_VAR 0 8
50423: ARRAY
50424: ST_TO_ADDR
// break ;
50425: GO 50429
// end ;
50427: GO 50330
50429: POP
50430: POP
// if x then
50431: LD_VAR 0 10
50435: IFFALSE 50459
// ComAttackUnit ( group [ i ] , x ) else
50437: LD_VAR 0 4
50441: PUSH
50442: LD_VAR 0 7
50446: ARRAY
50447: PPUSH
50448: LD_VAR 0 10
50452: PPUSH
50453: CALL_OW 115
50457: GO 50483
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50459: LD_VAR 0 4
50463: PUSH
50464: LD_VAR 0 7
50468: ARRAY
50469: PPUSH
50470: LD_VAR 0 14
50474: PUSH
50475: LD_INT 1
50477: ARRAY
50478: PPUSH
50479: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50483: LD_VAR 0 4
50487: PUSH
50488: LD_VAR 0 7
50492: ARRAY
50493: PPUSH
50494: CALL_OW 314
50498: NOT
50499: IFFALSE 50537
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50501: LD_VAR 0 4
50505: PUSH
50506: LD_VAR 0 7
50510: ARRAY
50511: PPUSH
50512: LD_VAR 0 14
50516: PPUSH
50517: LD_VAR 0 4
50521: PUSH
50522: LD_VAR 0 7
50526: ARRAY
50527: PPUSH
50528: CALL_OW 74
50532: PPUSH
50533: CALL_OW 115
// end ; end ; end ;
50537: GO 46442
50539: POP
50540: POP
// wait ( 0 0$1 ) ;
50541: LD_INT 35
50543: PPUSH
50544: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
50548: LD_VAR 0 4
50552: PUSH
50553: EMPTY
50554: EQUAL
50555: PUSH
50556: LD_INT 81
50558: PUSH
50559: LD_VAR 0 35
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PPUSH
50568: CALL_OW 69
50572: NOT
50573: OR
50574: IFFALSE 46427
// end ;
50576: LD_VAR 0 2
50580: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50581: LD_INT 0
50583: PPUSH
50584: PPUSH
50585: PPUSH
50586: PPUSH
// if not base_units then
50587: LD_VAR 0 1
50591: NOT
50592: IFFALSE 50596
// exit ;
50594: GO 50683
// result := false ;
50596: LD_ADDR_VAR 0 2
50600: PUSH
50601: LD_INT 0
50603: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50604: LD_ADDR_VAR 0 5
50608: PUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: LD_INT 21
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PPUSH
50624: CALL_OW 72
50628: ST_TO_ADDR
// if not tmp then
50629: LD_VAR 0 5
50633: NOT
50634: IFFALSE 50638
// exit ;
50636: GO 50683
// for i in tmp do
50638: LD_ADDR_VAR 0 3
50642: PUSH
50643: LD_VAR 0 5
50647: PUSH
50648: FOR_IN
50649: IFFALSE 50681
// begin result := EnemyInRange ( i , 22 ) ;
50651: LD_ADDR_VAR 0 2
50655: PUSH
50656: LD_VAR 0 3
50660: PPUSH
50661: LD_INT 22
50663: PPUSH
50664: CALL 44220 0 2
50668: ST_TO_ADDR
// if result then
50669: LD_VAR 0 2
50673: IFFALSE 50679
// exit ;
50675: POP
50676: POP
50677: GO 50683
// end ;
50679: GO 50648
50681: POP
50682: POP
// end ;
50683: LD_VAR 0 2
50687: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50688: LD_INT 0
50690: PPUSH
50691: PPUSH
// if not units then
50692: LD_VAR 0 1
50696: NOT
50697: IFFALSE 50701
// exit ;
50699: GO 50771
// result := [ ] ;
50701: LD_ADDR_VAR 0 3
50705: PUSH
50706: EMPTY
50707: ST_TO_ADDR
// for i in units do
50708: LD_ADDR_VAR 0 4
50712: PUSH
50713: LD_VAR 0 1
50717: PUSH
50718: FOR_IN
50719: IFFALSE 50769
// if GetTag ( i ) = tag then
50721: LD_VAR 0 4
50725: PPUSH
50726: CALL_OW 110
50730: PUSH
50731: LD_VAR 0 2
50735: EQUAL
50736: IFFALSE 50767
// result := Insert ( result , result + 1 , i ) ;
50738: LD_ADDR_VAR 0 3
50742: PUSH
50743: LD_VAR 0 3
50747: PPUSH
50748: LD_VAR 0 3
50752: PUSH
50753: LD_INT 1
50755: PLUS
50756: PPUSH
50757: LD_VAR 0 4
50761: PPUSH
50762: CALL_OW 2
50766: ST_TO_ADDR
50767: GO 50718
50769: POP
50770: POP
// end ;
50771: LD_VAR 0 3
50775: RET
// export function IsDriver ( un ) ; begin
50776: LD_INT 0
50778: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50779: LD_ADDR_VAR 0 2
50783: PUSH
50784: LD_VAR 0 1
50788: PUSH
50789: LD_INT 55
50791: PUSH
50792: EMPTY
50793: LIST
50794: PPUSH
50795: CALL_OW 69
50799: IN
50800: ST_TO_ADDR
// end ;
50801: LD_VAR 0 2
50805: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50806: LD_INT 0
50808: PPUSH
50809: PPUSH
// list := [ ] ;
50810: LD_ADDR_VAR 0 5
50814: PUSH
50815: EMPTY
50816: ST_TO_ADDR
// case d of 0 :
50817: LD_VAR 0 3
50821: PUSH
50822: LD_INT 0
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50830
50828: GO 50963
50830: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50831: LD_ADDR_VAR 0 5
50835: PUSH
50836: LD_VAR 0 1
50840: PUSH
50841: LD_INT 4
50843: MINUS
50844: PUSH
50845: LD_VAR 0 2
50849: PUSH
50850: LD_INT 4
50852: MINUS
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: LD_VAR 0 1
50866: PUSH
50867: LD_INT 3
50869: MINUS
50870: PUSH
50871: LD_VAR 0 2
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 4
50891: PLUS
50892: PUSH
50893: LD_VAR 0 2
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: LIST
50905: PUSH
50906: LD_VAR 0 1
50910: PUSH
50911: LD_INT 3
50913: PLUS
50914: PUSH
50915: LD_VAR 0 2
50919: PUSH
50920: LD_INT 3
50922: PLUS
50923: PUSH
50924: LD_INT 5
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_VAR 0 2
50941: PUSH
50942: LD_INT 4
50944: PLUS
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: ST_TO_ADDR
// end ; 1 :
50961: GO 51661
50963: LD_INT 1
50965: DOUBLE
50966: EQUAL
50967: IFTRUE 50971
50969: GO 51104
50971: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50972: LD_ADDR_VAR 0 5
50976: PUSH
50977: LD_VAR 0 1
50981: PUSH
50982: LD_VAR 0 2
50986: PUSH
50987: LD_INT 4
50989: MINUS
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: PUSH
50999: LD_VAR 0 1
51003: PUSH
51004: LD_INT 3
51006: MINUS
51007: PUSH
51008: LD_VAR 0 2
51012: PUSH
51013: LD_INT 3
51015: MINUS
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_INT 4
51032: MINUS
51033: PUSH
51034: LD_VAR 0 2
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: LD_VAR 0 1
51051: PUSH
51052: LD_VAR 0 2
51056: PUSH
51057: LD_INT 3
51059: PLUS
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: PUSH
51069: LD_VAR 0 1
51073: PUSH
51074: LD_INT 4
51076: PLUS
51077: PUSH
51078: LD_VAR 0 2
51082: PUSH
51083: LD_INT 4
51085: PLUS
51086: PUSH
51087: LD_INT 5
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// end ; 2 :
51102: GO 51661
51104: LD_INT 2
51106: DOUBLE
51107: EQUAL
51108: IFTRUE 51112
51110: GO 51241
51112: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51113: LD_ADDR_VAR 0 5
51117: PUSH
51118: LD_VAR 0 1
51122: PUSH
51123: LD_VAR 0 2
51127: PUSH
51128: LD_INT 3
51130: MINUS
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: PUSH
51140: LD_VAR 0 1
51144: PUSH
51145: LD_INT 4
51147: PLUS
51148: PUSH
51149: LD_VAR 0 2
51153: PUSH
51154: LD_INT 4
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: PUSH
51162: LD_VAR 0 1
51166: PUSH
51167: LD_VAR 0 2
51171: PUSH
51172: LD_INT 4
51174: PLUS
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: PUSH
51184: LD_VAR 0 1
51188: PUSH
51189: LD_INT 3
51191: MINUS
51192: PUSH
51193: LD_VAR 0 2
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: PUSH
51206: LD_VAR 0 1
51210: PUSH
51211: LD_INT 4
51213: MINUS
51214: PUSH
51215: LD_VAR 0 2
51219: PUSH
51220: LD_INT 4
51222: MINUS
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: ST_TO_ADDR
// end ; 3 :
51239: GO 51661
51241: LD_INT 3
51243: DOUBLE
51244: EQUAL
51245: IFTRUE 51249
51247: GO 51382
51249: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51250: LD_ADDR_VAR 0 5
51254: PUSH
51255: LD_VAR 0 1
51259: PUSH
51260: LD_INT 3
51262: PLUS
51263: PUSH
51264: LD_VAR 0 2
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: PUSH
51277: LD_VAR 0 1
51281: PUSH
51282: LD_INT 4
51284: PLUS
51285: PUSH
51286: LD_VAR 0 2
51290: PUSH
51291: LD_INT 4
51293: PLUS
51294: PUSH
51295: LD_INT 5
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: PUSH
51303: LD_VAR 0 1
51307: PUSH
51308: LD_INT 4
51310: MINUS
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_VAR 0 1
51329: PUSH
51330: LD_VAR 0 2
51334: PUSH
51335: LD_INT 4
51337: MINUS
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 1
51351: PUSH
51352: LD_INT 3
51354: MINUS
51355: PUSH
51356: LD_VAR 0 2
51360: PUSH
51361: LD_INT 3
51363: MINUS
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: ST_TO_ADDR
// end ; 4 :
51380: GO 51661
51382: LD_INT 4
51384: DOUBLE
51385: EQUAL
51386: IFTRUE 51390
51388: GO 51523
51390: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51391: LD_ADDR_VAR 0 5
51395: PUSH
51396: LD_VAR 0 1
51400: PUSH
51401: LD_VAR 0 2
51405: PUSH
51406: LD_INT 4
51408: PLUS
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: PUSH
51418: LD_VAR 0 1
51422: PUSH
51423: LD_INT 3
51425: PLUS
51426: PUSH
51427: LD_VAR 0 2
51431: PUSH
51432: LD_INT 3
51434: PLUS
51435: PUSH
51436: LD_INT 5
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: PUSH
51444: LD_VAR 0 1
51448: PUSH
51449: LD_INT 4
51451: PLUS
51452: PUSH
51453: LD_VAR 0 2
51457: PUSH
51458: LD_INT 4
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: PUSH
51466: LD_VAR 0 1
51470: PUSH
51471: LD_VAR 0 2
51475: PUSH
51476: LD_INT 3
51478: MINUS
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: PUSH
51488: LD_VAR 0 1
51492: PUSH
51493: LD_INT 4
51495: MINUS
51496: PUSH
51497: LD_VAR 0 2
51501: PUSH
51502: LD_INT 4
51504: MINUS
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// end ; 5 :
51521: GO 51661
51523: LD_INT 5
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51531
51529: GO 51660
51531: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51532: LD_ADDR_VAR 0 5
51536: PUSH
51537: LD_VAR 0 1
51541: PUSH
51542: LD_INT 4
51544: MINUS
51545: PUSH
51546: LD_VAR 0 2
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: PUSH
51559: LD_VAR 0 1
51563: PUSH
51564: LD_VAR 0 2
51568: PUSH
51569: LD_INT 4
51571: MINUS
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: PUSH
51581: LD_VAR 0 1
51585: PUSH
51586: LD_INT 4
51588: PLUS
51589: PUSH
51590: LD_VAR 0 2
51594: PUSH
51595: LD_INT 4
51597: PLUS
51598: PUSH
51599: LD_INT 5
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: PUSH
51607: LD_VAR 0 1
51611: PUSH
51612: LD_INT 3
51614: PLUS
51615: PUSH
51616: LD_VAR 0 2
51620: PUSH
51621: LD_INT 4
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: LD_VAR 0 1
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 3
51641: PLUS
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// end ; end ;
51658: GO 51661
51660: POP
// result := list ;
51661: LD_ADDR_VAR 0 4
51665: PUSH
51666: LD_VAR 0 5
51670: ST_TO_ADDR
// end ;
51671: LD_VAR 0 4
51675: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51676: LD_INT 0
51678: PPUSH
51679: PPUSH
51680: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51681: LD_VAR 0 1
51685: NOT
51686: PUSH
51687: LD_VAR 0 2
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: IN
51710: NOT
51711: OR
51712: IFFALSE 51716
// exit ;
51714: GO 51808
// tmp := [ ] ;
51716: LD_ADDR_VAR 0 5
51720: PUSH
51721: EMPTY
51722: ST_TO_ADDR
// for i in units do
51723: LD_ADDR_VAR 0 4
51727: PUSH
51728: LD_VAR 0 1
51732: PUSH
51733: FOR_IN
51734: IFFALSE 51777
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51736: LD_ADDR_VAR 0 5
51740: PUSH
51741: LD_VAR 0 5
51745: PPUSH
51746: LD_VAR 0 5
51750: PUSH
51751: LD_INT 1
51753: PLUS
51754: PPUSH
51755: LD_VAR 0 4
51759: PPUSH
51760: LD_VAR 0 2
51764: PPUSH
51765: CALL_OW 259
51769: PPUSH
51770: CALL_OW 2
51774: ST_TO_ADDR
51775: GO 51733
51777: POP
51778: POP
// if not tmp then
51779: LD_VAR 0 5
51783: NOT
51784: IFFALSE 51788
// exit ;
51786: GO 51808
// result := SortListByListDesc ( units , tmp ) ;
51788: LD_ADDR_VAR 0 3
51792: PUSH
51793: LD_VAR 0 1
51797: PPUSH
51798: LD_VAR 0 5
51802: PPUSH
51803: CALL_OW 77
51807: ST_TO_ADDR
// end ;
51808: LD_VAR 0 3
51812: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51813: LD_INT 0
51815: PPUSH
51816: PPUSH
51817: PPUSH
// x := GetX ( building ) ;
51818: LD_ADDR_VAR 0 4
51822: PUSH
51823: LD_VAR 0 2
51827: PPUSH
51828: CALL_OW 250
51832: ST_TO_ADDR
// y := GetY ( building ) ;
51833: LD_ADDR_VAR 0 5
51837: PUSH
51838: LD_VAR 0 2
51842: PPUSH
51843: CALL_OW 251
51847: ST_TO_ADDR
// if GetTaskList ( unit ) then
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 437
51857: IFFALSE 51952
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51859: LD_STRING e
51861: PUSH
51862: LD_VAR 0 1
51866: PPUSH
51867: CALL_OW 437
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: PUSH
51876: LD_INT 1
51878: ARRAY
51879: EQUAL
51880: PUSH
51881: LD_VAR 0 4
51885: PUSH
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 437
51895: PUSH
51896: LD_INT 1
51898: ARRAY
51899: PUSH
51900: LD_INT 2
51902: ARRAY
51903: EQUAL
51904: AND
51905: PUSH
51906: LD_VAR 0 5
51910: PUSH
51911: LD_VAR 0 1
51915: PPUSH
51916: CALL_OW 437
51920: PUSH
51921: LD_INT 1
51923: ARRAY
51924: PUSH
51925: LD_INT 3
51927: ARRAY
51928: EQUAL
51929: AND
51930: IFFALSE 51942
// result := true else
51932: LD_ADDR_VAR 0 3
51936: PUSH
51937: LD_INT 1
51939: ST_TO_ADDR
51940: GO 51950
// result := false ;
51942: LD_ADDR_VAR 0 3
51946: PUSH
51947: LD_INT 0
51949: ST_TO_ADDR
// end else
51950: GO 51960
// result := false ;
51952: LD_ADDR_VAR 0 3
51956: PUSH
51957: LD_INT 0
51959: ST_TO_ADDR
// end ;
51960: LD_VAR 0 3
51964: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51965: LD_INT 0
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
// if not unit or not area then
51971: LD_VAR 0 1
51975: NOT
51976: PUSH
51977: LD_VAR 0 2
51981: NOT
51982: OR
51983: IFFALSE 51987
// exit ;
51985: GO 52151
// tmp := AreaToList ( area , i ) ;
51987: LD_ADDR_VAR 0 6
51991: PUSH
51992: LD_VAR 0 2
51996: PPUSH
51997: LD_VAR 0 5
52001: PPUSH
52002: CALL_OW 517
52006: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52007: LD_ADDR_VAR 0 5
52011: PUSH
52012: DOUBLE
52013: LD_INT 1
52015: DEC
52016: ST_TO_ADDR
52017: LD_VAR 0 6
52021: PUSH
52022: LD_INT 1
52024: ARRAY
52025: PUSH
52026: FOR_TO
52027: IFFALSE 52149
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52029: LD_ADDR_VAR 0 7
52033: PUSH
52034: LD_VAR 0 6
52038: PUSH
52039: LD_INT 1
52041: ARRAY
52042: PUSH
52043: LD_VAR 0 5
52047: ARRAY
52048: PUSH
52049: LD_VAR 0 6
52053: PUSH
52054: LD_INT 2
52056: ARRAY
52057: PUSH
52058: LD_VAR 0 5
52062: ARRAY
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52068: LD_VAR 0 7
52072: PUSH
52073: LD_INT 1
52075: ARRAY
52076: PPUSH
52077: LD_VAR 0 7
52081: PUSH
52082: LD_INT 2
52084: ARRAY
52085: PPUSH
52086: CALL_OW 428
52090: PUSH
52091: LD_INT 0
52093: EQUAL
52094: IFFALSE 52147
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52096: LD_VAR 0 1
52100: PPUSH
52101: LD_VAR 0 7
52105: PUSH
52106: LD_INT 1
52108: ARRAY
52109: PPUSH
52110: LD_VAR 0 7
52114: PUSH
52115: LD_INT 2
52117: ARRAY
52118: PPUSH
52119: LD_VAR 0 3
52123: PPUSH
52124: CALL_OW 48
// result := IsPlaced ( unit ) ;
52128: LD_ADDR_VAR 0 4
52132: PUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 305
52142: ST_TO_ADDR
// exit ;
52143: POP
52144: POP
52145: GO 52151
// end ; end ;
52147: GO 52026
52149: POP
52150: POP
// end ;
52151: LD_VAR 0 4
52155: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52156: LD_INT 0
52158: PPUSH
52159: PPUSH
52160: PPUSH
// if not side or side > 8 then
52161: LD_VAR 0 1
52165: NOT
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: LD_INT 8
52174: GREATER
52175: OR
52176: IFFALSE 52180
// exit ;
52178: GO 52367
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52180: LD_ADDR_VAR 0 4
52184: PUSH
52185: LD_INT 22
52187: PUSH
52188: LD_VAR 0 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 21
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PPUSH
52211: CALL_OW 69
52215: ST_TO_ADDR
// if not tmp then
52216: LD_VAR 0 4
52220: NOT
52221: IFFALSE 52225
// exit ;
52223: GO 52367
// enable_addtolog := true ;
52225: LD_ADDR_OWVAR 81
52229: PUSH
52230: LD_INT 1
52232: ST_TO_ADDR
// AddToLog ( [ ) ;
52233: LD_STRING [
52235: PPUSH
52236: CALL_OW 561
// for i in tmp do
52240: LD_ADDR_VAR 0 3
52244: PUSH
52245: LD_VAR 0 4
52249: PUSH
52250: FOR_IN
52251: IFFALSE 52358
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52253: LD_STRING [
52255: PUSH
52256: LD_VAR 0 3
52260: PPUSH
52261: CALL_OW 266
52265: STR
52266: PUSH
52267: LD_STRING , 
52269: STR
52270: PUSH
52271: LD_VAR 0 3
52275: PPUSH
52276: CALL_OW 250
52280: STR
52281: PUSH
52282: LD_STRING , 
52284: STR
52285: PUSH
52286: LD_VAR 0 3
52290: PPUSH
52291: CALL_OW 251
52295: STR
52296: PUSH
52297: LD_STRING , 
52299: STR
52300: PUSH
52301: LD_VAR 0 3
52305: PPUSH
52306: CALL_OW 254
52310: STR
52311: PUSH
52312: LD_STRING , 
52314: STR
52315: PUSH
52316: LD_VAR 0 3
52320: PPUSH
52321: LD_INT 1
52323: PPUSH
52324: CALL_OW 268
52328: STR
52329: PUSH
52330: LD_STRING , 
52332: STR
52333: PUSH
52334: LD_VAR 0 3
52338: PPUSH
52339: LD_INT 2
52341: PPUSH
52342: CALL_OW 268
52346: STR
52347: PUSH
52348: LD_STRING ],
52350: STR
52351: PPUSH
52352: CALL_OW 561
// end ;
52356: GO 52250
52358: POP
52359: POP
// AddToLog ( ]; ) ;
52360: LD_STRING ];
52362: PPUSH
52363: CALL_OW 561
// end ;
52367: LD_VAR 0 2
52371: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52372: LD_INT 0
52374: PPUSH
52375: PPUSH
52376: PPUSH
52377: PPUSH
52378: PPUSH
// if not area or not rate or not max then
52379: LD_VAR 0 1
52383: NOT
52384: PUSH
52385: LD_VAR 0 2
52389: NOT
52390: OR
52391: PUSH
52392: LD_VAR 0 4
52396: NOT
52397: OR
52398: IFFALSE 52402
// exit ;
52400: GO 52594
// while 1 do
52402: LD_INT 1
52404: IFFALSE 52594
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52406: LD_ADDR_VAR 0 9
52410: PUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: LD_INT 1
52418: PPUSH
52419: CALL_OW 287
52423: PUSH
52424: LD_INT 10
52426: MUL
52427: ST_TO_ADDR
// r := rate / 10 ;
52428: LD_ADDR_VAR 0 7
52432: PUSH
52433: LD_VAR 0 2
52437: PUSH
52438: LD_INT 10
52440: DIVREAL
52441: ST_TO_ADDR
// time := 1 1$00 ;
52442: LD_ADDR_VAR 0 8
52446: PUSH
52447: LD_INT 2100
52449: ST_TO_ADDR
// if amount < min then
52450: LD_VAR 0 9
52454: PUSH
52455: LD_VAR 0 3
52459: LESS
52460: IFFALSE 52478
// r := r * 2 else
52462: LD_ADDR_VAR 0 7
52466: PUSH
52467: LD_VAR 0 7
52471: PUSH
52472: LD_INT 2
52474: MUL
52475: ST_TO_ADDR
52476: GO 52504
// if amount > max then
52478: LD_VAR 0 9
52482: PUSH
52483: LD_VAR 0 4
52487: GREATER
52488: IFFALSE 52504
// r := r / 2 ;
52490: LD_ADDR_VAR 0 7
52494: PUSH
52495: LD_VAR 0 7
52499: PUSH
52500: LD_INT 2
52502: DIVREAL
52503: ST_TO_ADDR
// time := time / r ;
52504: LD_ADDR_VAR 0 8
52508: PUSH
52509: LD_VAR 0 8
52513: PUSH
52514: LD_VAR 0 7
52518: DIVREAL
52519: ST_TO_ADDR
// if time < 0 then
52520: LD_VAR 0 8
52524: PUSH
52525: LD_INT 0
52527: LESS
52528: IFFALSE 52545
// time := time * - 1 ;
52530: LD_ADDR_VAR 0 8
52534: PUSH
52535: LD_VAR 0 8
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: MUL
52544: ST_TO_ADDR
// wait ( time ) ;
52545: LD_VAR 0 8
52549: PPUSH
52550: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52554: LD_INT 35
52556: PPUSH
52557: LD_INT 875
52559: PPUSH
52560: CALL_OW 12
52564: PPUSH
52565: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52569: LD_INT 1
52571: PPUSH
52572: LD_INT 5
52574: PPUSH
52575: CALL_OW 12
52579: PPUSH
52580: LD_VAR 0 1
52584: PPUSH
52585: LD_INT 1
52587: PPUSH
52588: CALL_OW 55
// end ;
52592: GO 52402
// end ;
52594: LD_VAR 0 5
52598: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52599: LD_INT 0
52601: PPUSH
52602: PPUSH
52603: PPUSH
52604: PPUSH
52605: PPUSH
52606: PPUSH
52607: PPUSH
52608: PPUSH
// if not turrets or not factories then
52609: LD_VAR 0 1
52613: NOT
52614: PUSH
52615: LD_VAR 0 2
52619: NOT
52620: OR
52621: IFFALSE 52625
// exit ;
52623: GO 52932
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52625: LD_ADDR_VAR 0 10
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: LD_INT 6
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 4
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 5
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 24
52667: PUSH
52668: LD_INT 25
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 23
52677: PUSH
52678: LD_INT 27
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 42
52691: PUSH
52692: LD_INT 43
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 44
52701: PUSH
52702: LD_INT 46
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 45
52711: PUSH
52712: LD_INT 47
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// result := [ ] ;
52729: LD_ADDR_VAR 0 3
52733: PUSH
52734: EMPTY
52735: ST_TO_ADDR
// for i in turrets do
52736: LD_ADDR_VAR 0 4
52740: PUSH
52741: LD_VAR 0 1
52745: PUSH
52746: FOR_IN
52747: IFFALSE 52930
// begin nat := GetNation ( i ) ;
52749: LD_ADDR_VAR 0 7
52753: PUSH
52754: LD_VAR 0 4
52758: PPUSH
52759: CALL_OW 248
52763: ST_TO_ADDR
// weapon := 0 ;
52764: LD_ADDR_VAR 0 8
52768: PUSH
52769: LD_INT 0
52771: ST_TO_ADDR
// if not nat then
52772: LD_VAR 0 7
52776: NOT
52777: IFFALSE 52781
// continue ;
52779: GO 52746
// for j in list [ nat ] do
52781: LD_ADDR_VAR 0 5
52785: PUSH
52786: LD_VAR 0 10
52790: PUSH
52791: LD_VAR 0 7
52795: ARRAY
52796: PUSH
52797: FOR_IN
52798: IFFALSE 52839
// if GetBWeapon ( i ) = j [ 1 ] then
52800: LD_VAR 0 4
52804: PPUSH
52805: CALL_OW 269
52809: PUSH
52810: LD_VAR 0 5
52814: PUSH
52815: LD_INT 1
52817: ARRAY
52818: EQUAL
52819: IFFALSE 52837
// begin weapon := j [ 2 ] ;
52821: LD_ADDR_VAR 0 8
52825: PUSH
52826: LD_VAR 0 5
52830: PUSH
52831: LD_INT 2
52833: ARRAY
52834: ST_TO_ADDR
// break ;
52835: GO 52839
// end ;
52837: GO 52797
52839: POP
52840: POP
// if not weapon then
52841: LD_VAR 0 8
52845: NOT
52846: IFFALSE 52850
// continue ;
52848: GO 52746
// for k in factories do
52850: LD_ADDR_VAR 0 6
52854: PUSH
52855: LD_VAR 0 2
52859: PUSH
52860: FOR_IN
52861: IFFALSE 52926
// begin weapons := AvailableWeaponList ( k ) ;
52863: LD_ADDR_VAR 0 9
52867: PUSH
52868: LD_VAR 0 6
52872: PPUSH
52873: CALL_OW 478
52877: ST_TO_ADDR
// if not weapons then
52878: LD_VAR 0 9
52882: NOT
52883: IFFALSE 52887
// continue ;
52885: GO 52860
// if weapon in weapons then
52887: LD_VAR 0 8
52891: PUSH
52892: LD_VAR 0 9
52896: IN
52897: IFFALSE 52924
// begin result := [ i , weapon ] ;
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: LD_VAR 0 4
52908: PUSH
52909: LD_VAR 0 8
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// exit ;
52918: POP
52919: POP
52920: POP
52921: POP
52922: GO 52932
// end ; end ;
52924: GO 52860
52926: POP
52927: POP
// end ;
52928: GO 52746
52930: POP
52931: POP
// end ;
52932: LD_VAR 0 3
52936: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52937: LD_INT 0
52939: PPUSH
// if not side or side > 8 then
52940: LD_VAR 0 3
52944: NOT
52945: PUSH
52946: LD_VAR 0 3
52950: PUSH
52951: LD_INT 8
52953: GREATER
52954: OR
52955: IFFALSE 52959
// exit ;
52957: GO 53018
// if not range then
52959: LD_VAR 0 4
52963: NOT
52964: IFFALSE 52975
// range := - 12 ;
52966: LD_ADDR_VAR 0 4
52970: PUSH
52971: LD_INT 12
52973: NEG
52974: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52975: LD_VAR 0 1
52979: PPUSH
52980: LD_VAR 0 2
52984: PPUSH
52985: LD_VAR 0 3
52989: PPUSH
52990: LD_VAR 0 4
52994: PPUSH
52995: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52999: LD_VAR 0 1
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: LD_VAR 0 3
53013: PPUSH
53014: CALL_OW 331
// end ;
53018: LD_VAR 0 5
53022: RET
// export function Video ( mode ) ; begin
53023: LD_INT 0
53025: PPUSH
// ingame_video = mode ;
53026: LD_ADDR_OWVAR 52
53030: PUSH
53031: LD_VAR 0 1
53035: ST_TO_ADDR
// interface_hidden = mode ;
53036: LD_ADDR_OWVAR 54
53040: PUSH
53041: LD_VAR 0 1
53045: ST_TO_ADDR
// end ;
53046: LD_VAR 0 2
53050: RET
// export function Join ( array , element ) ; begin
53051: LD_INT 0
53053: PPUSH
// result := array ^ element ;
53054: LD_ADDR_VAR 0 3
53058: PUSH
53059: LD_VAR 0 1
53063: PUSH
53064: LD_VAR 0 2
53068: ADD
53069: ST_TO_ADDR
// end ;
53070: LD_VAR 0 3
53074: RET
// export function JoinUnion ( array , element ) ; begin
53075: LD_INT 0
53077: PPUSH
// result := array union element ;
53078: LD_ADDR_VAR 0 3
53082: PUSH
53083: LD_VAR 0 1
53087: PUSH
53088: LD_VAR 0 2
53092: UNION
53093: ST_TO_ADDR
// end ;
53094: LD_VAR 0 3
53098: RET
// export function GetBehemoths ( side ) ; begin
53099: LD_INT 0
53101: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53102: LD_ADDR_VAR 0 2
53106: PUSH
53107: LD_INT 22
53109: PUSH
53110: LD_VAR 0 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 31
53121: PUSH
53122: LD_INT 25
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PPUSH
53133: CALL_OW 69
53137: ST_TO_ADDR
// end ;
53138: LD_VAR 0 2
53142: RET
// export function Shuffle ( array ) ; var i , index ; begin
53143: LD_INT 0
53145: PPUSH
53146: PPUSH
53147: PPUSH
// result := [ ] ;
53148: LD_ADDR_VAR 0 2
53152: PUSH
53153: EMPTY
53154: ST_TO_ADDR
// if not array then
53155: LD_VAR 0 1
53159: NOT
53160: IFFALSE 53164
// exit ;
53162: GO 53263
// Randomize ;
53164: CALL_OW 10
// for i = array downto 1 do
53168: LD_ADDR_VAR 0 3
53172: PUSH
53173: DOUBLE
53174: LD_VAR 0 1
53178: INC
53179: ST_TO_ADDR
53180: LD_INT 1
53182: PUSH
53183: FOR_DOWNTO
53184: IFFALSE 53261
// begin index := rand ( 1 , array ) ;
53186: LD_ADDR_VAR 0 4
53190: PUSH
53191: LD_INT 1
53193: PPUSH
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 12
53203: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53204: LD_ADDR_VAR 0 2
53208: PUSH
53209: LD_VAR 0 2
53213: PPUSH
53214: LD_VAR 0 2
53218: PUSH
53219: LD_INT 1
53221: PLUS
53222: PPUSH
53223: LD_VAR 0 1
53227: PUSH
53228: LD_VAR 0 4
53232: ARRAY
53233: PPUSH
53234: CALL_OW 2
53238: ST_TO_ADDR
// array := Delete ( array , index ) ;
53239: LD_ADDR_VAR 0 1
53243: PUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: LD_VAR 0 4
53253: PPUSH
53254: CALL_OW 3
53258: ST_TO_ADDR
// end ;
53259: GO 53183
53261: POP
53262: POP
// end ; end_of_file
53263: LD_VAR 0 2
53267: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
53268: GO 53270
53270: DISABLE
// begin ru_radar := 98 ;
53271: LD_ADDR_EXP 45
53275: PUSH
53276: LD_INT 98
53278: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
53279: LD_ADDR_EXP 46
53283: PUSH
53284: LD_INT 89
53286: ST_TO_ADDR
// us_hack := 99 ;
53287: LD_ADDR_EXP 47
53291: PUSH
53292: LD_INT 99
53294: ST_TO_ADDR
// us_artillery := 97 ;
53295: LD_ADDR_EXP 48
53299: PUSH
53300: LD_INT 97
53302: ST_TO_ADDR
// ar_bio_bomb := 91 ;
53303: LD_ADDR_EXP 49
53307: PUSH
53308: LD_INT 91
53310: ST_TO_ADDR
// end ; end_of_file
53311: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
53312: LD_INT 0
53314: PPUSH
53315: PPUSH
// skirmish := false ;
53316: LD_ADDR_EXP 50
53320: PUSH
53321: LD_INT 0
53323: ST_TO_ADDR
// debug_mc := false ;
53324: LD_ADDR_EXP 51
53328: PUSH
53329: LD_INT 0
53331: ST_TO_ADDR
// mc_bases := [ ] ;
53332: LD_ADDR_EXP 52
53336: PUSH
53337: EMPTY
53338: ST_TO_ADDR
// mc_sides := [ ] ;
53339: LD_ADDR_EXP 78
53343: PUSH
53344: EMPTY
53345: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
53346: LD_ADDR_EXP 53
53350: PUSH
53351: EMPTY
53352: ST_TO_ADDR
// mc_building_repairs := [ ] ;
53353: LD_ADDR_EXP 54
53357: PUSH
53358: EMPTY
53359: ST_TO_ADDR
// mc_need_heal := [ ] ;
53360: LD_ADDR_EXP 55
53364: PUSH
53365: EMPTY
53366: ST_TO_ADDR
// mc_healers := [ ] ;
53367: LD_ADDR_EXP 56
53371: PUSH
53372: EMPTY
53373: ST_TO_ADDR
// mc_build_list := [ ] ;
53374: LD_ADDR_EXP 57
53378: PUSH
53379: EMPTY
53380: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
53381: LD_ADDR_EXP 84
53385: PUSH
53386: EMPTY
53387: ST_TO_ADDR
// mc_builders := [ ] ;
53388: LD_ADDR_EXP 58
53392: PUSH
53393: EMPTY
53394: ST_TO_ADDR
// mc_construct_list := [ ] ;
53395: LD_ADDR_EXP 59
53399: PUSH
53400: EMPTY
53401: ST_TO_ADDR
// mc_turret_list := [ ] ;
53402: LD_ADDR_EXP 60
53406: PUSH
53407: EMPTY
53408: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
53409: LD_ADDR_EXP 61
53413: PUSH
53414: EMPTY
53415: ST_TO_ADDR
// mc_miners := [ ] ;
53416: LD_ADDR_EXP 66
53420: PUSH
53421: EMPTY
53422: ST_TO_ADDR
// mc_mines := [ ] ;
53423: LD_ADDR_EXP 65
53427: PUSH
53428: EMPTY
53429: ST_TO_ADDR
// mc_minefields := [ ] ;
53430: LD_ADDR_EXP 67
53434: PUSH
53435: EMPTY
53436: ST_TO_ADDR
// mc_crates := [ ] ;
53437: LD_ADDR_EXP 68
53441: PUSH
53442: EMPTY
53443: ST_TO_ADDR
// mc_crates_collector := [ ] ;
53444: LD_ADDR_EXP 69
53448: PUSH
53449: EMPTY
53450: ST_TO_ADDR
// mc_crates_area := [ ] ;
53451: LD_ADDR_EXP 70
53455: PUSH
53456: EMPTY
53457: ST_TO_ADDR
// mc_vehicles := [ ] ;
53458: LD_ADDR_EXP 71
53462: PUSH
53463: EMPTY
53464: ST_TO_ADDR
// mc_attack := [ ] ;
53465: LD_ADDR_EXP 72
53469: PUSH
53470: EMPTY
53471: ST_TO_ADDR
// mc_produce := [ ] ;
53472: LD_ADDR_EXP 73
53476: PUSH
53477: EMPTY
53478: ST_TO_ADDR
// mc_defender := [ ] ;
53479: LD_ADDR_EXP 74
53483: PUSH
53484: EMPTY
53485: ST_TO_ADDR
// mc_parking := [ ] ;
53486: LD_ADDR_EXP 76
53490: PUSH
53491: EMPTY
53492: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
53493: LD_ADDR_EXP 62
53497: PUSH
53498: EMPTY
53499: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
53500: LD_ADDR_EXP 64
53504: PUSH
53505: EMPTY
53506: ST_TO_ADDR
// mc_scan := [ ] ;
53507: LD_ADDR_EXP 75
53511: PUSH
53512: EMPTY
53513: ST_TO_ADDR
// mc_scan_area := [ ] ;
53514: LD_ADDR_EXP 77
53518: PUSH
53519: EMPTY
53520: ST_TO_ADDR
// mc_tech := [ ] ;
53521: LD_ADDR_EXP 79
53525: PUSH
53526: EMPTY
53527: ST_TO_ADDR
// mc_class := [ ] ;
53528: LD_ADDR_EXP 93
53532: PUSH
53533: EMPTY
53534: ST_TO_ADDR
// mc_class_case_use := [ ] ;
53535: LD_ADDR_EXP 94
53539: PUSH
53540: EMPTY
53541: ST_TO_ADDR
// end ;
53542: LD_VAR 0 1
53546: RET
// export function MC_Kill ( base ) ; begin
53547: LD_INT 0
53549: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
53550: LD_ADDR_EXP 52
53554: PUSH
53555: LD_EXP 52
53559: PPUSH
53560: LD_VAR 0 1
53564: PPUSH
53565: EMPTY
53566: PPUSH
53567: CALL_OW 1
53571: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53572: LD_ADDR_EXP 53
53576: PUSH
53577: LD_EXP 53
53581: PPUSH
53582: LD_VAR 0 1
53586: PPUSH
53587: EMPTY
53588: PPUSH
53589: CALL_OW 1
53593: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53594: LD_ADDR_EXP 54
53598: PUSH
53599: LD_EXP 54
53603: PPUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: EMPTY
53610: PPUSH
53611: CALL_OW 1
53615: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53616: LD_ADDR_EXP 55
53620: PUSH
53621: LD_EXP 55
53625: PPUSH
53626: LD_VAR 0 1
53630: PPUSH
53631: EMPTY
53632: PPUSH
53633: CALL_OW 1
53637: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53638: LD_ADDR_EXP 56
53642: PUSH
53643: LD_EXP 56
53647: PPUSH
53648: LD_VAR 0 1
53652: PPUSH
53653: EMPTY
53654: PPUSH
53655: CALL_OW 1
53659: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53660: LD_ADDR_EXP 57
53664: PUSH
53665: LD_EXP 57
53669: PPUSH
53670: LD_VAR 0 1
53674: PPUSH
53675: EMPTY
53676: PPUSH
53677: CALL_OW 1
53681: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53682: LD_ADDR_EXP 58
53686: PUSH
53687: LD_EXP 58
53691: PPUSH
53692: LD_VAR 0 1
53696: PPUSH
53697: EMPTY
53698: PPUSH
53699: CALL_OW 1
53703: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53704: LD_ADDR_EXP 59
53708: PUSH
53709: LD_EXP 59
53713: PPUSH
53714: LD_VAR 0 1
53718: PPUSH
53719: EMPTY
53720: PPUSH
53721: CALL_OW 1
53725: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53726: LD_ADDR_EXP 60
53730: PUSH
53731: LD_EXP 60
53735: PPUSH
53736: LD_VAR 0 1
53740: PPUSH
53741: EMPTY
53742: PPUSH
53743: CALL_OW 1
53747: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53748: LD_ADDR_EXP 61
53752: PUSH
53753: LD_EXP 61
53757: PPUSH
53758: LD_VAR 0 1
53762: PPUSH
53763: EMPTY
53764: PPUSH
53765: CALL_OW 1
53769: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53770: LD_ADDR_EXP 62
53774: PUSH
53775: LD_EXP 62
53779: PPUSH
53780: LD_VAR 0 1
53784: PPUSH
53785: EMPTY
53786: PPUSH
53787: CALL_OW 1
53791: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53792: LD_ADDR_EXP 63
53796: PUSH
53797: LD_EXP 63
53801: PPUSH
53802: LD_VAR 0 1
53806: PPUSH
53807: LD_INT 0
53809: PPUSH
53810: CALL_OW 1
53814: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53815: LD_ADDR_EXP 64
53819: PUSH
53820: LD_EXP 64
53824: PPUSH
53825: LD_VAR 0 1
53829: PPUSH
53830: EMPTY
53831: PPUSH
53832: CALL_OW 1
53836: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53837: LD_ADDR_EXP 65
53841: PUSH
53842: LD_EXP 65
53846: PPUSH
53847: LD_VAR 0 1
53851: PPUSH
53852: EMPTY
53853: PPUSH
53854: CALL_OW 1
53858: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53859: LD_ADDR_EXP 66
53863: PUSH
53864: LD_EXP 66
53868: PPUSH
53869: LD_VAR 0 1
53873: PPUSH
53874: EMPTY
53875: PPUSH
53876: CALL_OW 1
53880: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53881: LD_ADDR_EXP 67
53885: PUSH
53886: LD_EXP 67
53890: PPUSH
53891: LD_VAR 0 1
53895: PPUSH
53896: EMPTY
53897: PPUSH
53898: CALL_OW 1
53902: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53903: LD_ADDR_EXP 68
53907: PUSH
53908: LD_EXP 68
53912: PPUSH
53913: LD_VAR 0 1
53917: PPUSH
53918: EMPTY
53919: PPUSH
53920: CALL_OW 1
53924: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53925: LD_ADDR_EXP 69
53929: PUSH
53930: LD_EXP 69
53934: PPUSH
53935: LD_VAR 0 1
53939: PPUSH
53940: EMPTY
53941: PPUSH
53942: CALL_OW 1
53946: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53947: LD_ADDR_EXP 70
53951: PUSH
53952: LD_EXP 70
53956: PPUSH
53957: LD_VAR 0 1
53961: PPUSH
53962: EMPTY
53963: PPUSH
53964: CALL_OW 1
53968: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53969: LD_ADDR_EXP 71
53973: PUSH
53974: LD_EXP 71
53978: PPUSH
53979: LD_VAR 0 1
53983: PPUSH
53984: EMPTY
53985: PPUSH
53986: CALL_OW 1
53990: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
53991: LD_ADDR_EXP 72
53995: PUSH
53996: LD_EXP 72
54000: PPUSH
54001: LD_VAR 0 1
54005: PPUSH
54006: EMPTY
54007: PPUSH
54008: CALL_OW 1
54012: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54013: LD_ADDR_EXP 73
54017: PUSH
54018: LD_EXP 73
54022: PPUSH
54023: LD_VAR 0 1
54027: PPUSH
54028: EMPTY
54029: PPUSH
54030: CALL_OW 1
54034: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54035: LD_ADDR_EXP 74
54039: PUSH
54040: LD_EXP 74
54044: PPUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: EMPTY
54051: PPUSH
54052: CALL_OW 1
54056: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54057: LD_ADDR_EXP 75
54061: PUSH
54062: LD_EXP 75
54066: PPUSH
54067: LD_VAR 0 1
54071: PPUSH
54072: EMPTY
54073: PPUSH
54074: CALL_OW 1
54078: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54079: LD_ADDR_EXP 76
54083: PUSH
54084: LD_EXP 76
54088: PPUSH
54089: LD_VAR 0 1
54093: PPUSH
54094: EMPTY
54095: PPUSH
54096: CALL_OW 1
54100: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54101: LD_ADDR_EXP 77
54105: PUSH
54106: LD_EXP 77
54110: PPUSH
54111: LD_VAR 0 1
54115: PPUSH
54116: EMPTY
54117: PPUSH
54118: CALL_OW 1
54122: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54123: LD_ADDR_EXP 79
54127: PUSH
54128: LD_EXP 79
54132: PPUSH
54133: LD_VAR 0 1
54137: PPUSH
54138: EMPTY
54139: PPUSH
54140: CALL_OW 1
54144: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54145: LD_ADDR_EXP 81
54149: PUSH
54150: LD_EXP 81
54154: PPUSH
54155: LD_VAR 0 1
54159: PPUSH
54160: EMPTY
54161: PPUSH
54162: CALL_OW 1
54166: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54167: LD_ADDR_EXP 82
54171: PUSH
54172: LD_EXP 82
54176: PPUSH
54177: LD_VAR 0 1
54181: PPUSH
54182: EMPTY
54183: PPUSH
54184: CALL_OW 1
54188: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54189: LD_ADDR_EXP 83
54193: PUSH
54194: LD_EXP 83
54198: PPUSH
54199: LD_VAR 0 1
54203: PPUSH
54204: EMPTY
54205: PPUSH
54206: CALL_OW 1
54210: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54211: LD_ADDR_EXP 84
54215: PUSH
54216: LD_EXP 84
54220: PPUSH
54221: LD_VAR 0 1
54225: PPUSH
54226: EMPTY
54227: PPUSH
54228: CALL_OW 1
54232: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54233: LD_ADDR_EXP 85
54237: PUSH
54238: LD_EXP 85
54242: PPUSH
54243: LD_VAR 0 1
54247: PPUSH
54248: EMPTY
54249: PPUSH
54250: CALL_OW 1
54254: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54255: LD_ADDR_EXP 86
54259: PUSH
54260: LD_EXP 86
54264: PPUSH
54265: LD_VAR 0 1
54269: PPUSH
54270: EMPTY
54271: PPUSH
54272: CALL_OW 1
54276: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54277: LD_ADDR_EXP 87
54281: PUSH
54282: LD_EXP 87
54286: PPUSH
54287: LD_VAR 0 1
54291: PPUSH
54292: EMPTY
54293: PPUSH
54294: CALL_OW 1
54298: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54299: LD_ADDR_EXP 88
54303: PUSH
54304: LD_EXP 88
54308: PPUSH
54309: LD_VAR 0 1
54313: PPUSH
54314: EMPTY
54315: PPUSH
54316: CALL_OW 1
54320: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54321: LD_ADDR_EXP 89
54325: PUSH
54326: LD_EXP 89
54330: PPUSH
54331: LD_VAR 0 1
54335: PPUSH
54336: EMPTY
54337: PPUSH
54338: CALL_OW 1
54342: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54343: LD_ADDR_EXP 90
54347: PUSH
54348: LD_EXP 90
54352: PPUSH
54353: LD_VAR 0 1
54357: PPUSH
54358: EMPTY
54359: PPUSH
54360: CALL_OW 1
54364: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54365: LD_ADDR_EXP 91
54369: PUSH
54370: LD_EXP 91
54374: PPUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: EMPTY
54381: PPUSH
54382: CALL_OW 1
54386: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54387: LD_ADDR_EXP 92
54391: PUSH
54392: LD_EXP 92
54396: PPUSH
54397: LD_VAR 0 1
54401: PPUSH
54402: EMPTY
54403: PPUSH
54404: CALL_OW 1
54408: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54409: LD_ADDR_EXP 93
54413: PUSH
54414: LD_EXP 93
54418: PPUSH
54419: LD_VAR 0 1
54423: PPUSH
54424: EMPTY
54425: PPUSH
54426: CALL_OW 1
54430: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54431: LD_ADDR_EXP 94
54435: PUSH
54436: LD_EXP 94
54440: PPUSH
54441: LD_VAR 0 1
54445: PPUSH
54446: LD_INT 0
54448: PPUSH
54449: CALL_OW 1
54453: ST_TO_ADDR
// end ;
54454: LD_VAR 0 2
54458: RET
// export function MC_Add ( side , units ) ; var base ; begin
54459: LD_INT 0
54461: PPUSH
54462: PPUSH
// base := mc_bases + 1 ;
54463: LD_ADDR_VAR 0 4
54467: PUSH
54468: LD_EXP 52
54472: PUSH
54473: LD_INT 1
54475: PLUS
54476: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
54477: LD_ADDR_EXP 78
54481: PUSH
54482: LD_EXP 78
54486: PPUSH
54487: LD_VAR 0 4
54491: PPUSH
54492: LD_VAR 0 1
54496: PPUSH
54497: CALL_OW 1
54501: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
54502: LD_ADDR_EXP 52
54506: PUSH
54507: LD_EXP 52
54511: PPUSH
54512: LD_VAR 0 4
54516: PPUSH
54517: LD_VAR 0 2
54521: PPUSH
54522: CALL_OW 1
54526: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54527: LD_ADDR_EXP 53
54531: PUSH
54532: LD_EXP 53
54536: PPUSH
54537: LD_VAR 0 4
54541: PPUSH
54542: EMPTY
54543: PPUSH
54544: CALL_OW 1
54548: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54549: LD_ADDR_EXP 54
54553: PUSH
54554: LD_EXP 54
54558: PPUSH
54559: LD_VAR 0 4
54563: PPUSH
54564: EMPTY
54565: PPUSH
54566: CALL_OW 1
54570: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54571: LD_ADDR_EXP 55
54575: PUSH
54576: LD_EXP 55
54580: PPUSH
54581: LD_VAR 0 4
54585: PPUSH
54586: EMPTY
54587: PPUSH
54588: CALL_OW 1
54592: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54593: LD_ADDR_EXP 56
54597: PUSH
54598: LD_EXP 56
54602: PPUSH
54603: LD_VAR 0 4
54607: PPUSH
54608: EMPTY
54609: PPUSH
54610: CALL_OW 1
54614: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54615: LD_ADDR_EXP 57
54619: PUSH
54620: LD_EXP 57
54624: PPUSH
54625: LD_VAR 0 4
54629: PPUSH
54630: EMPTY
54631: PPUSH
54632: CALL_OW 1
54636: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54637: LD_ADDR_EXP 58
54641: PUSH
54642: LD_EXP 58
54646: PPUSH
54647: LD_VAR 0 4
54651: PPUSH
54652: EMPTY
54653: PPUSH
54654: CALL_OW 1
54658: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54659: LD_ADDR_EXP 59
54663: PUSH
54664: LD_EXP 59
54668: PPUSH
54669: LD_VAR 0 4
54673: PPUSH
54674: EMPTY
54675: PPUSH
54676: CALL_OW 1
54680: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54681: LD_ADDR_EXP 60
54685: PUSH
54686: LD_EXP 60
54690: PPUSH
54691: LD_VAR 0 4
54695: PPUSH
54696: EMPTY
54697: PPUSH
54698: CALL_OW 1
54702: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54703: LD_ADDR_EXP 61
54707: PUSH
54708: LD_EXP 61
54712: PPUSH
54713: LD_VAR 0 4
54717: PPUSH
54718: EMPTY
54719: PPUSH
54720: CALL_OW 1
54724: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54725: LD_ADDR_EXP 62
54729: PUSH
54730: LD_EXP 62
54734: PPUSH
54735: LD_VAR 0 4
54739: PPUSH
54740: EMPTY
54741: PPUSH
54742: CALL_OW 1
54746: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54747: LD_ADDR_EXP 63
54751: PUSH
54752: LD_EXP 63
54756: PPUSH
54757: LD_VAR 0 4
54761: PPUSH
54762: LD_INT 0
54764: PPUSH
54765: CALL_OW 1
54769: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54770: LD_ADDR_EXP 64
54774: PUSH
54775: LD_EXP 64
54779: PPUSH
54780: LD_VAR 0 4
54784: PPUSH
54785: EMPTY
54786: PPUSH
54787: CALL_OW 1
54791: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54792: LD_ADDR_EXP 65
54796: PUSH
54797: LD_EXP 65
54801: PPUSH
54802: LD_VAR 0 4
54806: PPUSH
54807: EMPTY
54808: PPUSH
54809: CALL_OW 1
54813: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54814: LD_ADDR_EXP 66
54818: PUSH
54819: LD_EXP 66
54823: PPUSH
54824: LD_VAR 0 4
54828: PPUSH
54829: EMPTY
54830: PPUSH
54831: CALL_OW 1
54835: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54836: LD_ADDR_EXP 67
54840: PUSH
54841: LD_EXP 67
54845: PPUSH
54846: LD_VAR 0 4
54850: PPUSH
54851: EMPTY
54852: PPUSH
54853: CALL_OW 1
54857: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54858: LD_ADDR_EXP 68
54862: PUSH
54863: LD_EXP 68
54867: PPUSH
54868: LD_VAR 0 4
54872: PPUSH
54873: EMPTY
54874: PPUSH
54875: CALL_OW 1
54879: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54880: LD_ADDR_EXP 69
54884: PUSH
54885: LD_EXP 69
54889: PPUSH
54890: LD_VAR 0 4
54894: PPUSH
54895: EMPTY
54896: PPUSH
54897: CALL_OW 1
54901: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54902: LD_ADDR_EXP 70
54906: PUSH
54907: LD_EXP 70
54911: PPUSH
54912: LD_VAR 0 4
54916: PPUSH
54917: EMPTY
54918: PPUSH
54919: CALL_OW 1
54923: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54924: LD_ADDR_EXP 71
54928: PUSH
54929: LD_EXP 71
54933: PPUSH
54934: LD_VAR 0 4
54938: PPUSH
54939: EMPTY
54940: PPUSH
54941: CALL_OW 1
54945: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54946: LD_ADDR_EXP 72
54950: PUSH
54951: LD_EXP 72
54955: PPUSH
54956: LD_VAR 0 4
54960: PPUSH
54961: EMPTY
54962: PPUSH
54963: CALL_OW 1
54967: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54968: LD_ADDR_EXP 73
54972: PUSH
54973: LD_EXP 73
54977: PPUSH
54978: LD_VAR 0 4
54982: PPUSH
54983: EMPTY
54984: PPUSH
54985: CALL_OW 1
54989: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54990: LD_ADDR_EXP 74
54994: PUSH
54995: LD_EXP 74
54999: PPUSH
55000: LD_VAR 0 4
55004: PPUSH
55005: EMPTY
55006: PPUSH
55007: CALL_OW 1
55011: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55012: LD_ADDR_EXP 75
55016: PUSH
55017: LD_EXP 75
55021: PPUSH
55022: LD_VAR 0 4
55026: PPUSH
55027: EMPTY
55028: PPUSH
55029: CALL_OW 1
55033: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55034: LD_ADDR_EXP 76
55038: PUSH
55039: LD_EXP 76
55043: PPUSH
55044: LD_VAR 0 4
55048: PPUSH
55049: EMPTY
55050: PPUSH
55051: CALL_OW 1
55055: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55056: LD_ADDR_EXP 77
55060: PUSH
55061: LD_EXP 77
55065: PPUSH
55066: LD_VAR 0 4
55070: PPUSH
55071: EMPTY
55072: PPUSH
55073: CALL_OW 1
55077: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55078: LD_ADDR_EXP 79
55082: PUSH
55083: LD_EXP 79
55087: PPUSH
55088: LD_VAR 0 4
55092: PPUSH
55093: EMPTY
55094: PPUSH
55095: CALL_OW 1
55099: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55100: LD_ADDR_EXP 81
55104: PUSH
55105: LD_EXP 81
55109: PPUSH
55110: LD_VAR 0 4
55114: PPUSH
55115: EMPTY
55116: PPUSH
55117: CALL_OW 1
55121: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55122: LD_ADDR_EXP 82
55126: PUSH
55127: LD_EXP 82
55131: PPUSH
55132: LD_VAR 0 4
55136: PPUSH
55137: EMPTY
55138: PPUSH
55139: CALL_OW 1
55143: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55144: LD_ADDR_EXP 83
55148: PUSH
55149: LD_EXP 83
55153: PPUSH
55154: LD_VAR 0 4
55158: PPUSH
55159: EMPTY
55160: PPUSH
55161: CALL_OW 1
55165: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55166: LD_ADDR_EXP 84
55170: PUSH
55171: LD_EXP 84
55175: PPUSH
55176: LD_VAR 0 4
55180: PPUSH
55181: EMPTY
55182: PPUSH
55183: CALL_OW 1
55187: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55188: LD_ADDR_EXP 85
55192: PUSH
55193: LD_EXP 85
55197: PPUSH
55198: LD_VAR 0 4
55202: PPUSH
55203: EMPTY
55204: PPUSH
55205: CALL_OW 1
55209: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55210: LD_ADDR_EXP 86
55214: PUSH
55215: LD_EXP 86
55219: PPUSH
55220: LD_VAR 0 4
55224: PPUSH
55225: EMPTY
55226: PPUSH
55227: CALL_OW 1
55231: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55232: LD_ADDR_EXP 87
55236: PUSH
55237: LD_EXP 87
55241: PPUSH
55242: LD_VAR 0 4
55246: PPUSH
55247: EMPTY
55248: PPUSH
55249: CALL_OW 1
55253: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55254: LD_ADDR_EXP 88
55258: PUSH
55259: LD_EXP 88
55263: PPUSH
55264: LD_VAR 0 4
55268: PPUSH
55269: EMPTY
55270: PPUSH
55271: CALL_OW 1
55275: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55276: LD_ADDR_EXP 89
55280: PUSH
55281: LD_EXP 89
55285: PPUSH
55286: LD_VAR 0 4
55290: PPUSH
55291: EMPTY
55292: PPUSH
55293: CALL_OW 1
55297: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55298: LD_ADDR_EXP 90
55302: PUSH
55303: LD_EXP 90
55307: PPUSH
55308: LD_VAR 0 4
55312: PPUSH
55313: EMPTY
55314: PPUSH
55315: CALL_OW 1
55319: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55320: LD_ADDR_EXP 91
55324: PUSH
55325: LD_EXP 91
55329: PPUSH
55330: LD_VAR 0 4
55334: PPUSH
55335: EMPTY
55336: PPUSH
55337: CALL_OW 1
55341: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55342: LD_ADDR_EXP 92
55346: PUSH
55347: LD_EXP 92
55351: PPUSH
55352: LD_VAR 0 4
55356: PPUSH
55357: EMPTY
55358: PPUSH
55359: CALL_OW 1
55363: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55364: LD_ADDR_EXP 93
55368: PUSH
55369: LD_EXP 93
55373: PPUSH
55374: LD_VAR 0 4
55378: PPUSH
55379: EMPTY
55380: PPUSH
55381: CALL_OW 1
55385: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55386: LD_ADDR_EXP 94
55390: PUSH
55391: LD_EXP 94
55395: PPUSH
55396: LD_VAR 0 4
55400: PPUSH
55401: LD_INT 0
55403: PPUSH
55404: CALL_OW 1
55408: ST_TO_ADDR
// result := base ;
55409: LD_ADDR_VAR 0 3
55413: PUSH
55414: LD_VAR 0 4
55418: ST_TO_ADDR
// end ;
55419: LD_VAR 0 3
55423: RET
// export function MC_Start ( ) ; var i ; begin
55424: LD_INT 0
55426: PPUSH
55427: PPUSH
// for i = 1 to mc_bases do
55428: LD_ADDR_VAR 0 2
55432: PUSH
55433: DOUBLE
55434: LD_INT 1
55436: DEC
55437: ST_TO_ADDR
55438: LD_EXP 52
55442: PUSH
55443: FOR_TO
55444: IFFALSE 56521
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
55446: LD_ADDR_EXP 52
55450: PUSH
55451: LD_EXP 52
55455: PPUSH
55456: LD_VAR 0 2
55460: PPUSH
55461: LD_EXP 52
55465: PUSH
55466: LD_VAR 0 2
55470: ARRAY
55471: PUSH
55472: LD_INT 0
55474: DIFF
55475: PPUSH
55476: CALL_OW 1
55480: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
55481: LD_ADDR_EXP 53
55485: PUSH
55486: LD_EXP 53
55490: PPUSH
55491: LD_VAR 0 2
55495: PPUSH
55496: EMPTY
55497: PPUSH
55498: CALL_OW 1
55502: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55503: LD_ADDR_EXP 54
55507: PUSH
55508: LD_EXP 54
55512: PPUSH
55513: LD_VAR 0 2
55517: PPUSH
55518: EMPTY
55519: PPUSH
55520: CALL_OW 1
55524: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
55525: LD_ADDR_EXP 55
55529: PUSH
55530: LD_EXP 55
55534: PPUSH
55535: LD_VAR 0 2
55539: PPUSH
55540: EMPTY
55541: PPUSH
55542: CALL_OW 1
55546: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
55547: LD_ADDR_EXP 56
55551: PUSH
55552: LD_EXP 56
55556: PPUSH
55557: LD_VAR 0 2
55561: PPUSH
55562: EMPTY
55563: PUSH
55564: EMPTY
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PPUSH
55570: CALL_OW 1
55574: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
55575: LD_ADDR_EXP 57
55579: PUSH
55580: LD_EXP 57
55584: PPUSH
55585: LD_VAR 0 2
55589: PPUSH
55590: EMPTY
55591: PPUSH
55592: CALL_OW 1
55596: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
55597: LD_ADDR_EXP 84
55601: PUSH
55602: LD_EXP 84
55606: PPUSH
55607: LD_VAR 0 2
55611: PPUSH
55612: EMPTY
55613: PPUSH
55614: CALL_OW 1
55618: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
55619: LD_ADDR_EXP 58
55623: PUSH
55624: LD_EXP 58
55628: PPUSH
55629: LD_VAR 0 2
55633: PPUSH
55634: EMPTY
55635: PPUSH
55636: CALL_OW 1
55640: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
55641: LD_ADDR_EXP 59
55645: PUSH
55646: LD_EXP 59
55650: PPUSH
55651: LD_VAR 0 2
55655: PPUSH
55656: EMPTY
55657: PPUSH
55658: CALL_OW 1
55662: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
55663: LD_ADDR_EXP 60
55667: PUSH
55668: LD_EXP 60
55672: PPUSH
55673: LD_VAR 0 2
55677: PPUSH
55678: LD_EXP 52
55682: PUSH
55683: LD_VAR 0 2
55687: ARRAY
55688: PPUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 30
55694: PUSH
55695: LD_INT 32
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 30
55704: PUSH
55705: LD_INT 33
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: PPUSH
55717: CALL_OW 72
55721: PPUSH
55722: CALL_OW 1
55726: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
55727: LD_ADDR_EXP 61
55731: PUSH
55732: LD_EXP 61
55736: PPUSH
55737: LD_VAR 0 2
55741: PPUSH
55742: LD_EXP 52
55746: PUSH
55747: LD_VAR 0 2
55751: ARRAY
55752: PPUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 30
55758: PUSH
55759: LD_INT 32
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 30
55768: PUSH
55769: LD_INT 31
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 58
55783: PUSH
55784: EMPTY
55785: LIST
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PPUSH
55791: CALL_OW 72
55795: PPUSH
55796: CALL_OW 1
55800: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55801: LD_ADDR_EXP 62
55805: PUSH
55806: LD_EXP 62
55810: PPUSH
55811: LD_VAR 0 2
55815: PPUSH
55816: EMPTY
55817: PPUSH
55818: CALL_OW 1
55822: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55823: LD_ADDR_EXP 66
55827: PUSH
55828: LD_EXP 66
55832: PPUSH
55833: LD_VAR 0 2
55837: PPUSH
55838: EMPTY
55839: PPUSH
55840: CALL_OW 1
55844: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55845: LD_ADDR_EXP 65
55849: PUSH
55850: LD_EXP 65
55854: PPUSH
55855: LD_VAR 0 2
55859: PPUSH
55860: EMPTY
55861: PPUSH
55862: CALL_OW 1
55866: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55867: LD_ADDR_EXP 67
55871: PUSH
55872: LD_EXP 67
55876: PPUSH
55877: LD_VAR 0 2
55881: PPUSH
55882: EMPTY
55883: PPUSH
55884: CALL_OW 1
55888: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55889: LD_ADDR_EXP 68
55893: PUSH
55894: LD_EXP 68
55898: PPUSH
55899: LD_VAR 0 2
55903: PPUSH
55904: EMPTY
55905: PPUSH
55906: CALL_OW 1
55910: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55911: LD_ADDR_EXP 69
55915: PUSH
55916: LD_EXP 69
55920: PPUSH
55921: LD_VAR 0 2
55925: PPUSH
55926: EMPTY
55927: PPUSH
55928: CALL_OW 1
55932: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55933: LD_ADDR_EXP 70
55937: PUSH
55938: LD_EXP 70
55942: PPUSH
55943: LD_VAR 0 2
55947: PPUSH
55948: EMPTY
55949: PPUSH
55950: CALL_OW 1
55954: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55955: LD_ADDR_EXP 71
55959: PUSH
55960: LD_EXP 71
55964: PPUSH
55965: LD_VAR 0 2
55969: PPUSH
55970: EMPTY
55971: PPUSH
55972: CALL_OW 1
55976: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55977: LD_ADDR_EXP 72
55981: PUSH
55982: LD_EXP 72
55986: PPUSH
55987: LD_VAR 0 2
55991: PPUSH
55992: EMPTY
55993: PPUSH
55994: CALL_OW 1
55998: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
55999: LD_ADDR_EXP 73
56003: PUSH
56004: LD_EXP 73
56008: PPUSH
56009: LD_VAR 0 2
56013: PPUSH
56014: EMPTY
56015: PPUSH
56016: CALL_OW 1
56020: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56021: LD_ADDR_EXP 74
56025: PUSH
56026: LD_EXP 74
56030: PPUSH
56031: LD_VAR 0 2
56035: PPUSH
56036: EMPTY
56037: PPUSH
56038: CALL_OW 1
56042: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56043: LD_ADDR_EXP 63
56047: PUSH
56048: LD_EXP 63
56052: PPUSH
56053: LD_VAR 0 2
56057: PPUSH
56058: LD_INT 0
56060: PPUSH
56061: CALL_OW 1
56065: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56066: LD_ADDR_EXP 76
56070: PUSH
56071: LD_EXP 76
56075: PPUSH
56076: LD_VAR 0 2
56080: PPUSH
56081: LD_INT 0
56083: PPUSH
56084: CALL_OW 1
56088: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56089: LD_ADDR_EXP 64
56093: PUSH
56094: LD_EXP 64
56098: PPUSH
56099: LD_VAR 0 2
56103: PPUSH
56104: EMPTY
56105: PPUSH
56106: CALL_OW 1
56110: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56111: LD_ADDR_EXP 75
56115: PUSH
56116: LD_EXP 75
56120: PPUSH
56121: LD_VAR 0 2
56125: PPUSH
56126: LD_INT 0
56128: PPUSH
56129: CALL_OW 1
56133: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56134: LD_ADDR_EXP 77
56138: PUSH
56139: LD_EXP 77
56143: PPUSH
56144: LD_VAR 0 2
56148: PPUSH
56149: EMPTY
56150: PPUSH
56151: CALL_OW 1
56155: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56156: LD_ADDR_EXP 80
56160: PUSH
56161: LD_EXP 80
56165: PPUSH
56166: LD_VAR 0 2
56170: PPUSH
56171: LD_INT 0
56173: PPUSH
56174: CALL_OW 1
56178: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
56179: LD_ADDR_EXP 81
56183: PUSH
56184: LD_EXP 81
56188: PPUSH
56189: LD_VAR 0 2
56193: PPUSH
56194: EMPTY
56195: PPUSH
56196: CALL_OW 1
56200: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56201: LD_ADDR_EXP 82
56205: PUSH
56206: LD_EXP 82
56210: PPUSH
56211: LD_VAR 0 2
56215: PPUSH
56216: EMPTY
56217: PPUSH
56218: CALL_OW 1
56222: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56223: LD_ADDR_EXP 83
56227: PUSH
56228: LD_EXP 83
56232: PPUSH
56233: LD_VAR 0 2
56237: PPUSH
56238: EMPTY
56239: PPUSH
56240: CALL_OW 1
56244: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
56245: LD_ADDR_EXP 85
56249: PUSH
56250: LD_EXP 85
56254: PPUSH
56255: LD_VAR 0 2
56259: PPUSH
56260: LD_EXP 52
56264: PUSH
56265: LD_VAR 0 2
56269: ARRAY
56270: PPUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 30
56276: PUSH
56277: LD_INT 6
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 30
56286: PUSH
56287: LD_INT 7
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 30
56296: PUSH
56297: LD_INT 8
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: PPUSH
56310: CALL_OW 72
56314: PPUSH
56315: CALL_OW 1
56319: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
56320: LD_ADDR_EXP 86
56324: PUSH
56325: LD_EXP 86
56329: PPUSH
56330: LD_VAR 0 2
56334: PPUSH
56335: EMPTY
56336: PPUSH
56337: CALL_OW 1
56341: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
56342: LD_ADDR_EXP 87
56346: PUSH
56347: LD_EXP 87
56351: PPUSH
56352: LD_VAR 0 2
56356: PPUSH
56357: EMPTY
56358: PPUSH
56359: CALL_OW 1
56363: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
56364: LD_ADDR_EXP 88
56368: PUSH
56369: LD_EXP 88
56373: PPUSH
56374: LD_VAR 0 2
56378: PPUSH
56379: EMPTY
56380: PPUSH
56381: CALL_OW 1
56385: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
56386: LD_ADDR_EXP 89
56390: PUSH
56391: LD_EXP 89
56395: PPUSH
56396: LD_VAR 0 2
56400: PPUSH
56401: EMPTY
56402: PPUSH
56403: CALL_OW 1
56407: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
56408: LD_ADDR_EXP 90
56412: PUSH
56413: LD_EXP 90
56417: PPUSH
56418: LD_VAR 0 2
56422: PPUSH
56423: EMPTY
56424: PPUSH
56425: CALL_OW 1
56429: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
56430: LD_ADDR_EXP 91
56434: PUSH
56435: LD_EXP 91
56439: PPUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: EMPTY
56446: PPUSH
56447: CALL_OW 1
56451: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
56452: LD_ADDR_EXP 92
56456: PUSH
56457: LD_EXP 92
56461: PPUSH
56462: LD_VAR 0 2
56466: PPUSH
56467: EMPTY
56468: PPUSH
56469: CALL_OW 1
56473: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
56474: LD_ADDR_EXP 93
56478: PUSH
56479: LD_EXP 93
56483: PPUSH
56484: LD_VAR 0 2
56488: PPUSH
56489: EMPTY
56490: PPUSH
56491: CALL_OW 1
56495: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
56496: LD_ADDR_EXP 94
56500: PUSH
56501: LD_EXP 94
56505: PPUSH
56506: LD_VAR 0 2
56510: PPUSH
56511: LD_INT 0
56513: PPUSH
56514: CALL_OW 1
56518: ST_TO_ADDR
// end ;
56519: GO 55443
56521: POP
56522: POP
// MC_InitSides ( ) ;
56523: CALL 56809 0 0
// MC_InitResearch ( ) ;
56527: CALL 56548 0 0
// CustomInitMacro ( ) ;
56531: CALL 5318 0 0
// skirmish := true ;
56535: LD_ADDR_EXP 50
56539: PUSH
56540: LD_INT 1
56542: ST_TO_ADDR
// end ;
56543: LD_VAR 0 1
56547: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56548: LD_INT 0
56550: PPUSH
56551: PPUSH
56552: PPUSH
56553: PPUSH
56554: PPUSH
56555: PPUSH
// if not mc_bases then
56556: LD_EXP 52
56560: NOT
56561: IFFALSE 56565
// exit ;
56563: GO 56804
// for i = 1 to 8 do
56565: LD_ADDR_VAR 0 2
56569: PUSH
56570: DOUBLE
56571: LD_INT 1
56573: DEC
56574: ST_TO_ADDR
56575: LD_INT 8
56577: PUSH
56578: FOR_TO
56579: IFFALSE 56605
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56581: LD_ADDR_EXP 79
56585: PUSH
56586: LD_EXP 79
56590: PPUSH
56591: LD_VAR 0 2
56595: PPUSH
56596: EMPTY
56597: PPUSH
56598: CALL_OW 1
56602: ST_TO_ADDR
56603: GO 56578
56605: POP
56606: POP
// tmp := [ ] ;
56607: LD_ADDR_VAR 0 5
56611: PUSH
56612: EMPTY
56613: ST_TO_ADDR
// for i = 1 to mc_sides do
56614: LD_ADDR_VAR 0 2
56618: PUSH
56619: DOUBLE
56620: LD_INT 1
56622: DEC
56623: ST_TO_ADDR
56624: LD_EXP 78
56628: PUSH
56629: FOR_TO
56630: IFFALSE 56688
// if not mc_sides [ i ] in tmp then
56632: LD_EXP 78
56636: PUSH
56637: LD_VAR 0 2
56641: ARRAY
56642: PUSH
56643: LD_VAR 0 5
56647: IN
56648: NOT
56649: IFFALSE 56686
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56651: LD_ADDR_VAR 0 5
56655: PUSH
56656: LD_VAR 0 5
56660: PPUSH
56661: LD_VAR 0 5
56665: PUSH
56666: LD_INT 1
56668: PLUS
56669: PPUSH
56670: LD_EXP 78
56674: PUSH
56675: LD_VAR 0 2
56679: ARRAY
56680: PPUSH
56681: CALL_OW 2
56685: ST_TO_ADDR
56686: GO 56629
56688: POP
56689: POP
// if not tmp then
56690: LD_VAR 0 5
56694: NOT
56695: IFFALSE 56699
// exit ;
56697: GO 56804
// for j in tmp do
56699: LD_ADDR_VAR 0 3
56703: PUSH
56704: LD_VAR 0 5
56708: PUSH
56709: FOR_IN
56710: IFFALSE 56802
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56712: LD_ADDR_VAR 0 6
56716: PUSH
56717: LD_INT 22
56719: PUSH
56720: LD_VAR 0 3
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PPUSH
56729: CALL_OW 69
56733: ST_TO_ADDR
// if not un then
56734: LD_VAR 0 6
56738: NOT
56739: IFFALSE 56743
// continue ;
56741: GO 56709
// nation := GetNation ( un [ 1 ] ) ;
56743: LD_ADDR_VAR 0 4
56747: PUSH
56748: LD_VAR 0 6
56752: PUSH
56753: LD_INT 1
56755: ARRAY
56756: PPUSH
56757: CALL_OW 248
56761: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56762: LD_ADDR_EXP 79
56766: PUSH
56767: LD_EXP 79
56771: PPUSH
56772: LD_VAR 0 3
56776: PPUSH
56777: LD_VAR 0 3
56781: PPUSH
56782: LD_VAR 0 4
56786: PPUSH
56787: LD_INT 1
56789: PPUSH
56790: CALL 10766 0 3
56794: PPUSH
56795: CALL_OW 1
56799: ST_TO_ADDR
// end ;
56800: GO 56709
56802: POP
56803: POP
// end ;
56804: LD_VAR 0 1
56808: RET
// export function MC_InitSides ( ) ; var i ; begin
56809: LD_INT 0
56811: PPUSH
56812: PPUSH
// if not mc_bases then
56813: LD_EXP 52
56817: NOT
56818: IFFALSE 56822
// exit ;
56820: GO 56896
// for i = 1 to mc_bases do
56822: LD_ADDR_VAR 0 2
56826: PUSH
56827: DOUBLE
56828: LD_INT 1
56830: DEC
56831: ST_TO_ADDR
56832: LD_EXP 52
56836: PUSH
56837: FOR_TO
56838: IFFALSE 56894
// if mc_bases [ i ] then
56840: LD_EXP 52
56844: PUSH
56845: LD_VAR 0 2
56849: ARRAY
56850: IFFALSE 56892
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56852: LD_ADDR_EXP 78
56856: PUSH
56857: LD_EXP 78
56861: PPUSH
56862: LD_VAR 0 2
56866: PPUSH
56867: LD_EXP 52
56871: PUSH
56872: LD_VAR 0 2
56876: ARRAY
56877: PUSH
56878: LD_INT 1
56880: ARRAY
56881: PPUSH
56882: CALL_OW 255
56886: PPUSH
56887: CALL_OW 1
56891: ST_TO_ADDR
56892: GO 56837
56894: POP
56895: POP
// end ;
56896: LD_VAR 0 1
56900: RET
// every 0 0$01 trigger skirmish do
56901: LD_EXP 50
56905: IFFALSE 57059
56907: GO 56909
56909: DISABLE
// begin enable ;
56910: ENABLE
// MC_CheckBuildings ( ) ;
56911: CALL 61548 0 0
// MC_CheckPeopleLife ( ) ;
56915: CALL 61673 0 0
// RaiseSailEvent ( 100 ) ;
56919: LD_INT 100
56921: PPUSH
56922: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
56926: LD_INT 103
56928: PPUSH
56929: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
56933: LD_INT 104
56935: PPUSH
56936: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
56940: LD_INT 105
56942: PPUSH
56943: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
56947: LD_INT 106
56949: PPUSH
56950: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
56954: LD_INT 107
56956: PPUSH
56957: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
56961: LD_INT 108
56963: PPUSH
56964: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
56968: LD_INT 109
56970: PPUSH
56971: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
56975: LD_INT 110
56977: PPUSH
56978: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
56982: LD_INT 111
56984: PPUSH
56985: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
56989: LD_INT 112
56991: PPUSH
56992: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
56996: LD_INT 113
56998: PPUSH
56999: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
57003: LD_INT 120
57005: PPUSH
57006: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57010: LD_INT 121
57012: PPUSH
57013: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57017: LD_INT 122
57019: PPUSH
57020: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57024: LD_INT 123
57026: PPUSH
57027: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57031: LD_INT 124
57033: PPUSH
57034: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57038: LD_INT 125
57040: PPUSH
57041: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57045: LD_INT 126
57047: PPUSH
57048: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57052: LD_INT 200
57054: PPUSH
57055: CALL_OW 427
// end ;
57059: END
// on SailEvent ( event ) do begin if event < 100 then
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 100
57067: LESS
57068: IFFALSE 57079
// CustomEvent ( event ) ;
57070: LD_VAR 0 1
57074: PPUSH
57075: CALL 5310 0 1
// if event = 100 then
57079: LD_VAR 0 1
57083: PUSH
57084: LD_INT 100
57086: EQUAL
57087: IFFALSE 57093
// MC_ClassManager ( ) ;
57089: CALL 57485 0 0
// if event = 101 then
57093: LD_VAR 0 1
57097: PUSH
57098: LD_INT 101
57100: EQUAL
57101: IFFALSE 57107
// MC_RepairBuildings ( ) ;
57103: CALL 62269 0 0
// if event = 102 then
57107: LD_VAR 0 1
57111: PUSH
57112: LD_INT 102
57114: EQUAL
57115: IFFALSE 57121
// MC_Heal ( ) ;
57117: CALL 62675 0 0
// if event = 103 then
57121: LD_VAR 0 1
57125: PUSH
57126: LD_INT 103
57128: EQUAL
57129: IFFALSE 57135
// MC_Build ( ) ;
57131: CALL 63097 0 0
// if event = 104 then
57135: LD_VAR 0 1
57139: PUSH
57140: LD_INT 104
57142: EQUAL
57143: IFFALSE 57149
// MC_TurretWeapon ( ) ;
57145: CALL 64710 0 0
// if event = 105 then
57149: LD_VAR 0 1
57153: PUSH
57154: LD_INT 105
57156: EQUAL
57157: IFFALSE 57163
// MC_BuildUpgrade ( ) ;
57159: CALL 64261 0 0
// if event = 106 then
57163: LD_VAR 0 1
57167: PUSH
57168: LD_INT 106
57170: EQUAL
57171: IFFALSE 57177
// MC_PlantMines ( ) ;
57173: CALL 65140 0 0
// if event = 107 then
57177: LD_VAR 0 1
57181: PUSH
57182: LD_INT 107
57184: EQUAL
57185: IFFALSE 57191
// MC_CollectCrates ( ) ;
57187: CALL 66174 0 0
// if event = 108 then
57191: LD_VAR 0 1
57195: PUSH
57196: LD_INT 108
57198: EQUAL
57199: IFFALSE 57205
// MC_LinkRemoteControl ( ) ;
57201: CALL 67931 0 0
// if event = 109 then
57205: LD_VAR 0 1
57209: PUSH
57210: LD_INT 109
57212: EQUAL
57213: IFFALSE 57219
// MC_ProduceVehicle ( ) ;
57215: CALL 68112 0 0
// if event = 110 then
57219: LD_VAR 0 1
57223: PUSH
57224: LD_INT 110
57226: EQUAL
57227: IFFALSE 57233
// MC_SendAttack ( ) ;
57229: CALL 68593 0 0
// if event = 111 then
57233: LD_VAR 0 1
57237: PUSH
57238: LD_INT 111
57240: EQUAL
57241: IFFALSE 57247
// MC_Defend ( ) ;
57243: CALL 68701 0 0
// if event = 112 then
57247: LD_VAR 0 1
57251: PUSH
57252: LD_INT 112
57254: EQUAL
57255: IFFALSE 57261
// MC_Research ( ) ;
57257: CALL 69306 0 0
// if event = 113 then
57261: LD_VAR 0 1
57265: PUSH
57266: LD_INT 113
57268: EQUAL
57269: IFFALSE 57275
// MC_MinesTrigger ( ) ;
57271: CALL 70420 0 0
// if event = 120 then
57275: LD_VAR 0 1
57279: PUSH
57280: LD_INT 120
57282: EQUAL
57283: IFFALSE 57289
// MC_RepairVehicle ( ) ;
57285: CALL 70519 0 0
// if event = 121 then
57289: LD_VAR 0 1
57293: PUSH
57294: LD_INT 121
57296: EQUAL
57297: IFFALSE 57303
// MC_TameApe ( ) ;
57299: CALL 71226 0 0
// if event = 122 then
57303: LD_VAR 0 1
57307: PUSH
57308: LD_INT 122
57310: EQUAL
57311: IFFALSE 57317
// MC_ChangeApeClass ( ) ;
57313: CALL 72055 0 0
// if event = 123 then
57317: LD_VAR 0 1
57321: PUSH
57322: LD_INT 123
57324: EQUAL
57325: IFFALSE 57331
// MC_Bazooka ( ) ;
57327: CALL 72705 0 0
// if event = 124 then
57331: LD_VAR 0 1
57335: PUSH
57336: LD_INT 124
57338: EQUAL
57339: IFFALSE 57345
// MC_TeleportExit ( ) ;
57341: CALL 72903 0 0
// if event = 125 then
57345: LD_VAR 0 1
57349: PUSH
57350: LD_INT 125
57352: EQUAL
57353: IFFALSE 57359
// MC_Deposits ( ) ;
57355: CALL 73550 0 0
// if event = 126 then
57359: LD_VAR 0 1
57363: PUSH
57364: LD_INT 126
57366: EQUAL
57367: IFFALSE 57373
// MC_RemoteDriver ( ) ;
57369: CALL 74175 0 0
// if event = 200 then
57373: LD_VAR 0 1
57377: PUSH
57378: LD_INT 200
57380: EQUAL
57381: IFFALSE 57387
// MC_Idle ( ) ;
57383: CALL 75908 0 0
// end ;
57387: PPOPN 1
57389: END
// export function MC_Reset ( base , tag ) ; var i ; begin
57390: LD_INT 0
57392: PPUSH
57393: PPUSH
// if not mc_bases [ base ] or not tag then
57394: LD_EXP 52
57398: PUSH
57399: LD_VAR 0 1
57403: ARRAY
57404: NOT
57405: PUSH
57406: LD_VAR 0 2
57410: NOT
57411: OR
57412: IFFALSE 57416
// exit ;
57414: GO 57480
// for i in mc_bases [ base ] union mc_ape [ base ] do
57416: LD_ADDR_VAR 0 4
57420: PUSH
57421: LD_EXP 52
57425: PUSH
57426: LD_VAR 0 1
57430: ARRAY
57431: PUSH
57432: LD_EXP 81
57436: PUSH
57437: LD_VAR 0 1
57441: ARRAY
57442: UNION
57443: PUSH
57444: FOR_IN
57445: IFFALSE 57478
// if GetTag ( i ) = tag then
57447: LD_VAR 0 4
57451: PPUSH
57452: CALL_OW 110
57456: PUSH
57457: LD_VAR 0 2
57461: EQUAL
57462: IFFALSE 57476
// SetTag ( i , 0 ) ;
57464: LD_VAR 0 4
57468: PPUSH
57469: LD_INT 0
57471: PPUSH
57472: CALL_OW 109
57476: GO 57444
57478: POP
57479: POP
// end ;
57480: LD_VAR 0 3
57484: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
57485: LD_INT 0
57487: PPUSH
57488: PPUSH
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
57493: PPUSH
57494: PPUSH
// if not mc_bases then
57495: LD_EXP 52
57499: NOT
57500: IFFALSE 57504
// exit ;
57502: GO 57962
// for i = 1 to mc_bases do
57504: LD_ADDR_VAR 0 2
57508: PUSH
57509: DOUBLE
57510: LD_INT 1
57512: DEC
57513: ST_TO_ADDR
57514: LD_EXP 52
57518: PUSH
57519: FOR_TO
57520: IFFALSE 57960
// begin tmp := MC_ClassCheckReq ( i ) ;
57522: LD_ADDR_VAR 0 4
57526: PUSH
57527: LD_VAR 0 2
57531: PPUSH
57532: CALL 57967 0 1
57536: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
57537: LD_ADDR_EXP 93
57541: PUSH
57542: LD_EXP 93
57546: PPUSH
57547: LD_VAR 0 2
57551: PPUSH
57552: LD_VAR 0 4
57556: PPUSH
57557: CALL_OW 1
57561: ST_TO_ADDR
// if not tmp then
57562: LD_VAR 0 4
57566: NOT
57567: IFFALSE 57571
// continue ;
57569: GO 57519
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
57571: LD_ADDR_VAR 0 6
57575: PUSH
57576: LD_EXP 52
57580: PUSH
57581: LD_VAR 0 2
57585: ARRAY
57586: PPUSH
57587: LD_INT 2
57589: PUSH
57590: LD_INT 30
57592: PUSH
57593: LD_INT 4
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 30
57602: PUSH
57603: LD_INT 5
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: PPUSH
57615: CALL_OW 72
57619: PUSH
57620: LD_EXP 52
57624: PUSH
57625: LD_VAR 0 2
57629: ARRAY
57630: PPUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 30
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 30
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: PPUSH
57659: CALL_OW 72
57663: PUSH
57664: LD_EXP 52
57668: PUSH
57669: LD_VAR 0 2
57673: ARRAY
57674: PPUSH
57675: LD_INT 30
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PPUSH
57685: CALL_OW 72
57689: PUSH
57690: LD_EXP 52
57694: PUSH
57695: LD_VAR 0 2
57699: ARRAY
57700: PPUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 30
57706: PUSH
57707: LD_INT 6
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 30
57716: PUSH
57717: LD_INT 7
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 30
57726: PUSH
57727: LD_INT 8
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: PPUSH
57740: CALL_OW 72
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: ST_TO_ADDR
// for j = 1 to 4 do
57751: LD_ADDR_VAR 0 3
57755: PUSH
57756: DOUBLE
57757: LD_INT 1
57759: DEC
57760: ST_TO_ADDR
57761: LD_INT 4
57763: PUSH
57764: FOR_TO
57765: IFFALSE 57956
// begin if not tmp [ j ] then
57767: LD_VAR 0 4
57771: PUSH
57772: LD_VAR 0 3
57776: ARRAY
57777: NOT
57778: IFFALSE 57782
// continue ;
57780: GO 57764
// for p in tmp [ j ] do
57782: LD_ADDR_VAR 0 5
57786: PUSH
57787: LD_VAR 0 4
57791: PUSH
57792: LD_VAR 0 3
57796: ARRAY
57797: PUSH
57798: FOR_IN
57799: IFFALSE 57952
// begin if not b [ j ] then
57801: LD_VAR 0 6
57805: PUSH
57806: LD_VAR 0 3
57810: ARRAY
57811: NOT
57812: IFFALSE 57816
// break ;
57814: GO 57952
// e := 0 ;
57816: LD_ADDR_VAR 0 7
57820: PUSH
57821: LD_INT 0
57823: ST_TO_ADDR
// for k in b [ j ] do
57824: LD_ADDR_VAR 0 8
57828: PUSH
57829: LD_VAR 0 6
57833: PUSH
57834: LD_VAR 0 3
57838: ARRAY
57839: PUSH
57840: FOR_IN
57841: IFFALSE 57868
// if IsNotFull ( k ) then
57843: LD_VAR 0 8
57847: PPUSH
57848: CALL 14755 0 1
57852: IFFALSE 57866
// begin e := k ;
57854: LD_ADDR_VAR 0 7
57858: PUSH
57859: LD_VAR 0 8
57863: ST_TO_ADDR
// break ;
57864: GO 57868
// end ;
57866: GO 57840
57868: POP
57869: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57870: LD_VAR 0 7
57874: PUSH
57875: LD_VAR 0 5
57879: PPUSH
57880: LD_VAR 0 7
57884: PPUSH
57885: CALL 51813 0 2
57889: NOT
57890: AND
57891: IFFALSE 57950
// begin if IsInUnit ( p ) then
57893: LD_VAR 0 5
57897: PPUSH
57898: CALL_OW 310
57902: IFFALSE 57913
// ComExitBuilding ( p ) ;
57904: LD_VAR 0 5
57908: PPUSH
57909: CALL_OW 122
// ComEnterUnit ( p , e ) ;
57913: LD_VAR 0 5
57917: PPUSH
57918: LD_VAR 0 7
57922: PPUSH
57923: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
57927: LD_VAR 0 5
57931: PPUSH
57932: LD_VAR 0 3
57936: PPUSH
57937: CALL_OW 183
// AddComExitBuilding ( p ) ;
57941: LD_VAR 0 5
57945: PPUSH
57946: CALL_OW 182
// end ; end ;
57950: GO 57798
57952: POP
57953: POP
// end ;
57954: GO 57764
57956: POP
57957: POP
// end ;
57958: GO 57519
57960: POP
57961: POP
// end ;
57962: LD_VAR 0 1
57966: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57967: LD_INT 0
57969: PPUSH
57970: PPUSH
57971: PPUSH
57972: PPUSH
57973: PPUSH
57974: PPUSH
57975: PPUSH
57976: PPUSH
57977: PPUSH
57978: PPUSH
57979: PPUSH
57980: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57981: LD_VAR 0 1
57985: NOT
57986: PUSH
57987: LD_EXP 52
57991: PUSH
57992: LD_VAR 0 1
57996: ARRAY
57997: NOT
57998: OR
57999: PUSH
58000: LD_EXP 52
58004: PUSH
58005: LD_VAR 0 1
58009: ARRAY
58010: PPUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 30
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 30
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: PPUSH
58039: CALL_OW 72
58043: NOT
58044: OR
58045: IFFALSE 58049
// exit ;
58047: GO 61543
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58049: LD_ADDR_VAR 0 4
58053: PUSH
58054: LD_EXP 52
58058: PUSH
58059: LD_VAR 0 1
58063: ARRAY
58064: PPUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 25
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 25
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 25
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 25
58100: PUSH
58101: LD_INT 4
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 25
58110: PUSH
58111: LD_INT 5
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 25
58120: PUSH
58121: LD_INT 8
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 25
58130: PUSH
58131: LD_INT 9
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: PPUSH
58148: CALL_OW 72
58152: ST_TO_ADDR
// for i in tmp do
58153: LD_ADDR_VAR 0 3
58157: PUSH
58158: LD_VAR 0 4
58162: PUSH
58163: FOR_IN
58164: IFFALSE 58195
// if GetTag ( i ) then
58166: LD_VAR 0 3
58170: PPUSH
58171: CALL_OW 110
58175: IFFALSE 58193
// tmp := tmp diff i ;
58177: LD_ADDR_VAR 0 4
58181: PUSH
58182: LD_VAR 0 4
58186: PUSH
58187: LD_VAR 0 3
58191: DIFF
58192: ST_TO_ADDR
58193: GO 58163
58195: POP
58196: POP
// if not tmp then
58197: LD_VAR 0 4
58201: NOT
58202: IFFALSE 58206
// exit ;
58204: GO 61543
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58206: LD_ADDR_VAR 0 5
58210: PUSH
58211: LD_EXP 52
58215: PUSH
58216: LD_VAR 0 1
58220: ARRAY
58221: PPUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 25
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 25
58237: PUSH
58238: LD_INT 5
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 25
58247: PUSH
58248: LD_INT 8
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 25
58257: PUSH
58258: LD_INT 9
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: PPUSH
58272: CALL_OW 72
58276: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
58277: LD_ADDR_VAR 0 6
58281: PUSH
58282: LD_EXP 52
58286: PUSH
58287: LD_VAR 0 1
58291: ARRAY
58292: PPUSH
58293: LD_INT 25
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PPUSH
58303: CALL_OW 72
58307: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
58308: LD_ADDR_VAR 0 7
58312: PUSH
58313: LD_EXP 52
58317: PUSH
58318: LD_VAR 0 1
58322: ARRAY
58323: PPUSH
58324: LD_INT 25
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PPUSH
58334: CALL_OW 72
58338: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
58339: LD_ADDR_VAR 0 8
58343: PUSH
58344: LD_EXP 52
58348: PUSH
58349: LD_VAR 0 1
58353: ARRAY
58354: PPUSH
58355: LD_INT 25
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 24
58367: PUSH
58368: LD_INT 251
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PPUSH
58379: CALL_OW 72
58383: ST_TO_ADDR
// if mc_scan [ base ] then
58384: LD_EXP 75
58388: PUSH
58389: LD_VAR 0 1
58393: ARRAY
58394: IFFALSE 58855
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
58396: LD_ADDR_EXP 94
58400: PUSH
58401: LD_EXP 94
58405: PPUSH
58406: LD_VAR 0 1
58410: PPUSH
58411: LD_INT 4
58413: PPUSH
58414: CALL_OW 1
58418: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58419: LD_ADDR_VAR 0 12
58423: PUSH
58424: LD_EXP 52
58428: PUSH
58429: LD_VAR 0 1
58433: ARRAY
58434: PPUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 30
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 30
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: PPUSH
58463: CALL_OW 72
58467: ST_TO_ADDR
// if not b then
58468: LD_VAR 0 12
58472: NOT
58473: IFFALSE 58477
// exit ;
58475: GO 61543
// p := [ ] ;
58477: LD_ADDR_VAR 0 11
58481: PUSH
58482: EMPTY
58483: ST_TO_ADDR
// if sci >= 2 then
58484: LD_VAR 0 8
58488: PUSH
58489: LD_INT 2
58491: GREATEREQUAL
58492: IFFALSE 58523
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
58494: LD_ADDR_VAR 0 8
58498: PUSH
58499: LD_VAR 0 8
58503: PUSH
58504: LD_INT 1
58506: ARRAY
58507: PUSH
58508: LD_VAR 0 8
58512: PUSH
58513: LD_INT 2
58515: ARRAY
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: ST_TO_ADDR
58521: GO 58584
// if sci = 1 then
58523: LD_VAR 0 8
58527: PUSH
58528: LD_INT 1
58530: EQUAL
58531: IFFALSE 58552
// sci := [ sci [ 1 ] ] else
58533: LD_ADDR_VAR 0 8
58537: PUSH
58538: LD_VAR 0 8
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PUSH
58547: EMPTY
58548: LIST
58549: ST_TO_ADDR
58550: GO 58584
// if sci = 0 then
58552: LD_VAR 0 8
58556: PUSH
58557: LD_INT 0
58559: EQUAL
58560: IFFALSE 58584
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
58562: LD_ADDR_VAR 0 11
58566: PUSH
58567: LD_VAR 0 4
58571: PPUSH
58572: LD_INT 4
58574: PPUSH
58575: CALL 51676 0 2
58579: PUSH
58580: LD_INT 1
58582: ARRAY
58583: ST_TO_ADDR
// if eng > 4 then
58584: LD_VAR 0 6
58588: PUSH
58589: LD_INT 4
58591: GREATER
58592: IFFALSE 58638
// for i = eng downto 4 do
58594: LD_ADDR_VAR 0 3
58598: PUSH
58599: DOUBLE
58600: LD_VAR 0 6
58604: INC
58605: ST_TO_ADDR
58606: LD_INT 4
58608: PUSH
58609: FOR_DOWNTO
58610: IFFALSE 58636
// eng := eng diff eng [ i ] ;
58612: LD_ADDR_VAR 0 6
58616: PUSH
58617: LD_VAR 0 6
58621: PUSH
58622: LD_VAR 0 6
58626: PUSH
58627: LD_VAR 0 3
58631: ARRAY
58632: DIFF
58633: ST_TO_ADDR
58634: GO 58609
58636: POP
58637: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
58638: LD_ADDR_VAR 0 4
58642: PUSH
58643: LD_VAR 0 4
58647: PUSH
58648: LD_VAR 0 5
58652: PUSH
58653: LD_VAR 0 6
58657: UNION
58658: PUSH
58659: LD_VAR 0 7
58663: UNION
58664: PUSH
58665: LD_VAR 0 8
58669: UNION
58670: DIFF
58671: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
58672: LD_ADDR_VAR 0 13
58676: PUSH
58677: LD_EXP 52
58681: PUSH
58682: LD_VAR 0 1
58686: ARRAY
58687: PPUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 30
58693: PUSH
58694: LD_INT 32
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 30
58703: PUSH
58704: LD_INT 31
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: PPUSH
58716: CALL_OW 72
58720: PUSH
58721: LD_EXP 52
58725: PUSH
58726: LD_VAR 0 1
58730: ARRAY
58731: PPUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 30
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 30
58747: PUSH
58748: LD_INT 5
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: PPUSH
58760: CALL_OW 72
58764: PUSH
58765: LD_INT 6
58767: MUL
58768: PLUS
58769: ST_TO_ADDR
// if bcount < tmp then
58770: LD_VAR 0 13
58774: PUSH
58775: LD_VAR 0 4
58779: LESS
58780: IFFALSE 58826
// for i = tmp downto bcount do
58782: LD_ADDR_VAR 0 3
58786: PUSH
58787: DOUBLE
58788: LD_VAR 0 4
58792: INC
58793: ST_TO_ADDR
58794: LD_VAR 0 13
58798: PUSH
58799: FOR_DOWNTO
58800: IFFALSE 58824
// tmp := Delete ( tmp , tmp ) ;
58802: LD_ADDR_VAR 0 4
58806: PUSH
58807: LD_VAR 0 4
58811: PPUSH
58812: LD_VAR 0 4
58816: PPUSH
58817: CALL_OW 3
58821: ST_TO_ADDR
58822: GO 58799
58824: POP
58825: POP
// result := [ tmp , 0 , 0 , p ] ;
58826: LD_ADDR_VAR 0 2
58830: PUSH
58831: LD_VAR 0 4
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_VAR 0 11
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// exit ;
58853: GO 61543
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58855: LD_EXP 52
58859: PUSH
58860: LD_VAR 0 1
58864: ARRAY
58865: PPUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 30
58871: PUSH
58872: LD_INT 6
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 30
58881: PUSH
58882: LD_INT 7
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 30
58891: PUSH
58892: LD_INT 8
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: PPUSH
58905: CALL_OW 72
58909: NOT
58910: PUSH
58911: LD_EXP 52
58915: PUSH
58916: LD_VAR 0 1
58920: ARRAY
58921: PPUSH
58922: LD_INT 30
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PPUSH
58932: CALL_OW 72
58936: NOT
58937: AND
58938: IFFALSE 59010
// begin if eng = tmp then
58940: LD_VAR 0 6
58944: PUSH
58945: LD_VAR 0 4
58949: EQUAL
58950: IFFALSE 58954
// exit ;
58952: GO 61543
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58954: LD_ADDR_EXP 94
58958: PUSH
58959: LD_EXP 94
58963: PPUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: LD_INT 1
58971: PPUSH
58972: CALL_OW 1
58976: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58977: LD_ADDR_VAR 0 2
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_VAR 0 4
58989: PUSH
58990: LD_VAR 0 6
58994: DIFF
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// exit ;
59008: GO 61543
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59010: LD_EXP 79
59014: PUSH
59015: LD_EXP 78
59019: PUSH
59020: LD_VAR 0 1
59024: ARRAY
59025: ARRAY
59026: PUSH
59027: LD_EXP 52
59031: PUSH
59032: LD_VAR 0 1
59036: ARRAY
59037: PPUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 30
59043: PUSH
59044: LD_INT 6
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 30
59053: PUSH
59054: LD_INT 7
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 30
59063: PUSH
59064: LD_INT 8
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: PPUSH
59077: CALL_OW 72
59081: AND
59082: PUSH
59083: LD_EXP 52
59087: PUSH
59088: LD_VAR 0 1
59092: ARRAY
59093: PPUSH
59094: LD_INT 30
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PPUSH
59104: CALL_OW 72
59108: NOT
59109: AND
59110: IFFALSE 59324
// begin if sci >= 6 then
59112: LD_VAR 0 8
59116: PUSH
59117: LD_INT 6
59119: GREATEREQUAL
59120: IFFALSE 59124
// exit ;
59122: GO 61543
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59124: LD_ADDR_EXP 94
59128: PUSH
59129: LD_EXP 94
59133: PPUSH
59134: LD_VAR 0 1
59138: PPUSH
59139: LD_INT 2
59141: PPUSH
59142: CALL_OW 1
59146: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59147: LD_ADDR_VAR 0 9
59151: PUSH
59152: LD_VAR 0 4
59156: PUSH
59157: LD_VAR 0 8
59161: DIFF
59162: PPUSH
59163: LD_INT 4
59165: PPUSH
59166: CALL 51676 0 2
59170: ST_TO_ADDR
// p := [ ] ;
59171: LD_ADDR_VAR 0 11
59175: PUSH
59176: EMPTY
59177: ST_TO_ADDR
// if sci < 6 and sort > 6 then
59178: LD_VAR 0 8
59182: PUSH
59183: LD_INT 6
59185: LESS
59186: PUSH
59187: LD_VAR 0 9
59191: PUSH
59192: LD_INT 6
59194: GREATER
59195: AND
59196: IFFALSE 59277
// begin for i = 1 to 6 - sci do
59198: LD_ADDR_VAR 0 3
59202: PUSH
59203: DOUBLE
59204: LD_INT 1
59206: DEC
59207: ST_TO_ADDR
59208: LD_INT 6
59210: PUSH
59211: LD_VAR 0 8
59215: MINUS
59216: PUSH
59217: FOR_TO
59218: IFFALSE 59273
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
59220: LD_ADDR_VAR 0 11
59224: PUSH
59225: LD_VAR 0 11
59229: PPUSH
59230: LD_VAR 0 11
59234: PUSH
59235: LD_INT 1
59237: PLUS
59238: PPUSH
59239: LD_VAR 0 9
59243: PUSH
59244: LD_INT 1
59246: ARRAY
59247: PPUSH
59248: CALL_OW 2
59252: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
59253: LD_ADDR_VAR 0 9
59257: PUSH
59258: LD_VAR 0 9
59262: PPUSH
59263: LD_INT 1
59265: PPUSH
59266: CALL_OW 3
59270: ST_TO_ADDR
// end ;
59271: GO 59217
59273: POP
59274: POP
// end else
59275: GO 59297
// if sort then
59277: LD_VAR 0 9
59281: IFFALSE 59297
// p := sort [ 1 ] ;
59283: LD_ADDR_VAR 0 11
59287: PUSH
59288: LD_VAR 0 9
59292: PUSH
59293: LD_INT 1
59295: ARRAY
59296: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
59297: LD_ADDR_VAR 0 2
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_VAR 0 11
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// exit ;
59322: GO 61543
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59324: LD_EXP 79
59328: PUSH
59329: LD_EXP 78
59333: PUSH
59334: LD_VAR 0 1
59338: ARRAY
59339: ARRAY
59340: PUSH
59341: LD_EXP 52
59345: PUSH
59346: LD_VAR 0 1
59350: ARRAY
59351: PPUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 30
59357: PUSH
59358: LD_INT 6
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 30
59367: PUSH
59368: LD_INT 7
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 30
59377: PUSH
59378: LD_INT 8
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: PPUSH
59391: CALL_OW 72
59395: AND
59396: PUSH
59397: LD_EXP 52
59401: PUSH
59402: LD_VAR 0 1
59406: ARRAY
59407: PPUSH
59408: LD_INT 30
59410: PUSH
59411: LD_INT 3
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PPUSH
59418: CALL_OW 72
59422: AND
59423: IFFALSE 60157
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
59425: LD_ADDR_EXP 94
59429: PUSH
59430: LD_EXP 94
59434: PPUSH
59435: LD_VAR 0 1
59439: PPUSH
59440: LD_INT 3
59442: PPUSH
59443: CALL_OW 1
59447: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59448: LD_ADDR_VAR 0 2
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: ST_TO_ADDR
// if not eng then
59471: LD_VAR 0 6
59475: NOT
59476: IFFALSE 59539
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
59478: LD_ADDR_VAR 0 11
59482: PUSH
59483: LD_VAR 0 4
59487: PPUSH
59488: LD_INT 2
59490: PPUSH
59491: CALL 51676 0 2
59495: PUSH
59496: LD_INT 1
59498: ARRAY
59499: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
59500: LD_ADDR_VAR 0 2
59504: PUSH
59505: LD_VAR 0 2
59509: PPUSH
59510: LD_INT 2
59512: PPUSH
59513: LD_VAR 0 11
59517: PPUSH
59518: CALL_OW 1
59522: ST_TO_ADDR
// tmp := tmp diff p ;
59523: LD_ADDR_VAR 0 4
59527: PUSH
59528: LD_VAR 0 4
59532: PUSH
59533: LD_VAR 0 11
59537: DIFF
59538: ST_TO_ADDR
// end ; if tmp and sci < 6 then
59539: LD_VAR 0 4
59543: PUSH
59544: LD_VAR 0 8
59548: PUSH
59549: LD_INT 6
59551: LESS
59552: AND
59553: IFFALSE 59741
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
59555: LD_ADDR_VAR 0 9
59559: PUSH
59560: LD_VAR 0 4
59564: PUSH
59565: LD_VAR 0 8
59569: PUSH
59570: LD_VAR 0 7
59574: UNION
59575: DIFF
59576: PPUSH
59577: LD_INT 4
59579: PPUSH
59580: CALL 51676 0 2
59584: ST_TO_ADDR
// p := [ ] ;
59585: LD_ADDR_VAR 0 11
59589: PUSH
59590: EMPTY
59591: ST_TO_ADDR
// if sort then
59592: LD_VAR 0 9
59596: IFFALSE 59712
// for i = 1 to 6 - sci do
59598: LD_ADDR_VAR 0 3
59602: PUSH
59603: DOUBLE
59604: LD_INT 1
59606: DEC
59607: ST_TO_ADDR
59608: LD_INT 6
59610: PUSH
59611: LD_VAR 0 8
59615: MINUS
59616: PUSH
59617: FOR_TO
59618: IFFALSE 59710
// begin if i = sort then
59620: LD_VAR 0 3
59624: PUSH
59625: LD_VAR 0 9
59629: EQUAL
59630: IFFALSE 59634
// break ;
59632: GO 59710
// if GetClass ( i ) = 4 then
59634: LD_VAR 0 3
59638: PPUSH
59639: CALL_OW 257
59643: PUSH
59644: LD_INT 4
59646: EQUAL
59647: IFFALSE 59651
// continue ;
59649: GO 59617
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59651: LD_ADDR_VAR 0 11
59655: PUSH
59656: LD_VAR 0 11
59660: PPUSH
59661: LD_VAR 0 11
59665: PUSH
59666: LD_INT 1
59668: PLUS
59669: PPUSH
59670: LD_VAR 0 9
59674: PUSH
59675: LD_VAR 0 3
59679: ARRAY
59680: PPUSH
59681: CALL_OW 2
59685: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59686: LD_ADDR_VAR 0 4
59690: PUSH
59691: LD_VAR 0 4
59695: PUSH
59696: LD_VAR 0 9
59700: PUSH
59701: LD_VAR 0 3
59705: ARRAY
59706: DIFF
59707: ST_TO_ADDR
// end ;
59708: GO 59617
59710: POP
59711: POP
// if p then
59712: LD_VAR 0 11
59716: IFFALSE 59741
// result := Replace ( result , 4 , p ) ;
59718: LD_ADDR_VAR 0 2
59722: PUSH
59723: LD_VAR 0 2
59727: PPUSH
59728: LD_INT 4
59730: PPUSH
59731: LD_VAR 0 11
59735: PPUSH
59736: CALL_OW 1
59740: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59741: LD_VAR 0 4
59745: PUSH
59746: LD_VAR 0 7
59750: PUSH
59751: LD_INT 6
59753: LESS
59754: AND
59755: IFFALSE 59943
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59757: LD_ADDR_VAR 0 9
59761: PUSH
59762: LD_VAR 0 4
59766: PUSH
59767: LD_VAR 0 8
59771: PUSH
59772: LD_VAR 0 7
59776: UNION
59777: DIFF
59778: PPUSH
59779: LD_INT 3
59781: PPUSH
59782: CALL 51676 0 2
59786: ST_TO_ADDR
// p := [ ] ;
59787: LD_ADDR_VAR 0 11
59791: PUSH
59792: EMPTY
59793: ST_TO_ADDR
// if sort then
59794: LD_VAR 0 9
59798: IFFALSE 59914
// for i = 1 to 6 - mech do
59800: LD_ADDR_VAR 0 3
59804: PUSH
59805: DOUBLE
59806: LD_INT 1
59808: DEC
59809: ST_TO_ADDR
59810: LD_INT 6
59812: PUSH
59813: LD_VAR 0 7
59817: MINUS
59818: PUSH
59819: FOR_TO
59820: IFFALSE 59912
// begin if i = sort then
59822: LD_VAR 0 3
59826: PUSH
59827: LD_VAR 0 9
59831: EQUAL
59832: IFFALSE 59836
// break ;
59834: GO 59912
// if GetClass ( i ) = 3 then
59836: LD_VAR 0 3
59840: PPUSH
59841: CALL_OW 257
59845: PUSH
59846: LD_INT 3
59848: EQUAL
59849: IFFALSE 59853
// continue ;
59851: GO 59819
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59853: LD_ADDR_VAR 0 11
59857: PUSH
59858: LD_VAR 0 11
59862: PPUSH
59863: LD_VAR 0 11
59867: PUSH
59868: LD_INT 1
59870: PLUS
59871: PPUSH
59872: LD_VAR 0 9
59876: PUSH
59877: LD_VAR 0 3
59881: ARRAY
59882: PPUSH
59883: CALL_OW 2
59887: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59888: LD_ADDR_VAR 0 4
59892: PUSH
59893: LD_VAR 0 4
59897: PUSH
59898: LD_VAR 0 9
59902: PUSH
59903: LD_VAR 0 3
59907: ARRAY
59908: DIFF
59909: ST_TO_ADDR
// end ;
59910: GO 59819
59912: POP
59913: POP
// if p then
59914: LD_VAR 0 11
59918: IFFALSE 59943
// result := Replace ( result , 3 , p ) ;
59920: LD_ADDR_VAR 0 2
59924: PUSH
59925: LD_VAR 0 2
59929: PPUSH
59930: LD_INT 3
59932: PPUSH
59933: LD_VAR 0 11
59937: PPUSH
59938: CALL_OW 1
59942: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59943: LD_VAR 0 4
59947: PUSH
59948: LD_INT 6
59950: GREATER
59951: PUSH
59952: LD_VAR 0 6
59956: PUSH
59957: LD_INT 6
59959: LESS
59960: AND
59961: IFFALSE 60155
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59963: LD_ADDR_VAR 0 9
59967: PUSH
59968: LD_VAR 0 4
59972: PUSH
59973: LD_VAR 0 8
59977: PUSH
59978: LD_VAR 0 7
59982: UNION
59983: PUSH
59984: LD_VAR 0 6
59988: UNION
59989: DIFF
59990: PPUSH
59991: LD_INT 2
59993: PPUSH
59994: CALL 51676 0 2
59998: ST_TO_ADDR
// p := [ ] ;
59999: LD_ADDR_VAR 0 11
60003: PUSH
60004: EMPTY
60005: ST_TO_ADDR
// if sort then
60006: LD_VAR 0 9
60010: IFFALSE 60126
// for i = 1 to 6 - eng do
60012: LD_ADDR_VAR 0 3
60016: PUSH
60017: DOUBLE
60018: LD_INT 1
60020: DEC
60021: ST_TO_ADDR
60022: LD_INT 6
60024: PUSH
60025: LD_VAR 0 6
60029: MINUS
60030: PUSH
60031: FOR_TO
60032: IFFALSE 60124
// begin if i = sort then
60034: LD_VAR 0 3
60038: PUSH
60039: LD_VAR 0 9
60043: EQUAL
60044: IFFALSE 60048
// break ;
60046: GO 60124
// if GetClass ( i ) = 2 then
60048: LD_VAR 0 3
60052: PPUSH
60053: CALL_OW 257
60057: PUSH
60058: LD_INT 2
60060: EQUAL
60061: IFFALSE 60065
// continue ;
60063: GO 60031
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60065: LD_ADDR_VAR 0 11
60069: PUSH
60070: LD_VAR 0 11
60074: PPUSH
60075: LD_VAR 0 11
60079: PUSH
60080: LD_INT 1
60082: PLUS
60083: PPUSH
60084: LD_VAR 0 9
60088: PUSH
60089: LD_VAR 0 3
60093: ARRAY
60094: PPUSH
60095: CALL_OW 2
60099: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60100: LD_ADDR_VAR 0 4
60104: PUSH
60105: LD_VAR 0 4
60109: PUSH
60110: LD_VAR 0 9
60114: PUSH
60115: LD_VAR 0 3
60119: ARRAY
60120: DIFF
60121: ST_TO_ADDR
// end ;
60122: GO 60031
60124: POP
60125: POP
// if p then
60126: LD_VAR 0 11
60130: IFFALSE 60155
// result := Replace ( result , 2 , p ) ;
60132: LD_ADDR_VAR 0 2
60136: PUSH
60137: LD_VAR 0 2
60141: PPUSH
60142: LD_INT 2
60144: PPUSH
60145: LD_VAR 0 11
60149: PPUSH
60150: CALL_OW 1
60154: ST_TO_ADDR
// end ; exit ;
60155: GO 61543
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
60157: LD_EXP 79
60161: PUSH
60162: LD_EXP 78
60166: PUSH
60167: LD_VAR 0 1
60171: ARRAY
60172: ARRAY
60173: NOT
60174: PUSH
60175: LD_EXP 52
60179: PUSH
60180: LD_VAR 0 1
60184: ARRAY
60185: PPUSH
60186: LD_INT 30
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PPUSH
60196: CALL_OW 72
60200: AND
60201: PUSH
60202: LD_EXP 57
60206: PUSH
60207: LD_VAR 0 1
60211: ARRAY
60212: AND
60213: IFFALSE 60821
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
60215: LD_ADDR_EXP 94
60219: PUSH
60220: LD_EXP 94
60224: PPUSH
60225: LD_VAR 0 1
60229: PPUSH
60230: LD_INT 5
60232: PPUSH
60233: CALL_OW 1
60237: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60238: LD_ADDR_VAR 0 2
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// if sci > 1 then
60261: LD_VAR 0 8
60265: PUSH
60266: LD_INT 1
60268: GREATER
60269: IFFALSE 60297
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
60271: LD_ADDR_VAR 0 4
60275: PUSH
60276: LD_VAR 0 4
60280: PUSH
60281: LD_VAR 0 8
60285: PUSH
60286: LD_VAR 0 8
60290: PUSH
60291: LD_INT 1
60293: ARRAY
60294: DIFF
60295: DIFF
60296: ST_TO_ADDR
// if tmp and not sci then
60297: LD_VAR 0 4
60301: PUSH
60302: LD_VAR 0 8
60306: NOT
60307: AND
60308: IFFALSE 60377
// begin sort := SortBySkill ( tmp , 4 ) ;
60310: LD_ADDR_VAR 0 9
60314: PUSH
60315: LD_VAR 0 4
60319: PPUSH
60320: LD_INT 4
60322: PPUSH
60323: CALL 51676 0 2
60327: ST_TO_ADDR
// if sort then
60328: LD_VAR 0 9
60332: IFFALSE 60348
// p := sort [ 1 ] ;
60334: LD_ADDR_VAR 0 11
60338: PUSH
60339: LD_VAR 0 9
60343: PUSH
60344: LD_INT 1
60346: ARRAY
60347: ST_TO_ADDR
// if p then
60348: LD_VAR 0 11
60352: IFFALSE 60377
// result := Replace ( result , 4 , p ) ;
60354: LD_ADDR_VAR 0 2
60358: PUSH
60359: LD_VAR 0 2
60363: PPUSH
60364: LD_INT 4
60366: PPUSH
60367: LD_VAR 0 11
60371: PPUSH
60372: CALL_OW 1
60376: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60377: LD_ADDR_VAR 0 4
60381: PUSH
60382: LD_VAR 0 4
60386: PUSH
60387: LD_VAR 0 7
60391: DIFF
60392: ST_TO_ADDR
// if tmp and mech < 6 then
60393: LD_VAR 0 4
60397: PUSH
60398: LD_VAR 0 7
60402: PUSH
60403: LD_INT 6
60405: LESS
60406: AND
60407: IFFALSE 60595
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60409: LD_ADDR_VAR 0 9
60413: PUSH
60414: LD_VAR 0 4
60418: PUSH
60419: LD_VAR 0 8
60423: PUSH
60424: LD_VAR 0 7
60428: UNION
60429: DIFF
60430: PPUSH
60431: LD_INT 3
60433: PPUSH
60434: CALL 51676 0 2
60438: ST_TO_ADDR
// p := [ ] ;
60439: LD_ADDR_VAR 0 11
60443: PUSH
60444: EMPTY
60445: ST_TO_ADDR
// if sort then
60446: LD_VAR 0 9
60450: IFFALSE 60566
// for i = 1 to 6 - mech do
60452: LD_ADDR_VAR 0 3
60456: PUSH
60457: DOUBLE
60458: LD_INT 1
60460: DEC
60461: ST_TO_ADDR
60462: LD_INT 6
60464: PUSH
60465: LD_VAR 0 7
60469: MINUS
60470: PUSH
60471: FOR_TO
60472: IFFALSE 60564
// begin if i = sort then
60474: LD_VAR 0 3
60478: PUSH
60479: LD_VAR 0 9
60483: EQUAL
60484: IFFALSE 60488
// break ;
60486: GO 60564
// if GetClass ( i ) = 3 then
60488: LD_VAR 0 3
60492: PPUSH
60493: CALL_OW 257
60497: PUSH
60498: LD_INT 3
60500: EQUAL
60501: IFFALSE 60505
// continue ;
60503: GO 60471
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60505: LD_ADDR_VAR 0 11
60509: PUSH
60510: LD_VAR 0 11
60514: PPUSH
60515: LD_VAR 0 11
60519: PUSH
60520: LD_INT 1
60522: PLUS
60523: PPUSH
60524: LD_VAR 0 9
60528: PUSH
60529: LD_VAR 0 3
60533: ARRAY
60534: PPUSH
60535: CALL_OW 2
60539: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60540: LD_ADDR_VAR 0 4
60544: PUSH
60545: LD_VAR 0 4
60549: PUSH
60550: LD_VAR 0 9
60554: PUSH
60555: LD_VAR 0 3
60559: ARRAY
60560: DIFF
60561: ST_TO_ADDR
// end ;
60562: GO 60471
60564: POP
60565: POP
// if p then
60566: LD_VAR 0 11
60570: IFFALSE 60595
// result := Replace ( result , 3 , p ) ;
60572: LD_ADDR_VAR 0 2
60576: PUSH
60577: LD_VAR 0 2
60581: PPUSH
60582: LD_INT 3
60584: PPUSH
60585: LD_VAR 0 11
60589: PPUSH
60590: CALL_OW 1
60594: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60595: LD_ADDR_VAR 0 4
60599: PUSH
60600: LD_VAR 0 4
60604: PUSH
60605: LD_VAR 0 6
60609: DIFF
60610: ST_TO_ADDR
// if tmp and eng < 6 then
60611: LD_VAR 0 4
60615: PUSH
60616: LD_VAR 0 6
60620: PUSH
60621: LD_INT 6
60623: LESS
60624: AND
60625: IFFALSE 60819
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60627: LD_ADDR_VAR 0 9
60631: PUSH
60632: LD_VAR 0 4
60636: PUSH
60637: LD_VAR 0 8
60641: PUSH
60642: LD_VAR 0 7
60646: UNION
60647: PUSH
60648: LD_VAR 0 6
60652: UNION
60653: DIFF
60654: PPUSH
60655: LD_INT 2
60657: PPUSH
60658: CALL 51676 0 2
60662: ST_TO_ADDR
// p := [ ] ;
60663: LD_ADDR_VAR 0 11
60667: PUSH
60668: EMPTY
60669: ST_TO_ADDR
// if sort then
60670: LD_VAR 0 9
60674: IFFALSE 60790
// for i = 1 to 6 - eng do
60676: LD_ADDR_VAR 0 3
60680: PUSH
60681: DOUBLE
60682: LD_INT 1
60684: DEC
60685: ST_TO_ADDR
60686: LD_INT 6
60688: PUSH
60689: LD_VAR 0 6
60693: MINUS
60694: PUSH
60695: FOR_TO
60696: IFFALSE 60788
// begin if i = sort then
60698: LD_VAR 0 3
60702: PUSH
60703: LD_VAR 0 9
60707: EQUAL
60708: IFFALSE 60712
// break ;
60710: GO 60788
// if GetClass ( i ) = 2 then
60712: LD_VAR 0 3
60716: PPUSH
60717: CALL_OW 257
60721: PUSH
60722: LD_INT 2
60724: EQUAL
60725: IFFALSE 60729
// continue ;
60727: GO 60695
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60729: LD_ADDR_VAR 0 11
60733: PUSH
60734: LD_VAR 0 11
60738: PPUSH
60739: LD_VAR 0 11
60743: PUSH
60744: LD_INT 1
60746: PLUS
60747: PPUSH
60748: LD_VAR 0 9
60752: PUSH
60753: LD_VAR 0 3
60757: ARRAY
60758: PPUSH
60759: CALL_OW 2
60763: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60764: LD_ADDR_VAR 0 4
60768: PUSH
60769: LD_VAR 0 4
60773: PUSH
60774: LD_VAR 0 9
60778: PUSH
60779: LD_VAR 0 3
60783: ARRAY
60784: DIFF
60785: ST_TO_ADDR
// end ;
60786: GO 60695
60788: POP
60789: POP
// if p then
60790: LD_VAR 0 11
60794: IFFALSE 60819
// result := Replace ( result , 2 , p ) ;
60796: LD_ADDR_VAR 0 2
60800: PUSH
60801: LD_VAR 0 2
60805: PPUSH
60806: LD_INT 2
60808: PPUSH
60809: LD_VAR 0 11
60813: PPUSH
60814: CALL_OW 1
60818: ST_TO_ADDR
// end ; exit ;
60819: GO 61543
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60821: LD_EXP 79
60825: PUSH
60826: LD_EXP 78
60830: PUSH
60831: LD_VAR 0 1
60835: ARRAY
60836: ARRAY
60837: NOT
60838: PUSH
60839: LD_EXP 52
60843: PUSH
60844: LD_VAR 0 1
60848: ARRAY
60849: PPUSH
60850: LD_INT 30
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PPUSH
60860: CALL_OW 72
60864: AND
60865: PUSH
60866: LD_EXP 57
60870: PUSH
60871: LD_VAR 0 1
60875: ARRAY
60876: NOT
60877: AND
60878: IFFALSE 61543
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60880: LD_ADDR_EXP 94
60884: PUSH
60885: LD_EXP 94
60889: PPUSH
60890: LD_VAR 0 1
60894: PPUSH
60895: LD_INT 6
60897: PPUSH
60898: CALL_OW 1
60902: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60903: LD_ADDR_VAR 0 2
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: ST_TO_ADDR
// if sci >= 1 then
60926: LD_VAR 0 8
60930: PUSH
60931: LD_INT 1
60933: GREATEREQUAL
60934: IFFALSE 60956
// tmp := tmp diff sci [ 1 ] ;
60936: LD_ADDR_VAR 0 4
60940: PUSH
60941: LD_VAR 0 4
60945: PUSH
60946: LD_VAR 0 8
60950: PUSH
60951: LD_INT 1
60953: ARRAY
60954: DIFF
60955: ST_TO_ADDR
// if tmp and not sci then
60956: LD_VAR 0 4
60960: PUSH
60961: LD_VAR 0 8
60965: NOT
60966: AND
60967: IFFALSE 61036
// begin sort := SortBySkill ( tmp , 4 ) ;
60969: LD_ADDR_VAR 0 9
60973: PUSH
60974: LD_VAR 0 4
60978: PPUSH
60979: LD_INT 4
60981: PPUSH
60982: CALL 51676 0 2
60986: ST_TO_ADDR
// if sort then
60987: LD_VAR 0 9
60991: IFFALSE 61007
// p := sort [ 1 ] ;
60993: LD_ADDR_VAR 0 11
60997: PUSH
60998: LD_VAR 0 9
61002: PUSH
61003: LD_INT 1
61005: ARRAY
61006: ST_TO_ADDR
// if p then
61007: LD_VAR 0 11
61011: IFFALSE 61036
// result := Replace ( result , 4 , p ) ;
61013: LD_ADDR_VAR 0 2
61017: PUSH
61018: LD_VAR 0 2
61022: PPUSH
61023: LD_INT 4
61025: PPUSH
61026: LD_VAR 0 11
61030: PPUSH
61031: CALL_OW 1
61035: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61036: LD_ADDR_VAR 0 4
61040: PUSH
61041: LD_VAR 0 4
61045: PUSH
61046: LD_VAR 0 7
61050: DIFF
61051: ST_TO_ADDR
// if tmp and mech < 6 then
61052: LD_VAR 0 4
61056: PUSH
61057: LD_VAR 0 7
61061: PUSH
61062: LD_INT 6
61064: LESS
61065: AND
61066: IFFALSE 61248
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61068: LD_ADDR_VAR 0 9
61072: PUSH
61073: LD_VAR 0 4
61077: PUSH
61078: LD_VAR 0 7
61082: DIFF
61083: PPUSH
61084: LD_INT 3
61086: PPUSH
61087: CALL 51676 0 2
61091: ST_TO_ADDR
// p := [ ] ;
61092: LD_ADDR_VAR 0 11
61096: PUSH
61097: EMPTY
61098: ST_TO_ADDR
// if sort then
61099: LD_VAR 0 9
61103: IFFALSE 61219
// for i = 1 to 6 - mech do
61105: LD_ADDR_VAR 0 3
61109: PUSH
61110: DOUBLE
61111: LD_INT 1
61113: DEC
61114: ST_TO_ADDR
61115: LD_INT 6
61117: PUSH
61118: LD_VAR 0 7
61122: MINUS
61123: PUSH
61124: FOR_TO
61125: IFFALSE 61217
// begin if i = sort then
61127: LD_VAR 0 3
61131: PUSH
61132: LD_VAR 0 9
61136: EQUAL
61137: IFFALSE 61141
// break ;
61139: GO 61217
// if GetClass ( i ) = 3 then
61141: LD_VAR 0 3
61145: PPUSH
61146: CALL_OW 257
61150: PUSH
61151: LD_INT 3
61153: EQUAL
61154: IFFALSE 61158
// continue ;
61156: GO 61124
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61158: LD_ADDR_VAR 0 11
61162: PUSH
61163: LD_VAR 0 11
61167: PPUSH
61168: LD_VAR 0 11
61172: PUSH
61173: LD_INT 1
61175: PLUS
61176: PPUSH
61177: LD_VAR 0 9
61181: PUSH
61182: LD_VAR 0 3
61186: ARRAY
61187: PPUSH
61188: CALL_OW 2
61192: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61193: LD_ADDR_VAR 0 4
61197: PUSH
61198: LD_VAR 0 4
61202: PUSH
61203: LD_VAR 0 9
61207: PUSH
61208: LD_VAR 0 3
61212: ARRAY
61213: DIFF
61214: ST_TO_ADDR
// end ;
61215: GO 61124
61217: POP
61218: POP
// if p then
61219: LD_VAR 0 11
61223: IFFALSE 61248
// result := Replace ( result , 3 , p ) ;
61225: LD_ADDR_VAR 0 2
61229: PUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: LD_INT 3
61237: PPUSH
61238: LD_VAR 0 11
61242: PPUSH
61243: CALL_OW 1
61247: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61248: LD_ADDR_VAR 0 4
61252: PUSH
61253: LD_VAR 0 4
61257: PUSH
61258: LD_VAR 0 6
61262: DIFF
61263: ST_TO_ADDR
// if tmp and eng < 4 then
61264: LD_VAR 0 4
61268: PUSH
61269: LD_VAR 0 6
61273: PUSH
61274: LD_INT 4
61276: LESS
61277: AND
61278: IFFALSE 61468
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
61280: LD_ADDR_VAR 0 9
61284: PUSH
61285: LD_VAR 0 4
61289: PUSH
61290: LD_VAR 0 7
61294: PUSH
61295: LD_VAR 0 6
61299: UNION
61300: DIFF
61301: PPUSH
61302: LD_INT 2
61304: PPUSH
61305: CALL 51676 0 2
61309: ST_TO_ADDR
// p := [ ] ;
61310: LD_ADDR_VAR 0 11
61314: PUSH
61315: EMPTY
61316: ST_TO_ADDR
// if sort then
61317: LD_VAR 0 9
61321: IFFALSE 61437
// for i = 1 to 4 - eng do
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: DOUBLE
61329: LD_INT 1
61331: DEC
61332: ST_TO_ADDR
61333: LD_INT 4
61335: PUSH
61336: LD_VAR 0 6
61340: MINUS
61341: PUSH
61342: FOR_TO
61343: IFFALSE 61435
// begin if i = sort then
61345: LD_VAR 0 3
61349: PUSH
61350: LD_VAR 0 9
61354: EQUAL
61355: IFFALSE 61359
// break ;
61357: GO 61435
// if GetClass ( i ) = 2 then
61359: LD_VAR 0 3
61363: PPUSH
61364: CALL_OW 257
61368: PUSH
61369: LD_INT 2
61371: EQUAL
61372: IFFALSE 61376
// continue ;
61374: GO 61342
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61376: LD_ADDR_VAR 0 11
61380: PUSH
61381: LD_VAR 0 11
61385: PPUSH
61386: LD_VAR 0 11
61390: PUSH
61391: LD_INT 1
61393: PLUS
61394: PPUSH
61395: LD_VAR 0 9
61399: PUSH
61400: LD_VAR 0 3
61404: ARRAY
61405: PPUSH
61406: CALL_OW 2
61410: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61411: LD_ADDR_VAR 0 4
61415: PUSH
61416: LD_VAR 0 4
61420: PUSH
61421: LD_VAR 0 9
61425: PUSH
61426: LD_VAR 0 3
61430: ARRAY
61431: DIFF
61432: ST_TO_ADDR
// end ;
61433: GO 61342
61435: POP
61436: POP
// if p then
61437: LD_VAR 0 11
61441: IFFALSE 61466
// result := Replace ( result , 2 , p ) ;
61443: LD_ADDR_VAR 0 2
61447: PUSH
61448: LD_VAR 0 2
61452: PPUSH
61453: LD_INT 2
61455: PPUSH
61456: LD_VAR 0 11
61460: PPUSH
61461: CALL_OW 1
61465: ST_TO_ADDR
// end else
61466: GO 61512
// for i = eng downto 5 do
61468: LD_ADDR_VAR 0 3
61472: PUSH
61473: DOUBLE
61474: LD_VAR 0 6
61478: INC
61479: ST_TO_ADDR
61480: LD_INT 5
61482: PUSH
61483: FOR_DOWNTO
61484: IFFALSE 61510
// tmp := tmp union eng [ i ] ;
61486: LD_ADDR_VAR 0 4
61490: PUSH
61491: LD_VAR 0 4
61495: PUSH
61496: LD_VAR 0 6
61500: PUSH
61501: LD_VAR 0 3
61505: ARRAY
61506: UNION
61507: ST_TO_ADDR
61508: GO 61483
61510: POP
61511: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
61512: LD_ADDR_VAR 0 2
61516: PUSH
61517: LD_VAR 0 2
61521: PPUSH
61522: LD_INT 1
61524: PPUSH
61525: LD_VAR 0 4
61529: PUSH
61530: LD_VAR 0 5
61534: DIFF
61535: PPUSH
61536: CALL_OW 1
61540: ST_TO_ADDR
// exit ;
61541: GO 61543
// end ; end ;
61543: LD_VAR 0 2
61547: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
61552: PPUSH
// if not mc_bases then
61553: LD_EXP 52
61557: NOT
61558: IFFALSE 61562
// exit ;
61560: GO 61668
// for i = 1 to mc_bases do
61562: LD_ADDR_VAR 0 2
61566: PUSH
61567: DOUBLE
61568: LD_INT 1
61570: DEC
61571: ST_TO_ADDR
61572: LD_EXP 52
61576: PUSH
61577: FOR_TO
61578: IFFALSE 61659
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
61580: LD_ADDR_VAR 0 3
61584: PUSH
61585: LD_EXP 52
61589: PUSH
61590: LD_VAR 0 2
61594: ARRAY
61595: PPUSH
61596: LD_INT 21
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: LD_INT 24
61611: PUSH
61612: LD_INT 1000
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PPUSH
61627: CALL_OW 72
61631: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
61632: LD_ADDR_EXP 53
61636: PUSH
61637: LD_EXP 53
61641: PPUSH
61642: LD_VAR 0 2
61646: PPUSH
61647: LD_VAR 0 3
61651: PPUSH
61652: CALL_OW 1
61656: ST_TO_ADDR
// end ;
61657: GO 61577
61659: POP
61660: POP
// RaiseSailEvent ( 101 ) ;
61661: LD_INT 101
61663: PPUSH
61664: CALL_OW 427
// end ;
61668: LD_VAR 0 1
61672: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
61673: LD_INT 0
61675: PPUSH
61676: PPUSH
61677: PPUSH
61678: PPUSH
61679: PPUSH
61680: PPUSH
61681: PPUSH
// if not mc_bases then
61682: LD_EXP 52
61686: NOT
61687: IFFALSE 61691
// exit ;
61689: GO 62264
// for i = 1 to mc_bases do
61691: LD_ADDR_VAR 0 2
61695: PUSH
61696: DOUBLE
61697: LD_INT 1
61699: DEC
61700: ST_TO_ADDR
61701: LD_EXP 52
61705: PUSH
61706: FOR_TO
61707: IFFALSE 62255
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
61709: LD_ADDR_VAR 0 5
61713: PUSH
61714: LD_EXP 52
61718: PUSH
61719: LD_VAR 0 2
61723: ARRAY
61724: PUSH
61725: LD_EXP 81
61729: PUSH
61730: LD_VAR 0 2
61734: ARRAY
61735: UNION
61736: PPUSH
61737: LD_INT 21
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: LD_INT 54
61755: PUSH
61756: EMPTY
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: LD_INT 24
61768: PUSH
61769: LD_INT 800
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PPUSH
61789: CALL_OW 72
61793: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61794: LD_ADDR_VAR 0 6
61798: PUSH
61799: LD_EXP 52
61803: PUSH
61804: LD_VAR 0 2
61808: ARRAY
61809: PPUSH
61810: LD_INT 21
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 54
61828: PUSH
61829: EMPTY
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 24
61841: PUSH
61842: LD_INT 250
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: LIST
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PPUSH
61862: CALL_OW 72
61866: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61867: LD_ADDR_VAR 0 7
61871: PUSH
61872: LD_VAR 0 5
61876: PUSH
61877: LD_VAR 0 6
61881: DIFF
61882: ST_TO_ADDR
// if not need_heal_1 then
61883: LD_VAR 0 6
61887: NOT
61888: IFFALSE 61921
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61890: LD_ADDR_EXP 55
61894: PUSH
61895: LD_EXP 55
61899: PPUSH
61900: LD_VAR 0 2
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PPUSH
61912: EMPTY
61913: PPUSH
61914: CALL 17428 0 3
61918: ST_TO_ADDR
61919: GO 61991
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61921: LD_ADDR_EXP 55
61925: PUSH
61926: LD_EXP 55
61930: PPUSH
61931: LD_VAR 0 2
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PPUSH
61943: LD_EXP 55
61947: PUSH
61948: LD_VAR 0 2
61952: ARRAY
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: PPUSH
61958: LD_INT 3
61960: PUSH
61961: LD_INT 24
61963: PUSH
61964: LD_INT 1000
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PPUSH
61975: CALL_OW 72
61979: PUSH
61980: LD_VAR 0 6
61984: UNION
61985: PPUSH
61986: CALL 17428 0 3
61990: ST_TO_ADDR
// if not need_heal_2 then
61991: LD_VAR 0 7
61995: NOT
61996: IFFALSE 62029
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
61998: LD_ADDR_EXP 55
62002: PUSH
62003: LD_EXP 55
62007: PPUSH
62008: LD_VAR 0 2
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PPUSH
62020: EMPTY
62021: PPUSH
62022: CALL 17428 0 3
62026: ST_TO_ADDR
62027: GO 62061
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62029: LD_ADDR_EXP 55
62033: PUSH
62034: LD_EXP 55
62038: PPUSH
62039: LD_VAR 0 2
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PPUSH
62051: LD_VAR 0 7
62055: PPUSH
62056: CALL 17428 0 3
62060: ST_TO_ADDR
// if need_heal_2 then
62061: LD_VAR 0 7
62065: IFFALSE 62237
// for j in need_heal_2 do
62067: LD_ADDR_VAR 0 3
62071: PUSH
62072: LD_VAR 0 7
62076: PUSH
62077: FOR_IN
62078: IFFALSE 62235
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62080: LD_ADDR_VAR 0 5
62084: PUSH
62085: LD_EXP 52
62089: PUSH
62090: LD_VAR 0 2
62094: ARRAY
62095: PPUSH
62096: LD_INT 2
62098: PUSH
62099: LD_INT 30
62101: PUSH
62102: LD_INT 6
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 30
62111: PUSH
62112: LD_INT 7
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 30
62121: PUSH
62122: LD_INT 8
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 30
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 30
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 25
62151: PUSH
62152: LD_INT 4
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: PPUSH
62168: CALL_OW 72
62172: ST_TO_ADDR
// if tmp then
62173: LD_VAR 0 5
62177: IFFALSE 62233
// begin k := NearestUnitToUnit ( tmp , j ) ;
62179: LD_ADDR_VAR 0 4
62183: PUSH
62184: LD_VAR 0 5
62188: PPUSH
62189: LD_VAR 0 3
62193: PPUSH
62194: CALL_OW 74
62198: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
62199: LD_VAR 0 3
62203: PPUSH
62204: LD_VAR 0 4
62208: PPUSH
62209: CALL_OW 296
62213: PUSH
62214: LD_INT 7
62216: GREATER
62217: IFFALSE 62233
// ComMoveUnit ( j , k ) ;
62219: LD_VAR 0 3
62223: PPUSH
62224: LD_VAR 0 4
62228: PPUSH
62229: CALL_OW 112
// end ; end ;
62233: GO 62077
62235: POP
62236: POP
// if not need_heal_1 and not need_heal_2 then
62237: LD_VAR 0 6
62241: NOT
62242: PUSH
62243: LD_VAR 0 7
62247: NOT
62248: AND
62249: IFFALSE 62253
// continue ;
62251: GO 61706
// end ;
62253: GO 61706
62255: POP
62256: POP
// RaiseSailEvent ( 102 ) ;
62257: LD_INT 102
62259: PPUSH
62260: CALL_OW 427
// end ;
62264: LD_VAR 0 1
62268: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
62269: LD_INT 0
62271: PPUSH
62272: PPUSH
62273: PPUSH
62274: PPUSH
62275: PPUSH
// if not mc_bases then
62276: LD_EXP 52
62280: NOT
62281: IFFALSE 62285
// exit ;
62283: GO 62670
// for i = 1 to mc_bases do
62285: LD_ADDR_VAR 0 2
62289: PUSH
62290: DOUBLE
62291: LD_INT 1
62293: DEC
62294: ST_TO_ADDR
62295: LD_EXP 52
62299: PUSH
62300: FOR_TO
62301: IFFALSE 62668
// begin if not mc_building_need_repair [ i ] then
62303: LD_EXP 53
62307: PUSH
62308: LD_VAR 0 2
62312: ARRAY
62313: NOT
62314: IFFALSE 62352
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62316: LD_ADDR_EXP 54
62320: PUSH
62321: LD_EXP 54
62325: PPUSH
62326: LD_VAR 0 2
62330: PPUSH
62331: EMPTY
62332: PPUSH
62333: CALL_OW 1
62337: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
62338: LD_VAR 0 2
62342: PPUSH
62343: LD_INT 101
62345: PPUSH
62346: CALL 57390 0 2
// continue ;
62350: GO 62300
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
62352: LD_ADDR_EXP 58
62356: PUSH
62357: LD_EXP 58
62361: PPUSH
62362: LD_VAR 0 2
62366: PPUSH
62367: EMPTY
62368: PPUSH
62369: CALL_OW 1
62373: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62374: LD_VAR 0 2
62378: PPUSH
62379: LD_INT 103
62381: PPUSH
62382: CALL 57390 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
62386: LD_ADDR_VAR 0 5
62390: PUSH
62391: LD_EXP 52
62395: PUSH
62396: LD_VAR 0 2
62400: ARRAY
62401: PUSH
62402: LD_EXP 81
62406: PUSH
62407: LD_VAR 0 2
62411: ARRAY
62412: UNION
62413: PPUSH
62414: LD_INT 2
62416: PUSH
62417: LD_INT 25
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 25
62429: PUSH
62430: LD_INT 16
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: PPUSH
62445: CALL_OW 72
62449: ST_TO_ADDR
// if not tmp then
62450: LD_VAR 0 5
62454: NOT
62455: IFFALSE 62459
// continue ;
62457: GO 62300
// for j in tmp do
62459: LD_ADDR_VAR 0 3
62463: PUSH
62464: LD_VAR 0 5
62468: PUSH
62469: FOR_IN
62470: IFFALSE 62664
// begin if mc_need_heal [ i ] then
62472: LD_EXP 55
62476: PUSH
62477: LD_VAR 0 2
62481: ARRAY
62482: IFFALSE 62530
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
62484: LD_VAR 0 3
62488: PUSH
62489: LD_EXP 55
62493: PUSH
62494: LD_VAR 0 2
62498: ARRAY
62499: PUSH
62500: LD_INT 1
62502: ARRAY
62503: IN
62504: PUSH
62505: LD_VAR 0 3
62509: PUSH
62510: LD_EXP 55
62514: PUSH
62515: LD_VAR 0 2
62519: ARRAY
62520: PUSH
62521: LD_INT 2
62523: ARRAY
62524: IN
62525: OR
62526: IFFALSE 62530
// continue ;
62528: GO 62469
// if IsInUnit ( j ) then
62530: LD_VAR 0 3
62534: PPUSH
62535: CALL_OW 310
62539: IFFALSE 62550
// ComExitBuilding ( j ) ;
62541: LD_VAR 0 3
62545: PPUSH
62546: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
62550: LD_VAR 0 3
62554: PUSH
62555: LD_EXP 54
62559: PUSH
62560: LD_VAR 0 2
62564: ARRAY
62565: IN
62566: NOT
62567: IFFALSE 62625
// begin SetTag ( j , 101 ) ;
62569: LD_VAR 0 3
62573: PPUSH
62574: LD_INT 101
62576: PPUSH
62577: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
62581: LD_ADDR_EXP 54
62585: PUSH
62586: LD_EXP 54
62590: PPUSH
62591: LD_VAR 0 2
62595: PUSH
62596: LD_EXP 54
62600: PUSH
62601: LD_VAR 0 2
62605: ARRAY
62606: PUSH
62607: LD_INT 1
62609: PLUS
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PPUSH
62615: LD_VAR 0 3
62619: PPUSH
62620: CALL 17428 0 3
62624: ST_TO_ADDR
// end ; wait ( 1 ) ;
62625: LD_INT 1
62627: PPUSH
62628: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
62632: LD_VAR 0 3
62636: PPUSH
62637: LD_EXP 53
62641: PUSH
62642: LD_VAR 0 2
62646: ARRAY
62647: PPUSH
62648: LD_VAR 0 3
62652: PPUSH
62653: CALL_OW 74
62657: PPUSH
62658: CALL_OW 130
// end ;
62662: GO 62469
62664: POP
62665: POP
// end ;
62666: GO 62300
62668: POP
62669: POP
// end ;
62670: LD_VAR 0 1
62674: RET
// export function MC_Heal ; var i , j , tmp ; begin
62675: LD_INT 0
62677: PPUSH
62678: PPUSH
62679: PPUSH
62680: PPUSH
// if not mc_bases then
62681: LD_EXP 52
62685: NOT
62686: IFFALSE 62690
// exit ;
62688: GO 63092
// for i = 1 to mc_bases do
62690: LD_ADDR_VAR 0 2
62694: PUSH
62695: DOUBLE
62696: LD_INT 1
62698: DEC
62699: ST_TO_ADDR
62700: LD_EXP 52
62704: PUSH
62705: FOR_TO
62706: IFFALSE 63090
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
62708: LD_EXP 55
62712: PUSH
62713: LD_VAR 0 2
62717: ARRAY
62718: PUSH
62719: LD_INT 1
62721: ARRAY
62722: NOT
62723: PUSH
62724: LD_EXP 55
62728: PUSH
62729: LD_VAR 0 2
62733: ARRAY
62734: PUSH
62735: LD_INT 2
62737: ARRAY
62738: NOT
62739: AND
62740: IFFALSE 62778
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62742: LD_ADDR_EXP 56
62746: PUSH
62747: LD_EXP 56
62751: PPUSH
62752: LD_VAR 0 2
62756: PPUSH
62757: EMPTY
62758: PPUSH
62759: CALL_OW 1
62763: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62764: LD_VAR 0 2
62768: PPUSH
62769: LD_INT 102
62771: PPUSH
62772: CALL 57390 0 2
// continue ;
62776: GO 62705
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62778: LD_ADDR_VAR 0 4
62782: PUSH
62783: LD_EXP 52
62787: PUSH
62788: LD_VAR 0 2
62792: ARRAY
62793: PPUSH
62794: LD_INT 25
62796: PUSH
62797: LD_INT 4
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PPUSH
62804: CALL_OW 72
62808: ST_TO_ADDR
// if not tmp then
62809: LD_VAR 0 4
62813: NOT
62814: IFFALSE 62818
// continue ;
62816: GO 62705
// if mc_taming [ i ] then
62818: LD_EXP 83
62822: PUSH
62823: LD_VAR 0 2
62827: ARRAY
62828: IFFALSE 62852
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62830: LD_ADDR_EXP 83
62834: PUSH
62835: LD_EXP 83
62839: PPUSH
62840: LD_VAR 0 2
62844: PPUSH
62845: EMPTY
62846: PPUSH
62847: CALL_OW 1
62851: ST_TO_ADDR
// for j in tmp do
62852: LD_ADDR_VAR 0 3
62856: PUSH
62857: LD_VAR 0 4
62861: PUSH
62862: FOR_IN
62863: IFFALSE 63086
// begin if IsInUnit ( j ) then
62865: LD_VAR 0 3
62869: PPUSH
62870: CALL_OW 310
62874: IFFALSE 62885
// ComExitBuilding ( j ) ;
62876: LD_VAR 0 3
62880: PPUSH
62881: CALL_OW 122
// if not j in mc_healers [ i ] then
62885: LD_VAR 0 3
62889: PUSH
62890: LD_EXP 56
62894: PUSH
62895: LD_VAR 0 2
62899: ARRAY
62900: IN
62901: NOT
62902: IFFALSE 62948
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62904: LD_ADDR_EXP 56
62908: PUSH
62909: LD_EXP 56
62913: PPUSH
62914: LD_VAR 0 2
62918: PUSH
62919: LD_EXP 56
62923: PUSH
62924: LD_VAR 0 2
62928: ARRAY
62929: PUSH
62930: LD_INT 1
62932: PLUS
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PPUSH
62938: LD_VAR 0 3
62942: PPUSH
62943: CALL 17428 0 3
62947: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62948: LD_VAR 0 3
62952: PPUSH
62953: CALL_OW 110
62957: PUSH
62958: LD_INT 102
62960: NONEQUAL
62961: IFFALSE 62975
// SetTag ( j , 102 ) ;
62963: LD_VAR 0 3
62967: PPUSH
62968: LD_INT 102
62970: PPUSH
62971: CALL_OW 109
// Wait ( 3 ) ;
62975: LD_INT 3
62977: PPUSH
62978: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62982: LD_EXP 55
62986: PUSH
62987: LD_VAR 0 2
62991: ARRAY
62992: PUSH
62993: LD_INT 1
62995: ARRAY
62996: IFFALSE 63028
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62998: LD_VAR 0 3
63002: PPUSH
63003: LD_EXP 55
63007: PUSH
63008: LD_VAR 0 2
63012: ARRAY
63013: PUSH
63014: LD_INT 1
63016: ARRAY
63017: PUSH
63018: LD_INT 1
63020: ARRAY
63021: PPUSH
63022: CALL_OW 128
63026: GO 63084
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
63028: LD_VAR 0 3
63032: PPUSH
63033: CALL_OW 314
63037: NOT
63038: PUSH
63039: LD_EXP 55
63043: PUSH
63044: LD_VAR 0 2
63048: ARRAY
63049: PUSH
63050: LD_INT 2
63052: ARRAY
63053: AND
63054: IFFALSE 63084
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
63056: LD_VAR 0 3
63060: PPUSH
63061: LD_EXP 55
63065: PUSH
63066: LD_VAR 0 2
63070: ARRAY
63071: PUSH
63072: LD_INT 2
63074: ARRAY
63075: PUSH
63076: LD_INT 1
63078: ARRAY
63079: PPUSH
63080: CALL_OW 128
// end ;
63084: GO 62862
63086: POP
63087: POP
// end ;
63088: GO 62705
63090: POP
63091: POP
// end ;
63092: LD_VAR 0 1
63096: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
63097: LD_INT 0
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
63103: PPUSH
// if not mc_bases then
63104: LD_EXP 52
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 64256
// for i = 1 to mc_bases do
63113: LD_ADDR_VAR 0 2
63117: PUSH
63118: DOUBLE
63119: LD_INT 1
63121: DEC
63122: ST_TO_ADDR
63123: LD_EXP 52
63127: PUSH
63128: FOR_TO
63129: IFFALSE 64254
// begin if mc_scan [ i ] then
63131: LD_EXP 75
63135: PUSH
63136: LD_VAR 0 2
63140: ARRAY
63141: IFFALSE 63145
// continue ;
63143: GO 63128
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
63145: LD_EXP 57
63149: PUSH
63150: LD_VAR 0 2
63154: ARRAY
63155: NOT
63156: PUSH
63157: LD_EXP 59
63161: PUSH
63162: LD_VAR 0 2
63166: ARRAY
63167: NOT
63168: AND
63169: PUSH
63170: LD_EXP 58
63174: PUSH
63175: LD_VAR 0 2
63179: ARRAY
63180: AND
63181: IFFALSE 63219
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
63183: LD_ADDR_EXP 58
63187: PUSH
63188: LD_EXP 58
63192: PPUSH
63193: LD_VAR 0 2
63197: PPUSH
63198: EMPTY
63199: PPUSH
63200: CALL_OW 1
63204: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63205: LD_VAR 0 2
63209: PPUSH
63210: LD_INT 103
63212: PPUSH
63213: CALL 57390 0 2
// continue ;
63217: GO 63128
// end ; if mc_construct_list [ i ] then
63219: LD_EXP 59
63223: PUSH
63224: LD_VAR 0 2
63228: ARRAY
63229: IFFALSE 63449
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63231: LD_ADDR_VAR 0 4
63235: PUSH
63236: LD_EXP 52
63240: PUSH
63241: LD_VAR 0 2
63245: ARRAY
63246: PPUSH
63247: LD_INT 25
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PPUSH
63257: CALL_OW 72
63261: PUSH
63262: LD_EXP 54
63266: PUSH
63267: LD_VAR 0 2
63271: ARRAY
63272: DIFF
63273: ST_TO_ADDR
// if not tmp then
63274: LD_VAR 0 4
63278: NOT
63279: IFFALSE 63283
// continue ;
63281: GO 63128
// for j in tmp do
63283: LD_ADDR_VAR 0 3
63287: PUSH
63288: LD_VAR 0 4
63292: PUSH
63293: FOR_IN
63294: IFFALSE 63445
// begin if not mc_builders [ i ] then
63296: LD_EXP 58
63300: PUSH
63301: LD_VAR 0 2
63305: ARRAY
63306: NOT
63307: IFFALSE 63365
// begin SetTag ( j , 103 ) ;
63309: LD_VAR 0 3
63313: PPUSH
63314: LD_INT 103
63316: PPUSH
63317: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63321: LD_ADDR_EXP 58
63325: PUSH
63326: LD_EXP 58
63330: PPUSH
63331: LD_VAR 0 2
63335: PUSH
63336: LD_EXP 58
63340: PUSH
63341: LD_VAR 0 2
63345: ARRAY
63346: PUSH
63347: LD_INT 1
63349: PLUS
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PPUSH
63355: LD_VAR 0 3
63359: PPUSH
63360: CALL 17428 0 3
63364: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63365: LD_VAR 0 3
63369: PPUSH
63370: CALL_OW 310
63374: IFFALSE 63385
// ComExitBuilding ( j ) ;
63376: LD_VAR 0 3
63380: PPUSH
63381: CALL_OW 122
// wait ( 3 ) ;
63385: LD_INT 3
63387: PPUSH
63388: CALL_OW 67
// if not mc_construct_list [ i ] then
63392: LD_EXP 59
63396: PUSH
63397: LD_VAR 0 2
63401: ARRAY
63402: NOT
63403: IFFALSE 63407
// break ;
63405: GO 63445
// if not HasTask ( j ) then
63407: LD_VAR 0 3
63411: PPUSH
63412: CALL_OW 314
63416: NOT
63417: IFFALSE 63443
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
63419: LD_VAR 0 3
63423: PPUSH
63424: LD_EXP 59
63428: PUSH
63429: LD_VAR 0 2
63433: ARRAY
63434: PUSH
63435: LD_INT 1
63437: ARRAY
63438: PPUSH
63439: CALL 20279 0 2
// end ;
63443: GO 63293
63445: POP
63446: POP
// end else
63447: GO 64252
// if mc_build_list [ i ] then
63449: LD_EXP 57
63453: PUSH
63454: LD_VAR 0 2
63458: ARRAY
63459: IFFALSE 64252
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63461: LD_ADDR_VAR 0 5
63465: PUSH
63466: LD_EXP 52
63470: PUSH
63471: LD_VAR 0 2
63475: ARRAY
63476: PPUSH
63477: LD_INT 2
63479: PUSH
63480: LD_INT 30
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 30
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: LIST
63504: PPUSH
63505: CALL_OW 72
63509: ST_TO_ADDR
// if depot then
63510: LD_VAR 0 5
63514: IFFALSE 63532
// depot := depot [ 1 ] else
63516: LD_ADDR_VAR 0 5
63520: PUSH
63521: LD_VAR 0 5
63525: PUSH
63526: LD_INT 1
63528: ARRAY
63529: ST_TO_ADDR
63530: GO 63540
// depot := 0 ;
63532: LD_ADDR_VAR 0 5
63536: PUSH
63537: LD_INT 0
63539: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
63540: LD_EXP 57
63544: PUSH
63545: LD_VAR 0 2
63549: ARRAY
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: PUSH
63555: LD_INT 1
63557: ARRAY
63558: PPUSH
63559: CALL 20109 0 1
63563: PUSH
63564: LD_EXP 52
63568: PUSH
63569: LD_VAR 0 2
63573: ARRAY
63574: PPUSH
63575: LD_INT 2
63577: PUSH
63578: LD_INT 30
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 30
63590: PUSH
63591: LD_INT 3
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: PPUSH
63603: CALL_OW 72
63607: NOT
63608: AND
63609: IFFALSE 63714
// begin for j = 1 to mc_build_list [ i ] do
63611: LD_ADDR_VAR 0 3
63615: PUSH
63616: DOUBLE
63617: LD_INT 1
63619: DEC
63620: ST_TO_ADDR
63621: LD_EXP 57
63625: PUSH
63626: LD_VAR 0 2
63630: ARRAY
63631: PUSH
63632: FOR_TO
63633: IFFALSE 63712
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
63635: LD_EXP 57
63639: PUSH
63640: LD_VAR 0 2
63644: ARRAY
63645: PUSH
63646: LD_VAR 0 3
63650: ARRAY
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PUSH
63656: LD_INT 2
63658: EQUAL
63659: IFFALSE 63710
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
63661: LD_ADDR_EXP 57
63665: PUSH
63666: LD_EXP 57
63670: PPUSH
63671: LD_VAR 0 2
63675: PPUSH
63676: LD_EXP 57
63680: PUSH
63681: LD_VAR 0 2
63685: ARRAY
63686: PPUSH
63687: LD_VAR 0 3
63691: PPUSH
63692: LD_INT 1
63694: PPUSH
63695: LD_INT 0
63697: PPUSH
63698: CALL 16846 0 4
63702: PPUSH
63703: CALL_OW 1
63707: ST_TO_ADDR
// break ;
63708: GO 63712
// end ;
63710: GO 63632
63712: POP
63713: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
63714: LD_EXP 57
63718: PUSH
63719: LD_VAR 0 2
63723: ARRAY
63724: PUSH
63725: LD_INT 1
63727: ARRAY
63728: PUSH
63729: LD_INT 1
63731: ARRAY
63732: PUSH
63733: LD_INT 0
63735: EQUAL
63736: PUSH
63737: LD_VAR 0 5
63741: PUSH
63742: LD_VAR 0 5
63746: PPUSH
63747: LD_EXP 57
63751: PUSH
63752: LD_VAR 0 2
63756: ARRAY
63757: PUSH
63758: LD_INT 1
63760: ARRAY
63761: PUSH
63762: LD_INT 1
63764: ARRAY
63765: PPUSH
63766: LD_EXP 57
63770: PUSH
63771: LD_VAR 0 2
63775: ARRAY
63776: PUSH
63777: LD_INT 1
63779: ARRAY
63780: PUSH
63781: LD_INT 2
63783: ARRAY
63784: PPUSH
63785: LD_EXP 57
63789: PUSH
63790: LD_VAR 0 2
63794: ARRAY
63795: PUSH
63796: LD_INT 1
63798: ARRAY
63799: PUSH
63800: LD_INT 3
63802: ARRAY
63803: PPUSH
63804: LD_EXP 57
63808: PUSH
63809: LD_VAR 0 2
63813: ARRAY
63814: PUSH
63815: LD_INT 1
63817: ARRAY
63818: PUSH
63819: LD_INT 4
63821: ARRAY
63822: PPUSH
63823: CALL 24843 0 5
63827: AND
63828: OR
63829: IFFALSE 64110
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63831: LD_ADDR_VAR 0 4
63835: PUSH
63836: LD_EXP 52
63840: PUSH
63841: LD_VAR 0 2
63845: ARRAY
63846: PPUSH
63847: LD_INT 25
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PPUSH
63857: CALL_OW 72
63861: PUSH
63862: LD_EXP 54
63866: PUSH
63867: LD_VAR 0 2
63871: ARRAY
63872: DIFF
63873: ST_TO_ADDR
// if not tmp then
63874: LD_VAR 0 4
63878: NOT
63879: IFFALSE 63883
// continue ;
63881: GO 63128
// for j in tmp do
63883: LD_ADDR_VAR 0 3
63887: PUSH
63888: LD_VAR 0 4
63892: PUSH
63893: FOR_IN
63894: IFFALSE 64106
// begin if not mc_builders [ i ] then
63896: LD_EXP 58
63900: PUSH
63901: LD_VAR 0 2
63905: ARRAY
63906: NOT
63907: IFFALSE 63965
// begin SetTag ( j , 103 ) ;
63909: LD_VAR 0 3
63913: PPUSH
63914: LD_INT 103
63916: PPUSH
63917: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63921: LD_ADDR_EXP 58
63925: PUSH
63926: LD_EXP 58
63930: PPUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_EXP 58
63940: PUSH
63941: LD_VAR 0 2
63945: ARRAY
63946: PUSH
63947: LD_INT 1
63949: PLUS
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PPUSH
63955: LD_VAR 0 3
63959: PPUSH
63960: CALL 17428 0 3
63964: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63965: LD_VAR 0 3
63969: PPUSH
63970: CALL_OW 310
63974: IFFALSE 63985
// ComExitBuilding ( j ) ;
63976: LD_VAR 0 3
63980: PPUSH
63981: CALL_OW 122
// wait ( 3 ) ;
63985: LD_INT 3
63987: PPUSH
63988: CALL_OW 67
// if not mc_build_list [ i ] then
63992: LD_EXP 57
63996: PUSH
63997: LD_VAR 0 2
64001: ARRAY
64002: NOT
64003: IFFALSE 64007
// break ;
64005: GO 64106
// if not HasTask ( j ) then
64007: LD_VAR 0 3
64011: PPUSH
64012: CALL_OW 314
64016: NOT
64017: IFFALSE 64104
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
64019: LD_VAR 0 3
64023: PPUSH
64024: LD_EXP 57
64028: PUSH
64029: LD_VAR 0 2
64033: ARRAY
64034: PUSH
64035: LD_INT 1
64037: ARRAY
64038: PUSH
64039: LD_INT 1
64041: ARRAY
64042: PPUSH
64043: LD_EXP 57
64047: PUSH
64048: LD_VAR 0 2
64052: ARRAY
64053: PUSH
64054: LD_INT 1
64056: ARRAY
64057: PUSH
64058: LD_INT 2
64060: ARRAY
64061: PPUSH
64062: LD_EXP 57
64066: PUSH
64067: LD_VAR 0 2
64071: ARRAY
64072: PUSH
64073: LD_INT 1
64075: ARRAY
64076: PUSH
64077: LD_INT 3
64079: ARRAY
64080: PPUSH
64081: LD_EXP 57
64085: PUSH
64086: LD_VAR 0 2
64090: ARRAY
64091: PUSH
64092: LD_INT 1
64094: ARRAY
64095: PUSH
64096: LD_INT 4
64098: ARRAY
64099: PPUSH
64100: CALL_OW 145
// end ;
64104: GO 63893
64106: POP
64107: POP
// end else
64108: GO 64252
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
64110: LD_EXP 52
64114: PUSH
64115: LD_VAR 0 2
64119: ARRAY
64120: PPUSH
64121: LD_EXP 57
64125: PUSH
64126: LD_VAR 0 2
64130: ARRAY
64131: PUSH
64132: LD_INT 1
64134: ARRAY
64135: PUSH
64136: LD_INT 1
64138: ARRAY
64139: PPUSH
64140: LD_EXP 57
64144: PUSH
64145: LD_VAR 0 2
64149: ARRAY
64150: PUSH
64151: LD_INT 1
64153: ARRAY
64154: PUSH
64155: LD_INT 2
64157: ARRAY
64158: PPUSH
64159: LD_EXP 57
64163: PUSH
64164: LD_VAR 0 2
64168: ARRAY
64169: PUSH
64170: LD_INT 1
64172: ARRAY
64173: PUSH
64174: LD_INT 3
64176: ARRAY
64177: PPUSH
64178: LD_EXP 57
64182: PUSH
64183: LD_VAR 0 2
64187: ARRAY
64188: PUSH
64189: LD_INT 1
64191: ARRAY
64192: PUSH
64193: LD_INT 4
64195: ARRAY
64196: PPUSH
64197: CALL 24179 0 5
64201: NOT
64202: IFFALSE 64252
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
64204: LD_ADDR_EXP 57
64208: PUSH
64209: LD_EXP 57
64213: PPUSH
64214: LD_VAR 0 2
64218: PPUSH
64219: LD_EXP 57
64223: PUSH
64224: LD_VAR 0 2
64228: ARRAY
64229: PPUSH
64230: LD_INT 1
64232: PPUSH
64233: LD_INT 1
64235: NEG
64236: PPUSH
64237: LD_INT 0
64239: PPUSH
64240: CALL 16846 0 4
64244: PPUSH
64245: CALL_OW 1
64249: ST_TO_ADDR
// continue ;
64250: GO 63128
// end ; end ; end ;
64252: GO 63128
64254: POP
64255: POP
// end ;
64256: LD_VAR 0 1
64260: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
64261: LD_INT 0
64263: PPUSH
64264: PPUSH
64265: PPUSH
64266: PPUSH
64267: PPUSH
64268: PPUSH
// if not mc_bases then
64269: LD_EXP 52
64273: NOT
64274: IFFALSE 64278
// exit ;
64276: GO 64705
// for i = 1 to mc_bases do
64278: LD_ADDR_VAR 0 2
64282: PUSH
64283: DOUBLE
64284: LD_INT 1
64286: DEC
64287: ST_TO_ADDR
64288: LD_EXP 52
64292: PUSH
64293: FOR_TO
64294: IFFALSE 64703
// begin tmp := mc_build_upgrade [ i ] ;
64296: LD_ADDR_VAR 0 4
64300: PUSH
64301: LD_EXP 84
64305: PUSH
64306: LD_VAR 0 2
64310: ARRAY
64311: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
64312: LD_ADDR_VAR 0 6
64316: PUSH
64317: LD_EXP 85
64321: PUSH
64322: LD_VAR 0 2
64326: ARRAY
64327: PPUSH
64328: LD_INT 2
64330: PUSH
64331: LD_INT 30
64333: PUSH
64334: LD_INT 6
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 30
64343: PUSH
64344: LD_INT 7
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: LIST
64355: PPUSH
64356: CALL_OW 72
64360: ST_TO_ADDR
// if not tmp and not lab then
64361: LD_VAR 0 4
64365: NOT
64366: PUSH
64367: LD_VAR 0 6
64371: NOT
64372: AND
64373: IFFALSE 64377
// continue ;
64375: GO 64293
// if tmp then
64377: LD_VAR 0 4
64381: IFFALSE 64501
// for j in tmp do
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: LD_VAR 0 4
64392: PUSH
64393: FOR_IN
64394: IFFALSE 64499
// begin if UpgradeCost ( j ) then
64396: LD_VAR 0 3
64400: PPUSH
64401: CALL 23839 0 1
64405: IFFALSE 64497
// begin ComUpgrade ( j ) ;
64407: LD_VAR 0 3
64411: PPUSH
64412: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
64416: LD_ADDR_EXP 84
64420: PUSH
64421: LD_EXP 84
64425: PPUSH
64426: LD_VAR 0 2
64430: PPUSH
64431: LD_EXP 84
64435: PUSH
64436: LD_VAR 0 2
64440: ARRAY
64441: PUSH
64442: LD_VAR 0 3
64446: DIFF
64447: PPUSH
64448: CALL_OW 1
64452: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64453: LD_ADDR_EXP 59
64457: PUSH
64458: LD_EXP 59
64462: PPUSH
64463: LD_VAR 0 2
64467: PUSH
64468: LD_EXP 59
64472: PUSH
64473: LD_VAR 0 2
64477: ARRAY
64478: PUSH
64479: LD_INT 1
64481: PLUS
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PPUSH
64487: LD_VAR 0 3
64491: PPUSH
64492: CALL 17428 0 3
64496: ST_TO_ADDR
// end ; end ;
64497: GO 64393
64499: POP
64500: POP
// if not lab or not mc_lab_upgrade [ i ] then
64501: LD_VAR 0 6
64505: NOT
64506: PUSH
64507: LD_EXP 86
64511: PUSH
64512: LD_VAR 0 2
64516: ARRAY
64517: NOT
64518: OR
64519: IFFALSE 64523
// continue ;
64521: GO 64293
// for j in lab do
64523: LD_ADDR_VAR 0 3
64527: PUSH
64528: LD_VAR 0 6
64532: PUSH
64533: FOR_IN
64534: IFFALSE 64699
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
64536: LD_VAR 0 3
64540: PPUSH
64541: CALL_OW 266
64545: PUSH
64546: LD_INT 6
64548: PUSH
64549: LD_INT 7
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: IN
64556: PUSH
64557: LD_VAR 0 3
64561: PPUSH
64562: CALL_OW 461
64566: PUSH
64567: LD_INT 1
64569: NONEQUAL
64570: AND
64571: IFFALSE 64697
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
64573: LD_VAR 0 3
64577: PPUSH
64578: LD_EXP 86
64582: PUSH
64583: LD_VAR 0 2
64587: ARRAY
64588: PUSH
64589: LD_INT 1
64591: ARRAY
64592: PPUSH
64593: CALL 24044 0 2
64597: IFFALSE 64697
// begin ComCancel ( j ) ;
64599: LD_VAR 0 3
64603: PPUSH
64604: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
64608: LD_VAR 0 3
64612: PPUSH
64613: LD_EXP 86
64617: PUSH
64618: LD_VAR 0 2
64622: ARRAY
64623: PUSH
64624: LD_INT 1
64626: ARRAY
64627: PPUSH
64628: CALL_OW 207
// if not j in mc_construct_list [ i ] then
64632: LD_VAR 0 3
64636: PUSH
64637: LD_EXP 59
64641: PUSH
64642: LD_VAR 0 2
64646: ARRAY
64647: IN
64648: NOT
64649: IFFALSE 64695
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64651: LD_ADDR_EXP 59
64655: PUSH
64656: LD_EXP 59
64660: PPUSH
64661: LD_VAR 0 2
64665: PUSH
64666: LD_EXP 59
64670: PUSH
64671: LD_VAR 0 2
64675: ARRAY
64676: PUSH
64677: LD_INT 1
64679: PLUS
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PPUSH
64685: LD_VAR 0 3
64689: PPUSH
64690: CALL 17428 0 3
64694: ST_TO_ADDR
// break ;
64695: GO 64699
// end ; end ; end ;
64697: GO 64533
64699: POP
64700: POP
// end ;
64701: GO 64293
64703: POP
64704: POP
// end ;
64705: LD_VAR 0 1
64709: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
64710: LD_INT 0
64712: PPUSH
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
64717: PPUSH
64718: PPUSH
64719: PPUSH
64720: PPUSH
// if not mc_bases then
64721: LD_EXP 52
64725: NOT
64726: IFFALSE 64730
// exit ;
64728: GO 65135
// for i = 1 to mc_bases do
64730: LD_ADDR_VAR 0 2
64734: PUSH
64735: DOUBLE
64736: LD_INT 1
64738: DEC
64739: ST_TO_ADDR
64740: LD_EXP 52
64744: PUSH
64745: FOR_TO
64746: IFFALSE 65133
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64748: LD_EXP 60
64752: PUSH
64753: LD_VAR 0 2
64757: ARRAY
64758: NOT
64759: PUSH
64760: LD_EXP 52
64764: PUSH
64765: LD_VAR 0 2
64769: ARRAY
64770: PPUSH
64771: LD_INT 30
64773: PUSH
64774: LD_INT 3
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PPUSH
64781: CALL_OW 72
64785: NOT
64786: OR
64787: IFFALSE 64791
// continue ;
64789: GO 64745
// busy := false ;
64791: LD_ADDR_VAR 0 8
64795: PUSH
64796: LD_INT 0
64798: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64799: LD_ADDR_VAR 0 4
64803: PUSH
64804: LD_EXP 52
64808: PUSH
64809: LD_VAR 0 2
64813: ARRAY
64814: PPUSH
64815: LD_INT 30
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PPUSH
64825: CALL_OW 72
64829: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64830: LD_ADDR_VAR 0 6
64834: PUSH
64835: LD_EXP 60
64839: PUSH
64840: LD_VAR 0 2
64844: ARRAY
64845: PPUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 30
64851: PUSH
64852: LD_INT 32
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 30
64861: PUSH
64862: LD_INT 33
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: PPUSH
64874: CALL_OW 72
64878: ST_TO_ADDR
// if not t then
64879: LD_VAR 0 6
64883: NOT
64884: IFFALSE 64888
// continue ;
64886: GO 64745
// for j in tmp do
64888: LD_ADDR_VAR 0 3
64892: PUSH
64893: LD_VAR 0 4
64897: PUSH
64898: FOR_IN
64899: IFFALSE 64929
// if not BuildingStatus ( j ) = bs_idle then
64901: LD_VAR 0 3
64905: PPUSH
64906: CALL_OW 461
64910: PUSH
64911: LD_INT 2
64913: EQUAL
64914: NOT
64915: IFFALSE 64927
// begin busy := true ;
64917: LD_ADDR_VAR 0 8
64921: PUSH
64922: LD_INT 1
64924: ST_TO_ADDR
// break ;
64925: GO 64929
// end ;
64927: GO 64898
64929: POP
64930: POP
// if busy then
64931: LD_VAR 0 8
64935: IFFALSE 64939
// continue ;
64937: GO 64745
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64939: LD_ADDR_VAR 0 7
64943: PUSH
64944: LD_VAR 0 6
64948: PPUSH
64949: LD_INT 35
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PPUSH
64959: CALL_OW 72
64963: ST_TO_ADDR
// if tw then
64964: LD_VAR 0 7
64968: IFFALSE 65045
// begin tw := tw [ 1 ] ;
64970: LD_ADDR_VAR 0 7
64974: PUSH
64975: LD_VAR 0 7
64979: PUSH
64980: LD_INT 1
64982: ARRAY
64983: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64984: LD_ADDR_VAR 0 9
64988: PUSH
64989: LD_VAR 0 7
64993: PPUSH
64994: LD_EXP 77
64998: PUSH
64999: LD_VAR 0 2
65003: ARRAY
65004: PPUSH
65005: CALL 22398 0 2
65009: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
65010: LD_EXP 91
65014: PUSH
65015: LD_VAR 0 2
65019: ARRAY
65020: IFFALSE 65043
// if not weapon in mc_allowed_tower_weapons [ i ] then
65022: LD_VAR 0 9
65026: PUSH
65027: LD_EXP 91
65031: PUSH
65032: LD_VAR 0 2
65036: ARRAY
65037: IN
65038: NOT
65039: IFFALSE 65043
// continue ;
65041: GO 64745
// end else
65043: GO 65108
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
65045: LD_ADDR_VAR 0 5
65049: PUSH
65050: LD_EXP 60
65054: PUSH
65055: LD_VAR 0 2
65059: ARRAY
65060: PPUSH
65061: LD_VAR 0 4
65065: PPUSH
65066: CALL 52599 0 2
65070: ST_TO_ADDR
// if not tmp2 then
65071: LD_VAR 0 5
65075: NOT
65076: IFFALSE 65080
// continue ;
65078: GO 64745
// tw := tmp2 [ 1 ] ;
65080: LD_ADDR_VAR 0 7
65084: PUSH
65085: LD_VAR 0 5
65089: PUSH
65090: LD_INT 1
65092: ARRAY
65093: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
65094: LD_ADDR_VAR 0 9
65098: PUSH
65099: LD_VAR 0 5
65103: PUSH
65104: LD_INT 2
65106: ARRAY
65107: ST_TO_ADDR
// end ; if not weapon then
65108: LD_VAR 0 9
65112: NOT
65113: IFFALSE 65117
// continue ;
65115: GO 64745
// ComPlaceWeapon ( tw , weapon ) ;
65117: LD_VAR 0 7
65121: PPUSH
65122: LD_VAR 0 9
65126: PPUSH
65127: CALL_OW 148
// end ;
65131: GO 64745
65133: POP
65134: POP
// end ;
65135: LD_VAR 0 1
65139: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
65140: LD_INT 0
65142: PPUSH
65143: PPUSH
65144: PPUSH
65145: PPUSH
65146: PPUSH
65147: PPUSH
// if not mc_bases then
65148: LD_EXP 52
65152: NOT
65153: IFFALSE 65157
// exit ;
65155: GO 66169
// for i = 1 to mc_bases do
65157: LD_ADDR_VAR 0 2
65161: PUSH
65162: DOUBLE
65163: LD_INT 1
65165: DEC
65166: ST_TO_ADDR
65167: LD_EXP 52
65171: PUSH
65172: FOR_TO
65173: IFFALSE 66167
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
65175: LD_EXP 65
65179: PUSH
65180: LD_VAR 0 2
65184: ARRAY
65185: NOT
65186: PUSH
65187: LD_EXP 65
65191: PUSH
65192: LD_VAR 0 2
65196: ARRAY
65197: PUSH
65198: LD_EXP 66
65202: PUSH
65203: LD_VAR 0 2
65207: ARRAY
65208: EQUAL
65209: OR
65210: IFFALSE 65214
// continue ;
65212: GO 65172
// if mc_miners [ i ] then
65214: LD_EXP 66
65218: PUSH
65219: LD_VAR 0 2
65223: ARRAY
65224: IFFALSE 65854
// begin k := 1 ;
65226: LD_ADDR_VAR 0 4
65230: PUSH
65231: LD_INT 1
65233: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
65234: LD_ADDR_VAR 0 3
65238: PUSH
65239: DOUBLE
65240: LD_EXP 66
65244: PUSH
65245: LD_VAR 0 2
65249: ARRAY
65250: INC
65251: ST_TO_ADDR
65252: LD_INT 1
65254: PUSH
65255: FOR_DOWNTO
65256: IFFALSE 65852
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
65258: LD_EXP 66
65262: PUSH
65263: LD_VAR 0 2
65267: ARRAY
65268: PUSH
65269: LD_VAR 0 3
65273: ARRAY
65274: PPUSH
65275: CALL_OW 301
65279: PUSH
65280: LD_EXP 66
65284: PUSH
65285: LD_VAR 0 2
65289: ARRAY
65290: PUSH
65291: LD_VAR 0 3
65295: ARRAY
65296: PPUSH
65297: CALL_OW 257
65301: PUSH
65302: LD_INT 1
65304: NONEQUAL
65305: OR
65306: IFFALSE 65369
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
65308: LD_ADDR_VAR 0 5
65312: PUSH
65313: LD_EXP 66
65317: PUSH
65318: LD_VAR 0 2
65322: ARRAY
65323: PUSH
65324: LD_EXP 66
65328: PUSH
65329: LD_VAR 0 2
65333: ARRAY
65334: PUSH
65335: LD_VAR 0 3
65339: ARRAY
65340: DIFF
65341: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
65342: LD_ADDR_EXP 66
65346: PUSH
65347: LD_EXP 66
65351: PPUSH
65352: LD_VAR 0 2
65356: PPUSH
65357: LD_VAR 0 5
65361: PPUSH
65362: CALL_OW 1
65366: ST_TO_ADDR
// continue ;
65367: GO 65255
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
65369: LD_EXP 66
65373: PUSH
65374: LD_VAR 0 2
65378: ARRAY
65379: PUSH
65380: LD_VAR 0 3
65384: ARRAY
65385: PPUSH
65386: CALL 17364 0 1
65390: PUSH
65391: LD_EXP 66
65395: PUSH
65396: LD_VAR 0 2
65400: ARRAY
65401: PUSH
65402: LD_VAR 0 3
65406: ARRAY
65407: PPUSH
65408: CALL_OW 255
65412: PPUSH
65413: LD_EXP 65
65417: PUSH
65418: LD_VAR 0 2
65422: ARRAY
65423: PUSH
65424: LD_VAR 0 4
65428: ARRAY
65429: PUSH
65430: LD_INT 1
65432: ARRAY
65433: PPUSH
65434: LD_EXP 65
65438: PUSH
65439: LD_VAR 0 2
65443: ARRAY
65444: PUSH
65445: LD_VAR 0 4
65449: ARRAY
65450: PUSH
65451: LD_INT 2
65453: ARRAY
65454: PPUSH
65455: LD_INT 15
65457: PPUSH
65458: CALL 18324 0 4
65462: PUSH
65463: LD_INT 4
65465: ARRAY
65466: PUSH
65467: LD_EXP 66
65471: PUSH
65472: LD_VAR 0 2
65476: ARRAY
65477: PUSH
65478: LD_VAR 0 3
65482: ARRAY
65483: PPUSH
65484: LD_INT 10
65486: PPUSH
65487: CALL 20021 0 2
65491: PUSH
65492: LD_INT 4
65494: ARRAY
65495: OR
65496: AND
65497: IFFALSE 65520
// ComStop ( mc_miners [ i ] [ j ] ) ;
65499: LD_EXP 66
65503: PUSH
65504: LD_VAR 0 2
65508: ARRAY
65509: PUSH
65510: LD_VAR 0 3
65514: ARRAY
65515: PPUSH
65516: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
65520: LD_EXP 66
65524: PUSH
65525: LD_VAR 0 2
65529: ARRAY
65530: PUSH
65531: LD_VAR 0 3
65535: ARRAY
65536: PPUSH
65537: CALL_OW 257
65541: PUSH
65542: LD_INT 1
65544: EQUAL
65545: PUSH
65546: LD_EXP 66
65550: PUSH
65551: LD_VAR 0 2
65555: ARRAY
65556: PUSH
65557: LD_VAR 0 3
65561: ARRAY
65562: PPUSH
65563: CALL_OW 459
65567: NOT
65568: AND
65569: PUSH
65570: LD_EXP 66
65574: PUSH
65575: LD_VAR 0 2
65579: ARRAY
65580: PUSH
65581: LD_VAR 0 3
65585: ARRAY
65586: PPUSH
65587: CALL_OW 255
65591: PPUSH
65592: LD_EXP 65
65596: PUSH
65597: LD_VAR 0 2
65601: ARRAY
65602: PUSH
65603: LD_VAR 0 4
65607: ARRAY
65608: PUSH
65609: LD_INT 1
65611: ARRAY
65612: PPUSH
65613: LD_EXP 65
65617: PUSH
65618: LD_VAR 0 2
65622: ARRAY
65623: PUSH
65624: LD_VAR 0 4
65628: ARRAY
65629: PUSH
65630: LD_INT 2
65632: ARRAY
65633: PPUSH
65634: LD_INT 15
65636: PPUSH
65637: CALL 18324 0 4
65641: PUSH
65642: LD_INT 4
65644: ARRAY
65645: PUSH
65646: LD_INT 0
65648: EQUAL
65649: AND
65650: PUSH
65651: LD_EXP 66
65655: PUSH
65656: LD_VAR 0 2
65660: ARRAY
65661: PUSH
65662: LD_VAR 0 3
65666: ARRAY
65667: PPUSH
65668: CALL_OW 314
65672: NOT
65673: AND
65674: IFFALSE 65850
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
65676: LD_EXP 66
65680: PUSH
65681: LD_VAR 0 2
65685: ARRAY
65686: PUSH
65687: LD_VAR 0 3
65691: ARRAY
65692: PPUSH
65693: CALL_OW 310
65697: IFFALSE 65720
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
65699: LD_EXP 66
65703: PUSH
65704: LD_VAR 0 2
65708: ARRAY
65709: PUSH
65710: LD_VAR 0 3
65714: ARRAY
65715: PPUSH
65716: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
65720: LD_EXP 66
65724: PUSH
65725: LD_VAR 0 2
65729: ARRAY
65730: PUSH
65731: LD_VAR 0 3
65735: ARRAY
65736: PPUSH
65737: CALL_OW 314
65741: NOT
65742: IFFALSE 65810
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65744: LD_EXP 66
65748: PUSH
65749: LD_VAR 0 2
65753: ARRAY
65754: PUSH
65755: LD_VAR 0 3
65759: ARRAY
65760: PPUSH
65761: LD_EXP 65
65765: PUSH
65766: LD_VAR 0 2
65770: ARRAY
65771: PUSH
65772: LD_VAR 0 4
65776: ARRAY
65777: PUSH
65778: LD_INT 1
65780: ARRAY
65781: PPUSH
65782: LD_EXP 65
65786: PUSH
65787: LD_VAR 0 2
65791: ARRAY
65792: PUSH
65793: LD_VAR 0 4
65797: ARRAY
65798: PUSH
65799: LD_INT 2
65801: ARRAY
65802: PPUSH
65803: LD_INT 0
65805: PPUSH
65806: CALL_OW 193
// k := k + 1 ;
65810: LD_ADDR_VAR 0 4
65814: PUSH
65815: LD_VAR 0 4
65819: PUSH
65820: LD_INT 1
65822: PLUS
65823: ST_TO_ADDR
// if k > mc_mines [ i ] then
65824: LD_VAR 0 4
65828: PUSH
65829: LD_EXP 65
65833: PUSH
65834: LD_VAR 0 2
65838: ARRAY
65839: GREATER
65840: IFFALSE 65850
// k := 1 ;
65842: LD_ADDR_VAR 0 4
65846: PUSH
65847: LD_INT 1
65849: ST_TO_ADDR
// end ; end ;
65850: GO 65255
65852: POP
65853: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65854: LD_ADDR_VAR 0 5
65858: PUSH
65859: LD_EXP 52
65863: PUSH
65864: LD_VAR 0 2
65868: ARRAY
65869: PPUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 30
65875: PUSH
65876: LD_INT 4
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 30
65885: PUSH
65886: LD_INT 5
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 30
65895: PUSH
65896: LD_INT 32
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: PPUSH
65909: CALL_OW 72
65913: ST_TO_ADDR
// if not tmp then
65914: LD_VAR 0 5
65918: NOT
65919: IFFALSE 65923
// continue ;
65921: GO 65172
// list := [ ] ;
65923: LD_ADDR_VAR 0 6
65927: PUSH
65928: EMPTY
65929: ST_TO_ADDR
// for j in tmp do
65930: LD_ADDR_VAR 0 3
65934: PUSH
65935: LD_VAR 0 5
65939: PUSH
65940: FOR_IN
65941: IFFALSE 66010
// begin for k in UnitsInside ( j ) do
65943: LD_ADDR_VAR 0 4
65947: PUSH
65948: LD_VAR 0 3
65952: PPUSH
65953: CALL_OW 313
65957: PUSH
65958: FOR_IN
65959: IFFALSE 66006
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65961: LD_VAR 0 4
65965: PPUSH
65966: CALL_OW 257
65970: PUSH
65971: LD_INT 1
65973: EQUAL
65974: PUSH
65975: LD_VAR 0 4
65979: PPUSH
65980: CALL_OW 459
65984: NOT
65985: AND
65986: IFFALSE 66004
// list := list ^ k ;
65988: LD_ADDR_VAR 0 6
65992: PUSH
65993: LD_VAR 0 6
65997: PUSH
65998: LD_VAR 0 4
66002: ADD
66003: ST_TO_ADDR
66004: GO 65958
66006: POP
66007: POP
// end ;
66008: GO 65940
66010: POP
66011: POP
// list := list diff mc_miners [ i ] ;
66012: LD_ADDR_VAR 0 6
66016: PUSH
66017: LD_VAR 0 6
66021: PUSH
66022: LD_EXP 66
66026: PUSH
66027: LD_VAR 0 2
66031: ARRAY
66032: DIFF
66033: ST_TO_ADDR
// if not list then
66034: LD_VAR 0 6
66038: NOT
66039: IFFALSE 66043
// continue ;
66041: GO 65172
// k := mc_mines [ i ] - mc_miners [ i ] ;
66043: LD_ADDR_VAR 0 4
66047: PUSH
66048: LD_EXP 65
66052: PUSH
66053: LD_VAR 0 2
66057: ARRAY
66058: PUSH
66059: LD_EXP 66
66063: PUSH
66064: LD_VAR 0 2
66068: ARRAY
66069: MINUS
66070: ST_TO_ADDR
// if k > list then
66071: LD_VAR 0 4
66075: PUSH
66076: LD_VAR 0 6
66080: GREATER
66081: IFFALSE 66093
// k := list ;
66083: LD_ADDR_VAR 0 4
66087: PUSH
66088: LD_VAR 0 6
66092: ST_TO_ADDR
// for j = 1 to k do
66093: LD_ADDR_VAR 0 3
66097: PUSH
66098: DOUBLE
66099: LD_INT 1
66101: DEC
66102: ST_TO_ADDR
66103: LD_VAR 0 4
66107: PUSH
66108: FOR_TO
66109: IFFALSE 66163
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
66111: LD_ADDR_EXP 66
66115: PUSH
66116: LD_EXP 66
66120: PPUSH
66121: LD_VAR 0 2
66125: PUSH
66126: LD_EXP 66
66130: PUSH
66131: LD_VAR 0 2
66135: ARRAY
66136: PUSH
66137: LD_INT 1
66139: PLUS
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PPUSH
66145: LD_VAR 0 6
66149: PUSH
66150: LD_VAR 0 3
66154: ARRAY
66155: PPUSH
66156: CALL 17428 0 3
66160: ST_TO_ADDR
66161: GO 66108
66163: POP
66164: POP
// end ;
66165: GO 65172
66167: POP
66168: POP
// end ;
66169: LD_VAR 0 1
66173: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
66174: LD_INT 0
66176: PPUSH
66177: PPUSH
66178: PPUSH
66179: PPUSH
66180: PPUSH
66181: PPUSH
66182: PPUSH
66183: PPUSH
66184: PPUSH
66185: PPUSH
// if not mc_bases then
66186: LD_EXP 52
66190: NOT
66191: IFFALSE 66195
// exit ;
66193: GO 67926
// for i = 1 to mc_bases do
66195: LD_ADDR_VAR 0 2
66199: PUSH
66200: DOUBLE
66201: LD_INT 1
66203: DEC
66204: ST_TO_ADDR
66205: LD_EXP 52
66209: PUSH
66210: FOR_TO
66211: IFFALSE 67924
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
66213: LD_EXP 52
66217: PUSH
66218: LD_VAR 0 2
66222: ARRAY
66223: NOT
66224: PUSH
66225: LD_EXP 59
66229: PUSH
66230: LD_VAR 0 2
66234: ARRAY
66235: OR
66236: IFFALSE 66240
// continue ;
66238: GO 66210
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
66240: LD_EXP 68
66244: PUSH
66245: LD_VAR 0 2
66249: ARRAY
66250: NOT
66251: PUSH
66252: LD_EXP 69
66256: PUSH
66257: LD_VAR 0 2
66261: ARRAY
66262: AND
66263: IFFALSE 66301
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
66265: LD_ADDR_EXP 69
66269: PUSH
66270: LD_EXP 69
66274: PPUSH
66275: LD_VAR 0 2
66279: PPUSH
66280: EMPTY
66281: PPUSH
66282: CALL_OW 1
66286: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
66287: LD_VAR 0 2
66291: PPUSH
66292: LD_INT 107
66294: PPUSH
66295: CALL 57390 0 2
// continue ;
66299: GO 66210
// end ; target := [ ] ;
66301: LD_ADDR_VAR 0 6
66305: PUSH
66306: EMPTY
66307: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
66308: LD_ADDR_VAR 0 3
66312: PUSH
66313: DOUBLE
66314: LD_EXP 68
66318: PUSH
66319: LD_VAR 0 2
66323: ARRAY
66324: INC
66325: ST_TO_ADDR
66326: LD_INT 1
66328: PUSH
66329: FOR_DOWNTO
66330: IFFALSE 66590
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
66332: LD_EXP 68
66336: PUSH
66337: LD_VAR 0 2
66341: ARRAY
66342: PUSH
66343: LD_VAR 0 3
66347: ARRAY
66348: PUSH
66349: LD_INT 2
66351: ARRAY
66352: PPUSH
66353: LD_EXP 68
66357: PUSH
66358: LD_VAR 0 2
66362: ARRAY
66363: PUSH
66364: LD_VAR 0 3
66368: ARRAY
66369: PUSH
66370: LD_INT 3
66372: ARRAY
66373: PPUSH
66374: CALL_OW 488
66378: PUSH
66379: LD_EXP 68
66383: PUSH
66384: LD_VAR 0 2
66388: ARRAY
66389: PUSH
66390: LD_VAR 0 3
66394: ARRAY
66395: PUSH
66396: LD_INT 2
66398: ARRAY
66399: PPUSH
66400: LD_EXP 68
66404: PUSH
66405: LD_VAR 0 2
66409: ARRAY
66410: PUSH
66411: LD_VAR 0 3
66415: ARRAY
66416: PUSH
66417: LD_INT 3
66419: ARRAY
66420: PPUSH
66421: CALL_OW 284
66425: PUSH
66426: LD_INT 0
66428: EQUAL
66429: AND
66430: IFFALSE 66485
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
66432: LD_ADDR_VAR 0 5
66436: PUSH
66437: LD_EXP 68
66441: PUSH
66442: LD_VAR 0 2
66446: ARRAY
66447: PPUSH
66448: LD_VAR 0 3
66452: PPUSH
66453: CALL_OW 3
66457: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
66458: LD_ADDR_EXP 68
66462: PUSH
66463: LD_EXP 68
66467: PPUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: LD_VAR 0 5
66477: PPUSH
66478: CALL_OW 1
66482: ST_TO_ADDR
// continue ;
66483: GO 66329
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
66485: LD_EXP 52
66489: PUSH
66490: LD_VAR 0 2
66494: ARRAY
66495: PUSH
66496: LD_INT 1
66498: ARRAY
66499: PPUSH
66500: CALL_OW 255
66504: PPUSH
66505: LD_EXP 68
66509: PUSH
66510: LD_VAR 0 2
66514: ARRAY
66515: PUSH
66516: LD_VAR 0 3
66520: ARRAY
66521: PUSH
66522: LD_INT 2
66524: ARRAY
66525: PPUSH
66526: LD_EXP 68
66530: PUSH
66531: LD_VAR 0 2
66535: ARRAY
66536: PUSH
66537: LD_VAR 0 3
66541: ARRAY
66542: PUSH
66543: LD_INT 3
66545: ARRAY
66546: PPUSH
66547: LD_INT 30
66549: PPUSH
66550: CALL 18324 0 4
66554: PUSH
66555: LD_INT 4
66557: ARRAY
66558: PUSH
66559: LD_INT 0
66561: EQUAL
66562: IFFALSE 66588
// begin target := mc_crates [ i ] [ j ] ;
66564: LD_ADDR_VAR 0 6
66568: PUSH
66569: LD_EXP 68
66573: PUSH
66574: LD_VAR 0 2
66578: ARRAY
66579: PUSH
66580: LD_VAR 0 3
66584: ARRAY
66585: ST_TO_ADDR
// break ;
66586: GO 66590
// end ; end ;
66588: GO 66329
66590: POP
66591: POP
// if not target then
66592: LD_VAR 0 6
66596: NOT
66597: IFFALSE 66601
// continue ;
66599: GO 66210
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
66601: LD_ADDR_VAR 0 7
66605: PUSH
66606: LD_EXP 71
66610: PUSH
66611: LD_VAR 0 2
66615: ARRAY
66616: PPUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: LD_INT 58
66625: PUSH
66626: EMPTY
66627: LIST
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 61
66635: PUSH
66636: EMPTY
66637: LIST
66638: PUSH
66639: LD_INT 33
66641: PUSH
66642: LD_INT 5
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 33
66651: PUSH
66652: LD_INT 3
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: LD_INT 34
66671: PUSH
66672: LD_INT 32
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 34
66681: PUSH
66682: LD_INT 51
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 34
66691: PUSH
66692: LD_INT 12
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PPUSH
66709: CALL_OW 72
66713: ST_TO_ADDR
// if not cargo then
66714: LD_VAR 0 7
66718: NOT
66719: IFFALSE 67362
// begin if mc_crates_collector [ i ] < 5 then
66721: LD_EXP 69
66725: PUSH
66726: LD_VAR 0 2
66730: ARRAY
66731: PUSH
66732: LD_INT 5
66734: LESS
66735: IFFALSE 67101
// begin if mc_ape [ i ] then
66737: LD_EXP 81
66741: PUSH
66742: LD_VAR 0 2
66746: ARRAY
66747: IFFALSE 66794
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66749: LD_ADDR_VAR 0 5
66753: PUSH
66754: LD_EXP 81
66758: PUSH
66759: LD_VAR 0 2
66763: ARRAY
66764: PPUSH
66765: LD_INT 25
66767: PUSH
66768: LD_INT 16
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 24
66777: PUSH
66778: LD_INT 750
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PPUSH
66789: CALL_OW 72
66793: ST_TO_ADDR
// if not tmp then
66794: LD_VAR 0 5
66798: NOT
66799: IFFALSE 66846
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66801: LD_ADDR_VAR 0 5
66805: PUSH
66806: LD_EXP 52
66810: PUSH
66811: LD_VAR 0 2
66815: ARRAY
66816: PPUSH
66817: LD_INT 25
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 24
66829: PUSH
66830: LD_INT 750
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PPUSH
66841: CALL_OW 72
66845: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66846: LD_EXP 81
66850: PUSH
66851: LD_VAR 0 2
66855: ARRAY
66856: PUSH
66857: LD_EXP 52
66861: PUSH
66862: LD_VAR 0 2
66866: ARRAY
66867: PPUSH
66868: LD_INT 25
66870: PUSH
66871: LD_INT 2
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 24
66880: PUSH
66881: LD_INT 750
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PPUSH
66892: CALL_OW 72
66896: AND
66897: PUSH
66898: LD_VAR 0 5
66902: PUSH
66903: LD_INT 5
66905: LESS
66906: AND
66907: IFFALSE 66989
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66909: LD_ADDR_VAR 0 3
66913: PUSH
66914: LD_EXP 52
66918: PUSH
66919: LD_VAR 0 2
66923: ARRAY
66924: PPUSH
66925: LD_INT 25
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 24
66937: PUSH
66938: LD_INT 750
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PPUSH
66949: CALL_OW 72
66953: PUSH
66954: FOR_IN
66955: IFFALSE 66987
// begin tmp := tmp union j ;
66957: LD_ADDR_VAR 0 5
66961: PUSH
66962: LD_VAR 0 5
66966: PUSH
66967: LD_VAR 0 3
66971: UNION
66972: ST_TO_ADDR
// if tmp >= 5 then
66973: LD_VAR 0 5
66977: PUSH
66978: LD_INT 5
66980: GREATEREQUAL
66981: IFFALSE 66985
// break ;
66983: GO 66987
// end ;
66985: GO 66954
66987: POP
66988: POP
// end ; if not tmp then
66989: LD_VAR 0 5
66993: NOT
66994: IFFALSE 66998
// continue ;
66996: GO 66210
// for j in tmp do
66998: LD_ADDR_VAR 0 3
67002: PUSH
67003: LD_VAR 0 5
67007: PUSH
67008: FOR_IN
67009: IFFALSE 67099
// if not GetTag ( j ) then
67011: LD_VAR 0 3
67015: PPUSH
67016: CALL_OW 110
67020: NOT
67021: IFFALSE 67097
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
67023: LD_ADDR_EXP 69
67027: PUSH
67028: LD_EXP 69
67032: PPUSH
67033: LD_VAR 0 2
67037: PUSH
67038: LD_EXP 69
67042: PUSH
67043: LD_VAR 0 2
67047: ARRAY
67048: PUSH
67049: LD_INT 1
67051: PLUS
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PPUSH
67057: LD_VAR 0 3
67061: PPUSH
67062: CALL 17428 0 3
67066: ST_TO_ADDR
// SetTag ( j , 107 ) ;
67067: LD_VAR 0 3
67071: PPUSH
67072: LD_INT 107
67074: PPUSH
67075: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
67079: LD_EXP 69
67083: PUSH
67084: LD_VAR 0 2
67088: ARRAY
67089: PUSH
67090: LD_INT 5
67092: GREATEREQUAL
67093: IFFALSE 67097
// break ;
67095: GO 67099
// end ;
67097: GO 67008
67099: POP
67100: POP
// end ; if mc_crates_collector [ i ] and target then
67101: LD_EXP 69
67105: PUSH
67106: LD_VAR 0 2
67110: ARRAY
67111: PUSH
67112: LD_VAR 0 6
67116: AND
67117: IFFALSE 67360
// begin if mc_crates_collector [ i ] < target [ 1 ] then
67119: LD_EXP 69
67123: PUSH
67124: LD_VAR 0 2
67128: ARRAY
67129: PUSH
67130: LD_VAR 0 6
67134: PUSH
67135: LD_INT 1
67137: ARRAY
67138: LESS
67139: IFFALSE 67159
// tmp := mc_crates_collector [ i ] else
67141: LD_ADDR_VAR 0 5
67145: PUSH
67146: LD_EXP 69
67150: PUSH
67151: LD_VAR 0 2
67155: ARRAY
67156: ST_TO_ADDR
67157: GO 67173
// tmp := target [ 1 ] ;
67159: LD_ADDR_VAR 0 5
67163: PUSH
67164: LD_VAR 0 6
67168: PUSH
67169: LD_INT 1
67171: ARRAY
67172: ST_TO_ADDR
// k := 0 ;
67173: LD_ADDR_VAR 0 4
67177: PUSH
67178: LD_INT 0
67180: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
67181: LD_ADDR_VAR 0 3
67185: PUSH
67186: LD_EXP 69
67190: PUSH
67191: LD_VAR 0 2
67195: ARRAY
67196: PUSH
67197: FOR_IN
67198: IFFALSE 67358
// begin k := k + 1 ;
67200: LD_ADDR_VAR 0 4
67204: PUSH
67205: LD_VAR 0 4
67209: PUSH
67210: LD_INT 1
67212: PLUS
67213: ST_TO_ADDR
// if k > tmp then
67214: LD_VAR 0 4
67218: PUSH
67219: LD_VAR 0 5
67223: GREATER
67224: IFFALSE 67228
// break ;
67226: GO 67358
// if not GetClass ( j ) in [ 2 , 16 ] then
67228: LD_VAR 0 3
67232: PPUSH
67233: CALL_OW 257
67237: PUSH
67238: LD_INT 2
67240: PUSH
67241: LD_INT 16
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: IN
67248: NOT
67249: IFFALSE 67302
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
67251: LD_ADDR_EXP 69
67255: PUSH
67256: LD_EXP 69
67260: PPUSH
67261: LD_VAR 0 2
67265: PPUSH
67266: LD_EXP 69
67270: PUSH
67271: LD_VAR 0 2
67275: ARRAY
67276: PUSH
67277: LD_VAR 0 3
67281: DIFF
67282: PPUSH
67283: CALL_OW 1
67287: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67288: LD_VAR 0 3
67292: PPUSH
67293: LD_INT 0
67295: PPUSH
67296: CALL_OW 109
// continue ;
67300: GO 67197
// end ; if IsInUnit ( j ) then
67302: LD_VAR 0 3
67306: PPUSH
67307: CALL_OW 310
67311: IFFALSE 67322
// ComExitBuilding ( j ) ;
67313: LD_VAR 0 3
67317: PPUSH
67318: CALL_OW 122
// wait ( 3 ) ;
67322: LD_INT 3
67324: PPUSH
67325: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67329: LD_VAR 0 3
67333: PPUSH
67334: LD_VAR 0 6
67338: PUSH
67339: LD_INT 2
67341: ARRAY
67342: PPUSH
67343: LD_VAR 0 6
67347: PUSH
67348: LD_INT 3
67350: ARRAY
67351: PPUSH
67352: CALL_OW 117
// end ;
67356: GO 67197
67358: POP
67359: POP
// end ; end else
67360: GO 67922
// begin for j in cargo do
67362: LD_ADDR_VAR 0 3
67366: PUSH
67367: LD_VAR 0 7
67371: PUSH
67372: FOR_IN
67373: IFFALSE 67920
// begin if GetTag ( j ) <> 0 then
67375: LD_VAR 0 3
67379: PPUSH
67380: CALL_OW 110
67384: PUSH
67385: LD_INT 0
67387: NONEQUAL
67388: IFFALSE 67392
// continue ;
67390: GO 67372
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
67392: LD_VAR 0 3
67396: PPUSH
67397: CALL_OW 256
67401: PUSH
67402: LD_INT 1000
67404: LESS
67405: PUSH
67406: LD_VAR 0 3
67410: PPUSH
67411: LD_EXP 76
67415: PUSH
67416: LD_VAR 0 2
67420: ARRAY
67421: PPUSH
67422: CALL_OW 308
67426: NOT
67427: AND
67428: IFFALSE 67450
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67430: LD_VAR 0 3
67434: PPUSH
67435: LD_EXP 76
67439: PUSH
67440: LD_VAR 0 2
67444: ARRAY
67445: PPUSH
67446: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
67450: LD_VAR 0 3
67454: PPUSH
67455: CALL_OW 256
67459: PUSH
67460: LD_INT 1000
67462: LESS
67463: PUSH
67464: LD_VAR 0 3
67468: PPUSH
67469: LD_EXP 76
67473: PUSH
67474: LD_VAR 0 2
67478: ARRAY
67479: PPUSH
67480: CALL_OW 308
67484: AND
67485: IFFALSE 67489
// continue ;
67487: GO 67372
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
67489: LD_VAR 0 3
67493: PPUSH
67494: CALL_OW 262
67498: PUSH
67499: LD_INT 2
67501: EQUAL
67502: PUSH
67503: LD_VAR 0 3
67507: PPUSH
67508: CALL_OW 261
67512: PUSH
67513: LD_INT 15
67515: LESS
67516: AND
67517: IFFALSE 67521
// continue ;
67519: GO 67372
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
67521: LD_VAR 0 3
67525: PPUSH
67526: CALL_OW 262
67530: PUSH
67531: LD_INT 1
67533: EQUAL
67534: PUSH
67535: LD_VAR 0 3
67539: PPUSH
67540: CALL_OW 261
67544: PUSH
67545: LD_INT 10
67547: LESS
67548: AND
67549: IFFALSE 67859
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67551: LD_ADDR_VAR 0 8
67555: PUSH
67556: LD_EXP 52
67560: PUSH
67561: LD_VAR 0 2
67565: ARRAY
67566: PPUSH
67567: LD_INT 2
67569: PUSH
67570: LD_INT 30
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 30
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: LIST
67594: PPUSH
67595: CALL_OW 72
67599: ST_TO_ADDR
// if not depot then
67600: LD_VAR 0 8
67604: NOT
67605: IFFALSE 67609
// continue ;
67607: GO 67372
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
67609: LD_VAR 0 3
67613: PPUSH
67614: LD_VAR 0 8
67618: PPUSH
67619: LD_VAR 0 3
67623: PPUSH
67624: CALL_OW 74
67628: PPUSH
67629: CALL_OW 296
67633: PUSH
67634: LD_INT 6
67636: LESS
67637: IFFALSE 67653
// SetFuel ( j , 100 ) else
67639: LD_VAR 0 3
67643: PPUSH
67644: LD_INT 100
67646: PPUSH
67647: CALL_OW 240
67651: GO 67859
// if GetFuel ( j ) = 0 then
67653: LD_VAR 0 3
67657: PPUSH
67658: CALL_OW 261
67662: PUSH
67663: LD_INT 0
67665: EQUAL
67666: IFFALSE 67859
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
67668: LD_ADDR_EXP 71
67672: PUSH
67673: LD_EXP 71
67677: PPUSH
67678: LD_VAR 0 2
67682: PPUSH
67683: LD_EXP 71
67687: PUSH
67688: LD_VAR 0 2
67692: ARRAY
67693: PUSH
67694: LD_VAR 0 3
67698: DIFF
67699: PPUSH
67700: CALL_OW 1
67704: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
67705: LD_VAR 0 3
67709: PPUSH
67710: CALL_OW 263
67714: PUSH
67715: LD_INT 1
67717: EQUAL
67718: IFFALSE 67734
// ComExitVehicle ( IsInUnit ( j ) ) ;
67720: LD_VAR 0 3
67724: PPUSH
67725: CALL_OW 310
67729: PPUSH
67730: CALL_OW 121
// if GetControl ( j ) = control_remote then
67734: LD_VAR 0 3
67738: PPUSH
67739: CALL_OW 263
67743: PUSH
67744: LD_INT 2
67746: EQUAL
67747: IFFALSE 67758
// ComUnlink ( j ) ;
67749: LD_VAR 0 3
67753: PPUSH
67754: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
67758: LD_ADDR_VAR 0 9
67762: PUSH
67763: LD_VAR 0 2
67767: PPUSH
67768: LD_INT 3
67770: PPUSH
67771: CALL 76905 0 2
67775: ST_TO_ADDR
// if fac then
67776: LD_VAR 0 9
67780: IFFALSE 67857
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67782: LD_ADDR_VAR 0 10
67786: PUSH
67787: LD_VAR 0 9
67791: PPUSH
67792: LD_VAR 0 3
67796: PPUSH
67797: CALL_OW 265
67801: PPUSH
67802: LD_VAR 0 3
67806: PPUSH
67807: CALL_OW 262
67811: PPUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: CALL_OW 263
67821: PPUSH
67822: LD_VAR 0 3
67826: PPUSH
67827: CALL_OW 264
67831: PPUSH
67832: CALL 15021 0 5
67836: ST_TO_ADDR
// if components then
67837: LD_VAR 0 10
67841: IFFALSE 67857
// MC_InsertProduceList ( i , components ) ;
67843: LD_VAR 0 2
67847: PPUSH
67848: LD_VAR 0 10
67852: PPUSH
67853: CALL 76533 0 2
// end ; continue ;
67857: GO 67372
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67859: LD_VAR 0 3
67863: PPUSH
67864: LD_INT 1
67866: PPUSH
67867: CALL_OW 289
67871: PUSH
67872: LD_INT 100
67874: LESS
67875: PUSH
67876: LD_VAR 0 3
67880: PPUSH
67881: CALL_OW 314
67885: NOT
67886: AND
67887: IFFALSE 67916
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67889: LD_VAR 0 3
67893: PPUSH
67894: LD_VAR 0 6
67898: PUSH
67899: LD_INT 2
67901: ARRAY
67902: PPUSH
67903: LD_VAR 0 6
67907: PUSH
67908: LD_INT 3
67910: ARRAY
67911: PPUSH
67912: CALL_OW 117
// break ;
67916: GO 67920
// end ;
67918: GO 67372
67920: POP
67921: POP
// end ; end ;
67922: GO 66210
67924: POP
67925: POP
// end ;
67926: LD_VAR 0 1
67930: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67931: LD_INT 0
67933: PPUSH
67934: PPUSH
67935: PPUSH
67936: PPUSH
// if not mc_bases then
67937: LD_EXP 52
67941: NOT
67942: IFFALSE 67946
// exit ;
67944: GO 68107
// for i = 1 to mc_bases do
67946: LD_ADDR_VAR 0 2
67950: PUSH
67951: DOUBLE
67952: LD_INT 1
67954: DEC
67955: ST_TO_ADDR
67956: LD_EXP 52
67960: PUSH
67961: FOR_TO
67962: IFFALSE 68105
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67964: LD_ADDR_VAR 0 4
67968: PUSH
67969: LD_EXP 71
67973: PUSH
67974: LD_VAR 0 2
67978: ARRAY
67979: PUSH
67980: LD_EXP 74
67984: PUSH
67985: LD_VAR 0 2
67989: ARRAY
67990: UNION
67991: PPUSH
67992: LD_INT 33
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PPUSH
68002: CALL_OW 72
68006: ST_TO_ADDR
// if tmp then
68007: LD_VAR 0 4
68011: IFFALSE 68103
// for j in tmp do
68013: LD_ADDR_VAR 0 3
68017: PUSH
68018: LD_VAR 0 4
68022: PUSH
68023: FOR_IN
68024: IFFALSE 68101
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
68026: LD_VAR 0 3
68030: PPUSH
68031: CALL_OW 312
68035: NOT
68036: PUSH
68037: LD_VAR 0 3
68041: PPUSH
68042: CALL_OW 256
68046: PUSH
68047: LD_INT 250
68049: GREATEREQUAL
68050: AND
68051: IFFALSE 68064
// Connect ( j ) else
68053: LD_VAR 0 3
68057: PPUSH
68058: CALL 20361 0 1
68062: GO 68099
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
68064: LD_VAR 0 3
68068: PPUSH
68069: CALL_OW 256
68073: PUSH
68074: LD_INT 250
68076: LESS
68077: PUSH
68078: LD_VAR 0 3
68082: PPUSH
68083: CALL_OW 312
68087: AND
68088: IFFALSE 68099
// ComUnlink ( j ) ;
68090: LD_VAR 0 3
68094: PPUSH
68095: CALL_OW 136
68099: GO 68023
68101: POP
68102: POP
// end ;
68103: GO 67961
68105: POP
68106: POP
// end ;
68107: LD_VAR 0 1
68111: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
68112: LD_INT 0
68114: PPUSH
68115: PPUSH
68116: PPUSH
68117: PPUSH
68118: PPUSH
// if not mc_bases then
68119: LD_EXP 52
68123: NOT
68124: IFFALSE 68128
// exit ;
68126: GO 68588
// for i = 1 to mc_bases do
68128: LD_ADDR_VAR 0 2
68132: PUSH
68133: DOUBLE
68134: LD_INT 1
68136: DEC
68137: ST_TO_ADDR
68138: LD_EXP 52
68142: PUSH
68143: FOR_TO
68144: IFFALSE 68586
// begin if not mc_produce [ i ] then
68146: LD_EXP 73
68150: PUSH
68151: LD_VAR 0 2
68155: ARRAY
68156: NOT
68157: IFFALSE 68161
// continue ;
68159: GO 68143
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68161: LD_ADDR_VAR 0 5
68165: PUSH
68166: LD_EXP 52
68170: PUSH
68171: LD_VAR 0 2
68175: ARRAY
68176: PPUSH
68177: LD_INT 30
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PPUSH
68187: CALL_OW 72
68191: ST_TO_ADDR
// if not fac then
68192: LD_VAR 0 5
68196: NOT
68197: IFFALSE 68201
// continue ;
68199: GO 68143
// for j in fac do
68201: LD_ADDR_VAR 0 3
68205: PUSH
68206: LD_VAR 0 5
68210: PUSH
68211: FOR_IN
68212: IFFALSE 68582
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
68214: LD_VAR 0 3
68218: PPUSH
68219: CALL_OW 461
68223: PUSH
68224: LD_INT 2
68226: NONEQUAL
68227: PUSH
68228: LD_VAR 0 3
68232: PPUSH
68233: LD_INT 15
68235: PPUSH
68236: CALL 20021 0 2
68240: PUSH
68241: LD_INT 4
68243: ARRAY
68244: OR
68245: PUSH
68246: LD_VAR 0 3
68250: PPUSH
68251: CALL_OW 313
68255: PUSH
68256: LD_INT 0
68258: EQUAL
68259: OR
68260: IFFALSE 68264
// continue ;
68262: GO 68211
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
68264: LD_VAR 0 3
68268: PPUSH
68269: LD_EXP 73
68273: PUSH
68274: LD_VAR 0 2
68278: ARRAY
68279: PUSH
68280: LD_INT 1
68282: ARRAY
68283: PUSH
68284: LD_INT 1
68286: ARRAY
68287: PPUSH
68288: LD_EXP 73
68292: PUSH
68293: LD_VAR 0 2
68297: ARRAY
68298: PUSH
68299: LD_INT 1
68301: ARRAY
68302: PUSH
68303: LD_INT 2
68305: ARRAY
68306: PPUSH
68307: LD_EXP 73
68311: PUSH
68312: LD_VAR 0 2
68316: ARRAY
68317: PUSH
68318: LD_INT 1
68320: ARRAY
68321: PUSH
68322: LD_INT 3
68324: ARRAY
68325: PPUSH
68326: LD_EXP 73
68330: PUSH
68331: LD_VAR 0 2
68335: ARRAY
68336: PUSH
68337: LD_INT 1
68339: ARRAY
68340: PUSH
68341: LD_INT 4
68343: ARRAY
68344: PPUSH
68345: CALL_OW 448
68349: PUSH
68350: LD_VAR 0 3
68354: PPUSH
68355: LD_EXP 73
68359: PUSH
68360: LD_VAR 0 2
68364: ARRAY
68365: PUSH
68366: LD_INT 1
68368: ARRAY
68369: PUSH
68370: LD_INT 1
68372: ARRAY
68373: PUSH
68374: LD_EXP 73
68378: PUSH
68379: LD_VAR 0 2
68383: ARRAY
68384: PUSH
68385: LD_INT 1
68387: ARRAY
68388: PUSH
68389: LD_INT 2
68391: ARRAY
68392: PUSH
68393: LD_EXP 73
68397: PUSH
68398: LD_VAR 0 2
68402: ARRAY
68403: PUSH
68404: LD_INT 1
68406: ARRAY
68407: PUSH
68408: LD_INT 3
68410: ARRAY
68411: PUSH
68412: LD_EXP 73
68416: PUSH
68417: LD_VAR 0 2
68421: ARRAY
68422: PUSH
68423: LD_INT 1
68425: ARRAY
68426: PUSH
68427: LD_INT 4
68429: ARRAY
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: PPUSH
68437: CALL 23692 0 2
68441: AND
68442: IFFALSE 68580
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
68444: LD_VAR 0 3
68448: PPUSH
68449: LD_EXP 73
68453: PUSH
68454: LD_VAR 0 2
68458: ARRAY
68459: PUSH
68460: LD_INT 1
68462: ARRAY
68463: PUSH
68464: LD_INT 1
68466: ARRAY
68467: PPUSH
68468: LD_EXP 73
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PUSH
68479: LD_INT 1
68481: ARRAY
68482: PUSH
68483: LD_INT 2
68485: ARRAY
68486: PPUSH
68487: LD_EXP 73
68491: PUSH
68492: LD_VAR 0 2
68496: ARRAY
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PUSH
68502: LD_INT 3
68504: ARRAY
68505: PPUSH
68506: LD_EXP 73
68510: PUSH
68511: LD_VAR 0 2
68515: ARRAY
68516: PUSH
68517: LD_INT 1
68519: ARRAY
68520: PUSH
68521: LD_INT 4
68523: ARRAY
68524: PPUSH
68525: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
68529: LD_ADDR_VAR 0 4
68533: PUSH
68534: LD_EXP 73
68538: PUSH
68539: LD_VAR 0 2
68543: ARRAY
68544: PPUSH
68545: LD_INT 1
68547: PPUSH
68548: CALL_OW 3
68552: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68553: LD_ADDR_EXP 73
68557: PUSH
68558: LD_EXP 73
68562: PPUSH
68563: LD_VAR 0 2
68567: PPUSH
68568: LD_VAR 0 4
68572: PPUSH
68573: CALL_OW 1
68577: ST_TO_ADDR
// break ;
68578: GO 68582
// end ; end ;
68580: GO 68211
68582: POP
68583: POP
// end ;
68584: GO 68143
68586: POP
68587: POP
// end ;
68588: LD_VAR 0 1
68592: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
68593: LD_INT 0
68595: PPUSH
68596: PPUSH
68597: PPUSH
// if not mc_bases then
68598: LD_EXP 52
68602: NOT
68603: IFFALSE 68607
// exit ;
68605: GO 68696
// for i = 1 to mc_bases do
68607: LD_ADDR_VAR 0 2
68611: PUSH
68612: DOUBLE
68613: LD_INT 1
68615: DEC
68616: ST_TO_ADDR
68617: LD_EXP 52
68621: PUSH
68622: FOR_TO
68623: IFFALSE 68694
// begin if mc_attack [ i ] then
68625: LD_EXP 72
68629: PUSH
68630: LD_VAR 0 2
68634: ARRAY
68635: IFFALSE 68692
// begin tmp := mc_attack [ i ] [ 1 ] ;
68637: LD_ADDR_VAR 0 3
68641: PUSH
68642: LD_EXP 72
68646: PUSH
68647: LD_VAR 0 2
68651: ARRAY
68652: PUSH
68653: LD_INT 1
68655: ARRAY
68656: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
68657: LD_ADDR_EXP 72
68661: PUSH
68662: LD_EXP 72
68666: PPUSH
68667: LD_VAR 0 2
68671: PPUSH
68672: EMPTY
68673: PPUSH
68674: CALL_OW 1
68678: ST_TO_ADDR
// Attack ( tmp ) ;
68679: LD_VAR 0 3
68683: PPUSH
68684: CALL 45905 0 1
// exit ;
68688: POP
68689: POP
68690: GO 68696
// end ; end ;
68692: GO 68622
68694: POP
68695: POP
// end ;
68696: LD_VAR 0 1
68700: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
68701: LD_INT 0
68703: PPUSH
68704: PPUSH
68705: PPUSH
68706: PPUSH
68707: PPUSH
68708: PPUSH
68709: PPUSH
// if not mc_bases then
68710: LD_EXP 52
68714: NOT
68715: IFFALSE 68719
// exit ;
68717: GO 69301
// for i = 1 to mc_bases do
68719: LD_ADDR_VAR 0 2
68723: PUSH
68724: DOUBLE
68725: LD_INT 1
68727: DEC
68728: ST_TO_ADDR
68729: LD_EXP 52
68733: PUSH
68734: FOR_TO
68735: IFFALSE 69299
// begin if not mc_bases [ i ] then
68737: LD_EXP 52
68741: PUSH
68742: LD_VAR 0 2
68746: ARRAY
68747: NOT
68748: IFFALSE 68752
// continue ;
68750: GO 68734
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68752: LD_ADDR_VAR 0 7
68756: PUSH
68757: LD_EXP 52
68761: PUSH
68762: LD_VAR 0 2
68766: ARRAY
68767: PUSH
68768: LD_INT 1
68770: ARRAY
68771: PPUSH
68772: CALL 14325 0 1
68776: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68777: LD_ADDR_EXP 75
68781: PUSH
68782: LD_EXP 75
68786: PPUSH
68787: LD_VAR 0 2
68791: PPUSH
68792: LD_EXP 52
68796: PUSH
68797: LD_VAR 0 2
68801: ARRAY
68802: PUSH
68803: LD_INT 1
68805: ARRAY
68806: PPUSH
68807: CALL_OW 255
68811: PPUSH
68812: LD_EXP 77
68816: PUSH
68817: LD_VAR 0 2
68821: ARRAY
68822: PPUSH
68823: CALL 12322 0 2
68827: PPUSH
68828: CALL_OW 1
68832: ST_TO_ADDR
// if not mc_scan [ i ] then
68833: LD_EXP 75
68837: PUSH
68838: LD_VAR 0 2
68842: ARRAY
68843: NOT
68844: IFFALSE 68999
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68846: LD_ADDR_VAR 0 4
68850: PUSH
68851: LD_EXP 52
68855: PUSH
68856: LD_VAR 0 2
68860: ARRAY
68861: PPUSH
68862: LD_INT 2
68864: PUSH
68865: LD_INT 25
68867: PUSH
68868: LD_INT 5
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 25
68877: PUSH
68878: LD_INT 8
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 25
68887: PUSH
68888: LD_INT 9
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: PPUSH
68901: CALL_OW 72
68905: ST_TO_ADDR
// if not tmp then
68906: LD_VAR 0 4
68910: NOT
68911: IFFALSE 68915
// continue ;
68913: GO 68734
// for j in tmp do
68915: LD_ADDR_VAR 0 3
68919: PUSH
68920: LD_VAR 0 4
68924: PUSH
68925: FOR_IN
68926: IFFALSE 68997
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68928: LD_VAR 0 3
68932: PPUSH
68933: CALL_OW 310
68937: PPUSH
68938: CALL_OW 266
68942: PUSH
68943: LD_INT 5
68945: EQUAL
68946: PUSH
68947: LD_VAR 0 3
68951: PPUSH
68952: CALL_OW 257
68956: PUSH
68957: LD_INT 1
68959: EQUAL
68960: AND
68961: PUSH
68962: LD_VAR 0 3
68966: PPUSH
68967: CALL_OW 459
68971: NOT
68972: AND
68973: PUSH
68974: LD_VAR 0 7
68978: AND
68979: IFFALSE 68995
// ComChangeProfession ( j , class ) ;
68981: LD_VAR 0 3
68985: PPUSH
68986: LD_VAR 0 7
68990: PPUSH
68991: CALL_OW 123
68995: GO 68925
68997: POP
68998: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
68999: LD_EXP 75
69003: PUSH
69004: LD_VAR 0 2
69008: ARRAY
69009: PUSH
69010: LD_EXP 74
69014: PUSH
69015: LD_VAR 0 2
69019: ARRAY
69020: NOT
69021: AND
69022: PUSH
69023: LD_EXP 52
69027: PUSH
69028: LD_VAR 0 2
69032: ARRAY
69033: PPUSH
69034: LD_INT 30
69036: PUSH
69037: LD_INT 32
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PPUSH
69044: CALL_OW 72
69048: NOT
69049: AND
69050: PUSH
69051: LD_EXP 52
69055: PUSH
69056: LD_VAR 0 2
69060: ARRAY
69061: PPUSH
69062: LD_INT 2
69064: PUSH
69065: LD_INT 30
69067: PUSH
69068: LD_INT 4
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 30
69077: PUSH
69078: LD_INT 5
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: PPUSH
69090: CALL_OW 72
69094: NOT
69095: AND
69096: IFFALSE 69228
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69098: LD_ADDR_VAR 0 4
69102: PUSH
69103: LD_EXP 52
69107: PUSH
69108: LD_VAR 0 2
69112: ARRAY
69113: PPUSH
69114: LD_INT 2
69116: PUSH
69117: LD_INT 25
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 25
69129: PUSH
69130: LD_INT 5
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 25
69139: PUSH
69140: LD_INT 8
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 25
69149: PUSH
69150: LD_INT 9
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: PPUSH
69164: CALL_OW 72
69168: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
69169: LD_ADDR_VAR 0 4
69173: PUSH
69174: LD_VAR 0 4
69178: PUSH
69179: LD_VAR 0 4
69183: PPUSH
69184: LD_INT 18
69186: PPUSH
69187: CALL 50688 0 2
69191: DIFF
69192: ST_TO_ADDR
// if tmp then
69193: LD_VAR 0 4
69197: IFFALSE 69228
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
69199: LD_VAR 0 2
69203: PPUSH
69204: LD_VAR 0 4
69208: PPUSH
69209: LD_EXP 77
69213: PUSH
69214: LD_VAR 0 2
69218: ARRAY
69219: PPUSH
69220: CALL 12357 0 3
// exit ;
69224: POP
69225: POP
69226: GO 69301
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
69228: LD_EXP 75
69232: PUSH
69233: LD_VAR 0 2
69237: ARRAY
69238: PUSH
69239: LD_EXP 74
69243: PUSH
69244: LD_VAR 0 2
69248: ARRAY
69249: AND
69250: IFFALSE 69297
// begin tmp := mc_defender [ i ] ;
69252: LD_ADDR_VAR 0 4
69256: PUSH
69257: LD_EXP 74
69261: PUSH
69262: LD_VAR 0 2
69266: ARRAY
69267: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
69268: LD_VAR 0 2
69272: PPUSH
69273: LD_VAR 0 4
69277: PPUSH
69278: LD_EXP 75
69282: PUSH
69283: LD_VAR 0 2
69287: ARRAY
69288: PPUSH
69289: CALL 12855 0 3
// exit ;
69293: POP
69294: POP
69295: GO 69301
// end ; end ;
69297: GO 68734
69299: POP
69300: POP
// end ;
69301: LD_VAR 0 1
69305: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
69306: LD_INT 0
69308: PPUSH
69309: PPUSH
69310: PPUSH
69311: PPUSH
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
69317: PPUSH
69318: PPUSH
// if not mc_bases then
69319: LD_EXP 52
69323: NOT
69324: IFFALSE 69328
// exit ;
69326: GO 70415
// for i = 1 to mc_bases do
69328: LD_ADDR_VAR 0 2
69332: PUSH
69333: DOUBLE
69334: LD_INT 1
69336: DEC
69337: ST_TO_ADDR
69338: LD_EXP 52
69342: PUSH
69343: FOR_TO
69344: IFFALSE 70413
// begin tmp := mc_lab [ i ] ;
69346: LD_ADDR_VAR 0 6
69350: PUSH
69351: LD_EXP 85
69355: PUSH
69356: LD_VAR 0 2
69360: ARRAY
69361: ST_TO_ADDR
// if not tmp then
69362: LD_VAR 0 6
69366: NOT
69367: IFFALSE 69371
// continue ;
69369: GO 69343
// idle_lab := 0 ;
69371: LD_ADDR_VAR 0 11
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// for j in tmp do
69379: LD_ADDR_VAR 0 3
69383: PUSH
69384: LD_VAR 0 6
69388: PUSH
69389: FOR_IN
69390: IFFALSE 70409
// begin researching := false ;
69392: LD_ADDR_VAR 0 10
69396: PUSH
69397: LD_INT 0
69399: ST_TO_ADDR
// side := GetSide ( j ) ;
69400: LD_ADDR_VAR 0 4
69404: PUSH
69405: LD_VAR 0 3
69409: PPUSH
69410: CALL_OW 255
69414: ST_TO_ADDR
// if not mc_tech [ side ] then
69415: LD_EXP 79
69419: PUSH
69420: LD_VAR 0 4
69424: ARRAY
69425: NOT
69426: IFFALSE 69430
// continue ;
69428: GO 69389
// if BuildingStatus ( j ) = bs_idle then
69430: LD_VAR 0 3
69434: PPUSH
69435: CALL_OW 461
69439: PUSH
69440: LD_INT 2
69442: EQUAL
69443: IFFALSE 69631
// begin if idle_lab and UnitsInside ( j ) < 6 then
69445: LD_VAR 0 11
69449: PUSH
69450: LD_VAR 0 3
69454: PPUSH
69455: CALL_OW 313
69459: PUSH
69460: LD_INT 6
69462: LESS
69463: AND
69464: IFFALSE 69535
// begin tmp2 := UnitsInside ( idle_lab ) ;
69466: LD_ADDR_VAR 0 9
69470: PUSH
69471: LD_VAR 0 11
69475: PPUSH
69476: CALL_OW 313
69480: ST_TO_ADDR
// if tmp2 then
69481: LD_VAR 0 9
69485: IFFALSE 69527
// for x in tmp2 do
69487: LD_ADDR_VAR 0 7
69491: PUSH
69492: LD_VAR 0 9
69496: PUSH
69497: FOR_IN
69498: IFFALSE 69525
// begin ComExitBuilding ( x ) ;
69500: LD_VAR 0 7
69504: PPUSH
69505: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
69509: LD_VAR 0 7
69513: PPUSH
69514: LD_VAR 0 3
69518: PPUSH
69519: CALL_OW 180
// end ;
69523: GO 69497
69525: POP
69526: POP
// idle_lab := 0 ;
69527: LD_ADDR_VAR 0 11
69531: PUSH
69532: LD_INT 0
69534: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
69535: LD_ADDR_VAR 0 5
69539: PUSH
69540: LD_EXP 79
69544: PUSH
69545: LD_VAR 0 4
69549: ARRAY
69550: PUSH
69551: FOR_IN
69552: IFFALSE 69612
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
69554: LD_VAR 0 3
69558: PPUSH
69559: LD_VAR 0 5
69563: PPUSH
69564: CALL_OW 430
69568: PUSH
69569: LD_VAR 0 4
69573: PPUSH
69574: LD_VAR 0 5
69578: PPUSH
69579: CALL 11427 0 2
69583: AND
69584: IFFALSE 69610
// begin researching := true ;
69586: LD_ADDR_VAR 0 10
69590: PUSH
69591: LD_INT 1
69593: ST_TO_ADDR
// ComResearch ( j , t ) ;
69594: LD_VAR 0 3
69598: PPUSH
69599: LD_VAR 0 5
69603: PPUSH
69604: CALL_OW 124
// break ;
69608: GO 69612
// end ;
69610: GO 69551
69612: POP
69613: POP
// if not researching then
69614: LD_VAR 0 10
69618: NOT
69619: IFFALSE 69631
// idle_lab := j ;
69621: LD_ADDR_VAR 0 11
69625: PUSH
69626: LD_VAR 0 3
69630: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
69631: LD_VAR 0 3
69635: PPUSH
69636: CALL_OW 461
69640: PUSH
69641: LD_INT 10
69643: EQUAL
69644: IFFALSE 70232
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
69646: LD_EXP 81
69650: PUSH
69651: LD_VAR 0 2
69655: ARRAY
69656: NOT
69657: PUSH
69658: LD_EXP 82
69662: PUSH
69663: LD_VAR 0 2
69667: ARRAY
69668: NOT
69669: AND
69670: PUSH
69671: LD_EXP 79
69675: PUSH
69676: LD_VAR 0 4
69680: ARRAY
69681: PUSH
69682: LD_INT 1
69684: GREATER
69685: AND
69686: IFFALSE 69817
// begin ComCancel ( j ) ;
69688: LD_VAR 0 3
69692: PPUSH
69693: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
69697: LD_ADDR_EXP 79
69701: PUSH
69702: LD_EXP 79
69706: PPUSH
69707: LD_VAR 0 4
69711: PPUSH
69712: LD_EXP 79
69716: PUSH
69717: LD_VAR 0 4
69721: ARRAY
69722: PPUSH
69723: LD_EXP 79
69727: PUSH
69728: LD_VAR 0 4
69732: ARRAY
69733: PUSH
69734: LD_INT 1
69736: MINUS
69737: PPUSH
69738: LD_EXP 79
69742: PUSH
69743: LD_VAR 0 4
69747: ARRAY
69748: PPUSH
69749: LD_INT 0
69751: PPUSH
69752: CALL 16846 0 4
69756: PPUSH
69757: CALL_OW 1
69761: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69762: LD_ADDR_EXP 79
69766: PUSH
69767: LD_EXP 79
69771: PPUSH
69772: LD_VAR 0 4
69776: PPUSH
69777: LD_EXP 79
69781: PUSH
69782: LD_VAR 0 4
69786: ARRAY
69787: PPUSH
69788: LD_EXP 79
69792: PUSH
69793: LD_VAR 0 4
69797: ARRAY
69798: PPUSH
69799: LD_INT 1
69801: PPUSH
69802: LD_INT 0
69804: PPUSH
69805: CALL 16846 0 4
69809: PPUSH
69810: CALL_OW 1
69814: ST_TO_ADDR
// continue ;
69815: GO 69389
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69817: LD_EXP 81
69821: PUSH
69822: LD_VAR 0 2
69826: ARRAY
69827: PUSH
69828: LD_EXP 82
69832: PUSH
69833: LD_VAR 0 2
69837: ARRAY
69838: NOT
69839: AND
69840: IFFALSE 69967
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69842: LD_ADDR_EXP 82
69846: PUSH
69847: LD_EXP 82
69851: PPUSH
69852: LD_VAR 0 2
69856: PUSH
69857: LD_EXP 82
69861: PUSH
69862: LD_VAR 0 2
69866: ARRAY
69867: PUSH
69868: LD_INT 1
69870: PLUS
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PPUSH
69876: LD_EXP 81
69880: PUSH
69881: LD_VAR 0 2
69885: ARRAY
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PPUSH
69891: CALL 17428 0 3
69895: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69896: LD_EXP 81
69900: PUSH
69901: LD_VAR 0 2
69905: ARRAY
69906: PUSH
69907: LD_INT 1
69909: ARRAY
69910: PPUSH
69911: LD_INT 112
69913: PPUSH
69914: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69918: LD_ADDR_VAR 0 9
69922: PUSH
69923: LD_EXP 81
69927: PUSH
69928: LD_VAR 0 2
69932: ARRAY
69933: PPUSH
69934: LD_INT 1
69936: PPUSH
69937: CALL_OW 3
69941: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69942: LD_ADDR_EXP 81
69946: PUSH
69947: LD_EXP 81
69951: PPUSH
69952: LD_VAR 0 2
69956: PPUSH
69957: LD_VAR 0 9
69961: PPUSH
69962: CALL_OW 1
69966: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69967: LD_EXP 81
69971: PUSH
69972: LD_VAR 0 2
69976: ARRAY
69977: PUSH
69978: LD_EXP 82
69982: PUSH
69983: LD_VAR 0 2
69987: ARRAY
69988: AND
69989: PUSH
69990: LD_EXP 82
69994: PUSH
69995: LD_VAR 0 2
69999: ARRAY
70000: PUSH
70001: LD_INT 1
70003: ARRAY
70004: PPUSH
70005: CALL_OW 310
70009: NOT
70010: AND
70011: PUSH
70012: LD_VAR 0 3
70016: PPUSH
70017: CALL_OW 313
70021: PUSH
70022: LD_INT 6
70024: EQUAL
70025: AND
70026: IFFALSE 70082
// begin tmp2 := UnitsInside ( j ) ;
70028: LD_ADDR_VAR 0 9
70032: PUSH
70033: LD_VAR 0 3
70037: PPUSH
70038: CALL_OW 313
70042: ST_TO_ADDR
// if tmp2 = 6 then
70043: LD_VAR 0 9
70047: PUSH
70048: LD_INT 6
70050: EQUAL
70051: IFFALSE 70082
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
70053: LD_VAR 0 9
70057: PUSH
70058: LD_INT 1
70060: ARRAY
70061: PPUSH
70062: LD_INT 112
70064: PPUSH
70065: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
70069: LD_VAR 0 9
70073: PUSH
70074: LD_INT 1
70076: ARRAY
70077: PPUSH
70078: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
70082: LD_EXP 82
70086: PUSH
70087: LD_VAR 0 2
70091: ARRAY
70092: PUSH
70093: LD_EXP 82
70097: PUSH
70098: LD_VAR 0 2
70102: ARRAY
70103: PUSH
70104: LD_INT 1
70106: ARRAY
70107: PPUSH
70108: CALL_OW 314
70112: NOT
70113: AND
70114: PUSH
70115: LD_EXP 82
70119: PUSH
70120: LD_VAR 0 2
70124: ARRAY
70125: PUSH
70126: LD_INT 1
70128: ARRAY
70129: PPUSH
70130: CALL_OW 310
70134: NOT
70135: AND
70136: IFFALSE 70162
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
70138: LD_EXP 82
70142: PUSH
70143: LD_VAR 0 2
70147: ARRAY
70148: PUSH
70149: LD_INT 1
70151: ARRAY
70152: PPUSH
70153: LD_VAR 0 3
70157: PPUSH
70158: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
70162: LD_EXP 82
70166: PUSH
70167: LD_VAR 0 2
70171: ARRAY
70172: PUSH
70173: LD_INT 1
70175: ARRAY
70176: PPUSH
70177: CALL_OW 310
70181: PUSH
70182: LD_EXP 82
70186: PUSH
70187: LD_VAR 0 2
70191: ARRAY
70192: PUSH
70193: LD_INT 1
70195: ARRAY
70196: PPUSH
70197: CALL_OW 310
70201: PPUSH
70202: CALL_OW 461
70206: PUSH
70207: LD_INT 3
70209: NONEQUAL
70210: AND
70211: IFFALSE 70232
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
70213: LD_EXP 82
70217: PUSH
70218: LD_VAR 0 2
70222: ARRAY
70223: PUSH
70224: LD_INT 1
70226: ARRAY
70227: PPUSH
70228: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
70232: LD_VAR 0 3
70236: PPUSH
70237: CALL_OW 461
70241: PUSH
70242: LD_INT 6
70244: EQUAL
70245: PUSH
70246: LD_VAR 0 6
70250: PUSH
70251: LD_INT 1
70253: GREATER
70254: AND
70255: IFFALSE 70407
// begin sci := [ ] ;
70257: LD_ADDR_VAR 0 8
70261: PUSH
70262: EMPTY
70263: ST_TO_ADDR
// for x in ( tmp diff j ) do
70264: LD_ADDR_VAR 0 7
70268: PUSH
70269: LD_VAR 0 6
70273: PUSH
70274: LD_VAR 0 3
70278: DIFF
70279: PUSH
70280: FOR_IN
70281: IFFALSE 70333
// begin if sci = 6 then
70283: LD_VAR 0 8
70287: PUSH
70288: LD_INT 6
70290: EQUAL
70291: IFFALSE 70295
// break ;
70293: GO 70333
// if BuildingStatus ( x ) = bs_idle then
70295: LD_VAR 0 7
70299: PPUSH
70300: CALL_OW 461
70304: PUSH
70305: LD_INT 2
70307: EQUAL
70308: IFFALSE 70331
// sci := sci ^ UnitsInside ( x ) ;
70310: LD_ADDR_VAR 0 8
70314: PUSH
70315: LD_VAR 0 8
70319: PUSH
70320: LD_VAR 0 7
70324: PPUSH
70325: CALL_OW 313
70329: ADD
70330: ST_TO_ADDR
// end ;
70331: GO 70280
70333: POP
70334: POP
// if not sci then
70335: LD_VAR 0 8
70339: NOT
70340: IFFALSE 70344
// continue ;
70342: GO 69389
// for x in sci do
70344: LD_ADDR_VAR 0 7
70348: PUSH
70349: LD_VAR 0 8
70353: PUSH
70354: FOR_IN
70355: IFFALSE 70405
// if IsInUnit ( x ) and not HasTask ( x ) then
70357: LD_VAR 0 7
70361: PPUSH
70362: CALL_OW 310
70366: PUSH
70367: LD_VAR 0 7
70371: PPUSH
70372: CALL_OW 314
70376: NOT
70377: AND
70378: IFFALSE 70403
// begin ComExitBuilding ( x ) ;
70380: LD_VAR 0 7
70384: PPUSH
70385: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70389: LD_VAR 0 7
70393: PPUSH
70394: LD_VAR 0 3
70398: PPUSH
70399: CALL_OW 180
// end ;
70403: GO 70354
70405: POP
70406: POP
// end ; end ;
70407: GO 69389
70409: POP
70410: POP
// end ;
70411: GO 69343
70413: POP
70414: POP
// end ;
70415: LD_VAR 0 1
70419: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
70420: LD_INT 0
70422: PPUSH
70423: PPUSH
// if not mc_bases then
70424: LD_EXP 52
70428: NOT
70429: IFFALSE 70433
// exit ;
70431: GO 70514
// for i = 1 to mc_bases do
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: DOUBLE
70439: LD_INT 1
70441: DEC
70442: ST_TO_ADDR
70443: LD_EXP 52
70447: PUSH
70448: FOR_TO
70449: IFFALSE 70512
// if mc_mines [ i ] and mc_miners [ i ] then
70451: LD_EXP 65
70455: PUSH
70456: LD_VAR 0 2
70460: ARRAY
70461: PUSH
70462: LD_EXP 66
70466: PUSH
70467: LD_VAR 0 2
70471: ARRAY
70472: AND
70473: IFFALSE 70510
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
70475: LD_EXP 66
70479: PUSH
70480: LD_VAR 0 2
70484: ARRAY
70485: PUSH
70486: LD_INT 1
70488: ARRAY
70489: PPUSH
70490: CALL_OW 255
70494: PPUSH
70495: LD_EXP 65
70499: PUSH
70500: LD_VAR 0 2
70504: ARRAY
70505: PPUSH
70506: CALL 14478 0 2
70510: GO 70448
70512: POP
70513: POP
// end ;
70514: LD_VAR 0 1
70518: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
70519: LD_INT 0
70521: PPUSH
70522: PPUSH
70523: PPUSH
70524: PPUSH
70525: PPUSH
70526: PPUSH
70527: PPUSH
70528: PPUSH
// if not mc_bases or not mc_parking then
70529: LD_EXP 52
70533: NOT
70534: PUSH
70535: LD_EXP 76
70539: NOT
70540: OR
70541: IFFALSE 70545
// exit ;
70543: GO 71221
// for i = 1 to mc_bases do
70545: LD_ADDR_VAR 0 2
70549: PUSH
70550: DOUBLE
70551: LD_INT 1
70553: DEC
70554: ST_TO_ADDR
70555: LD_EXP 52
70559: PUSH
70560: FOR_TO
70561: IFFALSE 71219
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
70563: LD_EXP 52
70567: PUSH
70568: LD_VAR 0 2
70572: ARRAY
70573: NOT
70574: PUSH
70575: LD_EXP 76
70579: PUSH
70580: LD_VAR 0 2
70584: ARRAY
70585: NOT
70586: OR
70587: IFFALSE 70591
// continue ;
70589: GO 70560
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
70591: LD_ADDR_VAR 0 5
70595: PUSH
70596: LD_EXP 52
70600: PUSH
70601: LD_VAR 0 2
70605: ARRAY
70606: PUSH
70607: LD_INT 1
70609: ARRAY
70610: PPUSH
70611: CALL_OW 255
70615: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70616: LD_ADDR_VAR 0 6
70620: PUSH
70621: LD_EXP 52
70625: PUSH
70626: LD_VAR 0 2
70630: ARRAY
70631: PPUSH
70632: LD_INT 30
70634: PUSH
70635: LD_INT 3
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PPUSH
70642: CALL_OW 72
70646: ST_TO_ADDR
// if not fac then
70647: LD_VAR 0 6
70651: NOT
70652: IFFALSE 70703
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70654: LD_ADDR_VAR 0 6
70658: PUSH
70659: LD_EXP 52
70663: PUSH
70664: LD_VAR 0 2
70668: ARRAY
70669: PPUSH
70670: LD_INT 2
70672: PUSH
70673: LD_INT 30
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 30
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: PPUSH
70698: CALL_OW 72
70702: ST_TO_ADDR
// if not fac then
70703: LD_VAR 0 6
70707: NOT
70708: IFFALSE 70712
// continue ;
70710: GO 70560
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70712: LD_ADDR_VAR 0 7
70716: PUSH
70717: LD_EXP 76
70721: PUSH
70722: LD_VAR 0 2
70726: ARRAY
70727: PPUSH
70728: LD_INT 22
70730: PUSH
70731: LD_VAR 0 5
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 21
70742: PUSH
70743: LD_INT 2
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 3
70752: PUSH
70753: LD_INT 24
70755: PUSH
70756: LD_INT 1000
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: LIST
70771: PPUSH
70772: CALL_OW 70
70776: PUSH
70777: LD_INT 22
70779: PUSH
70780: LD_VAR 0 5
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 91
70791: PUSH
70792: LD_VAR 0 6
70796: PUSH
70797: LD_INT 1
70799: ARRAY
70800: PUSH
70801: LD_INT 25
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 21
70811: PUSH
70812: LD_INT 2
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: LD_INT 24
70824: PUSH
70825: LD_INT 1000
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: PPUSH
70842: CALL_OW 69
70846: UNION
70847: ST_TO_ADDR
// if not vehs then
70848: LD_VAR 0 7
70852: NOT
70853: IFFALSE 70879
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70855: LD_ADDR_EXP 64
70859: PUSH
70860: LD_EXP 64
70864: PPUSH
70865: LD_VAR 0 2
70869: PPUSH
70870: EMPTY
70871: PPUSH
70872: CALL_OW 1
70876: ST_TO_ADDR
// continue ;
70877: GO 70560
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70879: LD_ADDR_VAR 0 8
70883: PUSH
70884: LD_EXP 52
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PPUSH
70895: LD_INT 30
70897: PUSH
70898: LD_INT 3
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PPUSH
70905: CALL_OW 72
70909: ST_TO_ADDR
// if tmp then
70910: LD_VAR 0 8
70914: IFFALSE 71017
// begin for j in tmp do
70916: LD_ADDR_VAR 0 3
70920: PUSH
70921: LD_VAR 0 8
70925: PUSH
70926: FOR_IN
70927: IFFALSE 71015
// for k in UnitsInside ( j ) do
70929: LD_ADDR_VAR 0 4
70933: PUSH
70934: LD_VAR 0 3
70938: PPUSH
70939: CALL_OW 313
70943: PUSH
70944: FOR_IN
70945: IFFALSE 71011
// if k then
70947: LD_VAR 0 4
70951: IFFALSE 71009
// if not k in mc_repair_vehicle [ i ] then
70953: LD_VAR 0 4
70957: PUSH
70958: LD_EXP 64
70962: PUSH
70963: LD_VAR 0 2
70967: ARRAY
70968: IN
70969: NOT
70970: IFFALSE 71009
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70972: LD_ADDR_EXP 64
70976: PUSH
70977: LD_EXP 64
70981: PPUSH
70982: LD_VAR 0 2
70986: PPUSH
70987: LD_EXP 64
70991: PUSH
70992: LD_VAR 0 2
70996: ARRAY
70997: PUSH
70998: LD_VAR 0 4
71002: UNION
71003: PPUSH
71004: CALL_OW 1
71008: ST_TO_ADDR
71009: GO 70944
71011: POP
71012: POP
71013: GO 70926
71015: POP
71016: POP
// end ; if not mc_repair_vehicle [ i ] then
71017: LD_EXP 64
71021: PUSH
71022: LD_VAR 0 2
71026: ARRAY
71027: NOT
71028: IFFALSE 71032
// continue ;
71030: GO 70560
// for j in mc_repair_vehicle [ i ] do
71032: LD_ADDR_VAR 0 3
71036: PUSH
71037: LD_EXP 64
71041: PUSH
71042: LD_VAR 0 2
71046: ARRAY
71047: PUSH
71048: FOR_IN
71049: IFFALSE 71215
// begin if GetClass ( j ) <> 3 then
71051: LD_VAR 0 3
71055: PPUSH
71056: CALL_OW 257
71060: PUSH
71061: LD_INT 3
71063: NONEQUAL
71064: IFFALSE 71105
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
71066: LD_ADDR_EXP 64
71070: PUSH
71071: LD_EXP 64
71075: PPUSH
71076: LD_VAR 0 2
71080: PPUSH
71081: LD_EXP 64
71085: PUSH
71086: LD_VAR 0 2
71090: ARRAY
71091: PUSH
71092: LD_VAR 0 3
71096: DIFF
71097: PPUSH
71098: CALL_OW 1
71102: ST_TO_ADDR
// continue ;
71103: GO 71048
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71105: LD_VAR 0 3
71109: PPUSH
71110: CALL_OW 311
71114: NOT
71115: PUSH
71116: LD_VAR 0 3
71120: PUSH
71121: LD_EXP 55
71125: PUSH
71126: LD_VAR 0 2
71130: ARRAY
71131: PUSH
71132: LD_INT 1
71134: ARRAY
71135: IN
71136: NOT
71137: AND
71138: PUSH
71139: LD_VAR 0 3
71143: PUSH
71144: LD_EXP 55
71148: PUSH
71149: LD_VAR 0 2
71153: ARRAY
71154: PUSH
71155: LD_INT 2
71157: ARRAY
71158: IN
71159: NOT
71160: AND
71161: IFFALSE 71213
// begin if IsInUnit ( j ) then
71163: LD_VAR 0 3
71167: PPUSH
71168: CALL_OW 310
71172: IFFALSE 71183
// ComExitBuilding ( j ) ;
71174: LD_VAR 0 3
71178: PPUSH
71179: CALL_OW 122
// if not HasTask ( j ) then
71183: LD_VAR 0 3
71187: PPUSH
71188: CALL_OW 314
71192: NOT
71193: IFFALSE 71213
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
71195: LD_VAR 0 3
71199: PPUSH
71200: LD_VAR 0 7
71204: PUSH
71205: LD_INT 1
71207: ARRAY
71208: PPUSH
71209: CALL_OW 189
// end ; end ;
71213: GO 71048
71215: POP
71216: POP
// end ;
71217: GO 70560
71219: POP
71220: POP
// end ;
71221: LD_VAR 0 1
71225: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
71226: LD_INT 0
71228: PPUSH
71229: PPUSH
71230: PPUSH
71231: PPUSH
71232: PPUSH
71233: PPUSH
71234: PPUSH
71235: PPUSH
71236: PPUSH
71237: PPUSH
71238: PPUSH
// if not mc_bases then
71239: LD_EXP 52
71243: NOT
71244: IFFALSE 71248
// exit ;
71246: GO 72050
// for i = 1 to mc_bases do
71248: LD_ADDR_VAR 0 2
71252: PUSH
71253: DOUBLE
71254: LD_INT 1
71256: DEC
71257: ST_TO_ADDR
71258: LD_EXP 52
71262: PUSH
71263: FOR_TO
71264: IFFALSE 72048
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
71266: LD_EXP 80
71270: PUSH
71271: LD_VAR 0 2
71275: ARRAY
71276: NOT
71277: PUSH
71278: LD_EXP 55
71282: PUSH
71283: LD_VAR 0 2
71287: ARRAY
71288: PUSH
71289: LD_INT 1
71291: ARRAY
71292: OR
71293: PUSH
71294: LD_EXP 55
71298: PUSH
71299: LD_VAR 0 2
71303: ARRAY
71304: PUSH
71305: LD_INT 2
71307: ARRAY
71308: OR
71309: PUSH
71310: LD_EXP 78
71314: PUSH
71315: LD_VAR 0 2
71319: ARRAY
71320: PPUSH
71321: LD_INT 1
71323: PPUSH
71324: CALL_OW 325
71328: NOT
71329: OR
71330: PUSH
71331: LD_EXP 75
71335: PUSH
71336: LD_VAR 0 2
71340: ARRAY
71341: OR
71342: IFFALSE 71346
// continue ;
71344: GO 71263
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
71346: LD_ADDR_VAR 0 8
71350: PUSH
71351: LD_EXP 52
71355: PUSH
71356: LD_VAR 0 2
71360: ARRAY
71361: PPUSH
71362: LD_INT 25
71364: PUSH
71365: LD_INT 4
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 50
71374: PUSH
71375: EMPTY
71376: LIST
71377: PUSH
71378: LD_INT 3
71380: PUSH
71381: LD_INT 60
71383: PUSH
71384: EMPTY
71385: LIST
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: PPUSH
71396: CALL_OW 72
71400: PUSH
71401: LD_EXP 56
71405: PUSH
71406: LD_VAR 0 2
71410: ARRAY
71411: DIFF
71412: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71413: LD_ADDR_VAR 0 9
71417: PUSH
71418: LD_EXP 52
71422: PUSH
71423: LD_VAR 0 2
71427: ARRAY
71428: PPUSH
71429: LD_INT 2
71431: PUSH
71432: LD_INT 30
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 30
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: PPUSH
71457: CALL_OW 72
71461: ST_TO_ADDR
// if not tmp or not dep then
71462: LD_VAR 0 8
71466: NOT
71467: PUSH
71468: LD_VAR 0 9
71472: NOT
71473: OR
71474: IFFALSE 71478
// continue ;
71476: GO 71263
// side := GetSide ( tmp [ 1 ] ) ;
71478: LD_ADDR_VAR 0 11
71482: PUSH
71483: LD_VAR 0 8
71487: PUSH
71488: LD_INT 1
71490: ARRAY
71491: PPUSH
71492: CALL_OW 255
71496: ST_TO_ADDR
// dep := dep [ 1 ] ;
71497: LD_ADDR_VAR 0 9
71501: PUSH
71502: LD_VAR 0 9
71506: PUSH
71507: LD_INT 1
71509: ARRAY
71510: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
71511: LD_ADDR_VAR 0 7
71515: PUSH
71516: LD_EXP 80
71520: PUSH
71521: LD_VAR 0 2
71525: ARRAY
71526: PPUSH
71527: LD_INT 22
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 25
71539: PUSH
71540: LD_INT 12
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PPUSH
71551: CALL_OW 70
71555: PUSH
71556: LD_INT 22
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 25
71568: PUSH
71569: LD_INT 12
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 91
71578: PUSH
71579: LD_VAR 0 9
71583: PUSH
71584: LD_INT 20
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: LIST
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: PPUSH
71597: CALL_OW 69
71601: UNION
71602: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
71603: LD_ADDR_VAR 0 10
71607: PUSH
71608: LD_EXP 80
71612: PUSH
71613: LD_VAR 0 2
71617: ARRAY
71618: PPUSH
71619: LD_INT 81
71621: PUSH
71622: LD_VAR 0 11
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PPUSH
71631: CALL_OW 70
71635: ST_TO_ADDR
// if not apes or danger_at_area then
71636: LD_VAR 0 7
71640: NOT
71641: PUSH
71642: LD_VAR 0 10
71646: OR
71647: IFFALSE 71697
// begin if mc_taming [ i ] then
71649: LD_EXP 83
71653: PUSH
71654: LD_VAR 0 2
71658: ARRAY
71659: IFFALSE 71695
// begin MC_Reset ( i , 121 ) ;
71661: LD_VAR 0 2
71665: PPUSH
71666: LD_INT 121
71668: PPUSH
71669: CALL 57390 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71673: LD_ADDR_EXP 83
71677: PUSH
71678: LD_EXP 83
71682: PPUSH
71683: LD_VAR 0 2
71687: PPUSH
71688: EMPTY
71689: PPUSH
71690: CALL_OW 1
71694: ST_TO_ADDR
// end ; continue ;
71695: GO 71263
// end ; for j in tmp do
71697: LD_ADDR_VAR 0 3
71701: PUSH
71702: LD_VAR 0 8
71706: PUSH
71707: FOR_IN
71708: IFFALSE 72044
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71710: LD_VAR 0 3
71714: PUSH
71715: LD_EXP 83
71719: PUSH
71720: LD_VAR 0 2
71724: ARRAY
71725: IN
71726: NOT
71727: PUSH
71728: LD_EXP 83
71732: PUSH
71733: LD_VAR 0 2
71737: ARRAY
71738: PUSH
71739: LD_INT 3
71741: LESS
71742: AND
71743: IFFALSE 71801
// begin SetTag ( j , 121 ) ;
71745: LD_VAR 0 3
71749: PPUSH
71750: LD_INT 121
71752: PPUSH
71753: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71757: LD_ADDR_EXP 83
71761: PUSH
71762: LD_EXP 83
71766: PPUSH
71767: LD_VAR 0 2
71771: PUSH
71772: LD_EXP 83
71776: PUSH
71777: LD_VAR 0 2
71781: ARRAY
71782: PUSH
71783: LD_INT 1
71785: PLUS
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PPUSH
71791: LD_VAR 0 3
71795: PPUSH
71796: CALL 17428 0 3
71800: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71801: LD_VAR 0 3
71805: PUSH
71806: LD_EXP 83
71810: PUSH
71811: LD_VAR 0 2
71815: ARRAY
71816: IN
71817: IFFALSE 72042
// begin if GetClass ( j ) <> 4 then
71819: LD_VAR 0 3
71823: PPUSH
71824: CALL_OW 257
71828: PUSH
71829: LD_INT 4
71831: NONEQUAL
71832: IFFALSE 71885
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71834: LD_ADDR_EXP 83
71838: PUSH
71839: LD_EXP 83
71843: PPUSH
71844: LD_VAR 0 2
71848: PPUSH
71849: LD_EXP 83
71853: PUSH
71854: LD_VAR 0 2
71858: ARRAY
71859: PUSH
71860: LD_VAR 0 3
71864: DIFF
71865: PPUSH
71866: CALL_OW 1
71870: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71871: LD_VAR 0 3
71875: PPUSH
71876: LD_INT 0
71878: PPUSH
71879: CALL_OW 109
// continue ;
71883: GO 71707
// end ; if IsInUnit ( j ) then
71885: LD_VAR 0 3
71889: PPUSH
71890: CALL_OW 310
71894: IFFALSE 71905
// ComExitBuilding ( j ) ;
71896: LD_VAR 0 3
71900: PPUSH
71901: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
71905: LD_ADDR_VAR 0 6
71909: PUSH
71910: LD_VAR 0 7
71914: PPUSH
71915: LD_VAR 0 3
71919: PPUSH
71920: CALL_OW 74
71924: ST_TO_ADDR
// if not ape then
71925: LD_VAR 0 6
71929: NOT
71930: IFFALSE 71934
// break ;
71932: GO 72044
// x := GetX ( ape ) ;
71934: LD_ADDR_VAR 0 4
71938: PUSH
71939: LD_VAR 0 6
71943: PPUSH
71944: CALL_OW 250
71948: ST_TO_ADDR
// y := GetY ( ape ) ;
71949: LD_ADDR_VAR 0 5
71953: PUSH
71954: LD_VAR 0 6
71958: PPUSH
71959: CALL_OW 251
71963: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71964: LD_VAR 0 4
71968: PPUSH
71969: LD_VAR 0 5
71973: PPUSH
71974: CALL_OW 488
71978: NOT
71979: PUSH
71980: LD_VAR 0 11
71984: PPUSH
71985: LD_VAR 0 4
71989: PPUSH
71990: LD_VAR 0 5
71994: PPUSH
71995: LD_INT 20
71997: PPUSH
71998: CALL 18324 0 4
72002: PUSH
72003: LD_INT 4
72005: ARRAY
72006: OR
72007: IFFALSE 72011
// break ;
72009: GO 72044
// if not HasTask ( j ) then
72011: LD_VAR 0 3
72015: PPUSH
72016: CALL_OW 314
72020: NOT
72021: IFFALSE 72042
// ComTameXY ( j , x , y ) ;
72023: LD_VAR 0 3
72027: PPUSH
72028: LD_VAR 0 4
72032: PPUSH
72033: LD_VAR 0 5
72037: PPUSH
72038: CALL_OW 131
// end ; end ;
72042: GO 71707
72044: POP
72045: POP
// end ;
72046: GO 71263
72048: POP
72049: POP
// end ;
72050: LD_VAR 0 1
72054: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72055: LD_INT 0
72057: PPUSH
72058: PPUSH
72059: PPUSH
72060: PPUSH
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
// if not mc_bases then
72065: LD_EXP 52
72069: NOT
72070: IFFALSE 72074
// exit ;
72072: GO 72700
// for i = 1 to mc_bases do
72074: LD_ADDR_VAR 0 2
72078: PUSH
72079: DOUBLE
72080: LD_INT 1
72082: DEC
72083: ST_TO_ADDR
72084: LD_EXP 52
72088: PUSH
72089: FOR_TO
72090: IFFALSE 72698
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72092: LD_EXP 81
72096: PUSH
72097: LD_VAR 0 2
72101: ARRAY
72102: NOT
72103: PUSH
72104: LD_EXP 81
72108: PUSH
72109: LD_VAR 0 2
72113: ARRAY
72114: PPUSH
72115: LD_INT 25
72117: PUSH
72118: LD_INT 12
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PPUSH
72125: CALL_OW 72
72129: NOT
72130: OR
72131: IFFALSE 72135
// continue ;
72133: GO 72089
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
72135: LD_ADDR_VAR 0 5
72139: PUSH
72140: LD_EXP 81
72144: PUSH
72145: LD_VAR 0 2
72149: ARRAY
72150: PUSH
72151: LD_INT 1
72153: ARRAY
72154: PPUSH
72155: CALL_OW 255
72159: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
72160: LD_VAR 0 5
72164: PPUSH
72165: LD_INT 2
72167: PPUSH
72168: CALL_OW 325
72172: IFFALSE 72425
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72174: LD_ADDR_VAR 0 4
72178: PUSH
72179: LD_EXP 81
72183: PUSH
72184: LD_VAR 0 2
72188: ARRAY
72189: PPUSH
72190: LD_INT 25
72192: PUSH
72193: LD_INT 16
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PPUSH
72200: CALL_OW 72
72204: ST_TO_ADDR
// if tmp < 6 then
72205: LD_VAR 0 4
72209: PUSH
72210: LD_INT 6
72212: LESS
72213: IFFALSE 72425
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72215: LD_ADDR_VAR 0 6
72219: PUSH
72220: LD_EXP 52
72224: PUSH
72225: LD_VAR 0 2
72229: ARRAY
72230: PPUSH
72231: LD_INT 2
72233: PUSH
72234: LD_INT 30
72236: PUSH
72237: LD_INT 0
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 30
72246: PUSH
72247: LD_INT 1
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: LIST
72258: PPUSH
72259: CALL_OW 72
72263: ST_TO_ADDR
// if depot then
72264: LD_VAR 0 6
72268: IFFALSE 72425
// begin selected := 0 ;
72270: LD_ADDR_VAR 0 7
72274: PUSH
72275: LD_INT 0
72277: ST_TO_ADDR
// for j in depot do
72278: LD_ADDR_VAR 0 3
72282: PUSH
72283: LD_VAR 0 6
72287: PUSH
72288: FOR_IN
72289: IFFALSE 72320
// begin if UnitsInside ( j ) < 6 then
72291: LD_VAR 0 3
72295: PPUSH
72296: CALL_OW 313
72300: PUSH
72301: LD_INT 6
72303: LESS
72304: IFFALSE 72318
// begin selected := j ;
72306: LD_ADDR_VAR 0 7
72310: PUSH
72311: LD_VAR 0 3
72315: ST_TO_ADDR
// break ;
72316: GO 72320
// end ; end ;
72318: GO 72288
72320: POP
72321: POP
// if selected then
72322: LD_VAR 0 7
72326: IFFALSE 72425
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72328: LD_ADDR_VAR 0 3
72332: PUSH
72333: LD_EXP 81
72337: PUSH
72338: LD_VAR 0 2
72342: ARRAY
72343: PPUSH
72344: LD_INT 25
72346: PUSH
72347: LD_INT 12
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PPUSH
72354: CALL_OW 72
72358: PUSH
72359: FOR_IN
72360: IFFALSE 72423
// if not HasTask ( j ) then
72362: LD_VAR 0 3
72366: PPUSH
72367: CALL_OW 314
72371: NOT
72372: IFFALSE 72421
// begin if not IsInUnit ( j ) then
72374: LD_VAR 0 3
72378: PPUSH
72379: CALL_OW 310
72383: NOT
72384: IFFALSE 72400
// ComEnterUnit ( j , selected ) ;
72386: LD_VAR 0 3
72390: PPUSH
72391: LD_VAR 0 7
72395: PPUSH
72396: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
72400: LD_VAR 0 3
72404: PPUSH
72405: LD_INT 16
72407: PPUSH
72408: CALL_OW 183
// AddComExitBuilding ( j ) ;
72412: LD_VAR 0 3
72416: PPUSH
72417: CALL_OW 182
// end ;
72421: GO 72359
72423: POP
72424: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
72425: LD_VAR 0 5
72429: PPUSH
72430: LD_INT 11
72432: PPUSH
72433: CALL_OW 325
72437: IFFALSE 72696
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72439: LD_ADDR_VAR 0 4
72443: PUSH
72444: LD_EXP 81
72448: PUSH
72449: LD_VAR 0 2
72453: ARRAY
72454: PPUSH
72455: LD_INT 25
72457: PUSH
72458: LD_INT 16
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PPUSH
72465: CALL_OW 72
72469: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
72470: LD_VAR 0 4
72474: PUSH
72475: LD_INT 6
72477: GREATEREQUAL
72478: PUSH
72479: LD_VAR 0 5
72483: PPUSH
72484: LD_INT 2
72486: PPUSH
72487: CALL_OW 325
72491: NOT
72492: OR
72493: IFFALSE 72696
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72495: LD_ADDR_VAR 0 8
72499: PUSH
72500: LD_EXP 52
72504: PUSH
72505: LD_VAR 0 2
72509: ARRAY
72510: PPUSH
72511: LD_INT 2
72513: PUSH
72514: LD_INT 30
72516: PUSH
72517: LD_INT 4
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 30
72526: PUSH
72527: LD_INT 5
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: PPUSH
72539: CALL_OW 72
72543: ST_TO_ADDR
// if barracks then
72544: LD_VAR 0 8
72548: IFFALSE 72696
// begin selected := 0 ;
72550: LD_ADDR_VAR 0 7
72554: PUSH
72555: LD_INT 0
72557: ST_TO_ADDR
// for j in barracks do
72558: LD_ADDR_VAR 0 3
72562: PUSH
72563: LD_VAR 0 8
72567: PUSH
72568: FOR_IN
72569: IFFALSE 72600
// begin if UnitsInside ( j ) < 6 then
72571: LD_VAR 0 3
72575: PPUSH
72576: CALL_OW 313
72580: PUSH
72581: LD_INT 6
72583: LESS
72584: IFFALSE 72598
// begin selected := j ;
72586: LD_ADDR_VAR 0 7
72590: PUSH
72591: LD_VAR 0 3
72595: ST_TO_ADDR
// break ;
72596: GO 72600
// end ; end ;
72598: GO 72568
72600: POP
72601: POP
// if selected then
72602: LD_VAR 0 7
72606: IFFALSE 72696
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72608: LD_ADDR_VAR 0 3
72612: PUSH
72613: LD_EXP 81
72617: PUSH
72618: LD_VAR 0 2
72622: ARRAY
72623: PPUSH
72624: LD_INT 25
72626: PUSH
72627: LD_INT 12
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PPUSH
72634: CALL_OW 72
72638: PUSH
72639: FOR_IN
72640: IFFALSE 72694
// if not IsInUnit ( j ) and not HasTask ( j ) then
72642: LD_VAR 0 3
72646: PPUSH
72647: CALL_OW 310
72651: NOT
72652: PUSH
72653: LD_VAR 0 3
72657: PPUSH
72658: CALL_OW 314
72662: NOT
72663: AND
72664: IFFALSE 72692
// begin ComEnterUnit ( j , selected ) ;
72666: LD_VAR 0 3
72670: PPUSH
72671: LD_VAR 0 7
72675: PPUSH
72676: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
72680: LD_VAR 0 3
72684: PPUSH
72685: LD_INT 15
72687: PPUSH
72688: CALL_OW 183
// end ;
72692: GO 72639
72694: POP
72695: POP
// end ; end ; end ; end ; end ;
72696: GO 72089
72698: POP
72699: POP
// end ;
72700: LD_VAR 0 1
72704: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72705: LD_INT 0
72707: PPUSH
72708: PPUSH
72709: PPUSH
72710: PPUSH
// if not mc_bases then
72711: LD_EXP 52
72715: NOT
72716: IFFALSE 72720
// exit ;
72718: GO 72898
// for i = 1 to mc_bases do
72720: LD_ADDR_VAR 0 2
72724: PUSH
72725: DOUBLE
72726: LD_INT 1
72728: DEC
72729: ST_TO_ADDR
72730: LD_EXP 52
72734: PUSH
72735: FOR_TO
72736: IFFALSE 72896
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72738: LD_ADDR_VAR 0 4
72742: PUSH
72743: LD_EXP 52
72747: PUSH
72748: LD_VAR 0 2
72752: ARRAY
72753: PPUSH
72754: LD_INT 25
72756: PUSH
72757: LD_INT 9
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PPUSH
72764: CALL_OW 72
72768: ST_TO_ADDR
// if not tmp then
72769: LD_VAR 0 4
72773: NOT
72774: IFFALSE 72778
// continue ;
72776: GO 72735
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72778: LD_EXP 78
72782: PUSH
72783: LD_VAR 0 2
72787: ARRAY
72788: PPUSH
72789: LD_INT 29
72791: PPUSH
72792: CALL_OW 325
72796: NOT
72797: PUSH
72798: LD_EXP 78
72802: PUSH
72803: LD_VAR 0 2
72807: ARRAY
72808: PPUSH
72809: LD_INT 28
72811: PPUSH
72812: CALL_OW 325
72816: NOT
72817: AND
72818: IFFALSE 72822
// continue ;
72820: GO 72735
// for j in tmp do
72822: LD_ADDR_VAR 0 3
72826: PUSH
72827: LD_VAR 0 4
72831: PUSH
72832: FOR_IN
72833: IFFALSE 72892
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72835: LD_VAR 0 3
72839: PUSH
72840: LD_EXP 55
72844: PUSH
72845: LD_VAR 0 2
72849: ARRAY
72850: PUSH
72851: LD_INT 1
72853: ARRAY
72854: IN
72855: NOT
72856: PUSH
72857: LD_VAR 0 3
72861: PUSH
72862: LD_EXP 55
72866: PUSH
72867: LD_VAR 0 2
72871: ARRAY
72872: PUSH
72873: LD_INT 2
72875: ARRAY
72876: IN
72877: NOT
72878: AND
72879: IFFALSE 72890
// ComSpaceTimeShoot ( j ) ;
72881: LD_VAR 0 3
72885: PPUSH
72886: CALL 11518 0 1
72890: GO 72832
72892: POP
72893: POP
// end ;
72894: GO 72735
72896: POP
72897: POP
// end ;
72898: LD_VAR 0 1
72902: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72903: LD_INT 0
72905: PPUSH
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
72912: PPUSH
72913: PPUSH
// if not mc_bases then
72914: LD_EXP 52
72918: NOT
72919: IFFALSE 72923
// exit ;
72921: GO 73545
// for i = 1 to mc_bases do
72923: LD_ADDR_VAR 0 2
72927: PUSH
72928: DOUBLE
72929: LD_INT 1
72931: DEC
72932: ST_TO_ADDR
72933: LD_EXP 52
72937: PUSH
72938: FOR_TO
72939: IFFALSE 73543
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72941: LD_EXP 87
72945: PUSH
72946: LD_VAR 0 2
72950: ARRAY
72951: NOT
72952: PUSH
72953: LD_INT 38
72955: PPUSH
72956: LD_EXP 78
72960: PUSH
72961: LD_VAR 0 2
72965: ARRAY
72966: PPUSH
72967: CALL_OW 321
72971: PUSH
72972: LD_INT 2
72974: NONEQUAL
72975: OR
72976: IFFALSE 72980
// continue ;
72978: GO 72938
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72980: LD_ADDR_VAR 0 8
72984: PUSH
72985: LD_EXP 52
72989: PUSH
72990: LD_VAR 0 2
72994: ARRAY
72995: PPUSH
72996: LD_INT 30
72998: PUSH
72999: LD_INT 34
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PPUSH
73006: CALL_OW 72
73010: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
73011: LD_ADDR_VAR 0 9
73015: PUSH
73016: LD_EXP 52
73020: PUSH
73021: LD_VAR 0 2
73025: ARRAY
73026: PPUSH
73027: LD_INT 25
73029: PUSH
73030: LD_INT 4
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PPUSH
73037: CALL_OW 72
73041: PPUSH
73042: LD_INT 0
73044: PPUSH
73045: CALL 50688 0 2
73049: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
73050: LD_VAR 0 9
73054: NOT
73055: PUSH
73056: LD_VAR 0 8
73060: NOT
73061: OR
73062: PUSH
73063: LD_EXP 52
73067: PUSH
73068: LD_VAR 0 2
73072: ARRAY
73073: PPUSH
73074: LD_INT 124
73076: PPUSH
73077: CALL 50688 0 2
73081: OR
73082: IFFALSE 73086
// continue ;
73084: GO 72938
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
73086: LD_EXP 88
73090: PUSH
73091: LD_VAR 0 2
73095: ARRAY
73096: PUSH
73097: LD_EXP 87
73101: PUSH
73102: LD_VAR 0 2
73106: ARRAY
73107: LESS
73108: PUSH
73109: LD_EXP 88
73113: PUSH
73114: LD_VAR 0 2
73118: ARRAY
73119: PUSH
73120: LD_VAR 0 8
73124: LESS
73125: AND
73126: IFFALSE 73541
// begin tmp := sci [ 1 ] ;
73128: LD_ADDR_VAR 0 7
73132: PUSH
73133: LD_VAR 0 9
73137: PUSH
73138: LD_INT 1
73140: ARRAY
73141: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
73142: LD_VAR 0 7
73146: PPUSH
73147: LD_INT 124
73149: PPUSH
73150: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
73154: LD_ADDR_VAR 0 3
73158: PUSH
73159: DOUBLE
73160: LD_EXP 87
73164: PUSH
73165: LD_VAR 0 2
73169: ARRAY
73170: INC
73171: ST_TO_ADDR
73172: LD_EXP 87
73176: PUSH
73177: LD_VAR 0 2
73181: ARRAY
73182: PUSH
73183: FOR_DOWNTO
73184: IFFALSE 73527
// begin if IsInUnit ( tmp ) then
73186: LD_VAR 0 7
73190: PPUSH
73191: CALL_OW 310
73195: IFFALSE 73206
// ComExitBuilding ( tmp ) ;
73197: LD_VAR 0 7
73201: PPUSH
73202: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
73206: LD_INT 35
73208: PPUSH
73209: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
73213: LD_VAR 0 7
73217: PPUSH
73218: CALL_OW 310
73222: NOT
73223: PUSH
73224: LD_VAR 0 7
73228: PPUSH
73229: CALL_OW 314
73233: NOT
73234: AND
73235: IFFALSE 73206
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
73237: LD_ADDR_VAR 0 6
73241: PUSH
73242: LD_VAR 0 7
73246: PPUSH
73247: CALL_OW 250
73251: PUSH
73252: LD_VAR 0 7
73256: PPUSH
73257: CALL_OW 251
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73266: LD_INT 35
73268: PPUSH
73269: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
73273: LD_ADDR_VAR 0 4
73277: PUSH
73278: LD_EXP 87
73282: PUSH
73283: LD_VAR 0 2
73287: ARRAY
73288: PUSH
73289: LD_VAR 0 3
73293: ARRAY
73294: PUSH
73295: LD_INT 1
73297: ARRAY
73298: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
73299: LD_ADDR_VAR 0 5
73303: PUSH
73304: LD_EXP 87
73308: PUSH
73309: LD_VAR 0 2
73313: ARRAY
73314: PUSH
73315: LD_VAR 0 3
73319: ARRAY
73320: PUSH
73321: LD_INT 2
73323: ARRAY
73324: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
73325: LD_VAR 0 7
73329: PPUSH
73330: LD_INT 10
73332: PPUSH
73333: CALL 20021 0 2
73337: PUSH
73338: LD_INT 4
73340: ARRAY
73341: IFFALSE 73379
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
73343: LD_VAR 0 7
73347: PPUSH
73348: LD_VAR 0 6
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PPUSH
73357: LD_VAR 0 6
73361: PUSH
73362: LD_INT 2
73364: ARRAY
73365: PPUSH
73366: CALL_OW 111
// wait ( 0 0$10 ) ;
73370: LD_INT 350
73372: PPUSH
73373: CALL_OW 67
// end else
73377: GO 73405
// begin ComMoveXY ( tmp , x , y ) ;
73379: LD_VAR 0 7
73383: PPUSH
73384: LD_VAR 0 4
73388: PPUSH
73389: LD_VAR 0 5
73393: PPUSH
73394: CALL_OW 111
// wait ( 0 0$3 ) ;
73398: LD_INT 105
73400: PPUSH
73401: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
73405: LD_VAR 0 7
73409: PPUSH
73410: LD_VAR 0 4
73414: PPUSH
73415: LD_VAR 0 5
73419: PPUSH
73420: CALL_OW 307
73424: IFFALSE 73266
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
73426: LD_VAR 0 7
73430: PPUSH
73431: LD_VAR 0 4
73435: PPUSH
73436: LD_VAR 0 5
73440: PPUSH
73441: LD_VAR 0 8
73445: PUSH
73446: LD_VAR 0 3
73450: ARRAY
73451: PPUSH
73452: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
73456: LD_INT 35
73458: PPUSH
73459: CALL_OW 67
// until not HasTask ( tmp ) ;
73463: LD_VAR 0 7
73467: PPUSH
73468: CALL_OW 314
73472: NOT
73473: IFFALSE 73456
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
73475: LD_ADDR_EXP 88
73479: PUSH
73480: LD_EXP 88
73484: PPUSH
73485: LD_VAR 0 2
73489: PUSH
73490: LD_EXP 88
73494: PUSH
73495: LD_VAR 0 2
73499: ARRAY
73500: PUSH
73501: LD_INT 1
73503: PLUS
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PPUSH
73509: LD_VAR 0 8
73513: PUSH
73514: LD_VAR 0 3
73518: ARRAY
73519: PPUSH
73520: CALL 17428 0 3
73524: ST_TO_ADDR
// end ;
73525: GO 73183
73527: POP
73528: POP
// MC_Reset ( i , 124 ) ;
73529: LD_VAR 0 2
73533: PPUSH
73534: LD_INT 124
73536: PPUSH
73537: CALL 57390 0 2
// end ; end ;
73541: GO 72938
73543: POP
73544: POP
// end ;
73545: LD_VAR 0 1
73549: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73550: LD_INT 0
73552: PPUSH
73553: PPUSH
73554: PPUSH
// if not mc_bases then
73555: LD_EXP 52
73559: NOT
73560: IFFALSE 73564
// exit ;
73562: GO 74170
// for i = 1 to mc_bases do
73564: LD_ADDR_VAR 0 2
73568: PUSH
73569: DOUBLE
73570: LD_INT 1
73572: DEC
73573: ST_TO_ADDR
73574: LD_EXP 52
73578: PUSH
73579: FOR_TO
73580: IFFALSE 74168
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73582: LD_ADDR_VAR 0 3
73586: PUSH
73587: LD_EXP 52
73591: PUSH
73592: LD_VAR 0 2
73596: ARRAY
73597: PPUSH
73598: LD_INT 25
73600: PUSH
73601: LD_INT 4
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PPUSH
73608: CALL_OW 72
73612: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
73613: LD_VAR 0 3
73617: NOT
73618: PUSH
73619: LD_EXP 89
73623: PUSH
73624: LD_VAR 0 2
73628: ARRAY
73629: NOT
73630: OR
73631: PUSH
73632: LD_EXP 52
73636: PUSH
73637: LD_VAR 0 2
73641: ARRAY
73642: PPUSH
73643: LD_INT 2
73645: PUSH
73646: LD_INT 30
73648: PUSH
73649: LD_INT 0
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 30
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: PPUSH
73671: CALL_OW 72
73675: NOT
73676: OR
73677: IFFALSE 73727
// begin if mc_deposits_finder [ i ] then
73679: LD_EXP 90
73683: PUSH
73684: LD_VAR 0 2
73688: ARRAY
73689: IFFALSE 73725
// begin MC_Reset ( i , 125 ) ;
73691: LD_VAR 0 2
73695: PPUSH
73696: LD_INT 125
73698: PPUSH
73699: CALL 57390 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73703: LD_ADDR_EXP 90
73707: PUSH
73708: LD_EXP 90
73712: PPUSH
73713: LD_VAR 0 2
73717: PPUSH
73718: EMPTY
73719: PPUSH
73720: CALL_OW 1
73724: ST_TO_ADDR
// end ; continue ;
73725: GO 73579
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73727: LD_EXP 89
73731: PUSH
73732: LD_VAR 0 2
73736: ARRAY
73737: PUSH
73738: LD_INT 1
73740: ARRAY
73741: PUSH
73742: LD_INT 3
73744: ARRAY
73745: PUSH
73746: LD_INT 1
73748: EQUAL
73749: PUSH
73750: LD_INT 20
73752: PPUSH
73753: LD_EXP 78
73757: PUSH
73758: LD_VAR 0 2
73762: ARRAY
73763: PPUSH
73764: CALL_OW 321
73768: PUSH
73769: LD_INT 2
73771: NONEQUAL
73772: AND
73773: IFFALSE 73823
// begin if mc_deposits_finder [ i ] then
73775: LD_EXP 90
73779: PUSH
73780: LD_VAR 0 2
73784: ARRAY
73785: IFFALSE 73821
// begin MC_Reset ( i , 125 ) ;
73787: LD_VAR 0 2
73791: PPUSH
73792: LD_INT 125
73794: PPUSH
73795: CALL 57390 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73799: LD_ADDR_EXP 90
73803: PUSH
73804: LD_EXP 90
73808: PPUSH
73809: LD_VAR 0 2
73813: PPUSH
73814: EMPTY
73815: PPUSH
73816: CALL_OW 1
73820: ST_TO_ADDR
// end ; continue ;
73821: GO 73579
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73823: LD_EXP 89
73827: PUSH
73828: LD_VAR 0 2
73832: ARRAY
73833: PUSH
73834: LD_INT 1
73836: ARRAY
73837: PUSH
73838: LD_INT 1
73840: ARRAY
73841: PPUSH
73842: LD_EXP 89
73846: PUSH
73847: LD_VAR 0 2
73851: ARRAY
73852: PUSH
73853: LD_INT 1
73855: ARRAY
73856: PUSH
73857: LD_INT 2
73859: ARRAY
73860: PPUSH
73861: LD_EXP 78
73865: PUSH
73866: LD_VAR 0 2
73870: ARRAY
73871: PPUSH
73872: CALL_OW 440
73876: IFFALSE 73919
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73878: LD_ADDR_EXP 89
73882: PUSH
73883: LD_EXP 89
73887: PPUSH
73888: LD_VAR 0 2
73892: PPUSH
73893: LD_EXP 89
73897: PUSH
73898: LD_VAR 0 2
73902: ARRAY
73903: PPUSH
73904: LD_INT 1
73906: PPUSH
73907: CALL_OW 3
73911: PPUSH
73912: CALL_OW 1
73916: ST_TO_ADDR
73917: GO 74166
// begin if not mc_deposits_finder [ i ] then
73919: LD_EXP 90
73923: PUSH
73924: LD_VAR 0 2
73928: ARRAY
73929: NOT
73930: IFFALSE 73982
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73932: LD_ADDR_EXP 90
73936: PUSH
73937: LD_EXP 90
73941: PPUSH
73942: LD_VAR 0 2
73946: PPUSH
73947: LD_VAR 0 3
73951: PUSH
73952: LD_INT 1
73954: ARRAY
73955: PUSH
73956: EMPTY
73957: LIST
73958: PPUSH
73959: CALL_OW 1
73963: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73964: LD_VAR 0 3
73968: PUSH
73969: LD_INT 1
73971: ARRAY
73972: PPUSH
73973: LD_INT 125
73975: PPUSH
73976: CALL_OW 109
// end else
73980: GO 74166
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73982: LD_EXP 90
73986: PUSH
73987: LD_VAR 0 2
73991: ARRAY
73992: PUSH
73993: LD_INT 1
73995: ARRAY
73996: PPUSH
73997: CALL_OW 310
74001: IFFALSE 74024
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
74003: LD_EXP 90
74007: PUSH
74008: LD_VAR 0 2
74012: ARRAY
74013: PUSH
74014: LD_INT 1
74016: ARRAY
74017: PPUSH
74018: CALL_OW 122
74022: GO 74166
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74024: LD_EXP 90
74028: PUSH
74029: LD_VAR 0 2
74033: ARRAY
74034: PUSH
74035: LD_INT 1
74037: ARRAY
74038: PPUSH
74039: CALL_OW 314
74043: NOT
74044: PUSH
74045: LD_EXP 90
74049: PUSH
74050: LD_VAR 0 2
74054: ARRAY
74055: PUSH
74056: LD_INT 1
74058: ARRAY
74059: PPUSH
74060: LD_EXP 89
74064: PUSH
74065: LD_VAR 0 2
74069: ARRAY
74070: PUSH
74071: LD_INT 1
74073: ARRAY
74074: PUSH
74075: LD_INT 1
74077: ARRAY
74078: PPUSH
74079: LD_EXP 89
74083: PUSH
74084: LD_VAR 0 2
74088: ARRAY
74089: PUSH
74090: LD_INT 1
74092: ARRAY
74093: PUSH
74094: LD_INT 2
74096: ARRAY
74097: PPUSH
74098: CALL_OW 297
74102: PUSH
74103: LD_INT 6
74105: GREATER
74106: AND
74107: IFFALSE 74166
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74109: LD_EXP 90
74113: PUSH
74114: LD_VAR 0 2
74118: ARRAY
74119: PUSH
74120: LD_INT 1
74122: ARRAY
74123: PPUSH
74124: LD_EXP 89
74128: PUSH
74129: LD_VAR 0 2
74133: ARRAY
74134: PUSH
74135: LD_INT 1
74137: ARRAY
74138: PUSH
74139: LD_INT 1
74141: ARRAY
74142: PPUSH
74143: LD_EXP 89
74147: PUSH
74148: LD_VAR 0 2
74152: ARRAY
74153: PUSH
74154: LD_INT 1
74156: ARRAY
74157: PUSH
74158: LD_INT 2
74160: ARRAY
74161: PPUSH
74162: CALL_OW 111
// end ; end ; end ;
74166: GO 73579
74168: POP
74169: POP
// end ;
74170: LD_VAR 0 1
74174: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
74175: LD_INT 0
74177: PPUSH
74178: PPUSH
74179: PPUSH
74180: PPUSH
74181: PPUSH
74182: PPUSH
74183: PPUSH
74184: PPUSH
74185: PPUSH
74186: PPUSH
74187: PPUSH
// if not mc_bases then
74188: LD_EXP 52
74192: NOT
74193: IFFALSE 74197
// exit ;
74195: GO 74921
// for i = 1 to mc_bases do
74197: LD_ADDR_VAR 0 2
74201: PUSH
74202: DOUBLE
74203: LD_INT 1
74205: DEC
74206: ST_TO_ADDR
74207: LD_EXP 52
74211: PUSH
74212: FOR_TO
74213: IFFALSE 74919
// begin if not mc_bases [ i ] then
74215: LD_EXP 52
74219: PUSH
74220: LD_VAR 0 2
74224: ARRAY
74225: NOT
74226: IFFALSE 74230
// continue ;
74228: GO 74212
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74230: LD_ADDR_VAR 0 7
74234: PUSH
74235: LD_EXP 52
74239: PUSH
74240: LD_VAR 0 2
74244: ARRAY
74245: PUSH
74246: LD_INT 1
74248: ARRAY
74249: PPUSH
74250: CALL_OW 248
74254: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
74255: LD_VAR 0 7
74259: PUSH
74260: LD_INT 3
74262: EQUAL
74263: PUSH
74264: LD_EXP 71
74268: PUSH
74269: LD_VAR 0 2
74273: ARRAY
74274: PUSH
74275: LD_EXP 74
74279: PUSH
74280: LD_VAR 0 2
74284: ARRAY
74285: UNION
74286: PPUSH
74287: LD_INT 33
74289: PUSH
74290: LD_INT 2
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PPUSH
74297: CALL_OW 72
74301: NOT
74302: OR
74303: IFFALSE 74307
// continue ;
74305: GO 74212
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74307: LD_ADDR_VAR 0 9
74311: PUSH
74312: LD_EXP 52
74316: PUSH
74317: LD_VAR 0 2
74321: ARRAY
74322: PPUSH
74323: LD_INT 30
74325: PUSH
74326: LD_INT 36
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PPUSH
74333: CALL_OW 72
74337: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
74338: LD_ADDR_VAR 0 10
74342: PUSH
74343: LD_EXP 71
74347: PUSH
74348: LD_VAR 0 2
74352: ARRAY
74353: PPUSH
74354: LD_INT 34
74356: PUSH
74357: LD_INT 31
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PPUSH
74364: CALL_OW 72
74368: ST_TO_ADDR
// if not cts and not mcts then
74369: LD_VAR 0 9
74373: NOT
74374: PUSH
74375: LD_VAR 0 10
74379: NOT
74380: AND
74381: IFFALSE 74385
// continue ;
74383: GO 74212
// x := cts ;
74385: LD_ADDR_VAR 0 11
74389: PUSH
74390: LD_VAR 0 9
74394: ST_TO_ADDR
// if not x then
74395: LD_VAR 0 11
74399: NOT
74400: IFFALSE 74412
// x := mcts ;
74402: LD_ADDR_VAR 0 11
74406: PUSH
74407: LD_VAR 0 10
74411: ST_TO_ADDR
// if mc_remote_driver [ i ] then
74412: LD_EXP 92
74416: PUSH
74417: LD_VAR 0 2
74421: ARRAY
74422: IFFALSE 74691
// for j in mc_remote_driver [ i ] do
74424: LD_ADDR_VAR 0 3
74428: PUSH
74429: LD_EXP 92
74433: PUSH
74434: LD_VAR 0 2
74438: ARRAY
74439: PUSH
74440: FOR_IN
74441: IFFALSE 74689
// begin if GetClass ( j ) <> 3 then
74443: LD_VAR 0 3
74447: PPUSH
74448: CALL_OW 257
74452: PUSH
74453: LD_INT 3
74455: NONEQUAL
74456: IFFALSE 74509
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
74458: LD_ADDR_EXP 92
74462: PUSH
74463: LD_EXP 92
74467: PPUSH
74468: LD_VAR 0 2
74472: PPUSH
74473: LD_EXP 92
74477: PUSH
74478: LD_VAR 0 2
74482: ARRAY
74483: PUSH
74484: LD_VAR 0 3
74488: DIFF
74489: PPUSH
74490: CALL_OW 1
74494: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74495: LD_VAR 0 3
74499: PPUSH
74500: LD_INT 0
74502: PPUSH
74503: CALL_OW 109
// continue ;
74507: GO 74440
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
74509: LD_VAR 0 3
74513: PPUSH
74514: CALL_OW 310
74518: NOT
74519: PUSH
74520: LD_VAR 0 3
74524: PPUSH
74525: CALL_OW 310
74529: PPUSH
74530: CALL_OW 266
74534: PUSH
74535: LD_INT 36
74537: NONEQUAL
74538: PUSH
74539: LD_VAR 0 3
74543: PPUSH
74544: CALL 50776 0 1
74548: NOT
74549: AND
74550: OR
74551: IFFALSE 74687
// begin if IsInUnit ( j ) then
74553: LD_VAR 0 3
74557: PPUSH
74558: CALL_OW 310
74562: IFFALSE 74573
// ComExitBuilding ( j ) ;
74564: LD_VAR 0 3
74568: PPUSH
74569: CALL_OW 122
// ct := 0 ;
74573: LD_ADDR_VAR 0 8
74577: PUSH
74578: LD_INT 0
74580: ST_TO_ADDR
// for k in x do
74581: LD_ADDR_VAR 0 4
74585: PUSH
74586: LD_VAR 0 11
74590: PUSH
74591: FOR_IN
74592: IFFALSE 74665
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
74594: LD_VAR 0 4
74598: PPUSH
74599: CALL_OW 264
74603: PUSH
74604: LD_INT 31
74606: EQUAL
74607: PUSH
74608: LD_VAR 0 4
74612: PPUSH
74613: CALL_OW 311
74617: NOT
74618: AND
74619: PUSH
74620: LD_VAR 0 4
74624: PPUSH
74625: CALL_OW 266
74629: PUSH
74630: LD_INT 36
74632: EQUAL
74633: PUSH
74634: LD_VAR 0 4
74638: PPUSH
74639: CALL_OW 313
74643: PUSH
74644: LD_INT 3
74646: LESS
74647: AND
74648: OR
74649: IFFALSE 74663
// begin ct := k ;
74651: LD_ADDR_VAR 0 8
74655: PUSH
74656: LD_VAR 0 4
74660: ST_TO_ADDR
// break ;
74661: GO 74665
// end ;
74663: GO 74591
74665: POP
74666: POP
// if ct then
74667: LD_VAR 0 8
74671: IFFALSE 74687
// ComEnterUnit ( j , ct ) ;
74673: LD_VAR 0 3
74677: PPUSH
74678: LD_VAR 0 8
74682: PPUSH
74683: CALL_OW 120
// end ; end ;
74687: GO 74440
74689: POP
74690: POP
// places := 0 ;
74691: LD_ADDR_VAR 0 5
74695: PUSH
74696: LD_INT 0
74698: ST_TO_ADDR
// for j = 1 to x do
74699: LD_ADDR_VAR 0 3
74703: PUSH
74704: DOUBLE
74705: LD_INT 1
74707: DEC
74708: ST_TO_ADDR
74709: LD_VAR 0 11
74713: PUSH
74714: FOR_TO
74715: IFFALSE 74770
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74717: LD_VAR 0 11
74721: PUSH
74722: LD_VAR 0 3
74726: ARRAY
74727: PPUSH
74728: CALL_OW 264
74732: PUSH
74733: LD_INT 31
74735: EQUAL
74736: IFFALSE 74754
// places := places + 1 else
74738: LD_ADDR_VAR 0 5
74742: PUSH
74743: LD_VAR 0 5
74747: PUSH
74748: LD_INT 1
74750: PLUS
74751: ST_TO_ADDR
74752: GO 74768
// places := places + 3 ;
74754: LD_ADDR_VAR 0 5
74758: PUSH
74759: LD_VAR 0 5
74763: PUSH
74764: LD_INT 3
74766: PLUS
74767: ST_TO_ADDR
74768: GO 74714
74770: POP
74771: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74772: LD_ADDR_VAR 0 6
74776: PUSH
74777: LD_EXP 52
74781: PUSH
74782: LD_VAR 0 2
74786: ARRAY
74787: PPUSH
74788: LD_INT 25
74790: PUSH
74791: LD_INT 3
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PPUSH
74798: CALL_OW 72
74802: PUSH
74803: LD_EXP 92
74807: PUSH
74808: LD_VAR 0 2
74812: ARRAY
74813: DIFF
74814: PPUSH
74815: LD_INT 3
74817: PPUSH
74818: CALL 51676 0 2
74822: ST_TO_ADDR
// if not tmp then
74823: LD_VAR 0 6
74827: NOT
74828: IFFALSE 74832
// continue ;
74830: GO 74212
// places := places - mc_remote_driver [ i ] ;
74832: LD_ADDR_VAR 0 5
74836: PUSH
74837: LD_VAR 0 5
74841: PUSH
74842: LD_EXP 92
74846: PUSH
74847: LD_VAR 0 2
74851: ARRAY
74852: MINUS
74853: ST_TO_ADDR
// if places then
74854: LD_VAR 0 5
74858: IFFALSE 74917
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74860: LD_ADDR_EXP 92
74864: PUSH
74865: LD_EXP 92
74869: PPUSH
74870: LD_VAR 0 2
74874: PPUSH
74875: LD_EXP 92
74879: PUSH
74880: LD_VAR 0 2
74884: ARRAY
74885: PUSH
74886: LD_VAR 0 6
74890: PUSH
74891: LD_INT 1
74893: ARRAY
74894: UNION
74895: PPUSH
74896: CALL_OW 1
74900: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74901: LD_VAR 0 6
74905: PUSH
74906: LD_INT 1
74908: ARRAY
74909: PPUSH
74910: LD_INT 126
74912: PPUSH
74913: CALL_OW 109
// end ; end ;
74917: GO 74212
74919: POP
74920: POP
// end ;
74921: LD_VAR 0 1
74925: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74926: LD_INT 0
74928: PPUSH
74929: PPUSH
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74934: LD_VAR 0 1
74938: NOT
74939: PUSH
74940: LD_VAR 0 2
74944: NOT
74945: OR
74946: PUSH
74947: LD_VAR 0 3
74951: NOT
74952: OR
74953: PUSH
74954: LD_VAR 0 4
74958: PUSH
74959: LD_INT 1
74961: PUSH
74962: LD_INT 2
74964: PUSH
74965: LD_INT 3
74967: PUSH
74968: LD_INT 4
74970: PUSH
74971: LD_INT 5
74973: PUSH
74974: LD_INT 8
74976: PUSH
74977: LD_INT 9
74979: PUSH
74980: LD_INT 15
74982: PUSH
74983: LD_INT 16
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: IN
74997: NOT
74998: OR
74999: IFFALSE 75003
// exit ;
75001: GO 75903
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
75003: LD_ADDR_VAR 0 2
75007: PUSH
75008: LD_VAR 0 2
75012: PPUSH
75013: LD_INT 21
75015: PUSH
75016: LD_INT 3
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: LD_INT 24
75025: PUSH
75026: LD_INT 250
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PPUSH
75037: CALL_OW 72
75041: ST_TO_ADDR
// case class of 1 , 15 :
75042: LD_VAR 0 4
75046: PUSH
75047: LD_INT 1
75049: DOUBLE
75050: EQUAL
75051: IFTRUE 75061
75053: LD_INT 15
75055: DOUBLE
75056: EQUAL
75057: IFTRUE 75061
75059: GO 75146
75061: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75062: LD_ADDR_VAR 0 8
75066: PUSH
75067: LD_VAR 0 2
75071: PPUSH
75072: LD_INT 2
75074: PUSH
75075: LD_INT 30
75077: PUSH
75078: LD_INT 32
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 30
75087: PUSH
75088: LD_INT 31
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: LIST
75099: PPUSH
75100: CALL_OW 72
75104: PUSH
75105: LD_VAR 0 2
75109: PPUSH
75110: LD_INT 2
75112: PUSH
75113: LD_INT 30
75115: PUSH
75116: LD_INT 4
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 30
75125: PUSH
75126: LD_INT 5
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: LIST
75137: PPUSH
75138: CALL_OW 72
75142: ADD
75143: ST_TO_ADDR
75144: GO 75392
75146: LD_INT 2
75148: DOUBLE
75149: EQUAL
75150: IFTRUE 75160
75152: LD_INT 16
75154: DOUBLE
75155: EQUAL
75156: IFTRUE 75160
75158: GO 75206
75160: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75161: LD_ADDR_VAR 0 8
75165: PUSH
75166: LD_VAR 0 2
75170: PPUSH
75171: LD_INT 2
75173: PUSH
75174: LD_INT 30
75176: PUSH
75177: LD_INT 0
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 30
75186: PUSH
75187: LD_INT 1
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: LIST
75198: PPUSH
75199: CALL_OW 72
75203: ST_TO_ADDR
75204: GO 75392
75206: LD_INT 3
75208: DOUBLE
75209: EQUAL
75210: IFTRUE 75214
75212: GO 75260
75214: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75215: LD_ADDR_VAR 0 8
75219: PUSH
75220: LD_VAR 0 2
75224: PPUSH
75225: LD_INT 2
75227: PUSH
75228: LD_INT 30
75230: PUSH
75231: LD_INT 2
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 30
75240: PUSH
75241: LD_INT 3
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: PPUSH
75253: CALL_OW 72
75257: ST_TO_ADDR
75258: GO 75392
75260: LD_INT 4
75262: DOUBLE
75263: EQUAL
75264: IFTRUE 75268
75266: GO 75325
75268: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75269: LD_ADDR_VAR 0 8
75273: PUSH
75274: LD_VAR 0 2
75278: PPUSH
75279: LD_INT 2
75281: PUSH
75282: LD_INT 30
75284: PUSH
75285: LD_INT 6
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 30
75294: PUSH
75295: LD_INT 7
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 30
75304: PUSH
75305: LD_INT 8
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: PPUSH
75318: CALL_OW 72
75322: ST_TO_ADDR
75323: GO 75392
75325: LD_INT 5
75327: DOUBLE
75328: EQUAL
75329: IFTRUE 75345
75331: LD_INT 8
75333: DOUBLE
75334: EQUAL
75335: IFTRUE 75345
75337: LD_INT 9
75339: DOUBLE
75340: EQUAL
75341: IFTRUE 75345
75343: GO 75391
75345: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75346: LD_ADDR_VAR 0 8
75350: PUSH
75351: LD_VAR 0 2
75355: PPUSH
75356: LD_INT 2
75358: PUSH
75359: LD_INT 30
75361: PUSH
75362: LD_INT 4
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 30
75371: PUSH
75372: LD_INT 5
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: LIST
75383: PPUSH
75384: CALL_OW 72
75388: ST_TO_ADDR
75389: GO 75392
75391: POP
// if not tmp then
75392: LD_VAR 0 8
75396: NOT
75397: IFFALSE 75401
// exit ;
75399: GO 75903
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75401: LD_VAR 0 4
75405: PUSH
75406: LD_INT 1
75408: PUSH
75409: LD_INT 15
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: IN
75416: PUSH
75417: LD_EXP 61
75421: PUSH
75422: LD_VAR 0 1
75426: ARRAY
75427: AND
75428: IFFALSE 75584
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75430: LD_ADDR_VAR 0 9
75434: PUSH
75435: LD_EXP 61
75439: PUSH
75440: LD_VAR 0 1
75444: ARRAY
75445: PUSH
75446: LD_INT 1
75448: ARRAY
75449: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75450: LD_VAR 0 9
75454: PUSH
75455: LD_EXP 62
75459: PUSH
75460: LD_VAR 0 1
75464: ARRAY
75465: IN
75466: NOT
75467: IFFALSE 75582
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75469: LD_ADDR_EXP 62
75473: PUSH
75474: LD_EXP 62
75478: PPUSH
75479: LD_VAR 0 1
75483: PUSH
75484: LD_EXP 62
75488: PUSH
75489: LD_VAR 0 1
75493: ARRAY
75494: PUSH
75495: LD_INT 1
75497: PLUS
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: PPUSH
75503: LD_VAR 0 9
75507: PPUSH
75508: CALL 17428 0 3
75512: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75513: LD_ADDR_EXP 61
75517: PUSH
75518: LD_EXP 61
75522: PPUSH
75523: LD_VAR 0 1
75527: PPUSH
75528: LD_EXP 61
75532: PUSH
75533: LD_VAR 0 1
75537: ARRAY
75538: PUSH
75539: LD_VAR 0 9
75543: DIFF
75544: PPUSH
75545: CALL_OW 1
75549: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75550: LD_VAR 0 3
75554: PPUSH
75555: LD_EXP 62
75559: PUSH
75560: LD_VAR 0 1
75564: ARRAY
75565: PUSH
75566: LD_EXP 62
75570: PUSH
75571: LD_VAR 0 1
75575: ARRAY
75576: ARRAY
75577: PPUSH
75578: CALL_OW 120
// end ; exit ;
75582: GO 75903
// end ; if tmp > 1 then
75584: LD_VAR 0 8
75588: PUSH
75589: LD_INT 1
75591: GREATER
75592: IFFALSE 75696
// for i = 2 to tmp do
75594: LD_ADDR_VAR 0 6
75598: PUSH
75599: DOUBLE
75600: LD_INT 2
75602: DEC
75603: ST_TO_ADDR
75604: LD_VAR 0 8
75608: PUSH
75609: FOR_TO
75610: IFFALSE 75694
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75612: LD_VAR 0 8
75616: PUSH
75617: LD_VAR 0 6
75621: ARRAY
75622: PPUSH
75623: CALL_OW 461
75627: PUSH
75628: LD_INT 6
75630: EQUAL
75631: IFFALSE 75692
// begin x := tmp [ i ] ;
75633: LD_ADDR_VAR 0 9
75637: PUSH
75638: LD_VAR 0 8
75642: PUSH
75643: LD_VAR 0 6
75647: ARRAY
75648: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75649: LD_ADDR_VAR 0 8
75653: PUSH
75654: LD_VAR 0 8
75658: PPUSH
75659: LD_VAR 0 6
75663: PPUSH
75664: CALL_OW 3
75668: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75669: LD_ADDR_VAR 0 8
75673: PUSH
75674: LD_VAR 0 8
75678: PPUSH
75679: LD_INT 1
75681: PPUSH
75682: LD_VAR 0 9
75686: PPUSH
75687: CALL_OW 2
75691: ST_TO_ADDR
// end ;
75692: GO 75609
75694: POP
75695: POP
// for i in tmp do
75696: LD_ADDR_VAR 0 6
75700: PUSH
75701: LD_VAR 0 8
75705: PUSH
75706: FOR_IN
75707: IFFALSE 75776
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75709: LD_VAR 0 6
75713: PPUSH
75714: CALL_OW 313
75718: PUSH
75719: LD_INT 6
75721: LESS
75722: PUSH
75723: LD_VAR 0 6
75727: PPUSH
75728: CALL_OW 266
75732: PUSH
75733: LD_INT 31
75735: PUSH
75736: LD_INT 32
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: IN
75743: NOT
75744: AND
75745: PUSH
75746: LD_VAR 0 6
75750: PPUSH
75751: CALL_OW 313
75755: PUSH
75756: LD_INT 0
75758: EQUAL
75759: OR
75760: IFFALSE 75774
// begin j := i ;
75762: LD_ADDR_VAR 0 7
75766: PUSH
75767: LD_VAR 0 6
75771: ST_TO_ADDR
// break ;
75772: GO 75776
// end ; end ;
75774: GO 75706
75776: POP
75777: POP
// if j then
75778: LD_VAR 0 7
75782: IFFALSE 75800
// ComEnterUnit ( unit , j ) else
75784: LD_VAR 0 3
75788: PPUSH
75789: LD_VAR 0 7
75793: PPUSH
75794: CALL_OW 120
75798: GO 75903
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75800: LD_ADDR_VAR 0 10
75804: PUSH
75805: LD_VAR 0 2
75809: PPUSH
75810: LD_INT 2
75812: PUSH
75813: LD_INT 30
75815: PUSH
75816: LD_INT 0
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 30
75825: PUSH
75826: LD_INT 1
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: LIST
75837: PPUSH
75838: CALL_OW 72
75842: ST_TO_ADDR
// if depot then
75843: LD_VAR 0 10
75847: IFFALSE 75903
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75849: LD_ADDR_VAR 0 10
75853: PUSH
75854: LD_VAR 0 10
75858: PPUSH
75859: LD_VAR 0 3
75863: PPUSH
75864: CALL_OW 74
75868: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75869: LD_VAR 0 3
75873: PPUSH
75874: LD_VAR 0 10
75878: PPUSH
75879: CALL_OW 296
75883: PUSH
75884: LD_INT 10
75886: GREATER
75887: IFFALSE 75903
// ComStandNearbyBuilding ( unit , depot ) ;
75889: LD_VAR 0 3
75893: PPUSH
75894: LD_VAR 0 10
75898: PPUSH
75899: CALL 12135 0 2
// end ; end ; end ;
75903: LD_VAR 0 5
75907: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75908: LD_INT 0
75910: PPUSH
75911: PPUSH
75912: PPUSH
75913: PPUSH
// if not mc_bases then
75914: LD_EXP 52
75918: NOT
75919: IFFALSE 75923
// exit ;
75921: GO 76162
// for i = 1 to mc_bases do
75923: LD_ADDR_VAR 0 2
75927: PUSH
75928: DOUBLE
75929: LD_INT 1
75931: DEC
75932: ST_TO_ADDR
75933: LD_EXP 52
75937: PUSH
75938: FOR_TO
75939: IFFALSE 76160
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75941: LD_ADDR_VAR 0 4
75945: PUSH
75946: LD_EXP 52
75950: PUSH
75951: LD_VAR 0 2
75955: ARRAY
75956: PPUSH
75957: LD_INT 21
75959: PUSH
75960: LD_INT 1
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PPUSH
75967: CALL_OW 72
75971: PUSH
75972: LD_EXP 81
75976: PUSH
75977: LD_VAR 0 2
75981: ARRAY
75982: UNION
75983: ST_TO_ADDR
// if not tmp then
75984: LD_VAR 0 4
75988: NOT
75989: IFFALSE 75993
// continue ;
75991: GO 75938
// for j in tmp do
75993: LD_ADDR_VAR 0 3
75997: PUSH
75998: LD_VAR 0 4
76002: PUSH
76003: FOR_IN
76004: IFFALSE 76156
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
76006: LD_VAR 0 3
76010: PPUSH
76011: CALL_OW 110
76015: NOT
76016: PUSH
76017: LD_VAR 0 3
76021: PPUSH
76022: CALL_OW 314
76026: NOT
76027: AND
76028: PUSH
76029: LD_VAR 0 3
76033: PPUSH
76034: CALL_OW 311
76038: NOT
76039: AND
76040: PUSH
76041: LD_VAR 0 3
76045: PPUSH
76046: CALL_OW 310
76050: NOT
76051: AND
76052: PUSH
76053: LD_VAR 0 3
76057: PUSH
76058: LD_EXP 55
76062: PUSH
76063: LD_VAR 0 2
76067: ARRAY
76068: PUSH
76069: LD_INT 1
76071: ARRAY
76072: IN
76073: NOT
76074: AND
76075: PUSH
76076: LD_VAR 0 3
76080: PUSH
76081: LD_EXP 55
76085: PUSH
76086: LD_VAR 0 2
76090: ARRAY
76091: PUSH
76092: LD_INT 2
76094: ARRAY
76095: IN
76096: NOT
76097: AND
76098: PUSH
76099: LD_VAR 0 3
76103: PUSH
76104: LD_EXP 64
76108: PUSH
76109: LD_VAR 0 2
76113: ARRAY
76114: IN
76115: NOT
76116: AND
76117: IFFALSE 76154
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76119: LD_VAR 0 2
76123: PPUSH
76124: LD_EXP 52
76128: PUSH
76129: LD_VAR 0 2
76133: ARRAY
76134: PPUSH
76135: LD_VAR 0 3
76139: PPUSH
76140: LD_VAR 0 3
76144: PPUSH
76145: CALL_OW 257
76149: PPUSH
76150: CALL 74926 0 4
// end ;
76154: GO 76003
76156: POP
76157: POP
// end ;
76158: GO 75938
76160: POP
76161: POP
// end ;
76162: LD_VAR 0 1
76166: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76167: LD_INT 0
76169: PPUSH
76170: PPUSH
76171: PPUSH
76172: PPUSH
76173: PPUSH
76174: PPUSH
// if not mc_bases [ base ] then
76175: LD_EXP 52
76179: PUSH
76180: LD_VAR 0 1
76184: ARRAY
76185: NOT
76186: IFFALSE 76190
// exit ;
76188: GO 76372
// tmp := [ ] ;
76190: LD_ADDR_VAR 0 6
76194: PUSH
76195: EMPTY
76196: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76197: LD_ADDR_VAR 0 7
76201: PUSH
76202: LD_VAR 0 3
76206: PPUSH
76207: LD_INT 0
76209: PPUSH
76210: CALL_OW 517
76214: ST_TO_ADDR
// if not list then
76215: LD_VAR 0 7
76219: NOT
76220: IFFALSE 76224
// exit ;
76222: GO 76372
// for i = 1 to amount do
76224: LD_ADDR_VAR 0 5
76228: PUSH
76229: DOUBLE
76230: LD_INT 1
76232: DEC
76233: ST_TO_ADDR
76234: LD_VAR 0 2
76238: PUSH
76239: FOR_TO
76240: IFFALSE 76320
// begin x := rand ( 1 , list [ 1 ] ) ;
76242: LD_ADDR_VAR 0 8
76246: PUSH
76247: LD_INT 1
76249: PPUSH
76250: LD_VAR 0 7
76254: PUSH
76255: LD_INT 1
76257: ARRAY
76258: PPUSH
76259: CALL_OW 12
76263: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76264: LD_ADDR_VAR 0 6
76268: PUSH
76269: LD_VAR 0 6
76273: PPUSH
76274: LD_VAR 0 5
76278: PPUSH
76279: LD_VAR 0 7
76283: PUSH
76284: LD_INT 1
76286: ARRAY
76287: PUSH
76288: LD_VAR 0 8
76292: ARRAY
76293: PUSH
76294: LD_VAR 0 7
76298: PUSH
76299: LD_INT 2
76301: ARRAY
76302: PUSH
76303: LD_VAR 0 8
76307: ARRAY
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PPUSH
76313: CALL_OW 1
76317: ST_TO_ADDR
// end ;
76318: GO 76239
76320: POP
76321: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76322: LD_ADDR_EXP 65
76326: PUSH
76327: LD_EXP 65
76331: PPUSH
76332: LD_VAR 0 1
76336: PPUSH
76337: LD_VAR 0 6
76341: PPUSH
76342: CALL_OW 1
76346: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76347: LD_ADDR_EXP 67
76351: PUSH
76352: LD_EXP 67
76356: PPUSH
76357: LD_VAR 0 1
76361: PPUSH
76362: LD_VAR 0 3
76366: PPUSH
76367: CALL_OW 1
76371: ST_TO_ADDR
// end ;
76372: LD_VAR 0 4
76376: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76377: LD_INT 0
76379: PPUSH
// if not mc_bases [ base ] then
76380: LD_EXP 52
76384: PUSH
76385: LD_VAR 0 1
76389: ARRAY
76390: NOT
76391: IFFALSE 76395
// exit ;
76393: GO 76420
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76395: LD_ADDR_EXP 57
76399: PUSH
76400: LD_EXP 57
76404: PPUSH
76405: LD_VAR 0 1
76409: PPUSH
76410: LD_VAR 0 2
76414: PPUSH
76415: CALL_OW 1
76419: ST_TO_ADDR
// end ;
76420: LD_VAR 0 3
76424: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76425: LD_INT 0
76427: PPUSH
// if not mc_bases [ base ] then
76428: LD_EXP 52
76432: PUSH
76433: LD_VAR 0 1
76437: ARRAY
76438: NOT
76439: IFFALSE 76443
// exit ;
76441: GO 76480
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
76443: LD_ADDR_EXP 57
76447: PUSH
76448: LD_EXP 57
76452: PPUSH
76453: LD_VAR 0 1
76457: PPUSH
76458: LD_EXP 57
76462: PUSH
76463: LD_VAR 0 1
76467: ARRAY
76468: PUSH
76469: LD_VAR 0 2
76473: UNION
76474: PPUSH
76475: CALL_OW 1
76479: ST_TO_ADDR
// end ;
76480: LD_VAR 0 3
76484: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76485: LD_INT 0
76487: PPUSH
// if not mc_bases [ base ] then
76488: LD_EXP 52
76492: PUSH
76493: LD_VAR 0 1
76497: ARRAY
76498: NOT
76499: IFFALSE 76503
// exit ;
76501: GO 76528
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76503: LD_ADDR_EXP 73
76507: PUSH
76508: LD_EXP 73
76512: PPUSH
76513: LD_VAR 0 1
76517: PPUSH
76518: LD_VAR 0 2
76522: PPUSH
76523: CALL_OW 1
76527: ST_TO_ADDR
// end ;
76528: LD_VAR 0 3
76532: RET
// export function MC_InsertProduceList ( base , components ) ; begin
76533: LD_INT 0
76535: PPUSH
// if not mc_bases [ base ] then
76536: LD_EXP 52
76540: PUSH
76541: LD_VAR 0 1
76545: ARRAY
76546: NOT
76547: IFFALSE 76551
// exit ;
76549: GO 76588
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
76551: LD_ADDR_EXP 73
76555: PUSH
76556: LD_EXP 73
76560: PPUSH
76561: LD_VAR 0 1
76565: PPUSH
76566: LD_EXP 73
76570: PUSH
76571: LD_VAR 0 1
76575: ARRAY
76576: PUSH
76577: LD_VAR 0 2
76581: ADD
76582: PPUSH
76583: CALL_OW 1
76587: ST_TO_ADDR
// end ;
76588: LD_VAR 0 3
76592: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76593: LD_INT 0
76595: PPUSH
// if not mc_bases [ base ] then
76596: LD_EXP 52
76600: PUSH
76601: LD_VAR 0 1
76605: ARRAY
76606: NOT
76607: IFFALSE 76611
// exit ;
76609: GO 76665
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76611: LD_ADDR_EXP 74
76615: PUSH
76616: LD_EXP 74
76620: PPUSH
76621: LD_VAR 0 1
76625: PPUSH
76626: LD_VAR 0 2
76630: PPUSH
76631: CALL_OW 1
76635: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76636: LD_ADDR_EXP 63
76640: PUSH
76641: LD_EXP 63
76645: PPUSH
76646: LD_VAR 0 1
76650: PPUSH
76651: LD_VAR 0 2
76655: PUSH
76656: LD_INT 0
76658: PLUS
76659: PPUSH
76660: CALL_OW 1
76664: ST_TO_ADDR
// end ;
76665: LD_VAR 0 3
76669: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76670: LD_INT 0
76672: PPUSH
// if not mc_bases [ base ] then
76673: LD_EXP 52
76677: PUSH
76678: LD_VAR 0 1
76682: ARRAY
76683: NOT
76684: IFFALSE 76688
// exit ;
76686: GO 76713
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76688: LD_ADDR_EXP 63
76692: PUSH
76693: LD_EXP 63
76697: PPUSH
76698: LD_VAR 0 1
76702: PPUSH
76703: LD_VAR 0 2
76707: PPUSH
76708: CALL_OW 1
76712: ST_TO_ADDR
// end ;
76713: LD_VAR 0 3
76717: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76718: LD_INT 0
76720: PPUSH
76721: PPUSH
76722: PPUSH
76723: PPUSH
// if not mc_bases [ base ] then
76724: LD_EXP 52
76728: PUSH
76729: LD_VAR 0 1
76733: ARRAY
76734: NOT
76735: IFFALSE 76739
// exit ;
76737: GO 76804
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76739: LD_ADDR_EXP 72
76743: PUSH
76744: LD_EXP 72
76748: PPUSH
76749: LD_VAR 0 1
76753: PUSH
76754: LD_EXP 72
76758: PUSH
76759: LD_VAR 0 1
76763: ARRAY
76764: PUSH
76765: LD_INT 1
76767: PLUS
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PPUSH
76773: LD_VAR 0 1
76777: PUSH
76778: LD_VAR 0 2
76782: PUSH
76783: LD_VAR 0 3
76787: PUSH
76788: LD_VAR 0 4
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: PPUSH
76799: CALL 17428 0 3
76803: ST_TO_ADDR
// end ;
76804: LD_VAR 0 5
76808: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76809: LD_INT 0
76811: PPUSH
// if not mc_bases [ base ] then
76812: LD_EXP 52
76816: PUSH
76817: LD_VAR 0 1
76821: ARRAY
76822: NOT
76823: IFFALSE 76827
// exit ;
76825: GO 76852
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76827: LD_ADDR_EXP 89
76831: PUSH
76832: LD_EXP 89
76836: PPUSH
76837: LD_VAR 0 1
76841: PPUSH
76842: LD_VAR 0 2
76846: PPUSH
76847: CALL_OW 1
76851: ST_TO_ADDR
// end ;
76852: LD_VAR 0 3
76856: RET
// export function MC_GetMinesField ( base ) ; begin
76857: LD_INT 0
76859: PPUSH
// result := mc_mines [ base ] ;
76860: LD_ADDR_VAR 0 2
76864: PUSH
76865: LD_EXP 65
76869: PUSH
76870: LD_VAR 0 1
76874: ARRAY
76875: ST_TO_ADDR
// end ;
76876: LD_VAR 0 2
76880: RET
// export function MC_GetProduceList ( base ) ; begin
76881: LD_INT 0
76883: PPUSH
// result := mc_produce [ base ] ;
76884: LD_ADDR_VAR 0 2
76888: PUSH
76889: LD_EXP 73
76893: PUSH
76894: LD_VAR 0 1
76898: ARRAY
76899: ST_TO_ADDR
// end ;
76900: LD_VAR 0 2
76904: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76905: LD_INT 0
76907: PPUSH
76908: PPUSH
// if not mc_bases then
76909: LD_EXP 52
76913: NOT
76914: IFFALSE 76918
// exit ;
76916: GO 76983
// if mc_bases [ base ] then
76918: LD_EXP 52
76922: PUSH
76923: LD_VAR 0 1
76927: ARRAY
76928: IFFALSE 76983
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76930: LD_ADDR_VAR 0 3
76934: PUSH
76935: LD_EXP 52
76939: PUSH
76940: LD_VAR 0 1
76944: ARRAY
76945: PPUSH
76946: LD_INT 30
76948: PUSH
76949: LD_VAR 0 2
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PPUSH
76958: CALL_OW 72
76962: ST_TO_ADDR
// if result then
76963: LD_VAR 0 3
76967: IFFALSE 76983
// result := result [ 1 ] ;
76969: LD_ADDR_VAR 0 3
76973: PUSH
76974: LD_VAR 0 3
76978: PUSH
76979: LD_INT 1
76981: ARRAY
76982: ST_TO_ADDR
// end ; end ;
76983: LD_VAR 0 3
76987: RET
// export function MC_SetTame ( base , area ) ; begin
76988: LD_INT 0
76990: PPUSH
// if not mc_bases or not base then
76991: LD_EXP 52
76995: NOT
76996: PUSH
76997: LD_VAR 0 1
77001: NOT
77002: OR
77003: IFFALSE 77007
// exit ;
77005: GO 77032
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77007: LD_ADDR_EXP 80
77011: PUSH
77012: LD_EXP 80
77016: PPUSH
77017: LD_VAR 0 1
77021: PPUSH
77022: LD_VAR 0 2
77026: PPUSH
77027: CALL_OW 1
77031: ST_TO_ADDR
// end ;
77032: LD_VAR 0 3
77036: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77037: LD_INT 0
77039: PPUSH
77040: PPUSH
// if not mc_bases or not base then
77041: LD_EXP 52
77045: NOT
77046: PUSH
77047: LD_VAR 0 1
77051: NOT
77052: OR
77053: IFFALSE 77057
// exit ;
77055: GO 77159
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77057: LD_ADDR_VAR 0 4
77061: PUSH
77062: LD_EXP 52
77066: PUSH
77067: LD_VAR 0 1
77071: ARRAY
77072: PPUSH
77073: LD_INT 30
77075: PUSH
77076: LD_VAR 0 2
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PPUSH
77085: CALL_OW 72
77089: ST_TO_ADDR
// if not tmp then
77090: LD_VAR 0 4
77094: NOT
77095: IFFALSE 77099
// exit ;
77097: GO 77159
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77099: LD_ADDR_EXP 84
77103: PUSH
77104: LD_EXP 84
77108: PPUSH
77109: LD_VAR 0 1
77113: PPUSH
77114: LD_EXP 84
77118: PUSH
77119: LD_VAR 0 1
77123: ARRAY
77124: PPUSH
77125: LD_EXP 84
77129: PUSH
77130: LD_VAR 0 1
77134: ARRAY
77135: PUSH
77136: LD_INT 1
77138: PLUS
77139: PPUSH
77140: LD_VAR 0 4
77144: PUSH
77145: LD_INT 1
77147: ARRAY
77148: PPUSH
77149: CALL_OW 2
77153: PPUSH
77154: CALL_OW 1
77158: ST_TO_ADDR
// end ;
77159: LD_VAR 0 3
77163: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77164: LD_INT 0
77166: PPUSH
77167: PPUSH
// if not mc_bases or not base or not kinds then
77168: LD_EXP 52
77172: NOT
77173: PUSH
77174: LD_VAR 0 1
77178: NOT
77179: OR
77180: PUSH
77181: LD_VAR 0 2
77185: NOT
77186: OR
77187: IFFALSE 77191
// exit ;
77189: GO 77252
// for i in kinds do
77191: LD_ADDR_VAR 0 4
77195: PUSH
77196: LD_VAR 0 2
77200: PUSH
77201: FOR_IN
77202: IFFALSE 77250
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77204: LD_ADDR_EXP 86
77208: PUSH
77209: LD_EXP 86
77213: PPUSH
77214: LD_VAR 0 1
77218: PUSH
77219: LD_EXP 86
77223: PUSH
77224: LD_VAR 0 1
77228: ARRAY
77229: PUSH
77230: LD_INT 1
77232: PLUS
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PPUSH
77238: LD_VAR 0 4
77242: PPUSH
77243: CALL 17428 0 3
77247: ST_TO_ADDR
77248: GO 77201
77250: POP
77251: POP
// end ;
77252: LD_VAR 0 3
77256: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77257: LD_INT 0
77259: PPUSH
// if not mc_bases or not base or not areas then
77260: LD_EXP 52
77264: NOT
77265: PUSH
77266: LD_VAR 0 1
77270: NOT
77271: OR
77272: PUSH
77273: LD_VAR 0 2
77277: NOT
77278: OR
77279: IFFALSE 77283
// exit ;
77281: GO 77308
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77283: LD_ADDR_EXP 70
77287: PUSH
77288: LD_EXP 70
77292: PPUSH
77293: LD_VAR 0 1
77297: PPUSH
77298: LD_VAR 0 2
77302: PPUSH
77303: CALL_OW 1
77307: ST_TO_ADDR
// end ;
77308: LD_VAR 0 3
77312: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
77313: LD_INT 0
77315: PPUSH
// if not mc_bases or not base or not teleports_exit then
77316: LD_EXP 52
77320: NOT
77321: PUSH
77322: LD_VAR 0 1
77326: NOT
77327: OR
77328: PUSH
77329: LD_VAR 0 2
77333: NOT
77334: OR
77335: IFFALSE 77339
// exit ;
77337: GO 77364
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
77339: LD_ADDR_EXP 87
77343: PUSH
77344: LD_EXP 87
77348: PPUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: LD_VAR 0 2
77358: PPUSH
77359: CALL_OW 1
77363: ST_TO_ADDR
// end ;
77364: LD_VAR 0 3
77368: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77369: LD_INT 0
77371: PPUSH
77372: PPUSH
77373: PPUSH
// if not mc_bases or not base or not ext_list then
77374: LD_EXP 52
77378: NOT
77379: PUSH
77380: LD_VAR 0 1
77384: NOT
77385: OR
77386: PUSH
77387: LD_VAR 0 5
77391: NOT
77392: OR
77393: IFFALSE 77397
// exit ;
77395: GO 77570
// tmp := GetFacExtXYD ( x , y , d ) ;
77397: LD_ADDR_VAR 0 8
77401: PUSH
77402: LD_VAR 0 2
77406: PPUSH
77407: LD_VAR 0 3
77411: PPUSH
77412: LD_VAR 0 4
77416: PPUSH
77417: CALL 50806 0 3
77421: ST_TO_ADDR
// if not tmp then
77422: LD_VAR 0 8
77426: NOT
77427: IFFALSE 77431
// exit ;
77429: GO 77570
// for i in tmp do
77431: LD_ADDR_VAR 0 7
77435: PUSH
77436: LD_VAR 0 8
77440: PUSH
77441: FOR_IN
77442: IFFALSE 77568
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77444: LD_ADDR_EXP 57
77448: PUSH
77449: LD_EXP 57
77453: PPUSH
77454: LD_VAR 0 1
77458: PPUSH
77459: LD_EXP 57
77463: PUSH
77464: LD_VAR 0 1
77468: ARRAY
77469: PPUSH
77470: LD_EXP 57
77474: PUSH
77475: LD_VAR 0 1
77479: ARRAY
77480: PUSH
77481: LD_INT 1
77483: PLUS
77484: PPUSH
77485: LD_VAR 0 5
77489: PUSH
77490: LD_INT 1
77492: ARRAY
77493: PUSH
77494: LD_VAR 0 7
77498: PUSH
77499: LD_INT 1
77501: ARRAY
77502: PUSH
77503: LD_VAR 0 7
77507: PUSH
77508: LD_INT 2
77510: ARRAY
77511: PUSH
77512: LD_VAR 0 7
77516: PUSH
77517: LD_INT 3
77519: ARRAY
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: PPUSH
77527: CALL_OW 2
77531: PPUSH
77532: CALL_OW 1
77536: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77537: LD_ADDR_VAR 0 5
77541: PUSH
77542: LD_VAR 0 5
77546: PPUSH
77547: LD_INT 1
77549: PPUSH
77550: CALL_OW 3
77554: ST_TO_ADDR
// if not ext_list then
77555: LD_VAR 0 5
77559: NOT
77560: IFFALSE 77566
// exit ;
77562: POP
77563: POP
77564: GO 77570
// end ;
77566: GO 77441
77568: POP
77569: POP
// end ;
77570: LD_VAR 0 6
77574: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77575: LD_INT 0
77577: PPUSH
// if not mc_bases or not base or not weapon_list then
77578: LD_EXP 52
77582: NOT
77583: PUSH
77584: LD_VAR 0 1
77588: NOT
77589: OR
77590: PUSH
77591: LD_VAR 0 2
77595: NOT
77596: OR
77597: IFFALSE 77601
// exit ;
77599: GO 77626
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77601: LD_ADDR_EXP 91
77605: PUSH
77606: LD_EXP 91
77610: PPUSH
77611: LD_VAR 0 1
77615: PPUSH
77616: LD_VAR 0 2
77620: PPUSH
77621: CALL_OW 1
77625: ST_TO_ADDR
// end ;
77626: LD_VAR 0 3
77630: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77631: LD_INT 0
77633: PPUSH
// if not mc_bases or not base or not tech_list then
77634: LD_EXP 52
77638: NOT
77639: PUSH
77640: LD_VAR 0 1
77644: NOT
77645: OR
77646: PUSH
77647: LD_VAR 0 2
77651: NOT
77652: OR
77653: IFFALSE 77657
// exit ;
77655: GO 77682
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77657: LD_ADDR_EXP 79
77661: PUSH
77662: LD_EXP 79
77666: PPUSH
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_VAR 0 2
77676: PPUSH
77677: CALL_OW 1
77681: ST_TO_ADDR
// end ;
77682: LD_VAR 0 3
77686: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77687: LD_INT 0
77689: PPUSH
// if not mc_bases or not parking_area or not base then
77690: LD_EXP 52
77694: NOT
77695: PUSH
77696: LD_VAR 0 2
77700: NOT
77701: OR
77702: PUSH
77703: LD_VAR 0 1
77707: NOT
77708: OR
77709: IFFALSE 77713
// exit ;
77711: GO 77738
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77713: LD_ADDR_EXP 76
77717: PUSH
77718: LD_EXP 76
77722: PPUSH
77723: LD_VAR 0 1
77727: PPUSH
77728: LD_VAR 0 2
77732: PPUSH
77733: CALL_OW 1
77737: ST_TO_ADDR
// end ;
77738: LD_VAR 0 3
77742: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77743: LD_INT 0
77745: PPUSH
// if not mc_bases or not base or not scan_area then
77746: LD_EXP 52
77750: NOT
77751: PUSH
77752: LD_VAR 0 1
77756: NOT
77757: OR
77758: PUSH
77759: LD_VAR 0 2
77763: NOT
77764: OR
77765: IFFALSE 77769
// exit ;
77767: GO 77794
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77769: LD_ADDR_EXP 77
77773: PUSH
77774: LD_EXP 77
77778: PPUSH
77779: LD_VAR 0 1
77783: PPUSH
77784: LD_VAR 0 2
77788: PPUSH
77789: CALL_OW 1
77793: ST_TO_ADDR
// end ;
77794: LD_VAR 0 3
77798: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
77799: LD_INT 0
77801: PPUSH
77802: PPUSH
// if not mc_bases or not base then
77803: LD_EXP 52
77807: NOT
77808: PUSH
77809: LD_VAR 0 1
77813: NOT
77814: OR
77815: IFFALSE 77819
// exit ;
77817: GO 77883
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
77819: LD_ADDR_VAR 0 3
77823: PUSH
77824: LD_INT 1
77826: PUSH
77827: LD_INT 2
77829: PUSH
77830: LD_INT 3
77832: PUSH
77833: LD_INT 4
77835: PUSH
77836: LD_INT 11
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
77846: LD_ADDR_EXP 79
77850: PUSH
77851: LD_EXP 79
77855: PPUSH
77856: LD_VAR 0 1
77860: PPUSH
77861: LD_EXP 79
77865: PUSH
77866: LD_VAR 0 1
77870: ARRAY
77871: PUSH
77872: LD_VAR 0 3
77876: DIFF
77877: PPUSH
77878: CALL_OW 1
77882: ST_TO_ADDR
// end ;
77883: LD_VAR 0 2
77887: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
77888: LD_INT 0
77890: PPUSH
// result := mc_vehicles [ base ] ;
77891: LD_ADDR_VAR 0 3
77895: PUSH
77896: LD_EXP 71
77900: PUSH
77901: LD_VAR 0 1
77905: ARRAY
77906: ST_TO_ADDR
// if onlyCombat then
77907: LD_VAR 0 2
77911: IFFALSE 78076
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
77913: LD_ADDR_VAR 0 3
77917: PUSH
77918: LD_VAR 0 3
77922: PUSH
77923: LD_VAR 0 3
77927: PPUSH
77928: LD_INT 2
77930: PUSH
77931: LD_INT 34
77933: PUSH
77934: LD_INT 12
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: PUSH
77941: LD_INT 34
77943: PUSH
77944: LD_INT 51
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PUSH
77951: LD_INT 34
77953: PUSH
77954: LD_EXP 46
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 34
77965: PUSH
77966: LD_INT 32
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 34
77975: PUSH
77976: LD_INT 13
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 34
77985: PUSH
77986: LD_INT 52
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 34
77995: PUSH
77996: LD_INT 14
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 34
78005: PUSH
78006: LD_INT 53
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 34
78015: PUSH
78016: LD_EXP 45
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 34
78027: PUSH
78028: LD_INT 31
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 34
78037: PUSH
78038: LD_INT 48
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: LD_INT 34
78047: PUSH
78048: LD_INT 8
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: PPUSH
78070: CALL_OW 72
78074: DIFF
78075: ST_TO_ADDR
// end ; end_of_file
78076: LD_VAR 0 3
78080: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78081: LD_INT 0
78083: PPUSH
78084: PPUSH
78085: PPUSH
// if not mc_bases or not skirmish then
78086: LD_EXP 52
78090: NOT
78091: PUSH
78092: LD_EXP 50
78096: NOT
78097: OR
78098: IFFALSE 78102
// exit ;
78100: GO 78267
// for i = 1 to mc_bases do
78102: LD_ADDR_VAR 0 4
78106: PUSH
78107: DOUBLE
78108: LD_INT 1
78110: DEC
78111: ST_TO_ADDR
78112: LD_EXP 52
78116: PUSH
78117: FOR_TO
78118: IFFALSE 78265
// begin if sci in mc_bases [ i ] then
78120: LD_VAR 0 2
78124: PUSH
78125: LD_EXP 52
78129: PUSH
78130: LD_VAR 0 4
78134: ARRAY
78135: IN
78136: IFFALSE 78263
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
78138: LD_ADDR_EXP 81
78142: PUSH
78143: LD_EXP 81
78147: PPUSH
78148: LD_VAR 0 4
78152: PUSH
78153: LD_EXP 81
78157: PUSH
78158: LD_VAR 0 4
78162: ARRAY
78163: PUSH
78164: LD_INT 1
78166: PLUS
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: PPUSH
78172: LD_VAR 0 1
78176: PPUSH
78177: CALL 17428 0 3
78181: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
78182: LD_ADDR_VAR 0 5
78186: PUSH
78187: LD_EXP 52
78191: PUSH
78192: LD_VAR 0 4
78196: ARRAY
78197: PPUSH
78198: LD_INT 2
78200: PUSH
78201: LD_INT 30
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: LD_INT 30
78213: PUSH
78214: LD_INT 1
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: LIST
78225: PPUSH
78226: CALL_OW 72
78230: PPUSH
78231: LD_VAR 0 1
78235: PPUSH
78236: CALL_OW 74
78240: ST_TO_ADDR
// if tmp then
78241: LD_VAR 0 5
78245: IFFALSE 78261
// ComStandNearbyBuilding ( ape , tmp ) ;
78247: LD_VAR 0 1
78251: PPUSH
78252: LD_VAR 0 5
78256: PPUSH
78257: CALL 12135 0 2
// break ;
78261: GO 78265
// end ; end ;
78263: GO 78117
78265: POP
78266: POP
// end ;
78267: LD_VAR 0 3
78271: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
78272: LD_INT 0
78274: PPUSH
78275: PPUSH
78276: PPUSH
// if not mc_bases or not skirmish then
78277: LD_EXP 52
78281: NOT
78282: PUSH
78283: LD_EXP 50
78287: NOT
78288: OR
78289: IFFALSE 78293
// exit ;
78291: GO 78382
// for i = 1 to mc_bases do
78293: LD_ADDR_VAR 0 4
78297: PUSH
78298: DOUBLE
78299: LD_INT 1
78301: DEC
78302: ST_TO_ADDR
78303: LD_EXP 52
78307: PUSH
78308: FOR_TO
78309: IFFALSE 78380
// begin if building in mc_busy_turret_list [ i ] then
78311: LD_VAR 0 1
78315: PUSH
78316: LD_EXP 62
78320: PUSH
78321: LD_VAR 0 4
78325: ARRAY
78326: IN
78327: IFFALSE 78378
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78329: LD_ADDR_VAR 0 5
78333: PUSH
78334: LD_EXP 62
78338: PUSH
78339: LD_VAR 0 4
78343: ARRAY
78344: PUSH
78345: LD_VAR 0 1
78349: DIFF
78350: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78351: LD_ADDR_EXP 62
78355: PUSH
78356: LD_EXP 62
78360: PPUSH
78361: LD_VAR 0 4
78365: PPUSH
78366: LD_VAR 0 5
78370: PPUSH
78371: CALL_OW 1
78375: ST_TO_ADDR
// break ;
78376: GO 78380
// end ; end ;
78378: GO 78308
78380: POP
78381: POP
// end ;
78382: LD_VAR 0 3
78386: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78387: LD_INT 0
78389: PPUSH
78390: PPUSH
78391: PPUSH
// if not mc_bases or not skirmish then
78392: LD_EXP 52
78396: NOT
78397: PUSH
78398: LD_EXP 50
78402: NOT
78403: OR
78404: IFFALSE 78408
// exit ;
78406: GO 78607
// for i = 1 to mc_bases do
78408: LD_ADDR_VAR 0 5
78412: PUSH
78413: DOUBLE
78414: LD_INT 1
78416: DEC
78417: ST_TO_ADDR
78418: LD_EXP 52
78422: PUSH
78423: FOR_TO
78424: IFFALSE 78605
// if building in mc_bases [ i ] then
78426: LD_VAR 0 1
78430: PUSH
78431: LD_EXP 52
78435: PUSH
78436: LD_VAR 0 5
78440: ARRAY
78441: IN
78442: IFFALSE 78603
// begin tmp := mc_bases [ i ] diff building ;
78444: LD_ADDR_VAR 0 6
78448: PUSH
78449: LD_EXP 52
78453: PUSH
78454: LD_VAR 0 5
78458: ARRAY
78459: PUSH
78460: LD_VAR 0 1
78464: DIFF
78465: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78466: LD_ADDR_EXP 52
78470: PUSH
78471: LD_EXP 52
78475: PPUSH
78476: LD_VAR 0 5
78480: PPUSH
78481: LD_VAR 0 6
78485: PPUSH
78486: CALL_OW 1
78490: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78491: LD_VAR 0 1
78495: PUSH
78496: LD_EXP 60
78500: PUSH
78501: LD_VAR 0 5
78505: ARRAY
78506: IN
78507: IFFALSE 78546
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78509: LD_ADDR_EXP 60
78513: PUSH
78514: LD_EXP 60
78518: PPUSH
78519: LD_VAR 0 5
78523: PPUSH
78524: LD_EXP 60
78528: PUSH
78529: LD_VAR 0 5
78533: ARRAY
78534: PUSH
78535: LD_VAR 0 1
78539: DIFF
78540: PPUSH
78541: CALL_OW 1
78545: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78546: LD_VAR 0 1
78550: PUSH
78551: LD_EXP 61
78555: PUSH
78556: LD_VAR 0 5
78560: ARRAY
78561: IN
78562: IFFALSE 78601
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78564: LD_ADDR_EXP 61
78568: PUSH
78569: LD_EXP 61
78573: PPUSH
78574: LD_VAR 0 5
78578: PPUSH
78579: LD_EXP 61
78583: PUSH
78584: LD_VAR 0 5
78588: ARRAY
78589: PUSH
78590: LD_VAR 0 1
78594: DIFF
78595: PPUSH
78596: CALL_OW 1
78600: ST_TO_ADDR
// break ;
78601: GO 78605
// end ;
78603: GO 78423
78605: POP
78606: POP
// end ;
78607: LD_VAR 0 4
78611: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78612: LD_INT 0
78614: PPUSH
78615: PPUSH
78616: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
78617: LD_EXP 52
78621: NOT
78622: PUSH
78623: LD_EXP 50
78627: NOT
78628: OR
78629: PUSH
78630: LD_VAR 0 3
78634: PUSH
78635: LD_EXP 78
78639: IN
78640: NOT
78641: OR
78642: IFFALSE 78646
// exit ;
78644: GO 78769
// for i = 1 to mc_vehicles do
78646: LD_ADDR_VAR 0 6
78650: PUSH
78651: DOUBLE
78652: LD_INT 1
78654: DEC
78655: ST_TO_ADDR
78656: LD_EXP 71
78660: PUSH
78661: FOR_TO
78662: IFFALSE 78767
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78664: LD_VAR 0 2
78668: PUSH
78669: LD_EXP 71
78673: PUSH
78674: LD_VAR 0 6
78678: ARRAY
78679: IN
78680: PUSH
78681: LD_VAR 0 1
78685: PUSH
78686: LD_EXP 71
78690: PUSH
78691: LD_VAR 0 6
78695: ARRAY
78696: IN
78697: OR
78698: IFFALSE 78765
// begin tmp := mc_vehicles [ i ] diff old ;
78700: LD_ADDR_VAR 0 7
78704: PUSH
78705: LD_EXP 71
78709: PUSH
78710: LD_VAR 0 6
78714: ARRAY
78715: PUSH
78716: LD_VAR 0 2
78720: DIFF
78721: ST_TO_ADDR
// tmp := tmp diff new ;
78722: LD_ADDR_VAR 0 7
78726: PUSH
78727: LD_VAR 0 7
78731: PUSH
78732: LD_VAR 0 1
78736: DIFF
78737: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78738: LD_ADDR_EXP 71
78742: PUSH
78743: LD_EXP 71
78747: PPUSH
78748: LD_VAR 0 6
78752: PPUSH
78753: LD_VAR 0 7
78757: PPUSH
78758: CALL_OW 1
78762: ST_TO_ADDR
// break ;
78763: GO 78767
// end ;
78765: GO 78661
78767: POP
78768: POP
// end ;
78769: LD_VAR 0 5
78773: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78774: LD_INT 0
78776: PPUSH
78777: PPUSH
78778: PPUSH
78779: PPUSH
// if not mc_bases or not skirmish then
78780: LD_EXP 52
78784: NOT
78785: PUSH
78786: LD_EXP 50
78790: NOT
78791: OR
78792: IFFALSE 78796
// exit ;
78794: GO 79173
// side := GetSide ( vehicle ) ;
78796: LD_ADDR_VAR 0 5
78800: PUSH
78801: LD_VAR 0 1
78805: PPUSH
78806: CALL_OW 255
78810: ST_TO_ADDR
// for i = 1 to mc_bases do
78811: LD_ADDR_VAR 0 4
78815: PUSH
78816: DOUBLE
78817: LD_INT 1
78819: DEC
78820: ST_TO_ADDR
78821: LD_EXP 52
78825: PUSH
78826: FOR_TO
78827: IFFALSE 79171
// begin if factory in mc_bases [ i ] then
78829: LD_VAR 0 2
78833: PUSH
78834: LD_EXP 52
78838: PUSH
78839: LD_VAR 0 4
78843: ARRAY
78844: IN
78845: IFFALSE 79169
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
78847: LD_EXP 74
78851: PUSH
78852: LD_VAR 0 4
78856: ARRAY
78857: PUSH
78858: LD_EXP 63
78862: PUSH
78863: LD_VAR 0 4
78867: ARRAY
78868: LESS
78869: PUSH
78870: LD_VAR 0 1
78874: PPUSH
78875: CALL_OW 264
78879: PUSH
78880: LD_INT 31
78882: PUSH
78883: LD_INT 32
78885: PUSH
78886: LD_INT 51
78888: PUSH
78889: LD_EXP 46
78893: PUSH
78894: LD_INT 12
78896: PUSH
78897: LD_INT 30
78899: PUSH
78900: LD_EXP 45
78904: PUSH
78905: LD_INT 11
78907: PUSH
78908: LD_INT 53
78910: PUSH
78911: LD_INT 14
78913: PUSH
78914: LD_EXP 49
78918: PUSH
78919: LD_INT 29
78921: PUSH
78922: LD_EXP 47
78926: PUSH
78927: LD_INT 13
78929: PUSH
78930: LD_INT 52
78932: PUSH
78933: LD_INT 48
78935: PUSH
78936: LD_INT 8
78938: PUSH
78939: EMPTY
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: IN
78958: NOT
78959: AND
78960: IFFALSE 79008
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
78962: LD_ADDR_EXP 74
78966: PUSH
78967: LD_EXP 74
78971: PPUSH
78972: LD_VAR 0 4
78976: PUSH
78977: LD_EXP 74
78981: PUSH
78982: LD_VAR 0 4
78986: ARRAY
78987: PUSH
78988: LD_INT 1
78990: PLUS
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: PPUSH
78996: LD_VAR 0 1
79000: PPUSH
79001: CALL 17428 0 3
79005: ST_TO_ADDR
79006: GO 79052
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
79008: LD_ADDR_EXP 71
79012: PUSH
79013: LD_EXP 71
79017: PPUSH
79018: LD_VAR 0 4
79022: PUSH
79023: LD_EXP 71
79027: PUSH
79028: LD_VAR 0 4
79032: ARRAY
79033: PUSH
79034: LD_INT 1
79036: PLUS
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PPUSH
79042: LD_VAR 0 1
79046: PPUSH
79047: CALL 17428 0 3
79051: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
79052: LD_VAR 0 1
79056: PPUSH
79057: CALL_OW 263
79061: PUSH
79062: LD_INT 2
79064: EQUAL
79065: IFFALSE 79085
// begin repeat wait ( 0 0$1 ) ;
79067: LD_INT 35
79069: PPUSH
79070: CALL_OW 67
// until IsControledBy ( vehicle ) ;
79074: LD_VAR 0 1
79078: PPUSH
79079: CALL_OW 312
79083: IFFALSE 79067
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
79085: LD_VAR 0 1
79089: PPUSH
79090: LD_EXP 76
79094: PUSH
79095: LD_VAR 0 4
79099: ARRAY
79100: PPUSH
79101: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
79105: LD_VAR 0 1
79109: PPUSH
79110: CALL_OW 263
79114: PUSH
79115: LD_INT 1
79117: NONEQUAL
79118: IFFALSE 79122
// break ;
79120: GO 79171
// repeat wait ( 0 0$1 ) ;
79122: LD_INT 35
79124: PPUSH
79125: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
79129: LD_VAR 0 1
79133: PPUSH
79134: LD_EXP 76
79138: PUSH
79139: LD_VAR 0 4
79143: ARRAY
79144: PPUSH
79145: CALL_OW 308
79149: IFFALSE 79122
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
79151: LD_VAR 0 1
79155: PPUSH
79156: CALL_OW 311
79160: PPUSH
79161: CALL_OW 121
// exit ;
79165: POP
79166: POP
79167: GO 79173
// end ; end ;
79169: GO 78826
79171: POP
79172: POP
// end ;
79173: LD_VAR 0 3
79177: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79178: LD_INT 0
79180: PPUSH
79181: PPUSH
79182: PPUSH
79183: PPUSH
// if not mc_bases or not skirmish then
79184: LD_EXP 52
79188: NOT
79189: PUSH
79190: LD_EXP 50
79194: NOT
79195: OR
79196: IFFALSE 79200
// exit ;
79198: GO 79553
// repeat wait ( 0 0$1 ) ;
79200: LD_INT 35
79202: PPUSH
79203: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
79207: LD_VAR 0 2
79211: PPUSH
79212: LD_VAR 0 3
79216: PPUSH
79217: CALL_OW 284
79221: IFFALSE 79200
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79223: LD_VAR 0 2
79227: PPUSH
79228: LD_VAR 0 3
79232: PPUSH
79233: CALL_OW 283
79237: PUSH
79238: LD_INT 4
79240: EQUAL
79241: IFFALSE 79245
// exit ;
79243: GO 79553
// for i = 1 to mc_bases do
79245: LD_ADDR_VAR 0 7
79249: PUSH
79250: DOUBLE
79251: LD_INT 1
79253: DEC
79254: ST_TO_ADDR
79255: LD_EXP 52
79259: PUSH
79260: FOR_TO
79261: IFFALSE 79551
// begin if mc_crates_area [ i ] then
79263: LD_EXP 70
79267: PUSH
79268: LD_VAR 0 7
79272: ARRAY
79273: IFFALSE 79384
// for j in mc_crates_area [ i ] do
79275: LD_ADDR_VAR 0 8
79279: PUSH
79280: LD_EXP 70
79284: PUSH
79285: LD_VAR 0 7
79289: ARRAY
79290: PUSH
79291: FOR_IN
79292: IFFALSE 79382
// if InArea ( x , y , j ) then
79294: LD_VAR 0 2
79298: PPUSH
79299: LD_VAR 0 3
79303: PPUSH
79304: LD_VAR 0 8
79308: PPUSH
79309: CALL_OW 309
79313: IFFALSE 79380
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79315: LD_ADDR_EXP 68
79319: PUSH
79320: LD_EXP 68
79324: PPUSH
79325: LD_VAR 0 7
79329: PUSH
79330: LD_EXP 68
79334: PUSH
79335: LD_VAR 0 7
79339: ARRAY
79340: PUSH
79341: LD_INT 1
79343: PLUS
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: PPUSH
79349: LD_VAR 0 4
79353: PUSH
79354: LD_VAR 0 2
79358: PUSH
79359: LD_VAR 0 3
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: LIST
79368: PPUSH
79369: CALL 17428 0 3
79373: ST_TO_ADDR
// exit ;
79374: POP
79375: POP
79376: POP
79377: POP
79378: GO 79553
// end ;
79380: GO 79291
79382: POP
79383: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79384: LD_ADDR_VAR 0 9
79388: PUSH
79389: LD_EXP 52
79393: PUSH
79394: LD_VAR 0 7
79398: ARRAY
79399: PPUSH
79400: LD_INT 2
79402: PUSH
79403: LD_INT 30
79405: PUSH
79406: LD_INT 0
79408: PUSH
79409: EMPTY
79410: LIST
79411: LIST
79412: PUSH
79413: LD_INT 30
79415: PUSH
79416: LD_INT 1
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: LIST
79427: PPUSH
79428: CALL_OW 72
79432: ST_TO_ADDR
// if not depot then
79433: LD_VAR 0 9
79437: NOT
79438: IFFALSE 79442
// continue ;
79440: GO 79260
// for j in depot do
79442: LD_ADDR_VAR 0 8
79446: PUSH
79447: LD_VAR 0 9
79451: PUSH
79452: FOR_IN
79453: IFFALSE 79547
// if GetDistUnitXY ( j , x , y ) < 30 then
79455: LD_VAR 0 8
79459: PPUSH
79460: LD_VAR 0 2
79464: PPUSH
79465: LD_VAR 0 3
79469: PPUSH
79470: CALL_OW 297
79474: PUSH
79475: LD_INT 30
79477: LESS
79478: IFFALSE 79545
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79480: LD_ADDR_EXP 68
79484: PUSH
79485: LD_EXP 68
79489: PPUSH
79490: LD_VAR 0 7
79494: PUSH
79495: LD_EXP 68
79499: PUSH
79500: LD_VAR 0 7
79504: ARRAY
79505: PUSH
79506: LD_INT 1
79508: PLUS
79509: PUSH
79510: EMPTY
79511: LIST
79512: LIST
79513: PPUSH
79514: LD_VAR 0 4
79518: PUSH
79519: LD_VAR 0 2
79523: PUSH
79524: LD_VAR 0 3
79528: PUSH
79529: EMPTY
79530: LIST
79531: LIST
79532: LIST
79533: PPUSH
79534: CALL 17428 0 3
79538: ST_TO_ADDR
// exit ;
79539: POP
79540: POP
79541: POP
79542: POP
79543: GO 79553
// end ;
79545: GO 79452
79547: POP
79548: POP
// end ;
79549: GO 79260
79551: POP
79552: POP
// end ;
79553: LD_VAR 0 6
79557: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79558: LD_INT 0
79560: PPUSH
79561: PPUSH
79562: PPUSH
79563: PPUSH
// if not mc_bases or not skirmish then
79564: LD_EXP 52
79568: NOT
79569: PUSH
79570: LD_EXP 50
79574: NOT
79575: OR
79576: IFFALSE 79580
// exit ;
79578: GO 79857
// side := GetSide ( lab ) ;
79580: LD_ADDR_VAR 0 4
79584: PUSH
79585: LD_VAR 0 2
79589: PPUSH
79590: CALL_OW 255
79594: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79595: LD_VAR 0 4
79599: PUSH
79600: LD_EXP 78
79604: IN
79605: NOT
79606: PUSH
79607: LD_EXP 79
79611: NOT
79612: OR
79613: PUSH
79614: LD_EXP 52
79618: NOT
79619: OR
79620: IFFALSE 79624
// exit ;
79622: GO 79857
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79624: LD_ADDR_EXP 79
79628: PUSH
79629: LD_EXP 79
79633: PPUSH
79634: LD_VAR 0 4
79638: PPUSH
79639: LD_EXP 79
79643: PUSH
79644: LD_VAR 0 4
79648: ARRAY
79649: PUSH
79650: LD_VAR 0 1
79654: DIFF
79655: PPUSH
79656: CALL_OW 1
79660: ST_TO_ADDR
// for i = 1 to mc_bases do
79661: LD_ADDR_VAR 0 5
79665: PUSH
79666: DOUBLE
79667: LD_INT 1
79669: DEC
79670: ST_TO_ADDR
79671: LD_EXP 52
79675: PUSH
79676: FOR_TO
79677: IFFALSE 79855
// begin if lab in mc_bases [ i ] then
79679: LD_VAR 0 2
79683: PUSH
79684: LD_EXP 52
79688: PUSH
79689: LD_VAR 0 5
79693: ARRAY
79694: IN
79695: IFFALSE 79853
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79697: LD_VAR 0 1
79701: PUSH
79702: LD_INT 11
79704: PUSH
79705: LD_INT 4
79707: PUSH
79708: LD_INT 3
79710: PUSH
79711: LD_INT 2
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: IN
79720: PUSH
79721: LD_EXP 82
79725: PUSH
79726: LD_VAR 0 5
79730: ARRAY
79731: AND
79732: IFFALSE 79853
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79734: LD_ADDR_VAR 0 6
79738: PUSH
79739: LD_EXP 82
79743: PUSH
79744: LD_VAR 0 5
79748: ARRAY
79749: PUSH
79750: LD_INT 1
79752: ARRAY
79753: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79754: LD_ADDR_EXP 82
79758: PUSH
79759: LD_EXP 82
79763: PPUSH
79764: LD_VAR 0 5
79768: PPUSH
79769: EMPTY
79770: PPUSH
79771: CALL_OW 1
79775: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79776: LD_VAR 0 6
79780: PPUSH
79781: LD_INT 0
79783: PPUSH
79784: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79788: LD_VAR 0 6
79792: PPUSH
79793: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79797: LD_ADDR_EXP 81
79801: PUSH
79802: LD_EXP 81
79806: PPUSH
79807: LD_VAR 0 5
79811: PPUSH
79812: LD_EXP 81
79816: PUSH
79817: LD_VAR 0 5
79821: ARRAY
79822: PPUSH
79823: LD_INT 1
79825: PPUSH
79826: LD_VAR 0 6
79830: PPUSH
79831: CALL_OW 2
79835: PPUSH
79836: CALL_OW 1
79840: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79841: LD_VAR 0 5
79845: PPUSH
79846: LD_INT 112
79848: PPUSH
79849: CALL 57390 0 2
// end ; end ; end ;
79853: GO 79676
79855: POP
79856: POP
// end ;
79857: LD_VAR 0 3
79861: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79862: LD_INT 0
79864: PPUSH
79865: PPUSH
79866: PPUSH
79867: PPUSH
79868: PPUSH
79869: PPUSH
79870: PPUSH
79871: PPUSH
// if not mc_bases or not skirmish then
79872: LD_EXP 52
79876: NOT
79877: PUSH
79878: LD_EXP 50
79882: NOT
79883: OR
79884: IFFALSE 79888
// exit ;
79886: GO 80980
// for i = 1 to mc_bases do
79888: LD_ADDR_VAR 0 3
79892: PUSH
79893: DOUBLE
79894: LD_INT 1
79896: DEC
79897: ST_TO_ADDR
79898: LD_EXP 52
79902: PUSH
79903: FOR_TO
79904: IFFALSE 80978
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79906: LD_VAR 0 1
79910: PUSH
79911: LD_EXP 52
79915: PUSH
79916: LD_VAR 0 3
79920: ARRAY
79921: IN
79922: PUSH
79923: LD_VAR 0 1
79927: PUSH
79928: LD_EXP 59
79932: PUSH
79933: LD_VAR 0 3
79937: ARRAY
79938: IN
79939: OR
79940: PUSH
79941: LD_VAR 0 1
79945: PUSH
79946: LD_EXP 74
79950: PUSH
79951: LD_VAR 0 3
79955: ARRAY
79956: IN
79957: OR
79958: PUSH
79959: LD_VAR 0 1
79963: PUSH
79964: LD_EXP 71
79968: PUSH
79969: LD_VAR 0 3
79973: ARRAY
79974: IN
79975: OR
79976: PUSH
79977: LD_VAR 0 1
79981: PUSH
79982: LD_EXP 81
79986: PUSH
79987: LD_VAR 0 3
79991: ARRAY
79992: IN
79993: OR
79994: PUSH
79995: LD_VAR 0 1
79999: PUSH
80000: LD_EXP 82
80004: PUSH
80005: LD_VAR 0 3
80009: ARRAY
80010: IN
80011: OR
80012: IFFALSE 80976
// begin if un in mc_ape [ i ] then
80014: LD_VAR 0 1
80018: PUSH
80019: LD_EXP 81
80023: PUSH
80024: LD_VAR 0 3
80028: ARRAY
80029: IN
80030: IFFALSE 80069
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80032: LD_ADDR_EXP 81
80036: PUSH
80037: LD_EXP 81
80041: PPUSH
80042: LD_VAR 0 3
80046: PPUSH
80047: LD_EXP 81
80051: PUSH
80052: LD_VAR 0 3
80056: ARRAY
80057: PUSH
80058: LD_VAR 0 1
80062: DIFF
80063: PPUSH
80064: CALL_OW 1
80068: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
80069: LD_VAR 0 1
80073: PUSH
80074: LD_EXP 82
80078: PUSH
80079: LD_VAR 0 3
80083: ARRAY
80084: IN
80085: IFFALSE 80109
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80087: LD_ADDR_EXP 82
80091: PUSH
80092: LD_EXP 82
80096: PPUSH
80097: LD_VAR 0 3
80101: PPUSH
80102: EMPTY
80103: PPUSH
80104: CALL_OW 1
80108: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
80109: LD_VAR 0 1
80113: PPUSH
80114: CALL_OW 247
80118: PUSH
80119: LD_INT 2
80121: EQUAL
80122: PUSH
80123: LD_VAR 0 1
80127: PPUSH
80128: CALL_OW 110
80132: PUSH
80133: LD_INT 20
80135: EQUAL
80136: PUSH
80137: LD_VAR 0 1
80141: PUSH
80142: LD_EXP 74
80146: PUSH
80147: LD_VAR 0 3
80151: ARRAY
80152: IN
80153: OR
80154: AND
80155: IFFALSE 80316
// begin if un in mc_defender [ i ] then
80157: LD_VAR 0 1
80161: PUSH
80162: LD_EXP 74
80166: PUSH
80167: LD_VAR 0 3
80171: ARRAY
80172: IN
80173: IFFALSE 80212
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80175: LD_ADDR_EXP 74
80179: PUSH
80180: LD_EXP 74
80184: PPUSH
80185: LD_VAR 0 3
80189: PPUSH
80190: LD_EXP 74
80194: PUSH
80195: LD_VAR 0 3
80199: ARRAY
80200: PUSH
80201: LD_VAR 0 1
80205: DIFF
80206: PPUSH
80207: CALL_OW 1
80211: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
80212: LD_ADDR_VAR 0 8
80216: PUSH
80217: LD_VAR 0 3
80221: PPUSH
80222: LD_INT 3
80224: PPUSH
80225: CALL 76905 0 2
80229: ST_TO_ADDR
// if fac then
80230: LD_VAR 0 8
80234: IFFALSE 80316
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
80236: LD_ADDR_VAR 0 9
80240: PUSH
80241: LD_VAR 0 8
80245: PPUSH
80246: LD_VAR 0 1
80250: PPUSH
80251: CALL_OW 265
80255: PPUSH
80256: LD_VAR 0 1
80260: PPUSH
80261: CALL_OW 262
80265: PPUSH
80266: LD_VAR 0 1
80270: PPUSH
80271: CALL_OW 263
80275: PPUSH
80276: LD_VAR 0 1
80280: PPUSH
80281: CALL_OW 264
80285: PPUSH
80286: CALL 15021 0 5
80290: ST_TO_ADDR
// if components then
80291: LD_VAR 0 9
80295: IFFALSE 80314
// MC_InsertProduceList ( i , [ components ] ) ;
80297: LD_VAR 0 3
80301: PPUSH
80302: LD_VAR 0 9
80306: PUSH
80307: EMPTY
80308: LIST
80309: PPUSH
80310: CALL 76533 0 2
// break ;
80314: GO 80978
// end ; end ; if GetType ( un ) = unit_building then
80316: LD_VAR 0 1
80320: PPUSH
80321: CALL_OW 247
80325: PUSH
80326: LD_INT 3
80328: EQUAL
80329: IFFALSE 80644
// begin btype := GetBType ( un ) ;
80331: LD_ADDR_VAR 0 5
80335: PUSH
80336: LD_VAR 0 1
80340: PPUSH
80341: CALL_OW 266
80345: ST_TO_ADDR
// if btype = b_warehouse then
80346: LD_VAR 0 5
80350: PUSH
80351: LD_INT 1
80353: EQUAL
80354: IFFALSE 80372
// begin btype := b_depot ;
80356: LD_ADDR_VAR 0 5
80360: PUSH
80361: LD_INT 0
80363: ST_TO_ADDR
// pos := 1 ;
80364: LD_ADDR_VAR 0 6
80368: PUSH
80369: LD_INT 1
80371: ST_TO_ADDR
// end ; if btype = b_factory then
80372: LD_VAR 0 5
80376: PUSH
80377: LD_INT 3
80379: EQUAL
80380: IFFALSE 80398
// begin btype := b_workshop ;
80382: LD_ADDR_VAR 0 5
80386: PUSH
80387: LD_INT 2
80389: ST_TO_ADDR
// pos := 1 ;
80390: LD_ADDR_VAR 0 6
80394: PUSH
80395: LD_INT 1
80397: ST_TO_ADDR
// end ; if btype = b_barracks then
80398: LD_VAR 0 5
80402: PUSH
80403: LD_INT 5
80405: EQUAL
80406: IFFALSE 80416
// btype := b_armoury ;
80408: LD_ADDR_VAR 0 5
80412: PUSH
80413: LD_INT 4
80415: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
80416: LD_VAR 0 5
80420: PUSH
80421: LD_INT 7
80423: PUSH
80424: LD_INT 8
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: IN
80431: IFFALSE 80441
// btype := b_lab ;
80433: LD_ADDR_VAR 0 5
80437: PUSH
80438: LD_INT 6
80440: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
80441: LD_ADDR_EXP 57
80445: PUSH
80446: LD_EXP 57
80450: PPUSH
80451: LD_VAR 0 3
80455: PUSH
80456: LD_EXP 57
80460: PUSH
80461: LD_VAR 0 3
80465: ARRAY
80466: PUSH
80467: LD_INT 1
80469: PLUS
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: PPUSH
80475: LD_VAR 0 5
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: CALL_OW 250
80489: PUSH
80490: LD_VAR 0 1
80494: PPUSH
80495: CALL_OW 251
80499: PUSH
80500: LD_VAR 0 1
80504: PPUSH
80505: CALL_OW 254
80509: PUSH
80510: EMPTY
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: PPUSH
80516: CALL 17428 0 3
80520: ST_TO_ADDR
// if pos = 1 then
80521: LD_VAR 0 6
80525: PUSH
80526: LD_INT 1
80528: EQUAL
80529: IFFALSE 80644
// begin tmp := mc_build_list [ i ] ;
80531: LD_ADDR_VAR 0 7
80535: PUSH
80536: LD_EXP 57
80540: PUSH
80541: LD_VAR 0 3
80545: ARRAY
80546: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80547: LD_VAR 0 7
80551: PPUSH
80552: LD_INT 2
80554: PUSH
80555: LD_INT 30
80557: PUSH
80558: LD_INT 0
80560: PUSH
80561: EMPTY
80562: LIST
80563: LIST
80564: PUSH
80565: LD_INT 30
80567: PUSH
80568: LD_INT 1
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: LIST
80579: PPUSH
80580: CALL_OW 72
80584: IFFALSE 80594
// pos := 2 ;
80586: LD_ADDR_VAR 0 6
80590: PUSH
80591: LD_INT 2
80593: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80594: LD_ADDR_VAR 0 7
80598: PUSH
80599: LD_VAR 0 7
80603: PPUSH
80604: LD_VAR 0 6
80608: PPUSH
80609: LD_VAR 0 7
80613: PPUSH
80614: CALL 17754 0 3
80618: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80619: LD_ADDR_EXP 57
80623: PUSH
80624: LD_EXP 57
80628: PPUSH
80629: LD_VAR 0 3
80633: PPUSH
80634: LD_VAR 0 7
80638: PPUSH
80639: CALL_OW 1
80643: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80644: LD_VAR 0 1
80648: PUSH
80649: LD_EXP 52
80653: PUSH
80654: LD_VAR 0 3
80658: ARRAY
80659: IN
80660: IFFALSE 80699
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80662: LD_ADDR_EXP 52
80666: PUSH
80667: LD_EXP 52
80671: PPUSH
80672: LD_VAR 0 3
80676: PPUSH
80677: LD_EXP 52
80681: PUSH
80682: LD_VAR 0 3
80686: ARRAY
80687: PUSH
80688: LD_VAR 0 1
80692: DIFF
80693: PPUSH
80694: CALL_OW 1
80698: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80699: LD_VAR 0 1
80703: PUSH
80704: LD_EXP 59
80708: PUSH
80709: LD_VAR 0 3
80713: ARRAY
80714: IN
80715: IFFALSE 80754
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80717: LD_ADDR_EXP 59
80721: PUSH
80722: LD_EXP 59
80726: PPUSH
80727: LD_VAR 0 3
80731: PPUSH
80732: LD_EXP 59
80736: PUSH
80737: LD_VAR 0 3
80741: ARRAY
80742: PUSH
80743: LD_VAR 0 1
80747: DIFF
80748: PPUSH
80749: CALL_OW 1
80753: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80754: LD_VAR 0 1
80758: PUSH
80759: LD_EXP 71
80763: PUSH
80764: LD_VAR 0 3
80768: ARRAY
80769: IN
80770: IFFALSE 80809
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80772: LD_ADDR_EXP 71
80776: PUSH
80777: LD_EXP 71
80781: PPUSH
80782: LD_VAR 0 3
80786: PPUSH
80787: LD_EXP 71
80791: PUSH
80792: LD_VAR 0 3
80796: ARRAY
80797: PUSH
80798: LD_VAR 0 1
80802: DIFF
80803: PPUSH
80804: CALL_OW 1
80808: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
80809: LD_VAR 0 1
80813: PUSH
80814: LD_EXP 74
80818: PUSH
80819: LD_VAR 0 3
80823: ARRAY
80824: IN
80825: IFFALSE 80864
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80827: LD_ADDR_EXP 74
80831: PUSH
80832: LD_EXP 74
80836: PPUSH
80837: LD_VAR 0 3
80841: PPUSH
80842: LD_EXP 74
80846: PUSH
80847: LD_VAR 0 3
80851: ARRAY
80852: PUSH
80853: LD_VAR 0 1
80857: DIFF
80858: PPUSH
80859: CALL_OW 1
80863: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80864: LD_VAR 0 1
80868: PUSH
80869: LD_EXP 61
80873: PUSH
80874: LD_VAR 0 3
80878: ARRAY
80879: IN
80880: IFFALSE 80919
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80882: LD_ADDR_EXP 61
80886: PUSH
80887: LD_EXP 61
80891: PPUSH
80892: LD_VAR 0 3
80896: PPUSH
80897: LD_EXP 61
80901: PUSH
80902: LD_VAR 0 3
80906: ARRAY
80907: PUSH
80908: LD_VAR 0 1
80912: DIFF
80913: PPUSH
80914: CALL_OW 1
80918: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80919: LD_VAR 0 1
80923: PUSH
80924: LD_EXP 60
80928: PUSH
80929: LD_VAR 0 3
80933: ARRAY
80934: IN
80935: IFFALSE 80974
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80937: LD_ADDR_EXP 60
80941: PUSH
80942: LD_EXP 60
80946: PPUSH
80947: LD_VAR 0 3
80951: PPUSH
80952: LD_EXP 60
80956: PUSH
80957: LD_VAR 0 3
80961: ARRAY
80962: PUSH
80963: LD_VAR 0 1
80967: DIFF
80968: PPUSH
80969: CALL_OW 1
80973: ST_TO_ADDR
// end ; break ;
80974: GO 80978
// end ;
80976: GO 79903
80978: POP
80979: POP
// end ;
80980: LD_VAR 0 2
80984: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80985: LD_INT 0
80987: PPUSH
80988: PPUSH
80989: PPUSH
// if not mc_bases or not skirmish then
80990: LD_EXP 52
80994: NOT
80995: PUSH
80996: LD_EXP 50
81000: NOT
81001: OR
81002: IFFALSE 81006
// exit ;
81004: GO 81221
// for i = 1 to mc_bases do
81006: LD_ADDR_VAR 0 3
81010: PUSH
81011: DOUBLE
81012: LD_INT 1
81014: DEC
81015: ST_TO_ADDR
81016: LD_EXP 52
81020: PUSH
81021: FOR_TO
81022: IFFALSE 81219
// begin if building in mc_construct_list [ i ] then
81024: LD_VAR 0 1
81028: PUSH
81029: LD_EXP 59
81033: PUSH
81034: LD_VAR 0 3
81038: ARRAY
81039: IN
81040: IFFALSE 81217
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81042: LD_ADDR_EXP 59
81046: PUSH
81047: LD_EXP 59
81051: PPUSH
81052: LD_VAR 0 3
81056: PPUSH
81057: LD_EXP 59
81061: PUSH
81062: LD_VAR 0 3
81066: ARRAY
81067: PUSH
81068: LD_VAR 0 1
81072: DIFF
81073: PPUSH
81074: CALL_OW 1
81078: ST_TO_ADDR
// if building in mc_lab [ i ] then
81079: LD_VAR 0 1
81083: PUSH
81084: LD_EXP 85
81088: PUSH
81089: LD_VAR 0 3
81093: ARRAY
81094: IN
81095: IFFALSE 81150
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
81097: LD_ADDR_EXP 86
81101: PUSH
81102: LD_EXP 86
81106: PPUSH
81107: LD_VAR 0 3
81111: PPUSH
81112: LD_EXP 86
81116: PUSH
81117: LD_VAR 0 3
81121: ARRAY
81122: PPUSH
81123: LD_INT 1
81125: PPUSH
81126: LD_EXP 86
81130: PUSH
81131: LD_VAR 0 3
81135: ARRAY
81136: PPUSH
81137: LD_INT 0
81139: PPUSH
81140: CALL 16846 0 4
81144: PPUSH
81145: CALL_OW 1
81149: ST_TO_ADDR
// if not building in mc_bases [ i ] then
81150: LD_VAR 0 1
81154: PUSH
81155: LD_EXP 52
81159: PUSH
81160: LD_VAR 0 3
81164: ARRAY
81165: IN
81166: NOT
81167: IFFALSE 81213
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81169: LD_ADDR_EXP 52
81173: PUSH
81174: LD_EXP 52
81178: PPUSH
81179: LD_VAR 0 3
81183: PUSH
81184: LD_EXP 52
81188: PUSH
81189: LD_VAR 0 3
81193: ARRAY
81194: PUSH
81195: LD_INT 1
81197: PLUS
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: PPUSH
81203: LD_VAR 0 1
81207: PPUSH
81208: CALL 17428 0 3
81212: ST_TO_ADDR
// exit ;
81213: POP
81214: POP
81215: GO 81221
// end ; end ;
81217: GO 81021
81219: POP
81220: POP
// end ;
81221: LD_VAR 0 2
81225: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
81226: LD_INT 0
81228: PPUSH
81229: PPUSH
81230: PPUSH
81231: PPUSH
81232: PPUSH
81233: PPUSH
81234: PPUSH
// if not mc_bases or not skirmish then
81235: LD_EXP 52
81239: NOT
81240: PUSH
81241: LD_EXP 50
81245: NOT
81246: OR
81247: IFFALSE 81251
// exit ;
81249: GO 81912
// for i = 1 to mc_bases do
81251: LD_ADDR_VAR 0 3
81255: PUSH
81256: DOUBLE
81257: LD_INT 1
81259: DEC
81260: ST_TO_ADDR
81261: LD_EXP 52
81265: PUSH
81266: FOR_TO
81267: IFFALSE 81910
// begin if building in mc_construct_list [ i ] then
81269: LD_VAR 0 1
81273: PUSH
81274: LD_EXP 59
81278: PUSH
81279: LD_VAR 0 3
81283: ARRAY
81284: IN
81285: IFFALSE 81908
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81287: LD_ADDR_EXP 59
81291: PUSH
81292: LD_EXP 59
81296: PPUSH
81297: LD_VAR 0 3
81301: PPUSH
81302: LD_EXP 59
81306: PUSH
81307: LD_VAR 0 3
81311: ARRAY
81312: PUSH
81313: LD_VAR 0 1
81317: DIFF
81318: PPUSH
81319: CALL_OW 1
81323: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81324: LD_ADDR_EXP 52
81328: PUSH
81329: LD_EXP 52
81333: PPUSH
81334: LD_VAR 0 3
81338: PUSH
81339: LD_EXP 52
81343: PUSH
81344: LD_VAR 0 3
81348: ARRAY
81349: PUSH
81350: LD_INT 1
81352: PLUS
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: PPUSH
81358: LD_VAR 0 1
81362: PPUSH
81363: CALL 17428 0 3
81367: ST_TO_ADDR
// btype := GetBType ( building ) ;
81368: LD_ADDR_VAR 0 5
81372: PUSH
81373: LD_VAR 0 1
81377: PPUSH
81378: CALL_OW 266
81382: ST_TO_ADDR
// side := GetSide ( building ) ;
81383: LD_ADDR_VAR 0 8
81387: PUSH
81388: LD_VAR 0 1
81392: PPUSH
81393: CALL_OW 255
81397: ST_TO_ADDR
// if btype = b_lab then
81398: LD_VAR 0 5
81402: PUSH
81403: LD_INT 6
81405: EQUAL
81406: IFFALSE 81456
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81408: LD_ADDR_EXP 85
81412: PUSH
81413: LD_EXP 85
81417: PPUSH
81418: LD_VAR 0 3
81422: PUSH
81423: LD_EXP 85
81427: PUSH
81428: LD_VAR 0 3
81432: ARRAY
81433: PUSH
81434: LD_INT 1
81436: PLUS
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: PPUSH
81442: LD_VAR 0 1
81446: PPUSH
81447: CALL 17428 0 3
81451: ST_TO_ADDR
// exit ;
81452: POP
81453: POP
81454: GO 81912
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
81456: LD_VAR 0 5
81460: PUSH
81461: LD_INT 0
81463: PUSH
81464: LD_INT 2
81466: PUSH
81467: LD_INT 4
81469: PUSH
81470: EMPTY
81471: LIST
81472: LIST
81473: LIST
81474: IN
81475: IFFALSE 81599
// begin if btype = b_armoury then
81477: LD_VAR 0 5
81481: PUSH
81482: LD_INT 4
81484: EQUAL
81485: IFFALSE 81495
// btype := b_barracks ;
81487: LD_ADDR_VAR 0 5
81491: PUSH
81492: LD_INT 5
81494: ST_TO_ADDR
// if btype = b_depot then
81495: LD_VAR 0 5
81499: PUSH
81500: LD_INT 0
81502: EQUAL
81503: IFFALSE 81513
// btype := b_warehouse ;
81505: LD_ADDR_VAR 0 5
81509: PUSH
81510: LD_INT 1
81512: ST_TO_ADDR
// if btype = b_workshop then
81513: LD_VAR 0 5
81517: PUSH
81518: LD_INT 2
81520: EQUAL
81521: IFFALSE 81531
// btype := b_factory ;
81523: LD_ADDR_VAR 0 5
81527: PUSH
81528: LD_INT 3
81530: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
81531: LD_VAR 0 5
81535: PPUSH
81536: LD_VAR 0 8
81540: PPUSH
81541: CALL_OW 323
81545: PUSH
81546: LD_INT 1
81548: EQUAL
81549: IFFALSE 81595
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
81551: LD_ADDR_EXP 84
81555: PUSH
81556: LD_EXP 84
81560: PPUSH
81561: LD_VAR 0 3
81565: PUSH
81566: LD_EXP 84
81570: PUSH
81571: LD_VAR 0 3
81575: ARRAY
81576: PUSH
81577: LD_INT 1
81579: PLUS
81580: PUSH
81581: EMPTY
81582: LIST
81583: LIST
81584: PPUSH
81585: LD_VAR 0 1
81589: PPUSH
81590: CALL 17428 0 3
81594: ST_TO_ADDR
// exit ;
81595: POP
81596: POP
81597: GO 81912
// end ; if btype in [ b_bunker , b_turret ] then
81599: LD_VAR 0 5
81603: PUSH
81604: LD_INT 32
81606: PUSH
81607: LD_INT 33
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: IN
81614: IFFALSE 81904
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81616: LD_ADDR_EXP 60
81620: PUSH
81621: LD_EXP 60
81625: PPUSH
81626: LD_VAR 0 3
81630: PUSH
81631: LD_EXP 60
81635: PUSH
81636: LD_VAR 0 3
81640: ARRAY
81641: PUSH
81642: LD_INT 1
81644: PLUS
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: PPUSH
81650: LD_VAR 0 1
81654: PPUSH
81655: CALL 17428 0 3
81659: ST_TO_ADDR
// if btype = b_bunker then
81660: LD_VAR 0 5
81664: PUSH
81665: LD_INT 32
81667: EQUAL
81668: IFFALSE 81904
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81670: LD_ADDR_EXP 61
81674: PUSH
81675: LD_EXP 61
81679: PPUSH
81680: LD_VAR 0 3
81684: PUSH
81685: LD_EXP 61
81689: PUSH
81690: LD_VAR 0 3
81694: ARRAY
81695: PUSH
81696: LD_INT 1
81698: PLUS
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: PPUSH
81704: LD_VAR 0 1
81708: PPUSH
81709: CALL 17428 0 3
81713: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81714: LD_ADDR_VAR 0 6
81718: PUSH
81719: LD_EXP 52
81723: PUSH
81724: LD_VAR 0 3
81728: ARRAY
81729: PPUSH
81730: LD_INT 25
81732: PUSH
81733: LD_INT 1
81735: PUSH
81736: EMPTY
81737: LIST
81738: LIST
81739: PUSH
81740: LD_INT 3
81742: PUSH
81743: LD_INT 54
81745: PUSH
81746: EMPTY
81747: LIST
81748: PUSH
81749: EMPTY
81750: LIST
81751: LIST
81752: PUSH
81753: EMPTY
81754: LIST
81755: LIST
81756: PPUSH
81757: CALL_OW 72
81761: ST_TO_ADDR
// if tmp then
81762: LD_VAR 0 6
81766: IFFALSE 81772
// exit ;
81768: POP
81769: POP
81770: GO 81912
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81772: LD_ADDR_VAR 0 6
81776: PUSH
81777: LD_EXP 52
81781: PUSH
81782: LD_VAR 0 3
81786: ARRAY
81787: PPUSH
81788: LD_INT 2
81790: PUSH
81791: LD_INT 30
81793: PUSH
81794: LD_INT 4
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: PUSH
81801: LD_INT 30
81803: PUSH
81804: LD_INT 5
81806: PUSH
81807: EMPTY
81808: LIST
81809: LIST
81810: PUSH
81811: EMPTY
81812: LIST
81813: LIST
81814: LIST
81815: PPUSH
81816: CALL_OW 72
81820: ST_TO_ADDR
// if not tmp then
81821: LD_VAR 0 6
81825: NOT
81826: IFFALSE 81832
// exit ;
81828: POP
81829: POP
81830: GO 81912
// for j in tmp do
81832: LD_ADDR_VAR 0 4
81836: PUSH
81837: LD_VAR 0 6
81841: PUSH
81842: FOR_IN
81843: IFFALSE 81902
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81845: LD_ADDR_VAR 0 7
81849: PUSH
81850: LD_VAR 0 4
81854: PPUSH
81855: CALL_OW 313
81859: PPUSH
81860: LD_INT 25
81862: PUSH
81863: LD_INT 1
81865: PUSH
81866: EMPTY
81867: LIST
81868: LIST
81869: PPUSH
81870: CALL_OW 72
81874: ST_TO_ADDR
// if units then
81875: LD_VAR 0 7
81879: IFFALSE 81900
// begin ComExitBuilding ( units [ 1 ] ) ;
81881: LD_VAR 0 7
81885: PUSH
81886: LD_INT 1
81888: ARRAY
81889: PPUSH
81890: CALL_OW 122
// exit ;
81894: POP
81895: POP
81896: POP
81897: POP
81898: GO 81912
// end ; end ;
81900: GO 81842
81902: POP
81903: POP
// end ; end ; exit ;
81904: POP
81905: POP
81906: GO 81912
// end ; end ;
81908: GO 81266
81910: POP
81911: POP
// end ;
81912: LD_VAR 0 2
81916: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81917: LD_INT 0
81919: PPUSH
81920: PPUSH
81921: PPUSH
81922: PPUSH
81923: PPUSH
81924: PPUSH
81925: PPUSH
// if not mc_bases or not skirmish then
81926: LD_EXP 52
81930: NOT
81931: PUSH
81932: LD_EXP 50
81936: NOT
81937: OR
81938: IFFALSE 81942
// exit ;
81940: GO 82173
// btype := GetBType ( building ) ;
81942: LD_ADDR_VAR 0 6
81946: PUSH
81947: LD_VAR 0 1
81951: PPUSH
81952: CALL_OW 266
81956: ST_TO_ADDR
// x := GetX ( building ) ;
81957: LD_ADDR_VAR 0 7
81961: PUSH
81962: LD_VAR 0 1
81966: PPUSH
81967: CALL_OW 250
81971: ST_TO_ADDR
// y := GetY ( building ) ;
81972: LD_ADDR_VAR 0 8
81976: PUSH
81977: LD_VAR 0 1
81981: PPUSH
81982: CALL_OW 251
81986: ST_TO_ADDR
// d := GetDir ( building ) ;
81987: LD_ADDR_VAR 0 9
81991: PUSH
81992: LD_VAR 0 1
81996: PPUSH
81997: CALL_OW 254
82001: ST_TO_ADDR
// for i = 1 to mc_bases do
82002: LD_ADDR_VAR 0 4
82006: PUSH
82007: DOUBLE
82008: LD_INT 1
82010: DEC
82011: ST_TO_ADDR
82012: LD_EXP 52
82016: PUSH
82017: FOR_TO
82018: IFFALSE 82171
// begin if not mc_build_list [ i ] then
82020: LD_EXP 57
82024: PUSH
82025: LD_VAR 0 4
82029: ARRAY
82030: NOT
82031: IFFALSE 82035
// continue ;
82033: GO 82017
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
82035: LD_VAR 0 6
82039: PUSH
82040: LD_VAR 0 7
82044: PUSH
82045: LD_VAR 0 8
82049: PUSH
82050: LD_VAR 0 9
82054: PUSH
82055: EMPTY
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: PPUSH
82061: LD_EXP 57
82065: PUSH
82066: LD_VAR 0 4
82070: ARRAY
82071: PUSH
82072: LD_INT 1
82074: ARRAY
82075: PPUSH
82076: CALL 23597 0 2
82080: IFFALSE 82169
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
82082: LD_ADDR_EXP 57
82086: PUSH
82087: LD_EXP 57
82091: PPUSH
82092: LD_VAR 0 4
82096: PPUSH
82097: LD_EXP 57
82101: PUSH
82102: LD_VAR 0 4
82106: ARRAY
82107: PPUSH
82108: LD_INT 1
82110: PPUSH
82111: CALL_OW 3
82115: PPUSH
82116: CALL_OW 1
82120: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
82121: LD_ADDR_EXP 59
82125: PUSH
82126: LD_EXP 59
82130: PPUSH
82131: LD_VAR 0 4
82135: PUSH
82136: LD_EXP 59
82140: PUSH
82141: LD_VAR 0 4
82145: ARRAY
82146: PUSH
82147: LD_INT 1
82149: PLUS
82150: PUSH
82151: EMPTY
82152: LIST
82153: LIST
82154: PPUSH
82155: LD_VAR 0 1
82159: PPUSH
82160: CALL 17428 0 3
82164: ST_TO_ADDR
// exit ;
82165: POP
82166: POP
82167: GO 82173
// end ; end ;
82169: GO 82017
82171: POP
82172: POP
// end ;
82173: LD_VAR 0 3
82177: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
82178: LD_INT 0
82180: PPUSH
82181: PPUSH
82182: PPUSH
// if not mc_bases or not skirmish then
82183: LD_EXP 52
82187: NOT
82188: PUSH
82189: LD_EXP 50
82193: NOT
82194: OR
82195: IFFALSE 82199
// exit ;
82197: GO 82389
// for i = 1 to mc_bases do
82199: LD_ADDR_VAR 0 4
82203: PUSH
82204: DOUBLE
82205: LD_INT 1
82207: DEC
82208: ST_TO_ADDR
82209: LD_EXP 52
82213: PUSH
82214: FOR_TO
82215: IFFALSE 82302
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
82217: LD_VAR 0 1
82221: PUSH
82222: LD_EXP 60
82226: PUSH
82227: LD_VAR 0 4
82231: ARRAY
82232: IN
82233: PUSH
82234: LD_VAR 0 1
82238: PUSH
82239: LD_EXP 61
82243: PUSH
82244: LD_VAR 0 4
82248: ARRAY
82249: IN
82250: NOT
82251: AND
82252: IFFALSE 82300
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82254: LD_ADDR_EXP 61
82258: PUSH
82259: LD_EXP 61
82263: PPUSH
82264: LD_VAR 0 4
82268: PUSH
82269: LD_EXP 61
82273: PUSH
82274: LD_VAR 0 4
82278: ARRAY
82279: PUSH
82280: LD_INT 1
82282: PLUS
82283: PUSH
82284: EMPTY
82285: LIST
82286: LIST
82287: PPUSH
82288: LD_VAR 0 1
82292: PPUSH
82293: CALL 17428 0 3
82297: ST_TO_ADDR
// break ;
82298: GO 82302
// end ; end ;
82300: GO 82214
82302: POP
82303: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
82304: LD_VAR 0 1
82308: PPUSH
82309: CALL_OW 257
82313: PUSH
82314: LD_EXP 78
82318: IN
82319: PUSH
82320: LD_VAR 0 1
82324: PPUSH
82325: CALL_OW 266
82329: PUSH
82330: LD_INT 5
82332: EQUAL
82333: AND
82334: PUSH
82335: LD_VAR 0 2
82339: PPUSH
82340: CALL_OW 110
82344: PUSH
82345: LD_INT 18
82347: NONEQUAL
82348: AND
82349: IFFALSE 82389
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
82351: LD_VAR 0 2
82355: PPUSH
82356: CALL_OW 257
82360: PUSH
82361: LD_INT 5
82363: PUSH
82364: LD_INT 8
82366: PUSH
82367: LD_INT 9
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: LIST
82374: IN
82375: IFFALSE 82389
// SetClass ( unit , 1 ) ;
82377: LD_VAR 0 2
82381: PPUSH
82382: LD_INT 1
82384: PPUSH
82385: CALL_OW 336
// end ;
82389: LD_VAR 0 3
82393: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82394: LD_INT 0
82396: PPUSH
82397: PPUSH
// if not mc_bases or not skirmish then
82398: LD_EXP 52
82402: NOT
82403: PUSH
82404: LD_EXP 50
82408: NOT
82409: OR
82410: IFFALSE 82414
// exit ;
82412: GO 82530
// if GetLives ( abandoned_vehicle ) > 250 then
82414: LD_VAR 0 2
82418: PPUSH
82419: CALL_OW 256
82423: PUSH
82424: LD_INT 250
82426: GREATER
82427: IFFALSE 82431
// exit ;
82429: GO 82530
// for i = 1 to mc_bases do
82431: LD_ADDR_VAR 0 6
82435: PUSH
82436: DOUBLE
82437: LD_INT 1
82439: DEC
82440: ST_TO_ADDR
82441: LD_EXP 52
82445: PUSH
82446: FOR_TO
82447: IFFALSE 82528
// begin if driver in mc_bases [ i ] then
82449: LD_VAR 0 1
82453: PUSH
82454: LD_EXP 52
82458: PUSH
82459: LD_VAR 0 6
82463: ARRAY
82464: IN
82465: IFFALSE 82526
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
82467: LD_VAR 0 1
82471: PPUSH
82472: LD_EXP 52
82476: PUSH
82477: LD_VAR 0 6
82481: ARRAY
82482: PPUSH
82483: LD_INT 2
82485: PUSH
82486: LD_INT 30
82488: PUSH
82489: LD_INT 0
82491: PUSH
82492: EMPTY
82493: LIST
82494: LIST
82495: PUSH
82496: LD_INT 30
82498: PUSH
82499: LD_INT 1
82501: PUSH
82502: EMPTY
82503: LIST
82504: LIST
82505: PUSH
82506: EMPTY
82507: LIST
82508: LIST
82509: LIST
82510: PPUSH
82511: CALL_OW 72
82515: PUSH
82516: LD_INT 1
82518: ARRAY
82519: PPUSH
82520: CALL_OW 112
// break ;
82524: GO 82528
// end ; end ;
82526: GO 82446
82528: POP
82529: POP
// end ;
82530: LD_VAR 0 5
82534: RET
