// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5228 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2391 0 0
// PrepareBeta ;
  49: CALL 2780 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 11035 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3362 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4087 0 0
// PrepareRUBase_v2 ;
 877: CALL 4503 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 56351 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3974 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10892 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10892 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10892 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10892 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2069
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4831 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2027
// begin AddMedal ( Russians , 1 ) ;
2003: LD_STRING Russians
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2013: LD_EXP 8
2017: PPUSH
2018: LD_STRING DBrighton-F1a
2020: PPUSH
2021: CALL_OW 88
// end else
2025: GO 2057
// begin AddMedal ( Russians , - 1 ) ;
2027: LD_STRING Russians
2029: PPUSH
2030: LD_INT 1
2032: NEG
2033: PPUSH
2034: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2038: LD_EXP 8
2042: PPUSH
2043: LD_STRING DBrighton-F1
2045: PPUSH
2046: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2050: LD_STRING C3
2052: PPUSH
2053: CALL_OW 337
// end ; DialogueOff ;
2057: CALL_OW 7
// JMM_Arrived := true ;
2061: LD_ADDR_EXP 5
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// end ;
2069: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2070: LD_EXP 5
2074: PUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_EXP 18
2082: PPUSH
2083: CALL_OW 292
2087: AND
2088: IFFALSE 2117
2090: GO 2092
2092: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2093: LD_EXP 18
2097: PPUSH
2098: LD_STRING DBurlak
2100: PPUSH
2101: CALL_OW 88
// Say ( JMM , DJMM ) ;
2105: LD_EXP 36
2109: PPUSH
2110: LD_STRING DJMM
2112: PPUSH
2113: CALL_OW 88
// end ;
2117: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2118: LD_INT 1
2120: PUSH
2121: LD_INT 22
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: LD_INT 34
2136: PUSH
2137: LD_INT 9
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 35
2146: PUSH
2147: LD_INT 9
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 69
2168: PUSH
2169: LD_INT 1
2171: GREATER
2172: IFFALSE 2185
2174: GO 2176
2176: DISABLE
// begin LaserBuilt := true ;
2177: LD_ADDR_EXP 6
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// end ;
2185: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2186: LD_EXP 7
2190: PUSH
2191: LD_INT 6
2193: PPUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 9
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PPUSH
2230: LD_EXP 15
2234: PPUSH
2235: CALL_OW 310
2239: PPUSH
2240: CALL_OW 74
2244: PPUSH
2245: CALL_OW 292
2249: AND
2250: IFFALSE 2286
2252: GO 2254
2254: DISABLE
// begin wait ( 0 0$5 ) ;
2255: LD_INT 175
2257: PPUSH
2258: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_STRING DDeath-Vse-2
2269: PPUSH
2270: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2274: LD_EXP 12
2278: PPUSH
2279: LD_STRING DDeath-Yas-2
2281: PPUSH
2282: CALL_OW 88
// end ;
2286: END
// every 0 0$1 trigger AssaultStarted do
2287: LD_EXP 7
2291: IFFALSE 2315
2293: GO 2295
2295: DISABLE
// begin wait ( 0 0$20 ) ;
2296: LD_INT 700
2298: PPUSH
2299: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2303: LD_EXP 13
2307: PPUSH
2308: LD_STRING DDeath-Pop-2
2310: PPUSH
2311: CALL_OW 88
// end ;
2315: END
// every 0 0$1 trigger MissionStart do
2316: LD_EXP 1
2320: IFFALSE 2362
2322: GO 2324
2324: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2325: LD_INT 1750
2327: PPUSH
2328: LD_INT 4900
2330: PPUSH
2331: CALL_OW 12
2335: PPUSH
2336: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 5
2345: PPUSH
2346: CALL_OW 12
2350: PPUSH
2351: LD_INT 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 55
// enable ;
2361: ENABLE
// end ;
2362: END
// every 0 0$1 trigger MissionStart do
2363: LD_EXP 1
2367: IFFALSE 2390
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// display_Strings := [ #tick , tick ] ;
2373: LD_ADDR_OWVAR 47
2377: PUSH
2378: LD_STRING #tick
2380: PUSH
2381: LD_OWVAR 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// end ; end_of_file
2390: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2391: LD_INT 0
2393: PPUSH
// uc_side := 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_class = class_soldier ;
2402: LD_ADDR_OWVAR 28
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// uc_nation := nation_american ;
2410: LD_ADDR_OWVAR 21
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// hc_sex = sex_male ;
2418: LD_ADDR_OWVAR 27
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// hc_importance = 110 ;
2426: LD_ADDR_OWVAR 32
2430: PUSH
2431: LD_INT 110
2433: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2434: LD_ADDR_OWVAR 30
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 4
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 9
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 6
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 12
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING Gerard Brighton
2502: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2503: LD_ADDR_OWVAR 33
2507: PUSH
2508: LD_STRING Beta_Skirmish
2510: ST_TO_ADDR
// hc_face_number := 1 ;
2511: LD_ADDR_OWVAR 34
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// Brighton := CreateHuman ;
2519: LD_ADDR_EXP 8
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// hc_importance = 80 ;
2537: LD_ADDR_OWVAR 32
2541: PUSH
2542: LD_INT 80
2544: ST_TO_ADDR
// hc_sex = sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2553: LD_ADDR_OWVAR 30
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2576: LD_ADDR_OWVAR 31
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 6
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2599: LD_ADDR_OWVAR 29
2603: PUSH
2604: LD_INT 10
2606: PUSH
2607: LD_INT 10
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_name := Brian Palmer ;
2614: LD_ADDR_OWVAR 26
2618: PUSH
2619: LD_STRING Brian Palmer
2621: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING Beta_Skirmish
2629: ST_TO_ADDR
// hc_face_number := 3 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// Palmer := CreateHuman ;
2638: LD_ADDR_EXP 9
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// hc_class = class_scientistic ;
2648: LD_ADDR_OWVAR 28
2652: PUSH
2653: LD_INT 4
2655: ST_TO_ADDR
// uc_nation := nation_american ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// hc_importance = 70 ;
2664: LD_ADDR_OWVAR 32
2668: PUSH
2669: LD_INT 70
2671: ST_TO_ADDR
// hc_sex = sex_female ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2680: LD_ADDR_OWVAR 30
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2703: LD_ADDR_OWVAR 31
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 8
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2726: LD_ADDR_OWVAR 29
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: LD_INT 10
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_name := Megan Armitage ;
2741: LD_ADDR_OWVAR 26
2745: PUSH
2746: LD_STRING Megan Armitage
2748: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2749: LD_ADDR_OWVAR 33
2753: PUSH
2754: LD_STRING Beta_Skirmish
2756: ST_TO_ADDR
// hc_face_number := 4 ;
2757: LD_ADDR_OWVAR 34
2761: PUSH
2762: LD_INT 4
2764: ST_TO_ADDR
// Megan := CreateHuman ;
2765: LD_ADDR_EXP 10
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 1
2779: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
// uc_side := 1 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_nation := nation_american ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 32
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2893
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2840: LD_VAR 0 2
2844: PPUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 11
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 4
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 7
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
2891: GO 2837
2893: POP
2894: POP
// hc_name :=  ;
2895: LD_ADDR_OWVAR 26
2899: PUSH
2900: LD_STRING 
2902: ST_TO_ADDR
// hc_gallery :=  ;
2903: LD_ADDR_OWVAR 33
2907: PUSH
2908: LD_STRING 
2910: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
2911: LD_ADDR_VAR 0 2
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_INT 6
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: PUSH
2941: FOR_TO
2942: IFFALSE 3000
// begin PrepareSoldier ( 1 , game_skill ) ;
2944: LD_INT 1
2946: PPUSH
2947: LD_EXP 38
2951: PPUSH
2952: CALL_OW 381
// un := CreateHuman ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// filter := filter ^ un ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: LD_VAR 0 4
2996: ADD
2997: ST_TO_ADDR
// end ;
2998: GO 2941
3000: POP
3001: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_OWVAR 67
3030: ARRAY
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3087
// begin PrepareEngineer ( 0 , game_skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_EXP 38
3042: PPUSH
3043: CALL_OW 382
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// filter := filter ^ un ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_VAR 0 4
3071: ADD
3072: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 52
// end ;
3085: GO 3032
3087: POP
3088: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 4
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3174
// begin PrepareMechanic ( 0 , game_skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// filter := filter ^ un ;
3144: LD_ADDR_VAR 0 3
3148: PUSH
3149: LD_VAR 0 3
3153: PUSH
3154: LD_VAR 0 4
3158: ADD
3159: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3160: LD_VAR 0 4
3164: PPUSH
3165: LD_INT 8
3167: PPUSH
3168: CALL_OW 52
// end ;
3172: GO 3119
3174: POP
3175: POP
// for i = 1 to 2 do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_INT 2
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3244
// begin PrepareScientist ( 0 , game_skill ) ;
3192: LD_INT 0
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 384
// un := CreateHuman ;
3204: LD_ADDR_VAR 0 4
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// filter := filter ^ un ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_VAR 0 4
3228: ADD
3229: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_INT 14
3237: PPUSH
3238: CALL_OW 52
// end ;
3242: GO 3189
3244: POP
3245: POP
// for i = 1 to soldiers do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_VAR 0 5
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3287
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3264: LD_VAR 0 5
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
3285: GO 3261
3287: POP
3288: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_INT 51
3296: PPUSH
3297: LD_INT 43
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3307: LD_EXP 9
3311: PPUSH
3312: LD_INT 55
3314: PPUSH
3315: LD_INT 58
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3325: LD_EXP 10
3329: PPUSH
3330: LD_INT 39
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: CALL_OW 48
// BetaSquad := filter diff 0 ;
3343: LD_ADDR_EXP 11
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 0
3355: DIFF
3356: ST_TO_ADDR
// end ;
3357: LD_VAR 0 1
3361: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// uc_side := 6 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 6
3377: ST_TO_ADDR
// uc_nation := nation_russian ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// soldiers := [ ] ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// vehs := [ ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// RUArmada := [ ] ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3407: LD_ADDR_EXP 12
3411: PUSH
3412: LD_STRING Yashin
3414: PPUSH
3415: CALL_OW 25
3419: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3420: LD_ADDR_EXP 13
3424: PUSH
3425: LD_STRING Popov
3427: PPUSH
3428: CALL_OW 25
3432: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3433: LD_ADDR_EXP 14
3437: PUSH
3438: LD_STRING Gaydar
3440: PPUSH
3441: CALL_OW 25
3445: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3446: LD_ADDR_EXP 15
3450: PUSH
3451: LD_STRING Vsevolod
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// for i = 1 to 16 do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_INT 16
3471: PUSH
3472: FOR_TO
3473: IFFALSE 3515
// begin PrepareSoldier ( 0 , game_eskill ) ;
3475: LD_INT 0
3477: PPUSH
3478: LD_EXP 39
3482: PPUSH
3483: CALL_OW 381
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_VAR 0 5
3511: ADD
3512: ST_TO_ADDR
// end ;
3513: GO 3472
3515: POP
3516: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_EXP 12
3526: PUSH
3527: LD_EXP 13
3531: ADD
3532: PUSH
3533: LD_EXP 14
3537: ADD
3538: PUSH
3539: LD_EXP 15
3543: ADD
3544: PUSH
3545: LD_VAR 0 4
3549: ADD
3550: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3551: LD_INT 24
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 46
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL 18148 0 5
// for i = 1 to 8 do
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_INT 8
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3667
// begin vehicle := CreateVehicle ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 3
3609: PPUSH
3610: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 4
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: DIFF
3633: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// vehs := vehs ^ vehicle ;
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 3
3663: ADD
3664: ST_TO_ADDR
// end ;
3665: GO 3583
3667: POP
3668: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3669: LD_INT 24
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 43
3680: PPUSH
3681: LD_INT 100
3683: PPUSH
3684: CALL 18148 0 5
// for i = 1 to 8 do
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: DOUBLE
3694: LD_INT 1
3696: DEC
3697: ST_TO_ADDR
3698: LD_INT 8
3700: PUSH
3701: FOR_TO
3702: IFFALSE 3785
// begin vehicle := CreateVehicle ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: DIFF
3751: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// vehs := vehs ^ vehicle ;
3767: LD_ADDR_VAR 0 6
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_VAR 0 3
3781: ADD
3782: ST_TO_ADDR
// end ;
3783: GO 3701
3785: POP
3786: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3787: LD_INT 22
3789: PPUSH
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_INT 44
3798: PPUSH
3799: LD_INT 100
3801: PPUSH
3802: CALL 18148 0 5
// for i = 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3903
// begin vehicle := CreateVehicle ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3832: LD_VAR 0 4
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: LD_VAR 0 3
3845: PPUSH
3846: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: DIFF
3869: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// vehs := vehs ^ vehicle ;
3885: LD_ADDR_VAR 0 6
3889: PUSH
3890: LD_VAR 0 6
3894: PUSH
3895: LD_VAR 0 3
3899: ADD
3900: ST_TO_ADDR
// end ;
3901: GO 3819
3903: POP
3904: POP
// RUArmada := vehs ;
3905: LD_ADDR_EXP 16
3909: PUSH
3910: LD_VAR 0 6
3914: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3915: LD_EXP 12
3919: PPUSH
3920: CALL_OW 310
3924: PUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 310
3934: PUSH
3935: LD_EXP 14
3939: PPUSH
3940: CALL_OW 310
3944: PUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 310
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: LD_INT 6
3963: NEG
3964: PPUSH
3965: CALL_OW 242
// end ;
3969: LD_VAR 0 1
3973: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 6 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 6
3986: ST_TO_ADDR
// uc_nation := nation_russian ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 3
3994: ST_TO_ADDR
// Bulldozers := [ ] ;
3995: LD_ADDR_EXP 17
3999: PUSH
4000: EMPTY
4001: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4002: LD_INT 24
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 53
4013: PPUSH
4014: LD_INT 100
4016: PPUSH
4017: CALL 18148 0 5
// for i = 1 to 2 do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: DOUBLE
4027: LD_INT 1
4029: DEC
4030: ST_TO_ADDR
4031: LD_INT 2
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4080
// begin vehicle := CreateVehicle ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 45
4046: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4062: LD_ADDR_EXP 17
4066: PUSH
4067: LD_EXP 17
4071: PUSH
4072: LD_VAR 0 3
4076: ADD
4077: ST_TO_ADDR
// end ;
4078: GO 4034
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// uc_side := 3 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// uc_nation := nation_russian ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_INT 3
4108: ST_TO_ADDR
// hc_name :=  ;
4109: LD_ADDR_OWVAR 26
4113: PUSH
4114: LD_STRING 
4116: ST_TO_ADDR
// hc_gallery :=  ;
4117: LD_ADDR_OWVAR 33
4121: PUSH
4122: LD_STRING 
4124: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4125: LD_ADDR_EXP 18
4129: PUSH
4130: LD_STRING Burlak
4132: PPUSH
4133: CALL_OW 25
4137: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4138: LD_ADDR_EXP 19
4142: PUSH
4143: LD_STRING Gleb
4145: PPUSH
4146: CALL_OW 25
4150: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4151: LD_ADDR_EXP 20
4155: PUSH
4156: LD_STRING Furmanov
4158: PPUSH
4159: CALL_OW 25
4163: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4164: LD_ADDR_EXP 21
4168: PUSH
4169: LD_STRING Titov
4171: PPUSH
4172: CALL_OW 25
4176: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4177: LD_ADDR_EXP 22
4181: PUSH
4182: LD_STRING Scholtze
4184: PPUSH
4185: CALL_OW 25
4189: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4190: LD_ADDR_EXP 23
4194: PUSH
4195: LD_STRING Dolgov
4197: PPUSH
4198: CALL_OW 25
4202: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4203: LD_ADDR_EXP 24
4207: PUSH
4208: LD_STRING Kapitsova
4210: PPUSH
4211: CALL_OW 25
4215: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4216: LD_ADDR_EXP 25
4220: PUSH
4221: LD_STRING Karamazov
4223: PPUSH
4224: CALL_OW 25
4228: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Kirlenkova
4236: PPUSH
4237: CALL_OW 25
4241: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4242: LD_ADDR_EXP 27
4246: PUSH
4247: LD_STRING Kovalyuk
4249: PPUSH
4250: CALL_OW 25
4254: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4255: LD_ADDR_EXP 28
4259: PUSH
4260: LD_STRING Kozlov
4262: PPUSH
4263: CALL_OW 25
4267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4268: LD_ADDR_EXP 29
4272: PUSH
4273: LD_STRING Kuzmov
4275: PPUSH
4276: CALL_OW 25
4280: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4281: LD_ADDR_EXP 30
4285: PUSH
4286: LD_STRING Lipshchin
4288: PPUSH
4289: CALL_OW 25
4293: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4294: LD_ADDR_EXP 31
4298: PUSH
4299: LD_STRING Oblukov
4301: PPUSH
4302: CALL_OW 25
4306: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_STRING Xavier2
4314: PPUSH
4315: CALL_OW 25
4319: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4320: LD_ADDR_EXP 33
4324: PUSH
4325: LD_STRING Gnyevko
4327: PPUSH
4328: CALL_OW 25
4332: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4333: LD_ADDR_EXP 34
4337: PUSH
4338: LD_STRING Belkov
4340: PPUSH
4341: CALL_OW 25
4345: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 18
4355: PUSH
4356: LD_EXP 19
4360: PUSH
4361: LD_EXP 20
4365: PUSH
4366: LD_EXP 21
4370: PUSH
4371: LD_EXP 22
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 24
4385: PUSH
4386: LD_EXP 25
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_EXP 27
4400: PUSH
4401: LD_EXP 28
4405: PUSH
4406: LD_EXP 29
4410: PUSH
4411: LD_EXP 30
4415: PUSH
4416: LD_EXP 31
4420: PUSH
4421: LD_EXP 32
4425: PUSH
4426: LD_EXP 33
4430: PUSH
4431: LD_EXP 34
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// for i = 1 to filter do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 6
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// for i = 1 to 8 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4597
// begin PrepareSoldier ( 0 , game_eskill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_EXP 39
4564: PPUSH
4565: CALL_OW 381
// un := CreateHuman ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 44
4578: ST_TO_ADDR
// filter := filter ^ un ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_VAR 0 4
4593: ADD
4594: ST_TO_ADDR
// end ;
4595: GO 4554
4597: POP
4598: POP
// for i = 1 to 4 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 4
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4655
// begin PrepareEngineer ( 0 , game_eskill ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_EXP 39
4622: PPUSH
4623: CALL_OW 382
// un := CreateHuman ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: CALL_OW 44
4636: ST_TO_ADDR
// filter := filter ^ un ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ADD
4652: ST_TO_ADDR
// end ;
4653: GO 4612
4655: POP
4656: POP
// for i = 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4713
// begin PrepareMechanic ( 0 , game_eskill ) ;
4673: LD_INT 0
4675: PPUSH
4676: LD_EXP 39
4680: PPUSH
4681: CALL_OW 383
// un := CreateHuman ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: CALL_OW 44
4694: ST_TO_ADDR
// filter := filter ^ un ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_VAR 0 4
4709: ADD
4710: ST_TO_ADDR
// end ;
4711: GO 4670
4713: POP
4714: POP
// for i = 1 to 4 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 4
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4771
// begin PrepareScientist ( 0 , game_eskill ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 384
// un := CreateHuman ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: CALL_OW 44
4752: ST_TO_ADDR
// filter := filter ^ un ;
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 4
4767: ADD
4768: ST_TO_ADDR
// end ;
4769: GO 4728
4771: POP
4772: POP
// for i = 1 to filter do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4791: LD_VAR 0 3
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// RU_SecondPersonnel := filter ;
4816: LD_ADDR_EXP 35
4820: PUSH
4821: LD_VAR 0 3
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 1
4830: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := nation_american ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4856: LD_ADDR_EXP 36
4860: PUSH
4861: LD_STRING JMM
4863: PPUSH
4864: CALL_OW 25
4868: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4869: LD_EXP 36
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4881: LD_EXP 36
4885: PPUSH
4886: LD_INT 7
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 49
// mechs := [ ] ;
4896: LD_ADDR_VAR 0 7
4900: PUSH
4901: EMPTY
4902: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_INT 4
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 4995
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4936: LD_INT 0
4938: PPUSH
4939: LD_EXP 38
4943: PUSH
4944: LD_INT 1
4946: PLUS
4947: PPUSH
4948: CALL_OW 381
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_VAR 0 4
4976: ADD
4977: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_INT 7
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// end ;
4993: GO 4933
4995: POP
4996: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 7
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5074
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 38
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: PPUSH
5042: CALL_OW 383
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// mechs := mechs ^ un ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_VAR 0 4
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 5027
5074: POP
5075: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 5
5087: PPUSH
5088: LD_INT 100
5090: PPUSH
5091: CALL 18148 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_INT 7
5107: PUSH
5108: LD_INT 6
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PUSH
5119: LD_OWVAR 67
5123: ARRAY
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5221
// begin vehicle := CreateVehicle ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: CALL_OW 45
5137: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5156: LD_ADDR_VAR 0 7
5160: PUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_VAR 0 7
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: DIFF
5175: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5188: LD_VAR 0 6
5192: PPUSH
5193: LD_INT 7
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// vehs := vehs ^ vehicle ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 6
5217: ADD
5218: ST_TO_ADDR
// end ;
5219: GO 5125
5221: POP
5222: POP
// end ; end_of_file
5223: LD_VAR 0 1
5227: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5228: LD_INT 0
5230: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5231: LD_ADDR_OWVAR 67
5235: PUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 426
5243: ST_TO_ADDR
// game_diff := Difficulty ;
5244: LD_ADDR_EXP 37
5248: PUSH
5249: LD_OWVAR 67
5253: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5254: LD_ADDR_EXP 38
5258: PUSH
5259: LD_INT 7
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 6
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 37
5277: ARRAY
5278: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5279: LD_ADDR_EXP 39
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: LD_INT 7
5289: PUSH
5290: LD_INT 8
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 37
5302: ARRAY
5303: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5304: LD_ADDR_EXP 41
5308: PUSH
5309: LD_INT 10500
5311: PUSH
5312: LD_INT 6300
5314: PUSH
5315: LD_INT 4200
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_EXP 37
5327: ARRAY
5328: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: LD_INT 73500
5336: PUSH
5337: LD_INT 94500
5339: PUSH
5340: LD_INT 115500
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_EXP 37
5352: ARRAY
5353: ST_TO_ADDR
// end ; end_of_file
5354: LD_VAR 0 1
5358: RET
// export function CustomEvent ( event ) ; begin
5359: LD_INT 0
5361: PPUSH
// end ;
5362: LD_VAR 0 2
5366: RET
// export function CustomInitMacro ( ) ; begin
5367: LD_INT 0
5369: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: CALL 79095 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL 79039 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 136
5395: PUSH
5396: LD_INT 130
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 145
5409: PUSH
5410: LD_INT 123
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 78098 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 43
5434: PUSH
5435: LD_INT 46
5437: PUSH
5438: LD_INT 45
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL 78927 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5450: LD_INT 1
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: CALL 78609 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: CALL 78340 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 8
5475: PPUSH
5476: CALL 77959 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 43
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 44
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 3
5527: PUSH
5528: LD_INT 45
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 24
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 43
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: LD_INT 43
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: LD_INT 46
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 43
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 44
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL 77774 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 0
5646: PUSH
5647: LD_INT 127
5649: PUSH
5650: LD_INT 125
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 124
5667: PUSH
5668: LD_INT 132
5670: PUSH
5671: LD_INT 0
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 29
5682: PUSH
5683: LD_INT 136
5685: PUSH
5686: LD_INT 130
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 4
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: LD_INT 114
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 145
5721: PUSH
5722: LD_INT 123
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 150
5739: PUSH
5740: LD_INT 135
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 140
5757: PUSH
5758: LD_INT 134
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 137
5775: PUSH
5776: LD_INT 121
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: LD_INT 155
5793: PUSH
5794: LD_INT 130
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: LD_INT 155
5811: PUSH
5812: LD_INT 130
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 130
5829: PUSH
5830: LD_INT 114
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 32
5844: PUSH
5845: LD_INT 142
5847: PUSH
5848: LD_INT 115
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 32
5862: PUSH
5863: LD_INT 153
5865: PUSH
5866: LD_INT 120
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL 77666 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5897: LD_INT 1
5899: PPUSH
5900: LD_INT 10
5902: PUSH
5903: LD_INT 12
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL 78516 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 155
5919: PPUSH
5920: LD_INT 130
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: LD_INT 24
5928: PUSH
5929: LD_INT 16
5931: PUSH
5932: LD_INT 17
5934: PUSH
5935: LD_INT 18
5937: PUSH
5938: LD_INT 21
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL 78721 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL 79095 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5962: LD_INT 2
5964: PPUSH
5965: LD_INT 4
5967: PPUSH
5968: CALL 79039 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 84
5977: PUSH
5978: LD_INT 125
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: PPUSH
5992: CALL 78098 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 43
6001: PUSH
6002: LD_INT 46
6004: PUSH
6005: LD_INT 45
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL 78927 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: CALL 78609 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL 78340 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL 77959 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_INT 43
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 44
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: LD_INT 45
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 43
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 43
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 24
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 46
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 43
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 44
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 77774 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 96
6216: PUSH
6217: LD_INT 125
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 74
6234: PUSH
6235: LD_INT 122
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 84
6252: PUSH
6253: LD_INT 125
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 28
6267: PUSH
6268: LD_INT 86
6270: PUSH
6271: LD_INT 128
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 28
6285: PUSH
6286: LD_INT 85
6288: PUSH
6289: LD_INT 130
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 88
6306: PUSH
6307: LD_INT 132
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 106
6324: PUSH
6325: LD_INT 130
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 99
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 72
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 78
6378: PUSH
6379: LD_INT 110
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 110
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 32
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL 77666 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 14
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL 78516 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 106
6467: PPUSH
6468: LD_INT 130
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: LD_INT 24
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 18
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 78721 0 5
// end ;
6500: LD_VAR 0 1
6504: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 30
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: IFFALSE 7389
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6546: LD_INT 6300
6548: PUSH
6549: LD_INT 4200
6551: PUSH
6552: LD_INT 2100
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: PPUSH
6566: CALL_OW 67
// base := 2 ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: NOT
6607: IFFALSE 6611
// continue ;
6609: GO 6546
// case Rand ( 1 , 3 ) of 1 :
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6806
6630: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 46
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 24
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 43
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 45
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 43
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 24
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 46
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL 77822 0 2
// end ; 2 :
6804: GO 7137
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6952
6814: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 43
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 46
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 24
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 43
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 46
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 45
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL 77822 0 2
// end ; 3 :
6950: GO 7137
6952: LD_INT 3
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7136
6960: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 43
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 24
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 46
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 43
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 46
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 45
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: LD_INT 43
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 46
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 3
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL 77822 0 2
// end ; end ;
7134: GO 7137
7136: POP
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7144: LD_VAR 0 2
7148: PPUSH
7149: CALL 78170 0 1
7153: PUSH
7154: LD_INT 0
7156: EQUAL
7157: IFFALSE 7137
// wait ( 0 0$30 ) ;
7159: LD_INT 1050
7161: PPUSH
7162: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 86
7173: PUSH
7174: LD_INT 77
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 63
7183: PUSH
7184: LD_INT 38
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_EXP 71
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PUSH
7258: LD_EXP 74
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: DIFF
7269: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7270: LD_ADDR_EXP 71
7274: PUSH
7275: LD_EXP 71
7279: PPUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_EXP 71
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 6
7300: DIFF
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// if not attackers then
7307: LD_VAR 0 6
7311: NOT
7312: IFFALSE 7316
// continue ;
7314: GO 6546
// repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_INT 60
7330: PUSH
7331: EMPTY
7332: LIST
7333: PPUSH
7334: CALL_OW 72
7338: NOT
7339: IFFALSE 7316
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL 78007 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7365: LD_EXP 52
7369: PUSH
7370: LD_VAR 0 2
7374: ARRAY
7375: PPUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 72
7386: NOT
7387: IFFALSE 6546
// end ;
7389: PPOPN 6
7391: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 8317
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7433: LD_INT 6300
7435: PUSH
7436: LD_INT 4200
7438: PUSH
7439: LD_INT 2100
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: LD_OWVAR 67
7451: ARRAY
7452: PPUSH
7453: CALL_OW 67
// base := 1 ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: NOT
7494: IFFALSE 7498
// continue ;
7496: GO 7433
// case Rand ( 1 , 3 ) of 1 :
7498: LD_INT 1
7500: PPUSH
7501: LD_INT 3
7503: PPUSH
7504: CALL_OW 12
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7693
7517: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 43
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 46
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 24
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 43
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 45
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 43
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 46
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 45
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL 77822 0 2
// end ; 2 :
7691: GO 8062
7693: LD_INT 2
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7877
7701: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_INT 46
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: LD_INT 46
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 45
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 45
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 45
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL 77822 0 2
// end ; 3 :
7875: GO 8062
7877: LD_INT 3
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8061
7885: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 43
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 46
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 22
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 43
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 45
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 43
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 45
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: CALL 77822 0 2
// end ; end ;
8059: GO 8062
8061: POP
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 79240 0 2
8081: PUSH
8082: LD_INT 8
8084: GREATEREQUAL
8085: IFFALSE 8062
// wait ( 0 0$30 ) ;
8087: LD_INT 1050
8089: PPUSH
8090: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8094: LD_ADDR_VAR 0 5
8098: PUSH
8099: LD_INT 144
8101: PUSH
8102: LD_INT 65
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 63
8111: PUSH
8112: LD_INT 38
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 0
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 71
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_EXP 74
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: DIFF
8197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8198: LD_ADDR_EXP 71
8202: PUSH
8203: LD_EXP 71
8207: PPUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_EXP 71
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 6
8228: DIFF
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// if not attackers then
8235: LD_VAR 0 6
8239: NOT
8240: IFFALSE 8244
// continue ;
8242: GO 7433
// repeat wait ( 0 0$1 ) ;
8244: LD_INT 35
8246: PPUSH
8247: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 60
8258: PUSH
8259: EMPTY
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: NOT
8267: IFFALSE 8244
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 6
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: LD_VAR 0 4
8288: PPUSH
8289: CALL 78007 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8293: LD_EXP 52
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 50
8306: PUSH
8307: EMPTY
8308: LIST
8309: PPUSH
8310: CALL_OW 72
8314: NOT
8315: IFFALSE 7433
// end ;
8317: PPOPN 6
8319: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8320: LD_EXP 3
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: LD_INT 0
8356: EQUAL
8357: AND
8358: IFFALSE 8371
8360: GO 8362
8362: DISABLE
// begin RussiansDefeated := true ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// end ;
8371: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8372: LD_EXP 3
8376: PUSH
8377: LD_EXP 5
8381: NOT
8382: AND
8383: IFFALSE 9356
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8402: LD_INT 10500
8404: PPUSH
8405: LD_INT 13650
8407: PPUSH
8408: CALL_OW 12
8412: PUSH
8413: LD_INT 9450
8415: PPUSH
8416: LD_INT 11550
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 8400
8426: PPUSH
8427: LD_INT 10500
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 67
// filter := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_INT 2
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 12
8472: PUSH
8473: LD_INT 3
8475: PPUSH
8476: LD_INT 4
8478: PPUSH
8479: CALL_OW 12
8483: PUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 12
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_OWVAR 67
8504: ARRAY
8505: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 3
8557: PPUSH
8558: CALL_OW 12
8562: PUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: CALL_OW 12
8573: PUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 5
8579: PPUSH
8580: CALL_OW 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: LD_OWVAR 67
8594: ARRAY
8595: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8596: LD_ADDR_VAR 0 8
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: ST_TO_ADDR
// uc_side := 3 ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
// uc_nation := nation_russian ;
8629: LD_ADDR_OWVAR 21
8633: PUSH
8634: LD_INT 3
8636: ST_TO_ADDR
// for i = 1 to soldiers do
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 4
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8695
// begin PrepareSoldier ( 0 , game_eskill ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_EXP 39
8662: PPUSH
8663: CALL_OW 381
// un := CreateHuman ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// filter := filter ^ un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8652
8695: POP
8696: POP
// for i = 1 to bazookas do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_VAR 0 5
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8763
// begin PrepareSoldier ( 0 , game_eskill ) ;
8715: LD_INT 0
8717: PPUSH
8718: LD_EXP 39
8722: PPUSH
8723: CALL_OW 381
// hc_class := class_bazooker ;
8727: LD_ADDR_OWVAR 28
8731: PUSH
8732: LD_INT 9
8734: ST_TO_ADDR
// un := CreateHuman ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// filter := filter ^ un ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8712
8763: POP
8764: POP
// for i = 1 to medics do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_VAR 0 8
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8823
// begin PrepareScientist ( 0 , game_eskill ) ;
8783: LD_INT 0
8785: PPUSH
8786: LD_EXP 39
8790: PPUSH
8791: CALL_OW 384
// un := CreateHuman ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: CALL_OW 44
8804: ST_TO_ADDR
// filter := filter ^ un ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_VAR 0 2
8819: ADD
8820: ST_TO_ADDR
// end ;
8821: GO 8780
8823: POP
8824: POP
// for i = 1 to vehs do
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_TO
8841: IFFALSE 9033
// begin case Rand ( 1 , 5 ) of 1 :
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 12
8853: PUSH
8854: LD_INT 1
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8884
8862: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8863: LD_INT 22
8865: PPUSH
8866: LD_INT 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 43
8874: PPUSH
8875: LD_INT 100
8877: PPUSH
8878: CALL 18148 0 5
8882: GO 9005
8884: LD_INT 2
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8914
8892: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8893: LD_INT 22
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: LD_INT 44
8904: PPUSH
8905: LD_INT 100
8907: PPUSH
8908: CALL 18148 0 5
8912: GO 9005
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8944
8922: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8923: LD_INT 22
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_INT 45
8934: PPUSH
8935: LD_INT 100
8937: PPUSH
8938: CALL 18148 0 5
8942: GO 9005
8944: LD_INT 4
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8974
8952: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8953: LD_INT 24
8955: PPUSH
8956: LD_INT 3
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: LD_INT 43
8964: PPUSH
8965: LD_INT 100
8967: PPUSH
8968: CALL 18148 0 5
8972: GO 9005
8974: LD_INT 5
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9004
8982: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: LD_INT 46
8994: PPUSH
8995: LD_INT 100
8997: PPUSH
8998: CALL 18148 0 5
9002: GO 9005
9004: POP
// vehicle := CreateVehicle ;
9005: LD_ADDR_VAR 0 7
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// filter := filter ^ vehicle ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 7
9029: ADD
9030: ST_TO_ADDR
// end ;
9031: GO 8840
9033: POP
9034: POP
// for i = 1 to filter do
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: DOUBLE
9041: LD_INT 1
9043: DEC
9044: ST_TO_ADDR
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9076
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 1
9062: ARRAY
9063: PPUSH
9064: LD_INT 14
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
9074: GO 9050
9076: POP
9077: POP
// case Rand ( 1 , 3 ) of 1 :
9078: LD_INT 1
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: CALL_OW 12
9088: PUSH
9089: LD_INT 1
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9151
9097: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9098: LD_ADDR_VAR 0 11
9102: PUSH
9103: LD_INT 165
9105: PUSH
9106: LD_INT 114
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 104
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 77
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 63
9135: PUSH
9136: LD_INT 38
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9276
9151: LD_INT 2
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9213
9159: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9160: LD_ADDR_VAR 0 11
9164: PUSH
9165: LD_INT 165
9167: PUSH
9168: LD_INT 114
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 146
9177: PUSH
9178: LD_INT 71
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 112
9187: PUSH
9188: LD_INT 41
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 63
9197: PUSH
9198: LD_INT 38
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
9211: GO 9276
9213: LD_INT 3
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9275
9221: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_INT 165
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 63
9239: PUSH
9240: LD_INT 99
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 77
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 63
9259: PUSH
9260: LD_INT 38
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9276
9275: POP
// attackers := filter ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9286: LD_ADDR_VAR 0 12
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: LD_VAR 0 11
9345: PPUSH
9346: LD_VAR 0 12
9350: PPUSH
9351: CALL 78007 0 4
// enable ;
9355: ENABLE
// end ;
9356: PPOPN 12
9358: END
// every 0 0$1 do var i , tmp ;
9359: GO 9361
9361: DISABLE
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
// begin enable ;
9366: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if tmp then
9408: LD_VAR 0 2
9412: IFFALSE 9458
// for i in tmp do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9456
// if GetFuel ( i ) < 3 then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 261
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9454
// SetFuel ( i , 3 ) ;
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 240
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: PPOPN 2
9460: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
9461: LD_INT 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: PUSH
9479: LD_EXP 40
9483: NOT
9484: AND
9485: PUSH
9486: LD_INT 10
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: PUSH
9504: LD_EXP 3
9508: NOT
9509: AND
9510: OR
9511: IFFALSE 9525
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
// begin Antirush ;
9521: CALL 9528 0 0
// end ;
9525: PPOPN 3
9527: END
// export function Antirush ; var i , veh , tmp , num ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// tmp := [ ] ;
9535: LD_ADDR_VAR 0 4
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// if not FirstAssaultRepelled then
9542: LD_EXP 3
9546: NOT
9547: IFFALSE 9559
// num := 18 else
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_INT 18
9556: ST_TO_ADDR
9557: GO 9567
// num := 12 ;
9559: LD_ADDR_VAR 0 5
9563: PUSH
9564: LD_INT 12
9566: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_OWVAR 67
9595: ARRAY
9596: MINUS
9597: ST_TO_ADDR
// for i := 1 to num do
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: DOUBLE
9604: LD_INT 1
9606: DEC
9607: ST_TO_ADDR
9608: LD_VAR 0 5
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9753
// begin uc_side := 3 ;
9616: LD_ADDR_OWVAR 20
9620: PUSH
9621: LD_INT 3
9623: ST_TO_ADDR
// uc_nation := 3 ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 3
9631: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9632: LD_INT 23
9634: PPUSH
9635: LD_INT 3
9637: PPUSH
9638: LD_INT 3
9640: PPUSH
9641: LD_INT 46
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_INT 2
9656: PPUSH
9657: CALL_OW 12
9661: ARRAY
9662: PPUSH
9663: LD_INT 100
9665: PPUSH
9666: CALL 18148 0 5
// veh := CreateVehicle ;
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: CALL_OW 45
9679: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 5
9687: PPUSH
9688: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 199
9699: PPUSH
9700: LD_INT 135
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: LD_INT 0
9708: PPUSH
9709: CALL_OW 50
// tmp := tmp ^ veh ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_VAR 0 4
9722: PUSH
9723: LD_VAR 0 3
9727: ADD
9728: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 173
9736: PPUSH
9737: LD_INT 118
9739: PPUSH
9740: CALL_OW 111
// wait ( 0 0$2 ) ;
9744: LD_INT 70
9746: PPUSH
9747: CALL_OW 67
// end ;
9751: GO 9613
9753: POP
9754: POP
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// for i in tmp do
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9840
// if IsDead ( i ) then
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 301
9784: IFFALSE 9804
// tmp := tmp diff i else
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: DIFF
9801: ST_TO_ADDR
9802: GO 9838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9804: LD_VAR 0 2
9808: PPUSH
9809: LD_INT 22
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PPUSH
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 74
9833: PPUSH
9834: CALL_OW 115
9838: GO 9772
9840: POP
9841: POP
// until not tmp ;
9842: LD_VAR 0 4
9846: NOT
9847: IFFALSE 9755
// end ; end_of_file
9849: LD_VAR 0 1
9853: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 8
9863: EQUAL
9864: IFFALSE 9880
// begin wait ( 0 0$1 ) ;
9866: LD_INT 35
9868: PPUSH
9869: CALL_OW 67
// YouLost ( Brighton ) ;
9873: LD_STRING Brighton
9875: PPUSH
9876: CALL_OW 104
// end ; if un = JMM then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_EXP 36
9889: EQUAL
9890: IFFALSE 9906
// begin wait ( 0 0$1 ) ;
9892: LD_INT 35
9894: PPUSH
9895: CALL_OW 67
// YouLost ( JMM ) ;
9899: LD_STRING JMM
9901: PPUSH
9902: CALL_OW 104
// end ; if un = Megan then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_EXP 10
9915: EQUAL
9916: IFFALSE 9930
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9918: LD_EXP 8
9922: PPUSH
9923: LD_STRING DBrighton-MeganDeath
9925: PPUSH
9926: CALL_OW 88
// end ; if un = Palmer then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_EXP 9
9939: EQUAL
9940: IFFALSE 9954
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9942: LD_EXP 8
9946: PPUSH
9947: LD_STRING DBrighton-PalmerDeath
9949: PPUSH
9950: CALL_OW 88
// end ; if un = Burlak then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_EXP 18
9963: EQUAL
9964: IFFALSE 9996
// begin if JMM_Arrived then
9966: LD_EXP 5
9970: IFFALSE 9984
// Say ( JMM , DJMM-BurlakDead ) ;
9972: LD_EXP 36
9976: PPUSH
9977: LD_STRING DJMM-BurlakDead
9979: PPUSH
9980: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9984: LD_EXP 9
9988: PPUSH
9989: LD_STRING DSol-BurlakDead
9991: PPUSH
9992: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9996: LD_VAR 0 1
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: OR
10014: IFFALSE 10030
// begin wait ( 0 0$1 ) ;
10016: LD_INT 35
10018: PPUSH
10019: CALL_OW 67
// YouLost ( Depot ) ;
10023: LD_STRING Depot
10025: PPUSH
10026: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10030: LD_VAR 0 1
10034: PPUSH
10035: CALL_OW 255
10039: PUSH
10040: LD_INT 1
10042: EQUAL
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 247
10053: PUSH
10054: LD_INT 1
10056: EQUAL
10057: AND
10058: IFFALSE 10074
// Losses := Losses + 1 ;
10060: LD_ADDR_EXP 43
10064: PUSH
10065: LD_EXP 43
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL 81214 0 1
// end ;
10083: PPOPN 1
10085: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10086: LD_VAR 0 1
10090: PUSH
10091: LD_EXP 12
10095: EQUAL
10096: IFFALSE 10110
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10098: LD_EXP 12
10102: PPUSH
10103: LD_STRING DDeath-Yas-3
10105: PPUSH
10106: CALL_OW 91
// if un = Popov then
10110: LD_VAR 0 1
10114: PUSH
10115: LD_EXP 13
10119: EQUAL
10120: IFFALSE 10134
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10122: LD_EXP 13
10126: PPUSH
10127: LD_STRING DDeath-Pop-3
10129: PPUSH
10130: CALL_OW 91
// if un = Gaydar then
10134: LD_VAR 0 1
10138: PUSH
10139: LD_EXP 14
10143: EQUAL
10144: IFFALSE 10158
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10146: LD_EXP 14
10150: PPUSH
10151: LD_STRING DDeath-Gay-3
10153: PPUSH
10154: CALL_OW 91
// if un = Sevi then
10158: LD_VAR 0 1
10162: PUSH
10163: LD_EXP 15
10167: EQUAL
10168: IFFALSE 10182
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10170: LD_EXP 15
10174: PPUSH
10175: LD_STRING DDeath-Vse-3
10177: PPUSH
10178: CALL_OW 91
// end ;
10182: PPOPN 1
10184: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 10
10192: EQUAL
10193: IFFALSE 10231
// begin Say ( Brighton , DBrighton-C1 ) ;
10195: LD_EXP 8
10199: PPUSH
10200: LD_STRING DBrighton-C1
10202: PPUSH
10203: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10207: LD_EXP 10
10211: PPUSH
10212: LD_STRING DMegan-C1
10214: PPUSH
10215: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10219: LD_EXP 8
10223: PPUSH
10224: LD_STRING DBrighton-C2
10226: PPUSH
10227: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10231: LD_VAR 0 1
10235: PPUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL 80910 0 2
// end ;
10245: PPOPN 2
10247: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL 83414 0 2
// end ;
10262: PPOPN 2
10264: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL 82482 0 1
// end ;
10274: PPOPN 1
10276: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10277: LD_VAR 0 1
10281: PPUSH
10282: CALL_OW 266
10286: PUSH
10287: LD_INT 0
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10367
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 274
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 10000
10322: PPUSH
10323: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 274
10336: PPUSH
10337: LD_INT 2
10339: PPUSH
10340: LD_INT 250
10342: PPUSH
10343: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 274
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: LD_INT 100
10362: PPUSH
10363: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL 82723 0 1
// end ;
10376: PPOPN 1
10378: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: LD_VAR 0 5
10403: PPUSH
10404: CALL 80530 0 5
// end ;
10408: PPOPN 5
10410: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL 80126 0 2
// end ;
10425: PPOPN 2
10427: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 79964 0 4
// end ;
10452: PPOPN 4
10454: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: CALL 79739 0 3
// end ;
10474: PPOPN 3
10476: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL 79624 0 2
// end ;
10491: PPOPN 2
10493: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_VAR 0 2
10503: PPUSH
10504: CALL 83675 0 2
// end ;
10508: PPOPN 2
10510: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: LD_INT 6
10523: EQUAL
10524: IFFALSE 10654
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10526: LD_VAR 0 1
10530: PUSH
10531: LD_EXP 12
10535: PUSH
10536: LD_EXP 15
10540: PUSH
10541: LD_EXP 14
10545: PUSH
10546: LD_EXP 13
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: IN
10557: IFFALSE 10561
// exit ;
10559: GO 10678
// if AssaultStarted then
10561: LD_EXP 7
10565: IFFALSE 10639
// case Rand ( 1 , 4 ) of 1 .. 3 :
10567: LD_INT 1
10569: PPUSH
10570: LD_INT 4
10572: PPUSH
10573: CALL_OW 12
10577: PUSH
10578: LD_INT 1
10580: DOUBLE
10581: GREATEREQUAL
10582: IFFALSE 10590
10584: LD_INT 3
10586: DOUBLE
10587: LESSEQUAL
10588: IFTRUE 10592
10590: GO 10610
10592: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_INT 67
10600: PPUSH
10601: LD_INT 37
10603: PPUSH
10604: CALL_OW 114
10608: GO 10637
10610: LD_INT 4
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10636
10618: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 120
10626: PPUSH
10627: LD_INT 131
10629: PPUSH
10630: CALL_OW 111
10634: GO 10637
10636: POP
10637: GO 10654
// ComMoveXY ( driver , 120 , 131 ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_INT 120
10646: PPUSH
10647: LD_INT 131
10649: PPUSH
10650: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: CALL 83891 0 4
// end ;
10678: PPOPN 4
10680: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL 79433 0 2
// end ;
10695: PPOPN 2
10697: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL 84130 0 1
// end ; end_of_file
10707: PPOPN 1
10709: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10710: LD_EXP 5
10714: PUSH
10715: LD_EXP 42
10719: AND
10720: IFFALSE 10891
10722: GO 10724
10724: DISABLE
// begin wait ( 0 0$2 ) ;
10725: LD_INT 70
10727: PPUSH
10728: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10732: LD_EXP 8
10736: PPUSH
10737: LD_STRING DBrighton-G1
10739: PPUSH
10740: CALL_OW 88
// if Losses < 1 then
10744: LD_EXP 43
10748: PUSH
10749: LD_INT 1
10751: LESS
10752: IFFALSE 10766
// AddMedal ( Losses , 1 ) else
10754: LD_STRING Losses
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 101
10764: GO 10799
// if Losses < 5 then
10766: LD_EXP 43
10770: PUSH
10771: LD_INT 5
10773: LESS
10774: IFFALSE 10788
// AddMedal ( Losses , 2 ) else
10776: LD_STRING Losses
10778: PPUSH
10779: LD_INT 2
10781: PPUSH
10782: CALL_OW 101
10786: GO 10799
// AddMedal ( Losses , - 1 ) ;
10788: LD_STRING Losses
10790: PPUSH
10791: LD_INT 1
10793: NEG
10794: PPUSH
10795: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10799: LD_EXP 6
10803: PUSH
10804: LD_INT 10
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 321
10814: PUSH
10815: LD_INT 2
10817: EQUAL
10818: AND
10819: IFFALSE 10833
// AddMedal ( Laser , 1 ) else
10821: LD_STRING Laser
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
10831: GO 10880
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10833: LD_EXP 6
10837: NOT
10838: PUSH
10839: LD_INT 10
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 321
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: AND
10854: IFFALSE 10869
// AddMedal ( Laser , - 1 ) else
10856: LD_STRING Laser
10858: PPUSH
10859: LD_INT 1
10861: NEG
10862: PPUSH
10863: CALL_OW 101
10867: GO 10880
// AddMedal ( Laser , - 2 ) ;
10869: LD_STRING Laser
10871: PPUSH
10872: LD_INT 2
10874: NEG
10875: PPUSH
10876: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10880: LD_STRING BaseMain
10882: PPUSH
10883: CALL_OW 102
// YouWin ;
10887: CALL_OW 103
// end ; end_of_file
10891: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// area = ListEnvironmentArea ( area ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_VAR 0 2
10905: PPUSH
10906: CALL_OW 353
10910: ST_TO_ADDR
// if bulldozer > 0 then
10911: LD_VAR 0 1
10915: PUSH
10916: LD_INT 0
10918: GREATER
10919: IFFALSE 11030
// for i = area downto 1 do
10921: LD_ADDR_VAR 0 4
10925: PUSH
10926: DOUBLE
10927: LD_VAR 0 2
10931: INC
10932: ST_TO_ADDR
10933: LD_INT 1
10935: PUSH
10936: FOR_DOWNTO
10937: IFFALSE 11028
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10939: LD_VAR 0 2
10943: PUSH
10944: LD_VAR 0 4
10948: ARRAY
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 2
10958: PUSH
10959: LD_VAR 0 4
10963: ARRAY
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: CALL_OW 351
10973: IFFALSE 11026
// if not HasTask ( bulldozer ) then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 314
10984: NOT
10985: IFFALSE 11026
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 4
11001: ARRAY
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PPUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_VAR 0 4
11016: ARRAY
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: CALL_OW 171
11026: GO 10936
11028: POP
11029: POP
// end ;
11030: LD_VAR 0 3
11034: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
11035: LD_INT 0
11037: PPUSH
11038: PPUSH
11039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_VAR 0 2
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 517
11057: ST_TO_ADDR
// for i = 1 to team do
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 1
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11175
// begin if IsInUnit ( team [ i ] ) then
11076: LD_VAR 0 1
11080: PUSH
11081: LD_VAR 0 4
11085: ARRAY
11086: PPUSH
11087: CALL_OW 310
11091: IFFALSE 11108
// ComExitBuilding ( team [ i ] ) ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_VAR 0 4
11102: ARRAY
11103: PPUSH
11104: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11108: LD_VAR 0 1
11112: PUSH
11113: LD_VAR 0 4
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 5
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PUSH
11128: LD_VAR 0 4
11132: ARRAY
11133: PPUSH
11134: LD_VAR 0 5
11138: PUSH
11139: LD_INT 2
11141: ARRAY
11142: PUSH
11143: LD_VAR 0 4
11147: ARRAY
11148: PPUSH
11149: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11153: LD_VAR 0 1
11157: PUSH
11158: LD_VAR 0 4
11162: ARRAY
11163: PPUSH
11164: LD_EXP 8
11168: PPUSH
11169: CALL_OW 179
// end ;
11173: GO 11073
11175: POP
11176: POP
// end ; end_of_file
11177: LD_VAR 0 3
11181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11182: LD_INT 0
11184: PPUSH
11185: PPUSH
// if exist_mode then
11186: LD_VAR 0 2
11190: IFFALSE 11215
// unit := CreateCharacter ( prefix & ident ) else
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 1
11206: STR
11207: PPUSH
11208: CALL_OW 34
11212: ST_TO_ADDR
11213: GO 11230
// unit := NewCharacter ( ident ) ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 25
11229: ST_TO_ADDR
// result := unit ;
11230: LD_ADDR_VAR 0 4
11234: PUSH
11235: LD_VAR 0 5
11239: ST_TO_ADDR
// end ;
11240: LD_VAR 0 4
11244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
// if not side or not nation then
11249: LD_VAR 0 1
11253: NOT
11254: PUSH
11255: LD_VAR 0 2
11259: NOT
11260: OR
11261: IFFALSE 11265
// exit ;
11263: GO 11909
// case nation of nation_american :
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11452
11278: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_INT 35
11286: PUSH
11287: LD_INT 45
11289: PUSH
11290: LD_INT 46
11292: PUSH
11293: LD_INT 47
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 6
11304: PUSH
11305: LD_INT 15
11307: PUSH
11308: LD_INT 16
11310: PUSH
11311: LD_INT 7
11313: PUSH
11314: LD_INT 12
11316: PUSH
11317: LD_INT 13
11319: PUSH
11320: LD_INT 10
11322: PUSH
11323: LD_INT 14
11325: PUSH
11326: LD_INT 20
11328: PUSH
11329: LD_INT 21
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 32
11340: PUSH
11341: LD_INT 27
11343: PUSH
11344: LD_INT 36
11346: PUSH
11347: LD_INT 69
11349: PUSH
11350: LD_INT 39
11352: PUSH
11353: LD_INT 34
11355: PUSH
11356: LD_INT 40
11358: PUSH
11359: LD_INT 48
11361: PUSH
11362: LD_INT 49
11364: PUSH
11365: LD_INT 50
11367: PUSH
11368: LD_INT 51
11370: PUSH
11371: LD_INT 52
11373: PUSH
11374: LD_INT 53
11376: PUSH
11377: LD_INT 54
11379: PUSH
11380: LD_INT 55
11382: PUSH
11383: LD_INT 56
11385: PUSH
11386: LD_INT 57
11388: PUSH
11389: LD_INT 58
11391: PUSH
11392: LD_INT 59
11394: PUSH
11395: LD_INT 60
11397: PUSH
11398: LD_INT 61
11400: PUSH
11401: LD_INT 62
11403: PUSH
11404: LD_INT 80
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: ST_TO_ADDR
11450: GO 11833
11452: LD_INT 2
11454: DOUBLE
11455: EQUAL
11456: IFTRUE 11460
11458: GO 11642
11460: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
11461: LD_ADDR_VAR 0 4
11465: PUSH
11466: LD_INT 35
11468: PUSH
11469: LD_INT 45
11471: PUSH
11472: LD_INT 46
11474: PUSH
11475: LD_INT 47
11477: PUSH
11478: LD_INT 70
11480: PUSH
11481: LD_INT 1
11483: PUSH
11484: LD_INT 11
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: LD_INT 4
11492: PUSH
11493: LD_INT 5
11495: PUSH
11496: LD_INT 6
11498: PUSH
11499: LD_INT 15
11501: PUSH
11502: LD_INT 18
11504: PUSH
11505: LD_INT 7
11507: PUSH
11508: LD_INT 17
11510: PUSH
11511: LD_INT 8
11513: PUSH
11514: LD_INT 20
11516: PUSH
11517: LD_INT 21
11519: PUSH
11520: LD_INT 22
11522: PUSH
11523: LD_INT 72
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 69
11531: PUSH
11532: LD_INT 39
11534: PUSH
11535: LD_INT 40
11537: PUSH
11538: LD_INT 41
11540: PUSH
11541: LD_INT 42
11543: PUSH
11544: LD_INT 43
11546: PUSH
11547: LD_INT 48
11549: PUSH
11550: LD_INT 49
11552: PUSH
11553: LD_INT 50
11555: PUSH
11556: LD_INT 51
11558: PUSH
11559: LD_INT 52
11561: PUSH
11562: LD_INT 53
11564: PUSH
11565: LD_INT 54
11567: PUSH
11568: LD_INT 55
11570: PUSH
11571: LD_INT 56
11573: PUSH
11574: LD_INT 60
11576: PUSH
11577: LD_INT 61
11579: PUSH
11580: LD_INT 62
11582: PUSH
11583: LD_INT 66
11585: PUSH
11586: LD_INT 67
11588: PUSH
11589: LD_INT 68
11591: PUSH
11592: LD_INT 81
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: ST_TO_ADDR
11640: GO 11833
11642: LD_INT 3
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11832
11650: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11651: LD_ADDR_VAR 0 4
11655: PUSH
11656: LD_INT 46
11658: PUSH
11659: LD_INT 47
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: LD_INT 11
11670: PUSH
11671: LD_INT 9
11673: PUSH
11674: LD_INT 20
11676: PUSH
11677: LD_INT 19
11679: PUSH
11680: LD_INT 21
11682: PUSH
11683: LD_INT 24
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 28
11694: PUSH
11695: LD_INT 29
11697: PUSH
11698: LD_INT 30
11700: PUSH
11701: LD_INT 31
11703: PUSH
11704: LD_INT 37
11706: PUSH
11707: LD_INT 38
11709: PUSH
11710: LD_INT 32
11712: PUSH
11713: LD_INT 27
11715: PUSH
11716: LD_INT 33
11718: PUSH
11719: LD_INT 69
11721: PUSH
11722: LD_INT 39
11724: PUSH
11725: LD_INT 34
11727: PUSH
11728: LD_INT 40
11730: PUSH
11731: LD_INT 71
11733: PUSH
11734: LD_INT 23
11736: PUSH
11737: LD_INT 44
11739: PUSH
11740: LD_INT 48
11742: PUSH
11743: LD_INT 49
11745: PUSH
11746: LD_INT 50
11748: PUSH
11749: LD_INT 51
11751: PUSH
11752: LD_INT 52
11754: PUSH
11755: LD_INT 53
11757: PUSH
11758: LD_INT 54
11760: PUSH
11761: LD_INT 55
11763: PUSH
11764: LD_INT 56
11766: PUSH
11767: LD_INT 57
11769: PUSH
11770: LD_INT 58
11772: PUSH
11773: LD_INT 59
11775: PUSH
11776: LD_INT 63
11778: PUSH
11779: LD_INT 64
11781: PUSH
11782: LD_INT 65
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 11833
11832: POP
// if state > - 1 and state < 3 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 1
11840: NEG
11841: GREATER
11842: PUSH
11843: LD_VAR 0 3
11847: PUSH
11848: LD_INT 3
11850: LESS
11851: AND
11852: IFFALSE 11909
// for i in result do
11854: LD_ADDR_VAR 0 5
11858: PUSH
11859: LD_VAR 0 4
11863: PUSH
11864: FOR_IN
11865: IFFALSE 11907
// if GetTech ( i , side ) <> state then
11867: LD_VAR 0 5
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: CALL_OW 321
11881: PUSH
11882: LD_VAR 0 3
11886: NONEQUAL
11887: IFFALSE 11905
// result := result diff i ;
11889: LD_ADDR_VAR 0 4
11893: PUSH
11894: LD_VAR 0 4
11898: PUSH
11899: LD_VAR 0 5
11903: DIFF
11904: ST_TO_ADDR
11905: GO 11864
11907: POP
11908: POP
// end ;
11909: LD_VAR 0 4
11913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
11918: PPUSH
// result := true ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11927: LD_ADDR_VAR 0 5
11931: PUSH
11932: LD_VAR 0 2
11936: PPUSH
11937: CALL_OW 480
11941: ST_TO_ADDR
// if not tmp then
11942: LD_VAR 0 5
11946: NOT
11947: IFFALSE 11951
// exit ;
11949: GO 12000
// for i in tmp do
11951: LD_ADDR_VAR 0 4
11955: PUSH
11956: LD_VAR 0 5
11960: PUSH
11961: FOR_IN
11962: IFFALSE 11998
// if GetTech ( i , side ) <> state_researched then
11964: LD_VAR 0 4
11968: PPUSH
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 321
11978: PUSH
11979: LD_INT 2
11981: NONEQUAL
11982: IFFALSE 11996
// begin result := false ;
11984: LD_ADDR_VAR 0 3
11988: PUSH
11989: LD_INT 0
11991: ST_TO_ADDR
// exit ;
11992: POP
11993: POP
11994: GO 12000
// end ;
11996: GO 11961
11998: POP
11999: POP
// end ;
12000: LD_VAR 0 3
12004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12005: LD_INT 0
12007: PPUSH
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
12016: PPUSH
12017: PPUSH
12018: PPUSH
12019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12020: LD_VAR 0 1
12024: NOT
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 257
12035: PUSH
12036: LD_INT 9
12038: NONEQUAL
12039: OR
12040: IFFALSE 12044
// exit ;
12042: GO 12617
// side := GetSide ( unit ) ;
12044: LD_ADDR_VAR 0 9
12048: PUSH
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 255
12058: ST_TO_ADDR
// tech_space := tech_spacanom ;
12059: LD_ADDR_VAR 0 12
12063: PUSH
12064: LD_INT 29
12066: ST_TO_ADDR
// tech_time := tech_taurad ;
12067: LD_ADDR_VAR 0 13
12071: PUSH
12072: LD_INT 28
12074: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12075: LD_ADDR_VAR 0 11
12079: PUSH
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 310
12089: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12090: LD_VAR 0 11
12094: PPUSH
12095: CALL_OW 247
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: IFFALSE 12107
// exit ;
12105: GO 12617
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12107: LD_ADDR_VAR 0 8
12111: PUSH
12112: LD_INT 81
12114: PUSH
12115: LD_VAR 0 9
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// if not tmp then
12150: LD_VAR 0 8
12154: NOT
12155: IFFALSE 12159
// exit ;
12157: GO 12617
// if in_unit then
12159: LD_VAR 0 11
12163: IFFALSE 12187
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12165: LD_ADDR_VAR 0 10
12169: PUSH
12170: LD_VAR 0 8
12174: PPUSH
12175: LD_VAR 0 11
12179: PPUSH
12180: CALL_OW 74
12184: ST_TO_ADDR
12185: GO 12207
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12187: LD_ADDR_VAR 0 10
12191: PUSH
12192: LD_VAR 0 8
12196: PPUSH
12197: LD_VAR 0 1
12201: PPUSH
12202: CALL_OW 74
12206: ST_TO_ADDR
// if not enemy then
12207: LD_VAR 0 10
12211: NOT
12212: IFFALSE 12216
// exit ;
12214: GO 12617
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12216: LD_VAR 0 11
12220: PUSH
12221: LD_VAR 0 11
12225: PPUSH
12226: LD_VAR 0 10
12230: PPUSH
12231: CALL_OW 296
12235: PUSH
12236: LD_INT 13
12238: GREATER
12239: AND
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: LD_VAR 0 10
12250: PPUSH
12251: CALL_OW 296
12255: PUSH
12256: LD_INT 12
12258: GREATER
12259: OR
12260: IFFALSE 12264
// exit ;
12262: GO 12617
// missile := [ 1 ] ;
12264: LD_ADDR_VAR 0 14
12268: PUSH
12269: LD_INT 1
12271: PUSH
12272: EMPTY
12273: LIST
12274: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12275: LD_VAR 0 9
12279: PPUSH
12280: LD_VAR 0 12
12284: PPUSH
12285: CALL_OW 325
12289: IFFALSE 12318
// missile := Insert ( missile , missile + 1 , 2 ) ;
12291: LD_ADDR_VAR 0 14
12295: PUSH
12296: LD_VAR 0 14
12300: PPUSH
12301: LD_VAR 0 14
12305: PUSH
12306: LD_INT 1
12308: PLUS
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 2
12317: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12318: LD_VAR 0 9
12322: PPUSH
12323: LD_VAR 0 13
12327: PPUSH
12328: CALL_OW 325
12332: PUSH
12333: LD_VAR 0 10
12337: PPUSH
12338: CALL_OW 255
12342: PPUSH
12343: LD_VAR 0 13
12347: PPUSH
12348: CALL_OW 325
12352: NOT
12353: AND
12354: IFFALSE 12383
// missile := Insert ( missile , missile + 1 , 3 ) ;
12356: LD_ADDR_VAR 0 14
12360: PUSH
12361: LD_VAR 0 14
12365: PPUSH
12366: LD_VAR 0 14
12370: PUSH
12371: LD_INT 1
12373: PLUS
12374: PPUSH
12375: LD_INT 3
12377: PPUSH
12378: CALL_OW 2
12382: ST_TO_ADDR
// if missile < 2 then
12383: LD_VAR 0 14
12387: PUSH
12388: LD_INT 2
12390: LESS
12391: IFFALSE 12395
// exit ;
12393: GO 12617
// x := GetX ( enemy ) ;
12395: LD_ADDR_VAR 0 4
12399: PUSH
12400: LD_VAR 0 10
12404: PPUSH
12405: CALL_OW 250
12409: ST_TO_ADDR
// y := GetY ( enemy ) ;
12410: LD_ADDR_VAR 0 5
12414: PUSH
12415: LD_VAR 0 10
12419: PPUSH
12420: CALL_OW 251
12424: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12425: LD_ADDR_VAR 0 6
12429: PUSH
12430: LD_VAR 0 4
12434: PUSH
12435: LD_INT 1
12437: NEG
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 12
12446: PLUS
12447: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12448: LD_ADDR_VAR 0 7
12452: PUSH
12453: LD_VAR 0 5
12457: PUSH
12458: LD_INT 1
12460: NEG
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 12
12469: PLUS
12470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12471: LD_VAR 0 6
12475: PPUSH
12476: LD_VAR 0 7
12480: PPUSH
12481: CALL_OW 488
12485: NOT
12486: IFFALSE 12508
// begin _x := x ;
12488: LD_ADDR_VAR 0 6
12492: PUSH
12493: LD_VAR 0 4
12497: ST_TO_ADDR
// _y := y ;
12498: LD_ADDR_VAR 0 7
12502: PUSH
12503: LD_VAR 0 5
12507: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12508: LD_ADDR_VAR 0 3
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 14
12520: PPUSH
12521: CALL_OW 12
12525: ST_TO_ADDR
// case i of 1 :
12526: LD_VAR 0 3
12530: PUSH
12531: LD_INT 1
12533: DOUBLE
12534: EQUAL
12535: IFTRUE 12539
12537: GO 12556
12539: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12540: LD_VAR 0 1
12544: PPUSH
12545: LD_VAR 0 10
12549: PPUSH
12550: CALL_OW 115
12554: GO 12617
12556: LD_INT 2
12558: DOUBLE
12559: EQUAL
12560: IFTRUE 12564
12562: GO 12586
12564: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12565: LD_VAR 0 1
12569: PPUSH
12570: LD_VAR 0 6
12574: PPUSH
12575: LD_VAR 0 7
12579: PPUSH
12580: CALL_OW 153
12584: GO 12617
12586: LD_INT 3
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12616
12594: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12595: LD_VAR 0 1
12599: PPUSH
12600: LD_VAR 0 6
12604: PPUSH
12605: LD_VAR 0 7
12609: PPUSH
12610: CALL_OW 154
12614: GO 12617
12616: POP
// end ;
12617: LD_VAR 0 2
12621: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
// if not unit or not building then
12630: LD_VAR 0 1
12634: NOT
12635: PUSH
12636: LD_VAR 0 2
12640: NOT
12641: OR
12642: IFFALSE 12646
// exit ;
12644: GO 12804
// x := GetX ( building ) ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_VAR 0 2
12655: PPUSH
12656: CALL_OW 250
12660: ST_TO_ADDR
// y := GetY ( building ) ;
12661: LD_ADDR_VAR 0 6
12665: PUSH
12666: LD_VAR 0 2
12670: PPUSH
12671: CALL_OW 251
12675: ST_TO_ADDR
// for i = 0 to 5 do
12676: LD_ADDR_VAR 0 4
12680: PUSH
12681: DOUBLE
12682: LD_INT 0
12684: DEC
12685: ST_TO_ADDR
12686: LD_INT 5
12688: PUSH
12689: FOR_TO
12690: IFFALSE 12802
// begin _x := ShiftX ( x , i , 3 ) ;
12692: LD_ADDR_VAR 0 7
12696: PUSH
12697: LD_VAR 0 5
12701: PPUSH
12702: LD_VAR 0 4
12706: PPUSH
12707: LD_INT 3
12709: PPUSH
12710: CALL_OW 272
12714: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12715: LD_ADDR_VAR 0 8
12719: PUSH
12720: LD_VAR 0 6
12724: PPUSH
12725: LD_VAR 0 4
12729: PPUSH
12730: LD_INT 3
12732: PPUSH
12733: CALL_OW 273
12737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12738: LD_VAR 0 7
12742: PPUSH
12743: LD_VAR 0 8
12747: PPUSH
12748: CALL_OW 488
12752: NOT
12753: IFFALSE 12757
// continue ;
12755: GO 12689
// if HexInfo ( _x , _y ) = 0 then
12757: LD_VAR 0 7
12761: PPUSH
12762: LD_VAR 0 8
12766: PPUSH
12767: CALL_OW 428
12771: PUSH
12772: LD_INT 0
12774: EQUAL
12775: IFFALSE 12800
// begin ComMoveXY ( unit , _x , _y ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: LD_VAR 0 7
12786: PPUSH
12787: LD_VAR 0 8
12791: PPUSH
12792: CALL_OW 111
// exit ;
12796: POP
12797: POP
12798: GO 12804
// end ; end ;
12800: GO 12689
12802: POP
12803: POP
// end ;
12804: LD_VAR 0 3
12808: RET
// export function ScanBase ( side , base_area ) ; begin
12809: LD_INT 0
12811: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_INT 81
12824: PUSH
12825: LD_VAR 0 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 70
12838: ST_TO_ADDR
// end ;
12839: LD_VAR 0 3
12843: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12844: LD_INT 0
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12851: LD_VAR 0 1
12855: NOT
12856: PUSH
12857: LD_EXP 52
12861: PUSH
12862: LD_VAR 0 1
12866: ARRAY
12867: NOT
12868: OR
12869: PUSH
12870: LD_VAR 0 2
12874: NOT
12875: OR
12876: PUSH
12877: LD_VAR 0 3
12881: NOT
12882: OR
12883: IFFALSE 12887
// exit ;
12885: GO 13400
// side := mc_sides [ base ] ;
12887: LD_ADDR_VAR 0 6
12891: PUSH
12892: LD_EXP 78
12896: PUSH
12897: LD_VAR 0 1
12901: ARRAY
12902: ST_TO_ADDR
// if not side then
12903: LD_VAR 0 6
12907: NOT
12908: IFFALSE 12912
// exit ;
12910: GO 13400
// for i in solds do
12912: LD_ADDR_VAR 0 7
12916: PUSH
12917: LD_VAR 0 2
12921: PUSH
12922: FOR_IN
12923: IFFALSE 12984
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12925: LD_VAR 0 7
12929: PPUSH
12930: CALL_OW 310
12934: PPUSH
12935: CALL_OW 266
12939: PUSH
12940: LD_INT 32
12942: PUSH
12943: LD_INT 31
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: IN
12950: IFFALSE 12970
// solds := solds diff i else
12952: LD_ADDR_VAR 0 2
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_VAR 0 7
12966: DIFF
12967: ST_TO_ADDR
12968: GO 12982
// SetTag ( i , 18 ) ;
12970: LD_VAR 0 7
12974: PPUSH
12975: LD_INT 18
12977: PPUSH
12978: CALL_OW 109
12982: GO 12922
12984: POP
12985: POP
// if not solds then
12986: LD_VAR 0 2
12990: NOT
12991: IFFALSE 12995
// exit ;
12993: GO 13400
// repeat wait ( 0 0$1 ) ;
12995: LD_INT 35
12997: PPUSH
12998: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: LD_VAR 0 6
13011: PPUSH
13012: LD_VAR 0 3
13016: PPUSH
13017: CALL 12809 0 2
13021: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13022: LD_EXP 52
13026: PUSH
13027: LD_VAR 0 1
13031: ARRAY
13032: NOT
13033: PUSH
13034: LD_EXP 52
13038: PUSH
13039: LD_VAR 0 1
13043: ARRAY
13044: PUSH
13045: EMPTY
13046: EQUAL
13047: OR
13048: IFFALSE 13085
// begin for i in solds do
13050: LD_ADDR_VAR 0 7
13054: PUSH
13055: LD_VAR 0 2
13059: PUSH
13060: FOR_IN
13061: IFFALSE 13074
// ComStop ( i ) ;
13063: LD_VAR 0 7
13067: PPUSH
13068: CALL_OW 141
13072: GO 13060
13074: POP
13075: POP
// solds := [ ] ;
13076: LD_ADDR_VAR 0 2
13080: PUSH
13081: EMPTY
13082: ST_TO_ADDR
// exit ;
13083: GO 13400
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
13085: LD_VAR 0 5
13089: NOT
13090: PUSH
13091: LD_VAR 0 5
13095: PUSH
13096: LD_INT 3
13098: GREATER
13099: OR
13100: PUSH
13101: LD_EXP 74
13105: PUSH
13106: LD_VAR 0 1
13110: ARRAY
13111: OR
13112: IFFALSE 13153
// begin for i in solds do
13114: LD_ADDR_VAR 0 7
13118: PUSH
13119: LD_VAR 0 2
13123: PUSH
13124: FOR_IN
13125: IFFALSE 13149
// if HasTask ( i ) then
13127: LD_VAR 0 7
13131: PPUSH
13132: CALL_OW 314
13136: IFFALSE 13147
// ComStop ( i ) ;
13138: LD_VAR 0 7
13142: PPUSH
13143: CALL_OW 141
13147: GO 13124
13149: POP
13150: POP
// break ;
13151: GO 13388
// end ; for i in solds do
13153: LD_ADDR_VAR 0 7
13157: PUSH
13158: LD_VAR 0 2
13162: PUSH
13163: FOR_IN
13164: IFFALSE 13380
// begin if IsInUnit ( i ) then
13166: LD_VAR 0 7
13170: PPUSH
13171: CALL_OW 310
13175: IFFALSE 13186
// ComExitBuilding ( i ) ;
13177: LD_VAR 0 7
13181: PPUSH
13182: CALL_OW 122
// if GetLives ( i ) > 333 then
13186: LD_VAR 0 7
13190: PPUSH
13191: CALL_OW 256
13195: PUSH
13196: LD_INT 333
13198: GREATER
13199: IFFALSE 13227
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13201: LD_VAR 0 7
13205: PPUSH
13206: LD_VAR 0 5
13210: PPUSH
13211: LD_VAR 0 7
13215: PPUSH
13216: CALL_OW 74
13220: PPUSH
13221: CALL_OW 115
13225: GO 13378
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
13227: LD_ADDR_VAR 0 8
13231: PUSH
13232: LD_EXP 52
13236: PUSH
13237: LD_VAR 0 1
13241: ARRAY
13242: PPUSH
13243: LD_INT 2
13245: PUSH
13246: LD_INT 30
13248: PUSH
13249: LD_INT 0
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 72
13286: PPUSH
13287: LD_VAR 0 7
13291: PPUSH
13292: CALL_OW 74
13296: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
13297: LD_VAR 0 7
13301: PPUSH
13302: LD_VAR 0 8
13306: PPUSH
13307: CALL_OW 250
13311: PPUSH
13312: LD_INT 3
13314: PPUSH
13315: LD_INT 5
13317: PPUSH
13318: CALL_OW 272
13322: PPUSH
13323: LD_VAR 0 8
13327: PPUSH
13328: CALL_OW 251
13332: PPUSH
13333: LD_INT 3
13335: PPUSH
13336: LD_INT 5
13338: PPUSH
13339: CALL_OW 273
13343: PPUSH
13344: CALL_OW 111
// SetTag ( i , 0 ) ;
13348: LD_VAR 0 7
13352: PPUSH
13353: LD_INT 0
13355: PPUSH
13356: CALL_OW 109
// solds := solds diff i ;
13360: LD_ADDR_VAR 0 2
13364: PUSH
13365: LD_VAR 0 2
13369: PUSH
13370: LD_VAR 0 7
13374: DIFF
13375: ST_TO_ADDR
// continue ;
13376: GO 13163
// end ; end ;
13378: GO 13163
13380: POP
13381: POP
// until solds ;
13382: LD_VAR 0 2
13386: IFFALSE 12995
// MC_Reset ( base , 18 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_INT 18
13395: PPUSH
13396: CALL 58317 0 2
// end ;
13400: LD_VAR 0 4
13404: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13405: LD_INT 0
13407: PPUSH
13408: PPUSH
13409: PPUSH
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13423: LD_ADDR_VAR 0 12
13427: PUSH
13428: LD_EXP 52
13432: PUSH
13433: LD_VAR 0 1
13437: ARRAY
13438: PPUSH
13439: LD_INT 25
13441: PUSH
13442: LD_INT 3
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 72
13453: ST_TO_ADDR
// if mc_remote_driver [ base ] then
13454: LD_EXP 92
13458: PUSH
13459: LD_VAR 0 1
13463: ARRAY
13464: IFFALSE 13488
// mechs := mechs diff mc_remote_driver [ base ] ;
13466: LD_ADDR_VAR 0 12
13470: PUSH
13471: LD_VAR 0 12
13475: PUSH
13476: LD_EXP 92
13480: PUSH
13481: LD_VAR 0 1
13485: ARRAY
13486: DIFF
13487: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13488: LD_ADDR_VAR 0 8
13492: PUSH
13493: LD_EXP 52
13497: PUSH
13498: LD_VAR 0 1
13502: ARRAY
13503: PPUSH
13504: LD_INT 2
13506: PUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 25
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 25
13529: PUSH
13530: LD_INT 8
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 25
13539: PUSH
13540: LD_INT 9
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 72
13558: ST_TO_ADDR
// if not defenders and not solds then
13559: LD_VAR 0 2
13563: NOT
13564: PUSH
13565: LD_VAR 0 8
13569: NOT
13570: AND
13571: IFFALSE 13575
// exit ;
13573: GO 15101
// depot_under_attack := false ;
13575: LD_ADDR_VAR 0 16
13579: PUSH
13580: LD_INT 0
13582: ST_TO_ADDR
// sold_defenders := [ ] ;
13583: LD_ADDR_VAR 0 17
13587: PUSH
13588: EMPTY
13589: ST_TO_ADDR
// if mechs then
13590: LD_VAR 0 12
13594: IFFALSE 13723
// for i in defenders do
13596: LD_ADDR_VAR 0 5
13600: PUSH
13601: LD_VAR 0 2
13605: PUSH
13606: FOR_IN
13607: IFFALSE 13721
// begin SetTag ( i , 20 ) ;
13609: LD_VAR 0 5
13613: PPUSH
13614: LD_INT 20
13616: PPUSH
13617: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13621: LD_VAR 0 5
13625: PPUSH
13626: CALL_OW 263
13630: PUSH
13631: LD_INT 1
13633: EQUAL
13634: PUSH
13635: LD_VAR 0 5
13639: PPUSH
13640: CALL_OW 311
13644: NOT
13645: AND
13646: PUSH
13647: LD_VAR 0 12
13651: AND
13652: IFFALSE 13719
// begin un := mechs [ 1 ] ;
13654: LD_ADDR_VAR 0 10
13658: PUSH
13659: LD_VAR 0 12
13663: PUSH
13664: LD_INT 1
13666: ARRAY
13667: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13668: LD_VAR 0 10
13672: PPUSH
13673: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13677: LD_VAR 0 10
13681: PPUSH
13682: LD_VAR 0 5
13686: PPUSH
13687: CALL_OW 180
// SetTag ( un , 19 ) ;
13691: LD_VAR 0 10
13695: PPUSH
13696: LD_INT 19
13698: PPUSH
13699: CALL_OW 109
// mechs := mechs diff un ;
13703: LD_ADDR_VAR 0 12
13707: PUSH
13708: LD_VAR 0 12
13712: PUSH
13713: LD_VAR 0 10
13717: DIFF
13718: ST_TO_ADDR
// end ; end ;
13719: GO 13606
13721: POP
13722: POP
// if solds then
13723: LD_VAR 0 8
13727: IFFALSE 13786
// for i in solds do
13729: LD_ADDR_VAR 0 5
13733: PUSH
13734: LD_VAR 0 8
13738: PUSH
13739: FOR_IN
13740: IFFALSE 13784
// if not GetTag ( i ) then
13742: LD_VAR 0 5
13746: PPUSH
13747: CALL_OW 110
13751: NOT
13752: IFFALSE 13782
// begin defenders := defenders union i ;
13754: LD_ADDR_VAR 0 2
13758: PUSH
13759: LD_VAR 0 2
13763: PUSH
13764: LD_VAR 0 5
13768: UNION
13769: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13770: LD_VAR 0 5
13774: PPUSH
13775: LD_INT 18
13777: PPUSH
13778: CALL_OW 109
// end ;
13782: GO 13739
13784: POP
13785: POP
// repeat wait ( 0 0$1 ) ;
13786: LD_INT 35
13788: PPUSH
13789: CALL_OW 67
// enemy := mc_scan [ base ] ;
13793: LD_ADDR_VAR 0 3
13797: PUSH
13798: LD_EXP 75
13802: PUSH
13803: LD_VAR 0 1
13807: ARRAY
13808: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13809: LD_EXP 52
13813: PUSH
13814: LD_VAR 0 1
13818: ARRAY
13819: NOT
13820: PUSH
13821: LD_EXP 52
13825: PUSH
13826: LD_VAR 0 1
13830: ARRAY
13831: PUSH
13832: EMPTY
13833: EQUAL
13834: OR
13835: IFFALSE 13872
// begin for i in defenders do
13837: LD_ADDR_VAR 0 5
13841: PUSH
13842: LD_VAR 0 2
13846: PUSH
13847: FOR_IN
13848: IFFALSE 13861
// ComStop ( i ) ;
13850: LD_VAR 0 5
13854: PPUSH
13855: CALL_OW 141
13859: GO 13847
13861: POP
13862: POP
// defenders := [ ] ;
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: EMPTY
13869: ST_TO_ADDR
// exit ;
13870: GO 15101
// end ; for i in defenders do
13872: LD_ADDR_VAR 0 5
13876: PUSH
13877: LD_VAR 0 2
13881: PUSH
13882: FOR_IN
13883: IFFALSE 14613
// begin e := NearestUnitToUnit ( enemy , i ) ;
13885: LD_ADDR_VAR 0 13
13889: PUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_VAR 0 5
13899: PPUSH
13900: CALL_OW 74
13904: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13905: LD_ADDR_VAR 0 16
13909: PUSH
13910: LD_EXP 52
13914: PUSH
13915: LD_VAR 0 1
13919: ARRAY
13920: PPUSH
13921: LD_INT 2
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: LD_INT 0
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: PPUSH
13949: CALL_OW 72
13953: NOT
13954: PUSH
13955: LD_EXP 52
13959: PUSH
13960: LD_VAR 0 1
13964: ARRAY
13965: PPUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 30
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 1
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PPUSH
13994: CALL_OW 72
13998: PPUSH
13999: CALL_OW 256
14003: PUSH
14004: LD_INT 600
14006: LESS
14007: OR
14008: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
14009: LD_VAR 0 5
14013: PPUSH
14014: CALL_OW 247
14018: PUSH
14019: LD_INT 2
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14319
14027: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
14028: LD_VAR 0 5
14032: PPUSH
14033: CALL_OW 256
14037: PUSH
14038: LD_INT 650
14040: GREATER
14041: PUSH
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 13
14051: PPUSH
14052: CALL_OW 296
14056: PUSH
14057: LD_INT 40
14059: LESS
14060: PUSH
14061: LD_VAR 0 13
14065: PPUSH
14066: LD_EXP 77
14070: PUSH
14071: LD_VAR 0 1
14075: ARRAY
14076: PPUSH
14077: CALL_OW 308
14081: OR
14082: AND
14083: IFFALSE 14101
// ComAttackUnit ( i , e ) else
14085: LD_VAR 0 5
14089: PPUSH
14090: LD_VAR 0 13
14094: PPUSH
14095: CALL_OW 115
14099: GO 14202
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14101: LD_VAR 0 13
14105: PPUSH
14106: LD_EXP 77
14110: PUSH
14111: LD_VAR 0 1
14115: ARRAY
14116: PPUSH
14117: CALL_OW 308
14121: NOT
14122: PUSH
14123: LD_VAR 0 5
14127: PPUSH
14128: LD_VAR 0 13
14132: PPUSH
14133: CALL_OW 296
14137: PUSH
14138: LD_INT 40
14140: GREATEREQUAL
14141: AND
14142: PUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: CALL_OW 256
14152: PUSH
14153: LD_INT 650
14155: LESSEQUAL
14156: OR
14157: PUSH
14158: LD_VAR 0 5
14162: PPUSH
14163: LD_EXP 76
14167: PUSH
14168: LD_VAR 0 1
14172: ARRAY
14173: PPUSH
14174: CALL_OW 308
14178: NOT
14179: AND
14180: IFFALSE 14202
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14182: LD_VAR 0 5
14186: PPUSH
14187: LD_EXP 76
14191: PUSH
14192: LD_VAR 0 1
14196: ARRAY
14197: PPUSH
14198: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14202: LD_VAR 0 5
14206: PPUSH
14207: CALL_OW 256
14211: PUSH
14212: LD_INT 998
14214: LESS
14215: PUSH
14216: LD_VAR 0 5
14220: PPUSH
14221: CALL_OW 263
14225: PUSH
14226: LD_INT 1
14228: EQUAL
14229: AND
14230: PUSH
14231: LD_VAR 0 5
14235: PPUSH
14236: CALL_OW 311
14240: AND
14241: PUSH
14242: LD_VAR 0 5
14246: PPUSH
14247: LD_EXP 76
14251: PUSH
14252: LD_VAR 0 1
14256: ARRAY
14257: PPUSH
14258: CALL_OW 308
14262: AND
14263: IFFALSE 14317
// begin mech := IsDrivenBy ( i ) ;
14265: LD_ADDR_VAR 0 9
14269: PUSH
14270: LD_VAR 0 5
14274: PPUSH
14275: CALL_OW 311
14279: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14280: LD_VAR 0 9
14284: PPUSH
14285: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14289: LD_VAR 0 9
14293: PPUSH
14294: LD_VAR 0 5
14298: PPUSH
14299: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14303: LD_VAR 0 9
14307: PPUSH
14308: LD_VAR 0 5
14312: PPUSH
14313: CALL_OW 180
// end ; end ; unit_human :
14317: GO 14584
14319: LD_INT 1
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14583
14327: POP
// begin b := IsInUnit ( i ) ;
14328: LD_ADDR_VAR 0 18
14332: PUSH
14333: LD_VAR 0 5
14337: PPUSH
14338: CALL_OW 310
14342: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14343: LD_ADDR_VAR 0 19
14347: PUSH
14348: LD_VAR 0 18
14352: NOT
14353: PUSH
14354: LD_VAR 0 18
14358: PPUSH
14359: CALL_OW 266
14363: PUSH
14364: LD_INT 32
14366: PUSH
14367: LD_INT 31
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: IN
14374: OR
14375: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14376: LD_VAR 0 16
14380: PUSH
14381: LD_VAR 0 2
14385: PPUSH
14386: LD_INT 21
14388: PUSH
14389: LD_INT 2
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 72
14400: PUSH
14401: LD_INT 1
14403: LESSEQUAL
14404: OR
14405: PUSH
14406: LD_VAR 0 19
14410: AND
14411: PUSH
14412: LD_VAR 0 5
14416: PUSH
14417: LD_VAR 0 17
14421: IN
14422: NOT
14423: AND
14424: IFFALSE 14517
// begin if b then
14426: LD_VAR 0 18
14430: IFFALSE 14479
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14432: LD_VAR 0 18
14436: PPUSH
14437: LD_VAR 0 3
14441: PPUSH
14442: LD_VAR 0 18
14446: PPUSH
14447: CALL_OW 74
14451: PPUSH
14452: CALL_OW 296
14456: PUSH
14457: LD_INT 10
14459: LESS
14460: PUSH
14461: LD_VAR 0 18
14465: PPUSH
14466: CALL_OW 461
14470: PUSH
14471: LD_INT 7
14473: NONEQUAL
14474: AND
14475: IFFALSE 14479
// continue ;
14477: GO 13882
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14479: LD_ADDR_VAR 0 17
14483: PUSH
14484: LD_VAR 0 17
14488: PPUSH
14489: LD_VAR 0 17
14493: PUSH
14494: LD_INT 1
14496: PLUS
14497: PPUSH
14498: LD_VAR 0 5
14502: PPUSH
14503: CALL_OW 1
14507: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14508: LD_VAR 0 5
14512: PPUSH
14513: CALL_OW 122
// end ; if sold_defenders then
14517: LD_VAR 0 17
14521: IFFALSE 14581
// if i in sold_defenders then
14523: LD_VAR 0 5
14527: PUSH
14528: LD_VAR 0 17
14532: IN
14533: IFFALSE 14581
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14535: LD_VAR 0 5
14539: PPUSH
14540: CALL_OW 314
14544: NOT
14545: PUSH
14546: LD_VAR 0 5
14550: PPUSH
14551: LD_VAR 0 13
14555: PPUSH
14556: CALL_OW 296
14560: PUSH
14561: LD_INT 30
14563: LESS
14564: AND
14565: IFFALSE 14581
// ComAttackUnit ( i , e ) ;
14567: LD_VAR 0 5
14571: PPUSH
14572: LD_VAR 0 13
14576: PPUSH
14577: CALL_OW 115
// end ; end ; end ;
14581: GO 14584
14583: POP
// if IsDead ( i ) then
14584: LD_VAR 0 5
14588: PPUSH
14589: CALL_OW 301
14593: IFFALSE 14611
// defenders := defenders diff i ;
14595: LD_ADDR_VAR 0 2
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: LD_VAR 0 5
14609: DIFF
14610: ST_TO_ADDR
// end ;
14611: GO 13882
14613: POP
14614: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
14615: LD_VAR 0 3
14619: NOT
14620: PUSH
14621: LD_VAR 0 2
14625: NOT
14626: OR
14627: PUSH
14628: LD_EXP 52
14632: PUSH
14633: LD_VAR 0 1
14637: ARRAY
14638: NOT
14639: OR
14640: IFFALSE 13786
// MC_Reset ( base , 18 ) ;
14642: LD_VAR 0 1
14646: PPUSH
14647: LD_INT 18
14649: PPUSH
14650: CALL 58317 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14654: LD_ADDR_VAR 0 2
14658: PUSH
14659: LD_VAR 0 2
14663: PUSH
14664: LD_VAR 0 2
14668: PPUSH
14669: LD_INT 2
14671: PUSH
14672: LD_INT 25
14674: PUSH
14675: LD_INT 1
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 25
14684: PUSH
14685: LD_INT 5
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 25
14694: PUSH
14695: LD_INT 8
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 25
14704: PUSH
14705: LD_INT 9
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 72
14723: DIFF
14724: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14725: LD_VAR 0 3
14729: NOT
14730: PUSH
14731: LD_VAR 0 2
14735: PPUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 72
14750: AND
14751: IFFALSE 15089
// begin tmp := FilterByTag ( defenders , 19 ) ;
14753: LD_ADDR_VAR 0 11
14757: PUSH
14758: LD_VAR 0 2
14762: PPUSH
14763: LD_INT 19
14765: PPUSH
14766: CALL 51530 0 2
14770: ST_TO_ADDR
// if tmp then
14771: LD_VAR 0 11
14775: IFFALSE 14845
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14777: LD_ADDR_VAR 0 11
14781: PUSH
14782: LD_VAR 0 11
14786: PPUSH
14787: LD_INT 25
14789: PUSH
14790: LD_INT 3
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 72
14801: ST_TO_ADDR
// if tmp then
14802: LD_VAR 0 11
14806: IFFALSE 14845
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14808: LD_ADDR_EXP 64
14812: PUSH
14813: LD_EXP 64
14817: PPUSH
14818: LD_VAR 0 1
14822: PPUSH
14823: LD_EXP 64
14827: PUSH
14828: LD_VAR 0 1
14832: ARRAY
14833: PUSH
14834: LD_VAR 0 11
14838: UNION
14839: PPUSH
14840: CALL_OW 1
14844: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 19
14852: PPUSH
14853: CALL 58317 0 2
// repeat wait ( 0 0$1 ) ;
14857: LD_INT 35
14859: PPUSH
14860: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
14864: LD_EXP 52
14868: PUSH
14869: LD_VAR 0 1
14873: ARRAY
14874: NOT
14875: PUSH
14876: LD_EXP 52
14880: PUSH
14881: LD_VAR 0 1
14885: ARRAY
14886: PUSH
14887: EMPTY
14888: EQUAL
14889: OR
14890: IFFALSE 14927
// begin for i in defenders do
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: FOR_IN
14903: IFFALSE 14916
// ComStop ( i ) ;
14905: LD_VAR 0 5
14909: PPUSH
14910: CALL_OW 141
14914: GO 14902
14916: POP
14917: POP
// defenders := [ ] ;
14918: LD_ADDR_VAR 0 2
14922: PUSH
14923: EMPTY
14924: ST_TO_ADDR
// exit ;
14925: GO 15101
// end ; for i in defenders do
14927: LD_ADDR_VAR 0 5
14931: PUSH
14932: LD_VAR 0 2
14936: PUSH
14937: FOR_IN
14938: IFFALSE 15027
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14940: LD_VAR 0 5
14944: PPUSH
14945: LD_EXP 76
14949: PUSH
14950: LD_VAR 0 1
14954: ARRAY
14955: PPUSH
14956: CALL_OW 308
14960: NOT
14961: IFFALSE 14985
// ComMoveToArea ( i , mc_parking [ base ] ) else
14963: LD_VAR 0 5
14967: PPUSH
14968: LD_EXP 76
14972: PUSH
14973: LD_VAR 0 1
14977: ARRAY
14978: PPUSH
14979: CALL_OW 113
14983: GO 15025
// if GetControl ( i ) = control_manual then
14985: LD_VAR 0 5
14989: PPUSH
14990: CALL_OW 263
14994: PUSH
14995: LD_INT 1
14997: EQUAL
14998: IFFALSE 15025
// if IsDrivenBy ( i ) then
15000: LD_VAR 0 5
15004: PPUSH
15005: CALL_OW 311
15009: IFFALSE 15025
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
15011: LD_VAR 0 5
15015: PPUSH
15016: CALL_OW 311
15020: PPUSH
15021: CALL_OW 121
// end ;
15025: GO 14937
15027: POP
15028: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
15029: LD_VAR 0 2
15033: PPUSH
15034: LD_INT 95
15036: PUSH
15037: LD_EXP 76
15041: PUSH
15042: LD_VAR 0 1
15046: ARRAY
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 72
15056: PUSH
15057: LD_VAR 0 2
15061: EQUAL
15062: PUSH
15063: LD_EXP 75
15067: PUSH
15068: LD_VAR 0 1
15072: ARRAY
15073: OR
15074: PUSH
15075: LD_EXP 52
15079: PUSH
15080: LD_VAR 0 1
15084: ARRAY
15085: NOT
15086: OR
15087: IFFALSE 14857
// end ; MC_Reset ( base , 20 ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_INT 20
15096: PPUSH
15097: CALL 58317 0 2
// end ;
15101: LD_VAR 0 4
15105: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15106: LD_INT 0
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
// result := false ;
15112: LD_ADDR_VAR 0 2
15116: PUSH
15117: LD_INT 0
15119: ST_TO_ADDR
// side := GetSide ( unit ) ;
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_VAR 0 1
15129: PPUSH
15130: CALL_OW 255
15134: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15135: LD_ADDR_VAR 0 4
15139: PUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 248
15149: ST_TO_ADDR
// case nat of 1 :
15150: LD_VAR 0 4
15154: PUSH
15155: LD_INT 1
15157: DOUBLE
15158: EQUAL
15159: IFTRUE 15163
15161: GO 15174
15163: POP
// tech := tech_lassight ; 2 :
15164: LD_ADDR_VAR 0 5
15168: PUSH
15169: LD_INT 12
15171: ST_TO_ADDR
15172: GO 15213
15174: LD_INT 2
15176: DOUBLE
15177: EQUAL
15178: IFTRUE 15182
15180: GO 15193
15182: POP
// tech := tech_mortar ; 3 :
15183: LD_ADDR_VAR 0 5
15187: PUSH
15188: LD_INT 41
15190: ST_TO_ADDR
15191: GO 15213
15193: LD_INT 3
15195: DOUBLE
15196: EQUAL
15197: IFTRUE 15201
15199: GO 15212
15201: POP
// tech := tech_bazooka ; end ;
15202: LD_ADDR_VAR 0 5
15206: PUSH
15207: LD_INT 44
15209: ST_TO_ADDR
15210: GO 15213
15212: POP
// if Researched ( side , tech ) then
15213: LD_VAR 0 3
15217: PPUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: CALL_OW 325
15227: IFFALSE 15254
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 5
15236: PUSH
15237: LD_INT 8
15239: PUSH
15240: LD_INT 9
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: LD_VAR 0 4
15252: ARRAY
15253: ST_TO_ADDR
// end ;
15254: LD_VAR 0 2
15258: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15259: LD_INT 0
15261: PPUSH
15262: PPUSH
15263: PPUSH
// if not mines then
15264: LD_VAR 0 2
15268: NOT
15269: IFFALSE 15273
// exit ;
15271: GO 15417
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15273: LD_ADDR_VAR 0 5
15277: PUSH
15278: LD_INT 81
15280: PUSH
15281: LD_VAR 0 1
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 3
15292: PUSH
15293: LD_INT 21
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: ST_TO_ADDR
// for i in mines do
15316: LD_ADDR_VAR 0 4
15320: PUSH
15321: LD_VAR 0 2
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15415
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15329: LD_VAR 0 4
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: LD_VAR 0 4
15342: PUSH
15343: LD_INT 2
15345: ARRAY
15346: PPUSH
15347: CALL_OW 458
15351: NOT
15352: IFFALSE 15356
// continue ;
15354: GO 15326
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15356: LD_VAR 0 4
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: LD_VAR 0 4
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: PPUSH
15374: CALL_OW 428
15378: PUSH
15379: LD_VAR 0 5
15383: IN
15384: IFFALSE 15413
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15386: LD_VAR 0 4
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: LD_VAR 0 4
15399: PUSH
15400: LD_INT 2
15402: ARRAY
15403: PPUSH
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 456
// end ;
15413: GO 15326
15415: POP
15416: POP
// end ;
15417: LD_VAR 0 3
15421: RET
// export function Count ( array ) ; var i ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
// result := 0 ;
15426: LD_ADDR_VAR 0 2
15430: PUSH
15431: LD_INT 0
15433: ST_TO_ADDR
// for i in array do
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_VAR 0 1
15443: PUSH
15444: FOR_IN
15445: IFFALSE 15469
// if i then
15447: LD_VAR 0 3
15451: IFFALSE 15467
// result := result + 1 ;
15453: LD_ADDR_VAR 0 2
15457: PUSH
15458: LD_VAR 0 2
15462: PUSH
15463: LD_INT 1
15465: PLUS
15466: ST_TO_ADDR
15467: GO 15444
15469: POP
15470: POP
// end ;
15471: LD_VAR 0 2
15475: RET
// export function IsEmpty ( building ) ; begin
15476: LD_INT 0
15478: PPUSH
// if not building then
15479: LD_VAR 0 1
15483: NOT
15484: IFFALSE 15488
// exit ;
15486: GO 15531
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_VAR 0 1
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 58
15517: PUSH
15518: EMPTY
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PPUSH
15525: CALL_OW 69
15529: IN
15530: ST_TO_ADDR
// end ;
15531: LD_VAR 0 2
15535: RET
// export function IsNotFull ( building ) ; begin
15536: LD_INT 0
15538: PPUSH
// if not building then
15539: LD_VAR 0 1
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15567
// result := UnitsInside ( building ) < 6 ;
15548: LD_ADDR_VAR 0 2
15552: PUSH
15553: LD_VAR 0 1
15557: PPUSH
15558: CALL_OW 313
15562: PUSH
15563: LD_INT 6
15565: LESS
15566: ST_TO_ADDR
// end ;
15567: LD_VAR 0 2
15571: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
// tmp := [ ] ;
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: EMPTY
15584: ST_TO_ADDR
// list := [ ] ;
15585: LD_ADDR_VAR 0 5
15589: PUSH
15590: EMPTY
15591: ST_TO_ADDR
// for i = 16 to 25 do
15592: LD_ADDR_VAR 0 4
15596: PUSH
15597: DOUBLE
15598: LD_INT 16
15600: DEC
15601: ST_TO_ADDR
15602: LD_INT 25
15604: PUSH
15605: FOR_TO
15606: IFFALSE 15679
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15608: LD_ADDR_VAR 0 3
15612: PUSH
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: CALL_OW 255
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 91
15637: PUSH
15638: LD_VAR 0 1
15642: PUSH
15643: LD_INT 6
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_VAR 0 4
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: PPUSH
15671: CALL_OW 69
15675: ADD
15676: ST_TO_ADDR
15677: GO 15605
15679: POP
15680: POP
// for i = 1 to tmp do
15681: LD_ADDR_VAR 0 4
15685: PUSH
15686: DOUBLE
15687: LD_INT 1
15689: DEC
15690: ST_TO_ADDR
15691: LD_VAR 0 3
15695: PUSH
15696: FOR_TO
15697: IFFALSE 15785
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_VAR 0 5
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_VAR 0 4
15718: ARRAY
15719: PPUSH
15720: CALL_OW 266
15724: PUSH
15725: LD_VAR 0 3
15729: PUSH
15730: LD_VAR 0 4
15734: ARRAY
15735: PPUSH
15736: CALL_OW 250
15740: PUSH
15741: LD_VAR 0 3
15745: PUSH
15746: LD_VAR 0 4
15750: ARRAY
15751: PPUSH
15752: CALL_OW 251
15756: PUSH
15757: LD_VAR 0 3
15761: PUSH
15762: LD_VAR 0 4
15766: ARRAY
15767: PPUSH
15768: CALL_OW 254
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: ADD
15782: ST_TO_ADDR
15783: GO 15696
15785: POP
15786: POP
// result := list ;
15787: LD_ADDR_VAR 0 2
15791: PUSH
15792: LD_VAR 0 5
15796: ST_TO_ADDR
// end ;
15797: LD_VAR 0 2
15801: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
// if not factory then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 16413
// if control = control_apeman then
15820: LD_VAR 0 4
15824: PUSH
15825: LD_INT 5
15827: EQUAL
15828: IFFALSE 15937
// begin tmp := UnitsInside ( factory ) ;
15830: LD_ADDR_VAR 0 8
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 313
15844: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15845: LD_VAR 0 8
15849: PPUSH
15850: LD_INT 25
15852: PUSH
15853: LD_INT 12
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 72
15864: NOT
15865: IFFALSE 15875
// control := control_manual ;
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_INT 1
15874: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15875: LD_ADDR_VAR 0 8
15879: PUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL 15572 0 1
15889: ST_TO_ADDR
// if tmp then
15890: LD_VAR 0 8
15894: IFFALSE 15937
// begin for i in tmp do
15896: LD_ADDR_VAR 0 7
15900: PUSH
15901: LD_VAR 0 8
15905: PUSH
15906: FOR_IN
15907: IFFALSE 15935
// if i [ 1 ] = b_ext_radio then
15909: LD_VAR 0 7
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PUSH
15918: LD_INT 22
15920: EQUAL
15921: IFFALSE 15933
// begin control := control_remote ;
15923: LD_ADDR_VAR 0 4
15927: PUSH
15928: LD_INT 2
15930: ST_TO_ADDR
// break ;
15931: GO 15935
// end ;
15933: GO 15906
15935: POP
15936: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15937: LD_VAR 0 1
15941: PPUSH
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_VAR 0 4
15956: PPUSH
15957: LD_VAR 0 5
15961: PPUSH
15962: CALL_OW 448
15966: IFFALSE 16001
// begin result := [ chassis , engine , control , weapon ] ;
15968: LD_ADDR_VAR 0 6
15972: PUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_VAR 0 3
15982: PUSH
15983: LD_VAR 0 4
15987: PUSH
15988: LD_VAR 0 5
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// exit ;
15999: GO 16413
// end ; _chassis := AvailableChassisList ( factory ) ;
16001: LD_ADDR_VAR 0 9
16005: PUSH
16006: LD_VAR 0 1
16010: PPUSH
16011: CALL_OW 475
16015: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16016: LD_ADDR_VAR 0 11
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 476
16030: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16031: LD_ADDR_VAR 0 12
16035: PUSH
16036: LD_VAR 0 1
16040: PPUSH
16041: CALL_OW 477
16045: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16046: LD_ADDR_VAR 0 10
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 478
16060: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16061: LD_VAR 0 9
16065: NOT
16066: PUSH
16067: LD_VAR 0 11
16071: NOT
16072: OR
16073: PUSH
16074: LD_VAR 0 12
16078: NOT
16079: OR
16080: PUSH
16081: LD_VAR 0 10
16085: NOT
16086: OR
16087: IFFALSE 16122
// begin result := [ chassis , engine , control , weapon ] ;
16089: LD_ADDR_VAR 0 6
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_VAR 0 3
16103: PUSH
16104: LD_VAR 0 4
16108: PUSH
16109: LD_VAR 0 5
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: ST_TO_ADDR
// exit ;
16120: GO 16413
// end ; if not chassis in _chassis then
16122: LD_VAR 0 2
16126: PUSH
16127: LD_VAR 0 9
16131: IN
16132: NOT
16133: IFFALSE 16159
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_VAR 0 9
16144: PUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_VAR 0 9
16152: PPUSH
16153: CALL_OW 12
16157: ARRAY
16158: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16159: LD_VAR 0 2
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: CALL 16418 0 2
16173: NOT
16174: IFFALSE 16233
// repeat engine := _engine [ 1 ] ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_VAR 0 11
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16190: LD_ADDR_VAR 0 11
16194: PUSH
16195: LD_VAR 0 11
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: CALL_OW 3
16207: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16208: LD_VAR 0 2
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: CALL 16418 0 2
16222: PUSH
16223: LD_VAR 0 11
16227: PUSH
16228: EMPTY
16229: EQUAL
16230: OR
16231: IFFALSE 16176
// if not control in _control then
16233: LD_VAR 0 4
16237: PUSH
16238: LD_VAR 0 12
16242: IN
16243: NOT
16244: IFFALSE 16270
// control := _control [ rand ( 1 , _control ) ] ;
16246: LD_ADDR_VAR 0 4
16250: PUSH
16251: LD_VAR 0 12
16255: PUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_VAR 0 12
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_VAR 0 5
16279: PPUSH
16280: CALL 16638 0 2
16284: NOT
16285: IFFALSE 16344
// repeat weapon := _weapon [ 1 ] ;
16287: LD_ADDR_VAR 0 5
16291: PUSH
16292: LD_VAR 0 10
16296: PUSH
16297: LD_INT 1
16299: ARRAY
16300: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16301: LD_ADDR_VAR 0 10
16305: PUSH
16306: LD_VAR 0 10
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 3
16318: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16319: LD_VAR 0 2
16323: PPUSH
16324: LD_VAR 0 5
16328: PPUSH
16329: CALL 16638 0 2
16333: PUSH
16334: LD_VAR 0 10
16338: PUSH
16339: EMPTY
16340: EQUAL
16341: OR
16342: IFFALSE 16287
// result := [ ] ;
16344: LD_ADDR_VAR 0 6
16348: PUSH
16349: EMPTY
16350: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: LD_VAR 0 5
16375: PPUSH
16376: CALL_OW 448
16380: IFFALSE 16413
// result := [ chassis , engine , control , weapon ] ;
16382: LD_ADDR_VAR 0 6
16386: PUSH
16387: LD_VAR 0 2
16391: PUSH
16392: LD_VAR 0 3
16396: PUSH
16397: LD_VAR 0 4
16401: PUSH
16402: LD_VAR 0 5
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// end ;
16413: LD_VAR 0 6
16417: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16418: LD_INT 0
16420: PPUSH
// if not chassis or not engine then
16421: LD_VAR 0 1
16425: NOT
16426: PUSH
16427: LD_VAR 0 2
16431: NOT
16432: OR
16433: IFFALSE 16437
// exit ;
16435: GO 16633
// case engine of engine_solar :
16437: LD_VAR 0 2
16441: PUSH
16442: LD_INT 2
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16488
16450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_INT 11
16458: PUSH
16459: LD_INT 12
16461: PUSH
16462: LD_INT 13
16464: PUSH
16465: LD_INT 14
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: ST_TO_ADDR
16486: GO 16617
16488: LD_INT 1
16490: DOUBLE
16491: EQUAL
16492: IFTRUE 16496
16494: GO 16558
16496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16497: LD_ADDR_VAR 0 3
16501: PUSH
16502: LD_INT 11
16504: PUSH
16505: LD_INT 12
16507: PUSH
16508: LD_INT 13
16510: PUSH
16511: LD_INT 14
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 23
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_INT 24
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: ST_TO_ADDR
16556: GO 16617
16558: LD_INT 3
16560: DOUBLE
16561: EQUAL
16562: IFTRUE 16566
16564: GO 16616
16566: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16567: LD_ADDR_VAR 0 3
16571: PUSH
16572: LD_INT 13
16574: PUSH
16575: LD_INT 14
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 4
16586: PUSH
16587: LD_INT 5
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_INT 23
16598: PUSH
16599: LD_INT 24
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: ST_TO_ADDR
16614: GO 16617
16616: POP
// result := ( chassis in result ) ;
16617: LD_ADDR_VAR 0 3
16621: PUSH
16622: LD_VAR 0 1
16626: PUSH
16627: LD_VAR 0 3
16631: IN
16632: ST_TO_ADDR
// end ;
16633: LD_VAR 0 3
16637: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16638: LD_INT 0
16640: PPUSH
// if not chassis or not weapon then
16641: LD_VAR 0 1
16645: NOT
16646: PUSH
16647: LD_VAR 0 2
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 17683
// case weapon of us_machine_gun :
16657: LD_VAR 0 2
16661: PUSH
16662: LD_INT 2
16664: DOUBLE
16665: EQUAL
16666: IFTRUE 16670
16668: GO 16700
16670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 3
16684: PUSH
16685: LD_INT 4
16687: PUSH
16688: LD_INT 5
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: ST_TO_ADDR
16698: GO 17667
16700: LD_INT 3
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16738
16708: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 4
16725: PUSH
16726: LD_INT 5
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
16736: GO 17667
16738: LD_INT 11
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16776
16746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16747: LD_ADDR_VAR 0 3
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: LD_INT 3
16760: PUSH
16761: LD_INT 4
16763: PUSH
16764: LD_INT 5
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: ST_TO_ADDR
16774: GO 17667
16776: LD_INT 4
16778: DOUBLE
16779: EQUAL
16780: IFTRUE 16784
16782: GO 16810
16784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 3
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: LD_INT 5
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: ST_TO_ADDR
16808: GO 17667
16810: LD_INT 5
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16844
16818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16819: LD_ADDR_VAR 0 3
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: LD_INT 3
16829: PUSH
16830: LD_INT 4
16832: PUSH
16833: LD_INT 5
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: ST_TO_ADDR
16842: GO 17667
16844: LD_INT 9
16846: DOUBLE
16847: EQUAL
16848: IFTRUE 16852
16850: GO 16878
16852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16853: LD_ADDR_VAR 0 3
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: ST_TO_ADDR
16876: GO 17667
16878: LD_INT 7
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16912
16886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 3
16897: PUSH
16898: LD_INT 4
16900: PUSH
16901: LD_INT 5
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: ST_TO_ADDR
16910: GO 17667
16912: LD_INT 12
16914: DOUBLE
16915: EQUAL
16916: IFTRUE 16920
16918: GO 16946
16920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16921: LD_ADDR_VAR 0 3
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: LD_INT 5
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: ST_TO_ADDR
16944: GO 17667
16946: LD_INT 13
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 16980
16954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: LD_INT 3
16965: PUSH
16966: LD_INT 4
16968: PUSH
16969: LD_INT 5
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: ST_TO_ADDR
16978: GO 17667
16980: LD_INT 14
16982: DOUBLE
16983: EQUAL
16984: IFTRUE 16988
16986: GO 17006
16988: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16989: LD_ADDR_VAR 0 3
16993: PUSH
16994: LD_INT 4
16996: PUSH
16997: LD_INT 5
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: ST_TO_ADDR
17004: GO 17667
17006: LD_INT 6
17008: DOUBLE
17009: EQUAL
17010: IFTRUE 17014
17012: GO 17032
17014: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: LD_INT 4
17022: PUSH
17023: LD_INT 5
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: ST_TO_ADDR
17030: GO 17667
17032: LD_INT 10
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17058
17040: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17041: LD_ADDR_VAR 0 3
17045: PUSH
17046: LD_INT 4
17048: PUSH
17049: LD_INT 5
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: ST_TO_ADDR
17056: GO 17667
17058: LD_INT 22
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17092
17066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_INT 11
17074: PUSH
17075: LD_INT 12
17077: PUSH
17078: LD_INT 13
17080: PUSH
17081: LD_INT 14
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: ST_TO_ADDR
17090: GO 17667
17092: LD_INT 23
17094: DOUBLE
17095: EQUAL
17096: IFTRUE 17100
17098: GO 17126
17100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17101: LD_ADDR_VAR 0 3
17105: PUSH
17106: LD_INT 11
17108: PUSH
17109: LD_INT 12
17111: PUSH
17112: LD_INT 13
17114: PUSH
17115: LD_INT 14
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: ST_TO_ADDR
17124: GO 17667
17126: LD_INT 24
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17160
17134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17135: LD_ADDR_VAR 0 3
17139: PUSH
17140: LD_INT 11
17142: PUSH
17143: LD_INT 12
17145: PUSH
17146: LD_INT 13
17148: PUSH
17149: LD_INT 14
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: ST_TO_ADDR
17158: GO 17667
17160: LD_INT 30
17162: DOUBLE
17163: EQUAL
17164: IFTRUE 17168
17166: GO 17194
17168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17169: LD_ADDR_VAR 0 3
17173: PUSH
17174: LD_INT 11
17176: PUSH
17177: LD_INT 12
17179: PUSH
17180: LD_INT 13
17182: PUSH
17183: LD_INT 14
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: ST_TO_ADDR
17192: GO 17667
17194: LD_INT 25
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17220
17202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17203: LD_ADDR_VAR 0 3
17207: PUSH
17208: LD_INT 13
17210: PUSH
17211: LD_INT 14
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 17667
17220: LD_INT 27
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17246
17228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 13
17236: PUSH
17237: LD_INT 14
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: ST_TO_ADDR
17244: GO 17667
17246: LD_INT 28
17248: DOUBLE
17249: EQUAL
17250: IFTRUE 17254
17252: GO 17272
17254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17255: LD_ADDR_VAR 0 3
17259: PUSH
17260: LD_INT 13
17262: PUSH
17263: LD_INT 14
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: ST_TO_ADDR
17270: GO 17667
17272: LD_INT 29
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17298
17280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17281: LD_ADDR_VAR 0 3
17285: PUSH
17286: LD_INT 13
17288: PUSH
17289: LD_INT 14
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: ST_TO_ADDR
17296: GO 17667
17298: LD_INT 31
17300: DOUBLE
17301: EQUAL
17302: IFTRUE 17306
17304: GO 17324
17306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17307: LD_ADDR_VAR 0 3
17311: PUSH
17312: LD_INT 13
17314: PUSH
17315: LD_INT 14
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: ST_TO_ADDR
17322: GO 17667
17324: LD_INT 26
17326: DOUBLE
17327: EQUAL
17328: IFTRUE 17332
17330: GO 17350
17332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17333: LD_ADDR_VAR 0 3
17337: PUSH
17338: LD_INT 13
17340: PUSH
17341: LD_INT 14
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: ST_TO_ADDR
17348: GO 17667
17350: LD_INT 42
17352: DOUBLE
17353: EQUAL
17354: IFTRUE 17358
17356: GO 17384
17358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17359: LD_ADDR_VAR 0 3
17363: PUSH
17364: LD_INT 21
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 23
17372: PUSH
17373: LD_INT 24
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: ST_TO_ADDR
17382: GO 17667
17384: LD_INT 43
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17418
17392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17393: LD_ADDR_VAR 0 3
17397: PUSH
17398: LD_INT 21
17400: PUSH
17401: LD_INT 22
17403: PUSH
17404: LD_INT 23
17406: PUSH
17407: LD_INT 24
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: ST_TO_ADDR
17416: GO 17667
17418: LD_INT 44
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17452
17426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17427: LD_ADDR_VAR 0 3
17431: PUSH
17432: LD_INT 21
17434: PUSH
17435: LD_INT 22
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 24
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: ST_TO_ADDR
17450: GO 17667
17452: LD_INT 45
17454: DOUBLE
17455: EQUAL
17456: IFTRUE 17460
17458: GO 17486
17460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_INT 21
17468: PUSH
17469: LD_INT 22
17471: PUSH
17472: LD_INT 23
17474: PUSH
17475: LD_INT 24
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
17484: GO 17667
17486: LD_INT 49
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 17520
17494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17495: LD_ADDR_VAR 0 3
17499: PUSH
17500: LD_INT 21
17502: PUSH
17503: LD_INT 22
17505: PUSH
17506: LD_INT 23
17508: PUSH
17509: LD_INT 24
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: ST_TO_ADDR
17518: GO 17667
17520: LD_INT 51
17522: DOUBLE
17523: EQUAL
17524: IFTRUE 17528
17526: GO 17554
17528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17529: LD_ADDR_VAR 0 3
17533: PUSH
17534: LD_INT 21
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: LD_INT 23
17542: PUSH
17543: LD_INT 24
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: ST_TO_ADDR
17552: GO 17667
17554: LD_INT 52
17556: DOUBLE
17557: EQUAL
17558: IFTRUE 17562
17560: GO 17588
17562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17563: LD_ADDR_VAR 0 3
17567: PUSH
17568: LD_INT 21
17570: PUSH
17571: LD_INT 22
17573: PUSH
17574: LD_INT 23
17576: PUSH
17577: LD_INT 24
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: ST_TO_ADDR
17586: GO 17667
17588: LD_INT 53
17590: DOUBLE
17591: EQUAL
17592: IFTRUE 17596
17594: GO 17614
17596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17597: LD_ADDR_VAR 0 3
17601: PUSH
17602: LD_INT 23
17604: PUSH
17605: LD_INT 24
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: ST_TO_ADDR
17612: GO 17667
17614: LD_INT 46
17616: DOUBLE
17617: EQUAL
17618: IFTRUE 17622
17620: GO 17640
17622: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17623: LD_ADDR_VAR 0 3
17627: PUSH
17628: LD_INT 23
17630: PUSH
17631: LD_INT 24
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: ST_TO_ADDR
17638: GO 17667
17640: LD_INT 47
17642: DOUBLE
17643: EQUAL
17644: IFTRUE 17648
17646: GO 17666
17648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17649: LD_ADDR_VAR 0 3
17653: PUSH
17654: LD_INT 23
17656: PUSH
17657: LD_INT 24
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: ST_TO_ADDR
17664: GO 17667
17666: POP
// result := ( chassis in result ) ;
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: LD_VAR 0 1
17676: PUSH
17677: LD_VAR 0 3
17681: IN
17682: ST_TO_ADDR
// end ;
17683: LD_VAR 0 3
17687: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17688: LD_INT 0
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
// result := array ;
17697: LD_ADDR_VAR 0 5
17701: PUSH
17702: LD_VAR 0 1
17706: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17707: LD_VAR 0 1
17711: NOT
17712: PUSH
17713: LD_VAR 0 2
17717: NOT
17718: OR
17719: PUSH
17720: LD_VAR 0 3
17724: NOT
17725: OR
17726: PUSH
17727: LD_VAR 0 2
17731: PUSH
17732: LD_VAR 0 1
17736: GREATER
17737: OR
17738: PUSH
17739: LD_VAR 0 3
17743: PUSH
17744: LD_VAR 0 1
17748: GREATER
17749: OR
17750: IFFALSE 17754
// exit ;
17752: GO 18050
// if direction then
17754: LD_VAR 0 4
17758: IFFALSE 17822
// begin d := 1 ;
17760: LD_ADDR_VAR 0 9
17764: PUSH
17765: LD_INT 1
17767: ST_TO_ADDR
// if i_from > i_to then
17768: LD_VAR 0 2
17772: PUSH
17773: LD_VAR 0 3
17777: GREATER
17778: IFFALSE 17804
// length := ( array - i_from ) + i_to else
17780: LD_ADDR_VAR 0 11
17784: PUSH
17785: LD_VAR 0 1
17789: PUSH
17790: LD_VAR 0 2
17794: MINUS
17795: PUSH
17796: LD_VAR 0 3
17800: PLUS
17801: ST_TO_ADDR
17802: GO 17820
// length := i_to - i_from ;
17804: LD_ADDR_VAR 0 11
17808: PUSH
17809: LD_VAR 0 3
17813: PUSH
17814: LD_VAR 0 2
17818: MINUS
17819: ST_TO_ADDR
// end else
17820: GO 17883
// begin d := - 1 ;
17822: LD_ADDR_VAR 0 9
17826: PUSH
17827: LD_INT 1
17829: NEG
17830: ST_TO_ADDR
// if i_from > i_to then
17831: LD_VAR 0 2
17835: PUSH
17836: LD_VAR 0 3
17840: GREATER
17841: IFFALSE 17861
// length := i_from - i_to else
17843: LD_ADDR_VAR 0 11
17847: PUSH
17848: LD_VAR 0 2
17852: PUSH
17853: LD_VAR 0 3
17857: MINUS
17858: ST_TO_ADDR
17859: GO 17883
// length := ( array - i_to ) + i_from ;
17861: LD_ADDR_VAR 0 11
17865: PUSH
17866: LD_VAR 0 1
17870: PUSH
17871: LD_VAR 0 3
17875: MINUS
17876: PUSH
17877: LD_VAR 0 2
17881: PLUS
17882: ST_TO_ADDR
// end ; if not length then
17883: LD_VAR 0 11
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 18050
// tmp := array ;
17892: LD_ADDR_VAR 0 10
17896: PUSH
17897: LD_VAR 0 1
17901: ST_TO_ADDR
// for i = 1 to length do
17902: LD_ADDR_VAR 0 6
17906: PUSH
17907: DOUBLE
17908: LD_INT 1
17910: DEC
17911: ST_TO_ADDR
17912: LD_VAR 0 11
17916: PUSH
17917: FOR_TO
17918: IFFALSE 18038
// begin for j = 1 to array do
17920: LD_ADDR_VAR 0 7
17924: PUSH
17925: DOUBLE
17926: LD_INT 1
17928: DEC
17929: ST_TO_ADDR
17930: LD_VAR 0 1
17934: PUSH
17935: FOR_TO
17936: IFFALSE 18024
// begin k := j + d ;
17938: LD_ADDR_VAR 0 8
17942: PUSH
17943: LD_VAR 0 7
17947: PUSH
17948: LD_VAR 0 9
17952: PLUS
17953: ST_TO_ADDR
// if k > array then
17954: LD_VAR 0 8
17958: PUSH
17959: LD_VAR 0 1
17963: GREATER
17964: IFFALSE 17974
// k := 1 ;
17966: LD_ADDR_VAR 0 8
17970: PUSH
17971: LD_INT 1
17973: ST_TO_ADDR
// if not k then
17974: LD_VAR 0 8
17978: NOT
17979: IFFALSE 17991
// k := array ;
17981: LD_ADDR_VAR 0 8
17985: PUSH
17986: LD_VAR 0 1
17990: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17991: LD_ADDR_VAR 0 10
17995: PUSH
17996: LD_VAR 0 10
18000: PPUSH
18001: LD_VAR 0 8
18005: PPUSH
18006: LD_VAR 0 1
18010: PUSH
18011: LD_VAR 0 7
18015: ARRAY
18016: PPUSH
18017: CALL_OW 1
18021: ST_TO_ADDR
// end ;
18022: GO 17935
18024: POP
18025: POP
// array := tmp ;
18026: LD_ADDR_VAR 0 1
18030: PUSH
18031: LD_VAR 0 10
18035: ST_TO_ADDR
// end ;
18036: GO 17917
18038: POP
18039: POP
// result := array ;
18040: LD_ADDR_VAR 0 5
18044: PUSH
18045: LD_VAR 0 1
18049: ST_TO_ADDR
// end ;
18050: LD_VAR 0 5
18054: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18055: LD_INT 0
18057: PPUSH
18058: PPUSH
// result := 0 ;
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_INT 0
18066: ST_TO_ADDR
// if not array or not value in array then
18067: LD_VAR 0 1
18071: NOT
18072: PUSH
18073: LD_VAR 0 2
18077: PUSH
18078: LD_VAR 0 1
18082: IN
18083: NOT
18084: OR
18085: IFFALSE 18089
// exit ;
18087: GO 18143
// for i = 1 to array do
18089: LD_ADDR_VAR 0 4
18093: PUSH
18094: DOUBLE
18095: LD_INT 1
18097: DEC
18098: ST_TO_ADDR
18099: LD_VAR 0 1
18103: PUSH
18104: FOR_TO
18105: IFFALSE 18141
// if value = array [ i ] then
18107: LD_VAR 0 2
18111: PUSH
18112: LD_VAR 0 1
18116: PUSH
18117: LD_VAR 0 4
18121: ARRAY
18122: EQUAL
18123: IFFALSE 18139
// begin result := i ;
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: LD_VAR 0 4
18134: ST_TO_ADDR
// exit ;
18135: POP
18136: POP
18137: GO 18143
// end ;
18139: GO 18104
18141: POP
18142: POP
// end ;
18143: LD_VAR 0 3
18147: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18148: LD_INT 0
18150: PPUSH
// vc_chassis := chassis ;
18151: LD_ADDR_OWVAR 37
18155: PUSH
18156: LD_VAR 0 1
18160: ST_TO_ADDR
// vc_engine := engine ;
18161: LD_ADDR_OWVAR 39
18165: PUSH
18166: LD_VAR 0 2
18170: ST_TO_ADDR
// vc_control := control ;
18171: LD_ADDR_OWVAR 38
18175: PUSH
18176: LD_VAR 0 3
18180: ST_TO_ADDR
// vc_weapon := weapon ;
18181: LD_ADDR_OWVAR 40
18185: PUSH
18186: LD_VAR 0 4
18190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18191: LD_ADDR_OWVAR 41
18195: PUSH
18196: LD_VAR 0 5
18200: ST_TO_ADDR
// end ;
18201: LD_VAR 0 6
18205: RET
// export function WantPlant ( unit ) ; var task ; begin
18206: LD_INT 0
18208: PPUSH
18209: PPUSH
// result := false ;
18210: LD_ADDR_VAR 0 2
18214: PUSH
18215: LD_INT 0
18217: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 437
18232: ST_TO_ADDR
// if task then
18233: LD_VAR 0 3
18237: IFFALSE 18265
// if task [ 1 ] [ 1 ] = p then
18239: LD_VAR 0 3
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_STRING p
18254: EQUAL
18255: IFFALSE 18265
// result := true ;
18257: LD_ADDR_VAR 0 2
18261: PUSH
18262: LD_INT 1
18264: ST_TO_ADDR
// end ;
18265: LD_VAR 0 2
18269: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18270: LD_INT 0
18272: PPUSH
18273: PPUSH
18274: PPUSH
18275: PPUSH
// if pos < 1 then
18276: LD_VAR 0 2
18280: PUSH
18281: LD_INT 1
18283: LESS
18284: IFFALSE 18288
// exit ;
18286: GO 18591
// if pos = 1 then
18288: LD_VAR 0 2
18292: PUSH
18293: LD_INT 1
18295: EQUAL
18296: IFFALSE 18329
// result := Replace ( arr , pos [ 1 ] , value ) else
18298: LD_ADDR_VAR 0 4
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: LD_VAR 0 2
18312: PUSH
18313: LD_INT 1
18315: ARRAY
18316: PPUSH
18317: LD_VAR 0 3
18321: PPUSH
18322: CALL_OW 1
18326: ST_TO_ADDR
18327: GO 18591
// begin tmp := arr ;
18329: LD_ADDR_VAR 0 6
18333: PUSH
18334: LD_VAR 0 1
18338: ST_TO_ADDR
// s_arr := [ tmp ] ;
18339: LD_ADDR_VAR 0 7
18343: PUSH
18344: LD_VAR 0 6
18348: PUSH
18349: EMPTY
18350: LIST
18351: ST_TO_ADDR
// for i = 1 to pos - 1 do
18352: LD_ADDR_VAR 0 5
18356: PUSH
18357: DOUBLE
18358: LD_INT 1
18360: DEC
18361: ST_TO_ADDR
18362: LD_VAR 0 2
18366: PUSH
18367: LD_INT 1
18369: MINUS
18370: PUSH
18371: FOR_TO
18372: IFFALSE 18417
// begin tmp := tmp [ pos [ i ] ] ;
18374: LD_ADDR_VAR 0 6
18378: PUSH
18379: LD_VAR 0 6
18383: PUSH
18384: LD_VAR 0 2
18388: PUSH
18389: LD_VAR 0 5
18393: ARRAY
18394: ARRAY
18395: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18396: LD_ADDR_VAR 0 7
18400: PUSH
18401: LD_VAR 0 7
18405: PUSH
18406: LD_VAR 0 6
18410: PUSH
18411: EMPTY
18412: LIST
18413: ADD
18414: ST_TO_ADDR
// end ;
18415: GO 18371
18417: POP
18418: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18419: LD_ADDR_VAR 0 6
18423: PUSH
18424: LD_VAR 0 6
18428: PPUSH
18429: LD_VAR 0 2
18433: PUSH
18434: LD_VAR 0 2
18438: ARRAY
18439: PPUSH
18440: LD_VAR 0 3
18444: PPUSH
18445: CALL_OW 1
18449: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18450: LD_ADDR_VAR 0 7
18454: PUSH
18455: LD_VAR 0 7
18459: PPUSH
18460: LD_VAR 0 7
18464: PPUSH
18465: LD_VAR 0 6
18469: PPUSH
18470: CALL_OW 1
18474: ST_TO_ADDR
// for i = s_arr downto 2 do
18475: LD_ADDR_VAR 0 5
18479: PUSH
18480: DOUBLE
18481: LD_VAR 0 7
18485: INC
18486: ST_TO_ADDR
18487: LD_INT 2
18489: PUSH
18490: FOR_DOWNTO
18491: IFFALSE 18575
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18493: LD_ADDR_VAR 0 6
18497: PUSH
18498: LD_VAR 0 7
18502: PUSH
18503: LD_VAR 0 5
18507: PUSH
18508: LD_INT 1
18510: MINUS
18511: ARRAY
18512: PPUSH
18513: LD_VAR 0 2
18517: PUSH
18518: LD_VAR 0 5
18522: PUSH
18523: LD_INT 1
18525: MINUS
18526: ARRAY
18527: PPUSH
18528: LD_VAR 0 7
18532: PUSH
18533: LD_VAR 0 5
18537: ARRAY
18538: PPUSH
18539: CALL_OW 1
18543: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18544: LD_ADDR_VAR 0 7
18548: PUSH
18549: LD_VAR 0 7
18553: PPUSH
18554: LD_VAR 0 5
18558: PUSH
18559: LD_INT 1
18561: MINUS
18562: PPUSH
18563: LD_VAR 0 6
18567: PPUSH
18568: CALL_OW 1
18572: ST_TO_ADDR
// end ;
18573: GO 18490
18575: POP
18576: POP
// result := s_arr [ 1 ] ;
18577: LD_ADDR_VAR 0 4
18581: PUSH
18582: LD_VAR 0 7
18586: PUSH
18587: LD_INT 1
18589: ARRAY
18590: ST_TO_ADDR
// end ; end ;
18591: LD_VAR 0 4
18595: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18596: LD_INT 0
18598: PPUSH
18599: PPUSH
// if not list then
18600: LD_VAR 0 1
18604: NOT
18605: IFFALSE 18609
// exit ;
18607: GO 18700
// i := list [ pos1 ] ;
18609: LD_ADDR_VAR 0 5
18613: PUSH
18614: LD_VAR 0 1
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: ST_TO_ADDR
// if not i then
18625: LD_VAR 0 5
18629: NOT
18630: IFFALSE 18634
// exit ;
18632: GO 18700
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18634: LD_ADDR_VAR 0 1
18638: PUSH
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_VAR 0 1
18653: PUSH
18654: LD_VAR 0 3
18658: ARRAY
18659: PPUSH
18660: CALL_OW 1
18664: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18665: LD_ADDR_VAR 0 1
18669: PUSH
18670: LD_VAR 0 1
18674: PPUSH
18675: LD_VAR 0 3
18679: PPUSH
18680: LD_VAR 0 5
18684: PPUSH
18685: CALL_OW 1
18689: ST_TO_ADDR
// result := list ;
18690: LD_ADDR_VAR 0 4
18694: PUSH
18695: LD_VAR 0 1
18699: ST_TO_ADDR
// end ;
18700: LD_VAR 0 4
18704: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18705: LD_INT 0
18707: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18708: LD_ADDR_VAR 0 5
18712: PUSH
18713: LD_VAR 0 1
18717: PPUSH
18718: CALL_OW 250
18722: PPUSH
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL_OW 251
18732: PPUSH
18733: LD_VAR 0 2
18737: PPUSH
18738: LD_VAR 0 3
18742: PPUSH
18743: LD_VAR 0 4
18747: PPUSH
18748: CALL 18758 0 5
18752: ST_TO_ADDR
// end ;
18753: LD_VAR 0 5
18757: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18758: LD_INT 0
18760: PPUSH
18761: PPUSH
18762: PPUSH
18763: PPUSH
// if not list then
18764: LD_VAR 0 3
18768: NOT
18769: IFFALSE 18773
// exit ;
18771: GO 19161
// result := [ ] ;
18773: LD_ADDR_VAR 0 6
18777: PUSH
18778: EMPTY
18779: ST_TO_ADDR
// for i in list do
18780: LD_ADDR_VAR 0 7
18784: PUSH
18785: LD_VAR 0 3
18789: PUSH
18790: FOR_IN
18791: IFFALSE 18993
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18793: LD_ADDR_VAR 0 9
18797: PUSH
18798: LD_VAR 0 7
18802: PPUSH
18803: LD_VAR 0 1
18807: PPUSH
18808: LD_VAR 0 2
18812: PPUSH
18813: CALL_OW 297
18817: ST_TO_ADDR
// if not result then
18818: LD_VAR 0 6
18822: NOT
18823: IFFALSE 18849
// result := [ [ i , tmp ] ] else
18825: LD_ADDR_VAR 0 6
18829: PUSH
18830: LD_VAR 0 7
18834: PUSH
18835: LD_VAR 0 9
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: ST_TO_ADDR
18847: GO 18991
// begin if result [ result ] [ 2 ] < tmp then
18849: LD_VAR 0 6
18853: PUSH
18854: LD_VAR 0 6
18858: ARRAY
18859: PUSH
18860: LD_INT 2
18862: ARRAY
18863: PUSH
18864: LD_VAR 0 9
18868: LESS
18869: IFFALSE 18911
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18871: LD_ADDR_VAR 0 6
18875: PUSH
18876: LD_VAR 0 6
18880: PPUSH
18881: LD_VAR 0 6
18885: PUSH
18886: LD_INT 1
18888: PLUS
18889: PPUSH
18890: LD_VAR 0 7
18894: PUSH
18895: LD_VAR 0 9
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PPUSH
18904: CALL_OW 2
18908: ST_TO_ADDR
18909: GO 18991
// for j = 1 to result do
18911: LD_ADDR_VAR 0 8
18915: PUSH
18916: DOUBLE
18917: LD_INT 1
18919: DEC
18920: ST_TO_ADDR
18921: LD_VAR 0 6
18925: PUSH
18926: FOR_TO
18927: IFFALSE 18989
// begin if tmp < result [ j ] [ 2 ] then
18929: LD_VAR 0 9
18933: PUSH
18934: LD_VAR 0 6
18938: PUSH
18939: LD_VAR 0 8
18943: ARRAY
18944: PUSH
18945: LD_INT 2
18947: ARRAY
18948: LESS
18949: IFFALSE 18987
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18951: LD_ADDR_VAR 0 6
18955: PUSH
18956: LD_VAR 0 6
18960: PPUSH
18961: LD_VAR 0 8
18965: PPUSH
18966: LD_VAR 0 7
18970: PUSH
18971: LD_VAR 0 9
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PPUSH
18980: CALL_OW 2
18984: ST_TO_ADDR
// break ;
18985: GO 18989
// end ; end ;
18987: GO 18926
18989: POP
18990: POP
// end ; end ;
18991: GO 18790
18993: POP
18994: POP
// if result and not asc then
18995: LD_VAR 0 6
18999: PUSH
19000: LD_VAR 0 4
19004: NOT
19005: AND
19006: IFFALSE 19081
// begin tmp := result ;
19008: LD_ADDR_VAR 0 9
19012: PUSH
19013: LD_VAR 0 6
19017: ST_TO_ADDR
// for i = tmp downto 1 do
19018: LD_ADDR_VAR 0 7
19022: PUSH
19023: DOUBLE
19024: LD_VAR 0 9
19028: INC
19029: ST_TO_ADDR
19030: LD_INT 1
19032: PUSH
19033: FOR_DOWNTO
19034: IFFALSE 19079
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19036: LD_ADDR_VAR 0 6
19040: PUSH
19041: LD_VAR 0 6
19045: PPUSH
19046: LD_VAR 0 9
19050: PUSH
19051: LD_VAR 0 7
19055: MINUS
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: PPUSH
19061: LD_VAR 0 9
19065: PUSH
19066: LD_VAR 0 7
19070: ARRAY
19071: PPUSH
19072: CALL_OW 1
19076: ST_TO_ADDR
19077: GO 19033
19079: POP
19080: POP
// end ; tmp := [ ] ;
19081: LD_ADDR_VAR 0 9
19085: PUSH
19086: EMPTY
19087: ST_TO_ADDR
// if mode then
19088: LD_VAR 0 5
19092: IFFALSE 19161
// begin for i = 1 to result do
19094: LD_ADDR_VAR 0 7
19098: PUSH
19099: DOUBLE
19100: LD_INT 1
19102: DEC
19103: ST_TO_ADDR
19104: LD_VAR 0 6
19108: PUSH
19109: FOR_TO
19110: IFFALSE 19149
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19112: LD_ADDR_VAR 0 9
19116: PUSH
19117: LD_VAR 0 9
19121: PPUSH
19122: LD_VAR 0 7
19126: PPUSH
19127: LD_VAR 0 6
19131: PUSH
19132: LD_VAR 0 7
19136: ARRAY
19137: PUSH
19138: LD_INT 1
19140: ARRAY
19141: PPUSH
19142: CALL_OW 1
19146: ST_TO_ADDR
19147: GO 19109
19149: POP
19150: POP
// result := tmp ;
19151: LD_ADDR_VAR 0 6
19155: PUSH
19156: LD_VAR 0 9
19160: ST_TO_ADDR
// end ; end ;
19161: LD_VAR 0 6
19165: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19166: LD_INT 0
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19174: LD_ADDR_VAR 0 5
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: ST_TO_ADDR
// if not x or not y then
19196: LD_VAR 0 2
19200: NOT
19201: PUSH
19202: LD_VAR 0 3
19206: NOT
19207: OR
19208: IFFALSE 19212
// exit ;
19210: GO 20858
// if not range then
19212: LD_VAR 0 4
19216: NOT
19217: IFFALSE 19227
// range := 10 ;
19219: LD_ADDR_VAR 0 4
19223: PUSH
19224: LD_INT 10
19226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19227: LD_ADDR_VAR 0 8
19231: PUSH
19232: LD_INT 81
19234: PUSH
19235: LD_VAR 0 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 92
19246: PUSH
19247: LD_VAR 0 2
19251: PUSH
19252: LD_VAR 0 3
19256: PUSH
19257: LD_VAR 0 4
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: LD_INT 21
19273: PUSH
19274: LD_INT 3
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: PPUSH
19290: CALL_OW 69
19294: ST_TO_ADDR
// if not tmp then
19295: LD_VAR 0 8
19299: NOT
19300: IFFALSE 19304
// exit ;
19302: GO 20858
// for i in tmp do
19304: LD_ADDR_VAR 0 6
19308: PUSH
19309: LD_VAR 0 8
19313: PUSH
19314: FOR_IN
19315: IFFALSE 20833
// begin points := [ 0 , 0 , 0 ] ;
19317: LD_ADDR_VAR 0 9
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: ST_TO_ADDR
// bpoints := 1 ;
19336: LD_ADDR_VAR 0 10
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19344: LD_VAR 0 6
19348: PPUSH
19349: CALL_OW 247
19353: PUSH
19354: LD_INT 1
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19940
19362: POP
// begin if GetClass ( i ) = 1 then
19363: LD_VAR 0 6
19367: PPUSH
19368: CALL_OW 257
19372: PUSH
19373: LD_INT 1
19375: EQUAL
19376: IFFALSE 19397
// points := [ 10 , 5 , 3 ] ;
19378: LD_ADDR_VAR 0 9
19382: PUSH
19383: LD_INT 10
19385: PUSH
19386: LD_INT 5
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19397: LD_VAR 0 6
19401: PPUSH
19402: CALL_OW 257
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 4
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: IN
19421: IFFALSE 19442
// points := [ 3 , 2 , 1 ] ;
19423: LD_ADDR_VAR 0 9
19427: PUSH
19428: LD_INT 3
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19442: LD_VAR 0 6
19446: PPUSH
19447: CALL_OW 257
19451: PUSH
19452: LD_INT 5
19454: EQUAL
19455: IFFALSE 19476
// points := [ 130 , 5 , 2 ] ;
19457: LD_ADDR_VAR 0 9
19461: PUSH
19462: LD_INT 130
19464: PUSH
19465: LD_INT 5
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19476: LD_VAR 0 6
19480: PPUSH
19481: CALL_OW 257
19485: PUSH
19486: LD_INT 8
19488: EQUAL
19489: IFFALSE 19510
// points := [ 35 , 35 , 30 ] ;
19491: LD_ADDR_VAR 0 9
19495: PUSH
19496: LD_INT 35
19498: PUSH
19499: LD_INT 35
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19510: LD_VAR 0 6
19514: PPUSH
19515: CALL_OW 257
19519: PUSH
19520: LD_INT 9
19522: EQUAL
19523: IFFALSE 19544
// points := [ 20 , 55 , 40 ] ;
19525: LD_ADDR_VAR 0 9
19529: PUSH
19530: LD_INT 20
19532: PUSH
19533: LD_INT 55
19535: PUSH
19536: LD_INT 40
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19544: LD_VAR 0 6
19548: PPUSH
19549: CALL_OW 257
19553: PUSH
19554: LD_INT 12
19556: PUSH
19557: LD_INT 16
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: IN
19564: IFFALSE 19585
// points := [ 5 , 3 , 2 ] ;
19566: LD_ADDR_VAR 0 9
19570: PUSH
19571: LD_INT 5
19573: PUSH
19574: LD_INT 3
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19585: LD_VAR 0 6
19589: PPUSH
19590: CALL_OW 257
19594: PUSH
19595: LD_INT 17
19597: EQUAL
19598: IFFALSE 19619
// points := [ 100 , 50 , 75 ] ;
19600: LD_ADDR_VAR 0 9
19604: PUSH
19605: LD_INT 100
19607: PUSH
19608: LD_INT 50
19610: PUSH
19611: LD_INT 75
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19619: LD_VAR 0 6
19623: PPUSH
19624: CALL_OW 257
19628: PUSH
19629: LD_INT 15
19631: EQUAL
19632: IFFALSE 19653
// points := [ 10 , 5 , 3 ] ;
19634: LD_ADDR_VAR 0 9
19638: PUSH
19639: LD_INT 10
19641: PUSH
19642: LD_INT 5
19644: PUSH
19645: LD_INT 3
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19653: LD_VAR 0 6
19657: PPUSH
19658: CALL_OW 257
19662: PUSH
19663: LD_INT 14
19665: EQUAL
19666: IFFALSE 19687
// points := [ 10 , 0 , 0 ] ;
19668: LD_ADDR_VAR 0 9
19672: PUSH
19673: LD_INT 10
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19687: LD_VAR 0 6
19691: PPUSH
19692: CALL_OW 257
19696: PUSH
19697: LD_INT 11
19699: EQUAL
19700: IFFALSE 19721
// points := [ 30 , 10 , 5 ] ;
19702: LD_ADDR_VAR 0 9
19706: PUSH
19707: LD_INT 30
19709: PUSH
19710: LD_INT 10
19712: PUSH
19713: LD_INT 5
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19721: LD_VAR 0 1
19725: PPUSH
19726: LD_INT 5
19728: PPUSH
19729: CALL_OW 321
19733: PUSH
19734: LD_INT 2
19736: EQUAL
19737: IFFALSE 19754
// bpoints := bpoints * 1.8 ;
19739: LD_ADDR_VAR 0 10
19743: PUSH
19744: LD_VAR 0 10
19748: PUSH
19749: LD_REAL  1.80000000000000E+0000
19752: MUL
19753: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19754: LD_VAR 0 6
19758: PPUSH
19759: CALL_OW 257
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: LD_INT 3
19772: PUSH
19773: LD_INT 4
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: IN
19782: PUSH
19783: LD_VAR 0 1
19787: PPUSH
19788: LD_INT 51
19790: PPUSH
19791: CALL_OW 321
19795: PUSH
19796: LD_INT 2
19798: EQUAL
19799: AND
19800: IFFALSE 19817
// bpoints := bpoints * 1.2 ;
19802: LD_ADDR_VAR 0 10
19806: PUSH
19807: LD_VAR 0 10
19811: PUSH
19812: LD_REAL  1.20000000000000E+0000
19815: MUL
19816: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19817: LD_VAR 0 6
19821: PPUSH
19822: CALL_OW 257
19826: PUSH
19827: LD_INT 5
19829: PUSH
19830: LD_INT 7
19832: PUSH
19833: LD_INT 9
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: IN
19841: PUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 52
19849: PPUSH
19850: CALL_OW 321
19854: PUSH
19855: LD_INT 2
19857: EQUAL
19858: AND
19859: IFFALSE 19876
// bpoints := bpoints * 1.5 ;
19861: LD_ADDR_VAR 0 10
19865: PUSH
19866: LD_VAR 0 10
19870: PUSH
19871: LD_REAL  1.50000000000000E+0000
19874: MUL
19875: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 66
19883: PPUSH
19884: CALL_OW 321
19888: PUSH
19889: LD_INT 2
19891: EQUAL
19892: IFFALSE 19909
// bpoints := bpoints * 1.1 ;
19894: LD_ADDR_VAR 0 10
19898: PUSH
19899: LD_VAR 0 10
19903: PUSH
19904: LD_REAL  1.10000000000000E+0000
19907: MUL
19908: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19909: LD_ADDR_VAR 0 10
19913: PUSH
19914: LD_VAR 0 10
19918: PUSH
19919: LD_VAR 0 6
19923: PPUSH
19924: LD_INT 1
19926: PPUSH
19927: CALL_OW 259
19931: PUSH
19932: LD_REAL  1.15000000000000E+0000
19935: MUL
19936: MUL
19937: ST_TO_ADDR
// end ; unit_vehicle :
19938: GO 20762
19940: LD_INT 2
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 20750
19948: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19949: LD_VAR 0 6
19953: PPUSH
19954: CALL_OW 264
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 42
19964: PUSH
19965: LD_INT 24
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: IN
19973: IFFALSE 19994
// points := [ 25 , 5 , 3 ] ;
19975: LD_ADDR_VAR 0 9
19979: PUSH
19980: LD_INT 25
19982: PUSH
19983: LD_INT 5
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19994: LD_VAR 0 6
19998: PPUSH
19999: CALL_OW 264
20003: PUSH
20004: LD_INT 4
20006: PUSH
20007: LD_INT 43
20009: PUSH
20010: LD_INT 25
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: IN
20018: IFFALSE 20039
// points := [ 40 , 15 , 5 ] ;
20020: LD_ADDR_VAR 0 9
20024: PUSH
20025: LD_INT 40
20027: PUSH
20028: LD_INT 15
20030: PUSH
20031: LD_INT 5
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20039: LD_VAR 0 6
20043: PPUSH
20044: CALL_OW 264
20048: PUSH
20049: LD_INT 3
20051: PUSH
20052: LD_INT 23
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: IN
20059: IFFALSE 20080
// points := [ 7 , 25 , 8 ] ;
20061: LD_ADDR_VAR 0 9
20065: PUSH
20066: LD_INT 7
20068: PUSH
20069: LD_INT 25
20071: PUSH
20072: LD_INT 8
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20080: LD_VAR 0 6
20084: PPUSH
20085: CALL_OW 264
20089: PUSH
20090: LD_INT 5
20092: PUSH
20093: LD_INT 27
20095: PUSH
20096: LD_INT 44
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: IN
20104: IFFALSE 20125
// points := [ 14 , 50 , 16 ] ;
20106: LD_ADDR_VAR 0 9
20110: PUSH
20111: LD_INT 14
20113: PUSH
20114: LD_INT 50
20116: PUSH
20117: LD_INT 16
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20125: LD_VAR 0 6
20129: PPUSH
20130: CALL_OW 264
20134: PUSH
20135: LD_INT 6
20137: PUSH
20138: LD_INT 46
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: IN
20145: IFFALSE 20166
// points := [ 32 , 120 , 70 ] ;
20147: LD_ADDR_VAR 0 9
20151: PUSH
20152: LD_INT 32
20154: PUSH
20155: LD_INT 120
20157: PUSH
20158: LD_INT 70
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20166: LD_VAR 0 6
20170: PPUSH
20171: CALL_OW 264
20175: PUSH
20176: LD_INT 7
20178: PUSH
20179: LD_INT 28
20181: PUSH
20182: LD_INT 45
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: LIST
20189: IN
20190: IFFALSE 20211
// points := [ 35 , 20 , 45 ] ;
20192: LD_ADDR_VAR 0 9
20196: PUSH
20197: LD_INT 35
20199: PUSH
20200: LD_INT 20
20202: PUSH
20203: LD_INT 45
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20211: LD_VAR 0 6
20215: PPUSH
20216: CALL_OW 264
20220: PUSH
20221: LD_INT 47
20223: PUSH
20224: EMPTY
20225: LIST
20226: IN
20227: IFFALSE 20248
// points := [ 67 , 45 , 75 ] ;
20229: LD_ADDR_VAR 0 9
20233: PUSH
20234: LD_INT 67
20236: PUSH
20237: LD_INT 45
20239: PUSH
20240: LD_INT 75
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20248: LD_VAR 0 6
20252: PPUSH
20253: CALL_OW 264
20257: PUSH
20258: LD_INT 26
20260: PUSH
20261: EMPTY
20262: LIST
20263: IN
20264: IFFALSE 20285
// points := [ 120 , 30 , 80 ] ;
20266: LD_ADDR_VAR 0 9
20270: PUSH
20271: LD_INT 120
20273: PUSH
20274: LD_INT 30
20276: PUSH
20277: LD_INT 80
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20285: LD_VAR 0 6
20289: PPUSH
20290: CALL_OW 264
20294: PUSH
20295: LD_INT 22
20297: PUSH
20298: EMPTY
20299: LIST
20300: IN
20301: IFFALSE 20322
// points := [ 40 , 1 , 1 ] ;
20303: LD_ADDR_VAR 0 9
20307: PUSH
20308: LD_INT 40
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 1
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20322: LD_VAR 0 6
20326: PPUSH
20327: CALL_OW 264
20331: PUSH
20332: LD_INT 29
20334: PUSH
20335: EMPTY
20336: LIST
20337: IN
20338: IFFALSE 20359
// points := [ 70 , 200 , 400 ] ;
20340: LD_ADDR_VAR 0 9
20344: PUSH
20345: LD_INT 70
20347: PUSH
20348: LD_INT 200
20350: PUSH
20351: LD_INT 400
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20359: LD_VAR 0 6
20363: PPUSH
20364: CALL_OW 264
20368: PUSH
20369: LD_INT 14
20371: PUSH
20372: LD_INT 53
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: IN
20379: IFFALSE 20400
// points := [ 40 , 10 , 20 ] ;
20381: LD_ADDR_VAR 0 9
20385: PUSH
20386: LD_INT 40
20388: PUSH
20389: LD_INT 10
20391: PUSH
20392: LD_INT 20
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20400: LD_VAR 0 6
20404: PPUSH
20405: CALL_OW 264
20409: PUSH
20410: LD_INT 9
20412: PUSH
20413: EMPTY
20414: LIST
20415: IN
20416: IFFALSE 20437
// points := [ 5 , 70 , 20 ] ;
20418: LD_ADDR_VAR 0 9
20422: PUSH
20423: LD_INT 5
20425: PUSH
20426: LD_INT 70
20428: PUSH
20429: LD_INT 20
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20437: LD_VAR 0 6
20441: PPUSH
20442: CALL_OW 264
20446: PUSH
20447: LD_INT 10
20449: PUSH
20450: EMPTY
20451: LIST
20452: IN
20453: IFFALSE 20474
// points := [ 35 , 110 , 70 ] ;
20455: LD_ADDR_VAR 0 9
20459: PUSH
20460: LD_INT 35
20462: PUSH
20463: LD_INT 110
20465: PUSH
20466: LD_INT 70
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20474: LD_VAR 0 6
20478: PPUSH
20479: CALL_OW 265
20483: PUSH
20484: LD_INT 25
20486: EQUAL
20487: IFFALSE 20508
// points := [ 80 , 65 , 100 ] ;
20489: LD_ADDR_VAR 0 9
20493: PUSH
20494: LD_INT 80
20496: PUSH
20497: LD_INT 65
20499: PUSH
20500: LD_INT 100
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20508: LD_VAR 0 6
20512: PPUSH
20513: CALL_OW 263
20517: PUSH
20518: LD_INT 1
20520: EQUAL
20521: IFFALSE 20556
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20523: LD_ADDR_VAR 0 10
20527: PUSH
20528: LD_VAR 0 10
20532: PUSH
20533: LD_VAR 0 6
20537: PPUSH
20538: CALL_OW 311
20542: PPUSH
20543: LD_INT 3
20545: PPUSH
20546: CALL_OW 259
20550: PUSH
20551: LD_INT 4
20553: MUL
20554: MUL
20555: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20556: LD_VAR 0 6
20560: PPUSH
20561: CALL_OW 263
20565: PUSH
20566: LD_INT 2
20568: EQUAL
20569: IFFALSE 20620
// begin j := IsControledBy ( i ) ;
20571: LD_ADDR_VAR 0 7
20575: PUSH
20576: LD_VAR 0 6
20580: PPUSH
20581: CALL_OW 312
20585: ST_TO_ADDR
// if j then
20586: LD_VAR 0 7
20590: IFFALSE 20620
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20592: LD_ADDR_VAR 0 10
20596: PUSH
20597: LD_VAR 0 10
20601: PUSH
20602: LD_VAR 0 7
20606: PPUSH
20607: LD_INT 3
20609: PPUSH
20610: CALL_OW 259
20614: PUSH
20615: LD_INT 3
20617: MUL
20618: MUL
20619: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20620: LD_VAR 0 6
20624: PPUSH
20625: CALL_OW 264
20629: PUSH
20630: LD_INT 5
20632: PUSH
20633: LD_INT 6
20635: PUSH
20636: LD_INT 46
20638: PUSH
20639: LD_INT 44
20641: PUSH
20642: LD_INT 47
20644: PUSH
20645: LD_INT 45
20647: PUSH
20648: LD_INT 28
20650: PUSH
20651: LD_INT 7
20653: PUSH
20654: LD_INT 27
20656: PUSH
20657: LD_INT 29
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: IN
20672: PUSH
20673: LD_VAR 0 1
20677: PPUSH
20678: LD_INT 52
20680: PPUSH
20681: CALL_OW 321
20685: PUSH
20686: LD_INT 2
20688: EQUAL
20689: AND
20690: IFFALSE 20707
// bpoints := bpoints * 1.2 ;
20692: LD_ADDR_VAR 0 10
20696: PUSH
20697: LD_VAR 0 10
20701: PUSH
20702: LD_REAL  1.20000000000000E+0000
20705: MUL
20706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20707: LD_VAR 0 6
20711: PPUSH
20712: CALL_OW 264
20716: PUSH
20717: LD_INT 6
20719: PUSH
20720: LD_INT 46
20722: PUSH
20723: LD_INT 47
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: IN
20731: IFFALSE 20748
// bpoints := bpoints * 1.2 ;
20733: LD_ADDR_VAR 0 10
20737: PUSH
20738: LD_VAR 0 10
20742: PUSH
20743: LD_REAL  1.20000000000000E+0000
20746: MUL
20747: ST_TO_ADDR
// end ; unit_building :
20748: GO 20762
20750: LD_INT 3
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20761
20758: POP
// ; end ;
20759: GO 20762
20761: POP
// for j = 1 to 3 do
20762: LD_ADDR_VAR 0 7
20766: PUSH
20767: DOUBLE
20768: LD_INT 1
20770: DEC
20771: ST_TO_ADDR
20772: LD_INT 3
20774: PUSH
20775: FOR_TO
20776: IFFALSE 20829
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20778: LD_ADDR_VAR 0 5
20782: PUSH
20783: LD_VAR 0 5
20787: PPUSH
20788: LD_VAR 0 7
20792: PPUSH
20793: LD_VAR 0 5
20797: PUSH
20798: LD_VAR 0 7
20802: ARRAY
20803: PUSH
20804: LD_VAR 0 9
20808: PUSH
20809: LD_VAR 0 7
20813: ARRAY
20814: PUSH
20815: LD_VAR 0 10
20819: MUL
20820: PLUS
20821: PPUSH
20822: CALL_OW 1
20826: ST_TO_ADDR
20827: GO 20775
20829: POP
20830: POP
// end ;
20831: GO 19314
20833: POP
20834: POP
// result := Replace ( result , 4 , tmp ) ;
20835: LD_ADDR_VAR 0 5
20839: PUSH
20840: LD_VAR 0 5
20844: PPUSH
20845: LD_INT 4
20847: PPUSH
20848: LD_VAR 0 8
20852: PPUSH
20853: CALL_OW 1
20857: ST_TO_ADDR
// end ;
20858: LD_VAR 0 5
20862: RET
// export function DangerAtRange ( unit , range ) ; begin
20863: LD_INT 0
20865: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 255
20880: PPUSH
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 250
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 251
20900: PPUSH
20901: LD_VAR 0 2
20905: PPUSH
20906: CALL 19166 0 4
20910: ST_TO_ADDR
// end ;
20911: LD_VAR 0 3
20915: RET
// export function DangerInArea ( side , area ) ; begin
20916: LD_INT 0
20918: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20919: LD_ADDR_VAR 0 3
20923: PUSH
20924: LD_VAR 0 2
20928: PPUSH
20929: LD_INT 81
20931: PUSH
20932: LD_VAR 0 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 70
20945: ST_TO_ADDR
// end ;
20946: LD_VAR 0 3
20950: RET
// export function IsExtension ( b ) ; begin
20951: LD_INT 0
20953: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20954: LD_ADDR_VAR 0 2
20958: PUSH
20959: LD_VAR 0 1
20963: PUSH
20964: LD_INT 23
20966: PUSH
20967: LD_INT 20
20969: PUSH
20970: LD_INT 22
20972: PUSH
20973: LD_INT 17
20975: PUSH
20976: LD_INT 24
20978: PUSH
20979: LD_INT 21
20981: PUSH
20982: LD_INT 19
20984: PUSH
20985: LD_INT 16
20987: PUSH
20988: LD_INT 25
20990: PUSH
20991: LD_INT 18
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: IN
21006: ST_TO_ADDR
// end ;
21007: LD_VAR 0 2
21011: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21012: LD_INT 0
21014: PPUSH
21015: PPUSH
21016: PPUSH
// result := [ ] ;
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: EMPTY
21023: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21024: LD_ADDR_VAR 0 4
21028: PUSH
21029: LD_VAR 0 2
21033: PPUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 70
21048: ST_TO_ADDR
// if not tmp then
21049: LD_VAR 0 4
21053: NOT
21054: IFFALSE 21058
// exit ;
21056: GO 21116
// for i in tmp do
21058: LD_ADDR_VAR 0 5
21062: PUSH
21063: LD_VAR 0 4
21067: PUSH
21068: FOR_IN
21069: IFFALSE 21104
// if GetBase ( i ) <> base then
21071: LD_VAR 0 5
21075: PPUSH
21076: CALL_OW 274
21080: PUSH
21081: LD_VAR 0 1
21085: NONEQUAL
21086: IFFALSE 21102
// ComLinkToBase ( base , i ) ;
21088: LD_VAR 0 1
21092: PPUSH
21093: LD_VAR 0 5
21097: PPUSH
21098: CALL_OW 169
21102: GO 21068
21104: POP
21105: POP
// result := tmp ;
21106: LD_ADDR_VAR 0 3
21110: PUSH
21111: LD_VAR 0 4
21115: ST_TO_ADDR
// end ;
21116: LD_VAR 0 3
21120: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
// if BuildingStatus ( b ) = bs_build then
21125: LD_VAR 0 2
21129: PPUSH
21130: CALL_OW 461
21134: PUSH
21135: LD_INT 1
21137: EQUAL
21138: IFFALSE 21198
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: LD_STRING h
21147: PUSH
21148: LD_VAR 0 2
21152: PPUSH
21153: CALL_OW 250
21157: PUSH
21158: LD_VAR 0 2
21162: PPUSH
21163: CALL_OW 251
21167: PUSH
21168: LD_VAR 0 2
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: PPUSH
21194: CALL_OW 446
// end ;
21198: LD_VAR 0 3
21202: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21203: LD_INT 0
21205: PPUSH
21206: PPUSH
21207: PPUSH
21208: PPUSH
21209: PPUSH
21210: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21211: LD_VAR 0 1
21215: NOT
21216: PUSH
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 263
21226: PUSH
21227: LD_INT 2
21229: EQUAL
21230: NOT
21231: OR
21232: IFFALSE 21236
// exit ;
21234: GO 21552
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21236: LD_ADDR_VAR 0 6
21240: PUSH
21241: LD_INT 22
21243: PUSH
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 255
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 30
21263: PUSH
21264: LD_INT 36
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 34
21273: PUSH
21274: LD_INT 31
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PPUSH
21290: CALL_OW 69
21294: ST_TO_ADDR
// if not tmp then
21295: LD_VAR 0 6
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21552
// result := [ ] ;
21304: LD_ADDR_VAR 0 2
21308: PUSH
21309: EMPTY
21310: ST_TO_ADDR
// for i in tmp do
21311: LD_ADDR_VAR 0 3
21315: PUSH
21316: LD_VAR 0 6
21320: PUSH
21321: FOR_IN
21322: IFFALSE 21393
// begin t := UnitsInside ( i ) ;
21324: LD_ADDR_VAR 0 4
21328: PUSH
21329: LD_VAR 0 3
21333: PPUSH
21334: CALL_OW 313
21338: ST_TO_ADDR
// if t then
21339: LD_VAR 0 4
21343: IFFALSE 21391
// for j in t do
21345: LD_ADDR_VAR 0 7
21349: PUSH
21350: LD_VAR 0 4
21354: PUSH
21355: FOR_IN
21356: IFFALSE 21389
// result := Insert ( result , result + 1 , j ) ;
21358: LD_ADDR_VAR 0 2
21362: PUSH
21363: LD_VAR 0 2
21367: PPUSH
21368: LD_VAR 0 2
21372: PUSH
21373: LD_INT 1
21375: PLUS
21376: PPUSH
21377: LD_VAR 0 7
21381: PPUSH
21382: CALL_OW 2
21386: ST_TO_ADDR
21387: GO 21355
21389: POP
21390: POP
// end ;
21391: GO 21321
21393: POP
21394: POP
// if not result then
21395: LD_VAR 0 2
21399: NOT
21400: IFFALSE 21404
// exit ;
21402: GO 21552
// mech := result [ 1 ] ;
21404: LD_ADDR_VAR 0 5
21408: PUSH
21409: LD_VAR 0 2
21413: PUSH
21414: LD_INT 1
21416: ARRAY
21417: ST_TO_ADDR
// if result > 1 then
21418: LD_VAR 0 2
21422: PUSH
21423: LD_INT 1
21425: GREATER
21426: IFFALSE 21538
// for i = 2 to result do
21428: LD_ADDR_VAR 0 3
21432: PUSH
21433: DOUBLE
21434: LD_INT 2
21436: DEC
21437: ST_TO_ADDR
21438: LD_VAR 0 2
21442: PUSH
21443: FOR_TO
21444: IFFALSE 21536
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21446: LD_ADDR_VAR 0 4
21450: PUSH
21451: LD_VAR 0 2
21455: PUSH
21456: LD_VAR 0 3
21460: ARRAY
21461: PPUSH
21462: LD_INT 3
21464: PPUSH
21465: CALL_OW 259
21469: PUSH
21470: LD_VAR 0 2
21474: PUSH
21475: LD_VAR 0 3
21479: ARRAY
21480: PPUSH
21481: CALL_OW 432
21485: MINUS
21486: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21487: LD_VAR 0 4
21491: PUSH
21492: LD_VAR 0 5
21496: PPUSH
21497: LD_INT 3
21499: PPUSH
21500: CALL_OW 259
21504: PUSH
21505: LD_VAR 0 5
21509: PPUSH
21510: CALL_OW 432
21514: MINUS
21515: GREATEREQUAL
21516: IFFALSE 21534
// mech := result [ i ] ;
21518: LD_ADDR_VAR 0 5
21522: PUSH
21523: LD_VAR 0 2
21527: PUSH
21528: LD_VAR 0 3
21532: ARRAY
21533: ST_TO_ADDR
// end ;
21534: GO 21443
21536: POP
21537: POP
// ComLinkTo ( vehicle , mech ) ;
21538: LD_VAR 0 1
21542: PPUSH
21543: LD_VAR 0 5
21547: PPUSH
21548: CALL_OW 135
// end ;
21552: LD_VAR 0 2
21556: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21557: LD_INT 0
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
// result := [ ] ;
21572: LD_ADDR_VAR 0 7
21576: PUSH
21577: EMPTY
21578: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21579: LD_VAR 0 1
21583: PPUSH
21584: CALL_OW 266
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: IN
21599: NOT
21600: IFFALSE 21604
// exit ;
21602: GO 23235
// if name then
21604: LD_VAR 0 3
21608: IFFALSE 21624
// SetBName ( base_dep , name ) ;
21610: LD_VAR 0 1
21614: PPUSH
21615: LD_VAR 0 3
21619: PPUSH
21620: CALL_OW 500
// base := GetBase ( base_dep ) ;
21624: LD_ADDR_VAR 0 15
21628: PUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 274
21638: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21639: LD_ADDR_VAR 0 16
21643: PUSH
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 255
21653: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21654: LD_ADDR_VAR 0 17
21658: PUSH
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 248
21668: ST_TO_ADDR
// if sources then
21669: LD_VAR 0 5
21673: IFFALSE 21720
// for i = 1 to 3 do
21675: LD_ADDR_VAR 0 8
21679: PUSH
21680: DOUBLE
21681: LD_INT 1
21683: DEC
21684: ST_TO_ADDR
21685: LD_INT 3
21687: PUSH
21688: FOR_TO
21689: IFFALSE 21718
// AddResourceType ( base , i , sources [ i ] ) ;
21691: LD_VAR 0 15
21695: PPUSH
21696: LD_VAR 0 8
21700: PPUSH
21701: LD_VAR 0 5
21705: PUSH
21706: LD_VAR 0 8
21710: ARRAY
21711: PPUSH
21712: CALL_OW 276
21716: GO 21688
21718: POP
21719: POP
// buildings := GetBaseBuildings ( base , area ) ;
21720: LD_ADDR_VAR 0 18
21724: PUSH
21725: LD_VAR 0 15
21729: PPUSH
21730: LD_VAR 0 2
21734: PPUSH
21735: CALL 21012 0 2
21739: ST_TO_ADDR
// InitHc ;
21740: CALL_OW 19
// InitUc ;
21744: CALL_OW 18
// uc_side := side ;
21748: LD_ADDR_OWVAR 20
21752: PUSH
21753: LD_VAR 0 16
21757: ST_TO_ADDR
// uc_nation := nation ;
21758: LD_ADDR_OWVAR 21
21762: PUSH
21763: LD_VAR 0 17
21767: ST_TO_ADDR
// if buildings then
21768: LD_VAR 0 18
21772: IFFALSE 23094
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21774: LD_ADDR_VAR 0 19
21778: PUSH
21779: LD_VAR 0 18
21783: PPUSH
21784: LD_INT 2
21786: PUSH
21787: LD_INT 30
21789: PUSH
21790: LD_INT 29
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 30
21799: PUSH
21800: LD_INT 30
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: PPUSH
21812: CALL_OW 72
21816: ST_TO_ADDR
// if tmp then
21817: LD_VAR 0 19
21821: IFFALSE 21869
// for i in tmp do
21823: LD_ADDR_VAR 0 8
21827: PUSH
21828: LD_VAR 0 19
21832: PUSH
21833: FOR_IN
21834: IFFALSE 21867
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21836: LD_VAR 0 8
21840: PPUSH
21841: CALL_OW 250
21845: PPUSH
21846: LD_VAR 0 8
21850: PPUSH
21851: CALL_OW 251
21855: PPUSH
21856: LD_VAR 0 16
21860: PPUSH
21861: CALL_OW 441
21865: GO 21833
21867: POP
21868: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21869: LD_VAR 0 18
21873: PPUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 30
21879: PUSH
21880: LD_INT 32
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 30
21889: PUSH
21890: LD_INT 33
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 72
21906: IFFALSE 21994
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21908: LD_ADDR_VAR 0 8
21912: PUSH
21913: LD_VAR 0 18
21917: PPUSH
21918: LD_INT 2
21920: PUSH
21921: LD_INT 30
21923: PUSH
21924: LD_INT 32
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 30
21933: PUSH
21934: LD_INT 33
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: PPUSH
21946: CALL_OW 72
21950: PUSH
21951: FOR_IN
21952: IFFALSE 21992
// begin if not GetBWeapon ( i ) then
21954: LD_VAR 0 8
21958: PPUSH
21959: CALL_OW 269
21963: NOT
21964: IFFALSE 21990
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21966: LD_VAR 0 8
21970: PPUSH
21971: LD_VAR 0 8
21975: PPUSH
21976: LD_VAR 0 2
21980: PPUSH
21981: CALL 23240 0 2
21985: PPUSH
21986: CALL_OW 431
// end ;
21990: GO 21951
21992: POP
21993: POP
// end ; for i = 1 to personel do
21994: LD_ADDR_VAR 0 8
21998: PUSH
21999: DOUBLE
22000: LD_INT 1
22002: DEC
22003: ST_TO_ADDR
22004: LD_VAR 0 6
22008: PUSH
22009: FOR_TO
22010: IFFALSE 23074
// begin if i > 4 then
22012: LD_VAR 0 8
22016: PUSH
22017: LD_INT 4
22019: GREATER
22020: IFFALSE 22024
// break ;
22022: GO 23074
// case i of 1 :
22024: LD_VAR 0 8
22028: PUSH
22029: LD_INT 1
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22117
22037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22038: LD_ADDR_VAR 0 12
22042: PUSH
22043: LD_VAR 0 18
22047: PPUSH
22048: LD_INT 22
22050: PUSH
22051: LD_VAR 0 16
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 58
22062: PUSH
22063: EMPTY
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 32
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 30
22081: PUSH
22082: LD_INT 4
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 30
22091: PUSH
22092: LD_INT 5
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: PPUSH
22110: CALL_OW 72
22114: ST_TO_ADDR
22115: GO 22339
22117: LD_INT 2
22119: DOUBLE
22120: EQUAL
22121: IFTRUE 22125
22123: GO 22187
22125: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22126: LD_ADDR_VAR 0 12
22130: PUSH
22131: LD_VAR 0 18
22135: PPUSH
22136: LD_INT 22
22138: PUSH
22139: LD_VAR 0 16
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 30
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 30
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PPUSH
22180: CALL_OW 72
22184: ST_TO_ADDR
22185: GO 22339
22187: LD_INT 3
22189: DOUBLE
22190: EQUAL
22191: IFTRUE 22195
22193: GO 22257
22195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22196: LD_ADDR_VAR 0 12
22200: PUSH
22201: LD_VAR 0 18
22205: PPUSH
22206: LD_INT 22
22208: PUSH
22209: LD_VAR 0 16
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 30
22233: PUSH
22234: LD_INT 3
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PPUSH
22250: CALL_OW 72
22254: ST_TO_ADDR
22255: GO 22339
22257: LD_INT 4
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22338
22265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22266: LD_ADDR_VAR 0 12
22270: PUSH
22271: LD_VAR 0 18
22275: PPUSH
22276: LD_INT 22
22278: PUSH
22279: LD_VAR 0 16
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: LD_INT 6
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 7
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 30
22313: PUSH
22314: LD_INT 8
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL_OW 72
22335: ST_TO_ADDR
22336: GO 22339
22338: POP
// if i = 1 then
22339: LD_VAR 0 8
22343: PUSH
22344: LD_INT 1
22346: EQUAL
22347: IFFALSE 22458
// begin tmp := [ ] ;
22349: LD_ADDR_VAR 0 19
22353: PUSH
22354: EMPTY
22355: ST_TO_ADDR
// for j in f do
22356: LD_ADDR_VAR 0 9
22360: PUSH
22361: LD_VAR 0 12
22365: PUSH
22366: FOR_IN
22367: IFFALSE 22440
// if GetBType ( j ) = b_bunker then
22369: LD_VAR 0 9
22373: PPUSH
22374: CALL_OW 266
22378: PUSH
22379: LD_INT 32
22381: EQUAL
22382: IFFALSE 22409
// tmp := Insert ( tmp , 1 , j ) else
22384: LD_ADDR_VAR 0 19
22388: PUSH
22389: LD_VAR 0 19
22393: PPUSH
22394: LD_INT 1
22396: PPUSH
22397: LD_VAR 0 9
22401: PPUSH
22402: CALL_OW 2
22406: ST_TO_ADDR
22407: GO 22438
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22409: LD_ADDR_VAR 0 19
22413: PUSH
22414: LD_VAR 0 19
22418: PPUSH
22419: LD_VAR 0 19
22423: PUSH
22424: LD_INT 1
22426: PLUS
22427: PPUSH
22428: LD_VAR 0 9
22432: PPUSH
22433: CALL_OW 2
22437: ST_TO_ADDR
22438: GO 22366
22440: POP
22441: POP
// if tmp then
22442: LD_VAR 0 19
22446: IFFALSE 22458
// f := tmp ;
22448: LD_ADDR_VAR 0 12
22452: PUSH
22453: LD_VAR 0 19
22457: ST_TO_ADDR
// end ; x := personel [ i ] ;
22458: LD_ADDR_VAR 0 13
22462: PUSH
22463: LD_VAR 0 6
22467: PUSH
22468: LD_VAR 0 8
22472: ARRAY
22473: ST_TO_ADDR
// if x = - 1 then
22474: LD_VAR 0 13
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: EQUAL
22483: IFFALSE 22692
// begin for j in f do
22485: LD_ADDR_VAR 0 9
22489: PUSH
22490: LD_VAR 0 12
22494: PUSH
22495: FOR_IN
22496: IFFALSE 22688
// repeat InitHc ;
22498: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22502: LD_VAR 0 9
22506: PPUSH
22507: CALL_OW 266
22511: PUSH
22512: LD_INT 5
22514: EQUAL
22515: IFFALSE 22585
// begin if UnitsInside ( j ) < 3 then
22517: LD_VAR 0 9
22521: PPUSH
22522: CALL_OW 313
22526: PUSH
22527: LD_INT 3
22529: LESS
22530: IFFALSE 22566
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22532: LD_INT 0
22534: PPUSH
22535: LD_INT 5
22537: PUSH
22538: LD_INT 8
22540: PUSH
22541: LD_INT 9
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: PUSH
22549: LD_VAR 0 17
22553: ARRAY
22554: PPUSH
22555: LD_VAR 0 4
22559: PPUSH
22560: CALL_OW 380
22564: GO 22583
// PrepareHuman ( false , i , skill ) ;
22566: LD_INT 0
22568: PPUSH
22569: LD_VAR 0 8
22573: PPUSH
22574: LD_VAR 0 4
22578: PPUSH
22579: CALL_OW 380
// end else
22583: GO 22602
// PrepareHuman ( false , i , skill ) ;
22585: LD_INT 0
22587: PPUSH
22588: LD_VAR 0 8
22592: PPUSH
22593: LD_VAR 0 4
22597: PPUSH
22598: CALL_OW 380
// un := CreateHuman ;
22602: LD_ADDR_VAR 0 14
22606: PUSH
22607: CALL_OW 44
22611: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22612: LD_ADDR_VAR 0 7
22616: PUSH
22617: LD_VAR 0 7
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: LD_VAR 0 14
22629: PPUSH
22630: CALL_OW 2
22634: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22635: LD_VAR 0 14
22639: PPUSH
22640: LD_VAR 0 9
22644: PPUSH
22645: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22649: LD_VAR 0 9
22653: PPUSH
22654: CALL_OW 313
22658: PUSH
22659: LD_INT 6
22661: EQUAL
22662: PUSH
22663: LD_VAR 0 9
22667: PPUSH
22668: CALL_OW 266
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 31
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: IN
22683: OR
22684: IFFALSE 22498
22686: GO 22495
22688: POP
22689: POP
// end else
22690: GO 23072
// for j = 1 to x do
22692: LD_ADDR_VAR 0 9
22696: PUSH
22697: DOUBLE
22698: LD_INT 1
22700: DEC
22701: ST_TO_ADDR
22702: LD_VAR 0 13
22706: PUSH
22707: FOR_TO
22708: IFFALSE 23070
// begin InitHc ;
22710: CALL_OW 19
// if not f then
22714: LD_VAR 0 12
22718: NOT
22719: IFFALSE 22808
// begin PrepareHuman ( false , i , skill ) ;
22721: LD_INT 0
22723: PPUSH
22724: LD_VAR 0 8
22728: PPUSH
22729: LD_VAR 0 4
22733: PPUSH
22734: CALL_OW 380
// un := CreateHuman ;
22738: LD_ADDR_VAR 0 14
22742: PUSH
22743: CALL_OW 44
22747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22748: LD_ADDR_VAR 0 7
22752: PUSH
22753: LD_VAR 0 7
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: LD_VAR 0 14
22765: PPUSH
22766: CALL_OW 2
22770: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22771: LD_VAR 0 14
22775: PPUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 250
22785: PPUSH
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 251
22795: PPUSH
22796: LD_INT 10
22798: PPUSH
22799: LD_INT 0
22801: PPUSH
22802: CALL_OW 50
// continue ;
22806: GO 22707
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22808: LD_VAR 0 12
22812: PUSH
22813: LD_INT 1
22815: ARRAY
22816: PPUSH
22817: CALL_OW 313
22821: PUSH
22822: LD_VAR 0 12
22826: PUSH
22827: LD_INT 1
22829: ARRAY
22830: PPUSH
22831: CALL_OW 266
22835: PUSH
22836: LD_INT 32
22838: PUSH
22839: LD_INT 31
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: IN
22846: AND
22847: PUSH
22848: LD_VAR 0 12
22852: PUSH
22853: LD_INT 1
22855: ARRAY
22856: PPUSH
22857: CALL_OW 313
22861: PUSH
22862: LD_INT 6
22864: EQUAL
22865: OR
22866: IFFALSE 22886
// f := Delete ( f , 1 ) ;
22868: LD_ADDR_VAR 0 12
22872: PUSH
22873: LD_VAR 0 12
22877: PPUSH
22878: LD_INT 1
22880: PPUSH
22881: CALL_OW 3
22885: ST_TO_ADDR
// if not f then
22886: LD_VAR 0 12
22890: NOT
22891: IFFALSE 22909
// begin x := x + 2 ;
22893: LD_ADDR_VAR 0 13
22897: PUSH
22898: LD_VAR 0 13
22902: PUSH
22903: LD_INT 2
22905: PLUS
22906: ST_TO_ADDR
// continue ;
22907: GO 22707
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22909: LD_VAR 0 12
22913: PUSH
22914: LD_INT 1
22916: ARRAY
22917: PPUSH
22918: CALL_OW 266
22922: PUSH
22923: LD_INT 5
22925: EQUAL
22926: IFFALSE 23000
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22928: LD_VAR 0 12
22932: PUSH
22933: LD_INT 1
22935: ARRAY
22936: PPUSH
22937: CALL_OW 313
22941: PUSH
22942: LD_INT 3
22944: LESS
22945: IFFALSE 22981
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22947: LD_INT 0
22949: PPUSH
22950: LD_INT 5
22952: PUSH
22953: LD_INT 8
22955: PUSH
22956: LD_INT 9
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: LD_VAR 0 17
22968: ARRAY
22969: PPUSH
22970: LD_VAR 0 4
22974: PPUSH
22975: CALL_OW 380
22979: GO 22998
// PrepareHuman ( false , i , skill ) ;
22981: LD_INT 0
22983: PPUSH
22984: LD_VAR 0 8
22988: PPUSH
22989: LD_VAR 0 4
22993: PPUSH
22994: CALL_OW 380
// end else
22998: GO 23017
// PrepareHuman ( false , i , skill ) ;
23000: LD_INT 0
23002: PPUSH
23003: LD_VAR 0 8
23007: PPUSH
23008: LD_VAR 0 4
23012: PPUSH
23013: CALL_OW 380
// un := CreateHuman ;
23017: LD_ADDR_VAR 0 14
23021: PUSH
23022: CALL_OW 44
23026: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23027: LD_ADDR_VAR 0 7
23031: PUSH
23032: LD_VAR 0 7
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_VAR 0 14
23044: PPUSH
23045: CALL_OW 2
23049: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23050: LD_VAR 0 14
23054: PPUSH
23055: LD_VAR 0 12
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: CALL_OW 52
// end ;
23068: GO 22707
23070: POP
23071: POP
// end ;
23072: GO 22009
23074: POP
23075: POP
// result := result ^ buildings ;
23076: LD_ADDR_VAR 0 7
23080: PUSH
23081: LD_VAR 0 7
23085: PUSH
23086: LD_VAR 0 18
23090: ADD
23091: ST_TO_ADDR
// end else
23092: GO 23235
// begin for i = 1 to personel do
23094: LD_ADDR_VAR 0 8
23098: PUSH
23099: DOUBLE
23100: LD_INT 1
23102: DEC
23103: ST_TO_ADDR
23104: LD_VAR 0 6
23108: PUSH
23109: FOR_TO
23110: IFFALSE 23233
// begin if i > 4 then
23112: LD_VAR 0 8
23116: PUSH
23117: LD_INT 4
23119: GREATER
23120: IFFALSE 23124
// break ;
23122: GO 23233
// x := personel [ i ] ;
23124: LD_ADDR_VAR 0 13
23128: PUSH
23129: LD_VAR 0 6
23133: PUSH
23134: LD_VAR 0 8
23138: ARRAY
23139: ST_TO_ADDR
// if x = - 1 then
23140: LD_VAR 0 13
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: EQUAL
23149: IFFALSE 23153
// continue ;
23151: GO 23109
// PrepareHuman ( false , i , skill ) ;
23153: LD_INT 0
23155: PPUSH
23156: LD_VAR 0 8
23160: PPUSH
23161: LD_VAR 0 4
23165: PPUSH
23166: CALL_OW 380
// un := CreateHuman ;
23170: LD_ADDR_VAR 0 14
23174: PUSH
23175: CALL_OW 44
23179: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23180: LD_VAR 0 14
23184: PPUSH
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 250
23194: PPUSH
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 251
23204: PPUSH
23205: LD_INT 10
23207: PPUSH
23208: LD_INT 0
23210: PPUSH
23211: CALL_OW 50
// result := result ^ un ;
23215: LD_ADDR_VAR 0 7
23219: PUSH
23220: LD_VAR 0 7
23224: PUSH
23225: LD_VAR 0 14
23229: ADD
23230: ST_TO_ADDR
// end ;
23231: GO 23109
23233: POP
23234: POP
// end ; end ;
23235: LD_VAR 0 7
23239: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23240: LD_INT 0
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
// result := false ;
23258: LD_ADDR_VAR 0 3
23262: PUSH
23263: LD_INT 0
23265: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23266: LD_VAR 0 1
23270: NOT
23271: PUSH
23272: LD_VAR 0 1
23276: PPUSH
23277: CALL_OW 266
23281: PUSH
23282: LD_INT 32
23284: PUSH
23285: LD_INT 33
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: IN
23292: NOT
23293: OR
23294: IFFALSE 23298
// exit ;
23296: GO 24434
// nat := GetNation ( tower ) ;
23298: LD_ADDR_VAR 0 12
23302: PUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 248
23312: ST_TO_ADDR
// side := GetSide ( tower ) ;
23313: LD_ADDR_VAR 0 16
23317: PUSH
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 255
23327: ST_TO_ADDR
// x := GetX ( tower ) ;
23328: LD_ADDR_VAR 0 10
23332: PUSH
23333: LD_VAR 0 1
23337: PPUSH
23338: CALL_OW 250
23342: ST_TO_ADDR
// y := GetY ( tower ) ;
23343: LD_ADDR_VAR 0 11
23347: PUSH
23348: LD_VAR 0 1
23352: PPUSH
23353: CALL_OW 251
23357: ST_TO_ADDR
// if not x or not y then
23358: LD_VAR 0 10
23362: NOT
23363: PUSH
23364: LD_VAR 0 11
23368: NOT
23369: OR
23370: IFFALSE 23374
// exit ;
23372: GO 24434
// weapon := 0 ;
23374: LD_ADDR_VAR 0 18
23378: PUSH
23379: LD_INT 0
23381: ST_TO_ADDR
// fac_list := [ ] ;
23382: LD_ADDR_VAR 0 17
23386: PUSH
23387: EMPTY
23388: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23389: LD_ADDR_VAR 0 6
23393: PUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 274
23403: PPUSH
23404: LD_VAR 0 2
23408: PPUSH
23409: CALL 21012 0 2
23413: PPUSH
23414: LD_INT 30
23416: PUSH
23417: LD_INT 3
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PPUSH
23424: CALL_OW 72
23428: ST_TO_ADDR
// if not factories then
23429: LD_VAR 0 6
23433: NOT
23434: IFFALSE 23438
// exit ;
23436: GO 24434
// for i in factories do
23438: LD_ADDR_VAR 0 8
23442: PUSH
23443: LD_VAR 0 6
23447: PUSH
23448: FOR_IN
23449: IFFALSE 23474
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23451: LD_ADDR_VAR 0 17
23455: PUSH
23456: LD_VAR 0 17
23460: PUSH
23461: LD_VAR 0 8
23465: PPUSH
23466: CALL_OW 478
23470: UNION
23471: ST_TO_ADDR
23472: GO 23448
23474: POP
23475: POP
// if not fac_list then
23476: LD_VAR 0 17
23480: NOT
23481: IFFALSE 23485
// exit ;
23483: GO 24434
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23485: LD_ADDR_VAR 0 5
23489: PUSH
23490: LD_INT 4
23492: PUSH
23493: LD_INT 5
23495: PUSH
23496: LD_INT 9
23498: PUSH
23499: LD_INT 10
23501: PUSH
23502: LD_INT 6
23504: PUSH
23505: LD_INT 7
23507: PUSH
23508: LD_INT 11
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: LD_INT 28
23525: PUSH
23526: LD_INT 26
23528: PUSH
23529: LD_INT 30
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 43
23540: PUSH
23541: LD_INT 44
23543: PUSH
23544: LD_INT 46
23546: PUSH
23547: LD_INT 45
23549: PUSH
23550: LD_INT 47
23552: PUSH
23553: LD_INT 49
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: LD_VAR 0 12
23573: ARRAY
23574: ST_TO_ADDR
// for i in list do
23575: LD_ADDR_VAR 0 8
23579: PUSH
23580: LD_VAR 0 5
23584: PUSH
23585: FOR_IN
23586: IFFALSE 23619
// if not i in fac_list then
23588: LD_VAR 0 8
23592: PUSH
23593: LD_VAR 0 17
23597: IN
23598: NOT
23599: IFFALSE 23617
// list := list diff i ;
23601: LD_ADDR_VAR 0 5
23605: PUSH
23606: LD_VAR 0 5
23610: PUSH
23611: LD_VAR 0 8
23615: DIFF
23616: ST_TO_ADDR
23617: GO 23585
23619: POP
23620: POP
// if not list then
23621: LD_VAR 0 5
23625: NOT
23626: IFFALSE 23630
// exit ;
23628: GO 24434
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23630: LD_VAR 0 12
23634: PUSH
23635: LD_INT 3
23637: EQUAL
23638: PUSH
23639: LD_INT 49
23641: PUSH
23642: LD_VAR 0 5
23646: IN
23647: AND
23648: PUSH
23649: LD_INT 31
23651: PPUSH
23652: LD_VAR 0 16
23656: PPUSH
23657: CALL_OW 321
23661: PUSH
23662: LD_INT 2
23664: EQUAL
23665: AND
23666: IFFALSE 23726
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23668: LD_INT 22
23670: PUSH
23671: LD_VAR 0 16
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 35
23682: PUSH
23683: LD_INT 49
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 91
23692: PUSH
23693: LD_VAR 0 1
23697: PUSH
23698: LD_INT 10
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: PPUSH
23711: CALL_OW 69
23715: NOT
23716: IFFALSE 23726
// weapon := ru_time_lapser ;
23718: LD_ADDR_VAR 0 18
23722: PUSH
23723: LD_INT 49
23725: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23726: LD_VAR 0 12
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: IN
23741: PUSH
23742: LD_INT 11
23744: PUSH
23745: LD_VAR 0 5
23749: IN
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_VAR 0 5
23758: IN
23759: OR
23760: AND
23761: PUSH
23762: LD_INT 6
23764: PPUSH
23765: LD_VAR 0 16
23769: PPUSH
23770: CALL_OW 321
23774: PUSH
23775: LD_INT 2
23777: EQUAL
23778: AND
23779: IFFALSE 23944
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23781: LD_INT 22
23783: PUSH
23784: LD_VAR 0 16
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 35
23798: PUSH
23799: LD_INT 11
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 35
23808: PUSH
23809: LD_INT 30
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 91
23823: PUSH
23824: LD_VAR 0 1
23828: PUSH
23829: LD_INT 18
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: PPUSH
23842: CALL_OW 69
23846: NOT
23847: PUSH
23848: LD_INT 22
23850: PUSH
23851: LD_VAR 0 16
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: LD_INT 32
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 33
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 91
23890: PUSH
23891: LD_VAR 0 1
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: PPUSH
23912: CALL_OW 69
23916: PUSH
23917: LD_INT 2
23919: GREATER
23920: AND
23921: IFFALSE 23944
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23923: LD_ADDR_VAR 0 18
23927: PUSH
23928: LD_INT 11
23930: PUSH
23931: LD_INT 30
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_VAR 0 12
23942: ARRAY
23943: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23944: LD_VAR 0 18
23948: NOT
23949: PUSH
23950: LD_INT 40
23952: PPUSH
23953: LD_VAR 0 16
23957: PPUSH
23958: CALL_OW 321
23962: PUSH
23963: LD_INT 2
23965: EQUAL
23966: AND
23967: PUSH
23968: LD_INT 7
23970: PUSH
23971: LD_VAR 0 5
23975: IN
23976: PUSH
23977: LD_INT 28
23979: PUSH
23980: LD_VAR 0 5
23984: IN
23985: OR
23986: PUSH
23987: LD_INT 45
23989: PUSH
23990: LD_VAR 0 5
23994: IN
23995: OR
23996: AND
23997: IFFALSE 24251
// begin hex := GetHexInfo ( x , y ) ;
23999: LD_ADDR_VAR 0 4
24003: PUSH
24004: LD_VAR 0 10
24008: PPUSH
24009: LD_VAR 0 11
24013: PPUSH
24014: CALL_OW 546
24018: ST_TO_ADDR
// if hex [ 1 ] then
24019: LD_VAR 0 4
24023: PUSH
24024: LD_INT 1
24026: ARRAY
24027: IFFALSE 24031
// exit ;
24029: GO 24434
// height := hex [ 2 ] ;
24031: LD_ADDR_VAR 0 15
24035: PUSH
24036: LD_VAR 0 4
24040: PUSH
24041: LD_INT 2
24043: ARRAY
24044: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24045: LD_ADDR_VAR 0 14
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: LD_INT 5
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: ST_TO_ADDR
// for i in tmp do
24068: LD_ADDR_VAR 0 8
24072: PUSH
24073: LD_VAR 0 14
24077: PUSH
24078: FOR_IN
24079: IFFALSE 24249
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24081: LD_ADDR_VAR 0 9
24085: PUSH
24086: LD_VAR 0 10
24090: PPUSH
24091: LD_VAR 0 8
24095: PPUSH
24096: LD_INT 5
24098: PPUSH
24099: CALL_OW 272
24103: PUSH
24104: LD_VAR 0 11
24108: PPUSH
24109: LD_VAR 0 8
24113: PPUSH
24114: LD_INT 5
24116: PPUSH
24117: CALL_OW 273
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24126: LD_VAR 0 9
24130: PUSH
24131: LD_INT 1
24133: ARRAY
24134: PPUSH
24135: LD_VAR 0 9
24139: PUSH
24140: LD_INT 2
24142: ARRAY
24143: PPUSH
24144: CALL_OW 488
24148: IFFALSE 24247
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24150: LD_ADDR_VAR 0 4
24154: PUSH
24155: LD_VAR 0 9
24159: PUSH
24160: LD_INT 1
24162: ARRAY
24163: PPUSH
24164: LD_VAR 0 9
24168: PUSH
24169: LD_INT 2
24171: ARRAY
24172: PPUSH
24173: CALL_OW 546
24177: ST_TO_ADDR
// if hex [ 1 ] then
24178: LD_VAR 0 4
24182: PUSH
24183: LD_INT 1
24185: ARRAY
24186: IFFALSE 24190
// continue ;
24188: GO 24078
// h := hex [ 2 ] ;
24190: LD_ADDR_VAR 0 13
24194: PUSH
24195: LD_VAR 0 4
24199: PUSH
24200: LD_INT 2
24202: ARRAY
24203: ST_TO_ADDR
// if h + 7 < height then
24204: LD_VAR 0 13
24208: PUSH
24209: LD_INT 7
24211: PLUS
24212: PUSH
24213: LD_VAR 0 15
24217: LESS
24218: IFFALSE 24247
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24220: LD_ADDR_VAR 0 18
24224: PUSH
24225: LD_INT 7
24227: PUSH
24228: LD_INT 28
24230: PUSH
24231: LD_INT 45
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: PUSH
24239: LD_VAR 0 12
24243: ARRAY
24244: ST_TO_ADDR
// break ;
24245: GO 24249
// end ; end ; end ;
24247: GO 24078
24249: POP
24250: POP
// end ; if not weapon then
24251: LD_VAR 0 18
24255: NOT
24256: IFFALSE 24316
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24258: LD_ADDR_VAR 0 5
24262: PUSH
24263: LD_VAR 0 5
24267: PUSH
24268: LD_INT 11
24270: PUSH
24271: LD_INT 30
24273: PUSH
24274: LD_INT 49
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: DIFF
24282: ST_TO_ADDR
// if not list then
24283: LD_VAR 0 5
24287: NOT
24288: IFFALSE 24292
// exit ;
24290: GO 24434
// weapon := list [ rand ( 1 , list ) ] ;
24292: LD_ADDR_VAR 0 18
24296: PUSH
24297: LD_VAR 0 5
24301: PUSH
24302: LD_INT 1
24304: PPUSH
24305: LD_VAR 0 5
24309: PPUSH
24310: CALL_OW 12
24314: ARRAY
24315: ST_TO_ADDR
// end ; if weapon then
24316: LD_VAR 0 18
24320: IFFALSE 24434
// begin tmp := CostOfWeapon ( weapon ) ;
24322: LD_ADDR_VAR 0 14
24326: PUSH
24327: LD_VAR 0 18
24331: PPUSH
24332: CALL_OW 451
24336: ST_TO_ADDR
// j := GetBase ( tower ) ;
24337: LD_ADDR_VAR 0 9
24341: PUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL_OW 274
24351: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24352: LD_VAR 0 9
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL_OW 275
24364: PUSH
24365: LD_VAR 0 14
24369: PUSH
24370: LD_INT 1
24372: ARRAY
24373: GREATEREQUAL
24374: PUSH
24375: LD_VAR 0 9
24379: PPUSH
24380: LD_INT 2
24382: PPUSH
24383: CALL_OW 275
24387: PUSH
24388: LD_VAR 0 14
24392: PUSH
24393: LD_INT 2
24395: ARRAY
24396: GREATEREQUAL
24397: AND
24398: PUSH
24399: LD_VAR 0 9
24403: PPUSH
24404: LD_INT 3
24406: PPUSH
24407: CALL_OW 275
24411: PUSH
24412: LD_VAR 0 14
24416: PUSH
24417: LD_INT 3
24419: ARRAY
24420: GREATEREQUAL
24421: AND
24422: IFFALSE 24434
// result := weapon ;
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_VAR 0 18
24433: ST_TO_ADDR
// end ; end ;
24434: LD_VAR 0 3
24438: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24439: LD_INT 0
24441: PPUSH
24442: PPUSH
// result := true ;
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 1
24450: ST_TO_ADDR
// if array1 = array2 then
24451: LD_VAR 0 1
24455: PUSH
24456: LD_VAR 0 2
24460: EQUAL
24461: IFFALSE 24521
// begin for i = 1 to array1 do
24463: LD_ADDR_VAR 0 4
24467: PUSH
24468: DOUBLE
24469: LD_INT 1
24471: DEC
24472: ST_TO_ADDR
24473: LD_VAR 0 1
24477: PUSH
24478: FOR_TO
24479: IFFALSE 24517
// if array1 [ i ] <> array2 [ i ] then
24481: LD_VAR 0 1
24485: PUSH
24486: LD_VAR 0 4
24490: ARRAY
24491: PUSH
24492: LD_VAR 0 2
24496: PUSH
24497: LD_VAR 0 4
24501: ARRAY
24502: NONEQUAL
24503: IFFALSE 24515
// begin result := false ;
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: LD_INT 0
24512: ST_TO_ADDR
// break ;
24513: GO 24517
// end ;
24515: GO 24478
24517: POP
24518: POP
// end else
24519: GO 24529
// result := false ;
24521: LD_ADDR_VAR 0 3
24525: PUSH
24526: LD_INT 0
24528: ST_TO_ADDR
// end ;
24529: LD_VAR 0 3
24533: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24534: LD_INT 0
24536: PPUSH
24537: PPUSH
24538: PPUSH
// pom := GetBase ( fac ) ;
24539: LD_ADDR_VAR 0 5
24543: PUSH
24544: LD_VAR 0 1
24548: PPUSH
24549: CALL_OW 274
24553: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24554: LD_ADDR_VAR 0 4
24558: PUSH
24559: LD_VAR 0 2
24563: PUSH
24564: LD_INT 1
24566: ARRAY
24567: PPUSH
24568: LD_VAR 0 2
24572: PUSH
24573: LD_INT 2
24575: ARRAY
24576: PPUSH
24577: LD_VAR 0 2
24581: PUSH
24582: LD_INT 3
24584: ARRAY
24585: PPUSH
24586: LD_VAR 0 2
24590: PUSH
24591: LD_INT 4
24593: ARRAY
24594: PPUSH
24595: CALL_OW 449
24599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_VAR 0 5
24609: PPUSH
24610: LD_INT 1
24612: PPUSH
24613: CALL_OW 275
24617: PUSH
24618: LD_VAR 0 4
24622: PUSH
24623: LD_INT 1
24625: ARRAY
24626: GREATEREQUAL
24627: PUSH
24628: LD_VAR 0 5
24632: PPUSH
24633: LD_INT 2
24635: PPUSH
24636: CALL_OW 275
24640: PUSH
24641: LD_VAR 0 4
24645: PUSH
24646: LD_INT 2
24648: ARRAY
24649: GREATEREQUAL
24650: AND
24651: PUSH
24652: LD_VAR 0 5
24656: PPUSH
24657: LD_INT 3
24659: PPUSH
24660: CALL_OW 275
24664: PUSH
24665: LD_VAR 0 4
24669: PUSH
24670: LD_INT 3
24672: ARRAY
24673: GREATEREQUAL
24674: AND
24675: ST_TO_ADDR
// end ;
24676: LD_VAR 0 3
24680: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24681: LD_INT 0
24683: PPUSH
24684: PPUSH
24685: PPUSH
24686: PPUSH
// pom := GetBase ( building ) ;
24687: LD_ADDR_VAR 0 3
24691: PUSH
24692: LD_VAR 0 1
24696: PPUSH
24697: CALL_OW 274
24701: ST_TO_ADDR
// if not pom then
24702: LD_VAR 0 3
24706: NOT
24707: IFFALSE 24711
// exit ;
24709: GO 24881
// btype := GetBType ( building ) ;
24711: LD_ADDR_VAR 0 5
24715: PUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 266
24725: ST_TO_ADDR
// if btype = b_armoury then
24726: LD_VAR 0 5
24730: PUSH
24731: LD_INT 4
24733: EQUAL
24734: IFFALSE 24744
// btype := b_barracks ;
24736: LD_ADDR_VAR 0 5
24740: PUSH
24741: LD_INT 5
24743: ST_TO_ADDR
// if btype = b_depot then
24744: LD_VAR 0 5
24748: PUSH
24749: LD_INT 0
24751: EQUAL
24752: IFFALSE 24762
// btype := b_warehouse ;
24754: LD_ADDR_VAR 0 5
24758: PUSH
24759: LD_INT 1
24761: ST_TO_ADDR
// if btype = b_workshop then
24762: LD_VAR 0 5
24766: PUSH
24767: LD_INT 2
24769: EQUAL
24770: IFFALSE 24780
// btype := b_factory ;
24772: LD_ADDR_VAR 0 5
24776: PUSH
24777: LD_INT 3
24779: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24780: LD_ADDR_VAR 0 4
24784: PUSH
24785: LD_VAR 0 5
24789: PPUSH
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL_OW 248
24799: PPUSH
24800: CALL_OW 450
24804: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24805: LD_ADDR_VAR 0 2
24809: PUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 275
24822: PUSH
24823: LD_VAR 0 4
24827: PUSH
24828: LD_INT 1
24830: ARRAY
24831: GREATEREQUAL
24832: PUSH
24833: LD_VAR 0 3
24837: PPUSH
24838: LD_INT 2
24840: PPUSH
24841: CALL_OW 275
24845: PUSH
24846: LD_VAR 0 4
24850: PUSH
24851: LD_INT 2
24853: ARRAY
24854: GREATEREQUAL
24855: AND
24856: PUSH
24857: LD_VAR 0 3
24861: PPUSH
24862: LD_INT 3
24864: PPUSH
24865: CALL_OW 275
24869: PUSH
24870: LD_VAR 0 4
24874: PUSH
24875: LD_INT 3
24877: ARRAY
24878: GREATEREQUAL
24879: AND
24880: ST_TO_ADDR
// end ;
24881: LD_VAR 0 2
24885: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24886: LD_INT 0
24888: PPUSH
24889: PPUSH
24890: PPUSH
// pom := GetBase ( building ) ;
24891: LD_ADDR_VAR 0 4
24895: PUSH
24896: LD_VAR 0 1
24900: PPUSH
24901: CALL_OW 274
24905: ST_TO_ADDR
// if not pom then
24906: LD_VAR 0 4
24910: NOT
24911: IFFALSE 24915
// exit ;
24913: GO 25016
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24915: LD_ADDR_VAR 0 5
24919: PUSH
24920: LD_VAR 0 2
24924: PPUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 248
24934: PPUSH
24935: CALL_OW 450
24939: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_VAR 0 4
24949: PPUSH
24950: LD_INT 1
24952: PPUSH
24953: CALL_OW 275
24957: PUSH
24958: LD_VAR 0 5
24962: PUSH
24963: LD_INT 1
24965: ARRAY
24966: GREATEREQUAL
24967: PUSH
24968: LD_VAR 0 4
24972: PPUSH
24973: LD_INT 2
24975: PPUSH
24976: CALL_OW 275
24980: PUSH
24981: LD_VAR 0 5
24985: PUSH
24986: LD_INT 2
24988: ARRAY
24989: GREATEREQUAL
24990: AND
24991: PUSH
24992: LD_VAR 0 4
24996: PPUSH
24997: LD_INT 3
24999: PPUSH
25000: CALL_OW 275
25004: PUSH
25005: LD_VAR 0 5
25009: PUSH
25010: LD_INT 3
25012: ARRAY
25013: GREATEREQUAL
25014: AND
25015: ST_TO_ADDR
// end ;
25016: LD_VAR 0 3
25020: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
// result := false ;
25033: LD_ADDR_VAR 0 6
25037: PUSH
25038: LD_INT 0
25040: ST_TO_ADDR
// if not base or not btype or not x or not y then
25041: LD_VAR 0 1
25045: NOT
25046: PUSH
25047: LD_VAR 0 2
25051: NOT
25052: OR
25053: PUSH
25054: LD_VAR 0 3
25058: NOT
25059: OR
25060: PUSH
25061: LD_VAR 0 4
25065: NOT
25066: OR
25067: IFFALSE 25071
// exit ;
25069: GO 25680
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25071: LD_ADDR_VAR 0 12
25075: PUSH
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: LD_VAR 0 4
25090: PPUSH
25091: LD_VAR 0 5
25095: PPUSH
25096: LD_VAR 0 1
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: PPUSH
25105: CALL_OW 248
25109: PPUSH
25110: LD_INT 0
25112: PPUSH
25113: CALL 26517 0 6
25117: ST_TO_ADDR
// if not hexes then
25118: LD_VAR 0 12
25122: NOT
25123: IFFALSE 25127
// exit ;
25125: GO 25680
// for i = 1 to hexes do
25127: LD_ADDR_VAR 0 7
25131: PUSH
25132: DOUBLE
25133: LD_INT 1
25135: DEC
25136: ST_TO_ADDR
25137: LD_VAR 0 12
25141: PUSH
25142: FOR_TO
25143: IFFALSE 25678
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25145: LD_ADDR_VAR 0 11
25149: PUSH
25150: LD_VAR 0 12
25154: PUSH
25155: LD_VAR 0 7
25159: ARRAY
25160: PUSH
25161: LD_INT 1
25163: ARRAY
25164: PPUSH
25165: LD_VAR 0 12
25169: PUSH
25170: LD_VAR 0 7
25174: ARRAY
25175: PUSH
25176: LD_INT 2
25178: ARRAY
25179: PPUSH
25180: CALL_OW 428
25184: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25185: LD_VAR 0 12
25189: PUSH
25190: LD_VAR 0 7
25194: ARRAY
25195: PUSH
25196: LD_INT 1
25198: ARRAY
25199: PPUSH
25200: LD_VAR 0 12
25204: PUSH
25205: LD_VAR 0 7
25209: ARRAY
25210: PUSH
25211: LD_INT 2
25213: ARRAY
25214: PPUSH
25215: CALL_OW 351
25219: PUSH
25220: LD_VAR 0 12
25224: PUSH
25225: LD_VAR 0 7
25229: ARRAY
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: PPUSH
25235: LD_VAR 0 12
25239: PUSH
25240: LD_VAR 0 7
25244: ARRAY
25245: PUSH
25246: LD_INT 2
25248: ARRAY
25249: PPUSH
25250: CALL_OW 488
25254: NOT
25255: OR
25256: PUSH
25257: LD_VAR 0 11
25261: PPUSH
25262: CALL_OW 247
25266: PUSH
25267: LD_INT 3
25269: EQUAL
25270: OR
25271: IFFALSE 25277
// exit ;
25273: POP
25274: POP
25275: GO 25680
// if not tmp or not tmp in base then
25277: LD_VAR 0 11
25281: NOT
25282: PUSH
25283: LD_VAR 0 11
25287: PUSH
25288: LD_VAR 0 1
25292: IN
25293: NOT
25294: OR
25295: IFFALSE 25299
// continue ;
25297: GO 25142
// result := true ;
25299: LD_ADDR_VAR 0 6
25303: PUSH
25304: LD_INT 1
25306: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25307: LD_ADDR_VAR 0 15
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: LD_INT 22
25319: PUSH
25320: LD_VAR 0 11
25324: PPUSH
25325: CALL_OW 255
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 30
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 30
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PPUSH
25366: CALL_OW 72
25370: ST_TO_ADDR
// if dep then
25371: LD_VAR 0 15
25375: IFFALSE 25511
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25377: LD_ADDR_VAR 0 14
25381: PUSH
25382: LD_VAR 0 15
25386: PUSH
25387: LD_INT 1
25389: ARRAY
25390: PPUSH
25391: CALL_OW 250
25395: PPUSH
25396: LD_VAR 0 15
25400: PUSH
25401: LD_INT 1
25403: ARRAY
25404: PPUSH
25405: CALL_OW 254
25409: PPUSH
25410: LD_INT 5
25412: PPUSH
25413: CALL_OW 272
25417: PUSH
25418: LD_VAR 0 15
25422: PUSH
25423: LD_INT 1
25425: ARRAY
25426: PPUSH
25427: CALL_OW 251
25431: PPUSH
25432: LD_VAR 0 15
25436: PUSH
25437: LD_INT 1
25439: ARRAY
25440: PPUSH
25441: CALL_OW 254
25445: PPUSH
25446: LD_INT 5
25448: PPUSH
25449: CALL_OW 273
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25458: LD_VAR 0 14
25462: PUSH
25463: LD_INT 1
25465: ARRAY
25466: PPUSH
25467: LD_VAR 0 14
25471: PUSH
25472: LD_INT 2
25474: ARRAY
25475: PPUSH
25476: CALL_OW 488
25480: IFFALSE 25511
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25482: LD_VAR 0 11
25486: PPUSH
25487: LD_VAR 0 14
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PPUSH
25496: LD_VAR 0 14
25500: PUSH
25501: LD_INT 2
25503: ARRAY
25504: PPUSH
25505: CALL_OW 111
// continue ;
25509: GO 25142
// end ; end ; r := GetDir ( tmp ) ;
25511: LD_ADDR_VAR 0 13
25515: PUSH
25516: LD_VAR 0 11
25520: PPUSH
25521: CALL_OW 254
25525: ST_TO_ADDR
// if r = 5 then
25526: LD_VAR 0 13
25530: PUSH
25531: LD_INT 5
25533: EQUAL
25534: IFFALSE 25544
// r := 0 ;
25536: LD_ADDR_VAR 0 13
25540: PUSH
25541: LD_INT 0
25543: ST_TO_ADDR
// for j = r to 5 do
25544: LD_ADDR_VAR 0 8
25548: PUSH
25549: DOUBLE
25550: LD_VAR 0 13
25554: DEC
25555: ST_TO_ADDR
25556: LD_INT 5
25558: PUSH
25559: FOR_TO
25560: IFFALSE 25674
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25562: LD_ADDR_VAR 0 9
25566: PUSH
25567: LD_VAR 0 11
25571: PPUSH
25572: CALL_OW 250
25576: PPUSH
25577: LD_VAR 0 8
25581: PPUSH
25582: LD_INT 2
25584: PPUSH
25585: CALL_OW 272
25589: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25590: LD_ADDR_VAR 0 10
25594: PUSH
25595: LD_VAR 0 11
25599: PPUSH
25600: CALL_OW 251
25604: PPUSH
25605: LD_VAR 0 8
25609: PPUSH
25610: LD_INT 2
25612: PPUSH
25613: CALL_OW 273
25617: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25618: LD_VAR 0 9
25622: PPUSH
25623: LD_VAR 0 10
25627: PPUSH
25628: CALL_OW 488
25632: PUSH
25633: LD_VAR 0 9
25637: PPUSH
25638: LD_VAR 0 10
25642: PPUSH
25643: CALL_OW 428
25647: NOT
25648: AND
25649: IFFALSE 25672
// begin ComMoveXY ( tmp , _x , _y ) ;
25651: LD_VAR 0 11
25655: PPUSH
25656: LD_VAR 0 9
25660: PPUSH
25661: LD_VAR 0 10
25665: PPUSH
25666: CALL_OW 111
// break ;
25670: GO 25674
// end ; end ;
25672: GO 25559
25674: POP
25675: POP
// end ;
25676: GO 25142
25678: POP
25679: POP
// end ;
25680: LD_VAR 0 6
25684: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25685: LD_INT 0
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
// result := false ;
25697: LD_ADDR_VAR 0 6
25701: PUSH
25702: LD_INT 0
25704: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25705: LD_VAR 0 1
25709: NOT
25710: PUSH
25711: LD_VAR 0 1
25715: PPUSH
25716: CALL_OW 266
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: IN
25731: NOT
25732: OR
25733: PUSH
25734: LD_VAR 0 2
25738: NOT
25739: OR
25740: PUSH
25741: LD_VAR 0 5
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: LD_INT 3
25757: PUSH
25758: LD_INT 4
25760: PUSH
25761: LD_INT 5
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: IN
25772: NOT
25773: OR
25774: PUSH
25775: LD_VAR 0 3
25779: PPUSH
25780: LD_VAR 0 4
25784: PPUSH
25785: CALL_OW 488
25789: NOT
25790: OR
25791: IFFALSE 25795
// exit ;
25793: GO 26512
// pom := GetBase ( depot ) ;
25795: LD_ADDR_VAR 0 10
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 274
25809: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25810: LD_ADDR_VAR 0 11
25814: PUSH
25815: LD_VAR 0 2
25819: PPUSH
25820: LD_VAR 0 1
25824: PPUSH
25825: CALL_OW 248
25829: PPUSH
25830: CALL_OW 450
25834: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25835: LD_VAR 0 10
25839: PPUSH
25840: LD_INT 1
25842: PPUSH
25843: CALL_OW 275
25847: PUSH
25848: LD_VAR 0 11
25852: PUSH
25853: LD_INT 1
25855: ARRAY
25856: GREATEREQUAL
25857: PUSH
25858: LD_VAR 0 10
25862: PPUSH
25863: LD_INT 2
25865: PPUSH
25866: CALL_OW 275
25870: PUSH
25871: LD_VAR 0 11
25875: PUSH
25876: LD_INT 2
25878: ARRAY
25879: GREATEREQUAL
25880: AND
25881: PUSH
25882: LD_VAR 0 10
25886: PPUSH
25887: LD_INT 3
25889: PPUSH
25890: CALL_OW 275
25894: PUSH
25895: LD_VAR 0 11
25899: PUSH
25900: LD_INT 3
25902: ARRAY
25903: GREATEREQUAL
25904: AND
25905: NOT
25906: IFFALSE 25910
// exit ;
25908: GO 26512
// if GetBType ( depot ) = b_depot then
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL_OW 266
25919: PUSH
25920: LD_INT 0
25922: EQUAL
25923: IFFALSE 25935
// dist := 28 else
25925: LD_ADDR_VAR 0 14
25929: PUSH
25930: LD_INT 28
25932: ST_TO_ADDR
25933: GO 25943
// dist := 36 ;
25935: LD_ADDR_VAR 0 14
25939: PUSH
25940: LD_INT 36
25942: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25943: LD_VAR 0 1
25947: PPUSH
25948: LD_VAR 0 3
25952: PPUSH
25953: LD_VAR 0 4
25957: PPUSH
25958: CALL_OW 297
25962: PUSH
25963: LD_VAR 0 14
25967: GREATER
25968: IFFALSE 25972
// exit ;
25970: GO 26512
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25972: LD_ADDR_VAR 0 12
25976: PUSH
25977: LD_VAR 0 2
25981: PPUSH
25982: LD_VAR 0 3
25986: PPUSH
25987: LD_VAR 0 4
25991: PPUSH
25992: LD_VAR 0 5
25996: PPUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 248
26006: PPUSH
26007: LD_INT 0
26009: PPUSH
26010: CALL 26517 0 6
26014: ST_TO_ADDR
// if not hexes then
26015: LD_VAR 0 12
26019: NOT
26020: IFFALSE 26024
// exit ;
26022: GO 26512
// hex := GetHexInfo ( x , y ) ;
26024: LD_ADDR_VAR 0 15
26028: PUSH
26029: LD_VAR 0 3
26033: PPUSH
26034: LD_VAR 0 4
26038: PPUSH
26039: CALL_OW 546
26043: ST_TO_ADDR
// if hex [ 1 ] then
26044: LD_VAR 0 15
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: IFFALSE 26056
// exit ;
26054: GO 26512
// height := hex [ 2 ] ;
26056: LD_ADDR_VAR 0 13
26060: PUSH
26061: LD_VAR 0 15
26065: PUSH
26066: LD_INT 2
26068: ARRAY
26069: ST_TO_ADDR
// for i = 1 to hexes do
26070: LD_ADDR_VAR 0 7
26074: PUSH
26075: DOUBLE
26076: LD_INT 1
26078: DEC
26079: ST_TO_ADDR
26080: LD_VAR 0 12
26084: PUSH
26085: FOR_TO
26086: IFFALSE 26416
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26088: LD_VAR 0 12
26092: PUSH
26093: LD_VAR 0 7
26097: ARRAY
26098: PUSH
26099: LD_INT 1
26101: ARRAY
26102: PPUSH
26103: LD_VAR 0 12
26107: PUSH
26108: LD_VAR 0 7
26112: ARRAY
26113: PUSH
26114: LD_INT 2
26116: ARRAY
26117: PPUSH
26118: CALL_OW 488
26122: NOT
26123: PUSH
26124: LD_VAR 0 12
26128: PUSH
26129: LD_VAR 0 7
26133: ARRAY
26134: PUSH
26135: LD_INT 1
26137: ARRAY
26138: PPUSH
26139: LD_VAR 0 12
26143: PUSH
26144: LD_VAR 0 7
26148: ARRAY
26149: PUSH
26150: LD_INT 2
26152: ARRAY
26153: PPUSH
26154: CALL_OW 428
26158: PUSH
26159: LD_INT 0
26161: GREATER
26162: OR
26163: PUSH
26164: LD_VAR 0 12
26168: PUSH
26169: LD_VAR 0 7
26173: ARRAY
26174: PUSH
26175: LD_INT 1
26177: ARRAY
26178: PPUSH
26179: LD_VAR 0 12
26183: PUSH
26184: LD_VAR 0 7
26188: ARRAY
26189: PUSH
26190: LD_INT 2
26192: ARRAY
26193: PPUSH
26194: CALL_OW 351
26198: OR
26199: IFFALSE 26205
// exit ;
26201: POP
26202: POP
26203: GO 26512
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26205: LD_ADDR_VAR 0 8
26209: PUSH
26210: LD_VAR 0 12
26214: PUSH
26215: LD_VAR 0 7
26219: ARRAY
26220: PUSH
26221: LD_INT 1
26223: ARRAY
26224: PPUSH
26225: LD_VAR 0 12
26229: PUSH
26230: LD_VAR 0 7
26234: ARRAY
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: PPUSH
26240: CALL_OW 546
26244: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26245: LD_VAR 0 8
26249: PUSH
26250: LD_INT 1
26252: ARRAY
26253: PUSH
26254: LD_VAR 0 8
26258: PUSH
26259: LD_INT 2
26261: ARRAY
26262: PUSH
26263: LD_VAR 0 13
26267: PUSH
26268: LD_INT 2
26270: PLUS
26271: GREATER
26272: OR
26273: PUSH
26274: LD_VAR 0 8
26278: PUSH
26279: LD_INT 2
26281: ARRAY
26282: PUSH
26283: LD_VAR 0 13
26287: PUSH
26288: LD_INT 2
26290: MINUS
26291: LESS
26292: OR
26293: PUSH
26294: LD_VAR 0 8
26298: PUSH
26299: LD_INT 3
26301: ARRAY
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: LD_INT 8
26308: PUSH
26309: LD_INT 9
26311: PUSH
26312: LD_INT 10
26314: PUSH
26315: LD_INT 11
26317: PUSH
26318: LD_INT 12
26320: PUSH
26321: LD_INT 13
26323: PUSH
26324: LD_INT 16
26326: PUSH
26327: LD_INT 17
26329: PUSH
26330: LD_INT 18
26332: PUSH
26333: LD_INT 19
26335: PUSH
26336: LD_INT 20
26338: PUSH
26339: LD_INT 21
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: IN
26357: NOT
26358: OR
26359: PUSH
26360: LD_VAR 0 8
26364: PUSH
26365: LD_INT 5
26367: ARRAY
26368: NOT
26369: OR
26370: PUSH
26371: LD_VAR 0 8
26375: PUSH
26376: LD_INT 6
26378: ARRAY
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: LD_INT 7
26388: PUSH
26389: LD_INT 9
26391: PUSH
26392: LD_INT 10
26394: PUSH
26395: LD_INT 11
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: IN
26406: NOT
26407: OR
26408: IFFALSE 26414
// exit ;
26410: POP
26411: POP
26412: GO 26512
// end ;
26414: GO 26085
26416: POP
26417: POP
// side := GetSide ( depot ) ;
26418: LD_ADDR_VAR 0 9
26422: PUSH
26423: LD_VAR 0 1
26427: PPUSH
26428: CALL_OW 255
26432: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26433: LD_VAR 0 9
26437: PPUSH
26438: LD_VAR 0 3
26442: PPUSH
26443: LD_VAR 0 4
26447: PPUSH
26448: LD_INT 20
26450: PPUSH
26451: CALL 19166 0 4
26455: PUSH
26456: LD_INT 4
26458: ARRAY
26459: IFFALSE 26463
// exit ;
26461: GO 26512
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26463: LD_VAR 0 2
26467: PUSH
26468: LD_INT 29
26470: PUSH
26471: LD_INT 30
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: IN
26478: PUSH
26479: LD_VAR 0 3
26483: PPUSH
26484: LD_VAR 0 4
26488: PPUSH
26489: LD_VAR 0 9
26493: PPUSH
26494: CALL_OW 440
26498: NOT
26499: AND
26500: IFFALSE 26504
// exit ;
26502: GO 26512
// result := true ;
26504: LD_ADDR_VAR 0 6
26508: PUSH
26509: LD_INT 1
26511: ST_TO_ADDR
// end ;
26512: LD_VAR 0 6
26516: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
26521: PPUSH
26522: PPUSH
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
26527: PPUSH
26528: PPUSH
26529: PPUSH
26530: PPUSH
26531: PPUSH
26532: PPUSH
26533: PPUSH
26534: PPUSH
26535: PPUSH
26536: PPUSH
26537: PPUSH
26538: PPUSH
26539: PPUSH
26540: PPUSH
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
26565: PPUSH
26566: PPUSH
26567: PPUSH
26568: PPUSH
26569: PPUSH
26570: PPUSH
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
// result = [ ] ;
26577: LD_ADDR_VAR 0 7
26581: PUSH
26582: EMPTY
26583: ST_TO_ADDR
// temp_list = [ ] ;
26584: LD_ADDR_VAR 0 9
26588: PUSH
26589: EMPTY
26590: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26591: LD_VAR 0 4
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: LD_INT 4
26610: PUSH
26611: LD_INT 5
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: IN
26622: NOT
26623: PUSH
26624: LD_VAR 0 1
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: IN
26639: PUSH
26640: LD_VAR 0 5
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: LD_INT 3
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: IN
26659: NOT
26660: AND
26661: OR
26662: IFFALSE 26666
// exit ;
26664: GO 45057
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26666: LD_VAR 0 1
26670: PUSH
26671: LD_INT 6
26673: PUSH
26674: LD_INT 7
26676: PUSH
26677: LD_INT 8
26679: PUSH
26680: LD_INT 13
26682: PUSH
26683: LD_INT 12
26685: PUSH
26686: LD_INT 15
26688: PUSH
26689: LD_INT 11
26691: PUSH
26692: LD_INT 14
26694: PUSH
26695: LD_INT 10
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: IN
26709: IFFALSE 26719
// btype = b_lab ;
26711: LD_ADDR_VAR 0 1
26715: PUSH
26716: LD_INT 6
26718: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26719: LD_VAR 0 6
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: IN
26738: NOT
26739: PUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 3
26756: PUSH
26757: LD_INT 6
26759: PUSH
26760: LD_INT 36
26762: PUSH
26763: LD_INT 4
26765: PUSH
26766: LD_INT 5
26768: PUSH
26769: LD_INT 31
26771: PUSH
26772: LD_INT 32
26774: PUSH
26775: LD_INT 33
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: IN
26791: NOT
26792: PUSH
26793: LD_VAR 0 6
26797: PUSH
26798: LD_INT 1
26800: EQUAL
26801: AND
26802: OR
26803: PUSH
26804: LD_VAR 0 1
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: IN
26819: NOT
26820: PUSH
26821: LD_VAR 0 6
26825: PUSH
26826: LD_INT 2
26828: EQUAL
26829: AND
26830: OR
26831: IFFALSE 26841
// mode = 0 ;
26833: LD_ADDR_VAR 0 6
26837: PUSH
26838: LD_INT 0
26840: ST_TO_ADDR
// case mode of 0 :
26841: LD_VAR 0 6
26845: PUSH
26846: LD_INT 0
26848: DOUBLE
26849: EQUAL
26850: IFTRUE 26854
26852: GO 38307
26854: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26855: LD_ADDR_VAR 0 11
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 2
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27048: LD_ADDR_VAR 0 12
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 3
27205: NEG
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 3
27216: NEG
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27244: LD_ADDR_VAR 0 13
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: NEG
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: NEG
27392: PUSH
27393: LD_INT 3
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 3
27403: NEG
27404: PUSH
27405: LD_INT 2
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 3
27415: NEG
27416: PUSH
27417: LD_INT 3
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27443: LD_ADDR_VAR 0 14
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: LD_INT 3
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 3
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27639: LD_ADDR_VAR 0 15
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 2
27762: NEG
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27832: LD_ADDR_VAR 0 16
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 2
27967: NEG
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 3
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28025: LD_ADDR_VAR 0 17
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: LD_INT 1
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 2
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: LD_INT 2
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28255: LD_ADDR_VAR 0 18
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: NEG
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: LD_INT 2
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28485: LD_ADDR_VAR 0 19
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: LD_INT 2
28570: NEG
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: LD_INT 2
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28715: LD_ADDR_VAR 0 20
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 1
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 2
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: LD_INT 2
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28945: LD_ADDR_VAR 0 21
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: LD_INT 1
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 1
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 2
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29175: LD_ADDR_VAR 0 22
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: NEG
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29405: LD_ADDR_VAR 0 23
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: NEG
29617: PUSH
29618: LD_INT 3
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 3
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29685: LD_ADDR_VAR 0 24
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: LD_INT 2
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 2
29861: NEG
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 3
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29961: LD_ADDR_VAR 0 25
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 2
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30235: LD_ADDR_VAR 0 26
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 2
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30511: LD_ADDR_VAR 0 27
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 3
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30791: LD_ADDR_VAR 0 28
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: NEG
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 2
30990: NEG
30991: PUSH
30992: LD_INT 2
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: LD_INT 3
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31073: LD_ADDR_VAR 0 29
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 3
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: LD_INT 2
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31352: LD_ADDR_VAR 0 30
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: LD_INT 2
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: LD_INT 2
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 3
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: LD_INT 2
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 3
31595: NEG
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31630: LD_ADDR_VAR 0 31
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: LD_INT 3
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: NEG
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31908: LD_ADDR_VAR 0 32
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32186: LD_ADDR_VAR 0 33
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: NEG
32377: PUSH
32378: LD_INT 3
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 2
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 3
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 3
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 3
32430: NEG
32431: PUSH
32432: LD_INT 2
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32465: LD_ADDR_VAR 0 34
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: LD_INT 2
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 2
32632: NEG
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 3
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 2
32699: NEG
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32745: LD_ADDR_VAR 0 35
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32857: LD_ADDR_VAR 0 36
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32969: LD_ADDR_VAR 0 37
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33081: LD_ADDR_VAR 0 38
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 1
33101: NEG
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33193: LD_ADDR_VAR 0 39
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: NEG
33275: PUSH
33276: LD_INT 2
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33305: LD_ADDR_VAR 0 40
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 1
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33417: LD_ADDR_VAR 0 41
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: NEG
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: LD_INT 3
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 3
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 3
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: NEG
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 3
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 3
33726: NEG
33727: PUSH
33728: LD_INT 3
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33767: LD_ADDR_VAR 0 42
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: LD_INT 3
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: LD_INT 3
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 3
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: NEG
34077: PUSH
34078: LD_INT 3
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34117: LD_ADDR_VAR 0 43
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: LD_INT 1
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 3
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 3
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 3
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 3
34413: NEG
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34465: LD_ADDR_VAR 0 44
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: NEG
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 3
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 3
34708: PUSH
34709: LD_INT 3
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 3
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 3
34739: NEG
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 3
34750: NEG
34751: PUSH
34752: LD_INT 1
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: NEG
34763: PUSH
34764: LD_INT 2
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 3
34774: NEG
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34815: LD_ADDR_VAR 0 45
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 2
35005: NEG
35006: PUSH
35007: LD_INT 3
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 3
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 3
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 3
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 3
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 2
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 3
35112: NEG
35113: PUSH
35114: LD_INT 2
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 3
35124: NEG
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35165: LD_ADDR_VAR 0 46
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 3
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 3
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 3
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 3
35461: NEG
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 3
35472: NEG
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35513: LD_ADDR_VAR 0 47
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35664: LD_ADDR_VAR 0 48
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35811: LD_ADDR_VAR 0 49
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 2
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35955: LD_ADDR_VAR 0 50
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36099: LD_ADDR_VAR 0 51
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36246: LD_ADDR_VAR 0 52
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36397: LD_ADDR_VAR 0 53
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: NEG
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36627: LD_ADDR_VAR 0 54
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36857: LD_ADDR_VAR 0 55
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37087: LD_ADDR_VAR 0 56
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: LD_INT 2
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 2
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37317: LD_ADDR_VAR 0 57
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 1
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37547: LD_ADDR_VAR 0 58
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37777: LD_ADDR_VAR 0 59
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37865: LD_ADDR_VAR 0 60
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37953: LD_ADDR_VAR 0 61
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38041: LD_ADDR_VAR 0 62
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38129: LD_ADDR_VAR 0 63
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38217: LD_ADDR_VAR 0 64
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// end ; 1 :
38305: GO 44202
38307: LD_INT 1
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 40938
38315: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38316: LD_ADDR_VAR 0 11
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 3
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: LD_INT 3
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38360: LD_ADDR_VAR 0 12
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38401: LD_ADDR_VAR 0 13
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38441: LD_ADDR_VAR 0 14
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38482: LD_ADDR_VAR 0 15
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: NEG
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38526: LD_ADDR_VAR 0 16
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: LD_INT 3
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38572: LD_ADDR_VAR 0 17
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 3
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 3
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38616: LD_ADDR_VAR 0 18
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38657: LD_ADDR_VAR 0 19
38661: PUSH
38662: LD_INT 3
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: LD_INT 3
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: LD_INT 3
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38697: LD_ADDR_VAR 0 20
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38738: LD_ADDR_VAR 0 21
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 3
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38782: LD_ADDR_VAR 0 22
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: LD_INT 3
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 3
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: NEG
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38828: LD_ADDR_VAR 0 23
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 3
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 4
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38872: LD_ADDR_VAR 0 24
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 4
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38913: LD_ADDR_VAR 0 25
38917: PUSH
38918: LD_INT 3
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 4
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38953: LD_ADDR_VAR 0 26
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 4
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38994: LD_ADDR_VAR 0 27
38998: PUSH
38999: LD_INT 3
39001: NEG
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 4
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39038: LD_ADDR_VAR 0 28
39042: PUSH
39043: LD_INT 3
39045: NEG
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 3
39057: NEG
39058: PUSH
39059: LD_INT 4
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 4
39069: NEG
39070: PUSH
39071: LD_INT 3
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39084: LD_ADDR_VAR 0 29
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 4
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 4
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 3
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: LD_INT 5
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 5
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 4
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 6
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 6
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 5
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39239: LD_ADDR_VAR 0 30
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 3
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 4
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 4
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 4
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 5
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 5
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 5
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 6
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 6
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39382: LD_ADDR_VAR 0 31
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 4
39419: PUSH
39420: LD_INT 3
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 4
39429: PUSH
39430: LD_INT 4
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: LD_INT 4
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 5
39449: PUSH
39450: LD_INT 4
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 5
39459: PUSH
39460: LD_INT 5
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 4
39469: PUSH
39470: LD_INT 5
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 6
39479: PUSH
39480: LD_INT 5
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 6
39489: PUSH
39490: LD_INT 6
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 5
39499: PUSH
39500: LD_INT 6
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39521: LD_ADDR_VAR 0 32
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 4
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 4
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 3
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 5
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 4
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 6
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 6
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 5
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39664: LD_ADDR_VAR 0 33
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 3
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 3
39705: NEG
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 4
39716: NEG
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 4
39727: NEG
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 4
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 5
39750: NEG
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 5
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 5
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 6
39784: NEG
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 6
39795: NEG
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39819: LD_ADDR_VAR 0 34
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: LD_INT 3
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 3
39850: NEG
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: LD_INT 4
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 4
39874: NEG
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 4
39886: NEG
39887: PUSH
39888: LD_INT 4
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 4
39898: NEG
39899: PUSH
39900: LD_INT 5
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 5
39910: NEG
39911: PUSH
39912: LD_INT 4
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 5
39922: NEG
39923: PUSH
39924: LD_INT 5
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 5
39934: NEG
39935: PUSH
39936: LD_INT 6
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 6
39946: NEG
39947: PUSH
39948: LD_INT 5
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 6
39958: NEG
39959: PUSH
39960: LD_INT 6
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39982: LD_ADDR_VAR 0 41
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40026: LD_ADDR_VAR 0 42
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40067: LD_ADDR_VAR 0 43
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 2
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 3
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 3
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40107: LD_ADDR_VAR 0 44
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 3
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40148: LD_ADDR_VAR 0 45
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 3
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40192: LD_ADDR_VAR 0 46
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40238: LD_ADDR_VAR 0 47
40242: PUSH
40243: LD_INT 2
40245: NEG
40246: PUSH
40247: LD_INT 3
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 3
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40271: LD_ADDR_VAR 0 48
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40302: LD_ADDR_VAR 0 49
40306: PUSH
40307: LD_INT 3
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40331: LD_ADDR_VAR 0 50
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 3
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40360: LD_ADDR_VAR 0 51
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40391: LD_ADDR_VAR 0 52
40395: PUSH
40396: LD_INT 3
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: LD_INT 2
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40424: LD_ADDR_VAR 0 53
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 3
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 3
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40468: LD_ADDR_VAR 0 54
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40509: LD_ADDR_VAR 0 55
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: LD_INT 3
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40549: LD_ADDR_VAR 0 56
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 3
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40590: LD_ADDR_VAR 0 57
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: NEG
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40634: LD_ADDR_VAR 0 58
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 3
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 3
40653: NEG
40654: PUSH
40655: LD_INT 2
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: NEG
40666: PUSH
40667: LD_INT 3
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40680: LD_ADDR_VAR 0 59
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40724: LD_ADDR_VAR 0 60
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40765: LD_ADDR_VAR 0 61
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40805: LD_ADDR_VAR 0 62
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40846: LD_ADDR_VAR 0 63
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40890: LD_ADDR_VAR 0 64
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// end ; 2 :
40936: GO 44202
40938: LD_INT 2
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 40946
40944: GO 44201
40946: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40947: LD_ADDR_VAR 0 29
40951: PUSH
40952: LD_INT 4
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 4
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 5
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 5
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 4
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 3
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 3
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 5
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 3
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 4
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: LD_INT 4
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: LD_INT 4
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 3
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 4
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 4
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 4
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 4
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 5
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 4
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 3
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: LD_INT 5
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 3
41230: NEG
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 3
41241: NEG
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 4
41286: NEG
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 4
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 4
41309: NEG
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 4
41332: NEG
41333: PUSH
41334: LD_INT 4
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 4
41344: NEG
41345: PUSH
41346: LD_INT 5
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 3
41356: NEG
41357: PUSH
41358: LD_INT 4
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 3
41368: NEG
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 4
41380: NEG
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 5
41392: NEG
41393: PUSH
41394: LD_INT 4
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 5
41404: NEG
41405: PUSH
41406: LD_INT 5
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 5
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 5
41428: NEG
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41485: LD_ADDR_VAR 0 30
41489: PUSH
41490: LD_INT 4
41492: PUSH
41493: LD_INT 4
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 4
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 5
41512: PUSH
41513: LD_INT 4
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 5
41522: PUSH
41523: LD_INT 5
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 4
41532: PUSH
41533: LD_INT 5
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 3
41542: PUSH
41543: LD_INT 4
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 5
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 5
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 4
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 4
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 4
41675: NEG
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 4
41686: NEG
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 4
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 5
41731: NEG
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 5
41742: NEG
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 5
41754: NEG
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: NEG
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: NEG
41790: PUSH
41791: LD_INT 4
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 3
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 3
41825: NEG
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 4
41837: NEG
41838: PUSH
41839: LD_INT 3
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 4
41849: NEG
41850: PUSH
41851: LD_INT 4
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: LD_INT 4
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 4
41873: NEG
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 4
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 5
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 4
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 3
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 4
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 5
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: LD_INT 5
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42032: LD_ADDR_VAR 0 31
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 4
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 4
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 5
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 5
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 4
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 5
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: NEG
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 3
42143: NEG
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 4
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 4
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 4
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 4
42234: NEG
42235: PUSH
42236: LD_INT 4
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 4
42246: NEG
42247: PUSH
42248: LD_INT 5
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: LD_INT 4
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 4
42282: NEG
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 5
42294: NEG
42295: PUSH
42296: LD_INT 4
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 5
42306: NEG
42307: PUSH
42308: LD_INT 5
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: LD_INT 5
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 5
42330: NEG
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 4
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 3
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 4
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 4
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 4
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 4
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 4
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 5
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42582: LD_ADDR_VAR 0 32
42586: PUSH
42587: LD_INT 4
42589: NEG
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 4
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 3
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 4
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 5
42645: NEG
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 5
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 5
42668: NEG
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 3
42680: NEG
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: NEG
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: NEG
42704: PUSH
42705: LD_INT 4
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 4
42751: NEG
42752: PUSH
42753: LD_INT 3
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 4
42763: NEG
42764: PUSH
42765: LD_INT 4
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 4
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 4
42787: NEG
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 4
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 5
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 4
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 4
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 5
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: LD_INT 5
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 4
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 4
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 3
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 4
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: LD_INT 4
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 4
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 5
43014: PUSH
43015: LD_INT 4
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 5
43024: PUSH
43025: LD_INT 5
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 4
43034: PUSH
43035: LD_INT 5
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: LD_INT 4
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 5
43064: PUSH
43065: LD_INT 3
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: LD_INT 5
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43129: LD_ADDR_VAR 0 33
43133: PUSH
43134: LD_INT 4
43136: NEG
43137: PUSH
43138: LD_INT 4
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 4
43148: NEG
43149: PUSH
43150: LD_INT 5
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: LD_INT 4
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 4
43184: NEG
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 5
43196: NEG
43197: PUSH
43198: LD_INT 4
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 5
43208: NEG
43209: PUSH
43210: LD_INT 5
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: LD_INT 5
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 5
43232: NEG
43233: PUSH
43234: LD_INT 3
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 3
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 4
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 3
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 4
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 4
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 4
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 5
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 5
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 4
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 5
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: LD_INT 3
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 4
43459: PUSH
43460: LD_INT 3
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 4
43469: PUSH
43470: LD_INT 4
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 4
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 4
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 4
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 4
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 4
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 5
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 5
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 4
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 5
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43667: LD_ADDR_VAR 0 34
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 4
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 5
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 4
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 3
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 3
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 4
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 5
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 3
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 5
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 4
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 4
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 4
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 4
43869: PUSH
43870: LD_INT 4
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 4
43879: PUSH
43880: LD_INT 3
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 5
43889: PUSH
43890: LD_INT 4
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 5
43899: PUSH
43900: LD_INT 5
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 4
43909: PUSH
43910: LD_INT 5
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 4
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 5
43939: PUSH
43940: LD_INT 3
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: LD_INT 5
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 4
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 4
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 4
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 4
44052: NEG
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 4
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 3
44075: NEG
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 3
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 4
44097: NEG
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 5
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 5
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 5
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// end ; end ;
44199: GO 44202
44201: POP
// case btype of b_depot , b_warehouse :
44202: LD_VAR 0 1
44206: PUSH
44207: LD_INT 0
44209: DOUBLE
44210: EQUAL
44211: IFTRUE 44221
44213: LD_INT 1
44215: DOUBLE
44216: EQUAL
44217: IFTRUE 44221
44219: GO 44422
44221: POP
// case nation of nation_american :
44222: LD_VAR 0 5
44226: PUSH
44227: LD_INT 1
44229: DOUBLE
44230: EQUAL
44231: IFTRUE 44235
44233: GO 44291
44235: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44236: LD_ADDR_VAR 0 9
44240: PUSH
44241: LD_VAR 0 11
44245: PUSH
44246: LD_VAR 0 12
44250: PUSH
44251: LD_VAR 0 13
44255: PUSH
44256: LD_VAR 0 14
44260: PUSH
44261: LD_VAR 0 15
44265: PUSH
44266: LD_VAR 0 16
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: PUSH
44279: LD_VAR 0 4
44283: PUSH
44284: LD_INT 1
44286: PLUS
44287: ARRAY
44288: ST_TO_ADDR
44289: GO 44420
44291: LD_INT 2
44293: DOUBLE
44294: EQUAL
44295: IFTRUE 44299
44297: GO 44355
44299: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44300: LD_ADDR_VAR 0 9
44304: PUSH
44305: LD_VAR 0 17
44309: PUSH
44310: LD_VAR 0 18
44314: PUSH
44315: LD_VAR 0 19
44319: PUSH
44320: LD_VAR 0 20
44324: PUSH
44325: LD_VAR 0 21
44329: PUSH
44330: LD_VAR 0 22
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: LD_VAR 0 4
44347: PUSH
44348: LD_INT 1
44350: PLUS
44351: ARRAY
44352: ST_TO_ADDR
44353: GO 44420
44355: LD_INT 3
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44363
44361: GO 44419
44363: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44364: LD_ADDR_VAR 0 9
44368: PUSH
44369: LD_VAR 0 23
44373: PUSH
44374: LD_VAR 0 24
44378: PUSH
44379: LD_VAR 0 25
44383: PUSH
44384: LD_VAR 0 26
44388: PUSH
44389: LD_VAR 0 27
44393: PUSH
44394: LD_VAR 0 28
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: PUSH
44407: LD_VAR 0 4
44411: PUSH
44412: LD_INT 1
44414: PLUS
44415: ARRAY
44416: ST_TO_ADDR
44417: GO 44420
44419: POP
44420: GO 44975
44422: LD_INT 2
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44436
44428: LD_INT 3
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44492
44436: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44437: LD_ADDR_VAR 0 9
44441: PUSH
44442: LD_VAR 0 29
44446: PUSH
44447: LD_VAR 0 30
44451: PUSH
44452: LD_VAR 0 31
44456: PUSH
44457: LD_VAR 0 32
44461: PUSH
44462: LD_VAR 0 33
44466: PUSH
44467: LD_VAR 0 34
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: PUSH
44480: LD_VAR 0 4
44484: PUSH
44485: LD_INT 1
44487: PLUS
44488: ARRAY
44489: ST_TO_ADDR
44490: GO 44975
44492: LD_INT 16
44494: DOUBLE
44495: EQUAL
44496: IFTRUE 44554
44498: LD_INT 17
44500: DOUBLE
44501: EQUAL
44502: IFTRUE 44554
44504: LD_INT 18
44506: DOUBLE
44507: EQUAL
44508: IFTRUE 44554
44510: LD_INT 19
44512: DOUBLE
44513: EQUAL
44514: IFTRUE 44554
44516: LD_INT 22
44518: DOUBLE
44519: EQUAL
44520: IFTRUE 44554
44522: LD_INT 20
44524: DOUBLE
44525: EQUAL
44526: IFTRUE 44554
44528: LD_INT 21
44530: DOUBLE
44531: EQUAL
44532: IFTRUE 44554
44534: LD_INT 23
44536: DOUBLE
44537: EQUAL
44538: IFTRUE 44554
44540: LD_INT 24
44542: DOUBLE
44543: EQUAL
44544: IFTRUE 44554
44546: LD_INT 25
44548: DOUBLE
44549: EQUAL
44550: IFTRUE 44554
44552: GO 44610
44554: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44555: LD_ADDR_VAR 0 9
44559: PUSH
44560: LD_VAR 0 35
44564: PUSH
44565: LD_VAR 0 36
44569: PUSH
44570: LD_VAR 0 37
44574: PUSH
44575: LD_VAR 0 38
44579: PUSH
44580: LD_VAR 0 39
44584: PUSH
44585: LD_VAR 0 40
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: PUSH
44598: LD_VAR 0 4
44602: PUSH
44603: LD_INT 1
44605: PLUS
44606: ARRAY
44607: ST_TO_ADDR
44608: GO 44975
44610: LD_INT 6
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44666
44616: LD_INT 7
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44666
44622: LD_INT 8
44624: DOUBLE
44625: EQUAL
44626: IFTRUE 44666
44628: LD_INT 13
44630: DOUBLE
44631: EQUAL
44632: IFTRUE 44666
44634: LD_INT 12
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44666
44640: LD_INT 15
44642: DOUBLE
44643: EQUAL
44644: IFTRUE 44666
44646: LD_INT 11
44648: DOUBLE
44649: EQUAL
44650: IFTRUE 44666
44652: LD_INT 14
44654: DOUBLE
44655: EQUAL
44656: IFTRUE 44666
44658: LD_INT 10
44660: DOUBLE
44661: EQUAL
44662: IFTRUE 44666
44664: GO 44722
44666: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44667: LD_ADDR_VAR 0 9
44671: PUSH
44672: LD_VAR 0 41
44676: PUSH
44677: LD_VAR 0 42
44681: PUSH
44682: LD_VAR 0 43
44686: PUSH
44687: LD_VAR 0 44
44691: PUSH
44692: LD_VAR 0 45
44696: PUSH
44697: LD_VAR 0 46
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: PUSH
44710: LD_VAR 0 4
44714: PUSH
44715: LD_INT 1
44717: PLUS
44718: ARRAY
44719: ST_TO_ADDR
44720: GO 44975
44722: LD_INT 36
44724: DOUBLE
44725: EQUAL
44726: IFTRUE 44730
44728: GO 44786
44730: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44731: LD_ADDR_VAR 0 9
44735: PUSH
44736: LD_VAR 0 47
44740: PUSH
44741: LD_VAR 0 48
44745: PUSH
44746: LD_VAR 0 49
44750: PUSH
44751: LD_VAR 0 50
44755: PUSH
44756: LD_VAR 0 51
44760: PUSH
44761: LD_VAR 0 52
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: PUSH
44774: LD_VAR 0 4
44778: PUSH
44779: LD_INT 1
44781: PLUS
44782: ARRAY
44783: ST_TO_ADDR
44784: GO 44975
44786: LD_INT 4
44788: DOUBLE
44789: EQUAL
44790: IFTRUE 44812
44792: LD_INT 5
44794: DOUBLE
44795: EQUAL
44796: IFTRUE 44812
44798: LD_INT 34
44800: DOUBLE
44801: EQUAL
44802: IFTRUE 44812
44804: LD_INT 37
44806: DOUBLE
44807: EQUAL
44808: IFTRUE 44812
44810: GO 44868
44812: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44813: LD_ADDR_VAR 0 9
44817: PUSH
44818: LD_VAR 0 53
44822: PUSH
44823: LD_VAR 0 54
44827: PUSH
44828: LD_VAR 0 55
44832: PUSH
44833: LD_VAR 0 56
44837: PUSH
44838: LD_VAR 0 57
44842: PUSH
44843: LD_VAR 0 58
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: PUSH
44856: LD_VAR 0 4
44860: PUSH
44861: LD_INT 1
44863: PLUS
44864: ARRAY
44865: ST_TO_ADDR
44866: GO 44975
44868: LD_INT 31
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44918
44874: LD_INT 32
44876: DOUBLE
44877: EQUAL
44878: IFTRUE 44918
44880: LD_INT 33
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44918
44886: LD_INT 27
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44918
44892: LD_INT 26
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44918
44898: LD_INT 28
44900: DOUBLE
44901: EQUAL
44902: IFTRUE 44918
44904: LD_INT 29
44906: DOUBLE
44907: EQUAL
44908: IFTRUE 44918
44910: LD_INT 30
44912: DOUBLE
44913: EQUAL
44914: IFTRUE 44918
44916: GO 44974
44918: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44919: LD_ADDR_VAR 0 9
44923: PUSH
44924: LD_VAR 0 59
44928: PUSH
44929: LD_VAR 0 60
44933: PUSH
44934: LD_VAR 0 61
44938: PUSH
44939: LD_VAR 0 62
44943: PUSH
44944: LD_VAR 0 63
44948: PUSH
44949: LD_VAR 0 64
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: PUSH
44962: LD_VAR 0 4
44966: PUSH
44967: LD_INT 1
44969: PLUS
44970: ARRAY
44971: ST_TO_ADDR
44972: GO 44975
44974: POP
// temp_list2 = [ ] ;
44975: LD_ADDR_VAR 0 10
44979: PUSH
44980: EMPTY
44981: ST_TO_ADDR
// for i in temp_list do
44982: LD_ADDR_VAR 0 8
44986: PUSH
44987: LD_VAR 0 9
44991: PUSH
44992: FOR_IN
44993: IFFALSE 45045
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44995: LD_ADDR_VAR 0 10
44999: PUSH
45000: LD_VAR 0 10
45004: PUSH
45005: LD_VAR 0 8
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: PUSH
45014: LD_VAR 0 2
45018: PLUS
45019: PUSH
45020: LD_VAR 0 8
45024: PUSH
45025: LD_INT 2
45027: ARRAY
45028: PUSH
45029: LD_VAR 0 3
45033: PLUS
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: EMPTY
45040: LIST
45041: ADD
45042: ST_TO_ADDR
45043: GO 44992
45045: POP
45046: POP
// result = temp_list2 ;
45047: LD_ADDR_VAR 0 7
45051: PUSH
45052: LD_VAR 0 10
45056: ST_TO_ADDR
// end ;
45057: LD_VAR 0 7
45061: RET
// export function EnemyInRange ( unit , dist ) ; begin
45062: LD_INT 0
45064: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45065: LD_ADDR_VAR 0 3
45069: PUSH
45070: LD_VAR 0 1
45074: PPUSH
45075: CALL_OW 255
45079: PPUSH
45080: LD_VAR 0 1
45084: PPUSH
45085: CALL_OW 250
45089: PPUSH
45090: LD_VAR 0 1
45094: PPUSH
45095: CALL_OW 251
45099: PPUSH
45100: LD_VAR 0 2
45104: PPUSH
45105: CALL 19166 0 4
45109: PUSH
45110: LD_INT 4
45112: ARRAY
45113: ST_TO_ADDR
// end ;
45114: LD_VAR 0 3
45118: RET
// export function PlayerSeeMe ( unit ) ; begin
45119: LD_INT 0
45121: PPUSH
// result := See ( your_side , unit ) ;
45122: LD_ADDR_VAR 0 2
45126: PUSH
45127: LD_OWVAR 2
45131: PPUSH
45132: LD_VAR 0 1
45136: PPUSH
45137: CALL_OW 292
45141: ST_TO_ADDR
// end ;
45142: LD_VAR 0 2
45146: RET
// export function ReverseDir ( unit ) ; begin
45147: LD_INT 0
45149: PPUSH
// if not unit then
45150: LD_VAR 0 1
45154: NOT
45155: IFFALSE 45159
// exit ;
45157: GO 45205
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
45159: LD_ADDR_VAR 0 2
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: LD_INT 4
45169: PUSH
45170: LD_INT 5
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: PUSH
45190: LD_VAR 0 1
45194: PPUSH
45195: CALL_OW 254
45199: PUSH
45200: LD_INT 1
45202: PLUS
45203: ARRAY
45204: ST_TO_ADDR
// end ;
45205: LD_VAR 0 2
45209: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45210: LD_INT 0
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
// if not hexes then
45217: LD_VAR 0 2
45221: NOT
45222: IFFALSE 45226
// exit ;
45224: GO 45374
// dist := 9999 ;
45226: LD_ADDR_VAR 0 5
45230: PUSH
45231: LD_INT 9999
45233: ST_TO_ADDR
// for i = 1 to hexes do
45234: LD_ADDR_VAR 0 4
45238: PUSH
45239: DOUBLE
45240: LD_INT 1
45242: DEC
45243: ST_TO_ADDR
45244: LD_VAR 0 2
45248: PUSH
45249: FOR_TO
45250: IFFALSE 45362
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45252: LD_VAR 0 1
45256: PPUSH
45257: LD_VAR 0 2
45261: PUSH
45262: LD_VAR 0 4
45266: ARRAY
45267: PUSH
45268: LD_INT 1
45270: ARRAY
45271: PPUSH
45272: LD_VAR 0 2
45276: PUSH
45277: LD_VAR 0 4
45281: ARRAY
45282: PUSH
45283: LD_INT 2
45285: ARRAY
45286: PPUSH
45287: CALL_OW 297
45291: PUSH
45292: LD_VAR 0 5
45296: LESS
45297: IFFALSE 45360
// begin hex := hexes [ i ] ;
45299: LD_ADDR_VAR 0 7
45303: PUSH
45304: LD_VAR 0 2
45308: PUSH
45309: LD_VAR 0 4
45313: ARRAY
45314: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45315: LD_ADDR_VAR 0 5
45319: PUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: LD_VAR 0 2
45329: PUSH
45330: LD_VAR 0 4
45334: ARRAY
45335: PUSH
45336: LD_INT 1
45338: ARRAY
45339: PPUSH
45340: LD_VAR 0 2
45344: PUSH
45345: LD_VAR 0 4
45349: ARRAY
45350: PUSH
45351: LD_INT 2
45353: ARRAY
45354: PPUSH
45355: CALL_OW 297
45359: ST_TO_ADDR
// end ; end ;
45360: GO 45249
45362: POP
45363: POP
// result := hex ;
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_VAR 0 7
45373: ST_TO_ADDR
// end ;
45374: LD_VAR 0 3
45378: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45379: LD_INT 0
45381: PPUSH
45382: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45383: LD_VAR 0 1
45387: NOT
45388: PUSH
45389: LD_VAR 0 1
45393: PUSH
45394: LD_INT 21
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 23
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PPUSH
45418: CALL_OW 69
45422: IN
45423: NOT
45424: OR
45425: IFFALSE 45429
// exit ;
45427: GO 45476
// for i = 1 to 3 do
45429: LD_ADDR_VAR 0 3
45433: PUSH
45434: DOUBLE
45435: LD_INT 1
45437: DEC
45438: ST_TO_ADDR
45439: LD_INT 3
45441: PUSH
45442: FOR_TO
45443: IFFALSE 45474
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 250
45454: PPUSH
45455: LD_VAR 0 1
45459: PPUSH
45460: CALL_OW 251
45464: PPUSH
45465: LD_INT 1
45467: PPUSH
45468: CALL_OW 453
45472: GO 45442
45474: POP
45475: POP
// end ;
45476: LD_VAR 0 2
45480: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45481: LD_INT 0
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45489: LD_VAR 0 1
45493: NOT
45494: PUSH
45495: LD_VAR 0 2
45499: NOT
45500: OR
45501: PUSH
45502: LD_VAR 0 1
45506: PPUSH
45507: CALL_OW 314
45511: OR
45512: IFFALSE 45516
// exit ;
45514: GO 45957
// x := GetX ( enemy_unit ) ;
45516: LD_ADDR_VAR 0 7
45520: PUSH
45521: LD_VAR 0 2
45525: PPUSH
45526: CALL_OW 250
45530: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45531: LD_ADDR_VAR 0 8
45535: PUSH
45536: LD_VAR 0 2
45540: PPUSH
45541: CALL_OW 251
45545: ST_TO_ADDR
// if not x or not y then
45546: LD_VAR 0 7
45550: NOT
45551: PUSH
45552: LD_VAR 0 8
45556: NOT
45557: OR
45558: IFFALSE 45562
// exit ;
45560: GO 45957
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45562: LD_ADDR_VAR 0 6
45566: PUSH
45567: LD_VAR 0 7
45571: PPUSH
45572: LD_INT 0
45574: PPUSH
45575: LD_INT 4
45577: PPUSH
45578: CALL_OW 272
45582: PUSH
45583: LD_VAR 0 8
45587: PPUSH
45588: LD_INT 0
45590: PPUSH
45591: LD_INT 4
45593: PPUSH
45594: CALL_OW 273
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_VAR 0 7
45607: PPUSH
45608: LD_INT 1
45610: PPUSH
45611: LD_INT 4
45613: PPUSH
45614: CALL_OW 272
45618: PUSH
45619: LD_VAR 0 8
45623: PPUSH
45624: LD_INT 1
45626: PPUSH
45627: LD_INT 4
45629: PPUSH
45630: CALL_OW 273
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_VAR 0 7
45643: PPUSH
45644: LD_INT 2
45646: PPUSH
45647: LD_INT 4
45649: PPUSH
45650: CALL_OW 272
45654: PUSH
45655: LD_VAR 0 8
45659: PPUSH
45660: LD_INT 2
45662: PPUSH
45663: LD_INT 4
45665: PPUSH
45666: CALL_OW 273
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_VAR 0 7
45679: PPUSH
45680: LD_INT 3
45682: PPUSH
45683: LD_INT 4
45685: PPUSH
45686: CALL_OW 272
45690: PUSH
45691: LD_VAR 0 8
45695: PPUSH
45696: LD_INT 3
45698: PPUSH
45699: LD_INT 4
45701: PPUSH
45702: CALL_OW 273
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_VAR 0 7
45715: PPUSH
45716: LD_INT 4
45718: PPUSH
45719: LD_INT 4
45721: PPUSH
45722: CALL_OW 272
45726: PUSH
45727: LD_VAR 0 8
45731: PPUSH
45732: LD_INT 4
45734: PPUSH
45735: LD_INT 4
45737: PPUSH
45738: CALL_OW 273
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_VAR 0 7
45751: PPUSH
45752: LD_INT 5
45754: PPUSH
45755: LD_INT 4
45757: PPUSH
45758: CALL_OW 272
45762: PUSH
45763: LD_VAR 0 8
45767: PPUSH
45768: LD_INT 5
45770: PPUSH
45771: LD_INT 4
45773: PPUSH
45774: CALL_OW 273
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// for i = tmp downto 1 do
45791: LD_ADDR_VAR 0 4
45795: PUSH
45796: DOUBLE
45797: LD_VAR 0 6
45801: INC
45802: ST_TO_ADDR
45803: LD_INT 1
45805: PUSH
45806: FOR_DOWNTO
45807: IFFALSE 45908
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45809: LD_VAR 0 6
45813: PUSH
45814: LD_VAR 0 4
45818: ARRAY
45819: PUSH
45820: LD_INT 1
45822: ARRAY
45823: PPUSH
45824: LD_VAR 0 6
45828: PUSH
45829: LD_VAR 0 4
45833: ARRAY
45834: PUSH
45835: LD_INT 2
45837: ARRAY
45838: PPUSH
45839: CALL_OW 488
45843: NOT
45844: PUSH
45845: LD_VAR 0 6
45849: PUSH
45850: LD_VAR 0 4
45854: ARRAY
45855: PUSH
45856: LD_INT 1
45858: ARRAY
45859: PPUSH
45860: LD_VAR 0 6
45864: PUSH
45865: LD_VAR 0 4
45869: ARRAY
45870: PUSH
45871: LD_INT 2
45873: ARRAY
45874: PPUSH
45875: CALL_OW 428
45879: PUSH
45880: LD_INT 0
45882: NONEQUAL
45883: OR
45884: IFFALSE 45906
// tmp := Delete ( tmp , i ) ;
45886: LD_ADDR_VAR 0 6
45890: PUSH
45891: LD_VAR 0 6
45895: PPUSH
45896: LD_VAR 0 4
45900: PPUSH
45901: CALL_OW 3
45905: ST_TO_ADDR
45906: GO 45806
45908: POP
45909: POP
// j := GetClosestHex ( unit , tmp ) ;
45910: LD_ADDR_VAR 0 5
45914: PUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: LD_VAR 0 6
45924: PPUSH
45925: CALL 45210 0 2
45929: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45930: LD_VAR 0 1
45934: PPUSH
45935: LD_VAR 0 5
45939: PUSH
45940: LD_INT 1
45942: ARRAY
45943: PPUSH
45944: LD_VAR 0 5
45948: PUSH
45949: LD_INT 2
45951: ARRAY
45952: PPUSH
45953: CALL_OW 111
// end ;
45957: LD_VAR 0 3
45961: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45962: LD_INT 0
45964: PPUSH
45965: PPUSH
45966: PPUSH
// uc_side = 0 ;
45967: LD_ADDR_OWVAR 20
45971: PUSH
45972: LD_INT 0
45974: ST_TO_ADDR
// uc_nation = 0 ;
45975: LD_ADDR_OWVAR 21
45979: PUSH
45980: LD_INT 0
45982: ST_TO_ADDR
// InitHc ;
45983: CALL_OW 19
// InitVc ;
45987: CALL_OW 20
// if mastodonts then
45991: LD_VAR 0 6
45995: IFFALSE 46062
// for i = 1 to mastodonts do
45997: LD_ADDR_VAR 0 11
46001: PUSH
46002: DOUBLE
46003: LD_INT 1
46005: DEC
46006: ST_TO_ADDR
46007: LD_VAR 0 6
46011: PUSH
46012: FOR_TO
46013: IFFALSE 46060
// begin vc_chassis := 31 ;
46015: LD_ADDR_OWVAR 37
46019: PUSH
46020: LD_INT 31
46022: ST_TO_ADDR
// vc_control := control_rider ;
46023: LD_ADDR_OWVAR 38
46027: PUSH
46028: LD_INT 4
46030: ST_TO_ADDR
// animal := CreateVehicle ;
46031: LD_ADDR_VAR 0 12
46035: PUSH
46036: CALL_OW 45
46040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46041: LD_VAR 0 12
46045: PPUSH
46046: LD_VAR 0 8
46050: PPUSH
46051: LD_INT 0
46053: PPUSH
46054: CALL 52807 0 3
// end ;
46058: GO 46012
46060: POP
46061: POP
// if horses then
46062: LD_VAR 0 5
46066: IFFALSE 46133
// for i = 1 to horses do
46068: LD_ADDR_VAR 0 11
46072: PUSH
46073: DOUBLE
46074: LD_INT 1
46076: DEC
46077: ST_TO_ADDR
46078: LD_VAR 0 5
46082: PUSH
46083: FOR_TO
46084: IFFALSE 46131
// begin hc_class := 21 ;
46086: LD_ADDR_OWVAR 28
46090: PUSH
46091: LD_INT 21
46093: ST_TO_ADDR
// hc_gallery :=  ;
46094: LD_ADDR_OWVAR 33
46098: PUSH
46099: LD_STRING 
46101: ST_TO_ADDR
// animal := CreateHuman ;
46102: LD_ADDR_VAR 0 12
46106: PUSH
46107: CALL_OW 44
46111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46112: LD_VAR 0 12
46116: PPUSH
46117: LD_VAR 0 8
46121: PPUSH
46122: LD_INT 0
46124: PPUSH
46125: CALL 52807 0 3
// end ;
46129: GO 46083
46131: POP
46132: POP
// if birds then
46133: LD_VAR 0 1
46137: IFFALSE 46204
// for i = 1 to birds do
46139: LD_ADDR_VAR 0 11
46143: PUSH
46144: DOUBLE
46145: LD_INT 1
46147: DEC
46148: ST_TO_ADDR
46149: LD_VAR 0 1
46153: PUSH
46154: FOR_TO
46155: IFFALSE 46202
// begin hc_class = 18 ;
46157: LD_ADDR_OWVAR 28
46161: PUSH
46162: LD_INT 18
46164: ST_TO_ADDR
// hc_gallery =  ;
46165: LD_ADDR_OWVAR 33
46169: PUSH
46170: LD_STRING 
46172: ST_TO_ADDR
// animal := CreateHuman ;
46173: LD_ADDR_VAR 0 12
46177: PUSH
46178: CALL_OW 44
46182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46183: LD_VAR 0 12
46187: PPUSH
46188: LD_VAR 0 8
46192: PPUSH
46193: LD_INT 0
46195: PPUSH
46196: CALL 52807 0 3
// end ;
46200: GO 46154
46202: POP
46203: POP
// if tigers then
46204: LD_VAR 0 2
46208: IFFALSE 46292
// for i = 1 to tigers do
46210: LD_ADDR_VAR 0 11
46214: PUSH
46215: DOUBLE
46216: LD_INT 1
46218: DEC
46219: ST_TO_ADDR
46220: LD_VAR 0 2
46224: PUSH
46225: FOR_TO
46226: IFFALSE 46290
// begin hc_class = class_tiger ;
46228: LD_ADDR_OWVAR 28
46232: PUSH
46233: LD_INT 14
46235: ST_TO_ADDR
// hc_gallery =  ;
46236: LD_ADDR_OWVAR 33
46240: PUSH
46241: LD_STRING 
46243: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46244: LD_ADDR_OWVAR 35
46248: PUSH
46249: LD_INT 7
46251: NEG
46252: PPUSH
46253: LD_INT 7
46255: PPUSH
46256: CALL_OW 12
46260: ST_TO_ADDR
// animal := CreateHuman ;
46261: LD_ADDR_VAR 0 12
46265: PUSH
46266: CALL_OW 44
46270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46271: LD_VAR 0 12
46275: PPUSH
46276: LD_VAR 0 8
46280: PPUSH
46281: LD_INT 0
46283: PPUSH
46284: CALL 52807 0 3
// end ;
46288: GO 46225
46290: POP
46291: POP
// if apemans then
46292: LD_VAR 0 3
46296: IFFALSE 46419
// for i = 1 to apemans do
46298: LD_ADDR_VAR 0 11
46302: PUSH
46303: DOUBLE
46304: LD_INT 1
46306: DEC
46307: ST_TO_ADDR
46308: LD_VAR 0 3
46312: PUSH
46313: FOR_TO
46314: IFFALSE 46417
// begin hc_class = class_apeman ;
46316: LD_ADDR_OWVAR 28
46320: PUSH
46321: LD_INT 12
46323: ST_TO_ADDR
// hc_gallery =  ;
46324: LD_ADDR_OWVAR 33
46328: PUSH
46329: LD_STRING 
46331: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46332: LD_ADDR_OWVAR 35
46336: PUSH
46337: LD_INT 5
46339: NEG
46340: PPUSH
46341: LD_INT 5
46343: PPUSH
46344: CALL_OW 12
46348: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46349: LD_ADDR_OWVAR 31
46353: PUSH
46354: LD_INT 1
46356: PPUSH
46357: LD_INT 3
46359: PPUSH
46360: CALL_OW 12
46364: PUSH
46365: LD_INT 1
46367: PPUSH
46368: LD_INT 3
46370: PPUSH
46371: CALL_OW 12
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// animal := CreateHuman ;
46388: LD_ADDR_VAR 0 12
46392: PUSH
46393: CALL_OW 44
46397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46398: LD_VAR 0 12
46402: PPUSH
46403: LD_VAR 0 8
46407: PPUSH
46408: LD_INT 0
46410: PPUSH
46411: CALL 52807 0 3
// end ;
46415: GO 46313
46417: POP
46418: POP
// if enchidnas then
46419: LD_VAR 0 4
46423: IFFALSE 46490
// for i = 1 to enchidnas do
46425: LD_ADDR_VAR 0 11
46429: PUSH
46430: DOUBLE
46431: LD_INT 1
46433: DEC
46434: ST_TO_ADDR
46435: LD_VAR 0 4
46439: PUSH
46440: FOR_TO
46441: IFFALSE 46488
// begin hc_class = 13 ;
46443: LD_ADDR_OWVAR 28
46447: PUSH
46448: LD_INT 13
46450: ST_TO_ADDR
// hc_gallery =  ;
46451: LD_ADDR_OWVAR 33
46455: PUSH
46456: LD_STRING 
46458: ST_TO_ADDR
// animal := CreateHuman ;
46459: LD_ADDR_VAR 0 12
46463: PUSH
46464: CALL_OW 44
46468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46469: LD_VAR 0 12
46473: PPUSH
46474: LD_VAR 0 8
46478: PPUSH
46479: LD_INT 0
46481: PPUSH
46482: CALL 52807 0 3
// end ;
46486: GO 46440
46488: POP
46489: POP
// if fishes then
46490: LD_VAR 0 7
46494: IFFALSE 46561
// for i = 1 to fishes do
46496: LD_ADDR_VAR 0 11
46500: PUSH
46501: DOUBLE
46502: LD_INT 1
46504: DEC
46505: ST_TO_ADDR
46506: LD_VAR 0 7
46510: PUSH
46511: FOR_TO
46512: IFFALSE 46559
// begin hc_class = 20 ;
46514: LD_ADDR_OWVAR 28
46518: PUSH
46519: LD_INT 20
46521: ST_TO_ADDR
// hc_gallery =  ;
46522: LD_ADDR_OWVAR 33
46526: PUSH
46527: LD_STRING 
46529: ST_TO_ADDR
// animal := CreateHuman ;
46530: LD_ADDR_VAR 0 12
46534: PUSH
46535: CALL_OW 44
46539: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46540: LD_VAR 0 12
46544: PPUSH
46545: LD_VAR 0 9
46549: PPUSH
46550: LD_INT 0
46552: PPUSH
46553: CALL 52807 0 3
// end ;
46557: GO 46511
46559: POP
46560: POP
// end ;
46561: LD_VAR 0 10
46565: RET
// export function WantHeal ( sci , unit ) ; begin
46566: LD_INT 0
46568: PPUSH
// if GetTaskList ( sci ) > 0 then
46569: LD_VAR 0 1
46573: PPUSH
46574: CALL_OW 437
46578: PUSH
46579: LD_INT 0
46581: GREATER
46582: IFFALSE 46652
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46584: LD_VAR 0 1
46588: PPUSH
46589: CALL_OW 437
46593: PUSH
46594: LD_INT 1
46596: ARRAY
46597: PUSH
46598: LD_INT 1
46600: ARRAY
46601: PUSH
46602: LD_STRING l
46604: EQUAL
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 437
46615: PUSH
46616: LD_INT 1
46618: ARRAY
46619: PUSH
46620: LD_INT 4
46622: ARRAY
46623: PUSH
46624: LD_VAR 0 2
46628: EQUAL
46629: AND
46630: IFFALSE 46642
// result := true else
46632: LD_ADDR_VAR 0 3
46636: PUSH
46637: LD_INT 1
46639: ST_TO_ADDR
46640: GO 46650
// result := false ;
46642: LD_ADDR_VAR 0 3
46646: PUSH
46647: LD_INT 0
46649: ST_TO_ADDR
// end else
46650: GO 46660
// result := false ;
46652: LD_ADDR_VAR 0 3
46656: PUSH
46657: LD_INT 0
46659: ST_TO_ADDR
// end ;
46660: LD_VAR 0 3
46664: RET
// export function HealTarget ( sci ) ; begin
46665: LD_INT 0
46667: PPUSH
// if not sci then
46668: LD_VAR 0 1
46672: NOT
46673: IFFALSE 46677
// exit ;
46675: GO 46742
// result := 0 ;
46677: LD_ADDR_VAR 0 2
46681: PUSH
46682: LD_INT 0
46684: ST_TO_ADDR
// if GetTaskList ( sci ) then
46685: LD_VAR 0 1
46689: PPUSH
46690: CALL_OW 437
46694: IFFALSE 46742
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 437
46705: PUSH
46706: LD_INT 1
46708: ARRAY
46709: PUSH
46710: LD_INT 1
46712: ARRAY
46713: PUSH
46714: LD_STRING l
46716: EQUAL
46717: IFFALSE 46742
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 437
46733: PUSH
46734: LD_INT 1
46736: ARRAY
46737: PUSH
46738: LD_INT 4
46740: ARRAY
46741: ST_TO_ADDR
// end ;
46742: LD_VAR 0 2
46746: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
46747: LD_INT 0
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
46772: PPUSH
46773: PPUSH
46774: PPUSH
46775: PPUSH
46776: PPUSH
46777: PPUSH
46778: PPUSH
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
// if not list then
46783: LD_VAR 0 1
46787: NOT
46788: IFFALSE 46792
// exit ;
46790: GO 51418
// base := list [ 1 ] ;
46792: LD_ADDR_VAR 0 3
46796: PUSH
46797: LD_VAR 0 1
46801: PUSH
46802: LD_INT 1
46804: ARRAY
46805: ST_TO_ADDR
// group := list [ 2 ] ;
46806: LD_ADDR_VAR 0 4
46810: PUSH
46811: LD_VAR 0 1
46815: PUSH
46816: LD_INT 2
46818: ARRAY
46819: ST_TO_ADDR
// path := list [ 3 ] ;
46820: LD_ADDR_VAR 0 5
46824: PUSH
46825: LD_VAR 0 1
46829: PUSH
46830: LD_INT 3
46832: ARRAY
46833: ST_TO_ADDR
// flags := list [ 4 ] ;
46834: LD_ADDR_VAR 0 6
46838: PUSH
46839: LD_VAR 0 1
46843: PUSH
46844: LD_INT 4
46846: ARRAY
46847: ST_TO_ADDR
// mined := [ ] ;
46848: LD_ADDR_VAR 0 27
46852: PUSH
46853: EMPTY
46854: ST_TO_ADDR
// bombed := [ ] ;
46855: LD_ADDR_VAR 0 28
46859: PUSH
46860: EMPTY
46861: ST_TO_ADDR
// healers := [ ] ;
46862: LD_ADDR_VAR 0 31
46866: PUSH
46867: EMPTY
46868: ST_TO_ADDR
// to_heal := [ ] ;
46869: LD_ADDR_VAR 0 30
46873: PUSH
46874: EMPTY
46875: ST_TO_ADDR
// repairs := [ ] ;
46876: LD_ADDR_VAR 0 33
46880: PUSH
46881: EMPTY
46882: ST_TO_ADDR
// to_repair := [ ] ;
46883: LD_ADDR_VAR 0 32
46887: PUSH
46888: EMPTY
46889: ST_TO_ADDR
// if not group or not path then
46890: LD_VAR 0 4
46894: NOT
46895: PUSH
46896: LD_VAR 0 5
46900: NOT
46901: OR
46902: IFFALSE 46906
// exit ;
46904: GO 51418
// side := GetSide ( group [ 1 ] ) ;
46906: LD_ADDR_VAR 0 35
46910: PUSH
46911: LD_VAR 0 4
46915: PUSH
46916: LD_INT 1
46918: ARRAY
46919: PPUSH
46920: CALL_OW 255
46924: ST_TO_ADDR
// if flags then
46925: LD_VAR 0 6
46929: IFFALSE 47073
// begin f_ignore_area := flags [ 1 ] ;
46931: LD_ADDR_VAR 0 17
46935: PUSH
46936: LD_VAR 0 6
46940: PUSH
46941: LD_INT 1
46943: ARRAY
46944: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46945: LD_ADDR_VAR 0 18
46949: PUSH
46950: LD_VAR 0 6
46954: PUSH
46955: LD_INT 2
46957: ARRAY
46958: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46959: LD_ADDR_VAR 0 19
46963: PUSH
46964: LD_VAR 0 6
46968: PUSH
46969: LD_INT 3
46971: ARRAY
46972: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46973: LD_ADDR_VAR 0 20
46977: PUSH
46978: LD_VAR 0 6
46982: PUSH
46983: LD_INT 4
46985: ARRAY
46986: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46987: LD_ADDR_VAR 0 21
46991: PUSH
46992: LD_VAR 0 6
46996: PUSH
46997: LD_INT 5
46999: ARRAY
47000: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47001: LD_ADDR_VAR 0 22
47005: PUSH
47006: LD_VAR 0 6
47010: PUSH
47011: LD_INT 6
47013: ARRAY
47014: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47015: LD_ADDR_VAR 0 23
47019: PUSH
47020: LD_VAR 0 6
47024: PUSH
47025: LD_INT 7
47027: ARRAY
47028: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47029: LD_ADDR_VAR 0 24
47033: PUSH
47034: LD_VAR 0 6
47038: PUSH
47039: LD_INT 8
47041: ARRAY
47042: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47043: LD_ADDR_VAR 0 25
47047: PUSH
47048: LD_VAR 0 6
47052: PUSH
47053: LD_INT 9
47055: ARRAY
47056: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47057: LD_ADDR_VAR 0 26
47061: PUSH
47062: LD_VAR 0 6
47066: PUSH
47067: LD_INT 10
47069: ARRAY
47070: ST_TO_ADDR
// end else
47071: GO 47153
// begin f_ignore_area := false ;
47073: LD_ADDR_VAR 0 17
47077: PUSH
47078: LD_INT 0
47080: ST_TO_ADDR
// f_capture := false ;
47081: LD_ADDR_VAR 0 18
47085: PUSH
47086: LD_INT 0
47088: ST_TO_ADDR
// f_ignore_civ := false ;
47089: LD_ADDR_VAR 0 19
47093: PUSH
47094: LD_INT 0
47096: ST_TO_ADDR
// f_murder := false ;
47097: LD_ADDR_VAR 0 20
47101: PUSH
47102: LD_INT 0
47104: ST_TO_ADDR
// f_mines := false ;
47105: LD_ADDR_VAR 0 21
47109: PUSH
47110: LD_INT 0
47112: ST_TO_ADDR
// f_repair := false ;
47113: LD_ADDR_VAR 0 22
47117: PUSH
47118: LD_INT 0
47120: ST_TO_ADDR
// f_heal := false ;
47121: LD_ADDR_VAR 0 23
47125: PUSH
47126: LD_INT 0
47128: ST_TO_ADDR
// f_spacetime := false ;
47129: LD_ADDR_VAR 0 24
47133: PUSH
47134: LD_INT 0
47136: ST_TO_ADDR
// f_attack_depot := false ;
47137: LD_ADDR_VAR 0 25
47141: PUSH
47142: LD_INT 0
47144: ST_TO_ADDR
// f_crawl := false ;
47145: LD_ADDR_VAR 0 26
47149: PUSH
47150: LD_INT 0
47152: ST_TO_ADDR
// end ; if f_heal then
47153: LD_VAR 0 23
47157: IFFALSE 47184
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
47159: LD_ADDR_VAR 0 31
47163: PUSH
47164: LD_VAR 0 4
47168: PPUSH
47169: LD_INT 25
47171: PUSH
47172: LD_INT 4
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PPUSH
47179: CALL_OW 72
47183: ST_TO_ADDR
// if f_repair then
47184: LD_VAR 0 22
47188: IFFALSE 47215
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
47190: LD_ADDR_VAR 0 33
47194: PUSH
47195: LD_VAR 0 4
47199: PPUSH
47200: LD_INT 25
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PPUSH
47210: CALL_OW 72
47214: ST_TO_ADDR
// units_path := [ ] ;
47215: LD_ADDR_VAR 0 16
47219: PUSH
47220: EMPTY
47221: ST_TO_ADDR
// for i = 1 to group do
47222: LD_ADDR_VAR 0 7
47226: PUSH
47227: DOUBLE
47228: LD_INT 1
47230: DEC
47231: ST_TO_ADDR
47232: LD_VAR 0 4
47236: PUSH
47237: FOR_TO
47238: IFFALSE 47267
// units_path := Replace ( units_path , i , path ) ;
47240: LD_ADDR_VAR 0 16
47244: PUSH
47245: LD_VAR 0 16
47249: PPUSH
47250: LD_VAR 0 7
47254: PPUSH
47255: LD_VAR 0 5
47259: PPUSH
47260: CALL_OW 1
47264: ST_TO_ADDR
47265: GO 47237
47267: POP
47268: POP
// repeat for i = group downto 1 do
47269: LD_ADDR_VAR 0 7
47273: PUSH
47274: DOUBLE
47275: LD_VAR 0 4
47279: INC
47280: ST_TO_ADDR
47281: LD_INT 1
47283: PUSH
47284: FOR_DOWNTO
47285: IFFALSE 51381
// begin wait ( 5 ) ;
47287: LD_INT 5
47289: PPUSH
47290: CALL_OW 67
// tmp := [ ] ;
47294: LD_ADDR_VAR 0 14
47298: PUSH
47299: EMPTY
47300: ST_TO_ADDR
// attacking := false ;
47301: LD_ADDR_VAR 0 29
47305: PUSH
47306: LD_INT 0
47308: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
47309: LD_VAR 0 4
47313: PUSH
47314: LD_VAR 0 7
47318: ARRAY
47319: PPUSH
47320: CALL_OW 301
47324: PUSH
47325: LD_VAR 0 4
47329: PUSH
47330: LD_VAR 0 7
47334: ARRAY
47335: NOT
47336: OR
47337: IFFALSE 47446
// begin if GetType ( group [ i ] ) = unit_human then
47339: LD_VAR 0 4
47343: PUSH
47344: LD_VAR 0 7
47348: ARRAY
47349: PPUSH
47350: CALL_OW 247
47354: PUSH
47355: LD_INT 1
47357: EQUAL
47358: IFFALSE 47404
// begin to_heal := to_heal diff group [ i ] ;
47360: LD_ADDR_VAR 0 30
47364: PUSH
47365: LD_VAR 0 30
47369: PUSH
47370: LD_VAR 0 4
47374: PUSH
47375: LD_VAR 0 7
47379: ARRAY
47380: DIFF
47381: ST_TO_ADDR
// healers := healers diff group [ i ] ;
47382: LD_ADDR_VAR 0 31
47386: PUSH
47387: LD_VAR 0 31
47391: PUSH
47392: LD_VAR 0 4
47396: PUSH
47397: LD_VAR 0 7
47401: ARRAY
47402: DIFF
47403: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
47404: LD_ADDR_VAR 0 4
47408: PUSH
47409: LD_VAR 0 4
47413: PPUSH
47414: LD_VAR 0 7
47418: PPUSH
47419: CALL_OW 3
47423: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47424: LD_ADDR_VAR 0 16
47428: PUSH
47429: LD_VAR 0 16
47433: PPUSH
47434: LD_VAR 0 7
47438: PPUSH
47439: CALL_OW 3
47443: ST_TO_ADDR
// continue ;
47444: GO 47284
// end ; if f_repair then
47446: LD_VAR 0 22
47450: IFFALSE 47939
// begin if GetType ( group [ i ] ) = unit_vehicle then
47452: LD_VAR 0 4
47456: PUSH
47457: LD_VAR 0 7
47461: ARRAY
47462: PPUSH
47463: CALL_OW 247
47467: PUSH
47468: LD_INT 2
47470: EQUAL
47471: IFFALSE 47661
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
47473: LD_VAR 0 4
47477: PUSH
47478: LD_VAR 0 7
47482: ARRAY
47483: PPUSH
47484: CALL_OW 256
47488: PUSH
47489: LD_INT 700
47491: LESS
47492: PUSH
47493: LD_VAR 0 4
47497: PUSH
47498: LD_VAR 0 7
47502: ARRAY
47503: PUSH
47504: LD_VAR 0 32
47508: IN
47509: NOT
47510: AND
47511: IFFALSE 47535
// to_repair := to_repair union group [ i ] ;
47513: LD_ADDR_VAR 0 32
47517: PUSH
47518: LD_VAR 0 32
47522: PUSH
47523: LD_VAR 0 4
47527: PUSH
47528: LD_VAR 0 7
47532: ARRAY
47533: UNION
47534: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
47535: LD_VAR 0 4
47539: PUSH
47540: LD_VAR 0 7
47544: ARRAY
47545: PPUSH
47546: CALL_OW 256
47550: PUSH
47551: LD_INT 1000
47553: EQUAL
47554: PUSH
47555: LD_VAR 0 4
47559: PUSH
47560: LD_VAR 0 7
47564: ARRAY
47565: PUSH
47566: LD_VAR 0 32
47570: IN
47571: AND
47572: IFFALSE 47596
// to_repair := to_repair diff group [ i ] ;
47574: LD_ADDR_VAR 0 32
47578: PUSH
47579: LD_VAR 0 32
47583: PUSH
47584: LD_VAR 0 4
47588: PUSH
47589: LD_VAR 0 7
47593: ARRAY
47594: DIFF
47595: ST_TO_ADDR
// if group [ i ] in to_repair then
47596: LD_VAR 0 4
47600: PUSH
47601: LD_VAR 0 7
47605: ARRAY
47606: PUSH
47607: LD_VAR 0 32
47611: IN
47612: IFFALSE 47659
// begin if not IsInArea ( group [ i ] , f_repair ) then
47614: LD_VAR 0 4
47618: PUSH
47619: LD_VAR 0 7
47623: ARRAY
47624: PPUSH
47625: LD_VAR 0 22
47629: PPUSH
47630: CALL_OW 308
47634: NOT
47635: IFFALSE 47657
// ComMoveToArea ( group [ i ] , f_repair ) ;
47637: LD_VAR 0 4
47641: PUSH
47642: LD_VAR 0 7
47646: ARRAY
47647: PPUSH
47648: LD_VAR 0 22
47652: PPUSH
47653: CALL_OW 113
// continue ;
47657: GO 47284
// end ; end else
47659: GO 47939
// if group [ i ] in repairs then
47661: LD_VAR 0 4
47665: PUSH
47666: LD_VAR 0 7
47670: ARRAY
47671: PUSH
47672: LD_VAR 0 33
47676: IN
47677: IFFALSE 47939
// begin if IsInUnit ( group [ i ] ) then
47679: LD_VAR 0 4
47683: PUSH
47684: LD_VAR 0 7
47688: ARRAY
47689: PPUSH
47690: CALL_OW 310
47694: IFFALSE 47762
// begin z := IsInUnit ( group [ i ] ) ;
47696: LD_ADDR_VAR 0 13
47700: PUSH
47701: LD_VAR 0 4
47705: PUSH
47706: LD_VAR 0 7
47710: ARRAY
47711: PPUSH
47712: CALL_OW 310
47716: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
47717: LD_VAR 0 13
47721: PUSH
47722: LD_VAR 0 32
47726: IN
47727: PUSH
47728: LD_VAR 0 13
47732: PPUSH
47733: LD_VAR 0 22
47737: PPUSH
47738: CALL_OW 308
47742: AND
47743: IFFALSE 47760
// ComExitVehicle ( group [ i ] ) ;
47745: LD_VAR 0 4
47749: PUSH
47750: LD_VAR 0 7
47754: ARRAY
47755: PPUSH
47756: CALL_OW 121
// end else
47760: GO 47939
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
47762: LD_ADDR_VAR 0 13
47766: PUSH
47767: LD_VAR 0 4
47771: PPUSH
47772: LD_INT 95
47774: PUSH
47775: LD_VAR 0 22
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 58
47786: PUSH
47787: EMPTY
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PPUSH
47794: CALL_OW 72
47798: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
47799: LD_VAR 0 4
47803: PUSH
47804: LD_VAR 0 7
47808: ARRAY
47809: PPUSH
47810: CALL_OW 314
47814: NOT
47815: IFFALSE 47937
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
47817: LD_ADDR_VAR 0 10
47821: PUSH
47822: LD_VAR 0 13
47826: PPUSH
47827: LD_VAR 0 4
47831: PUSH
47832: LD_VAR 0 7
47836: ARRAY
47837: PPUSH
47838: CALL_OW 74
47842: ST_TO_ADDR
// if not x then
47843: LD_VAR 0 10
47847: NOT
47848: IFFALSE 47852
// continue ;
47850: GO 47284
// if GetLives ( x ) < 1000 then
47852: LD_VAR 0 10
47856: PPUSH
47857: CALL_OW 256
47861: PUSH
47862: LD_INT 1000
47864: LESS
47865: IFFALSE 47889
// ComRepairVehicle ( group [ i ] , x ) else
47867: LD_VAR 0 4
47871: PUSH
47872: LD_VAR 0 7
47876: ARRAY
47877: PPUSH
47878: LD_VAR 0 10
47882: PPUSH
47883: CALL_OW 129
47887: GO 47937
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47889: LD_VAR 0 23
47893: PUSH
47894: LD_VAR 0 4
47898: PUSH
47899: LD_VAR 0 7
47903: ARRAY
47904: PPUSH
47905: CALL_OW 256
47909: PUSH
47910: LD_INT 1000
47912: LESS
47913: AND
47914: NOT
47915: IFFALSE 47937
// ComEnterUnit ( group [ i ] , x ) ;
47917: LD_VAR 0 4
47921: PUSH
47922: LD_VAR 0 7
47926: ARRAY
47927: PPUSH
47928: LD_VAR 0 10
47932: PPUSH
47933: CALL_OW 120
// end ; continue ;
47937: GO 47284
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47939: LD_VAR 0 23
47943: PUSH
47944: LD_VAR 0 4
47948: PUSH
47949: LD_VAR 0 7
47953: ARRAY
47954: PPUSH
47955: CALL_OW 247
47959: PUSH
47960: LD_INT 1
47962: EQUAL
47963: AND
47964: IFFALSE 48442
// begin if group [ i ] in healers then
47966: LD_VAR 0 4
47970: PUSH
47971: LD_VAR 0 7
47975: ARRAY
47976: PUSH
47977: LD_VAR 0 31
47981: IN
47982: IFFALSE 48255
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47984: LD_VAR 0 4
47988: PUSH
47989: LD_VAR 0 7
47993: ARRAY
47994: PPUSH
47995: LD_VAR 0 23
47999: PPUSH
48000: CALL_OW 308
48004: NOT
48005: PUSH
48006: LD_VAR 0 4
48010: PUSH
48011: LD_VAR 0 7
48015: ARRAY
48016: PPUSH
48017: CALL_OW 314
48021: NOT
48022: AND
48023: IFFALSE 48047
// ComMoveToArea ( group [ i ] , f_heal ) else
48025: LD_VAR 0 4
48029: PUSH
48030: LD_VAR 0 7
48034: ARRAY
48035: PPUSH
48036: LD_VAR 0 23
48040: PPUSH
48041: CALL_OW 113
48045: GO 48253
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
48047: LD_VAR 0 4
48051: PUSH
48052: LD_VAR 0 7
48056: ARRAY
48057: PPUSH
48058: CALL 46665 0 1
48062: PPUSH
48063: CALL_OW 256
48067: PUSH
48068: LD_INT 1000
48070: EQUAL
48071: IFFALSE 48090
// ComStop ( group [ i ] ) else
48073: LD_VAR 0 4
48077: PUSH
48078: LD_VAR 0 7
48082: ARRAY
48083: PPUSH
48084: CALL_OW 141
48088: GO 48253
// if not HasTask ( group [ i ] ) and to_heal then
48090: LD_VAR 0 4
48094: PUSH
48095: LD_VAR 0 7
48099: ARRAY
48100: PPUSH
48101: CALL_OW 314
48105: NOT
48106: PUSH
48107: LD_VAR 0 30
48111: AND
48112: IFFALSE 48253
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
48114: LD_ADDR_VAR 0 13
48118: PUSH
48119: LD_VAR 0 30
48123: PPUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 54
48129: PUSH
48130: EMPTY
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PPUSH
48137: CALL_OW 72
48141: PPUSH
48142: LD_VAR 0 4
48146: PUSH
48147: LD_VAR 0 7
48151: ARRAY
48152: PPUSH
48153: CALL_OW 74
48157: ST_TO_ADDR
// if z then
48158: LD_VAR 0 13
48162: IFFALSE 48253
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
48164: LD_INT 91
48166: PUSH
48167: LD_VAR 0 13
48171: PUSH
48172: LD_INT 10
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 81
48182: PUSH
48183: LD_VAR 0 13
48187: PPUSH
48188: CALL_OW 255
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PPUSH
48201: CALL_OW 69
48205: PUSH
48206: LD_INT 0
48208: EQUAL
48209: IFFALSE 48233
// ComHeal ( group [ i ] , z ) else
48211: LD_VAR 0 4
48215: PUSH
48216: LD_VAR 0 7
48220: ARRAY
48221: PPUSH
48222: LD_VAR 0 13
48226: PPUSH
48227: CALL_OW 128
48231: GO 48253
// ComMoveToArea ( group [ i ] , f_heal ) ;
48233: LD_VAR 0 4
48237: PUSH
48238: LD_VAR 0 7
48242: ARRAY
48243: PPUSH
48244: LD_VAR 0 23
48248: PPUSH
48249: CALL_OW 113
// end ; continue ;
48253: GO 47284
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
48255: LD_VAR 0 4
48259: PUSH
48260: LD_VAR 0 7
48264: ARRAY
48265: PPUSH
48266: CALL_OW 256
48270: PUSH
48271: LD_INT 700
48273: LESS
48274: PUSH
48275: LD_VAR 0 4
48279: PUSH
48280: LD_VAR 0 7
48284: ARRAY
48285: PUSH
48286: LD_VAR 0 30
48290: IN
48291: NOT
48292: AND
48293: IFFALSE 48317
// to_heal := to_heal union group [ i ] ;
48295: LD_ADDR_VAR 0 30
48299: PUSH
48300: LD_VAR 0 30
48304: PUSH
48305: LD_VAR 0 4
48309: PUSH
48310: LD_VAR 0 7
48314: ARRAY
48315: UNION
48316: ST_TO_ADDR
// if group [ i ] in to_heal then
48317: LD_VAR 0 4
48321: PUSH
48322: LD_VAR 0 7
48326: ARRAY
48327: PUSH
48328: LD_VAR 0 30
48332: IN
48333: IFFALSE 48442
// begin if GetLives ( group [ i ] ) = 1000 then
48335: LD_VAR 0 4
48339: PUSH
48340: LD_VAR 0 7
48344: ARRAY
48345: PPUSH
48346: CALL_OW 256
48350: PUSH
48351: LD_INT 1000
48353: EQUAL
48354: IFFALSE 48380
// to_heal := to_heal diff group [ i ] else
48356: LD_ADDR_VAR 0 30
48360: PUSH
48361: LD_VAR 0 30
48365: PUSH
48366: LD_VAR 0 4
48370: PUSH
48371: LD_VAR 0 7
48375: ARRAY
48376: DIFF
48377: ST_TO_ADDR
48378: GO 48442
// begin if not IsInArea ( group [ i ] , to_heal ) then
48380: LD_VAR 0 4
48384: PUSH
48385: LD_VAR 0 7
48389: ARRAY
48390: PPUSH
48391: LD_VAR 0 30
48395: PPUSH
48396: CALL_OW 308
48400: NOT
48401: IFFALSE 48425
// ComMoveToArea ( group [ i ] , f_heal ) else
48403: LD_VAR 0 4
48407: PUSH
48408: LD_VAR 0 7
48412: ARRAY
48413: PPUSH
48414: LD_VAR 0 23
48418: PPUSH
48419: CALL_OW 113
48423: GO 48440
// ComHold ( group [ i ] ) ;
48425: LD_VAR 0 4
48429: PUSH
48430: LD_VAR 0 7
48434: ARRAY
48435: PPUSH
48436: CALL_OW 140
// continue ;
48440: GO 47284
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48442: LD_VAR 0 4
48446: PUSH
48447: LD_VAR 0 7
48451: ARRAY
48452: PPUSH
48453: LD_INT 10
48455: PPUSH
48456: CALL 45062 0 2
48460: NOT
48461: PUSH
48462: LD_VAR 0 16
48466: PUSH
48467: LD_VAR 0 7
48471: ARRAY
48472: PUSH
48473: EMPTY
48474: EQUAL
48475: NOT
48476: AND
48477: IFFALSE 48743
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48479: LD_VAR 0 4
48483: PUSH
48484: LD_VAR 0 7
48488: ARRAY
48489: PPUSH
48490: CALL_OW 262
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: IN
48505: IFFALSE 48546
// if GetFuel ( group [ i ] ) < 10 then
48507: LD_VAR 0 4
48511: PUSH
48512: LD_VAR 0 7
48516: ARRAY
48517: PPUSH
48518: CALL_OW 261
48522: PUSH
48523: LD_INT 10
48525: LESS
48526: IFFALSE 48546
// SetFuel ( group [ i ] , 12 ) ;
48528: LD_VAR 0 4
48532: PUSH
48533: LD_VAR 0 7
48537: ARRAY
48538: PPUSH
48539: LD_INT 12
48541: PPUSH
48542: CALL_OW 240
// if units_path [ i ] then
48546: LD_VAR 0 16
48550: PUSH
48551: LD_VAR 0 7
48555: ARRAY
48556: IFFALSE 48741
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48558: LD_VAR 0 4
48562: PUSH
48563: LD_VAR 0 7
48567: ARRAY
48568: PPUSH
48569: LD_VAR 0 16
48573: PUSH
48574: LD_VAR 0 7
48578: ARRAY
48579: PUSH
48580: LD_INT 1
48582: ARRAY
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: PPUSH
48588: LD_VAR 0 16
48592: PUSH
48593: LD_VAR 0 7
48597: ARRAY
48598: PUSH
48599: LD_INT 1
48601: ARRAY
48602: PUSH
48603: LD_INT 2
48605: ARRAY
48606: PPUSH
48607: CALL_OW 297
48611: PUSH
48612: LD_INT 6
48614: GREATER
48615: IFFALSE 48690
// begin if not HasTask ( group [ i ] ) then
48617: LD_VAR 0 4
48621: PUSH
48622: LD_VAR 0 7
48626: ARRAY
48627: PPUSH
48628: CALL_OW 314
48632: NOT
48633: IFFALSE 48688
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48635: LD_VAR 0 4
48639: PUSH
48640: LD_VAR 0 7
48644: ARRAY
48645: PPUSH
48646: LD_VAR 0 16
48650: PUSH
48651: LD_VAR 0 7
48655: ARRAY
48656: PUSH
48657: LD_INT 1
48659: ARRAY
48660: PUSH
48661: LD_INT 1
48663: ARRAY
48664: PPUSH
48665: LD_VAR 0 16
48669: PUSH
48670: LD_VAR 0 7
48674: ARRAY
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PUSH
48680: LD_INT 2
48682: ARRAY
48683: PPUSH
48684: CALL_OW 114
// end else
48688: GO 48741
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48690: LD_ADDR_VAR 0 15
48694: PUSH
48695: LD_VAR 0 16
48699: PUSH
48700: LD_VAR 0 7
48704: ARRAY
48705: PPUSH
48706: LD_INT 1
48708: PPUSH
48709: CALL_OW 3
48713: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48714: LD_ADDR_VAR 0 16
48718: PUSH
48719: LD_VAR 0 16
48723: PPUSH
48724: LD_VAR 0 7
48728: PPUSH
48729: LD_VAR 0 15
48733: PPUSH
48734: CALL_OW 1
48738: ST_TO_ADDR
// continue ;
48739: GO 47284
// end ; end ; end else
48741: GO 51379
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48743: LD_ADDR_VAR 0 14
48747: PUSH
48748: LD_INT 81
48750: PUSH
48751: LD_VAR 0 4
48755: PUSH
48756: LD_VAR 0 7
48760: ARRAY
48761: PPUSH
48762: CALL_OW 255
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PPUSH
48771: CALL_OW 69
48775: ST_TO_ADDR
// if not tmp then
48776: LD_VAR 0 14
48780: NOT
48781: IFFALSE 48785
// continue ;
48783: GO 47284
// if f_ignore_area then
48785: LD_VAR 0 17
48789: IFFALSE 48877
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48791: LD_ADDR_VAR 0 15
48795: PUSH
48796: LD_VAR 0 14
48800: PPUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 92
48806: PUSH
48807: LD_VAR 0 17
48811: PUSH
48812: LD_INT 1
48814: ARRAY
48815: PUSH
48816: LD_VAR 0 17
48820: PUSH
48821: LD_INT 2
48823: ARRAY
48824: PUSH
48825: LD_VAR 0 17
48829: PUSH
48830: LD_INT 3
48832: ARRAY
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PPUSH
48844: CALL_OW 72
48848: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48849: LD_VAR 0 14
48853: PUSH
48854: LD_VAR 0 15
48858: DIFF
48859: IFFALSE 48877
// tmp := tmp diff tmp2 ;
48861: LD_ADDR_VAR 0 14
48865: PUSH
48866: LD_VAR 0 14
48870: PUSH
48871: LD_VAR 0 15
48875: DIFF
48876: ST_TO_ADDR
// end ; if not f_murder then
48877: LD_VAR 0 20
48881: NOT
48882: IFFALSE 48940
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48884: LD_ADDR_VAR 0 15
48888: PUSH
48889: LD_VAR 0 14
48893: PPUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 50
48899: PUSH
48900: EMPTY
48901: LIST
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PPUSH
48907: CALL_OW 72
48911: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48912: LD_VAR 0 14
48916: PUSH
48917: LD_VAR 0 15
48921: DIFF
48922: IFFALSE 48940
// tmp := tmp diff tmp2 ;
48924: LD_ADDR_VAR 0 14
48928: PUSH
48929: LD_VAR 0 14
48933: PUSH
48934: LD_VAR 0 15
48938: DIFF
48939: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48940: LD_ADDR_VAR 0 14
48944: PUSH
48945: LD_VAR 0 4
48949: PUSH
48950: LD_VAR 0 7
48954: ARRAY
48955: PPUSH
48956: LD_VAR 0 14
48960: PPUSH
48961: LD_INT 1
48963: PPUSH
48964: LD_INT 1
48966: PPUSH
48967: CALL 18705 0 4
48971: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48972: LD_VAR 0 4
48976: PUSH
48977: LD_VAR 0 7
48981: ARRAY
48982: PPUSH
48983: CALL_OW 257
48987: PUSH
48988: LD_INT 1
48990: EQUAL
48991: IFFALSE 49439
// begin if WantPlant ( group [ i ] ) then
48993: LD_VAR 0 4
48997: PUSH
48998: LD_VAR 0 7
49002: ARRAY
49003: PPUSH
49004: CALL 18206 0 1
49008: IFFALSE 49012
// continue ;
49010: GO 47284
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
49012: LD_VAR 0 18
49016: PUSH
49017: LD_VAR 0 4
49021: PUSH
49022: LD_VAR 0 7
49026: ARRAY
49027: PPUSH
49028: CALL_OW 310
49032: NOT
49033: AND
49034: PUSH
49035: LD_VAR 0 14
49039: PUSH
49040: LD_INT 1
49042: ARRAY
49043: PUSH
49044: LD_VAR 0 14
49048: PPUSH
49049: LD_INT 21
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 58
49061: PUSH
49062: EMPTY
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PPUSH
49069: CALL_OW 72
49073: IN
49074: AND
49075: IFFALSE 49111
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
49077: LD_VAR 0 4
49081: PUSH
49082: LD_VAR 0 7
49086: ARRAY
49087: PPUSH
49088: LD_VAR 0 14
49092: PUSH
49093: LD_INT 1
49095: ARRAY
49096: PPUSH
49097: CALL_OW 120
// attacking := true ;
49101: LD_ADDR_VAR 0 29
49105: PUSH
49106: LD_INT 1
49108: ST_TO_ADDR
// continue ;
49109: GO 47284
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
49111: LD_VAR 0 26
49115: PUSH
49116: LD_VAR 0 4
49120: PUSH
49121: LD_VAR 0 7
49125: ARRAY
49126: PPUSH
49127: CALL_OW 257
49131: PUSH
49132: LD_INT 1
49134: EQUAL
49135: AND
49136: PUSH
49137: LD_VAR 0 4
49141: PUSH
49142: LD_VAR 0 7
49146: ARRAY
49147: PPUSH
49148: CALL_OW 256
49152: PUSH
49153: LD_INT 800
49155: LESS
49156: AND
49157: PUSH
49158: LD_VAR 0 4
49162: PUSH
49163: LD_VAR 0 7
49167: ARRAY
49168: PPUSH
49169: CALL_OW 318
49173: NOT
49174: AND
49175: IFFALSE 49192
// ComCrawl ( group [ i ] ) ;
49177: LD_VAR 0 4
49181: PUSH
49182: LD_VAR 0 7
49186: ARRAY
49187: PPUSH
49188: CALL_OW 137
// if f_mines then
49192: LD_VAR 0 21
49196: IFFALSE 49439
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
49198: LD_VAR 0 14
49202: PUSH
49203: LD_INT 1
49205: ARRAY
49206: PPUSH
49207: CALL_OW 247
49211: PUSH
49212: LD_INT 3
49214: EQUAL
49215: PUSH
49216: LD_VAR 0 14
49220: PUSH
49221: LD_INT 1
49223: ARRAY
49224: PUSH
49225: LD_VAR 0 27
49229: IN
49230: NOT
49231: AND
49232: IFFALSE 49439
// begin x := GetX ( tmp [ 1 ] ) ;
49234: LD_ADDR_VAR 0 10
49238: PUSH
49239: LD_VAR 0 14
49243: PUSH
49244: LD_INT 1
49246: ARRAY
49247: PPUSH
49248: CALL_OW 250
49252: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
49253: LD_ADDR_VAR 0 11
49257: PUSH
49258: LD_VAR 0 14
49262: PUSH
49263: LD_INT 1
49265: ARRAY
49266: PPUSH
49267: CALL_OW 251
49271: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
49272: LD_ADDR_VAR 0 12
49276: PUSH
49277: LD_VAR 0 4
49281: PUSH
49282: LD_VAR 0 7
49286: ARRAY
49287: PPUSH
49288: CALL 45147 0 1
49292: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49293: LD_VAR 0 4
49297: PUSH
49298: LD_VAR 0 7
49302: ARRAY
49303: PPUSH
49304: LD_VAR 0 10
49308: PPUSH
49309: LD_VAR 0 11
49313: PPUSH
49314: LD_VAR 0 14
49318: PUSH
49319: LD_INT 1
49321: ARRAY
49322: PPUSH
49323: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49327: LD_VAR 0 4
49331: PUSH
49332: LD_VAR 0 7
49336: ARRAY
49337: PPUSH
49338: LD_VAR 0 10
49342: PPUSH
49343: LD_VAR 0 12
49347: PPUSH
49348: LD_INT 7
49350: PPUSH
49351: CALL_OW 272
49355: PPUSH
49356: LD_VAR 0 11
49360: PPUSH
49361: LD_VAR 0 12
49365: PPUSH
49366: LD_INT 7
49368: PPUSH
49369: CALL_OW 273
49373: PPUSH
49374: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49378: LD_VAR 0 4
49382: PUSH
49383: LD_VAR 0 7
49387: ARRAY
49388: PPUSH
49389: LD_INT 71
49391: PPUSH
49392: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49396: LD_ADDR_VAR 0 27
49400: PUSH
49401: LD_VAR 0 27
49405: PPUSH
49406: LD_VAR 0 27
49410: PUSH
49411: LD_INT 1
49413: PLUS
49414: PPUSH
49415: LD_VAR 0 14
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: PPUSH
49424: CALL_OW 1
49428: ST_TO_ADDR
// attacking := true ;
49429: LD_ADDR_VAR 0 29
49433: PUSH
49434: LD_INT 1
49436: ST_TO_ADDR
// continue ;
49437: GO 47284
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49439: LD_VAR 0 4
49443: PUSH
49444: LD_VAR 0 7
49448: ARRAY
49449: PPUSH
49450: CALL_OW 257
49454: PUSH
49455: LD_INT 17
49457: EQUAL
49458: PUSH
49459: LD_VAR 0 4
49463: PUSH
49464: LD_VAR 0 7
49468: ARRAY
49469: PPUSH
49470: CALL_OW 110
49474: PUSH
49475: LD_INT 71
49477: EQUAL
49478: NOT
49479: AND
49480: IFFALSE 49626
// begin attacking := false ;
49482: LD_ADDR_VAR 0 29
49486: PUSH
49487: LD_INT 0
49489: ST_TO_ADDR
// k := 5 ;
49490: LD_ADDR_VAR 0 9
49494: PUSH
49495: LD_INT 5
49497: ST_TO_ADDR
// if tmp < k then
49498: LD_VAR 0 14
49502: PUSH
49503: LD_VAR 0 9
49507: LESS
49508: IFFALSE 49520
// k := tmp ;
49510: LD_ADDR_VAR 0 9
49514: PUSH
49515: LD_VAR 0 14
49519: ST_TO_ADDR
// for j = 1 to k do
49520: LD_ADDR_VAR 0 8
49524: PUSH
49525: DOUBLE
49526: LD_INT 1
49528: DEC
49529: ST_TO_ADDR
49530: LD_VAR 0 9
49534: PUSH
49535: FOR_TO
49536: IFFALSE 49624
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49538: LD_VAR 0 14
49542: PUSH
49543: LD_VAR 0 8
49547: ARRAY
49548: PUSH
49549: LD_VAR 0 14
49553: PPUSH
49554: LD_INT 58
49556: PUSH
49557: EMPTY
49558: LIST
49559: PPUSH
49560: CALL_OW 72
49564: IN
49565: NOT
49566: IFFALSE 49622
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49568: LD_VAR 0 4
49572: PUSH
49573: LD_VAR 0 7
49577: ARRAY
49578: PPUSH
49579: LD_VAR 0 14
49583: PUSH
49584: LD_VAR 0 8
49588: ARRAY
49589: PPUSH
49590: CALL_OW 115
// attacking := true ;
49594: LD_ADDR_VAR 0 29
49598: PUSH
49599: LD_INT 1
49601: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49602: LD_VAR 0 4
49606: PUSH
49607: LD_VAR 0 7
49611: ARRAY
49612: PPUSH
49613: LD_INT 71
49615: PPUSH
49616: CALL_OW 109
// continue ;
49620: GO 49535
// end ; end ;
49622: GO 49535
49624: POP
49625: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49626: LD_VAR 0 4
49630: PUSH
49631: LD_VAR 0 7
49635: ARRAY
49636: PPUSH
49637: CALL_OW 257
49641: PUSH
49642: LD_INT 8
49644: EQUAL
49645: PUSH
49646: LD_VAR 0 4
49650: PUSH
49651: LD_VAR 0 7
49655: ARRAY
49656: PPUSH
49657: CALL_OW 264
49661: PUSH
49662: LD_INT 28
49664: PUSH
49665: LD_INT 45
49667: PUSH
49668: LD_INT 7
49670: PUSH
49671: LD_INT 47
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: IN
49680: OR
49681: IFFALSE 49911
// begin attacking := false ;
49683: LD_ADDR_VAR 0 29
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49691: LD_VAR 0 14
49695: PUSH
49696: LD_INT 1
49698: ARRAY
49699: PPUSH
49700: CALL_OW 266
49704: PUSH
49705: LD_INT 32
49707: PUSH
49708: LD_INT 31
49710: PUSH
49711: LD_INT 33
49713: PUSH
49714: LD_INT 4
49716: PUSH
49717: LD_INT 5
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: IN
49727: IFFALSE 49911
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49729: LD_ADDR_VAR 0 9
49733: PUSH
49734: LD_VAR 0 14
49738: PUSH
49739: LD_INT 1
49741: ARRAY
49742: PPUSH
49743: CALL_OW 266
49747: PPUSH
49748: LD_VAR 0 14
49752: PUSH
49753: LD_INT 1
49755: ARRAY
49756: PPUSH
49757: CALL_OW 250
49761: PPUSH
49762: LD_VAR 0 14
49766: PUSH
49767: LD_INT 1
49769: ARRAY
49770: PPUSH
49771: CALL_OW 251
49775: PPUSH
49776: LD_VAR 0 14
49780: PUSH
49781: LD_INT 1
49783: ARRAY
49784: PPUSH
49785: CALL_OW 254
49789: PPUSH
49790: LD_VAR 0 14
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: PPUSH
49799: CALL_OW 248
49803: PPUSH
49804: LD_INT 0
49806: PPUSH
49807: CALL 26517 0 6
49811: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49812: LD_ADDR_VAR 0 8
49816: PUSH
49817: LD_VAR 0 4
49821: PUSH
49822: LD_VAR 0 7
49826: ARRAY
49827: PPUSH
49828: LD_VAR 0 9
49832: PPUSH
49833: CALL 45210 0 2
49837: ST_TO_ADDR
// if j then
49838: LD_VAR 0 8
49842: IFFALSE 49911
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49844: LD_VAR 0 8
49848: PUSH
49849: LD_INT 1
49851: ARRAY
49852: PPUSH
49853: LD_VAR 0 8
49857: PUSH
49858: LD_INT 2
49860: ARRAY
49861: PPUSH
49862: CALL_OW 488
49866: IFFALSE 49911
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49868: LD_VAR 0 4
49872: PUSH
49873: LD_VAR 0 7
49877: ARRAY
49878: PPUSH
49879: LD_VAR 0 8
49883: PUSH
49884: LD_INT 1
49886: ARRAY
49887: PPUSH
49888: LD_VAR 0 8
49892: PUSH
49893: LD_INT 2
49895: ARRAY
49896: PPUSH
49897: CALL_OW 116
// attacking := true ;
49901: LD_ADDR_VAR 0 29
49905: PUSH
49906: LD_INT 1
49908: ST_TO_ADDR
// continue ;
49909: GO 47284
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49911: LD_VAR 0 4
49915: PUSH
49916: LD_VAR 0 7
49920: ARRAY
49921: PPUSH
49922: CALL_OW 265
49926: PUSH
49927: LD_INT 11
49929: EQUAL
49930: IFFALSE 50208
// begin k := 10 ;
49932: LD_ADDR_VAR 0 9
49936: PUSH
49937: LD_INT 10
49939: ST_TO_ADDR
// x := 0 ;
49940: LD_ADDR_VAR 0 10
49944: PUSH
49945: LD_INT 0
49947: ST_TO_ADDR
// if tmp < k then
49948: LD_VAR 0 14
49952: PUSH
49953: LD_VAR 0 9
49957: LESS
49958: IFFALSE 49970
// k := tmp ;
49960: LD_ADDR_VAR 0 9
49964: PUSH
49965: LD_VAR 0 14
49969: ST_TO_ADDR
// for j = k downto 1 do
49970: LD_ADDR_VAR 0 8
49974: PUSH
49975: DOUBLE
49976: LD_VAR 0 9
49980: INC
49981: ST_TO_ADDR
49982: LD_INT 1
49984: PUSH
49985: FOR_DOWNTO
49986: IFFALSE 50061
// begin if GetType ( tmp [ j ] ) = unit_human then
49988: LD_VAR 0 14
49992: PUSH
49993: LD_VAR 0 8
49997: ARRAY
49998: PPUSH
49999: CALL_OW 247
50003: PUSH
50004: LD_INT 1
50006: EQUAL
50007: IFFALSE 50059
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
50009: LD_VAR 0 4
50013: PUSH
50014: LD_VAR 0 7
50018: ARRAY
50019: PPUSH
50020: LD_VAR 0 14
50024: PUSH
50025: LD_VAR 0 8
50029: ARRAY
50030: PPUSH
50031: CALL 45481 0 2
// x := tmp [ j ] ;
50035: LD_ADDR_VAR 0 10
50039: PUSH
50040: LD_VAR 0 14
50044: PUSH
50045: LD_VAR 0 8
50049: ARRAY
50050: ST_TO_ADDR
// attacking := true ;
50051: LD_ADDR_VAR 0 29
50055: PUSH
50056: LD_INT 1
50058: ST_TO_ADDR
// end ; end ;
50059: GO 49985
50061: POP
50062: POP
// if not x then
50063: LD_VAR 0 10
50067: NOT
50068: IFFALSE 50208
// begin attacking := true ;
50070: LD_ADDR_VAR 0 29
50074: PUSH
50075: LD_INT 1
50077: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
50078: LD_VAR 0 4
50082: PUSH
50083: LD_VAR 0 7
50087: ARRAY
50088: PPUSH
50089: CALL_OW 250
50093: PPUSH
50094: LD_VAR 0 4
50098: PUSH
50099: LD_VAR 0 7
50103: ARRAY
50104: PPUSH
50105: CALL_OW 251
50109: PPUSH
50110: CALL_OW 546
50114: PUSH
50115: LD_INT 2
50117: ARRAY
50118: PUSH
50119: LD_VAR 0 14
50123: PUSH
50124: LD_INT 1
50126: ARRAY
50127: PPUSH
50128: CALL_OW 250
50132: PPUSH
50133: LD_VAR 0 14
50137: PUSH
50138: LD_INT 1
50140: ARRAY
50141: PPUSH
50142: CALL_OW 251
50146: PPUSH
50147: CALL_OW 546
50151: PUSH
50152: LD_INT 2
50154: ARRAY
50155: EQUAL
50156: IFFALSE 50184
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
50158: LD_VAR 0 4
50162: PUSH
50163: LD_VAR 0 7
50167: ARRAY
50168: PPUSH
50169: LD_VAR 0 14
50173: PUSH
50174: LD_INT 1
50176: ARRAY
50177: PPUSH
50178: CALL 45481 0 2
50182: GO 50208
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50184: LD_VAR 0 4
50188: PUSH
50189: LD_VAR 0 7
50193: ARRAY
50194: PPUSH
50195: LD_VAR 0 14
50199: PUSH
50200: LD_INT 1
50202: ARRAY
50203: PPUSH
50204: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
50208: LD_VAR 0 4
50212: PUSH
50213: LD_VAR 0 7
50217: ARRAY
50218: PPUSH
50219: CALL_OW 264
50223: PUSH
50224: LD_INT 29
50226: EQUAL
50227: IFFALSE 50593
// begin if WantsToAttack ( group [ i ] ) in bombed then
50229: LD_VAR 0 4
50233: PUSH
50234: LD_VAR 0 7
50238: ARRAY
50239: PPUSH
50240: CALL_OW 319
50244: PUSH
50245: LD_VAR 0 28
50249: IN
50250: IFFALSE 50254
// continue ;
50252: GO 47284
// k := 8 ;
50254: LD_ADDR_VAR 0 9
50258: PUSH
50259: LD_INT 8
50261: ST_TO_ADDR
// x := 0 ;
50262: LD_ADDR_VAR 0 10
50266: PUSH
50267: LD_INT 0
50269: ST_TO_ADDR
// if tmp < k then
50270: LD_VAR 0 14
50274: PUSH
50275: LD_VAR 0 9
50279: LESS
50280: IFFALSE 50292
// k := tmp ;
50282: LD_ADDR_VAR 0 9
50286: PUSH
50287: LD_VAR 0 14
50291: ST_TO_ADDR
// for j = 1 to k do
50292: LD_ADDR_VAR 0 8
50296: PUSH
50297: DOUBLE
50298: LD_INT 1
50300: DEC
50301: ST_TO_ADDR
50302: LD_VAR 0 9
50306: PUSH
50307: FOR_TO
50308: IFFALSE 50440
// begin if GetType ( tmp [ j ] ) = unit_building then
50310: LD_VAR 0 14
50314: PUSH
50315: LD_VAR 0 8
50319: ARRAY
50320: PPUSH
50321: CALL_OW 247
50325: PUSH
50326: LD_INT 3
50328: EQUAL
50329: IFFALSE 50438
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50331: LD_VAR 0 14
50335: PUSH
50336: LD_VAR 0 8
50340: ARRAY
50341: PUSH
50342: LD_VAR 0 28
50346: IN
50347: NOT
50348: PUSH
50349: LD_VAR 0 14
50353: PUSH
50354: LD_VAR 0 8
50358: ARRAY
50359: PPUSH
50360: CALL_OW 313
50364: AND
50365: IFFALSE 50438
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50367: LD_VAR 0 4
50371: PUSH
50372: LD_VAR 0 7
50376: ARRAY
50377: PPUSH
50378: LD_VAR 0 14
50382: PUSH
50383: LD_VAR 0 8
50387: ARRAY
50388: PPUSH
50389: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50393: LD_ADDR_VAR 0 28
50397: PUSH
50398: LD_VAR 0 28
50402: PPUSH
50403: LD_VAR 0 28
50407: PUSH
50408: LD_INT 1
50410: PLUS
50411: PPUSH
50412: LD_VAR 0 14
50416: PUSH
50417: LD_VAR 0 8
50421: ARRAY
50422: PPUSH
50423: CALL_OW 1
50427: ST_TO_ADDR
// attacking := true ;
50428: LD_ADDR_VAR 0 29
50432: PUSH
50433: LD_INT 1
50435: ST_TO_ADDR
// break ;
50436: GO 50440
// end ; end ;
50438: GO 50307
50440: POP
50441: POP
// if not attacking and f_attack_depot then
50442: LD_VAR 0 29
50446: NOT
50447: PUSH
50448: LD_VAR 0 25
50452: AND
50453: IFFALSE 50548
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50455: LD_ADDR_VAR 0 13
50459: PUSH
50460: LD_VAR 0 14
50464: PPUSH
50465: LD_INT 2
50467: PUSH
50468: LD_INT 30
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 30
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: PPUSH
50493: CALL_OW 72
50497: ST_TO_ADDR
// if z then
50498: LD_VAR 0 13
50502: IFFALSE 50548
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50504: LD_VAR 0 4
50508: PUSH
50509: LD_VAR 0 7
50513: ARRAY
50514: PPUSH
50515: LD_VAR 0 13
50519: PPUSH
50520: LD_VAR 0 4
50524: PUSH
50525: LD_VAR 0 7
50529: ARRAY
50530: PPUSH
50531: CALL_OW 74
50535: PPUSH
50536: CALL_OW 115
// attacking := true ;
50540: LD_ADDR_VAR 0 29
50544: PUSH
50545: LD_INT 1
50547: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50548: LD_VAR 0 4
50552: PUSH
50553: LD_VAR 0 7
50557: ARRAY
50558: PPUSH
50559: CALL_OW 256
50563: PUSH
50564: LD_INT 500
50566: LESS
50567: IFFALSE 50593
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50569: LD_VAR 0 4
50573: PUSH
50574: LD_VAR 0 7
50578: ARRAY
50579: PPUSH
50580: LD_VAR 0 14
50584: PUSH
50585: LD_INT 1
50587: ARRAY
50588: PPUSH
50589: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
50593: LD_VAR 0 4
50597: PUSH
50598: LD_VAR 0 7
50602: ARRAY
50603: PPUSH
50604: CALL_OW 264
50608: PUSH
50609: LD_INT 49
50611: EQUAL
50612: IFFALSE 50733
// begin if not HasTask ( group [ i ] ) then
50614: LD_VAR 0 4
50618: PUSH
50619: LD_VAR 0 7
50623: ARRAY
50624: PPUSH
50625: CALL_OW 314
50629: NOT
50630: IFFALSE 50733
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
50632: LD_ADDR_VAR 0 9
50636: PUSH
50637: LD_INT 81
50639: PUSH
50640: LD_VAR 0 4
50644: PUSH
50645: LD_VAR 0 7
50649: ARRAY
50650: PPUSH
50651: CALL_OW 255
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PPUSH
50660: CALL_OW 69
50664: PPUSH
50665: LD_VAR 0 4
50669: PUSH
50670: LD_VAR 0 7
50674: ARRAY
50675: PPUSH
50676: CALL_OW 74
50680: ST_TO_ADDR
// if k then
50681: LD_VAR 0 9
50685: IFFALSE 50733
// if GetDistUnits ( group [ i ] , k ) > 10 then
50687: LD_VAR 0 4
50691: PUSH
50692: LD_VAR 0 7
50696: ARRAY
50697: PPUSH
50698: LD_VAR 0 9
50702: PPUSH
50703: CALL_OW 296
50707: PUSH
50708: LD_INT 10
50710: GREATER
50711: IFFALSE 50733
// ComMoveUnit ( group [ i ] , k ) ;
50713: LD_VAR 0 4
50717: PUSH
50718: LD_VAR 0 7
50722: ARRAY
50723: PPUSH
50724: LD_VAR 0 9
50728: PPUSH
50729: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50733: LD_VAR 0 4
50737: PUSH
50738: LD_VAR 0 7
50742: ARRAY
50743: PPUSH
50744: CALL_OW 256
50748: PUSH
50749: LD_INT 250
50751: LESS
50752: PUSH
50753: LD_VAR 0 4
50757: PUSH
50758: LD_VAR 0 7
50762: ARRAY
50763: PUSH
50764: LD_INT 21
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 23
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PPUSH
50788: CALL_OW 69
50792: IN
50793: AND
50794: IFFALSE 50919
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50796: LD_ADDR_VAR 0 9
50800: PUSH
50801: LD_OWVAR 3
50805: PUSH
50806: LD_VAR 0 4
50810: PUSH
50811: LD_VAR 0 7
50815: ARRAY
50816: DIFF
50817: PPUSH
50818: LD_VAR 0 4
50822: PUSH
50823: LD_VAR 0 7
50827: ARRAY
50828: PPUSH
50829: CALL_OW 74
50833: ST_TO_ADDR
// if not k then
50834: LD_VAR 0 9
50838: NOT
50839: IFFALSE 50843
// continue ;
50841: GO 47284
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50843: LD_VAR 0 9
50847: PUSH
50848: LD_INT 81
50850: PUSH
50851: LD_VAR 0 4
50855: PUSH
50856: LD_VAR 0 7
50860: ARRAY
50861: PPUSH
50862: CALL_OW 255
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PPUSH
50871: CALL_OW 69
50875: IN
50876: PUSH
50877: LD_VAR 0 9
50881: PPUSH
50882: LD_VAR 0 4
50886: PUSH
50887: LD_VAR 0 7
50891: ARRAY
50892: PPUSH
50893: CALL_OW 296
50897: PUSH
50898: LD_INT 5
50900: LESS
50901: AND
50902: IFFALSE 50919
// ComAutodestruct ( group [ i ] ) ;
50904: LD_VAR 0 4
50908: PUSH
50909: LD_VAR 0 7
50913: ARRAY
50914: PPUSH
50915: CALL 45379 0 1
// end ; if f_attack_depot then
50919: LD_VAR 0 25
50923: IFFALSE 51035
// begin k := 6 ;
50925: LD_ADDR_VAR 0 9
50929: PUSH
50930: LD_INT 6
50932: ST_TO_ADDR
// if tmp < k then
50933: LD_VAR 0 14
50937: PUSH
50938: LD_VAR 0 9
50942: LESS
50943: IFFALSE 50955
// k := tmp ;
50945: LD_ADDR_VAR 0 9
50949: PUSH
50950: LD_VAR 0 14
50954: ST_TO_ADDR
// for j = 1 to k do
50955: LD_ADDR_VAR 0 8
50959: PUSH
50960: DOUBLE
50961: LD_INT 1
50963: DEC
50964: ST_TO_ADDR
50965: LD_VAR 0 9
50969: PUSH
50970: FOR_TO
50971: IFFALSE 51033
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50973: LD_VAR 0 8
50977: PPUSH
50978: CALL_OW 266
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: IN
50993: IFFALSE 51031
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50995: LD_VAR 0 4
50999: PUSH
51000: LD_VAR 0 7
51004: ARRAY
51005: PPUSH
51006: LD_VAR 0 14
51010: PUSH
51011: LD_VAR 0 8
51015: ARRAY
51016: PPUSH
51017: CALL_OW 115
// attacking := true ;
51021: LD_ADDR_VAR 0 29
51025: PUSH
51026: LD_INT 1
51028: ST_TO_ADDR
// break ;
51029: GO 51033
// end ;
51031: GO 50970
51033: POP
51034: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
51035: LD_VAR 0 4
51039: PUSH
51040: LD_VAR 0 7
51044: ARRAY
51045: PPUSH
51046: CALL_OW 302
51050: PUSH
51051: LD_VAR 0 29
51055: NOT
51056: AND
51057: IFFALSE 51379
// begin if GetTag ( group [ i ] ) = 71 then
51059: LD_VAR 0 4
51063: PUSH
51064: LD_VAR 0 7
51068: ARRAY
51069: PPUSH
51070: CALL_OW 110
51074: PUSH
51075: LD_INT 71
51077: EQUAL
51078: IFFALSE 51119
// begin if HasTask ( group [ i ] ) then
51080: LD_VAR 0 4
51084: PUSH
51085: LD_VAR 0 7
51089: ARRAY
51090: PPUSH
51091: CALL_OW 314
51095: IFFALSE 51101
// continue else
51097: GO 47284
51099: GO 51119
// SetTag ( group [ i ] , 0 ) ;
51101: LD_VAR 0 4
51105: PUSH
51106: LD_VAR 0 7
51110: ARRAY
51111: PPUSH
51112: LD_INT 0
51114: PPUSH
51115: CALL_OW 109
// end ; k := 8 ;
51119: LD_ADDR_VAR 0 9
51123: PUSH
51124: LD_INT 8
51126: ST_TO_ADDR
// x := 0 ;
51127: LD_ADDR_VAR 0 10
51131: PUSH
51132: LD_INT 0
51134: ST_TO_ADDR
// if tmp < k then
51135: LD_VAR 0 14
51139: PUSH
51140: LD_VAR 0 9
51144: LESS
51145: IFFALSE 51157
// k := tmp ;
51147: LD_ADDR_VAR 0 9
51151: PUSH
51152: LD_VAR 0 14
51156: ST_TO_ADDR
// for j = 1 to k do
51157: LD_ADDR_VAR 0 8
51161: PUSH
51162: DOUBLE
51163: LD_INT 1
51165: DEC
51166: ST_TO_ADDR
51167: LD_VAR 0 9
51171: PUSH
51172: FOR_TO
51173: IFFALSE 51271
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
51175: LD_VAR 0 14
51179: PUSH
51180: LD_VAR 0 8
51184: ARRAY
51185: PPUSH
51186: CALL_OW 247
51190: PUSH
51191: LD_INT 1
51193: EQUAL
51194: PUSH
51195: LD_VAR 0 14
51199: PUSH
51200: LD_VAR 0 8
51204: ARRAY
51205: PPUSH
51206: CALL_OW 256
51210: PUSH
51211: LD_INT 250
51213: LESS
51214: PUSH
51215: LD_VAR 0 20
51219: AND
51220: PUSH
51221: LD_VAR 0 20
51225: NOT
51226: PUSH
51227: LD_VAR 0 14
51231: PUSH
51232: LD_VAR 0 8
51236: ARRAY
51237: PPUSH
51238: CALL_OW 256
51242: PUSH
51243: LD_INT 250
51245: GREATEREQUAL
51246: AND
51247: OR
51248: AND
51249: IFFALSE 51269
// begin x := tmp [ j ] ;
51251: LD_ADDR_VAR 0 10
51255: PUSH
51256: LD_VAR 0 14
51260: PUSH
51261: LD_VAR 0 8
51265: ARRAY
51266: ST_TO_ADDR
// break ;
51267: GO 51271
// end ;
51269: GO 51172
51271: POP
51272: POP
// if x then
51273: LD_VAR 0 10
51277: IFFALSE 51301
// ComAttackUnit ( group [ i ] , x ) else
51279: LD_VAR 0 4
51283: PUSH
51284: LD_VAR 0 7
51288: ARRAY
51289: PPUSH
51290: LD_VAR 0 10
51294: PPUSH
51295: CALL_OW 115
51299: GO 51325
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
51301: LD_VAR 0 4
51305: PUSH
51306: LD_VAR 0 7
51310: ARRAY
51311: PPUSH
51312: LD_VAR 0 14
51316: PUSH
51317: LD_INT 1
51319: ARRAY
51320: PPUSH
51321: CALL_OW 115
// if not HasTask ( group [ i ] ) then
51325: LD_VAR 0 4
51329: PUSH
51330: LD_VAR 0 7
51334: ARRAY
51335: PPUSH
51336: CALL_OW 314
51340: NOT
51341: IFFALSE 51379
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
51343: LD_VAR 0 4
51347: PUSH
51348: LD_VAR 0 7
51352: ARRAY
51353: PPUSH
51354: LD_VAR 0 14
51358: PPUSH
51359: LD_VAR 0 4
51363: PUSH
51364: LD_VAR 0 7
51368: ARRAY
51369: PPUSH
51370: CALL_OW 74
51374: PPUSH
51375: CALL_OW 115
// end ; end ; end ;
51379: GO 47284
51381: POP
51382: POP
// wait ( 0 0$1 ) ;
51383: LD_INT 35
51385: PPUSH
51386: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
51390: LD_VAR 0 4
51394: PUSH
51395: EMPTY
51396: EQUAL
51397: PUSH
51398: LD_INT 81
51400: PUSH
51401: LD_VAR 0 35
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PPUSH
51410: CALL_OW 69
51414: NOT
51415: OR
51416: IFFALSE 47269
// end ;
51418: LD_VAR 0 2
51422: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51423: LD_INT 0
51425: PPUSH
51426: PPUSH
51427: PPUSH
51428: PPUSH
// if not base_units then
51429: LD_VAR 0 1
51433: NOT
51434: IFFALSE 51438
// exit ;
51436: GO 51525
// result := false ;
51438: LD_ADDR_VAR 0 2
51442: PUSH
51443: LD_INT 0
51445: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51446: LD_ADDR_VAR 0 5
51450: PUSH
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_INT 21
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PPUSH
51466: CALL_OW 72
51470: ST_TO_ADDR
// if not tmp then
51471: LD_VAR 0 5
51475: NOT
51476: IFFALSE 51480
// exit ;
51478: GO 51525
// for i in tmp do
51480: LD_ADDR_VAR 0 3
51484: PUSH
51485: LD_VAR 0 5
51489: PUSH
51490: FOR_IN
51491: IFFALSE 51523
// begin result := EnemyInRange ( i , 22 ) ;
51493: LD_ADDR_VAR 0 2
51497: PUSH
51498: LD_VAR 0 3
51502: PPUSH
51503: LD_INT 22
51505: PPUSH
51506: CALL 45062 0 2
51510: ST_TO_ADDR
// if result then
51511: LD_VAR 0 2
51515: IFFALSE 51521
// exit ;
51517: POP
51518: POP
51519: GO 51525
// end ;
51521: GO 51490
51523: POP
51524: POP
// end ;
51525: LD_VAR 0 2
51529: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51530: LD_INT 0
51532: PPUSH
51533: PPUSH
// if not units then
51534: LD_VAR 0 1
51538: NOT
51539: IFFALSE 51543
// exit ;
51541: GO 51613
// result := [ ] ;
51543: LD_ADDR_VAR 0 3
51547: PUSH
51548: EMPTY
51549: ST_TO_ADDR
// for i in units do
51550: LD_ADDR_VAR 0 4
51554: PUSH
51555: LD_VAR 0 1
51559: PUSH
51560: FOR_IN
51561: IFFALSE 51611
// if GetTag ( i ) = tag then
51563: LD_VAR 0 4
51567: PPUSH
51568: CALL_OW 110
51572: PUSH
51573: LD_VAR 0 2
51577: EQUAL
51578: IFFALSE 51609
// result := Insert ( result , result + 1 , i ) ;
51580: LD_ADDR_VAR 0 3
51584: PUSH
51585: LD_VAR 0 3
51589: PPUSH
51590: LD_VAR 0 3
51594: PUSH
51595: LD_INT 1
51597: PLUS
51598: PPUSH
51599: LD_VAR 0 4
51603: PPUSH
51604: CALL_OW 2
51608: ST_TO_ADDR
51609: GO 51560
51611: POP
51612: POP
// end ;
51613: LD_VAR 0 3
51617: RET
// export function IsDriver ( un ) ; begin
51618: LD_INT 0
51620: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51621: LD_ADDR_VAR 0 2
51625: PUSH
51626: LD_VAR 0 1
51630: PUSH
51631: LD_INT 55
51633: PUSH
51634: EMPTY
51635: LIST
51636: PPUSH
51637: CALL_OW 69
51641: IN
51642: ST_TO_ADDR
// end ;
51643: LD_VAR 0 2
51647: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51648: LD_INT 0
51650: PPUSH
51651: PPUSH
// list := [ ] ;
51652: LD_ADDR_VAR 0 5
51656: PUSH
51657: EMPTY
51658: ST_TO_ADDR
// case d of 0 :
51659: LD_VAR 0 3
51663: PUSH
51664: LD_INT 0
51666: DOUBLE
51667: EQUAL
51668: IFTRUE 51672
51670: GO 51805
51672: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51673: LD_ADDR_VAR 0 5
51677: PUSH
51678: LD_VAR 0 1
51682: PUSH
51683: LD_INT 4
51685: MINUS
51686: PUSH
51687: LD_VAR 0 2
51691: PUSH
51692: LD_INT 4
51694: MINUS
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: LD_VAR 0 1
51708: PUSH
51709: LD_INT 3
51711: MINUS
51712: PUSH
51713: LD_VAR 0 2
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_INT 4
51733: PLUS
51734: PUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 4
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: PUSH
51748: LD_VAR 0 1
51752: PUSH
51753: LD_INT 3
51755: PLUS
51756: PUSH
51757: LD_VAR 0 2
51761: PUSH
51762: LD_INT 3
51764: PLUS
51765: PUSH
51766: LD_INT 5
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: PUSH
51774: LD_VAR 0 1
51778: PUSH
51779: LD_VAR 0 2
51783: PUSH
51784: LD_INT 4
51786: PLUS
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// end ; 1 :
51803: GO 52503
51805: LD_INT 1
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51813
51811: GO 51946
51813: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51814: LD_ADDR_VAR 0 5
51818: PUSH
51819: LD_VAR 0 1
51823: PUSH
51824: LD_VAR 0 2
51828: PUSH
51829: LD_INT 4
51831: MINUS
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: PUSH
51841: LD_VAR 0 1
51845: PUSH
51846: LD_INT 3
51848: MINUS
51849: PUSH
51850: LD_VAR 0 2
51854: PUSH
51855: LD_INT 3
51857: MINUS
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: LD_VAR 0 1
51871: PUSH
51872: LD_INT 4
51874: MINUS
51875: PUSH
51876: LD_VAR 0 2
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: LD_VAR 0 1
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 3
51901: PLUS
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 4
51918: PLUS
51919: PUSH
51920: LD_VAR 0 2
51924: PUSH
51925: LD_INT 4
51927: PLUS
51928: PUSH
51929: LD_INT 5
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// end ; 2 :
51944: GO 52503
51946: LD_INT 2
51948: DOUBLE
51949: EQUAL
51950: IFTRUE 51954
51952: GO 52083
51954: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51955: LD_ADDR_VAR 0 5
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: LD_VAR 0 2
51969: PUSH
51970: LD_INT 3
51972: MINUS
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: PUSH
51982: LD_VAR 0 1
51986: PUSH
51987: LD_INT 4
51989: PLUS
51990: PUSH
51991: LD_VAR 0 2
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: PUSH
52004: LD_VAR 0 1
52008: PUSH
52009: LD_VAR 0 2
52013: PUSH
52014: LD_INT 4
52016: PLUS
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: PUSH
52026: LD_VAR 0 1
52030: PUSH
52031: LD_INT 3
52033: MINUS
52034: PUSH
52035: LD_VAR 0 2
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: LD_VAR 0 1
52052: PUSH
52053: LD_INT 4
52055: MINUS
52056: PUSH
52057: LD_VAR 0 2
52061: PUSH
52062: LD_INT 4
52064: MINUS
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// end ; 3 :
52081: GO 52503
52083: LD_INT 3
52085: DOUBLE
52086: EQUAL
52087: IFTRUE 52091
52089: GO 52224
52091: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52092: LD_ADDR_VAR 0 5
52096: PUSH
52097: LD_VAR 0 1
52101: PUSH
52102: LD_INT 3
52104: PLUS
52105: PUSH
52106: LD_VAR 0 2
52110: PUSH
52111: LD_INT 4
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: PUSH
52119: LD_VAR 0 1
52123: PUSH
52124: LD_INT 4
52126: PLUS
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 4
52135: PLUS
52136: PUSH
52137: LD_INT 5
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 4
52152: MINUS
52153: PUSH
52154: LD_VAR 0 2
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: LD_VAR 0 2
52176: PUSH
52177: LD_INT 4
52179: MINUS
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: LD_VAR 0 1
52193: PUSH
52194: LD_INT 3
52196: MINUS
52197: PUSH
52198: LD_VAR 0 2
52202: PUSH
52203: LD_INT 3
52205: MINUS
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// end ; 4 :
52222: GO 52503
52224: LD_INT 4
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52232
52230: GO 52365
52232: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52233: LD_ADDR_VAR 0 5
52237: PUSH
52238: LD_VAR 0 1
52242: PUSH
52243: LD_VAR 0 2
52247: PUSH
52248: LD_INT 4
52250: PLUS
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: PUSH
52260: LD_VAR 0 1
52264: PUSH
52265: LD_INT 3
52267: PLUS
52268: PUSH
52269: LD_VAR 0 2
52273: PUSH
52274: LD_INT 3
52276: PLUS
52277: PUSH
52278: LD_INT 5
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: LD_VAR 0 1
52290: PUSH
52291: LD_INT 4
52293: PLUS
52294: PUSH
52295: LD_VAR 0 2
52299: PUSH
52300: LD_INT 4
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: PUSH
52308: LD_VAR 0 1
52312: PUSH
52313: LD_VAR 0 2
52317: PUSH
52318: LD_INT 3
52320: MINUS
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: PUSH
52330: LD_VAR 0 1
52334: PUSH
52335: LD_INT 4
52337: MINUS
52338: PUSH
52339: LD_VAR 0 2
52343: PUSH
52344: LD_INT 4
52346: MINUS
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// end ; 5 :
52363: GO 52503
52365: LD_INT 5
52367: DOUBLE
52368: EQUAL
52369: IFTRUE 52373
52371: GO 52502
52373: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52374: LD_ADDR_VAR 0 5
52378: PUSH
52379: LD_VAR 0 1
52383: PUSH
52384: LD_INT 4
52386: MINUS
52387: PUSH
52388: LD_VAR 0 2
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: PUSH
52401: LD_VAR 0 1
52405: PUSH
52406: LD_VAR 0 2
52410: PUSH
52411: LD_INT 4
52413: MINUS
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: PUSH
52423: LD_VAR 0 1
52427: PUSH
52428: LD_INT 4
52430: PLUS
52431: PUSH
52432: LD_VAR 0 2
52436: PUSH
52437: LD_INT 4
52439: PLUS
52440: PUSH
52441: LD_INT 5
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: LIST
52448: PUSH
52449: LD_VAR 0 1
52453: PUSH
52454: LD_INT 3
52456: PLUS
52457: PUSH
52458: LD_VAR 0 2
52462: PUSH
52463: LD_INT 4
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: PUSH
52471: LD_VAR 0 1
52475: PUSH
52476: LD_VAR 0 2
52480: PUSH
52481: LD_INT 3
52483: PLUS
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: ST_TO_ADDR
// end ; end ;
52500: GO 52503
52502: POP
// result := list ;
52503: LD_ADDR_VAR 0 4
52507: PUSH
52508: LD_VAR 0 5
52512: ST_TO_ADDR
// end ;
52513: LD_VAR 0 4
52517: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52518: LD_INT 0
52520: PPUSH
52521: PPUSH
52522: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52523: LD_VAR 0 1
52527: NOT
52528: PUSH
52529: LD_VAR 0 2
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 4
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: IN
52552: NOT
52553: OR
52554: IFFALSE 52558
// exit ;
52556: GO 52650
// tmp := [ ] ;
52558: LD_ADDR_VAR 0 5
52562: PUSH
52563: EMPTY
52564: ST_TO_ADDR
// for i in units do
52565: LD_ADDR_VAR 0 4
52569: PUSH
52570: LD_VAR 0 1
52574: PUSH
52575: FOR_IN
52576: IFFALSE 52619
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52578: LD_ADDR_VAR 0 5
52582: PUSH
52583: LD_VAR 0 5
52587: PPUSH
52588: LD_VAR 0 5
52592: PUSH
52593: LD_INT 1
52595: PLUS
52596: PPUSH
52597: LD_VAR 0 4
52601: PPUSH
52602: LD_VAR 0 2
52606: PPUSH
52607: CALL_OW 259
52611: PPUSH
52612: CALL_OW 2
52616: ST_TO_ADDR
52617: GO 52575
52619: POP
52620: POP
// if not tmp then
52621: LD_VAR 0 5
52625: NOT
52626: IFFALSE 52630
// exit ;
52628: GO 52650
// result := SortListByListDesc ( units , tmp ) ;
52630: LD_ADDR_VAR 0 3
52634: PUSH
52635: LD_VAR 0 1
52639: PPUSH
52640: LD_VAR 0 5
52644: PPUSH
52645: CALL_OW 77
52649: ST_TO_ADDR
// end ;
52650: LD_VAR 0 3
52654: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52655: LD_INT 0
52657: PPUSH
52658: PPUSH
52659: PPUSH
// x := GetX ( building ) ;
52660: LD_ADDR_VAR 0 4
52664: PUSH
52665: LD_VAR 0 2
52669: PPUSH
52670: CALL_OW 250
52674: ST_TO_ADDR
// y := GetY ( building ) ;
52675: LD_ADDR_VAR 0 5
52679: PUSH
52680: LD_VAR 0 2
52684: PPUSH
52685: CALL_OW 251
52689: ST_TO_ADDR
// if GetTaskList ( unit ) then
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 437
52699: IFFALSE 52794
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52701: LD_STRING e
52703: PUSH
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 437
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: EQUAL
52722: PUSH
52723: LD_VAR 0 4
52727: PUSH
52728: LD_VAR 0 1
52732: PPUSH
52733: CALL_OW 437
52737: PUSH
52738: LD_INT 1
52740: ARRAY
52741: PUSH
52742: LD_INT 2
52744: ARRAY
52745: EQUAL
52746: AND
52747: PUSH
52748: LD_VAR 0 5
52752: PUSH
52753: LD_VAR 0 1
52757: PPUSH
52758: CALL_OW 437
52762: PUSH
52763: LD_INT 1
52765: ARRAY
52766: PUSH
52767: LD_INT 3
52769: ARRAY
52770: EQUAL
52771: AND
52772: IFFALSE 52784
// result := true else
52774: LD_ADDR_VAR 0 3
52778: PUSH
52779: LD_INT 1
52781: ST_TO_ADDR
52782: GO 52792
// result := false ;
52784: LD_ADDR_VAR 0 3
52788: PUSH
52789: LD_INT 0
52791: ST_TO_ADDR
// end else
52792: GO 52802
// result := false ;
52794: LD_ADDR_VAR 0 3
52798: PUSH
52799: LD_INT 0
52801: ST_TO_ADDR
// end ;
52802: LD_VAR 0 3
52806: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52807: LD_INT 0
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
// if not unit or not area then
52813: LD_VAR 0 1
52817: NOT
52818: PUSH
52819: LD_VAR 0 2
52823: NOT
52824: OR
52825: IFFALSE 52829
// exit ;
52827: GO 52993
// tmp := AreaToList ( area , i ) ;
52829: LD_ADDR_VAR 0 6
52833: PUSH
52834: LD_VAR 0 2
52838: PPUSH
52839: LD_VAR 0 5
52843: PPUSH
52844: CALL_OW 517
52848: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52849: LD_ADDR_VAR 0 5
52853: PUSH
52854: DOUBLE
52855: LD_INT 1
52857: DEC
52858: ST_TO_ADDR
52859: LD_VAR 0 6
52863: PUSH
52864: LD_INT 1
52866: ARRAY
52867: PUSH
52868: FOR_TO
52869: IFFALSE 52991
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52871: LD_ADDR_VAR 0 7
52875: PUSH
52876: LD_VAR 0 6
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PUSH
52885: LD_VAR 0 5
52889: ARRAY
52890: PUSH
52891: LD_VAR 0 6
52895: PUSH
52896: LD_INT 2
52898: ARRAY
52899: PUSH
52900: LD_VAR 0 5
52904: ARRAY
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52910: LD_VAR 0 7
52914: PUSH
52915: LD_INT 1
52917: ARRAY
52918: PPUSH
52919: LD_VAR 0 7
52923: PUSH
52924: LD_INT 2
52926: ARRAY
52927: PPUSH
52928: CALL_OW 428
52932: PUSH
52933: LD_INT 0
52935: EQUAL
52936: IFFALSE 52989
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52938: LD_VAR 0 1
52942: PPUSH
52943: LD_VAR 0 7
52947: PUSH
52948: LD_INT 1
52950: ARRAY
52951: PPUSH
52952: LD_VAR 0 7
52956: PUSH
52957: LD_INT 2
52959: ARRAY
52960: PPUSH
52961: LD_VAR 0 3
52965: PPUSH
52966: CALL_OW 48
// result := IsPlaced ( unit ) ;
52970: LD_ADDR_VAR 0 4
52974: PUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: CALL_OW 305
52984: ST_TO_ADDR
// exit ;
52985: POP
52986: POP
52987: GO 52993
// end ; end ;
52989: GO 52868
52991: POP
52992: POP
// end ;
52993: LD_VAR 0 4
52997: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52998: LD_INT 0
53000: PPUSH
53001: PPUSH
53002: PPUSH
// if not side or side > 8 then
53003: LD_VAR 0 1
53007: NOT
53008: PUSH
53009: LD_VAR 0 1
53013: PUSH
53014: LD_INT 8
53016: GREATER
53017: OR
53018: IFFALSE 53022
// exit ;
53020: GO 53209
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53022: LD_ADDR_VAR 0 4
53026: PUSH
53027: LD_INT 22
53029: PUSH
53030: LD_VAR 0 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 21
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PPUSH
53053: CALL_OW 69
53057: ST_TO_ADDR
// if not tmp then
53058: LD_VAR 0 4
53062: NOT
53063: IFFALSE 53067
// exit ;
53065: GO 53209
// enable_addtolog := true ;
53067: LD_ADDR_OWVAR 81
53071: PUSH
53072: LD_INT 1
53074: ST_TO_ADDR
// AddToLog ( [ ) ;
53075: LD_STRING [
53077: PPUSH
53078: CALL_OW 561
// for i in tmp do
53082: LD_ADDR_VAR 0 3
53086: PUSH
53087: LD_VAR 0 4
53091: PUSH
53092: FOR_IN
53093: IFFALSE 53200
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53095: LD_STRING [
53097: PUSH
53098: LD_VAR 0 3
53102: PPUSH
53103: CALL_OW 266
53107: STR
53108: PUSH
53109: LD_STRING , 
53111: STR
53112: PUSH
53113: LD_VAR 0 3
53117: PPUSH
53118: CALL_OW 250
53122: STR
53123: PUSH
53124: LD_STRING , 
53126: STR
53127: PUSH
53128: LD_VAR 0 3
53132: PPUSH
53133: CALL_OW 251
53137: STR
53138: PUSH
53139: LD_STRING , 
53141: STR
53142: PUSH
53143: LD_VAR 0 3
53147: PPUSH
53148: CALL_OW 254
53152: STR
53153: PUSH
53154: LD_STRING , 
53156: STR
53157: PUSH
53158: LD_VAR 0 3
53162: PPUSH
53163: LD_INT 1
53165: PPUSH
53166: CALL_OW 268
53170: STR
53171: PUSH
53172: LD_STRING , 
53174: STR
53175: PUSH
53176: LD_VAR 0 3
53180: PPUSH
53181: LD_INT 2
53183: PPUSH
53184: CALL_OW 268
53188: STR
53189: PUSH
53190: LD_STRING ],
53192: STR
53193: PPUSH
53194: CALL_OW 561
// end ;
53198: GO 53092
53200: POP
53201: POP
// AddToLog ( ]; ) ;
53202: LD_STRING ];
53204: PPUSH
53205: CALL_OW 561
// end ;
53209: LD_VAR 0 2
53213: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
// if not area or not rate or not max then
53221: LD_VAR 0 1
53225: NOT
53226: PUSH
53227: LD_VAR 0 2
53231: NOT
53232: OR
53233: PUSH
53234: LD_VAR 0 4
53238: NOT
53239: OR
53240: IFFALSE 53244
// exit ;
53242: GO 53436
// while 1 do
53244: LD_INT 1
53246: IFFALSE 53436
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53248: LD_ADDR_VAR 0 9
53252: PUSH
53253: LD_VAR 0 1
53257: PPUSH
53258: LD_INT 1
53260: PPUSH
53261: CALL_OW 287
53265: PUSH
53266: LD_INT 10
53268: MUL
53269: ST_TO_ADDR
// r := rate / 10 ;
53270: LD_ADDR_VAR 0 7
53274: PUSH
53275: LD_VAR 0 2
53279: PUSH
53280: LD_INT 10
53282: DIVREAL
53283: ST_TO_ADDR
// time := 1 1$00 ;
53284: LD_ADDR_VAR 0 8
53288: PUSH
53289: LD_INT 2100
53291: ST_TO_ADDR
// if amount < min then
53292: LD_VAR 0 9
53296: PUSH
53297: LD_VAR 0 3
53301: LESS
53302: IFFALSE 53320
// r := r * 2 else
53304: LD_ADDR_VAR 0 7
53308: PUSH
53309: LD_VAR 0 7
53313: PUSH
53314: LD_INT 2
53316: MUL
53317: ST_TO_ADDR
53318: GO 53346
// if amount > max then
53320: LD_VAR 0 9
53324: PUSH
53325: LD_VAR 0 4
53329: GREATER
53330: IFFALSE 53346
// r := r / 2 ;
53332: LD_ADDR_VAR 0 7
53336: PUSH
53337: LD_VAR 0 7
53341: PUSH
53342: LD_INT 2
53344: DIVREAL
53345: ST_TO_ADDR
// time := time / r ;
53346: LD_ADDR_VAR 0 8
53350: PUSH
53351: LD_VAR 0 8
53355: PUSH
53356: LD_VAR 0 7
53360: DIVREAL
53361: ST_TO_ADDR
// if time < 0 then
53362: LD_VAR 0 8
53366: PUSH
53367: LD_INT 0
53369: LESS
53370: IFFALSE 53387
// time := time * - 1 ;
53372: LD_ADDR_VAR 0 8
53376: PUSH
53377: LD_VAR 0 8
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: MUL
53386: ST_TO_ADDR
// wait ( time ) ;
53387: LD_VAR 0 8
53391: PPUSH
53392: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53396: LD_INT 35
53398: PPUSH
53399: LD_INT 875
53401: PPUSH
53402: CALL_OW 12
53406: PPUSH
53407: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53411: LD_INT 1
53413: PPUSH
53414: LD_INT 5
53416: PPUSH
53417: CALL_OW 12
53421: PPUSH
53422: LD_VAR 0 1
53426: PPUSH
53427: LD_INT 1
53429: PPUSH
53430: CALL_OW 55
// end ;
53434: GO 53244
// end ;
53436: LD_VAR 0 5
53440: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53441: LD_INT 0
53443: PPUSH
53444: PPUSH
53445: PPUSH
53446: PPUSH
53447: PPUSH
53448: PPUSH
53449: PPUSH
53450: PPUSH
// if not turrets or not factories then
53451: LD_VAR 0 1
53455: NOT
53456: PUSH
53457: LD_VAR 0 2
53461: NOT
53462: OR
53463: IFFALSE 53467
// exit ;
53465: GO 53774
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53467: LD_ADDR_VAR 0 10
53471: PUSH
53472: LD_INT 5
53474: PUSH
53475: LD_INT 6
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 5
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 24
53509: PUSH
53510: LD_INT 25
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 23
53519: PUSH
53520: LD_INT 27
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 42
53533: PUSH
53534: LD_INT 43
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 44
53543: PUSH
53544: LD_INT 46
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 45
53553: PUSH
53554: LD_INT 47
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// result := [ ] ;
53571: LD_ADDR_VAR 0 3
53575: PUSH
53576: EMPTY
53577: ST_TO_ADDR
// for i in turrets do
53578: LD_ADDR_VAR 0 4
53582: PUSH
53583: LD_VAR 0 1
53587: PUSH
53588: FOR_IN
53589: IFFALSE 53772
// begin nat := GetNation ( i ) ;
53591: LD_ADDR_VAR 0 7
53595: PUSH
53596: LD_VAR 0 4
53600: PPUSH
53601: CALL_OW 248
53605: ST_TO_ADDR
// weapon := 0 ;
53606: LD_ADDR_VAR 0 8
53610: PUSH
53611: LD_INT 0
53613: ST_TO_ADDR
// if not nat then
53614: LD_VAR 0 7
53618: NOT
53619: IFFALSE 53623
// continue ;
53621: GO 53588
// for j in list [ nat ] do
53623: LD_ADDR_VAR 0 5
53627: PUSH
53628: LD_VAR 0 10
53632: PUSH
53633: LD_VAR 0 7
53637: ARRAY
53638: PUSH
53639: FOR_IN
53640: IFFALSE 53681
// if GetBWeapon ( i ) = j [ 1 ] then
53642: LD_VAR 0 4
53646: PPUSH
53647: CALL_OW 269
53651: PUSH
53652: LD_VAR 0 5
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: EQUAL
53661: IFFALSE 53679
// begin weapon := j [ 2 ] ;
53663: LD_ADDR_VAR 0 8
53667: PUSH
53668: LD_VAR 0 5
53672: PUSH
53673: LD_INT 2
53675: ARRAY
53676: ST_TO_ADDR
// break ;
53677: GO 53681
// end ;
53679: GO 53639
53681: POP
53682: POP
// if not weapon then
53683: LD_VAR 0 8
53687: NOT
53688: IFFALSE 53692
// continue ;
53690: GO 53588
// for k in factories do
53692: LD_ADDR_VAR 0 6
53696: PUSH
53697: LD_VAR 0 2
53701: PUSH
53702: FOR_IN
53703: IFFALSE 53768
// begin weapons := AvailableWeaponList ( k ) ;
53705: LD_ADDR_VAR 0 9
53709: PUSH
53710: LD_VAR 0 6
53714: PPUSH
53715: CALL_OW 478
53719: ST_TO_ADDR
// if not weapons then
53720: LD_VAR 0 9
53724: NOT
53725: IFFALSE 53729
// continue ;
53727: GO 53702
// if weapon in weapons then
53729: LD_VAR 0 8
53733: PUSH
53734: LD_VAR 0 9
53738: IN
53739: IFFALSE 53766
// begin result := [ i , weapon ] ;
53741: LD_ADDR_VAR 0 3
53745: PUSH
53746: LD_VAR 0 4
53750: PUSH
53751: LD_VAR 0 8
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// exit ;
53760: POP
53761: POP
53762: POP
53763: POP
53764: GO 53774
// end ; end ;
53766: GO 53702
53768: POP
53769: POP
// end ;
53770: GO 53588
53772: POP
53773: POP
// end ;
53774: LD_VAR 0 3
53778: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53779: LD_INT 0
53781: PPUSH
// if not side or side > 8 then
53782: LD_VAR 0 3
53786: NOT
53787: PUSH
53788: LD_VAR 0 3
53792: PUSH
53793: LD_INT 8
53795: GREATER
53796: OR
53797: IFFALSE 53801
// exit ;
53799: GO 53860
// if not range then
53801: LD_VAR 0 4
53805: NOT
53806: IFFALSE 53817
// range := - 12 ;
53808: LD_ADDR_VAR 0 4
53812: PUSH
53813: LD_INT 12
53815: NEG
53816: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53817: LD_VAR 0 1
53821: PPUSH
53822: LD_VAR 0 2
53826: PPUSH
53827: LD_VAR 0 3
53831: PPUSH
53832: LD_VAR 0 4
53836: PPUSH
53837: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53841: LD_VAR 0 1
53845: PPUSH
53846: LD_VAR 0 2
53850: PPUSH
53851: LD_VAR 0 3
53855: PPUSH
53856: CALL_OW 331
// end ;
53860: LD_VAR 0 5
53864: RET
// export function Video ( mode ) ; begin
53865: LD_INT 0
53867: PPUSH
// ingame_video = mode ;
53868: LD_ADDR_OWVAR 52
53872: PUSH
53873: LD_VAR 0 1
53877: ST_TO_ADDR
// interface_hidden = mode ;
53878: LD_ADDR_OWVAR 54
53882: PUSH
53883: LD_VAR 0 1
53887: ST_TO_ADDR
// end ;
53888: LD_VAR 0 2
53892: RET
// export function Join ( array , element ) ; begin
53893: LD_INT 0
53895: PPUSH
// result := array ^ element ;
53896: LD_ADDR_VAR 0 3
53900: PUSH
53901: LD_VAR 0 1
53905: PUSH
53906: LD_VAR 0 2
53910: ADD
53911: ST_TO_ADDR
// end ;
53912: LD_VAR 0 3
53916: RET
// export function JoinUnion ( array , element ) ; begin
53917: LD_INT 0
53919: PPUSH
// result := array union element ;
53920: LD_ADDR_VAR 0 3
53924: PUSH
53925: LD_VAR 0 1
53929: PUSH
53930: LD_VAR 0 2
53934: UNION
53935: ST_TO_ADDR
// end ;
53936: LD_VAR 0 3
53940: RET
// export function GetBehemoths ( side ) ; begin
53941: LD_INT 0
53943: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53944: LD_ADDR_VAR 0 2
53948: PUSH
53949: LD_INT 22
53951: PUSH
53952: LD_VAR 0 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 31
53963: PUSH
53964: LD_INT 25
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PPUSH
53975: CALL_OW 69
53979: ST_TO_ADDR
// end ;
53980: LD_VAR 0 2
53984: RET
// export function Shuffle ( array ) ; var i , index ; begin
53985: LD_INT 0
53987: PPUSH
53988: PPUSH
53989: PPUSH
// result := [ ] ;
53990: LD_ADDR_VAR 0 2
53994: PUSH
53995: EMPTY
53996: ST_TO_ADDR
// if not array then
53997: LD_VAR 0 1
54001: NOT
54002: IFFALSE 54006
// exit ;
54004: GO 54105
// Randomize ;
54006: CALL_OW 10
// for i = array downto 1 do
54010: LD_ADDR_VAR 0 3
54014: PUSH
54015: DOUBLE
54016: LD_VAR 0 1
54020: INC
54021: ST_TO_ADDR
54022: LD_INT 1
54024: PUSH
54025: FOR_DOWNTO
54026: IFFALSE 54103
// begin index := rand ( 1 , array ) ;
54028: LD_ADDR_VAR 0 4
54032: PUSH
54033: LD_INT 1
54035: PPUSH
54036: LD_VAR 0 1
54040: PPUSH
54041: CALL_OW 12
54045: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54046: LD_ADDR_VAR 0 2
54050: PUSH
54051: LD_VAR 0 2
54055: PPUSH
54056: LD_VAR 0 2
54060: PUSH
54061: LD_INT 1
54063: PLUS
54064: PPUSH
54065: LD_VAR 0 1
54069: PUSH
54070: LD_VAR 0 4
54074: ARRAY
54075: PPUSH
54076: CALL_OW 2
54080: ST_TO_ADDR
// array := Delete ( array , index ) ;
54081: LD_ADDR_VAR 0 1
54085: PUSH
54086: LD_VAR 0 1
54090: PPUSH
54091: LD_VAR 0 4
54095: PPUSH
54096: CALL_OW 3
54100: ST_TO_ADDR
// end ;
54101: GO 54025
54103: POP
54104: POP
// end ;
54105: LD_VAR 0 2
54109: RET
// export function GetBaseMaterials ( base ) ; begin
54110: LD_INT 0
54112: PPUSH
// result := [ 0 , 0 , 0 ] ;
54113: LD_ADDR_VAR 0 2
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: LIST
54131: ST_TO_ADDR
// if not base then
54132: LD_VAR 0 1
54136: NOT
54137: IFFALSE 54141
// exit ;
54139: GO 54190
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54141: LD_ADDR_VAR 0 2
54145: PUSH
54146: LD_VAR 0 1
54150: PPUSH
54151: LD_INT 1
54153: PPUSH
54154: CALL_OW 275
54158: PUSH
54159: LD_VAR 0 1
54163: PPUSH
54164: LD_INT 2
54166: PPUSH
54167: CALL_OW 275
54171: PUSH
54172: LD_VAR 0 1
54176: PPUSH
54177: LD_INT 3
54179: PPUSH
54180: CALL_OW 275
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// end ; end_of_file
54190: LD_VAR 0 2
54194: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
54195: GO 54197
54197: DISABLE
// begin ru_radar := 98 ;
54198: LD_ADDR_EXP 45
54202: PUSH
54203: LD_INT 98
54205: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
54206: LD_ADDR_EXP 46
54210: PUSH
54211: LD_INT 89
54213: ST_TO_ADDR
// us_hack := 99 ;
54214: LD_ADDR_EXP 47
54218: PUSH
54219: LD_INT 99
54221: ST_TO_ADDR
// us_artillery := 97 ;
54222: LD_ADDR_EXP 48
54226: PUSH
54227: LD_INT 97
54229: ST_TO_ADDR
// ar_bio_bomb := 91 ;
54230: LD_ADDR_EXP 49
54234: PUSH
54235: LD_INT 91
54237: ST_TO_ADDR
// end ; end_of_file
54238: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
54239: LD_INT 0
54241: PPUSH
54242: PPUSH
// skirmish := false ;
54243: LD_ADDR_EXP 50
54247: PUSH
54248: LD_INT 0
54250: ST_TO_ADDR
// debug_mc := false ;
54251: LD_ADDR_EXP 51
54255: PUSH
54256: LD_INT 0
54258: ST_TO_ADDR
// mc_bases := [ ] ;
54259: LD_ADDR_EXP 52
54263: PUSH
54264: EMPTY
54265: ST_TO_ADDR
// mc_sides := [ ] ;
54266: LD_ADDR_EXP 78
54270: PUSH
54271: EMPTY
54272: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
54273: LD_ADDR_EXP 53
54277: PUSH
54278: EMPTY
54279: ST_TO_ADDR
// mc_building_repairs := [ ] ;
54280: LD_ADDR_EXP 54
54284: PUSH
54285: EMPTY
54286: ST_TO_ADDR
// mc_need_heal := [ ] ;
54287: LD_ADDR_EXP 55
54291: PUSH
54292: EMPTY
54293: ST_TO_ADDR
// mc_healers := [ ] ;
54294: LD_ADDR_EXP 56
54298: PUSH
54299: EMPTY
54300: ST_TO_ADDR
// mc_build_list := [ ] ;
54301: LD_ADDR_EXP 57
54305: PUSH
54306: EMPTY
54307: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
54308: LD_ADDR_EXP 84
54312: PUSH
54313: EMPTY
54314: ST_TO_ADDR
// mc_builders := [ ] ;
54315: LD_ADDR_EXP 58
54319: PUSH
54320: EMPTY
54321: ST_TO_ADDR
// mc_construct_list := [ ] ;
54322: LD_ADDR_EXP 59
54326: PUSH
54327: EMPTY
54328: ST_TO_ADDR
// mc_turret_list := [ ] ;
54329: LD_ADDR_EXP 60
54333: PUSH
54334: EMPTY
54335: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
54336: LD_ADDR_EXP 61
54340: PUSH
54341: EMPTY
54342: ST_TO_ADDR
// mc_miners := [ ] ;
54343: LD_ADDR_EXP 66
54347: PUSH
54348: EMPTY
54349: ST_TO_ADDR
// mc_mines := [ ] ;
54350: LD_ADDR_EXP 65
54354: PUSH
54355: EMPTY
54356: ST_TO_ADDR
// mc_minefields := [ ] ;
54357: LD_ADDR_EXP 67
54361: PUSH
54362: EMPTY
54363: ST_TO_ADDR
// mc_crates := [ ] ;
54364: LD_ADDR_EXP 68
54368: PUSH
54369: EMPTY
54370: ST_TO_ADDR
// mc_crates_collector := [ ] ;
54371: LD_ADDR_EXP 69
54375: PUSH
54376: EMPTY
54377: ST_TO_ADDR
// mc_crates_area := [ ] ;
54378: LD_ADDR_EXP 70
54382: PUSH
54383: EMPTY
54384: ST_TO_ADDR
// mc_vehicles := [ ] ;
54385: LD_ADDR_EXP 71
54389: PUSH
54390: EMPTY
54391: ST_TO_ADDR
// mc_attack := [ ] ;
54392: LD_ADDR_EXP 72
54396: PUSH
54397: EMPTY
54398: ST_TO_ADDR
// mc_produce := [ ] ;
54399: LD_ADDR_EXP 73
54403: PUSH
54404: EMPTY
54405: ST_TO_ADDR
// mc_defender := [ ] ;
54406: LD_ADDR_EXP 74
54410: PUSH
54411: EMPTY
54412: ST_TO_ADDR
// mc_parking := [ ] ;
54413: LD_ADDR_EXP 76
54417: PUSH
54418: EMPTY
54419: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
54420: LD_ADDR_EXP 62
54424: PUSH
54425: EMPTY
54426: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
54427: LD_ADDR_EXP 64
54431: PUSH
54432: EMPTY
54433: ST_TO_ADDR
// mc_scan := [ ] ;
54434: LD_ADDR_EXP 75
54438: PUSH
54439: EMPTY
54440: ST_TO_ADDR
// mc_scan_area := [ ] ;
54441: LD_ADDR_EXP 77
54445: PUSH
54446: EMPTY
54447: ST_TO_ADDR
// mc_tech := [ ] ;
54448: LD_ADDR_EXP 79
54452: PUSH
54453: EMPTY
54454: ST_TO_ADDR
// mc_class := [ ] ;
54455: LD_ADDR_EXP 93
54459: PUSH
54460: EMPTY
54461: ST_TO_ADDR
// mc_class_case_use := [ ] ;
54462: LD_ADDR_EXP 94
54466: PUSH
54467: EMPTY
54468: ST_TO_ADDR
// end ;
54469: LD_VAR 0 1
54473: RET
// export function MC_Kill ( base ) ; begin
54474: LD_INT 0
54476: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
54477: LD_ADDR_EXP 52
54481: PUSH
54482: LD_EXP 52
54486: PPUSH
54487: LD_VAR 0 1
54491: PPUSH
54492: EMPTY
54493: PPUSH
54494: CALL_OW 1
54498: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54499: LD_ADDR_EXP 53
54503: PUSH
54504: LD_EXP 53
54508: PPUSH
54509: LD_VAR 0 1
54513: PPUSH
54514: EMPTY
54515: PPUSH
54516: CALL_OW 1
54520: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54521: LD_ADDR_EXP 54
54525: PUSH
54526: LD_EXP 54
54530: PPUSH
54531: LD_VAR 0 1
54535: PPUSH
54536: EMPTY
54537: PPUSH
54538: CALL_OW 1
54542: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54543: LD_ADDR_EXP 55
54547: PUSH
54548: LD_EXP 55
54552: PPUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: EMPTY
54559: PPUSH
54560: CALL_OW 1
54564: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54565: LD_ADDR_EXP 56
54569: PUSH
54570: LD_EXP 56
54574: PPUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: EMPTY
54581: PPUSH
54582: CALL_OW 1
54586: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54587: LD_ADDR_EXP 57
54591: PUSH
54592: LD_EXP 57
54596: PPUSH
54597: LD_VAR 0 1
54601: PPUSH
54602: EMPTY
54603: PPUSH
54604: CALL_OW 1
54608: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54609: LD_ADDR_EXP 58
54613: PUSH
54614: LD_EXP 58
54618: PPUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: EMPTY
54625: PPUSH
54626: CALL_OW 1
54630: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54631: LD_ADDR_EXP 59
54635: PUSH
54636: LD_EXP 59
54640: PPUSH
54641: LD_VAR 0 1
54645: PPUSH
54646: EMPTY
54647: PPUSH
54648: CALL_OW 1
54652: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54653: LD_ADDR_EXP 60
54657: PUSH
54658: LD_EXP 60
54662: PPUSH
54663: LD_VAR 0 1
54667: PPUSH
54668: EMPTY
54669: PPUSH
54670: CALL_OW 1
54674: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54675: LD_ADDR_EXP 61
54679: PUSH
54680: LD_EXP 61
54684: PPUSH
54685: LD_VAR 0 1
54689: PPUSH
54690: EMPTY
54691: PPUSH
54692: CALL_OW 1
54696: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54697: LD_ADDR_EXP 62
54701: PUSH
54702: LD_EXP 62
54706: PPUSH
54707: LD_VAR 0 1
54711: PPUSH
54712: EMPTY
54713: PPUSH
54714: CALL_OW 1
54718: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54719: LD_ADDR_EXP 63
54723: PUSH
54724: LD_EXP 63
54728: PPUSH
54729: LD_VAR 0 1
54733: PPUSH
54734: LD_INT 0
54736: PPUSH
54737: CALL_OW 1
54741: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54742: LD_ADDR_EXP 64
54746: PUSH
54747: LD_EXP 64
54751: PPUSH
54752: LD_VAR 0 1
54756: PPUSH
54757: EMPTY
54758: PPUSH
54759: CALL_OW 1
54763: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54764: LD_ADDR_EXP 65
54768: PUSH
54769: LD_EXP 65
54773: PPUSH
54774: LD_VAR 0 1
54778: PPUSH
54779: EMPTY
54780: PPUSH
54781: CALL_OW 1
54785: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54786: LD_ADDR_EXP 66
54790: PUSH
54791: LD_EXP 66
54795: PPUSH
54796: LD_VAR 0 1
54800: PPUSH
54801: EMPTY
54802: PPUSH
54803: CALL_OW 1
54807: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54808: LD_ADDR_EXP 67
54812: PUSH
54813: LD_EXP 67
54817: PPUSH
54818: LD_VAR 0 1
54822: PPUSH
54823: EMPTY
54824: PPUSH
54825: CALL_OW 1
54829: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54830: LD_ADDR_EXP 68
54834: PUSH
54835: LD_EXP 68
54839: PPUSH
54840: LD_VAR 0 1
54844: PPUSH
54845: EMPTY
54846: PPUSH
54847: CALL_OW 1
54851: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54852: LD_ADDR_EXP 69
54856: PUSH
54857: LD_EXP 69
54861: PPUSH
54862: LD_VAR 0 1
54866: PPUSH
54867: EMPTY
54868: PPUSH
54869: CALL_OW 1
54873: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54874: LD_ADDR_EXP 70
54878: PUSH
54879: LD_EXP 70
54883: PPUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: EMPTY
54890: PPUSH
54891: CALL_OW 1
54895: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54896: LD_ADDR_EXP 71
54900: PUSH
54901: LD_EXP 71
54905: PPUSH
54906: LD_VAR 0 1
54910: PPUSH
54911: EMPTY
54912: PPUSH
54913: CALL_OW 1
54917: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54918: LD_ADDR_EXP 72
54922: PUSH
54923: LD_EXP 72
54927: PPUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: EMPTY
54934: PPUSH
54935: CALL_OW 1
54939: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54940: LD_ADDR_EXP 73
54944: PUSH
54945: LD_EXP 73
54949: PPUSH
54950: LD_VAR 0 1
54954: PPUSH
54955: EMPTY
54956: PPUSH
54957: CALL_OW 1
54961: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54962: LD_ADDR_EXP 74
54966: PUSH
54967: LD_EXP 74
54971: PPUSH
54972: LD_VAR 0 1
54976: PPUSH
54977: EMPTY
54978: PPUSH
54979: CALL_OW 1
54983: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54984: LD_ADDR_EXP 75
54988: PUSH
54989: LD_EXP 75
54993: PPUSH
54994: LD_VAR 0 1
54998: PPUSH
54999: EMPTY
55000: PPUSH
55001: CALL_OW 1
55005: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55006: LD_ADDR_EXP 76
55010: PUSH
55011: LD_EXP 76
55015: PPUSH
55016: LD_VAR 0 1
55020: PPUSH
55021: EMPTY
55022: PPUSH
55023: CALL_OW 1
55027: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55028: LD_ADDR_EXP 77
55032: PUSH
55033: LD_EXP 77
55037: PPUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: EMPTY
55044: PPUSH
55045: CALL_OW 1
55049: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55050: LD_ADDR_EXP 79
55054: PUSH
55055: LD_EXP 79
55059: PPUSH
55060: LD_VAR 0 1
55064: PPUSH
55065: EMPTY
55066: PPUSH
55067: CALL_OW 1
55071: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55072: LD_ADDR_EXP 81
55076: PUSH
55077: LD_EXP 81
55081: PPUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: EMPTY
55088: PPUSH
55089: CALL_OW 1
55093: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55094: LD_ADDR_EXP 82
55098: PUSH
55099: LD_EXP 82
55103: PPUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: EMPTY
55110: PPUSH
55111: CALL_OW 1
55115: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55116: LD_ADDR_EXP 83
55120: PUSH
55121: LD_EXP 83
55125: PPUSH
55126: LD_VAR 0 1
55130: PPUSH
55131: EMPTY
55132: PPUSH
55133: CALL_OW 1
55137: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55138: LD_ADDR_EXP 84
55142: PUSH
55143: LD_EXP 84
55147: PPUSH
55148: LD_VAR 0 1
55152: PPUSH
55153: EMPTY
55154: PPUSH
55155: CALL_OW 1
55159: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55160: LD_ADDR_EXP 85
55164: PUSH
55165: LD_EXP 85
55169: PPUSH
55170: LD_VAR 0 1
55174: PPUSH
55175: EMPTY
55176: PPUSH
55177: CALL_OW 1
55181: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55182: LD_ADDR_EXP 86
55186: PUSH
55187: LD_EXP 86
55191: PPUSH
55192: LD_VAR 0 1
55196: PPUSH
55197: EMPTY
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55204: LD_ADDR_EXP 87
55208: PUSH
55209: LD_EXP 87
55213: PPUSH
55214: LD_VAR 0 1
55218: PPUSH
55219: EMPTY
55220: PPUSH
55221: CALL_OW 1
55225: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55226: LD_ADDR_EXP 88
55230: PUSH
55231: LD_EXP 88
55235: PPUSH
55236: LD_VAR 0 1
55240: PPUSH
55241: EMPTY
55242: PPUSH
55243: CALL_OW 1
55247: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55248: LD_ADDR_EXP 89
55252: PUSH
55253: LD_EXP 89
55257: PPUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: EMPTY
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55270: LD_ADDR_EXP 90
55274: PUSH
55275: LD_EXP 90
55279: PPUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: EMPTY
55286: PPUSH
55287: CALL_OW 1
55291: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55292: LD_ADDR_EXP 91
55296: PUSH
55297: LD_EXP 91
55301: PPUSH
55302: LD_VAR 0 1
55306: PPUSH
55307: EMPTY
55308: PPUSH
55309: CALL_OW 1
55313: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55314: LD_ADDR_EXP 92
55318: PUSH
55319: LD_EXP 92
55323: PPUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: EMPTY
55330: PPUSH
55331: CALL_OW 1
55335: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55336: LD_ADDR_EXP 93
55340: PUSH
55341: LD_EXP 93
55345: PPUSH
55346: LD_VAR 0 1
55350: PPUSH
55351: EMPTY
55352: PPUSH
55353: CALL_OW 1
55357: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55358: LD_ADDR_EXP 94
55362: PUSH
55363: LD_EXP 94
55367: PPUSH
55368: LD_VAR 0 1
55372: PPUSH
55373: LD_INT 0
55375: PPUSH
55376: CALL_OW 1
55380: ST_TO_ADDR
// end ;
55381: LD_VAR 0 2
55385: RET
// export function MC_Add ( side , units ) ; var base ; begin
55386: LD_INT 0
55388: PPUSH
55389: PPUSH
// base := mc_bases + 1 ;
55390: LD_ADDR_VAR 0 4
55394: PUSH
55395: LD_EXP 52
55399: PUSH
55400: LD_INT 1
55402: PLUS
55403: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
55404: LD_ADDR_EXP 78
55408: PUSH
55409: LD_EXP 78
55413: PPUSH
55414: LD_VAR 0 4
55418: PPUSH
55419: LD_VAR 0 1
55423: PPUSH
55424: CALL_OW 1
55428: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
55429: LD_ADDR_EXP 52
55433: PUSH
55434: LD_EXP 52
55438: PPUSH
55439: LD_VAR 0 4
55443: PPUSH
55444: LD_VAR 0 2
55448: PPUSH
55449: CALL_OW 1
55453: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55454: LD_ADDR_EXP 53
55458: PUSH
55459: LD_EXP 53
55463: PPUSH
55464: LD_VAR 0 4
55468: PPUSH
55469: EMPTY
55470: PPUSH
55471: CALL_OW 1
55475: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55476: LD_ADDR_EXP 54
55480: PUSH
55481: LD_EXP 54
55485: PPUSH
55486: LD_VAR 0 4
55490: PPUSH
55491: EMPTY
55492: PPUSH
55493: CALL_OW 1
55497: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55498: LD_ADDR_EXP 55
55502: PUSH
55503: LD_EXP 55
55507: PPUSH
55508: LD_VAR 0 4
55512: PPUSH
55513: EMPTY
55514: PPUSH
55515: CALL_OW 1
55519: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55520: LD_ADDR_EXP 56
55524: PUSH
55525: LD_EXP 56
55529: PPUSH
55530: LD_VAR 0 4
55534: PPUSH
55535: EMPTY
55536: PPUSH
55537: CALL_OW 1
55541: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55542: LD_ADDR_EXP 57
55546: PUSH
55547: LD_EXP 57
55551: PPUSH
55552: LD_VAR 0 4
55556: PPUSH
55557: EMPTY
55558: PPUSH
55559: CALL_OW 1
55563: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
55564: LD_ADDR_EXP 58
55568: PUSH
55569: LD_EXP 58
55573: PPUSH
55574: LD_VAR 0 4
55578: PPUSH
55579: EMPTY
55580: PPUSH
55581: CALL_OW 1
55585: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
55586: LD_ADDR_EXP 59
55590: PUSH
55591: LD_EXP 59
55595: PPUSH
55596: LD_VAR 0 4
55600: PPUSH
55601: EMPTY
55602: PPUSH
55603: CALL_OW 1
55607: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
55608: LD_ADDR_EXP 60
55612: PUSH
55613: LD_EXP 60
55617: PPUSH
55618: LD_VAR 0 4
55622: PPUSH
55623: EMPTY
55624: PPUSH
55625: CALL_OW 1
55629: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
55630: LD_ADDR_EXP 61
55634: PUSH
55635: LD_EXP 61
55639: PPUSH
55640: LD_VAR 0 4
55644: PPUSH
55645: EMPTY
55646: PPUSH
55647: CALL_OW 1
55651: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
55652: LD_ADDR_EXP 62
55656: PUSH
55657: LD_EXP 62
55661: PPUSH
55662: LD_VAR 0 4
55666: PPUSH
55667: EMPTY
55668: PPUSH
55669: CALL_OW 1
55673: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
55674: LD_ADDR_EXP 63
55678: PUSH
55679: LD_EXP 63
55683: PPUSH
55684: LD_VAR 0 4
55688: PPUSH
55689: LD_INT 0
55691: PPUSH
55692: CALL_OW 1
55696: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
55697: LD_ADDR_EXP 64
55701: PUSH
55702: LD_EXP 64
55706: PPUSH
55707: LD_VAR 0 4
55711: PPUSH
55712: EMPTY
55713: PPUSH
55714: CALL_OW 1
55718: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
55719: LD_ADDR_EXP 65
55723: PUSH
55724: LD_EXP 65
55728: PPUSH
55729: LD_VAR 0 4
55733: PPUSH
55734: EMPTY
55735: PPUSH
55736: CALL_OW 1
55740: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55741: LD_ADDR_EXP 66
55745: PUSH
55746: LD_EXP 66
55750: PPUSH
55751: LD_VAR 0 4
55755: PPUSH
55756: EMPTY
55757: PPUSH
55758: CALL_OW 1
55762: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55763: LD_ADDR_EXP 67
55767: PUSH
55768: LD_EXP 67
55772: PPUSH
55773: LD_VAR 0 4
55777: PPUSH
55778: EMPTY
55779: PPUSH
55780: CALL_OW 1
55784: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55785: LD_ADDR_EXP 68
55789: PUSH
55790: LD_EXP 68
55794: PPUSH
55795: LD_VAR 0 4
55799: PPUSH
55800: EMPTY
55801: PPUSH
55802: CALL_OW 1
55806: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55807: LD_ADDR_EXP 69
55811: PUSH
55812: LD_EXP 69
55816: PPUSH
55817: LD_VAR 0 4
55821: PPUSH
55822: EMPTY
55823: PPUSH
55824: CALL_OW 1
55828: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
55829: LD_ADDR_EXP 70
55833: PUSH
55834: LD_EXP 70
55838: PPUSH
55839: LD_VAR 0 4
55843: PPUSH
55844: EMPTY
55845: PPUSH
55846: CALL_OW 1
55850: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
55851: LD_ADDR_EXP 71
55855: PUSH
55856: LD_EXP 71
55860: PPUSH
55861: LD_VAR 0 4
55865: PPUSH
55866: EMPTY
55867: PPUSH
55868: CALL_OW 1
55872: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
55873: LD_ADDR_EXP 72
55877: PUSH
55878: LD_EXP 72
55882: PPUSH
55883: LD_VAR 0 4
55887: PPUSH
55888: EMPTY
55889: PPUSH
55890: CALL_OW 1
55894: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
55895: LD_ADDR_EXP 73
55899: PUSH
55900: LD_EXP 73
55904: PPUSH
55905: LD_VAR 0 4
55909: PPUSH
55910: EMPTY
55911: PPUSH
55912: CALL_OW 1
55916: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55917: LD_ADDR_EXP 74
55921: PUSH
55922: LD_EXP 74
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: EMPTY
55933: PPUSH
55934: CALL_OW 1
55938: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55939: LD_ADDR_EXP 75
55943: PUSH
55944: LD_EXP 75
55948: PPUSH
55949: LD_VAR 0 4
55953: PPUSH
55954: EMPTY
55955: PPUSH
55956: CALL_OW 1
55960: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55961: LD_ADDR_EXP 76
55965: PUSH
55966: LD_EXP 76
55970: PPUSH
55971: LD_VAR 0 4
55975: PPUSH
55976: EMPTY
55977: PPUSH
55978: CALL_OW 1
55982: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55983: LD_ADDR_EXP 77
55987: PUSH
55988: LD_EXP 77
55992: PPUSH
55993: LD_VAR 0 4
55997: PPUSH
55998: EMPTY
55999: PPUSH
56000: CALL_OW 1
56004: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56005: LD_ADDR_EXP 79
56009: PUSH
56010: LD_EXP 79
56014: PPUSH
56015: LD_VAR 0 4
56019: PPUSH
56020: EMPTY
56021: PPUSH
56022: CALL_OW 1
56026: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56027: LD_ADDR_EXP 81
56031: PUSH
56032: LD_EXP 81
56036: PPUSH
56037: LD_VAR 0 4
56041: PPUSH
56042: EMPTY
56043: PPUSH
56044: CALL_OW 1
56048: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56049: LD_ADDR_EXP 82
56053: PUSH
56054: LD_EXP 82
56058: PPUSH
56059: LD_VAR 0 4
56063: PPUSH
56064: EMPTY
56065: PPUSH
56066: CALL_OW 1
56070: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56071: LD_ADDR_EXP 83
56075: PUSH
56076: LD_EXP 83
56080: PPUSH
56081: LD_VAR 0 4
56085: PPUSH
56086: EMPTY
56087: PPUSH
56088: CALL_OW 1
56092: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56093: LD_ADDR_EXP 84
56097: PUSH
56098: LD_EXP 84
56102: PPUSH
56103: LD_VAR 0 4
56107: PPUSH
56108: EMPTY
56109: PPUSH
56110: CALL_OW 1
56114: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56115: LD_ADDR_EXP 85
56119: PUSH
56120: LD_EXP 85
56124: PPUSH
56125: LD_VAR 0 4
56129: PPUSH
56130: EMPTY
56131: PPUSH
56132: CALL_OW 1
56136: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56137: LD_ADDR_EXP 86
56141: PUSH
56142: LD_EXP 86
56146: PPUSH
56147: LD_VAR 0 4
56151: PPUSH
56152: EMPTY
56153: PPUSH
56154: CALL_OW 1
56158: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56159: LD_ADDR_EXP 87
56163: PUSH
56164: LD_EXP 87
56168: PPUSH
56169: LD_VAR 0 4
56173: PPUSH
56174: EMPTY
56175: PPUSH
56176: CALL_OW 1
56180: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56181: LD_ADDR_EXP 88
56185: PUSH
56186: LD_EXP 88
56190: PPUSH
56191: LD_VAR 0 4
56195: PPUSH
56196: EMPTY
56197: PPUSH
56198: CALL_OW 1
56202: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56203: LD_ADDR_EXP 89
56207: PUSH
56208: LD_EXP 89
56212: PPUSH
56213: LD_VAR 0 4
56217: PPUSH
56218: EMPTY
56219: PPUSH
56220: CALL_OW 1
56224: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56225: LD_ADDR_EXP 90
56229: PUSH
56230: LD_EXP 90
56234: PPUSH
56235: LD_VAR 0 4
56239: PPUSH
56240: EMPTY
56241: PPUSH
56242: CALL_OW 1
56246: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56247: LD_ADDR_EXP 91
56251: PUSH
56252: LD_EXP 91
56256: PPUSH
56257: LD_VAR 0 4
56261: PPUSH
56262: EMPTY
56263: PPUSH
56264: CALL_OW 1
56268: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56269: LD_ADDR_EXP 92
56273: PUSH
56274: LD_EXP 92
56278: PPUSH
56279: LD_VAR 0 4
56283: PPUSH
56284: EMPTY
56285: PPUSH
56286: CALL_OW 1
56290: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56291: LD_ADDR_EXP 93
56295: PUSH
56296: LD_EXP 93
56300: PPUSH
56301: LD_VAR 0 4
56305: PPUSH
56306: EMPTY
56307: PPUSH
56308: CALL_OW 1
56312: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56313: LD_ADDR_EXP 94
56317: PUSH
56318: LD_EXP 94
56322: PPUSH
56323: LD_VAR 0 4
56327: PPUSH
56328: LD_INT 0
56330: PPUSH
56331: CALL_OW 1
56335: ST_TO_ADDR
// result := base ;
56336: LD_ADDR_VAR 0 3
56340: PUSH
56341: LD_VAR 0 4
56345: ST_TO_ADDR
// end ;
56346: LD_VAR 0 3
56350: RET
// export function MC_Start ( ) ; var i ; begin
56351: LD_INT 0
56353: PPUSH
56354: PPUSH
// for i = 1 to mc_bases do
56355: LD_ADDR_VAR 0 2
56359: PUSH
56360: DOUBLE
56361: LD_INT 1
56363: DEC
56364: ST_TO_ADDR
56365: LD_EXP 52
56369: PUSH
56370: FOR_TO
56371: IFFALSE 57448
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
56373: LD_ADDR_EXP 52
56377: PUSH
56378: LD_EXP 52
56382: PPUSH
56383: LD_VAR 0 2
56387: PPUSH
56388: LD_EXP 52
56392: PUSH
56393: LD_VAR 0 2
56397: ARRAY
56398: PUSH
56399: LD_INT 0
56401: DIFF
56402: PPUSH
56403: CALL_OW 1
56407: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
56408: LD_ADDR_EXP 53
56412: PUSH
56413: LD_EXP 53
56417: PPUSH
56418: LD_VAR 0 2
56422: PPUSH
56423: EMPTY
56424: PPUSH
56425: CALL_OW 1
56429: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56430: LD_ADDR_EXP 54
56434: PUSH
56435: LD_EXP 54
56439: PPUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: EMPTY
56446: PPUSH
56447: CALL_OW 1
56451: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
56452: LD_ADDR_EXP 55
56456: PUSH
56457: LD_EXP 55
56461: PPUSH
56462: LD_VAR 0 2
56466: PPUSH
56467: EMPTY
56468: PPUSH
56469: CALL_OW 1
56473: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
56474: LD_ADDR_EXP 56
56478: PUSH
56479: LD_EXP 56
56483: PPUSH
56484: LD_VAR 0 2
56488: PPUSH
56489: EMPTY
56490: PUSH
56491: EMPTY
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
56502: LD_ADDR_EXP 57
56506: PUSH
56507: LD_EXP 57
56511: PPUSH
56512: LD_VAR 0 2
56516: PPUSH
56517: EMPTY
56518: PPUSH
56519: CALL_OW 1
56523: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
56524: LD_ADDR_EXP 84
56528: PUSH
56529: LD_EXP 84
56533: PPUSH
56534: LD_VAR 0 2
56538: PPUSH
56539: EMPTY
56540: PPUSH
56541: CALL_OW 1
56545: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
56546: LD_ADDR_EXP 58
56550: PUSH
56551: LD_EXP 58
56555: PPUSH
56556: LD_VAR 0 2
56560: PPUSH
56561: EMPTY
56562: PPUSH
56563: CALL_OW 1
56567: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
56568: LD_ADDR_EXP 59
56572: PUSH
56573: LD_EXP 59
56577: PPUSH
56578: LD_VAR 0 2
56582: PPUSH
56583: EMPTY
56584: PPUSH
56585: CALL_OW 1
56589: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
56590: LD_ADDR_EXP 60
56594: PUSH
56595: LD_EXP 60
56599: PPUSH
56600: LD_VAR 0 2
56604: PPUSH
56605: LD_EXP 52
56609: PUSH
56610: LD_VAR 0 2
56614: ARRAY
56615: PPUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 30
56621: PUSH
56622: LD_INT 32
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 30
56631: PUSH
56632: LD_INT 33
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: PPUSH
56644: CALL_OW 72
56648: PPUSH
56649: CALL_OW 1
56653: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
56654: LD_ADDR_EXP 61
56658: PUSH
56659: LD_EXP 61
56663: PPUSH
56664: LD_VAR 0 2
56668: PPUSH
56669: LD_EXP 52
56673: PUSH
56674: LD_VAR 0 2
56678: ARRAY
56679: PPUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 30
56685: PUSH
56686: LD_INT 32
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 30
56695: PUSH
56696: LD_INT 31
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 58
56710: PUSH
56711: EMPTY
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PPUSH
56718: CALL_OW 72
56722: PPUSH
56723: CALL_OW 1
56727: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
56728: LD_ADDR_EXP 62
56732: PUSH
56733: LD_EXP 62
56737: PPUSH
56738: LD_VAR 0 2
56742: PPUSH
56743: EMPTY
56744: PPUSH
56745: CALL_OW 1
56749: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
56750: LD_ADDR_EXP 66
56754: PUSH
56755: LD_EXP 66
56759: PPUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: EMPTY
56766: PPUSH
56767: CALL_OW 1
56771: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
56772: LD_ADDR_EXP 65
56776: PUSH
56777: LD_EXP 65
56781: PPUSH
56782: LD_VAR 0 2
56786: PPUSH
56787: EMPTY
56788: PPUSH
56789: CALL_OW 1
56793: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
56794: LD_ADDR_EXP 67
56798: PUSH
56799: LD_EXP 67
56803: PPUSH
56804: LD_VAR 0 2
56808: PPUSH
56809: EMPTY
56810: PPUSH
56811: CALL_OW 1
56815: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
56816: LD_ADDR_EXP 68
56820: PUSH
56821: LD_EXP 68
56825: PPUSH
56826: LD_VAR 0 2
56830: PPUSH
56831: EMPTY
56832: PPUSH
56833: CALL_OW 1
56837: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
56838: LD_ADDR_EXP 69
56842: PUSH
56843: LD_EXP 69
56847: PPUSH
56848: LD_VAR 0 2
56852: PPUSH
56853: EMPTY
56854: PPUSH
56855: CALL_OW 1
56859: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
56860: LD_ADDR_EXP 70
56864: PUSH
56865: LD_EXP 70
56869: PPUSH
56870: LD_VAR 0 2
56874: PPUSH
56875: EMPTY
56876: PPUSH
56877: CALL_OW 1
56881: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
56882: LD_ADDR_EXP 71
56886: PUSH
56887: LD_EXP 71
56891: PPUSH
56892: LD_VAR 0 2
56896: PPUSH
56897: EMPTY
56898: PPUSH
56899: CALL_OW 1
56903: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56904: LD_ADDR_EXP 72
56908: PUSH
56909: LD_EXP 72
56913: PPUSH
56914: LD_VAR 0 2
56918: PPUSH
56919: EMPTY
56920: PPUSH
56921: CALL_OW 1
56925: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
56926: LD_ADDR_EXP 73
56930: PUSH
56931: LD_EXP 73
56935: PPUSH
56936: LD_VAR 0 2
56940: PPUSH
56941: EMPTY
56942: PPUSH
56943: CALL_OW 1
56947: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56948: LD_ADDR_EXP 74
56952: PUSH
56953: LD_EXP 74
56957: PPUSH
56958: LD_VAR 0 2
56962: PPUSH
56963: EMPTY
56964: PPUSH
56965: CALL_OW 1
56969: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56970: LD_ADDR_EXP 63
56974: PUSH
56975: LD_EXP 63
56979: PPUSH
56980: LD_VAR 0 2
56984: PPUSH
56985: LD_INT 0
56987: PPUSH
56988: CALL_OW 1
56992: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56993: LD_ADDR_EXP 76
56997: PUSH
56998: LD_EXP 76
57002: PPUSH
57003: LD_VAR 0 2
57007: PPUSH
57008: LD_INT 0
57010: PPUSH
57011: CALL_OW 1
57015: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
57016: LD_ADDR_EXP 64
57020: PUSH
57021: LD_EXP 64
57025: PPUSH
57026: LD_VAR 0 2
57030: PPUSH
57031: EMPTY
57032: PPUSH
57033: CALL_OW 1
57037: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
57038: LD_ADDR_EXP 75
57042: PUSH
57043: LD_EXP 75
57047: PPUSH
57048: LD_VAR 0 2
57052: PPUSH
57053: LD_INT 0
57055: PPUSH
57056: CALL_OW 1
57060: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
57061: LD_ADDR_EXP 77
57065: PUSH
57066: LD_EXP 77
57070: PPUSH
57071: LD_VAR 0 2
57075: PPUSH
57076: EMPTY
57077: PPUSH
57078: CALL_OW 1
57082: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
57083: LD_ADDR_EXP 80
57087: PUSH
57088: LD_EXP 80
57092: PPUSH
57093: LD_VAR 0 2
57097: PPUSH
57098: LD_INT 0
57100: PPUSH
57101: CALL_OW 1
57105: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
57106: LD_ADDR_EXP 81
57110: PUSH
57111: LD_EXP 81
57115: PPUSH
57116: LD_VAR 0 2
57120: PPUSH
57121: EMPTY
57122: PPUSH
57123: CALL_OW 1
57127: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57128: LD_ADDR_EXP 82
57132: PUSH
57133: LD_EXP 82
57137: PPUSH
57138: LD_VAR 0 2
57142: PPUSH
57143: EMPTY
57144: PPUSH
57145: CALL_OW 1
57149: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57150: LD_ADDR_EXP 83
57154: PUSH
57155: LD_EXP 83
57159: PPUSH
57160: LD_VAR 0 2
57164: PPUSH
57165: EMPTY
57166: PPUSH
57167: CALL_OW 1
57171: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
57172: LD_ADDR_EXP 85
57176: PUSH
57177: LD_EXP 85
57181: PPUSH
57182: LD_VAR 0 2
57186: PPUSH
57187: LD_EXP 52
57191: PUSH
57192: LD_VAR 0 2
57196: ARRAY
57197: PPUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 30
57203: PUSH
57204: LD_INT 6
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 30
57213: PUSH
57214: LD_INT 7
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 30
57223: PUSH
57224: LD_INT 8
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: PPUSH
57237: CALL_OW 72
57241: PPUSH
57242: CALL_OW 1
57246: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
57247: LD_ADDR_EXP 86
57251: PUSH
57252: LD_EXP 86
57256: PPUSH
57257: LD_VAR 0 2
57261: PPUSH
57262: EMPTY
57263: PPUSH
57264: CALL_OW 1
57268: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
57269: LD_ADDR_EXP 87
57273: PUSH
57274: LD_EXP 87
57278: PPUSH
57279: LD_VAR 0 2
57283: PPUSH
57284: EMPTY
57285: PPUSH
57286: CALL_OW 1
57290: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
57291: LD_ADDR_EXP 88
57295: PUSH
57296: LD_EXP 88
57300: PPUSH
57301: LD_VAR 0 2
57305: PPUSH
57306: EMPTY
57307: PPUSH
57308: CALL_OW 1
57312: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
57313: LD_ADDR_EXP 89
57317: PUSH
57318: LD_EXP 89
57322: PPUSH
57323: LD_VAR 0 2
57327: PPUSH
57328: EMPTY
57329: PPUSH
57330: CALL_OW 1
57334: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
57335: LD_ADDR_EXP 90
57339: PUSH
57340: LD_EXP 90
57344: PPUSH
57345: LD_VAR 0 2
57349: PPUSH
57350: EMPTY
57351: PPUSH
57352: CALL_OW 1
57356: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
57357: LD_ADDR_EXP 91
57361: PUSH
57362: LD_EXP 91
57366: PPUSH
57367: LD_VAR 0 2
57371: PPUSH
57372: EMPTY
57373: PPUSH
57374: CALL_OW 1
57378: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
57379: LD_ADDR_EXP 92
57383: PUSH
57384: LD_EXP 92
57388: PPUSH
57389: LD_VAR 0 2
57393: PPUSH
57394: EMPTY
57395: PPUSH
57396: CALL_OW 1
57400: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
57401: LD_ADDR_EXP 93
57405: PUSH
57406: LD_EXP 93
57410: PPUSH
57411: LD_VAR 0 2
57415: PPUSH
57416: EMPTY
57417: PPUSH
57418: CALL_OW 1
57422: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
57423: LD_ADDR_EXP 94
57427: PUSH
57428: LD_EXP 94
57432: PPUSH
57433: LD_VAR 0 2
57437: PPUSH
57438: LD_INT 0
57440: PPUSH
57441: CALL_OW 1
57445: ST_TO_ADDR
// end ;
57446: GO 56370
57448: POP
57449: POP
// MC_InitSides ( ) ;
57450: CALL 57736 0 0
// MC_InitResearch ( ) ;
57454: CALL 57475 0 0
// CustomInitMacro ( ) ;
57458: CALL 5367 0 0
// skirmish := true ;
57462: LD_ADDR_EXP 50
57466: PUSH
57467: LD_INT 1
57469: ST_TO_ADDR
// end ;
57470: LD_VAR 0 1
57474: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
57475: LD_INT 0
57477: PPUSH
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
// if not mc_bases then
57483: LD_EXP 52
57487: NOT
57488: IFFALSE 57492
// exit ;
57490: GO 57731
// for i = 1 to 8 do
57492: LD_ADDR_VAR 0 2
57496: PUSH
57497: DOUBLE
57498: LD_INT 1
57500: DEC
57501: ST_TO_ADDR
57502: LD_INT 8
57504: PUSH
57505: FOR_TO
57506: IFFALSE 57532
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
57508: LD_ADDR_EXP 79
57512: PUSH
57513: LD_EXP 79
57517: PPUSH
57518: LD_VAR 0 2
57522: PPUSH
57523: EMPTY
57524: PPUSH
57525: CALL_OW 1
57529: ST_TO_ADDR
57530: GO 57505
57532: POP
57533: POP
// tmp := [ ] ;
57534: LD_ADDR_VAR 0 5
57538: PUSH
57539: EMPTY
57540: ST_TO_ADDR
// for i = 1 to mc_sides do
57541: LD_ADDR_VAR 0 2
57545: PUSH
57546: DOUBLE
57547: LD_INT 1
57549: DEC
57550: ST_TO_ADDR
57551: LD_EXP 78
57555: PUSH
57556: FOR_TO
57557: IFFALSE 57615
// if not mc_sides [ i ] in tmp then
57559: LD_EXP 78
57563: PUSH
57564: LD_VAR 0 2
57568: ARRAY
57569: PUSH
57570: LD_VAR 0 5
57574: IN
57575: NOT
57576: IFFALSE 57613
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
57578: LD_ADDR_VAR 0 5
57582: PUSH
57583: LD_VAR 0 5
57587: PPUSH
57588: LD_VAR 0 5
57592: PUSH
57593: LD_INT 1
57595: PLUS
57596: PPUSH
57597: LD_EXP 78
57601: PUSH
57602: LD_VAR 0 2
57606: ARRAY
57607: PPUSH
57608: CALL_OW 2
57612: ST_TO_ADDR
57613: GO 57556
57615: POP
57616: POP
// if not tmp then
57617: LD_VAR 0 5
57621: NOT
57622: IFFALSE 57626
// exit ;
57624: GO 57731
// for j in tmp do
57626: LD_ADDR_VAR 0 3
57630: PUSH
57631: LD_VAR 0 5
57635: PUSH
57636: FOR_IN
57637: IFFALSE 57729
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
57639: LD_ADDR_VAR 0 6
57643: PUSH
57644: LD_INT 22
57646: PUSH
57647: LD_VAR 0 3
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PPUSH
57656: CALL_OW 69
57660: ST_TO_ADDR
// if not un then
57661: LD_VAR 0 6
57665: NOT
57666: IFFALSE 57670
// continue ;
57668: GO 57636
// nation := GetNation ( un [ 1 ] ) ;
57670: LD_ADDR_VAR 0 4
57674: PUSH
57675: LD_VAR 0 6
57679: PUSH
57680: LD_INT 1
57682: ARRAY
57683: PPUSH
57684: CALL_OW 248
57688: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
57689: LD_ADDR_EXP 79
57693: PUSH
57694: LD_EXP 79
57698: PPUSH
57699: LD_VAR 0 3
57703: PPUSH
57704: LD_VAR 0 3
57708: PPUSH
57709: LD_VAR 0 4
57713: PPUSH
57714: LD_INT 1
57716: PPUSH
57717: CALL 11245 0 3
57721: PPUSH
57722: CALL_OW 1
57726: ST_TO_ADDR
// end ;
57727: GO 57636
57729: POP
57730: POP
// end ;
57731: LD_VAR 0 1
57735: RET
// export function MC_InitSides ( ) ; var i ; begin
57736: LD_INT 0
57738: PPUSH
57739: PPUSH
// if not mc_bases then
57740: LD_EXP 52
57744: NOT
57745: IFFALSE 57749
// exit ;
57747: GO 57823
// for i = 1 to mc_bases do
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: DOUBLE
57755: LD_INT 1
57757: DEC
57758: ST_TO_ADDR
57759: LD_EXP 52
57763: PUSH
57764: FOR_TO
57765: IFFALSE 57821
// if mc_bases [ i ] then
57767: LD_EXP 52
57771: PUSH
57772: LD_VAR 0 2
57776: ARRAY
57777: IFFALSE 57819
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57779: LD_ADDR_EXP 78
57783: PUSH
57784: LD_EXP 78
57788: PPUSH
57789: LD_VAR 0 2
57793: PPUSH
57794: LD_EXP 52
57798: PUSH
57799: LD_VAR 0 2
57803: ARRAY
57804: PUSH
57805: LD_INT 1
57807: ARRAY
57808: PPUSH
57809: CALL_OW 255
57813: PPUSH
57814: CALL_OW 1
57818: ST_TO_ADDR
57819: GO 57764
57821: POP
57822: POP
// end ;
57823: LD_VAR 0 1
57827: RET
// every 0 0$01 trigger skirmish do
57828: LD_EXP 50
57832: IFFALSE 57986
57834: GO 57836
57836: DISABLE
// begin enable ;
57837: ENABLE
// MC_CheckBuildings ( ) ;
57838: CALL 62484 0 0
// MC_CheckPeopleLife ( ) ;
57842: CALL 62609 0 0
// RaiseSailEvent ( 100 ) ;
57846: LD_INT 100
57848: PPUSH
57849: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
57853: LD_INT 103
57855: PPUSH
57856: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
57860: LD_INT 104
57862: PPUSH
57863: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
57867: LD_INT 105
57869: PPUSH
57870: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
57874: LD_INT 106
57876: PPUSH
57877: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
57881: LD_INT 107
57883: PPUSH
57884: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
57888: LD_INT 108
57890: PPUSH
57891: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
57895: LD_INT 109
57897: PPUSH
57898: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
57902: LD_INT 110
57904: PPUSH
57905: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
57909: LD_INT 111
57911: PPUSH
57912: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
57916: LD_INT 112
57918: PPUSH
57919: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
57923: LD_INT 113
57925: PPUSH
57926: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
57930: LD_INT 120
57932: PPUSH
57933: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57937: LD_INT 121
57939: PPUSH
57940: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57944: LD_INT 122
57946: PPUSH
57947: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57951: LD_INT 123
57953: PPUSH
57954: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57958: LD_INT 124
57960: PPUSH
57961: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57965: LD_INT 125
57967: PPUSH
57968: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57972: LD_INT 126
57974: PPUSH
57975: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57979: LD_INT 200
57981: PPUSH
57982: CALL_OW 427
// end ;
57986: END
// on SailEvent ( event ) do begin if event < 100 then
57987: LD_VAR 0 1
57991: PUSH
57992: LD_INT 100
57994: LESS
57995: IFFALSE 58006
// CustomEvent ( event ) ;
57997: LD_VAR 0 1
58001: PPUSH
58002: CALL 5359 0 1
// if event = 100 then
58006: LD_VAR 0 1
58010: PUSH
58011: LD_INT 100
58013: EQUAL
58014: IFFALSE 58020
// MC_ClassManager ( ) ;
58016: CALL 58412 0 0
// if event = 101 then
58020: LD_VAR 0 1
58024: PUSH
58025: LD_INT 101
58027: EQUAL
58028: IFFALSE 58034
// MC_RepairBuildings ( ) ;
58030: CALL 63205 0 0
// if event = 102 then
58034: LD_VAR 0 1
58038: PUSH
58039: LD_INT 102
58041: EQUAL
58042: IFFALSE 58048
// MC_Heal ( ) ;
58044: CALL 63937 0 0
// if event = 103 then
58048: LD_VAR 0 1
58052: PUSH
58053: LD_INT 103
58055: EQUAL
58056: IFFALSE 58062
// MC_Build ( ) ;
58058: CALL 64359 0 0
// if event = 104 then
58062: LD_VAR 0 1
58066: PUSH
58067: LD_INT 104
58069: EQUAL
58070: IFFALSE 58076
// MC_TurretWeapon ( ) ;
58072: CALL 65972 0 0
// if event = 105 then
58076: LD_VAR 0 1
58080: PUSH
58081: LD_INT 105
58083: EQUAL
58084: IFFALSE 58090
// MC_BuildUpgrade ( ) ;
58086: CALL 65523 0 0
// if event = 106 then
58090: LD_VAR 0 1
58094: PUSH
58095: LD_INT 106
58097: EQUAL
58098: IFFALSE 58104
// MC_PlantMines ( ) ;
58100: CALL 66402 0 0
// if event = 107 then
58104: LD_VAR 0 1
58108: PUSH
58109: LD_INT 107
58111: EQUAL
58112: IFFALSE 58118
// MC_CollectCrates ( ) ;
58114: CALL 67436 0 0
// if event = 108 then
58118: LD_VAR 0 1
58122: PUSH
58123: LD_INT 108
58125: EQUAL
58126: IFFALSE 58132
// MC_LinkRemoteControl ( ) ;
58128: CALL 69212 0 0
// if event = 109 then
58132: LD_VAR 0 1
58136: PUSH
58137: LD_INT 109
58139: EQUAL
58140: IFFALSE 58146
// MC_ProduceVehicle ( ) ;
58142: CALL 69393 0 0
// if event = 110 then
58146: LD_VAR 0 1
58150: PUSH
58151: LD_INT 110
58153: EQUAL
58154: IFFALSE 58160
// MC_SendAttack ( ) ;
58156: CALL 69859 0 0
// if event = 111 then
58160: LD_VAR 0 1
58164: PUSH
58165: LD_INT 111
58167: EQUAL
58168: IFFALSE 58174
// MC_Defend ( ) ;
58170: CALL 69967 0 0
// if event = 112 then
58174: LD_VAR 0 1
58178: PUSH
58179: LD_INT 112
58181: EQUAL
58182: IFFALSE 58188
// MC_Research ( ) ;
58184: CALL 70572 0 0
// if event = 113 then
58188: LD_VAR 0 1
58192: PUSH
58193: LD_INT 113
58195: EQUAL
58196: IFFALSE 58202
// MC_MinesTrigger ( ) ;
58198: CALL 71686 0 0
// if event = 120 then
58202: LD_VAR 0 1
58206: PUSH
58207: LD_INT 120
58209: EQUAL
58210: IFFALSE 58216
// MC_RepairVehicle ( ) ;
58212: CALL 71785 0 0
// if event = 121 then
58216: LD_VAR 0 1
58220: PUSH
58221: LD_INT 121
58223: EQUAL
58224: IFFALSE 58230
// MC_TameApe ( ) ;
58226: CALL 72515 0 0
// if event = 122 then
58230: LD_VAR 0 1
58234: PUSH
58235: LD_INT 122
58237: EQUAL
58238: IFFALSE 58244
// MC_ChangeApeClass ( ) ;
58240: CALL 73344 0 0
// if event = 123 then
58244: LD_VAR 0 1
58248: PUSH
58249: LD_INT 123
58251: EQUAL
58252: IFFALSE 58258
// MC_Bazooka ( ) ;
58254: CALL 73994 0 0
// if event = 124 then
58258: LD_VAR 0 1
58262: PUSH
58263: LD_INT 124
58265: EQUAL
58266: IFFALSE 58272
// MC_TeleportExit ( ) ;
58268: CALL 74192 0 0
// if event = 125 then
58272: LD_VAR 0 1
58276: PUSH
58277: LD_INT 125
58279: EQUAL
58280: IFFALSE 58286
// MC_Deposits ( ) ;
58282: CALL 74839 0 0
// if event = 126 then
58286: LD_VAR 0 1
58290: PUSH
58291: LD_INT 126
58293: EQUAL
58294: IFFALSE 58300
// MC_RemoteDriver ( ) ;
58296: CALL 75464 0 0
// if event = 200 then
58300: LD_VAR 0 1
58304: PUSH
58305: LD_INT 200
58307: EQUAL
58308: IFFALSE 58314
// MC_Idle ( ) ;
58310: CALL 77197 0 0
// end ;
58314: PPOPN 1
58316: END
// export function MC_Reset ( base , tag ) ; var i ; begin
58317: LD_INT 0
58319: PPUSH
58320: PPUSH
// if not mc_bases [ base ] or not tag then
58321: LD_EXP 52
58325: PUSH
58326: LD_VAR 0 1
58330: ARRAY
58331: NOT
58332: PUSH
58333: LD_VAR 0 2
58337: NOT
58338: OR
58339: IFFALSE 58343
// exit ;
58341: GO 58407
// for i in mc_bases [ base ] union mc_ape [ base ] do
58343: LD_ADDR_VAR 0 4
58347: PUSH
58348: LD_EXP 52
58352: PUSH
58353: LD_VAR 0 1
58357: ARRAY
58358: PUSH
58359: LD_EXP 81
58363: PUSH
58364: LD_VAR 0 1
58368: ARRAY
58369: UNION
58370: PUSH
58371: FOR_IN
58372: IFFALSE 58405
// if GetTag ( i ) = tag then
58374: LD_VAR 0 4
58378: PPUSH
58379: CALL_OW 110
58383: PUSH
58384: LD_VAR 0 2
58388: EQUAL
58389: IFFALSE 58403
// SetTag ( i , 0 ) ;
58391: LD_VAR 0 4
58395: PPUSH
58396: LD_INT 0
58398: PPUSH
58399: CALL_OW 109
58403: GO 58371
58405: POP
58406: POP
// end ;
58407: LD_VAR 0 3
58411: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
58412: LD_INT 0
58414: PPUSH
58415: PPUSH
58416: PPUSH
58417: PPUSH
58418: PPUSH
58419: PPUSH
58420: PPUSH
58421: PPUSH
// if not mc_bases then
58422: LD_EXP 52
58426: NOT
58427: IFFALSE 58431
// exit ;
58429: GO 58889
// for i = 1 to mc_bases do
58431: LD_ADDR_VAR 0 2
58435: PUSH
58436: DOUBLE
58437: LD_INT 1
58439: DEC
58440: ST_TO_ADDR
58441: LD_EXP 52
58445: PUSH
58446: FOR_TO
58447: IFFALSE 58887
// begin tmp := MC_ClassCheckReq ( i ) ;
58449: LD_ADDR_VAR 0 4
58453: PUSH
58454: LD_VAR 0 2
58458: PPUSH
58459: CALL 58894 0 1
58463: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
58464: LD_ADDR_EXP 93
58468: PUSH
58469: LD_EXP 93
58473: PPUSH
58474: LD_VAR 0 2
58478: PPUSH
58479: LD_VAR 0 4
58483: PPUSH
58484: CALL_OW 1
58488: ST_TO_ADDR
// if not tmp then
58489: LD_VAR 0 4
58493: NOT
58494: IFFALSE 58498
// continue ;
58496: GO 58446
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
58498: LD_ADDR_VAR 0 6
58502: PUSH
58503: LD_EXP 52
58507: PUSH
58508: LD_VAR 0 2
58512: ARRAY
58513: PPUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 30
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 30
58529: PUSH
58530: LD_INT 5
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: PPUSH
58542: CALL_OW 72
58546: PUSH
58547: LD_EXP 52
58551: PUSH
58552: LD_VAR 0 2
58556: ARRAY
58557: PPUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 30
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 30
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: PPUSH
58586: CALL_OW 72
58590: PUSH
58591: LD_EXP 52
58595: PUSH
58596: LD_VAR 0 2
58600: ARRAY
58601: PPUSH
58602: LD_INT 30
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PPUSH
58612: CALL_OW 72
58616: PUSH
58617: LD_EXP 52
58621: PUSH
58622: LD_VAR 0 2
58626: ARRAY
58627: PPUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 30
58633: PUSH
58634: LD_INT 6
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 30
58643: PUSH
58644: LD_INT 7
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 30
58653: PUSH
58654: LD_INT 8
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: PPUSH
58667: CALL_OW 72
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// for j = 1 to 4 do
58678: LD_ADDR_VAR 0 3
58682: PUSH
58683: DOUBLE
58684: LD_INT 1
58686: DEC
58687: ST_TO_ADDR
58688: LD_INT 4
58690: PUSH
58691: FOR_TO
58692: IFFALSE 58883
// begin if not tmp [ j ] then
58694: LD_VAR 0 4
58698: PUSH
58699: LD_VAR 0 3
58703: ARRAY
58704: NOT
58705: IFFALSE 58709
// continue ;
58707: GO 58691
// for p in tmp [ j ] do
58709: LD_ADDR_VAR 0 5
58713: PUSH
58714: LD_VAR 0 4
58718: PUSH
58719: LD_VAR 0 3
58723: ARRAY
58724: PUSH
58725: FOR_IN
58726: IFFALSE 58879
// begin if not b [ j ] then
58728: LD_VAR 0 6
58732: PUSH
58733: LD_VAR 0 3
58737: ARRAY
58738: NOT
58739: IFFALSE 58743
// break ;
58741: GO 58879
// e := 0 ;
58743: LD_ADDR_VAR 0 7
58747: PUSH
58748: LD_INT 0
58750: ST_TO_ADDR
// for k in b [ j ] do
58751: LD_ADDR_VAR 0 8
58755: PUSH
58756: LD_VAR 0 6
58760: PUSH
58761: LD_VAR 0 3
58765: ARRAY
58766: PUSH
58767: FOR_IN
58768: IFFALSE 58795
// if IsNotFull ( k ) then
58770: LD_VAR 0 8
58774: PPUSH
58775: CALL 15536 0 1
58779: IFFALSE 58793
// begin e := k ;
58781: LD_ADDR_VAR 0 7
58785: PUSH
58786: LD_VAR 0 8
58790: ST_TO_ADDR
// break ;
58791: GO 58795
// end ;
58793: GO 58767
58795: POP
58796: POP
// if e and not UnitGoingToBuilding ( p , e ) then
58797: LD_VAR 0 7
58801: PUSH
58802: LD_VAR 0 5
58806: PPUSH
58807: LD_VAR 0 7
58811: PPUSH
58812: CALL 52655 0 2
58816: NOT
58817: AND
58818: IFFALSE 58877
// begin if IsInUnit ( p ) then
58820: LD_VAR 0 5
58824: PPUSH
58825: CALL_OW 310
58829: IFFALSE 58840
// ComExitBuilding ( p ) ;
58831: LD_VAR 0 5
58835: PPUSH
58836: CALL_OW 122
// ComEnterUnit ( p , e ) ;
58840: LD_VAR 0 5
58844: PPUSH
58845: LD_VAR 0 7
58849: PPUSH
58850: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
58854: LD_VAR 0 5
58858: PPUSH
58859: LD_VAR 0 3
58863: PPUSH
58864: CALL_OW 183
// AddComExitBuilding ( p ) ;
58868: LD_VAR 0 5
58872: PPUSH
58873: CALL_OW 182
// end ; end ;
58877: GO 58725
58879: POP
58880: POP
// end ;
58881: GO 58691
58883: POP
58884: POP
// end ;
58885: GO 58446
58887: POP
58888: POP
// end ;
58889: LD_VAR 0 1
58893: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
58894: LD_INT 0
58896: PPUSH
58897: PPUSH
58898: PPUSH
58899: PPUSH
58900: PPUSH
58901: PPUSH
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
58907: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
58908: LD_VAR 0 1
58912: NOT
58913: PUSH
58914: LD_EXP 52
58918: PUSH
58919: LD_VAR 0 1
58923: ARRAY
58924: NOT
58925: OR
58926: PUSH
58927: LD_EXP 52
58931: PUSH
58932: LD_VAR 0 1
58936: ARRAY
58937: PPUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 30
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 30
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: PPUSH
58966: CALL_OW 72
58970: NOT
58971: OR
58972: IFFALSE 58976
// exit ;
58974: GO 62479
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58976: LD_ADDR_VAR 0 4
58980: PUSH
58981: LD_EXP 52
58985: PUSH
58986: LD_VAR 0 1
58990: ARRAY
58991: PPUSH
58992: LD_INT 2
58994: PUSH
58995: LD_INT 25
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 25
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 25
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 25
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 25
59037: PUSH
59038: LD_INT 5
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 25
59047: PUSH
59048: LD_INT 8
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 25
59057: PUSH
59058: LD_INT 9
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: PPUSH
59075: CALL_OW 72
59079: ST_TO_ADDR
// if not tmp then
59080: LD_VAR 0 4
59084: NOT
59085: IFFALSE 59089
// exit ;
59087: GO 62479
// for i in tmp do
59089: LD_ADDR_VAR 0 3
59093: PUSH
59094: LD_VAR 0 4
59098: PUSH
59099: FOR_IN
59100: IFFALSE 59131
// if GetTag ( i ) then
59102: LD_VAR 0 3
59106: PPUSH
59107: CALL_OW 110
59111: IFFALSE 59129
// tmp := tmp diff i ;
59113: LD_ADDR_VAR 0 4
59117: PUSH
59118: LD_VAR 0 4
59122: PUSH
59123: LD_VAR 0 3
59127: DIFF
59128: ST_TO_ADDR
59129: GO 59099
59131: POP
59132: POP
// if not tmp then
59133: LD_VAR 0 4
59137: NOT
59138: IFFALSE 59142
// exit ;
59140: GO 62479
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59142: LD_ADDR_VAR 0 5
59146: PUSH
59147: LD_EXP 52
59151: PUSH
59152: LD_VAR 0 1
59156: ARRAY
59157: PPUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 25
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 25
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 25
59183: PUSH
59184: LD_INT 8
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 25
59193: PUSH
59194: LD_INT 9
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: PPUSH
59208: CALL_OW 72
59212: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
59213: LD_ADDR_VAR 0 6
59217: PUSH
59218: LD_EXP 52
59222: PUSH
59223: LD_VAR 0 1
59227: ARRAY
59228: PPUSH
59229: LD_INT 25
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PPUSH
59239: CALL_OW 72
59243: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
59244: LD_ADDR_VAR 0 7
59248: PUSH
59249: LD_EXP 52
59253: PUSH
59254: LD_VAR 0 1
59258: ARRAY
59259: PPUSH
59260: LD_INT 25
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PPUSH
59270: CALL_OW 72
59274: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
59275: LD_ADDR_VAR 0 8
59279: PUSH
59280: LD_EXP 52
59284: PUSH
59285: LD_VAR 0 1
59289: ARRAY
59290: PPUSH
59291: LD_INT 25
59293: PUSH
59294: LD_INT 4
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 24
59303: PUSH
59304: LD_INT 251
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PPUSH
59315: CALL_OW 72
59319: ST_TO_ADDR
// if mc_scan [ base ] then
59320: LD_EXP 75
59324: PUSH
59325: LD_VAR 0 1
59329: ARRAY
59330: IFFALSE 59791
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
59332: LD_ADDR_EXP 94
59336: PUSH
59337: LD_EXP 94
59341: PPUSH
59342: LD_VAR 0 1
59346: PPUSH
59347: LD_INT 4
59349: PPUSH
59350: CALL_OW 1
59354: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59355: LD_ADDR_VAR 0 12
59359: PUSH
59360: LD_EXP 52
59364: PUSH
59365: LD_VAR 0 1
59369: ARRAY
59370: PPUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 30
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 30
59386: PUSH
59387: LD_INT 5
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: PPUSH
59399: CALL_OW 72
59403: ST_TO_ADDR
// if not b then
59404: LD_VAR 0 12
59408: NOT
59409: IFFALSE 59413
// exit ;
59411: GO 62479
// p := [ ] ;
59413: LD_ADDR_VAR 0 11
59417: PUSH
59418: EMPTY
59419: ST_TO_ADDR
// if sci >= 2 then
59420: LD_VAR 0 8
59424: PUSH
59425: LD_INT 2
59427: GREATEREQUAL
59428: IFFALSE 59459
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
59430: LD_ADDR_VAR 0 8
59434: PUSH
59435: LD_VAR 0 8
59439: PUSH
59440: LD_INT 1
59442: ARRAY
59443: PUSH
59444: LD_VAR 0 8
59448: PUSH
59449: LD_INT 2
59451: ARRAY
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: ST_TO_ADDR
59457: GO 59520
// if sci = 1 then
59459: LD_VAR 0 8
59463: PUSH
59464: LD_INT 1
59466: EQUAL
59467: IFFALSE 59488
// sci := [ sci [ 1 ] ] else
59469: LD_ADDR_VAR 0 8
59473: PUSH
59474: LD_VAR 0 8
59478: PUSH
59479: LD_INT 1
59481: ARRAY
59482: PUSH
59483: EMPTY
59484: LIST
59485: ST_TO_ADDR
59486: GO 59520
// if sci = 0 then
59488: LD_VAR 0 8
59492: PUSH
59493: LD_INT 0
59495: EQUAL
59496: IFFALSE 59520
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
59498: LD_ADDR_VAR 0 11
59502: PUSH
59503: LD_VAR 0 4
59507: PPUSH
59508: LD_INT 4
59510: PPUSH
59511: CALL 52518 0 2
59515: PUSH
59516: LD_INT 1
59518: ARRAY
59519: ST_TO_ADDR
// if eng > 4 then
59520: LD_VAR 0 6
59524: PUSH
59525: LD_INT 4
59527: GREATER
59528: IFFALSE 59574
// for i = eng downto 4 do
59530: LD_ADDR_VAR 0 3
59534: PUSH
59535: DOUBLE
59536: LD_VAR 0 6
59540: INC
59541: ST_TO_ADDR
59542: LD_INT 4
59544: PUSH
59545: FOR_DOWNTO
59546: IFFALSE 59572
// eng := eng diff eng [ i ] ;
59548: LD_ADDR_VAR 0 6
59552: PUSH
59553: LD_VAR 0 6
59557: PUSH
59558: LD_VAR 0 6
59562: PUSH
59563: LD_VAR 0 3
59567: ARRAY
59568: DIFF
59569: ST_TO_ADDR
59570: GO 59545
59572: POP
59573: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
59574: LD_ADDR_VAR 0 4
59578: PUSH
59579: LD_VAR 0 4
59583: PUSH
59584: LD_VAR 0 5
59588: PUSH
59589: LD_VAR 0 6
59593: UNION
59594: PUSH
59595: LD_VAR 0 7
59599: UNION
59600: PUSH
59601: LD_VAR 0 8
59605: UNION
59606: DIFF
59607: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
59608: LD_ADDR_VAR 0 13
59612: PUSH
59613: LD_EXP 52
59617: PUSH
59618: LD_VAR 0 1
59622: ARRAY
59623: PPUSH
59624: LD_INT 2
59626: PUSH
59627: LD_INT 30
59629: PUSH
59630: LD_INT 32
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 30
59639: PUSH
59640: LD_INT 31
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: PPUSH
59652: CALL_OW 72
59656: PUSH
59657: LD_EXP 52
59661: PUSH
59662: LD_VAR 0 1
59666: ARRAY
59667: PPUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 30
59673: PUSH
59674: LD_INT 4
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 30
59683: PUSH
59684: LD_INT 5
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: PPUSH
59696: CALL_OW 72
59700: PUSH
59701: LD_INT 6
59703: MUL
59704: PLUS
59705: ST_TO_ADDR
// if bcount < tmp then
59706: LD_VAR 0 13
59710: PUSH
59711: LD_VAR 0 4
59715: LESS
59716: IFFALSE 59762
// for i = tmp downto bcount do
59718: LD_ADDR_VAR 0 3
59722: PUSH
59723: DOUBLE
59724: LD_VAR 0 4
59728: INC
59729: ST_TO_ADDR
59730: LD_VAR 0 13
59734: PUSH
59735: FOR_DOWNTO
59736: IFFALSE 59760
// tmp := Delete ( tmp , tmp ) ;
59738: LD_ADDR_VAR 0 4
59742: PUSH
59743: LD_VAR 0 4
59747: PPUSH
59748: LD_VAR 0 4
59752: PPUSH
59753: CALL_OW 3
59757: ST_TO_ADDR
59758: GO 59735
59760: POP
59761: POP
// result := [ tmp , 0 , 0 , p ] ;
59762: LD_ADDR_VAR 0 2
59766: PUSH
59767: LD_VAR 0 4
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_VAR 0 11
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: ST_TO_ADDR
// exit ;
59789: GO 62479
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59791: LD_EXP 52
59795: PUSH
59796: LD_VAR 0 1
59800: ARRAY
59801: PPUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 30
59807: PUSH
59808: LD_INT 6
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 30
59817: PUSH
59818: LD_INT 7
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 30
59827: PUSH
59828: LD_INT 8
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: PPUSH
59841: CALL_OW 72
59845: NOT
59846: PUSH
59847: LD_EXP 52
59851: PUSH
59852: LD_VAR 0 1
59856: ARRAY
59857: PPUSH
59858: LD_INT 30
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PPUSH
59868: CALL_OW 72
59872: NOT
59873: AND
59874: IFFALSE 59946
// begin if eng = tmp then
59876: LD_VAR 0 6
59880: PUSH
59881: LD_VAR 0 4
59885: EQUAL
59886: IFFALSE 59890
// exit ;
59888: GO 62479
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
59890: LD_ADDR_EXP 94
59894: PUSH
59895: LD_EXP 94
59899: PPUSH
59900: LD_VAR 0 1
59904: PPUSH
59905: LD_INT 1
59907: PPUSH
59908: CALL_OW 1
59912: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
59913: LD_ADDR_VAR 0 2
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_VAR 0 4
59925: PUSH
59926: LD_VAR 0 6
59930: DIFF
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: ST_TO_ADDR
// exit ;
59944: GO 62479
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59946: LD_EXP 79
59950: PUSH
59951: LD_EXP 78
59955: PUSH
59956: LD_VAR 0 1
59960: ARRAY
59961: ARRAY
59962: PUSH
59963: LD_EXP 52
59967: PUSH
59968: LD_VAR 0 1
59972: ARRAY
59973: PPUSH
59974: LD_INT 2
59976: PUSH
59977: LD_INT 30
59979: PUSH
59980: LD_INT 6
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 30
59989: PUSH
59990: LD_INT 7
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 30
59999: PUSH
60000: LD_INT 8
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: PPUSH
60013: CALL_OW 72
60017: AND
60018: PUSH
60019: LD_EXP 52
60023: PUSH
60024: LD_VAR 0 1
60028: ARRAY
60029: PPUSH
60030: LD_INT 30
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PPUSH
60040: CALL_OW 72
60044: NOT
60045: AND
60046: IFFALSE 60260
// begin if sci >= 6 then
60048: LD_VAR 0 8
60052: PUSH
60053: LD_INT 6
60055: GREATEREQUAL
60056: IFFALSE 60060
// exit ;
60058: GO 62479
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
60060: LD_ADDR_EXP 94
60064: PUSH
60065: LD_EXP 94
60069: PPUSH
60070: LD_VAR 0 1
60074: PPUSH
60075: LD_INT 2
60077: PPUSH
60078: CALL_OW 1
60082: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
60083: LD_ADDR_VAR 0 9
60087: PUSH
60088: LD_VAR 0 4
60092: PUSH
60093: LD_VAR 0 8
60097: DIFF
60098: PPUSH
60099: LD_INT 4
60101: PPUSH
60102: CALL 52518 0 2
60106: ST_TO_ADDR
// p := [ ] ;
60107: LD_ADDR_VAR 0 11
60111: PUSH
60112: EMPTY
60113: ST_TO_ADDR
// if sci < 6 and sort > 6 then
60114: LD_VAR 0 8
60118: PUSH
60119: LD_INT 6
60121: LESS
60122: PUSH
60123: LD_VAR 0 9
60127: PUSH
60128: LD_INT 6
60130: GREATER
60131: AND
60132: IFFALSE 60213
// begin for i = 1 to 6 - sci do
60134: LD_ADDR_VAR 0 3
60138: PUSH
60139: DOUBLE
60140: LD_INT 1
60142: DEC
60143: ST_TO_ADDR
60144: LD_INT 6
60146: PUSH
60147: LD_VAR 0 8
60151: MINUS
60152: PUSH
60153: FOR_TO
60154: IFFALSE 60209
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
60156: LD_ADDR_VAR 0 11
60160: PUSH
60161: LD_VAR 0 11
60165: PPUSH
60166: LD_VAR 0 11
60170: PUSH
60171: LD_INT 1
60173: PLUS
60174: PPUSH
60175: LD_VAR 0 9
60179: PUSH
60180: LD_INT 1
60182: ARRAY
60183: PPUSH
60184: CALL_OW 2
60188: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
60189: LD_ADDR_VAR 0 9
60193: PUSH
60194: LD_VAR 0 9
60198: PPUSH
60199: LD_INT 1
60201: PPUSH
60202: CALL_OW 3
60206: ST_TO_ADDR
// end ;
60207: GO 60153
60209: POP
60210: POP
// end else
60211: GO 60233
// if sort then
60213: LD_VAR 0 9
60217: IFFALSE 60233
// p := sort [ 1 ] ;
60219: LD_ADDR_VAR 0 11
60223: PUSH
60224: LD_VAR 0 9
60228: PUSH
60229: LD_INT 1
60231: ARRAY
60232: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
60233: LD_ADDR_VAR 0 2
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_VAR 0 11
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// exit ;
60258: GO 62479
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60260: LD_EXP 79
60264: PUSH
60265: LD_EXP 78
60269: PUSH
60270: LD_VAR 0 1
60274: ARRAY
60275: ARRAY
60276: PUSH
60277: LD_EXP 52
60281: PUSH
60282: LD_VAR 0 1
60286: ARRAY
60287: PPUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 30
60293: PUSH
60294: LD_INT 6
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 30
60303: PUSH
60304: LD_INT 7
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 30
60313: PUSH
60314: LD_INT 8
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: PPUSH
60327: CALL_OW 72
60331: AND
60332: PUSH
60333: LD_EXP 52
60337: PUSH
60338: LD_VAR 0 1
60342: ARRAY
60343: PPUSH
60344: LD_INT 30
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PPUSH
60354: CALL_OW 72
60358: AND
60359: IFFALSE 61093
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
60361: LD_ADDR_EXP 94
60365: PUSH
60366: LD_EXP 94
60370: PPUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: LD_INT 3
60378: PPUSH
60379: CALL_OW 1
60383: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60384: LD_ADDR_VAR 0 2
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// if not eng then
60407: LD_VAR 0 6
60411: NOT
60412: IFFALSE 60475
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
60414: LD_ADDR_VAR 0 11
60418: PUSH
60419: LD_VAR 0 4
60423: PPUSH
60424: LD_INT 2
60426: PPUSH
60427: CALL 52518 0 2
60431: PUSH
60432: LD_INT 1
60434: ARRAY
60435: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
60436: LD_ADDR_VAR 0 2
60440: PUSH
60441: LD_VAR 0 2
60445: PPUSH
60446: LD_INT 2
60448: PPUSH
60449: LD_VAR 0 11
60453: PPUSH
60454: CALL_OW 1
60458: ST_TO_ADDR
// tmp := tmp diff p ;
60459: LD_ADDR_VAR 0 4
60463: PUSH
60464: LD_VAR 0 4
60468: PUSH
60469: LD_VAR 0 11
60473: DIFF
60474: ST_TO_ADDR
// end ; if tmp and sci < 6 then
60475: LD_VAR 0 4
60479: PUSH
60480: LD_VAR 0 8
60484: PUSH
60485: LD_INT 6
60487: LESS
60488: AND
60489: IFFALSE 60677
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
60491: LD_ADDR_VAR 0 9
60495: PUSH
60496: LD_VAR 0 4
60500: PUSH
60501: LD_VAR 0 8
60505: PUSH
60506: LD_VAR 0 7
60510: UNION
60511: DIFF
60512: PPUSH
60513: LD_INT 4
60515: PPUSH
60516: CALL 52518 0 2
60520: ST_TO_ADDR
// p := [ ] ;
60521: LD_ADDR_VAR 0 11
60525: PUSH
60526: EMPTY
60527: ST_TO_ADDR
// if sort then
60528: LD_VAR 0 9
60532: IFFALSE 60648
// for i = 1 to 6 - sci do
60534: LD_ADDR_VAR 0 3
60538: PUSH
60539: DOUBLE
60540: LD_INT 1
60542: DEC
60543: ST_TO_ADDR
60544: LD_INT 6
60546: PUSH
60547: LD_VAR 0 8
60551: MINUS
60552: PUSH
60553: FOR_TO
60554: IFFALSE 60646
// begin if i = sort then
60556: LD_VAR 0 3
60560: PUSH
60561: LD_VAR 0 9
60565: EQUAL
60566: IFFALSE 60570
// break ;
60568: GO 60646
// if GetClass ( i ) = 4 then
60570: LD_VAR 0 3
60574: PPUSH
60575: CALL_OW 257
60579: PUSH
60580: LD_INT 4
60582: EQUAL
60583: IFFALSE 60587
// continue ;
60585: GO 60553
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60587: LD_ADDR_VAR 0 11
60591: PUSH
60592: LD_VAR 0 11
60596: PPUSH
60597: LD_VAR 0 11
60601: PUSH
60602: LD_INT 1
60604: PLUS
60605: PPUSH
60606: LD_VAR 0 9
60610: PUSH
60611: LD_VAR 0 3
60615: ARRAY
60616: PPUSH
60617: CALL_OW 2
60621: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60622: LD_ADDR_VAR 0 4
60626: PUSH
60627: LD_VAR 0 4
60631: PUSH
60632: LD_VAR 0 9
60636: PUSH
60637: LD_VAR 0 3
60641: ARRAY
60642: DIFF
60643: ST_TO_ADDR
// end ;
60644: GO 60553
60646: POP
60647: POP
// if p then
60648: LD_VAR 0 11
60652: IFFALSE 60677
// result := Replace ( result , 4 , p ) ;
60654: LD_ADDR_VAR 0 2
60658: PUSH
60659: LD_VAR 0 2
60663: PPUSH
60664: LD_INT 4
60666: PPUSH
60667: LD_VAR 0 11
60671: PPUSH
60672: CALL_OW 1
60676: ST_TO_ADDR
// end ; if tmp and mech < 6 then
60677: LD_VAR 0 4
60681: PUSH
60682: LD_VAR 0 7
60686: PUSH
60687: LD_INT 6
60689: LESS
60690: AND
60691: IFFALSE 60879
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60693: LD_ADDR_VAR 0 9
60697: PUSH
60698: LD_VAR 0 4
60702: PUSH
60703: LD_VAR 0 8
60707: PUSH
60708: LD_VAR 0 7
60712: UNION
60713: DIFF
60714: PPUSH
60715: LD_INT 3
60717: PPUSH
60718: CALL 52518 0 2
60722: ST_TO_ADDR
// p := [ ] ;
60723: LD_ADDR_VAR 0 11
60727: PUSH
60728: EMPTY
60729: ST_TO_ADDR
// if sort then
60730: LD_VAR 0 9
60734: IFFALSE 60850
// for i = 1 to 6 - mech do
60736: LD_ADDR_VAR 0 3
60740: PUSH
60741: DOUBLE
60742: LD_INT 1
60744: DEC
60745: ST_TO_ADDR
60746: LD_INT 6
60748: PUSH
60749: LD_VAR 0 7
60753: MINUS
60754: PUSH
60755: FOR_TO
60756: IFFALSE 60848
// begin if i = sort then
60758: LD_VAR 0 3
60762: PUSH
60763: LD_VAR 0 9
60767: EQUAL
60768: IFFALSE 60772
// break ;
60770: GO 60848
// if GetClass ( i ) = 3 then
60772: LD_VAR 0 3
60776: PPUSH
60777: CALL_OW 257
60781: PUSH
60782: LD_INT 3
60784: EQUAL
60785: IFFALSE 60789
// continue ;
60787: GO 60755
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60789: LD_ADDR_VAR 0 11
60793: PUSH
60794: LD_VAR 0 11
60798: PPUSH
60799: LD_VAR 0 11
60803: PUSH
60804: LD_INT 1
60806: PLUS
60807: PPUSH
60808: LD_VAR 0 9
60812: PUSH
60813: LD_VAR 0 3
60817: ARRAY
60818: PPUSH
60819: CALL_OW 2
60823: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60824: LD_ADDR_VAR 0 4
60828: PUSH
60829: LD_VAR 0 4
60833: PUSH
60834: LD_VAR 0 9
60838: PUSH
60839: LD_VAR 0 3
60843: ARRAY
60844: DIFF
60845: ST_TO_ADDR
// end ;
60846: GO 60755
60848: POP
60849: POP
// if p then
60850: LD_VAR 0 11
60854: IFFALSE 60879
// result := Replace ( result , 3 , p ) ;
60856: LD_ADDR_VAR 0 2
60860: PUSH
60861: LD_VAR 0 2
60865: PPUSH
60866: LD_INT 3
60868: PPUSH
60869: LD_VAR 0 11
60873: PPUSH
60874: CALL_OW 1
60878: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
60879: LD_VAR 0 4
60883: PUSH
60884: LD_INT 6
60886: GREATER
60887: PUSH
60888: LD_VAR 0 6
60892: PUSH
60893: LD_INT 6
60895: LESS
60896: AND
60897: IFFALSE 61091
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60899: LD_ADDR_VAR 0 9
60903: PUSH
60904: LD_VAR 0 4
60908: PUSH
60909: LD_VAR 0 8
60913: PUSH
60914: LD_VAR 0 7
60918: UNION
60919: PUSH
60920: LD_VAR 0 6
60924: UNION
60925: DIFF
60926: PPUSH
60927: LD_INT 2
60929: PPUSH
60930: CALL 52518 0 2
60934: ST_TO_ADDR
// p := [ ] ;
60935: LD_ADDR_VAR 0 11
60939: PUSH
60940: EMPTY
60941: ST_TO_ADDR
// if sort then
60942: LD_VAR 0 9
60946: IFFALSE 61062
// for i = 1 to 6 - eng do
60948: LD_ADDR_VAR 0 3
60952: PUSH
60953: DOUBLE
60954: LD_INT 1
60956: DEC
60957: ST_TO_ADDR
60958: LD_INT 6
60960: PUSH
60961: LD_VAR 0 6
60965: MINUS
60966: PUSH
60967: FOR_TO
60968: IFFALSE 61060
// begin if i = sort then
60970: LD_VAR 0 3
60974: PUSH
60975: LD_VAR 0 9
60979: EQUAL
60980: IFFALSE 60984
// break ;
60982: GO 61060
// if GetClass ( i ) = 2 then
60984: LD_VAR 0 3
60988: PPUSH
60989: CALL_OW 257
60993: PUSH
60994: LD_INT 2
60996: EQUAL
60997: IFFALSE 61001
// continue ;
60999: GO 60967
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61001: LD_ADDR_VAR 0 11
61005: PUSH
61006: LD_VAR 0 11
61010: PPUSH
61011: LD_VAR 0 11
61015: PUSH
61016: LD_INT 1
61018: PLUS
61019: PPUSH
61020: LD_VAR 0 9
61024: PUSH
61025: LD_VAR 0 3
61029: ARRAY
61030: PPUSH
61031: CALL_OW 2
61035: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61036: LD_ADDR_VAR 0 4
61040: PUSH
61041: LD_VAR 0 4
61045: PUSH
61046: LD_VAR 0 9
61050: PUSH
61051: LD_VAR 0 3
61055: ARRAY
61056: DIFF
61057: ST_TO_ADDR
// end ;
61058: GO 60967
61060: POP
61061: POP
// if p then
61062: LD_VAR 0 11
61066: IFFALSE 61091
// result := Replace ( result , 2 , p ) ;
61068: LD_ADDR_VAR 0 2
61072: PUSH
61073: LD_VAR 0 2
61077: PPUSH
61078: LD_INT 2
61080: PPUSH
61081: LD_VAR 0 11
61085: PPUSH
61086: CALL_OW 1
61090: ST_TO_ADDR
// end ; exit ;
61091: GO 62479
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
61093: LD_EXP 79
61097: PUSH
61098: LD_EXP 78
61102: PUSH
61103: LD_VAR 0 1
61107: ARRAY
61108: ARRAY
61109: NOT
61110: PUSH
61111: LD_EXP 52
61115: PUSH
61116: LD_VAR 0 1
61120: ARRAY
61121: PPUSH
61122: LD_INT 30
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PPUSH
61132: CALL_OW 72
61136: AND
61137: PUSH
61138: LD_EXP 57
61142: PUSH
61143: LD_VAR 0 1
61147: ARRAY
61148: AND
61149: IFFALSE 61757
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
61151: LD_ADDR_EXP 94
61155: PUSH
61156: LD_EXP 94
61160: PPUSH
61161: LD_VAR 0 1
61165: PPUSH
61166: LD_INT 5
61168: PPUSH
61169: CALL_OW 1
61173: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61174: LD_ADDR_VAR 0 2
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// if sci > 1 then
61197: LD_VAR 0 8
61201: PUSH
61202: LD_INT 1
61204: GREATER
61205: IFFALSE 61233
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
61207: LD_ADDR_VAR 0 4
61211: PUSH
61212: LD_VAR 0 4
61216: PUSH
61217: LD_VAR 0 8
61221: PUSH
61222: LD_VAR 0 8
61226: PUSH
61227: LD_INT 1
61229: ARRAY
61230: DIFF
61231: DIFF
61232: ST_TO_ADDR
// if tmp and not sci then
61233: LD_VAR 0 4
61237: PUSH
61238: LD_VAR 0 8
61242: NOT
61243: AND
61244: IFFALSE 61313
// begin sort := SortBySkill ( tmp , 4 ) ;
61246: LD_ADDR_VAR 0 9
61250: PUSH
61251: LD_VAR 0 4
61255: PPUSH
61256: LD_INT 4
61258: PPUSH
61259: CALL 52518 0 2
61263: ST_TO_ADDR
// if sort then
61264: LD_VAR 0 9
61268: IFFALSE 61284
// p := sort [ 1 ] ;
61270: LD_ADDR_VAR 0 11
61274: PUSH
61275: LD_VAR 0 9
61279: PUSH
61280: LD_INT 1
61282: ARRAY
61283: ST_TO_ADDR
// if p then
61284: LD_VAR 0 11
61288: IFFALSE 61313
// result := Replace ( result , 4 , p ) ;
61290: LD_ADDR_VAR 0 2
61294: PUSH
61295: LD_VAR 0 2
61299: PPUSH
61300: LD_INT 4
61302: PPUSH
61303: LD_VAR 0 11
61307: PPUSH
61308: CALL_OW 1
61312: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61313: LD_ADDR_VAR 0 4
61317: PUSH
61318: LD_VAR 0 4
61322: PUSH
61323: LD_VAR 0 7
61327: DIFF
61328: ST_TO_ADDR
// if tmp and mech < 6 then
61329: LD_VAR 0 4
61333: PUSH
61334: LD_VAR 0 7
61338: PUSH
61339: LD_INT 6
61341: LESS
61342: AND
61343: IFFALSE 61531
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
61345: LD_ADDR_VAR 0 9
61349: PUSH
61350: LD_VAR 0 4
61354: PUSH
61355: LD_VAR 0 8
61359: PUSH
61360: LD_VAR 0 7
61364: UNION
61365: DIFF
61366: PPUSH
61367: LD_INT 3
61369: PPUSH
61370: CALL 52518 0 2
61374: ST_TO_ADDR
// p := [ ] ;
61375: LD_ADDR_VAR 0 11
61379: PUSH
61380: EMPTY
61381: ST_TO_ADDR
// if sort then
61382: LD_VAR 0 9
61386: IFFALSE 61502
// for i = 1 to 6 - mech do
61388: LD_ADDR_VAR 0 3
61392: PUSH
61393: DOUBLE
61394: LD_INT 1
61396: DEC
61397: ST_TO_ADDR
61398: LD_INT 6
61400: PUSH
61401: LD_VAR 0 7
61405: MINUS
61406: PUSH
61407: FOR_TO
61408: IFFALSE 61500
// begin if i = sort then
61410: LD_VAR 0 3
61414: PUSH
61415: LD_VAR 0 9
61419: EQUAL
61420: IFFALSE 61424
// break ;
61422: GO 61500
// if GetClass ( i ) = 3 then
61424: LD_VAR 0 3
61428: PPUSH
61429: CALL_OW 257
61433: PUSH
61434: LD_INT 3
61436: EQUAL
61437: IFFALSE 61441
// continue ;
61439: GO 61407
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61441: LD_ADDR_VAR 0 11
61445: PUSH
61446: LD_VAR 0 11
61450: PPUSH
61451: LD_VAR 0 11
61455: PUSH
61456: LD_INT 1
61458: PLUS
61459: PPUSH
61460: LD_VAR 0 9
61464: PUSH
61465: LD_VAR 0 3
61469: ARRAY
61470: PPUSH
61471: CALL_OW 2
61475: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61476: LD_ADDR_VAR 0 4
61480: PUSH
61481: LD_VAR 0 4
61485: PUSH
61486: LD_VAR 0 9
61490: PUSH
61491: LD_VAR 0 3
61495: ARRAY
61496: DIFF
61497: ST_TO_ADDR
// end ;
61498: GO 61407
61500: POP
61501: POP
// if p then
61502: LD_VAR 0 11
61506: IFFALSE 61531
// result := Replace ( result , 3 , p ) ;
61508: LD_ADDR_VAR 0 2
61512: PUSH
61513: LD_VAR 0 2
61517: PPUSH
61518: LD_INT 3
61520: PPUSH
61521: LD_VAR 0 11
61525: PPUSH
61526: CALL_OW 1
61530: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61531: LD_ADDR_VAR 0 4
61535: PUSH
61536: LD_VAR 0 4
61540: PUSH
61541: LD_VAR 0 6
61545: DIFF
61546: ST_TO_ADDR
// if tmp and eng < 6 then
61547: LD_VAR 0 4
61551: PUSH
61552: LD_VAR 0 6
61556: PUSH
61557: LD_INT 6
61559: LESS
61560: AND
61561: IFFALSE 61755
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61563: LD_ADDR_VAR 0 9
61567: PUSH
61568: LD_VAR 0 4
61572: PUSH
61573: LD_VAR 0 8
61577: PUSH
61578: LD_VAR 0 7
61582: UNION
61583: PUSH
61584: LD_VAR 0 6
61588: UNION
61589: DIFF
61590: PPUSH
61591: LD_INT 2
61593: PPUSH
61594: CALL 52518 0 2
61598: ST_TO_ADDR
// p := [ ] ;
61599: LD_ADDR_VAR 0 11
61603: PUSH
61604: EMPTY
61605: ST_TO_ADDR
// if sort then
61606: LD_VAR 0 9
61610: IFFALSE 61726
// for i = 1 to 6 - eng do
61612: LD_ADDR_VAR 0 3
61616: PUSH
61617: DOUBLE
61618: LD_INT 1
61620: DEC
61621: ST_TO_ADDR
61622: LD_INT 6
61624: PUSH
61625: LD_VAR 0 6
61629: MINUS
61630: PUSH
61631: FOR_TO
61632: IFFALSE 61724
// begin if i = sort then
61634: LD_VAR 0 3
61638: PUSH
61639: LD_VAR 0 9
61643: EQUAL
61644: IFFALSE 61648
// break ;
61646: GO 61724
// if GetClass ( i ) = 2 then
61648: LD_VAR 0 3
61652: PPUSH
61653: CALL_OW 257
61657: PUSH
61658: LD_INT 2
61660: EQUAL
61661: IFFALSE 61665
// continue ;
61663: GO 61631
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61665: LD_ADDR_VAR 0 11
61669: PUSH
61670: LD_VAR 0 11
61674: PPUSH
61675: LD_VAR 0 11
61679: PUSH
61680: LD_INT 1
61682: PLUS
61683: PPUSH
61684: LD_VAR 0 9
61688: PUSH
61689: LD_VAR 0 3
61693: ARRAY
61694: PPUSH
61695: CALL_OW 2
61699: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61700: LD_ADDR_VAR 0 4
61704: PUSH
61705: LD_VAR 0 4
61709: PUSH
61710: LD_VAR 0 9
61714: PUSH
61715: LD_VAR 0 3
61719: ARRAY
61720: DIFF
61721: ST_TO_ADDR
// end ;
61722: GO 61631
61724: POP
61725: POP
// if p then
61726: LD_VAR 0 11
61730: IFFALSE 61755
// result := Replace ( result , 2 , p ) ;
61732: LD_ADDR_VAR 0 2
61736: PUSH
61737: LD_VAR 0 2
61741: PPUSH
61742: LD_INT 2
61744: PPUSH
61745: LD_VAR 0 11
61749: PPUSH
61750: CALL_OW 1
61754: ST_TO_ADDR
// end ; exit ;
61755: GO 62479
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
61757: LD_EXP 79
61761: PUSH
61762: LD_EXP 78
61766: PUSH
61767: LD_VAR 0 1
61771: ARRAY
61772: ARRAY
61773: NOT
61774: PUSH
61775: LD_EXP 52
61779: PUSH
61780: LD_VAR 0 1
61784: ARRAY
61785: PPUSH
61786: LD_INT 30
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PPUSH
61796: CALL_OW 72
61800: AND
61801: PUSH
61802: LD_EXP 57
61806: PUSH
61807: LD_VAR 0 1
61811: ARRAY
61812: NOT
61813: AND
61814: IFFALSE 62479
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
61816: LD_ADDR_EXP 94
61820: PUSH
61821: LD_EXP 94
61825: PPUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: LD_INT 6
61833: PPUSH
61834: CALL_OW 1
61838: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61839: LD_ADDR_VAR 0 2
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// if sci >= 1 then
61862: LD_VAR 0 8
61866: PUSH
61867: LD_INT 1
61869: GREATEREQUAL
61870: IFFALSE 61892
// tmp := tmp diff sci [ 1 ] ;
61872: LD_ADDR_VAR 0 4
61876: PUSH
61877: LD_VAR 0 4
61881: PUSH
61882: LD_VAR 0 8
61886: PUSH
61887: LD_INT 1
61889: ARRAY
61890: DIFF
61891: ST_TO_ADDR
// if tmp and not sci then
61892: LD_VAR 0 4
61896: PUSH
61897: LD_VAR 0 8
61901: NOT
61902: AND
61903: IFFALSE 61972
// begin sort := SortBySkill ( tmp , 4 ) ;
61905: LD_ADDR_VAR 0 9
61909: PUSH
61910: LD_VAR 0 4
61914: PPUSH
61915: LD_INT 4
61917: PPUSH
61918: CALL 52518 0 2
61922: ST_TO_ADDR
// if sort then
61923: LD_VAR 0 9
61927: IFFALSE 61943
// p := sort [ 1 ] ;
61929: LD_ADDR_VAR 0 11
61933: PUSH
61934: LD_VAR 0 9
61938: PUSH
61939: LD_INT 1
61941: ARRAY
61942: ST_TO_ADDR
// if p then
61943: LD_VAR 0 11
61947: IFFALSE 61972
// result := Replace ( result , 4 , p ) ;
61949: LD_ADDR_VAR 0 2
61953: PUSH
61954: LD_VAR 0 2
61958: PPUSH
61959: LD_INT 4
61961: PPUSH
61962: LD_VAR 0 11
61966: PPUSH
61967: CALL_OW 1
61971: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61972: LD_ADDR_VAR 0 4
61976: PUSH
61977: LD_VAR 0 4
61981: PUSH
61982: LD_VAR 0 7
61986: DIFF
61987: ST_TO_ADDR
// if tmp and mech < 6 then
61988: LD_VAR 0 4
61992: PUSH
61993: LD_VAR 0 7
61997: PUSH
61998: LD_INT 6
62000: LESS
62001: AND
62002: IFFALSE 62184
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
62004: LD_ADDR_VAR 0 9
62008: PUSH
62009: LD_VAR 0 4
62013: PUSH
62014: LD_VAR 0 7
62018: DIFF
62019: PPUSH
62020: LD_INT 3
62022: PPUSH
62023: CALL 52518 0 2
62027: ST_TO_ADDR
// p := [ ] ;
62028: LD_ADDR_VAR 0 11
62032: PUSH
62033: EMPTY
62034: ST_TO_ADDR
// if sort then
62035: LD_VAR 0 9
62039: IFFALSE 62155
// for i = 1 to 6 - mech do
62041: LD_ADDR_VAR 0 3
62045: PUSH
62046: DOUBLE
62047: LD_INT 1
62049: DEC
62050: ST_TO_ADDR
62051: LD_INT 6
62053: PUSH
62054: LD_VAR 0 7
62058: MINUS
62059: PUSH
62060: FOR_TO
62061: IFFALSE 62153
// begin if i = sort then
62063: LD_VAR 0 3
62067: PUSH
62068: LD_VAR 0 9
62072: EQUAL
62073: IFFALSE 62077
// break ;
62075: GO 62153
// if GetClass ( i ) = 3 then
62077: LD_VAR 0 3
62081: PPUSH
62082: CALL_OW 257
62086: PUSH
62087: LD_INT 3
62089: EQUAL
62090: IFFALSE 62094
// continue ;
62092: GO 62060
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62094: LD_ADDR_VAR 0 11
62098: PUSH
62099: LD_VAR 0 11
62103: PPUSH
62104: LD_VAR 0 11
62108: PUSH
62109: LD_INT 1
62111: PLUS
62112: PPUSH
62113: LD_VAR 0 9
62117: PUSH
62118: LD_VAR 0 3
62122: ARRAY
62123: PPUSH
62124: CALL_OW 2
62128: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62129: LD_ADDR_VAR 0 4
62133: PUSH
62134: LD_VAR 0 4
62138: PUSH
62139: LD_VAR 0 9
62143: PUSH
62144: LD_VAR 0 3
62148: ARRAY
62149: DIFF
62150: ST_TO_ADDR
// end ;
62151: GO 62060
62153: POP
62154: POP
// if p then
62155: LD_VAR 0 11
62159: IFFALSE 62184
// result := Replace ( result , 3 , p ) ;
62161: LD_ADDR_VAR 0 2
62165: PUSH
62166: LD_VAR 0 2
62170: PPUSH
62171: LD_INT 3
62173: PPUSH
62174: LD_VAR 0 11
62178: PPUSH
62179: CALL_OW 1
62183: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
62184: LD_ADDR_VAR 0 4
62188: PUSH
62189: LD_VAR 0 4
62193: PUSH
62194: LD_VAR 0 6
62198: DIFF
62199: ST_TO_ADDR
// if tmp and eng < 4 then
62200: LD_VAR 0 4
62204: PUSH
62205: LD_VAR 0 6
62209: PUSH
62210: LD_INT 4
62212: LESS
62213: AND
62214: IFFALSE 62404
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
62216: LD_ADDR_VAR 0 9
62220: PUSH
62221: LD_VAR 0 4
62225: PUSH
62226: LD_VAR 0 7
62230: PUSH
62231: LD_VAR 0 6
62235: UNION
62236: DIFF
62237: PPUSH
62238: LD_INT 2
62240: PPUSH
62241: CALL 52518 0 2
62245: ST_TO_ADDR
// p := [ ] ;
62246: LD_ADDR_VAR 0 11
62250: PUSH
62251: EMPTY
62252: ST_TO_ADDR
// if sort then
62253: LD_VAR 0 9
62257: IFFALSE 62373
// for i = 1 to 4 - eng do
62259: LD_ADDR_VAR 0 3
62263: PUSH
62264: DOUBLE
62265: LD_INT 1
62267: DEC
62268: ST_TO_ADDR
62269: LD_INT 4
62271: PUSH
62272: LD_VAR 0 6
62276: MINUS
62277: PUSH
62278: FOR_TO
62279: IFFALSE 62371
// begin if i = sort then
62281: LD_VAR 0 3
62285: PUSH
62286: LD_VAR 0 9
62290: EQUAL
62291: IFFALSE 62295
// break ;
62293: GO 62371
// if GetClass ( i ) = 2 then
62295: LD_VAR 0 3
62299: PPUSH
62300: CALL_OW 257
62304: PUSH
62305: LD_INT 2
62307: EQUAL
62308: IFFALSE 62312
// continue ;
62310: GO 62278
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62312: LD_ADDR_VAR 0 11
62316: PUSH
62317: LD_VAR 0 11
62321: PPUSH
62322: LD_VAR 0 11
62326: PUSH
62327: LD_INT 1
62329: PLUS
62330: PPUSH
62331: LD_VAR 0 9
62335: PUSH
62336: LD_VAR 0 3
62340: ARRAY
62341: PPUSH
62342: CALL_OW 2
62346: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62347: LD_ADDR_VAR 0 4
62351: PUSH
62352: LD_VAR 0 4
62356: PUSH
62357: LD_VAR 0 9
62361: PUSH
62362: LD_VAR 0 3
62366: ARRAY
62367: DIFF
62368: ST_TO_ADDR
// end ;
62369: GO 62278
62371: POP
62372: POP
// if p then
62373: LD_VAR 0 11
62377: IFFALSE 62402
// result := Replace ( result , 2 , p ) ;
62379: LD_ADDR_VAR 0 2
62383: PUSH
62384: LD_VAR 0 2
62388: PPUSH
62389: LD_INT 2
62391: PPUSH
62392: LD_VAR 0 11
62396: PPUSH
62397: CALL_OW 1
62401: ST_TO_ADDR
// end else
62402: GO 62448
// for i = eng downto 5 do
62404: LD_ADDR_VAR 0 3
62408: PUSH
62409: DOUBLE
62410: LD_VAR 0 6
62414: INC
62415: ST_TO_ADDR
62416: LD_INT 5
62418: PUSH
62419: FOR_DOWNTO
62420: IFFALSE 62446
// tmp := tmp union eng [ i ] ;
62422: LD_ADDR_VAR 0 4
62426: PUSH
62427: LD_VAR 0 4
62431: PUSH
62432: LD_VAR 0 6
62436: PUSH
62437: LD_VAR 0 3
62441: ARRAY
62442: UNION
62443: ST_TO_ADDR
62444: GO 62419
62446: POP
62447: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
62448: LD_ADDR_VAR 0 2
62452: PUSH
62453: LD_VAR 0 2
62457: PPUSH
62458: LD_INT 1
62460: PPUSH
62461: LD_VAR 0 4
62465: PUSH
62466: LD_VAR 0 5
62470: DIFF
62471: PPUSH
62472: CALL_OW 1
62476: ST_TO_ADDR
// exit ;
62477: GO 62479
// end ; end ;
62479: LD_VAR 0 2
62483: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
62484: LD_INT 0
62486: PPUSH
62487: PPUSH
62488: PPUSH
// if not mc_bases then
62489: LD_EXP 52
62493: NOT
62494: IFFALSE 62498
// exit ;
62496: GO 62604
// for i = 1 to mc_bases do
62498: LD_ADDR_VAR 0 2
62502: PUSH
62503: DOUBLE
62504: LD_INT 1
62506: DEC
62507: ST_TO_ADDR
62508: LD_EXP 52
62512: PUSH
62513: FOR_TO
62514: IFFALSE 62595
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
62516: LD_ADDR_VAR 0 3
62520: PUSH
62521: LD_EXP 52
62525: PUSH
62526: LD_VAR 0 2
62530: ARRAY
62531: PPUSH
62532: LD_INT 21
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: LD_INT 24
62547: PUSH
62548: LD_INT 1000
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PPUSH
62563: CALL_OW 72
62567: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
62568: LD_ADDR_EXP 53
62572: PUSH
62573: LD_EXP 53
62577: PPUSH
62578: LD_VAR 0 2
62582: PPUSH
62583: LD_VAR 0 3
62587: PPUSH
62588: CALL_OW 1
62592: ST_TO_ADDR
// end ;
62593: GO 62513
62595: POP
62596: POP
// RaiseSailEvent ( 101 ) ;
62597: LD_INT 101
62599: PPUSH
62600: CALL_OW 427
// end ;
62604: LD_VAR 0 1
62608: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
62609: LD_INT 0
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
62615: PPUSH
62616: PPUSH
62617: PPUSH
// if not mc_bases then
62618: LD_EXP 52
62622: NOT
62623: IFFALSE 62627
// exit ;
62625: GO 63200
// for i = 1 to mc_bases do
62627: LD_ADDR_VAR 0 2
62631: PUSH
62632: DOUBLE
62633: LD_INT 1
62635: DEC
62636: ST_TO_ADDR
62637: LD_EXP 52
62641: PUSH
62642: FOR_TO
62643: IFFALSE 63191
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
62645: LD_ADDR_VAR 0 5
62649: PUSH
62650: LD_EXP 52
62654: PUSH
62655: LD_VAR 0 2
62659: ARRAY
62660: PUSH
62661: LD_EXP 81
62665: PUSH
62666: LD_VAR 0 2
62670: ARRAY
62671: UNION
62672: PPUSH
62673: LD_INT 21
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 54
62691: PUSH
62692: EMPTY
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: LD_INT 24
62704: PUSH
62705: LD_INT 800
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PPUSH
62725: CALL_OW 72
62729: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
62730: LD_ADDR_VAR 0 6
62734: PUSH
62735: LD_EXP 52
62739: PUSH
62740: LD_VAR 0 2
62744: ARRAY
62745: PPUSH
62746: LD_INT 21
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: LD_INT 54
62764: PUSH
62765: EMPTY
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: LD_INT 24
62777: PUSH
62778: LD_INT 250
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PPUSH
62798: CALL_OW 72
62802: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
62803: LD_ADDR_VAR 0 7
62807: PUSH
62808: LD_VAR 0 5
62812: PUSH
62813: LD_VAR 0 6
62817: DIFF
62818: ST_TO_ADDR
// if not need_heal_1 then
62819: LD_VAR 0 6
62823: NOT
62824: IFFALSE 62857
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
62826: LD_ADDR_EXP 55
62830: PUSH
62831: LD_EXP 55
62835: PPUSH
62836: LD_VAR 0 2
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PPUSH
62848: EMPTY
62849: PPUSH
62850: CALL 18270 0 3
62854: ST_TO_ADDR
62855: GO 62927
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
62857: LD_ADDR_EXP 55
62861: PUSH
62862: LD_EXP 55
62866: PPUSH
62867: LD_VAR 0 2
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PPUSH
62879: LD_EXP 55
62883: PUSH
62884: LD_VAR 0 2
62888: ARRAY
62889: PUSH
62890: LD_INT 1
62892: ARRAY
62893: PPUSH
62894: LD_INT 3
62896: PUSH
62897: LD_INT 24
62899: PUSH
62900: LD_INT 1000
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PPUSH
62911: CALL_OW 72
62915: PUSH
62916: LD_VAR 0 6
62920: UNION
62921: PPUSH
62922: CALL 18270 0 3
62926: ST_TO_ADDR
// if not need_heal_2 then
62927: LD_VAR 0 7
62931: NOT
62932: IFFALSE 62965
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
62934: LD_ADDR_EXP 55
62938: PUSH
62939: LD_EXP 55
62943: PPUSH
62944: LD_VAR 0 2
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PPUSH
62956: EMPTY
62957: PPUSH
62958: CALL 18270 0 3
62962: ST_TO_ADDR
62963: GO 62997
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62965: LD_ADDR_EXP 55
62969: PUSH
62970: LD_EXP 55
62974: PPUSH
62975: LD_VAR 0 2
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PPUSH
62987: LD_VAR 0 7
62991: PPUSH
62992: CALL 18270 0 3
62996: ST_TO_ADDR
// if need_heal_2 then
62997: LD_VAR 0 7
63001: IFFALSE 63173
// for j in need_heal_2 do
63003: LD_ADDR_VAR 0 3
63007: PUSH
63008: LD_VAR 0 7
63012: PUSH
63013: FOR_IN
63014: IFFALSE 63171
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
63016: LD_ADDR_VAR 0 5
63020: PUSH
63021: LD_EXP 52
63025: PUSH
63026: LD_VAR 0 2
63030: ARRAY
63031: PPUSH
63032: LD_INT 2
63034: PUSH
63035: LD_INT 30
63037: PUSH
63038: LD_INT 6
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 30
63047: PUSH
63048: LD_INT 7
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 30
63057: PUSH
63058: LD_INT 8
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 30
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 30
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 25
63087: PUSH
63088: LD_INT 4
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: PPUSH
63104: CALL_OW 72
63108: ST_TO_ADDR
// if tmp then
63109: LD_VAR 0 5
63113: IFFALSE 63169
// begin k := NearestUnitToUnit ( tmp , j ) ;
63115: LD_ADDR_VAR 0 4
63119: PUSH
63120: LD_VAR 0 5
63124: PPUSH
63125: LD_VAR 0 3
63129: PPUSH
63130: CALL_OW 74
63134: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
63135: LD_VAR 0 3
63139: PPUSH
63140: LD_VAR 0 4
63144: PPUSH
63145: CALL_OW 296
63149: PUSH
63150: LD_INT 7
63152: GREATER
63153: IFFALSE 63169
// ComMoveUnit ( j , k ) ;
63155: LD_VAR 0 3
63159: PPUSH
63160: LD_VAR 0 4
63164: PPUSH
63165: CALL_OW 112
// end ; end ;
63169: GO 63013
63171: POP
63172: POP
// if not need_heal_1 and not need_heal_2 then
63173: LD_VAR 0 6
63177: NOT
63178: PUSH
63179: LD_VAR 0 7
63183: NOT
63184: AND
63185: IFFALSE 63189
// continue ;
63187: GO 62642
// end ;
63189: GO 62642
63191: POP
63192: POP
// RaiseSailEvent ( 102 ) ;
63193: LD_INT 102
63195: PPUSH
63196: CALL_OW 427
// end ;
63200: LD_VAR 0 1
63204: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
63205: LD_INT 0
63207: PPUSH
63208: PPUSH
63209: PPUSH
63210: PPUSH
63211: PPUSH
63212: PPUSH
// if not mc_bases then
63213: LD_EXP 52
63217: NOT
63218: IFFALSE 63222
// exit ;
63220: GO 63932
// for i = 1 to mc_bases do
63222: LD_ADDR_VAR 0 2
63226: PUSH
63227: DOUBLE
63228: LD_INT 1
63230: DEC
63231: ST_TO_ADDR
63232: LD_EXP 52
63236: PUSH
63237: FOR_TO
63238: IFFALSE 63930
// begin if not mc_building_need_repair [ i ] then
63240: LD_EXP 53
63244: PUSH
63245: LD_VAR 0 2
63249: ARRAY
63250: NOT
63251: IFFALSE 63425
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
63253: LD_ADDR_VAR 0 6
63257: PUSH
63258: LD_EXP 71
63262: PUSH
63263: LD_VAR 0 2
63267: ARRAY
63268: PPUSH
63269: LD_INT 3
63271: PUSH
63272: LD_INT 24
63274: PUSH
63275: LD_INT 1000
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 34
63291: PUSH
63292: LD_INT 13
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 34
63301: PUSH
63302: LD_INT 52
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PPUSH
63318: CALL_OW 72
63322: ST_TO_ADDR
// if cranes then
63323: LD_VAR 0 6
63327: IFFALSE 63389
// for j in cranes do
63329: LD_ADDR_VAR 0 3
63333: PUSH
63334: LD_VAR 0 6
63338: PUSH
63339: FOR_IN
63340: IFFALSE 63387
// if not IsInArea ( j , mc_parking [ i ] ) then
63342: LD_VAR 0 3
63346: PPUSH
63347: LD_EXP 76
63351: PUSH
63352: LD_VAR 0 2
63356: ARRAY
63357: PPUSH
63358: CALL_OW 308
63362: NOT
63363: IFFALSE 63385
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63365: LD_VAR 0 3
63369: PPUSH
63370: LD_EXP 76
63374: PUSH
63375: LD_VAR 0 2
63379: ARRAY
63380: PPUSH
63381: CALL_OW 113
63385: GO 63339
63387: POP
63388: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
63389: LD_ADDR_EXP 54
63393: PUSH
63394: LD_EXP 54
63398: PPUSH
63399: LD_VAR 0 2
63403: PPUSH
63404: EMPTY
63405: PPUSH
63406: CALL_OW 1
63410: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
63411: LD_VAR 0 2
63415: PPUSH
63416: LD_INT 101
63418: PPUSH
63419: CALL 58317 0 2
// continue ;
63423: GO 63237
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
63425: LD_ADDR_EXP 58
63429: PUSH
63430: LD_EXP 58
63434: PPUSH
63435: LD_VAR 0 2
63439: PPUSH
63440: EMPTY
63441: PPUSH
63442: CALL_OW 1
63446: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63447: LD_VAR 0 2
63451: PPUSH
63452: LD_INT 103
63454: PPUSH
63455: CALL 58317 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
63459: LD_ADDR_VAR 0 5
63463: PUSH
63464: LD_EXP 52
63468: PUSH
63469: LD_VAR 0 2
63473: ARRAY
63474: PUSH
63475: LD_EXP 81
63479: PUSH
63480: LD_VAR 0 2
63484: ARRAY
63485: UNION
63486: PPUSH
63487: LD_INT 2
63489: PUSH
63490: LD_INT 25
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 25
63502: PUSH
63503: LD_INT 16
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: PUSH
63515: EMPTY
63516: LIST
63517: PPUSH
63518: CALL_OW 72
63522: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
63523: LD_ADDR_VAR 0 6
63527: PUSH
63528: LD_EXP 71
63532: PUSH
63533: LD_VAR 0 2
63537: ARRAY
63538: PPUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 34
63544: PUSH
63545: LD_INT 13
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 34
63554: PUSH
63555: LD_INT 52
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: PPUSH
63567: CALL_OW 72
63571: ST_TO_ADDR
// if cranes then
63572: LD_VAR 0 6
63576: IFFALSE 63712
// begin for j in cranes do
63578: LD_ADDR_VAR 0 3
63582: PUSH
63583: LD_VAR 0 6
63587: PUSH
63588: FOR_IN
63589: IFFALSE 63710
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
63591: LD_VAR 0 3
63595: PPUSH
63596: CALL_OW 256
63600: PUSH
63601: LD_INT 500
63603: GREATEREQUAL
63604: PUSH
63605: LD_VAR 0 3
63609: PPUSH
63610: CALL_OW 314
63614: NOT
63615: AND
63616: IFFALSE 63650
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
63618: LD_VAR 0 3
63622: PPUSH
63623: LD_EXP 53
63627: PUSH
63628: LD_VAR 0 2
63632: ARRAY
63633: PPUSH
63634: LD_VAR 0 3
63638: PPUSH
63639: CALL_OW 74
63643: PPUSH
63644: CALL_OW 130
63648: GO 63708
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
63650: LD_VAR 0 3
63654: PPUSH
63655: CALL_OW 256
63659: PUSH
63660: LD_INT 500
63662: LESS
63663: PUSH
63664: LD_VAR 0 3
63668: PPUSH
63669: LD_EXP 76
63673: PUSH
63674: LD_VAR 0 2
63678: ARRAY
63679: PPUSH
63680: CALL_OW 308
63684: NOT
63685: AND
63686: IFFALSE 63708
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63688: LD_VAR 0 3
63692: PPUSH
63693: LD_EXP 76
63697: PUSH
63698: LD_VAR 0 2
63702: ARRAY
63703: PPUSH
63704: CALL_OW 113
63708: GO 63588
63710: POP
63711: POP
// end ; if not tmp then
63712: LD_VAR 0 5
63716: NOT
63717: IFFALSE 63721
// continue ;
63719: GO 63237
// for j in tmp do
63721: LD_ADDR_VAR 0 3
63725: PUSH
63726: LD_VAR 0 5
63730: PUSH
63731: FOR_IN
63732: IFFALSE 63926
// begin if mc_need_heal [ i ] then
63734: LD_EXP 55
63738: PUSH
63739: LD_VAR 0 2
63743: ARRAY
63744: IFFALSE 63792
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
63746: LD_VAR 0 3
63750: PUSH
63751: LD_EXP 55
63755: PUSH
63756: LD_VAR 0 2
63760: ARRAY
63761: PUSH
63762: LD_INT 1
63764: ARRAY
63765: IN
63766: PUSH
63767: LD_VAR 0 3
63771: PUSH
63772: LD_EXP 55
63776: PUSH
63777: LD_VAR 0 2
63781: ARRAY
63782: PUSH
63783: LD_INT 2
63785: ARRAY
63786: IN
63787: OR
63788: IFFALSE 63792
// continue ;
63790: GO 63731
// if IsInUnit ( j ) then
63792: LD_VAR 0 3
63796: PPUSH
63797: CALL_OW 310
63801: IFFALSE 63812
// ComExitBuilding ( j ) ;
63803: LD_VAR 0 3
63807: PPUSH
63808: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
63812: LD_VAR 0 3
63816: PUSH
63817: LD_EXP 54
63821: PUSH
63822: LD_VAR 0 2
63826: ARRAY
63827: IN
63828: NOT
63829: IFFALSE 63887
// begin SetTag ( j , 101 ) ;
63831: LD_VAR 0 3
63835: PPUSH
63836: LD_INT 101
63838: PPUSH
63839: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
63843: LD_ADDR_EXP 54
63847: PUSH
63848: LD_EXP 54
63852: PPUSH
63853: LD_VAR 0 2
63857: PUSH
63858: LD_EXP 54
63862: PUSH
63863: LD_VAR 0 2
63867: ARRAY
63868: PUSH
63869: LD_INT 1
63871: PLUS
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PPUSH
63877: LD_VAR 0 3
63881: PPUSH
63882: CALL 18270 0 3
63886: ST_TO_ADDR
// end ; wait ( 1 ) ;
63887: LD_INT 1
63889: PPUSH
63890: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
63894: LD_VAR 0 3
63898: PPUSH
63899: LD_EXP 53
63903: PUSH
63904: LD_VAR 0 2
63908: ARRAY
63909: PPUSH
63910: LD_VAR 0 3
63914: PPUSH
63915: CALL_OW 74
63919: PPUSH
63920: CALL_OW 130
// end ;
63924: GO 63731
63926: POP
63927: POP
// end ;
63928: GO 63237
63930: POP
63931: POP
// end ;
63932: LD_VAR 0 1
63936: RET
// export function MC_Heal ; var i , j , tmp ; begin
63937: LD_INT 0
63939: PPUSH
63940: PPUSH
63941: PPUSH
63942: PPUSH
// if not mc_bases then
63943: LD_EXP 52
63947: NOT
63948: IFFALSE 63952
// exit ;
63950: GO 64354
// for i = 1 to mc_bases do
63952: LD_ADDR_VAR 0 2
63956: PUSH
63957: DOUBLE
63958: LD_INT 1
63960: DEC
63961: ST_TO_ADDR
63962: LD_EXP 52
63966: PUSH
63967: FOR_TO
63968: IFFALSE 64352
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
63970: LD_EXP 55
63974: PUSH
63975: LD_VAR 0 2
63979: ARRAY
63980: PUSH
63981: LD_INT 1
63983: ARRAY
63984: NOT
63985: PUSH
63986: LD_EXP 55
63990: PUSH
63991: LD_VAR 0 2
63995: ARRAY
63996: PUSH
63997: LD_INT 2
63999: ARRAY
64000: NOT
64001: AND
64002: IFFALSE 64040
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
64004: LD_ADDR_EXP 56
64008: PUSH
64009: LD_EXP 56
64013: PPUSH
64014: LD_VAR 0 2
64018: PPUSH
64019: EMPTY
64020: PPUSH
64021: CALL_OW 1
64025: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
64026: LD_VAR 0 2
64030: PPUSH
64031: LD_INT 102
64033: PPUSH
64034: CALL 58317 0 2
// continue ;
64038: GO 63967
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
64040: LD_ADDR_VAR 0 4
64044: PUSH
64045: LD_EXP 52
64049: PUSH
64050: LD_VAR 0 2
64054: ARRAY
64055: PPUSH
64056: LD_INT 25
64058: PUSH
64059: LD_INT 4
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 72
64070: ST_TO_ADDR
// if not tmp then
64071: LD_VAR 0 4
64075: NOT
64076: IFFALSE 64080
// continue ;
64078: GO 63967
// if mc_taming [ i ] then
64080: LD_EXP 83
64084: PUSH
64085: LD_VAR 0 2
64089: ARRAY
64090: IFFALSE 64114
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64092: LD_ADDR_EXP 83
64096: PUSH
64097: LD_EXP 83
64101: PPUSH
64102: LD_VAR 0 2
64106: PPUSH
64107: EMPTY
64108: PPUSH
64109: CALL_OW 1
64113: ST_TO_ADDR
// for j in tmp do
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_VAR 0 4
64123: PUSH
64124: FOR_IN
64125: IFFALSE 64348
// begin if IsInUnit ( j ) then
64127: LD_VAR 0 3
64131: PPUSH
64132: CALL_OW 310
64136: IFFALSE 64147
// ComExitBuilding ( j ) ;
64138: LD_VAR 0 3
64142: PPUSH
64143: CALL_OW 122
// if not j in mc_healers [ i ] then
64147: LD_VAR 0 3
64151: PUSH
64152: LD_EXP 56
64156: PUSH
64157: LD_VAR 0 2
64161: ARRAY
64162: IN
64163: NOT
64164: IFFALSE 64210
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
64166: LD_ADDR_EXP 56
64170: PUSH
64171: LD_EXP 56
64175: PPUSH
64176: LD_VAR 0 2
64180: PUSH
64181: LD_EXP 56
64185: PUSH
64186: LD_VAR 0 2
64190: ARRAY
64191: PUSH
64192: LD_INT 1
64194: PLUS
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PPUSH
64200: LD_VAR 0 3
64204: PPUSH
64205: CALL 18270 0 3
64209: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
64210: LD_VAR 0 3
64214: PPUSH
64215: CALL_OW 110
64219: PUSH
64220: LD_INT 102
64222: NONEQUAL
64223: IFFALSE 64237
// SetTag ( j , 102 ) ;
64225: LD_VAR 0 3
64229: PPUSH
64230: LD_INT 102
64232: PPUSH
64233: CALL_OW 109
// Wait ( 3 ) ;
64237: LD_INT 3
64239: PPUSH
64240: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
64244: LD_EXP 55
64248: PUSH
64249: LD_VAR 0 2
64253: ARRAY
64254: PUSH
64255: LD_INT 1
64257: ARRAY
64258: IFFALSE 64290
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
64260: LD_VAR 0 3
64264: PPUSH
64265: LD_EXP 55
64269: PUSH
64270: LD_VAR 0 2
64274: ARRAY
64275: PUSH
64276: LD_INT 1
64278: ARRAY
64279: PUSH
64280: LD_INT 1
64282: ARRAY
64283: PPUSH
64284: CALL_OW 128
64288: GO 64346
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
64290: LD_VAR 0 3
64294: PPUSH
64295: CALL_OW 314
64299: NOT
64300: PUSH
64301: LD_EXP 55
64305: PUSH
64306: LD_VAR 0 2
64310: ARRAY
64311: PUSH
64312: LD_INT 2
64314: ARRAY
64315: AND
64316: IFFALSE 64346
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
64318: LD_VAR 0 3
64322: PPUSH
64323: LD_EXP 55
64327: PUSH
64328: LD_VAR 0 2
64332: ARRAY
64333: PUSH
64334: LD_INT 2
64336: ARRAY
64337: PUSH
64338: LD_INT 1
64340: ARRAY
64341: PPUSH
64342: CALL_OW 128
// end ;
64346: GO 64124
64348: POP
64349: POP
// end ;
64350: GO 63967
64352: POP
64353: POP
// end ;
64354: LD_VAR 0 1
64358: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
64359: LD_INT 0
64361: PPUSH
64362: PPUSH
64363: PPUSH
64364: PPUSH
64365: PPUSH
// if not mc_bases then
64366: LD_EXP 52
64370: NOT
64371: IFFALSE 64375
// exit ;
64373: GO 65518
// for i = 1 to mc_bases do
64375: LD_ADDR_VAR 0 2
64379: PUSH
64380: DOUBLE
64381: LD_INT 1
64383: DEC
64384: ST_TO_ADDR
64385: LD_EXP 52
64389: PUSH
64390: FOR_TO
64391: IFFALSE 65516
// begin if mc_scan [ i ] then
64393: LD_EXP 75
64397: PUSH
64398: LD_VAR 0 2
64402: ARRAY
64403: IFFALSE 64407
// continue ;
64405: GO 64390
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
64407: LD_EXP 57
64411: PUSH
64412: LD_VAR 0 2
64416: ARRAY
64417: NOT
64418: PUSH
64419: LD_EXP 59
64423: PUSH
64424: LD_VAR 0 2
64428: ARRAY
64429: NOT
64430: AND
64431: PUSH
64432: LD_EXP 58
64436: PUSH
64437: LD_VAR 0 2
64441: ARRAY
64442: AND
64443: IFFALSE 64481
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
64445: LD_ADDR_EXP 58
64449: PUSH
64450: LD_EXP 58
64454: PPUSH
64455: LD_VAR 0 2
64459: PPUSH
64460: EMPTY
64461: PPUSH
64462: CALL_OW 1
64466: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64467: LD_VAR 0 2
64471: PPUSH
64472: LD_INT 103
64474: PPUSH
64475: CALL 58317 0 2
// continue ;
64479: GO 64390
// end ; if mc_construct_list [ i ] then
64481: LD_EXP 59
64485: PUSH
64486: LD_VAR 0 2
64490: ARRAY
64491: IFFALSE 64711
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64493: LD_ADDR_VAR 0 4
64497: PUSH
64498: LD_EXP 52
64502: PUSH
64503: LD_VAR 0 2
64507: ARRAY
64508: PPUSH
64509: LD_INT 25
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PPUSH
64519: CALL_OW 72
64523: PUSH
64524: LD_EXP 54
64528: PUSH
64529: LD_VAR 0 2
64533: ARRAY
64534: DIFF
64535: ST_TO_ADDR
// if not tmp then
64536: LD_VAR 0 4
64540: NOT
64541: IFFALSE 64545
// continue ;
64543: GO 64390
// for j in tmp do
64545: LD_ADDR_VAR 0 3
64549: PUSH
64550: LD_VAR 0 4
64554: PUSH
64555: FOR_IN
64556: IFFALSE 64707
// begin if not mc_builders [ i ] then
64558: LD_EXP 58
64562: PUSH
64563: LD_VAR 0 2
64567: ARRAY
64568: NOT
64569: IFFALSE 64627
// begin SetTag ( j , 103 ) ;
64571: LD_VAR 0 3
64575: PPUSH
64576: LD_INT 103
64578: PPUSH
64579: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64583: LD_ADDR_EXP 58
64587: PUSH
64588: LD_EXP 58
64592: PPUSH
64593: LD_VAR 0 2
64597: PUSH
64598: LD_EXP 58
64602: PUSH
64603: LD_VAR 0 2
64607: ARRAY
64608: PUSH
64609: LD_INT 1
64611: PLUS
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PPUSH
64617: LD_VAR 0 3
64621: PPUSH
64622: CALL 18270 0 3
64626: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64627: LD_VAR 0 3
64631: PPUSH
64632: CALL_OW 310
64636: IFFALSE 64647
// ComExitBuilding ( j ) ;
64638: LD_VAR 0 3
64642: PPUSH
64643: CALL_OW 122
// wait ( 3 ) ;
64647: LD_INT 3
64649: PPUSH
64650: CALL_OW 67
// if not mc_construct_list [ i ] then
64654: LD_EXP 59
64658: PUSH
64659: LD_VAR 0 2
64663: ARRAY
64664: NOT
64665: IFFALSE 64669
// break ;
64667: GO 64707
// if not HasTask ( j ) then
64669: LD_VAR 0 3
64673: PPUSH
64674: CALL_OW 314
64678: NOT
64679: IFFALSE 64705
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
64681: LD_VAR 0 3
64685: PPUSH
64686: LD_EXP 59
64690: PUSH
64691: LD_VAR 0 2
64695: ARRAY
64696: PUSH
64697: LD_INT 1
64699: ARRAY
64700: PPUSH
64701: CALL 21121 0 2
// end ;
64705: GO 64555
64707: POP
64708: POP
// end else
64709: GO 65514
// if mc_build_list [ i ] then
64711: LD_EXP 57
64715: PUSH
64716: LD_VAR 0 2
64720: ARRAY
64721: IFFALSE 65514
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64723: LD_ADDR_VAR 0 5
64727: PUSH
64728: LD_EXP 52
64732: PUSH
64733: LD_VAR 0 2
64737: ARRAY
64738: PPUSH
64739: LD_INT 2
64741: PUSH
64742: LD_INT 30
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 30
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: PPUSH
64767: CALL_OW 72
64771: ST_TO_ADDR
// if depot then
64772: LD_VAR 0 5
64776: IFFALSE 64794
// depot := depot [ 1 ] else
64778: LD_ADDR_VAR 0 5
64782: PUSH
64783: LD_VAR 0 5
64787: PUSH
64788: LD_INT 1
64790: ARRAY
64791: ST_TO_ADDR
64792: GO 64802
// depot := 0 ;
64794: LD_ADDR_VAR 0 5
64798: PUSH
64799: LD_INT 0
64801: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
64802: LD_EXP 57
64806: PUSH
64807: LD_VAR 0 2
64811: ARRAY
64812: PUSH
64813: LD_INT 1
64815: ARRAY
64816: PUSH
64817: LD_INT 1
64819: ARRAY
64820: PPUSH
64821: CALL 20951 0 1
64825: PUSH
64826: LD_EXP 52
64830: PUSH
64831: LD_VAR 0 2
64835: ARRAY
64836: PPUSH
64837: LD_INT 2
64839: PUSH
64840: LD_INT 30
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 30
64852: PUSH
64853: LD_INT 3
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: LIST
64864: PPUSH
64865: CALL_OW 72
64869: NOT
64870: AND
64871: IFFALSE 64976
// begin for j = 1 to mc_build_list [ i ] do
64873: LD_ADDR_VAR 0 3
64877: PUSH
64878: DOUBLE
64879: LD_INT 1
64881: DEC
64882: ST_TO_ADDR
64883: LD_EXP 57
64887: PUSH
64888: LD_VAR 0 2
64892: ARRAY
64893: PUSH
64894: FOR_TO
64895: IFFALSE 64974
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
64897: LD_EXP 57
64901: PUSH
64902: LD_VAR 0 2
64906: ARRAY
64907: PUSH
64908: LD_VAR 0 3
64912: ARRAY
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PUSH
64918: LD_INT 2
64920: EQUAL
64921: IFFALSE 64972
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
64923: LD_ADDR_EXP 57
64927: PUSH
64928: LD_EXP 57
64932: PPUSH
64933: LD_VAR 0 2
64937: PPUSH
64938: LD_EXP 57
64942: PUSH
64943: LD_VAR 0 2
64947: ARRAY
64948: PPUSH
64949: LD_VAR 0 3
64953: PPUSH
64954: LD_INT 1
64956: PPUSH
64957: LD_INT 0
64959: PPUSH
64960: CALL 17688 0 4
64964: PPUSH
64965: CALL_OW 1
64969: ST_TO_ADDR
// break ;
64970: GO 64974
// end ;
64972: GO 64894
64974: POP
64975: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
64976: LD_EXP 57
64980: PUSH
64981: LD_VAR 0 2
64985: ARRAY
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: PUSH
64991: LD_INT 1
64993: ARRAY
64994: PUSH
64995: LD_INT 0
64997: EQUAL
64998: PUSH
64999: LD_VAR 0 5
65003: PUSH
65004: LD_VAR 0 5
65008: PPUSH
65009: LD_EXP 57
65013: PUSH
65014: LD_VAR 0 2
65018: ARRAY
65019: PUSH
65020: LD_INT 1
65022: ARRAY
65023: PUSH
65024: LD_INT 1
65026: ARRAY
65027: PPUSH
65028: LD_EXP 57
65032: PUSH
65033: LD_VAR 0 2
65037: ARRAY
65038: PUSH
65039: LD_INT 1
65041: ARRAY
65042: PUSH
65043: LD_INT 2
65045: ARRAY
65046: PPUSH
65047: LD_EXP 57
65051: PUSH
65052: LD_VAR 0 2
65056: ARRAY
65057: PUSH
65058: LD_INT 1
65060: ARRAY
65061: PUSH
65062: LD_INT 3
65064: ARRAY
65065: PPUSH
65066: LD_EXP 57
65070: PUSH
65071: LD_VAR 0 2
65075: ARRAY
65076: PUSH
65077: LD_INT 1
65079: ARRAY
65080: PUSH
65081: LD_INT 4
65083: ARRAY
65084: PPUSH
65085: CALL 25685 0 5
65089: AND
65090: OR
65091: IFFALSE 65372
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65093: LD_ADDR_VAR 0 4
65097: PUSH
65098: LD_EXP 52
65102: PUSH
65103: LD_VAR 0 2
65107: ARRAY
65108: PPUSH
65109: LD_INT 25
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PPUSH
65119: CALL_OW 72
65123: PUSH
65124: LD_EXP 54
65128: PUSH
65129: LD_VAR 0 2
65133: ARRAY
65134: DIFF
65135: ST_TO_ADDR
// if not tmp then
65136: LD_VAR 0 4
65140: NOT
65141: IFFALSE 65145
// continue ;
65143: GO 64390
// for j in tmp do
65145: LD_ADDR_VAR 0 3
65149: PUSH
65150: LD_VAR 0 4
65154: PUSH
65155: FOR_IN
65156: IFFALSE 65368
// begin if not mc_builders [ i ] then
65158: LD_EXP 58
65162: PUSH
65163: LD_VAR 0 2
65167: ARRAY
65168: NOT
65169: IFFALSE 65227
// begin SetTag ( j , 103 ) ;
65171: LD_VAR 0 3
65175: PPUSH
65176: LD_INT 103
65178: PPUSH
65179: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65183: LD_ADDR_EXP 58
65187: PUSH
65188: LD_EXP 58
65192: PPUSH
65193: LD_VAR 0 2
65197: PUSH
65198: LD_EXP 58
65202: PUSH
65203: LD_VAR 0 2
65207: ARRAY
65208: PUSH
65209: LD_INT 1
65211: PLUS
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PPUSH
65217: LD_VAR 0 3
65221: PPUSH
65222: CALL 18270 0 3
65226: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65227: LD_VAR 0 3
65231: PPUSH
65232: CALL_OW 310
65236: IFFALSE 65247
// ComExitBuilding ( j ) ;
65238: LD_VAR 0 3
65242: PPUSH
65243: CALL_OW 122
// wait ( 3 ) ;
65247: LD_INT 3
65249: PPUSH
65250: CALL_OW 67
// if not mc_build_list [ i ] then
65254: LD_EXP 57
65258: PUSH
65259: LD_VAR 0 2
65263: ARRAY
65264: NOT
65265: IFFALSE 65269
// break ;
65267: GO 65368
// if not HasTask ( j ) then
65269: LD_VAR 0 3
65273: PPUSH
65274: CALL_OW 314
65278: NOT
65279: IFFALSE 65366
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65281: LD_VAR 0 3
65285: PPUSH
65286: LD_EXP 57
65290: PUSH
65291: LD_VAR 0 2
65295: ARRAY
65296: PUSH
65297: LD_INT 1
65299: ARRAY
65300: PUSH
65301: LD_INT 1
65303: ARRAY
65304: PPUSH
65305: LD_EXP 57
65309: PUSH
65310: LD_VAR 0 2
65314: ARRAY
65315: PUSH
65316: LD_INT 1
65318: ARRAY
65319: PUSH
65320: LD_INT 2
65322: ARRAY
65323: PPUSH
65324: LD_EXP 57
65328: PUSH
65329: LD_VAR 0 2
65333: ARRAY
65334: PUSH
65335: LD_INT 1
65337: ARRAY
65338: PUSH
65339: LD_INT 3
65341: ARRAY
65342: PPUSH
65343: LD_EXP 57
65347: PUSH
65348: LD_VAR 0 2
65352: ARRAY
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PUSH
65358: LD_INT 4
65360: ARRAY
65361: PPUSH
65362: CALL_OW 145
// end ;
65366: GO 65155
65368: POP
65369: POP
// end else
65370: GO 65514
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
65372: LD_EXP 52
65376: PUSH
65377: LD_VAR 0 2
65381: ARRAY
65382: PPUSH
65383: LD_EXP 57
65387: PUSH
65388: LD_VAR 0 2
65392: ARRAY
65393: PUSH
65394: LD_INT 1
65396: ARRAY
65397: PUSH
65398: LD_INT 1
65400: ARRAY
65401: PPUSH
65402: LD_EXP 57
65406: PUSH
65407: LD_VAR 0 2
65411: ARRAY
65412: PUSH
65413: LD_INT 1
65415: ARRAY
65416: PUSH
65417: LD_INT 2
65419: ARRAY
65420: PPUSH
65421: LD_EXP 57
65425: PUSH
65426: LD_VAR 0 2
65430: ARRAY
65431: PUSH
65432: LD_INT 1
65434: ARRAY
65435: PUSH
65436: LD_INT 3
65438: ARRAY
65439: PPUSH
65440: LD_EXP 57
65444: PUSH
65445: LD_VAR 0 2
65449: ARRAY
65450: PUSH
65451: LD_INT 1
65453: ARRAY
65454: PUSH
65455: LD_INT 4
65457: ARRAY
65458: PPUSH
65459: CALL 25021 0 5
65463: NOT
65464: IFFALSE 65514
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65466: LD_ADDR_EXP 57
65470: PUSH
65471: LD_EXP 57
65475: PPUSH
65476: LD_VAR 0 2
65480: PPUSH
65481: LD_EXP 57
65485: PUSH
65486: LD_VAR 0 2
65490: ARRAY
65491: PPUSH
65492: LD_INT 1
65494: PPUSH
65495: LD_INT 1
65497: NEG
65498: PPUSH
65499: LD_INT 0
65501: PPUSH
65502: CALL 17688 0 4
65506: PPUSH
65507: CALL_OW 1
65511: ST_TO_ADDR
// continue ;
65512: GO 64390
// end ; end ; end ;
65514: GO 64390
65516: POP
65517: POP
// end ;
65518: LD_VAR 0 1
65522: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65523: LD_INT 0
65525: PPUSH
65526: PPUSH
65527: PPUSH
65528: PPUSH
65529: PPUSH
65530: PPUSH
// if not mc_bases then
65531: LD_EXP 52
65535: NOT
65536: IFFALSE 65540
// exit ;
65538: GO 65967
// for i = 1 to mc_bases do
65540: LD_ADDR_VAR 0 2
65544: PUSH
65545: DOUBLE
65546: LD_INT 1
65548: DEC
65549: ST_TO_ADDR
65550: LD_EXP 52
65554: PUSH
65555: FOR_TO
65556: IFFALSE 65965
// begin tmp := mc_build_upgrade [ i ] ;
65558: LD_ADDR_VAR 0 4
65562: PUSH
65563: LD_EXP 84
65567: PUSH
65568: LD_VAR 0 2
65572: ARRAY
65573: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
65574: LD_ADDR_VAR 0 6
65578: PUSH
65579: LD_EXP 85
65583: PUSH
65584: LD_VAR 0 2
65588: ARRAY
65589: PPUSH
65590: LD_INT 2
65592: PUSH
65593: LD_INT 30
65595: PUSH
65596: LD_INT 6
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 30
65605: PUSH
65606: LD_INT 7
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: LIST
65617: PPUSH
65618: CALL_OW 72
65622: ST_TO_ADDR
// if not tmp and not lab then
65623: LD_VAR 0 4
65627: NOT
65628: PUSH
65629: LD_VAR 0 6
65633: NOT
65634: AND
65635: IFFALSE 65639
// continue ;
65637: GO 65555
// if tmp then
65639: LD_VAR 0 4
65643: IFFALSE 65763
// for j in tmp do
65645: LD_ADDR_VAR 0 3
65649: PUSH
65650: LD_VAR 0 4
65654: PUSH
65655: FOR_IN
65656: IFFALSE 65761
// begin if UpgradeCost ( j ) then
65658: LD_VAR 0 3
65662: PPUSH
65663: CALL 24681 0 1
65667: IFFALSE 65759
// begin ComUpgrade ( j ) ;
65669: LD_VAR 0 3
65673: PPUSH
65674: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
65678: LD_ADDR_EXP 84
65682: PUSH
65683: LD_EXP 84
65687: PPUSH
65688: LD_VAR 0 2
65692: PPUSH
65693: LD_EXP 84
65697: PUSH
65698: LD_VAR 0 2
65702: ARRAY
65703: PUSH
65704: LD_VAR 0 3
65708: DIFF
65709: PPUSH
65710: CALL_OW 1
65714: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65715: LD_ADDR_EXP 59
65719: PUSH
65720: LD_EXP 59
65724: PPUSH
65725: LD_VAR 0 2
65729: PUSH
65730: LD_EXP 59
65734: PUSH
65735: LD_VAR 0 2
65739: ARRAY
65740: PUSH
65741: LD_INT 1
65743: PLUS
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PPUSH
65749: LD_VAR 0 3
65753: PPUSH
65754: CALL 18270 0 3
65758: ST_TO_ADDR
// end ; end ;
65759: GO 65655
65761: POP
65762: POP
// if not lab or not mc_lab_upgrade [ i ] then
65763: LD_VAR 0 6
65767: NOT
65768: PUSH
65769: LD_EXP 86
65773: PUSH
65774: LD_VAR 0 2
65778: ARRAY
65779: NOT
65780: OR
65781: IFFALSE 65785
// continue ;
65783: GO 65555
// for j in lab do
65785: LD_ADDR_VAR 0 3
65789: PUSH
65790: LD_VAR 0 6
65794: PUSH
65795: FOR_IN
65796: IFFALSE 65961
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
65798: LD_VAR 0 3
65802: PPUSH
65803: CALL_OW 266
65807: PUSH
65808: LD_INT 6
65810: PUSH
65811: LD_INT 7
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: IN
65818: PUSH
65819: LD_VAR 0 3
65823: PPUSH
65824: CALL_OW 461
65828: PUSH
65829: LD_INT 1
65831: NONEQUAL
65832: AND
65833: IFFALSE 65959
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
65835: LD_VAR 0 3
65839: PPUSH
65840: LD_EXP 86
65844: PUSH
65845: LD_VAR 0 2
65849: ARRAY
65850: PUSH
65851: LD_INT 1
65853: ARRAY
65854: PPUSH
65855: CALL 24886 0 2
65859: IFFALSE 65959
// begin ComCancel ( j ) ;
65861: LD_VAR 0 3
65865: PPUSH
65866: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
65870: LD_VAR 0 3
65874: PPUSH
65875: LD_EXP 86
65879: PUSH
65880: LD_VAR 0 2
65884: ARRAY
65885: PUSH
65886: LD_INT 1
65888: ARRAY
65889: PPUSH
65890: CALL_OW 207
// if not j in mc_construct_list [ i ] then
65894: LD_VAR 0 3
65898: PUSH
65899: LD_EXP 59
65903: PUSH
65904: LD_VAR 0 2
65908: ARRAY
65909: IN
65910: NOT
65911: IFFALSE 65957
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65913: LD_ADDR_EXP 59
65917: PUSH
65918: LD_EXP 59
65922: PPUSH
65923: LD_VAR 0 2
65927: PUSH
65928: LD_EXP 59
65932: PUSH
65933: LD_VAR 0 2
65937: ARRAY
65938: PUSH
65939: LD_INT 1
65941: PLUS
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PPUSH
65947: LD_VAR 0 3
65951: PPUSH
65952: CALL 18270 0 3
65956: ST_TO_ADDR
// break ;
65957: GO 65961
// end ; end ; end ;
65959: GO 65795
65961: POP
65962: POP
// end ;
65963: GO 65555
65965: POP
65966: POP
// end ;
65967: LD_VAR 0 1
65971: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
65972: LD_INT 0
65974: PPUSH
65975: PPUSH
65976: PPUSH
65977: PPUSH
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
// if not mc_bases then
65983: LD_EXP 52
65987: NOT
65988: IFFALSE 65992
// exit ;
65990: GO 66397
// for i = 1 to mc_bases do
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: DOUBLE
65998: LD_INT 1
66000: DEC
66001: ST_TO_ADDR
66002: LD_EXP 52
66006: PUSH
66007: FOR_TO
66008: IFFALSE 66395
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
66010: LD_EXP 60
66014: PUSH
66015: LD_VAR 0 2
66019: ARRAY
66020: NOT
66021: PUSH
66022: LD_EXP 52
66026: PUSH
66027: LD_VAR 0 2
66031: ARRAY
66032: PPUSH
66033: LD_INT 30
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PPUSH
66043: CALL_OW 72
66047: NOT
66048: OR
66049: IFFALSE 66053
// continue ;
66051: GO 66007
// busy := false ;
66053: LD_ADDR_VAR 0 8
66057: PUSH
66058: LD_INT 0
66060: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66061: LD_ADDR_VAR 0 4
66065: PUSH
66066: LD_EXP 52
66070: PUSH
66071: LD_VAR 0 2
66075: ARRAY
66076: PPUSH
66077: LD_INT 30
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PPUSH
66087: CALL_OW 72
66091: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
66092: LD_ADDR_VAR 0 6
66096: PUSH
66097: LD_EXP 60
66101: PUSH
66102: LD_VAR 0 2
66106: ARRAY
66107: PPUSH
66108: LD_INT 2
66110: PUSH
66111: LD_INT 30
66113: PUSH
66114: LD_INT 32
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 30
66123: PUSH
66124: LD_INT 33
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: PPUSH
66136: CALL_OW 72
66140: ST_TO_ADDR
// if not t then
66141: LD_VAR 0 6
66145: NOT
66146: IFFALSE 66150
// continue ;
66148: GO 66007
// for j in tmp do
66150: LD_ADDR_VAR 0 3
66154: PUSH
66155: LD_VAR 0 4
66159: PUSH
66160: FOR_IN
66161: IFFALSE 66191
// if not BuildingStatus ( j ) = bs_idle then
66163: LD_VAR 0 3
66167: PPUSH
66168: CALL_OW 461
66172: PUSH
66173: LD_INT 2
66175: EQUAL
66176: NOT
66177: IFFALSE 66189
// begin busy := true ;
66179: LD_ADDR_VAR 0 8
66183: PUSH
66184: LD_INT 1
66186: ST_TO_ADDR
// break ;
66187: GO 66191
// end ;
66189: GO 66160
66191: POP
66192: POP
// if busy then
66193: LD_VAR 0 8
66197: IFFALSE 66201
// continue ;
66199: GO 66007
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
66201: LD_ADDR_VAR 0 7
66205: PUSH
66206: LD_VAR 0 6
66210: PPUSH
66211: LD_INT 35
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PPUSH
66221: CALL_OW 72
66225: ST_TO_ADDR
// if tw then
66226: LD_VAR 0 7
66230: IFFALSE 66307
// begin tw := tw [ 1 ] ;
66232: LD_ADDR_VAR 0 7
66236: PUSH
66237: LD_VAR 0 7
66241: PUSH
66242: LD_INT 1
66244: ARRAY
66245: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
66246: LD_ADDR_VAR 0 9
66250: PUSH
66251: LD_VAR 0 7
66255: PPUSH
66256: LD_EXP 77
66260: PUSH
66261: LD_VAR 0 2
66265: ARRAY
66266: PPUSH
66267: CALL 23240 0 2
66271: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
66272: LD_EXP 91
66276: PUSH
66277: LD_VAR 0 2
66281: ARRAY
66282: IFFALSE 66305
// if not weapon in mc_allowed_tower_weapons [ i ] then
66284: LD_VAR 0 9
66288: PUSH
66289: LD_EXP 91
66293: PUSH
66294: LD_VAR 0 2
66298: ARRAY
66299: IN
66300: NOT
66301: IFFALSE 66305
// continue ;
66303: GO 66007
// end else
66305: GO 66370
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
66307: LD_ADDR_VAR 0 5
66311: PUSH
66312: LD_EXP 60
66316: PUSH
66317: LD_VAR 0 2
66321: ARRAY
66322: PPUSH
66323: LD_VAR 0 4
66327: PPUSH
66328: CALL 53441 0 2
66332: ST_TO_ADDR
// if not tmp2 then
66333: LD_VAR 0 5
66337: NOT
66338: IFFALSE 66342
// continue ;
66340: GO 66007
// tw := tmp2 [ 1 ] ;
66342: LD_ADDR_VAR 0 7
66346: PUSH
66347: LD_VAR 0 5
66351: PUSH
66352: LD_INT 1
66354: ARRAY
66355: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
66356: LD_ADDR_VAR 0 9
66360: PUSH
66361: LD_VAR 0 5
66365: PUSH
66366: LD_INT 2
66368: ARRAY
66369: ST_TO_ADDR
// end ; if not weapon then
66370: LD_VAR 0 9
66374: NOT
66375: IFFALSE 66379
// continue ;
66377: GO 66007
// ComPlaceWeapon ( tw , weapon ) ;
66379: LD_VAR 0 7
66383: PPUSH
66384: LD_VAR 0 9
66388: PPUSH
66389: CALL_OW 148
// end ;
66393: GO 66007
66395: POP
66396: POP
// end ;
66397: LD_VAR 0 1
66401: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66402: LD_INT 0
66404: PPUSH
66405: PPUSH
66406: PPUSH
66407: PPUSH
66408: PPUSH
66409: PPUSH
// if not mc_bases then
66410: LD_EXP 52
66414: NOT
66415: IFFALSE 66419
// exit ;
66417: GO 67431
// for i = 1 to mc_bases do
66419: LD_ADDR_VAR 0 2
66423: PUSH
66424: DOUBLE
66425: LD_INT 1
66427: DEC
66428: ST_TO_ADDR
66429: LD_EXP 52
66433: PUSH
66434: FOR_TO
66435: IFFALSE 67429
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
66437: LD_EXP 65
66441: PUSH
66442: LD_VAR 0 2
66446: ARRAY
66447: NOT
66448: PUSH
66449: LD_EXP 65
66453: PUSH
66454: LD_VAR 0 2
66458: ARRAY
66459: PUSH
66460: LD_EXP 66
66464: PUSH
66465: LD_VAR 0 2
66469: ARRAY
66470: EQUAL
66471: OR
66472: IFFALSE 66476
// continue ;
66474: GO 66434
// if mc_miners [ i ] then
66476: LD_EXP 66
66480: PUSH
66481: LD_VAR 0 2
66485: ARRAY
66486: IFFALSE 67116
// begin k := 1 ;
66488: LD_ADDR_VAR 0 4
66492: PUSH
66493: LD_INT 1
66495: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
66496: LD_ADDR_VAR 0 3
66500: PUSH
66501: DOUBLE
66502: LD_EXP 66
66506: PUSH
66507: LD_VAR 0 2
66511: ARRAY
66512: INC
66513: ST_TO_ADDR
66514: LD_INT 1
66516: PUSH
66517: FOR_DOWNTO
66518: IFFALSE 67114
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
66520: LD_EXP 66
66524: PUSH
66525: LD_VAR 0 2
66529: ARRAY
66530: PUSH
66531: LD_VAR 0 3
66535: ARRAY
66536: PPUSH
66537: CALL_OW 301
66541: PUSH
66542: LD_EXP 66
66546: PUSH
66547: LD_VAR 0 2
66551: ARRAY
66552: PUSH
66553: LD_VAR 0 3
66557: ARRAY
66558: PPUSH
66559: CALL_OW 257
66563: PUSH
66564: LD_INT 1
66566: NONEQUAL
66567: OR
66568: IFFALSE 66631
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66570: LD_ADDR_VAR 0 5
66574: PUSH
66575: LD_EXP 66
66579: PUSH
66580: LD_VAR 0 2
66584: ARRAY
66585: PUSH
66586: LD_EXP 66
66590: PUSH
66591: LD_VAR 0 2
66595: ARRAY
66596: PUSH
66597: LD_VAR 0 3
66601: ARRAY
66602: DIFF
66603: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66604: LD_ADDR_EXP 66
66608: PUSH
66609: LD_EXP 66
66613: PPUSH
66614: LD_VAR 0 2
66618: PPUSH
66619: LD_VAR 0 5
66623: PPUSH
66624: CALL_OW 1
66628: ST_TO_ADDR
// continue ;
66629: GO 66517
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
66631: LD_EXP 66
66635: PUSH
66636: LD_VAR 0 2
66640: ARRAY
66641: PUSH
66642: LD_VAR 0 3
66646: ARRAY
66647: PPUSH
66648: CALL 18206 0 1
66652: PUSH
66653: LD_EXP 66
66657: PUSH
66658: LD_VAR 0 2
66662: ARRAY
66663: PUSH
66664: LD_VAR 0 3
66668: ARRAY
66669: PPUSH
66670: CALL_OW 255
66674: PPUSH
66675: LD_EXP 65
66679: PUSH
66680: LD_VAR 0 2
66684: ARRAY
66685: PUSH
66686: LD_VAR 0 4
66690: ARRAY
66691: PUSH
66692: LD_INT 1
66694: ARRAY
66695: PPUSH
66696: LD_EXP 65
66700: PUSH
66701: LD_VAR 0 2
66705: ARRAY
66706: PUSH
66707: LD_VAR 0 4
66711: ARRAY
66712: PUSH
66713: LD_INT 2
66715: ARRAY
66716: PPUSH
66717: LD_INT 15
66719: PPUSH
66720: CALL 19166 0 4
66724: PUSH
66725: LD_INT 4
66727: ARRAY
66728: PUSH
66729: LD_EXP 66
66733: PUSH
66734: LD_VAR 0 2
66738: ARRAY
66739: PUSH
66740: LD_VAR 0 3
66744: ARRAY
66745: PPUSH
66746: LD_INT 10
66748: PPUSH
66749: CALL 20863 0 2
66753: PUSH
66754: LD_INT 4
66756: ARRAY
66757: OR
66758: AND
66759: IFFALSE 66782
// ComStop ( mc_miners [ i ] [ j ] ) ;
66761: LD_EXP 66
66765: PUSH
66766: LD_VAR 0 2
66770: ARRAY
66771: PUSH
66772: LD_VAR 0 3
66776: ARRAY
66777: PPUSH
66778: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
66782: LD_EXP 66
66786: PUSH
66787: LD_VAR 0 2
66791: ARRAY
66792: PUSH
66793: LD_VAR 0 3
66797: ARRAY
66798: PPUSH
66799: CALL_OW 257
66803: PUSH
66804: LD_INT 1
66806: EQUAL
66807: PUSH
66808: LD_EXP 66
66812: PUSH
66813: LD_VAR 0 2
66817: ARRAY
66818: PUSH
66819: LD_VAR 0 3
66823: ARRAY
66824: PPUSH
66825: CALL_OW 459
66829: NOT
66830: AND
66831: PUSH
66832: LD_EXP 66
66836: PUSH
66837: LD_VAR 0 2
66841: ARRAY
66842: PUSH
66843: LD_VAR 0 3
66847: ARRAY
66848: PPUSH
66849: CALL_OW 255
66853: PPUSH
66854: LD_EXP 65
66858: PUSH
66859: LD_VAR 0 2
66863: ARRAY
66864: PUSH
66865: LD_VAR 0 4
66869: ARRAY
66870: PUSH
66871: LD_INT 1
66873: ARRAY
66874: PPUSH
66875: LD_EXP 65
66879: PUSH
66880: LD_VAR 0 2
66884: ARRAY
66885: PUSH
66886: LD_VAR 0 4
66890: ARRAY
66891: PUSH
66892: LD_INT 2
66894: ARRAY
66895: PPUSH
66896: LD_INT 15
66898: PPUSH
66899: CALL 19166 0 4
66903: PUSH
66904: LD_INT 4
66906: ARRAY
66907: PUSH
66908: LD_INT 0
66910: EQUAL
66911: AND
66912: PUSH
66913: LD_EXP 66
66917: PUSH
66918: LD_VAR 0 2
66922: ARRAY
66923: PUSH
66924: LD_VAR 0 3
66928: ARRAY
66929: PPUSH
66930: CALL_OW 314
66934: NOT
66935: AND
66936: IFFALSE 67112
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
66938: LD_EXP 66
66942: PUSH
66943: LD_VAR 0 2
66947: ARRAY
66948: PUSH
66949: LD_VAR 0 3
66953: ARRAY
66954: PPUSH
66955: CALL_OW 310
66959: IFFALSE 66982
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
66961: LD_EXP 66
66965: PUSH
66966: LD_VAR 0 2
66970: ARRAY
66971: PUSH
66972: LD_VAR 0 3
66976: ARRAY
66977: PPUSH
66978: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
66982: LD_EXP 66
66986: PUSH
66987: LD_VAR 0 2
66991: ARRAY
66992: PUSH
66993: LD_VAR 0 3
66997: ARRAY
66998: PPUSH
66999: CALL_OW 314
67003: NOT
67004: IFFALSE 67072
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
67006: LD_EXP 66
67010: PUSH
67011: LD_VAR 0 2
67015: ARRAY
67016: PUSH
67017: LD_VAR 0 3
67021: ARRAY
67022: PPUSH
67023: LD_EXP 65
67027: PUSH
67028: LD_VAR 0 2
67032: ARRAY
67033: PUSH
67034: LD_VAR 0 4
67038: ARRAY
67039: PUSH
67040: LD_INT 1
67042: ARRAY
67043: PPUSH
67044: LD_EXP 65
67048: PUSH
67049: LD_VAR 0 2
67053: ARRAY
67054: PUSH
67055: LD_VAR 0 4
67059: ARRAY
67060: PUSH
67061: LD_INT 2
67063: ARRAY
67064: PPUSH
67065: LD_INT 0
67067: PPUSH
67068: CALL_OW 193
// k := k + 1 ;
67072: LD_ADDR_VAR 0 4
67076: PUSH
67077: LD_VAR 0 4
67081: PUSH
67082: LD_INT 1
67084: PLUS
67085: ST_TO_ADDR
// if k > mc_mines [ i ] then
67086: LD_VAR 0 4
67090: PUSH
67091: LD_EXP 65
67095: PUSH
67096: LD_VAR 0 2
67100: ARRAY
67101: GREATER
67102: IFFALSE 67112
// k := 1 ;
67104: LD_ADDR_VAR 0 4
67108: PUSH
67109: LD_INT 1
67111: ST_TO_ADDR
// end ; end ;
67112: GO 66517
67114: POP
67115: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67116: LD_ADDR_VAR 0 5
67120: PUSH
67121: LD_EXP 52
67125: PUSH
67126: LD_VAR 0 2
67130: ARRAY
67131: PPUSH
67132: LD_INT 2
67134: PUSH
67135: LD_INT 30
67137: PUSH
67138: LD_INT 4
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 30
67147: PUSH
67148: LD_INT 5
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 30
67157: PUSH
67158: LD_INT 32
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: PPUSH
67171: CALL_OW 72
67175: ST_TO_ADDR
// if not tmp then
67176: LD_VAR 0 5
67180: NOT
67181: IFFALSE 67185
// continue ;
67183: GO 66434
// list := [ ] ;
67185: LD_ADDR_VAR 0 6
67189: PUSH
67190: EMPTY
67191: ST_TO_ADDR
// for j in tmp do
67192: LD_ADDR_VAR 0 3
67196: PUSH
67197: LD_VAR 0 5
67201: PUSH
67202: FOR_IN
67203: IFFALSE 67272
// begin for k in UnitsInside ( j ) do
67205: LD_ADDR_VAR 0 4
67209: PUSH
67210: LD_VAR 0 3
67214: PPUSH
67215: CALL_OW 313
67219: PUSH
67220: FOR_IN
67221: IFFALSE 67268
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67223: LD_VAR 0 4
67227: PPUSH
67228: CALL_OW 257
67232: PUSH
67233: LD_INT 1
67235: EQUAL
67236: PUSH
67237: LD_VAR 0 4
67241: PPUSH
67242: CALL_OW 459
67246: NOT
67247: AND
67248: IFFALSE 67266
// list := list ^ k ;
67250: LD_ADDR_VAR 0 6
67254: PUSH
67255: LD_VAR 0 6
67259: PUSH
67260: LD_VAR 0 4
67264: ADD
67265: ST_TO_ADDR
67266: GO 67220
67268: POP
67269: POP
// end ;
67270: GO 67202
67272: POP
67273: POP
// list := list diff mc_miners [ i ] ;
67274: LD_ADDR_VAR 0 6
67278: PUSH
67279: LD_VAR 0 6
67283: PUSH
67284: LD_EXP 66
67288: PUSH
67289: LD_VAR 0 2
67293: ARRAY
67294: DIFF
67295: ST_TO_ADDR
// if not list then
67296: LD_VAR 0 6
67300: NOT
67301: IFFALSE 67305
// continue ;
67303: GO 66434
// k := mc_mines [ i ] - mc_miners [ i ] ;
67305: LD_ADDR_VAR 0 4
67309: PUSH
67310: LD_EXP 65
67314: PUSH
67315: LD_VAR 0 2
67319: ARRAY
67320: PUSH
67321: LD_EXP 66
67325: PUSH
67326: LD_VAR 0 2
67330: ARRAY
67331: MINUS
67332: ST_TO_ADDR
// if k > list then
67333: LD_VAR 0 4
67337: PUSH
67338: LD_VAR 0 6
67342: GREATER
67343: IFFALSE 67355
// k := list ;
67345: LD_ADDR_VAR 0 4
67349: PUSH
67350: LD_VAR 0 6
67354: ST_TO_ADDR
// for j = 1 to k do
67355: LD_ADDR_VAR 0 3
67359: PUSH
67360: DOUBLE
67361: LD_INT 1
67363: DEC
67364: ST_TO_ADDR
67365: LD_VAR 0 4
67369: PUSH
67370: FOR_TO
67371: IFFALSE 67425
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67373: LD_ADDR_EXP 66
67377: PUSH
67378: LD_EXP 66
67382: PPUSH
67383: LD_VAR 0 2
67387: PUSH
67388: LD_EXP 66
67392: PUSH
67393: LD_VAR 0 2
67397: ARRAY
67398: PUSH
67399: LD_INT 1
67401: PLUS
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PPUSH
67407: LD_VAR 0 6
67411: PUSH
67412: LD_VAR 0 3
67416: ARRAY
67417: PPUSH
67418: CALL 18270 0 3
67422: ST_TO_ADDR
67423: GO 67370
67425: POP
67426: POP
// end ;
67427: GO 66434
67429: POP
67430: POP
// end ;
67431: LD_VAR 0 1
67435: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
67436: LD_INT 0
67438: PPUSH
67439: PPUSH
67440: PPUSH
67441: PPUSH
67442: PPUSH
67443: PPUSH
67444: PPUSH
67445: PPUSH
67446: PPUSH
67447: PPUSH
// if not mc_bases then
67448: LD_EXP 52
67452: NOT
67453: IFFALSE 67457
// exit ;
67455: GO 69207
// for i = 1 to mc_bases do
67457: LD_ADDR_VAR 0 2
67461: PUSH
67462: DOUBLE
67463: LD_INT 1
67465: DEC
67466: ST_TO_ADDR
67467: LD_EXP 52
67471: PUSH
67472: FOR_TO
67473: IFFALSE 69205
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67475: LD_EXP 52
67479: PUSH
67480: LD_VAR 0 2
67484: ARRAY
67485: NOT
67486: PUSH
67487: LD_EXP 59
67491: PUSH
67492: LD_VAR 0 2
67496: ARRAY
67497: OR
67498: IFFALSE 67502
// continue ;
67500: GO 67472
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67502: LD_EXP 68
67506: PUSH
67507: LD_VAR 0 2
67511: ARRAY
67512: NOT
67513: PUSH
67514: LD_EXP 69
67518: PUSH
67519: LD_VAR 0 2
67523: ARRAY
67524: AND
67525: IFFALSE 67563
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67527: LD_ADDR_EXP 69
67531: PUSH
67532: LD_EXP 69
67536: PPUSH
67537: LD_VAR 0 2
67541: PPUSH
67542: EMPTY
67543: PPUSH
67544: CALL_OW 1
67548: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67549: LD_VAR 0 2
67553: PPUSH
67554: LD_INT 107
67556: PPUSH
67557: CALL 58317 0 2
// continue ;
67561: GO 67472
// end ; target := [ ] ;
67563: LD_ADDR_VAR 0 6
67567: PUSH
67568: EMPTY
67569: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67570: LD_ADDR_VAR 0 3
67574: PUSH
67575: DOUBLE
67576: LD_EXP 68
67580: PUSH
67581: LD_VAR 0 2
67585: ARRAY
67586: INC
67587: ST_TO_ADDR
67588: LD_INT 1
67590: PUSH
67591: FOR_DOWNTO
67592: IFFALSE 67852
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67594: LD_EXP 68
67598: PUSH
67599: LD_VAR 0 2
67603: ARRAY
67604: PUSH
67605: LD_VAR 0 3
67609: ARRAY
67610: PUSH
67611: LD_INT 2
67613: ARRAY
67614: PPUSH
67615: LD_EXP 68
67619: PUSH
67620: LD_VAR 0 2
67624: ARRAY
67625: PUSH
67626: LD_VAR 0 3
67630: ARRAY
67631: PUSH
67632: LD_INT 3
67634: ARRAY
67635: PPUSH
67636: CALL_OW 488
67640: PUSH
67641: LD_EXP 68
67645: PUSH
67646: LD_VAR 0 2
67650: ARRAY
67651: PUSH
67652: LD_VAR 0 3
67656: ARRAY
67657: PUSH
67658: LD_INT 2
67660: ARRAY
67661: PPUSH
67662: LD_EXP 68
67666: PUSH
67667: LD_VAR 0 2
67671: ARRAY
67672: PUSH
67673: LD_VAR 0 3
67677: ARRAY
67678: PUSH
67679: LD_INT 3
67681: ARRAY
67682: PPUSH
67683: CALL_OW 284
67687: PUSH
67688: LD_INT 0
67690: EQUAL
67691: AND
67692: IFFALSE 67747
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
67694: LD_ADDR_VAR 0 5
67698: PUSH
67699: LD_EXP 68
67703: PUSH
67704: LD_VAR 0 2
67708: ARRAY
67709: PPUSH
67710: LD_VAR 0 3
67714: PPUSH
67715: CALL_OW 3
67719: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
67720: LD_ADDR_EXP 68
67724: PUSH
67725: LD_EXP 68
67729: PPUSH
67730: LD_VAR 0 2
67734: PPUSH
67735: LD_VAR 0 5
67739: PPUSH
67740: CALL_OW 1
67744: ST_TO_ADDR
// continue ;
67745: GO 67591
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
67747: LD_EXP 52
67751: PUSH
67752: LD_VAR 0 2
67756: ARRAY
67757: PUSH
67758: LD_INT 1
67760: ARRAY
67761: PPUSH
67762: CALL_OW 255
67766: PPUSH
67767: LD_EXP 68
67771: PUSH
67772: LD_VAR 0 2
67776: ARRAY
67777: PUSH
67778: LD_VAR 0 3
67782: ARRAY
67783: PUSH
67784: LD_INT 2
67786: ARRAY
67787: PPUSH
67788: LD_EXP 68
67792: PUSH
67793: LD_VAR 0 2
67797: ARRAY
67798: PUSH
67799: LD_VAR 0 3
67803: ARRAY
67804: PUSH
67805: LD_INT 3
67807: ARRAY
67808: PPUSH
67809: LD_INT 30
67811: PPUSH
67812: CALL 19166 0 4
67816: PUSH
67817: LD_INT 4
67819: ARRAY
67820: PUSH
67821: LD_INT 0
67823: EQUAL
67824: IFFALSE 67850
// begin target := mc_crates [ i ] [ j ] ;
67826: LD_ADDR_VAR 0 6
67830: PUSH
67831: LD_EXP 68
67835: PUSH
67836: LD_VAR 0 2
67840: ARRAY
67841: PUSH
67842: LD_VAR 0 3
67846: ARRAY
67847: ST_TO_ADDR
// break ;
67848: GO 67852
// end ; end ;
67850: GO 67591
67852: POP
67853: POP
// if not target then
67854: LD_VAR 0 6
67858: NOT
67859: IFFALSE 67863
// continue ;
67861: GO 67472
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
67863: LD_ADDR_VAR 0 7
67867: PUSH
67868: LD_EXP 71
67872: PUSH
67873: LD_VAR 0 2
67877: ARRAY
67878: PPUSH
67879: LD_INT 2
67881: PUSH
67882: LD_INT 3
67884: PUSH
67885: LD_INT 58
67887: PUSH
67888: EMPTY
67889: LIST
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 61
67897: PUSH
67898: EMPTY
67899: LIST
67900: PUSH
67901: LD_INT 33
67903: PUSH
67904: LD_INT 5
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 33
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: LD_INT 34
67933: PUSH
67934: LD_INT 32
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 34
67943: PUSH
67944: LD_INT 51
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 34
67953: PUSH
67954: LD_INT 12
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PPUSH
67971: CALL_OW 72
67975: ST_TO_ADDR
// if not cargo then
67976: LD_VAR 0 7
67980: NOT
67981: IFFALSE 68624
// begin if mc_crates_collector [ i ] < 5 then
67983: LD_EXP 69
67987: PUSH
67988: LD_VAR 0 2
67992: ARRAY
67993: PUSH
67994: LD_INT 5
67996: LESS
67997: IFFALSE 68363
// begin if mc_ape [ i ] then
67999: LD_EXP 81
68003: PUSH
68004: LD_VAR 0 2
68008: ARRAY
68009: IFFALSE 68056
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
68011: LD_ADDR_VAR 0 5
68015: PUSH
68016: LD_EXP 81
68020: PUSH
68021: LD_VAR 0 2
68025: ARRAY
68026: PPUSH
68027: LD_INT 25
68029: PUSH
68030: LD_INT 16
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 24
68039: PUSH
68040: LD_INT 750
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PPUSH
68051: CALL_OW 72
68055: ST_TO_ADDR
// if not tmp then
68056: LD_VAR 0 5
68060: NOT
68061: IFFALSE 68108
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
68063: LD_ADDR_VAR 0 5
68067: PUSH
68068: LD_EXP 52
68072: PUSH
68073: LD_VAR 0 2
68077: ARRAY
68078: PPUSH
68079: LD_INT 25
68081: PUSH
68082: LD_INT 2
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 24
68091: PUSH
68092: LD_INT 750
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PPUSH
68103: CALL_OW 72
68107: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
68108: LD_EXP 81
68112: PUSH
68113: LD_VAR 0 2
68117: ARRAY
68118: PUSH
68119: LD_EXP 52
68123: PUSH
68124: LD_VAR 0 2
68128: ARRAY
68129: PPUSH
68130: LD_INT 25
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 24
68142: PUSH
68143: LD_INT 750
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PPUSH
68154: CALL_OW 72
68158: AND
68159: PUSH
68160: LD_VAR 0 5
68164: PUSH
68165: LD_INT 5
68167: LESS
68168: AND
68169: IFFALSE 68251
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
68171: LD_ADDR_VAR 0 3
68175: PUSH
68176: LD_EXP 52
68180: PUSH
68181: LD_VAR 0 2
68185: ARRAY
68186: PPUSH
68187: LD_INT 25
68189: PUSH
68190: LD_INT 2
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 24
68199: PUSH
68200: LD_INT 750
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PPUSH
68211: CALL_OW 72
68215: PUSH
68216: FOR_IN
68217: IFFALSE 68249
// begin tmp := tmp union j ;
68219: LD_ADDR_VAR 0 5
68223: PUSH
68224: LD_VAR 0 5
68228: PUSH
68229: LD_VAR 0 3
68233: UNION
68234: ST_TO_ADDR
// if tmp >= 5 then
68235: LD_VAR 0 5
68239: PUSH
68240: LD_INT 5
68242: GREATEREQUAL
68243: IFFALSE 68247
// break ;
68245: GO 68249
// end ;
68247: GO 68216
68249: POP
68250: POP
// end ; if not tmp then
68251: LD_VAR 0 5
68255: NOT
68256: IFFALSE 68260
// continue ;
68258: GO 67472
// for j in tmp do
68260: LD_ADDR_VAR 0 3
68264: PUSH
68265: LD_VAR 0 5
68269: PUSH
68270: FOR_IN
68271: IFFALSE 68361
// if not GetTag ( j ) then
68273: LD_VAR 0 3
68277: PPUSH
68278: CALL_OW 110
68282: NOT
68283: IFFALSE 68359
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68285: LD_ADDR_EXP 69
68289: PUSH
68290: LD_EXP 69
68294: PPUSH
68295: LD_VAR 0 2
68299: PUSH
68300: LD_EXP 69
68304: PUSH
68305: LD_VAR 0 2
68309: ARRAY
68310: PUSH
68311: LD_INT 1
68313: PLUS
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PPUSH
68319: LD_VAR 0 3
68323: PPUSH
68324: CALL 18270 0 3
68328: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68329: LD_VAR 0 3
68333: PPUSH
68334: LD_INT 107
68336: PPUSH
68337: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68341: LD_EXP 69
68345: PUSH
68346: LD_VAR 0 2
68350: ARRAY
68351: PUSH
68352: LD_INT 5
68354: GREATEREQUAL
68355: IFFALSE 68359
// break ;
68357: GO 68361
// end ;
68359: GO 68270
68361: POP
68362: POP
// end ; if mc_crates_collector [ i ] and target then
68363: LD_EXP 69
68367: PUSH
68368: LD_VAR 0 2
68372: ARRAY
68373: PUSH
68374: LD_VAR 0 6
68378: AND
68379: IFFALSE 68622
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68381: LD_EXP 69
68385: PUSH
68386: LD_VAR 0 2
68390: ARRAY
68391: PUSH
68392: LD_VAR 0 6
68396: PUSH
68397: LD_INT 1
68399: ARRAY
68400: LESS
68401: IFFALSE 68421
// tmp := mc_crates_collector [ i ] else
68403: LD_ADDR_VAR 0 5
68407: PUSH
68408: LD_EXP 69
68412: PUSH
68413: LD_VAR 0 2
68417: ARRAY
68418: ST_TO_ADDR
68419: GO 68435
// tmp := target [ 1 ] ;
68421: LD_ADDR_VAR 0 5
68425: PUSH
68426: LD_VAR 0 6
68430: PUSH
68431: LD_INT 1
68433: ARRAY
68434: ST_TO_ADDR
// k := 0 ;
68435: LD_ADDR_VAR 0 4
68439: PUSH
68440: LD_INT 0
68442: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_EXP 69
68452: PUSH
68453: LD_VAR 0 2
68457: ARRAY
68458: PUSH
68459: FOR_IN
68460: IFFALSE 68620
// begin k := k + 1 ;
68462: LD_ADDR_VAR 0 4
68466: PUSH
68467: LD_VAR 0 4
68471: PUSH
68472: LD_INT 1
68474: PLUS
68475: ST_TO_ADDR
// if k > tmp then
68476: LD_VAR 0 4
68480: PUSH
68481: LD_VAR 0 5
68485: GREATER
68486: IFFALSE 68490
// break ;
68488: GO 68620
// if not GetClass ( j ) in [ 2 , 16 ] then
68490: LD_VAR 0 3
68494: PPUSH
68495: CALL_OW 257
68499: PUSH
68500: LD_INT 2
68502: PUSH
68503: LD_INT 16
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: IN
68510: NOT
68511: IFFALSE 68564
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
68513: LD_ADDR_EXP 69
68517: PUSH
68518: LD_EXP 69
68522: PPUSH
68523: LD_VAR 0 2
68527: PPUSH
68528: LD_EXP 69
68532: PUSH
68533: LD_VAR 0 2
68537: ARRAY
68538: PUSH
68539: LD_VAR 0 3
68543: DIFF
68544: PPUSH
68545: CALL_OW 1
68549: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68550: LD_VAR 0 3
68554: PPUSH
68555: LD_INT 0
68557: PPUSH
68558: CALL_OW 109
// continue ;
68562: GO 68459
// end ; if IsInUnit ( j ) then
68564: LD_VAR 0 3
68568: PPUSH
68569: CALL_OW 310
68573: IFFALSE 68584
// ComExitBuilding ( j ) ;
68575: LD_VAR 0 3
68579: PPUSH
68580: CALL_OW 122
// wait ( 3 ) ;
68584: LD_INT 3
68586: PPUSH
68587: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68591: LD_VAR 0 3
68595: PPUSH
68596: LD_VAR 0 6
68600: PUSH
68601: LD_INT 2
68603: ARRAY
68604: PPUSH
68605: LD_VAR 0 6
68609: PUSH
68610: LD_INT 3
68612: ARRAY
68613: PPUSH
68614: CALL_OW 117
// end ;
68618: GO 68459
68620: POP
68621: POP
// end ; end else
68622: GO 69203
// begin for j in cargo do
68624: LD_ADDR_VAR 0 3
68628: PUSH
68629: LD_VAR 0 7
68633: PUSH
68634: FOR_IN
68635: IFFALSE 69201
// begin if GetTag ( j ) <> 0 then
68637: LD_VAR 0 3
68641: PPUSH
68642: CALL_OW 110
68646: PUSH
68647: LD_INT 0
68649: NONEQUAL
68650: IFFALSE 68654
// continue ;
68652: GO 68634
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
68654: LD_VAR 0 3
68658: PPUSH
68659: CALL_OW 256
68663: PUSH
68664: LD_INT 1000
68666: LESS
68667: PUSH
68668: LD_VAR 0 3
68672: PPUSH
68673: LD_EXP 76
68677: PUSH
68678: LD_VAR 0 2
68682: ARRAY
68683: PPUSH
68684: CALL_OW 308
68688: NOT
68689: AND
68690: IFFALSE 68712
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68692: LD_VAR 0 3
68696: PPUSH
68697: LD_EXP 76
68701: PUSH
68702: LD_VAR 0 2
68706: ARRAY
68707: PPUSH
68708: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
68712: LD_VAR 0 3
68716: PPUSH
68717: CALL_OW 256
68721: PUSH
68722: LD_INT 1000
68724: LESS
68725: PUSH
68726: LD_VAR 0 3
68730: PPUSH
68731: LD_EXP 76
68735: PUSH
68736: LD_VAR 0 2
68740: ARRAY
68741: PPUSH
68742: CALL_OW 308
68746: AND
68747: IFFALSE 68751
// continue ;
68749: GO 68634
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68751: LD_VAR 0 3
68755: PPUSH
68756: CALL_OW 262
68760: PUSH
68761: LD_INT 2
68763: EQUAL
68764: PUSH
68765: LD_VAR 0 3
68769: PPUSH
68770: CALL_OW 261
68774: PUSH
68775: LD_INT 15
68777: LESS
68778: AND
68779: IFFALSE 68783
// continue ;
68781: GO 68634
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68783: LD_VAR 0 3
68787: PPUSH
68788: CALL_OW 262
68792: PUSH
68793: LD_INT 1
68795: EQUAL
68796: PUSH
68797: LD_VAR 0 3
68801: PPUSH
68802: CALL_OW 261
68806: PUSH
68807: LD_INT 10
68809: LESS
68810: AND
68811: IFFALSE 69140
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68813: LD_ADDR_VAR 0 8
68817: PUSH
68818: LD_EXP 52
68822: PUSH
68823: LD_VAR 0 2
68827: ARRAY
68828: PPUSH
68829: LD_INT 2
68831: PUSH
68832: LD_INT 30
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 30
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: PPUSH
68857: CALL_OW 72
68861: ST_TO_ADDR
// if not depot then
68862: LD_VAR 0 8
68866: NOT
68867: IFFALSE 68871
// continue ;
68869: GO 68634
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68871: LD_VAR 0 3
68875: PPUSH
68876: LD_VAR 0 8
68880: PPUSH
68881: LD_VAR 0 3
68885: PPUSH
68886: CALL_OW 74
68890: PPUSH
68891: CALL_OW 296
68895: PUSH
68896: LD_INT 6
68898: LESS
68899: IFFALSE 68915
// SetFuel ( j , 100 ) else
68901: LD_VAR 0 3
68905: PPUSH
68906: LD_INT 100
68908: PPUSH
68909: CALL_OW 240
68913: GO 69140
// if GetFuel ( j ) = 0 then
68915: LD_VAR 0 3
68919: PPUSH
68920: CALL_OW 261
68924: PUSH
68925: LD_INT 0
68927: EQUAL
68928: IFFALSE 69140
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
68930: LD_ADDR_EXP 71
68934: PUSH
68935: LD_EXP 71
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: LD_EXP 71
68949: PUSH
68950: LD_VAR 0 2
68954: ARRAY
68955: PUSH
68956: LD_VAR 0 3
68960: DIFF
68961: PPUSH
68962: CALL_OW 1
68966: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
68967: LD_VAR 0 3
68971: PPUSH
68972: CALL_OW 263
68976: PUSH
68977: LD_INT 1
68979: EQUAL
68980: IFFALSE 68996
// ComExitVehicle ( IsInUnit ( j ) ) ;
68982: LD_VAR 0 3
68986: PPUSH
68987: CALL_OW 310
68991: PPUSH
68992: CALL_OW 121
// if GetControl ( j ) = control_remote then
68996: LD_VAR 0 3
69000: PPUSH
69001: CALL_OW 263
69005: PUSH
69006: LD_INT 2
69008: EQUAL
69009: IFFALSE 69020
// ComUnlink ( j ) ;
69011: LD_VAR 0 3
69015: PPUSH
69016: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
69020: LD_ADDR_VAR 0 9
69024: PUSH
69025: LD_VAR 0 2
69029: PPUSH
69030: LD_INT 3
69032: PPUSH
69033: CALL 78277 0 2
69037: ST_TO_ADDR
// if fac then
69038: LD_VAR 0 9
69042: IFFALSE 69138
// begin for k in fac do
69044: LD_ADDR_VAR 0 4
69048: PUSH
69049: LD_VAR 0 9
69053: PUSH
69054: FOR_IN
69055: IFFALSE 69136
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
69057: LD_ADDR_VAR 0 10
69061: PUSH
69062: LD_VAR 0 9
69066: PPUSH
69067: LD_VAR 0 3
69071: PPUSH
69072: CALL_OW 265
69076: PPUSH
69077: LD_VAR 0 3
69081: PPUSH
69082: CALL_OW 262
69086: PPUSH
69087: LD_VAR 0 3
69091: PPUSH
69092: CALL_OW 263
69096: PPUSH
69097: LD_VAR 0 3
69101: PPUSH
69102: CALL_OW 264
69106: PPUSH
69107: CALL 15802 0 5
69111: ST_TO_ADDR
// if components then
69112: LD_VAR 0 10
69116: IFFALSE 69134
// begin MC_InsertProduceList ( i , components ) ;
69118: LD_VAR 0 2
69122: PPUSH
69123: LD_VAR 0 10
69127: PPUSH
69128: CALL 77822 0 2
// break ;
69132: GO 69136
// end ; end ;
69134: GO 69054
69136: POP
69137: POP
// end ; continue ;
69138: GO 68634
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69140: LD_VAR 0 3
69144: PPUSH
69145: LD_INT 1
69147: PPUSH
69148: CALL_OW 289
69152: PUSH
69153: LD_INT 100
69155: LESS
69156: PUSH
69157: LD_VAR 0 3
69161: PPUSH
69162: CALL_OW 314
69166: NOT
69167: AND
69168: IFFALSE 69197
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69170: LD_VAR 0 3
69174: PPUSH
69175: LD_VAR 0 6
69179: PUSH
69180: LD_INT 2
69182: ARRAY
69183: PPUSH
69184: LD_VAR 0 6
69188: PUSH
69189: LD_INT 3
69191: ARRAY
69192: PPUSH
69193: CALL_OW 117
// break ;
69197: GO 69201
// end ;
69199: GO 68634
69201: POP
69202: POP
// end ; end ;
69203: GO 67472
69205: POP
69206: POP
// end ;
69207: LD_VAR 0 1
69211: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69212: LD_INT 0
69214: PPUSH
69215: PPUSH
69216: PPUSH
69217: PPUSH
// if not mc_bases then
69218: LD_EXP 52
69222: NOT
69223: IFFALSE 69227
// exit ;
69225: GO 69388
// for i = 1 to mc_bases do
69227: LD_ADDR_VAR 0 2
69231: PUSH
69232: DOUBLE
69233: LD_INT 1
69235: DEC
69236: ST_TO_ADDR
69237: LD_EXP 52
69241: PUSH
69242: FOR_TO
69243: IFFALSE 69386
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
69245: LD_ADDR_VAR 0 4
69249: PUSH
69250: LD_EXP 71
69254: PUSH
69255: LD_VAR 0 2
69259: ARRAY
69260: PUSH
69261: LD_EXP 74
69265: PUSH
69266: LD_VAR 0 2
69270: ARRAY
69271: UNION
69272: PPUSH
69273: LD_INT 33
69275: PUSH
69276: LD_INT 2
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PPUSH
69283: CALL_OW 72
69287: ST_TO_ADDR
// if tmp then
69288: LD_VAR 0 4
69292: IFFALSE 69384
// for j in tmp do
69294: LD_ADDR_VAR 0 3
69298: PUSH
69299: LD_VAR 0 4
69303: PUSH
69304: FOR_IN
69305: IFFALSE 69382
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69307: LD_VAR 0 3
69311: PPUSH
69312: CALL_OW 312
69316: NOT
69317: PUSH
69318: LD_VAR 0 3
69322: PPUSH
69323: CALL_OW 256
69327: PUSH
69328: LD_INT 250
69330: GREATEREQUAL
69331: AND
69332: IFFALSE 69345
// Connect ( j ) else
69334: LD_VAR 0 3
69338: PPUSH
69339: CALL 21203 0 1
69343: GO 69380
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69345: LD_VAR 0 3
69349: PPUSH
69350: CALL_OW 256
69354: PUSH
69355: LD_INT 250
69357: LESS
69358: PUSH
69359: LD_VAR 0 3
69363: PPUSH
69364: CALL_OW 312
69368: AND
69369: IFFALSE 69380
// ComUnlink ( j ) ;
69371: LD_VAR 0 3
69375: PPUSH
69376: CALL_OW 136
69380: GO 69304
69382: POP
69383: POP
// end ;
69384: GO 69242
69386: POP
69387: POP
// end ;
69388: LD_VAR 0 1
69392: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69393: LD_INT 0
69395: PPUSH
69396: PPUSH
69397: PPUSH
69398: PPUSH
69399: PPUSH
// if not mc_bases then
69400: LD_EXP 52
69404: NOT
69405: IFFALSE 69409
// exit ;
69407: GO 69854
// for i = 1 to mc_bases do
69409: LD_ADDR_VAR 0 2
69413: PUSH
69414: DOUBLE
69415: LD_INT 1
69417: DEC
69418: ST_TO_ADDR
69419: LD_EXP 52
69423: PUSH
69424: FOR_TO
69425: IFFALSE 69852
// begin if not mc_produce [ i ] then
69427: LD_EXP 73
69431: PUSH
69432: LD_VAR 0 2
69436: ARRAY
69437: NOT
69438: IFFALSE 69442
// continue ;
69440: GO 69424
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69442: LD_ADDR_VAR 0 5
69446: PUSH
69447: LD_EXP 52
69451: PUSH
69452: LD_VAR 0 2
69456: ARRAY
69457: PPUSH
69458: LD_INT 30
69460: PUSH
69461: LD_INT 3
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PPUSH
69468: CALL_OW 72
69472: ST_TO_ADDR
// if not fac then
69473: LD_VAR 0 5
69477: NOT
69478: IFFALSE 69482
// continue ;
69480: GO 69424
// for j in fac do
69482: LD_ADDR_VAR 0 3
69486: PUSH
69487: LD_VAR 0 5
69491: PUSH
69492: FOR_IN
69493: IFFALSE 69848
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
69495: LD_VAR 0 3
69499: PPUSH
69500: CALL_OW 461
69504: PUSH
69505: LD_INT 2
69507: NONEQUAL
69508: PUSH
69509: LD_VAR 0 3
69513: PPUSH
69514: LD_INT 15
69516: PPUSH
69517: CALL 20863 0 2
69521: PUSH
69522: LD_INT 4
69524: ARRAY
69525: OR
69526: IFFALSE 69530
// continue ;
69528: GO 69492
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69530: LD_VAR 0 3
69534: PPUSH
69535: LD_EXP 73
69539: PUSH
69540: LD_VAR 0 2
69544: ARRAY
69545: PUSH
69546: LD_INT 1
69548: ARRAY
69549: PUSH
69550: LD_INT 1
69552: ARRAY
69553: PPUSH
69554: LD_EXP 73
69558: PUSH
69559: LD_VAR 0 2
69563: ARRAY
69564: PUSH
69565: LD_INT 1
69567: ARRAY
69568: PUSH
69569: LD_INT 2
69571: ARRAY
69572: PPUSH
69573: LD_EXP 73
69577: PUSH
69578: LD_VAR 0 2
69582: ARRAY
69583: PUSH
69584: LD_INT 1
69586: ARRAY
69587: PUSH
69588: LD_INT 3
69590: ARRAY
69591: PPUSH
69592: LD_EXP 73
69596: PUSH
69597: LD_VAR 0 2
69601: ARRAY
69602: PUSH
69603: LD_INT 1
69605: ARRAY
69606: PUSH
69607: LD_INT 4
69609: ARRAY
69610: PPUSH
69611: CALL_OW 448
69615: PUSH
69616: LD_VAR 0 3
69620: PPUSH
69621: LD_EXP 73
69625: PUSH
69626: LD_VAR 0 2
69630: ARRAY
69631: PUSH
69632: LD_INT 1
69634: ARRAY
69635: PUSH
69636: LD_INT 1
69638: ARRAY
69639: PUSH
69640: LD_EXP 73
69644: PUSH
69645: LD_VAR 0 2
69649: ARRAY
69650: PUSH
69651: LD_INT 1
69653: ARRAY
69654: PUSH
69655: LD_INT 2
69657: ARRAY
69658: PUSH
69659: LD_EXP 73
69663: PUSH
69664: LD_VAR 0 2
69668: ARRAY
69669: PUSH
69670: LD_INT 1
69672: ARRAY
69673: PUSH
69674: LD_INT 3
69676: ARRAY
69677: PUSH
69678: LD_EXP 73
69682: PUSH
69683: LD_VAR 0 2
69687: ARRAY
69688: PUSH
69689: LD_INT 1
69691: ARRAY
69692: PUSH
69693: LD_INT 4
69695: ARRAY
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: PPUSH
69703: CALL 24534 0 2
69707: AND
69708: IFFALSE 69846
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69710: LD_VAR 0 3
69714: PPUSH
69715: LD_EXP 73
69719: PUSH
69720: LD_VAR 0 2
69724: ARRAY
69725: PUSH
69726: LD_INT 1
69728: ARRAY
69729: PUSH
69730: LD_INT 1
69732: ARRAY
69733: PPUSH
69734: LD_EXP 73
69738: PUSH
69739: LD_VAR 0 2
69743: ARRAY
69744: PUSH
69745: LD_INT 1
69747: ARRAY
69748: PUSH
69749: LD_INT 2
69751: ARRAY
69752: PPUSH
69753: LD_EXP 73
69757: PUSH
69758: LD_VAR 0 2
69762: ARRAY
69763: PUSH
69764: LD_INT 1
69766: ARRAY
69767: PUSH
69768: LD_INT 3
69770: ARRAY
69771: PPUSH
69772: LD_EXP 73
69776: PUSH
69777: LD_VAR 0 2
69781: ARRAY
69782: PUSH
69783: LD_INT 1
69785: ARRAY
69786: PUSH
69787: LD_INT 4
69789: ARRAY
69790: PPUSH
69791: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69795: LD_ADDR_VAR 0 4
69799: PUSH
69800: LD_EXP 73
69804: PUSH
69805: LD_VAR 0 2
69809: ARRAY
69810: PPUSH
69811: LD_INT 1
69813: PPUSH
69814: CALL_OW 3
69818: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69819: LD_ADDR_EXP 73
69823: PUSH
69824: LD_EXP 73
69828: PPUSH
69829: LD_VAR 0 2
69833: PPUSH
69834: LD_VAR 0 4
69838: PPUSH
69839: CALL_OW 1
69843: ST_TO_ADDR
// break ;
69844: GO 69848
// end ; end ;
69846: GO 69492
69848: POP
69849: POP
// end ;
69850: GO 69424
69852: POP
69853: POP
// end ;
69854: LD_VAR 0 1
69858: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69859: LD_INT 0
69861: PPUSH
69862: PPUSH
69863: PPUSH
// if not mc_bases then
69864: LD_EXP 52
69868: NOT
69869: IFFALSE 69873
// exit ;
69871: GO 69962
// for i = 1 to mc_bases do
69873: LD_ADDR_VAR 0 2
69877: PUSH
69878: DOUBLE
69879: LD_INT 1
69881: DEC
69882: ST_TO_ADDR
69883: LD_EXP 52
69887: PUSH
69888: FOR_TO
69889: IFFALSE 69960
// begin if mc_attack [ i ] then
69891: LD_EXP 72
69895: PUSH
69896: LD_VAR 0 2
69900: ARRAY
69901: IFFALSE 69958
// begin tmp := mc_attack [ i ] [ 1 ] ;
69903: LD_ADDR_VAR 0 3
69907: PUSH
69908: LD_EXP 72
69912: PUSH
69913: LD_VAR 0 2
69917: ARRAY
69918: PUSH
69919: LD_INT 1
69921: ARRAY
69922: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
69923: LD_ADDR_EXP 72
69927: PUSH
69928: LD_EXP 72
69932: PPUSH
69933: LD_VAR 0 2
69937: PPUSH
69938: EMPTY
69939: PPUSH
69940: CALL_OW 1
69944: ST_TO_ADDR
// Attack ( tmp ) ;
69945: LD_VAR 0 3
69949: PPUSH
69950: CALL 46747 0 1
// exit ;
69954: POP
69955: POP
69956: GO 69962
// end ; end ;
69958: GO 69888
69960: POP
69961: POP
// end ;
69962: LD_VAR 0 1
69966: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
69967: LD_INT 0
69969: PPUSH
69970: PPUSH
69971: PPUSH
69972: PPUSH
69973: PPUSH
69974: PPUSH
69975: PPUSH
// if not mc_bases then
69976: LD_EXP 52
69980: NOT
69981: IFFALSE 69985
// exit ;
69983: GO 70567
// for i = 1 to mc_bases do
69985: LD_ADDR_VAR 0 2
69989: PUSH
69990: DOUBLE
69991: LD_INT 1
69993: DEC
69994: ST_TO_ADDR
69995: LD_EXP 52
69999: PUSH
70000: FOR_TO
70001: IFFALSE 70565
// begin if not mc_bases [ i ] then
70003: LD_EXP 52
70007: PUSH
70008: LD_VAR 0 2
70012: ARRAY
70013: NOT
70014: IFFALSE 70018
// continue ;
70016: GO 70000
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
70018: LD_ADDR_VAR 0 7
70022: PUSH
70023: LD_EXP 52
70027: PUSH
70028: LD_VAR 0 2
70032: ARRAY
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: PPUSH
70038: CALL 15106 0 1
70042: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
70043: LD_ADDR_EXP 75
70047: PUSH
70048: LD_EXP 75
70052: PPUSH
70053: LD_VAR 0 2
70057: PPUSH
70058: LD_EXP 52
70062: PUSH
70063: LD_VAR 0 2
70067: ARRAY
70068: PUSH
70069: LD_INT 1
70071: ARRAY
70072: PPUSH
70073: CALL_OW 255
70077: PPUSH
70078: LD_EXP 77
70082: PUSH
70083: LD_VAR 0 2
70087: ARRAY
70088: PPUSH
70089: CALL 12809 0 2
70093: PPUSH
70094: CALL_OW 1
70098: ST_TO_ADDR
// if not mc_scan [ i ] then
70099: LD_EXP 75
70103: PUSH
70104: LD_VAR 0 2
70108: ARRAY
70109: NOT
70110: IFFALSE 70265
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70112: LD_ADDR_VAR 0 4
70116: PUSH
70117: LD_EXP 52
70121: PUSH
70122: LD_VAR 0 2
70126: ARRAY
70127: PPUSH
70128: LD_INT 2
70130: PUSH
70131: LD_INT 25
70133: PUSH
70134: LD_INT 5
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 25
70143: PUSH
70144: LD_INT 8
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 25
70153: PUSH
70154: LD_INT 9
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: PPUSH
70167: CALL_OW 72
70171: ST_TO_ADDR
// if not tmp then
70172: LD_VAR 0 4
70176: NOT
70177: IFFALSE 70181
// continue ;
70179: GO 70000
// for j in tmp do
70181: LD_ADDR_VAR 0 3
70185: PUSH
70186: LD_VAR 0 4
70190: PUSH
70191: FOR_IN
70192: IFFALSE 70263
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70194: LD_VAR 0 3
70198: PPUSH
70199: CALL_OW 310
70203: PPUSH
70204: CALL_OW 266
70208: PUSH
70209: LD_INT 5
70211: EQUAL
70212: PUSH
70213: LD_VAR 0 3
70217: PPUSH
70218: CALL_OW 257
70222: PUSH
70223: LD_INT 1
70225: EQUAL
70226: AND
70227: PUSH
70228: LD_VAR 0 3
70232: PPUSH
70233: CALL_OW 459
70237: NOT
70238: AND
70239: PUSH
70240: LD_VAR 0 7
70244: AND
70245: IFFALSE 70261
// ComChangeProfession ( j , class ) ;
70247: LD_VAR 0 3
70251: PPUSH
70252: LD_VAR 0 7
70256: PPUSH
70257: CALL_OW 123
70261: GO 70191
70263: POP
70264: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
70265: LD_EXP 75
70269: PUSH
70270: LD_VAR 0 2
70274: ARRAY
70275: PUSH
70276: LD_EXP 74
70280: PUSH
70281: LD_VAR 0 2
70285: ARRAY
70286: NOT
70287: AND
70288: PUSH
70289: LD_EXP 52
70293: PUSH
70294: LD_VAR 0 2
70298: ARRAY
70299: PPUSH
70300: LD_INT 30
70302: PUSH
70303: LD_INT 32
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PPUSH
70310: CALL_OW 72
70314: NOT
70315: AND
70316: PUSH
70317: LD_EXP 52
70321: PUSH
70322: LD_VAR 0 2
70326: ARRAY
70327: PPUSH
70328: LD_INT 2
70330: PUSH
70331: LD_INT 30
70333: PUSH
70334: LD_INT 4
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 30
70343: PUSH
70344: LD_INT 5
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: LIST
70355: PPUSH
70356: CALL_OW 72
70360: NOT
70361: AND
70362: IFFALSE 70494
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70364: LD_ADDR_VAR 0 4
70368: PUSH
70369: LD_EXP 52
70373: PUSH
70374: LD_VAR 0 2
70378: ARRAY
70379: PPUSH
70380: LD_INT 2
70382: PUSH
70383: LD_INT 25
70385: PUSH
70386: LD_INT 1
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 25
70395: PUSH
70396: LD_INT 5
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 25
70405: PUSH
70406: LD_INT 8
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 25
70415: PUSH
70416: LD_INT 9
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: PPUSH
70430: CALL_OW 72
70434: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
70435: LD_ADDR_VAR 0 4
70439: PUSH
70440: LD_VAR 0 4
70444: PUSH
70445: LD_VAR 0 4
70449: PPUSH
70450: LD_INT 18
70452: PPUSH
70453: CALL 51530 0 2
70457: DIFF
70458: ST_TO_ADDR
// if tmp then
70459: LD_VAR 0 4
70463: IFFALSE 70494
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
70465: LD_VAR 0 2
70469: PPUSH
70470: LD_VAR 0 4
70474: PPUSH
70475: LD_EXP 77
70479: PUSH
70480: LD_VAR 0 2
70484: ARRAY
70485: PPUSH
70486: CALL 12844 0 3
// exit ;
70490: POP
70491: POP
70492: GO 70567
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
70494: LD_EXP 75
70498: PUSH
70499: LD_VAR 0 2
70503: ARRAY
70504: PUSH
70505: LD_EXP 74
70509: PUSH
70510: LD_VAR 0 2
70514: ARRAY
70515: AND
70516: IFFALSE 70563
// begin tmp := mc_defender [ i ] ;
70518: LD_ADDR_VAR 0 4
70522: PUSH
70523: LD_EXP 74
70527: PUSH
70528: LD_VAR 0 2
70532: ARRAY
70533: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70534: LD_VAR 0 2
70538: PPUSH
70539: LD_VAR 0 4
70543: PPUSH
70544: LD_EXP 75
70548: PUSH
70549: LD_VAR 0 2
70553: ARRAY
70554: PPUSH
70555: CALL 13405 0 3
// exit ;
70559: POP
70560: POP
70561: GO 70567
// end ; end ;
70563: GO 70000
70565: POP
70566: POP
// end ;
70567: LD_VAR 0 1
70571: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
70572: LD_INT 0
70574: PPUSH
70575: PPUSH
70576: PPUSH
70577: PPUSH
70578: PPUSH
70579: PPUSH
70580: PPUSH
70581: PPUSH
70582: PPUSH
70583: PPUSH
70584: PPUSH
// if not mc_bases then
70585: LD_EXP 52
70589: NOT
70590: IFFALSE 70594
// exit ;
70592: GO 71681
// for i = 1 to mc_bases do
70594: LD_ADDR_VAR 0 2
70598: PUSH
70599: DOUBLE
70600: LD_INT 1
70602: DEC
70603: ST_TO_ADDR
70604: LD_EXP 52
70608: PUSH
70609: FOR_TO
70610: IFFALSE 71679
// begin tmp := mc_lab [ i ] ;
70612: LD_ADDR_VAR 0 6
70616: PUSH
70617: LD_EXP 85
70621: PUSH
70622: LD_VAR 0 2
70626: ARRAY
70627: ST_TO_ADDR
// if not tmp then
70628: LD_VAR 0 6
70632: NOT
70633: IFFALSE 70637
// continue ;
70635: GO 70609
// idle_lab := 0 ;
70637: LD_ADDR_VAR 0 11
70641: PUSH
70642: LD_INT 0
70644: ST_TO_ADDR
// for j in tmp do
70645: LD_ADDR_VAR 0 3
70649: PUSH
70650: LD_VAR 0 6
70654: PUSH
70655: FOR_IN
70656: IFFALSE 71675
// begin researching := false ;
70658: LD_ADDR_VAR 0 10
70662: PUSH
70663: LD_INT 0
70665: ST_TO_ADDR
// side := GetSide ( j ) ;
70666: LD_ADDR_VAR 0 4
70670: PUSH
70671: LD_VAR 0 3
70675: PPUSH
70676: CALL_OW 255
70680: ST_TO_ADDR
// if not mc_tech [ side ] then
70681: LD_EXP 79
70685: PUSH
70686: LD_VAR 0 4
70690: ARRAY
70691: NOT
70692: IFFALSE 70696
// continue ;
70694: GO 70655
// if BuildingStatus ( j ) = bs_idle then
70696: LD_VAR 0 3
70700: PPUSH
70701: CALL_OW 461
70705: PUSH
70706: LD_INT 2
70708: EQUAL
70709: IFFALSE 70897
// begin if idle_lab and UnitsInside ( j ) < 6 then
70711: LD_VAR 0 11
70715: PUSH
70716: LD_VAR 0 3
70720: PPUSH
70721: CALL_OW 313
70725: PUSH
70726: LD_INT 6
70728: LESS
70729: AND
70730: IFFALSE 70801
// begin tmp2 := UnitsInside ( idle_lab ) ;
70732: LD_ADDR_VAR 0 9
70736: PUSH
70737: LD_VAR 0 11
70741: PPUSH
70742: CALL_OW 313
70746: ST_TO_ADDR
// if tmp2 then
70747: LD_VAR 0 9
70751: IFFALSE 70793
// for x in tmp2 do
70753: LD_ADDR_VAR 0 7
70757: PUSH
70758: LD_VAR 0 9
70762: PUSH
70763: FOR_IN
70764: IFFALSE 70791
// begin ComExitBuilding ( x ) ;
70766: LD_VAR 0 7
70770: PPUSH
70771: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70775: LD_VAR 0 7
70779: PPUSH
70780: LD_VAR 0 3
70784: PPUSH
70785: CALL_OW 180
// end ;
70789: GO 70763
70791: POP
70792: POP
// idle_lab := 0 ;
70793: LD_ADDR_VAR 0 11
70797: PUSH
70798: LD_INT 0
70800: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
70801: LD_ADDR_VAR 0 5
70805: PUSH
70806: LD_EXP 79
70810: PUSH
70811: LD_VAR 0 4
70815: ARRAY
70816: PUSH
70817: FOR_IN
70818: IFFALSE 70878
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70820: LD_VAR 0 3
70824: PPUSH
70825: LD_VAR 0 5
70829: PPUSH
70830: CALL_OW 430
70834: PUSH
70835: LD_VAR 0 4
70839: PPUSH
70840: LD_VAR 0 5
70844: PPUSH
70845: CALL 11914 0 2
70849: AND
70850: IFFALSE 70876
// begin researching := true ;
70852: LD_ADDR_VAR 0 10
70856: PUSH
70857: LD_INT 1
70859: ST_TO_ADDR
// ComResearch ( j , t ) ;
70860: LD_VAR 0 3
70864: PPUSH
70865: LD_VAR 0 5
70869: PPUSH
70870: CALL_OW 124
// break ;
70874: GO 70878
// end ;
70876: GO 70817
70878: POP
70879: POP
// if not researching then
70880: LD_VAR 0 10
70884: NOT
70885: IFFALSE 70897
// idle_lab := j ;
70887: LD_ADDR_VAR 0 11
70891: PUSH
70892: LD_VAR 0 3
70896: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
70897: LD_VAR 0 3
70901: PPUSH
70902: CALL_OW 461
70906: PUSH
70907: LD_INT 10
70909: EQUAL
70910: IFFALSE 71498
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70912: LD_EXP 81
70916: PUSH
70917: LD_VAR 0 2
70921: ARRAY
70922: NOT
70923: PUSH
70924: LD_EXP 82
70928: PUSH
70929: LD_VAR 0 2
70933: ARRAY
70934: NOT
70935: AND
70936: PUSH
70937: LD_EXP 79
70941: PUSH
70942: LD_VAR 0 4
70946: ARRAY
70947: PUSH
70948: LD_INT 1
70950: GREATER
70951: AND
70952: IFFALSE 71083
// begin ComCancel ( j ) ;
70954: LD_VAR 0 3
70958: PPUSH
70959: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
70963: LD_ADDR_EXP 79
70967: PUSH
70968: LD_EXP 79
70972: PPUSH
70973: LD_VAR 0 4
70977: PPUSH
70978: LD_EXP 79
70982: PUSH
70983: LD_VAR 0 4
70987: ARRAY
70988: PPUSH
70989: LD_EXP 79
70993: PUSH
70994: LD_VAR 0 4
70998: ARRAY
70999: PUSH
71000: LD_INT 1
71002: MINUS
71003: PPUSH
71004: LD_EXP 79
71008: PUSH
71009: LD_VAR 0 4
71013: ARRAY
71014: PPUSH
71015: LD_INT 0
71017: PPUSH
71018: CALL 17688 0 4
71022: PPUSH
71023: CALL_OW 1
71027: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
71028: LD_ADDR_EXP 79
71032: PUSH
71033: LD_EXP 79
71037: PPUSH
71038: LD_VAR 0 4
71042: PPUSH
71043: LD_EXP 79
71047: PUSH
71048: LD_VAR 0 4
71052: ARRAY
71053: PPUSH
71054: LD_EXP 79
71058: PUSH
71059: LD_VAR 0 4
71063: ARRAY
71064: PPUSH
71065: LD_INT 1
71067: PPUSH
71068: LD_INT 0
71070: PPUSH
71071: CALL 17688 0 4
71075: PPUSH
71076: CALL_OW 1
71080: ST_TO_ADDR
// continue ;
71081: GO 70655
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
71083: LD_EXP 81
71087: PUSH
71088: LD_VAR 0 2
71092: ARRAY
71093: PUSH
71094: LD_EXP 82
71098: PUSH
71099: LD_VAR 0 2
71103: ARRAY
71104: NOT
71105: AND
71106: IFFALSE 71233
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
71108: LD_ADDR_EXP 82
71112: PUSH
71113: LD_EXP 82
71117: PPUSH
71118: LD_VAR 0 2
71122: PUSH
71123: LD_EXP 82
71127: PUSH
71128: LD_VAR 0 2
71132: ARRAY
71133: PUSH
71134: LD_INT 1
71136: PLUS
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PPUSH
71142: LD_EXP 81
71146: PUSH
71147: LD_VAR 0 2
71151: ARRAY
71152: PUSH
71153: LD_INT 1
71155: ARRAY
71156: PPUSH
71157: CALL 18270 0 3
71161: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
71162: LD_EXP 81
71166: PUSH
71167: LD_VAR 0 2
71171: ARRAY
71172: PUSH
71173: LD_INT 1
71175: ARRAY
71176: PPUSH
71177: LD_INT 112
71179: PPUSH
71180: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
71184: LD_ADDR_VAR 0 9
71188: PUSH
71189: LD_EXP 81
71193: PUSH
71194: LD_VAR 0 2
71198: ARRAY
71199: PPUSH
71200: LD_INT 1
71202: PPUSH
71203: CALL_OW 3
71207: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
71208: LD_ADDR_EXP 81
71212: PUSH
71213: LD_EXP 81
71217: PPUSH
71218: LD_VAR 0 2
71222: PPUSH
71223: LD_VAR 0 9
71227: PPUSH
71228: CALL_OW 1
71232: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
71233: LD_EXP 81
71237: PUSH
71238: LD_VAR 0 2
71242: ARRAY
71243: PUSH
71244: LD_EXP 82
71248: PUSH
71249: LD_VAR 0 2
71253: ARRAY
71254: AND
71255: PUSH
71256: LD_EXP 82
71260: PUSH
71261: LD_VAR 0 2
71265: ARRAY
71266: PUSH
71267: LD_INT 1
71269: ARRAY
71270: PPUSH
71271: CALL_OW 310
71275: NOT
71276: AND
71277: PUSH
71278: LD_VAR 0 3
71282: PPUSH
71283: CALL_OW 313
71287: PUSH
71288: LD_INT 6
71290: EQUAL
71291: AND
71292: IFFALSE 71348
// begin tmp2 := UnitsInside ( j ) ;
71294: LD_ADDR_VAR 0 9
71298: PUSH
71299: LD_VAR 0 3
71303: PPUSH
71304: CALL_OW 313
71308: ST_TO_ADDR
// if tmp2 = 6 then
71309: LD_VAR 0 9
71313: PUSH
71314: LD_INT 6
71316: EQUAL
71317: IFFALSE 71348
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71319: LD_VAR 0 9
71323: PUSH
71324: LD_INT 1
71326: ARRAY
71327: PPUSH
71328: LD_INT 112
71330: PPUSH
71331: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71335: LD_VAR 0 9
71339: PUSH
71340: LD_INT 1
71342: ARRAY
71343: PPUSH
71344: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71348: LD_EXP 82
71352: PUSH
71353: LD_VAR 0 2
71357: ARRAY
71358: PUSH
71359: LD_EXP 82
71363: PUSH
71364: LD_VAR 0 2
71368: ARRAY
71369: PUSH
71370: LD_INT 1
71372: ARRAY
71373: PPUSH
71374: CALL_OW 314
71378: NOT
71379: AND
71380: PUSH
71381: LD_EXP 82
71385: PUSH
71386: LD_VAR 0 2
71390: ARRAY
71391: PUSH
71392: LD_INT 1
71394: ARRAY
71395: PPUSH
71396: CALL_OW 310
71400: NOT
71401: AND
71402: IFFALSE 71428
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71404: LD_EXP 82
71408: PUSH
71409: LD_VAR 0 2
71413: ARRAY
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PPUSH
71419: LD_VAR 0 3
71423: PPUSH
71424: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71428: LD_EXP 82
71432: PUSH
71433: LD_VAR 0 2
71437: ARRAY
71438: PUSH
71439: LD_INT 1
71441: ARRAY
71442: PPUSH
71443: CALL_OW 310
71447: PUSH
71448: LD_EXP 82
71452: PUSH
71453: LD_VAR 0 2
71457: ARRAY
71458: PUSH
71459: LD_INT 1
71461: ARRAY
71462: PPUSH
71463: CALL_OW 310
71467: PPUSH
71468: CALL_OW 461
71472: PUSH
71473: LD_INT 3
71475: NONEQUAL
71476: AND
71477: IFFALSE 71498
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71479: LD_EXP 82
71483: PUSH
71484: LD_VAR 0 2
71488: ARRAY
71489: PUSH
71490: LD_INT 1
71492: ARRAY
71493: PPUSH
71494: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71498: LD_VAR 0 3
71502: PPUSH
71503: CALL_OW 461
71507: PUSH
71508: LD_INT 6
71510: EQUAL
71511: PUSH
71512: LD_VAR 0 6
71516: PUSH
71517: LD_INT 1
71519: GREATER
71520: AND
71521: IFFALSE 71673
// begin sci := [ ] ;
71523: LD_ADDR_VAR 0 8
71527: PUSH
71528: EMPTY
71529: ST_TO_ADDR
// for x in ( tmp diff j ) do
71530: LD_ADDR_VAR 0 7
71534: PUSH
71535: LD_VAR 0 6
71539: PUSH
71540: LD_VAR 0 3
71544: DIFF
71545: PUSH
71546: FOR_IN
71547: IFFALSE 71599
// begin if sci = 6 then
71549: LD_VAR 0 8
71553: PUSH
71554: LD_INT 6
71556: EQUAL
71557: IFFALSE 71561
// break ;
71559: GO 71599
// if BuildingStatus ( x ) = bs_idle then
71561: LD_VAR 0 7
71565: PPUSH
71566: CALL_OW 461
71570: PUSH
71571: LD_INT 2
71573: EQUAL
71574: IFFALSE 71597
// sci := sci ^ UnitsInside ( x ) ;
71576: LD_ADDR_VAR 0 8
71580: PUSH
71581: LD_VAR 0 8
71585: PUSH
71586: LD_VAR 0 7
71590: PPUSH
71591: CALL_OW 313
71595: ADD
71596: ST_TO_ADDR
// end ;
71597: GO 71546
71599: POP
71600: POP
// if not sci then
71601: LD_VAR 0 8
71605: NOT
71606: IFFALSE 71610
// continue ;
71608: GO 70655
// for x in sci do
71610: LD_ADDR_VAR 0 7
71614: PUSH
71615: LD_VAR 0 8
71619: PUSH
71620: FOR_IN
71621: IFFALSE 71671
// if IsInUnit ( x ) and not HasTask ( x ) then
71623: LD_VAR 0 7
71627: PPUSH
71628: CALL_OW 310
71632: PUSH
71633: LD_VAR 0 7
71637: PPUSH
71638: CALL_OW 314
71642: NOT
71643: AND
71644: IFFALSE 71669
// begin ComExitBuilding ( x ) ;
71646: LD_VAR 0 7
71650: PPUSH
71651: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71655: LD_VAR 0 7
71659: PPUSH
71660: LD_VAR 0 3
71664: PPUSH
71665: CALL_OW 180
// end ;
71669: GO 71620
71671: POP
71672: POP
// end ; end ;
71673: GO 70655
71675: POP
71676: POP
// end ;
71677: GO 70609
71679: POP
71680: POP
// end ;
71681: LD_VAR 0 1
71685: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
// if not mc_bases then
71690: LD_EXP 52
71694: NOT
71695: IFFALSE 71699
// exit ;
71697: GO 71780
// for i = 1 to mc_bases do
71699: LD_ADDR_VAR 0 2
71703: PUSH
71704: DOUBLE
71705: LD_INT 1
71707: DEC
71708: ST_TO_ADDR
71709: LD_EXP 52
71713: PUSH
71714: FOR_TO
71715: IFFALSE 71778
// if mc_mines [ i ] and mc_miners [ i ] then
71717: LD_EXP 65
71721: PUSH
71722: LD_VAR 0 2
71726: ARRAY
71727: PUSH
71728: LD_EXP 66
71732: PUSH
71733: LD_VAR 0 2
71737: ARRAY
71738: AND
71739: IFFALSE 71776
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
71741: LD_EXP 66
71745: PUSH
71746: LD_VAR 0 2
71750: ARRAY
71751: PUSH
71752: LD_INT 1
71754: ARRAY
71755: PPUSH
71756: CALL_OW 255
71760: PPUSH
71761: LD_EXP 65
71765: PUSH
71766: LD_VAR 0 2
71770: ARRAY
71771: PPUSH
71772: CALL 15259 0 2
71776: GO 71714
71778: POP
71779: POP
// end ;
71780: LD_VAR 0 1
71784: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71785: LD_INT 0
71787: PPUSH
71788: PPUSH
71789: PPUSH
71790: PPUSH
71791: PPUSH
71792: PPUSH
71793: PPUSH
71794: PPUSH
// if not mc_bases or not mc_parking then
71795: LD_EXP 52
71799: NOT
71800: PUSH
71801: LD_EXP 76
71805: NOT
71806: OR
71807: IFFALSE 71811
// exit ;
71809: GO 72510
// for i = 1 to mc_bases do
71811: LD_ADDR_VAR 0 2
71815: PUSH
71816: DOUBLE
71817: LD_INT 1
71819: DEC
71820: ST_TO_ADDR
71821: LD_EXP 52
71825: PUSH
71826: FOR_TO
71827: IFFALSE 72508
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71829: LD_EXP 52
71833: PUSH
71834: LD_VAR 0 2
71838: ARRAY
71839: NOT
71840: PUSH
71841: LD_EXP 76
71845: PUSH
71846: LD_VAR 0 2
71850: ARRAY
71851: NOT
71852: OR
71853: IFFALSE 71857
// continue ;
71855: GO 71826
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71857: LD_ADDR_VAR 0 5
71861: PUSH
71862: LD_EXP 52
71866: PUSH
71867: LD_VAR 0 2
71871: ARRAY
71872: PUSH
71873: LD_INT 1
71875: ARRAY
71876: PPUSH
71877: CALL_OW 255
71881: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71882: LD_ADDR_VAR 0 6
71886: PUSH
71887: LD_EXP 52
71891: PUSH
71892: LD_VAR 0 2
71896: ARRAY
71897: PPUSH
71898: LD_INT 30
71900: PUSH
71901: LD_INT 3
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PPUSH
71908: CALL_OW 72
71912: ST_TO_ADDR
// if not fac then
71913: LD_VAR 0 6
71917: NOT
71918: IFFALSE 71969
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71920: LD_ADDR_VAR 0 6
71924: PUSH
71925: LD_EXP 52
71929: PUSH
71930: LD_VAR 0 2
71934: ARRAY
71935: PPUSH
71936: LD_INT 2
71938: PUSH
71939: LD_INT 30
71941: PUSH
71942: LD_INT 0
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 30
71951: PUSH
71952: LD_INT 1
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: LIST
71963: PPUSH
71964: CALL_OW 72
71968: ST_TO_ADDR
// if not fac then
71969: LD_VAR 0 6
71973: NOT
71974: IFFALSE 71978
// continue ;
71976: GO 71826
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71978: LD_ADDR_VAR 0 7
71982: PUSH
71983: LD_EXP 76
71987: PUSH
71988: LD_VAR 0 2
71992: ARRAY
71993: PPUSH
71994: LD_INT 22
71996: PUSH
71997: LD_VAR 0 5
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 21
72008: PUSH
72009: LD_INT 2
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: PUSH
72019: LD_INT 24
72021: PUSH
72022: LD_INT 1000
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: PPUSH
72038: CALL_OW 70
72042: ST_TO_ADDR
// for j in fac do
72043: LD_ADDR_VAR 0 3
72047: PUSH
72048: LD_VAR 0 6
72052: PUSH
72053: FOR_IN
72054: IFFALSE 72135
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
72056: LD_ADDR_VAR 0 7
72060: PUSH
72061: LD_VAR 0 7
72065: PUSH
72066: LD_INT 22
72068: PUSH
72069: LD_VAR 0 5
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 91
72080: PUSH
72081: LD_VAR 0 3
72085: PUSH
72086: LD_INT 15
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 21
72096: PUSH
72097: LD_INT 2
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 3
72106: PUSH
72107: LD_INT 24
72109: PUSH
72110: LD_INT 1000
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: PPUSH
72127: CALL_OW 69
72131: UNION
72132: ST_TO_ADDR
72133: GO 72053
72135: POP
72136: POP
// if not vehs then
72137: LD_VAR 0 7
72141: NOT
72142: IFFALSE 72168
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72144: LD_ADDR_EXP 64
72148: PUSH
72149: LD_EXP 64
72153: PPUSH
72154: LD_VAR 0 2
72158: PPUSH
72159: EMPTY
72160: PPUSH
72161: CALL_OW 1
72165: ST_TO_ADDR
// continue ;
72166: GO 71826
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72168: LD_ADDR_VAR 0 8
72172: PUSH
72173: LD_EXP 52
72177: PUSH
72178: LD_VAR 0 2
72182: ARRAY
72183: PPUSH
72184: LD_INT 30
72186: PUSH
72187: LD_INT 3
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PPUSH
72194: CALL_OW 72
72198: ST_TO_ADDR
// if tmp then
72199: LD_VAR 0 8
72203: IFFALSE 72306
// begin for j in tmp do
72205: LD_ADDR_VAR 0 3
72209: PUSH
72210: LD_VAR 0 8
72214: PUSH
72215: FOR_IN
72216: IFFALSE 72304
// for k in UnitsInside ( j ) do
72218: LD_ADDR_VAR 0 4
72222: PUSH
72223: LD_VAR 0 3
72227: PPUSH
72228: CALL_OW 313
72232: PUSH
72233: FOR_IN
72234: IFFALSE 72300
// if k then
72236: LD_VAR 0 4
72240: IFFALSE 72298
// if not k in mc_repair_vehicle [ i ] then
72242: LD_VAR 0 4
72246: PUSH
72247: LD_EXP 64
72251: PUSH
72252: LD_VAR 0 2
72256: ARRAY
72257: IN
72258: NOT
72259: IFFALSE 72298
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
72261: LD_ADDR_EXP 64
72265: PUSH
72266: LD_EXP 64
72270: PPUSH
72271: LD_VAR 0 2
72275: PPUSH
72276: LD_EXP 64
72280: PUSH
72281: LD_VAR 0 2
72285: ARRAY
72286: PUSH
72287: LD_VAR 0 4
72291: UNION
72292: PPUSH
72293: CALL_OW 1
72297: ST_TO_ADDR
72298: GO 72233
72300: POP
72301: POP
72302: GO 72215
72304: POP
72305: POP
// end ; if not mc_repair_vehicle [ i ] then
72306: LD_EXP 64
72310: PUSH
72311: LD_VAR 0 2
72315: ARRAY
72316: NOT
72317: IFFALSE 72321
// continue ;
72319: GO 71826
// for j in mc_repair_vehicle [ i ] do
72321: LD_ADDR_VAR 0 3
72325: PUSH
72326: LD_EXP 64
72330: PUSH
72331: LD_VAR 0 2
72335: ARRAY
72336: PUSH
72337: FOR_IN
72338: IFFALSE 72504
// begin if GetClass ( j ) <> 3 then
72340: LD_VAR 0 3
72344: PPUSH
72345: CALL_OW 257
72349: PUSH
72350: LD_INT 3
72352: NONEQUAL
72353: IFFALSE 72394
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
72355: LD_ADDR_EXP 64
72359: PUSH
72360: LD_EXP 64
72364: PPUSH
72365: LD_VAR 0 2
72369: PPUSH
72370: LD_EXP 64
72374: PUSH
72375: LD_VAR 0 2
72379: ARRAY
72380: PUSH
72381: LD_VAR 0 3
72385: DIFF
72386: PPUSH
72387: CALL_OW 1
72391: ST_TO_ADDR
// continue ;
72392: GO 72337
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72394: LD_VAR 0 3
72398: PPUSH
72399: CALL_OW 311
72403: NOT
72404: PUSH
72405: LD_VAR 0 3
72409: PUSH
72410: LD_EXP 55
72414: PUSH
72415: LD_VAR 0 2
72419: ARRAY
72420: PUSH
72421: LD_INT 1
72423: ARRAY
72424: IN
72425: NOT
72426: AND
72427: PUSH
72428: LD_VAR 0 3
72432: PUSH
72433: LD_EXP 55
72437: PUSH
72438: LD_VAR 0 2
72442: ARRAY
72443: PUSH
72444: LD_INT 2
72446: ARRAY
72447: IN
72448: NOT
72449: AND
72450: IFFALSE 72502
// begin if IsInUnit ( j ) then
72452: LD_VAR 0 3
72456: PPUSH
72457: CALL_OW 310
72461: IFFALSE 72472
// ComExitBuilding ( j ) ;
72463: LD_VAR 0 3
72467: PPUSH
72468: CALL_OW 122
// if not HasTask ( j ) then
72472: LD_VAR 0 3
72476: PPUSH
72477: CALL_OW 314
72481: NOT
72482: IFFALSE 72502
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72484: LD_VAR 0 3
72488: PPUSH
72489: LD_VAR 0 7
72493: PUSH
72494: LD_INT 1
72496: ARRAY
72497: PPUSH
72498: CALL_OW 189
// end ; end ;
72502: GO 72337
72504: POP
72505: POP
// end ;
72506: GO 71826
72508: POP
72509: POP
// end ;
72510: LD_VAR 0 1
72514: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72515: LD_INT 0
72517: PPUSH
72518: PPUSH
72519: PPUSH
72520: PPUSH
72521: PPUSH
72522: PPUSH
72523: PPUSH
72524: PPUSH
72525: PPUSH
72526: PPUSH
72527: PPUSH
// if not mc_bases then
72528: LD_EXP 52
72532: NOT
72533: IFFALSE 72537
// exit ;
72535: GO 73339
// for i = 1 to mc_bases do
72537: LD_ADDR_VAR 0 2
72541: PUSH
72542: DOUBLE
72543: LD_INT 1
72545: DEC
72546: ST_TO_ADDR
72547: LD_EXP 52
72551: PUSH
72552: FOR_TO
72553: IFFALSE 73337
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72555: LD_EXP 80
72559: PUSH
72560: LD_VAR 0 2
72564: ARRAY
72565: NOT
72566: PUSH
72567: LD_EXP 55
72571: PUSH
72572: LD_VAR 0 2
72576: ARRAY
72577: PUSH
72578: LD_INT 1
72580: ARRAY
72581: OR
72582: PUSH
72583: LD_EXP 55
72587: PUSH
72588: LD_VAR 0 2
72592: ARRAY
72593: PUSH
72594: LD_INT 2
72596: ARRAY
72597: OR
72598: PUSH
72599: LD_EXP 78
72603: PUSH
72604: LD_VAR 0 2
72608: ARRAY
72609: PPUSH
72610: LD_INT 1
72612: PPUSH
72613: CALL_OW 325
72617: NOT
72618: OR
72619: PUSH
72620: LD_EXP 75
72624: PUSH
72625: LD_VAR 0 2
72629: ARRAY
72630: OR
72631: IFFALSE 72635
// continue ;
72633: GO 72552
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72635: LD_ADDR_VAR 0 8
72639: PUSH
72640: LD_EXP 52
72644: PUSH
72645: LD_VAR 0 2
72649: ARRAY
72650: PPUSH
72651: LD_INT 25
72653: PUSH
72654: LD_INT 4
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 50
72663: PUSH
72664: EMPTY
72665: LIST
72666: PUSH
72667: LD_INT 3
72669: PUSH
72670: LD_INT 60
72672: PUSH
72673: EMPTY
72674: LIST
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: LIST
72684: PPUSH
72685: CALL_OW 72
72689: PUSH
72690: LD_EXP 56
72694: PUSH
72695: LD_VAR 0 2
72699: ARRAY
72700: DIFF
72701: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72702: LD_ADDR_VAR 0 9
72706: PUSH
72707: LD_EXP 52
72711: PUSH
72712: LD_VAR 0 2
72716: ARRAY
72717: PPUSH
72718: LD_INT 2
72720: PUSH
72721: LD_INT 30
72723: PUSH
72724: LD_INT 0
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 30
72733: PUSH
72734: LD_INT 1
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: LIST
72745: PPUSH
72746: CALL_OW 72
72750: ST_TO_ADDR
// if not tmp or not dep then
72751: LD_VAR 0 8
72755: NOT
72756: PUSH
72757: LD_VAR 0 9
72761: NOT
72762: OR
72763: IFFALSE 72767
// continue ;
72765: GO 72552
// side := GetSide ( tmp [ 1 ] ) ;
72767: LD_ADDR_VAR 0 11
72771: PUSH
72772: LD_VAR 0 8
72776: PUSH
72777: LD_INT 1
72779: ARRAY
72780: PPUSH
72781: CALL_OW 255
72785: ST_TO_ADDR
// dep := dep [ 1 ] ;
72786: LD_ADDR_VAR 0 9
72790: PUSH
72791: LD_VAR 0 9
72795: PUSH
72796: LD_INT 1
72798: ARRAY
72799: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72800: LD_ADDR_VAR 0 7
72804: PUSH
72805: LD_EXP 80
72809: PUSH
72810: LD_VAR 0 2
72814: ARRAY
72815: PPUSH
72816: LD_INT 22
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: LD_INT 25
72828: PUSH
72829: LD_INT 12
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PPUSH
72840: CALL_OW 70
72844: PUSH
72845: LD_INT 22
72847: PUSH
72848: LD_INT 0
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 25
72857: PUSH
72858: LD_INT 12
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 91
72867: PUSH
72868: LD_VAR 0 9
72872: PUSH
72873: LD_INT 20
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: LIST
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: LIST
72885: PPUSH
72886: CALL_OW 69
72890: UNION
72891: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72892: LD_ADDR_VAR 0 10
72896: PUSH
72897: LD_EXP 80
72901: PUSH
72902: LD_VAR 0 2
72906: ARRAY
72907: PPUSH
72908: LD_INT 81
72910: PUSH
72911: LD_VAR 0 11
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PPUSH
72920: CALL_OW 70
72924: ST_TO_ADDR
// if not apes or danger_at_area then
72925: LD_VAR 0 7
72929: NOT
72930: PUSH
72931: LD_VAR 0 10
72935: OR
72936: IFFALSE 72986
// begin if mc_taming [ i ] then
72938: LD_EXP 83
72942: PUSH
72943: LD_VAR 0 2
72947: ARRAY
72948: IFFALSE 72984
// begin MC_Reset ( i , 121 ) ;
72950: LD_VAR 0 2
72954: PPUSH
72955: LD_INT 121
72957: PPUSH
72958: CALL 58317 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72962: LD_ADDR_EXP 83
72966: PUSH
72967: LD_EXP 83
72971: PPUSH
72972: LD_VAR 0 2
72976: PPUSH
72977: EMPTY
72978: PPUSH
72979: CALL_OW 1
72983: ST_TO_ADDR
// end ; continue ;
72984: GO 72552
// end ; for j in tmp do
72986: LD_ADDR_VAR 0 3
72990: PUSH
72991: LD_VAR 0 8
72995: PUSH
72996: FOR_IN
72997: IFFALSE 73333
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
72999: LD_VAR 0 3
73003: PUSH
73004: LD_EXP 83
73008: PUSH
73009: LD_VAR 0 2
73013: ARRAY
73014: IN
73015: NOT
73016: PUSH
73017: LD_EXP 83
73021: PUSH
73022: LD_VAR 0 2
73026: ARRAY
73027: PUSH
73028: LD_INT 3
73030: LESS
73031: AND
73032: IFFALSE 73090
// begin SetTag ( j , 121 ) ;
73034: LD_VAR 0 3
73038: PPUSH
73039: LD_INT 121
73041: PPUSH
73042: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
73046: LD_ADDR_EXP 83
73050: PUSH
73051: LD_EXP 83
73055: PPUSH
73056: LD_VAR 0 2
73060: PUSH
73061: LD_EXP 83
73065: PUSH
73066: LD_VAR 0 2
73070: ARRAY
73071: PUSH
73072: LD_INT 1
73074: PLUS
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PPUSH
73080: LD_VAR 0 3
73084: PPUSH
73085: CALL 18270 0 3
73089: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
73090: LD_VAR 0 3
73094: PUSH
73095: LD_EXP 83
73099: PUSH
73100: LD_VAR 0 2
73104: ARRAY
73105: IN
73106: IFFALSE 73331
// begin if GetClass ( j ) <> 4 then
73108: LD_VAR 0 3
73112: PPUSH
73113: CALL_OW 257
73117: PUSH
73118: LD_INT 4
73120: NONEQUAL
73121: IFFALSE 73174
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
73123: LD_ADDR_EXP 83
73127: PUSH
73128: LD_EXP 83
73132: PPUSH
73133: LD_VAR 0 2
73137: PPUSH
73138: LD_EXP 83
73142: PUSH
73143: LD_VAR 0 2
73147: ARRAY
73148: PUSH
73149: LD_VAR 0 3
73153: DIFF
73154: PPUSH
73155: CALL_OW 1
73159: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73160: LD_VAR 0 3
73164: PPUSH
73165: LD_INT 0
73167: PPUSH
73168: CALL_OW 109
// continue ;
73172: GO 72996
// end ; if IsInUnit ( j ) then
73174: LD_VAR 0 3
73178: PPUSH
73179: CALL_OW 310
73183: IFFALSE 73194
// ComExitBuilding ( j ) ;
73185: LD_VAR 0 3
73189: PPUSH
73190: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
73194: LD_ADDR_VAR 0 6
73198: PUSH
73199: LD_VAR 0 7
73203: PPUSH
73204: LD_VAR 0 3
73208: PPUSH
73209: CALL_OW 74
73213: ST_TO_ADDR
// if not ape then
73214: LD_VAR 0 6
73218: NOT
73219: IFFALSE 73223
// break ;
73221: GO 73333
// x := GetX ( ape ) ;
73223: LD_ADDR_VAR 0 4
73227: PUSH
73228: LD_VAR 0 6
73232: PPUSH
73233: CALL_OW 250
73237: ST_TO_ADDR
// y := GetY ( ape ) ;
73238: LD_ADDR_VAR 0 5
73242: PUSH
73243: LD_VAR 0 6
73247: PPUSH
73248: CALL_OW 251
73252: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73253: LD_VAR 0 4
73257: PPUSH
73258: LD_VAR 0 5
73262: PPUSH
73263: CALL_OW 488
73267: NOT
73268: PUSH
73269: LD_VAR 0 11
73273: PPUSH
73274: LD_VAR 0 4
73278: PPUSH
73279: LD_VAR 0 5
73283: PPUSH
73284: LD_INT 20
73286: PPUSH
73287: CALL 19166 0 4
73291: PUSH
73292: LD_INT 4
73294: ARRAY
73295: OR
73296: IFFALSE 73300
// break ;
73298: GO 73333
// if not HasTask ( j ) then
73300: LD_VAR 0 3
73304: PPUSH
73305: CALL_OW 314
73309: NOT
73310: IFFALSE 73331
// ComTameXY ( j , x , y ) ;
73312: LD_VAR 0 3
73316: PPUSH
73317: LD_VAR 0 4
73321: PPUSH
73322: LD_VAR 0 5
73326: PPUSH
73327: CALL_OW 131
// end ; end ;
73331: GO 72996
73333: POP
73334: POP
// end ;
73335: GO 72552
73337: POP
73338: POP
// end ;
73339: LD_VAR 0 1
73343: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
73344: LD_INT 0
73346: PPUSH
73347: PPUSH
73348: PPUSH
73349: PPUSH
73350: PPUSH
73351: PPUSH
73352: PPUSH
73353: PPUSH
// if not mc_bases then
73354: LD_EXP 52
73358: NOT
73359: IFFALSE 73363
// exit ;
73361: GO 73989
// for i = 1 to mc_bases do
73363: LD_ADDR_VAR 0 2
73367: PUSH
73368: DOUBLE
73369: LD_INT 1
73371: DEC
73372: ST_TO_ADDR
73373: LD_EXP 52
73377: PUSH
73378: FOR_TO
73379: IFFALSE 73987
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
73381: LD_EXP 81
73385: PUSH
73386: LD_VAR 0 2
73390: ARRAY
73391: NOT
73392: PUSH
73393: LD_EXP 81
73397: PUSH
73398: LD_VAR 0 2
73402: ARRAY
73403: PPUSH
73404: LD_INT 25
73406: PUSH
73407: LD_INT 12
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PPUSH
73414: CALL_OW 72
73418: NOT
73419: OR
73420: IFFALSE 73424
// continue ;
73422: GO 73378
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73424: LD_ADDR_VAR 0 5
73428: PUSH
73429: LD_EXP 81
73433: PUSH
73434: LD_VAR 0 2
73438: ARRAY
73439: PUSH
73440: LD_INT 1
73442: ARRAY
73443: PPUSH
73444: CALL_OW 255
73448: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73449: LD_VAR 0 5
73453: PPUSH
73454: LD_INT 2
73456: PPUSH
73457: CALL_OW 325
73461: IFFALSE 73714
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73463: LD_ADDR_VAR 0 4
73467: PUSH
73468: LD_EXP 81
73472: PUSH
73473: LD_VAR 0 2
73477: ARRAY
73478: PPUSH
73479: LD_INT 25
73481: PUSH
73482: LD_INT 16
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PPUSH
73489: CALL_OW 72
73493: ST_TO_ADDR
// if tmp < 6 then
73494: LD_VAR 0 4
73498: PUSH
73499: LD_INT 6
73501: LESS
73502: IFFALSE 73714
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73504: LD_ADDR_VAR 0 6
73508: PUSH
73509: LD_EXP 52
73513: PUSH
73514: LD_VAR 0 2
73518: ARRAY
73519: PPUSH
73520: LD_INT 2
73522: PUSH
73523: LD_INT 30
73525: PUSH
73526: LD_INT 0
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 30
73535: PUSH
73536: LD_INT 1
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: LIST
73547: PPUSH
73548: CALL_OW 72
73552: ST_TO_ADDR
// if depot then
73553: LD_VAR 0 6
73557: IFFALSE 73714
// begin selected := 0 ;
73559: LD_ADDR_VAR 0 7
73563: PUSH
73564: LD_INT 0
73566: ST_TO_ADDR
// for j in depot do
73567: LD_ADDR_VAR 0 3
73571: PUSH
73572: LD_VAR 0 6
73576: PUSH
73577: FOR_IN
73578: IFFALSE 73609
// begin if UnitsInside ( j ) < 6 then
73580: LD_VAR 0 3
73584: PPUSH
73585: CALL_OW 313
73589: PUSH
73590: LD_INT 6
73592: LESS
73593: IFFALSE 73607
// begin selected := j ;
73595: LD_ADDR_VAR 0 7
73599: PUSH
73600: LD_VAR 0 3
73604: ST_TO_ADDR
// break ;
73605: GO 73609
// end ; end ;
73607: GO 73577
73609: POP
73610: POP
// if selected then
73611: LD_VAR 0 7
73615: IFFALSE 73714
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73617: LD_ADDR_VAR 0 3
73621: PUSH
73622: LD_EXP 81
73626: PUSH
73627: LD_VAR 0 2
73631: ARRAY
73632: PPUSH
73633: LD_INT 25
73635: PUSH
73636: LD_INT 12
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PPUSH
73643: CALL_OW 72
73647: PUSH
73648: FOR_IN
73649: IFFALSE 73712
// if not HasTask ( j ) then
73651: LD_VAR 0 3
73655: PPUSH
73656: CALL_OW 314
73660: NOT
73661: IFFALSE 73710
// begin if not IsInUnit ( j ) then
73663: LD_VAR 0 3
73667: PPUSH
73668: CALL_OW 310
73672: NOT
73673: IFFALSE 73689
// ComEnterUnit ( j , selected ) ;
73675: LD_VAR 0 3
73679: PPUSH
73680: LD_VAR 0 7
73684: PPUSH
73685: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73689: LD_VAR 0 3
73693: PPUSH
73694: LD_INT 16
73696: PPUSH
73697: CALL_OW 183
// AddComExitBuilding ( j ) ;
73701: LD_VAR 0 3
73705: PPUSH
73706: CALL_OW 182
// end ;
73710: GO 73648
73712: POP
73713: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73714: LD_VAR 0 5
73718: PPUSH
73719: LD_INT 11
73721: PPUSH
73722: CALL_OW 325
73726: IFFALSE 73985
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73728: LD_ADDR_VAR 0 4
73732: PUSH
73733: LD_EXP 81
73737: PUSH
73738: LD_VAR 0 2
73742: ARRAY
73743: PPUSH
73744: LD_INT 25
73746: PUSH
73747: LD_INT 16
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PPUSH
73754: CALL_OW 72
73758: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73759: LD_VAR 0 4
73763: PUSH
73764: LD_INT 6
73766: GREATEREQUAL
73767: PUSH
73768: LD_VAR 0 5
73772: PPUSH
73773: LD_INT 2
73775: PPUSH
73776: CALL_OW 325
73780: NOT
73781: OR
73782: IFFALSE 73985
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73784: LD_ADDR_VAR 0 8
73788: PUSH
73789: LD_EXP 52
73793: PUSH
73794: LD_VAR 0 2
73798: ARRAY
73799: PPUSH
73800: LD_INT 2
73802: PUSH
73803: LD_INT 30
73805: PUSH
73806: LD_INT 4
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 30
73815: PUSH
73816: LD_INT 5
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: PPUSH
73828: CALL_OW 72
73832: ST_TO_ADDR
// if barracks then
73833: LD_VAR 0 8
73837: IFFALSE 73985
// begin selected := 0 ;
73839: LD_ADDR_VAR 0 7
73843: PUSH
73844: LD_INT 0
73846: ST_TO_ADDR
// for j in barracks do
73847: LD_ADDR_VAR 0 3
73851: PUSH
73852: LD_VAR 0 8
73856: PUSH
73857: FOR_IN
73858: IFFALSE 73889
// begin if UnitsInside ( j ) < 6 then
73860: LD_VAR 0 3
73864: PPUSH
73865: CALL_OW 313
73869: PUSH
73870: LD_INT 6
73872: LESS
73873: IFFALSE 73887
// begin selected := j ;
73875: LD_ADDR_VAR 0 7
73879: PUSH
73880: LD_VAR 0 3
73884: ST_TO_ADDR
// break ;
73885: GO 73889
// end ; end ;
73887: GO 73857
73889: POP
73890: POP
// if selected then
73891: LD_VAR 0 7
73895: IFFALSE 73985
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73897: LD_ADDR_VAR 0 3
73901: PUSH
73902: LD_EXP 81
73906: PUSH
73907: LD_VAR 0 2
73911: ARRAY
73912: PPUSH
73913: LD_INT 25
73915: PUSH
73916: LD_INT 12
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PPUSH
73923: CALL_OW 72
73927: PUSH
73928: FOR_IN
73929: IFFALSE 73983
// if not IsInUnit ( j ) and not HasTask ( j ) then
73931: LD_VAR 0 3
73935: PPUSH
73936: CALL_OW 310
73940: NOT
73941: PUSH
73942: LD_VAR 0 3
73946: PPUSH
73947: CALL_OW 314
73951: NOT
73952: AND
73953: IFFALSE 73981
// begin ComEnterUnit ( j , selected ) ;
73955: LD_VAR 0 3
73959: PPUSH
73960: LD_VAR 0 7
73964: PPUSH
73965: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
73969: LD_VAR 0 3
73973: PPUSH
73974: LD_INT 15
73976: PPUSH
73977: CALL_OW 183
// end ;
73981: GO 73928
73983: POP
73984: POP
// end ; end ; end ; end ; end ;
73985: GO 73378
73987: POP
73988: POP
// end ;
73989: LD_VAR 0 1
73993: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
73994: LD_INT 0
73996: PPUSH
73997: PPUSH
73998: PPUSH
73999: PPUSH
// if not mc_bases then
74000: LD_EXP 52
74004: NOT
74005: IFFALSE 74009
// exit ;
74007: GO 74187
// for i = 1 to mc_bases do
74009: LD_ADDR_VAR 0 2
74013: PUSH
74014: DOUBLE
74015: LD_INT 1
74017: DEC
74018: ST_TO_ADDR
74019: LD_EXP 52
74023: PUSH
74024: FOR_TO
74025: IFFALSE 74185
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
74027: LD_ADDR_VAR 0 4
74031: PUSH
74032: LD_EXP 52
74036: PUSH
74037: LD_VAR 0 2
74041: ARRAY
74042: PPUSH
74043: LD_INT 25
74045: PUSH
74046: LD_INT 9
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PPUSH
74053: CALL_OW 72
74057: ST_TO_ADDR
// if not tmp then
74058: LD_VAR 0 4
74062: NOT
74063: IFFALSE 74067
// continue ;
74065: GO 74024
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
74067: LD_EXP 78
74071: PUSH
74072: LD_VAR 0 2
74076: ARRAY
74077: PPUSH
74078: LD_INT 29
74080: PPUSH
74081: CALL_OW 325
74085: NOT
74086: PUSH
74087: LD_EXP 78
74091: PUSH
74092: LD_VAR 0 2
74096: ARRAY
74097: PPUSH
74098: LD_INT 28
74100: PPUSH
74101: CALL_OW 325
74105: NOT
74106: AND
74107: IFFALSE 74111
// continue ;
74109: GO 74024
// for j in tmp do
74111: LD_ADDR_VAR 0 3
74115: PUSH
74116: LD_VAR 0 4
74120: PUSH
74121: FOR_IN
74122: IFFALSE 74181
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74124: LD_VAR 0 3
74128: PUSH
74129: LD_EXP 55
74133: PUSH
74134: LD_VAR 0 2
74138: ARRAY
74139: PUSH
74140: LD_INT 1
74142: ARRAY
74143: IN
74144: NOT
74145: PUSH
74146: LD_VAR 0 3
74150: PUSH
74151: LD_EXP 55
74155: PUSH
74156: LD_VAR 0 2
74160: ARRAY
74161: PUSH
74162: LD_INT 2
74164: ARRAY
74165: IN
74166: NOT
74167: AND
74168: IFFALSE 74179
// ComSpaceTimeShoot ( j ) ;
74170: LD_VAR 0 3
74174: PPUSH
74175: CALL 12005 0 1
74179: GO 74121
74181: POP
74182: POP
// end ;
74183: GO 74024
74185: POP
74186: POP
// end ;
74187: LD_VAR 0 1
74191: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
74192: LD_INT 0
74194: PPUSH
74195: PPUSH
74196: PPUSH
74197: PPUSH
74198: PPUSH
74199: PPUSH
74200: PPUSH
74201: PPUSH
74202: PPUSH
// if not mc_bases then
74203: LD_EXP 52
74207: NOT
74208: IFFALSE 74212
// exit ;
74210: GO 74834
// for i = 1 to mc_bases do
74212: LD_ADDR_VAR 0 2
74216: PUSH
74217: DOUBLE
74218: LD_INT 1
74220: DEC
74221: ST_TO_ADDR
74222: LD_EXP 52
74226: PUSH
74227: FOR_TO
74228: IFFALSE 74832
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
74230: LD_EXP 87
74234: PUSH
74235: LD_VAR 0 2
74239: ARRAY
74240: NOT
74241: PUSH
74242: LD_INT 38
74244: PPUSH
74245: LD_EXP 78
74249: PUSH
74250: LD_VAR 0 2
74254: ARRAY
74255: PPUSH
74256: CALL_OW 321
74260: PUSH
74261: LD_INT 2
74263: NONEQUAL
74264: OR
74265: IFFALSE 74269
// continue ;
74267: GO 74227
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
74269: LD_ADDR_VAR 0 8
74273: PUSH
74274: LD_EXP 52
74278: PUSH
74279: LD_VAR 0 2
74283: ARRAY
74284: PPUSH
74285: LD_INT 30
74287: PUSH
74288: LD_INT 34
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PPUSH
74295: CALL_OW 72
74299: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
74300: LD_ADDR_VAR 0 9
74304: PUSH
74305: LD_EXP 52
74309: PUSH
74310: LD_VAR 0 2
74314: ARRAY
74315: PPUSH
74316: LD_INT 25
74318: PUSH
74319: LD_INT 4
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PPUSH
74326: CALL_OW 72
74330: PPUSH
74331: LD_INT 0
74333: PPUSH
74334: CALL 51530 0 2
74338: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
74339: LD_VAR 0 9
74343: NOT
74344: PUSH
74345: LD_VAR 0 8
74349: NOT
74350: OR
74351: PUSH
74352: LD_EXP 52
74356: PUSH
74357: LD_VAR 0 2
74361: ARRAY
74362: PPUSH
74363: LD_INT 124
74365: PPUSH
74366: CALL 51530 0 2
74370: OR
74371: IFFALSE 74375
// continue ;
74373: GO 74227
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
74375: LD_EXP 88
74379: PUSH
74380: LD_VAR 0 2
74384: ARRAY
74385: PUSH
74386: LD_EXP 87
74390: PUSH
74391: LD_VAR 0 2
74395: ARRAY
74396: LESS
74397: PUSH
74398: LD_EXP 88
74402: PUSH
74403: LD_VAR 0 2
74407: ARRAY
74408: PUSH
74409: LD_VAR 0 8
74413: LESS
74414: AND
74415: IFFALSE 74830
// begin tmp := sci [ 1 ] ;
74417: LD_ADDR_VAR 0 7
74421: PUSH
74422: LD_VAR 0 9
74426: PUSH
74427: LD_INT 1
74429: ARRAY
74430: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
74431: LD_VAR 0 7
74435: PPUSH
74436: LD_INT 124
74438: PPUSH
74439: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
74443: LD_ADDR_VAR 0 3
74447: PUSH
74448: DOUBLE
74449: LD_EXP 87
74453: PUSH
74454: LD_VAR 0 2
74458: ARRAY
74459: INC
74460: ST_TO_ADDR
74461: LD_EXP 87
74465: PUSH
74466: LD_VAR 0 2
74470: ARRAY
74471: PUSH
74472: FOR_DOWNTO
74473: IFFALSE 74816
// begin if IsInUnit ( tmp ) then
74475: LD_VAR 0 7
74479: PPUSH
74480: CALL_OW 310
74484: IFFALSE 74495
// ComExitBuilding ( tmp ) ;
74486: LD_VAR 0 7
74490: PPUSH
74491: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
74495: LD_INT 35
74497: PPUSH
74498: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
74502: LD_VAR 0 7
74506: PPUSH
74507: CALL_OW 310
74511: NOT
74512: PUSH
74513: LD_VAR 0 7
74517: PPUSH
74518: CALL_OW 314
74522: NOT
74523: AND
74524: IFFALSE 74495
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
74526: LD_ADDR_VAR 0 6
74530: PUSH
74531: LD_VAR 0 7
74535: PPUSH
74536: CALL_OW 250
74540: PUSH
74541: LD_VAR 0 7
74545: PPUSH
74546: CALL_OW 251
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74555: LD_INT 35
74557: PPUSH
74558: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
74562: LD_ADDR_VAR 0 4
74566: PUSH
74567: LD_EXP 87
74571: PUSH
74572: LD_VAR 0 2
74576: ARRAY
74577: PUSH
74578: LD_VAR 0 3
74582: ARRAY
74583: PUSH
74584: LD_INT 1
74586: ARRAY
74587: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
74588: LD_ADDR_VAR 0 5
74592: PUSH
74593: LD_EXP 87
74597: PUSH
74598: LD_VAR 0 2
74602: ARRAY
74603: PUSH
74604: LD_VAR 0 3
74608: ARRAY
74609: PUSH
74610: LD_INT 2
74612: ARRAY
74613: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
74614: LD_VAR 0 7
74618: PPUSH
74619: LD_INT 10
74621: PPUSH
74622: CALL 20863 0 2
74626: PUSH
74627: LD_INT 4
74629: ARRAY
74630: IFFALSE 74668
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
74632: LD_VAR 0 7
74636: PPUSH
74637: LD_VAR 0 6
74641: PUSH
74642: LD_INT 1
74644: ARRAY
74645: PPUSH
74646: LD_VAR 0 6
74650: PUSH
74651: LD_INT 2
74653: ARRAY
74654: PPUSH
74655: CALL_OW 111
// wait ( 0 0$10 ) ;
74659: LD_INT 350
74661: PPUSH
74662: CALL_OW 67
// end else
74666: GO 74694
// begin ComMoveXY ( tmp , x , y ) ;
74668: LD_VAR 0 7
74672: PPUSH
74673: LD_VAR 0 4
74677: PPUSH
74678: LD_VAR 0 5
74682: PPUSH
74683: CALL_OW 111
// wait ( 0 0$3 ) ;
74687: LD_INT 105
74689: PPUSH
74690: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
74694: LD_VAR 0 7
74698: PPUSH
74699: LD_VAR 0 4
74703: PPUSH
74704: LD_VAR 0 5
74708: PPUSH
74709: CALL_OW 307
74713: IFFALSE 74555
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
74715: LD_VAR 0 7
74719: PPUSH
74720: LD_VAR 0 4
74724: PPUSH
74725: LD_VAR 0 5
74729: PPUSH
74730: LD_VAR 0 8
74734: PUSH
74735: LD_VAR 0 3
74739: ARRAY
74740: PPUSH
74741: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
74745: LD_INT 35
74747: PPUSH
74748: CALL_OW 67
// until not HasTask ( tmp ) ;
74752: LD_VAR 0 7
74756: PPUSH
74757: CALL_OW 314
74761: NOT
74762: IFFALSE 74745
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
74764: LD_ADDR_EXP 88
74768: PUSH
74769: LD_EXP 88
74773: PPUSH
74774: LD_VAR 0 2
74778: PUSH
74779: LD_EXP 88
74783: PUSH
74784: LD_VAR 0 2
74788: ARRAY
74789: PUSH
74790: LD_INT 1
74792: PLUS
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PPUSH
74798: LD_VAR 0 8
74802: PUSH
74803: LD_VAR 0 3
74807: ARRAY
74808: PPUSH
74809: CALL 18270 0 3
74813: ST_TO_ADDR
// end ;
74814: GO 74472
74816: POP
74817: POP
// MC_Reset ( i , 124 ) ;
74818: LD_VAR 0 2
74822: PPUSH
74823: LD_INT 124
74825: PPUSH
74826: CALL 58317 0 2
// end ; end ;
74830: GO 74227
74832: POP
74833: POP
// end ;
74834: LD_VAR 0 1
74838: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74839: LD_INT 0
74841: PPUSH
74842: PPUSH
74843: PPUSH
// if not mc_bases then
74844: LD_EXP 52
74848: NOT
74849: IFFALSE 74853
// exit ;
74851: GO 75459
// for i = 1 to mc_bases do
74853: LD_ADDR_VAR 0 2
74857: PUSH
74858: DOUBLE
74859: LD_INT 1
74861: DEC
74862: ST_TO_ADDR
74863: LD_EXP 52
74867: PUSH
74868: FOR_TO
74869: IFFALSE 75457
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74871: LD_ADDR_VAR 0 3
74875: PUSH
74876: LD_EXP 52
74880: PUSH
74881: LD_VAR 0 2
74885: ARRAY
74886: PPUSH
74887: LD_INT 25
74889: PUSH
74890: LD_INT 4
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PPUSH
74897: CALL_OW 72
74901: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
74902: LD_VAR 0 3
74906: NOT
74907: PUSH
74908: LD_EXP 89
74912: PUSH
74913: LD_VAR 0 2
74917: ARRAY
74918: NOT
74919: OR
74920: PUSH
74921: LD_EXP 52
74925: PUSH
74926: LD_VAR 0 2
74930: ARRAY
74931: PPUSH
74932: LD_INT 2
74934: PUSH
74935: LD_INT 30
74937: PUSH
74938: LD_INT 0
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 30
74947: PUSH
74948: LD_INT 1
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: PPUSH
74960: CALL_OW 72
74964: NOT
74965: OR
74966: IFFALSE 75016
// begin if mc_deposits_finder [ i ] then
74968: LD_EXP 90
74972: PUSH
74973: LD_VAR 0 2
74977: ARRAY
74978: IFFALSE 75014
// begin MC_Reset ( i , 125 ) ;
74980: LD_VAR 0 2
74984: PPUSH
74985: LD_INT 125
74987: PPUSH
74988: CALL 58317 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74992: LD_ADDR_EXP 90
74996: PUSH
74997: LD_EXP 90
75001: PPUSH
75002: LD_VAR 0 2
75006: PPUSH
75007: EMPTY
75008: PPUSH
75009: CALL_OW 1
75013: ST_TO_ADDR
// end ; continue ;
75014: GO 74868
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
75016: LD_EXP 89
75020: PUSH
75021: LD_VAR 0 2
75025: ARRAY
75026: PUSH
75027: LD_INT 1
75029: ARRAY
75030: PUSH
75031: LD_INT 3
75033: ARRAY
75034: PUSH
75035: LD_INT 1
75037: EQUAL
75038: PUSH
75039: LD_INT 20
75041: PPUSH
75042: LD_EXP 78
75046: PUSH
75047: LD_VAR 0 2
75051: ARRAY
75052: PPUSH
75053: CALL_OW 321
75057: PUSH
75058: LD_INT 2
75060: NONEQUAL
75061: AND
75062: IFFALSE 75112
// begin if mc_deposits_finder [ i ] then
75064: LD_EXP 90
75068: PUSH
75069: LD_VAR 0 2
75073: ARRAY
75074: IFFALSE 75110
// begin MC_Reset ( i , 125 ) ;
75076: LD_VAR 0 2
75080: PPUSH
75081: LD_INT 125
75083: PPUSH
75084: CALL 58317 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75088: LD_ADDR_EXP 90
75092: PUSH
75093: LD_EXP 90
75097: PPUSH
75098: LD_VAR 0 2
75102: PPUSH
75103: EMPTY
75104: PPUSH
75105: CALL_OW 1
75109: ST_TO_ADDR
// end ; continue ;
75110: GO 74868
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
75112: LD_EXP 89
75116: PUSH
75117: LD_VAR 0 2
75121: ARRAY
75122: PUSH
75123: LD_INT 1
75125: ARRAY
75126: PUSH
75127: LD_INT 1
75129: ARRAY
75130: PPUSH
75131: LD_EXP 89
75135: PUSH
75136: LD_VAR 0 2
75140: ARRAY
75141: PUSH
75142: LD_INT 1
75144: ARRAY
75145: PUSH
75146: LD_INT 2
75148: ARRAY
75149: PPUSH
75150: LD_EXP 78
75154: PUSH
75155: LD_VAR 0 2
75159: ARRAY
75160: PPUSH
75161: CALL_OW 440
75165: IFFALSE 75208
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
75167: LD_ADDR_EXP 89
75171: PUSH
75172: LD_EXP 89
75176: PPUSH
75177: LD_VAR 0 2
75181: PPUSH
75182: LD_EXP 89
75186: PUSH
75187: LD_VAR 0 2
75191: ARRAY
75192: PPUSH
75193: LD_INT 1
75195: PPUSH
75196: CALL_OW 3
75200: PPUSH
75201: CALL_OW 1
75205: ST_TO_ADDR
75206: GO 75455
// begin if not mc_deposits_finder [ i ] then
75208: LD_EXP 90
75212: PUSH
75213: LD_VAR 0 2
75217: ARRAY
75218: NOT
75219: IFFALSE 75271
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
75221: LD_ADDR_EXP 90
75225: PUSH
75226: LD_EXP 90
75230: PPUSH
75231: LD_VAR 0 2
75235: PPUSH
75236: LD_VAR 0 3
75240: PUSH
75241: LD_INT 1
75243: ARRAY
75244: PUSH
75245: EMPTY
75246: LIST
75247: PPUSH
75248: CALL_OW 1
75252: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
75253: LD_VAR 0 3
75257: PUSH
75258: LD_INT 1
75260: ARRAY
75261: PPUSH
75262: LD_INT 125
75264: PPUSH
75265: CALL_OW 109
// end else
75269: GO 75455
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
75271: LD_EXP 90
75275: PUSH
75276: LD_VAR 0 2
75280: ARRAY
75281: PUSH
75282: LD_INT 1
75284: ARRAY
75285: PPUSH
75286: CALL_OW 310
75290: IFFALSE 75313
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
75292: LD_EXP 90
75296: PUSH
75297: LD_VAR 0 2
75301: ARRAY
75302: PUSH
75303: LD_INT 1
75305: ARRAY
75306: PPUSH
75307: CALL_OW 122
75311: GO 75455
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
75313: LD_EXP 90
75317: PUSH
75318: LD_VAR 0 2
75322: ARRAY
75323: PUSH
75324: LD_INT 1
75326: ARRAY
75327: PPUSH
75328: CALL_OW 314
75332: NOT
75333: PUSH
75334: LD_EXP 90
75338: PUSH
75339: LD_VAR 0 2
75343: ARRAY
75344: PUSH
75345: LD_INT 1
75347: ARRAY
75348: PPUSH
75349: LD_EXP 89
75353: PUSH
75354: LD_VAR 0 2
75358: ARRAY
75359: PUSH
75360: LD_INT 1
75362: ARRAY
75363: PUSH
75364: LD_INT 1
75366: ARRAY
75367: PPUSH
75368: LD_EXP 89
75372: PUSH
75373: LD_VAR 0 2
75377: ARRAY
75378: PUSH
75379: LD_INT 1
75381: ARRAY
75382: PUSH
75383: LD_INT 2
75385: ARRAY
75386: PPUSH
75387: CALL_OW 297
75391: PUSH
75392: LD_INT 6
75394: GREATER
75395: AND
75396: IFFALSE 75455
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
75398: LD_EXP 90
75402: PUSH
75403: LD_VAR 0 2
75407: ARRAY
75408: PUSH
75409: LD_INT 1
75411: ARRAY
75412: PPUSH
75413: LD_EXP 89
75417: PUSH
75418: LD_VAR 0 2
75422: ARRAY
75423: PUSH
75424: LD_INT 1
75426: ARRAY
75427: PUSH
75428: LD_INT 1
75430: ARRAY
75431: PPUSH
75432: LD_EXP 89
75436: PUSH
75437: LD_VAR 0 2
75441: ARRAY
75442: PUSH
75443: LD_INT 1
75445: ARRAY
75446: PUSH
75447: LD_INT 2
75449: ARRAY
75450: PPUSH
75451: CALL_OW 111
// end ; end ; end ;
75455: GO 74868
75457: POP
75458: POP
// end ;
75459: LD_VAR 0 1
75463: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
75464: LD_INT 0
75466: PPUSH
75467: PPUSH
75468: PPUSH
75469: PPUSH
75470: PPUSH
75471: PPUSH
75472: PPUSH
75473: PPUSH
75474: PPUSH
75475: PPUSH
75476: PPUSH
// if not mc_bases then
75477: LD_EXP 52
75481: NOT
75482: IFFALSE 75486
// exit ;
75484: GO 76210
// for i = 1 to mc_bases do
75486: LD_ADDR_VAR 0 2
75490: PUSH
75491: DOUBLE
75492: LD_INT 1
75494: DEC
75495: ST_TO_ADDR
75496: LD_EXP 52
75500: PUSH
75501: FOR_TO
75502: IFFALSE 76208
// begin if not mc_bases [ i ] then
75504: LD_EXP 52
75508: PUSH
75509: LD_VAR 0 2
75513: ARRAY
75514: NOT
75515: IFFALSE 75519
// continue ;
75517: GO 75501
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75519: LD_ADDR_VAR 0 7
75523: PUSH
75524: LD_EXP 52
75528: PUSH
75529: LD_VAR 0 2
75533: ARRAY
75534: PUSH
75535: LD_INT 1
75537: ARRAY
75538: PPUSH
75539: CALL_OW 248
75543: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
75544: LD_VAR 0 7
75548: PUSH
75549: LD_INT 3
75551: EQUAL
75552: PUSH
75553: LD_EXP 71
75557: PUSH
75558: LD_VAR 0 2
75562: ARRAY
75563: PUSH
75564: LD_EXP 74
75568: PUSH
75569: LD_VAR 0 2
75573: ARRAY
75574: UNION
75575: PPUSH
75576: LD_INT 33
75578: PUSH
75579: LD_INT 2
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PPUSH
75586: CALL_OW 72
75590: NOT
75591: OR
75592: IFFALSE 75596
// continue ;
75594: GO 75501
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75596: LD_ADDR_VAR 0 9
75600: PUSH
75601: LD_EXP 52
75605: PUSH
75606: LD_VAR 0 2
75610: ARRAY
75611: PPUSH
75612: LD_INT 30
75614: PUSH
75615: LD_INT 36
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PPUSH
75622: CALL_OW 72
75626: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
75627: LD_ADDR_VAR 0 10
75631: PUSH
75632: LD_EXP 71
75636: PUSH
75637: LD_VAR 0 2
75641: ARRAY
75642: PPUSH
75643: LD_INT 34
75645: PUSH
75646: LD_INT 31
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PPUSH
75653: CALL_OW 72
75657: ST_TO_ADDR
// if not cts and not mcts then
75658: LD_VAR 0 9
75662: NOT
75663: PUSH
75664: LD_VAR 0 10
75668: NOT
75669: AND
75670: IFFALSE 75674
// continue ;
75672: GO 75501
// x := cts ;
75674: LD_ADDR_VAR 0 11
75678: PUSH
75679: LD_VAR 0 9
75683: ST_TO_ADDR
// if not x then
75684: LD_VAR 0 11
75688: NOT
75689: IFFALSE 75701
// x := mcts ;
75691: LD_ADDR_VAR 0 11
75695: PUSH
75696: LD_VAR 0 10
75700: ST_TO_ADDR
// if mc_remote_driver [ i ] then
75701: LD_EXP 92
75705: PUSH
75706: LD_VAR 0 2
75710: ARRAY
75711: IFFALSE 75980
// for j in mc_remote_driver [ i ] do
75713: LD_ADDR_VAR 0 3
75717: PUSH
75718: LD_EXP 92
75722: PUSH
75723: LD_VAR 0 2
75727: ARRAY
75728: PUSH
75729: FOR_IN
75730: IFFALSE 75978
// begin if GetClass ( j ) <> 3 then
75732: LD_VAR 0 3
75736: PPUSH
75737: CALL_OW 257
75741: PUSH
75742: LD_INT 3
75744: NONEQUAL
75745: IFFALSE 75798
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
75747: LD_ADDR_EXP 92
75751: PUSH
75752: LD_EXP 92
75756: PPUSH
75757: LD_VAR 0 2
75761: PPUSH
75762: LD_EXP 92
75766: PUSH
75767: LD_VAR 0 2
75771: ARRAY
75772: PUSH
75773: LD_VAR 0 3
75777: DIFF
75778: PPUSH
75779: CALL_OW 1
75783: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75784: LD_VAR 0 3
75788: PPUSH
75789: LD_INT 0
75791: PPUSH
75792: CALL_OW 109
// continue ;
75796: GO 75729
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
75798: LD_VAR 0 3
75802: PPUSH
75803: CALL_OW 310
75807: NOT
75808: PUSH
75809: LD_VAR 0 3
75813: PPUSH
75814: CALL_OW 310
75818: PPUSH
75819: CALL_OW 266
75823: PUSH
75824: LD_INT 36
75826: NONEQUAL
75827: PUSH
75828: LD_VAR 0 3
75832: PPUSH
75833: CALL 51618 0 1
75837: NOT
75838: AND
75839: OR
75840: IFFALSE 75976
// begin if IsInUnit ( j ) then
75842: LD_VAR 0 3
75846: PPUSH
75847: CALL_OW 310
75851: IFFALSE 75862
// ComExitBuilding ( j ) ;
75853: LD_VAR 0 3
75857: PPUSH
75858: CALL_OW 122
// ct := 0 ;
75862: LD_ADDR_VAR 0 8
75866: PUSH
75867: LD_INT 0
75869: ST_TO_ADDR
// for k in x do
75870: LD_ADDR_VAR 0 4
75874: PUSH
75875: LD_VAR 0 11
75879: PUSH
75880: FOR_IN
75881: IFFALSE 75954
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
75883: LD_VAR 0 4
75887: PPUSH
75888: CALL_OW 264
75892: PUSH
75893: LD_INT 31
75895: EQUAL
75896: PUSH
75897: LD_VAR 0 4
75901: PPUSH
75902: CALL_OW 311
75906: NOT
75907: AND
75908: PUSH
75909: LD_VAR 0 4
75913: PPUSH
75914: CALL_OW 266
75918: PUSH
75919: LD_INT 36
75921: EQUAL
75922: PUSH
75923: LD_VAR 0 4
75927: PPUSH
75928: CALL_OW 313
75932: PUSH
75933: LD_INT 3
75935: LESS
75936: AND
75937: OR
75938: IFFALSE 75952
// begin ct := k ;
75940: LD_ADDR_VAR 0 8
75944: PUSH
75945: LD_VAR 0 4
75949: ST_TO_ADDR
// break ;
75950: GO 75954
// end ;
75952: GO 75880
75954: POP
75955: POP
// if ct then
75956: LD_VAR 0 8
75960: IFFALSE 75976
// ComEnterUnit ( j , ct ) ;
75962: LD_VAR 0 3
75966: PPUSH
75967: LD_VAR 0 8
75971: PPUSH
75972: CALL_OW 120
// end ; end ;
75976: GO 75729
75978: POP
75979: POP
// places := 0 ;
75980: LD_ADDR_VAR 0 5
75984: PUSH
75985: LD_INT 0
75987: ST_TO_ADDR
// for j = 1 to x do
75988: LD_ADDR_VAR 0 3
75992: PUSH
75993: DOUBLE
75994: LD_INT 1
75996: DEC
75997: ST_TO_ADDR
75998: LD_VAR 0 11
76002: PUSH
76003: FOR_TO
76004: IFFALSE 76059
// if GetWeapon ( x [ j ] ) = ar_control_tower then
76006: LD_VAR 0 11
76010: PUSH
76011: LD_VAR 0 3
76015: ARRAY
76016: PPUSH
76017: CALL_OW 264
76021: PUSH
76022: LD_INT 31
76024: EQUAL
76025: IFFALSE 76043
// places := places + 1 else
76027: LD_ADDR_VAR 0 5
76031: PUSH
76032: LD_VAR 0 5
76036: PUSH
76037: LD_INT 1
76039: PLUS
76040: ST_TO_ADDR
76041: GO 76057
// places := places + 3 ;
76043: LD_ADDR_VAR 0 5
76047: PUSH
76048: LD_VAR 0 5
76052: PUSH
76053: LD_INT 3
76055: PLUS
76056: ST_TO_ADDR
76057: GO 76003
76059: POP
76060: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
76061: LD_ADDR_VAR 0 6
76065: PUSH
76066: LD_EXP 52
76070: PUSH
76071: LD_VAR 0 2
76075: ARRAY
76076: PPUSH
76077: LD_INT 25
76079: PUSH
76080: LD_INT 3
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PPUSH
76087: CALL_OW 72
76091: PUSH
76092: LD_EXP 92
76096: PUSH
76097: LD_VAR 0 2
76101: ARRAY
76102: DIFF
76103: PPUSH
76104: LD_INT 3
76106: PPUSH
76107: CALL 52518 0 2
76111: ST_TO_ADDR
// if not tmp then
76112: LD_VAR 0 6
76116: NOT
76117: IFFALSE 76121
// continue ;
76119: GO 75501
// places := places - mc_remote_driver [ i ] ;
76121: LD_ADDR_VAR 0 5
76125: PUSH
76126: LD_VAR 0 5
76130: PUSH
76131: LD_EXP 92
76135: PUSH
76136: LD_VAR 0 2
76140: ARRAY
76141: MINUS
76142: ST_TO_ADDR
// if places then
76143: LD_VAR 0 5
76147: IFFALSE 76206
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
76149: LD_ADDR_EXP 92
76153: PUSH
76154: LD_EXP 92
76158: PPUSH
76159: LD_VAR 0 2
76163: PPUSH
76164: LD_EXP 92
76168: PUSH
76169: LD_VAR 0 2
76173: ARRAY
76174: PUSH
76175: LD_VAR 0 6
76179: PUSH
76180: LD_INT 1
76182: ARRAY
76183: UNION
76184: PPUSH
76185: CALL_OW 1
76189: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
76190: LD_VAR 0 6
76194: PUSH
76195: LD_INT 1
76197: ARRAY
76198: PPUSH
76199: LD_INT 126
76201: PPUSH
76202: CALL_OW 109
// end ; end ;
76206: GO 75501
76208: POP
76209: POP
// end ;
76210: LD_VAR 0 1
76214: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
76215: LD_INT 0
76217: PPUSH
76218: PPUSH
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
76223: LD_VAR 0 1
76227: NOT
76228: PUSH
76229: LD_VAR 0 2
76233: NOT
76234: OR
76235: PUSH
76236: LD_VAR 0 3
76240: NOT
76241: OR
76242: PUSH
76243: LD_VAR 0 4
76247: PUSH
76248: LD_INT 1
76250: PUSH
76251: LD_INT 2
76253: PUSH
76254: LD_INT 3
76256: PUSH
76257: LD_INT 4
76259: PUSH
76260: LD_INT 5
76262: PUSH
76263: LD_INT 8
76265: PUSH
76266: LD_INT 9
76268: PUSH
76269: LD_INT 15
76271: PUSH
76272: LD_INT 16
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: IN
76286: NOT
76287: OR
76288: IFFALSE 76292
// exit ;
76290: GO 77192
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
76292: LD_ADDR_VAR 0 2
76296: PUSH
76297: LD_VAR 0 2
76301: PPUSH
76302: LD_INT 21
76304: PUSH
76305: LD_INT 3
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PUSH
76312: LD_INT 24
76314: PUSH
76315: LD_INT 250
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PPUSH
76326: CALL_OW 72
76330: ST_TO_ADDR
// case class of 1 , 15 :
76331: LD_VAR 0 4
76335: PUSH
76336: LD_INT 1
76338: DOUBLE
76339: EQUAL
76340: IFTRUE 76350
76342: LD_INT 15
76344: DOUBLE
76345: EQUAL
76346: IFTRUE 76350
76348: GO 76435
76350: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
76351: LD_ADDR_VAR 0 8
76355: PUSH
76356: LD_VAR 0 2
76360: PPUSH
76361: LD_INT 2
76363: PUSH
76364: LD_INT 30
76366: PUSH
76367: LD_INT 32
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 30
76376: PUSH
76377: LD_INT 31
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: PPUSH
76389: CALL_OW 72
76393: PUSH
76394: LD_VAR 0 2
76398: PPUSH
76399: LD_INT 2
76401: PUSH
76402: LD_INT 30
76404: PUSH
76405: LD_INT 4
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 30
76414: PUSH
76415: LD_INT 5
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: PPUSH
76427: CALL_OW 72
76431: ADD
76432: ST_TO_ADDR
76433: GO 76681
76435: LD_INT 2
76437: DOUBLE
76438: EQUAL
76439: IFTRUE 76449
76441: LD_INT 16
76443: DOUBLE
76444: EQUAL
76445: IFTRUE 76449
76447: GO 76495
76449: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76450: LD_ADDR_VAR 0 8
76454: PUSH
76455: LD_VAR 0 2
76459: PPUSH
76460: LD_INT 2
76462: PUSH
76463: LD_INT 30
76465: PUSH
76466: LD_INT 0
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PUSH
76473: LD_INT 30
76475: PUSH
76476: LD_INT 1
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: LIST
76487: PPUSH
76488: CALL_OW 72
76492: ST_TO_ADDR
76493: GO 76681
76495: LD_INT 3
76497: DOUBLE
76498: EQUAL
76499: IFTRUE 76503
76501: GO 76549
76503: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76504: LD_ADDR_VAR 0 8
76508: PUSH
76509: LD_VAR 0 2
76513: PPUSH
76514: LD_INT 2
76516: PUSH
76517: LD_INT 30
76519: PUSH
76520: LD_INT 2
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: LD_INT 30
76529: PUSH
76530: LD_INT 3
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PPUSH
76542: CALL_OW 72
76546: ST_TO_ADDR
76547: GO 76681
76549: LD_INT 4
76551: DOUBLE
76552: EQUAL
76553: IFTRUE 76557
76555: GO 76614
76557: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76558: LD_ADDR_VAR 0 8
76562: PUSH
76563: LD_VAR 0 2
76567: PPUSH
76568: LD_INT 2
76570: PUSH
76571: LD_INT 30
76573: PUSH
76574: LD_INT 6
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 30
76583: PUSH
76584: LD_INT 7
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 30
76593: PUSH
76594: LD_INT 8
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: PPUSH
76607: CALL_OW 72
76611: ST_TO_ADDR
76612: GO 76681
76614: LD_INT 5
76616: DOUBLE
76617: EQUAL
76618: IFTRUE 76634
76620: LD_INT 8
76622: DOUBLE
76623: EQUAL
76624: IFTRUE 76634
76626: LD_INT 9
76628: DOUBLE
76629: EQUAL
76630: IFTRUE 76634
76632: GO 76680
76634: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76635: LD_ADDR_VAR 0 8
76639: PUSH
76640: LD_VAR 0 2
76644: PPUSH
76645: LD_INT 2
76647: PUSH
76648: LD_INT 30
76650: PUSH
76651: LD_INT 4
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: PUSH
76658: LD_INT 30
76660: PUSH
76661: LD_INT 5
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: LIST
76672: PPUSH
76673: CALL_OW 72
76677: ST_TO_ADDR
76678: GO 76681
76680: POP
// if not tmp then
76681: LD_VAR 0 8
76685: NOT
76686: IFFALSE 76690
// exit ;
76688: GO 77192
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
76690: LD_VAR 0 4
76694: PUSH
76695: LD_INT 1
76697: PUSH
76698: LD_INT 15
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: IN
76705: PUSH
76706: LD_EXP 61
76710: PUSH
76711: LD_VAR 0 1
76715: ARRAY
76716: AND
76717: IFFALSE 76873
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
76719: LD_ADDR_VAR 0 9
76723: PUSH
76724: LD_EXP 61
76728: PUSH
76729: LD_VAR 0 1
76733: ARRAY
76734: PUSH
76735: LD_INT 1
76737: ARRAY
76738: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
76739: LD_VAR 0 9
76743: PUSH
76744: LD_EXP 62
76748: PUSH
76749: LD_VAR 0 1
76753: ARRAY
76754: IN
76755: NOT
76756: IFFALSE 76871
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
76758: LD_ADDR_EXP 62
76762: PUSH
76763: LD_EXP 62
76767: PPUSH
76768: LD_VAR 0 1
76772: PUSH
76773: LD_EXP 62
76777: PUSH
76778: LD_VAR 0 1
76782: ARRAY
76783: PUSH
76784: LD_INT 1
76786: PLUS
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PPUSH
76792: LD_VAR 0 9
76796: PPUSH
76797: CALL 18270 0 3
76801: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
76802: LD_ADDR_EXP 61
76806: PUSH
76807: LD_EXP 61
76811: PPUSH
76812: LD_VAR 0 1
76816: PPUSH
76817: LD_EXP 61
76821: PUSH
76822: LD_VAR 0 1
76826: ARRAY
76827: PUSH
76828: LD_VAR 0 9
76832: DIFF
76833: PPUSH
76834: CALL_OW 1
76838: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
76839: LD_VAR 0 3
76843: PPUSH
76844: LD_EXP 62
76848: PUSH
76849: LD_VAR 0 1
76853: ARRAY
76854: PUSH
76855: LD_EXP 62
76859: PUSH
76860: LD_VAR 0 1
76864: ARRAY
76865: ARRAY
76866: PPUSH
76867: CALL_OW 120
// end ; exit ;
76871: GO 77192
// end ; if tmp > 1 then
76873: LD_VAR 0 8
76877: PUSH
76878: LD_INT 1
76880: GREATER
76881: IFFALSE 76985
// for i = 2 to tmp do
76883: LD_ADDR_VAR 0 6
76887: PUSH
76888: DOUBLE
76889: LD_INT 2
76891: DEC
76892: ST_TO_ADDR
76893: LD_VAR 0 8
76897: PUSH
76898: FOR_TO
76899: IFFALSE 76983
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
76901: LD_VAR 0 8
76905: PUSH
76906: LD_VAR 0 6
76910: ARRAY
76911: PPUSH
76912: CALL_OW 461
76916: PUSH
76917: LD_INT 6
76919: EQUAL
76920: IFFALSE 76981
// begin x := tmp [ i ] ;
76922: LD_ADDR_VAR 0 9
76926: PUSH
76927: LD_VAR 0 8
76931: PUSH
76932: LD_VAR 0 6
76936: ARRAY
76937: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
76938: LD_ADDR_VAR 0 8
76942: PUSH
76943: LD_VAR 0 8
76947: PPUSH
76948: LD_VAR 0 6
76952: PPUSH
76953: CALL_OW 3
76957: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
76958: LD_ADDR_VAR 0 8
76962: PUSH
76963: LD_VAR 0 8
76967: PPUSH
76968: LD_INT 1
76970: PPUSH
76971: LD_VAR 0 9
76975: PPUSH
76976: CALL_OW 2
76980: ST_TO_ADDR
// end ;
76981: GO 76898
76983: POP
76984: POP
// for i in tmp do
76985: LD_ADDR_VAR 0 6
76989: PUSH
76990: LD_VAR 0 8
76994: PUSH
76995: FOR_IN
76996: IFFALSE 77065
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
76998: LD_VAR 0 6
77002: PPUSH
77003: CALL_OW 313
77007: PUSH
77008: LD_INT 6
77010: LESS
77011: PUSH
77012: LD_VAR 0 6
77016: PPUSH
77017: CALL_OW 266
77021: PUSH
77022: LD_INT 31
77024: PUSH
77025: LD_INT 32
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: IN
77032: NOT
77033: AND
77034: PUSH
77035: LD_VAR 0 6
77039: PPUSH
77040: CALL_OW 313
77044: PUSH
77045: LD_INT 0
77047: EQUAL
77048: OR
77049: IFFALSE 77063
// begin j := i ;
77051: LD_ADDR_VAR 0 7
77055: PUSH
77056: LD_VAR 0 6
77060: ST_TO_ADDR
// break ;
77061: GO 77065
// end ; end ;
77063: GO 76995
77065: POP
77066: POP
// if j then
77067: LD_VAR 0 7
77071: IFFALSE 77089
// ComEnterUnit ( unit , j ) else
77073: LD_VAR 0 3
77077: PPUSH
77078: LD_VAR 0 7
77082: PPUSH
77083: CALL_OW 120
77087: GO 77192
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77089: LD_ADDR_VAR 0 10
77093: PUSH
77094: LD_VAR 0 2
77098: PPUSH
77099: LD_INT 2
77101: PUSH
77102: LD_INT 30
77104: PUSH
77105: LD_INT 0
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 30
77114: PUSH
77115: LD_INT 1
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: LIST
77126: PPUSH
77127: CALL_OW 72
77131: ST_TO_ADDR
// if depot then
77132: LD_VAR 0 10
77136: IFFALSE 77192
// begin depot := NearestUnitToUnit ( depot , unit ) ;
77138: LD_ADDR_VAR 0 10
77142: PUSH
77143: LD_VAR 0 10
77147: PPUSH
77148: LD_VAR 0 3
77152: PPUSH
77153: CALL_OW 74
77157: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
77158: LD_VAR 0 3
77162: PPUSH
77163: LD_VAR 0 10
77167: PPUSH
77168: CALL_OW 296
77172: PUSH
77173: LD_INT 10
77175: GREATER
77176: IFFALSE 77192
// ComStandNearbyBuilding ( unit , depot ) ;
77178: LD_VAR 0 3
77182: PPUSH
77183: LD_VAR 0 10
77187: PPUSH
77188: CALL 12622 0 2
// end ; end ; end ;
77192: LD_VAR 0 5
77196: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
77197: LD_INT 0
77199: PPUSH
77200: PPUSH
77201: PPUSH
77202: PPUSH
// if not mc_bases then
77203: LD_EXP 52
77207: NOT
77208: IFFALSE 77212
// exit ;
77210: GO 77451
// for i = 1 to mc_bases do
77212: LD_ADDR_VAR 0 2
77216: PUSH
77217: DOUBLE
77218: LD_INT 1
77220: DEC
77221: ST_TO_ADDR
77222: LD_EXP 52
77226: PUSH
77227: FOR_TO
77228: IFFALSE 77449
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
77230: LD_ADDR_VAR 0 4
77234: PUSH
77235: LD_EXP 52
77239: PUSH
77240: LD_VAR 0 2
77244: ARRAY
77245: PPUSH
77246: LD_INT 21
77248: PUSH
77249: LD_INT 1
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PPUSH
77256: CALL_OW 72
77260: PUSH
77261: LD_EXP 81
77265: PUSH
77266: LD_VAR 0 2
77270: ARRAY
77271: UNION
77272: ST_TO_ADDR
// if not tmp then
77273: LD_VAR 0 4
77277: NOT
77278: IFFALSE 77282
// continue ;
77280: GO 77227
// for j in tmp do
77282: LD_ADDR_VAR 0 3
77286: PUSH
77287: LD_VAR 0 4
77291: PUSH
77292: FOR_IN
77293: IFFALSE 77445
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
77295: LD_VAR 0 3
77299: PPUSH
77300: CALL_OW 110
77304: NOT
77305: PUSH
77306: LD_VAR 0 3
77310: PPUSH
77311: CALL_OW 314
77315: NOT
77316: AND
77317: PUSH
77318: LD_VAR 0 3
77322: PPUSH
77323: CALL_OW 311
77327: NOT
77328: AND
77329: PUSH
77330: LD_VAR 0 3
77334: PPUSH
77335: CALL_OW 310
77339: NOT
77340: AND
77341: PUSH
77342: LD_VAR 0 3
77346: PUSH
77347: LD_EXP 55
77351: PUSH
77352: LD_VAR 0 2
77356: ARRAY
77357: PUSH
77358: LD_INT 1
77360: ARRAY
77361: IN
77362: NOT
77363: AND
77364: PUSH
77365: LD_VAR 0 3
77369: PUSH
77370: LD_EXP 55
77374: PUSH
77375: LD_VAR 0 2
77379: ARRAY
77380: PUSH
77381: LD_INT 2
77383: ARRAY
77384: IN
77385: NOT
77386: AND
77387: PUSH
77388: LD_VAR 0 3
77392: PUSH
77393: LD_EXP 64
77397: PUSH
77398: LD_VAR 0 2
77402: ARRAY
77403: IN
77404: NOT
77405: AND
77406: IFFALSE 77443
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77408: LD_VAR 0 2
77412: PPUSH
77413: LD_EXP 52
77417: PUSH
77418: LD_VAR 0 2
77422: ARRAY
77423: PPUSH
77424: LD_VAR 0 3
77428: PPUSH
77429: LD_VAR 0 3
77433: PPUSH
77434: CALL_OW 257
77438: PPUSH
77439: CALL 76215 0 4
// end ;
77443: GO 77292
77445: POP
77446: POP
// end ;
77447: GO 77227
77449: POP
77450: POP
// end ;
77451: LD_VAR 0 1
77455: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77456: LD_INT 0
77458: PPUSH
77459: PPUSH
77460: PPUSH
77461: PPUSH
77462: PPUSH
77463: PPUSH
// if not mc_bases [ base ] then
77464: LD_EXP 52
77468: PUSH
77469: LD_VAR 0 1
77473: ARRAY
77474: NOT
77475: IFFALSE 77479
// exit ;
77477: GO 77661
// tmp := [ ] ;
77479: LD_ADDR_VAR 0 6
77483: PUSH
77484: EMPTY
77485: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77486: LD_ADDR_VAR 0 7
77490: PUSH
77491: LD_VAR 0 3
77495: PPUSH
77496: LD_INT 0
77498: PPUSH
77499: CALL_OW 517
77503: ST_TO_ADDR
// if not list then
77504: LD_VAR 0 7
77508: NOT
77509: IFFALSE 77513
// exit ;
77511: GO 77661
// for i = 1 to amount do
77513: LD_ADDR_VAR 0 5
77517: PUSH
77518: DOUBLE
77519: LD_INT 1
77521: DEC
77522: ST_TO_ADDR
77523: LD_VAR 0 2
77527: PUSH
77528: FOR_TO
77529: IFFALSE 77609
// begin x := rand ( 1 , list [ 1 ] ) ;
77531: LD_ADDR_VAR 0 8
77535: PUSH
77536: LD_INT 1
77538: PPUSH
77539: LD_VAR 0 7
77543: PUSH
77544: LD_INT 1
77546: ARRAY
77547: PPUSH
77548: CALL_OW 12
77552: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77553: LD_ADDR_VAR 0 6
77557: PUSH
77558: LD_VAR 0 6
77562: PPUSH
77563: LD_VAR 0 5
77567: PPUSH
77568: LD_VAR 0 7
77572: PUSH
77573: LD_INT 1
77575: ARRAY
77576: PUSH
77577: LD_VAR 0 8
77581: ARRAY
77582: PUSH
77583: LD_VAR 0 7
77587: PUSH
77588: LD_INT 2
77590: ARRAY
77591: PUSH
77592: LD_VAR 0 8
77596: ARRAY
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PPUSH
77602: CALL_OW 1
77606: ST_TO_ADDR
// end ;
77607: GO 77528
77609: POP
77610: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77611: LD_ADDR_EXP 65
77615: PUSH
77616: LD_EXP 65
77620: PPUSH
77621: LD_VAR 0 1
77625: PPUSH
77626: LD_VAR 0 6
77630: PPUSH
77631: CALL_OW 1
77635: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77636: LD_ADDR_EXP 67
77640: PUSH
77641: LD_EXP 67
77645: PPUSH
77646: LD_VAR 0 1
77650: PPUSH
77651: LD_VAR 0 3
77655: PPUSH
77656: CALL_OW 1
77660: ST_TO_ADDR
// end ;
77661: LD_VAR 0 4
77665: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77666: LD_INT 0
77668: PPUSH
// if not mc_bases [ base ] then
77669: LD_EXP 52
77673: PUSH
77674: LD_VAR 0 1
77678: ARRAY
77679: NOT
77680: IFFALSE 77684
// exit ;
77682: GO 77709
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
77684: LD_ADDR_EXP 57
77688: PUSH
77689: LD_EXP 57
77693: PPUSH
77694: LD_VAR 0 1
77698: PPUSH
77699: LD_VAR 0 2
77703: PPUSH
77704: CALL_OW 1
77708: ST_TO_ADDR
// end ;
77709: LD_VAR 0 3
77713: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
77714: LD_INT 0
77716: PPUSH
// if not mc_bases [ base ] then
77717: LD_EXP 52
77721: PUSH
77722: LD_VAR 0 1
77726: ARRAY
77727: NOT
77728: IFFALSE 77732
// exit ;
77730: GO 77769
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
77732: LD_ADDR_EXP 57
77736: PUSH
77737: LD_EXP 57
77741: PPUSH
77742: LD_VAR 0 1
77746: PPUSH
77747: LD_EXP 57
77751: PUSH
77752: LD_VAR 0 1
77756: ARRAY
77757: PUSH
77758: LD_VAR 0 2
77762: UNION
77763: PPUSH
77764: CALL_OW 1
77768: ST_TO_ADDR
// end ;
77769: LD_VAR 0 3
77773: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
77774: LD_INT 0
77776: PPUSH
// if not mc_bases [ base ] then
77777: LD_EXP 52
77781: PUSH
77782: LD_VAR 0 1
77786: ARRAY
77787: NOT
77788: IFFALSE 77792
// exit ;
77790: GO 77817
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
77792: LD_ADDR_EXP 73
77796: PUSH
77797: LD_EXP 73
77801: PPUSH
77802: LD_VAR 0 1
77806: PPUSH
77807: LD_VAR 0 2
77811: PPUSH
77812: CALL_OW 1
77816: ST_TO_ADDR
// end ;
77817: LD_VAR 0 3
77821: RET
// export function MC_InsertProduceList ( base , components ) ; begin
77822: LD_INT 0
77824: PPUSH
// if not mc_bases [ base ] then
77825: LD_EXP 52
77829: PUSH
77830: LD_VAR 0 1
77834: ARRAY
77835: NOT
77836: IFFALSE 77840
// exit ;
77838: GO 77877
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
77840: LD_ADDR_EXP 73
77844: PUSH
77845: LD_EXP 73
77849: PPUSH
77850: LD_VAR 0 1
77854: PPUSH
77855: LD_EXP 73
77859: PUSH
77860: LD_VAR 0 1
77864: ARRAY
77865: PUSH
77866: LD_VAR 0 2
77870: ADD
77871: PPUSH
77872: CALL_OW 1
77876: ST_TO_ADDR
// end ;
77877: LD_VAR 0 3
77881: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
77882: LD_INT 0
77884: PPUSH
// if not mc_bases [ base ] then
77885: LD_EXP 52
77889: PUSH
77890: LD_VAR 0 1
77894: ARRAY
77895: NOT
77896: IFFALSE 77900
// exit ;
77898: GO 77954
// mc_defender := Replace ( mc_defender , base , deflist ) ;
77900: LD_ADDR_EXP 74
77904: PUSH
77905: LD_EXP 74
77909: PPUSH
77910: LD_VAR 0 1
77914: PPUSH
77915: LD_VAR 0 2
77919: PPUSH
77920: CALL_OW 1
77924: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
77925: LD_ADDR_EXP 63
77929: PUSH
77930: LD_EXP 63
77934: PPUSH
77935: LD_VAR 0 1
77939: PPUSH
77940: LD_VAR 0 2
77944: PUSH
77945: LD_INT 0
77947: PLUS
77948: PPUSH
77949: CALL_OW 1
77953: ST_TO_ADDR
// end ;
77954: LD_VAR 0 3
77958: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
77959: LD_INT 0
77961: PPUSH
// if not mc_bases [ base ] then
77962: LD_EXP 52
77966: PUSH
77967: LD_VAR 0 1
77971: ARRAY
77972: NOT
77973: IFFALSE 77977
// exit ;
77975: GO 78002
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
77977: LD_ADDR_EXP 63
77981: PUSH
77982: LD_EXP 63
77986: PPUSH
77987: LD_VAR 0 1
77991: PPUSH
77992: LD_VAR 0 2
77996: PPUSH
77997: CALL_OW 1
78001: ST_TO_ADDR
// end ;
78002: LD_VAR 0 3
78006: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
78007: LD_INT 0
78009: PPUSH
78010: PPUSH
78011: PPUSH
78012: PPUSH
// if not mc_bases [ base ] then
78013: LD_EXP 52
78017: PUSH
78018: LD_VAR 0 1
78022: ARRAY
78023: NOT
78024: IFFALSE 78028
// exit ;
78026: GO 78093
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
78028: LD_ADDR_EXP 72
78032: PUSH
78033: LD_EXP 72
78037: PPUSH
78038: LD_VAR 0 1
78042: PUSH
78043: LD_EXP 72
78047: PUSH
78048: LD_VAR 0 1
78052: ARRAY
78053: PUSH
78054: LD_INT 1
78056: PLUS
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: PPUSH
78062: LD_VAR 0 1
78066: PUSH
78067: LD_VAR 0 2
78071: PUSH
78072: LD_VAR 0 3
78076: PUSH
78077: LD_VAR 0 4
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: LIST
78086: LIST
78087: PPUSH
78088: CALL 18270 0 3
78092: ST_TO_ADDR
// end ;
78093: LD_VAR 0 5
78097: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
78098: LD_INT 0
78100: PPUSH
// if not mc_bases [ base ] then
78101: LD_EXP 52
78105: PUSH
78106: LD_VAR 0 1
78110: ARRAY
78111: NOT
78112: IFFALSE 78116
// exit ;
78114: GO 78141
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
78116: LD_ADDR_EXP 89
78120: PUSH
78121: LD_EXP 89
78125: PPUSH
78126: LD_VAR 0 1
78130: PPUSH
78131: LD_VAR 0 2
78135: PPUSH
78136: CALL_OW 1
78140: ST_TO_ADDR
// end ;
78141: LD_VAR 0 3
78145: RET
// export function MC_GetMinesField ( base ) ; begin
78146: LD_INT 0
78148: PPUSH
// result := mc_mines [ base ] ;
78149: LD_ADDR_VAR 0 2
78153: PUSH
78154: LD_EXP 65
78158: PUSH
78159: LD_VAR 0 1
78163: ARRAY
78164: ST_TO_ADDR
// end ;
78165: LD_VAR 0 2
78169: RET
// export function MC_GetProduceList ( base ) ; begin
78170: LD_INT 0
78172: PPUSH
// result := mc_produce [ base ] ;
78173: LD_ADDR_VAR 0 2
78177: PUSH
78178: LD_EXP 73
78182: PUSH
78183: LD_VAR 0 1
78187: ARRAY
78188: ST_TO_ADDR
// end ;
78189: LD_VAR 0 2
78193: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
78194: LD_INT 0
78196: PPUSH
78197: PPUSH
// if not mc_bases then
78198: LD_EXP 52
78202: NOT
78203: IFFALSE 78207
// exit ;
78205: GO 78272
// if mc_bases [ base ] then
78207: LD_EXP 52
78211: PUSH
78212: LD_VAR 0 1
78216: ARRAY
78217: IFFALSE 78272
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78219: LD_ADDR_VAR 0 3
78223: PUSH
78224: LD_EXP 52
78228: PUSH
78229: LD_VAR 0 1
78233: ARRAY
78234: PPUSH
78235: LD_INT 30
78237: PUSH
78238: LD_VAR 0 2
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PPUSH
78247: CALL_OW 72
78251: ST_TO_ADDR
// if result then
78252: LD_VAR 0 3
78256: IFFALSE 78272
// result := result [ 1 ] ;
78258: LD_ADDR_VAR 0 3
78262: PUSH
78263: LD_VAR 0 3
78267: PUSH
78268: LD_INT 1
78270: ARRAY
78271: ST_TO_ADDR
// end ; end ;
78272: LD_VAR 0 3
78276: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
78277: LD_INT 0
78279: PPUSH
78280: PPUSH
// if not mc_bases then
78281: LD_EXP 52
78285: NOT
78286: IFFALSE 78290
// exit ;
78288: GO 78335
// if mc_bases [ base ] then
78290: LD_EXP 52
78294: PUSH
78295: LD_VAR 0 1
78299: ARRAY
78300: IFFALSE 78335
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78302: LD_ADDR_VAR 0 3
78306: PUSH
78307: LD_EXP 52
78311: PUSH
78312: LD_VAR 0 1
78316: ARRAY
78317: PPUSH
78318: LD_INT 30
78320: PUSH
78321: LD_VAR 0 2
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PPUSH
78330: CALL_OW 72
78334: ST_TO_ADDR
// end ;
78335: LD_VAR 0 3
78339: RET
// export function MC_SetTame ( base , area ) ; begin
78340: LD_INT 0
78342: PPUSH
// if not mc_bases or not base then
78343: LD_EXP 52
78347: NOT
78348: PUSH
78349: LD_VAR 0 1
78353: NOT
78354: OR
78355: IFFALSE 78359
// exit ;
78357: GO 78384
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
78359: LD_ADDR_EXP 80
78363: PUSH
78364: LD_EXP 80
78368: PPUSH
78369: LD_VAR 0 1
78373: PPUSH
78374: LD_VAR 0 2
78378: PPUSH
78379: CALL_OW 1
78383: ST_TO_ADDR
// end ;
78384: LD_VAR 0 3
78388: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
78389: LD_INT 0
78391: PPUSH
78392: PPUSH
// if not mc_bases or not base then
78393: LD_EXP 52
78397: NOT
78398: PUSH
78399: LD_VAR 0 1
78403: NOT
78404: OR
78405: IFFALSE 78409
// exit ;
78407: GO 78511
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78409: LD_ADDR_VAR 0 4
78413: PUSH
78414: LD_EXP 52
78418: PUSH
78419: LD_VAR 0 1
78423: ARRAY
78424: PPUSH
78425: LD_INT 30
78427: PUSH
78428: LD_VAR 0 2
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: PPUSH
78437: CALL_OW 72
78441: ST_TO_ADDR
// if not tmp then
78442: LD_VAR 0 4
78446: NOT
78447: IFFALSE 78451
// exit ;
78449: GO 78511
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78451: LD_ADDR_EXP 84
78455: PUSH
78456: LD_EXP 84
78460: PPUSH
78461: LD_VAR 0 1
78465: PPUSH
78466: LD_EXP 84
78470: PUSH
78471: LD_VAR 0 1
78475: ARRAY
78476: PPUSH
78477: LD_EXP 84
78481: PUSH
78482: LD_VAR 0 1
78486: ARRAY
78487: PUSH
78488: LD_INT 1
78490: PLUS
78491: PPUSH
78492: LD_VAR 0 4
78496: PUSH
78497: LD_INT 1
78499: ARRAY
78500: PPUSH
78501: CALL_OW 2
78505: PPUSH
78506: CALL_OW 1
78510: ST_TO_ADDR
// end ;
78511: LD_VAR 0 3
78515: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78516: LD_INT 0
78518: PPUSH
78519: PPUSH
// if not mc_bases or not base or not kinds then
78520: LD_EXP 52
78524: NOT
78525: PUSH
78526: LD_VAR 0 1
78530: NOT
78531: OR
78532: PUSH
78533: LD_VAR 0 2
78537: NOT
78538: OR
78539: IFFALSE 78543
// exit ;
78541: GO 78604
// for i in kinds do
78543: LD_ADDR_VAR 0 4
78547: PUSH
78548: LD_VAR 0 2
78552: PUSH
78553: FOR_IN
78554: IFFALSE 78602
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78556: LD_ADDR_EXP 86
78560: PUSH
78561: LD_EXP 86
78565: PPUSH
78566: LD_VAR 0 1
78570: PUSH
78571: LD_EXP 86
78575: PUSH
78576: LD_VAR 0 1
78580: ARRAY
78581: PUSH
78582: LD_INT 1
78584: PLUS
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PPUSH
78590: LD_VAR 0 4
78594: PPUSH
78595: CALL 18270 0 3
78599: ST_TO_ADDR
78600: GO 78553
78602: POP
78603: POP
// end ;
78604: LD_VAR 0 3
78608: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78609: LD_INT 0
78611: PPUSH
// if not mc_bases or not base or not areas then
78612: LD_EXP 52
78616: NOT
78617: PUSH
78618: LD_VAR 0 1
78622: NOT
78623: OR
78624: PUSH
78625: LD_VAR 0 2
78629: NOT
78630: OR
78631: IFFALSE 78635
// exit ;
78633: GO 78660
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78635: LD_ADDR_EXP 70
78639: PUSH
78640: LD_EXP 70
78644: PPUSH
78645: LD_VAR 0 1
78649: PPUSH
78650: LD_VAR 0 2
78654: PPUSH
78655: CALL_OW 1
78659: ST_TO_ADDR
// end ;
78660: LD_VAR 0 3
78664: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
78665: LD_INT 0
78667: PPUSH
// if not mc_bases or not base or not teleports_exit then
78668: LD_EXP 52
78672: NOT
78673: PUSH
78674: LD_VAR 0 1
78678: NOT
78679: OR
78680: PUSH
78681: LD_VAR 0 2
78685: NOT
78686: OR
78687: IFFALSE 78691
// exit ;
78689: GO 78716
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
78691: LD_ADDR_EXP 87
78695: PUSH
78696: LD_EXP 87
78700: PPUSH
78701: LD_VAR 0 1
78705: PPUSH
78706: LD_VAR 0 2
78710: PPUSH
78711: CALL_OW 1
78715: ST_TO_ADDR
// end ;
78716: LD_VAR 0 3
78720: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
78721: LD_INT 0
78723: PPUSH
78724: PPUSH
78725: PPUSH
// if not mc_bases or not base or not ext_list then
78726: LD_EXP 52
78730: NOT
78731: PUSH
78732: LD_VAR 0 1
78736: NOT
78737: OR
78738: PUSH
78739: LD_VAR 0 5
78743: NOT
78744: OR
78745: IFFALSE 78749
// exit ;
78747: GO 78922
// tmp := GetFacExtXYD ( x , y , d ) ;
78749: LD_ADDR_VAR 0 8
78753: PUSH
78754: LD_VAR 0 2
78758: PPUSH
78759: LD_VAR 0 3
78763: PPUSH
78764: LD_VAR 0 4
78768: PPUSH
78769: CALL 51648 0 3
78773: ST_TO_ADDR
// if not tmp then
78774: LD_VAR 0 8
78778: NOT
78779: IFFALSE 78783
// exit ;
78781: GO 78922
// for i in tmp do
78783: LD_ADDR_VAR 0 7
78787: PUSH
78788: LD_VAR 0 8
78792: PUSH
78793: FOR_IN
78794: IFFALSE 78920
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
78796: LD_ADDR_EXP 57
78800: PUSH
78801: LD_EXP 57
78805: PPUSH
78806: LD_VAR 0 1
78810: PPUSH
78811: LD_EXP 57
78815: PUSH
78816: LD_VAR 0 1
78820: ARRAY
78821: PPUSH
78822: LD_EXP 57
78826: PUSH
78827: LD_VAR 0 1
78831: ARRAY
78832: PUSH
78833: LD_INT 1
78835: PLUS
78836: PPUSH
78837: LD_VAR 0 5
78841: PUSH
78842: LD_INT 1
78844: ARRAY
78845: PUSH
78846: LD_VAR 0 7
78850: PUSH
78851: LD_INT 1
78853: ARRAY
78854: PUSH
78855: LD_VAR 0 7
78859: PUSH
78860: LD_INT 2
78862: ARRAY
78863: PUSH
78864: LD_VAR 0 7
78868: PUSH
78869: LD_INT 3
78871: ARRAY
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: PPUSH
78879: CALL_OW 2
78883: PPUSH
78884: CALL_OW 1
78888: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
78889: LD_ADDR_VAR 0 5
78893: PUSH
78894: LD_VAR 0 5
78898: PPUSH
78899: LD_INT 1
78901: PPUSH
78902: CALL_OW 3
78906: ST_TO_ADDR
// if not ext_list then
78907: LD_VAR 0 5
78911: NOT
78912: IFFALSE 78918
// exit ;
78914: POP
78915: POP
78916: GO 78922
// end ;
78918: GO 78793
78920: POP
78921: POP
// end ;
78922: LD_VAR 0 6
78926: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
78927: LD_INT 0
78929: PPUSH
// if not mc_bases or not base or not weapon_list then
78930: LD_EXP 52
78934: NOT
78935: PUSH
78936: LD_VAR 0 1
78940: NOT
78941: OR
78942: PUSH
78943: LD_VAR 0 2
78947: NOT
78948: OR
78949: IFFALSE 78953
// exit ;
78951: GO 78978
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
78953: LD_ADDR_EXP 91
78957: PUSH
78958: LD_EXP 91
78962: PPUSH
78963: LD_VAR 0 1
78967: PPUSH
78968: LD_VAR 0 2
78972: PPUSH
78973: CALL_OW 1
78977: ST_TO_ADDR
// end ;
78978: LD_VAR 0 3
78982: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
78983: LD_INT 0
78985: PPUSH
// if not mc_bases or not base or not tech_list then
78986: LD_EXP 52
78990: NOT
78991: PUSH
78992: LD_VAR 0 1
78996: NOT
78997: OR
78998: PUSH
78999: LD_VAR 0 2
79003: NOT
79004: OR
79005: IFFALSE 79009
// exit ;
79007: GO 79034
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
79009: LD_ADDR_EXP 79
79013: PUSH
79014: LD_EXP 79
79018: PPUSH
79019: LD_VAR 0 1
79023: PPUSH
79024: LD_VAR 0 2
79028: PPUSH
79029: CALL_OW 1
79033: ST_TO_ADDR
// end ;
79034: LD_VAR 0 3
79038: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
79039: LD_INT 0
79041: PPUSH
// if not mc_bases or not parking_area or not base then
79042: LD_EXP 52
79046: NOT
79047: PUSH
79048: LD_VAR 0 2
79052: NOT
79053: OR
79054: PUSH
79055: LD_VAR 0 1
79059: NOT
79060: OR
79061: IFFALSE 79065
// exit ;
79063: GO 79090
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
79065: LD_ADDR_EXP 76
79069: PUSH
79070: LD_EXP 76
79074: PPUSH
79075: LD_VAR 0 1
79079: PPUSH
79080: LD_VAR 0 2
79084: PPUSH
79085: CALL_OW 1
79089: ST_TO_ADDR
// end ;
79090: LD_VAR 0 3
79094: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
79095: LD_INT 0
79097: PPUSH
// if not mc_bases or not base or not scan_area then
79098: LD_EXP 52
79102: NOT
79103: PUSH
79104: LD_VAR 0 1
79108: NOT
79109: OR
79110: PUSH
79111: LD_VAR 0 2
79115: NOT
79116: OR
79117: IFFALSE 79121
// exit ;
79119: GO 79146
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
79121: LD_ADDR_EXP 77
79125: PUSH
79126: LD_EXP 77
79130: PPUSH
79131: LD_VAR 0 1
79135: PPUSH
79136: LD_VAR 0 2
79140: PPUSH
79141: CALL_OW 1
79145: ST_TO_ADDR
// end ;
79146: LD_VAR 0 3
79150: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
79151: LD_INT 0
79153: PPUSH
79154: PPUSH
// if not mc_bases or not base then
79155: LD_EXP 52
79159: NOT
79160: PUSH
79161: LD_VAR 0 1
79165: NOT
79166: OR
79167: IFFALSE 79171
// exit ;
79169: GO 79235
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
79171: LD_ADDR_VAR 0 3
79175: PUSH
79176: LD_INT 1
79178: PUSH
79179: LD_INT 2
79181: PUSH
79182: LD_INT 3
79184: PUSH
79185: LD_INT 4
79187: PUSH
79188: LD_INT 11
79190: PUSH
79191: EMPTY
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: LIST
79197: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
79198: LD_ADDR_EXP 79
79202: PUSH
79203: LD_EXP 79
79207: PPUSH
79208: LD_VAR 0 1
79212: PPUSH
79213: LD_EXP 79
79217: PUSH
79218: LD_VAR 0 1
79222: ARRAY
79223: PUSH
79224: LD_VAR 0 3
79228: DIFF
79229: PPUSH
79230: CALL_OW 1
79234: ST_TO_ADDR
// end ;
79235: LD_VAR 0 2
79239: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
79240: LD_INT 0
79242: PPUSH
// result := mc_vehicles [ base ] ;
79243: LD_ADDR_VAR 0 3
79247: PUSH
79248: LD_EXP 71
79252: PUSH
79253: LD_VAR 0 1
79257: ARRAY
79258: ST_TO_ADDR
// if onlyCombat then
79259: LD_VAR 0 2
79263: IFFALSE 79428
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
79265: LD_ADDR_VAR 0 3
79269: PUSH
79270: LD_VAR 0 3
79274: PUSH
79275: LD_VAR 0 3
79279: PPUSH
79280: LD_INT 2
79282: PUSH
79283: LD_INT 34
79285: PUSH
79286: LD_INT 12
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: LD_INT 34
79295: PUSH
79296: LD_INT 51
79298: PUSH
79299: EMPTY
79300: LIST
79301: LIST
79302: PUSH
79303: LD_INT 34
79305: PUSH
79306: LD_EXP 46
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: PUSH
79315: LD_INT 34
79317: PUSH
79318: LD_INT 32
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: PUSH
79325: LD_INT 34
79327: PUSH
79328: LD_INT 13
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: LD_INT 34
79337: PUSH
79338: LD_INT 52
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: PUSH
79345: LD_INT 34
79347: PUSH
79348: LD_INT 14
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: PUSH
79355: LD_INT 34
79357: PUSH
79358: LD_INT 53
79360: PUSH
79361: EMPTY
79362: LIST
79363: LIST
79364: PUSH
79365: LD_INT 34
79367: PUSH
79368: LD_EXP 45
79372: PUSH
79373: EMPTY
79374: LIST
79375: LIST
79376: PUSH
79377: LD_INT 34
79379: PUSH
79380: LD_INT 31
79382: PUSH
79383: EMPTY
79384: LIST
79385: LIST
79386: PUSH
79387: LD_INT 34
79389: PUSH
79390: LD_INT 48
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: PUSH
79397: LD_INT 34
79399: PUSH
79400: LD_INT 8
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: LIST
79411: LIST
79412: LIST
79413: LIST
79414: LIST
79415: LIST
79416: LIST
79417: LIST
79418: LIST
79419: LIST
79420: LIST
79421: PPUSH
79422: CALL_OW 72
79426: DIFF
79427: ST_TO_ADDR
// end ; end_of_file
79428: LD_VAR 0 3
79432: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
79433: LD_INT 0
79435: PPUSH
79436: PPUSH
79437: PPUSH
// if not mc_bases or not skirmish then
79438: LD_EXP 52
79442: NOT
79443: PUSH
79444: LD_EXP 50
79448: NOT
79449: OR
79450: IFFALSE 79454
// exit ;
79452: GO 79619
// for i = 1 to mc_bases do
79454: LD_ADDR_VAR 0 4
79458: PUSH
79459: DOUBLE
79460: LD_INT 1
79462: DEC
79463: ST_TO_ADDR
79464: LD_EXP 52
79468: PUSH
79469: FOR_TO
79470: IFFALSE 79617
// begin if sci in mc_bases [ i ] then
79472: LD_VAR 0 2
79476: PUSH
79477: LD_EXP 52
79481: PUSH
79482: LD_VAR 0 4
79486: ARRAY
79487: IN
79488: IFFALSE 79615
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79490: LD_ADDR_EXP 81
79494: PUSH
79495: LD_EXP 81
79499: PPUSH
79500: LD_VAR 0 4
79504: PUSH
79505: LD_EXP 81
79509: PUSH
79510: LD_VAR 0 4
79514: ARRAY
79515: PUSH
79516: LD_INT 1
79518: PLUS
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: PPUSH
79524: LD_VAR 0 1
79528: PPUSH
79529: CALL 18270 0 3
79533: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79534: LD_ADDR_VAR 0 5
79538: PUSH
79539: LD_EXP 52
79543: PUSH
79544: LD_VAR 0 4
79548: ARRAY
79549: PPUSH
79550: LD_INT 2
79552: PUSH
79553: LD_INT 30
79555: PUSH
79556: LD_INT 0
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 30
79565: PUSH
79566: LD_INT 1
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: LIST
79577: PPUSH
79578: CALL_OW 72
79582: PPUSH
79583: LD_VAR 0 1
79587: PPUSH
79588: CALL_OW 74
79592: ST_TO_ADDR
// if tmp then
79593: LD_VAR 0 5
79597: IFFALSE 79613
// ComStandNearbyBuilding ( ape , tmp ) ;
79599: LD_VAR 0 1
79603: PPUSH
79604: LD_VAR 0 5
79608: PPUSH
79609: CALL 12622 0 2
// break ;
79613: GO 79617
// end ; end ;
79615: GO 79469
79617: POP
79618: POP
// end ;
79619: LD_VAR 0 3
79623: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79624: LD_INT 0
79626: PPUSH
79627: PPUSH
79628: PPUSH
// if not mc_bases or not skirmish then
79629: LD_EXP 52
79633: NOT
79634: PUSH
79635: LD_EXP 50
79639: NOT
79640: OR
79641: IFFALSE 79645
// exit ;
79643: GO 79734
// for i = 1 to mc_bases do
79645: LD_ADDR_VAR 0 4
79649: PUSH
79650: DOUBLE
79651: LD_INT 1
79653: DEC
79654: ST_TO_ADDR
79655: LD_EXP 52
79659: PUSH
79660: FOR_TO
79661: IFFALSE 79732
// begin if building in mc_busy_turret_list [ i ] then
79663: LD_VAR 0 1
79667: PUSH
79668: LD_EXP 62
79672: PUSH
79673: LD_VAR 0 4
79677: ARRAY
79678: IN
79679: IFFALSE 79730
// begin tmp := mc_busy_turret_list [ i ] diff building ;
79681: LD_ADDR_VAR 0 5
79685: PUSH
79686: LD_EXP 62
79690: PUSH
79691: LD_VAR 0 4
79695: ARRAY
79696: PUSH
79697: LD_VAR 0 1
79701: DIFF
79702: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
79703: LD_ADDR_EXP 62
79707: PUSH
79708: LD_EXP 62
79712: PPUSH
79713: LD_VAR 0 4
79717: PPUSH
79718: LD_VAR 0 5
79722: PPUSH
79723: CALL_OW 1
79727: ST_TO_ADDR
// break ;
79728: GO 79732
// end ; end ;
79730: GO 79660
79732: POP
79733: POP
// end ;
79734: LD_VAR 0 3
79738: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
79739: LD_INT 0
79741: PPUSH
79742: PPUSH
79743: PPUSH
// if not mc_bases or not skirmish then
79744: LD_EXP 52
79748: NOT
79749: PUSH
79750: LD_EXP 50
79754: NOT
79755: OR
79756: IFFALSE 79760
// exit ;
79758: GO 79959
// for i = 1 to mc_bases do
79760: LD_ADDR_VAR 0 5
79764: PUSH
79765: DOUBLE
79766: LD_INT 1
79768: DEC
79769: ST_TO_ADDR
79770: LD_EXP 52
79774: PUSH
79775: FOR_TO
79776: IFFALSE 79957
// if building in mc_bases [ i ] then
79778: LD_VAR 0 1
79782: PUSH
79783: LD_EXP 52
79787: PUSH
79788: LD_VAR 0 5
79792: ARRAY
79793: IN
79794: IFFALSE 79955
// begin tmp := mc_bases [ i ] diff building ;
79796: LD_ADDR_VAR 0 6
79800: PUSH
79801: LD_EXP 52
79805: PUSH
79806: LD_VAR 0 5
79810: ARRAY
79811: PUSH
79812: LD_VAR 0 1
79816: DIFF
79817: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
79818: LD_ADDR_EXP 52
79822: PUSH
79823: LD_EXP 52
79827: PPUSH
79828: LD_VAR 0 5
79832: PPUSH
79833: LD_VAR 0 6
79837: PPUSH
79838: CALL_OW 1
79842: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
79843: LD_VAR 0 1
79847: PUSH
79848: LD_EXP 60
79852: PUSH
79853: LD_VAR 0 5
79857: ARRAY
79858: IN
79859: IFFALSE 79898
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
79861: LD_ADDR_EXP 60
79865: PUSH
79866: LD_EXP 60
79870: PPUSH
79871: LD_VAR 0 5
79875: PPUSH
79876: LD_EXP 60
79880: PUSH
79881: LD_VAR 0 5
79885: ARRAY
79886: PUSH
79887: LD_VAR 0 1
79891: DIFF
79892: PPUSH
79893: CALL_OW 1
79897: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
79898: LD_VAR 0 1
79902: PUSH
79903: LD_EXP 61
79907: PUSH
79908: LD_VAR 0 5
79912: ARRAY
79913: IN
79914: IFFALSE 79953
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
79916: LD_ADDR_EXP 61
79920: PUSH
79921: LD_EXP 61
79925: PPUSH
79926: LD_VAR 0 5
79930: PPUSH
79931: LD_EXP 61
79935: PUSH
79936: LD_VAR 0 5
79940: ARRAY
79941: PUSH
79942: LD_VAR 0 1
79946: DIFF
79947: PPUSH
79948: CALL_OW 1
79952: ST_TO_ADDR
// break ;
79953: GO 79957
// end ;
79955: GO 79775
79957: POP
79958: POP
// end ;
79959: LD_VAR 0 4
79963: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
79964: LD_INT 0
79966: PPUSH
79967: PPUSH
79968: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
79969: LD_EXP 52
79973: NOT
79974: PUSH
79975: LD_EXP 50
79979: NOT
79980: OR
79981: PUSH
79982: LD_VAR 0 3
79986: PUSH
79987: LD_EXP 78
79991: IN
79992: NOT
79993: OR
79994: IFFALSE 79998
// exit ;
79996: GO 80121
// for i = 1 to mc_vehicles do
79998: LD_ADDR_VAR 0 6
80002: PUSH
80003: DOUBLE
80004: LD_INT 1
80006: DEC
80007: ST_TO_ADDR
80008: LD_EXP 71
80012: PUSH
80013: FOR_TO
80014: IFFALSE 80119
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
80016: LD_VAR 0 2
80020: PUSH
80021: LD_EXP 71
80025: PUSH
80026: LD_VAR 0 6
80030: ARRAY
80031: IN
80032: PUSH
80033: LD_VAR 0 1
80037: PUSH
80038: LD_EXP 71
80042: PUSH
80043: LD_VAR 0 6
80047: ARRAY
80048: IN
80049: OR
80050: IFFALSE 80117
// begin tmp := mc_vehicles [ i ] diff old ;
80052: LD_ADDR_VAR 0 7
80056: PUSH
80057: LD_EXP 71
80061: PUSH
80062: LD_VAR 0 6
80066: ARRAY
80067: PUSH
80068: LD_VAR 0 2
80072: DIFF
80073: ST_TO_ADDR
// tmp := tmp diff new ;
80074: LD_ADDR_VAR 0 7
80078: PUSH
80079: LD_VAR 0 7
80083: PUSH
80084: LD_VAR 0 1
80088: DIFF
80089: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
80090: LD_ADDR_EXP 71
80094: PUSH
80095: LD_EXP 71
80099: PPUSH
80100: LD_VAR 0 6
80104: PPUSH
80105: LD_VAR 0 7
80109: PPUSH
80110: CALL_OW 1
80114: ST_TO_ADDR
// break ;
80115: GO 80119
// end ;
80117: GO 80013
80119: POP
80120: POP
// end ;
80121: LD_VAR 0 5
80125: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
80126: LD_INT 0
80128: PPUSH
80129: PPUSH
80130: PPUSH
80131: PPUSH
// if not mc_bases or not skirmish then
80132: LD_EXP 52
80136: NOT
80137: PUSH
80138: LD_EXP 50
80142: NOT
80143: OR
80144: IFFALSE 80148
// exit ;
80146: GO 80525
// side := GetSide ( vehicle ) ;
80148: LD_ADDR_VAR 0 5
80152: PUSH
80153: LD_VAR 0 1
80157: PPUSH
80158: CALL_OW 255
80162: ST_TO_ADDR
// for i = 1 to mc_bases do
80163: LD_ADDR_VAR 0 4
80167: PUSH
80168: DOUBLE
80169: LD_INT 1
80171: DEC
80172: ST_TO_ADDR
80173: LD_EXP 52
80177: PUSH
80178: FOR_TO
80179: IFFALSE 80523
// begin if factory in mc_bases [ i ] then
80181: LD_VAR 0 2
80185: PUSH
80186: LD_EXP 52
80190: PUSH
80191: LD_VAR 0 4
80195: ARRAY
80196: IN
80197: IFFALSE 80521
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
80199: LD_EXP 74
80203: PUSH
80204: LD_VAR 0 4
80208: ARRAY
80209: PUSH
80210: LD_EXP 63
80214: PUSH
80215: LD_VAR 0 4
80219: ARRAY
80220: LESS
80221: PUSH
80222: LD_VAR 0 1
80226: PPUSH
80227: CALL_OW 264
80231: PUSH
80232: LD_INT 31
80234: PUSH
80235: LD_INT 32
80237: PUSH
80238: LD_INT 51
80240: PUSH
80241: LD_EXP 46
80245: PUSH
80246: LD_INT 12
80248: PUSH
80249: LD_INT 30
80251: PUSH
80252: LD_EXP 45
80256: PUSH
80257: LD_INT 11
80259: PUSH
80260: LD_INT 53
80262: PUSH
80263: LD_INT 14
80265: PUSH
80266: LD_EXP 49
80270: PUSH
80271: LD_INT 29
80273: PUSH
80274: LD_EXP 47
80278: PUSH
80279: LD_INT 13
80281: PUSH
80282: LD_INT 52
80284: PUSH
80285: LD_INT 48
80287: PUSH
80288: LD_INT 8
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: LIST
80295: LIST
80296: LIST
80297: LIST
80298: LIST
80299: LIST
80300: LIST
80301: LIST
80302: LIST
80303: LIST
80304: LIST
80305: LIST
80306: LIST
80307: LIST
80308: LIST
80309: IN
80310: NOT
80311: AND
80312: IFFALSE 80360
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
80314: LD_ADDR_EXP 74
80318: PUSH
80319: LD_EXP 74
80323: PPUSH
80324: LD_VAR 0 4
80328: PUSH
80329: LD_EXP 74
80333: PUSH
80334: LD_VAR 0 4
80338: ARRAY
80339: PUSH
80340: LD_INT 1
80342: PLUS
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PPUSH
80348: LD_VAR 0 1
80352: PPUSH
80353: CALL 18270 0 3
80357: ST_TO_ADDR
80358: GO 80404
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
80360: LD_ADDR_EXP 71
80364: PUSH
80365: LD_EXP 71
80369: PPUSH
80370: LD_VAR 0 4
80374: PUSH
80375: LD_EXP 71
80379: PUSH
80380: LD_VAR 0 4
80384: ARRAY
80385: PUSH
80386: LD_INT 1
80388: PLUS
80389: PUSH
80390: EMPTY
80391: LIST
80392: LIST
80393: PPUSH
80394: LD_VAR 0 1
80398: PPUSH
80399: CALL 18270 0 3
80403: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
80404: LD_VAR 0 1
80408: PPUSH
80409: CALL_OW 263
80413: PUSH
80414: LD_INT 2
80416: EQUAL
80417: IFFALSE 80437
// begin repeat wait ( 0 0$1 ) ;
80419: LD_INT 35
80421: PPUSH
80422: CALL_OW 67
// until IsControledBy ( vehicle ) ;
80426: LD_VAR 0 1
80430: PPUSH
80431: CALL_OW 312
80435: IFFALSE 80419
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
80437: LD_VAR 0 1
80441: PPUSH
80442: LD_EXP 76
80446: PUSH
80447: LD_VAR 0 4
80451: ARRAY
80452: PPUSH
80453: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
80457: LD_VAR 0 1
80461: PPUSH
80462: CALL_OW 263
80466: PUSH
80467: LD_INT 1
80469: NONEQUAL
80470: IFFALSE 80474
// break ;
80472: GO 80523
// repeat wait ( 0 0$1 ) ;
80474: LD_INT 35
80476: PPUSH
80477: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
80481: LD_VAR 0 1
80485: PPUSH
80486: LD_EXP 76
80490: PUSH
80491: LD_VAR 0 4
80495: ARRAY
80496: PPUSH
80497: CALL_OW 308
80501: IFFALSE 80474
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
80503: LD_VAR 0 1
80507: PPUSH
80508: CALL_OW 311
80512: PPUSH
80513: CALL_OW 121
// exit ;
80517: POP
80518: POP
80519: GO 80525
// end ; end ;
80521: GO 80178
80523: POP
80524: POP
// end ;
80525: LD_VAR 0 3
80529: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
80530: LD_INT 0
80532: PPUSH
80533: PPUSH
80534: PPUSH
80535: PPUSH
// if not mc_bases or not skirmish then
80536: LD_EXP 52
80540: NOT
80541: PUSH
80542: LD_EXP 50
80546: NOT
80547: OR
80548: IFFALSE 80552
// exit ;
80550: GO 80905
// repeat wait ( 0 0$1 ) ;
80552: LD_INT 35
80554: PPUSH
80555: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
80559: LD_VAR 0 2
80563: PPUSH
80564: LD_VAR 0 3
80568: PPUSH
80569: CALL_OW 284
80573: IFFALSE 80552
// if GetResourceTypeXY ( x , y ) = mat_artefact then
80575: LD_VAR 0 2
80579: PPUSH
80580: LD_VAR 0 3
80584: PPUSH
80585: CALL_OW 283
80589: PUSH
80590: LD_INT 4
80592: EQUAL
80593: IFFALSE 80597
// exit ;
80595: GO 80905
// for i = 1 to mc_bases do
80597: LD_ADDR_VAR 0 7
80601: PUSH
80602: DOUBLE
80603: LD_INT 1
80605: DEC
80606: ST_TO_ADDR
80607: LD_EXP 52
80611: PUSH
80612: FOR_TO
80613: IFFALSE 80903
// begin if mc_crates_area [ i ] then
80615: LD_EXP 70
80619: PUSH
80620: LD_VAR 0 7
80624: ARRAY
80625: IFFALSE 80736
// for j in mc_crates_area [ i ] do
80627: LD_ADDR_VAR 0 8
80631: PUSH
80632: LD_EXP 70
80636: PUSH
80637: LD_VAR 0 7
80641: ARRAY
80642: PUSH
80643: FOR_IN
80644: IFFALSE 80734
// if InArea ( x , y , j ) then
80646: LD_VAR 0 2
80650: PPUSH
80651: LD_VAR 0 3
80655: PPUSH
80656: LD_VAR 0 8
80660: PPUSH
80661: CALL_OW 309
80665: IFFALSE 80732
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80667: LD_ADDR_EXP 68
80671: PUSH
80672: LD_EXP 68
80676: PPUSH
80677: LD_VAR 0 7
80681: PUSH
80682: LD_EXP 68
80686: PUSH
80687: LD_VAR 0 7
80691: ARRAY
80692: PUSH
80693: LD_INT 1
80695: PLUS
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: PPUSH
80701: LD_VAR 0 4
80705: PUSH
80706: LD_VAR 0 2
80710: PUSH
80711: LD_VAR 0 3
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: LIST
80720: PPUSH
80721: CALL 18270 0 3
80725: ST_TO_ADDR
// exit ;
80726: POP
80727: POP
80728: POP
80729: POP
80730: GO 80905
// end ;
80732: GO 80643
80734: POP
80735: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80736: LD_ADDR_VAR 0 9
80740: PUSH
80741: LD_EXP 52
80745: PUSH
80746: LD_VAR 0 7
80750: ARRAY
80751: PPUSH
80752: LD_INT 2
80754: PUSH
80755: LD_INT 30
80757: PUSH
80758: LD_INT 0
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: PUSH
80765: LD_INT 30
80767: PUSH
80768: LD_INT 1
80770: PUSH
80771: EMPTY
80772: LIST
80773: LIST
80774: PUSH
80775: EMPTY
80776: LIST
80777: LIST
80778: LIST
80779: PPUSH
80780: CALL_OW 72
80784: ST_TO_ADDR
// if not depot then
80785: LD_VAR 0 9
80789: NOT
80790: IFFALSE 80794
// continue ;
80792: GO 80612
// for j in depot do
80794: LD_ADDR_VAR 0 8
80798: PUSH
80799: LD_VAR 0 9
80803: PUSH
80804: FOR_IN
80805: IFFALSE 80899
// if GetDistUnitXY ( j , x , y ) < 30 then
80807: LD_VAR 0 8
80811: PPUSH
80812: LD_VAR 0 2
80816: PPUSH
80817: LD_VAR 0 3
80821: PPUSH
80822: CALL_OW 297
80826: PUSH
80827: LD_INT 30
80829: LESS
80830: IFFALSE 80897
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80832: LD_ADDR_EXP 68
80836: PUSH
80837: LD_EXP 68
80841: PPUSH
80842: LD_VAR 0 7
80846: PUSH
80847: LD_EXP 68
80851: PUSH
80852: LD_VAR 0 7
80856: ARRAY
80857: PUSH
80858: LD_INT 1
80860: PLUS
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: PPUSH
80866: LD_VAR 0 4
80870: PUSH
80871: LD_VAR 0 2
80875: PUSH
80876: LD_VAR 0 3
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: LIST
80885: PPUSH
80886: CALL 18270 0 3
80890: ST_TO_ADDR
// exit ;
80891: POP
80892: POP
80893: POP
80894: POP
80895: GO 80905
// end ;
80897: GO 80804
80899: POP
80900: POP
// end ;
80901: GO 80612
80903: POP
80904: POP
// end ;
80905: LD_VAR 0 6
80909: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
80910: LD_INT 0
80912: PPUSH
80913: PPUSH
80914: PPUSH
80915: PPUSH
// if not mc_bases or not skirmish then
80916: LD_EXP 52
80920: NOT
80921: PUSH
80922: LD_EXP 50
80926: NOT
80927: OR
80928: IFFALSE 80932
// exit ;
80930: GO 81209
// side := GetSide ( lab ) ;
80932: LD_ADDR_VAR 0 4
80936: PUSH
80937: LD_VAR 0 2
80941: PPUSH
80942: CALL_OW 255
80946: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
80947: LD_VAR 0 4
80951: PUSH
80952: LD_EXP 78
80956: IN
80957: NOT
80958: PUSH
80959: LD_EXP 79
80963: NOT
80964: OR
80965: PUSH
80966: LD_EXP 52
80970: NOT
80971: OR
80972: IFFALSE 80976
// exit ;
80974: GO 81209
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
80976: LD_ADDR_EXP 79
80980: PUSH
80981: LD_EXP 79
80985: PPUSH
80986: LD_VAR 0 4
80990: PPUSH
80991: LD_EXP 79
80995: PUSH
80996: LD_VAR 0 4
81000: ARRAY
81001: PUSH
81002: LD_VAR 0 1
81006: DIFF
81007: PPUSH
81008: CALL_OW 1
81012: ST_TO_ADDR
// for i = 1 to mc_bases do
81013: LD_ADDR_VAR 0 5
81017: PUSH
81018: DOUBLE
81019: LD_INT 1
81021: DEC
81022: ST_TO_ADDR
81023: LD_EXP 52
81027: PUSH
81028: FOR_TO
81029: IFFALSE 81207
// begin if lab in mc_bases [ i ] then
81031: LD_VAR 0 2
81035: PUSH
81036: LD_EXP 52
81040: PUSH
81041: LD_VAR 0 5
81045: ARRAY
81046: IN
81047: IFFALSE 81205
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
81049: LD_VAR 0 1
81053: PUSH
81054: LD_INT 11
81056: PUSH
81057: LD_INT 4
81059: PUSH
81060: LD_INT 3
81062: PUSH
81063: LD_INT 2
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: LIST
81070: LIST
81071: IN
81072: PUSH
81073: LD_EXP 82
81077: PUSH
81078: LD_VAR 0 5
81082: ARRAY
81083: AND
81084: IFFALSE 81205
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
81086: LD_ADDR_VAR 0 6
81090: PUSH
81091: LD_EXP 82
81095: PUSH
81096: LD_VAR 0 5
81100: ARRAY
81101: PUSH
81102: LD_INT 1
81104: ARRAY
81105: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81106: LD_ADDR_EXP 82
81110: PUSH
81111: LD_EXP 82
81115: PPUSH
81116: LD_VAR 0 5
81120: PPUSH
81121: EMPTY
81122: PPUSH
81123: CALL_OW 1
81127: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
81128: LD_VAR 0 6
81132: PPUSH
81133: LD_INT 0
81135: PPUSH
81136: CALL_OW 109
// ComExitBuilding ( tmp ) ;
81140: LD_VAR 0 6
81144: PPUSH
81145: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
81149: LD_ADDR_EXP 81
81153: PUSH
81154: LD_EXP 81
81158: PPUSH
81159: LD_VAR 0 5
81163: PPUSH
81164: LD_EXP 81
81168: PUSH
81169: LD_VAR 0 5
81173: ARRAY
81174: PPUSH
81175: LD_INT 1
81177: PPUSH
81178: LD_VAR 0 6
81182: PPUSH
81183: CALL_OW 2
81187: PPUSH
81188: CALL_OW 1
81192: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
81193: LD_VAR 0 5
81197: PPUSH
81198: LD_INT 112
81200: PPUSH
81201: CALL 58317 0 2
// end ; end ; end ;
81205: GO 81028
81207: POP
81208: POP
// end ;
81209: LD_VAR 0 3
81213: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
81214: LD_INT 0
81216: PPUSH
81217: PPUSH
81218: PPUSH
81219: PPUSH
81220: PPUSH
81221: PPUSH
81222: PPUSH
81223: PPUSH
// if not mc_bases or not skirmish then
81224: LD_EXP 52
81228: NOT
81229: PUSH
81230: LD_EXP 50
81234: NOT
81235: OR
81236: IFFALSE 81240
// exit ;
81238: GO 82477
// for i = 1 to mc_bases do
81240: LD_ADDR_VAR 0 3
81244: PUSH
81245: DOUBLE
81246: LD_INT 1
81248: DEC
81249: ST_TO_ADDR
81250: LD_EXP 52
81254: PUSH
81255: FOR_TO
81256: IFFALSE 82475
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
81258: LD_VAR 0 1
81262: PUSH
81263: LD_EXP 52
81267: PUSH
81268: LD_VAR 0 3
81272: ARRAY
81273: IN
81274: PUSH
81275: LD_VAR 0 1
81279: PUSH
81280: LD_EXP 59
81284: PUSH
81285: LD_VAR 0 3
81289: ARRAY
81290: IN
81291: OR
81292: PUSH
81293: LD_VAR 0 1
81297: PUSH
81298: LD_EXP 74
81302: PUSH
81303: LD_VAR 0 3
81307: ARRAY
81308: IN
81309: OR
81310: PUSH
81311: LD_VAR 0 1
81315: PUSH
81316: LD_EXP 71
81320: PUSH
81321: LD_VAR 0 3
81325: ARRAY
81326: IN
81327: OR
81328: PUSH
81329: LD_VAR 0 1
81333: PUSH
81334: LD_EXP 81
81338: PUSH
81339: LD_VAR 0 3
81343: ARRAY
81344: IN
81345: OR
81346: PUSH
81347: LD_VAR 0 1
81351: PUSH
81352: LD_EXP 82
81356: PUSH
81357: LD_VAR 0 3
81361: ARRAY
81362: IN
81363: OR
81364: IFFALSE 82473
// begin if un in mc_ape [ i ] then
81366: LD_VAR 0 1
81370: PUSH
81371: LD_EXP 81
81375: PUSH
81376: LD_VAR 0 3
81380: ARRAY
81381: IN
81382: IFFALSE 81421
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
81384: LD_ADDR_EXP 81
81388: PUSH
81389: LD_EXP 81
81393: PPUSH
81394: LD_VAR 0 3
81398: PPUSH
81399: LD_EXP 81
81403: PUSH
81404: LD_VAR 0 3
81408: ARRAY
81409: PUSH
81410: LD_VAR 0 1
81414: DIFF
81415: PPUSH
81416: CALL_OW 1
81420: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
81421: LD_VAR 0 1
81425: PUSH
81426: LD_EXP 82
81430: PUSH
81431: LD_VAR 0 3
81435: ARRAY
81436: IN
81437: IFFALSE 81461
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81439: LD_ADDR_EXP 82
81443: PUSH
81444: LD_EXP 82
81448: PPUSH
81449: LD_VAR 0 3
81453: PPUSH
81454: EMPTY
81455: PPUSH
81456: CALL_OW 1
81460: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
81461: LD_VAR 0 1
81465: PPUSH
81466: CALL_OW 247
81470: PUSH
81471: LD_INT 2
81473: EQUAL
81474: PUSH
81475: LD_VAR 0 1
81479: PPUSH
81480: CALL_OW 110
81484: PUSH
81485: LD_INT 20
81487: EQUAL
81488: PUSH
81489: LD_VAR 0 1
81493: PUSH
81494: LD_EXP 74
81498: PUSH
81499: LD_VAR 0 3
81503: ARRAY
81504: IN
81505: OR
81506: PUSH
81507: LD_VAR 0 1
81511: PPUSH
81512: CALL_OW 264
81516: PUSH
81517: LD_INT 12
81519: PUSH
81520: LD_INT 51
81522: PUSH
81523: LD_EXP 46
81527: PUSH
81528: LD_INT 32
81530: PUSH
81531: LD_INT 13
81533: PUSH
81534: LD_INT 52
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: LIST
81541: LIST
81542: LIST
81543: LIST
81544: IN
81545: OR
81546: AND
81547: IFFALSE 81725
// begin if un in mc_defender [ i ] then
81549: LD_VAR 0 1
81553: PUSH
81554: LD_EXP 74
81558: PUSH
81559: LD_VAR 0 3
81563: ARRAY
81564: IN
81565: IFFALSE 81604
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81567: LD_ADDR_EXP 74
81571: PUSH
81572: LD_EXP 74
81576: PPUSH
81577: LD_VAR 0 3
81581: PPUSH
81582: LD_EXP 74
81586: PUSH
81587: LD_VAR 0 3
81591: ARRAY
81592: PUSH
81593: LD_VAR 0 1
81597: DIFF
81598: PPUSH
81599: CALL_OW 1
81603: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
81604: LD_ADDR_VAR 0 8
81608: PUSH
81609: LD_VAR 0 3
81613: PPUSH
81614: LD_INT 3
81616: PPUSH
81617: CALL 78277 0 2
81621: ST_TO_ADDR
// if fac then
81622: LD_VAR 0 8
81626: IFFALSE 81725
// begin for j in fac do
81628: LD_ADDR_VAR 0 4
81632: PUSH
81633: LD_VAR 0 8
81637: PUSH
81638: FOR_IN
81639: IFFALSE 81723
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
81641: LD_ADDR_VAR 0 9
81645: PUSH
81646: LD_VAR 0 8
81650: PPUSH
81651: LD_VAR 0 1
81655: PPUSH
81656: CALL_OW 265
81660: PPUSH
81661: LD_VAR 0 1
81665: PPUSH
81666: CALL_OW 262
81670: PPUSH
81671: LD_VAR 0 1
81675: PPUSH
81676: CALL_OW 263
81680: PPUSH
81681: LD_VAR 0 1
81685: PPUSH
81686: CALL_OW 264
81690: PPUSH
81691: CALL 15802 0 5
81695: ST_TO_ADDR
// if components then
81696: LD_VAR 0 9
81700: IFFALSE 81721
// begin MC_InsertProduceList ( i , [ components ] ) ;
81702: LD_VAR 0 3
81706: PPUSH
81707: LD_VAR 0 9
81711: PUSH
81712: EMPTY
81713: LIST
81714: PPUSH
81715: CALL 77822 0 2
// break ;
81719: GO 81723
// end ; end ;
81721: GO 81638
81723: POP
81724: POP
// end ; end ; if GetType ( un ) = unit_building then
81725: LD_VAR 0 1
81729: PPUSH
81730: CALL_OW 247
81734: PUSH
81735: LD_INT 3
81737: EQUAL
81738: IFFALSE 82141
// begin btype := GetBType ( un ) ;
81740: LD_ADDR_VAR 0 5
81744: PUSH
81745: LD_VAR 0 1
81749: PPUSH
81750: CALL_OW 266
81754: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
81755: LD_VAR 0 5
81759: PUSH
81760: LD_INT 29
81762: PUSH
81763: LD_INT 30
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: IN
81770: IFFALSE 81843
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
81772: LD_VAR 0 1
81776: PPUSH
81777: CALL_OW 250
81781: PPUSH
81782: LD_VAR 0 1
81786: PPUSH
81787: CALL_OW 251
81791: PPUSH
81792: LD_VAR 0 1
81796: PPUSH
81797: CALL_OW 255
81801: PPUSH
81802: CALL_OW 440
81806: NOT
81807: IFFALSE 81843
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
81809: LD_VAR 0 1
81813: PPUSH
81814: CALL_OW 250
81818: PPUSH
81819: LD_VAR 0 1
81823: PPUSH
81824: CALL_OW 251
81828: PPUSH
81829: LD_VAR 0 1
81833: PPUSH
81834: CALL_OW 255
81838: PPUSH
81839: CALL_OW 441
// end ; if btype = b_warehouse then
81843: LD_VAR 0 5
81847: PUSH
81848: LD_INT 1
81850: EQUAL
81851: IFFALSE 81869
// begin btype := b_depot ;
81853: LD_ADDR_VAR 0 5
81857: PUSH
81858: LD_INT 0
81860: ST_TO_ADDR
// pos := 1 ;
81861: LD_ADDR_VAR 0 6
81865: PUSH
81866: LD_INT 1
81868: ST_TO_ADDR
// end ; if btype = b_factory then
81869: LD_VAR 0 5
81873: PUSH
81874: LD_INT 3
81876: EQUAL
81877: IFFALSE 81895
// begin btype := b_workshop ;
81879: LD_ADDR_VAR 0 5
81883: PUSH
81884: LD_INT 2
81886: ST_TO_ADDR
// pos := 1 ;
81887: LD_ADDR_VAR 0 6
81891: PUSH
81892: LD_INT 1
81894: ST_TO_ADDR
// end ; if btype = b_barracks then
81895: LD_VAR 0 5
81899: PUSH
81900: LD_INT 5
81902: EQUAL
81903: IFFALSE 81913
// btype := b_armoury ;
81905: LD_ADDR_VAR 0 5
81909: PUSH
81910: LD_INT 4
81912: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
81913: LD_VAR 0 5
81917: PUSH
81918: LD_INT 7
81920: PUSH
81921: LD_INT 8
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: IN
81928: IFFALSE 81938
// btype := b_lab ;
81930: LD_ADDR_VAR 0 5
81934: PUSH
81935: LD_INT 6
81937: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
81938: LD_ADDR_EXP 57
81942: PUSH
81943: LD_EXP 57
81947: PPUSH
81948: LD_VAR 0 3
81952: PUSH
81953: LD_EXP 57
81957: PUSH
81958: LD_VAR 0 3
81962: ARRAY
81963: PUSH
81964: LD_INT 1
81966: PLUS
81967: PUSH
81968: EMPTY
81969: LIST
81970: LIST
81971: PPUSH
81972: LD_VAR 0 5
81976: PUSH
81977: LD_VAR 0 1
81981: PPUSH
81982: CALL_OW 250
81986: PUSH
81987: LD_VAR 0 1
81991: PPUSH
81992: CALL_OW 251
81996: PUSH
81997: LD_VAR 0 1
82001: PPUSH
82002: CALL_OW 254
82006: PUSH
82007: EMPTY
82008: LIST
82009: LIST
82010: LIST
82011: LIST
82012: PPUSH
82013: CALL 18270 0 3
82017: ST_TO_ADDR
// if pos = 1 then
82018: LD_VAR 0 6
82022: PUSH
82023: LD_INT 1
82025: EQUAL
82026: IFFALSE 82141
// begin tmp := mc_build_list [ i ] ;
82028: LD_ADDR_VAR 0 7
82032: PUSH
82033: LD_EXP 57
82037: PUSH
82038: LD_VAR 0 3
82042: ARRAY
82043: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82044: LD_VAR 0 7
82048: PPUSH
82049: LD_INT 2
82051: PUSH
82052: LD_INT 30
82054: PUSH
82055: LD_INT 0
82057: PUSH
82058: EMPTY
82059: LIST
82060: LIST
82061: PUSH
82062: LD_INT 30
82064: PUSH
82065: LD_INT 1
82067: PUSH
82068: EMPTY
82069: LIST
82070: LIST
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: LIST
82076: PPUSH
82077: CALL_OW 72
82081: IFFALSE 82091
// pos := 2 ;
82083: LD_ADDR_VAR 0 6
82087: PUSH
82088: LD_INT 2
82090: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
82091: LD_ADDR_VAR 0 7
82095: PUSH
82096: LD_VAR 0 7
82100: PPUSH
82101: LD_VAR 0 6
82105: PPUSH
82106: LD_VAR 0 7
82110: PPUSH
82111: CALL 18596 0 3
82115: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
82116: LD_ADDR_EXP 57
82120: PUSH
82121: LD_EXP 57
82125: PPUSH
82126: LD_VAR 0 3
82130: PPUSH
82131: LD_VAR 0 7
82135: PPUSH
82136: CALL_OW 1
82140: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
82141: LD_VAR 0 1
82145: PUSH
82146: LD_EXP 52
82150: PUSH
82151: LD_VAR 0 3
82155: ARRAY
82156: IN
82157: IFFALSE 82196
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
82159: LD_ADDR_EXP 52
82163: PUSH
82164: LD_EXP 52
82168: PPUSH
82169: LD_VAR 0 3
82173: PPUSH
82174: LD_EXP 52
82178: PUSH
82179: LD_VAR 0 3
82183: ARRAY
82184: PUSH
82185: LD_VAR 0 1
82189: DIFF
82190: PPUSH
82191: CALL_OW 1
82195: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
82196: LD_VAR 0 1
82200: PUSH
82201: LD_EXP 59
82205: PUSH
82206: LD_VAR 0 3
82210: ARRAY
82211: IN
82212: IFFALSE 82251
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
82214: LD_ADDR_EXP 59
82218: PUSH
82219: LD_EXP 59
82223: PPUSH
82224: LD_VAR 0 3
82228: PPUSH
82229: LD_EXP 59
82233: PUSH
82234: LD_VAR 0 3
82238: ARRAY
82239: PUSH
82240: LD_VAR 0 1
82244: DIFF
82245: PPUSH
82246: CALL_OW 1
82250: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
82251: LD_VAR 0 1
82255: PUSH
82256: LD_EXP 71
82260: PUSH
82261: LD_VAR 0 3
82265: ARRAY
82266: IN
82267: IFFALSE 82306
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
82269: LD_ADDR_EXP 71
82273: PUSH
82274: LD_EXP 71
82278: PPUSH
82279: LD_VAR 0 3
82283: PPUSH
82284: LD_EXP 71
82288: PUSH
82289: LD_VAR 0 3
82293: ARRAY
82294: PUSH
82295: LD_VAR 0 1
82299: DIFF
82300: PPUSH
82301: CALL_OW 1
82305: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
82306: LD_VAR 0 1
82310: PUSH
82311: LD_EXP 74
82315: PUSH
82316: LD_VAR 0 3
82320: ARRAY
82321: IN
82322: IFFALSE 82361
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
82324: LD_ADDR_EXP 74
82328: PUSH
82329: LD_EXP 74
82333: PPUSH
82334: LD_VAR 0 3
82338: PPUSH
82339: LD_EXP 74
82343: PUSH
82344: LD_VAR 0 3
82348: ARRAY
82349: PUSH
82350: LD_VAR 0 1
82354: DIFF
82355: PPUSH
82356: CALL_OW 1
82360: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
82361: LD_VAR 0 1
82365: PUSH
82366: LD_EXP 61
82370: PUSH
82371: LD_VAR 0 3
82375: ARRAY
82376: IN
82377: IFFALSE 82416
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
82379: LD_ADDR_EXP 61
82383: PUSH
82384: LD_EXP 61
82388: PPUSH
82389: LD_VAR 0 3
82393: PPUSH
82394: LD_EXP 61
82398: PUSH
82399: LD_VAR 0 3
82403: ARRAY
82404: PUSH
82405: LD_VAR 0 1
82409: DIFF
82410: PPUSH
82411: CALL_OW 1
82415: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
82416: LD_VAR 0 1
82420: PUSH
82421: LD_EXP 60
82425: PUSH
82426: LD_VAR 0 3
82430: ARRAY
82431: IN
82432: IFFALSE 82471
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
82434: LD_ADDR_EXP 60
82438: PUSH
82439: LD_EXP 60
82443: PPUSH
82444: LD_VAR 0 3
82448: PPUSH
82449: LD_EXP 60
82453: PUSH
82454: LD_VAR 0 3
82458: ARRAY
82459: PUSH
82460: LD_VAR 0 1
82464: DIFF
82465: PPUSH
82466: CALL_OW 1
82470: ST_TO_ADDR
// end ; break ;
82471: GO 82475
// end ;
82473: GO 81255
82475: POP
82476: POP
// end ;
82477: LD_VAR 0 2
82481: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
82482: LD_INT 0
82484: PPUSH
82485: PPUSH
82486: PPUSH
// if not mc_bases or not skirmish then
82487: LD_EXP 52
82491: NOT
82492: PUSH
82493: LD_EXP 50
82497: NOT
82498: OR
82499: IFFALSE 82503
// exit ;
82501: GO 82718
// for i = 1 to mc_bases do
82503: LD_ADDR_VAR 0 3
82507: PUSH
82508: DOUBLE
82509: LD_INT 1
82511: DEC
82512: ST_TO_ADDR
82513: LD_EXP 52
82517: PUSH
82518: FOR_TO
82519: IFFALSE 82716
// begin if building in mc_construct_list [ i ] then
82521: LD_VAR 0 1
82525: PUSH
82526: LD_EXP 59
82530: PUSH
82531: LD_VAR 0 3
82535: ARRAY
82536: IN
82537: IFFALSE 82714
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82539: LD_ADDR_EXP 59
82543: PUSH
82544: LD_EXP 59
82548: PPUSH
82549: LD_VAR 0 3
82553: PPUSH
82554: LD_EXP 59
82558: PUSH
82559: LD_VAR 0 3
82563: ARRAY
82564: PUSH
82565: LD_VAR 0 1
82569: DIFF
82570: PPUSH
82571: CALL_OW 1
82575: ST_TO_ADDR
// if building in mc_lab [ i ] then
82576: LD_VAR 0 1
82580: PUSH
82581: LD_EXP 85
82585: PUSH
82586: LD_VAR 0 3
82590: ARRAY
82591: IN
82592: IFFALSE 82647
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
82594: LD_ADDR_EXP 86
82598: PUSH
82599: LD_EXP 86
82603: PPUSH
82604: LD_VAR 0 3
82608: PPUSH
82609: LD_EXP 86
82613: PUSH
82614: LD_VAR 0 3
82618: ARRAY
82619: PPUSH
82620: LD_INT 1
82622: PPUSH
82623: LD_EXP 86
82627: PUSH
82628: LD_VAR 0 3
82632: ARRAY
82633: PPUSH
82634: LD_INT 0
82636: PPUSH
82637: CALL 17688 0 4
82641: PPUSH
82642: CALL_OW 1
82646: ST_TO_ADDR
// if not building in mc_bases [ i ] then
82647: LD_VAR 0 1
82651: PUSH
82652: LD_EXP 52
82656: PUSH
82657: LD_VAR 0 3
82661: ARRAY
82662: IN
82663: NOT
82664: IFFALSE 82710
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82666: LD_ADDR_EXP 52
82670: PUSH
82671: LD_EXP 52
82675: PPUSH
82676: LD_VAR 0 3
82680: PUSH
82681: LD_EXP 52
82685: PUSH
82686: LD_VAR 0 3
82690: ARRAY
82691: PUSH
82692: LD_INT 1
82694: PLUS
82695: PUSH
82696: EMPTY
82697: LIST
82698: LIST
82699: PPUSH
82700: LD_VAR 0 1
82704: PPUSH
82705: CALL 18270 0 3
82709: ST_TO_ADDR
// exit ;
82710: POP
82711: POP
82712: GO 82718
// end ; end ;
82714: GO 82518
82716: POP
82717: POP
// end ;
82718: LD_VAR 0 2
82722: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
82723: LD_INT 0
82725: PPUSH
82726: PPUSH
82727: PPUSH
82728: PPUSH
82729: PPUSH
82730: PPUSH
82731: PPUSH
// if not mc_bases or not skirmish then
82732: LD_EXP 52
82736: NOT
82737: PUSH
82738: LD_EXP 50
82742: NOT
82743: OR
82744: IFFALSE 82748
// exit ;
82746: GO 83409
// for i = 1 to mc_bases do
82748: LD_ADDR_VAR 0 3
82752: PUSH
82753: DOUBLE
82754: LD_INT 1
82756: DEC
82757: ST_TO_ADDR
82758: LD_EXP 52
82762: PUSH
82763: FOR_TO
82764: IFFALSE 83407
// begin if building in mc_construct_list [ i ] then
82766: LD_VAR 0 1
82770: PUSH
82771: LD_EXP 59
82775: PUSH
82776: LD_VAR 0 3
82780: ARRAY
82781: IN
82782: IFFALSE 83405
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82784: LD_ADDR_EXP 59
82788: PUSH
82789: LD_EXP 59
82793: PPUSH
82794: LD_VAR 0 3
82798: PPUSH
82799: LD_EXP 59
82803: PUSH
82804: LD_VAR 0 3
82808: ARRAY
82809: PUSH
82810: LD_VAR 0 1
82814: DIFF
82815: PPUSH
82816: CALL_OW 1
82820: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82821: LD_ADDR_EXP 52
82825: PUSH
82826: LD_EXP 52
82830: PPUSH
82831: LD_VAR 0 3
82835: PUSH
82836: LD_EXP 52
82840: PUSH
82841: LD_VAR 0 3
82845: ARRAY
82846: PUSH
82847: LD_INT 1
82849: PLUS
82850: PUSH
82851: EMPTY
82852: LIST
82853: LIST
82854: PPUSH
82855: LD_VAR 0 1
82859: PPUSH
82860: CALL 18270 0 3
82864: ST_TO_ADDR
// btype := GetBType ( building ) ;
82865: LD_ADDR_VAR 0 5
82869: PUSH
82870: LD_VAR 0 1
82874: PPUSH
82875: CALL_OW 266
82879: ST_TO_ADDR
// side := GetSide ( building ) ;
82880: LD_ADDR_VAR 0 8
82884: PUSH
82885: LD_VAR 0 1
82889: PPUSH
82890: CALL_OW 255
82894: ST_TO_ADDR
// if btype = b_lab then
82895: LD_VAR 0 5
82899: PUSH
82900: LD_INT 6
82902: EQUAL
82903: IFFALSE 82953
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
82905: LD_ADDR_EXP 85
82909: PUSH
82910: LD_EXP 85
82914: PPUSH
82915: LD_VAR 0 3
82919: PUSH
82920: LD_EXP 85
82924: PUSH
82925: LD_VAR 0 3
82929: ARRAY
82930: PUSH
82931: LD_INT 1
82933: PLUS
82934: PUSH
82935: EMPTY
82936: LIST
82937: LIST
82938: PPUSH
82939: LD_VAR 0 1
82943: PPUSH
82944: CALL 18270 0 3
82948: ST_TO_ADDR
// exit ;
82949: POP
82950: POP
82951: GO 83409
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
82953: LD_VAR 0 5
82957: PUSH
82958: LD_INT 0
82960: PUSH
82961: LD_INT 2
82963: PUSH
82964: LD_INT 4
82966: PUSH
82967: EMPTY
82968: LIST
82969: LIST
82970: LIST
82971: IN
82972: IFFALSE 83096
// begin if btype = b_armoury then
82974: LD_VAR 0 5
82978: PUSH
82979: LD_INT 4
82981: EQUAL
82982: IFFALSE 82992
// btype := b_barracks ;
82984: LD_ADDR_VAR 0 5
82988: PUSH
82989: LD_INT 5
82991: ST_TO_ADDR
// if btype = b_depot then
82992: LD_VAR 0 5
82996: PUSH
82997: LD_INT 0
82999: EQUAL
83000: IFFALSE 83010
// btype := b_warehouse ;
83002: LD_ADDR_VAR 0 5
83006: PUSH
83007: LD_INT 1
83009: ST_TO_ADDR
// if btype = b_workshop then
83010: LD_VAR 0 5
83014: PUSH
83015: LD_INT 2
83017: EQUAL
83018: IFFALSE 83028
// btype := b_factory ;
83020: LD_ADDR_VAR 0 5
83024: PUSH
83025: LD_INT 3
83027: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
83028: LD_VAR 0 5
83032: PPUSH
83033: LD_VAR 0 8
83037: PPUSH
83038: CALL_OW 323
83042: PUSH
83043: LD_INT 1
83045: EQUAL
83046: IFFALSE 83092
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
83048: LD_ADDR_EXP 84
83052: PUSH
83053: LD_EXP 84
83057: PPUSH
83058: LD_VAR 0 3
83062: PUSH
83063: LD_EXP 84
83067: PUSH
83068: LD_VAR 0 3
83072: ARRAY
83073: PUSH
83074: LD_INT 1
83076: PLUS
83077: PUSH
83078: EMPTY
83079: LIST
83080: LIST
83081: PPUSH
83082: LD_VAR 0 1
83086: PPUSH
83087: CALL 18270 0 3
83091: ST_TO_ADDR
// exit ;
83092: POP
83093: POP
83094: GO 83409
// end ; if btype in [ b_bunker , b_turret ] then
83096: LD_VAR 0 5
83100: PUSH
83101: LD_INT 32
83103: PUSH
83104: LD_INT 33
83106: PUSH
83107: EMPTY
83108: LIST
83109: LIST
83110: IN
83111: IFFALSE 83401
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
83113: LD_ADDR_EXP 60
83117: PUSH
83118: LD_EXP 60
83122: PPUSH
83123: LD_VAR 0 3
83127: PUSH
83128: LD_EXP 60
83132: PUSH
83133: LD_VAR 0 3
83137: ARRAY
83138: PUSH
83139: LD_INT 1
83141: PLUS
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: PPUSH
83147: LD_VAR 0 1
83151: PPUSH
83152: CALL 18270 0 3
83156: ST_TO_ADDR
// if btype = b_bunker then
83157: LD_VAR 0 5
83161: PUSH
83162: LD_INT 32
83164: EQUAL
83165: IFFALSE 83401
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83167: LD_ADDR_EXP 61
83171: PUSH
83172: LD_EXP 61
83176: PPUSH
83177: LD_VAR 0 3
83181: PUSH
83182: LD_EXP 61
83186: PUSH
83187: LD_VAR 0 3
83191: ARRAY
83192: PUSH
83193: LD_INT 1
83195: PLUS
83196: PUSH
83197: EMPTY
83198: LIST
83199: LIST
83200: PPUSH
83201: LD_VAR 0 1
83205: PPUSH
83206: CALL 18270 0 3
83210: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
83211: LD_ADDR_VAR 0 6
83215: PUSH
83216: LD_EXP 52
83220: PUSH
83221: LD_VAR 0 3
83225: ARRAY
83226: PPUSH
83227: LD_INT 25
83229: PUSH
83230: LD_INT 1
83232: PUSH
83233: EMPTY
83234: LIST
83235: LIST
83236: PUSH
83237: LD_INT 3
83239: PUSH
83240: LD_INT 54
83242: PUSH
83243: EMPTY
83244: LIST
83245: PUSH
83246: EMPTY
83247: LIST
83248: LIST
83249: PUSH
83250: EMPTY
83251: LIST
83252: LIST
83253: PPUSH
83254: CALL_OW 72
83258: ST_TO_ADDR
// if tmp then
83259: LD_VAR 0 6
83263: IFFALSE 83269
// exit ;
83265: POP
83266: POP
83267: GO 83409
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
83269: LD_ADDR_VAR 0 6
83273: PUSH
83274: LD_EXP 52
83278: PUSH
83279: LD_VAR 0 3
83283: ARRAY
83284: PPUSH
83285: LD_INT 2
83287: PUSH
83288: LD_INT 30
83290: PUSH
83291: LD_INT 4
83293: PUSH
83294: EMPTY
83295: LIST
83296: LIST
83297: PUSH
83298: LD_INT 30
83300: PUSH
83301: LD_INT 5
83303: PUSH
83304: EMPTY
83305: LIST
83306: LIST
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: LIST
83312: PPUSH
83313: CALL_OW 72
83317: ST_TO_ADDR
// if not tmp then
83318: LD_VAR 0 6
83322: NOT
83323: IFFALSE 83329
// exit ;
83325: POP
83326: POP
83327: GO 83409
// for j in tmp do
83329: LD_ADDR_VAR 0 4
83333: PUSH
83334: LD_VAR 0 6
83338: PUSH
83339: FOR_IN
83340: IFFALSE 83399
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
83342: LD_ADDR_VAR 0 7
83346: PUSH
83347: LD_VAR 0 4
83351: PPUSH
83352: CALL_OW 313
83356: PPUSH
83357: LD_INT 25
83359: PUSH
83360: LD_INT 1
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: PPUSH
83367: CALL_OW 72
83371: ST_TO_ADDR
// if units then
83372: LD_VAR 0 7
83376: IFFALSE 83397
// begin ComExitBuilding ( units [ 1 ] ) ;
83378: LD_VAR 0 7
83382: PUSH
83383: LD_INT 1
83385: ARRAY
83386: PPUSH
83387: CALL_OW 122
// exit ;
83391: POP
83392: POP
83393: POP
83394: POP
83395: GO 83409
// end ; end ;
83397: GO 83339
83399: POP
83400: POP
// end ; end ; exit ;
83401: POP
83402: POP
83403: GO 83409
// end ; end ;
83405: GO 82763
83407: POP
83408: POP
// end ;
83409: LD_VAR 0 2
83413: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
83414: LD_INT 0
83416: PPUSH
83417: PPUSH
83418: PPUSH
83419: PPUSH
83420: PPUSH
83421: PPUSH
83422: PPUSH
// if not mc_bases or not skirmish then
83423: LD_EXP 52
83427: NOT
83428: PUSH
83429: LD_EXP 50
83433: NOT
83434: OR
83435: IFFALSE 83439
// exit ;
83437: GO 83670
// btype := GetBType ( building ) ;
83439: LD_ADDR_VAR 0 6
83443: PUSH
83444: LD_VAR 0 1
83448: PPUSH
83449: CALL_OW 266
83453: ST_TO_ADDR
// x := GetX ( building ) ;
83454: LD_ADDR_VAR 0 7
83458: PUSH
83459: LD_VAR 0 1
83463: PPUSH
83464: CALL_OW 250
83468: ST_TO_ADDR
// y := GetY ( building ) ;
83469: LD_ADDR_VAR 0 8
83473: PUSH
83474: LD_VAR 0 1
83478: PPUSH
83479: CALL_OW 251
83483: ST_TO_ADDR
// d := GetDir ( building ) ;
83484: LD_ADDR_VAR 0 9
83488: PUSH
83489: LD_VAR 0 1
83493: PPUSH
83494: CALL_OW 254
83498: ST_TO_ADDR
// for i = 1 to mc_bases do
83499: LD_ADDR_VAR 0 4
83503: PUSH
83504: DOUBLE
83505: LD_INT 1
83507: DEC
83508: ST_TO_ADDR
83509: LD_EXP 52
83513: PUSH
83514: FOR_TO
83515: IFFALSE 83668
// begin if not mc_build_list [ i ] then
83517: LD_EXP 57
83521: PUSH
83522: LD_VAR 0 4
83526: ARRAY
83527: NOT
83528: IFFALSE 83532
// continue ;
83530: GO 83514
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
83532: LD_VAR 0 6
83536: PUSH
83537: LD_VAR 0 7
83541: PUSH
83542: LD_VAR 0 8
83546: PUSH
83547: LD_VAR 0 9
83551: PUSH
83552: EMPTY
83553: LIST
83554: LIST
83555: LIST
83556: LIST
83557: PPUSH
83558: LD_EXP 57
83562: PUSH
83563: LD_VAR 0 4
83567: ARRAY
83568: PUSH
83569: LD_INT 1
83571: ARRAY
83572: PPUSH
83573: CALL 24439 0 2
83577: IFFALSE 83666
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
83579: LD_ADDR_EXP 57
83583: PUSH
83584: LD_EXP 57
83588: PPUSH
83589: LD_VAR 0 4
83593: PPUSH
83594: LD_EXP 57
83598: PUSH
83599: LD_VAR 0 4
83603: ARRAY
83604: PPUSH
83605: LD_INT 1
83607: PPUSH
83608: CALL_OW 3
83612: PPUSH
83613: CALL_OW 1
83617: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
83618: LD_ADDR_EXP 59
83622: PUSH
83623: LD_EXP 59
83627: PPUSH
83628: LD_VAR 0 4
83632: PUSH
83633: LD_EXP 59
83637: PUSH
83638: LD_VAR 0 4
83642: ARRAY
83643: PUSH
83644: LD_INT 1
83646: PLUS
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PPUSH
83652: LD_VAR 0 1
83656: PPUSH
83657: CALL 18270 0 3
83661: ST_TO_ADDR
// exit ;
83662: POP
83663: POP
83664: GO 83670
// end ; end ;
83666: GO 83514
83668: POP
83669: POP
// end ;
83670: LD_VAR 0 3
83674: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
83675: LD_INT 0
83677: PPUSH
83678: PPUSH
83679: PPUSH
// if not mc_bases or not skirmish then
83680: LD_EXP 52
83684: NOT
83685: PUSH
83686: LD_EXP 50
83690: NOT
83691: OR
83692: IFFALSE 83696
// exit ;
83694: GO 83886
// for i = 1 to mc_bases do
83696: LD_ADDR_VAR 0 4
83700: PUSH
83701: DOUBLE
83702: LD_INT 1
83704: DEC
83705: ST_TO_ADDR
83706: LD_EXP 52
83710: PUSH
83711: FOR_TO
83712: IFFALSE 83799
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
83714: LD_VAR 0 1
83718: PUSH
83719: LD_EXP 60
83723: PUSH
83724: LD_VAR 0 4
83728: ARRAY
83729: IN
83730: PUSH
83731: LD_VAR 0 1
83735: PUSH
83736: LD_EXP 61
83740: PUSH
83741: LD_VAR 0 4
83745: ARRAY
83746: IN
83747: NOT
83748: AND
83749: IFFALSE 83797
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83751: LD_ADDR_EXP 61
83755: PUSH
83756: LD_EXP 61
83760: PPUSH
83761: LD_VAR 0 4
83765: PUSH
83766: LD_EXP 61
83770: PUSH
83771: LD_VAR 0 4
83775: ARRAY
83776: PUSH
83777: LD_INT 1
83779: PLUS
83780: PUSH
83781: EMPTY
83782: LIST
83783: LIST
83784: PPUSH
83785: LD_VAR 0 1
83789: PPUSH
83790: CALL 18270 0 3
83794: ST_TO_ADDR
// break ;
83795: GO 83799
// end ; end ;
83797: GO 83711
83799: POP
83800: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
83801: LD_VAR 0 1
83805: PPUSH
83806: CALL_OW 257
83810: PUSH
83811: LD_EXP 78
83815: IN
83816: PUSH
83817: LD_VAR 0 1
83821: PPUSH
83822: CALL_OW 266
83826: PUSH
83827: LD_INT 5
83829: EQUAL
83830: AND
83831: PUSH
83832: LD_VAR 0 2
83836: PPUSH
83837: CALL_OW 110
83841: PUSH
83842: LD_INT 18
83844: NONEQUAL
83845: AND
83846: IFFALSE 83886
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
83848: LD_VAR 0 2
83852: PPUSH
83853: CALL_OW 257
83857: PUSH
83858: LD_INT 5
83860: PUSH
83861: LD_INT 8
83863: PUSH
83864: LD_INT 9
83866: PUSH
83867: EMPTY
83868: LIST
83869: LIST
83870: LIST
83871: IN
83872: IFFALSE 83886
// SetClass ( unit , 1 ) ;
83874: LD_VAR 0 2
83878: PPUSH
83879: LD_INT 1
83881: PPUSH
83882: CALL_OW 336
// end ;
83886: LD_VAR 0 3
83890: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
83891: LD_INT 0
83893: PPUSH
83894: PPUSH
// if not mc_bases or not skirmish then
83895: LD_EXP 52
83899: NOT
83900: PUSH
83901: LD_EXP 50
83905: NOT
83906: OR
83907: IFFALSE 83911
// exit ;
83909: GO 84027
// if GetLives ( abandoned_vehicle ) > 250 then
83911: LD_VAR 0 2
83915: PPUSH
83916: CALL_OW 256
83920: PUSH
83921: LD_INT 250
83923: GREATER
83924: IFFALSE 83928
// exit ;
83926: GO 84027
// for i = 1 to mc_bases do
83928: LD_ADDR_VAR 0 6
83932: PUSH
83933: DOUBLE
83934: LD_INT 1
83936: DEC
83937: ST_TO_ADDR
83938: LD_EXP 52
83942: PUSH
83943: FOR_TO
83944: IFFALSE 84025
// begin if driver in mc_bases [ i ] then
83946: LD_VAR 0 1
83950: PUSH
83951: LD_EXP 52
83955: PUSH
83956: LD_VAR 0 6
83960: ARRAY
83961: IN
83962: IFFALSE 84023
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
83964: LD_VAR 0 1
83968: PPUSH
83969: LD_EXP 52
83973: PUSH
83974: LD_VAR 0 6
83978: ARRAY
83979: PPUSH
83980: LD_INT 2
83982: PUSH
83983: LD_INT 30
83985: PUSH
83986: LD_INT 0
83988: PUSH
83989: EMPTY
83990: LIST
83991: LIST
83992: PUSH
83993: LD_INT 30
83995: PUSH
83996: LD_INT 1
83998: PUSH
83999: EMPTY
84000: LIST
84001: LIST
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: LIST
84007: PPUSH
84008: CALL_OW 72
84012: PUSH
84013: LD_INT 1
84015: ARRAY
84016: PPUSH
84017: CALL_OW 112
// break ;
84021: GO 84025
// end ; end ;
84023: GO 83943
84025: POP
84026: POP
// end ; end_of_file end_of_file end_of_file
84027: LD_VAR 0 5
84031: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
84032: LD_INT 0
84034: PPUSH
84035: PPUSH
84036: PPUSH
84037: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84038: LD_VAR 0 1
84042: PPUSH
84043: CALL_OW 264
84047: PUSH
84048: LD_EXP 49
84052: EQUAL
84053: IFFALSE 84125
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84055: LD_INT 68
84057: PPUSH
84058: LD_VAR 0 1
84062: PPUSH
84063: CALL_OW 255
84067: PPUSH
84068: CALL_OW 321
84072: PUSH
84073: LD_INT 2
84075: EQUAL
84076: IFFALSE 84088
// eff := 70 else
84078: LD_ADDR_VAR 0 6
84082: PUSH
84083: LD_INT 70
84085: ST_TO_ADDR
84086: GO 84096
// eff := 30 ;
84088: LD_ADDR_VAR 0 6
84092: PUSH
84093: LD_INT 30
84095: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84096: LD_VAR 0 1
84100: PPUSH
84101: CALL_OW 250
84105: PPUSH
84106: LD_VAR 0 1
84110: PPUSH
84111: CALL_OW 251
84115: PPUSH
84116: LD_VAR 0 6
84120: PPUSH
84121: CALL_OW 495
// end ; end ;
84125: LD_VAR 0 4
84129: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
84130: LD_INT 0
84132: PPUSH
84133: PPUSH
84134: PPUSH
84135: PPUSH
84136: PPUSH
84137: PPUSH
// if cmd = 124 then
84138: LD_VAR 0 1
84142: PUSH
84143: LD_INT 124
84145: EQUAL
84146: IFFALSE 84352
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
84148: LD_ADDR_VAR 0 5
84152: PUSH
84153: LD_INT 2
84155: PUSH
84156: LD_INT 34
84158: PUSH
84159: LD_INT 53
84161: PUSH
84162: EMPTY
84163: LIST
84164: LIST
84165: PUSH
84166: LD_INT 34
84168: PUSH
84169: LD_INT 14
84171: PUSH
84172: EMPTY
84173: LIST
84174: LIST
84175: PUSH
84176: EMPTY
84177: LIST
84178: LIST
84179: LIST
84180: PPUSH
84181: CALL_OW 69
84185: ST_TO_ADDR
// if not tmp then
84186: LD_VAR 0 5
84190: NOT
84191: IFFALSE 84195
// exit ;
84193: GO 84352
// for i in tmp do
84195: LD_ADDR_VAR 0 3
84199: PUSH
84200: LD_VAR 0 5
84204: PUSH
84205: FOR_IN
84206: IFFALSE 84350
// begin taskList := GetTaskList ( i ) ;
84208: LD_ADDR_VAR 0 6
84212: PUSH
84213: LD_VAR 0 3
84217: PPUSH
84218: CALL_OW 437
84222: ST_TO_ADDR
// if not taskList then
84223: LD_VAR 0 6
84227: NOT
84228: IFFALSE 84232
// continue ;
84230: GO 84205
// for j = 1 to taskList do
84232: LD_ADDR_VAR 0 4
84236: PUSH
84237: DOUBLE
84238: LD_INT 1
84240: DEC
84241: ST_TO_ADDR
84242: LD_VAR 0 6
84246: PUSH
84247: FOR_TO
84248: IFFALSE 84346
// if taskList [ j ] [ 1 ] = | then
84250: LD_VAR 0 6
84254: PUSH
84255: LD_VAR 0 4
84259: ARRAY
84260: PUSH
84261: LD_INT 1
84263: ARRAY
84264: PUSH
84265: LD_STRING |
84267: EQUAL
84268: IFFALSE 84344
// begin _taskList := Delete ( taskList , 1 ) ;
84270: LD_ADDR_VAR 0 7
84274: PUSH
84275: LD_VAR 0 6
84279: PPUSH
84280: LD_INT 1
84282: PPUSH
84283: CALL_OW 3
84287: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
84288: LD_VAR 0 3
84292: PPUSH
84293: LD_VAR 0 7
84297: PPUSH
84298: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
84302: LD_VAR 0 3
84306: PPUSH
84307: LD_VAR 0 6
84311: PUSH
84312: LD_VAR 0 4
84316: ARRAY
84317: PUSH
84318: LD_INT 2
84320: ARRAY
84321: PPUSH
84322: LD_VAR 0 6
84326: PUSH
84327: LD_VAR 0 4
84331: ARRAY
84332: PUSH
84333: LD_INT 3
84335: ARRAY
84336: PPUSH
84337: LD_INT 8
84339: PPUSH
84340: CALL 84357 0 4
// end ;
84344: GO 84247
84346: POP
84347: POP
// end ;
84348: GO 84205
84350: POP
84351: POP
// end ; end ;
84352: LD_VAR 0 2
84356: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84357: LD_INT 0
84359: PPUSH
84360: PPUSH
84361: PPUSH
84362: PPUSH
84363: PPUSH
84364: PPUSH
84365: PPUSH
84366: PPUSH
84367: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84368: LD_VAR 0 1
84372: NOT
84373: PUSH
84374: LD_VAR 0 2
84378: PPUSH
84379: LD_VAR 0 3
84383: PPUSH
84384: CALL_OW 488
84388: NOT
84389: OR
84390: PUSH
84391: LD_VAR 0 4
84395: NOT
84396: OR
84397: IFFALSE 84401
// exit ;
84399: GO 84741
// list := [ ] ;
84401: LD_ADDR_VAR 0 13
84405: PUSH
84406: EMPTY
84407: ST_TO_ADDR
// if x - r < 0 then
84408: LD_VAR 0 2
84412: PUSH
84413: LD_VAR 0 4
84417: MINUS
84418: PUSH
84419: LD_INT 0
84421: LESS
84422: IFFALSE 84434
// min_x := 0 else
84424: LD_ADDR_VAR 0 7
84428: PUSH
84429: LD_INT 0
84431: ST_TO_ADDR
84432: GO 84450
// min_x := x - r ;
84434: LD_ADDR_VAR 0 7
84438: PUSH
84439: LD_VAR 0 2
84443: PUSH
84444: LD_VAR 0 4
84448: MINUS
84449: ST_TO_ADDR
// if y - r < 0 then
84450: LD_VAR 0 3
84454: PUSH
84455: LD_VAR 0 4
84459: MINUS
84460: PUSH
84461: LD_INT 0
84463: LESS
84464: IFFALSE 84476
// min_y := 0 else
84466: LD_ADDR_VAR 0 8
84470: PUSH
84471: LD_INT 0
84473: ST_TO_ADDR
84474: GO 84492
// min_y := y - r ;
84476: LD_ADDR_VAR 0 8
84480: PUSH
84481: LD_VAR 0 3
84485: PUSH
84486: LD_VAR 0 4
84490: MINUS
84491: ST_TO_ADDR
// max_x := x + r ;
84492: LD_ADDR_VAR 0 9
84496: PUSH
84497: LD_VAR 0 2
84501: PUSH
84502: LD_VAR 0 4
84506: PLUS
84507: ST_TO_ADDR
// max_y := y + r ;
84508: LD_ADDR_VAR 0 10
84512: PUSH
84513: LD_VAR 0 3
84517: PUSH
84518: LD_VAR 0 4
84522: PLUS
84523: ST_TO_ADDR
// for _x = min_x to max_x do
84524: LD_ADDR_VAR 0 11
84528: PUSH
84529: DOUBLE
84530: LD_VAR 0 7
84534: DEC
84535: ST_TO_ADDR
84536: LD_VAR 0 9
84540: PUSH
84541: FOR_TO
84542: IFFALSE 84659
// for _y = min_y to max_y do
84544: LD_ADDR_VAR 0 12
84548: PUSH
84549: DOUBLE
84550: LD_VAR 0 8
84554: DEC
84555: ST_TO_ADDR
84556: LD_VAR 0 10
84560: PUSH
84561: FOR_TO
84562: IFFALSE 84655
// begin if not ValidHex ( _x , _y ) then
84564: LD_VAR 0 11
84568: PPUSH
84569: LD_VAR 0 12
84573: PPUSH
84574: CALL_OW 488
84578: NOT
84579: IFFALSE 84583
// continue ;
84581: GO 84561
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84583: LD_VAR 0 11
84587: PPUSH
84588: LD_VAR 0 12
84592: PPUSH
84593: CALL_OW 351
84597: PUSH
84598: LD_VAR 0 11
84602: PPUSH
84603: LD_VAR 0 12
84607: PPUSH
84608: CALL_OW 554
84612: AND
84613: IFFALSE 84653
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84615: LD_ADDR_VAR 0 13
84619: PUSH
84620: LD_VAR 0 13
84624: PPUSH
84625: LD_VAR 0 13
84629: PUSH
84630: LD_INT 1
84632: PLUS
84633: PPUSH
84634: LD_VAR 0 11
84638: PUSH
84639: LD_VAR 0 12
84643: PUSH
84644: EMPTY
84645: LIST
84646: LIST
84647: PPUSH
84648: CALL_OW 2
84652: ST_TO_ADDR
// end ;
84653: GO 84561
84655: POP
84656: POP
84657: GO 84541
84659: POP
84660: POP
// if not list then
84661: LD_VAR 0 13
84665: NOT
84666: IFFALSE 84670
// exit ;
84668: GO 84741
// for i in list do
84670: LD_ADDR_VAR 0 6
84674: PUSH
84675: LD_VAR 0 13
84679: PUSH
84680: FOR_IN
84681: IFFALSE 84739
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84683: LD_VAR 0 1
84687: PPUSH
84688: LD_STRING M
84690: PUSH
84691: LD_VAR 0 6
84695: PUSH
84696: LD_INT 1
84698: ARRAY
84699: PUSH
84700: LD_VAR 0 6
84704: PUSH
84705: LD_INT 2
84707: ARRAY
84708: PUSH
84709: LD_INT 0
84711: PUSH
84712: LD_INT 0
84714: PUSH
84715: LD_INT 0
84717: PUSH
84718: LD_INT 0
84720: PUSH
84721: EMPTY
84722: LIST
84723: LIST
84724: LIST
84725: LIST
84726: LIST
84727: LIST
84728: LIST
84729: PUSH
84730: EMPTY
84731: LIST
84732: PPUSH
84733: CALL_OW 447
84737: GO 84680
84739: POP
84740: POP
// end ;
84741: LD_VAR 0 5
84745: RET
