// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5584 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2747 0 0
// PrepareBeta ;
 105: CALL 3136 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_STRING DMegan-3a
 273: PPUSH
 274: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 278: LD_EXP 9
 282: PPUSH
 283: LD_STRING DBrighton-3a
 285: PPUSH
 286: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 290: LD_EXP 11
 294: PPUSH
 295: LD_STRING DMegan-4a
 297: PPUSH
 298: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 302: LD_EXP 11
 306: PPUSH
 307: LD_INT 40
 309: PPUSH
 310: LD_INT 37
 312: PPUSH
 313: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 317: LD_EXP 11
 321: PPUSH
 322: LD_EXP 9
 326: PPUSH
 327: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 331: LD_EXP 10
 335: PPUSH
 336: LD_INT 50
 338: PPUSH
 339: LD_INT 42
 341: PPUSH
 342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 346: LD_INT 35
 348: PPUSH
 349: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 353: LD_EXP 9
 357: PPUSH
 358: LD_EXP 10
 362: PPUSH
 363: CALL_OW 296
 367: PUSH
 368: LD_INT 6
 370: LESS
 371: IFFALSE 346
// ComTurnUnit ( Brighton , Palmer ) ;
 373: LD_EXP 9
 377: PPUSH
 378: LD_EXP 10
 382: PPUSH
 383: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 387: LD_EXP 10
 391: PPUSH
 392: LD_EXP 9
 396: PPUSH
 397: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 401: LD_EXP 11
 405: PPUSH
 406: LD_STRING DMegan-5a
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-1
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-1
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-2
 444: PPUSH
 445: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 449: LD_EXP 9
 453: PPUSH
 454: LD_STRING DBrighton-2
 456: PPUSH
 457: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 461: LD_EXP 10
 465: PPUSH
 466: LD_STRING DPalmer-3
 468: PPUSH
 469: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 473: LD_EXP 9
 477: PPUSH
 478: LD_STRING DBrighton-3
 480: PPUSH
 481: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 485: LD_EXP 10
 489: PPUSH
 490: LD_STRING DPalmer-4
 492: PPUSH
 493: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 497: LD_EXP 10
 501: PPUSH
 502: LD_INT 6
 504: PPUSH
 505: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 516: LD_EXP 10
 520: PPUSH
 521: CALL_OW 310
 525: PUSH
 526: LD_INT 6
 528: EQUAL
 529: IFFALSE 509
// SayRadio ( Palmer , DPalmer-5 ) ;
 531: LD_EXP 10
 535: PPUSH
 536: LD_STRING DPalmer-5
 538: PPUSH
 539: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 543: LD_EXP 9
 547: PPUSH
 548: LD_INT 59
 550: PPUSH
 551: LD_INT 36
 553: PPUSH
 554: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 558: LD_EXP 11
 562: PPUSH
 563: LD_INT 60
 565: PPUSH
 566: LD_INT 35
 568: PPUSH
 569: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 573: LD_EXP 10
 577: PPUSH
 578: LD_INT 60
 580: PPUSH
 581: LD_INT 34
 583: PPUSH
 584: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 588: LD_EXP 9
 592: PPUSH
 593: LD_INT 99
 595: PPUSH
 596: LD_INT 37
 598: PPUSH
 599: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 603: LD_EXP 11
 607: PPUSH
 608: LD_EXP 9
 612: PPUSH
 613: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 617: LD_EXP 10
 621: PPUSH
 622: LD_EXP 9
 626: PPUSH
 627: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 631: LD_INT 64
 633: PPUSH
 634: LD_INT 40
 636: PPUSH
 637: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 641: LD_EXP 12
 645: PPUSH
 646: LD_INT 13
 648: PPUSH
 649: CALL 12579 0 2
// wait ( 0 0$30 ) ;
 653: LD_INT 1050
 655: PPUSH
 656: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 660: LD_EXP 9
 664: PPUSH
 665: LD_STRING DBrighton-4
 667: PPUSH
 668: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 672: LD_EXP 9
 676: PPUSH
 677: LD_STRING DBrighton-5
 679: PPUSH
 680: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 11
 693: PPUSH
 694: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 698: LD_EXP 9
 702: PPUSH
 703: LD_STRING DBrighton-6
 705: PPUSH
 706: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 710: LD_EXP 11
 714: PPUSH
 715: LD_STRING DMegan-1
 717: PPUSH
 718: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 722: LD_EXP 9
 726: PPUSH
 727: LD_STRING DBrighton-7
 729: PPUSH
 730: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 734: LD_EXP 9
 738: PPUSH
 739: LD_INT 99
 741: PPUSH
 742: LD_INT 37
 744: PPUSH
 745: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 749: LD_EXP 9
 753: PPUSH
 754: LD_STRING DBrighton-8
 756: PPUSH
 757: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 761: LD_STRING C1
 763: PPUSH
 764: CALL_OW 337
// InGameOff ;
 768: CALL_OW 9
// SaveForQuickRestart ;
 772: CALL_OW 22
// MissionStart := true ;
 776: LD_ADDR_EXP 1
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// PrepareRUBase_v2 ;
 784: CALL 4859 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 788: LD_ADDR_EXP 64
 792: PUSH
 793: LD_EXP 64
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: LD_INT 22
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PPUSH
 811: CALL_OW 69
 815: PPUSH
 816: CALL_OW 1
 820: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 821: LD_ADDR_EXP 64
 825: PUSH
 826: LD_EXP 64
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_EXP 36
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_Start ( ) ;
 844: CALL 52054 0 0
// music_nat := 1 ;
 848: LD_ADDR_OWVAR 71
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// end ;
 856: END
// every 1 trigger southAreaBlocker do var unit ;
 857: LD_EXP 2
 861: IFFALSE 1022
 863: GO 865
 865: DISABLE
 866: LD_INT 0
 868: PPUSH
// begin enable ;
 869: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 870: LD_INT 16
 872: PPUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 21
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 70
 919: PUSH
 920: LD_INT 0
 922: EQUAL
 923: IFFALSE 927
// exit ;
 925: GO 1022
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 927: LD_ADDR_VAR 0 1
 931: PUSH
 932: LD_INT 16
 934: PPUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 70
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1020
// ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 985: LD_VAR 0 1
 989: PPUSH
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 250
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 2
1012: MINUS
1013: PPUSH
1014: CALL_OW 111
1018: GO 982
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
1025: LD_EXP 1
1029: IFFALSE 1662
1031: GO 1033
1033: DISABLE
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
// begin wait ( ruArrival ) ;
1038: LD_EXP 42
1042: PPUSH
1043: CALL_OW 67
// PrepareRUArmada ;
1047: CALL 3718 0 0
// wait ( 0 0$3 ) ;
1051: LD_INT 105
1053: PPUSH
1054: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1058: LD_ADDR_VAR 0 2
1062: PUSH
1063: LD_INT 15
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 517
1073: ST_TO_ADDR
// for i = 1 to RUArmada do
1074: LD_ADDR_VAR 0 1
1078: PUSH
1079: DOUBLE
1080: LD_INT 1
1082: DEC
1083: ST_TO_ADDR
1084: LD_EXP 17
1088: PUSH
1089: FOR_TO
1090: IFFALSE 1139
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1092: LD_EXP 17
1096: PUSH
1097: LD_VAR 0 1
1101: ARRAY
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_INT 2
1125: ARRAY
1126: PUSH
1127: LD_VAR 0 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 111
1137: GO 1089
1139: POP
1140: POP
// ArmadaArrived := true ;
1141: LD_ADDR_EXP 3
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1149: LD_EXP 10
1153: PPUSH
1154: LD_STRING DPalmer-A1
1156: PPUSH
1157: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1161: LD_EXP 9
1165: PPUSH
1166: LD_STRING DBrighton-A1
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$20 ) ;
1173: LD_INT 700
1175: PPUSH
1176: CALL_OW 67
// PrepareRUBase ;
1180: CALL 4443 0 0
// wait ( 1 1$20 ) ;
1184: LD_INT 2800
1186: PPUSH
1187: CALL_OW 67
// PrepareRUBulldozers ;
1191: CALL 4330 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1195: LD_EXP 18
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_INT 9
1206: PPUSH
1207: CALL 12436 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1211: LD_EXP 18
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: CALL 12436 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1227: LD_INT 1
1229: PPUSH
1230: LD_EXP 18
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_EXP 18
1250: PUSH
1251: LD_INT 2
1253: ARRAY
1254: PPUSH
1255: CALL_OW 471
// wait ( 0 0$50 ) ;
1259: LD_INT 1750
1261: PPUSH
1262: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 16
1271: PPUSH
1272: CALL_OW 334
// InGameOn ;
1276: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1280: LD_INT 95
1282: PPUSH
1283: LD_INT 93
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 30
1291: NEG
1292: PPUSH
1293: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1297: LD_INT 10
1299: PPUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 70
1314: PPUSH
1315: LD_INT 63
1317: PPUSH
1318: LD_INT 39
1320: PPUSH
1321: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1325: LD_INT 95
1327: PPUSH
1328: LD_INT 93
1330: PPUSH
1331: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1335: LD_INT 35
1337: PPUSH
1338: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 314
1355: NOT
1356: IFFALSE 1374
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1358: LD_EXP 18
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: LD_INT 9
1369: PPUSH
1370: CALL 12436 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1374: LD_EXP 18
1378: PUSH
1379: LD_INT 2
1381: ARRAY
1382: PPUSH
1383: CALL_OW 314
1387: NOT
1388: IFFALSE 1406
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1390: LD_EXP 18
1394: PUSH
1395: LD_INT 2
1397: ARRAY
1398: PPUSH
1399: LD_INT 11
1401: PPUSH
1402: CALL 12436 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1406: LD_INT 9
1408: PPUSH
1409: CALL_OW 353
1413: PUSH
1414: LD_INT 2
1416: LESS
1417: PUSH
1418: LD_INT 11
1420: PPUSH
1421: CALL_OW 353
1425: PUSH
1426: LD_INT 2
1428: LESS
1429: OR
1430: PUSH
1431: LD_EXP 18
1435: PUSH
1436: LD_INT 1
1438: ARRAY
1439: PPUSH
1440: CALL_OW 301
1444: OR
1445: IFFALSE 1335
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1447: LD_EXP 18
1451: PPUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PPUSH
1458: CALL_OW 72
1462: IFFALSE 1515
// begin wait ( 0 0$10 ) ;
1464: LD_INT 350
1466: PPUSH
1467: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1471: LD_EXP 18
1475: PPUSH
1476: LD_INT 120
1478: PPUSH
1479: LD_INT 131
1481: PPUSH
1482: CALL_OW 111
// for i in Bulldozers do
1486: LD_ADDR_VAR 0 1
1490: PUSH
1491: LD_EXP 18
1495: PUSH
1496: FOR_IN
1497: IFFALSE 1513
// NormalAttack ( 1 , i ) ;
1499: LD_INT 1
1501: PPUSH
1502: LD_VAR 0 1
1506: PPUSH
1507: CALL_OW 472
1511: GO 1496
1513: POP
1514: POP
// end ; wait ( 0 0$10 ) ;
1515: LD_INT 350
1517: PPUSH
1518: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1522: LD_INT 95
1524: PPUSH
1525: LD_INT 93
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 331
// southAreaBlocker = false ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// wait ( 0 0$3 ) ;
1543: LD_INT 105
1545: PPUSH
1546: CALL_OW 67
// InGameOff ;
1550: CALL_OW 9
// SayEffect ( DRuSol-A1 ) ;
1554: LD_STRING DRuSol-A1
1556: PPUSH
1557: CALL_OW 96
// AssaultStarted := true ;
1561: LD_ADDR_EXP 8
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// Say ( Yashin , DDeath-Yas-1 ) ;
1576: LD_EXP 13
1580: PPUSH
1581: LD_STRING DDeath-Yas-1
1583: PPUSH
1584: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_STRING DDeath-Gay-2
1595: PPUSH
1596: CALL_OW 88
// wait ( 0 0$2 ) ;
1600: LD_INT 70
1602: PPUSH
1603: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1607: LD_EXP 14
1611: PPUSH
1612: LD_STRING DDeath-Pop-1
1614: PPUSH
1615: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1619: LD_EXP 15
1623: PPUSH
1624: LD_STRING DDeath-Gay-1
1626: PPUSH
1627: CALL_OW 88
// wait ( 0 0$5 ) ;
1631: LD_INT 175
1633: PPUSH
1634: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1638: LD_EXP 16
1642: PPUSH
1643: LD_STRING DDeath-Vse-1
1645: PPUSH
1646: CALL_OW 88
// Say ( Popov , DDeath-Pop-2 ) ;
1650: LD_EXP 14
1654: PPUSH
1655: LD_STRING DDeath-Pop-2
1657: PPUSH
1658: CALL_OW 88
// end ;
1662: PPOPN 2
1664: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1665: LD_EXP 8
1669: IFFALSE 2121
1671: GO 1673
1673: DISABLE
1674: LD_INT 0
1676: PPUSH
1677: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1678: LD_INT 6
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1688: LD_INT 6
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: CALL_OW 470
// repeat for i in RuArmada do
1698: LD_ADDR_VAR 0 1
1702: PUSH
1703: LD_EXP 17
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1747
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1711: LD_VAR 0 1
1715: PPUSH
1716: LD_INT 22
1718: PUSH
1719: LD_INT 1
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 69
1730: PPUSH
1731: LD_VAR 0 1
1735: PPUSH
1736: CALL_OW 74
1740: PPUSH
1741: CALL_OW 115
1745: GO 1708
1747: POP
1748: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1749: LD_INT 35
1751: PPUSH
1752: CALL_OW 67
1756: LD_INT 1
1758: PUSH
1759: LD_INT 22
1761: PUSH
1762: LD_INT 6
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 21
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL_OW 69
1788: PUSH
1789: LD_INT 10
1791: LESS
1792: PUSH
1793: LD_EXP 13
1797: PPUSH
1798: CALL_OW 301
1802: AND
1803: PUSH
1804: LD_EXP 14
1808: PPUSH
1809: CALL_OW 301
1813: AND
1814: PUSH
1815: LD_EXP 15
1819: PPUSH
1820: CALL_OW 301
1824: AND
1825: PUSH
1826: LD_EXP 16
1830: PPUSH
1831: CALL_OW 301
1835: AND
1836: IFFALSE 1698
// AssaultStarted := false ;
1838: LD_ADDR_EXP 8
1842: PUSH
1843: LD_INT 0
1845: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1846: LD_INT 22
1848: PUSH
1849: LD_INT 6
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: PPUSH
1861: LD_INT 5
1863: PPUSH
1864: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1868: LD_ADDR_EXP 5
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 22
1878: PUSH
1879: LD_INT 6
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 26
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 24
1908: PUSH
1909: LD_INT 500
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: ST_TO_ADDR
// if RuSpeaker then
1928: LD_EXP 5
1932: IFFALSE 1950
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1934: LD_EXP 5
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PPUSH
1943: LD_STRING DRuSol-A2
1945: PPUSH
1946: CALL_OW 88
// wait ( 0 0$30 ) ;
1950: LD_INT 1050
1952: PPUSH
1953: CALL_OW 67
// DialogueOn ;
1957: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1961: LD_EXP 9
1965: PPUSH
1966: LD_STRING DBrighton-B1
1968: PPUSH
1969: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1973: LD_EXP 10
1977: PPUSH
1978: LD_STRING DPalmer-B1
1980: PPUSH
1981: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1985: LD_EXP 9
1989: PPUSH
1990: LD_STRING DBrighton-B2
1992: PPUSH
1993: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1997: LD_EXP 19
2001: PPUSH
2002: LD_STRING DBurlak-B1
2004: PPUSH
2005: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
2009: LD_EXP 9
2013: PPUSH
2014: LD_STRING DBrighton-B3
2016: PPUSH
2017: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
2021: LD_EXP 10
2025: PPUSH
2026: LD_STRING DPalmer-B2
2028: PPUSH
2029: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
2033: LD_EXP 9
2037: PPUSH
2038: LD_STRING DBrighton-B4
2040: PPUSH
2041: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
2045: LD_EXP 9
2049: PPUSH
2050: LD_STRING DBrighton-B5
2052: PPUSH
2053: CALL_OW 88
// DialogueOff ;
2057: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2061: LD_STRING C2
2063: PPUSH
2064: CALL_OW 337
// FirstAssaultRepelled := true ;
2068: LD_ADDR_EXP 4
2072: PUSH
2073: LD_INT 1
2075: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2076: LD_EXP 18
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2089: LD_EXP 18
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PPUSH
2098: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2102: LD_INT 22
2104: PUSH
2105: LD_INT 6
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: PPUSH
2117: CALL_OW 181
// end ;
2121: PPOPN 2
2123: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2124: LD_EXP 4
2128: IFFALSE 2293
2130: GO 2132
2132: DISABLE
2133: LD_INT 0
2135: PPUSH
2136: PPUSH
// begin enable ;
2137: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2138: LD_INT 5
2140: PPUSH
2141: LD_INT 22
2143: PUSH
2144: LD_INT 6
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: EMPTY
2152: LIST
2153: PPUSH
2154: CALL_OW 70
2158: PUSH
2159: LD_INT 0
2161: EQUAL
2162: IFFALSE 2166
// exit ;
2164: GO 2293
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2166: LD_ADDR_VAR 0 1
2170: PUSH
2171: LD_INT 5
2173: PPUSH
2174: LD_INT 22
2176: PUSH
2177: LD_INT 6
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PUSH
2184: EMPTY
2185: LIST
2186: PPUSH
2187: CALL_OW 70
2191: PUSH
2192: FOR_IN
2193: IFFALSE 2291
// begin SetSide ( unit , 3 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 3
2202: PPUSH
2203: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2207: LD_VAR 0 1
2211: PPUSH
2212: CALL_OW 247
2216: PUSH
2217: LD_INT 2
2219: EQUAL
2220: IFFALSE 2256
// for insideUnit in UnitsInside ( unit ) do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: LD_VAR 0 1
2231: PPUSH
2232: CALL_OW 313
2236: PUSH
2237: FOR_IN
2238: IFFALSE 2254
// SetSide ( insideUnit , 3 ) ;
2240: LD_VAR 0 2
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 235
2252: GO 2237
2254: POP
2255: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2256: LD_ADDR_EXP 64
2260: PUSH
2261: LD_EXP 64
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 22
2271: PUSH
2272: LD_INT 3
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: PPUSH
2284: CALL_OW 1
2288: ST_TO_ADDR
// end ;
2289: GO 2192
2291: POP
2292: POP
// end ;
2293: PPOPN 2
2295: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2296: LD_EXP 4
2300: PUSH
2301: LD_EXP 41
2305: PUSH
2306: LD_INT 0
2308: GREATER
2309: AND
2310: IFFALSE 2330
2312: GO 2314
2314: DISABLE
// begin enable ;
2315: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2316: LD_ADDR_EXP 41
2320: PUSH
2321: LD_EXP 41
2325: PUSH
2326: LD_INT 35
2328: MINUS
2329: ST_TO_ADDR
// end ;
2330: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2331: LD_EXP 41
2335: PUSH
2336: LD_INT 0
2338: EQUAL
2339: IFFALSE 2445
2341: GO 2343
2343: DISABLE
// begin JMMReinforcement ;
2344: CALL 5187 0 0
// DialogueOn ;
2348: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2352: LD_EXP 37
2356: PPUSH
2357: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2361: LD_EXP 37
2365: PPUSH
2366: LD_STRING DJMM-F1
2368: PPUSH
2369: CALL_OW 88
// if RussiansDefeated then
2373: LD_EXP 44
2377: IFFALSE 2403
// begin AddMedal ( Russians , 1 ) ;
2379: LD_STRING Russians
2381: PPUSH
2382: LD_INT 1
2384: PPUSH
2385: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_STRING DBrighton-F1a
2396: PPUSH
2397: CALL_OW 88
// end else
2401: GO 2433
// begin AddMedal ( Russians , - 1 ) ;
2403: LD_STRING Russians
2405: PPUSH
2406: LD_INT 1
2408: NEG
2409: PPUSH
2410: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2414: LD_EXP 9
2418: PPUSH
2419: LD_STRING DBrighton-F1
2421: PPUSH
2422: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2426: LD_STRING C3
2428: PPUSH
2429: CALL_OW 337
// end ; DialogueOff ;
2433: CALL_OW 7
// JMM_Arrived := true ;
2437: LD_ADDR_EXP 6
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// end ;
2445: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2446: LD_EXP 6
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_EXP 19
2458: PPUSH
2459: CALL_OW 292
2463: AND
2464: IFFALSE 2493
2466: GO 2468
2468: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2469: LD_EXP 19
2473: PPUSH
2474: LD_STRING DBurlak
2476: PPUSH
2477: CALL_OW 88
// Say ( JMM , DJMM ) ;
2481: LD_EXP 37
2485: PPUSH
2486: LD_STRING DJMM
2488: PPUSH
2489: CALL_OW 88
// end ;
2493: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2494: LD_INT 1
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 2
2509: PUSH
2510: LD_INT 34
2512: PUSH
2513: LD_INT 9
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 35
2522: PUSH
2523: LD_INT 9
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: PUSH
2545: LD_INT 1
2547: GREATER
2548: IFFALSE 2561
2550: GO 2552
2552: DISABLE
// LaserBuilt := true ;
2553: LD_ADDR_EXP 7
2557: PUSH
2558: LD_INT 1
2560: ST_TO_ADDR
2561: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2562: LD_EXP 8
2566: PUSH
2567: LD_INT 6
2569: PPUSH
2570: LD_INT 1
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 1
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 35
2585: PUSH
2586: LD_INT 9
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PPUSH
2601: CALL_OW 69
2605: PPUSH
2606: LD_EXP 16
2610: PPUSH
2611: CALL_OW 310
2615: PPUSH
2616: CALL_OW 74
2620: PPUSH
2621: CALL_OW 292
2625: AND
2626: IFFALSE 2655
2628: GO 2630
2630: DISABLE
// begin Say ( Sevi , DDeath-Vse-2 ) ;
2631: LD_EXP 16
2635: PPUSH
2636: LD_STRING DDeath-Vse-2
2638: PPUSH
2639: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2643: LD_EXP 13
2647: PPUSH
2648: LD_STRING DDeath-Yas-2
2650: PPUSH
2651: CALL_OW 88
// end ;
2655: END
// every 0 0$1 trigger MissionStart and GetResourceArea ( CratesArea , mat_cans ) < 20 do
2656: LD_EXP 1
2660: PUSH
2661: LD_INT 12
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL_OW 287
2671: PUSH
2672: LD_INT 20
2674: LESS
2675: AND
2676: IFFALSE 2718
2678: GO 2680
2680: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2681: LD_INT 1750
2683: PPUSH
2684: LD_INT 4900
2686: PPUSH
2687: CALL_OW 12
2691: PPUSH
2692: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2696: LD_INT 2
2698: PPUSH
2699: LD_INT 5
2701: PPUSH
2702: CALL_OW 12
2706: PPUSH
2707: LD_INT 12
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: CALL_OW 55
// enable ;
2717: ENABLE
// end ;
2718: END
// every 0 0$1 trigger MissionStart do
2719: LD_EXP 1
2723: IFFALSE 2746
2725: GO 2727
2727: DISABLE
// begin enable ;
2728: ENABLE
// display_Strings := [ #tick , tick ] ;
2729: LD_ADDR_OWVAR 47
2733: PUSH
2734: LD_STRING #tick
2736: PUSH
2737: LD_OWVAR 1
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// end ; end_of_file
2746: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2747: LD_INT 0
2749: PPUSH
// uc_side := 1 ;
2750: LD_ADDR_OWVAR 20
2754: PUSH
2755: LD_INT 1
2757: ST_TO_ADDR
// hc_class = class_soldier ;
2758: LD_ADDR_OWVAR 28
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// uc_nation := nation_american ;
2766: LD_ADDR_OWVAR 21
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// hc_sex = sex_male ;
2774: LD_ADDR_OWVAR 27
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// hc_importance = 110 ;
2782: LD_ADDR_OWVAR 32
2786: PUSH
2787: LD_INT 110
2789: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2790: LD_ADDR_OWVAR 30
2794: PUSH
2795: LD_INT 5
2797: PUSH
2798: LD_INT 4
2800: PUSH
2801: LD_INT 5
2803: PUSH
2804: LD_INT 3
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2813: LD_ADDR_OWVAR 31
2817: PUSH
2818: LD_INT 9
2820: PUSH
2821: LD_INT 6
2823: PUSH
2824: LD_INT 7
2826: PUSH
2827: LD_INT 6
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2836: LD_ADDR_OWVAR 29
2840: PUSH
2841: LD_INT 12
2843: PUSH
2844: LD_INT 10
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2851: LD_ADDR_OWVAR 26
2855: PUSH
2856: LD_STRING Gerard Brighton
2858: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2859: LD_ADDR_OWVAR 33
2863: PUSH
2864: LD_STRING Beta_Skirmish
2866: ST_TO_ADDR
// hc_face_number := 1 ;
2867: LD_ADDR_OWVAR 34
2871: PUSH
2872: LD_INT 1
2874: ST_TO_ADDR
// Brighton := CreateHuman ;
2875: LD_ADDR_EXP 9
2879: PUSH
2880: CALL_OW 44
2884: ST_TO_ADDR
// uc_nation := nation_american ;
2885: LD_ADDR_OWVAR 21
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// hc_importance = 80 ;
2893: LD_ADDR_OWVAR 32
2897: PUSH
2898: LD_INT 80
2900: ST_TO_ADDR
// hc_sex = sex_male ;
2901: LD_ADDR_OWVAR 27
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2909: LD_ADDR_OWVAR 30
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: LD_INT 5
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 1
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2932: LD_ADDR_OWVAR 31
2936: PUSH
2937: LD_INT 7
2939: PUSH
2940: LD_INT 6
2942: PUSH
2943: LD_INT 5
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2955: LD_ADDR_OWVAR 29
2959: PUSH
2960: LD_INT 10
2962: PUSH
2963: LD_INT 10
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: ST_TO_ADDR
// hc_name := Brian Palmer ;
2970: LD_ADDR_OWVAR 26
2974: PUSH
2975: LD_STRING Brian Palmer
2977: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2978: LD_ADDR_OWVAR 33
2982: PUSH
2983: LD_STRING Beta_Skirmish
2985: ST_TO_ADDR
// hc_face_number := 3 ;
2986: LD_ADDR_OWVAR 34
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// Palmer := CreateHuman ;
2994: LD_ADDR_EXP 10
2998: PUSH
2999: CALL_OW 44
3003: ST_TO_ADDR
// hc_class = class_scientistic ;
3004: LD_ADDR_OWVAR 28
3008: PUSH
3009: LD_INT 4
3011: ST_TO_ADDR
// uc_nation := nation_american ;
3012: LD_ADDR_OWVAR 21
3016: PUSH
3017: LD_INT 1
3019: ST_TO_ADDR
// hc_importance = 70 ;
3020: LD_ADDR_OWVAR 32
3024: PUSH
3025: LD_INT 70
3027: ST_TO_ADDR
// hc_sex = sex_female ;
3028: LD_ADDR_OWVAR 27
3032: PUSH
3033: LD_INT 2
3035: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
3036: LD_ADDR_OWVAR 30
3040: PUSH
3041: LD_INT 3
3043: PUSH
3044: LD_INT 2
3046: PUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3059: LD_ADDR_OWVAR 31
3063: PUSH
3064: LD_INT 4
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 5
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3082: LD_ADDR_OWVAR 29
3086: PUSH
3087: LD_INT 10
3089: PUSH
3090: LD_INT 10
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: ST_TO_ADDR
// hc_name := Megan Armitage ;
3097: LD_ADDR_OWVAR 26
3101: PUSH
3102: LD_STRING Megan Armitage
3104: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3105: LD_ADDR_OWVAR 33
3109: PUSH
3110: LD_STRING Beta_Skirmish
3112: ST_TO_ADDR
// hc_face_number := 4 ;
3113: LD_ADDR_OWVAR 34
3117: PUSH
3118: LD_INT 4
3120: ST_TO_ADDR
// Megan := CreateHuman ;
3121: LD_ADDR_EXP 11
3125: PUSH
3126: CALL_OW 44
3130: ST_TO_ADDR
// end ;
3131: LD_VAR 0 1
3135: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3136: LD_INT 0
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
// uc_side := 1 ;
3143: LD_ADDR_OWVAR 20
3147: PUSH
3148: LD_INT 1
3150: ST_TO_ADDR
// uc_nation := nation_american ;
3151: LD_ADDR_OWVAR 21
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3159: LD_ADDR_VAR 0 2
3163: PUSH
3164: LD_INT 22
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PUSH
3174: LD_INT 30
3176: PUSH
3177: LD_INT 32
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PPUSH
3188: CALL_OW 69
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3249
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3196: LD_VAR 0 2
3200: PPUSH
3201: LD_INT 3
3203: PUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 5
3212: PUSH
3213: LD_INT 11
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: LD_INT 4
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 1
3233: PPUSH
3234: LD_INT 7
3236: PPUSH
3237: CALL_OW 12
3241: ARRAY
3242: PPUSH
3243: CALL_OW 431
3247: GO 3193
3249: POP
3250: POP
// hc_name :=  ;
3251: LD_ADDR_OWVAR 26
3255: PUSH
3256: LD_STRING 
3258: ST_TO_ADDR
// hc_gallery :=  ;
3259: LD_ADDR_OWVAR 33
3263: PUSH
3264: LD_STRING 
3266: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3267: LD_ADDR_VAR 0 2
3271: PUSH
3272: DOUBLE
3273: LD_INT 1
3275: DEC
3276: ST_TO_ADDR
3277: LD_INT 6
3279: PUSH
3280: LD_INT 5
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: PUSH
3291: LD_OWVAR 67
3295: ARRAY
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3356
// begin PrepareSoldier ( 1 , game_skill ) ;
3300: LD_INT 1
3302: PPUSH
3303: LD_EXP 39
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// filter := filter ^ un ;
3322: LD_ADDR_VAR 0 3
3326: PUSH
3327: LD_VAR 0 3
3331: PUSH
3332: LD_VAR 0 4
3336: ADD
3337: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3338: LD_ADDR_VAR 0 5
3342: PUSH
3343: LD_VAR 0 5
3347: PUSH
3348: LD_VAR 0 4
3352: ADD
3353: ST_TO_ADDR
// end ;
3354: GO 3297
3356: POP
3357: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 3
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3443
// begin PrepareEngineer ( 0 , game_skill ) ;
3391: LD_INT 0
3393: PPUSH
3394: LD_EXP 39
3398: PPUSH
3399: CALL_OW 382
// un := CreateHuman ;
3403: LD_ADDR_VAR 0 4
3407: PUSH
3408: CALL_OW 44
3412: ST_TO_ADDR
// filter := filter ^ un ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: LD_VAR 0 3
3422: PUSH
3423: LD_VAR 0 4
3427: ADD
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3429: LD_VAR 0 4
3433: PPUSH
3434: LD_INT 3
3436: PPUSH
3437: CALL_OW 52
// end ;
3441: GO 3388
3443: POP
3444: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3445: LD_ADDR_VAR 0 2
3449: PUSH
3450: DOUBLE
3451: LD_INT 1
3453: DEC
3454: ST_TO_ADDR
3455: LD_INT 4
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_OWVAR 67
3473: ARRAY
3474: PUSH
3475: FOR_TO
3476: IFFALSE 3530
// begin PrepareMechanic ( 0 , game_skill ) ;
3478: LD_INT 0
3480: PPUSH
3481: LD_EXP 39
3485: PPUSH
3486: CALL_OW 383
// un := CreateHuman ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// filter := filter ^ un ;
3500: LD_ADDR_VAR 0 3
3504: PUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_VAR 0 4
3514: ADD
3515: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_INT 8
3523: PPUSH
3524: CALL_OW 52
// end ;
3528: GO 3475
3530: POP
3531: POP
// for i = 1 to 2 do
3532: LD_ADDR_VAR 0 2
3536: PUSH
3537: DOUBLE
3538: LD_INT 1
3540: DEC
3541: ST_TO_ADDR
3542: LD_INT 2
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3600
// begin PrepareScientist ( 0 , game_skill ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_EXP 39
3555: PPUSH
3556: CALL_OW 384
// un := CreateHuman ;
3560: LD_ADDR_VAR 0 4
3564: PUSH
3565: CALL_OW 44
3569: ST_TO_ADDR
// filter := filter ^ un ;
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_VAR 0 3
3579: PUSH
3580: LD_VAR 0 4
3584: ADD
3585: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3586: LD_VAR 0 4
3590: PPUSH
3591: LD_INT 14
3593: PPUSH
3594: CALL_OW 52
// end ;
3598: GO 3545
3600: POP
3601: POP
// for i = 1 to soldiers do
3602: LD_ADDR_VAR 0 2
3606: PUSH
3607: DOUBLE
3608: LD_INT 1
3610: DEC
3611: ST_TO_ADDR
3612: LD_VAR 0 5
3616: PUSH
3617: FOR_TO
3618: IFFALSE 3643
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3620: LD_VAR 0 5
3624: PUSH
3625: LD_VAR 0 2
3629: ARRAY
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 0
3636: PPUSH
3637: CALL_OW 49
3641: GO 3617
3643: POP
3644: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3645: LD_EXP 9
3649: PPUSH
3650: LD_INT 51
3652: PPUSH
3653: LD_INT 43
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3663: LD_EXP 10
3667: PPUSH
3668: LD_INT 55
3670: PPUSH
3671: LD_INT 58
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3681: LD_EXP 11
3685: PPUSH
3686: LD_INT 39
3688: PPUSH
3689: LD_INT 36
3691: PPUSH
3692: LD_INT 0
3694: PPUSH
3695: CALL_OW 48
// BetaSquad := filter diff 0 ;
3699: LD_ADDR_EXP 12
3703: PUSH
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 0
3711: DIFF
3712: ST_TO_ADDR
// end ;
3713: LD_VAR 0 1
3717: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
// uc_side := 6 ;
3726: LD_ADDR_OWVAR 20
3730: PUSH
3731: LD_INT 6
3733: ST_TO_ADDR
// uc_nation := nation_russian ;
3734: LD_ADDR_OWVAR 21
3738: PUSH
3739: LD_INT 3
3741: ST_TO_ADDR
// soldiers := [ ] ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// vehs := [ ] ;
3749: LD_ADDR_VAR 0 6
3753: PUSH
3754: EMPTY
3755: ST_TO_ADDR
// RUArmada := [ ] ;
3756: LD_ADDR_EXP 17
3760: PUSH
3761: EMPTY
3762: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3763: LD_ADDR_EXP 13
3767: PUSH
3768: LD_STRING Yashin
3770: PPUSH
3771: CALL_OW 25
3775: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3776: LD_ADDR_EXP 14
3780: PUSH
3781: LD_STRING Popov
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3789: LD_ADDR_EXP 15
3793: PUSH
3794: LD_STRING Gaydar
3796: PPUSH
3797: CALL_OW 25
3801: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3802: LD_ADDR_EXP 16
3806: PUSH
3807: LD_STRING Vsevolod
3809: PPUSH
3810: CALL_OW 25
3814: ST_TO_ADDR
// for i = 1 to 16 do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: DOUBLE
3821: LD_INT 1
3823: DEC
3824: ST_TO_ADDR
3825: LD_INT 16
3827: PUSH
3828: FOR_TO
3829: IFFALSE 3871
// begin PrepareSoldier ( 0 , game_eskill ) ;
3831: LD_INT 0
3833: PPUSH
3834: LD_EXP 40
3838: PPUSH
3839: CALL_OW 381
// un := CreateHuman ;
3843: LD_ADDR_VAR 0 5
3847: PUSH
3848: CALL_OW 44
3852: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_VAR 0 4
3862: PUSH
3863: LD_VAR 0 5
3867: ADD
3868: ST_TO_ADDR
// end ;
3869: GO 3828
3871: POP
3872: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: LD_EXP 13
3882: PUSH
3883: LD_EXP 14
3887: ADD
3888: PUSH
3889: LD_EXP 15
3893: ADD
3894: PUSH
3895: LD_EXP 16
3899: ADD
3900: PUSH
3901: LD_VAR 0 4
3905: ADD
3906: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3907: LD_INT 24
3909: PPUSH
3910: LD_INT 3
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 46
3918: PPUSH
3919: LD_INT 100
3921: PPUSH
3922: CALL 18290 0 5
// for i = 1 to 8 do
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: DOUBLE
3932: LD_INT 1
3934: DEC
3935: ST_TO_ADDR
3936: LD_INT 8
3938: PUSH
3939: FOR_TO
3940: IFFALSE 4023
// begin vehicle := CreateVehicle ;
3942: LD_ADDR_VAR 0 3
3946: PUSH
3947: CALL_OW 45
3951: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3952: LD_VAR 0 4
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_VAR 0 3
3965: PPUSH
3966: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3970: LD_ADDR_VAR 0 4
3974: PUSH
3975: LD_VAR 0 4
3979: PUSH
3980: LD_VAR 0 4
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: DIFF
3989: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_INT 5
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// vehs := vehs ^ vehicle ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_VAR 0 6
4014: PUSH
4015: LD_VAR 0 3
4019: ADD
4020: ST_TO_ADDR
// end ;
4021: GO 3939
4023: POP
4024: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
4025: LD_INT 24
4027: PPUSH
4028: LD_INT 3
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: LD_INT 43
4036: PPUSH
4037: LD_INT 100
4039: PPUSH
4040: CALL 18290 0 5
// for i = 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4141
// begin vehicle := CreateVehicle ;
4060: LD_ADDR_VAR 0 3
4064: PUSH
4065: CALL_OW 45
4069: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4070: LD_VAR 0 4
4074: PUSH
4075: LD_INT 1
4077: ARRAY
4078: PPUSH
4079: LD_VAR 0 3
4083: PPUSH
4084: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: LD_VAR 0 4
4097: PUSH
4098: LD_VAR 0 4
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: DIFF
4107: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: CALL_OW 49
// vehs := vehs ^ vehicle ;
4123: LD_ADDR_VAR 0 6
4127: PUSH
4128: LD_VAR 0 6
4132: PUSH
4133: LD_VAR 0 3
4137: ADD
4138: ST_TO_ADDR
// end ;
4139: GO 4057
4141: POP
4142: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4143: LD_INT 22
4145: PPUSH
4146: LD_INT 3
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 44
4154: PPUSH
4155: LD_INT 100
4157: PPUSH
4158: CALL 18290 0 5
// for i = 1 to 4 do
4162: LD_ADDR_VAR 0 2
4166: PUSH
4167: DOUBLE
4168: LD_INT 1
4170: DEC
4171: ST_TO_ADDR
4172: LD_INT 4
4174: PUSH
4175: FOR_TO
4176: IFFALSE 4259
// begin vehicle := CreateVehicle ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: CALL_OW 45
4187: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4188: LD_VAR 0 4
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: PPUSH
4197: LD_VAR 0 3
4201: PPUSH
4202: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4206: LD_ADDR_VAR 0 4
4210: PUSH
4211: LD_VAR 0 4
4215: PUSH
4216: LD_VAR 0 4
4220: PUSH
4221: LD_INT 1
4223: ARRAY
4224: DIFF
4225: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 5
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// vehs := vehs ^ vehicle ;
4241: LD_ADDR_VAR 0 6
4245: PUSH
4246: LD_VAR 0 6
4250: PUSH
4251: LD_VAR 0 3
4255: ADD
4256: ST_TO_ADDR
// end ;
4257: GO 4175
4259: POP
4260: POP
// RUArmada := vehs ;
4261: LD_ADDR_EXP 17
4265: PUSH
4266: LD_VAR 0 6
4270: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4271: LD_EXP 13
4275: PPUSH
4276: CALL_OW 310
4280: PUSH
4281: LD_EXP 14
4285: PPUSH
4286: CALL_OW 310
4290: PUSH
4291: LD_EXP 15
4295: PPUSH
4296: CALL_OW 310
4300: PUSH
4301: LD_EXP 16
4305: PPUSH
4306: CALL_OW 310
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: PPUSH
4317: LD_INT 6
4319: NEG
4320: PPUSH
4321: CALL_OW 242
// end ;
4325: LD_VAR 0 1
4329: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4330: LD_INT 0
4332: PPUSH
4333: PPUSH
4334: PPUSH
// uc_side := 6 ;
4335: LD_ADDR_OWVAR 20
4339: PUSH
4340: LD_INT 6
4342: ST_TO_ADDR
// uc_nation := nation_russian ;
4343: LD_ADDR_OWVAR 21
4347: PUSH
4348: LD_INT 3
4350: ST_TO_ADDR
// Bulldozers := [ ] ;
4351: LD_ADDR_EXP 18
4355: PUSH
4356: EMPTY
4357: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4358: LD_INT 24
4360: PPUSH
4361: LD_INT 3
4363: PPUSH
4364: LD_INT 3
4366: PPUSH
4367: LD_INT 53
4369: PPUSH
4370: LD_INT 100
4372: PPUSH
4373: CALL 18290 0 5
// for i = 1 to 2 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 2
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4436
// begin vehicle := CreateVehicle ;
4393: LD_ADDR_VAR 0 3
4397: PUSH
4398: CALL_OW 45
4402: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_INT 5
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4418: LD_ADDR_EXP 18
4422: PUSH
4423: LD_EXP 18
4427: PUSH
4428: LD_VAR 0 3
4432: ADD
4433: ST_TO_ADDR
// end ;
4434: GO 4390
4436: POP
4437: POP
// end ;
4438: LD_VAR 0 1
4442: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
4447: PPUSH
4448: PPUSH
// uc_side := 3 ;
4449: LD_ADDR_OWVAR 20
4453: PUSH
4454: LD_INT 3
4456: ST_TO_ADDR
// uc_nation := nation_russian ;
4457: LD_ADDR_OWVAR 21
4461: PUSH
4462: LD_INT 3
4464: ST_TO_ADDR
// hc_name :=  ;
4465: LD_ADDR_OWVAR 26
4469: PUSH
4470: LD_STRING 
4472: ST_TO_ADDR
// hc_gallery :=  ;
4473: LD_ADDR_OWVAR 33
4477: PUSH
4478: LD_STRING 
4480: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4481: LD_ADDR_EXP 19
4485: PUSH
4486: LD_STRING Burlak
4488: PPUSH
4489: CALL_OW 25
4493: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4494: LD_ADDR_EXP 20
4498: PUSH
4499: LD_STRING Gleb
4501: PPUSH
4502: CALL_OW 25
4506: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4507: LD_ADDR_EXP 21
4511: PUSH
4512: LD_STRING Furmanov
4514: PPUSH
4515: CALL_OW 25
4519: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4520: LD_ADDR_EXP 22
4524: PUSH
4525: LD_STRING Titov
4527: PPUSH
4528: CALL_OW 25
4532: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4533: LD_ADDR_EXP 23
4537: PUSH
4538: LD_STRING Scholtze
4540: PPUSH
4541: CALL_OW 25
4545: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4546: LD_ADDR_EXP 24
4550: PUSH
4551: LD_STRING Dolgov
4553: PPUSH
4554: CALL_OW 25
4558: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4559: LD_ADDR_EXP 25
4563: PUSH
4564: LD_STRING Kapitsova
4566: PPUSH
4567: CALL_OW 25
4571: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4572: LD_ADDR_EXP 26
4576: PUSH
4577: LD_STRING Karamazov
4579: PPUSH
4580: CALL_OW 25
4584: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4585: LD_ADDR_EXP 27
4589: PUSH
4590: LD_STRING Kirlenkova
4592: PPUSH
4593: CALL_OW 25
4597: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4598: LD_ADDR_EXP 28
4602: PUSH
4603: LD_STRING Kovalyuk
4605: PPUSH
4606: CALL_OW 25
4610: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4611: LD_ADDR_EXP 29
4615: PUSH
4616: LD_STRING Kozlov
4618: PPUSH
4619: CALL_OW 25
4623: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4624: LD_ADDR_EXP 30
4628: PUSH
4629: LD_STRING Kuzmov
4631: PPUSH
4632: CALL_OW 25
4636: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4637: LD_ADDR_EXP 31
4641: PUSH
4642: LD_STRING Lipshchin
4644: PPUSH
4645: CALL_OW 25
4649: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4650: LD_ADDR_EXP 32
4654: PUSH
4655: LD_STRING Oblukov
4657: PPUSH
4658: CALL_OW 25
4662: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4663: LD_ADDR_EXP 33
4667: PUSH
4668: LD_STRING Xavier2
4670: PPUSH
4671: CALL_OW 25
4675: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4676: LD_ADDR_EXP 34
4680: PUSH
4681: LD_STRING Gnyevko
4683: PPUSH
4684: CALL_OW 25
4688: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4689: LD_ADDR_EXP 35
4693: PUSH
4694: LD_STRING Belkov
4696: PPUSH
4697: CALL_OW 25
4701: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4702: LD_ADDR_VAR 0 3
4706: PUSH
4707: LD_EXP 19
4711: PUSH
4712: LD_EXP 20
4716: PUSH
4717: LD_EXP 21
4721: PUSH
4722: LD_EXP 22
4726: PUSH
4727: LD_EXP 23
4731: PUSH
4732: LD_EXP 24
4736: PUSH
4737: LD_EXP 25
4741: PUSH
4742: LD_EXP 26
4746: PUSH
4747: LD_EXP 27
4751: PUSH
4752: LD_EXP 28
4756: PUSH
4757: LD_EXP 29
4761: PUSH
4762: LD_EXP 30
4766: PUSH
4767: LD_EXP 31
4771: PUSH
4772: LD_EXP 32
4776: PUSH
4777: LD_EXP 33
4781: PUSH
4782: LD_EXP 34
4786: PUSH
4787: LD_EXP 35
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: ST_TO_ADDR
// for i = 1 to filter do
4811: LD_ADDR_VAR 0 2
4815: PUSH
4816: DOUBLE
4817: LD_INT 1
4819: DEC
4820: ST_TO_ADDR
4821: LD_VAR 0 3
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4829: LD_VAR 0 3
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: PPUSH
4840: LD_INT 6
4842: PPUSH
4843: LD_INT 0
4845: PPUSH
4846: CALL_OW 49
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
4863: PPUSH
4864: PPUSH
// uc_side := 3 ;
4865: LD_ADDR_OWVAR 20
4869: PUSH
4870: LD_INT 3
4872: ST_TO_ADDR
// uc_nation := nation_russian ;
4873: LD_ADDR_OWVAR 21
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// hc_name :=  ;
4881: LD_ADDR_OWVAR 26
4885: PUSH
4886: LD_STRING 
4888: ST_TO_ADDR
// hc_gallery :=  ;
4889: LD_ADDR_OWVAR 33
4893: PUSH
4894: LD_STRING 
4896: ST_TO_ADDR
// for i = 1 to 8 do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 8
4909: PUSH
4910: FOR_TO
4911: IFFALSE 4953
// begin PrepareSoldier ( 0 , game_eskill ) ;
4913: LD_INT 0
4915: PPUSH
4916: LD_EXP 40
4920: PPUSH
4921: CALL_OW 381
// un := CreateHuman ;
4925: LD_ADDR_VAR 0 4
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// filter := filter ^ un ;
4935: LD_ADDR_VAR 0 3
4939: PUSH
4940: LD_VAR 0 3
4944: PUSH
4945: LD_VAR 0 4
4949: ADD
4950: ST_TO_ADDR
// end ;
4951: GO 4910
4953: POP
4954: POP
// for i = 1 to 4 do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 4
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5011
// begin PrepareEngineer ( 0 , game_eskill ) ;
4971: LD_INT 0
4973: PPUSH
4974: LD_EXP 40
4978: PPUSH
4979: CALL_OW 382
// un := CreateHuman ;
4983: LD_ADDR_VAR 0 4
4987: PUSH
4988: CALL_OW 44
4992: ST_TO_ADDR
// filter := filter ^ un ;
4993: LD_ADDR_VAR 0 3
4997: PUSH
4998: LD_VAR 0 3
5002: PUSH
5003: LD_VAR 0 4
5007: ADD
5008: ST_TO_ADDR
// end ;
5009: GO 4968
5011: POP
5012: POP
// for i = 1 to 6 do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_INT 6
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5069
// begin PrepareMechanic ( 0 , game_eskill ) ;
5029: LD_INT 0
5031: PPUSH
5032: LD_EXP 40
5036: PPUSH
5037: CALL_OW 383
// un := CreateHuman ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: CALL_OW 44
5050: ST_TO_ADDR
// filter := filter ^ un ;
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 4
5065: ADD
5066: ST_TO_ADDR
// end ;
5067: GO 5026
5069: POP
5070: POP
// for i = 1 to 4 do
5071: LD_ADDR_VAR 0 2
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_INT 4
5083: PUSH
5084: FOR_TO
5085: IFFALSE 5127
// begin PrepareScientist ( 0 , game_eskill ) ;
5087: LD_INT 0
5089: PPUSH
5090: LD_EXP 40
5094: PPUSH
5095: CALL_OW 384
// un := CreateHuman ;
5099: LD_ADDR_VAR 0 4
5103: PUSH
5104: CALL_OW 44
5108: ST_TO_ADDR
// filter := filter ^ un ;
5109: LD_ADDR_VAR 0 3
5113: PUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 4
5123: ADD
5124: ST_TO_ADDR
// end ;
5125: GO 5084
5127: POP
5128: POP
// for i = 1 to filter do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: DOUBLE
5135: LD_INT 1
5137: DEC
5138: ST_TO_ADDR
5139: LD_VAR 0 3
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5170
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5147: LD_VAR 0 3
5151: PUSH
5152: LD_VAR 0 2
5156: ARRAY
5157: PPUSH
5158: LD_INT 6
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
5168: GO 5144
5170: POP
5171: POP
// RU_SecondPersonnel := filter ;
5172: LD_ADDR_EXP 36
5176: PUSH
5177: LD_VAR 0 3
5181: ST_TO_ADDR
// end ;
5182: LD_VAR 0 1
5186: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5187: LD_INT 0
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
5193: PPUSH
5194: PPUSH
5195: PPUSH
// uc_side := 1 ;
5196: LD_ADDR_OWVAR 20
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// uc_nation := nation_american ;
5204: LD_ADDR_OWVAR 21
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5212: LD_ADDR_EXP 37
5216: PUSH
5217: LD_STRING JMM
5219: PPUSH
5220: CALL_OW 25
5224: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5225: LD_EXP 37
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5237: LD_EXP 37
5241: PPUSH
5242: LD_INT 7
5244: PPUSH
5245: LD_INT 0
5247: PPUSH
5248: CALL_OW 49
// mechs := [ ] ;
5252: LD_ADDR_VAR 0 7
5256: PUSH
5257: EMPTY
5258: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5259: LD_ADDR_VAR 0 2
5263: PUSH
5264: DOUBLE
5265: LD_INT 1
5267: DEC
5268: ST_TO_ADDR
5269: LD_INT 4
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5351
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5292: LD_INT 0
5294: PPUSH
5295: LD_EXP 39
5299: PUSH
5300: LD_INT 1
5302: PLUS
5303: PPUSH
5304: CALL_OW 381
// un := CreateHuman ;
5308: LD_ADDR_VAR 0 4
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_VAR 0 3
5327: PUSH
5328: LD_VAR 0 4
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 7
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5289
5351: POP
5352: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_INT 7
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_OWVAR 67
5381: ARRAY
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5430
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5386: LD_INT 0
5388: PPUSH
5389: LD_EXP 39
5393: PUSH
5394: LD_INT 1
5396: PLUS
5397: PPUSH
5398: CALL_OW 383
// un := CreateHuman ;
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: CALL_OW 44
5411: ST_TO_ADDR
// mechs := mechs ^ un ;
5412: LD_ADDR_VAR 0 7
5416: PUSH
5417: LD_VAR 0 7
5421: PUSH
5422: LD_VAR 0 4
5426: ADD
5427: ST_TO_ADDR
// end ;
5428: GO 5383
5430: POP
5431: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5432: LD_INT 3
5434: PPUSH
5435: LD_INT 3
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 5
5443: PPUSH
5444: LD_INT 100
5446: PPUSH
5447: CALL 18290 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 7
5463: PUSH
5464: LD_INT 6
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5577
// begin vehicle := CreateVehicle ;
5484: LD_ADDR_VAR 0 6
5488: PUSH
5489: CALL_OW 45
5493: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5494: LD_VAR 0 7
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: PPUSH
5503: LD_VAR 0 6
5507: PPUSH
5508: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5512: LD_ADDR_VAR 0 7
5516: PUSH
5517: LD_VAR 0 7
5521: PUSH
5522: LD_VAR 0 7
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: DIFF
5531: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5532: LD_VAR 0 6
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5544: LD_VAR 0 6
5548: PPUSH
5549: LD_INT 7
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL_OW 49
// vehs := vehs ^ vehicle ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_VAR 0 5
5568: PUSH
5569: LD_VAR 0 6
5573: ADD
5574: ST_TO_ADDR
// end ;
5575: GO 5481
5577: POP
5578: POP
// end ; end_of_file
5579: LD_VAR 0 1
5583: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5584: LD_INT 0
5586: PPUSH
5587: PPUSH
5588: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5589: LD_ADDR_OWVAR 67
5593: PUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 426
5601: ST_TO_ADDR
// game_diff := Difficulty ;
5602: LD_ADDR_EXP 38
5606: PUSH
5607: LD_OWVAR 67
5611: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5612: LD_ADDR_EXP 39
5616: PUSH
5617: LD_INT 7
5619: PUSH
5620: LD_INT 6
5622: PUSH
5623: LD_INT 6
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_EXP 38
5635: ARRAY
5636: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5637: LD_ADDR_EXP 40
5641: PUSH
5642: LD_INT 6
5644: PUSH
5645: LD_INT 7
5647: PUSH
5648: LD_INT 8
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: PUSH
5656: LD_EXP 38
5660: ARRAY
5661: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5662: LD_ADDR_EXP 42
5666: PUSH
5667: LD_INT 10500
5669: PUSH
5670: LD_INT 6300
5672: PUSH
5673: LD_INT 4200
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: LD_EXP 38
5685: ARRAY
5686: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5687: LD_ADDR_EXP 41
5691: PUSH
5692: LD_INT 73500
5694: PUSH
5695: LD_INT 94500
5697: PUSH
5698: LD_INT 115500
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_EXP 38
5710: ARRAY
5711: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 51
5719: PUSH
5720: EMPTY
5721: LIST
5722: PUSH
5723: LD_INT 51
5725: PUSH
5726: LD_INT 57
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 51
5735: PUSH
5736: LD_INT 52
5738: PUSH
5739: LD_INT 57
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5752: LD_ADDR_EXP 43
5756: PUSH
5757: LD_INT 300
5759: PUSH
5760: LD_INT 350
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 230
5769: PUSH
5770: LD_INT 200
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 150
5779: PUSH
5780: LD_INT 100
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PUSH
5792: LD_EXP 38
5796: ARRAY
5797: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5798: LD_ADDR_VAR 0 2
5802: PUSH
5803: DOUBLE
5804: LD_INT 1
5806: DEC
5807: ST_TO_ADDR
5808: LD_VAR 0 3
5812: PUSH
5813: LD_EXP 38
5817: ARRAY
5818: PUSH
5819: FOR_TO
5820: IFFALSE 5878
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5822: LD_VAR 0 3
5826: PUSH
5827: LD_EXP 38
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PPUSH
5839: LD_INT 3
5841: PPUSH
5842: LD_INT 2
5844: PPUSH
5845: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5849: LD_VAR 0 3
5853: PUSH
5854: LD_EXP 38
5858: ARRAY
5859: PUSH
5860: LD_VAR 0 2
5864: ARRAY
5865: PPUSH
5866: LD_INT 6
5868: PPUSH
5869: LD_INT 2
5871: PPUSH
5872: CALL_OW 322
// end ;
5876: GO 5819
5878: POP
5879: POP
// end ; end_of_file
5880: LD_VAR 0 1
5884: RET
// export function CustomEvent ( event ) ; begin
5885: LD_INT 0
5887: PPUSH
// end ;
5888: LD_VAR 0 2
5892: RET
// export function CustomInitMacro ( ) ; begin
5893: LD_INT 0
5895: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5896: LD_INT 1
5898: PPUSH
5899: LD_INT 3
5901: PPUSH
5902: CALL 74894 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5906: LD_INT 1
5908: PPUSH
5909: LD_INT 4
5911: PPUSH
5912: CALL 74838 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5916: LD_INT 1
5918: PPUSH
5919: LD_INT 136
5921: PUSH
5922: LD_INT 130
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 145
5935: PUSH
5936: LD_INT 123
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL 73897 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5955: LD_INT 1
5957: PPUSH
5958: LD_INT 43
5960: PUSH
5961: LD_INT 46
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL 74726 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5976: LD_INT 1
5978: PPUSH
5979: LD_INT 3
5981: PPUSH
5982: CALL 74408 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5986: LD_INT 1
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: CALL 74139 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5996: LD_INT 1
5998: PPUSH
5999: LD_INT 8
6001: PPUSH
6002: CALL 73758 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
6006: LD_INT 1
6008: PPUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 43
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: LD_INT 3
6035: PUSH
6036: LD_INT 44
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 1
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 45
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 24
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: LD_INT 43
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 24
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 46
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 22
6119: PUSH
6120: LD_INT 1
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: LD_INT 43
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: LD_INT 3
6143: PUSH
6144: LD_INT 44
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL 73573 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6167: LD_INT 1
6169: PPUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 127
6175: PUSH
6176: LD_INT 125
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 6
6190: PUSH
6191: LD_INT 124
6193: PUSH
6194: LD_INT 132
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 29
6208: PUSH
6209: LD_INT 136
6211: PUSH
6212: LD_INT 130
6214: PUSH
6215: LD_INT 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 118
6229: PUSH
6230: LD_INT 114
6232: PUSH
6233: LD_INT 2
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 29
6244: PUSH
6245: LD_INT 145
6247: PUSH
6248: LD_INT 123
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 150
6265: PUSH
6266: LD_INT 135
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 26
6280: PUSH
6281: LD_INT 140
6283: PUSH
6284: LD_INT 134
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 26
6298: PUSH
6299: LD_INT 137
6301: PUSH
6302: LD_INT 121
6304: PUSH
6305: LD_INT 5
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 2
6316: PUSH
6317: LD_INT 155
6319: PUSH
6320: LD_INT 130
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 32
6334: PUSH
6335: LD_INT 155
6337: PUSH
6338: LD_INT 130
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 32
6352: PUSH
6353: LD_INT 130
6355: PUSH
6356: LD_INT 114
6358: PUSH
6359: LD_INT 3
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 32
6370: PUSH
6371: LD_INT 142
6373: PUSH
6374: LD_INT 115
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 32
6388: PUSH
6389: LD_INT 153
6391: PUSH
6392: LD_INT 120
6394: PUSH
6395: LD_INT 3
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL 73465 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6423: LD_INT 1
6425: PPUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 12
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PPUSH
6436: CALL 74315 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 155
6445: PPUSH
6446: LD_INT 130
6448: PPUSH
6449: LD_INT 0
6451: PPUSH
6452: LD_INT 24
6454: PUSH
6455: LD_INT 16
6457: PUSH
6458: LD_INT 17
6460: PUSH
6461: LD_INT 18
6463: PUSH
6464: LD_INT 21
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL 74520 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6478: LD_INT 2
6480: PPUSH
6481: LD_INT 3
6483: PPUSH
6484: CALL 74894 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6488: LD_INT 2
6490: PPUSH
6491: LD_INT 4
6493: PPUSH
6494: CALL 74838 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6498: LD_INT 2
6500: PPUSH
6501: LD_INT 84
6503: PUSH
6504: LD_INT 125
6506: PUSH
6507: LD_INT 1
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: PPUSH
6518: CALL 73897 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6522: LD_INT 2
6524: PPUSH
6525: LD_INT 43
6527: PUSH
6528: LD_INT 46
6530: PUSH
6531: LD_INT 45
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PPUSH
6539: CALL 74726 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6543: LD_INT 2
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: CALL 74408 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6553: LD_INT 2
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL 74139 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 8
6568: PPUSH
6569: CALL 73758 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6573: LD_INT 2
6575: PPUSH
6576: LD_INT 22
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: LD_INT 43
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 22
6596: PUSH
6597: LD_INT 3
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 44
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 45
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 24
6632: PUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 43
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 24
6650: PUSH
6651: LD_INT 3
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 43
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 24
6668: PUSH
6669: LD_INT 3
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: LD_INT 46
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_INT 3
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 43
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 44
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL 73573 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6734: LD_INT 2
6736: PPUSH
6737: LD_INT 0
6739: PUSH
6740: LD_INT 96
6742: PUSH
6743: LD_INT 125
6745: PUSH
6746: LD_INT 0
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 6
6757: PUSH
6758: LD_INT 74
6760: PUSH
6761: LD_INT 122
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 84
6778: PUSH
6779: LD_INT 125
6781: PUSH
6782: LD_INT 1
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 28
6793: PUSH
6794: LD_INT 86
6796: PUSH
6797: LD_INT 128
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 28
6811: PUSH
6812: LD_INT 85
6814: PUSH
6815: LD_INT 130
6817: PUSH
6818: LD_INT 2
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 28
6829: PUSH
6830: LD_INT 88
6832: PUSH
6833: LD_INT 132
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 130
6853: PUSH
6854: LD_INT 0
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: LD_INT 99
6868: PUSH
6869: LD_INT 114
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 32
6883: PUSH
6884: LD_INT 72
6886: PUSH
6887: LD_INT 112
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: LD_INT 78
6904: PUSH
6905: LD_INT 110
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 32
6919: PUSH
6920: LD_INT 84
6922: PUSH
6923: LD_INT 110
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 32
6937: PUSH
6938: LD_INT 105
6940: PUSH
6941: LD_INT 117
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL 73465 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6971: LD_INT 2
6973: PPUSH
6974: LD_INT 14
6976: PUSH
6977: LD_INT 11
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL 74315 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6988: LD_INT 2
6990: PPUSH
6991: LD_INT 106
6993: PPUSH
6994: LD_INT 130
6996: PPUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 24
7002: PUSH
7003: LD_INT 16
7005: PUSH
7006: LD_INT 17
7008: PUSH
7009: LD_INT 18
7011: PUSH
7012: LD_INT 21
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL 74520 0 5
// end ;
7026: LD_VAR 0 1
7030: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 30
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: IFFALSE 8202
7061: GO 7063
7063: DISABLE
7064: LD_INT 0
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7072: LD_INT 6300
7074: PUSH
7075: LD_INT 4200
7077: PUSH
7078: LD_INT 2100
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: LD_OWVAR 67
7090: ARRAY
7091: PPUSH
7092: CALL_OW 67
// base := 2 ;
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_INT 2
7103: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7104: LD_INT 22
7106: PUSH
7107: LD_INT 3
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: NOT
7133: IFFALSE 7137
// continue ;
7135: GO 7072
// case Rand ( 1 , 3 ) of 1 :
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 3
7142: PPUSH
7143: CALL_OW 12
7147: PUSH
7148: LD_INT 1
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7156
7154: GO 7332
7156: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 3
7170: PUSH
7171: LD_INT 43
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 3
7188: PUSH
7189: LD_INT 46
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 24
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: LD_INT 43
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 24
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: LD_INT 46
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: LD_INT 45
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 3
7260: PUSH
7261: LD_INT 43
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 3
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: LD_INT 46
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 22
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: LD_INT 45
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7316: LD_VAR 0 2
7320: PPUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: CALL 73621 0 2
// end ; 2 :
7330: GO 7663
7332: LD_INT 2
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7478
7340: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_INT 24
7348: PUSH
7349: LD_INT 3
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: LD_INT 43
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 24
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 3
7372: PUSH
7373: LD_INT 46
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 24
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: LD_INT 43
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: LD_INT 24
7402: PUSH
7403: LD_INT 3
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 46
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 45
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: LD_INT 3
7444: PUSH
7445: LD_INT 45
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7462: LD_VAR 0 2
7466: PPUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: CALL 73621 0 2
// end ; 3 :
7476: GO 7663
7478: LD_INT 3
7480: DOUBLE
7481: EQUAL
7482: IFTRUE 7486
7484: GO 7662
7486: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 43
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_INT 46
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_INT 3
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: LD_INT 43
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 24
7548: PUSH
7549: LD_INT 3
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: LD_INT 46
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 45
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 43
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 24
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 46
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 3
7623: PUSH
7624: LD_INT 3
7626: PUSH
7627: LD_INT 45
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7646: LD_VAR 0 2
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL 73621 0 2
// end ; end ;
7660: GO 7663
7662: POP
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7670: LD_VAR 0 2
7674: PPUSH
7675: CALL 73969 0 1
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7663
// wait ( 0 0$30 ) ;
7685: LD_INT 1050
7687: PPUSH
7688: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_INT 86
7699: PUSH
7700: LD_INT 77
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 63
7709: PUSH
7710: LD_INT 38
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7721: LD_ADDR_VAR 0 4
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 1
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7768: LD_ADDR_VAR 0 6
7772: PUSH
7773: LD_EXP 83
7777: PUSH
7778: LD_VAR 0 2
7782: ARRAY
7783: PUSH
7784: LD_EXP 86
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: DIFF
7795: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7796: LD_ADDR_EXP 83
7800: PUSH
7801: LD_EXP 83
7805: PPUSH
7806: LD_VAR 0 2
7810: PPUSH
7811: LD_EXP 83
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: PUSH
7822: LD_VAR 0 6
7826: DIFF
7827: PPUSH
7828: CALL_OW 1
7832: ST_TO_ADDR
// if not attackers then
7833: LD_VAR 0 6
7837: NOT
7838: IFFALSE 7842
// continue ;
7840: GO 7072
// repeat wait ( 0 0$1 ) ;
7842: LD_INT 35
7844: PPUSH
7845: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7849: LD_VAR 0 6
7853: PPUSH
7854: LD_INT 60
7856: PUSH
7857: EMPTY
7858: LIST
7859: PPUSH
7860: CALL_OW 72
7864: NOT
7865: IFFALSE 7842
// repeat wait ( 0 0$1 ) ;
7867: LD_INT 35
7869: PPUSH
7870: CALL_OW 67
// for i in attackers do
7874: LD_ADDR_VAR 0 1
7878: PUSH
7879: LD_VAR 0 6
7883: PUSH
7884: FOR_IN
7885: IFFALSE 8169
// begin if IsDead ( i ) then
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 301
7896: IFFALSE 7914
// attackers := attackers diff i ;
7898: LD_ADDR_VAR 0 6
7902: PUSH
7903: LD_VAR 0 6
7907: PUSH
7908: LD_VAR 0 1
7912: DIFF
7913: ST_TO_ADDR
// if not HasTask ( i ) then
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 314
7923: NOT
7924: IFFALSE 8167
// begin if not GetTag ( i ) then
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 110
7935: NOT
7936: IFFALSE 8028
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
7938: LD_VAR 0 1
7942: PPUSH
7943: LD_VAR 0 5
7947: PUSH
7948: LD_INT 1
7950: ARRAY
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 5
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
7973: LD_VAR 0 1
7977: PPUSH
7978: LD_VAR 0 5
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PPUSH
7991: LD_VAR 0 5
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PPUSH
8004: CALL_OW 297
8008: PUSH
8009: LD_INT 8
8011: LESS
8012: IFFALSE 8026
// SetTag ( i , 1 ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_INT 1
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8167
// if GetTag ( i ) = 1 then
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 110
8037: PUSH
8038: LD_INT 1
8040: EQUAL
8041: IFFALSE 8133
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_VAR 0 5
8052: PUSH
8053: LD_INT 2
8055: ARRAY
8056: PUSH
8057: LD_INT 1
8059: ARRAY
8060: PPUSH
8061: LD_VAR 0 5
8065: PUSH
8066: LD_INT 2
8068: ARRAY
8069: PUSH
8070: LD_INT 2
8072: ARRAY
8073: PPUSH
8074: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
8078: LD_VAR 0 1
8082: PPUSH
8083: LD_VAR 0 5
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: PPUSH
8096: LD_VAR 0 5
8100: PUSH
8101: LD_INT 2
8103: ARRAY
8104: PUSH
8105: LD_INT 2
8107: ARRAY
8108: PPUSH
8109: CALL_OW 297
8113: PUSH
8114: LD_INT 8
8116: LESS
8117: IFFALSE 8131
// SetTag ( i , 2 ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_INT 2
8126: PPUSH
8127: CALL_OW 109
// end else
8131: GO 8167
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_INT 81
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 69
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 74
8162: PPUSH
8163: CALL_OW 115
// end ; end ;
8167: GO 7884
8169: POP
8170: POP
// until not attackers ;
8171: LD_VAR 0 6
8175: NOT
8176: IFFALSE 7867
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8178: LD_EXP 64
8182: PUSH
8183: LD_VAR 0 2
8187: ARRAY
8188: PPUSH
8189: LD_INT 50
8191: PUSH
8192: EMPTY
8193: LIST
8194: PPUSH
8195: CALL_OW 72
8199: NOT
8200: IFFALSE 7072
// end ;
8202: PPOPN 6
8204: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
8205: LD_INT 22
8207: PUSH
8208: LD_INT 3
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 30
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 69
8233: IFFALSE 9417
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
8246: LD_INT 6300
8248: PUSH
8249: LD_INT 4200
8251: PUSH
8252: LD_INT 2100
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: PUSH
8260: LD_OWVAR 67
8264: ARRAY
8265: PPUSH
8266: CALL_OW 67
// base := 1 ;
8270: LD_ADDR_VAR 0 2
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
8278: LD_INT 22
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 30
8290: PUSH
8291: LD_INT 3
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 69
8306: NOT
8307: IFFALSE 8311
// continue ;
8309: GO 8246
// case Rand ( 1 , 3 ) of 1 :
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 12
8321: PUSH
8322: LD_INT 1
8324: DOUBLE
8325: EQUAL
8326: IFTRUE 8330
8328: GO 8506
8330: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: LD_INT 43
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 24
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 46
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: LD_INT 24
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 43
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_INT 46
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 22
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 45
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 22
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 43
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 24
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: LD_INT 46
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: LD_INT 45
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8490: LD_VAR 0 2
8494: PPUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: CALL 73621 0 2
// end ; 2 :
8504: GO 8875
8506: LD_INT 2
8508: DOUBLE
8509: EQUAL
8510: IFTRUE 8514
8512: GO 8690
8514: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8515: LD_ADDR_VAR 0 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 43
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 24
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: LD_INT 3
8546: PUSH
8547: LD_INT 46
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 24
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 43
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 24
8576: PUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 46
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 22
8594: PUSH
8595: LD_INT 1
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: LD_INT 45
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_INT 1
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: LD_INT 45
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 22
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: LD_INT 3
8636: PUSH
8637: LD_INT 45
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_INT 1
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: LD_INT 45
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_VAR 0 3
8683: PPUSH
8684: CALL 73621 0 2
// end ; 3 :
8688: GO 8875
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8874
8698: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8699: LD_ADDR_VAR 0 3
8703: PUSH
8704: LD_INT 22
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 43
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 24
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: LD_INT 3
8730: PUSH
8731: LD_INT 46
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 22
8742: PUSH
8743: LD_INT 1
8745: PUSH
8746: LD_INT 3
8748: PUSH
8749: LD_INT 43
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 24
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 46
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 1
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 45
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: LD_INT 3
8802: PUSH
8803: LD_INT 43
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 24
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: LD_INT 3
8820: PUSH
8821: LD_INT 46
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 1
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: LD_INT 45
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8858: LD_VAR 0 2
8862: PPUSH
8863: LD_VAR 0 3
8867: PPUSH
8868: CALL 73621 0 2
// end ; end ;
8872: GO 8875
8874: POP
// repeat wait ( 0 0$1 ) ;
8875: LD_INT 35
8877: PPUSH
8878: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL 75039 0 2
8894: PUSH
8895: LD_INT 8
8897: GREATEREQUAL
8898: IFFALSE 8875
// wait ( 0 0$30 ) ;
8900: LD_INT 1050
8902: PPUSH
8903: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8907: LD_ADDR_VAR 0 5
8911: PUSH
8912: LD_INT 144
8914: PUSH
8915: LD_INT 65
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 63
8924: PUSH
8925: LD_INT 38
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8936: LD_ADDR_VAR 0 4
8940: PUSH
8941: LD_INT 0
8943: PUSH
8944: LD_INT 0
8946: PUSH
8947: LD_INT 0
8949: PUSH
8950: LD_INT 1
8952: PUSH
8953: LD_INT 0
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: LD_INT 0
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8983: LD_ADDR_VAR 0 6
8987: PUSH
8988: LD_EXP 83
8992: PUSH
8993: LD_VAR 0 2
8997: ARRAY
8998: PUSH
8999: LD_EXP 86
9003: PUSH
9004: LD_VAR 0 2
9008: ARRAY
9009: DIFF
9010: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
9011: LD_ADDR_EXP 83
9015: PUSH
9016: LD_EXP 83
9020: PPUSH
9021: LD_VAR 0 2
9025: PPUSH
9026: LD_EXP 83
9030: PUSH
9031: LD_VAR 0 2
9035: ARRAY
9036: PUSH
9037: LD_VAR 0 6
9041: DIFF
9042: PPUSH
9043: CALL_OW 1
9047: ST_TO_ADDR
// if not attackers then
9048: LD_VAR 0 6
9052: NOT
9053: IFFALSE 9057
// continue ;
9055: GO 8246
// repeat wait ( 0 0$1 ) ;
9057: LD_INT 35
9059: PPUSH
9060: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
9064: LD_VAR 0 6
9068: PPUSH
9069: LD_INT 60
9071: PUSH
9072: EMPTY
9073: LIST
9074: PPUSH
9075: CALL_OW 72
9079: NOT
9080: IFFALSE 9057
// repeat wait ( 0 0$1 ) ;
9082: LD_INT 35
9084: PPUSH
9085: CALL_OW 67
// for i in attackers do
9089: LD_ADDR_VAR 0 1
9093: PUSH
9094: LD_VAR 0 6
9098: PUSH
9099: FOR_IN
9100: IFFALSE 9384
// begin if IsDead ( i ) then
9102: LD_VAR 0 1
9106: PPUSH
9107: CALL_OW 301
9111: IFFALSE 9129
// attackers := attackers diff i ;
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 6
9122: PUSH
9123: LD_VAR 0 1
9127: DIFF
9128: ST_TO_ADDR
// if not HasTask ( i ) then
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 314
9138: NOT
9139: IFFALSE 9382
// begin if not GetTag ( i ) then
9141: LD_VAR 0 1
9145: PPUSH
9146: CALL_OW 110
9150: NOT
9151: IFFALSE 9243
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_VAR 0 5
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: LD_VAR 0 5
9175: PUSH
9176: LD_INT 1
9178: ARRAY
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PPUSH
9184: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
9188: LD_VAR 0 1
9192: PPUSH
9193: LD_VAR 0 5
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PUSH
9202: LD_INT 1
9204: ARRAY
9205: PPUSH
9206: LD_VAR 0 5
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: CALL_OW 297
9223: PUSH
9224: LD_INT 8
9226: LESS
9227: IFFALSE 9241
// SetTag ( i , 1 ) ;
9229: LD_VAR 0 1
9233: PPUSH
9234: LD_INT 1
9236: PPUSH
9237: CALL_OW 109
// end else
9241: GO 9382
// if GetTag ( i ) = 1 then
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 110
9252: PUSH
9253: LD_INT 1
9255: EQUAL
9256: IFFALSE 9348
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
9258: LD_VAR 0 1
9262: PPUSH
9263: LD_VAR 0 5
9267: PUSH
9268: LD_INT 2
9270: ARRAY
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_VAR 0 5
9280: PUSH
9281: LD_INT 2
9283: ARRAY
9284: PUSH
9285: LD_INT 2
9287: ARRAY
9288: PPUSH
9289: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
9293: LD_VAR 0 1
9297: PPUSH
9298: LD_VAR 0 5
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PUSH
9307: LD_INT 1
9309: ARRAY
9310: PPUSH
9311: LD_VAR 0 5
9315: PUSH
9316: LD_INT 2
9318: ARRAY
9319: PUSH
9320: LD_INT 2
9322: ARRAY
9323: PPUSH
9324: CALL_OW 297
9328: PUSH
9329: LD_INT 8
9331: LESS
9332: IFFALSE 9346
// SetTag ( i , 2 ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 109
// end else
9346: GO 9382
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 81
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 74
9377: PPUSH
9378: CALL_OW 115
// end ; end ;
9382: GO 9099
9384: POP
9385: POP
// until not attackers ;
9386: LD_VAR 0 6
9390: NOT
9391: IFFALSE 9082
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
9393: LD_EXP 64
9397: PUSH
9398: LD_VAR 0 2
9402: ARRAY
9403: PPUSH
9404: LD_INT 50
9406: PUSH
9407: EMPTY
9408: LIST
9409: PPUSH
9410: CALL_OW 72
9414: NOT
9415: IFFALSE 8246
// end ;
9417: PPOPN 6
9419: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9420: LD_EXP 4
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_INT 3
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: PUSH
9454: LD_INT 0
9456: EQUAL
9457: AND
9458: IFFALSE 9471
9460: GO 9462
9462: DISABLE
// RussiansDefeated := true ;
9463: LD_ADDR_EXP 44
9467: PUSH
9468: LD_INT 1
9470: ST_TO_ADDR
9471: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
9472: LD_EXP 4
9476: PUSH
9477: LD_EXP 6
9481: NOT
9482: AND
9483: IFFALSE 10907
9485: GO 9487
9487: DISABLE
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
9502: LD_INT 8400
9504: PPUSH
9505: LD_INT 9450
9507: PPUSH
9508: CALL_OW 12
9512: PUSH
9513: LD_INT 9450
9515: PPUSH
9516: LD_INT 7350
9518: PPUSH
9519: CALL_OW 12
9523: PUSH
9524: LD_INT 6300
9526: PPUSH
9527: LD_INT 4200
9529: PPUSH
9530: CALL_OW 12
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_OWVAR 67
9544: ARRAY
9545: PPUSH
9546: CALL_OW 67
// filter := [ ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: EMPTY
9556: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9557: LD_ADDR_VAR 0 4
9561: PUSH
9562: LD_INT 2
9564: PPUSH
9565: LD_INT 3
9567: PPUSH
9568: CALL_OW 12
9572: PUSH
9573: LD_INT 3
9575: PPUSH
9576: LD_INT 4
9578: PPUSH
9579: CALL_OW 12
9583: PUSH
9584: LD_INT 3
9586: PPUSH
9587: LD_INT 5
9589: PPUSH
9590: CALL_OW 12
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: LD_OWVAR 67
9604: ARRAY
9605: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9606: LD_ADDR_VAR 0 5
9610: PUSH
9611: LD_INT 1
9613: PUSH
9614: LD_INT 1
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: CALL_OW 12
9624: PUSH
9625: LD_INT 2
9627: PPUSH
9628: LD_INT 3
9630: PPUSH
9631: CALL_OW 12
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: LD_OWVAR 67
9645: ARRAY
9646: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9647: LD_ADDR_VAR 0 6
9651: PUSH
9652: LD_INT 2
9654: PPUSH
9655: LD_INT 3
9657: PPUSH
9658: CALL_OW 12
9662: PUSH
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 4
9668: PPUSH
9669: CALL_OW 12
9673: PUSH
9674: LD_INT 3
9676: PPUSH
9677: LD_INT 5
9679: PPUSH
9680: CALL_OW 12
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_OWVAR 67
9694: ARRAY
9695: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9696: LD_ADDR_VAR 0 8
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_INT 2
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: PUSH
9715: LD_OWVAR 67
9719: ARRAY
9720: ST_TO_ADDR
// uc_side := 3 ;
9721: LD_ADDR_OWVAR 20
9725: PUSH
9726: LD_INT 3
9728: ST_TO_ADDR
// uc_nation := nation_russian ;
9729: LD_ADDR_OWVAR 21
9733: PUSH
9734: LD_INT 3
9736: ST_TO_ADDR
// for i = 1 to soldiers do
9737: LD_ADDR_VAR 0 1
9741: PUSH
9742: DOUBLE
9743: LD_INT 1
9745: DEC
9746: ST_TO_ADDR
9747: LD_VAR 0 4
9751: PUSH
9752: FOR_TO
9753: IFFALSE 9795
// begin PrepareSoldier ( 0 , game_eskill ) ;
9755: LD_INT 0
9757: PPUSH
9758: LD_EXP 40
9762: PPUSH
9763: CALL_OW 381
// un := CreateHuman ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: CALL_OW 44
9776: ST_TO_ADDR
// filter := filter ^ un ;
9777: LD_ADDR_VAR 0 3
9781: PUSH
9782: LD_VAR 0 3
9786: PUSH
9787: LD_VAR 0 2
9791: ADD
9792: ST_TO_ADDR
// end ;
9793: GO 9752
9795: POP
9796: POP
// for i = 1 to bazookas do
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_VAR 0 5
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9863
// begin PrepareSoldier ( 0 , game_eskill ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_EXP 40
9822: PPUSH
9823: CALL_OW 381
// hc_class := class_bazooker ;
9827: LD_ADDR_OWVAR 28
9831: PUSH
9832: LD_INT 9
9834: ST_TO_ADDR
// un := CreateHuman ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: CALL_OW 44
9844: ST_TO_ADDR
// filter := filter ^ un ;
9845: LD_ADDR_VAR 0 3
9849: PUSH
9850: LD_VAR 0 3
9854: PUSH
9855: LD_VAR 0 2
9859: ADD
9860: ST_TO_ADDR
// end ;
9861: GO 9812
9863: POP
9864: POP
// for i = 1 to medics do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_VAR 0 8
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9923
// begin PrepareScientist ( 0 , game_eskill ) ;
9883: LD_INT 0
9885: PPUSH
9886: LD_EXP 40
9890: PPUSH
9891: CALL_OW 384
// un := CreateHuman ;
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: CALL_OW 44
9904: ST_TO_ADDR
// filter := filter ^ un ;
9905: LD_ADDR_VAR 0 3
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 2
9919: ADD
9920: ST_TO_ADDR
// end ;
9921: GO 9880
9923: POP
9924: POP
// for i = 1 to vehs do
9925: LD_ADDR_VAR 0 1
9929: PUSH
9930: DOUBLE
9931: LD_INT 1
9933: DEC
9934: ST_TO_ADDR
9935: LD_VAR 0 6
9939: PUSH
9940: FOR_TO
9941: IFFALSE 10133
// begin case Rand ( 1 , 5 ) of 1 :
9943: LD_INT 1
9945: PPUSH
9946: LD_INT 5
9948: PPUSH
9949: CALL_OW 12
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 9984
9962: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
9963: LD_INT 22
9965: PPUSH
9966: LD_INT 3
9968: PPUSH
9969: LD_INT 3
9971: PPUSH
9972: LD_INT 43
9974: PPUSH
9975: LD_INT 100
9977: PPUSH
9978: CALL 18290 0 5
9982: GO 10105
9984: LD_INT 2
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10014
9992: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
9993: LD_INT 22
9995: PPUSH
9996: LD_INT 3
9998: PPUSH
9999: LD_INT 3
10001: PPUSH
10002: LD_INT 44
10004: PPUSH
10005: LD_INT 100
10007: PPUSH
10008: CALL 18290 0 5
10012: GO 10105
10014: LD_INT 3
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10044
10022: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
10023: LD_INT 22
10025: PPUSH
10026: LD_INT 3
10028: PPUSH
10029: LD_INT 3
10031: PPUSH
10032: LD_INT 45
10034: PPUSH
10035: LD_INT 100
10037: PPUSH
10038: CALL 18290 0 5
10042: GO 10105
10044: LD_INT 4
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10074
10052: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
10053: LD_INT 24
10055: PPUSH
10056: LD_INT 3
10058: PPUSH
10059: LD_INT 3
10061: PPUSH
10062: LD_INT 43
10064: PPUSH
10065: LD_INT 100
10067: PPUSH
10068: CALL 18290 0 5
10072: GO 10105
10074: LD_INT 5
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10104
10082: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
10083: LD_INT 24
10085: PPUSH
10086: LD_INT 3
10088: PPUSH
10089: LD_INT 3
10091: PPUSH
10092: LD_INT 46
10094: PPUSH
10095: LD_INT 100
10097: PPUSH
10098: CALL 18290 0 5
10102: GO 10105
10104: POP
// vehicle := CreateVehicle ;
10105: LD_ADDR_VAR 0 7
10109: PUSH
10110: CALL_OW 45
10114: ST_TO_ADDR
// filter := filter ^ vehicle ;
10115: LD_ADDR_VAR 0 3
10119: PUSH
10120: LD_VAR 0 3
10124: PUSH
10125: LD_VAR 0 7
10129: ADD
10130: ST_TO_ADDR
// end ;
10131: GO 9940
10133: POP
10134: POP
// for i = 1 to filter do
10135: LD_ADDR_VAR 0 1
10139: PUSH
10140: DOUBLE
10141: LD_INT 1
10143: DEC
10144: ST_TO_ADDR
10145: LD_VAR 0 3
10149: PUSH
10150: FOR_TO
10151: IFFALSE 10176
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
10153: LD_VAR 0 3
10157: PUSH
10158: LD_VAR 0 1
10162: ARRAY
10163: PPUSH
10164: LD_INT 14
10166: PPUSH
10167: LD_INT 0
10169: PPUSH
10170: CALL_OW 49
10174: GO 10150
10176: POP
10177: POP
// case Rand ( 1 , 3 ) of 1 :
10178: LD_INT 1
10180: PPUSH
10181: LD_INT 3
10183: PPUSH
10184: CALL_OW 12
10188: PUSH
10189: LD_INT 1
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10251
10197: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
10198: LD_ADDR_VAR 0 11
10202: PUSH
10203: LD_INT 165
10205: PUSH
10206: LD_INT 114
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 104
10215: PUSH
10216: LD_INT 108
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 86
10225: PUSH
10226: LD_INT 77
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 63
10235: PUSH
10236: LD_INT 38
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
10249: GO 10376
10251: LD_INT 2
10253: DOUBLE
10254: EQUAL
10255: IFTRUE 10259
10257: GO 10313
10259: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
10260: LD_ADDR_VAR 0 11
10264: PUSH
10265: LD_INT 165
10267: PUSH
10268: LD_INT 114
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 146
10277: PUSH
10278: LD_INT 71
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 112
10287: PUSH
10288: LD_INT 41
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 63
10297: PUSH
10298: LD_INT 38
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
10311: GO 10376
10313: LD_INT 3
10315: DOUBLE
10316: EQUAL
10317: IFTRUE 10321
10319: GO 10375
10321: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
10322: LD_ADDR_VAR 0 11
10326: PUSH
10327: LD_INT 165
10329: PUSH
10330: LD_INT 114
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 63
10339: PUSH
10340: LD_INT 99
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 55
10349: PUSH
10350: LD_INT 77
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 63
10359: PUSH
10360: LD_INT 38
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: ST_TO_ADDR
10373: GO 10376
10375: POP
// attackers := filter ;
10376: LD_ADDR_VAR 0 10
10380: PUSH
10381: LD_VAR 0 3
10385: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// for i in attackers do
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 10
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10898
// begin if IsDead ( i ) then
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 301
10415: IFFALSE 10433
// attackers := attackers diff i ;
10417: LD_ADDR_VAR 0 10
10421: PUSH
10422: LD_VAR 0 10
10426: PUSH
10427: LD_VAR 0 1
10431: DIFF
10432: ST_TO_ADDR
// if not HasTask ( i ) then
10433: LD_VAR 0 1
10437: PPUSH
10438: CALL_OW 314
10442: NOT
10443: IFFALSE 10896
// begin if not GetTag ( i ) then
10445: LD_VAR 0 1
10449: PPUSH
10450: CALL_OW 110
10454: NOT
10455: IFFALSE 10547
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
10457: LD_VAR 0 1
10461: PPUSH
10462: LD_VAR 0 11
10466: PUSH
10467: LD_INT 1
10469: ARRAY
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PPUSH
10475: LD_VAR 0 11
10479: PUSH
10480: LD_INT 1
10482: ARRAY
10483: PUSH
10484: LD_INT 2
10486: ARRAY
10487: PPUSH
10488: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
10492: LD_VAR 0 1
10496: PPUSH
10497: LD_VAR 0 11
10501: PUSH
10502: LD_INT 1
10504: ARRAY
10505: PUSH
10506: LD_INT 1
10508: ARRAY
10509: PPUSH
10510: LD_VAR 0 11
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PUSH
10519: LD_INT 2
10521: ARRAY
10522: PPUSH
10523: CALL_OW 297
10527: PUSH
10528: LD_INT 8
10530: LESS
10531: IFFALSE 10545
// SetTag ( i , 1 ) ;
10533: LD_VAR 0 1
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 109
// end else
10545: GO 10896
// if GetTag ( i ) = 1 then
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 110
10556: PUSH
10557: LD_INT 1
10559: EQUAL
10560: IFFALSE 10652
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
10562: LD_VAR 0 1
10566: PPUSH
10567: LD_VAR 0 11
10571: PUSH
10572: LD_INT 2
10574: ARRAY
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 11
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PUSH
10589: LD_INT 2
10591: ARRAY
10592: PPUSH
10593: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_VAR 0 11
10606: PUSH
10607: LD_INT 2
10609: ARRAY
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_VAR 0 11
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: CALL_OW 297
10632: PUSH
10633: LD_INT 8
10635: LESS
10636: IFFALSE 10650
// SetTag ( i , 2 ) ;
10638: LD_VAR 0 1
10642: PPUSH
10643: LD_INT 2
10645: PPUSH
10646: CALL_OW 109
// end else
10650: GO 10896
// if GetTag ( i ) = 2 then
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 110
10661: PUSH
10662: LD_INT 2
10664: EQUAL
10665: IFFALSE 10757
// begin ComAgressiveMove ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) ;
10667: LD_VAR 0 1
10671: PPUSH
10672: LD_VAR 0 11
10676: PUSH
10677: LD_INT 3
10679: ARRAY
10680: PUSH
10681: LD_INT 1
10683: ARRAY
10684: PPUSH
10685: LD_VAR 0 11
10689: PUSH
10690: LD_INT 3
10692: ARRAY
10693: PUSH
10694: LD_INT 2
10696: ARRAY
10697: PPUSH
10698: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) < 8 then
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_VAR 0 11
10711: PUSH
10712: LD_INT 3
10714: ARRAY
10715: PUSH
10716: LD_INT 1
10718: ARRAY
10719: PPUSH
10720: LD_VAR 0 11
10724: PUSH
10725: LD_INT 3
10727: ARRAY
10728: PUSH
10729: LD_INT 2
10731: ARRAY
10732: PPUSH
10733: CALL_OW 297
10737: PUSH
10738: LD_INT 8
10740: LESS
10741: IFFALSE 10755
// SetTag ( i , 3 ) ;
10743: LD_VAR 0 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 109
// end else
10755: GO 10896
// if GetTag ( i ) = 3 then
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL_OW 110
10766: PUSH
10767: LD_INT 3
10769: EQUAL
10770: IFFALSE 10862
// begin ComAgressiveMove ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) ;
10772: LD_VAR 0 1
10776: PPUSH
10777: LD_VAR 0 11
10781: PUSH
10782: LD_INT 4
10784: ARRAY
10785: PUSH
10786: LD_INT 1
10788: ARRAY
10789: PPUSH
10790: LD_VAR 0 11
10794: PUSH
10795: LD_INT 4
10797: ARRAY
10798: PUSH
10799: LD_INT 2
10801: ARRAY
10802: PPUSH
10803: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) < 8 then
10807: LD_VAR 0 1
10811: PPUSH
10812: LD_VAR 0 11
10816: PUSH
10817: LD_INT 4
10819: ARRAY
10820: PUSH
10821: LD_INT 1
10823: ARRAY
10824: PPUSH
10825: LD_VAR 0 11
10829: PUSH
10830: LD_INT 4
10832: ARRAY
10833: PUSH
10834: LD_INT 2
10836: ARRAY
10837: PPUSH
10838: CALL_OW 297
10842: PUSH
10843: LD_INT 8
10845: LESS
10846: IFFALSE 10860
// SetTag ( i , 4 ) ;
10848: LD_VAR 0 1
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 109
// end else
10860: GO 10896
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10862: LD_VAR 0 1
10866: PPUSH
10867: LD_INT 81
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: PPUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: CALL_OW 74
10891: PPUSH
10892: CALL_OW 115
// end ; end ;
10896: GO 10403
10898: POP
10899: POP
// until not attackers ;
10900: LD_VAR 0 10
10904: NOT
10905: IFFALSE 10386
// end ;
10907: PPOPN 12
10909: END
// every 0 0$1 do var i , tmp ;
10910: GO 10912
10912: DISABLE
10913: LD_INT 0
10915: PPUSH
10916: PPUSH
// begin enable ;
10917: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
10918: LD_ADDR_VAR 0 2
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 32
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: ST_TO_ADDR
// if tmp then
10959: LD_VAR 0 2
10963: IFFALSE 11009
// for i in tmp do
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_VAR 0 2
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11007
// if GetFuel ( i ) < 3 then
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 261
10987: PUSH
10988: LD_INT 3
10990: LESS
10991: IFFALSE 11005
// SetFuel ( i , 3 ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_INT 3
11000: PPUSH
11001: CALL_OW 240
11005: GO 10975
11007: POP
11008: POP
// end ;
11009: PPOPN 2
11011: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do
11012: LD_INT 3
11014: PPUSH
11015: LD_INT 22
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 70
11029: PUSH
11030: LD_EXP 41
11034: NOT
11035: AND
11036: PUSH
11037: LD_INT 10
11039: PPUSH
11040: LD_INT 22
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 70
11054: PUSH
11055: LD_EXP 4
11059: NOT
11060: AND
11061: OR
11062: IFFALSE 11071
11064: GO 11066
11066: DISABLE
// Antirush ;
11067: CALL 11072 0 0
11071: END
// export function Antirush ; var i , veh , tmp , num ; begin
11072: LD_INT 0
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
// tmp := [ ] ;
11079: LD_ADDR_VAR 0 4
11083: PUSH
11084: EMPTY
11085: ST_TO_ADDR
// if not FirstAssaultRepelled then
11086: LD_EXP 4
11090: NOT
11091: IFFALSE 11103
// num := 18 else
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_INT 18
11100: ST_TO_ADDR
11101: GO 11111
// num := 12 ;
11103: LD_ADDR_VAR 0 5
11107: PUSH
11108: LD_INT 12
11110: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_VAR 0 5
11120: PUSH
11121: LD_INT 4
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 0
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: LD_OWVAR 67
11139: ARRAY
11140: MINUS
11141: ST_TO_ADDR
// for i := 1 to num do
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: DOUBLE
11148: LD_INT 1
11150: DEC
11151: ST_TO_ADDR
11152: LD_VAR 0 5
11156: PUSH
11157: FOR_TO
11158: IFFALSE 11297
// begin uc_side := 3 ;
11160: LD_ADDR_OWVAR 20
11164: PUSH
11165: LD_INT 3
11167: ST_TO_ADDR
// uc_nation := 3 ;
11168: LD_ADDR_OWVAR 21
11172: PUSH
11173: LD_INT 3
11175: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
11176: LD_INT 23
11178: PPUSH
11179: LD_INT 3
11181: PPUSH
11182: LD_INT 3
11184: PPUSH
11185: LD_INT 46
11187: PUSH
11188: LD_INT 43
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 1
11197: PPUSH
11198: LD_INT 2
11200: PPUSH
11201: CALL_OW 12
11205: ARRAY
11206: PPUSH
11207: LD_INT 100
11209: PPUSH
11210: CALL 18290 0 5
// veh := CreateVehicle ;
11214: LD_ADDR_VAR 0 3
11218: PUSH
11219: CALL_OW 45
11223: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 5
11231: PPUSH
11232: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 199
11243: PPUSH
11244: LD_INT 135
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: LD_INT 0
11252: PPUSH
11253: CALL_OW 50
// tmp := tmp ^ veh ;
11257: LD_ADDR_VAR 0 4
11261: PUSH
11262: LD_VAR 0 4
11266: PUSH
11267: LD_VAR 0 3
11271: ADD
11272: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 173
11280: PPUSH
11281: LD_INT 118
11283: PPUSH
11284: CALL_OW 111
// wait ( 0 0$2 ) ;
11288: LD_INT 70
11290: PPUSH
11291: CALL_OW 67
// end ;
11295: GO 11157
11297: POP
11298: POP
// repeat wait ( 0 0$1 ) ;
11299: LD_INT 35
11301: PPUSH
11302: CALL_OW 67
// for i in tmp do
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_VAR 0 4
11315: PUSH
11316: FOR_IN
11317: IFFALSE 11384
// if IsDead ( i ) then
11319: LD_VAR 0 2
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11348
// tmp := tmp diff i else
11330: LD_ADDR_VAR 0 4
11334: PUSH
11335: LD_VAR 0 4
11339: PUSH
11340: LD_VAR 0 2
11344: DIFF
11345: ST_TO_ADDR
11346: GO 11382
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
11348: LD_VAR 0 2
11352: PPUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 1
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 74
11377: PPUSH
11378: CALL_OW 115
11382: GO 11316
11384: POP
11385: POP
// until not tmp ;
11386: LD_VAR 0 4
11390: NOT
11391: IFFALSE 11299
// end ; end_of_file
11393: LD_VAR 0 1
11397: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
11398: LD_VAR 0 1
11402: PUSH
11403: LD_EXP 9
11407: EQUAL
11408: IFFALSE 11424
// begin wait ( 0 0$1 ) ;
11410: LD_INT 35
11412: PPUSH
11413: CALL_OW 67
// YouLost ( Brighton ) ;
11417: LD_STRING Brighton
11419: PPUSH
11420: CALL_OW 104
// end ; if un = JMM then
11424: LD_VAR 0 1
11428: PUSH
11429: LD_EXP 37
11433: EQUAL
11434: IFFALSE 11450
// begin wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// YouLost ( JMM ) ;
11443: LD_STRING JMM
11445: PPUSH
11446: CALL_OW 104
// end ; if un = Megan then
11450: LD_VAR 0 1
11454: PUSH
11455: LD_EXP 11
11459: EQUAL
11460: IFFALSE 11474
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
11462: LD_EXP 9
11466: PPUSH
11467: LD_STRING DBrighton-MeganDeath
11469: PPUSH
11470: CALL_OW 88
// end ; if un = Palmer then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 10
11483: EQUAL
11484: IFFALSE 11498
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
11486: LD_EXP 9
11490: PPUSH
11491: LD_STRING DBrighton-PalmerDeath
11493: PPUSH
11494: CALL_OW 88
// end ; if un = Burlak then
11498: LD_VAR 0 1
11502: PUSH
11503: LD_EXP 19
11507: EQUAL
11508: IFFALSE 11540
// begin if JMM_Arrived then
11510: LD_EXP 6
11514: IFFALSE 11528
// Say ( JMM , DJMM-BurlakDead ) ;
11516: LD_EXP 37
11520: PPUSH
11521: LD_STRING DJMM-BurlakDead
11523: PPUSH
11524: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
11528: LD_EXP 10
11532: PPUSH
11533: LD_STRING DSol-BurlakDead
11535: PPUSH
11536: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
11540: LD_VAR 0 1
11544: PUSH
11545: LD_INT 1
11547: EQUAL
11548: PUSH
11549: LD_VAR 0 1
11553: PUSH
11554: LD_INT 3
11556: EQUAL
11557: OR
11558: IFFALSE 11574
// begin wait ( 0 0$1 ) ;
11560: LD_INT 35
11562: PPUSH
11563: CALL_OW 67
// YouLost ( Depot ) ;
11567: LD_STRING Depot
11569: PPUSH
11570: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
11574: LD_VAR 0 1
11578: PPUSH
11579: CALL_OW 255
11583: PUSH
11584: LD_INT 1
11586: EQUAL
11587: PUSH
11588: LD_VAR 0 1
11592: PPUSH
11593: CALL_OW 247
11597: PUSH
11598: LD_INT 1
11600: EQUAL
11601: AND
11602: IFFALSE 11618
// Losses := Losses + 1 ;
11604: LD_ADDR_EXP 45
11608: PUSH
11609: LD_EXP 45
11613: PUSH
11614: LD_INT 1
11616: PLUS
11617: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
11618: LD_VAR 0 1
11622: PPUSH
11623: CALL 77013 0 1
// end ;
11627: PPOPN 1
11629: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
11630: LD_VAR 0 1
11634: PUSH
11635: LD_EXP 13
11639: EQUAL
11640: IFFALSE 11654
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
11642: LD_EXP 13
11646: PPUSH
11647: LD_STRING DDeath-Yas-3
11649: PPUSH
11650: CALL_OW 91
// if un = Popov then
11654: LD_VAR 0 1
11658: PUSH
11659: LD_EXP 14
11663: EQUAL
11664: IFFALSE 11678
// ForceSay ( Popov , DDeath-Pop-3 ) ;
11666: LD_EXP 14
11670: PPUSH
11671: LD_STRING DDeath-Pop-3
11673: PPUSH
11674: CALL_OW 91
// if un = Gaydar then
11678: LD_VAR 0 1
11682: PUSH
11683: LD_EXP 15
11687: EQUAL
11688: IFFALSE 11702
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
11690: LD_EXP 15
11694: PPUSH
11695: LD_STRING DDeath-Gay-3
11697: PPUSH
11698: CALL_OW 91
// if un = Sevi then
11702: LD_VAR 0 1
11706: PUSH
11707: LD_EXP 16
11711: EQUAL
11712: IFFALSE 11726
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
11714: LD_EXP 16
11718: PPUSH
11719: LD_STRING DDeath-Vse-3
11721: PPUSH
11722: CALL_OW 91
// end ;
11726: PPOPN 1
11728: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
11729: LD_VAR 0 1
11733: PUSH
11734: LD_INT 10
11736: EQUAL
11737: IFFALSE 11775
// begin Say ( Brighton , DBrighton-C1 ) ;
11739: LD_EXP 9
11743: PPUSH
11744: LD_STRING DBrighton-C1
11746: PPUSH
11747: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
11751: LD_EXP 11
11755: PPUSH
11756: LD_STRING DMegan-C1
11758: PPUSH
11759: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
11763: LD_EXP 9
11767: PPUSH
11768: LD_STRING DBrighton-C2
11770: PPUSH
11771: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: LD_VAR 0 2
11784: PPUSH
11785: CALL 76709 0 2
// end ;
11789: PPOPN 2
11791: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11792: LD_VAR 0 1
11796: PPUSH
11797: LD_VAR 0 2
11801: PPUSH
11802: CALL 79347 0 2
// end ;
11806: PPOPN 2
11808: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL 78415 0 1
// end ;
11818: PPOPN 1
11820: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 266
11830: PUSH
11831: LD_INT 0
11833: EQUAL
11834: PUSH
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 255
11844: PUSH
11845: LD_INT 3
11847: EQUAL
11848: AND
11849: IFFALSE 11911
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: CALL_OW 274
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: LD_INT 10000
11866: PPUSH
11867: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 274
11880: PPUSH
11881: LD_INT 2
11883: PPUSH
11884: LD_INT 250
11886: PPUSH
11887: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL_OW 274
11900: PPUSH
11901: LD_INT 3
11903: PPUSH
11904: LD_INT 100
11906: PPUSH
11907: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL 78656 0 1
// end ;
11920: PPOPN 1
11922: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11923: LD_VAR 0 1
11927: PPUSH
11928: LD_VAR 0 2
11932: PPUSH
11933: LD_VAR 0 3
11937: PPUSH
11938: LD_VAR 0 4
11942: PPUSH
11943: LD_VAR 0 5
11947: PPUSH
11948: CALL 76329 0 5
// end ;
11952: PPOPN 5
11954: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL 75925 0 2
// end ;
11969: PPOPN 2
11971: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_VAR 0 2
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_VAR 0 4
11991: PPUSH
11992: CALL 75763 0 4
// end ;
11996: PPOPN 4
11998: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11999: LD_VAR 0 1
12003: PPUSH
12004: LD_VAR 0 2
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: CALL 75538 0 3
// end ;
12018: PPOPN 3
12020: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12021: LD_VAR 0 1
12025: PPUSH
12026: LD_VAR 0 2
12030: PPUSH
12031: CALL 75423 0 2
// end ;
12035: PPOPN 2
12037: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12038: LD_VAR 0 1
12042: PPUSH
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL 79608 0 2
// end ;
12052: PPOPN 2
12054: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
12055: LD_VAR 0 1
12059: PPUSH
12060: CALL_OW 255
12064: PUSH
12065: LD_INT 6
12067: EQUAL
12068: IFFALSE 12198
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
12070: LD_VAR 0 1
12074: PUSH
12075: LD_EXP 13
12079: PUSH
12080: LD_EXP 16
12084: PUSH
12085: LD_EXP 15
12089: PUSH
12090: LD_EXP 14
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: IN
12101: IFFALSE 12105
// exit ;
12103: GO 12222
// if AssaultStarted then
12105: LD_EXP 8
12109: IFFALSE 12183
// case Rand ( 1 , 4 ) of 1 .. 3 :
12111: LD_INT 1
12113: PPUSH
12114: LD_INT 4
12116: PPUSH
12117: CALL_OW 12
12121: PUSH
12122: LD_INT 1
12124: DOUBLE
12125: GREATEREQUAL
12126: IFFALSE 12134
12128: LD_INT 3
12130: DOUBLE
12131: LESSEQUAL
12132: IFTRUE 12136
12134: GO 12154
12136: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
12137: LD_VAR 0 1
12141: PPUSH
12142: LD_INT 67
12144: PPUSH
12145: LD_INT 37
12147: PPUSH
12148: CALL_OW 114
12152: GO 12181
12154: LD_INT 4
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12180
12162: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
12163: LD_VAR 0 1
12167: PPUSH
12168: LD_INT 120
12170: PPUSH
12171: LD_INT 131
12173: PPUSH
12174: CALL_OW 111
12178: GO 12181
12180: POP
12181: GO 12198
// ComMoveXY ( driver , 120 , 131 ) ;
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_INT 120
12190: PPUSH
12191: LD_INT 131
12193: PPUSH
12194: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_VAR 0 4
12217: PPUSH
12218: CALL 79824 0 4
// end ;
12222: PPOPN 4
12224: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12225: LD_VAR 0 1
12229: PPUSH
12230: LD_VAR 0 2
12234: PPUSH
12235: CALL 75232 0 2
// end ;
12239: PPOPN 2
12241: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL 91122 0 1
// end ; end_of_file
12251: PPOPN 1
12253: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
12254: LD_EXP 6
12258: PUSH
12259: LD_EXP 44
12263: AND
12264: IFFALSE 12435
12266: GO 12268
12268: DISABLE
// begin wait ( 0 0$2 ) ;
12269: LD_INT 70
12271: PPUSH
12272: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
12276: LD_EXP 9
12280: PPUSH
12281: LD_STRING DBrighton-G1
12283: PPUSH
12284: CALL_OW 88
// if Losses < 1 then
12288: LD_EXP 45
12292: PUSH
12293: LD_INT 1
12295: LESS
12296: IFFALSE 12310
// AddMedal ( Losses , 1 ) else
12298: LD_STRING Losses
12300: PPUSH
12301: LD_INT 1
12303: PPUSH
12304: CALL_OW 101
12308: GO 12343
// if Losses < 5 then
12310: LD_EXP 45
12314: PUSH
12315: LD_INT 5
12317: LESS
12318: IFFALSE 12332
// AddMedal ( Losses , 2 ) else
12320: LD_STRING Losses
12322: PPUSH
12323: LD_INT 2
12325: PPUSH
12326: CALL_OW 101
12330: GO 12343
// AddMedal ( Losses , - 1 ) ;
12332: LD_STRING Losses
12334: PPUSH
12335: LD_INT 1
12337: NEG
12338: PPUSH
12339: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12343: LD_EXP 7
12347: PUSH
12348: LD_INT 10
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 321
12358: PUSH
12359: LD_INT 2
12361: EQUAL
12362: AND
12363: IFFALSE 12377
// AddMedal ( Laser , 1 ) else
12365: LD_STRING Laser
12367: PPUSH
12368: LD_INT 1
12370: PPUSH
12371: CALL_OW 101
12375: GO 12424
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12377: LD_EXP 7
12381: NOT
12382: PUSH
12383: LD_INT 10
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 321
12393: PUSH
12394: LD_INT 2
12396: EQUAL
12397: AND
12398: IFFALSE 12413
// AddMedal ( Laser , - 1 ) else
12400: LD_STRING Laser
12402: PPUSH
12403: LD_INT 1
12405: NEG
12406: PPUSH
12407: CALL_OW 101
12411: GO 12424
// AddMedal ( Laser , - 2 ) ;
12413: LD_STRING Laser
12415: PPUSH
12416: LD_INT 2
12418: NEG
12419: PPUSH
12420: CALL_OW 101
// GiveMedals ( BaseMain ) ;
12424: LD_STRING BaseMain
12426: PPUSH
12427: CALL_OW 102
// YouWin ;
12431: CALL_OW 103
// end ; end_of_file
12435: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
12436: LD_INT 0
12438: PPUSH
12439: PPUSH
// area = ListEnvironmentArea ( area ) ;
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 353
12454: ST_TO_ADDR
// if bulldozer > 0 then
12455: LD_VAR 0 1
12459: PUSH
12460: LD_INT 0
12462: GREATER
12463: IFFALSE 12574
// for i = area downto 1 do
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: DOUBLE
12471: LD_VAR 0 2
12475: INC
12476: ST_TO_ADDR
12477: LD_INT 1
12479: PUSH
12480: FOR_DOWNTO
12481: IFFALSE 12572
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
12483: LD_VAR 0 2
12487: PUSH
12488: LD_VAR 0 4
12492: ARRAY
12493: PUSH
12494: LD_INT 1
12496: ARRAY
12497: PPUSH
12498: LD_VAR 0 2
12502: PUSH
12503: LD_VAR 0 4
12507: ARRAY
12508: PUSH
12509: LD_INT 2
12511: ARRAY
12512: PPUSH
12513: CALL_OW 351
12517: IFFALSE 12570
// if not HasTask ( bulldozer ) then
12519: LD_VAR 0 1
12523: PPUSH
12524: CALL_OW 314
12528: NOT
12529: IFFALSE 12570
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
12531: LD_VAR 0 1
12535: PPUSH
12536: LD_VAR 0 2
12540: PUSH
12541: LD_VAR 0 4
12545: ARRAY
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: LD_VAR 0 2
12555: PUSH
12556: LD_VAR 0 4
12560: ARRAY
12561: PUSH
12562: LD_INT 2
12564: ARRAY
12565: PPUSH
12566: CALL_OW 171
12570: GO 12480
12572: POP
12573: POP
// end ;
12574: LD_VAR 0 3
12578: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
12579: LD_INT 0
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
12588: LD_ADDR_VAR 0 8
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 22
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 21
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 25
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: PPUSH
12633: CALL_OW 72
12637: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
12638: LD_ADDR_VAR 0 9
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_INT 22
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 21
12660: PUSH
12661: LD_INT 1
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 3
12670: PUSH
12671: LD_INT 25
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
12695: LD_ADDR_EXP 47
12699: PUSH
12700: LD_VAR 0 8
12704: PPUSH
12705: LD_VAR 0 9
12709: PPUSH
12710: CALL 13103 0 2
12714: ST_TO_ADDR
// offset = 0 ;
12715: LD_ADDR_VAR 0 7
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// for i := 1 to sold_team do
12723: LD_ADDR_VAR 0 4
12727: PUSH
12728: DOUBLE
12729: LD_INT 1
12731: DEC
12732: ST_TO_ADDR
12733: LD_VAR 0 8
12737: PUSH
12738: FOR_TO
12739: IFFALSE 12870
// begin if IsInUnit ( sold_team [ i ] ) then
12741: LD_VAR 0 8
12745: PUSH
12746: LD_VAR 0 4
12750: ARRAY
12751: PPUSH
12752: CALL_OW 310
12756: IFFALSE 12773
// ComExitBuilding ( sold_team [ i ] ) ;
12758: LD_VAR 0 8
12762: PUSH
12763: LD_VAR 0 4
12767: ARRAY
12768: PPUSH
12769: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
12773: LD_VAR 0 8
12777: PUSH
12778: LD_VAR 0 4
12782: ARRAY
12783: PPUSH
12784: LD_EXP 47
12788: PUSH
12789: LD_INT 1
12791: ARRAY
12792: PUSH
12793: LD_VAR 0 4
12797: PUSH
12798: LD_VAR 0 7
12802: PLUS
12803: ARRAY
12804: PPUSH
12805: LD_EXP 47
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PUSH
12814: LD_VAR 0 4
12818: PUSH
12819: LD_INT 1
12821: PLUS
12822: PUSH
12823: LD_VAR 0 7
12827: PLUS
12828: ARRAY
12829: PPUSH
12830: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
12834: LD_VAR 0 8
12838: PUSH
12839: LD_VAR 0 4
12843: ARRAY
12844: PPUSH
12845: LD_EXP 9
12849: PPUSH
12850: CALL_OW 179
// offset = offset + 1 ;
12854: LD_ADDR_VAR 0 7
12858: PUSH
12859: LD_VAR 0 7
12863: PUSH
12864: LD_INT 1
12866: PLUS
12867: ST_TO_ADDR
// end ;
12868: GO 12738
12870: POP
12871: POP
// offset = 0 ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// tmp = 1 ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: LD_INT 1
12887: ST_TO_ADDR
// for i := 2 to rows do
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: DOUBLE
12894: LD_INT 2
12896: DEC
12897: ST_TO_ADDR
12898: LD_EXP 47
12902: PUSH
12903: FOR_TO
12904: IFFALSE 13096
// begin for x := 1 to sold_team do
12906: LD_ADDR_VAR 0 5
12910: PUSH
12911: DOUBLE
12912: LD_INT 1
12914: DEC
12915: ST_TO_ADDR
12916: LD_VAR 0 8
12920: PUSH
12921: FOR_TO
12922: IFFALSE 13084
// begin if IsInUnit ( civil_team [ tmp ] ) then
12924: LD_VAR 0 9
12928: PUSH
12929: LD_VAR 0 6
12933: ARRAY
12934: PPUSH
12935: CALL_OW 310
12939: IFFALSE 12956
// ComExitBuilding ( civil_team [ tmp ] ) ;
12941: LD_VAR 0 9
12945: PUSH
12946: LD_VAR 0 6
12950: ARRAY
12951: PPUSH
12952: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
12956: LD_VAR 0 9
12960: PUSH
12961: LD_VAR 0 6
12965: ARRAY
12966: PPUSH
12967: LD_EXP 47
12971: PUSH
12972: LD_VAR 0 4
12976: ARRAY
12977: PUSH
12978: LD_VAR 0 5
12982: PUSH
12983: LD_VAR 0 7
12987: PLUS
12988: ARRAY
12989: PPUSH
12990: LD_EXP 47
12994: PUSH
12995: LD_VAR 0 4
12999: ARRAY
13000: PUSH
13001: LD_VAR 0 5
13005: PUSH
13006: LD_INT 1
13008: PLUS
13009: PUSH
13010: LD_VAR 0 7
13014: PLUS
13015: ARRAY
13016: PPUSH
13017: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
13021: LD_VAR 0 9
13025: PUSH
13026: LD_VAR 0 6
13030: ARRAY
13031: PPUSH
13032: LD_EXP 9
13036: PPUSH
13037: CALL_OW 179
// offset = offset + 1 ;
13041: LD_ADDR_VAR 0 7
13045: PUSH
13046: LD_VAR 0 7
13050: PUSH
13051: LD_INT 1
13053: PLUS
13054: ST_TO_ADDR
// if not ( tmp = civil_team ) then
13055: LD_VAR 0 6
13059: PUSH
13060: LD_VAR 0 9
13064: EQUAL
13065: NOT
13066: IFFALSE 13082
// tmp = tmp + 1 ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 6
13077: PUSH
13078: LD_INT 1
13080: PLUS
13081: ST_TO_ADDR
// end ;
13082: GO 12921
13084: POP
13085: POP
// offset = 0 ;
13086: LD_ADDR_VAR 0 7
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// end ;
13094: GO 12903
13096: POP
13097: POP
// end ;
13098: LD_VAR 0 3
13102: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
13103: LD_INT 0
13105: PPUSH
13106: PPUSH
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
13112: PPUSH
13113: PPUSH
13114: PPUSH
// start_pos = [ 65 , 34 ] ;
13115: LD_ADDR_VAR 0 6
13119: PUSH
13120: LD_INT 65
13122: PUSH
13123: LD_INT 34
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: ST_TO_ADDR
// row_size = 0 ;
13130: LD_ADDR_VAR 0 7
13134: PUSH
13135: LD_INT 0
13137: ST_TO_ADDR
// result_rows = [ ] ;
13138: LD_ADDR_VAR 0 9
13142: PUSH
13143: EMPTY
13144: ST_TO_ADDR
// new_row = [ ] ;
13145: LD_ADDR_VAR 0 8
13149: PUSH
13150: EMPTY
13151: ST_TO_ADDR
// for i := 1 to sold_team do
13152: LD_ADDR_VAR 0 4
13156: PUSH
13157: DOUBLE
13158: LD_INT 1
13160: DEC
13161: ST_TO_ADDR
13162: LD_VAR 0 1
13166: PUSH
13167: FOR_TO
13168: IFFALSE 13222
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
13170: LD_ADDR_VAR 0 8
13174: PUSH
13175: LD_VAR 0 8
13179: PUSH
13180: LD_VAR 0 6
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: ADD
13189: PUSH
13190: LD_VAR 0 6
13194: PUSH
13195: LD_INT 2
13197: ARRAY
13198: PUSH
13199: LD_VAR 0 4
13203: PLUS
13204: ADD
13205: ST_TO_ADDR
// row_size = row_size + 1 ;
13206: LD_ADDR_VAR 0 7
13210: PUSH
13211: LD_VAR 0 7
13215: PUSH
13216: LD_INT 1
13218: PLUS
13219: ST_TO_ADDR
// end ;
13220: GO 13167
13222: POP
13223: POP
// result_rows = result_rows ^ [ new_row ] ;
13224: LD_ADDR_VAR 0 9
13228: PUSH
13229: LD_VAR 0 9
13233: PUSH
13234: LD_VAR 0 8
13238: PUSH
13239: EMPTY
13240: LIST
13241: ADD
13242: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
13243: LD_ADDR_VAR 0 10
13247: PUSH
13248: LD_VAR 0 2
13252: PUSH
13253: LD_VAR 0 1
13257: DIV
13258: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
13259: LD_VAR 0 10
13263: PUSH
13264: LD_VAR 0 1
13268: MOD
13269: PUSH
13270: LD_INT 0
13272: GREATER
13273: IFFALSE 13289
// civil_rows = civil_rows + 1 ;
13275: LD_ADDR_VAR 0 10
13279: PUSH
13280: LD_VAR 0 10
13284: PUSH
13285: LD_INT 1
13287: PLUS
13288: ST_TO_ADDR
// offsetX = 2 ;
13289: LD_ADDR_VAR 0 11
13293: PUSH
13294: LD_INT 2
13296: ST_TO_ADDR
// offsetY = 1 ;
13297: LD_ADDR_VAR 0 12
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// for i := 1 to civil_rows do
13305: LD_ADDR_VAR 0 4
13309: PUSH
13310: DOUBLE
13311: LD_INT 1
13313: DEC
13314: ST_TO_ADDR
13315: LD_VAR 0 10
13319: PUSH
13320: FOR_TO
13321: IFFALSE 13449
// begin new_row = [ ] ;
13323: LD_ADDR_VAR 0 8
13327: PUSH
13328: EMPTY
13329: ST_TO_ADDR
// for x := 1 to row_size do
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: DOUBLE
13336: LD_INT 1
13338: DEC
13339: ST_TO_ADDR
13340: LD_VAR 0 7
13344: PUSH
13345: FOR_TO
13346: IFFALSE 13398
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
13348: LD_ADDR_VAR 0 8
13352: PUSH
13353: LD_VAR 0 8
13357: PUSH
13358: LD_VAR 0 6
13362: PUSH
13363: LD_INT 1
13365: ARRAY
13366: PUSH
13367: LD_VAR 0 11
13371: PLUS
13372: ADD
13373: PUSH
13374: LD_VAR 0 6
13378: PUSH
13379: LD_INT 2
13381: ARRAY
13382: PUSH
13383: LD_VAR 0 12
13387: PLUS
13388: PUSH
13389: LD_VAR 0 5
13393: PLUS
13394: ADD
13395: ST_TO_ADDR
// end ;
13396: GO 13345
13398: POP
13399: POP
// result_rows = result_rows ^ [ new_row ] ;
13400: LD_ADDR_VAR 0 9
13404: PUSH
13405: LD_VAR 0 9
13409: PUSH
13410: LD_VAR 0 8
13414: PUSH
13415: EMPTY
13416: LIST
13417: ADD
13418: ST_TO_ADDR
// offsetX = offsetX + 2 ;
13419: LD_ADDR_VAR 0 11
13423: PUSH
13424: LD_VAR 0 11
13428: PUSH
13429: LD_INT 2
13431: PLUS
13432: ST_TO_ADDR
// offsetY = offsetY + 1 ;
13433: LD_ADDR_VAR 0 12
13437: PUSH
13438: LD_VAR 0 12
13442: PUSH
13443: LD_INT 1
13445: PLUS
13446: ST_TO_ADDR
// end ;
13447: GO 13320
13449: POP
13450: POP
// result = result_rows ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_VAR 0 9
13460: ST_TO_ADDR
// end ; end_of_file
13461: LD_VAR 0 3
13465: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13466: LD_INT 0
13468: PPUSH
13469: PPUSH
// if exist_mode then
13470: LD_VAR 0 2
13474: IFFALSE 13499
// unit := CreateCharacter ( prefix & ident ) else
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 3
13485: PUSH
13486: LD_VAR 0 1
13490: STR
13491: PPUSH
13492: CALL_OW 34
13496: ST_TO_ADDR
13497: GO 13514
// unit := NewCharacter ( ident ) ;
13499: LD_ADDR_VAR 0 5
13503: PUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 25
13513: ST_TO_ADDR
// result := unit ;
13514: LD_ADDR_VAR 0 4
13518: PUSH
13519: LD_VAR 0 5
13523: ST_TO_ADDR
// end ;
13524: LD_VAR 0 4
13528: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13529: LD_INT 0
13531: PPUSH
13532: PPUSH
// if not side or not nation then
13533: LD_VAR 0 1
13537: NOT
13538: PUSH
13539: LD_VAR 0 2
13543: NOT
13544: OR
13545: IFFALSE 13549
// exit ;
13547: GO 14313
// case nation of nation_american :
13549: LD_VAR 0 2
13553: PUSH
13554: LD_INT 1
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13776
13562: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13563: LD_ADDR_VAR 0 4
13567: PUSH
13568: LD_INT 35
13570: PUSH
13571: LD_INT 45
13573: PUSH
13574: LD_INT 46
13576: PUSH
13577: LD_INT 47
13579: PUSH
13580: LD_INT 82
13582: PUSH
13583: LD_INT 83
13585: PUSH
13586: LD_INT 84
13588: PUSH
13589: LD_INT 85
13591: PUSH
13592: LD_INT 86
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 6
13603: PUSH
13604: LD_INT 15
13606: PUSH
13607: LD_INT 16
13609: PUSH
13610: LD_INT 7
13612: PUSH
13613: LD_INT 12
13615: PUSH
13616: LD_INT 13
13618: PUSH
13619: LD_INT 10
13621: PUSH
13622: LD_INT 14
13624: PUSH
13625: LD_INT 20
13627: PUSH
13628: LD_INT 21
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 27
13642: PUSH
13643: LD_INT 36
13645: PUSH
13646: LD_INT 69
13648: PUSH
13649: LD_INT 39
13651: PUSH
13652: LD_INT 34
13654: PUSH
13655: LD_INT 40
13657: PUSH
13658: LD_INT 48
13660: PUSH
13661: LD_INT 49
13663: PUSH
13664: LD_INT 50
13666: PUSH
13667: LD_INT 51
13669: PUSH
13670: LD_INT 52
13672: PUSH
13673: LD_INT 53
13675: PUSH
13676: LD_INT 54
13678: PUSH
13679: LD_INT 55
13681: PUSH
13682: LD_INT 56
13684: PUSH
13685: LD_INT 57
13687: PUSH
13688: LD_INT 58
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: LD_INT 60
13696: PUSH
13697: LD_INT 61
13699: PUSH
13700: LD_INT 62
13702: PUSH
13703: LD_INT 80
13705: PUSH
13706: LD_INT 82
13708: PUSH
13709: LD_INT 83
13711: PUSH
13712: LD_INT 84
13714: PUSH
13715: LD_INT 85
13717: PUSH
13718: LD_INT 86
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
13774: GO 14237
13776: LD_INT 2
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 14006
13784: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
13785: LD_ADDR_VAR 0 4
13789: PUSH
13790: LD_INT 35
13792: PUSH
13793: LD_INT 45
13795: PUSH
13796: LD_INT 46
13798: PUSH
13799: LD_INT 47
13801: PUSH
13802: LD_INT 82
13804: PUSH
13805: LD_INT 83
13807: PUSH
13808: LD_INT 84
13810: PUSH
13811: LD_INT 85
13813: PUSH
13814: LD_INT 87
13816: PUSH
13817: LD_INT 70
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: LD_INT 4
13831: PUSH
13832: LD_INT 5
13834: PUSH
13835: LD_INT 6
13837: PUSH
13838: LD_INT 15
13840: PUSH
13841: LD_INT 18
13843: PUSH
13844: LD_INT 7
13846: PUSH
13847: LD_INT 17
13849: PUSH
13850: LD_INT 8
13852: PUSH
13853: LD_INT 20
13855: PUSH
13856: LD_INT 21
13858: PUSH
13859: LD_INT 22
13861: PUSH
13862: LD_INT 72
13864: PUSH
13865: LD_INT 26
13867: PUSH
13868: LD_INT 69
13870: PUSH
13871: LD_INT 39
13873: PUSH
13874: LD_INT 40
13876: PUSH
13877: LD_INT 41
13879: PUSH
13880: LD_INT 42
13882: PUSH
13883: LD_INT 43
13885: PUSH
13886: LD_INT 48
13888: PUSH
13889: LD_INT 49
13891: PUSH
13892: LD_INT 50
13894: PUSH
13895: LD_INT 51
13897: PUSH
13898: LD_INT 52
13900: PUSH
13901: LD_INT 53
13903: PUSH
13904: LD_INT 54
13906: PUSH
13907: LD_INT 55
13909: PUSH
13910: LD_INT 56
13912: PUSH
13913: LD_INT 60
13915: PUSH
13916: LD_INT 61
13918: PUSH
13919: LD_INT 62
13921: PUSH
13922: LD_INT 66
13924: PUSH
13925: LD_INT 67
13927: PUSH
13928: LD_INT 68
13930: PUSH
13931: LD_INT 81
13933: PUSH
13934: LD_INT 82
13936: PUSH
13937: LD_INT 83
13939: PUSH
13940: LD_INT 84
13942: PUSH
13943: LD_INT 85
13945: PUSH
13946: LD_INT 87
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: ST_TO_ADDR
14004: GO 14237
14006: LD_INT 3
14008: DOUBLE
14009: EQUAL
14010: IFTRUE 14014
14012: GO 14236
14014: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14015: LD_ADDR_VAR 0 4
14019: PUSH
14020: LD_INT 46
14022: PUSH
14023: LD_INT 47
14025: PUSH
14026: LD_INT 1
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 82
14034: PUSH
14035: LD_INT 83
14037: PUSH
14038: LD_INT 84
14040: PUSH
14041: LD_INT 85
14043: PUSH
14044: LD_INT 86
14046: PUSH
14047: LD_INT 11
14049: PUSH
14050: LD_INT 9
14052: PUSH
14053: LD_INT 20
14055: PUSH
14056: LD_INT 19
14058: PUSH
14059: LD_INT 21
14061: PUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_INT 25
14070: PUSH
14071: LD_INT 28
14073: PUSH
14074: LD_INT 29
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: LD_INT 31
14082: PUSH
14083: LD_INT 37
14085: PUSH
14086: LD_INT 38
14088: PUSH
14089: LD_INT 32
14091: PUSH
14092: LD_INT 27
14094: PUSH
14095: LD_INT 33
14097: PUSH
14098: LD_INT 69
14100: PUSH
14101: LD_INT 39
14103: PUSH
14104: LD_INT 34
14106: PUSH
14107: LD_INT 40
14109: PUSH
14110: LD_INT 71
14112: PUSH
14113: LD_INT 23
14115: PUSH
14116: LD_INT 44
14118: PUSH
14119: LD_INT 48
14121: PUSH
14122: LD_INT 49
14124: PUSH
14125: LD_INT 50
14127: PUSH
14128: LD_INT 51
14130: PUSH
14131: LD_INT 52
14133: PUSH
14134: LD_INT 53
14136: PUSH
14137: LD_INT 54
14139: PUSH
14140: LD_INT 55
14142: PUSH
14143: LD_INT 56
14145: PUSH
14146: LD_INT 57
14148: PUSH
14149: LD_INT 58
14151: PUSH
14152: LD_INT 59
14154: PUSH
14155: LD_INT 63
14157: PUSH
14158: LD_INT 64
14160: PUSH
14161: LD_INT 65
14163: PUSH
14164: LD_INT 82
14166: PUSH
14167: LD_INT 83
14169: PUSH
14170: LD_INT 84
14172: PUSH
14173: LD_INT 85
14175: PUSH
14176: LD_INT 86
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 14237
14236: POP
// if state > - 1 and state < 3 then
14237: LD_VAR 0 3
14241: PUSH
14242: LD_INT 1
14244: NEG
14245: GREATER
14246: PUSH
14247: LD_VAR 0 3
14251: PUSH
14252: LD_INT 3
14254: LESS
14255: AND
14256: IFFALSE 14313
// for i in result do
14258: LD_ADDR_VAR 0 5
14262: PUSH
14263: LD_VAR 0 4
14267: PUSH
14268: FOR_IN
14269: IFFALSE 14311
// if GetTech ( i , side ) <> state then
14271: LD_VAR 0 5
14275: PPUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 321
14285: PUSH
14286: LD_VAR 0 3
14290: NONEQUAL
14291: IFFALSE 14309
// result := result diff i ;
14293: LD_ADDR_VAR 0 4
14297: PUSH
14298: LD_VAR 0 4
14302: PUSH
14303: LD_VAR 0 5
14307: DIFF
14308: ST_TO_ADDR
14309: GO 14268
14311: POP
14312: POP
// end ;
14313: LD_VAR 0 4
14317: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14318: LD_INT 0
14320: PPUSH
14321: PPUSH
14322: PPUSH
// result := true ;
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: LD_INT 1
14330: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14331: LD_ADDR_VAR 0 5
14335: PUSH
14336: LD_VAR 0 2
14340: PPUSH
14341: CALL_OW 480
14345: ST_TO_ADDR
// if not tmp then
14346: LD_VAR 0 5
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 14404
// for i in tmp do
14355: LD_ADDR_VAR 0 4
14359: PUSH
14360: LD_VAR 0 5
14364: PUSH
14365: FOR_IN
14366: IFFALSE 14402
// if GetTech ( i , side ) <> state_researched then
14368: LD_VAR 0 4
14372: PPUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 321
14382: PUSH
14383: LD_INT 2
14385: NONEQUAL
14386: IFFALSE 14400
// begin result := false ;
14388: LD_ADDR_VAR 0 3
14392: PUSH
14393: LD_INT 0
14395: ST_TO_ADDR
// exit ;
14396: POP
14397: POP
14398: GO 14404
// end ;
14400: GO 14365
14402: POP
14403: POP
// end ;
14404: LD_VAR 0 3
14408: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14409: LD_INT 0
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14424: LD_VAR 0 1
14428: NOT
14429: PUSH
14430: LD_VAR 0 1
14434: PPUSH
14435: CALL_OW 257
14439: PUSH
14440: LD_INT 9
14442: NONEQUAL
14443: OR
14444: IFFALSE 14448
// exit ;
14446: GO 15021
// side := GetSide ( unit ) ;
14448: LD_ADDR_VAR 0 9
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 255
14462: ST_TO_ADDR
// tech_space := tech_spacanom ;
14463: LD_ADDR_VAR 0 12
14467: PUSH
14468: LD_INT 29
14470: ST_TO_ADDR
// tech_time := tech_taurad ;
14471: LD_ADDR_VAR 0 13
14475: PUSH
14476: LD_INT 28
14478: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14479: LD_ADDR_VAR 0 11
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 310
14493: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14494: LD_VAR 0 11
14498: PPUSH
14499: CALL_OW 247
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14511
// exit ;
14509: GO 15021
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14511: LD_ADDR_VAR 0 8
14515: PUSH
14516: LD_INT 81
14518: PUSH
14519: LD_VAR 0 9
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 3
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: ST_TO_ADDR
// if not tmp then
14554: LD_VAR 0 8
14558: NOT
14559: IFFALSE 14563
// exit ;
14561: GO 15021
// if in_unit then
14563: LD_VAR 0 11
14567: IFFALSE 14591
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14569: LD_ADDR_VAR 0 10
14573: PUSH
14574: LD_VAR 0 8
14578: PPUSH
14579: LD_VAR 0 11
14583: PPUSH
14584: CALL_OW 74
14588: ST_TO_ADDR
14589: GO 14611
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14591: LD_ADDR_VAR 0 10
14595: PUSH
14596: LD_VAR 0 8
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 74
14610: ST_TO_ADDR
// if not enemy then
14611: LD_VAR 0 10
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 15021
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14620: LD_VAR 0 11
14624: PUSH
14625: LD_VAR 0 11
14629: PPUSH
14630: LD_VAR 0 10
14634: PPUSH
14635: CALL_OW 296
14639: PUSH
14640: LD_INT 13
14642: GREATER
14643: AND
14644: PUSH
14645: LD_VAR 0 1
14649: PPUSH
14650: LD_VAR 0 10
14654: PPUSH
14655: CALL_OW 296
14659: PUSH
14660: LD_INT 12
14662: GREATER
14663: OR
14664: IFFALSE 14668
// exit ;
14666: GO 15021
// missile := [ 1 ] ;
14668: LD_ADDR_VAR 0 14
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14679: LD_VAR 0 9
14683: PPUSH
14684: LD_VAR 0 12
14688: PPUSH
14689: CALL_OW 325
14693: IFFALSE 14722
// missile := Insert ( missile , missile + 1 , 2 ) ;
14695: LD_ADDR_VAR 0 14
14699: PUSH
14700: LD_VAR 0 14
14704: PPUSH
14705: LD_VAR 0 14
14709: PUSH
14710: LD_INT 1
14712: PLUS
14713: PPUSH
14714: LD_INT 2
14716: PPUSH
14717: CALL_OW 2
14721: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14722: LD_VAR 0 9
14726: PPUSH
14727: LD_VAR 0 13
14731: PPUSH
14732: CALL_OW 325
14736: PUSH
14737: LD_VAR 0 10
14741: PPUSH
14742: CALL_OW 255
14746: PPUSH
14747: LD_VAR 0 13
14751: PPUSH
14752: CALL_OW 325
14756: NOT
14757: AND
14758: IFFALSE 14787
// missile := Insert ( missile , missile + 1 , 3 ) ;
14760: LD_ADDR_VAR 0 14
14764: PUSH
14765: LD_VAR 0 14
14769: PPUSH
14770: LD_VAR 0 14
14774: PUSH
14775: LD_INT 1
14777: PLUS
14778: PPUSH
14779: LD_INT 3
14781: PPUSH
14782: CALL_OW 2
14786: ST_TO_ADDR
// if missile < 2 then
14787: LD_VAR 0 14
14791: PUSH
14792: LD_INT 2
14794: LESS
14795: IFFALSE 14799
// exit ;
14797: GO 15021
// x := GetX ( enemy ) ;
14799: LD_ADDR_VAR 0 4
14803: PUSH
14804: LD_VAR 0 10
14808: PPUSH
14809: CALL_OW 250
14813: ST_TO_ADDR
// y := GetY ( enemy ) ;
14814: LD_ADDR_VAR 0 5
14818: PUSH
14819: LD_VAR 0 10
14823: PPUSH
14824: CALL_OW 251
14828: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14829: LD_ADDR_VAR 0 6
14833: PUSH
14834: LD_VAR 0 4
14838: PUSH
14839: LD_INT 1
14841: NEG
14842: PPUSH
14843: LD_INT 1
14845: PPUSH
14846: CALL_OW 12
14850: PLUS
14851: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14852: LD_ADDR_VAR 0 7
14856: PUSH
14857: LD_VAR 0 5
14861: PUSH
14862: LD_INT 1
14864: NEG
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 12
14873: PLUS
14874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14875: LD_VAR 0 6
14879: PPUSH
14880: LD_VAR 0 7
14884: PPUSH
14885: CALL_OW 488
14889: NOT
14890: IFFALSE 14912
// begin _x := x ;
14892: LD_ADDR_VAR 0 6
14896: PUSH
14897: LD_VAR 0 4
14901: ST_TO_ADDR
// _y := y ;
14902: LD_ADDR_VAR 0 7
14906: PUSH
14907: LD_VAR 0 5
14911: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: LD_INT 1
14919: PPUSH
14920: LD_VAR 0 14
14924: PPUSH
14925: CALL_OW 12
14929: ST_TO_ADDR
// case i of 1 :
14930: LD_VAR 0 3
14934: PUSH
14935: LD_INT 1
14937: DOUBLE
14938: EQUAL
14939: IFTRUE 14943
14941: GO 14960
14943: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14944: LD_VAR 0 1
14948: PPUSH
14949: LD_VAR 0 10
14953: PPUSH
14954: CALL_OW 115
14958: GO 15021
14960: LD_INT 2
14962: DOUBLE
14963: EQUAL
14964: IFTRUE 14968
14966: GO 14990
14968: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14969: LD_VAR 0 1
14973: PPUSH
14974: LD_VAR 0 6
14978: PPUSH
14979: LD_VAR 0 7
14983: PPUSH
14984: CALL_OW 153
14988: GO 15021
14990: LD_INT 3
14992: DOUBLE
14993: EQUAL
14994: IFTRUE 14998
14996: GO 15020
14998: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14999: LD_VAR 0 1
15003: PPUSH
15004: LD_VAR 0 6
15008: PPUSH
15009: LD_VAR 0 7
15013: PPUSH
15014: CALL_OW 154
15018: GO 15021
15020: POP
// end ;
15021: LD_VAR 0 2
15025: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15026: LD_INT 0
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
// if not unit or not building then
15034: LD_VAR 0 1
15038: NOT
15039: PUSH
15040: LD_VAR 0 2
15044: NOT
15045: OR
15046: IFFALSE 15050
// exit ;
15048: GO 15208
// x := GetX ( building ) ;
15050: LD_ADDR_VAR 0 5
15054: PUSH
15055: LD_VAR 0 2
15059: PPUSH
15060: CALL_OW 250
15064: ST_TO_ADDR
// y := GetY ( building ) ;
15065: LD_ADDR_VAR 0 6
15069: PUSH
15070: LD_VAR 0 2
15074: PPUSH
15075: CALL_OW 251
15079: ST_TO_ADDR
// for i = 0 to 5 do
15080: LD_ADDR_VAR 0 4
15084: PUSH
15085: DOUBLE
15086: LD_INT 0
15088: DEC
15089: ST_TO_ADDR
15090: LD_INT 5
15092: PUSH
15093: FOR_TO
15094: IFFALSE 15206
// begin _x := ShiftX ( x , i , 3 ) ;
15096: LD_ADDR_VAR 0 7
15100: PUSH
15101: LD_VAR 0 5
15105: PPUSH
15106: LD_VAR 0 4
15110: PPUSH
15111: LD_INT 3
15113: PPUSH
15114: CALL_OW 272
15118: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: LD_VAR 0 6
15128: PPUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: CALL_OW 273
15141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15142: LD_VAR 0 7
15146: PPUSH
15147: LD_VAR 0 8
15151: PPUSH
15152: CALL_OW 488
15156: NOT
15157: IFFALSE 15161
// continue ;
15159: GO 15093
// if HexInfo ( _x , _y ) = 0 then
15161: LD_VAR 0 7
15165: PPUSH
15166: LD_VAR 0 8
15170: PPUSH
15171: CALL_OW 428
15175: PUSH
15176: LD_INT 0
15178: EQUAL
15179: IFFALSE 15204
// begin ComMoveXY ( unit , _x , _y ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: LD_VAR 0 7
15190: PPUSH
15191: LD_VAR 0 8
15195: PPUSH
15196: CALL_OW 111
// exit ;
15200: POP
15201: POP
15202: GO 15208
// end ; end ;
15204: GO 15093
15206: POP
15207: POP
// end ;
15208: LD_VAR 0 3
15212: RET
// export function ScanBase ( side , base_area ) ; begin
15213: LD_INT 0
15215: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15216: LD_ADDR_VAR 0 3
15220: PUSH
15221: LD_VAR 0 2
15225: PPUSH
15226: LD_INT 81
15228: PUSH
15229: LD_VAR 0 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 70
15242: ST_TO_ADDR
// end ;
15243: LD_VAR 0 3
15247: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15248: LD_INT 0
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
// result := false ;
15254: LD_ADDR_VAR 0 2
15258: PUSH
15259: LD_INT 0
15261: ST_TO_ADDR
// side := GetSide ( unit ) ;
15262: LD_ADDR_VAR 0 3
15266: PUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 255
15276: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15277: LD_ADDR_VAR 0 4
15281: PUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 248
15291: ST_TO_ADDR
// case nat of 1 :
15292: LD_VAR 0 4
15296: PUSH
15297: LD_INT 1
15299: DOUBLE
15300: EQUAL
15301: IFTRUE 15305
15303: GO 15316
15305: POP
// tech := tech_lassight ; 2 :
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: LD_INT 12
15313: ST_TO_ADDR
15314: GO 15355
15316: LD_INT 2
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15335
15324: POP
// tech := tech_mortar ; 3 :
15325: LD_ADDR_VAR 0 5
15329: PUSH
15330: LD_INT 41
15332: ST_TO_ADDR
15333: GO 15355
15335: LD_INT 3
15337: DOUBLE
15338: EQUAL
15339: IFTRUE 15343
15341: GO 15354
15343: POP
// tech := tech_bazooka ; end ;
15344: LD_ADDR_VAR 0 5
15348: PUSH
15349: LD_INT 44
15351: ST_TO_ADDR
15352: GO 15355
15354: POP
// if Researched ( side , tech ) then
15355: LD_VAR 0 3
15359: PPUSH
15360: LD_VAR 0 5
15364: PPUSH
15365: CALL_OW 325
15369: IFFALSE 15396
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_INT 5
15378: PUSH
15379: LD_INT 8
15381: PUSH
15382: LD_INT 9
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: LD_VAR 0 4
15394: ARRAY
15395: ST_TO_ADDR
// end ;
15396: LD_VAR 0 2
15400: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15401: LD_INT 0
15403: PPUSH
15404: PPUSH
15405: PPUSH
// if not mines then
15406: LD_VAR 0 2
15410: NOT
15411: IFFALSE 15415
// exit ;
15413: GO 15559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15415: LD_ADDR_VAR 0 5
15419: PUSH
15420: LD_INT 81
15422: PUSH
15423: LD_VAR 0 1
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 3
15434: PUSH
15435: LD_INT 21
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// for i in mines do
15458: LD_ADDR_VAR 0 4
15462: PUSH
15463: LD_VAR 0 2
15467: PUSH
15468: FOR_IN
15469: IFFALSE 15557
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15471: LD_VAR 0 4
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PPUSH
15480: LD_VAR 0 4
15484: PUSH
15485: LD_INT 2
15487: ARRAY
15488: PPUSH
15489: CALL_OW 458
15493: NOT
15494: IFFALSE 15498
// continue ;
15496: GO 15468
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15498: LD_VAR 0 4
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: PPUSH
15507: LD_VAR 0 4
15511: PUSH
15512: LD_INT 2
15514: ARRAY
15515: PPUSH
15516: CALL_OW 428
15520: PUSH
15521: LD_VAR 0 5
15525: IN
15526: IFFALSE 15555
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15528: LD_VAR 0 4
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PPUSH
15537: LD_VAR 0 4
15541: PUSH
15542: LD_INT 2
15544: ARRAY
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 456
// end ;
15555: GO 15468
15557: POP
15558: POP
// end ;
15559: LD_VAR 0 3
15563: RET
// export function Count ( array ) ; var i ; begin
15564: LD_INT 0
15566: PPUSH
15567: PPUSH
// result := 0 ;
15568: LD_ADDR_VAR 0 2
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// for i in array do
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_VAR 0 1
15585: PUSH
15586: FOR_IN
15587: IFFALSE 15611
// if i then
15589: LD_VAR 0 3
15593: IFFALSE 15609
// result := result + 1 ;
15595: LD_ADDR_VAR 0 2
15599: PUSH
15600: LD_VAR 0 2
15604: PUSH
15605: LD_INT 1
15607: PLUS
15608: ST_TO_ADDR
15609: GO 15586
15611: POP
15612: POP
// end ;
15613: LD_VAR 0 2
15617: RET
// export function IsEmpty ( building ) ; begin
15618: LD_INT 0
15620: PPUSH
// if not building then
15621: LD_VAR 0 1
15625: NOT
15626: IFFALSE 15630
// exit ;
15628: GO 15673
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_VAR 0 1
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_VAR 0 1
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 58
15659: PUSH
15660: EMPTY
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PPUSH
15667: CALL_OW 69
15671: IN
15672: ST_TO_ADDR
// end ;
15673: LD_VAR 0 2
15677: RET
// export function IsNotFull ( building ) ; begin
15678: LD_INT 0
15680: PPUSH
// if not building then
15681: LD_VAR 0 1
15685: NOT
15686: IFFALSE 15690
// exit ;
15688: GO 15709
// result := UnitsInside ( building ) < 6 ;
15690: LD_ADDR_VAR 0 2
15694: PUSH
15695: LD_VAR 0 1
15699: PPUSH
15700: CALL_OW 313
15704: PUSH
15705: LD_INT 6
15707: LESS
15708: ST_TO_ADDR
// end ;
15709: LD_VAR 0 2
15713: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
// tmp := [ ] ;
15720: LD_ADDR_VAR 0 3
15724: PUSH
15725: EMPTY
15726: ST_TO_ADDR
// list := [ ] ;
15727: LD_ADDR_VAR 0 5
15731: PUSH
15732: EMPTY
15733: ST_TO_ADDR
// for i = 16 to 25 do
15734: LD_ADDR_VAR 0 4
15738: PUSH
15739: DOUBLE
15740: LD_INT 16
15742: DEC
15743: ST_TO_ADDR
15744: LD_INT 25
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15821
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15750: LD_ADDR_VAR 0 3
15754: PUSH
15755: LD_VAR 0 3
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 255
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 91
15779: PUSH
15780: LD_VAR 0 1
15784: PUSH
15785: LD_INT 6
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 30
15795: PUSH
15796: LD_VAR 0 4
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: ADD
15818: ST_TO_ADDR
15819: GO 15747
15821: POP
15822: POP
// for i = 1 to tmp do
15823: LD_ADDR_VAR 0 4
15827: PUSH
15828: DOUBLE
15829: LD_INT 1
15831: DEC
15832: ST_TO_ADDR
15833: LD_VAR 0 3
15837: PUSH
15838: FOR_TO
15839: IFFALSE 15927
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15841: LD_ADDR_VAR 0 5
15845: PUSH
15846: LD_VAR 0 5
15850: PUSH
15851: LD_VAR 0 3
15855: PUSH
15856: LD_VAR 0 4
15860: ARRAY
15861: PPUSH
15862: CALL_OW 266
15866: PUSH
15867: LD_VAR 0 3
15871: PUSH
15872: LD_VAR 0 4
15876: ARRAY
15877: PPUSH
15878: CALL_OW 250
15882: PUSH
15883: LD_VAR 0 3
15887: PUSH
15888: LD_VAR 0 4
15892: ARRAY
15893: PPUSH
15894: CALL_OW 251
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 4
15908: ARRAY
15909: PPUSH
15910: CALL_OW 254
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: ADD
15924: ST_TO_ADDR
15925: GO 15838
15927: POP
15928: POP
// result := list ;
15929: LD_ADDR_VAR 0 2
15933: PUSH
15934: LD_VAR 0 5
15938: ST_TO_ADDR
// end ;
15939: LD_VAR 0 2
15943: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15944: LD_INT 0
15946: PPUSH
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
15952: PPUSH
// if not factory then
15953: LD_VAR 0 1
15957: NOT
15958: IFFALSE 15962
// exit ;
15960: GO 16555
// if control = control_apeman then
15962: LD_VAR 0 4
15966: PUSH
15967: LD_INT 5
15969: EQUAL
15970: IFFALSE 16079
// begin tmp := UnitsInside ( factory ) ;
15972: LD_ADDR_VAR 0 8
15976: PUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 313
15986: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15987: LD_VAR 0 8
15991: PPUSH
15992: LD_INT 25
15994: PUSH
15995: LD_INT 12
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PPUSH
16002: CALL_OW 72
16006: NOT
16007: IFFALSE 16017
// control := control_manual ;
16009: LD_ADDR_VAR 0 4
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16017: LD_ADDR_VAR 0 8
16021: PUSH
16022: LD_VAR 0 1
16026: PPUSH
16027: CALL 15714 0 1
16031: ST_TO_ADDR
// if tmp then
16032: LD_VAR 0 8
16036: IFFALSE 16079
// begin for i in tmp do
16038: LD_ADDR_VAR 0 7
16042: PUSH
16043: LD_VAR 0 8
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16077
// if i [ 1 ] = b_ext_radio then
16051: LD_VAR 0 7
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PUSH
16060: LD_INT 22
16062: EQUAL
16063: IFFALSE 16075
// begin control := control_remote ;
16065: LD_ADDR_VAR 0 4
16069: PUSH
16070: LD_INT 2
16072: ST_TO_ADDR
// break ;
16073: GO 16077
// end ;
16075: GO 16048
16077: POP
16078: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16079: LD_VAR 0 1
16083: PPUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 3
16093: PPUSH
16094: LD_VAR 0 4
16098: PPUSH
16099: LD_VAR 0 5
16103: PPUSH
16104: CALL_OW 448
16108: IFFALSE 16143
// begin result := [ chassis , engine , control , weapon ] ;
16110: LD_ADDR_VAR 0 6
16114: PUSH
16115: LD_VAR 0 2
16119: PUSH
16120: LD_VAR 0 3
16124: PUSH
16125: LD_VAR 0 4
16129: PUSH
16130: LD_VAR 0 5
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: ST_TO_ADDR
// exit ;
16141: GO 16555
// end ; _chassis := AvailableChassisList ( factory ) ;
16143: LD_ADDR_VAR 0 9
16147: PUSH
16148: LD_VAR 0 1
16152: PPUSH
16153: CALL_OW 475
16157: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16158: LD_ADDR_VAR 0 11
16162: PUSH
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 476
16172: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16173: LD_ADDR_VAR 0 12
16177: PUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 477
16187: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16188: LD_ADDR_VAR 0 10
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 478
16202: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16203: LD_VAR 0 9
16207: NOT
16208: PUSH
16209: LD_VAR 0 11
16213: NOT
16214: OR
16215: PUSH
16216: LD_VAR 0 12
16220: NOT
16221: OR
16222: PUSH
16223: LD_VAR 0 10
16227: NOT
16228: OR
16229: IFFALSE 16264
// begin result := [ chassis , engine , control , weapon ] ;
16231: LD_ADDR_VAR 0 6
16235: PUSH
16236: LD_VAR 0 2
16240: PUSH
16241: LD_VAR 0 3
16245: PUSH
16246: LD_VAR 0 4
16250: PUSH
16251: LD_VAR 0 5
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: ST_TO_ADDR
// exit ;
16262: GO 16555
// end ; if not chassis in _chassis then
16264: LD_VAR 0 2
16268: PUSH
16269: LD_VAR 0 9
16273: IN
16274: NOT
16275: IFFALSE 16301
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_VAR 0 9
16286: PUSH
16287: LD_INT 1
16289: PPUSH
16290: LD_VAR 0 9
16294: PPUSH
16295: CALL_OW 12
16299: ARRAY
16300: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16301: LD_VAR 0 2
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: CALL 16560 0 2
16315: NOT
16316: IFFALSE 16375
// repeat engine := _engine [ 1 ] ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: LD_VAR 0 11
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16332: LD_ADDR_VAR 0 11
16336: PUSH
16337: LD_VAR 0 11
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 3
16349: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16350: LD_VAR 0 2
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: CALL 16560 0 2
16364: PUSH
16365: LD_VAR 0 11
16369: PUSH
16370: EMPTY
16371: EQUAL
16372: OR
16373: IFFALSE 16318
// if not control in _control then
16375: LD_VAR 0 4
16379: PUSH
16380: LD_VAR 0 12
16384: IN
16385: NOT
16386: IFFALSE 16412
// control := _control [ rand ( 1 , _control ) ] ;
16388: LD_ADDR_VAR 0 4
16392: PUSH
16393: LD_VAR 0 12
16397: PUSH
16398: LD_INT 1
16400: PPUSH
16401: LD_VAR 0 12
16405: PPUSH
16406: CALL_OW 12
16410: ARRAY
16411: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16412: LD_VAR 0 2
16416: PPUSH
16417: LD_VAR 0 5
16421: PPUSH
16422: CALL 16780 0 2
16426: NOT
16427: IFFALSE 16486
// repeat weapon := _weapon [ 1 ] ;
16429: LD_ADDR_VAR 0 5
16433: PUSH
16434: LD_VAR 0 10
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16443: LD_ADDR_VAR 0 10
16447: PUSH
16448: LD_VAR 0 10
16452: PPUSH
16453: LD_INT 1
16455: PPUSH
16456: CALL_OW 3
16460: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16461: LD_VAR 0 2
16465: PPUSH
16466: LD_VAR 0 5
16470: PPUSH
16471: CALL 16780 0 2
16475: PUSH
16476: LD_VAR 0 10
16480: PUSH
16481: EMPTY
16482: EQUAL
16483: OR
16484: IFFALSE 16429
// result := [ ] ;
16486: LD_ADDR_VAR 0 6
16490: PUSH
16491: EMPTY
16492: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16493: LD_VAR 0 1
16497: PPUSH
16498: LD_VAR 0 2
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: LD_VAR 0 4
16512: PPUSH
16513: LD_VAR 0 5
16517: PPUSH
16518: CALL_OW 448
16522: IFFALSE 16555
// result := [ chassis , engine , control , weapon ] ;
16524: LD_ADDR_VAR 0 6
16528: PUSH
16529: LD_VAR 0 2
16533: PUSH
16534: LD_VAR 0 3
16538: PUSH
16539: LD_VAR 0 4
16543: PUSH
16544: LD_VAR 0 5
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: ST_TO_ADDR
// end ;
16555: LD_VAR 0 6
16559: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16560: LD_INT 0
16562: PPUSH
// if not chassis or not engine then
16563: LD_VAR 0 1
16567: NOT
16568: PUSH
16569: LD_VAR 0 2
16573: NOT
16574: OR
16575: IFFALSE 16579
// exit ;
16577: GO 16775
// case engine of engine_solar :
16579: LD_VAR 0 2
16583: PUSH
16584: LD_INT 2
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16630
16592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16593: LD_ADDR_VAR 0 3
16597: PUSH
16598: LD_INT 11
16600: PUSH
16601: LD_INT 12
16603: PUSH
16604: LD_INT 13
16606: PUSH
16607: LD_INT 14
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: ST_TO_ADDR
16628: GO 16759
16630: LD_INT 1
16632: DOUBLE
16633: EQUAL
16634: IFTRUE 16638
16636: GO 16700
16638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_INT 11
16646: PUSH
16647: LD_INT 12
16649: PUSH
16650: LD_INT 13
16652: PUSH
16653: LD_INT 14
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: LD_INT 3
16664: PUSH
16665: LD_INT 4
16667: PUSH
16668: LD_INT 5
16670: PUSH
16671: LD_INT 21
16673: PUSH
16674: LD_INT 23
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_INT 24
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: ST_TO_ADDR
16698: GO 16759
16700: LD_INT 3
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16758
16708: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 13
16716: PUSH
16717: LD_INT 14
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: LD_INT 3
16725: PUSH
16726: LD_INT 4
16728: PUSH
16729: LD_INT 5
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 22
16737: PUSH
16738: LD_INT 23
16740: PUSH
16741: LD_INT 24
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: ST_TO_ADDR
16756: GO 16759
16758: POP
// result := ( chassis in result ) ;
16759: LD_ADDR_VAR 0 3
16763: PUSH
16764: LD_VAR 0 1
16768: PUSH
16769: LD_VAR 0 3
16773: IN
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 3
16779: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16780: LD_INT 0
16782: PPUSH
// if not chassis or not weapon then
16783: LD_VAR 0 1
16787: NOT
16788: PUSH
16789: LD_VAR 0 2
16793: NOT
16794: OR
16795: IFFALSE 16799
// exit ;
16797: GO 17825
// case weapon of us_machine_gun :
16799: LD_VAR 0 2
16803: PUSH
16804: LD_INT 2
16806: DOUBLE
16807: EQUAL
16808: IFTRUE 16812
16810: GO 16842
16812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 3
16826: PUSH
16827: LD_INT 4
16829: PUSH
16830: LD_INT 5
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: ST_TO_ADDR
16840: GO 17809
16842: LD_INT 3
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16880
16850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 3
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: LD_INT 5
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: ST_TO_ADDR
16878: GO 17809
16880: LD_INT 11
16882: DOUBLE
16883: EQUAL
16884: IFTRUE 16888
16886: GO 16918
16888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16889: LD_ADDR_VAR 0 3
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 2
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 4
16905: PUSH
16906: LD_INT 5
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: ST_TO_ADDR
16916: GO 17809
16918: LD_INT 4
16920: DOUBLE
16921: EQUAL
16922: IFTRUE 16926
16924: GO 16952
16926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16927: LD_ADDR_VAR 0 3
16931: PUSH
16932: LD_INT 2
16934: PUSH
16935: LD_INT 3
16937: PUSH
16938: LD_INT 4
16940: PUSH
16941: LD_INT 5
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: ST_TO_ADDR
16950: GO 17809
16952: LD_INT 5
16954: DOUBLE
16955: EQUAL
16956: IFTRUE 16960
16958: GO 16986
16960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16961: LD_ADDR_VAR 0 3
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: LD_INT 4
16974: PUSH
16975: LD_INT 5
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: ST_TO_ADDR
16984: GO 17809
16986: LD_INT 9
16988: DOUBLE
16989: EQUAL
16990: IFTRUE 16994
16992: GO 17020
16994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: ST_TO_ADDR
17018: GO 17809
17020: LD_INT 7
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17054
17028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17029: LD_ADDR_VAR 0 3
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: ST_TO_ADDR
17052: GO 17809
17054: LD_INT 12
17056: DOUBLE
17057: EQUAL
17058: IFTRUE 17062
17060: GO 17088
17062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17063: LD_ADDR_VAR 0 3
17067: PUSH
17068: LD_INT 2
17070: PUSH
17071: LD_INT 3
17073: PUSH
17074: LD_INT 4
17076: PUSH
17077: LD_INT 5
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: ST_TO_ADDR
17086: GO 17809
17088: LD_INT 13
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17122
17096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17097: LD_ADDR_VAR 0 3
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 3
17107: PUSH
17108: LD_INT 4
17110: PUSH
17111: LD_INT 5
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: ST_TO_ADDR
17120: GO 17809
17122: LD_INT 14
17124: DOUBLE
17125: EQUAL
17126: IFTRUE 17130
17128: GO 17148
17130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: LD_INT 4
17138: PUSH
17139: LD_INT 5
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: ST_TO_ADDR
17146: GO 17809
17148: LD_INT 6
17150: DOUBLE
17151: EQUAL
17152: IFTRUE 17156
17154: GO 17174
17156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17157: LD_ADDR_VAR 0 3
17161: PUSH
17162: LD_INT 4
17164: PUSH
17165: LD_INT 5
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: ST_TO_ADDR
17172: GO 17809
17174: LD_INT 10
17176: DOUBLE
17177: EQUAL
17178: IFTRUE 17182
17180: GO 17200
17182: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 4
17190: PUSH
17191: LD_INT 5
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: ST_TO_ADDR
17198: GO 17809
17200: LD_INT 22
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17234
17208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17209: LD_ADDR_VAR 0 3
17213: PUSH
17214: LD_INT 11
17216: PUSH
17217: LD_INT 12
17219: PUSH
17220: LD_INT 13
17222: PUSH
17223: LD_INT 14
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: ST_TO_ADDR
17232: GO 17809
17234: LD_INT 23
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17268
17242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17243: LD_ADDR_VAR 0 3
17247: PUSH
17248: LD_INT 11
17250: PUSH
17251: LD_INT 12
17253: PUSH
17254: LD_INT 13
17256: PUSH
17257: LD_INT 14
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: ST_TO_ADDR
17266: GO 17809
17268: LD_INT 24
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17302
17276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17277: LD_ADDR_VAR 0 3
17281: PUSH
17282: LD_INT 11
17284: PUSH
17285: LD_INT 12
17287: PUSH
17288: LD_INT 13
17290: PUSH
17291: LD_INT 14
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: ST_TO_ADDR
17300: GO 17809
17302: LD_INT 30
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17336
17310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
17334: GO 17809
17336: LD_INT 25
17338: DOUBLE
17339: EQUAL
17340: IFTRUE 17344
17342: GO 17362
17344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17345: LD_ADDR_VAR 0 3
17349: PUSH
17350: LD_INT 13
17352: PUSH
17353: LD_INT 14
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: ST_TO_ADDR
17360: GO 17809
17362: LD_INT 27
17364: DOUBLE
17365: EQUAL
17366: IFTRUE 17370
17368: GO 17388
17370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_INT 13
17378: PUSH
17379: LD_INT 14
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: ST_TO_ADDR
17386: GO 17809
17388: LD_INT 28
17390: DOUBLE
17391: EQUAL
17392: IFTRUE 17396
17394: GO 17414
17396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17397: LD_ADDR_VAR 0 3
17401: PUSH
17402: LD_INT 13
17404: PUSH
17405: LD_INT 14
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: ST_TO_ADDR
17412: GO 17809
17414: LD_INT 29
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17440
17422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17423: LD_ADDR_VAR 0 3
17427: PUSH
17428: LD_INT 13
17430: PUSH
17431: LD_INT 14
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: ST_TO_ADDR
17438: GO 17809
17440: LD_INT 31
17442: DOUBLE
17443: EQUAL
17444: IFTRUE 17448
17446: GO 17466
17448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17449: LD_ADDR_VAR 0 3
17453: PUSH
17454: LD_INT 13
17456: PUSH
17457: LD_INT 14
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: ST_TO_ADDR
17464: GO 17809
17466: LD_INT 26
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17492
17474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17475: LD_ADDR_VAR 0 3
17479: PUSH
17480: LD_INT 13
17482: PUSH
17483: LD_INT 14
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: ST_TO_ADDR
17490: GO 17809
17492: LD_INT 42
17494: DOUBLE
17495: EQUAL
17496: IFTRUE 17500
17498: GO 17526
17500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17501: LD_ADDR_VAR 0 3
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 22
17511: PUSH
17512: LD_INT 23
17514: PUSH
17515: LD_INT 24
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: ST_TO_ADDR
17524: GO 17809
17526: LD_INT 43
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17560
17534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17535: LD_ADDR_VAR 0 3
17539: PUSH
17540: LD_INT 21
17542: PUSH
17543: LD_INT 22
17545: PUSH
17546: LD_INT 23
17548: PUSH
17549: LD_INT 24
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: ST_TO_ADDR
17558: GO 17809
17560: LD_INT 44
17562: DOUBLE
17563: EQUAL
17564: IFTRUE 17568
17566: GO 17594
17568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17569: LD_ADDR_VAR 0 3
17573: PUSH
17574: LD_INT 21
17576: PUSH
17577: LD_INT 22
17579: PUSH
17580: LD_INT 23
17582: PUSH
17583: LD_INT 24
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: ST_TO_ADDR
17592: GO 17809
17594: LD_INT 45
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17628
17602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17603: LD_ADDR_VAR 0 3
17607: PUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: LD_INT 23
17616: PUSH
17617: LD_INT 24
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: ST_TO_ADDR
17626: GO 17809
17628: LD_INT 49
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17662
17636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17637: LD_ADDR_VAR 0 3
17641: PUSH
17642: LD_INT 21
17644: PUSH
17645: LD_INT 22
17647: PUSH
17648: LD_INT 23
17650: PUSH
17651: LD_INT 24
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: ST_TO_ADDR
17660: GO 17809
17662: LD_INT 51
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17696
17670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17671: LD_ADDR_VAR 0 3
17675: PUSH
17676: LD_INT 21
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 23
17684: PUSH
17685: LD_INT 24
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: ST_TO_ADDR
17694: GO 17809
17696: LD_INT 52
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17730
17704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17705: LD_ADDR_VAR 0 3
17709: PUSH
17710: LD_INT 21
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 23
17718: PUSH
17719: LD_INT 24
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: ST_TO_ADDR
17728: GO 17809
17730: LD_INT 53
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17756
17738: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17739: LD_ADDR_VAR 0 3
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: LD_INT 24
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: ST_TO_ADDR
17754: GO 17809
17756: LD_INT 46
17758: DOUBLE
17759: EQUAL
17760: IFTRUE 17764
17762: GO 17782
17764: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17765: LD_ADDR_VAR 0 3
17769: PUSH
17770: LD_INT 23
17772: PUSH
17773: LD_INT 24
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: ST_TO_ADDR
17780: GO 17809
17782: LD_INT 47
17784: DOUBLE
17785: EQUAL
17786: IFTRUE 17790
17788: GO 17808
17790: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17791: LD_ADDR_VAR 0 3
17795: PUSH
17796: LD_INT 23
17798: PUSH
17799: LD_INT 24
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
17806: GO 17809
17808: POP
// result := ( chassis in result ) ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_VAR 0 1
17818: PUSH
17819: LD_VAR 0 3
17823: IN
17824: ST_TO_ADDR
// end ;
17825: LD_VAR 0 3
17829: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
// result := array ;
17839: LD_ADDR_VAR 0 5
17843: PUSH
17844: LD_VAR 0 1
17848: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17849: LD_VAR 0 1
17853: NOT
17854: PUSH
17855: LD_VAR 0 2
17859: NOT
17860: OR
17861: PUSH
17862: LD_VAR 0 3
17866: NOT
17867: OR
17868: PUSH
17869: LD_VAR 0 2
17873: PUSH
17874: LD_VAR 0 1
17878: GREATER
17879: OR
17880: PUSH
17881: LD_VAR 0 3
17885: PUSH
17886: LD_VAR 0 1
17890: GREATER
17891: OR
17892: IFFALSE 17896
// exit ;
17894: GO 18192
// if direction then
17896: LD_VAR 0 4
17900: IFFALSE 17964
// begin d := 1 ;
17902: LD_ADDR_VAR 0 9
17906: PUSH
17907: LD_INT 1
17909: ST_TO_ADDR
// if i_from > i_to then
17910: LD_VAR 0 2
17914: PUSH
17915: LD_VAR 0 3
17919: GREATER
17920: IFFALSE 17946
// length := ( array - i_from ) + i_to else
17922: LD_ADDR_VAR 0 11
17926: PUSH
17927: LD_VAR 0 1
17931: PUSH
17932: LD_VAR 0 2
17936: MINUS
17937: PUSH
17938: LD_VAR 0 3
17942: PLUS
17943: ST_TO_ADDR
17944: GO 17962
// length := i_to - i_from ;
17946: LD_ADDR_VAR 0 11
17950: PUSH
17951: LD_VAR 0 3
17955: PUSH
17956: LD_VAR 0 2
17960: MINUS
17961: ST_TO_ADDR
// end else
17962: GO 18025
// begin d := - 1 ;
17964: LD_ADDR_VAR 0 9
17968: PUSH
17969: LD_INT 1
17971: NEG
17972: ST_TO_ADDR
// if i_from > i_to then
17973: LD_VAR 0 2
17977: PUSH
17978: LD_VAR 0 3
17982: GREATER
17983: IFFALSE 18003
// length := i_from - i_to else
17985: LD_ADDR_VAR 0 11
17989: PUSH
17990: LD_VAR 0 2
17994: PUSH
17995: LD_VAR 0 3
17999: MINUS
18000: ST_TO_ADDR
18001: GO 18025
// length := ( array - i_to ) + i_from ;
18003: LD_ADDR_VAR 0 11
18007: PUSH
18008: LD_VAR 0 1
18012: PUSH
18013: LD_VAR 0 3
18017: MINUS
18018: PUSH
18019: LD_VAR 0 2
18023: PLUS
18024: ST_TO_ADDR
// end ; if not length then
18025: LD_VAR 0 11
18029: NOT
18030: IFFALSE 18034
// exit ;
18032: GO 18192
// tmp := array ;
18034: LD_ADDR_VAR 0 10
18038: PUSH
18039: LD_VAR 0 1
18043: ST_TO_ADDR
// for i = 1 to length do
18044: LD_ADDR_VAR 0 6
18048: PUSH
18049: DOUBLE
18050: LD_INT 1
18052: DEC
18053: ST_TO_ADDR
18054: LD_VAR 0 11
18058: PUSH
18059: FOR_TO
18060: IFFALSE 18180
// begin for j = 1 to array do
18062: LD_ADDR_VAR 0 7
18066: PUSH
18067: DOUBLE
18068: LD_INT 1
18070: DEC
18071: ST_TO_ADDR
18072: LD_VAR 0 1
18076: PUSH
18077: FOR_TO
18078: IFFALSE 18166
// begin k := j + d ;
18080: LD_ADDR_VAR 0 8
18084: PUSH
18085: LD_VAR 0 7
18089: PUSH
18090: LD_VAR 0 9
18094: PLUS
18095: ST_TO_ADDR
// if k > array then
18096: LD_VAR 0 8
18100: PUSH
18101: LD_VAR 0 1
18105: GREATER
18106: IFFALSE 18116
// k := 1 ;
18108: LD_ADDR_VAR 0 8
18112: PUSH
18113: LD_INT 1
18115: ST_TO_ADDR
// if not k then
18116: LD_VAR 0 8
18120: NOT
18121: IFFALSE 18133
// k := array ;
18123: LD_ADDR_VAR 0 8
18127: PUSH
18128: LD_VAR 0 1
18132: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18133: LD_ADDR_VAR 0 10
18137: PUSH
18138: LD_VAR 0 10
18142: PPUSH
18143: LD_VAR 0 8
18147: PPUSH
18148: LD_VAR 0 1
18152: PUSH
18153: LD_VAR 0 7
18157: ARRAY
18158: PPUSH
18159: CALL_OW 1
18163: ST_TO_ADDR
// end ;
18164: GO 18077
18166: POP
18167: POP
// array := tmp ;
18168: LD_ADDR_VAR 0 1
18172: PUSH
18173: LD_VAR 0 10
18177: ST_TO_ADDR
// end ;
18178: GO 18059
18180: POP
18181: POP
// result := array ;
18182: LD_ADDR_VAR 0 5
18186: PUSH
18187: LD_VAR 0 1
18191: ST_TO_ADDR
// end ;
18192: LD_VAR 0 5
18196: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18197: LD_INT 0
18199: PPUSH
18200: PPUSH
// result := 0 ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: LD_INT 0
18208: ST_TO_ADDR
// if not array or not value in array then
18209: LD_VAR 0 1
18213: NOT
18214: PUSH
18215: LD_VAR 0 2
18219: PUSH
18220: LD_VAR 0 1
18224: IN
18225: NOT
18226: OR
18227: IFFALSE 18231
// exit ;
18229: GO 18285
// for i = 1 to array do
18231: LD_ADDR_VAR 0 4
18235: PUSH
18236: DOUBLE
18237: LD_INT 1
18239: DEC
18240: ST_TO_ADDR
18241: LD_VAR 0 1
18245: PUSH
18246: FOR_TO
18247: IFFALSE 18283
// if value = array [ i ] then
18249: LD_VAR 0 2
18253: PUSH
18254: LD_VAR 0 1
18258: PUSH
18259: LD_VAR 0 4
18263: ARRAY
18264: EQUAL
18265: IFFALSE 18281
// begin result := i ;
18267: LD_ADDR_VAR 0 3
18271: PUSH
18272: LD_VAR 0 4
18276: ST_TO_ADDR
// exit ;
18277: POP
18278: POP
18279: GO 18285
// end ;
18281: GO 18246
18283: POP
18284: POP
// end ;
18285: LD_VAR 0 3
18289: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18290: LD_INT 0
18292: PPUSH
// vc_chassis := chassis ;
18293: LD_ADDR_OWVAR 37
18297: PUSH
18298: LD_VAR 0 1
18302: ST_TO_ADDR
// vc_engine := engine ;
18303: LD_ADDR_OWVAR 39
18307: PUSH
18308: LD_VAR 0 2
18312: ST_TO_ADDR
// vc_control := control ;
18313: LD_ADDR_OWVAR 38
18317: PUSH
18318: LD_VAR 0 3
18322: ST_TO_ADDR
// vc_weapon := weapon ;
18323: LD_ADDR_OWVAR 40
18327: PUSH
18328: LD_VAR 0 4
18332: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18333: LD_ADDR_OWVAR 41
18337: PUSH
18338: LD_VAR 0 5
18342: ST_TO_ADDR
// end ;
18343: LD_VAR 0 6
18347: RET
// export function WantPlant ( unit ) ; var task ; begin
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
// result := false ;
18352: LD_ADDR_VAR 0 2
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 437
18374: ST_TO_ADDR
// if task then
18375: LD_VAR 0 3
18379: IFFALSE 18407
// if task [ 1 ] [ 1 ] = p then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PUSH
18390: LD_INT 1
18392: ARRAY
18393: PUSH
18394: LD_STRING p
18396: EQUAL
18397: IFFALSE 18407
// result := true ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_INT 1
18406: ST_TO_ADDR
// end ;
18407: LD_VAR 0 2
18411: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18412: LD_INT 0
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
// if pos < 1 then
18418: LD_VAR 0 2
18422: PUSH
18423: LD_INT 1
18425: LESS
18426: IFFALSE 18430
// exit ;
18428: GO 18733
// if pos = 1 then
18430: LD_VAR 0 2
18434: PUSH
18435: LD_INT 1
18437: EQUAL
18438: IFFALSE 18471
// result := Replace ( arr , pos [ 1 ] , value ) else
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: LD_VAR 0 2
18454: PUSH
18455: LD_INT 1
18457: ARRAY
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: CALL_OW 1
18468: ST_TO_ADDR
18469: GO 18733
// begin tmp := arr ;
18471: LD_ADDR_VAR 0 6
18475: PUSH
18476: LD_VAR 0 1
18480: ST_TO_ADDR
// s_arr := [ tmp ] ;
18481: LD_ADDR_VAR 0 7
18485: PUSH
18486: LD_VAR 0 6
18490: PUSH
18491: EMPTY
18492: LIST
18493: ST_TO_ADDR
// for i = 1 to pos - 1 do
18494: LD_ADDR_VAR 0 5
18498: PUSH
18499: DOUBLE
18500: LD_INT 1
18502: DEC
18503: ST_TO_ADDR
18504: LD_VAR 0 2
18508: PUSH
18509: LD_INT 1
18511: MINUS
18512: PUSH
18513: FOR_TO
18514: IFFALSE 18559
// begin tmp := tmp [ pos [ i ] ] ;
18516: LD_ADDR_VAR 0 6
18520: PUSH
18521: LD_VAR 0 6
18525: PUSH
18526: LD_VAR 0 2
18530: PUSH
18531: LD_VAR 0 5
18535: ARRAY
18536: ARRAY
18537: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18538: LD_ADDR_VAR 0 7
18542: PUSH
18543: LD_VAR 0 7
18547: PUSH
18548: LD_VAR 0 6
18552: PUSH
18553: EMPTY
18554: LIST
18555: ADD
18556: ST_TO_ADDR
// end ;
18557: GO 18513
18559: POP
18560: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18561: LD_ADDR_VAR 0 6
18565: PUSH
18566: LD_VAR 0 6
18570: PPUSH
18571: LD_VAR 0 2
18575: PUSH
18576: LD_VAR 0 2
18580: ARRAY
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: CALL_OW 1
18591: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18592: LD_ADDR_VAR 0 7
18596: PUSH
18597: LD_VAR 0 7
18601: PPUSH
18602: LD_VAR 0 7
18606: PPUSH
18607: LD_VAR 0 6
18611: PPUSH
18612: CALL_OW 1
18616: ST_TO_ADDR
// for i = s_arr downto 2 do
18617: LD_ADDR_VAR 0 5
18621: PUSH
18622: DOUBLE
18623: LD_VAR 0 7
18627: INC
18628: ST_TO_ADDR
18629: LD_INT 2
18631: PUSH
18632: FOR_DOWNTO
18633: IFFALSE 18717
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18635: LD_ADDR_VAR 0 6
18639: PUSH
18640: LD_VAR 0 7
18644: PUSH
18645: LD_VAR 0 5
18649: PUSH
18650: LD_INT 1
18652: MINUS
18653: ARRAY
18654: PPUSH
18655: LD_VAR 0 2
18659: PUSH
18660: LD_VAR 0 5
18664: PUSH
18665: LD_INT 1
18667: MINUS
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 7
18674: PUSH
18675: LD_VAR 0 5
18679: ARRAY
18680: PPUSH
18681: CALL_OW 1
18685: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18686: LD_ADDR_VAR 0 7
18690: PUSH
18691: LD_VAR 0 7
18695: PPUSH
18696: LD_VAR 0 5
18700: PUSH
18701: LD_INT 1
18703: MINUS
18704: PPUSH
18705: LD_VAR 0 6
18709: PPUSH
18710: CALL_OW 1
18714: ST_TO_ADDR
// end ;
18715: GO 18632
18717: POP
18718: POP
// result := s_arr [ 1 ] ;
18719: LD_ADDR_VAR 0 4
18723: PUSH
18724: LD_VAR 0 7
18728: PUSH
18729: LD_INT 1
18731: ARRAY
18732: ST_TO_ADDR
// end ; end ;
18733: LD_VAR 0 4
18737: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
// if not list then
18742: LD_VAR 0 1
18746: NOT
18747: IFFALSE 18751
// exit ;
18749: GO 18842
// i := list [ pos1 ] ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_VAR 0 1
18760: PUSH
18761: LD_VAR 0 2
18765: ARRAY
18766: ST_TO_ADDR
// if not i then
18767: LD_VAR 0 5
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18842
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: LD_VAR 0 2
18790: PPUSH
18791: LD_VAR 0 1
18795: PUSH
18796: LD_VAR 0 3
18800: ARRAY
18801: PPUSH
18802: CALL_OW 1
18806: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_VAR 0 3
18821: PPUSH
18822: LD_VAR 0 5
18826: PPUSH
18827: CALL_OW 1
18831: ST_TO_ADDR
// result := list ;
18832: LD_ADDR_VAR 0 4
18836: PUSH
18837: LD_VAR 0 1
18841: ST_TO_ADDR
// end ;
18842: LD_VAR 0 4
18846: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18847: LD_INT 0
18849: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18850: LD_ADDR_VAR 0 5
18854: PUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 250
18864: PPUSH
18865: LD_VAR 0 1
18869: PPUSH
18870: CALL_OW 251
18874: PPUSH
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_VAR 0 3
18884: PPUSH
18885: LD_VAR 0 4
18889: PPUSH
18890: CALL 18900 0 5
18894: ST_TO_ADDR
// end ;
18895: LD_VAR 0 5
18899: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18900: LD_INT 0
18902: PPUSH
18903: PPUSH
18904: PPUSH
18905: PPUSH
// if not list then
18906: LD_VAR 0 3
18910: NOT
18911: IFFALSE 18915
// exit ;
18913: GO 19303
// result := [ ] ;
18915: LD_ADDR_VAR 0 6
18919: PUSH
18920: EMPTY
18921: ST_TO_ADDR
// for i in list do
18922: LD_ADDR_VAR 0 7
18926: PUSH
18927: LD_VAR 0 3
18931: PUSH
18932: FOR_IN
18933: IFFALSE 19135
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18935: LD_ADDR_VAR 0 9
18939: PUSH
18940: LD_VAR 0 7
18944: PPUSH
18945: LD_VAR 0 1
18949: PPUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 297
18959: ST_TO_ADDR
// if not result then
18960: LD_VAR 0 6
18964: NOT
18965: IFFALSE 18991
// result := [ [ i , tmp ] ] else
18967: LD_ADDR_VAR 0 6
18971: PUSH
18972: LD_VAR 0 7
18976: PUSH
18977: LD_VAR 0 9
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: ST_TO_ADDR
18989: GO 19133
// begin if result [ result ] [ 2 ] < tmp then
18991: LD_VAR 0 6
18995: PUSH
18996: LD_VAR 0 6
19000: ARRAY
19001: PUSH
19002: LD_INT 2
19004: ARRAY
19005: PUSH
19006: LD_VAR 0 9
19010: LESS
19011: IFFALSE 19053
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19013: LD_ADDR_VAR 0 6
19017: PUSH
19018: LD_VAR 0 6
19022: PPUSH
19023: LD_VAR 0 6
19027: PUSH
19028: LD_INT 1
19030: PLUS
19031: PPUSH
19032: LD_VAR 0 7
19036: PUSH
19037: LD_VAR 0 9
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PPUSH
19046: CALL_OW 2
19050: ST_TO_ADDR
19051: GO 19133
// for j = 1 to result do
19053: LD_ADDR_VAR 0 8
19057: PUSH
19058: DOUBLE
19059: LD_INT 1
19061: DEC
19062: ST_TO_ADDR
19063: LD_VAR 0 6
19067: PUSH
19068: FOR_TO
19069: IFFALSE 19131
// begin if tmp < result [ j ] [ 2 ] then
19071: LD_VAR 0 9
19075: PUSH
19076: LD_VAR 0 6
19080: PUSH
19081: LD_VAR 0 8
19085: ARRAY
19086: PUSH
19087: LD_INT 2
19089: ARRAY
19090: LESS
19091: IFFALSE 19129
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19093: LD_ADDR_VAR 0 6
19097: PUSH
19098: LD_VAR 0 6
19102: PPUSH
19103: LD_VAR 0 8
19107: PPUSH
19108: LD_VAR 0 7
19112: PUSH
19113: LD_VAR 0 9
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 2
19126: ST_TO_ADDR
// break ;
19127: GO 19131
// end ; end ;
19129: GO 19068
19131: POP
19132: POP
// end ; end ;
19133: GO 18932
19135: POP
19136: POP
// if result and not asc then
19137: LD_VAR 0 6
19141: PUSH
19142: LD_VAR 0 4
19146: NOT
19147: AND
19148: IFFALSE 19223
// begin tmp := result ;
19150: LD_ADDR_VAR 0 9
19154: PUSH
19155: LD_VAR 0 6
19159: ST_TO_ADDR
// for i = tmp downto 1 do
19160: LD_ADDR_VAR 0 7
19164: PUSH
19165: DOUBLE
19166: LD_VAR 0 9
19170: INC
19171: ST_TO_ADDR
19172: LD_INT 1
19174: PUSH
19175: FOR_DOWNTO
19176: IFFALSE 19221
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19178: LD_ADDR_VAR 0 6
19182: PUSH
19183: LD_VAR 0 6
19187: PPUSH
19188: LD_VAR 0 9
19192: PUSH
19193: LD_VAR 0 7
19197: MINUS
19198: PUSH
19199: LD_INT 1
19201: PLUS
19202: PPUSH
19203: LD_VAR 0 9
19207: PUSH
19208: LD_VAR 0 7
19212: ARRAY
19213: PPUSH
19214: CALL_OW 1
19218: ST_TO_ADDR
19219: GO 19175
19221: POP
19222: POP
// end ; tmp := [ ] ;
19223: LD_ADDR_VAR 0 9
19227: PUSH
19228: EMPTY
19229: ST_TO_ADDR
// if mode then
19230: LD_VAR 0 5
19234: IFFALSE 19303
// begin for i = 1 to result do
19236: LD_ADDR_VAR 0 7
19240: PUSH
19241: DOUBLE
19242: LD_INT 1
19244: DEC
19245: ST_TO_ADDR
19246: LD_VAR 0 6
19250: PUSH
19251: FOR_TO
19252: IFFALSE 19291
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19254: LD_ADDR_VAR 0 9
19258: PUSH
19259: LD_VAR 0 9
19263: PPUSH
19264: LD_VAR 0 7
19268: PPUSH
19269: LD_VAR 0 6
19273: PUSH
19274: LD_VAR 0 7
19278: ARRAY
19279: PUSH
19280: LD_INT 1
19282: ARRAY
19283: PPUSH
19284: CALL_OW 1
19288: ST_TO_ADDR
19289: GO 19251
19291: POP
19292: POP
// result := tmp ;
19293: LD_ADDR_VAR 0 6
19297: PUSH
19298: LD_VAR 0 9
19302: ST_TO_ADDR
// end ; end ;
19303: LD_VAR 0 6
19307: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
19314: PPUSH
19315: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19316: LD_ADDR_VAR 0 5
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: EMPTY
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// if not x or not y then
19338: LD_VAR 0 2
19342: NOT
19343: PUSH
19344: LD_VAR 0 3
19348: NOT
19349: OR
19350: IFFALSE 19354
// exit ;
19352: GO 21000
// if not range then
19354: LD_VAR 0 4
19358: NOT
19359: IFFALSE 19369
// range := 10 ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_INT 10
19368: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19369: LD_ADDR_VAR 0 8
19373: PUSH
19374: LD_INT 81
19376: PUSH
19377: LD_VAR 0 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 92
19388: PUSH
19389: LD_VAR 0 2
19393: PUSH
19394: LD_VAR 0 3
19398: PUSH
19399: LD_VAR 0 4
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 21
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: PPUSH
19432: CALL_OW 69
19436: ST_TO_ADDR
// if not tmp then
19437: LD_VAR 0 8
19441: NOT
19442: IFFALSE 19446
// exit ;
19444: GO 21000
// for i in tmp do
19446: LD_ADDR_VAR 0 6
19450: PUSH
19451: LD_VAR 0 8
19455: PUSH
19456: FOR_IN
19457: IFFALSE 20975
// begin points := [ 0 , 0 , 0 ] ;
19459: LD_ADDR_VAR 0 9
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: ST_TO_ADDR
// bpoints := 1 ;
19478: LD_ADDR_VAR 0 10
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19486: LD_VAR 0 6
19490: PPUSH
19491: CALL_OW 247
19495: PUSH
19496: LD_INT 1
19498: DOUBLE
19499: EQUAL
19500: IFTRUE 19504
19502: GO 20082
19504: POP
// begin if GetClass ( i ) = 1 then
19505: LD_VAR 0 6
19509: PPUSH
19510: CALL_OW 257
19514: PUSH
19515: LD_INT 1
19517: EQUAL
19518: IFFALSE 19539
// points := [ 10 , 5 , 3 ] ;
19520: LD_ADDR_VAR 0 9
19524: PUSH
19525: LD_INT 10
19527: PUSH
19528: LD_INT 5
19530: PUSH
19531: LD_INT 3
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19539: LD_VAR 0 6
19543: PPUSH
19544: CALL_OW 257
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: LD_INT 4
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: IN
19563: IFFALSE 19584
// points := [ 3 , 2 , 1 ] ;
19565: LD_ADDR_VAR 0 9
19569: PUSH
19570: LD_INT 3
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19584: LD_VAR 0 6
19588: PPUSH
19589: CALL_OW 257
19593: PUSH
19594: LD_INT 5
19596: EQUAL
19597: IFFALSE 19618
// points := [ 130 , 5 , 2 ] ;
19599: LD_ADDR_VAR 0 9
19603: PUSH
19604: LD_INT 130
19606: PUSH
19607: LD_INT 5
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19618: LD_VAR 0 6
19622: PPUSH
19623: CALL_OW 257
19627: PUSH
19628: LD_INT 8
19630: EQUAL
19631: IFFALSE 19652
// points := [ 35 , 35 , 30 ] ;
19633: LD_ADDR_VAR 0 9
19637: PUSH
19638: LD_INT 35
19640: PUSH
19641: LD_INT 35
19643: PUSH
19644: LD_INT 30
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19652: LD_VAR 0 6
19656: PPUSH
19657: CALL_OW 257
19661: PUSH
19662: LD_INT 9
19664: EQUAL
19665: IFFALSE 19686
// points := [ 20 , 55 , 40 ] ;
19667: LD_ADDR_VAR 0 9
19671: PUSH
19672: LD_INT 20
19674: PUSH
19675: LD_INT 55
19677: PUSH
19678: LD_INT 40
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19686: LD_VAR 0 6
19690: PPUSH
19691: CALL_OW 257
19695: PUSH
19696: LD_INT 12
19698: PUSH
19699: LD_INT 16
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: IN
19706: IFFALSE 19727
// points := [ 5 , 3 , 2 ] ;
19708: LD_ADDR_VAR 0 9
19712: PUSH
19713: LD_INT 5
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19727: LD_VAR 0 6
19731: PPUSH
19732: CALL_OW 257
19736: PUSH
19737: LD_INT 17
19739: EQUAL
19740: IFFALSE 19761
// points := [ 100 , 50 , 75 ] ;
19742: LD_ADDR_VAR 0 9
19746: PUSH
19747: LD_INT 100
19749: PUSH
19750: LD_INT 50
19752: PUSH
19753: LD_INT 75
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19761: LD_VAR 0 6
19765: PPUSH
19766: CALL_OW 257
19770: PUSH
19771: LD_INT 15
19773: EQUAL
19774: IFFALSE 19795
// points := [ 10 , 5 , 3 ] ;
19776: LD_ADDR_VAR 0 9
19780: PUSH
19781: LD_INT 10
19783: PUSH
19784: LD_INT 5
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19795: LD_VAR 0 6
19799: PPUSH
19800: CALL_OW 257
19804: PUSH
19805: LD_INT 14
19807: EQUAL
19808: IFFALSE 19829
// points := [ 10 , 0 , 0 ] ;
19810: LD_ADDR_VAR 0 9
19814: PUSH
19815: LD_INT 10
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19829: LD_VAR 0 6
19833: PPUSH
19834: CALL_OW 257
19838: PUSH
19839: LD_INT 11
19841: EQUAL
19842: IFFALSE 19863
// points := [ 30 , 10 , 5 ] ;
19844: LD_ADDR_VAR 0 9
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 10
19854: PUSH
19855: LD_INT 5
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19863: LD_VAR 0 1
19867: PPUSH
19868: LD_INT 5
19870: PPUSH
19871: CALL_OW 321
19875: PUSH
19876: LD_INT 2
19878: EQUAL
19879: IFFALSE 19896
// bpoints := bpoints * 1.8 ;
19881: LD_ADDR_VAR 0 10
19885: PUSH
19886: LD_VAR 0 10
19890: PUSH
19891: LD_REAL  1.80000000000000E+0000
19894: MUL
19895: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19896: LD_VAR 0 6
19900: PPUSH
19901: CALL_OW 257
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 3
19914: PUSH
19915: LD_INT 4
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: IN
19924: PUSH
19925: LD_VAR 0 1
19929: PPUSH
19930: LD_INT 51
19932: PPUSH
19933: CALL_OW 321
19937: PUSH
19938: LD_INT 2
19940: EQUAL
19941: AND
19942: IFFALSE 19959
// bpoints := bpoints * 1.2 ;
19944: LD_ADDR_VAR 0 10
19948: PUSH
19949: LD_VAR 0 10
19953: PUSH
19954: LD_REAL  1.20000000000000E+0000
19957: MUL
19958: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19959: LD_VAR 0 6
19963: PPUSH
19964: CALL_OW 257
19968: PUSH
19969: LD_INT 5
19971: PUSH
19972: LD_INT 7
19974: PUSH
19975: LD_INT 9
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: IN
19983: PUSH
19984: LD_VAR 0 1
19988: PPUSH
19989: LD_INT 52
19991: PPUSH
19992: CALL_OW 321
19996: PUSH
19997: LD_INT 2
19999: EQUAL
20000: AND
20001: IFFALSE 20018
// bpoints := bpoints * 1.5 ;
20003: LD_ADDR_VAR 0 10
20007: PUSH
20008: LD_VAR 0 10
20012: PUSH
20013: LD_REAL  1.50000000000000E+0000
20016: MUL
20017: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20018: LD_VAR 0 1
20022: PPUSH
20023: LD_INT 66
20025: PPUSH
20026: CALL_OW 321
20030: PUSH
20031: LD_INT 2
20033: EQUAL
20034: IFFALSE 20051
// bpoints := bpoints * 1.1 ;
20036: LD_ADDR_VAR 0 10
20040: PUSH
20041: LD_VAR 0 10
20045: PUSH
20046: LD_REAL  1.10000000000000E+0000
20049: MUL
20050: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20051: LD_ADDR_VAR 0 10
20055: PUSH
20056: LD_VAR 0 10
20060: PUSH
20061: LD_VAR 0 6
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 259
20073: PUSH
20074: LD_REAL  1.15000000000000E+0000
20077: MUL
20078: MUL
20079: ST_TO_ADDR
// end ; unit_vehicle :
20080: GO 20904
20082: LD_INT 2
20084: DOUBLE
20085: EQUAL
20086: IFTRUE 20090
20088: GO 20892
20090: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20091: LD_VAR 0 6
20095: PPUSH
20096: CALL_OW 264
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: LD_INT 42
20106: PUSH
20107: LD_INT 24
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: LIST
20114: IN
20115: IFFALSE 20136
// points := [ 25 , 5 , 3 ] ;
20117: LD_ADDR_VAR 0 9
20121: PUSH
20122: LD_INT 25
20124: PUSH
20125: LD_INT 5
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20136: LD_VAR 0 6
20140: PPUSH
20141: CALL_OW 264
20145: PUSH
20146: LD_INT 4
20148: PUSH
20149: LD_INT 43
20151: PUSH
20152: LD_INT 25
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: IN
20160: IFFALSE 20181
// points := [ 40 , 15 , 5 ] ;
20162: LD_ADDR_VAR 0 9
20166: PUSH
20167: LD_INT 40
20169: PUSH
20170: LD_INT 15
20172: PUSH
20173: LD_INT 5
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20181: LD_VAR 0 6
20185: PPUSH
20186: CALL_OW 264
20190: PUSH
20191: LD_INT 3
20193: PUSH
20194: LD_INT 23
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: IN
20201: IFFALSE 20222
// points := [ 7 , 25 , 8 ] ;
20203: LD_ADDR_VAR 0 9
20207: PUSH
20208: LD_INT 7
20210: PUSH
20211: LD_INT 25
20213: PUSH
20214: LD_INT 8
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20222: LD_VAR 0 6
20226: PPUSH
20227: CALL_OW 264
20231: PUSH
20232: LD_INT 5
20234: PUSH
20235: LD_INT 27
20237: PUSH
20238: LD_INT 44
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: IN
20246: IFFALSE 20267
// points := [ 14 , 50 , 16 ] ;
20248: LD_ADDR_VAR 0 9
20252: PUSH
20253: LD_INT 14
20255: PUSH
20256: LD_INT 50
20258: PUSH
20259: LD_INT 16
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: LIST
20266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20267: LD_VAR 0 6
20271: PPUSH
20272: CALL_OW 264
20276: PUSH
20277: LD_INT 6
20279: PUSH
20280: LD_INT 46
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: IN
20287: IFFALSE 20308
// points := [ 32 , 120 , 70 ] ;
20289: LD_ADDR_VAR 0 9
20293: PUSH
20294: LD_INT 32
20296: PUSH
20297: LD_INT 120
20299: PUSH
20300: LD_INT 70
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20308: LD_VAR 0 6
20312: PPUSH
20313: CALL_OW 264
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 28
20323: PUSH
20324: LD_INT 45
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: IN
20332: IFFALSE 20353
// points := [ 35 , 20 , 45 ] ;
20334: LD_ADDR_VAR 0 9
20338: PUSH
20339: LD_INT 35
20341: PUSH
20342: LD_INT 20
20344: PUSH
20345: LD_INT 45
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20353: LD_VAR 0 6
20357: PPUSH
20358: CALL_OW 264
20362: PUSH
20363: LD_INT 47
20365: PUSH
20366: EMPTY
20367: LIST
20368: IN
20369: IFFALSE 20390
// points := [ 67 , 45 , 75 ] ;
20371: LD_ADDR_VAR 0 9
20375: PUSH
20376: LD_INT 67
20378: PUSH
20379: LD_INT 45
20381: PUSH
20382: LD_INT 75
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: LIST
20389: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20390: LD_VAR 0 6
20394: PPUSH
20395: CALL_OW 264
20399: PUSH
20400: LD_INT 26
20402: PUSH
20403: EMPTY
20404: LIST
20405: IN
20406: IFFALSE 20427
// points := [ 120 , 30 , 80 ] ;
20408: LD_ADDR_VAR 0 9
20412: PUSH
20413: LD_INT 120
20415: PUSH
20416: LD_INT 30
20418: PUSH
20419: LD_INT 80
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20427: LD_VAR 0 6
20431: PPUSH
20432: CALL_OW 264
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: EMPTY
20441: LIST
20442: IN
20443: IFFALSE 20464
// points := [ 40 , 1 , 1 ] ;
20445: LD_ADDR_VAR 0 9
20449: PUSH
20450: LD_INT 40
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20464: LD_VAR 0 6
20468: PPUSH
20469: CALL_OW 264
20473: PUSH
20474: LD_INT 29
20476: PUSH
20477: EMPTY
20478: LIST
20479: IN
20480: IFFALSE 20501
// points := [ 70 , 200 , 400 ] ;
20482: LD_ADDR_VAR 0 9
20486: PUSH
20487: LD_INT 70
20489: PUSH
20490: LD_INT 200
20492: PUSH
20493: LD_INT 400
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20501: LD_VAR 0 6
20505: PPUSH
20506: CALL_OW 264
20510: PUSH
20511: LD_INT 14
20513: PUSH
20514: LD_INT 53
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: IN
20521: IFFALSE 20542
// points := [ 40 , 10 , 20 ] ;
20523: LD_ADDR_VAR 0 9
20527: PUSH
20528: LD_INT 40
20530: PUSH
20531: LD_INT 10
20533: PUSH
20534: LD_INT 20
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20542: LD_VAR 0 6
20546: PPUSH
20547: CALL_OW 264
20551: PUSH
20552: LD_INT 9
20554: PUSH
20555: EMPTY
20556: LIST
20557: IN
20558: IFFALSE 20579
// points := [ 5 , 70 , 20 ] ;
20560: LD_ADDR_VAR 0 9
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: LD_INT 70
20570: PUSH
20571: LD_INT 20
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: LIST
20578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20579: LD_VAR 0 6
20583: PPUSH
20584: CALL_OW 264
20588: PUSH
20589: LD_INT 10
20591: PUSH
20592: EMPTY
20593: LIST
20594: IN
20595: IFFALSE 20616
// points := [ 35 , 110 , 70 ] ;
20597: LD_ADDR_VAR 0 9
20601: PUSH
20602: LD_INT 35
20604: PUSH
20605: LD_INT 110
20607: PUSH
20608: LD_INT 70
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20616: LD_VAR 0 6
20620: PPUSH
20621: CALL_OW 265
20625: PUSH
20626: LD_INT 25
20628: EQUAL
20629: IFFALSE 20650
// points := [ 80 , 65 , 100 ] ;
20631: LD_ADDR_VAR 0 9
20635: PUSH
20636: LD_INT 80
20638: PUSH
20639: LD_INT 65
20641: PUSH
20642: LD_INT 100
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20650: LD_VAR 0 6
20654: PPUSH
20655: CALL_OW 263
20659: PUSH
20660: LD_INT 1
20662: EQUAL
20663: IFFALSE 20698
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20665: LD_ADDR_VAR 0 10
20669: PUSH
20670: LD_VAR 0 10
20674: PUSH
20675: LD_VAR 0 6
20679: PPUSH
20680: CALL_OW 311
20684: PPUSH
20685: LD_INT 3
20687: PPUSH
20688: CALL_OW 259
20692: PUSH
20693: LD_INT 4
20695: MUL
20696: MUL
20697: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20698: LD_VAR 0 6
20702: PPUSH
20703: CALL_OW 263
20707: PUSH
20708: LD_INT 2
20710: EQUAL
20711: IFFALSE 20762
// begin j := IsControledBy ( i ) ;
20713: LD_ADDR_VAR 0 7
20717: PUSH
20718: LD_VAR 0 6
20722: PPUSH
20723: CALL_OW 312
20727: ST_TO_ADDR
// if j then
20728: LD_VAR 0 7
20732: IFFALSE 20762
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20734: LD_ADDR_VAR 0 10
20738: PUSH
20739: LD_VAR 0 10
20743: PUSH
20744: LD_VAR 0 7
20748: PPUSH
20749: LD_INT 3
20751: PPUSH
20752: CALL_OW 259
20756: PUSH
20757: LD_INT 3
20759: MUL
20760: MUL
20761: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20762: LD_VAR 0 6
20766: PPUSH
20767: CALL_OW 264
20771: PUSH
20772: LD_INT 5
20774: PUSH
20775: LD_INT 6
20777: PUSH
20778: LD_INT 46
20780: PUSH
20781: LD_INT 44
20783: PUSH
20784: LD_INT 47
20786: PUSH
20787: LD_INT 45
20789: PUSH
20790: LD_INT 28
20792: PUSH
20793: LD_INT 7
20795: PUSH
20796: LD_INT 27
20798: PUSH
20799: LD_INT 29
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: IN
20814: PUSH
20815: LD_VAR 0 1
20819: PPUSH
20820: LD_INT 52
20822: PPUSH
20823: CALL_OW 321
20827: PUSH
20828: LD_INT 2
20830: EQUAL
20831: AND
20832: IFFALSE 20849
// bpoints := bpoints * 1.2 ;
20834: LD_ADDR_VAR 0 10
20838: PUSH
20839: LD_VAR 0 10
20843: PUSH
20844: LD_REAL  1.20000000000000E+0000
20847: MUL
20848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20849: LD_VAR 0 6
20853: PPUSH
20854: CALL_OW 264
20858: PUSH
20859: LD_INT 6
20861: PUSH
20862: LD_INT 46
20864: PUSH
20865: LD_INT 47
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: IN
20873: IFFALSE 20890
// bpoints := bpoints * 1.2 ;
20875: LD_ADDR_VAR 0 10
20879: PUSH
20880: LD_VAR 0 10
20884: PUSH
20885: LD_REAL  1.20000000000000E+0000
20888: MUL
20889: ST_TO_ADDR
// end ; unit_building :
20890: GO 20904
20892: LD_INT 3
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20903
20900: POP
// ; end ;
20901: GO 20904
20903: POP
// for j = 1 to 3 do
20904: LD_ADDR_VAR 0 7
20908: PUSH
20909: DOUBLE
20910: LD_INT 1
20912: DEC
20913: ST_TO_ADDR
20914: LD_INT 3
20916: PUSH
20917: FOR_TO
20918: IFFALSE 20971
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20920: LD_ADDR_VAR 0 5
20924: PUSH
20925: LD_VAR 0 5
20929: PPUSH
20930: LD_VAR 0 7
20934: PPUSH
20935: LD_VAR 0 5
20939: PUSH
20940: LD_VAR 0 7
20944: ARRAY
20945: PUSH
20946: LD_VAR 0 9
20950: PUSH
20951: LD_VAR 0 7
20955: ARRAY
20956: PUSH
20957: LD_VAR 0 10
20961: MUL
20962: PLUS
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
20969: GO 20917
20971: POP
20972: POP
// end ;
20973: GO 19456
20975: POP
20976: POP
// result := Replace ( result , 4 , tmp ) ;
20977: LD_ADDR_VAR 0 5
20981: PUSH
20982: LD_VAR 0 5
20986: PPUSH
20987: LD_INT 4
20989: PPUSH
20990: LD_VAR 0 8
20994: PPUSH
20995: CALL_OW 1
20999: ST_TO_ADDR
// end ;
21000: LD_VAR 0 5
21004: RET
// export function DangerAtRange ( unit , range ) ; begin
21005: LD_INT 0
21007: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 255
21022: PPUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 250
21032: PPUSH
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 251
21042: PPUSH
21043: LD_VAR 0 2
21047: PPUSH
21048: CALL 19308 0 4
21052: ST_TO_ADDR
// end ;
21053: LD_VAR 0 3
21057: RET
// export function DangerInArea ( side , area ) ; begin
21058: LD_INT 0
21060: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21061: LD_ADDR_VAR 0 3
21065: PUSH
21066: LD_VAR 0 2
21070: PPUSH
21071: LD_INT 81
21073: PUSH
21074: LD_VAR 0 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 70
21087: ST_TO_ADDR
// end ;
21088: LD_VAR 0 3
21092: RET
// export function IsExtension ( b ) ; begin
21093: LD_INT 0
21095: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_VAR 0 1
21105: PUSH
21106: LD_INT 23
21108: PUSH
21109: LD_INT 20
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_INT 17
21117: PUSH
21118: LD_INT 24
21120: PUSH
21121: LD_INT 21
21123: PUSH
21124: LD_INT 19
21126: PUSH
21127: LD_INT 16
21129: PUSH
21130: LD_INT 25
21132: PUSH
21133: LD_INT 18
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: IN
21148: ST_TO_ADDR
// end ;
21149: LD_VAR 0 2
21153: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
21158: PPUSH
// result := [ ] ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: EMPTY
21165: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21166: LD_ADDR_VAR 0 4
21170: PUSH
21171: LD_VAR 0 2
21175: PPUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL_OW 70
21190: ST_TO_ADDR
// if not tmp then
21191: LD_VAR 0 4
21195: NOT
21196: IFFALSE 21200
// exit ;
21198: GO 21258
// for i in tmp do
21200: LD_ADDR_VAR 0 5
21204: PUSH
21205: LD_VAR 0 4
21209: PUSH
21210: FOR_IN
21211: IFFALSE 21246
// if GetBase ( i ) <> base then
21213: LD_VAR 0 5
21217: PPUSH
21218: CALL_OW 274
21222: PUSH
21223: LD_VAR 0 1
21227: NONEQUAL
21228: IFFALSE 21244
// ComLinkToBase ( base , i ) ;
21230: LD_VAR 0 1
21234: PPUSH
21235: LD_VAR 0 5
21239: PPUSH
21240: CALL_OW 169
21244: GO 21210
21246: POP
21247: POP
// result := tmp ;
21248: LD_ADDR_VAR 0 3
21252: PUSH
21253: LD_VAR 0 4
21257: ST_TO_ADDR
// end ;
21258: LD_VAR 0 3
21262: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21263: LD_INT 0
21265: PPUSH
21266: PPUSH
// if BuildingStatus ( b ) = bs_build then
21267: LD_VAR 0 2
21271: PPUSH
21272: CALL_OW 461
21276: PUSH
21277: LD_INT 1
21279: EQUAL
21280: IFFALSE 21340
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_STRING h
21289: PUSH
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 250
21299: PUSH
21300: LD_VAR 0 2
21304: PPUSH
21305: CALL_OW 251
21309: PUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: PPUSH
21336: CALL_OW 446
// end ;
21340: LD_VAR 0 3
21344: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21345: LD_INT 0
21347: PPUSH
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
21352: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21353: LD_VAR 0 1
21357: NOT
21358: PUSH
21359: LD_VAR 0 1
21363: PPUSH
21364: CALL_OW 263
21368: PUSH
21369: LD_INT 2
21371: EQUAL
21372: NOT
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 21694
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_VAR 0 1
21390: PPUSH
21391: CALL_OW 255
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: LD_INT 30
21405: PUSH
21406: LD_INT 36
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 34
21415: PUSH
21416: LD_INT 31
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL_OW 69
21436: ST_TO_ADDR
// if not tmp then
21437: LD_VAR 0 6
21441: NOT
21442: IFFALSE 21446
// exit ;
21444: GO 21694
// result := [ ] ;
21446: LD_ADDR_VAR 0 2
21450: PUSH
21451: EMPTY
21452: ST_TO_ADDR
// for i in tmp do
21453: LD_ADDR_VAR 0 3
21457: PUSH
21458: LD_VAR 0 6
21462: PUSH
21463: FOR_IN
21464: IFFALSE 21535
// begin t := UnitsInside ( i ) ;
21466: LD_ADDR_VAR 0 4
21470: PUSH
21471: LD_VAR 0 3
21475: PPUSH
21476: CALL_OW 313
21480: ST_TO_ADDR
// if t then
21481: LD_VAR 0 4
21485: IFFALSE 21533
// for j in t do
21487: LD_ADDR_VAR 0 7
21491: PUSH
21492: LD_VAR 0 4
21496: PUSH
21497: FOR_IN
21498: IFFALSE 21531
// result := Insert ( result , result + 1 , j ) ;
21500: LD_ADDR_VAR 0 2
21504: PUSH
21505: LD_VAR 0 2
21509: PPUSH
21510: LD_VAR 0 2
21514: PUSH
21515: LD_INT 1
21517: PLUS
21518: PPUSH
21519: LD_VAR 0 7
21523: PPUSH
21524: CALL_OW 2
21528: ST_TO_ADDR
21529: GO 21497
21531: POP
21532: POP
// end ;
21533: GO 21463
21535: POP
21536: POP
// if not result then
21537: LD_VAR 0 2
21541: NOT
21542: IFFALSE 21546
// exit ;
21544: GO 21694
// mech := result [ 1 ] ;
21546: LD_ADDR_VAR 0 5
21550: PUSH
21551: LD_VAR 0 2
21555: PUSH
21556: LD_INT 1
21558: ARRAY
21559: ST_TO_ADDR
// if result > 1 then
21560: LD_VAR 0 2
21564: PUSH
21565: LD_INT 1
21567: GREATER
21568: IFFALSE 21680
// for i = 2 to result do
21570: LD_ADDR_VAR 0 3
21574: PUSH
21575: DOUBLE
21576: LD_INT 2
21578: DEC
21579: ST_TO_ADDR
21580: LD_VAR 0 2
21584: PUSH
21585: FOR_TO
21586: IFFALSE 21678
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21588: LD_ADDR_VAR 0 4
21592: PUSH
21593: LD_VAR 0 2
21597: PUSH
21598: LD_VAR 0 3
21602: ARRAY
21603: PPUSH
21604: LD_INT 3
21606: PPUSH
21607: CALL_OW 259
21611: PUSH
21612: LD_VAR 0 2
21616: PUSH
21617: LD_VAR 0 3
21621: ARRAY
21622: PPUSH
21623: CALL_OW 432
21627: MINUS
21628: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21629: LD_VAR 0 4
21633: PUSH
21634: LD_VAR 0 5
21638: PPUSH
21639: LD_INT 3
21641: PPUSH
21642: CALL_OW 259
21646: PUSH
21647: LD_VAR 0 5
21651: PPUSH
21652: CALL_OW 432
21656: MINUS
21657: GREATEREQUAL
21658: IFFALSE 21676
// mech := result [ i ] ;
21660: LD_ADDR_VAR 0 5
21664: PUSH
21665: LD_VAR 0 2
21669: PUSH
21670: LD_VAR 0 3
21674: ARRAY
21675: ST_TO_ADDR
// end ;
21676: GO 21585
21678: POP
21679: POP
// ComLinkTo ( vehicle , mech ) ;
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_VAR 0 5
21689: PPUSH
21690: CALL_OW 135
// end ;
21694: LD_VAR 0 2
21698: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21699: LD_INT 0
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
// result := [ ] ;
21714: LD_ADDR_VAR 0 7
21718: PUSH
21719: EMPTY
21720: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 266
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: IN
21741: NOT
21742: IFFALSE 21746
// exit ;
21744: GO 23377
// if name then
21746: LD_VAR 0 3
21750: IFFALSE 21766
// SetBName ( base_dep , name ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_VAR 0 3
21761: PPUSH
21762: CALL_OW 500
// base := GetBase ( base_dep ) ;
21766: LD_ADDR_VAR 0 15
21770: PUSH
21771: LD_VAR 0 1
21775: PPUSH
21776: CALL_OW 274
21780: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21781: LD_ADDR_VAR 0 16
21785: PUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 255
21795: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21796: LD_ADDR_VAR 0 17
21800: PUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: CALL_OW 248
21810: ST_TO_ADDR
// if sources then
21811: LD_VAR 0 5
21815: IFFALSE 21862
// for i = 1 to 3 do
21817: LD_ADDR_VAR 0 8
21821: PUSH
21822: DOUBLE
21823: LD_INT 1
21825: DEC
21826: ST_TO_ADDR
21827: LD_INT 3
21829: PUSH
21830: FOR_TO
21831: IFFALSE 21860
// AddResourceType ( base , i , sources [ i ] ) ;
21833: LD_VAR 0 15
21837: PPUSH
21838: LD_VAR 0 8
21842: PPUSH
21843: LD_VAR 0 5
21847: PUSH
21848: LD_VAR 0 8
21852: ARRAY
21853: PPUSH
21854: CALL_OW 276
21858: GO 21830
21860: POP
21861: POP
// buildings := GetBaseBuildings ( base , area ) ;
21862: LD_ADDR_VAR 0 18
21866: PUSH
21867: LD_VAR 0 15
21871: PPUSH
21872: LD_VAR 0 2
21876: PPUSH
21877: CALL 21154 0 2
21881: ST_TO_ADDR
// InitHc ;
21882: CALL_OW 19
// InitUc ;
21886: CALL_OW 18
// uc_side := side ;
21890: LD_ADDR_OWVAR 20
21894: PUSH
21895: LD_VAR 0 16
21899: ST_TO_ADDR
// uc_nation := nation ;
21900: LD_ADDR_OWVAR 21
21904: PUSH
21905: LD_VAR 0 17
21909: ST_TO_ADDR
// if buildings then
21910: LD_VAR 0 18
21914: IFFALSE 23236
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21916: LD_ADDR_VAR 0 19
21920: PUSH
21921: LD_VAR 0 18
21925: PPUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 30
21931: PUSH
21932: LD_INT 29
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 30
21941: PUSH
21942: LD_INT 30
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: PPUSH
21954: CALL_OW 72
21958: ST_TO_ADDR
// if tmp then
21959: LD_VAR 0 19
21963: IFFALSE 22011
// for i in tmp do
21965: LD_ADDR_VAR 0 8
21969: PUSH
21970: LD_VAR 0 19
21974: PUSH
21975: FOR_IN
21976: IFFALSE 22009
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21978: LD_VAR 0 8
21982: PPUSH
21983: CALL_OW 250
21987: PPUSH
21988: LD_VAR 0 8
21992: PPUSH
21993: CALL_OW 251
21997: PPUSH
21998: LD_VAR 0 16
22002: PPUSH
22003: CALL_OW 441
22007: GO 21975
22009: POP
22010: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22011: LD_VAR 0 18
22015: PPUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 32
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 30
22031: PUSH
22032: LD_INT 33
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 72
22048: IFFALSE 22136
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22050: LD_ADDR_VAR 0 8
22054: PUSH
22055: LD_VAR 0 18
22059: PPUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 30
22065: PUSH
22066: LD_INT 32
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: LD_INT 33
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: PPUSH
22088: CALL_OW 72
22092: PUSH
22093: FOR_IN
22094: IFFALSE 22134
// begin if not GetBWeapon ( i ) then
22096: LD_VAR 0 8
22100: PPUSH
22101: CALL_OW 269
22105: NOT
22106: IFFALSE 22132
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22108: LD_VAR 0 8
22112: PPUSH
22113: LD_VAR 0 8
22117: PPUSH
22118: LD_VAR 0 2
22122: PPUSH
22123: CALL 23382 0 2
22127: PPUSH
22128: CALL_OW 431
// end ;
22132: GO 22093
22134: POP
22135: POP
// end ; for i = 1 to personel do
22136: LD_ADDR_VAR 0 8
22140: PUSH
22141: DOUBLE
22142: LD_INT 1
22144: DEC
22145: ST_TO_ADDR
22146: LD_VAR 0 6
22150: PUSH
22151: FOR_TO
22152: IFFALSE 23216
// begin if i > 4 then
22154: LD_VAR 0 8
22158: PUSH
22159: LD_INT 4
22161: GREATER
22162: IFFALSE 22166
// break ;
22164: GO 23216
// case i of 1 :
22166: LD_VAR 0 8
22170: PUSH
22171: LD_INT 1
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22259
22179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22180: LD_ADDR_VAR 0 12
22184: PUSH
22185: LD_VAR 0 18
22189: PPUSH
22190: LD_INT 22
22192: PUSH
22193: LD_VAR 0 16
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 58
22204: PUSH
22205: EMPTY
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 30
22213: PUSH
22214: LD_INT 32
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 30
22233: PUSH
22234: LD_INT 5
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: PPUSH
22252: CALL_OW 72
22256: ST_TO_ADDR
22257: GO 22481
22259: LD_INT 2
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22329
22267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22268: LD_ADDR_VAR 0 12
22272: PUSH
22273: LD_VAR 0 18
22277: PPUSH
22278: LD_INT 22
22280: PUSH
22281: LD_VAR 0 16
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 30
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 72
22326: ST_TO_ADDR
22327: GO 22481
22329: LD_INT 3
22331: DOUBLE
22332: EQUAL
22333: IFTRUE 22337
22335: GO 22399
22337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22338: LD_ADDR_VAR 0 12
22342: PUSH
22343: LD_VAR 0 18
22347: PPUSH
22348: LD_INT 22
22350: PUSH
22351: LD_VAR 0 16
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 30
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 30
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 72
22396: ST_TO_ADDR
22397: GO 22481
22399: LD_INT 4
22401: DOUBLE
22402: EQUAL
22403: IFTRUE 22407
22405: GO 22480
22407: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22408: LD_ADDR_VAR 0 12
22412: PUSH
22413: LD_VAR 0 18
22417: PPUSH
22418: LD_INT 22
22420: PUSH
22421: LD_VAR 0 16
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 30
22435: PUSH
22436: LD_INT 6
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 30
22445: PUSH
22446: LD_INT 7
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 30
22455: PUSH
22456: LD_INT 8
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PPUSH
22473: CALL_OW 72
22477: ST_TO_ADDR
22478: GO 22481
22480: POP
// if i = 1 then
22481: LD_VAR 0 8
22485: PUSH
22486: LD_INT 1
22488: EQUAL
22489: IFFALSE 22600
// begin tmp := [ ] ;
22491: LD_ADDR_VAR 0 19
22495: PUSH
22496: EMPTY
22497: ST_TO_ADDR
// for j in f do
22498: LD_ADDR_VAR 0 9
22502: PUSH
22503: LD_VAR 0 12
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22582
// if GetBType ( j ) = b_bunker then
22511: LD_VAR 0 9
22515: PPUSH
22516: CALL_OW 266
22520: PUSH
22521: LD_INT 32
22523: EQUAL
22524: IFFALSE 22551
// tmp := Insert ( tmp , 1 , j ) else
22526: LD_ADDR_VAR 0 19
22530: PUSH
22531: LD_VAR 0 19
22535: PPUSH
22536: LD_INT 1
22538: PPUSH
22539: LD_VAR 0 9
22543: PPUSH
22544: CALL_OW 2
22548: ST_TO_ADDR
22549: GO 22580
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22551: LD_ADDR_VAR 0 19
22555: PUSH
22556: LD_VAR 0 19
22560: PPUSH
22561: LD_VAR 0 19
22565: PUSH
22566: LD_INT 1
22568: PLUS
22569: PPUSH
22570: LD_VAR 0 9
22574: PPUSH
22575: CALL_OW 2
22579: ST_TO_ADDR
22580: GO 22508
22582: POP
22583: POP
// if tmp then
22584: LD_VAR 0 19
22588: IFFALSE 22600
// f := tmp ;
22590: LD_ADDR_VAR 0 12
22594: PUSH
22595: LD_VAR 0 19
22599: ST_TO_ADDR
// end ; x := personel [ i ] ;
22600: LD_ADDR_VAR 0 13
22604: PUSH
22605: LD_VAR 0 6
22609: PUSH
22610: LD_VAR 0 8
22614: ARRAY
22615: ST_TO_ADDR
// if x = - 1 then
22616: LD_VAR 0 13
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: EQUAL
22625: IFFALSE 22834
// begin for j in f do
22627: LD_ADDR_VAR 0 9
22631: PUSH
22632: LD_VAR 0 12
22636: PUSH
22637: FOR_IN
22638: IFFALSE 22830
// repeat InitHc ;
22640: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22644: LD_VAR 0 9
22648: PPUSH
22649: CALL_OW 266
22653: PUSH
22654: LD_INT 5
22656: EQUAL
22657: IFFALSE 22727
// begin if UnitsInside ( j ) < 3 then
22659: LD_VAR 0 9
22663: PPUSH
22664: CALL_OW 313
22668: PUSH
22669: LD_INT 3
22671: LESS
22672: IFFALSE 22708
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22674: LD_INT 0
22676: PPUSH
22677: LD_INT 5
22679: PUSH
22680: LD_INT 8
22682: PUSH
22683: LD_INT 9
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: LD_VAR 0 17
22695: ARRAY
22696: PPUSH
22697: LD_VAR 0 4
22701: PPUSH
22702: CALL_OW 380
22706: GO 22725
// PrepareHuman ( false , i , skill ) ;
22708: LD_INT 0
22710: PPUSH
22711: LD_VAR 0 8
22715: PPUSH
22716: LD_VAR 0 4
22720: PPUSH
22721: CALL_OW 380
// end else
22725: GO 22744
// PrepareHuman ( false , i , skill ) ;
22727: LD_INT 0
22729: PPUSH
22730: LD_VAR 0 8
22734: PPUSH
22735: LD_VAR 0 4
22739: PPUSH
22740: CALL_OW 380
// un := CreateHuman ;
22744: LD_ADDR_VAR 0 14
22748: PUSH
22749: CALL_OW 44
22753: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22754: LD_ADDR_VAR 0 7
22758: PUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_INT 1
22766: PPUSH
22767: LD_VAR 0 14
22771: PPUSH
22772: CALL_OW 2
22776: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22777: LD_VAR 0 14
22781: PPUSH
22782: LD_VAR 0 9
22786: PPUSH
22787: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22791: LD_VAR 0 9
22795: PPUSH
22796: CALL_OW 313
22800: PUSH
22801: LD_INT 6
22803: EQUAL
22804: PUSH
22805: LD_VAR 0 9
22809: PPUSH
22810: CALL_OW 266
22814: PUSH
22815: LD_INT 32
22817: PUSH
22818: LD_INT 31
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: IN
22825: OR
22826: IFFALSE 22640
22828: GO 22637
22830: POP
22831: POP
// end else
22832: GO 23214
// for j = 1 to x do
22834: LD_ADDR_VAR 0 9
22838: PUSH
22839: DOUBLE
22840: LD_INT 1
22842: DEC
22843: ST_TO_ADDR
22844: LD_VAR 0 13
22848: PUSH
22849: FOR_TO
22850: IFFALSE 23212
// begin InitHc ;
22852: CALL_OW 19
// if not f then
22856: LD_VAR 0 12
22860: NOT
22861: IFFALSE 22950
// begin PrepareHuman ( false , i , skill ) ;
22863: LD_INT 0
22865: PPUSH
22866: LD_VAR 0 8
22870: PPUSH
22871: LD_VAR 0 4
22875: PPUSH
22876: CALL_OW 380
// un := CreateHuman ;
22880: LD_ADDR_VAR 0 14
22884: PUSH
22885: CALL_OW 44
22889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22890: LD_ADDR_VAR 0 7
22894: PUSH
22895: LD_VAR 0 7
22899: PPUSH
22900: LD_INT 1
22902: PPUSH
22903: LD_VAR 0 14
22907: PPUSH
22908: CALL_OW 2
22912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22913: LD_VAR 0 14
22917: PPUSH
22918: LD_VAR 0 1
22922: PPUSH
22923: CALL_OW 250
22927: PPUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL_OW 251
22937: PPUSH
22938: LD_INT 10
22940: PPUSH
22941: LD_INT 0
22943: PPUSH
22944: CALL_OW 50
// continue ;
22948: GO 22849
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22950: LD_VAR 0 12
22954: PUSH
22955: LD_INT 1
22957: ARRAY
22958: PPUSH
22959: CALL_OW 313
22963: PUSH
22964: LD_VAR 0 12
22968: PUSH
22969: LD_INT 1
22971: ARRAY
22972: PPUSH
22973: CALL_OW 266
22977: PUSH
22978: LD_INT 32
22980: PUSH
22981: LD_INT 31
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: IN
22988: AND
22989: PUSH
22990: LD_VAR 0 12
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PPUSH
22999: CALL_OW 313
23003: PUSH
23004: LD_INT 6
23006: EQUAL
23007: OR
23008: IFFALSE 23028
// f := Delete ( f , 1 ) ;
23010: LD_ADDR_VAR 0 12
23014: PUSH
23015: LD_VAR 0 12
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: CALL_OW 3
23027: ST_TO_ADDR
// if not f then
23028: LD_VAR 0 12
23032: NOT
23033: IFFALSE 23051
// begin x := x + 2 ;
23035: LD_ADDR_VAR 0 13
23039: PUSH
23040: LD_VAR 0 13
23044: PUSH
23045: LD_INT 2
23047: PLUS
23048: ST_TO_ADDR
// continue ;
23049: GO 22849
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23051: LD_VAR 0 12
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: PPUSH
23060: CALL_OW 266
23064: PUSH
23065: LD_INT 5
23067: EQUAL
23068: IFFALSE 23142
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23070: LD_VAR 0 12
23074: PUSH
23075: LD_INT 1
23077: ARRAY
23078: PPUSH
23079: CALL_OW 313
23083: PUSH
23084: LD_INT 3
23086: LESS
23087: IFFALSE 23123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23089: LD_INT 0
23091: PPUSH
23092: LD_INT 5
23094: PUSH
23095: LD_INT 8
23097: PUSH
23098: LD_INT 9
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: LD_VAR 0 17
23110: ARRAY
23111: PPUSH
23112: LD_VAR 0 4
23116: PPUSH
23117: CALL_OW 380
23121: GO 23140
// PrepareHuman ( false , i , skill ) ;
23123: LD_INT 0
23125: PPUSH
23126: LD_VAR 0 8
23130: PPUSH
23131: LD_VAR 0 4
23135: PPUSH
23136: CALL_OW 380
// end else
23140: GO 23159
// PrepareHuman ( false , i , skill ) ;
23142: LD_INT 0
23144: PPUSH
23145: LD_VAR 0 8
23149: PPUSH
23150: LD_VAR 0 4
23154: PPUSH
23155: CALL_OW 380
// un := CreateHuman ;
23159: LD_ADDR_VAR 0 14
23163: PUSH
23164: CALL_OW 44
23168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23169: LD_ADDR_VAR 0 7
23173: PUSH
23174: LD_VAR 0 7
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: LD_VAR 0 14
23186: PPUSH
23187: CALL_OW 2
23191: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23192: LD_VAR 0 14
23196: PPUSH
23197: LD_VAR 0 12
23201: PUSH
23202: LD_INT 1
23204: ARRAY
23205: PPUSH
23206: CALL_OW 52
// end ;
23210: GO 22849
23212: POP
23213: POP
// end ;
23214: GO 22151
23216: POP
23217: POP
// result := result ^ buildings ;
23218: LD_ADDR_VAR 0 7
23222: PUSH
23223: LD_VAR 0 7
23227: PUSH
23228: LD_VAR 0 18
23232: ADD
23233: ST_TO_ADDR
// end else
23234: GO 23377
// begin for i = 1 to personel do
23236: LD_ADDR_VAR 0 8
23240: PUSH
23241: DOUBLE
23242: LD_INT 1
23244: DEC
23245: ST_TO_ADDR
23246: LD_VAR 0 6
23250: PUSH
23251: FOR_TO
23252: IFFALSE 23375
// begin if i > 4 then
23254: LD_VAR 0 8
23258: PUSH
23259: LD_INT 4
23261: GREATER
23262: IFFALSE 23266
// break ;
23264: GO 23375
// x := personel [ i ] ;
23266: LD_ADDR_VAR 0 13
23270: PUSH
23271: LD_VAR 0 6
23275: PUSH
23276: LD_VAR 0 8
23280: ARRAY
23281: ST_TO_ADDR
// if x = - 1 then
23282: LD_VAR 0 13
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: EQUAL
23291: IFFALSE 23295
// continue ;
23293: GO 23251
// PrepareHuman ( false , i , skill ) ;
23295: LD_INT 0
23297: PPUSH
23298: LD_VAR 0 8
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 380
// un := CreateHuman ;
23312: LD_ADDR_VAR 0 14
23316: PUSH
23317: CALL_OW 44
23321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23322: LD_VAR 0 14
23326: PPUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 250
23336: PPUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL_OW 251
23346: PPUSH
23347: LD_INT 10
23349: PPUSH
23350: LD_INT 0
23352: PPUSH
23353: CALL_OW 50
// result := result ^ un ;
23357: LD_ADDR_VAR 0 7
23361: PUSH
23362: LD_VAR 0 7
23366: PUSH
23367: LD_VAR 0 14
23371: ADD
23372: ST_TO_ADDR
// end ;
23373: GO 23251
23375: POP
23376: POP
// end ; end ;
23377: LD_VAR 0 7
23381: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23382: LD_INT 0
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
23391: PPUSH
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
// result := false ;
23400: LD_ADDR_VAR 0 3
23404: PUSH
23405: LD_INT 0
23407: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23408: LD_VAR 0 1
23412: NOT
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 266
23423: PUSH
23424: LD_INT 32
23426: PUSH
23427: LD_INT 33
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: IN
23434: NOT
23435: OR
23436: IFFALSE 23440
// exit ;
23438: GO 24576
// nat := GetNation ( tower ) ;
23440: LD_ADDR_VAR 0 12
23444: PUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 248
23454: ST_TO_ADDR
// side := GetSide ( tower ) ;
23455: LD_ADDR_VAR 0 16
23459: PUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 255
23469: ST_TO_ADDR
// x := GetX ( tower ) ;
23470: LD_ADDR_VAR 0 10
23474: PUSH
23475: LD_VAR 0 1
23479: PPUSH
23480: CALL_OW 250
23484: ST_TO_ADDR
// y := GetY ( tower ) ;
23485: LD_ADDR_VAR 0 11
23489: PUSH
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 251
23499: ST_TO_ADDR
// if not x or not y then
23500: LD_VAR 0 10
23504: NOT
23505: PUSH
23506: LD_VAR 0 11
23510: NOT
23511: OR
23512: IFFALSE 23516
// exit ;
23514: GO 24576
// weapon := 0 ;
23516: LD_ADDR_VAR 0 18
23520: PUSH
23521: LD_INT 0
23523: ST_TO_ADDR
// fac_list := [ ] ;
23524: LD_ADDR_VAR 0 17
23528: PUSH
23529: EMPTY
23530: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23531: LD_ADDR_VAR 0 6
23535: PUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 274
23545: PPUSH
23546: LD_VAR 0 2
23550: PPUSH
23551: CALL 21154 0 2
23555: PPUSH
23556: LD_INT 30
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PPUSH
23566: CALL_OW 72
23570: ST_TO_ADDR
// if not factories then
23571: LD_VAR 0 6
23575: NOT
23576: IFFALSE 23580
// exit ;
23578: GO 24576
// for i in factories do
23580: LD_ADDR_VAR 0 8
23584: PUSH
23585: LD_VAR 0 6
23589: PUSH
23590: FOR_IN
23591: IFFALSE 23616
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23593: LD_ADDR_VAR 0 17
23597: PUSH
23598: LD_VAR 0 17
23602: PUSH
23603: LD_VAR 0 8
23607: PPUSH
23608: CALL_OW 478
23612: UNION
23613: ST_TO_ADDR
23614: GO 23590
23616: POP
23617: POP
// if not fac_list then
23618: LD_VAR 0 17
23622: NOT
23623: IFFALSE 23627
// exit ;
23625: GO 24576
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23627: LD_ADDR_VAR 0 5
23631: PUSH
23632: LD_INT 4
23634: PUSH
23635: LD_INT 5
23637: PUSH
23638: LD_INT 9
23640: PUSH
23641: LD_INT 10
23643: PUSH
23644: LD_INT 6
23646: PUSH
23647: LD_INT 7
23649: PUSH
23650: LD_INT 11
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 27
23664: PUSH
23665: LD_INT 28
23667: PUSH
23668: LD_INT 26
23670: PUSH
23671: LD_INT 30
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 43
23682: PUSH
23683: LD_INT 44
23685: PUSH
23686: LD_INT 46
23688: PUSH
23689: LD_INT 45
23691: PUSH
23692: LD_INT 47
23694: PUSH
23695: LD_INT 49
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: PUSH
23711: LD_VAR 0 12
23715: ARRAY
23716: ST_TO_ADDR
// for i in list do
23717: LD_ADDR_VAR 0 8
23721: PUSH
23722: LD_VAR 0 5
23726: PUSH
23727: FOR_IN
23728: IFFALSE 23761
// if not i in fac_list then
23730: LD_VAR 0 8
23734: PUSH
23735: LD_VAR 0 17
23739: IN
23740: NOT
23741: IFFALSE 23759
// list := list diff i ;
23743: LD_ADDR_VAR 0 5
23747: PUSH
23748: LD_VAR 0 5
23752: PUSH
23753: LD_VAR 0 8
23757: DIFF
23758: ST_TO_ADDR
23759: GO 23727
23761: POP
23762: POP
// if not list then
23763: LD_VAR 0 5
23767: NOT
23768: IFFALSE 23772
// exit ;
23770: GO 24576
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23772: LD_VAR 0 12
23776: PUSH
23777: LD_INT 3
23779: EQUAL
23780: PUSH
23781: LD_INT 49
23783: PUSH
23784: LD_VAR 0 5
23788: IN
23789: AND
23790: PUSH
23791: LD_INT 31
23793: PPUSH
23794: LD_VAR 0 16
23798: PPUSH
23799: CALL_OW 321
23803: PUSH
23804: LD_INT 2
23806: EQUAL
23807: AND
23808: IFFALSE 23868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23810: LD_INT 22
23812: PUSH
23813: LD_VAR 0 16
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 35
23824: PUSH
23825: LD_INT 49
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 91
23834: PUSH
23835: LD_VAR 0 1
23839: PUSH
23840: LD_INT 10
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: PPUSH
23853: CALL_OW 69
23857: NOT
23858: IFFALSE 23868
// weapon := ru_time_lapser ;
23860: LD_ADDR_VAR 0 18
23864: PUSH
23865: LD_INT 49
23867: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23868: LD_VAR 0 12
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: IN
23883: PUSH
23884: LD_INT 11
23886: PUSH
23887: LD_VAR 0 5
23891: IN
23892: PUSH
23893: LD_INT 30
23895: PUSH
23896: LD_VAR 0 5
23900: IN
23901: OR
23902: AND
23903: PUSH
23904: LD_INT 6
23906: PPUSH
23907: LD_VAR 0 16
23911: PPUSH
23912: CALL_OW 321
23916: PUSH
23917: LD_INT 2
23919: EQUAL
23920: AND
23921: IFFALSE 24086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23923: LD_INT 22
23925: PUSH
23926: LD_VAR 0 16
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 35
23940: PUSH
23941: LD_INT 11
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 35
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 91
23965: PUSH
23966: LD_VAR 0 1
23970: PUSH
23971: LD_INT 18
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: PPUSH
23984: CALL_OW 69
23988: NOT
23989: PUSH
23990: LD_INT 22
23992: PUSH
23993: LD_VAR 0 16
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 30
24007: PUSH
24008: LD_INT 32
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 30
24017: PUSH
24018: LD_INT 33
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 91
24032: PUSH
24033: LD_VAR 0 1
24037: PUSH
24038: LD_INT 12
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: PPUSH
24054: CALL_OW 69
24058: PUSH
24059: LD_INT 2
24061: GREATER
24062: AND
24063: IFFALSE 24086
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24065: LD_ADDR_VAR 0 18
24069: PUSH
24070: LD_INT 11
24072: PUSH
24073: LD_INT 30
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_VAR 0 12
24084: ARRAY
24085: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24086: LD_VAR 0 18
24090: NOT
24091: PUSH
24092: LD_INT 40
24094: PPUSH
24095: LD_VAR 0 16
24099: PPUSH
24100: CALL_OW 321
24104: PUSH
24105: LD_INT 2
24107: EQUAL
24108: AND
24109: PUSH
24110: LD_INT 7
24112: PUSH
24113: LD_VAR 0 5
24117: IN
24118: PUSH
24119: LD_INT 28
24121: PUSH
24122: LD_VAR 0 5
24126: IN
24127: OR
24128: PUSH
24129: LD_INT 45
24131: PUSH
24132: LD_VAR 0 5
24136: IN
24137: OR
24138: AND
24139: IFFALSE 24393
// begin hex := GetHexInfo ( x , y ) ;
24141: LD_ADDR_VAR 0 4
24145: PUSH
24146: LD_VAR 0 10
24150: PPUSH
24151: LD_VAR 0 11
24155: PPUSH
24156: CALL_OW 546
24160: ST_TO_ADDR
// if hex [ 1 ] then
24161: LD_VAR 0 4
24165: PUSH
24166: LD_INT 1
24168: ARRAY
24169: IFFALSE 24173
// exit ;
24171: GO 24576
// height := hex [ 2 ] ;
24173: LD_ADDR_VAR 0 15
24177: PUSH
24178: LD_VAR 0 4
24182: PUSH
24183: LD_INT 2
24185: ARRAY
24186: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24187: LD_ADDR_VAR 0 14
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 2
24197: PUSH
24198: LD_INT 3
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
// for i in tmp do
24210: LD_ADDR_VAR 0 8
24214: PUSH
24215: LD_VAR 0 14
24219: PUSH
24220: FOR_IN
24221: IFFALSE 24391
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24223: LD_ADDR_VAR 0 9
24227: PUSH
24228: LD_VAR 0 10
24232: PPUSH
24233: LD_VAR 0 8
24237: PPUSH
24238: LD_INT 5
24240: PPUSH
24241: CALL_OW 272
24245: PUSH
24246: LD_VAR 0 11
24250: PPUSH
24251: LD_VAR 0 8
24255: PPUSH
24256: LD_INT 5
24258: PPUSH
24259: CALL_OW 273
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24268: LD_VAR 0 9
24272: PUSH
24273: LD_INT 1
24275: ARRAY
24276: PPUSH
24277: LD_VAR 0 9
24281: PUSH
24282: LD_INT 2
24284: ARRAY
24285: PPUSH
24286: CALL_OW 488
24290: IFFALSE 24389
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24292: LD_ADDR_VAR 0 4
24296: PUSH
24297: LD_VAR 0 9
24301: PUSH
24302: LD_INT 1
24304: ARRAY
24305: PPUSH
24306: LD_VAR 0 9
24310: PUSH
24311: LD_INT 2
24313: ARRAY
24314: PPUSH
24315: CALL_OW 546
24319: ST_TO_ADDR
// if hex [ 1 ] then
24320: LD_VAR 0 4
24324: PUSH
24325: LD_INT 1
24327: ARRAY
24328: IFFALSE 24332
// continue ;
24330: GO 24220
// h := hex [ 2 ] ;
24332: LD_ADDR_VAR 0 13
24336: PUSH
24337: LD_VAR 0 4
24341: PUSH
24342: LD_INT 2
24344: ARRAY
24345: ST_TO_ADDR
// if h + 7 < height then
24346: LD_VAR 0 13
24350: PUSH
24351: LD_INT 7
24353: PLUS
24354: PUSH
24355: LD_VAR 0 15
24359: LESS
24360: IFFALSE 24389
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24362: LD_ADDR_VAR 0 18
24366: PUSH
24367: LD_INT 7
24369: PUSH
24370: LD_INT 28
24372: PUSH
24373: LD_INT 45
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_VAR 0 12
24385: ARRAY
24386: ST_TO_ADDR
// break ;
24387: GO 24391
// end ; end ; end ;
24389: GO 24220
24391: POP
24392: POP
// end ; if not weapon then
24393: LD_VAR 0 18
24397: NOT
24398: IFFALSE 24458
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24400: LD_ADDR_VAR 0 5
24404: PUSH
24405: LD_VAR 0 5
24409: PUSH
24410: LD_INT 11
24412: PUSH
24413: LD_INT 30
24415: PUSH
24416: LD_INT 49
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: DIFF
24424: ST_TO_ADDR
// if not list then
24425: LD_VAR 0 5
24429: NOT
24430: IFFALSE 24434
// exit ;
24432: GO 24576
// weapon := list [ rand ( 1 , list ) ] ;
24434: LD_ADDR_VAR 0 18
24438: PUSH
24439: LD_VAR 0 5
24443: PUSH
24444: LD_INT 1
24446: PPUSH
24447: LD_VAR 0 5
24451: PPUSH
24452: CALL_OW 12
24456: ARRAY
24457: ST_TO_ADDR
// end ; if weapon then
24458: LD_VAR 0 18
24462: IFFALSE 24576
// begin tmp := CostOfWeapon ( weapon ) ;
24464: LD_ADDR_VAR 0 14
24468: PUSH
24469: LD_VAR 0 18
24473: PPUSH
24474: CALL_OW 451
24478: ST_TO_ADDR
// j := GetBase ( tower ) ;
24479: LD_ADDR_VAR 0 9
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 274
24493: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24494: LD_VAR 0 9
24498: PPUSH
24499: LD_INT 1
24501: PPUSH
24502: CALL_OW 275
24506: PUSH
24507: LD_VAR 0 14
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: GREATEREQUAL
24516: PUSH
24517: LD_VAR 0 9
24521: PPUSH
24522: LD_INT 2
24524: PPUSH
24525: CALL_OW 275
24529: PUSH
24530: LD_VAR 0 14
24534: PUSH
24535: LD_INT 2
24537: ARRAY
24538: GREATEREQUAL
24539: AND
24540: PUSH
24541: LD_VAR 0 9
24545: PPUSH
24546: LD_INT 3
24548: PPUSH
24549: CALL_OW 275
24553: PUSH
24554: LD_VAR 0 14
24558: PUSH
24559: LD_INT 3
24561: ARRAY
24562: GREATEREQUAL
24563: AND
24564: IFFALSE 24576
// result := weapon ;
24566: LD_ADDR_VAR 0 3
24570: PUSH
24571: LD_VAR 0 18
24575: ST_TO_ADDR
// end ; end ;
24576: LD_VAR 0 3
24580: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24581: LD_INT 0
24583: PPUSH
24584: PPUSH
// result := true ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_INT 1
24592: ST_TO_ADDR
// if array1 = array2 then
24593: LD_VAR 0 1
24597: PUSH
24598: LD_VAR 0 2
24602: EQUAL
24603: IFFALSE 24663
// begin for i = 1 to array1 do
24605: LD_ADDR_VAR 0 4
24609: PUSH
24610: DOUBLE
24611: LD_INT 1
24613: DEC
24614: ST_TO_ADDR
24615: LD_VAR 0 1
24619: PUSH
24620: FOR_TO
24621: IFFALSE 24659
// if array1 [ i ] <> array2 [ i ] then
24623: LD_VAR 0 1
24627: PUSH
24628: LD_VAR 0 4
24632: ARRAY
24633: PUSH
24634: LD_VAR 0 2
24638: PUSH
24639: LD_VAR 0 4
24643: ARRAY
24644: NONEQUAL
24645: IFFALSE 24657
// begin result := false ;
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: LD_INT 0
24654: ST_TO_ADDR
// break ;
24655: GO 24659
// end ;
24657: GO 24620
24659: POP
24660: POP
// end else
24661: GO 24671
// result := false ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_INT 0
24670: ST_TO_ADDR
// end ;
24671: LD_VAR 0 3
24675: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24676: LD_INT 0
24678: PPUSH
24679: PPUSH
24680: PPUSH
// pom := GetBase ( fac ) ;
24681: LD_ADDR_VAR 0 5
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 274
24695: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24696: LD_ADDR_VAR 0 4
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: LD_INT 1
24708: ARRAY
24709: PPUSH
24710: LD_VAR 0 2
24714: PUSH
24715: LD_INT 2
24717: ARRAY
24718: PPUSH
24719: LD_VAR 0 2
24723: PUSH
24724: LD_INT 3
24726: ARRAY
24727: PPUSH
24728: LD_VAR 0 2
24732: PUSH
24733: LD_INT 4
24735: ARRAY
24736: PPUSH
24737: CALL_OW 449
24741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24742: LD_ADDR_VAR 0 3
24746: PUSH
24747: LD_VAR 0 5
24751: PPUSH
24752: LD_INT 1
24754: PPUSH
24755: CALL_OW 275
24759: PUSH
24760: LD_VAR 0 4
24764: PUSH
24765: LD_INT 1
24767: ARRAY
24768: GREATEREQUAL
24769: PUSH
24770: LD_VAR 0 5
24774: PPUSH
24775: LD_INT 2
24777: PPUSH
24778: CALL_OW 275
24782: PUSH
24783: LD_VAR 0 4
24787: PUSH
24788: LD_INT 2
24790: ARRAY
24791: GREATEREQUAL
24792: AND
24793: PUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: LD_INT 3
24801: PPUSH
24802: CALL_OW 275
24806: PUSH
24807: LD_VAR 0 4
24811: PUSH
24812: LD_INT 3
24814: ARRAY
24815: GREATEREQUAL
24816: AND
24817: ST_TO_ADDR
// end ;
24818: LD_VAR 0 3
24822: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24823: LD_INT 0
24825: PPUSH
24826: PPUSH
24827: PPUSH
24828: PPUSH
// pom := GetBase ( building ) ;
24829: LD_ADDR_VAR 0 3
24833: PUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 274
24843: ST_TO_ADDR
// if not pom then
24844: LD_VAR 0 3
24848: NOT
24849: IFFALSE 24853
// exit ;
24851: GO 25023
// btype := GetBType ( building ) ;
24853: LD_ADDR_VAR 0 5
24857: PUSH
24858: LD_VAR 0 1
24862: PPUSH
24863: CALL_OW 266
24867: ST_TO_ADDR
// if btype = b_armoury then
24868: LD_VAR 0 5
24872: PUSH
24873: LD_INT 4
24875: EQUAL
24876: IFFALSE 24886
// btype := b_barracks ;
24878: LD_ADDR_VAR 0 5
24882: PUSH
24883: LD_INT 5
24885: ST_TO_ADDR
// if btype = b_depot then
24886: LD_VAR 0 5
24890: PUSH
24891: LD_INT 0
24893: EQUAL
24894: IFFALSE 24904
// btype := b_warehouse ;
24896: LD_ADDR_VAR 0 5
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// if btype = b_workshop then
24904: LD_VAR 0 5
24908: PUSH
24909: LD_INT 2
24911: EQUAL
24912: IFFALSE 24922
// btype := b_factory ;
24914: LD_ADDR_VAR 0 5
24918: PUSH
24919: LD_INT 3
24921: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24922: LD_ADDR_VAR 0 4
24926: PUSH
24927: LD_VAR 0 5
24931: PPUSH
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 248
24941: PPUSH
24942: CALL_OW 450
24946: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24947: LD_ADDR_VAR 0 2
24951: PUSH
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 275
24964: PUSH
24965: LD_VAR 0 4
24969: PUSH
24970: LD_INT 1
24972: ARRAY
24973: GREATEREQUAL
24974: PUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_INT 2
24982: PPUSH
24983: CALL_OW 275
24987: PUSH
24988: LD_VAR 0 4
24992: PUSH
24993: LD_INT 2
24995: ARRAY
24996: GREATEREQUAL
24997: AND
24998: PUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: LD_INT 3
25006: PPUSH
25007: CALL_OW 275
25011: PUSH
25012: LD_VAR 0 4
25016: PUSH
25017: LD_INT 3
25019: ARRAY
25020: GREATEREQUAL
25021: AND
25022: ST_TO_ADDR
// end ;
25023: LD_VAR 0 2
25027: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25028: LD_INT 0
25030: PPUSH
25031: PPUSH
25032: PPUSH
// pom := GetBase ( building ) ;
25033: LD_ADDR_VAR 0 4
25037: PUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 274
25047: ST_TO_ADDR
// if not pom then
25048: LD_VAR 0 4
25052: NOT
25053: IFFALSE 25057
// exit ;
25055: GO 25158
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25057: LD_ADDR_VAR 0 5
25061: PUSH
25062: LD_VAR 0 2
25066: PPUSH
25067: LD_VAR 0 1
25071: PPUSH
25072: CALL_OW 248
25076: PPUSH
25077: CALL_OW 450
25081: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_VAR 0 4
25091: PPUSH
25092: LD_INT 1
25094: PPUSH
25095: CALL_OW 275
25099: PUSH
25100: LD_VAR 0 5
25104: PUSH
25105: LD_INT 1
25107: ARRAY
25108: GREATEREQUAL
25109: PUSH
25110: LD_VAR 0 4
25114: PPUSH
25115: LD_INT 2
25117: PPUSH
25118: CALL_OW 275
25122: PUSH
25123: LD_VAR 0 5
25127: PUSH
25128: LD_INT 2
25130: ARRAY
25131: GREATEREQUAL
25132: AND
25133: PUSH
25134: LD_VAR 0 4
25138: PPUSH
25139: LD_INT 3
25141: PPUSH
25142: CALL_OW 275
25146: PUSH
25147: LD_VAR 0 5
25151: PUSH
25152: LD_INT 3
25154: ARRAY
25155: GREATEREQUAL
25156: AND
25157: ST_TO_ADDR
// end ;
25158: LD_VAR 0 3
25162: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25163: LD_INT 0
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
// result := false ;
25175: LD_ADDR_VAR 0 6
25179: PUSH
25180: LD_INT 0
25182: ST_TO_ADDR
// if not base or not btype or not x or not y then
25183: LD_VAR 0 1
25187: NOT
25188: PUSH
25189: LD_VAR 0 2
25193: NOT
25194: OR
25195: PUSH
25196: LD_VAR 0 3
25200: NOT
25201: OR
25202: PUSH
25203: LD_VAR 0 4
25207: NOT
25208: OR
25209: IFFALSE 25213
// exit ;
25211: GO 25822
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25213: LD_ADDR_VAR 0 12
25217: PUSH
25218: LD_VAR 0 2
25222: PPUSH
25223: LD_VAR 0 3
25227: PPUSH
25228: LD_VAR 0 4
25232: PPUSH
25233: LD_VAR 0 5
25237: PPUSH
25238: LD_VAR 0 1
25242: PUSH
25243: LD_INT 1
25245: ARRAY
25246: PPUSH
25247: CALL_OW 248
25251: PPUSH
25252: LD_INT 0
25254: PPUSH
25255: CALL 26659 0 6
25259: ST_TO_ADDR
// if not hexes then
25260: LD_VAR 0 12
25264: NOT
25265: IFFALSE 25269
// exit ;
25267: GO 25822
// for i = 1 to hexes do
25269: LD_ADDR_VAR 0 7
25273: PUSH
25274: DOUBLE
25275: LD_INT 1
25277: DEC
25278: ST_TO_ADDR
25279: LD_VAR 0 12
25283: PUSH
25284: FOR_TO
25285: IFFALSE 25820
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25287: LD_ADDR_VAR 0 11
25291: PUSH
25292: LD_VAR 0 12
25296: PUSH
25297: LD_VAR 0 7
25301: ARRAY
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: PPUSH
25307: LD_VAR 0 12
25311: PUSH
25312: LD_VAR 0 7
25316: ARRAY
25317: PUSH
25318: LD_INT 2
25320: ARRAY
25321: PPUSH
25322: CALL_OW 428
25326: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25327: LD_VAR 0 12
25331: PUSH
25332: LD_VAR 0 7
25336: ARRAY
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: PPUSH
25342: LD_VAR 0 12
25346: PUSH
25347: LD_VAR 0 7
25351: ARRAY
25352: PUSH
25353: LD_INT 2
25355: ARRAY
25356: PPUSH
25357: CALL_OW 351
25361: PUSH
25362: LD_VAR 0 12
25366: PUSH
25367: LD_VAR 0 7
25371: ARRAY
25372: PUSH
25373: LD_INT 1
25375: ARRAY
25376: PPUSH
25377: LD_VAR 0 12
25381: PUSH
25382: LD_VAR 0 7
25386: ARRAY
25387: PUSH
25388: LD_INT 2
25390: ARRAY
25391: PPUSH
25392: CALL_OW 488
25396: NOT
25397: OR
25398: PUSH
25399: LD_VAR 0 11
25403: PPUSH
25404: CALL_OW 247
25408: PUSH
25409: LD_INT 3
25411: EQUAL
25412: OR
25413: IFFALSE 25419
// exit ;
25415: POP
25416: POP
25417: GO 25822
// if not tmp or not tmp in base then
25419: LD_VAR 0 11
25423: NOT
25424: PUSH
25425: LD_VAR 0 11
25429: PUSH
25430: LD_VAR 0 1
25434: IN
25435: NOT
25436: OR
25437: IFFALSE 25441
// continue ;
25439: GO 25284
// result := true ;
25441: LD_ADDR_VAR 0 6
25445: PUSH
25446: LD_INT 1
25448: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25449: LD_ADDR_VAR 0 15
25453: PUSH
25454: LD_VAR 0 1
25458: PPUSH
25459: LD_INT 22
25461: PUSH
25462: LD_VAR 0 11
25466: PPUSH
25467: CALL_OW 255
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: LD_INT 30
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 30
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 72
25512: ST_TO_ADDR
// if dep then
25513: LD_VAR 0 15
25517: IFFALSE 25653
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25519: LD_ADDR_VAR 0 14
25523: PUSH
25524: LD_VAR 0 15
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: CALL_OW 250
25537: PPUSH
25538: LD_VAR 0 15
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: CALL_OW 254
25551: PPUSH
25552: LD_INT 5
25554: PPUSH
25555: CALL_OW 272
25559: PUSH
25560: LD_VAR 0 15
25564: PUSH
25565: LD_INT 1
25567: ARRAY
25568: PPUSH
25569: CALL_OW 251
25573: PPUSH
25574: LD_VAR 0 15
25578: PUSH
25579: LD_INT 1
25581: ARRAY
25582: PPUSH
25583: CALL_OW 254
25587: PPUSH
25588: LD_INT 5
25590: PPUSH
25591: CALL_OW 273
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25600: LD_VAR 0 14
25604: PUSH
25605: LD_INT 1
25607: ARRAY
25608: PPUSH
25609: LD_VAR 0 14
25613: PUSH
25614: LD_INT 2
25616: ARRAY
25617: PPUSH
25618: CALL_OW 488
25622: IFFALSE 25653
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25624: LD_VAR 0 11
25628: PPUSH
25629: LD_VAR 0 14
25633: PUSH
25634: LD_INT 1
25636: ARRAY
25637: PPUSH
25638: LD_VAR 0 14
25642: PUSH
25643: LD_INT 2
25645: ARRAY
25646: PPUSH
25647: CALL_OW 111
// continue ;
25651: GO 25284
// end ; end ; r := GetDir ( tmp ) ;
25653: LD_ADDR_VAR 0 13
25657: PUSH
25658: LD_VAR 0 11
25662: PPUSH
25663: CALL_OW 254
25667: ST_TO_ADDR
// if r = 5 then
25668: LD_VAR 0 13
25672: PUSH
25673: LD_INT 5
25675: EQUAL
25676: IFFALSE 25686
// r := 0 ;
25678: LD_ADDR_VAR 0 13
25682: PUSH
25683: LD_INT 0
25685: ST_TO_ADDR
// for j = r to 5 do
25686: LD_ADDR_VAR 0 8
25690: PUSH
25691: DOUBLE
25692: LD_VAR 0 13
25696: DEC
25697: ST_TO_ADDR
25698: LD_INT 5
25700: PUSH
25701: FOR_TO
25702: IFFALSE 25816
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25704: LD_ADDR_VAR 0 9
25708: PUSH
25709: LD_VAR 0 11
25713: PPUSH
25714: CALL_OW 250
25718: PPUSH
25719: LD_VAR 0 8
25723: PPUSH
25724: LD_INT 2
25726: PPUSH
25727: CALL_OW 272
25731: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25732: LD_ADDR_VAR 0 10
25736: PUSH
25737: LD_VAR 0 11
25741: PPUSH
25742: CALL_OW 251
25746: PPUSH
25747: LD_VAR 0 8
25751: PPUSH
25752: LD_INT 2
25754: PPUSH
25755: CALL_OW 273
25759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25760: LD_VAR 0 9
25764: PPUSH
25765: LD_VAR 0 10
25769: PPUSH
25770: CALL_OW 488
25774: PUSH
25775: LD_VAR 0 9
25779: PPUSH
25780: LD_VAR 0 10
25784: PPUSH
25785: CALL_OW 428
25789: NOT
25790: AND
25791: IFFALSE 25814
// begin ComMoveXY ( tmp , _x , _y ) ;
25793: LD_VAR 0 11
25797: PPUSH
25798: LD_VAR 0 9
25802: PPUSH
25803: LD_VAR 0 10
25807: PPUSH
25808: CALL_OW 111
// break ;
25812: GO 25816
// end ; end ;
25814: GO 25701
25816: POP
25817: POP
// end ;
25818: GO 25284
25820: POP
25821: POP
// end ;
25822: LD_VAR 0 6
25826: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
25833: PPUSH
25834: PPUSH
25835: PPUSH
25836: PPUSH
25837: PPUSH
25838: PPUSH
// result := false ;
25839: LD_ADDR_VAR 0 6
25843: PUSH
25844: LD_INT 0
25846: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25847: LD_VAR 0 1
25851: NOT
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 266
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: IN
25873: NOT
25874: OR
25875: PUSH
25876: LD_VAR 0 2
25880: NOT
25881: OR
25882: PUSH
25883: LD_VAR 0 5
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 4
25902: PUSH
25903: LD_INT 5
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: IN
25914: NOT
25915: OR
25916: PUSH
25917: LD_VAR 0 3
25921: PPUSH
25922: LD_VAR 0 4
25926: PPUSH
25927: CALL_OW 488
25931: NOT
25932: OR
25933: IFFALSE 25937
// exit ;
25935: GO 26654
// pom := GetBase ( depot ) ;
25937: LD_ADDR_VAR 0 10
25941: PUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 274
25951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25952: LD_ADDR_VAR 0 11
25956: PUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 248
25971: PPUSH
25972: CALL_OW 450
25976: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25977: LD_VAR 0 10
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 275
25989: PUSH
25990: LD_VAR 0 11
25994: PUSH
25995: LD_INT 1
25997: ARRAY
25998: GREATEREQUAL
25999: PUSH
26000: LD_VAR 0 10
26004: PPUSH
26005: LD_INT 2
26007: PPUSH
26008: CALL_OW 275
26012: PUSH
26013: LD_VAR 0 11
26017: PUSH
26018: LD_INT 2
26020: ARRAY
26021: GREATEREQUAL
26022: AND
26023: PUSH
26024: LD_VAR 0 10
26028: PPUSH
26029: LD_INT 3
26031: PPUSH
26032: CALL_OW 275
26036: PUSH
26037: LD_VAR 0 11
26041: PUSH
26042: LD_INT 3
26044: ARRAY
26045: GREATEREQUAL
26046: AND
26047: NOT
26048: IFFALSE 26052
// exit ;
26050: GO 26654
// if GetBType ( depot ) = b_depot then
26052: LD_VAR 0 1
26056: PPUSH
26057: CALL_OW 266
26061: PUSH
26062: LD_INT 0
26064: EQUAL
26065: IFFALSE 26077
// dist := 28 else
26067: LD_ADDR_VAR 0 14
26071: PUSH
26072: LD_INT 28
26074: ST_TO_ADDR
26075: GO 26085
// dist := 36 ;
26077: LD_ADDR_VAR 0 14
26081: PUSH
26082: LD_INT 36
26084: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_VAR 0 3
26094: PPUSH
26095: LD_VAR 0 4
26099: PPUSH
26100: CALL_OW 297
26104: PUSH
26105: LD_VAR 0 14
26109: GREATER
26110: IFFALSE 26114
// exit ;
26112: GO 26654
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26114: LD_ADDR_VAR 0 12
26118: PUSH
26119: LD_VAR 0 2
26123: PPUSH
26124: LD_VAR 0 3
26128: PPUSH
26129: LD_VAR 0 4
26133: PPUSH
26134: LD_VAR 0 5
26138: PPUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 248
26148: PPUSH
26149: LD_INT 0
26151: PPUSH
26152: CALL 26659 0 6
26156: ST_TO_ADDR
// if not hexes then
26157: LD_VAR 0 12
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26654
// hex := GetHexInfo ( x , y ) ;
26166: LD_ADDR_VAR 0 15
26170: PUSH
26171: LD_VAR 0 3
26175: PPUSH
26176: LD_VAR 0 4
26180: PPUSH
26181: CALL_OW 546
26185: ST_TO_ADDR
// if hex [ 1 ] then
26186: LD_VAR 0 15
26190: PUSH
26191: LD_INT 1
26193: ARRAY
26194: IFFALSE 26198
// exit ;
26196: GO 26654
// height := hex [ 2 ] ;
26198: LD_ADDR_VAR 0 13
26202: PUSH
26203: LD_VAR 0 15
26207: PUSH
26208: LD_INT 2
26210: ARRAY
26211: ST_TO_ADDR
// for i = 1 to hexes do
26212: LD_ADDR_VAR 0 7
26216: PUSH
26217: DOUBLE
26218: LD_INT 1
26220: DEC
26221: ST_TO_ADDR
26222: LD_VAR 0 12
26226: PUSH
26227: FOR_TO
26228: IFFALSE 26558
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26230: LD_VAR 0 12
26234: PUSH
26235: LD_VAR 0 7
26239: ARRAY
26240: PUSH
26241: LD_INT 1
26243: ARRAY
26244: PPUSH
26245: LD_VAR 0 12
26249: PUSH
26250: LD_VAR 0 7
26254: ARRAY
26255: PUSH
26256: LD_INT 2
26258: ARRAY
26259: PPUSH
26260: CALL_OW 488
26264: NOT
26265: PUSH
26266: LD_VAR 0 12
26270: PUSH
26271: LD_VAR 0 7
26275: ARRAY
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: LD_VAR 0 12
26285: PUSH
26286: LD_VAR 0 7
26290: ARRAY
26291: PUSH
26292: LD_INT 2
26294: ARRAY
26295: PPUSH
26296: CALL_OW 428
26300: PUSH
26301: LD_INT 0
26303: GREATER
26304: OR
26305: PUSH
26306: LD_VAR 0 12
26310: PUSH
26311: LD_VAR 0 7
26315: ARRAY
26316: PUSH
26317: LD_INT 1
26319: ARRAY
26320: PPUSH
26321: LD_VAR 0 12
26325: PUSH
26326: LD_VAR 0 7
26330: ARRAY
26331: PUSH
26332: LD_INT 2
26334: ARRAY
26335: PPUSH
26336: CALL_OW 351
26340: OR
26341: IFFALSE 26347
// exit ;
26343: POP
26344: POP
26345: GO 26654
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26347: LD_ADDR_VAR 0 8
26351: PUSH
26352: LD_VAR 0 12
26356: PUSH
26357: LD_VAR 0 7
26361: ARRAY
26362: PUSH
26363: LD_INT 1
26365: ARRAY
26366: PPUSH
26367: LD_VAR 0 12
26371: PUSH
26372: LD_VAR 0 7
26376: ARRAY
26377: PUSH
26378: LD_INT 2
26380: ARRAY
26381: PPUSH
26382: CALL_OW 546
26386: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26387: LD_VAR 0 8
26391: PUSH
26392: LD_INT 1
26394: ARRAY
26395: PUSH
26396: LD_VAR 0 8
26400: PUSH
26401: LD_INT 2
26403: ARRAY
26404: PUSH
26405: LD_VAR 0 13
26409: PUSH
26410: LD_INT 2
26412: PLUS
26413: GREATER
26414: OR
26415: PUSH
26416: LD_VAR 0 8
26420: PUSH
26421: LD_INT 2
26423: ARRAY
26424: PUSH
26425: LD_VAR 0 13
26429: PUSH
26430: LD_INT 2
26432: MINUS
26433: LESS
26434: OR
26435: PUSH
26436: LD_VAR 0 8
26440: PUSH
26441: LD_INT 3
26443: ARRAY
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 8
26450: PUSH
26451: LD_INT 9
26453: PUSH
26454: LD_INT 10
26456: PUSH
26457: LD_INT 11
26459: PUSH
26460: LD_INT 12
26462: PUSH
26463: LD_INT 13
26465: PUSH
26466: LD_INT 16
26468: PUSH
26469: LD_INT 17
26471: PUSH
26472: LD_INT 18
26474: PUSH
26475: LD_INT 19
26477: PUSH
26478: LD_INT 20
26480: PUSH
26481: LD_INT 21
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: IN
26499: NOT
26500: OR
26501: PUSH
26502: LD_VAR 0 8
26506: PUSH
26507: LD_INT 5
26509: ARRAY
26510: NOT
26511: OR
26512: PUSH
26513: LD_VAR 0 8
26517: PUSH
26518: LD_INT 6
26520: ARRAY
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 7
26530: PUSH
26531: LD_INT 9
26533: PUSH
26534: LD_INT 10
26536: PUSH
26537: LD_INT 11
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: IN
26548: NOT
26549: OR
26550: IFFALSE 26556
// exit ;
26552: POP
26553: POP
26554: GO 26654
// end ;
26556: GO 26227
26558: POP
26559: POP
// side := GetSide ( depot ) ;
26560: LD_ADDR_VAR 0 9
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 255
26574: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26575: LD_VAR 0 9
26579: PPUSH
26580: LD_VAR 0 3
26584: PPUSH
26585: LD_VAR 0 4
26589: PPUSH
26590: LD_INT 20
26592: PPUSH
26593: CALL 19308 0 4
26597: PUSH
26598: LD_INT 4
26600: ARRAY
26601: IFFALSE 26605
// exit ;
26603: GO 26654
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26605: LD_VAR 0 2
26609: PUSH
26610: LD_INT 29
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: IN
26620: PUSH
26621: LD_VAR 0 3
26625: PPUSH
26626: LD_VAR 0 4
26630: PPUSH
26631: LD_VAR 0 9
26635: PPUSH
26636: CALL_OW 440
26640: NOT
26641: AND
26642: IFFALSE 26646
// exit ;
26644: GO 26654
// result := true ;
26646: LD_ADDR_VAR 0 6
26650: PUSH
26651: LD_INT 1
26653: ST_TO_ADDR
// end ;
26654: LD_VAR 0 6
26658: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
// result = [ ] ;
26719: LD_ADDR_VAR 0 7
26723: PUSH
26724: EMPTY
26725: ST_TO_ADDR
// temp_list = [ ] ;
26726: LD_ADDR_VAR 0 9
26730: PUSH
26731: EMPTY
26732: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26733: LD_VAR 0 4
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 3
26749: PUSH
26750: LD_INT 4
26752: PUSH
26753: LD_INT 5
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: IN
26764: NOT
26765: PUSH
26766: LD_VAR 0 1
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: IN
26781: PUSH
26782: LD_VAR 0 5
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: LD_INT 3
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: IN
26801: NOT
26802: AND
26803: OR
26804: IFFALSE 26808
// exit ;
26806: GO 45199
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26808: LD_VAR 0 1
26812: PUSH
26813: LD_INT 6
26815: PUSH
26816: LD_INT 7
26818: PUSH
26819: LD_INT 8
26821: PUSH
26822: LD_INT 13
26824: PUSH
26825: LD_INT 12
26827: PUSH
26828: LD_INT 15
26830: PUSH
26831: LD_INT 11
26833: PUSH
26834: LD_INT 14
26836: PUSH
26837: LD_INT 10
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: IN
26851: IFFALSE 26861
// btype = b_lab ;
26853: LD_ADDR_VAR 0 1
26857: PUSH
26858: LD_INT 6
26860: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26861: LD_VAR 0 6
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: IN
26880: NOT
26881: PUSH
26882: LD_VAR 0 1
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: LD_INT 6
26901: PUSH
26902: LD_INT 36
26904: PUSH
26905: LD_INT 4
26907: PUSH
26908: LD_INT 5
26910: PUSH
26911: LD_INT 31
26913: PUSH
26914: LD_INT 32
26916: PUSH
26917: LD_INT 33
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: IN
26933: NOT
26934: PUSH
26935: LD_VAR 0 6
26939: PUSH
26940: LD_INT 1
26942: EQUAL
26943: AND
26944: OR
26945: PUSH
26946: LD_VAR 0 1
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 3
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: IN
26961: NOT
26962: PUSH
26963: LD_VAR 0 6
26967: PUSH
26968: LD_INT 2
26970: EQUAL
26971: AND
26972: OR
26973: IFFALSE 26983
// mode = 0 ;
26975: LD_ADDR_VAR 0 6
26979: PUSH
26980: LD_INT 0
26982: ST_TO_ADDR
// case mode of 0 :
26983: LD_VAR 0 6
26987: PUSH
26988: LD_INT 0
26990: DOUBLE
26991: EQUAL
26992: IFTRUE 26996
26994: GO 38449
26996: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26997: LD_ADDR_VAR 0 11
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 2
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 3
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27190: LD_ADDR_VAR 0 12
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 3
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27386: LD_ADDR_VAR 0 13
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: LD_INT 3
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 3
27545: NEG
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 3
27557: NEG
27558: PUSH
27559: LD_INT 3
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27585: LD_ADDR_VAR 0 14
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: LD_INT 3
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27781: LD_ADDR_VAR 0 15
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27974: LD_ADDR_VAR 0 16
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: LD_INT 2
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: LD_INT 3
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28167: LD_ADDR_VAR 0 17
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28397: LD_ADDR_VAR 0 18
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28627: LD_ADDR_VAR 0 19
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28857: LD_ADDR_VAR 0 20
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29087: LD_ADDR_VAR 0 21
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29317: LD_ADDR_VAR 0 22
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 2
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29547: LD_ADDR_VAR 0 23
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 2
29758: NEG
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: LD_INT 3
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29827: LD_ADDR_VAR 0 24
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: LD_INT 2
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30103: LD_ADDR_VAR 0 25
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: NEG
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: LD_INT 2
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30377: LD_ADDR_VAR 0 26
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30653: LD_ADDR_VAR 0 27
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: NEG
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30933: LD_ADDR_VAR 0 28
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 3
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 2
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31215: LD_ADDR_VAR 0 29
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 3
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 3
31459: NEG
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31494: LD_ADDR_VAR 0 30
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 3
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 3
31737: NEG
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31772: LD_ADDR_VAR 0 31
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32050: LD_ADDR_VAR 0 32
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 3
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32328: LD_ADDR_VAR 0 33
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: LD_INT 3
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 2
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32607: LD_ADDR_VAR 0 34
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: NEG
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32887: LD_ADDR_VAR 0 35
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32999: LD_ADDR_VAR 0 36
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33111: LD_ADDR_VAR 0 37
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33223: LD_ADDR_VAR 0 38
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33335: LD_ADDR_VAR 0 39
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33447: LD_ADDR_VAR 0 40
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33559: LD_ADDR_VAR 0 41
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: NEG
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: LD_INT 3
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33909: LD_ADDR_VAR 0 42
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: LD_INT 2
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 3
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: LD_INT 3
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 3
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: NEG
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: LD_INT 3
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34259: LD_ADDR_VAR 0 43
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 3
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34607: LD_ADDR_VAR 0 44
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: LD_INT 3
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 3
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: LD_INT 3
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 3
34892: NEG
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 3
34904: NEG
34905: PUSH
34906: LD_INT 2
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 3
34916: NEG
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34957: LD_ADDR_VAR 0 45
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 2
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 3
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 3
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 3
35193: PUSH
35194: LD_INT 2
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 3
35203: PUSH
35204: LD_INT 3
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 3
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35307: LD_ADDR_VAR 0 46
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: LD_INT 3
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 3
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35655: LD_ADDR_VAR 0 47
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35806: LD_ADDR_VAR 0 48
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35953: LD_ADDR_VAR 0 49
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36097: LD_ADDR_VAR 0 50
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36241: LD_ADDR_VAR 0 51
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36388: LD_ADDR_VAR 0 52
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 2
36492: NEG
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36539: LD_ADDR_VAR 0 53
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36769: LD_ADDR_VAR 0 54
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36999: LD_ADDR_VAR 0 55
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37229: LD_ADDR_VAR 0 56
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37459: LD_ADDR_VAR 0 57
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: NEG
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37689: LD_ADDR_VAR 0 58
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37919: LD_ADDR_VAR 0 59
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38007: LD_ADDR_VAR 0 60
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38095: LD_ADDR_VAR 0 61
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38183: LD_ADDR_VAR 0 62
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38271: LD_ADDR_VAR 0 63
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38359: LD_ADDR_VAR 0 64
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// end ; 1 :
38447: GO 44344
38449: LD_INT 1
38451: DOUBLE
38452: EQUAL
38453: IFTRUE 38457
38455: GO 41080
38457: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38458: LD_ADDR_VAR 0 11
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38502: LD_ADDR_VAR 0 12
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38543: LD_ADDR_VAR 0 13
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38583: LD_ADDR_VAR 0 14
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 3
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38624: LD_ADDR_VAR 0 15
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 3
38653: NEG
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38668: LD_ADDR_VAR 0 16
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: NEG
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38714: LD_ADDR_VAR 0 17
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 3
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38758: LD_ADDR_VAR 0 18
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 3
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38799: LD_ADDR_VAR 0 19
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38839: LD_ADDR_VAR 0 20
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 3
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 3
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38880: LD_ADDR_VAR 0 21
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 3
38898: NEG
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38924: LD_ADDR_VAR 0 22
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 3
38955: NEG
38956: PUSH
38957: LD_INT 3
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38970: LD_ADDR_VAR 0 23
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 4
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 3
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39014: LD_ADDR_VAR 0 24
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39055: LD_ADDR_VAR 0 25
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 4
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 4
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39095: LD_ADDR_VAR 0 26
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: LD_INT 4
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39136: LD_ADDR_VAR 0 27
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 3
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 4
39165: NEG
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39180: LD_ADDR_VAR 0 28
39184: PUSH
39185: LD_INT 3
39187: NEG
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 4
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 4
39211: NEG
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39226: LD_ADDR_VAR 0 29
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: LD_INT 3
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 4
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 4
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 5
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 5
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 4
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 6
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 6
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 5
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39381: LD_ADDR_VAR 0 30
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 5
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 5
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 5
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 6
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 6
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39524: LD_ADDR_VAR 0 31
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 4
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 4
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: LD_INT 4
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: LD_INT 4
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 5
39601: PUSH
39602: LD_INT 5
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: LD_INT 5
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 6
39621: PUSH
39622: LD_INT 5
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 6
39631: PUSH
39632: LD_INT 6
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 5
39641: PUSH
39642: LD_INT 6
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39663: LD_ADDR_VAR 0 32
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 4
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 4
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 5
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 5
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 4
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 6
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 6
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 5
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39806: LD_ADDR_VAR 0 33
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 3
39824: NEG
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 4
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 4
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 4
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 5
39892: NEG
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 5
39903: NEG
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 5
39915: NEG
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 6
39926: NEG
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 6
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39961: LD_ADDR_VAR 0 34
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 3
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: LD_INT 3
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: LD_INT 4
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 4
40016: NEG
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 4
40028: NEG
40029: PUSH
40030: LD_INT 4
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 4
40040: NEG
40041: PUSH
40042: LD_INT 5
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 5
40052: NEG
40053: PUSH
40054: LD_INT 4
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 5
40064: NEG
40065: PUSH
40066: LD_INT 5
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 5
40076: NEG
40077: PUSH
40078: LD_INT 6
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 6
40088: NEG
40089: PUSH
40090: LD_INT 5
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 6
40100: NEG
40101: PUSH
40102: LD_INT 6
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40124: LD_ADDR_VAR 0 41
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40168: LD_ADDR_VAR 0 42
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40209: LD_ADDR_VAR 0 43
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 3
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40249: LD_ADDR_VAR 0 44
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40290: LD_ADDR_VAR 0 45
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40334: LD_ADDR_VAR 0 46
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40380: LD_ADDR_VAR 0 47
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 3
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: LD_INT 3
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40413: LD_ADDR_VAR 0 48
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40444: LD_ADDR_VAR 0 49
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40473: LD_ADDR_VAR 0 50
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40502: LD_ADDR_VAR 0 51
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40533: LD_ADDR_VAR 0 52
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40566: LD_ADDR_VAR 0 53
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40610: LD_ADDR_VAR 0 54
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 3
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 3
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40651: LD_ADDR_VAR 0 55
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 3
40668: PUSH
40669: LD_INT 3
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40691: LD_ADDR_VAR 0 56
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 3
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40732: LD_ADDR_VAR 0 57
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40776: LD_ADDR_VAR 0 58
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 3
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 3
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40822: LD_ADDR_VAR 0 59
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40866: LD_ADDR_VAR 0 60
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40907: LD_ADDR_VAR 0 61
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40947: LD_ADDR_VAR 0 62
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40988: LD_ADDR_VAR 0 63
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41032: LD_ADDR_VAR 0 64
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// end ; 2 :
41078: GO 44344
41080: LD_INT 2
41082: DOUBLE
41083: EQUAL
41084: IFTRUE 41088
41086: GO 44343
41088: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41089: LD_ADDR_VAR 0 29
41093: PUSH
41094: LD_INT 4
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 4
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 5
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 5
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 4
41209: PUSH
41210: LD_INT 3
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 4
41219: PUSH
41220: LD_INT 4
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: LD_INT 4
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 4
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 4
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 4
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 4
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 5
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 5
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 4
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: LD_INT 5
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 3
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 4
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 4
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 4
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 4
41474: NEG
41475: PUSH
41476: LD_INT 4
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 4
41486: NEG
41487: PUSH
41488: LD_INT 5
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: LD_INT 4
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 4
41522: NEG
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 5
41534: NEG
41535: PUSH
41536: LD_INT 4
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 5
41546: NEG
41547: PUSH
41548: LD_INT 5
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: NEG
41559: PUSH
41560: LD_INT 5
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 5
41570: NEG
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41627: LD_ADDR_VAR 0 30
41631: PUSH
41632: LD_INT 4
41634: PUSH
41635: LD_INT 4
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 4
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 5
41654: PUSH
41655: LD_INT 4
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 5
41664: PUSH
41665: LD_INT 5
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 4
41674: PUSH
41675: LD_INT 5
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 3
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: LD_INT 5
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 4
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 4
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 4
41817: NEG
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 4
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 4
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 5
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 5
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 5
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 3
41919: NEG
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: NEG
41932: PUSH
41933: LD_INT 4
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 4
41979: NEG
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 4
41991: NEG
41992: PUSH
41993: LD_INT 4
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 4
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 4
42015: NEG
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 4
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 5
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 4
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 4
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 5
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 5
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42174: LD_ADDR_VAR 0 31
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 4
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 4
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 5
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 5
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 4
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 5
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 3
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 4
42330: NEG
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 4
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 4
42353: NEG
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 4
42376: NEG
42377: PUSH
42378: LD_INT 4
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 4
42388: NEG
42389: PUSH
42390: LD_INT 5
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: NEG
42401: PUSH
42402: LD_INT 4
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 3
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 4
42424: NEG
42425: PUSH
42426: LD_INT 3
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 5
42436: NEG
42437: PUSH
42438: LD_INT 4
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 5
42448: NEG
42449: PUSH
42450: LD_INT 5
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: LD_INT 5
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 5
42472: NEG
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 4
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 4
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 4
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 4
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 5
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 5
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 5
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42724: LD_ADDR_VAR 0 32
42728: PUSH
42729: LD_INT 4
42731: NEG
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 4
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 3
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 4
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 5
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 5
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 5
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 4
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 4
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 4
42905: NEG
42906: PUSH
42907: LD_INT 4
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 4
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 4
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 4
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 5
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 4
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 3
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 4
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 5
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 5
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 4
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 4
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 4
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 4
43146: PUSH
43147: LD_INT 3
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: LD_INT 4
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 5
43166: PUSH
43167: LD_INT 5
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 5
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 5
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43271: LD_ADDR_VAR 0 33
43275: PUSH
43276: LD_INT 4
43278: NEG
43279: PUSH
43280: LD_INT 4
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 4
43290: NEG
43291: PUSH
43292: LD_INT 5
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 4
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 4
43326: NEG
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 5
43338: NEG
43339: PUSH
43340: LD_INT 4
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 5
43350: NEG
43351: PUSH
43352: LD_INT 5
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 5
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 5
43374: NEG
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 4
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 4
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: LD_INT 4
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 4
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 4
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 5
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 5
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 4
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 5
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: LD_INT 3
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 4
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 4
43611: PUSH
43612: LD_INT 4
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 4
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 4
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 4
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 4
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 5
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 5
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 4
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 5
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43809: LD_ADDR_VAR 0 34
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 4
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 5
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 4
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 3
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 4
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 5
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: LD_INT 5
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 4
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 4
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 4
44011: PUSH
44012: LD_INT 4
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 4
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 5
44031: PUSH
44032: LD_INT 4
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 5
44041: PUSH
44042: LD_INT 5
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 5
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 4
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 4
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 4
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 4
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 4
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 4
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 5
44250: NEG
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 5
44261: NEG
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 5
44273: NEG
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// end ; end ;
44341: GO 44344
44343: POP
// case btype of b_depot , b_warehouse :
44344: LD_VAR 0 1
44348: PUSH
44349: LD_INT 0
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44363
44355: LD_INT 1
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44363
44361: GO 44564
44363: POP
// case nation of nation_american :
44364: LD_VAR 0 5
44368: PUSH
44369: LD_INT 1
44371: DOUBLE
44372: EQUAL
44373: IFTRUE 44377
44375: GO 44433
44377: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44378: LD_ADDR_VAR 0 9
44382: PUSH
44383: LD_VAR 0 11
44387: PUSH
44388: LD_VAR 0 12
44392: PUSH
44393: LD_VAR 0 13
44397: PUSH
44398: LD_VAR 0 14
44402: PUSH
44403: LD_VAR 0 15
44407: PUSH
44408: LD_VAR 0 16
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: PUSH
44421: LD_VAR 0 4
44425: PUSH
44426: LD_INT 1
44428: PLUS
44429: ARRAY
44430: ST_TO_ADDR
44431: GO 44562
44433: LD_INT 2
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44497
44441: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44442: LD_ADDR_VAR 0 9
44446: PUSH
44447: LD_VAR 0 17
44451: PUSH
44452: LD_VAR 0 18
44456: PUSH
44457: LD_VAR 0 19
44461: PUSH
44462: LD_VAR 0 20
44466: PUSH
44467: LD_VAR 0 21
44471: PUSH
44472: LD_VAR 0 22
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: PUSH
44485: LD_VAR 0 4
44489: PUSH
44490: LD_INT 1
44492: PLUS
44493: ARRAY
44494: ST_TO_ADDR
44495: GO 44562
44497: LD_INT 3
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44561
44505: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44506: LD_ADDR_VAR 0 9
44510: PUSH
44511: LD_VAR 0 23
44515: PUSH
44516: LD_VAR 0 24
44520: PUSH
44521: LD_VAR 0 25
44525: PUSH
44526: LD_VAR 0 26
44530: PUSH
44531: LD_VAR 0 27
44535: PUSH
44536: LD_VAR 0 28
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: PUSH
44549: LD_VAR 0 4
44553: PUSH
44554: LD_INT 1
44556: PLUS
44557: ARRAY
44558: ST_TO_ADDR
44559: GO 44562
44561: POP
44562: GO 45117
44564: LD_INT 2
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44578
44570: LD_INT 3
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44634
44578: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_VAR 0 29
44588: PUSH
44589: LD_VAR 0 30
44593: PUSH
44594: LD_VAR 0 31
44598: PUSH
44599: LD_VAR 0 32
44603: PUSH
44604: LD_VAR 0 33
44608: PUSH
44609: LD_VAR 0 34
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: PUSH
44622: LD_VAR 0 4
44626: PUSH
44627: LD_INT 1
44629: PLUS
44630: ARRAY
44631: ST_TO_ADDR
44632: GO 45117
44634: LD_INT 16
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44696
44640: LD_INT 17
44642: DOUBLE
44643: EQUAL
44644: IFTRUE 44696
44646: LD_INT 18
44648: DOUBLE
44649: EQUAL
44650: IFTRUE 44696
44652: LD_INT 19
44654: DOUBLE
44655: EQUAL
44656: IFTRUE 44696
44658: LD_INT 22
44660: DOUBLE
44661: EQUAL
44662: IFTRUE 44696
44664: LD_INT 20
44666: DOUBLE
44667: EQUAL
44668: IFTRUE 44696
44670: LD_INT 21
44672: DOUBLE
44673: EQUAL
44674: IFTRUE 44696
44676: LD_INT 23
44678: DOUBLE
44679: EQUAL
44680: IFTRUE 44696
44682: LD_INT 24
44684: DOUBLE
44685: EQUAL
44686: IFTRUE 44696
44688: LD_INT 25
44690: DOUBLE
44691: EQUAL
44692: IFTRUE 44696
44694: GO 44752
44696: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44697: LD_ADDR_VAR 0 9
44701: PUSH
44702: LD_VAR 0 35
44706: PUSH
44707: LD_VAR 0 36
44711: PUSH
44712: LD_VAR 0 37
44716: PUSH
44717: LD_VAR 0 38
44721: PUSH
44722: LD_VAR 0 39
44726: PUSH
44727: LD_VAR 0 40
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: PUSH
44740: LD_VAR 0 4
44744: PUSH
44745: LD_INT 1
44747: PLUS
44748: ARRAY
44749: ST_TO_ADDR
44750: GO 45117
44752: LD_INT 6
44754: DOUBLE
44755: EQUAL
44756: IFTRUE 44808
44758: LD_INT 7
44760: DOUBLE
44761: EQUAL
44762: IFTRUE 44808
44764: LD_INT 8
44766: DOUBLE
44767: EQUAL
44768: IFTRUE 44808
44770: LD_INT 13
44772: DOUBLE
44773: EQUAL
44774: IFTRUE 44808
44776: LD_INT 12
44778: DOUBLE
44779: EQUAL
44780: IFTRUE 44808
44782: LD_INT 15
44784: DOUBLE
44785: EQUAL
44786: IFTRUE 44808
44788: LD_INT 11
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44808
44794: LD_INT 14
44796: DOUBLE
44797: EQUAL
44798: IFTRUE 44808
44800: LD_INT 10
44802: DOUBLE
44803: EQUAL
44804: IFTRUE 44808
44806: GO 44864
44808: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_VAR 0 41
44818: PUSH
44819: LD_VAR 0 42
44823: PUSH
44824: LD_VAR 0 43
44828: PUSH
44829: LD_VAR 0 44
44833: PUSH
44834: LD_VAR 0 45
44838: PUSH
44839: LD_VAR 0 46
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: PUSH
44852: LD_VAR 0 4
44856: PUSH
44857: LD_INT 1
44859: PLUS
44860: ARRAY
44861: ST_TO_ADDR
44862: GO 45117
44864: LD_INT 36
44866: DOUBLE
44867: EQUAL
44868: IFTRUE 44872
44870: GO 44928
44872: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44873: LD_ADDR_VAR 0 9
44877: PUSH
44878: LD_VAR 0 47
44882: PUSH
44883: LD_VAR 0 48
44887: PUSH
44888: LD_VAR 0 49
44892: PUSH
44893: LD_VAR 0 50
44897: PUSH
44898: LD_VAR 0 51
44902: PUSH
44903: LD_VAR 0 52
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: PUSH
44916: LD_VAR 0 4
44920: PUSH
44921: LD_INT 1
44923: PLUS
44924: ARRAY
44925: ST_TO_ADDR
44926: GO 45117
44928: LD_INT 4
44930: DOUBLE
44931: EQUAL
44932: IFTRUE 44954
44934: LD_INT 5
44936: DOUBLE
44937: EQUAL
44938: IFTRUE 44954
44940: LD_INT 34
44942: DOUBLE
44943: EQUAL
44944: IFTRUE 44954
44946: LD_INT 37
44948: DOUBLE
44949: EQUAL
44950: IFTRUE 44954
44952: GO 45010
44954: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44955: LD_ADDR_VAR 0 9
44959: PUSH
44960: LD_VAR 0 53
44964: PUSH
44965: LD_VAR 0 54
44969: PUSH
44970: LD_VAR 0 55
44974: PUSH
44975: LD_VAR 0 56
44979: PUSH
44980: LD_VAR 0 57
44984: PUSH
44985: LD_VAR 0 58
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: PUSH
44998: LD_VAR 0 4
45002: PUSH
45003: LD_INT 1
45005: PLUS
45006: ARRAY
45007: ST_TO_ADDR
45008: GO 45117
45010: LD_INT 31
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45060
45016: LD_INT 32
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45060
45022: LD_INT 33
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45060
45028: LD_INT 27
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45060
45034: LD_INT 26
45036: DOUBLE
45037: EQUAL
45038: IFTRUE 45060
45040: LD_INT 28
45042: DOUBLE
45043: EQUAL
45044: IFTRUE 45060
45046: LD_INT 29
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45060
45052: LD_INT 30
45054: DOUBLE
45055: EQUAL
45056: IFTRUE 45060
45058: GO 45116
45060: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45061: LD_ADDR_VAR 0 9
45065: PUSH
45066: LD_VAR 0 59
45070: PUSH
45071: LD_VAR 0 60
45075: PUSH
45076: LD_VAR 0 61
45080: PUSH
45081: LD_VAR 0 62
45085: PUSH
45086: LD_VAR 0 63
45090: PUSH
45091: LD_VAR 0 64
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: PUSH
45104: LD_VAR 0 4
45108: PUSH
45109: LD_INT 1
45111: PLUS
45112: ARRAY
45113: ST_TO_ADDR
45114: GO 45117
45116: POP
// temp_list2 = [ ] ;
45117: LD_ADDR_VAR 0 10
45121: PUSH
45122: EMPTY
45123: ST_TO_ADDR
// for i in temp_list do
45124: LD_ADDR_VAR 0 8
45128: PUSH
45129: LD_VAR 0 9
45133: PUSH
45134: FOR_IN
45135: IFFALSE 45187
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45137: LD_ADDR_VAR 0 10
45141: PUSH
45142: LD_VAR 0 10
45146: PUSH
45147: LD_VAR 0 8
45151: PUSH
45152: LD_INT 1
45154: ARRAY
45155: PUSH
45156: LD_VAR 0 2
45160: PLUS
45161: PUSH
45162: LD_VAR 0 8
45166: PUSH
45167: LD_INT 2
45169: ARRAY
45170: PUSH
45171: LD_VAR 0 3
45175: PLUS
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: ADD
45184: ST_TO_ADDR
45185: GO 45134
45187: POP
45188: POP
// result = temp_list2 ;
45189: LD_ADDR_VAR 0 7
45193: PUSH
45194: LD_VAR 0 10
45198: ST_TO_ADDR
// end ;
45199: LD_VAR 0 7
45203: RET
// export function EnemyInRange ( unit , dist ) ; begin
45204: LD_INT 0
45206: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_VAR 0 1
45216: PPUSH
45217: CALL_OW 255
45221: PPUSH
45222: LD_VAR 0 1
45226: PPUSH
45227: CALL_OW 250
45231: PPUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 251
45241: PPUSH
45242: LD_VAR 0 2
45246: PPUSH
45247: CALL 19308 0 4
45251: PUSH
45252: LD_INT 4
45254: ARRAY
45255: ST_TO_ADDR
// end ;
45256: LD_VAR 0 3
45260: RET
// export function PlayerSeeMe ( unit ) ; begin
45261: LD_INT 0
45263: PPUSH
// result := See ( your_side , unit ) ;
45264: LD_ADDR_VAR 0 2
45268: PUSH
45269: LD_OWVAR 2
45273: PPUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 292
45283: ST_TO_ADDR
// end ;
45284: LD_VAR 0 2
45288: RET
// export function ReverseDir ( unit ) ; begin
45289: LD_INT 0
45291: PPUSH
// if not unit then
45292: LD_VAR 0 1
45296: NOT
45297: IFFALSE 45301
// exit ;
45299: GO 45324
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45301: LD_ADDR_VAR 0 2
45305: PUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: CALL_OW 254
45315: PUSH
45316: LD_INT 3
45318: PLUS
45319: PUSH
45320: LD_INT 6
45322: MOD
45323: ST_TO_ADDR
// end ;
45324: LD_VAR 0 2
45328: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45329: LD_INT 0
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
// if not hexes then
45336: LD_VAR 0 2
45340: NOT
45341: IFFALSE 45345
// exit ;
45343: GO 45493
// dist := 9999 ;
45345: LD_ADDR_VAR 0 5
45349: PUSH
45350: LD_INT 9999
45352: ST_TO_ADDR
// for i = 1 to hexes do
45353: LD_ADDR_VAR 0 4
45357: PUSH
45358: DOUBLE
45359: LD_INT 1
45361: DEC
45362: ST_TO_ADDR
45363: LD_VAR 0 2
45367: PUSH
45368: FOR_TO
45369: IFFALSE 45481
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45371: LD_VAR 0 1
45375: PPUSH
45376: LD_VAR 0 2
45380: PUSH
45381: LD_VAR 0 4
45385: ARRAY
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: PPUSH
45391: LD_VAR 0 2
45395: PUSH
45396: LD_VAR 0 4
45400: ARRAY
45401: PUSH
45402: LD_INT 2
45404: ARRAY
45405: PPUSH
45406: CALL_OW 297
45410: PUSH
45411: LD_VAR 0 5
45415: LESS
45416: IFFALSE 45479
// begin hex := hexes [ i ] ;
45418: LD_ADDR_VAR 0 7
45422: PUSH
45423: LD_VAR 0 2
45427: PUSH
45428: LD_VAR 0 4
45432: ARRAY
45433: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45434: LD_ADDR_VAR 0 5
45438: PUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: LD_VAR 0 2
45448: PUSH
45449: LD_VAR 0 4
45453: ARRAY
45454: PUSH
45455: LD_INT 1
45457: ARRAY
45458: PPUSH
45459: LD_VAR 0 2
45463: PUSH
45464: LD_VAR 0 4
45468: ARRAY
45469: PUSH
45470: LD_INT 2
45472: ARRAY
45473: PPUSH
45474: CALL_OW 297
45478: ST_TO_ADDR
// end ; end ;
45479: GO 45368
45481: POP
45482: POP
// result := hex ;
45483: LD_ADDR_VAR 0 3
45487: PUSH
45488: LD_VAR 0 7
45492: ST_TO_ADDR
// end ;
45493: LD_VAR 0 3
45497: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45498: LD_INT 0
45500: PPUSH
45501: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45502: LD_VAR 0 1
45506: NOT
45507: PUSH
45508: LD_VAR 0 1
45512: PUSH
45513: LD_INT 21
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 23
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PPUSH
45537: CALL_OW 69
45541: IN
45542: NOT
45543: OR
45544: IFFALSE 45548
// exit ;
45546: GO 45595
// for i = 1 to 3 do
45548: LD_ADDR_VAR 0 3
45552: PUSH
45553: DOUBLE
45554: LD_INT 1
45556: DEC
45557: ST_TO_ADDR
45558: LD_INT 3
45560: PUSH
45561: FOR_TO
45562: IFFALSE 45593
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 250
45573: PPUSH
45574: LD_VAR 0 1
45578: PPUSH
45579: CALL_OW 251
45583: PPUSH
45584: LD_INT 1
45586: PPUSH
45587: CALL_OW 453
45591: GO 45561
45593: POP
45594: POP
// end ;
45595: LD_VAR 0 2
45599: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45600: LD_INT 0
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45608: LD_VAR 0 1
45612: NOT
45613: PUSH
45614: LD_VAR 0 2
45618: NOT
45619: OR
45620: PUSH
45621: LD_VAR 0 1
45625: PPUSH
45626: CALL_OW 314
45630: OR
45631: IFFALSE 45635
// exit ;
45633: GO 46076
// x := GetX ( enemy_unit ) ;
45635: LD_ADDR_VAR 0 7
45639: PUSH
45640: LD_VAR 0 2
45644: PPUSH
45645: CALL_OW 250
45649: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45650: LD_ADDR_VAR 0 8
45654: PUSH
45655: LD_VAR 0 2
45659: PPUSH
45660: CALL_OW 251
45664: ST_TO_ADDR
// if not x or not y then
45665: LD_VAR 0 7
45669: NOT
45670: PUSH
45671: LD_VAR 0 8
45675: NOT
45676: OR
45677: IFFALSE 45681
// exit ;
45679: GO 46076
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45681: LD_ADDR_VAR 0 6
45685: PUSH
45686: LD_VAR 0 7
45690: PPUSH
45691: LD_INT 0
45693: PPUSH
45694: LD_INT 4
45696: PPUSH
45697: CALL_OW 272
45701: PUSH
45702: LD_VAR 0 8
45706: PPUSH
45707: LD_INT 0
45709: PPUSH
45710: LD_INT 4
45712: PPUSH
45713: CALL_OW 273
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_VAR 0 7
45726: PPUSH
45727: LD_INT 1
45729: PPUSH
45730: LD_INT 4
45732: PPUSH
45733: CALL_OW 272
45737: PUSH
45738: LD_VAR 0 8
45742: PPUSH
45743: LD_INT 1
45745: PPUSH
45746: LD_INT 4
45748: PPUSH
45749: CALL_OW 273
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_VAR 0 7
45762: PPUSH
45763: LD_INT 2
45765: PPUSH
45766: LD_INT 4
45768: PPUSH
45769: CALL_OW 272
45773: PUSH
45774: LD_VAR 0 8
45778: PPUSH
45779: LD_INT 2
45781: PPUSH
45782: LD_INT 4
45784: PPUSH
45785: CALL_OW 273
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_VAR 0 7
45798: PPUSH
45799: LD_INT 3
45801: PPUSH
45802: LD_INT 4
45804: PPUSH
45805: CALL_OW 272
45809: PUSH
45810: LD_VAR 0 8
45814: PPUSH
45815: LD_INT 3
45817: PPUSH
45818: LD_INT 4
45820: PPUSH
45821: CALL_OW 273
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_VAR 0 7
45834: PPUSH
45835: LD_INT 4
45837: PPUSH
45838: LD_INT 4
45840: PPUSH
45841: CALL_OW 272
45845: PUSH
45846: LD_VAR 0 8
45850: PPUSH
45851: LD_INT 4
45853: PPUSH
45854: LD_INT 4
45856: PPUSH
45857: CALL_OW 273
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_VAR 0 7
45870: PPUSH
45871: LD_INT 5
45873: PPUSH
45874: LD_INT 4
45876: PPUSH
45877: CALL_OW 272
45881: PUSH
45882: LD_VAR 0 8
45886: PPUSH
45887: LD_INT 5
45889: PPUSH
45890: LD_INT 4
45892: PPUSH
45893: CALL_OW 273
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// for i = tmp downto 1 do
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: DOUBLE
45916: LD_VAR 0 6
45920: INC
45921: ST_TO_ADDR
45922: LD_INT 1
45924: PUSH
45925: FOR_DOWNTO
45926: IFFALSE 46027
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45928: LD_VAR 0 6
45932: PUSH
45933: LD_VAR 0 4
45937: ARRAY
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PPUSH
45943: LD_VAR 0 6
45947: PUSH
45948: LD_VAR 0 4
45952: ARRAY
45953: PUSH
45954: LD_INT 2
45956: ARRAY
45957: PPUSH
45958: CALL_OW 488
45962: NOT
45963: PUSH
45964: LD_VAR 0 6
45968: PUSH
45969: LD_VAR 0 4
45973: ARRAY
45974: PUSH
45975: LD_INT 1
45977: ARRAY
45978: PPUSH
45979: LD_VAR 0 6
45983: PUSH
45984: LD_VAR 0 4
45988: ARRAY
45989: PUSH
45990: LD_INT 2
45992: ARRAY
45993: PPUSH
45994: CALL_OW 428
45998: PUSH
45999: LD_INT 0
46001: NONEQUAL
46002: OR
46003: IFFALSE 46025
// tmp := Delete ( tmp , i ) ;
46005: LD_ADDR_VAR 0 6
46009: PUSH
46010: LD_VAR 0 6
46014: PPUSH
46015: LD_VAR 0 4
46019: PPUSH
46020: CALL_OW 3
46024: ST_TO_ADDR
46025: GO 45925
46027: POP
46028: POP
// j := GetClosestHex ( unit , tmp ) ;
46029: LD_ADDR_VAR 0 5
46033: PUSH
46034: LD_VAR 0 1
46038: PPUSH
46039: LD_VAR 0 6
46043: PPUSH
46044: CALL 45329 0 2
46048: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46049: LD_VAR 0 1
46053: PPUSH
46054: LD_VAR 0 5
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: LD_VAR 0 5
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: PPUSH
46072: CALL_OW 111
// end ;
46076: LD_VAR 0 3
46080: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46081: LD_INT 0
46083: PPUSH
46084: PPUSH
46085: PPUSH
// uc_side = 0 ;
46086: LD_ADDR_OWVAR 20
46090: PUSH
46091: LD_INT 0
46093: ST_TO_ADDR
// uc_nation = 0 ;
46094: LD_ADDR_OWVAR 21
46098: PUSH
46099: LD_INT 0
46101: ST_TO_ADDR
// InitHc ;
46102: CALL_OW 19
// InitVc ;
46106: CALL_OW 20
// if mastodonts then
46110: LD_VAR 0 6
46114: IFFALSE 46181
// for i = 1 to mastodonts do
46116: LD_ADDR_VAR 0 11
46120: PUSH
46121: DOUBLE
46122: LD_INT 1
46124: DEC
46125: ST_TO_ADDR
46126: LD_VAR 0 6
46130: PUSH
46131: FOR_TO
46132: IFFALSE 46179
// begin vc_chassis := 31 ;
46134: LD_ADDR_OWVAR 37
46138: PUSH
46139: LD_INT 31
46141: ST_TO_ADDR
// vc_control := control_rider ;
46142: LD_ADDR_OWVAR 38
46146: PUSH
46147: LD_INT 4
46149: ST_TO_ADDR
// animal := CreateVehicle ;
46150: LD_ADDR_VAR 0 12
46154: PUSH
46155: CALL_OW 45
46159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46160: LD_VAR 0 12
46164: PPUSH
46165: LD_VAR 0 8
46169: PPUSH
46170: LD_INT 0
46172: PPUSH
46173: CALL 48250 0 3
// end ;
46177: GO 46131
46179: POP
46180: POP
// if horses then
46181: LD_VAR 0 5
46185: IFFALSE 46252
// for i = 1 to horses do
46187: LD_ADDR_VAR 0 11
46191: PUSH
46192: DOUBLE
46193: LD_INT 1
46195: DEC
46196: ST_TO_ADDR
46197: LD_VAR 0 5
46201: PUSH
46202: FOR_TO
46203: IFFALSE 46250
// begin hc_class := 21 ;
46205: LD_ADDR_OWVAR 28
46209: PUSH
46210: LD_INT 21
46212: ST_TO_ADDR
// hc_gallery :=  ;
46213: LD_ADDR_OWVAR 33
46217: PUSH
46218: LD_STRING 
46220: ST_TO_ADDR
// animal := CreateHuman ;
46221: LD_ADDR_VAR 0 12
46225: PUSH
46226: CALL_OW 44
46230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46231: LD_VAR 0 12
46235: PPUSH
46236: LD_VAR 0 8
46240: PPUSH
46241: LD_INT 0
46243: PPUSH
46244: CALL 48250 0 3
// end ;
46248: GO 46202
46250: POP
46251: POP
// if birds then
46252: LD_VAR 0 1
46256: IFFALSE 46323
// for i = 1 to birds do
46258: LD_ADDR_VAR 0 11
46262: PUSH
46263: DOUBLE
46264: LD_INT 1
46266: DEC
46267: ST_TO_ADDR
46268: LD_VAR 0 1
46272: PUSH
46273: FOR_TO
46274: IFFALSE 46321
// begin hc_class = 18 ;
46276: LD_ADDR_OWVAR 28
46280: PUSH
46281: LD_INT 18
46283: ST_TO_ADDR
// hc_gallery =  ;
46284: LD_ADDR_OWVAR 33
46288: PUSH
46289: LD_STRING 
46291: ST_TO_ADDR
// animal := CreateHuman ;
46292: LD_ADDR_VAR 0 12
46296: PUSH
46297: CALL_OW 44
46301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46302: LD_VAR 0 12
46306: PPUSH
46307: LD_VAR 0 8
46311: PPUSH
46312: LD_INT 0
46314: PPUSH
46315: CALL 48250 0 3
// end ;
46319: GO 46273
46321: POP
46322: POP
// if tigers then
46323: LD_VAR 0 2
46327: IFFALSE 46411
// for i = 1 to tigers do
46329: LD_ADDR_VAR 0 11
46333: PUSH
46334: DOUBLE
46335: LD_INT 1
46337: DEC
46338: ST_TO_ADDR
46339: LD_VAR 0 2
46343: PUSH
46344: FOR_TO
46345: IFFALSE 46409
// begin hc_class = class_tiger ;
46347: LD_ADDR_OWVAR 28
46351: PUSH
46352: LD_INT 14
46354: ST_TO_ADDR
// hc_gallery =  ;
46355: LD_ADDR_OWVAR 33
46359: PUSH
46360: LD_STRING 
46362: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46363: LD_ADDR_OWVAR 35
46367: PUSH
46368: LD_INT 7
46370: NEG
46371: PPUSH
46372: LD_INT 7
46374: PPUSH
46375: CALL_OW 12
46379: ST_TO_ADDR
// animal := CreateHuman ;
46380: LD_ADDR_VAR 0 12
46384: PUSH
46385: CALL_OW 44
46389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46390: LD_VAR 0 12
46394: PPUSH
46395: LD_VAR 0 8
46399: PPUSH
46400: LD_INT 0
46402: PPUSH
46403: CALL 48250 0 3
// end ;
46407: GO 46344
46409: POP
46410: POP
// if apemans then
46411: LD_VAR 0 3
46415: IFFALSE 46538
// for i = 1 to apemans do
46417: LD_ADDR_VAR 0 11
46421: PUSH
46422: DOUBLE
46423: LD_INT 1
46425: DEC
46426: ST_TO_ADDR
46427: LD_VAR 0 3
46431: PUSH
46432: FOR_TO
46433: IFFALSE 46536
// begin hc_class = class_apeman ;
46435: LD_ADDR_OWVAR 28
46439: PUSH
46440: LD_INT 12
46442: ST_TO_ADDR
// hc_gallery =  ;
46443: LD_ADDR_OWVAR 33
46447: PUSH
46448: LD_STRING 
46450: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46451: LD_ADDR_OWVAR 35
46455: PUSH
46456: LD_INT 5
46458: NEG
46459: PPUSH
46460: LD_INT 5
46462: PPUSH
46463: CALL_OW 12
46467: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46468: LD_ADDR_OWVAR 31
46472: PUSH
46473: LD_INT 1
46475: PPUSH
46476: LD_INT 3
46478: PPUSH
46479: CALL_OW 12
46483: PUSH
46484: LD_INT 1
46486: PPUSH
46487: LD_INT 3
46489: PPUSH
46490: CALL_OW 12
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// animal := CreateHuman ;
46507: LD_ADDR_VAR 0 12
46511: PUSH
46512: CALL_OW 44
46516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46517: LD_VAR 0 12
46521: PPUSH
46522: LD_VAR 0 8
46526: PPUSH
46527: LD_INT 0
46529: PPUSH
46530: CALL 48250 0 3
// end ;
46534: GO 46432
46536: POP
46537: POP
// if enchidnas then
46538: LD_VAR 0 4
46542: IFFALSE 46609
// for i = 1 to enchidnas do
46544: LD_ADDR_VAR 0 11
46548: PUSH
46549: DOUBLE
46550: LD_INT 1
46552: DEC
46553: ST_TO_ADDR
46554: LD_VAR 0 4
46558: PUSH
46559: FOR_TO
46560: IFFALSE 46607
// begin hc_class = 13 ;
46562: LD_ADDR_OWVAR 28
46566: PUSH
46567: LD_INT 13
46569: ST_TO_ADDR
// hc_gallery =  ;
46570: LD_ADDR_OWVAR 33
46574: PUSH
46575: LD_STRING 
46577: ST_TO_ADDR
// animal := CreateHuman ;
46578: LD_ADDR_VAR 0 12
46582: PUSH
46583: CALL_OW 44
46587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46588: LD_VAR 0 12
46592: PPUSH
46593: LD_VAR 0 8
46597: PPUSH
46598: LD_INT 0
46600: PPUSH
46601: CALL 48250 0 3
// end ;
46605: GO 46559
46607: POP
46608: POP
// if fishes then
46609: LD_VAR 0 7
46613: IFFALSE 46680
// for i = 1 to fishes do
46615: LD_ADDR_VAR 0 11
46619: PUSH
46620: DOUBLE
46621: LD_INT 1
46623: DEC
46624: ST_TO_ADDR
46625: LD_VAR 0 7
46629: PUSH
46630: FOR_TO
46631: IFFALSE 46678
// begin hc_class = 20 ;
46633: LD_ADDR_OWVAR 28
46637: PUSH
46638: LD_INT 20
46640: ST_TO_ADDR
// hc_gallery =  ;
46641: LD_ADDR_OWVAR 33
46645: PUSH
46646: LD_STRING 
46648: ST_TO_ADDR
// animal := CreateHuman ;
46649: LD_ADDR_VAR 0 12
46653: PUSH
46654: CALL_OW 44
46658: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46659: LD_VAR 0 12
46663: PPUSH
46664: LD_VAR 0 9
46668: PPUSH
46669: LD_INT 0
46671: PPUSH
46672: CALL 48250 0 3
// end ;
46676: GO 46630
46678: POP
46679: POP
// end ;
46680: LD_VAR 0 10
46684: RET
// export function WantHeal ( sci , unit ) ; begin
46685: LD_INT 0
46687: PPUSH
// if GetTaskList ( sci ) > 0 then
46688: LD_VAR 0 1
46692: PPUSH
46693: CALL_OW 437
46697: PUSH
46698: LD_INT 0
46700: GREATER
46701: IFFALSE 46771
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46703: LD_VAR 0 1
46707: PPUSH
46708: CALL_OW 437
46712: PUSH
46713: LD_INT 1
46715: ARRAY
46716: PUSH
46717: LD_INT 1
46719: ARRAY
46720: PUSH
46721: LD_STRING l
46723: EQUAL
46724: PUSH
46725: LD_VAR 0 1
46729: PPUSH
46730: CALL_OW 437
46734: PUSH
46735: LD_INT 1
46737: ARRAY
46738: PUSH
46739: LD_INT 4
46741: ARRAY
46742: PUSH
46743: LD_VAR 0 2
46747: EQUAL
46748: AND
46749: IFFALSE 46761
// result := true else
46751: LD_ADDR_VAR 0 3
46755: PUSH
46756: LD_INT 1
46758: ST_TO_ADDR
46759: GO 46769
// result := false ;
46761: LD_ADDR_VAR 0 3
46765: PUSH
46766: LD_INT 0
46768: ST_TO_ADDR
// end else
46769: GO 46779
// result := false ;
46771: LD_ADDR_VAR 0 3
46775: PUSH
46776: LD_INT 0
46778: ST_TO_ADDR
// end ;
46779: LD_VAR 0 3
46783: RET
// export function HealTarget ( sci ) ; begin
46784: LD_INT 0
46786: PPUSH
// if not sci then
46787: LD_VAR 0 1
46791: NOT
46792: IFFALSE 46796
// exit ;
46794: GO 46861
// result := 0 ;
46796: LD_ADDR_VAR 0 2
46800: PUSH
46801: LD_INT 0
46803: ST_TO_ADDR
// if GetTaskList ( sci ) then
46804: LD_VAR 0 1
46808: PPUSH
46809: CALL_OW 437
46813: IFFALSE 46861
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 437
46824: PUSH
46825: LD_INT 1
46827: ARRAY
46828: PUSH
46829: LD_INT 1
46831: ARRAY
46832: PUSH
46833: LD_STRING l
46835: EQUAL
46836: IFFALSE 46861
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46838: LD_ADDR_VAR 0 2
46842: PUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 437
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: PUSH
46857: LD_INT 4
46859: ARRAY
46860: ST_TO_ADDR
// end ;
46861: LD_VAR 0 2
46865: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46866: LD_INT 0
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
// if not base_units then
46872: LD_VAR 0 1
46876: NOT
46877: IFFALSE 46881
// exit ;
46879: GO 46968
// result := false ;
46881: LD_ADDR_VAR 0 2
46885: PUSH
46886: LD_INT 0
46888: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46889: LD_ADDR_VAR 0 5
46893: PUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: LD_INT 21
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PPUSH
46909: CALL_OW 72
46913: ST_TO_ADDR
// if not tmp then
46914: LD_VAR 0 5
46918: NOT
46919: IFFALSE 46923
// exit ;
46921: GO 46968
// for i in tmp do
46923: LD_ADDR_VAR 0 3
46927: PUSH
46928: LD_VAR 0 5
46932: PUSH
46933: FOR_IN
46934: IFFALSE 46966
// begin result := EnemyInRange ( i , 22 ) ;
46936: LD_ADDR_VAR 0 2
46940: PUSH
46941: LD_VAR 0 3
46945: PPUSH
46946: LD_INT 22
46948: PPUSH
46949: CALL 45204 0 2
46953: ST_TO_ADDR
// if result then
46954: LD_VAR 0 2
46958: IFFALSE 46964
// exit ;
46960: POP
46961: POP
46962: GO 46968
// end ;
46964: GO 46933
46966: POP
46967: POP
// end ;
46968: LD_VAR 0 2
46972: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
46973: LD_INT 0
46975: PPUSH
46976: PPUSH
// if not units then
46977: LD_VAR 0 1
46981: NOT
46982: IFFALSE 46986
// exit ;
46984: GO 47056
// result := [ ] ;
46986: LD_ADDR_VAR 0 3
46990: PUSH
46991: EMPTY
46992: ST_TO_ADDR
// for i in units do
46993: LD_ADDR_VAR 0 4
46997: PUSH
46998: LD_VAR 0 1
47002: PUSH
47003: FOR_IN
47004: IFFALSE 47054
// if GetTag ( i ) = tag then
47006: LD_VAR 0 4
47010: PPUSH
47011: CALL_OW 110
47015: PUSH
47016: LD_VAR 0 2
47020: EQUAL
47021: IFFALSE 47052
// result := Insert ( result , result + 1 , i ) ;
47023: LD_ADDR_VAR 0 3
47027: PUSH
47028: LD_VAR 0 3
47032: PPUSH
47033: LD_VAR 0 3
47037: PUSH
47038: LD_INT 1
47040: PLUS
47041: PPUSH
47042: LD_VAR 0 4
47046: PPUSH
47047: CALL_OW 2
47051: ST_TO_ADDR
47052: GO 47003
47054: POP
47055: POP
// end ;
47056: LD_VAR 0 3
47060: RET
// export function IsDriver ( un ) ; begin
47061: LD_INT 0
47063: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47064: LD_ADDR_VAR 0 2
47068: PUSH
47069: LD_VAR 0 1
47073: PUSH
47074: LD_INT 55
47076: PUSH
47077: EMPTY
47078: LIST
47079: PPUSH
47080: CALL_OW 69
47084: IN
47085: ST_TO_ADDR
// end ;
47086: LD_VAR 0 2
47090: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47091: LD_INT 0
47093: PPUSH
47094: PPUSH
// list := [ ] ;
47095: LD_ADDR_VAR 0 5
47099: PUSH
47100: EMPTY
47101: ST_TO_ADDR
// case d of 0 :
47102: LD_VAR 0 3
47106: PUSH
47107: LD_INT 0
47109: DOUBLE
47110: EQUAL
47111: IFTRUE 47115
47113: GO 47248
47115: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47116: LD_ADDR_VAR 0 5
47120: PUSH
47121: LD_VAR 0 1
47125: PUSH
47126: LD_INT 4
47128: MINUS
47129: PUSH
47130: LD_VAR 0 2
47134: PUSH
47135: LD_INT 4
47137: MINUS
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: PUSH
47147: LD_VAR 0 1
47151: PUSH
47152: LD_INT 3
47154: MINUS
47155: PUSH
47156: LD_VAR 0 2
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: LD_VAR 0 1
47173: PUSH
47174: LD_INT 4
47176: PLUS
47177: PUSH
47178: LD_VAR 0 2
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: LD_VAR 0 1
47195: PUSH
47196: LD_INT 3
47198: PLUS
47199: PUSH
47200: LD_VAR 0 2
47204: PUSH
47205: LD_INT 3
47207: PLUS
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: PUSH
47217: LD_VAR 0 1
47221: PUSH
47222: LD_VAR 0 2
47226: PUSH
47227: LD_INT 4
47229: PLUS
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// end ; 1 :
47246: GO 47946
47248: LD_INT 1
47250: DOUBLE
47251: EQUAL
47252: IFTRUE 47256
47254: GO 47389
47256: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47257: LD_ADDR_VAR 0 5
47261: PUSH
47262: LD_VAR 0 1
47266: PUSH
47267: LD_VAR 0 2
47271: PUSH
47272: LD_INT 4
47274: MINUS
47275: PUSH
47276: LD_INT 3
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: LD_INT 3
47291: MINUS
47292: PUSH
47293: LD_VAR 0 2
47297: PUSH
47298: LD_INT 3
47300: MINUS
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: PUSH
47310: LD_VAR 0 1
47314: PUSH
47315: LD_INT 4
47317: MINUS
47318: PUSH
47319: LD_VAR 0 2
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: PUSH
47332: LD_VAR 0 1
47336: PUSH
47337: LD_VAR 0 2
47341: PUSH
47342: LD_INT 3
47344: PLUS
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: PUSH
47354: LD_VAR 0 1
47358: PUSH
47359: LD_INT 4
47361: PLUS
47362: PUSH
47363: LD_VAR 0 2
47367: PUSH
47368: LD_INT 4
47370: PLUS
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// end ; 2 :
47387: GO 47946
47389: LD_INT 2
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47397
47395: GO 47526
47397: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47398: LD_ADDR_VAR 0 5
47402: PUSH
47403: LD_VAR 0 1
47407: PUSH
47408: LD_VAR 0 2
47412: PUSH
47413: LD_INT 3
47415: MINUS
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: PUSH
47425: LD_VAR 0 1
47429: PUSH
47430: LD_INT 4
47432: PLUS
47433: PUSH
47434: LD_VAR 0 2
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: PUSH
47447: LD_VAR 0 1
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_INT 4
47459: PLUS
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: PUSH
47469: LD_VAR 0 1
47473: PUSH
47474: LD_INT 3
47476: MINUS
47477: PUSH
47478: LD_VAR 0 2
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: PUSH
47491: LD_VAR 0 1
47495: PUSH
47496: LD_INT 4
47498: MINUS
47499: PUSH
47500: LD_VAR 0 2
47504: PUSH
47505: LD_INT 4
47507: MINUS
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// end ; 3 :
47524: GO 47946
47526: LD_INT 3
47528: DOUBLE
47529: EQUAL
47530: IFTRUE 47534
47532: GO 47667
47534: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47535: LD_ADDR_VAR 0 5
47539: PUSH
47540: LD_VAR 0 1
47544: PUSH
47545: LD_INT 3
47547: PLUS
47548: PUSH
47549: LD_VAR 0 2
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: PUSH
47562: LD_VAR 0 1
47566: PUSH
47567: LD_INT 4
47569: PLUS
47570: PUSH
47571: LD_VAR 0 2
47575: PUSH
47576: LD_INT 4
47578: PLUS
47579: PUSH
47580: LD_INT 5
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: PUSH
47588: LD_VAR 0 1
47592: PUSH
47593: LD_INT 4
47595: MINUS
47596: PUSH
47597: LD_VAR 0 2
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: PUSH
47610: LD_VAR 0 1
47614: PUSH
47615: LD_VAR 0 2
47619: PUSH
47620: LD_INT 4
47622: MINUS
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: PUSH
47632: LD_VAR 0 1
47636: PUSH
47637: LD_INT 3
47639: MINUS
47640: PUSH
47641: LD_VAR 0 2
47645: PUSH
47646: LD_INT 3
47648: MINUS
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// end ; 4 :
47665: GO 47946
47667: LD_INT 4
47669: DOUBLE
47670: EQUAL
47671: IFTRUE 47675
47673: GO 47808
47675: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47676: LD_ADDR_VAR 0 5
47680: PUSH
47681: LD_VAR 0 1
47685: PUSH
47686: LD_VAR 0 2
47690: PUSH
47691: LD_INT 4
47693: PLUS
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: LD_VAR 0 1
47707: PUSH
47708: LD_INT 3
47710: PLUS
47711: PUSH
47712: LD_VAR 0 2
47716: PUSH
47717: LD_INT 3
47719: PLUS
47720: PUSH
47721: LD_INT 5
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: PUSH
47729: LD_VAR 0 1
47733: PUSH
47734: LD_INT 4
47736: PLUS
47737: PUSH
47738: LD_VAR 0 2
47742: PUSH
47743: LD_INT 4
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: PUSH
47751: LD_VAR 0 1
47755: PUSH
47756: LD_VAR 0 2
47760: PUSH
47761: LD_INT 3
47763: MINUS
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: LD_INT 4
47780: MINUS
47781: PUSH
47782: LD_VAR 0 2
47786: PUSH
47787: LD_INT 4
47789: MINUS
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// end ; 5 :
47806: GO 47946
47808: LD_INT 5
47810: DOUBLE
47811: EQUAL
47812: IFTRUE 47816
47814: GO 47945
47816: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47817: LD_ADDR_VAR 0 5
47821: PUSH
47822: LD_VAR 0 1
47826: PUSH
47827: LD_INT 4
47829: MINUS
47830: PUSH
47831: LD_VAR 0 2
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: PUSH
47844: LD_VAR 0 1
47848: PUSH
47849: LD_VAR 0 2
47853: PUSH
47854: LD_INT 4
47856: MINUS
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: LD_VAR 0 1
47870: PUSH
47871: LD_INT 4
47873: PLUS
47874: PUSH
47875: LD_VAR 0 2
47879: PUSH
47880: LD_INT 4
47882: PLUS
47883: PUSH
47884: LD_INT 5
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: PUSH
47892: LD_VAR 0 1
47896: PUSH
47897: LD_INT 3
47899: PLUS
47900: PUSH
47901: LD_VAR 0 2
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: PUSH
47914: LD_VAR 0 1
47918: PUSH
47919: LD_VAR 0 2
47923: PUSH
47924: LD_INT 3
47926: PLUS
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// end ; end ;
47943: GO 47946
47945: POP
// result := list ;
47946: LD_ADDR_VAR 0 4
47950: PUSH
47951: LD_VAR 0 5
47955: ST_TO_ADDR
// end ;
47956: LD_VAR 0 4
47960: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47961: LD_INT 0
47963: PPUSH
47964: PPUSH
47965: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47966: LD_VAR 0 1
47970: NOT
47971: PUSH
47972: LD_VAR 0 2
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: IN
47995: NOT
47996: OR
47997: IFFALSE 48001
// exit ;
47999: GO 48093
// tmp := [ ] ;
48001: LD_ADDR_VAR 0 5
48005: PUSH
48006: EMPTY
48007: ST_TO_ADDR
// for i in units do
48008: LD_ADDR_VAR 0 4
48012: PUSH
48013: LD_VAR 0 1
48017: PUSH
48018: FOR_IN
48019: IFFALSE 48062
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48021: LD_ADDR_VAR 0 5
48025: PUSH
48026: LD_VAR 0 5
48030: PPUSH
48031: LD_VAR 0 5
48035: PUSH
48036: LD_INT 1
48038: PLUS
48039: PPUSH
48040: LD_VAR 0 4
48044: PPUSH
48045: LD_VAR 0 2
48049: PPUSH
48050: CALL_OW 259
48054: PPUSH
48055: CALL_OW 2
48059: ST_TO_ADDR
48060: GO 48018
48062: POP
48063: POP
// if not tmp then
48064: LD_VAR 0 5
48068: NOT
48069: IFFALSE 48073
// exit ;
48071: GO 48093
// result := SortListByListDesc ( units , tmp ) ;
48073: LD_ADDR_VAR 0 3
48077: PUSH
48078: LD_VAR 0 1
48082: PPUSH
48083: LD_VAR 0 5
48087: PPUSH
48088: CALL_OW 77
48092: ST_TO_ADDR
// end ;
48093: LD_VAR 0 3
48097: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48098: LD_INT 0
48100: PPUSH
48101: PPUSH
48102: PPUSH
// x := GetX ( building ) ;
48103: LD_ADDR_VAR 0 4
48107: PUSH
48108: LD_VAR 0 2
48112: PPUSH
48113: CALL_OW 250
48117: ST_TO_ADDR
// y := GetY ( building ) ;
48118: LD_ADDR_VAR 0 5
48122: PUSH
48123: LD_VAR 0 2
48127: PPUSH
48128: CALL_OW 251
48132: ST_TO_ADDR
// if GetTaskList ( unit ) then
48133: LD_VAR 0 1
48137: PPUSH
48138: CALL_OW 437
48142: IFFALSE 48237
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48144: LD_STRING e
48146: PUSH
48147: LD_VAR 0 1
48151: PPUSH
48152: CALL_OW 437
48156: PUSH
48157: LD_INT 1
48159: ARRAY
48160: PUSH
48161: LD_INT 1
48163: ARRAY
48164: EQUAL
48165: PUSH
48166: LD_VAR 0 4
48170: PUSH
48171: LD_VAR 0 1
48175: PPUSH
48176: CALL_OW 437
48180: PUSH
48181: LD_INT 1
48183: ARRAY
48184: PUSH
48185: LD_INT 2
48187: ARRAY
48188: EQUAL
48189: AND
48190: PUSH
48191: LD_VAR 0 5
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: CALL_OW 437
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: PUSH
48210: LD_INT 3
48212: ARRAY
48213: EQUAL
48214: AND
48215: IFFALSE 48227
// result := true else
48217: LD_ADDR_VAR 0 3
48221: PUSH
48222: LD_INT 1
48224: ST_TO_ADDR
48225: GO 48235
// result := false ;
48227: LD_ADDR_VAR 0 3
48231: PUSH
48232: LD_INT 0
48234: ST_TO_ADDR
// end else
48235: GO 48245
// result := false ;
48237: LD_ADDR_VAR 0 3
48241: PUSH
48242: LD_INT 0
48244: ST_TO_ADDR
// end ;
48245: LD_VAR 0 3
48249: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48250: LD_INT 0
48252: PPUSH
48253: PPUSH
48254: PPUSH
48255: PPUSH
// if not unit or not area then
48256: LD_VAR 0 1
48260: NOT
48261: PUSH
48262: LD_VAR 0 2
48266: NOT
48267: OR
48268: IFFALSE 48272
// exit ;
48270: GO 48436
// tmp := AreaToList ( area , i ) ;
48272: LD_ADDR_VAR 0 6
48276: PUSH
48277: LD_VAR 0 2
48281: PPUSH
48282: LD_VAR 0 5
48286: PPUSH
48287: CALL_OW 517
48291: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48292: LD_ADDR_VAR 0 5
48296: PUSH
48297: DOUBLE
48298: LD_INT 1
48300: DEC
48301: ST_TO_ADDR
48302: LD_VAR 0 6
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PUSH
48311: FOR_TO
48312: IFFALSE 48434
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48314: LD_ADDR_VAR 0 7
48318: PUSH
48319: LD_VAR 0 6
48323: PUSH
48324: LD_INT 1
48326: ARRAY
48327: PUSH
48328: LD_VAR 0 5
48332: ARRAY
48333: PUSH
48334: LD_VAR 0 6
48338: PUSH
48339: LD_INT 2
48341: ARRAY
48342: PUSH
48343: LD_VAR 0 5
48347: ARRAY
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48353: LD_VAR 0 7
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: PPUSH
48362: LD_VAR 0 7
48366: PUSH
48367: LD_INT 2
48369: ARRAY
48370: PPUSH
48371: CALL_OW 428
48375: PUSH
48376: LD_INT 0
48378: EQUAL
48379: IFFALSE 48432
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48381: LD_VAR 0 1
48385: PPUSH
48386: LD_VAR 0 7
48390: PUSH
48391: LD_INT 1
48393: ARRAY
48394: PPUSH
48395: LD_VAR 0 7
48399: PUSH
48400: LD_INT 2
48402: ARRAY
48403: PPUSH
48404: LD_VAR 0 3
48408: PPUSH
48409: CALL_OW 48
// result := IsPlaced ( unit ) ;
48413: LD_ADDR_VAR 0 4
48417: PUSH
48418: LD_VAR 0 1
48422: PPUSH
48423: CALL_OW 305
48427: ST_TO_ADDR
// exit ;
48428: POP
48429: POP
48430: GO 48436
// end ; end ;
48432: GO 48311
48434: POP
48435: POP
// end ;
48436: LD_VAR 0 4
48440: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48441: LD_INT 0
48443: PPUSH
48444: PPUSH
48445: PPUSH
// if not side or side > 8 then
48446: LD_VAR 0 1
48450: NOT
48451: PUSH
48452: LD_VAR 0 1
48456: PUSH
48457: LD_INT 8
48459: GREATER
48460: OR
48461: IFFALSE 48465
// exit ;
48463: GO 48652
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48465: LD_ADDR_VAR 0 4
48469: PUSH
48470: LD_INT 22
48472: PUSH
48473: LD_VAR 0 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 21
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PPUSH
48496: CALL_OW 69
48500: ST_TO_ADDR
// if not tmp then
48501: LD_VAR 0 4
48505: NOT
48506: IFFALSE 48510
// exit ;
48508: GO 48652
// enable_addtolog := true ;
48510: LD_ADDR_OWVAR 81
48514: PUSH
48515: LD_INT 1
48517: ST_TO_ADDR
// AddToLog ( [ ) ;
48518: LD_STRING [
48520: PPUSH
48521: CALL_OW 561
// for i in tmp do
48525: LD_ADDR_VAR 0 3
48529: PUSH
48530: LD_VAR 0 4
48534: PUSH
48535: FOR_IN
48536: IFFALSE 48643
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48538: LD_STRING [
48540: PUSH
48541: LD_VAR 0 3
48545: PPUSH
48546: CALL_OW 266
48550: STR
48551: PUSH
48552: LD_STRING , 
48554: STR
48555: PUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: CALL_OW 250
48565: STR
48566: PUSH
48567: LD_STRING , 
48569: STR
48570: PUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 251
48580: STR
48581: PUSH
48582: LD_STRING , 
48584: STR
48585: PUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: CALL_OW 254
48595: STR
48596: PUSH
48597: LD_STRING , 
48599: STR
48600: PUSH
48601: LD_VAR 0 3
48605: PPUSH
48606: LD_INT 1
48608: PPUSH
48609: CALL_OW 268
48613: STR
48614: PUSH
48615: LD_STRING , 
48617: STR
48618: PUSH
48619: LD_VAR 0 3
48623: PPUSH
48624: LD_INT 2
48626: PPUSH
48627: CALL_OW 268
48631: STR
48632: PUSH
48633: LD_STRING ],
48635: STR
48636: PPUSH
48637: CALL_OW 561
// end ;
48641: GO 48535
48643: POP
48644: POP
// AddToLog ( ]; ) ;
48645: LD_STRING ];
48647: PPUSH
48648: CALL_OW 561
// end ;
48652: LD_VAR 0 2
48656: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48657: LD_INT 0
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
// if not area or not rate or not max then
48664: LD_VAR 0 1
48668: NOT
48669: PUSH
48670: LD_VAR 0 2
48674: NOT
48675: OR
48676: PUSH
48677: LD_VAR 0 4
48681: NOT
48682: OR
48683: IFFALSE 48687
// exit ;
48685: GO 48879
// while 1 do
48687: LD_INT 1
48689: IFFALSE 48879
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48691: LD_ADDR_VAR 0 9
48695: PUSH
48696: LD_VAR 0 1
48700: PPUSH
48701: LD_INT 1
48703: PPUSH
48704: CALL_OW 287
48708: PUSH
48709: LD_INT 10
48711: MUL
48712: ST_TO_ADDR
// r := rate / 10 ;
48713: LD_ADDR_VAR 0 7
48717: PUSH
48718: LD_VAR 0 2
48722: PUSH
48723: LD_INT 10
48725: DIVREAL
48726: ST_TO_ADDR
// time := 1 1$00 ;
48727: LD_ADDR_VAR 0 8
48731: PUSH
48732: LD_INT 2100
48734: ST_TO_ADDR
// if amount < min then
48735: LD_VAR 0 9
48739: PUSH
48740: LD_VAR 0 3
48744: LESS
48745: IFFALSE 48763
// r := r * 2 else
48747: LD_ADDR_VAR 0 7
48751: PUSH
48752: LD_VAR 0 7
48756: PUSH
48757: LD_INT 2
48759: MUL
48760: ST_TO_ADDR
48761: GO 48789
// if amount > max then
48763: LD_VAR 0 9
48767: PUSH
48768: LD_VAR 0 4
48772: GREATER
48773: IFFALSE 48789
// r := r / 2 ;
48775: LD_ADDR_VAR 0 7
48779: PUSH
48780: LD_VAR 0 7
48784: PUSH
48785: LD_INT 2
48787: DIVREAL
48788: ST_TO_ADDR
// time := time / r ;
48789: LD_ADDR_VAR 0 8
48793: PUSH
48794: LD_VAR 0 8
48798: PUSH
48799: LD_VAR 0 7
48803: DIVREAL
48804: ST_TO_ADDR
// if time < 0 then
48805: LD_VAR 0 8
48809: PUSH
48810: LD_INT 0
48812: LESS
48813: IFFALSE 48830
// time := time * - 1 ;
48815: LD_ADDR_VAR 0 8
48819: PUSH
48820: LD_VAR 0 8
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: MUL
48829: ST_TO_ADDR
// wait ( time ) ;
48830: LD_VAR 0 8
48834: PPUSH
48835: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
48839: LD_INT 35
48841: PPUSH
48842: LD_INT 875
48844: PPUSH
48845: CALL_OW 12
48849: PPUSH
48850: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48854: LD_INT 1
48856: PPUSH
48857: LD_INT 5
48859: PPUSH
48860: CALL_OW 12
48864: PPUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: LD_INT 1
48872: PPUSH
48873: CALL_OW 55
// end ;
48877: GO 48687
// end ;
48879: LD_VAR 0 5
48883: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48884: LD_INT 0
48886: PPUSH
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
48893: PPUSH
// if not turrets or not factories then
48894: LD_VAR 0 1
48898: NOT
48899: PUSH
48900: LD_VAR 0 2
48904: NOT
48905: OR
48906: IFFALSE 48910
// exit ;
48908: GO 49217
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48910: LD_ADDR_VAR 0 10
48914: PUSH
48915: LD_INT 5
48917: PUSH
48918: LD_INT 6
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 4
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 5
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 24
48952: PUSH
48953: LD_INT 25
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 23
48962: PUSH
48963: LD_INT 27
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 42
48976: PUSH
48977: LD_INT 43
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 44
48986: PUSH
48987: LD_INT 46
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 45
48996: PUSH
48997: LD_INT 47
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// result := [ ] ;
49014: LD_ADDR_VAR 0 3
49018: PUSH
49019: EMPTY
49020: ST_TO_ADDR
// for i in turrets do
49021: LD_ADDR_VAR 0 4
49025: PUSH
49026: LD_VAR 0 1
49030: PUSH
49031: FOR_IN
49032: IFFALSE 49215
// begin nat := GetNation ( i ) ;
49034: LD_ADDR_VAR 0 7
49038: PUSH
49039: LD_VAR 0 4
49043: PPUSH
49044: CALL_OW 248
49048: ST_TO_ADDR
// weapon := 0 ;
49049: LD_ADDR_VAR 0 8
49053: PUSH
49054: LD_INT 0
49056: ST_TO_ADDR
// if not nat then
49057: LD_VAR 0 7
49061: NOT
49062: IFFALSE 49066
// continue ;
49064: GO 49031
// for j in list [ nat ] do
49066: LD_ADDR_VAR 0 5
49070: PUSH
49071: LD_VAR 0 10
49075: PUSH
49076: LD_VAR 0 7
49080: ARRAY
49081: PUSH
49082: FOR_IN
49083: IFFALSE 49124
// if GetBWeapon ( i ) = j [ 1 ] then
49085: LD_VAR 0 4
49089: PPUSH
49090: CALL_OW 269
49094: PUSH
49095: LD_VAR 0 5
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: EQUAL
49104: IFFALSE 49122
// begin weapon := j [ 2 ] ;
49106: LD_ADDR_VAR 0 8
49110: PUSH
49111: LD_VAR 0 5
49115: PUSH
49116: LD_INT 2
49118: ARRAY
49119: ST_TO_ADDR
// break ;
49120: GO 49124
// end ;
49122: GO 49082
49124: POP
49125: POP
// if not weapon then
49126: LD_VAR 0 8
49130: NOT
49131: IFFALSE 49135
// continue ;
49133: GO 49031
// for k in factories do
49135: LD_ADDR_VAR 0 6
49139: PUSH
49140: LD_VAR 0 2
49144: PUSH
49145: FOR_IN
49146: IFFALSE 49211
// begin weapons := AvailableWeaponList ( k ) ;
49148: LD_ADDR_VAR 0 9
49152: PUSH
49153: LD_VAR 0 6
49157: PPUSH
49158: CALL_OW 478
49162: ST_TO_ADDR
// if not weapons then
49163: LD_VAR 0 9
49167: NOT
49168: IFFALSE 49172
// continue ;
49170: GO 49145
// if weapon in weapons then
49172: LD_VAR 0 8
49176: PUSH
49177: LD_VAR 0 9
49181: IN
49182: IFFALSE 49209
// begin result := [ i , weapon ] ;
49184: LD_ADDR_VAR 0 3
49188: PUSH
49189: LD_VAR 0 4
49193: PUSH
49194: LD_VAR 0 8
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// exit ;
49203: POP
49204: POP
49205: POP
49206: POP
49207: GO 49217
// end ; end ;
49209: GO 49145
49211: POP
49212: POP
// end ;
49213: GO 49031
49215: POP
49216: POP
// end ;
49217: LD_VAR 0 3
49221: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49222: LD_INT 0
49224: PPUSH
// if not side or side > 8 then
49225: LD_VAR 0 3
49229: NOT
49230: PUSH
49231: LD_VAR 0 3
49235: PUSH
49236: LD_INT 8
49238: GREATER
49239: OR
49240: IFFALSE 49244
// exit ;
49242: GO 49303
// if not range then
49244: LD_VAR 0 4
49248: NOT
49249: IFFALSE 49260
// range := - 12 ;
49251: LD_ADDR_VAR 0 4
49255: PUSH
49256: LD_INT 12
49258: NEG
49259: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49260: LD_VAR 0 1
49264: PPUSH
49265: LD_VAR 0 2
49269: PPUSH
49270: LD_VAR 0 3
49274: PPUSH
49275: LD_VAR 0 4
49279: PPUSH
49280: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49284: LD_VAR 0 1
49288: PPUSH
49289: LD_VAR 0 2
49293: PPUSH
49294: LD_VAR 0 3
49298: PPUSH
49299: CALL_OW 331
// end ;
49303: LD_VAR 0 5
49307: RET
// export function Video ( mode ) ; begin
49308: LD_INT 0
49310: PPUSH
// ingame_video = mode ;
49311: LD_ADDR_OWVAR 52
49315: PUSH
49316: LD_VAR 0 1
49320: ST_TO_ADDR
// interface_hidden = mode ;
49321: LD_ADDR_OWVAR 54
49325: PUSH
49326: LD_VAR 0 1
49330: ST_TO_ADDR
// end ;
49331: LD_VAR 0 2
49335: RET
// export function Join ( array , element ) ; begin
49336: LD_INT 0
49338: PPUSH
// result := array ^ element ;
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_VAR 0 1
49348: PUSH
49349: LD_VAR 0 2
49353: ADD
49354: ST_TO_ADDR
// end ;
49355: LD_VAR 0 3
49359: RET
// export function JoinUnion ( array , element ) ; begin
49360: LD_INT 0
49362: PPUSH
// result := array union element ;
49363: LD_ADDR_VAR 0 3
49367: PUSH
49368: LD_VAR 0 1
49372: PUSH
49373: LD_VAR 0 2
49377: UNION
49378: ST_TO_ADDR
// end ;
49379: LD_VAR 0 3
49383: RET
// export function GetBehemoths ( side ) ; begin
49384: LD_INT 0
49386: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49387: LD_ADDR_VAR 0 2
49391: PUSH
49392: LD_INT 22
49394: PUSH
49395: LD_VAR 0 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 31
49406: PUSH
49407: LD_INT 25
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PPUSH
49418: CALL_OW 69
49422: ST_TO_ADDR
// end ;
49423: LD_VAR 0 2
49427: RET
// export function Shuffle ( array ) ; var i , index ; begin
49428: LD_INT 0
49430: PPUSH
49431: PPUSH
49432: PPUSH
// result := [ ] ;
49433: LD_ADDR_VAR 0 2
49437: PUSH
49438: EMPTY
49439: ST_TO_ADDR
// if not array then
49440: LD_VAR 0 1
49444: NOT
49445: IFFALSE 49449
// exit ;
49447: GO 49548
// Randomize ;
49449: CALL_OW 10
// for i = array downto 1 do
49453: LD_ADDR_VAR 0 3
49457: PUSH
49458: DOUBLE
49459: LD_VAR 0 1
49463: INC
49464: ST_TO_ADDR
49465: LD_INT 1
49467: PUSH
49468: FOR_DOWNTO
49469: IFFALSE 49546
// begin index := rand ( 1 , array ) ;
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: LD_INT 1
49478: PPUSH
49479: LD_VAR 0 1
49483: PPUSH
49484: CALL_OW 12
49488: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49489: LD_ADDR_VAR 0 2
49493: PUSH
49494: LD_VAR 0 2
49498: PPUSH
49499: LD_VAR 0 2
49503: PUSH
49504: LD_INT 1
49506: PLUS
49507: PPUSH
49508: LD_VAR 0 1
49512: PUSH
49513: LD_VAR 0 4
49517: ARRAY
49518: PPUSH
49519: CALL_OW 2
49523: ST_TO_ADDR
// array := Delete ( array , index ) ;
49524: LD_ADDR_VAR 0 1
49528: PUSH
49529: LD_VAR 0 1
49533: PPUSH
49534: LD_VAR 0 4
49538: PPUSH
49539: CALL_OW 3
49543: ST_TO_ADDR
// end ;
49544: GO 49468
49546: POP
49547: POP
// end ;
49548: LD_VAR 0 2
49552: RET
// export function GetBaseMaterials ( base ) ; begin
49553: LD_INT 0
49555: PPUSH
// result := [ 0 , 0 , 0 ] ;
49556: LD_ADDR_VAR 0 2
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// if not base then
49575: LD_VAR 0 1
49579: NOT
49580: IFFALSE 49584
// exit ;
49582: GO 49633
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49584: LD_ADDR_VAR 0 2
49588: PUSH
49589: LD_VAR 0 1
49593: PPUSH
49594: LD_INT 1
49596: PPUSH
49597: CALL_OW 275
49601: PUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: LD_INT 2
49609: PPUSH
49610: CALL_OW 275
49614: PUSH
49615: LD_VAR 0 1
49619: PPUSH
49620: LD_INT 3
49622: PPUSH
49623: CALL_OW 275
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// end ;
49633: LD_VAR 0 2
49637: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49638: LD_INT 0
49640: PPUSH
49641: PPUSH
// result := array ;
49642: LD_ADDR_VAR 0 3
49646: PUSH
49647: LD_VAR 0 1
49651: ST_TO_ADDR
// if size > 0 then
49652: LD_VAR 0 2
49656: PUSH
49657: LD_INT 0
49659: GREATER
49660: IFFALSE 49706
// for i := array downto size do
49662: LD_ADDR_VAR 0 4
49666: PUSH
49667: DOUBLE
49668: LD_VAR 0 1
49672: INC
49673: ST_TO_ADDR
49674: LD_VAR 0 2
49678: PUSH
49679: FOR_DOWNTO
49680: IFFALSE 49704
// result := Delete ( result , result ) ;
49682: LD_ADDR_VAR 0 3
49686: PUSH
49687: LD_VAR 0 3
49691: PPUSH
49692: LD_VAR 0 3
49696: PPUSH
49697: CALL_OW 3
49701: ST_TO_ADDR
49702: GO 49679
49704: POP
49705: POP
// end ;
49706: LD_VAR 0 3
49710: RET
// export function ComExit ( unit ) ; var tmp ; begin
49711: LD_INT 0
49713: PPUSH
49714: PPUSH
// if not IsInUnit ( unit ) then
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL_OW 310
49724: NOT
49725: IFFALSE 49729
// exit ;
49727: GO 49789
// tmp := IsInUnit ( unit ) ;
49729: LD_ADDR_VAR 0 3
49733: PUSH
49734: LD_VAR 0 1
49738: PPUSH
49739: CALL_OW 310
49743: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49744: LD_VAR 0 3
49748: PPUSH
49749: CALL_OW 247
49753: PUSH
49754: LD_INT 2
49756: EQUAL
49757: IFFALSE 49770
// ComExitVehicle ( unit ) else
49759: LD_VAR 0 1
49763: PPUSH
49764: CALL_OW 121
49768: GO 49779
// ComExitBuilding ( unit ) ;
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 122
// result := tmp ;
49779: LD_ADDR_VAR 0 2
49783: PUSH
49784: LD_VAR 0 3
49788: ST_TO_ADDR
// end ;
49789: LD_VAR 0 2
49793: RET
// export function ResetHc ; begin
49794: LD_INT 0
49796: PPUSH
// InitHc ;
49797: CALL_OW 19
// hc_importance := 0 ;
49801: LD_ADDR_OWVAR 32
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
// end ; end_of_file
49809: LD_VAR 0 1
49813: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
49814: LD_INT 0
49816: PPUSH
// ru_radar := 98 ;
49817: LD_ADDR_EXP 48
49821: PUSH
49822: LD_INT 98
49824: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49825: LD_ADDR_EXP 49
49829: PUSH
49830: LD_INT 89
49832: ST_TO_ADDR
// us_hack := 99 ;
49833: LD_ADDR_EXP 50
49837: PUSH
49838: LD_INT 99
49840: ST_TO_ADDR
// us_artillery := 97 ;
49841: LD_ADDR_EXP 51
49845: PUSH
49846: LD_INT 97
49848: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49849: LD_ADDR_EXP 52
49853: PUSH
49854: LD_INT 91
49856: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
49857: LD_ADDR_EXP 53
49861: PUSH
49862: LD_INT 92
49864: ST_TO_ADDR
// tech_Artillery := 80 ;
49865: LD_ADDR_EXP 54
49869: PUSH
49870: LD_INT 80
49872: ST_TO_ADDR
// tech_RadMat := 81 ;
49873: LD_ADDR_EXP 55
49877: PUSH
49878: LD_INT 81
49880: ST_TO_ADDR
// tech_BasicTools := 82 ;
49881: LD_ADDR_EXP 56
49885: PUSH
49886: LD_INT 82
49888: ST_TO_ADDR
// tech_Cargo := 83 ;
49889: LD_ADDR_EXP 57
49893: PUSH
49894: LD_INT 83
49896: ST_TO_ADDR
// tech_Track := 84 ;
49897: LD_ADDR_EXP 58
49901: PUSH
49902: LD_INT 84
49904: ST_TO_ADDR
// tech_Crane := 85 ;
49905: LD_ADDR_EXP 59
49909: PUSH
49910: LD_INT 85
49912: ST_TO_ADDR
// tech_Bulldozer := 86 ;
49913: LD_ADDR_EXP 60
49917: PUSH
49918: LD_INT 86
49920: ST_TO_ADDR
// tech_Hovercraft := 87 ;
49921: LD_ADDR_EXP 61
49925: PUSH
49926: LD_INT 87
49928: ST_TO_ADDR
// end ;
49929: LD_VAR 0 1
49933: RET
// every 1 do
49934: GO 49936
49936: DISABLE
// InitGlobalVariables ; end_of_file
49937: CALL 49814 0 0
49941: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
49942: LD_INT 0
49944: PPUSH
49945: PPUSH
// skirmish := false ;
49946: LD_ADDR_EXP 62
49950: PUSH
49951: LD_INT 0
49953: ST_TO_ADDR
// debug_mc := false ;
49954: LD_ADDR_EXP 63
49958: PUSH
49959: LD_INT 0
49961: ST_TO_ADDR
// mc_bases := [ ] ;
49962: LD_ADDR_EXP 64
49966: PUSH
49967: EMPTY
49968: ST_TO_ADDR
// mc_sides := [ ] ;
49969: LD_ADDR_EXP 90
49973: PUSH
49974: EMPTY
49975: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49976: LD_ADDR_EXP 65
49980: PUSH
49981: EMPTY
49982: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49983: LD_ADDR_EXP 66
49987: PUSH
49988: EMPTY
49989: ST_TO_ADDR
// mc_need_heal := [ ] ;
49990: LD_ADDR_EXP 67
49994: PUSH
49995: EMPTY
49996: ST_TO_ADDR
// mc_healers := [ ] ;
49997: LD_ADDR_EXP 68
50001: PUSH
50002: EMPTY
50003: ST_TO_ADDR
// mc_build_list := [ ] ;
50004: LD_ADDR_EXP 69
50008: PUSH
50009: EMPTY
50010: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
50011: LD_ADDR_EXP 96
50015: PUSH
50016: EMPTY
50017: ST_TO_ADDR
// mc_builders := [ ] ;
50018: LD_ADDR_EXP 70
50022: PUSH
50023: EMPTY
50024: ST_TO_ADDR
// mc_construct_list := [ ] ;
50025: LD_ADDR_EXP 71
50029: PUSH
50030: EMPTY
50031: ST_TO_ADDR
// mc_turret_list := [ ] ;
50032: LD_ADDR_EXP 72
50036: PUSH
50037: EMPTY
50038: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
50039: LD_ADDR_EXP 73
50043: PUSH
50044: EMPTY
50045: ST_TO_ADDR
// mc_miners := [ ] ;
50046: LD_ADDR_EXP 78
50050: PUSH
50051: EMPTY
50052: ST_TO_ADDR
// mc_mines := [ ] ;
50053: LD_ADDR_EXP 77
50057: PUSH
50058: EMPTY
50059: ST_TO_ADDR
// mc_minefields := [ ] ;
50060: LD_ADDR_EXP 79
50064: PUSH
50065: EMPTY
50066: ST_TO_ADDR
// mc_crates := [ ] ;
50067: LD_ADDR_EXP 80
50071: PUSH
50072: EMPTY
50073: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50074: LD_ADDR_EXP 81
50078: PUSH
50079: EMPTY
50080: ST_TO_ADDR
// mc_crates_area := [ ] ;
50081: LD_ADDR_EXP 82
50085: PUSH
50086: EMPTY
50087: ST_TO_ADDR
// mc_vehicles := [ ] ;
50088: LD_ADDR_EXP 83
50092: PUSH
50093: EMPTY
50094: ST_TO_ADDR
// mc_attack := [ ] ;
50095: LD_ADDR_EXP 84
50099: PUSH
50100: EMPTY
50101: ST_TO_ADDR
// mc_produce := [ ] ;
50102: LD_ADDR_EXP 85
50106: PUSH
50107: EMPTY
50108: ST_TO_ADDR
// mc_defender := [ ] ;
50109: LD_ADDR_EXP 86
50113: PUSH
50114: EMPTY
50115: ST_TO_ADDR
// mc_parking := [ ] ;
50116: LD_ADDR_EXP 88
50120: PUSH
50121: EMPTY
50122: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50123: LD_ADDR_EXP 74
50127: PUSH
50128: EMPTY
50129: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50130: LD_ADDR_EXP 76
50134: PUSH
50135: EMPTY
50136: ST_TO_ADDR
// mc_scan := [ ] ;
50137: LD_ADDR_EXP 87
50141: PUSH
50142: EMPTY
50143: ST_TO_ADDR
// mc_scan_area := [ ] ;
50144: LD_ADDR_EXP 89
50148: PUSH
50149: EMPTY
50150: ST_TO_ADDR
// mc_tech := [ ] ;
50151: LD_ADDR_EXP 91
50155: PUSH
50156: EMPTY
50157: ST_TO_ADDR
// mc_class := [ ] ;
50158: LD_ADDR_EXP 105
50162: PUSH
50163: EMPTY
50164: ST_TO_ADDR
// mc_class_case_use := [ ] ;
50165: LD_ADDR_EXP 106
50169: PUSH
50170: EMPTY
50171: ST_TO_ADDR
// end ;
50172: LD_VAR 0 1
50176: RET
// export function MC_Kill ( base ) ; begin
50177: LD_INT 0
50179: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
50180: LD_ADDR_EXP 64
50184: PUSH
50185: LD_EXP 64
50189: PPUSH
50190: LD_VAR 0 1
50194: PPUSH
50195: EMPTY
50196: PPUSH
50197: CALL_OW 1
50201: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50202: LD_ADDR_EXP 65
50206: PUSH
50207: LD_EXP 65
50211: PPUSH
50212: LD_VAR 0 1
50216: PPUSH
50217: EMPTY
50218: PPUSH
50219: CALL_OW 1
50223: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50224: LD_ADDR_EXP 66
50228: PUSH
50229: LD_EXP 66
50233: PPUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: EMPTY
50240: PPUSH
50241: CALL_OW 1
50245: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50246: LD_ADDR_EXP 67
50250: PUSH
50251: LD_EXP 67
50255: PPUSH
50256: LD_VAR 0 1
50260: PPUSH
50261: EMPTY
50262: PPUSH
50263: CALL_OW 1
50267: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50268: LD_ADDR_EXP 68
50272: PUSH
50273: LD_EXP 68
50277: PPUSH
50278: LD_VAR 0 1
50282: PPUSH
50283: EMPTY
50284: PPUSH
50285: CALL_OW 1
50289: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50290: LD_ADDR_EXP 69
50294: PUSH
50295: LD_EXP 69
50299: PPUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: EMPTY
50306: PPUSH
50307: CALL_OW 1
50311: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50312: LD_ADDR_EXP 70
50316: PUSH
50317: LD_EXP 70
50321: PPUSH
50322: LD_VAR 0 1
50326: PPUSH
50327: EMPTY
50328: PPUSH
50329: CALL_OW 1
50333: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50334: LD_ADDR_EXP 71
50338: PUSH
50339: LD_EXP 71
50343: PPUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: EMPTY
50350: PPUSH
50351: CALL_OW 1
50355: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50356: LD_ADDR_EXP 72
50360: PUSH
50361: LD_EXP 72
50365: PPUSH
50366: LD_VAR 0 1
50370: PPUSH
50371: EMPTY
50372: PPUSH
50373: CALL_OW 1
50377: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50378: LD_ADDR_EXP 73
50382: PUSH
50383: LD_EXP 73
50387: PPUSH
50388: LD_VAR 0 1
50392: PPUSH
50393: EMPTY
50394: PPUSH
50395: CALL_OW 1
50399: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50400: LD_ADDR_EXP 74
50404: PUSH
50405: LD_EXP 74
50409: PPUSH
50410: LD_VAR 0 1
50414: PPUSH
50415: EMPTY
50416: PPUSH
50417: CALL_OW 1
50421: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50422: LD_ADDR_EXP 75
50426: PUSH
50427: LD_EXP 75
50431: PPUSH
50432: LD_VAR 0 1
50436: PPUSH
50437: LD_INT 0
50439: PPUSH
50440: CALL_OW 1
50444: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50445: LD_ADDR_EXP 76
50449: PUSH
50450: LD_EXP 76
50454: PPUSH
50455: LD_VAR 0 1
50459: PPUSH
50460: EMPTY
50461: PPUSH
50462: CALL_OW 1
50466: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50467: LD_ADDR_EXP 77
50471: PUSH
50472: LD_EXP 77
50476: PPUSH
50477: LD_VAR 0 1
50481: PPUSH
50482: EMPTY
50483: PPUSH
50484: CALL_OW 1
50488: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50489: LD_ADDR_EXP 78
50493: PUSH
50494: LD_EXP 78
50498: PPUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: EMPTY
50505: PPUSH
50506: CALL_OW 1
50510: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50511: LD_ADDR_EXP 79
50515: PUSH
50516: LD_EXP 79
50520: PPUSH
50521: LD_VAR 0 1
50525: PPUSH
50526: EMPTY
50527: PPUSH
50528: CALL_OW 1
50532: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50533: LD_ADDR_EXP 80
50537: PUSH
50538: LD_EXP 80
50542: PPUSH
50543: LD_VAR 0 1
50547: PPUSH
50548: EMPTY
50549: PPUSH
50550: CALL_OW 1
50554: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50555: LD_ADDR_EXP 81
50559: PUSH
50560: LD_EXP 81
50564: PPUSH
50565: LD_VAR 0 1
50569: PPUSH
50570: EMPTY
50571: PPUSH
50572: CALL_OW 1
50576: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50577: LD_ADDR_EXP 82
50581: PUSH
50582: LD_EXP 82
50586: PPUSH
50587: LD_VAR 0 1
50591: PPUSH
50592: EMPTY
50593: PPUSH
50594: CALL_OW 1
50598: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50599: LD_ADDR_EXP 83
50603: PUSH
50604: LD_EXP 83
50608: PPUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: EMPTY
50615: PPUSH
50616: CALL_OW 1
50620: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50621: LD_ADDR_EXP 84
50625: PUSH
50626: LD_EXP 84
50630: PPUSH
50631: LD_VAR 0 1
50635: PPUSH
50636: EMPTY
50637: PPUSH
50638: CALL_OW 1
50642: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50643: LD_ADDR_EXP 85
50647: PUSH
50648: LD_EXP 85
50652: PPUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: EMPTY
50659: PPUSH
50660: CALL_OW 1
50664: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50665: LD_ADDR_EXP 86
50669: PUSH
50670: LD_EXP 86
50674: PPUSH
50675: LD_VAR 0 1
50679: PPUSH
50680: EMPTY
50681: PPUSH
50682: CALL_OW 1
50686: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50687: LD_ADDR_EXP 87
50691: PUSH
50692: LD_EXP 87
50696: PPUSH
50697: LD_VAR 0 1
50701: PPUSH
50702: EMPTY
50703: PPUSH
50704: CALL_OW 1
50708: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50709: LD_ADDR_EXP 88
50713: PUSH
50714: LD_EXP 88
50718: PPUSH
50719: LD_VAR 0 1
50723: PPUSH
50724: EMPTY
50725: PPUSH
50726: CALL_OW 1
50730: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50731: LD_ADDR_EXP 89
50735: PUSH
50736: LD_EXP 89
50740: PPUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: EMPTY
50747: PPUSH
50748: CALL_OW 1
50752: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50753: LD_ADDR_EXP 91
50757: PUSH
50758: LD_EXP 91
50762: PPUSH
50763: LD_VAR 0 1
50767: PPUSH
50768: EMPTY
50769: PPUSH
50770: CALL_OW 1
50774: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50775: LD_ADDR_EXP 93
50779: PUSH
50780: LD_EXP 93
50784: PPUSH
50785: LD_VAR 0 1
50789: PPUSH
50790: EMPTY
50791: PPUSH
50792: CALL_OW 1
50796: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50797: LD_ADDR_EXP 94
50801: PUSH
50802: LD_EXP 94
50806: PPUSH
50807: LD_VAR 0 1
50811: PPUSH
50812: EMPTY
50813: PPUSH
50814: CALL_OW 1
50818: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50819: LD_ADDR_EXP 95
50823: PUSH
50824: LD_EXP 95
50828: PPUSH
50829: LD_VAR 0 1
50833: PPUSH
50834: EMPTY
50835: PPUSH
50836: CALL_OW 1
50840: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50841: LD_ADDR_EXP 96
50845: PUSH
50846: LD_EXP 96
50850: PPUSH
50851: LD_VAR 0 1
50855: PPUSH
50856: EMPTY
50857: PPUSH
50858: CALL_OW 1
50862: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50863: LD_ADDR_EXP 97
50867: PUSH
50868: LD_EXP 97
50872: PPUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: EMPTY
50879: PPUSH
50880: CALL_OW 1
50884: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
50885: LD_ADDR_EXP 98
50889: PUSH
50890: LD_EXP 98
50894: PPUSH
50895: LD_VAR 0 1
50899: PPUSH
50900: EMPTY
50901: PPUSH
50902: CALL_OW 1
50906: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
50907: LD_ADDR_EXP 99
50911: PUSH
50912: LD_EXP 99
50916: PPUSH
50917: LD_VAR 0 1
50921: PPUSH
50922: EMPTY
50923: PPUSH
50924: CALL_OW 1
50928: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
50929: LD_ADDR_EXP 100
50933: PUSH
50934: LD_EXP 100
50938: PPUSH
50939: LD_VAR 0 1
50943: PPUSH
50944: EMPTY
50945: PPUSH
50946: CALL_OW 1
50950: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
50951: LD_ADDR_EXP 101
50955: PUSH
50956: LD_EXP 101
50960: PPUSH
50961: LD_VAR 0 1
50965: PPUSH
50966: EMPTY
50967: PPUSH
50968: CALL_OW 1
50972: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
50973: LD_ADDR_EXP 102
50977: PUSH
50978: LD_EXP 102
50982: PPUSH
50983: LD_VAR 0 1
50987: PPUSH
50988: EMPTY
50989: PPUSH
50990: CALL_OW 1
50994: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50995: LD_ADDR_EXP 103
50999: PUSH
51000: LD_EXP 103
51004: PPUSH
51005: LD_VAR 0 1
51009: PPUSH
51010: EMPTY
51011: PPUSH
51012: CALL_OW 1
51016: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51017: LD_ADDR_EXP 104
51021: PUSH
51022: LD_EXP 104
51026: PPUSH
51027: LD_VAR 0 1
51031: PPUSH
51032: EMPTY
51033: PPUSH
51034: CALL_OW 1
51038: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51039: LD_ADDR_EXP 105
51043: PUSH
51044: LD_EXP 105
51048: PPUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: EMPTY
51055: PPUSH
51056: CALL_OW 1
51060: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51061: LD_ADDR_EXP 106
51065: PUSH
51066: LD_EXP 106
51070: PPUSH
51071: LD_VAR 0 1
51075: PPUSH
51076: LD_INT 0
51078: PPUSH
51079: CALL_OW 1
51083: ST_TO_ADDR
// end ;
51084: LD_VAR 0 2
51088: RET
// export function MC_Add ( side , units ) ; var base ; begin
51089: LD_INT 0
51091: PPUSH
51092: PPUSH
// base := mc_bases + 1 ;
51093: LD_ADDR_VAR 0 4
51097: PUSH
51098: LD_EXP 64
51102: PUSH
51103: LD_INT 1
51105: PLUS
51106: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
51107: LD_ADDR_EXP 90
51111: PUSH
51112: LD_EXP 90
51116: PPUSH
51117: LD_VAR 0 4
51121: PPUSH
51122: LD_VAR 0 1
51126: PPUSH
51127: CALL_OW 1
51131: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
51132: LD_ADDR_EXP 64
51136: PUSH
51137: LD_EXP 64
51141: PPUSH
51142: LD_VAR 0 4
51146: PPUSH
51147: LD_VAR 0 2
51151: PPUSH
51152: CALL_OW 1
51156: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
51157: LD_ADDR_EXP 65
51161: PUSH
51162: LD_EXP 65
51166: PPUSH
51167: LD_VAR 0 4
51171: PPUSH
51172: EMPTY
51173: PPUSH
51174: CALL_OW 1
51178: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
51179: LD_ADDR_EXP 66
51183: PUSH
51184: LD_EXP 66
51188: PPUSH
51189: LD_VAR 0 4
51193: PPUSH
51194: EMPTY
51195: PPUSH
51196: CALL_OW 1
51200: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
51201: LD_ADDR_EXP 67
51205: PUSH
51206: LD_EXP 67
51210: PPUSH
51211: LD_VAR 0 4
51215: PPUSH
51216: EMPTY
51217: PPUSH
51218: CALL_OW 1
51222: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
51223: LD_ADDR_EXP 68
51227: PUSH
51228: LD_EXP 68
51232: PPUSH
51233: LD_VAR 0 4
51237: PPUSH
51238: EMPTY
51239: PPUSH
51240: CALL_OW 1
51244: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
51245: LD_ADDR_EXP 69
51249: PUSH
51250: LD_EXP 69
51254: PPUSH
51255: LD_VAR 0 4
51259: PPUSH
51260: EMPTY
51261: PPUSH
51262: CALL_OW 1
51266: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
51267: LD_ADDR_EXP 70
51271: PUSH
51272: LD_EXP 70
51276: PPUSH
51277: LD_VAR 0 4
51281: PPUSH
51282: EMPTY
51283: PPUSH
51284: CALL_OW 1
51288: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
51289: LD_ADDR_EXP 71
51293: PUSH
51294: LD_EXP 71
51298: PPUSH
51299: LD_VAR 0 4
51303: PPUSH
51304: EMPTY
51305: PPUSH
51306: CALL_OW 1
51310: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
51311: LD_ADDR_EXP 72
51315: PUSH
51316: LD_EXP 72
51320: PPUSH
51321: LD_VAR 0 4
51325: PPUSH
51326: EMPTY
51327: PPUSH
51328: CALL_OW 1
51332: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
51333: LD_ADDR_EXP 73
51337: PUSH
51338: LD_EXP 73
51342: PPUSH
51343: LD_VAR 0 4
51347: PPUSH
51348: EMPTY
51349: PPUSH
51350: CALL_OW 1
51354: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
51355: LD_ADDR_EXP 74
51359: PUSH
51360: LD_EXP 74
51364: PPUSH
51365: LD_VAR 0 4
51369: PPUSH
51370: EMPTY
51371: PPUSH
51372: CALL_OW 1
51376: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
51377: LD_ADDR_EXP 75
51381: PUSH
51382: LD_EXP 75
51386: PPUSH
51387: LD_VAR 0 4
51391: PPUSH
51392: LD_INT 0
51394: PPUSH
51395: CALL_OW 1
51399: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
51400: LD_ADDR_EXP 76
51404: PUSH
51405: LD_EXP 76
51409: PPUSH
51410: LD_VAR 0 4
51414: PPUSH
51415: EMPTY
51416: PPUSH
51417: CALL_OW 1
51421: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
51422: LD_ADDR_EXP 77
51426: PUSH
51427: LD_EXP 77
51431: PPUSH
51432: LD_VAR 0 4
51436: PPUSH
51437: EMPTY
51438: PPUSH
51439: CALL_OW 1
51443: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
51444: LD_ADDR_EXP 78
51448: PUSH
51449: LD_EXP 78
51453: PPUSH
51454: LD_VAR 0 4
51458: PPUSH
51459: EMPTY
51460: PPUSH
51461: CALL_OW 1
51465: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
51466: LD_ADDR_EXP 79
51470: PUSH
51471: LD_EXP 79
51475: PPUSH
51476: LD_VAR 0 4
51480: PPUSH
51481: EMPTY
51482: PPUSH
51483: CALL_OW 1
51487: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
51488: LD_ADDR_EXP 80
51492: PUSH
51493: LD_EXP 80
51497: PPUSH
51498: LD_VAR 0 4
51502: PPUSH
51503: EMPTY
51504: PPUSH
51505: CALL_OW 1
51509: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
51510: LD_ADDR_EXP 81
51514: PUSH
51515: LD_EXP 81
51519: PPUSH
51520: LD_VAR 0 4
51524: PPUSH
51525: EMPTY
51526: PPUSH
51527: CALL_OW 1
51531: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
51532: LD_ADDR_EXP 82
51536: PUSH
51537: LD_EXP 82
51541: PPUSH
51542: LD_VAR 0 4
51546: PPUSH
51547: EMPTY
51548: PPUSH
51549: CALL_OW 1
51553: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
51554: LD_ADDR_EXP 83
51558: PUSH
51559: LD_EXP 83
51563: PPUSH
51564: LD_VAR 0 4
51568: PPUSH
51569: EMPTY
51570: PPUSH
51571: CALL_OW 1
51575: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
51576: LD_ADDR_EXP 84
51580: PUSH
51581: LD_EXP 84
51585: PPUSH
51586: LD_VAR 0 4
51590: PPUSH
51591: EMPTY
51592: PPUSH
51593: CALL_OW 1
51597: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
51598: LD_ADDR_EXP 85
51602: PUSH
51603: LD_EXP 85
51607: PPUSH
51608: LD_VAR 0 4
51612: PPUSH
51613: EMPTY
51614: PPUSH
51615: CALL_OW 1
51619: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
51620: LD_ADDR_EXP 86
51624: PUSH
51625: LD_EXP 86
51629: PPUSH
51630: LD_VAR 0 4
51634: PPUSH
51635: EMPTY
51636: PPUSH
51637: CALL_OW 1
51641: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
51642: LD_ADDR_EXP 87
51646: PUSH
51647: LD_EXP 87
51651: PPUSH
51652: LD_VAR 0 4
51656: PPUSH
51657: EMPTY
51658: PPUSH
51659: CALL_OW 1
51663: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
51664: LD_ADDR_EXP 88
51668: PUSH
51669: LD_EXP 88
51673: PPUSH
51674: LD_VAR 0 4
51678: PPUSH
51679: EMPTY
51680: PPUSH
51681: CALL_OW 1
51685: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
51686: LD_ADDR_EXP 89
51690: PUSH
51691: LD_EXP 89
51695: PPUSH
51696: LD_VAR 0 4
51700: PPUSH
51701: EMPTY
51702: PPUSH
51703: CALL_OW 1
51707: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
51708: LD_ADDR_EXP 91
51712: PUSH
51713: LD_EXP 91
51717: PPUSH
51718: LD_VAR 0 4
51722: PPUSH
51723: EMPTY
51724: PPUSH
51725: CALL_OW 1
51729: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
51730: LD_ADDR_EXP 93
51734: PUSH
51735: LD_EXP 93
51739: PPUSH
51740: LD_VAR 0 4
51744: PPUSH
51745: EMPTY
51746: PPUSH
51747: CALL_OW 1
51751: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
51752: LD_ADDR_EXP 94
51756: PUSH
51757: LD_EXP 94
51761: PPUSH
51762: LD_VAR 0 4
51766: PPUSH
51767: EMPTY
51768: PPUSH
51769: CALL_OW 1
51773: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
51774: LD_ADDR_EXP 95
51778: PUSH
51779: LD_EXP 95
51783: PPUSH
51784: LD_VAR 0 4
51788: PPUSH
51789: EMPTY
51790: PPUSH
51791: CALL_OW 1
51795: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
51796: LD_ADDR_EXP 96
51800: PUSH
51801: LD_EXP 96
51805: PPUSH
51806: LD_VAR 0 4
51810: PPUSH
51811: EMPTY
51812: PPUSH
51813: CALL_OW 1
51817: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
51818: LD_ADDR_EXP 97
51822: PUSH
51823: LD_EXP 97
51827: PPUSH
51828: LD_VAR 0 4
51832: PPUSH
51833: EMPTY
51834: PPUSH
51835: CALL_OW 1
51839: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
51840: LD_ADDR_EXP 98
51844: PUSH
51845: LD_EXP 98
51849: PPUSH
51850: LD_VAR 0 4
51854: PPUSH
51855: EMPTY
51856: PPUSH
51857: CALL_OW 1
51861: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
51862: LD_ADDR_EXP 99
51866: PUSH
51867: LD_EXP 99
51871: PPUSH
51872: LD_VAR 0 4
51876: PPUSH
51877: EMPTY
51878: PPUSH
51879: CALL_OW 1
51883: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
51884: LD_ADDR_EXP 100
51888: PUSH
51889: LD_EXP 100
51893: PPUSH
51894: LD_VAR 0 4
51898: PPUSH
51899: EMPTY
51900: PPUSH
51901: CALL_OW 1
51905: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
51906: LD_ADDR_EXP 101
51910: PUSH
51911: LD_EXP 101
51915: PPUSH
51916: LD_VAR 0 4
51920: PPUSH
51921: EMPTY
51922: PPUSH
51923: CALL_OW 1
51927: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
51928: LD_ADDR_EXP 102
51932: PUSH
51933: LD_EXP 102
51937: PPUSH
51938: LD_VAR 0 4
51942: PPUSH
51943: EMPTY
51944: PPUSH
51945: CALL_OW 1
51949: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
51950: LD_ADDR_EXP 103
51954: PUSH
51955: LD_EXP 103
51959: PPUSH
51960: LD_VAR 0 4
51964: PPUSH
51965: EMPTY
51966: PPUSH
51967: CALL_OW 1
51971: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51972: LD_ADDR_EXP 104
51976: PUSH
51977: LD_EXP 104
51981: PPUSH
51982: LD_VAR 0 4
51986: PPUSH
51987: EMPTY
51988: PPUSH
51989: CALL_OW 1
51993: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51994: LD_ADDR_EXP 105
51998: PUSH
51999: LD_EXP 105
52003: PPUSH
52004: LD_VAR 0 4
52008: PPUSH
52009: EMPTY
52010: PPUSH
52011: CALL_OW 1
52015: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
52016: LD_ADDR_EXP 106
52020: PUSH
52021: LD_EXP 106
52025: PPUSH
52026: LD_VAR 0 4
52030: PPUSH
52031: LD_INT 0
52033: PPUSH
52034: CALL_OW 1
52038: ST_TO_ADDR
// result := base ;
52039: LD_ADDR_VAR 0 3
52043: PUSH
52044: LD_VAR 0 4
52048: ST_TO_ADDR
// end ;
52049: LD_VAR 0 3
52053: RET
// export function MC_Start ( ) ; var i ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
// for i = 1 to mc_bases do
52058: LD_ADDR_VAR 0 2
52062: PUSH
52063: DOUBLE
52064: LD_INT 1
52066: DEC
52067: ST_TO_ADDR
52068: LD_EXP 64
52072: PUSH
52073: FOR_TO
52074: IFFALSE 53151
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
52076: LD_ADDR_EXP 64
52080: PUSH
52081: LD_EXP 64
52085: PPUSH
52086: LD_VAR 0 2
52090: PPUSH
52091: LD_EXP 64
52095: PUSH
52096: LD_VAR 0 2
52100: ARRAY
52101: PUSH
52102: LD_INT 0
52104: DIFF
52105: PPUSH
52106: CALL_OW 1
52110: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
52111: LD_ADDR_EXP 65
52115: PUSH
52116: LD_EXP 65
52120: PPUSH
52121: LD_VAR 0 2
52125: PPUSH
52126: EMPTY
52127: PPUSH
52128: CALL_OW 1
52132: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52133: LD_ADDR_EXP 66
52137: PUSH
52138: LD_EXP 66
52142: PPUSH
52143: LD_VAR 0 2
52147: PPUSH
52148: EMPTY
52149: PPUSH
52150: CALL_OW 1
52154: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
52155: LD_ADDR_EXP 67
52159: PUSH
52160: LD_EXP 67
52164: PPUSH
52165: LD_VAR 0 2
52169: PPUSH
52170: EMPTY
52171: PPUSH
52172: CALL_OW 1
52176: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
52177: LD_ADDR_EXP 68
52181: PUSH
52182: LD_EXP 68
52186: PPUSH
52187: LD_VAR 0 2
52191: PPUSH
52192: EMPTY
52193: PUSH
52194: EMPTY
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PPUSH
52200: CALL_OW 1
52204: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
52205: LD_ADDR_EXP 69
52209: PUSH
52210: LD_EXP 69
52214: PPUSH
52215: LD_VAR 0 2
52219: PPUSH
52220: EMPTY
52221: PPUSH
52222: CALL_OW 1
52226: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
52227: LD_ADDR_EXP 96
52231: PUSH
52232: LD_EXP 96
52236: PPUSH
52237: LD_VAR 0 2
52241: PPUSH
52242: EMPTY
52243: PPUSH
52244: CALL_OW 1
52248: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
52249: LD_ADDR_EXP 70
52253: PUSH
52254: LD_EXP 70
52258: PPUSH
52259: LD_VAR 0 2
52263: PPUSH
52264: EMPTY
52265: PPUSH
52266: CALL_OW 1
52270: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
52271: LD_ADDR_EXP 71
52275: PUSH
52276: LD_EXP 71
52280: PPUSH
52281: LD_VAR 0 2
52285: PPUSH
52286: EMPTY
52287: PPUSH
52288: CALL_OW 1
52292: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
52293: LD_ADDR_EXP 72
52297: PUSH
52298: LD_EXP 72
52302: PPUSH
52303: LD_VAR 0 2
52307: PPUSH
52308: LD_EXP 64
52312: PUSH
52313: LD_VAR 0 2
52317: ARRAY
52318: PPUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 30
52324: PUSH
52325: LD_INT 32
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 30
52334: PUSH
52335: LD_INT 33
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: PPUSH
52347: CALL_OW 72
52351: PPUSH
52352: CALL_OW 1
52356: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
52357: LD_ADDR_EXP 73
52361: PUSH
52362: LD_EXP 73
52366: PPUSH
52367: LD_VAR 0 2
52371: PPUSH
52372: LD_EXP 64
52376: PUSH
52377: LD_VAR 0 2
52381: ARRAY
52382: PPUSH
52383: LD_INT 2
52385: PUSH
52386: LD_INT 30
52388: PUSH
52389: LD_INT 32
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 30
52398: PUSH
52399: LD_INT 31
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 58
52413: PUSH
52414: EMPTY
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PPUSH
52421: CALL_OW 72
52425: PPUSH
52426: CALL_OW 1
52430: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
52431: LD_ADDR_EXP 74
52435: PUSH
52436: LD_EXP 74
52440: PPUSH
52441: LD_VAR 0 2
52445: PPUSH
52446: EMPTY
52447: PPUSH
52448: CALL_OW 1
52452: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
52453: LD_ADDR_EXP 78
52457: PUSH
52458: LD_EXP 78
52462: PPUSH
52463: LD_VAR 0 2
52467: PPUSH
52468: EMPTY
52469: PPUSH
52470: CALL_OW 1
52474: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
52475: LD_ADDR_EXP 77
52479: PUSH
52480: LD_EXP 77
52484: PPUSH
52485: LD_VAR 0 2
52489: PPUSH
52490: EMPTY
52491: PPUSH
52492: CALL_OW 1
52496: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
52497: LD_ADDR_EXP 79
52501: PUSH
52502: LD_EXP 79
52506: PPUSH
52507: LD_VAR 0 2
52511: PPUSH
52512: EMPTY
52513: PPUSH
52514: CALL_OW 1
52518: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
52519: LD_ADDR_EXP 80
52523: PUSH
52524: LD_EXP 80
52528: PPUSH
52529: LD_VAR 0 2
52533: PPUSH
52534: EMPTY
52535: PPUSH
52536: CALL_OW 1
52540: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52541: LD_ADDR_EXP 81
52545: PUSH
52546: LD_EXP 81
52550: PPUSH
52551: LD_VAR 0 2
52555: PPUSH
52556: EMPTY
52557: PPUSH
52558: CALL_OW 1
52562: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
52563: LD_ADDR_EXP 82
52567: PUSH
52568: LD_EXP 82
52572: PPUSH
52573: LD_VAR 0 2
52577: PPUSH
52578: EMPTY
52579: PPUSH
52580: CALL_OW 1
52584: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
52585: LD_ADDR_EXP 83
52589: PUSH
52590: LD_EXP 83
52594: PPUSH
52595: LD_VAR 0 2
52599: PPUSH
52600: EMPTY
52601: PPUSH
52602: CALL_OW 1
52606: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52607: LD_ADDR_EXP 84
52611: PUSH
52612: LD_EXP 84
52616: PPUSH
52617: LD_VAR 0 2
52621: PPUSH
52622: EMPTY
52623: PPUSH
52624: CALL_OW 1
52628: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
52629: LD_ADDR_EXP 85
52633: PUSH
52634: LD_EXP 85
52638: PPUSH
52639: LD_VAR 0 2
52643: PPUSH
52644: EMPTY
52645: PPUSH
52646: CALL_OW 1
52650: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52651: LD_ADDR_EXP 86
52655: PUSH
52656: LD_EXP 86
52660: PPUSH
52661: LD_VAR 0 2
52665: PPUSH
52666: EMPTY
52667: PPUSH
52668: CALL_OW 1
52672: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
52673: LD_ADDR_EXP 75
52677: PUSH
52678: LD_EXP 75
52682: PPUSH
52683: LD_VAR 0 2
52687: PPUSH
52688: LD_INT 0
52690: PPUSH
52691: CALL_OW 1
52695: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
52696: LD_ADDR_EXP 88
52700: PUSH
52701: LD_EXP 88
52705: PPUSH
52706: LD_VAR 0 2
52710: PPUSH
52711: LD_INT 0
52713: PPUSH
52714: CALL_OW 1
52718: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52719: LD_ADDR_EXP 76
52723: PUSH
52724: LD_EXP 76
52728: PPUSH
52729: LD_VAR 0 2
52733: PPUSH
52734: EMPTY
52735: PPUSH
52736: CALL_OW 1
52740: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
52741: LD_ADDR_EXP 87
52745: PUSH
52746: LD_EXP 87
52750: PPUSH
52751: LD_VAR 0 2
52755: PPUSH
52756: LD_INT 0
52758: PPUSH
52759: CALL_OW 1
52763: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
52764: LD_ADDR_EXP 89
52768: PUSH
52769: LD_EXP 89
52773: PPUSH
52774: LD_VAR 0 2
52778: PPUSH
52779: EMPTY
52780: PPUSH
52781: CALL_OW 1
52785: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
52786: LD_ADDR_EXP 92
52790: PUSH
52791: LD_EXP 92
52795: PPUSH
52796: LD_VAR 0 2
52800: PPUSH
52801: LD_INT 0
52803: PPUSH
52804: CALL_OW 1
52808: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
52809: LD_ADDR_EXP 93
52813: PUSH
52814: LD_EXP 93
52818: PPUSH
52819: LD_VAR 0 2
52823: PPUSH
52824: EMPTY
52825: PPUSH
52826: CALL_OW 1
52830: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
52831: LD_ADDR_EXP 94
52835: PUSH
52836: LD_EXP 94
52840: PPUSH
52841: LD_VAR 0 2
52845: PPUSH
52846: EMPTY
52847: PPUSH
52848: CALL_OW 1
52852: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52853: LD_ADDR_EXP 95
52857: PUSH
52858: LD_EXP 95
52862: PPUSH
52863: LD_VAR 0 2
52867: PPUSH
52868: EMPTY
52869: PPUSH
52870: CALL_OW 1
52874: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
52875: LD_ADDR_EXP 97
52879: PUSH
52880: LD_EXP 97
52884: PPUSH
52885: LD_VAR 0 2
52889: PPUSH
52890: LD_EXP 64
52894: PUSH
52895: LD_VAR 0 2
52899: ARRAY
52900: PPUSH
52901: LD_INT 2
52903: PUSH
52904: LD_INT 30
52906: PUSH
52907: LD_INT 6
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 30
52916: PUSH
52917: LD_INT 7
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 30
52926: PUSH
52927: LD_INT 8
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: PPUSH
52940: CALL_OW 72
52944: PPUSH
52945: CALL_OW 1
52949: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
52950: LD_ADDR_EXP 98
52954: PUSH
52955: LD_EXP 98
52959: PPUSH
52960: LD_VAR 0 2
52964: PPUSH
52965: EMPTY
52966: PPUSH
52967: CALL_OW 1
52971: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
52972: LD_ADDR_EXP 99
52976: PUSH
52977: LD_EXP 99
52981: PPUSH
52982: LD_VAR 0 2
52986: PPUSH
52987: EMPTY
52988: PPUSH
52989: CALL_OW 1
52993: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
52994: LD_ADDR_EXP 100
52998: PUSH
52999: LD_EXP 100
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: EMPTY
53010: PPUSH
53011: CALL_OW 1
53015: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53016: LD_ADDR_EXP 101
53020: PUSH
53021: LD_EXP 101
53025: PPUSH
53026: LD_VAR 0 2
53030: PPUSH
53031: EMPTY
53032: PPUSH
53033: CALL_OW 1
53037: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53038: LD_ADDR_EXP 102
53042: PUSH
53043: LD_EXP 102
53047: PPUSH
53048: LD_VAR 0 2
53052: PPUSH
53053: EMPTY
53054: PPUSH
53055: CALL_OW 1
53059: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
53060: LD_ADDR_EXP 103
53064: PUSH
53065: LD_EXP 103
53069: PPUSH
53070: LD_VAR 0 2
53074: PPUSH
53075: EMPTY
53076: PPUSH
53077: CALL_OW 1
53081: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
53082: LD_ADDR_EXP 104
53086: PUSH
53087: LD_EXP 104
53091: PPUSH
53092: LD_VAR 0 2
53096: PPUSH
53097: EMPTY
53098: PPUSH
53099: CALL_OW 1
53103: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
53104: LD_ADDR_EXP 105
53108: PUSH
53109: LD_EXP 105
53113: PPUSH
53114: LD_VAR 0 2
53118: PPUSH
53119: EMPTY
53120: PPUSH
53121: CALL_OW 1
53125: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
53126: LD_ADDR_EXP 106
53130: PUSH
53131: LD_EXP 106
53135: PPUSH
53136: LD_VAR 0 2
53140: PPUSH
53141: LD_INT 0
53143: PPUSH
53144: CALL_OW 1
53148: ST_TO_ADDR
// end ;
53149: GO 52073
53151: POP
53152: POP
// MC_InitSides ( ) ;
53153: CALL 53439 0 0
// MC_InitResearch ( ) ;
53157: CALL 53178 0 0
// CustomInitMacro ( ) ;
53161: CALL 5893 0 0
// skirmish := true ;
53165: LD_ADDR_EXP 62
53169: PUSH
53170: LD_INT 1
53172: ST_TO_ADDR
// end ;
53173: LD_VAR 0 1
53177: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
53178: LD_INT 0
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
// if not mc_bases then
53186: LD_EXP 64
53190: NOT
53191: IFFALSE 53195
// exit ;
53193: GO 53434
// for i = 1 to 8 do
53195: LD_ADDR_VAR 0 2
53199: PUSH
53200: DOUBLE
53201: LD_INT 1
53203: DEC
53204: ST_TO_ADDR
53205: LD_INT 8
53207: PUSH
53208: FOR_TO
53209: IFFALSE 53235
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
53211: LD_ADDR_EXP 91
53215: PUSH
53216: LD_EXP 91
53220: PPUSH
53221: LD_VAR 0 2
53225: PPUSH
53226: EMPTY
53227: PPUSH
53228: CALL_OW 1
53232: ST_TO_ADDR
53233: GO 53208
53235: POP
53236: POP
// tmp := [ ] ;
53237: LD_ADDR_VAR 0 5
53241: PUSH
53242: EMPTY
53243: ST_TO_ADDR
// for i = 1 to mc_sides do
53244: LD_ADDR_VAR 0 2
53248: PUSH
53249: DOUBLE
53250: LD_INT 1
53252: DEC
53253: ST_TO_ADDR
53254: LD_EXP 90
53258: PUSH
53259: FOR_TO
53260: IFFALSE 53318
// if not mc_sides [ i ] in tmp then
53262: LD_EXP 90
53266: PUSH
53267: LD_VAR 0 2
53271: ARRAY
53272: PUSH
53273: LD_VAR 0 5
53277: IN
53278: NOT
53279: IFFALSE 53316
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
53281: LD_ADDR_VAR 0 5
53285: PUSH
53286: LD_VAR 0 5
53290: PPUSH
53291: LD_VAR 0 5
53295: PUSH
53296: LD_INT 1
53298: PLUS
53299: PPUSH
53300: LD_EXP 90
53304: PUSH
53305: LD_VAR 0 2
53309: ARRAY
53310: PPUSH
53311: CALL_OW 2
53315: ST_TO_ADDR
53316: GO 53259
53318: POP
53319: POP
// if not tmp then
53320: LD_VAR 0 5
53324: NOT
53325: IFFALSE 53329
// exit ;
53327: GO 53434
// for j in tmp do
53329: LD_ADDR_VAR 0 3
53333: PUSH
53334: LD_VAR 0 5
53338: PUSH
53339: FOR_IN
53340: IFFALSE 53432
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
53342: LD_ADDR_VAR 0 6
53346: PUSH
53347: LD_INT 22
53349: PUSH
53350: LD_VAR 0 3
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PPUSH
53359: CALL_OW 69
53363: ST_TO_ADDR
// if not un then
53364: LD_VAR 0 6
53368: NOT
53369: IFFALSE 53373
// continue ;
53371: GO 53339
// nation := GetNation ( un [ 1 ] ) ;
53373: LD_ADDR_VAR 0 4
53377: PUSH
53378: LD_VAR 0 6
53382: PUSH
53383: LD_INT 1
53385: ARRAY
53386: PPUSH
53387: CALL_OW 248
53391: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
53392: LD_ADDR_EXP 91
53396: PUSH
53397: LD_EXP 91
53401: PPUSH
53402: LD_VAR 0 3
53406: PPUSH
53407: LD_VAR 0 3
53411: PPUSH
53412: LD_VAR 0 4
53416: PPUSH
53417: LD_INT 1
53419: PPUSH
53420: CALL 13529 0 3
53424: PPUSH
53425: CALL_OW 1
53429: ST_TO_ADDR
// end ;
53430: GO 53339
53432: POP
53433: POP
// end ;
53434: LD_VAR 0 1
53438: RET
// export function MC_InitSides ( ) ; var i ; begin
53439: LD_INT 0
53441: PPUSH
53442: PPUSH
// if not mc_bases then
53443: LD_EXP 64
53447: NOT
53448: IFFALSE 53452
// exit ;
53450: GO 53526
// for i = 1 to mc_bases do
53452: LD_ADDR_VAR 0 2
53456: PUSH
53457: DOUBLE
53458: LD_INT 1
53460: DEC
53461: ST_TO_ADDR
53462: LD_EXP 64
53466: PUSH
53467: FOR_TO
53468: IFFALSE 53524
// if mc_bases [ i ] then
53470: LD_EXP 64
53474: PUSH
53475: LD_VAR 0 2
53479: ARRAY
53480: IFFALSE 53522
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
53482: LD_ADDR_EXP 90
53486: PUSH
53487: LD_EXP 90
53491: PPUSH
53492: LD_VAR 0 2
53496: PPUSH
53497: LD_EXP 64
53501: PUSH
53502: LD_VAR 0 2
53506: ARRAY
53507: PUSH
53508: LD_INT 1
53510: ARRAY
53511: PPUSH
53512: CALL_OW 255
53516: PPUSH
53517: CALL_OW 1
53521: ST_TO_ADDR
53522: GO 53467
53524: POP
53525: POP
// end ;
53526: LD_VAR 0 1
53530: RET
// every 0 0$01 trigger skirmish do
53531: LD_EXP 62
53535: IFFALSE 53689
53537: GO 53539
53539: DISABLE
// begin enable ;
53540: ENABLE
// MC_CheckBuildings ( ) ;
53541: CALL 58187 0 0
// MC_CheckPeopleLife ( ) ;
53545: CALL 58312 0 0
// RaiseSailEvent ( 100 ) ;
53549: LD_INT 100
53551: PPUSH
53552: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
53556: LD_INT 103
53558: PPUSH
53559: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
53563: LD_INT 104
53565: PPUSH
53566: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
53570: LD_INT 105
53572: PPUSH
53573: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
53577: LD_INT 106
53579: PPUSH
53580: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
53584: LD_INT 107
53586: PPUSH
53587: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
53591: LD_INT 108
53593: PPUSH
53594: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
53598: LD_INT 109
53600: PPUSH
53601: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
53605: LD_INT 110
53607: PPUSH
53608: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
53612: LD_INT 111
53614: PPUSH
53615: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
53619: LD_INT 112
53621: PPUSH
53622: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
53626: LD_INT 113
53628: PPUSH
53629: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
53633: LD_INT 120
53635: PPUSH
53636: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
53640: LD_INT 121
53642: PPUSH
53643: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
53647: LD_INT 122
53649: PPUSH
53650: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
53654: LD_INT 123
53656: PPUSH
53657: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
53661: LD_INT 124
53663: PPUSH
53664: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
53668: LD_INT 125
53670: PPUSH
53671: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
53675: LD_INT 126
53677: PPUSH
53678: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
53682: LD_INT 200
53684: PPUSH
53685: CALL_OW 427
// end ;
53689: END
// on SailEvent ( event ) do begin if event < 100 then
53690: LD_VAR 0 1
53694: PUSH
53695: LD_INT 100
53697: LESS
53698: IFFALSE 53709
// CustomEvent ( event ) ;
53700: LD_VAR 0 1
53704: PPUSH
53705: CALL 5885 0 1
// if event = 100 then
53709: LD_VAR 0 1
53713: PUSH
53714: LD_INT 100
53716: EQUAL
53717: IFFALSE 53723
// MC_ClassManager ( ) ;
53719: CALL 54115 0 0
// if event = 101 then
53723: LD_VAR 0 1
53727: PUSH
53728: LD_INT 101
53730: EQUAL
53731: IFFALSE 53737
// MC_RepairBuildings ( ) ;
53733: CALL 58897 0 0
// if event = 102 then
53737: LD_VAR 0 1
53741: PUSH
53742: LD_INT 102
53744: EQUAL
53745: IFFALSE 53751
// MC_Heal ( ) ;
53747: CALL 59756 0 0
// if event = 103 then
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 103
53758: EQUAL
53759: IFFALSE 53765
// MC_Build ( ) ;
53761: CALL 60178 0 0
// if event = 104 then
53765: LD_VAR 0 1
53769: PUSH
53770: LD_INT 104
53772: EQUAL
53773: IFFALSE 53779
// MC_TurretWeapon ( ) ;
53775: CALL 61791 0 0
// if event = 105 then
53779: LD_VAR 0 1
53783: PUSH
53784: LD_INT 105
53786: EQUAL
53787: IFFALSE 53793
// MC_BuildUpgrade ( ) ;
53789: CALL 61342 0 0
// if event = 106 then
53793: LD_VAR 0 1
53797: PUSH
53798: LD_INT 106
53800: EQUAL
53801: IFFALSE 53807
// MC_PlantMines ( ) ;
53803: CALL 62221 0 0
// if event = 107 then
53807: LD_VAR 0 1
53811: PUSH
53812: LD_INT 107
53814: EQUAL
53815: IFFALSE 53821
// MC_CollectCrates ( ) ;
53817: CALL 63019 0 0
// if event = 108 then
53821: LD_VAR 0 1
53825: PUSH
53826: LD_INT 108
53828: EQUAL
53829: IFFALSE 53835
// MC_LinkRemoteControl ( ) ;
53831: CALL 64795 0 0
// if event = 109 then
53835: LD_VAR 0 1
53839: PUSH
53840: LD_INT 109
53842: EQUAL
53843: IFFALSE 53849
// MC_ProduceVehicle ( ) ;
53845: CALL 64976 0 0
// if event = 110 then
53849: LD_VAR 0 1
53853: PUSH
53854: LD_INT 110
53856: EQUAL
53857: IFFALSE 53863
// MC_SendAttack ( ) ;
53859: CALL 65442 0 0
// if event = 111 then
53863: LD_VAR 0 1
53867: PUSH
53868: LD_INT 111
53870: EQUAL
53871: IFFALSE 53877
// MC_Defend ( ) ;
53873: CALL 65550 0 0
// if event = 112 then
53877: LD_VAR 0 1
53881: PUSH
53882: LD_INT 112
53884: EQUAL
53885: IFFALSE 53891
// MC_Research ( ) ;
53887: CALL 66155 0 0
// if event = 113 then
53891: LD_VAR 0 1
53895: PUSH
53896: LD_INT 113
53898: EQUAL
53899: IFFALSE 53905
// MC_MinesTrigger ( ) ;
53901: CALL 67269 0 0
// if event = 120 then
53905: LD_VAR 0 1
53909: PUSH
53910: LD_INT 120
53912: EQUAL
53913: IFFALSE 53919
// MC_RepairVehicle ( ) ;
53915: CALL 67368 0 0
// if event = 121 then
53919: LD_VAR 0 1
53923: PUSH
53924: LD_INT 121
53926: EQUAL
53927: IFFALSE 53933
// MC_TameApe ( ) ;
53929: CALL 68098 0 0
// if event = 122 then
53933: LD_VAR 0 1
53937: PUSH
53938: LD_INT 122
53940: EQUAL
53941: IFFALSE 53947
// MC_ChangeApeClass ( ) ;
53943: CALL 68927 0 0
// if event = 123 then
53947: LD_VAR 0 1
53951: PUSH
53952: LD_INT 123
53954: EQUAL
53955: IFFALSE 53961
// MC_Bazooka ( ) ;
53957: CALL 69577 0 0
// if event = 124 then
53961: LD_VAR 0 1
53965: PUSH
53966: LD_INT 124
53968: EQUAL
53969: IFFALSE 53975
// MC_TeleportExit ( ) ;
53971: CALL 69775 0 0
// if event = 125 then
53975: LD_VAR 0 1
53979: PUSH
53980: LD_INT 125
53982: EQUAL
53983: IFFALSE 53989
// MC_Deposits ( ) ;
53985: CALL 70422 0 0
// if event = 126 then
53989: LD_VAR 0 1
53993: PUSH
53994: LD_INT 126
53996: EQUAL
53997: IFFALSE 54003
// MC_RemoteDriver ( ) ;
53999: CALL 71047 0 0
// if event = 200 then
54003: LD_VAR 0 1
54007: PUSH
54008: LD_INT 200
54010: EQUAL
54011: IFFALSE 54017
// MC_Idle ( ) ;
54013: CALL 72996 0 0
// end ;
54017: PPOPN 1
54019: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54020: LD_INT 0
54022: PPUSH
54023: PPUSH
// if not mc_bases [ base ] or not tag then
54024: LD_EXP 64
54028: PUSH
54029: LD_VAR 0 1
54033: ARRAY
54034: NOT
54035: PUSH
54036: LD_VAR 0 2
54040: NOT
54041: OR
54042: IFFALSE 54046
// exit ;
54044: GO 54110
// for i in mc_bases [ base ] union mc_ape [ base ] do
54046: LD_ADDR_VAR 0 4
54050: PUSH
54051: LD_EXP 64
54055: PUSH
54056: LD_VAR 0 1
54060: ARRAY
54061: PUSH
54062: LD_EXP 93
54066: PUSH
54067: LD_VAR 0 1
54071: ARRAY
54072: UNION
54073: PUSH
54074: FOR_IN
54075: IFFALSE 54108
// if GetTag ( i ) = tag then
54077: LD_VAR 0 4
54081: PPUSH
54082: CALL_OW 110
54086: PUSH
54087: LD_VAR 0 2
54091: EQUAL
54092: IFFALSE 54106
// SetTag ( i , 0 ) ;
54094: LD_VAR 0 4
54098: PPUSH
54099: LD_INT 0
54101: PPUSH
54102: CALL_OW 109
54106: GO 54074
54108: POP
54109: POP
// end ;
54110: LD_VAR 0 3
54114: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
54115: LD_INT 0
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
// if not mc_bases then
54125: LD_EXP 64
54129: NOT
54130: IFFALSE 54134
// exit ;
54132: GO 54592
// for i = 1 to mc_bases do
54134: LD_ADDR_VAR 0 2
54138: PUSH
54139: DOUBLE
54140: LD_INT 1
54142: DEC
54143: ST_TO_ADDR
54144: LD_EXP 64
54148: PUSH
54149: FOR_TO
54150: IFFALSE 54590
// begin tmp := MC_ClassCheckReq ( i ) ;
54152: LD_ADDR_VAR 0 4
54156: PUSH
54157: LD_VAR 0 2
54161: PPUSH
54162: CALL 54597 0 1
54166: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
54167: LD_ADDR_EXP 105
54171: PUSH
54172: LD_EXP 105
54176: PPUSH
54177: LD_VAR 0 2
54181: PPUSH
54182: LD_VAR 0 4
54186: PPUSH
54187: CALL_OW 1
54191: ST_TO_ADDR
// if not tmp then
54192: LD_VAR 0 4
54196: NOT
54197: IFFALSE 54201
// continue ;
54199: GO 54149
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
54201: LD_ADDR_VAR 0 6
54205: PUSH
54206: LD_EXP 64
54210: PUSH
54211: LD_VAR 0 2
54215: ARRAY
54216: PPUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 30
54222: PUSH
54223: LD_INT 4
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 30
54232: PUSH
54233: LD_INT 5
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: PPUSH
54245: CALL_OW 72
54249: PUSH
54250: LD_EXP 64
54254: PUSH
54255: LD_VAR 0 2
54259: ARRAY
54260: PPUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 30
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 30
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: PPUSH
54289: CALL_OW 72
54293: PUSH
54294: LD_EXP 64
54298: PUSH
54299: LD_VAR 0 2
54303: ARRAY
54304: PPUSH
54305: LD_INT 30
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PPUSH
54315: CALL_OW 72
54319: PUSH
54320: LD_EXP 64
54324: PUSH
54325: LD_VAR 0 2
54329: ARRAY
54330: PPUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 30
54336: PUSH
54337: LD_INT 6
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 30
54346: PUSH
54347: LD_INT 7
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 30
54356: PUSH
54357: LD_INT 8
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: PPUSH
54370: CALL_OW 72
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// for j = 1 to 4 do
54381: LD_ADDR_VAR 0 3
54385: PUSH
54386: DOUBLE
54387: LD_INT 1
54389: DEC
54390: ST_TO_ADDR
54391: LD_INT 4
54393: PUSH
54394: FOR_TO
54395: IFFALSE 54586
// begin if not tmp [ j ] then
54397: LD_VAR 0 4
54401: PUSH
54402: LD_VAR 0 3
54406: ARRAY
54407: NOT
54408: IFFALSE 54412
// continue ;
54410: GO 54394
// for p in tmp [ j ] do
54412: LD_ADDR_VAR 0 5
54416: PUSH
54417: LD_VAR 0 4
54421: PUSH
54422: LD_VAR 0 3
54426: ARRAY
54427: PUSH
54428: FOR_IN
54429: IFFALSE 54582
// begin if not b [ j ] then
54431: LD_VAR 0 6
54435: PUSH
54436: LD_VAR 0 3
54440: ARRAY
54441: NOT
54442: IFFALSE 54446
// break ;
54444: GO 54582
// e := 0 ;
54446: LD_ADDR_VAR 0 7
54450: PUSH
54451: LD_INT 0
54453: ST_TO_ADDR
// for k in b [ j ] do
54454: LD_ADDR_VAR 0 8
54458: PUSH
54459: LD_VAR 0 6
54463: PUSH
54464: LD_VAR 0 3
54468: ARRAY
54469: PUSH
54470: FOR_IN
54471: IFFALSE 54498
// if IsNotFull ( k ) then
54473: LD_VAR 0 8
54477: PPUSH
54478: CALL 15678 0 1
54482: IFFALSE 54496
// begin e := k ;
54484: LD_ADDR_VAR 0 7
54488: PUSH
54489: LD_VAR 0 8
54493: ST_TO_ADDR
// break ;
54494: GO 54498
// end ;
54496: GO 54470
54498: POP
54499: POP
// if e and not UnitGoingToBuilding ( p , e ) then
54500: LD_VAR 0 7
54504: PUSH
54505: LD_VAR 0 5
54509: PPUSH
54510: LD_VAR 0 7
54514: PPUSH
54515: CALL 48098 0 2
54519: NOT
54520: AND
54521: IFFALSE 54580
// begin if IsInUnit ( p ) then
54523: LD_VAR 0 5
54527: PPUSH
54528: CALL_OW 310
54532: IFFALSE 54543
// ComExitBuilding ( p ) ;
54534: LD_VAR 0 5
54538: PPUSH
54539: CALL_OW 122
// ComEnterUnit ( p , e ) ;
54543: LD_VAR 0 5
54547: PPUSH
54548: LD_VAR 0 7
54552: PPUSH
54553: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
54557: LD_VAR 0 5
54561: PPUSH
54562: LD_VAR 0 3
54566: PPUSH
54567: CALL_OW 183
// AddComExitBuilding ( p ) ;
54571: LD_VAR 0 5
54575: PPUSH
54576: CALL_OW 182
// end ; end ;
54580: GO 54428
54582: POP
54583: POP
// end ;
54584: GO 54394
54586: POP
54587: POP
// end ;
54588: GO 54149
54590: POP
54591: POP
// end ;
54592: LD_VAR 0 1
54596: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
54597: LD_INT 0
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
54603: PPUSH
54604: PPUSH
54605: PPUSH
54606: PPUSH
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54611: LD_VAR 0 1
54615: NOT
54616: PUSH
54617: LD_EXP 64
54621: PUSH
54622: LD_VAR 0 1
54626: ARRAY
54627: NOT
54628: OR
54629: PUSH
54630: LD_EXP 64
54634: PUSH
54635: LD_VAR 0 1
54639: ARRAY
54640: PPUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 30
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 30
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: PPUSH
54669: CALL_OW 72
54673: NOT
54674: OR
54675: IFFALSE 54679
// exit ;
54677: GO 58182
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54679: LD_ADDR_VAR 0 4
54683: PUSH
54684: LD_EXP 64
54688: PUSH
54689: LD_VAR 0 1
54693: ARRAY
54694: PPUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 25
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 25
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 25
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 25
54730: PUSH
54731: LD_INT 4
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 25
54740: PUSH
54741: LD_INT 5
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 25
54750: PUSH
54751: LD_INT 8
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 25
54760: PUSH
54761: LD_INT 9
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: PPUSH
54778: CALL_OW 72
54782: ST_TO_ADDR
// if not tmp then
54783: LD_VAR 0 4
54787: NOT
54788: IFFALSE 54792
// exit ;
54790: GO 58182
// for i in tmp do
54792: LD_ADDR_VAR 0 3
54796: PUSH
54797: LD_VAR 0 4
54801: PUSH
54802: FOR_IN
54803: IFFALSE 54834
// if GetTag ( i ) then
54805: LD_VAR 0 3
54809: PPUSH
54810: CALL_OW 110
54814: IFFALSE 54832
// tmp := tmp diff i ;
54816: LD_ADDR_VAR 0 4
54820: PUSH
54821: LD_VAR 0 4
54825: PUSH
54826: LD_VAR 0 3
54830: DIFF
54831: ST_TO_ADDR
54832: GO 54802
54834: POP
54835: POP
// if not tmp then
54836: LD_VAR 0 4
54840: NOT
54841: IFFALSE 54845
// exit ;
54843: GO 58182
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54845: LD_ADDR_VAR 0 5
54849: PUSH
54850: LD_EXP 64
54854: PUSH
54855: LD_VAR 0 1
54859: ARRAY
54860: PPUSH
54861: LD_INT 2
54863: PUSH
54864: LD_INT 25
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 25
54876: PUSH
54877: LD_INT 5
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 25
54886: PUSH
54887: LD_INT 8
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 25
54896: PUSH
54897: LD_INT 9
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: PPUSH
54911: CALL_OW 72
54915: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
54916: LD_ADDR_VAR 0 6
54920: PUSH
54921: LD_EXP 64
54925: PUSH
54926: LD_VAR 0 1
54930: ARRAY
54931: PPUSH
54932: LD_INT 25
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PPUSH
54942: CALL_OW 72
54946: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
54947: LD_ADDR_VAR 0 7
54951: PUSH
54952: LD_EXP 64
54956: PUSH
54957: LD_VAR 0 1
54961: ARRAY
54962: PPUSH
54963: LD_INT 25
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PPUSH
54973: CALL_OW 72
54977: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
54978: LD_ADDR_VAR 0 8
54982: PUSH
54983: LD_EXP 64
54987: PUSH
54988: LD_VAR 0 1
54992: ARRAY
54993: PPUSH
54994: LD_INT 25
54996: PUSH
54997: LD_INT 4
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 24
55006: PUSH
55007: LD_INT 251
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PPUSH
55018: CALL_OW 72
55022: ST_TO_ADDR
// if mc_scan [ base ] then
55023: LD_EXP 87
55027: PUSH
55028: LD_VAR 0 1
55032: ARRAY
55033: IFFALSE 55494
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
55035: LD_ADDR_EXP 106
55039: PUSH
55040: LD_EXP 106
55044: PPUSH
55045: LD_VAR 0 1
55049: PPUSH
55050: LD_INT 4
55052: PPUSH
55053: CALL_OW 1
55057: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
55058: LD_ADDR_VAR 0 12
55062: PUSH
55063: LD_EXP 64
55067: PUSH
55068: LD_VAR 0 1
55072: ARRAY
55073: PPUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 30
55079: PUSH
55080: LD_INT 4
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 30
55089: PUSH
55090: LD_INT 5
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: PPUSH
55102: CALL_OW 72
55106: ST_TO_ADDR
// if not b then
55107: LD_VAR 0 12
55111: NOT
55112: IFFALSE 55116
// exit ;
55114: GO 58182
// p := [ ] ;
55116: LD_ADDR_VAR 0 11
55120: PUSH
55121: EMPTY
55122: ST_TO_ADDR
// if sci >= 2 then
55123: LD_VAR 0 8
55127: PUSH
55128: LD_INT 2
55130: GREATEREQUAL
55131: IFFALSE 55162
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
55133: LD_ADDR_VAR 0 8
55137: PUSH
55138: LD_VAR 0 8
55142: PUSH
55143: LD_INT 1
55145: ARRAY
55146: PUSH
55147: LD_VAR 0 8
55151: PUSH
55152: LD_INT 2
55154: ARRAY
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: ST_TO_ADDR
55160: GO 55223
// if sci = 1 then
55162: LD_VAR 0 8
55166: PUSH
55167: LD_INT 1
55169: EQUAL
55170: IFFALSE 55191
// sci := [ sci [ 1 ] ] else
55172: LD_ADDR_VAR 0 8
55176: PUSH
55177: LD_VAR 0 8
55181: PUSH
55182: LD_INT 1
55184: ARRAY
55185: PUSH
55186: EMPTY
55187: LIST
55188: ST_TO_ADDR
55189: GO 55223
// if sci = 0 then
55191: LD_VAR 0 8
55195: PUSH
55196: LD_INT 0
55198: EQUAL
55199: IFFALSE 55223
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
55201: LD_ADDR_VAR 0 11
55205: PUSH
55206: LD_VAR 0 4
55210: PPUSH
55211: LD_INT 4
55213: PPUSH
55214: CALL 47961 0 2
55218: PUSH
55219: LD_INT 1
55221: ARRAY
55222: ST_TO_ADDR
// if eng > 4 then
55223: LD_VAR 0 6
55227: PUSH
55228: LD_INT 4
55230: GREATER
55231: IFFALSE 55277
// for i = eng downto 4 do
55233: LD_ADDR_VAR 0 3
55237: PUSH
55238: DOUBLE
55239: LD_VAR 0 6
55243: INC
55244: ST_TO_ADDR
55245: LD_INT 4
55247: PUSH
55248: FOR_DOWNTO
55249: IFFALSE 55275
// eng := eng diff eng [ i ] ;
55251: LD_ADDR_VAR 0 6
55255: PUSH
55256: LD_VAR 0 6
55260: PUSH
55261: LD_VAR 0 6
55265: PUSH
55266: LD_VAR 0 3
55270: ARRAY
55271: DIFF
55272: ST_TO_ADDR
55273: GO 55248
55275: POP
55276: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
55277: LD_ADDR_VAR 0 4
55281: PUSH
55282: LD_VAR 0 4
55286: PUSH
55287: LD_VAR 0 5
55291: PUSH
55292: LD_VAR 0 6
55296: UNION
55297: PUSH
55298: LD_VAR 0 7
55302: UNION
55303: PUSH
55304: LD_VAR 0 8
55308: UNION
55309: DIFF
55310: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
55311: LD_ADDR_VAR 0 13
55315: PUSH
55316: LD_EXP 64
55320: PUSH
55321: LD_VAR 0 1
55325: ARRAY
55326: PPUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 30
55332: PUSH
55333: LD_INT 32
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 30
55342: PUSH
55343: LD_INT 31
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: PPUSH
55355: CALL_OW 72
55359: PUSH
55360: LD_EXP 64
55364: PUSH
55365: LD_VAR 0 1
55369: ARRAY
55370: PPUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 30
55376: PUSH
55377: LD_INT 4
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 30
55386: PUSH
55387: LD_INT 5
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: PPUSH
55399: CALL_OW 72
55403: PUSH
55404: LD_INT 6
55406: MUL
55407: PLUS
55408: ST_TO_ADDR
// if bcount < tmp then
55409: LD_VAR 0 13
55413: PUSH
55414: LD_VAR 0 4
55418: LESS
55419: IFFALSE 55465
// for i = tmp downto bcount do
55421: LD_ADDR_VAR 0 3
55425: PUSH
55426: DOUBLE
55427: LD_VAR 0 4
55431: INC
55432: ST_TO_ADDR
55433: LD_VAR 0 13
55437: PUSH
55438: FOR_DOWNTO
55439: IFFALSE 55463
// tmp := Delete ( tmp , tmp ) ;
55441: LD_ADDR_VAR 0 4
55445: PUSH
55446: LD_VAR 0 4
55450: PPUSH
55451: LD_VAR 0 4
55455: PPUSH
55456: CALL_OW 3
55460: ST_TO_ADDR
55461: GO 55438
55463: POP
55464: POP
// result := [ tmp , 0 , 0 , p ] ;
55465: LD_ADDR_VAR 0 2
55469: PUSH
55470: LD_VAR 0 4
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_VAR 0 11
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// exit ;
55492: GO 58182
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55494: LD_EXP 64
55498: PUSH
55499: LD_VAR 0 1
55503: ARRAY
55504: PPUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 30
55510: PUSH
55511: LD_INT 6
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 30
55520: PUSH
55521: LD_INT 7
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 30
55530: PUSH
55531: LD_INT 8
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: PPUSH
55544: CALL_OW 72
55548: NOT
55549: PUSH
55550: LD_EXP 64
55554: PUSH
55555: LD_VAR 0 1
55559: ARRAY
55560: PPUSH
55561: LD_INT 30
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PPUSH
55571: CALL_OW 72
55575: NOT
55576: AND
55577: IFFALSE 55649
// begin if eng = tmp then
55579: LD_VAR 0 6
55583: PUSH
55584: LD_VAR 0 4
55588: EQUAL
55589: IFFALSE 55593
// exit ;
55591: GO 58182
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
55593: LD_ADDR_EXP 106
55597: PUSH
55598: LD_EXP 106
55602: PPUSH
55603: LD_VAR 0 1
55607: PPUSH
55608: LD_INT 1
55610: PPUSH
55611: CALL_OW 1
55615: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
55616: LD_ADDR_VAR 0 2
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_VAR 0 4
55628: PUSH
55629: LD_VAR 0 6
55633: DIFF
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// exit ;
55647: GO 58182
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55649: LD_EXP 91
55653: PUSH
55654: LD_EXP 90
55658: PUSH
55659: LD_VAR 0 1
55663: ARRAY
55664: ARRAY
55665: PUSH
55666: LD_EXP 64
55670: PUSH
55671: LD_VAR 0 1
55675: ARRAY
55676: PPUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 30
55682: PUSH
55683: LD_INT 6
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 30
55692: PUSH
55693: LD_INT 7
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 30
55702: PUSH
55703: LD_INT 8
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: PPUSH
55716: CALL_OW 72
55720: AND
55721: PUSH
55722: LD_EXP 64
55726: PUSH
55727: LD_VAR 0 1
55731: ARRAY
55732: PPUSH
55733: LD_INT 30
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PPUSH
55743: CALL_OW 72
55747: NOT
55748: AND
55749: IFFALSE 55963
// begin if sci >= 6 then
55751: LD_VAR 0 8
55755: PUSH
55756: LD_INT 6
55758: GREATEREQUAL
55759: IFFALSE 55763
// exit ;
55761: GO 58182
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
55763: LD_ADDR_EXP 106
55767: PUSH
55768: LD_EXP 106
55772: PPUSH
55773: LD_VAR 0 1
55777: PPUSH
55778: LD_INT 2
55780: PPUSH
55781: CALL_OW 1
55785: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
55786: LD_ADDR_VAR 0 9
55790: PUSH
55791: LD_VAR 0 4
55795: PUSH
55796: LD_VAR 0 8
55800: DIFF
55801: PPUSH
55802: LD_INT 4
55804: PPUSH
55805: CALL 47961 0 2
55809: ST_TO_ADDR
// p := [ ] ;
55810: LD_ADDR_VAR 0 11
55814: PUSH
55815: EMPTY
55816: ST_TO_ADDR
// if sci < 6 and sort > 6 then
55817: LD_VAR 0 8
55821: PUSH
55822: LD_INT 6
55824: LESS
55825: PUSH
55826: LD_VAR 0 9
55830: PUSH
55831: LD_INT 6
55833: GREATER
55834: AND
55835: IFFALSE 55916
// begin for i = 1 to 6 - sci do
55837: LD_ADDR_VAR 0 3
55841: PUSH
55842: DOUBLE
55843: LD_INT 1
55845: DEC
55846: ST_TO_ADDR
55847: LD_INT 6
55849: PUSH
55850: LD_VAR 0 8
55854: MINUS
55855: PUSH
55856: FOR_TO
55857: IFFALSE 55912
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
55859: LD_ADDR_VAR 0 11
55863: PUSH
55864: LD_VAR 0 11
55868: PPUSH
55869: LD_VAR 0 11
55873: PUSH
55874: LD_INT 1
55876: PLUS
55877: PPUSH
55878: LD_VAR 0 9
55882: PUSH
55883: LD_INT 1
55885: ARRAY
55886: PPUSH
55887: CALL_OW 2
55891: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
55892: LD_ADDR_VAR 0 9
55896: PUSH
55897: LD_VAR 0 9
55901: PPUSH
55902: LD_INT 1
55904: PPUSH
55905: CALL_OW 3
55909: ST_TO_ADDR
// end ;
55910: GO 55856
55912: POP
55913: POP
// end else
55914: GO 55936
// if sort then
55916: LD_VAR 0 9
55920: IFFALSE 55936
// p := sort [ 1 ] ;
55922: LD_ADDR_VAR 0 11
55926: PUSH
55927: LD_VAR 0 9
55931: PUSH
55932: LD_INT 1
55934: ARRAY
55935: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
55936: LD_ADDR_VAR 0 2
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_VAR 0 11
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// exit ;
55961: GO 58182
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55963: LD_EXP 91
55967: PUSH
55968: LD_EXP 90
55972: PUSH
55973: LD_VAR 0 1
55977: ARRAY
55978: ARRAY
55979: PUSH
55980: LD_EXP 64
55984: PUSH
55985: LD_VAR 0 1
55989: ARRAY
55990: PPUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 30
55996: PUSH
55997: LD_INT 6
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 30
56006: PUSH
56007: LD_INT 7
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 30
56016: PUSH
56017: LD_INT 8
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: PPUSH
56030: CALL_OW 72
56034: AND
56035: PUSH
56036: LD_EXP 64
56040: PUSH
56041: LD_VAR 0 1
56045: ARRAY
56046: PPUSH
56047: LD_INT 30
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PPUSH
56057: CALL_OW 72
56061: AND
56062: IFFALSE 56796
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
56064: LD_ADDR_EXP 106
56068: PUSH
56069: LD_EXP 106
56073: PPUSH
56074: LD_VAR 0 1
56078: PPUSH
56079: LD_INT 3
56081: PPUSH
56082: CALL_OW 1
56086: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56087: LD_ADDR_VAR 0 2
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// if not eng then
56110: LD_VAR 0 6
56114: NOT
56115: IFFALSE 56178
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
56117: LD_ADDR_VAR 0 11
56121: PUSH
56122: LD_VAR 0 4
56126: PPUSH
56127: LD_INT 2
56129: PPUSH
56130: CALL 47961 0 2
56134: PUSH
56135: LD_INT 1
56137: ARRAY
56138: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
56139: LD_ADDR_VAR 0 2
56143: PUSH
56144: LD_VAR 0 2
56148: PPUSH
56149: LD_INT 2
56151: PPUSH
56152: LD_VAR 0 11
56156: PPUSH
56157: CALL_OW 1
56161: ST_TO_ADDR
// tmp := tmp diff p ;
56162: LD_ADDR_VAR 0 4
56166: PUSH
56167: LD_VAR 0 4
56171: PUSH
56172: LD_VAR 0 11
56176: DIFF
56177: ST_TO_ADDR
// end ; if tmp and sci < 6 then
56178: LD_VAR 0 4
56182: PUSH
56183: LD_VAR 0 8
56187: PUSH
56188: LD_INT 6
56190: LESS
56191: AND
56192: IFFALSE 56380
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
56194: LD_ADDR_VAR 0 9
56198: PUSH
56199: LD_VAR 0 4
56203: PUSH
56204: LD_VAR 0 8
56208: PUSH
56209: LD_VAR 0 7
56213: UNION
56214: DIFF
56215: PPUSH
56216: LD_INT 4
56218: PPUSH
56219: CALL 47961 0 2
56223: ST_TO_ADDR
// p := [ ] ;
56224: LD_ADDR_VAR 0 11
56228: PUSH
56229: EMPTY
56230: ST_TO_ADDR
// if sort then
56231: LD_VAR 0 9
56235: IFFALSE 56351
// for i = 1 to 6 - sci do
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: DOUBLE
56243: LD_INT 1
56245: DEC
56246: ST_TO_ADDR
56247: LD_INT 6
56249: PUSH
56250: LD_VAR 0 8
56254: MINUS
56255: PUSH
56256: FOR_TO
56257: IFFALSE 56349
// begin if i = sort then
56259: LD_VAR 0 3
56263: PUSH
56264: LD_VAR 0 9
56268: EQUAL
56269: IFFALSE 56273
// break ;
56271: GO 56349
// if GetClass ( i ) = 4 then
56273: LD_VAR 0 3
56277: PPUSH
56278: CALL_OW 257
56282: PUSH
56283: LD_INT 4
56285: EQUAL
56286: IFFALSE 56290
// continue ;
56288: GO 56256
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56290: LD_ADDR_VAR 0 11
56294: PUSH
56295: LD_VAR 0 11
56299: PPUSH
56300: LD_VAR 0 11
56304: PUSH
56305: LD_INT 1
56307: PLUS
56308: PPUSH
56309: LD_VAR 0 9
56313: PUSH
56314: LD_VAR 0 3
56318: ARRAY
56319: PPUSH
56320: CALL_OW 2
56324: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56325: LD_ADDR_VAR 0 4
56329: PUSH
56330: LD_VAR 0 4
56334: PUSH
56335: LD_VAR 0 9
56339: PUSH
56340: LD_VAR 0 3
56344: ARRAY
56345: DIFF
56346: ST_TO_ADDR
// end ;
56347: GO 56256
56349: POP
56350: POP
// if p then
56351: LD_VAR 0 11
56355: IFFALSE 56380
// result := Replace ( result , 4 , p ) ;
56357: LD_ADDR_VAR 0 2
56361: PUSH
56362: LD_VAR 0 2
56366: PPUSH
56367: LD_INT 4
56369: PPUSH
56370: LD_VAR 0 11
56374: PPUSH
56375: CALL_OW 1
56379: ST_TO_ADDR
// end ; if tmp and mech < 6 then
56380: LD_VAR 0 4
56384: PUSH
56385: LD_VAR 0 7
56389: PUSH
56390: LD_INT 6
56392: LESS
56393: AND
56394: IFFALSE 56582
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56396: LD_ADDR_VAR 0 9
56400: PUSH
56401: LD_VAR 0 4
56405: PUSH
56406: LD_VAR 0 8
56410: PUSH
56411: LD_VAR 0 7
56415: UNION
56416: DIFF
56417: PPUSH
56418: LD_INT 3
56420: PPUSH
56421: CALL 47961 0 2
56425: ST_TO_ADDR
// p := [ ] ;
56426: LD_ADDR_VAR 0 11
56430: PUSH
56431: EMPTY
56432: ST_TO_ADDR
// if sort then
56433: LD_VAR 0 9
56437: IFFALSE 56553
// for i = 1 to 6 - mech do
56439: LD_ADDR_VAR 0 3
56443: PUSH
56444: DOUBLE
56445: LD_INT 1
56447: DEC
56448: ST_TO_ADDR
56449: LD_INT 6
56451: PUSH
56452: LD_VAR 0 7
56456: MINUS
56457: PUSH
56458: FOR_TO
56459: IFFALSE 56551
// begin if i = sort then
56461: LD_VAR 0 3
56465: PUSH
56466: LD_VAR 0 9
56470: EQUAL
56471: IFFALSE 56475
// break ;
56473: GO 56551
// if GetClass ( i ) = 3 then
56475: LD_VAR 0 3
56479: PPUSH
56480: CALL_OW 257
56484: PUSH
56485: LD_INT 3
56487: EQUAL
56488: IFFALSE 56492
// continue ;
56490: GO 56458
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56492: LD_ADDR_VAR 0 11
56496: PUSH
56497: LD_VAR 0 11
56501: PPUSH
56502: LD_VAR 0 11
56506: PUSH
56507: LD_INT 1
56509: PLUS
56510: PPUSH
56511: LD_VAR 0 9
56515: PUSH
56516: LD_VAR 0 3
56520: ARRAY
56521: PPUSH
56522: CALL_OW 2
56526: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56527: LD_ADDR_VAR 0 4
56531: PUSH
56532: LD_VAR 0 4
56536: PUSH
56537: LD_VAR 0 9
56541: PUSH
56542: LD_VAR 0 3
56546: ARRAY
56547: DIFF
56548: ST_TO_ADDR
// end ;
56549: GO 56458
56551: POP
56552: POP
// if p then
56553: LD_VAR 0 11
56557: IFFALSE 56582
// result := Replace ( result , 3 , p ) ;
56559: LD_ADDR_VAR 0 2
56563: PUSH
56564: LD_VAR 0 2
56568: PPUSH
56569: LD_INT 3
56571: PPUSH
56572: LD_VAR 0 11
56576: PPUSH
56577: CALL_OW 1
56581: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
56582: LD_VAR 0 4
56586: PUSH
56587: LD_INT 6
56589: GREATER
56590: PUSH
56591: LD_VAR 0 6
56595: PUSH
56596: LD_INT 6
56598: LESS
56599: AND
56600: IFFALSE 56794
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56602: LD_ADDR_VAR 0 9
56606: PUSH
56607: LD_VAR 0 4
56611: PUSH
56612: LD_VAR 0 8
56616: PUSH
56617: LD_VAR 0 7
56621: UNION
56622: PUSH
56623: LD_VAR 0 6
56627: UNION
56628: DIFF
56629: PPUSH
56630: LD_INT 2
56632: PPUSH
56633: CALL 47961 0 2
56637: ST_TO_ADDR
// p := [ ] ;
56638: LD_ADDR_VAR 0 11
56642: PUSH
56643: EMPTY
56644: ST_TO_ADDR
// if sort then
56645: LD_VAR 0 9
56649: IFFALSE 56765
// for i = 1 to 6 - eng do
56651: LD_ADDR_VAR 0 3
56655: PUSH
56656: DOUBLE
56657: LD_INT 1
56659: DEC
56660: ST_TO_ADDR
56661: LD_INT 6
56663: PUSH
56664: LD_VAR 0 6
56668: MINUS
56669: PUSH
56670: FOR_TO
56671: IFFALSE 56763
// begin if i = sort then
56673: LD_VAR 0 3
56677: PUSH
56678: LD_VAR 0 9
56682: EQUAL
56683: IFFALSE 56687
// break ;
56685: GO 56763
// if GetClass ( i ) = 2 then
56687: LD_VAR 0 3
56691: PPUSH
56692: CALL_OW 257
56696: PUSH
56697: LD_INT 2
56699: EQUAL
56700: IFFALSE 56704
// continue ;
56702: GO 56670
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56704: LD_ADDR_VAR 0 11
56708: PUSH
56709: LD_VAR 0 11
56713: PPUSH
56714: LD_VAR 0 11
56718: PUSH
56719: LD_INT 1
56721: PLUS
56722: PPUSH
56723: LD_VAR 0 9
56727: PUSH
56728: LD_VAR 0 3
56732: ARRAY
56733: PPUSH
56734: CALL_OW 2
56738: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56739: LD_ADDR_VAR 0 4
56743: PUSH
56744: LD_VAR 0 4
56748: PUSH
56749: LD_VAR 0 9
56753: PUSH
56754: LD_VAR 0 3
56758: ARRAY
56759: DIFF
56760: ST_TO_ADDR
// end ;
56761: GO 56670
56763: POP
56764: POP
// if p then
56765: LD_VAR 0 11
56769: IFFALSE 56794
// result := Replace ( result , 2 , p ) ;
56771: LD_ADDR_VAR 0 2
56775: PUSH
56776: LD_VAR 0 2
56780: PPUSH
56781: LD_INT 2
56783: PPUSH
56784: LD_VAR 0 11
56788: PPUSH
56789: CALL_OW 1
56793: ST_TO_ADDR
// end ; exit ;
56794: GO 58182
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
56796: LD_EXP 91
56800: PUSH
56801: LD_EXP 90
56805: PUSH
56806: LD_VAR 0 1
56810: ARRAY
56811: ARRAY
56812: NOT
56813: PUSH
56814: LD_EXP 64
56818: PUSH
56819: LD_VAR 0 1
56823: ARRAY
56824: PPUSH
56825: LD_INT 30
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PPUSH
56835: CALL_OW 72
56839: AND
56840: PUSH
56841: LD_EXP 69
56845: PUSH
56846: LD_VAR 0 1
56850: ARRAY
56851: AND
56852: IFFALSE 57460
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
56854: LD_ADDR_EXP 106
56858: PUSH
56859: LD_EXP 106
56863: PPUSH
56864: LD_VAR 0 1
56868: PPUSH
56869: LD_INT 5
56871: PPUSH
56872: CALL_OW 1
56876: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56877: LD_ADDR_VAR 0 2
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: ST_TO_ADDR
// if sci > 1 then
56900: LD_VAR 0 8
56904: PUSH
56905: LD_INT 1
56907: GREATER
56908: IFFALSE 56936
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
56910: LD_ADDR_VAR 0 4
56914: PUSH
56915: LD_VAR 0 4
56919: PUSH
56920: LD_VAR 0 8
56924: PUSH
56925: LD_VAR 0 8
56929: PUSH
56930: LD_INT 1
56932: ARRAY
56933: DIFF
56934: DIFF
56935: ST_TO_ADDR
// if tmp and not sci then
56936: LD_VAR 0 4
56940: PUSH
56941: LD_VAR 0 8
56945: NOT
56946: AND
56947: IFFALSE 57016
// begin sort := SortBySkill ( tmp , 4 ) ;
56949: LD_ADDR_VAR 0 9
56953: PUSH
56954: LD_VAR 0 4
56958: PPUSH
56959: LD_INT 4
56961: PPUSH
56962: CALL 47961 0 2
56966: ST_TO_ADDR
// if sort then
56967: LD_VAR 0 9
56971: IFFALSE 56987
// p := sort [ 1 ] ;
56973: LD_ADDR_VAR 0 11
56977: PUSH
56978: LD_VAR 0 9
56982: PUSH
56983: LD_INT 1
56985: ARRAY
56986: ST_TO_ADDR
// if p then
56987: LD_VAR 0 11
56991: IFFALSE 57016
// result := Replace ( result , 4 , p ) ;
56993: LD_ADDR_VAR 0 2
56997: PUSH
56998: LD_VAR 0 2
57002: PPUSH
57003: LD_INT 4
57005: PPUSH
57006: LD_VAR 0 11
57010: PPUSH
57011: CALL_OW 1
57015: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57016: LD_ADDR_VAR 0 4
57020: PUSH
57021: LD_VAR 0 4
57025: PUSH
57026: LD_VAR 0 7
57030: DIFF
57031: ST_TO_ADDR
// if tmp and mech < 6 then
57032: LD_VAR 0 4
57036: PUSH
57037: LD_VAR 0 7
57041: PUSH
57042: LD_INT 6
57044: LESS
57045: AND
57046: IFFALSE 57234
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
57048: LD_ADDR_VAR 0 9
57052: PUSH
57053: LD_VAR 0 4
57057: PUSH
57058: LD_VAR 0 8
57062: PUSH
57063: LD_VAR 0 7
57067: UNION
57068: DIFF
57069: PPUSH
57070: LD_INT 3
57072: PPUSH
57073: CALL 47961 0 2
57077: ST_TO_ADDR
// p := [ ] ;
57078: LD_ADDR_VAR 0 11
57082: PUSH
57083: EMPTY
57084: ST_TO_ADDR
// if sort then
57085: LD_VAR 0 9
57089: IFFALSE 57205
// for i = 1 to 6 - mech do
57091: LD_ADDR_VAR 0 3
57095: PUSH
57096: DOUBLE
57097: LD_INT 1
57099: DEC
57100: ST_TO_ADDR
57101: LD_INT 6
57103: PUSH
57104: LD_VAR 0 7
57108: MINUS
57109: PUSH
57110: FOR_TO
57111: IFFALSE 57203
// begin if i = sort then
57113: LD_VAR 0 3
57117: PUSH
57118: LD_VAR 0 9
57122: EQUAL
57123: IFFALSE 57127
// break ;
57125: GO 57203
// if GetClass ( i ) = 3 then
57127: LD_VAR 0 3
57131: PPUSH
57132: CALL_OW 257
57136: PUSH
57137: LD_INT 3
57139: EQUAL
57140: IFFALSE 57144
// continue ;
57142: GO 57110
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57144: LD_ADDR_VAR 0 11
57148: PUSH
57149: LD_VAR 0 11
57153: PPUSH
57154: LD_VAR 0 11
57158: PUSH
57159: LD_INT 1
57161: PLUS
57162: PPUSH
57163: LD_VAR 0 9
57167: PUSH
57168: LD_VAR 0 3
57172: ARRAY
57173: PPUSH
57174: CALL_OW 2
57178: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57179: LD_ADDR_VAR 0 4
57183: PUSH
57184: LD_VAR 0 4
57188: PUSH
57189: LD_VAR 0 9
57193: PUSH
57194: LD_VAR 0 3
57198: ARRAY
57199: DIFF
57200: ST_TO_ADDR
// end ;
57201: GO 57110
57203: POP
57204: POP
// if p then
57205: LD_VAR 0 11
57209: IFFALSE 57234
// result := Replace ( result , 3 , p ) ;
57211: LD_ADDR_VAR 0 2
57215: PUSH
57216: LD_VAR 0 2
57220: PPUSH
57221: LD_INT 3
57223: PPUSH
57224: LD_VAR 0 11
57228: PPUSH
57229: CALL_OW 1
57233: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57234: LD_ADDR_VAR 0 4
57238: PUSH
57239: LD_VAR 0 4
57243: PUSH
57244: LD_VAR 0 6
57248: DIFF
57249: ST_TO_ADDR
// if tmp and eng < 6 then
57250: LD_VAR 0 4
57254: PUSH
57255: LD_VAR 0 6
57259: PUSH
57260: LD_INT 6
57262: LESS
57263: AND
57264: IFFALSE 57458
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
57266: LD_ADDR_VAR 0 9
57270: PUSH
57271: LD_VAR 0 4
57275: PUSH
57276: LD_VAR 0 8
57280: PUSH
57281: LD_VAR 0 7
57285: UNION
57286: PUSH
57287: LD_VAR 0 6
57291: UNION
57292: DIFF
57293: PPUSH
57294: LD_INT 2
57296: PPUSH
57297: CALL 47961 0 2
57301: ST_TO_ADDR
// p := [ ] ;
57302: LD_ADDR_VAR 0 11
57306: PUSH
57307: EMPTY
57308: ST_TO_ADDR
// if sort then
57309: LD_VAR 0 9
57313: IFFALSE 57429
// for i = 1 to 6 - eng do
57315: LD_ADDR_VAR 0 3
57319: PUSH
57320: DOUBLE
57321: LD_INT 1
57323: DEC
57324: ST_TO_ADDR
57325: LD_INT 6
57327: PUSH
57328: LD_VAR 0 6
57332: MINUS
57333: PUSH
57334: FOR_TO
57335: IFFALSE 57427
// begin if i = sort then
57337: LD_VAR 0 3
57341: PUSH
57342: LD_VAR 0 9
57346: EQUAL
57347: IFFALSE 57351
// break ;
57349: GO 57427
// if GetClass ( i ) = 2 then
57351: LD_VAR 0 3
57355: PPUSH
57356: CALL_OW 257
57360: PUSH
57361: LD_INT 2
57363: EQUAL
57364: IFFALSE 57368
// continue ;
57366: GO 57334
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57368: LD_ADDR_VAR 0 11
57372: PUSH
57373: LD_VAR 0 11
57377: PPUSH
57378: LD_VAR 0 11
57382: PUSH
57383: LD_INT 1
57385: PLUS
57386: PPUSH
57387: LD_VAR 0 9
57391: PUSH
57392: LD_VAR 0 3
57396: ARRAY
57397: PPUSH
57398: CALL_OW 2
57402: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57403: LD_ADDR_VAR 0 4
57407: PUSH
57408: LD_VAR 0 4
57412: PUSH
57413: LD_VAR 0 9
57417: PUSH
57418: LD_VAR 0 3
57422: ARRAY
57423: DIFF
57424: ST_TO_ADDR
// end ;
57425: GO 57334
57427: POP
57428: POP
// if p then
57429: LD_VAR 0 11
57433: IFFALSE 57458
// result := Replace ( result , 2 , p ) ;
57435: LD_ADDR_VAR 0 2
57439: PUSH
57440: LD_VAR 0 2
57444: PPUSH
57445: LD_INT 2
57447: PPUSH
57448: LD_VAR 0 11
57452: PPUSH
57453: CALL_OW 1
57457: ST_TO_ADDR
// end ; exit ;
57458: GO 58182
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
57460: LD_EXP 91
57464: PUSH
57465: LD_EXP 90
57469: PUSH
57470: LD_VAR 0 1
57474: ARRAY
57475: ARRAY
57476: NOT
57477: PUSH
57478: LD_EXP 64
57482: PUSH
57483: LD_VAR 0 1
57487: ARRAY
57488: PPUSH
57489: LD_INT 30
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PPUSH
57499: CALL_OW 72
57503: AND
57504: PUSH
57505: LD_EXP 69
57509: PUSH
57510: LD_VAR 0 1
57514: ARRAY
57515: NOT
57516: AND
57517: IFFALSE 58182
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
57519: LD_ADDR_EXP 106
57523: PUSH
57524: LD_EXP 106
57528: PPUSH
57529: LD_VAR 0 1
57533: PPUSH
57534: LD_INT 6
57536: PPUSH
57537: CALL_OW 1
57541: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
57542: LD_ADDR_VAR 0 2
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// if sci >= 1 then
57565: LD_VAR 0 8
57569: PUSH
57570: LD_INT 1
57572: GREATEREQUAL
57573: IFFALSE 57595
// tmp := tmp diff sci [ 1 ] ;
57575: LD_ADDR_VAR 0 4
57579: PUSH
57580: LD_VAR 0 4
57584: PUSH
57585: LD_VAR 0 8
57589: PUSH
57590: LD_INT 1
57592: ARRAY
57593: DIFF
57594: ST_TO_ADDR
// if tmp and not sci then
57595: LD_VAR 0 4
57599: PUSH
57600: LD_VAR 0 8
57604: NOT
57605: AND
57606: IFFALSE 57675
// begin sort := SortBySkill ( tmp , 4 ) ;
57608: LD_ADDR_VAR 0 9
57612: PUSH
57613: LD_VAR 0 4
57617: PPUSH
57618: LD_INT 4
57620: PPUSH
57621: CALL 47961 0 2
57625: ST_TO_ADDR
// if sort then
57626: LD_VAR 0 9
57630: IFFALSE 57646
// p := sort [ 1 ] ;
57632: LD_ADDR_VAR 0 11
57636: PUSH
57637: LD_VAR 0 9
57641: PUSH
57642: LD_INT 1
57644: ARRAY
57645: ST_TO_ADDR
// if p then
57646: LD_VAR 0 11
57650: IFFALSE 57675
// result := Replace ( result , 4 , p ) ;
57652: LD_ADDR_VAR 0 2
57656: PUSH
57657: LD_VAR 0 2
57661: PPUSH
57662: LD_INT 4
57664: PPUSH
57665: LD_VAR 0 11
57669: PPUSH
57670: CALL_OW 1
57674: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57675: LD_ADDR_VAR 0 4
57679: PUSH
57680: LD_VAR 0 4
57684: PUSH
57685: LD_VAR 0 7
57689: DIFF
57690: ST_TO_ADDR
// if tmp and mech < 6 then
57691: LD_VAR 0 4
57695: PUSH
57696: LD_VAR 0 7
57700: PUSH
57701: LD_INT 6
57703: LESS
57704: AND
57705: IFFALSE 57887
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
57707: LD_ADDR_VAR 0 9
57711: PUSH
57712: LD_VAR 0 4
57716: PUSH
57717: LD_VAR 0 7
57721: DIFF
57722: PPUSH
57723: LD_INT 3
57725: PPUSH
57726: CALL 47961 0 2
57730: ST_TO_ADDR
// p := [ ] ;
57731: LD_ADDR_VAR 0 11
57735: PUSH
57736: EMPTY
57737: ST_TO_ADDR
// if sort then
57738: LD_VAR 0 9
57742: IFFALSE 57858
// for i = 1 to 6 - mech do
57744: LD_ADDR_VAR 0 3
57748: PUSH
57749: DOUBLE
57750: LD_INT 1
57752: DEC
57753: ST_TO_ADDR
57754: LD_INT 6
57756: PUSH
57757: LD_VAR 0 7
57761: MINUS
57762: PUSH
57763: FOR_TO
57764: IFFALSE 57856
// begin if i = sort then
57766: LD_VAR 0 3
57770: PUSH
57771: LD_VAR 0 9
57775: EQUAL
57776: IFFALSE 57780
// break ;
57778: GO 57856
// if GetClass ( i ) = 3 then
57780: LD_VAR 0 3
57784: PPUSH
57785: CALL_OW 257
57789: PUSH
57790: LD_INT 3
57792: EQUAL
57793: IFFALSE 57797
// continue ;
57795: GO 57763
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57797: LD_ADDR_VAR 0 11
57801: PUSH
57802: LD_VAR 0 11
57806: PPUSH
57807: LD_VAR 0 11
57811: PUSH
57812: LD_INT 1
57814: PLUS
57815: PPUSH
57816: LD_VAR 0 9
57820: PUSH
57821: LD_VAR 0 3
57825: ARRAY
57826: PPUSH
57827: CALL_OW 2
57831: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: LD_VAR 0 4
57841: PUSH
57842: LD_VAR 0 9
57846: PUSH
57847: LD_VAR 0 3
57851: ARRAY
57852: DIFF
57853: ST_TO_ADDR
// end ;
57854: GO 57763
57856: POP
57857: POP
// if p then
57858: LD_VAR 0 11
57862: IFFALSE 57887
// result := Replace ( result , 3 , p ) ;
57864: LD_ADDR_VAR 0 2
57868: PUSH
57869: LD_VAR 0 2
57873: PPUSH
57874: LD_INT 3
57876: PPUSH
57877: LD_VAR 0 11
57881: PPUSH
57882: CALL_OW 1
57886: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57887: LD_ADDR_VAR 0 4
57891: PUSH
57892: LD_VAR 0 4
57896: PUSH
57897: LD_VAR 0 6
57901: DIFF
57902: ST_TO_ADDR
// if tmp and eng < 4 then
57903: LD_VAR 0 4
57907: PUSH
57908: LD_VAR 0 6
57912: PUSH
57913: LD_INT 4
57915: LESS
57916: AND
57917: IFFALSE 58107
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
57919: LD_ADDR_VAR 0 9
57923: PUSH
57924: LD_VAR 0 4
57928: PUSH
57929: LD_VAR 0 7
57933: PUSH
57934: LD_VAR 0 6
57938: UNION
57939: DIFF
57940: PPUSH
57941: LD_INT 2
57943: PPUSH
57944: CALL 47961 0 2
57948: ST_TO_ADDR
// p := [ ] ;
57949: LD_ADDR_VAR 0 11
57953: PUSH
57954: EMPTY
57955: ST_TO_ADDR
// if sort then
57956: LD_VAR 0 9
57960: IFFALSE 58076
// for i = 1 to 4 - eng do
57962: LD_ADDR_VAR 0 3
57966: PUSH
57967: DOUBLE
57968: LD_INT 1
57970: DEC
57971: ST_TO_ADDR
57972: LD_INT 4
57974: PUSH
57975: LD_VAR 0 6
57979: MINUS
57980: PUSH
57981: FOR_TO
57982: IFFALSE 58074
// begin if i = sort then
57984: LD_VAR 0 3
57988: PUSH
57989: LD_VAR 0 9
57993: EQUAL
57994: IFFALSE 57998
// break ;
57996: GO 58074
// if GetClass ( i ) = 2 then
57998: LD_VAR 0 3
58002: PPUSH
58003: CALL_OW 257
58007: PUSH
58008: LD_INT 2
58010: EQUAL
58011: IFFALSE 58015
// continue ;
58013: GO 57981
// p := Insert ( p , p + 1 , sort [ i ] ) ;
58015: LD_ADDR_VAR 0 11
58019: PUSH
58020: LD_VAR 0 11
58024: PPUSH
58025: LD_VAR 0 11
58029: PUSH
58030: LD_INT 1
58032: PLUS
58033: PPUSH
58034: LD_VAR 0 9
58038: PUSH
58039: LD_VAR 0 3
58043: ARRAY
58044: PPUSH
58045: CALL_OW 2
58049: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
58050: LD_ADDR_VAR 0 4
58054: PUSH
58055: LD_VAR 0 4
58059: PUSH
58060: LD_VAR 0 9
58064: PUSH
58065: LD_VAR 0 3
58069: ARRAY
58070: DIFF
58071: ST_TO_ADDR
// end ;
58072: GO 57981
58074: POP
58075: POP
// if p then
58076: LD_VAR 0 11
58080: IFFALSE 58105
// result := Replace ( result , 2 , p ) ;
58082: LD_ADDR_VAR 0 2
58086: PUSH
58087: LD_VAR 0 2
58091: PPUSH
58092: LD_INT 2
58094: PPUSH
58095: LD_VAR 0 11
58099: PPUSH
58100: CALL_OW 1
58104: ST_TO_ADDR
// end else
58105: GO 58151
// for i = eng downto 5 do
58107: LD_ADDR_VAR 0 3
58111: PUSH
58112: DOUBLE
58113: LD_VAR 0 6
58117: INC
58118: ST_TO_ADDR
58119: LD_INT 5
58121: PUSH
58122: FOR_DOWNTO
58123: IFFALSE 58149
// tmp := tmp union eng [ i ] ;
58125: LD_ADDR_VAR 0 4
58129: PUSH
58130: LD_VAR 0 4
58134: PUSH
58135: LD_VAR 0 6
58139: PUSH
58140: LD_VAR 0 3
58144: ARRAY
58145: UNION
58146: ST_TO_ADDR
58147: GO 58122
58149: POP
58150: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
58151: LD_ADDR_VAR 0 2
58155: PUSH
58156: LD_VAR 0 2
58160: PPUSH
58161: LD_INT 1
58163: PPUSH
58164: LD_VAR 0 4
58168: PUSH
58169: LD_VAR 0 5
58173: DIFF
58174: PPUSH
58175: CALL_OW 1
58179: ST_TO_ADDR
// exit ;
58180: GO 58182
// end ; end ;
58182: LD_VAR 0 2
58186: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
58187: LD_INT 0
58189: PPUSH
58190: PPUSH
58191: PPUSH
// if not mc_bases then
58192: LD_EXP 64
58196: NOT
58197: IFFALSE 58201
// exit ;
58199: GO 58307
// for i = 1 to mc_bases do
58201: LD_ADDR_VAR 0 2
58205: PUSH
58206: DOUBLE
58207: LD_INT 1
58209: DEC
58210: ST_TO_ADDR
58211: LD_EXP 64
58215: PUSH
58216: FOR_TO
58217: IFFALSE 58298
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58219: LD_ADDR_VAR 0 3
58223: PUSH
58224: LD_EXP 64
58228: PUSH
58229: LD_VAR 0 2
58233: ARRAY
58234: PPUSH
58235: LD_INT 21
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: LD_INT 24
58250: PUSH
58251: LD_INT 1000
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PPUSH
58266: CALL_OW 72
58270: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
58271: LD_ADDR_EXP 65
58275: PUSH
58276: LD_EXP 65
58280: PPUSH
58281: LD_VAR 0 2
58285: PPUSH
58286: LD_VAR 0 3
58290: PPUSH
58291: CALL_OW 1
58295: ST_TO_ADDR
// end ;
58296: GO 58216
58298: POP
58299: POP
// RaiseSailEvent ( 101 ) ;
58300: LD_INT 101
58302: PPUSH
58303: CALL_OW 427
// end ;
58307: LD_VAR 0 1
58311: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
58312: LD_INT 0
58314: PPUSH
58315: PPUSH
58316: PPUSH
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
// if not mc_bases then
58321: LD_EXP 64
58325: NOT
58326: IFFALSE 58330
// exit ;
58328: GO 58892
// for i = 1 to mc_bases do
58330: LD_ADDR_VAR 0 2
58334: PUSH
58335: DOUBLE
58336: LD_INT 1
58338: DEC
58339: ST_TO_ADDR
58340: LD_EXP 64
58344: PUSH
58345: FOR_TO
58346: IFFALSE 58883
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
58348: LD_ADDR_VAR 0 5
58352: PUSH
58353: LD_EXP 64
58357: PUSH
58358: LD_VAR 0 2
58362: ARRAY
58363: PUSH
58364: LD_EXP 93
58368: PUSH
58369: LD_VAR 0 2
58373: ARRAY
58374: UNION
58375: PPUSH
58376: LD_INT 21
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: LD_INT 54
58394: PUSH
58395: EMPTY
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 24
58407: PUSH
58408: LD_INT 800
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PPUSH
58428: CALL_OW 72
58432: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
58433: LD_ADDR_VAR 0 6
58437: PUSH
58438: LD_EXP 64
58442: PUSH
58443: LD_VAR 0 2
58447: ARRAY
58448: PPUSH
58449: LD_INT 21
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: LD_INT 54
58467: PUSH
58468: EMPTY
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: LD_INT 24
58480: PUSH
58481: LD_INT 250
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PPUSH
58501: CALL_OW 72
58505: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
58506: LD_ADDR_VAR 0 7
58510: PUSH
58511: LD_VAR 0 5
58515: PUSH
58516: LD_VAR 0 6
58520: DIFF
58521: ST_TO_ADDR
// if not need_heal_1 then
58522: LD_VAR 0 6
58526: NOT
58527: IFFALSE 58560
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
58529: LD_ADDR_EXP 67
58533: PUSH
58534: LD_EXP 67
58538: PPUSH
58539: LD_VAR 0 2
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PPUSH
58551: EMPTY
58552: PPUSH
58553: CALL 18412 0 3
58557: ST_TO_ADDR
58558: GO 58630
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
58560: LD_ADDR_EXP 67
58564: PUSH
58565: LD_EXP 67
58569: PPUSH
58570: LD_VAR 0 2
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PPUSH
58582: LD_EXP 67
58586: PUSH
58587: LD_VAR 0 2
58591: ARRAY
58592: PUSH
58593: LD_INT 1
58595: ARRAY
58596: PPUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 24
58602: PUSH
58603: LD_INT 1000
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PPUSH
58614: CALL_OW 72
58618: PUSH
58619: LD_VAR 0 6
58623: UNION
58624: PPUSH
58625: CALL 18412 0 3
58629: ST_TO_ADDR
// if not need_heal_2 then
58630: LD_VAR 0 7
58634: NOT
58635: IFFALSE 58668
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
58637: LD_ADDR_EXP 67
58641: PUSH
58642: LD_EXP 67
58646: PPUSH
58647: LD_VAR 0 2
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PPUSH
58659: EMPTY
58660: PPUSH
58661: CALL 18412 0 3
58665: ST_TO_ADDR
58666: GO 58700
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
58668: LD_ADDR_EXP 67
58672: PUSH
58673: LD_EXP 67
58677: PPUSH
58678: LD_VAR 0 2
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PPUSH
58690: LD_VAR 0 7
58694: PPUSH
58695: CALL 18412 0 3
58699: ST_TO_ADDR
// if need_heal_2 then
58700: LD_VAR 0 7
58704: IFFALSE 58865
// for j in need_heal_2 do
58706: LD_ADDR_VAR 0 3
58710: PUSH
58711: LD_VAR 0 7
58715: PUSH
58716: FOR_IN
58717: IFFALSE 58863
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58719: LD_ADDR_VAR 0 5
58723: PUSH
58724: LD_EXP 64
58728: PUSH
58729: LD_VAR 0 2
58733: ARRAY
58734: PPUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 30
58740: PUSH
58741: LD_INT 6
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 30
58750: PUSH
58751: LD_INT 7
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 30
58760: PUSH
58761: LD_INT 8
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 30
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 30
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: PPUSH
58796: CALL_OW 72
58800: ST_TO_ADDR
// if tmp then
58801: LD_VAR 0 5
58805: IFFALSE 58861
// begin k := NearestUnitToUnit ( tmp , j ) ;
58807: LD_ADDR_VAR 0 4
58811: PUSH
58812: LD_VAR 0 5
58816: PPUSH
58817: LD_VAR 0 3
58821: PPUSH
58822: CALL_OW 74
58826: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
58827: LD_VAR 0 3
58831: PPUSH
58832: LD_VAR 0 4
58836: PPUSH
58837: CALL_OW 296
58841: PUSH
58842: LD_INT 5
58844: GREATER
58845: IFFALSE 58861
// ComMoveUnit ( j , k ) ;
58847: LD_VAR 0 3
58851: PPUSH
58852: LD_VAR 0 4
58856: PPUSH
58857: CALL_OW 112
// end ; end ;
58861: GO 58716
58863: POP
58864: POP
// if not need_heal_1 and not need_heal_2 then
58865: LD_VAR 0 6
58869: NOT
58870: PUSH
58871: LD_VAR 0 7
58875: NOT
58876: AND
58877: IFFALSE 58881
// continue ;
58879: GO 58345
// end ;
58881: GO 58345
58883: POP
58884: POP
// RaiseSailEvent ( 102 ) ;
58885: LD_INT 102
58887: PPUSH
58888: CALL_OW 427
// end ;
58892: LD_VAR 0 1
58896: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
58897: LD_INT 0
58899: PPUSH
58900: PPUSH
58901: PPUSH
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
// if not mc_bases then
58907: LD_EXP 64
58911: NOT
58912: IFFALSE 58916
// exit ;
58914: GO 59751
// for i = 1 to mc_bases do
58916: LD_ADDR_VAR 0 2
58920: PUSH
58921: DOUBLE
58922: LD_INT 1
58924: DEC
58925: ST_TO_ADDR
58926: LD_EXP 64
58930: PUSH
58931: FOR_TO
58932: IFFALSE 59749
// begin if not mc_building_need_repair [ i ] then
58934: LD_EXP 65
58938: PUSH
58939: LD_VAR 0 2
58943: ARRAY
58944: NOT
58945: IFFALSE 59119
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
58947: LD_ADDR_VAR 0 6
58951: PUSH
58952: LD_EXP 83
58956: PUSH
58957: LD_VAR 0 2
58961: ARRAY
58962: PPUSH
58963: LD_INT 3
58965: PUSH
58966: LD_INT 24
58968: PUSH
58969: LD_INT 1000
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 34
58985: PUSH
58986: LD_INT 13
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 34
58995: PUSH
58996: LD_INT 52
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PPUSH
59012: CALL_OW 72
59016: ST_TO_ADDR
// if cranes then
59017: LD_VAR 0 6
59021: IFFALSE 59083
// for j in cranes do
59023: LD_ADDR_VAR 0 3
59027: PUSH
59028: LD_VAR 0 6
59032: PUSH
59033: FOR_IN
59034: IFFALSE 59081
// if not IsInArea ( j , mc_parking [ i ] ) then
59036: LD_VAR 0 3
59040: PPUSH
59041: LD_EXP 88
59045: PUSH
59046: LD_VAR 0 2
59050: ARRAY
59051: PPUSH
59052: CALL_OW 308
59056: NOT
59057: IFFALSE 59079
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59059: LD_VAR 0 3
59063: PPUSH
59064: LD_EXP 88
59068: PUSH
59069: LD_VAR 0 2
59073: ARRAY
59074: PPUSH
59075: CALL_OW 113
59079: GO 59033
59081: POP
59082: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
59083: LD_ADDR_EXP 66
59087: PUSH
59088: LD_EXP 66
59092: PPUSH
59093: LD_VAR 0 2
59097: PPUSH
59098: EMPTY
59099: PPUSH
59100: CALL_OW 1
59104: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
59105: LD_VAR 0 2
59109: PPUSH
59110: LD_INT 101
59112: PPUSH
59113: CALL 54020 0 2
// continue ;
59117: GO 58931
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
59119: LD_ADDR_EXP 70
59123: PUSH
59124: LD_EXP 70
59128: PPUSH
59129: LD_VAR 0 2
59133: PPUSH
59134: EMPTY
59135: PPUSH
59136: CALL_OW 1
59140: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59141: LD_VAR 0 2
59145: PPUSH
59146: LD_INT 103
59148: PPUSH
59149: CALL 54020 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
59153: LD_ADDR_VAR 0 5
59157: PUSH
59158: LD_EXP 64
59162: PUSH
59163: LD_VAR 0 2
59167: ARRAY
59168: PUSH
59169: LD_EXP 93
59173: PUSH
59174: LD_VAR 0 2
59178: ARRAY
59179: UNION
59180: PPUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 25
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 25
59196: PUSH
59197: LD_INT 16
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: PPUSH
59212: CALL_OW 72
59216: PUSH
59217: LD_EXP 67
59221: PUSH
59222: LD_VAR 0 2
59226: ARRAY
59227: PUSH
59228: LD_INT 1
59230: ARRAY
59231: PUSH
59232: LD_EXP 67
59236: PUSH
59237: LD_VAR 0 2
59241: ARRAY
59242: PUSH
59243: LD_INT 2
59245: ARRAY
59246: UNION
59247: DIFF
59248: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
59249: LD_ADDR_VAR 0 6
59253: PUSH
59254: LD_EXP 83
59258: PUSH
59259: LD_VAR 0 2
59263: ARRAY
59264: PPUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 34
59270: PUSH
59271: LD_INT 13
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 34
59280: PUSH
59281: LD_INT 52
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: PPUSH
59293: CALL_OW 72
59297: ST_TO_ADDR
// if cranes then
59298: LD_VAR 0 6
59302: IFFALSE 59438
// begin for j in cranes do
59304: LD_ADDR_VAR 0 3
59308: PUSH
59309: LD_VAR 0 6
59313: PUSH
59314: FOR_IN
59315: IFFALSE 59436
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
59317: LD_VAR 0 3
59321: PPUSH
59322: CALL_OW 256
59326: PUSH
59327: LD_INT 500
59329: GREATEREQUAL
59330: PUSH
59331: LD_VAR 0 3
59335: PPUSH
59336: CALL_OW 314
59340: NOT
59341: AND
59342: IFFALSE 59376
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
59344: LD_VAR 0 3
59348: PPUSH
59349: LD_EXP 65
59353: PUSH
59354: LD_VAR 0 2
59358: ARRAY
59359: PPUSH
59360: LD_VAR 0 3
59364: PPUSH
59365: CALL_OW 74
59369: PPUSH
59370: CALL_OW 130
59374: GO 59434
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
59376: LD_VAR 0 3
59380: PPUSH
59381: CALL_OW 256
59385: PUSH
59386: LD_INT 500
59388: LESS
59389: PUSH
59390: LD_VAR 0 3
59394: PPUSH
59395: LD_EXP 88
59399: PUSH
59400: LD_VAR 0 2
59404: ARRAY
59405: PPUSH
59406: CALL_OW 308
59410: NOT
59411: AND
59412: IFFALSE 59434
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59414: LD_VAR 0 3
59418: PPUSH
59419: LD_EXP 88
59423: PUSH
59424: LD_VAR 0 2
59428: ARRAY
59429: PPUSH
59430: CALL_OW 113
59434: GO 59314
59436: POP
59437: POP
// end ; if tmp > 3 then
59438: LD_VAR 0 5
59442: PUSH
59443: LD_INT 3
59445: GREATER
59446: IFFALSE 59466
// tmp := ShrinkArray ( tmp , 4 ) ;
59448: LD_ADDR_VAR 0 5
59452: PUSH
59453: LD_VAR 0 5
59457: PPUSH
59458: LD_INT 4
59460: PPUSH
59461: CALL 49638 0 2
59465: ST_TO_ADDR
// if not tmp then
59466: LD_VAR 0 5
59470: NOT
59471: IFFALSE 59475
// continue ;
59473: GO 58931
// for j in tmp do
59475: LD_ADDR_VAR 0 3
59479: PUSH
59480: LD_VAR 0 5
59484: PUSH
59485: FOR_IN
59486: IFFALSE 59745
// begin if IsInUnit ( j ) then
59488: LD_VAR 0 3
59492: PPUSH
59493: CALL_OW 310
59497: IFFALSE 59508
// ComExitBuilding ( j ) ;
59499: LD_VAR 0 3
59503: PPUSH
59504: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
59508: LD_VAR 0 3
59512: PUSH
59513: LD_EXP 66
59517: PUSH
59518: LD_VAR 0 2
59522: ARRAY
59523: IN
59524: NOT
59525: IFFALSE 59583
// begin SetTag ( j , 101 ) ;
59527: LD_VAR 0 3
59531: PPUSH
59532: LD_INT 101
59534: PPUSH
59535: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
59539: LD_ADDR_EXP 66
59543: PUSH
59544: LD_EXP 66
59548: PPUSH
59549: LD_VAR 0 2
59553: PUSH
59554: LD_EXP 66
59558: PUSH
59559: LD_VAR 0 2
59563: ARRAY
59564: PUSH
59565: LD_INT 1
59567: PLUS
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PPUSH
59573: LD_VAR 0 3
59577: PPUSH
59578: CALL 18412 0 3
59582: ST_TO_ADDR
// end ; wait ( 1 ) ;
59583: LD_INT 1
59585: PPUSH
59586: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
59590: LD_ADDR_VAR 0 7
59594: PUSH
59595: LD_EXP 65
59599: PUSH
59600: LD_VAR 0 2
59604: ARRAY
59605: ST_TO_ADDR
// if mc_scan [ i ] then
59606: LD_EXP 87
59610: PUSH
59611: LD_VAR 0 2
59615: ARRAY
59616: IFFALSE 59678
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
59618: LD_ADDR_VAR 0 7
59622: PUSH
59623: LD_EXP 65
59627: PUSH
59628: LD_VAR 0 2
59632: ARRAY
59633: PPUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 30
59639: PUSH
59640: LD_INT 32
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 30
59649: PUSH
59650: LD_INT 33
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 30
59659: PUSH
59660: LD_INT 31
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: PPUSH
59673: CALL_OW 72
59677: ST_TO_ADDR
// if not to_repair_tmp then
59678: LD_VAR 0 7
59682: NOT
59683: IFFALSE 59687
// continue ;
59685: GO 59485
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
59687: LD_ADDR_VAR 0 8
59691: PUSH
59692: LD_VAR 0 7
59696: PPUSH
59697: LD_VAR 0 3
59701: PPUSH
59702: CALL_OW 74
59706: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
59707: LD_VAR 0 8
59711: PPUSH
59712: LD_INT 16
59714: PPUSH
59715: CALL 21005 0 2
59719: PUSH
59720: LD_INT 4
59722: ARRAY
59723: PUSH
59724: LD_INT 5
59726: LESS
59727: IFFALSE 59743
// ComRepairBuilding ( j , to_repair ) ;
59729: LD_VAR 0 3
59733: PPUSH
59734: LD_VAR 0 8
59738: PPUSH
59739: CALL_OW 130
// end ;
59743: GO 59485
59745: POP
59746: POP
// end ;
59747: GO 58931
59749: POP
59750: POP
// end ;
59751: LD_VAR 0 1
59755: RET
// export function MC_Heal ; var i , j , tmp ; begin
59756: LD_INT 0
59758: PPUSH
59759: PPUSH
59760: PPUSH
59761: PPUSH
// if not mc_bases then
59762: LD_EXP 64
59766: NOT
59767: IFFALSE 59771
// exit ;
59769: GO 60173
// for i = 1 to mc_bases do
59771: LD_ADDR_VAR 0 2
59775: PUSH
59776: DOUBLE
59777: LD_INT 1
59779: DEC
59780: ST_TO_ADDR
59781: LD_EXP 64
59785: PUSH
59786: FOR_TO
59787: IFFALSE 60171
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
59789: LD_EXP 67
59793: PUSH
59794: LD_VAR 0 2
59798: ARRAY
59799: PUSH
59800: LD_INT 1
59802: ARRAY
59803: NOT
59804: PUSH
59805: LD_EXP 67
59809: PUSH
59810: LD_VAR 0 2
59814: ARRAY
59815: PUSH
59816: LD_INT 2
59818: ARRAY
59819: NOT
59820: AND
59821: IFFALSE 59859
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
59823: LD_ADDR_EXP 68
59827: PUSH
59828: LD_EXP 68
59832: PPUSH
59833: LD_VAR 0 2
59837: PPUSH
59838: EMPTY
59839: PPUSH
59840: CALL_OW 1
59844: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
59845: LD_VAR 0 2
59849: PPUSH
59850: LD_INT 102
59852: PPUSH
59853: CALL 54020 0 2
// continue ;
59857: GO 59786
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59859: LD_ADDR_VAR 0 4
59863: PUSH
59864: LD_EXP 64
59868: PUSH
59869: LD_VAR 0 2
59873: ARRAY
59874: PPUSH
59875: LD_INT 25
59877: PUSH
59878: LD_INT 4
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PPUSH
59885: CALL_OW 72
59889: ST_TO_ADDR
// if not tmp then
59890: LD_VAR 0 4
59894: NOT
59895: IFFALSE 59899
// continue ;
59897: GO 59786
// if mc_taming [ i ] then
59899: LD_EXP 95
59903: PUSH
59904: LD_VAR 0 2
59908: ARRAY
59909: IFFALSE 59933
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59911: LD_ADDR_EXP 95
59915: PUSH
59916: LD_EXP 95
59920: PPUSH
59921: LD_VAR 0 2
59925: PPUSH
59926: EMPTY
59927: PPUSH
59928: CALL_OW 1
59932: ST_TO_ADDR
// for j in tmp do
59933: LD_ADDR_VAR 0 3
59937: PUSH
59938: LD_VAR 0 4
59942: PUSH
59943: FOR_IN
59944: IFFALSE 60167
// begin if IsInUnit ( j ) then
59946: LD_VAR 0 3
59950: PPUSH
59951: CALL_OW 310
59955: IFFALSE 59966
// ComExitBuilding ( j ) ;
59957: LD_VAR 0 3
59961: PPUSH
59962: CALL_OW 122
// if not j in mc_healers [ i ] then
59966: LD_VAR 0 3
59970: PUSH
59971: LD_EXP 68
59975: PUSH
59976: LD_VAR 0 2
59980: ARRAY
59981: IN
59982: NOT
59983: IFFALSE 60029
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
59985: LD_ADDR_EXP 68
59989: PUSH
59990: LD_EXP 68
59994: PPUSH
59995: LD_VAR 0 2
59999: PUSH
60000: LD_EXP 68
60004: PUSH
60005: LD_VAR 0 2
60009: ARRAY
60010: PUSH
60011: LD_INT 1
60013: PLUS
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PPUSH
60019: LD_VAR 0 3
60023: PPUSH
60024: CALL 18412 0 3
60028: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
60029: LD_VAR 0 3
60033: PPUSH
60034: CALL_OW 110
60038: PUSH
60039: LD_INT 102
60041: NONEQUAL
60042: IFFALSE 60056
// SetTag ( j , 102 ) ;
60044: LD_VAR 0 3
60048: PPUSH
60049: LD_INT 102
60051: PPUSH
60052: CALL_OW 109
// Wait ( 3 ) ;
60056: LD_INT 3
60058: PPUSH
60059: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
60063: LD_EXP 67
60067: PUSH
60068: LD_VAR 0 2
60072: ARRAY
60073: PUSH
60074: LD_INT 1
60076: ARRAY
60077: IFFALSE 60109
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
60079: LD_VAR 0 3
60083: PPUSH
60084: LD_EXP 67
60088: PUSH
60089: LD_VAR 0 2
60093: ARRAY
60094: PUSH
60095: LD_INT 1
60097: ARRAY
60098: PUSH
60099: LD_INT 1
60101: ARRAY
60102: PPUSH
60103: CALL_OW 128
60107: GO 60165
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
60109: LD_VAR 0 3
60113: PPUSH
60114: CALL_OW 314
60118: NOT
60119: PUSH
60120: LD_EXP 67
60124: PUSH
60125: LD_VAR 0 2
60129: ARRAY
60130: PUSH
60131: LD_INT 2
60133: ARRAY
60134: AND
60135: IFFALSE 60165
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
60137: LD_VAR 0 3
60141: PPUSH
60142: LD_EXP 67
60146: PUSH
60147: LD_VAR 0 2
60151: ARRAY
60152: PUSH
60153: LD_INT 2
60155: ARRAY
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PPUSH
60161: CALL_OW 128
// end ;
60165: GO 59943
60167: POP
60168: POP
// end ;
60169: GO 59786
60171: POP
60172: POP
// end ;
60173: LD_VAR 0 1
60177: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
60178: LD_INT 0
60180: PPUSH
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
// if not mc_bases then
60185: LD_EXP 64
60189: NOT
60190: IFFALSE 60194
// exit ;
60192: GO 61337
// for i = 1 to mc_bases do
60194: LD_ADDR_VAR 0 2
60198: PUSH
60199: DOUBLE
60200: LD_INT 1
60202: DEC
60203: ST_TO_ADDR
60204: LD_EXP 64
60208: PUSH
60209: FOR_TO
60210: IFFALSE 61335
// begin if mc_scan [ i ] then
60212: LD_EXP 87
60216: PUSH
60217: LD_VAR 0 2
60221: ARRAY
60222: IFFALSE 60226
// continue ;
60224: GO 60209
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
60226: LD_EXP 69
60230: PUSH
60231: LD_VAR 0 2
60235: ARRAY
60236: NOT
60237: PUSH
60238: LD_EXP 71
60242: PUSH
60243: LD_VAR 0 2
60247: ARRAY
60248: NOT
60249: AND
60250: PUSH
60251: LD_EXP 70
60255: PUSH
60256: LD_VAR 0 2
60260: ARRAY
60261: AND
60262: IFFALSE 60300
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
60264: LD_ADDR_EXP 70
60268: PUSH
60269: LD_EXP 70
60273: PPUSH
60274: LD_VAR 0 2
60278: PPUSH
60279: EMPTY
60280: PPUSH
60281: CALL_OW 1
60285: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
60286: LD_VAR 0 2
60290: PPUSH
60291: LD_INT 103
60293: PPUSH
60294: CALL 54020 0 2
// continue ;
60298: GO 60209
// end ; if mc_construct_list [ i ] then
60300: LD_EXP 71
60304: PUSH
60305: LD_VAR 0 2
60309: ARRAY
60310: IFFALSE 60530
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60312: LD_ADDR_VAR 0 4
60316: PUSH
60317: LD_EXP 64
60321: PUSH
60322: LD_VAR 0 2
60326: ARRAY
60327: PPUSH
60328: LD_INT 25
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PPUSH
60338: CALL_OW 72
60342: PUSH
60343: LD_EXP 66
60347: PUSH
60348: LD_VAR 0 2
60352: ARRAY
60353: DIFF
60354: ST_TO_ADDR
// if not tmp then
60355: LD_VAR 0 4
60359: NOT
60360: IFFALSE 60364
// continue ;
60362: GO 60209
// for j in tmp do
60364: LD_ADDR_VAR 0 3
60368: PUSH
60369: LD_VAR 0 4
60373: PUSH
60374: FOR_IN
60375: IFFALSE 60526
// begin if not mc_builders [ i ] then
60377: LD_EXP 70
60381: PUSH
60382: LD_VAR 0 2
60386: ARRAY
60387: NOT
60388: IFFALSE 60446
// begin SetTag ( j , 103 ) ;
60390: LD_VAR 0 3
60394: PPUSH
60395: LD_INT 103
60397: PPUSH
60398: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60402: LD_ADDR_EXP 70
60406: PUSH
60407: LD_EXP 70
60411: PPUSH
60412: LD_VAR 0 2
60416: PUSH
60417: LD_EXP 70
60421: PUSH
60422: LD_VAR 0 2
60426: ARRAY
60427: PUSH
60428: LD_INT 1
60430: PLUS
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PPUSH
60436: LD_VAR 0 3
60440: PPUSH
60441: CALL 18412 0 3
60445: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60446: LD_VAR 0 3
60450: PPUSH
60451: CALL_OW 310
60455: IFFALSE 60466
// ComExitBuilding ( j ) ;
60457: LD_VAR 0 3
60461: PPUSH
60462: CALL_OW 122
// wait ( 3 ) ;
60466: LD_INT 3
60468: PPUSH
60469: CALL_OW 67
// if not mc_construct_list [ i ] then
60473: LD_EXP 71
60477: PUSH
60478: LD_VAR 0 2
60482: ARRAY
60483: NOT
60484: IFFALSE 60488
// break ;
60486: GO 60526
// if not HasTask ( j ) then
60488: LD_VAR 0 3
60492: PPUSH
60493: CALL_OW 314
60497: NOT
60498: IFFALSE 60524
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
60500: LD_VAR 0 3
60504: PPUSH
60505: LD_EXP 71
60509: PUSH
60510: LD_VAR 0 2
60514: ARRAY
60515: PUSH
60516: LD_INT 1
60518: ARRAY
60519: PPUSH
60520: CALL 21263 0 2
// end ;
60524: GO 60374
60526: POP
60527: POP
// end else
60528: GO 61333
// if mc_build_list [ i ] then
60530: LD_EXP 69
60534: PUSH
60535: LD_VAR 0 2
60539: ARRAY
60540: IFFALSE 61333
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60542: LD_ADDR_VAR 0 5
60546: PUSH
60547: LD_EXP 64
60551: PUSH
60552: LD_VAR 0 2
60556: ARRAY
60557: PPUSH
60558: LD_INT 2
60560: PUSH
60561: LD_INT 30
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 30
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: PPUSH
60586: CALL_OW 72
60590: ST_TO_ADDR
// if depot then
60591: LD_VAR 0 5
60595: IFFALSE 60613
// depot := depot [ 1 ] else
60597: LD_ADDR_VAR 0 5
60601: PUSH
60602: LD_VAR 0 5
60606: PUSH
60607: LD_INT 1
60609: ARRAY
60610: ST_TO_ADDR
60611: GO 60621
// depot := 0 ;
60613: LD_ADDR_VAR 0 5
60617: PUSH
60618: LD_INT 0
60620: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
60621: LD_EXP 69
60625: PUSH
60626: LD_VAR 0 2
60630: ARRAY
60631: PUSH
60632: LD_INT 1
60634: ARRAY
60635: PUSH
60636: LD_INT 1
60638: ARRAY
60639: PPUSH
60640: CALL 21093 0 1
60644: PUSH
60645: LD_EXP 64
60649: PUSH
60650: LD_VAR 0 2
60654: ARRAY
60655: PPUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 30
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 30
60671: PUSH
60672: LD_INT 3
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: PPUSH
60684: CALL_OW 72
60688: NOT
60689: AND
60690: IFFALSE 60795
// begin for j = 1 to mc_build_list [ i ] do
60692: LD_ADDR_VAR 0 3
60696: PUSH
60697: DOUBLE
60698: LD_INT 1
60700: DEC
60701: ST_TO_ADDR
60702: LD_EXP 69
60706: PUSH
60707: LD_VAR 0 2
60711: ARRAY
60712: PUSH
60713: FOR_TO
60714: IFFALSE 60793
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
60716: LD_EXP 69
60720: PUSH
60721: LD_VAR 0 2
60725: ARRAY
60726: PUSH
60727: LD_VAR 0 3
60731: ARRAY
60732: PUSH
60733: LD_INT 1
60735: ARRAY
60736: PUSH
60737: LD_INT 2
60739: EQUAL
60740: IFFALSE 60791
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
60742: LD_ADDR_EXP 69
60746: PUSH
60747: LD_EXP 69
60751: PPUSH
60752: LD_VAR 0 2
60756: PPUSH
60757: LD_EXP 69
60761: PUSH
60762: LD_VAR 0 2
60766: ARRAY
60767: PPUSH
60768: LD_VAR 0 3
60772: PPUSH
60773: LD_INT 1
60775: PPUSH
60776: LD_INT 0
60778: PPUSH
60779: CALL 17830 0 4
60783: PPUSH
60784: CALL_OW 1
60788: ST_TO_ADDR
// break ;
60789: GO 60793
// end ;
60791: GO 60713
60793: POP
60794: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
60795: LD_EXP 69
60799: PUSH
60800: LD_VAR 0 2
60804: ARRAY
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: PUSH
60810: LD_INT 1
60812: ARRAY
60813: PUSH
60814: LD_INT 0
60816: EQUAL
60817: PUSH
60818: LD_VAR 0 5
60822: PUSH
60823: LD_VAR 0 5
60827: PPUSH
60828: LD_EXP 69
60832: PUSH
60833: LD_VAR 0 2
60837: ARRAY
60838: PUSH
60839: LD_INT 1
60841: ARRAY
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PPUSH
60847: LD_EXP 69
60851: PUSH
60852: LD_VAR 0 2
60856: ARRAY
60857: PUSH
60858: LD_INT 1
60860: ARRAY
60861: PUSH
60862: LD_INT 2
60864: ARRAY
60865: PPUSH
60866: LD_EXP 69
60870: PUSH
60871: LD_VAR 0 2
60875: ARRAY
60876: PUSH
60877: LD_INT 1
60879: ARRAY
60880: PUSH
60881: LD_INT 3
60883: ARRAY
60884: PPUSH
60885: LD_EXP 69
60889: PUSH
60890: LD_VAR 0 2
60894: ARRAY
60895: PUSH
60896: LD_INT 1
60898: ARRAY
60899: PUSH
60900: LD_INT 4
60902: ARRAY
60903: PPUSH
60904: CALL 25827 0 5
60908: AND
60909: OR
60910: IFFALSE 61191
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60912: LD_ADDR_VAR 0 4
60916: PUSH
60917: LD_EXP 64
60921: PUSH
60922: LD_VAR 0 2
60926: ARRAY
60927: PPUSH
60928: LD_INT 25
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PPUSH
60938: CALL_OW 72
60942: PUSH
60943: LD_EXP 66
60947: PUSH
60948: LD_VAR 0 2
60952: ARRAY
60953: DIFF
60954: ST_TO_ADDR
// if not tmp then
60955: LD_VAR 0 4
60959: NOT
60960: IFFALSE 60964
// continue ;
60962: GO 60209
// for j in tmp do
60964: LD_ADDR_VAR 0 3
60968: PUSH
60969: LD_VAR 0 4
60973: PUSH
60974: FOR_IN
60975: IFFALSE 61187
// begin if not mc_builders [ i ] then
60977: LD_EXP 70
60981: PUSH
60982: LD_VAR 0 2
60986: ARRAY
60987: NOT
60988: IFFALSE 61046
// begin SetTag ( j , 103 ) ;
60990: LD_VAR 0 3
60994: PPUSH
60995: LD_INT 103
60997: PPUSH
60998: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
61002: LD_ADDR_EXP 70
61006: PUSH
61007: LD_EXP 70
61011: PPUSH
61012: LD_VAR 0 2
61016: PUSH
61017: LD_EXP 70
61021: PUSH
61022: LD_VAR 0 2
61026: ARRAY
61027: PUSH
61028: LD_INT 1
61030: PLUS
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PPUSH
61036: LD_VAR 0 3
61040: PPUSH
61041: CALL 18412 0 3
61045: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
61046: LD_VAR 0 3
61050: PPUSH
61051: CALL_OW 310
61055: IFFALSE 61066
// ComExitBuilding ( j ) ;
61057: LD_VAR 0 3
61061: PPUSH
61062: CALL_OW 122
// wait ( 3 ) ;
61066: LD_INT 3
61068: PPUSH
61069: CALL_OW 67
// if not mc_build_list [ i ] then
61073: LD_EXP 69
61077: PUSH
61078: LD_VAR 0 2
61082: ARRAY
61083: NOT
61084: IFFALSE 61088
// break ;
61086: GO 61187
// if not HasTask ( j ) then
61088: LD_VAR 0 3
61092: PPUSH
61093: CALL_OW 314
61097: NOT
61098: IFFALSE 61185
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
61100: LD_VAR 0 3
61104: PPUSH
61105: LD_EXP 69
61109: PUSH
61110: LD_VAR 0 2
61114: ARRAY
61115: PUSH
61116: LD_INT 1
61118: ARRAY
61119: PUSH
61120: LD_INT 1
61122: ARRAY
61123: PPUSH
61124: LD_EXP 69
61128: PUSH
61129: LD_VAR 0 2
61133: ARRAY
61134: PUSH
61135: LD_INT 1
61137: ARRAY
61138: PUSH
61139: LD_INT 2
61141: ARRAY
61142: PPUSH
61143: LD_EXP 69
61147: PUSH
61148: LD_VAR 0 2
61152: ARRAY
61153: PUSH
61154: LD_INT 1
61156: ARRAY
61157: PUSH
61158: LD_INT 3
61160: ARRAY
61161: PPUSH
61162: LD_EXP 69
61166: PUSH
61167: LD_VAR 0 2
61171: ARRAY
61172: PUSH
61173: LD_INT 1
61175: ARRAY
61176: PUSH
61177: LD_INT 4
61179: ARRAY
61180: PPUSH
61181: CALL_OW 145
// end ;
61185: GO 60974
61187: POP
61188: POP
// end else
61189: GO 61333
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
61191: LD_EXP 64
61195: PUSH
61196: LD_VAR 0 2
61200: ARRAY
61201: PPUSH
61202: LD_EXP 69
61206: PUSH
61207: LD_VAR 0 2
61211: ARRAY
61212: PUSH
61213: LD_INT 1
61215: ARRAY
61216: PUSH
61217: LD_INT 1
61219: ARRAY
61220: PPUSH
61221: LD_EXP 69
61225: PUSH
61226: LD_VAR 0 2
61230: ARRAY
61231: PUSH
61232: LD_INT 1
61234: ARRAY
61235: PUSH
61236: LD_INT 2
61238: ARRAY
61239: PPUSH
61240: LD_EXP 69
61244: PUSH
61245: LD_VAR 0 2
61249: ARRAY
61250: PUSH
61251: LD_INT 1
61253: ARRAY
61254: PUSH
61255: LD_INT 3
61257: ARRAY
61258: PPUSH
61259: LD_EXP 69
61263: PUSH
61264: LD_VAR 0 2
61268: ARRAY
61269: PUSH
61270: LD_INT 1
61272: ARRAY
61273: PUSH
61274: LD_INT 4
61276: ARRAY
61277: PPUSH
61278: CALL 25163 0 5
61282: NOT
61283: IFFALSE 61333
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
61285: LD_ADDR_EXP 69
61289: PUSH
61290: LD_EXP 69
61294: PPUSH
61295: LD_VAR 0 2
61299: PPUSH
61300: LD_EXP 69
61304: PUSH
61305: LD_VAR 0 2
61309: ARRAY
61310: PPUSH
61311: LD_INT 1
61313: PPUSH
61314: LD_INT 1
61316: NEG
61317: PPUSH
61318: LD_INT 0
61320: PPUSH
61321: CALL 17830 0 4
61325: PPUSH
61326: CALL_OW 1
61330: ST_TO_ADDR
// continue ;
61331: GO 60209
// end ; end ; end ;
61333: GO 60209
61335: POP
61336: POP
// end ;
61337: LD_VAR 0 1
61341: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
61342: LD_INT 0
61344: PPUSH
61345: PPUSH
61346: PPUSH
61347: PPUSH
61348: PPUSH
61349: PPUSH
// if not mc_bases then
61350: LD_EXP 64
61354: NOT
61355: IFFALSE 61359
// exit ;
61357: GO 61786
// for i = 1 to mc_bases do
61359: LD_ADDR_VAR 0 2
61363: PUSH
61364: DOUBLE
61365: LD_INT 1
61367: DEC
61368: ST_TO_ADDR
61369: LD_EXP 64
61373: PUSH
61374: FOR_TO
61375: IFFALSE 61784
// begin tmp := mc_build_upgrade [ i ] ;
61377: LD_ADDR_VAR 0 4
61381: PUSH
61382: LD_EXP 96
61386: PUSH
61387: LD_VAR 0 2
61391: ARRAY
61392: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
61393: LD_ADDR_VAR 0 6
61397: PUSH
61398: LD_EXP 97
61402: PUSH
61403: LD_VAR 0 2
61407: ARRAY
61408: PPUSH
61409: LD_INT 2
61411: PUSH
61412: LD_INT 30
61414: PUSH
61415: LD_INT 6
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 30
61424: PUSH
61425: LD_INT 7
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: PPUSH
61437: CALL_OW 72
61441: ST_TO_ADDR
// if not tmp and not lab then
61442: LD_VAR 0 4
61446: NOT
61447: PUSH
61448: LD_VAR 0 6
61452: NOT
61453: AND
61454: IFFALSE 61458
// continue ;
61456: GO 61374
// if tmp then
61458: LD_VAR 0 4
61462: IFFALSE 61582
// for j in tmp do
61464: LD_ADDR_VAR 0 3
61468: PUSH
61469: LD_VAR 0 4
61473: PUSH
61474: FOR_IN
61475: IFFALSE 61580
// begin if UpgradeCost ( j ) then
61477: LD_VAR 0 3
61481: PPUSH
61482: CALL 24823 0 1
61486: IFFALSE 61578
// begin ComUpgrade ( j ) ;
61488: LD_VAR 0 3
61492: PPUSH
61493: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
61497: LD_ADDR_EXP 96
61501: PUSH
61502: LD_EXP 96
61506: PPUSH
61507: LD_VAR 0 2
61511: PPUSH
61512: LD_EXP 96
61516: PUSH
61517: LD_VAR 0 2
61521: ARRAY
61522: PUSH
61523: LD_VAR 0 3
61527: DIFF
61528: PPUSH
61529: CALL_OW 1
61533: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61534: LD_ADDR_EXP 71
61538: PUSH
61539: LD_EXP 71
61543: PPUSH
61544: LD_VAR 0 2
61548: PUSH
61549: LD_EXP 71
61553: PUSH
61554: LD_VAR 0 2
61558: ARRAY
61559: PUSH
61560: LD_INT 1
61562: PLUS
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PPUSH
61568: LD_VAR 0 3
61572: PPUSH
61573: CALL 18412 0 3
61577: ST_TO_ADDR
// end ; end ;
61578: GO 61474
61580: POP
61581: POP
// if not lab or not mc_lab_upgrade [ i ] then
61582: LD_VAR 0 6
61586: NOT
61587: PUSH
61588: LD_EXP 98
61592: PUSH
61593: LD_VAR 0 2
61597: ARRAY
61598: NOT
61599: OR
61600: IFFALSE 61604
// continue ;
61602: GO 61374
// for j in lab do
61604: LD_ADDR_VAR 0 3
61608: PUSH
61609: LD_VAR 0 6
61613: PUSH
61614: FOR_IN
61615: IFFALSE 61780
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
61617: LD_VAR 0 3
61621: PPUSH
61622: CALL_OW 266
61626: PUSH
61627: LD_INT 6
61629: PUSH
61630: LD_INT 7
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: IN
61637: PUSH
61638: LD_VAR 0 3
61642: PPUSH
61643: CALL_OW 461
61647: PUSH
61648: LD_INT 1
61650: NONEQUAL
61651: AND
61652: IFFALSE 61778
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
61654: LD_VAR 0 3
61658: PPUSH
61659: LD_EXP 98
61663: PUSH
61664: LD_VAR 0 2
61668: ARRAY
61669: PUSH
61670: LD_INT 1
61672: ARRAY
61673: PPUSH
61674: CALL 25028 0 2
61678: IFFALSE 61778
// begin ComCancel ( j ) ;
61680: LD_VAR 0 3
61684: PPUSH
61685: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
61689: LD_VAR 0 3
61693: PPUSH
61694: LD_EXP 98
61698: PUSH
61699: LD_VAR 0 2
61703: ARRAY
61704: PUSH
61705: LD_INT 1
61707: ARRAY
61708: PPUSH
61709: CALL_OW 207
// if not j in mc_construct_list [ i ] then
61713: LD_VAR 0 3
61717: PUSH
61718: LD_EXP 71
61722: PUSH
61723: LD_VAR 0 2
61727: ARRAY
61728: IN
61729: NOT
61730: IFFALSE 61776
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61732: LD_ADDR_EXP 71
61736: PUSH
61737: LD_EXP 71
61741: PPUSH
61742: LD_VAR 0 2
61746: PUSH
61747: LD_EXP 71
61751: PUSH
61752: LD_VAR 0 2
61756: ARRAY
61757: PUSH
61758: LD_INT 1
61760: PLUS
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PPUSH
61766: LD_VAR 0 3
61770: PPUSH
61771: CALL 18412 0 3
61775: ST_TO_ADDR
// break ;
61776: GO 61780
// end ; end ; end ;
61778: GO 61614
61780: POP
61781: POP
// end ;
61782: GO 61374
61784: POP
61785: POP
// end ;
61786: LD_VAR 0 1
61790: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
61791: LD_INT 0
61793: PPUSH
61794: PPUSH
61795: PPUSH
61796: PPUSH
61797: PPUSH
61798: PPUSH
61799: PPUSH
61800: PPUSH
61801: PPUSH
// if not mc_bases then
61802: LD_EXP 64
61806: NOT
61807: IFFALSE 61811
// exit ;
61809: GO 62216
// for i = 1 to mc_bases do
61811: LD_ADDR_VAR 0 2
61815: PUSH
61816: DOUBLE
61817: LD_INT 1
61819: DEC
61820: ST_TO_ADDR
61821: LD_EXP 64
61825: PUSH
61826: FOR_TO
61827: IFFALSE 62214
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
61829: LD_EXP 72
61833: PUSH
61834: LD_VAR 0 2
61838: ARRAY
61839: NOT
61840: PUSH
61841: LD_EXP 64
61845: PUSH
61846: LD_VAR 0 2
61850: ARRAY
61851: PPUSH
61852: LD_INT 30
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PPUSH
61862: CALL_OW 72
61866: NOT
61867: OR
61868: IFFALSE 61872
// continue ;
61870: GO 61826
// busy := false ;
61872: LD_ADDR_VAR 0 8
61876: PUSH
61877: LD_INT 0
61879: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61880: LD_ADDR_VAR 0 4
61884: PUSH
61885: LD_EXP 64
61889: PUSH
61890: LD_VAR 0 2
61894: ARRAY
61895: PPUSH
61896: LD_INT 30
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PPUSH
61906: CALL_OW 72
61910: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
61911: LD_ADDR_VAR 0 6
61915: PUSH
61916: LD_EXP 72
61920: PUSH
61921: LD_VAR 0 2
61925: ARRAY
61926: PPUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 30
61932: PUSH
61933: LD_INT 32
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 30
61942: PUSH
61943: LD_INT 33
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: PPUSH
61955: CALL_OW 72
61959: ST_TO_ADDR
// if not t then
61960: LD_VAR 0 6
61964: NOT
61965: IFFALSE 61969
// continue ;
61967: GO 61826
// for j in tmp do
61969: LD_ADDR_VAR 0 3
61973: PUSH
61974: LD_VAR 0 4
61978: PUSH
61979: FOR_IN
61980: IFFALSE 62010
// if not BuildingStatus ( j ) = bs_idle then
61982: LD_VAR 0 3
61986: PPUSH
61987: CALL_OW 461
61991: PUSH
61992: LD_INT 2
61994: EQUAL
61995: NOT
61996: IFFALSE 62008
// begin busy := true ;
61998: LD_ADDR_VAR 0 8
62002: PUSH
62003: LD_INT 1
62005: ST_TO_ADDR
// break ;
62006: GO 62010
// end ;
62008: GO 61979
62010: POP
62011: POP
// if busy then
62012: LD_VAR 0 8
62016: IFFALSE 62020
// continue ;
62018: GO 61826
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
62020: LD_ADDR_VAR 0 7
62024: PUSH
62025: LD_VAR 0 6
62029: PPUSH
62030: LD_INT 35
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PPUSH
62040: CALL_OW 72
62044: ST_TO_ADDR
// if tw then
62045: LD_VAR 0 7
62049: IFFALSE 62126
// begin tw := tw [ 1 ] ;
62051: LD_ADDR_VAR 0 7
62055: PUSH
62056: LD_VAR 0 7
62060: PUSH
62061: LD_INT 1
62063: ARRAY
62064: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
62065: LD_ADDR_VAR 0 9
62069: PUSH
62070: LD_VAR 0 7
62074: PPUSH
62075: LD_EXP 89
62079: PUSH
62080: LD_VAR 0 2
62084: ARRAY
62085: PPUSH
62086: CALL 23382 0 2
62090: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
62091: LD_EXP 103
62095: PUSH
62096: LD_VAR 0 2
62100: ARRAY
62101: IFFALSE 62124
// if not weapon in mc_allowed_tower_weapons [ i ] then
62103: LD_VAR 0 9
62107: PUSH
62108: LD_EXP 103
62112: PUSH
62113: LD_VAR 0 2
62117: ARRAY
62118: IN
62119: NOT
62120: IFFALSE 62124
// continue ;
62122: GO 61826
// end else
62124: GO 62189
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
62126: LD_ADDR_VAR 0 5
62130: PUSH
62131: LD_EXP 72
62135: PUSH
62136: LD_VAR 0 2
62140: ARRAY
62141: PPUSH
62142: LD_VAR 0 4
62146: PPUSH
62147: CALL 48884 0 2
62151: ST_TO_ADDR
// if not tmp2 then
62152: LD_VAR 0 5
62156: NOT
62157: IFFALSE 62161
// continue ;
62159: GO 61826
// tw := tmp2 [ 1 ] ;
62161: LD_ADDR_VAR 0 7
62165: PUSH
62166: LD_VAR 0 5
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
62175: LD_ADDR_VAR 0 9
62179: PUSH
62180: LD_VAR 0 5
62184: PUSH
62185: LD_INT 2
62187: ARRAY
62188: ST_TO_ADDR
// end ; if not weapon then
62189: LD_VAR 0 9
62193: NOT
62194: IFFALSE 62198
// continue ;
62196: GO 61826
// ComPlaceWeapon ( tw , weapon ) ;
62198: LD_VAR 0 7
62202: PPUSH
62203: LD_VAR 0 9
62207: PPUSH
62208: CALL_OW 148
// end ;
62212: GO 61826
62214: POP
62215: POP
// end ;
62216: LD_VAR 0 1
62220: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
62221: LD_INT 0
62223: PPUSH
62224: PPUSH
62225: PPUSH
62226: PPUSH
62227: PPUSH
62228: PPUSH
// if not mc_bases then
62229: LD_EXP 64
62233: NOT
62234: IFFALSE 62238
// exit ;
62236: GO 63014
// for i = 1 to mc_bases do
62238: LD_ADDR_VAR 0 2
62242: PUSH
62243: DOUBLE
62244: LD_INT 1
62246: DEC
62247: ST_TO_ADDR
62248: LD_EXP 64
62252: PUSH
62253: FOR_TO
62254: IFFALSE 63012
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
62256: LD_EXP 77
62260: PUSH
62261: LD_VAR 0 2
62265: ARRAY
62266: NOT
62267: PUSH
62268: LD_EXP 77
62272: PUSH
62273: LD_VAR 0 2
62277: ARRAY
62278: PUSH
62279: LD_EXP 78
62283: PUSH
62284: LD_VAR 0 2
62288: ARRAY
62289: EQUAL
62290: OR
62291: PUSH
62292: LD_EXP 87
62296: PUSH
62297: LD_VAR 0 2
62301: ARRAY
62302: OR
62303: IFFALSE 62307
// continue ;
62305: GO 62253
// if mc_miners [ i ] then
62307: LD_EXP 78
62311: PUSH
62312: LD_VAR 0 2
62316: ARRAY
62317: IFFALSE 62699
// begin for j = mc_miners [ i ] downto 1 do
62319: LD_ADDR_VAR 0 3
62323: PUSH
62324: DOUBLE
62325: LD_EXP 78
62329: PUSH
62330: LD_VAR 0 2
62334: ARRAY
62335: INC
62336: ST_TO_ADDR
62337: LD_INT 1
62339: PUSH
62340: FOR_DOWNTO
62341: IFFALSE 62697
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
62343: LD_EXP 78
62347: PUSH
62348: LD_VAR 0 2
62352: ARRAY
62353: PUSH
62354: LD_VAR 0 3
62358: ARRAY
62359: PPUSH
62360: CALL_OW 301
62364: PUSH
62365: LD_EXP 78
62369: PUSH
62370: LD_VAR 0 2
62374: ARRAY
62375: PUSH
62376: LD_VAR 0 3
62380: ARRAY
62381: PPUSH
62382: CALL_OW 257
62386: PUSH
62387: LD_INT 1
62389: NONEQUAL
62390: OR
62391: IFFALSE 62454
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
62393: LD_ADDR_VAR 0 5
62397: PUSH
62398: LD_EXP 78
62402: PUSH
62403: LD_VAR 0 2
62407: ARRAY
62408: PUSH
62409: LD_EXP 78
62413: PUSH
62414: LD_VAR 0 2
62418: ARRAY
62419: PUSH
62420: LD_VAR 0 3
62424: ARRAY
62425: DIFF
62426: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
62427: LD_ADDR_EXP 78
62431: PUSH
62432: LD_EXP 78
62436: PPUSH
62437: LD_VAR 0 2
62441: PPUSH
62442: LD_VAR 0 5
62446: PPUSH
62447: CALL_OW 1
62451: ST_TO_ADDR
// continue ;
62452: GO 62340
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
62454: LD_EXP 78
62458: PUSH
62459: LD_VAR 0 2
62463: ARRAY
62464: PUSH
62465: LD_VAR 0 3
62469: ARRAY
62470: PPUSH
62471: CALL_OW 257
62475: PUSH
62476: LD_INT 1
62478: EQUAL
62479: PUSH
62480: LD_EXP 78
62484: PUSH
62485: LD_VAR 0 2
62489: ARRAY
62490: PUSH
62491: LD_VAR 0 3
62495: ARRAY
62496: PPUSH
62497: CALL_OW 459
62501: NOT
62502: AND
62503: PUSH
62504: LD_EXP 78
62508: PUSH
62509: LD_VAR 0 2
62513: ARRAY
62514: PUSH
62515: LD_VAR 0 3
62519: ARRAY
62520: PPUSH
62521: CALL_OW 314
62525: NOT
62526: AND
62527: IFFALSE 62695
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
62529: LD_EXP 78
62533: PUSH
62534: LD_VAR 0 2
62538: ARRAY
62539: PUSH
62540: LD_VAR 0 3
62544: ARRAY
62545: PPUSH
62546: CALL_OW 310
62550: IFFALSE 62573
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
62552: LD_EXP 78
62556: PUSH
62557: LD_VAR 0 2
62561: ARRAY
62562: PUSH
62563: LD_VAR 0 3
62567: ARRAY
62568: PPUSH
62569: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
62573: LD_EXP 78
62577: PUSH
62578: LD_VAR 0 2
62582: ARRAY
62583: PUSH
62584: LD_VAR 0 3
62588: ARRAY
62589: PPUSH
62590: CALL_OW 314
62594: NOT
62595: IFFALSE 62695
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
62597: LD_EXP 78
62601: PUSH
62602: LD_VAR 0 2
62606: ARRAY
62607: PUSH
62608: LD_VAR 0 3
62612: ARRAY
62613: PPUSH
62614: LD_EXP 77
62618: PUSH
62619: LD_VAR 0 2
62623: ARRAY
62624: PUSH
62625: LD_VAR 0 3
62629: PUSH
62630: LD_EXP 77
62634: PUSH
62635: LD_VAR 0 2
62639: ARRAY
62640: MOD
62641: PUSH
62642: LD_INT 1
62644: PLUS
62645: ARRAY
62646: PUSH
62647: LD_INT 1
62649: ARRAY
62650: PPUSH
62651: LD_EXP 77
62655: PUSH
62656: LD_VAR 0 2
62660: ARRAY
62661: PUSH
62662: LD_VAR 0 3
62666: PUSH
62667: LD_EXP 77
62671: PUSH
62672: LD_VAR 0 2
62676: ARRAY
62677: MOD
62678: PUSH
62679: LD_INT 1
62681: PLUS
62682: ARRAY
62683: PUSH
62684: LD_INT 2
62686: ARRAY
62687: PPUSH
62688: LD_INT 0
62690: PPUSH
62691: CALL_OW 193
// end ; end ;
62695: GO 62340
62697: POP
62698: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
62699: LD_ADDR_VAR 0 5
62703: PUSH
62704: LD_EXP 64
62708: PUSH
62709: LD_VAR 0 2
62713: ARRAY
62714: PPUSH
62715: LD_INT 2
62717: PUSH
62718: LD_INT 30
62720: PUSH
62721: LD_INT 4
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 30
62730: PUSH
62731: LD_INT 5
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 30
62740: PUSH
62741: LD_INT 32
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: PPUSH
62754: CALL_OW 72
62758: ST_TO_ADDR
// if not tmp then
62759: LD_VAR 0 5
62763: NOT
62764: IFFALSE 62768
// continue ;
62766: GO 62253
// list := [ ] ;
62768: LD_ADDR_VAR 0 6
62772: PUSH
62773: EMPTY
62774: ST_TO_ADDR
// for j in tmp do
62775: LD_ADDR_VAR 0 3
62779: PUSH
62780: LD_VAR 0 5
62784: PUSH
62785: FOR_IN
62786: IFFALSE 62855
// begin for k in UnitsInside ( j ) do
62788: LD_ADDR_VAR 0 4
62792: PUSH
62793: LD_VAR 0 3
62797: PPUSH
62798: CALL_OW 313
62802: PUSH
62803: FOR_IN
62804: IFFALSE 62851
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
62806: LD_VAR 0 4
62810: PPUSH
62811: CALL_OW 257
62815: PUSH
62816: LD_INT 1
62818: EQUAL
62819: PUSH
62820: LD_VAR 0 4
62824: PPUSH
62825: CALL_OW 459
62829: NOT
62830: AND
62831: IFFALSE 62849
// list := list ^ k ;
62833: LD_ADDR_VAR 0 6
62837: PUSH
62838: LD_VAR 0 6
62842: PUSH
62843: LD_VAR 0 4
62847: ADD
62848: ST_TO_ADDR
62849: GO 62803
62851: POP
62852: POP
// end ;
62853: GO 62785
62855: POP
62856: POP
// list := list diff mc_miners [ i ] ;
62857: LD_ADDR_VAR 0 6
62861: PUSH
62862: LD_VAR 0 6
62866: PUSH
62867: LD_EXP 78
62871: PUSH
62872: LD_VAR 0 2
62876: ARRAY
62877: DIFF
62878: ST_TO_ADDR
// if not list then
62879: LD_VAR 0 6
62883: NOT
62884: IFFALSE 62888
// continue ;
62886: GO 62253
// k := mc_mines [ i ] - mc_miners [ i ] ;
62888: LD_ADDR_VAR 0 4
62892: PUSH
62893: LD_EXP 77
62897: PUSH
62898: LD_VAR 0 2
62902: ARRAY
62903: PUSH
62904: LD_EXP 78
62908: PUSH
62909: LD_VAR 0 2
62913: ARRAY
62914: MINUS
62915: ST_TO_ADDR
// if k > list then
62916: LD_VAR 0 4
62920: PUSH
62921: LD_VAR 0 6
62925: GREATER
62926: IFFALSE 62938
// k := list ;
62928: LD_ADDR_VAR 0 4
62932: PUSH
62933: LD_VAR 0 6
62937: ST_TO_ADDR
// for j = 1 to k do
62938: LD_ADDR_VAR 0 3
62942: PUSH
62943: DOUBLE
62944: LD_INT 1
62946: DEC
62947: ST_TO_ADDR
62948: LD_VAR 0 4
62952: PUSH
62953: FOR_TO
62954: IFFALSE 63008
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
62956: LD_ADDR_EXP 78
62960: PUSH
62961: LD_EXP 78
62965: PPUSH
62966: LD_VAR 0 2
62970: PUSH
62971: LD_EXP 78
62975: PUSH
62976: LD_VAR 0 2
62980: ARRAY
62981: PUSH
62982: LD_INT 1
62984: PLUS
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PPUSH
62990: LD_VAR 0 6
62994: PUSH
62995: LD_VAR 0 3
62999: ARRAY
63000: PPUSH
63001: CALL 18412 0 3
63005: ST_TO_ADDR
63006: GO 62953
63008: POP
63009: POP
// end ;
63010: GO 62253
63012: POP
63013: POP
// end ;
63014: LD_VAR 0 1
63018: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
63019: LD_INT 0
63021: PPUSH
63022: PPUSH
63023: PPUSH
63024: PPUSH
63025: PPUSH
63026: PPUSH
63027: PPUSH
63028: PPUSH
63029: PPUSH
63030: PPUSH
// if not mc_bases then
63031: LD_EXP 64
63035: NOT
63036: IFFALSE 63040
// exit ;
63038: GO 64790
// for i = 1 to mc_bases do
63040: LD_ADDR_VAR 0 2
63044: PUSH
63045: DOUBLE
63046: LD_INT 1
63048: DEC
63049: ST_TO_ADDR
63050: LD_EXP 64
63054: PUSH
63055: FOR_TO
63056: IFFALSE 64788
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
63058: LD_EXP 64
63062: PUSH
63063: LD_VAR 0 2
63067: ARRAY
63068: NOT
63069: PUSH
63070: LD_EXP 71
63074: PUSH
63075: LD_VAR 0 2
63079: ARRAY
63080: OR
63081: IFFALSE 63085
// continue ;
63083: GO 63055
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
63085: LD_EXP 80
63089: PUSH
63090: LD_VAR 0 2
63094: ARRAY
63095: NOT
63096: PUSH
63097: LD_EXP 81
63101: PUSH
63102: LD_VAR 0 2
63106: ARRAY
63107: AND
63108: IFFALSE 63146
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63110: LD_ADDR_EXP 81
63114: PUSH
63115: LD_EXP 81
63119: PPUSH
63120: LD_VAR 0 2
63124: PPUSH
63125: EMPTY
63126: PPUSH
63127: CALL_OW 1
63131: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
63132: LD_VAR 0 2
63136: PPUSH
63137: LD_INT 107
63139: PPUSH
63140: CALL 54020 0 2
// continue ;
63144: GO 63055
// end ; target := [ ] ;
63146: LD_ADDR_VAR 0 6
63150: PUSH
63151: EMPTY
63152: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
63153: LD_ADDR_VAR 0 3
63157: PUSH
63158: DOUBLE
63159: LD_EXP 80
63163: PUSH
63164: LD_VAR 0 2
63168: ARRAY
63169: INC
63170: ST_TO_ADDR
63171: LD_INT 1
63173: PUSH
63174: FOR_DOWNTO
63175: IFFALSE 63435
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
63177: LD_EXP 80
63181: PUSH
63182: LD_VAR 0 2
63186: ARRAY
63187: PUSH
63188: LD_VAR 0 3
63192: ARRAY
63193: PUSH
63194: LD_INT 2
63196: ARRAY
63197: PPUSH
63198: LD_EXP 80
63202: PUSH
63203: LD_VAR 0 2
63207: ARRAY
63208: PUSH
63209: LD_VAR 0 3
63213: ARRAY
63214: PUSH
63215: LD_INT 3
63217: ARRAY
63218: PPUSH
63219: CALL_OW 488
63223: PUSH
63224: LD_EXP 80
63228: PUSH
63229: LD_VAR 0 2
63233: ARRAY
63234: PUSH
63235: LD_VAR 0 3
63239: ARRAY
63240: PUSH
63241: LD_INT 2
63243: ARRAY
63244: PPUSH
63245: LD_EXP 80
63249: PUSH
63250: LD_VAR 0 2
63254: ARRAY
63255: PUSH
63256: LD_VAR 0 3
63260: ARRAY
63261: PUSH
63262: LD_INT 3
63264: ARRAY
63265: PPUSH
63266: CALL_OW 284
63270: PUSH
63271: LD_INT 0
63273: EQUAL
63274: AND
63275: IFFALSE 63330
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
63277: LD_ADDR_VAR 0 5
63281: PUSH
63282: LD_EXP 80
63286: PUSH
63287: LD_VAR 0 2
63291: ARRAY
63292: PPUSH
63293: LD_VAR 0 3
63297: PPUSH
63298: CALL_OW 3
63302: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
63303: LD_ADDR_EXP 80
63307: PUSH
63308: LD_EXP 80
63312: PPUSH
63313: LD_VAR 0 2
63317: PPUSH
63318: LD_VAR 0 5
63322: PPUSH
63323: CALL_OW 1
63327: ST_TO_ADDR
// continue ;
63328: GO 63174
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
63330: LD_EXP 64
63334: PUSH
63335: LD_VAR 0 2
63339: ARRAY
63340: PUSH
63341: LD_INT 1
63343: ARRAY
63344: PPUSH
63345: CALL_OW 255
63349: PPUSH
63350: LD_EXP 80
63354: PUSH
63355: LD_VAR 0 2
63359: ARRAY
63360: PUSH
63361: LD_VAR 0 3
63365: ARRAY
63366: PUSH
63367: LD_INT 2
63369: ARRAY
63370: PPUSH
63371: LD_EXP 80
63375: PUSH
63376: LD_VAR 0 2
63380: ARRAY
63381: PUSH
63382: LD_VAR 0 3
63386: ARRAY
63387: PUSH
63388: LD_INT 3
63390: ARRAY
63391: PPUSH
63392: LD_INT 30
63394: PPUSH
63395: CALL 19308 0 4
63399: PUSH
63400: LD_INT 4
63402: ARRAY
63403: PUSH
63404: LD_INT 0
63406: EQUAL
63407: IFFALSE 63433
// begin target := mc_crates [ i ] [ j ] ;
63409: LD_ADDR_VAR 0 6
63413: PUSH
63414: LD_EXP 80
63418: PUSH
63419: LD_VAR 0 2
63423: ARRAY
63424: PUSH
63425: LD_VAR 0 3
63429: ARRAY
63430: ST_TO_ADDR
// break ;
63431: GO 63435
// end ; end ;
63433: GO 63174
63435: POP
63436: POP
// if not target then
63437: LD_VAR 0 6
63441: NOT
63442: IFFALSE 63446
// continue ;
63444: GO 63055
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
63446: LD_ADDR_VAR 0 7
63450: PUSH
63451: LD_EXP 83
63455: PUSH
63456: LD_VAR 0 2
63460: ARRAY
63461: PPUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: LD_INT 58
63470: PUSH
63471: EMPTY
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 61
63480: PUSH
63481: EMPTY
63482: LIST
63483: PUSH
63484: LD_INT 33
63486: PUSH
63487: LD_INT 5
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 33
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: LD_INT 34
63516: PUSH
63517: LD_INT 32
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 34
63526: PUSH
63527: LD_INT 51
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 34
63536: PUSH
63537: LD_INT 12
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PPUSH
63554: CALL_OW 72
63558: ST_TO_ADDR
// if not cargo then
63559: LD_VAR 0 7
63563: NOT
63564: IFFALSE 64207
// begin if mc_crates_collector [ i ] < 5 then
63566: LD_EXP 81
63570: PUSH
63571: LD_VAR 0 2
63575: ARRAY
63576: PUSH
63577: LD_INT 5
63579: LESS
63580: IFFALSE 63946
// begin if mc_ape [ i ] then
63582: LD_EXP 93
63586: PUSH
63587: LD_VAR 0 2
63591: ARRAY
63592: IFFALSE 63639
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
63594: LD_ADDR_VAR 0 5
63598: PUSH
63599: LD_EXP 93
63603: PUSH
63604: LD_VAR 0 2
63608: ARRAY
63609: PPUSH
63610: LD_INT 25
63612: PUSH
63613: LD_INT 16
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 24
63622: PUSH
63623: LD_INT 750
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PPUSH
63634: CALL_OW 72
63638: ST_TO_ADDR
// if not tmp then
63639: LD_VAR 0 5
63643: NOT
63644: IFFALSE 63691
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
63646: LD_ADDR_VAR 0 5
63650: PUSH
63651: LD_EXP 64
63655: PUSH
63656: LD_VAR 0 2
63660: ARRAY
63661: PPUSH
63662: LD_INT 25
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 24
63674: PUSH
63675: LD_INT 750
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PPUSH
63686: CALL_OW 72
63690: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
63691: LD_EXP 93
63695: PUSH
63696: LD_VAR 0 2
63700: ARRAY
63701: PUSH
63702: LD_EXP 64
63706: PUSH
63707: LD_VAR 0 2
63711: ARRAY
63712: PPUSH
63713: LD_INT 25
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 24
63725: PUSH
63726: LD_INT 750
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PPUSH
63737: CALL_OW 72
63741: AND
63742: PUSH
63743: LD_VAR 0 5
63747: PUSH
63748: LD_INT 5
63750: LESS
63751: AND
63752: IFFALSE 63834
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
63754: LD_ADDR_VAR 0 3
63758: PUSH
63759: LD_EXP 64
63763: PUSH
63764: LD_VAR 0 2
63768: ARRAY
63769: PPUSH
63770: LD_INT 25
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 24
63782: PUSH
63783: LD_INT 750
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PPUSH
63794: CALL_OW 72
63798: PUSH
63799: FOR_IN
63800: IFFALSE 63832
// begin tmp := tmp union j ;
63802: LD_ADDR_VAR 0 5
63806: PUSH
63807: LD_VAR 0 5
63811: PUSH
63812: LD_VAR 0 3
63816: UNION
63817: ST_TO_ADDR
// if tmp >= 5 then
63818: LD_VAR 0 5
63822: PUSH
63823: LD_INT 5
63825: GREATEREQUAL
63826: IFFALSE 63830
// break ;
63828: GO 63832
// end ;
63830: GO 63799
63832: POP
63833: POP
// end ; if not tmp then
63834: LD_VAR 0 5
63838: NOT
63839: IFFALSE 63843
// continue ;
63841: GO 63055
// for j in tmp do
63843: LD_ADDR_VAR 0 3
63847: PUSH
63848: LD_VAR 0 5
63852: PUSH
63853: FOR_IN
63854: IFFALSE 63944
// if not GetTag ( j ) then
63856: LD_VAR 0 3
63860: PPUSH
63861: CALL_OW 110
63865: NOT
63866: IFFALSE 63942
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
63868: LD_ADDR_EXP 81
63872: PUSH
63873: LD_EXP 81
63877: PPUSH
63878: LD_VAR 0 2
63882: PUSH
63883: LD_EXP 81
63887: PUSH
63888: LD_VAR 0 2
63892: ARRAY
63893: PUSH
63894: LD_INT 1
63896: PLUS
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PPUSH
63902: LD_VAR 0 3
63906: PPUSH
63907: CALL 18412 0 3
63911: ST_TO_ADDR
// SetTag ( j , 107 ) ;
63912: LD_VAR 0 3
63916: PPUSH
63917: LD_INT 107
63919: PPUSH
63920: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
63924: LD_EXP 81
63928: PUSH
63929: LD_VAR 0 2
63933: ARRAY
63934: PUSH
63935: LD_INT 5
63937: GREATEREQUAL
63938: IFFALSE 63942
// break ;
63940: GO 63944
// end ;
63942: GO 63853
63944: POP
63945: POP
// end ; if mc_crates_collector [ i ] and target then
63946: LD_EXP 81
63950: PUSH
63951: LD_VAR 0 2
63955: ARRAY
63956: PUSH
63957: LD_VAR 0 6
63961: AND
63962: IFFALSE 64205
// begin if mc_crates_collector [ i ] < target [ 1 ] then
63964: LD_EXP 81
63968: PUSH
63969: LD_VAR 0 2
63973: ARRAY
63974: PUSH
63975: LD_VAR 0 6
63979: PUSH
63980: LD_INT 1
63982: ARRAY
63983: LESS
63984: IFFALSE 64004
// tmp := mc_crates_collector [ i ] else
63986: LD_ADDR_VAR 0 5
63990: PUSH
63991: LD_EXP 81
63995: PUSH
63996: LD_VAR 0 2
64000: ARRAY
64001: ST_TO_ADDR
64002: GO 64018
// tmp := target [ 1 ] ;
64004: LD_ADDR_VAR 0 5
64008: PUSH
64009: LD_VAR 0 6
64013: PUSH
64014: LD_INT 1
64016: ARRAY
64017: ST_TO_ADDR
// k := 0 ;
64018: LD_ADDR_VAR 0 4
64022: PUSH
64023: LD_INT 0
64025: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: LD_EXP 81
64035: PUSH
64036: LD_VAR 0 2
64040: ARRAY
64041: PUSH
64042: FOR_IN
64043: IFFALSE 64203
// begin k := k + 1 ;
64045: LD_ADDR_VAR 0 4
64049: PUSH
64050: LD_VAR 0 4
64054: PUSH
64055: LD_INT 1
64057: PLUS
64058: ST_TO_ADDR
// if k > tmp then
64059: LD_VAR 0 4
64063: PUSH
64064: LD_VAR 0 5
64068: GREATER
64069: IFFALSE 64073
// break ;
64071: GO 64203
// if not GetClass ( j ) in [ 2 , 16 ] then
64073: LD_VAR 0 3
64077: PPUSH
64078: CALL_OW 257
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: LD_INT 16
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: IN
64093: NOT
64094: IFFALSE 64147
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
64096: LD_ADDR_EXP 81
64100: PUSH
64101: LD_EXP 81
64105: PPUSH
64106: LD_VAR 0 2
64110: PPUSH
64111: LD_EXP 81
64115: PUSH
64116: LD_VAR 0 2
64120: ARRAY
64121: PUSH
64122: LD_VAR 0 3
64126: DIFF
64127: PPUSH
64128: CALL_OW 1
64132: ST_TO_ADDR
// SetTag ( j , 0 ) ;
64133: LD_VAR 0 3
64137: PPUSH
64138: LD_INT 0
64140: PPUSH
64141: CALL_OW 109
// continue ;
64145: GO 64042
// end ; if IsInUnit ( j ) then
64147: LD_VAR 0 3
64151: PPUSH
64152: CALL_OW 310
64156: IFFALSE 64167
// ComExitBuilding ( j ) ;
64158: LD_VAR 0 3
64162: PPUSH
64163: CALL_OW 122
// wait ( 3 ) ;
64167: LD_INT 3
64169: PPUSH
64170: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64174: LD_VAR 0 3
64178: PPUSH
64179: LD_VAR 0 6
64183: PUSH
64184: LD_INT 2
64186: ARRAY
64187: PPUSH
64188: LD_VAR 0 6
64192: PUSH
64193: LD_INT 3
64195: ARRAY
64196: PPUSH
64197: CALL_OW 117
// end ;
64201: GO 64042
64203: POP
64204: POP
// end ; end else
64205: GO 64786
// begin for j in cargo do
64207: LD_ADDR_VAR 0 3
64211: PUSH
64212: LD_VAR 0 7
64216: PUSH
64217: FOR_IN
64218: IFFALSE 64784
// begin if GetTag ( j ) <> 0 then
64220: LD_VAR 0 3
64224: PPUSH
64225: CALL_OW 110
64229: PUSH
64230: LD_INT 0
64232: NONEQUAL
64233: IFFALSE 64237
// continue ;
64235: GO 64217
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
64237: LD_VAR 0 3
64241: PPUSH
64242: CALL_OW 256
64246: PUSH
64247: LD_INT 1000
64249: LESS
64250: PUSH
64251: LD_VAR 0 3
64255: PPUSH
64256: LD_EXP 88
64260: PUSH
64261: LD_VAR 0 2
64265: ARRAY
64266: PPUSH
64267: CALL_OW 308
64271: NOT
64272: AND
64273: IFFALSE 64295
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64275: LD_VAR 0 3
64279: PPUSH
64280: LD_EXP 88
64284: PUSH
64285: LD_VAR 0 2
64289: ARRAY
64290: PPUSH
64291: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
64295: LD_VAR 0 3
64299: PPUSH
64300: CALL_OW 256
64304: PUSH
64305: LD_INT 1000
64307: LESS
64308: PUSH
64309: LD_VAR 0 3
64313: PPUSH
64314: LD_EXP 88
64318: PUSH
64319: LD_VAR 0 2
64323: ARRAY
64324: PPUSH
64325: CALL_OW 308
64329: AND
64330: IFFALSE 64334
// continue ;
64332: GO 64217
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
64334: LD_VAR 0 3
64338: PPUSH
64339: CALL_OW 262
64343: PUSH
64344: LD_INT 2
64346: EQUAL
64347: PUSH
64348: LD_VAR 0 3
64352: PPUSH
64353: CALL_OW 261
64357: PUSH
64358: LD_INT 15
64360: LESS
64361: AND
64362: IFFALSE 64366
// continue ;
64364: GO 64217
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
64366: LD_VAR 0 3
64370: PPUSH
64371: CALL_OW 262
64375: PUSH
64376: LD_INT 1
64378: EQUAL
64379: PUSH
64380: LD_VAR 0 3
64384: PPUSH
64385: CALL_OW 261
64389: PUSH
64390: LD_INT 10
64392: LESS
64393: AND
64394: IFFALSE 64723
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64396: LD_ADDR_VAR 0 8
64400: PUSH
64401: LD_EXP 64
64405: PUSH
64406: LD_VAR 0 2
64410: ARRAY
64411: PPUSH
64412: LD_INT 2
64414: PUSH
64415: LD_INT 30
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 30
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: PPUSH
64440: CALL_OW 72
64444: ST_TO_ADDR
// if not depot then
64445: LD_VAR 0 8
64449: NOT
64450: IFFALSE 64454
// continue ;
64452: GO 64217
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
64454: LD_VAR 0 3
64458: PPUSH
64459: LD_VAR 0 8
64463: PPUSH
64464: LD_VAR 0 3
64468: PPUSH
64469: CALL_OW 74
64473: PPUSH
64474: CALL_OW 296
64478: PUSH
64479: LD_INT 6
64481: LESS
64482: IFFALSE 64498
// SetFuel ( j , 100 ) else
64484: LD_VAR 0 3
64488: PPUSH
64489: LD_INT 100
64491: PPUSH
64492: CALL_OW 240
64496: GO 64723
// if GetFuel ( j ) = 0 then
64498: LD_VAR 0 3
64502: PPUSH
64503: CALL_OW 261
64507: PUSH
64508: LD_INT 0
64510: EQUAL
64511: IFFALSE 64723
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
64513: LD_ADDR_EXP 83
64517: PUSH
64518: LD_EXP 83
64522: PPUSH
64523: LD_VAR 0 2
64527: PPUSH
64528: LD_EXP 83
64532: PUSH
64533: LD_VAR 0 2
64537: ARRAY
64538: PUSH
64539: LD_VAR 0 3
64543: DIFF
64544: PPUSH
64545: CALL_OW 1
64549: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
64550: LD_VAR 0 3
64554: PPUSH
64555: CALL_OW 263
64559: PUSH
64560: LD_INT 1
64562: EQUAL
64563: IFFALSE 64579
// ComExitVehicle ( IsInUnit ( j ) ) ;
64565: LD_VAR 0 3
64569: PPUSH
64570: CALL_OW 310
64574: PPUSH
64575: CALL_OW 121
// if GetControl ( j ) = control_remote then
64579: LD_VAR 0 3
64583: PPUSH
64584: CALL_OW 263
64588: PUSH
64589: LD_INT 2
64591: EQUAL
64592: IFFALSE 64603
// ComUnlink ( j ) ;
64594: LD_VAR 0 3
64598: PPUSH
64599: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
64603: LD_ADDR_VAR 0 9
64607: PUSH
64608: LD_VAR 0 2
64612: PPUSH
64613: LD_INT 3
64615: PPUSH
64616: CALL 74076 0 2
64620: ST_TO_ADDR
// if fac then
64621: LD_VAR 0 9
64625: IFFALSE 64721
// begin for k in fac do
64627: LD_ADDR_VAR 0 4
64631: PUSH
64632: LD_VAR 0 9
64636: PUSH
64637: FOR_IN
64638: IFFALSE 64719
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
64640: LD_ADDR_VAR 0 10
64644: PUSH
64645: LD_VAR 0 9
64649: PPUSH
64650: LD_VAR 0 3
64654: PPUSH
64655: CALL_OW 265
64659: PPUSH
64660: LD_VAR 0 3
64664: PPUSH
64665: CALL_OW 262
64669: PPUSH
64670: LD_VAR 0 3
64674: PPUSH
64675: CALL_OW 263
64679: PPUSH
64680: LD_VAR 0 3
64684: PPUSH
64685: CALL_OW 264
64689: PPUSH
64690: CALL 15944 0 5
64694: ST_TO_ADDR
// if components then
64695: LD_VAR 0 10
64699: IFFALSE 64717
// begin MC_InsertProduceList ( i , components ) ;
64701: LD_VAR 0 2
64705: PPUSH
64706: LD_VAR 0 10
64710: PPUSH
64711: CALL 73621 0 2
// break ;
64715: GO 64719
// end ; end ;
64717: GO 64637
64719: POP
64720: POP
// end ; continue ;
64721: GO 64217
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
64723: LD_VAR 0 3
64727: PPUSH
64728: LD_INT 1
64730: PPUSH
64731: CALL_OW 289
64735: PUSH
64736: LD_INT 100
64738: LESS
64739: PUSH
64740: LD_VAR 0 3
64744: PPUSH
64745: CALL_OW 314
64749: NOT
64750: AND
64751: IFFALSE 64780
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64753: LD_VAR 0 3
64757: PPUSH
64758: LD_VAR 0 6
64762: PUSH
64763: LD_INT 2
64765: ARRAY
64766: PPUSH
64767: LD_VAR 0 6
64771: PUSH
64772: LD_INT 3
64774: ARRAY
64775: PPUSH
64776: CALL_OW 117
// break ;
64780: GO 64784
// end ;
64782: GO 64217
64784: POP
64785: POP
// end ; end ;
64786: GO 63055
64788: POP
64789: POP
// end ;
64790: LD_VAR 0 1
64794: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
64795: LD_INT 0
64797: PPUSH
64798: PPUSH
64799: PPUSH
64800: PPUSH
// if not mc_bases then
64801: LD_EXP 64
64805: NOT
64806: IFFALSE 64810
// exit ;
64808: GO 64971
// for i = 1 to mc_bases do
64810: LD_ADDR_VAR 0 2
64814: PUSH
64815: DOUBLE
64816: LD_INT 1
64818: DEC
64819: ST_TO_ADDR
64820: LD_EXP 64
64824: PUSH
64825: FOR_TO
64826: IFFALSE 64969
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
64828: LD_ADDR_VAR 0 4
64832: PUSH
64833: LD_EXP 83
64837: PUSH
64838: LD_VAR 0 2
64842: ARRAY
64843: PUSH
64844: LD_EXP 86
64848: PUSH
64849: LD_VAR 0 2
64853: ARRAY
64854: UNION
64855: PPUSH
64856: LD_INT 33
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PPUSH
64866: CALL_OW 72
64870: ST_TO_ADDR
// if tmp then
64871: LD_VAR 0 4
64875: IFFALSE 64967
// for j in tmp do
64877: LD_ADDR_VAR 0 3
64881: PUSH
64882: LD_VAR 0 4
64886: PUSH
64887: FOR_IN
64888: IFFALSE 64965
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
64890: LD_VAR 0 3
64894: PPUSH
64895: CALL_OW 312
64899: NOT
64900: PUSH
64901: LD_VAR 0 3
64905: PPUSH
64906: CALL_OW 256
64910: PUSH
64911: LD_INT 250
64913: GREATEREQUAL
64914: AND
64915: IFFALSE 64928
// Connect ( j ) else
64917: LD_VAR 0 3
64921: PPUSH
64922: CALL 21345 0 1
64926: GO 64963
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
64928: LD_VAR 0 3
64932: PPUSH
64933: CALL_OW 256
64937: PUSH
64938: LD_INT 250
64940: LESS
64941: PUSH
64942: LD_VAR 0 3
64946: PPUSH
64947: CALL_OW 312
64951: AND
64952: IFFALSE 64963
// ComUnlink ( j ) ;
64954: LD_VAR 0 3
64958: PPUSH
64959: CALL_OW 136
64963: GO 64887
64965: POP
64966: POP
// end ;
64967: GO 64825
64969: POP
64970: POP
// end ;
64971: LD_VAR 0 1
64975: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
64976: LD_INT 0
64978: PPUSH
64979: PPUSH
64980: PPUSH
64981: PPUSH
64982: PPUSH
// if not mc_bases then
64983: LD_EXP 64
64987: NOT
64988: IFFALSE 64992
// exit ;
64990: GO 65437
// for i = 1 to mc_bases do
64992: LD_ADDR_VAR 0 2
64996: PUSH
64997: DOUBLE
64998: LD_INT 1
65000: DEC
65001: ST_TO_ADDR
65002: LD_EXP 64
65006: PUSH
65007: FOR_TO
65008: IFFALSE 65435
// begin if not mc_produce [ i ] then
65010: LD_EXP 85
65014: PUSH
65015: LD_VAR 0 2
65019: ARRAY
65020: NOT
65021: IFFALSE 65025
// continue ;
65023: GO 65007
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65025: LD_ADDR_VAR 0 5
65029: PUSH
65030: LD_EXP 64
65034: PUSH
65035: LD_VAR 0 2
65039: ARRAY
65040: PPUSH
65041: LD_INT 30
65043: PUSH
65044: LD_INT 3
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PPUSH
65051: CALL_OW 72
65055: ST_TO_ADDR
// if not fac then
65056: LD_VAR 0 5
65060: NOT
65061: IFFALSE 65065
// continue ;
65063: GO 65007
// for j in fac do
65065: LD_ADDR_VAR 0 3
65069: PUSH
65070: LD_VAR 0 5
65074: PUSH
65075: FOR_IN
65076: IFFALSE 65431
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
65078: LD_VAR 0 3
65082: PPUSH
65083: CALL_OW 461
65087: PUSH
65088: LD_INT 2
65090: NONEQUAL
65091: PUSH
65092: LD_VAR 0 3
65096: PPUSH
65097: LD_INT 15
65099: PPUSH
65100: CALL 21005 0 2
65104: PUSH
65105: LD_INT 4
65107: ARRAY
65108: OR
65109: IFFALSE 65113
// continue ;
65111: GO 65075
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
65113: LD_VAR 0 3
65117: PPUSH
65118: LD_EXP 85
65122: PUSH
65123: LD_VAR 0 2
65127: ARRAY
65128: PUSH
65129: LD_INT 1
65131: ARRAY
65132: PUSH
65133: LD_INT 1
65135: ARRAY
65136: PPUSH
65137: LD_EXP 85
65141: PUSH
65142: LD_VAR 0 2
65146: ARRAY
65147: PUSH
65148: LD_INT 1
65150: ARRAY
65151: PUSH
65152: LD_INT 2
65154: ARRAY
65155: PPUSH
65156: LD_EXP 85
65160: PUSH
65161: LD_VAR 0 2
65165: ARRAY
65166: PUSH
65167: LD_INT 1
65169: ARRAY
65170: PUSH
65171: LD_INT 3
65173: ARRAY
65174: PPUSH
65175: LD_EXP 85
65179: PUSH
65180: LD_VAR 0 2
65184: ARRAY
65185: PUSH
65186: LD_INT 1
65188: ARRAY
65189: PUSH
65190: LD_INT 4
65192: ARRAY
65193: PPUSH
65194: CALL_OW 448
65198: PUSH
65199: LD_VAR 0 3
65203: PPUSH
65204: LD_EXP 85
65208: PUSH
65209: LD_VAR 0 2
65213: ARRAY
65214: PUSH
65215: LD_INT 1
65217: ARRAY
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PUSH
65223: LD_EXP 85
65227: PUSH
65228: LD_VAR 0 2
65232: ARRAY
65233: PUSH
65234: LD_INT 1
65236: ARRAY
65237: PUSH
65238: LD_INT 2
65240: ARRAY
65241: PUSH
65242: LD_EXP 85
65246: PUSH
65247: LD_VAR 0 2
65251: ARRAY
65252: PUSH
65253: LD_INT 1
65255: ARRAY
65256: PUSH
65257: LD_INT 3
65259: ARRAY
65260: PUSH
65261: LD_EXP 85
65265: PUSH
65266: LD_VAR 0 2
65270: ARRAY
65271: PUSH
65272: LD_INT 1
65274: ARRAY
65275: PUSH
65276: LD_INT 4
65278: ARRAY
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: PPUSH
65286: CALL 24676 0 2
65290: AND
65291: IFFALSE 65429
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
65293: LD_VAR 0 3
65297: PPUSH
65298: LD_EXP 85
65302: PUSH
65303: LD_VAR 0 2
65307: ARRAY
65308: PUSH
65309: LD_INT 1
65311: ARRAY
65312: PUSH
65313: LD_INT 1
65315: ARRAY
65316: PPUSH
65317: LD_EXP 85
65321: PUSH
65322: LD_VAR 0 2
65326: ARRAY
65327: PUSH
65328: LD_INT 1
65330: ARRAY
65331: PUSH
65332: LD_INT 2
65334: ARRAY
65335: PPUSH
65336: LD_EXP 85
65340: PUSH
65341: LD_VAR 0 2
65345: ARRAY
65346: PUSH
65347: LD_INT 1
65349: ARRAY
65350: PUSH
65351: LD_INT 3
65353: ARRAY
65354: PPUSH
65355: LD_EXP 85
65359: PUSH
65360: LD_VAR 0 2
65364: ARRAY
65365: PUSH
65366: LD_INT 1
65368: ARRAY
65369: PUSH
65370: LD_INT 4
65372: ARRAY
65373: PPUSH
65374: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
65378: LD_ADDR_VAR 0 4
65382: PUSH
65383: LD_EXP 85
65387: PUSH
65388: LD_VAR 0 2
65392: ARRAY
65393: PPUSH
65394: LD_INT 1
65396: PPUSH
65397: CALL_OW 3
65401: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
65402: LD_ADDR_EXP 85
65406: PUSH
65407: LD_EXP 85
65411: PPUSH
65412: LD_VAR 0 2
65416: PPUSH
65417: LD_VAR 0 4
65421: PPUSH
65422: CALL_OW 1
65426: ST_TO_ADDR
// break ;
65427: GO 65431
// end ; end ;
65429: GO 65075
65431: POP
65432: POP
// end ;
65433: GO 65007
65435: POP
65436: POP
// end ;
65437: LD_VAR 0 1
65441: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
65442: LD_INT 0
65444: PPUSH
65445: PPUSH
65446: PPUSH
// if not mc_bases then
65447: LD_EXP 64
65451: NOT
65452: IFFALSE 65456
// exit ;
65454: GO 65545
// for i = 1 to mc_bases do
65456: LD_ADDR_VAR 0 2
65460: PUSH
65461: DOUBLE
65462: LD_INT 1
65464: DEC
65465: ST_TO_ADDR
65466: LD_EXP 64
65470: PUSH
65471: FOR_TO
65472: IFFALSE 65543
// begin if mc_attack [ i ] then
65474: LD_EXP 84
65478: PUSH
65479: LD_VAR 0 2
65483: ARRAY
65484: IFFALSE 65541
// begin tmp := mc_attack [ i ] [ 1 ] ;
65486: LD_ADDR_VAR 0 3
65490: PUSH
65491: LD_EXP 84
65495: PUSH
65496: LD_VAR 0 2
65500: ARRAY
65501: PUSH
65502: LD_INT 1
65504: ARRAY
65505: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65506: LD_ADDR_EXP 84
65510: PUSH
65511: LD_EXP 84
65515: PPUSH
65516: LD_VAR 0 2
65520: PPUSH
65521: EMPTY
65522: PPUSH
65523: CALL_OW 1
65527: ST_TO_ADDR
// Attack ( tmp ) ;
65528: LD_VAR 0 3
65532: PPUSH
65533: CALL 92630 0 1
// exit ;
65537: POP
65538: POP
65539: GO 65545
// end ; end ;
65541: GO 65471
65543: POP
65544: POP
// end ;
65545: LD_VAR 0 1
65549: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
65550: LD_INT 0
65552: PPUSH
65553: PPUSH
65554: PPUSH
65555: PPUSH
65556: PPUSH
65557: PPUSH
65558: PPUSH
// if not mc_bases then
65559: LD_EXP 64
65563: NOT
65564: IFFALSE 65568
// exit ;
65566: GO 66150
// for i = 1 to mc_bases do
65568: LD_ADDR_VAR 0 2
65572: PUSH
65573: DOUBLE
65574: LD_INT 1
65576: DEC
65577: ST_TO_ADDR
65578: LD_EXP 64
65582: PUSH
65583: FOR_TO
65584: IFFALSE 66148
// begin if not mc_bases [ i ] then
65586: LD_EXP 64
65590: PUSH
65591: LD_VAR 0 2
65595: ARRAY
65596: NOT
65597: IFFALSE 65601
// continue ;
65599: GO 65583
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
65601: LD_ADDR_VAR 0 7
65605: PUSH
65606: LD_EXP 64
65610: PUSH
65611: LD_VAR 0 2
65615: ARRAY
65616: PUSH
65617: LD_INT 1
65619: ARRAY
65620: PPUSH
65621: CALL 15248 0 1
65625: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
65626: LD_ADDR_EXP 87
65630: PUSH
65631: LD_EXP 87
65635: PPUSH
65636: LD_VAR 0 2
65640: PPUSH
65641: LD_EXP 64
65645: PUSH
65646: LD_VAR 0 2
65650: ARRAY
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PPUSH
65656: CALL_OW 255
65660: PPUSH
65661: LD_EXP 89
65665: PUSH
65666: LD_VAR 0 2
65670: ARRAY
65671: PPUSH
65672: CALL 15213 0 2
65676: PPUSH
65677: CALL_OW 1
65681: ST_TO_ADDR
// if not mc_scan [ i ] then
65682: LD_EXP 87
65686: PUSH
65687: LD_VAR 0 2
65691: ARRAY
65692: NOT
65693: IFFALSE 65848
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65695: LD_ADDR_VAR 0 4
65699: PUSH
65700: LD_EXP 64
65704: PUSH
65705: LD_VAR 0 2
65709: ARRAY
65710: PPUSH
65711: LD_INT 2
65713: PUSH
65714: LD_INT 25
65716: PUSH
65717: LD_INT 5
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 25
65726: PUSH
65727: LD_INT 8
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 25
65736: PUSH
65737: LD_INT 9
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: PPUSH
65750: CALL_OW 72
65754: ST_TO_ADDR
// if not tmp then
65755: LD_VAR 0 4
65759: NOT
65760: IFFALSE 65764
// continue ;
65762: GO 65583
// for j in tmp do
65764: LD_ADDR_VAR 0 3
65768: PUSH
65769: LD_VAR 0 4
65773: PUSH
65774: FOR_IN
65775: IFFALSE 65846
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
65777: LD_VAR 0 3
65781: PPUSH
65782: CALL_OW 310
65786: PPUSH
65787: CALL_OW 266
65791: PUSH
65792: LD_INT 5
65794: EQUAL
65795: PUSH
65796: LD_VAR 0 3
65800: PPUSH
65801: CALL_OW 257
65805: PUSH
65806: LD_INT 1
65808: EQUAL
65809: AND
65810: PUSH
65811: LD_VAR 0 3
65815: PPUSH
65816: CALL_OW 459
65820: NOT
65821: AND
65822: PUSH
65823: LD_VAR 0 7
65827: AND
65828: IFFALSE 65844
// ComChangeProfession ( j , class ) ;
65830: LD_VAR 0 3
65834: PPUSH
65835: LD_VAR 0 7
65839: PPUSH
65840: CALL_OW 123
65844: GO 65774
65846: POP
65847: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
65848: LD_EXP 87
65852: PUSH
65853: LD_VAR 0 2
65857: ARRAY
65858: PUSH
65859: LD_EXP 86
65863: PUSH
65864: LD_VAR 0 2
65868: ARRAY
65869: NOT
65870: AND
65871: PUSH
65872: LD_EXP 64
65876: PUSH
65877: LD_VAR 0 2
65881: ARRAY
65882: PPUSH
65883: LD_INT 30
65885: PUSH
65886: LD_INT 32
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PPUSH
65893: CALL_OW 72
65897: NOT
65898: AND
65899: PUSH
65900: LD_EXP 64
65904: PUSH
65905: LD_VAR 0 2
65909: ARRAY
65910: PPUSH
65911: LD_INT 2
65913: PUSH
65914: LD_INT 30
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 30
65926: PUSH
65927: LD_INT 5
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: PPUSH
65939: CALL_OW 72
65943: NOT
65944: AND
65945: IFFALSE 66077
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65947: LD_ADDR_VAR 0 4
65951: PUSH
65952: LD_EXP 64
65956: PUSH
65957: LD_VAR 0 2
65961: ARRAY
65962: PPUSH
65963: LD_INT 2
65965: PUSH
65966: LD_INT 25
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 25
65978: PUSH
65979: LD_INT 5
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 25
65988: PUSH
65989: LD_INT 8
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 25
65998: PUSH
65999: LD_INT 9
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: PPUSH
66013: CALL_OW 72
66017: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
66018: LD_ADDR_VAR 0 4
66022: PUSH
66023: LD_VAR 0 4
66027: PUSH
66028: LD_VAR 0 4
66032: PPUSH
66033: LD_INT 18
66035: PPUSH
66036: CALL 46973 0 2
66040: DIFF
66041: ST_TO_ADDR
// if tmp then
66042: LD_VAR 0 4
66046: IFFALSE 66077
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
66048: LD_VAR 0 2
66052: PPUSH
66053: LD_VAR 0 4
66057: PPUSH
66058: LD_EXP 89
66062: PUSH
66063: LD_VAR 0 2
66067: ARRAY
66068: PPUSH
66069: CALL 97339 0 3
// exit ;
66073: POP
66074: POP
66075: GO 66150
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
66077: LD_EXP 87
66081: PUSH
66082: LD_VAR 0 2
66086: ARRAY
66087: PUSH
66088: LD_EXP 86
66092: PUSH
66093: LD_VAR 0 2
66097: ARRAY
66098: AND
66099: IFFALSE 66146
// begin tmp := mc_defender [ i ] ;
66101: LD_ADDR_VAR 0 4
66105: PUSH
66106: LD_EXP 86
66110: PUSH
66111: LD_VAR 0 2
66115: ARRAY
66116: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
66117: LD_VAR 0 2
66121: PPUSH
66122: LD_VAR 0 4
66126: PPUSH
66127: LD_EXP 87
66131: PUSH
66132: LD_VAR 0 2
66136: ARRAY
66137: PPUSH
66138: CALL 97900 0 3
// exit ;
66142: POP
66143: POP
66144: GO 66150
// end ; end ;
66146: GO 65583
66148: POP
66149: POP
// end ;
66150: LD_VAR 0 1
66154: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
66155: LD_INT 0
66157: PPUSH
66158: PPUSH
66159: PPUSH
66160: PPUSH
66161: PPUSH
66162: PPUSH
66163: PPUSH
66164: PPUSH
66165: PPUSH
66166: PPUSH
66167: PPUSH
// if not mc_bases then
66168: LD_EXP 64
66172: NOT
66173: IFFALSE 66177
// exit ;
66175: GO 67264
// for i = 1 to mc_bases do
66177: LD_ADDR_VAR 0 2
66181: PUSH
66182: DOUBLE
66183: LD_INT 1
66185: DEC
66186: ST_TO_ADDR
66187: LD_EXP 64
66191: PUSH
66192: FOR_TO
66193: IFFALSE 67262
// begin tmp := mc_lab [ i ] ;
66195: LD_ADDR_VAR 0 6
66199: PUSH
66200: LD_EXP 97
66204: PUSH
66205: LD_VAR 0 2
66209: ARRAY
66210: ST_TO_ADDR
// if not tmp then
66211: LD_VAR 0 6
66215: NOT
66216: IFFALSE 66220
// continue ;
66218: GO 66192
// idle_lab := 0 ;
66220: LD_ADDR_VAR 0 11
66224: PUSH
66225: LD_INT 0
66227: ST_TO_ADDR
// for j in tmp do
66228: LD_ADDR_VAR 0 3
66232: PUSH
66233: LD_VAR 0 6
66237: PUSH
66238: FOR_IN
66239: IFFALSE 67258
// begin researching := false ;
66241: LD_ADDR_VAR 0 10
66245: PUSH
66246: LD_INT 0
66248: ST_TO_ADDR
// side := GetSide ( j ) ;
66249: LD_ADDR_VAR 0 4
66253: PUSH
66254: LD_VAR 0 3
66258: PPUSH
66259: CALL_OW 255
66263: ST_TO_ADDR
// if not mc_tech [ side ] then
66264: LD_EXP 91
66268: PUSH
66269: LD_VAR 0 4
66273: ARRAY
66274: NOT
66275: IFFALSE 66279
// continue ;
66277: GO 66238
// if BuildingStatus ( j ) = bs_idle then
66279: LD_VAR 0 3
66283: PPUSH
66284: CALL_OW 461
66288: PUSH
66289: LD_INT 2
66291: EQUAL
66292: IFFALSE 66480
// begin if idle_lab and UnitsInside ( j ) < 6 then
66294: LD_VAR 0 11
66298: PUSH
66299: LD_VAR 0 3
66303: PPUSH
66304: CALL_OW 313
66308: PUSH
66309: LD_INT 6
66311: LESS
66312: AND
66313: IFFALSE 66384
// begin tmp2 := UnitsInside ( idle_lab ) ;
66315: LD_ADDR_VAR 0 9
66319: PUSH
66320: LD_VAR 0 11
66324: PPUSH
66325: CALL_OW 313
66329: ST_TO_ADDR
// if tmp2 then
66330: LD_VAR 0 9
66334: IFFALSE 66376
// for x in tmp2 do
66336: LD_ADDR_VAR 0 7
66340: PUSH
66341: LD_VAR 0 9
66345: PUSH
66346: FOR_IN
66347: IFFALSE 66374
// begin ComExitBuilding ( x ) ;
66349: LD_VAR 0 7
66353: PPUSH
66354: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66358: LD_VAR 0 7
66362: PPUSH
66363: LD_VAR 0 3
66367: PPUSH
66368: CALL_OW 180
// end ;
66372: GO 66346
66374: POP
66375: POP
// idle_lab := 0 ;
66376: LD_ADDR_VAR 0 11
66380: PUSH
66381: LD_INT 0
66383: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
66384: LD_ADDR_VAR 0 5
66388: PUSH
66389: LD_EXP 91
66393: PUSH
66394: LD_VAR 0 4
66398: ARRAY
66399: PUSH
66400: FOR_IN
66401: IFFALSE 66461
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
66403: LD_VAR 0 3
66407: PPUSH
66408: LD_VAR 0 5
66412: PPUSH
66413: CALL_OW 430
66417: PUSH
66418: LD_VAR 0 4
66422: PPUSH
66423: LD_VAR 0 5
66427: PPUSH
66428: CALL 14318 0 2
66432: AND
66433: IFFALSE 66459
// begin researching := true ;
66435: LD_ADDR_VAR 0 10
66439: PUSH
66440: LD_INT 1
66442: ST_TO_ADDR
// ComResearch ( j , t ) ;
66443: LD_VAR 0 3
66447: PPUSH
66448: LD_VAR 0 5
66452: PPUSH
66453: CALL_OW 124
// break ;
66457: GO 66461
// end ;
66459: GO 66400
66461: POP
66462: POP
// if not researching then
66463: LD_VAR 0 10
66467: NOT
66468: IFFALSE 66480
// idle_lab := j ;
66470: LD_ADDR_VAR 0 11
66474: PUSH
66475: LD_VAR 0 3
66479: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
66480: LD_VAR 0 3
66484: PPUSH
66485: CALL_OW 461
66489: PUSH
66490: LD_INT 10
66492: EQUAL
66493: IFFALSE 67081
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
66495: LD_EXP 93
66499: PUSH
66500: LD_VAR 0 2
66504: ARRAY
66505: NOT
66506: PUSH
66507: LD_EXP 94
66511: PUSH
66512: LD_VAR 0 2
66516: ARRAY
66517: NOT
66518: AND
66519: PUSH
66520: LD_EXP 91
66524: PUSH
66525: LD_VAR 0 4
66529: ARRAY
66530: PUSH
66531: LD_INT 1
66533: GREATER
66534: AND
66535: IFFALSE 66666
// begin ComCancel ( j ) ;
66537: LD_VAR 0 3
66541: PPUSH
66542: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
66546: LD_ADDR_EXP 91
66550: PUSH
66551: LD_EXP 91
66555: PPUSH
66556: LD_VAR 0 4
66560: PPUSH
66561: LD_EXP 91
66565: PUSH
66566: LD_VAR 0 4
66570: ARRAY
66571: PPUSH
66572: LD_EXP 91
66576: PUSH
66577: LD_VAR 0 4
66581: ARRAY
66582: PUSH
66583: LD_INT 1
66585: MINUS
66586: PPUSH
66587: LD_EXP 91
66591: PUSH
66592: LD_VAR 0 4
66596: ARRAY
66597: PPUSH
66598: LD_INT 0
66600: PPUSH
66601: CALL 17830 0 4
66605: PPUSH
66606: CALL_OW 1
66610: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
66611: LD_ADDR_EXP 91
66615: PUSH
66616: LD_EXP 91
66620: PPUSH
66621: LD_VAR 0 4
66625: PPUSH
66626: LD_EXP 91
66630: PUSH
66631: LD_VAR 0 4
66635: ARRAY
66636: PPUSH
66637: LD_EXP 91
66641: PUSH
66642: LD_VAR 0 4
66646: ARRAY
66647: PPUSH
66648: LD_INT 1
66650: PPUSH
66651: LD_INT 0
66653: PPUSH
66654: CALL 17830 0 4
66658: PPUSH
66659: CALL_OW 1
66663: ST_TO_ADDR
// continue ;
66664: GO 66238
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
66666: LD_EXP 93
66670: PUSH
66671: LD_VAR 0 2
66675: ARRAY
66676: PUSH
66677: LD_EXP 94
66681: PUSH
66682: LD_VAR 0 2
66686: ARRAY
66687: NOT
66688: AND
66689: IFFALSE 66816
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
66691: LD_ADDR_EXP 94
66695: PUSH
66696: LD_EXP 94
66700: PPUSH
66701: LD_VAR 0 2
66705: PUSH
66706: LD_EXP 94
66710: PUSH
66711: LD_VAR 0 2
66715: ARRAY
66716: PUSH
66717: LD_INT 1
66719: PLUS
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PPUSH
66725: LD_EXP 93
66729: PUSH
66730: LD_VAR 0 2
66734: ARRAY
66735: PUSH
66736: LD_INT 1
66738: ARRAY
66739: PPUSH
66740: CALL 18412 0 3
66744: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
66745: LD_EXP 93
66749: PUSH
66750: LD_VAR 0 2
66754: ARRAY
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: PPUSH
66760: LD_INT 112
66762: PPUSH
66763: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
66767: LD_ADDR_VAR 0 9
66771: PUSH
66772: LD_EXP 93
66776: PUSH
66777: LD_VAR 0 2
66781: ARRAY
66782: PPUSH
66783: LD_INT 1
66785: PPUSH
66786: CALL_OW 3
66790: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
66791: LD_ADDR_EXP 93
66795: PUSH
66796: LD_EXP 93
66800: PPUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: LD_VAR 0 9
66810: PPUSH
66811: CALL_OW 1
66815: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
66816: LD_EXP 93
66820: PUSH
66821: LD_VAR 0 2
66825: ARRAY
66826: PUSH
66827: LD_EXP 94
66831: PUSH
66832: LD_VAR 0 2
66836: ARRAY
66837: AND
66838: PUSH
66839: LD_EXP 94
66843: PUSH
66844: LD_VAR 0 2
66848: ARRAY
66849: PUSH
66850: LD_INT 1
66852: ARRAY
66853: PPUSH
66854: CALL_OW 310
66858: NOT
66859: AND
66860: PUSH
66861: LD_VAR 0 3
66865: PPUSH
66866: CALL_OW 313
66870: PUSH
66871: LD_INT 6
66873: EQUAL
66874: AND
66875: IFFALSE 66931
// begin tmp2 := UnitsInside ( j ) ;
66877: LD_ADDR_VAR 0 9
66881: PUSH
66882: LD_VAR 0 3
66886: PPUSH
66887: CALL_OW 313
66891: ST_TO_ADDR
// if tmp2 = 6 then
66892: LD_VAR 0 9
66896: PUSH
66897: LD_INT 6
66899: EQUAL
66900: IFFALSE 66931
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
66902: LD_VAR 0 9
66906: PUSH
66907: LD_INT 1
66909: ARRAY
66910: PPUSH
66911: LD_INT 112
66913: PPUSH
66914: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
66918: LD_VAR 0 9
66922: PUSH
66923: LD_INT 1
66925: ARRAY
66926: PPUSH
66927: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
66931: LD_EXP 94
66935: PUSH
66936: LD_VAR 0 2
66940: ARRAY
66941: PUSH
66942: LD_EXP 94
66946: PUSH
66947: LD_VAR 0 2
66951: ARRAY
66952: PUSH
66953: LD_INT 1
66955: ARRAY
66956: PPUSH
66957: CALL_OW 314
66961: NOT
66962: AND
66963: PUSH
66964: LD_EXP 94
66968: PUSH
66969: LD_VAR 0 2
66973: ARRAY
66974: PUSH
66975: LD_INT 1
66977: ARRAY
66978: PPUSH
66979: CALL_OW 310
66983: NOT
66984: AND
66985: IFFALSE 67011
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
66987: LD_EXP 94
66991: PUSH
66992: LD_VAR 0 2
66996: ARRAY
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PPUSH
67002: LD_VAR 0 3
67006: PPUSH
67007: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
67011: LD_EXP 94
67015: PUSH
67016: LD_VAR 0 2
67020: ARRAY
67021: PUSH
67022: LD_INT 1
67024: ARRAY
67025: PPUSH
67026: CALL_OW 310
67030: PUSH
67031: LD_EXP 94
67035: PUSH
67036: LD_VAR 0 2
67040: ARRAY
67041: PUSH
67042: LD_INT 1
67044: ARRAY
67045: PPUSH
67046: CALL_OW 310
67050: PPUSH
67051: CALL_OW 461
67055: PUSH
67056: LD_INT 3
67058: NONEQUAL
67059: AND
67060: IFFALSE 67081
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
67062: LD_EXP 94
67066: PUSH
67067: LD_VAR 0 2
67071: ARRAY
67072: PUSH
67073: LD_INT 1
67075: ARRAY
67076: PPUSH
67077: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
67081: LD_VAR 0 3
67085: PPUSH
67086: CALL_OW 461
67090: PUSH
67091: LD_INT 6
67093: EQUAL
67094: PUSH
67095: LD_VAR 0 6
67099: PUSH
67100: LD_INT 1
67102: GREATER
67103: AND
67104: IFFALSE 67256
// begin sci := [ ] ;
67106: LD_ADDR_VAR 0 8
67110: PUSH
67111: EMPTY
67112: ST_TO_ADDR
// for x in ( tmp diff j ) do
67113: LD_ADDR_VAR 0 7
67117: PUSH
67118: LD_VAR 0 6
67122: PUSH
67123: LD_VAR 0 3
67127: DIFF
67128: PUSH
67129: FOR_IN
67130: IFFALSE 67182
// begin if sci = 6 then
67132: LD_VAR 0 8
67136: PUSH
67137: LD_INT 6
67139: EQUAL
67140: IFFALSE 67144
// break ;
67142: GO 67182
// if BuildingStatus ( x ) = bs_idle then
67144: LD_VAR 0 7
67148: PPUSH
67149: CALL_OW 461
67153: PUSH
67154: LD_INT 2
67156: EQUAL
67157: IFFALSE 67180
// sci := sci ^ UnitsInside ( x ) ;
67159: LD_ADDR_VAR 0 8
67163: PUSH
67164: LD_VAR 0 8
67168: PUSH
67169: LD_VAR 0 7
67173: PPUSH
67174: CALL_OW 313
67178: ADD
67179: ST_TO_ADDR
// end ;
67180: GO 67129
67182: POP
67183: POP
// if not sci then
67184: LD_VAR 0 8
67188: NOT
67189: IFFALSE 67193
// continue ;
67191: GO 66238
// for x in sci do
67193: LD_ADDR_VAR 0 7
67197: PUSH
67198: LD_VAR 0 8
67202: PUSH
67203: FOR_IN
67204: IFFALSE 67254
// if IsInUnit ( x ) and not HasTask ( x ) then
67206: LD_VAR 0 7
67210: PPUSH
67211: CALL_OW 310
67215: PUSH
67216: LD_VAR 0 7
67220: PPUSH
67221: CALL_OW 314
67225: NOT
67226: AND
67227: IFFALSE 67252
// begin ComExitBuilding ( x ) ;
67229: LD_VAR 0 7
67233: PPUSH
67234: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
67238: LD_VAR 0 7
67242: PPUSH
67243: LD_VAR 0 3
67247: PPUSH
67248: CALL_OW 180
// end ;
67252: GO 67203
67254: POP
67255: POP
// end ; end ;
67256: GO 66238
67258: POP
67259: POP
// end ;
67260: GO 66192
67262: POP
67263: POP
// end ;
67264: LD_VAR 0 1
67268: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
67269: LD_INT 0
67271: PPUSH
67272: PPUSH
// if not mc_bases then
67273: LD_EXP 64
67277: NOT
67278: IFFALSE 67282
// exit ;
67280: GO 67363
// for i = 1 to mc_bases do
67282: LD_ADDR_VAR 0 2
67286: PUSH
67287: DOUBLE
67288: LD_INT 1
67290: DEC
67291: ST_TO_ADDR
67292: LD_EXP 64
67296: PUSH
67297: FOR_TO
67298: IFFALSE 67361
// if mc_mines [ i ] and mc_miners [ i ] then
67300: LD_EXP 77
67304: PUSH
67305: LD_VAR 0 2
67309: ARRAY
67310: PUSH
67311: LD_EXP 78
67315: PUSH
67316: LD_VAR 0 2
67320: ARRAY
67321: AND
67322: IFFALSE 67359
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
67324: LD_EXP 78
67328: PUSH
67329: LD_VAR 0 2
67333: ARRAY
67334: PUSH
67335: LD_INT 1
67337: ARRAY
67338: PPUSH
67339: CALL_OW 255
67343: PPUSH
67344: LD_EXP 77
67348: PUSH
67349: LD_VAR 0 2
67353: ARRAY
67354: PPUSH
67355: CALL 15401 0 2
67359: GO 67297
67361: POP
67362: POP
// end ;
67363: LD_VAR 0 1
67367: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
67368: LD_INT 0
67370: PPUSH
67371: PPUSH
67372: PPUSH
67373: PPUSH
67374: PPUSH
67375: PPUSH
67376: PPUSH
67377: PPUSH
// if not mc_bases or not mc_parking then
67378: LD_EXP 64
67382: NOT
67383: PUSH
67384: LD_EXP 88
67388: NOT
67389: OR
67390: IFFALSE 67394
// exit ;
67392: GO 68093
// for i = 1 to mc_bases do
67394: LD_ADDR_VAR 0 2
67398: PUSH
67399: DOUBLE
67400: LD_INT 1
67402: DEC
67403: ST_TO_ADDR
67404: LD_EXP 64
67408: PUSH
67409: FOR_TO
67410: IFFALSE 68091
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
67412: LD_EXP 64
67416: PUSH
67417: LD_VAR 0 2
67421: ARRAY
67422: NOT
67423: PUSH
67424: LD_EXP 88
67428: PUSH
67429: LD_VAR 0 2
67433: ARRAY
67434: NOT
67435: OR
67436: IFFALSE 67440
// continue ;
67438: GO 67409
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
67440: LD_ADDR_VAR 0 5
67444: PUSH
67445: LD_EXP 64
67449: PUSH
67450: LD_VAR 0 2
67454: ARRAY
67455: PUSH
67456: LD_INT 1
67458: ARRAY
67459: PPUSH
67460: CALL_OW 255
67464: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67465: LD_ADDR_VAR 0 6
67469: PUSH
67470: LD_EXP 64
67474: PUSH
67475: LD_VAR 0 2
67479: ARRAY
67480: PPUSH
67481: LD_INT 30
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PPUSH
67491: CALL_OW 72
67495: ST_TO_ADDR
// if not fac then
67496: LD_VAR 0 6
67500: NOT
67501: IFFALSE 67552
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67503: LD_ADDR_VAR 0 6
67507: PUSH
67508: LD_EXP 64
67512: PUSH
67513: LD_VAR 0 2
67517: ARRAY
67518: PPUSH
67519: LD_INT 2
67521: PUSH
67522: LD_INT 30
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 30
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: PPUSH
67547: CALL_OW 72
67551: ST_TO_ADDR
// if not fac then
67552: LD_VAR 0 6
67556: NOT
67557: IFFALSE 67561
// continue ;
67559: GO 67409
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67561: LD_ADDR_VAR 0 7
67565: PUSH
67566: LD_EXP 88
67570: PUSH
67571: LD_VAR 0 2
67575: ARRAY
67576: PPUSH
67577: LD_INT 22
67579: PUSH
67580: LD_VAR 0 5
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 21
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 24
67604: PUSH
67605: LD_INT 1000
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: PPUSH
67621: CALL_OW 70
67625: ST_TO_ADDR
// for j in fac do
67626: LD_ADDR_VAR 0 3
67630: PUSH
67631: LD_VAR 0 6
67635: PUSH
67636: FOR_IN
67637: IFFALSE 67718
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67639: LD_ADDR_VAR 0 7
67643: PUSH
67644: LD_VAR 0 7
67648: PUSH
67649: LD_INT 22
67651: PUSH
67652: LD_VAR 0 5
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 91
67663: PUSH
67664: LD_VAR 0 3
67668: PUSH
67669: LD_INT 15
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 21
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 3
67689: PUSH
67690: LD_INT 24
67692: PUSH
67693: LD_INT 1000
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: PPUSH
67710: CALL_OW 69
67714: UNION
67715: ST_TO_ADDR
67716: GO 67636
67718: POP
67719: POP
// if not vehs then
67720: LD_VAR 0 7
67724: NOT
67725: IFFALSE 67751
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
67727: LD_ADDR_EXP 76
67731: PUSH
67732: LD_EXP 76
67736: PPUSH
67737: LD_VAR 0 2
67741: PPUSH
67742: EMPTY
67743: PPUSH
67744: CALL_OW 1
67748: ST_TO_ADDR
// continue ;
67749: GO 67409
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67751: LD_ADDR_VAR 0 8
67755: PUSH
67756: LD_EXP 64
67760: PUSH
67761: LD_VAR 0 2
67765: ARRAY
67766: PPUSH
67767: LD_INT 30
67769: PUSH
67770: LD_INT 3
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PPUSH
67777: CALL_OW 72
67781: ST_TO_ADDR
// if tmp then
67782: LD_VAR 0 8
67786: IFFALSE 67889
// begin for j in tmp do
67788: LD_ADDR_VAR 0 3
67792: PUSH
67793: LD_VAR 0 8
67797: PUSH
67798: FOR_IN
67799: IFFALSE 67887
// for k in UnitsInside ( j ) do
67801: LD_ADDR_VAR 0 4
67805: PUSH
67806: LD_VAR 0 3
67810: PPUSH
67811: CALL_OW 313
67815: PUSH
67816: FOR_IN
67817: IFFALSE 67883
// if k then
67819: LD_VAR 0 4
67823: IFFALSE 67881
// if not k in mc_repair_vehicle [ i ] then
67825: LD_VAR 0 4
67829: PUSH
67830: LD_EXP 76
67834: PUSH
67835: LD_VAR 0 2
67839: ARRAY
67840: IN
67841: NOT
67842: IFFALSE 67881
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
67844: LD_ADDR_EXP 76
67848: PUSH
67849: LD_EXP 76
67853: PPUSH
67854: LD_VAR 0 2
67858: PPUSH
67859: LD_EXP 76
67863: PUSH
67864: LD_VAR 0 2
67868: ARRAY
67869: PUSH
67870: LD_VAR 0 4
67874: UNION
67875: PPUSH
67876: CALL_OW 1
67880: ST_TO_ADDR
67881: GO 67816
67883: POP
67884: POP
67885: GO 67798
67887: POP
67888: POP
// end ; if not mc_repair_vehicle [ i ] then
67889: LD_EXP 76
67893: PUSH
67894: LD_VAR 0 2
67898: ARRAY
67899: NOT
67900: IFFALSE 67904
// continue ;
67902: GO 67409
// for j in mc_repair_vehicle [ i ] do
67904: LD_ADDR_VAR 0 3
67908: PUSH
67909: LD_EXP 76
67913: PUSH
67914: LD_VAR 0 2
67918: ARRAY
67919: PUSH
67920: FOR_IN
67921: IFFALSE 68087
// begin if GetClass ( j ) <> 3 then
67923: LD_VAR 0 3
67927: PPUSH
67928: CALL_OW 257
67932: PUSH
67933: LD_INT 3
67935: NONEQUAL
67936: IFFALSE 67977
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
67938: LD_ADDR_EXP 76
67942: PUSH
67943: LD_EXP 76
67947: PPUSH
67948: LD_VAR 0 2
67952: PPUSH
67953: LD_EXP 76
67957: PUSH
67958: LD_VAR 0 2
67962: ARRAY
67963: PUSH
67964: LD_VAR 0 3
67968: DIFF
67969: PPUSH
67970: CALL_OW 1
67974: ST_TO_ADDR
// continue ;
67975: GO 67920
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
67977: LD_VAR 0 3
67981: PPUSH
67982: CALL_OW 311
67986: NOT
67987: PUSH
67988: LD_VAR 0 3
67992: PUSH
67993: LD_EXP 67
67997: PUSH
67998: LD_VAR 0 2
68002: ARRAY
68003: PUSH
68004: LD_INT 1
68006: ARRAY
68007: IN
68008: NOT
68009: AND
68010: PUSH
68011: LD_VAR 0 3
68015: PUSH
68016: LD_EXP 67
68020: PUSH
68021: LD_VAR 0 2
68025: ARRAY
68026: PUSH
68027: LD_INT 2
68029: ARRAY
68030: IN
68031: NOT
68032: AND
68033: IFFALSE 68085
// begin if IsInUnit ( j ) then
68035: LD_VAR 0 3
68039: PPUSH
68040: CALL_OW 310
68044: IFFALSE 68055
// ComExitBuilding ( j ) ;
68046: LD_VAR 0 3
68050: PPUSH
68051: CALL_OW 122
// if not HasTask ( j ) then
68055: LD_VAR 0 3
68059: PPUSH
68060: CALL_OW 314
68064: NOT
68065: IFFALSE 68085
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
68067: LD_VAR 0 3
68071: PPUSH
68072: LD_VAR 0 7
68076: PUSH
68077: LD_INT 1
68079: ARRAY
68080: PPUSH
68081: CALL_OW 189
// end ; end ;
68085: GO 67920
68087: POP
68088: POP
// end ;
68089: GO 67409
68091: POP
68092: POP
// end ;
68093: LD_VAR 0 1
68097: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
68098: LD_INT 0
68100: PPUSH
68101: PPUSH
68102: PPUSH
68103: PPUSH
68104: PPUSH
68105: PPUSH
68106: PPUSH
68107: PPUSH
68108: PPUSH
68109: PPUSH
68110: PPUSH
// if not mc_bases then
68111: LD_EXP 64
68115: NOT
68116: IFFALSE 68120
// exit ;
68118: GO 68922
// for i = 1 to mc_bases do
68120: LD_ADDR_VAR 0 2
68124: PUSH
68125: DOUBLE
68126: LD_INT 1
68128: DEC
68129: ST_TO_ADDR
68130: LD_EXP 64
68134: PUSH
68135: FOR_TO
68136: IFFALSE 68920
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
68138: LD_EXP 92
68142: PUSH
68143: LD_VAR 0 2
68147: ARRAY
68148: NOT
68149: PUSH
68150: LD_EXP 67
68154: PUSH
68155: LD_VAR 0 2
68159: ARRAY
68160: PUSH
68161: LD_INT 1
68163: ARRAY
68164: OR
68165: PUSH
68166: LD_EXP 67
68170: PUSH
68171: LD_VAR 0 2
68175: ARRAY
68176: PUSH
68177: LD_INT 2
68179: ARRAY
68180: OR
68181: PUSH
68182: LD_EXP 90
68186: PUSH
68187: LD_VAR 0 2
68191: ARRAY
68192: PPUSH
68193: LD_INT 1
68195: PPUSH
68196: CALL_OW 325
68200: NOT
68201: OR
68202: PUSH
68203: LD_EXP 87
68207: PUSH
68208: LD_VAR 0 2
68212: ARRAY
68213: OR
68214: IFFALSE 68218
// continue ;
68216: GO 68135
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
68218: LD_ADDR_VAR 0 8
68222: PUSH
68223: LD_EXP 64
68227: PUSH
68228: LD_VAR 0 2
68232: ARRAY
68233: PPUSH
68234: LD_INT 25
68236: PUSH
68237: LD_INT 4
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 50
68246: PUSH
68247: EMPTY
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 60
68255: PUSH
68256: EMPTY
68257: LIST
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: PPUSH
68268: CALL_OW 72
68272: PUSH
68273: LD_EXP 68
68277: PUSH
68278: LD_VAR 0 2
68282: ARRAY
68283: DIFF
68284: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68285: LD_ADDR_VAR 0 9
68289: PUSH
68290: LD_EXP 64
68294: PUSH
68295: LD_VAR 0 2
68299: ARRAY
68300: PPUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 30
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 30
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: PPUSH
68329: CALL_OW 72
68333: ST_TO_ADDR
// if not tmp or not dep then
68334: LD_VAR 0 8
68338: NOT
68339: PUSH
68340: LD_VAR 0 9
68344: NOT
68345: OR
68346: IFFALSE 68350
// continue ;
68348: GO 68135
// side := GetSide ( tmp [ 1 ] ) ;
68350: LD_ADDR_VAR 0 11
68354: PUSH
68355: LD_VAR 0 8
68359: PUSH
68360: LD_INT 1
68362: ARRAY
68363: PPUSH
68364: CALL_OW 255
68368: ST_TO_ADDR
// dep := dep [ 1 ] ;
68369: LD_ADDR_VAR 0 9
68373: PUSH
68374: LD_VAR 0 9
68378: PUSH
68379: LD_INT 1
68381: ARRAY
68382: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
68383: LD_ADDR_VAR 0 7
68387: PUSH
68388: LD_EXP 92
68392: PUSH
68393: LD_VAR 0 2
68397: ARRAY
68398: PPUSH
68399: LD_INT 22
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 25
68411: PUSH
68412: LD_INT 12
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PPUSH
68423: CALL_OW 70
68427: PUSH
68428: LD_INT 22
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 25
68440: PUSH
68441: LD_INT 12
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 91
68450: PUSH
68451: LD_VAR 0 9
68455: PUSH
68456: LD_INT 20
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: LIST
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: LIST
68468: PPUSH
68469: CALL_OW 69
68473: UNION
68474: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
68475: LD_ADDR_VAR 0 10
68479: PUSH
68480: LD_EXP 92
68484: PUSH
68485: LD_VAR 0 2
68489: ARRAY
68490: PPUSH
68491: LD_INT 81
68493: PUSH
68494: LD_VAR 0 11
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PPUSH
68503: CALL_OW 70
68507: ST_TO_ADDR
// if not apes or danger_at_area then
68508: LD_VAR 0 7
68512: NOT
68513: PUSH
68514: LD_VAR 0 10
68518: OR
68519: IFFALSE 68569
// begin if mc_taming [ i ] then
68521: LD_EXP 95
68525: PUSH
68526: LD_VAR 0 2
68530: ARRAY
68531: IFFALSE 68567
// begin MC_Reset ( i , 121 ) ;
68533: LD_VAR 0 2
68537: PPUSH
68538: LD_INT 121
68540: PPUSH
68541: CALL 54020 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68545: LD_ADDR_EXP 95
68549: PUSH
68550: LD_EXP 95
68554: PPUSH
68555: LD_VAR 0 2
68559: PPUSH
68560: EMPTY
68561: PPUSH
68562: CALL_OW 1
68566: ST_TO_ADDR
// end ; continue ;
68567: GO 68135
// end ; for j in tmp do
68569: LD_ADDR_VAR 0 3
68573: PUSH
68574: LD_VAR 0 8
68578: PUSH
68579: FOR_IN
68580: IFFALSE 68916
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
68582: LD_VAR 0 3
68586: PUSH
68587: LD_EXP 95
68591: PUSH
68592: LD_VAR 0 2
68596: ARRAY
68597: IN
68598: NOT
68599: PUSH
68600: LD_EXP 95
68604: PUSH
68605: LD_VAR 0 2
68609: ARRAY
68610: PUSH
68611: LD_INT 3
68613: LESS
68614: AND
68615: IFFALSE 68673
// begin SetTag ( j , 121 ) ;
68617: LD_VAR 0 3
68621: PPUSH
68622: LD_INT 121
68624: PPUSH
68625: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
68629: LD_ADDR_EXP 95
68633: PUSH
68634: LD_EXP 95
68638: PPUSH
68639: LD_VAR 0 2
68643: PUSH
68644: LD_EXP 95
68648: PUSH
68649: LD_VAR 0 2
68653: ARRAY
68654: PUSH
68655: LD_INT 1
68657: PLUS
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PPUSH
68663: LD_VAR 0 3
68667: PPUSH
68668: CALL 18412 0 3
68672: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
68673: LD_VAR 0 3
68677: PUSH
68678: LD_EXP 95
68682: PUSH
68683: LD_VAR 0 2
68687: ARRAY
68688: IN
68689: IFFALSE 68914
// begin if GetClass ( j ) <> 4 then
68691: LD_VAR 0 3
68695: PPUSH
68696: CALL_OW 257
68700: PUSH
68701: LD_INT 4
68703: NONEQUAL
68704: IFFALSE 68757
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
68706: LD_ADDR_EXP 95
68710: PUSH
68711: LD_EXP 95
68715: PPUSH
68716: LD_VAR 0 2
68720: PPUSH
68721: LD_EXP 95
68725: PUSH
68726: LD_VAR 0 2
68730: ARRAY
68731: PUSH
68732: LD_VAR 0 3
68736: DIFF
68737: PPUSH
68738: CALL_OW 1
68742: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68743: LD_VAR 0 3
68747: PPUSH
68748: LD_INT 0
68750: PPUSH
68751: CALL_OW 109
// continue ;
68755: GO 68579
// end ; if IsInUnit ( j ) then
68757: LD_VAR 0 3
68761: PPUSH
68762: CALL_OW 310
68766: IFFALSE 68777
// ComExitBuilding ( j ) ;
68768: LD_VAR 0 3
68772: PPUSH
68773: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
68777: LD_ADDR_VAR 0 6
68781: PUSH
68782: LD_VAR 0 7
68786: PPUSH
68787: LD_VAR 0 3
68791: PPUSH
68792: CALL_OW 74
68796: ST_TO_ADDR
// if not ape then
68797: LD_VAR 0 6
68801: NOT
68802: IFFALSE 68806
// break ;
68804: GO 68916
// x := GetX ( ape ) ;
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: LD_VAR 0 6
68815: PPUSH
68816: CALL_OW 250
68820: ST_TO_ADDR
// y := GetY ( ape ) ;
68821: LD_ADDR_VAR 0 5
68825: PUSH
68826: LD_VAR 0 6
68830: PPUSH
68831: CALL_OW 251
68835: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68836: LD_VAR 0 4
68840: PPUSH
68841: LD_VAR 0 5
68845: PPUSH
68846: CALL_OW 488
68850: NOT
68851: PUSH
68852: LD_VAR 0 11
68856: PPUSH
68857: LD_VAR 0 4
68861: PPUSH
68862: LD_VAR 0 5
68866: PPUSH
68867: LD_INT 20
68869: PPUSH
68870: CALL 19308 0 4
68874: PUSH
68875: LD_INT 4
68877: ARRAY
68878: OR
68879: IFFALSE 68883
// break ;
68881: GO 68916
// if not HasTask ( j ) then
68883: LD_VAR 0 3
68887: PPUSH
68888: CALL_OW 314
68892: NOT
68893: IFFALSE 68914
// ComTameXY ( j , x , y ) ;
68895: LD_VAR 0 3
68899: PPUSH
68900: LD_VAR 0 4
68904: PPUSH
68905: LD_VAR 0 5
68909: PPUSH
68910: CALL_OW 131
// end ; end ;
68914: GO 68579
68916: POP
68917: POP
// end ;
68918: GO 68135
68920: POP
68921: POP
// end ;
68922: LD_VAR 0 1
68926: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
68927: LD_INT 0
68929: PPUSH
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
// if not mc_bases then
68937: LD_EXP 64
68941: NOT
68942: IFFALSE 68946
// exit ;
68944: GO 69572
// for i = 1 to mc_bases do
68946: LD_ADDR_VAR 0 2
68950: PUSH
68951: DOUBLE
68952: LD_INT 1
68954: DEC
68955: ST_TO_ADDR
68956: LD_EXP 64
68960: PUSH
68961: FOR_TO
68962: IFFALSE 69570
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
68964: LD_EXP 93
68968: PUSH
68969: LD_VAR 0 2
68973: ARRAY
68974: NOT
68975: PUSH
68976: LD_EXP 93
68980: PUSH
68981: LD_VAR 0 2
68985: ARRAY
68986: PPUSH
68987: LD_INT 25
68989: PUSH
68990: LD_INT 12
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PPUSH
68997: CALL_OW 72
69001: NOT
69002: OR
69003: IFFALSE 69007
// continue ;
69005: GO 68961
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
69007: LD_ADDR_VAR 0 5
69011: PUSH
69012: LD_EXP 93
69016: PUSH
69017: LD_VAR 0 2
69021: ARRAY
69022: PUSH
69023: LD_INT 1
69025: ARRAY
69026: PPUSH
69027: CALL_OW 255
69031: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
69032: LD_VAR 0 5
69036: PPUSH
69037: LD_INT 2
69039: PPUSH
69040: CALL_OW 325
69044: IFFALSE 69297
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69046: LD_ADDR_VAR 0 4
69050: PUSH
69051: LD_EXP 93
69055: PUSH
69056: LD_VAR 0 2
69060: ARRAY
69061: PPUSH
69062: LD_INT 25
69064: PUSH
69065: LD_INT 16
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PPUSH
69072: CALL_OW 72
69076: ST_TO_ADDR
// if tmp < 6 then
69077: LD_VAR 0 4
69081: PUSH
69082: LD_INT 6
69084: LESS
69085: IFFALSE 69297
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69087: LD_ADDR_VAR 0 6
69091: PUSH
69092: LD_EXP 64
69096: PUSH
69097: LD_VAR 0 2
69101: ARRAY
69102: PPUSH
69103: LD_INT 2
69105: PUSH
69106: LD_INT 30
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 30
69118: PUSH
69119: LD_INT 1
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: PPUSH
69131: CALL_OW 72
69135: ST_TO_ADDR
// if depot then
69136: LD_VAR 0 6
69140: IFFALSE 69297
// begin selected := 0 ;
69142: LD_ADDR_VAR 0 7
69146: PUSH
69147: LD_INT 0
69149: ST_TO_ADDR
// for j in depot do
69150: LD_ADDR_VAR 0 3
69154: PUSH
69155: LD_VAR 0 6
69159: PUSH
69160: FOR_IN
69161: IFFALSE 69192
// begin if UnitsInside ( j ) < 6 then
69163: LD_VAR 0 3
69167: PPUSH
69168: CALL_OW 313
69172: PUSH
69173: LD_INT 6
69175: LESS
69176: IFFALSE 69190
// begin selected := j ;
69178: LD_ADDR_VAR 0 7
69182: PUSH
69183: LD_VAR 0 3
69187: ST_TO_ADDR
// break ;
69188: GO 69192
// end ; end ;
69190: GO 69160
69192: POP
69193: POP
// if selected then
69194: LD_VAR 0 7
69198: IFFALSE 69297
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69200: LD_ADDR_VAR 0 3
69204: PUSH
69205: LD_EXP 93
69209: PUSH
69210: LD_VAR 0 2
69214: ARRAY
69215: PPUSH
69216: LD_INT 25
69218: PUSH
69219: LD_INT 12
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PPUSH
69226: CALL_OW 72
69230: PUSH
69231: FOR_IN
69232: IFFALSE 69295
// if not HasTask ( j ) then
69234: LD_VAR 0 3
69238: PPUSH
69239: CALL_OW 314
69243: NOT
69244: IFFALSE 69293
// begin if not IsInUnit ( j ) then
69246: LD_VAR 0 3
69250: PPUSH
69251: CALL_OW 310
69255: NOT
69256: IFFALSE 69272
// ComEnterUnit ( j , selected ) ;
69258: LD_VAR 0 3
69262: PPUSH
69263: LD_VAR 0 7
69267: PPUSH
69268: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
69272: LD_VAR 0 3
69276: PPUSH
69277: LD_INT 16
69279: PPUSH
69280: CALL_OW 183
// AddComExitBuilding ( j ) ;
69284: LD_VAR 0 3
69288: PPUSH
69289: CALL_OW 182
// end ;
69293: GO 69231
69295: POP
69296: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
69297: LD_VAR 0 5
69301: PPUSH
69302: LD_INT 11
69304: PPUSH
69305: CALL_OW 325
69309: IFFALSE 69568
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69311: LD_ADDR_VAR 0 4
69315: PUSH
69316: LD_EXP 93
69320: PUSH
69321: LD_VAR 0 2
69325: ARRAY
69326: PPUSH
69327: LD_INT 25
69329: PUSH
69330: LD_INT 16
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PPUSH
69337: CALL_OW 72
69341: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
69342: LD_VAR 0 4
69346: PUSH
69347: LD_INT 6
69349: GREATEREQUAL
69350: PUSH
69351: LD_VAR 0 5
69355: PPUSH
69356: LD_INT 2
69358: PPUSH
69359: CALL_OW 325
69363: NOT
69364: OR
69365: IFFALSE 69568
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
69367: LD_ADDR_VAR 0 8
69371: PUSH
69372: LD_EXP 64
69376: PUSH
69377: LD_VAR 0 2
69381: ARRAY
69382: PPUSH
69383: LD_INT 2
69385: PUSH
69386: LD_INT 30
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 30
69398: PUSH
69399: LD_INT 5
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: LIST
69410: PPUSH
69411: CALL_OW 72
69415: ST_TO_ADDR
// if barracks then
69416: LD_VAR 0 8
69420: IFFALSE 69568
// begin selected := 0 ;
69422: LD_ADDR_VAR 0 7
69426: PUSH
69427: LD_INT 0
69429: ST_TO_ADDR
// for j in barracks do
69430: LD_ADDR_VAR 0 3
69434: PUSH
69435: LD_VAR 0 8
69439: PUSH
69440: FOR_IN
69441: IFFALSE 69472
// begin if UnitsInside ( j ) < 6 then
69443: LD_VAR 0 3
69447: PPUSH
69448: CALL_OW 313
69452: PUSH
69453: LD_INT 6
69455: LESS
69456: IFFALSE 69470
// begin selected := j ;
69458: LD_ADDR_VAR 0 7
69462: PUSH
69463: LD_VAR 0 3
69467: ST_TO_ADDR
// break ;
69468: GO 69472
// end ; end ;
69470: GO 69440
69472: POP
69473: POP
// if selected then
69474: LD_VAR 0 7
69478: IFFALSE 69568
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69480: LD_ADDR_VAR 0 3
69484: PUSH
69485: LD_EXP 93
69489: PUSH
69490: LD_VAR 0 2
69494: ARRAY
69495: PPUSH
69496: LD_INT 25
69498: PUSH
69499: LD_INT 12
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PPUSH
69506: CALL_OW 72
69510: PUSH
69511: FOR_IN
69512: IFFALSE 69566
// if not IsInUnit ( j ) and not HasTask ( j ) then
69514: LD_VAR 0 3
69518: PPUSH
69519: CALL_OW 310
69523: NOT
69524: PUSH
69525: LD_VAR 0 3
69529: PPUSH
69530: CALL_OW 314
69534: NOT
69535: AND
69536: IFFALSE 69564
// begin ComEnterUnit ( j , selected ) ;
69538: LD_VAR 0 3
69542: PPUSH
69543: LD_VAR 0 7
69547: PPUSH
69548: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
69552: LD_VAR 0 3
69556: PPUSH
69557: LD_INT 15
69559: PPUSH
69560: CALL_OW 183
// end ;
69564: GO 69511
69566: POP
69567: POP
// end ; end ; end ; end ; end ;
69568: GO 68961
69570: POP
69571: POP
// end ;
69572: LD_VAR 0 1
69576: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
69577: LD_INT 0
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
// if not mc_bases then
69583: LD_EXP 64
69587: NOT
69588: IFFALSE 69592
// exit ;
69590: GO 69770
// for i = 1 to mc_bases do
69592: LD_ADDR_VAR 0 2
69596: PUSH
69597: DOUBLE
69598: LD_INT 1
69600: DEC
69601: ST_TO_ADDR
69602: LD_EXP 64
69606: PUSH
69607: FOR_TO
69608: IFFALSE 69768
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
69610: LD_ADDR_VAR 0 4
69614: PUSH
69615: LD_EXP 64
69619: PUSH
69620: LD_VAR 0 2
69624: ARRAY
69625: PPUSH
69626: LD_INT 25
69628: PUSH
69629: LD_INT 9
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PPUSH
69636: CALL_OW 72
69640: ST_TO_ADDR
// if not tmp then
69641: LD_VAR 0 4
69645: NOT
69646: IFFALSE 69650
// continue ;
69648: GO 69607
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
69650: LD_EXP 90
69654: PUSH
69655: LD_VAR 0 2
69659: ARRAY
69660: PPUSH
69661: LD_INT 29
69663: PPUSH
69664: CALL_OW 325
69668: NOT
69669: PUSH
69670: LD_EXP 90
69674: PUSH
69675: LD_VAR 0 2
69679: ARRAY
69680: PPUSH
69681: LD_INT 28
69683: PPUSH
69684: CALL_OW 325
69688: NOT
69689: AND
69690: IFFALSE 69694
// continue ;
69692: GO 69607
// for j in tmp do
69694: LD_ADDR_VAR 0 3
69698: PUSH
69699: LD_VAR 0 4
69703: PUSH
69704: FOR_IN
69705: IFFALSE 69764
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69707: LD_VAR 0 3
69711: PUSH
69712: LD_EXP 67
69716: PUSH
69717: LD_VAR 0 2
69721: ARRAY
69722: PUSH
69723: LD_INT 1
69725: ARRAY
69726: IN
69727: NOT
69728: PUSH
69729: LD_VAR 0 3
69733: PUSH
69734: LD_EXP 67
69738: PUSH
69739: LD_VAR 0 2
69743: ARRAY
69744: PUSH
69745: LD_INT 2
69747: ARRAY
69748: IN
69749: NOT
69750: AND
69751: IFFALSE 69762
// ComSpaceTimeShoot ( j ) ;
69753: LD_VAR 0 3
69757: PPUSH
69758: CALL 14409 0 1
69762: GO 69704
69764: POP
69765: POP
// end ;
69766: GO 69607
69768: POP
69769: POP
// end ;
69770: LD_VAR 0 1
69774: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
69775: LD_INT 0
69777: PPUSH
69778: PPUSH
69779: PPUSH
69780: PPUSH
69781: PPUSH
69782: PPUSH
69783: PPUSH
69784: PPUSH
69785: PPUSH
// if not mc_bases then
69786: LD_EXP 64
69790: NOT
69791: IFFALSE 69795
// exit ;
69793: GO 70417
// for i = 1 to mc_bases do
69795: LD_ADDR_VAR 0 2
69799: PUSH
69800: DOUBLE
69801: LD_INT 1
69803: DEC
69804: ST_TO_ADDR
69805: LD_EXP 64
69809: PUSH
69810: FOR_TO
69811: IFFALSE 70415
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
69813: LD_EXP 99
69817: PUSH
69818: LD_VAR 0 2
69822: ARRAY
69823: NOT
69824: PUSH
69825: LD_INT 38
69827: PPUSH
69828: LD_EXP 90
69832: PUSH
69833: LD_VAR 0 2
69837: ARRAY
69838: PPUSH
69839: CALL_OW 321
69843: PUSH
69844: LD_INT 2
69846: NONEQUAL
69847: OR
69848: IFFALSE 69852
// continue ;
69850: GO 69810
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
69852: LD_ADDR_VAR 0 8
69856: PUSH
69857: LD_EXP 64
69861: PUSH
69862: LD_VAR 0 2
69866: ARRAY
69867: PPUSH
69868: LD_INT 30
69870: PUSH
69871: LD_INT 34
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PPUSH
69878: CALL_OW 72
69882: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
69883: LD_ADDR_VAR 0 9
69887: PUSH
69888: LD_EXP 64
69892: PUSH
69893: LD_VAR 0 2
69897: ARRAY
69898: PPUSH
69899: LD_INT 25
69901: PUSH
69902: LD_INT 4
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PPUSH
69909: CALL_OW 72
69913: PPUSH
69914: LD_INT 0
69916: PPUSH
69917: CALL 46973 0 2
69921: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
69922: LD_VAR 0 9
69926: NOT
69927: PUSH
69928: LD_VAR 0 8
69932: NOT
69933: OR
69934: PUSH
69935: LD_EXP 64
69939: PUSH
69940: LD_VAR 0 2
69944: ARRAY
69945: PPUSH
69946: LD_INT 124
69948: PPUSH
69949: CALL 46973 0 2
69953: OR
69954: IFFALSE 69958
// continue ;
69956: GO 69810
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
69958: LD_EXP 100
69962: PUSH
69963: LD_VAR 0 2
69967: ARRAY
69968: PUSH
69969: LD_EXP 99
69973: PUSH
69974: LD_VAR 0 2
69978: ARRAY
69979: LESS
69980: PUSH
69981: LD_EXP 100
69985: PUSH
69986: LD_VAR 0 2
69990: ARRAY
69991: PUSH
69992: LD_VAR 0 8
69996: LESS
69997: AND
69998: IFFALSE 70413
// begin tmp := sci [ 1 ] ;
70000: LD_ADDR_VAR 0 7
70004: PUSH
70005: LD_VAR 0 9
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
70014: LD_VAR 0 7
70018: PPUSH
70019: LD_INT 124
70021: PPUSH
70022: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
70026: LD_ADDR_VAR 0 3
70030: PUSH
70031: DOUBLE
70032: LD_EXP 99
70036: PUSH
70037: LD_VAR 0 2
70041: ARRAY
70042: INC
70043: ST_TO_ADDR
70044: LD_EXP 99
70048: PUSH
70049: LD_VAR 0 2
70053: ARRAY
70054: PUSH
70055: FOR_DOWNTO
70056: IFFALSE 70399
// begin if IsInUnit ( tmp ) then
70058: LD_VAR 0 7
70062: PPUSH
70063: CALL_OW 310
70067: IFFALSE 70078
// ComExitBuilding ( tmp ) ;
70069: LD_VAR 0 7
70073: PPUSH
70074: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
70078: LD_INT 35
70080: PPUSH
70081: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
70085: LD_VAR 0 7
70089: PPUSH
70090: CALL_OW 310
70094: NOT
70095: PUSH
70096: LD_VAR 0 7
70100: PPUSH
70101: CALL_OW 314
70105: NOT
70106: AND
70107: IFFALSE 70078
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
70109: LD_ADDR_VAR 0 6
70113: PUSH
70114: LD_VAR 0 7
70118: PPUSH
70119: CALL_OW 250
70123: PUSH
70124: LD_VAR 0 7
70128: PPUSH
70129: CALL_OW 251
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70138: LD_INT 35
70140: PPUSH
70141: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
70145: LD_ADDR_VAR 0 4
70149: PUSH
70150: LD_EXP 99
70154: PUSH
70155: LD_VAR 0 2
70159: ARRAY
70160: PUSH
70161: LD_VAR 0 3
70165: ARRAY
70166: PUSH
70167: LD_INT 1
70169: ARRAY
70170: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
70171: LD_ADDR_VAR 0 5
70175: PUSH
70176: LD_EXP 99
70180: PUSH
70181: LD_VAR 0 2
70185: ARRAY
70186: PUSH
70187: LD_VAR 0 3
70191: ARRAY
70192: PUSH
70193: LD_INT 2
70195: ARRAY
70196: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
70197: LD_VAR 0 7
70201: PPUSH
70202: LD_INT 10
70204: PPUSH
70205: CALL 21005 0 2
70209: PUSH
70210: LD_INT 4
70212: ARRAY
70213: IFFALSE 70251
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
70215: LD_VAR 0 7
70219: PPUSH
70220: LD_VAR 0 6
70224: PUSH
70225: LD_INT 1
70227: ARRAY
70228: PPUSH
70229: LD_VAR 0 6
70233: PUSH
70234: LD_INT 2
70236: ARRAY
70237: PPUSH
70238: CALL_OW 111
// wait ( 0 0$10 ) ;
70242: LD_INT 350
70244: PPUSH
70245: CALL_OW 67
// end else
70249: GO 70277
// begin ComMoveXY ( tmp , x , y ) ;
70251: LD_VAR 0 7
70255: PPUSH
70256: LD_VAR 0 4
70260: PPUSH
70261: LD_VAR 0 5
70265: PPUSH
70266: CALL_OW 111
// wait ( 0 0$3 ) ;
70270: LD_INT 105
70272: PPUSH
70273: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
70277: LD_VAR 0 7
70281: PPUSH
70282: LD_VAR 0 4
70286: PPUSH
70287: LD_VAR 0 5
70291: PPUSH
70292: CALL_OW 307
70296: IFFALSE 70138
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
70298: LD_VAR 0 7
70302: PPUSH
70303: LD_VAR 0 4
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: LD_VAR 0 8
70317: PUSH
70318: LD_VAR 0 3
70322: ARRAY
70323: PPUSH
70324: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
70328: LD_INT 35
70330: PPUSH
70331: CALL_OW 67
// until not HasTask ( tmp ) ;
70335: LD_VAR 0 7
70339: PPUSH
70340: CALL_OW 314
70344: NOT
70345: IFFALSE 70328
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
70347: LD_ADDR_EXP 100
70351: PUSH
70352: LD_EXP 100
70356: PPUSH
70357: LD_VAR 0 2
70361: PUSH
70362: LD_EXP 100
70366: PUSH
70367: LD_VAR 0 2
70371: ARRAY
70372: PUSH
70373: LD_INT 1
70375: PLUS
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PPUSH
70381: LD_VAR 0 8
70385: PUSH
70386: LD_VAR 0 3
70390: ARRAY
70391: PPUSH
70392: CALL 18412 0 3
70396: ST_TO_ADDR
// end ;
70397: GO 70055
70399: POP
70400: POP
// MC_Reset ( i , 124 ) ;
70401: LD_VAR 0 2
70405: PPUSH
70406: LD_INT 124
70408: PPUSH
70409: CALL 54020 0 2
// end ; end ;
70413: GO 69810
70415: POP
70416: POP
// end ;
70417: LD_VAR 0 1
70421: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70422: LD_INT 0
70424: PPUSH
70425: PPUSH
70426: PPUSH
// if not mc_bases then
70427: LD_EXP 64
70431: NOT
70432: IFFALSE 70436
// exit ;
70434: GO 71042
// for i = 1 to mc_bases do
70436: LD_ADDR_VAR 0 2
70440: PUSH
70441: DOUBLE
70442: LD_INT 1
70444: DEC
70445: ST_TO_ADDR
70446: LD_EXP 64
70450: PUSH
70451: FOR_TO
70452: IFFALSE 71040
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70454: LD_ADDR_VAR 0 3
70458: PUSH
70459: LD_EXP 64
70463: PUSH
70464: LD_VAR 0 2
70468: ARRAY
70469: PPUSH
70470: LD_INT 25
70472: PUSH
70473: LD_INT 4
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PPUSH
70480: CALL_OW 72
70484: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
70485: LD_VAR 0 3
70489: NOT
70490: PUSH
70491: LD_EXP 101
70495: PUSH
70496: LD_VAR 0 2
70500: ARRAY
70501: NOT
70502: OR
70503: PUSH
70504: LD_EXP 64
70508: PUSH
70509: LD_VAR 0 2
70513: ARRAY
70514: PPUSH
70515: LD_INT 2
70517: PUSH
70518: LD_INT 30
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 30
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: LIST
70542: PPUSH
70543: CALL_OW 72
70547: NOT
70548: OR
70549: IFFALSE 70599
// begin if mc_deposits_finder [ i ] then
70551: LD_EXP 102
70555: PUSH
70556: LD_VAR 0 2
70560: ARRAY
70561: IFFALSE 70597
// begin MC_Reset ( i , 125 ) ;
70563: LD_VAR 0 2
70567: PPUSH
70568: LD_INT 125
70570: PPUSH
70571: CALL 54020 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70575: LD_ADDR_EXP 102
70579: PUSH
70580: LD_EXP 102
70584: PPUSH
70585: LD_VAR 0 2
70589: PPUSH
70590: EMPTY
70591: PPUSH
70592: CALL_OW 1
70596: ST_TO_ADDR
// end ; continue ;
70597: GO 70451
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
70599: LD_EXP 101
70603: PUSH
70604: LD_VAR 0 2
70608: ARRAY
70609: PUSH
70610: LD_INT 1
70612: ARRAY
70613: PUSH
70614: LD_INT 3
70616: ARRAY
70617: PUSH
70618: LD_INT 1
70620: EQUAL
70621: PUSH
70622: LD_INT 20
70624: PPUSH
70625: LD_EXP 90
70629: PUSH
70630: LD_VAR 0 2
70634: ARRAY
70635: PPUSH
70636: CALL_OW 321
70640: PUSH
70641: LD_INT 2
70643: NONEQUAL
70644: AND
70645: IFFALSE 70695
// begin if mc_deposits_finder [ i ] then
70647: LD_EXP 102
70651: PUSH
70652: LD_VAR 0 2
70656: ARRAY
70657: IFFALSE 70693
// begin MC_Reset ( i , 125 ) ;
70659: LD_VAR 0 2
70663: PPUSH
70664: LD_INT 125
70666: PPUSH
70667: CALL 54020 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70671: LD_ADDR_EXP 102
70675: PUSH
70676: LD_EXP 102
70680: PPUSH
70681: LD_VAR 0 2
70685: PPUSH
70686: EMPTY
70687: PPUSH
70688: CALL_OW 1
70692: ST_TO_ADDR
// end ; continue ;
70693: GO 70451
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
70695: LD_EXP 101
70699: PUSH
70700: LD_VAR 0 2
70704: ARRAY
70705: PUSH
70706: LD_INT 1
70708: ARRAY
70709: PUSH
70710: LD_INT 1
70712: ARRAY
70713: PPUSH
70714: LD_EXP 101
70718: PUSH
70719: LD_VAR 0 2
70723: ARRAY
70724: PUSH
70725: LD_INT 1
70727: ARRAY
70728: PUSH
70729: LD_INT 2
70731: ARRAY
70732: PPUSH
70733: LD_EXP 90
70737: PUSH
70738: LD_VAR 0 2
70742: ARRAY
70743: PPUSH
70744: CALL_OW 440
70748: IFFALSE 70791
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
70750: LD_ADDR_EXP 101
70754: PUSH
70755: LD_EXP 101
70759: PPUSH
70760: LD_VAR 0 2
70764: PPUSH
70765: LD_EXP 101
70769: PUSH
70770: LD_VAR 0 2
70774: ARRAY
70775: PPUSH
70776: LD_INT 1
70778: PPUSH
70779: CALL_OW 3
70783: PPUSH
70784: CALL_OW 1
70788: ST_TO_ADDR
70789: GO 71038
// begin if not mc_deposits_finder [ i ] then
70791: LD_EXP 102
70795: PUSH
70796: LD_VAR 0 2
70800: ARRAY
70801: NOT
70802: IFFALSE 70854
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
70804: LD_ADDR_EXP 102
70808: PUSH
70809: LD_EXP 102
70813: PPUSH
70814: LD_VAR 0 2
70818: PPUSH
70819: LD_VAR 0 3
70823: PUSH
70824: LD_INT 1
70826: ARRAY
70827: PUSH
70828: EMPTY
70829: LIST
70830: PPUSH
70831: CALL_OW 1
70835: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
70836: LD_VAR 0 3
70840: PUSH
70841: LD_INT 1
70843: ARRAY
70844: PPUSH
70845: LD_INT 125
70847: PPUSH
70848: CALL_OW 109
// end else
70852: GO 71038
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
70854: LD_EXP 102
70858: PUSH
70859: LD_VAR 0 2
70863: ARRAY
70864: PUSH
70865: LD_INT 1
70867: ARRAY
70868: PPUSH
70869: CALL_OW 310
70873: IFFALSE 70896
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
70875: LD_EXP 102
70879: PUSH
70880: LD_VAR 0 2
70884: ARRAY
70885: PUSH
70886: LD_INT 1
70888: ARRAY
70889: PPUSH
70890: CALL_OW 122
70894: GO 71038
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
70896: LD_EXP 102
70900: PUSH
70901: LD_VAR 0 2
70905: ARRAY
70906: PUSH
70907: LD_INT 1
70909: ARRAY
70910: PPUSH
70911: CALL_OW 314
70915: NOT
70916: PUSH
70917: LD_EXP 102
70921: PUSH
70922: LD_VAR 0 2
70926: ARRAY
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PPUSH
70932: LD_EXP 101
70936: PUSH
70937: LD_VAR 0 2
70941: ARRAY
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PUSH
70947: LD_INT 1
70949: ARRAY
70950: PPUSH
70951: LD_EXP 101
70955: PUSH
70956: LD_VAR 0 2
70960: ARRAY
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PUSH
70966: LD_INT 2
70968: ARRAY
70969: PPUSH
70970: CALL_OW 297
70974: PUSH
70975: LD_INT 6
70977: GREATER
70978: AND
70979: IFFALSE 71038
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
70981: LD_EXP 102
70985: PUSH
70986: LD_VAR 0 2
70990: ARRAY
70991: PUSH
70992: LD_INT 1
70994: ARRAY
70995: PPUSH
70996: LD_EXP 101
71000: PUSH
71001: LD_VAR 0 2
71005: ARRAY
71006: PUSH
71007: LD_INT 1
71009: ARRAY
71010: PUSH
71011: LD_INT 1
71013: ARRAY
71014: PPUSH
71015: LD_EXP 101
71019: PUSH
71020: LD_VAR 0 2
71024: ARRAY
71025: PUSH
71026: LD_INT 1
71028: ARRAY
71029: PUSH
71030: LD_INT 2
71032: ARRAY
71033: PPUSH
71034: CALL_OW 111
// end ; end ; end ;
71038: GO 70451
71040: POP
71041: POP
// end ;
71042: LD_VAR 0 1
71046: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
71047: LD_INT 0
71049: PPUSH
71050: PPUSH
71051: PPUSH
71052: PPUSH
71053: PPUSH
71054: PPUSH
71055: PPUSH
71056: PPUSH
71057: PPUSH
71058: PPUSH
71059: PPUSH
// if not mc_bases then
71060: LD_EXP 64
71064: NOT
71065: IFFALSE 71069
// exit ;
71067: GO 72009
// for i = 1 to mc_bases do
71069: LD_ADDR_VAR 0 2
71073: PUSH
71074: DOUBLE
71075: LD_INT 1
71077: DEC
71078: ST_TO_ADDR
71079: LD_EXP 64
71083: PUSH
71084: FOR_TO
71085: IFFALSE 72007
// begin if not mc_bases [ i ] or mc_scan [ i ] then
71087: LD_EXP 64
71091: PUSH
71092: LD_VAR 0 2
71096: ARRAY
71097: NOT
71098: PUSH
71099: LD_EXP 87
71103: PUSH
71104: LD_VAR 0 2
71108: ARRAY
71109: OR
71110: IFFALSE 71114
// continue ;
71112: GO 71084
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71114: LD_ADDR_VAR 0 7
71118: PUSH
71119: LD_EXP 64
71123: PUSH
71124: LD_VAR 0 2
71128: ARRAY
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: PPUSH
71134: CALL_OW 248
71138: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
71139: LD_VAR 0 7
71143: PUSH
71144: LD_INT 3
71146: EQUAL
71147: PUSH
71148: LD_EXP 83
71152: PUSH
71153: LD_VAR 0 2
71157: ARRAY
71158: PUSH
71159: LD_EXP 86
71163: PUSH
71164: LD_VAR 0 2
71168: ARRAY
71169: UNION
71170: PPUSH
71171: LD_INT 33
71173: PUSH
71174: LD_INT 2
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PPUSH
71181: CALL_OW 72
71185: NOT
71186: OR
71187: IFFALSE 71191
// continue ;
71189: GO 71084
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71191: LD_ADDR_VAR 0 9
71195: PUSH
71196: LD_EXP 64
71200: PUSH
71201: LD_VAR 0 2
71205: ARRAY
71206: PPUSH
71207: LD_INT 30
71209: PUSH
71210: LD_INT 36
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PPUSH
71217: CALL_OW 72
71221: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
71222: LD_ADDR_VAR 0 10
71226: PUSH
71227: LD_EXP 83
71231: PUSH
71232: LD_VAR 0 2
71236: ARRAY
71237: PPUSH
71238: LD_INT 34
71240: PUSH
71241: LD_INT 31
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PPUSH
71248: CALL_OW 72
71252: ST_TO_ADDR
// if not cts and not mcts then
71253: LD_VAR 0 9
71257: NOT
71258: PUSH
71259: LD_VAR 0 10
71263: NOT
71264: AND
71265: IFFALSE 71269
// continue ;
71267: GO 71084
// x := cts ;
71269: LD_ADDR_VAR 0 11
71273: PUSH
71274: LD_VAR 0 9
71278: ST_TO_ADDR
// if not x then
71279: LD_VAR 0 11
71283: NOT
71284: IFFALSE 71296
// x := mcts ;
71286: LD_ADDR_VAR 0 11
71290: PUSH
71291: LD_VAR 0 10
71295: ST_TO_ADDR
// if not x then
71296: LD_VAR 0 11
71300: NOT
71301: IFFALSE 71305
// continue ;
71303: GO 71084
// if mc_remote_driver [ i ] then
71305: LD_EXP 104
71309: PUSH
71310: LD_VAR 0 2
71314: ARRAY
71315: IFFALSE 71702
// for j in mc_remote_driver [ i ] do
71317: LD_ADDR_VAR 0 3
71321: PUSH
71322: LD_EXP 104
71326: PUSH
71327: LD_VAR 0 2
71331: ARRAY
71332: PUSH
71333: FOR_IN
71334: IFFALSE 71700
// begin if GetClass ( j ) <> 3 then
71336: LD_VAR 0 3
71340: PPUSH
71341: CALL_OW 257
71345: PUSH
71346: LD_INT 3
71348: NONEQUAL
71349: IFFALSE 71402
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
71351: LD_ADDR_EXP 104
71355: PUSH
71356: LD_EXP 104
71360: PPUSH
71361: LD_VAR 0 2
71365: PPUSH
71366: LD_EXP 104
71370: PUSH
71371: LD_VAR 0 2
71375: ARRAY
71376: PUSH
71377: LD_VAR 0 3
71381: DIFF
71382: PPUSH
71383: CALL_OW 1
71387: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71388: LD_VAR 0 3
71392: PPUSH
71393: LD_INT 0
71395: PPUSH
71396: CALL_OW 109
// continue ;
71400: GO 71333
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
71402: LD_EXP 83
71406: PUSH
71407: LD_VAR 0 2
71411: ARRAY
71412: PPUSH
71413: LD_INT 34
71415: PUSH
71416: LD_INT 31
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 58
71425: PUSH
71426: EMPTY
71427: LIST
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PPUSH
71433: CALL_OW 72
71437: PUSH
71438: LD_VAR 0 3
71442: PPUSH
71443: CALL 47061 0 1
71447: NOT
71448: AND
71449: IFFALSE 71520
// begin if IsInUnit ( j ) then
71451: LD_VAR 0 3
71455: PPUSH
71456: CALL_OW 310
71460: IFFALSE 71471
// ComExitBuilding ( j ) ;
71462: LD_VAR 0 3
71466: PPUSH
71467: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
71471: LD_VAR 0 3
71475: PPUSH
71476: LD_EXP 83
71480: PUSH
71481: LD_VAR 0 2
71485: ARRAY
71486: PPUSH
71487: LD_INT 34
71489: PUSH
71490: LD_INT 31
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 58
71499: PUSH
71500: EMPTY
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PPUSH
71507: CALL_OW 72
71511: PUSH
71512: LD_INT 1
71514: ARRAY
71515: PPUSH
71516: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
71520: LD_VAR 0 3
71524: PPUSH
71525: CALL_OW 310
71529: NOT
71530: PUSH
71531: LD_VAR 0 3
71535: PPUSH
71536: CALL_OW 310
71540: PPUSH
71541: CALL_OW 266
71545: PUSH
71546: LD_INT 36
71548: NONEQUAL
71549: PUSH
71550: LD_VAR 0 3
71554: PPUSH
71555: CALL 47061 0 1
71559: NOT
71560: AND
71561: OR
71562: IFFALSE 71698
// begin if IsInUnit ( j ) then
71564: LD_VAR 0 3
71568: PPUSH
71569: CALL_OW 310
71573: IFFALSE 71584
// ComExitBuilding ( j ) ;
71575: LD_VAR 0 3
71579: PPUSH
71580: CALL_OW 122
// ct := 0 ;
71584: LD_ADDR_VAR 0 8
71588: PUSH
71589: LD_INT 0
71591: ST_TO_ADDR
// for k in x do
71592: LD_ADDR_VAR 0 4
71596: PUSH
71597: LD_VAR 0 11
71601: PUSH
71602: FOR_IN
71603: IFFALSE 71676
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
71605: LD_VAR 0 4
71609: PPUSH
71610: CALL_OW 264
71614: PUSH
71615: LD_INT 31
71617: EQUAL
71618: PUSH
71619: LD_VAR 0 4
71623: PPUSH
71624: CALL_OW 311
71628: NOT
71629: AND
71630: PUSH
71631: LD_VAR 0 4
71635: PPUSH
71636: CALL_OW 266
71640: PUSH
71641: LD_INT 36
71643: EQUAL
71644: PUSH
71645: LD_VAR 0 4
71649: PPUSH
71650: CALL_OW 313
71654: PUSH
71655: LD_INT 3
71657: LESS
71658: AND
71659: OR
71660: IFFALSE 71674
// begin ct := k ;
71662: LD_ADDR_VAR 0 8
71666: PUSH
71667: LD_VAR 0 4
71671: ST_TO_ADDR
// break ;
71672: GO 71676
// end ;
71674: GO 71602
71676: POP
71677: POP
// if ct then
71678: LD_VAR 0 8
71682: IFFALSE 71698
// ComEnterUnit ( j , ct ) ;
71684: LD_VAR 0 3
71688: PPUSH
71689: LD_VAR 0 8
71693: PPUSH
71694: CALL_OW 120
// end ; end ;
71698: GO 71333
71700: POP
71701: POP
// places := 0 ;
71702: LD_ADDR_VAR 0 5
71706: PUSH
71707: LD_INT 0
71709: ST_TO_ADDR
// for j = 1 to x do
71710: LD_ADDR_VAR 0 3
71714: PUSH
71715: DOUBLE
71716: LD_INT 1
71718: DEC
71719: ST_TO_ADDR
71720: LD_VAR 0 11
71724: PUSH
71725: FOR_TO
71726: IFFALSE 71802
// if GetWeapon ( x [ j ] ) = ar_control_tower then
71728: LD_VAR 0 11
71732: PUSH
71733: LD_VAR 0 3
71737: ARRAY
71738: PPUSH
71739: CALL_OW 264
71743: PUSH
71744: LD_INT 31
71746: EQUAL
71747: IFFALSE 71765
// places := places + 1 else
71749: LD_ADDR_VAR 0 5
71753: PUSH
71754: LD_VAR 0 5
71758: PUSH
71759: LD_INT 1
71761: PLUS
71762: ST_TO_ADDR
71763: GO 71800
// if GetBType ( x [ j ] ) = b_control_tower then
71765: LD_VAR 0 11
71769: PUSH
71770: LD_VAR 0 3
71774: ARRAY
71775: PPUSH
71776: CALL_OW 266
71780: PUSH
71781: LD_INT 36
71783: EQUAL
71784: IFFALSE 71800
// places := places + 3 ;
71786: LD_ADDR_VAR 0 5
71790: PUSH
71791: LD_VAR 0 5
71795: PUSH
71796: LD_INT 3
71798: PLUS
71799: ST_TO_ADDR
71800: GO 71725
71802: POP
71803: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
71804: LD_VAR 0 5
71808: PUSH
71809: LD_INT 0
71811: EQUAL
71812: PUSH
71813: LD_VAR 0 5
71817: PUSH
71818: LD_EXP 104
71822: PUSH
71823: LD_VAR 0 2
71827: ARRAY
71828: LESSEQUAL
71829: OR
71830: IFFALSE 71834
// continue ;
71832: GO 71084
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
71834: LD_ADDR_VAR 0 6
71838: PUSH
71839: LD_EXP 64
71843: PUSH
71844: LD_VAR 0 2
71848: ARRAY
71849: PPUSH
71850: LD_INT 25
71852: PUSH
71853: LD_INT 3
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PPUSH
71860: CALL_OW 72
71864: PUSH
71865: LD_EXP 104
71869: PUSH
71870: LD_VAR 0 2
71874: ARRAY
71875: DIFF
71876: PPUSH
71877: LD_INT 3
71879: PPUSH
71880: CALL 47961 0 2
71884: ST_TO_ADDR
// for j in tmp do
71885: LD_ADDR_VAR 0 3
71889: PUSH
71890: LD_VAR 0 6
71894: PUSH
71895: FOR_IN
71896: IFFALSE 71931
// if GetTag ( j ) > 0 then
71898: LD_VAR 0 3
71902: PPUSH
71903: CALL_OW 110
71907: PUSH
71908: LD_INT 0
71910: GREATER
71911: IFFALSE 71929
// tmp := tmp diff j ;
71913: LD_ADDR_VAR 0 6
71917: PUSH
71918: LD_VAR 0 6
71922: PUSH
71923: LD_VAR 0 3
71927: DIFF
71928: ST_TO_ADDR
71929: GO 71895
71931: POP
71932: POP
// if not tmp then
71933: LD_VAR 0 6
71937: NOT
71938: IFFALSE 71942
// continue ;
71940: GO 71084
// if places then
71942: LD_VAR 0 5
71946: IFFALSE 72005
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
71948: LD_ADDR_EXP 104
71952: PUSH
71953: LD_EXP 104
71957: PPUSH
71958: LD_VAR 0 2
71962: PPUSH
71963: LD_EXP 104
71967: PUSH
71968: LD_VAR 0 2
71972: ARRAY
71973: PUSH
71974: LD_VAR 0 6
71978: PUSH
71979: LD_INT 1
71981: ARRAY
71982: UNION
71983: PPUSH
71984: CALL_OW 1
71988: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
71989: LD_VAR 0 6
71993: PUSH
71994: LD_INT 1
71996: ARRAY
71997: PPUSH
71998: LD_INT 126
72000: PPUSH
72001: CALL_OW 109
// end ; end ;
72005: GO 71084
72007: POP
72008: POP
// end ;
72009: LD_VAR 0 1
72013: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
72014: LD_INT 0
72016: PPUSH
72017: PPUSH
72018: PPUSH
72019: PPUSH
72020: PPUSH
72021: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
72022: LD_VAR 0 1
72026: NOT
72027: PUSH
72028: LD_VAR 0 2
72032: NOT
72033: OR
72034: PUSH
72035: LD_VAR 0 3
72039: NOT
72040: OR
72041: PUSH
72042: LD_VAR 0 4
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: LD_INT 2
72052: PUSH
72053: LD_INT 3
72055: PUSH
72056: LD_INT 4
72058: PUSH
72059: LD_INT 5
72061: PUSH
72062: LD_INT 8
72064: PUSH
72065: LD_INT 9
72067: PUSH
72068: LD_INT 15
72070: PUSH
72071: LD_INT 16
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: IN
72085: NOT
72086: OR
72087: IFFALSE 72091
// exit ;
72089: GO 72991
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72091: LD_ADDR_VAR 0 2
72095: PUSH
72096: LD_VAR 0 2
72100: PPUSH
72101: LD_INT 21
72103: PUSH
72104: LD_INT 3
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 24
72113: PUSH
72114: LD_INT 250
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PPUSH
72125: CALL_OW 72
72129: ST_TO_ADDR
// case class of 1 , 15 :
72130: LD_VAR 0 4
72134: PUSH
72135: LD_INT 1
72137: DOUBLE
72138: EQUAL
72139: IFTRUE 72149
72141: LD_INT 15
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72149
72147: GO 72234
72149: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72150: LD_ADDR_VAR 0 8
72154: PUSH
72155: LD_VAR 0 2
72159: PPUSH
72160: LD_INT 2
72162: PUSH
72163: LD_INT 30
72165: PUSH
72166: LD_INT 32
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 30
72175: PUSH
72176: LD_INT 31
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: LIST
72187: PPUSH
72188: CALL_OW 72
72192: PUSH
72193: LD_VAR 0 2
72197: PPUSH
72198: LD_INT 2
72200: PUSH
72201: LD_INT 30
72203: PUSH
72204: LD_INT 4
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 30
72213: PUSH
72214: LD_INT 5
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: PPUSH
72226: CALL_OW 72
72230: ADD
72231: ST_TO_ADDR
72232: GO 72480
72234: LD_INT 2
72236: DOUBLE
72237: EQUAL
72238: IFTRUE 72248
72240: LD_INT 16
72242: DOUBLE
72243: EQUAL
72244: IFTRUE 72248
72246: GO 72294
72248: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72249: LD_ADDR_VAR 0 8
72253: PUSH
72254: LD_VAR 0 2
72258: PPUSH
72259: LD_INT 2
72261: PUSH
72262: LD_INT 30
72264: PUSH
72265: LD_INT 0
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 30
72274: PUSH
72275: LD_INT 1
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: LIST
72286: PPUSH
72287: CALL_OW 72
72291: ST_TO_ADDR
72292: GO 72480
72294: LD_INT 3
72296: DOUBLE
72297: EQUAL
72298: IFTRUE 72302
72300: GO 72348
72302: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72303: LD_ADDR_VAR 0 8
72307: PUSH
72308: LD_VAR 0 2
72312: PPUSH
72313: LD_INT 2
72315: PUSH
72316: LD_INT 30
72318: PUSH
72319: LD_INT 2
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 30
72328: PUSH
72329: LD_INT 3
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: LIST
72340: PPUSH
72341: CALL_OW 72
72345: ST_TO_ADDR
72346: GO 72480
72348: LD_INT 4
72350: DOUBLE
72351: EQUAL
72352: IFTRUE 72356
72354: GO 72413
72356: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72357: LD_ADDR_VAR 0 8
72361: PUSH
72362: LD_VAR 0 2
72366: PPUSH
72367: LD_INT 2
72369: PUSH
72370: LD_INT 30
72372: PUSH
72373: LD_INT 6
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 30
72382: PUSH
72383: LD_INT 7
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 30
72392: PUSH
72393: LD_INT 8
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: PPUSH
72406: CALL_OW 72
72410: ST_TO_ADDR
72411: GO 72480
72413: LD_INT 5
72415: DOUBLE
72416: EQUAL
72417: IFTRUE 72433
72419: LD_INT 8
72421: DOUBLE
72422: EQUAL
72423: IFTRUE 72433
72425: LD_INT 9
72427: DOUBLE
72428: EQUAL
72429: IFTRUE 72433
72431: GO 72479
72433: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72434: LD_ADDR_VAR 0 8
72438: PUSH
72439: LD_VAR 0 2
72443: PPUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 30
72449: PUSH
72450: LD_INT 4
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 30
72459: PUSH
72460: LD_INT 5
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: LIST
72471: PPUSH
72472: CALL_OW 72
72476: ST_TO_ADDR
72477: GO 72480
72479: POP
// if not tmp then
72480: LD_VAR 0 8
72484: NOT
72485: IFFALSE 72489
// exit ;
72487: GO 72991
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72489: LD_VAR 0 4
72493: PUSH
72494: LD_INT 1
72496: PUSH
72497: LD_INT 15
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: IN
72504: PUSH
72505: LD_EXP 73
72509: PUSH
72510: LD_VAR 0 1
72514: ARRAY
72515: AND
72516: IFFALSE 72672
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72518: LD_ADDR_VAR 0 9
72522: PUSH
72523: LD_EXP 73
72527: PUSH
72528: LD_VAR 0 1
72532: ARRAY
72533: PUSH
72534: LD_INT 1
72536: ARRAY
72537: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72538: LD_VAR 0 9
72542: PUSH
72543: LD_EXP 74
72547: PUSH
72548: LD_VAR 0 1
72552: ARRAY
72553: IN
72554: NOT
72555: IFFALSE 72670
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72557: LD_ADDR_EXP 74
72561: PUSH
72562: LD_EXP 74
72566: PPUSH
72567: LD_VAR 0 1
72571: PUSH
72572: LD_EXP 74
72576: PUSH
72577: LD_VAR 0 1
72581: ARRAY
72582: PUSH
72583: LD_INT 1
72585: PLUS
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PPUSH
72591: LD_VAR 0 9
72595: PPUSH
72596: CALL 18412 0 3
72600: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72601: LD_ADDR_EXP 73
72605: PUSH
72606: LD_EXP 73
72610: PPUSH
72611: LD_VAR 0 1
72615: PPUSH
72616: LD_EXP 73
72620: PUSH
72621: LD_VAR 0 1
72625: ARRAY
72626: PUSH
72627: LD_VAR 0 9
72631: DIFF
72632: PPUSH
72633: CALL_OW 1
72637: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72638: LD_VAR 0 3
72642: PPUSH
72643: LD_EXP 74
72647: PUSH
72648: LD_VAR 0 1
72652: ARRAY
72653: PUSH
72654: LD_EXP 74
72658: PUSH
72659: LD_VAR 0 1
72663: ARRAY
72664: ARRAY
72665: PPUSH
72666: CALL_OW 120
// end ; exit ;
72670: GO 72991
// end ; if tmp > 1 then
72672: LD_VAR 0 8
72676: PUSH
72677: LD_INT 1
72679: GREATER
72680: IFFALSE 72784
// for i = 2 to tmp do
72682: LD_ADDR_VAR 0 6
72686: PUSH
72687: DOUBLE
72688: LD_INT 2
72690: DEC
72691: ST_TO_ADDR
72692: LD_VAR 0 8
72696: PUSH
72697: FOR_TO
72698: IFFALSE 72782
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72700: LD_VAR 0 8
72704: PUSH
72705: LD_VAR 0 6
72709: ARRAY
72710: PPUSH
72711: CALL_OW 461
72715: PUSH
72716: LD_INT 6
72718: EQUAL
72719: IFFALSE 72780
// begin x := tmp [ i ] ;
72721: LD_ADDR_VAR 0 9
72725: PUSH
72726: LD_VAR 0 8
72730: PUSH
72731: LD_VAR 0 6
72735: ARRAY
72736: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72737: LD_ADDR_VAR 0 8
72741: PUSH
72742: LD_VAR 0 8
72746: PPUSH
72747: LD_VAR 0 6
72751: PPUSH
72752: CALL_OW 3
72756: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72757: LD_ADDR_VAR 0 8
72761: PUSH
72762: LD_VAR 0 8
72766: PPUSH
72767: LD_INT 1
72769: PPUSH
72770: LD_VAR 0 9
72774: PPUSH
72775: CALL_OW 2
72779: ST_TO_ADDR
// end ;
72780: GO 72697
72782: POP
72783: POP
// for i in tmp do
72784: LD_ADDR_VAR 0 6
72788: PUSH
72789: LD_VAR 0 8
72793: PUSH
72794: FOR_IN
72795: IFFALSE 72864
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72797: LD_VAR 0 6
72801: PPUSH
72802: CALL_OW 313
72806: PUSH
72807: LD_INT 6
72809: LESS
72810: PUSH
72811: LD_VAR 0 6
72815: PPUSH
72816: CALL_OW 266
72820: PUSH
72821: LD_INT 31
72823: PUSH
72824: LD_INT 32
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: IN
72831: NOT
72832: AND
72833: PUSH
72834: LD_VAR 0 6
72838: PPUSH
72839: CALL_OW 313
72843: PUSH
72844: LD_INT 0
72846: EQUAL
72847: OR
72848: IFFALSE 72862
// begin j := i ;
72850: LD_ADDR_VAR 0 7
72854: PUSH
72855: LD_VAR 0 6
72859: ST_TO_ADDR
// break ;
72860: GO 72864
// end ; end ;
72862: GO 72794
72864: POP
72865: POP
// if j then
72866: LD_VAR 0 7
72870: IFFALSE 72888
// ComEnterUnit ( unit , j ) else
72872: LD_VAR 0 3
72876: PPUSH
72877: LD_VAR 0 7
72881: PPUSH
72882: CALL_OW 120
72886: GO 72991
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72888: LD_ADDR_VAR 0 10
72892: PUSH
72893: LD_VAR 0 2
72897: PPUSH
72898: LD_INT 2
72900: PUSH
72901: LD_INT 30
72903: PUSH
72904: LD_INT 0
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 30
72913: PUSH
72914: LD_INT 1
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: LIST
72925: PPUSH
72926: CALL_OW 72
72930: ST_TO_ADDR
// if depot then
72931: LD_VAR 0 10
72935: IFFALSE 72991
// begin depot := NearestUnitToUnit ( depot , unit ) ;
72937: LD_ADDR_VAR 0 10
72941: PUSH
72942: LD_VAR 0 10
72946: PPUSH
72947: LD_VAR 0 3
72951: PPUSH
72952: CALL_OW 74
72956: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
72957: LD_VAR 0 3
72961: PPUSH
72962: LD_VAR 0 10
72966: PPUSH
72967: CALL_OW 296
72971: PUSH
72972: LD_INT 10
72974: GREATER
72975: IFFALSE 72991
// ComStandNearbyBuilding ( unit , depot ) ;
72977: LD_VAR 0 3
72981: PPUSH
72982: LD_VAR 0 10
72986: PPUSH
72987: CALL 15026 0 2
// end ; end ; end ;
72991: LD_VAR 0 5
72995: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
72996: LD_INT 0
72998: PPUSH
72999: PPUSH
73000: PPUSH
73001: PPUSH
// if not mc_bases then
73002: LD_EXP 64
73006: NOT
73007: IFFALSE 73011
// exit ;
73009: GO 73250
// for i = 1 to mc_bases do
73011: LD_ADDR_VAR 0 2
73015: PUSH
73016: DOUBLE
73017: LD_INT 1
73019: DEC
73020: ST_TO_ADDR
73021: LD_EXP 64
73025: PUSH
73026: FOR_TO
73027: IFFALSE 73248
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
73029: LD_ADDR_VAR 0 4
73033: PUSH
73034: LD_EXP 64
73038: PUSH
73039: LD_VAR 0 2
73043: ARRAY
73044: PPUSH
73045: LD_INT 21
73047: PUSH
73048: LD_INT 1
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PPUSH
73055: CALL_OW 72
73059: PUSH
73060: LD_EXP 93
73064: PUSH
73065: LD_VAR 0 2
73069: ARRAY
73070: UNION
73071: ST_TO_ADDR
// if not tmp then
73072: LD_VAR 0 4
73076: NOT
73077: IFFALSE 73081
// continue ;
73079: GO 73026
// for j in tmp do
73081: LD_ADDR_VAR 0 3
73085: PUSH
73086: LD_VAR 0 4
73090: PUSH
73091: FOR_IN
73092: IFFALSE 73244
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73094: LD_VAR 0 3
73098: PPUSH
73099: CALL_OW 110
73103: NOT
73104: PUSH
73105: LD_VAR 0 3
73109: PPUSH
73110: CALL_OW 314
73114: NOT
73115: AND
73116: PUSH
73117: LD_VAR 0 3
73121: PPUSH
73122: CALL_OW 311
73126: NOT
73127: AND
73128: PUSH
73129: LD_VAR 0 3
73133: PPUSH
73134: CALL_OW 310
73138: NOT
73139: AND
73140: PUSH
73141: LD_VAR 0 3
73145: PUSH
73146: LD_EXP 67
73150: PUSH
73151: LD_VAR 0 2
73155: ARRAY
73156: PUSH
73157: LD_INT 1
73159: ARRAY
73160: IN
73161: NOT
73162: AND
73163: PUSH
73164: LD_VAR 0 3
73168: PUSH
73169: LD_EXP 67
73173: PUSH
73174: LD_VAR 0 2
73178: ARRAY
73179: PUSH
73180: LD_INT 2
73182: ARRAY
73183: IN
73184: NOT
73185: AND
73186: PUSH
73187: LD_VAR 0 3
73191: PUSH
73192: LD_EXP 76
73196: PUSH
73197: LD_VAR 0 2
73201: ARRAY
73202: IN
73203: NOT
73204: AND
73205: IFFALSE 73242
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73207: LD_VAR 0 2
73211: PPUSH
73212: LD_EXP 64
73216: PUSH
73217: LD_VAR 0 2
73221: ARRAY
73222: PPUSH
73223: LD_VAR 0 3
73227: PPUSH
73228: LD_VAR 0 3
73232: PPUSH
73233: CALL_OW 257
73237: PPUSH
73238: CALL 72014 0 4
// end ;
73242: GO 73091
73244: POP
73245: POP
// end ;
73246: GO 73026
73248: POP
73249: POP
// end ;
73250: LD_VAR 0 1
73254: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73255: LD_INT 0
73257: PPUSH
73258: PPUSH
73259: PPUSH
73260: PPUSH
73261: PPUSH
73262: PPUSH
// if not mc_bases [ base ] then
73263: LD_EXP 64
73267: PUSH
73268: LD_VAR 0 1
73272: ARRAY
73273: NOT
73274: IFFALSE 73278
// exit ;
73276: GO 73460
// tmp := [ ] ;
73278: LD_ADDR_VAR 0 6
73282: PUSH
73283: EMPTY
73284: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73285: LD_ADDR_VAR 0 7
73289: PUSH
73290: LD_VAR 0 3
73294: PPUSH
73295: LD_INT 0
73297: PPUSH
73298: CALL_OW 517
73302: ST_TO_ADDR
// if not list then
73303: LD_VAR 0 7
73307: NOT
73308: IFFALSE 73312
// exit ;
73310: GO 73460
// for i = 1 to amount do
73312: LD_ADDR_VAR 0 5
73316: PUSH
73317: DOUBLE
73318: LD_INT 1
73320: DEC
73321: ST_TO_ADDR
73322: LD_VAR 0 2
73326: PUSH
73327: FOR_TO
73328: IFFALSE 73408
// begin x := rand ( 1 , list [ 1 ] ) ;
73330: LD_ADDR_VAR 0 8
73334: PUSH
73335: LD_INT 1
73337: PPUSH
73338: LD_VAR 0 7
73342: PUSH
73343: LD_INT 1
73345: ARRAY
73346: PPUSH
73347: CALL_OW 12
73351: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73352: LD_ADDR_VAR 0 6
73356: PUSH
73357: LD_VAR 0 6
73361: PPUSH
73362: LD_VAR 0 5
73366: PPUSH
73367: LD_VAR 0 7
73371: PUSH
73372: LD_INT 1
73374: ARRAY
73375: PUSH
73376: LD_VAR 0 8
73380: ARRAY
73381: PUSH
73382: LD_VAR 0 7
73386: PUSH
73387: LD_INT 2
73389: ARRAY
73390: PUSH
73391: LD_VAR 0 8
73395: ARRAY
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PPUSH
73401: CALL_OW 1
73405: ST_TO_ADDR
// end ;
73406: GO 73327
73408: POP
73409: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73410: LD_ADDR_EXP 77
73414: PUSH
73415: LD_EXP 77
73419: PPUSH
73420: LD_VAR 0 1
73424: PPUSH
73425: LD_VAR 0 6
73429: PPUSH
73430: CALL_OW 1
73434: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73435: LD_ADDR_EXP 79
73439: PUSH
73440: LD_EXP 79
73444: PPUSH
73445: LD_VAR 0 1
73449: PPUSH
73450: LD_VAR 0 3
73454: PPUSH
73455: CALL_OW 1
73459: ST_TO_ADDR
// end ;
73460: LD_VAR 0 4
73464: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73465: LD_INT 0
73467: PPUSH
// if not mc_bases [ base ] then
73468: LD_EXP 64
73472: PUSH
73473: LD_VAR 0 1
73477: ARRAY
73478: NOT
73479: IFFALSE 73483
// exit ;
73481: GO 73508
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73483: LD_ADDR_EXP 69
73487: PUSH
73488: LD_EXP 69
73492: PPUSH
73493: LD_VAR 0 1
73497: PPUSH
73498: LD_VAR 0 2
73502: PPUSH
73503: CALL_OW 1
73507: ST_TO_ADDR
// end ;
73508: LD_VAR 0 3
73512: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73513: LD_INT 0
73515: PPUSH
// if not mc_bases [ base ] then
73516: LD_EXP 64
73520: PUSH
73521: LD_VAR 0 1
73525: ARRAY
73526: NOT
73527: IFFALSE 73531
// exit ;
73529: GO 73568
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
73531: LD_ADDR_EXP 69
73535: PUSH
73536: LD_EXP 69
73540: PPUSH
73541: LD_VAR 0 1
73545: PPUSH
73546: LD_EXP 69
73550: PUSH
73551: LD_VAR 0 1
73555: ARRAY
73556: PUSH
73557: LD_VAR 0 2
73561: UNION
73562: PPUSH
73563: CALL_OW 1
73567: ST_TO_ADDR
// end ;
73568: LD_VAR 0 3
73572: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73573: LD_INT 0
73575: PPUSH
// if not mc_bases [ base ] then
73576: LD_EXP 64
73580: PUSH
73581: LD_VAR 0 1
73585: ARRAY
73586: NOT
73587: IFFALSE 73591
// exit ;
73589: GO 73616
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73591: LD_ADDR_EXP 85
73595: PUSH
73596: LD_EXP 85
73600: PPUSH
73601: LD_VAR 0 1
73605: PPUSH
73606: LD_VAR 0 2
73610: PPUSH
73611: CALL_OW 1
73615: ST_TO_ADDR
// end ;
73616: LD_VAR 0 3
73620: RET
// export function MC_InsertProduceList ( base , components ) ; begin
73621: LD_INT 0
73623: PPUSH
// if not mc_bases [ base ] then
73624: LD_EXP 64
73628: PUSH
73629: LD_VAR 0 1
73633: ARRAY
73634: NOT
73635: IFFALSE 73639
// exit ;
73637: GO 73676
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
73639: LD_ADDR_EXP 85
73643: PUSH
73644: LD_EXP 85
73648: PPUSH
73649: LD_VAR 0 1
73653: PPUSH
73654: LD_EXP 85
73658: PUSH
73659: LD_VAR 0 1
73663: ARRAY
73664: PUSH
73665: LD_VAR 0 2
73669: ADD
73670: PPUSH
73671: CALL_OW 1
73675: ST_TO_ADDR
// end ;
73676: LD_VAR 0 3
73680: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73681: LD_INT 0
73683: PPUSH
// if not mc_bases [ base ] then
73684: LD_EXP 64
73688: PUSH
73689: LD_VAR 0 1
73693: ARRAY
73694: NOT
73695: IFFALSE 73699
// exit ;
73697: GO 73753
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73699: LD_ADDR_EXP 86
73703: PUSH
73704: LD_EXP 86
73708: PPUSH
73709: LD_VAR 0 1
73713: PPUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: CALL_OW 1
73723: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73724: LD_ADDR_EXP 75
73728: PUSH
73729: LD_EXP 75
73733: PPUSH
73734: LD_VAR 0 1
73738: PPUSH
73739: LD_VAR 0 2
73743: PUSH
73744: LD_INT 0
73746: PLUS
73747: PPUSH
73748: CALL_OW 1
73752: ST_TO_ADDR
// end ;
73753: LD_VAR 0 3
73757: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73758: LD_INT 0
73760: PPUSH
// if not mc_bases [ base ] then
73761: LD_EXP 64
73765: PUSH
73766: LD_VAR 0 1
73770: ARRAY
73771: NOT
73772: IFFALSE 73776
// exit ;
73774: GO 73801
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73776: LD_ADDR_EXP 75
73780: PUSH
73781: LD_EXP 75
73785: PPUSH
73786: LD_VAR 0 1
73790: PPUSH
73791: LD_VAR 0 2
73795: PPUSH
73796: CALL_OW 1
73800: ST_TO_ADDR
// end ;
73801: LD_VAR 0 3
73805: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73806: LD_INT 0
73808: PPUSH
73809: PPUSH
73810: PPUSH
73811: PPUSH
// if not mc_bases [ base ] then
73812: LD_EXP 64
73816: PUSH
73817: LD_VAR 0 1
73821: ARRAY
73822: NOT
73823: IFFALSE 73827
// exit ;
73825: GO 73892
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73827: LD_ADDR_EXP 84
73831: PUSH
73832: LD_EXP 84
73836: PPUSH
73837: LD_VAR 0 1
73841: PUSH
73842: LD_EXP 84
73846: PUSH
73847: LD_VAR 0 1
73851: ARRAY
73852: PUSH
73853: LD_INT 1
73855: PLUS
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PPUSH
73861: LD_VAR 0 1
73865: PUSH
73866: LD_VAR 0 2
73870: PUSH
73871: LD_VAR 0 3
73875: PUSH
73876: LD_VAR 0 4
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: PPUSH
73887: CALL 18412 0 3
73891: ST_TO_ADDR
// end ;
73892: LD_VAR 0 5
73896: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
73897: LD_INT 0
73899: PPUSH
// if not mc_bases [ base ] then
73900: LD_EXP 64
73904: PUSH
73905: LD_VAR 0 1
73909: ARRAY
73910: NOT
73911: IFFALSE 73915
// exit ;
73913: GO 73940
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
73915: LD_ADDR_EXP 101
73919: PUSH
73920: LD_EXP 101
73924: PPUSH
73925: LD_VAR 0 1
73929: PPUSH
73930: LD_VAR 0 2
73934: PPUSH
73935: CALL_OW 1
73939: ST_TO_ADDR
// end ;
73940: LD_VAR 0 3
73944: RET
// export function MC_GetMinesField ( base ) ; begin
73945: LD_INT 0
73947: PPUSH
// result := mc_mines [ base ] ;
73948: LD_ADDR_VAR 0 2
73952: PUSH
73953: LD_EXP 77
73957: PUSH
73958: LD_VAR 0 1
73962: ARRAY
73963: ST_TO_ADDR
// end ;
73964: LD_VAR 0 2
73968: RET
// export function MC_GetProduceList ( base ) ; begin
73969: LD_INT 0
73971: PPUSH
// result := mc_produce [ base ] ;
73972: LD_ADDR_VAR 0 2
73976: PUSH
73977: LD_EXP 85
73981: PUSH
73982: LD_VAR 0 1
73986: ARRAY
73987: ST_TO_ADDR
// end ;
73988: LD_VAR 0 2
73992: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
73993: LD_INT 0
73995: PPUSH
73996: PPUSH
// if not mc_bases then
73997: LD_EXP 64
74001: NOT
74002: IFFALSE 74006
// exit ;
74004: GO 74071
// if mc_bases [ base ] then
74006: LD_EXP 64
74010: PUSH
74011: LD_VAR 0 1
74015: ARRAY
74016: IFFALSE 74071
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74018: LD_ADDR_VAR 0 3
74022: PUSH
74023: LD_EXP 64
74027: PUSH
74028: LD_VAR 0 1
74032: ARRAY
74033: PPUSH
74034: LD_INT 30
74036: PUSH
74037: LD_VAR 0 2
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PPUSH
74046: CALL_OW 72
74050: ST_TO_ADDR
// if result then
74051: LD_VAR 0 3
74055: IFFALSE 74071
// result := result [ 1 ] ;
74057: LD_ADDR_VAR 0 3
74061: PUSH
74062: LD_VAR 0 3
74066: PUSH
74067: LD_INT 1
74069: ARRAY
74070: ST_TO_ADDR
// end ; end ;
74071: LD_VAR 0 3
74075: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
74076: LD_INT 0
74078: PPUSH
74079: PPUSH
// if not mc_bases then
74080: LD_EXP 64
74084: NOT
74085: IFFALSE 74089
// exit ;
74087: GO 74134
// if mc_bases [ base ] then
74089: LD_EXP 64
74093: PUSH
74094: LD_VAR 0 1
74098: ARRAY
74099: IFFALSE 74134
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74101: LD_ADDR_VAR 0 3
74105: PUSH
74106: LD_EXP 64
74110: PUSH
74111: LD_VAR 0 1
74115: ARRAY
74116: PPUSH
74117: LD_INT 30
74119: PUSH
74120: LD_VAR 0 2
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PPUSH
74129: CALL_OW 72
74133: ST_TO_ADDR
// end ;
74134: LD_VAR 0 3
74138: RET
// export function MC_SetTame ( base , area ) ; begin
74139: LD_INT 0
74141: PPUSH
// if not mc_bases or not base then
74142: LD_EXP 64
74146: NOT
74147: PUSH
74148: LD_VAR 0 1
74152: NOT
74153: OR
74154: IFFALSE 74158
// exit ;
74156: GO 74183
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74158: LD_ADDR_EXP 92
74162: PUSH
74163: LD_EXP 92
74167: PPUSH
74168: LD_VAR 0 1
74172: PPUSH
74173: LD_VAR 0 2
74177: PPUSH
74178: CALL_OW 1
74182: ST_TO_ADDR
// end ;
74183: LD_VAR 0 3
74187: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74188: LD_INT 0
74190: PPUSH
74191: PPUSH
// if not mc_bases or not base then
74192: LD_EXP 64
74196: NOT
74197: PUSH
74198: LD_VAR 0 1
74202: NOT
74203: OR
74204: IFFALSE 74208
// exit ;
74206: GO 74310
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74208: LD_ADDR_VAR 0 4
74212: PUSH
74213: LD_EXP 64
74217: PUSH
74218: LD_VAR 0 1
74222: ARRAY
74223: PPUSH
74224: LD_INT 30
74226: PUSH
74227: LD_VAR 0 2
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PPUSH
74236: CALL_OW 72
74240: ST_TO_ADDR
// if not tmp then
74241: LD_VAR 0 4
74245: NOT
74246: IFFALSE 74250
// exit ;
74248: GO 74310
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74250: LD_ADDR_EXP 96
74254: PUSH
74255: LD_EXP 96
74259: PPUSH
74260: LD_VAR 0 1
74264: PPUSH
74265: LD_EXP 96
74269: PUSH
74270: LD_VAR 0 1
74274: ARRAY
74275: PPUSH
74276: LD_EXP 96
74280: PUSH
74281: LD_VAR 0 1
74285: ARRAY
74286: PUSH
74287: LD_INT 1
74289: PLUS
74290: PPUSH
74291: LD_VAR 0 4
74295: PUSH
74296: LD_INT 1
74298: ARRAY
74299: PPUSH
74300: CALL_OW 2
74304: PPUSH
74305: CALL_OW 1
74309: ST_TO_ADDR
// end ;
74310: LD_VAR 0 3
74314: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74315: LD_INT 0
74317: PPUSH
74318: PPUSH
// if not mc_bases or not base or not kinds then
74319: LD_EXP 64
74323: NOT
74324: PUSH
74325: LD_VAR 0 1
74329: NOT
74330: OR
74331: PUSH
74332: LD_VAR 0 2
74336: NOT
74337: OR
74338: IFFALSE 74342
// exit ;
74340: GO 74403
// for i in kinds do
74342: LD_ADDR_VAR 0 4
74346: PUSH
74347: LD_VAR 0 2
74351: PUSH
74352: FOR_IN
74353: IFFALSE 74401
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74355: LD_ADDR_EXP 98
74359: PUSH
74360: LD_EXP 98
74364: PPUSH
74365: LD_VAR 0 1
74369: PUSH
74370: LD_EXP 98
74374: PUSH
74375: LD_VAR 0 1
74379: ARRAY
74380: PUSH
74381: LD_INT 1
74383: PLUS
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PPUSH
74389: LD_VAR 0 4
74393: PPUSH
74394: CALL 18412 0 3
74398: ST_TO_ADDR
74399: GO 74352
74401: POP
74402: POP
// end ;
74403: LD_VAR 0 3
74407: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74408: LD_INT 0
74410: PPUSH
// if not mc_bases or not base or not areas then
74411: LD_EXP 64
74415: NOT
74416: PUSH
74417: LD_VAR 0 1
74421: NOT
74422: OR
74423: PUSH
74424: LD_VAR 0 2
74428: NOT
74429: OR
74430: IFFALSE 74434
// exit ;
74432: GO 74459
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74434: LD_ADDR_EXP 82
74438: PUSH
74439: LD_EXP 82
74443: PPUSH
74444: LD_VAR 0 1
74448: PPUSH
74449: LD_VAR 0 2
74453: PPUSH
74454: CALL_OW 1
74458: ST_TO_ADDR
// end ;
74459: LD_VAR 0 3
74463: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
74464: LD_INT 0
74466: PPUSH
// if not mc_bases or not base or not teleports_exit then
74467: LD_EXP 64
74471: NOT
74472: PUSH
74473: LD_VAR 0 1
74477: NOT
74478: OR
74479: PUSH
74480: LD_VAR 0 2
74484: NOT
74485: OR
74486: IFFALSE 74490
// exit ;
74488: GO 74515
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
74490: LD_ADDR_EXP 99
74494: PUSH
74495: LD_EXP 99
74499: PPUSH
74500: LD_VAR 0 1
74504: PPUSH
74505: LD_VAR 0 2
74509: PPUSH
74510: CALL_OW 1
74514: ST_TO_ADDR
// end ;
74515: LD_VAR 0 3
74519: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74520: LD_INT 0
74522: PPUSH
74523: PPUSH
74524: PPUSH
// if not mc_bases or not base or not ext_list then
74525: LD_EXP 64
74529: NOT
74530: PUSH
74531: LD_VAR 0 1
74535: NOT
74536: OR
74537: PUSH
74538: LD_VAR 0 5
74542: NOT
74543: OR
74544: IFFALSE 74548
// exit ;
74546: GO 74721
// tmp := GetFacExtXYD ( x , y , d ) ;
74548: LD_ADDR_VAR 0 8
74552: PUSH
74553: LD_VAR 0 2
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: LD_VAR 0 4
74567: PPUSH
74568: CALL 47091 0 3
74572: ST_TO_ADDR
// if not tmp then
74573: LD_VAR 0 8
74577: NOT
74578: IFFALSE 74582
// exit ;
74580: GO 74721
// for i in tmp do
74582: LD_ADDR_VAR 0 7
74586: PUSH
74587: LD_VAR 0 8
74591: PUSH
74592: FOR_IN
74593: IFFALSE 74719
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74595: LD_ADDR_EXP 69
74599: PUSH
74600: LD_EXP 69
74604: PPUSH
74605: LD_VAR 0 1
74609: PPUSH
74610: LD_EXP 69
74614: PUSH
74615: LD_VAR 0 1
74619: ARRAY
74620: PPUSH
74621: LD_EXP 69
74625: PUSH
74626: LD_VAR 0 1
74630: ARRAY
74631: PUSH
74632: LD_INT 1
74634: PLUS
74635: PPUSH
74636: LD_VAR 0 5
74640: PUSH
74641: LD_INT 1
74643: ARRAY
74644: PUSH
74645: LD_VAR 0 7
74649: PUSH
74650: LD_INT 1
74652: ARRAY
74653: PUSH
74654: LD_VAR 0 7
74658: PUSH
74659: LD_INT 2
74661: ARRAY
74662: PUSH
74663: LD_VAR 0 7
74667: PUSH
74668: LD_INT 3
74670: ARRAY
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: PPUSH
74678: CALL_OW 2
74682: PPUSH
74683: CALL_OW 1
74687: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74688: LD_ADDR_VAR 0 5
74692: PUSH
74693: LD_VAR 0 5
74697: PPUSH
74698: LD_INT 1
74700: PPUSH
74701: CALL_OW 3
74705: ST_TO_ADDR
// if not ext_list then
74706: LD_VAR 0 5
74710: NOT
74711: IFFALSE 74717
// exit ;
74713: POP
74714: POP
74715: GO 74721
// end ;
74717: GO 74592
74719: POP
74720: POP
// end ;
74721: LD_VAR 0 6
74725: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74726: LD_INT 0
74728: PPUSH
// if not mc_bases or not base or not weapon_list then
74729: LD_EXP 64
74733: NOT
74734: PUSH
74735: LD_VAR 0 1
74739: NOT
74740: OR
74741: PUSH
74742: LD_VAR 0 2
74746: NOT
74747: OR
74748: IFFALSE 74752
// exit ;
74750: GO 74777
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74752: LD_ADDR_EXP 103
74756: PUSH
74757: LD_EXP 103
74761: PPUSH
74762: LD_VAR 0 1
74766: PPUSH
74767: LD_VAR 0 2
74771: PPUSH
74772: CALL_OW 1
74776: ST_TO_ADDR
// end ;
74777: LD_VAR 0 3
74781: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74782: LD_INT 0
74784: PPUSH
// if not mc_bases or not base or not tech_list then
74785: LD_EXP 64
74789: NOT
74790: PUSH
74791: LD_VAR 0 1
74795: NOT
74796: OR
74797: PUSH
74798: LD_VAR 0 2
74802: NOT
74803: OR
74804: IFFALSE 74808
// exit ;
74806: GO 74833
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74808: LD_ADDR_EXP 91
74812: PUSH
74813: LD_EXP 91
74817: PPUSH
74818: LD_VAR 0 1
74822: PPUSH
74823: LD_VAR 0 2
74827: PPUSH
74828: CALL_OW 1
74832: ST_TO_ADDR
// end ;
74833: LD_VAR 0 3
74837: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74838: LD_INT 0
74840: PPUSH
// if not mc_bases or not parking_area or not base then
74841: LD_EXP 64
74845: NOT
74846: PUSH
74847: LD_VAR 0 2
74851: NOT
74852: OR
74853: PUSH
74854: LD_VAR 0 1
74858: NOT
74859: OR
74860: IFFALSE 74864
// exit ;
74862: GO 74889
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74864: LD_ADDR_EXP 88
74868: PUSH
74869: LD_EXP 88
74873: PPUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: LD_VAR 0 2
74883: PPUSH
74884: CALL_OW 1
74888: ST_TO_ADDR
// end ;
74889: LD_VAR 0 3
74893: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
74894: LD_INT 0
74896: PPUSH
// if not mc_bases or not base or not scan_area then
74897: LD_EXP 64
74901: NOT
74902: PUSH
74903: LD_VAR 0 1
74907: NOT
74908: OR
74909: PUSH
74910: LD_VAR 0 2
74914: NOT
74915: OR
74916: IFFALSE 74920
// exit ;
74918: GO 74945
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
74920: LD_ADDR_EXP 89
74924: PUSH
74925: LD_EXP 89
74929: PPUSH
74930: LD_VAR 0 1
74934: PPUSH
74935: LD_VAR 0 2
74939: PPUSH
74940: CALL_OW 1
74944: ST_TO_ADDR
// end ;
74945: LD_VAR 0 3
74949: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
74950: LD_INT 0
74952: PPUSH
74953: PPUSH
// if not mc_bases or not base then
74954: LD_EXP 64
74958: NOT
74959: PUSH
74960: LD_VAR 0 1
74964: NOT
74965: OR
74966: IFFALSE 74970
// exit ;
74968: GO 75034
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
74970: LD_ADDR_VAR 0 3
74974: PUSH
74975: LD_INT 1
74977: PUSH
74978: LD_INT 2
74980: PUSH
74981: LD_INT 3
74983: PUSH
74984: LD_INT 4
74986: PUSH
74987: LD_INT 11
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
74997: LD_ADDR_EXP 91
75001: PUSH
75002: LD_EXP 91
75006: PPUSH
75007: LD_VAR 0 1
75011: PPUSH
75012: LD_EXP 91
75016: PUSH
75017: LD_VAR 0 1
75021: ARRAY
75022: PUSH
75023: LD_VAR 0 3
75027: DIFF
75028: PPUSH
75029: CALL_OW 1
75033: ST_TO_ADDR
// end ;
75034: LD_VAR 0 2
75038: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
75039: LD_INT 0
75041: PPUSH
// result := mc_vehicles [ base ] ;
75042: LD_ADDR_VAR 0 3
75046: PUSH
75047: LD_EXP 83
75051: PUSH
75052: LD_VAR 0 1
75056: ARRAY
75057: ST_TO_ADDR
// if onlyCombat then
75058: LD_VAR 0 2
75062: IFFALSE 75227
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
75064: LD_ADDR_VAR 0 3
75068: PUSH
75069: LD_VAR 0 3
75073: PUSH
75074: LD_VAR 0 3
75078: PPUSH
75079: LD_INT 2
75081: PUSH
75082: LD_INT 34
75084: PUSH
75085: LD_INT 12
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 34
75094: PUSH
75095: LD_INT 51
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 34
75104: PUSH
75105: LD_EXP 49
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 34
75116: PUSH
75117: LD_INT 32
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 34
75126: PUSH
75127: LD_INT 13
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 34
75136: PUSH
75137: LD_INT 52
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 34
75146: PUSH
75147: LD_INT 14
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 34
75156: PUSH
75157: LD_INT 53
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 34
75166: PUSH
75167: LD_EXP 48
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PUSH
75176: LD_INT 34
75178: PUSH
75179: LD_INT 31
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 34
75188: PUSH
75189: LD_INT 48
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 34
75198: PUSH
75199: LD_INT 8
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: PPUSH
75221: CALL_OW 72
75225: DIFF
75226: ST_TO_ADDR
// end ; end_of_file
75227: LD_VAR 0 3
75231: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75232: LD_INT 0
75234: PPUSH
75235: PPUSH
75236: PPUSH
// if not mc_bases or not skirmish then
75237: LD_EXP 64
75241: NOT
75242: PUSH
75243: LD_EXP 62
75247: NOT
75248: OR
75249: IFFALSE 75253
// exit ;
75251: GO 75418
// for i = 1 to mc_bases do
75253: LD_ADDR_VAR 0 4
75257: PUSH
75258: DOUBLE
75259: LD_INT 1
75261: DEC
75262: ST_TO_ADDR
75263: LD_EXP 64
75267: PUSH
75268: FOR_TO
75269: IFFALSE 75416
// begin if sci in mc_bases [ i ] then
75271: LD_VAR 0 2
75275: PUSH
75276: LD_EXP 64
75280: PUSH
75281: LD_VAR 0 4
75285: ARRAY
75286: IN
75287: IFFALSE 75414
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75289: LD_ADDR_EXP 93
75293: PUSH
75294: LD_EXP 93
75298: PPUSH
75299: LD_VAR 0 4
75303: PUSH
75304: LD_EXP 93
75308: PUSH
75309: LD_VAR 0 4
75313: ARRAY
75314: PUSH
75315: LD_INT 1
75317: PLUS
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PPUSH
75323: LD_VAR 0 1
75327: PPUSH
75328: CALL 18412 0 3
75332: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75333: LD_ADDR_VAR 0 5
75337: PUSH
75338: LD_EXP 64
75342: PUSH
75343: LD_VAR 0 4
75347: ARRAY
75348: PPUSH
75349: LD_INT 2
75351: PUSH
75352: LD_INT 30
75354: PUSH
75355: LD_INT 0
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 30
75364: PUSH
75365: LD_INT 1
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: LIST
75376: PPUSH
75377: CALL_OW 72
75381: PPUSH
75382: LD_VAR 0 1
75386: PPUSH
75387: CALL_OW 74
75391: ST_TO_ADDR
// if tmp then
75392: LD_VAR 0 5
75396: IFFALSE 75412
// ComStandNearbyBuilding ( ape , tmp ) ;
75398: LD_VAR 0 1
75402: PPUSH
75403: LD_VAR 0 5
75407: PPUSH
75408: CALL 15026 0 2
// break ;
75412: GO 75416
// end ; end ;
75414: GO 75268
75416: POP
75417: POP
// end ;
75418: LD_VAR 0 3
75422: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75423: LD_INT 0
75425: PPUSH
75426: PPUSH
75427: PPUSH
// if not mc_bases or not skirmish then
75428: LD_EXP 64
75432: NOT
75433: PUSH
75434: LD_EXP 62
75438: NOT
75439: OR
75440: IFFALSE 75444
// exit ;
75442: GO 75533
// for i = 1 to mc_bases do
75444: LD_ADDR_VAR 0 4
75448: PUSH
75449: DOUBLE
75450: LD_INT 1
75452: DEC
75453: ST_TO_ADDR
75454: LD_EXP 64
75458: PUSH
75459: FOR_TO
75460: IFFALSE 75531
// begin if building in mc_busy_turret_list [ i ] then
75462: LD_VAR 0 1
75466: PUSH
75467: LD_EXP 74
75471: PUSH
75472: LD_VAR 0 4
75476: ARRAY
75477: IN
75478: IFFALSE 75529
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75480: LD_ADDR_VAR 0 5
75484: PUSH
75485: LD_EXP 74
75489: PUSH
75490: LD_VAR 0 4
75494: ARRAY
75495: PUSH
75496: LD_VAR 0 1
75500: DIFF
75501: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75502: LD_ADDR_EXP 74
75506: PUSH
75507: LD_EXP 74
75511: PPUSH
75512: LD_VAR 0 4
75516: PPUSH
75517: LD_VAR 0 5
75521: PPUSH
75522: CALL_OW 1
75526: ST_TO_ADDR
// break ;
75527: GO 75531
// end ; end ;
75529: GO 75459
75531: POP
75532: POP
// end ;
75533: LD_VAR 0 3
75537: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75538: LD_INT 0
75540: PPUSH
75541: PPUSH
75542: PPUSH
// if not mc_bases or not skirmish then
75543: LD_EXP 64
75547: NOT
75548: PUSH
75549: LD_EXP 62
75553: NOT
75554: OR
75555: IFFALSE 75559
// exit ;
75557: GO 75758
// for i = 1 to mc_bases do
75559: LD_ADDR_VAR 0 5
75563: PUSH
75564: DOUBLE
75565: LD_INT 1
75567: DEC
75568: ST_TO_ADDR
75569: LD_EXP 64
75573: PUSH
75574: FOR_TO
75575: IFFALSE 75756
// if building in mc_bases [ i ] then
75577: LD_VAR 0 1
75581: PUSH
75582: LD_EXP 64
75586: PUSH
75587: LD_VAR 0 5
75591: ARRAY
75592: IN
75593: IFFALSE 75754
// begin tmp := mc_bases [ i ] diff building ;
75595: LD_ADDR_VAR 0 6
75599: PUSH
75600: LD_EXP 64
75604: PUSH
75605: LD_VAR 0 5
75609: ARRAY
75610: PUSH
75611: LD_VAR 0 1
75615: DIFF
75616: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75617: LD_ADDR_EXP 64
75621: PUSH
75622: LD_EXP 64
75626: PPUSH
75627: LD_VAR 0 5
75631: PPUSH
75632: LD_VAR 0 6
75636: PPUSH
75637: CALL_OW 1
75641: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75642: LD_VAR 0 1
75646: PUSH
75647: LD_EXP 72
75651: PUSH
75652: LD_VAR 0 5
75656: ARRAY
75657: IN
75658: IFFALSE 75697
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75660: LD_ADDR_EXP 72
75664: PUSH
75665: LD_EXP 72
75669: PPUSH
75670: LD_VAR 0 5
75674: PPUSH
75675: LD_EXP 72
75679: PUSH
75680: LD_VAR 0 5
75684: ARRAY
75685: PUSH
75686: LD_VAR 0 1
75690: DIFF
75691: PPUSH
75692: CALL_OW 1
75696: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75697: LD_VAR 0 1
75701: PUSH
75702: LD_EXP 73
75706: PUSH
75707: LD_VAR 0 5
75711: ARRAY
75712: IN
75713: IFFALSE 75752
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75715: LD_ADDR_EXP 73
75719: PUSH
75720: LD_EXP 73
75724: PPUSH
75725: LD_VAR 0 5
75729: PPUSH
75730: LD_EXP 73
75734: PUSH
75735: LD_VAR 0 5
75739: ARRAY
75740: PUSH
75741: LD_VAR 0 1
75745: DIFF
75746: PPUSH
75747: CALL_OW 1
75751: ST_TO_ADDR
// break ;
75752: GO 75756
// end ;
75754: GO 75574
75756: POP
75757: POP
// end ;
75758: LD_VAR 0 4
75762: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75763: LD_INT 0
75765: PPUSH
75766: PPUSH
75767: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
75768: LD_EXP 64
75772: NOT
75773: PUSH
75774: LD_EXP 62
75778: NOT
75779: OR
75780: PUSH
75781: LD_VAR 0 3
75785: PUSH
75786: LD_EXP 90
75790: IN
75791: NOT
75792: OR
75793: IFFALSE 75797
// exit ;
75795: GO 75920
// for i = 1 to mc_vehicles do
75797: LD_ADDR_VAR 0 6
75801: PUSH
75802: DOUBLE
75803: LD_INT 1
75805: DEC
75806: ST_TO_ADDR
75807: LD_EXP 83
75811: PUSH
75812: FOR_TO
75813: IFFALSE 75918
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75815: LD_VAR 0 2
75819: PUSH
75820: LD_EXP 83
75824: PUSH
75825: LD_VAR 0 6
75829: ARRAY
75830: IN
75831: PUSH
75832: LD_VAR 0 1
75836: PUSH
75837: LD_EXP 83
75841: PUSH
75842: LD_VAR 0 6
75846: ARRAY
75847: IN
75848: OR
75849: IFFALSE 75916
// begin tmp := mc_vehicles [ i ] diff old ;
75851: LD_ADDR_VAR 0 7
75855: PUSH
75856: LD_EXP 83
75860: PUSH
75861: LD_VAR 0 6
75865: ARRAY
75866: PUSH
75867: LD_VAR 0 2
75871: DIFF
75872: ST_TO_ADDR
// tmp := tmp diff new ;
75873: LD_ADDR_VAR 0 7
75877: PUSH
75878: LD_VAR 0 7
75882: PUSH
75883: LD_VAR 0 1
75887: DIFF
75888: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
75889: LD_ADDR_EXP 83
75893: PUSH
75894: LD_EXP 83
75898: PPUSH
75899: LD_VAR 0 6
75903: PPUSH
75904: LD_VAR 0 7
75908: PPUSH
75909: CALL_OW 1
75913: ST_TO_ADDR
// break ;
75914: GO 75918
// end ;
75916: GO 75812
75918: POP
75919: POP
// end ;
75920: LD_VAR 0 5
75924: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
75925: LD_INT 0
75927: PPUSH
75928: PPUSH
75929: PPUSH
75930: PPUSH
// if not mc_bases or not skirmish then
75931: LD_EXP 64
75935: NOT
75936: PUSH
75937: LD_EXP 62
75941: NOT
75942: OR
75943: IFFALSE 75947
// exit ;
75945: GO 76324
// side := GetSide ( vehicle ) ;
75947: LD_ADDR_VAR 0 5
75951: PUSH
75952: LD_VAR 0 1
75956: PPUSH
75957: CALL_OW 255
75961: ST_TO_ADDR
// for i = 1 to mc_bases do
75962: LD_ADDR_VAR 0 4
75966: PUSH
75967: DOUBLE
75968: LD_INT 1
75970: DEC
75971: ST_TO_ADDR
75972: LD_EXP 64
75976: PUSH
75977: FOR_TO
75978: IFFALSE 76322
// begin if factory in mc_bases [ i ] then
75980: LD_VAR 0 2
75984: PUSH
75985: LD_EXP 64
75989: PUSH
75990: LD_VAR 0 4
75994: ARRAY
75995: IN
75996: IFFALSE 76320
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
75998: LD_EXP 86
76002: PUSH
76003: LD_VAR 0 4
76007: ARRAY
76008: PUSH
76009: LD_EXP 75
76013: PUSH
76014: LD_VAR 0 4
76018: ARRAY
76019: LESS
76020: PUSH
76021: LD_VAR 0 1
76025: PPUSH
76026: CALL_OW 264
76030: PUSH
76031: LD_INT 31
76033: PUSH
76034: LD_INT 32
76036: PUSH
76037: LD_INT 51
76039: PUSH
76040: LD_EXP 49
76044: PUSH
76045: LD_INT 12
76047: PUSH
76048: LD_INT 30
76050: PUSH
76051: LD_EXP 48
76055: PUSH
76056: LD_INT 11
76058: PUSH
76059: LD_INT 53
76061: PUSH
76062: LD_INT 14
76064: PUSH
76065: LD_EXP 52
76069: PUSH
76070: LD_INT 29
76072: PUSH
76073: LD_EXP 50
76077: PUSH
76078: LD_INT 13
76080: PUSH
76081: LD_INT 52
76083: PUSH
76084: LD_INT 48
76086: PUSH
76087: LD_INT 8
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: IN
76109: NOT
76110: AND
76111: IFFALSE 76159
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
76113: LD_ADDR_EXP 86
76117: PUSH
76118: LD_EXP 86
76122: PPUSH
76123: LD_VAR 0 4
76127: PUSH
76128: LD_EXP 86
76132: PUSH
76133: LD_VAR 0 4
76137: ARRAY
76138: PUSH
76139: LD_INT 1
76141: PLUS
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PPUSH
76147: LD_VAR 0 1
76151: PPUSH
76152: CALL 18412 0 3
76156: ST_TO_ADDR
76157: GO 76203
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
76159: LD_ADDR_EXP 83
76163: PUSH
76164: LD_EXP 83
76168: PPUSH
76169: LD_VAR 0 4
76173: PUSH
76174: LD_EXP 83
76178: PUSH
76179: LD_VAR 0 4
76183: ARRAY
76184: PUSH
76185: LD_INT 1
76187: PLUS
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PPUSH
76193: LD_VAR 0 1
76197: PPUSH
76198: CALL 18412 0 3
76202: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
76203: LD_VAR 0 1
76207: PPUSH
76208: CALL_OW 263
76212: PUSH
76213: LD_INT 2
76215: EQUAL
76216: IFFALSE 76236
// begin repeat wait ( 0 0$1 ) ;
76218: LD_INT 35
76220: PPUSH
76221: CALL_OW 67
// until IsControledBy ( vehicle ) ;
76225: LD_VAR 0 1
76229: PPUSH
76230: CALL_OW 312
76234: IFFALSE 76218
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
76236: LD_VAR 0 1
76240: PPUSH
76241: LD_EXP 88
76245: PUSH
76246: LD_VAR 0 4
76250: ARRAY
76251: PPUSH
76252: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
76256: LD_VAR 0 1
76260: PPUSH
76261: CALL_OW 263
76265: PUSH
76266: LD_INT 1
76268: NONEQUAL
76269: IFFALSE 76273
// break ;
76271: GO 76322
// repeat wait ( 0 0$1 ) ;
76273: LD_INT 35
76275: PPUSH
76276: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
76280: LD_VAR 0 1
76284: PPUSH
76285: LD_EXP 88
76289: PUSH
76290: LD_VAR 0 4
76294: ARRAY
76295: PPUSH
76296: CALL_OW 308
76300: IFFALSE 76273
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
76302: LD_VAR 0 1
76306: PPUSH
76307: CALL_OW 311
76311: PPUSH
76312: CALL_OW 121
// exit ;
76316: POP
76317: POP
76318: GO 76324
// end ; end ;
76320: GO 75977
76322: POP
76323: POP
// end ;
76324: LD_VAR 0 3
76328: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76329: LD_INT 0
76331: PPUSH
76332: PPUSH
76333: PPUSH
76334: PPUSH
// if not mc_bases or not skirmish then
76335: LD_EXP 64
76339: NOT
76340: PUSH
76341: LD_EXP 62
76345: NOT
76346: OR
76347: IFFALSE 76351
// exit ;
76349: GO 76704
// repeat wait ( 0 0$1 ) ;
76351: LD_INT 35
76353: PPUSH
76354: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76358: LD_VAR 0 2
76362: PPUSH
76363: LD_VAR 0 3
76367: PPUSH
76368: CALL_OW 284
76372: IFFALSE 76351
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76374: LD_VAR 0 2
76378: PPUSH
76379: LD_VAR 0 3
76383: PPUSH
76384: CALL_OW 283
76388: PUSH
76389: LD_INT 4
76391: EQUAL
76392: IFFALSE 76396
// exit ;
76394: GO 76704
// for i = 1 to mc_bases do
76396: LD_ADDR_VAR 0 7
76400: PUSH
76401: DOUBLE
76402: LD_INT 1
76404: DEC
76405: ST_TO_ADDR
76406: LD_EXP 64
76410: PUSH
76411: FOR_TO
76412: IFFALSE 76702
// begin if mc_crates_area [ i ] then
76414: LD_EXP 82
76418: PUSH
76419: LD_VAR 0 7
76423: ARRAY
76424: IFFALSE 76535
// for j in mc_crates_area [ i ] do
76426: LD_ADDR_VAR 0 8
76430: PUSH
76431: LD_EXP 82
76435: PUSH
76436: LD_VAR 0 7
76440: ARRAY
76441: PUSH
76442: FOR_IN
76443: IFFALSE 76533
// if InArea ( x , y , j ) then
76445: LD_VAR 0 2
76449: PPUSH
76450: LD_VAR 0 3
76454: PPUSH
76455: LD_VAR 0 8
76459: PPUSH
76460: CALL_OW 309
76464: IFFALSE 76531
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76466: LD_ADDR_EXP 80
76470: PUSH
76471: LD_EXP 80
76475: PPUSH
76476: LD_VAR 0 7
76480: PUSH
76481: LD_EXP 80
76485: PUSH
76486: LD_VAR 0 7
76490: ARRAY
76491: PUSH
76492: LD_INT 1
76494: PLUS
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PPUSH
76500: LD_VAR 0 4
76504: PUSH
76505: LD_VAR 0 2
76509: PUSH
76510: LD_VAR 0 3
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PPUSH
76520: CALL 18412 0 3
76524: ST_TO_ADDR
// exit ;
76525: POP
76526: POP
76527: POP
76528: POP
76529: GO 76704
// end ;
76531: GO 76442
76533: POP
76534: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76535: LD_ADDR_VAR 0 9
76539: PUSH
76540: LD_EXP 64
76544: PUSH
76545: LD_VAR 0 7
76549: ARRAY
76550: PPUSH
76551: LD_INT 2
76553: PUSH
76554: LD_INT 30
76556: PUSH
76557: LD_INT 0
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: LD_INT 30
76566: PUSH
76567: LD_INT 1
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: LIST
76578: PPUSH
76579: CALL_OW 72
76583: ST_TO_ADDR
// if not depot then
76584: LD_VAR 0 9
76588: NOT
76589: IFFALSE 76593
// continue ;
76591: GO 76411
// for j in depot do
76593: LD_ADDR_VAR 0 8
76597: PUSH
76598: LD_VAR 0 9
76602: PUSH
76603: FOR_IN
76604: IFFALSE 76698
// if GetDistUnitXY ( j , x , y ) < 30 then
76606: LD_VAR 0 8
76610: PPUSH
76611: LD_VAR 0 2
76615: PPUSH
76616: LD_VAR 0 3
76620: PPUSH
76621: CALL_OW 297
76625: PUSH
76626: LD_INT 30
76628: LESS
76629: IFFALSE 76696
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76631: LD_ADDR_EXP 80
76635: PUSH
76636: LD_EXP 80
76640: PPUSH
76641: LD_VAR 0 7
76645: PUSH
76646: LD_EXP 80
76650: PUSH
76651: LD_VAR 0 7
76655: ARRAY
76656: PUSH
76657: LD_INT 1
76659: PLUS
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PPUSH
76665: LD_VAR 0 4
76669: PUSH
76670: LD_VAR 0 2
76674: PUSH
76675: LD_VAR 0 3
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: PPUSH
76685: CALL 18412 0 3
76689: ST_TO_ADDR
// exit ;
76690: POP
76691: POP
76692: POP
76693: POP
76694: GO 76704
// end ;
76696: GO 76603
76698: POP
76699: POP
// end ;
76700: GO 76411
76702: POP
76703: POP
// end ;
76704: LD_VAR 0 6
76708: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76709: LD_INT 0
76711: PPUSH
76712: PPUSH
76713: PPUSH
76714: PPUSH
// if not mc_bases or not skirmish then
76715: LD_EXP 64
76719: NOT
76720: PUSH
76721: LD_EXP 62
76725: NOT
76726: OR
76727: IFFALSE 76731
// exit ;
76729: GO 77008
// side := GetSide ( lab ) ;
76731: LD_ADDR_VAR 0 4
76735: PUSH
76736: LD_VAR 0 2
76740: PPUSH
76741: CALL_OW 255
76745: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76746: LD_VAR 0 4
76750: PUSH
76751: LD_EXP 90
76755: IN
76756: NOT
76757: PUSH
76758: LD_EXP 91
76762: NOT
76763: OR
76764: PUSH
76765: LD_EXP 64
76769: NOT
76770: OR
76771: IFFALSE 76775
// exit ;
76773: GO 77008
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76775: LD_ADDR_EXP 91
76779: PUSH
76780: LD_EXP 91
76784: PPUSH
76785: LD_VAR 0 4
76789: PPUSH
76790: LD_EXP 91
76794: PUSH
76795: LD_VAR 0 4
76799: ARRAY
76800: PUSH
76801: LD_VAR 0 1
76805: DIFF
76806: PPUSH
76807: CALL_OW 1
76811: ST_TO_ADDR
// for i = 1 to mc_bases do
76812: LD_ADDR_VAR 0 5
76816: PUSH
76817: DOUBLE
76818: LD_INT 1
76820: DEC
76821: ST_TO_ADDR
76822: LD_EXP 64
76826: PUSH
76827: FOR_TO
76828: IFFALSE 77006
// begin if lab in mc_bases [ i ] then
76830: LD_VAR 0 2
76834: PUSH
76835: LD_EXP 64
76839: PUSH
76840: LD_VAR 0 5
76844: ARRAY
76845: IN
76846: IFFALSE 77004
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76848: LD_VAR 0 1
76852: PUSH
76853: LD_INT 11
76855: PUSH
76856: LD_INT 4
76858: PUSH
76859: LD_INT 3
76861: PUSH
76862: LD_INT 2
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: IN
76871: PUSH
76872: LD_EXP 94
76876: PUSH
76877: LD_VAR 0 5
76881: ARRAY
76882: AND
76883: IFFALSE 77004
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
76885: LD_ADDR_VAR 0 6
76889: PUSH
76890: LD_EXP 94
76894: PUSH
76895: LD_VAR 0 5
76899: ARRAY
76900: PUSH
76901: LD_INT 1
76903: ARRAY
76904: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76905: LD_ADDR_EXP 94
76909: PUSH
76910: LD_EXP 94
76914: PPUSH
76915: LD_VAR 0 5
76919: PPUSH
76920: EMPTY
76921: PPUSH
76922: CALL_OW 1
76926: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
76927: LD_VAR 0 6
76931: PPUSH
76932: LD_INT 0
76934: PPUSH
76935: CALL_OW 109
// ComExitBuilding ( tmp ) ;
76939: LD_VAR 0 6
76943: PPUSH
76944: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
76948: LD_ADDR_EXP 93
76952: PUSH
76953: LD_EXP 93
76957: PPUSH
76958: LD_VAR 0 5
76962: PPUSH
76963: LD_EXP 93
76967: PUSH
76968: LD_VAR 0 5
76972: ARRAY
76973: PPUSH
76974: LD_INT 1
76976: PPUSH
76977: LD_VAR 0 6
76981: PPUSH
76982: CALL_OW 2
76986: PPUSH
76987: CALL_OW 1
76991: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76992: LD_VAR 0 5
76996: PPUSH
76997: LD_INT 112
76999: PPUSH
77000: CALL 54020 0 2
// end ; end ; end ;
77004: GO 76827
77006: POP
77007: POP
// end ;
77008: LD_VAR 0 3
77012: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
77013: LD_INT 0
77015: PPUSH
77016: PPUSH
77017: PPUSH
77018: PPUSH
77019: PPUSH
77020: PPUSH
77021: PPUSH
77022: PPUSH
// if not mc_bases or not skirmish then
77023: LD_EXP 64
77027: NOT
77028: PUSH
77029: LD_EXP 62
77033: NOT
77034: OR
77035: IFFALSE 77039
// exit ;
77037: GO 78410
// for i = 1 to mc_bases do
77039: LD_ADDR_VAR 0 3
77043: PUSH
77044: DOUBLE
77045: LD_INT 1
77047: DEC
77048: ST_TO_ADDR
77049: LD_EXP 64
77053: PUSH
77054: FOR_TO
77055: IFFALSE 78408
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
77057: LD_VAR 0 1
77061: PUSH
77062: LD_EXP 64
77066: PUSH
77067: LD_VAR 0 3
77071: ARRAY
77072: IN
77073: PUSH
77074: LD_VAR 0 1
77078: PUSH
77079: LD_EXP 71
77083: PUSH
77084: LD_VAR 0 3
77088: ARRAY
77089: IN
77090: OR
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_EXP 86
77101: PUSH
77102: LD_VAR 0 3
77106: ARRAY
77107: IN
77108: OR
77109: PUSH
77110: LD_VAR 0 1
77114: PUSH
77115: LD_EXP 83
77119: PUSH
77120: LD_VAR 0 3
77124: ARRAY
77125: IN
77126: OR
77127: PUSH
77128: LD_VAR 0 1
77132: PUSH
77133: LD_EXP 93
77137: PUSH
77138: LD_VAR 0 3
77142: ARRAY
77143: IN
77144: OR
77145: PUSH
77146: LD_VAR 0 1
77150: PUSH
77151: LD_EXP 94
77155: PUSH
77156: LD_VAR 0 3
77160: ARRAY
77161: IN
77162: OR
77163: IFFALSE 78406
// begin if un in mc_ape [ i ] then
77165: LD_VAR 0 1
77169: PUSH
77170: LD_EXP 93
77174: PUSH
77175: LD_VAR 0 3
77179: ARRAY
77180: IN
77181: IFFALSE 77220
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
77183: LD_ADDR_EXP 93
77187: PUSH
77188: LD_EXP 93
77192: PPUSH
77193: LD_VAR 0 3
77197: PPUSH
77198: LD_EXP 93
77202: PUSH
77203: LD_VAR 0 3
77207: ARRAY
77208: PUSH
77209: LD_VAR 0 1
77213: DIFF
77214: PPUSH
77215: CALL_OW 1
77219: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
77220: LD_VAR 0 1
77224: PUSH
77225: LD_EXP 94
77229: PUSH
77230: LD_VAR 0 3
77234: ARRAY
77235: IN
77236: IFFALSE 77260
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
77238: LD_ADDR_EXP 94
77242: PUSH
77243: LD_EXP 94
77247: PPUSH
77248: LD_VAR 0 3
77252: PPUSH
77253: EMPTY
77254: PPUSH
77255: CALL_OW 1
77259: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
77260: LD_VAR 0 1
77264: PPUSH
77265: CALL_OW 247
77269: PUSH
77270: LD_INT 2
77272: EQUAL
77273: PUSH
77274: LD_VAR 0 1
77278: PPUSH
77279: CALL_OW 110
77283: PUSH
77284: LD_INT 20
77286: EQUAL
77287: PUSH
77288: LD_VAR 0 1
77292: PUSH
77293: LD_EXP 86
77297: PUSH
77298: LD_VAR 0 3
77302: ARRAY
77303: IN
77304: OR
77305: PUSH
77306: LD_VAR 0 1
77310: PPUSH
77311: CALL_OW 264
77315: PUSH
77316: LD_INT 12
77318: PUSH
77319: LD_INT 51
77321: PUSH
77322: LD_EXP 49
77326: PUSH
77327: LD_INT 32
77329: PUSH
77330: LD_INT 13
77332: PUSH
77333: LD_INT 52
77335: PUSH
77336: LD_INT 31
77338: PUSH
77339: EMPTY
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: IN
77348: OR
77349: AND
77350: IFFALSE 77658
// begin if un in mc_defender [ i ] then
77352: LD_VAR 0 1
77356: PUSH
77357: LD_EXP 86
77361: PUSH
77362: LD_VAR 0 3
77366: ARRAY
77367: IN
77368: IFFALSE 77407
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77370: LD_ADDR_EXP 86
77374: PUSH
77375: LD_EXP 86
77379: PPUSH
77380: LD_VAR 0 3
77384: PPUSH
77385: LD_EXP 86
77389: PUSH
77390: LD_VAR 0 3
77394: ARRAY
77395: PUSH
77396: LD_VAR 0 1
77400: DIFF
77401: PPUSH
77402: CALL_OW 1
77406: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
77407: LD_ADDR_VAR 0 8
77411: PUSH
77412: LD_VAR 0 3
77416: PPUSH
77417: LD_INT 3
77419: PPUSH
77420: CALL 74076 0 2
77424: ST_TO_ADDR
// if fac then
77425: LD_VAR 0 8
77429: IFFALSE 77658
// begin for j in fac do
77431: LD_ADDR_VAR 0 4
77435: PUSH
77436: LD_VAR 0 8
77440: PUSH
77441: FOR_IN
77442: IFFALSE 77656
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
77444: LD_ADDR_VAR 0 9
77448: PUSH
77449: LD_VAR 0 8
77453: PPUSH
77454: LD_VAR 0 1
77458: PPUSH
77459: CALL_OW 265
77463: PPUSH
77464: LD_VAR 0 1
77468: PPUSH
77469: CALL_OW 262
77473: PPUSH
77474: LD_VAR 0 1
77478: PPUSH
77479: CALL_OW 263
77483: PPUSH
77484: LD_VAR 0 1
77488: PPUSH
77489: CALL_OW 264
77493: PPUSH
77494: CALL 15944 0 5
77498: ST_TO_ADDR
// if components then
77499: LD_VAR 0 9
77503: IFFALSE 77654
// begin if GetWeapon ( un ) = ar_control_tower then
77505: LD_VAR 0 1
77509: PPUSH
77510: CALL_OW 264
77514: PUSH
77515: LD_INT 31
77517: EQUAL
77518: IFFALSE 77635
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
77520: LD_VAR 0 1
77524: PPUSH
77525: CALL_OW 311
77529: PPUSH
77530: LD_INT 0
77532: PPUSH
77533: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
77537: LD_ADDR_EXP 104
77541: PUSH
77542: LD_EXP 104
77546: PPUSH
77547: LD_VAR 0 3
77551: PPUSH
77552: LD_EXP 104
77556: PUSH
77557: LD_VAR 0 3
77561: ARRAY
77562: PUSH
77563: LD_VAR 0 1
77567: PPUSH
77568: CALL_OW 311
77572: DIFF
77573: PPUSH
77574: CALL_OW 1
77578: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
77579: LD_ADDR_VAR 0 7
77583: PUSH
77584: LD_EXP 85
77588: PUSH
77589: LD_VAR 0 3
77593: ARRAY
77594: PPUSH
77595: LD_INT 1
77597: PPUSH
77598: LD_VAR 0 9
77602: PPUSH
77603: CALL_OW 2
77607: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77608: LD_ADDR_EXP 85
77612: PUSH
77613: LD_EXP 85
77617: PPUSH
77618: LD_VAR 0 3
77622: PPUSH
77623: LD_VAR 0 7
77627: PPUSH
77628: CALL_OW 1
77632: ST_TO_ADDR
// end else
77633: GO 77652
// MC_InsertProduceList ( i , [ components ] ) ;
77635: LD_VAR 0 3
77639: PPUSH
77640: LD_VAR 0 9
77644: PUSH
77645: EMPTY
77646: LIST
77647: PPUSH
77648: CALL 73621 0 2
// break ;
77652: GO 77656
// end ; end ;
77654: GO 77441
77656: POP
77657: POP
// end ; end ; if GetType ( un ) = unit_building then
77658: LD_VAR 0 1
77662: PPUSH
77663: CALL_OW 247
77667: PUSH
77668: LD_INT 3
77670: EQUAL
77671: IFFALSE 78074
// begin btype := GetBType ( un ) ;
77673: LD_ADDR_VAR 0 5
77677: PUSH
77678: LD_VAR 0 1
77682: PPUSH
77683: CALL_OW 266
77687: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
77688: LD_VAR 0 5
77692: PUSH
77693: LD_INT 29
77695: PUSH
77696: LD_INT 30
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: IN
77703: IFFALSE 77776
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
77705: LD_VAR 0 1
77709: PPUSH
77710: CALL_OW 250
77714: PPUSH
77715: LD_VAR 0 1
77719: PPUSH
77720: CALL_OW 251
77724: PPUSH
77725: LD_VAR 0 1
77729: PPUSH
77730: CALL_OW 255
77734: PPUSH
77735: CALL_OW 440
77739: NOT
77740: IFFALSE 77776
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
77742: LD_VAR 0 1
77746: PPUSH
77747: CALL_OW 250
77751: PPUSH
77752: LD_VAR 0 1
77756: PPUSH
77757: CALL_OW 251
77761: PPUSH
77762: LD_VAR 0 1
77766: PPUSH
77767: CALL_OW 255
77771: PPUSH
77772: CALL_OW 441
// end ; if btype = b_warehouse then
77776: LD_VAR 0 5
77780: PUSH
77781: LD_INT 1
77783: EQUAL
77784: IFFALSE 77802
// begin btype := b_depot ;
77786: LD_ADDR_VAR 0 5
77790: PUSH
77791: LD_INT 0
77793: ST_TO_ADDR
// pos := 1 ;
77794: LD_ADDR_VAR 0 6
77798: PUSH
77799: LD_INT 1
77801: ST_TO_ADDR
// end ; if btype = b_factory then
77802: LD_VAR 0 5
77806: PUSH
77807: LD_INT 3
77809: EQUAL
77810: IFFALSE 77828
// begin btype := b_workshop ;
77812: LD_ADDR_VAR 0 5
77816: PUSH
77817: LD_INT 2
77819: ST_TO_ADDR
// pos := 1 ;
77820: LD_ADDR_VAR 0 6
77824: PUSH
77825: LD_INT 1
77827: ST_TO_ADDR
// end ; if btype = b_barracks then
77828: LD_VAR 0 5
77832: PUSH
77833: LD_INT 5
77835: EQUAL
77836: IFFALSE 77846
// btype := b_armoury ;
77838: LD_ADDR_VAR 0 5
77842: PUSH
77843: LD_INT 4
77845: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
77846: LD_VAR 0 5
77850: PUSH
77851: LD_INT 7
77853: PUSH
77854: LD_INT 8
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: IN
77861: IFFALSE 77871
// btype := b_lab ;
77863: LD_ADDR_VAR 0 5
77867: PUSH
77868: LD_INT 6
77870: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77871: LD_ADDR_EXP 69
77875: PUSH
77876: LD_EXP 69
77880: PPUSH
77881: LD_VAR 0 3
77885: PUSH
77886: LD_EXP 69
77890: PUSH
77891: LD_VAR 0 3
77895: ARRAY
77896: PUSH
77897: LD_INT 1
77899: PLUS
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: PPUSH
77905: LD_VAR 0 5
77909: PUSH
77910: LD_VAR 0 1
77914: PPUSH
77915: CALL_OW 250
77919: PUSH
77920: LD_VAR 0 1
77924: PPUSH
77925: CALL_OW 251
77929: PUSH
77930: LD_VAR 0 1
77934: PPUSH
77935: CALL_OW 254
77939: PUSH
77940: EMPTY
77941: LIST
77942: LIST
77943: LIST
77944: LIST
77945: PPUSH
77946: CALL 18412 0 3
77950: ST_TO_ADDR
// if pos = 1 then
77951: LD_VAR 0 6
77955: PUSH
77956: LD_INT 1
77958: EQUAL
77959: IFFALSE 78074
// begin tmp := mc_build_list [ i ] ;
77961: LD_ADDR_VAR 0 7
77965: PUSH
77966: LD_EXP 69
77970: PUSH
77971: LD_VAR 0 3
77975: ARRAY
77976: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77977: LD_VAR 0 7
77981: PPUSH
77982: LD_INT 2
77984: PUSH
77985: LD_INT 30
77987: PUSH
77988: LD_INT 0
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: PUSH
77995: LD_INT 30
77997: PUSH
77998: LD_INT 1
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: LIST
78009: PPUSH
78010: CALL_OW 72
78014: IFFALSE 78024
// pos := 2 ;
78016: LD_ADDR_VAR 0 6
78020: PUSH
78021: LD_INT 2
78023: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
78024: LD_ADDR_VAR 0 7
78028: PUSH
78029: LD_VAR 0 7
78033: PPUSH
78034: LD_VAR 0 6
78038: PPUSH
78039: LD_VAR 0 7
78043: PPUSH
78044: CALL 18738 0 3
78048: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
78049: LD_ADDR_EXP 69
78053: PUSH
78054: LD_EXP 69
78058: PPUSH
78059: LD_VAR 0 3
78063: PPUSH
78064: LD_VAR 0 7
78068: PPUSH
78069: CALL_OW 1
78073: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
78074: LD_VAR 0 1
78078: PUSH
78079: LD_EXP 64
78083: PUSH
78084: LD_VAR 0 3
78088: ARRAY
78089: IN
78090: IFFALSE 78129
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
78092: LD_ADDR_EXP 64
78096: PUSH
78097: LD_EXP 64
78101: PPUSH
78102: LD_VAR 0 3
78106: PPUSH
78107: LD_EXP 64
78111: PUSH
78112: LD_VAR 0 3
78116: ARRAY
78117: PUSH
78118: LD_VAR 0 1
78122: DIFF
78123: PPUSH
78124: CALL_OW 1
78128: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
78129: LD_VAR 0 1
78133: PUSH
78134: LD_EXP 71
78138: PUSH
78139: LD_VAR 0 3
78143: ARRAY
78144: IN
78145: IFFALSE 78184
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
78147: LD_ADDR_EXP 71
78151: PUSH
78152: LD_EXP 71
78156: PPUSH
78157: LD_VAR 0 3
78161: PPUSH
78162: LD_EXP 71
78166: PUSH
78167: LD_VAR 0 3
78171: ARRAY
78172: PUSH
78173: LD_VAR 0 1
78177: DIFF
78178: PPUSH
78179: CALL_OW 1
78183: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
78184: LD_VAR 0 1
78188: PUSH
78189: LD_EXP 83
78193: PUSH
78194: LD_VAR 0 3
78198: ARRAY
78199: IN
78200: IFFALSE 78239
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
78202: LD_ADDR_EXP 83
78206: PUSH
78207: LD_EXP 83
78211: PPUSH
78212: LD_VAR 0 3
78216: PPUSH
78217: LD_EXP 83
78221: PUSH
78222: LD_VAR 0 3
78226: ARRAY
78227: PUSH
78228: LD_VAR 0 1
78232: DIFF
78233: PPUSH
78234: CALL_OW 1
78238: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
78239: LD_VAR 0 1
78243: PUSH
78244: LD_EXP 86
78248: PUSH
78249: LD_VAR 0 3
78253: ARRAY
78254: IN
78255: IFFALSE 78294
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
78257: LD_ADDR_EXP 86
78261: PUSH
78262: LD_EXP 86
78266: PPUSH
78267: LD_VAR 0 3
78271: PPUSH
78272: LD_EXP 86
78276: PUSH
78277: LD_VAR 0 3
78281: ARRAY
78282: PUSH
78283: LD_VAR 0 1
78287: DIFF
78288: PPUSH
78289: CALL_OW 1
78293: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
78294: LD_VAR 0 1
78298: PUSH
78299: LD_EXP 73
78303: PUSH
78304: LD_VAR 0 3
78308: ARRAY
78309: IN
78310: IFFALSE 78349
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
78312: LD_ADDR_EXP 73
78316: PUSH
78317: LD_EXP 73
78321: PPUSH
78322: LD_VAR 0 3
78326: PPUSH
78327: LD_EXP 73
78331: PUSH
78332: LD_VAR 0 3
78336: ARRAY
78337: PUSH
78338: LD_VAR 0 1
78342: DIFF
78343: PPUSH
78344: CALL_OW 1
78348: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
78349: LD_VAR 0 1
78353: PUSH
78354: LD_EXP 72
78358: PUSH
78359: LD_VAR 0 3
78363: ARRAY
78364: IN
78365: IFFALSE 78404
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
78367: LD_ADDR_EXP 72
78371: PUSH
78372: LD_EXP 72
78376: PPUSH
78377: LD_VAR 0 3
78381: PPUSH
78382: LD_EXP 72
78386: PUSH
78387: LD_VAR 0 3
78391: ARRAY
78392: PUSH
78393: LD_VAR 0 1
78397: DIFF
78398: PPUSH
78399: CALL_OW 1
78403: ST_TO_ADDR
// end ; break ;
78404: GO 78408
// end ;
78406: GO 77054
78408: POP
78409: POP
// end ;
78410: LD_VAR 0 2
78414: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
78415: LD_INT 0
78417: PPUSH
78418: PPUSH
78419: PPUSH
// if not mc_bases or not skirmish then
78420: LD_EXP 64
78424: NOT
78425: PUSH
78426: LD_EXP 62
78430: NOT
78431: OR
78432: IFFALSE 78436
// exit ;
78434: GO 78651
// for i = 1 to mc_bases do
78436: LD_ADDR_VAR 0 3
78440: PUSH
78441: DOUBLE
78442: LD_INT 1
78444: DEC
78445: ST_TO_ADDR
78446: LD_EXP 64
78450: PUSH
78451: FOR_TO
78452: IFFALSE 78649
// begin if building in mc_construct_list [ i ] then
78454: LD_VAR 0 1
78458: PUSH
78459: LD_EXP 71
78463: PUSH
78464: LD_VAR 0 3
78468: ARRAY
78469: IN
78470: IFFALSE 78647
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78472: LD_ADDR_EXP 71
78476: PUSH
78477: LD_EXP 71
78481: PPUSH
78482: LD_VAR 0 3
78486: PPUSH
78487: LD_EXP 71
78491: PUSH
78492: LD_VAR 0 3
78496: ARRAY
78497: PUSH
78498: LD_VAR 0 1
78502: DIFF
78503: PPUSH
78504: CALL_OW 1
78508: ST_TO_ADDR
// if building in mc_lab [ i ] then
78509: LD_VAR 0 1
78513: PUSH
78514: LD_EXP 97
78518: PUSH
78519: LD_VAR 0 3
78523: ARRAY
78524: IN
78525: IFFALSE 78580
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
78527: LD_ADDR_EXP 98
78531: PUSH
78532: LD_EXP 98
78536: PPUSH
78537: LD_VAR 0 3
78541: PPUSH
78542: LD_EXP 98
78546: PUSH
78547: LD_VAR 0 3
78551: ARRAY
78552: PPUSH
78553: LD_INT 1
78555: PPUSH
78556: LD_EXP 98
78560: PUSH
78561: LD_VAR 0 3
78565: ARRAY
78566: PPUSH
78567: LD_INT 0
78569: PPUSH
78570: CALL 17830 0 4
78574: PPUSH
78575: CALL_OW 1
78579: ST_TO_ADDR
// if not building in mc_bases [ i ] then
78580: LD_VAR 0 1
78584: PUSH
78585: LD_EXP 64
78589: PUSH
78590: LD_VAR 0 3
78594: ARRAY
78595: IN
78596: NOT
78597: IFFALSE 78643
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78599: LD_ADDR_EXP 64
78603: PUSH
78604: LD_EXP 64
78608: PPUSH
78609: LD_VAR 0 3
78613: PUSH
78614: LD_EXP 64
78618: PUSH
78619: LD_VAR 0 3
78623: ARRAY
78624: PUSH
78625: LD_INT 1
78627: PLUS
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: PPUSH
78633: LD_VAR 0 1
78637: PPUSH
78638: CALL 18412 0 3
78642: ST_TO_ADDR
// exit ;
78643: POP
78644: POP
78645: GO 78651
// end ; end ;
78647: GO 78451
78649: POP
78650: POP
// end ;
78651: LD_VAR 0 2
78655: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
78656: LD_INT 0
78658: PPUSH
78659: PPUSH
78660: PPUSH
78661: PPUSH
78662: PPUSH
78663: PPUSH
78664: PPUSH
// if not mc_bases or not skirmish then
78665: LD_EXP 64
78669: NOT
78670: PUSH
78671: LD_EXP 62
78675: NOT
78676: OR
78677: IFFALSE 78681
// exit ;
78679: GO 79342
// for i = 1 to mc_bases do
78681: LD_ADDR_VAR 0 3
78685: PUSH
78686: DOUBLE
78687: LD_INT 1
78689: DEC
78690: ST_TO_ADDR
78691: LD_EXP 64
78695: PUSH
78696: FOR_TO
78697: IFFALSE 79340
// begin if building in mc_construct_list [ i ] then
78699: LD_VAR 0 1
78703: PUSH
78704: LD_EXP 71
78708: PUSH
78709: LD_VAR 0 3
78713: ARRAY
78714: IN
78715: IFFALSE 79338
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78717: LD_ADDR_EXP 71
78721: PUSH
78722: LD_EXP 71
78726: PPUSH
78727: LD_VAR 0 3
78731: PPUSH
78732: LD_EXP 71
78736: PUSH
78737: LD_VAR 0 3
78741: ARRAY
78742: PUSH
78743: LD_VAR 0 1
78747: DIFF
78748: PPUSH
78749: CALL_OW 1
78753: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78754: LD_ADDR_EXP 64
78758: PUSH
78759: LD_EXP 64
78763: PPUSH
78764: LD_VAR 0 3
78768: PUSH
78769: LD_EXP 64
78773: PUSH
78774: LD_VAR 0 3
78778: ARRAY
78779: PUSH
78780: LD_INT 1
78782: PLUS
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PPUSH
78788: LD_VAR 0 1
78792: PPUSH
78793: CALL 18412 0 3
78797: ST_TO_ADDR
// btype := GetBType ( building ) ;
78798: LD_ADDR_VAR 0 5
78802: PUSH
78803: LD_VAR 0 1
78807: PPUSH
78808: CALL_OW 266
78812: ST_TO_ADDR
// side := GetSide ( building ) ;
78813: LD_ADDR_VAR 0 8
78817: PUSH
78818: LD_VAR 0 1
78822: PPUSH
78823: CALL_OW 255
78827: ST_TO_ADDR
// if btype = b_lab then
78828: LD_VAR 0 5
78832: PUSH
78833: LD_INT 6
78835: EQUAL
78836: IFFALSE 78886
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78838: LD_ADDR_EXP 97
78842: PUSH
78843: LD_EXP 97
78847: PPUSH
78848: LD_VAR 0 3
78852: PUSH
78853: LD_EXP 97
78857: PUSH
78858: LD_VAR 0 3
78862: ARRAY
78863: PUSH
78864: LD_INT 1
78866: PLUS
78867: PUSH
78868: EMPTY
78869: LIST
78870: LIST
78871: PPUSH
78872: LD_VAR 0 1
78876: PPUSH
78877: CALL 18412 0 3
78881: ST_TO_ADDR
// exit ;
78882: POP
78883: POP
78884: GO 79342
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
78886: LD_VAR 0 5
78890: PUSH
78891: LD_INT 0
78893: PUSH
78894: LD_INT 2
78896: PUSH
78897: LD_INT 4
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: LIST
78904: IN
78905: IFFALSE 79029
// begin if btype = b_armoury then
78907: LD_VAR 0 5
78911: PUSH
78912: LD_INT 4
78914: EQUAL
78915: IFFALSE 78925
// btype := b_barracks ;
78917: LD_ADDR_VAR 0 5
78921: PUSH
78922: LD_INT 5
78924: ST_TO_ADDR
// if btype = b_depot then
78925: LD_VAR 0 5
78929: PUSH
78930: LD_INT 0
78932: EQUAL
78933: IFFALSE 78943
// btype := b_warehouse ;
78935: LD_ADDR_VAR 0 5
78939: PUSH
78940: LD_INT 1
78942: ST_TO_ADDR
// if btype = b_workshop then
78943: LD_VAR 0 5
78947: PUSH
78948: LD_INT 2
78950: EQUAL
78951: IFFALSE 78961
// btype := b_factory ;
78953: LD_ADDR_VAR 0 5
78957: PUSH
78958: LD_INT 3
78960: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
78961: LD_VAR 0 5
78965: PPUSH
78966: LD_VAR 0 8
78970: PPUSH
78971: CALL_OW 323
78975: PUSH
78976: LD_INT 1
78978: EQUAL
78979: IFFALSE 79025
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78981: LD_ADDR_EXP 96
78985: PUSH
78986: LD_EXP 96
78990: PPUSH
78991: LD_VAR 0 3
78995: PUSH
78996: LD_EXP 96
79000: PUSH
79001: LD_VAR 0 3
79005: ARRAY
79006: PUSH
79007: LD_INT 1
79009: PLUS
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: PPUSH
79015: LD_VAR 0 1
79019: PPUSH
79020: CALL 18412 0 3
79024: ST_TO_ADDR
// exit ;
79025: POP
79026: POP
79027: GO 79342
// end ; if btype in [ b_bunker , b_turret ] then
79029: LD_VAR 0 5
79033: PUSH
79034: LD_INT 32
79036: PUSH
79037: LD_INT 33
79039: PUSH
79040: EMPTY
79041: LIST
79042: LIST
79043: IN
79044: IFFALSE 79334
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
79046: LD_ADDR_EXP 72
79050: PUSH
79051: LD_EXP 72
79055: PPUSH
79056: LD_VAR 0 3
79060: PUSH
79061: LD_EXP 72
79065: PUSH
79066: LD_VAR 0 3
79070: ARRAY
79071: PUSH
79072: LD_INT 1
79074: PLUS
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PPUSH
79080: LD_VAR 0 1
79084: PPUSH
79085: CALL 18412 0 3
79089: ST_TO_ADDR
// if btype = b_bunker then
79090: LD_VAR 0 5
79094: PUSH
79095: LD_INT 32
79097: EQUAL
79098: IFFALSE 79334
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79100: LD_ADDR_EXP 73
79104: PUSH
79105: LD_EXP 73
79109: PPUSH
79110: LD_VAR 0 3
79114: PUSH
79115: LD_EXP 73
79119: PUSH
79120: LD_VAR 0 3
79124: ARRAY
79125: PUSH
79126: LD_INT 1
79128: PLUS
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PPUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL 18412 0 3
79143: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
79144: LD_ADDR_VAR 0 6
79148: PUSH
79149: LD_EXP 64
79153: PUSH
79154: LD_VAR 0 3
79158: ARRAY
79159: PPUSH
79160: LD_INT 25
79162: PUSH
79163: LD_INT 1
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PUSH
79170: LD_INT 3
79172: PUSH
79173: LD_INT 54
79175: PUSH
79176: EMPTY
79177: LIST
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PPUSH
79187: CALL_OW 72
79191: ST_TO_ADDR
// if tmp then
79192: LD_VAR 0 6
79196: IFFALSE 79202
// exit ;
79198: POP
79199: POP
79200: GO 79342
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
79202: LD_ADDR_VAR 0 6
79206: PUSH
79207: LD_EXP 64
79211: PUSH
79212: LD_VAR 0 3
79216: ARRAY
79217: PPUSH
79218: LD_INT 2
79220: PUSH
79221: LD_INT 30
79223: PUSH
79224: LD_INT 4
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: LD_INT 30
79233: PUSH
79234: LD_INT 5
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: LIST
79245: PPUSH
79246: CALL_OW 72
79250: ST_TO_ADDR
// if not tmp then
79251: LD_VAR 0 6
79255: NOT
79256: IFFALSE 79262
// exit ;
79258: POP
79259: POP
79260: GO 79342
// for j in tmp do
79262: LD_ADDR_VAR 0 4
79266: PUSH
79267: LD_VAR 0 6
79271: PUSH
79272: FOR_IN
79273: IFFALSE 79332
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
79275: LD_ADDR_VAR 0 7
79279: PUSH
79280: LD_VAR 0 4
79284: PPUSH
79285: CALL_OW 313
79289: PPUSH
79290: LD_INT 25
79292: PUSH
79293: LD_INT 1
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PPUSH
79300: CALL_OW 72
79304: ST_TO_ADDR
// if units then
79305: LD_VAR 0 7
79309: IFFALSE 79330
// begin ComExitBuilding ( units [ 1 ] ) ;
79311: LD_VAR 0 7
79315: PUSH
79316: LD_INT 1
79318: ARRAY
79319: PPUSH
79320: CALL_OW 122
// exit ;
79324: POP
79325: POP
79326: POP
79327: POP
79328: GO 79342
// end ; end ;
79330: GO 79272
79332: POP
79333: POP
// end ; end ; exit ;
79334: POP
79335: POP
79336: GO 79342
// end ; end ;
79338: GO 78696
79340: POP
79341: POP
// end ;
79342: LD_VAR 0 2
79346: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
79347: LD_INT 0
79349: PPUSH
79350: PPUSH
79351: PPUSH
79352: PPUSH
79353: PPUSH
79354: PPUSH
79355: PPUSH
// if not mc_bases or not skirmish then
79356: LD_EXP 64
79360: NOT
79361: PUSH
79362: LD_EXP 62
79366: NOT
79367: OR
79368: IFFALSE 79372
// exit ;
79370: GO 79603
// btype := GetBType ( building ) ;
79372: LD_ADDR_VAR 0 6
79376: PUSH
79377: LD_VAR 0 1
79381: PPUSH
79382: CALL_OW 266
79386: ST_TO_ADDR
// x := GetX ( building ) ;
79387: LD_ADDR_VAR 0 7
79391: PUSH
79392: LD_VAR 0 1
79396: PPUSH
79397: CALL_OW 250
79401: ST_TO_ADDR
// y := GetY ( building ) ;
79402: LD_ADDR_VAR 0 8
79406: PUSH
79407: LD_VAR 0 1
79411: PPUSH
79412: CALL_OW 251
79416: ST_TO_ADDR
// d := GetDir ( building ) ;
79417: LD_ADDR_VAR 0 9
79421: PUSH
79422: LD_VAR 0 1
79426: PPUSH
79427: CALL_OW 254
79431: ST_TO_ADDR
// for i = 1 to mc_bases do
79432: LD_ADDR_VAR 0 4
79436: PUSH
79437: DOUBLE
79438: LD_INT 1
79440: DEC
79441: ST_TO_ADDR
79442: LD_EXP 64
79446: PUSH
79447: FOR_TO
79448: IFFALSE 79601
// begin if not mc_build_list [ i ] then
79450: LD_EXP 69
79454: PUSH
79455: LD_VAR 0 4
79459: ARRAY
79460: NOT
79461: IFFALSE 79465
// continue ;
79463: GO 79447
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
79465: LD_VAR 0 6
79469: PUSH
79470: LD_VAR 0 7
79474: PUSH
79475: LD_VAR 0 8
79479: PUSH
79480: LD_VAR 0 9
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: PPUSH
79491: LD_EXP 69
79495: PUSH
79496: LD_VAR 0 4
79500: ARRAY
79501: PUSH
79502: LD_INT 1
79504: ARRAY
79505: PPUSH
79506: CALL 24581 0 2
79510: IFFALSE 79599
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
79512: LD_ADDR_EXP 69
79516: PUSH
79517: LD_EXP 69
79521: PPUSH
79522: LD_VAR 0 4
79526: PPUSH
79527: LD_EXP 69
79531: PUSH
79532: LD_VAR 0 4
79536: ARRAY
79537: PPUSH
79538: LD_INT 1
79540: PPUSH
79541: CALL_OW 3
79545: PPUSH
79546: CALL_OW 1
79550: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
79551: LD_ADDR_EXP 71
79555: PUSH
79556: LD_EXP 71
79560: PPUSH
79561: LD_VAR 0 4
79565: PUSH
79566: LD_EXP 71
79570: PUSH
79571: LD_VAR 0 4
79575: ARRAY
79576: PUSH
79577: LD_INT 1
79579: PLUS
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PPUSH
79585: LD_VAR 0 1
79589: PPUSH
79590: CALL 18412 0 3
79594: ST_TO_ADDR
// exit ;
79595: POP
79596: POP
79597: GO 79603
// end ; end ;
79599: GO 79447
79601: POP
79602: POP
// end ;
79603: LD_VAR 0 3
79607: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
79608: LD_INT 0
79610: PPUSH
79611: PPUSH
79612: PPUSH
// if not mc_bases or not skirmish then
79613: LD_EXP 64
79617: NOT
79618: PUSH
79619: LD_EXP 62
79623: NOT
79624: OR
79625: IFFALSE 79629
// exit ;
79627: GO 79819
// for i = 1 to mc_bases do
79629: LD_ADDR_VAR 0 4
79633: PUSH
79634: DOUBLE
79635: LD_INT 1
79637: DEC
79638: ST_TO_ADDR
79639: LD_EXP 64
79643: PUSH
79644: FOR_TO
79645: IFFALSE 79732
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
79647: LD_VAR 0 1
79651: PUSH
79652: LD_EXP 72
79656: PUSH
79657: LD_VAR 0 4
79661: ARRAY
79662: IN
79663: PUSH
79664: LD_VAR 0 1
79668: PUSH
79669: LD_EXP 73
79673: PUSH
79674: LD_VAR 0 4
79678: ARRAY
79679: IN
79680: NOT
79681: AND
79682: IFFALSE 79730
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79684: LD_ADDR_EXP 73
79688: PUSH
79689: LD_EXP 73
79693: PPUSH
79694: LD_VAR 0 4
79698: PUSH
79699: LD_EXP 73
79703: PUSH
79704: LD_VAR 0 4
79708: ARRAY
79709: PUSH
79710: LD_INT 1
79712: PLUS
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: PPUSH
79718: LD_VAR 0 1
79722: PPUSH
79723: CALL 18412 0 3
79727: ST_TO_ADDR
// break ;
79728: GO 79732
// end ; end ;
79730: GO 79644
79732: POP
79733: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
79734: LD_VAR 0 1
79738: PPUSH
79739: CALL_OW 257
79743: PUSH
79744: LD_EXP 90
79748: IN
79749: PUSH
79750: LD_VAR 0 1
79754: PPUSH
79755: CALL_OW 266
79759: PUSH
79760: LD_INT 5
79762: EQUAL
79763: AND
79764: PUSH
79765: LD_VAR 0 2
79769: PPUSH
79770: CALL_OW 110
79774: PUSH
79775: LD_INT 18
79777: NONEQUAL
79778: AND
79779: IFFALSE 79819
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
79781: LD_VAR 0 2
79785: PPUSH
79786: CALL_OW 257
79790: PUSH
79791: LD_INT 5
79793: PUSH
79794: LD_INT 8
79796: PUSH
79797: LD_INT 9
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: LIST
79804: IN
79805: IFFALSE 79819
// SetClass ( unit , 1 ) ;
79807: LD_VAR 0 2
79811: PPUSH
79812: LD_INT 1
79814: PPUSH
79815: CALL_OW 336
// end ;
79819: LD_VAR 0 3
79823: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79824: LD_INT 0
79826: PPUSH
79827: PPUSH
// if not mc_bases or not skirmish then
79828: LD_EXP 64
79832: NOT
79833: PUSH
79834: LD_EXP 62
79838: NOT
79839: OR
79840: IFFALSE 79844
// exit ;
79842: GO 79960
// if GetLives ( abandoned_vehicle ) > 250 then
79844: LD_VAR 0 2
79848: PPUSH
79849: CALL_OW 256
79853: PUSH
79854: LD_INT 250
79856: GREATER
79857: IFFALSE 79861
// exit ;
79859: GO 79960
// for i = 1 to mc_bases do
79861: LD_ADDR_VAR 0 6
79865: PUSH
79866: DOUBLE
79867: LD_INT 1
79869: DEC
79870: ST_TO_ADDR
79871: LD_EXP 64
79875: PUSH
79876: FOR_TO
79877: IFFALSE 79958
// begin if driver in mc_bases [ i ] then
79879: LD_VAR 0 1
79883: PUSH
79884: LD_EXP 64
79888: PUSH
79889: LD_VAR 0 6
79893: ARRAY
79894: IN
79895: IFFALSE 79956
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
79897: LD_VAR 0 1
79901: PPUSH
79902: LD_EXP 64
79906: PUSH
79907: LD_VAR 0 6
79911: ARRAY
79912: PPUSH
79913: LD_INT 2
79915: PUSH
79916: LD_INT 30
79918: PUSH
79919: LD_INT 0
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: PUSH
79926: LD_INT 30
79928: PUSH
79929: LD_INT 1
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: LIST
79940: PPUSH
79941: CALL_OW 72
79945: PUSH
79946: LD_INT 1
79948: ARRAY
79949: PPUSH
79950: CALL_OW 112
// break ;
79954: GO 79958
// end ; end ;
79956: GO 79876
79958: POP
79959: POP
// end ; end_of_file end_of_file
79960: LD_VAR 0 5
79964: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
79965: GO 79967
79967: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
79968: LD_STRING initStreamRollete();
79970: PPUSH
79971: CALL_OW 559
// InitStreamMode ;
79975: CALL 79984 0 0
// DefineStreamItems ( ) ;
79979: CALL 80424 0 0
// end ;
79983: END
// function InitStreamMode ; begin
79984: LD_INT 0
79986: PPUSH
// streamModeActive := false ;
79987: LD_ADDR_EXP 107
79991: PUSH
79992: LD_INT 0
79994: ST_TO_ADDR
// normalCounter := 36 ;
79995: LD_ADDR_EXP 108
79999: PUSH
80000: LD_INT 36
80002: ST_TO_ADDR
// hardcoreCounter := 16 ;
80003: LD_ADDR_EXP 109
80007: PUSH
80008: LD_INT 16
80010: ST_TO_ADDR
// sRocket := false ;
80011: LD_ADDR_EXP 112
80015: PUSH
80016: LD_INT 0
80018: ST_TO_ADDR
// sSpeed := false ;
80019: LD_ADDR_EXP 111
80023: PUSH
80024: LD_INT 0
80026: ST_TO_ADDR
// sEngine := false ;
80027: LD_ADDR_EXP 113
80031: PUSH
80032: LD_INT 0
80034: ST_TO_ADDR
// sSpec := false ;
80035: LD_ADDR_EXP 110
80039: PUSH
80040: LD_INT 0
80042: ST_TO_ADDR
// sLevel := false ;
80043: LD_ADDR_EXP 114
80047: PUSH
80048: LD_INT 0
80050: ST_TO_ADDR
// sArmoury := false ;
80051: LD_ADDR_EXP 115
80055: PUSH
80056: LD_INT 0
80058: ST_TO_ADDR
// sRadar := false ;
80059: LD_ADDR_EXP 116
80063: PUSH
80064: LD_INT 0
80066: ST_TO_ADDR
// sBunker := false ;
80067: LD_ADDR_EXP 117
80071: PUSH
80072: LD_INT 0
80074: ST_TO_ADDR
// sHack := false ;
80075: LD_ADDR_EXP 118
80079: PUSH
80080: LD_INT 0
80082: ST_TO_ADDR
// sFire := false ;
80083: LD_ADDR_EXP 119
80087: PUSH
80088: LD_INT 0
80090: ST_TO_ADDR
// sRefresh := false ;
80091: LD_ADDR_EXP 120
80095: PUSH
80096: LD_INT 0
80098: ST_TO_ADDR
// sExp := false ;
80099: LD_ADDR_EXP 121
80103: PUSH
80104: LD_INT 0
80106: ST_TO_ADDR
// sDepot := false ;
80107: LD_ADDR_EXP 122
80111: PUSH
80112: LD_INT 0
80114: ST_TO_ADDR
// sFlag := false ;
80115: LD_ADDR_EXP 123
80119: PUSH
80120: LD_INT 0
80122: ST_TO_ADDR
// sKamikadze := false ;
80123: LD_ADDR_EXP 131
80127: PUSH
80128: LD_INT 0
80130: ST_TO_ADDR
// sTroll := false ;
80131: LD_ADDR_EXP 132
80135: PUSH
80136: LD_INT 0
80138: ST_TO_ADDR
// sSlow := false ;
80139: LD_ADDR_EXP 133
80143: PUSH
80144: LD_INT 0
80146: ST_TO_ADDR
// sLack := false ;
80147: LD_ADDR_EXP 134
80151: PUSH
80152: LD_INT 0
80154: ST_TO_ADDR
// sTank := false ;
80155: LD_ADDR_EXP 136
80159: PUSH
80160: LD_INT 0
80162: ST_TO_ADDR
// sRemote := false ;
80163: LD_ADDR_EXP 137
80167: PUSH
80168: LD_INT 0
80170: ST_TO_ADDR
// sPowell := false ;
80171: LD_ADDR_EXP 138
80175: PUSH
80176: LD_INT 0
80178: ST_TO_ADDR
// sTeleport := false ;
80179: LD_ADDR_EXP 141
80183: PUSH
80184: LD_INT 0
80186: ST_TO_ADDR
// sOilTower := false ;
80187: LD_ADDR_EXP 143
80191: PUSH
80192: LD_INT 0
80194: ST_TO_ADDR
// sShovel := false ;
80195: LD_ADDR_EXP 144
80199: PUSH
80200: LD_INT 0
80202: ST_TO_ADDR
// sSheik := false ;
80203: LD_ADDR_EXP 145
80207: PUSH
80208: LD_INT 0
80210: ST_TO_ADDR
// sEarthquake := false ;
80211: LD_ADDR_EXP 147
80215: PUSH
80216: LD_INT 0
80218: ST_TO_ADDR
// sAI := false ;
80219: LD_ADDR_EXP 148
80223: PUSH
80224: LD_INT 0
80226: ST_TO_ADDR
// sCargo := false ;
80227: LD_ADDR_EXP 151
80231: PUSH
80232: LD_INT 0
80234: ST_TO_ADDR
// sDLaser := false ;
80235: LD_ADDR_EXP 152
80239: PUSH
80240: LD_INT 0
80242: ST_TO_ADDR
// sExchange := false ;
80243: LD_ADDR_EXP 153
80247: PUSH
80248: LD_INT 0
80250: ST_TO_ADDR
// sFac := false ;
80251: LD_ADDR_EXP 154
80255: PUSH
80256: LD_INT 0
80258: ST_TO_ADDR
// sPower := false ;
80259: LD_ADDR_EXP 155
80263: PUSH
80264: LD_INT 0
80266: ST_TO_ADDR
// sRandom := false ;
80267: LD_ADDR_EXP 156
80271: PUSH
80272: LD_INT 0
80274: ST_TO_ADDR
// sShield := false ;
80275: LD_ADDR_EXP 157
80279: PUSH
80280: LD_INT 0
80282: ST_TO_ADDR
// sTime := false ;
80283: LD_ADDR_EXP 158
80287: PUSH
80288: LD_INT 0
80290: ST_TO_ADDR
// sTools := false ;
80291: LD_ADDR_EXP 159
80295: PUSH
80296: LD_INT 0
80298: ST_TO_ADDR
// sSold := false ;
80299: LD_ADDR_EXP 124
80303: PUSH
80304: LD_INT 0
80306: ST_TO_ADDR
// sDiff := false ;
80307: LD_ADDR_EXP 125
80311: PUSH
80312: LD_INT 0
80314: ST_TO_ADDR
// sFog := false ;
80315: LD_ADDR_EXP 128
80319: PUSH
80320: LD_INT 0
80322: ST_TO_ADDR
// sReset := false ;
80323: LD_ADDR_EXP 129
80327: PUSH
80328: LD_INT 0
80330: ST_TO_ADDR
// sSun := false ;
80331: LD_ADDR_EXP 130
80335: PUSH
80336: LD_INT 0
80338: ST_TO_ADDR
// sTiger := false ;
80339: LD_ADDR_EXP 126
80343: PUSH
80344: LD_INT 0
80346: ST_TO_ADDR
// sBomb := false ;
80347: LD_ADDR_EXP 127
80351: PUSH
80352: LD_INT 0
80354: ST_TO_ADDR
// sWound := false ;
80355: LD_ADDR_EXP 135
80359: PUSH
80360: LD_INT 0
80362: ST_TO_ADDR
// sBetray := false ;
80363: LD_ADDR_EXP 139
80367: PUSH
80368: LD_INT 0
80370: ST_TO_ADDR
// sContamin := false ;
80371: LD_ADDR_EXP 140
80375: PUSH
80376: LD_INT 0
80378: ST_TO_ADDR
// sOil := false ;
80379: LD_ADDR_EXP 142
80383: PUSH
80384: LD_INT 0
80386: ST_TO_ADDR
// sStu := false ;
80387: LD_ADDR_EXP 146
80391: PUSH
80392: LD_INT 0
80394: ST_TO_ADDR
// sBazooka := false ;
80395: LD_ADDR_EXP 149
80399: PUSH
80400: LD_INT 0
80402: ST_TO_ADDR
// sMortar := false ;
80403: LD_ADDR_EXP 150
80407: PUSH
80408: LD_INT 0
80410: ST_TO_ADDR
// sRanger := false ;
80411: LD_ADDR_EXP 160
80415: PUSH
80416: LD_INT 0
80418: ST_TO_ADDR
// end ;
80419: LD_VAR 0 1
80423: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
80424: LD_INT 0
80426: PPUSH
80427: PPUSH
80428: PPUSH
80429: PPUSH
80430: PPUSH
// result := [ ] ;
80431: LD_ADDR_VAR 0 1
80435: PUSH
80436: EMPTY
80437: ST_TO_ADDR
// if campaign_id = 1 then
80438: LD_OWVAR 69
80442: PUSH
80443: LD_INT 1
80445: EQUAL
80446: IFFALSE 83384
// begin case mission_number of 1 :
80448: LD_OWVAR 70
80452: PUSH
80453: LD_INT 1
80455: DOUBLE
80456: EQUAL
80457: IFTRUE 80461
80459: GO 80525
80461: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
80462: LD_ADDR_VAR 0 1
80466: PUSH
80467: LD_INT 2
80469: PUSH
80470: LD_INT 4
80472: PUSH
80473: LD_INT 11
80475: PUSH
80476: LD_INT 12
80478: PUSH
80479: LD_INT 15
80481: PUSH
80482: LD_INT 16
80484: PUSH
80485: LD_INT 22
80487: PUSH
80488: LD_INT 23
80490: PUSH
80491: LD_INT 26
80493: PUSH
80494: EMPTY
80495: LIST
80496: LIST
80497: LIST
80498: LIST
80499: LIST
80500: LIST
80501: LIST
80502: LIST
80503: LIST
80504: PUSH
80505: LD_INT 101
80507: PUSH
80508: LD_INT 102
80510: PUSH
80511: LD_INT 106
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: LIST
80518: PUSH
80519: EMPTY
80520: LIST
80521: LIST
80522: ST_TO_ADDR
80523: GO 83382
80525: LD_INT 2
80527: DOUBLE
80528: EQUAL
80529: IFTRUE 80533
80531: GO 80605
80533: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
80534: LD_ADDR_VAR 0 1
80538: PUSH
80539: LD_INT 2
80541: PUSH
80542: LD_INT 4
80544: PUSH
80545: LD_INT 11
80547: PUSH
80548: LD_INT 12
80550: PUSH
80551: LD_INT 15
80553: PUSH
80554: LD_INT 16
80556: PUSH
80557: LD_INT 22
80559: PUSH
80560: LD_INT 23
80562: PUSH
80563: LD_INT 26
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: LIST
80570: LIST
80571: LIST
80572: LIST
80573: LIST
80574: LIST
80575: LIST
80576: PUSH
80577: LD_INT 101
80579: PUSH
80580: LD_INT 102
80582: PUSH
80583: LD_INT 105
80585: PUSH
80586: LD_INT 106
80588: PUSH
80589: LD_INT 108
80591: PUSH
80592: EMPTY
80593: LIST
80594: LIST
80595: LIST
80596: LIST
80597: LIST
80598: PUSH
80599: EMPTY
80600: LIST
80601: LIST
80602: ST_TO_ADDR
80603: GO 83382
80605: LD_INT 3
80607: DOUBLE
80608: EQUAL
80609: IFTRUE 80613
80611: GO 80689
80613: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
80614: LD_ADDR_VAR 0 1
80618: PUSH
80619: LD_INT 2
80621: PUSH
80622: LD_INT 4
80624: PUSH
80625: LD_INT 5
80627: PUSH
80628: LD_INT 11
80630: PUSH
80631: LD_INT 12
80633: PUSH
80634: LD_INT 15
80636: PUSH
80637: LD_INT 16
80639: PUSH
80640: LD_INT 22
80642: PUSH
80643: LD_INT 26
80645: PUSH
80646: LD_INT 36
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: LIST
80653: LIST
80654: LIST
80655: LIST
80656: LIST
80657: LIST
80658: LIST
80659: LIST
80660: PUSH
80661: LD_INT 101
80663: PUSH
80664: LD_INT 102
80666: PUSH
80667: LD_INT 105
80669: PUSH
80670: LD_INT 106
80672: PUSH
80673: LD_INT 108
80675: PUSH
80676: EMPTY
80677: LIST
80678: LIST
80679: LIST
80680: LIST
80681: LIST
80682: PUSH
80683: EMPTY
80684: LIST
80685: LIST
80686: ST_TO_ADDR
80687: GO 83382
80689: LD_INT 4
80691: DOUBLE
80692: EQUAL
80693: IFTRUE 80697
80695: GO 80781
80697: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
80698: LD_ADDR_VAR 0 1
80702: PUSH
80703: LD_INT 2
80705: PUSH
80706: LD_INT 4
80708: PUSH
80709: LD_INT 5
80711: PUSH
80712: LD_INT 8
80714: PUSH
80715: LD_INT 11
80717: PUSH
80718: LD_INT 12
80720: PUSH
80721: LD_INT 15
80723: PUSH
80724: LD_INT 16
80726: PUSH
80727: LD_INT 22
80729: PUSH
80730: LD_INT 23
80732: PUSH
80733: LD_INT 26
80735: PUSH
80736: LD_INT 36
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: LIST
80743: LIST
80744: LIST
80745: LIST
80746: LIST
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 101
80755: PUSH
80756: LD_INT 102
80758: PUSH
80759: LD_INT 105
80761: PUSH
80762: LD_INT 106
80764: PUSH
80765: LD_INT 108
80767: PUSH
80768: EMPTY
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: LIST
80774: PUSH
80775: EMPTY
80776: LIST
80777: LIST
80778: ST_TO_ADDR
80779: GO 83382
80781: LD_INT 5
80783: DOUBLE
80784: EQUAL
80785: IFTRUE 80789
80787: GO 80889
80789: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
80790: LD_ADDR_VAR 0 1
80794: PUSH
80795: LD_INT 2
80797: PUSH
80798: LD_INT 4
80800: PUSH
80801: LD_INT 5
80803: PUSH
80804: LD_INT 6
80806: PUSH
80807: LD_INT 8
80809: PUSH
80810: LD_INT 11
80812: PUSH
80813: LD_INT 12
80815: PUSH
80816: LD_INT 15
80818: PUSH
80819: LD_INT 16
80821: PUSH
80822: LD_INT 22
80824: PUSH
80825: LD_INT 23
80827: PUSH
80828: LD_INT 25
80830: PUSH
80831: LD_INT 26
80833: PUSH
80834: LD_INT 36
80836: PUSH
80837: EMPTY
80838: LIST
80839: LIST
80840: LIST
80841: LIST
80842: LIST
80843: LIST
80844: LIST
80845: LIST
80846: LIST
80847: LIST
80848: LIST
80849: LIST
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 101
80855: PUSH
80856: LD_INT 102
80858: PUSH
80859: LD_INT 105
80861: PUSH
80862: LD_INT 106
80864: PUSH
80865: LD_INT 108
80867: PUSH
80868: LD_INT 109
80870: PUSH
80871: LD_INT 112
80873: PUSH
80874: EMPTY
80875: LIST
80876: LIST
80877: LIST
80878: LIST
80879: LIST
80880: LIST
80881: LIST
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: ST_TO_ADDR
80887: GO 83382
80889: LD_INT 6
80891: DOUBLE
80892: EQUAL
80893: IFTRUE 80897
80895: GO 81017
80897: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
80898: LD_ADDR_VAR 0 1
80902: PUSH
80903: LD_INT 2
80905: PUSH
80906: LD_INT 4
80908: PUSH
80909: LD_INT 5
80911: PUSH
80912: LD_INT 6
80914: PUSH
80915: LD_INT 8
80917: PUSH
80918: LD_INT 11
80920: PUSH
80921: LD_INT 12
80923: PUSH
80924: LD_INT 15
80926: PUSH
80927: LD_INT 16
80929: PUSH
80930: LD_INT 20
80932: PUSH
80933: LD_INT 21
80935: PUSH
80936: LD_INT 22
80938: PUSH
80939: LD_INT 23
80941: PUSH
80942: LD_INT 25
80944: PUSH
80945: LD_INT 26
80947: PUSH
80948: LD_INT 30
80950: PUSH
80951: LD_INT 31
80953: PUSH
80954: LD_INT 32
80956: PUSH
80957: LD_INT 36
80959: PUSH
80960: EMPTY
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: LIST
80976: LIST
80977: LIST
80978: LIST
80979: LIST
80980: PUSH
80981: LD_INT 101
80983: PUSH
80984: LD_INT 102
80986: PUSH
80987: LD_INT 105
80989: PUSH
80990: LD_INT 106
80992: PUSH
80993: LD_INT 108
80995: PUSH
80996: LD_INT 109
80998: PUSH
80999: LD_INT 112
81001: PUSH
81002: EMPTY
81003: LIST
81004: LIST
81005: LIST
81006: LIST
81007: LIST
81008: LIST
81009: LIST
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: ST_TO_ADDR
81015: GO 83382
81017: LD_INT 7
81019: DOUBLE
81020: EQUAL
81021: IFTRUE 81025
81023: GO 81125
81025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
81026: LD_ADDR_VAR 0 1
81030: PUSH
81031: LD_INT 2
81033: PUSH
81034: LD_INT 4
81036: PUSH
81037: LD_INT 5
81039: PUSH
81040: LD_INT 7
81042: PUSH
81043: LD_INT 11
81045: PUSH
81046: LD_INT 12
81048: PUSH
81049: LD_INT 15
81051: PUSH
81052: LD_INT 16
81054: PUSH
81055: LD_INT 20
81057: PUSH
81058: LD_INT 21
81060: PUSH
81061: LD_INT 22
81063: PUSH
81064: LD_INT 23
81066: PUSH
81067: LD_INT 25
81069: PUSH
81070: LD_INT 26
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: LIST
81077: LIST
81078: LIST
81079: LIST
81080: LIST
81081: LIST
81082: LIST
81083: LIST
81084: LIST
81085: LIST
81086: LIST
81087: LIST
81088: PUSH
81089: LD_INT 101
81091: PUSH
81092: LD_INT 102
81094: PUSH
81095: LD_INT 103
81097: PUSH
81098: LD_INT 105
81100: PUSH
81101: LD_INT 106
81103: PUSH
81104: LD_INT 108
81106: PUSH
81107: LD_INT 112
81109: PUSH
81110: EMPTY
81111: LIST
81112: LIST
81113: LIST
81114: LIST
81115: LIST
81116: LIST
81117: LIST
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: ST_TO_ADDR
81123: GO 83382
81125: LD_INT 8
81127: DOUBLE
81128: EQUAL
81129: IFTRUE 81133
81131: GO 81261
81133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
81134: LD_ADDR_VAR 0 1
81138: PUSH
81139: LD_INT 2
81141: PUSH
81142: LD_INT 4
81144: PUSH
81145: LD_INT 5
81147: PUSH
81148: LD_INT 6
81150: PUSH
81151: LD_INT 7
81153: PUSH
81154: LD_INT 8
81156: PUSH
81157: LD_INT 11
81159: PUSH
81160: LD_INT 12
81162: PUSH
81163: LD_INT 15
81165: PUSH
81166: LD_INT 16
81168: PUSH
81169: LD_INT 20
81171: PUSH
81172: LD_INT 21
81174: PUSH
81175: LD_INT 22
81177: PUSH
81178: LD_INT 23
81180: PUSH
81181: LD_INT 25
81183: PUSH
81184: LD_INT 26
81186: PUSH
81187: LD_INT 30
81189: PUSH
81190: LD_INT 31
81192: PUSH
81193: LD_INT 32
81195: PUSH
81196: LD_INT 36
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: LIST
81203: LIST
81204: LIST
81205: LIST
81206: LIST
81207: LIST
81208: LIST
81209: LIST
81210: LIST
81211: LIST
81212: LIST
81213: LIST
81214: LIST
81215: LIST
81216: LIST
81217: LIST
81218: LIST
81219: LIST
81220: PUSH
81221: LD_INT 101
81223: PUSH
81224: LD_INT 102
81226: PUSH
81227: LD_INT 103
81229: PUSH
81230: LD_INT 105
81232: PUSH
81233: LD_INT 106
81235: PUSH
81236: LD_INT 108
81238: PUSH
81239: LD_INT 109
81241: PUSH
81242: LD_INT 112
81244: PUSH
81245: EMPTY
81246: LIST
81247: LIST
81248: LIST
81249: LIST
81250: LIST
81251: LIST
81252: LIST
81253: LIST
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: ST_TO_ADDR
81259: GO 83382
81261: LD_INT 9
81263: DOUBLE
81264: EQUAL
81265: IFTRUE 81269
81267: GO 81405
81269: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
81270: LD_ADDR_VAR 0 1
81274: PUSH
81275: LD_INT 2
81277: PUSH
81278: LD_INT 4
81280: PUSH
81281: LD_INT 5
81283: PUSH
81284: LD_INT 6
81286: PUSH
81287: LD_INT 7
81289: PUSH
81290: LD_INT 8
81292: PUSH
81293: LD_INT 11
81295: PUSH
81296: LD_INT 12
81298: PUSH
81299: LD_INT 15
81301: PUSH
81302: LD_INT 16
81304: PUSH
81305: LD_INT 20
81307: PUSH
81308: LD_INT 21
81310: PUSH
81311: LD_INT 22
81313: PUSH
81314: LD_INT 23
81316: PUSH
81317: LD_INT 25
81319: PUSH
81320: LD_INT 26
81322: PUSH
81323: LD_INT 28
81325: PUSH
81326: LD_INT 30
81328: PUSH
81329: LD_INT 31
81331: PUSH
81332: LD_INT 32
81334: PUSH
81335: LD_INT 36
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: LIST
81349: LIST
81350: LIST
81351: LIST
81352: LIST
81353: LIST
81354: LIST
81355: LIST
81356: LIST
81357: LIST
81358: LIST
81359: LIST
81360: PUSH
81361: LD_INT 101
81363: PUSH
81364: LD_INT 102
81366: PUSH
81367: LD_INT 103
81369: PUSH
81370: LD_INT 105
81372: PUSH
81373: LD_INT 106
81375: PUSH
81376: LD_INT 108
81378: PUSH
81379: LD_INT 109
81381: PUSH
81382: LD_INT 112
81384: PUSH
81385: LD_INT 114
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: LIST
81392: LIST
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: LIST
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: ST_TO_ADDR
81403: GO 83382
81405: LD_INT 10
81407: DOUBLE
81408: EQUAL
81409: IFTRUE 81413
81411: GO 81597
81413: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
81414: LD_ADDR_VAR 0 1
81418: PUSH
81419: LD_INT 2
81421: PUSH
81422: LD_INT 4
81424: PUSH
81425: LD_INT 5
81427: PUSH
81428: LD_INT 6
81430: PUSH
81431: LD_INT 7
81433: PUSH
81434: LD_INT 8
81436: PUSH
81437: LD_INT 9
81439: PUSH
81440: LD_INT 10
81442: PUSH
81443: LD_INT 11
81445: PUSH
81446: LD_INT 12
81448: PUSH
81449: LD_INT 13
81451: PUSH
81452: LD_INT 14
81454: PUSH
81455: LD_INT 15
81457: PUSH
81458: LD_INT 16
81460: PUSH
81461: LD_INT 17
81463: PUSH
81464: LD_INT 18
81466: PUSH
81467: LD_INT 19
81469: PUSH
81470: LD_INT 20
81472: PUSH
81473: LD_INT 21
81475: PUSH
81476: LD_INT 22
81478: PUSH
81479: LD_INT 23
81481: PUSH
81482: LD_INT 24
81484: PUSH
81485: LD_INT 25
81487: PUSH
81488: LD_INT 26
81490: PUSH
81491: LD_INT 28
81493: PUSH
81494: LD_INT 30
81496: PUSH
81497: LD_INT 31
81499: PUSH
81500: LD_INT 32
81502: PUSH
81503: LD_INT 36
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: LIST
81534: LIST
81535: LIST
81536: PUSH
81537: LD_INT 101
81539: PUSH
81540: LD_INT 102
81542: PUSH
81543: LD_INT 103
81545: PUSH
81546: LD_INT 104
81548: PUSH
81549: LD_INT 105
81551: PUSH
81552: LD_INT 106
81554: PUSH
81555: LD_INT 107
81557: PUSH
81558: LD_INT 108
81560: PUSH
81561: LD_INT 109
81563: PUSH
81564: LD_INT 110
81566: PUSH
81567: LD_INT 111
81569: PUSH
81570: LD_INT 112
81572: PUSH
81573: LD_INT 114
81575: PUSH
81576: EMPTY
81577: LIST
81578: LIST
81579: LIST
81580: LIST
81581: LIST
81582: LIST
81583: LIST
81584: LIST
81585: LIST
81586: LIST
81587: LIST
81588: LIST
81589: LIST
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: ST_TO_ADDR
81595: GO 83382
81597: LD_INT 11
81599: DOUBLE
81600: EQUAL
81601: IFTRUE 81605
81603: GO 81797
81605: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
81606: LD_ADDR_VAR 0 1
81610: PUSH
81611: LD_INT 2
81613: PUSH
81614: LD_INT 3
81616: PUSH
81617: LD_INT 4
81619: PUSH
81620: LD_INT 5
81622: PUSH
81623: LD_INT 6
81625: PUSH
81626: LD_INT 7
81628: PUSH
81629: LD_INT 8
81631: PUSH
81632: LD_INT 9
81634: PUSH
81635: LD_INT 10
81637: PUSH
81638: LD_INT 11
81640: PUSH
81641: LD_INT 12
81643: PUSH
81644: LD_INT 13
81646: PUSH
81647: LD_INT 14
81649: PUSH
81650: LD_INT 15
81652: PUSH
81653: LD_INT 16
81655: PUSH
81656: LD_INT 17
81658: PUSH
81659: LD_INT 18
81661: PUSH
81662: LD_INT 19
81664: PUSH
81665: LD_INT 20
81667: PUSH
81668: LD_INT 21
81670: PUSH
81671: LD_INT 22
81673: PUSH
81674: LD_INT 23
81676: PUSH
81677: LD_INT 24
81679: PUSH
81680: LD_INT 25
81682: PUSH
81683: LD_INT 26
81685: PUSH
81686: LD_INT 28
81688: PUSH
81689: LD_INT 30
81691: PUSH
81692: LD_INT 31
81694: PUSH
81695: LD_INT 32
81697: PUSH
81698: LD_INT 34
81700: PUSH
81701: LD_INT 36
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: LIST
81708: LIST
81709: LIST
81710: LIST
81711: LIST
81712: LIST
81713: LIST
81714: LIST
81715: LIST
81716: LIST
81717: LIST
81718: LIST
81719: LIST
81720: LIST
81721: LIST
81722: LIST
81723: LIST
81724: LIST
81725: LIST
81726: LIST
81727: LIST
81728: LIST
81729: LIST
81730: LIST
81731: LIST
81732: LIST
81733: LIST
81734: LIST
81735: LIST
81736: PUSH
81737: LD_INT 101
81739: PUSH
81740: LD_INT 102
81742: PUSH
81743: LD_INT 103
81745: PUSH
81746: LD_INT 104
81748: PUSH
81749: LD_INT 105
81751: PUSH
81752: LD_INT 106
81754: PUSH
81755: LD_INT 107
81757: PUSH
81758: LD_INT 108
81760: PUSH
81761: LD_INT 109
81763: PUSH
81764: LD_INT 110
81766: PUSH
81767: LD_INT 111
81769: PUSH
81770: LD_INT 112
81772: PUSH
81773: LD_INT 114
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: LIST
81780: LIST
81781: LIST
81782: LIST
81783: LIST
81784: LIST
81785: LIST
81786: LIST
81787: LIST
81788: LIST
81789: LIST
81790: PUSH
81791: EMPTY
81792: LIST
81793: LIST
81794: ST_TO_ADDR
81795: GO 83382
81797: LD_INT 12
81799: DOUBLE
81800: EQUAL
81801: IFTRUE 81805
81803: GO 82013
81805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
81806: LD_ADDR_VAR 0 1
81810: PUSH
81811: LD_INT 1
81813: PUSH
81814: LD_INT 2
81816: PUSH
81817: LD_INT 3
81819: PUSH
81820: LD_INT 4
81822: PUSH
81823: LD_INT 5
81825: PUSH
81826: LD_INT 6
81828: PUSH
81829: LD_INT 7
81831: PUSH
81832: LD_INT 8
81834: PUSH
81835: LD_INT 9
81837: PUSH
81838: LD_INT 10
81840: PUSH
81841: LD_INT 11
81843: PUSH
81844: LD_INT 12
81846: PUSH
81847: LD_INT 13
81849: PUSH
81850: LD_INT 14
81852: PUSH
81853: LD_INT 15
81855: PUSH
81856: LD_INT 16
81858: PUSH
81859: LD_INT 17
81861: PUSH
81862: LD_INT 18
81864: PUSH
81865: LD_INT 19
81867: PUSH
81868: LD_INT 20
81870: PUSH
81871: LD_INT 21
81873: PUSH
81874: LD_INT 22
81876: PUSH
81877: LD_INT 23
81879: PUSH
81880: LD_INT 24
81882: PUSH
81883: LD_INT 25
81885: PUSH
81886: LD_INT 26
81888: PUSH
81889: LD_INT 27
81891: PUSH
81892: LD_INT 28
81894: PUSH
81895: LD_INT 30
81897: PUSH
81898: LD_INT 31
81900: PUSH
81901: LD_INT 32
81903: PUSH
81904: LD_INT 33
81906: PUSH
81907: LD_INT 34
81909: PUSH
81910: LD_INT 36
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: LIST
81919: LIST
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: LIST
81925: LIST
81926: LIST
81927: LIST
81928: LIST
81929: LIST
81930: LIST
81931: LIST
81932: LIST
81933: LIST
81934: LIST
81935: LIST
81936: LIST
81937: LIST
81938: LIST
81939: LIST
81940: LIST
81941: LIST
81942: LIST
81943: LIST
81944: LIST
81945: LIST
81946: LIST
81947: LIST
81948: PUSH
81949: LD_INT 101
81951: PUSH
81952: LD_INT 102
81954: PUSH
81955: LD_INT 103
81957: PUSH
81958: LD_INT 104
81960: PUSH
81961: LD_INT 105
81963: PUSH
81964: LD_INT 106
81966: PUSH
81967: LD_INT 107
81969: PUSH
81970: LD_INT 108
81972: PUSH
81973: LD_INT 109
81975: PUSH
81976: LD_INT 110
81978: PUSH
81979: LD_INT 111
81981: PUSH
81982: LD_INT 112
81984: PUSH
81985: LD_INT 113
81987: PUSH
81988: LD_INT 114
81990: PUSH
81991: EMPTY
81992: LIST
81993: LIST
81994: LIST
81995: LIST
81996: LIST
81997: LIST
81998: LIST
81999: LIST
82000: LIST
82001: LIST
82002: LIST
82003: LIST
82004: LIST
82005: LIST
82006: PUSH
82007: EMPTY
82008: LIST
82009: LIST
82010: ST_TO_ADDR
82011: GO 83382
82013: LD_INT 13
82015: DOUBLE
82016: EQUAL
82017: IFTRUE 82021
82019: GO 82217
82021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
82022: LD_ADDR_VAR 0 1
82026: PUSH
82027: LD_INT 1
82029: PUSH
82030: LD_INT 2
82032: PUSH
82033: LD_INT 3
82035: PUSH
82036: LD_INT 4
82038: PUSH
82039: LD_INT 5
82041: PUSH
82042: LD_INT 8
82044: PUSH
82045: LD_INT 9
82047: PUSH
82048: LD_INT 10
82050: PUSH
82051: LD_INT 11
82053: PUSH
82054: LD_INT 12
82056: PUSH
82057: LD_INT 14
82059: PUSH
82060: LD_INT 15
82062: PUSH
82063: LD_INT 16
82065: PUSH
82066: LD_INT 17
82068: PUSH
82069: LD_INT 18
82071: PUSH
82072: LD_INT 19
82074: PUSH
82075: LD_INT 20
82077: PUSH
82078: LD_INT 21
82080: PUSH
82081: LD_INT 22
82083: PUSH
82084: LD_INT 23
82086: PUSH
82087: LD_INT 24
82089: PUSH
82090: LD_INT 25
82092: PUSH
82093: LD_INT 26
82095: PUSH
82096: LD_INT 27
82098: PUSH
82099: LD_INT 28
82101: PUSH
82102: LD_INT 30
82104: PUSH
82105: LD_INT 31
82107: PUSH
82108: LD_INT 32
82110: PUSH
82111: LD_INT 33
82113: PUSH
82114: LD_INT 34
82116: PUSH
82117: LD_INT 36
82119: PUSH
82120: EMPTY
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: LIST
82132: LIST
82133: LIST
82134: LIST
82135: LIST
82136: LIST
82137: LIST
82138: LIST
82139: LIST
82140: LIST
82141: LIST
82142: LIST
82143: LIST
82144: LIST
82145: LIST
82146: LIST
82147: LIST
82148: LIST
82149: LIST
82150: LIST
82151: LIST
82152: PUSH
82153: LD_INT 101
82155: PUSH
82156: LD_INT 102
82158: PUSH
82159: LD_INT 103
82161: PUSH
82162: LD_INT 104
82164: PUSH
82165: LD_INT 105
82167: PUSH
82168: LD_INT 106
82170: PUSH
82171: LD_INT 107
82173: PUSH
82174: LD_INT 108
82176: PUSH
82177: LD_INT 109
82179: PUSH
82180: LD_INT 110
82182: PUSH
82183: LD_INT 111
82185: PUSH
82186: LD_INT 112
82188: PUSH
82189: LD_INT 113
82191: PUSH
82192: LD_INT 114
82194: PUSH
82195: EMPTY
82196: LIST
82197: LIST
82198: LIST
82199: LIST
82200: LIST
82201: LIST
82202: LIST
82203: LIST
82204: LIST
82205: LIST
82206: LIST
82207: LIST
82208: LIST
82209: LIST
82210: PUSH
82211: EMPTY
82212: LIST
82213: LIST
82214: ST_TO_ADDR
82215: GO 83382
82217: LD_INT 14
82219: DOUBLE
82220: EQUAL
82221: IFTRUE 82225
82223: GO 82437
82225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
82226: LD_ADDR_VAR 0 1
82230: PUSH
82231: LD_INT 1
82233: PUSH
82234: LD_INT 2
82236: PUSH
82237: LD_INT 3
82239: PUSH
82240: LD_INT 4
82242: PUSH
82243: LD_INT 5
82245: PUSH
82246: LD_INT 6
82248: PUSH
82249: LD_INT 7
82251: PUSH
82252: LD_INT 8
82254: PUSH
82255: LD_INT 9
82257: PUSH
82258: LD_INT 10
82260: PUSH
82261: LD_INT 11
82263: PUSH
82264: LD_INT 12
82266: PUSH
82267: LD_INT 13
82269: PUSH
82270: LD_INT 14
82272: PUSH
82273: LD_INT 15
82275: PUSH
82276: LD_INT 16
82278: PUSH
82279: LD_INT 17
82281: PUSH
82282: LD_INT 18
82284: PUSH
82285: LD_INT 19
82287: PUSH
82288: LD_INT 20
82290: PUSH
82291: LD_INT 21
82293: PUSH
82294: LD_INT 22
82296: PUSH
82297: LD_INT 23
82299: PUSH
82300: LD_INT 24
82302: PUSH
82303: LD_INT 25
82305: PUSH
82306: LD_INT 26
82308: PUSH
82309: LD_INT 27
82311: PUSH
82312: LD_INT 28
82314: PUSH
82315: LD_INT 29
82317: PUSH
82318: LD_INT 30
82320: PUSH
82321: LD_INT 31
82323: PUSH
82324: LD_INT 32
82326: PUSH
82327: LD_INT 33
82329: PUSH
82330: LD_INT 34
82332: PUSH
82333: LD_INT 36
82335: PUSH
82336: EMPTY
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: LIST
82348: LIST
82349: LIST
82350: LIST
82351: LIST
82352: LIST
82353: LIST
82354: LIST
82355: LIST
82356: LIST
82357: LIST
82358: LIST
82359: LIST
82360: LIST
82361: LIST
82362: LIST
82363: LIST
82364: LIST
82365: LIST
82366: LIST
82367: LIST
82368: LIST
82369: LIST
82370: LIST
82371: LIST
82372: PUSH
82373: LD_INT 101
82375: PUSH
82376: LD_INT 102
82378: PUSH
82379: LD_INT 103
82381: PUSH
82382: LD_INT 104
82384: PUSH
82385: LD_INT 105
82387: PUSH
82388: LD_INT 106
82390: PUSH
82391: LD_INT 107
82393: PUSH
82394: LD_INT 108
82396: PUSH
82397: LD_INT 109
82399: PUSH
82400: LD_INT 110
82402: PUSH
82403: LD_INT 111
82405: PUSH
82406: LD_INT 112
82408: PUSH
82409: LD_INT 113
82411: PUSH
82412: LD_INT 114
82414: PUSH
82415: EMPTY
82416: LIST
82417: LIST
82418: LIST
82419: LIST
82420: LIST
82421: LIST
82422: LIST
82423: LIST
82424: LIST
82425: LIST
82426: LIST
82427: LIST
82428: LIST
82429: LIST
82430: PUSH
82431: EMPTY
82432: LIST
82433: LIST
82434: ST_TO_ADDR
82435: GO 83382
82437: LD_INT 15
82439: DOUBLE
82440: EQUAL
82441: IFTRUE 82445
82443: GO 82657
82445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
82446: LD_ADDR_VAR 0 1
82450: PUSH
82451: LD_INT 1
82453: PUSH
82454: LD_INT 2
82456: PUSH
82457: LD_INT 3
82459: PUSH
82460: LD_INT 4
82462: PUSH
82463: LD_INT 5
82465: PUSH
82466: LD_INT 6
82468: PUSH
82469: LD_INT 7
82471: PUSH
82472: LD_INT 8
82474: PUSH
82475: LD_INT 9
82477: PUSH
82478: LD_INT 10
82480: PUSH
82481: LD_INT 11
82483: PUSH
82484: LD_INT 12
82486: PUSH
82487: LD_INT 13
82489: PUSH
82490: LD_INT 14
82492: PUSH
82493: LD_INT 15
82495: PUSH
82496: LD_INT 16
82498: PUSH
82499: LD_INT 17
82501: PUSH
82502: LD_INT 18
82504: PUSH
82505: LD_INT 19
82507: PUSH
82508: LD_INT 20
82510: PUSH
82511: LD_INT 21
82513: PUSH
82514: LD_INT 22
82516: PUSH
82517: LD_INT 23
82519: PUSH
82520: LD_INT 24
82522: PUSH
82523: LD_INT 25
82525: PUSH
82526: LD_INT 26
82528: PUSH
82529: LD_INT 27
82531: PUSH
82532: LD_INT 28
82534: PUSH
82535: LD_INT 29
82537: PUSH
82538: LD_INT 30
82540: PUSH
82541: LD_INT 31
82543: PUSH
82544: LD_INT 32
82546: PUSH
82547: LD_INT 33
82549: PUSH
82550: LD_INT 34
82552: PUSH
82553: LD_INT 36
82555: PUSH
82556: EMPTY
82557: LIST
82558: LIST
82559: LIST
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: LIST
82566: LIST
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: LIST
82580: LIST
82581: LIST
82582: LIST
82583: LIST
82584: LIST
82585: LIST
82586: LIST
82587: LIST
82588: LIST
82589: LIST
82590: LIST
82591: LIST
82592: PUSH
82593: LD_INT 101
82595: PUSH
82596: LD_INT 102
82598: PUSH
82599: LD_INT 103
82601: PUSH
82602: LD_INT 104
82604: PUSH
82605: LD_INT 105
82607: PUSH
82608: LD_INT 106
82610: PUSH
82611: LD_INT 107
82613: PUSH
82614: LD_INT 108
82616: PUSH
82617: LD_INT 109
82619: PUSH
82620: LD_INT 110
82622: PUSH
82623: LD_INT 111
82625: PUSH
82626: LD_INT 112
82628: PUSH
82629: LD_INT 113
82631: PUSH
82632: LD_INT 114
82634: PUSH
82635: EMPTY
82636: LIST
82637: LIST
82638: LIST
82639: LIST
82640: LIST
82641: LIST
82642: LIST
82643: LIST
82644: LIST
82645: LIST
82646: LIST
82647: LIST
82648: LIST
82649: LIST
82650: PUSH
82651: EMPTY
82652: LIST
82653: LIST
82654: ST_TO_ADDR
82655: GO 83382
82657: LD_INT 16
82659: DOUBLE
82660: EQUAL
82661: IFTRUE 82665
82663: GO 82789
82665: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
82666: LD_ADDR_VAR 0 1
82670: PUSH
82671: LD_INT 2
82673: PUSH
82674: LD_INT 4
82676: PUSH
82677: LD_INT 5
82679: PUSH
82680: LD_INT 7
82682: PUSH
82683: LD_INT 11
82685: PUSH
82686: LD_INT 12
82688: PUSH
82689: LD_INT 15
82691: PUSH
82692: LD_INT 16
82694: PUSH
82695: LD_INT 20
82697: PUSH
82698: LD_INT 21
82700: PUSH
82701: LD_INT 22
82703: PUSH
82704: LD_INT 23
82706: PUSH
82707: LD_INT 25
82709: PUSH
82710: LD_INT 26
82712: PUSH
82713: LD_INT 30
82715: PUSH
82716: LD_INT 31
82718: PUSH
82719: LD_INT 32
82721: PUSH
82722: LD_INT 33
82724: PUSH
82725: LD_INT 34
82727: PUSH
82728: EMPTY
82729: LIST
82730: LIST
82731: LIST
82732: LIST
82733: LIST
82734: LIST
82735: LIST
82736: LIST
82737: LIST
82738: LIST
82739: LIST
82740: LIST
82741: LIST
82742: LIST
82743: LIST
82744: LIST
82745: LIST
82746: LIST
82747: LIST
82748: PUSH
82749: LD_INT 101
82751: PUSH
82752: LD_INT 102
82754: PUSH
82755: LD_INT 103
82757: PUSH
82758: LD_INT 106
82760: PUSH
82761: LD_INT 108
82763: PUSH
82764: LD_INT 112
82766: PUSH
82767: LD_INT 113
82769: PUSH
82770: LD_INT 114
82772: PUSH
82773: EMPTY
82774: LIST
82775: LIST
82776: LIST
82777: LIST
82778: LIST
82779: LIST
82780: LIST
82781: LIST
82782: PUSH
82783: EMPTY
82784: LIST
82785: LIST
82786: ST_TO_ADDR
82787: GO 83382
82789: LD_INT 17
82791: DOUBLE
82792: EQUAL
82793: IFTRUE 82797
82795: GO 83009
82797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
82798: LD_ADDR_VAR 0 1
82802: PUSH
82803: LD_INT 1
82805: PUSH
82806: LD_INT 2
82808: PUSH
82809: LD_INT 3
82811: PUSH
82812: LD_INT 4
82814: PUSH
82815: LD_INT 5
82817: PUSH
82818: LD_INT 6
82820: PUSH
82821: LD_INT 7
82823: PUSH
82824: LD_INT 8
82826: PUSH
82827: LD_INT 9
82829: PUSH
82830: LD_INT 10
82832: PUSH
82833: LD_INT 11
82835: PUSH
82836: LD_INT 12
82838: PUSH
82839: LD_INT 13
82841: PUSH
82842: LD_INT 14
82844: PUSH
82845: LD_INT 15
82847: PUSH
82848: LD_INT 16
82850: PUSH
82851: LD_INT 17
82853: PUSH
82854: LD_INT 18
82856: PUSH
82857: LD_INT 19
82859: PUSH
82860: LD_INT 20
82862: PUSH
82863: LD_INT 21
82865: PUSH
82866: LD_INT 22
82868: PUSH
82869: LD_INT 23
82871: PUSH
82872: LD_INT 24
82874: PUSH
82875: LD_INT 25
82877: PUSH
82878: LD_INT 26
82880: PUSH
82881: LD_INT 27
82883: PUSH
82884: LD_INT 28
82886: PUSH
82887: LD_INT 29
82889: PUSH
82890: LD_INT 30
82892: PUSH
82893: LD_INT 31
82895: PUSH
82896: LD_INT 32
82898: PUSH
82899: LD_INT 33
82901: PUSH
82902: LD_INT 34
82904: PUSH
82905: LD_INT 36
82907: PUSH
82908: EMPTY
82909: LIST
82910: LIST
82911: LIST
82912: LIST
82913: LIST
82914: LIST
82915: LIST
82916: LIST
82917: LIST
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: LIST
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: LIST
82929: LIST
82930: LIST
82931: LIST
82932: LIST
82933: LIST
82934: LIST
82935: LIST
82936: LIST
82937: LIST
82938: LIST
82939: LIST
82940: LIST
82941: LIST
82942: LIST
82943: LIST
82944: PUSH
82945: LD_INT 101
82947: PUSH
82948: LD_INT 102
82950: PUSH
82951: LD_INT 103
82953: PUSH
82954: LD_INT 104
82956: PUSH
82957: LD_INT 105
82959: PUSH
82960: LD_INT 106
82962: PUSH
82963: LD_INT 107
82965: PUSH
82966: LD_INT 108
82968: PUSH
82969: LD_INT 109
82971: PUSH
82972: LD_INT 110
82974: PUSH
82975: LD_INT 111
82977: PUSH
82978: LD_INT 112
82980: PUSH
82981: LD_INT 113
82983: PUSH
82984: LD_INT 114
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: LIST
82991: LIST
82992: LIST
82993: LIST
82994: LIST
82995: LIST
82996: LIST
82997: LIST
82998: LIST
82999: LIST
83000: LIST
83001: LIST
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: ST_TO_ADDR
83007: GO 83382
83009: LD_INT 18
83011: DOUBLE
83012: EQUAL
83013: IFTRUE 83017
83015: GO 83153
83017: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
83018: LD_ADDR_VAR 0 1
83022: PUSH
83023: LD_INT 2
83025: PUSH
83026: LD_INT 4
83028: PUSH
83029: LD_INT 5
83031: PUSH
83032: LD_INT 7
83034: PUSH
83035: LD_INT 11
83037: PUSH
83038: LD_INT 12
83040: PUSH
83041: LD_INT 15
83043: PUSH
83044: LD_INT 16
83046: PUSH
83047: LD_INT 20
83049: PUSH
83050: LD_INT 21
83052: PUSH
83053: LD_INT 22
83055: PUSH
83056: LD_INT 23
83058: PUSH
83059: LD_INT 25
83061: PUSH
83062: LD_INT 26
83064: PUSH
83065: LD_INT 30
83067: PUSH
83068: LD_INT 31
83070: PUSH
83071: LD_INT 32
83073: PUSH
83074: LD_INT 33
83076: PUSH
83077: LD_INT 34
83079: PUSH
83080: LD_INT 35
83082: PUSH
83083: LD_INT 36
83085: PUSH
83086: EMPTY
83087: LIST
83088: LIST
83089: LIST
83090: LIST
83091: LIST
83092: LIST
83093: LIST
83094: LIST
83095: LIST
83096: LIST
83097: LIST
83098: LIST
83099: LIST
83100: LIST
83101: LIST
83102: LIST
83103: LIST
83104: LIST
83105: LIST
83106: LIST
83107: LIST
83108: PUSH
83109: LD_INT 101
83111: PUSH
83112: LD_INT 102
83114: PUSH
83115: LD_INT 103
83117: PUSH
83118: LD_INT 106
83120: PUSH
83121: LD_INT 108
83123: PUSH
83124: LD_INT 112
83126: PUSH
83127: LD_INT 113
83129: PUSH
83130: LD_INT 114
83132: PUSH
83133: LD_INT 115
83135: PUSH
83136: EMPTY
83137: LIST
83138: LIST
83139: LIST
83140: LIST
83141: LIST
83142: LIST
83143: LIST
83144: LIST
83145: LIST
83146: PUSH
83147: EMPTY
83148: LIST
83149: LIST
83150: ST_TO_ADDR
83151: GO 83382
83153: LD_INT 19
83155: DOUBLE
83156: EQUAL
83157: IFTRUE 83161
83159: GO 83381
83161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
83162: LD_ADDR_VAR 0 1
83166: PUSH
83167: LD_INT 1
83169: PUSH
83170: LD_INT 2
83172: PUSH
83173: LD_INT 3
83175: PUSH
83176: LD_INT 4
83178: PUSH
83179: LD_INT 5
83181: PUSH
83182: LD_INT 6
83184: PUSH
83185: LD_INT 7
83187: PUSH
83188: LD_INT 8
83190: PUSH
83191: LD_INT 9
83193: PUSH
83194: LD_INT 10
83196: PUSH
83197: LD_INT 11
83199: PUSH
83200: LD_INT 12
83202: PUSH
83203: LD_INT 13
83205: PUSH
83206: LD_INT 14
83208: PUSH
83209: LD_INT 15
83211: PUSH
83212: LD_INT 16
83214: PUSH
83215: LD_INT 17
83217: PUSH
83218: LD_INT 18
83220: PUSH
83221: LD_INT 19
83223: PUSH
83224: LD_INT 20
83226: PUSH
83227: LD_INT 21
83229: PUSH
83230: LD_INT 22
83232: PUSH
83233: LD_INT 23
83235: PUSH
83236: LD_INT 24
83238: PUSH
83239: LD_INT 25
83241: PUSH
83242: LD_INT 26
83244: PUSH
83245: LD_INT 27
83247: PUSH
83248: LD_INT 28
83250: PUSH
83251: LD_INT 29
83253: PUSH
83254: LD_INT 30
83256: PUSH
83257: LD_INT 31
83259: PUSH
83260: LD_INT 32
83262: PUSH
83263: LD_INT 33
83265: PUSH
83266: LD_INT 34
83268: PUSH
83269: LD_INT 35
83271: PUSH
83272: LD_INT 36
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: LIST
83279: LIST
83280: LIST
83281: LIST
83282: LIST
83283: LIST
83284: LIST
83285: LIST
83286: LIST
83287: LIST
83288: LIST
83289: LIST
83290: LIST
83291: LIST
83292: LIST
83293: LIST
83294: LIST
83295: LIST
83296: LIST
83297: LIST
83298: LIST
83299: LIST
83300: LIST
83301: LIST
83302: LIST
83303: LIST
83304: LIST
83305: LIST
83306: LIST
83307: LIST
83308: LIST
83309: LIST
83310: LIST
83311: LIST
83312: PUSH
83313: LD_INT 101
83315: PUSH
83316: LD_INT 102
83318: PUSH
83319: LD_INT 103
83321: PUSH
83322: LD_INT 104
83324: PUSH
83325: LD_INT 105
83327: PUSH
83328: LD_INT 106
83330: PUSH
83331: LD_INT 107
83333: PUSH
83334: LD_INT 108
83336: PUSH
83337: LD_INT 109
83339: PUSH
83340: LD_INT 110
83342: PUSH
83343: LD_INT 111
83345: PUSH
83346: LD_INT 112
83348: PUSH
83349: LD_INT 113
83351: PUSH
83352: LD_INT 114
83354: PUSH
83355: LD_INT 115
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: LIST
83362: LIST
83363: LIST
83364: LIST
83365: LIST
83366: LIST
83367: LIST
83368: LIST
83369: LIST
83370: LIST
83371: LIST
83372: LIST
83373: LIST
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: ST_TO_ADDR
83379: GO 83382
83381: POP
// end else
83382: GO 83601
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
83384: LD_ADDR_VAR 0 1
83388: PUSH
83389: LD_INT 1
83391: PUSH
83392: LD_INT 2
83394: PUSH
83395: LD_INT 3
83397: PUSH
83398: LD_INT 4
83400: PUSH
83401: LD_INT 5
83403: PUSH
83404: LD_INT 6
83406: PUSH
83407: LD_INT 7
83409: PUSH
83410: LD_INT 8
83412: PUSH
83413: LD_INT 9
83415: PUSH
83416: LD_INT 10
83418: PUSH
83419: LD_INT 11
83421: PUSH
83422: LD_INT 12
83424: PUSH
83425: LD_INT 13
83427: PUSH
83428: LD_INT 14
83430: PUSH
83431: LD_INT 15
83433: PUSH
83434: LD_INT 16
83436: PUSH
83437: LD_INT 17
83439: PUSH
83440: LD_INT 18
83442: PUSH
83443: LD_INT 19
83445: PUSH
83446: LD_INT 20
83448: PUSH
83449: LD_INT 21
83451: PUSH
83452: LD_INT 22
83454: PUSH
83455: LD_INT 23
83457: PUSH
83458: LD_INT 24
83460: PUSH
83461: LD_INT 25
83463: PUSH
83464: LD_INT 26
83466: PUSH
83467: LD_INT 27
83469: PUSH
83470: LD_INT 28
83472: PUSH
83473: LD_INT 29
83475: PUSH
83476: LD_INT 30
83478: PUSH
83479: LD_INT 31
83481: PUSH
83482: LD_INT 32
83484: PUSH
83485: LD_INT 33
83487: PUSH
83488: LD_INT 34
83490: PUSH
83491: LD_INT 35
83493: PUSH
83494: LD_INT 36
83496: PUSH
83497: EMPTY
83498: LIST
83499: LIST
83500: LIST
83501: LIST
83502: LIST
83503: LIST
83504: LIST
83505: LIST
83506: LIST
83507: LIST
83508: LIST
83509: LIST
83510: LIST
83511: LIST
83512: LIST
83513: LIST
83514: LIST
83515: LIST
83516: LIST
83517: LIST
83518: LIST
83519: LIST
83520: LIST
83521: LIST
83522: LIST
83523: LIST
83524: LIST
83525: LIST
83526: LIST
83527: LIST
83528: LIST
83529: LIST
83530: LIST
83531: LIST
83532: LIST
83533: LIST
83534: PUSH
83535: LD_INT 101
83537: PUSH
83538: LD_INT 102
83540: PUSH
83541: LD_INT 103
83543: PUSH
83544: LD_INT 104
83546: PUSH
83547: LD_INT 105
83549: PUSH
83550: LD_INT 106
83552: PUSH
83553: LD_INT 107
83555: PUSH
83556: LD_INT 108
83558: PUSH
83559: LD_INT 109
83561: PUSH
83562: LD_INT 110
83564: PUSH
83565: LD_INT 111
83567: PUSH
83568: LD_INT 112
83570: PUSH
83571: LD_INT 113
83573: PUSH
83574: LD_INT 114
83576: PUSH
83577: LD_INT 115
83579: PUSH
83580: EMPTY
83581: LIST
83582: LIST
83583: LIST
83584: LIST
83585: LIST
83586: LIST
83587: LIST
83588: LIST
83589: LIST
83590: LIST
83591: LIST
83592: LIST
83593: LIST
83594: LIST
83595: LIST
83596: PUSH
83597: EMPTY
83598: LIST
83599: LIST
83600: ST_TO_ADDR
// if result then
83601: LD_VAR 0 1
83605: IFFALSE 83894
// begin normal :=  ;
83607: LD_ADDR_VAR 0 3
83611: PUSH
83612: LD_STRING 
83614: ST_TO_ADDR
// hardcore :=  ;
83615: LD_ADDR_VAR 0 4
83619: PUSH
83620: LD_STRING 
83622: ST_TO_ADDR
// for i = 1 to normalCounter do
83623: LD_ADDR_VAR 0 5
83627: PUSH
83628: DOUBLE
83629: LD_INT 1
83631: DEC
83632: ST_TO_ADDR
83633: LD_EXP 108
83637: PUSH
83638: FOR_TO
83639: IFFALSE 83740
// begin tmp := 0 ;
83641: LD_ADDR_VAR 0 2
83645: PUSH
83646: LD_STRING 0
83648: ST_TO_ADDR
// if result [ 1 ] then
83649: LD_VAR 0 1
83653: PUSH
83654: LD_INT 1
83656: ARRAY
83657: IFFALSE 83722
// if result [ 1 ] [ 1 ] = i then
83659: LD_VAR 0 1
83663: PUSH
83664: LD_INT 1
83666: ARRAY
83667: PUSH
83668: LD_INT 1
83670: ARRAY
83671: PUSH
83672: LD_VAR 0 5
83676: EQUAL
83677: IFFALSE 83722
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
83679: LD_ADDR_VAR 0 1
83683: PUSH
83684: LD_VAR 0 1
83688: PPUSH
83689: LD_INT 1
83691: PPUSH
83692: LD_VAR 0 1
83696: PUSH
83697: LD_INT 1
83699: ARRAY
83700: PPUSH
83701: LD_INT 1
83703: PPUSH
83704: CALL_OW 3
83708: PPUSH
83709: CALL_OW 1
83713: ST_TO_ADDR
// tmp := 1 ;
83714: LD_ADDR_VAR 0 2
83718: PUSH
83719: LD_STRING 1
83721: ST_TO_ADDR
// end ; normal := normal & tmp ;
83722: LD_ADDR_VAR 0 3
83726: PUSH
83727: LD_VAR 0 3
83731: PUSH
83732: LD_VAR 0 2
83736: STR
83737: ST_TO_ADDR
// end ;
83738: GO 83638
83740: POP
83741: POP
// for i = 1 to hardcoreCounter do
83742: LD_ADDR_VAR 0 5
83746: PUSH
83747: DOUBLE
83748: LD_INT 1
83750: DEC
83751: ST_TO_ADDR
83752: LD_EXP 109
83756: PUSH
83757: FOR_TO
83758: IFFALSE 83863
// begin tmp := 0 ;
83760: LD_ADDR_VAR 0 2
83764: PUSH
83765: LD_STRING 0
83767: ST_TO_ADDR
// if result [ 2 ] then
83768: LD_VAR 0 1
83772: PUSH
83773: LD_INT 2
83775: ARRAY
83776: IFFALSE 83845
// if result [ 2 ] [ 1 ] = 100 + i then
83778: LD_VAR 0 1
83782: PUSH
83783: LD_INT 2
83785: ARRAY
83786: PUSH
83787: LD_INT 1
83789: ARRAY
83790: PUSH
83791: LD_INT 100
83793: PUSH
83794: LD_VAR 0 5
83798: PLUS
83799: EQUAL
83800: IFFALSE 83845
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
83802: LD_ADDR_VAR 0 1
83806: PUSH
83807: LD_VAR 0 1
83811: PPUSH
83812: LD_INT 2
83814: PPUSH
83815: LD_VAR 0 1
83819: PUSH
83820: LD_INT 2
83822: ARRAY
83823: PPUSH
83824: LD_INT 1
83826: PPUSH
83827: CALL_OW 3
83831: PPUSH
83832: CALL_OW 1
83836: ST_TO_ADDR
// tmp := 1 ;
83837: LD_ADDR_VAR 0 2
83841: PUSH
83842: LD_STRING 1
83844: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
83845: LD_ADDR_VAR 0 4
83849: PUSH
83850: LD_VAR 0 4
83854: PUSH
83855: LD_VAR 0 2
83859: STR
83860: ST_TO_ADDR
// end ;
83861: GO 83757
83863: POP
83864: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
83865: LD_STRING getStreamItemsFromMission("
83867: PUSH
83868: LD_VAR 0 3
83872: STR
83873: PUSH
83874: LD_STRING ","
83876: STR
83877: PUSH
83878: LD_VAR 0 4
83882: STR
83883: PUSH
83884: LD_STRING ")
83886: STR
83887: PPUSH
83888: CALL_OW 559
// end else
83892: GO 83901
// ToLua ( getStreamItemsFromMission("","") ) ;
83894: LD_STRING getStreamItemsFromMission("","")
83896: PPUSH
83897: CALL_OW 559
// end ;
83901: LD_VAR 0 1
83905: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
83906: LD_VAR 0 2
83910: PUSH
83911: LD_INT 100
83913: EQUAL
83914: IFFALSE 84863
// begin if not StreamModeActive then
83916: LD_EXP 107
83920: NOT
83921: IFFALSE 83931
// StreamModeActive := true ;
83923: LD_ADDR_EXP 107
83927: PUSH
83928: LD_INT 1
83930: ST_TO_ADDR
// if p3 = 0 then
83931: LD_VAR 0 3
83935: PUSH
83936: LD_INT 0
83938: EQUAL
83939: IFFALSE 83945
// InitStreamMode ;
83941: CALL 79984 0 0
// if p3 = 1 then
83945: LD_VAR 0 3
83949: PUSH
83950: LD_INT 1
83952: EQUAL
83953: IFFALSE 83963
// sRocket := true ;
83955: LD_ADDR_EXP 112
83959: PUSH
83960: LD_INT 1
83962: ST_TO_ADDR
// if p3 = 2 then
83963: LD_VAR 0 3
83967: PUSH
83968: LD_INT 2
83970: EQUAL
83971: IFFALSE 83981
// sSpeed := true ;
83973: LD_ADDR_EXP 111
83977: PUSH
83978: LD_INT 1
83980: ST_TO_ADDR
// if p3 = 3 then
83981: LD_VAR 0 3
83985: PUSH
83986: LD_INT 3
83988: EQUAL
83989: IFFALSE 83999
// sEngine := true ;
83991: LD_ADDR_EXP 113
83995: PUSH
83996: LD_INT 1
83998: ST_TO_ADDR
// if p3 = 4 then
83999: LD_VAR 0 3
84003: PUSH
84004: LD_INT 4
84006: EQUAL
84007: IFFALSE 84017
// sSpec := true ;
84009: LD_ADDR_EXP 110
84013: PUSH
84014: LD_INT 1
84016: ST_TO_ADDR
// if p3 = 5 then
84017: LD_VAR 0 3
84021: PUSH
84022: LD_INT 5
84024: EQUAL
84025: IFFALSE 84035
// sLevel := true ;
84027: LD_ADDR_EXP 114
84031: PUSH
84032: LD_INT 1
84034: ST_TO_ADDR
// if p3 = 6 then
84035: LD_VAR 0 3
84039: PUSH
84040: LD_INT 6
84042: EQUAL
84043: IFFALSE 84053
// sArmoury := true ;
84045: LD_ADDR_EXP 115
84049: PUSH
84050: LD_INT 1
84052: ST_TO_ADDR
// if p3 = 7 then
84053: LD_VAR 0 3
84057: PUSH
84058: LD_INT 7
84060: EQUAL
84061: IFFALSE 84071
// sRadar := true ;
84063: LD_ADDR_EXP 116
84067: PUSH
84068: LD_INT 1
84070: ST_TO_ADDR
// if p3 = 8 then
84071: LD_VAR 0 3
84075: PUSH
84076: LD_INT 8
84078: EQUAL
84079: IFFALSE 84089
// sBunker := true ;
84081: LD_ADDR_EXP 117
84085: PUSH
84086: LD_INT 1
84088: ST_TO_ADDR
// if p3 = 9 then
84089: LD_VAR 0 3
84093: PUSH
84094: LD_INT 9
84096: EQUAL
84097: IFFALSE 84107
// sHack := true ;
84099: LD_ADDR_EXP 118
84103: PUSH
84104: LD_INT 1
84106: ST_TO_ADDR
// if p3 = 10 then
84107: LD_VAR 0 3
84111: PUSH
84112: LD_INT 10
84114: EQUAL
84115: IFFALSE 84125
// sFire := true ;
84117: LD_ADDR_EXP 119
84121: PUSH
84122: LD_INT 1
84124: ST_TO_ADDR
// if p3 = 11 then
84125: LD_VAR 0 3
84129: PUSH
84130: LD_INT 11
84132: EQUAL
84133: IFFALSE 84143
// sRefresh := true ;
84135: LD_ADDR_EXP 120
84139: PUSH
84140: LD_INT 1
84142: ST_TO_ADDR
// if p3 = 12 then
84143: LD_VAR 0 3
84147: PUSH
84148: LD_INT 12
84150: EQUAL
84151: IFFALSE 84161
// sExp := true ;
84153: LD_ADDR_EXP 121
84157: PUSH
84158: LD_INT 1
84160: ST_TO_ADDR
// if p3 = 13 then
84161: LD_VAR 0 3
84165: PUSH
84166: LD_INT 13
84168: EQUAL
84169: IFFALSE 84179
// sDepot := true ;
84171: LD_ADDR_EXP 122
84175: PUSH
84176: LD_INT 1
84178: ST_TO_ADDR
// if p3 = 14 then
84179: LD_VAR 0 3
84183: PUSH
84184: LD_INT 14
84186: EQUAL
84187: IFFALSE 84197
// sFlag := true ;
84189: LD_ADDR_EXP 123
84193: PUSH
84194: LD_INT 1
84196: ST_TO_ADDR
// if p3 = 15 then
84197: LD_VAR 0 3
84201: PUSH
84202: LD_INT 15
84204: EQUAL
84205: IFFALSE 84215
// sKamikadze := true ;
84207: LD_ADDR_EXP 131
84211: PUSH
84212: LD_INT 1
84214: ST_TO_ADDR
// if p3 = 16 then
84215: LD_VAR 0 3
84219: PUSH
84220: LD_INT 16
84222: EQUAL
84223: IFFALSE 84233
// sTroll := true ;
84225: LD_ADDR_EXP 132
84229: PUSH
84230: LD_INT 1
84232: ST_TO_ADDR
// if p3 = 17 then
84233: LD_VAR 0 3
84237: PUSH
84238: LD_INT 17
84240: EQUAL
84241: IFFALSE 84251
// sSlow := true ;
84243: LD_ADDR_EXP 133
84247: PUSH
84248: LD_INT 1
84250: ST_TO_ADDR
// if p3 = 18 then
84251: LD_VAR 0 3
84255: PUSH
84256: LD_INT 18
84258: EQUAL
84259: IFFALSE 84269
// sLack := true ;
84261: LD_ADDR_EXP 134
84265: PUSH
84266: LD_INT 1
84268: ST_TO_ADDR
// if p3 = 19 then
84269: LD_VAR 0 3
84273: PUSH
84274: LD_INT 19
84276: EQUAL
84277: IFFALSE 84287
// sTank := true ;
84279: LD_ADDR_EXP 136
84283: PUSH
84284: LD_INT 1
84286: ST_TO_ADDR
// if p3 = 20 then
84287: LD_VAR 0 3
84291: PUSH
84292: LD_INT 20
84294: EQUAL
84295: IFFALSE 84305
// sRemote := true ;
84297: LD_ADDR_EXP 137
84301: PUSH
84302: LD_INT 1
84304: ST_TO_ADDR
// if p3 = 21 then
84305: LD_VAR 0 3
84309: PUSH
84310: LD_INT 21
84312: EQUAL
84313: IFFALSE 84323
// sPowell := true ;
84315: LD_ADDR_EXP 138
84319: PUSH
84320: LD_INT 1
84322: ST_TO_ADDR
// if p3 = 22 then
84323: LD_VAR 0 3
84327: PUSH
84328: LD_INT 22
84330: EQUAL
84331: IFFALSE 84341
// sTeleport := true ;
84333: LD_ADDR_EXP 141
84337: PUSH
84338: LD_INT 1
84340: ST_TO_ADDR
// if p3 = 23 then
84341: LD_VAR 0 3
84345: PUSH
84346: LD_INT 23
84348: EQUAL
84349: IFFALSE 84359
// sOilTower := true ;
84351: LD_ADDR_EXP 143
84355: PUSH
84356: LD_INT 1
84358: ST_TO_ADDR
// if p3 = 24 then
84359: LD_VAR 0 3
84363: PUSH
84364: LD_INT 24
84366: EQUAL
84367: IFFALSE 84377
// sShovel := true ;
84369: LD_ADDR_EXP 144
84373: PUSH
84374: LD_INT 1
84376: ST_TO_ADDR
// if p3 = 25 then
84377: LD_VAR 0 3
84381: PUSH
84382: LD_INT 25
84384: EQUAL
84385: IFFALSE 84395
// sSheik := true ;
84387: LD_ADDR_EXP 145
84391: PUSH
84392: LD_INT 1
84394: ST_TO_ADDR
// if p3 = 26 then
84395: LD_VAR 0 3
84399: PUSH
84400: LD_INT 26
84402: EQUAL
84403: IFFALSE 84413
// sEarthquake := true ;
84405: LD_ADDR_EXP 147
84409: PUSH
84410: LD_INT 1
84412: ST_TO_ADDR
// if p3 = 27 then
84413: LD_VAR 0 3
84417: PUSH
84418: LD_INT 27
84420: EQUAL
84421: IFFALSE 84431
// sAI := true ;
84423: LD_ADDR_EXP 148
84427: PUSH
84428: LD_INT 1
84430: ST_TO_ADDR
// if p3 = 28 then
84431: LD_VAR 0 3
84435: PUSH
84436: LD_INT 28
84438: EQUAL
84439: IFFALSE 84449
// sCargo := true ;
84441: LD_ADDR_EXP 151
84445: PUSH
84446: LD_INT 1
84448: ST_TO_ADDR
// if p3 = 29 then
84449: LD_VAR 0 3
84453: PUSH
84454: LD_INT 29
84456: EQUAL
84457: IFFALSE 84467
// sDLaser := true ;
84459: LD_ADDR_EXP 152
84463: PUSH
84464: LD_INT 1
84466: ST_TO_ADDR
// if p3 = 30 then
84467: LD_VAR 0 3
84471: PUSH
84472: LD_INT 30
84474: EQUAL
84475: IFFALSE 84485
// sExchange := true ;
84477: LD_ADDR_EXP 153
84481: PUSH
84482: LD_INT 1
84484: ST_TO_ADDR
// if p3 = 31 then
84485: LD_VAR 0 3
84489: PUSH
84490: LD_INT 31
84492: EQUAL
84493: IFFALSE 84503
// sFac := true ;
84495: LD_ADDR_EXP 154
84499: PUSH
84500: LD_INT 1
84502: ST_TO_ADDR
// if p3 = 32 then
84503: LD_VAR 0 3
84507: PUSH
84508: LD_INT 32
84510: EQUAL
84511: IFFALSE 84521
// sPower := true ;
84513: LD_ADDR_EXP 155
84517: PUSH
84518: LD_INT 1
84520: ST_TO_ADDR
// if p3 = 33 then
84521: LD_VAR 0 3
84525: PUSH
84526: LD_INT 33
84528: EQUAL
84529: IFFALSE 84539
// sRandom := true ;
84531: LD_ADDR_EXP 156
84535: PUSH
84536: LD_INT 1
84538: ST_TO_ADDR
// if p3 = 34 then
84539: LD_VAR 0 3
84543: PUSH
84544: LD_INT 34
84546: EQUAL
84547: IFFALSE 84557
// sShield := true ;
84549: LD_ADDR_EXP 157
84553: PUSH
84554: LD_INT 1
84556: ST_TO_ADDR
// if p3 = 35 then
84557: LD_VAR 0 3
84561: PUSH
84562: LD_INT 35
84564: EQUAL
84565: IFFALSE 84575
// sTime := true ;
84567: LD_ADDR_EXP 158
84571: PUSH
84572: LD_INT 1
84574: ST_TO_ADDR
// if p3 = 36 then
84575: LD_VAR 0 3
84579: PUSH
84580: LD_INT 36
84582: EQUAL
84583: IFFALSE 84593
// sTools := true ;
84585: LD_ADDR_EXP 159
84589: PUSH
84590: LD_INT 1
84592: ST_TO_ADDR
// if p3 = 101 then
84593: LD_VAR 0 3
84597: PUSH
84598: LD_INT 101
84600: EQUAL
84601: IFFALSE 84611
// sSold := true ;
84603: LD_ADDR_EXP 124
84607: PUSH
84608: LD_INT 1
84610: ST_TO_ADDR
// if p3 = 102 then
84611: LD_VAR 0 3
84615: PUSH
84616: LD_INT 102
84618: EQUAL
84619: IFFALSE 84629
// sDiff := true ;
84621: LD_ADDR_EXP 125
84625: PUSH
84626: LD_INT 1
84628: ST_TO_ADDR
// if p3 = 103 then
84629: LD_VAR 0 3
84633: PUSH
84634: LD_INT 103
84636: EQUAL
84637: IFFALSE 84647
// sFog := true ;
84639: LD_ADDR_EXP 128
84643: PUSH
84644: LD_INT 1
84646: ST_TO_ADDR
// if p3 = 104 then
84647: LD_VAR 0 3
84651: PUSH
84652: LD_INT 104
84654: EQUAL
84655: IFFALSE 84665
// sReset := true ;
84657: LD_ADDR_EXP 129
84661: PUSH
84662: LD_INT 1
84664: ST_TO_ADDR
// if p3 = 105 then
84665: LD_VAR 0 3
84669: PUSH
84670: LD_INT 105
84672: EQUAL
84673: IFFALSE 84683
// sSun := true ;
84675: LD_ADDR_EXP 130
84679: PUSH
84680: LD_INT 1
84682: ST_TO_ADDR
// if p3 = 106 then
84683: LD_VAR 0 3
84687: PUSH
84688: LD_INT 106
84690: EQUAL
84691: IFFALSE 84701
// sTiger := true ;
84693: LD_ADDR_EXP 126
84697: PUSH
84698: LD_INT 1
84700: ST_TO_ADDR
// if p3 = 107 then
84701: LD_VAR 0 3
84705: PUSH
84706: LD_INT 107
84708: EQUAL
84709: IFFALSE 84719
// sBomb := true ;
84711: LD_ADDR_EXP 127
84715: PUSH
84716: LD_INT 1
84718: ST_TO_ADDR
// if p3 = 108 then
84719: LD_VAR 0 3
84723: PUSH
84724: LD_INT 108
84726: EQUAL
84727: IFFALSE 84737
// sWound := true ;
84729: LD_ADDR_EXP 135
84733: PUSH
84734: LD_INT 1
84736: ST_TO_ADDR
// if p3 = 109 then
84737: LD_VAR 0 3
84741: PUSH
84742: LD_INT 109
84744: EQUAL
84745: IFFALSE 84755
// sBetray := true ;
84747: LD_ADDR_EXP 139
84751: PUSH
84752: LD_INT 1
84754: ST_TO_ADDR
// if p3 = 110 then
84755: LD_VAR 0 3
84759: PUSH
84760: LD_INT 110
84762: EQUAL
84763: IFFALSE 84773
// sContamin := true ;
84765: LD_ADDR_EXP 140
84769: PUSH
84770: LD_INT 1
84772: ST_TO_ADDR
// if p3 = 111 then
84773: LD_VAR 0 3
84777: PUSH
84778: LD_INT 111
84780: EQUAL
84781: IFFALSE 84791
// sOil := true ;
84783: LD_ADDR_EXP 142
84787: PUSH
84788: LD_INT 1
84790: ST_TO_ADDR
// if p3 = 112 then
84791: LD_VAR 0 3
84795: PUSH
84796: LD_INT 112
84798: EQUAL
84799: IFFALSE 84809
// sStu := true ;
84801: LD_ADDR_EXP 146
84805: PUSH
84806: LD_INT 1
84808: ST_TO_ADDR
// if p3 = 113 then
84809: LD_VAR 0 3
84813: PUSH
84814: LD_INT 113
84816: EQUAL
84817: IFFALSE 84827
// sBazooka := true ;
84819: LD_ADDR_EXP 149
84823: PUSH
84824: LD_INT 1
84826: ST_TO_ADDR
// if p3 = 114 then
84827: LD_VAR 0 3
84831: PUSH
84832: LD_INT 114
84834: EQUAL
84835: IFFALSE 84845
// sMortar := true ;
84837: LD_ADDR_EXP 150
84841: PUSH
84842: LD_INT 1
84844: ST_TO_ADDR
// if p3 = 115 then
84845: LD_VAR 0 3
84849: PUSH
84850: LD_INT 115
84852: EQUAL
84853: IFFALSE 84863
// sRanger := true ;
84855: LD_ADDR_EXP 160
84859: PUSH
84860: LD_INT 1
84862: ST_TO_ADDR
// end ; end ;
84863: PPOPN 6
84865: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
84866: LD_EXP 107
84870: PUSH
84871: LD_EXP 112
84875: AND
84876: IFFALSE 85000
84878: GO 84880
84880: DISABLE
84881: LD_INT 0
84883: PPUSH
84884: PPUSH
// begin enable ;
84885: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
84886: LD_ADDR_VAR 0 2
84890: PUSH
84891: LD_INT 22
84893: PUSH
84894: LD_OWVAR 2
84898: PUSH
84899: EMPTY
84900: LIST
84901: LIST
84902: PUSH
84903: LD_INT 2
84905: PUSH
84906: LD_INT 34
84908: PUSH
84909: LD_INT 7
84911: PUSH
84912: EMPTY
84913: LIST
84914: LIST
84915: PUSH
84916: LD_INT 34
84918: PUSH
84919: LD_INT 45
84921: PUSH
84922: EMPTY
84923: LIST
84924: LIST
84925: PUSH
84926: LD_INT 34
84928: PUSH
84929: LD_INT 28
84931: PUSH
84932: EMPTY
84933: LIST
84934: LIST
84935: PUSH
84936: LD_INT 34
84938: PUSH
84939: LD_INT 47
84941: PUSH
84942: EMPTY
84943: LIST
84944: LIST
84945: PUSH
84946: EMPTY
84947: LIST
84948: LIST
84949: LIST
84950: LIST
84951: LIST
84952: PUSH
84953: EMPTY
84954: LIST
84955: LIST
84956: PPUSH
84957: CALL_OW 69
84961: ST_TO_ADDR
// if not tmp then
84962: LD_VAR 0 2
84966: NOT
84967: IFFALSE 84971
// exit ;
84969: GO 85000
// for i in tmp do
84971: LD_ADDR_VAR 0 1
84975: PUSH
84976: LD_VAR 0 2
84980: PUSH
84981: FOR_IN
84982: IFFALSE 84998
// begin SetLives ( i , 0 ) ;
84984: LD_VAR 0 1
84988: PPUSH
84989: LD_INT 0
84991: PPUSH
84992: CALL_OW 234
// end ;
84996: GO 84981
84998: POP
84999: POP
// end ;
85000: PPOPN 2
85002: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
85003: LD_EXP 107
85007: PUSH
85008: LD_EXP 113
85012: AND
85013: IFFALSE 85097
85015: GO 85017
85017: DISABLE
85018: LD_INT 0
85020: PPUSH
85021: PPUSH
// begin enable ;
85022: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
85023: LD_ADDR_VAR 0 2
85027: PUSH
85028: LD_INT 22
85030: PUSH
85031: LD_OWVAR 2
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: PUSH
85040: LD_INT 32
85042: PUSH
85043: LD_INT 3
85045: PUSH
85046: EMPTY
85047: LIST
85048: LIST
85049: PUSH
85050: EMPTY
85051: LIST
85052: LIST
85053: PPUSH
85054: CALL_OW 69
85058: ST_TO_ADDR
// if not tmp then
85059: LD_VAR 0 2
85063: NOT
85064: IFFALSE 85068
// exit ;
85066: GO 85097
// for i in tmp do
85068: LD_ADDR_VAR 0 1
85072: PUSH
85073: LD_VAR 0 2
85077: PUSH
85078: FOR_IN
85079: IFFALSE 85095
// begin SetLives ( i , 0 ) ;
85081: LD_VAR 0 1
85085: PPUSH
85086: LD_INT 0
85088: PPUSH
85089: CALL_OW 234
// end ;
85093: GO 85078
85095: POP
85096: POP
// end ;
85097: PPOPN 2
85099: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
85100: LD_EXP 107
85104: PUSH
85105: LD_EXP 110
85109: AND
85110: IFFALSE 85203
85112: GO 85114
85114: DISABLE
85115: LD_INT 0
85117: PPUSH
// begin enable ;
85118: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
85119: LD_ADDR_VAR 0 1
85123: PUSH
85124: LD_INT 22
85126: PUSH
85127: LD_OWVAR 2
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: PUSH
85136: LD_INT 2
85138: PUSH
85139: LD_INT 25
85141: PUSH
85142: LD_INT 5
85144: PUSH
85145: EMPTY
85146: LIST
85147: LIST
85148: PUSH
85149: LD_INT 25
85151: PUSH
85152: LD_INT 9
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: PUSH
85159: LD_INT 25
85161: PUSH
85162: LD_INT 8
85164: PUSH
85165: EMPTY
85166: LIST
85167: LIST
85168: PUSH
85169: EMPTY
85170: LIST
85171: LIST
85172: LIST
85173: LIST
85174: PUSH
85175: EMPTY
85176: LIST
85177: LIST
85178: PPUSH
85179: CALL_OW 69
85183: PUSH
85184: FOR_IN
85185: IFFALSE 85201
// begin SetClass ( i , 1 ) ;
85187: LD_VAR 0 1
85191: PPUSH
85192: LD_INT 1
85194: PPUSH
85195: CALL_OW 336
// end ;
85199: GO 85184
85201: POP
85202: POP
// end ;
85203: PPOPN 1
85205: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
85206: LD_EXP 107
85210: PUSH
85211: LD_EXP 111
85215: AND
85216: PUSH
85217: LD_OWVAR 65
85221: PUSH
85222: LD_INT 7
85224: LESS
85225: AND
85226: IFFALSE 85240
85228: GO 85230
85230: DISABLE
// begin enable ;
85231: ENABLE
// game_speed := 7 ;
85232: LD_ADDR_OWVAR 65
85236: PUSH
85237: LD_INT 7
85239: ST_TO_ADDR
// end ;
85240: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
85241: LD_EXP 107
85245: PUSH
85246: LD_EXP 114
85250: AND
85251: IFFALSE 85453
85253: GO 85255
85255: DISABLE
85256: LD_INT 0
85258: PPUSH
85259: PPUSH
85260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85261: LD_ADDR_VAR 0 3
85265: PUSH
85266: LD_INT 81
85268: PUSH
85269: LD_OWVAR 2
85273: PUSH
85274: EMPTY
85275: LIST
85276: LIST
85277: PUSH
85278: LD_INT 21
85280: PUSH
85281: LD_INT 1
85283: PUSH
85284: EMPTY
85285: LIST
85286: LIST
85287: PUSH
85288: EMPTY
85289: LIST
85290: LIST
85291: PPUSH
85292: CALL_OW 69
85296: ST_TO_ADDR
// if not tmp then
85297: LD_VAR 0 3
85301: NOT
85302: IFFALSE 85306
// exit ;
85304: GO 85453
// if tmp > 5 then
85306: LD_VAR 0 3
85310: PUSH
85311: LD_INT 5
85313: GREATER
85314: IFFALSE 85326
// k := 5 else
85316: LD_ADDR_VAR 0 2
85320: PUSH
85321: LD_INT 5
85323: ST_TO_ADDR
85324: GO 85336
// k := tmp ;
85326: LD_ADDR_VAR 0 2
85330: PUSH
85331: LD_VAR 0 3
85335: ST_TO_ADDR
// for i := 1 to k do
85336: LD_ADDR_VAR 0 1
85340: PUSH
85341: DOUBLE
85342: LD_INT 1
85344: DEC
85345: ST_TO_ADDR
85346: LD_VAR 0 2
85350: PUSH
85351: FOR_TO
85352: IFFALSE 85451
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
85354: LD_VAR 0 3
85358: PUSH
85359: LD_VAR 0 1
85363: ARRAY
85364: PPUSH
85365: LD_VAR 0 1
85369: PUSH
85370: LD_INT 4
85372: MOD
85373: PUSH
85374: LD_INT 1
85376: PLUS
85377: PPUSH
85378: CALL_OW 259
85382: PUSH
85383: LD_INT 10
85385: LESS
85386: IFFALSE 85449
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
85388: LD_VAR 0 3
85392: PUSH
85393: LD_VAR 0 1
85397: ARRAY
85398: PPUSH
85399: LD_VAR 0 1
85403: PUSH
85404: LD_INT 4
85406: MOD
85407: PUSH
85408: LD_INT 1
85410: PLUS
85411: PPUSH
85412: LD_VAR 0 3
85416: PUSH
85417: LD_VAR 0 1
85421: ARRAY
85422: PPUSH
85423: LD_VAR 0 1
85427: PUSH
85428: LD_INT 4
85430: MOD
85431: PUSH
85432: LD_INT 1
85434: PLUS
85435: PPUSH
85436: CALL_OW 259
85440: PUSH
85441: LD_INT 1
85443: PLUS
85444: PPUSH
85445: CALL_OW 237
85449: GO 85351
85451: POP
85452: POP
// end ;
85453: PPOPN 3
85455: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
85456: LD_EXP 107
85460: PUSH
85461: LD_EXP 115
85465: AND
85466: IFFALSE 85486
85468: GO 85470
85470: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
85471: LD_INT 4
85473: PPUSH
85474: LD_OWVAR 2
85478: PPUSH
85479: LD_INT 0
85481: PPUSH
85482: CALL_OW 324
85486: END
// every 0 0$1 trigger StreamModeActive and sShovel do
85487: LD_EXP 107
85491: PUSH
85492: LD_EXP 144
85496: AND
85497: IFFALSE 85517
85499: GO 85501
85501: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
85502: LD_INT 19
85504: PPUSH
85505: LD_OWVAR 2
85509: PPUSH
85510: LD_INT 0
85512: PPUSH
85513: CALL_OW 324
85517: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
85518: LD_EXP 107
85522: PUSH
85523: LD_EXP 116
85527: AND
85528: IFFALSE 85630
85530: GO 85532
85532: DISABLE
85533: LD_INT 0
85535: PPUSH
85536: PPUSH
// begin enable ;
85537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
85538: LD_ADDR_VAR 0 2
85542: PUSH
85543: LD_INT 22
85545: PUSH
85546: LD_OWVAR 2
85550: PUSH
85551: EMPTY
85552: LIST
85553: LIST
85554: PUSH
85555: LD_INT 2
85557: PUSH
85558: LD_INT 34
85560: PUSH
85561: LD_INT 11
85563: PUSH
85564: EMPTY
85565: LIST
85566: LIST
85567: PUSH
85568: LD_INT 34
85570: PUSH
85571: LD_INT 30
85573: PUSH
85574: EMPTY
85575: LIST
85576: LIST
85577: PUSH
85578: EMPTY
85579: LIST
85580: LIST
85581: LIST
85582: PUSH
85583: EMPTY
85584: LIST
85585: LIST
85586: PPUSH
85587: CALL_OW 69
85591: ST_TO_ADDR
// if not tmp then
85592: LD_VAR 0 2
85596: NOT
85597: IFFALSE 85601
// exit ;
85599: GO 85630
// for i in tmp do
85601: LD_ADDR_VAR 0 1
85605: PUSH
85606: LD_VAR 0 2
85610: PUSH
85611: FOR_IN
85612: IFFALSE 85628
// begin SetLives ( i , 0 ) ;
85614: LD_VAR 0 1
85618: PPUSH
85619: LD_INT 0
85621: PPUSH
85622: CALL_OW 234
// end ;
85626: GO 85611
85628: POP
85629: POP
// end ;
85630: PPOPN 2
85632: END
// every 0 0$1 trigger StreamModeActive and sBunker do
85633: LD_EXP 107
85637: PUSH
85638: LD_EXP 117
85642: AND
85643: IFFALSE 85663
85645: GO 85647
85647: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
85648: LD_INT 32
85650: PPUSH
85651: LD_OWVAR 2
85655: PPUSH
85656: LD_INT 0
85658: PPUSH
85659: CALL_OW 324
85663: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
85664: LD_EXP 107
85668: PUSH
85669: LD_EXP 118
85673: AND
85674: IFFALSE 85855
85676: GO 85678
85678: DISABLE
85679: LD_INT 0
85681: PPUSH
85682: PPUSH
85683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
85684: LD_ADDR_VAR 0 2
85688: PUSH
85689: LD_INT 22
85691: PUSH
85692: LD_OWVAR 2
85696: PUSH
85697: EMPTY
85698: LIST
85699: LIST
85700: PUSH
85701: LD_INT 33
85703: PUSH
85704: LD_INT 3
85706: PUSH
85707: EMPTY
85708: LIST
85709: LIST
85710: PUSH
85711: EMPTY
85712: LIST
85713: LIST
85714: PPUSH
85715: CALL_OW 69
85719: ST_TO_ADDR
// if not tmp then
85720: LD_VAR 0 2
85724: NOT
85725: IFFALSE 85729
// exit ;
85727: GO 85855
// side := 0 ;
85729: LD_ADDR_VAR 0 3
85733: PUSH
85734: LD_INT 0
85736: ST_TO_ADDR
// for i := 1 to 8 do
85737: LD_ADDR_VAR 0 1
85741: PUSH
85742: DOUBLE
85743: LD_INT 1
85745: DEC
85746: ST_TO_ADDR
85747: LD_INT 8
85749: PUSH
85750: FOR_TO
85751: IFFALSE 85799
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
85753: LD_OWVAR 2
85757: PUSH
85758: LD_VAR 0 1
85762: NONEQUAL
85763: PUSH
85764: LD_OWVAR 2
85768: PPUSH
85769: LD_VAR 0 1
85773: PPUSH
85774: CALL_OW 81
85778: PUSH
85779: LD_INT 2
85781: EQUAL
85782: AND
85783: IFFALSE 85797
// begin side := i ;
85785: LD_ADDR_VAR 0 3
85789: PUSH
85790: LD_VAR 0 1
85794: ST_TO_ADDR
// break ;
85795: GO 85799
// end ;
85797: GO 85750
85799: POP
85800: POP
// if not side then
85801: LD_VAR 0 3
85805: NOT
85806: IFFALSE 85810
// exit ;
85808: GO 85855
// for i := 1 to tmp do
85810: LD_ADDR_VAR 0 1
85814: PUSH
85815: DOUBLE
85816: LD_INT 1
85818: DEC
85819: ST_TO_ADDR
85820: LD_VAR 0 2
85824: PUSH
85825: FOR_TO
85826: IFFALSE 85853
// if Prob ( 60 ) then
85828: LD_INT 60
85830: PPUSH
85831: CALL_OW 13
85835: IFFALSE 85851
// SetSide ( i , side ) ;
85837: LD_VAR 0 1
85841: PPUSH
85842: LD_VAR 0 3
85846: PPUSH
85847: CALL_OW 235
85851: GO 85825
85853: POP
85854: POP
// end ;
85855: PPOPN 3
85857: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
85858: LD_EXP 107
85862: PUSH
85863: LD_EXP 120
85867: AND
85868: IFFALSE 85987
85870: GO 85872
85872: DISABLE
85873: LD_INT 0
85875: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
85876: LD_ADDR_VAR 0 1
85880: PUSH
85881: LD_INT 22
85883: PUSH
85884: LD_OWVAR 2
85888: PUSH
85889: EMPTY
85890: LIST
85891: LIST
85892: PUSH
85893: LD_INT 21
85895: PUSH
85896: LD_INT 1
85898: PUSH
85899: EMPTY
85900: LIST
85901: LIST
85902: PUSH
85903: LD_INT 3
85905: PUSH
85906: LD_INT 23
85908: PUSH
85909: LD_INT 0
85911: PUSH
85912: EMPTY
85913: LIST
85914: LIST
85915: PUSH
85916: EMPTY
85917: LIST
85918: LIST
85919: PUSH
85920: EMPTY
85921: LIST
85922: LIST
85923: LIST
85924: PPUSH
85925: CALL_OW 69
85929: PUSH
85930: FOR_IN
85931: IFFALSE 85985
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
85933: LD_VAR 0 1
85937: PPUSH
85938: CALL_OW 257
85942: PUSH
85943: LD_INT 1
85945: PUSH
85946: LD_INT 2
85948: PUSH
85949: LD_INT 3
85951: PUSH
85952: LD_INT 4
85954: PUSH
85955: EMPTY
85956: LIST
85957: LIST
85958: LIST
85959: LIST
85960: IN
85961: IFFALSE 85983
// SetClass ( un , rand ( 1 , 4 ) ) ;
85963: LD_VAR 0 1
85967: PPUSH
85968: LD_INT 1
85970: PPUSH
85971: LD_INT 4
85973: PPUSH
85974: CALL_OW 12
85978: PPUSH
85979: CALL_OW 336
85983: GO 85930
85985: POP
85986: POP
// end ;
85987: PPOPN 1
85989: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
85990: LD_EXP 107
85994: PUSH
85995: LD_EXP 119
85999: AND
86000: IFFALSE 86079
86002: GO 86004
86004: DISABLE
86005: LD_INT 0
86007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86008: LD_ADDR_VAR 0 1
86012: PUSH
86013: LD_INT 22
86015: PUSH
86016: LD_OWVAR 2
86020: PUSH
86021: EMPTY
86022: LIST
86023: LIST
86024: PUSH
86025: LD_INT 21
86027: PUSH
86028: LD_INT 3
86030: PUSH
86031: EMPTY
86032: LIST
86033: LIST
86034: PUSH
86035: EMPTY
86036: LIST
86037: LIST
86038: PPUSH
86039: CALL_OW 69
86043: ST_TO_ADDR
// if not tmp then
86044: LD_VAR 0 1
86048: NOT
86049: IFFALSE 86053
// exit ;
86051: GO 86079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
86053: LD_VAR 0 1
86057: PUSH
86058: LD_INT 1
86060: PPUSH
86061: LD_VAR 0 1
86065: PPUSH
86066: CALL_OW 12
86070: ARRAY
86071: PPUSH
86072: LD_INT 100
86074: PPUSH
86075: CALL_OW 234
// end ;
86079: PPOPN 1
86081: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
86082: LD_EXP 107
86086: PUSH
86087: LD_EXP 121
86091: AND
86092: IFFALSE 86190
86094: GO 86096
86096: DISABLE
86097: LD_INT 0
86099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
86100: LD_ADDR_VAR 0 1
86104: PUSH
86105: LD_INT 22
86107: PUSH
86108: LD_OWVAR 2
86112: PUSH
86113: EMPTY
86114: LIST
86115: LIST
86116: PUSH
86117: LD_INT 21
86119: PUSH
86120: LD_INT 1
86122: PUSH
86123: EMPTY
86124: LIST
86125: LIST
86126: PUSH
86127: EMPTY
86128: LIST
86129: LIST
86130: PPUSH
86131: CALL_OW 69
86135: ST_TO_ADDR
// if not tmp then
86136: LD_VAR 0 1
86140: NOT
86141: IFFALSE 86145
// exit ;
86143: GO 86190
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
86145: LD_VAR 0 1
86149: PUSH
86150: LD_INT 1
86152: PPUSH
86153: LD_VAR 0 1
86157: PPUSH
86158: CALL_OW 12
86162: ARRAY
86163: PPUSH
86164: LD_INT 1
86166: PPUSH
86167: LD_INT 4
86169: PPUSH
86170: CALL_OW 12
86174: PPUSH
86175: LD_INT 3000
86177: PPUSH
86178: LD_INT 9000
86180: PPUSH
86181: CALL_OW 12
86185: PPUSH
86186: CALL_OW 492
// end ;
86190: PPOPN 1
86192: END
// every 0 0$1 trigger StreamModeActive and sDepot do
86193: LD_EXP 107
86197: PUSH
86198: LD_EXP 122
86202: AND
86203: IFFALSE 86223
86205: GO 86207
86207: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
86208: LD_INT 1
86210: PPUSH
86211: LD_OWVAR 2
86215: PPUSH
86216: LD_INT 0
86218: PPUSH
86219: CALL_OW 324
86223: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
86224: LD_EXP 107
86228: PUSH
86229: LD_EXP 123
86233: AND
86234: IFFALSE 86317
86236: GO 86238
86238: DISABLE
86239: LD_INT 0
86241: PPUSH
86242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86243: LD_ADDR_VAR 0 2
86247: PUSH
86248: LD_INT 22
86250: PUSH
86251: LD_OWVAR 2
86255: PUSH
86256: EMPTY
86257: LIST
86258: LIST
86259: PUSH
86260: LD_INT 21
86262: PUSH
86263: LD_INT 3
86265: PUSH
86266: EMPTY
86267: LIST
86268: LIST
86269: PUSH
86270: EMPTY
86271: LIST
86272: LIST
86273: PPUSH
86274: CALL_OW 69
86278: ST_TO_ADDR
// if not tmp then
86279: LD_VAR 0 2
86283: NOT
86284: IFFALSE 86288
// exit ;
86286: GO 86317
// for i in tmp do
86288: LD_ADDR_VAR 0 1
86292: PUSH
86293: LD_VAR 0 2
86297: PUSH
86298: FOR_IN
86299: IFFALSE 86315
// SetBLevel ( i , 10 ) ;
86301: LD_VAR 0 1
86305: PPUSH
86306: LD_INT 10
86308: PPUSH
86309: CALL_OW 241
86313: GO 86298
86315: POP
86316: POP
// end ;
86317: PPOPN 2
86319: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
86320: LD_EXP 107
86324: PUSH
86325: LD_EXP 124
86329: AND
86330: IFFALSE 86441
86332: GO 86334
86334: DISABLE
86335: LD_INT 0
86337: PPUSH
86338: PPUSH
86339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86340: LD_ADDR_VAR 0 3
86344: PUSH
86345: LD_INT 22
86347: PUSH
86348: LD_OWVAR 2
86352: PUSH
86353: EMPTY
86354: LIST
86355: LIST
86356: PUSH
86357: LD_INT 25
86359: PUSH
86360: LD_INT 1
86362: PUSH
86363: EMPTY
86364: LIST
86365: LIST
86366: PUSH
86367: EMPTY
86368: LIST
86369: LIST
86370: PPUSH
86371: CALL_OW 69
86375: ST_TO_ADDR
// if not tmp then
86376: LD_VAR 0 3
86380: NOT
86381: IFFALSE 86385
// exit ;
86383: GO 86441
// un := tmp [ rand ( 1 , tmp ) ] ;
86385: LD_ADDR_VAR 0 2
86389: PUSH
86390: LD_VAR 0 3
86394: PUSH
86395: LD_INT 1
86397: PPUSH
86398: LD_VAR 0 3
86402: PPUSH
86403: CALL_OW 12
86407: ARRAY
86408: ST_TO_ADDR
// if Crawls ( un ) then
86409: LD_VAR 0 2
86413: PPUSH
86414: CALL_OW 318
86418: IFFALSE 86429
// ComWalk ( un ) ;
86420: LD_VAR 0 2
86424: PPUSH
86425: CALL_OW 138
// SetClass ( un , class_sniper ) ;
86429: LD_VAR 0 2
86433: PPUSH
86434: LD_INT 5
86436: PPUSH
86437: CALL_OW 336
// end ;
86441: PPOPN 3
86443: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
86444: LD_EXP 107
86448: PUSH
86449: LD_EXP 125
86453: AND
86454: PUSH
86455: LD_OWVAR 67
86459: PUSH
86460: LD_INT 3
86462: LESS
86463: AND
86464: IFFALSE 86483
86466: GO 86468
86468: DISABLE
// Difficulty := Difficulty + 1 ;
86469: LD_ADDR_OWVAR 67
86473: PUSH
86474: LD_OWVAR 67
86478: PUSH
86479: LD_INT 1
86481: PLUS
86482: ST_TO_ADDR
86483: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
86484: LD_EXP 107
86488: PUSH
86489: LD_EXP 126
86493: AND
86494: IFFALSE 86597
86496: GO 86498
86498: DISABLE
86499: LD_INT 0
86501: PPUSH
// begin for i := 1 to 5 do
86502: LD_ADDR_VAR 0 1
86506: PUSH
86507: DOUBLE
86508: LD_INT 1
86510: DEC
86511: ST_TO_ADDR
86512: LD_INT 5
86514: PUSH
86515: FOR_TO
86516: IFFALSE 86595
// begin uc_nation := nation_nature ;
86518: LD_ADDR_OWVAR 21
86522: PUSH
86523: LD_INT 0
86525: ST_TO_ADDR
// uc_side := 0 ;
86526: LD_ADDR_OWVAR 20
86530: PUSH
86531: LD_INT 0
86533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86534: LD_ADDR_OWVAR 29
86538: PUSH
86539: LD_INT 12
86541: PUSH
86542: LD_INT 12
86544: PUSH
86545: EMPTY
86546: LIST
86547: LIST
86548: ST_TO_ADDR
// hc_agressivity := 20 ;
86549: LD_ADDR_OWVAR 35
86553: PUSH
86554: LD_INT 20
86556: ST_TO_ADDR
// hc_class := class_tiger ;
86557: LD_ADDR_OWVAR 28
86561: PUSH
86562: LD_INT 14
86564: ST_TO_ADDR
// hc_gallery :=  ;
86565: LD_ADDR_OWVAR 33
86569: PUSH
86570: LD_STRING 
86572: ST_TO_ADDR
// hc_name :=  ;
86573: LD_ADDR_OWVAR 26
86577: PUSH
86578: LD_STRING 
86580: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
86581: CALL_OW 44
86585: PPUSH
86586: LD_INT 0
86588: PPUSH
86589: CALL_OW 51
// end ;
86593: GO 86515
86595: POP
86596: POP
// end ;
86597: PPOPN 1
86599: END
// every 0 0$1 trigger StreamModeActive and sBomb do
86600: LD_EXP 107
86604: PUSH
86605: LD_EXP 127
86609: AND
86610: IFFALSE 86619
86612: GO 86614
86614: DISABLE
// StreamSibBomb ;
86615: CALL 86620 0 0
86619: END
// export function StreamSibBomb ; var i , x , y ; begin
86620: LD_INT 0
86622: PPUSH
86623: PPUSH
86624: PPUSH
86625: PPUSH
// result := false ;
86626: LD_ADDR_VAR 0 1
86630: PUSH
86631: LD_INT 0
86633: ST_TO_ADDR
// for i := 1 to 16 do
86634: LD_ADDR_VAR 0 2
86638: PUSH
86639: DOUBLE
86640: LD_INT 1
86642: DEC
86643: ST_TO_ADDR
86644: LD_INT 16
86646: PUSH
86647: FOR_TO
86648: IFFALSE 86847
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86650: LD_ADDR_VAR 0 3
86654: PUSH
86655: LD_INT 10
86657: PUSH
86658: LD_INT 20
86660: PUSH
86661: LD_INT 30
86663: PUSH
86664: LD_INT 40
86666: PUSH
86667: LD_INT 50
86669: PUSH
86670: LD_INT 60
86672: PUSH
86673: LD_INT 70
86675: PUSH
86676: LD_INT 80
86678: PUSH
86679: LD_INT 90
86681: PUSH
86682: LD_INT 100
86684: PUSH
86685: LD_INT 110
86687: PUSH
86688: LD_INT 120
86690: PUSH
86691: LD_INT 130
86693: PUSH
86694: LD_INT 140
86696: PUSH
86697: LD_INT 150
86699: PUSH
86700: EMPTY
86701: LIST
86702: LIST
86703: LIST
86704: LIST
86705: LIST
86706: LIST
86707: LIST
86708: LIST
86709: LIST
86710: LIST
86711: LIST
86712: LIST
86713: LIST
86714: LIST
86715: LIST
86716: PUSH
86717: LD_INT 1
86719: PPUSH
86720: LD_INT 15
86722: PPUSH
86723: CALL_OW 12
86727: ARRAY
86728: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86729: LD_ADDR_VAR 0 4
86733: PUSH
86734: LD_INT 10
86736: PUSH
86737: LD_INT 20
86739: PUSH
86740: LD_INT 30
86742: PUSH
86743: LD_INT 40
86745: PUSH
86746: LD_INT 50
86748: PUSH
86749: LD_INT 60
86751: PUSH
86752: LD_INT 70
86754: PUSH
86755: LD_INT 80
86757: PUSH
86758: LD_INT 90
86760: PUSH
86761: LD_INT 100
86763: PUSH
86764: LD_INT 110
86766: PUSH
86767: LD_INT 120
86769: PUSH
86770: LD_INT 130
86772: PUSH
86773: LD_INT 140
86775: PUSH
86776: LD_INT 150
86778: PUSH
86779: EMPTY
86780: LIST
86781: LIST
86782: LIST
86783: LIST
86784: LIST
86785: LIST
86786: LIST
86787: LIST
86788: LIST
86789: LIST
86790: LIST
86791: LIST
86792: LIST
86793: LIST
86794: LIST
86795: PUSH
86796: LD_INT 1
86798: PPUSH
86799: LD_INT 15
86801: PPUSH
86802: CALL_OW 12
86806: ARRAY
86807: ST_TO_ADDR
// if ValidHex ( x , y ) then
86808: LD_VAR 0 3
86812: PPUSH
86813: LD_VAR 0 4
86817: PPUSH
86818: CALL_OW 488
86822: IFFALSE 86845
// begin result := [ x , y ] ;
86824: LD_ADDR_VAR 0 1
86828: PUSH
86829: LD_VAR 0 3
86833: PUSH
86834: LD_VAR 0 4
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: ST_TO_ADDR
// break ;
86843: GO 86847
// end ; end ;
86845: GO 86647
86847: POP
86848: POP
// if result then
86849: LD_VAR 0 1
86853: IFFALSE 86913
// begin ToLua ( playSibBomb() ) ;
86855: LD_STRING playSibBomb()
86857: PPUSH
86858: CALL_OW 559
// wait ( 0 0$14 ) ;
86862: LD_INT 490
86864: PPUSH
86865: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
86869: LD_VAR 0 1
86873: PUSH
86874: LD_INT 1
86876: ARRAY
86877: PPUSH
86878: LD_VAR 0 1
86882: PUSH
86883: LD_INT 2
86885: ARRAY
86886: PPUSH
86887: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
86891: LD_VAR 0 1
86895: PUSH
86896: LD_INT 1
86898: ARRAY
86899: PPUSH
86900: LD_VAR 0 1
86904: PUSH
86905: LD_INT 2
86907: ARRAY
86908: PPUSH
86909: CALL_OW 429
// end ; end ;
86913: LD_VAR 0 1
86917: RET
// every 0 0$1 trigger StreamModeActive and sReset do
86918: LD_EXP 107
86922: PUSH
86923: LD_EXP 129
86927: AND
86928: IFFALSE 86940
86930: GO 86932
86932: DISABLE
// YouLost (  ) ;
86933: LD_STRING 
86935: PPUSH
86936: CALL_OW 104
86940: END
// every 0 0$1 trigger StreamModeActive and sFog do
86941: LD_EXP 107
86945: PUSH
86946: LD_EXP 128
86950: AND
86951: IFFALSE 86965
86953: GO 86955
86955: DISABLE
// FogOff ( your_side ) ;
86956: LD_OWVAR 2
86960: PPUSH
86961: CALL_OW 344
86965: END
// every 0 0$1 trigger StreamModeActive and sSun do
86966: LD_EXP 107
86970: PUSH
86971: LD_EXP 130
86975: AND
86976: IFFALSE 87004
86978: GO 86980
86980: DISABLE
// begin solar_recharge_percent := 0 ;
86981: LD_ADDR_OWVAR 79
86985: PUSH
86986: LD_INT 0
86988: ST_TO_ADDR
// wait ( 5 5$00 ) ;
86989: LD_INT 10500
86991: PPUSH
86992: CALL_OW 67
// solar_recharge_percent := 100 ;
86996: LD_ADDR_OWVAR 79
87000: PUSH
87001: LD_INT 100
87003: ST_TO_ADDR
// end ;
87004: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
87005: LD_EXP 107
87009: PUSH
87010: LD_EXP 131
87014: AND
87015: IFFALSE 87254
87017: GO 87019
87019: DISABLE
87020: LD_INT 0
87022: PPUSH
87023: PPUSH
87024: PPUSH
// begin tmp := [ ] ;
87025: LD_ADDR_VAR 0 3
87029: PUSH
87030: EMPTY
87031: ST_TO_ADDR
// for i := 1 to 6 do
87032: LD_ADDR_VAR 0 1
87036: PUSH
87037: DOUBLE
87038: LD_INT 1
87040: DEC
87041: ST_TO_ADDR
87042: LD_INT 6
87044: PUSH
87045: FOR_TO
87046: IFFALSE 87151
// begin uc_nation := nation_nature ;
87048: LD_ADDR_OWVAR 21
87052: PUSH
87053: LD_INT 0
87055: ST_TO_ADDR
// uc_side := 0 ;
87056: LD_ADDR_OWVAR 20
87060: PUSH
87061: LD_INT 0
87063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
87064: LD_ADDR_OWVAR 29
87068: PUSH
87069: LD_INT 12
87071: PUSH
87072: LD_INT 12
87074: PUSH
87075: EMPTY
87076: LIST
87077: LIST
87078: ST_TO_ADDR
// hc_agressivity := 20 ;
87079: LD_ADDR_OWVAR 35
87083: PUSH
87084: LD_INT 20
87086: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
87087: LD_ADDR_OWVAR 28
87091: PUSH
87092: LD_INT 17
87094: ST_TO_ADDR
// hc_gallery :=  ;
87095: LD_ADDR_OWVAR 33
87099: PUSH
87100: LD_STRING 
87102: ST_TO_ADDR
// hc_name :=  ;
87103: LD_ADDR_OWVAR 26
87107: PUSH
87108: LD_STRING 
87110: ST_TO_ADDR
// un := CreateHuman ;
87111: LD_ADDR_VAR 0 2
87115: PUSH
87116: CALL_OW 44
87120: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
87121: LD_VAR 0 2
87125: PPUSH
87126: LD_INT 1
87128: PPUSH
87129: CALL_OW 51
// tmp := tmp ^ un ;
87133: LD_ADDR_VAR 0 3
87137: PUSH
87138: LD_VAR 0 3
87142: PUSH
87143: LD_VAR 0 2
87147: ADD
87148: ST_TO_ADDR
// end ;
87149: GO 87045
87151: POP
87152: POP
// repeat wait ( 0 0$1 ) ;
87153: LD_INT 35
87155: PPUSH
87156: CALL_OW 67
// for un in tmp do
87160: LD_ADDR_VAR 0 2
87164: PUSH
87165: LD_VAR 0 3
87169: PUSH
87170: FOR_IN
87171: IFFALSE 87245
// begin if IsDead ( un ) then
87173: LD_VAR 0 2
87177: PPUSH
87178: CALL_OW 301
87182: IFFALSE 87202
// begin tmp := tmp diff un ;
87184: LD_ADDR_VAR 0 3
87188: PUSH
87189: LD_VAR 0 3
87193: PUSH
87194: LD_VAR 0 2
87198: DIFF
87199: ST_TO_ADDR
// continue ;
87200: GO 87170
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
87202: LD_VAR 0 2
87206: PPUSH
87207: LD_INT 3
87209: PUSH
87210: LD_INT 22
87212: PUSH
87213: LD_INT 0
87215: PUSH
87216: EMPTY
87217: LIST
87218: LIST
87219: PUSH
87220: EMPTY
87221: LIST
87222: LIST
87223: PPUSH
87224: CALL_OW 69
87228: PPUSH
87229: LD_VAR 0 2
87233: PPUSH
87234: CALL_OW 74
87238: PPUSH
87239: CALL_OW 115
// end ;
87243: GO 87170
87245: POP
87246: POP
// until not tmp ;
87247: LD_VAR 0 3
87251: NOT
87252: IFFALSE 87153
// end ;
87254: PPOPN 3
87256: END
// every 0 0$1 trigger StreamModeActive and sTroll do
87257: LD_EXP 107
87261: PUSH
87262: LD_EXP 132
87266: AND
87267: IFFALSE 87321
87269: GO 87271
87271: DISABLE
// begin ToLua ( displayTroll(); ) ;
87272: LD_STRING displayTroll();
87274: PPUSH
87275: CALL_OW 559
// wait ( 3 3$00 ) ;
87279: LD_INT 6300
87281: PPUSH
87282: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87286: LD_STRING hideTroll();
87288: PPUSH
87289: CALL_OW 559
// wait ( 1 1$00 ) ;
87293: LD_INT 2100
87295: PPUSH
87296: CALL_OW 67
// ToLua ( displayTroll(); ) ;
87300: LD_STRING displayTroll();
87302: PPUSH
87303: CALL_OW 559
// wait ( 1 1$00 ) ;
87307: LD_INT 2100
87309: PPUSH
87310: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87314: LD_STRING hideTroll();
87316: PPUSH
87317: CALL_OW 559
// end ;
87321: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
87322: LD_EXP 107
87326: PUSH
87327: LD_EXP 133
87331: AND
87332: IFFALSE 87395
87334: GO 87336
87336: DISABLE
87337: LD_INT 0
87339: PPUSH
// begin p := 0 ;
87340: LD_ADDR_VAR 0 1
87344: PUSH
87345: LD_INT 0
87347: ST_TO_ADDR
// repeat game_speed := 1 ;
87348: LD_ADDR_OWVAR 65
87352: PUSH
87353: LD_INT 1
87355: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87356: LD_INT 35
87358: PPUSH
87359: CALL_OW 67
// p := p + 1 ;
87363: LD_ADDR_VAR 0 1
87367: PUSH
87368: LD_VAR 0 1
87372: PUSH
87373: LD_INT 1
87375: PLUS
87376: ST_TO_ADDR
// until p >= 60 ;
87377: LD_VAR 0 1
87381: PUSH
87382: LD_INT 60
87384: GREATEREQUAL
87385: IFFALSE 87348
// game_speed := 4 ;
87387: LD_ADDR_OWVAR 65
87391: PUSH
87392: LD_INT 4
87394: ST_TO_ADDR
// end ;
87395: PPOPN 1
87397: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
87398: LD_EXP 107
87402: PUSH
87403: LD_EXP 134
87407: AND
87408: IFFALSE 87554
87410: GO 87412
87412: DISABLE
87413: LD_INT 0
87415: PPUSH
87416: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87417: LD_ADDR_VAR 0 1
87421: PUSH
87422: LD_INT 22
87424: PUSH
87425: LD_OWVAR 2
87429: PUSH
87430: EMPTY
87431: LIST
87432: LIST
87433: PUSH
87434: LD_INT 2
87436: PUSH
87437: LD_INT 30
87439: PUSH
87440: LD_INT 0
87442: PUSH
87443: EMPTY
87444: LIST
87445: LIST
87446: PUSH
87447: LD_INT 30
87449: PUSH
87450: LD_INT 1
87452: PUSH
87453: EMPTY
87454: LIST
87455: LIST
87456: PUSH
87457: EMPTY
87458: LIST
87459: LIST
87460: LIST
87461: PUSH
87462: EMPTY
87463: LIST
87464: LIST
87465: PPUSH
87466: CALL_OW 69
87470: ST_TO_ADDR
// if not depot then
87471: LD_VAR 0 1
87475: NOT
87476: IFFALSE 87480
// exit ;
87478: GO 87554
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
87480: LD_ADDR_VAR 0 2
87484: PUSH
87485: LD_VAR 0 1
87489: PUSH
87490: LD_INT 1
87492: PPUSH
87493: LD_VAR 0 1
87497: PPUSH
87498: CALL_OW 12
87502: ARRAY
87503: PPUSH
87504: CALL_OW 274
87508: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
87509: LD_VAR 0 2
87513: PPUSH
87514: LD_INT 1
87516: PPUSH
87517: LD_INT 0
87519: PPUSH
87520: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
87524: LD_VAR 0 2
87528: PPUSH
87529: LD_INT 2
87531: PPUSH
87532: LD_INT 0
87534: PPUSH
87535: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
87539: LD_VAR 0 2
87543: PPUSH
87544: LD_INT 3
87546: PPUSH
87547: LD_INT 0
87549: PPUSH
87550: CALL_OW 277
// end ;
87554: PPOPN 2
87556: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
87557: LD_EXP 107
87561: PUSH
87562: LD_EXP 135
87566: AND
87567: IFFALSE 87664
87569: GO 87571
87571: DISABLE
87572: LD_INT 0
87574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87575: LD_ADDR_VAR 0 1
87579: PUSH
87580: LD_INT 22
87582: PUSH
87583: LD_OWVAR 2
87587: PUSH
87588: EMPTY
87589: LIST
87590: LIST
87591: PUSH
87592: LD_INT 21
87594: PUSH
87595: LD_INT 1
87597: PUSH
87598: EMPTY
87599: LIST
87600: LIST
87601: PUSH
87602: LD_INT 3
87604: PUSH
87605: LD_INT 23
87607: PUSH
87608: LD_INT 0
87610: PUSH
87611: EMPTY
87612: LIST
87613: LIST
87614: PUSH
87615: EMPTY
87616: LIST
87617: LIST
87618: PUSH
87619: EMPTY
87620: LIST
87621: LIST
87622: LIST
87623: PPUSH
87624: CALL_OW 69
87628: ST_TO_ADDR
// if not tmp then
87629: LD_VAR 0 1
87633: NOT
87634: IFFALSE 87638
// exit ;
87636: GO 87664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
87638: LD_VAR 0 1
87642: PUSH
87643: LD_INT 1
87645: PPUSH
87646: LD_VAR 0 1
87650: PPUSH
87651: CALL_OW 12
87655: ARRAY
87656: PPUSH
87657: LD_INT 200
87659: PPUSH
87660: CALL_OW 234
// end ;
87664: PPOPN 1
87666: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
87667: LD_EXP 107
87671: PUSH
87672: LD_EXP 136
87676: AND
87677: IFFALSE 87756
87679: GO 87681
87681: DISABLE
87682: LD_INT 0
87684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
87685: LD_ADDR_VAR 0 1
87689: PUSH
87690: LD_INT 22
87692: PUSH
87693: LD_OWVAR 2
87697: PUSH
87698: EMPTY
87699: LIST
87700: LIST
87701: PUSH
87702: LD_INT 21
87704: PUSH
87705: LD_INT 2
87707: PUSH
87708: EMPTY
87709: LIST
87710: LIST
87711: PUSH
87712: EMPTY
87713: LIST
87714: LIST
87715: PPUSH
87716: CALL_OW 69
87720: ST_TO_ADDR
// if not tmp then
87721: LD_VAR 0 1
87725: NOT
87726: IFFALSE 87730
// exit ;
87728: GO 87756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
87730: LD_VAR 0 1
87734: PUSH
87735: LD_INT 1
87737: PPUSH
87738: LD_VAR 0 1
87742: PPUSH
87743: CALL_OW 12
87747: ARRAY
87748: PPUSH
87749: LD_INT 60
87751: PPUSH
87752: CALL_OW 234
// end ;
87756: PPOPN 1
87758: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
87759: LD_EXP 107
87763: PUSH
87764: LD_EXP 137
87768: AND
87769: IFFALSE 87868
87771: GO 87773
87773: DISABLE
87774: LD_INT 0
87776: PPUSH
87777: PPUSH
// begin enable ;
87778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
87779: LD_ADDR_VAR 0 1
87783: PUSH
87784: LD_INT 22
87786: PUSH
87787: LD_OWVAR 2
87791: PUSH
87792: EMPTY
87793: LIST
87794: LIST
87795: PUSH
87796: LD_INT 61
87798: PUSH
87799: EMPTY
87800: LIST
87801: PUSH
87802: LD_INT 33
87804: PUSH
87805: LD_INT 2
87807: PUSH
87808: EMPTY
87809: LIST
87810: LIST
87811: PUSH
87812: EMPTY
87813: LIST
87814: LIST
87815: LIST
87816: PPUSH
87817: CALL_OW 69
87821: ST_TO_ADDR
// if not tmp then
87822: LD_VAR 0 1
87826: NOT
87827: IFFALSE 87831
// exit ;
87829: GO 87868
// for i in tmp do
87831: LD_ADDR_VAR 0 2
87835: PUSH
87836: LD_VAR 0 1
87840: PUSH
87841: FOR_IN
87842: IFFALSE 87866
// if IsControledBy ( i ) then
87844: LD_VAR 0 2
87848: PPUSH
87849: CALL_OW 312
87853: IFFALSE 87864
// ComUnlink ( i ) ;
87855: LD_VAR 0 2
87859: PPUSH
87860: CALL_OW 136
87864: GO 87841
87866: POP
87867: POP
// end ;
87868: PPOPN 2
87870: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
87871: LD_EXP 107
87875: PUSH
87876: LD_EXP 138
87880: AND
87881: IFFALSE 88021
87883: GO 87885
87885: DISABLE
87886: LD_INT 0
87888: PPUSH
87889: PPUSH
// begin ToLua ( displayPowell(); ) ;
87890: LD_STRING displayPowell();
87892: PPUSH
87893: CALL_OW 559
// uc_side := 0 ;
87897: LD_ADDR_OWVAR 20
87901: PUSH
87902: LD_INT 0
87904: ST_TO_ADDR
// uc_nation := 2 ;
87905: LD_ADDR_OWVAR 21
87909: PUSH
87910: LD_INT 2
87912: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
87913: LD_ADDR_OWVAR 37
87917: PUSH
87918: LD_INT 14
87920: ST_TO_ADDR
// vc_engine := engine_siberite ;
87921: LD_ADDR_OWVAR 39
87925: PUSH
87926: LD_INT 3
87928: ST_TO_ADDR
// vc_control := control_apeman ;
87929: LD_ADDR_OWVAR 38
87933: PUSH
87934: LD_INT 5
87936: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
87937: LD_ADDR_OWVAR 40
87941: PUSH
87942: LD_INT 29
87944: ST_TO_ADDR
// un := CreateVehicle ;
87945: LD_ADDR_VAR 0 2
87949: PUSH
87950: CALL_OW 45
87954: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
87955: LD_VAR 0 2
87959: PPUSH
87960: LD_INT 1
87962: PPUSH
87963: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
87967: LD_INT 35
87969: PPUSH
87970: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
87974: LD_VAR 0 2
87978: PPUSH
87979: LD_INT 22
87981: PUSH
87982: LD_OWVAR 2
87986: PUSH
87987: EMPTY
87988: LIST
87989: LIST
87990: PPUSH
87991: CALL_OW 69
87995: PPUSH
87996: LD_VAR 0 2
88000: PPUSH
88001: CALL_OW 74
88005: PPUSH
88006: CALL_OW 115
// until IsDead ( un ) ;
88010: LD_VAR 0 2
88014: PPUSH
88015: CALL_OW 301
88019: IFFALSE 87967
// end ;
88021: PPOPN 2
88023: END
// every 0 0$1 trigger StreamModeActive and sStu do
88024: LD_EXP 107
88028: PUSH
88029: LD_EXP 146
88033: AND
88034: IFFALSE 88050
88036: GO 88038
88038: DISABLE
// begin ToLua ( displayStucuk(); ) ;
88039: LD_STRING displayStucuk();
88041: PPUSH
88042: CALL_OW 559
// ResetFog ;
88046: CALL_OW 335
// end ;
88050: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
88051: LD_EXP 107
88055: PUSH
88056: LD_EXP 139
88060: AND
88061: IFFALSE 88202
88063: GO 88065
88065: DISABLE
88066: LD_INT 0
88068: PPUSH
88069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88070: LD_ADDR_VAR 0 2
88074: PUSH
88075: LD_INT 22
88077: PUSH
88078: LD_OWVAR 2
88082: PUSH
88083: EMPTY
88084: LIST
88085: LIST
88086: PUSH
88087: LD_INT 21
88089: PUSH
88090: LD_INT 1
88092: PUSH
88093: EMPTY
88094: LIST
88095: LIST
88096: PUSH
88097: EMPTY
88098: LIST
88099: LIST
88100: PPUSH
88101: CALL_OW 69
88105: ST_TO_ADDR
// if not tmp then
88106: LD_VAR 0 2
88110: NOT
88111: IFFALSE 88115
// exit ;
88113: GO 88202
// un := tmp [ rand ( 1 , tmp ) ] ;
88115: LD_ADDR_VAR 0 1
88119: PUSH
88120: LD_VAR 0 2
88124: PUSH
88125: LD_INT 1
88127: PPUSH
88128: LD_VAR 0 2
88132: PPUSH
88133: CALL_OW 12
88137: ARRAY
88138: ST_TO_ADDR
// SetSide ( un , 0 ) ;
88139: LD_VAR 0 1
88143: PPUSH
88144: LD_INT 0
88146: PPUSH
88147: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
88151: LD_VAR 0 1
88155: PPUSH
88156: LD_OWVAR 3
88160: PUSH
88161: LD_VAR 0 1
88165: DIFF
88166: PPUSH
88167: LD_VAR 0 1
88171: PPUSH
88172: CALL_OW 74
88176: PPUSH
88177: CALL_OW 115
// wait ( 0 0$20 ) ;
88181: LD_INT 700
88183: PPUSH
88184: CALL_OW 67
// SetSide ( un , your_side ) ;
88188: LD_VAR 0 1
88192: PPUSH
88193: LD_OWVAR 2
88197: PPUSH
88198: CALL_OW 235
// end ;
88202: PPOPN 2
88204: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
88205: LD_EXP 107
88209: PUSH
88210: LD_EXP 140
88214: AND
88215: IFFALSE 88321
88217: GO 88219
88219: DISABLE
88220: LD_INT 0
88222: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
88223: LD_ADDR_VAR 0 1
88227: PUSH
88228: LD_INT 22
88230: PUSH
88231: LD_OWVAR 2
88235: PUSH
88236: EMPTY
88237: LIST
88238: LIST
88239: PUSH
88240: LD_INT 2
88242: PUSH
88243: LD_INT 30
88245: PUSH
88246: LD_INT 0
88248: PUSH
88249: EMPTY
88250: LIST
88251: LIST
88252: PUSH
88253: LD_INT 30
88255: PUSH
88256: LD_INT 1
88258: PUSH
88259: EMPTY
88260: LIST
88261: LIST
88262: PUSH
88263: EMPTY
88264: LIST
88265: LIST
88266: LIST
88267: PUSH
88268: EMPTY
88269: LIST
88270: LIST
88271: PPUSH
88272: CALL_OW 69
88276: ST_TO_ADDR
// if not depot then
88277: LD_VAR 0 1
88281: NOT
88282: IFFALSE 88286
// exit ;
88284: GO 88321
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
88286: LD_VAR 0 1
88290: PUSH
88291: LD_INT 1
88293: ARRAY
88294: PPUSH
88295: CALL_OW 250
88299: PPUSH
88300: LD_VAR 0 1
88304: PUSH
88305: LD_INT 1
88307: ARRAY
88308: PPUSH
88309: CALL_OW 251
88313: PPUSH
88314: LD_INT 70
88316: PPUSH
88317: CALL_OW 495
// end ;
88321: PPOPN 1
88323: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
88324: LD_EXP 107
88328: PUSH
88329: LD_EXP 141
88333: AND
88334: IFFALSE 88545
88336: GO 88338
88338: DISABLE
88339: LD_INT 0
88341: PPUSH
88342: PPUSH
88343: PPUSH
88344: PPUSH
88345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88346: LD_ADDR_VAR 0 5
88350: PUSH
88351: LD_INT 22
88353: PUSH
88354: LD_OWVAR 2
88358: PUSH
88359: EMPTY
88360: LIST
88361: LIST
88362: PUSH
88363: LD_INT 21
88365: PUSH
88366: LD_INT 1
88368: PUSH
88369: EMPTY
88370: LIST
88371: LIST
88372: PUSH
88373: EMPTY
88374: LIST
88375: LIST
88376: PPUSH
88377: CALL_OW 69
88381: ST_TO_ADDR
// if not tmp then
88382: LD_VAR 0 5
88386: NOT
88387: IFFALSE 88391
// exit ;
88389: GO 88545
// for i in tmp do
88391: LD_ADDR_VAR 0 1
88395: PUSH
88396: LD_VAR 0 5
88400: PUSH
88401: FOR_IN
88402: IFFALSE 88543
// begin d := rand ( 0 , 5 ) ;
88404: LD_ADDR_VAR 0 4
88408: PUSH
88409: LD_INT 0
88411: PPUSH
88412: LD_INT 5
88414: PPUSH
88415: CALL_OW 12
88419: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
88420: LD_ADDR_VAR 0 2
88424: PUSH
88425: LD_VAR 0 1
88429: PPUSH
88430: CALL_OW 250
88434: PPUSH
88435: LD_VAR 0 4
88439: PPUSH
88440: LD_INT 3
88442: PPUSH
88443: LD_INT 12
88445: PPUSH
88446: CALL_OW 12
88450: PPUSH
88451: CALL_OW 272
88455: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
88456: LD_ADDR_VAR 0 3
88460: PUSH
88461: LD_VAR 0 1
88465: PPUSH
88466: CALL_OW 251
88470: PPUSH
88471: LD_VAR 0 4
88475: PPUSH
88476: LD_INT 3
88478: PPUSH
88479: LD_INT 12
88481: PPUSH
88482: CALL_OW 12
88486: PPUSH
88487: CALL_OW 273
88491: ST_TO_ADDR
// if ValidHex ( x , y ) then
88492: LD_VAR 0 2
88496: PPUSH
88497: LD_VAR 0 3
88501: PPUSH
88502: CALL_OW 488
88506: IFFALSE 88541
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
88508: LD_VAR 0 1
88512: PPUSH
88513: LD_VAR 0 2
88517: PPUSH
88518: LD_VAR 0 3
88522: PPUSH
88523: LD_INT 3
88525: PPUSH
88526: LD_INT 6
88528: PPUSH
88529: CALL_OW 12
88533: PPUSH
88534: LD_INT 1
88536: PPUSH
88537: CALL_OW 483
// end ;
88541: GO 88401
88543: POP
88544: POP
// end ;
88545: PPOPN 5
88547: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
88548: LD_EXP 107
88552: PUSH
88553: LD_EXP 142
88557: AND
88558: IFFALSE 88652
88560: GO 88562
88562: DISABLE
88563: LD_INT 0
88565: PPUSH
88566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
88567: LD_ADDR_VAR 0 2
88571: PUSH
88572: LD_INT 22
88574: PUSH
88575: LD_OWVAR 2
88579: PUSH
88580: EMPTY
88581: LIST
88582: LIST
88583: PUSH
88584: LD_INT 32
88586: PUSH
88587: LD_INT 1
88589: PUSH
88590: EMPTY
88591: LIST
88592: LIST
88593: PUSH
88594: LD_INT 21
88596: PUSH
88597: LD_INT 2
88599: PUSH
88600: EMPTY
88601: LIST
88602: LIST
88603: PUSH
88604: EMPTY
88605: LIST
88606: LIST
88607: LIST
88608: PPUSH
88609: CALL_OW 69
88613: ST_TO_ADDR
// if not tmp then
88614: LD_VAR 0 2
88618: NOT
88619: IFFALSE 88623
// exit ;
88621: GO 88652
// for i in tmp do
88623: LD_ADDR_VAR 0 1
88627: PUSH
88628: LD_VAR 0 2
88632: PUSH
88633: FOR_IN
88634: IFFALSE 88650
// SetFuel ( i , 0 ) ;
88636: LD_VAR 0 1
88640: PPUSH
88641: LD_INT 0
88643: PPUSH
88644: CALL_OW 240
88648: GO 88633
88650: POP
88651: POP
// end ;
88652: PPOPN 2
88654: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
88655: LD_EXP 107
88659: PUSH
88660: LD_EXP 143
88664: AND
88665: IFFALSE 88731
88667: GO 88669
88669: DISABLE
88670: LD_INT 0
88672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
88673: LD_ADDR_VAR 0 1
88677: PUSH
88678: LD_INT 22
88680: PUSH
88681: LD_OWVAR 2
88685: PUSH
88686: EMPTY
88687: LIST
88688: LIST
88689: PUSH
88690: LD_INT 30
88692: PUSH
88693: LD_INT 29
88695: PUSH
88696: EMPTY
88697: LIST
88698: LIST
88699: PUSH
88700: EMPTY
88701: LIST
88702: LIST
88703: PPUSH
88704: CALL_OW 69
88708: ST_TO_ADDR
// if not tmp then
88709: LD_VAR 0 1
88713: NOT
88714: IFFALSE 88718
// exit ;
88716: GO 88731
// DestroyUnit ( tmp [ 1 ] ) ;
88718: LD_VAR 0 1
88722: PUSH
88723: LD_INT 1
88725: ARRAY
88726: PPUSH
88727: CALL_OW 65
// end ;
88731: PPOPN 1
88733: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
88734: LD_EXP 107
88738: PUSH
88739: LD_EXP 145
88743: AND
88744: IFFALSE 88873
88746: GO 88748
88748: DISABLE
88749: LD_INT 0
88751: PPUSH
// begin uc_side := 0 ;
88752: LD_ADDR_OWVAR 20
88756: PUSH
88757: LD_INT 0
88759: ST_TO_ADDR
// uc_nation := nation_arabian ;
88760: LD_ADDR_OWVAR 21
88764: PUSH
88765: LD_INT 2
88767: ST_TO_ADDR
// hc_gallery :=  ;
88768: LD_ADDR_OWVAR 33
88772: PUSH
88773: LD_STRING 
88775: ST_TO_ADDR
// hc_name :=  ;
88776: LD_ADDR_OWVAR 26
88780: PUSH
88781: LD_STRING 
88783: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
88784: LD_INT 1
88786: PPUSH
88787: LD_INT 11
88789: PPUSH
88790: LD_INT 10
88792: PPUSH
88793: CALL_OW 380
// un := CreateHuman ;
88797: LD_ADDR_VAR 0 1
88801: PUSH
88802: CALL_OW 44
88806: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88807: LD_VAR 0 1
88811: PPUSH
88812: LD_INT 1
88814: PPUSH
88815: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
88819: LD_INT 35
88821: PPUSH
88822: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
88826: LD_VAR 0 1
88830: PPUSH
88831: LD_INT 22
88833: PUSH
88834: LD_OWVAR 2
88838: PUSH
88839: EMPTY
88840: LIST
88841: LIST
88842: PPUSH
88843: CALL_OW 69
88847: PPUSH
88848: LD_VAR 0 1
88852: PPUSH
88853: CALL_OW 74
88857: PPUSH
88858: CALL_OW 115
// until IsDead ( un ) ;
88862: LD_VAR 0 1
88866: PPUSH
88867: CALL_OW 301
88871: IFFALSE 88819
// end ;
88873: PPOPN 1
88875: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
88876: LD_EXP 107
88880: PUSH
88881: LD_EXP 147
88885: AND
88886: IFFALSE 88898
88888: GO 88890
88890: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
88891: LD_STRING earthquake(getX(game), 0, 32)
88893: PPUSH
88894: CALL_OW 559
88898: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
88899: LD_EXP 107
88903: PUSH
88904: LD_EXP 148
88908: AND
88909: IFFALSE 89000
88911: GO 88913
88913: DISABLE
88914: LD_INT 0
88916: PPUSH
// begin enable ;
88917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
88918: LD_ADDR_VAR 0 1
88922: PUSH
88923: LD_INT 22
88925: PUSH
88926: LD_OWVAR 2
88930: PUSH
88931: EMPTY
88932: LIST
88933: LIST
88934: PUSH
88935: LD_INT 21
88937: PUSH
88938: LD_INT 2
88940: PUSH
88941: EMPTY
88942: LIST
88943: LIST
88944: PUSH
88945: LD_INT 33
88947: PUSH
88948: LD_INT 3
88950: PUSH
88951: EMPTY
88952: LIST
88953: LIST
88954: PUSH
88955: EMPTY
88956: LIST
88957: LIST
88958: LIST
88959: PPUSH
88960: CALL_OW 69
88964: ST_TO_ADDR
// if not tmp then
88965: LD_VAR 0 1
88969: NOT
88970: IFFALSE 88974
// exit ;
88972: GO 89000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
88974: LD_VAR 0 1
88978: PUSH
88979: LD_INT 1
88981: PPUSH
88982: LD_VAR 0 1
88986: PPUSH
88987: CALL_OW 12
88991: ARRAY
88992: PPUSH
88993: LD_INT 1
88995: PPUSH
88996: CALL_OW 234
// end ;
89000: PPOPN 1
89002: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
89003: LD_EXP 107
89007: PUSH
89008: LD_EXP 149
89012: AND
89013: IFFALSE 89154
89015: GO 89017
89017: DISABLE
89018: LD_INT 0
89020: PPUSH
89021: PPUSH
89022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89023: LD_ADDR_VAR 0 3
89027: PUSH
89028: LD_INT 22
89030: PUSH
89031: LD_OWVAR 2
89035: PUSH
89036: EMPTY
89037: LIST
89038: LIST
89039: PUSH
89040: LD_INT 25
89042: PUSH
89043: LD_INT 1
89045: PUSH
89046: EMPTY
89047: LIST
89048: LIST
89049: PUSH
89050: EMPTY
89051: LIST
89052: LIST
89053: PPUSH
89054: CALL_OW 69
89058: ST_TO_ADDR
// if not tmp then
89059: LD_VAR 0 3
89063: NOT
89064: IFFALSE 89068
// exit ;
89066: GO 89154
// un := tmp [ rand ( 1 , tmp ) ] ;
89068: LD_ADDR_VAR 0 2
89072: PUSH
89073: LD_VAR 0 3
89077: PUSH
89078: LD_INT 1
89080: PPUSH
89081: LD_VAR 0 3
89085: PPUSH
89086: CALL_OW 12
89090: ARRAY
89091: ST_TO_ADDR
// if Crawls ( un ) then
89092: LD_VAR 0 2
89096: PPUSH
89097: CALL_OW 318
89101: IFFALSE 89112
// ComWalk ( un ) ;
89103: LD_VAR 0 2
89107: PPUSH
89108: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
89112: LD_VAR 0 2
89116: PPUSH
89117: LD_INT 9
89119: PPUSH
89120: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
89124: LD_INT 28
89126: PPUSH
89127: LD_OWVAR 2
89131: PPUSH
89132: LD_INT 2
89134: PPUSH
89135: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
89139: LD_INT 29
89141: PPUSH
89142: LD_OWVAR 2
89146: PPUSH
89147: LD_INT 2
89149: PPUSH
89150: CALL_OW 322
// end ;
89154: PPOPN 3
89156: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
89157: LD_EXP 107
89161: PUSH
89162: LD_EXP 150
89166: AND
89167: IFFALSE 89278
89169: GO 89171
89171: DISABLE
89172: LD_INT 0
89174: PPUSH
89175: PPUSH
89176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89177: LD_ADDR_VAR 0 3
89181: PUSH
89182: LD_INT 22
89184: PUSH
89185: LD_OWVAR 2
89189: PUSH
89190: EMPTY
89191: LIST
89192: LIST
89193: PUSH
89194: LD_INT 25
89196: PUSH
89197: LD_INT 1
89199: PUSH
89200: EMPTY
89201: LIST
89202: LIST
89203: PUSH
89204: EMPTY
89205: LIST
89206: LIST
89207: PPUSH
89208: CALL_OW 69
89212: ST_TO_ADDR
// if not tmp then
89213: LD_VAR 0 3
89217: NOT
89218: IFFALSE 89222
// exit ;
89220: GO 89278
// un := tmp [ rand ( 1 , tmp ) ] ;
89222: LD_ADDR_VAR 0 2
89226: PUSH
89227: LD_VAR 0 3
89231: PUSH
89232: LD_INT 1
89234: PPUSH
89235: LD_VAR 0 3
89239: PPUSH
89240: CALL_OW 12
89244: ARRAY
89245: ST_TO_ADDR
// if Crawls ( un ) then
89246: LD_VAR 0 2
89250: PPUSH
89251: CALL_OW 318
89255: IFFALSE 89266
// ComWalk ( un ) ;
89257: LD_VAR 0 2
89261: PPUSH
89262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89266: LD_VAR 0 2
89270: PPUSH
89271: LD_INT 8
89273: PPUSH
89274: CALL_OW 336
// end ;
89278: PPOPN 3
89280: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
89281: LD_EXP 107
89285: PUSH
89286: LD_EXP 151
89290: AND
89291: IFFALSE 89435
89293: GO 89295
89295: DISABLE
89296: LD_INT 0
89298: PPUSH
89299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
89300: LD_ADDR_VAR 0 2
89304: PUSH
89305: LD_INT 22
89307: PUSH
89308: LD_OWVAR 2
89312: PUSH
89313: EMPTY
89314: LIST
89315: LIST
89316: PUSH
89317: LD_INT 21
89319: PUSH
89320: LD_INT 2
89322: PUSH
89323: EMPTY
89324: LIST
89325: LIST
89326: PUSH
89327: LD_INT 2
89329: PUSH
89330: LD_INT 34
89332: PUSH
89333: LD_INT 12
89335: PUSH
89336: EMPTY
89337: LIST
89338: LIST
89339: PUSH
89340: LD_INT 34
89342: PUSH
89343: LD_INT 51
89345: PUSH
89346: EMPTY
89347: LIST
89348: LIST
89349: PUSH
89350: LD_INT 34
89352: PUSH
89353: LD_INT 32
89355: PUSH
89356: EMPTY
89357: LIST
89358: LIST
89359: PUSH
89360: EMPTY
89361: LIST
89362: LIST
89363: LIST
89364: LIST
89365: PUSH
89366: EMPTY
89367: LIST
89368: LIST
89369: LIST
89370: PPUSH
89371: CALL_OW 69
89375: ST_TO_ADDR
// if not tmp then
89376: LD_VAR 0 2
89380: NOT
89381: IFFALSE 89385
// exit ;
89383: GO 89435
// for i in tmp do
89385: LD_ADDR_VAR 0 1
89389: PUSH
89390: LD_VAR 0 2
89394: PUSH
89395: FOR_IN
89396: IFFALSE 89433
// if GetCargo ( i , mat_artifact ) = 0 then
89398: LD_VAR 0 1
89402: PPUSH
89403: LD_INT 4
89405: PPUSH
89406: CALL_OW 289
89410: PUSH
89411: LD_INT 0
89413: EQUAL
89414: IFFALSE 89431
// SetCargo ( i , mat_siberit , 100 ) ;
89416: LD_VAR 0 1
89420: PPUSH
89421: LD_INT 3
89423: PPUSH
89424: LD_INT 100
89426: PPUSH
89427: CALL_OW 290
89431: GO 89395
89433: POP
89434: POP
// end ;
89435: PPOPN 2
89437: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
89438: LD_EXP 107
89442: PUSH
89443: LD_EXP 152
89447: AND
89448: IFFALSE 89631
89450: GO 89452
89452: DISABLE
89453: LD_INT 0
89455: PPUSH
89456: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
89457: LD_ADDR_VAR 0 2
89461: PUSH
89462: LD_INT 22
89464: PUSH
89465: LD_OWVAR 2
89469: PUSH
89470: EMPTY
89471: LIST
89472: LIST
89473: PPUSH
89474: CALL_OW 69
89478: ST_TO_ADDR
// if not tmp then
89479: LD_VAR 0 2
89483: NOT
89484: IFFALSE 89488
// exit ;
89486: GO 89631
// for i := 1 to 2 do
89488: LD_ADDR_VAR 0 1
89492: PUSH
89493: DOUBLE
89494: LD_INT 1
89496: DEC
89497: ST_TO_ADDR
89498: LD_INT 2
89500: PUSH
89501: FOR_TO
89502: IFFALSE 89629
// begin uc_side := your_side ;
89504: LD_ADDR_OWVAR 20
89508: PUSH
89509: LD_OWVAR 2
89513: ST_TO_ADDR
// uc_nation := nation_american ;
89514: LD_ADDR_OWVAR 21
89518: PUSH
89519: LD_INT 1
89521: ST_TO_ADDR
// vc_chassis := us_morphling ;
89522: LD_ADDR_OWVAR 37
89526: PUSH
89527: LD_INT 5
89529: ST_TO_ADDR
// vc_engine := engine_siberite ;
89530: LD_ADDR_OWVAR 39
89534: PUSH
89535: LD_INT 3
89537: ST_TO_ADDR
// vc_control := control_computer ;
89538: LD_ADDR_OWVAR 38
89542: PUSH
89543: LD_INT 3
89545: ST_TO_ADDR
// vc_weapon := us_double_laser ;
89546: LD_ADDR_OWVAR 40
89550: PUSH
89551: LD_INT 10
89553: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
89554: LD_VAR 0 2
89558: PUSH
89559: LD_INT 1
89561: ARRAY
89562: PPUSH
89563: CALL_OW 310
89567: NOT
89568: IFFALSE 89615
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
89570: CALL_OW 45
89574: PPUSH
89575: LD_VAR 0 2
89579: PUSH
89580: LD_INT 1
89582: ARRAY
89583: PPUSH
89584: CALL_OW 250
89588: PPUSH
89589: LD_VAR 0 2
89593: PUSH
89594: LD_INT 1
89596: ARRAY
89597: PPUSH
89598: CALL_OW 251
89602: PPUSH
89603: LD_INT 12
89605: PPUSH
89606: LD_INT 1
89608: PPUSH
89609: CALL_OW 50
89613: GO 89627
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
89615: CALL_OW 45
89619: PPUSH
89620: LD_INT 1
89622: PPUSH
89623: CALL_OW 51
// end ;
89627: GO 89501
89629: POP
89630: POP
// end ;
89631: PPOPN 2
89633: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
89634: LD_EXP 107
89638: PUSH
89639: LD_EXP 153
89643: AND
89644: IFFALSE 89866
89646: GO 89648
89648: DISABLE
89649: LD_INT 0
89651: PPUSH
89652: PPUSH
89653: PPUSH
89654: PPUSH
89655: PPUSH
89656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89657: LD_ADDR_VAR 0 6
89661: PUSH
89662: LD_INT 22
89664: PUSH
89665: LD_OWVAR 2
89669: PUSH
89670: EMPTY
89671: LIST
89672: LIST
89673: PUSH
89674: LD_INT 21
89676: PUSH
89677: LD_INT 1
89679: PUSH
89680: EMPTY
89681: LIST
89682: LIST
89683: PUSH
89684: LD_INT 3
89686: PUSH
89687: LD_INT 23
89689: PUSH
89690: LD_INT 0
89692: PUSH
89693: EMPTY
89694: LIST
89695: LIST
89696: PUSH
89697: EMPTY
89698: LIST
89699: LIST
89700: PUSH
89701: EMPTY
89702: LIST
89703: LIST
89704: LIST
89705: PPUSH
89706: CALL_OW 69
89710: ST_TO_ADDR
// if not tmp then
89711: LD_VAR 0 6
89715: NOT
89716: IFFALSE 89720
// exit ;
89718: GO 89866
// s1 := rand ( 1 , 4 ) ;
89720: LD_ADDR_VAR 0 2
89724: PUSH
89725: LD_INT 1
89727: PPUSH
89728: LD_INT 4
89730: PPUSH
89731: CALL_OW 12
89735: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
89736: LD_ADDR_VAR 0 4
89740: PUSH
89741: LD_VAR 0 6
89745: PUSH
89746: LD_INT 1
89748: ARRAY
89749: PPUSH
89750: LD_VAR 0 2
89754: PPUSH
89755: CALL_OW 259
89759: ST_TO_ADDR
// if s1 = 1 then
89760: LD_VAR 0 2
89764: PUSH
89765: LD_INT 1
89767: EQUAL
89768: IFFALSE 89788
// s2 := rand ( 2 , 4 ) else
89770: LD_ADDR_VAR 0 3
89774: PUSH
89775: LD_INT 2
89777: PPUSH
89778: LD_INT 4
89780: PPUSH
89781: CALL_OW 12
89785: ST_TO_ADDR
89786: GO 89796
// s2 := 1 ;
89788: LD_ADDR_VAR 0 3
89792: PUSH
89793: LD_INT 1
89795: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
89796: LD_ADDR_VAR 0 5
89800: PUSH
89801: LD_VAR 0 6
89805: PUSH
89806: LD_INT 1
89808: ARRAY
89809: PPUSH
89810: LD_VAR 0 3
89814: PPUSH
89815: CALL_OW 259
89819: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
89820: LD_VAR 0 6
89824: PUSH
89825: LD_INT 1
89827: ARRAY
89828: PPUSH
89829: LD_VAR 0 2
89833: PPUSH
89834: LD_VAR 0 5
89838: PPUSH
89839: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
89843: LD_VAR 0 6
89847: PUSH
89848: LD_INT 1
89850: ARRAY
89851: PPUSH
89852: LD_VAR 0 3
89856: PPUSH
89857: LD_VAR 0 4
89861: PPUSH
89862: CALL_OW 237
// end ;
89866: PPOPN 6
89868: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
89869: LD_EXP 107
89873: PUSH
89874: LD_EXP 154
89878: AND
89879: IFFALSE 89958
89881: GO 89883
89883: DISABLE
89884: LD_INT 0
89886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
89887: LD_ADDR_VAR 0 1
89891: PUSH
89892: LD_INT 22
89894: PUSH
89895: LD_OWVAR 2
89899: PUSH
89900: EMPTY
89901: LIST
89902: LIST
89903: PUSH
89904: LD_INT 30
89906: PUSH
89907: LD_INT 3
89909: PUSH
89910: EMPTY
89911: LIST
89912: LIST
89913: PUSH
89914: EMPTY
89915: LIST
89916: LIST
89917: PPUSH
89918: CALL_OW 69
89922: ST_TO_ADDR
// if not tmp then
89923: LD_VAR 0 1
89927: NOT
89928: IFFALSE 89932
// exit ;
89930: GO 89958
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
89932: LD_VAR 0 1
89936: PUSH
89937: LD_INT 1
89939: PPUSH
89940: LD_VAR 0 1
89944: PPUSH
89945: CALL_OW 12
89949: ARRAY
89950: PPUSH
89951: LD_INT 1
89953: PPUSH
89954: CALL_OW 234
// end ;
89958: PPOPN 1
89960: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
89961: LD_EXP 107
89965: PUSH
89966: LD_EXP 155
89970: AND
89971: IFFALSE 90083
89973: GO 89975
89975: DISABLE
89976: LD_INT 0
89978: PPUSH
89979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
89980: LD_ADDR_VAR 0 2
89984: PUSH
89985: LD_INT 22
89987: PUSH
89988: LD_OWVAR 2
89992: PUSH
89993: EMPTY
89994: LIST
89995: LIST
89996: PUSH
89997: LD_INT 2
89999: PUSH
90000: LD_INT 30
90002: PUSH
90003: LD_INT 27
90005: PUSH
90006: EMPTY
90007: LIST
90008: LIST
90009: PUSH
90010: LD_INT 30
90012: PUSH
90013: LD_INT 26
90015: PUSH
90016: EMPTY
90017: LIST
90018: LIST
90019: PUSH
90020: LD_INT 30
90022: PUSH
90023: LD_INT 28
90025: PUSH
90026: EMPTY
90027: LIST
90028: LIST
90029: PUSH
90030: EMPTY
90031: LIST
90032: LIST
90033: LIST
90034: LIST
90035: PUSH
90036: EMPTY
90037: LIST
90038: LIST
90039: PPUSH
90040: CALL_OW 69
90044: ST_TO_ADDR
// if not tmp then
90045: LD_VAR 0 2
90049: NOT
90050: IFFALSE 90054
// exit ;
90052: GO 90083
// for i in tmp do
90054: LD_ADDR_VAR 0 1
90058: PUSH
90059: LD_VAR 0 2
90063: PUSH
90064: FOR_IN
90065: IFFALSE 90081
// SetLives ( i , 1 ) ;
90067: LD_VAR 0 1
90071: PPUSH
90072: LD_INT 1
90074: PPUSH
90075: CALL_OW 234
90079: GO 90064
90081: POP
90082: POP
// end ;
90083: PPOPN 2
90085: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
90086: LD_EXP 107
90090: PUSH
90091: LD_EXP 156
90095: AND
90096: IFFALSE 90370
90098: GO 90100
90100: DISABLE
90101: LD_INT 0
90103: PPUSH
90104: PPUSH
90105: PPUSH
// begin i := rand ( 1 , 7 ) ;
90106: LD_ADDR_VAR 0 1
90110: PUSH
90111: LD_INT 1
90113: PPUSH
90114: LD_INT 7
90116: PPUSH
90117: CALL_OW 12
90121: ST_TO_ADDR
// case i of 1 :
90122: LD_VAR 0 1
90126: PUSH
90127: LD_INT 1
90129: DOUBLE
90130: EQUAL
90131: IFTRUE 90135
90133: GO 90145
90135: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
90136: LD_STRING earthquake(getX(game), 0, 32)
90138: PPUSH
90139: CALL_OW 559
90143: GO 90370
90145: LD_INT 2
90147: DOUBLE
90148: EQUAL
90149: IFTRUE 90153
90151: GO 90167
90153: POP
// begin ToLua ( displayStucuk(); ) ;
90154: LD_STRING displayStucuk();
90156: PPUSH
90157: CALL_OW 559
// ResetFog ;
90161: CALL_OW 335
// end ; 3 :
90165: GO 90370
90167: LD_INT 3
90169: DOUBLE
90170: EQUAL
90171: IFTRUE 90175
90173: GO 90279
90175: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90176: LD_ADDR_VAR 0 2
90180: PUSH
90181: LD_INT 22
90183: PUSH
90184: LD_OWVAR 2
90188: PUSH
90189: EMPTY
90190: LIST
90191: LIST
90192: PUSH
90193: LD_INT 25
90195: PUSH
90196: LD_INT 1
90198: PUSH
90199: EMPTY
90200: LIST
90201: LIST
90202: PUSH
90203: EMPTY
90204: LIST
90205: LIST
90206: PPUSH
90207: CALL_OW 69
90211: ST_TO_ADDR
// if not tmp then
90212: LD_VAR 0 2
90216: NOT
90217: IFFALSE 90221
// exit ;
90219: GO 90370
// un := tmp [ rand ( 1 , tmp ) ] ;
90221: LD_ADDR_VAR 0 3
90225: PUSH
90226: LD_VAR 0 2
90230: PUSH
90231: LD_INT 1
90233: PPUSH
90234: LD_VAR 0 2
90238: PPUSH
90239: CALL_OW 12
90243: ARRAY
90244: ST_TO_ADDR
// if Crawls ( un ) then
90245: LD_VAR 0 3
90249: PPUSH
90250: CALL_OW 318
90254: IFFALSE 90265
// ComWalk ( un ) ;
90256: LD_VAR 0 3
90260: PPUSH
90261: CALL_OW 138
// SetClass ( un , class_mortar ) ;
90265: LD_VAR 0 3
90269: PPUSH
90270: LD_INT 8
90272: PPUSH
90273: CALL_OW 336
// end ; 4 :
90277: GO 90370
90279: LD_INT 4
90281: DOUBLE
90282: EQUAL
90283: IFTRUE 90287
90285: GO 90348
90287: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
90288: LD_ADDR_VAR 0 2
90292: PUSH
90293: LD_INT 22
90295: PUSH
90296: LD_OWVAR 2
90300: PUSH
90301: EMPTY
90302: LIST
90303: LIST
90304: PUSH
90305: LD_INT 30
90307: PUSH
90308: LD_INT 29
90310: PUSH
90311: EMPTY
90312: LIST
90313: LIST
90314: PUSH
90315: EMPTY
90316: LIST
90317: LIST
90318: PPUSH
90319: CALL_OW 69
90323: ST_TO_ADDR
// if not tmp then
90324: LD_VAR 0 2
90328: NOT
90329: IFFALSE 90333
// exit ;
90331: GO 90370
// DestroyUnit ( tmp [ 1 ] ) ;
90333: LD_VAR 0 2
90337: PUSH
90338: LD_INT 1
90340: ARRAY
90341: PPUSH
90342: CALL_OW 65
// end ; 5 .. 7 :
90346: GO 90370
90348: LD_INT 5
90350: DOUBLE
90351: GREATEREQUAL
90352: IFFALSE 90360
90354: LD_INT 7
90356: DOUBLE
90357: LESSEQUAL
90358: IFTRUE 90362
90360: GO 90369
90362: POP
// StreamSibBomb ; end ;
90363: CALL 86620 0 0
90367: GO 90370
90369: POP
// end ;
90370: PPOPN 3
90372: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
90373: LD_EXP 107
90377: PUSH
90378: LD_EXP 157
90382: AND
90383: IFFALSE 90539
90385: GO 90387
90387: DISABLE
90388: LD_INT 0
90390: PPUSH
90391: PPUSH
90392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
90393: LD_ADDR_VAR 0 2
90397: PUSH
90398: LD_INT 81
90400: PUSH
90401: LD_OWVAR 2
90405: PUSH
90406: EMPTY
90407: LIST
90408: LIST
90409: PUSH
90410: LD_INT 2
90412: PUSH
90413: LD_INT 21
90415: PUSH
90416: LD_INT 1
90418: PUSH
90419: EMPTY
90420: LIST
90421: LIST
90422: PUSH
90423: LD_INT 21
90425: PUSH
90426: LD_INT 2
90428: PUSH
90429: EMPTY
90430: LIST
90431: LIST
90432: PUSH
90433: EMPTY
90434: LIST
90435: LIST
90436: LIST
90437: PUSH
90438: EMPTY
90439: LIST
90440: LIST
90441: PPUSH
90442: CALL_OW 69
90446: ST_TO_ADDR
// if not tmp then
90447: LD_VAR 0 2
90451: NOT
90452: IFFALSE 90456
// exit ;
90454: GO 90539
// p := 0 ;
90456: LD_ADDR_VAR 0 3
90460: PUSH
90461: LD_INT 0
90463: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90464: LD_INT 35
90466: PPUSH
90467: CALL_OW 67
// p := p + 1 ;
90471: LD_ADDR_VAR 0 3
90475: PUSH
90476: LD_VAR 0 3
90480: PUSH
90481: LD_INT 1
90483: PLUS
90484: ST_TO_ADDR
// for i in tmp do
90485: LD_ADDR_VAR 0 1
90489: PUSH
90490: LD_VAR 0 2
90494: PUSH
90495: FOR_IN
90496: IFFALSE 90527
// if GetLives ( i ) < 1000 then
90498: LD_VAR 0 1
90502: PPUSH
90503: CALL_OW 256
90507: PUSH
90508: LD_INT 1000
90510: LESS
90511: IFFALSE 90525
// SetLives ( i , 1000 ) ;
90513: LD_VAR 0 1
90517: PPUSH
90518: LD_INT 1000
90520: PPUSH
90521: CALL_OW 234
90525: GO 90495
90527: POP
90528: POP
// until p > 20 ;
90529: LD_VAR 0 3
90533: PUSH
90534: LD_INT 20
90536: GREATER
90537: IFFALSE 90464
// end ;
90539: PPOPN 3
90541: END
// every 0 0$1 trigger StreamModeActive and sTime do
90542: LD_EXP 107
90546: PUSH
90547: LD_EXP 158
90551: AND
90552: IFFALSE 90587
90554: GO 90556
90556: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
90557: LD_INT 28
90559: PPUSH
90560: LD_OWVAR 2
90564: PPUSH
90565: LD_INT 2
90567: PPUSH
90568: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
90572: LD_INT 30
90574: PPUSH
90575: LD_OWVAR 2
90579: PPUSH
90580: LD_INT 2
90582: PPUSH
90583: CALL_OW 322
// end ;
90587: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
90588: LD_EXP 107
90592: PUSH
90593: LD_EXP 159
90597: AND
90598: IFFALSE 90719
90600: GO 90602
90602: DISABLE
90603: LD_INT 0
90605: PPUSH
90606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
90607: LD_ADDR_VAR 0 2
90611: PUSH
90612: LD_INT 22
90614: PUSH
90615: LD_OWVAR 2
90619: PUSH
90620: EMPTY
90621: LIST
90622: LIST
90623: PUSH
90624: LD_INT 21
90626: PUSH
90627: LD_INT 1
90629: PUSH
90630: EMPTY
90631: LIST
90632: LIST
90633: PUSH
90634: LD_INT 3
90636: PUSH
90637: LD_INT 23
90639: PUSH
90640: LD_INT 0
90642: PUSH
90643: EMPTY
90644: LIST
90645: LIST
90646: PUSH
90647: EMPTY
90648: LIST
90649: LIST
90650: PUSH
90651: EMPTY
90652: LIST
90653: LIST
90654: LIST
90655: PPUSH
90656: CALL_OW 69
90660: ST_TO_ADDR
// if not tmp then
90661: LD_VAR 0 2
90665: NOT
90666: IFFALSE 90670
// exit ;
90668: GO 90719
// for i in tmp do
90670: LD_ADDR_VAR 0 1
90674: PUSH
90675: LD_VAR 0 2
90679: PUSH
90680: FOR_IN
90681: IFFALSE 90717
// begin if Crawls ( i ) then
90683: LD_VAR 0 1
90687: PPUSH
90688: CALL_OW 318
90692: IFFALSE 90703
// ComWalk ( i ) ;
90694: LD_VAR 0 1
90698: PPUSH
90699: CALL_OW 138
// SetClass ( i , 2 ) ;
90703: LD_VAR 0 1
90707: PPUSH
90708: LD_INT 2
90710: PPUSH
90711: CALL_OW 336
// end ;
90715: GO 90680
90717: POP
90718: POP
// end ;
90719: PPOPN 2
90721: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
90722: LD_EXP 107
90726: PUSH
90727: LD_EXP 160
90731: AND
90732: IFFALSE 91013
90734: GO 90736
90736: DISABLE
90737: LD_INT 0
90739: PPUSH
90740: PPUSH
90741: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
90742: LD_OWVAR 2
90746: PPUSH
90747: LD_INT 9
90749: PPUSH
90750: LD_INT 1
90752: PPUSH
90753: LD_INT 1
90755: PPUSH
90756: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
90760: LD_INT 9
90762: PPUSH
90763: LD_OWVAR 2
90767: PPUSH
90768: CALL_OW 343
// uc_side := 9 ;
90772: LD_ADDR_OWVAR 20
90776: PUSH
90777: LD_INT 9
90779: ST_TO_ADDR
// uc_nation := 2 ;
90780: LD_ADDR_OWVAR 21
90784: PUSH
90785: LD_INT 2
90787: ST_TO_ADDR
// hc_name := Dark Warrior ;
90788: LD_ADDR_OWVAR 26
90792: PUSH
90793: LD_STRING Dark Warrior
90795: ST_TO_ADDR
// hc_gallery :=  ;
90796: LD_ADDR_OWVAR 33
90800: PUSH
90801: LD_STRING 
90803: ST_TO_ADDR
// hc_noskilllimit := true ;
90804: LD_ADDR_OWVAR 76
90808: PUSH
90809: LD_INT 1
90811: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
90812: LD_ADDR_OWVAR 31
90816: PUSH
90817: LD_INT 30
90819: PUSH
90820: LD_INT 30
90822: PUSH
90823: LD_INT 30
90825: PUSH
90826: LD_INT 30
90828: PUSH
90829: EMPTY
90830: LIST
90831: LIST
90832: LIST
90833: LIST
90834: ST_TO_ADDR
// un := CreateHuman ;
90835: LD_ADDR_VAR 0 3
90839: PUSH
90840: CALL_OW 44
90844: ST_TO_ADDR
// hc_noskilllimit := false ;
90845: LD_ADDR_OWVAR 76
90849: PUSH
90850: LD_INT 0
90852: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
90853: LD_VAR 0 3
90857: PPUSH
90858: LD_INT 1
90860: PPUSH
90861: CALL_OW 51
// p := 0 ;
90865: LD_ADDR_VAR 0 2
90869: PUSH
90870: LD_INT 0
90872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90873: LD_INT 35
90875: PPUSH
90876: CALL_OW 67
// p := p + 1 ;
90880: LD_ADDR_VAR 0 2
90884: PUSH
90885: LD_VAR 0 2
90889: PUSH
90890: LD_INT 1
90892: PLUS
90893: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
90894: LD_VAR 0 3
90898: PPUSH
90899: CALL_OW 256
90903: PUSH
90904: LD_INT 1000
90906: LESS
90907: IFFALSE 90921
// SetLives ( un , 1000 ) ;
90909: LD_VAR 0 3
90913: PPUSH
90914: LD_INT 1000
90916: PPUSH
90917: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
90921: LD_VAR 0 3
90925: PPUSH
90926: LD_INT 81
90928: PUSH
90929: LD_OWVAR 2
90933: PUSH
90934: EMPTY
90935: LIST
90936: LIST
90937: PUSH
90938: LD_INT 91
90940: PUSH
90941: LD_VAR 0 3
90945: PUSH
90946: LD_INT 30
90948: PUSH
90949: EMPTY
90950: LIST
90951: LIST
90952: LIST
90953: PUSH
90954: EMPTY
90955: LIST
90956: LIST
90957: PPUSH
90958: CALL_OW 69
90962: PPUSH
90963: LD_VAR 0 3
90967: PPUSH
90968: CALL_OW 74
90972: PPUSH
90973: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
90977: LD_VAR 0 2
90981: PUSH
90982: LD_INT 60
90984: GREATER
90985: PUSH
90986: LD_VAR 0 3
90990: PPUSH
90991: CALL_OW 301
90995: OR
90996: IFFALSE 90873
// if un then
90998: LD_VAR 0 3
91002: IFFALSE 91013
// RemoveUnit ( un ) ;
91004: LD_VAR 0 3
91008: PPUSH
91009: CALL_OW 64
// end ; end_of_file
91013: PPOPN 3
91015: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
91016: LD_INT 0
91018: PPUSH
91019: PPUSH
91020: PPUSH
91021: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
91022: LD_VAR 0 1
91026: PPUSH
91027: CALL_OW 264
91031: PUSH
91032: LD_EXP 52
91036: EQUAL
91037: IFFALSE 91109
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91039: LD_INT 68
91041: PPUSH
91042: LD_VAR 0 1
91046: PPUSH
91047: CALL_OW 255
91051: PPUSH
91052: CALL_OW 321
91056: PUSH
91057: LD_INT 2
91059: EQUAL
91060: IFFALSE 91072
// eff := 70 else
91062: LD_ADDR_VAR 0 4
91066: PUSH
91067: LD_INT 70
91069: ST_TO_ADDR
91070: GO 91080
// eff := 30 ;
91072: LD_ADDR_VAR 0 4
91076: PUSH
91077: LD_INT 30
91079: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91080: LD_VAR 0 1
91084: PPUSH
91085: CALL_OW 250
91089: PPUSH
91090: LD_VAR 0 1
91094: PPUSH
91095: CALL_OW 251
91099: PPUSH
91100: LD_VAR 0 4
91104: PPUSH
91105: CALL_OW 495
// end ; end ;
91109: LD_VAR 0 2
91113: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
91114: LD_INT 0
91116: PPUSH
// end ;
91117: LD_VAR 0 4
91121: RET
// export function SOS_Command ( cmd ) ; begin
91122: LD_INT 0
91124: PPUSH
// end ;
91125: LD_VAR 0 2
91129: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
91130: LD_VAR 0 1
91134: PUSH
91135: LD_INT 254
91137: EQUAL
91138: PUSH
91139: LD_VAR 0 2
91143: PPUSH
91144: CALL_OW 264
91148: PUSH
91149: LD_EXP 50
91153: EQUAL
91154: AND
91155: PUSH
91156: LD_VAR 0 3
91160: PPUSH
91161: CALL_OW 263
91165: PUSH
91166: LD_INT 3
91168: EQUAL
91169: AND
91170: IFFALSE 91181
// DestroyUnit ( selectedUnit ) ;
91172: LD_VAR 0 3
91176: PPUSH
91177: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91181: LD_VAR 0 1
91185: PUSH
91186: LD_INT 255
91188: EQUAL
91189: PUSH
91190: LD_VAR 0 2
91194: PPUSH
91195: CALL_OW 264
91199: PUSH
91200: LD_INT 14
91202: PUSH
91203: LD_INT 53
91205: PUSH
91206: EMPTY
91207: LIST
91208: LIST
91209: IN
91210: AND
91211: PUSH
91212: LD_VAR 0 4
91216: PPUSH
91217: LD_VAR 0 5
91221: PPUSH
91222: CALL_OW 488
91226: AND
91227: IFFALSE 91251
// CutTreeXYR ( unit , x , y , 12 ) ;
91229: LD_VAR 0 2
91233: PPUSH
91234: LD_VAR 0 4
91238: PPUSH
91239: LD_VAR 0 5
91243: PPUSH
91244: LD_INT 12
91246: PPUSH
91247: CALL 91254 0 4
// end ;
91251: PPOPN 5
91253: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91254: LD_INT 0
91256: PPUSH
91257: PPUSH
91258: PPUSH
91259: PPUSH
91260: PPUSH
91261: PPUSH
91262: PPUSH
91263: PPUSH
91264: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
91265: LD_VAR 0 1
91269: NOT
91270: PUSH
91271: LD_VAR 0 2
91275: PPUSH
91276: LD_VAR 0 3
91280: PPUSH
91281: CALL_OW 488
91285: NOT
91286: OR
91287: PUSH
91288: LD_VAR 0 4
91292: NOT
91293: OR
91294: IFFALSE 91298
// exit ;
91296: GO 91638
// list := [ ] ;
91298: LD_ADDR_VAR 0 13
91302: PUSH
91303: EMPTY
91304: ST_TO_ADDR
// if x - r < 0 then
91305: LD_VAR 0 2
91309: PUSH
91310: LD_VAR 0 4
91314: MINUS
91315: PUSH
91316: LD_INT 0
91318: LESS
91319: IFFALSE 91331
// min_x := 0 else
91321: LD_ADDR_VAR 0 7
91325: PUSH
91326: LD_INT 0
91328: ST_TO_ADDR
91329: GO 91347
// min_x := x - r ;
91331: LD_ADDR_VAR 0 7
91335: PUSH
91336: LD_VAR 0 2
91340: PUSH
91341: LD_VAR 0 4
91345: MINUS
91346: ST_TO_ADDR
// if y - r < 0 then
91347: LD_VAR 0 3
91351: PUSH
91352: LD_VAR 0 4
91356: MINUS
91357: PUSH
91358: LD_INT 0
91360: LESS
91361: IFFALSE 91373
// min_y := 0 else
91363: LD_ADDR_VAR 0 8
91367: PUSH
91368: LD_INT 0
91370: ST_TO_ADDR
91371: GO 91389
// min_y := y - r ;
91373: LD_ADDR_VAR 0 8
91377: PUSH
91378: LD_VAR 0 3
91382: PUSH
91383: LD_VAR 0 4
91387: MINUS
91388: ST_TO_ADDR
// max_x := x + r ;
91389: LD_ADDR_VAR 0 9
91393: PUSH
91394: LD_VAR 0 2
91398: PUSH
91399: LD_VAR 0 4
91403: PLUS
91404: ST_TO_ADDR
// max_y := y + r ;
91405: LD_ADDR_VAR 0 10
91409: PUSH
91410: LD_VAR 0 3
91414: PUSH
91415: LD_VAR 0 4
91419: PLUS
91420: ST_TO_ADDR
// for _x = min_x to max_x do
91421: LD_ADDR_VAR 0 11
91425: PUSH
91426: DOUBLE
91427: LD_VAR 0 7
91431: DEC
91432: ST_TO_ADDR
91433: LD_VAR 0 9
91437: PUSH
91438: FOR_TO
91439: IFFALSE 91556
// for _y = min_y to max_y do
91441: LD_ADDR_VAR 0 12
91445: PUSH
91446: DOUBLE
91447: LD_VAR 0 8
91451: DEC
91452: ST_TO_ADDR
91453: LD_VAR 0 10
91457: PUSH
91458: FOR_TO
91459: IFFALSE 91552
// begin if not ValidHex ( _x , _y ) then
91461: LD_VAR 0 11
91465: PPUSH
91466: LD_VAR 0 12
91470: PPUSH
91471: CALL_OW 488
91475: NOT
91476: IFFALSE 91480
// continue ;
91478: GO 91458
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91480: LD_VAR 0 11
91484: PPUSH
91485: LD_VAR 0 12
91489: PPUSH
91490: CALL_OW 351
91494: PUSH
91495: LD_VAR 0 11
91499: PPUSH
91500: LD_VAR 0 12
91504: PPUSH
91505: CALL_OW 554
91509: AND
91510: IFFALSE 91550
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91512: LD_ADDR_VAR 0 13
91516: PUSH
91517: LD_VAR 0 13
91521: PPUSH
91522: LD_VAR 0 13
91526: PUSH
91527: LD_INT 1
91529: PLUS
91530: PPUSH
91531: LD_VAR 0 11
91535: PUSH
91536: LD_VAR 0 12
91540: PUSH
91541: EMPTY
91542: LIST
91543: LIST
91544: PPUSH
91545: CALL_OW 2
91549: ST_TO_ADDR
// end ;
91550: GO 91458
91552: POP
91553: POP
91554: GO 91438
91556: POP
91557: POP
// if not list then
91558: LD_VAR 0 13
91562: NOT
91563: IFFALSE 91567
// exit ;
91565: GO 91638
// for i in list do
91567: LD_ADDR_VAR 0 6
91571: PUSH
91572: LD_VAR 0 13
91576: PUSH
91577: FOR_IN
91578: IFFALSE 91636
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91580: LD_VAR 0 1
91584: PPUSH
91585: LD_STRING M
91587: PUSH
91588: LD_VAR 0 6
91592: PUSH
91593: LD_INT 1
91595: ARRAY
91596: PUSH
91597: LD_VAR 0 6
91601: PUSH
91602: LD_INT 2
91604: ARRAY
91605: PUSH
91606: LD_INT 0
91608: PUSH
91609: LD_INT 0
91611: PUSH
91612: LD_INT 0
91614: PUSH
91615: LD_INT 0
91617: PUSH
91618: EMPTY
91619: LIST
91620: LIST
91621: LIST
91622: LIST
91623: LIST
91624: LIST
91625: LIST
91626: PUSH
91627: EMPTY
91628: LIST
91629: PPUSH
91630: CALL_OW 447
91634: GO 91577
91636: POP
91637: POP
// end ;
91638: LD_VAR 0 5
91642: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
91643: LD_EXP 161
91647: NOT
91648: IFFALSE 91691
91650: GO 91652
91652: DISABLE
// begin initHack := true ;
91653: LD_ADDR_EXP 161
91657: PUSH
91658: LD_INT 1
91660: ST_TO_ADDR
// hackTanks := [ ] ;
91661: LD_ADDR_EXP 162
91665: PUSH
91666: EMPTY
91667: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
91668: LD_ADDR_EXP 163
91672: PUSH
91673: EMPTY
91674: ST_TO_ADDR
// hackLimit := 3 ;
91675: LD_ADDR_EXP 164
91679: PUSH
91680: LD_INT 3
91682: ST_TO_ADDR
// hackDist := 12 ;
91683: LD_ADDR_EXP 165
91687: PUSH
91688: LD_INT 12
91690: ST_TO_ADDR
// end ;
91691: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
91692: LD_EXP 161
91696: PUSH
91697: LD_INT 34
91699: PUSH
91700: LD_EXP 50
91704: PUSH
91705: EMPTY
91706: LIST
91707: LIST
91708: PPUSH
91709: CALL_OW 69
91713: AND
91714: IFFALSE 91943
91716: GO 91718
91718: DISABLE
91719: LD_INT 0
91721: PPUSH
91722: PPUSH
// begin enable ;
91723: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
91724: LD_ADDR_VAR 0 1
91728: PUSH
91729: LD_INT 34
91731: PUSH
91732: LD_EXP 50
91736: PUSH
91737: EMPTY
91738: LIST
91739: LIST
91740: PPUSH
91741: CALL_OW 69
91745: PUSH
91746: FOR_IN
91747: IFFALSE 91941
// begin if not i in hackTanks then
91749: LD_VAR 0 1
91753: PUSH
91754: LD_EXP 162
91758: IN
91759: NOT
91760: IFFALSE 91817
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
91762: LD_ADDR_EXP 162
91766: PUSH
91767: LD_EXP 162
91771: PPUSH
91772: LD_EXP 162
91776: PUSH
91777: LD_INT 1
91779: PLUS
91780: PPUSH
91781: LD_VAR 0 1
91785: PPUSH
91786: CALL_OW 1
91790: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
91791: LD_ADDR_EXP 163
91795: PUSH
91796: LD_EXP 163
91800: PPUSH
91801: LD_EXP 163
91805: PUSH
91806: LD_INT 1
91808: PLUS
91809: PPUSH
91810: EMPTY
91811: PPUSH
91812: CALL_OW 1
91816: ST_TO_ADDR
// end ; if not IsOk ( i ) then
91817: LD_VAR 0 1
91821: PPUSH
91822: CALL_OW 302
91826: NOT
91827: IFFALSE 91840
// begin HackUnlinkAll ( i ) ;
91829: LD_VAR 0 1
91833: PPUSH
91834: CALL 91946 0 1
// continue ;
91838: GO 91746
// end ; HackCheckCapturedStatus ( i ) ;
91840: LD_VAR 0 1
91844: PPUSH
91845: CALL 92364 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
91849: LD_ADDR_VAR 0 2
91853: PUSH
91854: LD_INT 81
91856: PUSH
91857: LD_VAR 0 1
91861: PPUSH
91862: CALL_OW 255
91866: PUSH
91867: EMPTY
91868: LIST
91869: LIST
91870: PUSH
91871: LD_INT 33
91873: PUSH
91874: LD_INT 3
91876: PUSH
91877: EMPTY
91878: LIST
91879: LIST
91880: PUSH
91881: LD_INT 91
91883: PUSH
91884: LD_VAR 0 1
91888: PUSH
91889: LD_EXP 165
91893: PUSH
91894: EMPTY
91895: LIST
91896: LIST
91897: LIST
91898: PUSH
91899: LD_INT 50
91901: PUSH
91902: EMPTY
91903: LIST
91904: PUSH
91905: EMPTY
91906: LIST
91907: LIST
91908: LIST
91909: LIST
91910: PPUSH
91911: CALL_OW 69
91915: ST_TO_ADDR
// if not tmp then
91916: LD_VAR 0 2
91920: NOT
91921: IFFALSE 91925
// continue ;
91923: GO 91746
// HackLink ( i , tmp ) ;
91925: LD_VAR 0 1
91929: PPUSH
91930: LD_VAR 0 2
91934: PPUSH
91935: CALL 92082 0 2
// end ;
91939: GO 91746
91941: POP
91942: POP
// end ;
91943: PPOPN 2
91945: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
91946: LD_INT 0
91948: PPUSH
91949: PPUSH
91950: PPUSH
// if not hack in hackTanks then
91951: LD_VAR 0 1
91955: PUSH
91956: LD_EXP 162
91960: IN
91961: NOT
91962: IFFALSE 91966
// exit ;
91964: GO 92077
// index := GetElementIndex ( hackTanks , hack ) ;
91966: LD_ADDR_VAR 0 4
91970: PUSH
91971: LD_EXP 162
91975: PPUSH
91976: LD_VAR 0 1
91980: PPUSH
91981: CALL 18197 0 2
91985: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
91986: LD_EXP 163
91990: PUSH
91991: LD_VAR 0 4
91995: ARRAY
91996: IFFALSE 92077
// begin for i in hackTanksCaptured [ index ] do
91998: LD_ADDR_VAR 0 3
92002: PUSH
92003: LD_EXP 163
92007: PUSH
92008: LD_VAR 0 4
92012: ARRAY
92013: PUSH
92014: FOR_IN
92015: IFFALSE 92041
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92017: LD_VAR 0 3
92021: PUSH
92022: LD_INT 1
92024: ARRAY
92025: PPUSH
92026: LD_VAR 0 3
92030: PUSH
92031: LD_INT 2
92033: ARRAY
92034: PPUSH
92035: CALL_OW 235
92039: GO 92014
92041: POP
92042: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92043: LD_ADDR_EXP 163
92047: PUSH
92048: LD_EXP 163
92052: PPUSH
92053: LD_VAR 0 4
92057: PPUSH
92058: EMPTY
92059: PPUSH
92060: CALL_OW 1
92064: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92065: LD_VAR 0 1
92069: PPUSH
92070: LD_INT 0
92072: PPUSH
92073: CALL_OW 505
// end ; end ;
92077: LD_VAR 0 2
92081: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92082: LD_INT 0
92084: PPUSH
92085: PPUSH
92086: PPUSH
// if not hack in hackTanks or not vehicles then
92087: LD_VAR 0 1
92091: PUSH
92092: LD_EXP 162
92096: IN
92097: NOT
92098: PUSH
92099: LD_VAR 0 2
92103: NOT
92104: OR
92105: IFFALSE 92109
// exit ;
92107: GO 92359
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92109: LD_ADDR_VAR 0 2
92113: PUSH
92114: LD_VAR 0 1
92118: PPUSH
92119: LD_VAR 0 2
92123: PPUSH
92124: LD_INT 1
92126: PPUSH
92127: LD_INT 1
92129: PPUSH
92130: CALL 18847 0 4
92134: ST_TO_ADDR
// display_strings := vehicles ;
92135: LD_ADDR_OWVAR 47
92139: PUSH
92140: LD_VAR 0 2
92144: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92145: LD_ADDR_VAR 0 5
92149: PUSH
92150: LD_EXP 162
92154: PPUSH
92155: LD_VAR 0 1
92159: PPUSH
92160: CALL 18197 0 2
92164: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92165: LD_EXP 163
92169: PUSH
92170: LD_VAR 0 5
92174: ARRAY
92175: PUSH
92176: LD_EXP 164
92180: LESS
92181: IFFALSE 92335
// begin for i := 1 to vehicles do
92183: LD_ADDR_VAR 0 4
92187: PUSH
92188: DOUBLE
92189: LD_INT 1
92191: DEC
92192: ST_TO_ADDR
92193: LD_VAR 0 2
92197: PUSH
92198: FOR_TO
92199: IFFALSE 92333
// begin if hackTanksCaptured [ index ] = hackLimit then
92201: LD_EXP 163
92205: PUSH
92206: LD_VAR 0 5
92210: ARRAY
92211: PUSH
92212: LD_EXP 164
92216: EQUAL
92217: IFFALSE 92221
// break ;
92219: GO 92333
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92221: LD_ADDR_EXP 163
92225: PUSH
92226: LD_EXP 163
92230: PPUSH
92231: LD_VAR 0 5
92235: PUSH
92236: LD_EXP 163
92240: PUSH
92241: LD_VAR 0 5
92245: ARRAY
92246: PUSH
92247: LD_INT 1
92249: PLUS
92250: PUSH
92251: EMPTY
92252: LIST
92253: LIST
92254: PPUSH
92255: LD_VAR 0 2
92259: PUSH
92260: LD_VAR 0 4
92264: ARRAY
92265: PUSH
92266: LD_VAR 0 2
92270: PUSH
92271: LD_VAR 0 4
92275: ARRAY
92276: PPUSH
92277: CALL_OW 255
92281: PUSH
92282: EMPTY
92283: LIST
92284: LIST
92285: PPUSH
92286: CALL 18412 0 3
92290: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92291: LD_VAR 0 2
92295: PUSH
92296: LD_VAR 0 4
92300: ARRAY
92301: PPUSH
92302: LD_VAR 0 1
92306: PPUSH
92307: CALL_OW 255
92311: PPUSH
92312: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92316: LD_VAR 0 2
92320: PUSH
92321: LD_VAR 0 4
92325: ARRAY
92326: PPUSH
92327: CALL_OW 141
// end ;
92331: GO 92198
92333: POP
92334: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92335: LD_VAR 0 1
92339: PPUSH
92340: LD_EXP 163
92344: PUSH
92345: LD_VAR 0 5
92349: ARRAY
92350: PUSH
92351: LD_INT 0
92353: PLUS
92354: PPUSH
92355: CALL_OW 505
// end ;
92359: LD_VAR 0 3
92363: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92364: LD_INT 0
92366: PPUSH
92367: PPUSH
92368: PPUSH
92369: PPUSH
// if not hack in hackTanks then
92370: LD_VAR 0 1
92374: PUSH
92375: LD_EXP 162
92379: IN
92380: NOT
92381: IFFALSE 92385
// exit ;
92383: GO 92625
// index := GetElementIndex ( hackTanks , hack ) ;
92385: LD_ADDR_VAR 0 4
92389: PUSH
92390: LD_EXP 162
92394: PPUSH
92395: LD_VAR 0 1
92399: PPUSH
92400: CALL 18197 0 2
92404: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92405: LD_ADDR_VAR 0 3
92409: PUSH
92410: DOUBLE
92411: LD_EXP 163
92415: PUSH
92416: LD_VAR 0 4
92420: ARRAY
92421: INC
92422: ST_TO_ADDR
92423: LD_INT 1
92425: PUSH
92426: FOR_DOWNTO
92427: IFFALSE 92599
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92429: LD_ADDR_VAR 0 5
92433: PUSH
92434: LD_EXP 163
92438: PUSH
92439: LD_VAR 0 4
92443: ARRAY
92444: PUSH
92445: LD_VAR 0 3
92449: ARRAY
92450: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92451: LD_VAR 0 5
92455: PUSH
92456: LD_INT 1
92458: ARRAY
92459: PPUSH
92460: CALL_OW 302
92464: NOT
92465: PUSH
92466: LD_VAR 0 5
92470: PUSH
92471: LD_INT 1
92473: ARRAY
92474: PPUSH
92475: CALL_OW 255
92479: PUSH
92480: LD_VAR 0 1
92484: PPUSH
92485: CALL_OW 255
92489: NONEQUAL
92490: OR
92491: IFFALSE 92597
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92493: LD_VAR 0 5
92497: PUSH
92498: LD_INT 1
92500: ARRAY
92501: PPUSH
92502: CALL_OW 305
92506: PUSH
92507: LD_VAR 0 5
92511: PUSH
92512: LD_INT 1
92514: ARRAY
92515: PPUSH
92516: CALL_OW 255
92520: PUSH
92521: LD_VAR 0 1
92525: PPUSH
92526: CALL_OW 255
92530: EQUAL
92531: AND
92532: IFFALSE 92556
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92534: LD_VAR 0 5
92538: PUSH
92539: LD_INT 1
92541: ARRAY
92542: PPUSH
92543: LD_VAR 0 5
92547: PUSH
92548: LD_INT 2
92550: ARRAY
92551: PPUSH
92552: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92556: LD_ADDR_EXP 163
92560: PUSH
92561: LD_EXP 163
92565: PPUSH
92566: LD_VAR 0 4
92570: PPUSH
92571: LD_EXP 163
92575: PUSH
92576: LD_VAR 0 4
92580: ARRAY
92581: PPUSH
92582: LD_VAR 0 3
92586: PPUSH
92587: CALL_OW 3
92591: PPUSH
92592: CALL_OW 1
92596: ST_TO_ADDR
// end ; end ;
92597: GO 92426
92599: POP
92600: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92601: LD_VAR 0 1
92605: PPUSH
92606: LD_EXP 163
92610: PUSH
92611: LD_VAR 0 4
92615: ARRAY
92616: PUSH
92617: LD_INT 0
92619: PLUS
92620: PPUSH
92621: CALL_OW 505
// end ; end_of_file
92625: LD_VAR 0 2
92629: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
92630: LD_INT 0
92632: PPUSH
92633: PPUSH
92634: PPUSH
92635: PPUSH
92636: PPUSH
92637: PPUSH
92638: PPUSH
92639: PPUSH
92640: PPUSH
92641: PPUSH
92642: PPUSH
92643: PPUSH
92644: PPUSH
92645: PPUSH
92646: PPUSH
92647: PPUSH
92648: PPUSH
92649: PPUSH
92650: PPUSH
92651: PPUSH
92652: PPUSH
92653: PPUSH
92654: PPUSH
92655: PPUSH
92656: PPUSH
92657: PPUSH
92658: PPUSH
92659: PPUSH
92660: PPUSH
92661: PPUSH
92662: PPUSH
92663: PPUSH
92664: PPUSH
92665: PPUSH
// if not list then
92666: LD_VAR 0 1
92670: NOT
92671: IFFALSE 92675
// exit ;
92673: GO 97334
// base := list [ 1 ] ;
92675: LD_ADDR_VAR 0 3
92679: PUSH
92680: LD_VAR 0 1
92684: PUSH
92685: LD_INT 1
92687: ARRAY
92688: ST_TO_ADDR
// group := list [ 2 ] ;
92689: LD_ADDR_VAR 0 4
92693: PUSH
92694: LD_VAR 0 1
92698: PUSH
92699: LD_INT 2
92701: ARRAY
92702: ST_TO_ADDR
// path := list [ 3 ] ;
92703: LD_ADDR_VAR 0 5
92707: PUSH
92708: LD_VAR 0 1
92712: PUSH
92713: LD_INT 3
92715: ARRAY
92716: ST_TO_ADDR
// flags := list [ 4 ] ;
92717: LD_ADDR_VAR 0 6
92721: PUSH
92722: LD_VAR 0 1
92726: PUSH
92727: LD_INT 4
92729: ARRAY
92730: ST_TO_ADDR
// mined := [ ] ;
92731: LD_ADDR_VAR 0 27
92735: PUSH
92736: EMPTY
92737: ST_TO_ADDR
// bombed := [ ] ;
92738: LD_ADDR_VAR 0 28
92742: PUSH
92743: EMPTY
92744: ST_TO_ADDR
// healers := [ ] ;
92745: LD_ADDR_VAR 0 31
92749: PUSH
92750: EMPTY
92751: ST_TO_ADDR
// to_heal := [ ] ;
92752: LD_ADDR_VAR 0 30
92756: PUSH
92757: EMPTY
92758: ST_TO_ADDR
// repairs := [ ] ;
92759: LD_ADDR_VAR 0 33
92763: PUSH
92764: EMPTY
92765: ST_TO_ADDR
// to_repair := [ ] ;
92766: LD_ADDR_VAR 0 32
92770: PUSH
92771: EMPTY
92772: ST_TO_ADDR
// if not group or not path then
92773: LD_VAR 0 4
92777: NOT
92778: PUSH
92779: LD_VAR 0 5
92783: NOT
92784: OR
92785: IFFALSE 92789
// exit ;
92787: GO 97334
// side := GetSide ( group [ 1 ] ) ;
92789: LD_ADDR_VAR 0 35
92793: PUSH
92794: LD_VAR 0 4
92798: PUSH
92799: LD_INT 1
92801: ARRAY
92802: PPUSH
92803: CALL_OW 255
92807: ST_TO_ADDR
// if flags then
92808: LD_VAR 0 6
92812: IFFALSE 92956
// begin f_ignore_area := flags [ 1 ] ;
92814: LD_ADDR_VAR 0 17
92818: PUSH
92819: LD_VAR 0 6
92823: PUSH
92824: LD_INT 1
92826: ARRAY
92827: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
92828: LD_ADDR_VAR 0 18
92832: PUSH
92833: LD_VAR 0 6
92837: PUSH
92838: LD_INT 2
92840: ARRAY
92841: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
92842: LD_ADDR_VAR 0 19
92846: PUSH
92847: LD_VAR 0 6
92851: PUSH
92852: LD_INT 3
92854: ARRAY
92855: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
92856: LD_ADDR_VAR 0 20
92860: PUSH
92861: LD_VAR 0 6
92865: PUSH
92866: LD_INT 4
92868: ARRAY
92869: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
92870: LD_ADDR_VAR 0 21
92874: PUSH
92875: LD_VAR 0 6
92879: PUSH
92880: LD_INT 5
92882: ARRAY
92883: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
92884: LD_ADDR_VAR 0 22
92888: PUSH
92889: LD_VAR 0 6
92893: PUSH
92894: LD_INT 6
92896: ARRAY
92897: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
92898: LD_ADDR_VAR 0 23
92902: PUSH
92903: LD_VAR 0 6
92907: PUSH
92908: LD_INT 7
92910: ARRAY
92911: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
92912: LD_ADDR_VAR 0 24
92916: PUSH
92917: LD_VAR 0 6
92921: PUSH
92922: LD_INT 8
92924: ARRAY
92925: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
92926: LD_ADDR_VAR 0 25
92930: PUSH
92931: LD_VAR 0 6
92935: PUSH
92936: LD_INT 9
92938: ARRAY
92939: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
92940: LD_ADDR_VAR 0 26
92944: PUSH
92945: LD_VAR 0 6
92949: PUSH
92950: LD_INT 10
92952: ARRAY
92953: ST_TO_ADDR
// end else
92954: GO 93036
// begin f_ignore_area := false ;
92956: LD_ADDR_VAR 0 17
92960: PUSH
92961: LD_INT 0
92963: ST_TO_ADDR
// f_capture := false ;
92964: LD_ADDR_VAR 0 18
92968: PUSH
92969: LD_INT 0
92971: ST_TO_ADDR
// f_ignore_civ := false ;
92972: LD_ADDR_VAR 0 19
92976: PUSH
92977: LD_INT 0
92979: ST_TO_ADDR
// f_murder := false ;
92980: LD_ADDR_VAR 0 20
92984: PUSH
92985: LD_INT 0
92987: ST_TO_ADDR
// f_mines := false ;
92988: LD_ADDR_VAR 0 21
92992: PUSH
92993: LD_INT 0
92995: ST_TO_ADDR
// f_repair := false ;
92996: LD_ADDR_VAR 0 22
93000: PUSH
93001: LD_INT 0
93003: ST_TO_ADDR
// f_heal := false ;
93004: LD_ADDR_VAR 0 23
93008: PUSH
93009: LD_INT 0
93011: ST_TO_ADDR
// f_spacetime := false ;
93012: LD_ADDR_VAR 0 24
93016: PUSH
93017: LD_INT 0
93019: ST_TO_ADDR
// f_attack_depot := false ;
93020: LD_ADDR_VAR 0 25
93024: PUSH
93025: LD_INT 0
93027: ST_TO_ADDR
// f_crawl := false ;
93028: LD_ADDR_VAR 0 26
93032: PUSH
93033: LD_INT 0
93035: ST_TO_ADDR
// end ; if f_heal then
93036: LD_VAR 0 23
93040: IFFALSE 93067
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
93042: LD_ADDR_VAR 0 31
93046: PUSH
93047: LD_VAR 0 4
93051: PPUSH
93052: LD_INT 25
93054: PUSH
93055: LD_INT 4
93057: PUSH
93058: EMPTY
93059: LIST
93060: LIST
93061: PPUSH
93062: CALL_OW 72
93066: ST_TO_ADDR
// if f_repair then
93067: LD_VAR 0 22
93071: IFFALSE 93098
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
93073: LD_ADDR_VAR 0 33
93077: PUSH
93078: LD_VAR 0 4
93082: PPUSH
93083: LD_INT 25
93085: PUSH
93086: LD_INT 3
93088: PUSH
93089: EMPTY
93090: LIST
93091: LIST
93092: PPUSH
93093: CALL_OW 72
93097: ST_TO_ADDR
// units_path := [ ] ;
93098: LD_ADDR_VAR 0 16
93102: PUSH
93103: EMPTY
93104: ST_TO_ADDR
// for i = 1 to group do
93105: LD_ADDR_VAR 0 7
93109: PUSH
93110: DOUBLE
93111: LD_INT 1
93113: DEC
93114: ST_TO_ADDR
93115: LD_VAR 0 4
93119: PUSH
93120: FOR_TO
93121: IFFALSE 93150
// units_path := Replace ( units_path , i , path ) ;
93123: LD_ADDR_VAR 0 16
93127: PUSH
93128: LD_VAR 0 16
93132: PPUSH
93133: LD_VAR 0 7
93137: PPUSH
93138: LD_VAR 0 5
93142: PPUSH
93143: CALL_OW 1
93147: ST_TO_ADDR
93148: GO 93120
93150: POP
93151: POP
// repeat for i = group downto 1 do
93152: LD_ADDR_VAR 0 7
93156: PUSH
93157: DOUBLE
93158: LD_VAR 0 4
93162: INC
93163: ST_TO_ADDR
93164: LD_INT 1
93166: PUSH
93167: FOR_DOWNTO
93168: IFFALSE 97290
// begin wait ( 5 ) ;
93170: LD_INT 5
93172: PPUSH
93173: CALL_OW 67
// tmp := [ ] ;
93177: LD_ADDR_VAR 0 14
93181: PUSH
93182: EMPTY
93183: ST_TO_ADDR
// attacking := false ;
93184: LD_ADDR_VAR 0 29
93188: PUSH
93189: LD_INT 0
93191: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
93192: LD_VAR 0 4
93196: PUSH
93197: LD_VAR 0 7
93201: ARRAY
93202: PPUSH
93203: CALL_OW 301
93207: PUSH
93208: LD_VAR 0 4
93212: PUSH
93213: LD_VAR 0 7
93217: ARRAY
93218: NOT
93219: OR
93220: IFFALSE 93329
// begin if GetType ( group [ i ] ) = unit_human then
93222: LD_VAR 0 4
93226: PUSH
93227: LD_VAR 0 7
93231: ARRAY
93232: PPUSH
93233: CALL_OW 247
93237: PUSH
93238: LD_INT 1
93240: EQUAL
93241: IFFALSE 93287
// begin to_heal := to_heal diff group [ i ] ;
93243: LD_ADDR_VAR 0 30
93247: PUSH
93248: LD_VAR 0 30
93252: PUSH
93253: LD_VAR 0 4
93257: PUSH
93258: LD_VAR 0 7
93262: ARRAY
93263: DIFF
93264: ST_TO_ADDR
// healers := healers diff group [ i ] ;
93265: LD_ADDR_VAR 0 31
93269: PUSH
93270: LD_VAR 0 31
93274: PUSH
93275: LD_VAR 0 4
93279: PUSH
93280: LD_VAR 0 7
93284: ARRAY
93285: DIFF
93286: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
93287: LD_ADDR_VAR 0 4
93291: PUSH
93292: LD_VAR 0 4
93296: PPUSH
93297: LD_VAR 0 7
93301: PPUSH
93302: CALL_OW 3
93306: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
93307: LD_ADDR_VAR 0 16
93311: PUSH
93312: LD_VAR 0 16
93316: PPUSH
93317: LD_VAR 0 7
93321: PPUSH
93322: CALL_OW 3
93326: ST_TO_ADDR
// continue ;
93327: GO 93167
// end ; if f_repair then
93329: LD_VAR 0 22
93333: IFFALSE 93822
// begin if GetType ( group [ i ] ) = unit_vehicle then
93335: LD_VAR 0 4
93339: PUSH
93340: LD_VAR 0 7
93344: ARRAY
93345: PPUSH
93346: CALL_OW 247
93350: PUSH
93351: LD_INT 2
93353: EQUAL
93354: IFFALSE 93544
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
93356: LD_VAR 0 4
93360: PUSH
93361: LD_VAR 0 7
93365: ARRAY
93366: PPUSH
93367: CALL_OW 256
93371: PUSH
93372: LD_INT 700
93374: LESS
93375: PUSH
93376: LD_VAR 0 4
93380: PUSH
93381: LD_VAR 0 7
93385: ARRAY
93386: PUSH
93387: LD_VAR 0 32
93391: IN
93392: NOT
93393: AND
93394: IFFALSE 93418
// to_repair := to_repair union group [ i ] ;
93396: LD_ADDR_VAR 0 32
93400: PUSH
93401: LD_VAR 0 32
93405: PUSH
93406: LD_VAR 0 4
93410: PUSH
93411: LD_VAR 0 7
93415: ARRAY
93416: UNION
93417: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
93418: LD_VAR 0 4
93422: PUSH
93423: LD_VAR 0 7
93427: ARRAY
93428: PPUSH
93429: CALL_OW 256
93433: PUSH
93434: LD_INT 1000
93436: EQUAL
93437: PUSH
93438: LD_VAR 0 4
93442: PUSH
93443: LD_VAR 0 7
93447: ARRAY
93448: PUSH
93449: LD_VAR 0 32
93453: IN
93454: AND
93455: IFFALSE 93479
// to_repair := to_repair diff group [ i ] ;
93457: LD_ADDR_VAR 0 32
93461: PUSH
93462: LD_VAR 0 32
93466: PUSH
93467: LD_VAR 0 4
93471: PUSH
93472: LD_VAR 0 7
93476: ARRAY
93477: DIFF
93478: ST_TO_ADDR
// if group [ i ] in to_repair then
93479: LD_VAR 0 4
93483: PUSH
93484: LD_VAR 0 7
93488: ARRAY
93489: PUSH
93490: LD_VAR 0 32
93494: IN
93495: IFFALSE 93542
// begin if not IsInArea ( group [ i ] , f_repair ) then
93497: LD_VAR 0 4
93501: PUSH
93502: LD_VAR 0 7
93506: ARRAY
93507: PPUSH
93508: LD_VAR 0 22
93512: PPUSH
93513: CALL_OW 308
93517: NOT
93518: IFFALSE 93540
// ComMoveToArea ( group [ i ] , f_repair ) ;
93520: LD_VAR 0 4
93524: PUSH
93525: LD_VAR 0 7
93529: ARRAY
93530: PPUSH
93531: LD_VAR 0 22
93535: PPUSH
93536: CALL_OW 113
// continue ;
93540: GO 93167
// end ; end else
93542: GO 93822
// if group [ i ] in repairs then
93544: LD_VAR 0 4
93548: PUSH
93549: LD_VAR 0 7
93553: ARRAY
93554: PUSH
93555: LD_VAR 0 33
93559: IN
93560: IFFALSE 93822
// begin if IsInUnit ( group [ i ] ) then
93562: LD_VAR 0 4
93566: PUSH
93567: LD_VAR 0 7
93571: ARRAY
93572: PPUSH
93573: CALL_OW 310
93577: IFFALSE 93645
// begin z := IsInUnit ( group [ i ] ) ;
93579: LD_ADDR_VAR 0 13
93583: PUSH
93584: LD_VAR 0 4
93588: PUSH
93589: LD_VAR 0 7
93593: ARRAY
93594: PPUSH
93595: CALL_OW 310
93599: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
93600: LD_VAR 0 13
93604: PUSH
93605: LD_VAR 0 32
93609: IN
93610: PUSH
93611: LD_VAR 0 13
93615: PPUSH
93616: LD_VAR 0 22
93620: PPUSH
93621: CALL_OW 308
93625: AND
93626: IFFALSE 93643
// ComExitVehicle ( group [ i ] ) ;
93628: LD_VAR 0 4
93632: PUSH
93633: LD_VAR 0 7
93637: ARRAY
93638: PPUSH
93639: CALL_OW 121
// end else
93643: GO 93822
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
93645: LD_ADDR_VAR 0 13
93649: PUSH
93650: LD_VAR 0 4
93654: PPUSH
93655: LD_INT 95
93657: PUSH
93658: LD_VAR 0 22
93662: PUSH
93663: EMPTY
93664: LIST
93665: LIST
93666: PUSH
93667: LD_INT 58
93669: PUSH
93670: EMPTY
93671: LIST
93672: PUSH
93673: EMPTY
93674: LIST
93675: LIST
93676: PPUSH
93677: CALL_OW 72
93681: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
93682: LD_VAR 0 4
93686: PUSH
93687: LD_VAR 0 7
93691: ARRAY
93692: PPUSH
93693: CALL_OW 314
93697: NOT
93698: IFFALSE 93820
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
93700: LD_ADDR_VAR 0 10
93704: PUSH
93705: LD_VAR 0 13
93709: PPUSH
93710: LD_VAR 0 4
93714: PUSH
93715: LD_VAR 0 7
93719: ARRAY
93720: PPUSH
93721: CALL_OW 74
93725: ST_TO_ADDR
// if not x then
93726: LD_VAR 0 10
93730: NOT
93731: IFFALSE 93735
// continue ;
93733: GO 93167
// if GetLives ( x ) < 1000 then
93735: LD_VAR 0 10
93739: PPUSH
93740: CALL_OW 256
93744: PUSH
93745: LD_INT 1000
93747: LESS
93748: IFFALSE 93772
// ComRepairVehicle ( group [ i ] , x ) else
93750: LD_VAR 0 4
93754: PUSH
93755: LD_VAR 0 7
93759: ARRAY
93760: PPUSH
93761: LD_VAR 0 10
93765: PPUSH
93766: CALL_OW 129
93770: GO 93820
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
93772: LD_VAR 0 23
93776: PUSH
93777: LD_VAR 0 4
93781: PUSH
93782: LD_VAR 0 7
93786: ARRAY
93787: PPUSH
93788: CALL_OW 256
93792: PUSH
93793: LD_INT 1000
93795: LESS
93796: AND
93797: NOT
93798: IFFALSE 93820
// ComEnterUnit ( group [ i ] , x ) ;
93800: LD_VAR 0 4
93804: PUSH
93805: LD_VAR 0 7
93809: ARRAY
93810: PPUSH
93811: LD_VAR 0 10
93815: PPUSH
93816: CALL_OW 120
// end ; continue ;
93820: GO 93167
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
93822: LD_VAR 0 23
93826: PUSH
93827: LD_VAR 0 4
93831: PUSH
93832: LD_VAR 0 7
93836: ARRAY
93837: PPUSH
93838: CALL_OW 247
93842: PUSH
93843: LD_INT 1
93845: EQUAL
93846: AND
93847: IFFALSE 94325
// begin if group [ i ] in healers then
93849: LD_VAR 0 4
93853: PUSH
93854: LD_VAR 0 7
93858: ARRAY
93859: PUSH
93860: LD_VAR 0 31
93864: IN
93865: IFFALSE 94138
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
93867: LD_VAR 0 4
93871: PUSH
93872: LD_VAR 0 7
93876: ARRAY
93877: PPUSH
93878: LD_VAR 0 23
93882: PPUSH
93883: CALL_OW 308
93887: NOT
93888: PUSH
93889: LD_VAR 0 4
93893: PUSH
93894: LD_VAR 0 7
93898: ARRAY
93899: PPUSH
93900: CALL_OW 314
93904: NOT
93905: AND
93906: IFFALSE 93930
// ComMoveToArea ( group [ i ] , f_heal ) else
93908: LD_VAR 0 4
93912: PUSH
93913: LD_VAR 0 7
93917: ARRAY
93918: PPUSH
93919: LD_VAR 0 23
93923: PPUSH
93924: CALL_OW 113
93928: GO 94136
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
93930: LD_VAR 0 4
93934: PUSH
93935: LD_VAR 0 7
93939: ARRAY
93940: PPUSH
93941: CALL 46784 0 1
93945: PPUSH
93946: CALL_OW 256
93950: PUSH
93951: LD_INT 1000
93953: EQUAL
93954: IFFALSE 93973
// ComStop ( group [ i ] ) else
93956: LD_VAR 0 4
93960: PUSH
93961: LD_VAR 0 7
93965: ARRAY
93966: PPUSH
93967: CALL_OW 141
93971: GO 94136
// if not HasTask ( group [ i ] ) and to_heal then
93973: LD_VAR 0 4
93977: PUSH
93978: LD_VAR 0 7
93982: ARRAY
93983: PPUSH
93984: CALL_OW 314
93988: NOT
93989: PUSH
93990: LD_VAR 0 30
93994: AND
93995: IFFALSE 94136
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
93997: LD_ADDR_VAR 0 13
94001: PUSH
94002: LD_VAR 0 30
94006: PPUSH
94007: LD_INT 3
94009: PUSH
94010: LD_INT 54
94012: PUSH
94013: EMPTY
94014: LIST
94015: PUSH
94016: EMPTY
94017: LIST
94018: LIST
94019: PPUSH
94020: CALL_OW 72
94024: PPUSH
94025: LD_VAR 0 4
94029: PUSH
94030: LD_VAR 0 7
94034: ARRAY
94035: PPUSH
94036: CALL_OW 74
94040: ST_TO_ADDR
// if z then
94041: LD_VAR 0 13
94045: IFFALSE 94136
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
94047: LD_INT 91
94049: PUSH
94050: LD_VAR 0 13
94054: PUSH
94055: LD_INT 10
94057: PUSH
94058: EMPTY
94059: LIST
94060: LIST
94061: LIST
94062: PUSH
94063: LD_INT 81
94065: PUSH
94066: LD_VAR 0 13
94070: PPUSH
94071: CALL_OW 255
94075: PUSH
94076: EMPTY
94077: LIST
94078: LIST
94079: PUSH
94080: EMPTY
94081: LIST
94082: LIST
94083: PPUSH
94084: CALL_OW 69
94088: PUSH
94089: LD_INT 0
94091: EQUAL
94092: IFFALSE 94116
// ComHeal ( group [ i ] , z ) else
94094: LD_VAR 0 4
94098: PUSH
94099: LD_VAR 0 7
94103: ARRAY
94104: PPUSH
94105: LD_VAR 0 13
94109: PPUSH
94110: CALL_OW 128
94114: GO 94136
// ComMoveToArea ( group [ i ] , f_heal ) ;
94116: LD_VAR 0 4
94120: PUSH
94121: LD_VAR 0 7
94125: ARRAY
94126: PPUSH
94127: LD_VAR 0 23
94131: PPUSH
94132: CALL_OW 113
// end ; continue ;
94136: GO 93167
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
94138: LD_VAR 0 4
94142: PUSH
94143: LD_VAR 0 7
94147: ARRAY
94148: PPUSH
94149: CALL_OW 256
94153: PUSH
94154: LD_INT 700
94156: LESS
94157: PUSH
94158: LD_VAR 0 4
94162: PUSH
94163: LD_VAR 0 7
94167: ARRAY
94168: PUSH
94169: LD_VAR 0 30
94173: IN
94174: NOT
94175: AND
94176: IFFALSE 94200
// to_heal := to_heal union group [ i ] ;
94178: LD_ADDR_VAR 0 30
94182: PUSH
94183: LD_VAR 0 30
94187: PUSH
94188: LD_VAR 0 4
94192: PUSH
94193: LD_VAR 0 7
94197: ARRAY
94198: UNION
94199: ST_TO_ADDR
// if group [ i ] in to_heal then
94200: LD_VAR 0 4
94204: PUSH
94205: LD_VAR 0 7
94209: ARRAY
94210: PUSH
94211: LD_VAR 0 30
94215: IN
94216: IFFALSE 94325
// begin if GetLives ( group [ i ] ) = 1000 then
94218: LD_VAR 0 4
94222: PUSH
94223: LD_VAR 0 7
94227: ARRAY
94228: PPUSH
94229: CALL_OW 256
94233: PUSH
94234: LD_INT 1000
94236: EQUAL
94237: IFFALSE 94263
// to_heal := to_heal diff group [ i ] else
94239: LD_ADDR_VAR 0 30
94243: PUSH
94244: LD_VAR 0 30
94248: PUSH
94249: LD_VAR 0 4
94253: PUSH
94254: LD_VAR 0 7
94258: ARRAY
94259: DIFF
94260: ST_TO_ADDR
94261: GO 94325
// begin if not IsInArea ( group [ i ] , to_heal ) then
94263: LD_VAR 0 4
94267: PUSH
94268: LD_VAR 0 7
94272: ARRAY
94273: PPUSH
94274: LD_VAR 0 30
94278: PPUSH
94279: CALL_OW 308
94283: NOT
94284: IFFALSE 94308
// ComMoveToArea ( group [ i ] , f_heal ) else
94286: LD_VAR 0 4
94290: PUSH
94291: LD_VAR 0 7
94295: ARRAY
94296: PPUSH
94297: LD_VAR 0 23
94301: PPUSH
94302: CALL_OW 113
94306: GO 94323
// ComHold ( group [ i ] ) ;
94308: LD_VAR 0 4
94312: PUSH
94313: LD_VAR 0 7
94317: ARRAY
94318: PPUSH
94319: CALL_OW 140
// continue ;
94323: GO 93167
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
94325: LD_VAR 0 4
94329: PUSH
94330: LD_VAR 0 7
94334: ARRAY
94335: PPUSH
94336: LD_INT 10
94338: PPUSH
94339: CALL 45204 0 2
94343: NOT
94344: PUSH
94345: LD_VAR 0 16
94349: PUSH
94350: LD_VAR 0 7
94354: ARRAY
94355: PUSH
94356: EMPTY
94357: EQUAL
94358: NOT
94359: AND
94360: IFFALSE 94626
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
94362: LD_VAR 0 4
94366: PUSH
94367: LD_VAR 0 7
94371: ARRAY
94372: PPUSH
94373: CALL_OW 262
94377: PUSH
94378: LD_INT 1
94380: PUSH
94381: LD_INT 2
94383: PUSH
94384: EMPTY
94385: LIST
94386: LIST
94387: IN
94388: IFFALSE 94429
// if GetFuel ( group [ i ] ) < 10 then
94390: LD_VAR 0 4
94394: PUSH
94395: LD_VAR 0 7
94399: ARRAY
94400: PPUSH
94401: CALL_OW 261
94405: PUSH
94406: LD_INT 10
94408: LESS
94409: IFFALSE 94429
// SetFuel ( group [ i ] , 12 ) ;
94411: LD_VAR 0 4
94415: PUSH
94416: LD_VAR 0 7
94420: ARRAY
94421: PPUSH
94422: LD_INT 12
94424: PPUSH
94425: CALL_OW 240
// if units_path [ i ] then
94429: LD_VAR 0 16
94433: PUSH
94434: LD_VAR 0 7
94438: ARRAY
94439: IFFALSE 94624
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
94441: LD_VAR 0 4
94445: PUSH
94446: LD_VAR 0 7
94450: ARRAY
94451: PPUSH
94452: LD_VAR 0 16
94456: PUSH
94457: LD_VAR 0 7
94461: ARRAY
94462: PUSH
94463: LD_INT 1
94465: ARRAY
94466: PUSH
94467: LD_INT 1
94469: ARRAY
94470: PPUSH
94471: LD_VAR 0 16
94475: PUSH
94476: LD_VAR 0 7
94480: ARRAY
94481: PUSH
94482: LD_INT 1
94484: ARRAY
94485: PUSH
94486: LD_INT 2
94488: ARRAY
94489: PPUSH
94490: CALL_OW 297
94494: PUSH
94495: LD_INT 6
94497: GREATER
94498: IFFALSE 94573
// begin if not HasTask ( group [ i ] ) then
94500: LD_VAR 0 4
94504: PUSH
94505: LD_VAR 0 7
94509: ARRAY
94510: PPUSH
94511: CALL_OW 314
94515: NOT
94516: IFFALSE 94571
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
94518: LD_VAR 0 4
94522: PUSH
94523: LD_VAR 0 7
94527: ARRAY
94528: PPUSH
94529: LD_VAR 0 16
94533: PUSH
94534: LD_VAR 0 7
94538: ARRAY
94539: PUSH
94540: LD_INT 1
94542: ARRAY
94543: PUSH
94544: LD_INT 1
94546: ARRAY
94547: PPUSH
94548: LD_VAR 0 16
94552: PUSH
94553: LD_VAR 0 7
94557: ARRAY
94558: PUSH
94559: LD_INT 1
94561: ARRAY
94562: PUSH
94563: LD_INT 2
94565: ARRAY
94566: PPUSH
94567: CALL_OW 114
// end else
94571: GO 94624
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
94573: LD_ADDR_VAR 0 15
94577: PUSH
94578: LD_VAR 0 16
94582: PUSH
94583: LD_VAR 0 7
94587: ARRAY
94588: PPUSH
94589: LD_INT 1
94591: PPUSH
94592: CALL_OW 3
94596: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
94597: LD_ADDR_VAR 0 16
94601: PUSH
94602: LD_VAR 0 16
94606: PPUSH
94607: LD_VAR 0 7
94611: PPUSH
94612: LD_VAR 0 15
94616: PPUSH
94617: CALL_OW 1
94621: ST_TO_ADDR
// continue ;
94622: GO 93167
// end ; end ; end else
94624: GO 97288
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
94626: LD_ADDR_VAR 0 14
94630: PUSH
94631: LD_INT 81
94633: PUSH
94634: LD_VAR 0 4
94638: PUSH
94639: LD_VAR 0 7
94643: ARRAY
94644: PPUSH
94645: CALL_OW 255
94649: PUSH
94650: EMPTY
94651: LIST
94652: LIST
94653: PPUSH
94654: CALL_OW 69
94658: ST_TO_ADDR
// if not tmp then
94659: LD_VAR 0 14
94663: NOT
94664: IFFALSE 94668
// continue ;
94666: GO 93167
// if f_ignore_area then
94668: LD_VAR 0 17
94672: IFFALSE 94760
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
94674: LD_ADDR_VAR 0 15
94678: PUSH
94679: LD_VAR 0 14
94683: PPUSH
94684: LD_INT 3
94686: PUSH
94687: LD_INT 92
94689: PUSH
94690: LD_VAR 0 17
94694: PUSH
94695: LD_INT 1
94697: ARRAY
94698: PUSH
94699: LD_VAR 0 17
94703: PUSH
94704: LD_INT 2
94706: ARRAY
94707: PUSH
94708: LD_VAR 0 17
94712: PUSH
94713: LD_INT 3
94715: ARRAY
94716: PUSH
94717: EMPTY
94718: LIST
94719: LIST
94720: LIST
94721: LIST
94722: PUSH
94723: EMPTY
94724: LIST
94725: LIST
94726: PPUSH
94727: CALL_OW 72
94731: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
94732: LD_VAR 0 14
94736: PUSH
94737: LD_VAR 0 15
94741: DIFF
94742: IFFALSE 94760
// tmp := tmp diff tmp2 ;
94744: LD_ADDR_VAR 0 14
94748: PUSH
94749: LD_VAR 0 14
94753: PUSH
94754: LD_VAR 0 15
94758: DIFF
94759: ST_TO_ADDR
// end ; if not f_murder then
94760: LD_VAR 0 20
94764: NOT
94765: IFFALSE 94823
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
94767: LD_ADDR_VAR 0 15
94771: PUSH
94772: LD_VAR 0 14
94776: PPUSH
94777: LD_INT 3
94779: PUSH
94780: LD_INT 50
94782: PUSH
94783: EMPTY
94784: LIST
94785: PUSH
94786: EMPTY
94787: LIST
94788: LIST
94789: PPUSH
94790: CALL_OW 72
94794: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
94795: LD_VAR 0 14
94799: PUSH
94800: LD_VAR 0 15
94804: DIFF
94805: IFFALSE 94823
// tmp := tmp diff tmp2 ;
94807: LD_ADDR_VAR 0 14
94811: PUSH
94812: LD_VAR 0 14
94816: PUSH
94817: LD_VAR 0 15
94821: DIFF
94822: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
94823: LD_ADDR_VAR 0 14
94827: PUSH
94828: LD_VAR 0 4
94832: PUSH
94833: LD_VAR 0 7
94837: ARRAY
94838: PPUSH
94839: LD_VAR 0 14
94843: PPUSH
94844: LD_INT 1
94846: PPUSH
94847: LD_INT 1
94849: PPUSH
94850: CALL 18847 0 4
94854: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
94855: LD_VAR 0 4
94859: PUSH
94860: LD_VAR 0 7
94864: ARRAY
94865: PPUSH
94866: CALL_OW 257
94870: PUSH
94871: LD_INT 1
94873: EQUAL
94874: IFFALSE 95322
// begin if WantPlant ( group [ i ] ) then
94876: LD_VAR 0 4
94880: PUSH
94881: LD_VAR 0 7
94885: ARRAY
94886: PPUSH
94887: CALL 18348 0 1
94891: IFFALSE 94895
// continue ;
94893: GO 93167
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
94895: LD_VAR 0 18
94899: PUSH
94900: LD_VAR 0 4
94904: PUSH
94905: LD_VAR 0 7
94909: ARRAY
94910: PPUSH
94911: CALL_OW 310
94915: NOT
94916: AND
94917: PUSH
94918: LD_VAR 0 14
94922: PUSH
94923: LD_INT 1
94925: ARRAY
94926: PUSH
94927: LD_VAR 0 14
94931: PPUSH
94932: LD_INT 21
94934: PUSH
94935: LD_INT 2
94937: PUSH
94938: EMPTY
94939: LIST
94940: LIST
94941: PUSH
94942: LD_INT 58
94944: PUSH
94945: EMPTY
94946: LIST
94947: PUSH
94948: EMPTY
94949: LIST
94950: LIST
94951: PPUSH
94952: CALL_OW 72
94956: IN
94957: AND
94958: IFFALSE 94994
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
94960: LD_VAR 0 4
94964: PUSH
94965: LD_VAR 0 7
94969: ARRAY
94970: PPUSH
94971: LD_VAR 0 14
94975: PUSH
94976: LD_INT 1
94978: ARRAY
94979: PPUSH
94980: CALL_OW 120
// attacking := true ;
94984: LD_ADDR_VAR 0 29
94988: PUSH
94989: LD_INT 1
94991: ST_TO_ADDR
// continue ;
94992: GO 93167
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
94994: LD_VAR 0 26
94998: PUSH
94999: LD_VAR 0 4
95003: PUSH
95004: LD_VAR 0 7
95008: ARRAY
95009: PPUSH
95010: CALL_OW 257
95014: PUSH
95015: LD_INT 1
95017: EQUAL
95018: AND
95019: PUSH
95020: LD_VAR 0 4
95024: PUSH
95025: LD_VAR 0 7
95029: ARRAY
95030: PPUSH
95031: CALL_OW 256
95035: PUSH
95036: LD_INT 800
95038: LESS
95039: AND
95040: PUSH
95041: LD_VAR 0 4
95045: PUSH
95046: LD_VAR 0 7
95050: ARRAY
95051: PPUSH
95052: CALL_OW 318
95056: NOT
95057: AND
95058: IFFALSE 95075
// ComCrawl ( group [ i ] ) ;
95060: LD_VAR 0 4
95064: PUSH
95065: LD_VAR 0 7
95069: ARRAY
95070: PPUSH
95071: CALL_OW 137
// if f_mines then
95075: LD_VAR 0 21
95079: IFFALSE 95322
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
95081: LD_VAR 0 14
95085: PUSH
95086: LD_INT 1
95088: ARRAY
95089: PPUSH
95090: CALL_OW 247
95094: PUSH
95095: LD_INT 3
95097: EQUAL
95098: PUSH
95099: LD_VAR 0 14
95103: PUSH
95104: LD_INT 1
95106: ARRAY
95107: PUSH
95108: LD_VAR 0 27
95112: IN
95113: NOT
95114: AND
95115: IFFALSE 95322
// begin x := GetX ( tmp [ 1 ] ) ;
95117: LD_ADDR_VAR 0 10
95121: PUSH
95122: LD_VAR 0 14
95126: PUSH
95127: LD_INT 1
95129: ARRAY
95130: PPUSH
95131: CALL_OW 250
95135: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
95136: LD_ADDR_VAR 0 11
95140: PUSH
95141: LD_VAR 0 14
95145: PUSH
95146: LD_INT 1
95148: ARRAY
95149: PPUSH
95150: CALL_OW 251
95154: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
95155: LD_ADDR_VAR 0 12
95159: PUSH
95160: LD_VAR 0 4
95164: PUSH
95165: LD_VAR 0 7
95169: ARRAY
95170: PPUSH
95171: CALL 45289 0 1
95175: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
95176: LD_VAR 0 4
95180: PUSH
95181: LD_VAR 0 7
95185: ARRAY
95186: PPUSH
95187: LD_VAR 0 10
95191: PPUSH
95192: LD_VAR 0 11
95196: PPUSH
95197: LD_VAR 0 14
95201: PUSH
95202: LD_INT 1
95204: ARRAY
95205: PPUSH
95206: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
95210: LD_VAR 0 4
95214: PUSH
95215: LD_VAR 0 7
95219: ARRAY
95220: PPUSH
95221: LD_VAR 0 10
95225: PPUSH
95226: LD_VAR 0 12
95230: PPUSH
95231: LD_INT 7
95233: PPUSH
95234: CALL_OW 272
95238: PPUSH
95239: LD_VAR 0 11
95243: PPUSH
95244: LD_VAR 0 12
95248: PPUSH
95249: LD_INT 7
95251: PPUSH
95252: CALL_OW 273
95256: PPUSH
95257: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
95261: LD_VAR 0 4
95265: PUSH
95266: LD_VAR 0 7
95270: ARRAY
95271: PPUSH
95272: LD_INT 71
95274: PPUSH
95275: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
95279: LD_ADDR_VAR 0 27
95283: PUSH
95284: LD_VAR 0 27
95288: PPUSH
95289: LD_VAR 0 27
95293: PUSH
95294: LD_INT 1
95296: PLUS
95297: PPUSH
95298: LD_VAR 0 14
95302: PUSH
95303: LD_INT 1
95305: ARRAY
95306: PPUSH
95307: CALL_OW 1
95311: ST_TO_ADDR
// attacking := true ;
95312: LD_ADDR_VAR 0 29
95316: PUSH
95317: LD_INT 1
95319: ST_TO_ADDR
// continue ;
95320: GO 93167
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
95322: LD_VAR 0 4
95326: PUSH
95327: LD_VAR 0 7
95331: ARRAY
95332: PPUSH
95333: CALL_OW 257
95337: PUSH
95338: LD_INT 17
95340: EQUAL
95341: PUSH
95342: LD_VAR 0 4
95346: PUSH
95347: LD_VAR 0 7
95351: ARRAY
95352: PPUSH
95353: CALL_OW 110
95357: PUSH
95358: LD_INT 71
95360: EQUAL
95361: NOT
95362: AND
95363: IFFALSE 95509
// begin attacking := false ;
95365: LD_ADDR_VAR 0 29
95369: PUSH
95370: LD_INT 0
95372: ST_TO_ADDR
// k := 5 ;
95373: LD_ADDR_VAR 0 9
95377: PUSH
95378: LD_INT 5
95380: ST_TO_ADDR
// if tmp < k then
95381: LD_VAR 0 14
95385: PUSH
95386: LD_VAR 0 9
95390: LESS
95391: IFFALSE 95403
// k := tmp ;
95393: LD_ADDR_VAR 0 9
95397: PUSH
95398: LD_VAR 0 14
95402: ST_TO_ADDR
// for j = 1 to k do
95403: LD_ADDR_VAR 0 8
95407: PUSH
95408: DOUBLE
95409: LD_INT 1
95411: DEC
95412: ST_TO_ADDR
95413: LD_VAR 0 9
95417: PUSH
95418: FOR_TO
95419: IFFALSE 95507
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
95421: LD_VAR 0 14
95425: PUSH
95426: LD_VAR 0 8
95430: ARRAY
95431: PUSH
95432: LD_VAR 0 14
95436: PPUSH
95437: LD_INT 58
95439: PUSH
95440: EMPTY
95441: LIST
95442: PPUSH
95443: CALL_OW 72
95447: IN
95448: NOT
95449: IFFALSE 95505
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95451: LD_VAR 0 4
95455: PUSH
95456: LD_VAR 0 7
95460: ARRAY
95461: PPUSH
95462: LD_VAR 0 14
95466: PUSH
95467: LD_VAR 0 8
95471: ARRAY
95472: PPUSH
95473: CALL_OW 115
// attacking := true ;
95477: LD_ADDR_VAR 0 29
95481: PUSH
95482: LD_INT 1
95484: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
95485: LD_VAR 0 4
95489: PUSH
95490: LD_VAR 0 7
95494: ARRAY
95495: PPUSH
95496: LD_INT 71
95498: PPUSH
95499: CALL_OW 109
// continue ;
95503: GO 95418
// end ; end ;
95505: GO 95418
95507: POP
95508: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
95509: LD_VAR 0 4
95513: PUSH
95514: LD_VAR 0 7
95518: ARRAY
95519: PPUSH
95520: CALL_OW 257
95524: PUSH
95525: LD_INT 8
95527: EQUAL
95528: PUSH
95529: LD_VAR 0 4
95533: PUSH
95534: LD_VAR 0 7
95538: ARRAY
95539: PPUSH
95540: CALL_OW 264
95544: PUSH
95545: LD_INT 28
95547: PUSH
95548: LD_INT 45
95550: PUSH
95551: LD_INT 7
95553: PUSH
95554: LD_INT 47
95556: PUSH
95557: EMPTY
95558: LIST
95559: LIST
95560: LIST
95561: LIST
95562: IN
95563: OR
95564: IFFALSE 95820
// begin attacking := false ;
95566: LD_ADDR_VAR 0 29
95570: PUSH
95571: LD_INT 0
95573: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
95574: LD_VAR 0 14
95578: PUSH
95579: LD_INT 1
95581: ARRAY
95582: PPUSH
95583: CALL_OW 266
95587: PUSH
95588: LD_INT 32
95590: PUSH
95591: LD_INT 31
95593: PUSH
95594: LD_INT 33
95596: PUSH
95597: LD_INT 4
95599: PUSH
95600: LD_INT 5
95602: PUSH
95603: EMPTY
95604: LIST
95605: LIST
95606: LIST
95607: LIST
95608: LIST
95609: IN
95610: IFFALSE 95796
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
95612: LD_ADDR_VAR 0 9
95616: PUSH
95617: LD_VAR 0 14
95621: PUSH
95622: LD_INT 1
95624: ARRAY
95625: PPUSH
95626: CALL_OW 266
95630: PPUSH
95631: LD_VAR 0 14
95635: PUSH
95636: LD_INT 1
95638: ARRAY
95639: PPUSH
95640: CALL_OW 250
95644: PPUSH
95645: LD_VAR 0 14
95649: PUSH
95650: LD_INT 1
95652: ARRAY
95653: PPUSH
95654: CALL_OW 251
95658: PPUSH
95659: LD_VAR 0 14
95663: PUSH
95664: LD_INT 1
95666: ARRAY
95667: PPUSH
95668: CALL_OW 254
95672: PPUSH
95673: LD_VAR 0 14
95677: PUSH
95678: LD_INT 1
95680: ARRAY
95681: PPUSH
95682: CALL_OW 248
95686: PPUSH
95687: LD_INT 0
95689: PPUSH
95690: CALL 26659 0 6
95694: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
95695: LD_ADDR_VAR 0 8
95699: PUSH
95700: LD_VAR 0 4
95704: PUSH
95705: LD_VAR 0 7
95709: ARRAY
95710: PPUSH
95711: LD_VAR 0 9
95715: PPUSH
95716: CALL 45329 0 2
95720: ST_TO_ADDR
// if j then
95721: LD_VAR 0 8
95725: IFFALSE 95794
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
95727: LD_VAR 0 8
95731: PUSH
95732: LD_INT 1
95734: ARRAY
95735: PPUSH
95736: LD_VAR 0 8
95740: PUSH
95741: LD_INT 2
95743: ARRAY
95744: PPUSH
95745: CALL_OW 488
95749: IFFALSE 95794
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
95751: LD_VAR 0 4
95755: PUSH
95756: LD_VAR 0 7
95760: ARRAY
95761: PPUSH
95762: LD_VAR 0 8
95766: PUSH
95767: LD_INT 1
95769: ARRAY
95770: PPUSH
95771: LD_VAR 0 8
95775: PUSH
95776: LD_INT 2
95778: ARRAY
95779: PPUSH
95780: CALL_OW 116
// attacking := true ;
95784: LD_ADDR_VAR 0 29
95788: PUSH
95789: LD_INT 1
95791: ST_TO_ADDR
// continue ;
95792: GO 93167
// end ; end else
95794: GO 95820
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95796: LD_VAR 0 4
95800: PUSH
95801: LD_VAR 0 7
95805: ARRAY
95806: PPUSH
95807: LD_VAR 0 14
95811: PUSH
95812: LD_INT 1
95814: ARRAY
95815: PPUSH
95816: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
95820: LD_VAR 0 4
95824: PUSH
95825: LD_VAR 0 7
95829: ARRAY
95830: PPUSH
95831: CALL_OW 265
95835: PUSH
95836: LD_INT 11
95838: EQUAL
95839: IFFALSE 96117
// begin k := 10 ;
95841: LD_ADDR_VAR 0 9
95845: PUSH
95846: LD_INT 10
95848: ST_TO_ADDR
// x := 0 ;
95849: LD_ADDR_VAR 0 10
95853: PUSH
95854: LD_INT 0
95856: ST_TO_ADDR
// if tmp < k then
95857: LD_VAR 0 14
95861: PUSH
95862: LD_VAR 0 9
95866: LESS
95867: IFFALSE 95879
// k := tmp ;
95869: LD_ADDR_VAR 0 9
95873: PUSH
95874: LD_VAR 0 14
95878: ST_TO_ADDR
// for j = k downto 1 do
95879: LD_ADDR_VAR 0 8
95883: PUSH
95884: DOUBLE
95885: LD_VAR 0 9
95889: INC
95890: ST_TO_ADDR
95891: LD_INT 1
95893: PUSH
95894: FOR_DOWNTO
95895: IFFALSE 95970
// begin if GetType ( tmp [ j ] ) = unit_human then
95897: LD_VAR 0 14
95901: PUSH
95902: LD_VAR 0 8
95906: ARRAY
95907: PPUSH
95908: CALL_OW 247
95912: PUSH
95913: LD_INT 1
95915: EQUAL
95916: IFFALSE 95968
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
95918: LD_VAR 0 4
95922: PUSH
95923: LD_VAR 0 7
95927: ARRAY
95928: PPUSH
95929: LD_VAR 0 14
95933: PUSH
95934: LD_VAR 0 8
95938: ARRAY
95939: PPUSH
95940: CALL 45600 0 2
// x := tmp [ j ] ;
95944: LD_ADDR_VAR 0 10
95948: PUSH
95949: LD_VAR 0 14
95953: PUSH
95954: LD_VAR 0 8
95958: ARRAY
95959: ST_TO_ADDR
// attacking := true ;
95960: LD_ADDR_VAR 0 29
95964: PUSH
95965: LD_INT 1
95967: ST_TO_ADDR
// end ; end ;
95968: GO 95894
95970: POP
95971: POP
// if not x then
95972: LD_VAR 0 10
95976: NOT
95977: IFFALSE 96117
// begin attacking := true ;
95979: LD_ADDR_VAR 0 29
95983: PUSH
95984: LD_INT 1
95986: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
95987: LD_VAR 0 4
95991: PUSH
95992: LD_VAR 0 7
95996: ARRAY
95997: PPUSH
95998: CALL_OW 250
96002: PPUSH
96003: LD_VAR 0 4
96007: PUSH
96008: LD_VAR 0 7
96012: ARRAY
96013: PPUSH
96014: CALL_OW 251
96018: PPUSH
96019: CALL_OW 546
96023: PUSH
96024: LD_INT 2
96026: ARRAY
96027: PUSH
96028: LD_VAR 0 14
96032: PUSH
96033: LD_INT 1
96035: ARRAY
96036: PPUSH
96037: CALL_OW 250
96041: PPUSH
96042: LD_VAR 0 14
96046: PUSH
96047: LD_INT 1
96049: ARRAY
96050: PPUSH
96051: CALL_OW 251
96055: PPUSH
96056: CALL_OW 546
96060: PUSH
96061: LD_INT 2
96063: ARRAY
96064: EQUAL
96065: IFFALSE 96093
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
96067: LD_VAR 0 4
96071: PUSH
96072: LD_VAR 0 7
96076: ARRAY
96077: PPUSH
96078: LD_VAR 0 14
96082: PUSH
96083: LD_INT 1
96085: ARRAY
96086: PPUSH
96087: CALL 45600 0 2
96091: GO 96117
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96093: LD_VAR 0 4
96097: PUSH
96098: LD_VAR 0 7
96102: ARRAY
96103: PPUSH
96104: LD_VAR 0 14
96108: PUSH
96109: LD_INT 1
96111: ARRAY
96112: PPUSH
96113: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
96117: LD_VAR 0 4
96121: PUSH
96122: LD_VAR 0 7
96126: ARRAY
96127: PPUSH
96128: CALL_OW 264
96132: PUSH
96133: LD_INT 29
96135: EQUAL
96136: IFFALSE 96502
// begin if WantsToAttack ( group [ i ] ) in bombed then
96138: LD_VAR 0 4
96142: PUSH
96143: LD_VAR 0 7
96147: ARRAY
96148: PPUSH
96149: CALL_OW 319
96153: PUSH
96154: LD_VAR 0 28
96158: IN
96159: IFFALSE 96163
// continue ;
96161: GO 93167
// k := 8 ;
96163: LD_ADDR_VAR 0 9
96167: PUSH
96168: LD_INT 8
96170: ST_TO_ADDR
// x := 0 ;
96171: LD_ADDR_VAR 0 10
96175: PUSH
96176: LD_INT 0
96178: ST_TO_ADDR
// if tmp < k then
96179: LD_VAR 0 14
96183: PUSH
96184: LD_VAR 0 9
96188: LESS
96189: IFFALSE 96201
// k := tmp ;
96191: LD_ADDR_VAR 0 9
96195: PUSH
96196: LD_VAR 0 14
96200: ST_TO_ADDR
// for j = 1 to k do
96201: LD_ADDR_VAR 0 8
96205: PUSH
96206: DOUBLE
96207: LD_INT 1
96209: DEC
96210: ST_TO_ADDR
96211: LD_VAR 0 9
96215: PUSH
96216: FOR_TO
96217: IFFALSE 96349
// begin if GetType ( tmp [ j ] ) = unit_building then
96219: LD_VAR 0 14
96223: PUSH
96224: LD_VAR 0 8
96228: ARRAY
96229: PPUSH
96230: CALL_OW 247
96234: PUSH
96235: LD_INT 3
96237: EQUAL
96238: IFFALSE 96347
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
96240: LD_VAR 0 14
96244: PUSH
96245: LD_VAR 0 8
96249: ARRAY
96250: PUSH
96251: LD_VAR 0 28
96255: IN
96256: NOT
96257: PUSH
96258: LD_VAR 0 14
96262: PUSH
96263: LD_VAR 0 8
96267: ARRAY
96268: PPUSH
96269: CALL_OW 313
96273: AND
96274: IFFALSE 96347
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
96276: LD_VAR 0 4
96280: PUSH
96281: LD_VAR 0 7
96285: ARRAY
96286: PPUSH
96287: LD_VAR 0 14
96291: PUSH
96292: LD_VAR 0 8
96296: ARRAY
96297: PPUSH
96298: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
96302: LD_ADDR_VAR 0 28
96306: PUSH
96307: LD_VAR 0 28
96311: PPUSH
96312: LD_VAR 0 28
96316: PUSH
96317: LD_INT 1
96319: PLUS
96320: PPUSH
96321: LD_VAR 0 14
96325: PUSH
96326: LD_VAR 0 8
96330: ARRAY
96331: PPUSH
96332: CALL_OW 1
96336: ST_TO_ADDR
// attacking := true ;
96337: LD_ADDR_VAR 0 29
96341: PUSH
96342: LD_INT 1
96344: ST_TO_ADDR
// break ;
96345: GO 96349
// end ; end ;
96347: GO 96216
96349: POP
96350: POP
// if not attacking and f_attack_depot then
96351: LD_VAR 0 29
96355: NOT
96356: PUSH
96357: LD_VAR 0 25
96361: AND
96362: IFFALSE 96457
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
96364: LD_ADDR_VAR 0 13
96368: PUSH
96369: LD_VAR 0 14
96373: PPUSH
96374: LD_INT 2
96376: PUSH
96377: LD_INT 30
96379: PUSH
96380: LD_INT 0
96382: PUSH
96383: EMPTY
96384: LIST
96385: LIST
96386: PUSH
96387: LD_INT 30
96389: PUSH
96390: LD_INT 1
96392: PUSH
96393: EMPTY
96394: LIST
96395: LIST
96396: PUSH
96397: EMPTY
96398: LIST
96399: LIST
96400: LIST
96401: PPUSH
96402: CALL_OW 72
96406: ST_TO_ADDR
// if z then
96407: LD_VAR 0 13
96411: IFFALSE 96457
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
96413: LD_VAR 0 4
96417: PUSH
96418: LD_VAR 0 7
96422: ARRAY
96423: PPUSH
96424: LD_VAR 0 13
96428: PPUSH
96429: LD_VAR 0 4
96433: PUSH
96434: LD_VAR 0 7
96438: ARRAY
96439: PPUSH
96440: CALL_OW 74
96444: PPUSH
96445: CALL_OW 115
// attacking := true ;
96449: LD_ADDR_VAR 0 29
96453: PUSH
96454: LD_INT 1
96456: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
96457: LD_VAR 0 4
96461: PUSH
96462: LD_VAR 0 7
96466: ARRAY
96467: PPUSH
96468: CALL_OW 256
96472: PUSH
96473: LD_INT 500
96475: LESS
96476: IFFALSE 96502
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96478: LD_VAR 0 4
96482: PUSH
96483: LD_VAR 0 7
96487: ARRAY
96488: PPUSH
96489: LD_VAR 0 14
96493: PUSH
96494: LD_INT 1
96496: ARRAY
96497: PPUSH
96498: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
96502: LD_VAR 0 4
96506: PUSH
96507: LD_VAR 0 7
96511: ARRAY
96512: PPUSH
96513: CALL_OW 264
96517: PUSH
96518: LD_INT 49
96520: EQUAL
96521: IFFALSE 96642
// begin if not HasTask ( group [ i ] ) then
96523: LD_VAR 0 4
96527: PUSH
96528: LD_VAR 0 7
96532: ARRAY
96533: PPUSH
96534: CALL_OW 314
96538: NOT
96539: IFFALSE 96642
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
96541: LD_ADDR_VAR 0 9
96545: PUSH
96546: LD_INT 81
96548: PUSH
96549: LD_VAR 0 4
96553: PUSH
96554: LD_VAR 0 7
96558: ARRAY
96559: PPUSH
96560: CALL_OW 255
96564: PUSH
96565: EMPTY
96566: LIST
96567: LIST
96568: PPUSH
96569: CALL_OW 69
96573: PPUSH
96574: LD_VAR 0 4
96578: PUSH
96579: LD_VAR 0 7
96583: ARRAY
96584: PPUSH
96585: CALL_OW 74
96589: ST_TO_ADDR
// if k then
96590: LD_VAR 0 9
96594: IFFALSE 96642
// if GetDistUnits ( group [ i ] , k ) > 10 then
96596: LD_VAR 0 4
96600: PUSH
96601: LD_VAR 0 7
96605: ARRAY
96606: PPUSH
96607: LD_VAR 0 9
96611: PPUSH
96612: CALL_OW 296
96616: PUSH
96617: LD_INT 10
96619: GREATER
96620: IFFALSE 96642
// ComMoveUnit ( group [ i ] , k ) ;
96622: LD_VAR 0 4
96626: PUSH
96627: LD_VAR 0 7
96631: ARRAY
96632: PPUSH
96633: LD_VAR 0 9
96637: PPUSH
96638: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
96642: LD_VAR 0 4
96646: PUSH
96647: LD_VAR 0 7
96651: ARRAY
96652: PPUSH
96653: CALL_OW 256
96657: PUSH
96658: LD_INT 250
96660: LESS
96661: PUSH
96662: LD_VAR 0 4
96666: PUSH
96667: LD_VAR 0 7
96671: ARRAY
96672: PUSH
96673: LD_INT 21
96675: PUSH
96676: LD_INT 2
96678: PUSH
96679: EMPTY
96680: LIST
96681: LIST
96682: PUSH
96683: LD_INT 23
96685: PUSH
96686: LD_INT 2
96688: PUSH
96689: EMPTY
96690: LIST
96691: LIST
96692: PUSH
96693: EMPTY
96694: LIST
96695: LIST
96696: PPUSH
96697: CALL_OW 69
96701: IN
96702: AND
96703: IFFALSE 96828
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
96705: LD_ADDR_VAR 0 9
96709: PUSH
96710: LD_OWVAR 3
96714: PUSH
96715: LD_VAR 0 4
96719: PUSH
96720: LD_VAR 0 7
96724: ARRAY
96725: DIFF
96726: PPUSH
96727: LD_VAR 0 4
96731: PUSH
96732: LD_VAR 0 7
96736: ARRAY
96737: PPUSH
96738: CALL_OW 74
96742: ST_TO_ADDR
// if not k then
96743: LD_VAR 0 9
96747: NOT
96748: IFFALSE 96752
// continue ;
96750: GO 93167
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
96752: LD_VAR 0 9
96756: PUSH
96757: LD_INT 81
96759: PUSH
96760: LD_VAR 0 4
96764: PUSH
96765: LD_VAR 0 7
96769: ARRAY
96770: PPUSH
96771: CALL_OW 255
96775: PUSH
96776: EMPTY
96777: LIST
96778: LIST
96779: PPUSH
96780: CALL_OW 69
96784: IN
96785: PUSH
96786: LD_VAR 0 9
96790: PPUSH
96791: LD_VAR 0 4
96795: PUSH
96796: LD_VAR 0 7
96800: ARRAY
96801: PPUSH
96802: CALL_OW 296
96806: PUSH
96807: LD_INT 5
96809: LESS
96810: AND
96811: IFFALSE 96828
// ComAutodestruct ( group [ i ] ) ;
96813: LD_VAR 0 4
96817: PUSH
96818: LD_VAR 0 7
96822: ARRAY
96823: PPUSH
96824: CALL 45498 0 1
// end ; if f_attack_depot then
96828: LD_VAR 0 25
96832: IFFALSE 96944
// begin k := 6 ;
96834: LD_ADDR_VAR 0 9
96838: PUSH
96839: LD_INT 6
96841: ST_TO_ADDR
// if tmp < k then
96842: LD_VAR 0 14
96846: PUSH
96847: LD_VAR 0 9
96851: LESS
96852: IFFALSE 96864
// k := tmp ;
96854: LD_ADDR_VAR 0 9
96858: PUSH
96859: LD_VAR 0 14
96863: ST_TO_ADDR
// for j = 1 to k do
96864: LD_ADDR_VAR 0 8
96868: PUSH
96869: DOUBLE
96870: LD_INT 1
96872: DEC
96873: ST_TO_ADDR
96874: LD_VAR 0 9
96878: PUSH
96879: FOR_TO
96880: IFFALSE 96942
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
96882: LD_VAR 0 8
96886: PPUSH
96887: CALL_OW 266
96891: PUSH
96892: LD_INT 0
96894: PUSH
96895: LD_INT 1
96897: PUSH
96898: EMPTY
96899: LIST
96900: LIST
96901: IN
96902: IFFALSE 96940
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
96904: LD_VAR 0 4
96908: PUSH
96909: LD_VAR 0 7
96913: ARRAY
96914: PPUSH
96915: LD_VAR 0 14
96919: PUSH
96920: LD_VAR 0 8
96924: ARRAY
96925: PPUSH
96926: CALL_OW 115
// attacking := true ;
96930: LD_ADDR_VAR 0 29
96934: PUSH
96935: LD_INT 1
96937: ST_TO_ADDR
// break ;
96938: GO 96942
// end ;
96940: GO 96879
96942: POP
96943: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
96944: LD_VAR 0 4
96948: PUSH
96949: LD_VAR 0 7
96953: ARRAY
96954: PPUSH
96955: CALL_OW 302
96959: PUSH
96960: LD_VAR 0 29
96964: NOT
96965: AND
96966: IFFALSE 97288
// begin if GetTag ( group [ i ] ) = 71 then
96968: LD_VAR 0 4
96972: PUSH
96973: LD_VAR 0 7
96977: ARRAY
96978: PPUSH
96979: CALL_OW 110
96983: PUSH
96984: LD_INT 71
96986: EQUAL
96987: IFFALSE 97028
// begin if HasTask ( group [ i ] ) then
96989: LD_VAR 0 4
96993: PUSH
96994: LD_VAR 0 7
96998: ARRAY
96999: PPUSH
97000: CALL_OW 314
97004: IFFALSE 97010
// continue else
97006: GO 93167
97008: GO 97028
// SetTag ( group [ i ] , 0 ) ;
97010: LD_VAR 0 4
97014: PUSH
97015: LD_VAR 0 7
97019: ARRAY
97020: PPUSH
97021: LD_INT 0
97023: PPUSH
97024: CALL_OW 109
// end ; k := 8 ;
97028: LD_ADDR_VAR 0 9
97032: PUSH
97033: LD_INT 8
97035: ST_TO_ADDR
// x := 0 ;
97036: LD_ADDR_VAR 0 10
97040: PUSH
97041: LD_INT 0
97043: ST_TO_ADDR
// if tmp < k then
97044: LD_VAR 0 14
97048: PUSH
97049: LD_VAR 0 9
97053: LESS
97054: IFFALSE 97066
// k := tmp ;
97056: LD_ADDR_VAR 0 9
97060: PUSH
97061: LD_VAR 0 14
97065: ST_TO_ADDR
// for j = 1 to k do
97066: LD_ADDR_VAR 0 8
97070: PUSH
97071: DOUBLE
97072: LD_INT 1
97074: DEC
97075: ST_TO_ADDR
97076: LD_VAR 0 9
97080: PUSH
97081: FOR_TO
97082: IFFALSE 97180
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
97084: LD_VAR 0 14
97088: PUSH
97089: LD_VAR 0 8
97093: ARRAY
97094: PPUSH
97095: CALL_OW 247
97099: PUSH
97100: LD_INT 1
97102: EQUAL
97103: PUSH
97104: LD_VAR 0 14
97108: PUSH
97109: LD_VAR 0 8
97113: ARRAY
97114: PPUSH
97115: CALL_OW 256
97119: PUSH
97120: LD_INT 250
97122: LESS
97123: PUSH
97124: LD_VAR 0 20
97128: AND
97129: PUSH
97130: LD_VAR 0 20
97134: NOT
97135: PUSH
97136: LD_VAR 0 14
97140: PUSH
97141: LD_VAR 0 8
97145: ARRAY
97146: PPUSH
97147: CALL_OW 256
97151: PUSH
97152: LD_INT 250
97154: GREATEREQUAL
97155: AND
97156: OR
97157: AND
97158: IFFALSE 97178
// begin x := tmp [ j ] ;
97160: LD_ADDR_VAR 0 10
97164: PUSH
97165: LD_VAR 0 14
97169: PUSH
97170: LD_VAR 0 8
97174: ARRAY
97175: ST_TO_ADDR
// break ;
97176: GO 97180
// end ;
97178: GO 97081
97180: POP
97181: POP
// if x then
97182: LD_VAR 0 10
97186: IFFALSE 97210
// ComAttackUnit ( group [ i ] , x ) else
97188: LD_VAR 0 4
97192: PUSH
97193: LD_VAR 0 7
97197: ARRAY
97198: PPUSH
97199: LD_VAR 0 10
97203: PPUSH
97204: CALL_OW 115
97208: GO 97234
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
97210: LD_VAR 0 4
97214: PUSH
97215: LD_VAR 0 7
97219: ARRAY
97220: PPUSH
97221: LD_VAR 0 14
97225: PUSH
97226: LD_INT 1
97228: ARRAY
97229: PPUSH
97230: CALL_OW 115
// if not HasTask ( group [ i ] ) then
97234: LD_VAR 0 4
97238: PUSH
97239: LD_VAR 0 7
97243: ARRAY
97244: PPUSH
97245: CALL_OW 314
97249: NOT
97250: IFFALSE 97288
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
97252: LD_VAR 0 4
97256: PUSH
97257: LD_VAR 0 7
97261: ARRAY
97262: PPUSH
97263: LD_VAR 0 14
97267: PPUSH
97268: LD_VAR 0 4
97272: PUSH
97273: LD_VAR 0 7
97277: ARRAY
97278: PPUSH
97279: CALL_OW 74
97283: PPUSH
97284: CALL_OW 115
// end ; end ; end ;
97288: GO 93167
97290: POP
97291: POP
// wait ( 0 0$2 ) ;
97292: LD_INT 70
97294: PPUSH
97295: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
97299: LD_VAR 0 4
97303: NOT
97304: PUSH
97305: LD_VAR 0 4
97309: PUSH
97310: EMPTY
97311: EQUAL
97312: OR
97313: PUSH
97314: LD_INT 81
97316: PUSH
97317: LD_VAR 0 35
97321: PUSH
97322: EMPTY
97323: LIST
97324: LIST
97325: PPUSH
97326: CALL_OW 69
97330: NOT
97331: OR
97332: IFFALSE 93152
// end ;
97334: LD_VAR 0 2
97338: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
97339: LD_INT 0
97341: PPUSH
97342: PPUSH
97343: PPUSH
97344: PPUSH
97345: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
97346: LD_VAR 0 1
97350: NOT
97351: PUSH
97352: LD_EXP 64
97356: PUSH
97357: LD_VAR 0 1
97361: ARRAY
97362: NOT
97363: OR
97364: PUSH
97365: LD_VAR 0 2
97369: NOT
97370: OR
97371: PUSH
97372: LD_VAR 0 3
97376: NOT
97377: OR
97378: IFFALSE 97382
// exit ;
97380: GO 97895
// side := mc_sides [ base ] ;
97382: LD_ADDR_VAR 0 6
97386: PUSH
97387: LD_EXP 90
97391: PUSH
97392: LD_VAR 0 1
97396: ARRAY
97397: ST_TO_ADDR
// if not side then
97398: LD_VAR 0 6
97402: NOT
97403: IFFALSE 97407
// exit ;
97405: GO 97895
// for i in solds do
97407: LD_ADDR_VAR 0 7
97411: PUSH
97412: LD_VAR 0 2
97416: PUSH
97417: FOR_IN
97418: IFFALSE 97479
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
97420: LD_VAR 0 7
97424: PPUSH
97425: CALL_OW 310
97429: PPUSH
97430: CALL_OW 266
97434: PUSH
97435: LD_INT 32
97437: PUSH
97438: LD_INT 31
97440: PUSH
97441: EMPTY
97442: LIST
97443: LIST
97444: IN
97445: IFFALSE 97465
// solds := solds diff i else
97447: LD_ADDR_VAR 0 2
97451: PUSH
97452: LD_VAR 0 2
97456: PUSH
97457: LD_VAR 0 7
97461: DIFF
97462: ST_TO_ADDR
97463: GO 97477
// SetTag ( i , 18 ) ;
97465: LD_VAR 0 7
97469: PPUSH
97470: LD_INT 18
97472: PPUSH
97473: CALL_OW 109
97477: GO 97417
97479: POP
97480: POP
// if not solds then
97481: LD_VAR 0 2
97485: NOT
97486: IFFALSE 97490
// exit ;
97488: GO 97895
// repeat wait ( 0 0$1 ) ;
97490: LD_INT 35
97492: PPUSH
97493: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
97497: LD_ADDR_VAR 0 5
97501: PUSH
97502: LD_VAR 0 6
97506: PPUSH
97507: LD_VAR 0 3
97511: PPUSH
97512: CALL 15213 0 2
97516: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97517: LD_EXP 64
97521: PUSH
97522: LD_VAR 0 1
97526: ARRAY
97527: NOT
97528: PUSH
97529: LD_EXP 64
97533: PUSH
97534: LD_VAR 0 1
97538: ARRAY
97539: PUSH
97540: EMPTY
97541: EQUAL
97542: OR
97543: IFFALSE 97580
// begin for i in solds do
97545: LD_ADDR_VAR 0 7
97549: PUSH
97550: LD_VAR 0 2
97554: PUSH
97555: FOR_IN
97556: IFFALSE 97569
// ComStop ( i ) ;
97558: LD_VAR 0 7
97562: PPUSH
97563: CALL_OW 141
97567: GO 97555
97569: POP
97570: POP
// solds := [ ] ;
97571: LD_ADDR_VAR 0 2
97575: PUSH
97576: EMPTY
97577: ST_TO_ADDR
// exit ;
97578: GO 97895
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
97580: LD_VAR 0 5
97584: NOT
97585: PUSH
97586: LD_VAR 0 5
97590: PUSH
97591: LD_INT 3
97593: GREATER
97594: OR
97595: PUSH
97596: LD_EXP 86
97600: PUSH
97601: LD_VAR 0 1
97605: ARRAY
97606: OR
97607: IFFALSE 97648
// begin for i in solds do
97609: LD_ADDR_VAR 0 7
97613: PUSH
97614: LD_VAR 0 2
97618: PUSH
97619: FOR_IN
97620: IFFALSE 97644
// if HasTask ( i ) then
97622: LD_VAR 0 7
97626: PPUSH
97627: CALL_OW 314
97631: IFFALSE 97642
// ComStop ( i ) ;
97633: LD_VAR 0 7
97637: PPUSH
97638: CALL_OW 141
97642: GO 97619
97644: POP
97645: POP
// break ;
97646: GO 97883
// end ; for i in solds do
97648: LD_ADDR_VAR 0 7
97652: PUSH
97653: LD_VAR 0 2
97657: PUSH
97658: FOR_IN
97659: IFFALSE 97875
// begin if IsInUnit ( i ) then
97661: LD_VAR 0 7
97665: PPUSH
97666: CALL_OW 310
97670: IFFALSE 97681
// ComExitBuilding ( i ) ;
97672: LD_VAR 0 7
97676: PPUSH
97677: CALL_OW 122
// if GetLives ( i ) > 333 then
97681: LD_VAR 0 7
97685: PPUSH
97686: CALL_OW 256
97690: PUSH
97691: LD_INT 333
97693: GREATER
97694: IFFALSE 97722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
97696: LD_VAR 0 7
97700: PPUSH
97701: LD_VAR 0 5
97705: PPUSH
97706: LD_VAR 0 7
97710: PPUSH
97711: CALL_OW 74
97715: PPUSH
97716: CALL_OW 115
97720: GO 97873
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
97722: LD_ADDR_VAR 0 8
97726: PUSH
97727: LD_EXP 64
97731: PUSH
97732: LD_VAR 0 1
97736: ARRAY
97737: PPUSH
97738: LD_INT 2
97740: PUSH
97741: LD_INT 30
97743: PUSH
97744: LD_INT 0
97746: PUSH
97747: EMPTY
97748: LIST
97749: LIST
97750: PUSH
97751: LD_INT 30
97753: PUSH
97754: LD_INT 1
97756: PUSH
97757: EMPTY
97758: LIST
97759: LIST
97760: PUSH
97761: LD_INT 30
97763: PUSH
97764: LD_INT 6
97766: PUSH
97767: EMPTY
97768: LIST
97769: LIST
97770: PUSH
97771: EMPTY
97772: LIST
97773: LIST
97774: LIST
97775: LIST
97776: PPUSH
97777: CALL_OW 72
97781: PPUSH
97782: LD_VAR 0 7
97786: PPUSH
97787: CALL_OW 74
97791: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
97792: LD_VAR 0 7
97796: PPUSH
97797: LD_VAR 0 8
97801: PPUSH
97802: CALL_OW 250
97806: PPUSH
97807: LD_INT 3
97809: PPUSH
97810: LD_INT 5
97812: PPUSH
97813: CALL_OW 272
97817: PPUSH
97818: LD_VAR 0 8
97822: PPUSH
97823: CALL_OW 251
97827: PPUSH
97828: LD_INT 3
97830: PPUSH
97831: LD_INT 5
97833: PPUSH
97834: CALL_OW 273
97838: PPUSH
97839: CALL_OW 111
// SetTag ( i , 0 ) ;
97843: LD_VAR 0 7
97847: PPUSH
97848: LD_INT 0
97850: PPUSH
97851: CALL_OW 109
// solds := solds diff i ;
97855: LD_ADDR_VAR 0 2
97859: PUSH
97860: LD_VAR 0 2
97864: PUSH
97865: LD_VAR 0 7
97869: DIFF
97870: ST_TO_ADDR
// continue ;
97871: GO 97658
// end ; end ;
97873: GO 97658
97875: POP
97876: POP
// until solds ;
97877: LD_VAR 0 2
97881: IFFALSE 97490
// MC_Reset ( base , 18 ) ;
97883: LD_VAR 0 1
97887: PPUSH
97888: LD_INT 18
97890: PPUSH
97891: CALL 54020 0 2
// end ;
97895: LD_VAR 0 4
97899: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
97900: LD_INT 0
97902: PPUSH
97903: PPUSH
97904: PPUSH
97905: PPUSH
97906: PPUSH
97907: PPUSH
97908: PPUSH
97909: PPUSH
97910: PPUSH
97911: PPUSH
97912: PPUSH
97913: PPUSH
97914: PPUSH
97915: PPUSH
97916: PPUSH
97917: PPUSH
97918: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
97919: LD_ADDR_VAR 0 13
97923: PUSH
97924: LD_EXP 64
97928: PUSH
97929: LD_VAR 0 1
97933: ARRAY
97934: PPUSH
97935: LD_INT 25
97937: PUSH
97938: LD_INT 3
97940: PUSH
97941: EMPTY
97942: LIST
97943: LIST
97944: PPUSH
97945: CALL_OW 72
97949: ST_TO_ADDR
// if mc_remote_driver [ base ] then
97950: LD_EXP 104
97954: PUSH
97955: LD_VAR 0 1
97959: ARRAY
97960: IFFALSE 97984
// mechs := mechs diff mc_remote_driver [ base ] ;
97962: LD_ADDR_VAR 0 13
97966: PUSH
97967: LD_VAR 0 13
97971: PUSH
97972: LD_EXP 104
97976: PUSH
97977: LD_VAR 0 1
97981: ARRAY
97982: DIFF
97983: ST_TO_ADDR
// for i in mechs do
97984: LD_ADDR_VAR 0 5
97988: PUSH
97989: LD_VAR 0 13
97993: PUSH
97994: FOR_IN
97995: IFFALSE 98030
// if GetTag ( i ) > 0 then
97997: LD_VAR 0 5
98001: PPUSH
98002: CALL_OW 110
98006: PUSH
98007: LD_INT 0
98009: GREATER
98010: IFFALSE 98028
// mechs := mechs diff i ;
98012: LD_ADDR_VAR 0 13
98016: PUSH
98017: LD_VAR 0 13
98021: PUSH
98022: LD_VAR 0 5
98026: DIFF
98027: ST_TO_ADDR
98028: GO 97994
98030: POP
98031: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
98032: LD_ADDR_VAR 0 9
98036: PUSH
98037: LD_EXP 64
98041: PUSH
98042: LD_VAR 0 1
98046: ARRAY
98047: PPUSH
98048: LD_INT 2
98050: PUSH
98051: LD_INT 25
98053: PUSH
98054: LD_INT 1
98056: PUSH
98057: EMPTY
98058: LIST
98059: LIST
98060: PUSH
98061: LD_INT 25
98063: PUSH
98064: LD_INT 5
98066: PUSH
98067: EMPTY
98068: LIST
98069: LIST
98070: PUSH
98071: LD_INT 25
98073: PUSH
98074: LD_INT 8
98076: PUSH
98077: EMPTY
98078: LIST
98079: LIST
98080: PUSH
98081: LD_INT 25
98083: PUSH
98084: LD_INT 9
98086: PUSH
98087: EMPTY
98088: LIST
98089: LIST
98090: PUSH
98091: EMPTY
98092: LIST
98093: LIST
98094: LIST
98095: LIST
98096: LIST
98097: PPUSH
98098: CALL_OW 72
98102: ST_TO_ADDR
// if not defenders and not solds then
98103: LD_VAR 0 2
98107: NOT
98108: PUSH
98109: LD_VAR 0 9
98113: NOT
98114: AND
98115: IFFALSE 98119
// exit ;
98117: GO 99745
// depot_under_attack := false ;
98119: LD_ADDR_VAR 0 17
98123: PUSH
98124: LD_INT 0
98126: ST_TO_ADDR
// sold_defenders := [ ] ;
98127: LD_ADDR_VAR 0 18
98131: PUSH
98132: EMPTY
98133: ST_TO_ADDR
// if mechs then
98134: LD_VAR 0 13
98138: IFFALSE 98267
// for i in defenders do
98140: LD_ADDR_VAR 0 5
98144: PUSH
98145: LD_VAR 0 2
98149: PUSH
98150: FOR_IN
98151: IFFALSE 98265
// begin SetTag ( i , 20 ) ;
98153: LD_VAR 0 5
98157: PPUSH
98158: LD_INT 20
98160: PPUSH
98161: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
98165: LD_VAR 0 5
98169: PPUSH
98170: CALL_OW 263
98174: PUSH
98175: LD_INT 1
98177: EQUAL
98178: PUSH
98179: LD_VAR 0 5
98183: PPUSH
98184: CALL_OW 311
98188: NOT
98189: AND
98190: PUSH
98191: LD_VAR 0 13
98195: AND
98196: IFFALSE 98263
// begin un := mechs [ 1 ] ;
98198: LD_ADDR_VAR 0 11
98202: PUSH
98203: LD_VAR 0 13
98207: PUSH
98208: LD_INT 1
98210: ARRAY
98211: ST_TO_ADDR
// ComExitBuilding ( un ) ;
98212: LD_VAR 0 11
98216: PPUSH
98217: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
98221: LD_VAR 0 11
98225: PPUSH
98226: LD_VAR 0 5
98230: PPUSH
98231: CALL_OW 180
// SetTag ( un , 19 ) ;
98235: LD_VAR 0 11
98239: PPUSH
98240: LD_INT 19
98242: PPUSH
98243: CALL_OW 109
// mechs := mechs diff un ;
98247: LD_ADDR_VAR 0 13
98251: PUSH
98252: LD_VAR 0 13
98256: PUSH
98257: LD_VAR 0 11
98261: DIFF
98262: ST_TO_ADDR
// end ; end ;
98263: GO 98150
98265: POP
98266: POP
// if solds then
98267: LD_VAR 0 9
98271: IFFALSE 98330
// for i in solds do
98273: LD_ADDR_VAR 0 5
98277: PUSH
98278: LD_VAR 0 9
98282: PUSH
98283: FOR_IN
98284: IFFALSE 98328
// if not GetTag ( i ) then
98286: LD_VAR 0 5
98290: PPUSH
98291: CALL_OW 110
98295: NOT
98296: IFFALSE 98326
// begin defenders := defenders union i ;
98298: LD_ADDR_VAR 0 2
98302: PUSH
98303: LD_VAR 0 2
98307: PUSH
98308: LD_VAR 0 5
98312: UNION
98313: ST_TO_ADDR
// SetTag ( i , 18 ) ;
98314: LD_VAR 0 5
98318: PPUSH
98319: LD_INT 18
98321: PPUSH
98322: CALL_OW 109
// end ;
98326: GO 98283
98328: POP
98329: POP
// repeat wait ( 0 0$1 ) ;
98330: LD_INT 35
98332: PPUSH
98333: CALL_OW 67
// enemy := mc_scan [ base ] ;
98337: LD_ADDR_VAR 0 3
98341: PUSH
98342: LD_EXP 87
98346: PUSH
98347: LD_VAR 0 1
98351: ARRAY
98352: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
98353: LD_EXP 64
98357: PUSH
98358: LD_VAR 0 1
98362: ARRAY
98363: NOT
98364: PUSH
98365: LD_EXP 64
98369: PUSH
98370: LD_VAR 0 1
98374: ARRAY
98375: PUSH
98376: EMPTY
98377: EQUAL
98378: OR
98379: IFFALSE 98416
// begin for i in defenders do
98381: LD_ADDR_VAR 0 5
98385: PUSH
98386: LD_VAR 0 2
98390: PUSH
98391: FOR_IN
98392: IFFALSE 98405
// ComStop ( i ) ;
98394: LD_VAR 0 5
98398: PPUSH
98399: CALL_OW 141
98403: GO 98391
98405: POP
98406: POP
// defenders := [ ] ;
98407: LD_ADDR_VAR 0 2
98411: PUSH
98412: EMPTY
98413: ST_TO_ADDR
// exit ;
98414: GO 99745
// end ; for i in defenders do
98416: LD_ADDR_VAR 0 5
98420: PUSH
98421: LD_VAR 0 2
98425: PUSH
98426: FOR_IN
98427: IFFALSE 99245
// begin e := NearestUnitToUnit ( enemy , i ) ;
98429: LD_ADDR_VAR 0 14
98433: PUSH
98434: LD_VAR 0 3
98438: PPUSH
98439: LD_VAR 0 5
98443: PPUSH
98444: CALL_OW 74
98448: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
98449: LD_ADDR_VAR 0 8
98453: PUSH
98454: LD_EXP 64
98458: PUSH
98459: LD_VAR 0 1
98463: ARRAY
98464: PPUSH
98465: LD_INT 2
98467: PUSH
98468: LD_INT 30
98470: PUSH
98471: LD_INT 0
98473: PUSH
98474: EMPTY
98475: LIST
98476: LIST
98477: PUSH
98478: LD_INT 30
98480: PUSH
98481: LD_INT 1
98483: PUSH
98484: EMPTY
98485: LIST
98486: LIST
98487: PUSH
98488: EMPTY
98489: LIST
98490: LIST
98491: LIST
98492: PPUSH
98493: CALL_OW 72
98497: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
98498: LD_ADDR_VAR 0 17
98502: PUSH
98503: LD_VAR 0 8
98507: NOT
98508: PUSH
98509: LD_VAR 0 8
98513: PPUSH
98514: LD_INT 3
98516: PUSH
98517: LD_INT 24
98519: PUSH
98520: LD_INT 600
98522: PUSH
98523: EMPTY
98524: LIST
98525: LIST
98526: PUSH
98527: EMPTY
98528: LIST
98529: LIST
98530: PPUSH
98531: CALL_OW 72
98535: OR
98536: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
98537: LD_VAR 0 5
98541: PPUSH
98542: CALL_OW 247
98546: PUSH
98547: LD_INT 2
98549: DOUBLE
98550: EQUAL
98551: IFTRUE 98555
98553: GO 98951
98555: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
98556: LD_VAR 0 5
98560: PPUSH
98561: CALL_OW 256
98565: PUSH
98566: LD_INT 650
98568: GREATER
98569: PUSH
98570: LD_VAR 0 5
98574: PPUSH
98575: LD_VAR 0 14
98579: PPUSH
98580: CALL_OW 296
98584: PUSH
98585: LD_INT 40
98587: LESS
98588: PUSH
98589: LD_VAR 0 14
98593: PPUSH
98594: LD_EXP 89
98598: PUSH
98599: LD_VAR 0 1
98603: ARRAY
98604: PPUSH
98605: CALL_OW 308
98609: OR
98610: AND
98611: IFFALSE 98733
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
98613: LD_VAR 0 5
98617: PPUSH
98618: CALL_OW 262
98622: PUSH
98623: LD_INT 1
98625: EQUAL
98626: PUSH
98627: LD_VAR 0 5
98631: PPUSH
98632: CALL_OW 261
98636: PUSH
98637: LD_INT 30
98639: LESS
98640: AND
98641: PUSH
98642: LD_VAR 0 8
98646: AND
98647: IFFALSE 98717
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
98649: LD_VAR 0 5
98653: PPUSH
98654: LD_VAR 0 8
98658: PPUSH
98659: LD_VAR 0 5
98663: PPUSH
98664: CALL_OW 74
98668: PPUSH
98669: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
98673: LD_VAR 0 5
98677: PPUSH
98678: LD_VAR 0 8
98682: PPUSH
98683: LD_VAR 0 5
98687: PPUSH
98688: CALL_OW 74
98692: PPUSH
98693: CALL_OW 296
98697: PUSH
98698: LD_INT 6
98700: LESS
98701: IFFALSE 98715
// SetFuel ( i , 100 ) ;
98703: LD_VAR 0 5
98707: PPUSH
98708: LD_INT 100
98710: PPUSH
98711: CALL_OW 240
// end else
98715: GO 98731
// ComAttackUnit ( i , e ) ;
98717: LD_VAR 0 5
98721: PPUSH
98722: LD_VAR 0 14
98726: PPUSH
98727: CALL_OW 115
// end else
98731: GO 98834
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
98733: LD_VAR 0 14
98737: PPUSH
98738: LD_EXP 89
98742: PUSH
98743: LD_VAR 0 1
98747: ARRAY
98748: PPUSH
98749: CALL_OW 308
98753: NOT
98754: PUSH
98755: LD_VAR 0 5
98759: PPUSH
98760: LD_VAR 0 14
98764: PPUSH
98765: CALL_OW 296
98769: PUSH
98770: LD_INT 40
98772: GREATEREQUAL
98773: AND
98774: PUSH
98775: LD_VAR 0 5
98779: PPUSH
98780: CALL_OW 256
98784: PUSH
98785: LD_INT 650
98787: LESSEQUAL
98788: OR
98789: PUSH
98790: LD_VAR 0 5
98794: PPUSH
98795: LD_EXP 88
98799: PUSH
98800: LD_VAR 0 1
98804: ARRAY
98805: PPUSH
98806: CALL_OW 308
98810: NOT
98811: AND
98812: IFFALSE 98834
// ComMoveToArea ( i , mc_parking [ base ] ) ;
98814: LD_VAR 0 5
98818: PPUSH
98819: LD_EXP 88
98823: PUSH
98824: LD_VAR 0 1
98828: ARRAY
98829: PPUSH
98830: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
98834: LD_VAR 0 5
98838: PPUSH
98839: CALL_OW 256
98843: PUSH
98844: LD_INT 998
98846: LESS
98847: PUSH
98848: LD_VAR 0 5
98852: PPUSH
98853: CALL_OW 263
98857: PUSH
98858: LD_INT 1
98860: EQUAL
98861: AND
98862: PUSH
98863: LD_VAR 0 5
98867: PPUSH
98868: CALL_OW 311
98872: AND
98873: PUSH
98874: LD_VAR 0 5
98878: PPUSH
98879: LD_EXP 88
98883: PUSH
98884: LD_VAR 0 1
98888: ARRAY
98889: PPUSH
98890: CALL_OW 308
98894: AND
98895: IFFALSE 98949
// begin mech := IsDrivenBy ( i ) ;
98897: LD_ADDR_VAR 0 10
98901: PUSH
98902: LD_VAR 0 5
98906: PPUSH
98907: CALL_OW 311
98911: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
98912: LD_VAR 0 10
98916: PPUSH
98917: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
98921: LD_VAR 0 10
98925: PPUSH
98926: LD_VAR 0 5
98930: PPUSH
98931: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
98935: LD_VAR 0 10
98939: PPUSH
98940: LD_VAR 0 5
98944: PPUSH
98945: CALL_OW 180
// end ; end ; unit_human :
98949: GO 99216
98951: LD_INT 1
98953: DOUBLE
98954: EQUAL
98955: IFTRUE 98959
98957: GO 99215
98959: POP
// begin b := IsInUnit ( i ) ;
98960: LD_ADDR_VAR 0 19
98964: PUSH
98965: LD_VAR 0 5
98969: PPUSH
98970: CALL_OW 310
98974: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
98975: LD_ADDR_VAR 0 20
98979: PUSH
98980: LD_VAR 0 19
98984: NOT
98985: PUSH
98986: LD_VAR 0 19
98990: PPUSH
98991: CALL_OW 266
98995: PUSH
98996: LD_INT 32
98998: PUSH
98999: LD_INT 31
99001: PUSH
99002: EMPTY
99003: LIST
99004: LIST
99005: IN
99006: OR
99007: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
99008: LD_VAR 0 17
99012: PUSH
99013: LD_VAR 0 2
99017: PPUSH
99018: LD_INT 21
99020: PUSH
99021: LD_INT 2
99023: PUSH
99024: EMPTY
99025: LIST
99026: LIST
99027: PPUSH
99028: CALL_OW 72
99032: PUSH
99033: LD_INT 1
99035: LESSEQUAL
99036: OR
99037: PUSH
99038: LD_VAR 0 20
99042: AND
99043: PUSH
99044: LD_VAR 0 5
99048: PUSH
99049: LD_VAR 0 18
99053: IN
99054: NOT
99055: AND
99056: IFFALSE 99149
// begin if b then
99058: LD_VAR 0 19
99062: IFFALSE 99111
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
99064: LD_VAR 0 19
99068: PPUSH
99069: LD_VAR 0 3
99073: PPUSH
99074: LD_VAR 0 19
99078: PPUSH
99079: CALL_OW 74
99083: PPUSH
99084: CALL_OW 296
99088: PUSH
99089: LD_INT 10
99091: LESS
99092: PUSH
99093: LD_VAR 0 19
99097: PPUSH
99098: CALL_OW 461
99102: PUSH
99103: LD_INT 7
99105: NONEQUAL
99106: AND
99107: IFFALSE 99111
// continue ;
99109: GO 98426
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
99111: LD_ADDR_VAR 0 18
99115: PUSH
99116: LD_VAR 0 18
99120: PPUSH
99121: LD_VAR 0 18
99125: PUSH
99126: LD_INT 1
99128: PLUS
99129: PPUSH
99130: LD_VAR 0 5
99134: PPUSH
99135: CALL_OW 1
99139: ST_TO_ADDR
// ComExitBuilding ( i ) ;
99140: LD_VAR 0 5
99144: PPUSH
99145: CALL_OW 122
// end ; if sold_defenders then
99149: LD_VAR 0 18
99153: IFFALSE 99213
// if i in sold_defenders then
99155: LD_VAR 0 5
99159: PUSH
99160: LD_VAR 0 18
99164: IN
99165: IFFALSE 99213
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
99167: LD_VAR 0 5
99171: PPUSH
99172: CALL_OW 314
99176: NOT
99177: PUSH
99178: LD_VAR 0 5
99182: PPUSH
99183: LD_VAR 0 14
99187: PPUSH
99188: CALL_OW 296
99192: PUSH
99193: LD_INT 30
99195: LESS
99196: AND
99197: IFFALSE 99213
// ComAttackUnit ( i , e ) ;
99199: LD_VAR 0 5
99203: PPUSH
99204: LD_VAR 0 14
99208: PPUSH
99209: CALL_OW 115
// end ; end ; end ;
99213: GO 99216
99215: POP
// if IsDead ( i ) then
99216: LD_VAR 0 5
99220: PPUSH
99221: CALL_OW 301
99225: IFFALSE 99243
// defenders := defenders diff i ;
99227: LD_ADDR_VAR 0 2
99231: PUSH
99232: LD_VAR 0 2
99236: PUSH
99237: LD_VAR 0 5
99241: DIFF
99242: ST_TO_ADDR
// end ;
99243: GO 98426
99245: POP
99246: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
99247: LD_VAR 0 3
99251: NOT
99252: PUSH
99253: LD_VAR 0 2
99257: NOT
99258: OR
99259: PUSH
99260: LD_EXP 64
99264: PUSH
99265: LD_VAR 0 1
99269: ARRAY
99270: NOT
99271: OR
99272: IFFALSE 98330
// MC_Reset ( base , 18 ) ;
99274: LD_VAR 0 1
99278: PPUSH
99279: LD_INT 18
99281: PPUSH
99282: CALL 54020 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
99286: LD_ADDR_VAR 0 2
99290: PUSH
99291: LD_VAR 0 2
99295: PUSH
99296: LD_VAR 0 2
99300: PPUSH
99301: LD_INT 2
99303: PUSH
99304: LD_INT 25
99306: PUSH
99307: LD_INT 1
99309: PUSH
99310: EMPTY
99311: LIST
99312: LIST
99313: PUSH
99314: LD_INT 25
99316: PUSH
99317: LD_INT 5
99319: PUSH
99320: EMPTY
99321: LIST
99322: LIST
99323: PUSH
99324: LD_INT 25
99326: PUSH
99327: LD_INT 8
99329: PUSH
99330: EMPTY
99331: LIST
99332: LIST
99333: PUSH
99334: LD_INT 25
99336: PUSH
99337: LD_INT 9
99339: PUSH
99340: EMPTY
99341: LIST
99342: LIST
99343: PUSH
99344: EMPTY
99345: LIST
99346: LIST
99347: LIST
99348: LIST
99349: LIST
99350: PPUSH
99351: CALL_OW 72
99355: DIFF
99356: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
99357: LD_VAR 0 3
99361: NOT
99362: PUSH
99363: LD_VAR 0 2
99367: PPUSH
99368: LD_INT 21
99370: PUSH
99371: LD_INT 2
99373: PUSH
99374: EMPTY
99375: LIST
99376: LIST
99377: PPUSH
99378: CALL_OW 72
99382: AND
99383: IFFALSE 99721
// begin tmp := FilterByTag ( defenders , 19 ) ;
99385: LD_ADDR_VAR 0 12
99389: PUSH
99390: LD_VAR 0 2
99394: PPUSH
99395: LD_INT 19
99397: PPUSH
99398: CALL 46973 0 2
99402: ST_TO_ADDR
// if tmp then
99403: LD_VAR 0 12
99407: IFFALSE 99477
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
99409: LD_ADDR_VAR 0 12
99413: PUSH
99414: LD_VAR 0 12
99418: PPUSH
99419: LD_INT 25
99421: PUSH
99422: LD_INT 3
99424: PUSH
99425: EMPTY
99426: LIST
99427: LIST
99428: PPUSH
99429: CALL_OW 72
99433: ST_TO_ADDR
// if tmp then
99434: LD_VAR 0 12
99438: IFFALSE 99477
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
99440: LD_ADDR_EXP 76
99444: PUSH
99445: LD_EXP 76
99449: PPUSH
99450: LD_VAR 0 1
99454: PPUSH
99455: LD_EXP 76
99459: PUSH
99460: LD_VAR 0 1
99464: ARRAY
99465: PUSH
99466: LD_VAR 0 12
99470: UNION
99471: PPUSH
99472: CALL_OW 1
99476: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
99477: LD_VAR 0 1
99481: PPUSH
99482: LD_INT 19
99484: PPUSH
99485: CALL 54020 0 2
// repeat wait ( 0 0$1 ) ;
99489: LD_INT 35
99491: PPUSH
99492: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
99496: LD_EXP 64
99500: PUSH
99501: LD_VAR 0 1
99505: ARRAY
99506: NOT
99507: PUSH
99508: LD_EXP 64
99512: PUSH
99513: LD_VAR 0 1
99517: ARRAY
99518: PUSH
99519: EMPTY
99520: EQUAL
99521: OR
99522: IFFALSE 99559
// begin for i in defenders do
99524: LD_ADDR_VAR 0 5
99528: PUSH
99529: LD_VAR 0 2
99533: PUSH
99534: FOR_IN
99535: IFFALSE 99548
// ComStop ( i ) ;
99537: LD_VAR 0 5
99541: PPUSH
99542: CALL_OW 141
99546: GO 99534
99548: POP
99549: POP
// defenders := [ ] ;
99550: LD_ADDR_VAR 0 2
99554: PUSH
99555: EMPTY
99556: ST_TO_ADDR
// exit ;
99557: GO 99745
// end ; for i in defenders do
99559: LD_ADDR_VAR 0 5
99563: PUSH
99564: LD_VAR 0 2
99568: PUSH
99569: FOR_IN
99570: IFFALSE 99659
// begin if not IsInArea ( i , mc_parking [ base ] ) then
99572: LD_VAR 0 5
99576: PPUSH
99577: LD_EXP 88
99581: PUSH
99582: LD_VAR 0 1
99586: ARRAY
99587: PPUSH
99588: CALL_OW 308
99592: NOT
99593: IFFALSE 99617
// ComMoveToArea ( i , mc_parking [ base ] ) else
99595: LD_VAR 0 5
99599: PPUSH
99600: LD_EXP 88
99604: PUSH
99605: LD_VAR 0 1
99609: ARRAY
99610: PPUSH
99611: CALL_OW 113
99615: GO 99657
// if GetControl ( i ) = control_manual then
99617: LD_VAR 0 5
99621: PPUSH
99622: CALL_OW 263
99626: PUSH
99627: LD_INT 1
99629: EQUAL
99630: IFFALSE 99657
// if IsDrivenBy ( i ) then
99632: LD_VAR 0 5
99636: PPUSH
99637: CALL_OW 311
99641: IFFALSE 99657
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
99643: LD_VAR 0 5
99647: PPUSH
99648: CALL_OW 311
99652: PPUSH
99653: CALL_OW 121
// end ;
99657: GO 99569
99659: POP
99660: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
99661: LD_VAR 0 2
99665: PPUSH
99666: LD_INT 95
99668: PUSH
99669: LD_EXP 88
99673: PUSH
99674: LD_VAR 0 1
99678: ARRAY
99679: PUSH
99680: EMPTY
99681: LIST
99682: LIST
99683: PPUSH
99684: CALL_OW 72
99688: PUSH
99689: LD_VAR 0 2
99693: EQUAL
99694: PUSH
99695: LD_EXP 87
99699: PUSH
99700: LD_VAR 0 1
99704: ARRAY
99705: OR
99706: PUSH
99707: LD_EXP 64
99711: PUSH
99712: LD_VAR 0 1
99716: ARRAY
99717: NOT
99718: OR
99719: IFFALSE 99489
// end ; MC_Reset ( base , 19 ) ;
99721: LD_VAR 0 1
99725: PPUSH
99726: LD_INT 19
99728: PPUSH
99729: CALL 54020 0 2
// MC_Reset ( base , 20 ) ;
99733: LD_VAR 0 1
99737: PPUSH
99738: LD_INT 20
99740: PPUSH
99741: CALL 54020 0 2
// end ;
99745: LD_VAR 0 4
99749: RET
